class C{  public ColumnList addColumn(byte[] family,byte[] qualifier,byte[] value){  columns().add(new Column(family,qualifier,-1,value));  return this;}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public void appendConsoleErr(String line){  appendConsoleRaw(String.format("[stdERR] %s%n",line));}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("Usage: StorageSample <bucket-name>");    System.exit(1);  }  String bucketName=args[0];  try {    Bucket bucket=getBucket(bucketName);    System.out.println("name: " + bucketName);    System.out.println("location: " + bucket.getLocation());    System.out.println("timeCreated: " + bucket.getTimeCreated());    System.out.println("owner: " + bucket.getOwner());    List<StorageObject> bucketContents=listBucket(bucketName);    if (null == bucketContents) {      System.out.println("There were no objects in the given bucket; try adding some and re-running.");    }    for (    StorageObject object : bucketContents) {      System.out.println(object.getName() + " (" + object.getSize()+ " bytes)");    }    Path tempPath=Files.createTempFile("StorageSample","txt");    Files.write(tempPath,"Sample file".getBytes());    File tempFile=tempPath.toFile();    tempFile.deleteOnExit();    uploadFile(TEST_FILENAME,"text/plain",tempFile,bucketName);    deleteObject(TEST_FILENAME,bucketName);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }catch (  Throwable t) {    t.printStackTrace();    System.exit(1);  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  private static Properties loadSecretProperties() throws Exception {  Properties properties=new Properties();  InputStream propertiesStream=GetUserProfile.class.getClassLoader().getResourceAsStream("secrets.properties");  if (propertiesStream == null) {    File buildPropertiesFile=new File("src/main/resources/secrets.properties");    if (buildPropertiesFile.exists()) {      properties.load(new FileReader(buildPropertiesFile));    } else {      buildPropertiesFile=new File("samples/cmdline-sample/src/main/resources/secrets.properties");      if (buildPropertiesFile.exists()) {        properties.load(new FileReader(buildPropertiesFile));      } else {        throw new IllegalStateException("Could not find secrets.properties");      }    }  } else {    properties.load(propertiesStream);  }  return properties;}  }
class C{  @Override public String toString(){  return "FastDateFormat[" + printer.getPattern() + ","+ printer.getLocale()+ ","+ printer.getTimeZone().getID()+ "]";}  }
class C{  public void revertNameChange(){  EntityFigure entityFigure=getFigure();  EditableLabel label=entityFigure.getNameLabel();  ERDEntity entity=getTable();  label.setText(entity.getObject().getName());  label.setVisible(true);  refreshVisuals();}  }
class C{  public boolean isChromeFrame(){  return isChromeFrame;}  }
class C{  public IsActiveException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void paintOsmData(final Canvas canvas){  List<Node> paintNodes=delegator.getCurrentStorage().getNodes(getViewBox());  if (tmpDrawingSelectedNodes != null) {    for (    Node n : tmpDrawingSelectedNodes) {      if (!paintNodes.contains(n)) {        paintNodes.add(n);      }    }  }  tmpDrawingInEditRange=Application.getLogic().isInEditZoomRange();  List<Way> ways=delegator.getCurrentStorage().getWays();  for (int i=0, size=ways.size(); i < size; ++i) {    paintWay(canvas,ways.get(i));  }  Boolean hwAccelarationWorkaround=myIsHardwareAccelerated(canvas) && Build.VERSION.SDK_INT < 19;  for (  Node n : paintNodes) {    paintNode(canvas,n,hwAccelarationWorkaround);  }  paintHandles(canvas);}  }
class C{  public boolean intersects(Rectangle2D r,double margin){  double tw=clip[6] - clip[0];  double th=clip[7] - clip[1];  double rw=r.getWidth();  double rh=r.getHeight();  if (rw < 0 || rh < 0 || tw < 0 || th < 0) {    return false;  }  double tx=clip[0];  double ty=clip[1];  double rx=r.getX() - margin;  double ry=r.getY() - margin;  rw+=rx + 2 * margin;  rh+=ry + 2 * margin;  tw+=tx;  th+=ty;  return ((rw < rx || rw > tx) && (rh < ry || rh > ty) && (tw < tx || tw > rx)&& (th < ty || th > ry));}  }
class C{  public double[] generateRandomData(int length,double min,double max){  double[] data=new double[length];  for (int i=0; i < length; i++) {    data[i]=min + random.nextDouble() * (max - min);  }  return data;}  }
class C{  @RequestMapping(value="/table/owner",method=RequestMethod.POST) public String changeOwner(HttpServletRequest request,RedirectAttributes redirAttr,String fqdn,String person){  tableEntityService.setPersonResponsible(fqdn,person);  redirAttr.addFlashAttribute("personResponsible",person);  return "redirect:" + request.getHeader("Referer");}  }
class C{  @org.junit.Test public void verifyGetFloatResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveFloatResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,String.valueOf(ExampleBuilder.SAMPLE_FLOAT_PROPERTY_VALUE));}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public void clear(){  list.clear();}  }
class C{  public OutputNode bottom(){  int size=size();  if (size <= 0) {    return null;  }  return get(0);}  }
class C{  private void markCycles(){  List<FlinkProcessingItem> pis=Lists.newArrayList(Iterables.filter(getProcessingItems(),FlinkProcessingItem.class));  List<Integer>[] graph=new List[pis.size()];  FlinkProcessingItem[] processingItems=new FlinkProcessingItem[pis.size()];  for (int i=0; i < pis.size(); i++) {    graph[i]=new ArrayList<>();  }  for (  FlinkProcessingItem pi : pis) {    processingItems[pi.getComponentId()]=pi;    for (    Tuple3<FlinkStream,PartitioningScheme,Integer> is : pi.getInputStreams()) {      if (is.f2 != -1)       graph[is.f2].add(pi.getComponentId());    }  }  for (int g=0; g < graph.length; g++)   logger.debug(graph[g].toString());  CycleDetection detCycles=new CycleDetection();  List<List<Integer>> graphCycles=detCycles.getCycles(graph);  for (  List<Integer> c : graphCycles) {    List<FlinkProcessingItem> cycle=new ArrayList<>();    for (    Integer it : c) {      cycle.add(processingItems[it]);      processingItems[it].addPItoCycle(cycles.size());    }    cycles.add(cycle);    backEdges.add(cycle.get(0).getComponentId());  }  logger.debug("Cycles detected in the topology: " + graphCycles);}  }
class C{  @Override public void addSequence(final Array datum){  for (int i=0; i < datum.size(); i++) {    add(datum.get(i));  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  @Override public void foundActiveMaster(Protocol protocol) throws QueryException {  if (isExplicitClosed()) {    proxy.lock.lock();    try {      protocol.close();    }  finally {      proxy.lock.unlock();    }    return;  }  syncConnection(this.currentProtocol,protocol);  proxy.lock.lock();  try {    if (currentProtocol != null && !currentProtocol.isClosed()) {      currentProtocol.close();    }    currentProtocol=protocol;  }  finally {    proxy.lock.unlock();  }  resetMasterFailoverData();  FailoverLoop.removeListener(this);}  }
class C{  public void tryToDeleteGeolocSharings(){  mGeolocSharingDeleteOperationHandler.post(new GeolocSharingDeleteTask(mGeolocSharingService,this,mLocalContentResolver));}  }
class C{  public static int convertToDip(DisplayMetrics displayMetrics,int sizeInPixels){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,sizeInPixels,displayMetrics);}  }
class C{  public void registerAsyncEventListener(AsyncEventListener listener){synchronized (eventLock) {    List<AsyncEventListener> oldListeners=this.eventListeners;    if (!oldListeners.contains(listener)) {      List<AsyncEventListener> newListeners=new ArrayList<AsyncEventListener>(oldListeners);      newListeners.add(listener);      this.eventListeners=newListeners;    }  }}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  super.finalize();}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  String ns=extFunction.getNamespace();  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(extFunction,argVec,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,extFunction.getFunctionName()}));    }  }  return result;}  }
class C{  void parse(PrintWriter out){  String prefix=new String(hex,0,4);  if (!prefix.equals("IOR:")) {    System.err.println("Invalid IOR");    System.err.println("The first four bytes should be: 'IOR:'");    System.err.println("Found: " + prefix);    System.exit(1);  }  int iorLength=(hex.length - 4) / 2;  byte[] ior=new byte[iorLength];  for (int hexIndex=4, iorIndex=0; hexIndex < hex.length; hexIndex+=2, iorIndex++) {    try {      ior[iorIndex]=(byte)((hexByteToInt(hex[hexIndex]) << 4) + (hexByteToInt(hex[hexIndex + 1])));    } catch (    NumberFormatException e) {      System.err.println("Index: " + hexIndex);      System.err.println(e);      return;    }  }  if (debug) {    for (int i=0; i < iorLength; i++) {      System.out.println(i + ": " + ior[i]+ ", "+ (char)ior[i]);    }  }  DataPointer dp=new DataPointer(debug);  int endian=getLongAt(dp,ior);  if (endian == 0)   out.println("Big Endian"); else   out.println("Little Endian");  int type_id_length=getLongAt(dp,ior);  if (verbose) {    out.println("type id length = " + type_id_length);  }  String type_id=getStringAt(dp,ior,type_id_length);  out.println("Type ID = \"" + type_id + "\"");  int nProfiles=getLongAt(dp,ior);  if (nProfiles < 0) {    System.err.println("Found " + nProfiles + " profiles.  Aborting");    System.exit(1);  }  if (verbose) {    if (nProfiles == 0) {      out.println("There are no profiles.");    } else     if (nProfiles == 1) {      out.println("There is 1 profile.");    } else {      out.println("There are " + nProfiles + " profiles.");    }  }  for (int p=0; p < nProfiles; p++) {    int ProfileID=getLongAt(dp,ior);    out.println("Profile " + p + ": ");    if (ProfileID == 0) {      out.println("\tID: TAG_INTERNET_IOP");      int profileDataLength=getLongAt(dp,ior);      if (verbose) {        out.println("\tProfile length: " + profileDataLength);      }      int major=getShortAt(dp,ior);      int minor=getShortAt(dp,ior);      out.println("\tIIOP Version: " + major + "."+ minor);      int hostLength=getLongAt(dp,ior);      String host=getStringAt(dp,ior,hostLength);      out.println("\tHost: " + host);      int port=getShortAt(dp,ior);      out.println("\tPort: " + port);      int objectKeyLength=getLongAt(dp,ior);      if (verbose) {        out.println("\tObject Key Length: " + objectKeyLength);      }      String objectKey=getStringAt(dp,ior,objectKeyLength);      out.println("\tObject Key: \"" + objectKey + "\"");    } else     if (ProfileID == 1) {      out.println("\tID: TAG_MULTIPLE_COMPONENTS");      int profileDataLength=getLongAt(dp,ior);      out.println("\tProfile length: " + profileDataLength);      dp.incPointer(profileDataLength);    } else {      out.println("Unknown, value is " + ProfileID);      return;    }  }  if (dp.getPointer() == iorLength) {    out.println("IOR read successfully");  } else   if (dp.getPointer() > iorLength) {    System.err.println("Failure! Overran buffer.");  } else   if (dp.getPointer() < iorLength) {    System.err.println("Failure! Incomplete read.");  } else {    System.err.println("Failure! Unknown state.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.753 -0500",hash_original_method="70EAD3302E25E04AF22ADA1536C85D6E",hash_generated_method="A8674915D5E39BE837C95C2863FD04C6") public boolean allowMassStorage(){  return mAllowMassStorage;}  }
class C{  private void rDetermineBounds(StatementBlock sb,boolean flag) throws LanguageException {  for (  Statement s : sb._statements) {    boolean lFlag=flag;    if (s instanceof ParForStatement || (s instanceof ForStatement && CONSERVATIVE_CHECK)) {      ForStatement fs=(ForStatement)s;      IterablePredicate ip=fs._predicate;      if (sb == this)       lFlag=true;      if (lFlag || rIsParent(sb,this)) {        if (ip.getIterVar()._name.equals(INTERAL_FN_INDEX_ROW) || ip.getIterVar()._name.equals(INTERAL_FN_INDEX_COL)) {          throw new LanguageException(" The iteration variable must not use the " + "internal iteration variable name prefix '" + ip.getIterVar()._name + "'.");        }        long low=Integer.MIN_VALUE;        long up=Integer.MAX_VALUE;        long incr=-1;        if (ip.getFromExpr() instanceof IntIdentifier)         low=((IntIdentifier)ip.getFromExpr()).getValue();        if (ip.getToExpr() instanceof IntIdentifier)         up=((IntIdentifier)ip.getToExpr()).getValue();        if (ip.getIncrementExpr() instanceof IntIdentifier)         incr=((IntIdentifier)ip.getIncrementExpr()).getValue(); else         incr=(low <= up) ? 1 : -1;        _bounds._lower.put(ip.getIterVar()._name,low);        _bounds._upper.put(ip.getIterVar()._name,up);        _bounds._increment.put(ip.getIterVar()._name,incr);        if (lFlag)         _bounds._local.add(ip.getIterVar()._name);      }      if (!lFlag) {        ArrayList<StatementBlock> tmp=fs.getBody();        if (tmp != null)         rDetermineBounds(tmp,lFlag);      }    } else     if (s instanceof ForStatement) {      ArrayList<StatementBlock> tmp=((ForStatement)s).getBody();      if (tmp != null)       rDetermineBounds(tmp,lFlag);    } else     if (s instanceof WhileStatement) {      ArrayList<StatementBlock> tmp=((WhileStatement)s).getBody();      if (tmp != null)       rDetermineBounds(tmp,lFlag);    } else     if (s instanceof IfStatement) {      ArrayList<StatementBlock> tmp=((IfStatement)s).getIfBody();      if (tmp != null)       rDetermineBounds(tmp,lFlag);      ArrayList<StatementBlock> tmp2=((IfStatement)s).getElseBody();      if (tmp2 != null)       rDetermineBounds(tmp2,lFlag);    } else     if (s instanceof FunctionStatement) {      ArrayList<StatementBlock> tmp=((FunctionStatement)s).getBody();      if (tmp != null)       rDetermineBounds(tmp,lFlag);    }  }}  }
class C{  private int drain(byte[] b,int off,int len){  int remaining=Math.min(len,byteBuffer.remaining());  byteBuffer.get(b,off,remaining);  return remaining;}  }
class C{  private void initRasterProgram(){  glUseProgram(rasterProgram);  viewMatrixUniform=glGetUniformLocation(rasterProgram,"viewMatrix");  projectionMatrixUniform=glGetUniformLocation(rasterProgram,"projectionMatrix");  glUseProgram(0);}  }
class C{  public void add(int index,int value){  if (index > size) {    throwException2(index);  }  ensureCapacity(size + 1);  System.arraycopy(data,index,data,index + 1,size - index);  data[index]=value;  size++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.156 -0400",hash_original_method="A0E103A6B48B698B5B3DFA7EABB5C351",hash_generated_method="E28F86C76DE0CCC602319C1A6BBF3F1F") public static int max(int i1,int i2){  return Math.max(i1,i2);}  }
class C{  @Override public void handleText(final char[] data,final int pos){}  }
class C{  private void removeAnnotationItem(final Annotation annotation){  final MarkerRegistration marker=this.markers.get(annotation);  if (marker != null) {    marker.clearMark();  } else {    Log.warn(InlineAnnotationRenderer.class,"Inline marker with no handle: " + annotation);  }}  }
class C{  public static void assertArrayEqual(float[] expected,float[] actual,double maxRelativeError,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError,errorMessage);  }}  }
class C{  public static TemplateQueryBuilder templateQuery(String template,Map<String,Object> vars){  return new TemplateQueryBuilder(template,vars);}  }
class C{  public Boolean kickUserByPublicSID(String SID,String publicSID){  try {    Boolean salida=false;    salida=userManagement.kickUserByPublicSID(SID,publicSID);    if (salida == null)     salida=false;    return salida;  } catch (  Exception err) {    log.error("[kickUser]",err);  }  return null;}  }
class C{  public void testNominalClass(){  performTest(true);}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  for (int i=0; i < numFeatures; i++) {    if (data[i] < weightsA[category][i]) {      weightsA[category][i]=(learningRate * data[i]) + (1 - learningRate) * weightsA[category][i];    }  }  for (int i=0; i < numClasses; i++) {    if (weightblearnmethod == 0) {      weightsB[category][i]=labels[i] + weightsB[category][i];      weightChange=1;    } else {      if (labels[i] < weightsB[category][i]) {        weightsB[category][i]=(learningRate * labels[i]) + (1 - learningRate) * weightsB[category][i];        weightChange=1;      }    }  }  return weightChange;}  }
class C{  @Override public synchronized void acceptText(TextEvent e){  if (m_outText == null) {    setUpResultHistory();  }  StringBuffer result=new StringBuffer();  result.append(e.getText());  String name=(new SimpleDateFormat("HH:mm:ss - ")).format(new Date());  name+=e.getTextTitle();  if (m_outText != null) {    int mod=2;    String nameOrig=new String(name);    while (m_history.getNamedBuffer(name) != null) {      name=new String(nameOrig + "" + mod);      mod++;    }    m_history.addResult(name,result);    m_history.setSingle(name);  }  if (m_headlessEvents != null) {    m_headlessEvents.add(e);  }  notifyTextListeners(e);}  }
class C{  public Coin div(final int divisor){  return divide(divisor);}  }
class C{  public void removeAllMovies(){  List<Movie> oldValue=new ArrayList<>(movies);synchronized (movies) {    for (    Movie movie : movies) {      Path imageFile=movie.getPathNIO().resolve("movieset-fanart.jpg");      if (Files.exists(imageFile)) {        Utils.deleteFileSafely(imageFile);      }      imageFile=movie.getPathNIO().resolve("movieset-poster.jpg");      if (Files.exists(imageFile)) {        Utils.deleteFileSafely(imageFile);      }      if (movie.getMovieSet() != null) {        movie.setMovieSet(null);        movie.writeNFO();        movie.saveToDb();      }    }    movies.clear();    movieIds.clear();    MovieSetArtworkHelper.updateArtwork(this);    saveToDb();  }  firePropertyChange("movies",null,movies);  firePropertyChange("removedAllMovies",oldValue,movies);}  }
class C{  public CipherInputStream(InputStream is,BufferedBlockCipher cipher){  super(is);  this.bufferedBlockCipher=cipher;  buf=new byte[cipher.getOutputSize(INPUT_BUF_SIZE)];  inBuf=new byte[INPUT_BUF_SIZE];}  }
class C{  @Override public boolean shouldParseEmbedded(final Metadata metadata){  return true;}  }
class C{  public static String toString(Node node){  return toString(node,new HashMap<String,String>());}  }
class C{  public static void continueAll(boolean isIncludedErrorDownloads){  continueAll(isIncludedErrorDownloads,null);}  }
class C{  public boolean overlaps(MyRectangle2D r){  return !contains(r) && ((x + width / 2 > r.getX() - r.getWidth()) || (y + height / 2 > r.getY() - r.getHeight())) && (getDistance(y,r.getY()) < height / 2 + r.getHeight() / 2)&& (getDistance(x,r.getX()) < width / 2 + r.getWidth() / 2);}  }
class C{  public static Double[] toObject(double[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_DOUBLE_OBJECT_ARRAY;  }  final Double[] result=new Double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Double(array[i]);  }  return result;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Object decode(ByteBuffer buffer){  byte type=buffer.get();switch (type) {case TYPE_NULL:    return null;case TYPE_LIST:{    int length=buffer.getInt();    List l=new ArrayList(length);    for (int i=0; i < length; i++) {      l.add(decode(buffer));    }    return l;  }case TYPE_SET:{  int length=buffer.getInt();  Set l=new HashSet(length);  for (int i=0; i < length; i++) {    l.add(decode(buffer));  }  return l;}case TYPE_MAP:{int length=buffer.getInt();Map l=new HashMap(length);for (int i=0; i < length; i++) {  l.put(decode(buffer),decode(buffer));}return l;}case TYPE_STRING:return stringEncoder.decode(buffer);case TYPE_BOOLEAN_TRUE:return Boolean.TRUE;case TYPE_BOOLEAN_FALSE:return Boolean.FALSE;case TYPE_UNSIGNED_LONG:return unsignedLongEncoder.decode(buffer);case TYPE_UNSIGNED_INT:return unsignedIntEncoder.decode(buffer);case TYPE_LONG:return Long.valueOf(buffer.getLong());case TYPE_INT:return Integer.valueOf(buffer.getInt());case TYPE_SHORT:return Short.valueOf(buffer.getShort());case TYPE_BYTE:return Byte.valueOf(buffer.get());case TYPE_DOUBLE:return Double.valueOf(buffer.getDouble());case TYPE_FLOAT:return Float.valueOf(buffer.getFloat());case TYPE_CHAR:return Character.valueOf(buffer.getChar());case TYPE_DATE:return new Date(buffer.getLong());default :throw new IllegalArgumentException("Invalid type " + type);}}  }
class C{  TempBufferData(int size,FreeList<TempBufferData> freeList){  _buffer=new byte[size];  _freeList=freeList;}  }
class C{  private void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  final RequestLog log=(RequestLog)getServletContext().getAttribute(InitServlet.REQUESTLOG);  final RequestLogEntry entry=log.createEntry("HTTPRequest.login",RequestDirection.INBOUND);  entry.setHost(request.getRemoteHost());  final Enumeration<?> names=request.getParameterNames();  while (names.hasMoreElements()) {    final String name=(String)names.nextElement();    entry.addParameter(name,request.getParameter(name));  }  entry.addQuickLink("resolve","SessionService.resolveUserToken");  entry.addQuickLink("event","EventService.recordEventForSubscription");  entry.addQuickLink("logout","SessionService.deleteServiceSession");  RequestDispatcher rd=request.getRequestDispatcher("index.jsp");  rd.forward(request,response);}  }
class C{  public ModelRendererTurbo(ModelBase modelbase,int textureX,int textureY){  this(modelbase,textureX,textureY,64,32);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  protected void assertAuthCapturePaymentEntries(final String orderNum,final String expectedAmount,final String expectedAuthResult,final String expectedCaptureResult,final boolean expectedSettled){  assertMultiPaymentEntry(orderNum,Arrays.asList(expectedAmount,expectedAmount),Arrays.asList(PaymentGateway.AUTH,PaymentGateway.CAPTURE),Arrays.asList(expectedAuthResult,expectedCaptureResult),Arrays.asList(Boolean.FALSE,expectedSettled));}  }
class C{  public static void initConfig(Config config){  config.registerForUpdates(null);}  }
class C{  public TopicObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public static void addPTModeToNetwork(TransitSchedule schedule,Network network){  log.info("... Adding mode \"pt\" to all links with public transit");  Map<Id<Link>,? extends Link> networkLinks=network.getLinks();  Set<Id<Link>> transitLinkIds=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      if (transitRoute.getRoute() != null) {        transitLinkIds.addAll(getTransitRouteLinkIds(transitRoute));      }    }  }  for (  Id<Link> transitLinkId : transitLinkIds) {    Link transitLink=networkLinks.get(transitLinkId);    if (!transitLink.getAllowedModes().contains(TransportMode.pt)) {      Set<String> modes=new HashSet<>();      modes.addAll(transitLink.getAllowedModes());      modes.add(TransportMode.pt);      transitLink.setAllowedModes(modes);    }  }}  }
class C{  public POResultSet(MTable table,PreparedStatement ps,ResultSet rs,String trxName){  this.table=table;  this.statement=ps;  this.resultSet=rs;  this.trxName=trxName;  this.closeOnError=false;}  }
class C{  static final public int parseInt(char what){  return what;}  }
class C{  public void testAddRemoveParents(){  SessionNode node1=new SessionNode("???","Node1",Type1.class);  SessionNode node2=new SessionNode("???","Node2",Type2.class);  SessionNode node3=new SessionNode("???","Node2",Type3.class);  SessionNode node4=new SessionNode("???","Node4",Type4.class);  assertTrue(node1.addParent(node2));  assertEquals(1,node2.getNumChildren());  assertEquals(1,node1.getNumParents());  assertTrue(!node1.addParent(node4));  assertTrue(node1.addParent(node3));  assertTrue(!node1.removeParent(node4));  assertTrue(node1.removeParent(node2));  assertEquals(1,node1.getNumParents());  assertTrue(node1.removeParent(node3));  assertEquals(0,node1.getNumParents());}  }
class C{  public static RuntimeException codeBug() throws RuntimeException {  RuntimeException ex=new IllegalStateException("FAILED ASSERTION");  ex.printStackTrace(System.err);  throw ex;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 * z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 * constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 * z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  setArea(SerialUtilities.readShape(stream));}  }
class C{  public void centerVertical(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new centerVerticalAction(nodes));  }  int nMinX=-1;  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,(nMinX + nMaxX) / 2);  }}  }
class C{  public void instantiate(){  String nameP=namePrefix + output;  Logix l=InstanceManager.getDefault(jmri.LogixManager.class).getLogix(nameP);  if (l == null) {    l=InstanceManager.getDefault(jmri.LogixManager.class).createNewLogix(nameP,"");  }  l.deActivateLogix();  Conditional c=InstanceManager.getDefault(jmri.ConditionalManager.class).getConditional(l,nameP + "C1");  if (c == null) {    c=InstanceManager.getDefault(jmri.ConditionalManager.class).createNewConditional(nameP + "C1","");    l.addConditional(nameP + "C1",-1);  }  ArrayList<ConditionalVariable> variableList=c.getCopyOfStateVariables();  variableList.add(new ConditionalVariable(false,Conditional.OPERATOR_NONE,Conditional.TYPE_SENSOR_INACTIVE,osSensor,true));  if (!lock.equals("")) {    variableList.add(new ConditionalVariable(false,Conditional.OPERATOR_AND,Conditional.TYPE_SENSOR_INACTIVE,lock,true));  }  c.setStateVariables(variableList);  ArrayList<ConditionalAction> actionList=c.getCopyOfActions();  actionList.add(new DefaultConditionalAction(Conditional.ACTION_OPTION_ON_CHANGE_TO_TRUE,Conditional.ACTION_SET_TURNOUT,output,Turnout.CLOSED," "));  actionList.add(new DefaultConditionalAction(Conditional.ACTION_OPTION_ON_CHANGE_TO_FALSE,Conditional.ACTION_SET_TURNOUT,output,Turnout.THROWN," "));  c.setAction(actionList);  l.activateLogix();}  }
class C{  public ClientMessage sendMessage(String address,String body){  return sendMessage(SimpleString.toSimpleString(address),body);}  }
class C{  public LocalVariableAttribute(ConstPool cp,String name){  super(cp,name,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  private static byte[] createColorTable(ColorModel colorModel,SampleModel sampleModel){  byte[] colorTable;  if (colorModel instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)colorModel;    int mapSize=icm.getMapSize();    int ctSize=getGifPaletteSize(mapSize);    byte[] reds=new byte[ctSize];    byte[] greens=new byte[ctSize];    byte[] blues=new byte[ctSize];    icm.getReds(reds);    icm.getGreens(greens);    icm.getBlues(blues);    for (int i=mapSize; i < ctSize; i++) {      reds[i]=reds[0];      greens[i]=greens[0];      blues[i]=blues[0];    }    colorTable=new byte[3 * ctSize];    int idx=0;    for (int i=0; i < ctSize; i++) {      colorTable[idx++]=reds[i];      colorTable[idx++]=greens[i];      colorTable[idx++]=blues[i];    }  } else   if (sampleModel.getNumBands() == 1) {    int numBits=sampleModel.getSampleSize()[0];    if (numBits > 8) {      numBits=8;    }    int colorTableLength=3 * (1 << numBits);    colorTable=new byte[colorTableLength];    for (int i=0; i < colorTableLength; i++) {      colorTable[i]=(byte)(i / 3);    }  } else {    colorTable=null;  }  return colorTable;}  }
class C{  private static boolean isAppropriatePropertyNameForSetter(@NotNull String importedName,@NotNull String propertyName){  propertyName=GroovyPropertyUtils.decapitalize(propertyName);  return propertyName.equals(GroovyPropertyUtils.getPropertyNameBySetterName(importedName));}  }
class C{  protected void makeImage(){  if (this.getValue(IMAGE_IN_PROGRESS) != null)   return;  this.setValue(IMAGE_IN_PROGRESS,true);  FileSetPreviewImageGenerator tg=new FileSetPreviewImageGenerator(this,PREVIEW_IMAGE_SIZE,PREVIEW_IMAGE_SIZE);  this.threadPoolExecutor.submit(tg);}  }
class C{  public void update(final List<ScanResult> results){  for (  final ScanResult result : results) {    final ExtendedBluetoothDevice device=findDevice(result);    if (device == null) {      mListValues.add(new ExtendedBluetoothDevice(result));    } else {      device.name=result.getScanRecord() != null ? result.getScanRecord().getDeviceName() : null;      device.rssi=result.getRssi();    }  }  notifyDataSetChanged();}  }
class C{  public DFSRecursiveVisitor(final Mask mask,final RegionFunction function,int maxDepth,int maxBranching){  super(function,maxDepth,maxBranching);  checkNotNull(mask);  this.mask=mask;}  }
class C{  public static double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  public void addPair(String booleanAssign){  if (!booleanAssign.startsWith("!")) {    addPair(booleanAssign,ValueFactory.create(true));  } else {    addPair(booleanAssign.substring(1,booleanAssign.length()),ValueFactory.create(false));  }}  }
class C{  private void trimStorageUnitNotificationFilterBusinessObjectFormatFields(StorageUnitNotificationFilter filter){  if (filter.getBusinessObjectFormatUsage() != null) {    filter.setBusinessObjectFormatUsage(filter.getBusinessObjectFormatUsage().trim());  }  if (filter.getBusinessObjectFormatFileType() != null) {    filter.setBusinessObjectFormatFileType(filter.getBusinessObjectFormatFileType().trim());  }}  }
class C{  public Sign(){  setRPClass("sign");  put(Actions.TYPE,"sign");  put(Actions.ACTION,Actions.READ);  setResistance(100);}  }
class C{  public static Object deserializeObject(final byte[] objBytes) throws IOException, ClassNotFoundException {  ObjectInputStream objIn=null;  try {    objIn=new ObjectInputStream(new ByteArrayInputStream(objBytes));    return objIn.readObject();  }  finally {    close(objIn);  }}  }
class C{  public UnregisterNodesResponse UnregisterNodes(UnregisterNodesRequest req) throws ServiceFaultException, ServiceResultException {  return (UnregisterNodesResponse)channel.serviceRequest(req);}  }
class C{  public static Number createNumber(String str) throws ParseException {  try {    if (str.indexOf('.') != -1) {      return Double.valueOf(str);    } else {      return Long.valueOf(str);    }  } catch (  NumberFormatException e) {    throw new ParseException(e.getMessage());  }}  }
class C{  public void test_twoJar_diff_getResourceAsStream() throws Exception {  createInstanceAndCallStaticMethod(Configuration.TWO_JAR,"test.TestMethods","test_diff_getResourceAsStream");}  }
class C{  @ForceInline static Object internalMemberName(Object mh){  return ((DirectMethodHandle)mh).member;}  }
class C{  public static void paintBreakpoints(final BreakpointManager manager,final NaviNode node,final INaviCodeNode codeNode){  Preconditions.checkNotNull(manager,"IE02171: Manager argument can not be null");  Preconditions.checkNotNull(node,"IE02172: Node argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02173: Code node argument can not be null");  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    final BreakpointAddress address=new BreakpointAddress(instruction.getModule(),new UnrelocatedAddress(instruction.getAddress()));    final int line=CCodeNodeHelpers.instructionToLine(codeNode,instruction);    if (manager.hasBreakpoint(BreakpointType.REGULAR,address)) {      final int addressCharacters=address.getAddress().getAddress().toHexString().length();      node.setHighlighting(CHighlightLayers.BREAKPOINT_LAYER,line,0,addressCharacters,BreakpointManager.getBreakpointColor(manager.getBreakpointStatus(address,BreakpointType.REGULAR)));    } else {      node.clearHighlighting(CHighlightLayers.BREAKPOINT_LAYER,line);    }  }}  }
class C{  public AbstractBeginNode falseSuccessor(){  return falseSuccessor;}  }
class C{  protected Expression plus(int opPos) throws TransformerException {  return compileOperation(new Plus(),opPos);}  }
class C{  public BuilderException(Throwable cause,String message,Object... args){  super(String.format(message,args),cause);}  }
class C{  private void renderScene(Graphics2D g,int xAdjust,int yAdjust){  g.translate(xAdjust,yAdjust);  int startTileX=Math.max(0,(int)getViewX());  int startTileY=Math.max(0,(int)getViewY());  Rectangle clip=g.getClipBounds();  startTileX=Math.max(startTileX,clip.x / IGameScreen.SIZE_UNIT_PIXELS);  startTileY=Math.max(startTileY,clip.y / IGameScreen.SIZE_UNIT_PIXELS);  int layerWidth=getViewWidth();  int layerHeight=getViewHeight();  layerWidth=Math.min(layerWidth,clip.width / IGameScreen.SIZE_UNIT_PIXELS) + 2;  layerHeight=Math.min(layerHeight,clip.height / IGameScreen.SIZE_UNIT_PIXELS) + 2;  drawEndOfTheWorld(g,xAdjust,yAdjust);  viewManager.prepareViews(clip);  final String set=gameLayers.getAreaName();  gameLayers.drawLayers(g,set,"floor_bundle",startTileX,startTileY,layerWidth,layerHeight,"blend_ground","0_floor","1_terrain","2_object");  viewManager.draw(g);  gameLayers.drawLayers(g,set,"roof_bundle",startTileX,startTileY,layerWidth,layerHeight,"blend_roof","3_roof","4_roof_add");  gameLayers.drawWeather(g,startTileX,startTileY,layerWidth,layerHeight);  viewManager.drawTop(g);  Iterator<EffectLayer> it=globalEffects.iterator();  while (it.hasNext()) {    EffectLayer eff=it.next();    if (!eff.isExpired()) {      eff.draw(g,startTileX,startTileY,layerWidth,layerHeight);    } else {      it.remove();    }  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  blockList.drawScreen(par1,par2,par3);  drawCenteredString(fontRendererObj,"X-Ray Block Manager",width / 2,8,16777215);  int totalBlocks=0;  for (int i=0; i < GuiXRayBlocksList.blocks.size(); i++)   if (XRayMod.xrayBlocks.contains(GuiXRayBlocksList.blocks.get(i)))   totalBlocks++;  drawCenteredString(fontRendererObj,"Blocks: " + totalBlocks,width / 2,20,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  public CompiereColor(Color bg,boolean flat){  if (bg == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  m_type=flat ? TYPE_FLAT : TYPE_GRADIENT;  m_primaryColor=bg;}  }
class C{  public void appendOnlyFirst(String s){  if (index == 0) {    builder.append(s);  }}  }
class C{  public boolean isFullyZoomedOut(){  if (isFullyZoomedOutX() && isFullyZoomedOutY())   return true; else   return false;}  }
class C{  public IndexedColor(int[] table) throws IOException {  this.count=table.length;  this.table=table;}  }
class C{  @RequestMapping(value="/namespaces/{namespaceCode}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_NAMESPACES_DELETE) public Namespace deleteNamespace(@PathVariable("namespaceCode") String namespaceCode){  return namespaceService.deleteNamespace(new NamespaceKey(namespaceCode));}  }
class C{  public FacebookServiceException(FacebookRequestError error,String errorMessage){  super(errorMessage);  this.error=error;}  }
class C{  public final void collectBucket(LeafBucketCollector subCollector,int doc,long bucketOrd) throws IOException {  grow(bucketOrd + 1);  collectExistingBucket(subCollector,doc,bucketOrd);}  }
class C{  public void revertPosition(){  lastStateVector.copyInto(stateVector);}  }
class C{  @Override public void update(final ViewerCell cell){}  }
class C{  public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);}  }
class C{  @Override public void shrinkToMinScore(final int minScore){  final Iterator<Map.Entry<E,AtomicInteger>> i=this.map.entrySet().iterator();  Map.Entry<E,AtomicInteger> entry;  while (i.hasNext()) {    entry=i.next();    if (entry.getValue().intValue() < minScore)     i.remove();  }}  }
class C{  @Deprecated public void createLinkedNotebook(LinkedNotebook linkedNotebook,OnClientCallback<LinkedNotebook> callback){  AsyncReflector.execute(mClient,callback,"createLinkedNotebook",mAuthenticationToken,linkedNotebook);}  }
class C{  public boolean isEmpty(){  final boolean result=addedAnnotations.isEmpty() && removedAnnotations.isEmpty() && changedAnnotations.isEmpty();  Log.debug(getClass(),"result",result);  return result;}  }
class C{  public Tasks<BlockSnapshotRestRep> deactivate(URI id,VolumeDeleteTypeEnum type){  URI uri=client.uriBuilder(getDeactivateUrl()).queryParam("type",type).build(id);  TaskList tasks=client.postURI(TaskList.class,uri);  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public void dispatchEvent(AWTEvent event){}  }
class C{  public void removeChangeListener(ChangeListener l){  m_ChangeListeners.remove(l);}  }
class C{  private void checkLoginMessage(int message){  checkIfIdIsDisplayedWithText(R.id.login_alt_message_textView,message);}  }
class C{  public String toString(){  return "remote class " + implClassDef.getName().toString();}  }
class C{  public void verifyEqualsContractPositive(Object x,Object y,Object z){  Assert.assertTrue(x.equals(x));  Assert.assertTrue(x.equals(y) && y.equals(x));  Assert.assertTrue(x.equals(y) && y.equals(z) && x.equals(z));  Assert.assertTrue(x.equals(y));  Assert.assertTrue(x.equals(y));  Assert.assertTrue(x.equals(y));  Assert.assertTrue(y.equals(z));  Assert.assertTrue(y.equals(z));  Assert.assertTrue(y.equals(z));  Assert.assertFalse(x.equals(null));  Assert.assertFalse(y.equals(null));  Assert.assertFalse(z.equals(null));}  }
class C{  protected boolean saveSelectionGroup(ArrayList<Positionable> selectionGroup){  _saveSelectionGroup=selectionGroup;  if (_editCircuitFrame != null || _editPortalFrame != null || _editPathsFrame != null || _editDirectionFrame != null) {    return true;  }  return false;}  }
class C{  private boolean isOptimizedLoop(Register reg){  return loopRegisterSet.contains(reg);}  }
class C{  public AbstractRetryingMessageListenerAdapter(T delegate,RetryTemplate retryTemplate){  this(delegate,retryTemplate,null);}  }
class C{  @Override protected void executeQuery(final BigdataSailRepository repo,final int n,final int k) throws RepositoryException, MalformedQueryException, QueryEvaluationException, RDFParseException, IOException, UpdateExecutionException {  final BigdataSailRepositoryConnection conn=repo.getConnection();  conn.setAutoCommit(false);  conn.clear();  try {    StringBuilder data=new StringBuilder();    for (int i=0; i < n; i++) {      data.append("_:s").append(i % k).append(" <http://p> _:o").append(i).append(" <http://c> .\n");    }    conn.add(new ByteArrayInputStream(data.toString().getBytes()),"",RDFFormat.NQUADS);    conn.commit();    final String query="prefix h: <http://>\r\n" + "\r\n" + "INSERT { \r\n"+ "    ?s h:p1 ?o .\r\n"+ "}\r\n"+ "WHERE {\r\n"+ "  ?s h:p ?o .\r\n"+ "}";    final Update q=conn.prepareUpdate(QueryLanguage.SPARQL,query);    q.execute();    assertEquals(n * 2 + 4,conn.getTripleStore().getStatementCount(true));  }  finally {    conn.close();  }}  }
class C{  private void verifySignedMarksAllowed(TldState tldState,boolean isAnchorTenant) throws SignedMarksNotAcceptedInCurrentPhaseException {  if (!isAnchorTenant || !QLP_SMD_ALLOWED_STATES.contains(tldState)) {    throw new SignedMarksNotAcceptedInCurrentPhaseException();  }}  }
class C{  public static String encodeBytes(byte[] bytesToEncode){  String retval=Base64.encodeBytes(bytesToEncode,Base64.DONT_BREAK_LINES);  return retval;}  }
class C{  public int max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  int max=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    max=Math.max(max,_data[_pos]);  }  return max;}  }
class C{  public Entry(float val,int xIndex){  mVal=val;  mXIndex=xIndex;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.384 -0500",hash_original_method="4685E1971C120F244FF83B34E469953F",hash_generated_method="C8A3E9E234F4725096CD8FF88F5B6008") private Email(){}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public void dispose(){  Object[] inNodesArray=inNodes.toArray();  for (int i=0; i < inNodesArray.length; i++) {    DigraphNode node=(DigraphNode)inNodesArray[i];    node.removeEdge(this);  }  Object[] outNodesArray=outNodes.toArray();  for (int i=0; i < outNodesArray.length; i++) {    DigraphNode node=(DigraphNode)outNodesArray[i];    removeEdge(node);  }}  }
class C{  protected String formatPatternRun(final LogEvent event,final PatternRun run){switch (run.m_type) {case TYPE_METHOD:    return getMethod(event);case TYPE_THREAD:  return getThread(event);default :return super.formatPatternRun(event,run);}}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public DefaultWriteRequest(Object message,WriteFuture future,SocketAddress destination){  if (message == null) {    throw new IllegalArgumentException("message");  }  if (future == null) {    future=UNUSED_FUTURE;  }  this.message=message;  this.future=future;  this.destination=destination;}  }
class C{  public void required(final String tagName,final String actionName,final String attributeName,final Object attribute) throws PageException {  if (attribute == null) {    final Excepton util=CFMLEngineFactory.getInstance().getExceptionUtil();    throw util.createApplicationException("Attribute [" + attributeName + "] for tag ["+ tagName+ "] is required if attribute action has the value ["+ actionName+ "]");  }}  }
class C{  public PNormNormalization(){  this(2.0);}  }
class C{  public ChessSquare(Composite parent,int id,boolean isLight){  super(parent,SWT.DOUBLE_BUFFERED);  this.id=id;  this.isLight=isLight;  addPaintListener(paintListener);}  }
class C{  public boolean overlapCompound(int index){  return ((getFlag(index) & OVERLAP_COMPOUND) != 0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Object deserializeObject(byte[] bytes){  if (bytes == null) {    return null;  }  if (bytes.length == 0) {    return null;  }  Object resultObject=null;  ByteArrayInputStream byteIn=new ByteArrayInputStream(bytes);  ObjectInputStream objIn=null;  try {    objIn=new ObjectInputStream(byteIn);    try {      resultObject=objIn.readObject();    } catch (    ClassNotFoundException e) {      logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);    }  } catch (  IOException e) {    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);  } finally {    try {      if (objIn != null) {        objIn.close();      }    } catch (    IOException e) {      logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);      resultObject=null;    }  }  return resultObject;}  }
class C{  private void addSynapseGroupSimple(SynapseGroup synapseGroup){  SynapseGroupNodeSimple synapseGroupNode=new SynapseGroupNodeSimple(this,synapseGroup);  canvas.getLayer().addChild(synapseGroupNode);  objectNodeMap.put(synapseGroup,synapseGroupNode);  if (synapseGroup.hasParentGroup()) {    SubnetworkNode parentNode=(SubnetworkNode)objectNodeMap.get(synapseGroup.getParentGroup());    if (parentNode != null) {      parentNode.addNode(synapseGroupNode);    }  }}  }
class C{  protected Group createLayerMapContent(MapHandler mapHandler){  return new LayerMapContent(mapHandler);}  }
class C{  @Before public void checkConfiguration() throws ConfigurationException {  if (!System.getProperty("user.dir").endsWith("commons/build/work")) {    throw new ConfigurationException("\n\tInvalid working directory : " + System.getProperty("user.dir") + ".\n"+ "\tWorking directory must be "+ "../commons/build/work in order to test work.\n"+ "\tHINT: in Eclipse, set working directory to "+ "${workspace_loc:commons/build/work} in arguments.");  }}  }
class C{  protected Position cartesianToGeodetic(Vec4 cart){  return this.ellipsoidalToGeodetic(cart);}  }
class C{  public boolean hasSpdiagnosisViewPermission(){  return permissionService.hasPermission(SpPermission.SYSTEM_DIAG);}  }
class C{  private void onPostReceived(Api.Post post){  swipeRefreshLayout.setRefreshing(false);  displayTags(post.getTags());  displayComments(post.getComments());  if (rewindOnLoad) {    rewindOnLoad=false;    viewer.rewind();  }}  }
class C{  public static ConversionMethod toConversionMethod(Method aMethod){  JMapConversion conversion=aMethod.getAnnotation(JMapConversion.class);  String name=aMethod.getName();  String[] from=trim(conversion.from());  String[] to=trim(conversion.to());  Type type=conversion.type();  boolean avoidSet=conversion.avoidSet();  ParameterNumber number=null;  String body=null;switch (type) {case STATIC:switch (aMethod.getParameterTypes().length) {case 1:      number=ONE;    break;case 2:  number=TWO;break;default :throw new ConversionParameterException("is allowed to use from one to two parameters");}body=CONTENT_ALREADY_DEFINED;break;case DYNAMIC:if (aMethod.getParameterTypes().length != 0) throw new DynamicConversionParameterException("is not allowed parameters usage in a dynamic method");try {body=(String)aMethod.invoke(null,new Object[]{});} catch (Exception e) {throw new DynamicConversionMethodException("the method don't respects the conventions");}if (!body.contains(source) && body.contains(destination)) throw new DynamicConversionBodyException("the use of the destination isn't permitted without the use of the source");number=body.contains(source) ? body.contains(destination) ? TWO : ONE : ZERO;break;}return new ConversionMethod(name,from,to,type,number,body,avoidSet);}  }
class C{  private Item newNameType(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name).index,newUTF8(desc).index);    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private void writeKanjiResourceFile(File file) throws IOException {  FileOutputStream output=null;  KanjiEscapeOutputStream kanji=null;  OutputStreamWriter writer=null;  BufferedWriter w=null;  try {    output=new FileOutputStream(file);    kanji=new KanjiEscapeOutputStream(output);    writer=new OutputStreamWriter(kanji);    w=new BufferedWriter(writer);    w.write(_sb.toString());  }  finally {    Util.close(w);    Util.close(writer);    Util.close(kanji);    Util.close(output);  }}  }
class C{  protected IEclipsePreferences internalNode(String path,boolean notify,Object context){  return this;}  }
class C{  public String url(){  return url;}  }
class C{  private void take(EtiaoConnector<P> other){  connectDirect(other.disconnect());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.989 -0500",hash_original_method="1F5E52FF134E5A595D9B4F3AD9EF805B",hash_generated_method="B34ECCA1173A46DC77AEC0E5DA1F925F") public Builder permitCustomSlowCalls(){  return enable(DETECT_CUSTOM);}  }
class C{  public void failoverFileSystem(URI storage,URI fileshareURI,TaskCompleter completer,String opId){  try {    StorageSystem system=this.dbClient.queryObject(StorageSystem.class,storage);    FileShare fileShare=this.dbClient.queryObject(FileShare.class,fileshareURI);    WorkflowStepCompleter.stepExecuting(opId);    log.info("Execution of Failover Job Started");    getRemoteMirrorDevice(system).doFailoverLink(system,fileShare,completer,fileShare.getLabel());  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(this.dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);  }}  }
class C{  private void drawVerticalScale(final boolean left,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  assert pixelperscale > 0;  assert scale > 0;  if (pixelperscale <= 0)   return;  final int x=(left) ? this.leftborder : this.width - this.rightborder;  int y=this.height - this.bottomborder;  int s=offset;  String s1;  int s1max=0;  while (y > this.topborder) {    if ((colorScale != null) && (y > this.topborder) && (y < (this.height - this.bottomborder))) {      setColor(colorScale);      line(this.leftborder,y,this.width - this.rightborder,y,100);    }    setColor(colorNaming);    line(x - 3,y,x + 3,y,100);    s1=(s >= 1000000 && s % 10000 == 0) ? Integer.toString(s / 1000000) + "M" : (s >= 1000 && s % 1000 == 0) ? Integer.toString(s / 1000) + "K" : Integer.toString(s);    if (s1.length() > s1max)     s1max=s1.length();    PrintTool.print(this,(left) ? this.leftborder - 4 : this.width - this.rightborder + 4,y,0,s1,(left) ? 1 : -1,false,80);    y-=pixelperscale;    s+=scale;  }  setColor(colorNaming);  PrintTool.print(this,(left) ? Math.max(6,x - s1max * 6 - 6) : x + s1max * 6 + 9,this.height - this.bottomborder,90,name,-1,false,80);  line(x,this.topborder - 4,x,this.height - this.bottomborder + 4,100);}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  private void assignRandomLowerTriangularMatrix(int n,SecureRandom sr){  numRows=n;  numColumns=n;  length=(n + 31) >>> 5;  matrix=new int[numRows][length];  for (int i=0; i < numRows; i++) {    int q=i >>> 5;    int r=i & 0x1f;    int s=31 - r;    r=1 << r;    for (int j=0; j < q; j++) {      matrix[i][j]=sr.nextInt();    }    matrix[i][q]=(sr.nextInt() >>> s) | r;    for (int j=q + 1; j < length; j++) {      matrix[i][j]=0;    }  }}  }
class C{  private Object stringToValue(Object oldValue,String newValue) throws ReplicatorException {  if (oldValue instanceof String) {    return newValue;  } else   if (oldValue instanceof Integer) {    return Integer.valueOf(newValue);  } else   if (oldValue instanceof SerialBlob) {    try {      return DatabaseHelper.getSafeBlob(newValue.getBytes());    } catch (    SQLException e) {      throw new ReplicatorException("Unable to convert back from String to SerialBlob: " + e,e);    }  } else {    return newValue;  }}  }
class C{  public static String version(){  return VERSION;}  }
class C{  public static DAOStrategy newInstance(){  final DAOStrategy returnInstance=new DAOStrategy();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public static ResultSet simpleResultSet(Integer rowCount,int ip,boolean bp,float fp,double dp,long lp,byte byParam,short sp){  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("ID",Types.INTEGER,10,0);  rs.addColumn("NAME",Types.VARCHAR,255,0);  if (rowCount == null) {    if (ip != 0 || bp || fp != 0.0 || dp != 0.0 || sp != 0 || lp != 0 || byParam != 0) {      throw new AssertionError("params not 0/false");    }  }  if (rowCount != null) {    if (ip != 1 || !bp || fp != 1.0 || dp != 1.0 || sp != 1 || lp != 1 || byParam != 1) {      throw new AssertionError("params not 1/true");    }    if (rowCount.intValue() >= 1) {      rs.addRow(0,"Hello");    }    if (rowCount.intValue() >= 2) {      rs.addRow(1,"World");    }  }  return rs;}  }
class C{  @Path("status") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse update(final StatusRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.status(request);}  }
class C{  public SearchRequest templateSource(BytesReference template){  this.templateSource=template;  return this;}  }
class C{  public float dot(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, 0 returned.");    return 0;  }  return x * vec.x + y * vec.y + z * vec.z;}  }
class C{  public static IllegalArgumentException createIllegalArgumentException(final Throwable rootCause){  IllegalArgumentException iae=new IllegalArgumentException(rootCause.getLocalizedMessage());  iae.initCause(rootCause);  return iae;}  }
class C{  public static long percentile(List<Long> values,int percentile){  if (values.size() == 0) {    throw new IllegalArgumentException("Percentile of empty list is not defined.");  }  if (percentile > 100 || percentile < 0) {    throw new IllegalArgumentException("Percentile has to be between 0-100");  }  if (percentile == 0) {    return 0;  }  Collections.sort(values);  int position=(int)Math.ceil(values.size() * percentile / 100);  if (position == 0) {    return values.get(position);  }  return values.get(position - 1);}  }
class C{  public final int read(byte ba[],int off,int len) throws IOException {  return is.read(ba,off,len);}  }
class C{  public static LatLon fromRadians(double latitude,double longitude){  return new LatLon(Math.toDegrees(latitude),Math.toDegrees(longitude));}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<Integer>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    String ret="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numFields; a++) {      headers=headers + "Field" + (a + 1)+ "\t";    }    ret+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numFields; a++) {      ret+="\nField" + (a + 1) + "\t";      for (int b=0; b <= a; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            ret+="  " + df.format(correlationMatrix[a][b]) + "\t";          } else {            ret+=df.format(correlationMatrix[a][b]) + "\t";          }        } else {          ret+="\t";        }      }    }    ret+="\n\n";    for (i=0; i < numFields; i++) {      ret+="Field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String substring(int start){  return substring(start,size);}  }
class C{  public void destroy(){  this.encoding=null;  this.filterConfig=null;}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static String cleanUpPathPrefix(String prefix){  if (UtilValidate.isEmpty(prefix))   return "";  StringBuilder cppBuff=new StringBuilder(prefix.replace('\\','/'));  if (cppBuff.charAt(0) != '/') {    cppBuff.insert(0,'/');  }  if (cppBuff.charAt(cppBuff.length() - 1) == '/') {    cppBuff.deleteCharAt(cppBuff.length() - 1);  }  return cppBuff.toString();}  }
class C{  private void validatePasswordParameter(String username,String oldPassword,String password,String encpassword,ValidatorType type){  boolean isPresent=(password != null && !password.isEmpty()) ^ (encpassword != null && !encpassword.isEmpty());  if (!isPresent) {    throw APIException.badRequests.parameterIsNullOrEmpty("password, encpassword");  }  if (oldPassword != null && !oldPassword.isEmpty()) {    if (!match(oldPassword,getUserPassword(username))) {      throw BadRequestException.badRequests.passwordInvalidOldPassword();    }  }  if (password != null && !password.isEmpty()) {    PasswordValidator validator=null;switch (type) {case CHANGE:      validator=ValidatorFactory.buildChangeValidator(getConfigProperties(),this);    break;case RESET:  validator=ValidatorFactory.buildResetValidator(getConfigProperties());break;case UPDATE:validator=ValidatorFactory.buildUpdateValidator(getConfigProperties(),this);break;case VALIDATE_CONTENT:validator=ValidatorFactory.buildContentValidator(getConfigProperties());break;}Password pw=new Password(username,oldPassword,password);if (StringUtils.isNotBlank(username)) {pw.setPasswordHistory(getPasswordHistory(username));}validator.validate(pw);}}  }
class C{  public static String[] scanForEvidences(final String currentPath,final String dir){  if (Cfg.DEBUG) {    Check.requires(currentPath != null,"null argument");  }  if (Cfg.DEBUG) {    Check.requires(!currentPath.startsWith("file://"),"currentPath shouldn't start with file:// : " + currentPath);  }  final TreeMap<String,String> map=new TreeMap<String,String>();  File fcDir=null;  try {    fcDir=new File(currentPath + dir);    final String[] fileLogs=fcDir.list();    for (    final String file : fileLogs) {      final String logMask=EvidenceCollector.LOG_EXTENSION;      final String encLogMask=encryptName(logMask);      if (file.endsWith(encLogMask)) {        final String plainName=decryptName(file);        map.put(plainName,file);      } else       if (file.endsWith(EvidenceCollector.LOG_TMP) && notVeryOld(fcDir,file)) {        if (Cfg.DEBUG) {          Check.log(TAG + " ignoring temp file: " + decryptName(file));        }      } else {        if (Cfg.DEBUG) {          Check.log(TAG + " Info: wrong name, deleting: " + fcDir+ "/"+ decryptName(file));        }        final File toDelete=new File(fcDir,file);        toDelete.delete();      }    }  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: scanForLogs: " + e);    }  } finally {  }  if (Cfg.DEBUG) {    Check.log(TAG + " scanForLogs numDirs: " + map.size());  }  final ArrayList<String> val=new ArrayList<String>(map.values());  return val.toArray(new String[]{});}  }
class C{  public AuthChallengeException(final String message){  super(message);}  }
class C{  public LessThanRule(final Level level){  super();  newLevelInt=level.intValue();}  }
class C{  public PolicyInformation(DerValue val) throws IOException {  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding of PolicyInformation");  }  policyIdentifier=new CertificatePolicyId(val.data.getDerValue());  if (val.data.available() != 0) {    policyQualifiers=new LinkedHashSet<PolicyQualifierInfo>();    DerValue opt=val.data.getDerValue();    if (opt.tag != DerValue.tag_Sequence)     throw new IOException("Invalid encoding of PolicyInformation");    if (opt.data.available() == 0)     throw new IOException("No data available in policyQualifiers");    while (opt.data.available() != 0)     policyQualifiers.add(new PolicyQualifierInfo(opt.data.getDerValue().toByteArray()));  } else {    policyQualifiers=Collections.emptySet();  }}  }
class C{  private static void err(String message){  out.println(message);}  }
class C{  public AnimatableLengthValue(AnimationTarget target,short type,float v,short pcInterp){  super(target);  lengthType=type;  lengthValue=v;  percentageInterpretation=pcInterp;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public OracleExtractException(String message){  super(message);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void load() throws RepositoryException, RDFParseException, IOException {  final RepositoryConnection conn=repository.getConnection();  String ttlString=MODEL_TTL;  InputStream stringInput=new ByteArrayInputStream(ttlString.getBytes());  conn.add(stringInput,"http://dragon-research.com/cham/model/model1",RDFFormat.TURTLE,new Resource[]{});  ttlString=BUCKET_TTL;  stringInput=new ByteArrayInputStream(ttlString.getBytes());  conn.add(stringInput,"http://dragon-research.com/cham/bucket/bucket1",RDFFormat.TURTLE,new Resource[]{});  conn.commit();  conn.close();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.363 -0500",hash_original_method="14DB54E29D400149A38978E82860E0D6",hash_generated_method="87854038149496693F499F6CC5631C59") public static long queryNumEntries(SQLiteDatabase db,String table,String selection){  return queryNumEntries(db,table,selection,null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Lexicon removeLowFreqWords(int minFreq){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.tf < minFreq) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  public void execute(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    mConnection.execute(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public boolean scheduleOnce(final Steppable event){synchronized (lock) {    return _scheduleOnce(new Key(time + 1.0,0),event);  }}  }
class C{  public static String toHex(String str){  return toHex(str,UTF_8);}  }
class C{  public ODGDrawingPanel(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  initComponents();  undoManager=new UndoRedoManager();  editor=new DefaultDrawingEditor();  editor.add(view);  addCreationButtonsTo(creationToolbar,editor);  ButtonFactory.addAttributesButtonsTo(attributesToolbar,editor);  JPopupButton pb=new JPopupButton();  pb.setItemFont(UIManager.getFont("MenuItem.font"));  labels.configureToolBarButton(pb,"actions");  pb.add(new DuplicateAction());  pb.addSeparator();  pb.add(new GroupAction(editor));  pb.add(new UngroupAction(editor));  pb.addSeparator();  pb.add(new BringToFrontAction(editor));  pb.add(new SendToBackAction(editor));  pb.addSeparator();  pb.add(new CutAction());  pb.add(new CopyAction());  pb.add(new PasteAction());  pb.add(new SelectAllAction());  pb.add(new SelectSameAction(editor));  pb.addSeparator();  pb.add(undoManager.getUndoAction());  pb.add(undoManager.getRedoAction());  JMenu m=new JMenu(labels.getString("view.zoomFactor.text"));  JRadioButtonMenuItem rbmi;  ButtonGroup group=new ButtonGroup();  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.1,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.75,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.0,null)));  rbmi.setSelected(true);  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,2,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,3,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,4,null)));  group.add(rbmi);  pb.add(m);  pb.setFocusable(false);  creationToolbar.addSeparator();  creationToolbar.add(pb);  DefaultDrawing drawing=new DefaultDrawing();  view.setDrawing(drawing);  drawing.addUndoableEditListener(undoManager);}  }
class C{  public boolean isVersionValid(String version){  if (fromVersion != null && version != null) {    if (version.compareTo(fromVersion) < 0) {      return false;    }  }  if (toVersion != null) {    if (version == null || version.compareTo(toVersion) >= 0) {      return false;    }  }  return true;}  }
class C{  public void addOutputEvent(Edge edge,OutputEvent oe){  if (outputEvents.containsKey(edge)) {    logger.error("Creating OutputEvent with Edge already in RCFGNode");    droidsafe.main.Main.exit(1);  }  outputEvents.put(edge,oe);  logger.debug("Found output event: {}",edge);}  }
class C{  public void addRepositoryConnectionInterceptor(RepositoryConnectionInterceptor interceptor){  interceptors.add(interceptor);  activated=true;}  }
class C{  public String toString(){  final String TAB=" ";  return getClass().getName() + " ( " + "noInferiors = "+ this.noInferiors+ TAB+ "noSelect = "+ this.noSelect+ TAB+ "marked = "+ this.marked+ TAB+ "unmarked = "+ this.unmarked+ TAB+ "hierarchyDelimiter = "+ this.hierarchyDelimiter+ TAB+ "name = "+ this.name+ TAB+ "type = "+ this.type+ TAB+ " )";}  }
class C{  @Override public void circuitBreak(String fieldName,long bytesNeeded) throws CircuitBreakingException {  this.trippedCount.incrementAndGet();  final String message="Data too large, data for field [" + fieldName + "] would be larger than limit of ["+ memoryBytesLimit+ "/"+ new ByteSizeValue(memoryBytesLimit)+ "]";  logger.debug(message);  throw new CircuitBreakingException(message);}  }
class C{  public boolean removeEdge(Node node1,Node node2){  List<Edge> edges=getEdges(node1,node2);  if (edges.size() > 1) {    throw new IllegalStateException("There is more than one edge between " + node1 + " and "+ node2);  }  return removeEdges(edges);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static byte directProtocolVersion(GridKernalContext ctx,UUID nodeId) throws IgniteCheckedException {  assert nodeId != null;  ClusterNode node=ctx.discovery().node(nodeId);  if (node == null)   throw new IgniteCheckedException("Failed to define communication protocol version " + "(has node left topology?): " + nodeId);  assert !node.isLocal();  Byte attr=node.attribute(GridIoManager.DIRECT_PROTO_VER_ATTR);  byte rmtProtoVer=attr != null ? attr : 1;  if (rmtProtoVer < GridIoManager.DIRECT_PROTO_VER)   return rmtProtoVer; else   return GridIoManager.DIRECT_PROTO_VER;}  }
class C{  public void accept(final Path file) throws InterruptedException {  logger.info(String.format("Sending to thread pool; will queue if full: \"%s\".",file));  permits.acquire();  executor.execute(new ConsumerTask(file));}  }
class C{  public static void pipe(InputStream from,OutputStream to) throws IOException {  pipe(from,to,Long.MAX_VALUE);}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  private InputStream openInputStreamInternal(final Request request,CacheStrategy cacheStrategy,final int maxFileSize,final BlacklistType blacklistType,ClientIdentification.Agent agent) throws IOException {  final DigestURL url=request.url();  if (url.isFile() || url.isSMB()) {    cacheStrategy=CacheStrategy.NOCACHE;  }  final String protocol=url.getProtocol();  final String host=url.getHost();  final CrawlProfile crawlProfile=request.profileHandle() == null ? null : this.sb.crawler.get(UTF8.getBytes(request.profileHandle()));  if (blacklistType != null && host != null && Switchboard.urlBlacklist.isListed(blacklistType,host.toLowerCase(),url.getFile())) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),crawlProfile,FailCategory.FINAL_LOAD_CONTEXT,"url in blacklist",-1);    throw new IOException("DISPATCHER Rejecting URL '" + request.url().toString() + "'. URL is in blacklist.$");  }  Response cachedResponse=loadFromCache(request,cacheStrategy,agent,url,crawlProfile);  if (cachedResponse != null) {    return new ByteArrayInputStream(cachedResponse.getContent());  }  if (cacheStrategy == CacheStrategy.CACHEONLY) {    throw new IOException("cache only strategy");  }  checkAccessTime(agent,url);  if (host != null) {    if (accessTime.size() > accessTimeMaxsize)     accessTime.clear();    accessTime.put(host,System.currentTimeMillis());  }  InputStream inStream=null;  if (protocol.equals("http") || protocol.equals("https")) {    inStream=this.httpLoader.openInputStream(request,crawlProfile,1,maxFileSize,blacklistType,agent);  } else   if (protocol.equals("ftp") || protocol.equals("smb") || protocol.equals("file")) {    inStream=url.getInputStream(agent,null,null);  } else {    throw new IOException("Unsupported protocol '" + protocol + "' in url "+ url);  }  if (inStream == null) {    throw new IOException("Unable to open content stream");  }  return inStream;}  }
class C{  public RequestParams(Map<String,String> source){  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  protected int startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  return bridge.getPort();}  }
class C{  public void testEagerAdvance() throws IOException {  ObjectMapper mapper=new ObjectMapper();  JsonParser jp=createParserUsingReader("[ 1  ");  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  Integer I=mapper.readValue(jp,Integer.class);  assertEquals(Integer.valueOf(1),I);  try {    jp.nextToken();  } catch (  IOException ioe) {    verifyException(ioe,"Unexpected end-of-input: expected close marker for ARRAY");  }}  }
class C{  private synchronized void handleIpReconfig() throws Exception {  config=_coordinator.getCoordinatorClient().queryConfiguration(IpReconfigConstants.CONFIG_KIND,IpReconfigConstants.CONFIG_ID);  if (config == null) {    log.info("no ipreconfig request coming in yet.");    assureIPConsistent();    return;  }  if (isRollback()) {    assureIPConsistent();    return;  }  if (!isStarted(config)) {    log.info("ip reconfig procedure is not started.");    if (isFailed(config)) {      log.info("ip reconfig procedure failed. cleanup...");      IpReconfigUtil.cleanupLocalFiles();    }    stopPollExecutor();    return;  }  expiration_time=Long.valueOf(config.getConfig(IpReconfigConstants.CONFIG_EXPIRATION_KEY));  if (System.currentTimeMillis() >= expiration_time) {    setFailed(IpReconfigConstants.ERRSTR_TIMEOUT);    return;  }  startPollExecutor();  driveIpReconfigStateMachine();}  }
class C{  private void backupWidgets(BackupDataOutput data) throws IOException {  final LauncherAppState appState=LauncherAppState.getInstanceNoCreate();  if (appState == null || !initializeIconCache()) {    Log.w(TAG,"Failed to get icon cache during restore");    return;  }  final ContentResolver cr=mContext.getContentResolver();  final WidgetPreviewLoader previewLoader=new WidgetPreviewLoader(mContext);  final PagedViewCellLayout widgetSpacingLayout=new PagedViewCellLayout(mContext);  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  final DeviceProfile profile=appState.getDynamicGrid().getDeviceProfile();  if (DEBUG)   Log.d(TAG,"cellWidthPx: " + profile.cellWidthPx);  int backupWidgetCount=0;  String where=Favorites.ITEM_TYPE + "=" + Favorites.ITEM_TYPE_APPWIDGET+ " AND "+ getUserSelectionArg();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String providerName=cursor.getString(APPWIDGET_PROVIDER_INDEX);      final int spanX=cursor.getInt(SPANX_INDEX);      final int spanY=cursor.getInt(SPANY_INDEX);      final ComponentName provider=ComponentName.unflattenFromString(providerName);      Key key=null;      String backupKey=null;      if (provider != null) {        key=getKey(Key.WIDGET,providerName);        backupKey=keyToBackupKey(key);      } else {        Log.w(TAG,"empty intent on appwidget: " + id);      }      if (mExistingKeys.contains(backupKey)) {        if (DEBUG)         Log.d(TAG,"already saved widget " + backupKey);        mKeys.add(key);      } else       if (backupKey != null) {        if (DEBUG)         Log.d(TAG,"I can count this high: " + backupWidgetCount);        if (backupWidgetCount < MAX_WIDGETS_PER_PASS) {          if (DEBUG)           Log.d(TAG,"saving widget " + backupKey);          previewLoader.setPreviewSize(spanX * profile.cellWidthPx,spanY * profile.cellHeightPx,widgetSpacingLayout);          writeRowToBackup(key,packWidget(dpi,previewLoader,mIconCache,provider),data);          mKeys.add(key);          backupWidgetCount++;        } else {          if (VERBOSE)           Log.v(TAG,"deferring widget backup " + backupKey);          dataChanged();        }      }    }  }  finally {    cursor.close();  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(NAME).setRequired(true);  builder.addAttribute(REALM);  builder.addAttribute(VALUE);}  }
class C{  public final void testValidateLowercaseNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("ab 1-"));}  }
class C{  public RemoveTableChange(Table table){  super(table);}  }
class C{  public void testRowHandling() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDo("foobar?,bar*,foo");  rf.setIgnore("*.test,foobar2,bar23*");  filterHelper.setFilter(rf);  String names[]={"id"};  Long values[]={new Long(99)};  verifyRowAccept(filterHelper,0,"foobar1","foobar2",names,values);  verifyRowAccept(filterHelper,1,"bar2","foo",names,values);  verifyRowAccept(filterHelper,2,"foo","test2",names,values);  verifyRowIgnore(filterHelper,3,"foo","test",names,values);  verifyRowIgnore(filterHelper,4,"foobar2","foobar1",names,values);  verifyRowIgnore(filterHelper,5,"bar234","foobar1",names,values);  filterHelper.done();}  }
class C{  public ReplicatorCapabilities(TungstenProperties props) throws Exception {  Set<String> keys=props.keyNames();  for (  String key : keys) {    if (key.equals(ROLES)) {      List<String> tags=props.getStringList(key);      for (      String tag : tags) {        if (tag.equalsIgnoreCase(ROLE_MASTER)) {          addRole(ReplicatorCapabilities.ROLE_MASTER);        } else         if (tag.equalsIgnoreCase(ROLE_SLAVE)) {          addRole(ReplicatorCapabilities.ROLE_SLAVE);        } else         if (tag.equalsIgnoreCase(ROLE_STANDBY)) {          addRole(ReplicatorCapabilities.ROLE_STANDBY);        } else {          throw new Exception("Unknown capability role: " + tag);        }      }    } else     if (key.equals(MODEL)) {      String tag=props.getString(key);      if (tag.equalsIgnoreCase(MODEL_PUSH)) {        setModel(MODEL_PUSH);      } else       if (tag.equalsIgnoreCase(MODEL_PULL)) {        setModel(MODEL_PULL);      } else       if (tag.equalsIgnoreCase(MODEL_PEER)) {        setModel(MODEL_PEER);      } else       if (tag.equalsIgnoreCase(UNKNOWN)) {        setModel(UNKNOWN);      } else {        throw new Exception("Unknown value for model: " + tag);      }    } else     if (key.equals(CAP_CONSISTENCY)) {      setConsistencyCheck(props.getBoolean(CAP_CONSISTENCY));    } else     if (key.equals(CAP_HEARTBEAT)) {      setHeartbeat(props.getBoolean(CAP_HEARTBEAT));    } else     if (key.equals(CAP_FLUSH)) {      setFlush(props.getBoolean(CAP_FLUSH));    } else     if (key.equals(PROVISION)) {      String tag=props.getString(key);      if (tag.equalsIgnoreCase(PROVISION_DONOR)) {        setProvisionDriver(PROVISION_DONOR);      } else       if (tag.equalsIgnoreCase(PROVISION_JOINER)) {        setProvisionDriver(PROVISION_JOINER);      } else       if (tag.equalsIgnoreCase(UNKNOWN)) {        setProvisionDriver(UNKNOWN);      } else {        throw new Exception("Unknown provision driver: " + tag);      }    } else {      throw new Exception("Unknown capability: " + key);    }  }}  }
class C{  public final boolean isBlocking(){  return mBlock;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DateConverter(Object defaultValue){  super(defaultValue);}  }
class C{  @Override public double max(){  return convertFromNS(histogram.max());}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public Bar(Collection<? extends E> c){  size=c.size();  elementData=(E[])new Object[(int)Math.min((size * 110L) / 100,Integer.MAX_VALUE)];  c.toArray(elementData);}  }
class C{  MemberPopupMenu(String member,boolean showLeaderOps){  this.member=member;  JMenuItem item=new JMenuItem("Where");  item.addActionListener(new WhereAction());  add(item);  if (showLeaderOps) {    item=new JMenuItem("Kick");    add(item);    item.addActionListener(new KickAction());    item=new JMenuItem("Make Leader");    add(item);    item.addActionListener(new TransferLeadershipAction());  }}  }
class C{  public final boolean isWarnEnabled(){  return false;}  }
class C{  public void jump(){  endSoftwareAnimations();}  }
class C{  private static double v2Dot(Point2D.Double a,Point2D.Double b){  return (a.x * b.x) + (a.y * b.y);}  }
class C{  public static DuplicateRegistrationError newFor(Object obj){  return new DuplicateRegistrationError("Cannot re-register object! " + obj);}  }
class C{  void fireActionEvent(){  if (actionListeners != null) {    ActionEvent evt=new ActionEvent(this,ActionEvent.Type.Edit);    actionListeners.fireActionEvent(evt);  }  if (bindListeners != null) {    String t=getText();    bindListeners.fireBindTargetChange(this,"text",lastTextValue,t);    lastTextValue=t;  }}  }
class C{  public static Object unbox(TruffleObject foreignObject){  if (foreignObject == null) {    return null;  }  try {    return ToJavaNode.message(Message.UNBOX,foreignObject);  } catch (  InteropException iex) {    return null;  }}  }
class C{  public static boolean cs_usolve(Scs U,float[] x){  int p, j, n, Up[], Ui[];  float Ux[];  if (!Scs_util.CS_CSC(U) || x == null)   return (false);  n=U.n;  Up=U.p;  Ui=U.i;  Ux=U.x;  for (j=n - 1; j >= 0; j--) {    x[j]/=Ux[Up[j + 1] - 1];    for (p=Up[j]; p < Up[j + 1] - 1; p++) {      x[Ui[p]]-=Ux[p] * x[j];    }  }  return (true);}  }
class C{  public boolean generateAndTranslateKey() throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  SecretKey key1=getSecretKeyForPBKDF2(algoToTest);  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoToTest);  SecretKey key2=skf.translateKey(key1);  if (!Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    System.err.println("generateAndTranslateKey test case failed: the " + "key1 and key2 values in its primary encoding format are " + "not the same for " + algoToTest + "algorithm.");    return false;  }  return true;}  }
class C{  private static void compressLongestRunOfZeroes(int[] hextets){  int bestRunStart=-1;  int bestRunLength=-1;  int runStart=-1;  for (int i=0; i < hextets.length + 1; i++) {    if (i < hextets.length && hextets[i] == 0) {      if (runStart < 0) {        runStart=i;      }    } else     if (runStart >= 0) {      int runLength=i - runStart;      if (runLength > bestRunLength) {        bestRunStart=runStart;        bestRunLength=runLength;      }      runStart=-1;    }  }  if (bestRunLength >= 2) {    Arrays.fill(hextets,bestRunStart,bestRunStart + bestRunLength,-1);  }}  }
class C{  private static int subN(int[] a,int[] b,int len){  long sum=0;  while (--len >= 0) {    sum=(a[len] & LONG_MASK) - (b[len] & LONG_MASK) + (sum >> 32);    a[len]=(int)sum;  }  return (int)(sum >> 32);}  }
class C{  public static float min(final float... array){  validateArray(array);  float min=array[0];  for (int i=1; i < array.length; i++) {    if (Float.isNaN(array[i])) {      return Float.NaN;    }    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  @Deprecated public static void logWarnAtMostOnce(Logger logger,String message){  AtMostOnceLogger.warn(logger,message);}  }
class C{  public void storeToXML(OutputStream os,String comment) throws IOException {  storeToXML(os,comment,"UTF-8");}  }
class C{  long selectLongUnregisteredQuery(Connection c,String sql,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectLongInternal(c,SQLString.getUnregisteredQuery(sql),vs,null,true);}  }
class C{  public static IXMLParser createXMLParser(String className,IXMLBuilder builder) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  Class cls=Class.forName(className);  IXMLParser parser=(IXMLParser)cls.newInstance();  parser.setBuilder(builder);  parser.setValidator(new NonValidator());  return parser;}  }
class C{  protected BasicUserImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public SnmpGauge(Integer v) throws IllegalArgumentException {  super(v);}  }
class C{  @Override public void installCoreTypes() throws InvalidConfigException {  List<Extension> extensions=getCoreTypes();  for (  Extension ext : extensions) {    install(ext.getUrl());  }}  }
class C{  public static void awaitState(Thread.State state,Thread... threads) throws InterruptedException {  while (true) {    boolean done=true;    for (    Thread thread : threads) {      if (thread.getState() != state) {        done=false;        break;      }    }    if (done) {      return;    }    if (random().nextBoolean()) {      Thread.yield();    } else {      Thread.sleep(1);    }  }}  }
class C{  private byte[] intToBytes(int x) throws IOException {  byte[] bytes=new byte[2];  bytes[1]=(byte)(x & 0xff);  bytes[0]=(byte)(x >> 8);  return bytes;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion pr,long startTime) throws CacheException, QueryException, ForceReattemptException, InterruptedException {  ReplyException replyEx=null;  boolean result=true;  int bucketIndexRemoved=0;  int numIndexesRemoved=0;  logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_WILL_REMOVE_THE_INDEXES_ON_THIS_PR___0,pr));  try {    if (this.removeSingleIndex) {      bucketIndexRemoved=pr.removeIndex(this.indexName);    } else {      bucketIndexRemoved=pr.removeIndexes(true);    }    numIndexesRemoved=pr.getDataStore().getAllLocalBuckets().size();  } catch (  Exception ex) {    result=false;    replyEx=new ReplyException(ex);  }  sendReply(getSender(),getProcessorId(),dm,replyEx,result,bucketIndexRemoved,numIndexesRemoved);  return false;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  int nBands=1;  int nBits=8;  int skipBytes=0;  double xDim=1;  double yDim=1;  double ulxmap=0;  double ulymap=0;  String layout="bil";  String pixelType="unsignedint";  String xyUnits="not specified";  String zUnits="not specified";  String projection="not specified";  String byteOrder=java.nio.ByteOrder.nativeOrder().toString();  String[] imageFiles;  int numImages=0;  double noData=-32768;  String dataType="float";  String dataScale="continuous";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double west=0;  double north=0;  double east=0;  double south=0;  RandomAccessFile rIn=null;  FileChannel inChannel=null;  ByteBuffer buf=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames={"bil","bsq","bip"};      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      String fileHeader=fileName.replace("." + fileExtension,".hdr");      if (!whitebox.utilities.FileUtilities.fileExists(fileHeader) || !fileHeader.contains(".hdr")) {        showFeedback("This image header file (.hdr) could not be located.");        return;      }      FileInputStream fstream=new FileInputStream(fileHeader);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter=",";      String line;      String[] str;      rows=0;      cols=0;      while ((line=br.readLine()) != null) {        if (line.startsWith("data type")) {          line=line.replace("data type","datatype");        }        if (line.startsWith("header offset")) {          line=line.replace("header offset","headeroffset");        }        if (line.startsWith("x start")) {          line=line.replace("x start","xstart");        }        if (line.startsWith("y start")) {          line=line.replace("y start","ystart");        }        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("byteorder")) {          if (str[str.length - 1].toLowerCase().contains("i")) {            byteOrder="LITTLE_ENDIAN";          } else {            byteOrder="BIG_ENDIAN";          }        } else         if (str[0].toLowerCase().contains("nrows")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ncols")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbits")) {          nBits=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("skipbytes")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("xdim")) {          xDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ydim")) {          yDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulxmap")) {          ulxmap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulymap")) {          ulymap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("layout")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("pixeltype")) {          if (str[str.length - 1].toLowerCase().contains("float")) {            pixelType="float";          } else           if (str[str.length - 1].toLowerCase().contains("signed") && !str[str.length - 1].toLowerCase().contains("unsigned")) {            pixelType="signedint";          } else {            pixelType="unsignedint";          }        } else         if (str[0].toLowerCase().contains("xyunits")) {          xyUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("zunits")) {          zUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("projection")) {          projection=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("nodata")) {          noData=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("lines")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("samples")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("bands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("headeroffset")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("interleave")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().equals("xstart")) {        } else         if (str[0].toLowerCase().equals("ystart")) {        } else         if (str[0].toLowerCase().contains("datatype")) {          int enviDTCode=Integer.parseInt(str[str.length - 1]);switch (enviDTCode) {case 1:            nBits=8;          pixelType="unsignedint";        break;case 2:      nBits=16;    pixelType="signedint";  break;case 3:nBits=32;pixelType="signedint";break;case 4:nBits=32;pixelType="float";break;case 5:nBits=64;pixelType="float";break;case 6:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 9:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 12:nBits=(int)16;pixelType="unsignedint";break;case 13:nBits=32;pixelType="unsignedint";break;case 14:nBits=64;pixelType="unsignedint";break;}}}char[] extChars=fileExtension.toCharArray();boolean worldFileFound=false;String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";String worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=fileExtension + "w";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=".wld";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;}}}if (worldFileFound) {double A=0, B=0, C=0, D=0, E=0, F=0;fstream=new FileInputStream(worldFile);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));int n=0;while ((line=br.readLine()) != null) {switch (n) {case 0:A=Double.parseDouble(line);break;case 1:D=Double.parseDouble(line);break;case 2:B=Double.parseDouble(line);break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {west=A * 0 + B * 0 + C;north=D * 0 + E * 0 + F;east=A * (cols - 1) + B * (rows - 1) + C;south=D * (cols - 1) + E * (rows - 1) + F;} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {west=ulxmap;north=ulymap;east=ulxmap + cols * xDim;south=ulymap - rows * yDim;}if (nBits <= 32 && pixelType.toLowerCase().contains("int")) {dataType="integer";} else if (nBits <= 32 && pixelType.toLowerCase().contains("float")) {dataType="float";} else {dataType="double";}for (int a=0; a < nBands; a++) {if (nBands > 1) {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".tas");} else {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,".tas");}(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String outputByteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + projection;out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "grey.pal";out.println(str1);str1="NoData:\t" + String.valueOf(noData);out.println(str1);if (outputByteOrder.toLowerCase().contains("lsb") || outputByteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int numBytes=nBits / 8;int pos;if (layout.equals("bil") || fileExtension.equals("bil")) {int readLengthInBytes=cols * numBytes;int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(readLengthInBytes);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bsq") || fileExtension.equals("bsq")) {int rowLength=cols * numBytes;int bandLength=rows * cols * numBytes;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bip") || fileExtension.equals("bip")) {int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes * a));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes * a));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();}if (a < 10) {returnData(whiteboxHeaderFile);}}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void checkIteratorsCleared(){  for (int j=0; j < gridCount(); j++)   executeOnLocalOrRemoteJvm(j,new CheckIteratorTask(cacheName()));}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getAirHrMin();}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_context : DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public static void addLightGradient(SVGPlot svgp){  Element gradient=svgp.getIdElement(LIGHT_GRADIENT_ID);  if (gradient == null) {    gradient=svgp.svgElement(SVGConstants.SVG_LINEAR_GRADIENT_TAG);    gradient.setAttribute(SVGConstants.SVG_ID_ATTRIBUTE,LIGHT_GRADIENT_ID);    gradient.setAttribute(SVGConstants.SVG_X1_ATTRIBUTE,"0");    gradient.setAttribute(SVGConstants.SVG_Y1_ATTRIBUTE,"0");    gradient.setAttribute(SVGConstants.SVG_X2_ATTRIBUTE,"0");    gradient.setAttribute(SVGConstants.SVG_Y2_ATTRIBUTE,"1");    Element stop0=svgp.svgElement(SVGConstants.SVG_STOP_TAG);    stop0.setAttribute(SVGConstants.SVG_STOP_COLOR_ATTRIBUTE,"white");    stop0.setAttribute(SVGConstants.SVG_STOP_OPACITY_ATTRIBUTE,"1");    stop0.setAttribute(SVGConstants.SVG_OFFSET_ATTRIBUTE,"0");    gradient.appendChild(stop0);    Element stop04=svgp.svgElement(SVGConstants.SVG_STOP_TAG);    stop04.setAttribute(SVGConstants.SVG_STOP_COLOR_ATTRIBUTE,"white");    stop04.setAttribute(SVGConstants.SVG_STOP_OPACITY_ATTRIBUTE,"0");    stop04.setAttribute(SVGConstants.SVG_OFFSET_ATTRIBUTE,".4");    gradient.appendChild(stop04);    Element stop06=svgp.svgElement(SVGConstants.SVG_STOP_TAG);    stop06.setAttribute(SVGConstants.SVG_STOP_COLOR_ATTRIBUTE,"black");    stop06.setAttribute(SVGConstants.SVG_STOP_OPACITY_ATTRIBUTE,"0");    stop06.setAttribute(SVGConstants.SVG_OFFSET_ATTRIBUTE,".6");    gradient.appendChild(stop06);    Element stop1=svgp.svgElement(SVGConstants.SVG_STOP_TAG);    stop1.setAttribute(SVGConstants.SVG_STOP_COLOR_ATTRIBUTE,"black");    stop1.setAttribute(SVGConstants.SVG_STOP_OPACITY_ATTRIBUTE,".5");    stop1.setAttribute(SVGConstants.SVG_OFFSET_ATTRIBUTE,"1");    gradient.appendChild(stop1);    svgp.getDefs().appendChild(gradient);    svgp.putIdElement(LIGHT_GRADIENT_ID,gradient);  }}  }
class C{  public boolean isLabelPresent(AbstractStorageLabelType<?> labelType){  for (  AbstractStorageLabel<?> label : labelList) {    if (label.getStorageLabelType().equals(labelType)) {      return true;    }  }  return false;}  }
class C{  private void validateAclAssignments(ACLAssignmentChanges changes){  if (changes == null) {    throw APIException.badRequests.requiredParameterMissingOrEmpty("ACLAssignmentChanges");  }  if (CollectionUtils.isEmpty(changes.getAdd()) && CollectionUtils.isEmpty(changes.getRemove())) {    throw APIException.badRequests.requiredParameterMissingOrEmpty("ACLAssignmentChanges");  }  validateAclEntries(changes.getAdd());  validateAclEntries(changes.getRemove());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ADDITIVE_EXPRESSION__LHS:    return getLhs();case N4JSPackage.ADDITIVE_EXPRESSION__OP:  return getOp();case N4JSPackage.ADDITIVE_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int occupiedBits(){  return occupiedBits;}  }
class C{  protected void prepareCacheConfigurations(CacheConfiguration dataCacheCfg,CacheConfiguration metaCacheCfg){}  }
class C{  public static Object staticFieldBase(Field field){  return UNSAFE.staticFieldBase(field);}  }
class C{  static boolean subtract(Rectangle rect,Rectangle subtr){  if (rect == null || subtr == null) {    return true;  }  Rectangle common=rect.intersection(subtr);  if (common.isEmpty()) {    return true;  }  if (rect.x == common.x && rect.y == common.y) {    if (rect.width == common.width) {      rect.y+=common.height;      rect.height-=common.height;      return true;    } else     if (rect.height == common.height) {      rect.x+=common.width;      rect.width-=common.width;      return true;    }  } else   if (rect.x + rect.width == common.x + common.width && rect.y + rect.height == common.y + common.height) {    if (rect.width == common.width) {      rect.height-=common.height;      return true;    } else     if (rect.height == common.height) {      rect.width-=common.width;      return true;    }  }  return false;}  }
class C{  public void needClientAuth(boolean needClientAuth){  this.needClientAuth=needClientAuth;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  ipBox.textboxKeyTyped(par1,par2);  maxThreadsBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public MQuery deepCopy(){  MQuery newQuery=new MQuery(m_TableName);  for (int i=0; i < m_list.size(); i++)   newQuery.addRestriction((Restriction)m_list.get(i));  return newQuery;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.500 -0500",hash_original_method="B1F693A20C9EACBCF1A076E751E2AC13",hash_generated_method="125A42D2E17871CA889CBF43544732B4") public static ProgramStore BLEND_NONE_DEPTH_TEST(RenderScript rs){  if (rs.mProgramStore_BLEND_NONE_DEPTH_TEST == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.LESS);    builder.setBlendFunc(BlendSrcFunc.ONE,BlendDstFunc.ZERO);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(true);    rs.mProgramStore_BLEND_NONE_DEPTH_TEST=builder.create();  }  return rs.mProgramStore_BLEND_NONE_DEPTH_TEST;}  }
class C{  private static String mapJoinStatusFromIDMToREST(JoinStatus joinStatus){  if (joinStatus == JoinStatus.ACTIVE_DIRECTORY_JOIN_STATUS_UNKNOWN) {    return ADJoinStatus.UNKNOWN.name();  } else   if (joinStatus == JoinStatus.ACTIVE_DIRECTORY_JOIN_STATUS_WORKGROUP) {    return ADJoinStatus.WORKGROUP.name();  } else   if (joinStatus == JoinStatus.ACTIVE_DIRECTORY_JOIN_STATUS_DOMAIN) {    return ADJoinStatus.DOMAIN.name();  } else {    throw new DTOMapperException("Failed to map AD join status :" + joinStatus.name());  }}  }
class C{  public void addConnectionListener(ConnectionListener cl){  this.connectionListeners.add(cl);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void create(HttpServletRequest request,File dir,String name) throws IOException, ServletException {  if (name == null || name.length() == 0) {    return;  }  File newDir=new File(dir,name);  if (isAccessible(request,newDir)) {    if (newDir.mkdirs()) {      BssClient bssClient=new BssClient(request.getRemoteHost());      try {        bssClient.recordEvent(getSaasId(request),ProvisioningServiceSkeleton.EVENT_ID_FOLDER_NEW,getUserId(request),MULTIPLIER);      } catch (      OrganizationAuthoritiesExceptionException e) {        addError(request,e.getMessage());      }catch (      ValidationExceptionException e) {        addError(request,e.getMessage());      }catch (      ObjectNotFoundExceptionException e) {        addError(request,e.getMessage());      }    } else {      addError(request,ERROR_CREATE + name);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=element.isSupported(featureXML,version);    assertTrue("nodeissupported01_XML1",success);    success=element.isSupported(featureXML,version1);    assertTrue("nodeissupported01_XML2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=element.isSupported(featureCore,version);    assertTrue("nodeissupported01_Core1",success);    success=element.isSupported(featureCore,version1);    success=element.isSupported(featureCore,version2);    assertTrue("nodeissupported01_Core3",success);  }}  }
class C{  public static Builder builder(LeaveResponse response){  return new Builder(response);}  }
class C{  protected void reportAllReturns(String methodCall,String msg){  log.methodReturned(this,methodCall,msg);}  }
class C{  public final void assemble(String fname){  File out_file=null;  FileOutputStream outp=null;  File file=new File(fname);  ClassFile classFile=new ClassFile();  String iocause=fname + ": file not found";  try {    BufferedReader inp;{      FileInputStream fs=new FileInputStream(fname);      InputStreamReader ir;      if (encoding == null)       ir=new InputStreamReader(fs); else       ir=new InputStreamReader(fs,encoding);      inp=new BufferedReader(ir);    }    classFile.readJasmin(inp,file.getName(),generate_linenum);    inp.close();    if (classFile.errorCount() > 0) {      System.err.println(fname + ": Found " + classFile.errorCount()+ " errors");      return;    }    String class_path[]=(ScannerUtils.splitClassField(classFile.getClassName()));    String class_name=class_path[1];    String dest_dir=dest_path;    if (class_path[0] != null) {      String class_dir=ScannerUtils.convertChars(class_path[0],"./",File.separatorChar);      if (dest_dir != null) {        dest_dir=dest_dir + File.separator + class_dir;      } else {        dest_dir=class_dir;      }    }    iocause=class_name + ".class: file can't be created";    if (dest_dir == null) {      out_file=new File(class_name + ".class");    } else {      out_file=new File(dest_dir,class_name + ".class");      File dest=new File(dest_dir);      if (!dest.exists()) {        dest.mkdirs();      }      if (!dest.isDirectory()) {        throw new IOException("Cannot create directory");      }    }    outp=new FileOutputStream(out_file);    classFile.write(outp);    outp.close();    outp=null;    System.out.println("Generated: " + out_file.getPath());  } catch (  java.io.FileNotFoundException e) {    System.err.println(iocause);    System.exit(-1);  }catch (  jasError e) {    classFile.report_error("JAS Error: " + e.getMessage(),e.numTag);  }catch (  Exception e) {    if (DEBUG)     e.printStackTrace();    classFile.report_error(fname + ": exception - <" + e.getClass().getName()+ "> "+ e.getMessage()+ ".");  }  if (classFile.errorCount() > 0) {    System.err.println(fname + ": Found " + classFile.errorCount()+ " errors");    if (outp != null) {      try {        outp.close();        out_file.delete();      } catch (      Exception e) {      }    }  }}  }
class C{  public void endGatewayBatch(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(gatewayBatchInProgressId,-1);  int endGatewayBatchId;  if (timedOut) {    endGatewayBatchId=gatewayBatchTimedOutId;  } else   if (failed) {    endGatewayBatchId=gatewayBatchFailedId;  } else {    endGatewayBatchId=gatewayBatchId;  }  this.stats.incInt(endGatewayBatchId,1);  this.stats.incLong(gatewayBatchDurationId,duration);}  }
class C{  @NonNull public DividerAdapterBuilder innerView(@NonNull ViewFactory viewFactory){  mInnerItem=new Item(viewFactory,false);  return this;}  }
class C{  public String globalInfo(){  return "Combines several classifiers using the stacking method. " + "Can do classification or regression.\n\n" + "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public final void testNotEmptyWithCharSequenceParameter(){  assertNotNull(Validators.notEmpty("foo"));}  }
class C{  public PointerDensityHierarchyRepresentationResult run(Database db,Relation<O> relation){  final DistanceQuery<O> distQ=db.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<O> knnQ=db.getKNNQuery(distQ,minPts);  final ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final WritableDoubleDataStore coredists=computeCoreDists(ids,knnQ,minPts);  final int numedges=ids.size() - 1;  DoubleLongHeap heap=new DoubleLongMinHeap(numedges);  FiniteProgress mprog=LOG.isVerbose() ? new FiniteProgress("Computing minimum spanning tree (n-1 edges)",numedges,LOG) : null;  PrimsMinimumSpanningTree.processDense(ids,new HDBSCANAdapter(ids,coredists,distQ),new HeapMSTCollector(heap,mprog,LOG));  LOG.ensureCompleted(mprog);  WritableDBIDDataStore pi=DataStoreUtil.makeDBIDStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  WritableDoubleDataStore lambda=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC,Double.POSITIVE_INFINITY);  convertToPointerRepresentation(ids,heap,pi,lambda);  return new PointerDensityHierarchyRepresentationResult(ids,pi,lambda,coredists);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USAT");  translateAll(environment,instruction,"USAT",instructions);}  }
class C{  @Override public IBinder onBind(Intent intent){  Log.i(TAG,"Client bound");  return mBinder;}  }
class C{  private void close(){  Window window=getWindow();  if (window != null) {    window.dispatchEvent(new WindowEvent(window,WindowEvent.WINDOW_CLOSING));  }}  }
class C{  public CalendarCell(Context context,int position,int iWidth,int iHeight){  super(context);  setFocusable(true);  setLayoutParams(new LayoutParams(iWidth,iHeight));  this.position=position;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.RELATIONAL_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.RELATIONAL_EXPRESSION__OP:setOp((RelationalOperator)newValue);return;case N4JSPackage.RELATIONAL_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ImageSource dimensions(int sWidth,int sHeight){  if (bitmap == null) {    this.sWidth=sWidth;    this.sHeight=sHeight;  }  setInvariants();  return this;}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  public JdbcRowSetImpl(Connection con) throws SQLException {  conn=con;  ps=null;  rs=null;  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  initParams();  setShowDeleted(false);  setQueryTimeout(0);  setMaxRows(0);  setMaxFieldSize(0);  setParams();  setReadOnly(true);  setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);  setEscapeProcessing(true);  setTypeMap(null);  iMatchColumns=new Vector<Integer>(10);  for (int i=0; i < 10; i++) {    iMatchColumns.add(i,Integer.valueOf(-1));  }  strMatchColumns=new Vector<String>(10);  for (int j=0; j < 10; j++) {    strMatchColumns.add(j,null);  }}  }
class C{  public synchronized int size(){  return count;}  }
class C{  private static Object deserializeOrUnmarshal(BinaryInputStream in,BinaryContext ctx,ClassLoader ldr,BinaryReaderHandlesHolder handles,boolean deserialize){  return deserialize ? doReadObject(in,ctx,ldr,handles) : unmarshal(in,ctx,ldr,handles);}  }
class C{  @SuppressFBWarnings(value="VA_FORMAT_STRING_USES_NEWLINE",justification="We will use the standard carriage return character.") public BusinessObjectData preRegisterBusinessObjectData(UploaderInputManifestDto manifest,String storageName,Boolean createNewVersion) throws IOException, JAXBException, URISyntaxException {  LOGGER.info("Pre-registering business object data with the registration server...");  BusinessObjectDataCreateRequest request=new BusinessObjectDataCreateRequest();  request.setNamespace(manifest.getNamespace());  request.setBusinessObjectDefinitionName(manifest.getBusinessObjectDefinitionName());  request.setBusinessObjectFormatUsage(manifest.getBusinessObjectFormatUsage());  request.setBusinessObjectFormatFileType(manifest.getBusinessObjectFormatFileType());  request.setBusinessObjectFormatVersion(Integer.parseInt(manifest.getBusinessObjectFormatVersion()));  request.setPartitionKey(manifest.getPartitionKey());  request.setPartitionValue(manifest.getPartitionValue());  request.setSubPartitionValues(manifest.getSubPartitionValues());  request.setCreateNewVersion(createNewVersion);  request.setStatus(BusinessObjectDataStatusEntity.UPLOADING);  List<StorageUnitCreateRequest> storageUnits=new ArrayList<>();  request.setStorageUnits(storageUnits);  StorageUnitCreateRequest storageUnit=new StorageUnitCreateRequest();  storageUnits.add(storageUnit);  storageUnit.setStorageName(storageName);  if (manifest.getAttributes() != null) {    List<Attribute> attributes=new ArrayList<>();    request.setAttributes(attributes);    for (    Map.Entry<String,String> entry : manifest.getAttributes().entrySet()) {      Attribute attribute=new Attribute();      attributes.add(attribute);      attribute.setName(entry.getKey());      attribute.setValue(entry.getValue());    }  }  request.setBusinessObjectDataParents(manifest.getBusinessObjectDataParents());  JAXBContext requestContext=JAXBContext.newInstance(BusinessObjectDataCreateRequest.class);  Marshaller requestMarshaller=requestContext.createMarshaller();  requestMarshaller.setProperty(Marshaller.JAXB_ENCODING,StandardCharsets.UTF_8.name());  requestMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  StringWriter sw=new StringWriter();  requestMarshaller.marshal(request,sw);  BusinessObjectData businessObjectData;  try (CloseableHttpClient client=httpClientOperations.createHttpClient()){    URI uri=new URIBuilder().setScheme(getUriScheme()).setHost(regServerAccessParamsDto.getRegServerHost()).setPort(regServerAccessParamsDto.getRegServerPort()).setPath(HERD_APP_REST_URI_PREFIX + "/businessObjectData").build();    HttpPost post=new HttpPost(uri);    post.addHeader("Content-Type",DEFAULT_CONTENT_TYPE);    post.addHeader("Accepts",DEFAULT_ACCEPT);    if (regServerAccessParamsDto.getUseSsl()) {      post.addHeader(getAuthorizationHeader());    }    post.setEntity(new StringEntity(sw.toString()));    LOGGER.info(String.format("    HTTP POST URI: %s",post.getURI().toString()));    LOGGER.info(String.format("    HTTP POST Headers: %s",Arrays.toString(post.getAllHeaders())));    LOGGER.info(String.format("    HTTP POST Entity Content:%n%s",sw.toString()));    businessObjectData=getBusinessObjectData(httpClientOperations.execute(client,post),"register business object data with the registration server");  }   LOGGER.info(String.format("Successfully pre-registered business object data with the registration server. businessObjectDataId=%s",businessObjectData.getId()));  return businessObjectData;}  }
class C{  public Shape createScrollButtonTogetherIncrease(int x,int y,int w,int h){  return createRectangle(x,y,w,h);}  }
class C{  public int hashCode(){  return map.hashCode();}  }
class C{  public boolean isDirectChildOf(EntityType type){  return parentTypeName != null && parentTypeName.equals(type.getInterfaceName());}  }
class C{  public boolean isVolumeExported(DbClient dbClient){  URIQueryResultList exportGroupURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(getId()),exportGroupURIs);  return exportGroupURIs.iterator().hasNext();}  }
class C{  public static double log10(double x){  return log(x) * INV_LOG10;}  }
class C{  public Iterable<Edge> edges(){  return mst;}  }
class C{  public static Angle limitRoll(Angle angle,ViewPropertyLimits viewLimits){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Angle[] limits=viewLimits.getRollLimits();  Angle newAngle=angle;  if (angle.compareTo(limits[0]) < 0) {    newAngle=limits[0];  } else   if (angle.compareTo(limits[1]) > 0) {    newAngle=limits[1];  }  return newAngle;}  }
class C{  private static String escape(String str){  return str.replace("\n","\\n").replace("\t","\\t");}  }
class C{  public void actionPerformed(ActionEvent e){  log.info("Cmd=" + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  try {    genForm.validate();  } catch (  Exception ex) {    ADialog.error(m_WindowNo,this,"Error",ex.getLocalizedMessage());  }}  }
class C{  public void testFloatValuePositiveInfinity1(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.POSITIVE_INFINITY);}  }
class C{  public void synchronizeForLostMember(InternalDistributedMember lostMember,VersionSource lostVersionID){  if (this.concurrencyChecksEnabled == false) {    return;  }  CacheDistributionAdvisor advisor=getCacheDistributionAdvisor();  Set<InternalDistributedMember> targets=advisor.adviseInitializedReplicates();  for (  InternalDistributedMember target : targets) {    synchronizeWith(target,lostVersionID,lostMember);  }}  }
class C{  public static String toString(final URL url,final String encoding) throws IOException {  return IOUtils.toString(url,Charsets.toCharset(encoding));}  }
class C{  int readInto(Data target){  target.checkCapacity(size);  if (type == (Page.TYPE_DATA_OVERFLOW | Page.FLAG_LAST)) {    target.write(data.getBytes(),START_LAST,size);    return 0;  }  target.write(data.getBytes(),START_MORE,size);  return nextPage;}  }
class C{  private void createClientEntity(){  this.clientId=ClientHelper.createClient(this.requestSpec,this.responseSpec);  ClientHelper.verifyClientCreatedOnServer(this.requestSpec,this.responseSpec,this.clientId);}  }
class C{  public void advanceSynchronizedProcessingTime(Instant newProcessingTime) throws Exception {  ReduceFnRunner<String,InputT,OutputT,W> runner=createRunner();  timerInternals.advanceSynchronizedProcessingTime(runner,newProcessingTime);  runner.persist();}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public MapContext<K,V> standAloneStack(){  MapContext<K,V> standAlone=MapContext.createMapContext(this);  return standAlone;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public POPOSigningKeyInput(PKMACValue pkmac,SubjectPublicKeyInfo spki){  this.publicKeyMAC=pkmac;  this.publicKey=spki;}  }
class C{  private boolean isBold(AttributedCharacterIterator ati){  Object weight=ati.getAttribute(TextAttribute.WEIGHT);  if (weight == null)   return false;  if (weight.equals(TextAttribute.WEIGHT_REGULAR))   return false;  if (weight.equals(TextAttribute.WEIGHT_DEMILIGHT))   return false;  if (weight.equals(TextAttribute.WEIGHT_EXTRA_LIGHT))   return false;  if (weight.equals(TextAttribute.WEIGHT_LIGHT))   return false;  return true;}  }
class C{  public EquipmentType(){}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  private void handleStopRecording(){  Log.d(TAG,"handleStopRecording");  mVideoEncoder.drainEncoder(true);  releaseEncoder();}  }
class C{  public void printContext(PrintStream out){  out.println(getMessage());  out.print(context);}  }
class C{  private static void writeDiscoveryConfiguration(BinaryRawWriter w,DiscoverySpi spi){  assert w != null;  assert spi != null;  if (!(spi instanceof TcpDiscoverySpi)) {    w.writeBoolean(false);    return;  }  w.writeBoolean(true);  TcpDiscoverySpi tcp=(TcpDiscoverySpi)spi;  TcpDiscoveryIpFinder finder=tcp.getIpFinder();  if (finder instanceof TcpDiscoveryVmIpFinder) {    w.writeBoolean(true);    boolean isMulticast=finder instanceof TcpDiscoveryMulticastIpFinder;    w.writeByte((byte)(isMulticast ? 2 : 1));    Collection<InetSocketAddress> addrs=finder.getRegisteredAddresses();    w.writeInt(addrs.size());    for (    InetSocketAddress a : addrs)     w.writeString(a.toString());    if (isMulticast) {      TcpDiscoveryMulticastIpFinder multiFinder=(TcpDiscoveryMulticastIpFinder)finder;      w.writeString(multiFinder.getLocalAddress());      w.writeString(multiFinder.getMulticastGroup());      w.writeInt(multiFinder.getMulticastPort());      w.writeInt(multiFinder.getAddressRequestAttempts());      w.writeInt(multiFinder.getResponseWaitTime());      int ttl=multiFinder.getTimeToLive();      w.writeBoolean(ttl != -1);      if (ttl != -1)       w.writeInt(ttl);    }  } else {    w.writeBoolean(false);  }  w.writeLong(tcp.getSocketTimeout());  w.writeLong(tcp.getAckTimeout());  w.writeLong(tcp.getMaxAckTimeout());  w.writeLong(tcp.getNetworkTimeout());  w.writeLong(tcp.getJoinTimeout());  w.writeBoolean(tcp.isForceServerMode());  w.writeBoolean(tcp.isClientReconnectDisabled());  w.writeString(tcp.getLocalAddress());  w.writeInt(tcp.getReconnectCount());  w.writeInt(tcp.getLocalPort());  w.writeInt(tcp.getLocalPortRange());  w.writeInt(tcp.getMaxMissedHeartbeats());  w.writeInt(tcp.getMaxMissedClientHeartbeats());  w.writeLong(tcp.getStatisticsPrintFrequency());  w.writeLong(tcp.getIpFinderCleanFrequency());  w.writeInt(tcp.getThreadPriority());  w.writeLong(tcp.getHeartbeatFrequency());  w.writeInt((int)tcp.getTopHistorySize());}  }
class C{  public void removeLayoutComponent(Component child){}  }
class C{  protected void registerRules(boolean reset){  if (reset) {    m_WMRules.clear();  }  WMRuleInterface rule=getWMRuleFactory(WMRuleFIFO.class.getSimpleName());}  }
class C{  public GmlLowerCorner(Point copyFrom){  super(Namespaces.GML_NAMESPACE,NAME,copyFrom);}  }
class C{  public SVGPath relativeVerticalLineTo(double y){  if (y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(PATH_VERTICAL_LINE_TO_RELATIVE,y);  }  return this;}  }
class C{  @Override public void close(){  List<CloseableReference<Bitmap>> bitmapReferences;synchronized (this) {    if (mBitmapReferences == null) {      return;    }    bitmapReferences=mBitmapReferences;    mBitmapReferences=null;    mBitmaps=null;    mDurations=null;  }  CloseableReference.closeSafely(bitmapReferences);}  }
class C{  public void success(JSONArray message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  protected void handleLRUElementPurged(Object key,Object value){}  }
class C{  protected void doRelease(){  bytesRead=0;}  }
class C{  private VOPricedParameter copyParameter(VOPricedParameter paramOld){  VOPricedParameter paramNew=new VOPricedParameter();  paramNew.setKey(paramOld.getKey());  paramNew.setParameterKey(paramOld.getParameterKey());  paramNew.setPricedOptions(paramOld.getPricedOptions());  paramNew.setPricePerUser(paramOld.getPricePerUser());  paramNew.setRoleSpecificUserPrices(paramOld.getRoleSpecificUserPrices());  paramNew.setVersion(paramOld.getVersion());  paramNew.setVoParameterDef(paramOld.getVoParameterDef());  paramNew.setSteppedPrices(paramOld.getSteppedPrices());  return paramNew;}  }
class C{  public boolean isValid(String expectedToken,String actualToken){  return expectedToken != null && expectedToken.equals(actualToken);}  }
class C{  public void dump(){  VM.sysWrite("********* START OF SSA LOOP DUMP in AnnotatedLSTNode FOR " + ir.method + "\n");  if (isNonRegularLoop()) {    VM.sysWrite("Non-regular");  } else   if (isAffineLoop()) {    VM.sysWrite("Affine");  } else   if (isCountableLoop()) {    VM.sysWrite("Countable");  } else {    VM.sysWrite("INVALID");  }  VM.sysWrite(" Loop:\n\tIteratorInstr: " + iteratorInstr.toString() + "\n\tIfCmpInstr:"+ ifCmpInstr.toString()+ "\n\tTerminalIteratorValue: "+ terminalIteratorValue.toString()+ "\n\tInitialIteratorValue: "+ initialIteratorValue.toString()+ "\n\tCarriedLoopIterator: "+ carriedLoopIterator.toString()+ "\n\tPhiLoopIterator: "+ phiLoopIterator.toString()+ "\n\tStrideValue: "+ strideValue.toString()+ "\n\tLoop: "+ getBasicBlocks().toString()+ " / "+ loop.toString()+ "\n");  Enumeration<BasicBlock> loopBlocks=getBasicBlocks();  while (loopBlocks.hasMoreElements()) {    BasicBlock curLoopBB=loopBlocks.nextElement();    dumpBlock(curLoopBB);  }  VM.sysWrite("*********   END OF SSA LOOP DUMP in AnnotatedLSTNode FOR " + ir.method + "\n");}  }
class C{  public List<String> asLines(){  return asLines(getOutput());}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static int textWidth(@NotNull Editor editor,@NotNull CharSequence text,int start,int end,@JdkConstants.FontStyle int fontType,int x){  int result=0;  for (int i=start; i < end; i++) {    char c=text.charAt(i);    if (c != '\t') {      FontInfo font=fontForChar(c,fontType,editor);      result+=font.charWidth(c);      continue;    }    result+=nextTabStop(x + result,editor) - result - x;  }  return result;}  }
class C{  public void addSource(String className,String source,String fileName){  KalangSource src=new KalangSource(className,source,fileName);  addSource(src);}  }
class C{  public void removeOnReconnectListener(OnReconnect listener){  if (listener != null) {    boolean wasRemoved;synchronized (reconnectListeners) {      wasRemoved=reconnectListeners.remove(listener);    }    if (wasRemoved) {      log.debug("Removed OnReconnect listener " + listener);    } else {      log.warn("Was asked to remove OnReconnect listener " + listener + ", but remove operation did not find it in the list of registered listeners.");    }  }}  }
class C{  public AccessibleRelation(String key){  this.key=key;  this.target=null;}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postEvaluationStatistics(state);}  }
class C{  public String dateFormatTipText(){  return "The format of the date values (see ISO-8601).";}  }
class C{  public GroovyPrintStream(String fileName,String csn) throws FileNotFoundException, UnsupportedEncodingException {  super(fileName,csn);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public Vec2 centroid(final Transform xf){  return Transform.mul(xf,m_centroid);}  }
class C{  boolean persistManagedSchemaToZooKeeper(boolean createOnly){  final ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;  final ZkController zkController=zkLoader.getZkController();  final SolrZkClient zkClient=zkController.getZkClient();  final String managedSchemaPath=zkLoader.getCollectionZkPath() + "/" + managedSchemaResourceName;  boolean success=true;  boolean schemaChangedInZk=false;  try {    StringWriter writer=new StringWriter();    persist(writer);    final byte[] data=writer.toString().getBytes(StandardCharsets.UTF_8);    if (createOnly) {      try {        zkClient.create(managedSchemaPath,data,CreateMode.PERSISTENT,true);        schemaZkVersion=0;        log.info("Created and persisted managed schema znode at " + managedSchemaPath);      } catch (      KeeperException.NodeExistsException e) {        log.info("Managed schema znode at " + managedSchemaPath + " already exists - no need to create it");      }    } else {      try {        Stat stat=zkClient.setData(managedSchemaPath,data,schemaZkVersion,true);        schemaZkVersion=stat.getVersion();        log.info("Persisted managed schema at " + managedSchemaPath);      } catch (      KeeperException.BadVersionException e) {        success=false;        schemaChangedInZk=true;      }    }  } catch (  Exception e) {    if (e instanceof InterruptedException) {      Thread.currentThread().interrupt();    }    final String msg="Error persisting managed schema at " + managedSchemaPath;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  }  if (schemaChangedInZk) {    String msg="Failed to persist managed schema at " + managedSchemaPath + " - version mismatch";    log.info(msg);    throw new SchemaChangedInZkException(ErrorCode.CONFLICT,msg + ", retry.");  }  return success;}  }
class C{  public FormattedAddress(){  super(KEY);}  }
class C{  public ShibbolethSystemScopeRepository(final Set<SystemScope> scs){  this.scopes=scs;}  }
class C{  public static boolean addVelocimacro(String name,Node macro,String argArray[],String sourceTemplate){  return ri.addVelocimacro(name,macro,argArray,sourceTemplate);}  }
class C{  private void init(String text,boolean canNotWait,int timer){  log.fine(text + " - Sec=" + timer);  if (timer == 1)   return;  try {    jbInit();    setText(text);    if (!canNotWait)     bDoNotWait.setVisible(false);  } catch (  Exception e) {    log.log(Level.SEVERE,"Waiting",e);  }  progressBar.setMinimum(0);  progressBar.setMaximum(timer < 5 ? 10 : timer);  m_timer=new Timer(1000,this);  m_timer.start();  AEnv.showCenterWindow(getOwner(),this);}  }
class C{  public ATM(){  super();}  }
class C{  public ProjectTodoStatusObject(){  super();}  }
class C{  protected <T>T jndiLookup(String name) throws NamingException {  try {    String port=getLocalContainer().getConfiguration().getPropertyValue(GeneralPropertySet.RMI_PORT);    URL[] urls;    if (getContainer().getId().startsWith("jboss7")) {      List<File> files=new ArrayList<File>();      addAllJars(new File(getInstalledLocalContainer().getHome(),"modules"),files);      urls=new URL[files.size()];      for (int i=0; i < files.size(); i++) {        urls[i]=files.get(i).toURI().toURL();      }    } else {      File allClientJar=new File(getInstalledLocalContainer().getHome(),"client/jbossall-client.jar");      if (!allClientJar.isFile()) {        throw new IllegalStateException("Cannot find " + allClientJar);      }      urls=new URL[]{allClientJar.toURI().toURL()};    }    URLClassLoader classloader=new URLClassLoader(urls,getClass().getClassLoader());    Thread.currentThread().setContextClassLoader(classloader);    Properties props=new Properties();    if (getContainer().getId().startsWith("jboss7")) {      props.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.jboss.as.naming.InitialContextFactory");      props.setProperty(Context.URL_PKG_PREFIXES,"org.jboss.as.naming.interfaces");    } else {      props.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.jnp.interfaces.NamingContextFactory");      props.setProperty(Context.URL_PKG_PREFIXES,"org.jboss.naming:org.jnp.interfaces");    }    props.setProperty(Context.PROVIDER_URL,"jnp://localhost:" + port);    Context jndi=new InitialContext(props);    try {      return (T)jndi.lookup(name);    } catch (    NameNotFoundException e) {      StringBuilder sb=new StringBuilder("Cannot find " + name + ". Found names:");      NamingEnumeration<Binding> list=jndi.listBindings("");      while (list.hasMore()) {        sb.append("\n\t- " + list.next().getName());      }      throw new CargoException(sb.toString(),e);    }  } catch (  MalformedURLException e) {    throw new IllegalStateException("Failed creating JBoss classpath",e);  }}  }
class C{  private void readStart(){  long now=System.nanoTime();  userTime+=now - lastTs;  lastTs=now;}  }
class C{  public void testGetOutputBooksDistribuidor1(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("distribuidor1");  value.setPassword("distribuidor1");  value.setOfficeCode("001");  security.setUsernameToken(value);  ArrayOfWSBook result=client.wsGetOutputBooks(security);  assertNotNull(result);  assertEquals(1,result.getWSBook().size());  WSBook wsBook=(WSBook)CollectionUtils.find(result.getWSBook(),new BeanPropertyValueEqualsPredicate("id",2));  assertEquals(2,wsBook.getId());  assertEquals("Libro de Salida",wsBook.getName());  assertEquals(2,wsBook.getType());  assertTrue(wsBook.isCanCreate());  assertTrue(wsBook.isCanModify());  assertFalse(wsBook.isReadOnly());}  }
class C{  protected void registerContainerAttributes(){  addAttributeProcessor(new ContainerAdjustPaddingLmlAttribute(),"adjustPadding");  addAttributeProcessor(new ContainerAlignLmlAttribute(),"align");  addAttributeProcessor(new ContainerBackgroundLmlAttribute(),"bg","background");  addAttributeProcessor(new ContainerClipLmlAttribute(),"clip");  addAttributeProcessor(new ContainerFillLmlAttribute(),"fill");  addAttributeProcessor(new ContainerFillXLmlAttribute(),"fillX");  addAttributeProcessor(new ContainerFillYLmlAttribute(),"fillY");  addAttributeProcessor(new ContainerHeightLmlAttribute(),"height");  addAttributeProcessor(new ContainerMaxHeightLmlAttribute(),"maxHeight");  addAttributeProcessor(new ContainerMaxSizeLmlAttribute(),"maxSize");  addAttributeProcessor(new ContainerMaxWidthLmlAttribute(),"maxWidth");  addAttributeProcessor(new ContainerMinHeightLmlAttribute(),"minHeight");  addAttributeProcessor(new ContainerMinSizeLmlAttribute(),"minSize");  addAttributeProcessor(new ContainerMinWidthLmlAttribute(),"minWidth");  addAttributeProcessor(new ContainerPrefHeightLmlAttribute(),"prefHeight");  addAttributeProcessor(new ContainerPrefSizeLmlAttribute(),"prefSize");  addAttributeProcessor(new ContainerPrefWidthLmlAttribute(),"prefWidth");  addAttributeProcessor(new ContainerRoundLmlAttribute(),"round");  addAttributeProcessor(new ContainerSizeLmlAttribute(),"size");  addAttributeProcessor(new ContainerWidthLmlAttribute(),"width");}  }
class C{  public ByteString sha256(){  return digest("SHA-256");}  }
class C{  public void broadcastSerialData(byte[] data){  broadcastSerialData(data,null);}  }
class C{  public void schedulePriority(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  long expire=MAX_EXPIRE;  boolean isPriority=true;  boolean isQueue=true;  boolean isWake=true;  if (!scheduleImpl(task,loader,expire,isPriority,isQueue,isWake)) {    String msg=(this + " unable to schedule priority thread " + task+ " pri-min="+ getPriorityIdleMin()+ " thread="+ getThreadCount()+ " idle="+ getThreadIdleCount()+ " starting="+ getThreadStartingCount()+ " max="+ getThreadMax());    log.warning(msg);    OverflowThread item=new OverflowThread(task);    item.start();    HealthSystemFacade.fireEvent(THREAD_FULL_EVENT,msg);  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public GraphIterator(final JTabbedPane tabbedPane){  m_tabbedPane=tabbedPane;}  }
class C{  @ApiOperation(value="Uninstall SymmetricDS on the single engine") @RequestMapping(value="engine/uninstall",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postUninstall(){  uninstallImpl(getSymmetricEngine());}  }
class C{  private static double CallStaticDoubleMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticDoubleMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Double);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected Instances selectWeightQuantile(Instances data,double quantile){  int numInstances=data.numInstances();  Instances trainData=new Instances(data,numInstances);  double[] weights=new double[numInstances];  double sumOfWeights=0;  for (int i=0; i < numInstances; i++) {    weights[i]=data.instance(i).weight();    sumOfWeights+=weights[i];  }  double weightMassToSelect=sumOfWeights * quantile;  int[] sortedIndices=Utils.sort(weights);  sumOfWeights=0;  for (int i=numInstances - 1; i >= 0; i--) {    Instance instance=(Instance)data.instance(sortedIndices[i]).copy();    trainData.add(instance);    sumOfWeights+=weights[sortedIndices[i]];    if ((sumOfWeights > weightMassToSelect) && (i > 0) && (weights[sortedIndices[i]] != weights[sortedIndices[i - 1]])) {      break;    }  }  if (m_Debug) {    System.err.println("Selected " + trainData.numInstances() + " out of "+ numInstances);  }  return trainData;}  }
class C{  public void leftEyeViewport(Eye eye){  if (this.stereoType == StereoType.SIDE_BY_SIDE) {    Viewport vp=eye.getViewport();    pgl.viewport(vp.x,vp.y,vp.width,vp.height);  } else {    pgl.viewport(0,0,this.width,this.height);  }}  }
class C{  public void addSymbol(String text,boolean hidden){  symbols.add(new TokenizerSymbol(null,text,null,hidden,false,true,false));}  }
class C{  private static void initManuallyKeyedVault(Context context) throws GeneralSecurityException {  SharedPreferenceVault sharedPreferenceVault=SharedPreferenceVaultFactory.getCompatAes256Vault(context,MANUALLY_KEYED_PREF_FILE_NAME,MANUALLY_KEYED_KEY_FILE_NAME,MANUALLY_KEYED_KEY_ALIAS,MANUALLY_KEYED_KEY_INDEX,MANUALLY_KEYED_PRESHARED_SECRET);  SharedPreferenceVaultRegistry.getInstance().addVault(MANUALLY_KEYED_KEY_INDEX,MANUALLY_KEYED_PREF_FILE_NAME,MANUALLY_KEYED_PREF_FILE_NAME,sharedPreferenceVault);}  }
class C{  private void rollCurrentFile(File fileToRoll) throws IOException {  File dest=new File(fileToRoll.getPath() + completedSuffix);  logger.info("Preparing to move file {} to {}",fileToRoll,dest);  if (dest.exists() && PlatformDetect.isWindows()) {    if (Files.equal(currentFile.get().getFile(),dest)) {      logger.warn("Completed file " + dest + " already exists, but files match, so continuing.");      boolean deleted=fileToRoll.delete();      if (!deleted) {        logger.error("Unable to delete file " + fileToRoll.getAbsolutePath() + ". It will likely be ingested another time.");      }    } else {      String message="File name has been re-used with different" + " files. Spooling assumptions violated for " + dest;      throw new IllegalStateException(message);    }  } else   if (dest.exists()) {    String message="File name has been re-used with different" + " files. Spooling assumptions violated for " + dest;    throw new IllegalStateException(message);  } else {    boolean renamed=fileToRoll.renameTo(dest);    if (renamed) {      logger.debug("Successfully rolled file {} to {}",fileToRoll,dest);      deleteMetaFile();    } else {      String message="Unable to move " + fileToRoll + " to "+ dest+ ". This will likely cause duplicate events. Please verify that "+ "flume has sufficient permissions to perform these operations.";      throw new FlumeException(message);    }  }}  }
class C{  public DimensionalNode(int dimension,IMultiPoint pt){  this.dimension=dimension;  this.point=pt;  this.max=pt.dimensionality();  this.region=new Hypercube(max);  cached=new double[max];  for (int i=1; i <= max; i++) {    cached[i - 1]=pt.getCoordinate(i);    region.setLeft(i,Double.NEGATIVE_INFINITY);    region.setRight(i,Double.POSITIVE_INFINITY);  }  this.coord=cached[dimension - 1];}  }
class C{  public static Mustache compile(String templateName){  return MUSTACHE_FACTORY.compilePackageRelative(Templates.class,templateName);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  roomPrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  depts=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);}  }
class C{  public static void inRange(final long value,final String name,final long minInclusive,final long maxInclusive){  if (value < minInclusive || value > maxInclusive) {    final String message=String.format("%s must be between %d and %d inclusive",name,minInclusive,maxInclusive);    throw new IllegalArgumentException(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.372 -0500",hash_original_method="A86295986A372D00C8F07CAE9A39223B",hash_generated_method="9CF16047CC30070D185BAE9E42FD4882") protected void close() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.close();}  }
class C{  public synchronized void disableAutoIOThrottle(){  doAutoIOThrottle=false;  updateMergeThreads();}  }
class C{  public void reset(){  firstPointer=null;  nextLoadPointer=null;  nextUnloadPointer=null;  firstCutpointPointer=null;  mode=MODE_NORMAL;}  }
class C{  private void createDriverTask(List<VolumeClone> clones){  String taskId=String.format("%s+%s+%s",StorageDriverSimulator.DRIVER_NAME,OP_NAME,UUID.randomUUID().toString());  _log.info("Creating task {} for operation of type {}",taskId,OP_NAME);  _task=new CreateVolumeCloneDriverTask(taskId,clones);  _task.setStatus(DriverTask.TaskStatus.PROVISIONING);}  }
class C{  public static input createClosePopupButton(Properties ctx){  String text="Close";  if (ctx != null)   text=Msg.getMsg(ctx,"Close");  input close=new input("button",text,"  " + text);  close.setID(text);  close.setClass("closebtn");  close.setTitle("Close PopUp");  close.setOnClick("self.close();return false;");  return close;}  }
class C{  private void displayMessageOnMonitor(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("File ");  stringBuilder.append(filesCount + 1);  stringBuilder.append('/');  stringBuilder.append(files.size());  stringBuilder.append(" (");  stringBuilder.append(NumberFormatter.humanReadableByteCount(totalBytesTransfered));  if (!gzipCompression) {    stringBuilder.append(" out of ");    stringBuilder.append(NumberFormatter.humanReadableByteCount(totalSize));  }  stringBuilder.append(" @ ");  stringBuilder.append(NumberFormatter.humanReadableByteCount((long)getAverageTransferRate()));  stringBuilder.append("/s) Remaining time: ");  if (gzipCompression) {    stringBuilder.append("app. ");  }  long quasiBytesLeft=totalSize - finishedFilesSize;  if (currentFileReal < currentFileSize) {    quasiBytesLeft-=currentFileReal;  } else {    quasiBytesLeft-=currentFileSize;  }  long millisLeft=getMillisLeft(quasiBytesLeft);  millisLeft+=millisLeft % 1000;  stringBuilder.append(NumberFormatter.humanReadableMillisCount(millisLeft,true));  subMonitor.subTask(stringBuilder.toString());}  }
class C{  @Override public String toString(){  Color src=UIManager.getColor(uiDefaultParentName);  String s="DerivedColor(color=" + getRed() + ","+ getGreen()+ ","+ getBlue()+ " parent="+ uiDefaultParentName+ " offsets="+ getHueOffset()+ ","+ getSaturationOffset()+ ","+ getBrightnessOffset()+ ","+ getAlphaOffset();  return src == null ? s : s + " pColor=" + src.getRed()+ ","+ src.getGreen()+ ","+ src.getBlue();}  }
class C{  private Bundle queryRcsStackByIntent(Intent intent) throws RcsGenericException {  final String action=intent.getAction();  final SyncBroadcastReceiver broadcastReceiver=new SyncBroadcastReceiver();  intent.setPackage(RCS_STACK_PACKAGENAME);  trySetIntentForActivePackageAndReceiverInForeground(intent);synchronized (sInstance) {synchronized (broadcastReceiver) {      mContext.sendOrderedBroadcast(intent,null,broadcastReceiver,mHandler,Activity.RESULT_OK,null,null);      long endTime=System.currentTimeMillis() + INTENT_RESPONSE_TIMEOUT;      while (!broadcastReceiver.mHaveResult) {        long delay=endTime - System.currentTimeMillis();        if (delay <= 0) {          Log.w(LOG_TAG,"Waiting for result for " + action + " has reached deadline!");          break;        }        try {          if (sAccurateLog) {            Log.d(LOG_TAG,"Waiting for result for " + action + " during max "+ delay+ "ms");          }          broadcastReceiver.wait(delay);        } catch (        InterruptedException e) {          Log.w(LOG_TAG,"Waiting for result for " + action + " was interrupted!");        }      }      Bundle result=broadcastReceiver.getResultExtras(false);      if (result == null) {        throw new RcsGenericException("Failed to get result for " + action + "!");      }      result.putLong(TIME_SPENT,System.currentTimeMillis() - endTime + INTENT_RESPONSE_TIMEOUT);      return result;    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Shipper_ID"))     p_M_Shipper_ID=para[i].getParameterAsInt(); else     if (name.equals("M_InOut_ID"))     p_M_InOut_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ContentNode.class) {switch (derivedFeatureID) {case DomPackage.COMPOSED_CONTENT__OWNER:      return DomPackage.CONTENT_NODE__OWNER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public void closeForWrites(){  super.closeForWrites();  try {    writeCacheService.reset();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @ObjectiveCName("changeWithValue:") public boolean change(@Nullable T value){  if (this.value != null && value != null && value.equals(this.value)) {    return false;  }  this.value=value;  notify(value);  return true;}  }
class C{  public static CdcSession createCdcSessionViaDomainAuth(String serverName,String userName,String userPassword){  if (serverName == null || serverName.length() == 0) {    throw new IllegalArgumentException("Server name is not specified");  }  if (userName == null || userName.length() == 0) {    throw new IllegalArgumentException("User name is not specified");  }  return new CdcSession(serverName,userName,userPassword);}  }
class C{  public boolean isSigned(int column) throws SQLException {  return getColumnInformation(column).isSigned();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(ADDRESS).setRequired(true);  builder.addAttribute(DISPLAY_NAME);  builder.addAttribute(LABEL);  builder.addAttribute(PRIMARY);  builder.addAttribute(REL);}  }
class C{  public PrinterException(){}  }
class C{  public boolean hasArchiveConversions(){  return hasRepeatingExtension(ArchiveConversion.class);}  }
class C{  public static Object invokeDeclared(Class c,Object obj,String method,Class[] paramClasses,Object[] params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Method m=c.getDeclaredMethod(method,paramClasses);  m.setAccessible(true);  return m.invoke(obj,params);}  }
class C{  public void releaseProxyMouseMode(){  MapMouseMode pmmm=getProxyMouseMode();  OMDrawingTool dt=getDrawingTool();  if (pmmm != null && dt != null) {    if (pmmm.isProxyFor(dt.getMouseMode())) {      if (DTL_DEBUG) {        Debug.output("DTL: releasing proxy on " + pmmm.getID());      }      pmmm.releaseProxy();      setProxyMouseMode(null);      fireRequestInfoLine("");    }    if (dt.isActivated()) {      dt.deactivate();    }  }}  }
class C{  public void testWrongReturnType() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("bogusReturnType"));  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("does not return a double"));}  }
class C{  public static String resolveHost(String address){  if (lastLookup != null && address.equals(lastLookup.usedAddress)) {    return lastLookup.resolvedHost;  }  CachedHostname lookup=new CachedHostname();  lookup.usedAddress=address;  try {    InetAddress addr=InetAddress.getByName(address);    lookup.resolvedHost=addr.getHostName();  } catch (  UnknownHostException e) {    lookup.resolvedHost=address;    e.printStackTrace();  }  lastLookup=lookup;  return lastLookup.resolvedHost;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_CASE_CLAUSE__STATEMENTS:    getStatements().clear();  return;}super.eUnset(featureID);}  }
class C{  public void onAttach(@NonNull View view){  mIsAttached=true;  if (mAttachedView != view) {    mActualDrawable.setCallback(null);    if (mAttachedView != null) {      throw new IllegalStateException("has been attached to view:" + mAttachedView);    }    mAttachedView=view;    mActualDrawable.setCallback(mAttachedView);  }  if (!mIsRequestSubmitted) {    submitRequest();  }}  }
class C{  public static BillingAdapterNotFoundException convertToApi(org.oscm.internal.types.exception.BillingAdapterNotFoundException oldEx){  return convertExceptionToApi(oldEx,BillingAdapterNotFoundException.class);}  }
class C{  private void loadElementDataIntoBuffer(Element elem,StringBuilder buffer){  AttributeSet attr=elem.getAttributes();  String name=(String)attr.getAttribute(HTML.Attribute.NAME);  if (name == null) {    return;  }  String value=null;  HTML.Tag tag=(HTML.Tag)elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (tag == HTML.Tag.INPUT) {    value=getInputElementData(attr);  } else   if (tag == HTML.Tag.TEXTAREA) {    value=getTextAreaData(attr);  } else   if (tag == HTML.Tag.SELECT) {    loadSelectData(attr,buffer);  }  if (name != null && value != null) {    appendBuffer(buffer,name,value);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  throw new IllegalArgumentException("PassiveListen() can only be used by itself");}  }
class C{  private boolean isSatisfied(Value actualValue){  if (groundValue != null) {switch (relation) {case EQUAL:      return actualValue.equals(groundValue);case UNEQUAL:    return !actualValue.equals(groundValue);case GREATER_THAN:  return (actualValue.compareTo(groundValue) > 0);case LOWER_THAN:return (actualValue.compareTo(groundValue) < 0);case CONTAINS:return actualValue.contains(groundValue);case NOT_CONTAINS:return !actualValue.contains(groundValue);case LENGTH:return actualValue.length() == groundValue.length();case IN:return groundValue.contains(actualValue);case NOT_IN:return !groundValue.contains(actualValue);}return false;} else {switch (relation) {case EQUAL:return templateValue.match(actualValue.toString()).isMatching();case UNEQUAL:return !templateValue.match(actualValue.toString()).isMatching();case CONTAINS:return templateValue.partialmatch(actualValue.toString()).isMatching();case NOT_CONTAINS:return !templateValue.partialmatch(actualValue.toString()).isMatching();case LENGTH:return templateValue.match("" + actualValue.length()).isMatching();default :return false;}}}  }
class C{  static StormTopology buildTopology(ExecutionContext context) throws IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException {  StormTopology topology=null;  TopologyDef topologyDef=context.getTopologyDef();  if (!topologyDef.validate()) {    throw new IllegalArgumentException("Invalid topology config. Spouts, bolts and streams cannot be " + "defined in the same configuration as a topologySource.");  }  buildComponents(context);  if (topologyDef.isDslTopology()) {    LOG.info("Detected DSL topology...");    TopologyBuilder builder=new TopologyBuilder();    buildSpouts(context,builder);    buildBolts(context);    buildStreamDefinitions(context,builder);    topology=builder.createTopology();  } else {    LOG.info("A topology source has been specified...");    ObjectDef def=topologyDef.getTopologySource();    topology=buildExternalTopology(def,context);  }  return topology;}  }
class C{  public static Bitmap loadBitmapFromView(View v){  if (v == null) {    return null;  }  Bitmap screenshot;  screenshot=Bitmap.createBitmap(v.getWidth(),v.getHeight(),Config.ARGB_8888);  Canvas c=new Canvas(screenshot);  c.translate(-v.getScrollX(),-v.getScrollY());  v.draw(c);  return screenshot;}  }
class C{  private void updateWwnAndHluInfo(UnManagedVolume unManagedVolume,Set<VPlexStorageViewInfo> storageViews){  if (null != storageViews) {    String wwn=unManagedVolume.getWwn();    StringSet hluMappings=new StringSet();    for (    VPlexStorageViewInfo storageView : storageViews) {      if (wwn == null || wwn.isEmpty()) {        wwn=storageView.getWWNForStorageViewVolume(unManagedVolume.getLabel());        s_logger.info("found wwn {} for unmanaged volume {}",wwn,unManagedVolume.getLabel());        if (wwn != null) {          unManagedVolume.setWwn(BlockObject.normalizeWWN(wwn));        }      }      Integer hlu=storageView.getHLUForStorageViewVolume(unManagedVolume.getLabel());      if (hlu != null) {        hluMappings.add(storageView.getName() + "=" + hlu.toString());      }    }    if (!hluMappings.isEmpty()) {      s_logger.info("setting HLU_TO_EXPORT_MASK_NAME_MAP for unmanaged volume {} to " + hluMappings,unManagedVolume.getLabel());      unManagedVolume.putVolumeInfo(SupportedVolumeInformation.HLU_TO_EXPORT_MASK_NAME_MAP.name(),hluMappings);    }  }}  }
class C{  @Override public Invocation.Builder accept(String... mediaTypes){  clientRequestContext.setAcceptResponseTypesStr(Arrays.asList(mediaTypes));  return this;}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  private void startHarvestTiming(){  harvester.getHarvestStatistics().startHarvestTiming();}  }
class C{  private void initializeClassMap(){  classMap=new Hashtable(30);  classMap.put("Form","javax.faces.component.UIForm");  classMap.put("Command_Button","javax.faces.component.UICommand");  classMap.put("Command_Link","javax.faces.component.UICommand");  classMap.put("SelectBoolean_Checkbox","javax.faces.component.UISelectBoolean");  classMap.put("RadioGroup","javax.faces.component.UISelectOne");  classMap.put("SelectOne_Radio",PARENT_SELECTONE);  classMap.put("SelectOne_Listbox","javax.faces.component.UISelectOne");  classMap.put("SelectOne_Option",PARENT_SELECTONE);  classMap.put("Output_Text","javax.faces.component.UIOutput");  classMap.put("TextEntry_Input","javax.faces.component.UIInput");  classMap.put("TextEntry_Secret","javax.faces.component.UIInput");  classMap.put("TextEntry_TextArea","javax.faces.component.UIInput");  classMap.put("Errors","javax.faces.component.UIOutput");}  }
class C{  public static synchronized FSEntityResolver instance(){  if (instance == null) {    instance=new FSEntityResolver();  }  return instance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:29.133 -0500",hash_original_method="0598EE9DB236F7268C8A7877021962D5",hash_generated_method="510880B85D007E14A841E542571C558E") public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  public Channel(TransportAddress peerAddress){  this.peerAddress=peerAddress;}  }
class C{  public void tell(Sentence aSentence){  if (!(sentences.contains(aSentence))) {    sentences.add(aSentence);    asCNF=asCNF.extend(ConvertToConjunctionOfClauses.convert(aSentence).getClauses());    symbols.addAll(SymbolCollector.getSymbolsFrom(aSentence));  }}  }
class C{  public final void testGetPrimeExponentP(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeExponentP()));}  }
class C{  public ModifyAtkSpell(RPObject object){  super(object);}  }
class C{  public SparseArray(int initialCapacity){  if (initialCapacity == 0) {    mKeys=ContainerHelpers.EMPTY_INTS;    mValues=ContainerHelpers.EMPTY_OBJECTS;  } else {    initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);    mKeys=new int[initialCapacity];    mValues=new Object[initialCapacity];  }  mSize=0;}  }
class C{  public void configureManagers(){  InstanceManager.setSensorManager(getSensorManager());  InstanceManager.setTurnoutManager(getTurnoutManager());  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (derivedFeatureID) {case TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static int min(int[][] matrix,int column){  int min=matrix[0][column];  for (int i=1; i < matrix.length; i++) {    if (matrix[i][column] < min) {      min=matrix[i][column];    }  }  return min;}  }
class C{  private static String[] splitByWholeSeparatorWorker(String str,String separator,int max,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  if ((separator == null) || (EMPTY.equals(separator))) {    return splitWorker(str,null,max,preserveAllTokens);  }  int separatorLength=separator.length();  ArrayList substrings=new ArrayList();  int numberOfSubstrings=0;  int beg=0;  int end=0;  while (end < len) {    end=str.indexOf(separator,beg);    if (end > -1) {      if (end > beg) {        numberOfSubstrings+=1;        if (numberOfSubstrings == max) {          end=len;          substrings.add(str.substring(beg));        } else {          substrings.add(str.substring(beg,end));          beg=end + separatorLength;        }      } else {        if (preserveAllTokens) {          numberOfSubstrings+=1;          if (numberOfSubstrings == max) {            end=len;            substrings.add(str.substring(beg));          } else {            substrings.add(EMPTY);          }        }        beg=end + separatorLength;      }    } else {      substrings.add(str.substring(beg));      end=len;    }  }  return (String[])substrings.toArray(new String[substrings.size()]);}  }
class C{  public static final int hashCode(char[] array){  int length=array.length;  int hash=length == 0 ? 31 : array[0];  if (length < 8) {    for (int i=length; --i > 0; )     hash=(hash * 31) + array[i];  } else {    for (int i=length - 1, last=i > 16 ? i - 16 : 0; i > last; i-=2)     hash=(hash * 31) + array[i];  }  return hash & 0x7FFFFFFF;}  }
class C{  public boolean isOvershootClampingEnabled(){  return mOvershootClampingEnabled;}  }
class C{  public void constValueIndex(byte value) throws IOException {  constValueIndex('B',pool.addIntegerInfo(value));}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static JBBPParser prepare(final String script,final JBBPBitOrder bitOrder,final JBBPCustomFieldTypeProcessor customFieldTypeProcessor,final int flags){  return new JBBPParser(script,bitOrder,customFieldTypeProcessor,flags);}  }
class C{  public void testNoOrderingStartWithCab() throws Exception {  DocumentInfo docC=createDocument("C",null,null);  DocumentInfo doca=createDocument("a",null,null);  DocumentInfo docb=createDocument(null,null,null);  List<DocumentOrderingWrapper> documents=new ArrayList<DocumentOrderingWrapper>();  Collections.addAll(documents,new DocumentOrderingWrapper(docC),new DocumentOrderingWrapper(doca),new DocumentOrderingWrapper(docb));  DocumentOrderingWrapper[] wrappers=documents.toArray(new DocumentOrderingWrapper[documents.size()]);  String[] originalOrder=extractNames(wrappers);  DocumentOrderingWrapper.sort(wrappers);  String[] orderedNames=extractNames(wrappers);  List<String> original=Arrays.asList(originalOrder);  List<String> actually=Arrays.asList(orderedNames);  List<String> possibility1=Arrays.asList("C","a","");  boolean assertion=(actually.equals(possibility1));  String message="\n original: " + original + "\n expected: "+ possibility1+ "\n actually: "+ actually+ "\n";  assertTrue(message,assertion);  System.out.println("testNoOrderingStartWithCab: Passed" + message);}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  double d=VectorUtil.cosAngle(v1,v2);  return (d <= 1) ? 1 - d : 0;}  }
class C{  protected void parseDefineButton2(InStream in) throws IOException {  int id=in.readUI16();  boolean trackAsMenu=(in.readUI8() != 0);  int actionOffset=in.readUI16();  List buttonRecords=ButtonRecord2.read(in);  SWFActions actions=tagtypes.tagDefineButton2(id,trackAsMenu,buttonRecords);  if (actions == null) {    return;  }  while (actionOffset != 0) {    actionOffset=in.readUI16();    int actionConditions=in.readUI16();    actions.start(actionConditions);    ActionParser parser=new ActionParser(actions);    parser.parse(in);  }  actions.done();}  }
class C{  public void dispose(){  m_toolbarPanel.dispose();}  }
class C{  @SuppressWarnings("unchecked") public static <T>List<T> toList(Object object){  if (object != null && !(object instanceof List))   return null;  return (List<T>)object;}  }
class C{  public static void createActions(ListComponent owner,EnumSet<ListActionType> actions){  if (actions.contains(ListActionType.CREATE))   owner.addAction(new CreateAction(owner));  if (actions.contains(ListActionType.EDIT))   owner.addAction(new EditAction(owner));  if (actions.contains(ListActionType.REMOVE))   owner.addAction(new RemoveAction(owner));  if (actions.contains(ListActionType.REFRESH))   owner.addAction(new RefreshAction(owner));}  }
class C{  private static void ensureReadWrite(IFile file) throws CoreException {  if (file.isReadOnly()) {    IStatus checkOutStatus=ResourcesPlugin.getWorkspace().validateEdit(new IFile[]{file},null);    if (!checkOutStatus.isOK()) {      throw new CoreException(checkOutStatus);    }  }}  }
class C{  public Engine.Delete preDelete(Engine.Delete delete){  return delete;}  }
class C{  private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file);  persistUpdatedBundle(persist,file,updateSet,setName);}  }
class C{  public void doClose(){synchronized (isClosingLock) {    if (isClosing)     return; else     isClosing=true;  }  pressStop();  simulation.quit();  dispose();  allControllers.remove(this);  if (allControllers.size() == 0)   doQuit();}  }
class C{  public void requesting(int tenantclass){  starting(tenantclass);}  }
class C{  protected void enableTzAwareMode(){  TimeZone replicatorTz=runtime.getReplicatorTimeZone();  logger.info("Resetting time zones used for date-time to enable time zone-aware operation: new tz=" + replicatorTz.getDisplayName());  dateTimeFormatter.setTimeZone(replicatorTz);  dateFormatter.setTimeZone(replicatorTz);  timeFormatter.setTimeZone(replicatorTz);  nonTzAwareMode=false;}  }
class C{  public MonthDateFormat(){  this(TimeZone.getDefault());}  }
class C{  void debugCode(String java){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,lineSeparator + "/**/" + java,null);  }}  }
class C{  public RectListManager(RectListManager rlm){  this(rlm.rects);}  }
class C{  protected void generateOMGraphic(OMGraphic g){  if (g != null && g.getNeedToRegenerate()) {    Projection proj=getProjection();    if (proj != null) {      g.generate(proj);    } else     if (DEBUG) {      Debug.output("OMDrawingTool: graphic needs generation: " + g.getNeedToRegenerate());    }  }}  }
class C{  public void readFully(byte[] b,int off,int len) throws IOException {  while (len > 0) {    if (!readBuffer.hasRemaining())     fillReadBuffer();    int readLength=Math.min(readBuffer.remaining(),len);    if (readLength == 0)     throw new EOFException();    readBuffer.get(b,off,readLength);    if (len == readLength)     break;    len-=readLength;    off+=readLength;  }}  }
class C{  @AssistedInject public TunnelCollectionResource(@Assisted GuacamoleSession session){  this.session=session;}  }
class C{  public static double[] fromLatLon(double[] inputCoordinates,double a,double b,double n0,double e0,double f0,double lat0,double lon0){  double lat=Math.toRadians(inputCoordinates[0]);  double lon=Math.toRadians(inputCoordinates[1]);  double lat0Rad=Math.toRadians(lat0);  double lon0Rad=Math.toRadians(lon0);  double e2=(Math.pow(a,2) - Math.pow(b,2)) / Math.pow(a,2);  double n=(a - b) / (a + b);  double n2=Math.pow(n,2);  double n3=Math.pow(n,3);  double eSinPhi=1 - e2 * Math.pow(Math.sin(lat),2);  double nu=a * f0 * Math.pow(eSinPhi,-0.5);  double rho=a * f0 * (1 - e2)* Math.pow(eSinPhi,-1.5);  double eta2=(nu / rho) - 1;  double m=b * f0 * ((1 + n + (5.0 / 4.0) * n2 + (5.0 / 4.0) * n3) * (lat - lat0Rad) - (3.0 * n + 3.0 * n2 + (21.0 / 8.0) * n3) * Math.sin(lat - lat0Rad) * Math.cos(lat + lat0Rad) + ((15.0 / 8.0) * n2 + (15.0 / 8.0) * n3) * Math.sin(2.0 * (lat - lat0Rad)) * Math.cos(2.0 * (lat + lat0Rad)) - (35.0 / 24.0) * n3 * Math.sin(3.0 * (lat - lat0Rad))* Math.cos(3.0 * (lat + lat0Rad)));  double i=m + n0;  double ii=(nu / 2) * Math.sin(lat) * Math.cos(lat);  double iii=(nu / 24) * Math.sin(lat) * Math.pow(Math.cos(lat),3)* (5 - Math.pow(Math.tan(lat),2) + 9 * eta2);  double iiiA=(nu / 720) * Math.sin(lat) * Math.pow(Math.cos(lat),5)* (61 - 58 * Math.pow(Math.tan(lat),2) + Math.pow(Math.tan(lat),4));  double iv=nu * Math.cos(lat);  double v=(nu / 6) * Math.pow(Math.cos(lat),3) * ((nu / rho) - Math.pow(Math.tan(lat),2));  double vi=(nu / 120) * Math.pow(Math.cos(lat),5) * (5 - 18 * Math.pow(Math.tan(lat),2) + Math.pow(Math.tan(lat),4) + 14 * eta2 - 58 * (Math.pow(Math.tan(lat),2)) * eta2);  double retN=i + ii * Math.pow(lon - lon0Rad,2) + iii * Math.pow(lon - lon0Rad,4) + iiiA * Math.pow(lon - lon0Rad,6);  double retE=e0 + iv * (lon - lon0Rad) + v * Math.pow(lon - lon0Rad,3) + vi * Math.pow(lon - lon0Rad,5);  return new double[]{retE,retN};}  }
class C{  static int accumSingle(int counts[],int docBase,FieldFacetStats[] facetStats,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int missingDocCount=0;  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    int term=si.getOrd(doc);    if (term >= 0) {      if (map != null) {        term=(int)ordMap.get(term);      }      counts[term]++;      for (      FieldFacetStats f : facetStats) {        f.facetTermNum(docBase + doc,term);      }    } else {      for (      FieldFacetStats f : facetStats) {        f.facetMissingNum(docBase + doc);      }      missingDocCount++;    }  }  return missingDocCount;}  }
class C{  protected Image platformImageBytesToImage(byte[] bytes,long format) throws IOException {  String mimeType=null;  if (format == PNG_ATOM.getAtom()) {    mimeType="image/png";  } else   if (format == JFIF_ATOM.getAtom()) {    mimeType="image/jpeg";  } else {    try {      String nat=getNativeForFormat(format);      DataFlavor df=new DataFlavor(nat);      String primaryType=df.getPrimaryType();      if ("image".equals(primaryType)) {        mimeType=df.getPrimaryType() + "/" + df.getSubType();      }    } catch (    Exception e) {    }  }  if (mimeType != null) {    return standardImageBytesToImage(bytes,mimeType);  } else {    String nativeFormat=getNativeForFormat(format);    throw new IOException("Translation from " + nativeFormat + " is not supported.");  }}  }
class C{  @Override public void onOutputAppend(String noteId,String paragraphId,String output){  Message msg=new Message(OP.PARAGRAPH_APPEND_OUTPUT).put("noteId",noteId).put("paragraphId",paragraphId).put("data",output);  broadcast(noteId,msg);}  }
class C{  public void deserialize(JSONObject data) throws JSONException {  this.mVisible=data.optBoolean(KEY_VISIBLE);  this.mIcon=data.optInt(KEY_ICON);  String iconUriString=data.optString(KEY_ICON_URI);  this.mIconUri=TextUtils.isEmpty(iconUriString) ? null : Uri.parse(iconUriString);  this.mStatus=data.optString(KEY_STATUS);  this.mExpandedTitle=data.optString(KEY_EXPANDED_TITLE);  this.mExpandedBody=data.optString(KEY_EXPANDED_BODY);  try {    this.mClickIntent=Intent.parseUri(data.optString(KEY_CLICK_INTENT),0);  } catch (  URISyntaxException ignored) {  }  this.mContentDescription=data.optString(KEY_CONTENT_DESCRIPTION);}  }
class C{  public static void convertProxyError(Throwable ex,String msg) throws SQLException {  if (ex instanceof Error) {    Error err=(Error)ex;    LOGGER.logWarning(msg,err);    throw err;  } else   if (ex instanceof RuntimeException) {    RuntimeException rte=(RuntimeException)ex;    LOGGER.logWarning(msg,ex);    throw rte;  } else   if (ex instanceof SQLException) {    SQLException driverError=(SQLException)ex;    LOGGER.logWarning(msg,ex);    throw driverError;  } else   if (ex instanceof InvocationTargetException) {    InvocationTargetException ite=(InvocationTargetException)ex;    Throwable cause=ite.getCause();    if (cause != null) {      if (LOGGER.isTraceEnabled())       LOGGER.logTrace(msg,ite);      convertProxyError(cause,msg);    } else {      AtomikosSQLException.throwAtomikosSQLException(msg,ite);    }  }  AtomikosSQLException.throwAtomikosSQLException(msg,ex);}  }
class C{  public void removeCrossReference(ProteinXref ProteinXref){  crossReferences.remove(ProteinXref);}  }
class C{  public static long generateNonce(){  long nonce=RANDOM.nextLong();  sKnownNonces.add(nonce);  return nonce;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isMediaPlayerLoaded());}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public static Date createDate(final int year){  final Calendar date=Calendar.getInstance();  date.set(Calendar.YEAR,year);  date.set(Calendar.MONTH,0);  date.set(Calendar.DATE,1);  return date.getTime();}  }
class C{  protected void selectItem(){  if (itemsTable.getSelectionCount() == 0) {    return;  }  final List<DLItem> selectedItems=new ArrayList<DLItem>();  for (  final TableItem tableItem : itemsTable.getSelection()) {    final DLItem item=(DLItem)tableItem.getData();    item.setLastAction(LAST_ACTION.SELECTION);    selectedItems.add(item);    selection.add(item);    items.remove(item);    fireSelectionEvent(item);  }  fireSelectionChangeEvent(selectedItems);  redrawTables();}  }
class C{  public boolean containsPoly(SootMethod method){  return getMethod(method) != null;}  }
class C{  public boolean addAllUnique(List<Album> ps){  boolean didChange=false;synchronized (mAlbums) {    for (    Album p : ps) {      if (!mAlbums.contains(p) && p.isLoaded()) {        mAlbums.add(p);        didChange=true;      }    }    if (didChange) {      sortListLocked();    }  }  return didChange;}  }
class C{  protected final void recordModification(Object x){synchronized (barrierLock) {    lastWrite=x;  }}  }
class C{  public synchronized Log removeLog(int x){  Log l=getLog(x);  logs.removeElementAt(x);  return l;}  }
class C{  public static void updateVcenterDataCenterTenant(DbClient dbClient,VcenterDataCenter dataCenter,URI tenantId){  if (dataCenter == null || dataCenter.getInactive()) {    return;  }  if (!NullColumnValueGetter.isNullURI(dataCenter.getTenant()) && isDataCenterInUse(dbClient,dataCenter.getId())) {    Set<String> tenants=new HashSet<String>();    tenants.add(dataCenter.getTenant().toString());    throw APIException.badRequests.cannotRemoveTenant("vCenterDataCenter",dataCenter.getLabel(),tenants);  }  URI localTenantId=tenantId;  if (localTenantId == null || localTenantId.equals(NullColumnValueGetter.getNullURI())) {    localTenantId=NullColumnValueGetter.getNullURI();  }  upateHostTenant(dbClient,dataCenter.getId(),localTenantId);  updateClusterTenant(dbClient,dataCenter.getId(),localTenantId);  dataCenter.setTenant(localTenantId);}  }
class C{  public synchronized void addEntry(AccessStructure struct){  entryRoot.appendChild(struct.toXMLEntryElement(doc));  writeXMLFile();}  }
class C{  public String toString(){  return image;}  }
class C{  @Override public Id<Link> chooseNextLinkId(){  if (this.cachedNextLinkId != null) {    return this.cachedNextLinkId;  }  if (this.cachedRouteLinkIds == null) {    if (this.currentLeg.getRoute() instanceof NetworkRoute) {      this.cachedRouteLinkIds=((NetworkRoute)this.currentLeg.getRoute()).getLinkIds();    } else {      return null;    }  }  if (this.currentLinkIdIndex >= this.cachedRouteLinkIds.size()) {    Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);    Link destinationLink=this.simulation.getScenario().getNetwork().getLinks().get(this.cachedDestinationLinkId);    if (currentLink == destinationLink && this.currentLinkIdIndex > this.cachedRouteLinkIds.size()) {      return null;    }    if (currentLink.getToNode().equals(destinationLink.getFromNode())) {      this.cachedNextLinkId=destinationLink.getId();      return this.cachedNextLinkId;    }    if (!(this.currentLinkId.equals(this.cachedDestinationLinkId))) {      log.error("The vehicle with driver " + this.getPerson().getId() + ", currently on link "+ this.currentLinkId.toString()+ ", is at the end of its route, but has not yet reached its destination link "+ this.cachedDestinationLinkId.toString());    }    return null;  }  Id<Link> nextLinkId=this.cachedRouteLinkIds.get(this.currentLinkIdIndex);  Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);  Link nextLink=this.simulation.getScenario().getNetwork().getLinks().get(nextLinkId);  if (currentLink.getToNode().equals(nextLink.getFromNode())) {    this.cachedNextLinkId=nextLinkId;    return this.cachedNextLinkId;  }  log.warn(this + " [no link to next routenode found: routeindex= " + this.currentLinkIdIndex+ " ]");  return null;}  }
class C{  public static void main(String[] args){  runFilter(new InterquartileRange(),args);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,float value){  buffer.append(value);}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  protected void disown(AbstractNode child) throws IllegalStateException {  ensureParentage(child);  child.parent=null;}  }
class C{  public ActiveMQRABytesMessage(final BytesMessage message,final ActiveMQRASession session){  super(message,session);  if (ActiveMQRABytesMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }}  }
class C{  public T caseBlock(Block object){  return null;}  }
class C{  private ClassTypeSignature[] parseSuperInterfaces(){  List<ClassTypeSignature> cts=new ArrayList<>(5);  while (current() == 'L') {    cts.add(parseClassTypeSignature());  }  return cts.toArray(new ClassTypeSignature[cts.size()]);}  }
class C{  public PDFFontEncoding(String fontType,PDFObject encoding) throws IOException {  if (encoding.getType() == PDFObject.NAME) {    if (fontType.equals("Type0")) {      type=TYPE_CMAP;      cmap=PDFCMap.getCMap(encoding.getStringValue());    } else {      type=TYPE_ENCODING;      differences=new HashMap<Character,String>();      baseEncoding=this.getBaseEncoding(encoding.getStringValue());    }  } else {    String typeStr=encoding.getDictRef("Type").getStringValue();    if (typeStr.equals("Encoding")) {      type=TYPE_ENCODING;      parseEncoding(encoding);    } else     if (typeStr.equals("CMap")) {      type=TYPE_CMAP;      cmap=PDFCMap.getCMap(encoding);    } else {      throw new IllegalArgumentException("Uknown encoding type: " + type);    }  }}  }
class C{  public void addField(String fieldName,Class type){  this.addField(new FieldDefinition(fieldName,type));}  }
class C{  public CertificateVersion(InputStream in) throws IOException {  version=V1;  DerValue derVal=new DerValue(in);  construct(derVal);}  }
class C{  public void addDirset(DirSet fs){  dirsets.add(fs);}  }
class C{  @Override public void keyPressed(KeyEvent e){}  }
class C{  public void floodWithSlaves(){  Address target;  String localhost=null;  try {    localhost=java.net.InetAddress.getLocalHost().getHostAddress();  } catch (  Exception e) {    output.error("Could not get localhost address");  }  Iterator peers=getDRM().getContributions().iterator();  Parameter p=new Parameter(Launch.P_STATE);  SlaveAgent slave;  while (peers.hasNext()) {    slave=(SlaveAgent)slaveParameters.getInstanceForParameterEq(p,null,SlaveAgent.class);    slave.parameters=slaveParameters;    slave.data=data;    slave.setName(p);    slave.setRoot(new Address(getName()));    target=((ContributionBox)peers.next()).contributor;    if (target.port == Integer.parseInt(base.getProperty("port")) && target.getHost().getHostAddress().equals(localhost)) {      target=null;      continue;    }    IRequest request=base.launch("DIRECT",slave,target);    while (request.getStatus() == IRequest.WAITING)     Thread.yield();    if (request.getStatus() != IRequest.DONE)     output.warning("There was an error sending the agent: " + request.getThrowable()); else {      output.message("Slave " + slave.getName() + " sent to "+ target.name);      slaves.add(new Address(target.getHost(),target.port,slave.getName()));    }  }}  }
class C{  private void fillData(MigrationGroup group){  this.name.setText(group.getName());}  }
class C{  @SuppressWarnings("unchecked") private void createTemporaryIndexes(){  createTemporaryIndexes(false);}  }
class C{  public EntryStore newEntryStore(){  return new InMemoryEntryStore();}  }
class C{  private void handleRightClick(final NaviNode node,final MouseEvent event,final double x,final double y,final List<ICodeNodeExtension> extensions){  final Object positionObject=ZyNodeContentHelpers.getObject(node,x,y);  if (event.isAltDown() && event.isShiftDown()) {    m_grayer.handleGrayLine(m_model,node,y);  } else   if (event.isAltDown() && event.isControlDown()) {    m_highlighter.handleHighlightLine(node,y);  } else   if (event.isAltDown()) {    if (positionObject instanceof CLocalNodeCommentWrapper) {      CNodeFunctions.editNodeComments(m_model,((CLocalNodeCommentWrapper)positionObject).getNode(),InitialTab.LocalNodeComments);    } else     if (positionObject instanceof CGlobalNodeCommentWrapper) {      CNodeFunctions.editNodeComments(m_model,((CGlobalNodeCommentWrapper)positionObject).getNode(),InitialTab.GlobalNodeComments);    } else     if (node.getRawNode() instanceof INaviCodeNode) {      handleShowInstructionComment(node,y);    }  } else   if (event.isShiftDown()) {    handleBreakpointClick(node,y);  } else   if (event.isControlDown() && positionObject instanceof COperandTreeNode) {    handleDoRegisterTrackingDown(node,y,x,(COperandTreeNode)positionObject);  } else   if (event.isControlDown() && event.isShiftDown() && positionObject instanceof COperandTreeNode) {    handleDoRegisterTrackingUp(node,y,x,(COperandTreeNode)positionObject);  } else {    showPopupMenu(node,event,positionObject,y,extensions);  }}  }
class C{  public ImageTitle(Image image,int height,int width,RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment,RectangleInsets padding){  super(position,horizontalAlignment,verticalAlignment,padding);  if (image == null) {    throw new NullPointerException("Null 'image' argument.");  }  this.image=image;  setHeight(height);  setWidth(width);}  }
class C{  private HashtableEntry<K,V>[] doubleCapacity(){  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashtableEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashtableEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashtableEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  public void onGreenButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(GREEN_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_green));      storeRequestId(requestId,GREEN_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.greenbutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public static Coords nextHex(Coords current,Coords destination){  if (current == destination)   return current;  int[] directions;  if (current.getX() == destination.getX()) {    if (current.getY() > destination.getY()) {      directions=new int[1];      directions[0]=0;    } else {      directions=new int[1];      directions[0]=3;    }  } else   if (current.getX() > destination.getX()) {    if (current.getY() > destination.getY()) {      directions=new int[3];      directions[0]=4;      directions[1]=5;      directions[2]=0;    } else {      directions=new int[3];      directions[0]=3;      directions[1]=4;      directions[2]=5;    }  } else {    if (current.getY() > destination.getY()) {      directions=new int[3];      directions[0]=0;      directions[1]=1;      directions[2]=2;    } else {      directions=new int[3];      directions[0]=1;      directions[1]=2;      directions[2]=3;    }  }  return nextHex(current,new IdealHex(current),new IdealHex(destination),directions);}  }
class C{  public MersenneTwisterUniformRng(final int[] seed){  mt=new int[N];  setSeed(seed);}  }
class C{  private void addDirectoryClasses(final Path location,final Path subPath){  for (  final File file : location.toFile().listFiles()) {    if (file.isDirectory())     addDirectoryClasses(location.resolve(file.getName()),subPath.resolve(file.getName())); else     if (file.isFile() && file.getName().endsWith(".class")) {      final String classFileName=subPath.resolve(file.getName()).toString();      classes.add(convertToQualifiedName(classFileName));    }  }}  }
class C{  public boolean isString(){  return false;}  }
class C{  @Override public String toString(){  String str="";  for (  Assignment a : matrix.keySet()) {    str+="P(" + a + ")="+ matrix.get(a)[0];    if (matrix.get(a)[1] != 0) {      str+=" and U(" + a + ")="+ matrix.get(a)[1];    }    str+="\n";  }  return str;}  }
class C{  public final int resolvePort(int port){  return ((port <= 0) || (port > 0xffff)) ? defaultPort : port;}  }
class C{  protected Transferable createTransferableProxy(Transferable t,boolean local){  return new TransferableProxy(t,local);}  }
class C{  public CheckboxTreeViewer buildCheckable(){  if (!checkable) {    throw new IllegalStateException("The tree viewer is not a CheckboxTreeViewer!");  }  return (CheckboxTreeViewer)viewer;}  }
class C{  public List<URI> findVolumesInStorageGroup(StorageSystem storage,String storageGroupName,List<URI> volumeURIList) throws Exception {  List<URI> returnVolumes=new ArrayList<URI>();  CloseableIterator<CIMObjectPath> volumePathItr=null;  try {    List<BlockObject> bos=new ArrayList<>();    for (    URI boURI : volumeURIList) {      bos.add(Volume.fetchExportMaskBlockObject(_dbClient,boURI));    }    volumePathItr=getAssociatorNames(storage,_cimPath.getStorageGroupObjectPath(storageGroupName,storage),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    while (volumePathItr.hasNext()) {      CIMObjectPath volumePath=volumePathItr.next();      for (      BlockObject bo : bos) {        if (bo.getNativeGuid().equalsIgnoreCase(getVolumeNativeGuid(volumePath))) {          _log.info("Found object " + bo.getLabel() + " is in storage group "+ storageGroupName);          returnVolumes.add(bo.getId());        }      }    }    return returnVolumes;  } catch (  Exception e) {    throw e;  } finally {    closeCIMIterator(volumePathItr);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ElKey wildcard(Namespaces ns){  if (ns.uri == Namespaces.HTML_NAMESPACE_URI) {    return HTML_WILDCARD;  }  return new ElKey(ns,"*");}  }
class C{  public static ClusterNode oldest(Collection<ClusterNode> c,@Nullable IgnitePredicate<ClusterNode> p){  ClusterNode oldest=null;  long minOrder=Long.MAX_VALUE;  for (  ClusterNode n : c) {    if ((p == null || p.apply(n)) && n.order() < minOrder) {      oldest=n;      minOrder=n.order();    }  }  return oldest;}  }
class C{  public boolean hasSideTextures(){  if (this.sideTextures == null)   return false;  for (  List<WWTexture> textures : this.sideTextures) {    if (textures != null && textures.size() > 0)     return true;  }  return false;}  }
class C{  private List<File> findProjectsForSingleFiles(List<File> absSingleSourcesToCompile) throws N4JSCompileException {  Collection<URI> puris=Sets.newLinkedHashSet();  for (  File f : absSingleSourcesToCompile) {    URI pUri=fbWorkspace.findProjectWith(URI.createFileURI(f.toString()));    if (pUri == null) {      throw new N4JSCompileException("No project for file '" + f.toString() + "' found.");    }    puris.add(pUri);  }  return puris.stream().map(null).collect(Collectors.toList());}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[Archive: OFFSET=0x");  sb.append(Long.toHexString(offset)).append(", SIZE=0x").append(Long.toHexString(size)).append(", type=").append(type).append(", rowCount=").append(rowCount).append(", pdpCount=").append(pdpCount).append(", xff=").append(xff).append(", currentRow=").append(currentRow).append("]");  for (  CDPStatusBlock cdp : cdpStatusBlocks) {    sb.append("\n\t\t");    sb.append(cdp.toString());  }  return sb.toString();}  }
class C{  public void encode(final OutputStream out,double smallGeometryThreshold,double genFactor) throws IOException {  ReferencedEnvelope renderingArea=this.mapContent.getRenderingArea();  try {    MVTWriter mvtWriter=MVTWriter.getInstance(renderingArea,this.mapContent.getCoordinateReferenceSystem(),targetBinaryCRSTileSize,targetBinaryCRSTileSize,this.mapContent.getBuffer(),genFactor,smallGeometryThreshold);    Map<FeatureCollection,Style> featureCollectionStyleMap=new HashMap<>();    FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2();    for (    Layer layer : this.mapContent.layers()) {      SimpleFeatureSource featureSource=(SimpleFeatureSource)layer.getFeatureSource();      SimpleFeatureType schema=featureSource.getSchema();      String defaultGeometry=schema.getGeometryDescriptor().getName().getLocalPart();      renderingArea=mvtWriter.getSourceBBOXWithBuffer() != null ? mvtWriter.getSourceBBOXWithBuffer() : renderingArea;      BBOX bboxFilter=ff.bbox(ff.property(defaultGeometry),renderingArea);      Query bboxQuery=new Query(schema.getTypeName(),bboxFilter);      Query definitionQuery=layer.getQuery();      Query finalQuery=new Query(DataUtilities.mixQueries(definitionQuery,bboxQuery,"mvtEncoder"));      if (layer.getStyle() != null) {        Filter styleFilter=getFeatureFilterFromStyle(layer.getStyle(),ff,this.mapContent.getScaleDenominator());        if (styleFilter != null) {          Query filterQuery=new Query(schema.getTypeName(),styleFilter);          finalQuery=new Query(DataUtilities.mixQueries(finalQuery,filterQuery,"mvtEncoder"));        }      }      finalQuery.setCoordinateSystemReproject(MVTWriter.TARGET_CRS);      finalQuery.setHints(definitionQuery.getHints());      finalQuery.setSortBy(definitionQuery.getSortBy());      finalQuery.setStartIndex(definitionQuery.getStartIndex());      featureCollectionStyleMap.put(featureSource.getFeatures(finalQuery),layer.getStyle());    }    mvtWriter.writeFeatures(featureCollectionStyleMap,this.mapContent.getScaleDenominator(),out);  } catch (  TransformException|FactoryException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:23.518 -0500",hash_original_method="A0D0E9E456108DB04A370C1A3BAF302D",hash_generated_method="39458AA765F91D22BA56260E20A8A0E7") public int availablePermits(){  return sync.getPermits();}  }
class C{  public ArrayTypeSpecifierItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void send(OutputStream os) throws IOException, QueryException {  Buffer buffer=new Buffer(authData);  final PacketOutputStream writer=(PacketOutputStream)os;  final String serverPrincipalName=buffer.readString(Charset.forName("UTF-8"));  String mechanisms=buffer.readString(Charset.forName("UTF-8"));  if (mechanisms.equals(""))   mechanisms="Kerberos";  GssapiAuth gssapiAuth=getAuthenticationMethod();  gssapiAuth.authenticate(writer,serverPrincipalName,mechanisms);}  }
class C{  public final double KBMeanInformation() throws Exception {  return m_delegate.KBMeanInformation();}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public boolean equivalent(IGameState gameState){  if (gameState == null) {    return false;  }  TicTacToeState state=(TicTacToeState)gameState;  return board.sameBoard(state.board);}  }
class C{  public static Map<String,Object> alwaysBadCardNumberProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Bad Card Number Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultBadCardNumber",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","N");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestBadCardNumber",locale));  return result;}  }
class C{  public static List<FileDescriptor> filterByType(List<FileDescriptor> descriptors,Type[] inclusive,Type[] exclusive){  List<FileDescriptor> result=new ArrayList<FileDescriptor>();  if (descriptors == null) {    return result;  }  HashSet<Type> included=new HashSet<Type>();  if (inclusive != null) {    included.addAll(Arrays.asList(inclusive));  }  HashSet<Type> excluded=new HashSet<Type>();  if (exclusive != null) {    excluded.addAll(Arrays.asList(exclusive));  }  for (  FileDescriptor desc : descriptors) {    if (excluded.contains(desc._type)) {      continue;    }    if (included.isEmpty() || included.contains(desc._type)) {      result.add(desc);    }  }  return result;}  }
class C{  public SearchRequest source(SearchSourceBuilder sourceBuilder){  this.source=sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);  return this;}  }
class C{  public WindowWrapper(Context context){  super(context);  String[] names={"setInterval","setTimeout","clearInterval","clearTimeout","parseXML","getURL","postURL","alert","confirm","prompt"};  this.defineFunctionProperties(names,WindowWrapper.class,ScriptableObject.DONTENUM);}  }
class C{  private void removeEntries(){  for (int i=0; i < capacity; i++) {    if (table[i] != null) {      table[i].clear();    }  }}  }
class C{  public void start() throws Exception {  ApplicationServiceMXBean bean=getControlService().getControl(ApplicationServiceMXBean.TYPE,ApplicationService.ALIAS,ApplicationServiceMXBean.class);  for (  String systemAppName : systemApps) {    bean.submit(systemAppName,null);  }}  }
class C{  int guessBuiltinSize(int builtinType){switch (builtinType) {case 1:    return 1;case 2:  return 1;case 3:return 1;case 4:return 2;case 5:return 2;case 6:return 4;case 7:return 4;case 8:return 8;case 9:return 8;case 10:return 4;case 11:return 8;case 13:return 8;case 14:return 16;case 19:return 4;default :return -1;}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object cmd=stack.pop();  int port=getInt(stack);  String host=getString(stack);  java.net.Socket sock=null;  java.io.OutputStream sockOut=null;  java.io.PrintWriter pw=null;  try {    sock=new java.net.Socket(host,port);    if (cmd != null) {      sockOut=sock.getOutputStream();      if (cmd instanceof byte[]) {        sockOut.write((byte[])cmd);      } else {        pw=new java.io.PrintWriter(sockOut);        pw.print(cmd.toString());      }      sockOut.flush();    }  } catch (  Exception e) {    return Boolean.FALSE;  } finally {    try {      if (pw != null)       pw.close();      if (sockOut != null)       sockOut.close();      if (sock != null)       sock.close();    } catch (    Exception e1) {    }  }  return Boolean.TRUE;}  }
class C{  @Override public String toString(){  return new String(c,0,length);}  }
class C{  public static CompiledValue obtainTheBottomMostCompiledValue(CompiledValue expr){  boolean toContinue=true;  int exprType=expr.getType();  while (toContinue) {switch (exprType) {case OQLLexerTokenTypes.RegionPath:      toContinue=false;    break;case OQLLexerTokenTypes.METHOD_INV:  CompiledOperation operation=(CompiledOperation)expr;expr=operation.getReceiver(null);if (expr == null) {expr=operation;toContinue=false;}break;case CompiledValue.PATH:expr=((CompiledPath)expr).getReceiver();break;case OQLLexerTokenTypes.TOK_LBRACK:expr=((CompiledIndexOperation)expr).getReceiver();break;default :toContinue=false;break;}if (toContinue) exprType=expr.getType();}return expr;}  }
class C{  public static CommonTransitions createFade(int duration){  CommonTransitions t=new CommonTransitions(TYPE_FADE);  t.speed=duration;  return t;}  }
class C{  public void initialize(){  super.initialize();  setScalingEnabled(false);}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (uriRequest == null) {    throw new IllegalArgumentException("HttpUriRequest must not be null");  }  if (responseHandler == null) {    throw new IllegalArgumentException("ResponseHandler must not be null");  }  if (responseHandler.getUseSynchronousMode()) {    throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");  }  if (contentType != null) {    uriRequest.setHeader(HEADER_CONTENT_TYPE,contentType);  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  AsyncHttpRequest request=newAsyncHttpRequest(client,httpContext,uriRequest,contentType,responseHandler,context);  threadPool.submit(request);  RequestHandle requestHandle=new RequestHandle(request);  if (context != null) {    List<RequestHandle> requestList=requestMap.get(context);synchronized (requestMap) {      if (requestList == null) {        requestList=Collections.synchronizedList(new LinkedList<RequestHandle>());        requestMap.put(context,requestList);      }    }    if (responseHandler instanceof RangeFileAsyncHttpResponseHandler)     ((RangeFileAsyncHttpResponseHandler)responseHandler).updateRequestHeaders(uriRequest);    requestList.add(requestHandle);    Iterator<RequestHandle> iterator=requestList.iterator();    while (iterator.hasNext()) {      if (iterator.next().shouldBeGarbageCollected()) {        iterator.remove();      }    }  }  return requestHandle;}  }
class C{  public FlaggingNaivePopulationBuilder(boolean useDottification,boolean useWordClasses){  this.useDottification=useDottification;  this.useWordClasses=useWordClasses;}  }
class C{  public RectangleContains(Polygon rectangle){  rectEnv=rectangle.getEnvelopeInternal();}  }
class C{  protected boolean accept(S st){  if (subj != null && !subj.equals(st.getSubject())) {    return false;  }  if (pred != null && !pred.equals(st.getPredicate())) {    return false;  }  if (obj != null && !obj.equals(st.getObject())) {    return false;  }  Resource stContext=st.getContext();  if (contexts != null && contexts.length == 0) {    return true;  } else {    for (    Value context : notNull(contexts)) {      if (context == null && stContext == null) {        return true;      }      if (context != null && context.equals(stContext)) {        return true;      }    }    return false;  }}  }
class C{  public static ArrayList<Integer> findCorners(java.util.List<Point2D.Double> digitizedPoints,double minAngle,double minDistance){  ArrayList<Integer> cornerIndices=new ArrayList<Integer>();  double squaredDistance=minDistance * minDistance;  int previousCorner=-1;  double previousCornerAngle=0;  for (int i=1, n=digitizedPoints.size(); i < n - 1; i++) {    Point2D.Double p=digitizedPoints.get(i);    Point2D.Double prev=null;    boolean intersectsPreviousCorner=false;    for (int j=i - 1; j >= 0; j--) {      if (j == previousCorner || v2SquaredDistanceBetween2Points(digitizedPoints.get(j),p) >= squaredDistance) {        prev=digitizedPoints.get(j);        intersectsPreviousCorner=j < previousCorner;        break;      }    }    if (prev == null) {      continue;    }    Point2D.Double next=null;    for (int j=i + 1; j < n; j++) {      if (v2SquaredDistanceBetween2Points(digitizedPoints.get(j),p) >= squaredDistance) {        next=digitizedPoints.get(j);        break;      }    }    if (next == null) {      continue;    }    double aPrev=Math.atan2(prev.y - p.y,prev.x - p.x);    double aNext=Math.atan2(next.y - p.y,next.x - p.x);    double angle=Math.abs(aPrev - aNext);    if (angle < Math.PI - minAngle || angle > Math.PI + minAngle) {      if (intersectsPreviousCorner) {        cornerIndices.set(cornerIndices.size() - 1,i);      } else {        cornerIndices.add(i);      }      previousCorner=i;      previousCornerAngle=angle;    }  }  return cornerIndices;}  }
class C{  private void checkEqualsIsConsistent(Message message1,Message message2){  assertEquals(message1,message2);  assertEquals(message2,message1);  assertEquals(message2.hashCode(),message1.hashCode());}  }
class C{  public void parse() throws ParseException {  if (len != 0) {    char ch;    while (pos < len) {      ch=parseString.charAt(pos);switch (ch) {case '\n':        line++;      col=pos;case '\t':case '\r':    pos++;  break;case ' ':pos++;if (!ignoreWhiteSpace) {formula.add(new SpaceAtom());formula.add(new BreakMarkAtom());while (pos < len) {  ch=parseString.charAt(pos);  if (ch != ' ' || ch != '\t' || ch != '\r')   break;  pos++;}}break;case DOLLAR:pos++;if (!ignoreWhiteSpace) {int style=TeXConstants.STYLE_TEXT;boolean doubleDollar=false;if (parseString.charAt(pos) == DOLLAR) {style=TeXConstants.STYLE_DISPLAY;doubleDollar=true;pos++;}formula.add(new MathAtom(new TeXFormula(this,getDollarGroup(DOLLAR),false).root,style));if (doubleDollar) {if (parseString.charAt(pos) == DOLLAR) {pos++;}}}break;case ESCAPE:Atom at=processEscape();formula.add(at);if (arrayMode && at instanceof HlineAtom) {((ArrayOfAtoms)formula).addRow();}if (insertion) {insertion=false;}break;case L_GROUP:Atom atom=getArgument();if (atom != null) {atom.type=TeXConstants.TYPE_ORDINARY;}formula.add(atom);break;case R_GROUP:group--;pos++;if (group == -1) throw new ParseException("Found a closing '" + R_GROUP + "' without an opening '"+ L_GROUP+ "'!");return;case SUPER_SCRIPT:formula.add(getScripts(ch));break;case SUB_SCRIPT:if (ignoreWhiteSpace) {formula.add(getScripts(ch));} else {formula.add(new UnderscoreAtom());pos++;}break;case '&':if (!arrayMode) throw new ParseException("Character '&' is only available in array mode !");((ArrayOfAtoms)formula).addCol();pos++;break;case PRIME:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));} else {formula.add(convertCharacter(PRIME,true));}pos++;break;case BACKPRIME:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("backprime")));} else {formula.add(convertCharacter(BACKPRIME,true));}pos++;break;case DQUOTE:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));} else {formula.add(convertCharacter(PRIME,true));formula.add(convertCharacter(PRIME,true));}pos++;break;default :formula.add(convertCharacter(ch,false));pos++;}}}if (formula.root == null && !arrayMode) {formula.add(new EmptyAtom());}}  }
class C{  @Override synchronized public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {  return 0;}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  @Override public void create(){  assertWritable();  final String name=getNamespace() + "." + NAME_SEARCH;  final IIndexManager indexManager=getIndexManager();  final Properties p=getProperties();  final IndexMetadata indexMetadata=new IndexMetadata(indexManager,p,name,UUID.randomUUID(),IndexTypeEnum.BTree);  final IKeyBuilderFactory keyBuilderFactory;{    final Properties tmp=new Properties(p);    tmp.setProperty(KeyBuilder.Options.STRENGTH,p.getProperty(Options.INDEXER_COLLATOR_STRENGTH,Options.DEFAULT_INDEXER_COLLATOR_STRENGTH));    keyBuilderFactory=new DefaultKeyBuilderFactory(tmp);  }  final boolean fieldsEnabled=Boolean.parseBoolean(p.getProperty(Options.FIELDS_ENABLED,Options.DEFAULT_FIELDS_ENABLED));  if (log.isInfoEnabled())   log.info(Options.FIELDS_ENABLED + "=" + fieldsEnabled);  indexMetadata.setTupleSerializer(new FullTextIndexTupleSerializer<V>(keyBuilderFactory,DefaultTupleSerializer.getDefaultLeafKeysCoder(),EmptyRabaValueCoder.INSTANCE,fieldsEnabled));  indexManager.registerIndex(indexMetadata);  if (log.isInfoEnabled())   log.info("Registered new text index: name=" + name);}  }
class C{  public boolean isError(){  return fSeverity == IStatus.ERROR;}  }
class C{  public _QueuedBuildUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  @Override public IVariable<?> var(){  return Var.var();}  }
class C{  public static TemplateCall createTemplateCall(Model model,Resource template){  TemplateCall templateCall=model.createResource(template).as(TemplateCall.class);  return templateCall;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public final int lastIndexOf(java.lang.CharSequence csq,int fromIndex){  if ((_offset + fromIndex + csq.length() - 1) >= (_offset + _length))   throw new IndexOutOfBoundsException(String.format("From Index %d Is Out of Bounds",fromIndex));  final char c=csq.charAt(0);  final int csqLength=csq.length();  for (int i=_length + _offset - csqLength - fromIndex, end=_offset; i >= end; i--) {    if (_array[i] == c) {      boolean match=true;      for (int j=1; j < csqLength; j++) {        if (_array[i + j] != csq.charAt(j)) {          match=false;          break;        }      }      if (match) {        return i - _offset;      }    }  }  return -1;}  }
class C{  private void createCollections(AnnotationSpecs spec,ObjectCreator<T> itemCreator){  if (spec.isNullable()) {    addValidType(null);  } else {    addInvalidType(null);  }  if (spec.getSizeMax() >= 0) {    int maxSize=Utils.roundDown(spec.getSizeMax(),spec.getSizeMultiple());    if (maxSize >= spec.getSizeMin()) {      addValidType(createValidCollectionOfSize(maxSize,itemCreator));    }    int minSize=Utils.roundUp(spec.getSizeMin(),spec.getSizeMultiple());    if (minSize <= spec.getSizeMax()) {      addValidType(createValidCollectionOfSize(minSize,itemCreator));    }    int middle=(int)((spec.getSizeMax() + spec.getSizeMin()) / 2L);    if (itemCreator.hasInvalidNext()) {      addInvalidType(createInvalidCollectionOfSize(maxSize,itemCreator));      addInvalidType(createInvalidCollectionOfSize(minSize,itemCreator));      if (spec.getSizeMultiple() == 1) {        addInvalidType(createInvalidCollectionOfSize(middle,itemCreator));      }    }    if (spec.getSizeMultiple() == 1) {      addValidType(createValidCollectionOfSize(middle,itemCreator));    }    addInvalidType(createValidCollectionOfSize(maxSize + 1,itemCreator));    if (spec.getSizeMin() > 0) {      addInvalidType(createValidCollectionOfSize(minSize - 1,itemCreator));    }  }}  }
class C{  public Money add(Money money){  assertDefined();  if (null == m_value) {    if (null == money.getBigDecimalValue()) {      return new Money();    } else {      return new Money(money.getBigDecimalValue());    }  }  BigDecimal value=m_value.add(money.getBigDecimalValue());  return new Money(value);}  }
class C{  public VerletParticle2D(float x,float y){  this(x,y,1);}  }
class C{  public void close(){}  }
class C{  public static void openMessengerInPlayStore(Context context){  try {    startViewUri(context,"market://details?id=" + PACKAGE_NAME);  } catch (  ActivityNotFoundException anfe) {    startViewUri(context,"http://play.google.com/store/apps/details?id=" + PACKAGE_NAME);  }}  }
class C{  public String printLeafModelsTipText(){  return "Print leaf models (naive bayes leaves only)";}  }
class C{  public static void main(final String[] args){  Log4J.init();  new DatabaseFactory().initializeDatabase();  String timedate="1900-01-01";  if (args.length > 0) {    timedate=args[0];  }  final LoginLogoutConsistencyCheck analyser=new LoginLogoutConsistencyCheck();  boolean res=analyser.analyse(timedate);  if (res) {    System.exit(1);  }}  }
class C{  public Individual(List<A> representation){  this.representation=Collections.unmodifiableList(representation);}  }
class C{  protected ProjectReferenceImpl(){  super();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public T caseRoute(Route object){  return null;}  }
class C{  public ArrayList parseArguments(){  String working=" " + _arguments + " ";  int index=0;  result=new ArrayList();  while (index < working.length()) {    int next=findNextArg(index,working);    if (next < 0)     break;    int pos=extractArgName(next,working);    ArgRange range=extractArgValue(pos + 1,working);    if (range != null) {      String argName=working.substring(next,pos);      String argValue=working.substring(range.startIndex,range.endIndex);      result.add(argName + "=" + argValue);      index=range.endIndex + 1;    } else {      String argName=working.substring(next,pos);      result.add(argName);      index=pos + 1;    }  }  return result;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static Matrix buildMatrix(int rows,int columns,double[] data){  if (rows == columns) {    return new GeneralSquareMatrix(rows,data);  } else {    return new GeneralMatrix(rows,columns,data);  }}  }
class C{  private void finalMove(){  progressBar.setValue(progressBar.getMaximum());  progressBar.setString(R.getString("progress.done"));  progressBar.setEnabled(false);  this.threadWatcher.updateProgress();  threadWatcher.done(this);}  }
class C{  public OrderByClause add(Expression expression,boolean isDescending){  orderByExpressions.add(new OrderByElement(expression,isDescending));  return this;}  }
class C{  public SourceClassPathImpl(Project proj){  super(proj);  NbMavenProject projectWatcher=MavenHelper.getProjectWatcher(proj);  if (projectWatcher != null) {    projectWatcher.addWatchedPath("target/generated-sources");  }}  }
class C{  @Path("showlog") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse showLog(final ShowLogRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.showLog(request);}  }
class C{  public LogicalUnit releaseLUSE(String systemObjectId,String logicalUnitId) throws Exception {  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray storageArray=new StorageArray(systemObjectId);  attributeMap.put(HDSConstants.STORAGEARRAY,storageArray);  Add addOp=new Add(HDSConstants.LUSE_TARGET);  attributeMap.put(HDSConstants.GET,addOp);  attributeMap.put(HDSConstants.LOGICALUNIT,logicalUnitId);  String releaseLUSEVolumeInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.RELEASE_LUSE_VOLUME_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  URI endpointURI=hdsApiClient.getBaseURI();  InputStream responseStream=null;  LogicalUnit logicalUnit=null;  try {    log.info("release LUSE Query payload :{}",releaseLUSEVolumeInputXML);    ClientResponse response=hdsApiClient.post(endpointURI,releaseLUSEVolumeInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(result);      logicalUnit=(LogicalUnit)result.getBean(HDSConstants.LOGICALUNIT_BEAN_NAME);    } else {      log.error("deleteLUSE failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete LUSE due to invalid response %1$s from server for system %2$s",response.getStatus(),systemObjectId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return logicalUnit;}  }
class C{  private void scheduleNext(){  while (true) {    Runnable next=null;    if ((next=queue.poll()) != null) {      try {        executor.execute(next);        return;      } catch (      RejectedExecutionException ex) {        log.error(ex,ex);        continue;      }    } else {      semaphore.release();      if (!queue.isEmpty() && semaphore.tryAcquire()) {        continue;      }      return;    }  }}  }
class C{  public AbstractUndoableEdit(){  super();  hasBeenDone=true;  alive=true;}  }
class C{  public ChainingXmlWriter indent(Integer indent){  outputProperties.setIndent(indent);  return this;}  }
class C{  @Override public boolean removeAll(Collection<?> c){  return false;}  }
class C{  public static Result applyToAllChoiceDialog(Stage owner,String msg){  return showDialog(owner,MessageType.CANCELLABLE_CONFIRM,msg,true);}  }
class C{  protected void processBDDPLists(){  int count=0;  Set<NodePortTuple> nptList=new HashSet<NodePortTuple>();  while (count < BDDP_TASK_SIZE && quarantineQueue.peek() != null) {    NodePortTuple npt;    npt=quarantineQueue.remove();    if (!toRemoveFromQuarantineQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    nptList.add(npt);    count++;  }  count=0;  while (count < BDDP_TASK_SIZE && maintenanceQueue.peek() != null) {    NodePortTuple npt;    npt=maintenanceQueue.remove();    if (!toRemoveFromMaintenanceQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    count++;  }  for (  NodePortTuple npt : nptList) {    generateSwitchPortStatusUpdate(npt.getNodeId(),npt.getPortId());  }}  }
class C{  private static boolean checkEscapesMethod(RegisterOperand use,IR ir,Set<Register> visited){  Instruction inst=use.instruction;  try {switch (inst.getOpcode()) {case INT_ASTORE_opcode:case LONG_ASTORE_opcode:case FLOAT_ASTORE_opcode:case DOUBLE_ASTORE_opcode:case BYTE_ASTORE_opcode:case SHORT_ASTORE_opcode:case REF_ASTORE_opcode:      Operand value=AStore.getValue(inst);    return value == use;case GETFIELD_opcode:case GETSTATIC_opcode:case INT_ALOAD_opcode:case LONG_ALOAD_opcode:case FLOAT_ALOAD_opcode:case DOUBLE_ALOAD_opcode:case BYTE_ALOAD_opcode:case UBYTE_ALOAD_opcode:case BYTE_LOAD_opcode:case UBYTE_LOAD_opcode:case USHORT_ALOAD_opcode:case SHORT_ALOAD_opcode:case USHORT_LOAD_opcode:case SHORT_LOAD_opcode:case REF_ALOAD_opcode:case INT_LOAD_opcode:case LONG_LOAD_opcode:case FLOAT_LOAD_opcode:case DOUBLE_LOAD_opcode:case REF_LOAD_opcode:  Operand result=ResultCarrier.getResult(inst);return result == use;case PUTFIELD_opcode:value=PutField.getValue(inst);return value == use;case PUTSTATIC_opcode:value=PutStatic.getValue(inst);return value == use;case BYTE_STORE_opcode:case SHORT_STORE_opcode:case REF_STORE_opcode:case INT_STORE_opcode:case LONG_STORE_opcode:case FLOAT_STORE_opcode:case DOUBLE_STORE_opcode:value=Store.getValue(inst);return value == use;case BOUNDS_CHECK_opcode:case MONITORENTER_opcode:case MONITOREXIT_opcode:case NULL_CHECK_opcode:case ARRAYLENGTH_opcode:case REF_IFCMP_opcode:case INT_IFCMP_opcode:case IG_PATCH_POINT_opcode:case IG_CLASS_TEST_opcode:case IG_METHOD_TEST_opcode:case BOOLEAN_CMP_INT_opcode:case BOOLEAN_CMP_ADDR_opcode:case OBJARRAY_STORE_CHECK_opcode:case OBJARRAY_STORE_CHECK_NOTNULL_opcode:case GET_OBJ_TIB_opcode:case GET_TYPE_FROM_TIB_opcode:case NEW_opcode:case NEWARRAY_opcode:case NEWOBJMULTIARRAY_opcode:case NEW_UNRESOLVED_opcode:case NEWARRAY_UNRESOLVED_opcode:case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:case MUST_IMPLEMENT_INTERFACE_opcode:case GET_CAUGHT_EXCEPTION_opcode:case IR_PROLOGUE_opcode:return false;case RETURN_opcode:return true;case CALL_opcode:{MethodOperand mop=Call.getMethod(inst);if (mop != null && mop.hasPreciseTarget()) {RVMMethod target=mop.getTarget();boolean isThrowableConstructor=target.getDeclaringClass().isJavaLangThrowableType() && target.isObjectInitializer();boolean isNoArgThrowableConstructor=isThrowableConstructor && target.getParameterTypes().length == 0;if (isNoArgThrowableConstructor) {return false;}}return true;}case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:case REF_MOVE_opcode:{if (visited == null) {visited=new HashSet<Register>();}Register copy=ResultCarrier.getResult(inst).getRegister();if (!copy.isSSA()) {return true;} else {visited.add(use.getRegister());if (visited.contains(copy)) {return false;} else {boolean result2=checkIfUseEscapesMethod(copy,ir,visited);return result2;}}}case ATHROW_opcode:case PREPARE_INT_opcode:case PREPARE_ADDR_opcode:case ATTEMPT_INT_opcode:case ATTEMPT_ADDR_opcode:case PREPARE_LONG_opcode:case ATTEMPT_LONG_opcode:case INT_MOVE_opcode:case INT_ADD_opcode:case REF_ADD_opcode:case INT_MUL_opcode:case INT_DIV_opcode:case INT_REM_opcode:case INT_NEG_opcode:case INT_ZERO_CHECK_opcode:case INT_OR_opcode:case INT_AND_opcode:case INT_XOR_opcode:case REF_OR_opcode:case REF_AND_opcode:case REF_XOR_opcode:case INT_SUB_opcode:case REF_SUB_opcode:case INT_SHL_opcode:case INT_SHR_opcode:case INT_USHR_opcode:case SYSCALL_opcode:case REF_SHL_opcode:case REF_SHR_opcode:case REF_USHR_opcode:case SET_CAUGHT_EXCEPTION_opcode:case PHI_opcode:case INT_2LONG_opcode:case REF_COND_MOVE_opcode:case INT_COND_MOVE_opcode:case INT_2ADDRSigExt_opcode:case INT_2ADDRZerExt_opcode:case ADDR_2INT_opcode:case ADDR_2LONG_opcode:case LONG_OR_opcode:case LONG_AND_opcode:case LONG_XOR_opcode:case LONG_SUB_opcode:case LONG_SHL_opcode:case LONG_ADD_opcode:case LONG_SHR_opcode:case LONG_USHR_opcode:case LONG_NEG_opcode:case LONG_MOVE_opcode:case LONG_2ADDR_opcode:case YIELDPOINT_OSR_opcode:return true;default :if (VM.BuildForPowerPC) {switch (inst.getOpcode()) {case DCBST_opcode:case DCBT_opcode:case DCBTST_opcode:case DCBZ_opcode:case DCBZL_opcode:case ICBI_opcode:return false;}} else {switch (inst.getOpcode()) {case PREFETCH_opcode:return false;}}throw new OptimizingCompilerException("SimpleEscapge: Unexpected " + inst);}} catch (Exception e) {OptimizingCompilerException oe=new OptimizingCompilerException("Error handling use (" + use + ") of: "+ inst);oe.initCause(e);throw oe;}}  }
class C{  public <A extends Annotation>void putValidatorClasses(Class<A> annotationType,List<Class<? extends ConstraintValidator<A,?>>> definitionClasses,boolean keepDefaultClasses){  if (keepDefaultClasses) {    List<Class<? extends ConstraintValidator<A,?>>> defaultValidators=getDefaultValidatorClasses(annotationType);    for (    Class<? extends ConstraintValidator<A,?>> defaultValidator : defaultValidators) {      definitionClasses.add(0,defaultValidator);    }  }  validatorClasses.put(annotationType,definitionClasses);}  }
class C{  public void addListener(final IZyGraphSelectionListener listener){  m_selectionListeners.addListener(listener);}  }
class C{  public void testMT() throws Exception {  tryMT(8,1000,64);}  }
class C{  @Deprecated public static void debugStack(IgniteLogger log,String msg){  log.error(msg,new Exception(debugPrefix() + msg));}  }
class C{  private final void assertIsLocPathIterator(Expression expr1,ExpressionOwner eo) throws RuntimeException {  if (!(expr1 instanceof LocPathIterator)) {    String errMsg;    if (expr1 instanceof Variable) {      errMsg="Programmer's assertion: expr1 not an iterator: " + ((Variable)expr1).getQName();    } else {      errMsg="Programmer's assertion: expr1 not an iterator: " + expr1.getClass().getName();    }    throw new RuntimeException(errMsg + ", " + eo.getClass().getName()+ " "+ expr1.exprGetParent());  }}  }
class C{  public void itemStateChanged(final ItemEvent e){  if (e.getSource() == this) {    fMenuItem.doClick(0);    return;  }switch (e.getStateChange()) {case ItemEvent.SELECTED:    forceSetState(true);  break;case ItemEvent.DESELECTED:forceSetState(false);break;}}  }
class C{  public boolean loadProperties(Properties props,String file){  File propsFile=new File(file);  try {    InputStream propsStream=new FileInputStream(propsFile);    props.load(propsStream);    return true;  } catch (  java.io.FileNotFoundException e) {    Debug.error("ImageMaster.loadProperties(): Unable to read configuration file \"" + propsFile + "\"");  }catch (  java.io.IOException e) {    Debug.error("ImageMaster.loadProperties(): Caught IO Exception reading configuration file \"" + propsFile + "\" \n"+ e);  }  return false;}  }
class C{  @Override public long removeAll(){  throw new UnsupportedOperationException();}  }
class C{  public static <C extends Comparable<?>>Range<C> downTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public String toString(){  DateFormat shortDF=DateFormat.getDateInstance(DateFormat.SHORT);  return shortDF.format(fromJulian(julian));}  }
class C{  public static List<Intersection> intersectTriangles(final Line line,FloatBuffer vertices,IntBuffer indices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null || indices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  for (int n=indices.position(); n < indices.limit(); n+=3) {    Intersection intersection;    int i=indices.get(n) * 3;    int j=indices.get(n + 1) * 3;    int k=indices.get(n + 2) * 3;    intersection=intersect(line,vertices.get(i),vertices.get(i + 1),vertices.get(i + 2),vertices.get(j),vertices.get(j + 1),vertices.get(j + 2),vertices.get(k),vertices.get(k + 1),vertices.get(k + 2));    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  public boolean isLeaving(){  return isLeaving;}  }
class C{  public boolean remove(Predicate p){  if (p == null)   return false;  IfExpression prev=null;  Expression expr=m_head;  while (expr instanceof IfExpression) {    IfExpression ifex=(IfExpression)expr;    Predicate test=(Predicate)ifex.getTestPredicate();    if (p.equals(test)) {      Expression elseex=ifex.getElseExpression();      ifex.setElseExpression(new ObjectLiteral(null));      if (prev != null) {        prev.setElseExpression(elseex);        if (ifex == m_tail)         m_tail=prev;      } else {        m_head=elseex;        if (ifex == m_tail)         m_tail=null;      }      return true;    } else {      prev=ifex;      expr=ifex.getElseExpression();    }  }  return false;}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isFullyZoomedOutY(){  if (mScaleY > mMinScaleY || mMinScaleY > 1f)   return false; else   return true;}  }
class C{  private void initRecyclerView(){  CycleBinder cycleBinder=talkAdapter.getCycleBinder();  AcceptedOfferBinder offerBinder=talkAdapter.getOfferBinder();  talkRecyclerView.setAdapter(talkAdapter);  talkRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));  presenter.removeOffer(offerBinder.getRemoveOfferStream());  presenter.undoRemoveOffer(offerModel.getUndoOfferRemoveStream());}  }
class C{  public PidFile(final File directory,final String filename) throws FileNotFoundException {  if (!directory.isDirectory() && directory.exists()) {    throw new IllegalArgumentException("Argument '" + directory + "' must be an existing directory!");  }  final File file=new File(directory,filename);  if (!file.exists() || file.isDirectory()) {    throw new FileNotFoundException("Unable to find PID file '" + filename + "' in directory "+ directory);  }  this.pidFile=file;}  }
class C{  public BaseItemCollectionPage(final BaseItemCollectionResponse response,final IItemCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  public synchronized void updateSurfaceColor(float[] rgba){  Object[] key=new Object[quadTreeMap.size()];  key=quadTreeMap.keySet().toArray(key);  for (int i=0; i < key.length; ++i) {    QuadTree item=quadTreeMap.get(key[i]);    item.getMesh().updateSurfaceColor(rgba);  }}  }
class C{  public boolean hasSiteName(){  return hasExtension(SiteName.class);}  }
class C{  public ZoomEvent(boolean in,float rate){  mZoomIn=in;  mZoomRate=rate;}  }
class C{  public void translatePointInScreenToAppWindow(PointF point){  final float scale=applicationInvertedScale;  if (scale != 1.0f) {    point.x*=scale;    point.y*=scale;  }}  }
class C{  public static boolean isLocationGuarded(Entity entity){  List<LocationStorage> locations=getLocations(entity);  for (  LocationStorage location : locations) {    if (location.isGuarded())     return true;  }  return false;}  }
class C{  public PropertyFileGeneratorImpl(Project project,GenerationOptions genOptions){  final PathMacros pathMacros=PathMacros.getInstance();  final Set<String> macroNamesSet=pathMacros.getUserMacroNames();  if (macroNamesSet.size() > 0) {    final String[] macroNames=ArrayUtil.toStringArray(macroNamesSet);    Arrays.sort(macroNames);    for (    final String macroName : macroNames) {      addProperty(BuildProperties.getPathMacroProperty(macroName),pathMacros.getValue(macroName));    }  }  if (genOptions.forceTargetJdk) {    final Sdk[] usedJdks=BuildProperties.getUsedJdks(project);    for (    Sdk jdk : usedJdks) {      if (jdk.getHomeDirectory() == null) {        continue;      }      final File homeDir=BuildProperties.toCanonicalFile(VfsUtil.virtualToIoFile(jdk.getHomeDirectory()));      addProperty(BuildProperties.getJdkHomeProperty(jdk.getName()),homeDir.getPath().replace(File.separatorChar,'/'));    }  }  if (genOptions.isIdeaHomeGenerated()) {    addProperty(BuildProperties.PROPERTY_IDEA_HOME,PathManager.getHomePath());  }  if (genOptions.enableFormCompiler) {    addProperty(BuildProperties.PROPERTY_INCLUDE_JAVA_RUNTIME_FOR_INSTRUMENTATION,genOptions.forceTargetJdk ? "false" : "true");  }  ChunkBuildExtension.generateAllProperties(this,project,genOptions);}  }
class C{  public void intervalRemoved(ListDataEvent e){}  }
class C{  public Hit(final Target target,final TargetRegion hitRegion,final int impactX,final int impactY){  this.target=target;  this.hitRegion=hitRegion;  this.impactX=impactX;  this.impactY=impactY;}  }
class C{  protected List<AssetOption> createFilesystemOptions(Collection<FileShareRestRep> filesystems,Predicate predicate){  CollectionUtils.filter(filesystems,predicate);  List<AssetOption> options=Lists.newArrayList();  for (  FileShareRestRep fs : filesystems) {    options.add(new AssetOption(fs.getId(),getLabel(fs)));  }  AssetOptionsUtils.sortOptionsByLabel(options);  return options;}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public List transform(ieci.tecdoc.sgm.tram.ws.client.dto.OrganoProductor[] organosProductores){  List ltOrganosProductores=new ArrayList();  if (organosProductores != null) {    for (int i=0; i < organosProductores.length; i++) {      ieci.tecdoc.sgm.tram.ws.client.dto.OrganoProductor organoProductor=(ieci.tecdoc.sgm.tram.ws.client.dto.OrganoProductor)organosProductores[i];      OrganoProductorImpl organoProductorImpl=new OrganoProductorImpl(organoProductor.getId(),organoProductor.getInicioProduccion());      ltOrganosProductores.add(organoProductorImpl);    }  }  return ltOrganosProductores;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.649 -0500",hash_original_method="4454085F5358E0B8D9507639FB30951F",hash_generated_method="1A9B82FCE81633FF238B936267427CF4") public LogConfigurationException(Throwable cause){  this((cause == null) ? null : cause.toString(),cause);}  }
class C{  public void mouseClicked(MouseEvent e){  mouseSupport.fireMapMouseClicked(e);  fireMouseLocation(e);}  }
class C{  protected DoubleMatrix1D like1D(int size,int zero,int stride){  return new DenseDoubleMatrix1D(size,this.elements,zero,stride);}  }
class C{  private synchronized void loadCaptchas(){  LOGGER.trace("Loading captchas....");  try {    captchas=new Image[CAPTCHA_COUNT];    ZipFile zipFile;    if (RuntimeEnv.LOCAL == Latkes.getRuntimeEnv()) {      final InputStream inputStream=SymphonyServletListener.class.getClassLoader().getResourceAsStream("captcha_static.zip");      final File file=File.createTempFile("b3log_captcha_static",null);      final OutputStream outputStream=new FileOutputStream(file);      IOUtils.copy(inputStream,outputStream);      zipFile=new ZipFile(file);      IOUtils.closeQuietly(inputStream);      IOUtils.closeQuietly(outputStream);    } else {      final URL captchaURL=SymphonyServletListener.class.getClassLoader().getResource("captcha_static.zip");      zipFile=new ZipFile(captchaURL.getFile());    }    final Enumeration<? extends ZipEntry> entries=zipFile.entries();    int i=0;    while (entries.hasMoreElements()) {      final ZipEntry entry=entries.nextElement();      final BufferedInputStream bufferedInputStream=new BufferedInputStream(zipFile.getInputStream(entry));      final byte[] captchaCharData=new byte[bufferedInputStream.available()];      bufferedInputStream.read(captchaCharData);      bufferedInputStream.close();      final Image image=IMAGE_SERVICE.makeImage(captchaCharData);      image.setName(entry.getName().substring(0,entry.getName().lastIndexOf('.')));      captchas[i]=image;      i++;    }    zipFile.close();  } catch (  final Exception e) {    LOGGER.error("Can not load captchs!");    throw new IllegalStateException(e);  }  LOGGER.trace("Loaded captch images");}  }
class C{  public List<StorageUnit> createStorageUnitsFromEntities(Collection<StorageUnitEntity> storageUnitEntities){  List<StorageUnit> storageUnits=new ArrayList<>();  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {    StorageUnit storageUnit=new StorageUnit();    storageUnits.add(storageUnit);    Storage storage=new Storage();    storageUnit.setStorage(storage);    StorageEntity storageEntity=storageUnitEntity.getStorage();    storage.setName(storageEntity.getName());    storage.setStoragePlatformName(storageEntity.getStoragePlatform().getName());    if (!CollectionUtils.isEmpty(storageEntity.getAttributes())) {      List<Attribute> storageAttributes=new ArrayList<>();      storage.setAttributes(storageAttributes);      for (      StorageAttributeEntity storageAttributeEntity : storageEntity.getAttributes()) {        Attribute attribute=new Attribute();        storageAttributes.add(attribute);        attribute.setName(storageAttributeEntity.getName());        attribute.setValue(storageAttributeEntity.getValue());      }    }    if (storageUnitEntity.getDirectoryPath() != null) {      StorageDirectory storageDirectory=new StorageDirectory();      storageUnit.setStorageDirectory(storageDirectory);      storageDirectory.setDirectoryPath(storageUnitEntity.getDirectoryPath());    }    if (!storageUnitEntity.getStorageFiles().isEmpty()) {      List<StorageFile> storageFiles=new ArrayList<>();      storageUnit.setStorageFiles(storageFiles);      for (      StorageFileEntity storageFileEntity : storageUnitEntity.getStorageFiles()) {        storageFiles.add(storageFileHelper.createStorageFileFromEntity(storageFileEntity));      }    }    storageUnit.setStorageUnitStatus(storageUnitEntity.getStatus().getCode());  }  return storageUnits;}  }
class C{  public long convertGeodeticToMGRS(double latitude,double longitude,int precision){  MGRSString="";  long error_code=MGRS_NO_ERROR;  if ((latitude < -PI_OVER_2) || (latitude > PI_OVER_2)) {    error_code=MGRS_LAT_ERROR;  }  if ((longitude < -PI) || (longitude > (2 * PI))) {    error_code=MGRS_LON_ERROR;  }  if ((precision < 0) || (precision > MAX_PRECISION))   error_code=MGRS_PRECISION_ERROR;  if (error_code == MGRS_NO_ERROR) {    if ((latitude < MIN_UTM_LAT) || (latitude > MAX_UTM_LAT)) {      try {        UPSCoord UPS=UPSCoord.fromLatLon(Angle.fromRadians(latitude),Angle.fromRadians(longitude));        error_code|=convertUPSToMGRS(UPS.getHemisphere(),UPS.getEasting(),UPS.getNorthing(),precision);      } catch (      Exception e) {        error_code=MGRS_UPS_ERROR;      }    } else {      try {        UTMCoord UTM=UTMCoord.fromLatLon(Angle.fromRadians(latitude),Angle.fromRadians(longitude));        error_code|=convertUTMToMGRS(UTM.getZone(),latitude,UTM.getEasting(),UTM.getNorthing(),precision);      } catch (      Exception e) {        error_code=MGRS_UTM_ERROR;      }    }  }  return error_code;}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,String typeName) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public static double RAEfitness(boolean useTrainingData,GEPIndividual ind){  double RAE=RAErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + RAE);}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  checkPositionIndex(index);  Object[] a=c.toArray();  int numNew=a.length;  if (numNew == 0)   return false;  Node<E> pred, succ;  if (index == size) {    succ=null;    pred=last;  } else {    succ=node(index);    pred=succ.prev;  }  for (  Object o : a) {    @SuppressWarnings("unchecked") E e=(E)o;    Node<E> newNode=new Node<>(pred,e,null);    if (pred == null)     first=newNode; else     pred.next=newNode;    pred=newNode;  }  if (succ == null) {    last=pred;  } else {    pred.next=succ;    succ.prev=pred;  }  size+=numNew;  modCount++;  return true;}  }
class C{  public boolean isOnThursday(){  Object oo=get_Value(COLUMNNAME_OnThursday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.STRING_LITERAL__VALUE:    setValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static Object fromString(String s) throws IOException, ClassNotFoundException {  byte[] data=Base64.decode(s,Base64.DEFAULT);  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));  Object o=ois.readObject();  ois.close();  return o;}  }
class C{  public TraceLogger(final Debugger debugger,final Module module){  Preconditions.checkNotNull(debugger,"Error: Debugger argument can not be null");  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  this.debugger=debugger;  this.module=module;  this.project=null;}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries,Comparator<? super K> comparator){  return fromEntries(checkNotNull(comparator),false,entries);}  }
class C{  @Deprecated public static TransactionSignature decodeFromBitcoin(byte[] bytes,boolean requireCanonicalEncoding) throws VerificationException {  return decodeFromBitcoin(bytes,requireCanonicalEncoding,false);}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  @Override public final boolean put(final Row.Entry entry) throws SpaceExceededException {  assert (entry != null);  if (entry == null)   return true;synchronized (this) {    finishInitialization();    assert this.index0.isSorted();    final byte[] key=entry.getPrimaryKeyBytes();    if (this.index0.has(key)) {      this.index0.put(entry);      return false;    }    return this.index1.put(entry);  }}  }
class C{  public ObjectPool(int maxPoolSize){  if (maxPoolSize <= 0) {    throw new IllegalArgumentException("The max pool size must be > 0");  }  mPool=new Object[maxPoolSize];}  }
class C{  @Provides @Config("rdapResultSetMaxSize") public static int provideRdapResultSetMaxSize(){  return 100;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.ACCESS__ARGS:    setArgs((ExpressionList)newValue);  return;case GamlPackage.ACCESS__NAMED_EXP:setNamed_exp((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public GreyScaleEffect(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.534 -0400",hash_original_method="348630D7F52CD6FE922772D18E5A4EE3",hash_generated_method="2981E8416B8EEBBC7C8DB8E201224C05") private void writeObject(java.io.ObjectOutputStream out) throws IOException {  if (guard != null) {    guard.checkGuard(object);  }  out.defaultWriteObject();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private int createFrameBufferObject(){  this.fbo=glGenFramebuffersEXT();  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT,GL_COLOR_ATTACHMENT0_EXT,GL_TEXTURE_2D,this.tex,0);  int fboStatus=glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE_EXT) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  return fbo;}  }
class C{  private void initialize(){  Context context=getContext();  if (!sInitialized) {    sInitialized=true;    Resources resources=context.getApplicationContext().getResources();    sCropSize=resources.getDimensionPixelSize(R.dimen.photo_crop_width);    sCropDimPaint=new Paint();    sCropDimPaint.setAntiAlias(true);    sCropDimPaint.setColor(resources.getColor(R.color.photo_crop_dim_color));    sCropDimPaint.setStyle(Style.FILL);    sCropPaint=new Paint();    sCropPaint.setAntiAlias(true);    sCropPaint.setColor(resources.getColor(R.color.photo_crop_highlight_color));    sCropPaint.setStyle(Style.STROKE);    sCropPaint.setStrokeWidth(resources.getDimension(R.dimen.photo_crop_stroke_width));    final ViewConfiguration configuration=ViewConfiguration.get(context);    final int touchSlop=configuration.getScaledTouchSlop();    sTouchSlopSquare=touchSlop * touchSlop;  }  mGestureDetector=new GestureDetectorCompat(context,this,null);  mScaleGetureDetector=new ScaleGestureDetector(context,this);  mQuickScaleEnabled=ScaleGestureDetectorCompat.isQuickScaleEnabled(mScaleGetureDetector);  mScaleRunnable=new ScaleRunnable(this);  mTranslateRunnable=new TranslateRunnable(this);  mSnapRunnable=new SnapRunnable(this);  mRotateRunnable=new RotateRunnable(this);}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  m_Support.addPropertyChangeListener(l);}  }
class C{  @Override public Request<Void> update(String factoryId,String jsonContent){  JsonReader jSonReader=Json.createReader(new StringReader(jsonContent));  JsonObject jsonObject=jSonReader.readObject();  final Invocation request=getWebTarget().path(factoryId).request().accept(APPLICATION_JSON).buildPut(Entity.entity(jsonObject,APPLICATION_JSON));  return new SimpleRequest<Void>(request,getAuthenticationManager());}  }
class C{  private final static int eq(final byte[] a,final byte[] b){  for (int i=0; i < a.length; i++) {    if (a[i] != b[i])     return i;  }  return a.length;}  }
class C{  public void modify(String rdnKey,String rdnValue,Modification... mods) throws Exception {  service.getAdminSession().modify(new DN(rdnKey + '=' + rdnValue+ ','+ baseDn),Arrays.asList(mods));}  }
class C{  static Profile decode(final String info){  String[] params;  Profile profile;  String s;  params=info.split("\n");  profile=new Profile();  if (params.length > 0) {    s=params[0];    for (    final String host : OLD_SERVER_HOSTS) {      if (s.equals(host)) {        s=NEW_SERVER_HOST;        break;      }    }    if (s.length() != 0) {      profile.setHost(s);    }  }  if (params.length > 1) {    s=params[1];    if (s.length() != 0) {      profile.setUser(s);    }  }  if (params.length > 2) {    s=params[2];    if (s.length() != 0) {      profile.setPassword(s);    }  }  if (params.length > 3) {    s=params[3];    if (s.length() != 0) {      try {        profile.setPort(Integer.parseInt(s));      } catch (      final NumberFormatException ex) {      }    }  }  return profile;}  }
class C{  public final boolean isPublic(){  return (this.modifiers & ClassFileConstants.AccPublic) != 0;}  }
class C{  public boolean isInitialized(){  return isOctetStream() || isNodeSet();}  }
class C{  private String printCFormat(char x){  int nPrint=1;  int width=fieldWidth;  if (!fieldWidthSet)   width=nPrint;  char[] ca=new char[width];  int i=0;  if (leftJustify) {    ca[0]=x;    for (i=1; i <= width - nPrint; i++)     ca[i]=' ';  } else {    for (i=0; i < width - nPrint; i++)     ca[i]=' ';    ca[i]=x;  }  return new String(ca);}  }
class C{  private void scrollListItemsBy(int amount){  tryOffsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final PLAAbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    View last=getLastChild();    int numChildren=getChildCount();    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        addViewBelow(last,lastVisiblePosition);        last=getLastChild();        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      tryOffsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      tryOffsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  protected void returnToStartupActivity(){  finish();}  }
class C{  public static String timestampToString(double timestamp){  if (timestamp == 0)   return "0";  double utc=timestamp - (2208988800.0);  long ms=(long)(utc * 1000.0);  String date=new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").format(new Date(ms));  double fraction=timestamp - ((long)timestamp);  String fractionSting=new DecimalFormat(".000000").format(fraction);  return date + fractionSting;}  }
class C{  public static MethodSymbol findFirstMethodDeclarationInType(TypeSymbol typeSymbol,String methodName){  if (typeSymbol == null) {    return null;  }  if (typeSymbol.getEnclosedElements() != null) {    for (    Element element : typeSymbol.getEnclosedElements()) {      if ((element instanceof MethodSymbol) && (methodName.equals(element.getSimpleName().toString()))) {        return (MethodSymbol)element;      }    }  }  return null;}  }
class C{  final boolean tokenIs(String s){  return (m_token != null) ? (m_token.equals(s)) : (s == null);}  }
class C{  private static boolean indentLine(IDocument document,int line,JavaIndenter indenter,JavaHeuristicScanner scanner,boolean[] commentLines,int lineIndex,int tabSize) throws BadLocationException {  IRegion currentLine=document.getLineInformation(line);  final int offset=currentLine.getOffset();  int wsStart=offset;  String indent=null;  if (offset < document.getLength()) {    ITypedRegion partition=TextUtilities.getPartition(document,IJavaPartitions.JAVA_PARTITIONING,offset,true);    ITypedRegion startingPartition=TextUtilities.getPartition(document,IJavaPartitions.JAVA_PARTITIONING,offset,false);    String type=partition.getType();    if (type.equals(IJavaPartitions.JAVA_DOC) || type.equals(IJavaPartitions.JAVA_MULTI_LINE_COMMENT)) {      indent=computeJavadocIndent(document,line,scanner,startingPartition);    } else     if (!commentLines[lineIndex] && startingPartition.getOffset() == offset && startingPartition.getType().equals(IJavaPartitions.JAVA_SINGLE_LINE_COMMENT)) {      return false;    }  }  if (indent == null) {    StringBuffer computed=indenter.computeIndentation(offset);    if (computed != null)     indent=computed.toString(); else     indent=new String();  }  int lineLength=currentLine.getLength();  int end=scanner.findNonWhitespaceForwardInAnyPartition(wsStart,offset + lineLength);  if (end == JavaHeuristicScanner.NOT_FOUND)   end=offset + lineLength;  int length=end - offset;  String currentIndent=document.get(offset,length);  if (length > 0) {    ITypedRegion partition=TextUtilities.getPartition(document,IJavaPartitions.JAVA_PARTITIONING,end,false);    if (partition.getOffset() == end && IJavaPartitions.JAVA_SINGLE_LINE_COMMENT.equals(partition.getType())) {      commentLines[lineIndex]=true;    }  }  if (!indent.equals(currentIndent)) {    document.replace(offset,length,indent);    return true;  }  return false;}  }
class C{  public Object remove(){  if (isEmpty()) {    throw new IllegalStateException("The buffer is already empty");  }  Object element=elements[start];  if (null != element) {    elements[start++]=null;    if (start >= maxElements) {      start=0;    }    full=false;  }  return element;}  }
class C{  public boolean dependsOn(AppComponent other){  for (  AppComponent dependency : dependencies) {    if (dependency.equals(other) || dependency.dependsOn(other))     return true;  }  return false;}  }
class C{  public DatatypeConfigurationException(){}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public PerfBucketMetrics(long value){  Validate.isTrue(value >= 0,Long.toString(value));  hits=1;  totalMs=value;  ceilingMs=value;  effectiveCeilingMs=0;  floorMs=value;}  }
class C{  public void remove(Chip chip){  mAdapter.remove(chip);}  }
class C{  public static final GCodeFlavor tasteFlavor(File file) throws IOException, GCodeParseException {  if (file.exists())   throw new GCodeParseException("Passed file does not exist.");  if (!file.isFile())   throw new GCodeParseException("This is not a file.");  final BufferedInputStream buffer=new BufferedInputStream(new FileInputStream(file));  GCodeFlavor ret=tasteFlavor(buffer);  buffer.close();  return ret;}  }
class C{  public static MedianProjectionExpression median(String propertyName){  return new MedianProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public MaterializeBuilder withTintedNavigationBar(boolean tintedNavigationBar){  this.mTintNavigationBar=tintedNavigationBar;  if (tintedNavigationBar) {    withTranslucentNavigationBarProgrammatically(true);  }  return this;}  }
class C{  private void calculateMaxValue(){  if (0 == radices.length) {    throw new IllegalArgumentException("At least 1 radix must be defined.");  }  for (int i=0; i < radices.length; i++) {    if (radices[i] < 2) {      throw new IllegalArgumentException("Invalid radix, must be >= 2");    }  }  maxValue=radices[0];  for (int i=1; i < radices.length; i++) {    maxValue*=radices[i];  }  maxValue-=1;  if (value > maxValue) {    throw new IllegalArgumentException("The value [" + value + "] cannot be represented with the radices provided, max value is "+ maxValue);  }  currentNumeralValue=new int[radices.length];}  }
class C{  private void collectHotOptMethodsInternal(int index,List<HotMethodRecompilationEvent> collect,double threshold,int optLevel){  if (index < nextIndex) {    if (counts[index] > threshold) {      int cmid=cmids[index];      CompiledMethod cm=CompiledMethods.getCompiledMethod(cmid);      if (cm == null) {        reset(cmid);        collectHotOptMethodsInternal(index,collect,threshold,optLevel);      } else {        int compilerType=cm.getCompilerType();        if (compilerType == CompiledMethod.OPT && ((OptCompiledMethod)cm).getOptLevel() == optLevel) {          double ns=counts[index];          collect.add(new HotMethodRecompilationEvent(cm,ns));        }        collectHotOptMethodsInternal(index * 2,collect,threshold,optLevel);        collectHotOptMethodsInternal(index * 2 + 1,collect,threshold,optLevel);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue02.class,args);}  }
class C{  public void testRefresh_AllowsMultipleSequentialSyncsAfterSuccess(){  mController.init();  mController.onRefreshRequested();  mFakeEventBus.post(new SyncSucceededEvent());  mController.onRefreshRequested();  verify(mMockSyncManager,times(2)).startFullSync();}  }
class C{  public void onPreProcessRequest(AsyncHttpRequest request){}  }
class C{  private String escapedAV() throws IOException {  beg=pos;  end=pos;  while (true) {    if (pos >= chars.length) {      return new String(chars,beg,end - beg);    }switch (chars[pos]) {case '+':case ',':case ';':      return new String(chars,beg,end - beg);case '\\':    chars[end++]=getEscaped();  pos++;break;case ' ':int cur=end;pos++;chars[end++]=' ';for (; pos < chars.length && chars[pos] == ' '; pos++) {chars[end++]=' ';}if (pos == chars.length || chars[pos] == ',' || chars[pos] == '+' || chars[pos] == ';') {return new String(chars,beg,cur - beg);}break;default :chars[end++]=chars[pos];pos++;}}}  }
class C{  protected Position computeCenterPosition(Position eyePosition,Vec4 forward,Angle pitch,int altitudeMode){  double height;  Angle latitude=eyePosition.getLatitude();  Angle longitude=eyePosition.getLongitude();  Globe globe=this.wwd.getModel().getGlobe();  if (altitudeMode == WorldWind.CLAMP_TO_GROUND)   height=globe.getElevation(latitude,longitude); else   if (altitudeMode == WorldWind.RELATIVE_TO_GROUND)   height=globe.getElevation(latitude,longitude) + eyePosition.getAltitude(); else   height=eyePosition.getAltitude();  Vec4 eyePoint=globe.computePointFromPosition(new Position(latitude,longitude,height));  Position lookAtPosition;  final double tolerance=0.001;  if (Math.abs(pitch.degrees - 90.0) > tolerance)   lookAtPosition=globe.getIntersectionPosition(new Line(eyePoint,forward)); else   lookAtPosition=globe.computePositionFromPoint(eyePoint);  return lookAtPosition;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  ProcessingInstruction pi;  ProcessingInstruction aNode;  Document ownerDocument;  DocumentType docType;  String system;  String target;  String data;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  pi=aNewDoc.createProcessingInstruction("target1","data1");  aNode=(ProcessingInstruction)doc.importNode(pi,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  target=aNode.getTarget();  assertEquals("piTarget","target1",target);  data=aNode.getData();  assertEquals("piData","data1",data);}  }
class C{  public static void idActivityChainTypes(String population,String filename){  LOG.info("Checking for activity chain types...");  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationReader pr=new PopulationReader(sc);  pr.readFile(population);  Map<String,Integer> map=new TreeMap<>();  for (  Id<Person> pid : sc.getPopulation().getPersons().keySet()) {    Plan plan=sc.getPopulation().getPersons().get(pid).getSelectedPlan();    String chain="";    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        chain+=((Activity)pe).getType();      } else {        chain+="-";      }    }    if (map.containsKey(chain)) {      int oldValue=map.get(chain);      map.put(chain,oldValue + 1);    } else {      map.put(chain,1);    }  }  BufferedWriter bw=IOUtils.getBufferedWriter(filename);  try {    bw.write("chain,occurrences");    bw.newLine();    for (    String s : map.keySet()) {      bw.write(String.format("%s,%d\n",s,map.get(s)));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }  LOG.info("Done");}  }
class C{  public void clear(){  filesets.clear();}  }
class C{  public void registerInput(String varName,DataFrame df) throws DMLRuntimeException {  registerInput(varName,df,false);}  }
class C{  public boolean is_superset_of(lalr_item_set other) throws internal_error {  not_null(other);  return other.is_subset_of(this);}  }
class C{  public String toString(){  return getName() + "{" + source+ " min="+ minimum+ " pref="+ preferred+ " max="+ maximum+ "}";}  }
class C{  protected void clearOutEvents(){}  }
class C{  public Builder idempotent(boolean idempotent){  this.idempotent=idempotent;  return this;}  }
class C{  public static void playDead(DistributedSystem sys){  try {    ((Manager)getMembershipManager(sys)).playDead();  } catch (  CancelException e) {  }}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void cleanup() throws IOException {  FileSystem.closeAll();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_11:    return ((InternalEList<?>)getAnonymous_constantDeclaration_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_21:  return ((InternalEList<?>)getAnonymous_constantDeclaration_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean moveDirectorySafe(Path srcDir,Path destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.toAbsolutePath().toString().equals(destDir.toAbsolutePath().toString())) {    LOGGER.debug("try to move folder " + srcDir + " to "+ destDir);    if (!Files.isDirectory(srcDir)) {      throw new FileNotFoundException("Source '" + srcDir + "' does not exist, or is not a directory");    }    if (Files.exists(destDir) && !srcDir.equals(destDir)) {      throw new FileExistsException("Destination '" + destDir + "' already exists");    }    if (!Files.exists(destDir.getParent())) {      try {        Files.createDirectories(destDir.getParent());      } catch (      Exception e) {        LOGGER.error("could not create directory structure " + destDir.getParent());      }    }    boolean rename=false;    for (int i=0; i < 5; i++) {      try {        Files.move(srcDir,destDir,StandardCopyOption.ATOMIC_MOVE);        rename=true;      } catch (      AtomicMoveNotSupportedException a) {        try {          Files.move(srcDir,destDir,StandardCopyOption.REPLACE_EXISTING);          rename=true;        } catch (        IOException e) {        }      }catch (      IOException e) {      }      if (rename) {        break;      }      try {        LOGGER.debug("rename did not work - sleep a while and try again...");        Thread.sleep(1000);      } catch (      InterruptedException e) {        LOGGER.warn("I'm so excited - could not sleep");      }    }    if (!rename) {      LOGGER.error("Failed to rename directory '" + srcDir + " to "+ destDir);      LOGGER.error("Movie renaming aborted.");      MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,srcDir,"message.renamer.failedrename"));      return false;    } else {      LOGGER.info("Successfully moved folder " + srcDir + " to "+ destDir);      return true;    }  }  return true;}  }
class C{  public static String buildUiResourceUriPrefixPath(Class<? extends Service> klass){  return UriUtils.buildUriPath(ServiceUriPaths.UI_RESOURCES,buildServicePath(klass));}  }
class C{  public List<GitlabBranch> listBranches(String applicationName){  logger.info("GitlabService : listBranches " + applicationName);  if (gitlabToken == null || gitlabToken.trim().length() == 0) {    logger.warn("Cannot use this feature because no token for GitLab");    return new ArrayList<>();  }  if (gitlabAPI == null || gitlabAPI.trim().length() == 0) {    logger.warn("Cannot use this feature because no URL given for GitLab API");    return new ArrayList<>();  }  try {    GitlabAPI api=GitlabAPI.connect(gitlabAPI,gitlabToken,TokenType.PRIVATE_TOKEN,AuthMethod.URL_PARAMETER);    List<GitlabProject> projects=api.getProjects();    for (    GitlabProject project : projects) {      if (project.getName().equals(applicationName)) {        return api.getBranches(project);      }    }    return new ArrayList<>();  } catch (  Exception e) {    logger.error(applicationName,e);    return new ArrayList<>();  }}  }
class C{  private void findClasses(String packageName,Set<String> classNames,Set<String> subpackageNames){  String packagePrefix=packageName + '.';  String pathPrefix=packagePrefix.replace('.','/');  for (  String entryName : classPath) {    File classPathEntry=new File(entryName);    if (classPathEntry.exists()) {      try {        if (entryName.endsWith(".apk")) {          findClassesInApk(entryName,packageName,classNames,subpackageNames);        } else {          for (          String apkPath : apkPaths) {            File file=new File(apkPath);            scanForApkFiles(file,packageName,classNames,subpackageNames);          }        }      } catch (      IOException e) {        throw new AssertionError("Can't read classpath entry " + entryName + ": "+ e.getMessage());      }    }  }}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances kernel...");  if (m_Kernel instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  public void initialize(int keysize,SecureRandom random){}  }
class C{  public Element writeColor(Element parent,Object o,String name) throws Exception {  Element node;  Color color;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  color=(Color)o;  node=addElement(parent,name,color.getClass().getName(),false);  writeIntToXML(node,color.getRed(),VAL_RED);  writeIntToXML(node,color.getGreen(),VAL_GREEN);  writeIntToXML(node,color.getBlue(),VAL_BLUE);  return node;}  }
class C{  public void showLengthHistograms(boolean show){  mShowLengthHistograms=show;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter scores: (negative number signifies end): ");  int[] scores=new int[100];  int num;  int numberOfScores;  int average;  numberOfScores=average=0;  for (int i=0; i < 100; i++) {    num=input.nextInt();    if (num < 0)     break;    scores[i]=num;    average+=num;    numberOfScores++;  }  average/=numberOfScores;  int aboveOrEqual;  int below;  aboveOrEqual=below=0;  for (int i=0; i < numberOfScores; i++) {    if (scores[i] >= average)     aboveOrEqual++; else     below++;  }  System.out.println("\nAverage of scores: " + average);  System.out.println("Number of scores above or equal to average: " + aboveOrEqual);  System.out.println("Number of scores below average: " + below);}  }
class C{  private static void addDigest(MessageDigest digest,String string){  if (string == null)   return;  int len=string.length();  for (int i=0; i < len; i++) {    int ch=string.charAt(i);    if (ch < 0x80)     digest.update((byte)ch); else     if (ch < 0x800) {      digest.update((byte)(0xc0 + (ch >> 6)));      digest.update((byte)(0x80 + (ch & 0x3f)));    } else {      digest.update((byte)(0xe0 + (ch >> 12)));      digest.update((byte)(0x80 + ((ch >> 6) & 0x3f)));      digest.update((byte)(0x80 + (ch & 0x3f)));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.331 -0500",hash_original_method="B960582E2C1A3651AC20223DA8436091",hash_generated_method="90D760E4C8F665F8BC5239D7CE47F7BE") public boolean isAltitudeRequired(){  return mAltitudeRequired;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof CryptoPermission)) {    return false;  }  return all_allowed;}  }
class C{  public CommandlineParser(final String text){  ci=new StringCharacterIterator(text);}  }
class C{  public static Data loadFromNBT(final NBTTagCompound nbt){  final Data data=new Data();  if (nbt != null) {    data.readFromNBT(nbt);  }  return data;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_PERIOD___TRACE_PERIOD_1:    setTrace_period_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapnumberofnodes.class,args);}  }
class C{  public void onLowMemory(){  mCachedTiles.onLowMemory();}  }
class C{  @Inline @Unpreemptible public static Object allocateArray(int numElements,int logElementSize,int headerSize,TIB tib,int allocator,int align,int offset,int site){  int elemBytes=numElements << logElementSize;  if ((elemBytes >>> logElementSize) != numElements) {    throwLargeArrayOutOfMemoryError();  }  int size=elemBytes + headerSize;  return allocateArrayInternal(numElements,size,tib,allocator,align,offset,site);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s != null && s.hasAnyImages()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public ZipParser(){}  }
class C{  public void clear(){  context.getBindings(ENGINE_SCOPE).clear();}  }
class C{  private String buildJobTriggerName(String fileBasename){  String jobTriggerName=JOB_INITIALIZATION_PLUGIN_NAME + '_' + getName()+ '_'+ fileBasename.replace('.','_');  if (jobTriggerName.length() > MAX_JOB_TRIGGER_NAME_LEN) {    jobTriggerName=jobTriggerName.substring(0,MAX_JOB_TRIGGER_NAME_LEN);  }  int currentIndex=1;  while (jobTriggerNameSet.add(jobTriggerName) == false) {    if (currentIndex > 1) {      jobTriggerName=jobTriggerName.substring(0,jobTriggerName.lastIndexOf('_'));    }    String numericSuffix="_" + currentIndex++;    if (jobTriggerName.length() > (MAX_JOB_TRIGGER_NAME_LEN - numericSuffix.length())) {      jobTriggerName=jobTriggerName.substring(0,(MAX_JOB_TRIGGER_NAME_LEN - numericSuffix.length()));    }    jobTriggerName+=numericSuffix;  }  return jobTriggerName;}  }
class C{  public static boolean canMoveDown(JList list){  boolean result;  int[] indices;  result=false;  indices=list.getSelectedIndices();  if (indices.length > 0) {    if (indices[indices.length - 1] < list.getModel().getSize() - 1)     result=true;  }  return result;}  }
class C{  public RegisterSpecSet(int maxSize){  super(maxSize != 0);  this.specs=new RegisterSpec[maxSize];  this.size=0;}  }
class C{  public static void run(final String cloudStoragePath,final String projectId,final String datasetId,final String tableId,final Reader schemaSource,final long interval) throws IOException, InterruptedException {  Bigquery bigquery=BigQueryServiceFactory.getService();  Job loadJob=loadJob(bigquery,cloudStoragePath,new TableReference().setProjectId(projectId).setDatasetId(datasetId).setTableId(tableId),BigQueryUtils.loadSchema(schemaSource));  Bigquery.Jobs.Get getJob=bigquery.jobs().get(loadJob.getJobReference().getProjectId(),loadJob.getJobReference().getJobId());  BigQueryUtils.pollJob(getJob,interval);  System.out.println("Load is Done!");}  }
class C{  static void closeStream(Closeable stream){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(LOG_TAG,"Could not close stream",e);    }  }}  }
class C{  public String determineEventTypeBasedOnOperationStatusValues(Hashtable<String,String> notification,Boolean isBlockRelatedEvent,String[] descs,String[] codes){  String evtType=null;  if (isInstanceModificationEvent(notification)) {    if (isBlockRelatedEvent) {      evtType=determineEventTypeBasedOnOperationalStatus(notification,descs,codes,OperationTypeEnum.OPERATE_BLOCK_VOLUME.getEvType(true),OperationTypeEnum.OPERATE_BLOCK_VOLUME.getEvType(false),_monitoringPropertiesLoader.getBlockEventActiveOSDescs(),_monitoringPropertiesLoader.getBlockEventActiveOSCodes());    } else {      evtType=determineEventTypeBasedOnOperationalStatus(notification,descs,codes,OperationTypeEnum.OPERATE_FILE_SYSTEM.getEvType(true),OperationTypeEnum.OPERATE_FILE_SYSTEM.getEvType(false),_monitoringPropertiesLoader.getFileSystemEventActiveOSDescs(),_monitoringPropertiesLoader.getFileSystemEventActiveOSCodes());    }    logMessage("Event type found based on Operational Status Values of Indication provided is - {} ",new Object[]{evtType});  } else {    logMessage("Not an Instance Modification Event Type Indication. No Algorithemic execution required to determine Event Type based on Operational Status Values Provided",new Object[]{});  }  return evtType;}  }
class C{  public void start(){  checkDebug();  this.agentConfig.validate();  if (mBeanServer == null) {    mBeanServer=MBeanUtil.start();  }  try {    startHttpAdaptor();  } catch (  StartupException e) {    AlertAppender.getInstance().shuttingDown();    LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);    LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);    throw e;  }  try {    startRMIConnectorServer();  } catch (  StartupException e) {    stopHttpAdaptor();    AlertAppender.getInstance().shuttingDown();    LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);    LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);    throw e;  }  try {    startSnmpAdaptor();  } catch (  StartupException e) {    stopRMIConnectorServer();    stopHttpAdaptor();    AlertAppender.getInstance().shuttingDown();    LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);    LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);    throw e;  }  if (this.agentConfig.getAutoConnect()) {    try {      connectToSystem();    } catch (    AdminException ex) {      logger.error(LocalizedMessage.create(LocalizedStrings.AgentImpl_AUTO_CONNECT_FAILED__0,ex.getMessage()));      this.stop();      throw new StartupException(ex);    }catch (    MalformedObjectNameException ex) {      StringId autoConnectFailed=LocalizedStrings.AgentImpl_AUTO_CONNECT_FAILED__0;      logger.error(LocalizedMessage.create(autoConnectFailed,ex.getMessage()));      this.stop();      throw new StartupException(new AdminException(autoConnectFailed.toLocalizedString(new Object[]{ex.getMessage()}),ex));    }  }  logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_GEMFIRE_JMX_AGENT_IS_RUNNING));  LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.MAIN);  if (memberInfoWithStatsMBean == null) {    initializeHelperMbean();  }}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){  AsyncHttpClient.log.w(LOG_TAG,"onSuccess(int, Header[], JSONArray) was not overriden, but callback was received");}  }
class C{  public OsIndicator(String outputName) throws jmri.JmriException {  this.output=outputName;  String nameP=namePrefix + output;  Logix l=InstanceManager.getDefault(jmri.LogixManager.class).getLogix(nameP);  if (l == null) {    throw new jmri.JmriException("Logix does not exist");  }  Conditional c=InstanceManager.getDefault(jmri.ConditionalManager.class).getConditional(l,nameP + "C1");  if (c == null) {    throw new jmri.JmriException("Conditional does not exist");  }  ArrayList<ConditionalVariable> variableList=c.getCopyOfStateVariables();  ConditionalVariable variable=variableList.get(0);  osSensor=variable.getName();  if (variableList.size() > 0) {    variable=variableList.get(1);    lock=variable.getName();  }}  }
class C{  public static boolean isPalindromicPrime(int num){  return PrimeNumberMethod.isPrime(num) && Exercise_06_03.isPalindrome(num);}  }
class C{  public boolean checkPattern(List<LockPatternView.Cell> pattern){  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"r");    final byte[] stored=new byte[(int)raf.length()];    int got=raf.read(stored,0,stored.length);    raf.close();    if (got <= 0) {      return true;    }    return Arrays.equals(stored,ShortLockPatternUtils.patternToHash(pattern));  } catch (  FileNotFoundException fnfe) {    return true;  }catch (  IOException ioe) {    return true;  }}  }
class C{  public AboutAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public CacheKeyConfiguration(String typeName,String affKeyFieldName){  this.typeName=typeName;  this.affKeyFieldName=affKeyFieldName;}  }
class C{  public ExponentialPower(double tau,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(tau);}  }
class C{  public static boolean saveDSAPublicKeyFile(String uname,DSAPublicKey pubKey){  byte[] keyBytes=pubKey.getEncoded();  String filename=ClientConfig.getUserKeysPath() + "/" + uname+ ".pub";  File f=new File(filename);  f.getParentFile().mkdirs();  FileOutputStream fos=null;  boolean success=false;  try {    fos=new FileOutputStream(filename);    fos.write(keyBytes);    success=true;  } catch (  IOException e) {    Logging.error(e.getMessage());  } finally {    CommonMessaging.close(fos);  }  return success;}  }
class C{  public static ProgressDialog showProgressDialog(Context context,String title,String message,OnCancelListener cancelListener){  ProgressDialog progressDialog=ProgressDialog.show(context,title,message,true);  progressDialog.setCancelable(false);  progressDialog.setOnCancelListener(cancelListener);  return progressDialog;}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.902 -0500",hash_original_method="EB9FEA0B2CEADB65FF0921C2B52A13F4",hash_generated_method="4BBF30831C3143B01679ADF8D444356C") public final InputStream open(String fileName,int accessMode) throws IOException {synchronized (this) {    if (!mOpen) {      throw new RuntimeException("Assetmanager has been closed");    }    int asset=openAsset(fileName,accessMode);    if (asset != 0) {      AssetInputStream res=new AssetInputStream(asset);      incRefsLocked(res.hashCode());      return res;    }  }  throw new FileNotFoundException("Asset file: " + fileName);}  }
class C{  private void buildDevice(LicenseInfoExt licenseInfo,Device device) throws LocalRepositoryException {  if (licenseInfo != null) {    LocalRepository localRepository=LocalRepository.getInstance();    String nodeId=_coordinator.getPropertyInfo().getProperties().get("node_id");    String node;    if (nodeId != null) {      node=nodeId.substring(4);    } else {      node=CallHomeConstants.STANDALONE;    }    device.setSerialNumber(licenseInfo.getProductId() + "-" + node);    device.setModelName(getBaseModelId(licenseInfo.getLicenseType().toString()) + MODEL_NAME_SUFFIX);    device.setIpAddress(_networkIpAddress);  }}  }
class C{  @Override public String toString(){  return "CUDA_RESOURCE_VIEW_DESC[" + createString(",") + "]";}  }
class C{  public final int hashCode(){  int h=0;  for (int i=0; i < _length; ) {    h=31 * h + charAt(i++);  }  return h;}  }
class C{  public <T>ObjectArray<T> grow(ObjectArray<T> array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,OBJECT_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_OBJECT_REF);  return resize(array,newSize);}  }
class C{  static Varargs find(Varargs args){  return str_find_aux(args,true);}  }
class C{  public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  throw new IllegalStateException("unwrap: QOP has neither integrity nor privacy>");}  }
class C{  public String write(Integer indent){  return write(indent,null);}  }
class C{  public ViewEdge createEdge(final ViewNode source,final ViewNode target,final EdgeType edgeType){  Preconditions.checkNotNull(source,"Error: Source argument can not be null");  Preconditions.checkNotNull(target,"Error: Target argument can not be null");  Preconditions.checkNotNull(edgeType,"Error: Edge type argument can not be null");  final CNaviViewEdge newEdge=naviView.getContent().createEdge(source.getNative(),target.getNative(),edgeType.getNative());  return cachedEdges.get(newEdge);}  }
class C{  public OneRRule newNumericRule(Attribute attr,Instances data,int[] missingValueCounts) throws Exception {  data=new Instances(data);  int lastInstance=data.numInstances();  data.sort(attr);  while (lastInstance > 0 && data.instance(lastInstance - 1).isMissing(attr)) {    lastInstance--;    missingValueCounts[(int)data.instance(lastInstance).classValue()]++;  }  if (lastInstance == 0) {    throw new Exception("Only missing values in the training data!");  }  double lastValue=0;  LinkedList<int[]> distributions=new LinkedList<int[]>();  LinkedList<Double> values=new LinkedList<Double>();  int[] distribution=null;  for (int i=0; i < lastInstance; i++) {    if ((i == 0) || (data.instance(i).value(attr) > lastValue)) {      if (i != 0) {        values.add((lastValue + data.instance(i).value(attr)) / 2.0);      }      lastValue=data.instance(i).value(attr);      distribution=new int[data.numClasses()];      distributions.add(distribution);    }    distribution[(int)data.instance(i).classValue()]++;  }  values.add(Double.MAX_VALUE);  ListIterator<int[]> it=distributions.listIterator();  ListIterator<Double> itVals=values.listIterator();  int[] oldDist=null;  while (it.hasNext()) {    int[] newDist=it.next();    itVals.next();    if ((oldDist != null) && ((Utils.maxIndex(newDist) == Utils.maxIndex(oldDist)) || (oldDist[Utils.maxIndex(oldDist)] < m_minBucketSize))) {      for (int j=0; j < oldDist.length; j++) {        newDist[j]+=oldDist[j];      }      it.previous();      it.previous();      it.remove();      it.next();      itVals.previous();      itVals.previous();      itVals.remove();      itVals.next();    }    oldDist=newDist;  }  int numCorrect=0;  it=distributions.listIterator();  itVals=values.listIterator();  oldDist=null;  while (it.hasNext()) {    int[] newDist=it.next();    itVals.next();    numCorrect+=newDist[Utils.maxIndex(newDist)];    if ((oldDist != null) && (Utils.maxIndex(newDist) == Utils.maxIndex(oldDist))) {      for (int j=0; j < oldDist.length; j++) {        newDist[j]+=oldDist[j];      }      it.previous();      it.previous();      it.remove();      it.next();      itVals.previous();      itVals.previous();      itVals.remove();      itVals.next();    }    oldDist=newDist;  }  OneRRule r=new OneRRule(data,attr,distributions.size());  r.m_correct=numCorrect;  it=distributions.listIterator();  itVals=values.listIterator();  int v=0;  while (it.hasNext()) {    r.m_classifications[v]=Utils.maxIndex(it.next());    double splitPoint=itVals.next();    if (itVals.hasNext()) {      r.m_breakpoints[v]=splitPoint;    }    v++;  }  return r;}  }
class C{  public void processMouseEvent(final MouseEvent event){  event.getComponent().dispatchEvent(event);}  }
class C{  public Graph(In in){  this(in.readInt());  int E=in.readInt();  if (E < 0)   throw new IllegalArgumentException("Number of edges must be nonnegative");  for (int i=0; i < E; i++) {    int v=in.readInt();    int w=in.readInt();    addEdge(v,w);  }}  }
class C{  @Override public int hashCode(){  return this.weightMap.hashCode();}  }
class C{  public synchronized UDAudio stopAndRelease(){  return stop().release();}  }
class C{  public TFloatIntHashMap(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public boolean isLastDigit(){  return isDigit(str.charAt(str.length() - 1));}  }
class C{  protected int evaluateSpacing(float up,float down,float left,float right){  int ret=SHOW_TENS;  if (!showOneAndFiveLines && !showBelowOneLines) {    return ret;  }  float nsdiff=up - down;  float ewdiff;  if ((left > 0 && right < 0) || (left > right) || (Math.abs(left - right) < 1)) {    ewdiff=(180.0f - left) + (right + 180.0f);  } else {    ewdiff=right - left;  }  float diff=(nsdiff < ewdiff) ? nsdiff : ewdiff;  if ((diff / 10) <= (float)threshold)   ret=SHOW_FIVES;  if ((diff / 5) <= (float)threshold)   ret=SHOW_ONES;  return ret;}  }
class C{  public void validateBusinessObjectDataStorageFilesCreateResponse(String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedPartitionValue,List<String> expectedSubPartitionValues,Integer expectedBusinessObjectDataVersion,String expectedStorageName,List<StorageFile> expectedStorageFiles,BusinessObjectDataStorageFilesCreateResponse actualResponse){  assertNotNull(actualResponse);  assertEquals(expectedNamespace,actualResponse.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualResponse.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualResponse.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualResponse.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,actualResponse.getBusinessObjectFormatVersion());  assertEquals(expectedPartitionValue,actualResponse.getPartitionValue());  assertEquals(expectedSubPartitionValues,actualResponse.getSubPartitionValues());  assertEquals(expectedBusinessObjectDataVersion,actualResponse.getBusinessObjectDataVersion());  assertEquals(expectedStorageName,actualResponse.getStorageName());  assertEquals(expectedStorageFiles,actualResponse.getStorageFiles());}  }
class C{  public static RobotParser create(final RobotProjectHolder projectHolder){  return new RobotParser(projectHolder,new RobotParserConfig());}  }
class C{  @Override public boolean implies(Permission p){  return p instanceof AdminPermission;}  }
class C{  public static IJavaElement findTypeContainer(IJavaProject jproject,String typeContainerName) throws JavaModelException {  IJavaElement result=jproject.findType(typeContainerName);  if (result == null) {    IPath path=new Path(typeContainerName.replace('.','/'));    result=jproject.findElement(path);    if (!(result instanceof IPackageFragment)) {      result=null;    }  }  return result;}  }
class C{  public void update(){  if (elementMap == null) {    return;  }  if (apiMap == null || apiMap.isEmpty()) {    elementMap.clear();    return;  }  Iterator<String> elementIterator=elementMap.keySet().iterator();  while (elementIterator.hasNext()) {    String elementName=elementIterator.next();    boolean found=false;    for (    ApiDescriptor apiResource : apiMap.values()) {      if ((apiResource.getRequestElement() != null && apiResource.getRequestElement().equals(elementName)) || (apiResource.getResponseElement() != null && apiResource.getResponseElement().equals(elementName))) {        found=true;      }    }    if (!found) {      elementIterator.remove();    }  }}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  private void addVoPayment(PaymentInfoType type){  VOPaymentType voPaymentType=new VOPaymentType();  voPaymentType.setPaymentTypeId(type.name());  getSelectedOrganization().getPaymentTypes().add(voPaymentType);}  }
class C{  public TDoubleLongIterator(TDoubleLongHashMap map){  super(map);  _map=map;}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    MInOut inout=(MInOut)getM_InOut();    if (!MInOut.DOCSTATUS_Voided.equals(inout.getDocStatus()) && !MInOut.DOCSTATUS_Reversed.equals(inout.getDocStatus())) {      throw new AdempiereException("@M_InOut_ID@ @DocStatus@<>VO");    }    for (    MInOutLineConfirm confirmLine : getLines(true)) {      confirmLine.setTargetQty(Env.ZERO);      confirmLine.setConfirmedQty(Env.ZERO);      confirmLine.setScrappedQty(Env.ZERO);      confirmLine.setDifferenceQty(Env.ZERO);      confirmLine.setProcessed(true);      confirmLine.saveEx();    }    setIsCancelled(true);  } else {    return reverseCorrectIt();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void sendMessage(String[] recipients,String sender,ClassPathResource resource,String bodyText,String subject,String attachmentName) throws MessagingException {  MimeMessage message=((JavaMailSenderImpl)mailSender).createMimeMessage();  MimeMessageHelper helper=new MimeMessageHelper(message,true);  helper.setTo(recipients);  helper.setFrom(sender);  helper.setText(bodyText);  helper.setSubject(subject);  helper.addAttachment(attachmentName,resource);  ((JavaMailSenderImpl)mailSender).send(message);}  }
class C{  public Debug debug(){  return new Debug(vaultConfig);}  }
class C{  public PositionIncrementAttributeImpl(){}  }
class C{  public StatechartScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {  correctlyInitialized();  if (node.m_NodesRectBounds == null) {    node.m_NodesRectBounds=new double[2][node.m_NodeRanges.length];    for (int i=0; i < node.m_NodeRanges.length; i++) {      node.m_NodesRectBounds[MIN][i]=node.m_NodeRanges[i][MIN];      node.m_NodesRectBounds[MAX][i]=node.m_NodeRanges[i][MAX];    }  }  double maxRectWidth=Double.NEGATIVE_INFINITY, maxPtWidth=Double.NEGATIVE_INFINITY, tempval;  int splitDim=-1, classIdx=m_Instances.classIndex();  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {    if (i == classIdx)     continue;    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];    if (m_NormalizeNodeWidth) {      tempval=tempval / universe[i][WIDTH];    }    if (tempval > maxRectWidth && node.m_NodeRanges[i][WIDTH] > 0.0)     maxRectWidth=tempval;  }  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {    if (i == classIdx)     continue;    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];    if (m_NormalizeNodeWidth) {      tempval=tempval / universe[i][WIDTH];    }    if (tempval >= maxRectWidth * (1 - ERR) && node.m_NodeRanges[i][WIDTH] > 0.0) {      if (node.m_NodeRanges[i][WIDTH] > maxPtWidth) {        maxPtWidth=node.m_NodeRanges[i][WIDTH];        if (m_NormalizeNodeWidth)         maxPtWidth=maxPtWidth / universe[i][WIDTH];        splitDim=i;      }    }  }  double splitVal=node.m_NodesRectBounds[MIN][splitDim] + (node.m_NodesRectBounds[MAX][splitDim] - node.m_NodesRectBounds[MIN][splitDim]) * 0.5;  if (splitVal < node.m_NodeRanges[splitDim][MIN])   splitVal=node.m_NodeRanges[splitDim][MIN]; else   if (splitVal >= node.m_NodeRanges[splitDim][MAX])   splitVal=node.m_NodeRanges[splitDim][MAX] - node.m_NodeRanges[splitDim][WIDTH] * 0.001;  int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal);  if (rightStart == node.m_Start || rightStart > node.m_End) {    if (rightStart == node.m_Start)     throw new Exception("Left child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code."); else     throw new Exception("Right child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code.");  }  node.m_SplitDim=splitDim;  node.m_SplitValue=splitVal;  double[][] widths=new double[2][node.m_NodesRectBounds[0].length];  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);  widths[MAX][splitDim]=splitVal;  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1),widths);  widths=new double[2][node.m_NodesRectBounds[0].length];  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);  widths[MIN][splitDim]=splitVal;  node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End),widths);}  }
class C{  public static void enable(){  ExecutionTracer tracer=ExecutionTracer.getExecutionTracer();  tracer.disabled=false;}  }
class C{  public static Intent makeIntent(Uri url){  return new Intent(ACTION_DOWNLOAD_IMAGE,url);}  }
class C{  @NonNull public Parcelable onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION,mFirstAnimatedPosition);  bundle.putInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION,mLastAnimatedPosition);  bundle.putBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE,mShouldAnimate);  return bundle;}  }
class C{  private KeyStore loadKeyStore(String keyStoreType,String storeFilePath,char[] keyStorePwd) throws SSLException {  InputStream input=null;  try {    KeyStore keyStore=KeyStore.getInstance(keyStoreType);    input=openFileInputStream(storeFilePath);    keyStore.load(input,keyStorePwd);    return keyStore;  } catch (  GeneralSecurityException e) {    throw new SSLException("Failed to initialize key store (security exception occurred) [type=" + keyStoreType + ", keyStorePath="+ storeFilePath+ ']',e);  }catch (  FileNotFoundException e) {    throw new SSLException("Failed to initialize key store (key store file was not found): [path=" + storeFilePath + ", msg="+ e.getMessage()+ ']');  }catch (  IOException e) {    throw new SSLException("Failed to initialize key store (I/O error occurred): " + storeFilePath,e);  } finally {    if (input != null) {      try {        input.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public SpatialSparseVertex addVertex(SpatialSparseGraph graph,Point point){  SpatialSparseVertex vertex=((SpatialSparseGraphFactory)getFactory()).createVertex(point);  if (insertVertex(graph,vertex))   return vertex; else   return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.166 -0500",hash_original_method="9A4EA06F4CB88B6269FED18A769E865A",hash_generated_method="02773E578A171A0923FD2ACFD6F04C35") public void halt(int code){  nativeExit(code,false);}  }
class C{  public static int remainder(int p,int q){  int result=p;  if (q == 0) {    System.err.println("Error: to be divided by 0");    return 0;  }  while (degree(result) >= degree(q)) {    result^=q << (degree(result) - degree(q));  }  return result;}  }
class C{  private String readText(){  BufferedReader br=null;  try {    StringBuffer text=new StringBuffer();    br=new BufferedReader(new FileReader(logfile.getFile()));    while (br.ready()) {      text.append(br.readLine());      text.append("\n");    }    return (text.toString());  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  } finally {    try {      if (br != null) {        br.close();      }    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }  }  return ("");}  }
class C{  @Override public void generateXml(XmlWriter xw,OutputProperties outProps,OpenSearchDescriptionDocument source) throws IOException {  source.generate(xw);}  }
class C{  public static String convertUrl(String baseUrl,Verb httpVerb,Map<String,String> params){  try {    StringBuilder urlBuilder=new StringBuilder(httpVerb.name()).append(SEPARATOR).append(URLEncoder.encode(baseUrl,UTF_8)).append(SEPARATOR);    StringBuilder paramsBuilder=new StringBuilder();    Set<Map.Entry<String,String>> values=params.entrySet();    for (    Map.Entry<String,String> param : values) {      paramsBuilder.append(param.getKey()).append(EQUAL).append(param.getValue()).append(SEPARATOR);    }    String paramsEncoded=URLEncoder.encode(paramsBuilder.deleteCharAt(paramsBuilder.lastIndexOf(SEPARATOR)).toString(),UTF_8);    return urlBuilder.append(paramsEncoded).toString();  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  protected void newLine(){  Rectangle part=m_content;  if (m_area == AREA_HEADER)   part=m_header; else   if (m_area == AREA_FOOTER)   part=m_footer;  int xPos=part.x;  if (m_tempNLPositon != 0)   xPos=m_tempNLPositon;  if (isYspaceFor(m_maxHeightSinceNewLine[m_area])) {    m_position[m_area].setLocation(xPos,m_position[m_area].y + m_maxHeightSinceNewLine[m_area]);    log.finest("Page=" + m_pageNo + " ["+ m_area+ "] "+ m_position[m_area].x+ "/"+ m_position[m_area].y);  } else   if (m_area == AREA_CONTENT) {    log.finest("Not enough Y space " + m_lastHeight[m_area] + " - remaining "+ getYspace()+ " - Area="+ m_area);    newPage(true,false);    log.finest("Page=" + m_pageNo + " ["+ m_area+ "] "+ m_position[m_area].x+ "/"+ m_position[m_area].y);  } else {    m_position[m_area].setLocation(part.x,m_position[m_area].y + m_maxHeightSinceNewLine[m_area]);    log.log(Level.SEVERE,"Outside of Area(" + m_area + "): "+ m_position[m_area]);  }  m_maxHeightSinceNewLine[m_area]=0f;}  }
class C{  private Builder(org.apache.nutch.storage.ParseStatus other){  super(org.apache.nutch.storage.ParseStatus.SCHEMA$);  if (isValidValue(fields()[0],other.majorCode)) {    this.majorCode=(java.lang.Integer)data().deepCopy(fields()[0].schema(),other.majorCode);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.minorCode)) {    this.minorCode=(java.lang.Integer)data().deepCopy(fields()[1].schema(),other.minorCode);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.args)) {    this.args=(java.util.List<java.lang.CharSequence>)data().deepCopy(fields()[2].schema(),other.args);    fieldSetFlags()[2]=true;  }}  }
class C{  public FieldDoc(int doc,float score,Object[] fields,int shardIndex){  super(doc,score,shardIndex);  this.fields=fields;}  }
class C{  public int quantityDroppedWithBonus(int fortune,@Nonnull Random random){  return 1 + random.nextInt(fortune * 2 + 1);}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public static void initDefaultFlowMod(OFFlowMod.Builder fmb,String entryName){  fmb.setIdleTimeout(INFINITE_TIMEOUT).setHardTimeout(INFINITE_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setOutPort(OFPort.ANY).setCookie(computeEntryCookie(0,entryName)).setPriority(Integer.MAX_VALUE);  return;}  }
class C{  @TransactionAttribute(TransactionAttributeType.MANDATORY) public void deleteOrphanedTags(){  dm.createNamedQuery("Tag.deleteOrphanedTags").executeUpdate();}  }
class C{  public void updateXPoints(){  this.propagateEvents=false;  for (int s=0; s < this.data.size(); s++) {    updateXPoints((XYSeries)this.data.get(s));  }  if (this.autoPrune) {    prune();  }  this.propagateEvents=true;}  }
class C{  public static Checker check(Context context){  return new Checker(context);}  }
class C{  public static String addMimeTypePrefixToBase64Data(String base64,String mimeType){  assert (mimeType != null && mimeType != "") : "mimeType must not be null";  String plainBase64=ensurePlainBase64(base64);  return "data:" + mimeType + ";base64,"+ plainBase64;}  }
class C{  public void test_loadLjava_security_KeyStoreLoadStoreParameter() throws Exception {  KeyStore.getInstance(KeyStore.getDefaultType()).load(null);}  }
class C{  public static void main(String[] args){  TestRunner.run(FilterTest.class);}  }
class C{  public static boolean mkdirs(String path){  File f=new File(path);  return f.mkdirs();}  }
class C{  public boolean isWhitePieceJailOnTop(){  return isWhitePieceJailOnTop;}  }
class C{  public void handleElementAdded(CompositeGraphicsNode gn,Node parent,Element childElt){  GVTBuilder builder=ctx.getGVTBuilder();  GraphicsNode childNode=builder.build(ctx,childElt);  if (childNode == null) {    return;  }  int idx=-1;  for (Node ps=childElt.getPreviousSibling(); ps != null; ps=ps.getPreviousSibling()) {    if (ps.getNodeType() != Node.ELEMENT_NODE)     continue;    Element pse=(Element)ps;    GraphicsNode psgn=ctx.getGraphicsNode(pse);    while ((psgn != null) && (psgn.getParent() != gn)) {      psgn=psgn.getParent();    }    if (psgn == null)     continue;    idx=gn.indexOf(psgn);    if (idx == -1)     continue;    break;  }  idx++;  gn.add(idx,childNode);}  }
class C{  static void existsInNetwork(final Network network){  log.info("Looking whether all links for road closure exist in network ...");  if (linksToRemove == null) {    log.info("No links defined! Exit.");    return;  }  Map<Id<Link>,? extends Link> networkLinks=network.getLinks();  Iterator<Id<Link>> linkIterator=linksToRemove.iterator();  while (linkIterator.hasNext()) {    Id<Link> id=linkIterator.next();    if (networkLinks.containsKey(id))     log.info("Link found in network: " + id.toString()); else     log.warn("Link not found in network: " + id.toString());  }}  }
class C{  public static double euclideanNormSquaredWithAbort(double[] x1,double[] x2,double limit){  double distance=0.0;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    distance+=difference * difference;    if (distance > limit) {      return Double.POSITIVE_INFINITY;    }  }  return distance;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.174 -0400",hash_original_method="7D0802AE058B69373C9211777848E4E9",hash_generated_method="F281A6306CBBA78FDB94CB7DC874597E") public int hashCode(){  if (this.affineX != null) {    return affineX.hashCode() * 31 + affineY.hashCode();  }  return 11;}  }
class C{  @SuppressWarnings("rawtypes") private void initializeRegionSubRegions(SystemMemberCacheJmxImpl cache,RegionSubRegionSnapshot regionSnapshot) throws MalformedObjectNameException, AdminException {  String fullPath=regionSnapshot.getFullPath();  if (!fullPath.equals(PLACE_HOLDER_ROOT_REGION)) {    fullPath=fullPath.substring(PLACE_HOLDER_ROOT_REGION.length() - 1);    cache.manageRegion(fullPath);  }  Set subRegionSnapshots=regionSnapshot.getSubRegionSnapshots();  for (Iterator iterator=subRegionSnapshots.iterator(); iterator.hasNext(); ) {    RegionSubRegionSnapshot subRegion=(RegionSubRegionSnapshot)iterator.next();    try {      initializeRegionSubRegions(cache,subRegion);    } catch (    AdminException e) {      logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INTIALIZING_0_CONTINUING,subRegion.getFullPath()),e);    }  }}  }
class C{  public SootMethod findSupportedMethod(String sig){  return all_sys_methods.getMethod(sig);}  }
class C{  private byte[] firstToken() throws IOException {  negotiator=null;  if (cache != null) {synchronized (cache) {      negotiator=cache.get(getHost());      if (negotiator != null) {        cache.remove(getHost());      }    }  }  if (negotiator == null) {    negotiator=Negotiator.getNegotiator(hci);    if (negotiator == null) {      IOException ioe=new IOException("Cannot initialize Negotiator");      throw ioe;    }  }  return negotiator.firstToken();}  }
class C{  private Locale(boolean unused,String lowerCaseLanguageCode,String upperCaseCountryCode){  this.languageCode=lowerCaseLanguageCode;  this.countryCode=upperCaseCountryCode;  this.variantCode="";}  }
class C{  public void collectDependencies(String className) throws IOException {  CharSequence src=sources.get(className);  List<String> importedClassesNames=getDynamicallyLoadedImports(src);  String currentPackageName=extractPackageFromClassname(className);  importedClassesNames.addAll(sourceProvider.getAllClassesFromPackage(currentPackageName));  for (  String importedClassName : importedClassesNames) {    if (!sources.containsKey(importedClassName)) {      addSource(importedClassName);      addDependency(className,importedClassName);      collectDependencies(importedClassName);    } else {      addDependency(className,importedClassName);    }  }}  }
class C{  private void putFromOneVm(VM vm,boolean objectFlg){  vm.invoke(putObjectInPartitionRegion(objectFlg));}  }
class C{  public List extendedOperands(){  if (this.extendedOperands == null) {    this.extendedOperands=new ASTNode.NodeList(EXTENDED_OPERANDS_PROPERTY);  }  return this.extendedOperands;}  }
class C{  public DrawerBuilder(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);  getAdapter();}  }
class C{  public static double log2(double a){  return Math.log(a) / log2;}  }
class C{  private boolean isElement(String path) throws Exception {  Expression target=builder.build(path);  Model model=lookup(target);  if (model != null) {    String name=target.getLast();    int index=target.getIndex();    if (model.isElement(name)) {      return true;    }    if (model.isModel(name)) {      Model element=model.lookup(name,index);      if (element.isEmpty()) {        return false;      }      return true;    }  }  return false;}  }
class C{  synchronized public void moveDown(String gcTraceName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  GCTrace gcTrace=findGCTrace(gcTraceName);  ErrorReporting.fatalError(gcTrace != null,gcTraceName + " does not exist in the GC trace set");  int index=indexOf(gcTrace);  assert 0 <= index && index < size();  if (index < (size() - 1)) {    super.remove(gcTrace);    add(index + 1,gcTrace);    listeners.callGCTraceMovedDown(gcTrace);  } else {    ErrorReporting.warning("GC trace " + gcTraceName + " already at highest index.");  }}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  public void closeIfNecessary(){  if (jmdnsInstance != null) {    if (jmdnsSubscriberCount.get() <= 0) {      close();    }  }}  }
class C{  public static boolean demo2(Dproblem Prob){  Dcs A, C;  double b[], x[], resid[], t, tol;  int k, m, n, order, nb, ns, r[], s[], rr[], sprank;  boolean ok;  Dcsd D;  if (Prob == null)   return (false);  A=Prob.A;  C=Prob.C;  b=Prob.b;  x=Prob.x;  resid=Prob.resid;  m=A.m;  n=A.n;  tol=Prob.sym != 0 ? 0.001 : 1;  D=Dcs_dmperm.cs_dmperm(C,1);  if (D == null)   return (false);  nb=D.nb;  r=D.r;  s=D.s;  rr=D.rr;  sprank=rr[3];  for (ns=0, k=0; k < nb; k++) {    if ((r[k + 1] == r[k] + 1) && (s[k + 1] == s[k] + 1)) {      ns++;    }  }  System.out.print(String.format("blocks: %d singletons: %d structural rank: %d\n",nb,ns,sprank));  D=null;  for (order=0; order <= 3; order+=3) {    if (order == 0 && m > 1000)     continue;    System.out.print("QR   ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Dcs_qrsol.cs_qrsol(order,C,x);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  if (m != n || sprank < n)   return (true);  for (order=0; order <= 3; order++) {    if (order == 0 && m > 1000)     continue;    System.out.print("LU   ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Dcs_lusol.cs_lusol(order,C,x,tol);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  if (Prob.sym == 0)   return (true);  for (order=0; order <= 1; order++) {    if (order == 0 && m > 1000)     continue;    System.out.print("Chol ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Dcs_cholsol.cs_cholsol(order,C,x);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  return (true);}  }
class C{  @Override public Void visitEnhancedForLoop(EnhancedForLoopTree node,Void p){  AnnotatedTypeMirror var=atypeFactory.getAnnotatedType(node.getVariable());  AnnotatedTypeMirror iterableType=atypeFactory.getAnnotatedType(node.getExpression());  AnnotatedTypeMirror iteratedType=AnnotatedTypes.getIteratedType(checker.getProcessingEnvironment(),atypeFactory,iterableType);  boolean valid=validateTypeOf(node.getVariable());  if (valid) {    commonAssignmentCheck(var,iteratedType,node.getExpression(),"enhancedfor.type.incompatible");  }  return super.visitEnhancedForLoop(node,p);}  }
class C{  @Override public void init(Bindings bindings){  this.bindings=bindings;  activate();}  }
class C{  protected CsrfTokenRepository csrfTokenRepository(){  HttpSessionCsrfTokenRepository repository=new HttpSessionCsrfTokenRepository();  repository.setHeaderName(LemonCsrfFilter.XSRF_TOKEN_HEADER_NAME);  return repository;}  }
class C{  public String stoplistfile(){  return stoplistfile;}  }
class C{  @SuppressWarnings("unchecked") public java.lang.Object addToEnvironment(String propName,java.lang.Object propValue) throws NamingException {  if (_env == null) {    _env=new Hashtable<>(7,0.75f);  } else {    _env=(Hashtable<String,java.lang.Object>)_env.clone();  }  return _env.put(propName,propValue);}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  void updateMfgListWithoutTrigger(String mfg){  mMfgList.removeListSelectionListener(mMfgListener);  mMfgList.setSelectedValue(mfg,true);  mMfgList.addListSelectionListener(mMfgListener);}  }
class C{  @Override public byte[] serialize(Object o){  return (byte[])o;}  }
class C{  public static PropertyGroupDesc[] analyzeGroups(String[] allProperties,EventType[] deltaEventTypes,String[] names){  if (deltaEventTypes.length != names.length) {    throw new IllegalArgumentException("Delta event type number and name number of elements don't match");  }  allProperties=copyAndSort(allProperties);  Map<MultiKey<String>,PropertyGroupDesc> result=new LinkedHashMap<MultiKey<String>,PropertyGroupDesc>();  int currentGroupNum=0;  for (int i=0; i < deltaEventTypes.length; i++) {    MultiKey<String> props=getPropertiesContributed(deltaEventTypes[i],allProperties);    if (props.getArray().length == 0) {      log.warn("Event type named '" + names[i] + "' does not contribute (or override) any properties of the revision event type");      continue;    }    PropertyGroupDesc propertyGroup=result.get(props);    Map<EventType,String> typesForGroup;    if (propertyGroup == null) {      typesForGroup=new HashMap<EventType,String>();      propertyGroup=new PropertyGroupDesc(currentGroupNum++,typesForGroup,props.getArray());      result.put(props,propertyGroup);    } else {      typesForGroup=propertyGroup.getTypes();    }    typesForGroup.put(deltaEventTypes[i],names[i]);  }  Collection<PropertyGroupDesc> outColl=result.values();  PropertyGroupDesc[] array=outColl.toArray(new PropertyGroupDesc[outColl.size()]);  if (log.isDebugEnabled()) {    log.debug(".analyzeGroups " + Arrays.toString(array));  }  return array;}  }
class C{  public void addKeywords(String[] keywords,MutableAttributeSet attr){  int i;  for (i=0; i < keywords.length; i++) {    addKeyword(keywords[i],attr);  }}  }
class C{  public void addSysproperty(Environment.Variable property){  getSystemProperties().put(property.getKey(),property.getValue());}  }
class C{  public void addImpression(){  setActualImpression(getActualImpression() + 1);  if (getCurrentImpression() >= getMaxImpression())   setIsActive(false);  save();}  }
class C{  private DescribeSpotPriceHistoryRequest equalsDescribeSpotPriceHistoryRequest(String availabilityZone,Collection<String> instanceTypes,Collection<String> productDescriptions){  return argThat(new EqualsDescribeSpotPriceHistoryRequest(availabilityZone,instanceTypes,productDescriptions));}  }
class C{  public byte[] toByteArray(){  final int outLen=3 * (Short.SIZE / Byte.SIZE) + keyProviderIdLen_ + keyProviderInfoLen_ + encryptedKeyLen_;  final ByteBuffer out=ByteBuffer.allocate(outLen);  out.putShort(keyProviderIdLen_);  out.put(keyProviderId_,0,keyProviderIdLen_);  out.putShort(keyProviderInfoLen_);  out.put(keyProviderInfo_,0,keyProviderInfoLen_);  out.putShort(encryptedKeyLen_);  out.put(encryptedKey_,0,encryptedKeyLen_);  return out.array();}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public CannotCompileException(ClassNotFoundException e,String name){  this("cannot find " + name,e);}  }
class C{  @SuppressWarnings("unchecked") public <T>T unmarshall(Path path,Path schemaPath,Class<T> rootClass) throws JAXBException, IOException, SAXException {  if (Files.notExists(path) || Files.isDirectory(path)) {    return null;  }  JAXBContext context=JAXBContext.newInstance(rootClass);  Unmarshaller unmarshaller=context.createUnmarshaller();  if ((null != schemaPath) && Files.exists(schemaPath)) {    SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    try (InputStream inputStream=Files.newInputStream(schemaPath,StandardOpenOption.READ)){      Schema schema=sf.newSchema(new StreamSource(inputStream));      unmarshaller.setSchema(schema);    }   }  try (InputStream inputStream=Files.newInputStream(path,StandardOpenOption.READ)){    return (T)unmarshaller.unmarshal(inputStream);  } }  }
class C{  public FacebookAuthorizationException(String message){  super(message);}  }
class C{  public void boardChangedAllHexes(BoardEvent b){}  }
class C{  private final void ensureCapacity(int minCapacity){  int oldCapacity=data.length;  if (minCapacity > oldCapacity) {    int[] oldData=data;    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    data=new int[newCapacity];    System.arraycopy(oldData,0,data,0,size);  }}  }
class C{  public void addTotalLoadedClassCount(long totalLoadedClassCount){  this.totalTotalLoadedClassCount+=totalLoadedClassCount;}  }
class C{  public static int nextPrime(int desiredCapacity){  int i=java.util.Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  public Path(){  this.nextWpIndex=0;  this.coords=new ArrayList<Coord>();  this.speeds=new ArrayList<Double>(1);}  }
class C{  private InterProcessLock lockIPL(String lockKey){  boolean acquired=false;  InterProcessLock lock=getIPLock(lockKey);  if (lock == null) {    return null;  }  try {    acquired=lock.acquire(60,TimeUnit.MINUTES);    if (acquired) {      return lock;    }  } catch (  Exception ex) {    log.error("Exception locking IPL: " + lockKey,ex);  }  log.error("Unable to acquire IPL: " + lockKey);  return null;}  }
class C{  final void scheduleAppGcLocked(ProcessRecord app){  long now=SystemClock.uptimeMillis();  if ((app.lastRequestedGc + GC_MIN_INTERVAL) > now) {    return;  }  if (!mProcessesToGc.contains(app)) {    addProcessToGcListLocked(app);    scheduleAppGcsLocked();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean onUsed(final RPEntity user){  final boolean couldUse=super.onUsed(user);  if (couldUse) {    keepOpen();  } else {    if (isOpen()) {      close();    }  }  return couldUse;}  }
class C{  public ArraySet(int capacity){  if (capacity == 0) {    mHashes=SupportContainerInternals.EMPTY_INTS;    mArray=SupportContainerInternals.EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  private static <T>PriorityQueue<T> union(PriorityQueue<T> set1,PriorityQueue<T> set2){  PriorityQueue<T> union=new PriorityQueue<>(set1);  union.addAll(set2);  return union;}  }
class C{  public boolean isUrlWhiteListed(String uri){  if (whiteList == null)   return true;  Uri parsedUri=Uri.parse(uri);  Iterator<URLPattern> pit=whiteList.iterator();  while (pit.hasNext()) {    URLPattern p=pit.next();    if (p.matches(parsedUri)) {      return true;    }  }  return false;}  }
class C{  private void mergeOrbits(int a,int b,int[] orbits){  int orbita=orbits[a];  int orbitb=orbits[b];  if (orbitb == -1 && orbita == -1) {    orbits[a]=++nrOrbits;    orbits[b]=nrOrbits;  } else   if (orbitb == -1) {    orbits[b]=orbita;  } else   if (orbita == -1) {    orbits[a]=orbitb;  } else {    for (int i=0; i < orbits.length; i++) {      if (orbits[i] == orbita) {        orbits[i]=orbitb;      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  Transferable transferable=InternalClipboard.getInstance().getContents(null);  if (!(transferable instanceof KnowledgeSelection)) {    return;  }  KnowledgeSelection selection=(KnowledgeSelection)transferable;  DataFlavor flavor=new DataFlavor(KnowledgeSelection.class,"Knowledge");  try {    IKnowledge knowledge=(IKnowledge)selection.getTransferData(flavor);    if (knowledge != null) {      this.knowledgeEditable.setKnowledge(knowledge);    }  } catch (  Exception e1) {    throw new RuntimeException(e1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.256 -0400",hash_original_method="591C2A5A520643F864AF1B0C29FDD4AF",hash_generated_method="591C2A5A520643F864AF1B0C29FDD4AF") boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mRequestInformation && isValidType(mInfoType));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:02.248 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public static boolean isPrimitiveArray(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && clazz.getComponentType().isPrimitive());}  }
class C{  RaveIR(@NonNull String packageName,@NonNull String simpleName){  this.packageName=packageName;  this.simpleName=simpleName;}  }
class C{  public void add(String string){  TrieNode n=root;  String lower=string.toLowerCase();  for (int i=0; i < lower.length(); i++) {    TrieNode c=n.children.get(lower.charAt(i));    if (c == null) {      c=new TrieNode();      n.children.put(lower.charAt(i),c);    }    n=c;  }  n.results.add(string);}  }
class C{  public RegisteredProject createProject(ProjectConfig projectConfig,Map<String,String> options) throws ConflictException, ForbiddenException, ServerException, NotFoundException {  projectTreeChangesDetector.suspend();  try {    if (projectConfig.getPath() == null) {      throw new ConflictException("Path for new project should be defined ");    }    final String path=ProjectRegistry.absolutizePath(projectConfig.getPath());    if (projectConfig.getType() == null) {      throw new ConflictException("Project Type is not defined " + path);    }    if (projectRegistry.getProject(path) != null) {      throw new ConflictException("Project config already exists " + path);    }    final CreateProjectHandler generator=handlers.getCreateProjectHandler(projectConfig.getType());    FolderEntry projectFolder;    if (generator != null) {      Map<String,AttributeValue> valueMap=new HashMap<>();      Map<String,List<String>> attributes=projectConfig.getAttributes();      if (attributes != null) {        for (        Map.Entry<String,List<String>> entry : attributes.entrySet()) {          valueMap.put(entry.getKey(),new AttributeValue(entry.getValue()));        }      }      if (options == null) {        options=new HashMap<>();      }      Path projectPath=Path.of(path);      generator.onCreateProject(projectPath,valueMap,options);      projectFolder=new FolderEntry(vfs.getRoot().getChild(projectPath),projectRegistry);    } else {      projectFolder=new FolderEntry(vfs.getRoot().createFolder(path),projectRegistry);    }    final RegisteredProject project;    try {      project=projectRegistry.putProject(projectConfig,projectFolder,true,false);    } catch (    Exception e) {      projectFolder.getVirtualFile().delete();      throw e;    }    if (!project.getProblems().isEmpty()) {      projectFolder.getVirtualFile().delete();      projectRegistry.removeProjects(projectConfig.getPath());      throw new ServerException("Problems occured: " + project.getProblemsStr());    }    workspaceProjectsHolder.sync(projectRegistry);    projectRegistry.fireInitHandlers(project);    return project;  }  finally {    projectTreeChangesDetector.resume();  }}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  public static ChildNode createTextEditGroupNode(ChildNode parent,TextEditBasedChangeGroup changeGroup){  return new TextEditGroupNode(parent,changeGroup);}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public void reset(){  NativeCollation.reset(address);}  }
class C{  public boolean isPaymentOrReceipt(){  if (isDisbursement() || isRepayment() || isRepaymentAtDisbursement()|| isRecoveryRepayment()) {    return true;  }  return false;}  }
class C{  @Override public void clean(){  if (getExponent() == 1.0) {    m_data=null;  }  super.clean();}  }
class C{  public final void mul(float scalar){  m00*=scalar;  m01*=scalar;  m02*=scalar;  m03*=scalar;  m10*=scalar;  m11*=scalar;  m12*=scalar;  m13*=scalar;  m20*=scalar;  m21*=scalar;  m22*=scalar;  m23*=scalar;  m30*=scalar;  m31*=scalar;  m32*=scalar;  m33*=scalar;}  }
class C{  public static boolean isDerivedAdjective(final String word){  if (word.length() > 4) {    if (word.endsWith("al") || word.endsWith("ic"))     return true;    if (word.endsWith("ed"))     return true;  }  return false;}  }
class C{  public synchronized void addPvChangeListener(PvChangeListener l,int eventMask){  ensurePvChangeListeners();  PvChangeListeners.put(l,new Integer(eventMask));  allowEvents=true;  log.trace("+PvListener:" + toString() + "->"+ String.valueOf(l));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isNumber(FTypeRef typeRef){  return isInteger(typeRef) || isFloatingPoint(typeRef);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public NormalizationH1(float c){  this.c=c;}  }
class C{  public Map<String,List<String>> suggestionsForTagsValue(Collection<PoiTypeTag> poiTypeTags){  Map<String,List<String>> res=new HashMap<>();  for (  PoiTypeTag poiTypeTag : poiTypeTags) {    if (StringUtils.isEmpty(poiTypeTag.getPossibleValues())) {      res.put(poiTypeTag.getKey(),suggestionsForTagValue(poiTypeTag.getKey(),poiTypeTag.getPoiType().getId()));    } else {      String[] split=poiTypeTag.getPossibleValues().split(PoiTypeMapper.ITEM_SEPARATOR);      List<String> values=new ArrayList<>(split.length);      for (      String e : values) {        values.add(e.split(PoiTypeMapper.VALUE_SEPARATOR)[0]);      }      res.put(poiTypeTag.getKey(),values);    }  }  return res;}  }
class C{  public Object[] toArray(){  if (row == null) {    if (keyToString)     row=new Object[]{Misc.getAsString(key.getDetails()),new Double(value),new Double(active),new Date(time)}; else {      List list=new ArrayList();      Misc.addTo(list,key.getDetails());      list.add(new Double(value));      list.add(new Double(active));      list.add(new Date(time));      row=list.toArray();    }  }  return row;}  }
class C{  public PlatformAffinityFunction(){  partitions=-1;}  }
class C{  protected void acceptHashcode(T model){  requireNonNull(model);  model.add(Method.of(HASHCODE,INT_PRIMITIVE).set(Javadoc.of("Generates a hashCode for this object. If any field is " + "changed to another value, the hashCode may be different. " + "Two objects with the same values are guaranteed to have "+ "the same hashCode. Two objects with the same hashCode are "+ "not guaranteed to have the same hashCode.").add(RETURN.setText("The hash code."))).public_().add(OVERRIDE).add("int hash = 7;").add(model.getFields().stream().map(null).collect(Collectors.joining(nl()))).add("return hash;"));}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.rez(getString(stack));}  }
class C{  protected boolean[] instanceWeights(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("kernel uses instance weights");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=2 * getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Kernel[] kernels=null;  KernelEvaluation evaluationB=null;  KernelEvaluation evaluationI=null;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    kernels=Kernel.makeCopies(getKernel(),2);    evaluationB=new KernelEvaluation();    evaluationI=new KernelEvaluation();    evaluationB.evaluate(kernels[0],train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    evaluationI.evaluate(kernels[1],train);    if (evaluationB.equals(evaluationI)) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println(evaluationB.toSummaryString("\nboth methods\n"));      } else {        print("Problem during building");        println(": " + ex.getMessage() + "\n");      }      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }    }  }  return result;}  }
class C{  private boolean isStl(){  if (mDataList.size() > 0)   if (mDataList.get(0).getPathFile().endsWith(".stl") || mDataList.get(0).getPathFile().endsWith(".STL"))   return true;  return false;}  }
class C{  public void test_edgeCase1(){  final long edge=144115188075856000L - 1;  final int id=16;  MyInlineLocalNameIntegerURIHandler h=new MyInlineLocalNameIntegerURIHandler("www.blazegraph.com",id);  check(h,edge,id);}  }
class C{  static boolean ensureInitialized(){  if (!isInitialized()) {    FreshAirLog.e("Attempted to use FreshAir before it was initialized.",new FreshAirUninitializedException());    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.460 -0500",hash_original_method="54F9496B76E22DCCA8FF0A5B8A943002",hash_generated_method="993738107803E3943239BD943931C67E") public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  public boolean isFailObtainResponse(){  return failObtainResponse;}  }
class C{  private static byte[] decodeWebSafe(byte[] source,int len) throws Base64DecoderException {  return decode(source,0,len,WEBSAFE_DECODABET);}  }
class C{  void updateMetricScore(MetricDisplay metricDisplay,Face face){  MetricsManager.Metrics metric=metricDisplay.getMetricToDisplay();  float score=Float.NaN;  try {switch (metric.getType()) {case Emotion:      score=(Float)metricDisplay.getFaceScoreMethod().invoke(face.emotions);    break;case Expression:  score=(Float)metricDisplay.getFaceScoreMethod().invoke(face.expressions);break;case Emoji:score=(Float)metricDisplay.getFaceScoreMethod().invoke(face.emojis);break;default :throw new Exception("Unknown Metric Type: " + metric.getType().toString());}} catch (Exception e) {Log.e(LOG_TAG,String.format("Error using reflecting to get %s score from face.",metric.toString()));}metricDisplay.setScore(score);}  }
class C{  public FileDataRowReader(DataRowFactory factory,List<AttributeDataSource> attributeDataSources,double sampleRatio,int sampleSize,String separatorsRegExpr,char[] commentChars,boolean useQuotes,char quoteChar,char escapeChar,boolean trimLines,boolean skipErrorLines,Charset encoding,RandomGenerator random) throws IOException {  super(factory);  this.sampleRatio=sampleRatio;  this.maxNumber=sampleSize;  this.attributes=new Attribute[attributeDataSources.size()];  this.dataSourceIndex=new int[attributeDataSources.size()][2];  this.rapidMinerLineReader=new RapidMinerLineReader(separatorsRegExpr,commentChars,useQuotes,quoteChar,escapeChar,trimLines,skipErrorLines);  this.random=random;  initReader(factory,attributeDataSources,sampleSize,separatorsRegExpr,useQuotes,encoding);}  }
class C{  public RSAKeyEncapsulation(DerivationFunction kdf,SecureRandom rnd){  this.kdf=kdf;  this.rnd=rnd;}  }
class C{  public void closed(IJavaElement element){  JavaElementDelta delta=new JavaElementDelta(element);  delta.changed(F_CLOSED);  insertDeltaTree(element,delta);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  private String cookData() throws Exception {  TreeMap<String,String> factTableCol2LookupCol=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);  TreeSet<String> usedCols=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);  TreeMap<String,String> lookupCol2factTableCol=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);  List<DimensionDesc> dimensions=getSortedDimentsionDescs();  for (  DimensionDesc dim : dimensions) {    JoinDesc jDesc=dim.getJoin();    if (jDesc != null) {      String[] fks=jDesc.getForeignKey();      String[] pks=jDesc.getPrimaryKey();      int num=fks.length;      for (int i=0; i < num; ++i) {        String value=dim.getTable() + "/" + pks[i];        lookupCol2factTableCol.put(value,fks[i]);        if (factTableCol2LookupCol.containsKey(fks[i])) {          if (!factTableCol2LookupCol.get(fks[i]).equals(value)) {            System.out.println("Warning: Disambiguation on the mapping of column " + fks[i] + ", "+ factTableCol2LookupCol.get(fks[i])+ "(chosen) or "+ value);            continue;          }        }        factTableCol2LookupCol.put(fks[i],value);      }    }  }  for (  DimensionDesc dim : dimensions) {    JoinDesc jDesc=dim.getJoin();    if (jDesc == null) {      String aColumn=dim.getColumn();      if (!factTableCol2LookupCol.containsKey(aColumn))       usedCols.add(aColumn);    }  }  for (  MeasureDesc mDesc : desc.getMeasures()) {    List<TblColRef> pcols=mDesc.getFunction().getParameter().getColRefs();    if (pcols != null) {      for (      TblColRef col : pcols) {        if (!factTableCol2LookupCol.containsKey(col.getName()))         usedCols.add(col.getName());      }    }  }  return createTable(this.rowCount,factTableCol2LookupCol,lookupCol2factTableCol,usedCols);}  }
class C{  public AttributeList(){  super();}  }
class C{  @Override public java_cup.runtime.Symbol next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=zzBufferL[zzCurrentPosL++];        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1) {          break zzForAction;        }        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8) {            break zzForAction;          }        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 20:{        m_String.append('\b');      }case 23:    break;case 7:{    return m_SF.newSymbol("Colon",sym.COLON);  }case 24:break;case 13:{m_String.append('\\');}case 25:break;case 22:{return m_SF.newSymbol("Boolean",sym.BOOLEAN,new Boolean(yytext()));}case 26:break;case 14:{return m_SF.newSymbol("Double",sym.DOUBLE,new Double(yytext()));}case 27:break;case 17:{m_String.append('\r');}case 28:break;case 3:{return m_SF.newSymbol("Right curly bracket",sym.RCURLY);}case 29:break;case 19:{m_String.append('\"');}case 30:break;case 1:{System.err.println("Illegal character: " + yytext());}case 31:break;case 18:{m_String.append('\f');}case 32:break;case 21:{return m_SF.newSymbol("Null",sym.NULL);}case 33:break;case 16:{m_String.append('\t');}case 34:break;case 4:{return m_SF.newSymbol("Left square bracket",sym.LSQUARE);}case 35:break;case 12:{yybegin(YYINITIAL);return m_SF.newSymbol("String",sym.STRING,m_String.toString());}case 36:break;case 15:{m_String.append('\n');}case 37:break;case 2:{return m_SF.newSymbol("Left curly bracket",sym.LCURLY);}case 38:break;case 6:{return m_SF.newSymbol("Comma",sym.COMMA);}case 39:break;case 8:{return m_SF.newSymbol("Integer",sym.INTEGER,new Integer(yytext()));}case 40:break;case 9:{m_String.setLength(0);yybegin(STRING);}case 41:break;case 11:{m_String.append(yytext());}case 42:break;case 10:{}case 43:break;case 5:{return m_SF.newSymbol("Right square bracket",sym.RSQUARE);}case 44:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return m_SF.newSymbol("EOF",sym.EOF);}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public CascadedRowManager(Table table){  super(table);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.DECLARED_VERSION__MAJOR:    return getMajor();case N4mfPackage.DECLARED_VERSION__MINOR:  return getMinor();case N4mfPackage.DECLARED_VERSION__MICRO:return getMicro();case N4mfPackage.DECLARED_VERSION__QUALIFIER:return getQualifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    return ((InternalEList<?>)getParameters()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void clearPassword(){  this.password=null;}  }
class C{  protected int estimateProtocolVersionLen(final ProtocolVersion version){  return version.getProtocol().length() + 4;}  }
class C{  private static boolean validateOnlyDigits(String valueToCheck,FacesContext facesContext){  Locale locale=LocaleHandler.getLocaleFromString(BaseBean.getUserFromSession(facesContext).getLocale());  DecimalFormatSymbols dfs=new DecimalFormatSymbols(locale);  boolean decSepFound=false;  for (  char c : valueToCheck.toCharArray()) {    if (!decSepFound && c == dfs.getDecimalSeparator()) {      decSepFound=true;      continue;    }    if (c == dfs.getGroupingSeparator()) {      continue;    }    if (!Character.isDigit(c)) {      return false;    }  }  return true;}  }
class C{  public float norm(int passageStart){  return 1 + 1 / (float)Math.log(pivot + passageStart);}  }
class C{  public void addTransition(int source,int dest,int min,int max){  assert nextTransition % 3 == 0;  if (source >= nextState / 2) {    throw new IllegalArgumentException("source=" + source + " is out of bounds (maxState is "+ (nextState / 2 - 1)+ ")");  }  if (dest >= nextState / 2) {    throw new IllegalArgumentException("dest=" + dest + " is out of bounds (max state is "+ (nextState / 2 - 1)+ ")");  }  growTransitions();  if (curState != source) {    if (curState != -1) {      finishCurrentState();    }    curState=source;    if (states[2 * curState] != -1) {      throw new IllegalStateException("from state (" + source + ") already had transitions added");    }    assert states[2 * curState + 1] == 0;    states[2 * curState]=nextTransition;  }  transitions[nextTransition++]=dest;  transitions[nextTransition++]=min;  transitions[nextTransition++]=max;  states[2 * curState + 1]++;}  }
class C{  public void testRenameColumnsOrder1() throws IOException, ReplicatorException {  String error="Wrong rename definition picked (order of preference mismatch)";  PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));  out.println("schemaz,tableq,cola,-,-,cola1");  out.println("schemaz,*,cola,-,-,cola2");  out.println("*,tableq,cola,-,-,cola3");  out.println("*,*,cola,-,-,cola4");  out.close();  RenameDefinitions renameDefinitions=new RenameDefinitions(definitionsFile);  renameDefinitions.parseFile();  assertEquals(error,"cola1",renameDefinitions.getNewColumnName("schemaz","tableq","cola"));  assertEquals(error,"cola2",renameDefinitions.getNewColumnName("schemaz","othertable","cola"));  assertEquals(error,"cola3",renameDefinitions.getNewColumnName("otherschema","tableq","cola"));  assertEquals(error,"cola4",renameDefinitions.getNewColumnName("otherschema","othertable","cola"));}  }
class C{  public void addToClassIgnoreList(String className){  addToList(classIgnoreList,className);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ENUM_1__STATE_NAME_1:    setStateName_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public static String stringFor(int k){switch (k) {case cudaResourceTypeArray:    return "cudaResourceTypeArray";case cudaResourceTypeMipmappedArray:  return "cudaResourceTypeMipmappedArray";case cudaResourceTypeLinear:return "cudaResourceTypeLinear";case cudaResourceTypePitch2D:return "cudaResourceTypePitch2D";}return "INVALID cudaResourceType: " + k;}  }
class C{  public MonetaryFormat repeatOptionalDecimals(int decimals,int repetitions){  checkArgument(repetitions >= 0);  List<Integer> decimalGroups=new ArrayList<Integer>(repetitions);  for (int i=0; i < repetitions; i++)   decimalGroups.add(decimals);  return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  public IdentValue asIdentValue(){  if (!identIsSet) {    _identVal=IdentValue.getByIdentString(cssPrimitiveValue.getCssText());    identIsSet=true;  }  return _identVal;}  }
class C{  public synchronized void connected(BluetoothSocket socket,BluetoothDevice device,final String socketType){  log.debug("connected, Socket Type:" + socketType);  if (mBtConnectThread != null) {    mBtConnectThread.cancel();    mBtConnectThread=null;  }  if (mBtWorkerThread != null) {    mBtWorkerThread.cancel();    mBtWorkerThread=null;  }  connectionEstablished(device.getName());  mBtWorkerThread=new BtWorkerThread(socket,socketType);  mBtWorkerThread.start();}  }
class C{  public void clear(){  bytesRead=bytesWritten=0;  list.clear();  writeChunk=null;  readChunk=null;}  }
class C{  public static void addRelevantVariableList(Intent intentToHost,String[] variableNames){  intentToHost.putExtra(BUNDLE_KEY_RELEVANT_VARIABLES,variableNames);}  }
class C{  public static String generateFingerprint(Certificate certificate) throws CertificateEncodingException {  MessageDigest digest;  try {    digest=MessageDigest.getInstance(FINGERPRINT_ALGORITHM);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("An error occurred while getting the message digest",e);  }  byte[] hash=digest.digest(certificate.getEncoded());  char delimiter=':';  int len=hash.length * 2 + hash.length - 1;  StringBuilder fingerprint=new StringBuilder(len);  for (int i=0; i < hash.length; i++) {    hash[i]&=0xFF;    fingerprint.append(String.format("%02x",hash[i]));    if (i < hash.length - 1) {      fingerprint.append(delimiter);    }  }  return fingerprint.toString();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.FEATURE_CALL__OWNER:    return basicSetOwner(null,msgs);case ExpressionsPackage.FEATURE_CALL__ARGS:  return ((InternalEList<?>)getArgs()).basicRemove(otherEnd,msgs);case ExpressionsPackage.FEATURE_CALL__ARRAY_SELECTOR:return ((InternalEList<?>)getArraySelector()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @LargeTest public void testThumbnailForMPEG4WVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_800x480_515kbps_15fps_AMR_NB_8KHz_12.2kbps_m_0_26.mp4";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() * 2;  final int outHeight=mediaVideoItem.getHeight();  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public boolean isOuter(String name){  if (parent == null) {    return true;  }  if (locals.containsKey(name))   return false;  if (type == ScopeType.FUNCTION && ("this".equals(name) || "arguments".equals(name))) {    return false;  } else   if (type == ScopeType.PROGRAM && "this".equals(name)) {    return false;  }  return parent.isOuter(name);}  }
class C{  public static String convertToWords(final Date dateToConvert){  final String[] DATE_WORD={"First","Second","Third","Fourth","Fifth","Sixth","Seventh","Eighth","Ninth","Tenth","Eleventh","Twelfth","Thirteenth","Fourteenth","Fifteenth","Sixteenth","Seventeenth","Eighteenth","Nineteenth","Twentieth","Twenty first","Twenty second","Twenty third","Twenty fourth","Twenty fifth","Twenty sixth","Twenty seventh","Twenty eighth","Twenty ninth","Thirtieth","Thirty first"};  final Calendar cal=Calendar.getInstance();  cal.setTime(dateToConvert);  final StringBuilder dateInWord=new StringBuilder();  dateInWord.append(DATE_WORD[cal.get(Calendar.DATE) - 1]).append(" ");  dateInWord.append(getDateFormatter("dd-MMMMM-yyyy").format(dateToConvert).split("-")[1]).append(" ");  dateInWord.append(NumberToWord.translateToWord(String.valueOf(cal.get(Calendar.YEAR))));  return dateInWord.toString();}  }
class C{  public TimingSpecifierListParser(boolean useSVG11AccessKeys,boolean useSVG12AccessKeys){  super(useSVG11AccessKeys,useSVG12AccessKeys);  timingSpecifierHandler=DefaultTimingSpecifierListHandler.INSTANCE;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.072 -0400",hash_original_method="AF68FB9108929D9CC8AF2DAD857DF91D",hash_generated_method="03F18DCDF3636CF439F76D81DC2B5009") @Override public void write(int b) throws IOException {  throw exception;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  double backgroundValue=Double.parseDouble(args[1]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    double[] data;    for (int a=0; a < numFiles; a++) {      WhiteboxRaster inputFile=new WhiteboxRaster(imageFiles[a],"rw");      int rows=inputFile.getNumberRows();      int cols=inputFile.getNumberColumns();      double noData=inputFile.getNoDataValue();      for (row=0; row < rows; row++) {        data=inputFile.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] == backgroundValue) {            inputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Processing image " + (a + 1) + " of "+ numFiles+ ":",progress);      }      inputFile.close();    }    showFeedback("Operation complete");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void putMap(Map<String,List<String>> m){  for (  String key : m.keySet()) {    SortedSet<String> vals=get(key);    if (vals == null) {      vals=new TreeSet<String>();      put(key,vals);    }    vals.addAll(m.get(key));  }}  }
class C{  public void testDoubleSortMissingLast() throws Exception {  checkSortMissingLast("doubledv_missinglast","-1.3","4.2");}  }
class C{  public CharSequence readSource(JavaFileObject filename){  try {    inputFiles.add(filename);    return filename.getCharContent(false);  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    return null;  }}  }
class C{  private boolean isHHSign(String str){  boolean sign=true;  try {    char r=(char)Integer.parseInt(str,16);  } catch (  NumberFormatException e) {    sign=false;  }  return sign;}  }
class C{  public static SQLStream create(String databaseName,String sqlWithSubsParams,String optStreamName,String optionalMetadataSQL){  return new SQLStream(databaseName,sqlWithSubsParams,optStreamName,optionalMetadataSQL);}  }
class C{  public void deselect(){  OMGraphicList list=getList();  if (list != null) {    list.deselect();    repaint();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.084 -0400",hash_original_method="8A091F325B2B1BE84B433E7B2F988B9C",hash_generated_method="C6810D6341C6F42FA1E511539AAE4989") public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  throw new IllegalStateException("wrap: QOP has neither integrity nor privacy>");}  }
class C{  public ObjectId(byte[] b){  if (b.length != 12)   throw new IllegalArgumentException("need 12 bytes");  ByteBuffer bb=ByteBuffer.wrap(b);  _time=bb.getInt();  _machine=bb.getInt();  _inc=bb.getInt();  _new=false;}  }
class C{  public void probeProviderConnectivity(String tenantName,String providerUri,AuthenticationType authType,String userName,String pwd,Collection<X509Certificate> certificates) throws Exception {  getService().probeProviderConnectivity(tenantName,providerUri,authType,userName,pwd,certificates,this.getServiceContext());}  }
class C{  public GroupAction(DrawingEditor editor){  this(editor,new GroupFigure(),true);}  }
class C{  public void addFromGeometry3D(Vector3 offset,Geometry3D geometry,boolean createVBOs){  float[] newVertices=null;  float[] newNormals=null;  float[] newColors=null;  float[] newTextureCoords=null;  int[] newIntIndices=null;  float[] mVerticesArray=null;  float[] mNormalsArray=null;  float[] mColorsArray=null;  float[] mTextureCoordsArray=null;  int[] mIndicesArray=null;  mVerticesArray=getFloatArrayFromBuffer(mVertices);  mNormalsArray=getFloatArrayFromBuffer(mNormals);  mColorsArray=getFloatArrayFromBuffer(mColors);  mTextureCoordsArray=getFloatArrayFromBuffer(mTextureCoords);  if (!mOnlyShortBufferSupported) {    mIndicesArray=getIntArrayFromBuffer(mIndicesInt);  } else {    mIndicesArray=getIntArrayFromBuffer(mIndicesShort);  }  int axis=0;  float[] addVertices=getFloatArrayFromBuffer(geometry.getVertices());  if (offset != null) {    for (int i=0, j=addVertices.length; i < j; ++i) {switch (axis) {case 0:        addVertices[i]+=offset.x;      break;case 1:    addVertices[i]+=offset.y;  break;case 2:addVertices[i]+=offset.z;break;}++axis;if (axis > 2) axis=0;}}float[] addNormals=getFloatArrayFromBuffer(geometry.getNormals());float[] addColors=getFloatArrayFromBuffer(geometry.getColors());float[] addTextureCoords=getFloatArrayFromBuffer(geometry.getTextureCoords());int[] addIndices=getIntArrayFromBuffer(geometry.getIndices());int index_offset=(mVerticesArray.length / 3);for (int i=0, j=addIndices.length; i < j; ++i) {addIndices[i]+=index_offset;}newVertices=concatAllFloat(mVerticesArray,addVertices);newNormals=concatAllFloat(mNormalsArray,addNormals);newColors=concatAllFloat(mColorsArray,addColors);newTextureCoords=concatAllFloat(mTextureCoordsArray,addTextureCoords);newIntIndices=concatAllInt(mIndicesArray,(int[])addIndices);setVertices(newVertices,true);mNormals=null;setNormals(newNormals);mTextureCoords=null;setTextureCoords(newTextureCoords);mColors=null;setColors(newColors);mIndicesInt=null;mIndicesShort=null;setIndices(newIntIndices);if (createVBOs) {createBuffers();}}  }
class C{  private void populateMetadata(){  StringBuilder sb=new StringBuilder();  int trackTitleLength=0;  if (!TextUtils.isEmpty(mMetadata.trackTitle)) {    sb.append(mMetadata.trackTitle);    trackTitleLength=mMetadata.trackTitle.length();  }  if (!TextUtils.isEmpty(mMetadata.artist)) {    if (sb.length() != 0) {      sb.append(" - ");    }    sb.append(mMetadata.artist);  }  if (!TextUtils.isEmpty(mMetadata.albumTitle)) {    if (sb.length() != 0) {      sb.append(" - ");    }    sb.append(mMetadata.albumTitle);  }  mTrackTitle.setText(sb.toString(),TextView.BufferType.SPANNABLE);  Spannable str=(Spannable)mTrackTitle.getText();  if (trackTitleLength != 0) {    str.setSpan(new ForegroundColorSpan(0xffffffff),0,trackTitleLength,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    trackTitleLength++;  }  if (sb.length() > trackTitleLength) {    str.setSpan(new ForegroundColorSpan(0x7fffffff),trackTitleLength,sb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }  mAlbumArt.setImageBitmap(mMetadata.bitmap);  final int flags=mTransportControlFlags;  setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PREVIOUS);  setVisibilityBasedOnFlag(mBtnNext,flags,RemoteControlClient.FLAG_KEY_MEDIA_NEXT);  setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP);  updatePlayPauseState(mCurrentPlayState);}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public static ICounter createCounter(Date startDate,CounterValue.CounterType type){  SimpleCounter cc=new SimpleCounter(startDate,type);  return cc;}  }
class C{  private ILeafNode doFindLeafWithKeyword(EObject semanticElement,String stopAtKeyword,ICompositeNode node,String keyWord,boolean commaAlternative,int hitNumber){  EObject grammarElement;  int foundHits=0;  for (BidiTreeIterator<INode> iter=node.getAsTreeIterable().iterator(); iter.hasNext(); ) {    INode child=iter.next();    EObject childSemElement=child.getSemanticElement();    if (child != node && childSemElement != null && childSemElement != semanticElement) {      iter.prune();    } else     if (child instanceof ILeafNode) {      ILeafNode leaf=(ILeafNode)child;      grammarElement=leaf.getGrammarElement();      if (grammarElement instanceof Keyword) {        String value=((Keyword)grammarElement).getValue();        if (stopAtKeyword.equals(value)) {          return null;        }        if (keyWord.equals(value)) {          if (grammarElement.eContainer() instanceof Alternatives) {            AbstractElement first=((Alternatives)(grammarElement.eContainer())).getElements().get(0);            boolean inCommaAlternative=(first instanceof Keyword && ",".equals(((Keyword)first).getValue()));            if (inCommaAlternative == commaAlternative) {              foundHits++;              if (foundHits >= hitNumber) {                return leaf;              }            }          } else {            if (!commaAlternative) {              foundHits++;              if (foundHits >= hitNumber) {                return leaf;              }            }          }        }      }    }  }  return null;}  }
class C{  private LinkedList<WorkListItem> buildJSR305AnnotationsCodebaseList(){  return createFindBugsLibWorkList("jsr305.jar");}  }
class C{  public static float mapCoordInDescendentToSelf(View descendant,View root,float[] coord,boolean includeRootScroll){  ArrayList<View> ancestorChain=new ArrayList<View>();  float[] pt={coord[0],coord[1]};  View v=descendant;  while (v != root && v != null) {    ancestorChain.add(v);    v=(View)v.getParent();  }  ancestorChain.add(root);  float scale=1.0f;  int count=ancestorChain.size();  for (int i=0; i < count; i++) {    View v0=ancestorChain.get(i);    if (v0 != descendant || includeRootScroll) {      pt[0]-=v0.getScrollX();      pt[1]-=v0.getScrollY();    }    v0.getMatrix().mapPoints(pt);    pt[0]+=v0.getLeft();    pt[1]+=v0.getTop();    scale*=v0.getScaleX();  }  coord[0]=pt[0];  coord[1]=pt[1];  return scale;}  }
class C{  public static int createShader(String resource,int type,String version) throws IOException {  int shader=glCreateShader(type);  ByteBuffer source=ioResourceToByteBuffer(resource,8192);  if (version == null) {    PointerBuffer strings=BufferUtils.createPointerBuffer(1);    IntBuffer lengths=BufferUtils.createIntBuffer(1);    strings.put(0,source);    lengths.put(0,source.remaining());    glShaderSource(shader,strings,lengths);  } else {    PointerBuffer strings=BufferUtils.createPointerBuffer(2);    IntBuffer lengths=BufferUtils.createIntBuffer(2);    ByteBuffer preamble=memUTF8("#version " + version + "\n",false);    strings.put(0,preamble);    lengths.put(0,preamble.remaining());    strings.put(1,source);    lengths.put(1,source.remaining());    glShaderSource(shader,strings,lengths);  }  glCompileShader(shader);  int compiled=glGetShaderi(shader,GL_COMPILE_STATUS);  String shaderLog=glGetShaderInfoLog(shader);  if (shaderLog.trim().length() > 0) {    System.err.println(shaderLog);  }  if (compiled == 0) {    throw new AssertionError("Could not compile shader");  }  return shader;}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException();  }  return new SynchronizedCollection<T>(collection);}  }
class C{  static String byteArrayToAltBase64(byte[] a){  return byteArrayToBase64(a,true);}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new BluetoothPeerNetwork(mBluetoothDevice);  return clone;}  }
class C{  public void cancel(Account account){  Log_OC.d(TAG,"Account= " + account.name);  if (mCurrentUpload != null) {    Log_OC.d(TAG,"Current Upload Account= " + mCurrentUpload.getAccount().name);    if (mCurrentUpload.getAccount().name.equals(account.name)) {      mCurrentUpload.cancel();    }  }  cancelUploadForAccount(account.name);}  }
class C{  public DeleteTrustedCertificateAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("DeleteTrustedCertificateAction.statusbar"));  putValue(NAME,res.getString("DeleteTrustedCertificateAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("DeleteTrustedCertificateAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DeleteTrustedCertificateAction.image")))));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node newChild;  Node appendNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  appendNode=employeeNode.appendChild(newChild);  childName=appendNode.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  public static SSLContext sslContext() throws GeneralSecurityException, IOException {  SSLContext ctx=SSLContext.getInstance("TLS");  char[] storePass=GridTestProperties.getProperty("ssl.keystore.password").toCharArray();  KeyManagerFactory keyMgrFactory=KeyManagerFactory.getInstance("SunX509");  KeyStore keyStore=KeyStore.getInstance("JKS");  keyStore.load(new FileInputStream(U.resolveIgnitePath(GridTestProperties.getProperty("ssl.keystore.path"))),storePass);  keyMgrFactory.init(keyStore,storePass);  ctx.init(keyMgrFactory.getKeyManagers(),new TrustManager[]{GridSslBasicContextFactory.getDisabledTrustManager()},null);  return ctx;}  }
class C{  private static void checkCalcForceExertedByXY(){  System.out.println("Checking calcForceExertedByX and calcForceExertedByY...");  Planet p1=new Planet(1.0,1.0,3.0,4.0,5.0,"jupiter.gif");  Planet p2=new Planet(2.0,1.0,3.0,4.0,4e11,"jupiter.gif");  Planet p3=new Planet(4.0,5.0,3.0,4.0,5.0,"jupiter.gif");  checkEquals(p1.calcForceExertedByX(p2),133.4,"calcForceExertedByX()",0.01);  checkEquals(p1.calcForceExertedByX(p3),4.002e-11,"calcForceExertedByX()",0.01);  checkEquals(p1.calcForceExertedByY(p2),0.0,"calcForceExertedByY()",0.01);  checkEquals(p1.calcForceExertedByY(p3),5.336e-11,"calcForceExertedByY()",0.01);}  }
class C{  public void add(final Object key,final Sprite sprite){  if (key != null) {    sprites.put(key,sprite);    LOGGER.debug("SpriteCache - add: " + key);  }}  }
class C{  public void addPolicyFileUrl(String url){  if (policyFileUrls == null) {    policyFileUrls=new ArrayList<String>();  }  policyFileUrls.add(url == null ? "" : url);}  }
class C{  static GenericTableBuilder createBuilder(Header header,WritableFontData data){  return new GenericTableBuilder(header,data);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TVARIABLE__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}if (baseClass == TAnnotableElement.class) {switch (derivedFeatureID) {case TypesPackage.TVARIABLE__ANNOTATIONS:  return TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS;default :return -1;}}if (baseClass == AccessibleTypeElement.class) {switch (derivedFeatureID) {case TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER:return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME:return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public SnmpOpaque(Byte[] v){  super(v);}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int year=super.getYear() + 1900;  int month=super.getMonth() + 1;  int day=super.getDate();  char buf[]="2000-00-00".toCharArray();  buf[0]=Character.forDigit(year / 1000,10);  buf[1]=Character.forDigit((year / 100) % 10,10);  buf[2]=Character.forDigit((year / 10) % 10,10);  buf[3]=Character.forDigit(year % 10,10);  buf[5]=Character.forDigit(month / 10,10);  buf[6]=Character.forDigit(month % 10,10);  buf[8]=Character.forDigit(day / 10,10);  buf[9]=Character.forDigit(day % 10,10);  return new String(buf);}  }
class C{  public static SQLException createBatchUpdateException(SQLException underlyingEx,long[] updateCounts,ExceptionInterceptor interceptor) throws SQLException {  SQLException newEx;  if (Util.isJdbc42()) {    newEx=(SQLException)Util.getInstance("java.sql.BatchUpdateException",new Class[]{String.class,String.class,int.class,long[].class,Throwable.class},new Object[]{underlyingEx.getMessage(),underlyingEx.getSQLState(),underlyingEx.getErrorCode(),updateCounts,underlyingEx},interceptor);  } else {    newEx=new BatchUpdateException(underlyingEx.getMessage(),underlyingEx.getSQLState(),underlyingEx.getErrorCode(),Util.truncateAndConvertToInt(updateCounts));    newEx.initCause(underlyingEx);  }  return runThroughExceptionInterceptor(interceptor,newEx,null);}  }
class C{  public String toString(int digits,boolean trailing){  if (isEmpty()) {    return "null vector";  }  StringBuffer text=new StringBuffer();  FlexibleDecimalFormat nf=new FlexibleDecimalFormat(digits,trailing);  nf.grouping(true);  for (int i=0; i < size(); i++) {    nf.update(V[i]);  }  int count=0;  int width=80;  String number;  for (int i=0; i < size(); i++) {    number=nf.format(V[i]);    count+=1 + number.length();    if (count > width - 1) {      text.append('\n');      count=1 + number.length();    }    text.append(" " + number);  }  return text.toString();}  }
class C{  static public void assertColumnName(final String s) throws IllegalArgumentException {  if (s == null)   throw new IllegalArgumentException();  if (s.length() == 0)   throw new IllegalArgumentException();  if (s.indexOf('\0') != -1)   throw new IllegalArgumentException();  final Matcher m=pattern_name.matcher(s);  if (!m.matches())   throw new IllegalArgumentException(s);}  }
class C{  @Override protected IndexReader determineReader(IndexReader reader){  return null;}  }
class C{  @Override public AnswerFragment.ContinueMode goToNextState(){  this.mCheckingAnswer=true;  if (!this.isDetached()) {    getFragmentManager().beginTransaction().detach(this).attach(this).commit();  }  return ContinueMode.CONTINUE_HIDE_FAB;}  }
class C{  public String delete() throws SaaSApplicationException {  if (isTokenValid()) {    if (selectedTechnicalService != null) {      try {        getProvisioningService().deleteTechnicalService(selectedTechnicalService.getVo());        sessionBean.setSelectedTechnicalServiceKey(0);        addMessage(null,FacesMessage.SEVERITY_INFO,INFO_TECH_SERVICE_DELETED,new Object[]{selectedTechnicalService.getTechnicalServiceId()});      }  finally {        selectedTechnicalService=null;        technicalServices=null;      }    }    resetToken();  }  return OUTCOME_SUCCESS;}  }
class C{  public boolean isFrameDisplayed(CCSpriteFrame frame){  CGRect r=frame.rect_;  CGPoint p=frame.offset_;  return (CGRect.equalToRect(r,rect_) && frame.getTexture().name() == this.getTexture().name() && CGPoint.equalToPoint(p,offsetPosition_));}  }
class C{  public SignInIntentBuilder createSignInIntentBuilder(){  return new SignInIntentBuilder();}  }
class C{  public Timer(final String name){  super(name);}  }
class C{  public void complete(Object source) throws Exception {  if (complete != null) {    complete.call(context,source);  }}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,String lineEnd){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER,lineEnd);}  }
class C{  public void addNextDropTable(DropTable drop){  if (next == null) {    next=drop;  } else {    next.addNextDropTable(drop);  }}  }
class C{  public void removeObserver(String notificationName,Object notifyContext){  List<Observer> observers=observerMap.get(notificationName);  if (observers != null) {    for (int i=0; i < observers.size(); i++) {      BaseObserver observer=(BaseObserver)observers.get(i);      if (observer.compareNotifyContext(notifyContext)) {        observers.remove(observer);      }    }    if (observers.size() == 0) {      observerMap.remove(notificationName);    }  }}  }
class C{  private void initiateSharedPreferences(){  if (mSharedPreferences == null) {    mSharedPreferences=PreferenceManager.getDefaultSharedPreferences(mContext);  }}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  public static <T>T eachLine(Path self,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(newReader(self),firstLine,closure);}  }
class C{  final public void println(char[] v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private static void split(final double d,final double split[]){  if (d < 8e298 && d > -8e298) {    final double a=d * HEX_40000000;    split[0]=(d + a) - a;    split[1]=d - split[0];  } else {    final double a=d * 9.31322574615478515625E-10;    split[0]=(d + a - d) * HEX_40000000;    split[1]=d - split[0];  }}  }
class C{  public TLongArrayList(int capacity){  _data=new long[capacity];  _pos=0;}  }
class C{  public void init() throws ServletException {  getServletContext().log("StatusInfo.init");}  }
class C{  public JobImpressionsCompleted(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public void fireChartInitialized(final int numSources){  if (listenerList == null) {    listenerList=new ArrayList<ChartListener>();  }  for (  ChartListener listener : listenerList) {    listener.chartInitialized(numSources);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endNumber(String string){}  }
class C{  public EaseInOut(){}  }
class C{  public static Typeface robotoBlackItalic(Context context){  return FontSourceProcessor.process(R.raw.roboto_blackitalic,context);}  }
class C{  @Override protected Command createMoveChildCommand(EditPart child,EditPart after){  return null;}  }
class C{  protected boolean canStopWaiting(){  return false;}  }
class C{  public static boolean isLeapYear(int year){  return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0);}  }
class C{  public void testIncrementalPojoReading() throws IOException {  JsonFactory jf=new MappingJsonFactory();  final String JSON="[ 1, true, null, \"abc\" ]";  JsonParser jp=jf.createJsonParser(new StringReader(JSON));  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(Integer.valueOf(1),jp.readValueAs(Integer.class));  assertEquals(Boolean.TRUE,jp.readValueAs(Boolean.class));  assertNull(jp.readValueAs(Object.class));  assertEquals(JsonToken.VALUE_NULL,jp.getLastClearedToken());  assertEquals("abc",jp.readValueAs(String.class));  assertNull(jp.readValueAs(Object.class));  assertEquals(JsonToken.END_ARRAY,jp.getLastClearedToken());  assertNull(jp.nextToken());  jp.close();}  }
class C{  private void runScript(Connection conn,Reader reader) throws IOException, SQLException {  StringBuffer command=null;  try {    LineNumberReader lineReader=new LineNumberReader(reader);    String line;    while ((line=lineReader.readLine()) != null) {      if (command == null) {        command=new StringBuffer();      }      String trimmedLine=line.trim();      final Matcher delimMatch=delimP.matcher(trimmedLine);      if (trimmedLine.length() < 1 || trimmedLine.startsWith("//")) {      } else       if (delimMatch.matches()) {        setDelimiter(delimMatch.group(2),false);      } else       if (trimmedLine.startsWith("--")) {        println(trimmedLine);      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("--")) {      } else       if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {        command.append(line.substring(0,line.lastIndexOf(getDelimiter())));        command.append(" ");        this.execCommand(conn,command,lineReader);        command=null;      } else {        command.append(line);        command.append("\n");      }    }    if (command != null) {      this.execCommand(conn,command,lineReader);    }    if (!autoCommit) {      conn.commit();    }  } catch (  Exception e) {    throw new IOException(String.format("Error executing '%s': %s",command,e.getMessage()),e);  } finally {    conn.rollback();    flush();  }}  }
class C{  public void showGrid(boolean bool){  if (bool)   this.setVisible(true); else   this.setVisible(false);}  }
class C{  public static float valueAsFloat(String key,float defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  float fval;  try {    fval=Float.valueOf(val).floatValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as a float, but "+ "value of '"+ val+ "' is not a float. Check configuration.");    fval=defaultVal;  }  return fval;}  }
class C{  public static void logIn(Activity activity,Callback<TwitterSession> callback){  checkInitialized();  getInstance().core.logIn(activity,callback);}  }
class C{  private static DiceRoll rollDiceLowLuck(final List<Unit> unitsList,final boolean defending,final PlayerID player,final IDelegateBridge bridge,final IBattle battle,final String annotation,final Collection<TerritoryEffect> territoryEffects,final List<Unit> allEnemyUnitsAliveOrWaitingToDie){  final List<Unit> units=new ArrayList<>(unitsList);{    final Set<Unit> duplicatesCheckSet=new HashSet<>(unitsList);    if (units.size() != duplicatesCheckSet.size()) {      throw new IllegalStateException("Duplicate Units Detected: Original List:" + units + "  HashSet:"+ duplicatesCheckSet);    }  }  final GameData data=bridge.getData();  final Territory location=battle.getTerritory();  final boolean isAmphibiousBattle=battle.isAmphibious();  final Collection<Unit> amphibiousLandAttackers=battle.getAmphibiousLandAttackers();  final Map<Unit,Tuple<Integer,Integer>> unitPowerAndRollsMap=DiceRoll.getUnitPowerAndRollsForNormalBattles(units,allEnemyUnitsAliveOrWaitingToDie,defending,false,data,location,territoryEffects,isAmphibiousBattle,amphibiousLandAttackers);  final int power=getTotalPower(unitPowerAndRollsMap,data);  if (power == 0) {    return new DiceRoll(new ArrayList<>(0),0);  }  int hitCount=power / data.getDiceSides();  final List<Die> dice=new ArrayList<>();  final int rollFor=power % data.getDiceSides();  final int[] random;  if (rollFor == 0) {    random=new int[0];  } else {    random=bridge.getRandom(data.getDiceSides(),1,player,DiceType.COMBAT,annotation);    final boolean hit=rollFor > random[0];    if (hit) {      hitCount++;    }    dice.add(new Die(random[0],rollFor,hit ? DieType.HIT : DieType.MISS));  }  final DiceRoll rVal=new DiceRoll(dice,hitCount);  bridge.getHistoryWriter().addChildToEvent(annotation + " : " + MyFormatter.asDice(random),rVal);  return rVal;}  }
class C{  public static boolean hasTaxonomyInfo(SequencesReader reader){  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);  if (taxonFile.exists() && mappingFile.exists()) {    return true;  } else   if (taxonFile.exists() || mappingFile.exists()) {    throw new NoTalkbackSlimException("Reference SDF does not contain both taxonomy and sequences lookup");  } else {    return false;  }}  }
class C{  public void deselectSubset(int i){  this.mask[i]=false;  recalculateTableIndices();}  }
class C{  @SuppressWarnings("unchecked") protected void notify(LocoNetSlot s){  Vector<SlotListener> v;synchronized (this) {    v=(Vector<SlotListener>)slotListeners.clone();  }  if (log.isDebugEnabled()) {    log.debug("notify " + v.size() + " SlotListeners about slot "+ s.getSlot());  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    SlotListener client=v.elementAt(i);    client.notifyChangedSlot(s);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x8ACD1F73,version=150) public int sceHttpSetConnectTimeOut(int templateId,int timeout){  return 0;}  }
class C{  protected boolean okToDrag(){  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.363 -0500",hash_original_method="7E1551F3E39A01E70E4CFF4FAB6C7AC5",hash_generated_method="0BEA9D56F8E11881D5EAFC0DB244A1CD") @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SecretKeySpec)) {    return false;  }  SecretKeySpec ks=(SecretKeySpec)obj;  return (algorithm.equalsIgnoreCase(ks.algorithm)) && (Arrays.equals(key,ks.key));}  }
class C{  private static long[] des_setkey(long keyword){  long K=perm6464(keyword,PC1ROT);  long[] KS=new long[16];  KS[0]=K & ~0x0303030300000000L;  for (int i=1; i < 16; i++) {    KS[i]=K;    K=perm6464(K,PC2ROT[Rotates[i] - 1]);    KS[i]=K & ~0x0303030300000000L;  }  return KS;}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  protected boolean onKeyDown(int featureId,int keyCode,KeyEvent event){  final KeyEvent.DispatcherState dispatcher=mDecor != null ? mDecor.getKeyDispatcherState() : null;switch (keyCode) {case KeyEvent.KEYCODE_VOLUME_UP:case KeyEvent.KEYCODE_VOLUME_DOWN:case KeyEvent.KEYCODE_VOLUME_MUTE:{      getAudioManager().handleKeyDown(event,mVolumeControlStreamType);      return true;    }case KeyEvent.KEYCODE_MENU:{    onKeyDownPanel((featureId < 0) ? FEATURE_OPTIONS_PANEL : featureId,event);    return true;  }case KeyEvent.KEYCODE_BACK:{  if (event.getRepeatCount() > 0)   break;  if (featureId < 0)   break;  if (dispatcher != null) {    dispatcher.startTracking(event,this);  }  return true;}}return false;}  }
class C{  protected static void prepareSparseMatrix(SparseMatrix adjMatrix){  for (int i=0; i != adjMatrix.getRowsCount(); i++) {    double sum=0.0;    ArrayList<Pair> row=adjMatrix.getRow(i);    for (int j=0; j != row.size(); j++) {      sum+=row.get(j).getSecond();    }    if (sum != 0.0) {      for (int j=0; j != row.size(); j++) {        double old_value=row.get(j).getSecond();        row.get(j).setSecond(old_value / sum);      }    }  }  adjMatrix.inv();}  }
class C{  public ReferenceTypeNode clone(){  ReferenceTypeNode result=new ReferenceTypeNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.IsAbstract=IsAbstract;  result.Symmetric=Symmetric;  result.InverseName=InverseName;  return result;}  }
class C{  public boolean isEmpty(){  final Segment<V>[] segments=this.segments;  int[] mc=new int[segments.length];  int mcsum=0;  for (int i=0; i < segments.length; ++i) {    if (segments[i].count != 0)     return false; else     mcsum+=mc[i]=segments[i].modCount;  }  if (mcsum != 0) {    for (int i=0; i < segments.length; ++i) {      if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;    }  }  return true;}  }
class C{  public boolean contains(int x,int y,int z){  return x >= this.x1 && x <= this.x2 && y >= this.y1 && y <= this.y2 && z >= this.z1 && z <= this.z2;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public VirtualArrayRestRep createVirtualArray(VirtualArrayCreateParam param){  checkDuplicateLabel(VirtualArray.class,param.getLabel());  VirtualArray varray=new VirtualArray();  varray.setId(URIUtil.createId(VirtualArray.class));  varray.setLabel(param.getLabel());  if (param.getBlockSettings().getAutoSanZoning() != null) {    varray.setAutoSanZoning(param.getBlockSettings().getAutoSanZoning());  } else {    varray.setAutoSanZoning(true);  }  if (param.getObjectSettings().getProtectionType() != null) {    varray.setProtectionType(param.getObjectSettings().getProtectionType());  }  _dbClient.createObject(varray);  auditOp(OperationTypeEnum.CREATE_VARRAY,true,null,param.getLabel(),varray.getAutoSanZoning().toString(),varray.getId().toString());  return map(varray);}  }
class C{  private static int encodedSize(PackedInts.Format format,int packedIntsVersion,int bitsPerValue){  final long byteCount=format.byteCount(packedIntsVersion,BLOCK_SIZE,bitsPerValue);  assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;  return (int)byteCount;}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public MethodParamsRule(boolean addParameterJavadoc){  this.addParameterJavadoc=addParameterJavadoc;}  }
class C{  RbrRowChange(RbrTableChangeSet changeSet,int index){  this.changeSet=changeSet;  this.index=index;}  }
class C{  public static CheckBox createToggle(String text){  CheckBox cb=new CheckBox(text,null);  cb.setToggle(true);  return cb;}  }
class C{  public static boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static Map<Integer,Integer> createIdxFromKey(int keys[]){  Map<Integer,Integer> idxFromKey=new ConcurrentHashMap<Integer,Integer>();  for (int i=0; i < keys.length; i++) {    idxFromKey.put(keys[i],i);  }  return idxFromKey;}  }
class C{  private boolean eofInBlock(){  ensureBlocksNotEmpty();  ensureNotClosed();  return relativePos >= segmentLen;}  }
class C{  public MultiExpressionScript(TextResource expressionResource){  script=expressionResource.resourceText();}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public void output(OutputStream out){  String encoding=null;  if (getCodeSet() != null) {    encoding=getCodeSet();  } else {    encoding="UTF-16BE";  }  try {    out.write(createStartTag().getBytes(encoding));    if (getFilterState())     out.write(getFilter().process(getTagText()).getBytes(encoding)); else     out.write(getTagText().getBytes(encoding));    if (getNeedClosingTag())     out.write(createEndTag().getBytes(encoding));  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace(new PrintWriter(out));  }catch (  IOException ioe) {    ioe.printStackTrace(new PrintWriter(out));  }}  }
class C{  public CScrollPane(){  this(null,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public void testListener() throws Exception {  startGrids(2);  assert fired.await(5000,TimeUnit.MILLISECONDS);}  }
class C{  public String generateSourceCode(File inFile,File outFile){  Fingerprint fingerprint;  String name=null;  try {    JAXBContext jcx=JAXBContext.newInstance("TemplateEngine/fingerprint3");    fingerprint=(Fingerprint)jcx.createUnmarshaller().unmarshal(inFile);    name=fingerprint.getHeader().getName();    putFingerprint(name,fingerprint);    generateSourceCode(name);    writeSourceCode(name,outFile);  } catch (  JAXBException e) {    e.printStackTrace();  }  return name;}  }
class C{  private RDFList createQuadsList(List<Quad> quads){  List<Resource> members=new LinkedList<Resource>();  Node nestedGraph=null;  List<Resource> nested=null;  Iterator<Quad> it=quads.iterator();  while (it.hasNext()) {    Quad quad=it.next();    if (nestedGraph != null && !nestedGraph.equals(quad.getGraph())) {      members.add(createNestedNamedGraph(nestedGraph,nested));      nestedGraph=null;    }    Resource triple=createTriple(quad);    if (quad.isDefaultGraph()) {      members.add(triple);    } else {      if (!quad.getGraph().equals(nestedGraph)) {        nested=new LinkedList<Resource>();        nestedGraph=quad.getGraph();      }      nested.add(triple);      if (!it.hasNext()) {        members.add(createNestedNamedGraph(nestedGraph,nested));      }    }  }  return model.createList(members.iterator());}  }
class C{  private void add(ThreadGroup g) throws IllegalThreadStateException {synchronized (this.childrenGroupsLock) {    if (!isDestroyed) {      if (childrenGroups.length == numGroups) {        ThreadGroup[] newGroups=new ThreadGroup[childrenGroups.length * 2];        System.arraycopy(childrenGroups,0,newGroups,0,numGroups);        newGroups[numGroups++]=g;        childrenGroups=newGroups;      } else {        childrenGroups[numGroups++]=g;      }    } else {      throw new IllegalThreadStateException();    }  }}  }
class C{  public SpkacException(String message){  super(message);}  }
class C{  @Override public Phase finalPhase(){  return right;}  }
class C{  public MemLRUCapacityController(int megabytes,Region region){  this(megabytes,null,region);}  }
class C{  static protected void expandElement(Element el,List<Element> list){  list.addAll(el.getChildren("display"));  List<Element> children=el.getChildren();  for (int i=0; i < children.size(); i++) {    expandElement(children.get(i),list);  }}  }
class C{  public float version(){  String x=this.get(Schema.version);  if (x == null)   return 0.0f;  int p=x.indexOf('/');  if (p < 0)   return 0.0f;  x=x.substring(0,p);  try {    return Float.parseFloat(x);  } catch (  final NumberFormatException e) {    return 0.0f;  }}  }
class C{  public double evaluateModelOnce(Classifier classifier,Instance instance) throws Exception {  return evaluationForSingleInstance(classifier,instance,false);}  }
class C{  public Vector3(){  this(0,0,0);}  }
class C{  public boolean isRespectingAspectRatio(){  return _respectAspectRatio;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:10.443 -0500",hash_original_method="364284D6387231DFE8BEB00860E244AE",hash_generated_method="94FCF7D6584B29E11994CD05B47D594C") public boolean isAlphanumeric(){  return ton == TON_ALPHANUMERIC;}  }
class C{  public void clearLastUsedServerURI(){  preferenceStore.setToDefault(UIPreferenceConstants.LAST_SERVER_URI);}  }
class C{  public static void compress(){  String s=BinaryStdIn.readString();  char[] input=s.toCharArray();  int[] freq=new int[R];  for (int i=0; i < input.length; i++)   freq[input[i]]++;  Node root=buildTrie(freq);  String[] st=new String[R];  buildCode(st,root,"");  writeTrie(root);  BinaryStdOut.write(input.length);  for (int i=0; i < input.length; i++) {    String code=st[input[i]];    for (int j=0; j < code.length(); j++) {      if (code.charAt(j) == '0') {        BinaryStdOut.write(false);      } else       if (code.charAt(j) == '1') {        BinaryStdOut.write(true);      } else       throw new IllegalStateException("Illegal state");    }  }  BinaryStdOut.close();}  }
class C{  public int size(){  return symbols.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.575 -0500",hash_original_method="10CBFF06ED80A3585304A13176ACBF2F",hash_generated_method="14E7760AF34F964CBE0CEBC0D64090EB") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public Object encode(Object raw) throws EncoderException {  if (!(raw instanceof byte[])) {    throw new EncoderException("argument not a byte array");  }  return toAsciiChars((byte[])raw);}  }
class C{  public void testRadix36Neg(){  String value="-uhguweut98iu4h3478tq3985pq98yeiuth33485yq4aiuhalai485yiaehasdkr8tywi5uhslei8";  int radix=36;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  String formatNumberToPlainText(TemplateNumberModel number,TemplateNumberFormat format,Expression exp,boolean useTempModelExc) throws TemplateException {  try {    return EvalUtil.assertFormatResultNotNull(format.formatToPlainText(number));  } catch (  TemplateValueFormatException e) {    throw MessageUtil.newCantFormatNumberException(format,exp,e,useTempModelExc);  }}  }
class C{  public boolean hasValidCipherSuite(){  return !CipherSuite.TLS_NULL_WITH_NULL_NULL.equals(cipherSuite);}  }
class C{  public Map<String,List<File>> findFilesGroupedByBaseName(){  Map<String,List<File>> baseLogFiles=new HashMap<String,List<File>>();  String fileName;  List<File> logFiles=getAllFilesMatchingGlobPattern();  List<File> sameBaseFiles;  for (  File file : logFiles) {    String baseName;    fileName=file.getName();    int dashIndex=fileName.indexOf("-");    int dotIndex=fileName.indexOf(".");    int subIndex;    if (dotIndex > 0 && dashIndex > 0) {      subIndex=(dotIndex < dashIndex) ? dotIndex : dashIndex;    } else {      subIndex=dotIndex > 0 ? dotIndex : dashIndex;    }    if (subIndex > 0) {      baseName=fileName.substring(0,subIndex);    } else {      baseName=fileName;    }    logger.debug("fileName: {}. baseName: {}",fileName,baseName);    if ((sameBaseFiles=baseLogFiles.get(baseName)) == null) {      sameBaseFiles=new ArrayList<File>();    }    sameBaseFiles.add(file);    baseLogFiles.put(baseName,sameBaseFiles);  }  return baseLogFiles;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.857 -0500",hash_original_method="104889BB491104C94E7C1142A3F4BAAD",hash_generated_method="EF0F2A8C9CCE210ADFD5AE4DB7B49EE8") public final Iterator<AuthorityEntry> authoritiesIterator(){  return mDataAuthorities != null ? mDataAuthorities.iterator() : null;}  }
class C{  protected void load() throws BackingStoreException {  load(filePath);}  }
class C{  public int lastIndexOf(Object elem,int index){  return delegate.lastIndexOf(elem,index);}  }
class C{  public int limit(){  return limit;}  }
class C{  private void parseTestClass(String testClassName,TestSuiteBuilder testSuiteBuilder){  int methodSeparatorIndex=testClassName.indexOf('#');  String testMethodName=null;  if (methodSeparatorIndex > 0) {    testMethodName=testClassName.substring(methodSeparatorIndex + 1);    testClassName=testClassName.substring(0,methodSeparatorIndex);  }  testSuiteBuilder.addTestClassByName(testClassName,testMethodName,getTargetContext());}  }
class C{  static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public DelegatingServletInputStream(final InputStream proxy){  this.proxy=proxy;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private void removePlaylistTextField(){  showTableInfoPane();  if (!playlistInfoGridPane.getChildren().contains(playlistTitleLabel)) {    playlistInfoGridPane.getChildren().remove(playlistTitleTextField);    playlistInfoGridPane.add(playlistTitleLabel,0,0);  }}  }
class C{  public void testGetMacLength(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  for (int i=0; i < macs.length; i++) {    assertTrue("Length should be positive",(macs[i].getMacLength() >= 0));  }}  }
class C{  public static PsiFile findLayoutResource(PsiElement element){  if (element == null) {    return null;  }  if (!(element instanceof PsiIdentifier)) {    return null;  }  PsiElement layout=element.getParent().getFirstChild();  if (layout == null) {    return null;  }  if (!"R.layout".equals(layout.getText())) {    return null;  }  Project project=element.getProject();  String name=String.format("%s.xml",element.getText());  return resolveLayoutResourceFile(element,project,name);}  }
class C{  protected boolean isItemBoundToOtherPlayer(final Player player,final RPObject object){  if (object instanceof Item) {    final Item item=(Item)object;    if (item.isBound() && !player.isBoundTo(item)) {      player.sendPrivateText("This " + item.getName() + " is a special reward for "+ item.getBoundTo()+ ". You do not deserve to use it.");      return true;    }  }  return false;}  }
class C{  public LoggingFraction consoleHandler(Level level,String formatter){  consoleHandler(new ConsoleHandler(CONSOLE).level(level).namedFormatter(formatter));  return this;}  }
class C{  private void logQueueStatus(){  LOG.debug("Waiting tasks: high priority: {}, batch: {}",highPriorityExecutor.getQueue().size(),batchExecutor.getQueue().size());}  }
class C{  public void done(){  m_trainYs=m_trainFs=m_probs=null;  m_data=null;}  }
class C{  private static void checkChannelName(final String name){  if (!NAME_PATTERN.matcher(name).matches()) {    throw new IllegalArgumentException(String.format("Channel name must match pattern: %s",NAME_PATTERN.pattern()));  }}  }
class C{  public boolean hasNext() throws SQLException {  boolean hasNext=(this.nextRow != null);  if (!hasNext && !this.streamerClosed) {    this.io.closeStreamer(this);    this.streamerClosed=true;  }  return hasNext;}  }
class C{  public Assignment(Map<String,Value> pairs){  this();  addPairs(pairs);}  }
class C{  public OutfitChangerBehaviour(final Map<String,Integer> priceList,final int endurance,final String wearOffMessage){  super(priceList);  this.endurance=endurance;  this.wearOffMessage=wearOffMessage;}  }
class C{  public void fireNetMapEvent(Properties eventProperties){  java.util.Vector targets;  NetMapListener target;  Object theSource=getSource();  targets=getListeners();  if (listeners == null) {    return;  }  int nTargets=targets.size();  if (nTargets == 0)   return;  NetMapEvent evt=new NetMapEvent(theSource,eventProperties);  for (int i=0; i < nTargets; i++) {    target=(NetMapListener)targets.elementAt(i);    if (Debug.debugging("mapbean")) {      Debug.output("NetMapListenerSupport.fireNetMapEvent(): " + "target is: " + target);    }    target.catchEvent(evt);  }}  }
class C{  private boolean equal(long[] array1,long[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public Bitmap syncLoadImage(String uri){  return mImageLoader.syncLoad(uri);}  }
class C{  public void testGetRowCount(){  System.out.println("getRowCount");  TableHelper instance=new TableHelper(new ArrayList<TableEntry>());  int expResult=0;  int result=instance.getRowCount();  assertEquals(expResult,result);}  }
class C{  public void append(byte[] key,byte[] value) throws IOException {  append(key,0,key.length,value,0,value.length);}  }
class C{  private void _serialize(PageContext pc,Set test,Object object,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  if (object == null || object == NULL) {    sb.append(goIn());    sb.append("null");    return;  }  if (object instanceof String || object instanceof StringBuilder) {    sb.append(goIn());    sb.append(StringUtil.escapeJS(object.toString(),'"',charsetEncoder));    return;  }  if (object instanceof Character) {    sb.append(goIn());    sb.append(StringUtil.escapeJS(String.valueOf(((Character)object).charValue()),'"',charsetEncoder));    return;  }  if (object instanceof Number) {    sb.append(goIn());    sb.append(Caster.toString(((Number)object)));    return;  }  if (object instanceof Boolean) {    sb.append(goIn());    sb.append(Caster.toString(((Boolean)object).booleanValue()));    return;  }  if (object instanceof DateTime) {    _serializeDateTime((DateTime)object,sb);    return;  }  if (object instanceof Date) {    _serializeDate((Date)object,sb);    return;  }  if (object instanceof Node) {    _serializeXML((Node)object,sb);    return;  }  if (object instanceof TimeSpan) {    _serializeTimeSpan((TimeSpan)object,sb);    return;  }  if (object instanceof File) {    _serialize(pc,test,((File)object).getAbsolutePath(),sb,serializeQueryByColumns,done);    return;  }  if (object instanceof ScriptConvertable) {    sb.append(((ScriptConvertable)object).serialize());    return;  }  Object raw=LazyConverter.toRaw(object);  if (done.contains(raw)) {    sb.append(goIn());    sb.append("null");    return;  }  done.add(raw);  try {    if (object instanceof Component) {      _serializeComponent(pc,test,(Component)object,sb,serializeQueryByColumns,done);      return;    }    if (object instanceof UDF) {      _serializeUDF(pc,test,(UDF)object,sb,serializeQueryByColumns,done);      return;    }    if (object instanceof Struct) {      _serializeStruct(pc,test,(Struct)object,sb,serializeQueryByColumns,true,done);      return;    }    if (object instanceof Map) {      _serializeMap(pc,test,(Map)object,sb,serializeQueryByColumns,done);      return;    }    if (object instanceof Array) {      _serializeArray(pc,test,(Array)object,sb,serializeQueryByColumns,done);      return;    }    if (object instanceof List) {      _serializeList(pc,test,(List)object,sb,serializeQueryByColumns,done);      return;    }    if (object instanceof Query) {      _serializeQuery(pc,test,(Query)object,sb,serializeQueryByColumns,done);      return;    }    if (Decision.isNativeArray(object)) {      if (object instanceof char[])       _serialize(pc,test,new String((char[])object),sb,serializeQueryByColumns,done); else {        _serializeArray(pc,test,ArrayUtil.toReferenceType(object,ArrayUtil.OBJECT_EMPTY),sb,serializeQueryByColumns,done);      }      return;    }    if (object instanceof ObjectWrap) {      try {        _serialize(pc,test,((ObjectWrap)object).getEmbededObject(),sb,serializeQueryByColumns,done);      } catch (      PageException e) {        if (object instanceof JavaObject) {          _serializeClass(pc,test,((JavaObject)object).getClazz(),null,sb,serializeQueryByColumns,done);        } else         throw new ConverterException("can't serialize Object of type [ " + Caster.toClassName(object) + " ]");      }      return;    }    _serializeClass(pc,test,object.getClass(),object,sb,serializeQueryByColumns,done);  }  finally {    done.remove(raw);  }}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  int action=MotionEventCompat.getActionMasked(ev);  if (action == MotionEvent.ACTION_DOWN) {    stopAutoScroll();  } else   if (ev.getAction() == MotionEvent.ACTION_UP) {    startAutoScroll();  }  getParent().requestDisallowInterceptTouchEvent(true);  return super.dispatchTouchEvent(ev);}  }
class C{  @RequestMapping(value="/watercharges/paywatertax",method=POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String payWaterTax(@Valid @RequestBody final PayWaterTaxDetails payWaterTaxDetails,final HttpServletRequest request){  WaterReceiptDetails waterReceiptDetails=null;  try {    final ErrorDetails errorDetails=validatePaymentDetails(payWaterTaxDetails);    if (null != errorDetails)     return JsonConvertor.convert(errorDetails); else {      payWaterTaxDetails.setSource(request.getSession().getAttribute("source") != null ? request.getSession().getAttribute("source").toString() : "");      waterReceiptDetails=waterTaxExternalService.payWaterTax(payWaterTaxDetails);    }  } catch (  final ValidationException e) {    final List<ErrorDetails> errorList=new ArrayList<ErrorDetails>(0);    final List<ValidationError> errors=e.getErrors();    for (    final ValidationError ve : errors) {      final ErrorDetails er=new ErrorDetails();      er.setErrorCode(ve.getKey());      er.setErrorMessage(ve.getMessage());      errorList.add(er);    }    JsonConvertor.convert(errorList);  }catch (  final Exception e) {    final List<ErrorDetails> errorList=new ArrayList<ErrorDetails>(0);    final ErrorDetails er=new ErrorDetails();    er.setErrorCode(e.getMessage());    er.setErrorMessage(e.getMessage());    errorList.add(er);    JsonConvertor.convert(errorList);  }  return JsonConvertor.convert(waterReceiptDetails);}  }
class C{  public boolean isBlankOrNull(String input){  return GenericValidator.isBlankOrNull(input);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private boolean nextPartition(){  assert !exhausted;  if (Thread.interrupted()) {    throw new RuntimeException(new InterruptedException());  }  if (!locatorItr.hasNext()) {    if (log.isInfoEnabled())     log.info("No more locators");    return false;  }  locator=locatorItr.next();  if (log.isInfoEnabled())   log.info("locator=" + locator);  rangeQuery();  assert src != null;  return true;}  }
class C{  @Uninterruptible TypeReference annotationType(){  return type;}  }
class C{  public int ensurePortIsAvailable(final Integer port){  if (null == port) {    final int nextPort=getNextAvailablePort();    LOGGER.warn("Port was null. Trying to use next available port: " + nextPort + ".");    return nextPort;  }  if (!isValidPort(port)) {    final int nextPort=getNextAvailablePort();    LOGGER.warn("Port was invalid: " + port + ". Trying to use next available port: "+ nextPort+ ".");    return nextPort;  }  if (isPortInUse(port)) {    final int nextPort=getNextAvailablePort();    LOGGER.warn("Port is already in use: " + port + ". Trying to use next available port: "+ nextPort+ ".");    return nextPort;  }  return port;}  }
class C{  public boolean isRegistered(String runnerId){  return getDescriptors().get(runnerId) != null;}  }
class C{  public boolean allReplicasActive(ShardRouting shardRouting){  final List<ShardRouting> shards=assignedShards(shardRouting.shardId());  if (shards.isEmpty() || shards.size() < this.routingTable.index(shardRouting.index()).shard(shardRouting.id()).size()) {    return false;  }  for (  ShardRouting shard : shards) {    if (!shard.active()) {      return false;    }  }  return true;}  }
