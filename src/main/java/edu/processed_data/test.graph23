class C{  @NonNull public static Observable<LoginResult> loginWithButton(@NonNull final LoginButton loginButton,@NonNull final Fragment fragment){  checkNotNull(fragment,"fragment == null");  checkNotNull(loginButton,"loginButton == null");  ReactiveFB.checkInit();  return Observable.create(new LoginWithButtonOnSubscribe(loginButton));}  }
class C{  public void visitPhpMethod(Method method){  this.inspectCallable(method);}  }
class C{  public static synchronized void removeAccountOnLS(Account account){  accountsOnLS.remove(account.getId());}  }
class C{  private List<LatLng> decodePoly(String encoded){  List<LatLng> poly=new ArrayList<LatLng>();  int index=0, len=encoded.length();  int lat=0, lng=0;  while (index < len) {    int b, shift=0, result=0;    do {      b=encoded.charAt(index++) - 63;      result|=(b & 0x1f) << shift;      shift+=5;    } while (b >= 0x20);    int dlat=((result & 1) != 0 ? ~(result >> 1) : (result >> 1));    lat+=dlat;    shift=0;    result=0;    do {      b=encoded.charAt(index++) - 63;      result|=(b & 0x1f) << shift;      shift+=5;    } while (b >= 0x20);    int dlng=((result & 1) != 0 ? ~(result >> 1) : (result >> 1));    lng+=dlng;    LatLng p=new LatLng((((double)lat / 1E5)),(((double)lng / 1E5)));    poly.add(p);  }  return poly;}  }
class C{  public void sendToFilterModule(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final int filterType){  doSendToFilterModule(currentSourceDataTag,update,new SourceDataTagQuality(),false,filterType);}  }
class C{  public RedGradient(int maxCount){  this.maxCount=maxCount;  factor=maxCount / Math.log(maxCount);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public DistributedLogClientBuilder handshakeTracing(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setHandshakeTracingEnabled(enabled);  return newBuilder;}  }
class C{  protected WallGetQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private static boolean hasSelfPermission(Context context,String permission){  try {    return checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;  } catch (  RuntimeException t) {    return false;  }}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public static int pow(final int k,final int e) throws MathIllegalArgumentException, MathRuntimeException {  if (e < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);  }  int exp=e;  int result=1;  int k2p=k;  while (true) {    if ((exp & 0x1) != 0) {      result=mulAndCheck(result,k2p);    }    exp>>=1;    if (exp == 0) {      break;    }    k2p=mulAndCheck(k2p,k2p);  }  return result;}  }
class C{  protected WallCreateCommentQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  NetNode agg3way(NetNode x,NetNode y,NetNode z,Stack<NetNode> amalgs,double[][] D,NetNode netNodes,int num_nodes){  NetNode u=new NetNode();  u.id=num_nodes + 1;  u.ch1=x;  u.ch2=y;  NetNode v=new NetNode();  v.id=num_nodes + 2;  v.ch1=y;  v.ch2=z;  u.next=x.next;  u.prev=x.prev;  if (u.next != null)   u.next.prev=u;  if (u.prev != null)   u.prev.next=u;  v.next=z.next;  v.prev=z.prev;  if (v.next != null)   v.next.prev=v;  if (v.prev != null)   v.prev.next=v;  if (y.next != null)   y.next.prev=y.prev;  if (y.prev != null)   y.prev.next=y.next;  u.nbr=v;  v.nbr=u;  for (NetNode p=netNodes.next; p != null; p=p.next) {    D[u.id][p.id]=D[p.id][u.id]=(2.0 / 3.0) * D[x.id][p.id] + D[y.id][p.id] / 3.0;    D[v.id][p.id]=D[p.id][v.id]=(2.0 / 3.0) * D[z.id][p.id] + D[y.id][p.id] / 3.0;  }  D[u.id][u.id]=D[v.id][v.id]=0.0;  amalgs.push(u);  return u;}  }
class C{  private static String[] mapVolumes(ContainerDescription cd,HostSelection hostSelection){  if (cd.volumes == null || cd.volumes.length == 0) {    return null;  }  return Arrays.stream(cd.volumes).map(null).filter(null).toArray(null);}  }
class C{  public UnitValidationException(Unit concerned,Body body,String strMessage,boolean isWarning){  super(concerned,strMessage,formatMsg(strMessage,concerned,body),isWarning);}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  int schemeLength=p_scheme.length();  for (int i=1; i < schemeLength; ++i) {    testChar=p_scheme.charAt(i);    if (!isSchemeCharacter(testChar)) {      return false;    }  }  return true;}  }
class C{  public NGramGaussNormDocument(){  Graph=new DocumentNGramGaussNormGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  @Override public void startEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  super.startEntity(name,identifier,encoding,augs);  if (!name.equals("[xml]") && fEntityScanner.isExternal()) {    setScannerState(SCANNER_STATE_TEXT_DECL);  }  if (fDocumentHandler != null && name.equals("[xml]")) {    fDocumentHandler.startDocument(fEntityScanner,encoding,fNamespaceContext,null);  }}  }
class C{  public PollsGetVotersQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  WeakRef(Remote impl){  super(impl,queue);}  }
class C{  private AudioInputStream synthesizeUsingF0Modification(int backchannelNumber,double[] pScalesArray,double[] tScalesArray,AudioFileFormat aft) throws SynthesisException {  if (backchannelNumber > unitFileReader.getNumberOfUnits()) {    throw new IllegalArgumentException("requesting unit should not be more than number of units");  }  if (!f0ContourImposeSupport) {    throw new SynthesisException("Mary configuration of this voice doesn't support intonation contour imposition");  }  VocalizationUnit bUnit=unitFileReader.getUnit(backchannelNumber);  long start=bUnit.startTime;  int duration=bUnit.duration;  Datagram[] frames=null;  try {    frames=audioTimeline.getDatagrams(start,duration);  } catch (  IOException e) {    throw new SynthesisException("cannot get audio frames from timeline file " + e);  }  assert frames != null : "Cannot generate audio from null frames";  pScalesArray=MathUtils.arrayResize(pScalesArray,frames.length);  tScalesArray=MathUtils.arrayResize(tScalesArray,frames.length);  assert tScalesArray.length == pScalesArray.length;  assert frames.length == tScalesArray.length;  AudioFormat af;  if (aft == null) {    float sampleRate=16000.0F;    int sampleSizeInBits=16;    int channels=1;    boolean signed=true;    boolean bigEndian=false;    af=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);  } else {    af=aft.getFormat();  }  double[] audio_double=(new FDPSOLAProcessor()).processDatagram(frames,null,af,null,pScalesArray,tScalesArray,false);  double MaxSample=MathUtils.getAbsMax(audio_double);  for (int i=0; i < audio_double.length; i++) {    audio_double[i]=0.3 * (audio_double[i] / MaxSample);  }  return (new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af));}  }
class C{  public static boolean isNimbusGTKTheme(){  return UIUtils.isNimbusGTKTheme();}  }
class C{  protected void addAuxiliaryExceptionalEdges(){  for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=trapIt.next();    Unit handler=trap.getHandlerUnit();    Unit pred=handler;    while (this.unitToPreds.get(pred).size() > 0)     pred=this.unitToPreds.get(pred).get(0);    handler2header.put(handler,pred);    Unit ehnop;    if (try2nop.containsKey(trap.getBeginUnit()))     ehnop=try2nop.get(trap.getBeginUnit()); else {      ehnop=new EHNopStmt();      try2nop.put(trap.getBeginUnit(),ehnop);    }  }  Hashtable<Unit,Boolean> nop2added=new Hashtable<Unit,Boolean>();  AddExceptionalEdge:   for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=trapIt.next();    Unit b=trap.getBeginUnit();    Unit handler=trap.getHandlerUnit();    handler=handler2header.get(handler);    if (this.unitToPreds.containsKey(handler)) {      List<Unit> handlerPreds=this.unitToPreds.get(handler);      for (Iterator<Unit> preditr=handlerPreds.iterator(); preditr.hasNext(); )       if (try2nop.containsValue(preditr.next()))       continue AddExceptionalEdge;    } else     continue;    Unit ehnop=try2nop.get(b);    if (!nop2added.containsKey(ehnop)) {      List<Unit> predsOfB=getPredsOf(b);      List<Unit> predsOfehnop=new ArrayList<Unit>(predsOfB);      for (Iterator<Unit> itr=predsOfB.iterator(); itr.hasNext(); ) {        Unit a=itr.next();        List<Unit> succsOfA=this.unitToSuccs.get(a);        succsOfA.remove(b);        succsOfA.add((Unit)ehnop);      }      predsOfB.clear();      predsOfB.add((Unit)ehnop);      this.unitToPreds.put((Unit)ehnop,predsOfehnop);    }    if (!this.unitToSuccs.containsKey(ehnop))     this.unitToSuccs.put(ehnop,new ArrayList<Unit>());    List<Unit> succsOfehnop=this.unitToSuccs.get(ehnop);    if (!succsOfehnop.contains(b))     succsOfehnop.add(b);    succsOfehnop.add(handler);    if (!this.unitToPreds.containsKey(handler))     this.unitToPreds.put(handler,new ArrayList<Unit>());    List<Unit> predsOfhandler=this.unitToPreds.get(handler);    predsOfhandler.add((Unit)ehnop);    Chain<Unit> units=body.getUnits().getNonPatchingChain();    if (!units.contains(ehnop))     units.insertBefore((Unit)ehnop,b);    nop2added.put(ehnop,Boolean.TRUE);  }}  }
class C{  @SuppressWarnings("unchecked") private void restoreChangedIconsAndTexts(){  Bundle restoredBundle=savedInstanceState;  if (restoredBundle != null) {    if (restoredBundle.containsKey(CHANGED_ICON_AND_TEXT_BUNDLE_KEY)) {      changedItemAndIconHashMap=(HashMap<Integer,SpaceItem>)restoredBundle.getSerializable(CHANGED_ICON_AND_TEXT_BUNDLE_KEY);      if (changedItemAndIconHashMap != null) {        SpaceItem spaceItem;        for (int i=0; i < changedItemAndIconHashMap.size(); i++) {          spaceItem=changedItemAndIconHashMap.get(i);          spaceItems.get(i).setItemIcon(spaceItem.getItemIcon());          spaceItems.get(i).setItemName(spaceItem.getItemName());        }      }    }    if (restoredBundle.containsKey(CENTRE_BUTTON_ICON_KEY)) {      centreButtonIcon=restoredBundle.getInt(CENTRE_BUTTON_ICON_KEY);      fab.setImageResource(centreButtonIcon);    }    if (restoredBundle.containsKey(SPACE_BACKGROUND_COLOR_KEY)) {      int backgroundColor=restoredBundle.getInt(SPACE_BACKGROUND_COLOR_KEY);      changeSpaceBackgroundColor(backgroundColor);    }  }}  }
class C{  public static Predicate<EmailData> isReceivedAfter(final DateTime dateTime){  return null;}  }
class C{  public static byte[] loadPemFileAsBytes(final String file) throws IOException {  final PemReader pemReader=new PemReader(new FileReader(file));  final PemObject pemObject=pemReader.readPemObject();  final byte[] content=pemObject.getContent();  logger.debug("Reading PEM file {}, type = {}",file,pemObject.getType());  pemReader.close();  return content;}  }
class C{  @Nullable public static NewBindingKey peelMapWithBuiltinValue(NewBindingKey key){  Preconditions.checkState(isMap(key),String.format("Expect a map but got %s",key));  ParameterizedTypeName parameterizedTypeName=(ParameterizedTypeName)key.getTypeName();  TypeName valueType=parameterizedTypeName.typeArguments.get(1);  if (hasBuiltinBinding(valueType)) {    TypeName mapKeyType=parameterizedTypeName.typeArguments.get(0);    TypeName elementType=Iterables.getOnlyElement(((ParameterizedTypeName)valueType).typeArguments);    TypeName newType=ParameterizedTypeName.get(ClassName.get(Map.class),mapKeyType,elementType);    return NewBindingKey.get(newType,key.getQualifier());  }  return null;}  }
class C{  public void process(Document doc){  TreeWalker tw=DomUtils.createTreeWalker(doc,MaryXML.PROSODY);  Element e=null;  while ((e=(Element)tw.nextNode()) != null) {    Log.d(Mary.LOG,"Found prosody element around '" + DomUtils.getPlainTextBelow(e) + "'");    boolean hasRateAttribute=e.hasAttribute("rate");    boolean hasContourAttribute=e.hasAttribute("contour");    boolean hasPitchAttribute=e.hasAttribute("pitch");    NodeList nl=e.getElementsByTagName("ph");    if (nl.getLength() == 0) {      continue;    }    if (hasRateAttribute) {      applySpeechRateSpecifications(nl,e.getAttribute("rate"));    }    if (hasPitchAttribute || hasContourAttribute) {      double[] f0Contour=getF0Contour(nl);      double[] coeffs=Polynomial.fitPolynomial(f0Contour,1);      double[] baseF0Contour=Polynomial.generatePolynomialValues(coeffs,F0CONTOUR_LENGTH,0,1);      double[] diffF0Contour=new double[F0CONTOUR_LENGTH];      for (int i=0; i < f0Contour.length; i++) {        diffF0Contour[i]=f0Contour[i] - baseF0Contour[i];      }      if (hasPitchAttribute) {        baseF0Contour=applyPitchSpecifications(nl,baseF0Contour,e.getAttribute("pitch"));      }      if (hasContourAttribute) {        baseF0Contour=applyContourSpecifications(nl,baseF0Contour,e.getAttribute("contour"));      }      for (int i=0; i < f0Contour.length; i++) {        f0Contour[i]=diffF0Contour[i] + baseF0Contour[i];      }      setModifiedContour(nl,f0Contour);    }  }}  }
class C{  private void updateHeaderSeparator(){  String timePattern="";  if (SUtils.isApi_18_OrHigher()) {    timePattern=DateFormat.getBestDateTimePattern(mCurrentLocale,(mIs24HourView) ? "Hm" : "hm");  } else {    java.text.DateFormat timeFormat=java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT,mCurrentLocale);    if (timeFormat instanceof SimpleDateFormat)     timePattern=((SimpleDateFormat)timeFormat).toPattern();  }  final String separatorText;  final char[] hourFormats={'H','h','K','k'};  int hIndex=lastIndexOfAny(timePattern,hourFormats);  if (hIndex == -1) {    separatorText=":";  } else {    separatorText=Character.toString(timePattern.charAt(hIndex + 1));  }  mSeparatorView.setText(separatorText);}  }
class C{  public void clearSpanningTree(){  m_spanning=null;}  }
class C{  synchronized public boolean isExported(Remote obj){  return _identityExportObjTable.containsKey(new WeakKey(obj));}  }
class C{  public Webster(int port,String roots) throws BindException {  this.port=port;  initialize(roots);}  }
class C{  public boolean isApplicable(){  ChartViewer chartViewer=(ChartViewer)getViewer();  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();}  }
class C{  protected void onCreate(){  if (mCalled) {    throw new IllegalAccessError("don't call #onCreate() directly, call #create()");  }  mCalled=true;}  }
class C{  @Override public void newTagValueSent(final long tagID){  if (sourceDataTags == null) {    LOGGER.error("Tried to add a new tag while field sourceDataTags was null.");    return;  }  SourceDataTag tag=sourceDataTags.get(tagID);  if (tag == null) {    LOGGER.warn("Tried to count a tag not controlled by this class. (Tag-ID: '" + tagID + "')");  } else {    CounterMovingAverage average=movingAverages.get(tagID);    if (average == null) {      average=new CounterMovingAverage(numberOfCounters);      movingAverages.put(tagID,average);    }    average.increaseCurrentCounter();  }}  }
class C{  private AudioInputStream synthesizeUsingF0Modification(int backchannelNumber,float[] pScalesArray,float[] pScalesTimes,float[] tScalesArray,float[] tScalesTimes,AudioFileFormat aft) throws SynthesisException {  if (backchannelNumber > vHNMFeaturesReader.getNumberOfUnits()) {    throw new IllegalArgumentException("requesting unit should not be more than number of units");  }  if (!f0ContourImposeSupport) {    throw new SynthesisException("Mary configuration of this voice doesn't support intonation contour imposition");  }  BasicProsodyModifierParams pmodParams=new BasicProsodyModifierParams(tScalesArray,tScalesTimes,pScalesArray,pScalesTimes);  HntmSpeechSignal hnmSignal=vHNMFeaturesReader.getHntmSpeechSignal(backchannelNumber);  HntmSynthesizer hs=new HntmSynthesizer();  HntmSynthesizedSignal xhat=hs.synthesize(hnmSignal,null,null,pmodParams,null,analysisParams,synthesisParams);  AudioFormat af;  if (aft == null) {    float sampleRate=16000.0F;    int sampleSizeInBits=16;    int channels=1;    boolean signed=true;    boolean bigEndian=false;    af=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);  } else {    af=aft.getFormat();  }  double[] audio_double=xhat.output;  double MaxSample=MathUtils.getAbsMax(audio_double);  for (int i=0; i < audio_double.length; i++) {    audio_double[i]=0.3 * (audio_double[i] / MaxSample);  }  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af);  return oais;}  }
class C{  public static Bitmap rotateImage(Bitmap bitmap,String storagePath){  Bitmap resultBitmap=bitmap;  try {    ExifInterface exifInterface=new ExifInterface(storagePath);    int orientation=exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);    Matrix matrix=new Matrix();    if (orientation == ExifInterface.ORIENTATION_FLIP_HORIZONTAL) {      matrix.postScale(-1.0f,1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_180) {      matrix.postRotate(180);    } else     if (orientation == ExifInterface.ORIENTATION_FLIP_VERTICAL) {      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_TRANSPOSE) {      matrix.postRotate(-90);      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_90) {      matrix.postRotate(90);    } else     if (orientation == ExifInterface.ORIENTATION_TRANSVERSE) {      matrix.postRotate(90);      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_270) {      matrix.postRotate(270);    }    resultBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);    if (resultBitmap != bitmap) {      bitmap.recycle();    }  } catch (  Exception exception) {    Log_OC.e("BitmapUtil","Could not rotate the image: " + storagePath);  }  return resultBitmap;}  }
class C{  public Block(Unit aHead,Unit aTail,Body aBody,int aIndexInMethod,int aBlockLength,BlockGraph aBlockGraph){  mHead=aHead;  mTail=aTail;  mBody=aBody;  mIndexInMethod=aIndexInMethod;  mBlockLength=aBlockLength;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public grammaticalityEstimator(String sText,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  iWordDist=iWordWindow;  iCharDist=iCharWindow;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  FullTextDataString=sText;  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));  }}  }
class C{  private int detectType(String fileName) throws IOException, FTPIllegalReplyException, FTPException {  int start=fileName.lastIndexOf('.') + 1;  int stop=fileName.length();  if (start > 0 && start < stop - 1) {    String ext=fileName.substring(start,stop);    ext=ext.toLowerCase();    if (textualExtensionRecognizer.isTextualExt(ext)) {      return TYPE_TEXTUAL;    } else {      return TYPE_BINARY;    }  } else {    return TYPE_BINARY;  }}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  name=ownerDocument.getNodeName(fNodeIndex);}  }
class C{  private float[] calculatePlaneTransform(double[] point,double normal[],float[] openGlTdepth){  float[] openGlUp=new float[]{0,1,0,0};  float[] depthTOpenGl=new float[16];  Matrix.invertM(depthTOpenGl,0,openGlTdepth,0);  float[] depthUp=new float[4];  Matrix.multiplyMV(depthUp,0,depthTOpenGl,0,openGlUp,0);  float[] depthTplane=matrixFromPointNormalUp(point,normal,depthUp);  float[] openGlTplane=new float[16];  Matrix.multiplyMM(openGlTplane,0,openGlTdepth,0,depthTplane,0);  return openGlTplane;}  }
class C{  public static int calculateHate(Creature creature,int value){  Stat2 stat=new AdditionStat(StatEnum.BOOST_HATE,value,creature,0.1f);  return (int)(creature.getGameStats().getStat(StatEnum.BOOST_HATE,stat).getCurrent());}  }
class C{  public void addFormLocation(String name){  if (name != null) {    this.formLocationSet.add(name);  }}  }
class C{  public boolean isRename(){  return isRename;}  }
class C{  protected boolean filterCheck(VisualItem item){  if (filter == null)   return true;  try {    return filter.getBoolean(item);  } catch (  Exception e) {    Logger.getLogger(getClass().getName()).warning(e.getMessage() + "\n" + StringLib.getStackTrace(e));    return false;  }}  }
class C{  @Override public String asFieldName(){  throw new ClassCastException();}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  boolean result=(status.mState != State.CANCEL);  return result;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static String nullSafeToString(long[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public boolean isOp(){  return this.op;}  }
class C{  public boolean vta(){  return soot.PhaseOptions.getBoolean(options,"vta");}  }
class C{  public static FloatBuffer createVector2Buffer(FloatBuffer buf,int vertices){  if (buf != null && buf.limit() == 2 * vertices) {    buf.rewind();    return buf;  }  return createFloatBuffer(2 * vertices);}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  name=ownerDocument.getNodeName(fNodeIndex);  publicId=ownerDocument.getNodeValue(fNodeIndex);  systemId=ownerDocument.getNodeURI(fNodeIndex);  int extraDataIndex=ownerDocument.getNodeExtra(fNodeIndex);  ownerDocument.getNodeType(extraDataIndex);  notationName=ownerDocument.getNodeName(extraDataIndex);  version=ownerDocument.getNodeValue(extraDataIndex);  encoding=ownerDocument.getNodeURI(extraDataIndex);  int extraIndex2=ownerDocument.getNodeExtra(extraDataIndex);  baseURI=ownerDocument.getNodeName(extraIndex2);  inputEncoding=ownerDocument.getNodeValue(extraIndex2);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getParamKey() == null) ? 0 : getParamKey().hashCode());  result=prime * result + ((getParamValue() == null) ? 0 : getParamValue().hashCode());  result=prime * result + ((getCatalogId() == null) ? 0 : getCatalogId().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public static void v(Class<?> clazz,String msg){  if (isDebug) {    Log.v(clazz.getSimpleName(),msg);  }}  }
class C{  protected boolean matchesAnyOf(Set<TokenKind> kinds){  if (kinds.contains(currentToken())) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  private void checkModified(){  final long currentModifiedTime=file.lastModified();  if (currentModifiedTime != lastModified) {    System.out.print("Modified config.json externally. Will be reloaded now.");    final String content=FileHelper.readFile(file);    if (content != null) {      json=new JSONObject(content);    }    lastModified=currentModifiedTime;  }}  }
class C{  @Override public void publish(String topic,AWSIotQos qos,String payload,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.publish(topic,qos,payload,timeout);}  }
class C{  public void resetZoom(){  Iterator<FileFragment> entries=mCachedFragments.values().iterator();  while (entries.hasNext()) {    FileFragment fileFragment=(FileFragment)entries.next();    if (fileFragment instanceof PreviewImageFragment) {      ((PreviewImageFragment)fileFragment).getImageView().resetZoom();    }  }}  }
class C{  public void toBufferedImageRGB(INDArray arr,BufferedImage image){  if (arr.rank() < 3)   throw new IllegalArgumentException("Arr must be 3d");  image=scalingIfNeed(image,arr.size(-2),arr.size(-1),true);  for (int i=0; i < image.getWidth(); i++) {    for (int j=0; j < image.getHeight(); j++) {      int r=arr.slice(0).getInt(i,j);      int g=arr.slice(1).getInt(i,j);      int b=arr.slice(2).getInt(i,j);      int a=1;      int col=(a << 24) | (r << 16) | (g << 8)| b;      image.setRGB(i,j,col);    }  }}  }
class C{  @Override public void beforeFirst(){  s.beforeFirst();  isLhsEmpty=!s.next();  if (!isLhsEmpty)   resetIndex();}  }
class C{  public Math_Vector cpy(){  return new Math_Vector(x,y);}  }
class C{  public TopNMetric(String metricName){  this.type=TopNMetricType.NUMERIC;  this.metricName=Optional.of(metricName);  this.nested=Optional.empty();  this.previousStop=Optional.empty();}  }
class C{  @Override public double nextNormalizedDouble(){  return SQRT3 * (2 * generator.nextDouble() - 1.0);}  }
class C{  public void highlightValue(float x,int dataSetIndex,int stackIndex){  highlightValue(new Highlight(x,dataSetIndex,stackIndex),false);}  }
class C{  private File createCaptureFile(int encodingType){  return createCaptureFile(encodingType,"");}  }
class C{  @Override public int scanLiteral(int quote,XMLString content) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.startPosition=0;    fCurrentEntity.position=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || ((c == '\r' || c == 0x85 || c == 0x2028) && external)) {    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if ((c == '\r') && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }        int cc=fCurrentEntity.ch[fCurrentEntity.position];        if (cc == '\n' || cc == 0x85) {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n' || ((c == 0x85 || c == 0x2028) && external)) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      return -1;    }  }  if (external) {    while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == quote || c == '%' || !XML11Char.isXML11Content(c) || c == 0x85 || c == 0x2028) {        fCurrentEntity.position--;        break;      }    }  } else {    while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if ((c == quote && !fCurrentEntity.literal) || c == '%' || !XML11Char.isXML11InternalEntityContent(c)) {        fCurrentEntity.position--;        break;      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];    if (c == quote && fCurrentEntity.literal) {      c=-1;    }  } else {    c=-1;  }  return c;}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  public void resetCache(){  Cache.clear();  ElementAccessTime.clear();  CacheAccess.clear();  TimeCnt=Long.MIN_VALUE;}  }
class C{  public boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  public AudioGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static ShortBuffer createShortBuffer(ShortBuffer buf,int size){  if (buf != null && buf.limit() == size) {    buf.rewind();    return buf;  }  buf=createShortBuffer(size);  return buf;}  }
class C{  public void writeToFile(String fileName) throws IOException {  FileWriter fw=new FileWriter(fileName);  fw.append(this.toString());  fw.close();}  }
class C{  public boolean isClinit(){  return this == CLINIT;}  }
class C{  @Override public void startStreamingConsumption(long timeout){  jssc.start();  if (timeout < 0)   jssc.awaitTermination(); else   jssc.awaitTermination(timeout);}  }
class C{  public int q(){  String s=soot.PhaseOptions.getString(options,"q");  if (s.equalsIgnoreCase("auto"))   return q_auto;  if (s.equalsIgnoreCase("trad"))   return q_trad;  if (s.equalsIgnoreCase("bdd"))   return q_bdd;  if (s.equalsIgnoreCase("debug"))   return q_debug;  if (s.equalsIgnoreCase("trace"))   return q_trace;  if (s.equalsIgnoreCase("numtrace"))   return q_numtrace;  throw new RuntimeException("Invalid value " + s + " of phase option q");}  }
class C{  public boolean isModified(){  return myOriginalEnabled != mySource.isEnabled() || !Objects.equal(myOriginalName,mySource.getDisplayName());}  }
class C{  private void mapSingleClass(Element ele){  String key=ele.getTagName();  List<String> ancestors=new ArrayList<>();  Node directAncestor=ele.getParentNode();  while ((null != directAncestor) && (directAncestor instanceof Element) && (directAncestor != this.classesRoot)) {    ancestors.add(((Element)directAncestor).getTagName());    directAncestor=directAncestor.getParentNode();  }  this.getAncestorsMap().put(key,ancestors);}  }
class C{  public ResourcesPoet addAttr(Attr attr){  Element element=document.createElement("attr");  element.setAttribute("name",attr.name);  if (attr.formats != null && !attr.formats.isEmpty()) {    String formatString="";    for (    Attr.Format format : attr.formats) {      formatString=formatString + format.toString() + "|";    }    formatString=formatString.substring(0,formatString.length() - 1);    element.setAttribute("format",formatString);  }  resourceElement.appendChild(element);  return this;}  }
class C{  public Builder maximumAge(Number maximumAge){  this.maximumAge=maximumAge;  return this;}  }
class C{  public CatchOptions maxPokeballs(int maxPokeballs){  if (maxPokeballs <= 1)   maxPokeballs=-1;  this.maxPokeballs=maxPokeballs;  return this;}  }
class C{  public UsersGetSubscriptionsQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"users.getSubscriptions",GetSubscriptionsExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public boolean isRefreshEnabled(){  return mRefreshEnabled;}  }
class C{  public void run(){  if (script.isAsynchronous()) {    ThreadingUtils.logThreadStarting("Script " + script.getName());  }  script.touch();  runningThread=Thread.currentThread();  boolean firstRun=true;  while (firstRun || (script.isRepeat() && !ScriptRunningState.STOPPED.equals(script.getStatus()))) {    logger.debug("Running [{}] script: first run = {}, repeat = {}, state = {}",script.getName(),firstRun,script.isRepeat(),script.getStatus());    firstRun=false;    changeState(ScriptRunningState.RUNNING);    if (script.isAsynchronous()) {      new Thread(new ScriptHealthDetector(eventBus,script,executor)).start();    }    try {      runScript();    } catch (    Exception e) {      changeState(ScriptRunningState.FAILED);      setLastThrownException(e);      logger.error("Script execution exception",e);      break;    }    if (script.isRepeat()) {      logger.debug("Re-running script {}",script.getName());    }  }  script.stop();  if (script.isAsynchronous()) {    ThreadingUtils.logThreadEnding();  }}  }
class C{  protected ZebraRolloverStrategy(final int minIndex,final int maxIndex,final boolean useMax,final int compressionLevel,final StrSubstitutor subst){  this.minIndex=minIndex;  this.maxIndex=maxIndex;  this.useMax=useMax;  this.compressionLevel=compressionLevel;  this.subst=subst;}  }
class C{  protected boolean needInputMethod(){  return false;}  }
class C{  public static boolean dateIsValid(String date,Locale locale){  return DateValidator.getInstance().isValid(date,locale);}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public ThisRef newThisRef(RefType t){  return new ThisRef(t);}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  if (!isCurrentlyLoading) {    return;  }  LOG.d(TAG,"CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s",errorCode,description,failingUrl);  if (errorCode == WebViewClient.ERROR_UNSUPPORTED_SCHEME) {    parentEngine.client.clearLoadTimeoutTimer();    if (view.canGoBack()) {      view.goBack();      return;    } else {      super.onReceivedError(view,errorCode,description,failingUrl);    }  }  parentEngine.client.onReceivedError(errorCode,description,failingUrl);}  }
class C{  private void initModel(Activity a){  this.collectionsModel=new CollectionsObject(a);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  public BlockingQueueCompiledScriptPoolFactory(){  this(DEFAULT_SIZE);}  }
class C{  public synchronized Map<D,EdgeFunction<L>> forwardLookup(D sourceVal,N target){  assert sourceVal != null;  assert target != null;  Map<D,EdgeFunction<L>> res=nonEmptyForwardLookup.get(sourceVal,target);  if (res == null)   return Collections.emptyMap();  return res;}  }
class C{  public static Map<String,Object> addOrderItemShipGroup(DispatchContext dctx,Map<String,Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String orderId=(String)context.get("orderId");  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToAddOISGToOrder",locale);  Map<String,Object> createOrderItemShipGroupMap=null;  try {    createOrderItemShipGroupMap=dctx.makeValidContext("createOrderItemShipGroup","IN",context);  } catch (  GenericServiceException gse) {    String errMsg=mainErrorMessage + gse.toString();    return ServiceUtil.returnError(errMsg);  }  try {    String carrierPartyId=(String)context.get("carrierPartyId");    GenericValue carrierRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",carrierPartyId,"roleTypeId","CARRIER").cache().queryOne();    if (UtilValidate.isNotEmpty(carrierPartyId) && UtilValidate.isEmpty(carrierRole)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupPartyCarrierNotFound",UtilMisc.toMap("partyId",carrierPartyId),locale);      return ServiceUtil.returnError(errMsg);    }    String shipmentMethodTypeId=(String)context.get("shipmentMethodTypeId");    if (UtilValidate.isNotEmpty(shipmentMethodTypeId)) {      if (shipmentMethodTypeId.indexOf("_o_") == -1) {        GenericValue shipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("partyId",carrierPartyId,"roleTypeId","CARRIER","shipmentMethodTypeId",shipmentMethodTypeId).cache().queryOne();        if (UtilValidate.isEmpty(shipmentMethod)) {          String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupShipmentMethodNotFound",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),locale);          return ServiceUtil.returnError(errMsg);        }      } else {        String[] carrierShipmentMethod=shipmentMethodTypeId.split("_o_");        if (carrierShipmentMethod.length == 2) {          shipmentMethodTypeId=carrierShipmentMethod[0];          carrierPartyId=carrierShipmentMethod[1];        }        context.put("carrierPartyId",carrierPartyId);        context.put("shipmentMethodTypeId",shipmentMethodTypeId);      }    }    List<GenericValue> oisgs=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId).orderBy("shipGroupSeqId DESC").queryList();    if (UtilValidate.isNotEmpty(oisgs)) {      GenericValue oisg=EntityUtil.getFirst(oisgs);      if (UtilValidate.isEmpty(carrierPartyId) && UtilValidate.isEmpty(shipmentMethodTypeId)) {        createOrderItemShipGroupMap.put("shipmentMethodTypeId",oisg.get("shipmentMethodTypeId"));        createOrderItemShipGroupMap.put("carrierPartyId",oisg.get("carrierPartyId"));        createOrderItemShipGroupMap.put("carrierRoleTypeId",oisg.get("carrierRoleTypeId"));        createOrderItemShipGroupMap.put("contactMechId",oisg.get("contactMechId"));      }    }  } catch (  GenericEntityException gee) {    String errMsg=mainErrorMessage + gee.toString();    return ServiceUtil.returnError(errMsg);  }  if (UtilValidate.isEmpty(createOrderItemShipGroupMap.get("maySplit"))) {    createOrderItemShipGroupMap.put("maySplit","N");  }  if (UtilValidate.isEmpty(createOrderItemShipGroupMap.get("isGift"))) {    createOrderItemShipGroupMap.put("isGift","N");  }  try {    result=dctx.getDispatcher().runSync("createOrderItemShipGroup",createOrderItemShipGroupMap);  } catch (  GenericServiceException gse) {    String errMsg=mainErrorMessage + gse.toString();    return ServiceUtil.returnError(errMsg);  }  if (ServiceUtil.isError(result)) {    String errMsg=UtilProperties.getMessage(resource,mainErrorMessage + result.get("errorMessage"),locale);    return ServiceUtil.returnError(errMsg);  }  return result;}  }
class C{  void writeDownloadEntity(DownloadMissionEntity entity){  deleteDownloadEntity(entity);  new DaoMaster(openHelper.getWritableDatabase()).newSession().getDownloadMissionEntityDao().insert(entity);}  }
class C{  public void adjustAspectRatio(int videoWidth,int videoHeight){  int viewWidth=getWidth();  int viewHeight=getHeight();  double aspectRatio=(double)videoHeight / videoWidth;  int newWidth, newHeight;  if (viewHeight > (int)(viewWidth * aspectRatio)) {    newWidth=viewWidth;    newHeight=(int)(viewWidth * aspectRatio);  } else {    newWidth=(int)(viewHeight / aspectRatio);    newHeight=viewHeight;  }  int xoff=(viewWidth - newWidth) / 2;  int yoff=(viewHeight - newHeight) / 2;  Log.v(TAG,"video=" + videoWidth + "x"+ videoHeight+ " view="+ viewWidth+ "x"+ viewHeight+ " newView="+ newWidth+ "x"+ newHeight+ " off="+ xoff+ ","+ yoff);  Matrix txform=new Matrix();  getTransform(txform);  txform.setScale((float)newWidth / viewWidth,(float)newHeight / viewHeight);  txform.postTranslate(xoff,yoff);  setTransform(txform);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((dateModel != null) && (timePicker != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Date) {      Date oldValue=(Date)undoRedoObject.getOldValue();      dateModel.setValue(oldValue);      timePicker.setValue(oldValue);    }  }}  }
class C{  public void fromAngleNormalAxis(float angle,Vector3f axis){  zero();  m33=1;  float fCos=FastMath.cos(angle);  float fSin=FastMath.sin(angle);  float fOneMinusCos=((float)1.0) - fCos;  float fX2=axis.x * axis.x;  float fY2=axis.y * axis.y;  float fZ2=axis.z * axis.z;  float fXYM=axis.x * axis.y * fOneMinusCos;  float fXZM=axis.x * axis.z * fOneMinusCos;  float fYZM=axis.y * axis.z * fOneMinusCos;  float fXSin=axis.x * fSin;  float fYSin=axis.y * fSin;  float fZSin=axis.z * fSin;  m00=fX2 * fOneMinusCos + fCos;  m01=fXYM - fZSin;  m02=fXZM + fYSin;  m10=fXYM + fZSin;  m11=fY2 * fOneMinusCos + fCos;  m12=fYZM - fXSin;  m20=fXZM - fYSin;  m21=fYZM + fXSin;  m22=fZ2 * fOneMinusCos + fCos;}  }
class C{  public void handleEntryExpiredCoreSA(IEntryHolder entry,ServerTransaction txn,boolean fromReplication) throws Exception {  boolean anyNotityExpiredTemplates=_cacheManager.getTemplatesManager().anyNotifyLeaseTemplates();  if (!anyNotityExpiredTemplates)   return;  Context context=null;  try {    context=_cacheManager.getCacheContext();    context.setFromReplication(fromReplication);    NotifyContextsHolder notifyContextsHolder=new NotifyContextsHolder(null,entry,context.getOperationID(),NotifyActionType.NOTIFY_LEASE_EXPIRATION);    _engine.getTemplateScanner().scanNotifyTemplates(notifyContextsHolder,context,null,FifoSearch.NO);  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  @RequestMapping(value="/",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<BookDTO> create(@RequestBody BookDTO bookDTO) throws URISyntaxException {  log.debug("Create BookDTO : {}",bookDTO);  if (bookDTO.isIdSet()) {    return ResponseEntity.badRequest().header("Failure","Cannot create Book with existing ID").body(null);  }  BookDTO result=bookDTOService.save(bookDTO);  return ResponseEntity.created(new URI("/api/books/" + result.id)).body(result);}  }
class C{  public String cleanTextValue(String text){  if (text != null) {    return text.trim();  } else {    return text;  }}  }
class C{  public WheelVerticalView(Context context){  this(context,null);}  }
class C{  @Override public boolean retainAll(Collection<?> collection){  boolean removed=false;  for (int i=mSize - 1; i >= 0; i--) {    if (!collection.contains(mArray[i])) {      removeAt(i);      removed=true;    }  }  return removed;}  }
class C{  public TypeNode typeNode(Type type){  if (type == null || !(type instanceof PrimType || type instanceof RefType)) {    throw new InternalTypingException(type);  }  TypeNode typeNode=typeNodeMap.get(type);  if (typeNode == null) {    System.err.println(type);    throw new InternalTypingException();  }  return typeNode;}  }
class C{  public List<T> toList(){  return Arrays.asList(Arrays.copyOf(elements,numElements));}  }
class C{  public SearchGetHintsQuery(VkApiClient client,UserActor actor){  super(client,"search.getHints",Utils.buildParametrizedType(List.class,Hint.class));  accessToken(actor.getAccessToken());}  }
class C{  public static void main(String[] args) throws IOException {  ParseSinaXmlData parser=new ParseSinaXmlData();  parser.buildRawText("res/sina_data/alldata.txt","res/sina_data/SinaRawText.txt");}  }
class C{  public synchronized BookKeeperClientBuilder dlConfig(DistributedLogConfiguration dlConfig){  this.dlConfig=dlConfig;  return this;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public static String removeNumeric(String str){  return removeRegex(str,"[\\d]");}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  private Writer initWriter(File file,Charset encoding,boolean append) throws IOException {  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file.getAbsolutePath(),append);    writer=new OutputStreamWriter(stream,Charsets.toCharset(encoding));  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  private void addToken(int token){  try {    fTokens[fTokenCount]=token;  } catch (  ArrayIndexOutOfBoundsException ex) {    int[] oldList=fTokens;    fTokens=new int[fTokenCount << 1];    System.arraycopy(oldList,0,fTokens,0,fTokenCount);    fTokens[fTokenCount]=token;  }  fTokenCount++;}  }
class C{  @Override public void emptySLD(){  String emptyFilename="";  SelectedSymbol.getInstance().setFilename(emptyFilename);  SLDEditorFile.getInstance().setSLDData(null);  dataSource.reset();  SelectedSymbol.getInstance().setSld(null);  uiMgr.populateUI(0);}  }
class C{  public JobNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public JType apply(String nodeName,JsonNode schemaNode,JClassContainer generatableType,Schema schema){  if (schemaNode.has("$ref")) {    final String ref=schemaNode.get("$ref").asText();    schema=ruleFactory.getSchemaStore().create(schema,ref);    schemaNode=schema.getContent();    if (schema.isGenerated()) {      return schema.getJavaType();    }    if (ref.startsWith("#/")) {      nodeName=ref.substring(ref.lastIndexOf("/") + 1);    }    return apply(nodeName,schemaNode,generatableType,schema);  }  JType javaType;  if (schemaNode.has("enum")) {    javaType=ruleFactory.getEnumRule().apply(nodeName,schemaNode,generatableType,schema);  } else {    javaType=ruleFactory.getTypeRule().apply(nodeName,schemaNode,generatableType.getPackage(),schema);  }  schema.setJavaTypeIfEmpty(javaType);  return javaType;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private static boolean validateNewSize(int level){  return !(level < MIN_EXPAND || level > MAX_EXPAND);}  }
class C{  public Location add(Vector vec){  this.x+=vec.getX();  this.y+=vec.getY();  this.z+=vec.getZ();  return this;}  }
class C{  @Override public void onLoadContentProgress(int loadPercent){}  }
class C{  public static void main(String[] args){  DefaultListener d=new DefaultListener();  File f=new File("/home/joe/d/workspace/");  Map<String,FileVersion> map=new HashMap<String,FileVersion>();  d.cleanup(f,map);  System.out.println(map);}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public void removePendingFifoSearchObject(boolean disableInitialSearch){  _pendingFifoSearch=null;  if (disableInitialSearch)   resetInitialFifoSearchActive();}  }
class C{  public String toXML(){  if (isResult()) {    StringBuffer str=new StringBuffer(1000);    str.append("<ConfigurationReport>\n");    str.append("<id>");    str.append(this.id);    str.append("</id>\n");    str.append("<name>");    str.append(this.name);    str.append("</name>\n");    str.append("<user>");    str.append(this.user);    str.append("</user>\n");    str.append("<status>");    str.append(this.status);    str.append("</status>\n");    str.append("<status-description><![CDATA[");    str.append(this.statusDescription);    str.append("]]></status-description>\n");    str.append("<timestamp>");    str.append(this.timestamp);    str.append("</timestamp>\n");    str.append("<daq-reboot>");    str.append(this.processesToReboot);    str.append("</daq-reboot>\n");    str.append("<ConfigurationElementReports>\n");    Iterator<ConfigurationElementReport> it=this.elementReports.iterator();    while (it.hasNext()) {      str.append(it.next().toXML());    }    str.append("</ConfigurationElementReports>\n");    str.append("</ConfigurationReport>\n");    return str.toString();  } else {    throw new UnsupportedOperationException("No XML report can be generated: this message is an intermediate response!");  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void trace(VarNode node,PrintStream ps,HashSet<Node> visitedNodes,int level){  if (level < 1)   return;  ps.println("\t" + translateLabel(node));  Node[] succs=pag.simpleInvLookup(node);  for (int i=0; i < succs.length; i++) {    if (visitedNodes.contains(succs[i]))     continue;    ps.println("\t" + translateLabel(succs[i]));    ps.println("\t" + translateEdge(node,succs[i],"assign"));    visitedNodes.add(succs[i]);    trace((VarNode)succs[i],ps,visitedNodes,level - 1);  }  succs=pag.allocInvLookup(node);  for (int i=0; i < succs.length; i++) {    if (visitedNodes.contains(succs[i]))     continue;    ps.println("\t" + translateLabel(succs[i]));    ps.println("\t" + translateEdge(node,succs[i],"new"));  }  succs=vmatches.get(node);  if (succs != null) {    for (int i=0; i < succs.length; i++) {      if (visitedNodes.contains(succs[i]))       continue;      ps.println("\t" + translateLabel(succs[i]));      ps.println("\t" + translateEdge(node,succs[i],"vmatch"));      trace((VarNode)succs[i],ps,visitedNodes,level - 1);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200566,num0,skilltarget,skillname);}  }
class C{  public AudioPreProcessor(AudioInputStream in,float sampleRate) throws IllegalArgumentException {  AudioFormat source, converted;  if (in == null)   throw new IllegalArgumentException("the input stream must not be a null value");  source=in.getFormat();  this.sampleRate=sampleRate;  if (sampleRate < 0 || sampleRate > source.getSampleRate())   throw new IllegalArgumentException("the sample rate to convert to must be greater null and less or equal the sample rate of the input stream");  this.in=convertToPCM(in);  try {    this.in=new ReducedAudioInputStream(this.in,sampleRate);  } catch (  IllegalArgumentException iae) {    this.in=convertSampleRate(this.in,sampleRate);    this.in=convertChannels(this.in,1);  }  converted=this.in.getFormat();  if (converted.getSampleSizeInBits() != 8 && converted.getSampleSizeInBits() != 16 && converted.getSampleSizeInBits() != 24 && converted.getSampleSizeInBits() != 32)   throw new IllegalArgumentException("the sample size of the input stream must be 8, 16, 24 or 32 bit");  if (converted.getFrameSize() != (converted.getSampleSizeInBits() / 8) || converted.getSampleRate() != sampleRate)   throw new IllegalArgumentException("the conversion is not supported");  this.sampleRate=sampleRate;  this.frameSize=converted.getFrameSize();  this.isBigEndian=converted.isBigEndian();  dB_max=6.0d * converted.getSampleSizeInBits();  this.normalise=(double)converted.getChannels() * (1 << (converted.getSampleSizeInBits() - 1));  this.scale=(Math.pow(10,dB_max / 20)) / normalise;}  }
class C{  public LayoutTest(){  initComponents();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public Builder calculateSortedRank(String newColumnName,String sortOnColumn,WritableComparator comparator,boolean ascending){  actionList.add(new DataAction(new CalculateSortedRank(newColumnName,sortOnColumn,comparator,ascending)));  return this;}  }
class C{  public static Drawable tintDrawable(@Nullable Drawable drawable,@ColorInt int color){  if (drawable != null) {    drawable.setColorFilter(color,PorterDuff.Mode.SRC_IN);  }  return drawable;}  }
class C{  public static void gatherMargins(Collection<ConstraintWidget> widgets,ArrayList<SnapCandidate> margins,int margin,boolean isVertical){  margin=Math.abs(margin);  if (margin == 0) {    return;  }  ArrayList<SnapCandidate> foundMargins=new ArrayList<>();  for (  ConstraintWidget w1 : widgets) {    for (    ConstraintAnchor a1 : w1.getAnchors()) {      if (!a1.isSideAnchor()) {        continue;      }      if (a1.isVerticalAnchor() != isVertical) {        continue;      }      for (      ConstraintWidget w2 : widgets) {        for (        ConstraintAnchor a2 : w2.getAnchors()) {          if (!a2.isSideAnchor()) {            continue;          }          if (!a2.isSimilarDimensionConnection(a1)) {            continue;          }          ConstraintHandle h1=WidgetInteractionTargets.constraintHandle(a1);          ConstraintHandle h2=WidgetInteractionTargets.constraintHandle(a2);          if (h1 == null || h2 == null) {            continue;          }          int currentMargin=h1.getStraightDistanceFrom(h2);          if (Math.abs(currentMargin) == margin) {            SnapCandidate candidate=new SnapCandidate();            candidate.source=a1;            candidate.target=a2;            candidate.margin=currentMargin;            foundMargins.add(candidate);          }        }      }    }  }  for (  SnapCandidate c1 : foundMargins) {    boolean insert=true;    for (    SnapCandidate c2 : margins) {      if ((Math.abs(c1.margin) == Math.abs(c2.margin)) && ((c2.source == c1.target && c2.target == c1.source) || (c2.source == c1.source && c2.target == c1.target))) {        insert=false;        break;      }      if (c1.source.isSimilarDimensionConnection(c2.source) && c1.margin == c2.margin) {        ConstraintHandle sourceHandle1=WidgetInteractionTargets.constraintHandle(c1.source);        ConstraintHandle targetHandle1=WidgetInteractionTargets.constraintHandle(c1.target);        ConstraintHandle sourceHandle2=WidgetInteractionTargets.constraintHandle(c2.source);        ConstraintHandle targetHandle2=WidgetInteractionTargets.constraintHandle(c2.target);        if (c1.source.isVerticalAnchor()) {          if (Math.min(sourceHandle1.getDrawY(),targetHandle1.getDrawY()) == Math.min(sourceHandle2.getDrawY(),targetHandle2.getDrawY())) {            insert=false;            break;          }        } else         if (Math.min(sourceHandle1.getDrawX(),targetHandle1.getDrawX()) == Math.min(sourceHandle2.getDrawX(),targetHandle2.getDrawX())) {          insert=false;          break;        }      }    }    if (insert) {      margins.add(c1);    }  }}  }
class C{  public boolean rerun_jb(){  return soot.PhaseOptions.getBoolean(options,"rerun-jb");}  }
class C{  public Well1024a(){  super(K);}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public BBoxExtended(){  super(null,null);}  }
class C{  public static InstantRunVerifierStatus verifyMethod(MethodNode method){  VerifierMethodVisitor mv=new VerifierMethodVisitor(method);  method.accept(mv);  return mv.incompatibleChange.or(InstantRunVerifierStatus.COMPATIBLE);}  }
class C{  public void updateView(final String what){  if (what.equals(Director.ALL)) {    try {      for (int i=0; i < doc.getNumberOfSamples(); i++) {        doc.getColorsArray()[i]=doc.getChartColorManager().getSampleColor(doc.getSampleNames().get(i));      }      setFont(ProgramProperties.get(ProgramProperties.DEFAULT_FONT,getFont()));      if (lastRecomputeTimeFromDocument != dir.getDocument().getLastRecomputeTime()) {        lastRecomputeTimeFromDocument=dir.getDocument().getLastRecomputeTime();        updateData();        updateTree();      }      if (hasSyncedFormatFromSummaryToViewer)       SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(this,doc.getDataTable());    } catch (    IOException e) {      Basic.caught(e);    }    if (getPreviousNodeIdsOfInterest() != null) {      for (      Integer id : getPreviousNodeIdsOfInterest()) {        Node v=getANode(id);        if (v != null) {          setSelected(v,true);        }      }      zoomToSelection();      setPreviousNodeIdsOfInterest(null);    }    setupNodeLabels(true);    repaint();  }  final FindToolBar findToolBar=searchManager.getFindDialogAsToolBar();  if (findToolBar.isClosing()) {    showFindToolBar=false;    findToolBar.setClosing(false);  }  if (!findToolBar.isEnabled() && showFindToolBar) {    mainPanel.add(findToolBar,BorderLayout.NORTH);    findToolBar.setEnabled(true);    getFrame().getContentPane().validate();  } else   if (findToolBar.isEnabled() && !showFindToolBar) {    mainPanel.remove(findToolBar);    findToolBar.setEnabled(false);    getFrame().getContentPane().validate();  }  getCommandManager().updateEnableState();  if (findToolBar.isEnabled())   findToolBar.clearMessage();  if (showLegend.equals("undefined") && doc.getNumberOfSamples() > 0) {    setShowLegend(doc.getNumberOfSamples() <= 1 ? "none" : "horizontal");  }  legendPanel.setStyle(getNodeDrawer().getStyle());  legendPanel.updateView();  if (doc.getNumberOfSamples() <= 1)   splitPane.setDividerLocation(1.0);  legendPanel.repaint();  setWindowTitle();}  }
class C{  public SessionInitializationException(String userMessage,String logMessage){  super(logMessage);  this.userMessage=userMessage;}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(x);  writeShort(y);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  public void renderNormals(GL2 gl){  gl.glColor4fv(Preferences.getBodyNormalColor(),0);  int fSize=this.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=this.getFixture(i);    Convex convex=bf.getShape();    if (convex instanceof Wound) {      Wound w=(Wound)convex;      Vector2[] vertices=w.getVertices();      Vector2[] normals=w.getNormals();      int size=normals.length;      Vector2 p1, p2, n;      Vector2 mid=new Vector2();      for (int j=0; j < size; j++) {        p1=vertices[j];        p2=vertices[(j + 1 == size) ? 0 : j + 1];        n=normals[j];        mid.set(p2).subtract(p1).multiply(0.5).add(p1);        gl.glBegin(GL.GL_LINES);        gl.glVertex2d(mid.x,mid.y);        gl.glVertex2d(mid.x + n.x * 0.1,mid.y + n.y * 0.1);        gl.glEnd();      }    }  }}  }
class C{  private BSPTree<S> recurseComplement(final BSPTree<S> node,final Map<BSPTree<S>,BSPTree<S>> map){  final BSPTree<S> transformedNode;  if (node.getCut() == null) {    transformedNode=new BSPTree<S>(((Boolean)node.getAttribute()) ? Boolean.FALSE : Boolean.TRUE);  } else {    @SuppressWarnings("unchecked") BoundaryAttribute<S> attribute=(BoundaryAttribute<S>)node.getAttribute();    if (attribute != null) {      final SubHyperplane<S> plusOutside=(attribute.getPlusInside() == null) ? null : attribute.getPlusInside().copySelf();      final SubHyperplane<S> plusInside=(attribute.getPlusOutside() == null) ? null : attribute.getPlusOutside().copySelf();      attribute=new BoundaryAttribute<S>(plusOutside,plusInside,new NodesSet<S>());    }    transformedNode=new BSPTree<S>(node.getCut().copySelf(),recurseComplement(node.getPlus(),map),recurseComplement(node.getMinus(),map),attribute);  }  map.put(node,transformedNode);  return transformedNode;}  }
class C{  protected void addFieldTranslation(String esriField,String newField){  translationMap.put(esriField,newField);}  }
class C{  private boolean updateAnchorFromChildren(RecyclerView.State state,AnchorInfo anchorInfo){  if (getChildCount() == 0) {    return false;  }  View focused=getFocusedChild();  if (focused != null && anchorInfo.assignFromViewIfValid(focused,state)) {    if (DEBUG) {      Log.d(TAG,"decided anchor child from focused view");    }    return true;  }  if (mLastStackFromEnd != mStackFromEnd) {    return false;  }  View referenceChild=anchorInfo.mLayoutFromEnd ? findReferenceChildClosestToEnd(state) : findReferenceChildClosestToStart(state);  if (referenceChild != null) {    anchorInfo.assignFromView(referenceChild);    if (!state.isPreLayout() && supportsPredictiveItemAnimations()) {      final boolean notVisible=mOrientationHelper.getDecoratedStart(referenceChild) >= mOrientationHelper.getEndAfterPadding() || mOrientationHelper.getDecoratedEnd(referenceChild) < mOrientationHelper.getStartAfterPadding();      if (notVisible) {        anchorInfo.mCoordinate=anchorInfo.mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();      }    }    return true;  }  return false;}  }
class C{  public static VersionNumber fromString(String str){  if (str == null) {    return null;  }  String[] pieces=str.split("\\.");  if (pieces.length != 4) {    return null;  }  VersionNumber version=new VersionNumber();  try {    for (int i=0; i < 4; ++i) {      version.mVersion[i]=Integer.parseInt(pieces[i]);    }  } catch (  NumberFormatException e) {    return null;  }  return version;}  }
class C{  public ViewActionMenu(@NotNull String menuName,@Nullable Icon icon,@NotNull List<ViewAction> actions){  this(-1,menuName,icon,actions);}  }
class C{  public Crop withAspect(int x,int y){  cropIntent.putExtra(Extra.ASPECT_X,x);  cropIntent.putExtra(Extra.ASPECT_Y,y);  return this;}  }
class C{  public ProtocolReactor findProtocolReactor(IapMessageFields messageFields){  for (int i=0; i < protocolReactors.length; i++) {    if (messageFields.equalsSemanticProtocolId(protocolReactors[i].protocolId) && messageFields.equalsSemanticProtocolVersion(protocolReactors[i].protocolVersion)) {      return protocolReactors[i];    }  }  return null;}  }
class C{  XSAttributeDecl traverseNamedAttr(Element attrDecl,Object[] attrValues,XSDocumentInfo schemaDoc,SchemaGrammar grammar,boolean isGlobal,XSComplexTypeDecl enclosingCT){  String defaultAtt=(String)attrValues[XSAttributeChecker.ATTIDX_DEFAULT];  String fixedAtt=(String)attrValues[XSAttributeChecker.ATTIDX_FIXED];  XInt formAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_FORM];  String nameAtt=(String)attrValues[XSAttributeChecker.ATTIDX_NAME];  QName typeAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_TYPE];  XSAttributeDecl attribute=null;  if (fSchemaHandler.fDeclPool != null) {    attribute=fSchemaHandler.fDeclPool.getAttributeDecl();  } else {    attribute=new XSAttributeDecl();  }  if (nameAtt != null)   nameAtt=fSymbolTable.addSymbol(nameAtt);  String tnsAtt=null;  XSComplexTypeDecl enclCT=null;  short scope=XSAttributeDecl.SCOPE_ABSENT;  if (isGlobal) {    tnsAtt=schemaDoc.fTargetNamespace;    scope=XSAttributeDecl.SCOPE_GLOBAL;  } else {    if (enclosingCT != null) {      enclCT=enclosingCT;      scope=XSAttributeDecl.SCOPE_LOCAL;    }    if (formAtt != null) {      if (formAtt.intValue() == SchemaSymbols.FORM_QUALIFIED)       tnsAtt=schemaDoc.fTargetNamespace;    } else     if (schemaDoc.fAreLocalAttributesQualified) {      tnsAtt=schemaDoc.fTargetNamespace;    }  }  ValidatedInfo attDefault=null;  short constraintType=XSConstants.VC_NONE;  if (isGlobal) {    if (fixedAtt != null) {      attDefault=new ValidatedInfo();      attDefault.normalizedValue=fixedAtt;      constraintType=XSConstants.VC_FIXED;    } else     if (defaultAtt != null) {      attDefault=new ValidatedInfo();      attDefault.normalizedValue=defaultAtt;      constraintType=XSConstants.VC_DEFAULT;    }  }  Element child=DOMUtil.getFirstChildElement(attrDecl);  XSAnnotationImpl annotation=null;  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);    child=DOMUtil.getNextSiblingElement(child);  } else {    String text=DOMUtil.getSyntheticAnnotation(attrDecl);    if (text != null) {      annotation=traverseSyntheticAnnotation(attrDecl,text,attrValues,false,schemaDoc);    }  }  XSSimpleType attrType=null;  boolean haveAnonType=false;  if (child != null) {    String childName=DOMUtil.getLocalName(child);    if (childName.equals(SchemaSymbols.ELT_SIMPLETYPE)) {      attrType=fSchemaHandler.fSimpleTypeTraverser.traverseLocal(child,schemaDoc,grammar);      haveAnonType=true;      child=DOMUtil.getNextSiblingElement(child);    }  }  if (attrType == null && typeAtt != null) {    XSTypeDefinition type=(XSTypeDefinition)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.TYPEDECL_TYPE,typeAtt,attrDecl);    if (type != null && type.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {      attrType=(XSSimpleType)type;    } else {      reportSchemaError("src-resolve",new Object[]{typeAtt.rawname,"simpleType definition"},attrDecl);      if (type == null) {        attribute.fUnresolvedTypeName=typeAtt;      }    }  }  if (attrType == null) {    attrType=SchemaGrammar.fAnySimpleType;  }  XSObjectList annotations;  if (annotation != null) {    annotations=new XSObjectListImpl();    ((XSObjectListImpl)annotations).addXSObject(annotation);  } else {    annotations=XSObjectListImpl.EMPTY_LIST;  }  attribute.setValues(nameAtt,tnsAtt,attrType,constraintType,scope,attDefault,enclCT,annotations);  if (nameAtt == null) {    if (isGlobal)     reportSchemaError("s4s-att-must-appear",new Object[]{SchemaSymbols.ELT_ATTRIBUTE,SchemaSymbols.ATT_NAME},attrDecl); else     reportSchemaError("src-attribute.3.1",null,attrDecl);    nameAtt=NO_NAME;  }  if (child != null) {    reportSchemaError("s4s-elt-must-match.1",new Object[]{nameAtt,"(annotation?, (simpleType?))",DOMUtil.getLocalName(child)},child);  }  if (defaultAtt != null && fixedAtt != null) {    reportSchemaError("src-attribute.1",new Object[]{nameAtt},attrDecl);  }  if (haveAnonType && (typeAtt != null)) {    reportSchemaError("src-attribute.4",new Object[]{nameAtt},attrDecl);  }  checkNotationType(nameAtt,attrType,attrDecl);  if (attDefault != null) {    fValidationState.setNamespaceSupport(schemaDoc.fNamespaceSupport);    try {      checkDefaultValid(attribute);    } catch (    InvalidDatatypeValueException ide) {      reportSchemaError(ide.getKey(),ide.getArgs(),attrDecl);      reportSchemaError("a-props-correct.2",new Object[]{nameAtt,attDefault.normalizedValue},attrDecl);      attDefault=null;      constraintType=XSConstants.VC_NONE;      attribute.setValues(nameAtt,tnsAtt,attrType,constraintType,scope,attDefault,enclCT,annotations);    }  }  if (attDefault != null) {    if (attrType.isIDType()) {      reportSchemaError("a-props-correct.3",new Object[]{nameAtt},attrDecl);      attDefault=null;      constraintType=XSConstants.VC_NONE;      attribute.setValues(nameAtt,tnsAtt,attrType,constraintType,scope,attDefault,enclCT,annotations);    }  }  if (nameAtt != null && nameAtt.equals(XMLSymbols.PREFIX_XMLNS)) {    reportSchemaError("no-xmlns",null,attrDecl);    return null;  }  if (tnsAtt != null && tnsAtt.equals(SchemaSymbols.URI_XSI)) {    reportSchemaError("no-xsi",new Object[]{SchemaSymbols.URI_XSI},attrDecl);    return null;  }  if (nameAtt.equals(NO_NAME))   return null;  if (isGlobal) {    if (grammar.getGlobalAttributeDecl(nameAtt) == null) {      grammar.addGlobalAttributeDecl(attribute);    }    final String loc=fSchemaHandler.schemaDocument2SystemId(schemaDoc);    final XSAttributeDecl attribute2=grammar.getGlobalAttributeDecl(nameAtt,loc);    if (attribute2 == null) {      grammar.addGlobalAttributeDecl(attribute,loc);    }    if (fSchemaHandler.fTolerateDuplicates) {      if (attribute2 != null) {        attribute=attribute2;      }      fSchemaHandler.addGlobalAttributeDecl(attribute);    }  }  return attribute;}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public void removeRenderStatement(String instanceId){  if (!WXUtils.isUiThread()) {    throw new WXRuntimeException("[WXRenderManager] removeRenderStatement can only be called in main thread");  }  WXRenderStatement statement=mRegistries.remove(instanceId);  if (statement != null) {    statement.destroy();  }}  }
class C{  public String toString(){  return getName();}  }
class C{  public void exitFullScreen(){  View decorView=mContext.getWindow().getDecorView();  showSystemUI(decorView);  for (  View view : views) {    view.setVisibility(View.VISIBLE);    view.invalidate();  }}  }
class C{  public void check(){  Response<Set<String>> serversResp=clusterService.listOnlineServers();  if (!serversResp.isSuccess()) {    Logs.error("failed to get all online servers, cause: {}",serversResp.getErr());    return;  }  try {    Set<String> allServers=serversResp.getData();    final Set<String> failedServers=Sets.newHashSet();    doCheck(allServers,failedServers);    removeFailedServers(failedServers);  } catch (  InterruptedException e) {    Logs.error("failed to check online servers: {}",Throwables.getStackTraceAsString(e));  }}  }
class C{  public Repository createRepoAndAssetAndTextUnitsAndVariants(TestIdWatcher testIdWatcher) throws Exception {  Repository repository=createRepoAndAssetAndTextUnits(testIdWatcher);  List<TMTextUnit> tmTextUnits=tmTextUnitRepository.findByTm_id(repository.getTm().getId());  Locale frFrLocale=localeService.findByBcp47Tag("fr-FR");  for (  TMTextUnit tmTextUnit : tmTextUnits) {    Long tmTextUnitId=tmTextUnit.getId();    tmService.addCurrentTMTextUnitVariant(tmTextUnitId,frFrLocale.getId(),"Variant for tmTextUnit " + tmTextUnitId + " - "+ frFrLocale.getBcp47Tag());  }  return repository;}  }
class C{  public InputMapping(){  initComponents();}  }
class C{  public boolean canZoomInMoreX(){  return (mScaleX < mMaxScaleX);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  public Iterator<PDGNode> iterator(){  return new ChildPDGFlowIterator(this.m_nodes);}  }
class C{  private void layoutAppearingViews(RecyclerView.Recycler recycler,View referenceView,int referencePosition,int extraCount,int offset){  if (extraCount < 1)   return;  for (int extra=1; extra <= extraCount; extra++) {    final int extraPosition=referencePosition + extra;    if (extraPosition < 0 || extraPosition >= getItemCount()) {      continue;    }    View appearing=recycler.getViewForPosition(extraPosition);    addView(appearing);    final int newRow=getGlobalRowOfPosition(extraPosition + offset);    final int rowDelta=newRow - getGlobalRowOfPosition(referencePosition + offset);    final int newCol=getGlobalColumnOfPosition(extraPosition + offset);    final int colDelta=newCol - getGlobalColumnOfPosition(referencePosition + offset);    layoutTempChildView(appearing,rowDelta,colDelta,referenceView);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_GET_ITEM_ME(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1390180,descriptionId);}  }
class C{  public CharMap4Grid(CharMap4 charMap4){  super();  this.charMap4=charMap4;  cellCount=charCount=glyphCount=0;  clickIndex=NO_MOUSE;  clickStartX=clickStartY=NO_MOUSE;  cornerIndex=0;  fontData=null;  horizStep=100;  hoverIndex=NO_MOUSE;  lineAscent=100;  lineHeight=100;  maxWidth=100;  panelColumns=10;  panelCount=-1;  panelFont=null;  panelHeight=panelWidth=-1;  panelRows=10;  vertiStep=100;  this.addMouseListener((MouseListener)this);  this.addMouseMotionListener((MouseMotionListener)this);  this.addMouseWheelListener((MouseWheelListener)this);}  }
class C{  public Map<String,Object> addToCartBulk(String catalogId,String categoryId,Map<String,? extends Object> context){  String itemGroupNumber=(String)context.get("itemGroupNumber");  String keyPrefix="quantity_";  String productQuantityKeyPrefix="product_";  String ignSeparator="_ign_";  for (  Map.Entry<String,? extends Object> entry : context.entrySet()) {    String productId=null;    String quantStr=null;    String itemGroupNumberToUse=itemGroupNumber;    String originalProductId=null;    if (entry.getKey() instanceof String) {      String key=entry.getKey();      int ignIndex=key.indexOf(ignSeparator);      if (ignIndex > 0) {        itemGroupNumberToUse=key.substring(ignIndex + ignSeparator.length());        key=key.substring(0,ignIndex);      }      if (key.startsWith(keyPrefix)) {        productId=key.substring(keyPrefix.length());        quantStr=(String)entry.getValue();      } else       if (key.startsWith(productQuantityKeyPrefix)) {        productId=(String)entry.getValue();        quantStr="1";      } else {        continue;      }    } else {      continue;    }    if (UtilValidate.isNotEmpty(quantStr)) {      BigDecimal quantity=BigDecimal.ZERO;      try {        quantity=new BigDecimal(quantStr);      } catch (      NumberFormatException nfe) {        quantity=BigDecimal.ZERO;      }      if (quantity.compareTo(BigDecimal.ZERO) > 0) {        if (ProductWorker.isAlternativePacking(delegator,null,productId)) {          GenericValue originalProduct=null;          originalProductId=productId;          productId=ProductWorker.getOriginalProductId(delegator,productId);          try {            originalProduct=EntityQuery.use(delegator).from("Product").where("productId",originalProductId).queryOne();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error getting parent product",module);          }          BigDecimal piecesIncluded=BigDecimal.ZERO;          if (originalProduct != null) {            piecesIncluded=new BigDecimal(originalProduct.getLong("piecesIncluded"));            quantity=quantity.multiply(piecesIncluded);          }        }        try {          if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,productId,cart.getProductStoreId())) {            BigDecimal remainder=quantity.remainder(BigDecimal.ONE);            if (remainder.compareTo(BigDecimal.ZERO) != 0) {              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",this.cart.getLocale()));            }            quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));          } else {            quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));          }        } catch (        GenericEntityException e) {          Debug.logError(e.getMessage(),module);          quantity=BigDecimal.ONE;        }        if (quantity.compareTo(BigDecimal.ZERO) < 0) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale()));        }        try {          if (Debug.verboseOn())           Debug.logVerbose("Bulk Adding to cart [" + quantity + "] of ["+ productId+ "] in Item Group ["+ itemGroupNumber+ "]",module);          this.cart.addOrIncreaseItem(productId,null,quantity,null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumberToUse,originalProductId,dispatcher);        } catch (        CartItemModifyException e) {          return ServiceUtil.returnError(e.getMessage());        }catch (        ItemNotFoundException e) {          return ServiceUtil.returnError(e.getMessage());        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public synchronized boolean removeMacro(int macroPosition){  String m=macrosses.remove(macroPosition);  if (m == null) {    logger.warn("Trying to remove non existing macro.");    return false;  }  return true;}  }
class C{  @Override public void onStreamCreated(PublisherKit publisherKit,Stream stream){  sendEvent(Events.EVENT_PUBLISH_START,Arguments.createMap());}  }
class C{  @deprecated public TimeZone parse(Style style,String text,ParsePosition pos,Output<TimeType> timeType){  return parse(style,text,pos,this._parseAllStyles,timeType);}  }
class C{  public void loadConf(URL confURL) throws ConfigurationException {  Configuration loadedConf=new PropertiesConfiguration(confURL);  addConfiguration(loadedConf);}  }
class C{  public Predicate joinPredicate(Schema sch1,Schema sch2){  Predicate result=new Predicate();  Schema newsch=new Schema();  newsch.addAll(sch1);  newsch.addAll(sch2);  for (  Term t : terms)   if (!t.isApplicableTo(sch1) && !t.isApplicableTo(sch2) && t.isApplicableTo(newsch))   result.terms.add(t);  return result.terms.size() == 0 ? null : result;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  NIOConfiguration copy=(NIOConfiguration)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public Builder iconSize(Point iconSize){  this.iconSize=iconSize;  return this;}  }
class C{  public boolean addDataSetElement(DataElement dataElement,DataElementCategoryCombo categoryCombo){  DataSetElement element=new DataSetElement(this,dataElement,categoryCombo);  dataElement.getDataSetElements().add(element);  return dataSetElements.add(element);}  }
class C{  public SimplifiedIntervalList union(SimplifiedIntervalList that){  return simplifyIntervals(this,that);}  }
class C{  public void addAnimation(Animation animation){  if (mAnimations.contains(animation)) {    return;  }  mAnimations.add(animation);  animation.start();}  }
class C{  public void changeCenterButtonIcon(int icon){  if (fab == null) {    Log.e(TAG,"You should call setCentreButtonIcon() instead, " + "changeCenterButtonIcon works if space navigation already set up");  } else {    fab.setImageResource(icon);    centreButtonIcon=icon;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201077,num0,skillname);}  }
class C{  public void init$Children(){}  }
class C{  protected void bindToProcessRegistry() throws RemoteException {  ProcessLogger.log("Locating registry on port: " + _procArg.getPort());  ProcessRegistry processRegistry=ProcessRegistry.locateRegistry(_procArg.getPort());  ProcessLogger.log("Located ProcessRegistry: " + processRegistry + "\n\t -> Registering with executerURL:  [JNDI URL="+ _procArg.getExecuterURL()+ "]");  processRegistry.register(_procArg.getExecuterURL(),getProcessStub());  ProcessLogger.log(" -> Registered.");  processRegistry.monitor(_procArg.getExecuterURL());}  }
class C{  protected void stopBKCluster() throws Exception {  if (bkc != null) {    bkc.close();  }  for (  BookieServer server : bs) {    server.shutdown();    AutoRecoveryMain autoRecovery=autoRecoveryProcesses.get(server);    if (autoRecovery != null && isAutoRecoveryEnabled()) {      autoRecovery.shutdown();      LOG.debug("Shutdown auto recovery for bookieserver:" + server.getLocalAddress());    }  }  bs.clear();  for (  File f : tmpDirs) {    FileUtils.deleteDirectory(f);  }}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public static void updateAll(DataStore dataStore,Iterable<Update> updates){  updateAll(dataStore,updates.iterator(),ImmutableSet.<String>of());}  }
class C{  protected void handleUpdate(T oldObject,T newObject){  this.preprocessMatch(oldObject,newObject);  executor.addForUpdate(oldObject,newObject);}  }
class C{  public CSVTableReader(){  super();}  }
class C{  public BufferedReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){  this._externalIterator=externalIterator;}  }
class C{  @RequestMapping(value="/pet-categories",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<PetCategory> updatePetCategory(@RequestBody PetCategory petCategory) throws URISyntaxException {  log.debug("REST request to update PetCategory : {}",petCategory);  if (petCategory.getPetCategoryId() == null) {    return createPetCategory(petCategory);  }  PetCategory result=petCategoryService.save(petCategory);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("petCategory",petCategory.getPetCategoryId().toString())).body(result);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String n;  JSONObject o=new JSONObject();  Object v;  JSONTokener x=new JSONTokener(string);  o.put("name",x.nextTo('='));  x.next('=');  o.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    n=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (n.equals("secure")) {        v=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      v=unescape(x.nextTo(';'));      x.next();    }    o.put(n,v);  }  return o;}  }
class C{  public List<T> nearestEuclidean(final double[] key,final double dist) throws KeySizeException {  return nearestDistance(key,dist,new EuclideanDistance());}  }
class C{  private void sendProgressReport(final int totalOperations,final int currentOperation,final int totalParts,final int currentPart,final String description){  ClientRequestResult report=new ConfigurationReport(totalOperations,currentOperation,totalParts,currentPart,description);  Collection<ClientRequestResult> response=new ArrayList<ClientRequestResult>();  response.add(report);  sendResponse(response);}  }
class C{  @Override public void browserLogEntry(BrowserLogEntry browserLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static Predictor createPredictor(DataElement writes,String uniqueCharacter,Expression expr,Expression skipTest,PeriodType periodType,OrganisationUnitLevel organisationUnitLevel,int sequentialSampleCount,int sequentialSkipCount,int annualSampleCount){  Predictor predictor=new Predictor();  Set<OrganisationUnitLevel> orglevels=Sets.newHashSet(organisationUnitLevel);  predictor.setAutoFields();  predictor.setOutput(writes);  predictor.setName("Predictor" + uniqueCharacter);  predictor.setDescription("Description" + uniqueCharacter);  predictor.setGenerator(expr);  predictor.setSampleSkipTest(skipTest);  predictor.setPeriodType(periodType);  predictor.setOrganisationUnitLevels(orglevels);  predictor.setSequentialSampleCount(sequentialSampleCount);  predictor.setAnnualSampleCount(annualSampleCount);  predictor.setSequentialSkipCount(sequentialSkipCount);  return predictor;}  }
class C{  protected boolean lockJobIfNeeded(){  try {    if (job.isExclusive()) {      processEngineConfiguration.getCommandExecutor().execute(new LockExclusiveJobCmd(job));    }  } catch (  Throwable lockException) {    if (log.isDebugEnabled()) {      log.debug("Could not lock exclusive job. Unlocking job so it can be acquired again. Catched exception: " + lockException.getMessage());    }    unacquireJob();    return false;  }  return true;}  }
class C{  public void tabsAllClosingEffect(long time){  boolean needAnimation=false;  if (mStackTabs != null) {    for (int i=0; i < mStackTabs.length; ++i) {      needAnimation|=!mStackTabs[i].isDying();      mStackTabs[i].setDying(true);    }  } else {    needAnimation=true;  }  if (needAnimation) {    mScrollOffsetForDyingTabs=mScrollOffset;    mSpacing=computeSpacing(0);    if (mStackTabs != null) {      boolean isRtl=!((mCurrentMode == Orientation.PORTRAIT) ^ LocalizationUtils.isLayoutRtl());      for (int i=0; i < mStackTabs.length; i++) {        StackTab tab=mStackTabs[i];        tab.setDiscardOriginY(0.f);        tab.setDiscardOriginX(isRtl ? 0.f : tab.getLayoutTab().getOriginalContentWidth());        tab.setDiscardFromClick(true);      }    }    startAnimation(time,OverviewAnimationType.DISCARD_ALL);  }  mIsDying=true;}  }
class C{  public VocalizationUnitFileReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public synchronized Object remove(int index){  Object[] elements=getArray();  int len=elements.length;  Object oldValue=elements[index];  int numMoved=len - index - 1;  if (numMoved == 0)   setArray(copyOf(elements,len - 1)); else {    Object[] newElements=new Object[len - 1];    System.arraycopy(elements,0,newElements,0,index);    System.arraycopy(elements,index + 1,newElements,index,numMoved);    setArray(newElements);  }  return oldValue;}  }
class C{  public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public void failPicture(String err){  this.callbackContext.error(err);}  }
class C{  private void updateNotificationsNodeLabel(DefaultMutableTreeNode node,String label){  DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)mbeansTab.getTree().getLastSelectedPathComponent();  if (node != selectedNode) {    return;  }  invalidate();  mbeansTab.getButtonAt(2).setText(label);  validate();  repaint();}  }
class C{  public void add(Boolean bool){  elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));}  }
class C{  public static List<GenericValue> findPartiesById(Delegator delegator,String idToFind,String partyIdentificationTypeId,boolean searchPartyFirst,boolean searchAllId) throws GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("Analyze partyIdentification: entered id = " + idToFind + ", partyIdentificationTypeId = "+ partyIdentificationTypeId,module);  GenericValue party=null;  List<GenericValue> partiesFound=null;  if (searchPartyFirst) {    party=EntityQuery.use(delegator).from("Party").where("partyId",idToFind).cache().queryOne();  }  if (searchAllId || (searchPartyFirst && UtilValidate.isEmpty(party))) {    Map<String,String> conditions=UtilMisc.toMap("idValue",idToFind);    if (UtilValidate.isNotEmpty(partyIdentificationTypeId)) {      conditions.put("partyIdentificationTypeId",partyIdentificationTypeId);    }    partiesFound=EntityQuery.use(delegator).from("PartyIdentificationAndParty").where(conditions).orderBy("partyId").cache(true).queryList();  }  if (!searchPartyFirst) {    party=EntityQuery.use(delegator).from("Party").where("partyId",idToFind).cache().queryOne();  }  if (UtilValidate.isNotEmpty(party)) {    if (UtilValidate.isNotEmpty(partiesFound))     partiesFound.add(party); else     partiesFound=UtilMisc.toList(party);  }  if (Debug.verboseOn())   Debug.logVerbose("Analyze partyIdentification: found party.partyId = " + party + ", and list : "+ partiesFound,module);  return partiesFound;}  }
class C{  public void killLocal(Local l){  int base=types.size() * locals.indexOf(l);  for (int i=0; i < types.size(); i++) {    clear(i + base);  }}  }
class C{  private static boolean checkLearnIsPossible(Player player,PlayerSkillList playerSkillList,SkillLearnTemplate template){  if (playerSkillList.isSkillPresent(template.getSkillId()))   return true;  if (player.havePermission(MembershipConfig.STIGMA_AUTOLEARN) && template.isStigma())   return true;  if (template.isAutolearn())   return true;  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BLOCKLIST_ADD_BLOCKED(String value0){  return new SM_SYSTEM_MESSAGE(1300892,value0);}  }
class C{  public IVarAbstraction findInstanceField(AllocNode obj,SparkField field){  AllocDotField af=findAllocDotField(obj,field);  return consG.get(af);}  }
class C{  public void stop(){  getTimer(SELF).stop(verbose);}  }
class C{  public DataParseException(String message,Throwable cause){  super(message,cause);}  }
class C{  @RequestMapping(value="/{id}/upload/extractBinary",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> extractBinaryFileUpload(@PathVariable Integer id,@RequestParam("extractBinary") MultipartFile multipartFile){  log.debug("File Upload: {}",multipartFile.getName());  Book book=bookRepository.findOne(id);  try {    book.setExtractBinary(multipartFile.getBytes());  } catch (  IOException ioe) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }  book.setExtractSize(multipartFile.getSize());  book.setExtractContentType(multipartFile.getContentType());  book.setExtractFileName(multipartFile.getOriginalFilename());  bookRepository.save(book);  return ResponseEntity.ok().build();}  }
class C{  public PointsToSet reachingObjects(SootField f){  Type t=f.getType();  if (t instanceof RefType)   return FullObjectSet.v((RefType)t);  return FullObjectSet.v();}  }
class C{  public static void print(int x){  out.print(x);  out.flush();}  }
class C{  public TrustingMonotonicArraySet(T[] elements){  this();  for (  T element : elements)   add(element);}  }
class C{  void addField(AllocDotField adf,SparkField field){  if (fields == null)   fields=new HashMap<SparkField,AllocDotField>();  fields.put(field,adf);}  }
class C{  public void write(TBase t) throws IOException {  try {    t.write(binaryOut);    dataOutputStream.flush();  } catch (  TException e) {    throw new IOException(e);  }}  }
class C{  private char read() throws CompileException, IOException {  this.peek();  if (this.nextChar == -1)   throw new CompileException("Unexpected end-of-input",this.location());  final char result=(char)this.nextChar;  this.sb.append(result);  this.nextChar=this.nextButOneChar;  this.nextButOneChar=-1;  return result;}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public boolean hasAggregationLevels(){  return aggregationLevels.size() > 0;}  }
class C{  public static <T extends Enum<T>>T forKey(int key,Map<Integer,T> mapping,Class<T> enumeration){  T t=mapping.get(key);  if (t != null) {    return t;  }  throw new IllegalArgumentException("Not an alternate key for " + enumeration.toString() + ": "+ key);}  }
class C{  public static CredentialsDialogFragment newInstanceForCredentials(WebView webView,HttpAuthHandler handler){  if (handler == null) {    throw new IllegalArgumentException("Trying to create instance with parameter handler" + " == null");  }  CredentialsDialogFragment frag=new CredentialsDialogFragment();  frag.mHandler=handler;  frag.mWebView=webView;  return frag;}  }
class C{  public void populateTextField(FieldIdEnum fieldId,String value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);    storeOriginalData(fieldConfig);  } else {    ConsoleManager.getInstance().error(this,String.format("populateTextField - %s : %s",Localisation.getString(StandardPanel.class,"StandardPanel.unknownField"),fieldId));  }}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public JsonParser(Charset charset){  this(new DefaultJsonFeeder(charset));}  }
class C{  public DatabaseGetUniversitiesQuery(VkApiClient client){  super(client,"database.getUniversities",GetUniversitiesResponse.class);}  }
class C{  public FriendsGetRequestsQueryWithExtended out(Boolean value){  return unsafeParam("out",value);}  }
class C{  private void closeConnectionQuietly(){  response.body().close();  response=null;  responseByteStream=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_PARRY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1230219,value0,value1);}  }
class C{  private static boolean inAppended(String[] names){  for (int i=0; i < names.length; i++) {    if (!theAppended.contains(names[i])) {      return false;    }  }  return true;}  }
class C{  public Experiment(String id){  this.id=id;}  }
class C{  private void fillLoadedBlocks(AbstractIndex[] loadedBlockArray,List<Future<AbstractIndex>> blocksList) throws IndexBuilderException {  int blockCounter=0;  for (int i=0; i < loadedBlockArray.length; i++) {    if (null == loadedBlockArray[i]) {      try {        loadedBlockArray[i]=blocksList.get(blockCounter++).get();      } catch (      InterruptedException|ExecutionException e) {        throw new IndexBuilderException(e);      }    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  private void createUI(){  setBorder(new LineBorder(new Color(0,0,0)));  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  JPanel panelSymbolMarkerTree=new JPanel();  add(panelSymbolMarkerTree);  JScrollPane scrollpane=new JScrollPane();  rootNode=new DefaultMutableTreeNode("SLD");  treeModel=new DefaultTreeModel(rootNode);  symbolTree=new JTree(treeModel);  symbolTree.setEditable(true);  symbolTree.setBorder(new LineBorder(Color.black));  ComponentCellRenderer cellRenderer=new ComponentCellRenderer(symbolTree.getCellRenderer());  symbolTree.setCellRenderer(cellRenderer);  symbolTree.setCellEditor(new CheckBoxNodeEditor(symbolTree,cellRenderer,this));  symbolTree.setEditable(true);  symbolTree.setRowHeight(0);  symbolTree.addTreeSelectionListener(this);  panelSymbolMarkerTree.setLayout(new BorderLayout(0,0));  scrollpane.setViewportView(symbolTree);  panelSymbolMarkerTree.add(scrollpane);  if (treeTools != null) {    treeTools.configure(this,symbolTree,treeModel,renderList);    add(treeTools.getButtonPanel());  } else {    setPreferredSize(new Dimension(SLDTreeTools.getPanelWidth(),PANEL_HEIGHT));  }}  }
class C{  public void addFootView(View view,int footerHeight){  addFootView(view,footerHeight,false);}  }
class C{  public static void writeAnalysisHTMLToFile(String outputPath,DataAnalysis dataAnalysis,JavaSparkContext sc){  try {    String analysisAsHtml=HtmlAnalysis.createHtmlAnalysisString(dataAnalysis);    writeStringToFile(outputPath,analysisAsHtml,sc);  } catch (  Exception e) {    throw new RuntimeException("Error generating or writing HTML analysis file (normalized data)",e);  }}  }
class C{  @Override public boolean skipSpaces() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (fCurrentEntity.isExternal()) {    if (XML11Char.isXML11Space(c)) {      do {        boolean entityChanged=false;        if (c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {          fCurrentEntity.lineNumber++;          fCurrentEntity.columnNumber=1;          if (fCurrentEntity.position == fCurrentEntity.count - 1) {            fCurrentEntity.ch[0]=(char)c;            entityChanged=load(1,true);            if (!entityChanged) {              fCurrentEntity.startPosition=0;              fCurrentEntity.position=0;            }          }          if (c == '\r') {            int cc=fCurrentEntity.ch[++fCurrentEntity.position];            if (cc != '\n' && cc != 0x85) {              fCurrentEntity.position--;            }          }        } else {          fCurrentEntity.columnNumber++;        }        if (!entityChanged)         fCurrentEntity.position++;        if (fCurrentEntity.position == fCurrentEntity.count) {          load(0,true);        }      } while (XML11Char.isXML11Space(c=fCurrentEntity.ch[fCurrentEntity.position]));      return true;    }  } else   if (XMLChar.isSpace(c)) {    do {      boolean entityChanged=false;      if (c == '\n') {        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count - 1) {          fCurrentEntity.ch[0]=(char)c;          entityChanged=load(1,true);          if (!entityChanged) {            fCurrentEntity.startPosition=0;            fCurrentEntity.position=0;          }        }      } else {        fCurrentEntity.columnNumber++;      }      if (!entityChanged)       fCurrentEntity.position++;      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    } while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));    return true;  }  return false;}  }
class C{  public static int readLittleEndianInt(DataInputStream dataStream) throws IOException {  int bits=0x00000000;  for (int shift=0; shift < 32; shift+=8) {    int byteRead=(0x000000ff & dataStream.readByte());    bits|=(byteRead << shift);  }  return bits;}  }
class C{  private JarServiceProvider(){}  }
class C{  private void addInsideTouching(final SubHyperplane<S> sub,final List<BSPTree<S>> splitters){  if (insideTouching == null) {    insideTouching=sub;  } else {    insideTouching=insideTouching.reunite(sub);  }  insideSplitters.addAll(splitters);}  }
class C{  protected boolean isUnauthenticated(ClientHttpResponse clientHttpResponse) throws IOException {  return (clientHttpResponse.getStatusCode().equals(HttpStatus.FOUND) && clientHttpResponse.getHeaders().getLocation().getPath().equals("/login")) || (clientHttpResponse.getStatusCode().equals(HttpStatus.UNAUTHORIZED));}  }
class C{  public FormField withIcon(int resId){  this.mIconView.setImageResource(resId);  return this;}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public synchronized void rotate(final Point2D p,double theta){  m_itransform.transform(p,m_tmpPoint);  rotateAbs(m_tmpPoint,theta);}  }
class C{  public Builder takeFirstColumns(String... columns){  return add(ReduceOp.TakeFirst,columns);}  }
class C{  public RevealBuilder withChildAnimationDuration(final int childAnimationDuration){  this.mChildAnimationDuration=childAnimationDuration;  return this;}  }
class C{  public void testAddModuleWithNondefaultLocationOutsideProject() throws IOException {  final String modulePath=FileUtil.toSystemIndependentName(FileUtil.getTempDirectory()) + "/directory/module";  File moduleLocation=new File(modulePath);  final GradleSettingsFile file=getSimpleTestFile();  assertModuleWithNonDefaultLocation(file,":mymodule",modulePath,moduleLocation);}  }
class C{  public AccessPath mayAlias(AccessPath ap,Value val){  if (!AccessPath.canContainValue(val))   return null;  if (val instanceof Constant)   return null;  if (val instanceof Local)   if (ap.getPlainValue() != val)   return null;  if (val instanceof ArrayRef)   if (ap.getPlainValue() != ((ArrayRef)val).getBase())   return null;  if (val instanceof InstanceFieldRef) {    if (!ap.isLocal() && !ap.isInstanceFieldRef())     return null;    if (((InstanceFieldRef)val).getBase() != ap.getPlainValue())     return null;  }  if (val instanceof StaticFieldRef)   if (!ap.isStaticFieldRef())   return null;  SootField[] fields=val instanceof FieldRef ? new SootField[]{((FieldRef)val).getField()} : new SootField[0];  return getReferencedAPBase(ap,fields);}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  public static String camelCaseToUnderlines(String string){  if (string.isEmpty()) {    return string;  }  StringBuilder sb=new StringBuilder(2 * string.length());  int n=string.length();  boolean lastWasUpperCase=Character.isUpperCase(string.charAt(0));  for (int i=0; i < n; i++) {    char c=string.charAt(i);    boolean isUpperCase=Character.isUpperCase(c);    if (isUpperCase && !lastWasUpperCase) {      sb.append('_');    }    lastWasUpperCase=isUpperCase;    c=Character.toLowerCase(c);    sb.append(c);  }  return sb.toString();}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,false);}  }
class C{  public static Event createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Event.class);}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  public boolean needsHighlight(int xIndex,int dataSetIndex){  if (!valuesToHighlight() || dataSetIndex < 0)   return false;  for (int i=0; i < mIndicesToHighlight.length; i++)   if (mIndicesToHighlight[i].getXIndex() == xIndex && mIndicesToHighlight[i].getDataSetIndex() == dataSetIndex)   return true;  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200921,skilltarget,skillcaster,skillname);}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  public void collapseSelectedNodes(){  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {    getCollapsedIds().add((Integer)v.getInfo());  }  updateTree();}  }
class C{  @SuppressFBWarnings("DM_EXIT") public static void show(Activity activity,int errorCode){  int msg;switch (errorCode) {case LoaderErrors.LOADER_ERROR_NATIVE_LIBRARY_LOAD_FAILED:    msg=R.string.os_version_missing_features;  break;case LoaderErrors.LOADER_ERROR_NATIVE_LIBRARY_WRONG_VERSION:msg=R.string.incompatible_libraries;break;default :msg=R.string.native_startup_failed;}final String message=activity.getResources().getString(msg);if (!(activity instanceof FragmentActivity)) {Log.e(TAG,"Unable to start chrome due to: " + msg);System.exit(-1);return;}Bundle dialogArgs=new Bundle();dialogArgs.putString(MESSAGE_KEY,message);InvalidStartupDialog dialog=new InvalidStartupDialog();dialog.setArguments(dialogArgs);dialog.show(((FragmentActivity)activity).getSupportFragmentManager(),"InvalidStartupDialog");}  }
class C{  public Boolean isRepeat(){  return repeat;}  }
class C{  public String process(Item seg) throws ProcessException {  return segOnsetCtype(seg,"f");}  }
class C{  public void startFirstSampleTimer(){  firstSound=true;  timer.start("AudioFirstSound");}  }
class C{  public ZWaveMultiLevelToggleSwitchCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public Jim2Mov(ImageProvider ip,MovieInfoProvider mip,FrameSavedListener listener){  this(ip,mip);  addFrameSavedListener(listener);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ChartViewer viewer=(ChartViewer)getViewer();  np.matchIgnoreCase("show what=");  String what=np.getWordMatchesIgnoringCase("all none selected");  final LabelsJList list;  if (np.peekMatchIgnoreCase("target=")) {    np.matchIgnoreCase("target=");    list=viewer.getLabelsJList(np.getWordMatchesIgnoringCase("series classes attributes"));  } else {    list=viewer.getActiveLabelsJList();  }  np.matchIgnoreCase(";");  if (what.equalsIgnoreCase("none")) {    list.disableLabels(list.getAllLabels());  } else   if (what.equalsIgnoreCase("selected")) {    list.enableLabels(list.getSelectedLabels());  } else {    list.enableLabels(list.getAllLabels());  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LocalClassDeclStmt fullCopy(){  LocalClassDeclStmt tree=(LocalClassDeclStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public boolean writeAnnotation(Object target,short targetType){  if (targetType == XSAnnotation.W3C_DOM_ELEMENT || targetType == XSAnnotation.W3C_DOM_DOCUMENT) {    writeToDOM((Node)target,targetType);    return true;  } else   if (targetType == SAX_CONTENTHANDLER) {    writeToSAX((ContentHandler)target);    return true;  }  return false;}  }
class C{  private void adjustIndeterminate(){  try {    Field mOnlyIndeterminateField=ProgressBar.class.getDeclaredField("mOnlyIndeterminate");    mOnlyIndeterminateField.setAccessible(true);    mOnlyIndeterminateField.set(this,false);    Field mIndeterminateField=ProgressBar.class.getDeclaredField("mIndeterminate");    mIndeterminateField.setAccessible(true);    mIndeterminateField.set(this,false);    Field mCurrentDrawableField=ProgressBar.class.getDeclaredField("mCurrentDrawable");    mCurrentDrawableField.setAccessible(true);    mCurrentDrawableField.set(this,null);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  protected GroupsRemoveUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void startScreenService(){  launchButton.setText(R.string.accept_screen_capture);  MediaProjectionManager projectionManager=(MediaProjectionManager)getSystemService(Context.MEDIA_PROJECTION_SERVICE);  startActivityForResult(projectionManager.createScreenCaptureIntent(),SCREEN_CAPTURE_REQ_CODE);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public <R>Plan<R> then(Function8<T1,T2,T3,T4,T5,T6,T7,T8,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan8<T1,T2,T3,T4,T5,T6,T7,T8,R>(this,selector);}  }
class C{  public CollectionAdapter(Context a,List<Collection> list){  this.a=a;  this.itemList=list;}  }
class C{  public GameTime minus(GameTime gt){  return new GameTime(this.getTime() - gt.getTime());}  }
class C{  @Override public TableView formatTable(LogicalTable logicalTable,UriInfo uriInfo){  TableView resultRow=new TableView();  resultRow.put("name",logicalTable.getName());  resultRow.put("longName",logicalTable.getLongName());  resultRow.put("description",logicalTable.getDescription());  resultRow.put("category",logicalTable.getCategory());  return resultRow;}  }
class C{  public static BigDecimal safeAdd(BigDecimal left,BigDecimal right){  return right != null ? left.add(right) : left;}  }
class C{  boolean isVariablePrecision(){  return variablePrecision;}  }
class C{  public AdsGetCategoriesQuery(VkApiClient client,UserActor actor){  super(client,"ads.getCategories",Utils.buildParametrizedType(List.class,Category.class));  accessToken(actor.getAccessToken());}  }
class C{  public static boolean exists(Bson query,Class<? extends Bean> t) throws Exception {  String collection=getCollection(t);  if (collection != null) {    return exists(collection,query);  }  throw new Exception("the Class<" + t.getName() + "> doest annotated by @DBMapping()!");}  }
class C{  @Override public Scan open(){  TempTable tt=copyRecordsFrom(rhs);  TableInfo ti=tt.getTableInfo();  Scan leftscan=lhs.open();  return new MultiBufferProductScan(leftscan,ti,tx);}  }
class C{  public static Map<String,Object> sendMail(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String communicationEventId=(String)context.get("communicationEventId");  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  if (communicationEventId != null) {    Debug.logInfo("SendMail Running, for communicationEventId : " + communicationEventId,module);  }  Map<String,Object> results=ServiceUtil.returnSuccess();  String subject=(String)context.get("subject");  subject=FlexibleStringExpander.expandString(subject,context);  String partyId=(String)context.get("partyId");  String body=(String)context.get("body");  List<Map<String,Object>> bodyParts=UtilGenerics.checkList(context.get("bodyParts"));  GenericValue userLogin=(GenericValue)context.get("userLogin");  results.put("communicationEventId",communicationEventId);  results.put("partyId",partyId);  results.put("subject",subject);  if (UtilValidate.isNotEmpty(orderId)) {    results.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(body)) {    body=FlexibleStringExpander.expandString(body,context);    results.put("body",body);  }  if (UtilValidate.isNotEmpty(bodyParts)) {    results.put("bodyParts",bodyParts);  }  results.put("userLogin",userLogin);  String sendTo=(String)context.get("sendTo");  String sendCc=(String)context.get("sendCc");  String sendBcc=(String)context.get("sendBcc");  String redirectAddress=EntityUtilProperties.getPropertyValue("general.properties","mail.notifications.redirectTo",delegator);  if (UtilValidate.isNotEmpty(redirectAddress)) {    String originalRecipients=" [To: " + sendTo + ", Cc: "+ sendCc+ ", Bcc: "+ sendBcc+ "]";    subject+=originalRecipients;    sendTo=redirectAddress;    sendCc=null;    sendBcc=null;    if (subject.length() > 255) {      subject=subject.substring(0,255);    }  }  String sendFrom=(String)context.get("sendFrom");  String sendType=(String)context.get("sendType");  String port=(String)context.get("port");  String socketFactoryClass=(String)context.get("socketFactoryClass");  String socketFactoryPort=(String)context.get("socketFactoryPort");  String socketFactoryFallback=(String)context.get("socketFactoryFallback");  String sendVia=(String)context.get("sendVia");  String authUser=(String)context.get("authUser");  String authPass=(String)context.get("authPass");  String messageId=(String)context.get("messageId");  String contentType=(String)context.get("contentType");  Boolean sendPartial=(Boolean)context.get("sendPartial");  Boolean isStartTLSEnabled=(Boolean)context.get("startTLSEnabled");  boolean useSmtpAuth=false;  if (sendType == null || sendType.equals("mail.smtp.host")) {    sendType="mail.smtp.host";    if (UtilValidate.isEmpty(sendVia)) {      sendVia=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.relay.host","localhost",delegator);    }    if (UtilValidate.isEmpty(authUser)) {      authUser=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.auth.user",delegator);    }    if (UtilValidate.isEmpty(authPass)) {      authPass=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.auth.password",delegator);    }    if (UtilValidate.isNotEmpty(authUser)) {      useSmtpAuth=true;    }    if (UtilValidate.isEmpty(port)) {      port=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.port",delegator);    }    if (UtilValidate.isEmpty(socketFactoryPort)) {      socketFactoryPort=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.port",delegator);    }    if (UtilValidate.isEmpty(socketFactoryClass)) {      socketFactoryClass=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.class",delegator);    }    if (UtilValidate.isEmpty(socketFactoryFallback)) {      socketFactoryFallback=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.fallback","false",delegator);    }    if (sendPartial == null) {      sendPartial=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.smtp.sendpartial","true",delegator) ? true : false;    }    if (isStartTLSEnabled == null) {      isStartTLSEnabled=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.smtp.starttls.enable","true",delegator);    }  } else   if (sendVia == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMissingParameterSendVia",locale));  }  if (contentType == null) {    contentType="text/html";  }  if (UtilValidate.isNotEmpty(bodyParts)) {    contentType="multipart/mixed";  }  results.put("contentType",contentType);  Session session;  MimeMessage mail;  try {    Properties props=System.getProperties();    props.put(sendType,sendVia);    if (UtilValidate.isNotEmpty(port)) {      props.put("mail.smtp.port",port);    }    if (UtilValidate.isNotEmpty(socketFactoryPort)) {      props.put("mail.smtp.socketFactory.port",socketFactoryPort);    }    if (UtilValidate.isNotEmpty(socketFactoryClass)) {      props.put("mail.smtp.socketFactory.class",socketFactoryClass);      Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());    }    if (UtilValidate.isNotEmpty(socketFactoryFallback)) {      props.put("mail.smtp.socketFactory.fallback",socketFactoryFallback);    }    if (useSmtpAuth) {      props.put("mail.smtp.auth","true");    }    if (sendPartial != null) {      props.put("mail.smtp.sendpartial",sendPartial ? "true" : "false");    }    if (isStartTLSEnabled) {      props.put("mail.smtp.starttls.enable","true");    }    session=Session.getInstance(props);    boolean debug=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.debug.on","Y",delegator);    session.setDebug(debug);    mail=new MimeMessage(session);    if (messageId != null) {      mail.setHeader("In-Reply-To",messageId);      mail.setHeader("References",messageId);    }    mail.setFrom(new InternetAddress(sendFrom));    mail.setSubject(subject,"UTF-8");    mail.setHeader("X-Mailer","Apache OFBiz, The Open For Business Project");    mail.setSentDate(new Date());    mail.addRecipients(Message.RecipientType.TO,sendTo);    if (UtilValidate.isNotEmpty(sendCc)) {      mail.addRecipients(Message.RecipientType.CC,sendCc);    }    if (UtilValidate.isNotEmpty(sendBcc)) {      mail.addRecipients(Message.RecipientType.BCC,sendBcc);    }    if (UtilValidate.isNotEmpty(bodyParts)) {      MimeMultipart mp=new MimeMultipart();      Debug.logInfo(bodyParts.size() + " multiparts found",module);      for (      Map<String,Object> bodyPart : bodyParts) {        Object bodyPartContent=bodyPart.get("content");        MimeBodyPart mbp=new MimeBodyPart();        if (bodyPartContent instanceof String) {          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ bodyPart.get("content").toString().length(),module);          mbp.setText((String)bodyPartContent,"UTF-8",((String)bodyPart.get("type")).substring(5));        } else         if (bodyPartContent instanceof byte[]) {          ByteArrayDataSource bads=new ByteArrayDataSource((byte[])bodyPartContent,(String)bodyPart.get("type"));          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ ((byte[])bodyPartContent).length,module);          mbp.setDataHandler(new DataHandler(bads));        } else         if (bodyPartContent instanceof DataHandler) {          mbp.setDataHandler((DataHandler)bodyPartContent);        } else {          mbp.setDataHandler(new DataHandler(bodyPartContent,(String)bodyPart.get("type")));        }        String fileName=(String)bodyPart.get("filename");        if (fileName != null) {          mbp.setFileName(fileName);        }        mp.addBodyPart(mbp);      }      mail.setContent(mp);      mail.saveChanges();    } else {      if (contentType.startsWith("text")) {        mail.setText(body,"UTF-8",contentType.substring(5));      } else {        mail.setContent(body,contentType);      }      mail.saveChanges();    }  } catch (  MessagingException e) {    Debug.logError(e,"MessagingException when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMessagingException",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }catch (  IOException e) {    Debug.logError(e,"IOExcepton when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendIOException",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }  String mailEnabled=EntityUtilProperties.getPropertyValue("general.properties","mail.notifications.enabled","N",delegator);  if (!"Y".equalsIgnoreCase(mailEnabled)) {    Debug.logImportant("Mail notifications disabled in general.properties; mail with subject [" + subject + "] not sent to addressee ["+ sendTo+ "]",module);    Debug.logVerbose("What would have been sent, the addressee: " + sendTo + " subject: "+ subject+ " context: "+ context,module);    results.put("messageWrapper",new MimeMessageWrapper(session,mail));    return results;  }  Transport trans=null;  try {    trans=session.getTransport("smtp");    if (!useSmtpAuth) {      trans.connect();    } else {      trans.connect(sendVia,authUser,authPass);    }    trans.sendMessage(mail,mail.getAllRecipients());    results.put("messageWrapper",new MimeMessageWrapper(session,mail));    results.put("messageId",mail.getMessageID());    trans.close();  } catch (  SendFailedException e) {    Debug.logError(e,"[ADDRERR] Address error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    List<SMTPAddressFailedException> failedAddresses=new LinkedList<SMTPAddressFailedException>();    Exception nestedException=null;    while ((nestedException=e.getNextException()) != null && nestedException instanceof MessagingException) {      if (nestedException instanceof SMTPAddressFailedException) {        SMTPAddressFailedException safe=(SMTPAddressFailedException)nestedException;        Debug.logError("Failed to send message to [" + safe.getAddress() + "], return code ["+ safe.getReturnCode()+ "], return message ["+ safe.getMessage()+ "]",module);        failedAddresses.add(safe);        break;      }    }    Boolean sendFailureNotification=(Boolean)context.get("sendFailureNotification");    if (sendFailureNotification == null || sendFailureNotification) {      sendFailureNotification(ctx,context,mail,failedAddresses);      results.put("messageWrapper",new MimeMessageWrapper(session,mail));      try {        results.put("messageId",mail.getMessageID());        trans.close();      } catch (      MessagingException e1) {        Debug.logError(e1,module);      }    } else {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendAddressError",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));    }  }catch (  MessagingException e) {    Debug.logError(e,"[CON] Connection error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be sent to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendConnectionError",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }  return results;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201045,num0,skillname);}  }
class C{  public String toString(){  return "MulticastRequest[" + host + ":"+ port+ ", "+ Arrays.asList(groups)+ ", "+ Arrays.asList(serviceIDs)+ "]";}  }
class C{  public void terminate() throws RemoteException {  Hashtable<String,IJSpace> tmpDepot=(Hashtable<String,IJSpace>)_registeredSpaces.clone();  for (  String spaceName : tmpDepot.keySet())   unregister(spaceName);  if (_logger.isLoggable(Level.FINE))   _logger.fine("All spaces unregistered successfully");}  }
class C{  @Nullable("if theme with this name was already added or resolution has failed") private ConfiguredThemeEditorStyle constructThemeFromResourceValue(@NotNull StyleResourceValue value,@Nullable Module sourceModule){  final String name=ResolutionUtils.getQualifiedStyleName(value);  if (myThemeByName.containsKey(name)) {    return null;  }  final ConfiguredThemeEditorStyle theme=ResolutionUtils.getStyle(myConfiguration,name,sourceModule);  if (theme != null) {    myThemeByName.put(name,theme);  }  return theme;}  }
class C{  public GroupValue(Scan s,Collection<String> groupFlds){  vals=new HashMap<String,Constant>();  for (  String fldname : groupFlds)   vals.put(fldname,s.getVal(fldname));}  }
class C{  @Deployment public void testProcessDefinitionListenerDefinition() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testEventListeners");  assertNotNull(testListenerBean);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  taskService.complete(task.getId());  assertFalse(testListenerBean.getEventsReceived().isEmpty());  for (  ActivitiEvent event : testListenerBean.getEventsReceived()) {    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  }  assertTrue(testListenerBean.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  ActivitiEntityEvent event=(ActivitiEntityEvent)testListenerBean.getEventsReceived().get(0);  assertTrue(event.getEntity() instanceof ProcessInstance);  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  List<ActivitiEvent> events=StaticTestActivitiEventListener.getEventsReceived();  assertFalse(events.isEmpty());  boolean insertFound=false;  boolean deleteFound=false;  for (  ActivitiEvent e : events) {    if (ActivitiEventType.ENTITY_CREATED == e.getType()) {      insertFound=true;    } else     if (ActivitiEventType.ENTITY_DELETED == e.getType()) {      deleteFound=true;    }  }  assertTrue(insertFound);  assertTrue(deleteFound);}  }
class C{  private static boolean haveChecked(String category,String name,boolean createWithProject){  String key=getCheckKey(category,name,createWithProject);  return ourTemplatesChecked.contains(key);}  }
class C{  public static <T>Set<T> stringToSet(String val,Class<T> type){  String[] tokens=trim(val).split(",");  return Arrays.stream(tokens).map(null).collect(Collectors.toSet());}  }
class C{  public synchronized void reset(){  timer.start("audioOut");  if (line != null) {    waitResume();    if (isCancelled() && !isDone()) {      cancelled=false;      line.start();    }  }}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (textField != null) {      return textField.isEnabled();    }  }  return false;}  }
class C{  private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {  Object saved=state.get();  try {    state.set(obj);    return ctx.isTrustedObject(obj);  }  finally {    state.set(saved);  }}  }
class C{  public static String convertAsciiInputStreamToString(InputStream inputStream,int inputStreamLength) throws IOException {  InputStreamReader in=new InputStreamReader(inputStream);  StringWriter writer=new StringWriter();  int blockSize=DEFAULT_BUFFER_SIZE;  char[] buffer=new char[blockSize];  int left=inputStreamLength;  while (left > 0) {    int read=in.read(buffer,0,left > blockSize ? blockSize : left);    if (read == -1)     break;    writer.write(buffer,0,read);    left-=read;  }  writer.close();  return writer.toString();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.GOODALL_NORMALIZED + ";");}  }
class C{  private StyledLayerDescriptor createSLD(){  String sldContents="<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>" + "<StyledLayerDescriptor version=\"1.0.0\" " + "    xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\" "+ "    xmlns=\"http://www.opengis.net/sld\" "+ "    xmlns:ogc=\"http://www.opengis.net/ogc\" "+ "    xmlns:xlink=\"http://www.w3.org/1999/xlink\" "+ "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+ "  <NamedLayer>"+ "    <Name>Attribute-based point</Name>"+ "    <UserStyle>"+ "      <Title>GeoServer SLD Cook Book: Attribute-based point</Title>"+ "      <FeatureTypeStyle>"+ "        <Rule>"+ "          <Name>SmallPop</Name>"+ "          <Title>1 to 50000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>50000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "        <Rule>"+ "          <Name>MediumPop</Name>"+ "          <Title>50000 to 500000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>500000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>circle</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#123456</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "        <Rule>"+ "          <Name>LargePop</Name>"+ "          <Title>500000 to 900000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>900000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "      </FeatureTypeStyle>"+ "    </UserStyle>"+ "  </NamedLayer>"+ "</StyledLayerDescriptor>";  SLDData sldData=new SLDData(new StyleWrapper(null,"test.sld"),sldContents);  sldData.setDataSourceProperties(DataSourceConnectorFactory.getNoDataSource());  StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);  return sld;}  }
class C{  public static <T>T def(T original,T def){  return original != null ? original : def;}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public double distance(double x,double y){  double dx=this.x - x;  double dy=this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  @Override public void onRequestError(int code,String message){  progressDialog.cancel();  showMessage(message);}  }
class C{  protected static byte[] buildPayload(SendMessageType sendMessageType,MedtronicCNLSession pumpSession,byte[] payload) throws EncryptionException {  byte payloadLength=(byte)(payload == null ? 0 : payload.length);  ByteBuffer sendPayloadBuffer=ByteBuffer.allocate(ENCRYPTED_ENVELOPE_SIZE + payloadLength + CRC_SIZE);  sendPayloadBuffer.order(ByteOrder.BIG_ENDIAN);  sendPayloadBuffer.put(sendSequenceNumber(sendMessageType));  sendPayloadBuffer.putShort(sendMessageType.value);  if (payloadLength != 0) {    sendPayloadBuffer.put(payload);  }  sendPayloadBuffer.putShort((short)MessageUtils.CRC16CCITT(sendPayloadBuffer.array(),0xffff,0x1021,ENCRYPTED_ENVELOPE_SIZE + payloadLength));  ByteBuffer payloadBuffer=ByteBuffer.allocate(ENVELOPE_SIZE + sendPayloadBuffer.capacity());  payloadBuffer.order(ByteOrder.LITTLE_ENDIAN);  payloadBuffer.putLong(pumpSession.getPumpMAC());  payloadBuffer.put((byte)pumpSession.getMedtronicSequenceNumber());  payloadBuffer.put((byte)0x10);  payloadBuffer.put((byte)sendPayloadBuffer.capacity());  payloadBuffer.put(encrypt(pumpSession.getKey(),pumpSession.getIV(),sendPayloadBuffer.array()));  return payloadBuffer.array();}  }
class C{  public void processPackets(Player player,List<DataPacket> packets){  if (packets.isEmpty())   return;  List<Byte> filter=new ArrayList<>();  for (  DataPacket packet : packets) {    player.handleDataPacket(packet);  }}  }
class C{  private void postTreeBuildInit(CMNode nodeCur) throws RuntimeException {  nodeCur.setMaxStates(fLeafCount);  XSCMLeaf leaf=null;  int pos=0;  if (nodeCur.type() == XSParticleDecl.PARTICLE_WILDCARD) {    leaf=(XSCMLeaf)nodeCur;    pos=leaf.getPosition();    fLeafList[pos]=leaf;    fLeafListType[pos]=XSParticleDecl.PARTICLE_WILDCARD;  } else   if ((nodeCur.type() == XSModelGroupImpl.MODELGROUP_CHOICE) || (nodeCur.type() == XSModelGroupImpl.MODELGROUP_SEQUENCE)) {    postTreeBuildInit(((XSCMBinOp)nodeCur).getLeft());    postTreeBuildInit(((XSCMBinOp)nodeCur).getRight());  } else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ONE_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_ONE) {    postTreeBuildInit(((XSCMUniOp)nodeCur).getChild());  } else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ELEMENT) {    leaf=(XSCMLeaf)nodeCur;    pos=leaf.getPosition();    fLeafList[pos]=leaf;    fLeafListType[pos]=XSParticleDecl.PARTICLE_ELEMENT;  } else {    throw new RuntimeException("ImplementationMessages.VAL_NIICM");  }}  }
class C{  protected int countToken(String token,String target){  int tokenIndex=0;  int count=0;  while (tokenIndex != -1) {    tokenIndex=target.indexOf(token,tokenIndex);    if (tokenIndex > -1) {      tokenIndex++;      count++;    }  }  return count;}  }
class C{  public boolean dump_solution(){  return soot.PhaseOptions.getBoolean(options,"dump-solution");}  }
class C{  public void putMessageFormatter(String domain,MessageFormatter messageFormatter){  fMessageFormatters.put(domain,messageFormatter);}  }
class C{  private TypeRef resolveType(Location location,FieldDescriptorProto.Type kind,String name){  TypeRef type;switch (kind) {case TYPE_MESSAGE:case TYPE_ENUM:case TYPE_GROUP:    type=symbolTable.resolveType(namespaces.peek(),name);  break;default :type=TypeRef.of(kind);}if (type == null) {model.getDiagCollector().addDiag(Diag.error(location,"Unresolved type '%s'",name));}return type;}  }
class C{  public void add(Map.Entry<String,String> entry){  if (entry == null) {    throw new NullPointerException("context");  }synchronized (contexts) {    contexts.add(Maps.immutableEntry(entry.getKey(),entry.getValue()));  }}  }
class C{  public void show(String title){  long overall=getTimer(SELF).getCurrentTime();  Collection values=timers.values();  Timer.showTimesShortTitle(title);  for (Iterator i=values.iterator(); i.hasNext(); ) {    Timer t=(Timer)i.next();    t.showTimes(overall);  }}  }
class C{  public static void deleteFriend(Player deleter,int exFriend2Id){  if (DAOManager.getDAO(FriendListDAO.class).delFriends(deleter.getObjectId(),exFriend2Id)) {    Player friend2Player=PlayerService.getCachedPlayer(exFriend2Id);    if (friend2Player == null) {      friend2Player=World.getInstance().findPlayer(exFriend2Id);    }    String friend2Name=friend2Player != null ? friend2Player.getName() : DAOManager.getDAO(PlayerDAO.class).loadPlayerCommonData(exFriend2Id).getName();    deleter.getFriendList().delFriend(exFriend2Id);    deleter.getClientConnection().sendPacket(new SM_FRIEND_LIST());    deleter.getClientConnection().sendPacket(new SM_FRIEND_RESPONSE(friend2Name,SM_FRIEND_RESPONSE.TARGET_REMOVED));    if (friend2Player != null) {      friend2Player.getFriendList().delFriend(deleter.getObjectId());      if (friend2Player.isOnline()) {        friend2Player.getClientConnection().sendPacket(new SM_FRIEND_NOTIFY(SM_FRIEND_NOTIFY.DELETED,deleter.getName()));        friend2Player.getClientConnection().sendPacket(new SM_FRIEND_LIST());      }    }  }}  }
class C{  public static String stripQuotes(String string){  if (string.startsWith("\"\"\"")) {    return string.length() <= 3 ? "" : string.substring(3,endTrimIndex(string,'"',3));  }  if (string.startsWith("'''")) {    return string.length() <= 3 ? "" : string.substring(3,endTrimIndex(string,'\'',3));  }  if (string.startsWith("\"")) {    return string.substring(1,endTrimIndex(string,'"',1));  }  if (string.startsWith("'")) {    return string.substring(1,endTrimIndex(string,'\'',1));  }  return string;}  }
class C{  public LaguerreSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public boolean isJiniProtocol(){  return StringUtils.equalsIgnoreCase(getProtocol(),JINI_PROTOCOL);}  }
class C{  public BorwsableObject(Intent intent){  if (intent.getDataString() == null) {    intentUri=null;  } else {    intentUri=Uri.parse(intent.getDataString());  }  service=UserService.getService();}  }
class C{  public boolean isEmpty(){synchronized (contexts) {    return contexts.isEmpty();  }}  }
class C{  private void startAnimation(long time,OverviewAnimationType type,boolean finishImmediately){  startAnimation(time,type,TabModel.INVALID_TAB_INDEX,finishImmediately);}  }
class C{  public static void pickImage(Activity activity,String chooserTitle){  Intent chooseImageIntent=getPickImageIntent(activity,chooserTitle);  activity.startActivityForResult(chooseImageIntent,PICK_IMAGE_ID);}  }
class C{  public boolean isWord(){  return findChild('*') != null;}  }
class C{  protected int addContentSpecNode(short nodeType,int leftNodeIndex,int rightNodeIndex){  int contentSpecIndex=createContentSpec();  int[] leftIntArray=new int[1];  int[] rightIntArray=new int[1];  leftIntArray[0]=leftNodeIndex;  rightIntArray[0]=rightNodeIndex;  fContentSpec.setValues(nodeType,leftIntArray,rightIntArray);  setContentSpec(contentSpecIndex,fContentSpec);  return contentSpecIndex;}  }
class C{  public boolean constCaching(){  return constCaching;}  }
class C{  public void addValue(int v){  incrementValue(Long.valueOf(v),1);}  }
class C{  private List<ProcessChange> updateControlTagInformation(final ConfigurationElement element,final Process process){  List<ProcessChange> changes=new ArrayList<ProcessChange>(3);  Long processId=process.getId();  ControlTag aliveTagCopy=controlCache.getCopy(process.getAliveTagId());  if (aliveTagCopy != null) {    setProcessId((ControlTagCacheObject)aliveTagCopy,processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (%s) found for process #%d (%s).",process.getAliveTagId(),process.getId(),process.getName()));  }  ControlTag statusTagCopy=controlCache.getCopy(process.getStateTagId());  if (statusTagCopy != null) {    setProcessId((ControlTagCacheObject)statusTagCopy,processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%s) found for process #%d (%s).",process.getStateTagId(),process.getId(),process.getName()));  }  return changes;}  }
class C{  public static void debugLongInfo(String str){  debugLongInfo("zhibo",str);}  }
class C{  public void addReceiver(AXmlNode node){  if (receivers.isEmpty())   receivers=new ArrayList<AXmlNode>();  receivers.add(node);}  }
class C{  public void centerHorizontally(ConstraintWidget widget){  ConstraintAnchor left=getClosestHorizontalWidgetAnchor(widget,true);  ConstraintAnchor right=getClosestHorizontalWidgetAnchor(widget,false);  widget.connect(widget.getAnchor(ConstraintAnchor.Type.LEFT),left,0);  widget.connect(widget.getAnchor(ConstraintAnchor.Type.RIGHT),right,0);}  }
class C{  public IntIterator childEdgeRows(int node){  return super.outEdgeRows(node);}  }
class C{  @Override protected MeasureOutput measure(int width,int height){  int screenH=WXViewUtils.getScreenHeight(WXEnvironment.sApplication);  int weexH=WXViewUtils.getWeexHeight(mInstanceId);  int outHeight=height > (weexH >= screenH ? screenH : weexH) ? weexH - mAbsoluteY : height;  return super.measure(width,outHeight);}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public FileWriterWithEncoding(File file,String encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public Plane(final Vector3D p,final Vector3D normal,final double tolerance) throws MathRuntimeException {  setNormal(normal);  this.tolerance=tolerance;  originOffset=-p.dotProduct(w);  setFrame();}  }
class C{  public PolyhedronsSet(final List<Vector3D> vertices,final List<int[]> facets,final double tolerance){  super(buildBoundary(vertices,facets,tolerance),tolerance);}  }
class C{  public boolean remove(Predicate p){  if (m_clauses.remove(p)) {    fireExpressionChange();    return true;  } else {    return false;  }}  }
class C{  public TargetFeatureComputer(FeatureProcessorManager manager,String featureProcessorNames){  List<MaryFeatureProcessor> byteValuedFeatureProcessors=new ArrayList<MaryFeatureProcessor>();  List<MaryFeatureProcessor> shortValuedFeatureProcessors=new ArrayList<MaryFeatureProcessor>();  List<MaryFeatureProcessor> continuousValuedFeatureProcessors=new ArrayList<MaryFeatureProcessor>();  StringTokenizer st=new StringTokenizer(featureProcessorNames);  while (st.hasMoreTokens()) {    String name=st.nextToken();    MaryFeatureProcessor fp=manager.getFeatureProcessor(name);    if (fp == null) {      throw new IllegalArgumentException("Unknown feature processor: " + name);    } else     if (fp instanceof ByteValuedFeatureProcessor) {      byteValuedFeatureProcessors.add(fp);    } else     if (fp instanceof ShortValuedFeatureProcessor) {      shortValuedFeatureProcessors.add(fp);    } else     if (fp instanceof ContinuousFeatureProcessor) {      continuousValuedFeatureProcessors.add(fp);    } else {      throw new IllegalArgumentException("Unknown feature processor type " + fp.getClass() + " for feature processor: "+ name);    }  }  this.byteValuedDiscreteFeatureProcessors=byteValuedFeatureProcessors.toArray(new ByteValuedFeatureProcessor[0]);  this.shortValuedDiscreteFeatureProcessors=shortValuedFeatureProcessors.toArray(new ShortValuedFeatureProcessor[0]);  this.continuousFeatureProcessors=continuousValuedFeatureProcessors.toArray(new ContinuousFeatureProcessor[0]);}  }
class C{  public AirMapStatusAdvisory(){}  }
class C{  public boolean isInvisible(){  return invisible;}  }
class C{  public StyleImageView enableAnimation(long animationDuration){  styler.enableAnimation(animationDuration);  return this;}  }
class C{  public static final int binarySearch(int[] a,int key,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public void zoom(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis){  Runnable job=ZoomJob.getInstance(mViewPortHandler,scaleX,scaleY,xValue,yValue,getTransformer(axis),axis,this);  addViewportJob(job);}  }
class C{  public static R1Interval fullLat(){  return new R1Interval(-S2.M_PI_2,S2.M_PI_2);}  }
class C{  public void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  private void handleAttributes(TrackedEntityInstanceQueryParams params){  if (params.isOrQuery() && !params.hasAttributes() && !params.hasProgram()) {    Collection<TrackedEntityAttribute> attributes=attributeService.getTrackedEntityAttributesDisplayInList();    params.addAttributes(QueryItem.getQueryItems(attributes));    params.addFiltersIfNotExist(QueryItem.getQueryItems(attributes));  } else   if (params.hasProgram() && !params.hasAttributes()) {    params.addAttributes(QueryItem.getQueryItems(params.getProgram().getTrackedEntityAttributes()));  }}  }
class C{  @Override public boolean isConstant(){  return false;}  }
class C{  public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {  EntityPlayerMP entityplayermp=args.length == 0 ? getCommandSenderAsPlayer(sender) : getPlayer(server,sender,args[0]);  NBTTagCompound nbttagcompound=null;  CyberwareAPI.getCapability(entityplayermp).resetWare(entityplayermp);  CyberwareAPI.updateData(entityplayermp);  notifyCommandListener(sender,this,"cyberware.commands.clearCyberware.success",new Object[]{entityplayermp.getName()});}  }
class C{  public static void removeRequestVars(HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {  if (request != null) {    request.removeAttribute(ContextFtlUtil.REQUEST_VAR_MAP_NAME_REQATTRIBS);  }  Map<String,Object> globalContext=getGlobalContext(context,env);  if (globalContext != null) {    globalContext.remove(ContextFtlUtil.REQUEST_VAR_MAP_NAME_GLOBALCONTEXT);  }  if (env != null) {    env.setGlobalVariable(ContextFtlUtil.REQUEST_VAR_MAP_NAME_FTLGLOBALS,null);  }}  }
class C{  public FileConvert(String[] args){  final CmdLineParser parser=new CmdLineParser(this,ParserProperties.defaults().withUsageWidth(80));  try {    parser.parseArgument(args);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    print_usage_and_exit_(parser);  }  if (help) {    print_usage_and_exit_(parser);  }  if (verbose)   Logger.getLogger("com.groupon.lex").setLevel(Level.INFO);  if (srcdir == null || dstdir == null)   System.exit(EX_USAGE);  srcdir_path_=FileSystems.getDefault().getPath(srcdir);  dstdir_path_=FileSystems.getDefault().getPath(dstdir);}  }
class C{  public void clear(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static ModelAction newInstance(ModelWidget modelWidget,Element actionElement){  if ("set".equals(actionElement.getNodeName())) {    return new SetField(modelWidget,actionElement);  } else   if ("property-map".equals(actionElement.getNodeName())) {    return new PropertyMap(modelWidget,actionElement);  } else   if ("property-to-field".equals(actionElement.getNodeName())) {    return new PropertyToField(modelWidget,actionElement);  } else   if ("script".equals(actionElement.getNodeName())) {    return new Script(modelWidget,actionElement);  } else   if ("service".equals(actionElement.getNodeName())) {    return new Service(modelWidget,actionElement);  } else   if ("entity-one".equals(actionElement.getNodeName())) {    return new EntityOne(modelWidget,actionElement);  } else   if ("entity-and".equals(actionElement.getNodeName())) {    return new EntityAnd(modelWidget,actionElement);  } else   if ("entity-condition".equals(actionElement.getNodeName())) {    return new EntityCondition(modelWidget,actionElement);  } else   if ("get-related-one".equals(actionElement.getNodeName())) {    return new GetRelatedOne(modelWidget,actionElement);  } else   if ("get-related".equals(actionElement.getNodeName())) {    return new GetRelated(modelWidget,actionElement);  } else {    throw new IllegalArgumentException("Action element not supported with name: " + actionElement.getNodeName());  }}  }
class C{  protected void addDimension(DimensionalObject dimension){  if (DATA_X_DIM_ID.equals(dimension.getDimension())) {    dimensions.add(DX_INDEX,dimension);  } else   if (CATEGORYOPTIONCOMBO_DIM_ID.equals(dimension.getDimension())) {    int index=!dimensions.isEmpty() && DATA_X_DIM_ID.equals(dimensions.get(0).getDimension()) ? CO_INDEX : DX_INDEX;    dimensions.add(index,dimension);  } else {    dimensions.add(dimension);  }}  }
class C{  public RoleNotFoundException(String s){  super(s);}  }
class C{  public void destroy(){  ApplicationStatus.unregisterActivityStateListener(this);}  }
class C{  private boolean preUsageCheck(){  Conditions skillConditions=skillTemplate.getUseconditions();  return skillConditions != null ? skillConditions.validate(this) : true;}  }
class C{  public FaveGetPostsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void fireTerminationEvent(final IterationEvent e){  for (  IterationListener l : listeners) {    l.terminationPerformed(e);  }}  }
class C{  protected boolean newReadableStorageConnection(String group_name,String remote_filename) throws IOException, MyException {  if (this.storageServer != null) {    return false;  } else {    TrackerClient tracker=new TrackerClient();    this.storageServer=tracker.getFetchStorage(this.trackerServer,group_name,remote_filename);    if (this.storageServer == null) {      throw new MyException("getStoreStorage fail, errno code: " + tracker.getErrorCode());    }    return true;  }}  }
class C{  public void addCertChainListener(CertChainListener listener){  certChainListeners.add(listener);}  }
class C{  public VideoEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){  super(client,"video.editAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);  title(title);}  }
class C{  public FloatArrayList bottom(int n){  FloatArrayList bottom=new FloatArrayList();  float[] values=data.toFloatArray();  FloatArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  private Iterable<MultiTableScanResult> scanMultiTableRows(final TableSet tables,final DeltaPlacement placement,final ByteBufferRange rowRange,final LimitCounter limit,final boolean includeDroppedTables,final boolean includeMirrorTables,final ReadConsistency consistency){  return null;}  }
class C{  public FriendsSearchQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  @Nullable public static Color resolveColor(@NotNull RenderResources resources,@Nullable ResourceValue colorValue,@NotNull Project project){  return resolveColor(resources,colorValue,project,0);}  }
class C{  public static String toString(InputStream is){  StringBuilder sb=new StringBuilder();  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(is));    String line=null;    while ((line=reader.readLine()) != null) {      sb.append(line);    }    is.close();  } catch (  IOException e) {    LogUtils.error(e);  }  return sb.toString();}  }
class C{  public static int randomNumberBetween(double begin,double end){  if (begin > end)   throw new IllegalArgumentException("Begin must not be less than end");  return (int)begin + (int)(Math.random() * ((end - begin) + 1));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_FAIL_NOT_CHARGEABLE(String value0){  return new SM_SYSTEM_MESSAGE(1400888,value0);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((textField != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      textField.setText(oldValue);    }  }}  }
class C{  @Deprecated private static void makeJSForInlineSubmit(Appendable writer,Map<String,Object> context,ModelForm modelForm,String hiddenFormName) throws IOException {  List<ModelFormField> rowSubmitFields=modelForm.getMultiSubmitFields();  if (rowSubmitFields != null) {    writer.append("<script type=\"text/javascript\">\r\n");    writer.append("jQuery(document).ready(function() {\r\n");    writer.append("\tvar submitForm = $(\"form[name=" + hiddenFormName + "]\");\r\n");    writer.append("\tif (submitForm) {\r\n");    for (    ModelFormField rowSubmitField : rowSubmitFields) {      writer.append("\t\tvar id = $(\"[id^=" + rowSubmitField.getCurrentContainerId(context) + "]\");\r\n");      writer.append("\t\t$(id).click(function(e) {\r\n");      writer.append("\t\te.preventDefault();\r\n");      makeHiddenFieldsForHiddenForm(writer);      writer.append("\t\t\tsubmitForm.submit();\r\n");      writer.append("\t\t});\r\n");    }    writer.append("\t} else {\r\n");    writer.append("\t\treturn false;\r\n");    writer.append("\t}\r\n");    writer.append("});\r\n");    writer.append("</script>\r\n");  }}  }
class C{  public void recycle(){synchronized (sPool) {    if (sPool.size() < MAX_POOL_SIZE) {      sPool.add(this);    }  }}  }
class C{  synchronized public void terminate(){  if (_isTerminated)   return;  _isTerminated=true;  if (_electManager != null)   _electManager.terminate();  _namingService.terminate();  _primarySpaceModeListeners.clear();}  }
class C{  public void loadFromFile(String sFilename){  try {    ByteArrayOutputStream bsOut=new ByteArrayOutputStream();    FileInputStream fiIn=new FileInputStream(sFilename);    int iData=0;    while ((iData=fiIn.read()) > -1)     bsOut.write(iData);    String sDataString=bsOut.toString();    setDataString(sDataString);  } catch (  IOException ioe) {    ioe.printStackTrace();    setDataString("");  }}  }
class C{  private HttpEntity paramsToEntity(RequestParams params){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(null);      Log.e(tag,"params : " + params.toString());    }  } catch (  IOException e) {    e.printStackTrace();  }  return entity;}  }
class C{  private boolean isIllegalIndex(int i){  return i < curStartIndex || i >= curEndIndex;}  }
class C{  public Schema newSchema(){  return schema;}  }
class C{  public DoubleElemValPair(String name,char kind,double val){  super(name,kind);  this.val=new DoubleCP(val);}  }
class C{  public static String methodNameToFieldName(String methodPrefix,String methodName,boolean ignoreFirstLetterCase){  String fieldName=null;  if (methodName != null && methodName.length() > methodPrefix.length()) {    int front=methodPrefix.length();    if (ignoreFirstLetterCase) {      fieldName=methodName.substring(front,front + 1) + methodName.substring(front + 1);    } else {      fieldName=methodName.substring(front,front + 1).toLowerCase() + methodName.substring(front + 1);    }  }  return fieldName;}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryThriftWriter && dictionaryThriftWriter.isOpen()) {    writeDictionaryFile();    closeThriftWriter();  }}  }
class C{  public VideoSearchQueryWithExtended shorter(Integer value){  return unsafeParam("shorter",value);}  }
class C{  public WallSearchQueryWithExtended domain(String value){  return unsafeParam("domain",value);}  }
class C{  public Querier encrypt(int numThreads) throws InterruptedException, PIRException {  Map<Integer,Integer> selectorQueryVecMapping=computeSelectorQueryVecMap();  Map<Integer,String> embedSelectorMap=computeEmbeddedSelectorMap();  SortedMap<Integer,BigInteger> queryElements;  if (numThreads == 1) {    queryElements=serialEncrypt(selectorQueryVecMapping);    logger.info("Completed serial creation of encrypted query vectors");  } else {    queryElements=parallelEncrypt(selectorQueryVecMapping,Math.max(2,numThreads));    logger.info("Completed parallel creation of encrypted query vectors");  }  Query query=new Query(queryInfo,paillier.getN(),queryElements);  if (queryInfo.useExpLookupTable() && !queryInfo.useHDFSExpLookupTable()) {    logger.info("Starting expTable generation");    query.generateExpTable();  }  return new Querier(selectors,paillier,query,embedSelectorMap);}  }
class C{  public void reset(){  schema=null;  geometryType=GeometryTypeEnum.UNKNOWN;  typeName=null;  dataStore=null;  gridCoverageReader=null;}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  private void createLogDir(){  File file;  boolean mkOk;  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    file=new File(LOG_PATH_SDCARD_DIR);    if (!file.isDirectory()) {      mkOk=file.mkdirs();      if (!mkOk) {        return;      }    }  }}  }
class C{  public FieldConfigTTF(FieldConfigCommonData commonData){  super(commonData,SYMBOLTYPE_FIELD_STATE_RESOURCE);}  }
class C{  public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  default void writeAttribute(NamespaceManager ns,AttributeId attributeId,DataValue value,String indexRange) throws UaException {  AttributeWriter.writeAttribute(ns,this,attributeId,value,indexRange);}  }
class C{  public StructStorageStat[] listStorages(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException {  byte[] header;  byte[] bGroupName;  byte[] bs;  int len;  boolean bNewConnection;  Socket trackerSocket;  if (trackerServer == null) {    trackerServer=getConnection();    if (trackerServer == null) {      return null;    }    bNewConnection=true;  } else {    bNewConnection=false;  }  trackerSocket=trackerServer.getSocket();  OutputStream out=trackerSocket.getOutputStream();  try {    bs=groupName.getBytes(ClientGlobal.g_charset);    bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];    if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {      len=bs.length;    } else {      len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN;    }    Arrays.fill(bGroupName,(byte)0);    System.arraycopy(bs,0,bGroupName,0,len);    int ipAddrLen;    byte[] bIpAddr;    if (storageIpAddr != null && storageIpAddr.length() > 0) {      bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset);      if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) {        ipAddrLen=bIpAddr.length;      } else {        ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1;      }    } else {      bIpAddr=null;      ipAddrLen=0;    }    header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_LIST_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0);    byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen];    System.arraycopy(header,0,wholePkg,0,header.length);    System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length);    if (ipAddrLen > 0) {      System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen);    }    out.write(wholePkg);    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,-1);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return null;    }    ProtoStructDecoder<StructStorageStat> decoder=new ProtoStructDecoder<StructStorageStat>();    return decoder.decode(pkgInfo.body,StructStorageStat.class,StructStorageStat.getFieldsTotalSize());  } catch (  IOException ex) {    if (!bNewConnection) {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }    throw ex;  }catch (  Exception ex) {    ex.printStackTrace();    this.errno=ProtoCommon.ERR_NO_EINVAL;    return null;  } finally {    if (bNewConnection) {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }  }}  }
class C{  private void sendQueryResult(String result){  Iterable<String> splitResult=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(result + "\n");  for (  String resultChunk : splitResult) {    sendJson(Json.object(ACTION,ACTION_QUERY,QUERY_RESULT,resultChunk));  }}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  public MessagesSendQuery domain(String value){  return unsafeParam("domain",value);}  }
class C{  public Boolean hasNodeProperty(String nodePath,String propertyName) throws RepositoryException {  LOG.debug("Checking if node '{}' has property '{}'",nodePath,propertyName);  session.refresh(true);  return session.getNode(nodePath).hasProperty(propertyName);}  }
class C{  public RealMatrix computeCorrelationMatrix(final double[][] matrix){  return computeCorrelationMatrix(new BlockRealMatrix(matrix));}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  @JsonIgnore public boolean isConfidentialBool(){  return confidential != null && confidential;}  }
class C{  public boolean detectAdBlockers(){  return detectAdBlockers((Info)null);}  }
class C{  private void refreshAttributes(){  mbeanAttributes.refreshAttributes();}  }
class C{  private static void checkNoCharactersMissing(int totalLength,List<Token> tokens){  if (!tokens.isEmpty() && tokens.get(tokens.size() - 1).right != totalLength) {    String error=String.format("Lengths don't match: %s instead of %s",tokens.get(tokens.size() - 1).right,totalLength);    throw new RuntimeException(error);  }  int start=0;  for (int i=0; i < tokens.size(); i++) {    Token token=tokens.get(i);    if (token.left != start) {      throw new RuntimeException("Gap/inconsistency at: " + start);    }    start=token.right;  }}  }
class C{  public CheckerDrawable(Drawable drawable1,Drawable drawable2,float cellWidth,float cellHeight){  this.drawable1=drawable1;  this.drawable2=drawable2;  this.cellWidth=cellWidth;  this.cellHeight=cellHeight;  calcDimensions();}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigBoundingBox copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigBoundingBox(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public String toString(){  StringWriter w=new StringWriter();  if (version == VERSION_RMA2_0)   w.write("RMA file version: 2.0\n"); else   if (version == VERSION_RMA2_1)   w.write("RMA file version: 2.1\n"); else   w.write("RMA file version: 2.* (" + version + ")\n");  w.write("creationDate: " + new Date(getCreationDate()) + "\n");  w.write("modificationDate: " + new Date(getModificationDate()) + "\n");  w.write("numberOfReads: " + getNumberOfReads() + "\n");  w.write("numberOfMatches: " + getNumberOfMatches() + "\n");  w.write("textStoragePolicy: " + getTextStoragePolicy() + "("+ TextStoragePolicy.getDescription(getTextStoragePolicy())+ ")\n");  if (getTextFileNames() != null) {    w.write("Source text files:\n");    for (int i=0; i < getTextFileNames().length; i++) {      w.write("\t" + getTextFileNames()[i]);      if (i < getTextFileSizes().length)       w.write("\t" + getTextFileSizes()[i]);      w.write("\n");    }  }  w.write("Reads format:   " + rma2Formatter.getReadBlockRMA2Formatter().toString() + "\n");  w.write("Matches format: " + rma2Formatter.getMatchBlockRMA2Formatter().toString() + "\n");  w.write("dataDumpSectionStart: " + getDataDumpSectionStart() + "\n");  w.write("dataDumpSectionEnd: " + getDataDumpSectionEnd() + "\n");  w.write("dataIndexSectionStart: " + getDataIndexSectionStart() + "\n");  w.write("dataIndexSectionEnd: " + getDataIndexSectionEnd() + "\n");  w.write("Number of classifications: " + getClassificationNames().length + "\n");  w.write("classificationNames:");  for (  String name : getClassificationNames())   w.write(" " + name);  w.write("\n");  w.write("classificationSizes:");  for (  int size : classificationSizes)   w.write(" " + size);  w.write("\n");  w.write("classificationIndexSectionStart:");  for (  long pos : classificationIndexSectionStart)   w.write(" " + pos);  w.write("\n");  w.write("classificationIndexSectionEnd:");  for (  long pos : classificationIndexSectionEnd)   w.write(" " + pos);  w.write("\n");  w.write("classificationDumpSectionStart:");  for (  long pos : classificationDumpSectionStart)   w.write(" " + pos);  w.write("\n");  w.write("classificationDumpSectionEnd:");  for (  long pos : classificationDumpSectionEnd)   w.write(" " + pos);  w.write("\n");  w.write("hasAuxiliaryMap: " + hasAuxiliaryMap + "\n");  w.write("userStateSectionStart: " + getAuxiliaryDataStart() + "\n");  w.write("userStateSectionEnd:   " + getAuxiliaryDataEnd() + "\n");  w.write("infoSectionStart: " + getInfoSectionStart() + "\n");  return w.toString();}  }
class C{  public String parseString(String text) throws DataParseException {  return text;}  }
class C{  private Object findTemplatesByIndex(Context context,TypeData templateType,IEntryHolder entry,MatchTarget matchTarget){  Object result=null;  IStoredList<TemplateCacheInfo>[] t_vec;  IStoredList<TemplateCacheInfo>[] min_array=null;  boolean need_search=true;  if (matchTarget == MatchTarget.NOTIFY && templateType.getM_NumRegularNotifyTemplatesStored() == 0)   need_search=false;  final IEntryData entryData=entry.getEntryData();  if (!templateType.hasIndexes()) {    if (need_search)     result=templateType.getTemplates(matchTarget);    result=getTemplatesWaitingForUid(templateType,matchTarget,result,entry);    if (need_search)     result=getTemplatesExtendedSearch(templateType,matchTarget,result);    return result;  }  int minIndexSize=0;  IStoredList templVector=null, nullTemplVector=null;  int latestIndexToConsider=0;  if (need_search) {    boolean anyIndex=false;    final TypeDataIndex<?>[] indexes=templateType.getIndexes();    for (    TypeDataIndex<?> index : indexes) {      if (index.getIndexCreationNumber() > latestIndexToConsider)       continue;      if (index.isCompound())       continue;      anyIndex=true;      IStoredList<TemplateCacheInfo> templatesVector=null, nullTemplatesVector=null;      t_vec=null;      Object entryValue=index.getIndexValue(entryData);      if (index.isMultiValuePerEntryIndex() && entryValue != null) {        IStoredList<TemplateCacheInfo> multiValueTemplates=new ConcurrentSegmentedStoredList<TemplateCacheInfo>(false);        nullTemplatesVector=(matchTarget == MatchTarget.READ_TAKE) ? index._RTNullTemplates : index._NNullTemplates;        for (        Object value : (Collection<?>)entryValue) {          if (matchTarget == MatchTarget.READ_TAKE) {            if (value != null) {              t_vec=index._RTTemplates.get(value);              if ((t_vec != null) && (!t_vec[0].isEmpty())) {                templatesVector=t_vec[0];                for (IStoredListIterator<TemplateCacheInfo> it=templatesVector.establishListScan(false); it != null; it=templatesVector.next(it)) {                  multiValueTemplates.add(it.getSubject());                }              }            }          } else {            if (value != null) {              t_vec=index._NTemplates.get(value);              if ((t_vec != null) && (!t_vec[0].isEmpty())) {                templatesVector=t_vec[0];                for (IStoredListIterator<TemplateCacheInfo> it=templatesVector.establishListScan(false); it != null; it=templatesVector.next(it)) {                  TemplateCacheInfo subject=it.getSubject();                  if (subject != null)                   multiValueTemplates.add(subject);                }              }            }          }        }        t_vec=new IStoredList[2];        t_vec[0]=multiValueTemplates;        t_vec[1]=nullTemplatesVector;        if (!multiValueTemplates.isEmpty())         templatesVector=multiValueTemplates;      } else {        if (matchTarget == MatchTarget.READ_TAKE) {          if (entryValue != null) {            t_vec=index._RTTemplates.get(entryValue);            if ((t_vec != null) && (!t_vec[0].isEmpty()))             templatesVector=t_vec[0];          }          nullTemplatesVector=index._RTNullTemplates;        } else {          if (entryValue != null) {            t_vec=index._NTemplates.get(entryValue);            if ((t_vec != null) && (!t_vec[0].isEmpty()))             templatesVector=t_vec[0];          }          nullTemplatesVector=index._NNullTemplates;        }      }      int size=(templatesVector == null) ? nullTemplatesVector.size() : templatesVector.size() + nullTemplatesVector.size();      if (nullTemplVector == null) {        minIndexSize=size;        templVector=templatesVector;        nullTemplVector=nullTemplatesVector;        if (templatesVector != null)         min_array=t_vec;      } else {        if (size < minIndexSize) {          minIndexSize=size;          templVector=templatesVector;          nullTemplVector=nullTemplatesVector;          if (templatesVector != null)           min_array=t_vec; else           min_array=null;        }      }      if (size == 0)       break;    }    result=min_array;    if (anyIndex) {      if (templVector == null) {        result=nullTemplVector;      }    } else {      result=templateType.getTemplates(matchTarget);    }  }  result=getTemplatesWaitingForUid(templateType,matchTarget,result,entry);  if (need_search)   result=templateType.anyInitialExtendedIndex() ? TypeDataIndex.getTemplatesExtendedIndexSearch(templateType,matchTarget,entry,result) : getTemplatesExtendedSearch(templateType,matchTarget,result);  return result;}  }
class C{  public static long capacityRemaining(GenericValue techDataCalendar,Timestamp dateFrom){  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return 0;  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  int moveDay=((Integer)position.get("moveDay")).intValue();  if (moveDay != 0)   return 0;  Time startTime=(Time)position.get("startTime");  Double capacity=(Double)position.get("capacity");  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateFrom).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateFrom.before(startAvailablePeriod))   return 0;  Timestamp endAvailablePeriod=new Timestamp(startAvailablePeriod.getTime() + capacity.longValue());  if (dateFrom.after(endAvailablePeriod))   return 0;  return endAvailablePeriod.getTime() - dateFrom.getTime();}  }
class C{  public void open(){  driver.get(domain + EDITOR_HTML + path);}  }
class C{  public Plane.Side whichSide(Plane plane){  float radius=FastMath.abs(xExtent * plane.getNormal().getX()) + FastMath.abs(yExtent * plane.getNormal().getY()) + FastMath.abs(zExtent * plane.getNormal().getZ());  float distance=plane.pseudoDistance(center);  if (distance < -radius) {    return Plane.Side.Negative;  } else   if (distance > radius) {    return Plane.Side.Positive;  } else {    return Plane.Side.None;  }}  }
class C{  @Override public int read(byte[] bts) throws IOException {  try {    beforeRead(bts != null ? bts.length : 0);    int n=in.read(bts);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  @Override public EquipmentConfigurationUpdate updateConfig(final SubEquipment subEquipment,final Properties properties) throws IllegalAccessException {  if ((properties.getProperty("parent_equip_id")) != null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Reconfiguration of " + "SubEquipment does not currently allow it to be reassigned to a different Equipment!");  }  if ((properties.getProperty("equipmentId")) != null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Reconfiguration of " + "SubEquipment does not currently allow it to be reassigned to a different Equipment!");  }  super.updateConfig(subEquipment,properties);  return new EquipmentConfigurationUpdate();}  }
class C{  public boolean isSetBackToTop(boolean home){  if (home) {    return !backValue.equals("none");  } else {    return backValue.equals("all");  }}  }
class C{  public static double max(final double a,final double b){  if (a > b) {    return a;  }  if (a < b) {    return b;  }  if (a != b) {    return Double.NaN;  }  long bits=Double.doubleToRawLongBits(a);  if (bits == 0x8000000000000000L) {    return b;  }  return a;}  }
class C{  private void addToClassToSourceMap(String className,String sourceName){  if (classToSourceMap == null) {    classToSourceMap=new HashMap<String,String>();  }  classToSourceMap.put(className,sourceName);}  }
class C{  public boolean isAllow(){  return message == null;}  }
class C{  private void verifyAppFolder(){  String appFolderPath=getAppFolderPath();  if (appFolderPath != null && !appFolderPath.isEmpty()) {    try {      File folder=new File(appFolderPath);      if (!folder.exists()) {        FileUtils.forceMkdir(folder);      }    } catch (    IOException ex) {      log.error(ex.getMessage(),ex);    }  }}  }
class C{  public boolean shippingApplies(){  boolean shippingApplies=false;  for (  ShoppingCartItem item : this) {    if (item.shippingApplies()) {      shippingApplies=true;      break;    }  }  return shippingApplies;}  }
class C{  @VisibleForTesting void restoreState(){  boolean mustRewriteState=false;  SharedPreferences preferences=getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  Map<String,?> items=preferences.getAll();  long currentTime=getBackoffScheduler().getCurrentTime();  mTimestampForNewRequest=getLongFromMap(items,PREF_TIMESTAMP_FOR_NEW_REQUEST,currentTime);  mTimestampForNextPostAttempt=getLongFromMap(items,PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT,currentTime);  long requestTimestamp=getLongFromMap(items,PREF_TIMESTAMP_OF_REQUEST,INVALID_TIMESTAMP);  mSendInstallEvent=getBooleanFromMap(items,PREF_SEND_INSTALL_EVENT,true);  String defaultInstallSource=determineInstallSource();  mInstallSource=getStringFromMap(items,PREF_INSTALL_SOURCE,defaultInstallSource);  String persistedRequestId=mSendInstallEvent ? getStringFromMap(items,PREF_PERSISTED_REQUEST_ID,INVALID_REQUEST_ID) : INVALID_REQUEST_ID;  mCurrentRequest=requestTimestamp == INVALID_TIMESTAMP ? null : createRequestData(requestTimestamp,persistedRequestId);  mLatestVersion=getStringFromMap(items,PREF_LATEST_VERSION,"");  mMarketURL=getStringFromMap(items,PREF_MARKET_URL,"");  mTimestampOfInstall=getLongFromMap(items,PREF_TIMESTAMP_OF_INSTALL,currentTime);  long delayToNewRequest=mTimestampForNewRequest - currentTime;  if (delayToNewRequest > MS_BETWEEN_REQUESTS) {    Log.w(TAG,"Delay to next request (" + delayToNewRequest + ") is longer than expected.  Resetting to now.");    mTimestampForNewRequest=currentTime;    mustRewriteState=true;  }  long delayToNextPost=mTimestampForNextPostAttempt - currentTime;  if (delayToNextPost > getBackoffScheduler().getGeneratedDelay()) {    Log.w(TAG,"Delay to next post attempt (" + delayToNextPost + ") is greater than expected ("+ getBackoffScheduler().getGeneratedDelay()+ ").  Resetting to now.");    mTimestampForNextPostAttempt=currentTime;    mustRewriteState=true;  }  if (mustRewriteState) {    saveState();  }  mStateHasBeenRestored=true;}  }
class C{  @Deployment(resources={"process/errorHandling.bpmn20.xml"}) public void testErrorHandledByCamel() throws Exception {  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("routing",Routing.HANDLE_ERROR);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("ErrorHandling",variables);  Job job=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(job);  managementService.executeJob(job.getId());  Thread.sleep(WAIT);  assertEquals("Process instance did not reach next wait state",1,runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).activityId(NEXT_WAIT_STATE).count());}  }
class C{  public static int hash(int value){  return value * 31;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (server == null) {    throw new InvalidObjectException("null server");  } else   if (lease == null) {    throw new InvalidObjectException("null lease");  }}  }
class C{  public Well19937c(int[] seed){  super(K,seed);}  }
class C{  public void discard(){  hars.clear();}  }
class C{  public double evaluate(final double[] values,final double mean,final int begin,final int length) throws MathIllegalArgumentException {  return FastMath.sqrt(variance.evaluate(values,mean,begin,length));}  }
class C{  public final static byte[] decode(char[] sArr){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i]] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i]] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++]];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public SAXParser(XMLParserConfiguration config){  super(config);}  }
class C{  public Schema schema(){  return theSchema;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  DavaBody(SootMethod m){  super(m);  pMap=new HashMap<Integer,Value>();  consumedConditions=new HashSet<Object>();  thisLocals=new HashSet<Object>();  synchronizedBlockFacts=new IterableSet<ExceptionNode>();  exceptionFacts=new IterableSet<ExceptionNode>();  monitorFacts=new IterableSet<AugmentedStmt>();  importList=new IterableSet<String>();  caughtrefs=new LinkedList<CaughtExceptionRef>();  controlLocal=null;  constructorExpr=null;}  }
class C{  public AdsGetVideoUploadURLQuery(VkApiClient client,UserActor actor){  super(client,"ads.getVideoUploadURL",String.class);  accessToken(actor.getAccessToken());}  }
class C{  public synchronized void initScriptsFramework(String framework){  Message msg=mJSHandler.obtainMessage();  msg.obj=framework;  msg.what=WXJSBridgeMsgType.INIT_FRAMEWORK;  msg.setTarget(mJSHandler);  msg.sendToTarget();}  }
class C{  protected void drawScaleBar(Graphics2D gc,final int x,final int width,final int y,final int height){  final int x0=x + Math.max(10,width - 25);  int xLabel=x0 + 15;  int boxWidth=10;  int boxHeight=Math.min(150,height - 15);  int y0=y;  for (int i=0; i <= boxHeight; i++) {    float p=1f - (float)i / (float)boxHeight;    final Color color=getChartColors().getHeatMapTable().getColor(Math.round(1000 * p),1000);    gc.setColor(color);    gc.drawLine(x0,y0 + i,x0 + boxWidth,y0 + i);  }  gc.setColor(Color.BLACK);  gc.drawRect(x0,y0,boxWidth,boxHeight);  final double max;  final double min;  final double step;  final double yStep;  final String format;switch (getScalingType()) {case ZSCORE:    gc.drawString("z-score",x0,y - 5);  max=zScoreCutoff;min=-zScoreCutoff;step=1;yStep=boxHeight / (2.0 * zScoreCutoff);format="%+1.1f";break;case PERCENT:gc.drawString("%",x0,y - 5);max=100;min=0;step=20;yStep=boxHeight / 5;format="%.0f";break;case LINEAR:{double maxValue=0;for (String series : getChartData().getSeriesNames()) {maxValue=Math.max(maxValue,getChartData().getRange(series).getSecond().intValue());}gc.drawString("Count",x0,y - 5);int tens=1;int factor=1;while (factor * tens < maxValue) {if (factor < 9) factor++; else {tens*=10;factor=1;}}max=factor * tens;min=0;if (factor >= 4) {step=tens;yStep=boxHeight / factor;} else {step=tens / 2;yStep=boxHeight / (2 * factor);}format="%,.0f";break;}case LOG:{double maxValue=0;for (String series : getChartData().getSeriesNames()) {maxValue=Math.max(maxValue,getChartData().getRange(series).getSecond().intValue());}gc.drawString("Count",x0,y - 5);int tens=1;int factor=1;while (factor * tens < maxValue) {if (factor < 9) factor++; else {tens*=10;factor=1;}}max=factor * tens;min=1;format="%,.0f";double q=boxHeight / Math.log10(factor * tens);gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));boolean first=true;for (double p=max; p >= min; p/=10) {double yy=y0 + boxHeight - q * Math.log10(p);gc.drawString(String.format(format,p),xLabel,Math.round(yy + gc.getFont().getSize() / 2));if (first) {p/=factor;first=false;}}return;}case SQRT:{double maxValue=0;for (String series : getChartData().getSeriesNames()) {maxValue=Math.max(maxValue,getChartData().getRange(series).getSecond().intValue());}gc.drawString("Count",x0,y - 5);int tens=1;int factor=1;while (factor * tens < maxValue) {if (factor < 9) factor++; else {tens*=10;factor=1;}}max=factor * tens;min=0;if (factor >= 4) {step=tens;} else {step=tens / 2;}format="%,.0f";double q=boxHeight / Math.sqrt(factor * tens);gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));for (double p=min; p <= max; p+=step) {double yy=y0 + boxHeight - q * Math.sqrt(p);gc.drawString(String.format(format,p),xLabel,Math.round(yy + gc.getFont().getSize() / 2));}return;}default :{double maxValue=0;for (String series : getChartData().getSeriesNames()) {maxValue=Math.max(maxValue,getChartData().getRange(series).getSecond().intValue());}gc.drawString("Count",x0,y - 5);int tens=1;int factor=1;while (factor * tens < maxValue) {if (factor < 9) factor++; else {tens*=10;factor=1;}}max=factor * tens;min=0;step=max;yStep=boxHeight;format="%,.0f";break;}}gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));for (double p=max; p >= min; p-=step) {gc.drawString(String.format(format,p),xLabel,y0 + gc.getFont().getSize() / 2);y0+=yStep;}}  }
class C{  private void startWaveNorthernShieldGenerator2(){  sp(284838,174.50981f,251.38982f,292.43088f,(byte)0,1000,"NorthernShieldGenerator1");  sp(284839,174.9973f,254.4739f,292.3325f,(byte)0,1000,"NorthernShieldGenerator2");  sp(284840,174.84029f,257.80832f,292.4389f,(byte)0,1000,"NorthernShieldGenerator3");}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public ArrayRef newArrayRef(Value base,Value index){  return new GArrayRef(base,index);}  }
class C{  public DateTimeParser(DateFormat dateFormat){  super(dateFormat);}  }
class C{  public boolean isIgnore(){  return false;}  }
class C{  protected void resetEntityManager(){  EntityManager em=module.getEntityManager();  em.flush();  em.clear();}  }
class C{  public DatabaseGetCitiesByIdQuery cityIds(List<Integer> value){  return unsafeParam("city_ids",value);}  }
class C{  public EventDescriptor(){}  }
class C{  public static int slotSize(Schema sch){  return recordSize(sch) + Page.maxSize(INTEGER);}  }
class C{  public static Bitmap decodeSampledBitmapFromFilePath(String filePath,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filePath,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filePath,options);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201230,skillcaster,skillname);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public void clearProcessors(){  processors.clear();  processors.addProcessor(new GestureDetector(this));  Gdx.input.setInputProcessor(processors);}  }
class C{  public DataTypeException(){  super();}  }
class C{  public boolean addWord(String word){  if (word.length() == 0)   return false;  if (hasWord(word))   return false;  Node n=root;  int pos=0;  while (pos < word.length() && n != null) {    char k=word.charAt(pos);    boolean found=false;    for (    Node fils : n.children) {      if (fils.c == k) {        found=true;        n=fils;        pos++;      }    }    if (!found) {      break;    }  }  for (int j=pos; j < word.length(); j++) {    Node u=new Node(word.charAt(j));    n.addChild(u);    n=u;  }  n.addChild(new Node('*'));  numNodes+=(word.length() - pos + 1);  return true;}  }
class C{  public boolean containsValue(V val){  byte[] states=_states;  V[] vals=_values;  if (null == val) {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && val == vals[i]) {        return true;      }    }  } else {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && (val == vals[i] || val.equals(vals[i]))) {        return true;      }    }  }  return false;}  }
class C{  public boolean isInterfaceDirectSubinterfaceOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getDirectSubinterfacesOf(possibleParent).contains(child);}  }
class C{  @Override public void createStroke(Symbolizer symbolizer){  if (symbolizer instanceof LineSymbolizer) {    LineSymbolizer line=(LineSymbolizer)symbolizer;    if (line != null) {      line.setStroke(styleFactory.getDefaultStroke());    }  }}  }
class C{  public void populate(StrokeDetails strokePanel,GraphicPanelFieldManager fieldConfigManager){  List<ValueComboBoxDataGroup> combinedSymbolList=populateSymbolList(strokePanel.getClass());  FieldConfigBase fieldConfig=fieldConfigManager.get(FieldIdEnum.STROKE_STYLE);  this.symbolTypeField=(FieldConfigSymbolType)fieldConfig;  symbolTypeField.populate(strokePanel,combinedSymbolList);  for (  FieldState panel : symbolTypeFieldList) {    panel.setUpdateSymbolListener(strokePanel);    classMap.put(panel.getClass(),panel);    this.symbolTypeField.addField(panel);    strokePanel.updateFieldConfig(panel.getBasePanel());    Map<FieldIdEnum,FieldConfigBase> map=panel.getFieldList(fieldConfigManager);    if (map != null) {      for (      FieldIdEnum fieldId : map.keySet()) {        fieldConfigManager.add(fieldId,map.get(fieldId));      }    }  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public String toString(){  if (type == ERROR.type) {    return "StatusType.ERROR";  } else   if (type == WARNING.type) {    return "StatusType.WARNING";  } else   if (type == NOTICE.type) {    return "StatusType.NOTICE";  } else   if (type == NORMAL.type) {    return "StatusType.NORMAL";  } else {    return "StatusType." + type;  }}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  private void checkIndex(final int index) throws MathIllegalArgumentException {  MathUtils.checkRangeInclusive(index,0,start.length - 2);}  }
class C{  public static float calculateAngleFrom(VisibleObject obj1,VisibleObject obj2){  return calculateAngleFrom(obj1.getX(),obj1.getY(),obj2.getX(),obj2.getY());}  }
class C{  public Matrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  @NotNull public AnalyzeImageAction analyzeImage(@NotNull List<VisualFeatures> visualFeatures,@NotNull List<DomainSpecificDetails> domainSpecificDetails,@NotNull InputStream image){  return new AnalyzeImageAction(cognitiveContext,visualFeatures,domainSpecificDetails,image);}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  @Override public int compareTo(StyleWrapper o){  String s1=this.workspace + this.style;  String s2=o.workspace + o.style;  return s1.compareTo(s2);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public TimeSeriesMetricDeltaSet map(Function<? super MetricValue,? extends MetricValue> fn){  return values_.map(fn,null).mapCombine(null,null);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public boolean snap(Activity activity){  boolean hasPermission=(ContextCompat.checkSelfPermission(activity,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);  if (!hasPermission) {    ActivityCompat.requestPermissions(activity,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_WRITE_STORAGE);    return false;  } else {    return takeScreenShot(activity);  }}  }
class C{  void registerLaunch(IBinder session,String url){  mClientManager.registerLaunch(session,url);}  }
class C{  public boolean isLeft(){  return isLeft;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public PollsDeleteVoteQuery deleteVote(UserActor actor,int pollId,int answerId){  return new PollsDeleteVoteQuery(getClient(),actor,pollId,answerId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_GUILD_WAREHOUSE(String value0){  return new SM_SYSTEM_MESSAGE(1400403,value0);}  }
class C{  public CM_PRIVATE_STORE_NAME(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_UNEQUIP_RANKITEM_TIMER_1M(int value0){  return new SM_SYSTEM_MESSAGE(1401328,new DescriptionId(value0));}  }
class C{  public void closeHandler() throws CarbonDataWriterException {  if (null != this.dataWriter) {    while (blockletProcessingCount.get() > 0) {      try {        Thread.sleep(50);      } catch (      InterruptedException e) {        throw new CarbonDataWriterException(e.getMessage());      }    }    consumerExecutorService.shutdownNow();    processWriteTaskSubmitList(consumerExecutorServiceTaskList);    this.dataWriter.writeBlockletInfoToFile();    LOGGER.info("All blocklets have been finished writing");    this.dataWriter.closeWriter();  }  this.dataWriter=null;  this.keyBlockHolder=null;}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  private boolean startSymbolicCarry(char[] ca,int cLast,int cFirst){  boolean carry=true;  for (int i=cLast; carry && i >= cFirst; i--) {    carry=false;switch (ca[i]) {case '0':      ca[i]='1';    break;case '1':  ca[i]='2';break;case '2':ca[i]='3';break;case '3':ca[i]='4';break;case '4':ca[i]='5';break;case '5':ca[i]='6';break;case '6':ca[i]='7';break;case '7':ca[i]='8';break;case '8':ca[i]='9';break;case '9':ca[i]='0';carry=true;break;}}return carry;}  }
class C{  static public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  @Override public void doAction(){  File file=new File(path);  if (!file.exists()) {    Log.e("cc","update.json doesn't exist");    return;  }  try {    BufferedReader reader=new BufferedReader(new FileReader(file));    String line;    StringBuilder sb=new StringBuilder();    while ((line=reader.readLine()) != null)     sb.append(line);    JSONObject obj=JSON.parseObject(sb.toString());    JSONArray classes=obj.getJSONArray("class");    JSONArray methods=obj.getJSONArray("method");    for (int i=0; i < classes.size(); i++) {      String clsName=classes.getString(i);      MemoryBackSmali.disassembleClass(Utility.getClassName(clsName));    }    for (int i=0; i < methods.size(); i++) {      JSONObject each=methods.getJSONObject(i);      String clsName=each.getString("clsName");      String mthName=each.getString("mthName");      String signature=each.getString("signature");      MemoryBackSmali.disassembleMethod(clsName,mthName,signature);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public FieldVector<T> add(SparseFieldVector<T> v) throws MathIllegalArgumentException {  checkVectorDimensions(v.getDimension());  SparseFieldVector<T> res=(SparseFieldVector<T>)copy();  OpenIntToFieldHashMap<T>.Iterator iter=v.getEntries().iterator();  while (iter.hasNext()) {    iter.advance();    int key=iter.key();    T value=iter.value();    if (entries.containsKey(key)) {      res.setEntry(key,entries.get(key).add(value));    } else {      res.setEntry(key,value);    }  }  return res;}  }
class C{  private FileResource ensureStorageStatus(FileResource fileResource){  if (fileResource != null && fileResource.getStorageStatus() == FileResourceStorageStatus.PENDING) {    Duration pendingDuration=new Duration(new DateTime(fileResource.getLastUpdated()),DateTime.now());    if (pendingDuration.isLongerThan(Seconds.seconds(1).toStandardDuration())) {      boolean contentIsStored=fileResourceContentStore.fileResourceContentExists(fileResource.getStorageKey());      if (contentIsStored) {        fileResource.setStorageStatus(FileResourceStorageStatus.STORED);        fileResourceStore.update(fileResource);        log.warn("Corrected issue: FileResource '" + fileResource.getUid() + "' had storageStatus PENDING but content was actually stored.");      }    }  }  return fileResource;}  }
class C{  public FriendsEditListQuery addUserIds(Integer... value){  return unsafeParam("add_user_ids",value);}  }
class C{  public SiteAdminGridRow select(){  pageNumber.click();  return this;}  }
class C{  public SPTKPitchReaderWriter(String lf0SPTKFile){  this(lf0SPTKFile,0.005f,0.005f,16000);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public WallEditQuery(VkApiClient client,UserActor actor,int postId){  super(client,"wall.edit",OkResponse.class);  accessToken(actor.getAccessToken());  postId(postId);}  }
class C{  public static String classPackageAsResourcePath(Class clazz){  if (clazz == null || clazz.getPackage() == null) {    return "";  }  return clazz.getPackage().getName().replace('.','/');}  }
class C{  public PhotosGetMarketUploadServerQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"photos.getMarketUploadServer",GetMarketUploadServerResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public JiniTransactionHolder(Transaction.Created txCreated,int isolationLevel,LeaseRenewalManager leaseRenewalManager){  this.txCreated=txCreated;  this.isolationLevel=isolationLevel;  this.leaseRenewalManager=leaseRenewalManager;  this.referenceCount.incrementAndGet();}  }
class C{  public MessagesSendQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  public MyDialog outDuration(int duration){  mOutDuration=duration;  return this;}  }
class C{  public AggregateConfig(String[] configs,ClassLoader loader) throws ConfigurationException {  specific=ConfigurationProvider.getInstance(configs,loader);}  }
class C{  public void initGui(){  this.guiList=new GuiQuickCommandsList(this,mc);  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200749,skilltarget);}  }
class C{  public static void drawHorizontalZigZagLine(Graphics2D g,int x1,int x2,int y){  drawHorizontalZigZagLine(g,x1,x2,y,CENTER_ZIGZAG,CENTER_ZIGZAG);}  }
class C{  private void startWaveEasternShieldGenerator1(){  sp(233720,252.68709f,333.483f,325.59268f,(byte)90,1000,"EasternShieldGenerator1");  sp(233721,255.74022f,333.2762f,325.49332f,(byte)90,1000,"EasternShieldGenerator2");  sp(233881,258.72256f,333.27713f,325.58722f,(byte)90,6000,"EasternShieldGenerator3");}  }
class C{  private FieldSelector resolveFieldPath(Method method,String fieldPath){  FieldSelector result=null;  try {    result=FieldSelector.resolve(method.getInputType().getMessageType(),fieldPath);    if (result == null) {      error(method,"undefined field '%s' on message '%s'.",fieldPath,getInputMessageName(method));    }  } catch (  RuntimeException exception) {    error(method,"%s",exception.getMessage());  }  return result;}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof Fraction) {    Fraction rhs=(Fraction)other;    return (numerator == rhs.numerator) && (denominator == rhs.denominator);  }  return false;}  }
class C{  public void zoomToFit(){  if (is3dMode) {    getTransformation3D().identity();    updateTransform(is3dMode);  }  graphView.fitGraphToWindow();}  }
class C{  public void beginOperation(ISVNClientAdapter aSvnClient,OperationProgressNotifyListener anOperationNotifyListener){  this.operationNotifyListener=anOperationNotifyListener;  beginOperation(aSvnClient);}  }
class C{  public boolean hasSingleReportingRateAsDataFilter(){  return getFilterReportingRates().size() == 1 && getFilterOptions(DATA_X_DIM_ID).size() == 1;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showLabels=");  boolean showLabels=np.getBoolean();  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.setShowLabels(showLabels);}  }
class C{  public final boolean isAlternatingNightMode(){  return (myAlternate & CFG_NIGHT_MODE) != 0;}  }
class C{  private static String constructName(Permission[] pa){  StringBuffer sb=new StringBuffer();  for (int i=0; i < pa.length; i++) {    Permission p=pa[i];    if (p instanceof UnresolvedPermission) {      sb.append(p).append("; ");    } else {      Class cl=p.getClass();      int nargs=maxConsArgs(cl);      String t=cl.getName(), n=p.getName(), a=p.getActions();      if (nargs == 2 && a != null) {        sb.append(t + " " + quote(n)+ ", "+ quote(a)+ "; ");      } else       if (nargs >= 1 && n != null) {        sb.append(t + " " + quote(n)+ "; ");      } else {        sb.append(t + "; ");      }    }  }  return sb.toString().trim();}  }
class C{  public void updateDataPath(String dataPath){  scenarioContext.add(ContextKeys.CURRENT_DATAPATH,dataPath);}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);  assertNotNull("mTestFragment is null",mTestFragment);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_DODGED_ME_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1201080,value0);}  }
class C{  public LatestComputation(UnitGraph unitGraph,DelayabilityAnalysis delayed,Map<Unit,EquivalentValue> equivRhsMap,BoundedFlowSet<EquivalentValue> set){  unitToLatest=new HashMap<Unit,FlowSet<EquivalentValue>>(unitGraph.size() + 1,0.7f);  for (  Unit currentUnit : unitGraph) {    FlowSet<EquivalentValue> delaySet=delayed.getFlowBefore(currentUnit);    FlowSet<EquivalentValue> succCompSet=set.topSet();    for (    Unit successor : unitGraph.getSuccsOf(currentUnit)) {      succCompSet.intersection(delayed.getFlowBefore(successor),succCompSet);    }    if (equivRhsMap.get(currentUnit) != null)     succCompSet.remove(equivRhsMap.get(currentUnit));    FlowSet<EquivalentValue> latest=delaySet.emptySet();    delaySet.difference(succCompSet,latest);    unitToLatest.put(currentUnit,latest);  }}  }
class C{  public boolean willOpenInForeground(TabLaunchType type,boolean isNewTabIncognito){  if (type == TabLaunchType.FROM_RESTORE)   return false;  return type != TabLaunchType.FROM_LONGPRESS_BACKGROUND || (!mTabModelSelector.isIncognitoSelected() && isNewTabIncognito);}  }
class C{  public static void init(Configuration conf,String path){  Controller.PATH=path;  OS=System.getProperty("os.name").toLowerCase() + "_" + System.getProperty("os.version")+ "_"+ System.getProperty("os.arch");  Model.HOME=Model.GIIWA_HOME + "/giiwa";  Module.init(conf);  init_welcome();}  }
class C{  public final Observable<Void> evict(){  return Observable.defer(null);}  }
class C{  public MidiUnavailableException(){  super();}  }
class C{  public int seconds(){  return this.seconds;}  }
class C{  public void handleUnloadRequest(PulsarService pulsar) throws Exception {  long unloadBundleStartTime=System.nanoTime();  while (!this.nsLock.writeLock().tryLock(1,TimeUnit.SECONDS)) {    LOG.warn("Contention on OwnedServiceUnit rw lock. Retrying to acquire lock write lock");  }  try {    if (!this.isActive.compareAndSet(true,false)) {      throw new IllegalStateException("Namespace is not active. ns:" + this.suName + "; state:"+ this.isActive.get());    }  }  finally {    this.nsLock.writeLock().unlock();  }  int unloadedTopics=0;  try {    LOG.info("Disabling ownership: {}",this.suName);    pulsar.getNamespaceService().getOwnershipCache().disableOwnership(this.suName);    unloadedTopics=pulsar.getBrokerService().unloadServiceUnit(suName).get();    pulsar.getNamespaceService().getOwnershipCache().removeOwnership(suName);  } catch (  Exception e) {    LOG.error(String.format("failed to unload a namespace. ns=%s",suName.toString()),e);    throw new RuntimeException(e);  }  double unloadBundleTime=TimeUnit.NANOSECONDS.toMillis((System.nanoTime() - unloadBundleStartTime));  LOG.info("Unloading {} namespace-bundle with {} topics completed in {} ms",this.suName,unloadedTopics,unloadBundleTime);}  }
class C{  private void notifyUpdated(List<AirMapTraffic> updated){  if (updated == null || updated.isEmpty()) {    return;  }  for (  AirMapTrafficListener listener : listeners) {    listener.onUpdateTraffic(updated);  }}  }
class C{  public void importASObject(ASObject asobject){  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  public boolean updateSnap(long dt){  final float step=dt * SNAP_SPEED / 1000.0f;  final float x=updateSnap(step,mRenderX,mX);  final float y=updateSnap(step,mRenderY,mY);  final boolean change=x != mRenderX || y != mRenderY;  mRenderX=x;  mRenderY=y;  return change;}  }
class C{  public void reset(){  this.terminated=false;}  }
class C{  @SuppressWarnings("unchecked") Collection<? extends ClientRequestResult> handleDeviceRequest(final ClientRequest deviceRequest){  Collection<TransferDevice> transferDevices=new ArrayList<>();  List<Device> devices;  if (deviceRequest.getObjectParameter() != null) {    Set<DeviceInfo> deviceInfoList=(Set<DeviceInfo>)deviceRequest.getObjectParameter();    devices=deviceFacade.getDevices(deviceInfoList);  } else {    String deviceClassName=deviceRequest.getRequestParameter();    devices=deviceFacade.getDevices(deviceClassName);  }  for (  Device device : devices) {    transferDevices.add(TransferObjectFactory.createTransferDevice(device,deviceFacade.getClassNameForDevice(device.getId())));  }  return transferDevices;}  }
class C{  public Locale findById(Long localeId){  return getLocalesIdMap().get(localeId);}  }
class C{  @Inject public NoopEventLogImpl(){}  }
class C{  protected void shiftRight(){  for (int i=0; i < mant.length - 1; i++) {    mant[i]=mant[i + 1];  }  mant[mant.length - 1]=0;  exp++;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_START_OTHER_IS_BUSY(String value0){  return new SM_SYSTEM_MESSAGE(1300140,value0);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public static void unregister(DmnEngine dmnEngine){  dmnEngines.remove(dmnEngine.getName());}  }
class C{  protected AudioDeleteQuery audioId(int value){  return unsafeParam("audio_id",value);}  }
class C{  public static Date min(Date date1,Date date2){  if (date1 == null) {    return date2;  }  return date2 != null ? (date1.before(date2) ? date1 : date2) : date1;}  }
class C{  @Override public void read(PacketBuffer buf){  types.forEach(null);}  }
class C{  @Nullable private String overrideXmlFileContent(@NotNull Document vdDocument,@NotNull VdPreview.SourceSize vdOriginalSize,@NotNull StringBuilder errorBuffer){  int finalWidth=vdOriginalSize.getWidth();  int finalHeight=vdOriginalSize.getHeight();  Integer outputWidth=myOutputWidth.get();  Integer outputHeight=myOutputHeight.get();  if (outputWidth > 0) {    finalWidth=outputWidth;  }  if (outputHeight > 0) {    finalHeight=outputHeight;  }  finalWidth=Math.max(VdPreview.MIN_PREVIEW_IMAGE_SIZE,finalWidth);  finalHeight=Math.max(VdPreview.MIN_PREVIEW_IMAGE_SIZE,finalHeight);  finalWidth=Math.min(VdPreview.MAX_PREVIEW_IMAGE_SIZE,finalWidth);  finalHeight=Math.min(VdPreview.MAX_PREVIEW_IMAGE_SIZE,finalHeight);  VdOverrideInfo overrideInfo=new VdOverrideInfo(finalWidth,finalHeight,myOpacity.get(),myAutoMirrored.get());  return VdPreview.overrideXmlContent(vdDocument,overrideInfo,errorBuffer);}  }
class C{  protected Map<String,CharSequence> parseSubSections(CharSequence text,Pattern headerTitlePat,String defaultSectionTitle){  Matcher m=headerTitlePat.matcher(text);  Map<String,CharSequence> secTitleMap=makeDataMap();  int lastEndIndex=0;  String lastSecTitle=tmplHelper.cleanTextValue(defaultSectionTitle);  while (m.find()) {    if (m.start() > 0) {      CharSequence lastSecText=text.subSequence(lastEndIndex,m.start());      if ((lastEndIndex > 0) || lastSecText.toString().trim().length() > 0) {        secTitleMap.put(lastSecTitle,lastSecText);      }    }    lastSecTitle=tmplHelper.cleanTextValue(m.group(1));    lastEndIndex=m.end();  }  secTitleMap.put(lastSecTitle,text.subSequence(lastEndIndex,text.length()));  return secTitleMap;}  }
class C{  public boolean contains(MethodOrMethodContext m){  return set.contains(m);}  }
class C{  @Override public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  public void fileNotFound(){}  }
class C{  public void shutdown(){  gossipServiceRunning.set(false);  gossipThreadExecutor.shutdown();  gossipCore.shutdown();  dataReaper.close();  if (passiveGossipThread != null) {    passiveGossipThread.shutdown();  }  if (activeGossipThread != null) {    activeGossipThread.shutdown();  }  try {    boolean result=gossipThreadExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS);    if (!result) {      LOGGER.error("executor shutdown timed out");    }  } catch (  InterruptedException e) {    LOGGER.error(e);  }}  }
class C{  public TextSpectralSpellPreprocessor(String sArgs){  tWords=null;  hFoundWords=new Hashtable();  sWordMapSem=new Semaphore(1);  Args=sArgs.split(" ");}  }
class C{  public void initGui(){  String productName="";  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));  VRSettings.VrOptions[] var10=null;  if (Minecraft.getMinecraft().stereoProvider.isStereo()) {    productName="OpenVR";    var10=openVRDisplayOptions;  } else   var10=monoDisplayOptions;  int var11=var10.length;  for (int var12=2; var12 < var11 + 2; ++var12) {    VRSettings.VrOptions var8=var10[var12 - 2];    int width=this.width / 2 - 155 + var12 % 2 * 160;    int height=this.height / 6 + 21 * (var12 / 2) - 10;    if (var8 == VRSettings.VrOptions.DUMMY)     continue;    if (var8.getEnumFloat()) {      float minValue=0.0f;      float maxValue=1.0f;      float increment=0.001f;      if (var8 == VRSettings.VrOptions.RENDER_SCALEFACTOR) {        minValue=0.5f;        maxValue=4.0f;        increment=0.1f;      } else       if (var8 == VRSettings.VrOptions.MONO_FOV) {        minValue=1f;        maxValue=179f;        increment=1f;      }      GuiSliderEx slider=new GuiSliderEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8),minValue,maxValue,increment,this.guivrSettings.getOptionFloatValue(var8));      slider.setEventHandler(this);      slider.enabled=getEnabledState(var8);      this.buttonList.add(slider);    } else {      if (false) {        GuiSmallButtonEx button=new GuiSmallButtonEx(9999,width,height,var8,productName);        button.enabled=false;        this.buttonList.add(button);      } else {        String keyBinding=this.guivrSettings.getKeyBinding(var8);        GuiSmallButtonEx button=new GuiSmallButtonEx(var8.returnEnumOrdinal(),width,height,var8,keyBinding);        button.enabled=getEnabledState(var8);        this.buttonList.add(button);      }    }  }}  }
class C{  public Vector3D closestPoint(final Line line){  final double cos=direction.dotProduct(line.direction);  final double n=1 - cos * cos;  if (n < Precision.EPSILON) {    return zero;  }  final Vector3D delta0=line.zero.subtract(zero);  final double a=delta0.dotProduct(direction);  final double b=delta0.dotProduct(line.direction);  return new Vector3D(1,zero,(a - b * cos) / n,direction);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static byte[] itoa(int i){  int size=(i < 0) ? stringSize(-i) + 1 : stringSize(i);  byte[] buf=new byte[size];  getChars(i,size,buf);  return buf;}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval,PrintStream pResultOutput,boolean bBlocking){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  pOut=pResultOutput;  Blocking=bBlocking;}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(CatchablePokemonEvent event){  setPokemonMarkers(event.getCatchablePokemon());  drawCatchedPokemonCircle(event.getLat(),event.getLongitude());}  }
class C{  public synchronized void openDriver(SurfaceHolder holder,int viewWidth,int viewHeight) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=Camera.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera,viewWidth,viewHeight);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public static boolean isVideo(File file){  Uri selectedUri=Uri.fromFile(file);  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);  return (mimeType != null && mimeType.startsWith("video/"));}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public void removeHalfEdges(int index){  DoubleEdgeListHalfEdge e=this.edges.get(index);  this.removeHalfEdges(index,e);}  }
class C{  public LengthExpr newLengthExpr(Value op){  return new JLengthExpr(op);}  }
class C{  private void prepare(@NotNull String relativeGradleConfigPath) throws IOException {  File fromDir=new File(AndroidTestBase.getTestDataPath(),FileUtil.join(GRADLE_EDITOR_TEST_DATA_ROOT,relativeGradleConfigPath.replace('/',File.separatorChar)));  assertTrue(fromDir.getAbsolutePath(),fromDir.isDirectory());  Project project=myFixture.getProject();  VirtualFile vfsProjectRoot=project.getBaseDir();  purgeGradleConfig(vfsProjectRoot);  File projectRoot=VfsUtilCore.virtualToIoFile(vfsProjectRoot);  FileUtil.copyDir(fromDir,projectRoot);  vfsProjectRoot.refresh(false,true);}  }
class C{  public QuestStateList(){  _quests=new TreeMap<Integer,QuestState>();}  }
class C{  public boolean isExpanded(){  return expandableSelectorAnimator.isExpanded();}  }
class C{  protected void drawHole(Canvas c){  if (mChart.isDrawHoleEnabled() && mBitmapCanvas != null) {    float radius=mChart.getRadius();    float holeRadius=radius * (mChart.getHoleRadius() / 100);    MPPointF center=mChart.getCenterCircleBox();    if (Color.alpha(mHolePaint.getColor()) > 0) {      mBitmapCanvas.drawCircle(center.x,center.y,holeRadius,mHolePaint);    }    if (Color.alpha(mTransparentCirclePaint.getColor()) > 0 && mChart.getTransparentCircleRadius() > mChart.getHoleRadius()) {      int alpha=mTransparentCirclePaint.getAlpha();      float secondHoleRadius=radius * (mChart.getTransparentCircleRadius() / 100);      mTransparentCirclePaint.setAlpha((int)((float)alpha * mAnimator.getPhaseX() * mAnimator.getPhaseY()));      mHoleCirclePath.reset();      mHoleCirclePath.addCircle(center.x,center.y,secondHoleRadius,Path.Direction.CW);      mHoleCirclePath.addCircle(center.x,center.y,holeRadius,Path.Direction.CCW);      mBitmapCanvas.drawPath(mHoleCirclePath,mTransparentCirclePaint);      mTransparentCirclePaint.setAlpha(alpha);    }    MPPointF.recycleInstance(center);  }}  }
class C{  public FeatureDefinition(DataInput input) throws IOException {  numByteFeatures=input.readInt();  byteFeatureValues=new ByteStringTranslator[numByteFeatures];  featureNames=new IntStringTranslator(numByteFeatures);  featureWeights=new float[numByteFeatures];  for (int i=0; i < numByteFeatures; i++) {    featureWeights[i]=input.readFloat();    String featureName=input.readUTF();    featureNames.set(i,featureName);    byte numberOfValuesEncoded=input.readByte();    int numberOfValues=numberOfValuesEncoded & 0xFF;    byteFeatureValues[i]=new ByteStringTranslator(numberOfValues);    for (int b=0; b < numberOfValues; b++) {      String value=input.readUTF();      byteFeatureValues[i].set((byte)b,value);    }  }  numShortFeatures=input.readInt();  if (numShortFeatures > 0) {    shortFeatureValues=new ShortStringTranslator[numShortFeatures];    float[] newWeights=new float[numByteFeatures + numShortFeatures];    System.arraycopy(featureWeights,0,newWeights,0,numByteFeatures);    featureWeights=newWeights;    for (int i=0; i < numShortFeatures; i++) {      featureWeights[numByteFeatures + i]=input.readFloat();      String featureName=input.readUTF();      featureNames.set(numByteFeatures + i,featureName);      short numberOfValues=input.readShort();      shortFeatureValues[i]=new ShortStringTranslator(numberOfValues);      for (short s=0; s < numberOfValues; s++) {        String value=input.readUTF();        shortFeatureValues[i].set(s,value);      }    }  }  numContinuousFeatures=input.readInt();  floatWeightFuncts=new String[numContinuousFeatures];  if (numContinuousFeatures > 0) {    float[] newWeights=new float[numByteFeatures + numShortFeatures + numContinuousFeatures];    System.arraycopy(featureWeights,0,newWeights,0,numByteFeatures + numShortFeatures);    featureWeights=newWeights;  }  for (int i=0; i < numContinuousFeatures; i++) {    featureWeights[numByteFeatures + numShortFeatures + i]=input.readFloat();    floatWeightFuncts[i]=input.readUTF();    String featureName=input.readUTF();    featureNames.set(numByteFeatures + numShortFeatures + i,featureName);  }}  }
class C{  public FractionFormat(final NumberFormat format){  super(format);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands,char separateChar){  char[] out=new char[35];  boolean neg=false;  if (number == 0) {    return "0";  }  boolean zero=false;  if (number < 1 && number > -1) {    zero=true;  }  if (number < 0) {    neg=true;    number=-number;  }  if (digitCount > POW_10.length) {    digitCount=POW_10.length - 1;  }  number*=POW_10[digitCount];  long lval=Math.round(number);  int ind=out.length - 1;  int charCount=0;  boolean decimalPointAdded=false;  while (lval != 0 || charCount < (digitCount + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[ind--]=(char)(digit + '0');    charCount++;    if (charCount == digitCount) {      out[ind--]=',';      charCount++;      decimalPointAdded=true;    } else     if (separateThousands && lval != 0 && charCount > digitCount) {      if (decimalPointAdded) {        if ((charCount - digitCount) % 4 == 0) {          out[ind--]=separateChar;          charCount++;        }      } else {        if ((charCount - digitCount) % 4 == 3) {          out[ind--]=separateChar;          charCount++;        }      }    }  }  if (zero) {    out[ind--]='0';    charCount+=1;  }  if (neg) {    out[ind--]='-';    charCount+=1;  }  int start=out.length - charCount;  return String.valueOf(out,start,out.length - start);}  }
class C{  private ProxySelector installBufferingAndFallbackBehaviour(ProxySelector selector){  if (selector instanceof PacProxySelector) {    if (this.pacCacheSize > 0) {      selector=new BufferedProxySelector(this.pacCacheSize,this.pacCacheTTL,selector,pacCacheScope);    }    selector=new ProxyListFallbackSelector(selector);  }  return selector;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private void writeThriftObject(TBase dictionaryThriftObject) throws IOException {  dictionaryThriftWriter.write(dictionaryThriftObject);}  }
class C{  public synchronized void powerOnSelfTest() throws Error {  Log.i(Mary.LOG,"Starting power-on self test.");  try {    Collection<Voice> myVoices=Voice.getAvailableVoices(this);    if (myVoices.size() == 0) {      return;    }    Voice v=myVoices.iterator().next();    MaryData in=new MaryData(MaryDataType.ACOUSTPARAMS,v.getLocale());    String exampleText=MaryDataType.ACOUSTPARAMS.exampleText(v.getLocale());    if (exampleText != null) {      in.readFrom(new StringReader(exampleText));      in.setDefaultVoice(v);      assert v instanceof HMMVoice : "Expected voice to be a HMMVoice, but it is a " + v.getClass().toString();      String features=((HMMVoice)v).getHMMData().getFeatureDefinition().getFeatureNames();      TargetFeatureComputer comp=FeatureRegistry.getTargetFeatureComputer(v,features);      in.setOutputParams(features);      Document doc=in.getDocument();      TreeWalker tw=MaryDomUtils.createTreeWalker(doc,doc,MaryXML.PHONE,MaryXML.BOUNDARY);      List<Element> segmentsAndBoundaries=new ArrayList<Element>();      Element e;      while ((e=(Element)tw.nextNode()) != null) {        segmentsAndBoundaries.add(e);      }      List<Target> targetFeaturesList=targetFeatureLister.getListTargetFeatures(comp,segmentsAndBoundaries);      MaryData audio=htsEngine.process(in,targetFeaturesList,segmentsAndBoundaries,null);      assert audio.getAudio() != null;    } else {      Log.d(Mary.LOG,"2 No example text -- no power-on self test!");    }  } catch (  Throwable t) {    throw new Error("Module " + toString() + ": Power-on self test failed.",t);  }  Log.i(Mary.LOG,"Power-on self test complete.");}  }
class C{  @Nullable public ViewInfo findViewAtPoint(@NotNull Point p){  myRenderSessionLock.readLock().lock();  try {    if (myRenderSession == null) {      return null;    }    p=viewToModel(p);    List<ViewInfo> rootViews=myRenderSession.getRootViews();    if (rootViews == null) {      return null;    }    Point base=new Point();    for (    ViewInfo view : rootViews) {      ViewInfo hitView=viewAtPoint(base,view,p);      if (hitView != null) {        return hitView;      }    }    return null;  }  finally {    myRenderSessionLock.readLock().unlock();  }}  }
class C{  public void checkModifiers(){  super.checkModifiers();  if (!unimplementedMethods().isEmpty()) {    StringBuffer s=new StringBuffer();    s.append("" + name() + " lacks implementations in one or more "+ "enum constants for the following methods:\n");    for (Iterator iter=unimplementedMethods().iterator(); iter.hasNext(); ) {      MethodDecl m=(MethodDecl)iter.next();      s.append("  " + m.signature() + " in "+ m.hostType().typeName()+ "\n");    }    error(s.toString());  }}  }
class C{  private static void registerRenderers(List<ClassLoader> classLoadersList,ConversionData data){  logger.info("Renderers supported:");  Reflections reflections=new Reflections(new ConfigurationBuilder().setScanners(new SubTypesScanner(false),new ResourcesScanner()).setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0]))).filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix("com.sldeditor.importdata.esri.renderer"))));  Set<Class<? extends Object>> allClasses=reflections.getSubTypesOf(Object.class);  for (  Class<? extends Object> claszz : allClasses) {    try {      if (validClass(claszz,EsriRendererInterface.class)) {        EsriRendererInterface rendererObj=(EsriRendererInterface)claszz.newInstance();        logger.info(rendererObj.getRendererClass().getName());        data.addRenderer(rendererObj);      }    } catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public void requestProjectSync(@NotNull Project project,boolean useCachedProjectData,boolean generateSourcesOnSuccess,boolean cleanProject,@Nullable GradleSyncListener listener){  if (GradleSyncState.getInstance(project).isSyncInProgress()) {    return;  }  Runnable syncRequest=createSyncRequest(project,IN_BACKGROUND_ASYNC,generateSourcesOnSuccess,cleanProject,useCachedProjectData,listener);  invokeLaterIfProjectAlive(project,syncRequest);}  }
class C{  private void appendStringHeaders(StringBuilder builder,String prefix,Set<Entry<String,List<String>>> entries){  for (  Entry<String,List<String>> e : entries) {    appendHeader(builder,prefix,e.getKey(),e.getValue());  }}  }
class C{  private boolean peekRead(int expected) throws CompileException, IOException {  if (this.peek() == expected) {    if (this.nextChar != -1)     this.sb.append((char)this.nextChar);    this.nextChar=this.nextButOneChar;    this.nextButOneChar=-1;    return true;  }  return false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static double toRadians(double x){  if (Double.isInfinite(x) || x == 0.0) {    return x;  }  final double facta=0.01745329052209854;  final double factb=1.997844754509471E-9;  double xa=doubleHighPart(x);  double xb=x - xa;  double result=xb * factb + xb * facta + xa * factb + xa * facta;  if (result == 0) {    result*=x;  }  return result;}  }
class C{  public void buildIndex(List<DataFileFooter> footerList){  segmentProperties=new SegmentProperties(footerList.get(0).getColumnInTable(),footerList.get(0).getSegmentInfo().getColumnCardinality());  BTreeBuilderInfo btreeBuilderInfo=new BTreeBuilderInfo(footerList,null);  BtreeBuilder blocksBuilder=new BlockBTreeBuilder();  blocksBuilder.build(btreeBuilderInfo);  dataRefNode=blocksBuilder.get();  for (  DataFileFooter footer : footerList) {    totalNumberOfRows+=footer.getNumberOfRows();  }}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  void addTransmitCompleteListener(FutureEventListener<Integer> transmitCompleteListener){  transmitComplete.addEventListener(transmitCompleteListener);}  }
class C{  private void createFeature(){  if (geometryType == GeometryTypeEnum.UNKNOWN) {    dataLoaded=false;  } else {    DataSourceInterface dataSource=DataSourceFactory.getDataSource();    if (geometryType == GeometryTypeEnum.RASTER) {      dataLoaded=(dataSource.getGridCoverageReader() != null);    } else {      featureList=dataSource.getExampleFeatureSource();      dataLoaded=true;    }  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((checkBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Boolean) {      Boolean oldValue=(Boolean)undoRedoObject.getOldValue();      checkBox.setSelected(oldValue.booleanValue());    }  }}  }
class C{  public XPathFactoryConfigurationException(String message){  super(message);}  }
class C{  public static boolean simpleCCW(S2Point a,S2Point b,S2Point c){  return S2Point.crossProd(c,a).dotProd(b) > 0;}  }
class C{  public ToolbarPhone(Context context,AttributeSet attrs){  super(context,attrs);  mToolbarSidePadding=getResources().getDimensionPixelOffset(R.dimen.toolbar_edge_padding);  mLocationBarInsets=getResources().getDimensionPixelSize(R.dimen.location_bar_margin_top) + getResources().getDimensionPixelSize(R.dimen.location_bar_margin_bottom);  mProgressBackBackgroundColor=ApiCompatibilityUtils.getColor(getResources(),R.color.progress_bar_background);  mProgressBackBackgroundColorWhite=ApiCompatibilityUtils.getColor(getResources(),R.color.progress_bar_background_white);  mLightModeDefaultColor=ApiCompatibilityUtils.getColor(getResources(),R.color.light_mode_tint);  mDarkModeDefaultColor=ApiCompatibilityUtils.getColor(getResources(),R.color.dark_mode_tint);}  }
class C{  private Bitmap scaleBitmap(Bitmap bitmap,int maxWidth,int maxHeight){  if (bitmap == null) {    return null;  }  float scaleX=1.0f;  float scaleY=1.0f;  if (bitmap.getWidth() > maxWidth) {    scaleX=maxWidth / (float)bitmap.getWidth();  }  if (bitmap.getHeight() > maxHeight) {    scaleY=maxHeight / (float)bitmap.getHeight();  }  float scale=Math.min(scaleX,scaleY);  int width=(int)(bitmap.getWidth() * scale);  int height=(int)(bitmap.getHeight() * scale);  return Bitmap.createScaledBitmap(bitmap,width,height,false);}  }
class C{  public Logit(){  this(0,1);}  }
class C{  public int writeAnnotationSet(AnnotationSet annotationSet){  int off=data.position();  writeInt(annotationSet.annotationOffsets.length);  for (  int annotationOffset : annotationSet.annotationOffsets) {    writeInt(annotationOffset);  }  return off;}  }
class C{  @Override public Uri insert(@NonNull Uri uri,ContentValues values){  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();  assert db != null;  final int match=sUriMatcher.match(uri);  Uri result;switch (match) {case ROUTE_ENTRIES:    long id=db.insertOrThrow(FeedContract.Entry.TABLE_NAME,null,values);  result=Uri.parse(FeedContract.Entry.CONTENT_URI + "/" + id);break;case ROUTE_ENTRIES_ID:throw new UnsupportedOperationException("Insert not supported on URI: " + uri);default :throw new UnsupportedOperationException("Unknown uri: " + uri);}Context ctx=getContext();assert ctx != null;ctx.getContentResolver().notifyChange(uri,null,false);return result;}  }
class C{  ConstrainableRegistration(Registrar server,ServiceLease lease,MethodConstraints constraints){  super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),lease);  this.constraints=constraints;}  }
class C{  private static boolean matches(XPath.NodeTest nodeTest,QName value){  if (nodeTest.type == XPath.NodeTest.QNAME) {    return nodeTest.name.equals(value);  }  if (nodeTest.type == XPath.NodeTest.NAMESPACE) {    return nodeTest.name.uri == value.uri;  }  return true;}  }
class C{  public CompoundResult(){}  }
class C{  public static void e(String msg){  if (LOG_ENABLE) {    Log.e(TAG,buildMsg(msg));  }}  }
class C{  public static Zltmat o(Zltmat L) throws JampackException {  if (L.nrow != L.ncol)   throw new JampackException("Cannot compute the inverse of a rectangular matrix.");  return new Zltmat(Solve.aib(L,Eye.o(L.nrow)));}  }
class C{  public VideoGetCatalogQuery from(String value){  return unsafeParam("from",value);}  }
class C{  public OrdersGetByIdQuery testMode(Boolean value){  return unsafeParam("test_mode",value);}  }
class C{  @SubscribeEvent public void onCheckSpawn(CheckSpawn cs){  boolean allowSpawning=false;  if (currentMissionInit() != null && currentMissionInit().getMission() != null) {    ServerSection ss=currentMissionInit().getMission().getServerSection();    ServerInitialConditions sic=(ss != null) ? ss.getServerInitialConditions() : null;    if (sic != null)     allowSpawning=(sic.isAllowSpawning() == Boolean.TRUE);    if (allowSpawning && sic.getAllowedMobs() != null && !sic.getAllowedMobs().isEmpty()) {      String mobName=EntityList.classToStringMapping.get(cs.entity.getClass()).toString();      allowSpawning=false;      for (      EntityTypes mob : sic.getAllowedMobs()) {        if (mob.value().equals(mobName)) {          allowSpawning=true;          break;        }      }    }  }  if (allowSpawning)   cs.setResult(Result.DEFAULT); else   cs.setResult(Result.DENY);}  }
class C{  private void removeTask(Runnable r){  tCur=null;}  }
class C{  public void write(@NonNull File file) throws IOException {  String summary=createSummary();  assert file.getParentFile().exists();  Files.write(summary,file,Charsets.UTF_8);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,String path){  return execCommand(commands,isRoot,true,path);}  }
class C{  void openURI(final String uri){  try {    java.awt.Desktop.getDesktop().browse(new URI(uri));  } catch (  IOException e) {    e.printStackTrace();  }catch (  URISyntaxException e) {    e.printStackTrace();  }}  }
class C{  public double underflow(){  return m_underflow;}  }
class C{  CanonicalCookie(String url,String name,String value,String domain,String path,long creation,long expiration,long lastAccess,boolean secure,boolean httpOnly,boolean firstPartyOnly,int priority){  mUrl=url;  mName=name;  mValue=value;  mDomain=domain;  mPath=path;  mCreation=creation;  mExpiration=expiration;  mLastAccess=lastAccess;  mSecure=secure;  mHttpOnly=httpOnly;  mFirstPartyOnly=firstPartyOnly;  mPriority=priority;}  }
class C{  public static JSON from(Reader reader) throws IOException {  Assert.notNull("reader",reader);  String jsonString=IOUtils.toString(reader);  return from(jsonString);}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLSelectElementImpl clonedNode=(HTMLSelectElementImpl)super.cloneNode(deep);  clonedNode._options=null;  return clonedNode;}  }
class C{  public static boolean checkTypeValid(TypeElement type){  Set<Modifier> modifiers=type.getModifiers();  if (modifiers.contains(Modifier.PRIVATE)) {    throw new RouterException(String.format("The class %s should not be modified by private",type.getSimpleName()),type);  } else   if (modifiers.contains(Modifier.ABSTRACT)) {    return false;  } else   if (!isSuperClass(type,getClassName(Constants.CLASSNAME_ACTIVITY).toString())) {    throw new RouterException(String.format("The class %s you annotated by RouterRule should be a subclass of Activity",type.getSimpleName()),type);  }  return true;}  }
class C{  protected void fireTableEvent(int row0,int row1,int col,int type){  ++m_modCount;  if (type != EventConstants.UPDATE && col == EventConstants.ALL_COLUMNS) {    fireTupleEvent(this,row0,row1,type);  }  if (!m_listeners.isEmpty()) {    Object[] lstnrs=m_listeners.getArray();    for (int i=0; i < lstnrs.length; ++i) {      ((TableListener)lstnrs[i]).tableChanged(this,row0,row1,col,type);    }  }}  }
class C{  public void buildSpanningTree(Node root){  super.clearEdges();  super.setRoot(root);  LinkedList q=new LinkedList();  BitSet visit=new BitSet();  q.add(root);  visit.set(root.getRow());  Table edges=getEdgeTable();  while (!q.isEmpty()) {    Node p=(Node)q.removeFirst();    for (Iterator iter=p.edges(); iter.hasNext(); ) {      Edge e=(Edge)iter.next();      Node n=e.getAdjacentNode(p);      if (!visit.get(n.getRow())) {        q.add(n);        visit.set(n.getRow());        int er=super.addChildEdge(p.getRow(),n.getRow());        edges.setInt(er,SOURCE_EDGE,e.getRow());      }    }  }}  }
class C{  public void writeChar(char value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_CHAR);    this.dataOut.writeChar(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  @ObjectiveCName("init:name:correlationId:") RpcResponse(IConnection connection,String name,String correlationId){  this.connection=connection;  this.name=name;  this.correlationId=correlationId;  this.isAcknowledged=false;  this.isComplete=false;  this.ack();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  OrImpl filter=null;  if ((filterList == null) || (filterList.size() != 2)) {    filter=new OrExtended();  } else {    filter=new OrExtended(filterList);  }  return filter;}  }
class C{  public static User load(String name,String password){  password=encrypt(password);  log.debug("name=" + name + ", passwd="+ password);  return Helper.load(W.create("name",name).and("password",password).and("deleted",1,W.OP_NEQ),User.class);}  }
class C{  public int readString(byte[] tmp,byte[] target) throws IOException {  int size=readInt();  if (size > 0) {    if (size > target.length)     throw new IOException("Unreasonable string length: " + size);    return in.read(target,0,size);  } else {    size=-size;    if (size > tmp.length)     throw new IOException("Unreasonable string length: " + size);    int got=in.read(tmp,0,size);    if (got != size)     throw new IOException("Bytes read: " + got + ", expected: "+ size);    try {      return compressor.inflateByteArray(size,tmp,target);    } catch (    DataFormatException e) {      throw new IOException(e.getMessage());    }  }}  }
class C{  public static void updateVersion(int newVersion){  SharedPreferences.Editor sEditor=LitePalApplication.getContext().getSharedPreferences(LITEPAL_PREPS,Context.MODE_PRIVATE).edit();  sEditor.putInt(VERSION,newVersion);  sEditor.commit();}  }
class C{  private static <T extends PsiElement>boolean processChildrenOfType(PsiElement element,Processor<T> processor,Class<T> psiClass,boolean reverseOrder){  PsiElement child=reverseOrder ? element.getLastChild() : element.getFirstChild();  while (child != null) {    if (psiClass.isInstance(child)) {      if (!processor.process((T)child)) {        return true;      }    }    if (processChildrenOfType(child,processor,psiClass,reverseOrder)) {      return true;    }    child=reverseOrder ? child.getPrevSibling() : child.getNextSibling();  }  return false;}  }
class C{  public boolean isValidCurrent(long checkTime){  if (checkTime == 0 || (rDateList == null && rRulesList == null)) {    return false;  }  boolean found=false;  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();  while (rulesIterator.hasNext()) {    RecurrenceRule rule=rulesIterator.next();    long currentTime=rule.validCurrent(getStartTime(),checkTime,getCurrentCount());    currentTime=checkDateList(rDateList,currentTime,checkTime);    if ((currentTime > 0) && isValid(checkTime)) {      found=true;    } else {      return false;    }  }  return found;}  }
class C{  private CarbonDictionarySortModel[] prepareDictionarySortModels(List<String> distinctValues,Dictionary dictionary,DataType dataType){  CarbonDictionarySortModel[] dictionarySortModels=null;  int surrogate=1;  if (null != dictionary) {    DictionaryChunksWrapper dictionaryChunksWrapper=dictionary.getDictionaryChunks();    dictionarySortModels=new CarbonDictionarySortModel[dictionaryChunksWrapper.getSize() + distinctValues.size()];    while (dictionaryChunksWrapper.hasNext()) {      dictionarySortModels[surrogate - 1]=createDictionarySortModel(surrogate,dataType,dictionaryChunksWrapper.next());      surrogate++;    }  } else {    dictionarySortModels=new CarbonDictionarySortModel[distinctValues.size()];  }  Iterator<String> distinctValue=distinctValues.iterator();  while (distinctValue.hasNext()) {    dictionarySortModels[surrogate - 1]=createDictionarySortModel(surrogate,dataType,distinctValue.next().getBytes());    surrogate++;  }  return dictionarySortModels;}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  @Override public final void readFully(byte ba[]) throws IOException {  dis.readFully(ba,0,ba.length);}  }
class C{  private String makeGetterMethodName(Field field){  String getterMethodPrefix;  String fieldName=field.getName();  if (isPrimitiveBooleanType(field)) {    if (fieldName.matches("^is[A-Z]{1}.*$")) {      fieldName=fieldName.substring(2);    }    getterMethodPrefix="is";  } else {    getterMethodPrefix="get";  }  if (fieldName.matches("^[a-z]{1}[A-Z]{1}.*")) {    return getterMethodPrefix + fieldName;  } else {    return getterMethodPrefix + BaseUtility.capitalize(fieldName);  }}  }
class C{  public boolean has(String name){  if (name == null)   return false;  return data.containsKey(name);}  }
class C{  public PatternN and(Observable<? extends Object> other){  if (other == null) {    throw new NullPointerException();  }  List<Observable<? extends Object>> list=new ArrayList<Observable<? extends Object>>();  list.add(o1);  list.add(o2);  list.add(o3);  list.add(o4);  list.add(o5);  list.add(o6);  list.add(o7);  list.add(o8);  list.add(o9);  list.add(other);  return new PatternN(list);}  }
class C{  public void close(){  namespace.close();}  }
class C{  protected Map<String,Object> filterItemValue(String entityName,Map<String,Object> itemValues){  ClassMetadata classMetadata=getSessionFactory().getClassMetadata(entityName);  String[] propertyNames=classMetadata.getPropertyNames();  List<String> names=Arrays.asList(propertyNames);  HashMap<String,Object> filteredItems=new HashMap<String,Object>();  Iterator<Entry<String,Object>> iterator=itemValues.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,Object> next=iterator.next();    if (names.contains(next.getKey())) {      filteredItems.put(next.getKey(),next.getValue());    }  }  return filteredItems;}  }
class C{  public String makeLinkWithQueryString(HttpServletRequest request,HttpServletResponse response,String url,ConfigXMLReader.RequestResponse requestResponse){  return makeLinkWithQueryString(request,response,url,null,null,null,requestResponse);}  }
class C{  public void addNewFeature(){  SimpleFeatureType featureType=userLayer.getInlineFeatureType();  String typeName=userLayer.getInlineFeatureType().getTypeName();  try {    SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);    SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(featureType);    ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();    SimpleFeatureIterator it=featureSource.getFeatures().features();    try {      while (it.hasNext()) {        SimpleFeature sf=it.next();        List<Object> attributeValueList=sf.getAttributes();        sfb.addAll(attributeValueList);        featureList.add(sfb.buildFeature(null));      }      String wktString="wkt://POINT(0 0)";      Geometry geometry=WKTConversion.convertToGeometry(wktString,getSelectedCRSCode());      sfb.add(geometry);      featureList.add(sfb.buildFeature(null));    }  finally {      it.close();    }    SimpleFeatureCollection collection=new ListFeatureCollection(featureType,featureList);    DataStore dataStore=DataUtilities.dataStore(collection);    featureCollection=collection;    cachedFeature=null;    lastRow=-1;    userLayer.setInlineFeatureDatastore(dataStore);  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);  }  this.fireTableStructureChanged();  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.inlineFeatureUpdated();  }}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public ActivityMap(ActivityMap parent){  m_map=new HashMap();  m_parent=parent;}  }
class C{  public NoSuchEntryException(String s,Throwable t){  super(s,t);}  }
class C{  public byte[] reSample(byte[] sourceData,int bitsPerSample,int sourceRate,int targetRate){  int bytePerSample=bitsPerSample / 8;  int numSamples=sourceData.length / bytePerSample;  short[] amplitudes=new short[numSamples];  int pointer=0;  for (int i=0; i < numSamples; i++) {    short amplitude=0;    for (int byteNumber=0; byteNumber < bytePerSample; byteNumber++) {      amplitude|=(short)((sourceData[pointer++] & 0xFF) << (byteNumber * 8));    }    amplitudes[i]=amplitude;  }  LinearInterpolation reSample=new LinearInterpolation();  short[] targetSample=reSample.interpolate(sourceRate,targetRate,amplitudes);  int targetLength=targetSample.length;  byte[] bytes;  if (bytePerSample == 1) {    bytes=new byte[targetLength];    for (int i=0; i < targetLength; i++) {      bytes[i]=(byte)targetSample[i];    }  } else {    bytes=new byte[targetLength * 2];    for (int i=0; i < targetSample.length; i++) {      bytes[i * 2]=(byte)(targetSample[i] & 0xff);      bytes[i * 2 + 1]=(byte)((targetSample[i] >> 8) & 0xff);    }  }  return bytes;}  }
class C{  public static final void toStringArray(StringBuffer output,Object tab){  if (tab == null) {    output.append("null");    return;  }  Class type=tab.getClass();  if (!type.isArray()) {    toString(output,tab);    return;  }  toString(output,tab,type.getComponentType());}  }
class C{  public Set<String> convert(String list){  Set<String> processList=new HashSet<>();  for (  String process : list.substring(1,list.length() - 1).split(", ")) {    if (process.length() > 0) {      processList.add(process);    }  }  return processList;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public static synchronized ExamplePolygonInterface createExamplePolygon(String hint){  if (examplePolygonImpl == null) {    examplePolygonImpl=new ExamplePolygonImplIOM();  }  return examplePolygonImpl;}  }
class C{  public BOMTree(String productId,String bomTypeId,Date inDate,int type,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  if (productId == null || bomTypeId == null || delegator == null || dispatcher == null)   return;  if (inDate == null)   inDate=new Date();  this.delegator=delegator;  this.dispatcher=dispatcher;  inputProduct=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();  String productIdForRules=productId;  List<GenericValue> productFeaturesAppl=EntityQuery.use(delegator).from("ProductFeatureAppl").where("productId",productId,"productFeatureApplTypeId","STANDARD_FEATURE").queryList();  List<GenericValue> productFeatures=FastList.newInstance();  GenericValue oneProductFeatureAppl=null;  for (int i=0; i < productFeaturesAppl.size(); i++) {    oneProductFeatureAppl=productFeaturesAppl.get(i);    productFeatures.add(oneProductFeatureAppl.getRelatedOne("ProductFeature",false));  }  GenericValue manufacturedAsProduct=manufacturedAsProduct(productId,inDate);  GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",(manufacturedAsProduct != null ? manufacturedAsProduct.getString("productIdTo") : productId)).queryOne();  if (product == null)   return;  BOMNode originalNode=new BOMNode(product,dispatcher,userLogin);  originalNode.setTree(this);  if (!hasBom(product,inDate)) {    List<GenericValue> virtualProducts=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_VARIANT"),null,false);    virtualProducts=EntityUtil.filterByDate(virtualProducts,inDate);    GenericValue virtualProduct=EntityUtil.getFirst(virtualProducts);    if (virtualProduct != null) {      productIdForRules=virtualProduct.getString("productId");      manufacturedAsProduct=manufacturedAsProduct(virtualProduct.getString("productId"),inDate);      product=EntityQuery.use(delegator).from("Product").where("productId",(manufacturedAsProduct != null ? manufacturedAsProduct.getString("productIdTo") : virtualProduct.get("productId"))).queryOne();    }  }  if (product == null)   return;  try {    root=new BOMNode(product,dispatcher,userLogin);    root.setTree(this);    root.setProductForRules(productIdForRules);    root.setSubstitutedNode(originalNode);    if (type == IMPLOSION) {      root.loadParents(bomTypeId,inDate,productFeatures);    } else {      root.loadChildren(bomTypeId,inDate,productFeatures,type);    }  } catch (  GenericEntityException gee) {    root=null;  }  this.bomTypeId=bomTypeId;  this.inDate=inDate;  rootQuantity=BigDecimal.ONE;  rootAmount=BigDecimal.ZERO;}  }
class C{  public static double[] computeLogAmplitudeSpectrum(final double[] signal){  double[] spectrum=computeAmplitudeSpectrum(signal);  for (int i=0; i < spectrum.length; i++) {    spectrum[i]=Math.log(spectrum[i]);  }  return spectrum;}  }
class C{  public PlacesGetCheckinsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static String parse(String s,Map<String,Object> m) throws Exception {  log.debug("vengine.parse ...");  if (X.isEmpty(s)) {    return s;  }  try {    VelocityContext context=new VelocityContext(m);    StringWriter out=new StringWriter();    Velocity.evaluate(context,out,"ve",s);    log.debug("s=" + s + ", out="+ out);    return out.toString();  } catch (  Exception e) {    log.error(s,e);    throw e;  }}  }
class C{  public static List<Article> mockArticles(){  final List<Article> articles=new ArrayList<>(100);  for (int i=0; i < 1; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"Today",R.drawable.header1,R.color.darker_darker_gray));  }  for (int i=0; i < 2; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"Yesterday",R.drawable.header2,R.color.darker_darker_blue));  }  for (int i=0; i < 10; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"19 August",R.drawable.header1,R.color.darker_darker_gray));  }  for (int i=0; i < 8; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"18 August",R.drawable.header1,R.color.darker_darker_gray));  }  return articles;}  }
class C{  private void editConflictsInternal(IFile resource,IFile conflictOldFile,IFile conflictWorkingFile,IFile conflictNewFile) throws InvocationTargetException, InterruptedException {  CompareConfiguration cc=new CompareConfiguration();  ConflictsCompareInput fInput=new ConflictsCompareInput(cc);  fInput.setResources(conflictOldFile,conflictWorkingFile,conflictNewFile,(IFile)resource);  CompareUI.openCompareEditorOnPage(fInput,getTargetPage());}  }
class C{  @Override public void separator(short separator,Augmentations augmentations) throws XNIException {}  }
class C{  public boolean isKeepPositionOnRotation(){  return mKeepPositionOnRotation;}  }
class C{  private void loadAcousticModels(String header) throws MaryConfigurationException, NoSuchPropertyException, IOException {  FeatureProcessorManager symbolicFPM=FeatureRegistry.determineBestFeatureProcessorManager(getLocale());  String acousticModelsString=MaryProperties.getProperty(header + ".acousticModels");  if (acousticModelsString != null) {    acousticModels=new HashMap<String,Model>();    acousticModels.put("boundary",new BoundaryModel(symbolicFPM,voiceName,null,"duration",null,null,null,"boundaries"));    StringTokenizer acousticModelStrings=new StringTokenizer(acousticModelsString);    do {      String modelName=acousticModelStrings.nextToken();      String modelType=MaryProperties.needProperty(header + "." + modelName+ ".model");      InputStream modelDataStream=null;      String modelAttributeName=MaryProperties.needProperty(header + "." + modelName+ ".attribute");      String modelAttributeFormat=MaryProperties.getProperty(header + "." + modelName+ ".attribute.format");      String modelFeatureName=MaryProperties.getProperty(header + "." + modelName+ ".feature");      String modelPredictFrom=MaryProperties.getProperty(header + "." + modelName+ ".predictFrom");      String modelApplyTo=MaryProperties.getProperty(header + "." + modelName+ ".applyTo");      ModelType possibleModelTypes=ModelType.fromString(modelType);      if (possibleModelTypes == null) {        Log.d(Mary.LOG,"Cannot handle unknown model type: " + modelType);        throw new MaryConfigurationException("Cannot handle unknown model type: " + modelType);      }      Model model=null;      try {switch (possibleModelTypes) {case CART:          model=new CARTModel(symbolicFPM,voiceName,modelDataStream,modelAttributeName,modelAttributeFormat,modelFeatureName,modelPredictFrom,modelApplyTo);        break;case SOP:      model=new SoPModel(symbolicFPM,voiceName,modelDataStream,modelAttributeName,modelAttributeFormat,modelFeatureName,modelPredictFrom,modelApplyTo);    break;case HMM:  if (getDurationModel() != null && getDurationModel() instanceof HMMModel && modelName.equalsIgnoreCase("F0") && voiceName.equals(getDurationModel().getVoiceName())) {    model=getDurationModel();    ((HMMModel)model).setPredictDurAndF0(true);  } else   if (getF0Model() != null && getF0Model() instanceof HMMModel && modelName.equalsIgnoreCase("duration") && voiceName.equals(getF0Model().getVoiceName())) {    model=getF0Model();    ((HMMModel)model).setPredictDurAndF0(true);  } else {    model=new HMMModel(symbolicFPM,voiceName,modelDataStream,modelAttributeName,modelAttributeFormat,modelFeatureName,modelPredictFrom,modelApplyTo);  }break;}} catch (Throwable t) {Log.d(Mary.LOG,"Cannot instantiate model '" + modelName + "' of type '"+ modelType+ "' from '"+ MaryProperties.getProperty(header + "." + modelName+ ".data")+ "'");throw new MaryConfigurationException("Cannot instantiate model '" + modelName + "' of type '"+ modelType+ "' from '"+ MaryProperties.getProperty(header + "." + modelName+ ".data")+ "'",t);}assert model != null;acousticModels.put(modelName,model);} while (acousticModelStrings.hasMoreTokens());}}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());  HashSet<String> previousIds=new HashSet<String>();  for (  ExecutionEntity execution : executions) {    if (execution.getParentId() == null) {      orderedList.add(execution);      previousIds.add(execution.getId());    }  }  while (orderedList.size() < executions.size()) {    for (    ExecutionEntity execution : executions) {      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {        orderedList.add(execution);        previousIds.add(execution.getId());      }    }  }  return orderedList;}  }
class C{  public SPhiExpr(Local leftLocal,List<Block> preds){  type=leftLocal.getType();  for (  Block pred : preds) {    addArg(leftLocal,pred);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Provoker_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201009,skilltarget,skillcaster,skillname);}  }
class C{  @Override public void revertToDefaultValue(){  if (externalGraphicPanel != null) {    externalGraphicPanel.revertToDefaultValue();  }}  }
class C{  private static Map.Entry<DateTime,TimeSeriesValue> findName(List<TimeSeriesCollection> c,GroupName name){  ListIterator<TimeSeriesCollection> iter=c.listIterator();  while (iter.hasNext()) {    final int idx=iter.nextIndex();    final TimeSeriesCollection tsdata=iter.next();    final Optional<TimeSeriesValue> found=tsdata.get(name);    if (found.isPresent())     return SimpleMapEntry.create(tsdata.getTimestamp(),found.get());  }  throw new IllegalStateException("name not present in list of time series collections");}  }
class C{  public static String xor(String key,String input){  StringBuilder output=new StringBuilder();  for (int i=0; i < input.length(); i++) {    output.append((char)(input.charAt(i) ^ key.charAt(i % key.length())));  }  return output.toString();}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f store){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  if (store == null) {    store=new Vector3f();  }  return store.set(x * vec.x,y * vec.y,z * vec.z);}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  result.append("Change (" + changeId + ")"+ state.toString()+ "\n");  result.append("Error: " + errorMessage + "\n");  result.append("Warn: " + warnMessage + "\n");  result.append("Info: " + infoMessage + "\n");  return result.toString();}  }
class C{  public boolean isSingleAuthenticator(){  Debug.logInfo(this.getClass().getName() + " Authenticator isSingleAuthenticator()",module);  return false;}  }
class C{  public void generateParameters() throws Exception {  int i, j;  String MaryBase="/project/mary/marcela/openmary/";  String locale="english";  String voice="hsmm-slt";  String configFile=locale + "-" + voice+ ".config";  String contextFeaDir="/project/mary/marcela/quality-control-experiment/slt/phonefeatures/";  String outputDir="/project/mary/marcela/quality-control-experiment/slt/hmmGenerated/";  String filesList="/project/mary/marcela/quality-control-experiment/slt/phonefeatures-list.txt";  HTSEngine hmm_tts=new HTSEngine();  HMMData htsData=new HMMData();  htsData.initHMMData(voice,MaryBase,configFile);  float fperiodmillisec=((float)htsData.getFperiod() / (float)htsData.getRate()) * 1000;  float fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());  htsData.setUseGV(true);  htsData.setUseMixExc(true);  String file, feaFile, parFile, durStateFile, durFile, mgcModifiedFile, outWavFile;  try {    Scanner filesScanner=new Scanner(new BufferedReader(new FileReader(filesList)));    while (filesScanner.hasNext()) {      file=filesScanner.nextLine();      feaFile=contextFeaDir + file + ".pfeats";      parFile=outputDir + file;      durFile=outputDir + file + ".lab";      durStateFile=outputDir + file + ".slab";      outWavFile=outputDir + file + ".wav";      HTSUttModel um=new HTSUttModel();      HTSParameterGeneration pdf2par=new HTSParameterGeneration();      HTSVocoder par2speech=new HTSVocoder();      AudioInputStream ais;      um=hmm_tts.processUttFromFile(feaFile,htsData);      FileWriter outputStream;      outputStream=new FileWriter(durFile);      outputStream.write(hmm_tts.getRealisedDurations());      outputStream.close();      float totalDur=0;      int numStates=htsData.getCartTreeSet().getNumStates();      outputStream=new FileWriter(durStateFile);      outputStream.write("#\n");      for (i=0; i < um.getNumModel(); i++) {        for (j=0; j < numStates; j++) {          totalDur+=(um.getUttModel(i).getDur(j) * fperiodsec);          if (j < (numStates - 1))           outputStream.write(totalDur + " 0 " + um.getUttModel(i).getPhoneName()+ "\n"); else           outputStream.write(totalDur + " 1 " + um.getUttModel(i).getPhoneName()+ "\n");        }      }      outputStream.close();      boolean debug=true;      pdf2par.htsMaximumLikelihoodParameterGeneration(um,htsData);      ais=par2speech.htsMLSAVocoder(pdf2par,htsData);      System.out.println("saving to file: " + outWavFile);      File fileOut=new File(outWavFile);      if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,ais)) {        AudioSystem.write(ais,AudioFileFormat.Type.WAVE,fileOut);      }    }    filesScanner.close();  } catch (  Exception e) {    System.err.println("Exception: " + e.getMessage());  }}  }
class C{  private List<DavaFlowSet<T>> addIfNotDuplicate(List<DavaFlowSet<T>> into,DavaFlowSet<T> addThis){  Iterator<DavaFlowSet<T>> it=into.iterator();  boolean found=false;  while (it.hasNext()) {    DavaFlowSet<T> temp=it.next();    if (temp.equals(addThis) && temp.internalDataMatchesTo(addThis)) {      found=true;      break;    }  }  if (!found)   into.add(addThis);  return into;}  }
class C{  public void loadUrl(String url){  if (appView == null) {    init();  }  this.keepRunning=preferences.getBoolean("KeepRunning",true);  appView.loadUrlIntoView(url,true);}  }
class C{  public TextEditor indent(int spaces){  StringBuilder sb=new StringBuilder(spaces);  for (int i=0; i < spaces; i++) {    sb.append(' ');  }  return replaceAll("^",sb.toString());}  }
class C{  public IntIterator rangeSortedBy(String field,int lo,int hi,int indexType){  Index index=getIndex(field,int.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  private String read() throws IOException {  String line=reader.readLine();  if (line == null) {    throw new IOException("FTPConnection closed");  }  for (Iterator iter=communicationListeners.iterator(); iter.hasNext(); ) {    FTPCommunicationListener l=(FTPCommunicationListener)iter.next();    l.received(line);  }  return line;}  }
class C{  public GravitationalForce(float forceConstant,float direction){  params=new float[]{forceConstant,direction};  minValues=new float[]{DEFAULT_MIN_FORCE_CONSTANT,DEFAULT_MIN_DIRECTION};  maxValues=new float[]{DEFAULT_MAX_FORCE_CONSTANT,DEFAULT_MAX_DIRECTION};}  }
class C{  public DatabaseGetCountriesByIdQuery(VkApiClient client,UserActor actor){  super(client,"database.getCountriesById",Utils.buildParametrizedType(List.class,Country.class));  accessToken(actor.getAccessToken());}  }
class C{  private String checkIfValueIsNotEmpty(Host hostWithTwitterSettings,String fieldVarName){  String tempValue=hostWithTwitterSettings.getStringProperty(fieldVarName);  if (tempValue == null || tempValue.isEmpty()) {    throw new NullPointerException("The value of field '" + fieldVarName + "' is not filled in the Host");  }  return tempValue;}  }
class C{  public ArenaRewardCursor queryArenaRewardItem(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ARENA_REWARDS;  qh.Selection="ar." + S.COLUMN_ARENA_REWARDS_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="ar." + S.COLUMN_ARENA_REWARDS_PERCENTAGE + " DESC";  qh.Limit=null;  return new ArenaRewardCursor(wrapJoinHelper(builderArenaReward(),qh));}  }
class C{  public static final void toByteArray(ByteArrayOutputStream output,String str){  if (str == null) {    return;  }  output.write(34);  int max=str.length();  for (int i=0; i < max; i++) {    int b=str.charAt(i);    if ((b >= 32) && (b <= 126)) {switch (b) {case 34:case 92:        output.write(92);      break;  }  output.write(b);} else {  output.write(92);switch (b) {case 8:    output.write(98);  break;case 9:output.write(116);break;case 10:output.write(110);break;case 12:output.write(102);break;case 13:output.write(114);break;default :output.write(117);int b3=b >> 4;int b4=b & 0xf;if (b4 < 10) b4+=48; else b4+=87;int b2=b3 >> 4;b3&=0xf;if (b3 < 10) b3+=48; else b3+=87;int b1=b2 >> 4;b2&=0xf;if (b2 < 10) b2+=48; else b2+=87;if (b1 < 10) b1+=48; else b1+=87;output.write(b1);output.write(b2);output.write(b3);output.write(b4);break;}}}output.write(34);}  }
class C{  public List<OWASPMatchingResult> classifyCode(List<String> codeLines,String languageName){  ArrayList<OWASPMatchingResult> matching=new ArrayList<>();  if (codeLines == null || codeLines.isEmpty()) {    return matching;  }  for (  OWASPResult result : this.database.stream().filter(null).collect(Collectors.toList())) {    for (int i=0; i < codeLines.size(); i++) {      if (codeLines.get(i).contains(result.name)) {        OWASPMatchingResult matchingResult=this.getMatchingResult(matching,result.name);        if (matchingResult != null) {          matchingResult.addMatchingLine(i + 1);        } else {          matching.add(new OWASPMatchingResult(result.name,result.desc,result.type,i + 1));        }      }    }  }  return matching;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public MonsterToArenaCursor queryMonsterToArenaMonster(long id){  return mHelper.queryMonsterToArenaMonster(id);}  }
class C{  protected WallGetByIdQueryWithExtended posts(List<String> value){  return unsafeParam("posts",value);}  }
class C{  public static double safeLog10(double x){  boolean neg=(x < 0.0);  if (neg) {    x=-x;  }  if (x < 10.0) {    x+=(10.0 - x) / 10;  }  x=Math.log(x) / LOG10;  return neg ? -x : x;}  }
class C{  public void outputRes(){  for (int i=0; i < disks; i++) {    System.out.printf("idata:%d:  ",i);    System.out.println(idata[i]);  }  System.out.print("odata:0:  ");  System.out.println(odata[0]);  System.out.print("odata:1:  ");  System.out.println(odata[1]);}  }
class C{  @Override public Object asJavaVal(){  return val;}  }
class C{  public boolean load(String uri){  return false;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public Polygon2D(Rectangle2D rec){  if (rec == null) {    throw new IndexOutOfBoundsException("null Rectangle");  }  npoints=4;  xpoints=new float[4];  ypoints=new float[4];  xpoints[0]=(float)rec.getMinX();  ypoints[0]=(float)rec.getMinY();  xpoints[1]=(float)rec.getMaxX();  ypoints[1]=(float)rec.getMinY();  xpoints[2]=(float)rec.getMaxX();  ypoints[2]=(float)rec.getMaxY();  xpoints[3]=(float)rec.getMinX();  ypoints[3]=(float)rec.getMaxY();  calculatePath();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VariableDecl fullCopy(){  VariableDecl tree=(VariableDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public Double fractionOfData(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2,final double effect_size){  SymmetricInputValidation(number_impressions_1,number_actions_1,number_impressions_2,number_actions_2);  if (effect_size < -1.0 || effect_size > 1.0) {    throw new IllegalArgumentException("Effect size must be in the interval [-1, 1].");  }  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double pooled_rate=1.0 * (number_actions_1 + number_actions_2) / (number_impressions_1 + number_impressions_2);  return 1 / (pooled_rate * (1 - pooled_rate) * (1.0 / number_impressions_1 + 1.0 / number_impressions_2)* zval* zval / effect_size / effect_size);}  }
class C{  public IntArrayList bottom(int n){  IntArrayList bottom=new IntArrayList();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  private List<ColumnDictionaryChunk> readDictionaryFile(long dictionaryStartOffset,int dictionaryChunkCountToBeRead) throws IOException {  List<ColumnDictionaryChunk> dictionaryChunks=new ArrayList<ColumnDictionaryChunk>(dictionaryChunkCountToBeRead);  dictionaryFileReader.setReadOffset(dictionaryStartOffset);  while (dictionaryFileReader.hasNext() && dictionaryChunks.size() != dictionaryChunkCountToBeRead) {    dictionaryChunks.add((ColumnDictionaryChunk)dictionaryFileReader.read());  }  return dictionaryChunks;}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0,0,1};}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public synchronized static RegisteredSnapshotCategories sharedInstance(){  if (sharedInstance == null)   sharedInstance=new RegisteredSnapshotCategories();  return sharedInstance;}  }
class C{  public LocalCreation(Collection<Local> locals,String prefix){  this.locals=new HashSet<String>(locals.size());  localChain=locals;  Iterator<Local> it=locals.iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    this.locals.add(l.getName());  }  this.prefix=prefix;  counter=0;}  }
class C{  @Override public String scanNmtoken() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  do {    char ch=fCurrentEntity.ch[fCurrentEntity.position];    if (XML11Char.isXML11Name(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else     if (XML11Char.isXML11NameHighSurrogate(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          --fCurrentEntity.startPosition;          --fCurrentEntity.position;          break;        }      }      char ch2=fCurrentEntity.ch[fCurrentEntity.position];      if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11Name(XMLChar.supplemental(ch,ch2))) {        --fCurrentEntity.position;        break;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else {      break;    }  } while (true);  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  return symbol;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ALL_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400836,value0);}  }
class C{  public static boolean isNotEmpty(Object o){  return !ObjectType.isEmpty(o);}  }
class C{  public WebLink(String key){  this(BundleSupport.getLabel(key),BundleSupport.getURL(key),true);}  }
class C{  private double[] regcf(int nreq) throws MathIllegalArgumentException {  int nextr;  if (nreq < 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_REGRESSORS);  }  if (nreq > this.nvars) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.TOO_MANY_REGRESSORS,nreq,this.nvars);  }  if (!this.tol_set) {    tolset();  }  final double[] ret=new double[nreq];  boolean rankProblem=false;  for (int i=nreq - 1; i > -1; i--) {    if (FastMath.sqrt(d[i]) < tol[i]) {      ret[i]=0.0;      d[i]=0.0;      rankProblem=true;    } else {      ret[i]=rhs[i];      nextr=i * (nvars + nvars - i - 1) / 2;      for (int j=i + 1; j < nreq; j++) {        ret[i]=smartAdd(ret[i],-r[nextr] * ret[j]);        ++nextr;      }    }  }  if (rankProblem) {    for (int i=0; i < nreq; i++) {      if (this.lindep[i]) {        ret[i]=Double.NaN;      }    }  }  return ret;}  }
class C{  public XSNamedMapImpl(XSObject[] array,int length){  if (length == 0) {    fNamespaces=null;    fMaps=null;    fNSNum=0;    fArray=array;    fLength=0;    return;  }  fNamespaces=new String[]{array[0].getNamespace()};  fMaps=null;  fNSNum=1;  fArray=array;  fLength=length;}  }
class C{  default boolean hasDataFromCommand(){  return false;}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=1.0;    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public String convertToMbrola(List<Element> phonesAndBoundaries,Voice voice){  if (!(voice instanceof MbrolaVoice))   throw new IllegalArgumentException("Expected an MBROLA voice, but " + voice.getName() + " is a "+ voice.getClass());  MbrolaVoice mbrolaVoice=(MbrolaVoice)voice;  StringBuilder buf=new StringBuilder();  LinkedList<MBROLAPhoneme> mbrolaPhonemes=new LinkedList<MBROLAPhoneme>();  for (  Element element : phonesAndBoundaries) {    if (element.getTagName().equals(MaryXML.PHONE)) {      String s=element.getAttribute("p");      int dur=0;      try {        dur=Integer.parseInt(element.getAttribute("d"));      } catch (      NumberFormatException e) {      }      String f0string=element.getAttribute("f0");      Vector<int[]> targets=new Vector<int[]>();      int i=0;      while ((i=f0string.indexOf("(",i)) != -1) {        int j=f0string.indexOf(",",i);        int percent=0;        try {          percent=Integer.parseInt(f0string.substring(i + 1,j));        } catch (        NumberFormatException e) {        }        int k=f0string.indexOf(")",j);        int f0=0;        try {          f0=Integer.parseInt(f0string.substring(j + 1,k));        } catch (        NumberFormatException e) {        }        int[] target=new int[2];        target[0]=percent;        target[1]=f0;        targets.add(target);        i=k;      }      String vq=element.getAttribute("vq");      if (vq.equals("") || !mbrolaVoice.hasVoiceQuality(vq)) {        vq=null;      }      MBROLAPhoneme newP=new MBROLAPhoneme(s,dur,targets,vq);      Vector<MBROLAPhoneme> p2vect=mbrolaVoice.convertSampa(newP);      mbrolaPhonemes.addAll(p2vect);      while (mbrolaPhonemes.size() > 1) {        if (!mbrolaVoice.hasDiphone(mbrolaPhonemes.get(0),mbrolaPhonemes.get(1))) {          MBROLAPhoneme p1=mbrolaPhonemes.removeFirst();          MBROLAPhoneme p2=mbrolaPhonemes.removeFirst();          Vector<MBROLAPhoneme> newPhones=mbrolaVoice.replaceDiphone(p1,p2);          for (int l=newPhones.size() - 1; l >= 0; l--) {            MBROLAPhoneme mph=newPhones.get(l);            mbrolaPhonemes.addFirst(mph);          }        }        MBROLAPhoneme p1=mbrolaPhonemes.removeFirst();        buf.append(p1.toString());        buf.append("\n");      }    } else     if (element.getTagName().equals(MaryXML.BOUNDARY)) {      while (!mbrolaPhonemes.isEmpty()) {        MBROLAPhoneme p=mbrolaPhonemes.removeFirst();        buf.append(p.toString());        buf.append("\n");      }      String duration=element.getAttribute("duration");      if (duration != null && !duration.equals("")) {        try {          Integer.parseInt(duration);          buf.append("_ ");          buf.append(duration);          buf.append("\n");          buf.append("#\n");        } catch (        NumberFormatException nfe) {          Log.d(Mary.LOG,"Unexpected value for duration: '" + duration + "' -- ignoring boundary");        }      }    } else {      throw new IllegalArgumentException("Expected only <ph> and <boundary> elements, got <" + element.getTagName() + ">");    }  }  while (!mbrolaPhonemes.isEmpty()) {    MBROLAPhoneme p=mbrolaPhonemes.removeFirst();    buf.append(p.toString());    buf.append("\n");  }  return buf.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200590,skillcaster,skillname);}  }
class C{  public void putFramePathOnStack(int index){  if (!switchRequestComingFromFrameSwitcher) {    expandFramePathStack(new IndexedFrame(index));  }}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public void addAssociation(int node){  addAssociation(node,0);}  }
class C{  public UnknownDependencyException(final String message){  super(message);}  }
class C{  private static void popTransactionStartStamp(){  ListOrderedMap map=(ListOrderedMap)suspendedTxStartStamps.get();  if (map.size() > 0) {    transactionStartStamp.set((Timestamp)map.remove(map.lastKey()));  } else {    Debug.logError("Error in transaction handling - no saved start stamp found - using NOW.",module);    transactionStartStamp.set(UtilDateTime.nowTimestamp());  }}  }
class C{  public void actionPerformed(ActionEvent ev){  ClusterViewer viewer=getViewer();  PageFormat pageFormat=ProgramProperties.getPageFormat();  PrinterJob job=PrinterJob.getPrinterJob();  if (pageFormat != null)   job.setPrintable(viewer,pageFormat); else   job.setPrintable(viewer);  if (job.printDialog()) {    try {      job.print();    } catch (    Exception ex) {      Basic.caught(ex);      NotificationsInSwing.showError(viewer.getFrame(),"Print failed: " + ex);    }  }}  }
class C{  private Iterable<Tuple2<String,String>> segment(String sentence){  List<Tuple2<String,String>> tokens=new ArrayList<Tuple2<String,String>>();  sentence=sentence.trim();  if (sentence.length() == 0) {    return tokens;  }  String s=sentence;  while (true) {    int maxLen=0;    String nextToken="";    String type="";    for (    String patternName : patterns.keySet()) {      Pattern pattern=patterns.get(patternName);      Matcher matcher=pattern.matcher(s);      if (matcher.lookingAt()) {        int len=matcher.end() - matcher.start();        if (maxLen < len) {          maxLen=len;          nextToken=matcher.group();          type=patternName;        }      }    }    nextToken=nextToken.trim();    if (nextToken.length() > 0) {      s=s.substring(maxLen).trim();      if (type.contains("name") && s.length() > 0) {        Tuple2<String,String> tup=processName(nextToken,s);        if (tup._1().length() != nextToken.length()) {          nextToken=tup._1();          s=tup._2();          type="word";        }        tokens.add(new Tuple2<String,String>(type,nextToken));      } else       if (type.contains("unit") && s.length() > 0) {        Tuple2<String,String> tup=processUnit(nextToken,s);        if (tup._1().length() > nextToken.length()) {          nextToken=tup._1();          s=tup._2();          type="unit";        }        tokens.add(new Tuple2<String,String>(type,nextToken));      } else       if (type.contains("phrase")) {        if (nextToken.indexOf(' ') > 0) {          if (classifier != null) {            contexts.add(classifier.makeContexts(nextToken));            tokens.add(new Tuple2<String,String>("phrase","[" + nextToken + "]"));          } else {            List<String> words=tokenizePhrase(nextToken);            if (words != null) {              for (int i=0; i < words.size(); i++) {                tokens.add(new Tuple2<String,String>("word",words.get(i)));              }            } else {              System.out.println("Error when tokenizing phrase: " + nextToken);            }          }        } else {          tokens.add(new Tuple2<String,String>("word",nextToken));        }      } else {        tokens.add(new Tuple2<String,String>(type,nextToken));      }    } else {      if (s.trim().length() > 0) {        System.out.println("Unprocessed substring: " + s);      }      break;    }    if (s.length() == 0) {      break;    }  }  return tokens;}  }
class C{  private static Type<?> refineBounds(Set<Type<?>> bounds){  if (bounds.size() > 1) {    Iterator<Type<?>> currentBoundIter=bounds.iterator();    while (currentBoundIter.hasNext()) {      Type<?> currentBound=currentBoundIter.next();      Iterator<Type<?>> boundIter=bounds.iterator();      while (boundIter.hasNext()) {        Type<?> nextType=boundIter.next();        if (nextType.equals(currentBound)) {          continue;        } else {          Type<?> mostSpecific=TypeUtil.getMostSpecificType(currentBound,nextType);          if (nextType.equals(mostSpecific)) {            boundIter.remove();          }        }      }    }    if (bounds.size() != 1) {      throw new IllegalArgumentException(bounds + " is not refinable");    }  }  return bounds.iterator().next();}  }
class C{  public double optDouble(String key,double defaultValue){  try {    Object o=opt(key);    return o instanceof Number ? ((Number)o).doubleValue() : new Double((String)o).doubleValue();  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void validateDTDattribute(QName element,String attValue,XMLAttributeDecl attributeDecl) throws XNIException {switch (attributeDecl.simpleType.type) {case XMLSimpleType.TYPE_ENTITY:{      boolean isAlistAttribute=attributeDecl.simpleType.list;      try {        if (isAlistAttribute) {          fValENTITIES.validate(attValue,fValidationState);        } else {          fValENTITY.validate(attValue,fValidationState);        }      } catch (      InvalidDatatypeValueException ex) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);      }      break;    }case XMLSimpleType.TYPE_NOTATION:case XMLSimpleType.TYPE_ENUMERATION:{    boolean found=false;    String[] enumVals=attributeDecl.simpleType.enumeration;    if (enumVals == null) {      found=false;    } else     for (int i=0; i < enumVals.length; i++) {      if (attValue == enumVals[i] || attValue.equals(enumVals[i])) {        found=true;        break;      }    }    if (!found) {      StringBuffer enumValueString=new StringBuffer();      if (enumVals != null)       for (int i=0; i < enumVals.length; i++) {        enumValueString.append(enumVals[i] + " ");      }      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTRIBUTE_VALUE_NOT_IN_LIST",new Object[]{attributeDecl.name.rawname,attValue,enumValueString},XMLErrorReporter.SEVERITY_ERROR);    }    break;  }case XMLSimpleType.TYPE_ID:{  try {    fValID.validate(attValue,fValidationState);  } catch (  InvalidDatatypeValueException ex) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);  }  break;}case XMLSimpleType.TYPE_IDREF:{boolean isAlistAttribute=attributeDecl.simpleType.list;try {  if (isAlistAttribute) {    fValIDRefs.validate(attValue,fValidationState);  } else {    fValIDRef.validate(attValue,fValidationState);  }} catch (InvalidDatatypeValueException ex) {  if (isAlistAttribute) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"IDREFSInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);  } else {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);  }}break;}case XMLSimpleType.TYPE_NMTOKEN:{boolean isAlistAttribute=attributeDecl.simpleType.list;try {if (isAlistAttribute) {  fValNMTOKENS.validate(attValue,fValidationState);} else {  fValNMTOKEN.validate(attValue,fValidationState);}} catch (InvalidDatatypeValueException ex) {if (isAlistAttribute) {  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"NMTOKENSInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);} else {  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"NMTOKENInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);}}break;}}}  }
class C{  public static int sumFromTo(int iStart,int iEnd){  int iRes=0;  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;  return iRes;}  }
class C{  private ResourceUnit findBrokerForPlacement(Multimap<Long,ResourceUnit> candidates,ServiceUnitId serviceUnit){  long underloadThreshold=this.getLoadBalancerBrokerUnderloadedThresholdPercentage();  long overloadThreshold=this.getLoadBalancerBrokerOverloadedThresholdPercentage();  ResourceQuota defaultQuota=pulsar.getLocalZkCacheService().getResourceQuotaCache().getDefaultQuota();  double minLoadPercentage=101.0;  long maxAvailability=-1;  ResourceUnit idleRU=null;  ResourceUnit maxAvailableRU=null;  ResourceUnit randomRU=null;  ResourceUnit selectedRU=null;  ResourceUnitRanking selectedRanking=null;  String serviceUnitId=serviceUnit.toString();synchronized (resourceUnitRankings) {    long randomBrokerIndex=(candidates.size() > 0) ? (this.brokerRotationCursor % candidates.size()) : 0;    for (    Map.Entry<Long,ResourceUnit> candidateOwner : candidates.entries()) {      ResourceUnit candidate=candidateOwner.getValue();      randomBrokerIndex--;      if (!resourceUnitRankings.containsKey(candidate)) {        continue;      }      String resourceUnitId=candidate.getResourceId();      ResourceUnitRanking ranking=resourceUnitRankings.get(candidate);      if (ranking.isServiceUnitPreAllocated(serviceUnitId)) {        return candidate;      }      if (ranking.isServiceUnitLoaded(serviceUnitId)) {        ranking.removeLoadedServiceUnit(serviceUnitId,this.getResourceQuota(serviceUnitId));      }      if (randomBrokerIndex < 0 && randomRU == null) {        randomRU=candidate;      }      double loadPercentage=ranking.getEstimatedLoadPercentage();      double availablePercentage=Math.max(0,(100 - loadPercentage) / 100);      long availability=(long)(ranking.estimateMaxCapacity(defaultQuota) * availablePercentage);      if (availability > maxAvailability) {        maxAvailability=availability;        maxAvailableRU=candidate;      }      if (ranking.isIdle()) {        if (idleRU == null) {          idleRU=candidate;        }      } else {        if (selectedRU == null) {          selectedRU=candidate;          selectedRanking=ranking;          minLoadPercentage=loadPercentage;        } else {          if (ranking.compareTo(selectedRanking) < 0) {            minLoadPercentage=loadPercentage;            selectedRU=candidate;            selectedRanking=ranking;          }        }      }    }    if ((minLoadPercentage > underloadThreshold && idleRU != null) || selectedRU == null) {      selectedRU=idleRU;    } else     if (minLoadPercentage >= 100.0 && randomRU != null) {      selectedRU=randomRU;    } else     if (minLoadPercentage > overloadThreshold) {      selectedRU=maxAvailableRU;    }    if (selectedRU != null) {      this.brokerRotationCursor=(this.brokerRotationCursor + 1) % 1000000;      ResourceUnitRanking ranking=resourceUnitRankings.get(selectedRU);      String loadPercentageDesc=ranking.getEstimatedLoadPercentageString();      log.info("Assign {} to {} with ({}).",serviceUnitId,selectedRU.getResourceId(),loadPercentageDesc);      if (!ranking.isServiceUnitPreAllocated(serviceUnitId)) {        ResourceQuota quota=this.getResourceQuota(serviceUnitId);        ranking.addPreAllocatedServiceUnit(serviceUnitId,quota);      }    }  }  return selectedRU;}  }
class C{  public void doDrop(Player player){}  }
class C{  public static boolean isContactPairEnabled(){  return contactPairEnabled;}  }
class C{  public void updateHeader(Header header){  if (header == null) {    return;  }  for (int i=0; i < this.headers.size(); i++) {    Header current=(Header)this.headers.get(i);    if (current.getName().equalsIgnoreCase(header.getName())) {      this.headers.set(i,header);      return;    }  }  this.headers.add(header);}  }
class C{  private static double polyCosine(double x){  double x2=x * x;  double p=2.479773539153719E-5;  p=p * x2 + -0.0013888888689039883;  p=p * x2 + 0.041666666666621166;  p=p * x2 + -0.49999999999999994;  p*=x2;  return p;}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,Object interfaceObject){  Class<?> interfaceClass=interfaceObject.getClass();  return interfaceOf(objectClass,interfaceClass);}  }
class C{  public void checkAliasAnalysis(){  Set<IVarAbstraction> access_expr=new HashSet<IVarAbstraction>();  ArrayList<IVarAbstraction> al=new ArrayList<IVarAbstraction>();  Value[] values=new Value[2];  for (  SootMethod sm : ptsProvider.getAllReachableMethods()) {    if (sm.isJavaLibraryMethod())     continue;    if (!sm.isConcrete())     continue;    if (!sm.hasActiveBody()) {      sm.retrieveActiveBody();    }    if (!ptsProvider.isValidMethod(sm))     continue;    for (Iterator<Unit> stmts=sm.getActiveBody().getUnits().iterator(); stmts.hasNext(); ) {      Stmt st=(Stmt)stmts.next();      if (st instanceof AssignStmt) {        AssignStmt a=(AssignStmt)st;        values[0]=a.getLeftOp();        values[1]=a.getRightOp();        for (        Value v : values) {          if (v instanceof InstanceFieldRef) {            InstanceFieldRef ifr=(InstanceFieldRef)v;            final SootField field=ifr.getField();            if (!(field.getType() instanceof RefType))             continue;            LocalVarNode vn=ptsProvider.findLocalVarNode((Local)ifr.getBase());            if (vn == null)             continue;            if (ptsProvider.isExceptionPointer(vn))             continue;            IVarAbstraction pn=ptsProvider.findInternalNode(vn);            if (pn == null)             continue;            pn=pn.getRepresentative();            if (pn.hasPTResult())             access_expr.add(pn);          }        }      }    }  }  access_expr.remove(null);  al.addAll(access_expr);  access_expr=null;  Date begin=new Date();  int size=al.size();  for (int i=0; i < size; ++i) {    IVarAbstraction pn=al.get(i);    VarNode n1=(VarNode)pn.getWrappedNode();    for (int j=i + 1; j < size; ++j) {      IVarAbstraction qn=al.get(j);      VarNode n2=(VarNode)qn.getWrappedNode();      if (pn.heap_sensitive_intersection(qn))       evalRes.n_hs_alias++;      if (n1.getP2Set().hasNonEmptyIntersection(n2.getP2Set()))       evalRes.n_hi_alias++;    }  }  evalRes.n_alias_pairs=size * (size - 1) / 2;  Date end=new Date();  ptsProvider.ps.println();  ptsProvider.ps.println("--------> Alias Pairs Evaluation <---------");  ptsProvider.ps.println("Number of pointer pairs in app code: " + evalRes.n_alias_pairs);  ptsProvider.ps.printf("Heap sensitive alias pairs (by Geom): %d, Percentage = %.3f%%\n",evalRes.n_hs_alias,(double)evalRes.n_hs_alias / evalRes.n_alias_pairs * 100);  ptsProvider.ps.printf("Heap insensitive alias pairs (by SPARK): %d, Percentage = %.3f%%\n",evalRes.n_hi_alias,(double)evalRes.n_hi_alias / evalRes.n_alias_pairs * 100);  ptsProvider.ps.printf("Using time: %dms \n",end.getTime() - begin.getTime());  ptsProvider.ps.println();}  }
class C{  public boolean geom_blocking(){  return soot.PhaseOptions.getBoolean(options,"geom-blocking");}  }
class C{  private void reduce(int reqidx,int prefidx){  for (int i=reqidx; i < reqs.length; i++) {    InvocationConstraint req=reqs[i];    if (req == null) {      throw new NullPointerException("elements cannot be null");    } else     if (!Constraint.contains(reqs,reqidx,req)) {      reqs[reqidx++]=req;    }  }  reqs=(InvocationConstraint[])Constraint.trim(reqs,reqidx);  for (int i=prefidx; i < prefs.length; i++) {    InvocationConstraint pref=prefs[i];    if (pref == null) {      throw new NullPointerException("elements cannot be null");    } else     if (!Constraint.contains(prefs,prefidx,pref) && !Constraint.contains(reqs,reqs.length,pref)) {      prefs[prefidx++]=pref;    }  }  prefs=(InvocationConstraint[])Constraint.trim(prefs,prefidx);}  }
class C{  private void configureSigning(final Client clientProxy,final CommunicationMode mode){  final WSS4JOutInterceptor wssOut=createSigningInterceptor();  clientProxy.getOutInterceptors().add(wssOut);  final WSS4JInInterceptor wssIn=createValidatingInterceptor(mode);  clientProxy.getInInterceptors().add(wssIn);}  }
class C{  public static Map<String,List<DataFileFooter>> createDataFileFooterMappingForSegments(List<TableBlockInfo> tableBlockInfoList) throws IndexBuilderException {  Map<String,List<DataFileFooter>> segmentBlockInfoMapping=new HashMap<>();  for (  TableBlockInfo blockInfo : tableBlockInfoList) {    List<DataFileFooter> eachSegmentBlocks=new ArrayList<>();    String segId=blockInfo.getSegmentId();    DataFileFooter dataFileMatadata=null;    List<DataFileFooter> metadataList=segmentBlockInfoMapping.get(segId);    try {      dataFileMatadata=CarbonUtil.readMetadatFile(blockInfo.getFilePath(),blockInfo.getBlockOffset(),blockInfo.getBlockLength());    } catch (    CarbonUtilException e) {      throw new IndexBuilderException(e);    }    if (null == metadataList) {      eachSegmentBlocks.add(dataFileMatadata);      segmentBlockInfoMapping.put(segId,eachSegmentBlocks);    } else {      metadataList.add(dataFileMatadata);    }  }  return segmentBlockInfoMapping;}  }
class C{  @Override public int read() throws IOException {  InputStream input=m_streams.get();  if (null != input) {    return input.read();  } else {    return -1;  }}  }
class C{  public static String makeTag(Class<?> cls,@IdRes int viewId,long itemId){  return makeTag(cls,viewId) + ":" + itemId;}  }
class C{  public void cancel(Account account){  Log_OC.d(TAG,"Account= " + account.name);  if (mCurrentUpload != null) {    Log_OC.d(TAG,"Current Upload Account= " + mCurrentUpload.getAccount().name);    if (mCurrentUpload.getAccount().name.equals(account.name)) {      mCurrentUpload.cancel();    }  }  cancelUploadsForAccount(account);}  }
class C{  public EqDataTagException(final int code,final String descr){  super(code,descr);}  }
class C{  public boolean checkCloseHitTest(float x,float y,boolean isRTL){  RectF closeRectangle=getCloseBounds(isRTL);  return closeRectangle != null ? closeRectangle.contains(x,y) : false;}  }
class C{  public ArraySet(E[] elements){  this();  for (  E element : elements)   add(element);}  }
class C{  public static SinkRecord spoofSinkRecord(String topic,String field,String value){  Schema basicRowSchema=SchemaBuilder.struct().field(field,Schema.STRING_SCHEMA).build();  Struct basicRowValue=new Struct(basicRowSchema);  basicRowValue.put(field,value);  return spoofSinkRecord(topic,basicRowSchema,basicRowValue);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getPCoA() != null && viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues() > 3 && !(viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && viewer.getPcoaTab().getThirdPC() == 2) && viewer.getPcoaTab().isIs3dMode();}  }
class C{  public void loading(){}  }
class C{  protected synchronized String resolveSubordinateCatalogs(int entityType,String entityName,String publicId,String systemId) throws IOException {  for (int catPos=0; catPos < catalogs.size(); catPos++) {    Catalog c=null;    try {      c=(Catalog)catalogs.elementAt(catPos);    } catch (    ClassCastException e) {      String catfile=(String)catalogs.elementAt(catPos);      c=newCatalog();      try {        c.parseCatalog(catfile);      } catch (      MalformedURLException mue) {        catalogManager.debug.message(1,"Malformed Catalog URL",catfile);      }catch (      FileNotFoundException fnfe) {        catalogManager.debug.message(1,"Failed to load catalog, file not found",catfile);      }catch (      IOException ioe) {        catalogManager.debug.message(1,"Failed to load catalog, I/O error",catfile);      }      catalogs.setElementAt(c,catPos);    }    String resolved=null;    if (entityType == DOCTYPE) {      resolved=c.resolveDoctype(entityName,publicId,systemId);    } else     if (entityType == DOCUMENT) {      resolved=c.resolveDocument();    } else     if (entityType == ENTITY) {      resolved=c.resolveEntity(entityName,publicId,systemId);    } else     if (entityType == NOTATION) {      resolved=c.resolveNotation(entityName,publicId,systemId);    } else     if (entityType == PUBLIC) {      resolved=c.resolvePublic(publicId,systemId);    } else     if (entityType == SYSTEM) {      resolved=c.resolveSystem(systemId);    } else     if (entityType == URI) {      resolved=c.resolveURI(systemId);    }    if (resolved != null) {      return resolved;    }  }  return null;}  }
class C{  public final static double max(double Num1,double Num2){  return (Num1 > Num2) ? Num1 : Num2;}  }
class C{  public boolean avoid_deadlock(){  return soot.PhaseOptions.getBoolean(options,"avoid-deadlock");}  }
class C{  public static boolean isUnitInterval(String value){  if (!isNumeric(value)) {    return false;  }  Double dbl=Double.parseDouble(value);  return dbl >= 0d && dbl <= 1d;}  }
class C{  public synchronized static boolean isDesktopSupported(){  if (!desktopSupportedInitialized) {    desktopSupported=Desktop.isDesktopSupported();    desktopSupportedInitialized=true;  }  return desktopSupported;}  }
class C{  public void putSingleString(Activity activity,String key,String string) throws ClassNotFoundException {  HashMap<String,String> hashMap=receiveHashMap(activity);  hashMap.put(key,string);  pushHashMap(activity,hashMap);}  }
class C{  private int checkContent(int elementIndex,QName[] children,int childOffset,int childCount) throws XNIException {  fDTDGrammar.getElementDecl(elementIndex,fTempElementDecl);  final String elementType=fCurrentElement.rawname;  final int contentType=fCurrentContentSpecType;  if (contentType == XMLElementDecl.TYPE_EMPTY) {    if (childCount != 0) {      return 0;    }  } else   if (contentType == XMLElementDecl.TYPE_ANY) {  } else   if (contentType == XMLElementDecl.TYPE_MIXED || contentType == XMLElementDecl.TYPE_CHILDREN) {    ContentModelValidator cmElem=null;    cmElem=fTempElementDecl.contentModelValidator;    int result=cmElem.validate(children,childOffset,childCount);    return result;  } else   if (contentType == -1) {  } else   if (contentType == XMLElementDecl.TYPE_SIMPLE) {  } else {  }  return -1;}  }
class C{  public static int posToOrientation(int position){  if (!(0 <= position && position < 4))   throw new IllegalArgumentException();  return POS_TO_ORIENTATION[position];}  }
class C{  public PhotosGetWallUploadServerQuery(VkApiClient client,UserActor actor){  super(client,"photos.getWallUploadServer",PhotoUpload.class);  accessToken(actor.getAccessToken());}  }
class C{  public Iterator<RecordID> scan(){  List<BEntry> validEntries=getAllValidEntries();  List<RecordID> rids=new ArrayList<RecordID>();  for (  BEntry le : validEntries) {    rids.add(le.getRecordID());  }  return rids.iterator();}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public void clean(){  clear();  ritems=new VisualItem[DEFAULT_SIZE];  rscores=new int[DEFAULT_SIZE];  pitems=new VisualItem[DEFAULT_SIZE];  pscores=new int[DEFAULT_SIZE];  items_buf=null;  scores_buf=null;}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  if (this.remaining == 0) {    return -1;  } else {    if (this.remaining < length) {      length=(int)this.remaining;    }    length=this.in.read(buffer,offset,length);    if (length >= 0) {      this.remaining-=length;      if (this.remaining == 0 && !endOfLineFound) {        endOfLineFound=true;        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      } else       if (endOfLineFound) {        int end=offset + length;        for (int i=offset; i < end; i++) {          if (buffer[i] == END_OF_LINE_BYTE_VALUE) {            this.remaining=0;            return (i - offset) + 1;          }        }        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      }    }    return length;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200953,skilltarget,skillcaster,skillname);}  }
class C{  public TransitionBasedParserMLP(JavaSparkContext jsc,String classifierFileName,FeatureFrame featureFrame){  this.featureFrame=featureFrame;  this.classifier=TransitionClassifier.load(jsc,new Path(classifierFileName,"data").toString());  this.pipelineModel=PipelineModel.load(new Path(classifierFileName,"pipelineModel").toString());  this.transitionName=((StringIndexerModel)pipelineModel.stages()[2]).labels();  String[] features=((CountVectorizerModel)(pipelineModel.stages()[1])).vocabulary();  this.featureMap=new HashMap<String,Integer>();  for (int j=0; j < features.length; j++) {    this.featureMap.put(features[j],j);  }}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  public PreResponse deserialize(String preResponse) throws IOException {  JsonNode serializedPreResponse=nonResponseContextMapper.readTree(preResponse);  return new PreResponse(getResultSet(serializedPreResponse.get(RESULT_SET_KEY)),getResponseContext(serializedPreResponse.get(RESPONSE_CONTEXT_KEY)));}  }
class C{  public MyDialog contentView(int layoutId){  if (layoutId == 0)   return this;  View v=LayoutInflater.from(getContext()).inflate(layoutId,null);  return contentView(v);}  }
class C{  private void doIndent() throws XMLStreamException {  if (depth > 0) {    for (int i=0; i < depth; i++)     super.writeCharacters(indentStep);  }}  }
class C{  public static boolean containsAnyIgnoreCase(String string,Collection<String> searchStrings){  if (string == null || searchStrings == null) {    return false;  }  for (  String searchString : searchStrings) {    if (string.trim().toLowerCase().contains(searchString.trim().toLowerCase())) {      return true;    }  }  return false;}  }
class C{  Map<Bucket.Label,BucketStatistics> calculateBucketStatistics(Map<Bucket.Label,BucketCounts> buckets,BinomialMetric metric,double effectSize,Parameters.Mode mode){  Map<Bucket.Label,BucketStatistics> bucketsWithStats=new HashMap<>();  for (  BucketCounts bucket : buckets.values()) {    Bucket.Label bucketLabel=bucket.getLabel();    BucketStatistics bucketWithStats=new BucketStatistics.Builder().withBucketCounts(bucket).withBucketComparisons(new HashMap<Bucket.Label,BucketComparison>()).build();    analysisTools.generateRate(bucketWithStats,metric);    bucketsWithStats.put(bucketLabel,bucketWithStats);  }  analysisTools.generateBucketComparison(bucketsWithStats,metric,effectSize,mode);  return bucketsWithStats;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=mRenderLimitLinesBuffer;  pts[0]=0;  pts[1]=0;  Path limitLinePath=mRenderLimitLines;  limitLinePath.reset();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.dp2px(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public synchronized void clear(){  lruHead.nextLinked=lruHead.prevLinked=lruHead;  Entry tab[]=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;}  }
class C{  public synchronized ZooKeeperClientBuilder zkc(ZooKeeperClient zkc){  this.cachedClient=zkc;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_A_TO_ME(String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200726,value0,skillcaster,skillname);}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> cursorLoader,Cursor cursor){  changeCursor(cursor);}  }
class C{  protected void updateEntryInfoFromTabState(Entry entry,TabState tabState){  entry.currentUrl=tabState.getVirtualUrlFromState();}  }
class C{  public boolean equals(Datagram other){  if (!(other instanceof MCepDatagram))   return false;  MCepDatagram otherMCep=(MCepDatagram)other;  if (this.duration != otherMCep.duration)   return false;  if (this.coeffs.length != otherMCep.coeffs.length)   return false;  for (int i=0; i < this.coeffs.length; i++) {    if (this.coeffs[i] != otherMCep.coeffs[i])     return false;  }  return true;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final ParametersDialog parametersDialog=(ParametersDialog)getParent();  final Director dir=(Director)getDir();  parametersDialog.setVisible(false);  if (dir.getDocument().getMeganFile().hasDataConnector()) {    ReadMagnitudeParser.setEnabled(parametersDialog.isUseMagnitudes());    int numberOfMatches=0;    try {      final IConnector connector=dir.getDocument().getMeganFile().getDataConnector();      numberOfMatches=connector.getNumberOfMatches();    } catch (    IOException e) {      Basic.caught(e);    }    if (numberOfMatches > 10000000) {      int result=JOptionPane.showConfirmDialog(MainViewer.getLastActiveFrame(),String.format("This sample contains %,d matches, processing may take a long time, proceed?",numberOfMatches),"Very large dataset, proceed?",JOptionPane.YES_NO_OPTION);      if (result != JOptionPane.YES_OPTION)       return;    }  }  parametersDialog.setCanceled(false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_NOTICE(String value0,long i){  return new SM_SYSTEM_MESSAGE(1400019,value0,i,2);}  }
class C{  public static int calculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (rqsW == 0 || rqsH == 0)   return 1;  if (height > rqsH || width > rqsW) {    final int heightRatio=Math.round((float)height / (float)rqsH);    final int widthRatio=Math.round((float)width / (float)rqsW);    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;  }  return inSampleSize;}  }
class C{  protected soot.Local generateLocal(polyglot.types.Type polyglotType){  soot.Type type=Util.getSootType(polyglotType);  return lg.generateLocal(type);}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  protected boolean filterHeader(int index){  if (this.headerName == null)   return true;  final String name=((Header)this.allHeaders.get(index)).getName();  return this.headerName.equalsIgnoreCase(name);}  }
class C{  private List<SubTable> splitOn(String... columnNames){  int columnCount=columnNames.length;  List<Column> columns=original.columns(columnNames);  List<SubTable> tables=new ArrayList<>();  int[] columnIndices=new int[columnCount];  for (int i=0; i < columnCount; i++) {    columnIndices[i]=original.columnIndex(columnNames[i]);  }  Table empty=original.emptyCopy();  SubTable newView=new SubTable(empty);  String lastKey="";  newView.setName(lastKey);  for (int row=0; row < original.rowCount(); row++) {    String newKey="";    List<String> values=new ArrayList<>();    for (int col=0; col < columnCount; col++) {      if (col > 0)       newKey=newKey + SPLIT_STRING;      String groupKey=original.get(columnIndices[col],row);      newKey=newKey + groupKey;      values.add(groupKey);    }    if (!newKey.equals(lastKey)) {      if (!newView.isEmpty()) {        tables.add(newView);      }      newView=new SubTable(empty);      newView.setName(newKey);      newView.setValues(values);      lastKey=newKey;    }    newView.addRow(row,original);  }  if (!tables.contains(newView) && !newView.isEmpty()) {    if (columnCount == 1) {      tables.add(newView);    } else {      tables.add(newView);    }  }  return tables;}  }
class C{  private Bitmap fetchIcon(int rarity){  String slot="";switch (pieceIndex) {case ASBSession.HEAD:    slot="head";  break;case ASBSession.BODY:slot="body";break;case ASBSession.ARMS:slot="arms";break;case ASBSession.WAIST:slot="waist";break;case ASBSession.LEGS:slot="legs";break;case ASBSession.TALISMAN:String imageRes;try {if (session.isEquipmentSelected(ASBSession.TALISMAN)) {imageRes="icons_items/" + getResources().getStringArray(R.array.talisman_names)[session.getTalisman().getTypeIndex()].split(",")[1];} else {imageRes="icons_items/Talisman-White.png";}} catch (ArrayIndexOutOfBoundsException e) {Log.e("ASB","Image not found for " + getResources().getStringArray(R.array.talisman_names)[session.getTalisman().getTypeIndex()]);imageRes="icons_items/Talisman-White.png";}Log.d("ASB","Attempting to open " + imageRes);AssetManager manager=getContext().getAssets();InputStream stream;try {stream=manager.open(imageRes);Bitmap bitmap=BitmapFactory.decodeStream(stream);stream.close();return bitmap;} catch (IOException e) {e.printStackTrace();return null;}}String imageRes="icons_armor/icons_" + slot + "/"+ slot+ String.valueOf(rarity)+ ".png";Log.d("ASB","Attempting to open " + imageRes);AssetManager manager=getContext().getAssets();InputStream stream;try {stream=manager.open(imageRes);Bitmap bitmap=BitmapFactory.decodeStream(stream);stream.close();return bitmap;} catch (IOException e) {e.printStackTrace();return null;}}  }
class C{  public synchronized VisualTupleSet add(String group,TupleSet data){  return add(group,data,null);}  }
class C{  public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  @RequestMapping(method=RequestMethod.POST,produces="application/json") public JsonNode handleFileUpload(HttpServletRequest request,@RequestParam("file") MultipartFile file){  if (!file.isEmpty()) {    try {      ServerConfig serverConfig=retrieveServerConfig();      String fileName=file.getOriginalFilename();      if (fileName != null && (fileName.endsWith(".bpmn") || fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".zip")|| fileName.endsWith(".bar"))) {        return clientService.uploadDeployment(serverConfig,fileName,file.getInputStream());      } else {        throw new BadRequestException("Invalid file name");      }    } catch (    IOException e) {      throw new InternalServerErrorException("Could not deploy file: " + e.getMessage());    }  } else {    throw new BadRequestException("No file found in POST body");  }}  }
class C{  public static synchronized void shutdown(){  _shutdown=true;  Watchdog watchdog=_watchdog;  if (watchdog != null)   watchdog.interrupt();}  }
class C{  public boolean isValid(){  return (Math.abs(lo()) <= S2.M_PI && Math.abs(hi()) <= S2.M_PI && !(lo() == -S2.M_PI && hi() != S2.M_PI) && !(hi() == -S2.M_PI && lo() != S2.M_PI));}  }
class C{  @VisibleForTesting public Optional<HostedZone> findHostedZone(String record){  final String fqdnRecord=determineFqdnRecord(record);  final Optional<HostedZone> matchingZone=route53.listHostedZones().getHostedZones().stream().filter(null).reduce((null));  matchingZone.ifPresent(null);  return matchingZone;}  }
class C{  boolean computeAngleOffset(){  if (mFinished) {    return false;  }  long systemClock=AnimationUtils.currentAnimationTimeMillis();  long timePassed=systemClock - mStartMillis;  if (timePassed < mDurationMillis) {switch (mMode) {case SCROLL_MODE:      float sc=(float)timePassed / mDurationMillis;    mCurrAngleDeg=mStartAngleDeg + Math.round(mDeltaAngleDeg * sc);  break;case FLING_MODE:float timePassedSeconds=timePassed / 1000.0f;float distance=mCoeffVelocity * mVelocity * timePassedSeconds - (DECELERATION * timePassedSeconds * timePassedSeconds / 2.0f);mCurrAngleDeg=mStartAngleDeg + Math.round(distance);break;}return true;} else {mFinished=true;return false;}}  }
class C{  public final static String base64Decode(String str){  if (str == null)   return null;  return new String(base64Decode(str.getBytes()));}  }
class C{  private boolean isConnectivityLayoutOverridden(){  verifyOverrideRulesForConnectivity();  return mConnectedLayout != 0 && mDisconnectedLayout != 0;}  }
class C{  @Override public void fatalError(SAXParseException exception){  errorCount++;  fatalCount++;  if (showErrors && (errorCount + warningCount < maxMessages)) {    message("Fatal error",exception);  }}  }
class C{  public static ProbeItemDescriptor continuousLineItem(String name,String description,ItemValueFormatter formatter){  return continuousItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);}  }
class C{  @Override public double[] analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  System.arraycopy(frame,0,real,0,frame.length);  if (real.length > frame.length)   Arrays.fill(real,frame.length,real.length,0);  FFT.realTransform(real,false);  return FFT.computePowerSpectrum_FD(real);}  }
class C{  private void _alwaysScheduleAfter(Activity before,Activity after){  before.addActivityListener(new ScheduleAfterActivity(after,false));}  }
class C{  public static void transform(double[] real,double[] imag,boolean inverse){  if (real == null || imag == null)   throw new NullPointerException("Received null argument");  if (real.length != imag.length)   throw new IllegalArgumentException("Arrays must be equal length");  int N=real.length;  assert MathUtils.isPowerOfTwo(N);  int halfN=N / 2;  int iReverse=0;  for (int i=0; i < N; i++) {    if (i > iReverse) {      double tmpReal=real[i];      double tmpImag=imag[i];      real[i]=real[iReverse];      imag[i]=imag[iReverse];      real[iReverse]=tmpReal;      imag[iReverse]=tmpImag;    }    int b=halfN;    while (b >= 1 && iReverse >= b) {      iReverse-=b;      b>>=1;    }    iReverse+=b;  }  for (int blockLength=2, powerOfTwo=1; blockLength <= N; blockLength<<=1, powerOfTwo++) {    double wStepReal=cosDelta[powerOfTwo];    double wStepImag=sinDelta[powerOfTwo];    if (inverse)     wStepImag=-wStepImag;    double wReal=1;    double wImag=0;    int halfBlockLength=blockLength / 2;    for (int n=0; n < halfBlockLength; n++) {      for (int i=n; i < N; i+=blockLength) {        int j=i + halfBlockLength;        double tmpReal=wReal * real[j] - wImag * imag[j];        double tmpImag=wReal * imag[j] + wImag * real[j];        real[j]=real[i] - tmpReal;        imag[j]=imag[i] - tmpImag;        real[i]+=tmpReal;        imag[i]+=tmpImag;      }      double oldWReal=wReal;      wReal=oldWReal * wStepReal - wImag * wStepImag;      wImag=oldWReal * wStepImag + wImag * wStepReal;    }  }  if (inverse) {    for (int i=0; i < N; i++) {      real[i]/=N;      imag[i]/=N;    }  }}  }
class C{  public static DateTimeUnit fromJdkDate(Date date){  return fromJodaDateTime(new DateTime(date.getTime()),true);}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  public ScriptRunner(final IKBus eventBus,final Script script,final Executor executor){  this.script=script;  this.eventBus=eventBus;  this.executor=executor;}  }
class C{  public void nofityChange(){  if (observer != null) {    observer.onChange();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_GET_PRODUCTION_EXP(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1390221,descriptionId);}  }
class C{  public AudioGetQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  private void lockIds(int... ids){  try {    lock.lock();    for (    int id : ids) {      boolean status=idList.get(id);      if (status) {        throw new IDFactoryError("ID " + id + " is already taken, fatal error!!!");      }      idList.set(id);    }  }  finally {    lock.unlock();  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1790) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public TimeParser(DateFormat dateFormat){  super(dateFormat);}  }
class C{  private void registerDefaultMacros(){  macros=new HashMap<>();  registerMacro("noescp",new NoescpMacro());  registerMacro("int",new IntMacro());  registerMacro("double",new DoubleMacro());  registerMacro("equals",new EqualsMacro());}  }
class C{  private void initRefreshData(){  for (int i=0; i < 1; i++) {    List<String> url=new ArrayList<>();    url.add("http://qq1234.org/uploads/allimg/140404/3_140404114606_1.jpg");    url.add("http://qq1234.org/uploads/allimg/140404/3_140404114555_6.jpg");    mLists.add(url);  }}  }
class C{  public ScanRangeSplits build(){  ImmutableList.Builder<SplitGroup> splitGroups=ImmutableList.builder();  for (  Map.Entry<String,Map<String,ImmutableList.Builder<ScanRange>>> splitGroupRow : _scanRangesByGroupAndAndTokenRange.rowMap().entrySet()) {    ImmutableList.Builder<TokenRange> tokenRanges=ImmutableList.builder();    for (    ImmutableList.Builder<ScanRange> scanRange : splitGroupRow.getValue().values()) {      tokenRanges.add(new TokenRange(scanRange.build()));    }    splitGroups.add(new SplitGroup(tokenRanges.build()));  }  return new ScanRangeSplits(splitGroups.build());}  }
class C{  public void sendMail(MailDetailsBean mDetails) throws MailSenderException {  createConnection(mDetails.getServer());  createMessage(mDetails);  setTransportForm();}  }
class C{  public JValueSlider(String title,Number min,Number max,Number value){  m_min=min;  m_max=max;  m_value=value;  m_slider=new JSlider();  m_label=new JLabel(title);  m_field=new JTextField();  m_listeners=new ArrayList();  m_field.setBorder(null);  setSliderValue();  setFieldValue();  initUI();}  }
class C{  private static FilterExecuter createFilterExecuterTree(FilterResolverIntf filterExpressionResolverTree,SegmentProperties segmentProperties,Map<Integer,GenericQueryType> complexDimensionInfoMap){  FilterExecuterType filterExecuterType=filterExpressionResolverTree.getFilterExecuterType();  if (null != filterExecuterType) {switch (filterExecuterType) {case INCLUDE:      return getIncludeFilterExecuter(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties);case EXCLUDE:    return getExcludeFilterExecuter(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties);case OR:  return new OrFilterExecuterImpl(createFilterExecuterTree(filterExpressionResolverTree.getLeft(),segmentProperties,complexDimensionInfoMap),createFilterExecuterTree(filterExpressionResolverTree.getRight(),segmentProperties,complexDimensionInfoMap));case AND:return new AndFilterExecuterImpl(createFilterExecuterTree(filterExpressionResolverTree.getLeft(),segmentProperties,complexDimensionInfoMap),createFilterExecuterTree(filterExpressionResolverTree.getRight(),segmentProperties,complexDimensionInfoMap));case RESTRUCTURE:return new RestructureFilterExecuterImpl(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties);case ROWLEVEL_LESSTHAN:case ROWLEVEL_LESSTHAN_EQUALTO:case ROWLEVEL_GREATERTHAN_EQUALTO:case ROWLEVEL_GREATERTHAN:return RowLevelRangeTypeExecuterFacory.getRowLevelRangeTypeExecuter(filterExecuterType,filterExpressionResolverTree,segmentProperties);case ROWLEVEL:default :return new RowLevelFilterExecuterImpl(((RowLevelFilterResolverImpl)filterExpressionResolverTree).getDimColEvaluatorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getMsrColEvalutorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getFilterExpresion(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getTableIdentifier(),segmentProperties,complexDimensionInfoMap);}}return new RowLevelFilterExecuterImpl(((RowLevelFilterResolverImpl)filterExpressionResolverTree).getDimColEvaluatorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getMsrColEvalutorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getFilterExpresion(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getTableIdentifier(),segmentProperties,complexDimensionInfoMap);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static String unescape(String s){  try {    return URLDecoder.decode(s,"UTF-8");  } catch (  Exception e) {    return s;  }}  }
class C{  private void calculateUniqueValue(Object[] minValue,Object[] uniqueValue){  for (int i=0; i < measureCount; i++) {    if (type[i] == CarbonCommonConstants.BIG_INT_MEASURE) {      uniqueValue[i]=(long)minValue[i] - 1;    } else     if (type[i] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {      BigDecimal val=(BigDecimal)minValue[i];      uniqueValue[i]=(val.subtract(new BigDecimal(1.0)));    } else {      uniqueValue[i]=(double)minValue[i] - 1;    }  }}  }
class C{  public static Schema inferMultiple(List<List<Writable>> record){  return infer(record.get(0));}  }
class C{  public static void add(String uri){  File f=Module.home.getFile("/sitemap.txt");  BufferedReader in=null;  PrintStream out=null;  try {    in=new BufferedReader(new FileReader(f));    String line=in.readLine();    while (line != null) {      if (line.equals(uri)) {        return;      }    }    out=new PrintStream(new FileOutputStream(f,true));    out.println(uri);  } catch (  Exception e) {    log.error(e.getMessage(),e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        log.error(e);      }    }    if (out != null) {      out.close();    }  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public ShlExpr newShlExpr(Value op1,Value op2){  return new GShlExpr(op1,op2);}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE[index];final float d_sup=SPLINE[index + 1];final float distanceCoef=d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  public static <E>Stream<E> validate(Stream<E> stream,Predicate<? super E> validator,UnaryOperator<E> transformingIfNotValid){  return validate(stream,validator,Function.identity(),transformingIfNotValid);}  }
class C{  private JMXServiceURLFactory(){}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();  if (nested != null) {    nested.printStackTrace();  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private String buildRemoteName(String accountName,String remotePath){  return accountName + remotePath;}  }
class C{  public void clearTokens(){  tokens.clear();  saveTokenChanges();}  }
class C{  public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {  return analyzeAPKFile(fileName,false,true,false);}  }
class C{  public CreatePageWindow selectTemplateContaining(String templateName){  WebElement template=currentWindow.findElement(By.xpath(".//div[contains(@class, " + "'template-title') and contains(text(), '" + templateName + "')]"));  template.click();  return this;}  }
class C{  private void saveExperiment(){  saveExperiment(false);}  }
class C{  @Override @PostConstruct public void init() throws IDBPersistenceException {  super.init();}  }
class C{  protected boolean searchForRecursiveIncludes(String includedSysId){  if (includedSysId.equals(fCurrentBaseURI.getExpandedSystemId())) {    return true;  } else   if (fParentXIncludeHandler == null) {    return false;  } else {    return fParentXIncludeHandler.searchForRecursiveIncludes(includedSysId);  }}  }
class C{  public EconomyConcurrentHashMap(int initialCapacity,IHashEntryHandler<K,V> handler){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isLoading() && !model.isRefreshing()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;switch (model.getPhotosType()) {case PhotosObject.PHOTOS_TYPE_NORMAL:      requestCollectionPhotos(c,(Collection)model.getRequestKey(),page,refresh);    break;case PhotosObject.PHOTOS_TYPE_CURATED:  requestCuratedCollectionPhotos(c,(Collection)model.getRequestKey(),page,refresh);break;}}}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  @Override public Scan open(){  return new TableScan(ti,tx);}  }
class C{  private void clearMessages(){  animationHandler.removeMessages(MESSAGE_SCROLL);  animationHandler.removeMessages(MESSAGE_JUSTIFY);}  }
class C{  public static double determineAveragePower(DoubleDataSource signal){  if (signal == null)   throw new NullPointerException("Received null argument");  double[] signalData=signal.getAllData();  return determineAveragePower(signalData);}  }
class C{  private static BigInteger recoverFromSignature(int recId,ECDSASignature sig,byte[] message){  verifyPrecondition(recId >= 0,"recId must be positive");  verifyPrecondition(sig.r.signum() >= 0,"r must be positive");  verifyPrecondition(sig.s.signum() >= 0,"s must be positive");  verifyPrecondition(message != null,"message cannot be null");  BigInteger n=CURVE.getN();  BigInteger i=BigInteger.valueOf((long)recId / 2);  BigInteger x=sig.r.add(i.multiply(n));  BigInteger prime=SecP256K1Curve.q;  if (x.compareTo(prime) >= 0) {    return null;  }  ECPoint R=decompressKey(x,(recId & 1) == 1);  if (!R.multiply(n).isInfinity())   return null;  BigInteger e=new BigInteger(1,message);  BigInteger eInv=BigInteger.ZERO.subtract(e).mod(n);  BigInteger rInv=sig.r.modInverse(n);  BigInteger srInv=rInv.multiply(sig.s).mod(n);  BigInteger eInvrInv=rInv.multiply(eInv).mod(n);  ECPoint q=ECAlgorithms.sumOfTwoMultiplies(CURVE.getG(),eInvrInv,R,srInv);  byte[] qBytes=q.getEncoded(false);  return new BigInteger(1,Arrays.copyOfRange(qBytes,1,qBytes.length));}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<Number>> median(String varName){  return new MedianAggregate(varName);}  }
class C{  public TIntHash(TIntHashingStrategy strategy){  super();  this._hashingStrategy=strategy;}  }
class C{  private void lengthOfRequestEntity(ContainerRequestContext request) throws IOException {  if (request.getLength() == -1 && request.hasEntity()) {    InputStream istream=request.getEntityStream();    if (!istream.markSupported()) {      istream=new BufferedInputStream(istream);    }    istream.mark(MAX_ENTITY_SIZE + 1);    byte[] entity=new byte[MAX_ENTITY_SIZE + 1];    int entitySize=istream.read(entity);    if (entitySize > MAX_ENTITY_SIZE) {      request.setProperty(PROPERTY_REQ_LEN,-1);    } else {      request.setProperty(PROPERTY_REQ_LEN,entitySize);    }    istream.reset();    request.setEntityStream(istream);  } else {    request.setProperty(PROPERTY_REQ_LEN,request.getLength());  }}  }
class C{  public synchronized AggregateTable addAggregates(String group){  return addAggregates(group,VisualItem.SCHEMA);}  }
class C{  public static List<String> synthesizerClasses(){  return getList("synthesizers.classes.list");}  }
class C{  private boolean _removeActivity(Activity a){  boolean r;synchronized (this) {    r=m_activities.remove(a);    if (r) {      if (m_activities.size() == 0) {        m_nextTime=Long.MAX_VALUE;      }    }  }  if (r) {    a.setScheduled(false);  }  return r;}  }
class C{  public XQName(String prefix,String localpart,String rawname,String uri){  setValues(prefix,localpart,rawname,uri);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_GIVEUP_WHEN_DELETE_QUEST_ITEM_IMPOSSIBLE(String value0){  return new SM_SYSTEM_MESSAGE(1300604,value0);}  }
class C{  @Override public void delete() throws IOException {  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    ledgerHandler.deleteLog();  }  finally {    Utils.closeQuietly(ledgerHandler);  }  String zkPath=getZKPath();  if (zkPath.toLowerCase().contains("distributedlog")) {    try {      LOG.info("Delete the path associated with the log {}, ZK Path {}",name,zkPath);      ZKUtil.deleteRecursive(writerZKC.get(),zkPath);    } catch (    InterruptedException ie) {      LOG.error("Interrupted while accessing ZK",ie);      throw new DLInterruptedException("Error initializing zk",ie);    }catch (    KeeperException ke) {      LOG.error("Error accessing entry in zookeeper",ke);      throw new IOException("Error initializing zk",ke);    }  } else {    LOG.warn("Skip deletion of unrecognized ZK Path {}",zkPath);  }}  }
class C{  @Override public boolean equals(Object other){  return this == other || (other instanceof Author && hashCode() == other.hashCode());}  }
class C{  public SwaggerToService(ImmutableMap<String,String> swaggerFilePathToContentMap,String serviceName,String typeNamespace,String methodNamespace,ImmutableMap<String,String> additionalConfigs) throws SwaggerConversionException {  Preconditions.checkState(swaggerFilePathToContentMap != null && !swaggerFilePathToContentMap.isEmpty(),"swaggerFilePathToContentMap cannot be null or empty");  ImmutableList<String> savedFilePaths=saveFilesOnDisk(swaggerFilePathToContentMap);  String swaggerFilePath=validateInputFiles(savedFilePaths);  Swagger swaggerObject=new SwaggerParser().read(swaggerFilePath);  if (swaggerObject == null) {    throw new SwaggerConversionException("Swagger spec is ill formed and cannot be parsed");  }  this.swaggerFileName=(new File(swaggerFilePath)).getName();  swaggerFileLocation=new SimpleLocation(swaggerFileName);  this.swagger=swaggerObject;  this.serviceName=serviceName == null ? "" : serviceName.trim();  typeNamespace=typeNamespace == null ? "" : typeNamespace.trim();  this.methodNamespace=methodNamespace == null ? "" : methodNamespace.trim();  if (typeNamespace.endsWith(".")) {    typeNamespace=typeNamespace.substring(0,typeNamespace.length() - 1);  }  this.additionalConfigs=additionalConfigs;  this.duplicateOperationIdLookup=Maps.newLinkedHashMap();  typeBuilder=new TypeBuilder(swagger,typeNamespace);  methodBuilder=new MethodBuilder(this,typeBuilder);  httpRuleBuilder=new HttpRuleBuilder(methodNamespace,this.swagger.getBasePath(),this);  authBuilder=new AuthBuilder(methodNamespace,this);  serviceBuilder=Service.newBuilder();}  }
class C{  public Set<Value> mayAliases(Value v,Unit u){  Set<Value> res=new HashSet<Value>();  Set<Set<Value>> flow=getFlowBefore(u);  for (  Set<Value> set : flow) {    if (set.contains(v))     res.addAll(set);  }  return res;}  }
class C{  public int available(){  return _count - _position;}  }
class C{  public List<RawResultIterator> processTableBlocks() throws QueryExecutionException {  List<RawResultIterator> resultList=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<TableBlockInfo> list=null;  queryModel=prepareQueryModel(list);  for (  Map.Entry<String,TaskBlockInfo> taskMap : segmentMapping.entrySet()) {    String segmentId=taskMap.getKey();    List<DataFileFooter> listMetadata=dataFileMetadataSegMapping.get(segmentId);    int[] colCardinality=listMetadata.get(0).getSegmentInfo().getColumnCardinality();    SegmentProperties sourceSegProperties=new SegmentProperties(listMetadata.get(0).getColumnInTable(),colCardinality);    TaskBlockInfo taskBlockInfo=taskMap.getValue();    Set<String> taskBlockListMapping=taskBlockInfo.getTaskSet();    for (    String task : taskBlockListMapping) {      list=taskBlockInfo.getTableBlockInfoList(task);      Collections.sort(list);      LOGGER.info("for task -" + task + "-block size is -"+ list.size());      queryModel.setTableBlockInfos(list);      resultList.add(new RawResultIterator(executeBlockList(list),sourceSegProperties,destinationSegProperties));    }  }  return resultList;}  }
class C{  public AdsGetSuggestionsQueryWithSchools cities(String value){  return unsafeParam("cities",value);}  }
class C{  public Builder dragging(Boolean dragging){  this.dragging=dragging;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300396,value0);}  }
class C{  public static Zdiagmat o(Zdiagmat D1,Zdiagmat D2) throws JampackException {  if (D1.order != D2.order) {    throw new JampackException("Matrices not conformable for subtraction");  }  Zdiagmat C=new Zdiagmat(D1);  for (int i=0; i < D1.order; i++) {    C.re[i]=C.re[i] - D2.re[i];    C.im[i]=C.im[i] - D2.im[i];  }  return C;}  }
class C{  public void writeToFile() throws JAXBException {  if (mergedItt == null) {    System.out.println("Resulting iTT is empty. No data to write.");    return;  }  Marshaller jaxbMarshaller=TtmlUtils.createTtmlJaxbContext().createMarshaller();  jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  jaxbMarshaller.marshal(new ObjectFactory().createTt(mergedItt),outputFile);}  }
class C{  void autocomplete(Json json){  queryExecutor.submit(null);}  }
class C{  public static StatisticLevel toLevel(String sArg,Level defaultLevel){  return STATISTIC;}  }
class C{  private void validateUpdateColumns() throws SQLException {  for (  UpdateColumn column : _updatedColumns) {    column.createColumnData(this);    if (column.isSelfIncremented())     column.validateSelfIncrementedColumnName(this);  }}  }
class C{  public static boolean isSignedInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Integer.parseInt(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HIS_PARTY_LEAVE_ALLIANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300199,value0);}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,String parentProductId,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  Delegator delegator=cart.getDelegator();  GenericValue product=findProduct(delegator,skipProductChecks.booleanValue(),prodCatalogId,productId,cart.getLocale());  GenericValue parentProduct=null;  if (parentProductId != null) {    try {      parentProduct=EntityQuery.use(delegator).from("Product").where("productId",parentProductId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);    }  }  return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public TapTarget icon(Drawable icon){  return icon(icon,false);}  }
class C{  public static void writeNullablePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){  if (objects != null) {    output.writeInt(objects.length);    for (    Object entry : objects)     writeNullablePbsEntryPacket(output,(PbsEntryPacket)entry);  } else   output.writeInt(-1);}  }
class C{  public static <T extends RealFieldElement<T>>T min(final T e1,final T e2){  return e1.subtract(e2).getReal() >= 0 ? e2 : e1;}  }
class C{  public static <T>Type<T> resolveValueOf(final ParameterizedType type,final Type<?> referenceType){  if (type == null) {    return null;  } else {    java.lang.reflect.Type[] actualTypeArguments=TypeUtil.resolveActualTypeArguments(type,referenceType);    Type<T> result=intern((Class<T>)type.getRawType(),actualTypeArguments,new HashSet<java.lang.reflect.Type>());    return result;  }}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public DuringExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public static void moveToNewPage(Document document){  document.newPage();}  }
class C{  public void minLocal(Vector3f other){  x=other.x < x ? other.x : x;  y=other.y < y ? other.y : y;  z=other.z < z ? other.z : z;}  }
class C{  public boolean isLoading(){  return state == State.LOADING;}  }
class C{  public AppsGetCatalogQuery sort(AppsGetCatalogSort value){  return unsafeParam("sort",value);}  }
class C{  @Provides @Singleton @PartitionAwareClient QueueServiceAuthenticator provideQueueClient(QueueService queueService,Client jerseyClient,@SelfHostAndPort HostAndPort self,@Global CuratorFramework curator,MetricRegistry metricRegistry,HealthCheckRegistry healthCheckRegistry){  MultiThreadedServiceFactory<AuthQueueService> serviceFactory=new PartitionAwareServiceFactory<>(QueueClientFactory.forClusterAndHttpClient(_configuration.getCluster(),jerseyClient),new TrustedQueueService(queueService),self,healthCheckRegistry);  AuthQueueService client=ServicePoolBuilder.create(AuthQueueService.class).withHostDiscovery(new ZooKeeperHostDiscovery(curator,serviceFactory.getServiceName(),metricRegistry)).withServiceFactory(serviceFactory).withMetricRegistry(metricRegistry).withCachingPolicy(ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()).buildProxy(new ExponentialBackoffRetry(5,50,1000,TimeUnit.MILLISECONDS));  _environment.lifecycle().manage(new ManagedServicePoolProxy(client));  return QueueServiceAuthenticator.proxied(client);}  }
class C{  @Override @PostConstruct public void init() throws IDBPersistenceException {  super.init();}  }
class C{  public void normalize(){  normalizeTo(1.0);}  }
class C{  public FriendsGetSuggestionsQuery filter(FriendsGetSuggestionsFilter... value){  return unsafeParam("filter",value);}  }
class C{  @Persist @SuppressWarnings("unused") private void prepare(){  isValid=isValid();}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.lib_main);  Lib.handleTextView(this);}  }
class C{  private static void ldlFactorization(double[][] mywuw){  for (int t=0; t < mywuw.length; t++) {    for (int i=1; (i < WIDTH) && (t - i >= 0); i++)     mywuw[t][0]-=mywuw[t - i][i] * mywuw[t - i][i] * mywuw[t - i][0];    for (int i=2; i <= WIDTH; i++) {      for (int j=1; (i + j <= WIDTH) && (t - j >= 0); j++)       mywuw[t][i - 1]-=mywuw[t - j][j] * mywuw[t - j][i + j - 1] * mywuw[t - j][0];      mywuw[t][i - 1]/=mywuw[t][0];    }  }}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public static Flag evaluateByCharacter(final char flag){  Check.notNegative(flag,"flag");  Flag result=null;  for (  final Flag value : values()) {    if (value.getCharacter() == flag) {      result=value;      break;    }  }  return result;}  }
class C{  public void addNewField(){  int index=valueMap.size();  Name name=new NameImpl(String.format("%s_%d",DEFAULT_NEW_FIELD_NAME,index));  Class<?> fieldType=DEFAULT_NEW_FIELD_TYPE;  Object value=CreateSampleData.getFieldTypeValue(index,name,fieldType);  DataSourceAttributeData newField=new DataSourceAttributeData(name,fieldType,value);  valueList.add(newField);  valueMap.put(newField.getName().getLocalPart(),newField);}  }
class C{  private boolean evaluateValidationCheck(MapMap<Integer,DataElementOperand,Double> currentValueMapMap,MapMap<Integer,DataElementOperand,Date> lastUpdatedMapMap,ValidationRule rule){  boolean evaluate=true;  if (ValidationRunType.SCHEDULED == context.getRunType()) {    if (context.getLastScheduledRun() != null) {      if (rule.getLastUpdated().before(context.getLastScheduledRun())) {        Collection<DataElementOperand> deos=expressionService.getOperandsInExpression(rule.getLeftSide().getExpression());        evaluate=false;        for (        Map.Entry<Integer,Map<DataElementOperand,Date>> entry : lastUpdatedMapMap.entrySet()) {          boolean saveThisCombo=false;          for (          DataElementOperand deo : deos) {            Date lastUpdated=entry.getValue().get(deo);            if (lastUpdated != null && lastUpdated.after(context.getLastScheduledRun())) {              saveThisCombo=true;              evaluate=true;              break;            }          }          if (!saveThisCombo) {            currentValueMapMap.remove(entry.getKey());          }        }      }    }  }  return evaluate;}  }
class C{  private void initInjector(){  appComponent=DaggerAppComponent.builder().networkModule(new NetworkModule(this)).dataModule(new DataModule(this)).build();}  }
class C{  public boolean removeStyleKey(String styleKey){  return styleKeys.remove(styleKey);}  }
class C{  public static <T extends IdentifiableObject>List<T> removeDuplicates(List<T> list){  final List<T> temp=new ArrayList<>(list);  list.clear();  for (  T object : temp) {    if (!list.contains(object)) {      list.add(object);    }  }  return list;}  }
class C{  public static <T>T convert(Object source,TypeReference<T> destType){  return JSON.convertValue(source,destType);}  }
class C{  @Override public void onAction(Object actionData){  mSnackbarManager.dismissSnackbars(this);  mTab.reloadDisableLoFi();  DataReductionProxySettings.getInstance().incrementLoFiUserRequestsForImages();  DataReductionProxyUma.dataReductionProxyLoFiUIAction(DataReductionProxyUma.ACTION_LOAD_IMAGES_SNACKBAR_CLICKED);}  }
class C{  public void createLegion(Player activePlayer,String legionName){  if (legionRestrictions.canCreateLegion(activePlayer,legionName)) {    Legion legion=new Legion(IDFactory.getInstance().nextId(),legionName);    legion.addLegionMember(activePlayer.getObjectId());    activePlayer.getInventory().decreaseKinah(LegionConfig.LEGION_CREATE_REQUIRED_KINAH);    storeLegion(legion,true);    Timestamp currentTime=new Timestamp(System.currentTimeMillis());    storeNewAnnouncement(legion.getLegionId(),currentTime,"");    legion.addAnnouncementToList(currentTime,"");    addLegionMember(legion,activePlayer,LegionRank.BRIGADE_GENERAL);    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x05,(int)(System.currentTimeMillis() / 1000),""));    addHistory(legion,"",LegionHistoryType.CREATE);    addHistory(legion,activePlayer.getName(),LegionHistoryType.JOIN);    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATED(legion.getLegionName()));  }}  }
class C{  public void addToImplicitBreaks(DAbruptStmt ab,DavaFlowSet<T> set){  if (!checkImplicit(ab))   throw new RuntimeException("Tried to add explicit break statement in the implicit list in");  if (!ab.is_Break())   throw new RuntimeException("Tried to add continue statement in the break list in DavaFlowSet.addToImplicitBreaks");  ASTNode node=ClosestAbruptTargetFinder.v().getTarget(ab);  List<DavaFlowSet<T>> listSets=implicitBreaks.get(node);  if (listSets == null)   listSets=new ArrayList<DavaFlowSet<T>>();  implicitBreaks.put(node,addIfNotDuplicate(listSets,set));}  }
class C{  public void remove(String key,String value){  if (key == null) {    throw new NullPointerException("key");  }  if (value == null) {    throw new NullPointerException("value");  }synchronized (contexts) {    contexts.removeIf(null);  }}  }
class C{  public String toString(){  StringBuffer fullToken=new StringBuffer();  if (whitespace != null) {    fullToken.append(whitespace);  }  if (prepunctuation != null) {    fullToken.append(prepunctuation);  }  if (token != null) {    fullToken.append(token);  }  if (postpunctuation != null) {    fullToken.append(postpunctuation);  }  return fullToken.toString();}  }
class C{  public static Map createAddressMap(InetSocketAddress address){  Map map=new HashMap();  map.put(PORT,(long)address.getPort());  map.put(ADDRESS,address.getAddress().getHostAddress());  return map;}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.ignorableWhitespace(text,augs);  }}  }
class C{  public PullEvent(Object source,Collection pulled){  super(source);  this.pulled=pulled;}  }
class C{  @Override public synchronized void removeSnapShotCallback(){  if (this.snapshotObserver != null) {    snapshotObserver.onCompleted();    snapshotCallback=null;    snapshotObserver=null;  }}  }
class C{  public String post(Context context,String url,RequestParams params) throws HttpException {  return post(context,url,paramsToEntity(params),null);}  }
class C{  public Gpos(PartOfSpeech pos){  this.pos=pos;}  }
class C{  private boolean validateEquippedArmor(Item item,boolean validateOnly){  ArmorType armorType=item.getItemTemplate().getArmorType();  if (armorType == null) {    return true;  }  if (armorType == ArmorType.ARROW) {    return false;  }  int[] requiredSkills=armorType.getRequiredSkills();  if (!checkAvailableEquipSkills(requiredSkills)) {    return false;  }  ItemSlot slotToCheck1=ItemSlot.MAIN_HAND;  ItemSlot slotToCheck2=ItemSlot.SUB_HAND;  if ((item.getEquipmentSlot() & ItemSlot.MAIN_OFF_OR_SUB_OFF.getSlotIdMask()) != 0) {    slotToCheck1=ItemSlot.MAIN_OFF_HAND;    slotToCheck2=ItemSlot.SUB_OFF_HAND;  }  Item itemInMainHand=equipment.get(slotToCheck1.getSlotIdMask());  if (itemInMainHand != null && armorType == ArmorType.SHIELD && itemInMainHand.getItemTemplate().isTwoHandWeapon()) {    if (validateOnly) {      if (owner.getInventory().isFull()) {        return false;      }      markedFreeSlots.add(slotToCheck1.getSlotIdMask());      markedFreeSlots.add(slotToCheck2.getSlotIdMask());    } else {      unEquip(slotToCheck1.getSlotIdMask() | slotToCheck2.getSlotIdMask());    }  }  return true;}  }
class C{  private void logPose(TangoPoseData pose){  StringBuilder stringBuilder=new StringBuilder();  float translation[]=pose.getTranslationAsFloats();  float orientation[]=pose.getRotationAsFloats();  stringBuilder.append(String.format("[%+3.3f,%+3.3f,%+3.3f]\n",translation[0],translation[1],translation[2]));  stringBuilder.append(String.format("(%+3.3f,%+3.3f,%+3.3f,%+3.3f)",orientation[0],orientation[1],orientation[2],orientation[3]));  log.call(stringBuilder.toString());}  }
class C{  private Map<String,Object> createFireEventParam(MotionEvent motionEvent,int pos){  JSONArray jsonArray=new JSONArray(motionEvent.getPointerCount());  if (motionEvent.getActionMasked() == MotionEvent.ACTION_MOVE) {    for (int i=0; i < motionEvent.getPointerCount(); i++) {      jsonArray.add(createJSONObject(motionEvent,pos,i));    }  } else   if (isPointerNumChanged(motionEvent)) {    int pointerIndex=motionEvent.getActionIndex();    jsonArray.add(createJSONObject(motionEvent,CUR_EVENT,pointerIndex));  }  Map<String,Object> map=new HashMap<>();  map.put(GestureInfo.HISTORICAL_XY,jsonArray);  return map;}  }
class C{  public Stream<Entry<Tags,MetricValue>> streamAsMap(Set<Tags> dfl){  return values_.mapCombine(null,null);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return new String(decrypt(civ,secretKeys),encoding);}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public int readInt() throws IOException {  return dis.readInt();}  }
class C{  protected void process(double[] real,double[] imag){}  }
class C{  public boolean isAggregation(){  return !(AggregationType.NONE.equals(aggregationType) || DataType.TEXT.equals(dataType));}  }
class C{  public S1Interval union(final S1Interval y){  if (y.isEmpty()) {    return this;  }  if (fastContains(y.lo())) {    if (fastContains(y.hi())) {      if (contains(y)) {        return this;      }      return full();    }    return new S1Interval(lo(),y.hi(),true);  }  if (fastContains(y.hi())) {    return new S1Interval(y.lo(),hi(),true);  }  if (isEmpty() || y.fastContains(lo())) {    return y;  }  double dlo=positiveDistance(y.hi(),lo());  double dhi=positiveDistance(hi(),y.lo());  if (dlo < dhi) {    return new S1Interval(y.lo(),hi(),true);  } else {    return new S1Interval(lo(),y.hi(),true);  }}  }
class C{  public void upload(String fileName,InputStream inputStream,long restartAt,long streamOffset,FTPDataTransferListener listener) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    int tp=type;    if (tp == TYPE_AUTO) {      tp=detectType(fileName);    }    if (tp == TYPE_TEXTUAL) {      communication.sendFTPCommand("TYPE A");    } else     if (tp == TYPE_BINARY) {      communication.sendFTPCommand("TYPE I");    }    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    FTPDataTransferConnectionProvider provider=openDataTransferChannel();    if (restSupported || restartAt > 0) {      boolean done=false;      try {        communication.sendFTPCommand("REST " + restartAt);        r=communication.readFTPReply();        touchAutoNoopTimer();        if (r.getCode() != 350 && ((r.getCode() != 501 && r.getCode() != 502) || restartAt > 0)) {          throw new FTPException(r);        }        done=true;      }  finally {        if (!done) {          provider.dispose();        }      }    }    boolean wasAborted=false;    communication.sendFTPCommand("STOR " + fileName);    try {      Socket dtConnection;      try {        dtConnection=provider.openDataTransferConnection();      }  finally {        provider.dispose();      }synchronized (abortLock) {        ongoingDataTransfer=true;        aborted=false;        consumeAborCommandReply=false;      }      try {        inputStream.skip(streamOffset);        dataTransferOutputStream=dtConnection.getOutputStream();        if (modezEnabled) {          dataTransferOutputStream=new DeflaterOutputStream(dataTransferOutputStream);        }        if (listener != null) {          listener.started();        }        if (tp == TYPE_TEXTUAL) {          Reader reader=new InputStreamReader(inputStream);          Writer writer=new OutputStreamWriter(dataTransferOutputStream,pickCharset());          char[] buffer=new char[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=reader.read(buffer)) != -1) {            writer.write(buffer,0,l);            writer.flush();            if (listener != null) {              listener.transferred(l);            }          }        } else         if (tp == TYPE_BINARY) {          byte[] buffer=new byte[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=inputStream.read(buffer)) != -1) {            dataTransferOutputStream.write(buffer,0,l);            dataTransferOutputStream.flush();            if (listener != null) {              listener.transferred(l);            }          }        }      } catch (      IOException e) {synchronized (abortLock) {          if (aborted) {            if (listener != null) {              listener.aborted();            }            throw new FTPAbortedException();          } else {            if (listener != null) {              listener.failed();            }            throw new FTPDataTransferException("I/O error in data transfer",e);          }        }      } finally {        if (dataTransferOutputStream != null) {          try {            dataTransferOutputStream.close();          } catch (          Throwable t) {            ;          }        }        try {          dtConnection.close();        } catch (        Throwable t) {          ;        }        dataTransferOutputStream=null;synchronized (abortLock) {          wasAborted=aborted;          ongoingDataTransfer=false;          aborted=false;        }      }    }  finally {      r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.getCode() != 150 && r.getCode() != 125) {        throw new FTPException(r);      }      r=communication.readFTPReply();      if (!wasAborted && r.getCode() != 226) {        throw new FTPException(r);      }      if (consumeAborCommandReply) {        communication.readFTPReply();        consumeAborCommandReply=false;      }    }    if (listener != null) {      listener.completed();    }  }}  }
class C{  public boolean isActive(){  return _active;}  }
class C{  public static long[] calculateDifference(long differentMilliSeconds){  long secondsInMilli=1000;  long minutesInMilli=secondsInMilli * 60;  long hoursInMilli=minutesInMilli * 60;  long daysInMilli=hoursInMilli * 24;  long elapsedDays=differentMilliSeconds / daysInMilli;  differentMilliSeconds=differentMilliSeconds % daysInMilli;  long elapsedHours=differentMilliSeconds / hoursInMilli;  differentMilliSeconds=differentMilliSeconds % hoursInMilli;  long elapsedMinutes=differentMilliSeconds / minutesInMilli;  differentMilliSeconds=differentMilliSeconds % minutesInMilli;  long elapsedSeconds=differentMilliSeconds / secondsInMilli;  LogUtils.debug(String.format("different: %d ms, %d days, %d hours, %d minutes, %d seconds",differentMilliSeconds,elapsedDays,elapsedHours,elapsedMinutes,elapsedSeconds));  return new long[]{elapsedDays,elapsedHours,elapsedMinutes,elapsedSeconds};}  }
class C{  public static String createReplacementOrder(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");  Map<String,Object> context=cart.makeCartMap(dispatcher,false);  String originalOrderId=request.getParameter("orderId");  List<GenericValue> orderAdjustments=UtilGenerics.checkList(context.get("orderAdjustments"));  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));  OrderReadHelper orderReadHelper=new OrderReadHelper(orderAdjustments,orderItems);  BigDecimal grandTotal=orderReadHelper.getOrderGrandTotal();  if (grandTotal.compareTo(new BigDecimal(0)) != 0) {    GenericValue adjustment=delegator.makeValue("OrderAdjustment");    adjustment.set("orderAdjustmentTypeId","REPLACE_ADJUSTMENT");    adjustment.set("amount",grandTotal.negate());    adjustment.set("comments","ReShip Order for Order #" + originalOrderId);    adjustment.set("createdDate",UtilDateTime.nowTimestamp());    adjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));    cart.addAdjustment(adjustment);  }  List<ShoppingCartItem> cartLines=cart.items();  for (  ShoppingCartItem sci : cartLines) {    int index=cart.getItemIndex(sci);    try {      GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",originalOrderId,"isPromo",sci.getIsPromo() ? "Y" : "N","productId",sci.getProductId(),"orderItemTypeId",sci.getItemType()).queryFirst();      if (UtilValidate.isNotEmpty(orderItem)) {        sci.setAssociatedOrderId(orderItem.getString("orderId"));        sci.setAssociatedOrderItemSeqId(orderItem.getString("orderItemSeqId"));        sci.setOrderItemAssocTypeId("REPLACEMENT");        cart.addItem(index,sci);      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }catch (    CartItemModifyException e) {      Debug.logError(e.getMessage(),module);    }  }  String result=createOrder(request,response);  if ("error".equals(result)) {    return "error";  } else {    return "success";  }}  }
class C{  public KolmogorovSmirnovTest(){  super();}  }
class C{  private void handleMultiInstanceReportResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.trace("Process Multi-instance Report");  int commandClassCode=serialMessage.getMessagePayloadByte(offset);  int instances=serialMessage.getMessagePayloadByte(offset + 1);  CommandClass commandClass=CommandClass.getCommandClass(commandClassCode);  if (commandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class 0x%02x",getNode().getNodeId(),commandClassCode));    return;  }  logger.debug("NODE {}: Requested Command Class = {}",getNode().getNodeId(),commandClass.getLabel());  ZWaveCommandClass zwaveCommandClass=getNode().getCommandClass(commandClass);  if (zwaveCommandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClassCode));    return;  }  if (instances == 0) {    logger.debug("NODE {}: Instances = 0. Setting to 1.",getNode().getNodeId());    instances=1;  }  zwaveCommandClass.setInstances(instances);  logger.debug("NODE {}: Command class {}, has {} instance(s).",getNode().getNodeId(),commandClass.getLabel(),instances);}  }
class C{  public FormField withHint(String hint){  this.mFieldInput.setHint(hint);  return this;}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public static void show(Context context,int resId){  show(context,resId,LENGTH_SHORT);}  }
class C{  public static String formatQuantity(Float quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  @Override public int read() throws IOException {  if (this.remaining == 0) {    return -1;  } else {    int var1=this.in.read();    if (var1 >= 0) {      --this.remaining;    }    return var1;  }}  }
class C{  public TapTarget titleTextColor(@ColorRes int color){  this.titleTextColor=color;  return this;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  @Override public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private static InvocationConstraint reduce(InvocationConstraint[] constraints,boolean allAbs){  verify(constraints,1);  int n=reduce0(constraints);  if (n == 1) {    return constraints[0];  }  return new ConstraintAlternatives((InvocationConstraint[])Constraint.trim(constraints,n),allAbs);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  resetData();}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  protected void onCreate(ActivitiEvent event){}  }
class C{  public static byte[] asByteArray(UUID uuid){  long msb=uuid.getMostSignificantBits();  long lsb=uuid.getLeastSignificantBits();  byte[] buf=new byte[16];  for (int i=0; i < 8; i++) {    buf[i]=(byte)(msb >>> 8 * (7 - i));    buf[i + 8]=(byte)(lsb >>> 8 * (7 - i));  }  return buf;}  }
class C{  public void saveWaveAsFile(String filename){  WaveHeader waveHeader=wave.getWaveHeader();  int byteRate=waveHeader.getByteRate();  int audioFormat=waveHeader.getAudioFormat();  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  long chunkSize=waveHeader.getChunkSize();  long subChunk1Size=waveHeader.getSubChunk1Size();  long subChunk2Size=waveHeader.getSubChunk2Size();  int blockAlign=waveHeader.getBlockAlign();  try {    FileOutputStream fos=new FileOutputStream(filename);    fos.write(WaveHeader.RIFF_HEADER.getBytes());    fos.write(new byte[]{(byte)(chunkSize),(byte)(chunkSize >> 8),(byte)(chunkSize >> 16),(byte)(chunkSize >> 24)});    fos.write(WaveHeader.WAVE_HEADER.getBytes());    fos.write(WaveHeader.FMT_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk1Size),(byte)(subChunk1Size >> 8),(byte)(subChunk1Size >> 16),(byte)(subChunk1Size >> 24)});    fos.write(new byte[]{(byte)(audioFormat),(byte)(audioFormat >> 8)});    fos.write(new byte[]{(byte)(channels),(byte)(channels >> 8)});    fos.write(new byte[]{(byte)(sampleRate),(byte)(sampleRate >> 8),(byte)(sampleRate >> 16),(byte)(sampleRate >> 24)});    fos.write(new byte[]{(byte)(byteRate),(byte)(byteRate >> 8),(byte)(byteRate >> 16),(byte)(byteRate >> 24)});    fos.write(new byte[]{(byte)(blockAlign),(byte)(blockAlign >> 8)});    fos.write(new byte[]{(byte)(bitsPerSample),(byte)(bitsPerSample >> 8)});    fos.write(WaveHeader.DATA_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk2Size),(byte)(subChunk2Size >> 8),(byte)(subChunk2Size >> 16),(byte)(subChunk2Size >> 24)});    fos.write(wave.getBytes());    fos.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public PointsToSet reachingObjects(SootField f){  if (!f.isStatic())   throw new RuntimeException("The parameter f must be a *static* field.");  VarNode n=findGlobalVarNode(f);  if (n == null) {    return EmptyPointsToSet.v();  }  return n.getP2Set();}  }
class C{  public JavaClipAudioPlayer(){  debug=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.debug");  drainDelay=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.drainDelay",150L).longValue();  openFailDelayMs=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.openFailDelayMs",0).longValue();  totalOpenFailDelayMs=Utilities.getLong("com.sun.speech.freetts.audio.AudioPlayer.totalOpenFailDelayMs",0).longValue();  audioMetrics=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.showAudioMetrics");  setPaused(false);}  }
class C{  public static int sp2px(Context context,float spValue){  return (int)(spValue * getFontDensity(context) + 0.5);}  }
class C{  public int size(){  if (this.nodes == null) {    this.nodes=this.dfs(this.root);  }  return this.nodes.size();}  }
class C{  public void init() throws RecurrenceRuleException {  String freq=rule.getString("frequency");  if (!checkFreq(freq))   throw new RecurrenceRuleException("Recurrence FREQUENCY is a required parameter.");  if (rule.getLong("intervalNumber").longValue() < 1)   throw new RecurrenceRuleException("Recurrence INTERVAL must be a positive integer.");  bySecondList=StringUtil.split(rule.getString("bySecondList"),",");  byMinuteList=StringUtil.split(rule.getString("byMinuteList"),",");  byHourList=StringUtil.split(rule.getString("byHourList"),",");  byDayList=StringUtil.split(rule.getString("byDayList"),",");  byMonthDayList=StringUtil.split(rule.getString("byMonthDayList"),",");  byYearDayList=StringUtil.split(rule.getString("byYearDayList"),",");  byWeekNoList=StringUtil.split(rule.getString("byWeekNoList"),",");  byMonthList=StringUtil.split(rule.getString("byMonthList"),",");  bySetPosList=StringUtil.split(rule.getString("bySetPosList"),",");}  }
class C{  public final static String formatHeader(final Header header,LineFormatter formatter){  if (formatter == null)   formatter=SaveLineFormatter.DEFAULT;  return formatter.formatHeader(null,header).toString();}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public GroupsGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static double[] arrayResize(double[] source,int targetSize){  if (source.length == targetSize) {    return source;  }  int sourceSize=source.length;  double fraction=(double)source.length / (double)targetSize;  double[] newSignal=new double[targetSize];  for (int i=0; i < targetSize; i++) {    double posIdx=fraction * i;    int nVal=(int)Math.floor(posIdx);    double diffVal=posIdx - nVal;    if (nVal >= sourceSize - 1) {      newSignal[i]=source[sourceSize - 1];      continue;    }    double fVal=(diffVal * source[nVal + 1]) + ((1 - diffVal) * source[nVal]);    newSignal[i]=fVal;  }  return newSignal;}  }
class C{  public Expression greaterThan(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.GREATER_THAN);}  }
class C{  public void removeCycles(){  if (myHorizontalCycle != null) {    removeCycles(myHorizontalDeps);  }  if (myVerticalCycle != null) {    removeCycles(myVerticalDeps);  }}  }
class C{  public PhotosReorderPhotosQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public NormalizerAdapter(){}  }
class C{  LogSegmentMetadata completeAndCloseLogSegment(String inprogressZnodeName,long logSegmentSeqNo,long ledgerId,long firstTxId,long lastTxId,int recordCount,long lastEntryId,long lastSlotId) throws IOException {  Stopwatch stopwatch=Stopwatch.createStarted();  boolean success=false;  try {    LogSegmentMetadata completedLogSegment=doCompleteAndCloseLogSegment(inprogressZnodeName,logSegmentSeqNo,ledgerId,firstTxId,lastTxId,recordCount,lastEntryId,lastSlotId);    success=true;    return completedLogSegment;  }  finally {    if (success) {      closeOpStats.registerSuccessfulEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    } else {      closeOpStats.registerFailedEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    }  }}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  public String process(Item word) throws ProcessException {  return wordPunc(word);}  }
class C{  public static <T extends RealFieldElement<T>>T angle(final Vector3D v1,final FieldVector3D<T> v2) throws MathRuntimeException {  return angle(v2,v1);}  }
class C{  @Override public void addExhaustion(float exhaustion){  super.addExhaustion(exhaustion * EntityPlayerExt.getArmorExhaustionModifier(player));}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  public WidgetsGetPagesQuery(VkApiClient client){  super(client,"widgets.getPages",GetPagesResponse.class);}  }
class C{  protected MarketGetAlbumByIdQuery albumIds(int... value){  return unsafeParam("album_ids",value);}  }
class C{  public void sortRenderQueue(){  sort(ritems,rscores,rsize);}  }
class C{  private void createMessage(MailDetailsBean mDetails) throws MailSenderException {  message=new MimeMessage(session);  try {    message.setFrom(new InternetAddress(mDetails.getSender()));    message.setSubject(mDetails.getSubject());    message.setText(mDetails.getMessage());    for (int i=0; i < mDetails.getToRecipients().size(); i++) {      message.addRecipient(Message.RecipientType.TO,new InternetAddress((String)mDetails.getToRecipients().get(i)));    }    for (int i=0; i < mDetails.getCcRecipients().size(); i++) {      message.addRecipient(Message.RecipientType.CC,new InternetAddress((String)mDetails.getCcRecipients().get(i)));    }    for (int i=0; i < mDetails.getBccRecipients().size(); i++) {      message.addRecipient(Message.RecipientType.BCC,new InternetAddress((String)mDetails.getBccRecipients().get(i)));    }    LOG.debug("createMessage() - The email " + mDetails.getSubject() + " has being successfully composed ");  } catch (  AddressException e) {    throw new MailSenderException("One of the emails adrresses was not correctly formatted ");  }catch (  MessagingException e) {    throw new MailSenderException("An error ocurred while preparing the message to be sent ");  }}  }
class C{  private boolean checkDuelCondition(Effect effect){  Creature creature=effect.getEffector();  if (creature instanceof Player) {    if (!getOwner().isEnemy(creature) && effect.getTargetSlot() == SkillTargetSlot.DEBUFF.ordinal()) {      return true;    }  }  return false;}  }
class C{  @Override public Scan open(){  Scan s=p1.open();  TableScan ts=(TableScan)tp2.open();  Index idx=ii.open(tx);  return new IndexJoinScan(s,idx,joinField,ts);}  }
class C{  public final synchronized void sendPacket(AionServerPacket bp){  if (isWriteDisabled()) {    return;  }  log.debug("sending packet: " + bp);  sendMsgQueue.addLast(bp);  enableWriteInterest();}  }
class C{  public void init(String contextPath){  this.baseUrl=contextPath + "/api/apps";  if (contextPath != null && folderName != null && launchPath != null) {    launchUrl=baseUrl + "/" + folderName+ "/"+ launchPath;  }}  }
class C{  private void createAPIServerConnector(){  LOGGER.info("Creating APIServerConnector");  String userName=appProperties.getProperty("user-name");  String password=appProperties.getProperty("password");  String apiServerProtocol=appProperties.getProperty("api-server-protocol",Constants.DEFAULT_CONFIG_SERVER_PROTOCOL);  String apiServerName=appProperties.getProperty("api-server-name",Constants.DEFAULT_CONFIG_SERVER_NAME);  String apiVersionString=appProperties.getProperty("api-version-string",Constants.DEFAULT_CONFIG_API_VERSION_STRING);  String baseUri=apiServerProtocol + "://" + apiServerName;  String basePath="/api/" + apiVersionString + "/";  LOGGER.info("API base: " + baseUri + basePath);  apiServerConnector=new APIServerConnector(baseUri,basePath,userName,password);}  }
class C{  protected Map<String,String> process(Map<String,String> propertyMap){  Map<String,String> newPropertyMap=new LinkedHashMap<String,String>();  for (  String esriField : translationMap.keySet()) {    String value=propertyMap.get(esriField);    newPropertyMap.put(translationMap.get(esriField),value);  }  for (  String field : defaultsMap.keySet()) {    newPropertyMap.put(field,defaultsMap.get(field));  }  return newPropertyMap;}  }
class C{  private static boolean isJRE11(){  try {    Class c=Class.forName("java.security.AccessController");    return false;  } catch (  Exception ex) {  }  return true;}  }
class C{  public static boolean isEnableAppRestart(){  return enableAppRestart;}  }
class C{  private void subscribeRecord(){  for (  Subscription subscription : this.subscriptions) {    if (subscription.recordPathChangedCallback != null) {      this.record.subscribe(subscription.path,subscription.recordPathChangedCallback,true);    } else     if (subscription.recordChangedCallback != null) {      this.record.subscribe(subscription.recordChangedCallback,true);    }  }}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static void initAllResources(){  if (!isLoaded) {    databaseManager=new SQLdatabaseManager(applicationContext);    SettingsManager.getInstace().init();    Category.initPodcastsCatrgories();    SimpleCacheManager.getInstance().removeExpiredCache();    runMainService();    setAlarmManagerTasks();    isLoaded=true;  }}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  protected boolean validRowCheck(int row,boolean throwException){  if (isValidRow(row)) {    return true;  } else   if (throwException) {    throw new IllegalArgumentException("Invalid row value: " + row);  } else {    return false;  }}  }
class C{  public MessagesMarkAsReadQuery peerId(String value){  return unsafeParam("peer_id",value);}  }
class C{  public void initialize(int[] data){  if (data == null) {    throw new IllegalArgumentException(" Data Array is NUll");  }  this.data=data;}  }
class C{  @Override public String toString(){  return MoreObjects.toStringHelper(this).add("id",getId()).add("login",getLogin()).add("password","XXXX").add("email",getEmail()).add("isEnabled",getIsEnabled()).add("civility",getCivility()).add("firstName",getFirstName()).add("lastName",getLastName()).add("creationDate",getCreationDate()).add("creationAuthor",getCreationAuthor()).add("lastModificationDate",getLastModificationDate()).add("lastModificationAuthor",getLastModificationAuthor()).add("version",getVersion()).toString();}  }
class C{  public AemImage insert(Draggable element){  Droppable dropabble=factory.createDroppable(dropArea,framePath);  element.dropTo(dropabble);  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(DROP_AN_IMAGE_XPATH)));  return this;}  }
class C{  public void testContentWithSep() throws Exception {  deleteAllDocs();  try {    addDocument("{fields: {authors: ['Dr. Seuss', 'Bob \u001F Smith', 'Seuss is Fun']}}");    fail("didn't hit exception");  } catch (  IOException ioe) {  }}  }
class C{  public boolean hasNext() throws IOException {  return thriftReader.hasNext();}  }
class C{  @Override public Node removeChild(Node oldChild) throws DOMException {  super.removeChild(oldChild);  int type=oldChild.getNodeType();  if (type == Node.ELEMENT_NODE) {    docElement=null;  } else   if (type == Node.DOCUMENT_TYPE_NODE) {    docType=null;  }  return oldChild;}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.comment(text.ch,0,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public boolean hasDataRecords(){  long blkNum=(Long)getVal(OFFSET_TS_BLOCKID,BIGINT).asJavaVal();  return blkNum != NO_SLOT_BLOCKID ? true : false;}  }
class C{  public float[] generateTransformedValuesScatter(IScatterDataSet data,float phaseY){  float[] valuePoints=new float[data.getEntryCount() * 2];  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=data.getEntryForIndex(j / 2);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public CachedDocumentComparator(){  GraphImportance=0.5;}  }
class C{  public void diff_cleanupSemantic(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  int length_insertions1=0;  int length_deletions1=0;  int length_insertions2=0;  int length_deletions2=0;  Diff thisDiff=pointer.next();  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      equalities.push(thisDiff);      length_insertions1=length_insertions2;      length_deletions1=length_deletions2;      length_insertions2=0;      length_deletions2=0;      lastequality=thisDiff.text;    } else {      if (thisDiff.operation == Operation.INSERT) {        length_insertions2+=thisDiff.text.length();      } else {        length_deletions2+=thisDiff.text.length();      }      if (lastequality != null && (lastequality.length() <= Math.max(length_insertions1,length_deletions1)) && (lastequality.length() <= Math.max(length_insertions2,length_deletions2))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(new Diff(Operation.INSERT,lastequality));        equalities.pop();        if (!equalities.empty()) {          equalities.pop();        }        if (equalities.empty()) {          while (pointer.hasPrevious()) {            pointer.previous();          }        } else {          thisDiff=equalities.lastElement();          while (thisDiff != pointer.previous()) {          }        }        length_insertions1=0;        length_insertions2=0;        length_deletions1=0;        length_deletions2=0;        lastequality=null;        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }  diff_cleanupSemanticLossless(diffs);  pointer=diffs.listIterator();  Diff prevDiff=null;  thisDiff=null;  if (pointer.hasNext()) {    prevDiff=pointer.next();    if (pointer.hasNext()) {      thisDiff=pointer.next();    }  }  while (thisDiff != null) {    if (prevDiff.operation == Operation.DELETE && thisDiff.operation == Operation.INSERT) {      String deletion=prevDiff.text;      String insertion=thisDiff.text;      int overlap_length1=this.diff_commonOverlap(deletion,insertion);      int overlap_length2=this.diff_commonOverlap(insertion,deletion);      if (overlap_length1 >= overlap_length2) {        if (overlap_length1 >= deletion.length() / 2.0 || overlap_length1 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,insertion.substring(0,overlap_length1)));          prevDiff.text=deletion.substring(0,deletion.length() - overlap_length1);          thisDiff.text=insertion.substring(overlap_length1);        }      } else {        if (overlap_length2 >= deletion.length() / 2.0 || overlap_length2 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,deletion.substring(0,overlap_length2)));          prevDiff.operation=Operation.INSERT;          prevDiff.text=insertion.substring(0,insertion.length() - overlap_length2);          thisDiff.operation=Operation.DELETE;          thisDiff.text=deletion.substring(overlap_length2);        }      }      thisDiff=pointer.hasNext() ? pointer.next() : null;    }    prevDiff=thisDiff;    thisDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public boolean isTypeAllowed(@NotNull ResourceType type){  return isTypeAllowed(type.getName());}  }
class C{  final public void remove(String name){  if (context != null) {    context.remove(name);  }}  }
class C{  public DateColumn(Class type,int nrows,int capacity,long defaultValue){  super(type,TimeLib.getDate(type,defaultValue));  if (!Date.class.isAssignableFrom(type)) {    throw new IllegalArgumentException("Column type must be an " + "instance or subclass of java.util.Date.");  }  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new long[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public static Point size(InputStream in){  Point p=new Point();  try {    in=new BufferedInputStream(in);    in.mark(Integer.MAX_VALUE);    BufferedImage img=ImageIO.read(in);    if (img != null) {      p.y=img.getHeight();      p.x=img.getWidth();      in.reset();      Metadata metadata=JpegMetadataReader.readMetadata(in);      if (metadata != null && metadata.getDirectories() != null) {        Iterator<Directory> it=metadata.getDirectories().iterator();        while (it.hasNext()) {          Directory exif=it.next();          if (exif != null && exif.getTags() != null) {            Iterator<Tag> tags=exif.getTags().iterator();            while (tags.hasNext()) {              Tag tag=(Tag)tags.next();              if ("Orientation".equals(tag.getTagName())) {                String desc=tag.getDescription();                if (desc.indexOf("Rotate 90") > 0 || desc.indexOf("Rotate 270") > 0) {                  int x=p.x;                  p.x=p.y;                  p.y=x;                  return p;                }              }            }          }        }      }    }  } catch (  Exception e) {    log.error(e.getMessage(),e);    e.printStackTrace();  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }  return p;}  }
class C{  public Listener capture(){  capture(null);  return getListener();}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  RotationTransform(final Vector3D center,final Rotation rotation){  this.center=center;  this.rotation=rotation;}  }
class C{  private void processNormalFlow(PathEdge<N,D> edge){  final D d1=edge.factAtSource();  final N n=edge.getTarget();  final D d2=edge.factAtTarget();  EdgeFunction<V> f=jumpFunction(edge);  for (  N m : icfg.getSuccsOf(n)) {    FlowFunction<D> flowFunction=flowFunctions.getNormalFlowFunction(n,m);    flowFunctionConstructionCount++;    Set<D> res=computeNormalFlowFunction(flowFunction,d1,d2);    for (    D d3 : res) {      EdgeFunction<V> fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3));      propagate(d1,m,d3,fprime,null,false);    }  }}  }
class C{  public void close(){  if (f_reader != null) {    try {      f_reader.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public String toJson(Message message){  if (message == null)   throw new IllegalArgumentException("Message can not be null");  return gson.toJson(message);}  }
class C{  private static void addBuildExceptionAsMessage(@NotNull BuildException e,@NotNull String stdErr,@NotNull List<Message> buildMessages){  if (!stdErr.trim().isEmpty()) {    Message msg=new Message(Message.Kind.ERROR,stdErr,SourceFilePosition.UNKNOWN);    buildMessages.add(msg);  } else {    ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);    try {      e.printStackTrace(new PrintStream(out));      String message="Internal error:" + SystemProperties.getLineSeparator() + out.toString();      Message msg=new Message(Message.Kind.ERROR,message,SourceFilePosition.UNKNOWN);      buildMessages.add(msg);    }  finally {      try {        close(out,true);      } catch (      IOException ex) {      }    }  }}  }
class C{  void afterUnmarshal(Unmarshaller u,Object parent){  chestData.clear();  instancesMap.clear();  namedChests.clear();  for (  ChestTemplate chest : chests) {    chestData.put(chest.getNpcId(),chest);    if (chest.getName() != null && !chest.getName().isEmpty()) {      namedChests.put(chest.getName(),chest);    }  }}  }
class C{  public static int extractHighUnsignedNibble(int value){  return (value & 0xF0) >>> 4;}  }
class C{  private String placeBracketsAroundInsertionsInReadSequence(boolean dna2ProteinMode,String refSequence,String readSequence){  StringBuilder buf=new StringBuilder();  int readPos=0;  boolean inInsertion=false;  for (int i=0; i < refSequence.length() && readPos < readSequence.length(); i++) {    final boolean isInsertion=(refSequence.charAt(i) == '-' && readSequence.charAt(readPos) != '-');    if (!inInsertion && isInsertion) {      buf.append("[");      inInsertion=true;    }    if (inInsertion && !isInsertion) {      buf.append("]");      inInsertion=false;    }    if (dna2ProteinMode) {      buf.append(readSequence.charAt(readPos++));      buf.append(readSequence.charAt(readPos++));      buf.append(readSequence.charAt(readPos++));    } else     buf.append(readSequence.charAt(readPos++));  }  if (inInsertion) {    buf.append("]");  }  return buf.toString();}  }
class C{  public PhotosGetChatUploadServerQuery cropWidth(Integer value){  return unsafeParam("crop_width",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE(String value0,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1390002,value0,descriptionId);}  }
class C{  protected int index(long val){  int hash, probe, index, length;  final byte[] states=_states;  final long[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  public static AudioInputStream convertBit24ToBit16(AudioInputStream ais) throws Exception {  int bitsPerSample=24;  int targetBitsPerSample=16;  int noOfbitsPerSample=ais.getFormat().getSampleSizeInBits();  if (noOfbitsPerSample != bitsPerSample) {    throw new Exception("24-Bit Audio Data Expected. But given Audio Data is " + noOfbitsPerSample + "-Bit data");  }  if (ais.getFormat().getChannels() != 1) {    throw new Exception("Expected Audio type is Mono. But given Audio Data has " + ais.getFormat().getChannels() + " channels");  }  float samplingRate=ais.getFormat().getSampleRate();  int channels=ais.getFormat().getChannels();  int nBytes=ais.available();  boolean bigEndian=ais.getFormat().isBigEndian();  byte[] byteBuf=new byte[nBytes];  int nBytesRead=ais.read(byteBuf,0,nBytes);  int currentPos=0;  int noOfSamples=nBytes / 3;  int[] sample=new int[noOfSamples];  for (int i=0; i < nBytesRead; i+=3, currentPos++) {    byte lobyte;    byte midbyte;    byte hibyte;    if (!bigEndian) {      lobyte=byteBuf[i];      midbyte=byteBuf[i + 1];      hibyte=byteBuf[i + 2];    } else {      lobyte=byteBuf[i + 2];      midbyte=byteBuf[i + 1];      hibyte=byteBuf[i];    }    sample[currentPos]=hibyte << 16 | (midbyte & 0xFF) << 8 | lobyte & 0xFF;  }  int maxBitPos=0;  int valueAfterShift;  for (int i=0; i < sample.length; i++) {    for (int j=bitsPerSample; j >= 1; j--) {      valueAfterShift=Math.abs(sample[i]) >> j;      if (valueAfterShift != 0) {        if (maxBitPos < j)         maxBitPos=j;        break;      }    }  }  int shiftBits=maxBitPos - targetBitsPerSample + 2;  int sign;  for (int i=0; (shiftBits > 0 && i < sample.length); i++) {    if (sample[i] < 0)     sign=-1; else     sign=1;    sample[i]=sign * (Math.abs(sample[i]) >> shiftBits);  }  currentPos=0;  int nRead=sample.length;  byte[] b=new byte[2 * sample.length];  int MAX_AMPLITUDE=32767;  for (int i=0; i < nRead; i++, currentPos+=2) {    int samp=sample[i];    if (samp > MAX_AMPLITUDE || samp < -MAX_AMPLITUDE) {      System.err.println("Warning: signal amplitude out of range: " + samp);    }    byte hibyte=(byte)(samp >> 8);    byte lobyte=(byte)(samp & 0xFF);    if (!bigEndian) {      b[currentPos]=lobyte;      b[currentPos + 1]=hibyte;    } else {      b[currentPos]=hibyte;      b[currentPos + 1]=lobyte;    }  }  ByteArrayInputStream bais=new ByteArrayInputStream(b);  boolean signed=true;  AudioFormat af=new AudioFormat(samplingRate,targetBitsPerSample,channels,signed,bigEndian);  long lengthInSamples=b.length / (targetBitsPerSample / 8);  return new AudioInputStream(bais,af,lengthInSamples);}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public static void registerFuel(Block block,int duration){  registerFuel(new ItemStack(block,1,ItemStackDictionary.WILDCARD_METADATA),duration);}  }
class C{  @RequestMapping(value="/{id}",method=DELETE,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {  log.debug("Delete by id Book : {}",id);  try {    bookRepository.delete(id);    return ResponseEntity.ok().build();  } catch (  Exception x) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }}  }
class C{  @Override public ChangeLog readChangeLogFile() throws Exception {  ChangeLog chg=null;  try {    InputStream is=null;    if (mChangeLogFileResourceUrl != null) {      if (Util.isConnected(super.mContext)) {        URL url=new URL(mChangeLogFileResourceUrl);        is=url.openStream();      }    } else {      is=mContext.getResources().openRawResource(mChangeLogFileResourceId);    }    if (is != null) {      XmlPullParser parser=Xml.newPullParser();      parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,false);      parser.setInput(is,null);      parser.nextTag();      chg=new ChangeLog();      readChangeLogNode(parser,chg);      is.close();    } else {      Log.d(TAG,"Changelog.xml not found");      throw new ChangeLogException("Changelog.xml not found");    }  } catch (  XmlPullParserException xpe) {    Log.d(TAG,"XmlPullParseException while parsing changelog file",xpe);    throw xpe;  }catch (  IOException ioe) {    Log.d(TAG,"Error i/o with changelog.xml",ioe);    throw ioe;  }  return chg;}  }
class C{  @Override public String generateToken(PlatformUser user){  Claims claims=Jwts.claims().setSubject(user.getUsername());  claims.put(DEVICE_ID,user.getDeviceId());  claims.put(PLATFORM,user.getPlatform());  claims.put(ROLE,user.getRole());  claims.put(LOGIN_TIME,user.getLoginTime());  return Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS512,secret).compact();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public synchronized void abort(){  checkNotClosedOrEditingConcurrently();  close();  mIsClosed=true;  mCache.abortEdit(mEntry);}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  @deprecated public static boolean isJavaLetterOrDigit(int cp){  return isJavaIdentifierPart(cp);}  }
class C{  @Override public RealVector solve(final RealVector b){  if (!isNonSingular()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);  }  final int m=realEigenvalues.length;  if (b.getDimension() != m) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,b.getDimension(),m);  }  final double[] bp=new double[m];  for (int i=0; i < m; ++i) {    final ArrayRealVector v=eigenvectors[i];    final double[] vData=v.getDataRef();    final double s=v.dotProduct(b) / realEigenvalues[i];    for (int j=0; j < m; ++j) {      bp[j]+=s * vData[j];    }  }  return new ArrayRealVector(bp,false);}  }
class C{  public boolean only_stack_locals(){  return soot.PhaseOptions.getBoolean(options,"only-stack-locals");}  }
class C{  private void requestInputMethod(Dialog dialog){  Window window=dialog.getWindow();  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}  }
class C{  public void unsubscribe(String name) throws JMSException {  throw new IllegalStateException("Forbidden call on a QueueSession.");}  }
class C{  protected List<Match> findClosest(Segment draggedEdge,List<Segment> edges){  List<Match> closest=new ArrayList<Match>();  addClosest(draggedEdge,edges,closest);  return closest;}  }
class C{  private static String readFile(String fileName) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(fileName));  try {    StringBuilder sb=new StringBuilder();    String line=br.readLine();    while (line != null) {      sb.append(line);      sb.append("\n");      line=br.readLine();    }    return sb.toString();  }  finally {    br.close();  }}  }
class C{  public static Style pink(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_PINK);  return style;}  }
class C{  public PhotosGetByIdQueryWithExtended(VkApiClient client,List<String> photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,PhotoFull.class));  photos(photos);  extended(true);}  }
class C{  public static boolean isDUCDoc(String sDocName){  return (new File(sDocName).getName().split("[.]").length == 5);}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public static void main(String[] args){  final ApprovalEventDTO approval=createTestApprovalEvent();  hudson.model.BuildListener listener=new StreamBuildListener(System.out,Charset.defaultCharset());  try {    ObjectMapper mapper=JsonUtils.createObjectMapper();    String json=mapper.writeValueAsString(approval);    boolean success=ElasticsearchClient.updateEvent("AVVy4MSZ_YLNT2M2J-83",json,ElasticsearchClient.APPROVE,listener);    assertTrue(success);  } catch (  Exception e) {    LOG.log(Level.SEVERE,"Error when updating event: " + approval,e);  }}  }
class C{  public LookupExtractionFunction withRetainMissingValue(Boolean retainMissingValue){  return new LookupExtractionFunction(lookup,retainMissingValue,replaceMissingValueWith,injective,optimize);}  }
class C{  @Nullable public static File resolveLayout(@NotNull RenderResources resources,@Nullable ResourceValue layout){  if (layout != null) {    layout=resources.resolveResValue(layout);  }  if (layout == null) {    return null;  }  String value=layout.getValue();  int depth=0;  while (value != null && depth < MAX_RESOURCE_INDIRECTION) {    if (DataBindingUtil.isBindingExpression(value)) {      value=DataBindingUtil.getBindingExprDefault(value);      if (value == null) {        return null;      }    }    if (value.startsWith(PREFIX_RESOURCE_REF)) {      boolean isFramework=layout.isFramework();      layout=resources.findResValue(value,isFramework);      if (layout != null) {        value=layout.getValue();      } else {        break;      }    } else {      File file=new File(value);      if (file.exists()) {        return file;      } else {        return null;      }    }    depth++;  }  return null;}  }
class C{  public S2LatLngRect expanded(S2LatLng margin){  if (isEmpty()) {    return this;  }  return new S2LatLngRect(lat.expanded(margin.lat().radians()).intersection(fullLat()),lng.expanded(margin.lng().radians()));}  }
class C{  private static String formatErrorMessage(@NotNull RenderingContext context,@NotNull TemplateUserVisibleException ex){  if (!context.canCausePartialRendering()) {    return ex.getMessage();  }  return new StringBuilder().append(ex.getMessage()).append(String.format("\n\n%1$s was only partially completed.",context.getCommandName())).append("\nYour project may not compile.").append("\nYou may want to Undo to get back to the original state.").toString();}  }
class C{  public static double distFrom(double lat1,double lng1,double lat2,double lng2){  double earthRadius=6371000;  double lat=Math.toRadians(lat2 - lat1);  double lng=Math.toRadians(lng2 - lng1);  double haversine=Math.sin(lat / 2) * Math.sin(lat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(lng / 2)* Math.sin(lng / 2);  return earthRadius * (2 * Math.atan2(Math.sqrt(haversine),Math.sqrt(1 - haversine)));}  }
class C{  public CategoryColumn tokenizeAndSort(){  CategoryColumn newColumn=CategoryColumn.create(name() + "[sorted]",this.size());  for (int r=0; r < size(); r++) {    String value=get(r);    Splitter splitter=Splitter.on(CharMatcher.WHITESPACE);    splitter=splitter.trimResults();    splitter=splitter.omitEmptyStrings();    List<String> tokens=new ArrayList<>(splitter.splitToList(value));    Collections.sort(tokens);    value=String.join(" ",tokens);    newColumn.add(value);  }  return newColumn;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_OUT_OF_SKILL_POINT(String value0){  return new SM_SYSTEM_MESSAGE(1330001,value0);}  }
class C{  private BSPTree<Euclidean2D> selectClosest(final Vector2D point,final Iterable<BSPTree<Euclidean2D>> candidates){  BSPTree<Euclidean2D> selected=null;  double min=Double.POSITIVE_INFINITY;  for (  final BSPTree<Euclidean2D> node : candidates) {    final double distance=FastMath.abs(node.getCut().getHyperplane().getOffset(point));    if (distance < min) {      selected=node;      min=distance;    }  }  return min <= tolerance ? selected : null;}  }
class C{  @Override public void onFailure(Call<T> call,Throwable t){  String errorMsg=INetEvent.UNKNOW_ERROR;  if (t != null) {    if (!Util.isEmpty(t.getMessage())) {      errorMsg=t.getMessage();    }  }  if (netEvent != null) {    netEvent.onErrorResponse(this.requestType,errorMsg);  }}  }
class C{  public void openDataSource(final DataSource dataSource){  openDataSource(dataSource,true);}  }
class C{  public NewsfeedUnsubscribeQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int itemId){  super(client,"newsfeed.unsubscribe",OkResponse.class);  accessToken(actor.getAccessToken());  type(type);  itemId(itemId);}  }
class C{  public DTDConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  static void removeSoIfExit(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  if (a.exists()) {    a.delete();  }}  }
class C{  private void validate(Protos.HealthCheck healthCheck) throws HealthCheckValidationException {  if (healthCheck.hasHttp()) {    throw new HealthCheckValidationException("The following health check contains an unsupported HTTP configuration: " + healthCheck);  }  if (!healthCheck.hasCommand()) {    throw new HealthCheckValidationException("The following health check does not contain a Command: " + healthCheck);  }  Protos.CommandInfo commandInfo=healthCheck.getCommand();  if (!Boolean.valueOf(commandInfo.getShell())) {    throw new HealthCheckValidationException("Only shell based health checks are supported for health check commmand: " + commandInfo);  }}  }
class C{  public static boolean containsInLineFeatures(StyledLayerDescriptor sld){  if (sld != null) {    for (    StyledLayer layer : sld.layers()) {      if (layer instanceof UserLayer) {        UserLayer userLayer=(UserLayer)layer;        if (userLayer.getInlineFeatureDatastore() != null) {          return true;        }      }    }  }  return false;}  }
class C{  public boolean computeEmbedding(PhyloTreeView treeView,PhyloTree tree){  treeView.removeAllInternalPoints();  if (tree.getNumberOfNodes() == 0)   return true;  treeView.removeAllInternalPoints();  Node root=tree.getFirstNode();  NodeSet leaves=new NodeSet(tree);  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {    if (tree.getDegree(v) == 1)     leaves.add(v);    if (tree.getDegree(v) > tree.getDegree(root))     root=v;  }  EdgeDoubleArray angle=new EdgeDoubleArray(tree);  Random rand=new Random();  rand.setSeed(1);  int seen=setAnglesRec(tree,0,root,null,leaves,angle,rand);  if (seen != leaves.size())   System.err.println("Warning: Number of nodes seen: " + seen + " != Number of leaves: "+ leaves.size());  setCoordsRec(treeView,tree,root,null,angle);  treeView.trans.setCoordinateRect(treeView.getBBox());  treeView.resetViews();  treeView.fitGraphToWindow();  return true;}  }
