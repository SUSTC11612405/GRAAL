class C{  protected ListSelectionListener createListSelectionListener(){  return new ListSelectionHandler();}  }
class C{  public static void main(final String[] args) throws InterruptedException {  withGeneric();  withoutGeneric();}  }
class C{  @Override public void characters(char ch[],int start,int len) throws SAXException {  if (!cdataElement) {    if (mIgnoreChars) {      writeText4Links();      writeEscUTF16(new String(ch),start,len,false);    } else {      collectText4Links(ch,start,len);    }  } else {    writeText4Links();    for (int i=start; i < start + len; i++) {      write(ch[i]);    }  }  super.characters(ch,start,len);}  }
class C{  public static boolean checkComplete(String directory,ShareSecurityCheck securityCheck,Intent intentResult){  String meta=securityCheck.getMetaContentMap().get(DEX_MEAT_FILE);  if (meta == null) {    return true;  }  dexList.clear();  ShareDexDiffPatchInfo.parseDexDiffPatchInfo(meta,dexList);  if (dexList.isEmpty()) {    return true;  }  HashMap<String,String> dexes=new HashMap<>();  for (  ShareDexDiffPatchInfo info : dexList) {    if (isJustArtSupportDex(info)) {      continue;    }    if (!ShareDexDiffPatchInfo.checkDexDiffPatchInfo(info)) {      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED);      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);      return false;    }    dexes.put(info.realName,info.destMd5InDvm);  }  String dexDirectory=directory + "/" + DEX_PATH+ "/";  File dexDir=new File(dexDirectory);  if (!dexDir.exists() || !dexDir.isDirectory()) {    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_DIRECTORY_NOT_EXIST);    return false;  }  String optimizeDexDirectory=directory + "/" + DEX_OPTIMIZE_PATH+ "/";  File optimizeDexDirectoryFile=new File(optimizeDexDirectory);  for (  String name : dexes.keySet()) {    File dexFile=new File(dexDirectory + name);    if (!dexFile.exists()) {      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);      return false;    }    File dexOptFile=new File(SharePatchFileUtil.optimizedPathFor(dexFile,optimizeDexDirectoryFile));    if (!dexOptFile.exists()) {      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexOptFile.getAbsolutePath());      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST);      return false;    }  }  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_DEXES_PATH,dexes);  return true;}  }
class C{  private void generateLegalTimesTree(){  final int k0=KeyEvent.KEYCODE_0;  final int k1=KeyEvent.KEYCODE_1;  final int k2=KeyEvent.KEYCODE_2;  final int k3=KeyEvent.KEYCODE_3;  final int k4=KeyEvent.KEYCODE_4;  final int k5=KeyEvent.KEYCODE_5;  final int k6=KeyEvent.KEYCODE_6;  final int k7=KeyEvent.KEYCODE_7;  final int k8=KeyEvent.KEYCODE_8;  final int k9=KeyEvent.KEYCODE_9;  mLegalTimesTree=new Node();  if (mIs24HourView) {    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    minuteFirstDigit.addChild(minuteSecondDigit);    Node firstDigit=new Node(k0,k1);    mLegalTimesTree.addChild(firstDigit);    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    Node thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    secondDigit=new Node(k6,k7,k8,k9);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    firstDigit=new Node(k2);    mLegalTimesTree.addChild(firstDigit);    secondDigit=new Node(k0,k1,k2,k3);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    secondDigit=new Node(k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteSecondDigit);    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(minuteFirstDigit);  } else {    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));    Node firstDigit=new Node(k1);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    Node secondDigit=new Node(k0,k1,k2);    firstDigit.addChild(secondDigit);    secondDigit.addChild(ampm);    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    thirdDigit.addChild(fourthDigit);    fourthDigit.addChild(ampm);    thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    secondDigit=new Node(k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);  }}  }
class C{  public LogSeqNum logSetVal(Buffer buff,int offset,Constant newVal){  if (enableLogging) {    BlockId blk=buff.block();    if (isTempBlock(blk))     return null;    return new SetValueRecord(txNum,blk,offset,buff.getVal(offset,newVal.getType()),newVal).writeToLog();  } else   return null;}  }
class C{  public ContextSet makeImmutable(){  return this;}  }
class C{  protected String retrieveIndexFormat(String prefix,long millis){  String result;switch (indexFormat) {case "D":case "d":    result=prefix + millisecondsToYearMonthDay(millis);  break;case "W":case "w":result=prefix + millisecondsToYearWeek(millis);break;case "M":case "m":default :result=prefix + millisecondsToYearMonth(millis);}return result.toLowerCase();}  }
class C{  @Override public synchronized boolean isEquipmentAliveType(){  return (getAliveType().equals(AliveTimer.ALIVE_TYPE_EQUIPMENT));}  }
class C{  public static void loadPlatform() throws ConfigurationException, IOException {  SystemConfig sysConfig=SystemConfig.getInstance();  Properties addSysProps=sysConfig.getSystemProperties();  URL[] platformJARs=sysConfig.getPlatformJars();  if (platformJARs.length == 0)   throw new RuntimeException("No platformJARs have been defined");  CommonClassLoader commonCL=CommonClassLoader.getInstance();  commonCL.addCommonJARs(platformJARs);  addSysProps=sysConfig.getSystemProperties();  if (logger.isLoggable(Level.FINE)) {    StringBuilder buff=new StringBuilder();    for (Enumeration<?> en=addSysProps.propertyNames(); en.hasMoreElements(); ) {      String name=(String)en.nextElement();      String value=addSysProps.getProperty(name);      buff.append("    ").append(name).append("=").append(value);      buff.append("\n");    }    logger.fine("Configured System Properties {\n" + buff.toString() + "}");  }  Properties sysProps=System.getProperties();  sysProps.putAll(addSysProps);  System.setProperties(sysProps);  logger.finest("Full list of System Properties {\n" + System.getProperties() + "}");}  }
class C{  private static boolean ensureCurrent(LeasedResource resource){  return resource.getExpiration() > SystemTime.timeMillis();}  }
class C{  @Override protected void changed(){  changes++;}  }
class C{  public MixtureMultivariateRealDistribution(RandomGenerator rng,List<Pair<Double,T>> components){  super(rng,components.get(0).getSecond().getDimension());  final int numComp=components.size();  final int dim=getDimension();  double weightSum=0;  for (int i=0; i < numComp; i++) {    final Pair<Double,T> comp=components.get(i);    if (comp.getSecond().getDimension() != dim) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,comp.getSecond().getDimension(),dim);    }    if (comp.getFirst() < 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,comp.getFirst(),0);    }    weightSum+=comp.getFirst();  }  if (Double.isInfinite(weightSum)) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  }  distribution=new ArrayList<T>();  weight=new double[numComp];  for (int i=0; i < numComp; i++) {    final Pair<Double,T> comp=components.get(i);    weight[i]=comp.getFirst() / weightSum;    distribution.add(comp.getSecond());  }}  }
class C{  protected void logLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  labels.clear();  double llo=MathLib.safeLog10(m_lo);  double lhi=MathLib.safeLog10(m_hi);  double lspan=lhi - llo;  double d=MathLib.log10(lhi - llo);  int e=(int)Math.floor(d);  int ilo=(int)Math.floor(llo);  int ihi=(int)Math.ceil(lhi);  double start=Math.pow(10,ilo);  double end=Math.pow(10,ihi);  double step=start * Math.pow(10,e);  for (double val, v=start, i=0; v <= end; v+=step, ++i) {    val=MathLib.safeLog10(v);    if (i != 0 && Math.abs(val - Math.round(val)) < 0.0001) {      i=0;      step=10 * step;    }    val=((val - llo) / lspan) * breadth;    if (val < -0.5)     continue;    VisualItem item=labels.addItem();    set(item,val,b);    String label=i == 0 ? m_nf.format(v) : null;    item.set(LABEL,label);    item.setDouble(VALUE,v);  }}  }
class C{  @Override public void removeAttribute(String name){  if (ownerDocument.errorChecking && isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (needsSyncData()) {    synchronizeData();  }  if (attributes == null) {    return;  }  attributes.safeRemoveNamedItem(name);}  }
class C{  public PhotosGetQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"photos.get",GetExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  private void closeThriftWriter(){  if (null != dictionaryThriftWriter) {    dictionaryThriftWriter.close();  }}  }
class C{  public String upload_file1(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_file(local_filename,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public void connect(){  connect(null);}  }
class C{  private static boolean fromIniString(@Nullable String s){  return "yes".equals(s);}  }
class C{  public static boolean isFifoGroupingPoll(int mod){  return Modifiers.contains(mod,FIFO_GROUPING_POLL);}  }
class C{  public static String saveCartToAutoSaveList(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);  try {    fillAutoSaveList(cart,dispatcher);  } catch (  GeneralException e) {    Debug.logError(e,"Error saving the cart to the auto-save list: " + e.toString(),module);  }  return "success";}  }
class C{  public static void main(String[] args){  OkHttpClient http=new OkHttpClient();  try {    GoogleUserCredentialProvider provider=new GoogleUserCredentialProvider(http);    System.out.println("Please go to " + provider.LOGIN_URL);    System.out.println("Enter authorisation code:");    Scanner sc=new Scanner(System.in);    String access=sc.nextLine();    provider.login(access);    System.out.println("Refresh token:" + provider.getRefreshToken());  } catch (  LoginFailedException|RemoteServerException e) {    e.printStackTrace();  }}  }
class C{  private EmoClientException asEmoClientException(UniformInterfaceException e) throws EmoClientException {  throw new EmoClientException(e.getMessage(),e,toEmoResponse(e.getResponse()));}  }
class C{  public boolean isShutdownSpaceOnInitFailure(){  return shutdownSpaceOnInitFailure;}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public ValueSubPanel(boolean addValueField){  setLayout(new BorderLayout(0,0));  if (addValueField) {    valueTextField=new JTextField();    add(valueTextField,BorderLayout.CENTER);  }}  }
class C{  private void checkDimensionsEquality(final int d1,final int d2) throws MathIllegalArgumentException {  if (d1 != d2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,d2,d1);  }}  }
class C{  public void flush(){synchronized (mCache) {    mCache.clear();  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  @Override public boolean start() throws ContainerException {  ContainerConfig.Container cfg=ContainerConfig.getContainer(name,configFile);  String dispatcherName=ContainerConfig.getPropertyValue(cfg,"dispatcher-name","JavaMailDispatcher");  String delegatorName=ContainerConfig.getPropertyValue(cfg,"delegator-name","default");  this.deleteMail="true".equals(ContainerConfig.getPropertyValue(cfg,"delete-mail","false"));  this.delegator=DelegatorFactory.getDelegator(delegatorName);  this.dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);  this.timerDelay=ContainerConfig.getPropertyValue(cfg,"poll-delay",300000);  this.maxSize=ContainerConfig.getPropertyValue(cfg,"maxSize",1000000);  String runAsUser=ContainerConfig.getPropertyValue(cfg,"run-as-user","system");  try {    this.userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",runAsUser).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Unable to load run-as-user UserLogin; cannot start container",module);    return false;  }  ServiceMcaUtil.readConfig();  List<ContainerConfig.Container.Property> configs=cfg.getPropertiesWithValue("store-listener");  for (  ContainerConfig.Container.Property prop : configs) {    Session session=this.makeSession(prop);    Store store=this.getStore(session);    if (store != null) {      stores.put(store,session);      store.addStoreListener(new LoggingStoreListener());    }  }  if (UtilValidate.isNotEmpty(stores)) {    pollTimer.scheduleAtFixedRate(new PollerTask(dispatcher,userLogin),timerDelay,timerDelay,TimeUnit.MILLISECONDS);  } else {    Debug.logWarning("No JavaMail Store(s) configured; poller disabled.",module);  }  return true;}  }
class C{  @Override public void onNewItem(int id,Barcode item){  mGraphic.setId(id);}  }
class C{  public boolean containsJoint(Joint joint){  return this.joints.contains(joint);}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    this.branch.close();  }}  }
class C{  protected void checkArray(String msg,Fraction[] m,Fraction[] n){  if (m.length != n.length) {    Assert.fail("vectors have different lengths");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(msg + " " + i+ " elements differ",m[i],n[i]);  }}  }
class C{  private void init(String scope,String category,String name){  if (scope == null) {    throw new IllegalArgumentException("Scope cannot be null");  }  if (category == null) {    throw new IllegalArgumentException("Cagegory cannot be null");  }  if (name == null) {    throw new IllegalArgumentException("Name cannot be null");  }  this.scope=scope;  this.category=category;  this.name=name;  this.ts=System.currentTimeMillis();}  }
class C{  public SearchPhotosImplementor(SearchModel model,SearchView view){  this.model=model;  this.view=view;}  }
class C{  public static Zmat o(Zmat A,Zdiagmat D) throws JampackException {  if (D.order != A.ncol) {    throw new JampackException("Unconformity in product.");  }  Zmat B=new Zmat(A.nrow,A.ncol);  for (int i=0; i < A.nrow; i++) {    for (int j=0; j < A.ncol; j++) {      B.re[i][j]=D.re[j] * A.re[i][j] - D.im[j] * A.im[i][j];      B.im[i][j]=D.re[j] * A.im[i][j] + D.im[j] * A.re[i][j];    }  }  return B;}  }
class C{  public static int convertDPItoPixels(Context context,int dpi){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpi * scale + 0.5f);}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public void addMethod(Method m){  m.resolve(this);  methods.addElement(m);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GLORY_POINT_GAIN(int num0){  return new SM_SYSTEM_MESSAGE(1402081,num0);}  }
class C{  public void restorePosition(){  RecordId rid1=savedPosition.get(0);  RecordId rid2=savedPosition.get(1);  s1.moveToRecordId(rid1);  if (rid2 != null)   s2.moveToRecordId(rid2);}  }
class C{  public SaveDataInputStream(InputStream in){  super(in);}  }
class C{  public void oneCycle(){  for (  final IConnectionWithReconnect connection : connections.keySet()) {    if (connection.getConnectionStatus().equals(ConnectionStatus.CONNECTING)) {      continue;    }    final ReconnectionSettings reconnectionSettings=connection.getReconnectionSettings();    if (connection.getLastConnectionAttemptTimestamp() + reconnectionSettings.getRetryInterval() > TimeUtils.getMonotonicTime()) {      continue;    }    if (connection.getConnectionStatus().equals(ConnectionStatus.DISCONNECTED) || connection.getConnectionStatus().equals(ConnectionStatus.NOT_CONNECTED)) {      logger.info("Starting connection {}",connection.getName());      new Thread(connections.get(connection)).start();    }  }}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public static StorableHeadphoneFence pluggingIn(){  return new StorableHeadphoneFence(PLUGGING_IN);}  }
class C{  public static byte copySign(byte magnitude,byte sign) throws MathRuntimeException {  if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) {    return magnitude;  } else   if (sign >= 0 && magnitude == Byte.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  } else {    return (byte)-magnitude;  }}  }
class C{  public VideoSearchQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static String createContainerPresentName(String hostName,String containerName){  if (hostName == null)   hostName=""; else   hostName+=":";  return hostName + containerName;}  }
class C{  public synchronized AggregateTable addAggregates(String group,Schema schema){  AggregateTable vat=new AggregateTable(this,group,schema);  addDataGroup(group,vat,null);  return vat;}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short toDetermineLengthOfByteArr=2;  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  public static ICacheSystem create(Configuration conf){  FileCache f=new FileCache();  f.root=Model.GIIWA_HOME + "/temp/_cache/";  f.cache_size=conf.getInt("file.cache.size",10000);  return f;}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public boolean isFixedView(View v){{    ArrayList<FixedViewInfo> where=mHeaderViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }{    ArrayList<FixedViewInfo> where=mFooterViewInfos;    int len=where.size();    for (int i=0; i < len; ++i) {      FixedViewInfo info=where.get(i);      if (info.view == v) {        return true;      }    }  }  return false;}  }
class C{  private void init() throws IOException {  initPath();  openThriftReader();}  }
class C{  public boolean hasErrors(){  return myHaveExceptions || myMessages != null || myClassesWithIncorrectFormat != null || myBrokenClasses != null || myMissingClasses != null || myMissingSize || myMissingFragments != null;}  }
class C{  public boolean isApplicable(){  return ClassificationManager.get(getViewer().getClassName(),false).getId2Rank().size() > 0;}  }
class C{  public static String childElementAttribute(Element element,String childElementName,String attributeName,String defaultValue){  if (element == null)   return defaultValue;  Element childElement=firstChildElement(element,childElementName);  String elementAttribute=elementAttribute(childElement,attributeName,defaultValue);  if (UtilValidate.isEmpty(elementAttribute))   return defaultValue; else   return elementAttribute;}  }
class C{  public static javax.ws.rs.core.Response makeErrorResponse(StatusType status,Throwable cause,ObjectWriter writer){  return makeErrorResponse(status,null,cause,writer);}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  @Override public Object oneTransition(QName elementName,int[] currentState,SubstitutionGroupHandler subGroupHandler){  if (currentState[0] < 0) {    currentState[0]=XSCMValidator.SUBSEQUENT_ERROR;    return findMatchingDecl(elementName,subGroupHandler);  }  currentState[0]=STATE_CHILD;  Object matchingDecl=null;  for (int i=0; i < fNumElements; i++) {    if (currentState[i + 1] != STATE_START)     continue;    matchingDecl=subGroupHandler.getMatchingElemDecl(elementName,fAllElements[i]);    if (matchingDecl != null) {      currentState[i + 1]=STATE_VALID;      return matchingDecl;    }  }  currentState[0]=XSCMValidator.FIRST_ERROR;  return findMatchingDecl(elementName,subGroupHandler);}  }
class C{  protected boolean atTokenSequence(TokenKind... kinds){  for (int i=0; i < kinds.length; i++) {    if (kindFromElement(builder.lookAhead(i)) != kinds[i]) {      return false;    }  }  return true;}  }
class C{  public void ae(String str1,String str2){  assertEquals(str1,str2);}  }
class C{  public void addDiagIfNotSuppressed(Object elementOrLocation,Diag diag){  if (elementOrLocation instanceof Element && isSuppressedDiag(diag,(Element)elementOrLocation)) {    return;  } else   if (elementOrLocation instanceof Location && isSuppressedDiag(diag,getModel())) {    return;  }  diagCollector.addDiag(diag);}  }
class C{  public static String readFileWithExceptions(final File file) throws IOException {  final BufferedReader in=new BufferedReader(new FileReader(file));  final StringBuilder sb=new StringBuilder();  String content="";  boolean firstline=true;  do {    sb.append(content);    content=in.readLine();    if (content != null && !firstline) {      sb.append(StringLiterals.NEWLINE);    }    firstline=false;  } while (content != null);  in.close();  return sb.toString();}  }
class C{  public void putViewModel(int key,MvvmViewModel cacheViewModel,Context context){  getFragment(context).put(key,cacheViewModel);}  }
class C{  private boolean accessPathMatches(AccessPath sourceAccessPath,AccessPathTuple apt){  if (apt.getFields() == null || apt.getFields().length == 0 || sourceAccessPath == null)   return true;  for (int i=0; i < apt.getFields().length; i++) {    if (i >= sourceAccessPath.getFieldCount())     return sourceAccessPath.getTaintSubFields();    if (!sourceAccessPath.getFields()[i].getName().equals(apt.getFields()[i]))     return false;  }  return true;}  }
class C{  public void prependTrivialPhiNode(Local local,Block frontierBlock){  List<Block> preds=frontierBlock.getPreds();  PhiExpr pe=Shimple.v().newPhiExpr(local,preds);  pe.setBlockId(frontierBlock.getIndexInMethod());  Unit trivialPhi=Jimple.v().newAssignStmt(local,pe);  Unit blockHead=frontierBlock.getHead();  if (blockHead instanceof IdentityUnit)   frontierBlock.insertAfter(trivialPhi,frontierBlock.getHead()); else   frontierBlock.insertBefore(trivialPhi,frontierBlock.getHead());  varToBlocks.put(local,frontierBlock);}  }
class C{  private void blackmanHarris4sMin(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double scale=1.0 / (double)size / 0.36;  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));}  }
class C{  @Override public void afterTextChanged(Editable s){  if (s.length() > 0) {    if (!mConfirmingPassCode) {      mPassCodeDigits[mIndex]=mPassCodeEditTexts[mIndex].getText().toString();    }    mPassCodeEditTexts[next()].requestFocus();    if (mLastOne) {      processFullPassCode();    }  } else {    Log_OC.d(TAG,"Text box " + mIndex + " was cleaned");  }}  }
class C{  private void connectDroppedWidget(){  if (!ourAutoConnect) {    ArrayList<DrawConstraintModel> drawConstraintModels=getDrawConstraintModels();    if (drawConstraintModels.size() < 1) {      return;    }    for (    DrawConstraintModel drawConstraintModel : drawConstraintModels) {      drawConstraintModel.getMouseInteraction().clearIndicators();    }    return;  }  ArrayList<DrawConstraintModel> drawConstraintModels=getDrawConstraintModels();  if (drawConstraintModels.size() < 1) {    return;  }  for (  DrawConstraintModel drawConstraintModel : drawConstraintModels) {    for (    SnapCandidate candidate : drawConstraintModel.getMouseInteraction().getSnapCandidates()) {      int margin=candidate.margin;      if (candidate.padding != 0) {        margin=candidate.padding;      }      margin=Math.abs(margin);      ConstraintWidget widget=candidate.source.getOwner();      widget.connect(candidate.source,candidate.target,margin,ConstraintAnchor.AUTO_CONSTRAINT_CREATOR);    }    drawConstraintModel.getMouseInteraction().clearIndicators();  }  saveToXML(true);}  }
class C{  public ParameterDeclaration substituted(Collection<TypeVariable> original,List<TypeVariable> substitution){  ASTNode$State state=state();  try {    return new ParameterDeclaration((Modifiers)getModifiers().cloneSubtree(),getTypeAccess().substituted(original,substitution),getID());  }  finally {  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.preference);  bindPreferenceSummaryToValue(findPreference(getString(R.string.pref_units_key)));  bindPreferenceSummaryToValuesInt(findPreference(getString(R.string.pref_colors_key)));  MainActivity.audioWidget.hide();}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  private void applyRetrievedLengthLimit(){  Long friendly_msg_length=mFirebaseRemoteConfig.getLong("friendly_msg_length");  mMessageEditText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(friendly_msg_length.intValue())});  Log.d(TAG,"FML is: " + friendly_msg_length);}  }
class C{  public MultiDimensionMismatchException(Integer[] wrong,Integer[] expected){  this(LocalizedFormats.DIMENSIONS_MISMATCH,wrong,expected);}  }
class C{  public void finish(String footer){  m_bias=0;  m_out.print(footer);  m_out.flush();}  }
class C{  public boolean hasErrors(){  return errorDescription != null;}  }
class C{  MyImageIcon(String label){  final BufferedImage image=new BufferedImage(16,16,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=image.createGraphics();  g.setColor((new JButton()).getBackground());  g.fillRect(0,0,16,16);  g.setFont(new Font("Arial",Font.PLAIN,15));  g.setColor(Color.BLACK);  g.drawString(label.substring(0,1).toUpperCase(),1,13);  g.dispose();  setImage(image);}  }
class C{  @Override public void publish(String topic,AWSIotQos qos,byte[] payload,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.publish(topic,qos,payload,timeout);}  }
class C{  private void buildAnnotationLists(List<? extends AnnotationMirror> annotationMirrors){  for (  AnnotationMirror annotationMirror : annotationMirrors) {    if (!annotationMirror.getElementValues().isEmpty()) {      continue;    }    ClassName annotationClass=ClassName.bestGuess(annotationMirror.getAnnotationType().toString());    if (annotationClass.equals(ClassName.get(EpoxyAttribute.class))) {      continue;    }    DeclaredType annotationType=annotationMirror.getAnnotationType();    Target targetAnnotation=annotationType.asElement().getAnnotation(Target.class);    List<ElementType> elementTypes=Arrays.asList(targetAnnotation == null ? ElementType.values() : targetAnnotation.value());    AnnotationSpec annotationSpec=AnnotationSpec.builder(annotationClass).build();    if (elementTypes.contains(ElementType.PARAMETER)) {      setterAnnotations.add(annotationSpec);    }    if (elementTypes.contains(ElementType.METHOD)) {      getterAnnotations.add(annotationSpec);    }  }}  }
class C{  public static void resetDimensionConstants(Context context){  Resources res=context.getResources();  final float pxToDp=1.0f / res.getDisplayMetrics().density;  sStackedTabVisibleSize=res.getDimensionPixelOffset(R.dimen.stacked_tab_visible_size) * pxToDp;  sStackBufferWidth=res.getDimensionPixelOffset(R.dimen.stack_buffer_width) * pxToDp;  sStackBufferHeight=res.getDimensionPixelOffset(R.dimen.stack_buffer_height) * pxToDp;}  }
class C{  protected Node nextMatchingElementAfter(Node current){  Node next;  while (current != null) {    if (current.hasChildNodes()) {      current=(current.getFirstChild());    } else     if (current != rootNode && null != (next=current.getNextSibling())) {      current=next;    } else {      next=null;      for (; current != rootNode; current=current.getParentNode()) {        next=current.getNextSibling();        if (next != null)         break;      }      current=next;    }    if (current != rootNode && current != null && current.getNodeType() == Node.ELEMENT_NODE) {      if (!enableNS) {        if (tagName.equals("*") || ((ElementImpl)current).getTagName().equals(tagName)) {          return current;        }      } else {        if (tagName.equals("*")) {          if (nsName != null && nsName.equals("*")) {            return current;          } else {            ElementImpl el=(ElementImpl)current;            if ((nsName == null && el.getNamespaceURI() == null) || (nsName != null && nsName.equals(el.getNamespaceURI()))) {              return current;            }          }        } else {          ElementImpl el=(ElementImpl)current;          if (el.getLocalName() != null && el.getLocalName().equals(tagName)) {            if (nsName != null && nsName.equals("*")) {              return current;            } else {              if ((nsName == null && el.getNamespaceURI() == null) || (nsName != null && nsName.equals(el.getNamespaceURI()))) {                return current;              }            }          }        }      }    }  }  return null;}  }
class C{  public float distance(Vector2f v){  return FastMath.sqrt(distanceSquared(v));}  }
class C{  public synchronized BlockId append(String fileName){  return fileMgr.append(fileName,contents);}  }
class C{  public static void sendFCMTokenToServer(Context context,boolean sent){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());  pref.edit().putBoolean(SENT_TOKEN_TO_SERVER,sent).apply();}  }
class C{  public void logStatisticsAsTableExecutor(){}  }
class C{  private void extractAndSetCoverArt(OCFile file){  if (file.isAudio()) {    try {      MediaMetadataRetriever mmr=new MediaMetadataRetriever();      mmr.setDataSource(file.getStoragePath());      byte[] data=mmr.getEmbeddedPicture();      if (data != null) {        Bitmap bitmap=BitmapFactory.decodeByteArray(data,0,data.length);        mImagePreview.setImageBitmap(bitmap);      } else {        mImagePreview.setImageResource(R.drawable.logo);      }    } catch (    Throwable t) {      mImagePreview.setImageResource(R.drawable.logo);    }  }}  }
class C{  public AirMapSpecialUseProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  @Override public void onRequestError(int code,String message){  if (code == ConnectAPI.LOGIN_CODE) {    emailLayout.setError("Enter valid Email");    requestFocus(email);    passwordLayout.setError("Enter valid Password");    requestFocus(password);    signin.setText("Sign in");    signin.setClickable(true);  }}  }
class C{  public static boolean isEmpty(CharSequence str){  if (str == null || str.length() == 0) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201246,skillname);}  }
class C{  @Nullable protected MutableTryBlock<EH> readNextItem(){  MutableTryBlock<EH> ret=next.next;  if (ret == listEnd) {    return null;  }  while (ret.next != listEnd) {    if (ret.endCodeAddress == ret.next.startCodeAddress && ret.getExceptionHandlers().equals(ret.next.getExceptionHandlers())) {      ret.mergeNext();    } else {      break;    }  }  return ret;}  }
class C{  protected void requestUpdate(){  if (mUpdateHost != null) {    mUpdateHost.requestUpdate();  }}  }
class C{  public AemContextMenu clickOption(final MenuOption option){  bobcatWait.withTimeout(Timeouts.BIG).until(null);  return this;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessDefinitionIdentityLinkEvents() throws Exception {  ProcessDefinition processDefinition=repositoryService.createProcessDefinitionQuery().processDefinitionKey("oneTaskProcess").singleResult();  assertNotNull(processDefinition);  repositoryService.addCandidateStarterUser(processDefinition.getId(),"kermit");  repositoryService.addCandidateStarterGroup(processDefinition.getId(),"sales");  assertEquals(4,listener.getEventsReceived().size());  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  assertEquals(processDefinition.getId(),event.getProcessDefinitionId());  assertNull(event.getProcessInstanceId());  assertNull(event.getExecutionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  assertEquals(processDefinition.getId(),event.getProcessDefinitionId());  assertNull(event.getProcessInstanceId());  assertNull(event.getExecutionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  listener.clearEventsReceived();  repositoryService.deleteCandidateStarterUser(processDefinition.getId(),"kermit");  repositoryService.deleteCandidateStarterGroup(processDefinition.getId(),"sales");  assertEquals(2,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  assertEquals(processDefinition.getId(),event.getProcessDefinitionId());  assertNull(event.getProcessInstanceId());  assertNull(event.getExecutionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  assertEquals(processDefinition.getId(),event.getProcessDefinitionId());  assertNull(event.getProcessInstanceId());  assertNull(event.getExecutionId());}  }
class C{  public static String createFilePath(File cacheDir,String key){  try {    return cacheDir.getAbsolutePath() + File.separator + CACHE_FILENAME_PREFIX+ URLEncoder.encode(key.replace("*",""),"UTF-8");  } catch (  final UnsupportedEncodingException e) {    Log.e(TAG,"createFilePath - " + e);  }  return null;}  }
class C{  public static synchronized RemoteHostsContainer sharedInstance(){  if (sharedInstance == null)   sharedInstance=new RemoteHostsContainer();  return sharedInstance;}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigSlider copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigSlider(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public static boolean verifyPurchase(String base64PublicKey,String signedData,String signature){  if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey) || TextUtils.isEmpty(signature)) {    Log.e(TAG,"Purchase verification failed: missing data.");    return false;  }  PublicKey key=Security.generatePublicKey(base64PublicKey);  return Security.verify(key,signedData,signature);}  }
class C{  public SiteAdminPage activatePage(String title){  grid.activatePage(title);  waitForPageActivationStatus(title,ActivationStatus.ACTIVATED);  return this;}  }
class C{  private void checkAndAddMethod(SootMethod method,SootClass baseClass){  AndroidMethod am=new AndroidMethod(method);  if (am.getClassName().startsWith("android.") || am.getClassName().startsWith("java."))   return;  if (method.isConcrete() && isEmpty(method.retrieveActiveBody()))   return;  boolean isNew;  if (this.callbackMethods.containsKey(baseClass.getName()))   isNew=this.callbackMethods.get(baseClass.getName()).add(am); else {    Set<SootMethodAndClass> methods=new HashSet<SootMethodAndClass>();    isNew=methods.add(am);    this.callbackMethods.put(baseClass.getName(),methods);  }  if (isNew)   if (this.callbackWorklist.containsKey(baseClass.getName()))   this.callbackWorklist.get(baseClass.getName()).add(am); else {    Set<SootMethodAndClass> methods=new HashSet<SootMethodAndClass>();    isNew=methods.add(am);    this.callbackWorklist.put(baseClass.getName(),methods);  }}  }
class C{  public void add(PushLog log){  configPushLogDao.save(log);  if (!configPushLogDao.bindApp(log)) {    Logs.error("failed to bind app of log({})",log);  }}  }
class C{  final public void deny(){  deny(null,null);}  }
class C{  private String downloadUrl(String strUrl) throws IOException {  String data="";  InputStream iStream=null;  HttpURLConnection urlConnection=null;  try {    URL url=new URL(strUrl);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.connect();    iStream=urlConnection.getInputStream();    BufferedReader br=new BufferedReader(new InputStreamReader(iStream));    StringBuffer sb=new StringBuffer();    String line="";    while ((line=br.readLine()) != null) {      sb.append(line);    }    data=sb.toString();    br.close();  } catch (  Exception e) {    Log.d("Exc. while down url",e.toString());  } finally {    iStream.close();    urlConnection.disconnect();  }  return data;}  }
class C{  private GeoServerClientInterface createGeoServerClient(GeoServerConnection connection){  GeoServerClientInterface client=null;  try {    client=(GeoServerClientInterface)Class.forName(GeoServerInput.geoServerClientClass.getName()).newInstance();    client.initialise(progress,connection);  } catch (  InstantiationException e) {    ConsoleManager.getInstance().exception(GeoServerInput.class,e);  }catch (  IllegalAccessException e) {    ConsoleManager.getInstance().exception(GeoServerInput.class,e);  }catch (  ClassNotFoundException e) {    ConsoleManager.getInstance().exception(GeoServerInput.class,e);  }  return client;}  }
class C{  public void animateY(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  public BoardEditCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public void collapse(){  boolean verbose=pag.getOpts().verbose();  if (verbose) {    G.v().out.println("Total VarNodes: " + pag.getVarNodeNumberer().size() + ". Collapsing EBBs...");  }  collapseAlloc();  collapseLoad();  collapseSimple();  if (verbose) {    G.v().out.println("" + numCollapsed + " nodes were collapsed.");  }}  }
class C{  @Override public String findPatientInAdvanced(String keyword,int orgUnitId,int programId) throws NotAllowedException {  TrackedEntityInstanceQueryParams param=new TrackedEntityInstanceQueryParams();  List<TrackedEntityAttribute> displayAttributes=new ArrayList<>(attributeService.getTrackedEntityAttributesDisplayInList());  for (  TrackedEntityAttribute trackedEntityAttribute : displayAttributes) {    QueryItem queryItem=new QueryItem(trackedEntityAttribute);    param.addAttribute(queryItem);  }  if (programId != 0) {    param.setProgram(programService.getProgram(programId));  }  if (orgUnitId != 0) {    param.addOrganisationUnit(organisationUnitService.getOrganisationUnit(orgUnitId));    param.setOrganisationUnitMode(OrganisationUnitSelectionMode.SELECTED);  } else {    param.setOrganisationUnitMode(OrganisationUnitSelectionMode.ALL);  }  String[] items=keyword.split(";");  if (items == null) {    items=new String[1];    items[0]=keyword;  }  for (int i=0; i < items.length; i++) {    String[] split=keyword.split(":");    if (split == null || (split.length != 3 && split.length != 2)) {      throw NotAllowedException.INVALID_FILTER;    }    if (split.length == 2) {      QueryOperator operator=QueryOperator.fromString(split[0]);      param.setQuery(new QueryFilter(operator,split[1]));    } else {      TrackedEntityAttribute at=attributeService.getTrackedEntityAttributeByName(split[0]);      QueryItem queryItem=new QueryItem(at,at.getLegendSet(),at.getValueType(),at.getAggregationType(),at.getOptionSet());      QueryOperator operator=QueryOperator.fromString(split[1]);      queryItem.getFilters().add(new QueryFilter(operator,split[2]));      param.getFilters().add(queryItem);    }  }  Grid trackedEntityInstanceGrid=entityInstanceService.getTrackedEntityInstancesGrid(param);  List<List<Object>> listOfTrackedEntityInstance=trackedEntityInstanceGrid.getRows();  if (listOfTrackedEntityInstance.size() == 0) {    throw NotAllowedException.NO_BENEFICIARY_FOUND;  }  int instanceIndex=0;  int teIndex=4;  List<Integer> attributesIndex=new ArrayList<>();  List<GridHeader> headers=trackedEntityInstanceGrid.getHeaders();  int index=0;  for (  GridHeader header : headers) {    if (header.getName().equals("instance")) {      instanceIndex=index;    } else     if (header.getName().equals("te")) {      teIndex=index;    } else     if (!header.getName().equals("created") && !header.getName().equals("lastupdated") && !header.getName().equals("ou")) {      attributesIndex.add(new Integer(index));    }    index++;  }  String instanceInfo="";  String trackedEntityName="";  for (  List<Object> row : listOfTrackedEntityInstance) {    TrackedEntity te=trackedEntityService.getTrackedEntity((String)row.get(teIndex));    if (!trackedEntityName.equals(te.getDisplayName())) {      trackedEntityName=te.getDisplayName();      instanceInfo+=te.getDisplayName() + "$";    }    TrackedEntityInstance tei=entityInstanceService.getTrackedEntityInstance((String)row.get(instanceIndex));    instanceInfo+=tei.getId() + "/";    String attText="";    for (    Integer attIndex : attributesIndex) {      if (row.get(attIndex.intValue()) != null) {        attText+=(String)row.get(attIndex.intValue()) + " ";      }    }    instanceInfo+=attText.trim() + "$";  }  return instanceInfo;}  }
class C{  @RequestMapping(value={"/logout"},method=RequestMethod.GET) public String returnLogoutView(){  return "newLogout";}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public UserAdapter(Context a,List<User> list){  this.a=a;  this.itemList=list;}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    if (mCapabilities != null && mCapabilities.getFilesSharingPublicPasswordEnforced().isTrue()) {      requestPasswordForShareViaLink(true);    } else {      ((FileActivity)getActivity()).getFileOperationsHelper().shareFileViaLink(mFile,null);    }  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().unshareFileViaLink(mFile);  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnShareViaLinkSwitchCheckedChangeListener);}  }
class C{  static int parseMemberID(String nodeName){  int id=-1;  String[] parts=nodeName.split("_");  if (parts.length > 0) {    try {      id=Integer.parseInt(parts[parts.length - 1]);    } catch (    NumberFormatException nfe) {      id=Integer.MAX_VALUE;    }  }  return id;}  }
class C{  public TypeComboBoxEditor(){  super(new JComboBox<Class<?>>());}  }
class C{  protected void calcModulus(){  if (mXAxis == null || !mXAxis.isEnabled())   return;  if (!mXAxis.isAxisModulusCustom()) {    float[] values=new float[9];    mViewPortHandler.getMatrixTouch().getValues(values);    mXAxis.mAxisLabelModulus=(int)Math.ceil((mData.getXValCount() * mXAxis.mLabelRotatedWidth) / (mViewPortHandler.contentWidth() * values[Matrix.MSCALE_X]));  }  if (mLogEnabled)   Log.i(LOG_TAG,"X-Axis modulus: " + mXAxis.mAxisLabelModulus + ", x-axis label width: "+ mXAxis.mLabelWidth+ ", x-axis label rotated width: "+ mXAxis.mLabelRotatedWidth+ ", content width: "+ mViewPortHandler.contentWidth());  if (mXAxis.mAxisLabelModulus < 1)   mXAxis.mAxisLabelModulus=1;}  }
class C{  public void updatePosition(ViewTransform viewTransform){  if (mOwner == null) {    mBounds.setBounds(0,0,0,0);    return;  }  int x=getOwner().getDrawX();  int y=getOwner().getDrawY();  int w=getOwner().getDrawWidth();  int h=getOwner().getDrawHeight();  int slope=(int)(1 + SLOPE / viewTransform.getScale());switch (mType) {case LEFT_TOP:{      mBounds.setBounds(x - slope / 2,y - slope / 2,slope,slope);    }  break;case LEFT_BOTTOM:{  mBounds.setBounds(x - slope / 2,y + h - slope / 2,slope,slope);}break;case RIGHT_TOP:{mBounds.setBounds(x + w - slope / 2,y - slope / 2,slope,slope);}break;case RIGHT_BOTTOM:{mBounds.setBounds(x + w - slope / 2,y + h - slope / 2,slope,slope);}break;case LEFT_SIDE:{mBounds.setBounds(x - slope / 2,y + slope / 2,slope,h - slope);}break;case RIGHT_SIDE:{mBounds.setBounds(x + w - slope / 2,y + slope / 2,slope,h - slope);}break;case TOP_SIDE:{mBounds.setBounds(x + slope / 2,y - slope / 2,w - slope,slope);}break;case BOTTOM_SIDE:{mBounds.setBounds(x + slope / 2,y + h - slope / 2,w - slope,slope);}break;}}  }
class C{  @Deployment public void testProcessInstanceVariableEventsOnChildExecution() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("variableProcess");  assertNotNull(processInstance);  Execution child=runtimeService.createExecutionQuery().parentId(processInstance.getId()).singleResult();  assertNotNull(child);  runtimeService.setVariableLocal(child.getId(),"test",1234567);  assertEquals(1,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(child.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());}  }
class C{  private boolean hasSideEffectsOrReadsThis(SootMethod method){  return hasSideEffectsOrReadsThis(method,new HashSet<SootMethod>());}  }
class C{  public void addBitmapToCache(final String data,final BitmapDrawable value,final boolean addBitmapToDisk){  if ((data == null) || (value == null)) {    return;  }  if (getBitmapFromMemCache(data) == null) {    mMemCache.put(data,value);  }  if (!addBitmapToDisk) {    return;  }synchronized (mDiskCacheLock) {    if (mDiskLruCache != null && mDiskLruCache.get(data) == null) {      mDiskLruCache.put(data,value.getBitmap());    }  }}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public AuthenticationException(){  super();}  }
class C{  protected void fill(ILineDataSet set,boolean drawCircleHole,boolean drawTransparentCircleHole){  int colorCount=set.getCircleColorCount();  float circleRadius=set.getCircleRadius();  float circleHoleRadius=set.getCircleHoleRadius();  for (int i=0; i < colorCount; i++) {    Bitmap.Config conf=Bitmap.Config.ARGB_4444;    Bitmap circleBitmap=Bitmap.createBitmap((int)(circleRadius * 2.1),(int)(circleRadius * 2.1),conf);    Canvas canvas=new Canvas(circleBitmap);    circleBitmaps[i]=circleBitmap;    mRenderPaint.setColor(set.getCircleColor(i));    if (drawTransparentCircleHole) {      mCirclePathBuffer.reset();      mCirclePathBuffer.addCircle(circleRadius,circleRadius,circleRadius,Path.Direction.CW);      mCirclePathBuffer.addCircle(circleRadius,circleRadius,circleHoleRadius,Path.Direction.CCW);      canvas.drawPath(mCirclePathBuffer,mRenderPaint);    } else {      canvas.drawCircle(circleRadius,circleRadius,circleRadius,mRenderPaint);      if (drawCircleHole) {        canvas.drawCircle(circleRadius,circleRadius,circleHoleRadius,mCirclePaintInner);      }    }  }}  }
class C{  @Override public Object illegal(Metadata<Valid> metadata){  String defaultOptional=metadata.getAnnotation().illegal();  Type type=metadata.getType();  if (!defaultOptional.isEmpty()) {    return safetyCast.with(defaultOptional,metadata.getType());  } else   if (type.equals(String.class)) {    return safetyCast.with("",type);  } else {    return safetyCast.with(0,type);  }}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public LikesGetListQuery(VkApiClient client,UserActor actor,LikesType type){  super(client,"likes.getList",GetListResponse.class);  accessToken(actor.getAccessToken());  type(type);}  }
class C{  public int size(){  return 9;}  }
class C{  public static IProgressMonitor monitorFor(IProgressMonitor monitor){  if (monitor == null)   return new NullProgressMonitor();  return monitor;}  }
class C{  public int length(){  return (((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff));}  }
class C{  public void remove(){}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  public Value size(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public Aggregation withFilter(Filter filter){  return new FilteredAggregation(getName(),getFieldName(),getAggregation(),filter);}  }
class C{  public synchronized ChangeReport onDataTagAdd(final DataTagAdd dataTagAddChange){  log.debug("onDataTagAdd - entering onDataTagAdd()");  if (log.isDebugEnabled())   log.debug("changeId: " + dataTagAddChange.getChangeId());  ChangeReport changeReport=new ChangeReport(dataTagAddChange);  Long equipmentId=dataTagAddChange.getEquipmentId();  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  if (!configuration.getEquipmentConfigurations().containsKey(equipmentId)) {    for (    EquipmentConfiguration equipmentConfiguration : configuration.getEquipmentConfigurations().values()) {      if (equipmentConfiguration.getSubEquipmentConfigurations().containsKey(equipmentId)) {        equipmentId=equipmentConfiguration.getId();      }    }  }  SourceDataTag sourceDataTag=dataTagAddChange.getSourceDataTag();  Long dataTagId=sourceDataTag.getId();  Map<Long,SourceDataTag> sourceDataTags=getSourceDataTags(equipmentId);  if (sourceDataTags == null) {    log.warn("cannot add data tag - equipment id: " + dataTagAddChange.getEquipmentId() + " is unknown");    changeReport.appendError("Equipment does not exist: " + equipmentId);    return changeReport;  }  try {    sourceDataTag.validate();  } catch (  ConfigurationException e) {    changeReport.appendError("Error validating data tag");    changeReport.appendError(StackTraceHelper.getStackTrace(e));    return changeReport;  }  if (sourceDataTags.containsKey(dataTagId)) {    log.warn("onDataTagAdd - cannot add data tag id: " + dataTagId + " to equipment id: "+ dataTagAddChange.getEquipmentId()+ " This equipment already"+ " has tag with that id");    changeReport.appendError("DataTag " + dataTagId + " is already in equipment "+ equipmentId);  } else {    sourceDataTags.put(dataTagId,sourceDataTag);    changeReport.appendInfo("Core added data tag with id " + sourceDataTag.getId() + " successfully to equipment "+ equipmentId);    List<ICoreDataTagChanger> coreChangers=coreDataTagChangers.get(equipmentId);    if (coreChangers != null) {      for (      ICoreDataTagChanger dataTagChanger : coreChangers) {        dataTagChanger.onAddDataTag(sourceDataTag,changeReport);      }    }    IDataTagChanger dataTagChanger=dataTagChangers.get(equipmentId);    if (dataTagChanger != null) {      dataTagChanger.onAddDataTag(sourceDataTag,changeReport);    } else {      changeReport.appendError("It was not possible to apply the changes" + "to the implementation part. No data tag changer was found.");      changeReport.setState(CHANGE_STATE.REBOOT);    }  }  log.debug("onDataTagAdd - exiting onDataTagAdd()");  return changeReport;}  }
class C{  protected void init(){  checkLegal();  calcYValueCount();  calcMinMax(0,mYValCount);  calcXValMaximumLength();}  }
class C{  public PhotosRemoveTagQuery removeTag(UserActor actor,int photoId,int tagId){  return new PhotosRemoveTagQuery(getClient(),actor,photoId,tagId);}  }
class C{  public static long gymDefense(final Pokemon p){  return gymDefense(p.getPokemonId(),p.getMove1(),p.getMove2(),p.getIndividualAttack(),p.getIndividualDefense(),p.getIndividualStamina());}  }
class C{  public boolean contains(S2CellId other){  return other.greaterOrEquals(rangeMin()) && other.lessOrEquals(rangeMax());}  }
class C{  public synchronized void animateZoomAbs(final Point2D p,double scale,long duration){  m_transact.zoom(p,scale,duration);}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  public MessagesIsMessagesFromGroupAllowedQuery(VkApiClient client,Actor actor,int groupId,int userId){  super(client,"messages.isMessagesFromGroupAllowed",IsMessagesFromGroupAllowedResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  public SlickForm(Context context){  super(context);}  }
class C{  public void limitTransAndScale(Matrix matrix,RectF content){  matrix.getValues(matrixBuffer);  float curTransX=matrixBuffer[Matrix.MTRANS_X];  float curScaleX=matrixBuffer[Matrix.MSCALE_X];  float curTransY=matrixBuffer[Matrix.MTRANS_Y];  float curScaleY=matrixBuffer[Matrix.MSCALE_Y];  mScaleX=Math.min(Math.max(mMinScaleX,curScaleX),mMaxScaleX);  mScaleY=Math.min(Math.max(mMinScaleY,curScaleY),mMaxScaleY);  float width=0f;  float height=0f;  if (content != null) {    width=content.width();    height=content.height();  }  float maxTransX=-width * (mScaleX - 1f);  mTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);  float maxTransY=height * (mScaleY - 1f);  mTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);  matrixBuffer[Matrix.MTRANS_X]=mTransX;  matrixBuffer[Matrix.MSCALE_X]=mScaleX;  matrixBuffer[Matrix.MTRANS_Y]=mTransY;  matrixBuffer[Matrix.MSCALE_Y]=mScaleY;  matrix.setValues(matrixBuffer);}  }
class C{  public String fileName(){  return fileName;}  }
class C{  public Link(Vector2 point1,Vector2 point2){  super(point1,point2);}  }
class C{  public NotesEditQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  put(key,new Integer(value));  return this;}  }
class C{  protected void removeModel(EpoxyModel<?> model){  int index=getModelPosition(model);  if (index != -1) {    pauseModelListNotifications();    models.remove(index);    resumeModelListNotifications();    notifyItemRemoved(index);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200444,skilltarget);}  }
class C{  private <T>Iterator<T> touch(Iterator<T> iter){  iter.hasNext();  return iter;}  }
class C{  public boolean isSetRootMessageId(){  return this.rootMessageId != null;}  }
class C{  public boolean isFacade(){  return _facade;}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public static void dumpRecipes(String filename) throws IOException {  FileOutputStream fos=new FileOutputStream(filename);  OutputStreamWriter osw=new OutputStreamWriter(fos,"utf-8");  BufferedWriter writer=new BufferedWriter(osw);  List<?> recipes=CraftingManager.getInstance().getRecipeList();  for (  Object obj : recipes) {    if (obj == null)     continue;    if (obj instanceof IRecipe) {      ItemStack is=((IRecipe)obj).getRecipeOutput();      if (is == null)       continue;      String s=is.stackSize + "x" + is.getUnlocalizedName()+ " = ";      List<ItemStack> ingredients=getIngredients((IRecipe)obj);      boolean first=true;      for (      ItemStack isIngredient : ingredients) {        if (!first)         s+=", ";        s+=isIngredient.stackSize + "x" + isIngredient.getUnlocalizedName();        s+="(" + isIngredient.getDisplayName() + ")";        first=false;      }      s+="\n";      writer.write(s);    }  }  Iterator<?> furnaceIt=FurnaceRecipes.instance().getSmeltingList().keySet().iterator();  while (furnaceIt.hasNext()) {    ItemStack isInput=(ItemStack)furnaceIt.next();    ItemStack isOutput=(ItemStack)FurnaceRecipes.instance().getSmeltingList().get(isInput);    String s=isOutput.stackSize + "x" + isOutput.getUnlocalizedName()+ " = FUEL + "+ isInput.stackSize+ "x"+ isInput.getUnlocalizedName()+ "\n";    writer.write(s);  }  writer.close();}  }
class C{  @Override public int[] startContentModel(){  return (new int[]{STATE_START});}  }
class C{  public VideoGetAlbumsByVideoQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){  super(client,"video.getAlbumsByVideo",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  ownerId(ownerId);  videoId(videoId);}  }
class C{  public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){  if (objs == null || objs.isEmpty())   return "";  final Iterator<T> iter=objs.iterator();  final StringBuilder buffer=new StringBuilder(Strings.toString(iter.next()));  int i=1;  while (iter.hasNext()) {    final T obj=iter.next();    if (notEmpty(obj))     buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));  }  return buffer.toString();}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public DimensionMismatchException(Localizable specific,int wrong,int expected){  super(specific,Integer.valueOf(wrong),Integer.valueOf(expected));  dimension=expected;}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  public void terminate(){  if (animator != null) {    animator.cancel();  }  confettiView.terminate();}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    multiFilterBarPresenter.touchNavigatorIcon();  break;case R.id.fragment_multi_filter_toolbar:multiFilterBarPresenter.touchToolbar(getActivity());break;case R.id.fragment_multi_filter_searchBtn:multiFilterBarPresenter.touchSearchButton();break;case R.id.fragment_multi_filter_photosView:multiFilterBarPresenter.hideKeyboard();break;case R.id.fragment_multi_filter_categoryBtn:case R.id.fragment_multi_filter_categoryContainer:showPopup(0);break;case R.id.fragment_multi_filter_orientationBtn:case R.id.fragment_multi_filter_orientationContainer:showPopup(1);break;case R.id.fragment_multi_filter_featuredBtn:case R.id.fragment_multi_filter_featuredContainer:showPopup(2);break;}}  }
class C{  @Override public Node removeChild(Node oldChild) throws DOMException {  return internalRemoveChild(oldChild,false);}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {}  }
class C{  public BoardEditTopicQuery editTopic(UserActor actor,int groupId,int topicId,String title){  return new BoardEditTopicQuery(getClient(),actor,groupId,topicId,title);}  }
class C{  public Project toEntity(ProjectDTO dto){  return toEntity(dto,1);}  }
class C{  public static Zmat o(int m,int n){  Zmat I=new Zmat(m,n);  for (int i=0; i < Math.min(m,n); i++) {    I.re[i][i]=1;    I.im[i][i]=0;  }  return I;}  }
class C{  private boolean isDisplayingFolderView(){  return (folderMode && (recyclerView.getAdapter() == null || recyclerView.getAdapter() instanceof FolderPickerAdapter));}  }
class C{  public String name(){  return theType.name();}  }
class C{  public String reportInstrumentation(){  int setCount=0;  for (  List<ThrowableSet> sizeList : sizeToSets.values()) {    setCount+=sizeList.size();  }  if (setCount != registeredSets) {    throw new IllegalStateException("ThrowableSet.reportInstrumentation() assertion failure: registeredSets != list count");  }  StringBuffer buf=new StringBuffer("registeredSets: ").append(setCount).append("\naddsOfRefType: ").append(addsOfRefType).append("\naddsOfAnySubType: ").append(addsOfAnySubType).append("\naddsOfSet: ").append(addsOfSet).append("\naddsInclusionFromMap: ").append(addsInclusionFromMap).append("\naddsInclusionFromMemo: ").append(addsInclusionFromMemo).append("\naddsInclusionFromSearch: ").append(addsInclusionFromSearch).append("\naddsInclusionInterrupted: ").append(addsInclusionInterrupted).append("\naddsExclusionWithoutSearch: ").append(addsExclusionWithoutSearch).append("\naddsExclusionWithSearch: ").append(addsExclusionWithSearch).append("\nremovesOfAnySubType: ").append(removesOfAnySubType).append("\nremovesFromMap: ").append(removesFromMap).append("\nremovesFromMemo: ").append(removesFromMemo).append("\nremovesFromSearch: ").append(removesFromSearch).append("\nregistrationCalls: ").append(registrationCalls).append("\ncatchableAsQueries: ").append(catchableAsQueries).append("\ncatchableAsFromMap: ").append(catchableAsFromMap).append("\ncatchableAsFromSearch: ").append(catchableAsFromSearch).append('\n');  return buf.toString();}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  private static float calculateAspectRatio(float left,float top,float right,float bottom){  return (right - left) / (bottom - top);}  }
class C{  public void dispose(){  myFileStructure.dispose();}  }
class C{  public boolean isFrequentlyListening(){  return frequentlyListening;}  }
class C{  public final char readChar(){  return (char)readShort();}  }
class C{  public Builder stepNumberTextColor(int stepNumberTextColor){  this.stepNumberTextColor=stepNumberTextColor;  return this;}  }
class C{  public boolean rename(IFileManagerComposite composite){  return false;}  }
class C{  public boolean selectTreeItem(TreeSelectionData data){  symbolTree.clearSelection();  SelectedTreeItemEnum selectedTreeItemEnum=data.getSelection();  int layerIndex=data.getLayerIndex();  int styleIndex=data.getStyleIndex();  int featureTypeStyleIndex=data.getFeatureTypeStyleIndex();  int ruleIndex=data.getRuleIndex();  int symbolizerIndex=data.getSymbolizerIndex();  int symbolizerDetailIndex=data.getSymbolizerDetailIndex();  DefaultMutableTreeNode layerNode=null;  DefaultMutableTreeNode styleNode=null;  DefaultMutableTreeNode ftsNode=null;  DefaultMutableTreeNode ruleNode=null;  DefaultMutableTreeNode symbolizerNode=null;  DefaultMutableTreeNode symbolizerDetailNode=null;  TreePath path=null;  if ((layerIndex < 0) || (layerIndex >= rootNode.getChildCount())) {    return false;  }  layerNode=(DefaultMutableTreeNode)rootNode.getChildAt(layerIndex);  if (selectedTreeItemEnum == SelectedTreeItemEnum.LAYER) {    path=getPath(layerNode);  } else {    if (layerNode == null) {      return false;    }    if ((styleIndex < 0) || (styleIndex >= layerNode.getChildCount())) {      return false;    }    styleNode=(DefaultMutableTreeNode)layerNode.getChildAt(styleIndex);    if (selectedTreeItemEnum == SelectedTreeItemEnum.STYLE) {      path=getPath(styleNode);    } else {      if (styleNode == null) {        return false;      }      if ((featureTypeStyleIndex < 0) || (featureTypeStyleIndex >= styleNode.getChildCount())) {        return false;      }      ftsNode=(DefaultMutableTreeNode)styleNode.getChildAt(featureTypeStyleIndex);      if (selectedTreeItemEnum == SelectedTreeItemEnum.FEATURETYPESTYLE) {        path=getPath(ftsNode);      } else {        if (ftsNode == null) {          return false;        }        if ((ruleIndex < 0) || (ruleIndex >= ftsNode.getChildCount())) {          return false;        }        ruleNode=(DefaultMutableTreeNode)ftsNode.getChildAt(ruleIndex);        if (selectedTreeItemEnum == SelectedTreeItemEnum.RULE) {          path=getPath(ruleNode);        } else {          if (ruleNode == null) {            return false;          }          if ((symbolizerIndex < 0) || (symbolizerIndex >= ruleNode.getChildCount())) {            return false;          }          symbolizerNode=(DefaultMutableTreeNode)ruleNode.getChildAt(symbolizerIndex);          if ((selectedTreeItemEnum == SelectedTreeItemEnum.POINT_SYMBOLIZER) || (selectedTreeItemEnum == SelectedTreeItemEnum.LINE_SYMBOLIZER) || (selectedTreeItemEnum == SelectedTreeItemEnum.POLYGON_SYMBOLIZER)|| (selectedTreeItemEnum == SelectedTreeItemEnum.RASTER_SYMBOLIZER)|| (selectedTreeItemEnum == SelectedTreeItemEnum.TEXT_SYMBOLIZER)) {            path=getPath(symbolizerNode);          } else {            if ((symbolizerDetailIndex < 0) || (symbolizerDetailIndex >= symbolizerNode.getChildCount())) {              return false;            }            symbolizerDetailNode=(DefaultMutableTreeNode)symbolizerNode.getChildAt(symbolizerDetailIndex);            if (symbolizerDetailNode == null) {              return false;            }            if ((selectedTreeItemEnum == SelectedTreeItemEnum.POINT_FILL) || (selectedTreeItemEnum == SelectedTreeItemEnum.POLYGON_FILL) || (selectedTreeItemEnum == SelectedTreeItemEnum.STROKE)) {              path=getPath(symbolizerDetailNode);            }          }        }      }    }  }  symbolTree.setSelectionPath(path);  return true;}  }
class C{  public static void document2Stream(Document document,OutputStream target) throws MaryConfigurationException {  LSSerializer serializer=null;  DOMImplementationLS domImplLS=null;  try {    DOMImplementation implementation=DOMImplementationRegistry.newInstance().getDOMImplementation("XML 3.0");    if (implementation != null) {      domImplLS=(DOMImplementationLS)implementation.getFeature("LS","3.0");    }  } catch (  Exception iae) {    Log.d(Mary.LOG,"Cannot access dom impl registry" + iae.toString());    throw new MaryConfigurationException("Cannot access dom impl registry",iae);  }  if (domImplLS != null) {    serializer=domImplLS.createLSSerializer();    DOMConfiguration config=serializer.getDomConfig();    if (config.canSetParameter("format-pretty-print",Boolean.TRUE)) {      config.setParameter("format-pretty-print",Boolean.TRUE);    }    if (config.canSetParameter("canonical-form",Boolean.TRUE)) {      config.setParameter("canonical-form",Boolean.TRUE);    }  }  if (domImplLS != null) {    LSOutput output=domImplLS.createLSOutput();    output.setEncoding("UTF-8");    output.setByteStream(target);    serializer.write(document,output);  } else {    MaryNormalisedWriter mnw=new MaryNormalisedWriter();    try {      mnw.output(document,target);    } catch (    TransformerException te) {      Log.d(Mary.LOG,"Problem writing document with legacy writer" + te.toString());      throw new MaryConfigurationException("Problem writing document with legacy writer",te);    }  }}  }
class C{  public DoublePoint(final double[] point){  this.point=point;}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  static String format(double d){  if (d != d) {    return "Double.NaN,";  } else {    return ((d >= 0) ? "+" : "") + Double.toString(d) + "d,";  }}  }
class C{  public boolean isLoading(){  return state.equals(LOADING);}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  HandlerThread thread=new HandlerThread("FileUploaderThread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mServiceLooper=thread.getLooper();  mServiceHandler=new ServiceHandler(mServiceLooper,this);  mBinder=new FileUploaderBinder();  mUploadsStorageManager=new UploadsStorageManager(getContentResolver());  int failedCounter=mUploadsStorageManager.failInProgressUploads(UploadResult.SERVICE_INTERRUPTED);  if (failedCounter > 0) {    resurrection();  }  AccountManager am=AccountManager.get(getApplicationContext());  am.addOnAccountsUpdatedListener(this,null,false);}  }
class C{  public static List<Role> loadAll(List<Long> roles){  List<Role> list=new ArrayList<Role>();  if (roles != null) {    for (    long rid : roles) {      Role r=Role.load(rid);      if (r != null) {        list.add(r);      }    }  }  return list;}  }
class C{  public boolean canSetDate(){  return canSet(Date.class);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AndBitwiseExpr fullCopy(){  AndBitwiseExpr tree=(AndBitwiseExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Builder maxNativeZoom(Number maxNativeZoom){  this.maxNativeZoom=maxNativeZoom;  return this;}  }
class C{  public void close() throws IOException {  if (log == null)   return;  try {    log.close();  }  finally {    log=null;  }}  }
class C{  @Override protected void normalizeWhitespace(XMLString value,int fromIndex){  int end=value.offset + value.length;  for (int i=value.offset + fromIndex; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      value.ch[i]=' ';    }  }}  }
class C{  public AionClientPacket handle(ByteBuffer data,AionConnection client){  State state=client.getState();  int id=data.getShort() & 0xffff;  data.position(data.position() + 3);  return getPacket(state,id,data,client);}  }
class C{  public static Map<String,Object> testProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) >= 0)   result.put("authResult",Boolean.TRUE);  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) < 0)   result.put("authResult",Boolean.FALSE);  result.put("customerRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorMinimumPurchase",locale)));  if (processAmount == null)   result.put("authResult",null);  String refNum=UtilDateTime.nowAsString();  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","X");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  result.put("internalRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale)));  return result;}  }
class C{  public static Model create(FileDescriptorSet proto,Iterable<String> sources,Iterable<String> experiments,ExtensionPool extensionPool,DiagCollector diagCollector){  return new Model(proto,sources,experiments,extensionPool,diagCollector);}  }
class C{  @Override public ProcessChange removeControlTag(Long id,ConfigurationElementReport tagReport){  ProcessChange change=controlTagConfigTransacted.doRemoveControlTag(id,tagReport);  controlTagCache.remove(id);  return change;}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  @Override public void unsubscribe(String topic,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.unsubscribe(topic,timeout);}  }
class C{  public double compareDistributions(Distribution d1,Distribution d2){  return d1.similarityTo(d2);}  }
class C{  private void installSelectorForProtocol(Dict proxySettings,ProtocolDispatchSelector ps,String protocol){  String prefix=protocol.trim();  if (isActive(proxySettings.get(prefix + "Enable"))) {    String proxyHost=(String)proxySettings.get(prefix + "Proxy");    int proxyPort=(Integer)proxySettings.get(prefix + "Port");    FixedProxySelector fp=new FixedProxySelector(proxyHost,proxyPort);    ps.setSelector(protocol.toLowerCase(),fp);    Logger.log(getClass(),LogLevel.TRACE,"OSX uses for {0} the proxy {1}:{2}",protocol,proxyHost,proxyPort);  }}  }
class C{  public ZWaveSwitchAllCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  synchronized void store(long maxTxId) throws IOException {  if (enabled && currentMax < maxTxId) {    if (LOG.isTraceEnabled()) {      LOG.trace("Setting maxTxId to " + maxTxId);    }    String txidStr=Long.toString(maxTxId);    try {      zkc.get().setData(path,txidStr.getBytes("UTF-8"),-1);      currentMax=maxTxId;    } catch (    Exception e) {      LOG.error("Error writing new MaxTxId value {}",maxTxId,e);    }  }}  }
class C{  public ShapeRenderer(){}  }
class C{  Rotator(){  mFinished=true;}  }
class C{  public static double ssError(double[] predictedValues,double[] targetAttribute){  double ret=0;  for (int i=0; i < predictedValues.length; i++) {    ret+=Math.pow(targetAttribute[i] - predictedValues[i],2);  }  return ret;}  }
class C{  private boolean isAttributeComboBoxPopulated(){  return !populatingAttributeComboBox;}  }
class C{  private static int decodeNumber(String string){  if (string.compareToIgnoreCase("x") == 0) {    return ALL_VERSIONS;  }  return Integer.valueOf(string);}  }
class C{  public static ProbeItemDescriptor discreteToplineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,float lineWidth,Color lineColor,Color fillColor,int width,boolean fixedWidth){  if (lineColor == null && fillColor == null)   throw new IllegalArgumentException("Either lineColor or fillColor must be defined");  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,lineWidth,lineColor,fillColor,width,fixedWidth,true,false);}  }
class C{  public ColorOverlaySubfilter(int depth,float red,float green,float blue){  this.colorOverlayDepth=depth;  this.colorOverlayRed=red;  this.colorOverlayBlue=blue;  this.colorOverlayGreen=green;}  }
class C{  public boolean hasSpecificGroups(){  return _specificGroups != null;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void createGraphs(){  String sUsableString=new StringBuilder().append(DataString).toString();  if (TextPreprocessor != null)   sUsableString=TextPreprocessor.preprocess(sUsableString);  int iLen=DataString.length();  HashMap hTokenAppearence=new HashMap();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    String sCurNGram=null;    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (hTokenAppearence.containsKey(sCurNGram))       hTokenAppearence.put(sCurNGram,((Double)hTokenAppearence.get(sCurNGram)).doubleValue() + 1.0); else       hTokenAppearence.put(sCurNGram,1.0);    }  }  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    Vector PrecedingNeighbours=new Vector();    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iNGramSize);    String sCurNGram="";    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      String[] aFinalNeighbours;      if (Normalizer != null)       aFinalNeighbours=(String[])Normalizer.normalize(null,PrecedingNeighbours.toArray()); else {        aFinalNeighbours=new String[PrecedingNeighbours.size()];        PrecedingNeighbours.toArray(aFinalNeighbours);      }      createEdgesConnecting(gGraph,sCurNGram,java.util.Arrays.asList(aFinalNeighbours),hTokenAppearence);      PrecedingNeighbours.add(sCurNGram);      if (PrecedingNeighbours.size() > CorrelationWindow)       PrecedingNeighbours.removeElementAt(0);    }  }}  }
class C{  protected void addToAnimation(ChromeAnimation.Animation<Animatable<?>> component){  if (mLayoutAnimations == null || mLayoutAnimations.finished()) {    onAnimationStarted();    mLayoutAnimations=new ChromeAnimation<Animatable<?>>();    mLayoutAnimations.start();  }  component.start();  mLayoutAnimations.add(component);  requestUpdate();}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  HandlerThread thread=new HandlerThread("Operations thread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mOperationsHandler=new ServiceHandler(thread.getLooper(),this);  mOperationsBinder=new OperationsServiceBinder(mOperationsHandler);  thread=new HandlerThread("Syncfolder thread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mSyncFolderHandler=new SyncFolderHandler(thread.getLooper(),this);}  }
class C{  public static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public void endNull(){}  }
class C{  @Override public void fileAdded(Path f){  if (f != null) {    Path path=f.getFileName();    if (path != null) {      String filename=path.toString();      if (Files.isRegularFile(f)) {        if (validFile(filename)) {          try {            addFile(filename);            sort(this);            FileSystemNodeManager.refreshNode(this);          } catch (          Throwable t) {          }        }      } else {        boolean descend=false;        try {          addFolder(descend,filename);        } catch (        Throwable t) {        }        sort(this);        FileSystemNodeManager.refreshNode(this);      }    }  }}  }
class C{  private float[] doFitPlane(float u,float v,double rgbTimestamp){  TangoXyzIjData xyzIj=tangoPointCloudManager.getLatestXyzIj();  if (xyzIj == null) {    return null;  }  TangoPoseData colorTdepthPose=TangoSupport.calculateRelativePose(rgbTimestamp,TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR,xyzIj.timestamp,TangoPoseData.COORDINATE_FRAME_CAMERA_DEPTH);  IntersectionPointPlaneModelPair intersectionPointPlaneModelPair=TangoSupport.fitPlaneModelNearClick(xyzIj,tangoCameraIntrinsics,colorTdepthPose,u,v);  TangoMatrixTransformData transform=TangoSupport.getMatrixTransformAtTime(xyzIj.timestamp,TangoPoseData.COORDINATE_FRAME_START_OF_SERVICE,TangoPoseData.COORDINATE_FRAME_CAMERA_DEPTH,TANGO_SUPPORT_ENGINE_OPENGL,TANGO_SUPPORT_ENGINE_TANGO);  if (transform.statusCode == TangoPoseData.POSE_VALID) {    float[] openGlTPlane=calculatePlaneTransform(intersectionPointPlaneModelPair.intersectionPoint,intersectionPointPlaneModelPair.planeModel,transform.matrix);    return openGlTPlane;  } else {    Log.w(TAG,"Can't get depth camera transform at time " + xyzIj.timestamp);    return null;  }}  }
class C{  public synchronized void resetWeather(){  Set<WeatherKey> loadedWeathers=new HashSet<WeatherKey>(worldZoneWeathers.keySet());  for (  WeatherKey key : loadedWeathers) {    WeatherEntry[] oldEntries=worldZoneWeathers.get(key);    for (int i=0; i < oldEntries.length; i++) {      oldEntries[i]=new WeatherEntry(oldEntries[i].getZoneId(),0);    }    onWeatherChange(key.getMapId(),null);  }}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  private Index(DataInput raf) throws IOException, MaryConfigurationException {  assert raf != null : "null argument";  load(raf);}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  text=handleCharacters(text);  if (fDocumentHandler != null) {    if (fNormalizeData && fUnionType) {      if (augs != null)       fDocumentHandler.characters(fEmptyXMLStr,augs);    } else {      fDocumentHandler.characters(text,augs);    }  }}  }
class C{  private void initializeCompareConfiguration(){  CompareConfiguration cc=getCompareConfiguration();  String leftLabel="Merged - " + fDestinationResource.getName();  String rightLabel="Theirs - " + fTheirsResource.getName();  String ancestorLabel="Ancestor -" + fAncestorResource.getName();  cc.setLeftLabel(leftLabel);  cc.setRightLabel(rightLabel);  cc.setAncestorLabel(ancestorLabel);}  }
class C{  public static boolean isInTinkerPatchServiceProcess(Context context){  String process=getProcessName(context);  String service=TinkerServiceInternals.getTinkerPatchServiceName(context);  if (service == null || service.length() == 0) {    return false;  }  return process.equals(service);}  }
class C{  protected double homoscedasticTTest(double m1,double m2,double v1,double v2,double n1,double n2) throws MathIllegalArgumentException, MathIllegalStateException {  final double t=FastMath.abs(homoscedasticT(m1,m2,v1,v2,n1,n2));  final double degreesOfFreedom=n1 + n2 - 2;  final TDistribution distribution=new TDistribution(degreesOfFreedom);  return 2.0 * distribution.cumulativeProbability(-t);}  }
class C{  private void badRead(int numBytes) throws LogException {  throw new LogException("length=" + String.valueOf(length) + ", numBytes="+ String.valueOf(numBytes));}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public XIntArray(byte bits){  segments=new int[0][];  SEGMENT_BITS=bits;  SEGMENT_SIZE=(1 << (SEGMENT_BITS));  SEGMENT_MASK=SEGMENT_SIZE - 1;}  }
class C{  public PlayerLocale(){  GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.Builder builder=GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.newBuilder();  builder.setCountry(Locale.getDefault().getCountry()).setLanguage(Locale.getDefault().getLanguage());  playerLocale=builder.build();}  }
class C{  public boolean hasNonEmptyIntersection(PointsToSet other){  return other != null;}  }
class C{  public static boolean equals(IBinding[] b1,IBinding[] b2){  Assert.isNotNull(b1);  if (b1 == b2)   return true;  if (b2 == null)   return false;  if (b1.length != b2.length)   return false;  for (int i=0; i < b1.length; i++) {    if (!Bindings.equals(b1[i],b2[i]))     return false;  }  return true;}  }
class C{  @Override public Node previousNode(){  if (fDetach) {    throw new DOMException(DOMException.INVALID_STATE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_STATE_ERR",null));  }  if (fRoot == null || fCurrentNode == null)   return null;  Node previousNode=fCurrentNode;  boolean accepted=false;  accepted_loop:   while (!accepted) {    if (fForward && previousNode != null) {      previousNode=fCurrentNode;    } else {      previousNode=previousNode(previousNode);    }    fForward=false;    if (previousNode == null)     return null;    accepted=acceptNode(previousNode);    if (accepted) {      fCurrentNode=previousNode;      return fCurrentNode;    } else     continue accepted_loop;  }  return null;}  }
class C{  public Iterator iterator(){  return nodes.iterator();}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);}  }
class C{  @Nullable public static WorkingSet calculateWorkingSet(WorkspaceRoot workspaceRoot,String upstreamSha){  String gitRoot=getConsoleOutput(workspaceRoot,"git","rev-parse","--show-toplevel");  if (gitRoot == null) {    return null;  }  GitStatusLineProcessor processor=new GitStatusLineProcessor(workspaceRoot,gitRoot);  ByteArrayOutputStream stderr=new ByteArrayOutputStream();  int retVal=ExternalTask.builder(workspaceRoot).args("git","diff","--name-status","--no-renames",upstreamSha).stdout(LineProcessingOutputStream.of(processor)).stderr(stderr).build().run();  if (retVal != 0) {    LOG.error(stderr);    return null;  }  String untrackedFilesOutput=getConsoleOutput(workspaceRoot,"git","ls-files","--others","--exclude-standard");  if (untrackedFilesOutput == null) {    return null;  }  List<WorkspacePath> untrackedFiles=Arrays.asList(untrackedFilesOutput.split("\n")).stream().filter(null).filter(null).map(null).collect(Collectors.toList());  return new WorkingSet(ImmutableList.<WorkspacePath>builder().addAll(processor.addedFiles).addAll(untrackedFiles).build(),ImmutableList.copyOf(processor.modifiedFiles),ImmutableList.copyOf(processor.deletedFiles));}  }
class C{  public void updateFonts(){  final Set<String> openFiles=getCurrentlyOpenRemoteFiles();  for (int i=0; i < fileTree.getRowCount(); i++) {    DefaultMutableTreeNode v=(DefaultMutableTreeNode)fileTree.getPathForRow(i).getLastPathComponent();    String file=leaf2file.get(v);    if (file != null) {      if (openFiles.contains(service.getServerAndFileName(file))) {        int pos=file.lastIndexOf(File.separator);        if (pos == -1)         v.setUserObject(file); else         v.setUserObject(file.substring(pos + 1));      } else {        String user=v.getUserObject().toString();        if (!user.startsWith("<html>"))         v.setUserObject("<html><b>" + user + "</b></html>");      }    }  }}  }
class C{  public static void realTransform(double data[],boolean inverse){  double c1=0.5;  int n=data.length;  double twoPi=-MathUtils.TWOPI;  if (inverse)   twoPi=MathUtils.TWOPI;  double delta=twoPi / n;  double wStepReal=Math.cos(delta);  double wStepImag=Math.sin(delta);  double wReal=wStepReal;  double wImag=wStepImag;  double c2;  if (!inverse) {    c2=-0.5;    transform(data,false);  } else {    c2=0.5;  }  int n4=n >> 2;  for (int i=1; i < n4; i++) {    int twoI=i << 1;    int twoIPlus1=twoI + 1;    int nMinusTwoI=n - twoI;    int nMinusTwoIPlus1=nMinusTwoI + 1;    double h1r=c1 * (data[twoI] + data[nMinusTwoI]);    double h1i=c1 * (data[twoIPlus1] - data[nMinusTwoIPlus1]);    double h2r=-c2 * (data[twoIPlus1] + data[nMinusTwoIPlus1]);    double h2i=c2 * (data[twoI] - data[nMinusTwoI]);    data[twoI]=h1r + wReal * h2r - wImag * h2i;    data[twoIPlus1]=h1i + wReal * h2i + wImag * h2r;    data[nMinusTwoI]=h1r - wReal * h2r + wImag * h2i;    data[nMinusTwoIPlus1]=-h1i + wReal * h2i + wImag * h2r;    double oldWReal=wReal;    wReal=oldWReal * wStepReal - wImag * wStepImag;    wImag=oldWReal * wStepImag + wImag * wStepReal;  }  if (!inverse) {    double tmp=data[0];    data[0]+=data[1];    data[1]=tmp - data[1];    data[n / 2 + 1]=-data[n / 2 + 1];  } else {    double tmp=data[0];    data[0]=0.5 * (tmp + data[1]);    data[1]=0.5 * (tmp - data[1]);    data[n / 2 + 1]=-data[n / 2 + 1];    transform(data,true);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NOTIFY_LOGIN_BUDDY(String value0){  return new SM_SYSTEM_MESSAGE(1300915,value0);}  }
class C{  public static void splitAndLog(String tag,String text){  ArrayList<String> messageList=Utils.splitString(text);  for (  String message : messageList) {    if (isDebug()) {      Log.d(tag,message);    }  }}  }
class C{  public final boolean forall(P2SetVisitor v){  for (Iterator<Node> it=new ArrayList<Node>(s).iterator(); it.hasNext(); ) {    v.visit(it.next());  }  return v.getReturnValue();}  }
class C{  public static String timeStampToString(Timestamp stamp,String dateTimeFormat,TimeZone tz,Locale locale){  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);  return dateFormat.format(stamp);}  }
class C{  int onUpdateAll(String tableName,ContentValues values,String... conditions){  return doUpdateAllAction(tableName,values,conditions);}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    throw new InternalError();  }}  }
class C{  public static void printSyntax(){  System.out.println("Usage: " + grammarAndContentAnalysis.class.getName() + "-corpusDir=xxxx The corpus base directory.\n"+ "-peerDir=xxxx The peer document set base directory.\n"+ "-modelDir=xxxx The model document set base directory.\n"+ "[-minChar=#] The min character n-gram rank."+ "[-maxChar=#] The max character n-gram rank."+ "[-charDist=#] The neighbourhood window for characters."+ "[-minWord=#] The min word n-gram rank."+ "[-maxWord=#] The max word n-gram rank."+ "[-wordDist=#] The neighbourhood window for words."+ "[-flatCorpusDir] If provided, indicates that the corpus directory does not have"+ " a subdirectory for each category / theme of texts. Thus, it is all contained "+ "in a single directory."+ "[-categoryLimit=#] The maximum number of categories to examine.\n"+ "[-modelFile=filename] The model file to use either as input or as output for the grammar"+ " model."+ "[-perCategoryModel] If provided, then a different model is created for every iteration. Otherwise,"+ " the model from the first iteration is used in all following ones.\n"+ "NOTE: The files should preferrably be named after the DUC format:\n"+ "TopicID.M.wordLength.Assessor.PeerSystemID");}  }
class C{  <T>Property(Function<AuditLogEntry,T> propertyExtractor,BiFunction<T,T,Integer> comparisonFunction){  this.propertyExtractor=propertyExtractor;  this.comparisonFunction=comparisonFunction;}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  public MulExpr newMulExpr(Value op1,Value op2){  return new GMulExpr(op1,op2);}  }
class C{  public void add(String param){  fStrings.add(param);}  }
class C{  public void stopExecution(){  interrupt();}  }
class C{  public static <K>BigDecimal addToBigDecimalInMap(Map<K,Object> theMap,K mapKey,BigDecimal addNumber){  Object currentNumberObj=theMap.get(mapKey);  BigDecimal currentNumber=null;  if (currentNumberObj == null) {    currentNumber=ZERO_BD;  } else   if (currentNumberObj instanceof BigDecimal) {    currentNumber=(BigDecimal)currentNumberObj;  } else   if (currentNumberObj instanceof Double) {    currentNumber=new BigDecimal(((Double)currentNumberObj).doubleValue());  } else   if (currentNumberObj instanceof Long) {    currentNumber=new BigDecimal(((Long)currentNumberObj).longValue());  } else {    throw new IllegalArgumentException("In addToBigDecimalInMap found a Map value of a type not supported: " + currentNumberObj.getClass().getName());  }  if (addNumber == null || ZERO_BD.compareTo(addNumber) == 0) {    return currentNumber;  }  currentNumber=currentNumber.add(addNumber);  theMap.put(mapKey,currentNumber);  return currentNumber;}  }
class C{  private void drawComponentBackground(@NotNull Graphics2D gc,@NotNull NlComponent component){  if (component.viewInfo != null) {    int x=getSwingX(myScreenView,component.x);    int y=getSwingY(myScreenView,component.y);    int w=getSwingDimension(myScreenView,component.w);    int h=getSwingDimension(myScreenView,component.h);    Graphics2D g=(Graphics2D)gc.create();    if (!component.isRoot()) {      g.setPaint(new LinearGradientPaint((float)x,(float)y,(float)(x + BACKGROUND_LINE_SPACE_PX),(float)(y + BACKGROUND_LINE_SPACE_PX),COMPONENT_BACKGROUND_GRADIENT_FRACTIONS,COMPONENT_BACKGROUND_GRADIENT_COLORS,MultipleGradientPaint.CycleMethod.REFLECT));      g.fillRect(x,y,w,h);    }    g.setColor(BLUEPRINT_FG_COLOR);    Stroke prevStroke=g.getStroke();    g.setStroke(BLUEPRINT_COMPONENT_STROKE);    g.drawRect(x,y,w,h);    g.setStroke(prevStroke);    g.dispose();  }}  }
class C{  public void pushDirname(File directory){  if (!directory.isDirectory()) {    throw new IllegalArgumentException("Only directories may be pushed!");  }  mDirectories.insert(directory.getName(),0);  mCurrentDir=directory;}  }
class C{  @Override public void reset(){  dataIter=delimitedData.iterator();}  }
class C{  public static <T extends GenericEntity>List<T> orderBy(Collection<T> values,List<String> orderBy){  if (values == null)   return null;  if (values.size() == 0)   return new LinkedList<T>();  if (UtilValidate.isEmpty(orderBy)) {    List<T> newList=new LinkedList<T>();    newList.addAll(values);    return newList;  }  List<T> result=new LinkedList<T>();  result.addAll(values);  if (Debug.verboseOn())   Debug.logVerbose("Sorting " + values.size() + " values, orderBy="+ orderBy.toString(),module);  Collections.sort(result,new OrderByList(orderBy));  return result;}  }
class C{  public static void primeLocationForGeoHeader(Context context){  if (!hasGeolocationPermission(context))   return;  GeolocationTracker.refreshLastKnownLocation(context,REFRESH_LOCATION_AGE);}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public String insertSelective(User record){  SQL sql=new SQL();  sql.INSERT_INTO("user");  if (record.getId() != null) {    sql.VALUES("id","#{id,jdbcType=INTEGER}");  }  if (record.getUsername() != null) {    sql.VALUES("username","#{username,jdbcType=VARCHAR}");  }  if (record.getPsw() != null) {    sql.VALUES("psw","#{psw,jdbcType=VARCHAR}");  }  return sql.toString();}  }
class C{  public void descreaseNestingLevel(){  currentNestingLevel--;}  }
class C{  public static void apply(Taxa taxa,Distances distances,PhyloTreeView treeView){  if (instance == null)   instance=new UPGMA();  instance.computeUPMATree(taxa,distances,treeView.getPhyloTree());  instance.embedTree(treeView);}  }
class C{  private void writeSudoUserinformationToFile(){  PrintWriter pw;  try {    pw=new PrintWriter(Settings.sServerInfo);    pw.println(EncryptionManager.encrypt64bits(sSudoID));    pw.println(EncryptionManager.encrypt64bits(sSudoPassword));    pw.println(EncryptionManager.encrypt64bits(sEmailAddress));    pw.println(EncryptionManager.encrypt64bits(Boolean.toString(isMakeSudoId)));    pw.close();  } catch (  FileNotFoundException e) {    System.out.println("serverinfo.jrc do not exist");  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Object remove(int index){  Object o=opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  public String encode(final Cigar cigar){  if (cigar.isEmpty()) {    return "*";  }  final StringBuilder ret=new StringBuilder();  for (  final CigarElement cigarElement : cigar.getCigarElements()) {    ret.append(cigarElement.getLength());    ret.append(cigarElement.getOperator());  }  return ret.toString();}  }
class C{  private void internal_updateSymbolDoubleField(Map<String,String> options,FieldIdEnum field,String key){  double value=fieldConfigVisitor.getDouble(field);  Double defaultValue=(Double)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  void removeNode(BinarySearchTreeNode<E> node){  boolean isLeftChild=node.isLeftChild();  if (node.left != null && node.right != null) {    BinarySearchTreeNode<E> min=this.getMinimum(node.right);    if (min != node.right) {      min.parent.left=min.right;      if (min.right != null) {        min.right.parent=min.parent;      }      min.right=node.right;    }    if (node.right != null)     node.right.parent=min;    if (node.left != null)     node.left.parent=min;    if (node == this.root) {      this.root=min;    } else     if (isLeftChild) {      node.parent.left=min;    } else {      node.parent.right=min;    }    min.left=node.left;    min.parent=node.parent;    if (this.selfBalancing)     this.balanceTree(min.parent);  } else   if (node.left != null) {    if (node == this.root) {      this.root=node.left;    } else     if (isLeftChild) {      node.parent.left=node.left;    } else {      node.parent.right=node.left;    }    if (node.left != null) {      node.left.parent=node.parent;    }  } else   if (node.right != null) {    if (node == this.root) {      this.root=node.right;    } else     if (isLeftChild) {      node.parent.left=node.right;    } else {      node.parent.right=node.right;    }    if (node.right != null) {      node.right.parent=node.parent;    }  } else {    if (node == this.root) {      this.root=null;    } else     if (isLeftChild) {      node.parent.left=null;    } else {      node.parent.right=null;    }  }  this.size--;}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public void put(final T key,final T val){  try (Txn<T> txn=env.txnWrite()){    put(txn,key,val);    txn.commit();  } }  }
class C{  protected BoardUnfixTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isPressed(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.isPressed();}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public int[] readLastBytes(int bytes){  while (pos - bytes < 1) {    bytes--;  }  int[] a=null;  int b=0;  while (bytes > 0) {    a[b]+=((int)arr[pos - bytes]);    bytes--;    b++;  }  return a;}  }
class C{  public static void put(String key,int value){}  }
class C{  public PhotosGetCommentsQueryWithExtended accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  private void handleMultiInstanceEncapResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.trace("Process Multi-instance Encapsulation");  int instance=serialMessage.getMessagePayloadByte(offset);  int commandClassCode=serialMessage.getMessagePayloadByte(offset + 1);  CommandClass commandClass=CommandClass.getCommandClass(commandClassCode);  if (commandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class 0x%02x",getNode().getNodeId(),commandClassCode));    return;  }  logger.debug(String.format("NODE %d: Requested Command Class = %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClassCode));  ZWaveCommandClass zwaveCommandClass=null;  if (getVersion() >= 2) {    ZWaveEndpoint endpoint=endpoints.get(instance);    if (endpoint != null) {      zwaveCommandClass=endpoint.getCommandClass(commandClass);      if (zwaveCommandClass == null) {        logger.warn(String.format("NODE %d: CommandClass %s (0x%02x) not implemented by endpoint %d, fallback to main node.",getNode().getNodeId(),commandClass.getLabel(),commandClassCode,instance));      }    }  }  if (zwaveCommandClass == null) {    zwaveCommandClass=getNode().getCommandClass(commandClass);  }  if (zwaveCommandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClassCode));    return;  }  logger.debug("NODE {}: Instance = {}, calling handleApplicationCommandRequest.",getNode().getNodeId(),instance);  zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,instance);}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer fetchSize(int fetchSize){  this.fetchSize=fetchSize;  return this;}  }
class C{  public int addAdjustment(GenericValue adjustment){  itemAdjustments.add(adjustment);  return itemAdjustments.indexOf(adjustment);}  }
class C{  public WidgetsGetCommentsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_USER_NOT_FOUND(String value0){  return new SM_SYSTEM_MESSAGE(1300559,value0);}  }
class C{  public float[] generateTransformedValuesScatter(IScatterDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)((to - from) * phaseX + 1) * 2;  if (valuePointsForGenerateTransformedValuesScatter.length != count) {    valuePointsForGenerateTransformedValuesScatter=new float[count];  }  float[] valuePoints=valuePointsForGenerateTransformedValuesScatter;  for (int j=0; j < count; j+=2) {    Entry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getX();      valuePoints[j + 1]=e.getY() * phaseY;    } else {      valuePoints[j]=0;      valuePoints[j + 1]=0;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200464,skilltarget,skillcaster,skillname);}  }
class C{  public synchronized void reset(){}  }
class C{  @Deprecated public static byte[] imageToBytes(Image image){  BufferedImage temp=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=temp.createGraphics();  graphics.drawImage(image,0,0,null);  graphics.dispose();  int[] pixels=new int[temp.getWidth() * temp.getHeight()];  temp.getRGB(0,0,temp.getWidth(),temp.getHeight(),pixels,0,temp.getWidth());  byte[] result=new byte[temp.getWidth() * temp.getHeight()];  for (int i=0; i < pixels.length; i++) {    result[i]=matchColor(new Color(pixels[i],true));  }  return result;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  @PUT @Timed @Path("/cacheStatus") @Consumes("application/json") public Response updateDimensionLastUpdated(String json){  LOG.debug("Update cacheStatus using json: {}",json);  Map<String,String> postDataMap;  try {    postDataMap=mapper.readValue(json,new TypeReference<Map<String,String>>(){    });    if (!postDataMap.containsKey("cacheStatus")) {      LOG.error("Missing cacheStatus in json: {}",json);      return Response.status(BAD_REQUEST).entity("Missing cacheStatus in json: " + json).build();    }  } catch (  IOException e) {    LOG.error("Failed to update lastUpdated: {}",e);    return Response.status(BAD_REQUEST).entity("Exception: " + e).build();  }  LOG.info("Successfully updated cacheStatus to: {}",postDataMap.get("cacheStatus"));  return Response.status(Status.OK).build();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public SilenceDoubleDataSource(long n){  super();  this.n=n;  dataLength=n;}  }
class C{  public String post(Context context,String url,HttpEntity entity,String contentType) throws HttpException {  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,context);}  }
class C{  public static long tankiness(final Pokemon p){  return tankiness(p.getPokemonId(),p.getIndividualDefense(),p.getIndividualStamina());}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public static String generateWKTString(WKTGeometry wktGeometry,boolean formatText){  if (wktGeometry == null) {    return null;  }  StringBuilder sb=new StringBuilder();  sb.append(WKT_PREFIX);  if (wktGeometry.getGeometryType() != null) {    sb.append(wktGeometry.getGeometryType());    String geometryTypeName=wktGeometry.getGeometryType().getName();    if ((geometryTypeName.compareTo(WKT_MULTILINESTRING) == 0) || (geometryTypeName.compareTo(WKT_POLYGON) == 0) || (geometryTypeName.compareTo(WKT_MULTIPOINT) == 0)) {      sb.append("(");      if (formatText) {        sb.append("\n");      }      int index=0;      for (int segmentIndex=0; segmentIndex < wktGeometry.getNoOfSegments(); segmentIndex++) {        List<WKTSegmentList> segmentList=wktGeometry.getSegmentList(segmentIndex);        if (segmentList != null) {          boolean makeFirstAndLastSame=false;          if (geometryTypeName.compareTo(WKT_POLYGON) == 0) {            makeFirstAndLastSame=true;          }          for (          WKTSegmentList pointList : segmentList) {            if (index > 0) {              if (formatText) {                sb.append(",\n ");              } else {                sb.append(", ");              }            }            if (formatText) {              sb.append("\t");            }            boolean useBrackets=geometryTypeName.compareTo(WKT_MULTIPOINT) != 0;            sb.append(pointList.getWKTString(useBrackets,makeFirstAndLastSame));            index++;          }        }      }      if (formatText) {        sb.append("\n");      }      sb.append(")");    } else     if (geometryTypeName.compareTo(WKT_MULTIPOLYGON) == 0) {      sb.append("(");      if (formatText) {        sb.append("\n");      }      for (int multiIndex=0; multiIndex < wktGeometry.getNoOfSegments(); multiIndex++) {        if (multiIndex > 0) {          if (formatText) {            sb.append(",\n ");          } else {            sb.append(", ");          }        }        if (formatText) {          sb.append("\t");        }        List<WKTSegmentList> segmentList=wktGeometry.getSegmentList(multiIndex);        if (segmentList != null) {          sb.append("(");          int index=0;          for (          WKTSegmentList pointList : segmentList) {            if (index > 0) {              sb.append(", ");            }            sb.append(pointList.getWKTString(true,true));            index++;          }          sb.append(")");        }      }      if (formatText) {        sb.append("\n");      }      sb.append(")");    } else {      List<WKTSegmentList> segmentList=wktGeometry.getSegmentList(0);      if (segmentList != null) {        if (geometryTypeName.compareTo(WKT_POINT) == 0) {          for (          WKTSegmentList pointList : segmentList) {            sb.append(pointList.getWKTString());          }        } else         if (geometryTypeName.compareTo(WKT_LINESTRING) == 0) {          for (          WKTSegmentList pointList : segmentList) {            sb.append(pointList.getWKTString());          }        }      }    }  }  return sb.toString();}  }
class C{  protected AdsGetSuggestionsQueryWithCities cities(String value){  return unsafeParam("cities",value);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("set showAxes=" + (!isSelected()) + ";");}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  public void modifyLookupAttributes(Entry[] attrSetTemplates,Entry[] attrSets){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"modifyLookupAttributes");  }  mgr.modifyAttributes(attrSetTemplates,attrSets,true);  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"modifyLookupAttributes");  }}  }
class C{  public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,List<Integer> userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatus.class));  groupId(groupId);  userIds(userIds);}  }
class C{  public void load(String fileName,String mode) throws IOException {  this.fileName=fileName;  this.readerWriter=new InputOutputReaderWriter(fileName,mode);  headerSectionRMA6.read(readerWriter);  readerWriter.seek(FooterSectionRMA6.readStartFooterSection(readerWriter));  footerSectionRMA6.read(readerWriter);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COOL_TIME_MIN(String worldname0,String value1){  return new SM_SYSTEM_MESSAGE(1400028,worldname0,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MAIL_CANT_FOR_YOU_EXCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1400117,value0);}  }
class C{  public static Long parseDate(Object value){  if (value == null) {    return null;  }  String str=(String)value;  try {    return Instant.parse(str).toEpochMilli();  } catch (  DateTimeParseException e) {    if (str.length() == 0) {      return null;    }    SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");    try {      return sdf.parse(str).getTime();    } catch (    ParseException e1) {      throw new IllegalArgumentException("Invalid datetime '" + str + "'; "+ e1.getMessage());    }  }}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  public static boolean isGlEs2Supported(Context context){  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  ConfigurationInfo configurationInfo=activityManager.getDeviceConfigurationInfo();  return configurationInfo != null && configurationInfo.reqGlEsVersion >= 0x20000;}  }
class C{  @Override public void pcdata(Augmentations augs){  fMixed=true;  if (fDTDGrammar != null)   fDTDGrammar.pcdata(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.pcdata(augs);  }}  }
class C{  public TakeModifiers remove(TakeModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  public AttributeSelection internalCreateAttrButton(Class<?> classType,FieldConfigBase field,boolean rasterSymbol){  AttributeSelection buttonAttrLabel=AttributeSelection.createAttributes(classType,field,rasterSymbol);  buttonAttrLabel.setBounds(xPos + BasePanel.ATTRIBUTE_BTN_X,0,AttributeSelection.getPanelWidth(),BasePanel.WIDGET_HEIGHT);  add(buttonAttrLabel);  return buttonAttrLabel;}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  public void shutdown() throws SQLException {  Statement st=connection.createStatement();  st.execute("SHUTDOWN");  connection.close();}  }
class C{  public void flush() throws IOException {  dis.flush();}  }
class C{  public static void execute(Runnable runnable){  if (runnable == null) {    return;  }  new Task(runnable).executeOnExecutor(mPool);}  }
class C{  public TopicMatcher(){  subscriptionsStore=new SubscriptionsStore();  subscriptionsStore.init(new MapBasedSubscriptionStore());}  }
class C{  @Override public void exitApplication(){  UILayoutFactory.writeLayout(null);  System.exit(0);}  }
class C{  public void addAnnouncementToList(Timestamp unixTime,String announcement){  this.announcementList.put(unixTime,announcement);}  }
class C{  public static String bind(String key,Object[] args){  try {    return MessageFormat.format(bind(key),args);  } catch (  MissingResourceException e) {    return key;  }catch (  NullPointerException e) {    return "!" + key + "!";  }}  }
class C{  public static void updateSubscriptionTabContextMenu(final Tab tab,final MqttSubscription subscription){  logger.debug("Updating subscription tab context menu [{}, {}, {}]",subscription.getTopic(),subscription.getConnection().getConnectionStatus(),subscription.isActive());  tab.getGraphic().getStyleClass().remove(tab.getGraphic().getStyleClass().size() - 1);  if (subscription.isActive()) {    tab.getGraphic().getStyleClass().add("subscribed");    tab.getTooltip().setText("Status: " + "subscribed");  } else {    tab.getGraphic().getStyleClass().add("unsubscribed");    tab.getTooltip().setText("Status: " + "unsubscribed");  }  if (subscription.getConnection().getConnectionStatus().equals(ConnectionStatus.CONNECTED)) {    if (subscription.isActive()) {      tab.getContextMenu().getItems().get(0).setDisable(false);      tab.getContextMenu().getItems().get(1).setDisable(true);    } else {      tab.getContextMenu().getItems().get(0).setDisable(true);      tab.getContextMenu().getItems().get(1).setDisable(false);    }    tab.getContextMenu().getItems().get(2).setDisable(false);  } else {    tab.getContextMenu().getItems().get(0).setDisable(true);    tab.getContextMenu().getItems().get(1).setDisable(true);    tab.getContextMenu().getItems().get(2).setDisable(true);  }}  }
class C{  public static void updateIncognitoNotification(PendingIntent intent){  Context context=ApplicationStatus.getApplicationContext();  String actionMessage=context.getResources().getString(R.string.close_all_incognito_notification);  String title=context.getResources().getString(R.string.app_name);  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setContentTitle(title).setContentIntent(intent).setContentText(actionMessage).setOngoing(true).setVisibility(Notification.VISIBILITY_SECRET).setSmallIcon(R.drawable.incognito_statusbar).setLocalOnly(true);  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(INCOGNITO_TABS_OPEN_TAG,INCOGNITO_TABS_OPEN_ID,builder.build());}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public static boolean isUiThread(){  return Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId();}  }
class C{  public MessagesGetByIdQuery(VkApiClient client,Actor actor,int... messageIds){  super(client,"messages.getById",GetByIdResponse.class);  accessToken(actor.getAccessToken());  messageIds(messageIds);}  }
class C{  private void populatePrefixMap(SelectedTreeItemEnum item,SelectedTreeItemEnum parentItem,Map<SelectedTreeItemEnum,String> initialPrefixMap){  prefixMap.put(item,prefixMap.get(parentItem) + initialPrefixMap.get(item));}  }
class C{  public void repositoryRemoved(ISVNRepositoryLocation repository){  for (  ISVNListener listener : repositoryListeners) {    listener.repositoryRemoved(repository);  }}  }
class C{  @Override @Test public void testInverseCumulativeProbabilities(){  RealDistribution dist=getDistribution();  for (  double x : getCumulativeTestValues()) {    assertEquals(1,dist.inverseCumulativeProbability(x),0);  }}  }
class C{  public void dumpBinary(DataOutputStream os) throws IOException {  sampleInfo.dumpBinary(os);  os.writeInt(samples.length);  for (int i=0; i < samples.length; i++) {    samples[i].dumpBinary(os);  }}  }
class C{  public ServiceConfigurationError(Throwable x){  super(x);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public boolean hasNoDragOffset(){  return mTransOffsetX <= 0 && mTransOffsetY <= 0;}  }
class C{  public void incrementAll(Collection<? extends E> collection,double count){  for (  E key : collection) {    incrementCount(key,count);  }  dirty=true;}  }
class C{  public Location subtract(Location vec){  if (vec == null || vec.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot add Locations of differing worlds");  }  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public static PointSymbolizer createDefaultPointSymbolizer(){  String geometryFieldName=null;  Expression geometryField=ff.property(geometryFieldName);  List<GraphicalSymbol> symbolList=new ArrayList<GraphicalSymbol>();  Stroke stroke=null;  AnchorPoint anchorPoint=null;  Displacement displacement=null;  Fill fill=styleFactory.createFill(ff.literal(DEFAULT_MARKER_COLOUR));  GraphicalSymbol symbol=styleFactory.mark(ff.literal(DEFAULT_MARKER_SYMBOL),fill,stroke);  symbolList.add(symbol);  Graphic graphic=styleFactory.graphic(symbolList,ff.literal(DEFAULT_COLOUR_OPACITY),ff.literal(DEFAULT_MARKER_SYMBOL_SIZE),ff.literal(0.0),anchorPoint,displacement);  PointSymbolizer newPointSymbolizer=(PointSymbolizer)styleFactory.pointSymbolizer(Localisation.getString(SLDTreeTools.class,"TreeItem.newMarker"),geometryField,null,null,graphic);  return newPointSymbolizer;}  }
class C{  static <T>ForNext forComp(AnyVal<T> any,DoubleStream stream){  return new ForImpl(any,null);}  }
class C{  protected void tagCasts(){  for (Iterator<Unit> sIt=((UnitGraph)graph).getBody().getUnits().iterator(); sIt.hasNext(); ) {    final Stmt s=(Stmt)sIt.next();    if (s instanceof AssignStmt) {      AssignStmt as=(AssignStmt)s;      Value rhs=as.getRightOp();      if (rhs instanceof CastExpr) {        CastExpr cast=(CastExpr)rhs;        Type t=cast.getCastType();        if (t instanceof RefType) {          if (cast.getOp() instanceof Local) {            Local l=(Local)cast.getOp();            LocalTypeSet set=(LocalTypeSet)getFlowBefore(s);            s.addTag(new CastCheckTag(set.get(set.indexOf(l,(RefType)t))));          } else {            NullConstant nc=(NullConstant)cast.getOp();            s.addTag(new CastCheckTag(true));          }        }      }    }  }}  }
class C{  public static Bitmap normalize(Context context,Uri selectedImage,int maxWidth,int maxHeight){  Bitmap bm;  bm=getImageResized(context,selectedImage,maxWidth,maxHeight);  bm=getImageRotatedByMetadata(context,bm,selectedImage);  return bm;}  }
class C{  public void shutdown(){  super.dispose();  if (commandColor != null)   commandColor.dispose();  if (messageColor != null)   messageColor.dispose();  if (errorColor != null)   errorColor.dispose();  SVNUIPlugin.getPlugin().getPreferenceStore().removePropertyChangeListener(this);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  static String parseMethodDesc_return(String s){  int j;  j=s.lastIndexOf(')');  if (j >= 0) {    return parseDesc(s.substring(j + 1),",");  }  return parseDesc(s,",");}  }
class C{  public boolean add(Node n){  throw new RuntimeException("can't add into empty immutable set");}  }
class C{  private static void paintConstraints(NlGraphics graphics,List<DependencyGraph.Constraint> constraints,TextDirection textDirection){  Set<DependencyGraph.Constraint> mutableConstraintSet=new HashSet<DependencyGraph.Constraint>(constraints);  for (  DependencyGraph.Constraint constraint : constraints) {    if (constraint.type == ConstraintType.ALIGN_BASELINE) {      for (      DependencyGraph.Constraint c : constraints) {        if (c.type == ConstraintType.ALIGN_BOTTOM && c.to.node == constraint.to.node) {          mutableConstraintSet.remove(c);        }      }    }  }  for (  DependencyGraph.Constraint constraint : constraints) {    if (mutableConstraintSet.contains(constraint)) {      paintConstraint(graphics,constraint,mutableConstraintSet,textDirection);    }  }}  }
class C{  public static String makeMatchingString(Delegator delegator,String address){  if (address == null) {    return null;  }  String str=address.trim().toUpperCase();  List<GenericValue> addressMap=null;  try {    addressMap=EntityQuery.use(delegator).from("AddressMatchMap").orderBy("sequenceNum").queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  if (addressMap != null) {    for (    GenericValue v : addressMap) {      str=str.replaceAll(v.getString("mapKey").toUpperCase(),v.getString("mapValue").toUpperCase());    }  }  return str.replaceAll("\\W","");}  }
class C{  public summaryEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    WordMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMin","1"));    WordMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMax","2"));    WordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordDist","3"));    CharMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMin","3"));    CharMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMax","5"));    CharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charDist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    String sWeightMethod=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"use","o");    if (sWeightMethod.equals("o"))     WeightMethod=USE_OCCURENCES_AS_WEIGHT; else     if (sWeightMethod.equals("d"))     WeightMethod=USE_DISTRO_AVERAGE_AS_WEIGHT; else {      printUsage();      System.exit(1);    }    Do=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"do","all");    if ((Do.length() == 0) || ("char_word_all__".indexOf(Do) % 5 != 0)) {      printUsage();      System.exit(0);    }    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  public Experiment(){}  }
class C{  public CoreDump(File file,File jdkHome,DataSource master) throws IOException {  super(file,CoreDumpSupport.getCategory(),master);  if (!file.exists() || !file.isFile())   throw new IOException("File " + file.getAbsolutePath() + " does not exist");  if (jdkHome != null) {    if (!jdkHome.exists() || !jdkHome.isDirectory())     throw new IOException("Java Home " + jdkHome.getAbsolutePath() + " does not exist");    this.jdkHome=jdkHome;  } else {    this.jdkHome=new File(System.getProperty("java.home")).getCanonicalFile();  }}  }
class C{  public Path relativizeWithUserDirectory(Path path){  return Paths.get(System.getProperty("user.dir")).relativize(path.toAbsolutePath());}  }
class C{  public EarliestnessComputation(UnitGraph unitGraph,UpSafetyAnalysis upSafe,DownSafetyAnalysis downSafe,SideEffectTester sideEffect,FlowSet<EquivalentValue> set){  unitToEarliest=new HashMap<Unit,FlowSet<EquivalentValue>>(unitGraph.size() + 1,0.7f);  for (  Unit currentUnit : unitGraph) {    FlowSet<EquivalentValue> earliest=set.emptySet();    unitToEarliest.put(currentUnit,earliest);    FlowSet<EquivalentValue> downSafeSet=downSafe.getFlowBefore(currentUnit).clone();    List<Unit> predList=unitGraph.getPredsOf(currentUnit);    if (predList.isEmpty()) {      earliest.union(downSafeSet);    } else {      for (      Unit predecessor : predList) {{          for (Iterator<EquivalentValue> downSafeIt=downSafeSet.iterator(); downSafeIt.hasNext(); ) {            EquivalentValue equiVal=downSafeIt.next();            Value avail=equiVal.getValue();            if (avail instanceof FieldRef) {              if (sideEffect.unitCanWriteTo(predecessor,avail)) {                earliest.add(equiVal);                downSafeIt.remove();              }            } else {              for (              ValueBox useBox : avail.getUseBoxes()) {                Value use=useBox.getValue();                if (sideEffect.unitCanWriteTo(predecessor,use)) {                  earliest.add(equiVal);                  downSafeIt.remove();                  break;                }              }            }          }        }{          for (Iterator<EquivalentValue> downSafeIt=downSafeSet.iterator(); downSafeIt.hasNext(); ) {            EquivalentValue equiVal=downSafeIt.next();            FlowSet<EquivalentValue> preDown=downSafe.getFlowBefore(predecessor);            FlowSet<EquivalentValue> preUp=upSafe.getFlowBefore(predecessor);            if (!preDown.contains(equiVal) && !preUp.contains(equiVal)) {              earliest.add(equiVal);              downSafeIt.remove();            }          }        }      }    }  }}  }
class C{  public static String toConfigXML(final CommandTag cmd){  StringBuffer str=new StringBuffer("    <CommandTag id=\"");  str.append(cmd.getId());  str.append("\" name=\"");  str.append(cmd.getName());  str.append("\">\n");  str.append("      <source-timeout>");  str.append(cmd.getSourceTimeout());  str.append("</source-timeout>\n");  str.append("      <source-retries>");  str.append(cmd.getSourceRetries());  str.append("</source-retries>\n");  if (cmd.getHardwareAddress() != null) {    str.append(cmd.getHardwareAddress().toConfigXML());  }  str.append("    </CommandTag>\n");  return str.toString();}  }
class C{  protected boolean isAttribute(ResTable_Map map){  return map.name == ATTR_TYPE || map.name == ATTR_MIN || map.name == ATTR_MAX || map.name == ATTR_L10N || map.name == ATTR_OTHER || map.name == ATTR_ZERO || map.name == ATTR_ONE || map.name == ATTR_TWO || map.name == ATTR_FEW || map.name == ATTR_MANY;}  }
class C{  public DataReadOnlyException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void clearVoiceSearchResults(){  mResults.clear();}  }
class C{  public static void hideSoftKeyboard(Activity activity){  View view=activity.getWindow().peekDecorView();  if (view != null) {    InputMethodManager inputmanger=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);    inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);  }}  }
class C{  @Override public int evictBatch(int evictionQuota){  return _evictionStrategy.evict(evictionQuota);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null && value.equals(v))     return true;  }  return false;}  }
class C{  static Buffer fromCSVBuffer(String s) throws IOException {  if (s.charAt(0) != '#') {    throw new IOException("Error deserializing buffer.");  }  if (s.length() == 1) {    return new Buffer();  }  int blen=(s.length() - 1) / 2;  byte[] barr=new byte[blen];  for (int idx=0; idx < blen; idx++) {    char c1=s.charAt(2 * idx + 1);    char c2=s.charAt(2 * idx + 2);    barr[idx]=(byte)Integer.parseInt("" + c1 + c2,16);  }  return new Buffer(barr);}  }
class C{  public static Map<String,Object> copyUserPreferenceGroup(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String userLoginId=PreferenceWorker.getUserLoginId(context,false);  String fromUserLoginId=(String)context.get("fromUserLoginId");  String userPrefGroupTypeId=(String)context.get("userPrefGroupTypeId");  if (UtilValidate.isEmpty(userLoginId) || UtilValidate.isEmpty(userPrefGroupTypeId) || UtilValidate.isEmpty(fromUserLoginId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"copyPreference.invalidArgument",locale));  }  try {    List<GenericValue> resultList=EntityQuery.use(delegator).from("UserPreference").where("userLoginId",fromUserLoginId,"userPrefGroupTypeId",userPrefGroupTypeId).queryList();    if (resultList != null) {      for (      GenericValue preference : resultList) {        preference.set("userLoginId",userLoginId);      }      delegator.storeAll(resultList);    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"copyPreference.writeFailure",new Object[]{e.getMessage()},locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public boolean isInverted(){  return mInverted;}  }
class C{  private boolean stopIndicate(){  return bleManager.stopIndicate(UUID_SERVICE,UUID_INDICATE);}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ENTER_WITH_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1400010,value0);}  }
class C{  public String toString(){  return val ? "Confidentiality.YES" : "Confidentiality.NO";}  }
class C{  private void createUI(){  readConfigFile(null,this,"geoserver/GeoServerLabel.xml");}  }
class C{  public void writePraatDurationTier(String fileName) throws IOException {  ArrayList<Double> times=new ArrayList<Double>(units.size() * 2);  ArrayList<Double> values=new ArrayList<Double>(units.size() * 2);  final double MIN_SKIP=1e-15;  double time=0;  ListIterator<Phone> phoneIterator=phones.listIterator(1);  while (phoneIterator.hasNext()) {    Phone phone=phoneIterator.next();    if (phone.getLeftUnitDuration() > 0) {      times.add(time);      values.add(phone.getLeftDurationFactor());      time+=phone.getLeftUnitDuration();      times.add(time - MIN_SKIP);      values.add(phone.getLeftDurationFactor());    }    if (phone.getRightUnitDuration() > 0) {      times.add(time);      values.add(phone.getRightDurationFactor());      time+=phone.getRightUnitDuration();      times.add(time - MIN_SKIP);      values.add(phone.getRightDurationFactor());    }  }  File durationTierFile=new File(fileName);  PrintWriter out=new PrintWriter(durationTierFile);  out.println("\"ooTextFile\"");  out.println("\"DurationTier\"");  out.println(String.format("0 %f %d",time,times.size()));  for (int i=0; i < times.size(); i++) {    out.println(String.format("%.16f %f",times.get(i),values.get(i)));  }  out.close();}  }
class C{  public synchronized void destroy(){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"destroy");  }  readyState.check();  (new DestroyThread()).start();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"destroy");  }}  }
class C{  public Builder addColumnCategorical(String name,List<String> stateNames){  return addColumn(new CategoricalMetaData(name,stateNames));}  }
class C{  public void resetTracking(){  totalTime=0;  drawCycles=0;}  }
class C{  public ActionSwitch(Action[] acts,int switchVal){  for (int i=0; i < acts.length; i++)   m_actions.add(acts[i]);  setSwitchValue(switchVal);}  }
class C{  private static void warnAboutDeployJars(BlazeContext context,BlazeJavaSyncData syncData){  for (  BlazeLibrary library : syncData.importResult.libraries.values()) {    if (!(library instanceof BlazeJarLibrary)) {      continue;    }    BlazeJarLibrary jarLibrary=(BlazeJarLibrary)library;    LibraryArtifact libraryArtifact=jarLibrary.libraryArtifact;    ArtifactLocation artifactLocation=libraryArtifact.jarForIntellijLibrary();    if (artifactLocation.getRelativePath().endsWith("deploy.jar") || artifactLocation.getRelativePath().endsWith("deploy-ijar.jar") || artifactLocation.getRelativePath().endsWith("deploy-hjar.jar")) {      context.output(new PerformanceWarning("Performance warning: You have added a deploy jar as a library. " + "This can lead to poor indexing performance, and the debugger may " + "become confused and step into the deploy jar instead of your code. "+ "Consider redoing the rule to not use deploy jars, exclude the target "+ "from your .blazeproject, or exclude the library.\n"+ "Library path: "+ artifactLocation.getRelativePath()));    }  }}  }
class C{  public synchronized String lookupText(String inputtype,String outputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {  if (inputtype == null || outputtype == null || locale == null || voice == null || inputtext == null) {    throw new NullPointerException("Null argument");  }  String outputtext=null;  String query="SELECT outputtext FROM marycache WHERE inputtype = '" + inputtype + "' AND outputtype = '"+ outputtype+ "' AND locale = '"+ locale+ "' AND voice = '"+ voice+ "' AND outputparams = '"+ outputparams+ "' AND style = '"+ style+ "' AND effects = '"+ effects+ "' AND inputtext = ?";  PreparedStatement st=connection.prepareStatement(query);  st.setString(1,inputtext);  ResultSet results=st.executeQuery();  if (results.next()) {    outputtext=results.getString(1);  }  st.close();  return outputtext;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set useLCA=" + (!isSelected()) + " cName="+ cName+ ";");}  }
class C{  public PhotosEditAlbumQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"photos.editAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  private void parseWildCards(){  if (fPattern.startsWith("*"))   fHasLeadingStar=true;  if (fPattern.endsWith("*")) {    if (fLength > 1 && fPattern.charAt(fLength - 2) != '\\') {      fHasTrailingStar=true;    }  }  Vector<String> temp=new Vector<String>();  int pos=0;  StringBuffer buf=new StringBuffer();  while (pos < fLength) {    char c=fPattern.charAt(pos++);switch (c) {case '\\':      if (pos >= fLength) {        buf.append(c);      } else {        char next=fPattern.charAt(pos++);        if (next == '*' || next == '?' || next == '\\') {          buf.append(next);        } else {          buf.append(c);          buf.append(next);        }      }    break;case '*':  if (buf.length() > 0) {    temp.addElement(buf.toString());    fBound+=buf.length();    buf.setLength(0);  }break;case '?':buf.append(fSingleWildCard);break;default :buf.append(c);}}if (buf.length() > 0) {temp.addElement(buf.toString());fBound+=buf.length();}fSegments=new String[temp.size()];temp.copyInto(fSegments);}  }
class C{  private final boolean eq(Object o1,Object o2){  return o1 == o2 || ((o1 != null) && o1.equals(o2));}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public static boolean isWindowsLookAndFeel(){  return UIUtils.isWindowsLookAndFeel();}  }
class C{  private final boolean eq(short v1,short v2){  return v1 == v2;}  }
class C{  private Complex cdiv(final double xr,final double xi,final double yr,final double yi){  return new Complex(xr,xi).divide(new Complex(yr,yi));}  }
class C{  @Before public void beforeTest(){  removeTestData();}  }
class C{  private Solver(final double[] singularValues,final RealMatrix uT,final RealMatrix v,final boolean nonSingular,final double tol){  final double[][] suT=uT.getData();  for (int i=0; i < singularValues.length; ++i) {    final double a;    if (singularValues[i] > tol) {      a=1 / singularValues[i];    } else {      a=0;    }    final double[] suTi=suT[i];    for (int j=0; j < suTi.length; ++j) {      suTi[j]*=a;    }  }  pseudoInverse=v.multiply(new Array2DRowRealMatrix(suT,false));  this.nonSingular=nonSingular;}  }
class C{  public JSONObject(Object bean){  this();  populateMap(bean);}  }
class C{  public T walkInOptimizedOrder(final FieldVectorPreservingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  return walkInDefaultOrder(visitor,start,end);}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public LookupLocator(String host,int port){  if (host == null)   throw new NullPointerException("null host");  if (port <= 0 || port >= 65536)   throw new IllegalArgumentException("port number out of range");  URI uri;  try {    uri=new URI(null,null,host,port,null,null,null);    if (uri.getUserInfo() != null) {      throw new IllegalArgumentException("invalid character, '@', in host: " + host);    }    this.host=host;    this.port=port;  } catch (  URISyntaxException e) {    uri=try3986Authority(host,port);    assert ((this.port > 0) && (this.port < 65536));  }  String uriPath=uri.getPath();  if (uriPath.length() != 0) {    throw new IllegalArgumentException("invalid character, '/', in host: " + host);  }  if (uri.getQuery() != null) {    throw new IllegalArgumentException("invalid character, '?', in host: " + host);  }  if (uri.getFragment() != null) {    throw new IllegalArgumentException("invalid character, '#', in host: " + host);  }}  }
class C{  public static boolean available(int port){  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  int compareColumnValue(int columnNumber,ILogEntry e1,ILogEntry e2){  int column=columnNumber;  if (column > 0 && !includeMergeRevisions)   column++;  if (column > 1 && !includeTags)   column++;switch (column) {case COL_REVISION:    return (e2.getRevision().getNumber() < e1.getRevision().getNumber() ? -1 : (e2.getRevision() == e1.getRevision() ? 0 : 1));case COL_MERGED_REVISIONS:  return e1.getMergedRevisionsAsString().compareTo(e2.getMergedRevisionsAsString());case COL_TAGS:String tags1=AliasManager.getAliasesAsString(e1.getTags());String tags2=AliasManager.getAliasesAsString(e2.getTags());return tags1.compareTo(tags2);case COL_DATE:Date date1=e1.getDate();Date date2=e2.getDate();return date1.compareTo(date2);case COL_AUTHOR:return e1.getAuthor().compareTo(e2.getAuthor());case COL_COMMENT:return e1.getComment().compareTo(e2.getComment());case COL_BUGS:if (projectProperties != null) {return getBugstringFromComment(e1.getComment()).compareTo(getBugstringFromComment(e2.getComment()));}default :return 0;}}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  @Override public boolean logOut(final String tokenHeader){  return true;}  }
class C{  public JSONWriter key(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      stack[top - 1].putOnce(s,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(s));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  private void ensureLoaded() throws IOException {  if (!_loaded) {    if (_backingFile != null) {      _log.debug("Loading buffer for index {} from {}",_startIndex,_backingFile);      try (ByteChannel in=Files.newByteChannel(_backingFile,READ)){        in.read(_buffer);      }     }    _loaded=true;  }}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MAIL_CASHITEM_BUY(int itemId){  return new SM_SYSTEM_MESSAGE(1300956,"[item:" + itemId + "]");}  }
class C{  protected static LazyNode cValueNull(int index){  return new LazyNode(VALUE_NULL,index);}  }
class C{  @Override public EquipmentConfiguration clone(){  EquipmentConfiguration equipmentConfiguration=null;  try {    equipmentConfiguration=(EquipmentConfiguration)super.clone();  } catch (  CloneNotSupportedException ex) {    ex.printStackTrace();  }  return equipmentConfiguration;}  }
class C{  public static void configurePeriodicSync(Context context,int syncInterval,int flexTime){  Account account=getSyncAccount(context);  String authority=context.getString(R.string.content_authority);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    SyncRequest request=new SyncRequest.Builder().syncPeriodic(syncInterval,flexTime).setSyncAdapter(account,authority).setExtras(new Bundle()).build();    ContentResolver.requestSync(request);  } else {    ContentResolver.addPeriodicSync(account,authority,new Bundle(),syncInterval);  }}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  public static String stripWhitespace(String s){  return stripCharsInBag(s,whitespace);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener){  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());}  }
class C{  private ProxySelector installSimpleHostFilter(Dict proxySettings,ProxySelector result){  if (isActive(proxySettings.get("ExcludeSimpleHostnames"))) {    List<UriFilter> localBypassFilter=new ArrayList<UriFilter>();    localBypassFilter.add(new IELocalByPassFilter());    result=new ProxyBypassListSelector(localBypassFilter,result);  }  return result;}  }
class C{  public Builder lineCap(String lineCap){  this.lineCap=lineCap;  return this;}  }
class C{  public double t(final double mu,final double[] observed) throws MathIllegalArgumentException, NullArgumentException {  checkSampleData(observed);  return t(StatUtils.mean(observed),mu,StatUtils.variance(observed),observed.length);}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSMessageImpl dup=new GSMessageImpl();  copyTo(dup);  return dup;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignURShiftExpr fullCopy(){  AssignURShiftExpr tree=(AssignURShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected AudioSaveQuery server(int value){  return unsafeParam("server",value);}  }
class C{  public TObjectIntHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  private boolean clipPathSupported(){  return Utils.getSDKInt() >= 18;}  }
class C{  public static int byteToUInt(byte b){  return b & 0xFF;}  }
class C{  public TrafficLogPredicate add(Predicate<HarEntry> entry){  predicates.add(entry);  return this;}  }
class C{  public IgDiskCache(File directory,Executor serialExecutor){  this(directory,DEFAULT_MAX_SIZE,DEFAULT_MAX_COUNT,serialExecutor);}  }
class C{  static public boolean domWriter(Node node,PrintStream ps,String prefix){  ps.print(XML_VERSION_TAG);  return _domWriter(node,ps,prefix);}  }
class C{  public WallGetCommentsQueryWithExtended previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  public int optInt(String key){  return optInt(key,0);}  }
class C{  public boolean sendKeepAlive(){  try {    if (!isConnected())     return false;    _requestPacket.set(LRMIRuntime.DUMMY_OBJECT_ID,0,new Object[]{},true,false,_dummyMethod,-1,OperationPriority.REGULAR,_serviceVersion);    _writer.writeRequest(_requestPacket);    return true;  } catch (  Throwable t) {    if (_logger.isLoggable(Level.FINE)) {      String exMessage="LRMI over NIO broken connection with ServerEndPoint: " + getConnectionURL();      _logger.log(Level.FINE,exMessage,t);    }    return false;  }}  }
class C{  public void onPlayerLogin(Player player){  List<Integer> activeStartQuests=new ArrayList<Integer>();  List<Integer> activeMaintainQuests=new ArrayList<Integer>();  TIntObjectHashMap<List<EventTemplate>> map1=null;  TIntObjectHashMap<List<EventTemplate>> map2=null;synchronized (activeEvents) {    for (    EventTemplate et : activeEvents) {      if (et.isActive()) {        activeStartQuests.addAll(et.getStartableQuests());        activeMaintainQuests.addAll(et.getMaintainableQuests());      }    }    map1=new TIntObjectHashMap<>(eventsForStartQuest);    map2=new TIntObjectHashMap<>(eventsForMaintainQuest);  }  StartOrMaintainQuests(player,activeStartQuests.listIterator(),map1,true);  StartOrMaintainQuests(player,activeMaintainQuests.listIterator(),map2,false);  activeStartQuests.clear();  activeMaintainQuests.clear();  map1.clear();  map2.clear();}  }
class C{  public DUCDocumentInfo(String sDocName){  sDocName=new File(sDocName).getName();  if (isDUCDoc(sDocName)) {    String[] sArr=sDocName.split("[.]");    Topic=sArr[0];    Length=Integer.valueOf(sArr[2]).intValue();    Selector=sArr[3];    Assessor=sArr[3];    Summarizer=sArr[4];  } else {    Topic="NA";    Length=-1;    Selector="NA";    Assessor="NA";    Summarizer="NA";  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (o instanceof LookupLocator) {    LookupLocator oo=(LookupLocator)o;    return port == oo.port && host.equalsIgnoreCase(oo.host);  }  return false;}  }
class C{  @Deprecated public static float[] combine(float[] x,float[] y){  int len=0;  if (x != null)   len+=x.length;  if (y != null)   len+=y.length;  float[] z=null;  if (len > 0) {    z=new float[len];    int currentPos=0;    if (x != null) {      System.arraycopy(x,0,z,currentPos,x.length);      currentPos=x.length;    }    if (y != null)     System.arraycopy(y,0,z,currentPos,y.length);  }  return z;}  }
class C{  public ArrayRealVector(double[] v1,ArrayRealVector v2){  final int l1=v1.length;  final int l2=v2.getDimension();  data=new double[l1 + l2];  System.arraycopy(v1,0,data,0,l1);  System.arraycopy(v2.data,0,data,l1,l2);}  }
class C{  @Override public void undo(Transaction tx){  LogSeqNum lsn=tx.recoveryMgr().logLogicalAbort(this.txNum,this.lsn);  VanillaDb.logMgr().flush(lsn);}  }
class C{  public void hold(int key,int duration) throws InterruptedException {  press(key);  if (duration >= 0) {    Thread.sleep(duration);  }  release(key);}  }
class C{  default String resourceRelation(IRI dataPropertyIRI){  return "has-" + dataPropertyIRI.getShortForm();}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public void java_lang_Class_forName0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public static boolean isDarkTheme(Context context,boolean current){  return resolveBoolean(context,R.attr.themeDark,current);}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public TrackedEntityInstanceQueryParams addFiltersIfNotExist(List<QueryItem> filtrs){  for (  QueryItem filter : filtrs) {    if (filters != null && !filters.contains(filter)) {      filters.add(filter);    }  }  return this;}  }
class C{  public static Map<String,Object> checkItemStatus(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get OrderHeader record",module);  }  if (orderHeader == null) {    Debug.logError("OrderHeader came back as null",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotUpdateNullOrderHeader",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderItems=null;  try {    orderItems=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get OrderItem records",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemGettingOrderItemRecords",locale));  }  String orderHeaderStatusId=orderHeader.getString("statusId");  String orderTypeId=orderHeader.getString("orderTypeId");  boolean allCanceled=true;  boolean allComplete=true;  boolean allApproved=true;  if (orderItems != null) {    for (    GenericValue item : orderItems) {      String statusId=item.getString("statusId");      if (!"ITEM_CANCELLED".equals(statusId)) {        allCanceled=false;        if (!"ITEM_COMPLETED".equals(statusId)) {          allComplete=false;          if (!"ITEM_APPROVED".equals(statusId)) {            allApproved=false;            break;          }        }      }    }    String newStatus=null;    if (allCanceled) {      if (!"PURCHASE_ORDER".equals(orderTypeId)) {        newStatus="ORDER_CANCELLED";      }    } else     if (allComplete) {      newStatus="ORDER_COMPLETED";    } else     if (allApproved) {      boolean changeToApprove=true;      if (UtilValidate.isNotEmpty(orderHeader.getString("productStoreId"))) {        try {          GenericValue productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",orderHeader.getString("productStoreId")).queryOne();          if (productStore != null) {            String headerApprovedStatus=productStore.getString("headerApprovedStatus");            if (UtilValidate.isNotEmpty(headerApprovedStatus)) {              if (headerApprovedStatus.equals(orderHeaderStatusId)) {                List<GenericValue> orderStatusList=EntityQuery.use(delegator).from("OrderStatus").where("orderId",orderId,"statusId",headerApprovedStatus,"orderItemSeqId",null).queryList();                if (orderStatusList.size() <= 1) {                  changeToApprove=false;                }              }            }          }        } catch (        GenericEntityException e) {          String errMsg="Database error checking if we should change order header status to approved: " + e.toString();          Debug.logError(e,errMsg,module);          return ServiceUtil.returnError(errMsg);        }      }      if ("ORDER_SENT".equals(orderHeaderStatusId))       changeToApprove=false;      if ("ORDER_COMPLETED".equals(orderHeaderStatusId)) {        if ("SALES_ORDER".equals(orderTypeId)) {          changeToApprove=false;        }      }      if ("ORDER_CANCELLED".equals(orderHeaderStatusId))       changeToApprove=false;      if (changeToApprove) {        newStatus="ORDER_APPROVED";        if ("ORDER_HOLD".equals(orderHeaderStatusId)) {          return ServiceUtil.returnSuccess();        }      }    }    if (newStatus != null && !newStatus.equals(orderHeaderStatusId)) {      Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",newStatus,"userLogin",userLogin);      Map<String,Object> newSttsResult=null;      try {        newSttsResult=dispatcher.runSync("changeOrderStatus",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the changeOrderStatus service",module);      }      if (ServiceUtil.isError(newSttsResult)) {        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(newSttsResult));      }    }  } else {    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderReceivedNullForOrderItemRecordsOrderId",UtilMisc.toMap("orderId",orderId),locale),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public void createJoinIndex(ExpNode root){  if (root == null)   return;  Stack<ExpNode> stack=new Stack<ExpNode>();  stack.push(root);  while (!stack.isEmpty()) {    ExpNode curr=stack.pop();    boolean processChildren=curr.createJoinIndex(this);    if (!processChildren)     continue;    if (curr.getLeftChild() != null)     stack.push(curr.getLeftChild());    if (curr.getRightChild() != null)     stack.push(curr.getRightChild());  }}  }
class C{  public void closeListener(String serverKey) throws GenericServiceException {  GenericMessageListener listener=listeners.get(serverKey);  if (listener == null)   throw new GenericServiceException("No listener found with that serverKey.");  listener.close();}  }
class C{  public static synchronized void init(Configuration conf){  String server=conf.getString("cache.url",X.EMPTY);  if (server.startsWith(MEMCACHED)) {    cacheSystem=MemCache.create(conf);  } else   if (server.startsWith(REDIS)) {    cacheSystem=RedisCache.create(conf);  } else {    log.debug("not configured cache system, using file cache!");    cacheSystem=FileCache.create(conf);  }  GROUP=conf.getString("cache.group","demo") + "://";}  }
class C{  public static TransferTagValueImpl createTransferTagValue(final TagWithAlarms tagWithAlarms){  Tag tag=tagWithAlarms.getTag();  TransferTagValueImpl tagValue=null;  if (tag != null) {    tagValue=new TransferTagValueImpl(tag.getId(),tag.getValue(),tag.getValueDescription(),(DataTagQualityImpl)tag.getDataTagQuality(),getTagMode(tag),tag.getTimestamp(),tag instanceof DataTag ? ((DataTag)tag).getDaqTimestamp() : null,tag.getCacheTimestamp(),tag.getDescription());    String dataType=isKnownClass(tag.getDataType()) ? getType(tag.getDataType()).getName() : tag.getDataType();    tagValue.setValueClassName(dataType);    addAlarmValues(tagValue,tagWithAlarms.getAlarms());    tagValue.setSimulated(tag.isSimulated());  }  return tagValue;}  }
class C{  private static int infer_pts_is_one_to_one(SegmentNode pts,SegmentNode pe,int code){  long interI, interJ;  interI=pe.I1 < pts.I1 ? pts.I1 : pe.I1;  interJ=(pe.I1 + pe.L < pts.I1 + pts.L ? pe.I1 + pe.L : pts.I1 + pts.L);  if (interI < interJ) {switch (code) {case GeometricManager.ONE_TO_ONE:      pres.I1=interI - pe.I1 + pe.I2;    pres.I2=interI - pts.I1 + pts.I2;  pres.L=interJ - interI;return GeometricManager.ONE_TO_ONE;case GeometricManager.MANY_TO_MANY:pres.I1=pe.I2;pres.I2=interI - pts.I1 + pts.I2;pres.L=((RectangleNode)pe).L_prime;pres.L_prime=interJ - interI;return GeometricManager.MANY_TO_MANY;}}return GeometricManager.Undefined_Mapping;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public final byte readByte(){  return (byte)bs.readByte();}  }
class C{  public static ByteArrayList readAsBytes(InputStream is) throws IOException {  ByteArrayList buf=new ByteArrayList();  byte[] b=new byte[8192];  int nread=-1;  while ((nread=is.read(b)) >= 0) {    buf.add(b,0,nread);  }  return buf;}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public SecureSendSMSNotificationQuery sendSMSNotification(ServiceActor actor,int userId,String message){  return new SecureSendSMSNotificationQuery(getClient(),actor,userId,message);}  }
class C{  @Override public void close(){  try {    raf.close();    System.err.println("Closing file: " + file.getName());  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  private static Function<MetricValue,Optional<Boolean>> metricToBoolean(){  return null;}  }
class C{  public boolean sendTCPBytes(byte[] buffer){  if (this.socket == null)   return false;  boolean success=false;  try {    DataOutputStream dos=new DataOutputStream(this.socket.getOutputStream());    if (logging) {      long t1=System.nanoTime();      dos.writeInt(buffer.length);      dos.write(buffer,0,buffer.length);      dos.flush();      long t2=System.nanoTime();      double rate=1000.0 * 1000.0 * 1000.0* (double)(buffer.length) / (1024.0 * (double)(t2 - t1));      logger.log(Level.INFO,"Sent " + buffer.length + " bytes to "+ this.address+ ":"+ this.port+ " at "+ rate+ " Kb/s");    } else {      dos.writeInt(buffer.length);      dos.write(buffer,0,buffer.length);    }    success=true;  } catch (  IOException e) {    System.out.println(String.format("Failed to send TCP bytes to %s:%d.",this.address,this.port));    System.out.println(e);  }  return success;}  }
class C{  public static JpaModule newClientModule(String resourceSearchPackage){  return new JpaModule(resourceSearchPackage);}  }
class C{  protected LinkedHashSet<LogicalMetric> generateLogicalMetrics(String apiMetricQuery,MetricDictionary metricDictionary,DimensionDictionary dimensionDictionary,LogicalTable table) throws BadApiRequestException {  LOG.trace("Metric dictionary: {}",metricDictionary);  if (apiMetricQuery == null || "".equals(apiMetricQuery)) {    LOG.debug(METRICS_MISSING.logFormat());    throw new BadApiRequestException(METRICS_MISSING.format());  }  LinkedHashSet<LogicalMetric> generated=new LinkedHashSet<>();  List<String> invalidMetricNames=new ArrayList<>();  if (BardFeatureFlag.INTERSECTION_REPORTING.isOn()) {    JSONArray metricsJsonArray;    try {      metricsJsonArray=MetricParser.generateMetricFilterJsonArray(apiMetricQuery);    } catch (    IllegalArgumentException e) {      LOG.debug(INCORRECT_METRIC_FILTER_FORMAT.logFormat(e.getMessage()));      throw new BadApiRequestException(INCORRECT_METRIC_FILTER_FORMAT.format(apiMetricQuery));    }catch (    JSONException e) {      LOG.debug(INCORRECT_METRIC_FILTER_FORMAT.logFormat(e.getMessage()));      throw new BadApiRequestException(INCORRECT_METRIC_FILTER_FORMAT.format(apiMetricQuery));    }    FieldConverterSupplier.metricsFilterSetBuilder.validateDuplicateMetrics(metricsJsonArray);    for (int i=0; i < metricsJsonArray.length(); i++) {      JSONObject jsonObject;      try {        jsonObject=metricsJsonArray.getJSONObject(i);      } catch (      JSONException e) {        LOG.debug(INCORRECT_METRIC_FILTER_FORMAT.logFormat(e.getMessage()));        throw new BadApiRequestException(INCORRECT_METRIC_FILTER_FORMAT.format(apiMetricQuery));      }      String metricName=jsonObject.getString("name");      LogicalMetric logicalMetric=metricDictionary.get(metricName);      if (logicalMetric == null) {        invalidMetricNames.add(metricName);      } else {        JSONObject metricFilterObject=jsonObject.getJSONObject("filter");        if (!metricFilterObject.isNull("AND")) {          if (logicalMetric.getCategory().equals(RATIO_METRIC_CATEGORY)) {            LOG.debug(UNSUPPORTED_FILTERED_METRIC_CATEGORY.logFormat(logicalMetric.getName(),logicalMetric.getCategory()));            throw new BadApiRequestException(UNSUPPORTED_FILTERED_METRIC_CATEGORY.format(logicalMetric.getName(),logicalMetric.getCategory()));          }          try {            logicalMetric=FieldConverterSupplier.metricsFilterSetBuilder.getFilteredLogicalMetric(logicalMetric,metricFilterObject,dimensionDictionary,table,this);          } catch (          DimensionRowNotFoundException dimRowException) {            LOG.debug(dimRowException.getMessage());            throw new BadApiRequestException(dimRowException.getMessage(),dimRowException);          }        } else         if (!(metricFilterObject.toString().equals("{}"))) {          LOG.debug(INVALID_METRIC_FILTER_CONDITION.logFormat(metricFilterObject.keySet()));          throw new BadApiRequestException(INVALID_METRIC_FILTER_CONDITION.format(metricFilterObject.keySet()));        }        generated.add(logicalMetric);      }    }  } else {    List<String> metricApiQuery=Arrays.asList(apiMetricQuery.split(","));    for (    String metricName : metricApiQuery) {      LogicalMetric logicalMetric=metricDictionary.get(metricName);      if (logicalMetric == null) {        invalidMetricNames.add(metricName);      } else {        generated.add(logicalMetric);      }    }  }  if (!invalidMetricNames.isEmpty()) {    LOG.debug(METRICS_UNDEFINED.logFormat(invalidMetricNames.toString()));    throw new BadApiRequestException(METRICS_UNDEFINED.format(invalidMetricNames.toString()));  }  LOG.trace("Generated set of logical metric: {}",generated);  return generated;}  }
class C{  public UsersSearchQuery sex(UsersSearchSex value){  return unsafeParam("sex",value);}  }
class C{  private static void processPackage(String tbName,Packages pkg){  String classNamePrefix=StringUtil.parseHumpName(tbName,true,isHumpModelClass);  pkg.setDao(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageDao) ? "" : ".") + packageDao);  pkg.setDaoName(classNamePrefix + daoSuffix);  pkg.setModel(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageModel) ? "" : ".") + packageModel);  pkg.setModelName(classNamePrefix + modelSuffix);  pkg.setMapperXml(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageMapperXml) ? "" : ".") + packageMapperXml);  pkg.setMapperXmlName(classNamePrefix + mapperXmlSuffix);  pkg.setModelNameLowerFirst(StringUtil.lowerFirst(pkg.getModelName()));}  }
class C{  @Override public void validateConfig(final RuleTag ruleTag) throws ConfigurationException {  validateTagConfig(ruleTag);  if (ruleTag.getRuleText() != null) {    if (ruleTag.getRuleText().length() > 4000) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"ruleText\" must less than 4000 characters long");    }    RuleExpression exp;    try {      exp=ruleTag.getRuleExpression();    } catch (    Exception e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"ruleText\" is not a gramatically correct rule expression");    }    if (exp == null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"ruleText\" is not a gramatically correct rule expression (Expression is null)");    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"ruleText\" is null for rule " + ruleTag.getId() + " - unable to configure it correctly.");  }}  }
class C{  public IsNullExtended(Expression expression1){  super(expression1);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FieldDeclaration fullCopy(){  FieldDeclaration tree=(FieldDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Builder shadowUrl(String shadowUrl){  this.shadowUrl=shadowUrl;  return this;}  }
class C{  private CountingThreadPoolExecutor createExecutor(int numThreads){  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  public Predicate pred(){  return pred;}  }
class C{  public static boolean cancelPlayerDeletion(PlayerAccountData accData){  if (accData.getDeletionDate() == null) {    return true;  }  if (accData.getDeletionDate().getTime() > System.currentTimeMillis()) {    accData.setDeletionDate(null);    storeDeletionTime(accData);    return true;  }  return false;}  }
class C{  protected void moveToPrimary(){  beforeSpaceModeChange(SpaceMode.PRIMARY);  setSpaceMode(SpaceMode.PRIMARY);  afterSpaceModeChange(SpaceMode.PRIMARY);}  }
class C{  private Node traverseFullySelected(Node n,int how){switch (how) {case CLONE_CONTENTS:    return n.cloneNode(true);case EXTRACT_CONTENTS:  if (n.getNodeType() == Node.DOCUMENT_TYPE_NODE) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null));  }return n;case DELETE_CONTENTS:n.getParentNode().removeChild(n);return null;}return null;}  }
class C{  short acceptNode(Node node){  if (fNodeFilter == null) {    if ((fWhatToShow & (1 << node.getNodeType() - 1)) != 0) {      return NodeFilter.FILTER_ACCEPT;    } else {      return NodeFilter.FILTER_SKIP;    }  } else {    if ((fWhatToShow & (1 << node.getNodeType() - 1)) != 0) {      return fNodeFilter.acceptNode(node);    } else {      return NodeFilter.FILTER_SKIP;    }  }}  }
class C{  public boolean separates(BitSet H){  return A.intersects(H) && B.intersects(H);}  }
class C{  public Line(final Vector3D p1,final Vector3D p2,final double tolerance) throws MathIllegalArgumentException {  reset(p1,p2);  this.tolerance=tolerance;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200741,skillcaster,skillname);}  }
class C{  public void unregisterEditor(RTEditText editor){  mEditors.remove(editor.getId());  editor.unregister();  updateToolbarVisibility();}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  @Override public double toDouble(){  return 0;}  }
class C{  public static int export(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Document doc=dir.getDocument();    final MainViewer mainViewer=dir.getMainViewer();    final IConnector connector=doc.getMeganFile().getDataConnector();    ClassificationManager.ensureTreeIsLoaded("KEGG");    int numberOfTaxa=mainViewer.getSelectedNodes().size();    progressListener.setSubtask("KEGG to taxa");    progressListener.setMaximum(numberOfTaxa);    progressListener.setProgress(0);    String[] taxonNames=new String[numberOfTaxa];    SortedMap<Integer,int[]> ko2counts=new TreeMap<>();    NodeSet selectedNodes=mainViewer.getSelectedNodes();    int countTaxa=0;    for (Node v=selectedNodes.getFirstElement(); v != null; v=selectedNodes.getNextElement(v)) {      Integer taxonId=(Integer)v.getInfo();      taxonNames[countTaxa]=TaxonomyData.getName2IdMap().get(taxonId);      try (IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),taxonId,doc.getMinScore(),doc.getMaxExpected(),true,true)){        while (it.hasNext()) {          IReadBlock readBlock=it.next();          final BitSet activeMatchesForTaxa=new BitSet();          int keggId;          if (readBlock.getComplexity() > 0 && readBlock.getComplexity() + 0.01 < doc.getMinComplexity())           keggId=IdMapper.LOW_COMPLEXITY_ID; else           keggId=KeggTopAssignment.computeId("KEGG",doc.getMinScore(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock);          int[] counts=ko2counts.get(keggId);          if (counts == null) {            counts=new int[numberOfTaxa];            ko2counts.put(keggId,counts);          }          counts[countTaxa]++;          progressListener.checkForCancel();        }        countTaxa++;      }       progressListener.incrementProgress();    }    progressListener.setSubtask("Writing output");    progressListener.setMaximum(ko2counts.size());    progressListener.setProgress(0);    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      w.write("#KO-toTaxa" + separator + Basic.toString(taxonNames,separator + "")+ "\n");      for (      Map.Entry<Integer,int[]> entry : ko2counts.entrySet()) {        int ko=entry.getKey();        w.write(String.format("%d",ko));        for (        int x : entry.getValue()) {          w.write(String.format("%c%d",separator,x));        }        w.write("\n");        totalLines++;        progressListener.incrementProgress();      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public void testAddActivity() throws Exception {  final VirtualFile file=myFixture.copyFileToProject("intentions/DummyActivity.java","src/com/example/DummyActivity.java");  myFixture.configureFromExistingVirtualFile(file);  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);  assertNotNull(action);  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());  myFixture.checkResultByFile("AndroidManifest.xml","intentions/DummyActivity_manifest_after.xml",true);}  }
class C{  public FreeTTS(Voice voice){  this.voice=voice;}  }
class C{  public final void writeLong(final long l){  baos.write((byte)(l & 0xFF));  baos.write((byte)((l >>> 8) & 0xFF));  baos.write((byte)((l >>> 16) & 0xFF));  baos.write((byte)((l >>> 24) & 0xFF));  baos.write((byte)((l >>> 32) & 0xFF));  baos.write((byte)((l >>> 40) & 0xFF));  baos.write((byte)((l >>> 48) & 0xFF));  baos.write((byte)((l >>> 56) & 0xFF));}  }
class C{  public View detachViewAndClearPreInfo(){  View original=mHost;  if (mBorder != null) {    mBorder.detachView();  }  mPreRealLeft=0;  mPreRealWidth=0;  mPreRealHeight=0;  mPreRealTop=0;  return original;}  }
class C{  public ObjectFactory(){}  }
class C{  private int processData(){  int bytes=ringBuffer.read(buffer,bufferSize);  Log.d(TAG,"Read size: " + bytes);  if (bytes > 0) {    short[] innerBuf=new short[bytes / 2];    ByteBuffer.wrap(buffer).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(innerBuf);    int encodedSize=SimpleLame.encode(innerBuf,innerBuf,bytes / 2,mp3Buffer);    if (encodedSize < 0) {      Log.e(TAG,"Lame encoded size: " + encodedSize);    }    try {      os.write(mp3Buffer,0,encodedSize);    } catch (    IOException e) {      Log.e(TAG,"Unable to write to file");    }    return bytes;  }  return 0;}  }
class C{  private Object invokeMethod(Object proxy,Method m,Object[] args) throws Throwable {  try {    return invokeMethod0(proxy,m,args);  } catch (  NoSuchObjectException e) {    return new Failure(e,true);  }catch (  ConnectException e) {    return new Failure(e,true);  }catch (  UnknownHostException e) {    return new Failure(e,true);  }catch (  ConnectIOException e) {    return new Failure(e,true);  }catch (  MarshalException e) {    return new Failure(e,false);  }catch (  ServerError e) {    return new Failure(e,false);  }catch (  ServerException e) {    return new Failure(e,false);  }catch (  RemoteException e) {synchronized (this) {      if (proxy.equals(uproxy)) {        uproxy=null;      }    }    return new Failure(e,e instanceof ActivateFailedException);  }catch (  Exception e) {    return new Failure(e,false);  }}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  AuthenticationMethod authMethod=AuthenticationMethod.UNKNOWN;  RemoteOperation operation=new ExistenceCheckRemoteOperation("",mContext,false);  client.clearCredentials();  client.setFollowRedirects(false);  result=operation.execute(client);  String redirectedLocation=result.getRedirectedLocation();  while (redirectedLocation != null && redirectedLocation.length() > 0 && !result.isIdPRedirection()) {    client.setBaseUri(Uri.parse(result.getRedirectedLocation()));    result=operation.execute(client);    redirectedLocation=result.getRedirectedLocation();  }  if (result.getHttpCode() == HttpStatus.SC_UNAUTHORIZED) {    String authRequest=((result.getAuthenticateHeader()).trim()).toLowerCase();    if (authRequest.startsWith("basic")) {      authMethod=AuthenticationMethod.BASIC_HTTP_AUTH;    } else     if (authRequest.startsWith("bearer")) {      authMethod=AuthenticationMethod.BEARER_TOKEN;    }  } else   if (result.isSuccess()) {    authMethod=AuthenticationMethod.NONE;  } else   if (result.isIdPRedirection()) {    authMethod=AuthenticationMethod.SAML_WEB_SSO;  }  Log_OC.d(TAG,"Authentication method found: " + authenticationMethodToString(authMethod));  if (!authMethod.equals(AuthenticationMethod.UNKNOWN)) {    result=new RemoteOperationResult(true,result.getHttpCode(),null);  }  ArrayList<Object> data=new ArrayList<Object>();  data.add(authMethod);  result.setData(data);  return result;}  }
class C{  @Override public boolean onTouch(final View v,final MotionEvent event){  if (!lollipopAndAbove()) switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    gradientDrawable=new GradientDrawable();  gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 2,mOriginalThumbHeight / 2);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;case MotionEvent.ACTION_UP:gradientDrawable=new GradientDrawable();gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 3,mOriginalThumbHeight / 3);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;}return false;}  }
class C{  public static ProbeItemDescriptor continuousItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,float lineWidth,Color lineColor,Color fillColor){  if (lineColor == null && fillColor == null)   throw new IllegalArgumentException("Either lineColor or fillColor must be defined");  return new ContinuousXYItemDescriptor(name,description,formatter,dataFactor,minValue,maxValue,lineWidth,lineColor,fillColor);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  static <T>ForNext forComp(AnyVal<T> any,IntStream stream){  return new ForImpl(any,null);}  }
class C{  public void expand(int level){  ArrayList<S2CellId> output=new ArrayList<S2CellId>();  long levelLsb=S2CellId.lowestOnBitForLevel(level);  int i=size() - 1;  do {    S2CellId id=cellId(i);    if (id.lowestOnBit() < levelLsb) {      id=id.parent(level);      while (i > 0 && id.contains(cellId(i - 1))) {        --i;      }    }    output.add(id);    id.getAllNeighbors(level,output);  } while (--i >= 0);  initSwap(output);}  }
class C{  public Decimal64(final double x){  this.value=x;}  }
class C{  public DocsSearchQuery search(UserActor actor,String q){  return new DocsSearchQuery(getClient(),actor,q);}  }
class C{  public ImportCSVWindow(JFrame parent){  super();  if (parent != null)   setLocationRelativeTo(parent); else   setLocation(300,300);  setSize(330,450);  setModal(true);}  }
class C{  public NotesAddQuery(VkApiClient client,UserActor actor,String title,String text){  super(client,"notes.add",Integer.class);  accessToken(actor.getAccessToken());  title(title);  text(text);}  }
class C{  public void importProject(@NotNull String projectName,@NotNull File projectRootDirPath,boolean generateSourcesOnSuccess,@Nullable GradleSyncListener listener,@Nullable Project project,@Nullable LanguageLevel initialLanguageLevel) throws IOException, ConfigurationException {  ImportOptions options=new ImportOptions(generateSourcesOnSuccess,false,true,false);  doImport(projectName,projectRootDirPath,options,listener,project,initialLanguageLevel);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Map))   return false;  Map<?,?> m=(Map<?,?>)o;  try {    for (    Map.Entry<K,V> e : this.entrySet())     if (!e.getValue().equals(m.get(e.getKey())))     return false;    for (    Map.Entry<?,?> e : m.entrySet()) {      Object k=e.getKey();      Object v=e.getValue();      if (k == null || v == null || !v.equals(get(k)))       return false;    }    return true;  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }}  }
class C{  public static double[] lprefc2lpc(double[] k){  int p=k.length;  double[][] A=new double[p][];  int i, j;  for (i=1; i <= p; i++) {    A[i - 1]=new double[i];    A[i - 1][i - 1]=k[i - 1];    for (j=1; j < i; j++)     A[i - 1][j - 1]=A[i - 2][j - 1] - k[i - 1] * A[i - 2][i - j - 1];  }  double[] oneMinusA=new double[p + 1];  oneMinusA[0]=1.0;  System.arraycopy(A[p - 1],0,oneMinusA,1,p);  return oneMinusA;}  }
class C{  private void checkSignificanceLevel(final double alpha) throws MathIllegalArgumentException {  if (alpha <= 0 || alpha > 0.5) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SIGNIFICANCE_LEVEL,alpha,0.0,0.5);  }}  }
class C{  public SimpleBooleanProperty showProperty(){  return this.show;}  }
class C{  private void inflateConnectedBackground(){  if (mConnectedBackground != R.color.connected_color) {    connectivityView.setBackgroundColor(ColorUtil.getColorWrapper(mContext,mConnectedBackground));  }}  }
class C{  public Builder shouldStartZK(boolean startZK){  this._shouldStartZK=startZK;  return this;}  }
class C{  public AemInsertWindow insertComponent(String componentGroup,String componentName){  chooseComponent(componentGroup,componentName,chooseTab(componentGroup));  clickOkAndWait();  return this;}  }
class C{  public static void warnInfo(String msg){  warnInfo("zhibo",msg);}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public final boolean hasKey(final K id){  if (id == null) {    throw new NullPointerException("Querying cache with a null key.");  }  return cache.isKeyInCache(id);}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigFeatureTypeConstraint copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigFeatureTypeConstraint(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public void populateFieldMap(){  fieldNameMap.clear();  fieldTypeMap.clear();  logger.debug("Datasource fields:");  int index=0;  Collection<PropertyDescriptor> descriptorList=getPropertyDescriptorList();  if (descriptorList != null) {    for (    PropertyDescriptor property : descriptorList) {      logger.debug(String.format("    %-20s %s",property.getName(),property.getType().getBinding().getName()));      fieldNameMap.put(index,property.getName());      fieldTypeMap.put(index,property.getType().getBinding());      index++;    }  }}  }
class C{  public PtcCredentialProvider(OkHttpClient client,String username,String password) throws LoginFailedException, RemoteServerException {  this(client,username,password,new SystemTimeImpl());}  }
class C{  @Override public Node adoptNode(Node source){  NodeImpl node;  Hashtable userData=null;  try {    node=(NodeImpl)source;  } catch (  ClassCastException e) {    return null;  }  if (source == null) {    return null;  } else   if (source != null && source.getOwnerDocument() != null) {    DOMImplementation thisImpl=this.getImplementation();    DOMImplementation otherImpl=source.getOwnerDocument().getImplementation();    if (thisImpl != otherImpl) {      if (thisImpl instanceof mf.org.apache.xerces.dom.DOMImplementationImpl && otherImpl instanceof mf.org.apache.xerces.dom.DeferredDOMImplementationImpl) {        undeferChildren(node);      } else       if (thisImpl instanceof mf.org.apache.xerces.dom.DeferredDOMImplementationImpl && otherImpl instanceof mf.org.apache.xerces.dom.DOMImplementationImpl) {      } else {        return null;      }    } else     if (otherImpl instanceof mf.org.apache.xerces.dom.DeferredDOMImplementationImpl) {      undeferChildren(node);    }  }switch (node.getNodeType()) {case ATTRIBUTE_NODE:{      AttrImpl attr=(AttrImpl)node;      if (attr.getOwnerElement() != null) {        attr.getOwnerElement().removeAttributeNode(attr);      }      attr.isSpecified(true);      userData=node.getUserDataRecord();      attr.setOwnerDocument(this);      if (userData != null)       setUserDataTable(node,userData);      break;    }case ENTITY_NODE:case NOTATION_NODE:{    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }case DOCUMENT_NODE:case DOCUMENT_TYPE_NODE:{  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}case ENTITY_REFERENCE_NODE:{userData=node.getUserDataRecord();Node parent=node.getParentNode();if (parent != null) {  parent.removeChild(source);}Node child;while ((child=node.getFirstChild()) != null) {  node.removeChild(child);}node.setOwnerDocument(this);if (userData != null) setUserDataTable(node,userData);if (docType == null) {  break;}NamedNodeMap entities=docType.getEntities();Node entityNode=entities.getNamedItem(node.getNodeName());if (entityNode == null) {  break;}for (child=entityNode.getFirstChild(); child != null; child=child.getNextSibling()) {  Node childClone=child.cloneNode(true);  node.appendChild(childClone);}break;}case ELEMENT_NODE:{userData=node.getUserDataRecord();Node parent=node.getParentNode();if (parent != null) {parent.removeChild(source);}node.setOwnerDocument(this);if (userData != null) setUserDataTable(node,userData);((ElementImpl)node).reconcileDefaultAttributes();break;}default :{userData=node.getUserDataRecord();Node parent=node.getParentNode();if (parent != null) {parent.removeChild(source);}node.setOwnerDocument(this);if (userData != null) setUserDataTable(node,userData);}}if (userData != null) callUserDataHandlers(source,null,UserDataHandler.NODE_ADOPTED,userData);return node;}  }
class C{  public boolean isSyllableBoundary(List syllablePhones,String[] wordPhones,int currentWordPhone){  return false;}  }
class C{  public static boolean isLegalQueueName(String queue){  return queue != null && queue.length() > 0 && queue.length() <= 255 && !(queue.charAt(0) == '_' && !queue.startsWith("__")) && !(queue.charAt(0) == '.' && (".".equals(queue) || "..".equals(queue))) && QUEUE_NAME_ALLOWED.matchesAllOf(queue);}  }
class C{  private void bedGraphToScores(String fileName) throws IOException {  List<ScreenWiggleLocusInfo> screenWigLocInfoList=new ArrayList<ScreenWiggleLocusInfo>();  for (int i=0; i < getGc().getUserWindowSize(); i++) {    screenWigLocInfoList.add(new ScreenWiggleLocusInfo());  }  try {    TabixReader tabixReader=new TabixReader(fileName);    Iterator qry=tabixReader.query(this.getGc().getChrom(),this.getGc().getFrom() - 1,this.getGc().getTo());    while (true) {      String q=qry.next();      if (q == null) {        break;      }      String[] tokens=q.split("\t");      int screenFrom=Utils.getIndexOfclosestValue(Integer.valueOf(tokens[1]) + 1,this.getGc().getMapping());      int screenTo=Utils.getIndexOfclosestValue(Integer.valueOf(tokens[2]),this.getGc().getMapping());      float value=Float.valueOf(tokens[this.bdgDataColIdx - 1]);      for (int i=screenFrom; i <= screenTo; i++) {        screenWigLocInfoList.get(i).increment(value);      }    }  } catch (  IOException e) {    e.printStackTrace();    System.err.println("Could not open tabix file: " + fileName);    System.err.println("Is the file sorted and indexed? After sorting by position (sort e.g. -k1,1 -k2,2n), compress with bgzip and index with e.g.:");    System.err.println("\nbgzip " + fileName);    System.err.println("tabix -p bed " + fileName + "\n");  }  ArrayList<Double> screenScores=new ArrayList<Double>();  for (  ScreenWiggleLocusInfo x : screenWigLocInfoList) {    screenScores.add((double)x.getMeanScore());  }  this.setScreenScores(screenScores);  return;}  }
class C{  public FunctionNameFilterRaster(){}  }
class C{  public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  executor.execute(this,space,txn,readModifier,max);}  }
class C{  public int writeDebugInfoItem(DebugInfoItem debugInfoItem){  int off=data.position();  writeUleb128(debugInfoItem.lineStart);  int parametersSize=debugInfoItem.parameterNames.length;  writeUleb128(parametersSize);  for (int i=0; i < parametersSize; ++i) {    int parameterName=debugInfoItem.parameterNames[i];    writeUleb128p1(parameterName);  }  write(debugInfoItem.infoSTM);  return off;}  }
class C{  public boolean hasQuery(){  return query != null && query.isFilter();}  }
class C{  public FixedSizeSwapRedoLogFile(FixedSizeSwapRedoLogFileConfig config){  this._memoryMaxPackets=config.getMemoryMaxPackets();  this._externalStorage=config.getRedoLogFileStorage();  this._fetchBatchSize=config.getFetchBatchSize();  if (_logger.isLoggable(Level.CONFIG)) {    _logger.config("FixedSizeSwapRedoLogFile created:" + "\n\tmemoryMaxPackets = " + _memoryMaxPackets + "\n\tfetchBatchSize = "+ _fetchBatchSize);  }}  }
class C{  public void createFile(String fileName){  System.out.println("Creating file " + fileName + "...");  try {    BufferedWriter out=new BufferedWriter(new FileWriter(fileName));    LinkedList currentList;    TreeSet currentSet;    Iterator iter=this.clusters.entrySet().iterator();    while (iter.hasNext()) {      Entry entry=(Entry)iter.next();      String name=(String)entry.getKey();      currentList=(LinkedList)entry.getValue();      Iterator iList=currentList.iterator();      while (iList.hasNext()) {        currentSet=(TreeSet)iList.next();        Iterator iSet=currentSet.iterator();        String docCluster="";        while (iSet.hasNext()) {          docCluster=docCluster + (String)iSet.next() + " ";        }        docCluster=docCluster + "# " + name;        out.write(docCluster + "\n");      }    }    out.close();    System.out.println("File created.");  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public final boolean isValid(JobParameters job){  return validate(job) == null;}  }
class C{  public void clickDropDownOption(SiteAdminButtons button){  webDriver.findElement(button.getLocator()).click();}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  protected AdsRemoveOfficeUsersQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  @Override protected void authorizeRequests(final HttpSecurity http) throws Exception {  http.authorizeRequests().anyRequest().authenticated();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public String revParse(String ref) throws RepoException {  return simpleCommand("rev-parse",ref).getStdout().trim();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201155,num0,skillname);}  }
class C{  @PostConstruct private void init(){synchronized (timerSync) {    if (LOG.isDebugEnabled()) {      LOG.debug("init() : Initialising heartbeat mechanism");    }    this.lastHeartbeatReceived=System.currentTimeMillis();    this.lastHeartbeatEvent=new Heartbeat();    this.heartbeatTimer=new Timer();    this.heartbeatTimer.scheduleAtFixedRate(this,Heartbeat.getHeartbeatInterval(),Heartbeat.getHeartbeatInterval());    if (LOG.isDebugEnabled()) {      LOG.debug("init() : Heartbeat mechanism started.");    }    jmsProxy.registerHeartbeatListener(this);  }}  }
class C{  private float smoothInput(float current,float input){  current=MathUtils.clamp(current,input - 20,input + 20);  return MathUtils.interpolate(current,input,0.9f);}  }
class C{  public static void launchDataReductionPromo(Activity parentActivity){  if (!DataReductionProxySettings.getInstance().isDataReductionProxyPromoAllowed()) {    return;  }  if (DataReductionProxySettings.getInstance().isDataReductionProxyManaged())   return;  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled())   return;  if (getDisplayedDataReductionPromo(parentActivity))   return;  if (MultiWindowUtils.getInstance().isMultiWindow(parentActivity))   return;  DataReductionPromoScreen promoScreen=new DataReductionPromoScreen(parentActivity);  promoScreen.setOnDismissListener(promoScreen);  promoScreen.show();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public CSVTableWriter(){  this(true);}  }
class C{  @Override public LogSeqNum writeToLog(){  List<Constant> rec=buildRecord();  return logMgr.append(rec.toArray(new Constant[rec.size()]));}  }
class C{  Object computeResult() throws JobException {  try {    if (!isCompleted(0))     throw new ResultNotReadyException("Cannot compute result " + "since there are jobs pending");  } catch (  JobNotStartedException jnse) {    throw new ResultNotReadyException("Cannot compute result since" + " jobs were not created");  }  int tmp=0;  int count=0;  checkresults:   for (int i=0; i < results.length; i++) {    tmp=((Integer)results[i]).intValue();    if (tmp == COMMITTED)     count++;  }  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"CommitJob:computeResult {0} participants COMMITTED",new Integer(count));  }  return new Integer(COMMITTED);}  }
class C{  public Geometry(String name){  super(name);}  }
class C{  public Vector ortho(){  return new Vector(-y,x);}  }
class C{  static private Node createClusterMembers(Document _rootDoc,Element _rootMembersElem,int _totalMembers,int _backupMembers,String _clusterName,String _groups){  Element memberTag=null;  String memberPrefix=System.getProperty(ClusterXML.CLUSTER_MEMBER_URL_PROTOCOL_PREFIX,ClusterXML.CLUSTER_MEMBER_URL_PROTOCOL_PREFIX_DEF);  for (int i=1; i <= _totalMembers; i++) {    memberTag=_rootDoc.createElement(ClusterXML.MEMBER_TAG);    if (_backupMembers > 0) {      memberTag.setAttribute("backup-container",_clusterName + "_container" + i);      memberTag.setAttribute("number-backups",Integer.toString(_backupMembers));      if (_groups != null) {        memberTag.setAttribute("jini-groups","?groups=" + _groups);      }      memberTag.setAttribute("member-prefix",memberPrefix);    }    Element memberNameTag=_rootDoc.createElement(ClusterXML.MEMBER_NAME_TAG);    Text memberNameText=_rootDoc.createTextNode(_clusterName + "_container" + i+ ":"+ _clusterName);    Element memberUrlTag=_rootDoc.createElement(ClusterXML.MEMBER_URL_TAG);    Text memberUrlText=null;    if (_groups != null) {      memberUrlText=_rootDoc.createTextNode(memberPrefix + _clusterName + "_container"+ i+ "/"+ _clusterName+ "?groups="+ _groups);    } else {      memberUrlText=_rootDoc.createTextNode(memberPrefix + _clusterName + "_container"+ i+ "/"+ _clusterName);    }    memberTag.appendChild(memberNameTag).appendChild(memberNameText);    memberTag.appendChild(memberUrlTag).appendChild(memberUrlText);    _rootMembersElem.appendChild(memberTag);  }  return _rootMembersElem;}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  private void loadOptions(String options){  String[] optionsParts=StringUtils.split(options,COMA_DELIMITER);  for (  String option : optionsParts) {    String[] optionsKeyValue=StringUtils.split(option,EQUAL,2);    String optionName=optionsKeyValue[0];    if (optionName.equals(DOMAIN_OPTION)) {      if (optionsKeyValue.length > 1) {        loadDomains(optionsKeyValue[1]);      }    } else     if (optionName.equals(THIRD_PARTY_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.THIRD_PARTY,true);    } else     if (optionName.equals(NOT_MARK + THIRD_PARTY_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.THIRD_PARTY,false);    } else     if (optionName.equals(ELEMHIDE_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.ELEMHIDE,true);    } else     if (optionName.equals(DOCUMENT_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.ELEMHIDE,true);      setUrlFilterRuleOption(UrlFilterRuleOption.CONTENT,true);      setUrlFilterRuleOption(UrlFilterRuleOption.JS_INJECT,true);      setUrlFilterRuleOption(UrlFilterRuleOption.URL_BLOCK,true);    } else     if (optionName.equals(CONTENT_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.CONTENT,true);    } else     if (optionName.equals(GENERIC_BLOCK_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.GENERIC_BLOCK,true);    } else     if (optionName.equals(GENERIC_HIDE_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.GENERIC_HIDE,true);    } else     if (optionName.equals(MATCH_CASE_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.MATCH_CASE,true);    } else     if (optionName.equals(JSINJECT_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.JS_INJECT,true);    } else     if (optionName.equals(URLBLOCK_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.URL_BLOCK,true);    } else     if (optionName.equals(POPUP_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.BLOCK_POPUPS,true);    } else     if (optionName.equals(MP4_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.MP4,true);    } else     if (optionName.equals(EMPTY_OPTION)) {      setUrlFilterRuleOption(UrlFilterRuleOption.EMPTY_RESPONSE,true);    } else     if (optionName.equals(CONTENT_SCRIPT_OPTION)) {      appendPermittedContentType(ContentType.SCRIPT);    } else     if (optionName.equals(CONTENT_IMAGE_OPTION)) {      appendPermittedContentType(ContentType.IMAGE);    } else     if (optionName.equals(CONTENT_OBJECT_OPTION)) {      appendPermittedContentType(ContentType.OBJECT);    } else     if (optionName.equals(CONTENT_STYLESHEET_OPTION)) {      appendPermittedContentType(ContentType.STYLE);    } else     if (optionName.equals(CONTENT_XMLHTTPREQUEST_OPTION)) {      appendPermittedContentType(ContentType.XML_HTTP_REQUEST);    } else     if (optionName.equals(CONTENT_OBJECT_SUBREQUEST)) {      appendPermittedContentType(ContentType.OBJECT_SUBREQUEST);    } else     if (optionName.equals(CONTENT_MEDIA_OPTION)) {      appendPermittedContentType(ContentType.MEDIA);    } else     if (optionName.equals(CONTENT_FONT_OPTION)) {      appendPermittedContentType(ContentType.FONT);    } else     if (optionName.equals(CONTENT_SUBDOCUMENT_OPTION)) {      appendPermittedContentType(ContentType.DOCUMENT);    } else     if (optionName.equals(CONTENT_OTHER_OPTION)) {      appendPermittedContentType(ContentType.OTHER);    } else     if (optionName.equals(NOT_MARK + CONTENT_SCRIPT_OPTION)) {      appendRestrictedContentType(ContentType.SCRIPT);    } else     if (optionName.equals(NOT_MARK + CONTENT_IMAGE_OPTION)) {      appendRestrictedContentType(ContentType.IMAGE);    } else     if (optionName.equals(NOT_MARK + CONTENT_OBJECT_OPTION)) {      appendRestrictedContentType(ContentType.OBJECT);    } else     if (optionName.equals(NOT_MARK + CONTENT_STYLESHEET_OPTION)) {      appendRestrictedContentType(ContentType.STYLE);    } else     if (optionName.equals(NOT_MARK + CONTENT_XMLHTTPREQUEST_OPTION)) {      appendRestrictedContentType(ContentType.XML_HTTP_REQUEST);    } else     if (optionName.equals(NOT_MARK + CONTENT_OBJECT_SUBREQUEST)) {      appendRestrictedContentType(ContentType.OBJECT_SUBREQUEST);    } else     if (optionName.equals(NOT_MARK + CONTENT_MEDIA_OPTION)) {      appendRestrictedContentType(ContentType.MEDIA);    } else     if (optionName.equals(NOT_MARK + CONTENT_FONT_OPTION)) {      appendRestrictedContentType(ContentType.FONT);    } else     if (optionName.equals(NOT_MARK + CONTENT_SUBDOCUMENT_OPTION)) {      appendRestrictedContentType(ContentType.DOCUMENT);    } else     if (optionName.equals(NOT_MARK + CONTENT_OTHER_OPTION)) {      appendRestrictedContentType(ContentType.OTHER);    } else     if (!IGNORED_OPTIONS.contains(optionName)) {      throw new IllegalArgumentException("Unknown option " + optionName);    }  }  if (enabledOptions != null && (enabledOptions.contains(UrlFilterRuleOption.JS_INJECT) || enabledOptions.contains(UrlFilterRuleOption.ELEMHIDE) || enabledOptions.contains(UrlFilterRuleOption.URL_BLOCK)|| enabledOptions.contains(UrlFilterRuleOption.CONTENT)|| enabledOptions.contains(UrlFilterRuleOption.BLOCK_POPUPS))) {    permittedContentTypesMask=ContentType.DOCUMENT.getFlagValue();    documentLevelRule=true;  }}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  public void recordLatency(double latencySec){  if (!this.serverHandledLatencySeconds.isPresent()) {    return;  }  addLabels(this.serverHandledLatencySeconds.get()).observe(latencySec);}  }
class C{  private Node importNode(Node source,boolean deep,boolean cloningDoc,HashMap reversedIdentifiers) throws DOMException {  Node newnode=null;  Hashtable userData=null;  if (source instanceof NodeImpl)   userData=((NodeImpl)source).getUserDataRecord();  int type=source.getNodeType();switch (type) {case ELEMENT_NODE:{      Element newElement;      boolean domLevel20=source.getOwnerDocument().getImplementation().hasFeature("XML","2.0");      if (domLevel20 == false || source.getLocalName() == null)       newElement=createElement(source.getNodeName()); else       newElement=createElementNS(source.getNamespaceURI(),source.getNodeName());      NamedNodeMap sourceAttrs=source.getAttributes();      if (sourceAttrs != null) {        int length=sourceAttrs.getLength();        for (int index=0; index < length; index++) {          Attr attr=(Attr)sourceAttrs.item(index);          if (attr.getSpecified() || cloningDoc) {            Attr newAttr=(Attr)importNode(attr,true,cloningDoc,reversedIdentifiers);            if (domLevel20 == false || attr.getLocalName() == null)             newElement.setAttributeNode(newAttr); else             newElement.setAttributeNodeNS(newAttr);          }        }      }      if (reversedIdentifiers != null) {        Object elementId=reversedIdentifiers.get(source);        if (elementId != null) {          if (identifiers == null)           identifiers=new Hashtable();          identifiers.put(elementId,newElement);        }      }      newnode=newElement;      break;    }case ATTRIBUTE_NODE:{    if (source.getOwnerDocument().getImplementation().hasFeature("XML","2.0")) {      if (source.getLocalName() == null) {        newnode=createAttribute(source.getNodeName());      } else {        newnode=createAttributeNS(source.getNamespaceURI(),source.getNodeName());      }    } else {      newnode=createAttribute(source.getNodeName());    }    if (source instanceof AttrImpl) {      AttrImpl attr=(AttrImpl)source;      if (attr.hasStringValue()) {        AttrImpl newattr=(AttrImpl)newnode;        newattr.setValue(attr.getValue());        deep=false;      } else {        deep=true;      }    } else {      if (source.getFirstChild() == null) {        newnode.setNodeValue(source.getNodeValue());        deep=false;      } else {        deep=true;      }    }    break;  }case TEXT_NODE:{  newnode=createTextNode(source.getNodeValue());  break;}case CDATA_SECTION_NODE:{newnode=createCDATASection(source.getNodeValue());break;}case ENTITY_REFERENCE_NODE:{newnode=createEntityReference(source.getNodeName());deep=false;break;}case ENTITY_NODE:{Entity srcentity=(Entity)source;EntityImpl newentity=(EntityImpl)createEntity(source.getNodeName());newentity.setPublicId(srcentity.getPublicId());newentity.setSystemId(srcentity.getSystemId());newentity.setNotationName(srcentity.getNotationName());newentity.isReadOnly(false);newnode=newentity;break;}case PROCESSING_INSTRUCTION_NODE:{newnode=createProcessingInstruction(source.getNodeName(),source.getNodeValue());break;}case COMMENT_NODE:{newnode=createComment(source.getNodeValue());break;}case DOCUMENT_TYPE_NODE:{if (!cloningDoc) {String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}DocumentType srcdoctype=(DocumentType)source;DocumentTypeImpl newdoctype=(DocumentTypeImpl)createDocumentType(srcdoctype.getNodeName(),srcdoctype.getPublicId(),srcdoctype.getSystemId());newdoctype.setInternalSubset(srcdoctype.getInternalSubset());NamedNodeMap smap=srcdoctype.getEntities();NamedNodeMap tmap=newdoctype.getEntities();if (smap != null) {for (int i=0; i < smap.getLength(); i++) {tmap.setNamedItem(importNode(smap.item(i),true,true,reversedIdentifiers));}}smap=srcdoctype.getNotations();tmap=newdoctype.getNotations();if (smap != null) {for (int i=0; i < smap.getLength(); i++) {tmap.setNamedItem(importNode(smap.item(i),true,true,reversedIdentifiers));}}newnode=newdoctype;break;}case DOCUMENT_FRAGMENT_NODE:{newnode=createDocumentFragment();break;}case NOTATION_NODE:{Notation srcnotation=(Notation)source;NotationImpl newnotation=(NotationImpl)createNotation(source.getNodeName());newnotation.setPublicId(srcnotation.getPublicId());newnotation.setSystemId(srcnotation.getSystemId());newnode=newnotation;break;}case DOCUMENT_NODE:default :{String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}}if (userData != null) callUserDataHandlers(source,newnode,UserDataHandler.NODE_IMPORTED,userData);if (deep) {for (Node srckid=source.getFirstChild(); srckid != null; srckid=srckid.getNextSibling()) {newnode.appendChild(importNode(srckid,true,cloningDoc,reversedIdentifiers));}}if (newnode.getNodeType() == Node.ENTITY_NODE) {((NodeImpl)newnode).setReadOnly(true,true);}return newnode;}  }
class C{  public Box(Vector3f center,float x,float y,float z){  super();  updateGeometry(center,x,y,z);}  }
class C{  public ProxyOutputStream(OutputStream proxy){  super(proxy);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public PearsonsCorrelation(RealMatrix matrix){  nObs=matrix.getRowDimension();  correlationMatrix=computeCorrelationMatrix(matrix);}  }
class C{  public Boolean isEncoded(){  return encoded;}  }
class C{  public static void show(@Nullable Activity activity,int resId,int duration){  show(activity,resId == 0 ? null : getString(activity,resId),duration,DEFAULT_GRAVITY);}  }
class C{  static double slowSin(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    if ((i & 1) == 0) {      continue;    }    split(FACT[i],as);    splitReciprocal(as,facts);    if ((i & 2) != 0) {      facts[0]=-facts[0];      facts[1]=-facts[1];    }    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  @Override public CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk() throws IOException {  ColumnDictionaryChunkMeta dictionaryChunkMeta=null;  openThriftReader();  while (dictionaryMetadataFileReader.hasNext()) {    dictionaryChunkMeta=(ColumnDictionaryChunkMeta)dictionaryMetadataFileReader.read();  }  CarbonDictionaryColumnMetaChunk columnMetaChunkForLastSegment=getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);  return columnMetaChunkForLastSegment;}  }
class C{  public static ClientDataTagImpl fromXml(final String xml) throws Exception {  ClientDataTagImpl cdt=null;  StringReader sr=null;  Serializer serializer=new Persister(new AnnotationStrategy());  try {    sr=new StringReader(xml);    cdt=serializer.read(ClientDataTagImpl.class,new StringReader(xml),false);  }  finally {    if (sr != null) {      sr.close();    }  }  return cdt;}  }
class C{  protected String sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,Context context) throws HttpException {  String responseBody="";  if (contentType != null) {    uriRequest.addHeader("Content-Type",contentType);  }  List<Cookie> list=cookieStore.getCookies();  StringBuilder s=new StringBuilder();  if (list != null && list.size() > 0) {    for (    Cookie cookie : list) {      s.append(cookie.getName()).append("=").append(cookie.getValue()).append(";");    }    uriRequest.setHeader("Cookie",s.toString());  }  try {    URI uri=uriRequest.getURI();    NLog.e(tag,"url : " + uri.toString());    String scheme=uri.getScheme();    if (!TextUtils.isEmpty(scheme) && ASSETS_PATH.equals(scheme)) {      String fileName=uri.getAuthority();      InputStream intput=context.getAssets().open(fileName);      responseBody=inputSteamToString(intput);      NLog.e(tag,"responseBody : " + responseBody);      return responseBody;    }    HttpEntity bufferEntity=null;    HttpResponse response=client.execute(uriRequest,httpContext);    HttpEntity entity=response.getEntity();    if (entity != null) {      bufferEntity=new BufferedHttpEntity(entity);      responseBody=EntityUtils.toString(bufferEntity,ENCODE_UTF8);      NLog.e(tag,"responseBody : " + responseBody);    }    SaveCookies(response);  } catch (  Exception e) {    e.printStackTrace();    throw new HttpException(e);  }  return responseBody;}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public Builder autoPanPaddingTopLeft(Point autoPanPaddingTopLeft){  this.autoPanPaddingTopLeft=autoPanPaddingTopLeft;  return this;}  }
class C{  public boolean isSuccessful(){  return isSuccessful;}  }
class C{  public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){  File image=discCache.get(imageUri);  return image.delete();}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  protected MarketGetByIdQueryWithExtended itemIds(String... value){  return unsafeParam("item_ids",value);}  }
class C{  protected boolean isMockTarget(){  return mockDockerHost != null;}  }
class C{  public static String filterMessage(String message){  for (  String word : message.split(" ")) {    if (isForbiddenWord(word)) {      message=message.replace(word,ENCODED_BAD_WORD);    }  }  return message;}  }
class C{  public static boolean isNotModified(HttpServletRequest request,HttpServletResponse response,IdentifiableObject object){  String tag=IdentifiableObjectUtils.getLastUpdatedTag(object);  response.setHeader(HEADER_ETAG,tag);  String inputTag=request.getHeader(HEADER_IF_NONE_MATCH);  if (object != null && inputTag != null && tag != null && inputTag.equals(tag)) {    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);    return true;  }  return false;}  }
class C{  public static void sendErrorMail(final Exception exception){  final Map<String,Object> exceptionModel=new HashMap<String,Object>();  if (AppScanUtils.isNotNull(RootConfiguration.getProperties()) && AppScanUtils.isNotNull(RootConfiguration.getProperties().get(AppScanConstants.PROPERTIES_OPERATING_ENVIRONMENT_IDENTIFIER))) {    exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_ENV_DENOTION,RootConfiguration.getProperties().get(AppScanConstants.PROPERTIES_OPERATING_ENVIRONMENT_IDENTIFIER));  } else {    exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_ENV_DENOTION,"");  }  exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_EXCEPTION_CLASS_DENOTION,exception.getClass().getSimpleName());  if (AppScanUtils.isNotNull(exception.getMessage())) {    exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_EXCEPTION_MESSAGE_DENOTION,exception.getMessage());  } else {    exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_EXCEPTION_MESSAGE_DENOTION,"");  }  exceptionModel.put(AppScanConstants.EXCEPTION_MAIL_TEMPLATE_EXCEPTION_STACKTRACE_DENOTION,ExceptionUtils.getStackTrace(exception));  exceptionModel.put("exceptionDL",RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_ERROR_CONTACT_DL_IDENTIFIER));  LOGGER.error("Mail being sent to explain error. The exception is: ",exception);  MailUtils.sendEmail(RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_ERROR_CONTACT_DL_IDENTIFIER),RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_ERROR_CONTACT_DL_IDENTIFIER),AppScanConstants.EXCEPTION_MAIL_SUBJECT,exceptionModel,AppScanConstants.EXCEPTION_MAIL_BODY_TEMPLATE);}  }
class C{  public static void writeTextFile(@NotNull Object requestor,@Nullable String contents,@NotNull File to) throws IOException {  if (contents == null) {    return;  }  VirtualFile vf=LocalFileSystem.getInstance().findFileByIoFile(to);  if (vf == null) {    VirtualFile parentDir=checkedCreateDirectoryIfMissing(to.getParentFile());    vf=parentDir.createChildData(requestor,to.getName());  }  Document document=FileDocumentManager.getInstance().getDocument(vf);  if (document != null) {    document.setText(contents.replaceAll("\r\n","\n"));    FileDocumentManager.getInstance().saveDocument(document);  } else {    vf.setBinaryContent(contents.getBytes(Charsets.UTF_8),-1,-1,requestor);  }}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public static void updateAccountVersion(Context context){  Account currentAccount=AccountUtils.getCurrentOwnCloudAccount(context);  AccountManager accountMgr=AccountManager.get(context);  if (currentAccount != null) {    String currentAccountVersion=accountMgr.getUserData(currentAccount,Constants.KEY_OC_ACCOUNT_VERSION);    if (currentAccountVersion == null) {      Log_OC.i(TAG,"Upgrading accounts to account version #" + ACCOUNT_VERSION);      Account[] ocAccounts=accountMgr.getAccountsByType(MainApp.getAccountType());      String serverUrl, username, newAccountName, password;      Account newAccount;      for (      Account account : ocAccounts) {        serverUrl=accountMgr.getUserData(account,Constants.KEY_OC_BASE_URL);        username=com.owncloud.android.lib.common.accounts.AccountUtils.getUsernameForAccount(account);        newAccountName=com.owncloud.android.lib.common.accounts.AccountUtils.buildAccountName(Uri.parse(serverUrl),username);        if (!newAccountName.equals(account.name)) {          Log_OC.d(TAG,"Upgrading " + account.name + " to "+ newAccountName);          newAccount=new Account(newAccountName,MainApp.getAccountType());          password=accountMgr.getPassword(account);          accountMgr.addAccountExplicitly(newAccount,(password != null) ? password : "",null);          accountMgr.setUserData(newAccount,Constants.KEY_OC_BASE_URL,serverUrl);          accountMgr.setUserData(newAccount,Constants.KEY_OC_VERSION,accountMgr.getUserData(account,Constants.KEY_OC_VERSION));          accountMgr.setUserData(newAccount,Constants.KEY_COOKIES,accountMgr.getUserData(account,Constants.KEY_COOKIES));          String isSamlStr=accountMgr.getUserData(account,Constants.KEY_SUPPORTS_SAML_WEB_SSO);          boolean isSaml="TRUE".equals(isSamlStr);          if (isSaml) {            accountMgr.setUserData(newAccount,Constants.KEY_SUPPORTS_SAML_WEB_SSO,"TRUE");          }          String isOauthStr=accountMgr.getUserData(account,Constants.KEY_SUPPORTS_OAUTH2);          boolean isOAuth="TRUE".equals(isOauthStr);          if (isOAuth) {            accountMgr.setUserData(newAccount,Constants.KEY_SUPPORTS_OAUTH2,"TRUE");          }          if (currentAccount.name.equals(account.name)) {            AccountUtils.setCurrentOwnCloudAccount(context,newAccountName);          }          accountMgr.removeAccount(account,null,null);        } else {          Log_OC.d(TAG,account.name + " needs no upgrade ");          newAccount=account;        }        Log_OC.d(TAG,"Setting version " + ACCOUNT_VERSION + " to "+ newAccountName);        accountMgr.setUserData(newAccount,Constants.KEY_OC_ACCOUNT_VERSION,Integer.toString(ACCOUNT_VERSION));      }    }  }}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  @Override public void serialize(AuditLogEntry value,JsonGenerator jgen,SerializerProvider provider) throws IOException {  jgen.writeStartObject();  jgen.writeObjectField("time",value.getTime());  jgen.writeObjectField("user",value.getUser());  jgen.writeFieldName("action");  jgen.writeStartObject();  jgen.writeStringField("type",value.getAction().toString());  jgen.writeStringField("message",AuditLogAction.getDescription(value));  jgen.writeEndObject();  if (value.getApplicationName() != null) {    jgen.writeObjectField("applicationName",value.getApplicationName());  }  if (value.getExperimentLabel() != null || value.getExperimentId() != null) {    jgen.writeFieldName("experiment");    jgen.writeStartObject();    if (value.getExperimentLabel() != null) {      jgen.writeObjectField("experimentLabel",value.getExperimentLabel());    }    if (value.getExperimentId() != null) {      jgen.writeObjectField("experimentId",value.getExperimentId());    }    jgen.writeEndObject();  }  if (value.getBucketLabel() != null) {    jgen.writeObjectField("bucketLabel",value.getBucketLabel());  }  if (value.getChangedProperty() != null) {    jgen.writeFieldName("change");    jgen.writeStartObject();    jgen.writeStringField("changedAttribute",value.getChangedProperty());    if (value.getBefore() != null) {      jgen.writeStringField("before",value.getBefore());    }    if (value.getAfter() != null) {      jgen.writeStringField("after",value.getAfter());    }    jgen.writeEndObject();  }  jgen.writeEndObject();}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public boolean isReady(){  return this.record.isReady();}  }
class C{  public static IDecoratorComponent[][] compileFormatString(String format){  int length=format.length();  int start=-1;  int end=length;  boolean isPrefix=true;  ArrayList prefix=new ArrayList();  ArrayList suffix=new ArrayList();  while ((start + 1) < length) {    if ((end=format.indexOf('{',start)) > -1) {      if (start + 1 != end) {        IDecoratorComponent component=new ConstantValueDecoratorComponent(format.substring(start + 1,end));        if (isPrefix) {          prefix.add(component);        } else {          suffix.add(component);        }      }      if ((start=format.indexOf('}',end)) > -1) {        String key=format.substring(end + 1,start);        if (key.equals(RESOURCE_NAME)) {          isPrefix=false;        } else {          IDecoratorComponent component=new MappedValueDecoratorComponent(key);          if (isPrefix) {            prefix.add(component);          } else {            suffix.add(component);          }        }      } else {        IDecoratorComponent component=new ConstantValueDecoratorComponent(format.substring(end));        if (isPrefix) {          prefix.add(component);        } else {          suffix.add(component);        }        break;      }    } else {      IDecoratorComponent component=new ConstantValueDecoratorComponent(format.substring(start + 1));      if (isPrefix) {        prefix.add(component);      } else {        suffix.add(component);      }      break;    }  }  return new IDecoratorComponent[][]{(IDecoratorComponent[])prefix.toArray(new IDecoratorComponent[prefix.size()]),(IDecoratorComponent[])suffix.toArray(new IDecoratorComponent[suffix.size()])};}  }
class C{  static FloatList createList(int size){  FloatList prev=null;  FloatList first=null;  for (int i=0; i < size; i++) {    FloatList cur=new FloatList();    cur.prev=prev;    if (prev == null) {      first=cur;    } else {      prev.next=cur;    }    prev=cur;  }  first.prev=prev;  prev.next=first;  return first;}  }
class C{  public SenseComparator(){}  }
class C{  private void checkApplyingFilter(UserFilter filter,String filterID,String userName){  expect(filter,notNull()).verify(USER_FILTER_NOT_FOUND,filterID,userName);  expect(filter.isLink(),equalTo(false)).verify(UNABLE_TO_CREATE_WIDGET,"Cannot create widget based on a link.");}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  public void rejectDocument(NGramDocument dDoc,double fLearningRate){  dDoc.getDocumentGraph().nullify();  dDoc.getDocumentHistogram().nullify();  if (this.getDocumentHistogram().length() > 0)   getDocumentHistogram().mergeHistogram(dDoc.getDocumentHistogram(),fLearningRate);  if (!this.getDocumentGraph().isEmpty())   this.getDocumentGraph().mergeGraph(dDoc.getDocumentGraph(),fLearningRate);}  }
class C{  public static void wtf(int level,String msg,Throwable throwable){  log(Log.ERROR,0,null,new ThrowableFormatter(),null,msg,throwable);}  }
class C{  private Observable<String> buildStorePreResponseChain(Observable<PreResponse> preResponseEmitter,Observable<JobRow> asynchronousPayload,JobRow jobRow){  return preResponseEmitter.zipWith(asynchronousPayload,null).flatMap(null);}  }
class C{  private static void resync(){  setScanner(new Scanner(new java.io.BufferedInputStream(System.in),CHARSET_NAME));}  }
class C{  public void makeNewRoot(DirEntry e){  if (currentPage.currentBlk().number() != 0) {    currentPage.close();    currentPage=new BTreePage(new BlockId(currentPage.currentBlk().fileName(),0),NUM_FLAGS,schema,tx);  }  Constant firstval=getKey(currentPage,0);  long level=getLevelFlag(currentPage);  long newBlkNum=currentPage.split(0,new long[]{level});  DirEntry oldRootEntry=new DirEntry(firstval,newBlkNum);  insert(oldRootEntry);  insert(e);  setLevelFlag(currentPage,level + 1);}  }
class C{  @deprecated public int codePointLength(CharSequence s){  return Character.codePointCount(s,0,s.length());}  }
class C{  public void reset(){  resetStatus();}  }
class C{  public static FileChannel createTempFile(Path dir,String prefix,String suffix) throws IOException {  return createNewFileImpl(dir,prefix,suffix,new OpenOption[]{READ,WRITE,CREATE_NEW,DELETE_ON_CLOSE}).getFileChannel();}  }
class C{  public boolean canSet(String field,Class type){  Column c=getColumn(field);  return (c == null ? false : c.canSet(type));}  }
class C{  protected boolean propagateIntervals(int start,long L,long R,int target){  if (!dfsScanSubgraph(start,target))   return false;  int rep_start=rep_cg[start];  int rep_target=rep_cg[target];  ContextsCollector targetContexts=contextsForMethods[target];  if (rep_start == rep_target) {    transferInSCC(start,target,L,R,targetContexts);  } else {    transferInSCC(start,rep_start,L,R,contextsForMethods[rep_start]);    topQ.clear();    topQ.add(rep_start);    while (!topQ.isEmpty()) {      int s=topQ.poll();      ContextsCollector sContexts=contextsForMethods[s];      CgEdge p=call_graph[s];      while (p != null) {        int t=p.t;        int rep_t=rep_cg[t];        if (in_degree[rep_t] != 0) {          ContextsCollector reptContexts=contextsForMethods[rep_t];          long block_size=max_context_size_block[s];          for (          SimpleInterval si : sContexts.bars) {            long in_block_offset=(si.L - 1) % block_size;            long newL=p.map_offset + in_block_offset;            long newR=si.R - si.L + newL;            if (rep_t == rep_target) {              transferInSCC(t,target,newL,newR,targetContexts);            } else {              transferInSCC(t,rep_t,newL,newR,reptContexts);            }          }          if (--in_degree[rep_t] == 0 && rep_t != rep_target) {            topQ.add(rep_t);          }        }        p=p.next;      }      sContexts.clear();    }  }  return true;}  }
class C{  public boolean isReifiable(){  ASTNode$State state=state();  try {    return false;  }  finally {  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public Date time(){  return getCalendar().toIso(dateTimeUnit).toJdkDate();}  }
class C{  public static Observable<GoogleApiClient> observable(Context context,Api api,Api.ApiOptions.HasOptions options){  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiWithOptions(api,options));}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public void java_lang_Class_getField0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getFieldObject());}  }
class C{  public void removeOption(int inOptNum){  if (this.optionsList == null) {    initialize();  }  this.optionsList.removeOption((byte)inOptNum);}  }
class C{  public boolean supportsSeek(){  return false;}  }
class C{  public Builder(){}  }
class C{  public static void removeMacro(Player player,int macroOrder){  if (player.getMacroList().removeMacro(macroOrder)) {    DAOManager.getDAO(PlayerMacrossesDAO.class).deleteMacro(player.getObjectId(),macroOrder);  }}  }
class C{  private void write(Writer w,boolean useOriginal) throws IOException {  if (useOriginal) {    originalData.disabledSamples.addAll(disabledSamples);    originalData.write(w,false);    originalData.disabledSamples.clear();  } else {    writeHeader(w);    for (    String classification : classification2class2counts.keySet()) {      Map<Integer,Integer[]> class2counts=classification2class2counts.get(classification);      classification=ClassificationType.getShortName(classification);      for (      Integer classId : class2counts.keySet()) {        Integer[] counts=class2counts.get(classId);        if (counts != null) {          w.write(classification + "\t" + classId);          int last=Math.min(counts.length,getNumberOfSamples()) - 1;          while (last > 0 && (counts[last] == null || counts[last] == 0))           last--;          for (int i=0; i <= last; i++) {            if (i < counts.length)             w.write("\t" + (counts[i] != null ? counts[i] : 0));          }          w.write("\n");        }      }    }    w.write("END_OF_DATA_TABLE\n");  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  private boolean canChangeAnnouncement(LegionMember legionMember,String announcement){  return legionMember.hasRights(LegionPermissionsMask.EDIT) && (announcement.isEmpty() || isValidAnnouncement(announcement));}  }
class C{  private static void copyAndRegisterModule(@NotNull Object requestor,@NotNull Map<String,VirtualFile> modules,@NotNull Project project,@Nullable GradleSyncListener listener) throws IOException, ConfigurationException {  VirtualFile projectRoot=project.getBaseDir();  if (projectRoot.findChild(SdkConstants.FN_SETTINGS_GRADLE) == null) {    projectRoot.createChildData(requestor,SdkConstants.FN_SETTINGS_GRADLE);  }  GradleSettingsFile gradleSettingsFile=GradleSettingsFile.get(project);  assert gradleSettingsFile != null : "File should have been created";  for (  Map.Entry<String,VirtualFile> module : modules.entrySet()) {    String name=module.getKey();    File targetFile=GradleUtil.getModuleDefaultPath(projectRoot,name);    VirtualFile moduleSource=module.getValue();    if (moduleSource != null) {      if (!isAncestor(projectRoot,moduleSource,true)) {        VirtualFile target=createDirectoryIfMissing(targetFile.getAbsolutePath());        if (target == null) {          throw new IOException(String.format("Unable to create directory %1$s",targetFile));        }        if (target.exists()) {          target.delete(requestor);        }        moduleSource.copy(requestor,target.getParent(),target.getName());      } else {        targetFile=virtualToIoFile(moduleSource);      }    }    gradleSettingsFile.addModule(name,targetFile);  }  GradleProjectImporter.getInstance().requestProjectSync(project,false,listener);}  }
class C{  private void hideLoading(){  progressBar.setVisibility(View.GONE);  recyclerView.setVisibility(View.VISIBLE);  emptyTextView.setVisibility(View.GONE);}  }
class C{  public FaveGetPhotosQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @SuppressWarnings("deprecation") @Override public void onSuccess(int statusCode,Header[] headers,String responseBody){  onSuccess(statusCode,responseBody);}  }
class C{  @Override public XSSimpleType createTypeList(String name,String targetNamespace,short finalSet,XSSimpleType itemType,XSObjectList annotations){  return new XSSimpleTypeDecl(name,targetNamespace,finalSet,(XSSimpleTypeDecl)itemType,false,annotations);}  }
class C{  @Override public int compare(String file0,String file1){  Matcher m0=pattern.matcher(file0);  Matcher m1=pattern.matcher(file1);  if (!m0.matches()) {    Log.w(TAG,"could not parse upgrade script file: " + file0);    throw new SQLiteAssetException("Invalid upgrade script file");  }  if (!m1.matches()) {    Log.w(TAG,"could not parse upgrade script file: " + file1);    throw new SQLiteAssetException("Invalid upgrade script file");  }  int v0_from=Integer.valueOf(m0.group(1));  int v1_from=Integer.valueOf(m1.group(1));  int v0_to=Integer.valueOf(m0.group(2));  int v1_to=Integer.valueOf(m1.group(2));  if (v0_from == v1_from) {    if (v0_to == v1_to) {      return 0;    }    return v0_to < v1_to ? -1 : 1;  }  return v0_from < v1_from ? -1 : 1;}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  final void processEntityDeclarations(List entityDecls){  int size=(entityDecls != null) ? entityDecls.size() : 0;  if (size > 0) {    if (fEntities == null) {      fEntities=new HashMap();    }    for (int i=0; i < size; ++i) {      EntityDeclaration decl=(EntityDeclaration)entityDecls.get(i);      fEntities.put(decl.getName(),decl);    }  }}  }
class C{  private BatchResponsePacket executeBatch(ISpaceProxy space,Transaction transaction,PreparedValuesCollection preparedValuesCollection) throws SQLException {  _executor=new QueryExecutor(this);  ArrayList<IEntryPacket[]> readResult=new ArrayList<IEntryPacket[]>();  ExpNode tempExpTree=expTree;  try {    if (getSecurityInterceptor() != null) {      SpaceContext spaceContext=getSession().getConnectionContext().getSpaceContext();      SecurityContext securityContext=SpaceContextHelper.getSecurityContext(spaceContext);      getSecurityInterceptor().intercept(securityContext,SpacePrivilege.WRITE,getTableName());    }    validateUpdateColumns();    ITypeDesc info=getTypeInfo();    int[] indices=new int[getUpdatedColumns().size()];    int j=0;    for (    UpdateColumn updateColumn : _updatedColumns) {      for (int i=0; i < info.getNumOfFixedProperties(); i++) {        if (info.getFixedProperty(i).getName().equalsIgnoreCase(updateColumn.getName())) {          indices[j]=i;          j++;          break;        }      }    }    for (    Object[] preparedValues : preparedValuesCollection.getBatchValues()) {      int preparedValueIndex=0;      for (      LiteralNode literalNode : updatedValues) {        if (literalNode.isPreparedValue()) {          literalNode.setValue(preparedValues[preparedValueIndex++]);        }      }      if (expTree != null) {        expTree=(ExpNode)tempExpTree.clone();        expTree.prepareValues(preparedValues);        setPreparedValues(preparedValues);        if (containsSubQueries()) {          executeSubQueries(space,transaction);        }      }      build();      IQueryResultSet<IEntryPacket> entries;      if (expTree != null) {        entries=_executor.execute(space,transaction,getReadModifier(),Integer.MAX_VALUE);      } else {        entries=_executor.readAll(space,transaction);      }      filterByRownum(entries);      Object[] convertedUpdateValues=new Object[updatedValues.size()];      j=0;      for (      UpdateColumn updateColumn : _updatedColumns) {        convertedUpdateValues[j]=updatedValues.get(j).getConvertedObject(info,updateColumn.getName());        j++;      }      IEntryPacket[] readEntryPackets=entries.toArray(new IEntryPacket[entries.size()]);      for (      IEntryPacket entry : readEntryPackets) {        for (int i=0; i < indices.length; i++) {          if (_updatedColumns.get(i).isSelfIncremented()) {            try {              entry.setFieldValue(indices[i],NumberUtil.add((Number)entry.getFieldValue(indices[i]),(Number)convertedUpdateValues[i],info.getFixedProperty(i).getTypeName()));            } catch (            ClassCastException e) {              throw new SQLException("Operator '+' is only allowed for numeric column types.");            }          } else {            entry.setFieldValue(indices[i],convertedUpdateValues[i]);          }        }      }      readResult.add(readEntryPackets);    }  } catch (  Exception e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,e.getMessage(),e);    }    SQLException se=new SQLException("Failed to update row; Cause: " + e,"GSP",-130);    se.initCause(e);    throw se;  } finally {    _executor=null;  }  ArrayList<IEntryPacket> originalEntries=new ArrayList<IEntryPacket>();  for (  IEntryPacket[] updatedEntryPackets : readResult) {    for (int i=0; i < updatedEntryPackets.length; i++) {      originalEntries.add(updatedEntryPackets[i]);    }  }  try {    if (originalEntries.size() > 0)     space.writeMultiple(originalEntries.toArray(),transaction,0,null,0,UpdateModifiers.UPDATE_ONLY);  } catch (  WriteMultipleException e) {    int[] result=new int[readResult.size()];    int batchIndex=0;    int entryIndex=0;    for (    IWriteResult writeResult : e.getResults()) {      while (entryIndex == readResult.get(entryIndex).length) {        batchIndex++;        entryIndex=0;      }      if (!writeResult.isError())       result[batchIndex]=Statement.EXECUTE_FAILED;      if (result[batchIndex] != Statement.EXECUTE_FAILED)       result[batchIndex]++;      entryIndex++;    }    throw new BatchUpdateException(e.getMessage(),result);  }catch (  Exception e) {    int[] result=new int[readResult.size()];    for (int i=0; i < result.length; i++)     result[i]=Statement.EXECUTE_FAILED;    throw new BatchUpdateException(e.getMessage(),result);  }  int[] result=new int[readResult.size()];  int resultIndex=0;  for (  IEntryPacket[] updatedEntryPackets : readResult) {    result[resultIndex++]=updatedEntryPackets.length;  }  return new BatchResponsePacket(result);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  protected void newCovarianceData(double[][] omega){  this.Omega=new Array2DRowRealMatrix(omega);  this.OmegaInverse=null;}  }
class C{  public MovieSaveException(){}  }
class C{  public static Uri buildItemUri(long _id){  return BASE_URI.buildUpon().appendPath("items").appendPath(Long.toString(_id)).build();}  }
class C{  private void drawTexts(String[] strings,Canvas canvas,float x,float y){  Paint.FontMetrics fontMetrics=textPaint.getFontMetrics();  float top=fontMetrics.top;  float bottom=fontMetrics.bottom;  int length=strings.length;  float total=(length - 1) * (-top + bottom) + (-fontMetrics.ascent + fontMetrics.descent);  float offset=total / 2 - bottom;  for (int i=0; i < length; i++) {    float yAxis=-(length - i - 1) * (-top + bottom) + offset;    canvas.drawText(strings[i],x,y + yAxis,textPaint);  }}  }
class C{  private synchronized void initMapsIfNecessary(){  if (this.gsByName == null) {    this.gsByName=new HashMap<String,GigaSpace>();    for (    String gsName : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class)) {      GigaSpace gs=(GigaSpace)this.applicationContext.getBean(gsName);      gsByName.put(gsName,gs);    }    if (this.gsByName.isEmpty()) {      String[] gsNames=BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.applicationContext,GigaSpace.class);      if (gsNames.length == 1) {        this.uniqueGs=(GigaSpace)this.applicationContext.getBean(gsNames[0]);      }    } else     if (this.gsByName.size() == 1) {      this.uniqueGs=this.gsByName.values().iterator().next();    }    if (this.gsByName.isEmpty() && this.uniqueGs == null) {      logger.warn("No named gs instances defined and not exactly one anonymous one: cannot inject");    }  }}  }
class C{  public static boolean isSameDomainName(String url1,String url2) throws MalformedURLException {  return isSameDomainName(new URL(url1),new URL(url2));}  }
class C{  public MessagesRestoreQuery restore(Actor actor,int messageId){  return new MessagesRestoreQuery(getClient(),actor,messageId);}  }
class C{  @Override public SpaceCopyStatus spaceCopy(String remoteUrl,Object template,boolean includeNotifyTemplates,int chunkSize) throws RemoteException {  return ((IRemoteJSpaceAdmin)getProxy()).spaceCopy(remoteUrl,template,includeNotifyTemplates,chunkSize);}  }
class C{  @Override public void showMessage(String message){  Snackbar.make(root,message,Snackbar.LENGTH_SHORT).show();}  }
class C{  static String unicodeToASCII(String input){  try {    return toASCII(input);  } catch (  IllegalArgumentException e) {    return input;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T newInstance(Class<T> theClass,Configuration conf){  T result;  try {    Constructor<T> meth=(Constructor<T>)CONSTRUCTOR_CACHE.get(theClass);    if (meth == null) {      meth=theClass.getDeclaredConstructor(EMPTY_ARRAY);      meth.setAccessible(true);      CONSTRUCTOR_CACHE.put(theClass,meth);    }    result=meth.newInstance();  } catch (  Exception e) {    throw new RuntimeException(e);  }  setConf(result,conf);  return result;}  }
class C{  private Map<String,List<ChartObject>> convertResult(StatisticsDocumentHandler handler){  DecimalFormat formatter=new DecimalFormat("###.##");  List<ChartObject> objects=handler.getResult();  if (objects.isEmpty()) {    return new HashMap<>();  }  Map<String,List<ChartObject>> result=new HashMap<>();  for (  ChartObject object : objects) {    Map<String,String> values=new HashMap<>();    double failed=Integer.parseInt(object.getValues().get(getFailedFieldName()));    double skipped=Integer.parseInt(object.getValues().get(getSkippedFieldName()));    double total=Integer.parseInt(object.getValues().get(getTotalFieldName()));    if (total > 0) {      double percent=(failed + skipped) / total * 100;      values.put(NOT_PASSED_PERCENT,formatter.format(percent));    } else {      values.put(NOT_PASSED_PERCENT,"0");    }    object.setValues(values);  }  result.put("result",objects);  return result;}  }
class C{  public MarketGetQuery(VkApiClient client,UserActor actor,int ownerId){  super(client,"market.get",GetResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);}  }
class C{  private String fName(String name){  return dir.getPath() + File.separator + name;}  }
class C{  public static final void drawMotorJoint(GL2 gl,MotorJoint joint){  gl.glColor4f(1.0f,0.0f,0.0f,1.0f);  Vector2 target=joint.getBody1().getWorldVector(joint.getLinearTarget());  RenderUtilities.fillRectangleFromCenter(gl,target.x,target.y,0.1,0.1);}  }
class C{  public FaveGetMarketItemsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void draw(){  if (animate && rectangle != null) {    Rectangle2D visibleRect=panel.getVisibleRect();    double xMin=Math.max(rectangle.getX(),visibleRect.getX());    double xMax=Math.min(rectangle.getX() + rectangle.getWidth(),visibleRect.getX() + visibleRect.getWidth() - 2);    double width=xMax - xMin;    double yMin=Math.max(rectangle.getY(),visibleRect.getY());    double yMax=Math.min(rectangle.getY() + rectangle.getHeight(),visibleRect.getY() + visibleRect.getHeight() - 2);    double height=yMax - yMin;    drawRectangle.setRect(xMin,yMin,width,height);    Graphics2D gc=(Graphics2D)panel.getGraphics();    if (gc != null) {      gc.setStroke(backgroundStroke);      gc.setColor(Color.WHITE);      gc.draw(drawRectangle);      gc.setColor(highlightColor);      if (even) {        gc.setStroke(evenStroke);        even=false;      } else {        gc.setStroke(oddStroke);        even=true;      }      gc.draw(drawRectangle);      gc.setStroke(basicStroke);    }  }}  }
class C{  public VersionChecker(Context ctx,String versionUrl,int iconResId,int uniqueNotificationId,String notificationUrl){  handler=new LeakGuardHandlerWrapper<Context>(ctx);  this.userAgent=new OkHttpClient();  this.versionUrl=versionUrl;  this.iconResId=iconResId;  this.notificationUrl=notificationUrl;  this.uniqueNotificationId=uniqueNotificationId;  try {    this.currentVersion=ctx.getPackageManager().getPackageInfo(ctx.getPackageName(),0).versionCode;  } catch (  NameNotFoundException e) {  }}  }
class C{  public static void skipFully(DataInput in,int len) throws IOException {  int total=0;  int cur=0;  while ((total < len) && ((cur=in.skipBytes(len - total)) > 0)) {    total+=cur;  }  if (total < len) {    throw new IOException("Not able to skip " + len + " bytes, possibly "+ "due to end of input.");  }}  }
class C{  public PhotosSaveQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  public CyclicCounter(){  super();}  }
class C{  public boolean first(){  return seek(MDB_FIRST);}  }
class C{  public int size(){  return innerChain.size();}  }
class C{  public int optInt(String key,int defaultValue){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getIntValue(cbuf);}  }
class C{  public Object childrenPolymorphicAccept(MithraQLVisitor visitor,Object data){  this.jjtAccept(visitor,data);  if (this.children != null) {    for (int i=0; i < this.children.length; ++i) {      this.children[i].jjtAccept(visitor,data);      ((SimpleNode)this.children[i]).childrenAccept(visitor,data);    }  }  return data;}  }
class C{  private void checkHeaderEmpty(String command,String header){  if (!Strings.isNullOrEmpty(header)) {    error("command '@%s' has unexpected arguments",command);  }}  }
class C{  public StatusSetQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public Builder zoomReverse(Boolean zoomReverse){  this.zoomReverse=zoomReverse;  return this;}  }
class C{  public void formAst(String fullPath,List<String> locations,String className){  JavaToJimple jtj=new JavaToJimple();  polyglot.frontend.ExtensionInfo extInfo=jtj.initExtInfo(fullPath,locations);  if (compiler == null) {    compiler=new polyglot.frontend.Compiler(extInfo);  }  astNode=jtj.compile(compiler,fullPath,extInfo);  resolveAST();}  }
class C{  public static void streamContentToBrowser(HttpServletResponse response,byte[] bytes,String contentType,String fileName) throws IOException {  setResponseBrowserProxyNoCache(response);  response.setContentLength(bytes.length);  if (contentType != null) {    response.setContentType(contentType);  }  if (fileName != null) {    response.setHeader("Content-Disposition","attachment;filename=\"" + fileName + "\"");  }  OutputStream out=response.getOutputStream();  InputStream in=new ByteArrayInputStream(bytes);  try {    streamContent(out,in,bytes.length);  } catch (  IOException e) {    in.close();    out.close();    throw e;  }  in.close();  out.flush();  out.close();}  }
class C{  protected LinkedMapWritable queryForestInfo(ContentSource cs) throws IOException {  Session session=null;  ResultSequence result=null;  try {    session=cs.newSession();    AdhocQuery query=null;    if (legacy) {      LOG.debug("Legacy assignment is assumed for older MarkLogic" + " Server.");      query=session.newAdhocQuery(FOREST_HOST_MAP_QUERY);    } else {      query=session.newAdhocQuery(FOREST_HOST_QUERY);      if (policy == AssignmentPolicy.Kind.RANGE || policy == AssignmentPolicy.Kind.QUERY) {        String pName=conf.get(OUTPUT_PARTITION);        query.setNewStringVariable("partition-name",pName);      } else {        query.setNewStringVariable("partition-name","");      }      query.setNewStringVariable("policy",policy.toString().toLowerCase());    }    RequestOptions options=new RequestOptions();    options.setDefaultXQueryVersion("1.0-ml");    query.setOptions(options);    if (LOG.isDebugEnabled()) {      LOG.debug(query.toString());    }    result=session.submitRequest(query);    LinkedMapWritable forestStatusMap=new LinkedMapWritable();    Text forest=null;    String outputHost=conf.get(OUTPUT_HOST);    boolean local=MODE_LOCAL.equals(conf.get(EXECUTION_MODE));    while (result.hasNext()) {      ResultItem item=result.next();      if (forest == null) {        forest=new Text(item.asString());      } else {        String hostName=item.asString();        if (local && hostName != null && hostName.equals(initHostName)) {          hostName=outputHost;        }        if (!legacy) {          if (policy == AssignmentPolicy.Kind.BUCKET) {            item=result.next();            boolean updatable=Boolean.parseBoolean(item.asString());            forestStatusMap.put(forest,new ForestInfo(hostName,-1,updatable));          } else           if (policy == AssignmentPolicy.Kind.LEGACY) {            forestStatusMap.put(forest,new ForestInfo(hostName,-1,true));          } else {            item=result.next();            long dc=Long.parseLong(item.asString());            forestStatusMap.put(forest,new ForestInfo(hostName,dc,true));          }        } else {          forestStatusMap.put(forest,new ForestInfo(hostName,-1,true));        }        forest=null;      }    }    if (forestStatusMap.size() == 0) {      throw new IOException("Number of forests is 0: " + "check forests in database");    }    am.initialize(policy,forestStatusMap,conf.getInt(BATCH_SIZE,10));    return forestStatusMap;  } catch (  RequestException e) {    LOG.error(e.getMessage(),e);    throw new IOException(e);  } finally {    if (result != null) {      result.close();    }    if (session != null) {      session.close();    }  }}  }
class C{  public void removeLoadedServiceUnit(String suName,ResourceQuota quota){  if (this.loadedBundles.remove(suName)) {    this.allocatedQuota.substract(quota);    estimateLoadPercentage();  }}  }
class C{  @Deployment public void testLoop(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("inclusiveTestLoop",CollectionUtil.singletonMap("counter",1));  Task task=taskService.createTaskQuery().singleResult();  assertEquals("task C",task.getName());  taskService.complete(task.getId());  assertEquals(0,taskService.createTaskQuery().count());  assertEquals("Found executions: " + runtimeService.createExecutionQuery().list(),0,runtimeService.createExecutionQuery().count());  assertProcessEnded(pi.getId());}  }
class C{  public boolean addAll(int[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (add(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public static Map<String,Object> deactivateContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=deactivateContentAssocMethod(dctx,context);  return result;}  }
class C{  public Row(Map<String,Object> map){  set(map);}  }
class C{  public void update(int length,long rtpts) throws IOException {  mPacketCount+=1;  mOctetCount+=length;  setLong(mPacketCount,20,24);  setLong(mOctetCount,24,28);  now=SystemClock.elapsedRealtime();  delta+=oldnow != 0 ? now - oldnow : 0;  oldnow=now;  if (interval > 0) {    if (delta >= interval) {      send(System.nanoTime(),rtpts);      delta=0;    }  }}  }
class C{  private void beginNode(Node node){switch (node.getNodeType()) {case Node.ELEMENT_NODE:    fCurrentElement=node;  fNamespaceContext.pushContext();fillQName(fElementQName,node);processAttributes(node.getAttributes());fSchemaValidator.startElement(fElementQName,fAttributes,null);break;case Node.TEXT_NODE:if (fDOMValidatorHandler != null) {fDOMValidatorHandler.setIgnoringCharacters(true);sendCharactersToValidator(node.getNodeValue());fDOMValidatorHandler.setIgnoringCharacters(false);fDOMValidatorHandler.characters((Text)node);} else {sendCharactersToValidator(node.getNodeValue());}break;case Node.CDATA_SECTION_NODE:if (fDOMValidatorHandler != null) {fDOMValidatorHandler.setIgnoringCharacters(true);fSchemaValidator.startCDATA(null);sendCharactersToValidator(node.getNodeValue());fSchemaValidator.endCDATA(null);fDOMValidatorHandler.setIgnoringCharacters(false);fDOMValidatorHandler.cdata((CDATASection)node);} else {fSchemaValidator.startCDATA(null);sendCharactersToValidator(node.getNodeValue());fSchemaValidator.endCDATA(null);}break;case Node.PROCESSING_INSTRUCTION_NODE:if (fDOMValidatorHandler != null) {fDOMValidatorHandler.processingInstruction((ProcessingInstruction)node);}break;case Node.COMMENT_NODE:if (fDOMValidatorHandler != null) {fDOMValidatorHandler.comment((Comment)node);}break;case Node.DOCUMENT_TYPE_NODE:if (fDOMValidatorHandler != null) {fDOMValidatorHandler.doctypeDecl((DocumentType)node);}break;default :break;}}  }
class C{  public boolean hasTypeDecl(){  return getTypeDeclOpt().getNumChild() != 0;}  }
class C{  public static void main(String[] args){  SpringApplication app=new SpringApplication(App.class);  app.setShowBanner(false);  app.setWebEnvironment(false);  app.run(args);}  }
class C{  private void init(){  addTextChangedListener(mEditTextWatcher);}  }
class C{  public synchronized static AccessToken buildAccessToken(String accessToken){  if (accessToken == null || "".equals(accessToken)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(accessToken);    return new AccessToken(jsonObject);  } catch (  JSONException e) {    Log.d(TAG,e.getMessage());    return null;  }}  }
class C{  public void patch_splitMax(LinkedList<Patch> patches){  short patch_size=Match_MaxBits;  String precontext, postcontext;  Patch patch;  int start1, start2;  boolean empty;  Operation diff_type;  String diff_text;  ListIterator<Patch> pointer=patches.listIterator();  Patch bigpatch=pointer.hasNext() ? pointer.next() : null;  while (bigpatch != null) {    if (bigpatch.length1 <= Match_MaxBits) {      bigpatch=pointer.hasNext() ? pointer.next() : null;      continue;    }    pointer.remove();    start1=bigpatch.start1;    start2=bigpatch.start2;    precontext="";    while (!bigpatch.diffs.isEmpty()) {      patch=new Patch();      empty=true;      patch.start1=start1 - precontext.length();      patch.start2=start2 - precontext.length();      if (precontext.length() != 0) {        patch.length1=patch.length2=precontext.length();        patch.diffs.add(new Diff(Operation.EQUAL,precontext));      }      while (!bigpatch.diffs.isEmpty() && patch.length1 < patch_size - Patch_Margin) {        diff_type=bigpatch.diffs.getFirst().operation;        diff_text=bigpatch.diffs.getFirst().text;        if (diff_type == Operation.INSERT) {          patch.length2+=diff_text.length();          start2+=diff_text.length();          patch.diffs.addLast(bigpatch.diffs.removeFirst());          empty=false;        } else         if (diff_type == Operation.DELETE && patch.diffs.size() == 1 && patch.diffs.getFirst().operation == Operation.EQUAL && diff_text.length() > 2 * patch_size) {          patch.length1+=diff_text.length();          start1+=diff_text.length();          empty=false;          patch.diffs.add(new Diff(diff_type,diff_text));          bigpatch.diffs.removeFirst();        } else {          diff_text=diff_text.substring(0,Math.min(diff_text.length(),patch_size - patch.length1 - Patch_Margin));          patch.length1+=diff_text.length();          start1+=diff_text.length();          if (diff_type == Operation.EQUAL) {            patch.length2+=diff_text.length();            start2+=diff_text.length();          } else {            empty=false;          }          patch.diffs.add(new Diff(diff_type,diff_text));          if (diff_text.equals(bigpatch.diffs.getFirst().text)) {            bigpatch.diffs.removeFirst();          } else {            bigpatch.diffs.getFirst().text=bigpatch.diffs.getFirst().text.substring(diff_text.length());          }        }      }      precontext=diff_text2(patch.diffs);      precontext=precontext.substring(Math.max(0,precontext.length() - Patch_Margin));      if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {        postcontext=diff_text1(bigpatch.diffs).substring(0,Patch_Margin);      } else {        postcontext=diff_text1(bigpatch.diffs);      }      if (postcontext.length() != 0) {        patch.length1+=postcontext.length();        patch.length2+=postcontext.length();        if (!patch.diffs.isEmpty() && patch.diffs.getLast().operation == Operation.EQUAL) {          patch.diffs.getLast().text+=postcontext;        } else {          patch.diffs.add(new Diff(Operation.EQUAL,postcontext));        }      }      if (!empty) {        pointer.add(patch);      }    }    bigpatch=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  public MarketReorderItemsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){  super(client,"market.reorderItems",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);}  }
class C{  public void add(String expr,int shape){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,shape);}  }
class C{  public static void main(String[] sArgs){  DUC2006TopicFileSet t=null;  t=new DUC2006TopicFileSet("/usr/misc/Corpora/DUC2006/duc2006_topics.sgml","/usr/misc/Corpora/DUC2006/duc2006_docs/");  if (t == null)   return;  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  System.err.flush();  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  private String deployTestProcessWithTestTenant(){  return deployTestProcessWithTestTenant(TEST_TENANT_ID);}  }
class C{  public void actionPerformed(ActionEvent ev){  File lastOpenFile=ProgramProperties.getFile(MeganProperties.MEGANFILE);  MeganAndRMAFileFilter meganAndRMAFileFilter=new MeganAndRMAFileFilter();  meganAndRMAFileFilter.setAllowGZipped(true);  meganAndRMAFileFilter.setAllowZipped(true);  meganAndRMAFileFilter.add(MeganizedDAAFileFilter.getInstance());  getDir().notifyLockInput();  Collection<File> files;  try {    files=ChooseFileDialog.chooseFilesToOpen(getViewer().getFrame(),lastOpenFile,meganAndRMAFileFilter,meganAndRMAFileFilter,ev,"Open MEGAN file");  }  finally {    getDir().notifyUnlockInput();  }  if (files != null && files.size() > 0) {    final StringBuilder buf=new StringBuilder();    for (    File file : files) {      if (file != null && file.exists() && file.canRead()) {        ProgramProperties.put(MeganProperties.MEGANFILE,file.getAbsolutePath());        buf.append("open file='").append(file.getPath()).append("';");      }    }    execute(buf.toString());  }}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public GroupsIsMemberQueryWithExtended isMemberExtended(UserActor actor,String groupId){  return new GroupsIsMemberQueryWithExtended(getClient(),actor,groupId);}  }
class C{  public byte[] encrypt(String string){  return encrypt(string.getBytes());}  }
class C{  public void localMustBeSubtypeOf(Local l,RefType t){  FastHierarchy fh=Scene.v().getFastHierarchy();  for (  Type type : types) {    RefType supertype=(RefType)type;    if (fh.canStoreType(t,supertype)) {      set(indexOf(l,supertype));    }  }}  }
class C{  private void startCheckingStatus(){  future=executor.submit(null);}  }
class C{  public Sample nearestSample(float uIndex,int unitPart){  int i, iSize=0, nSize;  int start=(unitPart == 1) ? 0 : midPoint;  int end=(unitPart == 1) ? midPoint : samples.length;  for (i=start; i < end; i++) {    nSize=iSize + samples[i].getResidualSize();    if (Math.abs(uIndex - (float)iSize) < Math.abs(uIndex - (float)nSize)) {      return samples[i];    }    iSize=nSize;  }  return samples[end - 1];}  }
class C{  public void stateChanged(ChangeEvent evt){  int scale=slider.getValue();  value.setText("x" + String.valueOf(scale));  size.setText("Image Size: " + (width * scale) + " x "+ (height * scale)+ " pixels");  preview.repaint();}  }
class C{  public double asDistance(){  double dS=getOverallSimilarity();  if (dS == 0)   return Double.POSITIVE_INFINITY; else   return 1.0 / dS;}  }
class C{  public static String truncate(int n,int smallestDigit,int biggestDigit){  int numDigits=biggestDigit - smallestDigit + 1;  char[] result=new char[numDigits];  for (int j=1; j < smallestDigit; j++) {    n=n / 10;  }  for (int j=numDigits - 1; j >= 0; j--) {    result[j]=Character.forDigit(n % 10,10);    n=n / 10;  }  return new String(result);}  }
class C{  public static Model create(FileDescriptorSet proto){  return new Model(proto,null,null,ExtensionPool.EMPTY,new BoundedDiagCollector());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_SCORE(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1400237,num1,value0);}  }
class C{  public ArrayList<Entry> process(File inputFileOrDir,File outputRoot) throws Exception {  if (!inputFileOrDir.exists())   throw new IllegalArgumentException("Input file does not exist: " + inputFileOrDir.getAbsolutePath());  if (inputFileOrDir.isFile())   return process(new File[]{inputFileOrDir},outputRoot); else   return process(inputFileOrDir.listFiles(),outputRoot);}  }
class C{  public void close() throws IOException {  if (classDumpReader != null)   classDumpReader.close();}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof Fraction) {    Fraction rhs=(Fraction)other;    return (numerator == rhs.numerator) && (denominator == rhs.denominator);  }  return false;}  }
class C{  public PhotosEditQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  @Override public void update(){  if (TextUtils.isEmpty(DynamicViewManager.getInstance().getUpdateFileFullPath())) {    return;  }  File apkFile=new File(DynamicViewManager.getInstance().getUpdateFileFullPath());  if (apkFile.exists()) {    DexClassLoader classLoader=new DexClassLoader(apkFile.getAbsolutePath(),DynamicViewManager.getInstance().getDexOutDirPath(),null,getClass().getClassLoader());    if (DynamicViewManager.getInstance().getDynamicInfo() == null) {      return;    }    for (    DynamicViewInfo viewInfo : DynamicViewManager.getInstance().getDynamicInfo().viewInfo) {      if (viewInfo != null) {        if (viewInfo.uuid.equals(uuid)) {          try {            Class newViewClazz=classLoader.loadClass(viewInfo.packageName);            Constructor con=newViewClazz.getConstructor(Context.class);            if (dynamicView == null) {              dynamicView=(View)con.newInstance(getContext());            }            Reflect.onObject(getContext()).set("mResources",null);            getContext().getResources();            RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(DisplayUtil.dip2px(getContext(),viewInfo.layoutParams.width),DisplayUtil.dip2px(getContext(),viewInfo.layoutParams.height));            removeAllViews();            layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);            addView(dynamicView,layoutParams);          } catch (          ClassNotFoundException e) {            e.printStackTrace();          }catch (          NoSuchMethodException e) {            e.printStackTrace();          }catch (          IllegalAccessException e) {            e.printStackTrace();          }catch (          InstantiationException e) {            e.printStackTrace();          }catch (          InvocationTargetException e) {            e.printStackTrace();          }        }      }    }    postInvalidate();  }}  }
class C{  @SuppressWarnings("unchecked") public static boolean isLog4jConfigured(){  return false;}  }
class C{  public static boolean isBracketing(UnivariateFunction function,final double lower,final double upper) throws NullArgumentException {  MathUtils.checkNotNull(function,LocalizedCoreFormats.FUNCTION);  final double fLo=function.value(lower);  final double fHi=function.value(upper);  return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);}  }
class C{  private static double[] computeShannonWeaver(MainViewer mainViewer,ProgressListener progressListener) throws IOException, CanceledException {  progressListener.setMaximum(2 * mainViewer.getSelectedNodes().size());  progressListener.setProgress(0);  int numberOfDatasets=mainViewer.getDir().getDocument().getNumberOfSamples();  double[] total=new double[numberOfDatasets];  for (  Node v : mainViewer.getSelectedNodes()) {    int[] summarized=mainViewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];    progressListener.incrementProgress();  }  double[] result=new double[numberOfDatasets];  for (int i=0; i < result.length; i++)   result[0]=0d;  for (  Node v : mainViewer.getSelectedNodes()) {    int[] summarized=mainViewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++) {      if (summarized[i] > 0) {        double p=summarized[i] / total[i];        result[i]+=p * Math.log(p) / LOG2;      }    }    progressListener.incrementProgress();  }  for (int i=0; i < result.length; i++)   result[i]=-result[i];  return result;}  }
class C{  Model(){  this.s1=null;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  private NumericSummaryTable(String name){  super(name);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  NIOConfiguration copy=(NIOConfiguration)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  @NotNull public static LaunchCompatibility canRunOnDevice(@NotNull AndroidVersion minSdkVersion,@NotNull IAndroidTarget projectTarget,@NotNull EnumSet<IDevice.HardwareFeature> requiredFeatures,@Nullable Set<String> supportedAbis,@NotNull AndroidDevice device){  AndroidVersion deviceVersion=device.getVersion();  if (!deviceVersion.equals(AndroidVersion.DEFAULT) && !deviceVersion.canRun(minSdkVersion)) {    String reason=String.format("minSdk(%1$s) %3$s deviceSdk(%2$s)",minSdkVersion,deviceVersion,minSdkVersion.getCodename() == null ? ">" : "!=");    return new LaunchCompatibility(ThreeState.NO,reason);  }  for (  IDevice.HardwareFeature feature : requiredFeatures) {    if (!device.supportsFeature(feature)) {      return new LaunchCompatibility(ThreeState.NO,"missing feature: " + feature);    }  }  if (device.supportsFeature(IDevice.HardwareFeature.WATCH)) {    if (!requiredFeatures.contains(IDevice.HardwareFeature.WATCH)) {      return new LaunchCompatibility(ThreeState.NO,"missing uses-feature watch, non-watch apks cannot be launched on a watch");    }  }  if (supportedAbis != null) {    Set<String> deviceAbis=Sets.newLinkedHashSet();    for (    Abi abi : device.getAbis()) {      deviceAbis.add(abi.toString());    }    if (!supportedAbis.isEmpty() && Sets.intersection(supportedAbis,deviceAbis).isEmpty()) {      return new LaunchCompatibility(ThreeState.NO,"Device supports " + Joiner.on(", ").join(deviceAbis) + ", but APK only supports "+ Joiner.on(", ").join(supportedAbis));    }  }  if (projectTarget.isPlatform()) {    return YES;  }  List<IAndroidTarget.OptionalLibrary> additionalLibs=projectTarget.getAdditionalLibraries();  if (additionalLibs.isEmpty()) {    return YES;  }  String targetName=projectTarget.getName();  if (GOOGLE_APIS_TARGET_NAME.equals(targetName)) {    return YES;  } else {    return new LaunchCompatibility(ThreeState.UNSURE,"unsure if device supports addon: " + targetName);  }}  }
class C{  public VideoEditQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.edit",OkResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean showStorageSites(){  return CATEGORY_USE_STORAGE.equals(mCategory);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public PollsCreateQuery(VkApiClient client,UserActor actor){  super(client,"polls.create",Poll.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean recomputeValue(){  if (mResourceValue != null) {    mResourceValue=null;    return true;  } else {    return false;  }}  }
class C{  public void notifyListener() throws RemoteException, UnknownEventException {  NotifyTemplateHolder template=(NotifyTemplateHolder)getEntryHolder();  RemoteEventListener listener=template.getREListener();  if (listener != null) {    if (LRMIUtilities.isRemoteProxy(listener))     LRMIInvocationContext.enableCustomPriorityForNextInvocation();    listener.notify(getRemoteEvent());  }}  }
class C{  public ClassAnnotator(URL[] codebase,Properties props){  if (props != null)   properties.putAll(props);  setAnnotationURLs(codebase);}  }
class C{  public static String grabNext(String text,String key,String key2){  int pos=text.indexOf(key);  int length=key.length();  if (pos == -1 && key2 != null) {    pos=text.indexOf(key2);    length=key2.length();  }  if (pos == -1)   return null; else   return new StringTokenizer(text.substring(pos + length).trim()).nextToken();}  }
class C{  protected Stream<String> preOrderRightToLeftTraversal(String nodeName,List<String> path) throws SystemConfigException {  if (!moduleConfigurations.containsKey(nodeName)) {    LOG.error(MISSING_DEPENDENCY.logFormat(nodeName,path));    throw new SystemConfigException(MISSING_DEPENDENCY.format(nodeName,path));  }  if (path.contains(nodeName)) {    LOG.error(CIRCULAR_DEPENDENCY.logFormat(nodeName,path));    throw new SystemConfigException(CIRCULAR_DEPENDENCY.format(nodeName,path));  }  List<String> pathLocal=new ArrayList<>(path);  pathLocal.add(nodeName);  Stream<String> childrenStream=moduleDependencies.get(nodeName).stream().flatMap(null);  return Stream.concat(Stream.of(nodeName),childrenStream);}  }
class C{  public void addNewEntry(){  Extent extent=styleFactory.createExtent(DEFAULT_NEW_EXTENT_NAME,"0 0 0 0");  extentList.add(extent);  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.extentUpdated();  }}  }
class C{  protected static ModelRecord findModelForLine(String line,int lineNum,ModelDataFile modelDataFile) throws DataFileException {  ModelRecord modelRecord=null;  for (  ModelRecord curModelRecord : modelDataFile.records) {    if (curModelRecord.tcPosition < 0) {      modelRecord=curModelRecord;      break;    }    String typeCode=line.substring(curModelRecord.tcPosition,curModelRecord.tcPosition + curModelRecord.tcLength);    if (curModelRecord.typeCode.length() > 0) {      if (typeCode != null && typeCode.equals(curModelRecord.typeCode)) {        modelRecord=curModelRecord;        break;      }    } else     if (curModelRecord.tcMin.length() > 0 || curModelRecord.tcMax.length() > 0) {      if (curModelRecord.tcIsNum) {        long typeCodeNum=Long.parseLong(typeCode);        if ((curModelRecord.tcMinNum < 0 || typeCodeNum >= curModelRecord.tcMinNum) && (curModelRecord.tcMaxNum < 0 || typeCodeNum <= curModelRecord.tcMaxNum)) {          modelRecord=curModelRecord;          break;        }      } else {        if ((typeCode.compareTo(curModelRecord.tcMin) >= 0) && (typeCode.compareTo(curModelRecord.tcMax) <= 0)) {          modelRecord=curModelRecord;          break;        }      }    }  }  if (modelRecord == null) {    throw new DataFileException("Could not find record definition for line " + lineNum + "; first bytes: "+ line.substring(0,(line.length() > 5) ? 5 : line.length()));  }  return modelRecord;}  }
class C{  public void calculate(float dataMin,float dataMax){  float min=mCustomAxisMin ? mAxisMinimum : dataMin;  float max=mCustomAxisMax ? mAxisMaximum : dataMax;  float range=Math.abs(max - min);  if (range == 0f) {    max=max + 1f;    min=min - 1f;  }  mAxisMinimum=min;  mAxisMaximum=max;  mAxisRange=Math.abs(max - min);}  }
class C{  public void put(String sample,String attribute,Object value){  if (!sampleOrder.contains(sample))   sampleOrder.add(sample);  if (!attributeOrder.contains(attribute))   attributeOrder.add(attribute);  table.put(sample,attribute,value);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  protected MarketEditAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @deprecated protected int handleGetLimit(int field,int limitType){  if ((isAmeteAlemEra()) && (field == 0)) {    return 0;  }  return super.handleGetLimit(field,limitType);}  }
class C{  public static JavaRDD<List<List<Writable>>> zeroMeanUnitVarianceSequence(Schema schema,JavaRDD<List<List<Writable>>> sequence,List<String> excludeColumns){  DataFrame frame=DataFrames.toDataFrameSequence(schema,sequence);  if (excludeColumns == null)   excludeColumns=Arrays.asList(DataFrames.SEQUENCE_UUID_COLUMN,DataFrames.SEQUENCE_INDEX_COLUMN); else {    excludeColumns=new ArrayList<>(excludeColumns);    excludeColumns.add(DataFrames.SEQUENCE_UUID_COLUMN);    excludeColumns.add(DataFrames.SEQUENCE_INDEX_COLUMN);  }  frame=zeromeanUnitVariance(frame,excludeColumns);  return DataFrames.toRecordsSequence(frame).getSecond();}  }
class C{  @Override public Writer append(CharSequence csq) throws IOException {  try {    int len=0;    if (csq != null) {      len=csq.length();    }    beforeWrite(len);    out.append(csq);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public IStoredListIterator<T> establishListScan(boolean randomScan){  if (!randomScan && !_supportFifoPerSegment && getNumSegments() > 1)   throw new RuntimeException("establishListScan non-random scans not supported");  SegmentedListIterator<T> slh=_SLHolderPool.get();  SegmentedListIterator<T> res=establishPos(slh,randomScan);  if (res == null)   slh.release();  return res;}  }
class C{  public synchronized void clearCustomProperties(String[] keys){  Properties prop=getCustomProperties(false);  if (prop != null)   for (int i=0; i < keys.length; i++)   prop.remove(keys[i]);  storeCustomProperties();}  }
class C{  @Override public boolean hasNext(){  return lengthOfFirstOfNext > 0 || samIterator.hasNext();}  }
class C{  @Override public List<Period> generateRollingPeriods(Date date){  return generateLast5Years(date);}  }
class C{  private void acquireEquipmentWriteLock(final Long equipmentId){  if (equipmentCache.hasKey(equipmentId)) {    equipmentCache.acquireWriteLockOnKey(equipmentId);  } else   if (subEquipmentCache.hasKey(equipmentId)) {    subEquipmentCache.acquireWriteLockOnKey(equipmentId);  } else {    String msg="Equipment id " + equipmentId + " unknown in in both equipment and subequipment cache. Do write lock in both caches.";    LOGGER.debug(msg);    equipmentCache.acquireWriteLockOnKey(equipmentId);    subEquipmentCache.acquireWriteLockOnKey(equipmentId);  }}  }
class C{  protected boolean checkFolWords(Element currentRulePart,int position,NodeList tokens){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("num")) {      int requiredNum=Integer.parseInt(currentVal.substring(0,1));      int num=0;      for (int i=position + 1; i < tokens.getLength(); i++) {        if (!((Element)tokens.item(i)).getAttribute("ph").equals(""))         num++;      }      if (currentVal.length() == 1) {        if (num != requiredNum)         return false;      } else       if (currentVal.substring(1,2).equals("+")) {        if (!(num >= requiredNum))         return false;      } else       if (currentVal.substring(1,2).equals("-")) {        if (!(num <= requiredNum))         return false;      }    }  }  return true;}  }
class C{  @GET @Path("{table}") @RequiresPermissions("sor|read|{table}") @Timed(name="bv.emodb.sor.DataStoreResource1.scan",absolute=true) @ApiOperation(value="Retrieves a list of content items in a particular table.",notes="Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n" + " limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n" + " results without exhausting all available memory.",response=Iterator.class) @ApiImplicitParams({@ApiImplicitParam(name="APIKey",required=true,dataType="string",paramType="query")}) public Iterator<Map<String,Object>> scan(@PathParam("table") String table,@QueryParam("from") String fromKeyExclusive,@QueryParam("limit") @DefaultValue("10") LongParam limit,@QueryParam("consistency") @DefaultValue("STRONG") ReadConsistencyParam consistency,@QueryParam("debug") BooleanParam debug){  return streamingIterator(_dataStore.scan(table,Strings.emptyToNull(fromKeyExclusive),limit.get(),consistency.get()),debug);}  }
class C{  public DemoPlayerSession(Context context,Handler serviceHandler){  super(context,serviceHandler);  Log.d(TAG,"Session created (" + mSessionNumber + ")");}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public GridHeader(String name,boolean hidden,boolean meta){  this(name);  this.column=name;  this.hidden=hidden;  this.meta=meta;}  }
class C{  public String[] parseConfiguration(URL xmlURL) throws IOException, SAXException {  InputStream is=xmlURL.openStream();  Document document=null;  try {    document=builder.parse(is);  }  finally {    is.close();  }  return (parseConfiguration(document));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_INVITE_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1390116,value0);}  }
class C{  void generateLocalizedFilesWithoutLocaleMapping(Repository repository,FileMatch sourceFileMatch) throws CommandException {  logger.debug("Generate localized files (without locale mapping)");  for (  RepositoryLocale repositoryLocale : repositoryLocalesWithoutRootLocale.values()) {    LocalizedAssetBody localizedAsset=getLocalizedAsset(repository,sourceFileMatch,repositoryLocale,null);    writeLocalizedAssetToTargetDirectory(localizedAsset,sourceFileMatch);  }}  }
class C{  public static String formatPercent(int downloadSize,int fileSize){  float num=(float)downloadSize / fileSize;  float percent=((float)(int)(num * 1000)) / 10;  return String.valueOf(percent + "%");}  }
class C{  private Type(final int sort){  this(sort,null,0,1);}  }
class C{  public static boolean isApplicationInBackground(Context context){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> taskList=am.getRunningTasks(1);  if (taskList != null && !taskList.isEmpty()) {    ComponentName topActivity=taskList.get(0).topActivity;    if (topActivity != null && !topActivity.getPackageName().equals(context.getPackageName())) {      return true;    }  }  return false;}  }
class C{  public void revertToDefault(int row){  set(m_defaultValue,row);}  }
class C{  public void moveItem(boolean moveUp){  if (symbolTree == null) {    return;  }  if (treeModel == null) {    return;  }  if (sldTree == null) {    return;  }  TreePath path=symbolTree.getSelectionPath();  if (path == null) {    return;  }  DefaultMutableTreeNode lastNode=(DefaultMutableTreeNode)path.getLastPathComponent();  if (lastNode == null) {    return;  }  Object obj=lastNode.getUserObject();  if (obj == null) {    return;  }  DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)lastNode.getParent();  if (parentNode == null) {    return;  }  Object parentObj=parentNode.getUserObject();  if (parentObj == null) {    return;  }  int direction=moveUp ? -1 : 1;  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  if (obj instanceof StyledLayer) {    StyledLayerDescriptor sld=(StyledLayerDescriptor)parentObj;    boolean found=false;    int index=0;    for (    StyledLayer styledLayer : sld.layers()) {      if (styledLayer == obj) {        found=true;        break;      } else {        index++;      }    }    if (found && ((index + direction) >= 0) && (index + direction) < sld.layers().size()) {      StyledLayer styledLayer=sld.layers().remove(index);      sld.layers().add(index + direction,styledLayer);      treeModel.removeNodeFromParent(lastNode);      treeModel.insertNodeInto(lastNode,parentNode,index + direction);    } else {      return;    }  } else   if (obj instanceof Style) {    if (parentObj instanceof NamedLayerImpl) {      NamedLayerImpl namedLayer=(NamedLayerImpl)parentObj;      int index=namedLayer.styles().indexOf(obj);      if (((index + direction) >= 0) && (index + direction) < namedLayer.styles().size()) {        Style style=namedLayer.styles().remove(index);        namedLayer.styles().add(index + direction,style);        treeModel.removeNodeFromParent(lastNode);        treeModel.insertNodeInto(lastNode,parentNode,index + direction);      } else {        return;      }    }  } else   if (obj instanceof FeatureTypeStyle) {    Style style=(Style)parentObj;    int index=style.featureTypeStyles().indexOf(obj);    if (((index + direction) >= 0) && (index + direction) < style.featureTypeStyles().size()) {      FeatureTypeStyle fts=style.featureTypeStyles().remove(index);      style.featureTypeStyles().add(index + direction,fts);      treeModel.removeNodeFromParent(lastNode);      treeModel.insertNodeInto(lastNode,parentNode,index + direction);    } else {      return;    }  } else   if (obj instanceof Rule) {    FeatureTypeStyle fts=(FeatureTypeStyle)parentObj;    int index=fts.rules().indexOf(obj);    if (((index + direction) >= 0) && (index + direction) < fts.rules().size()) {      Rule rule=fts.rules().remove(index);      fts.rules().add(index + direction,rule);      treeModel.removeNodeFromParent(lastNode);      treeModel.insertNodeInto(lastNode,parentNode,index + direction);    } else {      return;    }  } else   if (obj instanceof Symbolizer) {    Rule rule=(Rule)parentObj;    int index=rule.symbolizers().indexOf(obj);    if (((index + direction) >= 0) && (index + direction) < rule.symbolizers().size()) {      Symbolizer symbolizer=rule.symbolizers().remove(index);      rule.symbolizers().add(index + direction,symbolizer);      treeModel.removeNodeFromParent(lastNode);      treeModel.insertNodeInto(lastNode,parentNode,index + direction);    } else {      return;    }  }  treeModel.nodeStructureChanged(lastNode);  TreePath newNodePath=getPath(lastNode);  int[] selectedRows=new int[1];  selectedRows[0]=symbolTree.getRowForPath(newNodePath);  sldTree.populateSLD();  symbolTree.setSelectionRows(selectedRows);  if (renderList != null) {    for (    RenderSymbolInterface render : renderList) {      render.renderSymbol();    }  }  Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));}  }
class C{  private void calcAngularBounds(NodeItem r){  if (m_prevRoot == null || !m_prevRoot.isValid() || r == m_prevRoot) {    m_prevRoot=r;    return;  }  NodeItem p=m_prevRoot;  while (true) {    NodeItem pp=(NodeItem)p.getParent();    if (pp == r) {      break;    } else     if (pp == null) {      m_prevRoot=r;      return;    }    p=pp;  }  double dt=0;  Iterator iter=sortedChildren(r);  while (iter.hasNext()) {    Node n=(Node)iter.next();    if (n == p)     break;    dt+=((Params)n.get(PARAMS)).width;  }  double rw=((Params)r.get(PARAMS)).width;  double pw=((Params)p.get(PARAMS)).width;  dt=-MathLib.TWO_PI * (dt + pw / 2) / rw;  m_theta1=dt + Math.atan2(p.getY() - r.getY(),p.getX() - r.getX());  m_theta2=m_theta1 + MathLib.TWO_PI;  m_prevRoot=r;}  }
class C{  public static void w(String msg){  if (LOG_ENABLE) {    Log.w(TAG,buildMsg(msg));  }}  }
class C{  public static void showNotification(Context context,Timer timer){  Intent intent=new Intent(context,TimerNotificationService.class);  intent.putExtra(EXTRA_TIMER,timer);  context.startService(intent);}  }
class C{  public static void commit() throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int status=ut.getStatus();      Debug.logVerbose("Current status : " + getTransactionStateString(status),module);      if (status != STATUS_NO_TRANSACTION && status != STATUS_COMMITTING && status != STATUS_COMMITTED && status != STATUS_ROLLING_BACK && status != STATUS_ROLLEDBACK) {        ut.commit();        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        Debug.logVerbose("Transaction committed",module);      } else {        Debug.logWarning("Not committing transaction, status is " + getStatusString(),module);      }    } catch (    RollbackException e) {      RollbackOnlyCause rollbackOnlyCause=getSetRollbackOnlyCause();      if (rollbackOnlyCause != null) {        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        Debug.logError(e,"Rollback Only was set when trying to commit transaction here; throwing rollbackOnly cause exception",module);        throw new GenericTransactionException("Roll back error, could not commit transaction, was rolled back instead because of: " + rollbackOnlyCause.getCauseMessage(),rollbackOnlyCause.getCauseThrowable());      } else {        Throwable t=e.getCause() == null ? e : e.getCause();        throw new GenericTransactionException("Roll back error (with no rollbackOnly cause found), could not commit transaction, was rolled back instead: " + t.toString(),t);      }    }catch (    IllegalStateException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, IllegalStateException exception: " + t.toString(),t);    }catch (    HeuristicMixedException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, HeuristicMixed exception: " + t.toString(),t);    }catch (    HeuristicRollbackException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not commit transaction, HeuristicRollback exception: " + t.toString(),t);    }catch (    SystemException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("System error, could not commit transaction: " + t.toString(),t);    }  } else {    Debug.logInfo("UserTransaction is null, not committing",module);  }}  }
class C{  protected MarketEditQuery categoryId(int value){  return unsafeParam("category_id",value);}  }
class C{  public static void main(String[] args){  byte[] json_chunk1="{\"name\":\"El".getBytes(StandardCharsets.UTF_8);  byte[] json_chunk2="vis\"}".getBytes(StandardCharsets.UTF_8);  Observable.just(json_chunk1,json_chunk2).lift(new JsonParserOperator()).toBlocking().forEach(null);}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase && ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;}  }
class C{  @Override protected void invalidateQuietly(final T dataTag,final TagQualityStatus statusToAdd,final String description,final Timestamp timestamp){  dataTagCacheObjectFacade.addQualityFlag(dataTag,statusToAdd,description);  dataTagCacheObjectFacade.setTimestamps(dataTag,null,null,timestamp);}  }
class C{  public static String updateAssociatedAffiliate(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  GenericValue party=null;  java.net.URL shopPropertiesUrl=null;  try {    shopPropertiesUrl=((ServletContext)request.getAttribute("servletContext")).getResource("/WEB-INF/shop.properties");  } catch (  java.net.MalformedURLException e) {    Debug.logWarning(e,module);  }  String store=UtilProperties.getPropertyValue(shopPropertiesUrl,"affiliate.store.customer");  if (store == null || store.toUpperCase().startsWith("N"))   return "success";  String storeOnClick=UtilProperties.getPropertyValue(shopPropertiesUrl,"affiliate.store.onclick");  if (storeOnClick == null || storeOnClick.toUpperCase().startsWith("N"))   return "success";  try {    party=userLogin == null ? null : userLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,module);  }  if (party != null) {    String currentAffiliateId=getId(party,"AFFILIATE");    if (UtilValidate.isEmpty(currentAffiliateId)) {      String affiliateId=(String)request.getSession().getAttribute(AFFILIATE_ID);      if (UtilValidate.isNotEmpty(affiliateId)) {        GenericValue partyRelationship=delegator.makeValue("PartyRelationship",UtilMisc.toMap("partyIdFrom",party.getString("partyId"),"partyIdTo",affiliateId,"roleTypeIdFrom","CUSTOMER","roleTypeIdTo","AFFILIATE"));        partyRelationship.set("fromDate",UtilDateTime.nowTimestamp());        partyRelationship.set("partyRelationshipTypeId","SALES_AFFILIATE");        try {          delegator.create(partyRelationship);          if (Debug.infoOn())           Debug.logInfo("Affiliate for user " + party.getString("partyId") + " set to "+ affiliateId,module);        } catch (        GenericEntityException gee) {          Debug.logWarning(gee,module);        }      } else {        Debug.logInfo("No affiliate in session or already associated with user " + userLogin.getString("partyId"),module);        return "success";      }    } else {      request.getSession().setAttribute(AFFILIATE_ID,currentAffiliateId);    }    return "success";  } else {    Debug.logWarning("Cannot associate affiliate since not logged in yet",module);    return "success";  }}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,byte[] salt) throws GeneralSecurityException {  fixPrng();  KeySpec keySpec=new PBEKeySpec(password.toCharArray(),salt,PBE_ITERATION_COUNT,AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(PBE_ALGORITHM);  byte[] keyBytes=keyFactory.generateSecret(keySpec).getEncoded();  byte[] confidentialityKeyBytes=copyOfRange(keyBytes,0,AES_KEY_LENGTH_BITS / 8);  byte[] integrityKeyBytes=copyOfRange(keyBytes,AES_KEY_LENGTH_BITS / 8,AES_KEY_LENGTH_BITS / 8 + HMAC_KEY_LENGTH_BITS / 8);  SecretKey confidentialityKey=new SecretKeySpec(confidentialityKeyBytes,CIPHER);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  @Override public String toString(){  StringBuilder str=new StringBuilder();  str.append("File type = \"ooTextFile\"\n");  str.append("Object class = \"TextGrid\"");  str.append("\n");  str.append("xmin = " + getXmin() + " \n");  str.append("xmax = " + getXmax() + " \n");  str.append("tiers? <exists> \n");  str.append("size = " + getNumberOfTiers() + " \n");  str.append("item []: \n");  for (int t=0; t < getNumberOfTiers(); t++) {    str.append("item [" + (t + 1) + "]:\n");    str.append(getTier(t).toString());  }  return str.toString();}  }
class C{  private void solveConstraints(){  IWorklist ptaList=worklist;  while (ptaList.has_job()) {    IVarAbstraction pn=ptaList.next();    pn.do_before_propagation();    pn.propagate(this,ptaList);    pn.do_after_propagation();  }}  }
class C{  public static String encrypt64bits(String Data){  Key key;  Cipher c;  byte[] encVal=null;  try {    key=generateKey64bits();    c=Cipher.getInstance(Settings.ALGO);    c.init(Cipher.ENCRYPT_MODE,key);    encVal=c.doFinal(Data.getBytes());    String encryptedValue=DatatypeConverter.printBase64Binary(encVal);    return encryptedValue;  } catch (  Exception e) {    System.out.println(e);  }  return null;}  }
class C{  public void onBindViewHolderItemType(T holder,ItemIndex index,ItemType itemType){switch (itemType) {case LVL3_ITEM:    onBindLvl3Item(holder,index);  break;case LVL2_ITEM:onBindLvl2Item(holder,index);break;case LVL1_ITEM:onBindLvl1Item(holder,index);break;case LVL0_ITEM:onBindLvl0Item(holder,index);break;case LVL3_SECTION:onBindLvl3Section(holder,index);break;case LVL2_SECTION:onBindLvl2Section(holder,index);case LVL1_SECTION:onBindLvl1Section(holder,index);}}  }
class C{  boolean waitForNext(int iteration){  try {    _sharedObjectListLock.readLock().lock();    if (_accumulatedItems.size() > iteration) {      if (_logger.isLoggable(Level.FINEST))       _logger.finest("getting next item from the shared iterator source buffer [" + _identifier + "]");      return true;    }  }  finally {    _sharedObjectListLock.readLock().unlock();  }  try {    _sharedObjectListLock.writeLock().lock();    if (_accumulatedItems.size() > iteration) {      if (_logger.isLoggable(Level.FINEST))       _logger.finest("getting next item from the shared iterator source buffer [" + _identifier + "]");      return true;    }    if (_closed)     return false;    if (_sourceDataIterator == null || !_sourceDataIterator.hasNext()) {      sourceIteratorExhaushted();      return false;    }    if (_logger.isLoggable(Level.FINEST))     _logger.finest("getting next item from the shared iterator source wrapped iterator [" + _identifier + "]");    T next=_sourceDataIterator.next();    _accumulatedItems.add(next);    return true;  }  finally {    _sharedObjectListLock.writeLock().unlock();  }}  }
class C{  public void profileSparkBasicMetrics(){  int n_legal_var=0;  int[] limits=new int[]{1,5,10,25,50,75,100};  evalRes.pts_size_bar_spark=new Histogram(limits);  for (  IVarAbstraction pn : ptsProvider.pointers) {    Node var=pn.getWrappedNode();    if (ptsProvider.isExceptionPointer(var))     continue;    ++n_legal_var;    int size=var.getP2Set().size();    evalRes.pts_size_bar_spark.addNumber(size);    evalRes.total_spark_pts+=size;    if (size > evalRes.max_pts_spark)     evalRes.max_pts_spark=size;  }  evalRes.avg_spark_pts=(double)evalRes.total_spark_pts / n_legal_var;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200977,skilltarget,skillcaster,skillname);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  @Override public String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  if (locale != fLocale) {    fResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XMLMessages",locale);    fLocale=locale;  }  String msg;  try {    msg=fResourceBundle.getString(key);    if (arguments != null) {      try {        msg=java.text.MessageFormat.format(msg,arguments);      } catch (      Exception e) {        msg=fResourceBundle.getString("FormatFailed");        msg+=" " + fResourceBundle.getString(key);      }    }  } catch (  MissingResourceException e) {    msg=fResourceBundle.getString("BadMessageKey");    throw new MissingResourceException(key,msg,key);  }  if (msg == null) {    msg=key;    if (arguments.length > 0) {      StringBuffer str=new StringBuffer(msg);      str.append('?');      for (int i=0; i < arguments.length; i++) {        if (i > 0) {          str.append('&');        }        str.append(String.valueOf(arguments[i]));      }    }  }  return msg;}  }
class C{  @Override public boolean next(){  boolean ok=idx.next();  if (ok) {    RecordId rid=idx.getDataRecordId();    ts.moveToRecordId(rid);  }  return ok;}  }
class C{  public static void clearCache(){  strokeMap.clear();}  }
class C{  public static boolean checkPermission(Fragment fragment,String... permissions){  return PermissionUtils.getDeniedPermissions(fragment,permissions).length <= 0;}  }
class C{  public static double variance(double[] data,int opt){  double mean=0;  double S=0;  double numData=0;  for (int i=0; i < data.length; i++) {    if (!Double.isNaN(data[i])) {      double delta=data[i] - mean;      mean+=delta / (numData + 1);      S+=delta * (data[i] - mean);      numData++;    }  }  if (opt == 0)   return (S / (numData - 1)); else   return (S / numData);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void displayCustomProcessFunction(String selectedValue){  ProcessBriefType selectedFunction=null;  for (  ProcessBriefType function : availableFunctionList) {    if (function.getIdentifier().getValue().compareTo(selectedValue) == 0) {      selectedFunction=function;      break;    }  }  functionParameterTableModel.populate(selectedFunction);}  }
class C{  private void checkRecycledViewPool(int viewType){  try {    if (mViewTypes.size() > MAX_VIEWTYPE_ALLOW_CACHE)     mAllowCacheViewHolder=false;    if (mDownForBidCacheViewHolder)     if (getHostView() != null && getHostView().getInnerView() != null)     getHostView().getInnerView().getRecycledViewPool().setMaxRecycledViews(viewType,0);    if (!mDownForBidCacheViewHolder) {      if (!mAllowCacheViewHolder) {        if (getHostView() != null && getHostView().getInnerView() != null) {          for (int i=0; i < mViewTypes.size(); i++) {            getHostView().getInnerView().getRecycledViewPool().setMaxRecycledViews(mViewTypes.keyAt(i),0);          }          mDownForBidCacheViewHolder=true;        }      }    }  } catch (  Exception e) {    WXLogUtils.e(TAG,"Clear recycledViewPool error!");  }}  }
class C{  void start(){  this.scheduleAckTimeout();  this.sendListen();}  }
class C{  public void java_lang_ClassLoader_findBootstrapClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public BpmOperationResult(final String errorMessage,final OperationError operationError){  super(errorMessage);  this.operationError=operationError;}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public S1Interval addPoint(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  if (fastContains(p)) {    return new S1Interval(this);  }  if (isEmpty()) {    return S1Interval.fromPoint(p);  } else {    double dlo=positiveDistance(p,lo());    double dhi=positiveDistance(hi(),p);    if (dlo < dhi) {      return new S1Interval(p,hi());    } else {      return new S1Interval(lo(),p);    }  }}  }
class C{  public BoolDataType(byte[] buf){  if (buf.length != this.getSize()) {    throw new DataTypeException("Wrong size buffer for boolean");  }  this.bool=(buf[0] != 0);}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  protected boolean writeMethods(DataOutputStream dd) throws IOException {  method_info mi;  int i;  for (i=0; i < methods_count; i++) {    mi=methods[i];    dd.writeShort(mi.access_flags);    dd.writeShort(mi.name_index);    dd.writeShort(mi.descriptor_index);    dd.writeShort(mi.attributes_count);    if (mi.attributes_count > 0) {      writeAttributes(dd,mi.attributes_count,mi.attributes);    }  }  return true;}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public static void drawWidgetInfo(ViewTransform transform,Graphics2D g,ConstraintWidget widget){  String debugName=widget.getDebugName();  if (debugName != null) {    int l=transform.getSwingX(widget.getDrawX());    int t=transform.getSwingY(widget.getDrawY());    int w=transform.getSwingDimension(widget.getDrawWidth());    int h=transform.getSwingDimension(widget.getDrawHeight());    int b=transform.getSwingY(widget.getDrawY() + widget.getDrawHeight());    Graphics2D g2=(Graphics2D)g.create();    g2.clipRect(l,t,w,h);    g2.drawString(debugName,l + 2,b - 2);    g2.dispose();  }}  }
class C{  protected EvolveOperation(){  super();}  }
class C{  public LikesIsLikedQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public <T>void receiveAndFire(@NotNull final ObservableValue<T> src,@NotNull final Receiver<T> receiver){  receive(src,receiver);  receiver.receive(src.get());}  }
class C{  public static Stroke createDefaultStroke(){  Stroke stroke=styleFactory.getDefaultStroke();  return stroke;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public EsTagMapping(String esTagType,String dataType){  _routing=new Routing();  properties=new Properties(esTagType,dataType);}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  final ElementLocatorFactory elementLocatorFactory=new ScopedElementLocatorFactory(webDriver,context.getElementLocatorFactory(),field);  final FramePath framePath=frameMap.get(pageObject);  contextStack.push(new PageObjectContext(elementLocatorFactory,framePath));  Object scopedPageObject=null;  try {    scopedPageObject=injector.getInstance(field.getType());  } catch (  Exception e) {    if (e instanceof ConfigurationException) {      ConfigurationException ce=(ConfigurationException)e;      throw new BobcatRuntimeException("Configuration exception: " + ce.getErrorMessages().toString(),e);    }    throw new BobcatRuntimeException(e.getMessage(),e);  } finally {    contextStack.pop();  }  return Optional.ofNullable(scopedPageObject);}  }
class C{  public Iterator childEdges(Node n){  return super.outEdges(n);}  }
class C{  public final Observable.Transformer<T,T> replace(final Object group){  return null;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[1]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public boolean isPlayToken(){  return playToken;}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public int read() throws IOException {  if (count <= pos) {    fill();    if (count <= pos) {      return -1;    }  }  return buf[pos++] & 0xff;}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public static Zmat o(Zmat A){  Zmat Ah=new Zmat(A.nc,A.nr);  for (int i=0; i < A.nr; i++)   for (int j=0; j < A.nc; j++) {    Ah.re[j][i]=A.re[i][j];    Ah.im[j][i]=-A.im[i][j];  }  return Ah;}  }
class C{  public void addVector(UniqueVector v){  for (int i=0; i < v.size(); i++) {    add(v.get(i));  }}  }
class C{  public static Locale ensureLocale(Object localeObject){  if (localeObject instanceof String) {    return parseLocale((String)localeObject);  } else   if (localeObject instanceof Locale) {    return (Locale)localeObject;  }  return Locale.getDefault();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_BAN_ME(String value0){  return new SM_SYSTEM_MESSAGE(1400576,value0);}  }
class C{  public static Component createSeparator(){  JPanel p=new JPanel();  p.setLayout(new BorderLayout());  JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);  p.add(separator,BorderLayout.CENTER);  Dimension size=new Dimension(FULL_WIDTH,5);  p.setPreferredSize(size);  return p;}  }
class C{  public FieldVector3D<T> subtract(final FieldVector3D<T> v){  return new FieldVector3D<T>(x.subtract(v.x),y.subtract(v.y),z.subtract(v.z));}  }
class C{  public static void debug(@NonNull String tag,String message,Object... args){  android.util.Log.d(tag,String.format(Locale.ENGLISH,message,args));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_DEATH_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1340002,value0);}  }
class C{  public static void reportSyncStatus(ProfileSyncService syncService){  if (!syncService.isBackendInitialized()) {    reportStatus(STATUS_SYNC_NOT_INITIALIZED);  } else   if (!syncService.getActiveDataTypes().contains(ModelType.TYPED_URLS)) {    reportStatus(STATUS_SYNC_NOT_SYNCING_URLS);  } else   if (!syncService.getPassphraseType().equals(PassphraseType.KEYSTORE_PASSPHRASE)) {    reportStatus(STATUS_SYNC_NOT_KEYSTORE_PASSPHRASE);  } else {    reportStatus(STATUS_SYNC_OTHER);  }}  }
class C{  public Transaction createTask(Task task){  if (!mIsSuccess) {    return this;  }  long id=mDatabase.insert(TasksTable.TABLE_NAME,null,task.toContentValues());  if (id != -1) {    task.id=id;  } else {    mIsSuccess=false;    mDatabase.endTransaction();  }  return this;}  }
class C{  private void populate(){  add(new SLDTreeLeafPolygon());  add(new SLDTreeLeafPoint());  add(new SLDTreeLeafLine());  add(new SLDTreeLeafText());  add(new SLDTreeLeafRaster());}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  protected boolean checkReversedObjectInRange(VisibleObject newObject){  return false;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  static public boolean doesMatch(FindSelection findSelection,IReadBlock readBlock,Pattern pattern){  try {    if (findSelection.useReadName && matches(pattern,readBlock.getReadName()))     return true;    if (findSelection.useReadHeader && matches(pattern,readBlock.getReadHeader()))     return true;    if (findSelection.useReadSequence && matches(pattern,readBlock.getReadSequence()))     return true;    if (findSelection.useMatchText) {      for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {        if (matches(pattern,readBlock.getMatchBlock(i).getText()))         return true;      }    }  } catch (  Exception e) {  }  return false;}  }
class C{  protected AdsDeleteTargetGroupQuery targetGroupId(int value){  return unsafeParam("target_group_id",value);}  }
class C{  @Override public void encodeXML(Document doc,Element root,String elementName){  if ((doc == null) || (root == null) || (elementName == null)) {    return;  }  Element dataSourceElement=doc.createElement(elementName);  for (  String key : propertyMap.keySet()) {    Element element=doc.createElement(key);    element.appendChild(doc.createTextNode(propertyMap.get(key)));    dataSourceElement.appendChild(element);  }  root.appendChild(dataSourceElement);}  }
class C{  public FriendsAreFriendsQuery areFriends(UserActor actor,List<Integer> userIds){  return new FriendsAreFriendsQuery(getClient(),actor,userIds);}  }
class C{  public ListQueryBinding(TupleSet ts,String field,boolean includeAllOption){  super(ts,field);  m_type=DataLib.inferType(ts,field);  m_lstnr=new Listener();  m_includeAll=includeAllOption;  initPredicate();  initModel();}  }
class C{  private void requestUser(){  String[] keys=model.getBrowsableDataKey().split(",");  ((UserService)model.getService()).requestUserProfile(keys[0].substring(1),this);}  }
class C{  public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {    throw new MyException("invalid arguement");  }  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void unregisterDrop(Npc npc){  Integer npcObjId=npc.getObjectId();  Map<Integer,DropNpc> dropRegmap=DropRegistrationService.getInstance().getDropRegistrationMap();  DropRegistrationService.getInstance().getCurrentDropMap().remove(npcObjId);  if (dropRegmap.containsKey(npcObjId)) {    dropRegmap.remove(npcObjId);  }}  }
class C{  public String toString(){  String sType="";  if (type != null)   sType=type.toString() + " ";  String sLine;  if (getLine() == null) {    sLine="null";  } else {    sLine=getLine().toString();  }  return new String(sType + "event from line " + sLine);}  }
class C{  public static String androidCmdName(){  String os=System.getProperty("os.name");  String cmd="android";  if (os.startsWith("Windows")) {    cmd+=".bat";  }  return cmd;}  }
class C{  public static Optional<DateTime> firstMoment(Collection<? extends Collection<Interval>> intervalSets){  return intervalSets.stream().flatMap(null).map(null).reduce(null);}  }
class C{  public void zoomToSelection(){  graphView.zoomToSelection();}  }
class C{  protected long doRenew(long duration) throws UnknownLeaseException, RemoteException {  return server.renewServiceLease(serviceID,leaseID,duration);}  }
class C{  public void addLanguage(String languageId){  query.append(" +languageId:" + languageId);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  @Override public boolean parseParameters(Object params){  if (params == null || !(params instanceof RewardForSendingMatchingChatMessage))   return false;  this.params=(RewardForSendingMatchingChatMessage)params;  for (  ChatMatchSpec cm : this.params.getChatMatch())   addChatMatchSpecToRewardStructure(cm);  return true;}  }
class C{  public boolean copyAlignment(){  final SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    StringSelection ss=new StringSelection(getSelectedAlignment());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);    return true;  }  return false;}  }
class C{  public static String store(String name,File file) throws IOException {  FileInputStream in=null;  try {    in=new FileInputStream(file);    String id=id();    store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);    return id;  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_RESISTED_ME_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1390131,value0);}  }
class C{  public static void println(){  out.println();}  }
class C{  public GreaterEqualsSpacePredicate(Comparable<?> expectedValue){  super(expectedValue);}  }
class C{  public Collection<Stmt> targetsOfLoopExit(Stmt loopExit){  assert getLoopExits().contains(loopExit);  List<Unit> succs=g.getSuccsOf(loopExit);  Collection<Stmt> res=new HashSet<Stmt>();  for (  Unit u : succs) {    Stmt s=(Stmt)u;    res.add(s);  }  res.removeAll(loopStatements);  return res;}  }
class C{  public Value coalesceExpression(Value[] val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  @Override protected void initToolbar(Bundle savedInstanceState){}  }
class C{  public GossipSettings(){}  }
class C{  public static boolean isAtLeastJava14(){  return true;}  }
class C{  @Override public void browserInfoEntry(BrowserInfoEntry browserInfoEntry){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BitNotExpr fullCopy(){  BitNotExpr tree=(BitNotExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public synchronized static void init(){  if (!isInitialized()) {    if (dmnEngines == null) {      dmnEngines=new HashMap<String,DmnEngine>();    }    ClassLoader classLoader=DmnEngines.class.getClassLoader();    Enumeration<URL> resources=null;    try {      resources=classLoader.getResources("activiti.dmn.cfg.xml");    } catch (    IOException e) {      throw new ActivitiDmnException("problem retrieving activiti.dmn.cfg.xml resources on the classpath: " + System.getProperty("java.class.path"),e);    }    Set<URL> configUrls=new HashSet<URL>();    while (resources.hasMoreElements()) {      configUrls.add(resources.nextElement());    }    for (Iterator<URL> iterator=configUrls.iterator(); iterator.hasNext(); ) {      URL resource=iterator.next();      log.info("Initializing dmn engine using configuration '{}'",resource.toString());      initDmnEngineFromResource(resource);    }    setInitialized(true);  } else {    log.info("DMN engines already initialized");  }}  }
class C{  private SignificanceTestForTwoDatasets(double x1,double n1,double x2,double n2){  this.x1=x1;  this.n1=n1;  this.x2=x2;  this.n2=n2;}  }
class C{  public TupleComparator(String field,Class type,boolean ascend,Comparator c){  m_field=field;  m_col=-1;  m_type=type;  m_rev=ascend ? 1 : -1;  m_cmp=c;}  }
class C{  public void takeRemoteHeapDump(Application application,String dumpFile,boolean customizeDumpFile){  heapDumpProvider.createRemoteHeapDump(application,dumpFile,customizeDumpFile);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200675,num0,skillcaster,skillname);}  }
class C{  private static boolean fieldExtendedMatchLimitValue(Object entryValue,Object rangeValue,short matchCode,boolean includeRange){  int compareResult=((Comparable)entryValue).compareTo(rangeValue);switch (matchCode) {case TemplateMatchCodes.LE:case TemplateMatchCodes.LT:    return (includeRange ? compareResult >= 0 : compareResult > 0);case TemplateMatchCodes.GE:case TemplateMatchCodes.GT:  return (includeRange ? compareResult <= 0 : compareResult < 0);}return false;}  }
class C{  @Transactional public AssetExtraction createAssetExtraction(Asset asset,PollableTask pollableTask){  AssetExtraction assetExtraction=new AssetExtraction();  assetExtraction.setAsset(asset);  assetExtraction.setContentMd5(asset.getContentMd5());  assetExtraction.setPollableTask(pollableTask);  assetExtractionRepository.save(assetExtraction);  return assetExtraction;}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  @Override protected Object readListFromResource(String resourceName) throws IOException {  String suffix=resourceName.substring(resourceName.length() - 4,resourceName.length());  if (suffix.equals(".fst")) {    InputStream resourceStream=this.getClass().getResourceAsStream("prosody/" + resourceName);    return new FSTLookup(resourceStream,resourceName,"ISO-8859-1");  } else {    return super.readListFromResource(resourceName);  }}  }
class C{  private LogEntry(ISVNLogMessage logMessage,ISVNResource resource,ISVNRemoteResource remoteResource,Alias[] tags){  this.logMessage=logMessage;  this.remoteResource=remoteResource;  this.resource=resource;  this.tags=tags;}  }
class C{  public double similarityTo(Distribution dOther){  TreeMap tOverAll=new TreeMap();  Iterator iThisIter=hDistro.entrySet().iterator();  Iterator iOtherIter=dOther.asTreeMap().entrySet().iterator();  while (iThisIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iThisIter.next();    Double[] dVals=new Double[2];    dVals[0]=(Double)e.getValue();    dVals[1]=0.0;    tOverAll.put(e.getKey(),dVals);  }  while (iOtherIter.hasNext()) {    Double[] dVals=new Double[2];    java.util.Map.Entry e=(java.util.Map.Entry)iOtherIter.next();    if (tOverAll.containsKey(e.getKey())) {      dVals=(Double[])tOverAll.get(e.getKey());      dVals[1]=(Double)e.getValue();    } else {      dVals=new Double[2];      dVals[0]=0.0;      dVals[1]=(Double)e.getValue();    }    tOverAll.put(e.getKey(),dVals);  }  Iterator iIter=tOverAll.entrySet().iterator();  double dDiff=0.0;  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    Double[] dVals=(Double[])e.getValue();    dDiff+=Math.abs(dVals[1] - dVals[0]);  }  return 1.0 - (dDiff / (calcTotalValues() + dOther.calcTotalValues()));}  }
class C{  public void startTimeoutTimer(){  timeoutTimer.start();}  }
class C{  private int compareIndexes(IndexKey first,IndexKey second){  int dictionaryKeyOffset=0;  int nonDictionaryKeyOffset=0;  int compareResult=0;  int processedNoDictionaryColumn=numberOfNoDictionaryColumns;  ByteBuffer firstNoDictionaryKeyBuffer=ByteBuffer.wrap(first.getNoDictionaryKeys());  ByteBuffer secondNoDictionaryKeyBuffer=ByteBuffer.wrap(second.getNoDictionaryKeys());  int actualOffset=0;  int actualOffset1=0;  int firstNoDcitionaryLength=0;  int secondNodeDictionaryLength=0;  for (int i=0; i < eachColumnValueSize.length; i++) {    if (eachColumnValueSize[i] != NO_DCITIONARY_COLUMN_VALUE) {      compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getDictionaryKeys(),dictionaryKeyOffset,eachColumnValueSize[i],second.getDictionaryKeys(),dictionaryKeyOffset,eachColumnValueSize[i]);      dictionaryKeyOffset+=eachColumnValueSize[i];    } else {      if (processedNoDictionaryColumn > 1) {        actualOffset=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        firstNoDcitionaryLength=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset + SHORT_SIZE_IN_BYTES) - actualOffset;        actualOffset1=secondNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        secondNodeDictionaryLength=secondNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset + SHORT_SIZE_IN_BYTES) - actualOffset1;        compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getNoDictionaryKeys(),actualOffset,firstNoDcitionaryLength,second.getNoDictionaryKeys(),actualOffset1,secondNodeDictionaryLength);        nonDictionaryKeyOffset+=SHORT_SIZE_IN_BYTES;        processedNoDictionaryColumn--;      } else {        actualOffset=firstNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        actualOffset1=secondNoDictionaryKeyBuffer.getShort(nonDictionaryKeyOffset);        firstNoDcitionaryLength=first.getNoDictionaryKeys().length - actualOffset;        secondNodeDictionaryLength=second.getNoDictionaryKeys().length - actualOffset1;        compareResult=ByteUtil.UnsafeComparer.INSTANCE.compareTo(first.getNoDictionaryKeys(),actualOffset,firstNoDcitionaryLength,second.getNoDictionaryKeys(),actualOffset1,secondNodeDictionaryLength);      }    }    if (compareResult != 0) {      return compareResult;    }  }  return 0;}  }
class C{  public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.addOnItemTouchListener(listener);}  }
class C{  @NotNull public static String sha1(@NotNull File keyStoreFile,@Nullable("When requesting the first certificate sha1") String keyAlias,@Nullable("When default android keystore password should be used") String keyStorePassword) throws Exception {  Certificate signingCert=getCertificate(keyStoreFile,keyAlias,keyStorePassword);  try {    byte[] certBytes=MessageDigest.getInstance("SHA1").digest(signingCert.getEncoded());    return BaseEncoding.base16().withSeparator(":",2).encode(certBytes);  } catch (  Exception e) {    throw new Exception("Could not compute SHA1 hash from certificate",e);  }}  }
class C{  @SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public static Map deleteOrderItemShipGroup(DispatchContext ctx,Map context) throws GenericEntityException {  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=new HashMap<String,Object>();  GenericValue orderItemShipGroup=(GenericValue)context.get("orderItemShipGroup");  if (UtilValidate.isEmpty(orderItemShipGroup)) {    String orderId=(String)context.get("orderId");    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    String shipGroupSeqId=(String)context.get("shipGroupSeqId");    if (UtilValidate.isNotEmpty(orderHeader) && UtilValidate.isNotEmpty(shipGroupSeqId)) {      orderItemShipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();      if (UtilValidate.isEmpty(orderItemShipGroup)) {        return ServiceUtil.returnError("OrderItemShipGroup Does Not Exist");      }    }  }  if (UtilValidate.isNotEmpty(orderItemShipGroup)) {    orderItemShipGroup.remove();    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  }  return result;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public boolean moreAccentuated(String posA,String posB){  return getPriority(posA) < getPriority(posB);}  }
class C{  protected void drawCenterText(Canvas c){  CharSequence centerText=mChart.getCenterText();  if (mChart.isDrawCenterTextEnabled() && centerText != null) {    PointF center=mChart.getCenterCircleBox();    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();    RectF holeRect=mRectBuffer[0];    holeRect.left=center.x - innerRadius;    holeRect.top=center.y - innerRadius;    holeRect.right=center.x + innerRadius;    holeRect.bottom=center.y + innerRadius;    RectF boundingRect=mRectBuffer[1];    boundingRect.set(holeRect);    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;    if (radiusPercent > 0.0) {      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);    }    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {      mCenterTextLastBounds.set(boundingRect);      mCenterTextLastValue=centerText;      float width=mCenterTextLastBounds.width();      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);    }    float layoutHeight=mCenterTextLayout.getHeight();    c.save();    if (Build.VERSION.SDK_INT >= 18) {      Path path=new Path();      path.addOval(holeRect,Path.Direction.CW);      c.clipPath(path);    }    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);    mCenterTextLayout.draw(c);    c.restore();  }}  }
class C{  public static void injectToTarget(Object target,Bundle data){  if (target == null || data == null)   return;  ParcelInjector injector;  try {    injector=getInjectorByClass(target.getClass());    injector.injectDataToTarget(target,data);  } catch (  Exception e) {    throw new RuntimeException(String.format("inject failed : %s",e.getMessage()),e);  }}  }
class C{  public void writeString(String str) throws IOException {  if (str == null)   writeInt(0); else {    if (useCompression && str.length() >= Compressor.MIN_SIZE_FOR_DEFLATION) {      byte[] bytes=compressor.deflateString2ByteArray(str);      writeInt(-bytes.length);      outs.write(bytes,0,bytes.length);      position+=bytes.length;    } else {      byte[] bytes=str.getBytes("UTF-8");      writeInt(bytes.length);      outs.write(bytes,0,bytes.length);      position+=bytes.length;    }  }}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public <K,C>ColumnFamilyQuery<K,C> prepareQuery(ColumnFamily<K,C> cf,ConsistencyLevel consistency){  return _astyanaxKeyspace.prepareQuery(cf).setConsistencyLevel(clamp(consistency));}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public Crop withMaxSize(int width,int height){  cropIntent.putExtra(Extra.MAX_X,width);  cropIntent.putExtra(Extra.MAX_Y,height);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_TIMEOUT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300219,value0,value1);}  }
class C{  private boolean isThisPrefix(char[] string){  if (string == null || string.length < 5)   return false;  return string[0] == 't' && string[1] == 'h' && string[2] == 'i' && string[3] == 's' && string[4] == '.';}  }
class C{  private boolean shouldBurnFat(){  return this.getSaturationLevel() > (float)((this.getFoodLevel() + 5) / 6) * 2.0F;}  }
class C{  public void dumpASCII(Writer writer){  Wave wave=getWave();  wave.dump(writer);}  }
class C{  public static Image makeSampleIconSwing(Document doc,String sample,boolean setColor,boolean setShape,int size){  final BufferedImage image=new BufferedImage(size,size,BufferedImage.TYPE_INT_ARGB);  final Graphics2D gc=image.createGraphics();  if (setColor && doc.getChartColorManager().getSampleColor(sample) == null)   setColor=false;  if (setColor)   gc.setColor(doc.getChartColorManager().getSampleColor(sample));  String shapeName=doc.getSampleAttributeTable().getSampleShape(sample);  if (shapeName == null || !setShape)   shapeName="circle";switch (shapeName.toLowerCase()) {case "triangle":    if (setColor)     gc.fillPolygon(new int[]{1,size - 1,size / 2},new int[]{size - 1,size - 1,1},3);  gc.setColor(Color.BLACK);gc.drawPolygon(new int[]{1,size - 1,size / 2},new int[]{size - 1,size - 1,1},3);break;case "diamond":if (setColor) gc.fillPolygon(new int[]{1,size / 2,size - 1,size / 2},new int[]{size / 2,size - 1,size / 2,1},4);gc.setColor(Color.BLACK);gc.drawPolygon(new int[]{1,size / 2,size - 1,size / 2},new int[]{size / 2,size - 1,size / 2,1},4);break;case "circle":if (setColor) gc.fillOval(1,1,size - 2,size - 2);gc.setColor(Color.BLACK);gc.drawOval(1,1,size - 2,size - 2);break;default :case "square":if (setColor) gc.fillRect(1,1,size - 2,size - 2);gc.setColor(Color.BLACK);gc.drawRect(1,1,size - 2,size - 2);}return image;}  }
class C{  @NotNull private static MappedField mapField(@NotNull Object layoutParams,@NotNull String attributeName){  Class currentClass=layoutParams.getClass();  while (!currentClass.equals(Object.class)) {    Function<String,MappedField> fieldMapper=FIELD_MAPPERS.get(currentClass.getName());    if (fieldMapper != null) {      MappedField mappedField=fieldMapper.apply(attributeName);      if (mappedField != null) {        try {          currentClass.getDeclaredField(mappedField.name);          return mappedField;        } catch (        NoSuchFieldException ignore) {        }        String setterName="set" + StringUtil.capitalize(mappedField.name);        for (        Method method : currentClass.getDeclaredMethods()) {          if (setterName.equals(method.getName())) {            return mappedField;          }        }      }    }    currentClass=currentClass.getSuperclass();  }  return new MappedField(attributeName,FieldType.UNKNOWN);}  }
class C{  public static Map<String,Object> createDataResourceAndText(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Map<String,Object> result=FastMap.newInstance();  Map<String,Object> thisResult=createDataResourceMethod(dctx,context);  if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {    return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));  }  result.put("dataResourceId",thisResult.get("dataResourceId"));  context.put("dataResourceId",thisResult.get("dataResourceId"));  String dataResourceTypeId=(String)context.get("dataResourceTypeId");  if (dataResourceTypeId != null && dataResourceTypeId.equals("ELECTRONIC_TEXT")) {    thisResult=createElectronicText(dctx,context);    if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {      return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));    }  }  return result;}  }
class C{  public MessagesSendQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  private static String replaceReferences(String regExpString,Map<String,String> refMap){  String result=regExpString;  List<Match> references=REF_MATCHER.getAllMatches(regExpString);  for (  Match oneRef : references) {    String refName=oneRef.getImage().substring(1,oneRef.getImage().length() - 1);    String refRegExpr=refMap.get(refName);    if (null == refRegExpr) {      throw new ProcessingException(String.format("unknown reference %s in regular expression %s",refName,regExpString));    }    result=result.replaceFirst(oneRef.getImage(),String.format("(%s)",Matcher.quoteReplacement(refRegExpr)));  }  return result;}  }
class C{  @Override public void normalize(){  if (isNormalized()) {    return;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  ChildNode kid, next;  for (kid=firstChild; kid != null; kid=next) {    next=kid.nextSibling;    if (kid.getNodeType() == Node.TEXT_NODE) {      if (next != null && next.getNodeType() == Node.TEXT_NODE) {        ((Text)kid).appendData(next.getNodeValue());        removeChild(next);        next=kid;      } else {        if (kid.getNodeValue() == null || kid.getNodeValue().length() == 0) {          removeChild(kid);        }      }    }    kid.normalize();  }  isNormalized(true);}  }
class C{  @Override public void load(InputStream fis) throws IOException {  Scanner in=new Scanner(fis);  ByteArrayOutputStream out=new ByteArrayOutputStream();  while (in.hasNext()) {    out.write(in.nextLine().trim().getBytes());    out.write("\n".getBytes());  }  in.close();  InputStream is=new ByteArrayInputStream(out.toByteArray());  super.load(is);}  }
class C{  public boolean isInWorld(VisibleObject object){  return allObjects.containsKey(object.getObjectId());}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  private static void killCurrentProcess(){  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(10);}  }
class C{  public static Map<String,Object> testSOAPService(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> response=ServiceUtil.returnSuccess();  List<GenericValue> testingNodes=new LinkedList<GenericValue>();  for (int i=0; i < 3; i++) {    GenericValue testingNode=delegator.makeValue("TestingNode");    testingNode.put("testingNodeId","TESTING_NODE" + i);    testingNode.put("description","Testing Node " + i);    testingNode.put("createdStamp",UtilDateTime.nowTimestamp());    testingNodes.add(testingNode);  }  response.put("testingNodes",testingNodes);  return response;}  }
class C{  private PluginCommand createNewBukkitCommand(cn.nukkit.command.PluginCommand<?> nukkitCommand){  Plugin bukkitPlugin=PokkitPlugin.toBukkit(nukkitCommand.getPlugin());  try {    Constructor<PluginCommand> constructor=PluginCommand.class.getDeclaredConstructor(String.class,Plugin.class);    constructor.setAccessible(true);    PluginCommand bukkitCommand=constructor.newInstance(nukkitCommand.getName(),bukkitPlugin);    bukkitCommand.setAliases(Arrays.asList(nukkitCommand.getAliases()));    bukkitCommand.setDescription(nukkitCommand.getDescription());    bukkitCommand.setLabel(nukkitCommand.getLabel());    bukkitCommand.setPermission(nukkitCommand.getPermission());    bukkitCommand.setPermissionMessage(nukkitCommand.getPermissionMessage());    bukkitCommand.setUsage(nukkitCommand.getUsage());    return bukkitCommand;  } catch (  ReflectiveOperationException e) {    throw new RuntimeException(e);  }}  }
class C{  public DataSchema loadSchema(InputStream stream) throws IOException, PIRException {  Document doc=parseXMLDocument(stream);  NodeList schemaNameList=doc.getElementsByTagName("schemaName");  if (schemaNameList.getLength() != 1) {    throw new PIRException("schemaNameList.getLength() = " + schemaNameList.getLength() + " -- should be one schema per xml file");  }  String schemaName=schemaNameList.item(0).getTextContent().trim();  logger.info("schemaName = " + schemaName);  DataSchema dataSchema=new DataSchema(schemaName);  NodeList nList=doc.getElementsByTagName("element");  for (int i=0; i < nList.getLength(); i++) {    Node nNode=nList.item(i);    if (nNode.getNodeType() == Node.ELEMENT_NODE) {      extractElementNode((Element)nNode,dataSchema);    }  }  return dataSchema;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static void requiredChildElements(SimpleMethod method,Element element,String... elementNames) throws ValidationException {  Set<String> childElementNames=new HashSet<String>();  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      childElementNames.add(childElement.getTagName());    }    node=node.getNextSibling();  }  for (  String name : elementNames) {    if (!childElementNames.contains(name)) {      handleError("Required child element <" + name + "> is missing.",method,element);    }  }}  }
class C{  public static void installTinker(ApplicationLike appLike){  if (isInstalled) {    TinkerLog.w(TAG,"install tinker, but has installed, ignore");    return;  }  LoadReporter loadReporter=new SampleLoadReporter(appLike.getApplication());  PatchReporter patchReporter=new SamplePatchReporter(appLike.getApplication());  PatchListener patchListener=new SamplePatchListener(appLike.getApplication());  AbstractPatch upgradePatchProcessor=new UpgradePatch();  AbstractPatch repairPatchProcessor=new RepairPatch();  TinkerInstaller.install(appLike,loadReporter,patchReporter,patchListener,SampleResultService.class,upgradePatchProcessor,repairPatchProcessor);  isInstalled=true;}  }
class C{  public void selectionChanged(SelectionChangedEvent event){  if (event.getSelection() instanceof IStructuredSelection) {    listSelectionChanged((IStructuredSelection)event.getSelection());  } else   if (event.getSelection() instanceof ITextSelection) {    textSelectionChanged((ITextSelection)event.getSelection());  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  protected static void assertStatisticalSummaryEquals(StatisticalSummary expected,StatisticalSummary observed,double delta){  UnitTestUtils.assertEquals(expected.getMax(),observed.getMax(),0);  UnitTestUtils.assertEquals(expected.getMin(),observed.getMin(),0);  Assert.assertEquals(expected.getN(),observed.getN());  UnitTestUtils.assertEquals(expected.getSum(),observed.getSum(),delta);  UnitTestUtils.assertEquals(expected.getMean(),observed.getMean(),delta);  UnitTestUtils.assertEquals(expected.getStandardDeviation(),observed.getStandardDeviation(),delta);  UnitTestUtils.assertEquals(expected.getVariance(),observed.getVariance(),delta);}  }
class C{  public void saveToFile(String fileName) throws IOException {  System.err.println("Saving tree to file: " + fileName);  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){    write(w,false);    w.write(";\n");  }   System.err.println("done (" + getNumberOfNodes() + " nodes)");}  }
class C{  @Override public List<WebElement> findElementsByCssSelector(String cssSelector){  return ((FindsByCssSelector)super.getWrappedDriver()).findElementsByCssSelector(cssSelector);}  }
class C{  public static Map<String,Object> executeMrp(DispatchContext ctx,Map<String,? extends Object> context){  Debug.logInfo("executeMrp called",module);  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp now=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String mrpName=(String)context.get("mrpName");  Integer defaultYearsOffset=(Integer)context.get("defaultYearsOffset");  String facilityGroupId=(String)context.get("facilityGroupId");  String facilityId=(String)context.get("facilityId");  String manufacturingFacilityId=null;  if (UtilValidate.isEmpty(facilityId) && UtilValidate.isEmpty(facilityGroupId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityNotAvailable",locale));  }  if (UtilValidate.isEmpty(facilityId)) {    try {      GenericValue facilityGroup=EntityQuery.use(delegator).from("FacilityGroup").where("facilityGroupId",facilityGroupId).queryOne();      if (UtilValidate.isEmpty(facilityGroup)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupIsNotValid",UtilMisc.toMap("facilityGroupId",facilityGroupId),locale));      }      List<GenericValue> facilities=facilityGroup.getRelated("FacilityGroupMember",null,UtilMisc.toList("sequenceNum"),false);      if (UtilValidate.isEmpty(facilities)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupIsNotAssociatedToFacility",UtilMisc.toMap("facilityGroupId",facilityGroupId),locale));      }      for (      GenericValue facilityMember : facilities) {        GenericValue facility=facilityMember.getRelatedOne("Facility",false);        if ("WAREHOUSE".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(facilityId)) {          facilityId=facility.getString("facilityId");        }        if ("PLANT".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(manufacturingFacilityId)) {          manufacturingFacilityId=facility.getString("facilityId");        }      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupCannotBeLoad",UtilMisc.toMap("errorString",e.getMessage()),locale));    }  } else {    manufacturingFacilityId=facilityId;  }  if (UtilValidate.isEmpty(facilityId) || UtilValidate.isEmpty(manufacturingFacilityId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityOrManufacturingFacilityNotAvailable",locale));  }  int bomLevelWithNoEvent=0;  BigDecimal stockTmp=BigDecimal.ZERO;  String oldProductId=null;  String productId=null;  GenericValue product=null;  GenericValue productFacility=null;  BigDecimal eventQuantity=BigDecimal.ZERO;  Timestamp eventDate=null;  BigDecimal reorderQuantity=BigDecimal.ZERO;  BigDecimal minimumStock=BigDecimal.ZERO;  int daysToShip=0;  List<BOMNode> components=null;  boolean isBuilt=false;  GenericValue routing=null;  String mrpId=delegator.getNextSeqId("MrpEvent");  Map<String,Object> result=null;  Map<String,Object> parameters=null;  List<GenericValue> listInventoryEventForMRP=null;  ListIterator<GenericValue> iteratorListInventoryEventForMRP=null;  parameters=UtilMisc.<String,Object>toMap("mrpId",mrpId,"reInitialize",Boolean.TRUE,"defaultYearsOffset",defaultYearsOffset,"userLogin",userLogin);  parameters.put("facilityId",facilityId);  parameters.put("manufacturingFacilityId",manufacturingFacilityId);  try {    result=dispatcher.runSync("initMrpEvents",parameters);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorRunningInitMrpEvents",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  long bomLevel=0;  do {    EntityCondition filterByConditions=null;    if (bomLevel == 0) {      filterByConditions=EntityCondition.makeCondition(EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,Long.valueOf(bomLevel)));    } else {      filterByConditions=EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,Long.valueOf(bomLevel));    }    try {      listInventoryEventForMRP=EntityQuery.use(delegator).from("MrpEventView").where(filterByConditions).orderBy("productId","eventDate").queryList();    } catch (    GenericEntityException e) {      Long bomLevelToString=new Long(bomLevel);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorForBomLevel",UtilMisc.toMap("bomLevel",bomLevelToString.toString(),"errorString",e.getMessage()),locale));    }    if (UtilValidate.isNotEmpty(listInventoryEventForMRP)) {      bomLevelWithNoEvent=0;      oldProductId="";      for (      GenericValue inventoryEventForMRP : listInventoryEventForMRP) {        productId=inventoryEventForMRP.getString("productId");        eventQuantity=inventoryEventForMRP.getBigDecimal("quantity");        if (!productId.equals(oldProductId)) {          BigDecimal positiveEventQuantity=eventQuantity.compareTo(BigDecimal.ZERO) > 0 ? eventQuantity : eventQuantity.negate();          try {            product=inventoryEventForMRP.getRelatedOne("Product",true);            productFacility=EntityUtil.getFirst(product.getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true));          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCannotFindProductForEvent",locale));          }          stockTmp=findProductMrpQoh(mrpId,product,facilityId,dispatcher,delegator);          try {            InventoryEventPlannedServices.createOrUpdateMrpEvent(UtilMisc.<String,Object>toMap("mrpId",mrpId,"productId",product.getString("productId"),"mrpEventTypeId","INITIAL_QOH","eventDate",now),stockTmp,facilityId,null,false,delegator);          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));          }          daysToShip=0;          if (productFacility != null) {            reorderQuantity=(productFacility.getBigDecimal("reorderQuantity") != null ? productFacility.getBigDecimal("reorderQuantity") : BigDecimal.ONE.negate());            minimumStock=(productFacility.getBigDecimal("minimumStock") != null ? productFacility.getBigDecimal("minimumStock") : BigDecimal.ZERO);            if ("SALES_ORDER_SHIP".equals(inventoryEventForMRP.getString("mrpEventTypeId"))) {              daysToShip=(productFacility.getLong("daysToShip") != null ? productFacility.getLong("daysToShip").intValue() : 0);            }          } else {            minimumStock=BigDecimal.ZERO;            reorderQuantity=BigDecimal.ONE.negate();          }          Map<String,Object> serviceResponse=null;          try {            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",positiveEventQuantity,"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));          } catch (          Exception e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorExplodingProduct",UtilMisc.toMap("productId",product.getString("productId")),locale));          }          components=UtilGenerics.checkList(serviceResponse.get("components"));          if (UtilValidate.isNotEmpty(components)) {            BOMNode node=(components.get(0)).getParentNode();            isBuilt=node.isManufactured();          } else {            isBuilt=false;          }          oldProductId=productId;        }        stockTmp=stockTmp.add(eventQuantity);        if (stockTmp.compareTo(minimumStock) < 0) {          BigDecimal qtyToStock=minimumStock.subtract(stockTmp);          eventDate=inventoryEventForMRP.getTimestamp("eventDate");          eventDate.setTime(eventDate.getTime() - 1);          ProposedOrder proposedOrder=new ProposedOrder(product,facilityId,manufacturingFacilityId,isBuilt,eventDate,qtyToStock);          proposedOrder.setMrpName(mrpName);          proposedOrder.calculateQuantityToSupply(reorderQuantity,minimumStock,iteratorListInventoryEventForMRP);          Map<String,Object> serviceResponse=null;          try {            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",proposedOrder.getQuantity(),"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));          } catch (          Exception e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorExplodingProduct",UtilMisc.toMap("productId",product.getString("productId")),locale));          }          components=UtilGenerics.checkList(serviceResponse.get("components"));          String routingId=(String)serviceResponse.get("workEffortId");          if (routingId != null) {            try {              routing=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",routingId).queryOne();            } catch (            GenericEntityException e) {              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCannotFindProductForEvent",locale));            }          } else {            routing=null;          }          if (UtilValidate.isNotEmpty(components)) {            BOMNode node=(components.get(0)).getParentNode();            isBuilt=node.isManufactured();          } else {            isBuilt=false;          }          Map<String,Object> routingTaskStartDate=proposedOrder.calculateStartDate(daysToShip,routing,delegator,dispatcher,userLogin);          if (isBuilt) {            processBomComponent(mrpId,product,proposedOrder.getQuantity(),proposedOrder.getRequirementStartDate(),routingTaskStartDate,components);          }          String requirementId=null;          if (productFacility != null) {            requirementId=proposedOrder.create(ctx,userLogin);          }          if (UtilValidate.isEmpty(productFacility) && !isBuilt) {            logMrpError(mrpId,productId,now,"No ProductFacility record for [" + facilityId + "]; no requirement created.",delegator);          }          String eventName=null;          if (UtilValidate.isNotEmpty(requirementId)) {            eventName="*" + requirementId + " ("+ proposedOrder.getRequirementStartDate()+ ")*";          }          Map<String,Object> eventMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"mrpId",mrpId,"eventDate",eventDate,"mrpEventTypeId",(isBuilt ? "PROP_MANUF_O_RECP" : "PROP_PUR_O_RECP"));          try {            InventoryEventPlannedServices.createOrUpdateMrpEvent(eventMap,proposedOrder.getQuantity(),null,eventName,(proposedOrder.getRequirementStartDate().compareTo(now) < 0),delegator);          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));          }          stockTmp=stockTmp.add(proposedOrder.getQuantity());        }      }    } else {      bomLevelWithNoEvent+=1;    }    bomLevel+=1;  } while (bomLevelWithNoEvent < 3);  result=FastMap.newInstance();  List<Object> msgResult=FastList.newInstance();  result.put("msgResult",msgResult);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  Debug.logInfo("return from executeMrp",module);  return result;}  }
class C{  public NeExpr newNeExpr(Value op1,Value op2){  return new GNeExpr(op1,op2);}  }
class C{  public GroupsGetInvitedUsersQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private void parseServerResponse(String response) throws RequestFailureException {  String appId=getRequestGenerator().getAppId();  boolean sentPingAndUpdate=!mSendInstallEvent;  ResponseParser parser=new ResponseParser(appId,mSendInstallEvent,sentPingAndUpdate,sentPingAndUpdate);  parser.parseResponse(response);  mTimestampForNewRequest=getBackoffScheduler().getCurrentTime() + MS_BETWEEN_REQUESTS;  mLatestVersion=parser.getNewVersion();  mMarketURL=parser.getURL();  scheduleRepeatingAlarm();}  }
class C{  @Override public void attributeSelection(String field){  if (this.comboBox != null) {    this.comboBox.setEnabled(field == null);  }}  }
class C{  @Override public boolean isEnemyFrom(Player player){  int worldId=getPosition().getMapId();  return player.getRace() != this.ownerRace;}  }
class C{  public boolean isApplicable(){  return getDoc().getNumberOfReads() > 0;}  }
class C{  public static boolean isMemoryOnlySearch(int mod){  return Modifiers.contains(mod,MEMORY_ONLY_SEARCH);}  }
class C{  @Override public Object[] next(){  return currentchunk.next();}  }
class C{  public FisheyeDistortion(double dfactor){  this(dfactor,dfactor);}  }
class C{  static TxnMgrProxy create(TxnManager txnMgr,Uuid id){  if (txnMgr instanceof RemoteMethodControl) {    return new ConstrainableTxnMgrProxy(txnMgr,id,null);  } else {    return new TxnMgrProxy(txnMgr,id);  }}  }
class C{  private static void sendFailureSelfPatch(StatefulService service,Throwable e){  StatefulTaskDocument body=new StatefulTaskDocument();  body.taskInfo=new TaskState();  body.taskInfo.stage=TaskStage.FAILED;  body.taskInfo.failure=Utils.toServiceErrorResponse(e);  service.logWarning("Operation failed: %s",Utils.toString(e));  sendPatch(service,body);}  }
class C{  public void create(FeatureType schema){  if (schema == null) {    return;  }  SimpleFeatureType featureType=(SimpleFeatureType)schema;  memory=new MemoryDataStore();  try {    memory.createSchema(featureType);  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);    memory=null;    return;  }  SimpleFeatureBuilder builder=new SimpleFeatureBuilder(featureType);  SimpleFeature feature=DataUtilities.template(featureType);  builder.init((SimpleFeature)feature);  int index=0;  for (  AttributeDescriptor descriptor : featureType.getAttributeDescriptors()) {    AttributeType attributeType=descriptor.getType();    Object value=null;    Class<?> fieldType=attributeType.getBinding();    if (attributeType instanceof GeometryTypeImpl) {      geometryType=GeometryTypeMapping.getGeometryType(fieldType);switch (geometryType) {case POLYGON:        ExamplePolygonInterface examplePolygon=DataSourceFactory.createExamplePolygon(null);      value=examplePolygon.getPolygon();    break;case LINE:  ExampleLineInterface exampleLine=DataSourceFactory.createExampleLine(null);value=exampleLine.getLine();break;case POINT:default :ExamplePointInterface examplePoint=DataSourceFactory.createExamplePoint(null);value=examplePoint.getPoint();break;}} else {value=getFieldTypeValue(index,attributeType.getName(),fieldType);}builder.add(value);index++;}SimpleFeature newFeature=builder.buildFeature("1234");memory.addFeature(newFeature);}  }
class C{  protected boolean scanDoctypeDecl() throws IOException, XNIException {  if (!fEntityScanner.skipSpaces()) {    reportFatalError("MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL",null);  }  fDoctypeName=fEntityScanner.scanName();  if (fDoctypeName == null) {    reportFatalError("MSG_ROOT_ELEMENT_TYPE_REQUIRED",null);  }  if (fEntityScanner.skipSpaces()) {    scanExternalID(fStrings,false);    fDoctypeSystemId=fStrings[0];    fDoctypePublicId=fStrings[1];    fEntityScanner.skipSpaces();  }  fHasExternalDTD=fDoctypeSystemId != null;  if (!fHasExternalDTD && fExternalSubsetResolver != null) {    fDTDDescription.setValues(null,null,fEntityManager.getCurrentResourceIdentifier().getExpandedSystemId(),null);    fDTDDescription.setRootName(fDoctypeName);    fExternalSubsetSource=fExternalSubsetResolver.getExternalSubset(fDTDDescription);    fHasExternalDTD=fExternalSubsetSource != null;  }  if (fDocumentHandler != null) {    if (fExternalSubsetSource == null) {      fDocumentHandler.doctypeDecl(fDoctypeName,fDoctypePublicId,fDoctypeSystemId,null);    } else {      fDocumentHandler.doctypeDecl(fDoctypeName,fExternalSubsetSource.getPublicId(),fExternalSubsetSource.getSystemId(),null);    }  }  boolean internalSubset=true;  if (!fEntityScanner.skipChar('[')) {    internalSubset=false;    fEntityScanner.skipSpaces();    if (!fEntityScanner.skipChar('>')) {      reportFatalError("DoctypedeclUnterminated",new Object[]{fDoctypeName});    }    fMarkupDepth--;  }  return internalSubset;}  }
class C{  public void sendMessageInTheRoomPeople(String... protocols){  if (getEnteredTheClients() == 1 && Integer.parseInt(protocols[0]) == Settings._ANSWER_TICTACTOC_STONE_EVENT) {    AICelculate();  }  if (isGameRunning() == false && protocols.length > 2 && protocols[1].length() >= 8 && protocols[2].equals(manager.getClientName()) && getGameType() == Settings.nGameTicTacToc) {    String _temp=protocols[1].substring(0,8).toLowerCase();    if (_temp.equals("-setgame")) {      if (protocols[1].length() >= 20) {        _temp=protocols[1].substring(9,14).toLowerCase();        if (_temp.equals("style")) {          _temp=protocols[1].substring(15,protocols[1].length()).toLowerCase();          if (_temp.equals("color")) {            for (int i=0; i < roomClients.size(); i++)             if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName()))             roomClients.get(i).sendPacket(Settings._ANSWER_SET_THE_TICTACTOC_COLOR_MODE + "",false + "");            return;          } else           if (_temp.equals("blackwhite")) {            for (int i=0; i < roomClients.size(); i++)             if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName()))             roomClients.get(i).sendPacket(Settings._ANSWER_SET_THE_TICTACTOC_COLOR_MODE + "",true + "");            return;          }        }      }      if (protocols[1].length() >= 16 && getEnteredTheClients() <= 1) {        _temp=protocols[1].substring(9,11).toLowerCase();        if (_temp.equals("ai")) {          _temp=protocols[1].substring(12,protocols[1].length()).toLowerCase();          if (_temp.equals("attack")) {            setAITicTacToc(true);            manager.sendPacket(Settings._ANSWER_TICTACTOC_AI_SETTING + "","" + true);            return;          } else           if (_temp.equals("defense")) {            setAITicTacToc(false);            manager.sendPacket(Settings._ANSWER_TICTACTOC_AI_SETTING + "","" + false);            return;          }        }      }    }  } else   if (isGameRunning() == false && protocols.length > 2 && protocols[1].length() >= 8 && protocols[2].equals(manager.getClientName()) && getGameType() == Settings.nGameCatchMe) {    String _temp=protocols[1].substring(0,8).toLowerCase();    if (_temp.equals("-setgame")) {      if (protocols[1].length() >= 16) {        _temp=protocols[1].substring(9,14).toLowerCase();        if (_temp.equals("count")) {          _temp=protocols[1].substring(15,protocols[1].length()).toLowerCase();          setnCatchmePlayCount(Integer.parseInt(_temp));          for (int i=0; i < roomClients.size(); i++)           if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName()))           roomClients.get(i).sendPacket(Settings._ANSWER_SET_THE_CATCHME_PLAY_COUNT + "",_temp + "");          return;        }      }    }  }  Client _client=null;  String[] sMessageProtocol=null;  if (protocols.length > 2) {    for (int i=0; i < roomClients.size(); i++)     if (roomClients.get(i).getClientName().equals(protocols[2])) {      _client=roomClients.get(i);    }    sMessageProtocol=protocols[1].split(" ");  }  if (_client != null && gameRoomMessageValidCheck(_client,sMessageProtocol)) {    sMessageProtocol[0]=sMessageProtocol[0].toLowerCase();    String query;    ResultSet rs;    if (sMessageProtocol[0].equals("-info")) {      query="SELECT id,win,defeat,playtimes FROM " + sMessageProtocol[2] + " where id='"+ sMessageProtocol[1]+ "'";      try {        rs=stmt.executeQuery(query);      } catch (      SQLException e) {        _client.sendPacket(Settings._ANSWER_ROOM_MEMEBER_MESSAGE + "","Wrong command","error");        return;      }      try {        if (rs.next()) {          String win=rs.getString("win");          String defeat=rs.getString("defeat");          String playtime=rs.getString("playtimes");          _client.sendPacket(Settings._ANSWER_ROOM_MEMEBER_MESSAGE + "","win:" + win + " "+ "defeat:"+ defeat+ " "+ "playtime:"+ playtime,sMessageProtocol[1] + " -info");          return;        }      } catch (      SQLException e) {        _client.sendPacket(Settings._ANSWER_ROOM_MEMEBER_MESSAGE + "","Wrong command","error");        return;      }    } else     if (sMessageProtocol[0].equals("-w")) {      String sSendingMessage="";      for (int i=2; i < sMessageProtocol.length; i++)       sSendingMessage+=sMessageProtocol[i] + " ";      if (sSendingMessage == "")       return;      for (      Client client : connections)       if (client.getClientName().equals(protocols[2]) || client.getClientName().equals(sMessageProtocol[1])) {        client.sendPacket(Settings._ANSWER_ROOM_MEMEBER_MESSAGE + "",sSendingMessage,protocols[2] + " -w");        client.sendPacket(Settings._ANSWER_WAITING_ROOM_SENDING_MESSAGE + "",sSendingMessage,protocols[2] + " -w");      }      return;    }  }  for (int i=0; i < roomClients.size(); i++)   if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName())) {    if (!(Settings._ANSWER_ROOM_MEMEBER_MESSAGE == Integer.parseInt(protocols[0]) && protocols[1].substring(0,1).equals("-")))     roomClients.get(i).sendPacket(protocols);  }  if (Integer.parseInt(protocols[0]) == Settings._ANSWER_OUT_OF_THE_ROOM)   for (int i=0; i < roomClients.size(); i++) {    roomClients.get(i).setClientGameTag(Settings.ERRORCODE);    roomClients.get(i).init();  }}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augs) throws XNIException {  fNDataDeclNotations.clear();  fDTDElementDecls.clear();  if (!fGrammarBucket.getActiveGrammar().isImmutable()) {    fDTDGrammar=fGrammarBucket.getActiveGrammar();  }  if (fDTDGrammar != null)   fDTDGrammar.startDTD(locator,augs);  if (fDTDHandler != null) {    fDTDHandler.startDTD(locator,augs);  }}  }
class C{  public UTF8Reader(InputStream inputStream,byte[] buffer,MessageFormatter messageFormatter,Locale locale){  fInputStream=inputStream;  fBuffer=buffer;  fFormatter=messageFormatter;  fLocale=locale;}  }
class C{  public Host(String hostName,InetAddress inetAddress){  if (hostName == null)   throw new IllegalArgumentException("Host name cannot be null");  if (inetAddress == null)   throw new IllegalArgumentException("InetAddress cannot be null");  this.hostName=hostName;  this.inetAddress=inetAddress;}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return new InputSource(new StringReader(""));}  }
class C{  public Vector2DFormat(){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200991,skillcaster,num0,skilltarget,skillname);}  }
class C{  @Override public void onTaskLoadSuccess(final List<Task> list){  mTaskAdapter.setColorId(ThemeUtils.getResourceId(this,R.attr.colorAccent));  mTaskAdapter.setLast(mPresenter.getComic().getLast());  mTaskAdapter.addAll(list);  mPresenter.sortTask(list);}  }
class C{  protected void mouseClicked(int mouseX,int mouseY,int mouseButton){  try {    super.mouseClicked(mouseX,mouseY,mouseButton);  } catch (  IOException e) {    e.printStackTrace();  }  this.guiTextField.mouseClicked(mouseX,mouseY,mouseButton);}  }
class C{  public boolean canSet(Class type){  if (type == null)   return false;  if (Number.class.isAssignableFrom(type) || String.class.isAssignableFrom(type)) {    return true;  } else {    return m_columnType.isAssignableFrom(type);  }}  }
class C{  private static URL[] pathToURLs(String path) throws MalformedURLException {  String[] names=path.split(File.pathSeparator);  URL[] urls=new URL[names.length + 1];  urls[0]=JConsolePluginWrapper.class.getProtectionDomain().getCodeSource().getLocation();  int count=1;  for (  String f : names) {    URL url=fileToURL(new File(f));    urls[count++]=url;  }  return urls;}  }
class C{  public synchronized Vertex locateVertex(Vertex v){  return (Vertex)UniqueVertices.get(v.getLabel());}  }
class C{  public String deleteByExample(UserCriteria example){  SQL sql=new SQL();  sql.DELETE_FROM("user");  applyWhere(sql,example,false);  return sql.toString();}  }
class C{  protected static String[] splitStringByDelimiterPoints(String sStr,Integer[] iRes){  ArrayList alRes=new ArrayList();  for (int iCnt=0; iCnt < iRes.length; iCnt++) {    if (iCnt == 0)     alRes.add(sStr.substring(0,iRes[iCnt])); else     alRes.add(sStr.substring(iRes[iCnt - 1],iRes[iCnt]));  }  if (iRes.length > 0)   alRes.add(sStr.substring(iRes[iRes.length - 1])); else   alRes.add(sStr);  String[] sRes=new String[alRes.size()];  alRes.toArray(sRes);  return sRes;}  }
class C{  public UserDTO toDTO(User user,int depth){  if (user == null) {    return null;  }  UserDTO dto=new UserDTO();  dto.id=user.getId();  dto.login=user.getLogin();  dto.password=user.getPassword();  dto.email=user.getEmail();  dto.isEnabled=user.getIsEnabled();  dto.civility=user.getCivility();  dto.firstName=user.getFirstName();  dto.lastName=user.getLastName();  dto.creationDate=user.getCreationDate();  dto.creationAuthor=user.getCreationAuthor();  dto.lastModificationDate=user.getLastModificationDate();  dto.lastModificationAuthor=user.getLastModificationAuthor();  dto.version=user.getVersion();  if (depth-- > 0) {    final int fdepth=depth;    dto.roles=user.getRoles().stream().map(null).collect(Collectors.toList());  }  return dto;}  }
class C{  public static DownloadQueue newDownloadQueue(){  return newDownloadQueue(3);}  }
class C{  public DistributionDocument(int iNeighbourhoodWindow,int iSourceNGramSize){  SourceNGramSize=iSourceNGramSize;  Graph=new DistributionGraph();  NeighbourhoodWindow=iNeighbourhoodWindow;}  }
class C{  public Builder intoPlugins(@Nullable Collection<String> plugins){  myPlugins=plugins;  return this;}  }
class C{  public static void removeService(String url) throws RpcException {  try {    ServicePublisher.removeService(url);  } catch (  RegistryException e) {    throw new RpcException("error while removing service:" + url,e);  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public SM_CHARACTER_LIST(int playOk2){  this.playOk2=playOk2;}  }
class C{  public static void streamContentToBrowser(HttpServletResponse response,InputStream in,int length,String contentType,String fileName) throws IOException {  setResponseBrowserProxyNoCache(response);  response.setContentLength(length);  if (contentType != null) {    response.setContentType(contentType);  }  if (fileName != null) {    response.setHeader("Content-Disposition","attachment;filename=\"" + fileName + "\"");  }  OutputStream out=response.getOutputStream();  try {    streamContent(out,in,length);  } catch (  IOException e) {    out.close();    throw e;  }  out.flush();  out.close();}  }
class C{  public PrefixFSM(URL url) throws IOException {  super(url,true);}  }
class C{  public void onFullScreenButtonListener(OnClickListener listener){  playerControlsWrapper.setOnFullScreenButtonListener(listener);}  }
class C{  public static void writeColumn(String fileName,CategoryColumn column) throws IOException {  int categoryCount=column.dictionaryMap().size();  try (FileOutputStream fos=new FileOutputStream(fileName);SnappyFramedOutputStream sos=new SnappyFramedOutputStream(fos);DataOutputStream dos=new DataOutputStream(sos)){    dos.writeInt(categoryCount);    SortedSet<Integer> keys=new TreeSet<>(column.dictionaryMap().keyToValueMap().keySet());    for (    int key : keys) {      dos.writeUTF(column.dictionaryMap().get(key));    }    dos.flush();    int i=0;    for (    int d : column.data()) {      dos.writeInt(d);      if (i % FLUSH_AFTER_ITERATIONS == 0) {        dos.flush();      }      i++;    }  } }  }
class C{  protected boolean isReflex(Vector2 p0,Vector2 p,Vector2 p1){  return right(p1,p0,p);}  }
class C{  public DataSourceMetadataLoaderHealthCheck(DataSourceMetadataLoader loader,long executionWindow){  this.loader=loader;  this.executionWindow=executionWindow;}  }
class C{  public Skewness(final ThirdMoment m3){  this.moment=m3;  incMoment=false;}  }
class C{  public int size(){  return sequences.length;}  }
class C{  private String appendClasspath(String appPath,String libPath){  String s=(appPath != null && !appPath.isEmpty()) ? appPath : "";  if (libPath != null && !libPath.isEmpty()) {    if (!s.isEmpty())     s+=File.pathSeparator;    s+=libPath;  }  return s;}  }
class C{  public final boolean addRuleId(final Long pId){  if (!this.ruleIds.contains(pId)) {    this.ruleIds.add(pId);    this.tagChange=CHANGE_CONFIGURATION;    return true;  } else {    return false;  }}  }
class C{  private List<String> arrayToList(String[] array){  return Arrays.asList(array);}  }
class C{  public static boolean isConnectedByWifi(){  NetworkInfo info=getNetworkInfos();  return info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  public int size(){  return bits.length << 6;}  }
class C{  public static float asin(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.asin(fValue);    }    return HALF_PI;  }  return -HALF_PI;}  }
class C{  @Nullable public static ModelWizardDialog createDialogForPaths(@Nullable Project project,@NotNull Collection<String> requestedPaths){  return createDialog(project,null,requestedPaths,null,null,getSdkHandler(),false);}  }
class C{  public void toggleMinimize(@NotNull Component comp){  assert mComponentInfoMap.containsKey(comp);  ComponentInfo info=mComponentInfoMap.get(comp);  setStateInternal(comp,info,info.state == AccordionState.MINIMIZE ? AccordionState.PREFERRED : AccordionState.MINIMIZE);}  }
class C{  public Iterator items(String group,Predicate filter){  if (ALL_ITEMS.equals(group))   return items(filter);  TupleSet t=getGroup(group);  return (t == null ? Collections.EMPTY_LIST.iterator() : t.tuples(filter));}  }
class C{  public static double abs1(Z z){  return Math.abs(z.re) + Math.abs(z.im);}  }
class C{  protected TabDelegate createTabDelegate(boolean incognito){  return new TabDelegate(incognito);}  }
class C{  public static SnippetObject symbol(Object symbol){  return new SnippetObject(longify(symbol),null,null);}  }
class C{  public DataSizeAction(String group,String field){  super(group,NO_SIZE);  m_dataField=field;}  }
class C{  public MarketGetByIdQuery(VkApiClient client,UserActor actor,String... itemIds){  super(client,"market.getById",GetByIdResponse.class);  accessToken(actor.getAccessToken());  itemIds(itemIds);}  }
class C{  protected boolean isValid(int ch){  return XMLChar.isValid(ch);}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  private void notifyListenersWithSupervision(final T tag){  listenerLock.readLock().lock();  try {    for (    CacheSupervisionListener<? super T> cacheListener : listenersWithSupervision) {      cacheListener.onSupervisionChange(tag);    }  }  finally {    listenerLock.readLock().unlock();  }}  }
class C{  public static ActionEntry from(Matcher matcher,Action action){  return new ActionEntry(matcher,action);}  }
class C{  public Txn<T> txnWrite(){  return txn(null);}  }
class C{  public Single<Void> writeTaskInDatabase(final Task _task){  final String key=this.getChildReference().push().getKey();  _task.setId(key);  return observeSingleValue(getChildReference().child(key).setValue(_task));}  }
class C{  @Override public boolean lock(){  try {    lockPath=zk.create(this.lockTypeFolder + CarbonCommonConstants.FILE_SEPARATOR + lockName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);    List<String> nodes=zk.getChildren(this.lockTypeFolder,null);    Collections.sort(nodes);    if (lockPath.endsWith(nodes.get(0))) {      return true;    } else {      zk.delete(lockPath,-1);      return false;    }  } catch (  KeeperException|InterruptedException e) {    LOGGER.error(e,e.getMessage());    return false;  }}  }
class C{  public FriendsAreFriendsQuery areFriends(UserActor actor,int... userIds){  return new FriendsAreFriendsQuery(getClient(),actor,userIds);}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  public PhotosSaveMarketPhotoQuery saveMarketPhoto(UserActor actor,String photo,int server,String hash){  return new PhotosSaveMarketPhotoQuery(getClient(),actor,photo,server,hash);}  }
class C{  public android.os.IBinder onBind(android.content.Intent intent){  if (ScriptLoader.isCalledFromJRuby())   return null;  preOnBind(intent);  if (JRubyAdapter.isInitialized() && scriptInfo.isReadyToLoad()) {    ScriptLoader.loadScript(this);  } else {    return null;  }  String rubyClassName=scriptInfo.getRubyClassName();  if (rubyClassName == null)   return null;  if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(false).any?{|m| m.to_sym == :onBind}")) {    return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),"onBind",intent);  } else {    if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(false).any?{|m| m.to_sym == :on_bind}")) {      return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),"on_bind",intent);    } else {      if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(true).any?{|m| m.to_sym == :on_bind}")) {        return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),"on_bind",intent);      } else {        return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),"onBind",intent);      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CANT_INVITE_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1300191,value0);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set flipV=");  boolean flip=np.getBoolean();  np.matchIgnoreCase(";");  getViewer().getPcoaTab().setFlipV(flip);  try {    getViewer().updateDistances();  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  public static void notifyListChange(String name){  java.util.List<String> list=new LinkedList<>();  StringTokenizer st=new StringTokenizer(ProgramProperties.get(name,""),";");  while (st.hasMoreTokens()) {    list.add(st.nextToken());  }synchronized (propertieslistListeners) {    for (    PropertiesListListener listener : propertieslistListeners) {      if (listener.isInterested(name))       listener.hasChanged(list);    }  }}  }
class C{  public static QueryResponseJSON extractQueryResponseJSON(QueryInfo queryInfo,QuerySchema qSchema,List<BigInteger> parts) throws PIRException {  QueryResponseJSON qrJSON=new QueryResponseJSON(queryInfo);  DataSchema dSchema=DataSchemaRegistry.get(qSchema.getDataSchemaName());  int numArrayElementsToReturn=SystemConfiguration.getIntProperty("pir.numReturnArrayElements",1);  logger.debug("parts.size() = " + parts.size());  int partsIndex=0;  if (queryInfo.getEmbedSelector()) {    String selectorFieldName=qSchema.getSelectorName();    String type=dSchema.getElementType(selectorFieldName);    String embeddedSelector=getEmbeddedSelectorFromPartitions(parts,partsIndex,type,dSchema.getPartitionerForElement(selectorFieldName));    qrJSON.setSelector(embeddedSelector);    partsIndex+=4;    logger.debug("Extracted embedded selector = " + embeddedSelector + " parts.size() = "+ parts.size());  }  List<String> dataFieldsToExtract=qSchema.getElementNames();  for (  String fieldName : dataFieldsToExtract) {    int numElements=1;    if (dSchema.isArrayElement(fieldName)) {      numElements=numArrayElementsToReturn;    }    for (int i=0; i < numElements; ++i) {      String type=dSchema.getElementType(fieldName);      logger.debug("Extracting value for fieldName = " + fieldName + " type = "+ type+ " partsIndex = "+ partsIndex);      Object element=dSchema.getPartitionerForElement(fieldName).fromPartitions(parts,partsIndex,type);      qrJSON.setMapping(fieldName,element);      partsIndex+=dSchema.getPartitionerForElement(fieldName).getNumPartitions(type);      logger.debug("Adding qrJSON element = " + element + " element.getClass() = "+ element.getClass());    }  }  return qrJSON;}  }
class C{  public static Map<String,Object> scaleImage(BufferedImage bufImg,double imgHeight,double imgWidth,Map<String,Map<String,String>> dimensionMap,String sizeType,Locale locale){  BufferedImage bufNewImg;  double defaultHeight, defaultWidth, scaleFactor;  Map<String,Object> result=new LinkedHashMap<String,Object>();  if (dimensionMap.get(sizeType).containsKey("height")) {    defaultHeight=Double.parseDouble(dimensionMap.get(sizeType).get("height").toString());  } else {    defaultHeight=-1;  }  if (dimensionMap.get(sizeType).containsKey("width")) {    defaultWidth=Double.parseDouble(dimensionMap.get(sizeType).get("width").toString());  } else {    defaultWidth=-1;  }  if (defaultHeight == 0.0 || defaultWidth == 0.0) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.one_default_dimension_is_null",locale) + " : defaultHeight = " + defaultHeight+ " ; defaultWidth = "+ defaultWidth;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  if (defaultHeight == -1) {    scaleFactor=defaultWidth / imgWidth;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.width_scale_factor_is_null",locale) + "  (defaultWidth = " + defaultWidth+ "; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }  } else   if (defaultWidth == -1) {    scaleFactor=defaultHeight / imgHeight;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.height_scale_factor_is_null",locale) + "  (defaultHeight = " + defaultHeight+ "; imgHeight = "+ imgHeight;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }  } else   if (imgHeight > imgWidth) {    scaleFactor=defaultHeight / imgHeight;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.height_scale_factor_is_null",locale) + "  (defaultHeight = " + defaultHeight+ "; imgHeight = "+ imgHeight;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    if (defaultWidth < (imgWidth * scaleFactor)) {      scaleFactor=defaultWidth / imgWidth;    }  } else {    scaleFactor=defaultWidth / imgWidth;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.width_scale_factor_is_null",locale) + "  (defaultWidth = " + defaultWidth+ "; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    if (defaultHeight < (imgHeight * scaleFactor)) {      scaleFactor=defaultHeight / imgHeight;    }  }  if (scaleFactor == 0.0) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.final_scale_factor_is_null",locale) + " = " + scaleFactor;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  int bufImgType;  if (BufferedImage.TYPE_CUSTOM == bufImg.getType()) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.unknown_buffered_image_type",locale);    Debug.logWarning(errMsg,module);    bufImgType=BufferedImage.TYPE_INT_ARGB_PRE;  } else {    bufImgType=bufImg.getType();  }  Image newImg=bufImg.getScaledInstance((int)(imgWidth * scaleFactor),(int)(imgHeight * scaleFactor),Image.SCALE_SMOOTH);  bufNewImg=ImageTransform.toBufferedImage(newImg,bufImgType);  result.put("responseMessage","success");  result.put("bufferedImage",bufNewImg);  result.put("scaleFactor",scaleFactor);  return result;}  }
class C{  public void click(){  new ComponentDriver(myRobot).click(mySurface,getMidPoint());  myRobot.waitForIdle();}  }
class C{  void receiveSplitData(Node node,Node newNode,int offset){  if (node == null || newNode == null)   return;  if (fSplitNode == node)   return;  if (node == fStartContainer && fStartContainer.getNodeType() == Node.TEXT_NODE) {    if (fStartOffset > offset) {      fStartOffset=fStartOffset - offset;      fStartContainer=newNode;    }  }  if (node == fEndContainer && fEndContainer.getNodeType() == Node.TEXT_NODE) {    if (fEndOffset > offset) {      fEndOffset=fEndOffset - offset;      fEndContainer=newNode;    }  }}  }
class C{  @Override public MeasureColumnDataChunk readMeasureChunk(FileHolder fileReader,int blockIndex){  MeasureColumnDataChunk datChunk=new MeasureColumnDataChunk();  ValueCompressonHolder.UnCompressValue copy=values[blockIndex].getNew();  copy.setValue(fileReader.readByteArray(filePath,measureColumnChunk.get(blockIndex).getDataPageOffset(),measureColumnChunk.get(blockIndex).getDataPageLength()));  CarbonReadDataHolder measureDataHolder=copy.uncompress(compressionModel.getChangedDataType()[blockIndex]).getValues(compressionModel.getDecimal()[blockIndex],compressionModel.getMaxValue()[blockIndex]);  datChunk.setMeasureDataHolder(measureDataHolder);  datChunk.setNullValueIndexHolder(measureColumnChunk.get(blockIndex).getNullValueIndexForColumn());  return datChunk;}  }
class C{  void updateFinish(){  mWXSDKInstance.onUpdateFinish();}  }
class C{  public boolean isApplicable(){  return ((MainViewer)getViewer()).getSelectedIds().size() == 1;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SEQUENCE_ID:    return isSetSequenceId();case STATUS:  return isSetStatus();case MESSAGE:return isSetMessage();}throw new IllegalStateException();}  }
class C{  public PhotosSaveWallPhotoQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  public ExternalGraphicDetails(ExternalGraphicUpdateInterface parentObj,FunctionNameInterface functionManager){  super(ExternalGraphicDetails.class,functionManager);  this.parentObj=parentObj;  createUI();}  }
class C{  public RemoteEvent(Object source,long eventID,long seqNum,MarshalledObject handback){  super(source);  this.source=source;  this.eventID=eventID;  this.seqNum=seqNum;  this.handback=handback;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public ItemStack removeStack(ItemStack itemStack){  stack-=itemStack.getStack();  if (stack < 0) {    itemStack.stack=stack * -1;    stack=0;  } else {    itemStack.stack=0;  }  return itemStack;}  }
class C{  public static boolean checkPassword(String password,String hash){  return (myCrypt(password,hash).equals(hash));}  }
class C{  public boolean isApplicable(){  MainViewer mainViewer=(MainViewer)getDir().getViewerByClass(MainViewer.class);  return mainViewer != null && mainViewer.hasComparableData();}  }
class C{  private synchronized void messageProcessed(Message msg){  ClientCnx currentCnx=cnx();  ClientCnx msgCnx=((MessageImpl)msg).getCnx();  if (msgCnx != currentCnx) {    return;  }  increaseAvailablePermits(currentCnx);  stats.updateNumMsgsReceived(msg);}  }
class C{  @Deprecated public UrlSpaceConfigurer userDetails(String userName,String password){  return securityConfig(new SecurityConfig(userName,password));}  }
class C{  @Nullable public byte[] loadViewImage(@NotNull ViewNode node,long timeout,TimeUnit unit){  CaptureByteArrayHandler handler=new CaptureByteArrayHandler(HandleViewDebug.CHUNK_VUOP);  try {    HandleViewDebug.captureView(client,title,node.toString(),handler);  } catch (  IOException e) {    return null;  }  return handler.getData(timeout,unit);}  }
class C{  @Override public void errorEntry(ErrorEntry errorLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public void forceNSDecl(String uri){  forcedDeclTable.put(uri,Boolean.TRUE);}  }
class C{  public DOMParser(XMLParserConfiguration config){  super(config);}  }
class C{  public WallRestoreQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean isZero(double value){  return isEqual(value,0d);}  }
class C{  public void onContentViewSeen(){}  }
class C{  public JsonRequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    if (!(keysAndValues[i] instanceof CharSequence)) {      throw new IllegalArgumentException("invalid key,the type of key must be String " + keysAndValues[i]);    }    String key=String.valueOf(keysAndValues[i]);    put(key,keysAndValues[i + 1]);  }}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {  if (!fDeferNodeExpansion) {    if (fDocumentImpl != null) {      if (fLocator != null) {        fDocumentImpl.setInputEncoding(fLocator.getEncoding());      }      fDocumentImpl.setStrictErrorChecking(true);    }    fCurrentNode=null;  } else {    if (fLocator != null) {      fDeferredDocumentImpl.setInputEncoding(fLocator.getEncoding());    }    fCurrentNodeIndex=-1;  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public UndoEvent(UndoActionInterface parentObj,String text,Object oldValue,Object newValue){  this.parentObj=parentObj;  this.oldValue=oldValue;  this.newValue=newValue;  this.customText=text;  representation=String.format("Storing value : %s Old : %s New : %s",text,oldValue,newValue);}  }
class C{  @Override public void handleMessage(final SoapMessage msg) throws Fault {  if (mode.isCheckOnly()) {    logger.warn("Running in " + mode + " mode, no response signature verification available!");  } else   if (isErrorResponse(msg)) {    logger.warn("Validation error, no response signature verification available!");  } else {    super.handleMessage(msg);  }}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<String,CharSequence>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1]);      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201067,num0,skillname);}  }
class C{  public static final float toJulian(Calendar c){  int Y=c.get(Calendar.YEAR);  int M=c.get(Calendar.MONTH);  int D=c.get(Calendar.DATE);  int A=Y / 100;  int B=A / 4;  int C=2 - A + B;  float E=(int)(365.25f * (Y + 4716));  float F=(int)(30.6001f * (M + 1));  float JD=C + D + E+ F - 1524.5f;  return JD;}  }
class C{  public static Color fadeToColor(Color source,Color target,float ratio){  int r=(int)((1 - ratio) * source.getRed() + ratio * target.getRed());  int g=(int)((1 - ratio) * source.getGreen() + ratio * target.getGreen());  int b=(int)((1 - ratio) * source.getBlue() + ratio * target.getBlue());  int a=(int)((1 - ratio) * source.getAlpha() + ratio * target.getAlpha());  return new Color(r,g,b,a);}  }
class C{  public static String toEditRate(BigFraction editRate){  return String.format("%s %s",String.valueOf(editRate.getNumeratorAsLong()),String.valueOf(editRate.getDenominatorAsLong()));}  }
class C{  public TopicSubscriber createDurableSubscriber(Topic topic,String name) throws JMSException {  throw new IllegalStateException("Forbidden call on a QueueSession.");}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200831,skillcaster,num0,skillname);}  }
class C{  public static int kroneckerDelta(double i,double j){  return (i == j) ? 1 : 0;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  static <T>AnyVal<T> anySome(AnyVal<T> value){  return new AnyOptional<>(value,null);}  }
class C{  public boolean isSourcesModified(){  if (myInitialItems == null) {    return false;  }  if (getItems().size() != myInitialItems.size()) {    return true;  }  for (  Row row : getItems()) {    if (row.isModified()) {      return true;    }    if (!myInitialItems.contains(row.mySource)) {      return true;    }  }  return false;}  }
class C{  public VideoEditQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  public String toString(){  return "Timbre Distribution";}  }
class C{  public TypeVariableBV typeVariable(SootClass sootClass){  return typeVariable(hierarchy.typeNode(sootClass.getType()));}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  public CronTimer(DayOfWeek dayofweek,int hour,int minute,int sec){  cronExpression=sec + " " + minute+ " "+ hour+ " * * "+ dayofweek;}  }
class C{  public static void throwable(Throwable throwable){  log(Log.WARN,0,null,new ThrowableFormatter(),null,null,throwable);}  }
class C{  @Deployment public void testHistoricActivityEventDispatched(){  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("TestActivityEvents");    assertNotNull(processInstance);    for (int i=0; i < 2; i++) {      taskService.complete(taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult().getId());    }    List<ActivitiEvent> events=listener.getEventsReceived();    assertEquals(ActivitiEventType.HISTORIC_PROCESS_INSTANCE_CREATED,events.get(0).getType());    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(1).getType());    assertEquals("mainStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(1)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(2).getType());    assertEquals("mainStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(2)).getEntity()).getActivityId()));    assertNotNull("mainStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(2)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(3).getType());    assertEquals("subProcess",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(3)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(4).getType());    assertEquals("subProcessStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(4)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(5).getType());    assertEquals("subProcessStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(5)).getEntity()).getActivityId()));    assertNotNull("subProcessStart",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(5)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(6).getType());    assertEquals("a",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(6)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(7).getType());    assertEquals("a",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(7)).getEntity()).getActivityId()));    assertNotNull("a",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(7)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(8).getType());    assertEquals("b",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(8)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(9).getType());    assertEquals("b",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(9)).getEntity()).getActivityId()));    assertNotNull("b",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(9)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(10).getType());    assertEquals("subprocessEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(10)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(11).getType());    assertEquals("subprocessEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(11)).getEntity()).getActivityId()));    assertNotNull("subprocessEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(11)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(12).getType());    assertEquals("subProcess",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(12)).getEntity()).getActivityId()));    assertNotNull("subProcess",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(12)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_CREATED,events.get(13).getType());    assertEquals("mainEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(13)).getEntity()).getActivityId()));    assertEquals(ActivitiEventType.HISTORIC_ACTIVITY_INSTANCE_ENDED,events.get(14).getType());    assertEquals("mainEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(14)).getEntity()).getActivityId()));    assertNotNull("mainEnd",(((HistoricActivityInstance)((ActivitiEntityEvent)events.get(14)).getEntity()).getEndTime()));    assertEquals(ActivitiEventType.HISTORIC_PROCESS_INSTANCE_ENDED,events.get(15).getType());  }}  }
class C{  static public int encode_vX_vY(float vx,float vy){  float[] arc_mag=getArc(vx,vy);  int argb=encode_vA_vM(arc_mag[0],arc_mag[1]);  return argb;}  }
class C{  public FramePath(FramePath framePath,FrameDescriptor... frames){  this.frames=new ArrayList<>(framePath.getFrames());  this.frames.addAll(Arrays.asList(frames));}  }
class C{  @Override public void refresh(){  try {    updateOperation.run();  } catch (  final CanNotOpenStreamException e) {    LOG.warn(String.format(MSG_URL_NOT_READABLE,e.getLocalizedMessage()));  }catch (  final IllegalArgumentException e) {    LOG.warn(MSG_FAULTY_CONTENT + " " + e.getLocalizedMessage());  }catch (  final RuntimeException e) {    LOG.warn(MSG_FAULTY_CONTENT,e);  }}  }
class C{  public ExecuteCodeQuery code(Actor actor,String code){  return new ExecuteCodeQuery(getClient(),actor,code);}  }
class C{  private void skipPastNewline(){  while (!builder.eof()) {    if (matches(ProjectViewTokenType.NEWLINE)) {      return;    }    builder.advanceLexer();  }}  }
class C{  public static <T extends RealFieldElement<T>>T distanceSq(final FieldVector3D<T> v1,final Vector3D v2){  return v1.distanceSq(v2);}  }
class C{  public int context(){  String s=soot.PhaseOptions.getString(options,"context");  if (s.equalsIgnoreCase("insens"))   return context_insens;  if (s.equalsIgnoreCase("1cfa"))   return context_1cfa;  if (s.equalsIgnoreCase("kcfa"))   return context_kcfa;  if (s.equalsIgnoreCase("objsens"))   return context_objsens;  if (s.equalsIgnoreCase("kobjsens"))   return context_kobjsens;  if (s.equalsIgnoreCase("uniqkobjsens"))   return context_uniqkobjsens;  if (s.equalsIgnoreCase("threadkobjsens"))   return context_threadkobjsens;  throw new RuntimeException("Invalid value " + s + " of phase option context");}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(productId,amount,quantity,unitPrice,features,attributes,prodCatalogId,itemType,dispatcher,triggerExternalOps,triggerPriceRules,Boolean.FALSE,Boolean.FALSE);}  }
class C{  public void notifyUnlockInput(){  if (locked) {synchronized (directorListeners) {      IDirectorListener[] listeners=directorListeners.toArray(new IDirectorListener[directorListeners.size()]);      for (      IDirectorListener directorListener : listeners) {        if (directorListener != this)         directorListener.unlockUserInput();      }    }  }  locked=false;}  }
class C{  public static float ceil(float fValue){  return (float)Math.ceil(fValue);}  }
class C{  public static long countSlicedIntervals(Collection<Interval> rawIntervals,Granularity grain){  Iterable<Interval> requestIterable=grain.intervalsIterable(rawIntervals);  return StreamSupport.stream(requestIterable.spliterator(),false).count();}  }
class C{  public static void picture(double x,double y,String filename,double degrees){  Image image=getImage(filename);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + filename + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public static Matrix4 tangoPoseToMatrix(TangoPoseData tangoPose){  Vector3 v=new Vector3(tangoPose.translation[0],tangoPose.translation[1],tangoPose.translation[2]);  Quaternion q=new Quaternion(tangoPose.rotation[3],tangoPose.rotation[0],tangoPose.rotation[1],tangoPose.rotation[2]);  q.conjugate();  Matrix4 m=new Matrix4();  m.setAll(v,new Vector3(1,1,1),q);  return m;}  }
class C{  public static String shortenDbName(String dbName,int desiredLength){  StringBuilder dbBuf=new StringBuilder(dbName);  if (dbBuf.length() > desiredLength) {    for (int i=dbBuf.length() - 1; i > 0; i--) {      if (dbBuf.charAt(i - 1) == '_') {        continue;      }      char curChar=dbBuf.charAt(i);      if (vowelBag.indexOf(curChar) > 0) {        dbBuf.deleteCharAt(i);      }    }  }  while (dbBuf.indexOf("__") > 0) {    dbBuf.deleteCharAt(dbBuf.indexOf("__"));  }  while (dbBuf.length() > desiredLength) {    boolean removedChars=false;    int usIndex=dbBuf.lastIndexOf("_");    while (usIndex > 0 && dbBuf.length() > desiredLength) {      int prevUsIndex=dbBuf.lastIndexOf("_",usIndex - 1);      if (prevUsIndex < 0 && usIndex < 4) {        break;      }      if (prevUsIndex >= 0 && (usIndex - prevUsIndex) <= 4) {        usIndex=prevUsIndex;        continue;      }      dbBuf.deleteCharAt(usIndex - 2);      removedChars=true;      if (usIndex > 2) {        usIndex=dbBuf.lastIndexOf("_",usIndex - 2);      } else {        break;      }    }    if (dbBuf.length() > desiredLength) {      int removeIndex=dbBuf.length() - 1;      int prevRemoveIndex=dbBuf.lastIndexOf("_",removeIndex - 1);      if (prevRemoveIndex < 0 || (removeIndex - prevRemoveIndex) >= 3) {        dbBuf.deleteCharAt(removeIndex - 1);        removedChars=true;      }    }    while (dbBuf.indexOf("__") > 0) {      dbBuf.deleteCharAt(dbBuf.indexOf("__"));      removedChars=true;    }    if (!removedChars) {      break;    }  }  while (dbBuf.indexOf("__") > 0) {    dbBuf.deleteCharAt(dbBuf.indexOf("__"));  }  while (dbBuf.length() > desiredLength) {    int firstUs=dbBuf.indexOf("_");    if (firstUs > 0) {      int nextUs=dbBuf.indexOf("_",firstUs + 1);      if (nextUs > 0) {        dbBuf.delete(firstUs,nextUs);      }    }  }  return dbBuf.toString();}  }
class C{  public SingularMatrixException(){  super(org.hipparchus.migration.exception.util.LocalizedFormats.SINGULAR_MATRIX);}  }
class C{  protected PsiFile createPsiFile(String filePath){  return getPsiFile(testFixture.getTempDirFixture().createFile(filePath));}  }
class C{  public <T extends Spatial>List<T> descendantMatches(String nameRegex){  return descendantMatches(null,nameRegex);}  }
class C{  public int compareTo(Entry e){  if (this == e)   return 0;  if (renew < e.renew || (renew == e.renew && id < e.id))   return 1;  return -1;}  }
class C{  public static boolean isDouble(String s,boolean allowNegative,boolean allowPositive,int minDecimal,int maxDecimal){  if (isEmpty(s))   return defaultEmptyOK;  try {    double temp=Double.parseDouble(s);    if (!allowNegative && temp < 0)     return false;    if (!allowPositive && temp > 0)     return false;    int decimalPoint=s.indexOf(".");    if (decimalPoint == -1) {      if (minDecimal > 0)       return false;      return true;    }    int numDecimals=s.length() - decimalPoint - 1;    if (minDecimal >= 0 && numDecimals < minDecimal)     return false;    if (maxDecimal >= 0 && numDecimals > maxDecimal)     return false;    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_table\"";  db.execSQL(sql);}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public boolean add(Node n){  if (oldSet.contains(n))   return false;  return newSet.add(n);}  }
class C{  @Override protected void onStop(){  super.onStop();  LOG.d(TAG,"Stopped the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStop();}  }
class C{  public void write(IOutputWriter writer,Map<Integer,ListOfLongs> classId2locations) throws IOException {  writer.writeInt(map2Weight.size());  for (  Object key : map2Weight.keySet()) {    writer.writeInt((Integer)key);    final Integer sum=map2Weight.get(key);    writer.writeInt(sum);    if (classId2locations != null) {      final ListOfLongs list=classId2locations.get(key);      writer.writeInt(list.size());      for (int i=0; i < list.size(); i++)       writer.writeLong(list.get(i));    } else     writer.writeInt(0);  }}  }
class C{  public static double log2(double a){  if (a == 0)   return 0.0;  return Math.log(a) / log2;}  }
