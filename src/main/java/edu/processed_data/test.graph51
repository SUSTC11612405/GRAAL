class C{  private void createProjectDataDirectoryModule(ModuleEditor moduleEditor,File projectDataDirectory,ModuleType moduleType){  Module module=moduleEditor.createModule(".project-data-dir",moduleType);  ModifiableRootModel modifiableModel=moduleEditor.editModule(module);  ContentEntry rootContentEntry=modifiableModel.addContentEntry(pathToUrl(projectDataDirectory));  rootContentEntry.addExcludeFolder(pathToUrl(new File(projectDataDirectory,".idea")));  rootContentEntry.addExcludeFolder(pathToUrl(BlazeDataStorage.getProjectDataDir(importSettings)));}  }
class C{  public IntFileGetterPagedMemory(File file) throws IOException {  this.file=file;  limit=file.length() / 4;  System.err.println("Opening file: " + file);  raf=new RandomAccessFile(file,"r");  data=new int[(int)((limit >>> PAGE_BITS)) + 1][];  length0=(int)(Math.min(limit,1 << PAGE_BITS));}  }
class C{  public WallGetByIdQuery(VkApiClient client,UserActor actor,List<String> posts){  super(client,"wall.getById",Utils.buildParametrizedType(List.class,WallpostFull.class));  accessToken(actor.getAccessToken());  posts(posts);}  }
class C{  @NotNull public IdentificationSet identifyPersonInGroup(@NotNull String personGroupId,@NotNull String imageUrl){  Face singleFace=findSingleFace(imageUrl);  return identifyPersonInGroup(personGroupId,singleFace);}  }
class C{  public boolean isArrayElement(String element){  return arrayElements.contains(element);}  }
class C{  public void restart(){  mInit=false;  launchInspector(WXEnvironment.sRemoteDebugMode);  if (mWXBridge == null) {    mWXBridge=new WXBridge();  }}  }
class C{  public void unexport(boolean force){  if (m_thisRemoteRef != null)   try {    if (force)     m_exporter.unexport(true); else {      long endTime=SystemTime.timeMillis() + MAX_UNEXPORT_DELAY;      boolean unexported=false;      while (!unexported && (SystemTime.timeMillis() < endTime)) {        unexported=m_exporter.unexport(false);        if (!unexported)         Thread.yield();      }      if (!unexported)       m_exporter.unexport(true);    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,ex.getMessage(),ex);    }  }}  }
class C{  public static List<String> makeFeatureIdListFromPrefixed(Map<String,Object> parameters){  List<String> featureIdList=FastList.newInstance();  if (parameters == null)   return featureIdList;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("SEARCH_FEAT")) {      String productFeatureId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureId)) {        featureIdList.add(productFeatureId);      }    }  }  return featureIdList;}  }
class C{  @Override public boolean equals(Object object){  if (object instanceof QName) {    QName qname=(QName)object;    return uri == qname.uri && localpart == qname.localpart;  }  return false;}  }
class C{  private void validateDictionaryMetadata(CarbonDictionaryColumnMetaChunk actual,CarbonDictionaryColumnMetaChunk expected){  assertTrue(expected.getMin_surrogate_key() == actual.getMin_surrogate_key());  assertTrue(expected.getMax_surrogate_key() == actual.getMax_surrogate_key());  assertTrue(expected.getStart_offset() == actual.getStart_offset());  assertTrue(expected.getEnd_offset() == actual.getEnd_offset());  assertTrue(expected.getChunk_count() == actual.getChunk_count());}  }
class C{  public byte[] encode(Record record){  return null;}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public AudioSearchQuery lyrics(Boolean value){  return unsafeParam("lyrics",value);}  }
class C{  public Components(Map<String,ComponentDescription> descriptions){  this.descriptions=descriptions;}  }
class C{  public LivingEvent(EntityLivingBase living){  this.living=living;}  }
class C{  private static double mglsadff(double x,double b[],int m,double a,double d[],int d_offset){  double y=d[d_offset + 0] * b[1];  for (int i=1; i < m; i++) {    d[d_offset + i]+=a * (d[d_offset + i + 1] - d[d_offset + i - 1]);    y+=d[d_offset + i] * b[i + 1];  }  x-=y;  for (int i=m; i > 0; i--)   d[d_offset + i]=d[d_offset + i - 1];  d[d_offset + 0]=a * d[d_offset + 0] + (1 - a * a) * x;  return x;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LEVEL_LIMIT_FREE_TIME(String value1){  return new SM_SYSTEM_MESSAGE(1400036,value1);}  }
class C{  public ValidatedInfo validateWithInfo(String content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {  if (context == null)   context=fEmptyContext;  if (validatedInfo == null)   validatedInfo=new ValidatedInfo(); else   validatedInfo.memberType=null;  boolean needNormalize=context == null || context.needToNormalize();  getActualValue(content,context,validatedInfo,needNormalize);  validate(context,validatedInfo);  return validatedInfo;}  }
class C{  public static int nullSafeHashCode(float[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  private static Bitmap rotateBitmapInt(Bitmap bitmap,int degrees){  if (degrees > 0) {    Matrix matrix=new Matrix();    matrix.setRotate(degrees);    Bitmap newBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,false);    if (newBitmap != bitmap) {      bitmap.recycle();    }    return newBitmap;  } else {    return bitmap;  }}  }
class C{  public static void stopLocalZkServer(){  try {    stopLocalZkServer(true);  } catch (  Exception e) {    LOGGER.error("Failed to stop ZK: " + e);  }}  }
class C{  public double chiSquareTest(final long[][] counts) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkArray(counts);  double df=((double)counts.length - 1) * ((double)counts[0].length - 1);  final ChiSquaredDistribution distribution=new ChiSquaredDistribution(df);  return 1 - distribution.cumulativeProbability(chiSquare(counts));}  }
class C{  public boolean isRelativeValueDeadband(final Number currentValue,final Number newValue,final float valueDeadband){  this.equipmentLogger.trace("entering isRelativeValueDeadband()..");  boolean isRelativeValueDeadband=false;  if (currentValue == null || newValue == null) {    isRelativeValueDeadband=false;  } else   if (currentValue.equals(newValue)) {    isRelativeValueDeadband=true;  } else {    double curDoubleValue=currentValue.doubleValue();    if (curDoubleValue != 0) {      double maxDiff=curDoubleValue * valueDeadband * PERCENTAGE_FACTOR;      double realDiff=Math.abs(curDoubleValue - newValue.doubleValue());      isRelativeValueDeadband=realDiff < maxDiff;    }  }  this.equipmentLogger.trace("leaving isRelativeValueDeadband().. Result: " + isRelativeValueDeadband);  return isRelativeValueDeadband;}  }
class C{  public Object clone(){  return new FakeJimpleLocal(getName(),getType(),realLocal,info);}  }
class C{  public MarketCreateCommentQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  public double[] levelZeroData(){  List<Buffer> levelZeroBuffers=bufferMap.get(0);  int length=0;  for (  Buffer buffer : levelZeroBuffers) {    if (!buffer.hasCapacity()) {      length+=buffer.size;    } else {      length+=buffer.next;    }  }  int pos=0;  int currLen;  final double[] out=new double[length];  for (  Buffer buffer : levelZeroBuffers) {    if (!buffer.hasCapacity()) {      currLen=buffer.size;    } else {      currLen=buffer.next;    }    System.arraycopy(buffer.data,0,out,pos,currLen);    pos+=currLen;  }  return out;}  }
class C{  public UsersSearchQuery fromList(String... value){  return unsafeParam("from_list",value);}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  try {    return DAAParser.isMeganizedDAAFile((new File(directory,fileName)).getPath(),false);  } catch (  IOException e) {    return false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200584,skillcaster,skillname);}  }
class C{  private CarbonIterator<BatchResult> executeBlockList(List<TableBlockInfo> blockList) throws QueryExecutionException {  queryModel.setTableBlockInfos(blockList);  this.queryExecutor=QueryExecutorFactory.getQueryExecutor();  CarbonIterator<BatchResult> iter=null;  try {    iter=queryExecutor.execute(queryModel);  } catch (  QueryExecutionException e) {    LOGGER.error(e.getMessage());    throw e;  }  return iter;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public ReversedLinesFileReader(final File file,final int blockSize,final String encoding) throws IOException {  this(file,blockSize,Charsets.toCharset(encoding));}  }
class C{  protected ShoppingCartItemGroup(long groupNumber,String groupName,ShoppingCartItemGroup parentGroup){  this(UtilFormatOut.formatPaddedNumber(groupNumber,2),groupName,parentGroup);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200560,skilltarget,skillname);}  }
class C{  public FaveAddGroupQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"fave.addGroup",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public MultiwayPoolBuilder<K,R> expireAfterAccess(long duration,TimeUnit unit){  checkState(expireAfterAccessNanos == UNSET_INT,"expireAfterAccess was already set to %s ns",expireAfterAccessNanos);  checkArgument(duration >= 0,"duration cannot be negative: %s %s",duration,unit);  expireAfterAccessNanos=unit.toNanos(duration);  return this;}  }
class C{  private void onFriendsSelected(int resultCode,Intent data){  if (resultCode == GamesActivityResultCodes.RESULT_RECONNECT_REQUIRED) {    activity.getGameServicesHelper().onSignedOutFromOutside();    if (future != null) {      Gdx.app.postRunnable(future);      future=null;    }    return;  }  if (resultCode != Activity.RESULT_OK) {    if (future != null) {      Gdx.app.postRunnable(future);      future=null;    }    return;  }  if (controller != null) {    throw new IllegalStateException("tried to create new game, but there was already another!");  }  final ArrayList<String> invitees=data.getStringArrayListExtra(Games.EXTRA_PLAYER_IDS);  controller=createController();  Games.RealTimeMultiplayer.create(client,RoomConfig.builder(controller).addPlayersToInvite(invitees).setRoomStatusUpdateListener(controller).setMessageReceivedListener(controller).setVariant(variant).build());}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public CM_RESTORE_CHARACTER(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public static void init(PresenterStorage storage){  mInstance=new PresenterFactory(storage);}  }
class C{  public static void cleanupDir(String dirPath,List<String> childdirs) throws IOException {  if (childdirs == null || childdirs.size() == 0)   FileUtils.cleanDirectory(new File(dirPath)); else {    for (    String cdir : childdirs)     FileUtils.cleanDirectory(new File(dirPath + "/" + cdir));  }}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {}  }
class C{  public Response doGet(String url,Object jsonBody){  String formJSON=getJsonString(jsonBody);  LOGGER.info(curlCallString("GET",url,formJSON));  long startTime=System.currentTimeMillis();  Response response;  if (formJSON != null) {    response=given().spec(this.requestSpec).body(formJSON).get(url);  } else {    response=given().spec(this.requestSpec).get(url);  }  long endTime=System.currentTimeMillis();  long duration=(endTime - startTime);  LOGGER.info("Duration for GET " + url + ": "+ duration);  return response;}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == null) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  private void displayResult(){  String result="";  if (rootNode instanceof ExpressionNode) {    overallExpression=addExpression((ExpressionNode)rootNode);    if (overallExpression != null) {      result=overallExpression.toString();    }  } else   if (rootNode instanceof FilterNode) {    overallFilter=addFilter((FilterNode)rootNode);    try {      result=CQL.toCQL(overallFilter);    } catch (    Exception e) {    }  }  textArea.setText(result);}  }
class C{  @Override public boolean isArrayItem(){  return (this.fieldIndex > -1);}  }
class C{  private void romanToWords(String romanString){  String punctuation=(String)tokenItem.findFeature("p.punc");  if (punctuation.equals("")) {    String n=String.valueOf(NumberExpander.expandRoman(romanString));    if (kingLike(tokenItem)) {      wordRelation.addWord("the");      NumberExpander.expandOrdinal(n,wordRelation);    } else     if (sectionLike(tokenItem)) {      NumberExpander.expandNumber(n,wordRelation);    } else {      NumberExpander.expandLetters(romanString,wordRelation);    }  } else {    NumberExpander.expandLetters(romanString,wordRelation);  }}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("set showTriPlot=" + (!isSelected()) + ";");}  }
class C{  private String buildSql(EventSearchParams params,List<OrganisationUnit> organisationUnits){  String sql="select * from (";  sql+=getEventSelectQuery(params,organisationUnits);  sql+=getEventPagingQuery(params);  sql+=") as event left join (";  if (params.isIncludeAttributes()) {    sql+=getAttributeValueQuery();    sql+=") as att on event.tei_id=att.pav_id left join (";  }  sql+=getDataValueQuery();  sql+=") as dv on event.psi_id=dv.pdv_id left join (";  sql+=getCommentQuery();  sql+=") as cm on event.psi_id=cm.psic_id ";  sql+=getOrderQuery(params.getOrders());  return sql;}  }
class C{  public boolean contains(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  return fastContains(p);}  }
class C{  public AnchorUpdateControl(Layout[] layout,String action,boolean overItem){  m_layouts=(Layout[])layout.clone();  m_action=action;  m_anchorOverItem=overItem;}  }
class C{  public static void equalsTag(final Tag tag1,final Tag tag2){  assertEquals(tag1.getId(),tag2.getId());  assertEquals(tag1.getName(),tag2.getName());  assertEquals(tag1.getDescription(),tag2.getDescription());  assertEquals(tag1.getDataType(),tag2.getDataType());  assertEquals(tag1.getMode(),tag2.getMode());  assertEquals(tag1.getAlarmIds(),tag2.getAlarmIds());  assertEquals(tag1.getRuleIds(),tag2.getRuleIds());  assertEquals(tag1.getTimestamp(),tag2.getTimestamp());  assertEquals(tag1.getDataTagQuality(),tag2.getDataTagQuality());  assertEquals(tag1.getDipAddress(),tag2.getDipAddress());  assertEquals(tag1.getJapcAddress(),tag2.getJapcAddress());  assertEquals(tag1.getValueDictionary().toXML(),tag2.getValueDictionary().toXML());  assertEquals(tag1.getValue(),tag2.getValue());  assertEquals(tag1.getUnit(),tag2.getUnit());  assertEquals(tag1.getValueDescription(),tag2.getValueDescription());  assertEquals(tag1.isExistingTag(),tag2.isExistingTag());}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  viewer.setVisible(false);}  }
class C{  public EncryptQuery(QueryInfo queryInfo,List<String> selectors,Paillier paillier){  this.queryInfo=queryInfo;  this.selectors=selectors;  this.paillier=paillier;}  }
class C{  private boolean allowedAsRequestResponseInCodeGen(WellKnownType wkt){  return wkt.allowedAsRequestResponseInCodeGen();}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  public void wipe(){  byte[] zeros=new byte[Page.pageSize];  this.writeBytes(0,Page.pageSize,zeros);}  }
class C{  public void addDeleted(boolean deleted){  query.append(" +deleted:" + deleted);}  }
class C{  public SecurityContext(UserDetails userDetails,AuthenticationToken authenticationToken){  this.userDetails=userDetails;  this.authenticationToken=authenticationToken;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public static Bitmap rotateImage(Bitmap source,float angle){  Bitmap retVal;  Matrix matrix=new Matrix();  matrix.postRotate(angle);  retVal=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),matrix,true);  return retVal;}  }
class C{  protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){  return callFlowFunction.computeTargets(d2);}  }
class C{  public SiteAdminGrid waitForLoaderNotPresent(){  bobcatWait.withTimeout(Timeouts.BIG).until(CommonExpectedConditions.elementNotPresentOrVisible(LOADER_LOCATOR));  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_RandomMoveLoc_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200399,skillname);}  }
class C{  public Boolean isClientKeyPEM(){  return clientKeyPEM;}  }
class C{  private int checkSpace(boolean writeCheck){  int s;  if (writeCheck) {    if (wp > rp) {      s=rp - wp + size - 1;    } else     if (wp < rp) {      s=rp - wp - 1;    } else     s=size - 1;  } else {    if (wp > rp) {      s=wp - rp;    } else     if (wp < rp) {      s=wp - rp + size;    } else {      s=0;    }  }  return s;}  }
class C{  public int level(){  if (isLeaf()) {    return MAX_LEVEL;  }  int x=((int)id);  int level=-1;  if (x != 0) {    level+=16;  } else {    x=(int)(id >>> 32);  }  x&=-x;  if ((x & 0x00005555) != 0) {    level+=8;  }  if ((x & 0x00550055) != 0) {    level+=4;  }  if ((x & 0x05050505) != 0) {    level+=2;  }  if ((x & 0x11111111) != 0) {    level+=1;  }  return level;}  }
class C{  public TestMetricLoader(int sketchSize){  this.sketchSize=sketchSize;}  }
class C{  @Override public BigFraction negate(){  return new BigFraction(numerator.negate(),denominator);}  }
class C{  private void initStepContentsContainer(){  myContents.setOpaque(false);  GridBagConstraints c=new GridBagConstraints();  c.gridx=1;  c.gridy=1;  c.weightx=1;  c.fill=GridBagConstraints.HORIZONTAL;  c.anchor=GridBagConstraints.NORTHWEST;  c.insets=new Insets(0,0,0,5);  add(myContents,c);}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  private void repin(){  if (logger.isLoggable(Level.WARNING))   logger.warning("Tx." + txNum + " is re-pinning all buffers");  try {    List<BlockId> blksToBeRepinned=new LinkedList<BlockId>();    Map<BlockId,Integer> pinCounts=new HashMap<BlockId,Integer>();    List<Buffer> buffersToBeUnpinned=new LinkedList<Buffer>();    for (    Entry<BlockId,PinnedBuffer> entry : pinnedBuffers.entrySet()) {      blksToBeRepinned.add(entry.getKey());      pinCounts.put(entry.getKey(),entry.getValue().pinnedCount);      buffersToBeUnpinned.add(entry.getValue().buffer);    }    for (    Buffer buf : buffersToBeUnpinned)     unpin(buf);synchronized (bufferPool) {      bufferPool.wait(MAX_TIME);    }    for (    BlockId blk : blksToBeRepinned)     pin(blk);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  private K lowestKey(){  FastConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public ClipboardTokenHandler(Context context){  initializeTokensFromSettings();  this.context=context;}  }
class C{  public WriteEntrySpaceOperationResult(){}  }
class C{  private boolean isActionListener(String name){  return name.equals("onClick");}  }
class C{  public static ContextSet empty(){  return new ContextSet();}  }
class C{  public IMethod findDeclaringMethod(IMethod overriding,boolean testVisibility) throws JavaModelException {  IMethod result=null;  IMethod overridden=findOverriddenMethod(overriding,testVisibility);  while (overridden != null) {    result=overridden;    overridden=findOverriddenMethod(result,testVisibility);  }  return result;}  }
class C{  public static ScheduledExecutorService createScheduler(){  final ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(1,new DaemonThreadFactory(DEFAULT_SCHEDULER_NAME));  SCHEDULERS.add(scheduler);  return scheduler;}  }
class C{  protected DocsEditQuery docId(int value){  return unsafeParam("doc_id",value);}  }
class C{  public static Float stringToFloat(String val){  return Float.valueOf(trim(val));}  }
class C{  public Iterator iterator(){  return name2index.keySet().iterator();}  }
class C{  public ColumnQuery addCondition(ColumnCondition condition) throws NullPointerException {  this.conditions.add(Objects.requireNonNull(condition,"condition is required"));  return this;}  }
class C{  public Object[] toArray(Object[] a){  return elementVector.toArray(a);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public boolean isNull(){  return myObject == null;}  }
class C{  private byte[] writePkgUrl(byte[] stage,String url) throws UnsupportedEncodingException {  byte[] pattern=new byte[256];  Arrays.fill(pattern,(byte)0x78);  List a=Arrays.asList(ArrayUtils.toObject(stage));  List b=Arrays.asList(ArrayUtils.toObject(pattern));  int idx=Collections.indexOfSubList(a,b);  byte[] urlArray=url.getBytes("UTF-8");  System.arraycopy(urlArray,0,stage,idx,urlArray.length);  Arrays.fill(stage,idx + urlArray.length,idx + 256,(byte)0x0);  return stage;}  }
class C{  private void writeHeaderPage(){  int numBytesWritten=0;  Page headerPage=this.allocator.fetchPage(this.allocator.allocPage());  assert (0 == headerPage.getPageNum());  List<String> fieldNames=this.schema.getFieldNames();  headerPage.writeBytes(numBytesWritten,4,ByteBuffer.allocate(4).putInt(fieldNames.size()).array());  numBytesWritten+=4;  for (  String fieldName : fieldNames) {    headerPage.writeBytes(numBytesWritten,4,ByteBuffer.allocate(4).putInt(fieldName.length()).array());    numBytesWritten+=4;  }  for (  String fieldName : fieldNames) {    headerPage.writeBytes(numBytesWritten,fieldName.length(),fieldName.getBytes(Charset.forName("UTF-8")));    numBytesWritten+=fieldName.length();  }  for (  DataType field : this.schema.getFieldTypes()) {    headerPage.writeBytes(numBytesWritten,4,ByteBuffer.allocate(4).putInt(field.type().ordinal()).array());    numBytesWritten+=4;    if (field.type().equals(DataType.Types.STRING)) {      headerPage.writeBytes(numBytesWritten,4,ByteBuffer.allocate(4).putInt(field.getSize()).array());      numBytesWritten+=4;    }  }}  }
class C{  public TemplateParameterContextProvider(ConfigXmlProvider configProvider,ConversionXmlProvider conversionProvider,File workingDir){  this.configProvider=configProvider;  this.conversionProvider=conversionProvider;  this.workingDir=workingDir;  initContexts();}  }
class C{  private void processWriteTaskSubmitList(List<Future<Void>> taskList) throws CarbonDataWriterException {  for (int i=0; i < taskList.size(); i++) {    try {      taskList.get(i).get();    } catch (    InterruptedException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }catch (    ExecutionException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }  }}  }
class C{  public static long tick2microsecond(Sequence seq,long tick,TempoCache cache){  if (seq.getDivisionType() != Sequence.PPQ) {    double seconds=((double)tick / (double)(seq.getDivisionType() * seq.getResolution()));    return (long)(1000000 * seconds);  }  if (cache == null) {    cache=new TempoCache(seq);  }  int resolution=seq.getResolution();  long[] ticks=cache.ticks;  int[] tempos=cache.tempos;  int cacheCount=tempos.length;  int snapshotIndex=cache.snapshotIndex;  int snapshotMicro=cache.snapshotMicro;  long us=0;  if (snapshotIndex <= 0 || snapshotIndex >= cacheCount || ticks[snapshotIndex] > tick) {    snapshotMicro=0;    snapshotIndex=0;  }  if (cacheCount > 0) {    int i=snapshotIndex + 1;    while (i < cacheCount && ticks[i] <= tick) {      snapshotMicro+=ticks2microsec(ticks[i] - ticks[i - 1],tempos[i - 1],resolution);      snapshotIndex=i;      i++;    }    us=snapshotMicro + ticks2microsec(tick - ticks[snapshotIndex],tempos[snapshotIndex],resolution);  }  cache.snapshotIndex=snapshotIndex;  cache.snapshotMicro=snapshotMicro;  return us;}  }
class C{  @Nullable public static File findPlatformSources(@NotNull IAndroidTarget target){  String path=target.getPath(IAndroidTarget.SOURCES);  if (path != null) {    File platformSource=new File(path);    if (platformSource.isDirectory()) {      return platformSource;    }  }  return null;}  }
class C{  public static final void fillRectangleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey){  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(sx,sy);  gl.glVertex2d(ex,sy);  gl.glVertex2d(ex,ey);  gl.glVertex2d(sx,ey);  gl.glEnd();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParClassDecl fullCopy(){  ParClassDecl tree=(ParClassDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 3:        tree.children[i]=new Opt();      continue;case 4:case 5:    tree.children[i]=new List();  continue;}ASTNode child=(ASTNode)children[i];if (child != null) {child=child.fullCopy();tree.setChild(child,i);}}}return tree;}  }
class C{  @NotNull public NlConfigurationToolbarFixture requireOrientation(@NotNull String name){  Wait.seconds(30).expecting("configuration to be updated").until(null);  return this;}  }
class C{  private void loadOneToManyObjects(FieldMetaData fmd,OpenJPAStateManager sm,Object fieldValue){  final Object collection=sm.newProxy(fmd.getIndex());  if (fieldValue != null) {    final ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();    final ClassMetaData cmd=fmd.getElement().getDeclaredTypeMetaData();    final BitSet exclude=new BitSet(cmd.getFields().length);    for (    Object item : (Collection<?>)fieldValue) {      final IEntryPacket entry=proxy.getDirectProxy().getTypeManager().getEntryPacketFromObject(item,ObjectType.POJO);      final Object oid=ApplicationIds.fromPKValues(new Object[]{entry.getID()},cmd);      final Object managedObject=getContext().find(oid,null,exclude,entry,0);      _relationsManager.setOwnerStateManagerForPersistentInstance(managedObject,sm,fmd);      ((Collection<Object>)collection).add(managedObject);    }  }  sm.storeObject(fmd.getIndex(),collection);}  }
class C{  public int read() throws IOException {  return ins.read();}  }
class C{  public void clear(int capacity){  _data=new short[capacity];  _pos=0;}  }
class C{  protected void drawXAxis(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));  gc.setColor(Color.BLACK);  int x=5;  int y=getHeight() - bottomMargin + 25;  gc.drawString(getChartData().getClassesLabel(),x,y);}  }
class C{  @Override protected void onReceiveResult(int resultCode,Bundle resultData){  mAddressOutput=resultData.getString(AppUtils.LocationConstants.RESULT_DATA_KEY);  mAreaOutput=resultData.getString(AppUtils.LocationConstants.LOCATION_DATA_AREA);  mCityOutput=resultData.getString(AppUtils.LocationConstants.LOCATION_DATA_CITY);  mStateOutput=resultData.getString(AppUtils.LocationConstants.LOCATION_DATA_STREET);  displayAddressOutput();  if (resultCode == AppUtils.LocationConstants.SUCCESS_RESULT) {  }}  }
class C{  private void createIf2(polyglot.ast.If ifExpr){  soot.jimple.NopStmt endTgt=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.NopStmt brchTgt=soot.jimple.Jimple.v().newNopStmt();  polyglot.ast.Expr condition=ifExpr.cond();  createBranchingExpr(condition,brchTgt,false);  polyglot.ast.Stmt consequence=ifExpr.consequent();  createStmt(consequence);  soot.jimple.Stmt goto1=soot.jimple.Jimple.v().newGotoStmt(endTgt);  body.getUnits().add(goto1);  body.getUnits().add(brchTgt);  polyglot.ast.Stmt alternative=ifExpr.alternative();  if (alternative != null) {    createStmt(alternative);  }  body.getUnits().add(endTgt);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public PlayerLevelUpRewards(final LevelUpRewardsResponse response){  this.rewards=response.getItemsAwardedList();  this.unlockedItems=response.getItemsUnlockedList();  this.status=(rewards.isEmpty() ? Status.ALREADY_ACCEPTED : Status.NEW);}  }
class C{  public static void print(long x){  out.print(x);  out.flush();}  }
class C{  protected RealMatrix permuteRows(RealMatrix matrix,int[] permutation){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  if (matrix.getRowDimension() != permutation.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,matrix.getRowDimension(),permutation.length);  }  int n=matrix.getRowDimension();  int m=matrix.getColumnDimension();  double out[][]=new double[m][n];  for (int i=0; i < n; i++) {    for (int j=0; j < m; j++) {      out[i][j]=matrix.getEntry(permutation[i],j);    }  }  return new Array2DRowRealMatrix(out);}  }
class C{  public void requestAddNodesStart(int inclusionMode){  if (exclusion == true || inclusion == true) {    logger.debug("ZWave exclusion already in progress - aborted");    return;  }  logger.debug("ZWave controller start inclusion - mode {}",inclusionMode);  if (inclusionMode == 2 && hasApiCapability(SerialMessageClass.ExploreRequestInclusion) == false) {    inclusionMode=1;  }  boolean highPower;  boolean networkWide;switch (inclusionMode) {case 0:    highPower=false;  networkWide=false;break;case 1:highPower=true;networkWide=false;break;default :highPower=true;networkWide=true;break;}enqueue(new AddNodeMessageClass().doRequestStart(highPower,networkWide));inclusion=true;startInclusionTimer();}  }
class C{  public static Map<String,Object> createPostalAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId="POSTAL_ADDRESS";  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  if (!partyId.equals("_NA_")) {    toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  }  GenericValue newAddr=delegator.makeValue("PostalAddress");  newAddr.set("contactMechId",newCmId);  newAddr.set("toName",context.get("toName"));  newAddr.set("attnName",context.get("attnName"));  newAddr.set("address1",context.get("address1"));  newAddr.set("address2",context.get("address2"));  newAddr.set("directions",context.get("directions"));  newAddr.set("city",context.get("city"));  newAddr.set("postalCode",context.get("postalCode"));  newAddr.set("postalCodeExt",context.get("postalCodeExt"));  newAddr.set("stateProvinceGeoId",context.get("stateProvinceGeoId"));  newAddr.set("countryGeoId",context.get("countryGeoId"));  newAddr.set("postalCodeGeoId",context.get("postalCodeGeoId"));  toBeStored.add(newAddr);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static BuildSystem defaultBuildSystem(){  return BuildSystemProvider.defaultBuildSystem().buildSystem();}  }
class C{  private static ECPoint decompressKey(BigInteger xBN,boolean yBit){  X9IntegerConverter x9=new X9IntegerConverter();  byte[] compEnc=x9.integerToBytes(xBN,1 + x9.getByteLength(CURVE.getCurve()));  compEnc[0]=(byte)(yBit ? 0x03 : 0x02);  return CURVE.getCurve().decodePoint(compEnc);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Deprecated public void add(Matrix3f mat){  m00+=mat.m00;  m01+=mat.m01;  m02+=mat.m02;  m10+=mat.m10;  m11+=mat.m11;  m12+=mat.m12;  m20+=mat.m20;  m21+=mat.m21;  m22+=mat.m22;}  }
class C{  public byte[] computeSignature(boolean forceRecompute){  if (this.signature != null) {    if (!forceRecompute) {      return this.signature;    }  }  MessageDigest digest;  try {    digest=MessageDigest.getInstance("SHA-1");  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError();  }  byte[] buffer=new byte[8192];  ByteBuffer data=this.data.duplicate();  data.limit(data.capacity());  data.position(SIGNATURE_OFFSET + SizeOf.SIGNATURE);  while (data.hasRemaining()) {    int count=Math.min(buffer.length,data.remaining());    data.get(buffer,0,count);    digest.update(buffer,0,count);  }  return (this.signature=digest.digest());}  }
class C{  public void removeMarkers(){  Markers.removeMarkers(pane,marker);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);  setHasOptionsMenu(true);}  }
class C{  public static Map<String,Object> updateShoppingListQuantitiesFromOrder(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  try {    List<GenericValue> orderItems=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();    for (    GenericValue orderItem : orderItems) {      String shoppingListId=orderItem.getString("shoppingListId");      String shoppingListItemSeqId=orderItem.getString("shoppingListItemSeqId");      if (UtilValidate.isNotEmpty(shoppingListId)) {        GenericValue shoppingListItem=EntityQuery.use(delegator).from("ShoppingListItem").where("shoppingListId",shoppingListId,"shoppingListItemSeqId",shoppingListItemSeqId).queryOne();        if (shoppingListItem != null) {          BigDecimal quantityPurchased=shoppingListItem.getBigDecimal("quantityPurchased");          BigDecimal orderQuantity=orderItem.getBigDecimal("quantity");          if (quantityPurchased != null) {            shoppingListItem.set("quantityPurchased",orderQuantity.add(quantityPurchased));          } else {            shoppingListItem.set("quantityPurchased",orderQuantity);          }          shoppingListItem.store();        }      }    }  } catch (  Exception e) {    Debug.logInfo("updateShoppingListQuantitiesFromOrder error:" + e.getMessage(),module);  }  return result;}  }
class C{  private void parseAndAdd(String line) throws IOException {  line=line.trim();  if (!(line.startsWith("(("))) {    throw new IOException("Invalid input line for CART: " + line);  }  if (Character.isLetter(line.charAt(2)) && !line.substring(2,6).equals("nan ")) {    openBrackets++;    StringTokenizer tokenizer=new StringTokenizer(line," ");    String feature=tokenizer.nextToken().substring(2);    String type=tokenizer.nextToken();    String value=tokenizer.nextToken();    value=value.substring(0,value.length() - 1);    if (value.startsWith("\"") && value.endsWith("\"") && value.length() > 2)     value=value.substring(1,value.length() - 1);    if (value.contains("\\\"")) {      value=value.replaceAll("\\\\\"","\"");    }    Node nextNode;    try {      if (type.equals("is")) {        if (featDef.isByteFeature(feature)) {          nextNode=new DecisionNode.BinaryByteDecisionNode(feature,value,featDef);        } else {          nextNode=new DecisionNode.BinaryShortDecisionNode(feature,value,featDef);        }      } else {        if (type.equals("<")) {          nextNode=new DecisionNode.BinaryFloatDecisionNode(feature,Float.parseFloat(value),featDef);        } else {          if (type.equals("isShortOf")) {            nextNode=new DecisionNode.ShortDecisionNode(feature,Integer.parseInt(value),featDef);          } else {            if (type.equals("isByteOf")) {              nextNode=new DecisionNode.ByteDecisionNode(feature,Integer.parseInt(value),featDef);            } else {              throw new IOException("Unknown node type : " + type);            }          }        }      }    } catch (    Exception exc) {      throw new RuntimeException("Cannot create decision node for cart line: '" + line + "'",exc);    }    if (lastNode != null) {      ((DecisionNode)lastNode).addDaughter(nextNode);    } else {      rootNode=nextNode;      nextNode.setIsRoot(true);    }    lastNode=nextNode;  } else {    Node nextNode=createLeafNode(line);    if (lastNode == null) {      rootNode=nextNode;      nextNode.setIsRoot(true);    } else {      ((DecisionNode)lastNode).addDaughter(nextNode);    }    StringTokenizer tokenizer=new StringTokenizer(line," ");    for (int i=0, numTokens=tokenizer.countTokens(); i < numTokens - 1; i++) {      tokenizer.nextToken();    }    String lastToken=tokenizer.nextToken();    int length=lastToken.length();    int index=lastToken.indexOf(')') + 2;    while (index < length) {      char nextChar=lastToken.charAt(index);      if (nextChar == ')') {        openBrackets--;        if (lastNode.isRoot()) {          if (index + 1 != length) {            throw new IOException("Too many closing brackets in line " + line);          }        } else {          nextNode=lastNode;          lastNode=lastNode.getMother();        }      } else {        throw new IOException("Expected closing bracket in line " + line + ", but found "+ nextChar);      }      index++;    }    if (nextNode != null) {      int nodeIndex=nextNode.getNodeIndex();    }  }}  }
class C{  public double calcTotalValues(){  Iterator iIter=hDistro.entrySet().iterator();  double dSum=0.0;  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    dSum+=(Double)(e.getValue());  }  return dSum;}  }
class C{  protected MessagesIsMessagesFromGroupAllowedQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static void main(String argv[]){  System.out.println(fVersion);}  }
class C{  @Nullable private static String validateProjectsForImport(@NotNull Map<String,VirtualFile> modules){  Set<String> projects=new TreeSet<String>();  for (  Map.Entry<String,VirtualFile> mapping : modules.entrySet()) {    if (mapping.getValue() == null) {      projects.add(mapping.getKey());    }  }  if (projects.isEmpty()) {    return null;  } else   if (projects.size() == 1) {    return String.format("Sources for module '%1$s' were not found",Iterables.getFirst(projects,null));  } else {    String projectsList=Joiner.on("', '").join(projects);    return String.format("Sources were not found for modules '%1$s'",projectsList);  }}  }
class C{  public Response doGet(String url){  return doGet(url,null);}  }
class C{  private void generateSortedAttribute2taxa2values(){  String[] taxa;  int[] values;  for (  String att_kind : attribute2taxa2value.keySet()) {    Map<String,Number> taxa2values=attribute2taxa2value.get(att_kind);    taxa=new String[taxa2values.size()];    values=new int[taxa2values.size()];    int i=0;    for (    String taxname : taxa2values.keySet()) {      taxa[i]=taxname;      values[i]=taxa2values.get(taxname).intValue();      i++;    }    doInsertionSort(taxa,values);    attribute2SortedTaxValPair.put(att_kind,new Pair<>(taxa,values));  }}  }
class C{  private static boolean findActivity(ArrayList<ItemApplication> apps,ComponentName component){  final int N=apps.size();  for (int i=0; i < N; i++) {    final ItemApplication info=apps.get(i);    if (info.mComponentName.equals(component)) {      return true;    }  }  return false;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void visit(Page page){  String url=page.getWebURL().getURL();  System.out.println("URL: " + url);  if (page.getParseData() instanceof HtmlParseData) {    HtmlParseData htmlParseData=(HtmlParseData)page.getParseData();    String text=htmlParseData.getText();    String html=htmlParseData.getHtml();  }}  }
class C{  public PhotosGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isGettingFull(){  return slotPosition(getNumRecords() + 2) >= Buffer.BUFFER_SIZE;}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  public DataShapeAction(String group,String field){  super(group,NO_SHAPE);  m_dataField=field;}  }
class C{  protected void drawLabels(Canvas c,float pos,MPPointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  final boolean centeringEnabled=mXAxis.isCenterAxisLabelsEnabled();  float[] positions=new float[mXAxis.mEntryCount << 1];  for (int i=0; i < positions.length; i+=2) {    if (centeringEnabled) {      positions[i]=mXAxis.mCenteredEntries[i >> 1];    } else {      positions[i]=mXAxis.mEntries[i >> 1];    }  }  mTrans.pointValuesToPixel(positions);  AxisValueFormatter formatter=mXAxis.getValueFormatter();  for (int i=0; i < mXAxis.mEntries.length; i++) {    float x=positions[i << 1];    if (!mViewPortHandler.isInBoundsX(x))     return;    String label=formatter.getFormattedValue(mXAxis.mEntries[i],mXAxis);    if (mXAxis.isAvoidFirstLastClippingEnabled()) {      if (i == 0) {        x+=mViewPortHandler.offsetLeft();      } else       if (i == mXAxis.mEntries.length - 1) {        x-=mViewPortHandler.offsetRight();      }    }    drawLabel(c,label,x,pos,anchor,labelRotationAngleDegrees);  }}  }
class C{  public ZoomingPanControl(boolean repaint){  this.repaint=repaint;}  }
class C{  private Map<Integer,Integer[]>[] sortBySample(int numberOfSamples,Map<Integer,Integer[]> taxonMap){  Map<Integer,Integer[]>[] sample2TaxonMap=new HashMap[numberOfSamples];  for (int i=0; i < numberOfSamples; i++) {    sample2TaxonMap[i]=new HashMap<>();  }  for (  Integer taxId : taxonMap.keySet()) {    Integer[] counts=taxonMap.get(taxId);    for (int i=0; i < numberOfSamples; i++) {      sample2TaxonMap[i].put(taxId,new Integer[]{counts[i]});    }  }  return sample2TaxonMap;}  }
class C{  public static Polygon createPolygonFromJson(JsonNode json){  JsonNode shell=json.get(0);  LinearRing sh=createLinearRingFromJson(shell);  LinearRing[] holes=null;  if (json.size() > 1) {    holes=new LinearRing[shell.size() - 1];    for (int i=1; i < shell.size(); i++) {      JsonNode hole=json.get(i);      if (hole != null && hole.size() > 0) {        holes[i]=createLinearRingFromJson(hole);      }    }  }  return FACTORY.createPolygon(sh,holes);}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public PolynomialCurveFitter withStartPoint(double[] newStart){  return new PolynomialCurveFitter(newStart.clone(),maxIter);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Override public Object asJavaVal(){  return val;}  }
class C{  public void release(MesosResource mesosResource){  if (mesosResource.isAtomic()) {    releaseAtomicResource(mesosResource);    return;  } else {    releaseMergedResource(mesosResource);    return;  }}  }
class C{  public void loadDataStringFromFile(String sFilename,boolean clearCurrentData){  loadDataStringFromFile(sFilename,clearCurrentData,utils.getSystemEncoding());}  }
class C{  public void putDouble(String key,double value){  checkForNullKey(key);  putString(key,String.valueOf(value));}  }
class C{  @Override public Filter createFilter(){  return new IsLikeExtended();}  }
class C{  private void selectPending(){  BSPTree<Euclidean1D> start=current;  while (start != null && !isIntervalStart(start)) {    start=nextInternalNode(start);  }  if (start == null) {    current=null;    pending=null;    return;  }  BSPTree<Euclidean1D> end=start;  while (end != null && !isIntervalEnd(end)) {    end=nextInternalNode(end);  }  if (end != null) {    pending=new double[]{getAngle(start),getAngle(end)};    current=end;  } else {    pending=new double[]{getAngle(start),Double.POSITIVE_INFINITY};    current=null;  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  LikeFilterImpl filter=null;  if ((parameterList == null) || parameterList.size() != 6) {    filter=new IsLikeExtended();  } else {    LiteralExpressionImpl pattern=(LiteralExpressionImpl)parameterList.get(1);    LiteralExpressionImpl wildcardMulti=(LiteralExpressionImpl)parameterList.get(2);    LiteralExpressionImpl wildcardSingle=(LiteralExpressionImpl)parameterList.get(3);    LiteralExpressionImpl escape=(LiteralExpressionImpl)parameterList.get(4);    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(5);    filter=new IsLikeExtended(parameterList.get(0),(String)pattern.getValue(),(String)wildcardMulti.getValue(),(String)wildcardSingle.getValue(),(String)escape.getValue(),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public FriendsGetMutualQuery(VkApiClient client,UserActor actor){  super(client,"friends.getMutual",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public E poll(){  for (; ; ) {    Node<E> h=head;    Node<E> t=tail;    Node<E> first=h.getPrev();    if (h == head) {      if (h != t) {        if (first == null) {          fixList(t,h);          continue;        }        E item=first.getItem();        if (casHead(h,first)) {          h.setNext(null);          h.setPrev(null);          count.decrementAndGet();          return item;        }      } else {        return null;      }    }  }}  }
class C{  public boolean contains(T obj){  if (!map.contains(obj))   return false;  return bits.get(map.getInt(obj));}  }
class C{  private static long calculateBrokerCapacity(ResourceQuota defaultQuota,double usableCPU,double usableMem,double usableBandwidthOut,double usableBandwidthIn){  double cpuCapacity=(usableCPU / cpuUsageByMsgRate) / (defaultQuota.getMsgRateIn() + defaultQuota.getMsgRateOut());  double memCapacity=usableMem / defaultQuota.getMemory();  double bandwidthOutCapacity=usableBandwidthOut / defaultQuota.getBandwidthOut();  double bandwidthInCapacity=usableBandwidthIn / defaultQuota.getBandwidthIn();  double capacity=Math.min(cpuCapacity,Math.min(memCapacity,Math.min(bandwidthOutCapacity,bandwidthInCapacity)));  return (long)Math.max(capacity,0);}  }
class C{  public void clear(){  this.normal=null;  this.depth=0;}  }
class C{  public boolean isWifiConnection(){  try {    ConnectivityManager manager=(ConnectivityManager)app.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo ni=manager.getActiveNetworkInfo();    return ni != null && ni.getType() == ConnectivityManager.TYPE_WIFI;  } catch (  Throwable t) {    return false;  }}  }
class C{  public GroupsSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  AppMenu(Menu menu,int itemRowHeight,int itemDividerHeight,AppMenuHandler handler,Resources res){  mMenu=menu;  mItemRowHeight=itemRowHeight;  assert mItemRowHeight > 0;  mHandler=handler;  mItemDividerHeight=itemDividerHeight;  assert mItemDividerHeight >= 0;  mNegativeSoftwareVerticalOffset=res.getDimensionPixelSize(R.dimen.menu_negative_software_vertical_offset);  mVerticalFadeDistance=res.getDimensionPixelSize(R.dimen.menu_vertical_fade_distance);}  }
class C{  public FriendsGetQuery listId(Integer value){  return unsafeParam("list_id",value);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  public GroupsSetCallbackSettingsQuery videoCommentNew(Boolean value){  return unsafeParam("video_comment_new",value);}  }
class C{  public static File[] parsePath(String s){  int from=0;  List<File> l=new ArrayList<File>();  for (; ; ) {    int to=s.indexOf(File.pathSeparatorChar,from);    if (to == -1) {      if (from != s.length())       l.add(new File(s.substring(from)));      break;    }    if (to != from)     l.add(new File(s.substring(from,to)));    from=to + 1;  }  return (File[])l.toArray(new File[l.size()]);}  }
class C{  @Override public String toString(){  return Vector2DFormat.getInstance().format(this);}  }
class C{  public GroupsSetCallbackSettingsQuery boardPostDelete(Boolean value){  return unsafeParam("board_post_delete",value);}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  private void verifyStringIsConventionalPackageName(String s,Location loc) throws CompileException {  if (!Character.isLowerCase(s.charAt(0))) {    this.warning("UPN","Package name \"" + s + "\" does not begin with a lower-case letter (see JLS7 6.8.1)",loc);    return;  }  for (int i=0; i < s.length(); ++i) {    char c=s.charAt(i);    if (!Character.isLowerCase(c) && c != '_' && c != '.') {      this.warning("PPN","Poorly chosen package name \"" + s + "\" contains bad character '"+ c+ "'",loc);      return;    }  }}  }
class C{  public void close(BaseServerPacket packet){  channel.write(packet).addListener(ChannelFutureListener.CLOSE);}  }
class C{  public FriendsGetOnlineQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public void addOverlappingView(View view,int width,int height){  mFrameLayoutOverlappingViewContainer.addView(view,width,height);  mOverlappingViewsMap.put(view.getId(),view);}  }
class C{  public EventDescriptor(Class eventClass,Long eventID){  this.eventClass=eventClass;  this.eventID=eventID;}  }
class C{  private JProperties(){}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public RegexValidator(String[] regexs){  this(regexs,true);}  }
class C{  public UsersGetQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public EmptyBucketUserAssignmentTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public static double logInterp(double val,double min,double max){  double logMin=safeLog10(min);  double denominator=(safeLog10(max) - logMin);  if (denominator == 0)   return 0;  return (safeLog10(val) - logMin) / denominator;}  }
class C{  public void mouseMoved(MouseEvent me){  stillDownWithoutMoving=false;  if (!viewer.isLocked()) {    Node v=getAHitNodeOrNodeLabel(me.getX(),me.getY());    if (v != null)     viewer.setToolTipText(v); else     viewer.setToolTipText((String)null);  } else   viewer.setToolTipText((String)null);}  }
class C{  private ObjectInfo<T> store_impl(T subject){  if (isInvalid())   return null;  ++m_Size;  ObjectInfo<T> oi=null;  if (m_Support_Random_Scans && (m_BasicOccupied == null) && m_Size >= MINIMAL_NUMBER_TO_HANDLE_POSITIONS) {    m_BasicOccupied=new ArrayList<ObjectInfo<T>>();    oi=m_Tail;    int indx=1;    while (oi != null) {      m_BasicOccupied.add(oi);      m_LastPos=indx - 1;      oi.setPosInList(indx++);      oi=oi.getForwardRef();    }  }  oi=new ObjectInfo<T>(subject);  if (m_Tail != null) {    oi.setForwardRef(m_Tail);    m_Tail.setBackwardsRef(oi);  }  m_Tail=oi;  if (m_Head == null)   m_Head=oi;  if (m_Support_Random_Scans && (m_BasicOccupied != null)) {    ArrayList<ObjectInfo<T>> spos=null;    m_LastPos=m_Size > 1 ? (m_LastPos + 1) : 0;    if (m_LastPos >= NUMBER_OF_OCCUPIED_POS_QUOTA) {      m_LastPos=0;      ++m_LastChunk;      if (m_AllOccupiedPos == null) {        m_AllOccupiedPos=new ArrayList<ArrayList<ObjectInfo<T>>>();        m_AllOccupiedPos.add(m_BasicOccupied);      }      m_AllOccupiedPos.add(new ArrayList<ObjectInfo<T>>());    }    spos=m_LastChunk == 0 ? m_BasicOccupied : m_AllOccupiedPos.get(m_LastChunk);    spos.add(oi);    oi.setPosInList(m_Size);  }  return oi;}  }
class C{  public void translateVect(Vector3f data){  data.x+=m03;  data.y+=m13;  data.z+=m23;}  }
class C{  public double tTest(final double mu,final double[] sample) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkSampleData(sample);  return tTest(StatUtils.mean(sample),mu,StatUtils.variance(sample),sample.length);}  }
class C{  public UsersGetQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public void notifyDestroyViewer() throws CanceledException {synchronized (directorListeners) {    while (directorListeners.size() > 0) {      IDirectorListener directorListener=directorListeners.get(0);      if (directorListener != this)       directorListener.destroyView();      if (directorListeners.size() > 0 && directorListeners.get(0) == directorListener)       directorListeners.remove(0);    }  }  while (viewers.size() > 0) {    removeViewer(viewers.get(0));  }  if (projectsChangedListener != null)   ProjectManager.removeProjectsChangedListener(projectsChangedListener);  if (future != null && !future.isDone()) {    try {      future.cancel(true);    } catch (    Exception ex) {    }    future=null;  }}  }
class C{  private static String urlsToPath(URL[] urls){  if (urls.length == 0) {    return null;  } else   if (urls.length == 1) {    return urls[0].toExternalForm();  } else {    StringBuffer path=new StringBuffer(urls[0].toExternalForm());    for (int i=1; i < urls.length; i++) {      path.append(' ');      path.append(urls[i].toExternalForm());    }    return path.toString();  }}  }
class C{  public void resetAxisMinValue(){  mCustomAxisMin=false;}  }
class C{  public void resetTemplates(int instanceId){  HashMap<SpawnTemplate,Boolean> states=poolUsedTemplates.get(instanceId);  if (states == null) {    return;  }  super.writeLock();  try {    for (    SpawnTemplate template : states.keySet()) {      states.put(template,false);    }  }  finally {    super.writeUnlock();  }}  }
class C{  public DocumentHistoComparator(){  super(0.0);}  }
class C{  private UILib(){}  }
class C{  public CompositeAction(){  super(null,0);}  }
class C{  protected QLStepReturn<O> trainStep(O obs){  Integer action;  INDArray input=getInput(obs);  boolean isHistoryProcessor=getHistoryProcessor() != null;  if (isHistoryProcessor)   getHistoryProcessor().record(input);  int skipFrame=isHistoryProcessor ? getHistoryProcessor().getConf().getSkipFrame() : 1;  int historyLength=isHistoryProcessor ? getHistoryProcessor().getConf().getHistoryLength() : 1;  int updateStart=getConfiguration().getUpdateStart() + ((getConfiguration().getBatchSize() + historyLength) * skipFrame);  Double maxQ=Double.NaN;  if (getStepCounter() % skipFrame != 0) {    action=lastAction;  } else {    if (history == null) {      if (isHistoryProcessor) {        getHistoryProcessor().add(input);        history=getHistoryProcessor().getHistory();      } else       history=new INDArray[]{input};    }    INDArray hstack=Transition.concat(Transition.dup(history));    if (hstack.shape().length > 2)     hstack=hstack.reshape(Learning.makeShape(1,hstack.shape()));    INDArray qs=getCurrentDQN().output(hstack);    int maxAction=Learning.getMaxAction(qs);    maxQ=qs.getDouble(maxAction);    action=getEgPolicy().nextAction(hstack);  }  lastAction=action;  StepReply<O> stepReply=getMdp().step(action);  accuReward+=stepReply.getReward() * configuration.getRewardFactor();  if (getStepCounter() % skipFrame == 0 || stepReply.isDone()) {    INDArray ninput=getInput(stepReply.getObservation());    if (isHistoryProcessor)     getHistoryProcessor().add(ninput);    INDArray[] nhistory=isHistoryProcessor ? getHistoryProcessor().getHistory() : new INDArray[]{ninput};    Transition<Integer> trans=new Transition(history,action,accuReward,stepReply.isDone(),nhistory[0]);    getExpReplay().store(trans);    if (getStepCounter() > updateStart) {      Pair<INDArray,INDArray> targets=setTarget(getExpReplay().getBatch());      getCurrentDQN().fit(targets.getFirst(),targets.getSecond());    }    history=nhistory;    accuReward=0;  }  return new QLStepReturn<O>(maxQ,getCurrentDQN().getLatestScore(),stepReply);}  }
class C{  public void addTableBlockInfoList(String task,List<TableBlockInfo> tableBlockInfoList){  taskBlockInfoMapping.put(task,tableBlockInfoList);}  }
class C{  private static Spannable errorSummary(String string){  SpannableString summary=new SpannableString(string);  summary.setSpan(new ForegroundColorSpan(ERROR_COLOR),0,summary.length(),0);  return summary;}  }
class C{  public boolean intersects(Rectangle2D r,double margin){  double tw=clip[6] - clip[0];  double th=clip[7] - clip[1];  double rw=r.getWidth();  double rh=r.getHeight();  if (rw < 0 || rh < 0 || tw < 0 || th < 0) {    return false;  }  double tx=clip[0];  double ty=clip[1];  double rx=r.getX() - margin;  double ry=r.getY() - margin;  rw+=rx + 2 * margin;  rh+=ry + 2 * margin;  tw+=tx;  th+=ty;  return ((rw < rx || rw > tx) && (rh < ry || rh > ty) && (tw < tx || tw > rx)&& (th < ty || th > ry));}  }
class C{  public RoleAlreadyExistsException(String s){  super(s);}  }
class C{  public void delay(int duration) throws InterruptedException {  blockingWait(duration);}  }
class C{  @SuppressWarnings("unchecked") @Test(dependsOnMethods={"t_createAndValidateExperiment"},dataProvider="badExperimentsPUT") public void t_failPutExperiments(String experiment,String expectedError,int expectedStatusCode){  Map<String,Object> mapping=new HashMap<>();  mapping=new GsonBuilder().create().fromJson(experiment,mapping.getClass());  doPut("experiments/" + mapping.get("id"),null,experiment,expectedStatusCode,apiServerConnector);  if (expectedError.startsWith("An unique constraint")) {    Assert.assertTrue(lastError().startsWith("An unique constraint"));  } else   if (expectedError.startsWith("Can not construct instance of java.util.Date")) {    Assert.assertTrue(lastError().startsWith("Can not construct instance of java.util.Date"));  } else   if (expectedError.startsWith("Can not construct instance of java.lang.Double")) {    Assert.assertTrue(lastError().startsWith("Can not construct instance of java.lang.Double"));  } else {    Assert.assertEquals(lastError(),expectedError,"Error message not as expected.");  }}  }
class C{  public boolean hasReportParams(){  return reportParams != null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200423,value0,skillname);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public TIntHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  this._hashingStrategy=this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public OrBitwiseExpr fullCopy(){  OrBitwiseExpr tree=(OrBitwiseExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static final Object[] trim(Object[] a,int size){  if (a.length == size) {    return a;  } else {    Object[] b=new Object[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(getId());}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public static S1Interval fromPoint(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  return new S1Interval(p,p,true);}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,List args){  return new GSpecialInvokeExpr(base,method,args);}  }
class C{  public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,String sToFind){  return gGraph.locateVertex(new VertexImpl(sToFind));}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  public static <T extends RealFieldElement<T>>T distance1(final FieldVector3D<T> v1,final Vector3D v2){  return v1.distance1(v2);}  }
class C{  @Override public boolean isEnabled(){  return mIsEnabled;}  }
class C{  public void removeFirstEntry(){  this.announcementList.remove(this.announcementList.firstEntry().getKey());}  }
class C{  @Override public Node previousNode(){  Node result;  if (fCurrentNode == null)   return null;  result=getPreviousSibling(fCurrentNode);  if (result == null) {    result=getParentNode(fCurrentNode);    if (result != null) {      fCurrentNode=result;      return fCurrentNode;    }    return null;  }  Node lastChild=getLastChild(result);  Node prev=lastChild;  while (lastChild != null) {    prev=lastChild;    lastChild=getLastChild(prev);  }  lastChild=prev;  if (lastChild != null) {    fCurrentNode=lastChild;    return fCurrentNode;  }  if (result != null) {    fCurrentNode=result;    return fCurrentNode;  }  return null;}  }
class C{  public static boolean is3G(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {    return true;  }  return false;}  }
class C{  private FilterPanelInterface internal_getFilterPanel(String hints){  return new FilterPanelv2(this.vendorOptionVersionsList);}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  String uriSpec=p_uriSpec;  int uriSpecLen=(uriSpec != null) ? uriSpec.length() : 0;  if (p_base == null && uriSpecLen == 0) {    throw new MalformedURIException("Cannot initialize URI with empty parameters.");  }  if (uriSpecLen == 0) {    initialize(p_base);    return;  }  int index=0;  int colonIdx=uriSpec.indexOf(':');  if (colonIdx != -1) {    final int searchFrom=colonIdx - 1;    int slashIdx=uriSpec.lastIndexOf('/',searchFrom);    int queryIdx=uriSpec.lastIndexOf('?',searchFrom);    int fragmentIdx=uriSpec.lastIndexOf('#',searchFrom);    if (colonIdx == 0 || slashIdx != -1 || queryIdx != -1 || fragmentIdx != -1) {      if (colonIdx == 0 || (p_base == null && fragmentIdx != 0)) {        throw new MalformedURIException("No scheme found in URI.");      }    } else {      initializeScheme(uriSpec);      index=m_scheme.length() + 1;      if (colonIdx == uriSpecLen - 1 || uriSpec.charAt(colonIdx + 1) == '#') {        throw new MalformedURIException("Scheme specific part cannot be empty.");      }    }  } else   if (p_base == null && uriSpec.indexOf('#') != 0) {    throw new MalformedURIException("No scheme found in URI.");  }  if (((index + 1) < uriSpecLen) && (uriSpec.charAt(index) == '/' && uriSpec.charAt(index + 1) == '/')) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      if (!initializeAuthority(uriSpec.substring(startPos,index))) {        index=startPos - 2;      }    } else {      m_host="";    }  }  initializePath(uriSpec,index);  if (p_base != null) {    absolutize(p_base);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public SimpleNotifyContainerConfigurer eventListenerMethod(Object eventListener,String methodName){  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();  methodEventListenerAdapter.setDelegate(eventListener);  methodEventListenerAdapter.setMethodName(methodName);  methodEventListenerAdapter.afterPropertiesSet();  notifyEventListenerContainer.setEventListener(methodEventListenerAdapter);  return this;}  }
class C{  public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollX(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_LEFT && getScrollX() < scrollDelta) {      scrollDelta=getScrollX();    } else     if (direction == View.FOCUS_RIGHT) {      if (getChildCount() > 0) {        int daRight=getChildAt(0).getRight();        int screenRight=getScrollX() + getWidth() - getPaddingRight();        if (daRight - screenRight < maxJump) {          scrollDelta=daRight - screenRight;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollX(direction == View.FOCUS_RIGHT ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public NewsfeedSearchQueryWithExtended longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  private void sortChain(int classificationId,int classId){  SortedSet<UpdateItem> sorted=new TreeSet<>(new UpdateItem());  UpdateItem updateItem=getFirst(classificationId,classId);  while (updateItem != null) {    sorted.add(updateItem);    long nextReadUid=updateItem.getNextInClassification(classificationId);    if (nextReadUid != 0)     updateItem=readUid2UpdateItem.get(nextReadUid); else     updateItem=null;  }  UpdateItem first=null;  UpdateItem prev=null;  UpdateItem last=null;  for (  UpdateItem current : sorted) {    if (first == null)     first=current;    if (prev != null)     prev.setNextInClassifaction(classificationId,current.getReadUId());    prev=current;    last=current;  }  if (first != null)   setFirst(classificationId,classId,first);  if (last != null) {    setLast(classificationId,classId,last);    last.setNextInClassifaction(classificationId,0);  }}  }
class C{  public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){  int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff;  int red=Integer.parseInt(r,16);  int green=Integer.parseInt(g,16);  int blue=Integer.parseInt(b,16);  return Color.argb(useAlpha ? alpha : -1,red,green,blue);}  }
class C{  private Base64(){}  }
class C{  public static FloatBuffer createVector3Buffer(FloatBuffer buf,int vertices){  if (buf != null && buf.limit() == 3 * vertices) {    buf.rewind();    return buf;  }  return createFloatBuffer(3 * vertices);}  }
class C{  public boolean isLegionMember(){  return legionMember != null;}  }
class C{  @Provides @Singleton @Global CuratorFramework provideCuratorFramework(ZooKeeperConfiguration configuration,Environment environment){  CuratorFramework curator=configuration.newManagedCurator(environment.lifecycle());  curator.start();  return curator;}  }
class C{  public static Permission with(Activity activity){  return new ImplPermission(activity);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200927,skilltarget,skillcaster,skillname);}  }
class C{  @Deprecated public static String makeWhereStringFromFields(List<ModelField> modelFields,Map<String,Object> fields,String operator){  return makeWhereStringFromFields(new StringBuilder(),modelFields,fields,operator,null).toString();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @deprecated public final String formatOffsetRFC822(int offset){  StringBuilder buf=new StringBuilder();  char sign='+';  if (offset < 0) {    sign='-';    offset=-offset;  }  buf.append(sign);  int offsetH=offset / 3600000;  offset%=3600000;  int offsetM=offset / 60000;  offset%=60000;  int offsetS=offset / 1000;  assert ((offsetH >= 0) && (offsetH < 100));  assert ((offsetM >= 0) && (offsetM < 60));  assert ((offsetS >= 0) && (offsetS < 60));  int num=0;  int denom=0;  if (offsetS == 0) {    offset=offsetH * 100 + offsetM;    num=offset % 10000;    denom=1000;  } else {    offset=offsetH * 10000 + offsetM * 100 + offsetS;    num=offset % 1000000;    denom=100000;  }  while (denom >= 1) {    char digit=(char)(num / denom + 48);    buf.append(digit);    num%=denom;    denom/=10;  }  return buf.toString();}  }
class C{  public static void log(CoreException e){  IStatus status=e.getStatus();  log(status.getSeverity(),status.getMessage(),e);}  }
class C{  public UsersSearchQuery universityCountry(Integer value){  return unsafeParam("university_country",value);}  }
class C{  @deprecated public int compareTo(Region other){  return this.id.compareTo(other.id);}  }
class C{  private boolean moveToAsyncIfNeeded(Throwable error){synchronized (_operatingModeLock) {    if (_syncState && !isClosed()) {      int sampleTPBefore=getSampleTPBefore(10,TimeUnit.SECONDS);      IMarker currentMarker=getGroupBacklog().getCurrentMarker(getMemberName());      String msg="moving to async state (measured TP before state change " + sampleTPBefore + ") minimal async completion marked position "+ currentMarker;      logEventInHistory(msg);      if (_specificLogger.isLoggable(Level.FINE))       _specificLogger.fine(msg);      _throttleController.suggestThroughPut(sampleTPBefore);      _asyncMinimalCompletionMarker=currentMarker;      _unresolvedError=error;      _beginOfSyncStateMarker=null;      _syncState=false;      if (error != null) {        msg="channel changed to asynchronous mode until it will resolve the error [" + error.getMessage() + "]";        logEventInHistory(msg);        if (_specificLogger.isLoggable(Level.INFO))         _specificLogger.info(msg);      }    }    return !_syncState;  }}  }
class C{  @RequestMapping(value="{spaceKey}/push",method=POST) public PushResponse push(@PathVariable("spaceKey") Workspace ws,@RequestParam(required=false) String ref) throws GitAPIException, IOException, GitOperationException {  log.debug("Git push for spaceKey => {}, ref => {}",ws.getSpaceKey(),ref);  PushResponse response;  if (ref == null) {    response=gitMgr.push(ws);  } else {    response=gitMgr.push(ws,ref);  }  return response;}  }
class C{  public static float calculateAspectRatio(@NonNull RectF rect){  return rect.width() / rect.height();}  }
class C{  protected FriendsDeleteQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public int CalcBonusGloryReward(boolean isWin,boolean isBossKilled){  int BossKilled=50;  int Win=150;  int Loss=75;  if (isBossKilled) {    return isWin ? (Win + BossKilled) : (Loss + BossKilled);  } else {    return isWin ? Win : Loss;  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());  result=prime * result + ((getRoleId() == null) ? 0 : getRoleId().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private synchronized void addLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){  if (null == tableLockMap.get(absoluteTableIdentifier)) {    tableLockMap.put(absoluteTableIdentifier,new Object());  }}  }
class C{  public Leaves(){  this(DEFAULT_TYPE,DEFAULT_SPECIES,DEFAULT_DECAYABLE);}  }
class C{  public void addController(BaseController controller){  controllers.add(controller);}  }
class C{  public EntityQuery filterByDate(Timestamp moment){  if (moment != null) {    this.filterByDate=true;    this.filterByDateMoment=moment;    this.filterByFieldNames=null;  } else {    this.filterByDate=false;    this.filterByDateMoment=null;    this.filterByFieldNames=null;  }  return this;}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue != null) {    if (objValue instanceof Boolean) {      populateField((Boolean)objValue);      valueUpdated();    }  }}  }
class C{  public static boolean isNetworkAvailable(Context mContext){  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  return connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnectedOrConnecting();}  }
class C{  private Clusterable centroidOf(final Collection<T> points,final int dimension){  final double[] centroid=new double[dimension];  for (  final T p : points) {    final double[] point=p.getPoint();    for (int i=0; i < centroid.length; i++) {      centroid[i]+=point[i];    }  }  for (int i=0; i < centroid.length; i++) {    centroid[i]/=points.size();  }  return new DoublePoint(centroid);}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  void subscribe(final Set<Long> tagIds,final BaseListener listener,final boolean sendInitialUpdateSeperately) throws CacheSynchronizationException {  Set<Long> newTagIds=cacheSynchronizer.initTags(tagIds);  handleTagSubscription(tagIds,newTagIds,listener,sendInitialUpdateSeperately);}  }
class C{  public double doubleValue(){  return d.doubleValue();}  }
class C{  static public void initArgs(String[] args,Object bean){  CmdLineParser cmd=new CmdLineParser(bean);  try {    cmd.parseArgument(args);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    cmd.printUsage(System.err);    System.exit(1);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public JSONArray put(long value){  put(new Long(value));  return this;}  }
class C{  public JTextAreaPrintStream(JTextArea taOut){  super(System.out,true);  OutputArea=taOut;}  }
class C{  public Properties readSettings() throws ProxyException {  Properties settings=new Properties();  try {    parseSettings("/system/proxy/",settings);    parseSettings("/system/http_proxy/",settings);  } catch (  IOException e) {    Logger.log(getClass(),LogLevel.ERROR,"Gnome settings file error.",e);    throw new ProxyException(e);  }  return settings;}  }
class C{  public BlockVector(Vector vec){  this.x=vec.getX();  this.y=vec.getY();  this.z=vec.getZ();}  }
class C{  public int keys(int[] list){  int[] tab=table;  byte[] stat=state;  if (list.length < distinct)   return -1;  int j=0;  for (int i=tab.length; i-- > 0; ) {    if (stat[i] == FULL)     list[j++]=tab[i];  }  return distinct;}  }
class C{  public UsersGetNearbyQuery radius(UsersGetNearbyRadius value){  return unsafeParam("radius",value);}  }
class C{  public <T,R>void sendToTarget(T message,R target){  sendToTargetOrType(message,target.getClass(),null);}  }
class C{  public SLDDataFlavour(String mimeType,String humanPresentableName,ClassLoader classLoader) throws ClassNotFoundException {  super(mimeType,humanPresentableName,classLoader);}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public static UByte ubyte(long value) throws NumberFormatException {  return UByte.valueOf(value);}  }
class C{  public PatchingChain(Chain<E> aChain){  innerChain=aChain;}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public AccountSaveProfileInfoQuery bdateVisibility(AccountSaveProfileInfoBdateVisibility value){  return unsafeParam("bdate_visibility",value);}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  public FriendsEditQuery listIds(Integer... value){  return unsafeParam("list_ids",value);}  }
class C{  public SemiVariance(){  this(true,Direction.DOWNSIDE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_GATHERING_DESC01(String value0){  return new SM_SYSTEM_MESSAGE(1400436,value0);}  }
class C{  private void saveState(){  SharedPreferences prefs=getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(PREF_SEND_INSTALL_EVENT,mSendInstallEvent);  setIsFreshInstallOrDataHasBeenCleared(this);  editor.putLong(PREF_TIMESTAMP_OF_INSTALL,mTimestampOfInstall);  editor.putLong(PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT,mTimestampForNextPostAttempt);  editor.putLong(PREF_TIMESTAMP_FOR_NEW_REQUEST,mTimestampForNewRequest);  editor.putLong(PREF_TIMESTAMP_OF_REQUEST,hasRequest() ? mCurrentRequest.getCreationTimestamp() : INVALID_TIMESTAMP);  editor.putString(PREF_PERSISTED_REQUEST_ID,hasRequest() ? mCurrentRequest.getRequestID() : INVALID_REQUEST_ID);  editor.putString(PREF_LATEST_VERSION,mLatestVersion == null ? "" : mLatestVersion);  editor.putString(PREF_MARKET_URL,mMarketURL == null ? "" : mMarketURL);  if (mInstallSource != null)   editor.putString(PREF_INSTALL_SOURCE,mInstallSource);  editor.apply();}  }
class C{  public static int readShort(byte[] bytes){  return ((bytes[0] << 8) & 0x0000ff00) | (bytes[1] & 0x000000ff);}  }
class C{  public String toString(){  return "JavaStreamingAudioPlayer";}  }
class C{  private void internal_populateBooleanField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Boolean value=Boolean.valueOf(storedValue);    fieldConfigVisitor.populateBooleanField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public List<File> glob() throws IOException, InterruptedException {  return globInternal(base,patterns,excludes,excludeDirectories,pathFilter,threadPool);}  }
class C{  public Builder renameColumns(List<String> oldNames,List<String> newNames){  return transform(new RenameColumnsTransform(oldNames,newNames));}  }
class C{  public Histogram(RangeWithCount... items){  this(Arrays.stream(items));}  }
class C{  public ScrollObject(){  this.toTop=true;}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  public LabelfileDoubleDataSource(Reader reader){  super(reader);  try {    while (!this.reader.readLine().trim().equals("#")) {    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  protected AccountBanUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT_NOTIFY(String value0){  return new SM_SYSTEM_MESSAGE(1300139,value0);}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_DATABASE,Localisation.getField(DataSourceConnectorFileGDB.class,"DataSourceConnectorFileGDB.database"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  @Override public void updateNode(Object objectOld,Object objectNew){  DefaultMutableTreeNode node=null;  for (  DefaultMutableTreeNode n : nodeMap.values()) {    Object o=n.getUserObject();    if (o == objectOld) {      node=n;      break;    }  }  if (node != null) {    node.setUserObject(objectNew);    nodeMap.remove(objectOld);    nodeMap.put(objectNew,node);    treeModel.nodeChanged(node);  }}  }
class C{  @Override public int hashCode(){  return (41 * (41 + this.left.hashCode()) + this.right.hashCode());}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public EdgeRenderer(int edgeType){  this(edgeType,Constants.EDGE_ARROW_FORWARD);}  }
class C{  @Nonnull public Builder copy(){  return new Builder(this);}  }
class C{  public static Pair<String,MultiDimensionalMap<Integer,Integer,String>> stringWithLabels(String sentence,TokenizerFactory tokenizerFactory){  MultiDimensionalMap<Integer,Integer,String> map=MultiDimensionalMap.newHashBackedMap();  Tokenizer t=tokenizerFactory.create(sentence);  List<String> currTokens=new ArrayList<>();  String currLabel=null;  String endLabel=null;  List<Pair<String,List<String>>> tokensWithSameLabel=new ArrayList<>();  while (t.hasMoreTokens()) {    String token=t.nextToken();    if (token.matches(BEGIN_LABEL)) {      currLabel=token;      if (!currTokens.isEmpty()) {        tokensWithSameLabel.add(new Pair<>("NONE",(List<String>)new ArrayList<>(currTokens)));        currTokens.clear();      }    } else     if (token.matches(END_LABEL)) {      if (currLabel == null)       throw new IllegalStateException("Found an ending label with no matching begin label");      endLabel=token;    } else     currTokens.add(token);    if (currLabel != null && endLabel != null) {      currLabel=currLabel.replaceAll("[<>/]","");      endLabel=endLabel.replaceAll("[<>/]","");      assert !currLabel.isEmpty() : "Current label is empty!";      assert !endLabel.isEmpty() : "End label is empty!";      assert currLabel.equals(endLabel) : "Current label begin and end did not match for the parse. Was: " + currLabel + " ending with "+ endLabel;      tokensWithSameLabel.add(new Pair<>(currLabel,(List<String>)new ArrayList<>(currTokens)));      currTokens.clear();      currLabel=null;      endLabel=null;    }  }  if (!currTokens.isEmpty()) {    tokensWithSameLabel.add(new Pair<>("none",(List<String>)new ArrayList<>(currTokens)));    currTokens.clear();  }  StringBuilder strippedSentence=new StringBuilder();  for (  Pair<String,List<String>> tokensWithLabel : tokensWithSameLabel) {    String joinedSentence=StringUtils.join(tokensWithLabel.getSecond()," ");    if (!(strippedSentence.length() < 1))     strippedSentence.append(" ");    strippedSentence.append(joinedSentence);    int begin=strippedSentence.toString().indexOf(joinedSentence);    int end=begin + joinedSentence.length();    map.put(begin,end,tokensWithLabel.getFirst());  }  return new Pair<>(strippedSentence.toString(),map);}  }
class C{  private static Dict parse(InputSource input) throws XmlParseException {  try {    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    documentBuilder.setEntityResolver(new EmptyXMLResolver());    Document doc=documentBuilder.parse(input);    Element element=doc.getDocumentElement();    return PLIST.parse(element);  } catch (  ParserConfigurationException e) {    throw new XmlParseException("Error reading input",e);  }catch (  SAXException e) {    throw new XmlParseException("Error reading input",e);  }catch (  IOException e) {    throw new XmlParseException("Error reading input",e);  }}  }
class C{  @Override public boolean scanDTDInternalSubset(boolean complete,boolean standalone,boolean hasExternalSubset) throws IOException, XNIException {  fEntityScanner=fEntityManager.getEntityScanner();  fEntityManager.setEntityHandler(this);  fStandalone=standalone;  if (fScannerState == SCANNER_STATE_TEXT_DECL) {    if (fDTDHandler != null) {      fDTDHandler.startDTD(fEntityScanner,null);      fStartDTDCalled=true;    }    setScannerState(SCANNER_STATE_MARKUP_DECL);  }  do {    if (!scanDecls(complete)) {      if (fDTDHandler != null && hasExternalSubset == false) {        fDTDHandler.endDTD(null);      }      setScannerState(SCANNER_STATE_TEXT_DECL);      return false;    }  } while (complete);  return true;}  }
class C{  public ShimpleBody newBody(Body b){  Map<String,String> options=PhaseOptions.v().getPhaseOptions(PHASE);  return new ShimpleBody(b,options);}  }
class C{  public void write(IOutputWriter writer) throws IOException {  writer.writeLong(numberOfReads);  writer.writeLong(numberOfMatches);  writer.writeInt(availableClassification2Position.size());  for (  String classificationName : availableClassification2Position.keySet()) {    writer.writeString(classificationName);    writer.writeLong(availableClassification2Position.get(classificationName));  }  writer.writeLong(startHeaderSection);  writer.writeLong(endHeaderSection);  writer.writeLong(startReadsSection);  writer.writeLong(endReadsSection);  writer.writeLong(startClassificationsSection);  writer.writeLong(endClassificationsSection);  writer.writeLong(startAuxDataSection);  writer.writeLong(endAuxDataSection);  writer.writeLong(startFooterSection);  endFooterSection=writer.length() + 8;  writer.writeLong(endFooterSection);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int numRead=zzReader.read(zzBuffer,zzEndRead,requested);  if (numRead == 0) {    throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");  }  if (numRead > 0) {    zzEndRead+=numRead;    if (numRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  public Snapshot(File file,SnapshotCategory category,DataSource master){  super(master);  this.file=file;  this.category=category;}  }
class C{  private void updateCustomGroupForRow(int row){  int startEndMargin=row == ROW_MAIN ? mMargin : 0;  mCustomGroup.setHorizontalMode(mMargin,startEndMargin,startEndMargin);  mCustomGroup.gravity=Gravity.START;  if (row == ROW_OTHER && mCustomGroup.views.length == 2) {    int extraWidth=availableWidth() - getWidthWithMargins(mCustomGroup);    if (extraWidth < 0) {      mCustomGroup.setVerticalMode(0,mMargin);      mCustomGroup.gravity=Gravity.FILL_HORIZONTAL;    } else {      View view0=mCustomGroup.views[0];      View view1=mCustomGroup.views[1];      int extraWidth0=extraWidth / 2;      int extraWidth1=extraWidth - extraWidth0;      measureChildWithFixedWidth(view0,view0.getMeasuredWidth() + extraWidth0);      measureChildWithFixedWidth(view1,view1.getMeasuredWidth() + extraWidth1);    }  }  if (row == ROW_OTHER && mCustomGroup.views.length == 1) {    mCustomGroup.gravity=Gravity.FILL_HORIZONTAL;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_MAX_REPEAT_COUNT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300600,value0,value1);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public String constructFullClasspath(){  String cp=super.constructFullClasspath();  cp+=File.pathSeparator + soot.options.Options.v().soot_classpath();  return cp;}  }
class C{  public Builder continuousWorld(Boolean continuousWorld){  this.continuousWorld=continuousWorld;  return this;}  }
class C{  public static AuditLogEntry createFromEvent(EventLogEvent event){  Calendar time=event.getTime();  UserInfo user=event.getUser();  Application.Name appName=null;  if (event instanceof ApplicationEvent) {    appName=((ApplicationEvent)event).getApplicationName();  }  Experiment.Label expLabel=null;  Experiment.ID expId=null;  if (event instanceof ExperimentEvent) {    expLabel=((ExperimentEvent)event).getExperiment().getLabel();    expId=((ExperimentEvent)event).getExperiment().getID();  }  Bucket.Label bucketLabel=null;  if (event instanceof BucketEvent) {    bucketLabel=((BucketEvent)event).getBucket().getLabel();  }  String property=null;  String before=null;  String after=null;  if (event instanceof ChangeEvent) {    property=((ChangeEvent)event).getPropertyName();    before=((ChangeEvent)event).getBefore();    after=((ChangeEvent)event).getAfter();  } else   if (event instanceof BucketCreateEvent) {    property="allocation";    after=String.valueOf(((BucketCreateEvent)event).getBucket().getAllocationPercent());  }  return new AuditLogEntry(time,user,AuditLogAction.getActionForEvent(event),appName,expLabel,expId,bucketLabel,property,before,after);}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  boolean hasPublishPermissions(){  return mHasPublishPermissions;}  }
class C{  public ServiceID(DataInput in) throws IOException {  this.mostSig=in.readLong();  this.leastSig=in.readLong();}  }
class C{  public Matrix4f mult(Matrix4f in2,Matrix4f store){  if (store == null) {    store=new Matrix4f();  }  float temp00, temp01, temp02, temp03;  float temp10, temp11, temp12, temp13;  float temp20, temp21, temp22, temp23;  float temp30, temp31, temp32, temp33;  temp00=m00 * in2.m00 + m01 * in2.m10 + m02 * in2.m20 + m03 * in2.m30;  temp01=m00 * in2.m01 + m01 * in2.m11 + m02 * in2.m21 + m03 * in2.m31;  temp02=m00 * in2.m02 + m01 * in2.m12 + m02 * in2.m22 + m03 * in2.m32;  temp03=m00 * in2.m03 + m01 * in2.m13 + m02 * in2.m23 + m03 * in2.m33;  temp10=m10 * in2.m00 + m11 * in2.m10 + m12 * in2.m20 + m13 * in2.m30;  temp11=m10 * in2.m01 + m11 * in2.m11 + m12 * in2.m21 + m13 * in2.m31;  temp12=m10 * in2.m02 + m11 * in2.m12 + m12 * in2.m22 + m13 * in2.m32;  temp13=m10 * in2.m03 + m11 * in2.m13 + m12 * in2.m23 + m13 * in2.m33;  temp20=m20 * in2.m00 + m21 * in2.m10 + m22 * in2.m20 + m23 * in2.m30;  temp21=m20 * in2.m01 + m21 * in2.m11 + m22 * in2.m21 + m23 * in2.m31;  temp22=m20 * in2.m02 + m21 * in2.m12 + m22 * in2.m22 + m23 * in2.m32;  temp23=m20 * in2.m03 + m21 * in2.m13 + m22 * in2.m23 + m23 * in2.m33;  temp30=m30 * in2.m00 + m31 * in2.m10 + m32 * in2.m20 + m33 * in2.m30;  temp31=m30 * in2.m01 + m31 * in2.m11 + m32 * in2.m21 + m33 * in2.m31;  temp32=m30 * in2.m02 + m31 * in2.m12 + m32 * in2.m22 + m33 * in2.m32;  temp33=m30 * in2.m03 + m31 * in2.m13 + m32 * in2.m23 + m33 * in2.m33;  store.m00=temp00;  store.m01=temp01;  store.m02=temp02;  store.m03=temp03;  store.m10=temp10;  store.m11=temp11;  store.m12=temp12;  store.m13=temp13;  store.m20=temp20;  store.m21=temp21;  store.m22=temp22;  store.m23=temp23;  store.m30=temp30;  store.m31=temp31;  store.m32=temp32;  store.m33=temp33;  return store;}  }
class C{  public boolean isApplicable(){  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName("SEED");  return viewer != null && viewer.hasComparableData();}  }
class C{  public void clearMatchRects(){  setMatchRects(-1,new RectF[0],null);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  String inprogressZNodeName(long ledgerId,long firstTxId,long logSegmentSeqNo){  if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {    return String.format("%s_%018d",DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX,logSegmentSeqNo);  } else {    return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + "_" + Long.toString(firstTxId,16);  }}  }
class C{  public boolean hasMoreElements(){  if (curindex < length)   return true;  return false;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void addContribution(final SubHyperplane<Euclidean3D> facet,final boolean reversed){  final Region<Euclidean2D> polygon=((SubPlane)facet).getRemainingRegion();  final double area=polygon.getSize();  if (Double.isInfinite(area)) {    setSize(Double.POSITIVE_INFINITY);    setBarycenter((Point<Euclidean3D>)Vector3D.NaN);  } else {    final Plane plane=(Plane)facet.getHyperplane();    final Vector3D facetB=plane.toSpace(polygon.getBarycenter());    double scaled=area * facetB.dotProduct(plane.getNormal());    if (reversed) {      scaled=-scaled;    }    setSize(getSize() + scaled);    setBarycenter((Point<Euclidean3D>)new Vector3D(1.0,(Vector3D)getBarycenter(),scaled,facetB));  }}  }
class C{  public void updateProfile() throws RemoteServerException, LoginFailedException {  GetPlayerMessage getPlayerReqMsg=GetPlayerMessage.newBuilder().setPlayerLocale(playerLocale.getPlayerLocale()).build();  ServerRequest getPlayerServerRequest=new ServerRequest(RequestType.GET_PLAYER,getPlayerReqMsg);  api.getRequestHandler().sendServerRequests(CommonRequest.appendCheckChallenge(getPlayerServerRequest));  try {    updateProfile(GetPlayerResponse.parseFrom(getPlayerServerRequest.getData()));  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }}  }
class C{  public static JsonValue value(int value){  return new JsonNumber(Integer.toString(value,10));}  }
class C{  public VideoReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"video.reorderAlbums",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  public NewsfeedGetListsQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getLists",GetListsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private UShort(short value){  this.value=value & MAX_VALUE;}  }
class C{  public void update(POGOProtos.Settings.FortSettingsOuterClass.FortSettings fortSettings){  interactionRangeInMeters=fortSettings.getInteractionRangeMeters();  maxTotalDeployedPokemon=fortSettings.getMaxTotalDeployedPokemon();  maxPlayerDeployedPokemon=fortSettings.getMaxPlayerDeployedPokemon();  deployStaminaMultiplier=fortSettings.getDeployStaminaMultiplier();  deployAttackMultiplier=fortSettings.getDeployAttackMultiplier();  farInteractionRangeMeters=fortSettings.getFarInteractionRangeMeters();}  }
class C{  public static List<BigInteger> partitionBits(BigInteger value,int partitionSize,BigInteger mask) throws PIRException {  if (mask.bitLength() != partitionSize) {    throw new PIRException("mask.bitLength() " + mask.bitLength() + " != partitionSize = "+ partitionSize);  }  List<BigInteger> partitions=new ArrayList<>();  if (value.bitLength() < partitionSize) {    partitions.add(value);  } else {    int bitLength=value.bitLength();    mask=mask.shiftLeft(bitLength - partitionSize);    int partNum=0;    for (int i=0; i < bitLength; i+=partitionSize) {      BigInteger result=value.and(mask);      int shiftSize=bitLength - (partNum + 1) * partitionSize;      if (shiftSize < 0) {        shiftSize=0;      }      result=result.shiftRight(shiftSize);      mask=mask.shiftRight(partitionSize);      partitions.add(result);      ++partNum;    }  }  return partitions;}  }
class C{  public void close() throws IOException {  getFooterSectionRMA6().setStartFooterSection(readerWriter.getPosition());  getFooterSectionRMA6().write(readerWriter);  readerWriter.close();  readerWriter=null;}  }
class C{  @Override public boolean deleteStyle(StyleWrapper styleToDelete){  if (styleToDelete == null) {    return false;  }  boolean result=false;  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  GeoServerRESTPublisher publisher=manager.getPublisher();  if (publisher != null) {    if (isDefaultWorkspace(styleToDelete.getWorkspace())) {      result=publisher.removeStyle(styleToDelete.getStyle());    } else {      result=publisher.removeStyleInWorkspace(styleToDelete.getWorkspace(),styleToDelete.getStyle());    }  }  return result;}  }
class C{  @Deprecated public boolean hasLurePokemon(){  return fortData.hasLureInfo() && fortData.getLureInfo().getLureExpiresTimestampMs() > api.currentTimeMillis();}  }
class C{  static int lastInsertCheck(String stmt,int offset){  offset=indexAfterLastInsertIdFunc(stmt,offset);  if (offset < 0) {    return OTHER;  }  offset=skipAs(stmt,offset);  offset=skipAlias(stmt,offset);  if (offset < 0) {    return OTHER;  }  offset=ParseUtil.move(stmt,offset,0);  if (offset < stmt.length()) {    return OTHER;  }  return LAST_INSERT_ID;}  }
class C{  public void close() throws IOException {  RandomAccessFile localRaf=raf;  if (localRaf != null) {synchronized (localRaf) {      raf=null;      localRaf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  protected Table createLinkTable(){  return LINKS_SCHEMA.instantiate(getNodeTable().getMaximumRow() + 1);}  }
class C{  public String eatStringConstant(){  if (!matchStringConstant())   throw new BadSyntaxException();  String s=tok.sval;  nextToken();  return s;}  }
class C{  protected XMLDTDProcessor createDTDProcessor(){  return new XMLDTDProcessor();}  }
class C{  public static long[] breakdown(long t,@NonNull TimeUnit unit,boolean roundMillis){  long days=unit.toDays(t);  long hours=unit.toHours(t) % 24;  long minutes=unit.toMinutes(t) % 60;  long seconds=unit.toSeconds(t) % 60;  long msecs=unit.toMillis(t) % 1000;  if (roundMillis) {    if (msecs >= 500) {      seconds++;      msecs=0;      if (seconds == 60) {        minutes++;        seconds=0;        if (minutes == 60) {          hours++;          minutes=0;          if (hours == 24) {            days++;            hours=0;          }        }      }    }  }  return new long[]{days,hours,minutes,seconds,msecs};}  }
class C{  public void disconnect(){  if (connecting || !connected) {    return;  }  connected=false;  logger.fine("Disconnecting from Skype");  notifConnector.disconnect();  for (  Map.Entry<String,User> user : users.entrySet()) {    user.getValue().setPresence(Presence.OFFLINE,false);  }  reset();}  }
class C{  private byte[] preprocessToBin(byte[] exploit) throws Exception {  Pair<ArrayList<Integer>,List<Byte>> data=preprocessRop(exploit);  int size=4 + data.first.size() * 4 + data.second.size();  byte[] out=new byte[size + ((-size) & 3)];  ByteBuffer buf=ByteBuffer.wrap(out).order(ByteOrder.LITTLE_ENDIAN);  buf.putInt(data.second.size());  for (  Integer val : data.first) {    buf.putInt(val);  }  for (  Byte val : data.second) {    buf.put(val);  }  return out;}  }
class C{  public StatsGetQuery dateFrom(String value){  return unsafeParam("date_from",value);}  }
class C{  public float dot(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, 0 returned.");    return 0;  }  return x * vec.x + y * vec.y + z * vec.z;}  }
class C{  private int closeVerticesConnections(final List<ConnectableSegment> segments){  int connected=0;  for (  final ConnectableSegment segment : segments) {    if (segment.getNext() == null && segment.getEnd() != null) {      final Vector2D end=segment.getEnd();      ConnectableSegment selectedNext=null;      double min=Double.POSITIVE_INFINITY;      for (      final ConnectableSegment candidateNext : segments) {        if (candidateNext.getPrevious() == null && candidateNext.getStart() != null) {          final double distance=Vector2D.distance(end,candidateNext.getStart());          if (distance < min) {            selectedNext=candidateNext;            min=distance;          }        }      }      if (min <= getTolerance()) {        segment.setNext(selectedNext);        selectedNext.setPrevious(segment);        ++connected;      }    }  }  return connected;}  }
class C{  private void decryptBlock(byte[] src,int srcIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,src,srcIndex);  Bits32ToBytes(xl,src,srcIndex + 4);}  }
class C{  public PolygonsSet(final double xMin,final double xMax,final double yMin,final double yMax,final double tolerance){  super(boxBoundary(xMin,xMax,yMin,yMax,tolerance),tolerance);}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public SLDOutputTest(){  initialise();}  }
class C{  public boolean containsKey(String key){  return context.containsKey(key);}  }
class C{  void update(Snackbar snackbar,boolean animate){  mMessageView.setMaxLines(snackbar.getSingleLine() ? 1 : Integer.MAX_VALUE);  mMessageView.setTemplate(snackbar.getTemplateText());  setViewText(mMessageView,snackbar.getText(),animate);  String actionText=snackbar.getActionText();  View view=getContentView();  int backgroundColor=snackbar.getBackgroundColor();  if (backgroundColor == 0) {    backgroundColor=ApiCompatibilityUtils.getColor(view.getResources(),R.color.snackbar_background_color);  }  if (DeviceFormFactor.isTablet(view.getContext())) {    view.setBackgroundResource(R.drawable.snackbar_background);    ((GradientDrawable)view.getBackground()).setColor(backgroundColor);  } else {    view.setBackgroundColor(backgroundColor);  }  if (snackbar.getBackgroundColor() != 0) {    view.setBackgroundColor(snackbar.getBackgroundColor());  }  if (actionText != null) {    mActionButtonView.setVisibility(View.VISIBLE);    setViewText(mActionButtonView,snackbar.getActionText(),animate);  } else {    mActionButtonView.setVisibility(View.GONE);  }}  }
class C{  public void updateSettings(DownloadSettingsResponse response){  if (response.getSettings().hasMapSettings()) {    mapSettings.update(response.getSettings().getMapSettings());  }  if (response.getSettings().hasLevelSettings()) {    levelUpSettings.update(response.getSettings().getInventorySettings());  }  if (response.getSettings().hasFortSettings()) {    fortSettings.update(response.getSettings().getFortSettings());  }  if (response.getSettings().hasInventorySettings()) {    inventorySettings.update(response.getSettings().getInventorySettings());  }  if (response.getSettings().hasGpsSettings()) {    gpsSettings.update(response.getSettings().getGpsSettings());  }  this.hash=response.getHash();}  }
class C{  public PhotosImplementor(PhotosModel model,PhotosView view){  this.model=model;  this.view=view;}  }
class C{  public static boolean guessTabSeparator(File file){  BufferedReader r=null;  try {    r=new BufferedReader(new FileReader(file));    String aLine=r.readLine();    while (aLine != null && (aLine.trim().length() == 0 || aLine.trim().startsWith("#")))     aLine=r.readLine().trim();    if (aLine != null)     return aLine.contains("\t");  } catch (  Exception ex) {  } finally {    if (r != null)     try {      r.close();    } catch (    IOException e) {    }  }  return false;}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static void reduceFieldArray(Object instance,String fieldName,int reduceSize) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  if (reduceSize <= 0) {    return;  }  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  int finalLength=original.length - reduceSize;  if (finalLength <= 0) {    return;  }  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),finalLength);  System.arraycopy(original,reduceSize,combined,0,finalLength);  jlrField.set(instance,combined);}  }
class C{  public static <T extends Bean>T load(Bson query,Bson order,Class<T> t){  String collection=getCollection(t);  if (collection != null) {    try {      T obj=t.newInstance();      return load(query,order,obj);    } catch (    Exception e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }  return null;}  }
class C{  public INSECTFileRawDB(String sPrefix,String sBaseDir){  super(sPrefix,sBaseDir);}  }
class C{  public View(Class<T> type,String sqlExpression,Object... parameters){  super(type,sqlExpression,parameters);}  }
class C{  public void dump(){}  }
class C{  public void handleSwipeMove(float ty){  if (ty > 0 && getPanelState() == PanelState.MAXIMIZED) {    mContent.resetContentViewScroll();  }  setClampedPanelHeight(mInitialPanelHeight - ty);  requestUpdate();}  }
class C{  public ThreadQueue(int iMax){  Max=iMax;  qThreads=new LinkedList();}  }
class C{  public Crop asSquare(){  cropIntent.putExtra(Extra.ASPECT_X,1);  cropIntent.putExtra(Extra.ASPECT_Y,1);  return this;}  }
class C{  public int executeUpdate(String cmd,Transaction tx){  if (tx.isReadOnly())   throw new UnsupportedOperationException();  Parser parser=new Parser(cmd);  Object obj=parser.updateCommand();  if (obj.getClass().equals(InsertData.class)) {    Verifier.verifyInsertData((InsertData)obj,tx);    return uPlanner.executeInsert((InsertData)obj,tx);  } else   if (obj.getClass().equals(DeleteData.class)) {    Verifier.verifyDeleteData((DeleteData)obj,tx);    return uPlanner.executeDelete((DeleteData)obj,tx);  } else   if (obj.getClass().equals(ModifyData.class)) {    Verifier.verifyModifyData((ModifyData)obj,tx);    return uPlanner.executeModify((ModifyData)obj,tx);  } else   if (obj.getClass().equals(CreateTableData.class)) {    Verifier.verifyCreateTableData((CreateTableData)obj,tx);    return uPlanner.executeCreateTable((CreateTableData)obj,tx);  } else   if (obj.getClass().equals(CreateViewData.class)) {    Verifier.verifyCreateViewData((CreateViewData)obj,tx);    return uPlanner.executeCreateView((CreateViewData)obj,tx);  } else   if (obj.getClass().equals(CreateIndexData.class)) {    Verifier.verifyCreateIndexData((CreateIndexData)obj,tx);    return uPlanner.executeCreateIndex((CreateIndexData)obj,tx);  } else   throw new UnsupportedOperationException();}  }
class C{  public static void syncFormattingFromSummary2Viewer(DataTable table,MainViewer viewer){  Document doc=viewer.getDir().getDocument();  final String nodeFormats=table.getNodeFormats(ClassificationType.Taxonomy.toString());  if (nodeFormats != null) {    int state=0;    int idA=0, idB=0;    int formatA=0;    for (int pos=0; pos < nodeFormats.length(); pos++) {      char ch=nodeFormats.charAt(pos);switch (state) {case 0:        if (!Character.isSpaceChar(ch)) {          state++;          idA=pos;        }      break;case 1:    idB=pos;  if (ch == ':')   state++;break;case 2:if (!Character.isSpaceChar(ch)) {state++;formatA=pos;}break;case 3:if (ch == ';') {int formatB=pos;if (idA < idB && formatA < formatB) {Integer taxId=Integer.parseInt(nodeFormats.substring(idA,idB).trim());viewer.getDirtyNodeIds().add(taxId);Node v=viewer.getTaxId2Node(taxId);if (v != null) {String format=nodeFormats.substring(formatA,formatB + 1).trim();try {  viewer.getNV(v).read(format);} catch (Exception e) {  Basic.caught(e);}}}state=0;}break;}}}final String edgeFormats=table.getEdgeFormats(ClassificationType.Taxonomy.toString());if (edgeFormats != null) {int state=0;int taxId1A=0, taxId1B=0;int taxId2A=0, taxId2B=0;int formatA=0;for (int pos=0; pos < edgeFormats.length(); pos++) {char ch=edgeFormats.charAt(pos);switch (state) {case 0:if (!Character.isSpaceChar(ch)) {state++;taxId1A=pos;}break;case 1:taxId1B=pos;if (ch == ',') state++;break;case 2:if (!Character.isSpaceChar(ch)) {state++;taxId2A=pos;}break;case 3:taxId2B=pos;if (ch == ':') state++;break;case 4:if (!Character.isSpaceChar(ch)) {state++;formatA=pos;}break;case 5:if (ch == ';') {int formatB=pos;if (taxId1A < taxId1B && taxId2A < taxId2B && formatA < formatB) {Integer taxId1=Integer.parseInt(edgeFormats.substring(taxId1A,taxId1B).trim());Integer taxId2=Integer.parseInt(edgeFormats.substring(taxId2A,taxId2B).trim());String format=edgeFormats.substring(formatA,formatB + 1).trim();Node v=viewer.getTaxId2Node(taxId1);Node w=viewer.getTaxId2Node(taxId2);viewer.getDirtyEdgeIds().add(new Pair<>(taxId1,taxId2));if (v != null && w != null) {Edge e=v.getCommonEdge(w);if (e != null) {try {if (e != null) viewer.getEV(e).read(format);} catch (IOException ex) {}}}}state=0;}break;}}}}  }
class C{  public <A>void publishEvent(final EventTranslatorOneArg<T,A> eventTranslator,final A arg){  ringBuffer.publishEvent(eventTranslator,arg);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        v=OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      v=OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME_5(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400205,durationtime0);}  }
class C{  private boolean trafficExpired(AirMapTraffic traffic){  int timeInterval=30;  return new Date(traffic.getIncomingTime().getTime() + timeInterval * 1000).before(new Date());}  }
class C{  @Override public void beforeTextChanged(CharSequence s,int start,int count,int after){}  }
class C{  public boolean parseParameters(Object params){  return true;}  }
class C{  public void removeNode(Node node){  if (node == null)   return;  Node deleted=matchNodeOrParent(node);  if (deleted == null)   return;  if (fForward) {    fCurrentNode=previousNode(deleted);  } else {    Node next=nextNode(deleted,false);    if (next != null) {      fCurrentNode=next;    } else {      fCurrentNode=previousNode(deleted);      fForward=true;    }  }}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void connect(List<StompHeader> _headers){  connect(_headers,false);}  }
class C{  public static void removeIngredientsFromPlayer(EntityPlayerMP player,List<ItemStack> ingredients){  ItemStack[] main=player.inventory.mainInventory;  ItemStack[] arm=player.inventory.armorInventory;  for (  ItemStack isIngredient : ingredients) {    int target=isIngredient.stackSize;    for (int i=0; i < main.length + arm.length && target > 0; i++) {      ItemStack isPlayer=(i >= main.length) ? arm[i - main.length] : main[i];      if (isPlayer != null && isIngredient != null && itemStackIngredientsMatch(isPlayer,isIngredient)) {        if (target >= isPlayer.stackSize) {          target-=isPlayer.stackSize;          if (i >= main.length)           arm[i - main.length]=null; else           main[i]=null;        } else {          isPlayer.stackSize-=target;          target=0;        }      }    }    ItemStack resultForReward=isIngredient.copy();    RewardForDiscardingItemImplementation.LoseItemEvent event=new RewardForDiscardingItemImplementation.LoseItemEvent(resultForReward);    MinecraftForge.EVENT_BUS.post(event);  }}  }
class C{  public boolean removeChildEdge(int edge){  return removeChild(getTargetNode(edge));}  }
class C{  void onMenuVisibilityChanged(boolean isVisible){  for (int i=0; i < mObservers.size(); ++i) {    mObservers.get(i).onMenuVisibilityChanged(isVisible);  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  private Pokemon interpretWhichPokemonUserInput(){  Pokemon pokemon;  if (pokeInputSpinner.getVisibility() == View.VISIBLE) {    pokemon=pokeInputSpinnerAdapter.getItem(pokeInputSpinner.getSelectedItemPosition());  } else {    String userInput=autoCompleteTextView1.getText().toString();    pokemon=pokeInfoCalculator.get(userInput);    if (pokemon == null) {      Toast.makeText(this,userInput + getString(R.string.wrong_pokemon_name_input),Toast.LENGTH_SHORT).show();      return null;    }  }  return pokemon;}  }
class C{  public MatchBlockRMA2Formatter(String format){  this.format=format;  decode(format);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"newfriend\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"UID\" TEXT,"+ "\"MSG\" TEXT,"+ "\"NAME\" TEXT,"+ "\"AVATAR\" TEXT,"+ "\"STATUS\" INTEGER,"+ "\"TIME\" INTEGER);");}  }
class C{  public static String checkNull(String string1,String string2){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   return "";}  }
class C{  public void leaveIntermediateCatchEvent(DelegateExecution execution){  EventGateway eventGateway=getPrecedingEventBasedGateway(execution);  if (eventGateway != null) {    deleteOtherEventsRelatedToEventBasedGateway(execution,eventGateway);  }  leave(execution);}  }
class C{  private static String[] makeColumnNames(ColumnType types[]){  String[] header=new String[types.length];  for (int i=0; i < types.length; i++) {    header[i]="C" + i;  }  return header;}  }
class C{  public boolean isConcrete(){  return !isPhantom() && !isAbstract() && !isNative();}  }
class C{  public RelativePeriods clear(){  this.thisMonth=false;  this.lastMonth=false;  this.thisBimonth=false;  this.lastBimonth=false;  this.thisQuarter=false;  this.lastQuarter=false;  this.thisSixMonth=false;  this.lastSixMonth=false;  this.monthsThisYear=false;  this.quartersThisYear=false;  this.thisYear=false;  this.monthsLastYear=false;  this.quartersLastYear=false;  this.lastYear=false;  this.last5Years=false;  this.last12Months=false;  this.last6Months=false;  this.last3Months=false;  this.last6BiMonths=false;  this.last4Quarters=false;  this.last2SixMonths=false;  this.thisFinancialYear=false;  this.lastFinancialYear=false;  this.last5FinancialYears=false;  this.thisWeek=false;  this.lastWeek=false;  this.last4Weeks=false;  this.last12Weeks=false;  this.last52Weeks=false;  return this;}  }
class C{  public static Settings init(String tag){  printer=new LoggerPrinter();  return printer.init(tag);}  }
class C{  @deprecated public CompactCharArray(String indexArray,String valueArray){  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToCharArray(valueArray));}  }
class C{  public static void readLayout(String folder){  if (selectedLayout != null) {    selectedLayout.readLayout(folder);  }}  }
class C{  public WildcardFileFilter(String[] wildcards){  this(wildcards,null);}  }
class C{  public void add(X509TrustManager mgr){  if (mgr instanceof X509Extensions) {    managers.add((X509Extensions)mgr);  } else {    managers.add(new X509ExtensionsWrapper(mgr));  }}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  public final int hashCode(){  return Hash;}  }
class C{  @DmnDeploymentAnnotation(resources={"org/activiti/rest/dmn/service/api/repository/simple.dmn"}) public void testDeleteDeployment() throws Exception {  dmnRepositoryService.createDeploymentQuery().singleResult();  DmnDeployment existingDeployment=dmnRepositoryService.createDeploymentQuery().singleResult();  assertNotNull(existingDeployment);  HttpDelete httpDelete=new HttpDelete(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,existingDeployment.getId()));  CloseableHttpResponse response=executeRequest(httpDelete,HttpStatus.SC_NO_CONTENT);  closeResponse(response);  existingDeployment=dmnRepositoryService.createDeploymentQuery().singleResult();  assertNull(existingDeployment);}  }
class C{  public boolean tryGetProxy(){  if (proxy != null) {    throw new IllegalArgumentException("LookupLocator has been discovered already");  }  InvocationConstraints ic=createInvocationConstraints();  if (l instanceof RemoteMethodControl) {    MethodConstraints mc=((RemoteMethodControl)l).getConstraints();    if (mc != null) {      ic=mc.getConstraints(getRegistrarMethod);    }  }  try {    long startTime=0;    if (loggerStats.isLoggable(Level.FINEST)) {      startTime=SystemTime.timeMillis();    }    doUnicastDiscovery(l,ic);    if (loggerStats.isLoggable(Level.FINEST)) {      loggerStats.finest("Unicast Lookup took [" + (SystemTime.timeMillis() - startTime) + "ms]");    }    time=SystemTime.timeMillis();    logger.log(Level.INFO,"Connected to LUS using locator {0}:{1,number,#}",new Object[]{l.getHost(),l.getPort()});    return true;  } catch (  Throwable throwable) {    final int currTryIndx=tryIndx;    setNextTryTime();    logger.log(Level.WARNING,"{0} - using unicast locator {1}:{2,number,#} - delay next lookup by {3} ms",new Object[]{throwable,l.getHost(),l.getPort(),sleepTime[currTryIndx]});    return false;  }}  }
class C{  public KeyValueStore(UniqueOrKey key){  super(key);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  protected List<IResource> updateCache(IResource parent,final ISVNStatus[] statuses) throws CoreException {  final List<IResource> result=new ArrayList<IResource>();  if (statuses != null) {    for (    ISVNStatus status : statuses) {      IResource resource=SVNWorkspaceRoot.getResourceFor(parent,status);      result.add(updateCache(resource,status));    }  }  return result;}  }
class C{  public static WxMenu fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxMenu.class);}  }
class C{  @SuppressLint("NewApi") public synchronized static Codec[] findDecodersForMimeType(String mimeType){  if (sDecoders != null)   return sDecoders;  ArrayList<Codec> decoders=new ArrayList<Codec>();  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        try {          MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);          Set<Integer> formats=new HashSet<Integer>();          for (int k=0; k < capabilities.colorFormats.length; k++) {            int format=capabilities.colorFormats[k];            for (int l=0; l < SUPPORTED_COLOR_FORMATS.length; l++) {              if (format == SUPPORTED_COLOR_FORMATS[l]) {                formats.add(format);              }            }          }          Codec codec=new Codec(codecInfo.getName(),(Integer[])formats.toArray(new Integer[formats.size()]));          decoders.add(codec);        } catch (        Exception e) {          Log.wtf(TAG,e);        }      }    }  }  sDecoders=(Codec[])decoders.toArray(new Codec[decoders.size()]);  for (int i=0; i < sDecoders.length; i++) {    if (sDecoders[i].name.equalsIgnoreCase("omx.google.h264.decoder")) {      Codec codec=sDecoders[0];      sDecoders[0]=sDecoders[i];      sDecoders[i]=codec;    }  }  return sDecoders;}  }
class C{  public AemSidekick activatePage(){  clickTab(SidekickTab.PAGE);  clickOperation(PageOperation.ACTIVATE_PAGE);  activateReferencesIfNeeded();  return this;}  }
class C{  public void onConfigurationChanged(Configuration newConfig){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onConfigurationChanged(newConfig);    }  }}  }
class C{  public GeneralException(Throwable nested){  super(nested);}  }
class C{  public LeastSquaresBuilder start(final double[] newStart){  return start(new ArrayRealVector(newStart,false));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LabeledStmt fullCopy(){  LabeledStmt tree=(LabeledStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public WallEditQuery services(String value){  return unsafeParam("services",value);}  }
class C{  private void drawBorder(Canvas canvas,int color,float[] pts,Path path,Paint paint){  paint.setColor(color);  path.reset();  path.moveTo(pts[0],pts[1]);  for (int i=1, len=pts.length / 2; i < len; i++) {    path.lineTo(pts[i * 2],pts[i * 2 + 1]);  }  path.lineTo(pts[0],pts[1]);  canvas.drawPath(path,paint);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  File lastOpenFile=ProgramProperties.getFile(MeganProperties.READSFILE);  if (lastOpenFile != null) {    lastOpenFile=new File(lastOpenFile.getParentFile(),Basic.replaceFileSuffix(lastOpenFile.getName(),".fna"));  }  final FastaFileFilter fastAFileFilter=new FastaFileFilter();  fastAFileFilter.add("fastq");  fastAFileFilter.add("fnq");  fastAFileFilter.add("faq");  fastAFileFilter.setAllowGZipped(true);  fastAFileFilter.setAllowZipped(true);  List<File> files=ChooseFileDialog.chooseFilesToOpen(importBlastDialog,lastOpenFile,fastAFileFilter,fastAFileFilter,event,"Open reads file(s)");  if (files != null && files.size() > 0) {    ProgramProperties.put(MeganProperties.READSFILE,files.get(0).getPath());    try {      for (      File file : files) {        if (!file.exists())         throw new IOException("No such file: " + file);        if (!file.canRead())         throw new IOException("Cannot read file: " + file);      }      importBlastDialog.setReadFileName(Basic.toString(files,"\n"));      importBlastDialog.getReadFileNameField().setText(Basic.toString(files,"\n"));    } catch (    IOException ex) {      NotificationsInSwing.showError(getViewer().getFrame(),"Failed to load file: " + ex.getMessage());    }  }}  }
class C{  public Result(int event,Object value){  this.event=event;  this.value=value;}  }
class C{  public static void finishZipEntry(ZipOutputStream out){  try {    out.finish();  } catch (  Exception ex) {    throw new RuntimeException("Failed to finish the content of the ZipOutputStream",ex);  }}  }
class C{  public OrExtended(){  super(new ArrayList<Filter>());}  }
class C{  public boolean hasNoDragOffset(){  return mViewPortHandler.hasNoDragOffset();}  }
class C{  @deprecated public String toRules(boolean escapeUnprintable){  return this.data.ruleSet.toRules(escapeUnprintable);}  }
class C{  public Builder withPrevKV(){  this.prevKV=true;  return this;}  }
class C{  public static int pxToSp(Context context,float pxValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(pxValue / fontScale + 0.5f);}  }
class C{  @Override protected Expression generateExpression(){  return null;}  }
class C{  public _AidlLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  private static String fixupXPath(String xpath){  final int end=xpath.length();  int offset=0;  boolean whitespace=true;  char c;  for (; offset < end; ++offset) {    c=xpath.charAt(offset);    if (whitespace) {      if (!XMLChar.isSpace(c)) {        if (c == '.' || c == '/') {          whitespace=false;        } else         if (c != '|') {          return fixupXPath2(xpath,offset,end);        }      }    } else     if (c == '|') {      whitespace=true;    }  }  return xpath;}  }
class C{  public PoissonDistribution(double p,double epsilon,int maxIterations) throws MathIllegalArgumentException {  if (p <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.MEAN,p);  }  mean=p;  this.epsilon=epsilon;  this.maxIterations=maxIterations;  normal=new NormalDistribution(p,FastMath.sqrt(p));}  }
class C{  @Override public void onCompositorLayout(){  TraceEvent.begin("CompositorViewHolder:layout");  if (mLayoutManager != null) {    mLayoutManager.onUpdate();    if (!DeviceFormFactor.isTablet(getContext()) && mControlContainer != null) {      if (mProgressBarDrawingInfo == null)       mProgressBarDrawingInfo=new DrawingInfo();      mControlContainer.getProgressBarDrawingInfo(mProgressBarDrawingInfo);    } else {      assert mProgressBarDrawingInfo == null;    }    mCompositorView.finalizeLayers(mLayoutManager,mSkipNextToolbarTextureUpdate,mProgressBarDrawingInfo);    if (mSkipNextToolbarTextureUpdate) {      requestRender();    }  }  TraceEvent.end("CompositorViewHolder:layout");  mSkipNextToolbarTextureUpdate=false;}  }
class C{  @NotNull public static String listToString(@NotNull JListFixture list){  return listToString(list,0,Integer.MAX_VALUE,40);}  }
class C{  List<Issue> errors(){  return errors;}  }
class C{  protected void ensureCapacity(int chunk){  if (fNodeType == null) {    fNodeType=new int[INITIAL_CHUNK_COUNT][];    fNodeName=new Object[INITIAL_CHUNK_COUNT][];    fNodeValue=new Object[INITIAL_CHUNK_COUNT][];    fNodeParent=new int[INITIAL_CHUNK_COUNT][];    fNodeLastChild=new int[INITIAL_CHUNK_COUNT][];    fNodePrevSib=new int[INITIAL_CHUNK_COUNT][];    fNodeURI=new Object[INITIAL_CHUNK_COUNT][];    fNodeExtra=new int[INITIAL_CHUNK_COUNT][];  } else   if (fNodeType.length <= chunk) {    int newsize=chunk * 2;    int[][] newArray=new int[newsize][];    System.arraycopy(fNodeType,0,newArray,0,chunk);    fNodeType=newArray;    Object[][] newStrArray=new Object[newsize][];    System.arraycopy(fNodeName,0,newStrArray,0,chunk);    fNodeName=newStrArray;    newStrArray=new Object[newsize][];    System.arraycopy(fNodeValue,0,newStrArray,0,chunk);    fNodeValue=newStrArray;    newArray=new int[newsize][];    System.arraycopy(fNodeParent,0,newArray,0,chunk);    fNodeParent=newArray;    newArray=new int[newsize][];    System.arraycopy(fNodeLastChild,0,newArray,0,chunk);    fNodeLastChild=newArray;    newArray=new int[newsize][];    System.arraycopy(fNodePrevSib,0,newArray,0,chunk);    fNodePrevSib=newArray;    newStrArray=new Object[newsize][];    System.arraycopy(fNodeURI,0,newStrArray,0,chunk);    fNodeURI=newStrArray;    newArray=new int[newsize][];    System.arraycopy(fNodeExtra,0,newArray,0,chunk);    fNodeExtra=newArray;  } else   if (fNodeType[chunk] != null) {    return;  }  createChunk(fNodeType,chunk);  createChunk(fNodeName,chunk);  createChunk(fNodeValue,chunk);  createChunk(fNodeParent,chunk);  createChunk(fNodeLastChild,chunk);  createChunk(fNodePrevSib,chunk);  createChunk(fNodeURI,chunk);  createChunk(fNodeExtra,chunk);  return;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("move sample=");  Set<String> samples=new HashSet<>();  while (!np.peekMatchIgnoreCase("direction")) {    String attribute=np.getWordRespectCase();    samples.add(attribute);  }  np.matchIgnoreCase("direction=");  String direction=np.getWordMatchesIgnoringCase("up down");  np.matchIgnoreCase(";");  if (samples.size() > 0) {    final SamplesViewer viewer=((SamplesViewer)getViewer());    viewer.getSamplesTable().moveSamples(direction.equalsIgnoreCase("up"),samples.toArray(new String[samples.size()]));  }}  }
class C{  public static LessSpacePredicate less(Comparable<?> value){  return new LessSpacePredicate(value);}  }
class C{  public static <T>T make(Class<T> shieldClass,RSHub rsHub){  return inst.make(shieldClass,rsHub,RSHub.class);}  }
class C{  public static boolean startsWithHttpOrHttps(String uri){  if (uri == null) {    return false;  }  String lowercaseUri=uri.toLowerCase(Locale.US);  return lowercaseUri.startsWith("http://") || lowercaseUri.startsWith("https://");}  }
class C{  private XmlDataWriter(){}  }
class C{  public static String convertName(String name){  if (!name.isEmpty()) {    if (NameConfig.ALLOW_CUSTOM_NAMES) {      return name;    } else {      return name.substring(0,1).toUpperCase() + name.toLowerCase().substring(1);    }  } else {    return "";  }}  }
class C{  @Override public List<UserRole> searchUserRole(UserRole userRole){  return sessionTemplate.selectList(NAMESPACE + ".searchUserRole",userRole);}  }
class C{  public GroupsGetCallbackServerSettingsQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.getCallbackServerSettings",GetCallbackServerSettingsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200587,skillcaster,skillname);}  }
class C{  public static <T>Collection<T> intersection(Collection<T> c1,Collection<T> c2){  Set<T> set1=new HashSet<>(c1);  set1.retainAll(new HashSet<>(c2));  return set1;}  }
class C{  public XIntArray(long size){  this((byte)(Math.min(30,1 + Math.max(10,(int)(Math.log(size) / Math.log(2))))));  int segment=(int)(size >>> SEGMENT_BITS);  grow(segment + 1);}  }
class C{  public synchronized Map<String,Object> waitForResult(long milliseconds){  if (Debug.verboseOn())   Debug.logVerbose("Waiting for results...",module);  while (!isCompleted()) {    try {      this.wait(milliseconds);      if (Debug.verboseOn())       Debug.logVerbose("Waiting...",module);    } catch (    java.lang.InterruptedException e) {      Debug.logError(e,module);    }  }  return this.getResult();}  }
class C{  public Fill updateFill(boolean selected,Symbolizer symbolizer){  if (symbolizer == null) {    return null;  }  boolean currentValue=hasFill(symbolizer);  if (currentValue != selected) {    SLDTreeLeafInterface obj=map.get(symbolizer.getClass());    if (obj != null) {      if (selected) {        logger.debug("Set fill");        obj.createFill(symbolizer);      } else {        logger.debug("Clear fill");        obj.removeFill(symbolizer);      }    }  }  return getFill(symbolizer);}  }
class C{  private boolean mapEmtpyCategories(CTTree cTree,Map<CTNode,Deque<CTNode>> xsubj,Map<CTNode,Deque<CTNode>> rnr){  for (  CTNode node : cTree.getTerminalList()) {    if (!node.isEmptyCategory())     continue;    if (node.getParent() == null)     continue;    if (node.wordFormStartsWith(PTBTag.E_PRO))     mapPRO(cTree,node,xsubj); else     if (node.wordFormStartsWith(PTBTag.E_TRACE))     mapTrace(cTree,node); else     if (node.matchesWordForm(PTBLib.P_PASSIVE_NULL))     mapPassiveNull(cTree,node,xsubj); else     if (node.isWordForm(PTBTag.E_ZERO))     continue; else     if (PTBLib.isDiscontinuousConstituent(node))     mapDiscontinuousConstituent(cTree,node,rnr); else     removeNode(node);  }  return cTree.getRoot().getChildrenSize() > 0;}  }
class C{  public XML11Configuration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public InputSplit[] sample(PathFilter pathFilter,double... weights){  URI[] paths=pathFilter != null ? pathFilter.filter(locations()) : locations();  if (weights != null && weights.length > 0 && weights[0] != 1.0) {    InputSplit[] splits=new InputSplit[weights.length];    double totalWeight=0;    for (int i=0; i < weights.length; i++) {      totalWeight+=weights[i];    }    double cumulWeight=0;    int[] partitions=new int[weights.length + 1];    for (int i=0; i < weights.length; i++) {      partitions[i]=(int)Math.round(cumulWeight * paths.length / totalWeight);      cumulWeight+=weights[i];    }    partitions[weights.length]=paths.length;    for (int i=0; i < weights.length; i++) {      List<URI> uris=new ArrayList<>();      for (int j=partitions[i]; j < partitions[i + 1]; j++) {        uris.add(paths[j]);      }      splits[i]=new CollectionInputSplit(uris);    }    return splits;  } else {    return new InputSplit[]{new CollectionInputSplit(Arrays.asList(paths))};  }}  }
class C{  private void saveFile() throws FileNotFoundException {  PrintStream psStream=new PrintStream(new FileOutputStream(clusterConfigFile));  JSpaceUtilities.domWriter(m_rootDoc.getDocumentElement(),psStream,"");  psStream.close();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_START_4_FISHING(String value0){  return new SM_SYSTEM_MESSAGE(1330014,value0);}  }
class C{  public boolean containsSinkMethod(String sinkSignature){  return !findSinkByMethodSignature(sinkSignature).isEmpty();}  }
class C{  public void addUrl(String url){  Set<String> urls=getCachedUrls();  urls.add(url);  putCachedUrls(urls);  updateNotification(urls);}  }
class C{  public void addOverlappingView(View view,int index,ViewGroup.LayoutParams params){  mFrameLayoutOverlappingViewContainer.addView(view,index,params);  mOverlappingViewsMap.put(view.getId(),view);}  }
class C{  void replacingData(NodeImpl node){}  }
class C{  protected void balanceTree(){  BinarySearchTreeNode<E> root=this.root;  boolean balancing=this.selfBalancing;  this.root=null;  this.size=0;  this.selfBalancing=true;  Iterator<E> iterator=new BinarySearchTreeIterator<E>(root);  while (iterator.hasNext()) {    BinarySearchTreeNode<E> node=new BinarySearchTreeNode<E>(iterator.next());    this.insert(node);  }  this.selfBalancing=balancing;}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  IntegerDistribution dist=getDistribution();  return new double[]{0d,0.018315638886d,0.018315638890d,0.091578194441d,0.091578194445d,0.238103305552d,0.238103305556d,dist.cumulativeProbability(3),dist.cumulativeProbability(4),dist.cumulativeProbability(5),dist.cumulativeProbability(10),dist.cumulativeProbability(20)};}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public Tab launchUrlFromExternalApp(String url,String referer,String headers,String appId,boolean forceNewTab,Intent intent,long intentTimestamp){  assert !mIncognito;  boolean isLaunchedFromChrome=TextUtils.equals(appId,mActivity.getPackageName());  if (forceNewTab && !isLaunchedFromChrome) {    LoadUrlParams loadUrlParams=new LoadUrlParams(url);    loadUrlParams.setIntentReceivedTimestamp(intentTimestamp);    loadUrlParams.setVerbatimHeaders(headers);    if (referer != null) {      loadUrlParams.setReferrer(new Referrer(referer,Referrer.REFERRER_POLICY_DEFAULT));    }    return createNewTab(loadUrlParams,TabLaunchType.FROM_EXTERNAL_APP,null,intent);  }  if (appId == null) {    appId=TabModelImpl.UNKNOWN_APP_ID;  }  for (int i=0; i < mTabModel.getCount(); i++) {    Tab tab=mTabModel.getTabAt(i);    if (appId.equals(tab.getAppAssociatedWith())) {      LoadUrlParams loadUrlParams=new LoadUrlParams(url);      loadUrlParams.setIntentReceivedTimestamp(intentTimestamp);      Tab newTab=createNewTab(loadUrlParams,TabLaunchType.FROM_EXTERNAL_APP,null,i,intent);      newTab.setAppAssociatedWith(appId);      mTabModel.closeTab(tab,false,false,false);      return newTab;    }  }  Tab tab=launchUrl(url,TabLaunchType.FROM_EXTERNAL_APP,intent,intentTimestamp);  tab.setAppAssociatedWith(appId);  return tab;}  }
class C{  public static SLDWriterInterface createWriter(SLDOutputFormatEnum hint){  if (hint == null) {    hint=defaultWriter;  }switch (hint) {case YSLD:{      if (ysldWriterImpl == null) {        ysldWriterImpl=new YSLDWriterImpl();      }      return ysldWriterImpl;    }case SLD:default :{    if (sldWriterImpl == null) {      sldWriterImpl=new SLDWriterImpl();    }    return sldWriterImpl;  }}}  }
class C{  public Mushroom(Material shroom,MushroomBlockTexture texture){  this(shroom,texture.getData());}  }
class C{  public static double[] readDoubles(){  return new In().readAllDoubles();}  }
class C{  public static double ceil(double x){  double y;  if (Double.isNaN(x)) {    return x;  }  y=floor(x);  if (y == x) {    return y;  }  y+=1.0;  if (y == 0) {    return x * y;  }  return y;}  }
class C{  private void inflateConnectivity(){  if (isConnected) {    if (connectivityView.getVisibility() == VISIBLE) {      if (!isConnectivityLayoutOverridden()) {        showConnected();      } else {        showCustomConnected();      }    }  } else {    if (!isConnectivityLayoutOverridden()) {      showDisconnected();    } else {      showCustomDisonnected();    }  }}  }
class C{  public void saveConfig(){  FileHelper.saveFile(file,json.toString(FileHelper.INDENT));  lastModified=file.lastModified();}  }
class C{  public void reset() throws IOException {  stream.reset();  framePos=markpos;  pushBackLen=markPushBackLen;  if (pushBackLen > 0) {    if (pushBackBuffer == null) {      pushBackBuffer=new byte[frameSize - 1];    }    System.arraycopy(markPushBackBuffer,0,pushBackBuffer,0,pushBackLen);  }}  }
class C{  private void createColumns(Table table,TableLayout layout){  TableColumn col;  col=new TableColumn(table,SWT.NONE);  col.setResizable(false);  layout.addColumnData(new ColumnWeightData(1,true));  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("SvnPropertiesView.propertyName"));  layout.addColumnData(new ColumnWeightData(60,true));  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("SvnPropertiesView.propertyValue"));  layout.addColumnData(new ColumnWeightData(120,true));}  }
class C{  public AccountGetInfoQuery fields(List<AccountGetInfoField> value){  return unsafeParam("fields",value);}  }
class C{  public ZWaveNoOperationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  setVersion(1);}  }
class C{  public boolean add(Dimension dimension){  if (apiNameToDimension.containsKey(dimension.getApiName())) {    return false;  }  Dimension oldDimension=apiNameToDimension.put(dimension.getApiName(),dimension);  if (oldDimension != null) {    ConcurrentModificationException e=new ConcurrentModificationException();    LOG.error("Multiple loaders updating DimensionDictionary",e);    throw e;  }  return true;}  }
class C{  public Trap newTrap(SootClass exception,Unit beginStmt,Unit endStmt,Unit handlerStmt){  return new JTrap(exception,beginStmt,endStmt,handlerStmt);}  }
class C{  public boolean contains(int x,int y){  return contains((double)x,(double)y);}  }
class C{  protected void printComponent(Graphics g){  boolean wasHighQuality=m_highQuality;  try {    m_highQuality=true;    paintDisplay((Graphics2D)g,getSize());  }  finally {    m_highQuality=wasHighQuality;  }}  }
class C{  public AemTextArea typeLine(CharSequence text){  return type(text).typeNewLine();}  }
class C{  public void createSets(boolean bEvenly,double dPartOfTheCorpus){  createSets(bEvenly,dPartOfTheCorpus,false);}  }
class C{  private Document parseXMLDocument(InputStream stream) throws IOException, PIRException {  Document doc;  try {    DocumentBuilder dBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    doc=dBuilder.parse(stream);  } catch (  ParserConfigurationException|SAXException e) {    throw new PIRException("Schema parsing error",e);  }  doc.getDocumentElement().normalize();  logger.info("Root element: " + doc.getDocumentElement().getNodeName());  return doc;}  }
class C{  public Mean(){  moment=new FirstMoment();  incMoment=true;}  }
class C{  public ThresholdValues(double lowThreshold,double highThreshold){  this.lowThreshold=lowThreshold;  this.currentLowThreshold=lowThreshold;  this.highThreshold=highThreshold;  this.currentHighThreshold=highThreshold;}  }
class C{  public static Double oizp(Number value){  if (value == null) {    return null;  }  return (value.doubleValue() >= 0d) ? 1d : 0d;}  }
class C{  public static ViewAction performDescendantAction(Matcher<View> viewMatcher,ViewAction viewAction){  return ViewActions.actionWithAssertions(new DescendantViewAction(viewMatcher,viewAction));}  }
class C{  public ClusterUnitSelector(URL url) throws IOException {  this(url,null);}  }
class C{  private void processNormalFlow(PathEdge<N,D> edge){  final D d1=edge.factAtSource();  final N n=edge.getTarget();  final D d2=edge.factAtTarget();  for (  N m : icfg.getSuccsOf(n)) {    FlowFunction<D> flowFunction=flowFunctions.getNormalFlowFunction(n,m);    Set<D> res=computeNormalFlowFunction(flowFunction,d1,d2);    for (    D d3 : res) {      compactAbstractionChain(d3,d2);      propagate(d1,m,d3,null,false);    }  }}  }
class C{  protected boolean isCacheable(){  SimplifiedIntervalList missingIntervals=getPartialIntervalsWithDefault(getResponseContext());  SimplifiedIntervalList volatileIntervals=getVolatileIntervalsWithDefault(getResponseContext());  return missingIntervals.isEmpty() && volatileIntervals.isEmpty();}  }
class C{  @Override public boolean accept(File file){  return file.isHidden();}  }
class C{  public void add(String expr,Font font){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,font);}  }
class C{  public static final void fillCircleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey){  double w=Math.abs(sx - ex);  double h=Math.abs(sy - ey);  RenderUtilities.fillCircleFromTopLeft(gl,sx,sy,w,h);}  }
class C{  protected boolean isViewAvailable(){  Tab currentTab=mTabModelSelector.getCurrentTab();  return currentTab != null && currentTab.getContentViewCore() != null;}  }
class C{  <T>Property(Function<AuditLogEntry,T> propertyExtractor,BiPredicate<T,String> filterPredicate){  this.propertyExtractor=propertyExtractor;  this.filterPredicate=filterPredicate;}  }
class C{  private Target createIntonationTarget(Element domElement){  FeatureDefinition featDef=this.f0FeatureDefinition;  int numFeatures=featDef.getNumberOfFeatures();  int numByteFeatures=featDef.getNumberOfByteFeatures();  int numShortFeatures=featDef.getNumberOfShortFeatures();  int numContiniousFeatures=featDef.getNumberOfContinuousFeatures();  byte[] byteFeatures=new byte[numByteFeatures];  short[] shortFeatures=new short[numShortFeatures];  float[] floatFeatures=new float[numContiniousFeatures];  int byteCount=0;  int shortCount=0;  int floatCount=0;  for (int i=0; i < numFeatures; i++) {    String featName=featDef.getFeatureName(i);    String featValue="0";    if (featDef.isByteFeature(featName) || featDef.isShortFeature(featName)) {      if (domElement.hasAttribute(featName)) {        featValue=domElement.getAttribute(featName);      }      boolean hasFeature=featDef.hasFeatureValue(featName,featValue);      if (!hasFeature)       featValue="0";      if (featDef.isByteFeature(i)) {        byteFeatures[byteCount++]=featDef.getFeatureValueAsByte(i,featValue);      } else       if (featDef.isShortFeature(i)) {        shortFeatures[shortCount++]=featDef.getFeatureValueAsShort(i,featValue);      }    } else {      if (domElement.hasAttribute("meaning")) {        featValue=domElement.getAttribute("meaning");      }      floatFeatures[floatCount++]=getMeaningScaleValue(featName,featValue);    }  }  FeatureVector newFV=featDef.toFeatureVector(0,byteFeatures,shortFeatures,floatFeatures);  String name="0";  if (domElement.hasAttribute("name")) {    name=domElement.getAttribute("name");  }  Target newTarget=new Target(name,domElement);  newTarget.setFeatureVector(newFV);  return newTarget;}  }
class C{  public static void cleanupParagraphs(RTEditText editor,Effect... exclude){  cleanupParagraphs(editor,Effects.ALIGNMENT,exclude);  cleanupParagraphs(editor,Effects.INDENTATION,exclude);  cleanupParagraphs(editor,Effects.BULLET,exclude);  cleanupParagraphs(editor,Effects.NUMBER,exclude);}  }
class C{  public int computeId(BitSet activeMatches,IReadBlock readBlock){  if (readBlock.getNumberOfMatches() == 0)   return IdMapper.NOHITS_ID;  if (activeMatches.cardinality() > 0) {    boolean hasDisabledMatches=false;    int numberOfAddresses=0;    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);      int id=matchBlock.getTaxonId();      if (id > 0) {        if (!idMapper.isDisabled(id)) {          final String address=fullTree.getAddress(id);          if (address != null) {            if (numberOfAddresses >= addresses.length) {              String[] tmp=new String[2 * addresses.length];              System.arraycopy(addresses,0,tmp,0,addresses.length);              addresses=tmp;            }            addresses[numberOfAddresses++]=address;          }        } else         hasDisabledMatches=true;      }    }    if (numberOfAddresses == 0 && hasDisabledMatches) {      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);        int id=matchBlock.getTaxonId();        if (id > 0) {          final String address=fullTree.getAddress(id);          if (address != null) {            if (numberOfAddresses >= addresses.length) {              String[] tmp=new String[2 * addresses.length];              System.arraycopy(addresses,0,tmp,0,addresses.length);              addresses=tmp;            }            addresses[numberOfAddresses++]=address;          }        }      }    }    if (numberOfAddresses > 0) {      final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);      int taxId=fullTree.getAddress2Id(address);      if (taxId > 0) {        if (useIdentityFilter) {          taxId=adjustByPercentIdentity(taxId,activeMatches,readBlock,fullTree,name2idMap);        }        return taxId;      }    }  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  public void begin(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int startMask){  myStartX=x;  myStartY=y;  myStartMask=startMask;}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  Object doWork(TaskManager.Task who,Object param){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(PrepareAndCommitJob.class.getName(),"doWork",new Object[]{who,param});  }  Integer res=null;  try {    ParticipantHandle handle=(ParticipantHandle)param;    TransactionParticipant par=null;    int vote=handle.getPrepState();switch (vote) {case COMMITTED:case NOTCHANGED:case ABORTED:case PREPARED:      if (operationsLogger.isLoggable(Level.FINER)) {        operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",new Integer(vote));      }    res=vote;  return res;}if (par == null) par=handle.getParticipant();try {if (!_directCall && attempt(who) > maxtries) {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",new Integer(ABORTED));  }  res=ABORTED;  return res;}} catch (JobException je) {if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",null);}return null;}if (par == null) {if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",null);}return null;}Integer response=null;try {TxnMgrProxy cur=(TxnMgrProxy)tr.mgr;boolean optimize=cur.isEmbeddedMgr();TransactionManager txnManager=optimize ? cur.createLightProxy() : tr.mgr;if (handle.isSuitableForFailover()) {  vote=commitAndPreparePartitionWithEnabledFailover(handle,txnManager,tr.id,_xid);} else {  if (_xid == null) {    vote=par.prepareAndCommit(txnManager,tr.id);  } else {    IRemoteSpace rs=(IRemoteSpace)par;    vote=rs.prepareAndCommit(txnManager,_xid);  }}response=vote;} catch (UnknownTransactionException ute) {if (reCaught != null) {  notifyClient=true;}vote=ABORTED;response=vote;}catch (RemoteException re) {reCaught=re;vote=ABORTED;response=vote;}catch (RuntimeException rte) {vote=ABORTED;response=vote;}if (response != null) {handle.setPrepState(vote);try {  log.write(new PrepareAndCommitRecord(handle,vote));} catch (com.sun.jini.mahalo.log.LogException le) {  if (persistenceLogger.isLoggable(Level.WARNING)) {    persistenceLogger.log(Level.WARNING,"Problem writing PrepareAndCommitRecord.",le);  }}if (operationsLogger.isLoggable(Level.FINER)) {  operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",response);}res=response;return res;}if (operationsLogger.isLoggable(Level.FINER)) {operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"doWork",null);}return null;}  finally {if (_directCall && res != null) {this.results[0]=res;pending=0;}}}  }
class C{  public static final double metersToFeet(double meters){  return meters * METER_TO_FOOT;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  private <Q,R>void recordFinalStatus(JobIdentifier<Q,R> jobId,JobStatus<Q,R> jobStatus){  try {    _jobStatusDAO.updateJobStatus(jobId,jobStatus);  } catch (  Exception e) {    _log.error("Failed to record final status for job: [id={}, status={}]",jobId,jobStatus.getStatus(),e);  }}  }
class C{  public FindSimilarFacesAction findSimilarFace(String faceId,List<String> faceIds,String faceListId,int maxNumOfCandidates){  Validation.validateArray(faceIds,0,1000,new ParameterValidationException("faceIds","length must be between 1 & 1000"));  Validation.validateInt(maxNumOfCandidates,20,new ParameterValidationException("maxNumOfCandidates","length must be between 1 & 20"));  Validation.validateExclusive(faceIds,faceListId,new ParameterValidationException("faceIds","must only supply either faceListId OR a faceId (pass null or empty collection)"));  return new FindSimilarFacesAction(cognitiveContext,faceId,faceIds,faceListId,maxNumOfCandidates);}  }
class C{  private boolean isOn(long flag){  return (options & flag) > 0;}  }
class C{  private void removeAllJointsAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.jointFolder.removeAll.warning"),Messages.getString("menu.context.jointFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllJoints();    }    this.jointFolder.removeAllChildren();    this.model.reload(this.jointFolder);  }}  }
class C{  public FST(InputStream inStream,String encoding) throws IOException {  loadHeaderless(inStream,encoding,false);}  }
class C{  public MacroList(Map<Integer,String> arg){  this.macrosses=arg;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private Names(){}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  public boolean isSplash(){  return splash;}  }
class C{  public boolean addEquipmentId(final Long equipmentId){  if (equipmentId != null && equipmentId > 0) {    return equipmentIds.add(equipmentId);  }  return false;}  }
class C{  public FloatColumn log1p(){  FloatColumn newColumn=FloatColumn.create(name() + "[1og1p]",size());  for (  float value : this) {    newColumn.add((float)Math.log1p(value));  }  return newColumn;}  }
class C{  private void initPresenter(){  this.collectionsPresenter=new CollectionsImplementor(collectionsModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.swipeBackPresenter=new SwipeBackImplementor(this);}  }
class C{  public DownloadObject(Photo photo){  this.photo=photo;}  }
class C{  private int searchForTag(String aName){  if (mTagList == null)   return -1;  int i=0;  Iterator<Tag> it=mTagList.iterator();  while (it.hasNext()) {    Tag tag=it.next();    if (tag.getName().equals(aName))     return i;    i++;  }  return -1;}  }
class C{  @Override public void copy(@NotNull File from,@NotNull File to){  try {    copyTemplateResource(from,to);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static TileGeomResult createTileGeom(List<Geometry> g,Envelope tileEnvelope,GeometryFactory geomFactory,MvtLayerParams mvtLayerParams,IGeometryFilter filter){  final Geometry tileEnvelopeGeom=geomFactory.toGeometry(tileEnvelope);  final AffineTransformation t=new AffineTransformation();  final double xDiff=tileEnvelope.getWidth();  final double yDiff=tileEnvelope.getHeight();  final double xOffset=-tileEnvelope.getMinX();  final double yOffset=-tileEnvelope.getMinY();  t.translate(xOffset,yOffset);  t.scale(1d / (xDiff / (double)mvtLayerParams.extent),-1d / (yDiff / (double)mvtLayerParams.extent));  t.translate(0d,(double)mvtLayerParams.extent);  final List<Geometry> intersectedGeoms=flatIntersection(tileEnvelopeGeom,g);  final List<Geometry> transformedGeoms=new ArrayList<>(intersectedGeoms.size());  Geometry nextTransformGeom;  Object nextUserData;  for (  Geometry nextInterGeom : intersectedGeoms) {    nextUserData=nextInterGeom.getUserData();    nextTransformGeom=t.transform(nextInterGeom);    nextTransformGeom.apply(RoundingFilter.INSTANCE);    nextTransformGeom=TopologyPreservingSimplifier.simplify(nextTransformGeom,.1d);    nextTransformGeom.setUserData(nextUserData);    if (filter.accept(nextTransformGeom)) {      transformedGeoms.add(nextTransformGeom);    }  }  return new TileGeomResult(intersectedGeoms,transformedGeoms);}  }
class C{  private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin rolePlayer){  String other=rolePlayer.getName();  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,other),Fragment.create(null,EDGE_BOUNDED,other,casting)));}  }
class C{  public void removeViewer(IDirectableViewer viewer){  viewers.remove(viewer);  directorListeners.remove(viewer);  ProjectManager.projectWindowChanged(this,viewer,false);  if (viewers.isEmpty())   ProjectManager.removeProject(this);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  protected final Object readResolve(){  return this;}  }
class C{  @VisibleForTesting protected void addOMADownloadToSharedPrefs(String omaInfo){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  omaDownloads.add(omaInfo);  storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void main(String[] args) throws Exception {  List startAudio=new ArrayList();  double[] start=null;  List endAudio=new ArrayList();  double[] end=null;  List referenceAudio=new ArrayList();  int i=0;  String prop;  AudioFormat format=AudioSystem.getAudioInputStream(new File(args[0])).getFormat();  while (!(prop=System.getProperty("audio." + (++i),"args")).equals("args")) {    DoubleDataSource dds=null;    if (prop.startsWith("silence:")) {      double duration=Double.valueOf(prop.substring(prop.indexOf(':') + 1)).doubleValue();      startAudio.add(new AudioDoubleDataSource(new SilenceAudioInputStream(duration,format)));    } else {      AudioInputStream ais=AudioSystem.getAudioInputStream(new File(prop));      if (!format.equals(ais.getFormat()))       ais=AudioSystem.getAudioInputStream(format,ais);      double[] signal=new AudioDoubleDataSource(ais).getAllData();      startAudio.add(new BufferedDoubleDataSource(signal));      referenceAudio.add(new BufferedDoubleDataSource(signal));    }  }  if (startAudio.size() > 0)   start=new SequenceDoubleDataSource(startAudio).getAllData();  while ((prop=System.getProperty("audio." + (++i))) != null) {    DoubleDataSource dds=null;    if (prop.startsWith("silence:")) {      double duration=Double.valueOf(prop.substring(prop.indexOf(':') + 1)).doubleValue();      endAudio.add(new AudioDoubleDataSource(new SilenceAudioInputStream(duration,format)));    } else {      AudioInputStream ais=AudioSystem.getAudioInputStream(new File(prop));      if (!format.equals(ais.getFormat()))       ais=AudioSystem.getAudioInputStream(format,ais);      double[] signal=new AudioDoubleDataSource(ais).getAllData();      endAudio.add(new BufferedDoubleDataSource(signal));      referenceAudio.add(new BufferedDoubleDataSource(signal));    }  }  if (endAudio.size() > 0)   end=new SequenceDoubleDataSource(endAudio).getAllData();  EnergyNormaliser powerNormaliser=null;  if (referenceAudio.size() > 0) {    powerNormaliser=new EnergyNormaliser(new SequenceDoubleDataSource(referenceAudio));    System.err.println("Reference power: " + powerNormaliser.getReferencePower());  }  for (int k=0; k < args.length; k++) {    List result=new ArrayList();    if (start != null) {      result.add(new BufferedDoubleDataSource(start));    }    File inFile=new File(args[k]);    AudioInputStream ais=AudioSystem.getAudioInputStream(inFile);    if (!format.equals(ais.getFormat()))     ais=AudioSystem.getAudioInputStream(format,ais);    DoubleDataSource dds=new AudioDoubleDataSource(ais);    if (powerNormaliser != null)     dds=powerNormaliser.apply(dds);    result.add(dds);    if (end != null) {      result.add(new BufferedDoubleDataSource(end));    }    DoubleDataSource resultDDS=new SequenceDoubleDataSource(result);    AudioInputStream resultStream=new DDSAudioInputStream(resultDDS,format);    String prefix=System.getProperty("prefix","joined_");    String filename=inFile.getName();    filename=prefix + filename.substring(0,filename.lastIndexOf('.')) + ".wav";    File outFile=new File(filename);    AudioSystem.write(resultStream,AudioFileFormat.Type.WAVE,outFile);    System.out.println("Wrote " + outFile.getPath());  }}  }
class C{  public ConsoleDocument(){}  }
class C{  public TypeSpec typeSpec(){  return typeSpec(emptyList());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EXCEED_MAX_ITEM_COUNT(int num0){  return new SM_SYSTEM_MESSAGE(1300760,num0);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (spinner != null) {    expression=getFilterFactory().literal(spinner.getDoubleValue());  }  return expression;}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    short[] tmp=new short[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_CHAR_WAREHOUSE_SIZE_EXTENDED(String value0){  return new SM_SYSTEM_MESSAGE(1300433,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200895,skilltarget,skillcaster,skillname);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static final Capsule scale(Capsule capsule,double scale){  if (capsule == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Capsule(capsule.getLength() * scale,capsule.getCapRadius() * 2.0 * scale);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  overridePendingTransition(0,0);  Scoop.getInstance().apply(this);  setContentView(R.layout.activity_main);  ButterKnife.bind(this);  Scoop.getInstance().bind(this);  setSupportActionBar(mAppBar);}  }
class C{  public static Zmat ahib(Zutmat U,Zmat B) throws JampackException {  int i, j, k;  Z x=new Z();  U.getProperties();  B.getProperties();  if (U.nr != U.nc)   throw new JampackException("Rectangular matrix.");  if (U.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  Zmat X=new Zmat(B);  for (i=0; i < U.nr; i++) {    if (U.re[i][i] == 0.0 && U.im[i][i] == 0)     throw new JampackException("Zero diagonal in solving lower triangular system");    for (j=0; j < B.nc; j++) {      X.put0(i,j,x.Div(X.get0(i,j),x.Conj(U.get0(i,i))));      for (k=i + 1; k < U.nr; k++) {        X.re[k][j]=X.re[k][j] - X.re[i][j] * U.re[i][k] - X.im[i][j] * U.im[i][k];        X.im[k][j]=X.im[k][j] - X.im[i][j] * U.re[i][k] + X.re[i][j] * U.im[i][k];      }    }  }  return X;}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  public PhotosEditQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void checkCanceled(IProgressMonitor monitor){  if (monitor.isCanceled())   throw new OperationCanceledException();}  }
class C{  public MersenneTwister(int seed){  mt=new int[N];  setSeed(seed);}  }
class C{  public Shape rectangle(double x,double y,double width,double height){  m_rect.setFrame(x,y,width,height);  return m_rect;}  }
class C{  @SuppressWarnings("unchecked") protected <T>T mathQuery(String tableName,String[] columns,String[] conditions,Class<T> type){  BaseUtility.checkConditionsCorrect(conditions);  Cursor cursor=null;  T result=null;  try {    cursor=mDatabase.query(tableName,columns,getWhereClause(conditions),getWhereArgs(conditions),null,null,null);    if (cursor.moveToFirst()) {      Class<?> cursorClass=cursor.getClass();      Method method=cursorClass.getMethod(genGetColumnMethod(type),int.class);      result=(T)method.invoke(cursor,0);    }  } catch (  Exception e) {    throw new DataSupportException(e.getMessage());  } finally {    if (cursor != null) {      cursor.close();    }  }  return result;}  }
class C{  boolean shouldPreviousTapResolve(@Nullable URL url){  if (isTapResolveBeyondTheLimit()) {    return false;  }  if (isPromoAvailable()) {    return isBasePageHTTP(url);  }  return true;}  }
class C{  @Override public void add(String... identifiers){  blacklist.addAll(Arrays.asList(identifiers));}  }
class C{  public static double evaluate(double x[],double y[],double z) throws MathIllegalArgumentException {  if (verifyInterpolationArray(x,y,false)) {    return evaluateInternal(x,y,z);  }  final double[] xNew=new double[x.length];  final double[] yNew=new double[y.length];  System.arraycopy(x,0,xNew,0,x.length);  System.arraycopy(y,0,yNew,0,y.length);  MathArrays.sortInPlace(xNew,yNew);  verifyInterpolationArray(xNew,yNew,true);  return evaluateInternal(xNew,yNew,z);}  }
class C{  public FaveAddGroupQuery addGroup(UserActor actor,int groupId){  return new FaveAddGroupQuery(getClient(),actor,groupId);}  }
class C{  public boolean shouldAllowBridgeAccess(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowBridgeAccess(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://");}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static Map<String,Object> sendMailFromScreen(DispatchContext dctx,Map<String,? extends Object> rServiceContext){  Map<String,Object> serviceContext=UtilMisc.makeMapWritable(rServiceContext);  LocalDispatcher dispatcher=dctx.getDispatcher();  String webSiteId=(String)serviceContext.remove("webSiteId");  String bodyText=(String)serviceContext.remove("bodyText");  String bodyScreenUri=(String)serviceContext.remove("bodyScreenUri");  String xslfoAttachScreenLocationParam=(String)serviceContext.remove("xslfoAttachScreenLocation");  String attachmentNameParam=(String)serviceContext.remove("attachmentName");  List<String> xslfoAttachScreenLocationListParam=UtilGenerics.checkList(serviceContext.remove("xslfoAttachScreenLocationList"));  List<String> attachmentNameListParam=UtilGenerics.checkList(serviceContext.remove("attachmentNameList"));  List<String> xslfoAttachScreenLocationList=new LinkedList<String>();  List<String> attachmentNameList=new LinkedList<String>();  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationParam))   xslfoAttachScreenLocationList.add(xslfoAttachScreenLocationParam);  if (UtilValidate.isNotEmpty(attachmentNameParam))   attachmentNameList.add(attachmentNameParam);  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationListParam))   xslfoAttachScreenLocationList.addAll(xslfoAttachScreenLocationListParam);  if (UtilValidate.isNotEmpty(attachmentNameListParam))   attachmentNameList.addAll(attachmentNameListParam);  Locale locale=(Locale)serviceContext.get("locale");  Map<String,Object> bodyParameters=UtilGenerics.checkMap(serviceContext.remove("bodyParameters"));  if (bodyParameters == null) {    bodyParameters=MapStack.create();  }  if (!bodyParameters.containsKey("locale")) {    bodyParameters.put("locale",locale);  } else {    locale=(Locale)bodyParameters.get("locale");  }  String partyId=(String)serviceContext.get("partyId");  if (partyId == null) {    partyId=(String)bodyParameters.get("partyId");  }  String orderId=(String)bodyParameters.get("orderId");  String custRequestId=(String)bodyParameters.get("custRequestId");  bodyParameters.put("communicationEventId",serviceContext.get("communicationEventId"));  NotificationServices.setBaseUrl(dctx.getDelegator(),webSiteId,bodyParameters);  String contentType=(String)serviceContext.remove("contentType");  StringWriter bodyWriter=new StringWriter();  MapStack<String> screenContext=MapStack.create();  screenContext.put("locale",locale);  ScreenRenderer screens=new ScreenRenderer(bodyWriter,screenContext,htmlScreenRenderer);  screens.populateContextForService(dctx,bodyParameters);  screenContext.putAll(bodyParameters);  if (bodyScreenUri != null) {    try {      screens.render(bodyScreenUri);    } catch (    GeneralException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    IOException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    SAXException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    ParserConfigurationException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  boolean isMultiPart=false;  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationList)) {    List<Map<String,? extends Object>> bodyParts=new LinkedList<Map<String,? extends Object>>();    if (bodyText != null) {      bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);      bodyParts.add(UtilMisc.<String,Object>toMap("content",bodyText,"type","text/html"));    } else {      bodyParts.add(UtilMisc.<String,Object>toMap("content",bodyWriter.toString(),"type","text/html"));    }    for (int i=0; i < xslfoAttachScreenLocationList.size(); i++) {      String xslfoAttachScreenLocation=xslfoAttachScreenLocationList.get(i);      String attachmentName="Details.pdf";      if (UtilValidate.isNotEmpty(attachmentNameList) && attachmentNameList.size() >= i) {        attachmentName=attachmentNameList.get(i);      }      isMultiPart=true;      try {        Writer writer=new StringWriter();        MapStack<String> screenContextAtt=MapStack.create();        ScreenRenderer screensAtt=new ScreenRenderer(writer,screenContext,foScreenRenderer);        screensAtt.populateContextForService(dctx,bodyParameters);        screenContextAtt.putAll(bodyParameters);        screensAtt.render(xslfoAttachScreenLocation);        StreamSource src=new StreamSource(new StringReader(writer.toString()));        ByteArrayOutputStream baos=new ByteArrayOutputStream();        Fop fop=ApacheFopWorker.createFopInstance(baos,MimeConstants.MIME_PDF);        ApacheFopWorker.transform(src,null,fop);        baos.flush();        baos.close();        bodyParts.add(UtilMisc.<String,Object>toMap("content",baos.toByteArray(),"type","application/pdf","filename",attachmentName));      } catch (      Exception e) {        Debug.logError(e,"Error rendering PDF attachment for email: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenPdfError",UtilMisc.toMap("errorString",e.toString()),locale));      }      serviceContext.put("bodyParts",bodyParts);    }  } else {    isMultiPart=false;    if (bodyText != null) {      bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);      serviceContext.put("body",bodyText);    } else {      serviceContext.put("body",bodyWriter.toString());    }    if (contentType != null && contentType.equalsIgnoreCase("text/plain")) {      serviceContext.put("contentType","text/plain");    } else {      serviceContext.put("contentType","text/html");    }  }  String subject=(String)serviceContext.remove("subject");  subject=FlexibleStringExpander.expandString(subject,screenContext,locale);  Debug.logInfo("Expanded email subject to: " + subject,module);  serviceContext.put("subject",subject);  serviceContext.put("partyId",partyId);  if (UtilValidate.isNotEmpty(orderId)) {    serviceContext.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(custRequestId)) {    serviceContext.put("custRequestId",custRequestId);  }  if (Debug.verboseOn())   Debug.logVerbose("sendMailFromScreen sendMail context: " + serviceContext,module);  Map<String,Object> result=ServiceUtil.returnSuccess();  Map<String,Object> sendMailResult;  Boolean hideInLog=(Boolean)serviceContext.get("hideInLog");  hideInLog=hideInLog == null ? false : hideInLog;  try {    if (!hideInLog) {      if (isMultiPart) {        sendMailResult=dispatcher.runSync("sendMailMultiPart",serviceContext);      } else {        sendMailResult=dispatcher.runSync("sendMail",serviceContext);      }    } else {      if (isMultiPart) {        sendMailResult=dispatcher.runSync("sendMailMultiPartHiddenInLog",serviceContext);      } else {        sendMailResult=dispatcher.runSync("sendMailHiddenInLog",serviceContext);      }    }  } catch (  Exception e) {    Debug.logError(e,"Error send email:" + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendError",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (ServiceUtil.isError(sendMailResult)) {    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(sendMailResult));  }  result.put("messageWrapper",sendMailResult.get("messageWrapper"));  result.put("body",bodyWriter.toString());  result.put("subject",subject);  result.put("communicationEventId",sendMailResult.get("communicationEventId"));  if (UtilValidate.isNotEmpty(orderId)) {    result.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(custRequestId)) {    result.put("custRequestId",custRequestId);  }  return result;}  }
class C{  private void populateCRSList(){  if (crsDataList.isEmpty()) {    Hints hints=null;    for (    AuthorityFactory factory : ReferencingFactoryFinder.getCRSAuthorityFactories(hints)) {      String authorityCode="";      Citation citation=factory.getAuthority();      if (citation != null) {        @SuppressWarnings("unchecked") Collection<Identifier> identifierList=(Collection<Identifier>)citation.getIdentifiers();        authorityCode=identifierList.iterator().next().getCode();      }      Set<String> codeList;      try {        codeList=factory.getAuthorityCodes(CoordinateReferenceSystem.class);        VendorOptionVersion vendorOptionVersion=VendorOptionManager.getInstance().getDefaultVendorOptionVersion();        for (        String code : codeList) {          String fullCode=String.format("%s:%s",authorityCode,code);          String descriptionText=factory.getDescriptionText(code).toString();          String text=String.format("%s - %s",fullCode,descriptionText);          ValueComboBoxData value=new ValueComboBoxData(fullCode,text,vendorOptionVersion);          crsDataList.add(value);          crsMap.put(fullCode,value);        }      } catch (      NoSuchAuthorityCodeException e) {      }catch (      FactoryException e) {        ConsoleManager.getInstance().exception(this,e);      }    }  }}  }
class C{  public WallEditCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public PhotosGetByIdQuery(VkApiClient client,List<String> photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,Photo.class));  photos(photos);}  }
class C{  public void java_lang_Object_getClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  @Override public void write(char[] chr){}  }
class C{  public synchronized void clearDamage(){  if (m_damageRedraw)   m_clip.reset();}  }
class C{  private void write(String s) throws SAXException {  try {    output.write(s);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public void softRestart(){  if (mediaPlayer != null) {    resetPlayer();    prepare();  }}  }
class C{  public BoardGetTopicsQuery preview(BoardGetTopicsPreview value){  return unsafeParam("preview",value);}  }
class C{  private void updateStoreLocation(){  loadFolderLoc=CarbonDataProcessorUtil.getLocalDataFolderLocation(meta.getDatabaseName(),meta.getTableName(),meta.getTaskNo(),meta.getPartitionID(),meta.getSegmentId() + "",false);}  }
class C{  public static void initManager(Context context){  if (mInstance == null) {    mInstance=new AssetsDatabaseManager(context);  }}  }
class C{  public static <T>T root(@NotNull ScopedFunction<T> scopedFunction){  return push(null,scopedFunction);}  }
class C{  protected BoardDeleteTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public void updateClipPreview(){  clipboardPreview.setText(cth.getPreviewString());  clipboardMaxLength.setText("(" + cth.getMaxLength() + " characters)");}  }
class C{  private static void assignLeftOverBlocks(Map<String,List<Distributable>> outputMap,Set<Distributable> uniqueBlocks,int noOfBlocksPerNode,List<String> activeNodes){  if (activeNodes != null) {    for (    String activeNode : activeNodes) {      List<Distributable> blockLst=outputMap.get(activeNode);      if (null == blockLst) {        blockLst=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      }      populateBlocks(uniqueBlocks,noOfBlocksPerNode,blockLst);      if (blockLst.size() > 0) {        outputMap.put(activeNode,blockLst);      }    }  } else {    for (    Map.Entry<String,List<Distributable>> entry : outputMap.entrySet()) {      List<Distributable> blockLst=entry.getValue();      populateBlocks(uniqueBlocks,noOfBlocksPerNode,blockLst);    }  }  for (  Map.Entry<String,List<Distributable>> entry : outputMap.entrySet()) {    Iterator<Distributable> blocks=uniqueBlocks.iterator();    if (blocks.hasNext()) {      Distributable block=blocks.next();      List<Distributable> blockLst=entry.getValue();      blockLst.add(block);      blocks.remove();    }  }}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (fileName.startsWith("!!!"))   return true;  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.startsWith("BLASTP");}  }
class C{  public void softAssertion(String message){  fail();  logEntries.add(new SoftAssertionFailedEntry(message));}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public void addHostAndIncludeSystemHost(String hostIdentifier){  query.append(" +(conhost:SYSTEM_HOST conhost:" + hostIdentifier + ")");}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public void register(Class<? extends Lang> clazz) throws Exception {  if (clazz == null) {    throw new NullPointerException("argument 'clazz' cannot be null");  }  List<String> fileExtensions=getFileExtensionsFromClass(clazz);  for (int i=fileExtensions.size(); --i >= 0; ) {    String ext=fileExtensions.get(i);    if (langHandlerRegistry.get(ext) == null) {      langHandlerRegistry.put(ext,clazz);    } else {      throw new Exception("cannot override language handler " + ext);    }  }}  }
class C{  public Matrix fitScreen(){  Matrix save=new Matrix();  fitScreen(save);  return save;}  }
class C{  protected String normalizeAppName(String app){  String app2=app.replaceAll("\\W","");  if (app.length() == 0) {    throw new IllegalArgumentException("Bad app name: " + app);  }  return app2;}  }
class C{  public MarketEditAlbumQuery editAlbum(UserActor actor,int ownerId,int albumId,String title){  return new MarketEditAlbumQuery(getClient(),actor,ownerId,albumId,title);}  }
class C{  public static double min(double a,double b){  return (a <= b) ? a : b;}  }
class C{  private Object parseElementRaw(Node element) throws ParseException {  ElementType type=ElementType.valueOf(element.getNodeName().toUpperCase());switch (type) {case INTEGER:    return parseInt(getValue(element));case REAL:  return Double.valueOf(getValue(element));case STRING:return getValue(element);case DATE:return this.m_dateFormat.parse(getValue(element));case DATA:return base64decode(getValue(element));case ARRAY:return parseArray(element.getChildNodes());case TRUE:return Boolean.TRUE;case FALSE:return Boolean.FALSE;case DICT:return parseDict(element.getChildNodes());default :throw new RuntimeException("Unexpected type: " + element.getNodeName());}}  }
class C{  public static double deviation(Iterator tuples,String field,double mean){  try {    int count=0;    double sumsq=0;    double x;    while (tuples.hasNext()) {      x=((Tuple)tuples.next()).getDouble(field) - mean;      sumsq+=x * x;      ++count;    }    return Math.sqrt(sumsq / count);  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  public AppsGetCatalogQuery(VkApiClient client,UserActor actor,int count){  super(client,"apps.getCatalog",GetCatalogResponse.class);  accessToken(actor.getAccessToken());  count(count);}  }
class C{  public static S2Cap fromAxisArea(S2Point axis,double area){  return new S2Cap(axis,area / (2 * S2.M_PI));}  }
class C{  public DOMStringListImpl(ArrayList params){  fStrings=params;}  }
class C{  public void scale(double scaleFactor){  for (  K key : keySet()) {    Counter<V> counts=getCounter(key);    counts.scale(scaleFactor);  }}  }
class C{  @Override public void createRaster(Symbolizer symbolizer){}  }
class C{  public boolean isApplicable(){  return getViewer() != null;}  }
class C{  @Override @Timed public void updateBucketAssignmentCount(Experiment experiment,Assignment assignment,boolean countUp){  Bucket.Label bucketLabel=assignment.getBucketLabel();  Bucket.Label bucketLabel1=null;  String CQL;  bucketLabel1=(bucketLabel == null) ? Bucket.Label.valueOf("NULL") : bucketLabel;  if (countUp) {    CQL="UPDATE bucket_assignment_counts SET bucket_assignment_count = bucket_assignment_count + 1 " + "WHERE experiment_id =? and bucket_label = ?";  } else {    CQL="UPDATE bucket_assignment_counts SET bucket_assignment_count = bucket_assignment_count - 1 " + "WHERE experiment_id =? and bucket_label = ?";  }  try {    driver.getKeyspace().prepareQuery(keyspace.bucketAssignmentCountsCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(experiment.getID(),ExperimentIDSerializer.get()).withByteBufferValue(bucketLabel1,BucketLabelSerializer.get()).execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not update the bucket count for experiment " + experiment.getID() + " bucket "+ bucketLabel1.toString(),e);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public synchronized final void close(){  _closed=true;  if (_leaseReaperDaemon != null)   _leaseReaperDaemon.clean();}  }
class C{  public void createSite(){  creteSiteButton.click();}  }
class C{  public static boolean instanceOf(Class<?> objectClass,String typeName,ClassLoader loader){  Class<?> infoClass=loadInfoClass(typeName,loader);  if (infoClass == null)   throw new IllegalArgumentException("Illegal type found in info map (could not load class for specified type)");  return instanceOf(objectClass,infoClass);}  }
class C{  public static long retryInfinitelyLong(final Callable<Long> callable){  return longResponseRetryer.retryInfinitely(callable);}  }
class C{  void mutateField(Local left,String field){  Iterator it=locals.get(left).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isInside())     mutated.put(n,field);  }  if (doCheck)   sanityCheck();}  }
class C{  public static void disable(String event){  instance.disabled.add(event);  log(event + " disabled");}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getNumberOfSequences() > 0;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @Deprecated public ShapelessRecipe removeIngredient(int count,Material ingredient,int rawdata){  Iterator<ItemStack> iterator=ingredients.iterator();  while (count > 0 && iterator.hasNext()) {    ItemStack stack=iterator.next();    if (stack.getType() == ingredient && stack.getDurability() == rawdata) {      iterator.remove();      count--;    }  }  return this;}  }
class C{  public int order(){  return soot.PhaseOptions.getInt(options,"order");}  }
class C{  public boolean hasProgramStage(){  return programStage != null;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public void publish(long sequence){  sequencer.publish(sequence);}  }
class C{  protected MsSqlDatabaseType(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_CHANGE_LEADER_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1400588,value0);}  }
class C{  public void clear(){  entries.clear();  if (filteredEntries != null) {    filteredEntries.clear();  }  if (entryLookup != null) {    entryLookup.clear();  }  logCount=0;  warningCount=0;  errorCount=0;}  }
class C{  public double optDouble(int index){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return 0.0;  if (token.type == LazyNode.VALUE_NULL)   return 0.0;  return token.getDoubleValue(cbuf);}  }
class C{  public InventoryException(){  super();}  }
class C{  static float distance(Rectangle a,Rectangle b){  float ax1, ax2, ay1, ay2;  float bx1, bx2, by1, by2;  ax1=a.x;  ax2=a.x + a.width;  ay1=a.y;  ay2=a.y + a.height;  bx1=b.x;  bx2=b.x + b.width;  by1=b.y;  by2=b.y + b.height;  float xdiff11=Math.abs(ax1 - bx1);  float xdiff12=Math.abs(ax1 - bx2);  float xdiff21=Math.abs(ax2 - bx1);  float xdiff22=Math.abs(ax2 - bx2);  float ydiff11=Math.abs(ay1 - by1);  float ydiff12=Math.abs(ay1 - by2);  float ydiff21=Math.abs(ay2 - by1);  float ydiff22=Math.abs(ay2 - by2);  float xmin=Math.min(Math.min(xdiff11,xdiff12),Math.min(xdiff21,xdiff22));  float ymin=Math.min(Math.min(ydiff11,ydiff12),Math.min(ydiff21,ydiff22));  boolean yOverlap=ay1 <= by2 && by1 <= ay2;  boolean xOverlap=ax1 <= bx2 && bx1 <= ax2;  float xReturn=(yOverlap) ? xmin : (float)Math.hypot(xmin,ymin);  float yReturn=(xOverlap) ? ymin : (float)Math.hypot(xmin,ymin);  return Math.min(xReturn,yReturn);}  }
class C{  private void handleDoubleClick(DoubleClickEvent e){  ISelection selection=e.getSelection();  if (selection instanceof IStructuredSelection) {    IStructuredSelection structured=(IStructuredSelection)selection;    if (structured.size() == 1) {      Object first=structured.getFirstElement();      if (first instanceof ISVNRemoteFile) {        openAction.selectionChanged(null,selection);        openAction.run(null);      } else {        treeViewer.setExpandedState(first,!treeViewer.getExpandedState(first));      }    }  }}  }
class C{  public static long min(final long a,final long b){  return (a <= b) ? a : b;}  }
class C{  @Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){  this.vendorOptionVersionList=vendorOptionVersionsList;  updateVendorOptionPanels();}  }
class C{  @Override public void onFailure(){}  }
class C{  public Builder stepNumberBackgroundColor(int stepNumberBackgroundColor){  this.stepNumberBackgroundColor=stepNumberBackgroundColor;  return this;}  }
class C{  public int size(){  final Segment<K,V>[] segments=this.segments;  long sum=0;  long check=0;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      sum+=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;    }    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        check+=segments[i].count;        if (mc[i] != segments[i].modCount) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segments.length; ++i)     segments[i].lock();    for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE; else   return (int)sum;}  }
class C{  public LockableFileWriter(File file,Charset encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_old_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  protected int createInstances(DelegateExecution execution){  int nrOfInstances=resolveNrOfInstances(execution);  if (nrOfInstances < 0) {    throw new ActivitiIllegalArgumentException("Invalid number of instances: must be non-negative integer value" + ", but was " + nrOfInstances);  }  execution.setMultiInstanceRoot(true);  setLoopVariable(execution,NUMBER_OF_INSTANCES,nrOfInstances);  setLoopVariable(execution,NUMBER_OF_COMPLETED_INSTANCES,0);  setLoopVariable(execution,NUMBER_OF_ACTIVE_INSTANCES,nrOfInstances);  List<DelegateExecution> concurrentExecutions=new ArrayList<DelegateExecution>();  for (int loopCounter=0; loopCounter < nrOfInstances; loopCounter++) {    DelegateExecution concurrentExecution=Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity)execution);    concurrentExecution.setCurrentFlowElement(activity);    concurrentExecution.setActive(true);    concurrentExecution.setScope(false);    concurrentExecutions.add(concurrentExecution);    logLoopDetails(concurrentExecution,"initialized",loopCounter,0,nrOfInstances,nrOfInstances);  }  for (int loopCounter=0; loopCounter < nrOfInstances; loopCounter++) {    DelegateExecution concurrentExecution=concurrentExecutions.get(loopCounter);    if (concurrentExecution.isActive() && !concurrentExecution.isEnded() && concurrentExecution.getParent().isActive()&& !concurrentExecution.getParent().isEnded()) {      setLoopVariable(concurrentExecution,getCollectionElementIndexVariable(),loopCounter);      executeOriginalBehavior(concurrentExecution,loopCounter);    }  }  if (!concurrentExecutions.isEmpty()) {    ExecutionEntity executionEntity=(ExecutionEntity)execution;    executionEntity.setActive(false);  }  return nrOfInstances;}  }
class C{  public DefaultScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int from,int size){  super(hQuery,sessionFactory,fetchSize,from,size);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_POLISH_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1401648,descriptionId);}  }
class C{  protected DocsGetByIdQuery docs(List<String> value){  return unsafeParam("docs",value);}  }
class C{  public Builder offset(Point offset){  this.offset=offset;  return this;}  }
class C{  public NullWriter(){}  }
class C{  @Override protected void onDetachedFromWindow(){  super.onDetachedFromWindow();  if (mReceiver != null) {    mContext.unregisterReceiver(mReceiver);  }}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  private int nextToken() throws XNIException {  if (fCurrentTokenIndex == fTokenCount)   reportError("XPointerElementSchemeProcessingError",null);  return fTokens[fCurrentTokenIndex++];}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200867,skillcaster,num0,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_BUDDY_LOGON(String value0){  return new SM_SYSTEM_MESSAGE(1300890,value0);}  }
class C{  long[] requestTime(String ntpHost,int timeoutInMillis) throws IOException {  DatagramSocket socket=null;  try {    byte[] buffer=new byte[NTP_PACKET_SIZE];    InetAddress address=InetAddress.getByName(ntpHost);    DatagramPacket request=new DatagramPacket(buffer,buffer.length,address,NTP_PORT);    _writeVersion(buffer);    long requestTime=System.currentTimeMillis();    long requestTicks=SystemClock.elapsedRealtime();    _writeTimeStamp(buffer,INDEX_TRANSMIT_TIME,requestTime);    socket=new DatagramSocket();    socket.setSoTimeout(timeoutInMillis);    socket.send(request);    long t[]=new long[RESPONSE_INDEX_SIZE];    DatagramPacket response=new DatagramPacket(buffer,buffer.length);    socket.receive(response);    long responseTicks=SystemClock.elapsedRealtime();    t[RESPONSE_INDEX_RESPONSE_TICKS]=responseTicks;    long originateTime=_readTimeStamp(buffer,INDEX_ORIGINATE_TIME);    long receiveTime=_readTimeStamp(buffer,INDEX_RECEIVE_TIME);    long transmitTime=_readTimeStamp(buffer,INDEX_TRANSMIT_TIME);    long responseTime=requestTime + (responseTicks - requestTicks);    t[RESPONSE_INDEX_ORIGINATE_TIME]=originateTime;    t[RESPONSE_INDEX_RECEIVE_TIME]=receiveTime;    t[RESPONSE_INDEX_TRANSMIT_TIME]=transmitTime;    t[RESPONSE_INDEX_RESPONSE_TIME]=responseTime;    long rootDelay=_read(buffer,INDEX_ROOT_DELAY);    t[RESPONSE_INDEX_ROOT_DELAY]=rootDelay;    if (rootDelay > 100) {      throw new InvalidNtpServerResponseException("Invalid response from NTP server. Root delay violation " + rootDelay);    }    long rootDispersion=_read(buffer,INDEX_ROOT_DISPERSION);    t[RESPONSE_INDEX_DISPERSION]=rootDispersion;    if (rootDispersion > 100) {      throw new InvalidNtpServerResponseException("Invalid response from NTP server. Root dispersion violation " + rootDispersion);    }    final byte mode=(byte)(buffer[0] & 0x7);    if (mode != 4 && mode != 5) {      throw new InvalidNtpServerResponseException("untrusted mode value for TrueTime: " + mode);    }    final int stratum=buffer[1] & 0xff;    t[RESPONSE_INDEX_STRATUM]=stratum;    if (stratum < 1 || stratum > 15) {      throw new InvalidNtpServerResponseException("untrusted stratum value for TrueTime: " + stratum);    }    final byte leap=(byte)((buffer[0] >> 6) & 0x3);    if (leap == 3) {      throw new InvalidNtpServerResponseException("unsynchronized server responded for TrueTime");    }    long delay=Math.abs((responseTime - originateTime) - (transmitTime - receiveTime));    if (delay >= 100) {      throw new InvalidNtpServerResponseException("Server response delay too large for comfort " + delay);    }    long timeElapsedSinceRequest=Math.abs(originateTime - System.currentTimeMillis());    if (timeElapsedSinceRequest >= 10_000) {      throw new InvalidNtpServerResponseException("Request was sent more than 10 seconds back " + timeElapsedSinceRequest);    }    _sntpInitialized=true;    TrueLog.i(TAG,"---- SNTP successful response from " + ntpHost);    cacheTrueTimeInfo(t);    return t;  } catch (  Exception e) {    TrueLog.d(TAG,"---- SNTP request failed for " + ntpHost);    throw e;  } finally {    if (socket != null) {      socket.close();    }  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  void onDragDismissed(){}  }
class C{  BitSetIterator(long[] bits){  this.bits=bits;  index=0;  while (index < bits.length && bits[index] == 0L)   index++;  if (index < bits.length)   save=bits[index];}  }
class C{  public void testDoubleField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public boolean connectsToEmergencyNumber(String number,String regionCode){  return matchesEmergencyNumberHelper(number,regionCode,true);}  }
class C{  public Future execute(CompletionCallback<Object> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.cond_,this.task_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  private void checkForControlCommand(){  String command="";  boolean quitHandlerFired=false;  IWantToQuit quitHandler=(currentMissionBehaviour() != null) ? currentMissionBehaviour().quitProducer : null;  command=ClientStateMachine.this.controlInputPoller.getCommand();  while (command != null && command.length() > 0 && !quitHandlerFired) {    boolean handled=handleCommand(command);    command=ClientStateMachine.this.controlInputPoller.getCommand();    if (command != null && command.length() > 0 && handled)     quitHandlerFired=(quitHandler != null && quitHandler.doIWantToQuit(currentMissionInit()));  }}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigColourMap copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigColourMap(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public long readLong() throws IOException {  if (ins.read(bytes,0,8) < 8)   throw new IOException("buffer underflow");  return (((long)bytes[0] & 0xFF)) | (((long)bytes[1] & 0xFF) << 8) | (((long)bytes[2] & 0xFF) << 16)| (((long)bytes[3] & 0xFF) << 24)| (((long)bytes[4] & 0xFF) << 32)| (((long)bytes[5] & 0xFF) << 40)| (((long)bytes[6] & 0xFF) << 48)| (((long)bytes[7] & 0xFF) << 56);}  }
class C{  public boolean isBatchingAckTrackerEmpty(){  return batchMessageAckTracker.isEmpty();}  }
class C{  public static double sumDifference(final double[] sample1,final double[] sample2) throws MathIllegalArgumentException {  int n=sample1.length;  MathArrays.checkEqualLength(sample1,sample2);  if (n <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_DIMENSION);  }  double result=0;  for (int i=0; i < n; i++) {    result+=sample1[i] - sample2[i];  }  return result;}  }
class C{  public String[] upload_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_file(group_name,local_filename,file_ext_name,meta_list);}  }
class C{  public static boolean canUseWarehouse(Player player){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseWarehouse.ordinal()]) {    if (!restrictions.canUseWarehouse(player)) {      return false;    }  }  return true;}  }
class C{  protected void flowThrough(FlowSet<SynchronizedRegionFlowPair> in,Unit unit,FlowSet<SynchronizedRegionFlowPair> out){  Stmt stmt=(Stmt)unit;  copy(in,out);  if (unit instanceof AssignStmt) {    boolean isPrep=true;    Iterator<UnitValueBoxPair> uses=slu.getUsesOf((Unit)unit).iterator();    if (!uses.hasNext())     isPrep=false;    while (uses.hasNext()) {      UnitValueBoxPair use=uses.next();      Unit useStmt=use.getUnit();      if (!(useStmt instanceof EnterMonitorStmt) && !(useStmt instanceof ExitMonitorStmt)) {        isPrep=false;        break;      }    }    if (isPrep) {      prepUnits.add(unit);      if (optionPrintDebug) {        G.v().out.println("prep: " + unit.toString());      }      return;    }  }  boolean addSelf=(unit instanceof EnterMonitorStmt);  int nestLevel=0;  Iterator<SynchronizedRegionFlowPair> outIt0=out.iterator();  while (outIt0.hasNext()) {    SynchronizedRegionFlowPair srfp=outIt0.next();    if (srfp.tn.nestLevel > nestLevel && srfp.inside == true)     nestLevel=srfp.tn.nestLevel;  }  RWSet stmtRead=null;  RWSet stmtWrite=null;  Iterator outIt=out.iterator();  boolean printed=false;  while (outIt.hasNext()) {    SynchronizedRegionFlowPair srfp=(SynchronizedRegionFlowPair)outIt.next();    CriticalSection tn=srfp.tn;    if (tn.entermonitor == stmt) {      srfp.inside=true;      addSelf=false;    }    if (srfp.inside == true && (tn.nestLevel == nestLevel || optionOpenNesting == false)) {      printed=true;      if (!tn.units.contains(unit))       tn.units.add(unit);      if (stmt.containsInvokeExpr()) {        String InvokeSig=stmt.getInvokeExpr().getMethod().getSubSignature();        if ((InvokeSig.equals("void notify()") || InvokeSig.equals("void notifyAll()")) && tn.nestLevel == nestLevel) {          if (!tn.notifys.contains(unit))           tn.notifys.add(unit);          if (optionPrintDebug)           G.v().out.print("{x,x} ");        } else         if ((InvokeSig.equals("void wait()") || InvokeSig.equals("void wait(long)") || InvokeSig.equals("void wait(long,int)")) && tn.nestLevel == nestLevel) {          if (!tn.waits.contains(unit))           tn.waits.add(unit);          if (optionPrintDebug)           G.v().out.print("{x,x} ");        }        if (!tn.invokes.contains(unit)) {          tn.invokes.add(unit);          if (optionPrintDebug) {            stmtRead=tasea.readSet(tn.method,stmt,tn,new HashSet());            stmtWrite=tasea.writeSet(tn.method,stmt,tn,new HashSet());            G.v().out.print("{");            if (stmtRead != null) {              G.v().out.print(((stmtRead.getGlobals() != null ? stmtRead.getGlobals().size() : 0) + (stmtRead.getFields() != null ? stmtRead.getFields().size() : 0)));            } else             G.v().out.print("0");            G.v().out.print(",");            if (stmtWrite != null) {              G.v().out.print(((stmtWrite.getGlobals() != null ? stmtWrite.getGlobals().size() : 0) + (stmtWrite.getFields() != null ? stmtWrite.getFields().size() : 0)));            } else             G.v().out.print("0");            G.v().out.print("} ");          }        }      } else       if (unit instanceof ExitMonitorStmt && tn.nestLevel == nestLevel) {        srfp.inside=false;        Stmt nextUnit=stmt;        do {          nextUnit=(Stmt)units.getSuccOf(nextUnit);        } while (nextUnit instanceof JNopStmt);        if (nextUnit instanceof ReturnStmt || nextUnit instanceof ReturnVoidStmt || nextUnit instanceof ExitMonitorStmt) {          tn.earlyEnds.add(new Pair(nextUnit,stmt));        } else         if (nextUnit instanceof GotoStmt) {          tn.end=new Pair(nextUnit,stmt);          tn.after=(Stmt)((GotoStmt)nextUnit).getTarget();        } else         if (nextUnit instanceof ThrowStmt) {          tn.exceptionalEnd=new Pair(nextUnit,stmt);        } else         throw new RuntimeException("Unknown bytecode pattern: exitmonitor not followed by return, exitmonitor, goto, or throw");        if (optionPrintDebug)         G.v().out.print("[0,0] ");      } else {        HashSet uses=new HashSet();        stmtRead=tasea.readSet(method,stmt,tn,uses);        stmtWrite=tasea.writeSet(method,stmt,tn,uses);        tn.read.union(stmtRead);        tn.write.union(stmtWrite);        if (optionPrintDebug) {          G.v().out.print("[");          if (stmtRead != null) {            G.v().out.print(((stmtRead.getGlobals() != null ? stmtRead.getGlobals().size() : 0) + (stmtRead.getFields() != null ? stmtRead.getFields().size() : 0)));          } else           G.v().out.print("0");          G.v().out.print(",");          if (stmtWrite != null) {            G.v().out.print(((stmtWrite.getGlobals() != null ? stmtWrite.getGlobals().size() : 0) + (stmtWrite.getFields() != null ? stmtWrite.getFields().size() : 0)));          } else           G.v().out.print("0");          G.v().out.print("] ");        }      }    }  }  if (optionPrintDebug) {    if (!printed) {      G.v().out.print("[0,0] ");    }    G.v().out.println(unit.toString());    if (stmt.containsInvokeExpr() && stmt.getInvokeExpr().getMethod().getDeclaringClass().toString().startsWith("java.") && stmtRead != null && stmtWrite != null) {      if (stmtRead.size() < 25 && stmtWrite.size() < 25) {        G.v().out.println("        Read/Write Set for LibInvoke:");        G.v().out.println("Read Set:(" + stmtRead.size() + ")"+ stmtRead.toString().replaceAll("\n","\n        "));        G.v().out.println("Write Set:(" + stmtWrite.size() + ")"+ stmtWrite.toString().replaceAll("\n","\n        "));      }    }  }  if (addSelf) {    CriticalSection newTn=new CriticalSection(false,method,nestLevel + 1);    newTn.entermonitor=stmt;    newTn.beginning=(Stmt)units.getSuccOf(stmt);    if (stmt instanceof EnterMonitorStmt)     newTn.origLock=((EnterMonitorStmt)stmt).getOp();    if (optionPrintDebug)     G.v().out.println("Transaction found in method: " + newTn.method.toString());    out.add(new SynchronizedRegionFlowPair(newTn,true));    Iterator<Object> prepUnitsIt=prepUnits.iterator();    while (prepUnitsIt.hasNext()) {      Unit prepUnit=(Unit)prepUnitsIt.next();      Iterator<UnitValueBoxPair> uses=slu.getUsesOf(prepUnit).iterator();      while (uses.hasNext()) {        UnitValueBoxPair use=(UnitValueBoxPair)uses.next();        if (use.getUnit() == (Unit)unit) {          newTn.prepStmt=(Stmt)prepUnit;        }      }    }  }}  }
class C{  public void configPlugin(PluginLoader pluginLoader){}  }
class C{  public ContextExtractor(MarkovOrder markovOrder,String regexpFileName){  this.markovOrder=markovOrder;  this.tokenConverter=new Converter(regexpFileName);}  }
class C{  @Override public Element createElement(String tagName) throws DOMException {  if (errorChecking && !isXMLName(tagName,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new ElementImpl(this,tagName);}  }
class C{  protected BoardGetCommentsQueryWithExtended topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),0);  setChild(new List(),2);  setChild(new Opt(),3);}  }
class C{  public static AnchorPane loadAnchorPane(final FXMLLoader loader){  try {    return (AnchorPane)loader.load();  } catch (  IOException e) {    throw new CriticalException("Cannot load FXML",e);  }}  }
class C{  public static double polynomialPearsonProductMomentCorr(double[] coeffs1,double[] coeffs2){  if (coeffs1 == null || coeffs2 == null)   throw new NullPointerException("Received null argument");  if (coeffs1.length != coeffs2.length)   throw new IllegalArgumentException("Can only compare polynomials with same order");  double[] contour1=Polynomial.generatePolynomialValues(coeffs1,25,0,1);  double[] contour2=Polynomial.generatePolynomialValues(coeffs2,25,0,1);  double meanF01=MathUtils.mean(contour1);  double meanF02=MathUtils.mean(contour2);  double diffF01Sum=0;  double diffF02Sum=0;  double diffProductSum=0;  for (int i=0; i < contour1.length; i++) {    double diffF01=(contour1[i] - meanF01);    double diffF02=(contour2[i] - meanF02);    double diffProduct=diffF01 * diffF02;    diffF01Sum+=(diffF01 * diffF01);    diffF02Sum+=(diffF02 * diffF02);    diffProductSum+=diffProduct;  }  return 1.0 - (diffProductSum / Math.sqrt(diffF01Sum * diffF02Sum));}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public String toString(){  ArrayList fields=new ArrayList(7);  fields.add(codebase);  fields.add(policy);  fields.add(classpath);  fields.add(implClassName);  fields.add(((serverConfigArgs == null) ? null : Arrays.asList(serverConfigArgs)));  fields.add(lifeCycle);  fields.add(servicePreparer);  return fields.toString();}  }
class C{  private static void logThreadStarting(){  if (logger.isTraceEnabled()) {    logger.trace(String.format(ThreadingUtils.STARTING_THREAD,Thread.currentThread().getId(),Thread.currentThread().getName()));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201250,skilltarget,skillname);}  }
class C{  public boolean isZero(){  if (isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,this,newInstance(getZero()));    return false;  }  return (mant[mant.length - 1] == 0) && !isInfinite();}  }
class C{  public float computeAlignmentBitScore(int rawScore){  return (float)((lambda * rawScore - lnK) / LN_2);}  }
class C{  public int size(){  return members.size();}  }
class C{  public void onReset(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onReset();    }  }}  }
class C{  protected void copyBlockDataChunk(DimensionColumnDataChunk[] dimensionColumnDataChunks,int rowNumber,byte[] input){  byte[] data=(byte[])dimensionColumnDataChunks[blockIndex].getCompleteDataChunk();  if (null != dimensionColumnDataChunks[blockIndex].getAttributes().getInvertedIndexes()) {    System.arraycopy(data,dimensionColumnDataChunks[blockIndex].getAttributes().getInvertedIndexesReverse()[rowNumber] * dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize(),input,0,dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize());  } else {    System.arraycopy(data,rowNumber * dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize(),input,0,dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize());  }}  }
class C{  public AccessPath appendFields(SootField[] apFields,Type[] apFieldTypes,boolean taintSubFields){  int offset=this.fields == null ? 0 : this.fields.length;  SootField[] fields=new SootField[offset + (apFields == null ? 0 : apFields.length)];  Type[] fieldTypes=new Type[offset + (apFields == null ? 0 : apFields.length)];  if (this.fields != null) {    System.arraycopy(this.fields,0,fields,0,this.fields.length);    System.arraycopy(this.fieldTypes,0,fieldTypes,0,this.fieldTypes.length);  }  if (apFields != null && apFields.length > 0) {    System.arraycopy(apFields,0,fields,offset,apFields.length);    System.arraycopy(apFieldTypes,0,fieldTypes,offset,apFieldTypes.length);  }  return new AccessPath(this.value,fields,baseType,fieldTypes,taintSubFields);}  }
class C{  private void internalUpdateSymbol(Map<String,String> options,FieldIdEnum field,String key){  FieldConfigBase fieldConfig=fieldConfigManager.get(field);  if (fieldConfig instanceof FieldConfigBoolean) {    internal_updateSymbolBooleanField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigInteger) {    internal_updateSymbolIntegerField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigDouble) {    internal_updateSymbolDoubleField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigEnum) {    internal_updateSymbolEnumField(options,field,key);  } else {    ConsoleManager.getInstance().error(this,"Unsupported field type : " + field + " "+ fieldConfig.getClass().getName());  }}  }
class C{  String nextProducerId(){  return m_sessionID + "_prod_" + m_producersC.increment();}  }
class C{  @Override public boolean isDataPresent(){  return false;}  }
class C{  @NotNull public static ValidationResult validateAndroidNdk(@Nullable File ndkPath,boolean includePathInMessage){  if (ndkPath != null) {    WizardUtils.ValidationResult wizardValidationResult=WizardUtils.validateLocation(ndkPath.getAbsolutePath(),"Android NDK location",false,WritableCheckMode.DO_NOT_CHECK);    if (!wizardValidationResult.isOk()) {      return ValidationResult.error(wizardValidationResult.getFormattedMessage());    }  }  ValidationResult validationResult=validatedSdkPath(ndkPath,"NDK",false,includePathInMessage);  if (validationResult.success && ndkPath != null) {    File toolchainsDirPath=new File(ndkPath,"toolchains");    if (!toolchainsDirPath.isDirectory()) {      String message;      if (includePathInMessage) {        message=String.format("The NDK at\n'%1$s'\ndoes not contain any toolchains.",ndkPath.getPath());      } else {        message="NDK does not contain any toolchains.";      }      return ValidationResult.error(message);    }  }  return validationResult;}  }
class C{  public static void skipFields(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public String sprintf(String x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  public void add(Animation animation){  mAnimations.add(animation);}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  fReadingExternalDTD=true;}  }
class C{  @Override public void flush(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200521,skillcaster,skilltarget,skillname);}  }
class C{  public SiteAdminPage clickYesOnConfirmationWindow(){  siteAdminConfirmationWindow.confirm();  return this;}  }
class C{  public static void unzipFileTo(String file,String dest) throws IOException {  File target=new File(file);  if (!target.exists())   throw new IllegalArgumentException("Archive doesnt exist");  FileInputStream fin=new FileInputStream(target);  int BUFFER=2048;  byte data[]=new byte[BUFFER];  if (file.endsWith(".zip") || file.endsWith(".jar")) {    ZipInputStream zis=new ZipInputStream(fin);    ZipEntry ze=zis.getNextEntry();    while (ze != null) {      String fileName=ze.getName();      File newFile=new File(dest + File.separator + fileName);      if (ze.isDirectory()) {        newFile.mkdirs();        zis.closeEntry();        ze=zis.getNextEntry();        continue;      }      log.info("file unzip : " + newFile.getAbsoluteFile());      FileOutputStream fos=new FileOutputStream(newFile);      int len;      while ((len=zis.read(data)) > 0) {        fos.write(data,0,len);      }      fos.flush();      fos.close();      zis.closeEntry();      ze=zis.getNextEntry();    }    zis.close();  } else   if (file.endsWith(".tar")) {    BufferedInputStream in=new BufferedInputStream(fin);    TarArchiveInputStream tarIn=new TarArchiveInputStream(in);    TarArchiveEntry entry=null;    while ((entry=(TarArchiveEntry)tarIn.getNextEntry()) != null) {      log.info("Extracting: " + entry.getName());      if (entry.isDirectory()) {        File f=new File(dest + File.separator + entry.getName());        f.mkdirs();      } else {        int count;        FileOutputStream fos=new FileOutputStream(dest + File.separator + entry.getName());        BufferedOutputStream destStream=new BufferedOutputStream(fos,BUFFER);        while ((count=tarIn.read(data,0,BUFFER)) != -1) {          destStream.write(data,0,count);        }        destStream.flush();        ;        IOUtils.closeQuietly(destStream);      }    }    tarIn.close();  } else   if (file.endsWith(".tar.gz") || file.endsWith(".tgz")) {    BufferedInputStream in=new BufferedInputStream(fin);    GzipCompressorInputStream gzIn=new GzipCompressorInputStream(in);    TarArchiveInputStream tarIn=new TarArchiveInputStream(gzIn);    TarArchiveEntry entry=null;    while ((entry=(TarArchiveEntry)tarIn.getNextEntry()) != null) {      log.info("Extracting: " + entry.getName());      if (entry.isDirectory()) {        File f=new File(dest + File.separator + entry.getName());        f.mkdirs();      } else {        int count;        FileOutputStream fos=new FileOutputStream(dest + File.separator + entry.getName());        BufferedOutputStream destStream=new BufferedOutputStream(fos,BUFFER);        while ((count=tarIn.read(data,0,BUFFER)) != -1) {          destStream.write(data,0,count);        }        destStream.flush();        IOUtils.closeQuietly(destStream);      }    }    tarIn.close();  } else   if (file.endsWith(".gz")) {    GZIPInputStream is2=new GZIPInputStream(fin);    File extracted=new File(target.getParent(),target.getName().replace(".gz",""));    if (extracted.exists())     extracted.delete();    extracted.createNewFile();    OutputStream fos=FileUtils.openOutputStream(extracted);    IOUtils.copyLarge(is2,fos);    is2.close();    fos.flush();    fos.close();  }}  }
class C{  public static IQueryResultSet<IEntryPacket> aggregate(QueryTemplatePacket template,AggregationSet aggregationSet,IJSpace space,Transaction txn,int modifiers) throws SQLException {  AggregationResult aggregateResult=null;  try {    aggregateResult=((ISpaceProxy)space).aggregate(template,aggregationSet,txn,modifiers);    return convertAggregationResult(aggregationSet,aggregateResult);  } catch (  Exception e) {    throw new SQLException(e.getMessage(),e);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public Pair(ObjTypeFirst oFirst,ObjTypeSecond oSecond){  first=oFirst;  second=oSecond;}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl,String body,Map<String,String> headers,SSLSocketFactory sslSocketFactory) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  URL url=new URL(targetUrl);  HttpURLConnection conn=(HttpURLConnection)url.openConnection();  setRequestMethodUsingWorkaroundForJREBug(conn,method.name());  Operation op=new Operation().addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE);  conn.addRequestProperty(Operation.PRAGMA_HEADER,op.getRequestHeader(Operation.PRAGMA_HEADER));  for (  Entry<String,String> entry : headers.entrySet()) {    conn.addRequestProperty(entry.getKey(),entry.getValue());  }  Set<String> userHeaders=headers.keySet().stream().map(null).collect(Collectors.toSet());  if (!userHeaders.contains(Operation.CONTENT_TYPE_HEADER.toUpperCase())) {    conn.addRequestProperty("Content-type",Operation.MEDIA_TYPE_APPLICATION_JSON);  }  if (!userHeaders.contains(Operation.ACCEPT_HEADER.toUpperCase())) {    conn.addRequestProperty("Accept",Operation.MEDIA_TYPE_APPLICATION_JSON);  }  if (sslSocketFactory != null && UriUtils.HTTPS_SCHEME.equals(url.getProtocol())) {    HttpsURLConnection httpsConn=(HttpsURLConnection)conn;    httpsConn.setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);    httpsConn.setSSLSocketFactory(sslSocketFactory);  } else   if (UriUtils.HTTPS_SCHEME.equals(url.getProtocol())) {    throw new IllegalArgumentException("Https protocol not supported without sslSocketFactory");  }  if (body != null) {    conn.setDoOutput(true);    DataOutputStream dataOut=new DataOutputStream(conn.getOutputStream());    dataOut.writeBytes(body);    dataOut.flush();    dataOut.close();  }  BufferedReader in=null;  try {    try {      in=new BufferedReader(new InputStreamReader(conn.getInputStream(),Utils.CHARSET));    } catch (    Throwable e) {      InputStream errorStream=conn.getErrorStream();      if (errorStream != null) {        in=new BufferedReader(new InputStreamReader(errorStream,Utils.CHARSET));      }    }    StringBuilder stringResponseBuilder=new StringBuilder();    HttpResponse httpResponse=new HttpResponse();    httpResponse.statusCode=conn.getResponseCode();    if (in == null) {      return validateResponse(httpResponse);    }    do {      String line=in.readLine();      if (line == null) {        break;      }      stringResponseBuilder.append(line);    } while (true);    httpResponse.responseBody=stringResponseBuilder.toString();    httpResponse.headers=conn.getHeaderFields();    return validateResponse(httpResponse);  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  private void listAssignmentsRec(PhyloTree tree,Node v,int level,SortedMap<Integer,Integer> level2count,Map<String,Integer> rank2count){  int taxonId=(Integer)(tree.getInfo(v));  if (taxonId == IdMapper.UNASSIGNED_ID || taxonId == IdMapper.NOHITS_ID || taxonId == IdMapper.LOW_COMPLEXITY_ID) {    level2count.put(taxonId,((NodeData)v.getData()).getCountAssigned());  } else {    final Integer count=level2count.get(level);    if (count == null)     level2count.put(level,((NodeData)v.getData()).getCountAssigned()); else     level2count.put(level,count + ((NodeData)v.getData()).getCountAssigned());    final int taxLevel=TaxonomyData.getTaxonomicRank(taxonId);    if (taxLevel != 0) {      String rank=TaxonomicLevels.getName(taxLevel);      if (rank != null) {        final Integer rankCount=rank2count.get(rank);        if (rankCount == null)         rank2count.put(rank,((NodeData)v.getData()).getCountAssigned()); else         rank2count.put(rank,rankCount + ((NodeData)v.getData()).getCountAssigned());      }    }    if (v.getOutDegree() == 0) {      level=-3;      if (count == null)       level2count.put(level,((NodeData)v.getData()).getCountAssigned()); else       level2count.put(level,count + ((NodeData)v.getData()).getCountAssigned());    } else {      for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {        listAssignmentsRec(tree,e.getTarget(),level + 1,level2count,rank2count);      }    }  }}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public static boolean IsMaltOrDiamondSAMFile(File file){  String suffix=Basic.getFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(file.getName()));  if (suffix == null)   return false;  if (!suffix.toLowerCase().equals(".sam"))   return false;  try {    try (FileInputIterator it=new FileInputIterator(file.getPath())){      while (it.hasNext()) {        String aLine=it.next();        if (aLine.startsWith("@")) {          if (aLine.contains("PN:MALT") || (aLine.contains("PN:DIAMOND")))           return true;        } else {          return false;        }      }    }   } catch (  IOException e) {  }  return false;}  }
class C{  protected MessagesEditChatQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public static Object computeRouting(SpaceRemotingInvocation remotingEntry,RemoteRoutingHandler remoteRoutingHandler,MethodInvocation methodInvocation) throws Exception {  Object routing=null;  if (remoteRoutingHandler != null) {    routing=remoteRoutingHandler.computeRouting(remotingEntry);  }  if (routing == null) {    Annotation[][] parametersAnnotations=methodInvocation.getMethod().getParameterAnnotations();    for (int i=0; i < parametersAnnotations.length; i++) {      Annotation[] parameterAnnotations=parametersAnnotations[i];      for (      Annotation parameterAnnotation : parameterAnnotations) {        if (parameterAnnotation instanceof Routing) {          Routing routingAnnotation=(Routing)parameterAnnotation;          if (StringUtils.hasLength(routingAnnotation.value())) {            Object parameter=methodInvocation.getArguments()[i];            if (parameter instanceof SpaceDocument) {              routing=((SpaceDocument)parameter).getProperty(routingAnnotation.value());            } else {              MethodInvoker methodInvoker=new MethodInvoker();              methodInvoker.setTargetObject(parameter);              methodInvoker.setTargetMethod(routingAnnotation.value());              methodInvoker.prepare();              routing=methodInvoker.invoke();            }          } else {            routing=methodInvocation.getArguments()[i];          }          i=parametersAnnotations.length;          break;        }      }    }  }  if (routing == null) {    routing=remotingEntry.hashCode();  }  return routing;}  }
class C{  public SampleAttributeTable mergeSamples(Collection<String> samples,String newName){  SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();  Map<String,Object> attribute2value=new HashMap<>();  for (  String attribute : getAttributeSet()) {    boolean valueMismatch=false;    Object previousValue=null;    for (    String sample : samples) {      Object value=table.get(sample,attribute);      if (value != null) {        if (previousValue == null)         previousValue=value; else         if (!value.equals(previousValue)) {          valueMismatch=true;          break;        }      }    }    if (!valueMismatch && previousValue != null) {      attribute2value.put(attribute,previousValue);    }  }  sampleAttributeTable.addSample(newName,attribute2value,true,true);  return sampleAttributeTable;}  }
class C{  public NewsfeedGetSuggestedSourcesQuery shuffle(Boolean value){  return unsafeParam("shuffle",value);}  }
class C{  public AudioGetPopularQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public ProcessConfigurationUpdate(){}  }
class C{  private void initArrays(){  int keyIndex=0;  for (int i=0; i < 18; i++) {    int data=0;    for (int j=0; j < 4; j++) {      data=(data << 8) | (blowfishKey[keyIndex++] & 0xFF);      if (keyIndex >= blowfishKey.length) {        keyIndex=0;      }    }    pArray[i]=PARRAY_INIT[i] ^ data;  }  byte[] b=new byte[8];  for (int i=0; i < 18; i+=2) {    cipher(b);    pArray[i]=byteArrayToInteger(b,0);    pArray[i + 1]=byteArrayToInteger(b,4);  }  for (int i=0; i < 4; i++) {    initSBox(b,sBoxes[i]);  }}  }
class C{  public static double scalb(final double d,final int n){  if ((n > -1023) && (n < 1024)) {    return d * Double.longBitsToDouble(((long)(n + 1023)) << 52);  }  if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {    return d;  }  if (n < -2098) {    return (d > 0) ? 0.0 : -0.0;  }  if (n > 2097) {    return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;  }  final long bits=Double.doubleToRawLongBits(d);  final long sign=bits & 0x8000000000000000L;  int exponent=((int)(bits >>> 52)) & 0x7ff;  long mantissa=bits & 0x000fffffffffffffL;  int scaledExponent=exponent + n;  if (n < 0) {    if (scaledExponent > 0) {      return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);    } else     if (scaledExponent > -53) {      mantissa|=1L << 52;      final long mostSignificantLostBit=mantissa & (1L << (-scaledExponent));      mantissa>>>=1 - scaledExponent;      if (mostSignificantLostBit != 0) {        mantissa++;      }      return Double.longBitsToDouble(sign | mantissa);    } else {      return (sign == 0L) ? 0.0 : -0.0;    }  } else {    if (exponent == 0) {      while ((mantissa >>> 52) != 1) {        mantissa<<=1;        --scaledExponent;      }      ++scaledExponent;      mantissa&=0x000fffffffffffffL;      if (scaledExponent < 2047) {        return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);      } else {        return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;      }    } else     if (scaledExponent < 2047) {      return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);    } else {      return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;    }  }}  }
class C{  @NonNull private boolean hasGalleryApp(@NonNull Context context){  return isIntentResolvable(getGalleryIntent(),context);}  }
class C{  private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation){  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation);}  }
class C{  public PhotosGetCommentsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void updateIv(){  this.iv=getNewIv(this.iv);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_ENTER_INSTANCE_COOL_TIME_MIN_CLIENT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400038,value0,value1);}  }
class C{  protected BoardGetCommentsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public Dfp newDfp(final long x){  return new Dfp(this,x);}  }
class C{  public void addRefType(RefType type){  nameToClass.put(type.getClassName(),type);}  }
class C{  public static OrSpacePredicate or(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return new OrSpacePredicate(leftPredicate,rightPredicate);}  }
class C{  private void multipleLinearRegression(Matrix datay,Matrix dataX){  Matrix X, y;  try {    X=dataX;    y=datay;    b=X.solve(y);    coeffs=new double[b.getRowDimension()];    for (int j=0; j < b.getRowDimension(); j++) {      coeffs[j]=b.get(j,0);    }    Matrix r=X.times(b).minus(y);    residuals=r.getColumnPackedCopy();    rmse=Math.sqrt(MathUtils.sumSquared(residuals) / residuals.length);    Matrix p=X.times(b);    predictedValues=p.getColumnPackedCopy();    correlation=MathUtils.correlation(predictedValues,y.getColumnPackedCopy());  } catch (  RuntimeException re) {    throw new Error("Error solving Least-square solution: y = X * b");  }}  }
class C{  public void disposeAll(){  for (Iterator it=cache.values().iterator(); it.hasNext(); ) {    Image image=(Image)it.next();    image.dispose();  }  cache.clear();}  }
class C{  public boolean equals(Object other){  if (other instanceof ITypedElement) {    String otherName=((ITypedElement)other).getName();    return getName().equals(otherName);  }  return super.equals(other);}  }
class C{  public FriendsGetRequestsQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"friends.getRequests",GetRequestsExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  protected BoardAddTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  private void newFolder(Fragment triggeringFragment,long parentFolderId,String parentName){  AddEditBookmarkFragment newFolderFragment=AddEditBookmarkFragment.newAddNewFolderInstance(parentFolderId,parentName);  newFolderFragment.setTargetFragment(triggeringFragment,0);  setActionListenerOnAddEdit(newFolderFragment);  getFragmentManager().beginTransaction().hide(triggeringFragment).add(android.R.id.content,newFolderFragment,ADD_FOLDER_FRAGMENT_TAG).addToBackStack(null).commit();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void initializeWith(IntArrayList list,DictionaryMap map){  for (  int key : list) {    add(map.get(key));  }}  }
class C{  private int klattRule3(Element segment){  Element syllable=getSyllable(segment);  if (!isMajIPFinal(syllable)) {    if (isInNucleus(segment)) {      return getPropertyAsInteger("rule3.nucleus");    }  } else   if (isInCoda(segment) && (isLiquid(segment) || isNasal(segment))) {    return getPropertyAsInteger("rule3.coda");  }  return 100;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  private float calculateCenterOffsetForPage(int pageNb){  if (swipeVertical) {    float imageY=-(pageNb * optimalPageHeight);    imageY+=getHeight() / 2 - optimalPageHeight / 2;    return imageY;  } else {    float imageX=-(pageNb * optimalPageWidth);    imageX+=getWidth() / 2 - optimalPageWidth / 2;    return imageX;  }}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  public void addFile(@NotNull File f){  addFile(f,null);}  }
class C{  private FastMathLiteralArrays(){}  }
class C{  public Well44497b(long seed){  super(K,seed);}  }
class C{  public ClusterInfo(){}  }
class C{  public LongColumn(){  this(0,10,0L);}  }
class C{  public PointsToSet reachingObjects(PointsToSet s,SootField f){  return reachingObjects(f);}  }
class C{  public OfferRequirement(String taskType,Collection<TaskInfo> taskInfos,Optional<ExecutorInfo> executorInfoOptional) throws InvalidRequirementException {  this(taskType,taskInfos,executorInfoOptional,Optional.empty());}  }
class C{  public static double quantile(double val,double[] quantiles){  int x1=1;  int x2=quantiles.length;  int i=x2 / 2;  while (x1 < x2) {    if (quantiles[i] == val) {      break;    } else     if (quantiles[i] < val) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return ((double)i) / (quantiles.length - 1);}  }
class C{  @Override public void endEffect(Effect effect){  Creature effected=effect.getEffected();  effected.getGameStats().endEffect(effect);}  }
class C{  private void initDefaultTopBarParams(){  View navigationView=getNavigationView();  int titleMarginLeft=-1;  int titleMarginRight=-1;  if (navigationView != null) {    ViewGroup.LayoutParams params=navigationView.getLayoutParams();    int width=(int)getDimension(XUIConfig.getTopBarNavigationIconWidth());    if (width != params.width) {      titleMarginLeft=width;      params.width=width;      navigationView.setLayoutParams(params);    }    ((ImageView)navigationView).setImageResource(XUIConfig.getTopBarNavigationIcon());  }  View menuView=getMenuView();  if (menuView != null) {    if (menuView instanceof ImageView) {      ViewGroup.LayoutParams params=menuView.getLayoutParams();      int width=(int)getDimension(XUIConfig.getTopBarMenuIconWidth());      if (width != params.width) {        titleMarginRight=width;        params.width=width;        menuView.setLayoutParams(params);      }    } else     if (menuView instanceof TextView) {      ((TextView)menuView).setTextColor(getColor(XUIConfig.getTopBarMenuTextColor()));      ((TextView)menuView).setTextSize(TypedValue.COMPLEX_UNIT_SP,XUIConfig.getTopBarMenuTextSize());    }  }  View titleView=getTitleView();  if (titleView != null) {    ((TextView)titleView).setTextColor(getColor(XUIConfig.getTopBarTitleTextColor()));    ((TextView)titleView).setTextSize(TypedValue.COMPLEX_UNIT_SP,XUIConfig.getTopBarTitleTextSize());    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)titleView.getLayoutParams();    if (titleMarginLeft != -1) {      params.setMargins(titleMarginLeft,0,params.rightMargin,0);    }    if (titleMarginRight != -1) {      params.setMargins(params.leftMargin,0,titleMarginRight,0);    }    titleView.setLayoutParams(params);  }}  }
class C{  @Override public boolean isCritical(){  return true;}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("Blast2RMA");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new BLAST2RMA6()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public VideoGetCatalogQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static Optional<RefreshToken> create(RawAccessJwtToken token,String signingKey){  Jws<Claims> claims=token.parseClaims(signingKey);  List<String> scopes=claims.getBody().get("scopes",List.class);  if (scopes == null || scopes.isEmpty() || !scopes.stream().filter(null).findFirst().isPresent()) {    return Optional.empty();  }  return Optional.of(new RefreshToken(claims));}  }
class C{  public PhotosObject(Context c,Object key,int photosType){  this.adapter=new PhotoAdapter(c,new ArrayList<Photo>());  adapter.setInMyCollection(AuthManager.getInstance().getUsername() != null && AuthManager.getInstance().getUsername().equals(((Collection)key).user.username));  this.service=PhotoService.getService();  this.key=key;  this.photosType=photosType;  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public boolean hasExpr(){  return getExprOpt().getNumChild() != 0;}  }
class C{  public Vector multiply(Vector vec){  x*=vec.x;  y*=vec.y;  z*=vec.z;  return this;}  }
class C{  public boolean hasProgramStatus(){  return programStatus != null;}  }
class C{  public static float toFloat(Object obj){  try {    return Float.parseFloat(obj.toString());  } catch (  Exception e) {    return -1f;  }}  }
class C{  public static int readSwappedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);}  }
class C{  public void waitForClose() throws InterruptedException {  f.channel().closeFuture().sync();}  }
class C{  public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Provoker_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200856,skillcaster,skillname);}  }
class C{  public AudioGetQuery audioIds(List<Integer> value){  return unsafeParam("audio_ids",value);}  }
class C{  public void writeTo(OutputStream out) throws IOException {  out.write(_buffer,0,_count);}  }
class C{  public FriendsDeleteQuery delete(UserActor actor,int userId){  return new FriendsDeleteQuery(getClient(),actor,userId);}  }
class C{  public static boolean isDate(String date){  if (isEmpty(date))   return defaultEmptyOK;  String month;  String day;  String year;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0 || dateSlash1 == dateSlash2)   return false;  month=date.substring(0,dateSlash1);  day=date.substring(dateSlash1 + 1,dateSlash2);  year=date.substring(dateSlash2 + 1);  return isDate(year,month,day);}  }
class C{  public static void gnorm(double c1[],double c2[],int m,double g){  if (g != 0.0) {    double k=1.0 + g * c1[0];    for (; m >= 1; m--)     c2[m]=c1[m] / k;    c2[0]=Math.pow(k,1.0 / g);  } else {    System.arraycopy(c1,1,c2,1,m - 1);    c2[0]=Math.exp(c1[0]);  }}  }
class C{  public GroupsEditPlaceQuery address(String value){  return unsafeParam("address",value);}  }
class C{  public final boolean canGetBoolean(String field){  return m_table.canGetBoolean(field);}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  @Override public Object legal(Metadata<Valid> metadata){  Valid valid=metadata.getAnnotation();  String defaultLegal=valid.legal();  if (!defaultLegal.isEmpty()) {    return safetyCast.with(defaultLegal,metadata.getType());  }  String regex=valid.value();  String result=new Generex(regex).random();  result=result.replace("^","").replace("$","").replace("?","");  if (regex.equals(Valid.Template.ID)) {    if (result.length() > 1 && result.charAt(0) == '0') {      result=result.replaceFirst("0","");    }  }  if (regex.equals(Valid.Template.INT) || regex.equals(Valid.Template.ID) || regex.equals(Valid.Template.NUMBER)) {    if (result.length() > 8) {      result=result.substring(0,7);    }  }  return safetyCast.with(result,metadata.getType());}  }
class C{  public PlacesGetCheckinsQuery(VkApiClient client,UserActor actor){  super(client,"places.getCheckins",GetCheckinsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private static long addAndCheck(long a,long b,String msg){  long ret;  if (a > b) {    ret=addAndCheck(b,a,msg);  } else {    if (a < 0) {      if (b < 0) {        if (Long.MIN_VALUE - b <= a) {          ret=a + b;        } else {          throw new ArithmeticException(msg);        }      } else {        ret=a + b;      }    } else {      if (a <= Long.MAX_VALUE - b) {        ret=a + b;      } else {        throw new ArithmeticException(msg);      }    }  }  return ret;}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  private void performCrop(Uri picUri,int destType,Intent cameraIntent){  try {    Intent cropIntent=new Intent("com.android.camera.action.CROP");    cropIntent.setDataAndType(picUri,"image/*");    cropIntent.putExtra("crop","true");    if (targetWidth > 0) {      cropIntent.putExtra("outputX",targetWidth);    }    if (targetHeight > 0) {      cropIntent.putExtra("outputY",targetHeight);    }    if (targetHeight > 0 && targetWidth > 0 && targetWidth == targetHeight) {      cropIntent.putExtra("aspectX",1);      cropIntent.putExtra("aspectY",1);    }    croppedUri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));    cropIntent.putExtra("output",croppedUri);    if (this.cordova != null) {      this.cordova.startActivityForResult((CordovaPlugin)this,cropIntent,CROP_CAMERA + destType);    }  } catch (  ActivityNotFoundException anfe) {    Log.e(LOG_TAG,"Crop operation not supported on this device");    try {      processResultFromCamera(destType,cameraIntent);    } catch (    IOException e) {      e.printStackTrace();      Log.e(LOG_TAG,"Unable to write to file");    }  }}  }
class C{  @Override public Filter createFilter(){  return new IsGreaterThanOrEqualToExtended();}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  } else {    viewfinderView.drawResultBitmap(barcode);    String Qruid=result.getText().toString().trim();    Intent intent=new Intent();    intent.putExtra("address",Qruid);    setResult(RESULT_OK,intent);  }  CaptureActivity.this.finish();}  }
class C{  public static String formatListToString(List<String> list){  String result="";  for (  String s : list)   result+=s + "\t\t";  result=result.trim();  return result.toUpperCase();}  }
class C{  public double logConditionalProb(String a,String b){  Tuple2<String,String> tuple=new Tuple2<String,String>(a,b);  Double p=bgrams.get(tuple);  if (p != null) {    return p.doubleValue();  } else {    double x=logProb(b);    Tuple2<Double,Double> y=ugrams.get(a);    if (y != null) {      x+=y._2().doubleValue();    }    return x;  }}  }
class C{  public void removeAttribute(String attribute){  if (table.columnKeySet().contains(attribute)) {    attributeOrder.remove(attribute);    attribute2type.keySet().remove(attribute);    table.removeColumn(attribute);  }}  }
class C{  public static void filledPolygon(double[] x,double[] y){  if (x == null)   throw new NullPointerException();  if (y == null)   throw new NullPointerException();  int n1=x.length;  int n2=y.length;  if (n1 != n2)   throw new IllegalArgumentException("arrays must be of the same length");  int n=n1;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  public Optional<Double> max(){  if (isEmpty())   return Optional.empty();  return Optional.of(buckets_.get(buckets_.size() - 1).getRange().getCeil());}  }
class C{  public void clear(){  _listeners.clear();}  }
class C{  @SuppressWarnings("unchecked") @Nullable public static <T>T reproxy(@NotNull Type type,@Nullable T object){  if (object == null) {    return null;  }  if (object instanceof InvocationErrorValue) {    return object;  }  if (type instanceof ParameterizedType) {    ParameterizedType genericType=(ParameterizedType)type;    if (genericType.getRawType() instanceof Class) {      Class<?> genericClass=(Class<?>)genericType.getRawType();      if (Collection.class.isAssignableFrom(genericClass)) {        Collection<Object> collection=(Collection<Object>)object;        Collection<Object> newCollection;        if (genericClass.isAssignableFrom(ArrayList.class)) {          newCollection=Lists.newArrayListWithCapacity(collection.size());        } else         if (genericClass.isAssignableFrom(LinkedHashSet.class)) {          newCollection=Sets.newLinkedHashSet();        } else {          throw new IllegalStateException("Unsupported collection type: " + genericClass.getCanonicalName());        }        Type argument=genericType.getActualTypeArguments()[0];        for (        Object item : collection) {          newCollection.add(reproxy(argument,item));        }        return (T)newCollection;      } else       if (Map.class.isAssignableFrom(genericClass)) {        Map<Object,Object> map=(Map<Object,Object>)object;        Map<Object,Object> newMap=Maps.newLinkedHashMap();        Type keyType=genericType.getActualTypeArguments()[0];        Type valueType=genericType.getActualTypeArguments()[1];        for (        Map.Entry entry : map.entrySet()) {          newMap.put(reproxy(keyType,entry.getKey()),reproxy(valueType,entry.getValue()));        }        return (T)newMap;      } else {        throw new IllegalStateException("Unsupported generic type: " + genericClass.getCanonicalName());      }    } else {      throw new IllegalStateException("Unsupported raw type.");    }  }  if (!isProxyClass(object.getClass())) {    return object;  }  if (getInvocationHandler(object) instanceof WrapperInvocationHandler) {    return object;  }  Class<?>[] interfaces=object.getClass().getInterfaces();  if (interfaces.length != 1) {    throw new IllegalStateException("Cannot 'reproxy' a class with multiple interfaces");  }  Class<?> clazz=interfaces[0];  Object cached=proxyCache.get(object);  if (cached != null) {    return (T)cached;  }  final Map<String,Object> values=Maps.newHashMap();  for (  Method m : clazz.getMethods()) {    try {      if (Modifier.isPublic(m.getModifiers())) {        Object value;        try {          value=m.invoke(object);        } catch (        InvocationTargetException e) {          Throwable cause=e.getCause();          if (cause != null && cause.getMessage() != null) {            value=THROWABLE_CACHE.get(cause.getMessage());            if (value == null) {              value=new InvocationErrorValue(cause);              THROWABLE_CACHE.put(cause.getMessage(),(InvocationErrorValue)value);            }          } else {            value=new InvocationErrorValue(cause);            Logger.getInstance(ProxyUtil.class).error(String.format("Calling %s on %s unexpectedly threw %s",m,object,cause));          }        }        values.put(m.toGenericString().intern(),reproxy(m.getGenericReturnType(),value));      }    } catch (    IllegalAccessException e) {      throw new IllegalStateException("A non public method shouldn't have been called.",e);    }  }  Object proxy=Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new WrapperInvocationHandler(values));  proxyCache.put(object,proxy);  return (T)proxy;}  }
class C{  public Schema build(){  return new Schema(this);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.isUseColors();}  }
class C{  public static Style lightBlue(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_LIGHT_BLUE);  return style;}  }
class C{  public String decryptPin(String pin){  Cipher mwkCipher=this.getCipher(this.getMwkKey(),Cipher.DECRYPT_MODE);  String decryptedPinString=null;  try {    byte[] decryptedEan=mwkCipher.doFinal(StringUtil.fromHexString(pin));    byte[] decryptedPin=getByteRange(decryptedEan,8,8);    decryptedPinString=new String(decryptedPin);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  if (debug) {    Debug.logInfo("decryptPin : " + pin + " / "+ decryptedPinString,module);  }  return decryptedPinString;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_FAILED_OFFLINE_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300551,value0);}  }
class C{  private static void resolvePhpExpression(PhpExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);}  }
class C{  public CircleLayout(String group,double radius){  super(group);  m_radius=radius;}  }
class C{  public FaveGetPostsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegOrDot=false;  boolean secondDot=false;  boolean isExponential=false;  for (; currentIndex < s.length(); currentIndex++) {    boolean isPrevExponential=isExponential;    isExponential=false;    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start && !isPrevExponential) {    foundSeparator=true;    result.mEndWithNegOrDot=true;  }break;case '.':if (!secondDot) {secondDot=true;} else {foundSeparator=true;result.mEndWithNegOrDot=true;}break;case 'e':case 'E':isExponential=true;break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  protected <T extends Enum<?>>void cancelAnimation(Animatable<T> object,T prop){  if (mLayoutAnimations != null) {    mLayoutAnimations.cancel(object,prop);  }}  }
class C{  private static boolean tracksRemote(WorkspaceRoot workspaceRoot){  return getUpstreamSha(workspaceRoot,true) != null;}  }
class C{  private static boolean is32BitJvm(){  Integer bits=Integer.getInteger("sun.arch.data.model");  return bits != null && bits == 32;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BARRIER_BROKEN(String value1,String value0,String subzone2){  return new SM_SYSTEM_MESSAGE(1400327,value1,value0,subzone2);}  }
class C{  public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method,List args){  return new GStaticInvokeExpr(method,args);}  }
class C{  public VideoSaveQuery isPrivate(Boolean value){  return unsafeParam("is_private",value);}  }
class C{  private void hideNotEnabledShareSections(View view){  LinearLayout shareWithUsersSection=(LinearLayout)view.findViewById(R.id.shareWithUsersSection);  LinearLayout shareViaLinkSection=(LinearLayout)view.findViewById(R.id.shareViaLinkSection);  boolean shareViaLinkAllowed=getActivity().getResources().getBoolean(R.bool.share_via_link_feature);  boolean shareWithUsersAllowed=getActivity().getResources().getBoolean(R.bool.share_with_users_feature);  if (!shareViaLinkAllowed) {    shareViaLinkSection.setVisibility(View.GONE);  }  if (!shareWithUsersAllowed) {    shareWithUsersSection.setVisibility(View.GONE);  }}  }
class C{  @Override public boolean waitForYellowStatus(){  if (client == null) {    log.warn("waitForYellowStatus() - client for the ElasticSearch cluster seems to have null value.");    return false;  }  checkYellowStatus();  log.debug("waitForYellowStatus() - Everything is alright.");  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_DODGED_A_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1201096,value0,value1);}  }
class C{  public static Predicate<EmailData> containsText(final String text){  return null;}  }
class C{  public SpringForce(){  this(DEFAULT_SPRING_COEFF,DEFAULT_SPRING_LENGTH);}  }
class C{  public synchronized void begin(Vector2 mousePosition){  this.active=true;  this.beginPosition=mousePosition;}  }
class C{  public Builder scheduler(ScheduledExecutorService executorService){  this._executorService=executorService;  return this;}  }
class C{  public boolean isValid(){  if (categories == null || categories.isEmpty()) {    return false;  }  for (  DataElementCategory category : categories) {    if (category == null || category.getCategoryOptions() == null || category.getCategoryOptions().isEmpty()) {      return false;    }  }  return true;}  }
class C{  private static void cloneWorkEffortCostCalcs(DispatchContext dctx,GenericValue userLogin,String routingTaskId,String productionRunTaskId){  List<GenericValue> workEffortCostCalcs=null;  try {    workEffortCostCalcs=EntityUtil.filterByDate(dctx.getDelegator().findByAnd("WorkEffortCostCalc",UtilMisc.toMap("workEffortId",routingTaskId),null,false));  } catch (  GenericEntityException e) {    Debug.logError(e.getMessage(),module);  }  if (workEffortCostCalcs != null) {    for (    GenericValue costCalc : workEffortCostCalcs) {      Map<String,Object> createCostCalc=UtilMisc.toMap("workEffortId",productionRunTaskId,"costComponentTypeId",costCalc.getString("costComponentTypeId"),"costComponentCalcId",costCalc.getString("costComponentCalcId"),"fromDate",costCalc.get("fromDate"),"thruDate",costCalc.get("thruDate"),"userLogin",userLogin);      try {        dctx.getDispatcher().runSync("createWorkEffortCostCalc",createCostCalc);      } catch (      GenericServiceException gse) {        Debug.logError(gse,"Problem calling the createWorkEffortCostCalc service",module);      }      if (Debug.infoOn())       Debug.logInfo("ProductionRun CostCalc for cost calc: " + costCalc.getString("costComponentCalcId") + " created",module);    }  }}  }
class C{  public Set<Value> mayAliases(Value v,Unit u){  Set<Value> res=new HashSet<Value>();  Set<Set<Value>> flow=getFlowBefore(u);  for (  Set<Value> set : flow) {    if (set.contains(v))     res.addAll(set);  }  return res;}  }
class C{  public String addItemGroup(String groupName,String parentGroupNumber){  ShoppingCart.ShoppingCartItemGroup parentGroup=this.getItemGroupByNumber(parentGroupNumber);  ShoppingCart.ShoppingCartItemGroup newGroup=new ShoppingCart.ShoppingCartItemGroup(this.nextGroupNumber,groupName,parentGroup);  this.nextGroupNumber++;  this.itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);  return newGroup.getGroupNumber();}  }
class C{  public CompositePredicate(Predicate p1,Predicate p2){  m_clauses.add(p1);  m_clauses.add(p2);}  }
class C{  public void clean(){  updateTagLock.writeLock().lock();  try {    this.alarms.clear();    this.description=DEFAULT_DESCRIPTION;    this.tagQuality.setInvalidStatus(TagQualityStatus.UNINITIALISED,DEFAULT_DESCRIPTION);    this.serverTimestamp=new Timestamp(0L);    this.daqTimestamp=null;    this.sourceTimestamp=null;    this.tagValue=null;    for (    Long id : processSupervisionStatus.keySet()) {      processSupervisionStatus.put(id,null);    }    for (    Long id : equipmentSupervisionStatus.keySet()) {      equipmentSupervisionStatus.put(id,null);    }    for (    Long id : subEquipmentSupervisionStatus.keySet()) {      subEquipmentSupervisionStatus.put(id,null);    }  }  finally {    updateTagLock.writeLock().unlock();  }}  }
class C{  public boolean matches(String packageRelativePath,boolean isDirectory){  if (isDirectory && element.areDirectoriesExcluded()) {    return false;  }  for (  String exclude : resolveListContents(element.getExcludes())) {    if (UnixGlob.matches(exclude,packageRelativePath)) {      return false;    }  }  for (  String include : resolveListContents(element.getIncludes())) {    if (UnixGlob.matches(include,packageRelativePath)) {      return true;    }  }  return false;}  }
class C{  public static StorableHeadphoneFence unplugging(){  return new StorableHeadphoneFence(UNPLUGGING);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_settings);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,String path){  return execCommand(new String[]{command},isRoot,true,path);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public final Edge locateDirectedEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=null;  try {    vHead=locateVertexInGraph(gGraph,vHead);    if (vHead == null)     return null;    vTail=locateVertexInGraph(gGraph,vTail);    if (vTail == null)     return null;    TreeMap hOutVertices=(TreeMap)Cache.get(vHead.getLabel());    List lEdges;    if (hOutVertices == null) {      lMisses++;      lEdges=getOutgoingEdgesUncached(gGraph,vHead);      if (TimeCnt == Long.MAX_VALUE) {        resetCache();      }      hOutVertices=new TreeMap();      for (      Object elem : lEdges) {        hOutVertices.put(((Edge)elem).getVertexB().getLabel(),elem);        if (((Edge)elem).getVertexB().getLabel().equals(vTail.getLabel()))         eRes=(Edge)elem;      }      Cache.put(vHead.getLabel(),hOutVertices);      ElementAccessTime.put(vHead.getLabel(),++TimeCnt);    } else {      lHits++;      ElementAccessTime.put(vHead.getLabel(),++TimeCnt);    }    CacheAccess.put(TimeCnt,vHead.getLabel());    if (Cache.size() > CacheMaxSize) {      while (true) {        String sVertexLabel=(String)CacheAccess.get(CacheAccess.firstKey());        if ((Long)ElementAccessTime.get(sVertexLabel) > (Long)CacheAccess.firstKey()) {          CacheAccess.remove(CacheAccess.firstKey());        } else {          Cache.remove(sVertexLabel);          CacheAccess.remove(CacheAccess.firstKey());          ElementAccessTime.remove(sVertexLabel);          break;        }      }    } else {      return (Edge)(hOutVertices.get(vTail.getLabel()));    }    return eRes;  } catch (  NullPointerException e) {    return null;  }}  }
class C{  @Override public void unbindDisappearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());  if (appearMap == null) {    return;  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    return;  }  appearData.hasDisappear=false;  if (!appearData.hasAppear) {    appearMap.remove(component.getRef());  }}  }
class C{  private void addDownloadIdToSharedPrefs(int downloadId){  Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);  downloadIds.add(Integer.toString(downloadId));  storeDownloadInfo(DOWNLOAD_NOTIFICATION_IDS,downloadIds);}  }
class C{  public static final String toXml(Simulation simulation){  World world=simulation.getWorld();  Camera camera=simulation.getCamera();  List<SandboxRay> rays=simulation.getRays();  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  sb.append("<Simulation xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.dyn4j.org/Sandbox/sandbox.xsd\" version=\"" + Sandbox.VERSION + "\">");  sb.append(XmlGenerator.toXml());  sb.append("<Camera>");  sb.append("<Scale>").append(camera.getScale()).append("</Scale>");  sb.append(XmlGenerator.toXml(camera.getTranslation(),"Translation"));  sb.append("</Camera>");  sb.append("<Rays>");  int rSize=rays.size();  for (int i=0; i < rSize; i++) {    SandboxRay ray=rays.get(i);    sb.append(XmlGenerator.toXml(ray));  }  sb.append("</Rays>");  sb.append("<World>");  sb.append("<Name>").append(world.getUserData()).append("</Name>");  sb.append(XmlGenerator.toXml(world.getSettings()));  sb.append("<BroadphaseDetector>").append(world.getBroadphaseDetector().getClass().getSimpleName()).append("</BroadphaseDetector>");  sb.append("<NarrowphaseDetector>").append(world.getNarrowphaseDetector().getClass().getSimpleName()).append("</NarrowphaseDetector>");  sb.append("<ManifoldSolver>").append(world.getManifoldSolver().getClass().getSimpleName()).append("</ManifoldSolver>");  sb.append("<TimeOfImpactDetector>").append(world.getTimeOfImpactDetector().getClass().getSimpleName()).append("</TimeOfImpactDetector>");  sb.append(XmlGenerator.toXml(world.getGravity(),"Gravity"));  if (world.getBounds() instanceof AxisAlignedBounds) {    AxisAlignedBounds bounds=(AxisAlignedBounds)world.getBounds();    sb.append("<Bounds>").append("<Width>").append(bounds.getWidth()).append("</Width>").append("<Height>").append(bounds.getHeight()).append("</Height>").append(XmlGenerator.toXml(bounds.getTranslation(),"Translation")).append("</Bounds>");  }  sb.append("<Bodies>");  int bSize=world.getBodyCount();  for (int i=0; i < bSize; i++) {    SandboxBody body=(SandboxBody)world.getBody(i);    sb.append(XmlGenerator.toXml(body));  }  sb.append("</Bodies>");  sb.append("<Joints>");  int jSize=world.getJointCount();  for (int i=0; i < jSize; i++) {    Joint joint=world.getJoint(i);    sb.append(XmlGenerator.toXml(joint));  }  sb.append("</Joints>");  sb.append("</World>");  sb.append("</Simulation>");  return sb.toString();}  }
class C{  public static LinkedHashSet<PhysicalTableDefinition> buildMonthlyTableDefinitions(TestDimensions testDimensions){  return Utils.asLinkedHashSet(new PhysicalTableDefinition(MONTHLY,MONTH.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(OTHER)));}  }
class C{  public DataSourceConnectorComboBoxModel(Map<Class<?>,DataSourceConnectorInterface> dscMap){  this.dscMap=dscMap;  for (  Class<?> key : dscMap.keySet()) {    String displayName=dscMap.get(key).getDisplayName();    dscDisplayNameList.add(displayName);  }}  }
class C{  public boolean isPreheatCacheDefaultFalse(){  return preheatCache == null ? false : preheatCache;}  }
class C{  public NopStmt newNopStmt(){  return new JNopStmt();}  }
class C{  public DriverConfiguration(final String propertyContext){  super();  properties=create(checkNotNull(propertyContext));}  }
class C{  public DocumentNGramHistogram(){  MinSize=3;  MaxSize=5;  DataString="";  NGramHistogram=new HashMap();}  }
class C{  public static Value binopRhs(Unit unit){  return binop(rhs(unit));}  }
class C{  public boolean addEdge(Edge e){  if (!edges.add(e))   return false;  stream.add(e);  Edge position=null;  position=srcUnitToEdge.get(e.srcUnit());  if (position == null) {    srcUnitToEdge.put(e.srcUnit(),e);    position=dummy;  }  e.insertAfterByUnit(position);  position=srcMethodToEdge.get(e.getSrc());  if (position == null) {    srcMethodToEdge.put(e.getSrc(),e);    position=dummy;  }  e.insertAfterBySrc(position);  position=tgtToEdge.get(e.getTgt());  if (position == null) {    tgtToEdge.put(e.getTgt(),e);    position=dummy;  }  e.insertAfterByTgt(position);  return true;}  }
class C{  public void onTaskStop(int taskId,String reason){  PlayerTransferTask task=this.tasks.remove(taskId);  task.status=PlayerTransferTask.STATUS_ERROR;  task.comment=reason;  this.dao.update(task);}  }
class C{  public void updateBoundaries(){  PraatInterval prevInterval=null;  for (int index=0; index < getNumberOfIntervals(); index++) {    PraatInterval interval=getInterval(index);    if (!interval.isComplete()) {      if (prevInterval == null) {        interval.setXmin(0);      } else {        interval.setXmin(prevInterval.getXmax());      }      if (interval.getDuration() == 0.0) {        interval.setDuration(1e-15);      }      interval.setXmax(interval.getXmin() + interval.getDuration());    }    prevInterval=interval;  }}  }
class C{  private SearchJSONResults startMovieFromListRequest(String query) throws InternetConnectionException {  if (isThereInternetConnection(mContext)) {    try {      return mWebServicesApiCallsImpl.getMoviesList(query);    } catch (    RetrofitError e) {      throw new InternetConnectionException(e.getMessage());    }  } else {    throw new InternetConnectionException(mContext.getString(R.string.internet_connection_error));  }}  }
class C{  @Override public final void writePos(final Point s){  writeShort(s.x);  writeShort(s.y);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (mCamera == null) {    mCamera=Camera.open();    if (mCamera == null) {      throw new IOException();    }    mCamera.setPreviewDisplay(holder);    if (!mInitialized) {      mInitialized=true;      mConfigManager.initFromCameraParameters(mCamera);    }    mConfigManager.setDesiredCameraParameters(mCamera);  }}  }
class C{  public static void initKit(){  CONFIG=new Configuration(JarServiceProvider.readProperties("jsyntaxpane.config"));  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  String[] fonts=ge.getAvailableFontFamilyNames();  Arrays.sort(fonts);  if (Arrays.binarySearch(fonts,"Courier new") >= 0) {    DEFAULT_FONT=new Font("Courier New",Font.PLAIN,12);  } else   if (Arrays.binarySearch(fonts,"Courier") >= 0) {    DEFAULT_FONT=new Font("Courier",Font.PLAIN,12);  } else   if (Arrays.binarySearch(fonts,"Monospaced") >= 0) {    DEFAULT_FONT=new Font("Monospaced",Font.PLAIN,13);  }  Properties kitsForTypes=JarServiceProvider.readProperties("jsyntaxpane.kitsfortypes");  for (  String type : kitsForTypes.stringPropertyNames()) {    String classname=kitsForTypes.getProperty(type);    registerContentType(type,classname);  }  initialized=true;}  }
class C{  public static float readSwappedFloat(byte[] data,int offset){  return Float.intBitsToFloat(readSwappedInteger(data,offset));}  }
class C{  public int inflateByteArray(int numberOfBytes,byte[] source,byte[] target) throws DataFormatException {  if (numberOfBytes == 0)   return 0;  if (numberOfBytes < 0) {    System.arraycopy(source,0,target,0,source.length);    return Math.abs(numberOfBytes);  }  inflater.setInput(source,0,numberOfBytes);  int resultLength=inflater.inflate(target);  inflater.reset();  return resultLength;}  }
class C{  public BOMInputStream(InputStream delegate,ByteOrderMark... boms){  this(delegate,false,boms);}  }
class C{  public int read(ClassificationsFooterRMA3 classificationsFooter,InputReader reader,int classId) throws IOException {  map.clear();  long start=classificationsFooter.getStart(classificationType);  if (start != 0) {    final int numberOfClasses=reader.readInt();    for (int i=0; i < numberOfClasses; i++) {      int currentId=reader.readInt();      int sum=reader.readInt();      reader.skipBytes(8 * sum);      if (currentId == classId) {        map.put(currentId,sum);        break;      }    }  }  return map.size();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200965,skillcaster,skilltarget,skillname);}  }
class C{  static String digestString(byte[] digest){  StringBuffer sb=new StringBuffer(digest.length * 2);  for (int i=0; i < digest.length; i++) {    byte b=digest[i];    sb.append(Character.forDigit((b >> 4) & 0xf,16));    sb.append(Character.forDigit(b & 0xf,16));  }  return sb.toString();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("list assignmentsToLevels");  final String fileName;  if (np.peekMatchIgnoreCase("outFile")) {    np.matchIgnoreCase("outFile=");    fileName=np.getWordFileNamePunctuation();  } else   fileName=null;  np.matchIgnoreCase(";");  final SortedMap<Integer,Integer> level2count=new TreeMap<>();  level2count.put(-3,0);  level2count.put(-2,0);  level2count.put(-1,0);  final SortedMap<String,Integer> rank2count=new TreeMap<>();  final PhyloTree tree=getDir().getMainViewer().getTree();  listAssignmentsRec(tree,tree.getRoot(),0,level2count,rank2count);  final Writer w=new BufferedWriter(fileName == null ? new OutputStreamWriter(System.out) : new FileWriter(fileName));  int count=0;  try {    w.write("########## Begin of level-to-assignment listing for file: " + getDir().getDocument().getMeganFile().getName() + "\n");    w.write("To leaves:  " + level2count.get(-3) + "\n");    w.write("Unassigned: " + level2count.get(-2) + "\n");    w.write("No hits:    " + level2count.get(-1) + "\n");    w.write("Assignments to levels (distance from root):\n");    count+=5;    for (    int level : level2count.keySet()) {      if (level >= 0) {        w.write(level + "\t" + level2count.get(level)+ "\n");        count++;      }    }    w.write("Assignments to taxonomic ranks (where known):\n");    count++;    for (    String rank : TaxonomicLevels.getAllNames()) {      if (rank2count.get(rank) != null) {        w.write(rank + "\t" + rank2count.get(rank)+ "\n");        count++;      }    }    w.write("########## End of level-to-assignment listing\n");    count++;  }  finally {    if (fileName != null)     w.close(); else     w.flush();  }  if (fileName != null && count > 0)   NotificationsInSwing.showInformation(getViewer().getFrame(),"Lines written to file: " + count);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201059,num0,skillname);}  }
class C{  private void createSwitch(polyglot.ast.Switch switchStmt){  polyglot.ast.Expr value=switchStmt.expr();  soot.Value sootValue=base().createAggressiveExpr(value,false,false);  if (switchStmt.elements().size() == 0)   return;  soot.jimple.Stmt defaultTarget=null;  polyglot.ast.Case[] caseArray=new polyglot.ast.Case[switchStmt.elements().size()];  soot.jimple.Stmt[] targetsArray=new soot.jimple.Stmt[switchStmt.elements().size()];  ArrayList<Stmt> targets=new ArrayList<Stmt>();  HashMap<Object,Stmt> targetsMap=new HashMap<Object,Stmt>();  int counter=0;  Iterator it=switchStmt.elements().iterator();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof polyglot.ast.Case) {      soot.jimple.Stmt noop=soot.jimple.Jimple.v().newNopStmt();      if (!((polyglot.ast.Case)next).isDefault()) {        targets.add(noop);        caseArray[counter]=(polyglot.ast.Case)next;        targetsArray[counter]=noop;        counter++;        targetsMap.put(next,noop);      } else {        defaultTarget=noop;      }    }  }  int lowIndex=0;  int highIndex=0;  for (int i=0; i < counter; i++) {    for (int j=i + 1; j < counter; j++) {      if (caseArray[j].value() < caseArray[i].value()) {        polyglot.ast.Case tempCase=caseArray[i];        soot.jimple.Stmt tempTarget=targetsArray[i];        caseArray[i]=caseArray[j];        targetsArray[i]=targetsArray[j];        caseArray[j]=tempCase;        targetsArray[j]=tempTarget;      }    }  }  ArrayList sortedTargets=new ArrayList();  for (int i=0; i < counter; i++) {    sortedTargets.add(targetsArray[i]);  }  boolean hasDefaultTarget=true;  if (defaultTarget == null) {    soot.jimple.Stmt noop=soot.jimple.Jimple.v().newNopStmt();    defaultTarget=noop;    hasDefaultTarget=false;  }  soot.jimple.Stmt sootSwitchStmt;  if (isLookupSwitch(switchStmt)) {    ArrayList values=new ArrayList();    for (int i=0; i < counter; i++) {      if (!caseArray[i].isDefault()) {        values.add(soot.jimple.IntConstant.v((int)caseArray[i].value()));      }    }    soot.jimple.LookupSwitchStmt lookupStmt=soot.jimple.Jimple.v().newLookupSwitchStmt(sootValue,values,sortedTargets,defaultTarget);    Util.addLnPosTags(lookupStmt.getKeyBox(),value.position());    sootSwitchStmt=lookupStmt;  } else {    long lowVal=0;    long highVal=0;    boolean unknown=true;    it=switchStmt.elements().iterator();    while (it.hasNext()) {      Object next=it.next();      if (next instanceof polyglot.ast.Case) {        if (!((polyglot.ast.Case)next).isDefault()) {          long temp=((polyglot.ast.Case)next).value();          if (unknown) {            highVal=temp;            lowVal=temp;            unknown=false;          }          if (temp > highVal) {            highVal=temp;          }          if (temp < lowVal) {            lowVal=temp;          }        }      }    }    soot.jimple.TableSwitchStmt tableStmt=soot.jimple.Jimple.v().newTableSwitchStmt(sootValue,(int)lowVal,(int)highVal,sortedTargets,defaultTarget);    Util.addLnPosTags(tableStmt.getKeyBox(),value.position());    sootSwitchStmt=tableStmt;  }  body.getUnits().add(sootSwitchStmt);  Util.addLnPosTags(sootSwitchStmt,switchStmt.position());  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  it=switchStmt.elements().iterator();  Iterator<Stmt> targetsIt=targets.iterator();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof polyglot.ast.Case) {      if (!((polyglot.ast.Case)next).isDefault()) {        body.getUnits().add(targetsMap.get(next));      } else {        body.getUnits().add(defaultTarget);      }    } else {      polyglot.ast.SwitchBlock blockStmt=(polyglot.ast.SwitchBlock)next;      createBlock(blockStmt);    }  }  if (!hasDefaultTarget) {    body.getUnits().add(defaultTarget);  }  body.getUnits().add((endControlNoop.pop()));}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);  if (null == manager)   return false;  NetworkInfo info=manager.getActiveNetworkInfo();  if (null == info || !info.isAvailable())   return false;  return true;}  }
class C{  public int hashCode(){  return id.hashCode();}  }
class C{  private void handleMultiChannelEncapResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.trace("Process Multi-channel Encapsulation");  if (serialMessage.getMessagePayload().length < offset + 2) {    logger.error("NODE {}: Invalid data length",getNode().getNodeId());    return;  }  CommandClass commandClass;  ZWaveCommandClass zwaveCommandClass;  int originatingEndpointId=serialMessage.getMessagePayloadByte(offset);  int destinationEndpointId=serialMessage.getMessagePayloadByte(offset + 1);  if (useDestEndpointAsSource) {    originatingEndpointId=destinationEndpointId;  }  int commandClassCode=serialMessage.getMessagePayloadByte(offset + 2);  commandClass=CommandClass.getCommandClass(commandClassCode);  if (commandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class 0x%02x",getNode().getNodeId(),commandClassCode));    return;  }  logger.debug(String.format("NODE %d: Requested Command Class = %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClassCode));  ZWaveEndpoint endpoint=endpoints.get(originatingEndpointId);  if (endpoint == null) {    logger.error("NODE {}: Endpoint {} not found. Cannot set command classes.",getNode().getNodeId(),originatingEndpointId);    return;  }  zwaveCommandClass=endpoint.getCommandClass(commandClass);  if (zwaveCommandClass == null) {    logger.warn(String.format("NODE %d: CommandClass %s (0x%02x) not implemented by endpoint %d, fallback to main node.",getNode().getNodeId(),commandClass.getLabel(),commandClassCode,originatingEndpointId));    zwaveCommandClass=getNode().getCommandClass(commandClass);  }  if (zwaveCommandClass == null) {    logger.error(String.format("NODE %d: CommandClass %s (0x%02x) not implemented.",getNode().getNodeId(),commandClass.getLabel(),commandClassCode));    return;  }  logger.debug("NODE {}: Endpoint = {}, calling handleApplicationCommandRequest.",getNode().getNodeId(),originatingEndpointId);  zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 3,originatingEndpointId);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  TContainsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new TContainsExtended();  } else {    filter=new TContainsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public RealVectorFormat(final String prefix,final String suffix,final String separator,final NumberFormat format){  this.prefix=prefix;  this.suffix=suffix;  this.separator=separator;  trimmedPrefix=prefix.trim();  trimmedSuffix=suffix.trim();  trimmedSeparator=separator.trim();  this.format=format;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  public void addSample(String sample,int sampleSize,int srcId,BlastMode blastMode,Map<String,Map<Integer,Integer[]>> classification2class2counts){  getDataTable().addSample(sample,sampleSize,blastMode,srcId,classification2class2counts);}  }
class C{  public DatabaseGetCitiesQuery q(String value){  return unsafeParam("q",value);}  }
class C{  private void openRows(){  String statement="select * from " + currentTable.getEntityType();  try {    currentStatement=connection.prepareStatement(statement,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);    currentRow=currentStatement.executeQuery();    if (!currentRow.first()) {      nextTable();    }  } catch (  SQLException e) {    closeRows();    logger.error("Error in statement " + statement);    throw new RuntimeException(e);  }}  }
class C{  public String toString(){  return "CMUClusterUnitVoice";}  }
class C{  public synchronized void activityStop(){  if (this.spinnerDialog != null) {    this.spinnerDialog.dismiss();    this.spinnerDialog=null;  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public RawConstructorDecl fullCopy(){  RawConstructorDecl tree=(RawConstructorDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));  options.put("minValue",ff.literal("1"));  options.put("maxValue",ff.literal("5"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public int end(){  return start + length;}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units){  this(type,minimum,maximum,precision,updatePeriod,initialValue,units,"","","");}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static boolean createGradleWrapper(@NotNull File projectDirPath) throws IOException {  return createGradleWrapper(projectDirPath,GRADLE_LATEST_VERSION);}  }
class C{  private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from == null) {    return false;  }  if (to.equals(from)) {    return true;  }  Class<?> clazz=$Gson$Types.getRawType(from);  ParameterizedType ptype=null;  if (from instanceof ParameterizedType) {    ptype=(ParameterizedType)from;  }  if (ptype != null) {    Type[] tArgs=ptype.getActualTypeArguments();    TypeVariable<?>[] tParams=clazz.getTypeParameters();    for (int i=0; i < tArgs.length; i++) {      Type arg=tArgs[i];      TypeVariable<?> var=tParams[i];      while (arg instanceof TypeVariable<?>) {        TypeVariable<?> v=(TypeVariable<?>)arg;        arg=typeVarMap.get(v.getName());      }      typeVarMap.put(var.getName(),arg);    }    if (typeEquals(ptype,to,typeVarMap)) {      return true;    }  }  for (  Type itype : clazz.getGenericInterfaces()) {    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {      return true;    }  }  Type sType=clazz.getGenericSuperclass();  return isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap));}  }
class C{  protected PhotosReportQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public boolean isPinRequiredForGC(Delegator delegator){  try {    GenericValue giftCertSettings=getGiftCertSettingFromStore(delegator);    if (giftCertSettings != null) {      if ("Y".equals(giftCertSettings.getString("requirePinCode"))) {        return true;      } else {        return false;      }    } else {      Debug.logWarning("No product store gift certificate settings found for store [" + getProductStoreId() + "]",module);      return true;    }  } catch (  GenericEntityException ex) {    Debug.logError("Error checking if store requires pin number for GC: " + ex.getMessage(),module);    return true;  }}  }
class C{  public void blockingWait(int duration) throws InterruptedException {  Thread.sleep(duration);}  }
class C{  public Matrix Predict(){  return Predict(null);}  }
class C{  public Vector3f divide(Vector3f scalar){  return new Vector3f(x / scalar.x,y / scalar.y,z / scalar.z);}  }
class C{  private void configureRootLogger(String filename){  String file=getLogFile(filename);  RollingFileAppender appender=getRollingFileAppender(file);  Logger.getRootLogger().addAppender(appender);  log.info("Added root logger using file: " + file);}  }
class C{  public StaticScript parameter(String name,Object value){  if (parameters == null) {    parameters=new HashMap<String,Object>();  }  parameters.put(name,value);  return this;}  }
class C{  @Override public void onDraw(Canvas c,RecyclerView parent){switch (orientation) {case VERTICAL_LIST:    drawVertical(c,parent);  break;case HORIZONTAL_LIST:drawHorizontal(c,parent);break;default :break;}}  }
class C{  public void notifyObservers(ObserverType type,Object... object){  List<ActionObserver> tempOnceused=Collections.emptyList();  lock.lock();  try {    if (onceUsedObservers.size() > 0) {      tempOnceused=new ArrayList<ActionObserver>();      Iterator<ActionObserver> iterator=onceUsedObservers.iterator();      while (iterator.hasNext()) {        ActionObserver observer=iterator.next();        if (observer.getObserverType().matchesObserver(type)) {          if (observer.tryUse()) {            tempOnceused.add(observer);            iterator.remove();          }        }      }    }  }  finally {    lock.unlock();  }  for (  ActionObserver observer : tempOnceused) {    notifyAction(type,observer,object);  }  if (observers.size() > 0) {    for (    ActionObserver observer : observers) {      if (observer.getObserverType().matchesObserver(type)) {        notifyAction(type,observer,object);      }    }  }}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public boolean isMaxScaleSet(){  return !ScaleUtil.isNotSet(maxScale);}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  private Object writeReplace(){  return new DataTransferObject(getKey(),getValue());}  }
class C{  public BrightnessSubfilter(int brightness){  this.brightness=brightness;}  }
class C{  public S2CellId nextWrap(){  S2CellId n=next();  if (unsignedLongLessThan(n.id,WRAP_OFFSET)) {    return n;  }  return new S2CellId(n.id - WRAP_OFFSET);}  }
class C{  public MessagesGetLongPollServerQuery(VkApiClient client,Actor actor){  super(client,"messages.getLongPollServer",LongpollParams.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public ComponentConfigBuilder addItemInFieldset(String fieldsetLabel,String itemType,String itemLabel,String value){  String type=String.format("fieldset#%s",itemType);  String label=String.format("%s#%s",fieldsetLabel,itemLabel);  config.add(new ConfigurationEntry(currentTab,type,label,value));  return this;}  }
class C{  public static void main(String[] args){  StdDraw.square(.2,.8,.1);  StdDraw.filledSquare(.8,.8,.2);  StdDraw.circle(.8,.2,.2);  StdDraw.setPenColor(StdDraw.BOOK_RED);  StdDraw.setPenRadius(.02);  StdDraw.arc(.8,.2,.1,200,45);  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BOOK_BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  StdDraw.filledPolygon(x,y);  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.text(0.2,0.5,"black text");  StdDraw.setPenColor(StdDraw.WHITE);  StdDraw.text(0.8,0.8,"white text");}  }
class C{  public DistributedLogClientBuilder handshakeWithClientInfo(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setHandshakeWithClientInfo(enabled);  return newBuilder;}  }
class C{  protected DatabaseGetSchoolsQuery cityId(int value){  return unsafeParam("city_id",value);}  }
class C{  public Future<T>[] waitForResult() throws InterruptedException {  return waitForResult(-1,TimeUnit.MILLISECONDS);}  }
class C{  public ConjugateGradient(final int maxIterations,final double delta,final boolean check){  super(maxIterations);  this.delta=delta;  this.check=check;}  }
class C{  public void MakeEnemy(int kind,int num,int nName){  sKind=kind;  sNum=num;  sUnitName="bubble" + nName;  if (this.map_controler.get_Selection(kind,num) == -1) {    isDead=true;    return;  }  enemy_Img_Number=this.map_controler.get_Enemy_Num(sKind,num);  ResetEnemy();}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ModExpr fullCopy(){  ModExpr tree=(ModExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @SafeVarargs public final void addAll(final T... items){synchronized (mLock) {    Collections.addAll(mList,items);  }  notifyDataSetChanged();}  }
class C{  public void onStop(){  if (mFullscreenManager != null)   mFullscreenManager.removeListener(this);}  }
class C{  @Deployment public void testWhitespaceInExpression(){  runtimeService.startProcessInstanceByKey("inclusiveWhiteSpaceInExpression",CollectionUtil.singletonMap("input",1));}  }
class C{  public int rank(){  return new SingularValueDecomposition(this).rank();}  }
class C{  public Lexicon removeLowFreqWords(int minFreq){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.tf < minFreq) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  private Vector2 findBlock(ToolItem tool,Vector2 position,Vector2 direction,Vector2 origin,float maxReach,float xCount,float yCount){  xCount+=direction.x;  yCount+=direction.y;  boolean newVal=false;  if (xCount >= 1 || xCount <= -1) {    xCount=0;    position.add((direction.x < 0 ? -1 : 1) * ChunkManager.TILE_SIZE,0);    newVal=true;  }  if (yCount >= 1 || yCount <= -1) {    yCount=0;    position.add(0,(direction.y < 0 ? -1 : 1) * ChunkManager.TILE_SIZE);    newVal=true;  }  if (origin.dst(position) > maxReach) {    return null;  }  if (!newVal) {    return findBlock(tool,position,direction,origin,maxReach,xCount,yCount);  }  int tx=pixelToTilePosition(position.x);  int ty=pixelToTilePosition(position.y);  BlockType type=getBlockFromTilePos(tx,ty);  if ((tool != null && type != BlockType.AIR)) {    if (tool.canDamageBlock(type)) {      return Vector2Factory.instance.getVector2(tx,ty);    } else {      return null;    }  } else   if (tool == null && type != BlockType.AIR) {    return Vector2Factory.instance.getVector2(tx,ty);  } else {    return findBlock(tool,position,direction,origin,maxReach,xCount,yCount);  }}  }
class C{  public void saveSpeakers(RealmList<Speakers> speakers){  if (speakers != null) {    mRealm.beginTransaction();    mRealm.copyToRealm(speakers);    mRealm.commitTransaction();  }}  }
class C{  public FilterEventsToInMemoryRawDocumentStep(){}  }
class C{  <T>List<T> onFindAll(Class<T> modelClass,boolean isEager,long... ids){  List<T> dataList;  if (isAffectAllLines(ids)) {    dataList=query(modelClass,null,null,null,null,null,"id",null,getForeignKeyAssociations(modelClass.getName(),isEager));  } else {    dataList=query(modelClass,null,getWhereOfIdsWithOr(ids),null,null,null,"id",null,getForeignKeyAssociations(modelClass.getName(),isEager));  }  return dataList;}  }
class C{  public OrdersGetByIdQuery orderIds(List<Integer> value){  return unsafeParam("order_ids",value);}  }
class C{  public static void createPackage(IDexUnit unit,String packagePath){  String processedPath=packagePath.substring(1,packagePath.length() - 1).replace("/",".");  ActionCreatePackageData data=new ActionCreatePackageData();  data.setFqname(processedPath);  ActionContext action=new ActionContext(unit,Actions.CREATE_PACKAGE,0,null);  if (unit.prepareExecution(action,data)) {    unit.executeAction(action,data,false);  }}  }
class C{  VarImpl(Collection<VarAdmin> vars){  VarAdmin first=vars.iterator().next();  this.name=first.getName();  this.userDefinedName=first.isUserDefinedName();  for (  VarAdmin var : vars) {    if (var.isUserDefinedName()) {      this.name=var.getName();    }    var.getProperties().forEach(null);  }}  }
class C{  public ProductScan(Scan s1,Scan s2){  this.s1=s1;  this.s2=s2;  s1.beforeFirst();  isLhsEmpty=!s1.next();}  }
class C{  public PageObjectContext pop(){  return deque.pop();}  }
class C{  public <T7>Pattern7<T1,T2,T3,T4,T5,T6,T7> and(Observable<T7> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern7<T1,T2,T3,T4,T5,T6,T7>(o1,o2,o3,o4,o5,o6,other);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private void removeFailedServers(Set<String> failedServers){  if (!failedServers.isEmpty()) {    for (    String server : failedServers) {      Response<Boolean> leaveResp=clusterService.leaveServer(server);      if (leaveResp.isSuccess() && leaveResp.getData()) {        Logs.info("remove failed server({}) successfully",server);      }    }  }}  }
class C{  public GroupsEditQuery marketComments(Boolean value){  return unsafeParam("market_comments",value);}  }
class C{  public ObjectName preRegister(MBeanServer mbs,ObjectName objName) throws Exception {  m_mbeanServer=mbs;  return objName;}  }
class C{  public static void d(String c,String s){  if (isEnable()) {    if (s == null)     s="\"NULL\"";    Log.d(c,s);  }}  }
class C{  public static void main(String[] args){  Hashtable hmCmd=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  String sBaseDir=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"fromDir","data");  String sOutputDir=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"toDir","newdata");  int iMinNGram=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"minN","1")).intValue();  int iMaxNGram=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"maxN","1")).intValue();  int iDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"dist","1")).intValue();  String sUseMap=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"useMap","");  String sSaveMapTo=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"saveMapTo","");  Hashtable hmEdges=null;  try {    FileInputStream fsIn=new FileInputStream(sUseMap);    ObjectInputStream ois=new ObjectInputStream(fsIn);    if (sUseMap.length() > 0)     hmEdges=(Hashtable)ois.readObject(); else     hmEdges=new Hashtable();    fsIn.close();    ois.close();  } catch (  FileNotFoundException ex) {    System.err.println(sUseMap + " not found. Continuing using an empty map.");    hmEdges=new Hashtable();  }catch (  IOException ex) {    System.err.println(sUseMap + " cannot be read. Continuing using an empty map.");    hmEdges=new Hashtable();    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);    return;  }  DocumentSet ds=new DocumentSet(sBaseDir,1.0);  ds.createSets();  DocumentNGramGraph dngCur=new DocumentNGramGraph(iMinNGram,iMaxNGram,iDist);  Iterator iIter=ds.getTrainingSet().iterator();  while (iIter.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();    dngCur.setDataString("");    try {      dngCur.loadDataStringFromFile(cfeCur.getFileName());      File fDir=new File(sOutputDir + System.getProperty("file.separator") + cfeCur.getCategory());      fDir.mkdir();      File f=new File(cfeCur.getFileName());      String sTarget=sOutputDir + System.getProperty("file.separator") + cfeCur.getCategory()+ System.getProperty("file.separator")+ f.getName();      FileWriter fOut=new FileWriter(sTarget);      fOut.write(dngCur.toCooccurenceText(hmEdges));      fOut.close();      System.err.print(".");    } catch (    IOException ex) {      System.err.println("Could not convert file " + cfeCur.getFileName());      ex.printStackTrace(System.err);    }  }  System.err.println();  if (sSaveMapTo.length() > 0) {    try {      FileOutputStream fo=new FileOutputStream(sSaveMapTo);      ObjectOutputStream oos=new ObjectOutputStream(fo);      oos.writeObject(hmEdges);      fo.close();      oos.close();    } catch (    FileNotFoundException ex) {      System.err.println("Could not save hashmap.");      ex.printStackTrace(System.err);    }catch (    IOException ex) {      System.err.println("Could not save hashmap.");      ex.printStackTrace(System.err);    }  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void drawScreen(int par1,int par2,float par3,boolean drawBackground){  if (this.reinit) {    this.buttonList.clear();    initGui();    this.reinit=false;  }  if (drawBackground)   this.drawDefaultBackground();  this.drawCenteredString(this.fontRendererObj,this.screenTitle,this.width / 2,15,16777215);  super.drawScreen(par1,par2,par3);  if (Math.abs(par1 - this.lastMouseX) <= 5 && Math.abs(par2 - this.lastMouseY) <= 5) {    long delayMs=TOOLTIP_DELAY_MS;    if (System.currentTimeMillis() >= this.mouseStillTimeMs + delayMs) {      int var5=this.width / 2 - 150;      int var6=this.height / 6 - 5;      if (par2 <= var6 + 98) {        var6+=105;      }      int var7=var5 + 150 + 150;      int var8=var6 + 84 + 10;      GuiButton var9=this.getSelectedButton(par1,par2);      if (var9 != null) {        String var10=this.getButtonName(var9.displayString);        String[] var11=this.getTooltipLines(var10,var9.id);        if (var11 == null) {          return;        }        this.drawGradientRect(var5,var6,var7,var8,-536870912,-536870912);        for (int var12=0; var12 < var11.length; ++var12) {          String var13=var11[var12];          this.fontRendererObj.drawString(var13,var5 + 5,var6 + 5 + var12 * 11,14540253);        }      }    }  } else {    this.lastMouseX=par1;    this.lastMouseY=par2;    this.mouseStillTimeMs=System.currentTimeMillis();  }}  }
class C{  public boolean canPowerUp(){  return getCandy() >= getCandyCostsForPowerup() && api.getPlayerProfile().getCurrency(PlayerProfile.Currency.STARDUST) >= getStardustCostsForPowerup();}  }
class C{  public static final void removePlayer(Player player){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    if (alliance.getTeamType().isDefence()) {      VortexService.getInstance().removeDefenderPlayer(player);    }    alliance.onEvent(new PlayerAllianceLeavedEvent(alliance,player));  }}  }
class C{  private void executeJoin(ExpNode exp) throws SQLException {  ColumnNode left=(ColumnNode)exp.getLeftChild();  ColumnNode right=(ColumnNode)exp.getRightChild();  int leftEntryIndex=left.getColumnData().getColumnTableData().getTableIndex();  int rightEntryIndex=right.getColumnData().getColumnTableData().getTableIndex();  Object leftJoinValue=left.getFieldValue(_currentEntry.getEntry(leftEntryIndex));  Object rightJoinValue=right.getFieldValue(_currentEntry.getEntry(rightEntryIndex));  boolean isInRange=exp.isValidCompare(leftJoinValue,rightJoinValue);  setResults(exp,isInRange);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200303,skillname);}  }
class C{  public List<Element> find(String selector){  String[] ss=selector.split(" ");  List<Element> list=new ArrayList<Element>();  list.add(d);  for (  String s : ss) {    if (X.isEmpty(s)) {      continue;    }    list=_find(list,s);  }  return list;}  }
class C{  OptimumImpl(final Evaluation value,final int evaluations,final int iterations){  this.value=value;  this.evaluations=evaluations;  this.iterations=iterations;}  }
class C{  private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {  if (parser.getEventType() != XmlPullParser.START_TAG) {    throw new IllegalStateException();  }  int depth=1;  while (depth != 0) {switch (parser.next()) {case XmlPullParser.END_TAG:      depth--;    break;case XmlPullParser.START_TAG:  depth++;break;}}}  }
class C{  private boolean isDeviceTablet(){  boolean isTablet;  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {    isTablet=false;  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {    isTablet=true;  } else {    Configuration config=getResources().getConfiguration();    isTablet=config.smallestScreenWidthDp >= 720;  }  return isTablet;}  }
class C{  private void destroyPeekPromoControl(){  if (mPeekPromoControl != null) {    mPeekPromoControl.destroy();    mPeekPromoControl=null;  }}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  public void deny(PermissionFlag flag,Message message){  generalPermissions.put(flag,message);}  }
class C{  public BpmOperationResult(){  super();}  }
class C{  public PhotosGetAlbumsQuery needCovers(Boolean value){  return unsafeParam("need_covers",value);}  }
class C{  public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  public static boolean is3G(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {    return true;  }  return false;}  }
class C{  protected NotesAddQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public CompilationUnit addSourceFile(String name){  try {    File classFile=new File(name);    if (classFile.isFile()) {      is=new FileInputStream(classFile);      this.pathName=classFile.getPath();      relativeName=name;      fullName=name;      CompilationUnit u=getCompilationUnit();      if (u != null) {        program.addCompilationUnit(u);        String packageName=u.getPackageDecl();        if (packageName != null && !packages.contains(packageName)) {          packages.add(packageName);          int pos=0;          while (packageName != null && -1 != (pos=packageName.indexOf('.',pos + 1))) {            String n=packageName.substring(0,pos);            if (!packages.contains(n))             packages.add(n);          }        }      }      return u;    }  } catch (  IOException e) {  }  return null;}  }
class C{  public void writeBytes(int position,int num,byte[] buf){  if (buf.length < num) {    throw new PageException("num bytes to write is longer than buffer");  }  if (position < 0 || num < 0) {    throw new PageException("position or num can't be negative");  }  if (Page.pageSize < num + position) {    throw new PageException("writeBytes would go out of bounds");  }  pageData.position(position);  pageData.put(buf,0,num);}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  public static float parseFloat(String text) throws DataParseException {  try {    return Float.parseFloat(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  private void orientationBasedUI(int orientation){  imageColumns=orientation == Configuration.ORIENTATION_PORTRAIT ? 3 : 5;  folderColumns=orientation == Configuration.ORIENTATION_PORTRAIT ? 2 : 4;  int columns=isDisplayingFolderView() ? folderColumns : imageColumns;  layoutManager=new GridLayoutManager(this,columns);  recyclerView.setLayoutManager(layoutManager);  recyclerView.setHasFixedSize(true);  setItemDecoration(columns);}  }
class C{  public static boolean isValidIP6Range(String possibleIPAddress){  return IP6_SUB_PATTERN.matcher(possibleIPAddress).matches();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200676,num0,skillcaster,skillname);}  }
class C{  public LabeledBorder(Border border,JComponent label){  super(border);  this.label=label;  if (label instanceof JLabel && label.getForeground() instanceof ColorUIResource) {    label.setForeground(getTitleColor());  }}  }
class C{  @Ignore("http://wpie20.hot.corp.google.com:8200/builders/ubuntu-studio-master-dev-uitests/builds/28/") @Test public void testResourceCompletion() throws IOException {  guiTest.importSimpleApplication();  ThemeEditorFixture themeEditor=ThemeEditorGuiTestUtils.openThemeEditor(guiTest.ideFrame());  final ThemeEditorTableFixture themeEditorTable=themeEditor.getPropertiesTable();  final TableCell cell=row(3).column(0);  FontFixture cellFont=themeEditorTable.fontAt(cell);  cellFont.requireNotBold();  assertEquals("android:colorBackground",themeEditorTable.attributeNameAt(cell));  assertEquals("@android:color/background_holo_light",themeEditorTable.valueAt(cell));  JTableCellFixture tableCell=themeEditorTable.cell(cell);  ResourceComponentFixture resourceComponent=new ResourceComponentFixture(guiTest.robot(),(ResourceComponent)tableCell.editor());  tableCell.startEditing();  EditorTextFieldFixture textComponent=resourceComponent.getTextField();  textComponent.requireText("@android:color/background_holo_light");  textComponent.enterText("invalid");  tableCell.stopEditing();  Wait.minutes(2).expecting("warning icon to be loaded").until(null);  tableCell.startEditing();  textComponent=resourceComponent.getTextField();  String prefix="@android:color/back";  textComponent.replaceText(prefix);  JListFixture completionPopup=ThemeEditorGuiTestUtils.getCompletionPopup(guiTest.robot());  String[] suggestions=completionPopup.contents();  assertThat(suggestions).isNotEmpty();  for (  String suggestion : suggestions) {    assertThat(suggestion).startsWith(prefix);  }  prefix="@color/back";  textComponent.replaceText(prefix);  completionPopup=ThemeEditorGuiTestUtils.getCompletionPopup(guiTest.robot());  suggestions=completionPopup.contents();  assertThat(suggestions).isNotEmpty();  for (  String suggestion : suggestions) {    assertThat(suggestion).startsWith(prefix);  }  completionPopup.item(0).doubleClick();  tableCell.stopEditing();  assertEquals(suggestions[0],themeEditorTable.valueAt(cell));}  }
class C{  public SelectedSymbol(){  super();}  }
class C{  public void upload(File file) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  upload(file,0,null);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public MetricInstance(FieldName metricName,MetricMaker maker,FieldName... dependencyFields){  this.metricName=metricName.asName();  this.maker=maker;  this.dependencyMetricNames=new ArrayList<>();  for (  FieldName fieldName : dependencyFields) {    this.dependencyMetricNames.add(fieldName.asName());  }}  }
class C{  protected void handleEndElement(QName element,Augmentations augs,boolean isEmpty) throws XNIException {  String eprefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(eprefix);  if (element.uri != null) {    element.prefix=eprefix;  }  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    if (!isEmpty) {      fDocumentHandler.endElement(element,augs);    }  }  fNamespaceContext.popContext();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_SKILL_A_to_B(String skilltarget,String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201172,skilltarget,skillname,skillcaster);}  }
class C{  public Object loadFromFile(final File file) throws XMLException, FileNotFoundException {  if (file == null) {    throw new FileNotFoundException("Cannot load a null file");  } else   if (!file.exists()) {    throw new FileNotFoundException("Cannot load the file from " + file.getAbsolutePath());  }  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(file);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot unmarshal the XML from " + file.getAbsolutePath(),e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot unmarshal the XML from " + file.getAbsolutePath(),e);  }  return readObject;}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  public GeneralException(String msg){  super(msg);}  }
class C{  public boolean equals(Object t){  return this == t;}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  public static void dataReductionProxyUIAction(int action){  assert action >= 0 && action < ACTION_INDEX_BOUNDARY;  RecordHistogram.recordEnumeratedHistogram("DataReductionProxy.UIAction",action,DataReductionProxyUma.ACTION_INDEX_BOUNDARY);}  }
class C{  public void reset(){  fNoNSGrammar=null;  fGrammarRegistry.clear();}  }
class C{  private static String doSubstringReplacement(final SubstringReplaceFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    final String output=details.getReplaceWith();    convertedText=replaceTextAndTags(details,convertedText,input,output);  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  public Viterbi(Relation segs,ClusterUnitDatabase db){  ViterbiPoint last=null;  clunitDB=db;  f=new FeatureSetImpl();  for (Item s=segs.getHead(); true; s=s.getNext()) {    ViterbiPoint n=new ViterbiPoint(s);    if (numStates > 0) {      n.initPathArray(numStates);    }    if (last != null) {      last.next=n;    } else {      timeline=n;    }    last=n;    if (s == null) {      lastPoint=n;      break;    }  }  if (DEBUG) {    debug("num states " + numStates);  }  if (numStates == 0) {    timeline.paths=new ViterbiPath();  }  if (numStates == -1) {    timeline.initPathArray(1);  }}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public void init$Children(){}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (comboBox != null) {      return comboBox.isEnabled();    }  }  return false;}  }
class C{  MessageAcks(boolean queueMode,String destNameToBeAcked){  this.queueMode=queueMode;  acksVec=new Vector();  this.destinationNameToBeAcked=destNameToBeAcked;}  }
class C{  protected void verifyNewTasks(){  FastList<PlayerTransferTask> tasksNew=this.dao.getNew();  log.info("PlayerTransfer perform task init. " + tasks.size() + " new tasks.");  for (  PlayerTransferTask task : tasksNew) {    GameServerInfo server=GameServerTable.getGameServerInfo(task.sourceServerId);    if (server == null || server.getConnection() == null) {      log.error("cannot perform transfer task #" + task.id + " while source server is down #"+ task.sourceServerId);      continue;    }    GameServerInfo targetServer=GameServerTable.getGameServerInfo(task.targetServerId);    if (targetServer == null || targetServer.getConnection() == null) {      log.error("cannot perform transfer task #" + task.id + " while target server is down #"+ task.targetServerId);      continue;    }    if (server.isAccountOnGameServer(task.sourceAccountId)) {      log.error("cannot perform transfer task #" + task.id + " while source account is online "+ task.sourceAccountId);      continue;    }    if (targetServer.isAccountOnGameServer(task.targetAccountId)) {      log.error("cannot perform transfer task #" + task.id + " while target account is online "+ task.targetAccountId);      continue;    }    task.status=PlayerTransferTask.STATUS_ACTIVE;    tasks.put(task.id,task);    this.dao.update(task);    server.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.PERFORM_ACTION,task));    log.info("performing player transfer #" + task.id);  }}  }
class C{  public NotFiniteNumberException(Localizable specific,Number wrong,Object... args){  super(specific,wrong,args);}  }
class C{  protected FieldODEStateAndDerivative<T> initIntegration(final FieldExpandableODE<T> eqn,final FieldODEState<T> s0,final T t){  this.equations=eqn;  evaluations=evaluations.withCount(0);  eqn.init(s0,t);  final T t0=s0.getTime();  final T[] y0=s0.getCompleteState();  final T[] y0Dot=computeDerivatives(t0,y0);  final FieldODEStateAndDerivative<T> s0WithDerivatives=eqn.getMapper().mapStateAndDerivative(t0,y0,y0Dot);  for (  final FieldEventState<T> state : eventsStates) {    state.getEventHandler().init(s0WithDerivatives,t);  }  for (  FieldODEStepHandler<T> handler : stepHandlers) {    handler.init(s0WithDerivatives,t);  }  setStateInitialized(false);  return s0WithDerivatives;}  }
class C{  public static NotSpacePredicate not(ISpacePredicate predicate){  return new NotSpacePredicate(predicate);}  }
class C{  public FloatColumn(int nrows){  this(nrows,nrows,0f);}  }
class C{  private Attributes extractNamespaces(Attributes attrs) throws SAXException {  AttributesImpl attrsOnly;  String rawName;  int i;  int length;  if (attrs == null) {    return null;  }  length=attrs.getLength();  attrsOnly=new AttributesImpl(attrs);  for (i=length - 1; i >= 0; --i) {    rawName=attrsOnly.getQName(i);    if (rawName.startsWith("xmlns")) {      if (rawName.length() == 5) {        startPrefixMapping("",attrs.getValue(i));        attrsOnly.removeAttribute(i);      } else       if (rawName.charAt(5) == ':') {        startPrefixMapping(rawName.substring(6),attrs.getValue(i));        attrsOnly.removeAttribute(i);      }    }  }  return attrsOnly;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_TO_B(String skilltarget,int num0){  return new SM_SYSTEM_MESSAGE(1201072,skilltarget,num0);}  }
class C{  @Deployment public void testTimerFiredForIntermediateTimer() throws Exception {  runtimeService.startProcessInstanceByKey("testTimerFiredForIntermediateTimer");  Calendar tomorrow=Calendar.getInstance();  tomorrow.add(Calendar.DAY_OF_YEAR,1);  processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());  waitForJobExecutorToProcessAllJobs(2000,100);  checkEventCount(1,ActivitiEventType.TIMER_SCHEDULED);  checkEventCount(0,ActivitiEventType.JOB_CANCELED);  checkEventCount(1,ActivitiEventType.TIMER_FIRED);}  }
class C{  public Iterable<KeyVal<T>> iterable(){  return null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ForStmt fullCopy(){  ForStmt tree=(ForStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void addRequiredLibs(StringBuilder classpath){  for (  File f : BootIOUtils.listFiles(new File(gsLibRequired))) {    if (f.getName().contains(XapModules.DATA_GRID.getJarFileName()) || f.getName().contains(XapModules.CORE_REFLECTIONS_ASM.getJarFileName())) {      continue;    }    classpath.append(f.getAbsolutePath()).append(File.pathSeparator);  }}  }
class C{  public void add(Matrix x){  sum.plusEquals(x);  squaredSum.plusEquals(x.pow(2.0d));  N++;}  }
class C{  private void selectPending(){  BSPTree<Sphere1D> start=current;  while (start != null && !isArcStart(start)) {    start=nextInternalNode(start);  }  if (start == null) {    current=null;    pending=null;    return;  }  BSPTree<Sphere1D> end=start;  while (end != null && !isArcEnd(end)) {    end=nextInternalNode(end);  }  if (end != null) {    pending=new double[]{getAngle(start),getAngle(end)};    current=end;  } else {    end=firstStart;    while (end != null && !isArcEnd(end)) {      end=previousInternalNode(end);    }    if (end == null) {      throw MathRuntimeException.createInternalError();    }    pending=new double[]{getAngle(start),getAngle(end) + MathUtils.TWO_PI};    current=null;  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  TEqualsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new TEqualsExtended();  } else {    filter=new TEqualsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  private void updateButtonState(){  int connected=0;  int disconnected=0;  if (geoServerConnectState != null) {    for (    GeoServerConnection connection : connectionList) {      if (geoServerConnectState.isConnected(connection)) {        connected++;      } else {        disconnected++;      }    }  }  boolean connectedEnabled=false;  boolean disconnectedEnabled=false;  if ((connected == 0) || (disconnected == 0)) {    if (connected > 0) {      disconnectedEnabled=true;    } else     if (disconnected > 0) {      connectedEnabled=true;    }  }  connectButton.setEnabled(connectedEnabled);  disconnectButton.setEnabled(disconnectedEnabled);}  }
class C{  void executeQuery(){  queryExecutor.submit(null);}  }
class C{  @Deployment public void testUncaughtError() throws Exception {  try {    runtimeService.startProcessInstanceByKey("errorProcess");    fail("Exception BPMN  error excepted due to not caught exception");  } catch (  BpmnError e) {  }}  }
class C{  public void stop() throws ContainerException {  bsh=null;}  }
class C{  public static void releaseDetector(){  if (faceDetector != null) {    faceDetector.release();    faceDetector=null;  }  mContext=null;}  }
class C{  public static DmnRestUrlBuilder fromRequest(HttpServletRequest request){  return usingBaseUrl(ServletUriComponentsBuilder.fromServletMapping(request).build().toUriString());}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  private static int rail(int val){  return val > 19 ? 19 : val;}  }
class C{  public ComplexFormat(String imaginaryCharacter) throws MathIllegalArgumentException, NullArgumentException {  this(imaginaryCharacter,CompositeFormat.getDefaultNumberFormat());}  }
class C{  protected void peekPanel(StateChangeReason reason){  startShowing();  animatePanelToState(PanelState.PEEKED,reason);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected void callForHelp(int distance){  Creature firstTarget=getAggroList().getMostHated();  for (  VisibleObject object : getKnownList().getKnownObjects().values()) {    if (object instanceof Npc && isInRange(object,distance)) {      Npc npc=(Npc)object;      if ((npc != null) && !npc.getLifeStats().isAlreadyDead()) {        npc.getAi2().onCreatureEvent(AIEventType.CREATURE_AGGRO,firstTarget);      }    }  }}  }
class C{  protected void internalPopulate(Map<String,String> options,FieldIdEnum field,String key){  FieldConfigBase fieldConfig=fieldConfigManager.get(field);  if (fieldConfig instanceof FieldConfigBoolean) {    internal_populateBooleanField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigInteger) {    internal_populateIntegerField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigDouble) {    internal_populateDoubleField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigEnum) {    internal_populateEnumField(options,field,key);  } else {    ConsoleManager.getInstance().error(this,"Unsupported field type : " + field + " "+ fieldConfig.getClass().getName());  }}  }
class C{  @Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  allowXMLCatalogPI=false;  super.unparsedEntityDecl(name,publicId,systemId,notationName);}  }
class C{  public static void removeNode(String url){  url2node.remove(url);}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  @Override public int read(byte[] bytes) throws IOException {  return read(bytes,0,bytes.length);}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  private boolean configureConnectionForHttpPost(HttpURLConnection connection) throws IOException {  String boundary=readBoundary();  if (boundary == null) {    return false;  }  connection.setDoOutput(true);  connection.setRequestProperty("Connection","Keep-Alive");  connection.setRequestProperty("Content-Encoding","gzip");  connection.setRequestProperty("Content-Type",String.format(CONTENT_TYPE_TMPL,boundary));  return true;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public PhotosDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"photos.deleteAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  public void notifyObservers(Object arg){  for (  Observer observer : observers) {    observer.update(this,arg);  }}  }
class C{  public Latin1Reader(InputStream inputStream){  this(inputStream,DEFAULT_BUFFER_SIZE);}  }
class C{  protected PollsAddVoteQuery pollId(int value){  return unsafeParam("poll_id",value);}  }
class C{  public long dump(RandomAccessFile rafIn) throws IOException {  long nBytes=0;  int numIdx=getNumIdx();  rafIn.writeInt(numIdx);  nBytes+=4;  rafIn.writeInt(idxInterval);  nBytes+=4;  for (int i=0; i < numIdx; i++) {    rafIn.writeLong(bytePtrs[i]);    nBytes+=8;    rafIn.writeLong(timePtrs[i]);    nBytes+=8;  }  rafIn.writeLong(0l);  rafIn.writeLong(0l);  nBytes+=16l;  return nBytes;}  }
class C{  @BeforeClass public void init(){  if (username.equals("usernameXYZ123456")) {    username=appProperties.getProperty("user-name");  }  if (password.equals("passwordXYZ123456")) {    password=appProperties.getProperty("password");  }  if (email.equals("mail@example.org")) {    email=appProperties.getProperty("user-email");  }  if (validTokenPattern == null) {    validTokenPattern=appProperties.getProperty("validTokenPattern");  }  apiUser=APIUserFactory.createAPIUser().setUsername(username).setPassword(password).setEmail(email).setFirstName(firstName).setLastName(lastName);}  }
class C{  public static String emailPassword(HttpServletRequest request,HttpServletResponse response){  String defaultScreenLocation="component://securityext/widget/EmailSecurityScreens.xml#PasswordEmail";  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  String productStoreId=ProductStoreWorker.getProductStoreId(request);  String errMsg=null;  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  String userLoginId=request.getParameter("USERNAME");  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  if (!UtilValidate.isNotEmpty(userLoginId)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue supposedUserLogin=null;  String passwordToSend=null;  try {    supposedUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    if (supposedUserLogin == null) {      errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    if (useEncryption) {      passwordToSend=RandomStringUtils.randomAlphanumeric(Integer.parseInt(EntityUtilProperties.getPropertyValue("security","password.length.min","5",delegator)));      if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {        passwordToSend=passwordToSend.toLowerCase();      }      supposedUserLogin.set("currentPassword",HashCrypt.cryptUTF8(LoginServices.getHashType(),null,passwordToSend));      supposedUserLogin.set("passwordHint","Auto-Generated Password");      if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.email_password.require_password_change",delegator))) {        supposedUserLogin.set("requirePasswordChange","Y");      }    } else {      passwordToSend=supposedUserLogin.getString("currentPassword");    }    passwordToSend=URLEncoder.encode(passwordToSend,"UTF-8");  } catch (  GenericEntityException|UnsupportedEncodingException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());    errMsg=UtilProperties.getMessage(resource,"loginevents.error_accessing_password",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  StringBuilder emails=new StringBuilder();  GenericValue party=null;  try {    party=supposedUserLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    party=null;  }  if (party != null) {    Iterator<GenericValue> emailIter=UtilMisc.toIterator(ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false));    while (emailIter != null && emailIter.hasNext()) {      GenericValue email=emailIter.next();      emails.append(emails.length() > 0 ? "," : "").append(email.getString("infoString"));    }  }  if (!UtilValidate.isNotEmpty(emails.toString())) {    errMsg=UtilProperties.getMessage(resource,"loginevents.no_primary_email_address_set_contact_customer_service",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue productStoreEmail=null;  try {    productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","PRDS_PWD_RETRIEVE").queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Problem getting ProductStoreEmailSetting",module);  }  String bodyScreenLocation=null;  if (productStoreEmail != null) {    bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");  }  if (UtilValidate.isEmpty(bodyScreenLocation)) {    bodyScreenLocation=defaultScreenLocation;  }  Map<String,Object> bodyParameters=FastMap.newInstance();  bodyParameters.put("useEncryption",Boolean.valueOf(useEncryption));  bodyParameters.put("password",UtilFormatOut.checkNull(passwordToSend));  bodyParameters.put("locale",UtilHttp.getLocale(request));  bodyParameters.put("userLogin",supposedUserLogin);  bodyParameters.put("productStoreId",productStoreId);  Map<String,Object> serviceContext=FastMap.newInstance();  serviceContext.put("bodyScreenUri",bodyScreenLocation);  serviceContext.put("bodyParameters",bodyParameters);  if (productStoreEmail != null) {    serviceContext.put("subject",productStoreEmail.getString("subject"));    serviceContext.put("sendFrom",productStoreEmail.get("fromAddress"));    serviceContext.put("sendCc",productStoreEmail.get("ccAddress"));    serviceContext.put("sendBcc",productStoreEmail.get("bccAddress"));    serviceContext.put("contentType",productStoreEmail.get("contentType"));  } else {    GenericValue emailTemplateSetting=null;    try {      emailTemplateSetting=EntityQuery.use(delegator).from("EmailTemplateSetting").where("emailTemplateSettingId","EMAIL_PASSWORD").cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (emailTemplateSetting != null) {      String subject=emailTemplateSetting.getString("subject");      subject=FlexibleStringExpander.expandString(subject,UtilMisc.toMap("userLoginId",userLoginId));      serviceContext.put("subject",subject);      serviceContext.put("sendFrom",emailTemplateSetting.get("fromAddress"));    } else {      serviceContext.put("subject",UtilProperties.getMessage(resource,"loginservices.password_reminder_subject",UtilMisc.toMap("userLoginId",userLoginId),UtilHttp.getLocale(request)));      serviceContext.put("sendFrom",EntityUtilProperties.getPropertyValue("general.properties","defaultFromEmailAddress",delegator));    }  }  serviceContext.put("sendTo",emails.toString());  serviceContext.put("partyId",party.getString("partyId"));  try {    Map<String,Object> result=dispatcher.runSync("sendMailHiddenInLogFromScreen",serviceContext);    if (ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE))) {      Map<String,Object> messageMap=UtilMisc.toMap("errorMessage",result.get(ModelService.ERROR_MESSAGE));      errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service_errorwas",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } catch (  GenericServiceException e) {    Debug.logWarning(e,"",module);    errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (useEncryption) {    try {      supposedUserLogin.store();    } catch (    GenericEntityException e) {      Debug.logWarning(e,"",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());      errMsg=UtilProperties.getMessage(resource,"loginevents.error_saving_new_password_email_not_correct_password",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  }  if (useEncryption) {    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_createdandsent_check_email",UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);  } else {    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_sent_check_email",UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);  }  return "success";}  }
class C{  public static <T extends Object>List<T> distinct(String collection,String key,Bson q,Class<T> type){  TimeStamp t1=TimeStamp.create();  try {    MongoCollection<Document> c=MongoHelper.getCollection(collection);    if (c != null) {      Iterator<T> it=c.distinct(key,q,type).iterator();      List<T> list=new ArrayList<T>();      while (it.hasNext()) {        list.add(it.next());      }    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  } finally {    if (log.isDebugEnabled())     log.debug("disinct[" + key + "] cost="+ t1.past()+ "ms,  collection="+ collection+ ", query="+ q);  }  return null;}  }
class C{  public static synchronized boolean isBodyStenciled(){  return bodyStenciled;}  }
class C{  @Override public void onRequestCompleted(int code,Object result){  if (code == ConnectAPI.LOGIN_CODE) {    LoginResult loginResult=(LoginResult)result;    Log.d("LOGIN RESPONSE",result.toString());    if (loginResult != null) {      if (loginResult.getStatus() == ErrorDefinitions.CODE_SUCCESS) {        Log.d("LOGIN","SUCCESS");        DataHandler.getInstance(this).saveUser(loginResult.getUser());        DataHandler.getInstance(this).saveTeam(loginResult.getTeam());        DataHandler.getInstance(this).saveSlotLastUsed(loginResult.getUser().getSlotLastTime());        Intent intent=new Intent(this,MainActivity.class);        intent.putExtra("status",Status.LOGGED_IN);        startActivity(intent);        DataHandler.getInstance(this).saveLoggedIn(true);        finish();      } else {        showMessage(ErrorDefinitions.getMessage(loginResult.getStatus()));        signin.setText("Sign in");        signin.setClickable(true);      }    }  }}  }
class C{  public void clearIEEEFlags(){  ieeeFlags=0;}  }
class C{  public double[] toFrames(double step){  int numFrames=(int)((xmax - xmin) / step) + 1;  assert xmin + (numFrames - 1) * step <= xmax;  double[] frames=new double[numFrames];  double t=xmin;  PitchTarget prev=null;  int j=0;  for (int i=0; i < frames.length; i++) {    frames[i]=getFrequency(t);    t+=step;  }  return frames;}  }
class C{  private void onConditionComplete(boolean result){  this.cond_=result;  if (this.isDone())   this.done(); else   this.executor_.execute(new TaskRunner());}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  public void close() throws IOException {  randomAccessFile.close();}  }
class C{  public static SecretKey generateKey(String key,String algorithm) throws EncodingException {  try {    SecretKey skey=new SecretKeySpec(key.getBytes("UTF-8"),algorithm);    return skey;  } catch (  Exception e) {    throw new EncodingException(e);  }}  }
class C{  @Pollable(async=true,message="Start copying all translations with exact match between repository") public PollableFuture copyAllTranslationsWithExactMatchBetweenRepositories(Repository source,Repository target){  logger.debug("Get TmTextUnit that must be processed");  List<TMTextUnit> tmTextUnits=tmTextUnitRepository.findByTm_id(target.getTm().getId());  logger.debug("First perform leveraging by name and content (to give priority to string with same tags");  leveragerByNameAndContent.performLeveragingFor(tmTextUnits,source.getTm().getId());  logger.debug("Now, perform leveraging only on the name");  leveragerByContent.performLeveragingFor(tmTextUnits,source.getTm().getId());  return new PollableFutureTaskResult();}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static String toTree(@NotNull List<NlComponent> roots,boolean includeIdentity){  StringBuilder sb=new StringBuilder(200);  for (  NlComponent root : roots) {    describe(sb,root,0,includeIdentity);  }  return sb.toString().trim();}  }
class C{  private static void deleteFilesByDirectory(File directory){  if (directory != null && directory.exists() && directory.isDirectory())   for (  File item : directory.listFiles())   item.delete();}  }
class C{  public static Map<String,String> splitHttpParams(String content,boolean lowerCaseNames){  Map<String,String> paramMap=new HashMap<String,String>();  StringTokenizer tokenizer=new StringTokenizer(content,"&");  while (tokenizer.hasMoreElements()) {    String keyValue=tokenizer.nextToken();    int index=keyValue.indexOf("=");    if (index > 0) {      String key=keyValue.substring(0,index);      if (lowerCaseNames)       key=key.toLowerCase(Locale.ENGLISH);      paramMap.put(key,keyValue.substring(index + 1));    }  }  return paramMap;}  }
class C{  public FileTreeNode(Path parent,String name) throws SecurityException, FileNotFoundException {  if ((parent == null) || (name == null)) {    throw new FileNotFoundException();  }  this.name=name;  Path pathPath=Paths.get(parent.toString(),name);  path=pathPath.toString();  isDir=Files.isDirectory(pathPath);  setUserObject(this.name);  if (isDir()) {    FileSystemWatcher.getInstance().addWatch(this,pathPath);    fileWatcherSet=true;  }}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public static void logTapsSinceOpenForUndecided(int tapsSinceOpen){  RecordHistogram.recordCountHistogram("Search.ContextualSearchTapsSinceOpenUndecided",tapsSinceOpen);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_EXP_GAIN_MAKEUP_BONUS(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1400346,value0,num1);}  }
class C{  public Builder cacheOnDisc(){  cacheOnDisc=true;  return this;}  }
class C{  public IsEqualToExtended(){  super(null,null);}  }
class C{  public WriteEntrySpaceOperationRequest(){}  }
class C{  private static void addToParentGroup(final ConfiguredConnectionGroupDetails groupDetails,final ConfiguredConnectionGroupDetails parent){  groupDetails.setGroup(new ConnectionGroupReference(parent));  parent.getSubgroups().add(new ConnectionGroupReference(groupDetails));}  }
class C{  public VisualItem addItem(){  return getItem(addRow());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_COMPATIBLE(DescriptionId descriptionId,DescriptionId descriptionId2){  return new SM_SYSTEM_MESSAGE(1300480,descriptionId,descriptionId2);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int count=scrollingOffset / getItemHeight();  int pos=currentItem - count;  if (isCyclic && adapter.getItemsCount() > 0) {    while (pos < 0) {      pos+=adapter.getItemsCount();    }    pos%=adapter.getItemsCount();  } else   if (isScrollingPerformed) {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= adapter.getItemsCount()) {      count=currentItem - adapter.getItemsCount() + 1;      pos=adapter.getItemsCount() - 1;    }  } else {    pos=Math.max(pos,0);    pos=Math.min(pos,adapter.getItemsCount() - 1);  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * getItemHeight();  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public static Date unmodifiableDate(Date date){  if (date instanceof ImmutableDate) {    return date;  }  return new ImmutableDate(date.getTime());}  }
class C{  public Node<K,V> last(){  Node<K,V> node=this;  Node<K,V> child=node.right;  while (child != null) {    node=child;    child=node.right;  }  return node;}  }
class C{  public static void startNewPage(Document document){  document.newPage();}  }
class C{  public VideoGetAlbumsQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void compareSurrogateKeyData(List<String> data,Dictionary reverseDictionary){  int surrogateKey=0;  for (int i=0; i < data.size(); i++) {    surrogateKey++;    assertTrue(surrogateKey == reverseDictionary.getSurrogateKey(data.get(i)));  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public IntrospectorPropertyResolver(boolean includePublicFields){  super(includePublicFields);}  }
class C{  private URL extractActualUrl(URL jarUrl) throws MalformedURLException {  String urlFile=jarUrl.getFile();  int separatorIndex=urlFile.indexOf("!/");  if (separatorIndex != -1) {    String jarFile=urlFile.substring(0,separatorIndex);    try {      return new URL(jarFile);    } catch (    MalformedURLException var5) {      if (!jarFile.startsWith("/")) {        jarFile="/" + jarFile;      }      return new URL("file:" + jarFile);    }  } else {    return jarUrl;  }}  }
class C{  public AccountLookupContactsQuery returnAll(Boolean value){  return unsafeParam("return_all",value);}  }
class C{  private void processInput(boolean endOfInput) throws IOException {  decoderIn.flip();  CoderResult coderResult;  while (true) {    coderResult=decoder.decode(decoderIn,decoderOut,endOfInput);    if (coderResult.isOverflow()) {      flushOutput();    } else     if (coderResult.isUnderflow()) {      break;    } else {      throw new IOException("Unexpected coder result");    }  }  decoderIn.compact();}  }
class C{  public void onRespawn(){}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public void update(Object value) throws IOException {  update(value,true);}  }
class C{  public void onProgress(int bytesWritten,int totalSize){}  }
class C{  protected MarketEditAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public EquipmentSenderValid(final EquipmentSenderFilterModule equipmentSenderFilterModule,final IProcessMessageSender processMessageSender,final IEquipmentMessageSender equipmentSender,final EquipmentTimeDeadband equipmentTimeDeadband,final IDynamicTimeDeadbandFilterer dynamicTimeDeadbandFilterer,final EquipmentLoggerFactory equipmentLoggerFactory){  this.equipmentSenderFilterModule=equipmentSenderFilterModule;  this.processMessageSender=processMessageSender;  this.equipmentSender=equipmentSender;  this.equipmentTimeDeadband=equipmentTimeDeadband;  this.dynamicTimeDeadbandFilterer=dynamicTimeDeadbandFilterer;  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());  this.dataTagValueFilter=new DataTagValueFilter(equipmentLoggerFactory);  this.dataTagValueValidator=new DataTagValueValidator(equipmentLoggerFactory);}  }
class C{  private static boolean hasSelfPermission(Context context,String permission){  try {    return PermissionChecker.checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;  } catch (  RuntimeException t) {    return false;  }}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public static void initWithBuilder(@NonNull Builder builder){  if (builder == null) {    throw new IllegalArgumentException("Builder must not be null.");  }  init(builder.build());}  }
class C{  @Override protected void endOfFileHook(EOFException e) throws IOException, XNIException {  reportFatalError("PrematureEOF",null);}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();  data=ownerDocument.getNodeValueString(fNodeIndex);  isIgnorableWhitespace(ownerDocument.getNodeExtra(fNodeIndex) == 1);}  }
class C{  private Solver(final double[][] qrt,final double[] rDiag,final double threshold){  this.qrt=qrt;  this.rDiag=rDiag;  this.threshold=threshold;}  }
class C{  public XorPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public void uploadFile(String uploadKey){  mCurrentUpload=mPendingUploads.get(uploadKey);  if (mCurrentUpload != null) {    if (!AccountUtils.exists(mCurrentUpload.getAccount(),this)) {      Log_OC.w(TAG,"Account " + mCurrentUpload.getAccount().name + " does not exist anymore -> cancelling all its uploads");      cancelUploadsForAccount(mCurrentUpload.getAccount());      return;    }    mUploadsStorageManager.updateDatabaseUploadStart(mCurrentUpload);    notifyUploadStart(mCurrentUpload);    sendBroadcastUploadStarted(mCurrentUpload);    RemoteOperationResult uploadResult=null;    try {      if (mCurrentAccount == null || !mCurrentAccount.equals(mCurrentUpload.getAccount())) {        mCurrentAccount=mCurrentUpload.getAccount();        mStorageManager=new FileDataStorageManager(mCurrentAccount,getContentResolver());      }      OwnCloudAccount ocAccount=new OwnCloudAccount(mCurrentAccount,this);      mUploadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);      uploadResult=mCurrentUpload.execute(mUploadClient,mStorageManager);    } catch (    Exception e) {      Log_OC.e(TAG,"Error uploading",e);      uploadResult=new RemoteOperationResult(e);    } finally {      Pair<UploadFileOperation,String> removeResult;      if (mCurrentUpload.wasRenamed()) {        removeResult=mPendingUploads.removePayload(mCurrentAccount.name,mCurrentUpload.getOldFile().getRemotePath());      } else {        removeResult=mPendingUploads.removePayload(mCurrentAccount.name,mCurrentUpload.getRemotePath());      }      mUploadsStorageManager.updateDatabaseUploadResult(uploadResult,mCurrentUpload);      notifyUploadResult(mCurrentUpload,uploadResult);      sendBroadcastUploadFinished(mCurrentUpload,uploadResult,removeResult.second);    }    final ThumbnailsCacheManager.ThumbnailGenerationTask task=new ThumbnailsCacheManager.ThumbnailGenerationTask(mStorageManager,mCurrentAccount);    Object[] params=new Object[2];    params[0]=new File(mCurrentUpload.getOriginalStoragePath());    params[1]=mCurrentUpload.getFile().getRemoteId();    task.execute(params);  }}  }
class C{  public void unColorallButtons(){  for (  ClipboardTokenButton tokenButton : tokenButtons) {    tokenButton.resetColor();  }}  }
class C{  public static void show(Context context,int titleResId,int urlResId){  if (context == null)   return;  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setClassName(context,EmbedContentViewActivity.class.getName());  if (context instanceof Activity) {    intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT | Intent.FLAG_ACTIVITY_SINGLE_TOP);  } else {    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  }  intent.putExtra(TITLE_INTENT_EXTRA,titleResId);  intent.putExtra(URL_INTENT_EXTRA,urlResId);  context.startActivity(intent);}  }
class C{  public AccountSaveProfileInfoQuery maidenName(String value){  return unsafeParam("maiden_name",value);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
