class C{  public boolean isUserElement2Dim(){  Object oo=get_Value(COLUMNNAME_IsUserElement2Dim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void uninstallApplicationListeners(Application app){  super.uninstallApplicationListeners(app);  app.removePropertyChangeListener(applicationListener);}  }
class C{  public void execute(){  Exception ex;  ResultSet rs;  if (!m_ButtonExecute.isEnabled()) {    return;  }  if (m_TextQuery.getText().trim().equals("")) {    return;  }  try {    if (m_DbUtils.getResultSet() != null) {      m_DbUtils.close();    }  } catch (  Exception e) {  }  ex=null;  rs=null;  try {    if (m_DbUtils.execute(getQuery())) {      rs=m_DbUtils.getResultSet();      addHistory(getQuery());    }  } catch (  Exception e) {    ex=new Exception(e.getMessage());  }  notifyQueryExecuteListeners(rs,ex);  setButtons();}  }
class C{  public IntMaxDataSetProbs(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  this.dataSet=dataSet;  dims=new int[dataSet.getNumColumns()];  for (int i=0; i < dims.length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    dims[i]=variable.getNumCategories();  }  numRows=dataSet.getNumRows();}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  private boolean isNodeIdUsed() throws Exception {  if (activeMQServer.getConfiguration().getClusterConfigurations().isEmpty())   return false;  SimpleString nodeId0;  try {    nodeId0=activeMQServer.getNodeManager().readNodeId();  } catch (  ActiveMQIllegalStateException e) {    nodeId0=null;  }  ClusterConnectionConfiguration config=ConfigurationUtils.getReplicationClusterConfiguration(activeMQServer.getConfiguration(),replicatedPolicy.getClusterName());  NodeIdListener listener=new NodeIdListener(nodeId0);  try (ServerLocatorInternal locator=getLocator(config)){    locator.addClusterTopologyListener(listener);    locator.setReconnectAttempts(0);    try (ClientSessionFactoryInternal factory=locator.connectNoWarnings()){      listener.latch.await(5,TimeUnit.SECONDS);    } catch (    Exception notConnected) {      return false;    }    return listener.isNodePresent;  } }  }
class C{  private String unescapePath(String path){  StringBuilder sb=new StringBuilder();  Matcher matcher=unescapeRulePattern.matcher(path);  int end=-1;  int letter;  while (matcher.find()) {    sb.append(path.substring(end + 1,matcher.start()));    letter=Integer.valueOf(matcher.group().substring(1),16);    if (letter < 128 && unescapedCharacters[letter]) {      sb.append(new Character((char)letter));    } else {      sb.append(matcher.group().toUpperCase(Locale.ROOT));    }    end=matcher.start() + 2;  }  letter=path.length();  if (end <= letter - 1) {    sb.append(path.substring(end + 1,letter));  }  return sb.toString();}  }
class C{  public static ImageSource uri(String uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  if (!uri.contains("://")) {    if (uri.startsWith("/")) {      uri=uri.substring(1);    }    uri=FILE_SCHEME + uri;  }  return new ImageSource(Uri.parse(uri));}  }
class C{  public ByteRange(byte min,byte max){  this.min=min;  this.max=max;}  }
class C{  public static void normalise(double[][] matrix,int column){  double mean=MatrixUtils.mean(matrix,column);  double stdDev=MatrixUtils.stdDev(matrix,column,mean);  if (Double.isInfinite(1.0 / stdDev)) {    for (int t=0; t < matrix.length; t++) {      matrix[t][column]=(matrix[t][column] - mean);    }  } else {    for (int t=0; t < matrix.length; t++) {      matrix[t][column]=(matrix[t][column] - mean) / stdDev;    }  }}  }
class C{  public boolean doAccessibleAction(int i){  if (i < 0 || i > 1) {    return false;  }  Object o;  if (i == 0) {    o=getNextValue();  } else {    o=getPreviousValue();  }  try {    model.setValue(o);    return true;  } catch (  IllegalArgumentException iae) {  }  return false;}  }
class C{  public boolean isRewarded(final String userId,final String dataId,final int type){  final Query query=new Query();  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Reward.SENDER_ID,FilterOperator.EQUAL,userId));  filters.add(new PropertyFilter(Reward.DATA_ID,FilterOperator.EQUAL,dataId));  filters.add(new PropertyFilter(Reward.TYPE,FilterOperator.EQUAL,type));  query.setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  try {    return 0 != rewardRepository.count(query);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Determines reward error",e);    return false;  }}  }
class C{  private boolean isAllowed(final RPEntity user){  Sentence sentence=ConversationParser.parse(user.get("text"));  return condition.fire((Player)user,sentence,this);}  }
class C{  public boolean checkError(){  return pw.checkError();}  }
class C{  private double query(int[] classes,int[] values,ClassificationDataSet D){  double count=1;  for (int i=0; i < D.getSampleSize(); i++) {    DataPoint dp=D.getDataPoint(i);    int j;    for (j=0; j < classes.length; j++) {      if (classes[j] == D.getNumCategoricalVars()) {        if (D.getDataPointCategory(i) != values[j])         j=classes.length + 1;      } else       if (dp.getCategoricalValue(j) != values[j])       j=classes.length + 1;    }    if (j == classes.length)     count+=dp.getWeight();  }  return count;}  }
class C{  protected static boolean isAccountPaymentPage(HttpServletRequest httpRequest){  return httpRequest.getServletPath().startsWith(BaseBean.ACCOUNT_PAYMENT_PAGE) || httpRequest.getServletPath().startsWith(BaseBean.ACCOUNT_PAYMENT_PAGE_XHTML);}  }
class C{  protected HexLiteralImpl(){  super();}  }
class C{  public boolean hasController(){  return mDraweeHolder.getController() != null;}  }
class C{  public Collection<IGameMove> validMoves(IGameState state){  return logic.validMoves(this,state);}  }
class C{  @Deprecated public PluginData(InputStream stream,long length,Map<String,String[]> headers,int code){  mStream=stream;  mContentLength=length;  mHeaders=headers;  mStatusCode=code;}  }
class C{  public Map<String,List<String>> toMultimap(boolean response){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (response && statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  } else   if (requestLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(requestLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  static Page createEmpty(MVMap<?,?> map,long version){  return create(map,version,EMPTY_OBJECT_ARRAY,EMPTY_OBJECT_ARRAY,null,0,DataUtils.PAGE_MEMORY);}  }
class C{  public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,null);}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public LocalStatisticsImpl(StatisticsType type,String textId,long numericId,long uniqueId,boolean atomicIncrements,int osStatFlags,StatisticsManager system){  super(type,calcTextId(system,textId),calcNumericId(system,numericId),uniqueId,osStatFlags);  this.dSystem=system;  StatisticsTypeImpl realType=(StatisticsTypeImpl)type;  int intCount=realType.getIntStatCount();  int longCount=realType.getLongStatCount();  int doubleCount=realType.getDoubleStatCount();  if (intCount > 0) {    this.intStorage=new int[intCount];    if (atomicIncrements) {      this.intLocks=new Object[intCount];      for (int i=0; i < intLocks.length; i++) {        intLocks[i]=new Object();      }    } else {      this.intLocks=null;    }  } else {    this.intStorage=null;    this.intLocks=null;  }  if (longCount > 0) {    this.longStorage=new long[longCount];    if (atomicIncrements) {      this.longLocks=new Object[longCount];      for (int i=0; i < longLocks.length; i++) {        longLocks[i]=new Object();      }    } else {      this.longLocks=null;    }  } else {    this.longStorage=null;    this.longLocks=null;  }  if (doubleCount > 0) {    this.doubleStorage=new double[doubleCount];    if (atomicIncrements) {      this.doubleLocks=new Object[doubleCount];      for (int i=0; i < doubleLocks.length; i++) {        doubleLocks[i]=new Object();      }    } else {      this.doubleLocks=null;    }  } else {    this.doubleStorage=null;    this.doubleLocks=null;  }}  }
class C{  public static boolean canUseD3DOnScreen(final WComponentPeer peer,final Win32GraphicsConfig gc,final int bbNum){  if (!(gc instanceof D3DGraphicsConfig)) {    return false;  }  D3DGraphicsConfig d3dgc=(D3DGraphicsConfig)gc;  D3DGraphicsDevice d3dgd=d3dgc.getD3DDevice();  String peerName=peer.getClass().getName();  Rectangle r=peer.getBounds();  Component target=(Component)peer.getTarget();  Window fsw=d3dgd.getFullScreenWindow();  return WindowsFlags.isD3DOnScreenEnabled() && d3dgd.isD3DEnabledOnDevice() && peer.isAccelCapable()&& (r.width > MIN_WIN_SIZE || r.height > MIN_WIN_SIZE)&& bbNum == 0 && (fsw == null || (fsw == target && !hasHWChildren(target))) && (peerName.equals("sun.awt.windows.WCanvasPeer") || peerName.equals("sun.awt.windows.WDialogPeer") || peerName.equals("sun.awt.windows.WPanelPeer")|| peerName.equals("sun.awt.windows.WWindowPeer")|| peerName.equals("sun.awt.windows.WFramePeer")|| peerName.equals("sun.awt.windows.WEmbeddedFramePeer"));}  }
class C{  HexHasPathToCenterCache(){}  }
class C{  public EmulatedFS(ZipFile apkFile){  this();  loadApk("TODO",apkFile);}  }
class C{  @Override public Invocation.Builder request(MediaType... acceptedResponseTypes){  return new MSF4JInvocation.Builder(new MSF4JClientRequestContext(client,uri).setAcceptResponseTypes(Arrays.asList(acceptedResponseTypes)),providerComponents);}  }
class C{  private void createImports(StringBuffer sb){  for (  String name : s_importClasses) {    sb.append("import ").append(name).append(";");  }  sb.append(NL);}  }
class C{  protected void updateBoardFromPrefs(){  RaptorPreferenceStore preferences=Raptor.getInstance().getPreferences();  for (int i=0; i < 8; i++) {    for (int j=0; j < 8; j++) {      squares[i][j].clearCache();    }  }  for (  PieceJailChessSquare pieceJailSquare : pieceJailSquares) {    if (pieceJailSquare != null) {      pieceJailSquare.setBackground(preferences.getColor(BOARD_PIECE_JAIL_BACKGROUND_COLOR));      pieceJailSquare.clearCache();    }  }}  }
class C{  private Buffer readPacketData(int packetLength) throws IOException {  byte[] packets=new byte[packetLength];  is.read(packets);  Buffer payload=new ChainBuffer();  payload.addLast(packets);  return payload;}  }
class C{  private static String hex(char ch){  return Integer.toHexString(ch).toUpperCase();}  }
class C{  public static boolean isNameValid(String name){  if (name.equals(".") || name.equals(".."))   return false;  return true;}  }
class C{  public <T>Builder rowh(String label,T data){  return tag("tr").cellHeader(label,false).cell(data).end();}  }
class C{  public double pmf(int x){  return pmf(x,n,p);}  }
class C{  private void isiDeleteQuotaDirs(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  List<URI> quotaDirURIList=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getQuotaDirectoryConstraint(args.getFsId()));  for (  URI quotaDirURI : quotaDirURIList) {    QuotaDirectory quotaDir=_dbClient.queryObject(QuotaDirectory.class,quotaDirURI);    if (quotaDir != null && (!quotaDir.getInactive())) {      if (quotaDir.getExtensions() != null && quotaDir.getExtensions().containsKey(QUOTA)) {        String quotaId=quotaDir.getExtensions().get(QUOTA);        _log.info("IsilonFileStorageDevice isiDeleteQuotaDirs , Delete Quota {}",quotaId);        isi.deleteQuota(quotaId);        quotaDir.getExtensions().remove(QUOTA);        String quotaDirPath=args.getFsMountPath() + "/" + quotaDir.getName();        isi.deleteDir(quotaDirPath,true);      }    }  }}  }
class C{  protected void init() throws IOException {  if (internalIn2 != null)   return;  Charset encoding;  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=internalIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding=UTF8;    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding=UTF16BE;    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding=UTF16LE;    unread=n - 2;  } else {    encoding=UTF8;    unread=n;  }  if (unread > 0)   internalIn.unread(bom,(n - unread),unread);  CharsetDecoder decoder=encoding.newDecoder().onUnmappableCharacter(CodingErrorAction.REPORT);  internalIn2=new InputStreamReader(internalIn,decoder);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TCLASSIFIER___IS_ABSTRACT:    return isAbstract();case TypesPackage.TCLASSIFIER___GET_SUPER_CLASSIFIERS:  return getSuperClassifiers();case TypesPackage.TCLASSIFIER___GET_SUPER_CLASSIFIER_REFS:return getSuperClassifierRefs();case TypesPackage.TCLASSIFIER___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();case TypesPackage.TCLASSIFIER___IS_FINAL:return isFinal();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean ready(){  return true;}  }
class C{  @Override public boolean supportsOpenStatementsAcrossRollback(){  debugCodeCall("supportsOpenStatementsAcrossRollback");  return true;}  }
class C{  public Document createDocument(InputStream image,String identifier) throws IOException {  assert (image != null);  BufferedImage bufferedImage=ImageIO.read(image);  return createDocument(bufferedImage,identifier);}  }
class C{  public static TickUnitSource createLogTickUnits(Locale locale){  TickUnits units=new TickUnits();  NumberFormat numberFormat=new LogFormat();  units.add(new NumberTickUnit(0.05,numberFormat,2));  units.add(new NumberTickUnit(0.1,numberFormat,10));  units.add(new NumberTickUnit(0.2,numberFormat,2));  units.add(new NumberTickUnit(0.5,numberFormat,5));  units.add(new NumberTickUnit(1,numberFormat,10));  units.add(new NumberTickUnit(2,numberFormat,10));  units.add(new NumberTickUnit(3,numberFormat,15));  units.add(new NumberTickUnit(4,numberFormat,20));  units.add(new NumberTickUnit(5,numberFormat,25));  units.add(new NumberTickUnit(6,numberFormat));  units.add(new NumberTickUnit(7,numberFormat));  units.add(new NumberTickUnit(8,numberFormat));  units.add(new NumberTickUnit(9,numberFormat));  units.add(new NumberTickUnit(10,numberFormat));  return units;}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  void passButtons(){  select.setText(pass.getText() + "!");  pass.setText(R.string.confirm_no);  actionText.setText(R.string.confirmation);  for (  CardInfo ci : openedCards) {    CardState cs=ci.cs;    cs.opened=false;    cs.order=-1;    cs.indicator=sco.getPickType().indicator();    ci.parent.updateState(ci.pos,cs);  }  openedCards.clear();  canClick=false;  canSelect();}  }
class C{  public void sendUrgentData(int data) throws IOException {  if (!getImpl().supportsUrgentData()) {    throw new SocketException("Urgent data not supported");  }  getImpl().sendUrgentData(data);}  }
class C{  private Status unwrapHandshake() throws SSLException, IgniteCheckedException {  readFromNet();  inNetBuf.flip();  SSLEngineResult res=unwrap0();  handshakeStatus=res.getHandshakeStatus();  checkStatus(res);  if (handshakeStatus == FINISHED && res.getStatus() == OK && inNetBuf.hasRemaining()) {    res=unwrap0();    handshakeStatus=res.getHandshakeStatus();    inNetBuf.compact();    renegotiateIfNeeded(res);  } else   inNetBuf.compact();  return res.getStatus();}  }
class C{  public static synchronized String generateSegmentName(){  try {    Thread.sleep(1000);  } catch (  Throwable t) {  }  return sdf.format(new Date(System.currentTimeMillis()));}  }
class C{  public boolean canBeExitPoint(){  return canReturnFromMethod() || isLastInstructionInMethod();}  }
class C{  public void parentAdded(SessionEvent event){}  }
class C{  @Override public void filterWrite(final NextFilter nextFilter,final IoSession session,final WriteRequest writeRequest){  writeData(nextFilter,session,writeRequest,false);}  }
class C{  public ZebraJTree(){}  }
class C{  static public void loadLoadStoreFileCheck(File inFile) throws Exception {  log.debug("Start check file " + inFile.getCanonicalPath());  loadInit();  loadFile(inFile);  loadFile(inFile);  String name=inFile.getName();  FileUtil.createDirectory(FileUtil.getUserFilesPath() + "temp");  File outFile=new File(FileUtil.getUserFilesPath() + "temp/" + name);  InstanceManager.getDefault(ConfigureManager.class).storeConfig(outFile);  checkFile(inFile,outFile);}  }
class C{  @Override protected void updateCastlingRightsForNonEpNonCastlingMove(Move move){  FischerRandomUtils.updateCastlingRightsForNonEpNonCastlingMove(this,move,initialShortRookFile,initialLongRookFile);}  }
class C{  public void endPicking(final GL2 gl){  int selectedIndex=PickingState.NONE;  final int howManyObjects=gl.glRenderMode(GL2.GL_RENDER);  gl.glMatrixMode(GLMatrixFunc.GL_PROJECTION);  gl.glPopMatrix();  gl.glMatrixMode(GLMatrixFunc.GL_MODELVIEW);  if (howManyObjects > 0) {    selectedIndex=selectBuffer.get(3);    int mindistance=Math.abs(selectBuffer.get(1));    for (int i=0; i < howManyObjects; i++) {      if (mindistance < Math.abs(selectBuffer.get(1 + i * 4))) {        mindistance=Math.abs(selectBuffer.get(1 + i * 4));        selectedIndex=selectBuffer.get(3 + i * 4);      }    }  } else {    selectedIndex=PickingState.WORLD;  }  pickingState.setPickedIndex(selectedIndex);}  }
class C{  public void repaintConnectors(MouseEvent evt){  Rectangle2D.Double invalidArea=null;  Point2D.Double targetPoint=viewToDrawing(new Point(evt.getX(),evt.getY()));  Figure aFigure=getDrawing().findFigureExcept(targetPoint,createdFigure);  if (aFigure != null && !aFigure.isConnectable()) {    aFigure=null;  }  if (targetFigure != aFigure) {    for (    Connector c : connectors) {      if (invalidArea == null) {        invalidArea=c.getDrawingArea();      } else {        invalidArea.add(c.getDrawingArea());      }    }    targetFigure=aFigure;    if (targetFigure != null) {      connectors=targetFigure.getConnectors(getPrototype());      for (      Connector c : connectors) {        if (invalidArea == null) {          invalidArea=c.getDrawingArea();        } else {          invalidArea.add(c.getDrawingArea());        }      }    }  }  if (invalidArea != null) {    getView().getComponent().repaint(getView().drawingToView(invalidArea));  }}  }
class C{  @Override public boolean supportsCustomEditor(){  return true;}  }
class C{  public boolean isDefined(){  return type != null;}  }
class C{  public boolean isPublic(){  return this.modifierKeyword == ModifierKeyword.PUBLIC_KEYWORD;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.447 -0400",hash_original_method="0DC8B11301EF3C498C2ABB05D6DC182D",hash_generated_method="6D79DE1DED9ECA9FA53F93B787A0A9DB") public WildcardFileFilter(String wildcard){  this(wildcard,null);}  }
class C{  public Tab launchUrlFromExternalApp(String url,String referer,String headers,String appId,boolean forceNewTab,Intent intent,long intentTimestamp){  assert !mIncognito;  boolean isLaunchedFromChrome=TextUtils.equals(appId,mActivity.getPackageName());  if (forceNewTab && !isLaunchedFromChrome) {    LoadUrlParams loadUrlParams=new LoadUrlParams(url);    loadUrlParams.setIntentReceivedTimestamp(intentTimestamp);    loadUrlParams.setVerbatimHeaders(headers);    if (referer != null) {      loadUrlParams.setReferrer(new Referrer(referer,Referrer.REFERRER_POLICY_DEFAULT));    }    return createNewTab(loadUrlParams,TabLaunchType.FROM_EXTERNAL_APP,null,intent);  }  if (appId == null) {    appId=TabModelImpl.UNKNOWN_APP_ID;  }  for (int i=0; i < mTabModel.getCount(); i++) {    Tab tab=mTabModel.getTabAt(i);    if (appId.equals(tab.getAppAssociatedWith())) {      LoadUrlParams loadUrlParams=new LoadUrlParams(url);      loadUrlParams.setIntentReceivedTimestamp(intentTimestamp);      ChromeTab newTab=createNewTab(loadUrlParams,TabLaunchType.FROM_EXTERNAL_APP,null,i,intent);      newTab.setAppAssociatedWith(appId);      mTabModel.closeTab(tab,false,false,false);      return newTab;    }  }  Tab tab=launchUrl(url,TabLaunchType.FROM_EXTERNAL_APP,intent,intentTimestamp);  tab.setAppAssociatedWith(appId);  return tab;}  }
class C{  public static void checkAndAppendSectorResolutionElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof LevelSet.SectorResolution[]) {    LevelSet.SectorResolution[] srs=(LevelSet.SectorResolution[])o;    for (    LevelSet.SectorResolution sr : srs) {      if (sr != null) {        appendSectorResolutionLimit(context,path,sr);      }    }  }}  }
class C{  public static IPackageFragmentRoot addLibrary(IJavaProject jproject,IPath path) throws JavaModelException {  return addLibrary(jproject,path,null,null);}  }
class C{  private void initJar(File local){  File jar=new File(CommandLoader.classPath());  loadFromJar(jar);}  }
class C{  void test(){  String something="";}  }
class C{  public ImageLoadOption defaultImgResId(int defaultImgResId){  this.defaultImgResId=defaultImgResId;  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:37.458 -0500",hash_original_method="EE6806E5D0C523D5F375E4021A29EB50",hash_generated_method="4A38C155913606B908C0A2B83E84F323") private void attemptClaimDrag(){  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  @Override public void test(Number t) throws ParameterException {  if (t.doubleValue() > constraintValue.doubleValue()) {    throw new WrongParameterValueException("Parameter Constraint Error: \n" + "The parameter value specified has to be less equal than " + constraintValue.toString() + ". (current value: "+ t.doubleValue()+ ")\n");  }}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void checkParentLimit(String label) throws CircuitBreakingException {  long totalUsed=0;  for (  CircuitBreaker breaker : this.breakers.values()) {    totalUsed+=(breaker.getUsed() * breaker.getOverhead());  }  long parentLimit=this.parentSettings.getLimit();  if (totalUsed > parentLimit) {    this.parentTripCount.incrementAndGet();    throw new CircuitBreakingException("[parent] Data too large, data for [" + label + "] would be larger than limit of ["+ parentLimit+ "/"+ new ByteSizeValue(parentLimit)+ "]",totalUsed,parentLimit);  }}  }
class C{  private void filterClusters(List<ClusteredPatterns> clusters){  if (minPatternsInCluster != 0) {    final Iterator<ClusteredPatterns> iterator=clusters.iterator();    while (iterator.hasNext()) {      final ClusteredPatterns patterns=iterator.next();      if (patterns.size() < minPatternsInCluster) {        iterator.remove();      }    }  }}  }
class C{  public void incMaxLocals(int diff){  maxLocals+=diff;}  }
class C{  public static byte[] readBytesFromByteBufferWithoutConsume(ByteBuffer byteBuffer){  byte[] buffer=new byte[byteBuffer.remaining()];  byteBuffer.duplicate().get(buffer);  return buffer;}  }
class C{  public boolean hasUnterminatedLine(){  return end == -1;}  }
class C{  @DSComment("Event associated with motion") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.852 -0500",hash_original_method="396B4C03ADE41E49E928286EB7438AA9",hash_generated_method="21872CD12D012F1BD1E94365B6D0FDDB") public final int findPointerIndex(int pointerId){  return nativeFindPointerIndex(mNativePtr,pointerId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void removeListener(final IUserManagerListener listener){  listeners.removeListener(listener);}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder title(String title){  this.title=title;  return this;}  }
class C{  void pauseWifiScan(){  if (mWifiManager.isWifiEnabled()) {    mScanner.pause();  }}  }
class C{  public BluetoothTestUtils(Context context,String tag){  this(context,tag,null);}  }
class C{  private static void writeWordList(final WordList wl,final PrintWriter writer){  writer.println();  wl.printWordType(writer,ExpressionType.VERB);  writer.println();  wl.printWordType(writer,ExpressionType.OBJECT);  writer.println();  wl.printWordType(writer,ExpressionType.SUBJECT);  writer.println();  wl.printWordType(writer,ExpressionType.ADJECTIVE);  writer.println();  wl.printWordType(writer,ExpressionType.NUMERAL);  writer.println();  wl.printWordType(writer,ExpressionType.PREPOSITION);  writer.println();  wl.printWordType(writer,ExpressionType.QUESTION);  writer.println();  wl.printWordType(writer,ExpressionType.IGNORE);  writer.println();  wl.printWordType(writer,null);}  }
class C{  private ReferenceProcessor(Semantics semantics){  this.semantics=semantics;  this.semanticsStr=semantics.toString();}  }
class C{  public static void genHashMap(String file,HashMap includes,HashMap swfs,String survivor){  if (!file.endsWith(".mxml"))   System.out.println("not an mxml file, returning");  HashMap map=new HashMap();  String testSwf=null;  testSwf=getTestSwf(file);  ArrayList al=null;  Iterator it=null;  String tmp=null;  String path=null;  int count=0;  if (testSwf != null) {    al=(ArrayList)includes.get(testSwf);    if (al == null) {      al=new ArrayList();      includes.put(testSwf,al);    }    if (swfs.get(testSwf) == null)     swfs.put(testSwf,null);    try {      path=new File(file).getParent();      file=new File(file).getName();      if (survivor != null) {        if (contains(file,survivor)) {          al.add(" -includes=" + cleanFile(file));          if (path != null && path.length() > 0)           al.add(" -source-path+=" + path);        }      } else {        al.add(" -includes=" + cleanFile(file));        if (path != null && path.length() > 0) {          al.add(" -source-path+=" + path);        }      }    } catch (    Exception e) {      System.out.println("Exception dealing with the path/Name there");      e.printStackTrace();    }  } else {    tmp=new File(file).getPath();    if (swfs.get(tmp) == null) {      swfs.put(file,tmp);    }  }}  }
class C{  @Override protected void finalize() throws Throwable {  try {    this.stop();    if (mContextSupportsFrameBufferObject)     this.destroyFramebuffer((GL11ExtensionPack)mGLWrapper);  } catch (  Throwable e) {  }  mBackingWidth=mBackingHeight=null;  mDefaultFramebuffer=mColorRenderbuffer=null;  mView=null;  mScene=null;  mViewport=mTempViewport=null;  mSize=mTempSize=null;  mListener=null;  mGLWrapper=null;  super.finalize();}  }
class C{  public FastStringBuffer appendObject(Object object){  return append(object != null ? object.toString() : "null");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodevalue.class,args);}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  @Override public List<Proxy> select(URI uri){  ArrayList<Proxy> proxies=new ArrayList<Proxy>();  if (pacScript == null) {    try {      pacScript=compilePacScript(loadPacScript(pacUrl));    } catch (    PacProxyException ex) {      ex.printStackTrace();      proxies.add(Proxy.NO_PROXY);      return proxies;    }  }  String pacFunctionReturn=null;  try {    pacFunctionReturn=(String)pacScript.invokeFunction("FindProxyForURL",uri.toString(),uri.getHost());  } catch (  NoSuchMethodException ex) {    ex.printStackTrace();    proxies.add(Proxy.NO_PROXY);    return proxies;  }catch (  ScriptException ex) {    ex.printStackTrace();    proxies.add(Proxy.NO_PROXY);    return proxies;  }  if (pacFunctionReturn == null) {    proxies.add(Proxy.NO_PROXY);    return proxies;  }  proxies.addAll(parsePacProxies(pacFunctionReturn));  if (proxies.size() == 0) {    proxies.add(Proxy.NO_PROXY);  }  return proxies;}  }
class C{  public Double nextDouble(double interpolant){  double newValue=(1 - interpolant) * propertyAccessor.getDouble() + interpolant * this.end;  if (Math.abs(newValue - propertyAccessor.getDouble()) < minEpsilon) {    this.stop();    return (null);  }  return newValue;}  }
class C{  public void order(int endian){  if (endian < 0)   return;  this.bigEndian=(endian == BIG_ENDIAN);}  }
class C{  public boolean has(String key){  return urlParams.get(key) != null || streamParams.get(key) != null || fileParams.get(key) != null || urlParamsWithObjects.get(key) != null || fileArrayParams.get(key) != null;}  }
class C{  public static void openFile(Context context,String filePath,String mime){  try {    if (filePath != null && !openAudioInternal(filePath)) {      Intent i=new Intent(Intent.ACTION_VIEW);      i.setDataAndType(Uri.fromFile(new File(filePath)),mime);      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      if (mime != null && mime.contains("video")) {        if (MusicUtils.isPlaying()) {          MusicUtils.playOrPause();        }        UXStats.instance().log(UXAction.LIBRARY_VIDEO_PLAY);      }      context.startActivity(i);    }  } catch (  Throwable e) {    UIUtils.showShortMessage(context,R.string.cant_open_file);    LOG.error("Failed to open file: " + filePath,e);  }}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("addressMode=[" + cudaTextureAddressMode.stringFor(addressMode[0]) + ","+ cudaTextureAddressMode.stringFor(addressMode[1])+ ","+ cudaTextureAddressMode.stringFor(addressMode[2])+ "]"+ f);  sb.append("filterMode=" + cudaTextureFilterMode.stringFor(filterMode) + f);  sb.append("readMode=" + cudaTextureReadMode.stringFor(readMode) + f);  sb.append("sRGB=" + sRGB + f);  sb.append("borderColor=" + Arrays.toString(borderColor) + f);  sb.append("normalizedCoords=" + normalizedCoords + f);  sb.append("maxAnisotropy=" + maxAnisotropy + f);  sb.append("mipmapFilterMode=" + cudaTextureFilterMode.stringFor(mipmapFilterMode) + f);  sb.append("mipmapLevelBias=" + mipmapLevelBias + f);  sb.append("minMipmapLevelClamp=" + minMipmapLevelClamp + f);  sb.append("maxMipmapLevelClamp=" + maxMipmapLevelClamp + f);  return sb.toString();}  }
class C{  public void updateLabelling(Label nodeLabel){  for (Iterator it=iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    Label label=de.getLabel();    label.setAllLocationsIfNull(0,nodeLabel.getLocation(0));    label.setAllLocationsIfNull(1,nodeLabel.getLocation(1));  }}  }
class C{  @Override public void addHeader(final String header,final String value){  mHeadersOptions.add(new HeaderOption(header,value));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.002 -0500",hash_original_method="0CA55CC43FB3B8576CC7C0DBAF1F74C0",hash_generated_method="E08171120887014347C0D1FF2B57D7A2") public static final boolean cacheRegisterMap(String classAndMethodDesc){  return classAndMethodDesc.getTaintBoolean();}  }
class C{  public boolean isRectangleCover(int[][] rectangles){  int minX=Integer.MAX_VALUE;  int maxX=Integer.MIN_VALUE;  int minY=Integer.MAX_VALUE;  int maxY=Integer.MIN_VALUE;  Map<Integer,Map<Integer,Integer>> count=new HashMap<>();  for (int i=0; i < rectangles.length; i++) {    int[] rect=rectangles[i];    minX=Math.min(minX,rect[0]);    minY=Math.min(minY,rect[1]);    maxX=Math.max(maxX,rect[2]);    maxY=Math.max(maxY,rect[3]);    updateCornerCount(count,rect[0],rect[1]);    updateCornerCount(count,rect[0],rect[3]);    updateCornerCount(count,rect[2],rect[1]);    updateCornerCount(count,rect[2],rect[3]);  }  for (  Map.Entry<Integer,Map<Integer,Integer>> map : count.entrySet()) {    int x=map.getKey();    for (    Map.Entry<Integer,Integer> entry : map.getValue().entrySet()) {      int y=entry.getKey();      if (x == maxX || x == minX && y == minY || y == maxY) {        if (entry.getValue() != 1) {          return false;        }      } else {        if (entry.getValue() != 2 || entry.getValue() != 4) {          return false;        }      }    }  }  return true;}  }
class C{  public void reset(){  size=0;}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "type: " + type);  pw.println(prefix + "packageName: " + packageName);  pw.println(prefix + "installerPackageName: " + installerPackageName);  pw.println(prefix + "processName: " + processName);  pw.println(prefix + "time: " + time);  pw.println(prefix + "systemApp: " + systemApp);switch (type) {case TYPE_CRASH:    crashInfo.dump(pw,prefix);  break;case TYPE_ANR:anrInfo.dump(pw,prefix);break;case TYPE_BATTERY:batteryInfo.dump(pw,prefix);break;case TYPE_RUNNING_SERVICE:runningServiceInfo.dump(pw,prefix);break;}}  }
class C{  @SuppressWarnings("rawtypes") public static AbstractLiteralIV createInlineIV(final long value){  if (Byte.MIN_VALUE <= value && value <= Byte.MAX_VALUE) {    return new XSDNumericIV((byte)value);  }  if (Short.MIN_VALUE <= value && value <= Short.MAX_VALUE) {    return new XSDNumericIV((short)value);  }  if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {    return new XSDNumericIV((int)value);  }  return new XSDNumericIV(value);}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInDataSourceConfiguredState);  assertTrue(stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInInitialState);  assertTrue(stateErrors.errorInInitialStateAfterReset);  assertTrue(stateErrors.errorInInitialStateAfterStop);  assertTrue(stateErrors.errorInInitializedState);}  }
class C{  public static String t(final String name){  return "html/tip/" + name + ".html";}  }
class C{  protected Expression parseBinaryExpression(Expression e) throws SyntaxError, IOException {  if (e != null) {switch (token) {case LSQBRACKET:{        long p=scan();        Expression index=(token != RSQBRACKET) ? parseExpression() : null;        expect(RSQBRACKET);        e=new ArrayAccessExpression(p,e,index);        break;      }case INC:    e=new PostIncExpression(scan(),e);  break;case DEC:e=new PostDecExpression(scan(),e);break;case FIELD:{long p=scan();if (token == THIS) {long q=scan();if (token == LPAREN) {  e=new ThisExpression(q,e);  e=parseMethodExpression(e,idInit);} else {  e=new FieldExpression(p,e,idThis);}break;}if (token == SUPER) {long q=scan();if (token == LPAREN) {  e=new SuperExpression(q,e);  e=parseMethodExpression(e,idInit);} else {  e=new FieldExpression(p,e,idSuper);}break;}if (token == NEW) {scan();if (token != IDENT) expect(IDENT);e=parseNewInstanceExpression(p,e,parseTypeExpression());break;}if (token == CLASS) {scan();e=new FieldExpression(p,e,idClass);break;}Identifier id=scanner.idValue;expect(IDENT);if (token == LPAREN) {e=parseMethodExpression(e,id);} else {e=new FieldExpression(p,e,id);}break;}case INSTANCEOF:e=new InstanceOfExpression(scan(),e,parseTerm());break;case ADD:e=new AddExpression(scan(),e,parseTerm());break;case SUB:e=new SubtractExpression(scan(),e,parseTerm());break;case MUL:e=new MultiplyExpression(scan(),e,parseTerm());break;case DIV:e=new DivideExpression(scan(),e,parseTerm());break;case REM:e=new RemainderExpression(scan(),e,parseTerm());break;case LSHIFT:e=new ShiftLeftExpression(scan(),e,parseTerm());break;case RSHIFT:e=new ShiftRightExpression(scan(),e,parseTerm());break;case URSHIFT:e=new UnsignedShiftRightExpression(scan(),e,parseTerm());break;case LT:e=new LessExpression(scan(),e,parseTerm());break;case LE:e=new LessOrEqualExpression(scan(),e,parseTerm());break;case GT:e=new GreaterExpression(scan(),e,parseTerm());break;case GE:e=new GreaterOrEqualExpression(scan(),e,parseTerm());break;case EQ:e=new EqualExpression(scan(),e,parseTerm());break;case NE:e=new NotEqualExpression(scan(),e,parseTerm());break;case BITAND:e=new BitAndExpression(scan(),e,parseTerm());break;case BITXOR:e=new BitXorExpression(scan(),e,parseTerm());break;case BITOR:e=new BitOrExpression(scan(),e,parseTerm());break;case AND:e=new AndExpression(scan(),e,parseTerm());break;case OR:e=new OrExpression(scan(),e,parseTerm());break;case ASSIGN:e=new AssignExpression(scan(),e,parseTerm());break;case ASGMUL:e=new AssignMultiplyExpression(scan(),e,parseTerm());break;case ASGDIV:e=new AssignDivideExpression(scan(),e,parseTerm());break;case ASGREM:e=new AssignRemainderExpression(scan(),e,parseTerm());break;case ASGADD:e=new AssignAddExpression(scan(),e,parseTerm());break;case ASGSUB:e=new AssignSubtractExpression(scan(),e,parseTerm());break;case ASGLSHIFT:e=new AssignShiftLeftExpression(scan(),e,parseTerm());break;case ASGRSHIFT:e=new AssignShiftRightExpression(scan(),e,parseTerm());break;case ASGURSHIFT:e=new AssignUnsignedShiftRightExpression(scan(),e,parseTerm());break;case ASGBITAND:e=new AssignBitAndExpression(scan(),e,parseTerm());break;case ASGBITOR:e=new AssignBitOrExpression(scan(),e,parseTerm());break;case ASGBITXOR:e=new AssignBitXorExpression(scan(),e,parseTerm());break;case QUESTIONMARK:{long p=scan();Expression second=parseExpression();expect(COLON);Expression third=parseExpression();if (third instanceof AssignExpression || third instanceof AssignOpExpression) {env.error(third.getWhere(),"assign.in.conditionalexpr");}e=new ConditionalExpression(p,e,second,third);break;}default :return null;}}return e;}  }
class C{  private static boolean checkPlayServices(Context context){  return false;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOfRange(T[] original,int from,int to){  return copyOfRange(original,from,to,(Class<T[]>)original.getClass());}  }
class C{  public CVCertificate(CertificateBody body,byte[] signature) throws IOException {  certificateBody=body;  this.signature=signature;  valid|=bodyValid;  valid|=signValid;}  }
class C{  public void startInternalActivity(Intent intent,boolean requireBackStack){  helper.startInternalActivity(intent,requireBackStack);}  }
class C{  public void registerApplicationClasspathSpis(){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  Iterator categories=getCategories();  while (categories.hasNext()) {    Class<IIOServiceProvider> c=(Class)categories.next();    Iterator<IIOServiceProvider> riter=ServiceLoader.load(c,loader).iterator();    while (riter.hasNext()) {      try {        IIOServiceProvider r=riter.next();        registerServiceProvider(r);      } catch (      ServiceConfigurationError err) {        if (System.getSecurityManager() != null) {          err.printStackTrace();        } else {          throw err;        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.651 -0500",hash_original_method="7BECB9552858FA87C7AFE2E5228279B4",hash_generated_method="A92CF9911E7F488800E294D71D407FCD") public boolean isCphsVoiceMessageIndicatorAddress(){  return (origBytes[OFFSET_ADDRESS_LENGTH] & 0xff) == 4 && isAlphanumeric() && (origBytes[OFFSET_TOA] & 0x0f) == 0;}  }
class C{  private Point2D calculateLabelPoint(Line2D line,RectangleAnchor anchor,double deltaX,double deltaY){  double x, y;  boolean left=(anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.LEFT || anchor == RectangleAnchor.TOP_LEFT);  boolean right=(anchor == RectangleAnchor.BOTTOM_RIGHT || anchor == RectangleAnchor.RIGHT || anchor == RectangleAnchor.TOP_RIGHT);  boolean top=(anchor == RectangleAnchor.TOP_LEFT || anchor == RectangleAnchor.TOP || anchor == RectangleAnchor.TOP_RIGHT);  boolean bottom=(anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.BOTTOM || anchor == RectangleAnchor.BOTTOM_RIGHT);  Rectangle rect=line.getBounds();  if (line.getX1() == line.getX2()) {    x=line.getX1();    y=(line.getY1() + line.getY2()) / 2.0;    if (left) {      x=x - deltaX;    }    if (right) {      x=x + deltaX;    }    if (top) {      y=Math.min(line.getY1(),line.getY2()) + deltaY;    }    if (bottom) {      y=Math.max(line.getY1(),line.getY2()) - deltaY;    }  } else {    x=(line.getX1() + line.getX2()) / 2.0;    y=line.getY1();    if (left) {      x=Math.min(line.getX1(),line.getX2()) + deltaX;    }    if (right) {      x=Math.max(line.getX1(),line.getX2()) - deltaX;    }    if (top) {      y=y - deltaY;    }    if (bottom) {      y=y + deltaY;    }  }  return new Point2D.Double(x,y);}  }
class C{  @Deprecated public HibernateTransaction(Session session){  this.session=session;  this.isScrollEnabled=true;  this.scrollMode=ScrollMode.FORWARD_ONLY;}  }
class C{  public static double similarity(String s1,String s2){  String longer=s1, shorter=s2;  if (s1.length() < s2.length()) {    longer=s2;    shorter=s1;  }  int longerLength=longer.length();  if (longerLength == 0) {    return 1.0;  }  return (longerLength - editDistance(longer,shorter)) / (double)longerLength;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.702 -0400",hash_original_method="EE7D24D9E196708648F7B6757F98A148",hash_generated_method="0C5935FE6BFAC081460AB6D04D25D4FF") private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.b1:    worker.showTitle("fill this up now");  break;case R.id.b2:worker.showLogo();break;case R.id.b3:worker.triggerfromSearchIcon();break;case R.id.b4:worker.updateCount(u++);break;case R.id.b5:worker.updateCount(0);break;case R.id.bxx:finish();break;}}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 39:{        start=zzMarkedPos - yylength();        yybegin(STRING_Q_LT);      }case 52:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 53:break;case 45:{addToken(Token.LITERAL_BOOLEAN);}case 54:break;case 32:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 55:break;case 19:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_PAREN);return firstToken;}case 56:break;case 18:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_CURLY_BRACE);return firstToken;}case 57:break;case 20:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SLASH);return firstToken;}case 58:break;case 46:{yybegin(YYINITIAL);addToken(start,zzStartRead + 3,Token.COMMENT_DOCUMENTATION);}case 59:break;case 10:{start=zzMarkedPos - 1;yybegin(STRING);}case 60:break;case 44:{if (start == zzStartRead) {addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}}case 61:break;case 9:{addToken(Token.FUNCTION);}case 62:break;case 22:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_LT);return firstToken;}case 63:break;case 42:{addToken(Token.VARIABLE);}case 64:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 65:break;case 31:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 66:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 67:break;case 41:{start=zzMarkedPos - yylength();yybegin(STRING_Q_CURLY_BRACE);}case 68:break;case 50:{start=zzStartRead;yybegin(HEREDOC_EOF_SINGLE_QUOTED);}case 69:break;case 51:{start=zzStartRead;yybegin(HEREDOC_EOT_SINGLE_QUOTED);}case 70:break;case 47:{start=zzStartRead;yybegin(HEREDOC_EOF_UNQUOTED);}case 71:break;case 14:{}case 72:break;case 25:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 73:break;case 43:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 74:break;case 28:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 75:break;case 6:{addToken(Token.WHITESPACE);}case 76:break;case 17:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_BANG);return firstToken;}case 77:break;case 35:{addToken(Token.PREPROCESSOR);}case 78:break;case 11:{start=zzMarkedPos - 1;yybegin(CHAR_LITERAL);}case 79:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 80:break;case 38:{start=zzMarkedPos - yylength();yybegin(STRING_Q_SLASH);}case 81:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_BACKQUOTE);}case 82:break;case 16:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 83:break;case 37:{start=zzMarkedPos - yylength();yybegin(STRING_Q_BANG);}case 84:break;case 23:{}case 85:break;case 30:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 86:break;case 49:{start=zzMarkedPos - 6;yybegin(DOCCOMMENT);}case 87:break;case 34:{addToken(Token.RESERVED_WORD);}case 88:break;case 26:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 89:break;case 36:{start=zzMarkedPos - yylength();yybegin(STRING_Q_SQUARE_BRACKET);}case 90:break;case 8:{addToken(Token.SEPARATOR);}case 91:break;case 5:{addNullToken();return firstToken;}case 92:break;case 21:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SQUARE_BRACKET);return firstToken;}case 93:break;case 40:{start=zzMarkedPos - yylength();yybegin(STRING_Q_PAREN);}case 94:break;case 7:{addToken(Token.OPERATOR);}case 95:break;case 24:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 96:break;case 33:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 97:break;case 48:{start=zzStartRead;yybegin(HEREDOC_EOT_UNQUOTED);}case 98:break;case 12:{start=zzMarkedPos - 1;yybegin(BACKTICKS);}case 99:break;case 13:{}case 100:break;case 15:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 101:break;case 29:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 102:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case HEREDOC_EOF_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 345:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 346:break;case HEREDOC_EOT_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 347:break;case HEREDOC_EOT_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 348:break;case STRING_Q_SLASH:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SLASH);return firstToken;}case 349:break;case STRING_Q_BANG:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_BANG);return firstToken;}case 350:break;case STRING_Q_LT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_LT);return firstToken;}case 351:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 352:break;case BACKTICKS:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 353:break;case YYINITIAL:{addNullToken();return firstToken;}case 354:break;case HEREDOC_EOF_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 355:break;case STRING_Q_CURLY_BRACE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_CURLY_BRACE);return firstToken;}case 356:break;case STRING_Q_PAREN:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_PAREN);return firstToken;}case 357:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 358:break;case STRING_Q_SQUARE_BRACKET:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SQUARE_BRACKET);return firstToken;}case 359:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  public static byte[] padByteArray(final byte[] byteAddress,final int len){  final byte[] padAddress=new byte[len];  System.arraycopy(byteAddress,0,padAddress,0,Math.min(len,byteAddress.length));  if (Cfg.DEBUG) {    Check.ensures(padAddress.length == len,"padByteArray wrong len: " + padAddress.length);  }  return padAddress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.274 -0400",hash_original_method="655B1AE9ACF0DD48CFC5F4BF8909FA7B",hash_generated_method="B19AF574353C38598D11E17BD8E85B1E") public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  public void showErrorMessages(final String line){  showMessage(line,ConsoleViewContentType.ERROR_OUTPUT.getAttributes());}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  protected void sequence_HexEscapeSequence(ISerializationContext context,HexEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.HEX_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.HEX_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getHexEscapeSequenceAccess().getSequenceHEX_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  private void readCurrentByte(){  int val=byteStream.read();  if (val >= 0) {    currentByte=(byte)val;  } else {    currentByte=0;  }  currentBitIndex=Byte.SIZE - 1;}  }
class C{  public BulletConstructor(final Model model,final float mass,final float width,final float height,final float depth){  create(model,mass,width,height,depth);}  }
class C{  public static IPoint[] copyOf(IPoint[] original,int newLength){  IPoint[] copy=new IPoint[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public static void generateRandomMatrix(MatrixBlock out,RandomMatrixGenerator rgen,long[] nnzInBlocks,Well1024a bigrand,long bSeed,int k) throws DMLRuntimeException {  int rows=rgen._rows;  int cols=rgen._cols;  int rpb=rgen._rowsPerBlock;  int cpb=rgen._colsPerBlock;  double sparsity=rgen._sparsity;  checkMatrixDimensionsAndSparsity(rows,cols,sparsity);  double min=rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM) ? rgen._min : 0;  double max=rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM) ? rgen._max : 1;  final long estnnz=((min == 0.0 && max == 0.0) ? 0 : (long)(sparsity * rows * cols));  boolean lsparse=MatrixBlock.evalSparseFormatInMemory(rows,cols,estnnz);  if (k <= 1 || (rows <= rpb && lsparse) || (long)rows * cols < PAR_NUMCELL_THRESHOLD || !MatrixBlock.isThreadSafe(lsparse)) {    generateRandomMatrix(out,rgen,nnzInBlocks,bigrand,bSeed);    return;  }  out.reset(rows,cols,lsparse);  if (rgen._pdf.equalsIgnoreCase(RAND_PDF_UNIFORM)) {    if (min == 0.0 && max == 0.0) {      out.nonZeros=0;      return;    } else     if (!out.sparse && sparsity == 1.0d && min == max) {      out.reset(out.rlen,out.clen,min);      return;    }  }  if (out.sparse)   out.allocateSparseRowsBlock(); else   out.allocateDenseBlock();  int nrb=(int)Math.ceil((double)rows / rpb);  int ncb=(int)Math.ceil((double)cols / cpb);  boolean parcol=(!out.sparse && nrb < k && ncb > nrb);  int parnb=parcol ? ncb : nrb;  long[] seeds=generateSeedsForCP(bigrand,nrb,ncb);  try {    ExecutorService pool=Executors.newFixedThreadPool(k);    ArrayList<RandTask> tasks=new ArrayList<RandTask>();    int blklen=((int)(Math.ceil((double)parnb / k)));    for (int i=0; i < k & i * blklen < parnb; i++) {      int rl=parcol ? 0 : i * blklen;      int ru=parcol ? nrb : Math.min((i + 1) * blklen,parnb);      int cl=parcol ? i * blklen : 0;      int cu=parcol ? Math.min((i + 1) * blklen,parnb) : ncb;      long[] lseeds=sliceSeedsForCP(seeds,rl,ru,cl,cu,nrb,ncb);      tasks.add(new RandTask(rl,ru,cl,cu,out,rgen,nnzInBlocks,bSeed,lseeds));    }    List<Future<Object>> ret=pool.invokeAll(tasks);    pool.shutdown();    for (    Future<Object> rc : ret)     rc.get();  } catch (  Exception e) {    throw new DMLRuntimeException(e);  }  out.recomputeNonZeros();}  }
class C{  public static Vector3 add(Vector3 a,Vector3 b){  return new Vector3(a.getX() + b.getX(),a.getY() + b.getY(),a.getZ() + b.getZ());}  }
class C{  public LinearDecay(){  this(1e-4,100000);}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  private void initModelAllExtension(Model model,double progressFactor){  double factorPerc=progressFactor / getExtensionCount();  for (int i=0; i < getExtensionCount(); i++) {    try {      getExtension(i).initModel(model);      if (view != null) {        view.addSplashScreenLoadingCompletion(factorPerc);      }    } catch (    Exception e) {      logger.error(e.getMessage(),e);    }  }}  }
class C{  public String sqlObject_dropTrigger(String vendorName,String catalogName,String schemaName,String triggerName,String tableName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropTrigger(catalogName,schemaName,triggerName,tableName);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  this.engine=initTemplateEngine(config);  if (engine == null) {    throw new ServletException("Template engine not instantiated.");  }  String value=config.getInitParameter("generated.by");  if (value != null) {    this.generateBy=Boolean.valueOf(value);  }  value=config.getInitParameter(GROOVY_SOURCE_ENCODING);  if (value != null) {    this.fileEncodingParamVal=value;  }  log("Servlet " + getClass().getName() + " initialized on "+ engine.getClass());}  }
class C{  public SqlConnectionSpecOracle(){  this.tableType="CDC";}  }
class C{  public void mouseReleased(MouseEvent e){  mouseSupport.fireMapMouseReleased(e);  fireMouseLocation(e);}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  @Override public void receiveDecoderStateEvent(DecoderStateEvent event){switch (event.getEvent()) {case RESET:    resetState();  break;default :break;}}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.DEPRECATABLE_ELEMENT;}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_RealLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_RealLiteral_value_feature","_UI_RealLiteral_type"),SGenPackage.Literals.REAL_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.REAL_VALUE_IMAGE,null,null));}  }
class C{  public Collection<TFieldIdEnum> exceptionFields(){  return exceptionFields.values();}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.418 -0500",hash_original_method="66DA1C106B1B7F2AFB03D110B785A501",hash_generated_method="2C261E0300BC82829635A8C7705EBEBA") public void put(String key,Float value){  mValues.put(key,value);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public synchronized void incrementSemaphore(){  try {    mutex.acquire();    this.total++;  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  } finally {    mutex.release();  }}  }
class C{  public static void invokeInEveryVM(final SerializableRunnableIF runnable){  invokeInEveryVM(null,runnable);}  }
class C{  public static Animation makeInChildBottomAnimation(Context c){  Animation a;  a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_child_bottom);  a.setInterpolator(new AccelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  @NotNull @ObjectiveCName("validateCodeCommand:") public Command<AuthState> validateCode(final String code){  return modules.getAuthModule().requestValidateCode(code);}  }
class C{  public final void deleteCommand(final int id){  try {    AlertDialogUtils.newInstance(ID_DELETE_SESSION,getResources().getString(R.string.delete),getResources().getString(R.string.do_you_want_to_delete_this_session),String.valueOf(id),false).show(getSupportFragmentManager(),"delete");  } catch (  IllegalStateException e) {  }}  }
class C{  public synchronized void addProperty(String key,String value){  if (state == State.SHUT_DOWN)   return;  if (!activePropertyTableChunk.add(key,value)) {    activePropertyTableChunk.close();    unwrittenMetaChunks.enqueue(activePropertyTableChunk);    activePropertyTableChunk=new PropertyTableChunk();    if (!activePropertyTableChunk.add(key,value)) {      if (VM.VerifyAssertions) {        VM.sysFail("PropertyTableChunk is too small to to add " + key + " = "+ value);      }    }  }}  }
class C{  public StringTrie(boolean ignoreCase){  this.ignoreCase=ignoreCase;  clear();}  }
class C{  public static void applyDetectedState(SampledVertex v,Attributes attrs){  String str=attrs.getValue(DETECTED_ATTR);  if (str != null)   v.detect(new Integer(str));}  }
class C{  @Override public void registerAutoReclaim(){  m_allocator.registerBufferAutoReclaim(this);}  }
class C{  public static final boolean isExplicitThisDereference(ExpressionTree tree){  if (tree.getKind() == Tree.Kind.IDENTIFIER && ((IdentifierTree)tree).getName().contentEquals("this")) {    return true;  }  if (tree.getKind() != Tree.Kind.MEMBER_SELECT) {    return false;  }  MemberSelectTree memSelTree=(MemberSelectTree)tree;  if (memSelTree.getIdentifier().contentEquals("this")) {    return true;  }  return false;}  }
class C{  public NTRUSigningParameters(InputStream is) throws IOException {  DataInputStream dis=new DataInputStream(is);  N=dis.readInt();  q=dis.readInt();  d=dis.readInt();  d1=dis.readInt();  d2=dis.readInt();  d3=dis.readInt();  B=dis.readInt();  beta=dis.readDouble();  normBound=dis.readDouble();  signFailTolerance=dis.readInt();  bitsF=dis.readInt();  String alg=dis.readUTF();  if ("SHA-512".equals(alg)) {    hashAlg=new SHA512Digest();  } else   if ("SHA-256".equals(alg)) {    hashAlg=new SHA256Digest();  }  init();}  }
class C{  public static final String makeCompoundField(String delimiter,String... term){  StringBuilder sb=new StringBuilder();  for (  String s : term) {    if (s.length() != 0) {      if (delimiter != null && sb.length() != 0) {        sb.append(delimiter);      }      sb.append(s);    }  }  return sb.toString();}  }
class C{  public void sort(){  Collections.sort(individuals,PERFORMANCE_COMPARATOR);}  }
class C{  public void layoutContainer(Container parent){  if (parent.getComponentCount() > 0) {    Insets insets=parent.getInsets();    int w=parent.getWidth() - (insets.left + insets.right);    int h=parent.getHeight() - (insets.top + insets.bottom);    getComponent(0).setBounds(insets.left,insets.top,w,h);  }}  }
class C{  public SuggestWord(){}  }
class C{  private void loadLevel(int levelNumber){  if (mCountDownTimer != null) {    mCountDownTimer.cancel();  }  mCountLevelBallRespawns=0;  mNumberCollected=0;  mViewPlayAgainLevel.setText(String.valueOf(levelNumber));  Body body=mWorld.getWorld().getBodyList();  while (body != null) {    if (body.m_userData == null) {      body=body.getNext();      continue;    }    mWorld.mBodiesToBeRemoved.add(body);    body=body.getNext();  }  mWorld.getWorld().step(1.0f / 60.0f,10,10);  try {    JSONObject level=readLevelFile(levelNumber);    JSONArray canes=level.getJSONArray("candycanes");    for (int i=0; i < canes.length(); i++) {      JSONObject canePart=canes.getJSONObject(i);      int type=canePart.getInt("type");      float xPos=(float)canePart.getDouble("xPos");      float yPos=(float)canePart.getDouble("yPos");      mWorld.addItem(xPos,yPos,Edges.getEdges(type),WORLD_OBJECT_BOUNCE,type,WORLD_OBJECT_DENSITY,WORLD_OBJECT_FRICTION,BodyType.STATIC);    }    mWorld.addItem(WORLD_FLOOR_X,WORLD_FLOOR_Y,Edges.getPipeSideEdges(),WORLD_OBJECT_BOUNCE,TiltGameView.PIPE_SIDES,WORLD_OBJECT_DENSITY,WORLD_OBJECT_FRICTION,BodyType.STATIC);    mWorld.addFloor(WORLD_FLOOR_X,WORLD_FLOOR_Y,TiltGameView.GAME_FLOOR,WORLD_OBJECT_DENSITY,WORLD_OBJECT_FRICTION,WORLD_FLOOR_FRICTION,BodyType.STATIC);    mWorld.addPipeBottom(WORLD_FLOOR_X,WORLD_FLOOR_Y,TiltGameView.PIPE_BOTTOM,WORLD_OBJECT_DENSITY,WORLD_OBJECT_FRICTION,WORLD_FLOOR_FRICTION,BodyType.STATIC);    JSONArray gumballs=level.getJSONArray("gumballs");    mGameBallsLeft=gumballs.length();    setIndicators(mGameBallsLeft);    for (int j=0; j < gumballs.length(); j++) {      JSONObject gumball=gumballs.getJSONObject(j);      float xPos=(float)gumball.getDouble("xPos");      float yPos=(float)gumball.getDouble("yPos");      Gumball gumballObject=new Gumball();      gumballObject.mXInitPos=xPos;      gumballObject.mYInitPos=yPos;      mGumballQueue.add(gumballObject);    }    mCurrentGumball=mGumballQueue.poll();    if (mCurrentGumball != null) {      if (mCurrentLevelNum > 1) {        mTimeLeftInMillis+=MatchingGameConstants.GUMBALL_ADDED_TIME;      }      mCountDownTimer=new GameCountdown(mFramesPerSecond,mTimeLeftInMillis);      mCountDownTimer.start();      mGameView.setGameCountDown(mCountDownTimer);      moveOutlet((mCurrentGumball.mXInitPos));    }  } catch (  IOException e) {  }catch (  JSONException e) {  }}  }
class C{  private static boolean higher_equal(int x,int y){  return (x & 0xFFFFFFFFL) >= ((long)y & 0xFFFFFFFF);}  }
class C{  private CBinExportFiles(){}  }
class C{  private void deleteTexture(){  if (glTextureId != 0) {    TextureUtil.deleteTexture(glTextureId);    glTextureId=0;  }}  }
class C{  public static File soundsDir(){  lock.readLock().lock();  try {    return (sounds_dir != null) ? sounds_dir : new File(dataDir(),DEFAULT_DIR_NAME_SOUNDS);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void writeFile(String name,String mimeType,File file) throws java.io.IOException {  if (file == null) {    throw new IllegalArgumentException("File cannot be null.");  }  if (!file.exists()) {    throw new IllegalArgumentException("File does not exist.");  }  if (file.isDirectory()) {    throw new IllegalArgumentException("File cannot be a directory.");  }  writeFile(name,mimeType,file.getCanonicalPath(),new FileInputStream(file));}  }
class C{  public static boolean isInitiatorInUse(DbClient dbClient,String iniId){  List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"initiators",iniId));  return !exportGroups.isEmpty();}  }
class C{  public EyePositionAnimator(Interpolator interpolator,Position beginCenter,Position endCenter,Position endEyePosition,Vec4 forward,Angle pitch,PropertyAccessor.PositionAccessor propertyAccessor,int altitudeMode){  super(interpolator,beginCenter,endCenter,propertyAccessor);  this.forward=forward;  this.pitch=pitch;  this.endEyePosition=endEyePosition;  this.eyeAltitudeMode=altitudeMode;}  }
class C{  public static void moveCaretToLineStartIgnoringSoftWraps(@NotNull Editor editor){  editor.getCaretModel().moveToLogicalPosition(EditorUtil.calcCaretLineRange(editor).first);}  }
class C{  @Benchmark public Frame encodeNextCompleteHello(Input input) throws InterruptedException {  return utf8EncodedFrame(0,FrameType.NEXT_COMPLETE,"hello");}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public NodeListImpl(ArrayList<Node> nodes){  mStaticNodes=nodes;}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  private void scanFrameForCode(ObjectReference code){  iterator.reset();  for (Address retaddrLoc=iterator.getNextReturnAddressAddress(); !retaddrLoc.isZero(); retaddrLoc=iterator.getNextReturnAddressAddress())   processCodeLocation(code,retaddrLoc);}  }
class C{  public void deleteInstance(boolean multiple){  if (!isPanelSelected()) {    return;  }  if (multiple) {    getCurrentPanel().deleteInstances();  } else {    getCurrentPanel().deleteInstance();  }}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  public int size(){  return this.pathCondition.size();}  }
class C{  public LinearFormation(Settings s){  super(s);  int coords[];  coords=s.getCsvInts(LINEAR_FORMATION_NS + START_LOCATION_S,2);  this.startLoc=new Coord(coords[0],coords[1]);  coords=s.getCsvInts(LINEAR_FORMATION_NS + END_LOCATION_S,2);  this.endLoc=new Coord(coords[0],coords[1]);  this.nodeCount=s.getInt(core.SimScenario.NROF_HOSTS_S);  this.lastIndex=0;}  }
class C{  public static void main(String[] args) throws Exception {  new AsyncSender().startUp();}  }
class C{  private static void checkAccess(RVMMember member,RVMClass accessingClass) throws IllegalAccessException {  RVMClass declaringClass=member.getDeclaringClass();  if (member.isPrivate()) {    if (accessingClass == declaringClass)     return;  } else   if (member.isProtected()) {    if (declaringClass.getClassLoader() == accessingClass.getClassLoader() && declaringClass.getPackageName().equals(accessingClass.getPackageName()))     return;    for (RVMClass cls=accessingClass; cls != null; cls=cls.getSuperClass()) {      if (accessingClass == declaringClass)       return;    }  } else {    if (declaringClass.getClassLoader() == accessingClass.getClassLoader() && declaringClass.getPackageName().equals(accessingClass.getPackageName()))     return;  }  throwNewIllegalAccessException(member,accessingClass);}  }
class C{  public static Collection<ContentStream> toContentStreams(final String str,final String contentType){  if (str == null)   return null;  ArrayList<ContentStream> streams=new ArrayList<>(1);  ContentStreamBase ccc=new ContentStreamBase.StringStream(str);  ccc.setContentType(contentType);  streams.add(ccc);  return streams;}  }
class C{  static boolean positionsOrdered(Spans spans1,Spans spans2){  assert spans1.docID() == spans2.docID() : "doc1 " + spans1.docID() + " != doc2 "+ spans2.docID();  int start1=spans1.startPosition();  int start2=spans2.startPosition();  return (start1 == start2) ? (spans1.endPosition() < spans2.endPosition()) : (start1 < start2);}  }
class C{  private File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("multibit");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitBlockcheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitBlockcheckpoints);  multibitBlockcheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.ACTION_ARGUMENTS__ARGS:    return getArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static byte[] toByteArray(char[] chars){  byte[] result=new byte[chars.length];  for (int i=chars.length - 1; i >= 0; i--) {    result[i]=(byte)chars[i];  }  return result;}  }
class C{  public LVQ(DistanceMetric dm,int iterations){  this(dm,iterations,DEFAULT_LEARNING_RATE,DEFAULT_REPS_PER_CLASS);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.361 -0500",hash_original_method="0CBFF056CB46F189F8DC45AFB469D5F9",hash_generated_method="D0001D1DA32AF75F5957F8071053FA0F") public String toString(){  return Integer.toString(get());}  }
class C{  protected void saveNow(){  WalletFiles files=vFileManager;  if (files != null) {    try {      files.saveNow();    } catch (    IOException e) {      log.error("Failed to save wallet to disk!",e);      Thread.UncaughtExceptionHandler handler=Threading.uncaughtExceptionHandler;      if (handler != null)       handler.uncaughtException(Thread.currentThread(),e);    }  }}  }
class C{  public static String quote(String input){  if (input.contains(" ")) {    return "\"" + input + "\"";  } else {    return input;  }}  }
class C{  private ArrayList<AStarNode> backTrace(AStarNode start){  ArrayList<AStarNode> foundpath=new ArrayList<AStarNode>();  foundpath.add(currentNode);  int x;  int y;  int z;  int px;  int pz;  int dx;  int dz;  while (!currentNode.equals(start)) {    x=currentNode.x;    y=currentNode.y;    z=currentNode.z;    px=currentNode.parent.x;    pz=currentNode.parent.z;    dx=(px - x) / Math.max(Math.abs(x - px),1);    dz=(pz - z) / Math.max(Math.abs(z - pz),1);    x+=dx;    z+=dz;    while (x != px || z != pz) {      y=getGroundNodeHeight(x,y,z);      foundpath.add(new AStarNode(x,y,z,0,null));      x+=dx;      z+=dz;    }    foundpath.add(currentNode.parent);    currentNode=currentNode.parent;  }  return foundpath;}  }
class C{  public static <T>int indexOf(T[] objectArray,T elem){  return InternalArrayIterate.indexOf(objectArray,objectArray.length,elem);}  }
class C{  public boolean generate(Projection proj){  if (text != null)   text.regenerate(proj);  for (int i=0; i < gPoints.length; i++) {    GrabPoint gp=gPoints[i];    if (gp != null) {      gp.generate(proj);    }  }  return true;}  }
class C{  public BuildImageParams withQuiet(boolean quiet){  this.quiet=quiet;  return this;}  }
class C{  public void testDoCheckWithDefaultDetectionResult(){  LOGGER.debug("doCheckWithDefaultDetectionResult");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test.html");  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("html"));  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,DETECTION_MSG);  expectLastCall().once();  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);}  }
class C{  void dfs(int s,int d,boolean[] visited,List<Integer> path,int pos){  visited[s]=true;  path.add(s);  if (s == d) {    for (    int i : path)     System.out.print(i + "->");    System.out.println();  }  for (  int next : adjacent.get(s)) {    if (!visited[next]) {      dfs(next,d,visited,path,pos + 1);    }  }  path.remove(path.size() - 1);  visited[s]=false;}  }
class C{  public EmailIntentBuilder to(@NonNull String to){  checkEmail(to);  this.to.add(to);  return this;}  }
class C{  public ExprConstantNodeImpl(Class clazz){  this.clazz=clazz;  this.value=null;}  }
class C{  public boolean isConstructor(){  return false;}  }
class C{  protected void processRootPom() throws IOException {  File rootPom=new File(projectRoot,ROOT_POM);  String rootPomContent=readFileContent(rootPom);  String depString=GEN_START + String.format("<dependency>%n<groupId>%s</groupId>%n<artifactId>%s</artifactId>%n<version>%s</version>%n</dependency>%n",mavenGroupId,mavenArtifactId,mavenModuleVersion) + GEN_END;  rootPomContent=rootPomContent.replace(DEP_MANAGE_END_TAG,depString + DEP_MANAGE_END_TAG);  String moduleString=GEN_START + String.format("<module>%s</module>%n",mavenArtifactId) + GEN_END;  rootPomContent=rootPomContent.replace(MODULE_CLEINT,moduleString + MODULE_CLEINT);  writeFileContent(rootPomContent,rootPom);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.568 -0500",hash_original_method="9974C6A3EEB89F79A5040D80CF59B71F",hash_generated_method="599015E0527571C431A15827FA2EB1AB") public static long handleKeyDown(long state,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    return press(state,META_SHIFT_ON,META_SHIFT_MASK,META_CAP_LOCKED,META_CAP_PRESSED,META_CAP_RELEASED,META_CAP_USED);  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    return press(state,META_ALT_ON,META_ALT_MASK,META_ALT_LOCKED,META_ALT_PRESSED,META_ALT_RELEASED,META_ALT_USED);  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    return press(state,META_SYM_ON,META_SYM_MASK,META_SYM_LOCKED,META_SYM_PRESSED,META_SYM_RELEASED,META_SYM_USED);  }  return state;}  }
class C{  private void discoverAssociatedStorageSystems(ProtectionSystem protectionSystem){  List<RPSiteArray> siteArrays=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,RPSiteArray.class,AlternateIdConstraint.Factory.getConstraint(RPSiteArray.class,"rpProtectionSystem",protectionSystem.getId().toString()));  StringSet associatedStorageSystems=protectionSystem.getAssociatedStorageSystems();  associatedStorageSystems.clear();  protectionSystem.setAssociatedStorageSystems(associatedStorageSystems);  for (  RPSiteArray siteArray : siteArrays) {    if (siteArray != null && siteArray.getStorageSystem() != null) {      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,siteArray.getStorageSystem());      String serialNumber=storageSystem.getSerialNumber();      if (protectionSystem.getSiteVisibleStorageArrays() != null) {        for (        Map.Entry<String,AbstractChangeTrackingSet<String>> clusterStorageSystemSerialNumberEntry : protectionSystem.getSiteVisibleStorageArrays().entrySet()) {          if (siteArray.getRpInternalSiteName().equals(clusterStorageSystemSerialNumberEntry.getKey())) {            for (            String clusterSerialNumber : clusterStorageSystemSerialNumberEntry.getValue()) {              URI foundStorageSystemURI=ConnectivityUtil.findStorageSystemBySerialNumber(clusterSerialNumber,_dbClient,StorageSystemType.BLOCK);              if (storageSystem.getId().equals(foundStorageSystemURI)) {                serialNumber=clusterSerialNumber;                break;              }            }          }        }      }      if (ConnectivityUtil.isAVPlex(storageSystem) && serialNumber.contains(":")) {        String[] splitSerialNumber=serialNumber.split(":");        String firstHalf=splitSerialNumber[0];        String secondHalf=splitSerialNumber[1];        if (isNetworkConnected(firstHalf,siteArray)) {          protectionSystem.getAssociatedStorageSystems().add(ProtectionSystem.generateAssociatedStorageSystem(siteArray.getRpInternalSiteName(),String.valueOf(firstHalf)));        }        serialNumber=secondHalf;      }      if (isNetworkConnected(serialNumber,siteArray)) {        protectionSystem.getAssociatedStorageSystems().add(ProtectionSystem.generateAssociatedStorageSystem(siteArray.getRpInternalSiteName(),String.valueOf(serialNumber)));      }    }  }  _dbClient.updateObject(protectionSystem);}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  private static Sequence createCollectionCreationSequence(InstantiatedType implementingType,ReferenceType elementType){  Sequence creationSequence=new Sequence();  List<Variable> creationInputs=new ArrayList<>();  TypedOperation creationOperation;  if (implementingType.isInstantiationOf(JDKTypes.ENUM_SET_TYPE)) {    NonreceiverTerm classLiteral=new NonreceiverTerm(JavaTypes.CLASS_TYPE,elementType.getRuntimeClass());    creationSequence=creationSequence.extend(TypedOperation.createNonreceiverInitialization(classLiteral));    creationInputs.add(creationSequence.getLastVariable());    creationOperation=getEnumSetCreation(implementingType);  } else {    Constructor<?> constructor=getDefaultConstructor(implementingType);    if (constructor == null) {      return null;    }    ConstructorCall op=new ConstructorCall(constructor);    creationOperation=new TypedClassOperation(op,implementingType,new TypeTuple(),implementingType);  }  return creationSequence.extend(creationOperation,creationInputs);}  }
class C{  public SuffixArraySample sample(final int[] sourceQuery,int maxSamples,int minBound,int maxBound,boolean exactMatch){  if (sourceQuery.length == 0)   return new SuffixArraySample(Collections.emptyList(),-1,-1);  int lb=maxBound > minBound ? findBound(sourceQuery,true,true,minBound,maxBound) : findBound(sourceQuery,true,true,minBound);  if (lb < 0)   return new SuffixArraySample(Collections.emptyList(),-1,-1);  int ub=maxBound > lb ? findBound(sourceQuery,true,false,lb,maxBound) : findBound(sourceQuery,true,false,lb);  assert ub >= 0;  int numHits=ub - lb + 1;  int stepSize=(numHits < maxSamples) ? 1 : numHits / maxSamples;  assert stepSize > 0;  List<SentencePair> samples=new ArrayList<>(maxSamples);  for (int i=lb; i <= ub && samples.size() < maxSamples; i+=stepSize) {    SentencePair sp=new SentencePair(srcSuffixArray[i]);    if (!exactMatch || sp.sourceLength() == sourceQuery.length)     samples.add(sp);  }  return new SuffixArraySample(samples,lb,ub);}  }
class C{  public ZipfianGenerator(long min,long max,double _zipfianconstant,double _zetan){  items=max - min + 1;  base=min;  zipfianconstant=_zipfianconstant;  theta=zipfianconstant;  zeta2theta=zeta(2,theta);  alpha=1.0 / (1.0 - theta);  zetan=_zetan;  countforzeta=items;  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);  nextInt();}  }
class C{  public AdditiveExpression createAdditiveExpression(){  AdditiveExpressionImpl additiveExpression=new AdditiveExpressionImpl();  return additiveExpression;}  }
class C{  public FilterExprWalker(WalkingIterator locPathIterator){  super(locPathIterator,Axis.FILTEREDLIST);}  }
class C{  private void perceptualDelay(long started){  long delta=System.currentTimeMillis() - started;  if (delta < 500)   try {    Thread.sleep(500 - delta);  } catch (  InterruptedException ignored) {    Thread.currentThread().interrupt();  }}  }
class C{  @Override public String toString(){  String result="AveragingResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  static ResourceBundle loadResourceBundle(String resourceBundleName){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  throw new MissingResourceException("Failed to load the specified resource bundle \"" + resourceBundleName + "\"",resourceBundleName,null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTABLE_EXPRESSION;}  }
class C{  public FeedbackFilter(){}  }
class C{  public TopSecondDegreeByCount(NodeMetadataLeftIndexedMultiSegmentBipartiteGraph leftIndexedBipartiteGraph,int expectedNodesToHit,StatsReceiver statsReceiver){  this.leftIndexedBipartiteGraph=leftIndexedBipartiteGraph;  this.visitedRightNodes=new Long2ObjectOpenHashMap<NodeInfo>(expectedNodesToHit);  this.nodeInfosAfterFiltering=new ArrayList<NodeInfo>();  this.seenEdgesPerNode=new Long2ByteArrayMap();  this.topSecondDegreeByCountStats=new RecommendationStats();  this.statsReceiver=statsReceiver.scope("TopSecondDegreeByCount");  this.numRequestsCounter=this.statsReceiver.counter("numRequests");}  }
class C{  public double max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  double max=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    max=Math.max(max,_data[_pos]);  }  return max;}  }
class C{  public Options sharedOptions(){  return urlParser.getOptions();}  }
class C{  public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean shouldSelectCell(EventObject e){  return true;}  }
class C{  public boolean isSourceMapEmbed(){  return sourceMapEmbed;}  }
class C{  protected int[] attributeList(BitSet group){  int count=0;  for (int i=0; i < m_numAttribs; i++) {    if (group.get(i)) {      count++;    }  }  int[] list=new int[count];  count=0;  for (int i=0; i < m_numAttribs; i++) {    if (group.get(i)) {      list[count++]=i;    }  }  return list;}  }
class C{  @LargeTest public void testFrameOverlayJPGImage() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem1);  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);  mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId1",mBitmap,5000,5000);}  }
class C{  public VOSubscriptionDetails addUser(String modificationTime,String subscriptionId,VOUser user,VORoleDefinition role) throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(modificationTime);  List<VOUsageLicense> usageLicenses=createUsageLicenceVOList(user,role);  subscriptionService.addRevokeUser(subscriptionId,usageLicenses,null);  return subscriptionService.getSubscriptionDetails(subscriptionId);}  }
class C{  private static MatrixBlock computeCholesky(Array2DRowRealMatrix in) throws DMLRuntimeException {  if (!in.isSquare())   throw new DMLRuntimeException("Input to cholesky() must be square matrix -- given: a " + in.getRowDimension() + "x"+ in.getColumnDimension()+ " matrix.");  CholeskyDecomposition cholesky=new CholeskyDecomposition(in);  RealMatrix rmL=cholesky.getL();  return DataConverter.convertToMatrixBlock(rmL.getData());}  }
class C{  private FpUtils(){}  }
class C{  public static ApproximateUpdaterWrapper serializableInstance(){  return new ApproximateUpdaterWrapper(BayesImWrapper.serializableInstance(),new Parameters());}  }
class C{  protected void verifyWeblogicHome(){  List<String> requiredDirs=this.getWeblogicHomeDirs();  List<String> requiredFiles=this.getWeblogicHomeFiles();  String errorPrefix="Invalid WebLogic installation. ";  String errorSuffix="Make sure the WL_HOME directory you have specified " + "points to the right location (It's currently pointing to [" + getWeblogicHome() + "])";  verify(errorPrefix,errorSuffix,requiredDirs,requiredFiles);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.203 -0500",hash_original_method="0933141A2BB19D63525BF81BE900CD97",hash_generated_method="7DAF1A7203D408BDFAB1D871ECB1CE25") public void rMoveTo(float dx,float dy){  addTaint(dx + dy);}  }
class C{  public void comment(String text){  comments.add(new CommentText(text));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.292 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  public static void writeBufferedImage(BufferedImage image,String format,OutputStream outputStream) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format);  imageEncoder.encode(image,outputStream);}  }
class C{  @Override public void invalidateDirectories(String why){}  }
class C{  public WKBHexFileReader(File file,WKBReader wkbReader){  this.file=file;  this.wkbReader=wkbReader;}  }
class C{  public synchronized void clearCaches(){  classTable=null;  classAdapterCache=null;  interfaceAdapterCache=null;}  }
class C{  @Override public FileChannel truncate(long size) throws IOException {  throw new NonWritableChannelException();}  }
class C{  public T eval(){  final Assignment assignment=new Assignment(null,null);  assignment.set("x",this);  return Helper.cast(assignment.get("x"));}  }
class C{  public static void main(String args[]){  long beginTime=System.nanoTime();  try {    ClientThread[] threads=new ClientThread[10];    for (int i=0; i < threads.length; i++) {      threads[i]=new URLLicenseConcurrentTest.ClientThread();      threads[i].setName("ClientThread" + i);      threads[i].start();    }    for (int i=0; i < threads.length; i++) {      try {        threads[i].join();      } catch (      InterruptedException e) {      }    }  }  finally {    long time=System.nanoTime() - beginTime;    System.out.println("Test run in " + time / 1000000 + "ms");    ConcurrentLog.shutdown();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.710 -0500",hash_original_method="EC5C003DA4A6F1C86FB6170174AAC10C",hash_generated_method="A07A19277BBF8A8BEA40D6F91E3D9E76") private String createDigest(final Credentials credentials) throws AuthenticationException {  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (uri == null) {    throw new IllegalStateException("URI may not be null");  }  if (realm == null) {    throw new IllegalStateException("Realm may not be null");  }  if (nonce == null) {    throw new IllegalStateException("Nonce may not be null");  }  if (algorithm == null) {    algorithm="MD5";  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  if (qopVariant == QOP_AUTH_INT) {    throw new AuthenticationException("Unsupported qop in HTTP Digest authentication");  }  MessageDigest md5Helper=createMessageDigest("MD5");  String uname=credentials.getUserPrincipal().getName();  String pwd=credentials.getPassword();  StringBuilder tmp=new StringBuilder(uname.length() + realm.length() + pwd.length()+ 2);  tmp.append(uname);  tmp.append(':');  tmp.append(realm);  tmp.append(':');  tmp.append(pwd);  String a1=tmp.toString();  if (algorithm.equalsIgnoreCase("MD5-sess")) {    String cnonce=getCnonce();    String tmp2=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));    StringBuilder tmp3=new StringBuilder(tmp2.length() + nonce.length() + cnonce.length()+ 2);    tmp3.append(tmp2);    tmp3.append(':');    tmp3.append(nonce);    tmp3.append(':');    tmp3.append(cnonce);    a1=tmp3.toString();  } else   if (!algorithm.equalsIgnoreCase("MD5")) {    throw new AuthenticationException("Unhandled algorithm " + algorithm + " requested");  }  String md5a1=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));  String a2=null;  if (qopVariant == QOP_AUTH_INT) {  } else {    a2=method + ':' + uri;  }  String md5a2=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(a2)));  String serverDigestValue;  if (qopVariant == QOP_MISSING) {    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + md5a2.length());    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  } else {    String qopOption=getQopVariantString();    String cnonce=getCnonce();    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + NC.length()+ cnonce.length()+ qopOption.length()+ md5a2.length()+ 5);    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(NC);    tmp2.append(':');    tmp2.append(cnonce);    tmp2.append(':');    tmp2.append(qopOption);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  }  String serverDigest=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(serverDigestValue)));  return serverDigest;}  }
class C{  private void reclaimLargeReusablePacket(){  if ((this.reusablePacket != null) && (this.reusablePacket.getCapacity() > 1048576)) {    this.reusablePacket=new Buffer(INITIAL_PACKET_SIZE);  }}  }
class C{  private void openDialog(int icon,int title,String message){  new MaterialDialog.Builder(getActivity()).icon(ContextCompat.getDrawable(getActivity(),icon)).title(title).content(message).cancelable(true).positiveText(R.string.donations__button_close).show();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_arg0)   m_arg0.fixupVariables(vars,globalsSize);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Map<String,List<String>> readHandshake(WebSocketInputStream input,String key) throws WebSocketException {  return new HandshakeReader(this).readHandshake(input,key);}  }
class C{  public void testBug64731() throws Exception {  byte[] data=StringUtils.getBytesWrapped("0f0f0702",'\'','\'',null,"gbk","latin1",false,null);  assertTrue(StringUtils.toString(data),true);}  }
class C{  public void unsetMethod(){  this.method=null;}  }
class C{  public DOMKeyInfo(Element kiElem,XMLCryptoContext context,Provider provider) throws MarshalException {  Attr attr=kiElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    id=attr.getValue();    kiElem.setIdAttributeNode(attr,true);  } else {    id=null;  }  NodeList nl=kiElem.getChildNodes();  int length=nl.getLength();  if (length < 1) {    throw new MarshalException("KeyInfo must contain at least one type");  }  List<XMLStructure> content=new ArrayList<XMLStructure>(length);  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element childElem=(Element)child;    String localName=childElem.getLocalName();    if (localName.equals("X509Data")) {      content.add(new DOMX509Data(childElem));    } else     if (localName.equals("KeyName")) {      content.add(new DOMKeyName(childElem));    } else     if (localName.equals("KeyValue")) {      content.add(DOMKeyValue.unmarshal(childElem));    } else     if (localName.equals("RetrievalMethod")) {      content.add(new DOMRetrievalMethod(childElem,context,provider));    } else     if (localName.equals("PGPData")) {      content.add(new DOMPGPData(childElem));    } else {      content.add(new javax.xml.crypto.dom.DOMStructure((childElem)));    }  }  keyInfoTypes=Collections.unmodifiableList(content);}  }
class C{  private void restoreDoubleBuffering(Component c,boolean wasBuffered){  if (c instanceof JComponent)   ((JComponent)c).setDoubleBuffered(wasBuffered);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deleteObject(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  String key=genericRequest.getKey();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setKey(key).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,key);}  }
class C{  private void deleteDistributedDevice(String deviceName) throws VPlexApiException {  s_logger.info("Deleting distributed device {}",deviceName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexDistributedDeviceInfo distDeviceInfo=discoveryMgr.findDistributedDevice(deviceName);  if (distDeviceInfo != null) {    s_logger.info("Tearing down distributed device {}",deviceName);    dismantleResource(distDeviceInfo.getPath(),true,true);  } else {    s_logger.info("Tearing down local devices for distributed device {}",deviceName);    StringTokenizer tokenizer=new StringTokenizer(deviceName.substring(VPlexApiConstants.DIST_DEVICE_PREFIX.length()),VPlexApiConstants.DIST_DEVICE_NAME_DELIM);    while (tokenizer.hasMoreTokens()) {      deleteLocalDevice(VPlexApiConstants.DEVICE_PREFIX + tokenizer.nextToken());    }  }}  }
class C{  private void constructServiceDetailsList(){  final List<AppConfigValues> appConfigValuesList=collectionsUtil.getAppConfigValues(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.PGI_BILLINGSERVICE_CONFIGKEY);  for (  final AppConfigValues appConfigVal : appConfigValuesList) {    final String value=appConfigVal.getValue();    final String attr=value.substring(0,value.indexOf('|'));    if (attr.equalsIgnoreCase(collDetails.getServiceCode())) {      final String attrVal=value.substring(value.indexOf('|') + 1);      final List<String> serviceCodes=new ArrayList<String>(0);      for (      final String code : attrVal.split(","))       serviceCodes.add(code);      serviceDetailsList=getPersistenceService().findAllByNamedQuery(CollectionConstants.QUERY_ACTIVE_SERVICES_BY_CODES,CollectionConstants.SERVICE_TYPE_PAYMENT,serviceCodes);    }  }  if (serviceDetailsList.size() == 0)   serviceDetailsList=getPersistenceService().findAllByNamedQuery(CollectionConstants.QUERY_ACTIVE_SERVICES_BY_TYPE,CollectionConstants.SERVICE_TYPE_PAYMENT);}  }
class C{  public void alert(String message){}  }
class C{  public synchronized void addSeries(int index,XYSeries series){  mSeries.add(index,series);}  }
class C{  public DatatypeFactoryImpl(){  super();}  }
class C{  public CoalSource(){  this("coal");}  }
class C{  public PcMaxRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.classInfoIndex(cp.getUtf8Info(valueIndex));}  }
class C{  public ProjectionMenu(){  super();  setText(i18n.get(this,"projectionMenu",defaultText));}  }
class C{  public ImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){  super(server,spaceName,mmtkSpace,blockSize,mainSpace);  if (DEBUG) {    Log.write("ImmortalSpaceDriver for ");    Log.write(spaceName);    Log.write(", blocksize=");    Log.write(blockSize);    Log.write(", start=");    Log.write(mmtkSpace.getStart());    Log.write(", extent=");    Log.write(mmtkSpace.getExtent());    Log.write(", maxTileNum=");    Log.writeln(maxTileNum);  }  registeredDrivers=new AbstractDriver[0];  closure=new ImmortalSpaceDriver.Closure();}  }
class C{  private static List<String> parseTableTags(List<String> blocks){  List<String> newBlocks=new ArrayList<>();  for (  String block : blocks) {    if (block.contains(TABLE_START_TAG)) {      String[] startSeperated=block.split(TABLE_START_TAG);      newBlocks.add(startSeperated[0].trim());      for (int i=1; i < startSeperated.length; i++) {        String[] split=startSeperated[i].split(TABLE_END_TAG);        newBlocks.add("<table>" + split[0] + "</table>");        if (split.length > 1) {          newBlocks.add(split[1]);        }      }    } else {      newBlocks.add(block);    }  }  return newBlocks;}  }
class C{  public void sendEmote(String emote,String formattedEmote,String format){  if (null != mVectorMessageListFragment) {    mVectorMessageListFragment.sendEmote(emote,formattedEmote,format);  }}  }
class C{  @BeforeSuite public void initLogging() throws IOException {  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  JoranConfigurator configurator=new JoranConfigurator();  configurator.setContext(context);  context.reset();  Path logPath=ResourcesPathResolver.getResourceFile(CMR.DEFAULT_LOG_FILE_NAME).toPath().toAbsolutePath();  try (InputStream is=Files.newInputStream(logPath,StandardOpenOption.READ)){    configurator.doConfigure(is);  } catch (  JoranException je) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  public boolean isMean(){  return isMean;}  }
class C{  public static void main(String[] argv){  runEvaluator(new SymmetricalUncertAttributeEval(),argv);}  }
class C{  public Node item(int i){  if (getLength() == 0 || i >= m_avts.size())   return null; else   return new Attribute(((AVT)m_avts.get(i)),ElemLiteralResult.this);}  }
class C{  public synchronized TemporalOMGraphicList createData(){  if (importer != null) {    return importer.createData(this);  } else {    return null;  }}  }
class C{  public View inflateAndBind(LayoutInflater inflater,ViewGroup container,int layout){  View view=inflater.inflate(layout,container,false);  ButterKnife.bind(this,view);  LogUtil.logD(TAG,">>> view inflated");  return view;}  }
class C{  public AnalystClusterRequest(){}  }
class C{  public static MaildirMessageName createUniqueName(MaildirFolder parentFolder,long size){  String timestamp=String.valueOf(System.currentTimeMillis());  timestamp=timestamp.substring(0,timestamp.length() - 3);  StringBuilder uniquePart=new StringBuilder();  uniquePart.append(Integer.toHexString(random.nextInt()));  uniquePart.append(timestamp.substring(timestamp.length() - 3));  uniquePart.append(processName);  uniquePart.append(getNextDeliveryNumber());  String sizeString=",S=" + String.valueOf(size);  String fullName=timestamp + "." + uniquePart.toString()+ "."+ currentHostname+ sizeString;  MaildirMessageName uniqueName=new MaildirMessageName(parentFolder,fullName);  uniqueName.timestamp=timestamp;  uniqueName.uniqueString=uniquePart.toString();  uniqueName.hostname=currentHostname;  uniqueName.sizeString=sizeString;  uniqueName.isSplit=true;  uniqueName.size=size;  return uniqueName;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public EventNode peek() throws Exception {  if (peek == null) {    peek=next();  }  return peek;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  private void onPairResult(String deviceMac,boolean success,final Queue<String> queue){  PairResultDialogListener buttonListener=new PairResultDialogListener(queue);  int resultRes=success ? R.string.esp_espbutton_configure_result_suc : R.string.esp_espbutton_configure_result_failed;  mPairResultDialog.setTitle(getString(R.string.esp_espbutton_configure_result,deviceMac,getString(resultRes)));  mPairResultDialog.setMessage(getString(R.string.esp_espbutton_configure_continue));  mPairResultDialog.setButton(DialogInterface.BUTTON_POSITIVE,getString(android.R.string.ok),buttonListener);  mPairResultDialog.setButton(DialogInterface.BUTTON_NEGATIVE,getString(R.string.esp_espbutton_configure_exit),buttonListener);  mPairResultDialog.show();}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public HessianProtocolException(String message,Throwable rootCause){  super(message);  this.rootCause=rootCause;}  }
class C{  public boolean enqueue(){  return this.queue.enqueue(this);}  }
class C{  protected void _serializeValue(JsonGenerator jgen,Object value) throws IOException, JsonProcessingException {  JsonSerializer<Object> ser;  boolean wrap;  if (value == null) {    ser=getNullValueSerializer();    wrap=false;  } else {    Class<?> cls=value.getClass();    ser=findTypedValueSerializer(cls,true,null);    wrap=_config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);    if (wrap) {      jgen.writeStartObject();      jgen.writeFieldName(_rootNames.findRootName(value.getClass(),_config));    }  }  try {    ser.serialize(value,jgen,this);    if (wrap) {      jgen.writeEndObject();    }  } catch (  IOException ioe) {    throw ioe;  }catch (  Exception e) {    String msg=e.getMessage();    if (msg == null) {      msg="[no message for " + e.getClass().getName() + "]";    }    throw new JsonMappingException(msg,e);  }}  }
class C{  private void initializeLiveAttributes(){  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.425 -0500",hash_original_method="8F0D800F5C28B5CCC219C4767FE49E89",hash_generated_method="6ECD2A3AC7C93E2D73067B2282916525") public void putNull(String key){  mValues.put(key,null);}  }
class C{  public void offsetTo(float newLeft,float newTop){  right+=newLeft - left;  bottom+=newTop - top;  left=newLeft;  top=newTop;}  }
class C{  boolean isTransient(){  Object value=getValue(TRANSIENT);  return (value instanceof Boolean) ? (Boolean)value : false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.949 -0400",hash_original_method="C01D66AAAB14EA4E4DF6A9979EF6E5B0",hash_generated_method="50350992DEB69163C1BBFA74E423D508") public AutoCloseInputStream(InputStream in){  super(in);}  }
class C{  private void generateFactory(){  MethodVisitor m=cw.visitMethod(ACC_PRIVATE | ACC_STATIC,NAME_FACTORY,invokedType.toMethodDescriptorString(),null,null);  m.visitCode();  m.visitTypeInsn(NEW,lambdaClassName);  m.visitInsn(Opcodes.DUP);  int parameterCount=invokedType.parameterCount();  for (int typeIndex=0, varIndex=0; typeIndex < parameterCount; typeIndex++) {    Class<?> argType=invokedType.parameterType(typeIndex);    m.visitVarInsn(getLoadOpcode(argType),varIndex);    varIndex+=getParameterSize(argType);  }  m.visitMethodInsn(INVOKESPECIAL,lambdaClassName,NAME_CTOR,constructorType.toMethodDescriptorString(),false);  m.visitInsn(ARETURN);  m.visitMaxs(-1,-1);  m.visitEnd();}  }
class C{  protected void updateState(T currentTask,T patchBody){  Utils.mergeWithState(getStateDescription(),currentTask,patchBody);}  }
class C{  public static void displaySupportedLanguages(PrintStream out,Optional<String> tgtLang){  Translate translate=createTranslateService();  LanguageListOption target=LanguageListOption.targetLanguage(tgtLang.orElse("en"));  List<Language> languages=translate.listSupportedLanguages(target);  for (  Language language : languages) {    out.printf("Name: %s, Code: %s\n",language.name(),language.code());  }}  }
class C{  public void deleteAllAvatars(InstanceConfig config){  config.addCredentials(this);  POST(this.url + "/delete-all-avatars",config.toXML());}  }
class C{  public static int chars2utf(char[] src,int sindex,byte[] dst,int dindex,int len){  int j=dindex;  int limit=sindex + len;  for (int i=sindex; i < limit; i++) {    char ch=src[i];    if (1 <= ch && ch <= 0x7F) {      dst[j++]=(byte)ch;    } else     if (ch <= 0x7FF) {      dst[j++]=(byte)(0xC0 | (ch >> 6));      dst[j++]=(byte)(0x80 | (ch & 0x3F));    } else {      dst[j++]=(byte)(0xE0 | (ch >> 12));      dst[j++]=(byte)(0x80 | ((ch >> 6) & 0x3F));      dst[j++]=(byte)(0x80 | (ch & 0x3F));    }  }  return j;}  }
class C{  protected void correlatedPointAddedCallback(int correlatedTimeStep){}  }
class C{  protected void sequence_TypeRefAnnotationArgument(ISerializationContext context,TypeRefAnnotationArgument semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefTypeRefParserRuleCall_0(),semanticObject.getTypeRef());  feeder.finish();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int hashCode(){  return name.hashCode() ^ owner.hashCode();}  }
class C{  public static File createTempResultFile() throws IOException {  File tempResultFile=File.createTempFile(tempFilePrefix,".res");  tempResultFile.deleteOnExit();  return tempResultFile;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{0,1,4,5,6,7},{0,1,2,5,6,7},{0,1,2,3,6,7},{0,1,2,3,4,7},{0,1,2,3,4,5},{1,2,3,4,5,6},{2,3,4,5,6,7},{0,3,4,5,6,7}};  double[] neighbours=new double[8];  boolean patternMatch=false;  int numIterations=10;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numIterations=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    for (int k=0; k < numIterations; k++) {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z == 1 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != 0) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      if (counter == 0) {        break;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isVariable(String expression){  return expression.startsWith(PREFIX);}  }
class C{  protected void startExecutorPool(){  if (m_executorPool != null) {    m_executorPool.shutdownNow();  }  m_executorPool=Executors.newFixedThreadPool(m_executionSlots);}  }
class C{  @Override public MemBufferHolder<SysMemAllocator> resizeBuffer(MemBufferHolder<SysMemAllocator> mholder,long size){  MemBufferHolder<SysMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    int bufpos=mholder.get().position();    int buflimit=mholder.get().limit();    if (currentMemory.get() + size > maxStoreCapacity) {      if (m_activegc) {        forceGC();      }    }    if (currentMemory.get() + size <= maxStoreCapacity) {      ByteBuffer buf=Utils.resizeByteBuffer(mholder.get(),size);      if (null != buf) {        mholder.clear();        mholder.destroy();        buf.position(bufpos <= size ? bufpos : 0);        buf.limit(buflimit <= size ? buflimit : (int)size);        ret=new MemBufferHolder<SysMemAllocator>(this,buf);        if (ac) {          m_bufcollector.register(ret);        }      }    }  }  return ret;}  }
class C{  public String toString(){  int size=off - start;  if (cache == null) {    cache=new String(data,start,size);  }  return cache;}  }
class C{  public boolean unlockAchievement(String achievementId){  if (mGoogleApiClientWrapper.isSignedIn()) {    Games.Achievements.unlock(mGoogleApiClientWrapper.getGoogleApiClient(),achievementId);    return true;  } else {    return false;  }}  }
class C{  public static ImageSource bitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap,false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void action_treeDelete(ListItem item){  log.info("Item=" + item);  if (item != null) {    centerTree.nodeChanged(false,item.id,item.name,item.description,item.isSummary,item.imageIndicator);    deleteNode(item);  }}  }
class C{  protected void doSleeping(IJobChangeEvent event){}  }
class C{  public void excl(int x){  Assert.check(currentState != BitsState.UNKNOWN);  Assert.check(x >= 0);  sizeTo((x >>> wordshift) + 1);  bits[x >>> wordshift]=bits[x >>> wordshift] & ~(1 << (x & wordmask));  currentState=BitsState.NORMAL;}  }
class C{  public boolean isCommitted(){  return stateHandler_.isCommitted();}  }
class C{  public boolean hasDeleted(){  return getDeleted() != null;}  }
class C{  protected Class<?> findClass(String name) throws ClassNotFoundException {  return findClass(name,currentClr);}  }
class C{  public void changeMessageVisibility(String queueUrl,String receiptHandle,Integer visibilityTimeout) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.changeMessageVisibility(queueUrl,receiptHandle,visibilityTimeout);}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public static boolean isSupportedArray(Object elem){  if (elem == null || !elem.getClass().isArray()) {    return false;  }  Class<?> ct=elem.getClass().getComponentType();  if (ct.isArray()) {    return false;  }  if (Array.getLength(elem) > 0 && (CompositeData.class.isAssignableFrom(ct) || TabularData.class.isAssignableFrom(ct))) {    return false;  }  return true;}  }
class C{  public boolean isRowChecked(int row){  int keyColumn=this.getKeyColumnIndex();  if (keyColumn < 0)   return false;  Object data=getValueAt(row,convertColumnIndexToView(keyColumn));  if (data instanceof IDColumn)   return ((IDColumn)data).isSelected(); else   if (data instanceof Boolean)   return (Boolean)data;  return false;}  }
class C{  public void addRaptorWindowItem(final RaptorWindowItem item){  addRaptorWindowItem(item,true,true);}  }
class C{  public static QueueInfo resetSendCount(QueueInfo initial){  QueueInfo result=getCopy(initial);  result.firstRequestSendCount=0;  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MoveTargetEdit(int offset,MoveSourceEdit source){  this(offset);  setSourceEdit(source);}  }
class C{  @RequestMapping(value=STORAGES_URI_PREFIX + "/{storageName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_STORAGES_DELETE) public Storage deleteStorage(@PathVariable("storageName") String storageName){  StorageAlternateKeyDto alternateKey=StorageAlternateKeyDto.builder().storageName(storageName).build();  return storageService.deleteStorage(alternateKey);}  }
class C{  @Override void handleJavaFocusEvent(final FocusEvent e){  if (e.getID() == FocusEvent.FOCUS_LOST) {    setCaretPosition(0);  }  super.handleJavaFocusEvent(e);}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.723 -0400",hash_original_method="114418523011366118D69E47C15578FD",hash_generated_method="DAF770A53152C7940EC0816CFE314FCA") public final boolean isDebugEnabled(){  return false;}  }
class C{  private boolean smartCardAuthnEnabled() throws Exception {  Collection<String> allTenantNames=this.getAllTenants();  assert (allTenantNames != null && allTenantNames.size() > 0);  boolean smartCardAuthnEnabled=false;  for (  String tenantName : allTenantNames) {    try {      AuthnPolicy policy=getTenantInfo(tenantName).getAuthnPolicy();      if (policy.IsTLSClientCertAuthnEnabled()) {        smartCardAuthnEnabled=true;        break;      }    } catch (    Exception ex) {      logger.error(String.format("Failed to retrieve Authentication policy for tenant %s. ",tenantName));      throw ex;    }  }  return smartCardAuthnEnabled;}  }
class C{  public BuildingBlock(Vector<String> data){  rawData=data;}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  int action=dsde.getDropAction();  Debug.message("dndlistener","dragEnter (source)");  Debug.message("dndlistener","action=" + action);  if (action == default_action) {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveDrop));  } else {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveNoDrop));  }}  }
class C{  public boolean hleKernelRegisterCallback(int callbackType,int cbid){  SceKernelCallbackInfo callback=getCallbackInfo(cbid);  if (callback == null) {    log.warn("hleKernelRegisterCallback(type=" + callbackType + ") unknown uid "+ Integer.toHexString(cbid));    return false;  }  SceKernelThreadInfo thread=getThreadById(callback.getThreadId());  if (thread == null) {    log.warn("hleKernelRegisterCallback(type=" + callbackType + ") unknown thread uid "+ Integer.toHexString(callback.getThreadId()));    return false;  }  RegisteredCallbacks registeredCallbacks=thread.getRegisteredCallbacks(callbackType);  if (!registeredCallbacks.addCallback(callback)) {    return false;  }  return true;}  }
class C{  private Iterable<FragmentConstructor> createConstructors(){  return Collections.unmodifiableList(Arrays.asList(new BiomeDataConstructor(Resolution.QUARTER),new EndIslandsConstructor(),new ImageConstructor(Resolution.QUARTER,LayerIds.BACKGROUND),new ImageConstructor(Resolution.CHUNK,LayerIds.SLIME)));}  }
class C{  public boolean isKnobVisible(){  return null == knobVisible ? _knobVisible : knobVisible.get();}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public static void main(String[] args) throws AuthenticationException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || username == null || password == null) {    usage();    System.exit(1);  }  RecordDemo demo=new RecordDemo(new SpreadsheetService("Record Demo"),System.out);  demo.run(username,password);}  }
class C{  public FinishableWrapperOutputStream(OutputStream out){  this.out=out;}  }
class C{  public Builder removeExtensions(){  this.extensions.clear();  return this;}  }
class C{  private static StackPane info(double value){  StackPane stack=new StackPane();  Label label=new Label(value + "");  label.getStyleClass().add("chart-line-conteudo");  stack.setOnMouseEntered(null);  stack.setOnMouseExited(null);  return stack;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    boolean waitForClose=getBool(stack);    String widgName=getString(stack);    return stack.getUIMgrSafe().removePopup(widgName,waitForClose) ? Boolean.TRUE : Boolean.FALSE;  } else {    stack.getUIMgrSafe().removePopup();    return null;  }}  }
class C{  public void testFactoryDynamic() throws Exception {  Similarity sim=getSimilarity("text_sim2");  assertEquals(MockConfigurableSimilarity.class,sim.getClass());  assertEquals("is there an echo?",((MockConfigurableSimilarity)sim).getPassthrough());}  }
class C{  void remove(Iterable<File> delFiles){  assert delFiles != null;synchronized (mux) {    for (    File file : delFiles)     files.remove(file);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static strictfp double plusPI_strict(final double angRad){  if (angRad > -Math.PI / 2) {    return angRad + PI_LO + PI_HI;  } else {    return angRad + PI_HI + PI_LO;  }}  }
class C{  public List<IComment> appendComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_node.appendComment(comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public void add(SequenceNameLocus region){  getOrAdd(region.getSequenceName()).add(region);}  }
class C{  public FailureConfig(int numMaxRetries,long numMaxTotalFailAllowed,SidelineStrategy sidelineStrategy){  this.numMaxRetries=numMaxRetries;  this.numMaxTotalFailAllowed=numMaxTotalFailAllowed;  this.sidelineStrategy=sidelineStrategy;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.935 -0500",hash_original_method="5605726C555918AA2A627C8B848E7FA1",hash_generated_method="E02E4656A8BF8A5819A18FD75D369E76") public ViewPropertyAnimator translationYBy(float value){  animatePropertyBy(TRANSLATION_Y,value);  return this;}  }
class C{  public boolean isRuntimeFinal(){  return hasRuntimeFinalAnnotation();}  }
class C{  public static String toString(final Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  IOUtils.copy(input,sw);  return sw.toString();}  }
class C{  public DiscreteDensityFunction(Map<double[],Double> points){  this.points=new HashMap<double[],Double>();  this.points.putAll(points);  sampler=new Random();  this.minDistance=MathUtils.getMinEuclidianDistance(points.keySet());  this.volume=MathUtils.getVolume(minDistance / 2,getDimensions());}  }
class C{  private static int hash(Object x,int length){  int h=System.identityHashCode(x);  return ((h << 1) - (h << 8)) & (length - 1);}  }
class C{  protected void groupBy(DimensionIndex index,ISelectPiece piece) throws ScopeException {switch (this.strategy) {case GROUPINGSETS:{      if (index.getParent() == null) {        GroupingSet set=select.getGrouping().addGroupingSet();        set.add(piece.getSelect());        groupingSet.put(index,set);      } else {        GroupingSet set=groupingSet.get(index.getRoot());        if (set == null)         throw new ScopeException("Invalid hierarchy");        set.add(piece.getSelect());      }    }  break;case GROUPBY:case MIXED:select.getGrouping().addGroupBy(piece.getSelect());break;}}  }
class C{  public int syncGetWifiState(){  return mWifiState.get();}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  public static IJavaElement createFromDirectory(File folder,IJavaProject project){  if (folder == null) {    return null;  }  IJavaElement element;  element=determineIfOnClasspath(folder,(JavaProject)project);  return element;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TEMPLATE_LITERAL__SEGMENTS:    return getSegments();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public LuaValue resume(U audio,Varargs varargs){  return audio.resume();}  }
class C{  public void reinitializeContacts(final EvolutionState state){  initializeContacts(state);}  }
class C{  public void printStackTrace(){  m_stackTrace=ExceptionUtil.fillInExceptionMessage(this,m_stackTrace,getMessage());  System.out.print(m_stackTrace);}  }
class C{  public SimpleCapabilityProvider(Capability<HANDLER> capability,@Nullable EnumFacing facing){  this(capability,facing,capability.getDefaultInstance());}  }
class C{  public static double I(int C[][],int j,int k,int Ncount){  double N=(double)Ncount;  double N_j=Math.max(C[j][j],0.0001);  double N_k=Math.max(C[k][k],0.0001);  double p_5=(N - N_j);  double p_6=(N - N_k);  double p_7=(N - (N_j + N_k));  return 1.0 / N * (-p_5 * Math.log(p_5) - p_6 * Math.log(p_6) + p_7 * Math.log(p_7) + N * Math.log(N));}  }
class C{  @Override public boolean addAll(Collection<? extends E> c){  if (null == c) {    throw new NullPointerException();  }  if (this == c) {    throw new IllegalArgumentException();  }  return super.addAll(c);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_OPTIONS___TRACE_OPTION_1:    return ((InternalEList<?>)getTraceOption_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_OPTIONS___ANONYMOUS_TRACE_OPTIONS_11:  return ((InternalEList<?>)getAnonymous_traceOptions_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testUnlockCode() throws Exception {  Puzzle puz=IO.loadNative(new DataInputStream(IOTest.class.getResourceAsStream("/2010-7-19-NewYorkTimes.puz")));  for (  Box b : puz.getBoxesList()) {    if (b != null)     System.out.print(b.getSolution() + " ");  }  System.out.println();  try {    assertTrue(IO.tryUnscramble(puz,2465,puz.initializeUnscrambleData()));    for (    Box b : puz.getBoxesList()) {      if (b != null)       System.out.print(b.getSolution() + " ");    }    System.out.println();    ObjectOutputStream oos=new ObjectOutputStream(new ByteArrayOutputStream());    oos.writeObject(puz);    oos.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public HighlightView(View ctx){  mContext=ctx;}  }
class C{  @Override public long cycles(){  return Time.cycles();}  }
class C{  public static String rename(String desc,Map map){  if (map == null)   return desc;  StringBuffer newdesc=new StringBuffer();  int head=0;  int i=0;  for (; ; ) {    int j=desc.indexOf('L',i);    if (j < 0)     break;    int k=desc.indexOf(';',j);    if (k < 0)     break;    i=k + 1;    String name=desc.substring(j + 1,k);    String name2=(String)map.get(name);    if (name2 != null) {      newdesc.append(desc.substring(head,j));      newdesc.append('L');      newdesc.append(name2);      newdesc.append(';');      head=i;    }  }  if (head == 0)   return desc; else {    int len=desc.length();    if (head < len)     newdesc.append(desc.substring(head,len));    return newdesc.toString();  }}  }
class C{  public boolean hasNewHeader(int position,boolean isReverseLayout){  if (indexOutOfBounds(position)) {    return false;  }  long headerId=mAdapter.getHeaderId(position);  if (headerId < 0) {    return false;  }  long nextItemHeaderId=-1;  int nextItemPosition=position + (isReverseLayout ? 1 : -1);  if (!indexOutOfBounds(nextItemPosition)) {    nextItemHeaderId=mAdapter.getHeaderId(nextItemPosition);  }  int firstItemPosition=isReverseLayout ? mAdapter.getItemCount() - 1 : 0;  return position == firstItemPosition || headerId != nextItemHeaderId;}  }
class C{  void processCopyDoc(AsClass currentClass,HashMap<String,AsClass> classTable){  if (currentClass.getConstructors() != null) {    NodeList apiConstructorList=currentClass.getConstructors().getElementsByTagName("apiConstructor");    if (apiConstructorList != null && apiConstructorList.getLength() != 0) {      for (int ix=0; ix < apiConstructorList.getLength(); ix++) {        Element apiConstructor=(Element)apiConstructorList.item(ix);        Element shortdesc=getElementByTagName(apiConstructor,"shortdesc");        if (shortdesc != null) {          if (!shortdesc.getAttribute("conref").equals("")) {            processCopyNode(apiConstructor,shortdesc.getAttribute("conref"),currentClass,classTable);          }        }      }    }  }  if (currentClass.getMethods() != null) {    NodeList apiOperationList=currentClass.getMethods().getElementsByTagName("apiOperation");    if (apiOperationList != null && apiOperationList.getLength() != 0) {      for (int ix=0; ix < apiOperationList.getLength(); ix++) {        Element apiOperation=(Element)apiOperationList.item(ix);        Element shortdesc=getElementByTagName(apiOperation,"shortdesc");        if (shortdesc != null) {          if (!shortdesc.getAttribute("conref").equals("")) {            processCopyNode(apiOperation,shortdesc.getAttribute("conref"),currentClass,classTable);          }        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") static <T>Stream<T> optimize(Stream<T> stream){  if (SOURCE_SPLITERATOR == null || SPLITERATOR_ITERATOR == null)   return stream;  Iterator<T> it=null;  try {    Spliterator<T> spliterator=(Spliterator<T>)SOURCE_SPLITERATOR.get(stream);    if (spliterator != null && !spliterator.hasCharacteristics(SIZED) && spliterator.getClass().getName().equals("java.util.Spliterators$IteratorSpliterator")) {      it=(Iterator<T>)SPLITERATOR_ITERATOR.get(spliterator);    }  } catch (  IllegalArgumentException|IllegalAccessException e) {  }  if (it == null)   return stream;  stream.spliterator();  return StreamSupport.stream(new USOfRef<>(it),stream.isParallel()).onClose(null);}  }
class C{  public boolean contains(BlockPosition position){  return graph.contains(position);}  }
class C{  public String t1TipText(){  return "The T1 distance to use. Values < 0 are taken as a positive " + "multiplier for the T2 distance";}  }
class C{  public static void writeJsonToPath(GenericKeyczar input,String path){  try {    FileOutputStream output=new FileOutputStream(path);    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output,"UTF-8"));    JsonWriter.write(input,writer);    writer.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void testIllegalNaNValues(){  Document doc=new Document();  IllegalArgumentException expected;  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("invalid min value"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("invalid max value"));}  }
class C{  private void error(){  throw new RuntimeException("Test listener error.");}  }
class C{  public boolean isEndOfBasicBlock(){  return isBranch || isReturn || isThrow|| isExit;}  }
class C{  public String wordSegment(String text){  String ret=text;  if (vnSegmenter == null)   return ret;  ret=vnSegmenter.segmenting(ret);  return ret;}  }
class C{  public static double[][] sub(double[][] mat1,double[][] mat2){  int m=mat1.length;  int n=mat1[0].length;  double[][] matres=new double[m][];  for (int i=0; i < m; ++i) {    matres[i]=new double[n];    for (int j=0; j < n; ++j) {      matres[i][j]=mat1[i][j] - mat2[i][j];    }  }  return (matres);}  }
class C{  public void rescanCurrentDirectory(){  getUI().rescanCurrentDirectory(this);}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  private boolean isBlankOrNull(String value){  return ((value == null) || (value.trim().length() == 0));}  }
class C{  private boolean isAvailable(HttpResult responseResult){  boolean result;  if ((responseResult.responseCode >= 200 && responseResult.responseCode < 400) || responseResult.responseCode == 401 || responseResult.responseCode == 403) {    result=true;  } else {    result=false;  }  return result;}  }
class C{  public NoClassDefFoundError(){  super();}  }
class C{  public LineSet addLineSet(LineSetState state,boolean update){  try {    LineSet lineSet=new LineSet(state);    Spatial spatial=lineSet;    attachChild(spatial);    if (update) {      spatial.updateGeometricState(0,true);    }    return (lineSet);  } catch (  Exception e) {    Console.getInstance().println(e.getMessage());    JOptionPane.showMessageDialog(Dert.getMainWindow(),e.getMessage());    return (null);  }}  }
class C{  public void deleteMin(){  if (isEmpty())   throw new NoSuchElementException("Symbol table underflow error");  delete(min());}  }
class C{  public static boolean useMSInterop(){  String propValue=AccessController.doPrivileged(new GetPropertyAction("sun.security.spnego.msinterop","true"));  return (!propValue.equalsIgnoreCase("false"));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isLinkUnderline(){  return isLinkUnderline;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public long size(){  return buffer.size();}  }
class C{  public static void d(String tag,String s,Throwable e){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);}  }
class C{  protected ShaderVar addConst(String name,ShaderVar var){  ShaderVar v=getInstanceForDataType(name,var.getDataType());  v.setValue(var.getValue());  v.isGlobal(true);  mConstants.put(v.getName(),v);  return v;}  }
class C{  private void processStartedState(final State currentState,DeploymentService.State deploymentService) throws Throwable {switch (currentState.taskState.subStage) {case CREATE_MANAGEMENT_PLANE_LAYOUT:    processCreateManagementPlaneLayout(currentState,deploymentService);  break;case BUILD_RUNTIME_CONFIGURATION:processBuildRuntimeConfiguration(currentState);break;case PROVISION_MANAGEMENT_HOSTS:processProvisionManagementHosts(currentState,deploymentService);break;case CREATE_MANAGEMENT_PLANE:processCreateManagementPlane(currentState,deploymentService);break;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.559 -0500",hash_original_method="A00631EA578020D8AF102DDB2FCEFAC8",hash_generated_method="45A1DBE9A77A2E9820DD58C0D0247F0A") public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  private String[] readArgumentList() throws IOException {  int argc;  try {    String s=mSocketReader.readLine();    if (s == null) {      return null;    }    argc=Integer.parseInt(s);  } catch (  NumberFormatException ex) {    Log.e(TAG,"invalid Zygote wire format: non-int at argc");    throw new IOException("invalid wire format");  }  if (argc > MAX_ZYGOTE_ARGC) {    throw new IOException("max arg count exceeded");  }  String[] result=new String[argc];  for (int i=0; i < argc; i++) {    result[i]=mSocketReader.readLine();    if (result[i] == null) {      throw new IOException("truncated request");    }  }  return result;}  }
class C{  public List fetchBridgeServers(){  List result=null;  if (result == null) {synchronized (this.cacheLock) {      if (result == null) {        result=fetchProfiles(BRIDGE_SERVER_FILTER);        this.cachedBridgeServerProfiles=result;      }    }  }  return result;}  }
class C{  public HtmlEditorConfiguration(Set<AutoEditStrategyFactory> autoEditStrategyFactories,DefaultCodeAssistProcessor defaultProcessor){  this.autoEditStrategyFactories=autoEditStrategyFactories;  this.defaultProcessor=defaultProcessor;}  }
class C{  public RemoteCandidate(TransportAddress transportAddress,Component parentComponent,CandidateType type,String foundation,long priority,RemoteCandidate relatedCandidate){  this(transportAddress,parentComponent,type,foundation,priority,relatedCandidate,null);}  }
class C{  protected boolean mustDrawOutline(){  return super.mustDrawOutline() || this.getActiveSideAttributes().isDrawOutline();}  }
class C{  public boolean isUsingModules(){  return moduleKind != null && moduleKind != ModuleKind.none;}  }
class C{  public long nextLongInRange(long lowerBound,long upperBound){  if (upperBound <= lowerBound) {    throw new IllegalArgumentException("RandomGenerator.nextLongInRange : the upper bound of the " + "random number range should be greater than the lower bound.");  }  return ((long)(nextDouble() * (upperBound - lowerBound + 1)) + lowerBound);}  }
class C{  public PublisherMapFuseable(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  if (!(source instanceof Fuseable)) {    throw new IllegalArgumentException("The source must implement the Fuseable interface for this operator to work");  }  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  @Override public Script freshOutputScript(KeyPurpose purpose){  DeterministicKey followedKey=getKey(purpose);  ImmutableList.Builder<ECKey> keys=ImmutableList.<ECKey>builder().add(followedKey);  for (  DeterministicKeyChain keyChain : followingKeyChains) {    DeterministicKey followingKey=keyChain.getKey(purpose);    checkState(followedKey.getChildNumber().equals(followingKey.getChildNumber()),"Following keychains should be in sync");    keys.add(followingKey);  }  List<ECKey> marriedKeys=keys.build();  Script redeemScript=ScriptBuilder.createRedeemScript(sigsRequiredToSpend,marriedKeys);  return ScriptBuilder.createP2SHOutputScript(redeemScript);}  }
class C{  protected void handleReloadAction(SolrQueryRequest req,SolrQueryResponse rsp){  SolrParams params=req.getParams();  String cname=params.get(CoreAdminParams.CORE);  if (!coreContainer.getCoreNames().contains(cname)) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Core with core name [" + cname + "] does not exist.");  }  try {    coreContainer.reload(cname);  } catch (  Exception ex) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error handling 'reload' action",ex);  }}  }
class C{  public ToothPickTestModule(Object test){  bindAllMocks(test);}  }
class C{  @Override public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=userX(e.getX());    mouseY=userY(e.getY());  }  for (  DrawListener listener : listeners)   listener.mouseDragged(userX(e.getX()),userY(e.getY()));}  }
class C{  public static byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  public FluxMerge<T> mergeAdditionalSource(Publisher<? extends T> source,IntFunction<Supplier<? extends Queue<T>>> newQueueSupplier){  int n=sources.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(sources,0,newArray,0,n);  newArray[n]=source;  Supplier<? extends Queue<T>> newMainQueue;  int mc=maxConcurrency;  if (mc != Integer.MAX_VALUE) {    mc++;    newMainQueue=newQueueSupplier.apply(mc);  } else {    newMainQueue=mainQueueSupplier;  }  return new FluxMerge<>(newArray,delayError,mc,newMainQueue,prefetch,innerQueueSupplier);}  }
class C{  public void deleteNFSShare(String fsName,String qtreeName,ExportRule oldRule,String mountPath){  FlexFileShare share=new FlexFileShare(server.getNaServer(),mountPath);  share.deleteNFSShare(fsName,qtreeName,oldRule,mountPath);}  }
class C{  public ClusterJoinResponseMessage(ClusterJoinResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.newNodeId=other.newNodeId;  if (other.isSetNodeStore()) {    List<KeyedValues> __this__nodeStore=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.nodeStore) {      __this__nodeStore.add(new KeyedValues(other_element));    }    this.nodeStore=__this__nodeStore;  }}  }
class C{  public Selection fixTextSelection(){  if (inner == null || inner.size() != 1 || textSelection == null)   return this;  final WrappedCompilationUnit u=inner.get(0);  final IResource r=u.descriptor.getResource();  if (!(r instanceof IFile))   return this;  final int o=textSelection.getOffset();  final int l=o + textSelection.getLength();  int no=o, nl=l;  try {    final IMarker[] ms=((IFile)r).findMarkers(Builder.MARKER_TYPE,true,IResource.DEPTH_INFINITE);    boolean changed=false;    int i=0;    for (; i < ms.length; ++i) {      final int cs=((Integer)ms[i].getAttribute(IMarker.CHAR_START)).intValue();      if (cs <= o && ((Integer)ms[i].getAttribute(IMarker.CHAR_END)).intValue() >= o) {        no=cs;        changed=true;        break;      }    }    for (; i < ms.length; ++i) {      final int ce=((Integer)ms[i].getAttribute(IMarker.CHAR_END)).intValue();      if (((Integer)ms[i].getAttribute(IMarker.CHAR_START)).intValue() <= l && ce >= l) {        nl=ce;        changed=true;        break;      }    }    if (changed)     textSelection=new TextSelection(no,nl - no);  } catch (  final CoreException x) {    monitor.log(x);    return this;  }  return this;}  }
class C{  public synchronized void fine(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINE,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public static long readCategory(Node categoryNode,long categoryId,long challengeId,List<Category> categoryList,List<Challenge> challengeList,List<Answer> answerList) throws UnexpectedElementException, ElementAmountException, InvalidAttributeException {  if (!categoryNode.getNodeName().equals("category")) {    throw new UnexpectedElementException(categoryNode.getNodeName());  }  NamedNodeMap attributes=categoryNode.getAttributes();  Node titleNode=attributes.getNamedItem("title");  Node descriptionNode=attributes.getNamedItem("description");  Node imageNode=attributes.getNamedItem("image");  String title=titleNode.getNodeValue();  String description=descriptionNode.getNodeValue();  String image=imageNode.getNodeValue();  categoryList.add(new Category(categoryId,title,description,image));  Node childCategory=categoryNode.getFirstChild();  int challengeCount=0;  while (childCategory != null) {    if (childCategory.getNodeType() == Node.ELEMENT_NODE) {      readChallenge(childCategory,categoryId,challengeId,challengeList,answerList);      challengeId++;      challengeCount++;    }    childCategory=childCategory.getNextSibling();  }  if (challengeCount == 0) {    throw new ElementAmountException("<challenge>",">0","0");  }  return challengeId;}  }
class C{  public GridAtomicLong(long initVal){  super(initVal);}  }
class C{  @Override @Pure public String toString(){  return name.toString();}  }
class C{  public SocketBar createSocket(){  return new SocketWrapperBar();}  }
class C{  public static Date parseISO(final String str){  QL.require(str.length() == 10 && str.charAt(4) == '-' && str.charAt(7) == '-',"invalid format");  final int year=Integer.parseInt(str.substring(0,4));  final int month=Integer.parseInt(str.substring(5,7));  final int day=Integer.parseInt(str.substring(8,10));  final Date date=new Date(day,Month.valueOf(month),year);  return date;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendArea=SerialUtilities.readShape(stream);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public SessionIndexNotFoundExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  private void drawOverflowIndicator(final Graphics g,int maxX){  int width=25;  int height=10;  int xOffset=10;  int stepSize=width / 5;  int dotSize=3;  int x=maxX - width - xOffset;  int y=button.getSize().height - height;  g.setColor(LIGHTER_GRAY);  g.fillRect(x,y,width,width);  g.setColor(Color.GRAY);  g.drawRoundRect(x,y,width,width,5,5);  g.setColor(Color.BLACK);  g.fillOval(x + stepSize,y + 4,dotSize,dotSize);  g.fillOval(x + stepSize * 2,y + 4,dotSize,dotSize);  g.fillOval(x + stepSize * 3,y + 4,dotSize,dotSize);  g.dispose();}  }
class C{  public void keyReleased(int keyCode){}  }
class C{  public SVGImageFigure(){  this(0,0,0,0);}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.098 -0500",hash_original_method="2D855197EA1046BD8EC8CA2E991844E1",hash_generated_method="D37FA2CB6FD8B56BC1A93315A28DB0DC") @DSVerified public Bundle onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putBoolean(DIALOG_SHOWING_TAG,mShowing);  if (mCreated) {    bundle.putBundle(DIALOG_HIERARCHY_TAG,mWindow.saveHierarchyState());  }  return bundle;}  }
class C{  public void writeMemory(final Address address,final byte[] data) throws DebugException {  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  Preconditions.checkNotNull(data,"Error: Data argument can not be null");  try {    m_debugger.writeMemory(new CAddress(address.toLong()),data);  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return m_str.lastIndexOf(str,fromIndex);}  }
class C{  public void distribute(boolean exchangeProfiles){  sendProfileUpdate(exchangeProfiles);  waitForProfileResponse();}  }
class C{  public String importUsers() throws SaaSApplicationException {  Set<UserRoleType> userRoles=new HashSet<>();  if (null != userRolesForNewUser) {    for (    UserRole role : userRolesForNewUser) {      if (role.isSelected()) {        userRoles.add(role.getUserRoleType());      }    }  }  if (users != null) {    List<VOUserDetails> list=new ArrayList<>();    for (    User user : users) {      if (user.isSelected()) {        user.getVOUserDetails().setUserRoles(userRoles);        list.add(user.getVOUserDetails());      }    }    try {      getIdentityService().importLdapUsers(list,getMarketplaceIdForUserImport());      baseBean.addMessage(null,FacesMessage.SEVERITY_INFO,BaseBean.INFO_USER_IMPORTED,new Object[]{String.valueOf(list.size())});      tableState.resetActivePages();      searchUsers();    } catch (    ValidationException e) {      if (ReasonEnum.EMAIL == e.getReason()) {        baseBean.addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_IMPORT_EMAIL,e.getMessageParams()[0]);      } else {        throw e;      }    }  }  return BaseBean.OUTCOME_SUCCESS;}  }
class C{  public JFreeChartEntity(Shape area,JFreeChart chart){  this(area,chart,null);}  }
class C{  public static void validateInputSizeMax(String field,String message,int size) throws CheckException {  if (field == null || field.trim().length() == 0 || field.length() > size) {    String messageTranslated=messageSource.getMessage(message,null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + field);  }}  }
class C{  public static String stripToHostName(String target){  if (target == null || target.isEmpty())   return null;  target=target.toLowerCase().trim();  int p=target.indexOf("://");  if (p > 0)   target=target.substring(p + 3);  p=target.indexOf('/');  if (p > 0)   target=target.substring(0,p);  p=target.lastIndexOf(':');  if (p < 0) {    if (target.charAt(0) == '[')     target=target.substring(1);    if (target.charAt(target.length() - 1) == ']')     target=target.substring(0,target.length() - 1);    p=target.lastIndexOf('%');    if (p > 0)     target=target.substring(0,p);    return target;  }  if (target.charAt(p - 1) == ']') {    target=target.substring(1,p - 1);    p=target.lastIndexOf('%');    if (p > 0)     target=target.substring(0,p);    return target;  }  target=target.substring(0,p);  p=target.lastIndexOf('%');  if (p > 0)   target=target.substring(0,p);  return target;}  }
class C{  public T caseN4MemberDeclaration(N4MemberDeclaration object){  return null;}  }
class C{  public boolean userDismissed(){  return NotificationData.getUserDismissed(row);}  }
class C{  public int[] recurse(OrangeEcho echo,int[] message,int level) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): BEGIN");  int[] response;  if (level > 0) {    response=echo.recurse(this,message,level);  } else {    for (int i=0; i < message.length; i++) {      message[i]=~message[i];    }    response=message;  }  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): END");  return response;}  }
class C{  public StudioGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);}  }
class C{  private void startSocketUploadTask(){  try {    final HttpFrame frame=new HttpFrame();    final HttpStates httpStates=frame.parseHttp(mSocket.getInputStream());    if (httpStates == HttpStates.HTTP_FRAME_OK) {      if (frame.getStatusCode() == SpeedTestConst.HTTP_OK && frame.getReasonPhrase().equalsIgnoreCase("ok")) {        mTimeEnd=System.currentTimeMillis();        closeSocket();        mReportInterval=false;        if (!mRepeatWrapper.isRepeatUpload()) {          closeExecutors();        }        final SpeedTestReport report=mSocketInterface.getLiveUploadReport();        for (int i=0; i < mListenerList.size(); i++) {          mListenerList.get(i).onUploadFinished(report);        }      } else {        mReportInterval=false;        for (int i=0; i < mListenerList.size(); i++) {          mListenerList.get(i).onUploadError(SpeedTestError.INVALID_HTTP_RESPONSE,"Error status code" + " " + frame.getStatusCode());        }        closeSocket();        if (!mRepeatWrapper.isRepeatUpload()) {          closeExecutors();        }      }      return;    }    closeSocket();    if (!mErrorDispatched && !mForceCloseSocket) {      for (int i=0; i < mListenerList.size(); i++) {        mListenerList.get(i).onUploadError(SpeedTestError.SOCKET_ERROR,"mSocket error");      }    }    closeExecutors();  } catch (  IOException|InterruptedException e) {    mReportInterval=false;    if (!mErrorDispatched) {      catchError(false,e.getMessage());    }  }  mErrorDispatched=false;}  }
class C{  public MCCTest(String name){  super(name);}  }
class C{  public DijkstraDistance(Graph<V,E> g,boolean cached){  this(g,Functions.constant(1),cached);}  }
class C{  public boolean validate(){  boolean status=true;  String text=getValue();  for (  IValidator validator : mValidators) {    if (!validator.isValid(text)) {      setError(validator.getErrorMessage());      status=false;      break;    } else {      setError(null);    }  }  return status;}  }
class C{  public Log4JManagerAccessor(ClassLoader cl) throws ClassNotFoundException {  Class clazz=cl.loadClass("org.apache.log4j.LogManager");  Method exists=MethodUtils.getAccessibleMethod(clazz,"exists",new Class[]{String.class});  if (exists == null) {    throw new RuntimeException("The LogManager is part of the slf4j bridge.");  }  setTarget(clazz);}  }
class C{  public DirectoryEditor(Composite parent,Integer style,Integer swtTextStyle){  super(parent,style,swtTextStyle);  icon=new Label(this,SWT.NONE);  Label labelName=new Label(this,SWT.NONE);  path=new Text(this,swtTextStyle);  Layout layout=new GridLayout(3,false);  this.setLayout(layout);  GridData iconGridData=new GridData(SWT.FILL,SWT.FILL,false,false);  iconGridData.minimumHeight=16;  iconGridData.minimumWidth=16;  icon.setLayoutData(iconGridData);  labelName.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));  path.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  icon.setImage(FileSystemActivator.IMAGE_DIRECTORY);  labelName.setText("Path");}  }
class C{  public boolean isWantClientAuth(){  return wantClientAuth;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean postIt(){  if (!isValidAction(ACTION_Post) || m_document == null)   return false;  String error=DocumentEngine.postImmediate(Env.getCtx(),m_document.getAD_Client_ID(),m_document.get_Table_ID(),m_document.get_ID(),true,m_document.get_TrxName());  return (error == null);}  }
class C{  public synchronized void updateCache(KeySelect keySelect,long rowCount){  if (slowQueries == null)   return;  boolean slow=false;  long tableCardinality=keySelect.getTable().getMaxCardinality();  double selectivity=0;  if (tableCardinality > 0) {    selectivity=((double)rowCount) / tableCardinality;  }  if (selectivity > this.slowQuerySelectivity || rowCount >= this.slowQueryRows)   slow=true;  String queryKey=keySelect.generateKey();  boolean cached=(slowQueries.get(queryKey) != null);  if (slow) {    if (cached)     this.totalCachedQueries++;    slowQueries.put(queryKey,System.currentTimeMillis());    if (logger.isDebugEnabled()) {      logger.debug("Added slow prefetch query: selectivity=" + selectivity + " rowCount="+ rowCount+ " queryKey="+ queryKey);    }    if (selectivity < minSelectivity)     minSelectivity=selectivity;    if (selectivity > maxSelectivity)     maxSelectivity=selectivity;    if (rowCount < minRows)     minRows=rowCount;    if (rowCount > maxRows)     maxRows=rowCount;  } else   if (!slow && cached) {    slowQueries.invalidate(queryKey);    if (logger.isDebugEnabled()) {      logger.debug("Invalidated existing slow prefetch query: selectivity=" + selectivity + " rowCount="+ rowCount+ " queryKey="+ queryKey);    }    totalInvalidatedQueries++;  }  pendingQueries.invalidate(queryKey);}  }
class C{  public TIntObjectHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  public void createWeekScenarioBug10265_UpgradeAndParChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-22 23:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS2,3,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"BUG10265_UPG_PARCHG",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-23 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-24 23:00:00"),"MAX_FOLDER_NUMBER","3");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-25 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG_SERVICE2",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS3,2,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-27 23:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.copyParametersAndUpgradeSubscription(basicSetup.getCustomerAdminKey(),subDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-02-28 23:00:00"),"MAX_FOLDER_NUMBER","5");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 06:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 07:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-02 11:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-02 12:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-03 07:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG",upgradedSubDetails);}  }
class C{  public static boolean quatEqual(Quaternionf a,Quaternionf b,float precision){  return floatEqual(a.x,b.x,precision) && floatEqual(a.y,b.y,precision) && floatEqual(a.z,b.z,precision)&& floatEqual(a.w,b.w,precision);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns03.class,args);}  }
class C{  JMenu createFileMenu(){  JMenu fileMenu=new JMenu("File");  fileMenu.add(new OpenAction(this));  fileMenu.add(new SaveAction(this));  fileMenu.add(new SaveAsAction(this));  fileMenu.addSeparator();  fileMenu.add(new ShowNetworkUpdaterDialog(networkPanel));  fileMenu.add(new ShowNetworkPreferencesAction(networkPanel));  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  return fileMenu;}  }
class C{  public List typeParameters(){  if (this.typeParameters == null) {    unsupportedIn2();  }  return this.typeParameters;}  }
class C{  private void checkNoSelfIntersectingRings(GeometryGraph graph){  for (Iterator i=graph.getEdgeIterator(); i.hasNext(); ) {    Edge e=(Edge)i.next();    checkNoSelfIntersectingRing(e.getEdgeIntersectionList());    if (validErr != null)     return;  }}  }
class C{  private static Bitmap loadBitmapOptimized(ImageSource source,int w,int h) throws ImageLoadException {  int scale=getScaleFactor(source.getImageMetadata(),w,h);  return loadBitmap(source,scale);}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void printMemory(){  memory.printMemory();}  }
class C{  public QueryExecutionTimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private static int UTCDiff(final String diffString){  if (diffString.length() != 5)   throw new IllegalArgumentException("UTC String malformed (wrong size):" + diffString);  boolean ahead=true;  if (diffString.length() > 0 && diffString.charAt(0) == '+')   ahead=true; else   if (diffString.length() > 0 && diffString.charAt(0) == '-')   ahead=false; else   throw new IllegalArgumentException("UTC String malformed (wrong sign):" + diffString);  final int oh=NumberTools.parseIntDecSubstring(diffString,1,3);  final int om=NumberTools.parseIntDecSubstring(diffString,3);  return (int)(((ahead) ? 1 : -1) * (oh * 60 + om));}  }
class C{  public static CreateWalletResponse create(String password,String apiCode) throws IOException, APIException {  return create(password,apiCode,null,null,null);}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException("observer == null");  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  public void testChatLogGroupQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=ChatLog.GroupChat.CHAT_ID.concat("=?");    String[] whereArgs=new String[]{"123456789"};    cursor=mProvider.query(ChatLog.GroupChat.CONTENT_URI,CHAT_LOG_GROUPCHAT_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public static DateBuilder newDateInTimeZoneAndLocale(TimeZone tz,Locale lc){  return new DateBuilder(tz,lc);}  }
class C{  protected URL findJarForResource(URL url) throws MalformedURLException {  if (log.isDebugEnabled()) {    log.debug("Find JAR URL: " + url);  }  try {    for (; ; ) {      url=new URL(url.getFile());      if (log.isDebugEnabled()) {        log.debug("Inner URL: " + url);      }    }  } catch (  MalformedURLException e) {  }  StringBuilder jarUrl=new StringBuilder(url.toExternalForm());  int index=jarUrl.lastIndexOf(".jar");  if (index >= 0) {    jarUrl.setLength(index + 4);    if (log.isDebugEnabled()) {      log.debug("Extracted JAR URL: " + jarUrl);    }  } else {    if (log.isDebugEnabled()) {      log.debug("Not a JAR: " + jarUrl);    }    return null;  }  try {    URL testUrl=new URL(jarUrl.toString());    if (isJar(testUrl)) {      return testUrl;    } else {      if (log.isDebugEnabled()) {        log.debug("Not a JAR: " + jarUrl);      }      jarUrl.replace(0,jarUrl.length(),testUrl.getFile());      File file=new File(jarUrl.toString());      if (!file.exists()) {        try {          file=new File(URLEncoder.encode(jarUrl.toString(),"UTF-8"));        } catch (        UnsupportedEncodingException e) {          throw new RuntimeException("Unsupported encoding?  UTF-8?  That's unpossible.");        }      }      if (file.exists()) {        if (log.isDebugEnabled()) {          log.debug("Trying real file: " + file.getAbsolutePath());        }        testUrl=file.toURI().toURL();        if (isJar(testUrl)) {          return testUrl;        }      }    }  } catch (  MalformedURLException e) {    log.warn("Invalid JAR URL: " + jarUrl);  }  if (log.isDebugEnabled()) {    log.debug("Not a JAR: " + jarUrl);  }  return null;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public final static int findFirstDiff(char[] source,int index,char match){  for (int i=index; i < source.length; i++) {    if (source[i] != match) {      return i;    }  }  return -1;}  }
class C{  public void exit(){  if (thread == null) {    exit2();  } else   if (looping) {    finished=true;    exitCalled=true;  } else   if (!looping) {    dispose();    exit2();  }}  }
class C{  public static void recordAllocation(int count,String desc,Object newObj){  if (recordingAllocation.get() == Boolean.TRUE) {    return;  } else {    recordingAllocation.set(Boolean.TRUE);  }  Instrumentation instr=instrumentation;  if (instr != null) {    long objectSize=-1;    Sampler[] samplers=additionalSamplers;    if (samplers != null) {      if (objectSize < 0) {        objectSize=getObjectSize(newObj,(count >= 0),instr);      }      for (      Sampler sampler : samplers) {        sampler.sampleAllocation(count,desc,newObj,objectSize);      }    }  }  recordingAllocation.set(Boolean.FALSE);}  }
class C{  public boolean voidIt(){  if (!isValidAction(ACTION_Void))   return false;  if (m_document != null) {    if (m_document.voidIt()) {      m_status=STATUS_Voided;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Voided;  return true;}  }
class C{  private void writeSystemInfo(){  cs.setXPressNetMessagesFlag(XPressNetMessagesCheckBox.isSelected());  cs.setRMBusMessagesFlag(RMBusMessagesCheckBox.isSelected());  cs.setSystemStatusMessagesFlag(SystemStatusMessagesCheckBox.isSelected());  cs.setRailComMessagesFlag(RailComMessagesCheckBox.isSelected());  cs.setXPressNetLocomotiveMessagesFlag(XPressNetLocomotiveMessagesCheckBox.isSelected());  cs.setLocoNetMessagesFlag(LocoNetMessagesCheckBox.isSelected());  cs.setLocoNetLocomotiveMessagesFlag(LocoNetLocomotiveMessagesCheckBox.isSelected());  cs.setLocoNetTurnoutMessagesFlag(LocoNetTurnoutMessagesCheckBox.isSelected());  cs.setLocoNetOccupancyMessagesFlag(LocoNetOccupancyMessagesCheckBox.isSelected());  tc.sendz21Message(Z21Message.getLanSetBroadcastFlagsRequestMessage(cs.getZ21BroadcastFlags()),this);}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public final boolean isRemoteStreamLive() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  MediaInfo info=getRemoteMediaInformation();  return null != info && info.getStreamType() == MediaInfo.STREAM_TYPE_LIVE;}  }
class C{  public InvalidStreamException(String msg){  super(msg);}  }
class C{  public UserModificationConstraintException(Reason reason){  super();  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static CreateWalletResponse create(String password,String apiCode,String privateKey,String label,String email) throws IOException, APIException {  Map<String,String> params=new HashMap<String,String>();  params.put("password",password);  params.put("api_code",apiCode);  if (privateKey != null) {    params.put("priv",privateKey);  }  if (label != null) {    params.put("label",label);  }  if (email != null) {    params.put("email",email);  }  String response=HttpClient.getInstance().post("api/v2/create_wallet",params);  JsonObject jsonObj=new JsonParser().parse(response).getAsJsonObject();  return new CreateWalletResponse(jsonObj.get("guid").getAsString(),jsonObj.get("address").getAsString(),jsonObj.get("link").getAsString());}  }
class C{  public final void mulNormalize(Matrix3d m1,Matrix3d m2){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;  tmp[1]=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;  tmp[2]=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;  tmp[3]=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;  tmp[4]=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;  tmp[5]=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;  tmp[6]=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;  tmp[7]=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;  tmp[8]=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  public AbstractNaryTupleOperator(List<? extends TupleExpr> args){  super(args);}  }
class C{  public boolean isGradleSdkHome(@Nullable File file){  if (file == null) {    return false;  }  final File libs=new File(file,"lib");  if (!libs.isDirectory()) {    if (GradleEnvironment.DEBUG_GRADLE_HOME_PROCESSING) {      GradleLog.LOG.info(String.format("Gradle sdk check failed for the path '%s'. Reason: it doesn't have a child directory named 'lib'",file.getAbsolutePath()));    }    return false;  }  final boolean found=isGradleSdk(libs.listFiles());  if (GradleEnvironment.DEBUG_GRADLE_HOME_PROCESSING) {    GradleLog.LOG.info(String.format("Gradle home check %s for the path '%s'",found ? "passed" : "failed",file.getAbsolutePath()));  }  return found;}  }
class C{  private DataSet reduceSeparateAndConquerDataset(String individualRegex,boolean convertToUnmatch,boolean isFlagging){  Pattern pattern=Pattern.compile(individualRegex);  Matcher individualRegexMatcher=pattern.matcher("");  DataSet reducedDataset=new DataSet(this.name,"Reduction: " + individualRegex,this.regexTarget);  for (  Example example : this.examples) {    if (!isFlagging) {      reducedDataset.getExamples().add(this.reduceSeparateAndConquerExample(example,individualRegexMatcher,convertToUnmatch));    } else {      reducedDataset.getExamples().add(this.reduceSeparateAndConquerFlaggingExample(example,individualRegexMatcher));    }  }  return reducedDataset;}  }
class C{  public void refresh(){  refreshBasic();  refreshBucketStats();}  }
class C{  public void info(Object message,Throwable exception){  log(Level.INFO,String.valueOf(message),exception);}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  public static GT_Tool_Item constructElectricSolderingToolItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_SolderingToolIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  public void initPersistenceUnitClasses(HashMap<String,EntityAccessor> allEntities,HashMap<String,EmbeddableAccessor> allEmbeddables){  for (  MixedConverterMetadata mixedConverter : getMixedConverters()) {    if (mixedConverter.isConverterMetadata()) {      getConverters().add(mixedConverter.buildConverterMetadata());    } else {      getConverterAccessors().add(mixedConverter.buildConverterAccessor());    }  }  for (  EntityAccessor entity : getEntities()) {    MetadataClass entityClass=getMetadataClass(getPackageQualifiedClassName(entity.getClassName()),false);    entity.initXMLClassAccessor(entityClass,new DBMetadataDescriptor(entityClass,entity),getProject(),this);    if (allEntities.containsKey(entityClass.getName())) {      allEntities.get(entityClass.getName()).merge(entity);    } else {      allEntities.put(entityClass.getName(),entity);    }  }  for (  EmbeddableAccessor embeddable : getEmbeddables()) {    MetadataClass embeddableClass=getMetadataClass(getPackageQualifiedClassName(embeddable.getClassName()),false);    embeddable.initXMLClassAccessor(embeddableClass,new DBMetadataDescriptor(embeddableClass,embeddable),getProject(),this);    if (allEmbeddables.containsKey(embeddableClass.getName())) {      allEmbeddables.get(embeddableClass.getName()).merge(embeddable);    } else {      allEmbeddables.put(embeddableClass.getName(),embeddable);    }  }  for (  MappedSuperclassAccessor mappedSuperclass : getMappedSuperclasses()) {    MetadataClass mappedSuperclassClass=getMetadataClass(getPackageQualifiedClassName(mappedSuperclass.getClassName()),false);    mappedSuperclass.initXMLClassAccessor(mappedSuperclassClass,new DBMetadataDescriptor(mappedSuperclassClass,mappedSuperclass),getProject(),this);    if (getProject().hasMappedSuperclass(mappedSuperclassClass)) {      getProject().getMappedSuperclassAccessor(mappedSuperclassClass).merge(mappedSuperclass);    } else {      getProject().addMappedSuperclass(mappedSuperclass);    }  }  for (  ConverterAccessor converterAccessor : getConverterAccessors()) {    MetadataClass converterClass=getMetadataClass(getPackageQualifiedClassName(converterAccessor.getClassName()),false);    converterAccessor.initXMLObject(converterClass,this);    if (getProject().hasConverterAccessor(converterClass)) {      getProject().getConverterAccessor(converterClass).merge(converterAccessor);    } else {      getProject().addConverterAccessor(converterAccessor);    }  }}  }
class C{  public void testFloatMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",-1.3F));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",4.2F));  doc.add(newStringField("value","4.2",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  protected void applyAlpha(Paint paint,float alpha){  paint.setAlpha((int)(alpha * 255));  paint.setShadowLayer(style.mShadowRadius,style.mShadowDx,style.mShadowDy,Color.argb(((int)(alpha * 255) < style.mAlpha) ? (int)(alpha * 255) : style.mAlpha,style.mRed,style.mGreen,style.mBlue));}  }
class C{  long comparable(){  return comparable;}  }
class C{  private boolean isUniqueName(CategoryForm category,String name){  String parentId=category.parentId;  return isUniqueCategoryName(category.id,name,parentId) && isUniqueServiceName(null,name,parentId);}  }
class C{  public static Builder builder(CommandResponse response){  return new Builder(response);}  }
class C{  public boolean nextLine(){  while (isValidIndex() && text[pos] != '\n') {    next();  }  if (isValidIndex() && text[pos] == '\n') {    next();    return isValidIndex();  }  return false;}  }
class C{  private void snap(){  mTranslateRect.set(mTempSrc);  mMatrix.mapRect(mTranslateRect);  float maxLeft=mAllowCrop ? mCropRect.left : 0.0f;  float maxRight=mAllowCrop ? mCropRect.right : getWidth();  float l=mTranslateRect.left;  float r=mTranslateRect.right;  final float translateX;  if (r - l < maxRight - maxLeft) {    translateX=maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;  } else   if (l > maxLeft) {    translateX=maxLeft - l;  } else   if (r < maxRight) {    translateX=maxRight - r;  } else {    translateX=0.0f;  }  float maxTop=mAllowCrop ? mCropRect.top : 0.0f;  float maxBottom=mAllowCrop ? mCropRect.bottom : getHeight();  float t=mTranslateRect.top;  float b=mTranslateRect.bottom;  final float translateY;  if (b - t < maxBottom - maxTop) {    translateY=maxTop + ((maxBottom - maxTop) - (b + t)) / 2;  } else   if (t > maxTop) {    translateY=maxTop - t;  } else   if (b < maxBottom) {    translateY=maxBottom - b;  } else {    translateY=0.0f;  }  if (Math.abs(translateX) > SNAP_THRESHOLD || Math.abs(translateY) > SNAP_THRESHOLD) {    mSnapRunnable.start(translateX,translateY);  } else {    mMatrix.postTranslate(translateX,translateY);    invalidate();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean openNotification() throws NotImplementedException {  return device.openNotification();}  }
class C{  public String option2Name(){  return "";}  }
class C{  static boolean doesIconReferenceImage(Icon icon,Image image){  Image iconImage=(icon != null && (icon instanceof ImageIcon)) ? ((ImageIcon)icon).getImage() : null;  return (iconImage == image);}  }
class C{  protected static int randomInt(){  return ThreadLocalRandom.current().nextInt();}  }
class C{  public void visitNode(IGraphEntity n){  String tag="n" + (_ctr++);  nodes.put(tag,n);}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  DrawingToolRequestor dtr;  if (omg instanceof OMGraphicList) {    if (Debug.debugging("drawingtool")) {      Debug.output("DTRL.drawingComplete(list)");    }    for (Iterator it=((OMGraphicList)omg).iterator(); it.hasNext(); ) {      OMGraphic omgi=(OMGraphic)it.next();      dtr=(DrawingToolRequestor)table.get(omgi);      if (dtr != null) {        if (Debug.debugging("drawingtool")) {          Debug.output("  notifying requestor for list member " + omgi.getClass().getName());        }        dtr.drawingComplete(omgi,action);      }    }  } else {    dtr=(DrawingToolRequestor)table.get(omg);    if (dtr != null) {      if (Debug.debugging("drawingtool")) {        Debug.output("  notifying requestor for " + omg.getClass().getName());      }      dtr.drawingComplete(omg,action);    }  }  if (Debug.debugging("drawingtool")) {    Debug.output("DTRL.drawingComplete complete");  }}  }
class C{  private static HttpHost[] toChain(HttpHost proxy){  if (proxy == null)   return null;  return new HttpHost[]{proxy};}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public QuadEdge connect(QuadEdge a,QuadEdge b){  QuadEdge q=QuadEdge.connect(a,b);  quadEdges.add(q);  return q;}  }
class C{  protected final void putTag(int tag){  if (tag < 256) {    bytes[--start]=(byte)tag;  } else {    while (tag != 0) {      bytes[--start]=(byte)(tag & 127);      tag=tag << 7;    }  }}  }
class C{  public URLMultipartBody build(){  if (parts.isEmpty()) {    throw new IllegalStateException("Multipart body must have at least one part.");  }  return new URLMultipartBody(boundary,type,parts);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SRuntimePackage.REFERENCE_SLOT__REFERENCE:    return reference != null;}return super.eIsSet(featureID);}  }
class C{  public void sendTo(BytesAndBitsForCompactor wrapper,byte userBits){  ByteBuffer bb=toByteBuffer();  if (bb.hasArray() && bb.arrayOffset() == 0) {    wrapper.setData(bb.array(),userBits,bb.limit(),true);  } else {    ByteBuffer tmp=ByteBuffer.allocate(bb.remaining());    tmp.put(bb);    tmp.flip();    this.buffer=tmp;    byte[] bytes=this.buffer.array();    wrapper.setData(bytes,userBits,bytes.length,true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.970 -0500",hash_original_method="1CDEF814C342D7BC6571C7725C279513",hash_generated_method="9EB6D26C0819AF2A92E1E8507A567125") protected void addMessageToConsole(String message,int lineNumber,String sourceID,int msgLevel){  mCallbackProxy.addMessageToConsole(message,lineNumber,sourceID,msgLevel);}  }
class C{  public int kind(){  return SHIFT;}  }
class C{  protected void sequence_VersionConstraint(ISerializationContext context,VersionConstraint semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void transitionToPark(boolean timed) throws InterruptedException {  nextState(timed ? S_TIMED_PARKED : S_PARKED);}  }
class C{  @Inline public static boolean testAndMark(ObjectReference object){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    Word markBit=oldValue.and(GC_MARK_BIT_MASK);    if (!markBit.isZero())     return false;  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.or(GC_MARK_BIT_MASK)));  return true;}  }
class C{  public IElementType parseBarewordMinus(){  final CharSequence tokenText=yytext();  boolean startsWithMinus=tokenText.charAt(0) == '-';  boolean negate=IDENTIFIER_NEGATION_PREFIX.contains(getTokenHistory().getLastSignificantTokenType()) || SIGILS_TOKENS.contains(getTokenHistory().getLastTokenType());  if (Character.isDigit(tokenText.charAt(0))) {    int endOffset=1;    while (Character.isDigit(tokenText.charAt(endOffset))) {      endOffset++;    }    yypushback(tokenText.length() - endOffset);    return NUMBER_SIMPLE;  } else   if (!negate && isBraced()) {    return IDENTIFIER;  } else   if (!negate && isCommaArrowAhead()) {    return STRING_IDENTIFIER;  } else   if (StringUtil.startsWith(tokenText,"--")) {    yypushback(tokenText.length() - 2);    return OPERATOR_MINUS_MINUS;  } else   if (startsWithMinus) {    yypushback(tokenText.length() - 1);    return OPERATOR_MINUS;  }  return getIdentifierToken();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Supplier<Queue<T>> unbounded(int linkSize){  if (linkSize == XS_BUFFER_SIZE) {    return XS_UNBOUNDED;  } else   if (linkSize == SMALL_BUFFER_SIZE) {    return SMALL_UNBOUNDED;  }  return null;}  }
class C{  protected AnimatableMotionPointValue(AnimationTarget target){  super(target);}  }
class C{  public StringData(String data){  m_data=data;}  }
class C{  public void testSimpleBuilderArrayRegistered() throws Exception {  checkSimpleBuilderArray(true);}  }
class C{  @Override public void reset(){  this.setRotation(0.0f,0.0f,0.0f);  this.setInternalAlpha(mDefaultAlpha);}  }
class C{  int nextNode(String sStr,int i){  int nBraces=0;  char c=sStr.charAt(i);  do {    i++;    if (i < sStr.length()) {      c=sStr.charAt(i);      if (c == '[') {        while (i < sStr.length() && sStr.charAt(i) != ']') {          i++;        }        i++;        if (i < sStr.length()) {          c=sStr.charAt(i);        }      }switch (c) {case '(':        nBraces++;      break;case ')':    nBraces--;  break;default :break;}}} while (i < sStr.length() && (nBraces > 0 || (c != ',' && c != ')' && c != '(')));if (i >= sStr.length() || nBraces < 0) {return -1;} else if (sStr.charAt(i) == ')') {i++;if (sStr.charAt(i) == '[') {while (i < sStr.length() && sStr.charAt(i) != ']') {i++;}i++;if (i >= sStr.length()) {return -1;}}if (sStr.charAt(i) == ':') {i++;c=sStr.charAt(i);while (i < sStr.length() && (c == '.' || Character.isDigit(c))) {i++;if (i < sStr.length()) {c=sStr.charAt(i);}}}}return i;}  }
class C{  public static Address fromBase58(@Nullable NetworkParameters params,String base58) throws AddressFormatException {  return new Address(params,base58);}  }
class C{  public Node removeChild(Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public static ArrayList strSplit(final String aSeparator,final String aInput){  ArrayList token=new ArrayList();  if (aSeparator == null || aSeparator.equals("")) {    token.add(aInput);    return token;  }  if (aInput == null || aInput.equals("")) {    return token;  }  int startIdx=0;  int idxOld=0;  while ((idxOld=aInput.indexOf(aSeparator,startIdx)) >= 0) {    token.add(aInput.substring(startIdx,idxOld));    startIdx=idxOld + aSeparator.length();  }  token.add(aInput.substring(startIdx));  return token;}  }
class C{  public void log(Class c,String message,int log_type){  LocalTime t=LocalTime.now();  String time=t.toString().substring(0,t.toString().length() - 4);switch (log_type) {case ERROR:    stdout.println("[E] " + time + " - ["+ c.getName()+ "]:\t"+ "Error, see Errors tab.");  stderr.println("[E] " + time + " - ["+ c.getName()+ "]:\t"+ message);break;case INFO:if (UIOptions.getLoggingLevel() == 0 || UIOptions.getLoggingLevel() == 2) {stdout.println("[I] " + time + " - ["+ c.getName()+ "]:\t"+ message);}break;case DEBUG:if (UIOptions.getLoggingLevel() == 1 || UIOptions.getLoggingLevel() == 2) {stdout.println("[D] " + time + " - ["+ c.getName()+ "]:\t"+ message);}break;}}  }
class C{  public void updateData(TaskGraphNode node){  this.node=node;}  }
class C{  public void close() throws IOException {  if (writer != null) {    writer.close();  } else {    cb=null;    closed=true;  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.207 -0500",hash_original_method="E70E3F12F9547EDCFC1C795A424416CD",hash_generated_method="965A538D3098226CBCAF41065E4CD7F9") public HandlerThread(String name,int priority){  super(name);  mPriority=priority;}  }
class C{  protected ComputeJobAdapter(@Nullable Object... args){  this.args=args;}  }
class C{  public static void deleteKey(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int rc=-1;  if (hkey == HKEY_LOCAL_MACHINE) {    rc=deleteKey(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    rc=deleteKey(userRoot,hkey,key);  }  if (rc != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + rc + "  key="+ key);  }}  }
class C{  public void finishPreferencePanel(Fragment caller,int resultCode,Intent resultData){  if (mSinglePane) {    setResult(resultCode,resultData);    finish();  } else {    onBackPressed();    if (caller != null) {      if (caller.getTargetFragment() != null) {        caller.getTargetFragment().onActivityResult(caller.getTargetRequestCode(),resultCode,resultData);      }    }  }}  }
class C{  @HLEFunction(nid=0x75ECD386,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlGetState(TPointer32 stateAddr){  checkInitialized();  stateAddr.setValue(adhocctlCurrentState);  return 0;}  }
class C{  public void rollbackForgetVolumes(URI vplexSystemURI,List<URI> volumeURIs,String stepId){  forgetVolumes(vplexSystemURI,getNativeVolumeInfo(volumeURIs),stepId);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.457 -0500",hash_original_method="94490DFEC498722DA435B9597CF0EDDE",hash_generated_method="D06CBF81F2867BB687F3C98679973161") public void putBoolean(String key,boolean value){  unparcel();  mMap.put(key,value);}  }
class C{  public Person(String name,String uri,String email){  this(name);  this.uri=uri;  this.email=email;}  }
class C{  public UpdatePod build(){  if (getServers() == null) {    int count=Math.max(_primaryServerCount,_depth);    if (_type == PodType.off) {      count=0;    }    _servers=buildServers(count);  }  Objects.requireNonNull(getServers());  return new UpdatePod(this);}  }
class C{  protected void processClientPom() throws IOException {  File pom=new File(projectRoot,CLIENT_POM);  String pomContent=readFileContent(pom);  String depString=GEN_START + String.format("<dependency>%n<groupId>%s</groupId>%n<artifactId>%s</artifactId>%n</dependency>%n",mavenGroupId,mavenArtifactId) + GEN_END;  if (!pomContent.contains(DEP_END_TAG)) {    throw new IOException(String.format("File '%s' doesn't contain '%s'. Can't process file.",CLIENT_POM,DEP_END_TAG));  }  pomContent=pomContent.replace(DEP_END_TAG,depString + DEP_END_TAG);  writeFileContent(pomContent,pom);}  }
class C{  public Lexicon removeLowDfWords(int minDf){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.df < minDf) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  private IoBuffer encodeAuthenticationPacket(final SocksProxyRequest request) throws UnsupportedEncodingException, GSSException {  byte method=((Byte)getSession().getAttribute(Socks5LogicHandler.SELECTED_AUTH_METHOD)).byteValue();switch (method) {case SocksProxyConstants.NO_AUTH:    getSession().setAttribute(HANDSHAKE_STEP,SocksProxyConstants.SOCKS5_REQUEST_STEP);  break;case SocksProxyConstants.GSSAPI_AUTH:return encodeGSSAPIAuthenticationPacket(request);case SocksProxyConstants.BASIC_AUTH:byte[] user=request.getUserName().getBytes("ASCII");byte[] pwd=request.getPassword().getBytes("ASCII");IoBuffer buf=IoBuffer.allocate(3 + user.length + pwd.length);buf.put(SocksProxyConstants.BASIC_AUTH_SUBNEGOTIATION_VERSION);buf.put((byte)user.length);buf.put(user);buf.put((byte)pwd.length);buf.put(pwd);return buf;}return null;}  }
class C{  public NHERD(double C,CovMode covMode){  setC(C);  setCovMode(covMode);}  }
class C{  private static boolean moveToTrashOSX(File file){  try {    String[] command=moveToTrashCommand(file);    ProcessBuilder builder=new ProcessBuilder(command);    builder.redirectErrorStream();    Process process=builder.start();    consumeAllInput(process);    process.waitFor();  } catch (  InterruptedException err) {    LOG.error("InterruptedException",err);  }catch (  IOException err) {    LOG.error("IOException",err);  }  return !file.exists();}  }
class C{  public ImageTree forwardDWTwp(int[][] pixels){  Image image=null;  ImageTree tree=null;  image=new Image(this.cols,this.rows);  for (int i=0; i < this.rows; i++) {    for (int j=0; j < this.cols; j++) {      DWTUtil.setPixel(image,j,i,pixels[i][j]);    }  }  tree=DWTUtil.waveletTransformWp(image,0,this.level,this.filters,this.method);  return tree;}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  @Override public boolean equals(Object obj){  if (null == obj)   return false; else   if (this == obj)   return true; else   return getClass().equals(obj.getClass());}  }
class C{  public void initStack(int numberOfStacked,StackPageTransformer.Orientation orientation){  initStack(numberOfStacked,orientation,DEFAULT_CURRENT_PAGE_SCALE,DEFAULT_TOP_STACKED_SCALE,DEFAULT_OVERLAP_FACTOR,StackPageTransformer.Gravity.CENTER);}  }
class C{  public ArffReader(Reader reader,Instances template,int lines,String... fieldSepAndEnclosures) throws IOException {  this(reader,template,lines,100,true,fieldSepAndEnclosures);  Instance inst;  while ((inst=readInstance(m_Data)) != null) {    m_Data.add(inst);  }  compactify();}  }
class C{  public EquirippleLowpass(int N,double OmegaP,double Wp,double OmegaS,double Ws){  super(2,N);  if (OmegaP >= OmegaS)   throw new IllegalArgumentException("OmegaP >= OmegaS ");  if (OmegaP <= 0.0 || OmegaP >= 1.0)   throw new IllegalArgumentException("OmegaP: " + OmegaP + " out of bounds (0.0 < OmegaP < 1.0)");  if (OmegaS <= 0.0 || OmegaS >= 1.0)   throw new IllegalArgumentException("OmegaS: " + OmegaS + " out of bounds (0.0 < OmegaS < 1.0)");  bands[0][0]=0.0;  bands[0][1]=OmegaP;  bands[1][0]=OmegaS;  bands[1][1]=1.0;  this.Wp=Wp;  this.Ws=Ws;  generateCoefficients();}  }
class C{  public void test_transferTo_couldDelete() throws Exception {  writeDataToFile(fileOfReadOnlyFileChannel);  writeDataToFile(fileOfWriteOnlyFileChannel);  readOnlyFileChannel.transferTo(0,2,writeOnlyFileChannel);  readOnlyFileChannel.close();  writeOnlyFileChannel.close();  boolean rDel=fileOfReadOnlyFileChannel.delete();  boolean wDel=fileOfWriteOnlyFileChannel.delete();  assertTrue("File " + readOnlyFileChannel + " exists",rDel);  assertTrue("File " + writeOnlyFileChannel + " exists",wDel);}  }
class C{  public static boolean isHigherVisibility(int newVisibility,int oldVisibility){  assertVisibility(oldVisibility);  assertVisibility(newVisibility);switch (oldVisibility) {case Modifier.PRIVATE:    return newVisibility == Modifier.NONE || newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.NONE:  return newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.PROTECTED:return newVisibility == Modifier.PUBLIC;case Modifier.PUBLIC:return false;default :Assert.isTrue(false);return false;}}  }
class C{  E doRemoveLastEntry(){  for (; ; ) {    Node<E> b=findPredecessorOfLast();    Node<E> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<E> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      E key=n.key;      Comparable<? super E> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return key;    }  }}  }
class C{  public SQLiteTableBuilder addColumn(String columnName,int type,boolean primaryKey){  if (TextUtils.isEmpty(columnName)) {    throw new IllegalArgumentException("Column name cannot be empty.");  } else   if (!columnName.matches(REGEX_SQL_IDENTIFIER)) {    throw new IllegalArgumentException("Invalid column name.");  }  if (mHasColumns) {    mStringBuilder.append(COMMA);  }  mStringBuilder.append(columnName);  appendType(type);  if (primaryKey) {    mStringBuilder.append(PRIMARY_KEY);  }  mHasColumns=true;  return this;}  }
class C{  @Override public void generate(RealisticBiomeBase biome,World world,Random rand,int blockX,int blockY,OpenSimplexNoise simplex,CellNoise cell,float strength,float river,boolean hasPlacedVillageBlocks){  if (this.allowed) {    if (TerrainGen.decorate(world,rand,new BlockPos(blockX,0,blockY),LILYPAD)) {      WorldGenerator worldgeneratorLilypads=new WorldGenWaterlily();      WorldGenerator worldgeneratorVines=new WorldGenVinesRTG();      Block vb;      for (int b33=0; b33 < 5; b33++) {        int j6=blockX + rand.nextInt(16) + 8;        int k10=blockY + rand.nextInt(16) + 8;        int z52=world.getHeight(new BlockPos(j6,0,k10)).getY();        for (int h44=0; h44 < 8; h44++) {          if (z52 > 64) {            worldgeneratorLilypads.generate(world,rand,new BlockPos(j6,z52,k10));          }        }        for (int h44=100; h44 > 0; h44--) {          vb=world.getBlockState(new BlockPos(j6,h44,k10)).getBlock();          if (vb == volcanoBlock || vb == volcanoMix1Block || vb == volcanoMix2Block || vb == volcanoMix3Block) {            return;          }          worldgeneratorVines.generate(world,rand,new BlockPos(j6,z52,k10));        }      }    }  }}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  void become(Role role,int leaderId) throws GondolaException {  peers.forEach(null);  slaves.forEach(null);  saveQueue.settle(savedRid);  sentRid.set(savedRid);  Role oldRole=this.role;  this.role=role;  this.leaderId=leaderId;  if (role != Role.LEADER) {    CoreCmd ccmd=waitQueue.peek();    while (ccmd != null) {      ccmd.update(Command.STATUS_NOT_LEADER,leaderId);      waitQueue.poll();      ccmd=waitQueue.peek();    }  }  if (role != oldRole) {    gondola.notifyRoleChange(new RoleChangeEvent(shard,shard.getMember(memberId),shard.getMember(leaderId),oldRole,role));  }}  }
class C{  public CeylonRepoManagerBuilder cwd(File cwd){  this.cwd=cwd;  return this;}  }
class C{  public void dispose(){  super.dispose();  setList(null);}  }
class C{  @CheckForNull public static <T extends Trigger>T triggerFrom(final Job<?,?> job,Class<T> tClass){  Job<?,?> guessJob;  if (job instanceof MatrixConfiguration) {    guessJob=((MatrixConfiguration)job).getParent();  } else {    guessJob=job;  }  if (guessJob instanceof AbstractProject<?,?>) {    final AbstractProject<?,?> abstractProject=(AbstractProject<?,?>)guessJob;    return abstractProject.getTrigger(tClass);  } else   if (guessJob instanceof ParameterizedJobMixIn.ParameterizedJob) {    ParameterizedJobMixIn.ParameterizedJob pJob=(ParameterizedJobMixIn.ParameterizedJob)guessJob;    for (    Trigger candidate : pJob.getTriggers().values()) {      if (tClass.isInstance(candidate)) {        return tClass.cast(candidate);      }    }  }  return null;}  }
class C{  public boolean is_set_true_as_of_secs(){  return EncodingUtils.testBit(__isset_bitfield,__TRUE_AS_OF_SECS_ISSET_ID);}  }
class C{  @Override protected boolean validate(BlockObject blockObject,CIMInstance mask,CIMInstance assocMask) throws WBEMException {  boolean isSharingStorageGroups;  boolean assocMaskHasExportGroup=false;  String name=(String)mask.getPropertyValue(SmisConstants.CP_DEVICE_ID);  String assocName=(String)assocMask.getPropertyValue(SmisConstants.CP_DEVICE_ID);  List<ExportMask> exportMasks=CustomQueryUtility.queryActiveResourcesByConstraint(getDbClient(),ExportMask.class,AlternateIdConstraint.Factory.getExportMaskByNameConstraint(assocName));  if (!exportMasks.isEmpty()) {    ExportMask em=exportMasks.get(0);    log.info("MV {} is tracked by {}",assocName,em.getId());    List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(getDbClient(),ExportGroup.class,ContainmentConstraint.Factory.getExportMaskExportGroupConstraint(em.getId()));    assocMaskHasExportGroup=!exportGroups.isEmpty();    log.info("MV {} has {} export group(s)",assocName,exportGroups.size());  } else {    log.info("MV {} is not tracked by any ExportMask",assocName);  }  isSharingStorageGroups=isSharingStorageGroups(mask,assocMask);  log.info(format("MV %s is sharing a storage group with %s?  %s",assocName,name,isSharingStorageGroups));  return assocMaskHasExportGroup || !isSharingStorageGroups;}  }
class C{  public static synchronized boolean isGuiAvailable(){  return guiAvailable;}  }
class C{  private void processBEL(){}  }
class C{  public boolean isTheorem(){  return this.theorem;}  }
class C{  public void underLine(int color){  this.underline.setBackgroundResource(color);}  }
class C{  public static void writeIgniteUuid(BinaryRawWriterEx writer,IgniteUuid val){  if (val == null)   writer.writeUuid(null); else {    writer.writeUuid(val.globalId());    writer.writeLong(val.localId());  }}  }
class C{  public Ifgt2(){  super("ifgt2",2);}  }
class C{  @Override public void add(XMLEventReader reader) throws XMLStreamException {  log.log(Level.FINE,"add() {0}",reader);  while (reader.hasNext()) {    XMLEvent event=reader.nextEvent();    this.add(event);  }}  }
class C{  @Override public void visitClassDef(JCClassDecl tree){  if (tree.sym.owner.kind == PCK) {    tree=analyzer.analyzeAndPreprocessClass(tree);  }  KlassInfo prevKlassInfo=kInfo;  try {    kInfo=new KlassInfo(tree);    super.visitClassDef(tree);    if (!kInfo.deserializeCases.isEmpty()) {      int prevPos=make.pos;      try {        make.at(tree);        kInfo.addMethod(makeDeserializeMethod(tree.sym));      }  finally {        make.at(prevPos);      }    }    List<JCTree> newMethods=kInfo.appendedMethodList.toList();    tree.defs=tree.defs.appendList(newMethods);    for (    JCTree lambda : newMethods) {      tree.sym.members().enter(((JCMethodDecl)lambda).sym);    }    result=tree;  }  finally {    kInfo=prevKlassInfo;  }}  }
class C{  public static int parseHexInt(String x){  try {    return (int)Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  nonce=new byte[length];  System.arraycopy(attributeValue,offset,nonce,0,length);}  }
class C{  protected void addComponent(XMLComponent component){  if (fComponents.contains(component)) {    return;  }  fComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  private void closeClient(){  try {    transport.close();  } catch (  IOException e) {    LOG.warn("Failed to close transport",e);  }}  }
class C{  static boolean isNonCharacter(int cp){  return (cp & NON_CHAR_MASK) == NON_CHAR_MASK;}  }
class C{  public final void initSourceName(String sourceName){  if (sourceName == null)   throw new IllegalArgumentException();  if (this.sourceName != null)   throw new IllegalStateException();  this.sourceName=sourceName;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (!new CustomDate(this.fechaFormato,this.fechaA,this.fechaM,this.fechaD,this.fechaS).validate() || !new CustomDate(this.fechaIniFormato,this.fechaIniA,this.fechaIniM,this.fechaIniD,this.fechaIniS).validate() || !new CustomDate(this.fechaFinFormato,this.fechaFinA,this.fechaFinM,this.fechaFinD,this.fechaFinS).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA2,request.getLocale())));  }  return errors;}  }
class C{  public static Map<String,Object> toFieldMap(String userLoginId,String userPrefTypeId,String userPrefGroupTypeId,Object userPrefValue) throws GeneralException {  Map<String,Object> fieldMap=UtilMisc.toMap("userLoginId",userLoginId,"userPrefTypeId",userPrefTypeId,"userPrefValue",ObjectType.simpleTypeConvert(userPrefValue,"String",null,null,false));  if (UtilValidate.isNotEmpty(userPrefGroupTypeId)) {    fieldMap.put("userPrefGroupTypeId",userPrefGroupTypeId);  }  String valueDataType=userPrefValue.getClass().getName();  if (!"java.lang.String".equals(valueDataType)) {    fieldMap.put("userPrefDataType",valueDataType);  }  return fieldMap;}  }
class C{  private void performIteration(GridClientData data) throws GridClientException {  if (rnd.nextDouble() <= WRITE_PROB)   data.put(rnd.nextInt(KEY_COUNT),values[rnd.nextInt(KEY_COUNT)]); else   data.get(rnd.nextInt(KEY_COUNT));  iters++;}  }
class C{  protected View.OnClickListener defaultItemViewClickListener(VH holder,int position){  return null;}  }
class C{  public void buscarProcedimientoRapidaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  setReturnActionFordward(request,mappings.findForward("form_busqueda_rapida"));}  }
class C{  public static <T>T notNull(T obj,String name){  if (obj == null) {    throw new IllegalArgumentException(name + " cannot be null");  }  return obj;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (FileTransfer.getFileTransfer(stack.getUIMgrSafe()).isComplete()) {    if (FileTransfer.getFileTransfer(stack.getUIMgrSafe()).wasSuccessful())     return Boolean.TRUE; else     return "Error: " + FileTransfer.getFileTransfer(stack.getUIMgrSafe()).getStatusMessage();  } else   return FileTransfer.getFileTransfer(stack.getUIMgrSafe()).getStatusMessage();}  }
class C{  public boolean isFinished(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isDone();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public Entry copy(){  Entry e=new Entry(mVal,mXIndex,mData);  return e;}  }
class C{  protected void writeLineSeparator() throws IOException {  boolean oldReplace=replaceEntities;  replaceEntities=false;  super.writeLineSeparator();  replaceEntities=oldReplace;  indented=false;}  }
class C{  public boolean isAllowCitiesOutOfList(){  Object oo=get_Value(COLUMNNAME_AllowCitiesOutOfList);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Map<Integer,List<Trie>> collectChildTries(final List<PackedSlice> slices){  final Map<Integer,List<Trie>> childTries=new HashMap<>();  for (  PackedSlice packedSlice : slices) {    final int num_children=packedSlice.source[0];    for (int i=0; i < num_children; i++) {      final int id=packedSlice.source[2 * i + 1];      if (!childTries.containsKey(id)) {        childTries.put(id,new ArrayList<>(1));      }      final Trie trie=packedSlice.root().match(id);      childTries.get(id).add(trie);    }  }  return childTries;}  }
class C{  private void validateDirectory(Path dir){  Preconditions.checkArgument(dir != null,"Directory component is empty!");}  }
class C{  public void addCRLs(Store crlStore) throws CMSException {  crls.addAll(CMSUtils.getCRLsFromStore(crlStore));}  }
class C{  public void addListener(Listener listener,long listenerCheckMillis){  queue.add(listener);  while (true) {    long casFrequency=currentScheduledFrequency.get();    if (casFrequency == listenerCheckMillis || (casFrequency != -1 && casFrequency <= MINIMUM_CHECK_DELAY_MILLIS)) {      break;    } else     if (casFrequency == -1) {      if (currentScheduledFrequency.compareAndSet(-1,listenerCheckMillis)) {        fixedSizedScheduler.schedule(checker,listenerCheckMillis,TimeUnit.MILLISECONDS);        break;      }    } else {      BigInteger bi1=BigInteger.valueOf(casFrequency);      BigInteger bi2=BigInteger.valueOf(listenerCheckMillis);      int gcd=Math.max(MINIMUM_CHECK_DELAY_MILLIS,bi1.gcd(bi2).intValue());      if (gcd < casFrequency) {        if (currentScheduledFrequency.compareAndSet(casFrequency,gcd)) {          fixedSizedScheduler.schedule(checker,gcd,TimeUnit.MILLISECONDS);          break;        }      } else {        break;      }    }  }}  }
class C{  public org.codehaus.cargo.container.property.User createUser(){  org.codehaus.cargo.container.property.User user=new org.codehaus.cargo.container.property.User();  user.setName(getName());  user.setPassword(getPassword());  for (  RoleElement role : getRoles()) {    user.addRole(role.getName());  }  return user;}  }
class C{  private static BufferedImage makeTestImage200x200(){  return new BufferedImageBuilder(200,200).build();}  }
class C{  public static void reset(Context context,String productKey,String vendorKey,String mobile,String mail,String password,String verification,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  if (!TextUtils.isEmpty(productKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  }  if (!TextUtils.isEmpty(vendorKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.VENDOR_KEY,vendorKey));  }  try {    String jsonParams="";    JSONStringer jsonStringer=new JSONStringer().object();    if (!TextUtils.isEmpty(mobile)) {      jsonStringer.key(ApiKey.MOBILE).value(mobile);    } else {      jsonStringer.key(ApiKey.MAIL).value(mail);    }    jsonParams=jsonStringer.key(ApiKey.PASSWORD).value(password).key(ApiKey.VERTIFICATION).value(verification).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + USER_RESET_PWD,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  public void tickGeneric(int reqId,int tickType,double value){  _log.debug("tickGeneric: " + reqId + " tickType: "+ tickType+ " tickValue: "+ value);}  }
class C{  public boolean removeSpring(VerletSpring2D s){  return springs.remove(s);}  }
class C{  public StringIntMap(int c){  table=new Entry[(c - (c >> 2)) + 1];}  }
class C{  public String label(){  return labels[index];}  }
class C{  public void detachTunnel(GuacamoleTunnel tunnel){}  }
class C{  @Override public int compareTo(WbXmlAttributeValueDef attrVal){  int result=0;  if (this.value == null && attrVal.getValue() == null) {    result=0;  } else   if (this.value == null) {    result=1;  } else   if (attrVal.getValue() == null) {    result=-1;  } else {    result=new Integer(attrVal.getValue().length()).compareTo(this.getValue().length());    if (result == 0) {      result=this.value.compareTo(attrVal.getValue());    }  }  return result;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MPeriod.testPeriodOpen(getCtx(),getDateAcct(),MDocType.DOCBASETYPE_PaymentAllocation,getAD_Org_ID());  getLines(false);  if (m_lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  for (  MAllocationLine line : m_lines) {    if (line.getC_Invoice_ID() != 0) {      final String whereClause=I_C_Invoice.COLUMNNAME_C_Invoice_ID + "=? AND " + I_C_Invoice.COLUMNNAME_IsPaid+ "=? AND "+ I_C_Invoice.COLUMNNAME_DocStatus+ " NOT IN (?,?)";      boolean InvoiceIsPaid=new Query(getCtx(),I_C_Invoice.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(line.getC_Invoice_ID(),"Y",X_C_Invoice.DOCSTATUS_Voided,X_C_Invoice.DOCSTATUS_Reversed).match();      if (InvoiceIsPaid)       throw new AdempiereException("@ValidationError@ @C_Invoice_ID@ @IsPaid@");    }  }  BigDecimal approval=Env.ZERO;  for (int i=0; i < m_lines.length; i++) {    MAllocationLine line=m_lines[i];    approval=approval.add(line.getWriteOffAmt()).add(line.getDiscountAmt());    if (line.getC_BPartner_ID() == 0) {      m_processMsg="No Business Partner";      return DocAction.STATUS_Invalid;    }  }  setApprovalAmt(approval);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  if (encoding == null) {    writeLines(lines,lineEnding,output);  } else {    if (lines == null) {      return;    }    if (lineEnding == null) {      lineEnding=LINE_SEPARATOR;    }    for (    Object line : lines) {      if (line != null) {        output.write(line.toString().getBytes(encoding));      }      output.write(lineEnding.getBytes(encoding));    }  }}  }
class C{  private static ECPoint decompressKey(BigInteger xBN,boolean yBit){  X9IntegerConverter x9=new X9IntegerConverter();  byte[] compEnc=x9.integerToBytes(xBN,1 + x9.getByteLength(CURVE.getCurve()));  compEnc[0]=(byte)(yBit ? 0x03 : 0x02);  return CURVE.getCurve().decodePoint(compEnc);}  }
class C{  public static <V1,V2,V3>MultipleObjectsBundle makeSimple(SimpleTypeInformation<? super V1> type1,List<? extends V1> data1,SimpleTypeInformation<? super V2> type2,List<? extends V2> data2,SimpleTypeInformation<? super V3> type3,List<? extends V3> data3){  MultipleObjectsBundle bundle=new MultipleObjectsBundle();  bundle.appendColumn(type1,data1);  bundle.appendColumn(type2,data2);  bundle.appendColumn(type3,data3);  return bundle;}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  @Override public boolean matches(SolrDocument doc){  for (  Term term : this.terms) {    if (term.matches(doc))     return true;  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.127 -0500",hash_original_method="05A50C3C0DAB95FFDE6EA8B241A55A35",hash_generated_method="520632667D7E86F01831D49C034CAE08") static int minorAxisDistance(int direction,Rect source,Rect dest){  if (DroidSafeAndroidRuntime.control)   throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");  return (direction + source.getTaintInt() + dest.getTaintInt());}  }
class C{  public WsProxyInfo(String serviceClientFileName){  if (serviceClientFileName == null || serviceClientFileName.trim().length() == 0) {    logger.warn("Error: empty parameter[file: " + serviceClientFileName + "]");    return;  }  serviceClientProp=PropertyFileReader.getPropertiesFromFile(serviceClientFileName);  if (serviceClientProp == null) {    logger.warn("Cannot read property file: " + serviceClientFileName);    return;  }  wsInfo=new WsInfo();  readWsProxyProperties();}  }
class C{  public <T>TSink<T> publishBytes(TStream<T> stream,Function<T,byte[]> keyFn,Function<T,byte[]> valueFn,Function<T,String> topicFn,Function<T,Integer> partitionFn){  return stream.sink(new KafkaPublisher<T>(connector,keyFn,valueFn,topicFn,partitionFn));}  }
class C{  public final int peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  public static void loadEmergencyClasses(){}  }
class C{  public void clearBindings(){  if (mBindArgs != null) {    Arrays.fill(mBindArgs,null);  }}  }
class C{  private String sanitizeName(String filename){  String[] parts=filename.split("/");  return parts[parts.length - 1].replaceAll("[^A-Za-z0-9._-]"," ").replaceAll(" +"," ");}  }
class C{  public static String sessionInfoFlagsToString(long flags){  return sessionInfoFlags.toString(flags);}  }
class C{  void onRemoved(){  assert Thread.holdsLock(mux);  rmv=true;  Collection<IgniteUuid> deadIds=classLoader().registeredClassLoaderIds();  if (log.isDebugEnabled())   log.debug("Registering dead class loader IDs: " + deadIds);  deadClsLdrs.addAll(deadIds);  for (  IgniteUuid clsLdrId : deadIds)   rsrcCache.remove(clsLdrId);}  }
class C{  public static final float[] labToRGB(float l,float a,float b,float[] rgb){  float y=(l + 16) / 116.0f;  float x=a / 500.0f + y;  float z=y - b / 200.0f;  rgb[0]=x;  rgb[1]=y;  rgb[2]=z;  for (int i=0; i < 3; i++) {    float p=(float)Math.pow(rgb[i],3);    if (p > 0.008856) {      rgb[i]=p;    } else {      rgb[i]=(rgb[i] - 16 / 116.0f) / 7.787f;    }  }  x=rgb[0] * 0.95047f;  y=rgb[1];  z=rgb[2] * 1.08883f;  rgb[0]=x * 3.2406f + y * -1.5372f + z * -0.4986f;  rgb[1]=x * -0.9689f + y * 1.8758f + z * 0.0415f;  rgb[2]=x * 0.0557f + y * -0.2040f + z * 1.0570f;  double tpow=1 / 2.4;  for (int i=0; i < 3; i++) {    if (rgb[i] > 0.0031308) {      rgb[i]=(float)(1.055 * Math.pow(rgb[i],tpow) - 0.055);    } else {      rgb[i]=12.92f * rgb[i];    }  }  return rgb;}  }
class C{  public LoggingFraction rootLogger(Level level,String... handlers){  rootLogger(new RootLogger().level(level).handlers(handlers));  return this;}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_POLE - epsilon) {    return NORTH_POLE - epsilon;  } else   if (lat < SOUTH_POLE + epsilon) {    return SOUTH_POLE + epsilon;  }  return lat;}  }
class C{  private void isElementIndex(int index){  if (index < 0 || index >= size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than size ["+ size+ "]");  }}  }
class C{  public boolean removeHost(MacAddress host){  for (  Entry<String,MacAddress> entry : this.portToMac.entrySet()) {    if (entry.getValue().equals(host)) {      this.portToMac.remove(entry.getKey());      return true;    }  }  return false;}  }
class C{  private void checkMeasurer(LineBreakMeasurer measurer,float wrappingWidth,float sequenceAdvance,int endPosition){  do {    TextLayout layout=measurer.nextLayout(wrappingWidth);    float visAdvance=layout.getVisibleAdvance();    if (visAdvance > wrappingWidth) {      throw new Error("layout is too long");    }    if (measurer.getPosition() < endPosition) {      if (visAdvance <= wrappingWidth - sequenceAdvance) {        throw new Error("room for more words on line.  diff=" + (wrappingWidth - sequenceAdvance - visAdvance));      }    }  } while (measurer.getPosition() != endPosition);}  }
class C{  public static NotImplemented parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  NotImplemented object=new NotImplemented();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"NotImplemented".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (NotImplemented)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public KnownArgumentsInfo(@NotNull final Collection<Argument> arguments,final int minArguments,final int maxArguments){  Preconditions.checkArgument(!arguments.isEmpty(),"At least one argument should be provided");  myArguments.addAll(arguments);  myMinArguments=minArguments;  myMaxArguments=maxArguments;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  ipBox.textboxKeyTyped(par1,par2);  maxThreadsBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  private boolean isCharacterEscapable(char c){  return isCharacterQuoteCharacter(c) || isCharacterEscapeCharacter(c);}  }
class C{  public void putFloat(String key,float value){  sharedPreferences.edit().putFloat(key,value).commit();}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec01(){  KeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(ks instanceof RSAMultiPrimePrivateCrtKeySpec);}  }
class C{  public ExtendedPatternFormatter(final String format){  this(format,0);}  }
class C{  public void testCapitalization(){  assertTrue(sh.isDefaultSuggestion("i'm","I'm"));  assertTrue(sh.isDefaultSuggestion("sunday","Sunday"));  assertTrue(sh.isDefaultSuggestion("sundat","Sunday"));}  }
class C{  void compress(int page,byte[] old){  byte[][] array=data;  if (page >= array.length) {    return;  }  byte[] d=array[page];  if (d != old) {    return;  }synchronized (LZF) {    int len=LZF.compress(d,BLOCK_SIZE,BUFFER,0);    if (len <= BLOCK_SIZE) {      d=new byte[len];      System.arraycopy(BUFFER,0,d,0,len);      byte[] o=array[page];      if (o != old) {        return;      }      array[page]=d;    }  }}  }
class C{  public int numObjectsAtLocation(final int x,final int y){  return numObjectsAtLocation(new Int2D(x,y));}  }
class C{  public static double crossTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){  final double dlon12=lon2 - lon1;  final double dlon1Q=lonQ - lon1;  final double dlat1Q=latQ - lat1;  final double clat1=Math.cos(lat1), slat1=MathUtil.cosToSin(lat1,clat1);  final double clatQ=Math.cos(latQ), slatQ=MathUtil.cosToSin(latQ,clatQ);  final double clat2=Math.cos(lat2), slat2=MathUtil.cosToSin(lat2,clat2);  final double slat=Math.sin(dlat1Q * .5);  final double slon=Math.sin(dlon1Q * .5);  final double a=slat * slat + slon * slon * clat1* clatQ;  final double angDist1Q=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12);  final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q);  final double yE=sdlon12 * clat2;  final double yQ=sdlon1Q * clatQ;  final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12;  final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q;  final double crs12=Math.atan2(yE,xE);  final double crs1Q=Math.atan2(yQ,xQ);  return Math.asin(Math.sin(angDist1Q) * Math.sin(crs1Q - crs12));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VERSIONS:  return isSetVersions();}throw new IllegalStateException();}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  panel=new VGenPanel(this,WindowNo,frame);  try {    super.dynInit();    dynInit();    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  void updateForDecoderMfgID(String pMfg,int pMfgID,int pModelID){  String msg="Found mfg " + pMfgID + " ("+ pMfg+ ") version "+ pModelID+ "; no such decoder defined";  log.warn(msg);  _statusLabel.setText(msg);  dTree.clearSelection();  Enumeration<DecoderTreeNode> e=dRoot.breadthFirstEnumeration();  ArrayList<DecoderTreeNode> selected=new ArrayList<DecoderTreeNode>();  selectedPath=new ArrayList<TreePath>();  while (e.hasMoreElements()) {    DecoderTreeNode node=e.nextElement();    if (node.getParent() != null && node.getParent().toString().equals("Root")) {      if (node.toString().equals(pMfg)) {        TreePath path=new TreePath(node.getPath());        dTree.expandPath(path);        dTree.addSelectionPath(path);        dTree.scrollPathToVisible(path);        selectedPath.add(path);        node.setIdentified(true);        selected.add(node);      }    } else {      node.setIdentified(false);    }  }  for (  DecoderTreeNode node : selected) {    node.setIdentified(true);    Enumeration<DecoderTreeNode> es=dRoot.breadthFirstEnumeration();    while (es.hasMoreElements()) {      es.nextElement().setIdentified(true);    }  }  if (showMatched.isSelected()) {    dModel.activateFilter(true);    dModel.reload();  }}  }
class C{  public int[] executeBatch() throws SQLException {  return Util.truncateAndConvertToInt(executeBatchInternal());}  }
class C{  @Override public Phase initialPhase(){  return self;}  }
class C{  public static void main(String... args) throws Exception {  Main.main(args);}  }
class C{  public static boolean removeTextEdit(TextEdit edit,TextEditGroup group,TextEditBasedChange change){  boolean removed=false;  boolean removeChange=false;  TextEdit parentEdit=edit.getParent();  if (parentEdit != null) {    removed|=parentEdit.removeChild(edit);    if (!parentEdit.hasChildren()) {      edit=parentEdit;    }  }  if (group != null) {    removed|=group.removeTextEdit(edit);    if (group.getTextEdits().length == 0) {      if (change != null) {        TextEditBasedChangeGroup[] changeGroups=change.getChangeGroups();        if (changeGroups.length == 1 && changeGroups[0].getTextEditGroup().equals(group)) {          removeChange=true;        }      }    }  }  if (!removeChange && change != null && change instanceof TextFileChange) {    TextFileChange textFileChange=(TextFileChange)change;    if (edit.equals(textFileChange.getEdit())) {      removeChange=true;    }  }  if (removeChange && change != null) {    Change parentChange=change.getParent();    if (parentChange instanceof CompositeChange) {      removed|=((CompositeChange)parentChange).remove(change);    }  }  return removed;}  }
class C{  public String graph() throws Exception {  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graph(); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot be graphed");}  }
class C{  protected void doNotify(final ProceedingJoinPoint pjp,final String rez,final Map<String,String> shopperTemplates,final Map<String,String> adminTemplates){  final CustomerOrder order=(CustomerOrder)pjp.getArgs()[0];  final PaymentGateway gateway=paymentModulesManager.getPaymentGateway(order.getPgLabel(),order.getShop().getCode());  if (gateway == null) {    ShopCodeContext.getLog(this).error("Cannot send payment email because gateway {} is not resolved for {}, could it be disabled?",order.getPgLabel(),order.getShop().getCode());    return;  }  final String shopperTemplate=shopperTemplates.get(rez);  final String adminTemplate=adminTemplates.get(rez);  final HashMap<String,Object> map=new HashMap<String,Object>();  fillParameters(pjp,map);  fillPaymentParameters(pjp,order,gateway,rez,map);  final PaymentGatewayFeature feature=gateway.getPaymentGatewayFeatures();  if (feature.isOnlineGateway() && StringUtils.isNotBlank(shopperTemplate)) {    final HashMap<String,Object> userMap=new HashMap<String,Object>(map);    userMap.put(StandardMessageListener.TEMPLATE_NAME,shopperTemplate);    sendNotification(userMap);  }  if (StringUtils.isNotBlank(adminTemplate)) {    final String adminEmail=order.getShop().getAttributeValueByCode(AttributeNamesKeys.Shop.SHOP_ADMIN_EMAIL);    if (StringUtils.isNotBlank(adminEmail)) {      final HashMap<String,Object> adminMap=new HashMap<String,Object>(map);      adminMap.put(StandardMessageListener.TEMPLATE_NAME,adminTemplate);      adminMap.put(StandardMessageListener.CUSTOMER_EMAIL,adminEmail);      List<CustomerOrderPayment> payments=customerOrderPaymentService.findBy(order.getOrdernum(),null,(String)null,(String)null);      adminMap.put(StandardMessageListener.PAYMENTS,payments);      sendNotification(adminMap);    } else {      ShopCodeContext.getLog(this).warn("Shop admin e-mail is not setup for: {}",order.getShop().getCode());    }  }}  }
class C{  private RequestSecurityTokenResponseType parseFinalGssResponse(Node response) throws ParserException, MalformedTokenException {  RequestSecurityTokenResponseType parsedResponse=responseUnmarshaller.parseStsResponse(response);  new SamlTokenValidator().validateTokenType(parsedResponse);  validateContextId(parsedResponse);  return parsedResponse;}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  protected SAXReader createReader() throws DocumentException {  final SAXReader reader=new SAXReader();  try {    reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);  } catch (  SAXException e) {    throw new DocumentException("Cannot disable DOCTYPE processing",e);  }  return reader;}  }
class C{  public boolean isIsStorageHealthy(){  return isStorageHealthy;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public static boolean CreateSyncAccount(Context context){  Account newAccount=getDummyAccount(context);  AccountManager accountManager=(AccountManager)context.getSystemService(Context.ACCOUNT_SERVICE);  return accountManager.addAccountExplicitly(newAccount,null,null);}  }
class C{  private boolean hasTag(final ITreeNode<CTag> tag){  return (tag == getRootTag()) || BreadthFirstSorter.getSortedList(getRootTag()).contains(tag);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Number acosh(Number a){  return FastMath.acosh(a.doubleValue());}  }
class C{  private MoveOption[] fourthPass(CEntity self,List<Entity> enemy_array){  MoveOption[] move_array=self.pass.values().toArray(new MoveOption[0]);  self.pass.clear();  for (int e=0; e < enemy_array.size(); e++) {    Entity en=enemy_array.get(e);    CEntity enemy=centities.get(en);    if (enemy.canMove()) {      ArrayList<MoveOption> enemy_move_array=enemy.pass.getArray();      ArrayList<MoveOption> to_check=new ArrayList<MoveOption>();      for (      MoveOption element : move_array) {        MoveOption option=null;        to_check.clear();        option=element;        option.setState();        ArrayList<Coords> coord=new ArrayList<Coords>();        Coords back=option.getFinalCoords().translated((option.getFinalFacing() + 3) % 6);        coord.add(back);        coord.add(back.translated((option.getFinalFacing() + 2) % 6));        coord.add(back.translated((option.getFinalFacing() + 4) % 6));        coord.add(option.getFinalCoords().translated((option.getFinalFacing())));        coord.add(option.getFinalCoords().translated((option.getFinalFacing() + 1) % 6));        coord.add(option.getFinalCoords().translated((option.getFinalFacing() + 2) % 6));        coord.add(option.getFinalCoords().translated((option.getFinalFacing() + 4) % 6));        coord.add(option.getFinalCoords().translated((option.getFinalFacing() + 5) % 6));        Iterator<Coords> ci=coord.iterator();        while (ci.hasNext()) {          Coords test=ci.next();          List<MoveOption> c=enemy.findMoves(test,this);          if (c.size() != 0) {            to_check.addAll(c);          }        }        int range=option.getFinalCoords().distance(enemy.current.getFinalCoords());        int compare=0;        if ((enemy.long_range) > (range - Math.max(enemy.jumpMP,enemy.runMP))) {          compare=30;        } else         if (enemy.long_range > range) {          compare=10;        }        double mod=enemies_moved / getEnemyEntities().size();        compare*=(1 + mod);        for (int k=0; (k <= compare) && (k < enemy_move_array.size()); k++) {          if (enemy_move_array.size() < compare) {            to_check.add(enemy_move_array.get(k));          } else {            int value=Compute.randomInt(enemy_move_array.size());            if ((value % 2) == 1) {              to_check.add(enemy_move_array.get(value));            } else {              to_check.add(enemy_move_array.get(k));            }          }        }        Iterator<MoveOption> eo=to_check.iterator();        while (eo.hasNext()) {          MoveOption enemy_option=eo.next();          double max_threat=0;          double max_damage=0;          enemy_option.setState();          int enemy_hit_arc=CEntity.getThreatHitArc(enemy_option.getFinalCoords(),enemy_option.getFinalFacing(),option.getFinalCoords());          int self_hit_arc=CEntity.getThreatHitArc(enemy_option.getFinalCoords(),enemy_option.getFinalFacing(),option.getFinalCoords());          if (enemy_option.isJumping()) {            enemy_hit_arc=Compute.ARC_FORWARD;          }          int[] modifiers=option.getModifiers(enemy_option.getEntity());          if (modifiers[1] != TargetRoll.IMPOSSIBLE) {            self.engaged=true;            if (!enemy_option.isJumping()) {              max_threat=option.getMaxModifiedDamage(enemy_option,modifiers[1],modifiers[MoveOption.DEFENCE_PC]);            } else {              boolean enemyAptGunnery=enemy.getEntity().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY);              max_threat=.8 * enemy.getModifiedDamage((modifiers[MoveOption.DEFENCE_PC] == 1) ? CEntity.TT : ToHitData.SIDE_FRONT,enemy_option.getFinalCoords().distance(option.getFinalCoords()),modifiers[1],enemyAptGunnery);            }            max_threat=self.getThreatUtility(max_threat,self_hit_arc);          }          if (modifiers[0] != TargetRoll.IMPOSSIBLE) {            self.engaged=true;            max_damage=enemy_option.getMaxModifiedDamage(option,modifiers[0],modifiers[MoveOption.ATTACK_PC]);            max_damage=enemy.getThreatUtility(max_damage,enemy_hit_arc);            if (option.isPhysical) {              if (centities.get(option.getPhysicalTargetId()).getEntity().getId() == enemy.getEntity().getId()) {                max_damage=option.getDamage(enemy);              } else {                max_damage=0;              }            }          }          MoveOption.DamageInfo di=option.getDamageInfo(enemy,true);          di.max_threat=Math.max(max_threat,di.max_threat);          di.min_damage=Math.min(di.min_damage,max_damage);          if ((max_threat - max_damage) > (di.threat - di.damage)) {            di.threat=max_threat;            di.damage=max_damage;            if (debug) {              option.tv.add(max_threat + " Spec Threat " + e+ "\n");              option.tv.add(max_damage + " Spec Damage " + e+ "\n");            }          }        }        option.damage=0;        option.threat=0;        for (        CEntity cen : option.damageInfos.keySet()) {          MoveOption.DamageInfo di=option.getDamageInfo(cen,true);          di.min_damage/=cen.strategy.target;          di.damage/=cen.strategy.target;          option.damage+=(di.min_damage + di.damage) / 2;          option.threat=Math.max(option.threat,di.max_threat + di.threat) / 2;          di.threat=(di.max_threat + (2 * di.threat)) / 3;        }      }      enemy.current.setState();    }    self.current.setState();  }  return move_array;}  }
class C{  public BufferedFile(File file,String mode,int bufferSize) throws IOException {  this.randomAccessFile=new RandomAccessFile(file,mode);  this.bufferPointer.init(bufferSize);  this.fileOffset=0;}  }
class C{  protected synchronized void waitingExperiment(int expNum){  m_subExpQueue.push(new Integer(expNum));}  }
class C{  private static void addDefaultFields(SortedSet<PdxField> myFields,SortedSet<PdxField> otherFields){  for (  PdxField f : otherFields) {    if (!myFields.contains(f)) {      myFields.add(new DefaultPdxField(f));    }  }}  }
class C{  private void ib2(int a,int b,int c,int d){  int t1=b ^ d;  int t2=~t1;  int t3=a ^ c;  int t4=c ^ t1;  int t5=b & t4;  X0=t3 ^ t5;  int t7=a | t2;  int t8=d ^ t7;  int t9=t3 | t8;  X3=t1 ^ t9;  int t11=~t4;  int t12=X0 | X3;  X1=t11 ^ t12;  X2=(d & t11) ^ (t3 ^ t12);}  }
class C{  private void handleHtmlDoExport(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String pageTitle=servletText.pageTitleExportNotebook();  final String csrft=requestAndResponse.getParameter("csrft");  final String id=requestAndResponse.getParameter("id");  String format=requestAndResponse.getParameter("format");  if (format == null || (!format.equals("markdown") && !format.equals("rtf") && !format.equals("html"))) {    format="html";  }  String htmlStructure=requestAndResponse.getParameter("htmlStructure");  if (htmlStructure == null || (!htmlStructure.equals("nestedLists") && !htmlStructure.equals("paragraphs"))) {    htmlStructure="paragraphs";  }  final boolean includeQuotations=getCheckBoxValue(requestAndResponse,"includeQuotations");  final boolean includeReferencesSection=getCheckBoxValue(requestAndResponse,"includeReferencesSection");  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,pageTitle,false).setPaneId("export");  if (isTheCsrftWrong(requestAndResponse,csrft)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorRequiresSignIn(false));    pageWrapper.addFooter();  } else   if (!isUserSignedIn(requestAndResponse)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorRequiresSignIn(false));    pageWrapper.addFooter();  } else   if (isUsersAccountClosed(requestAndResponse)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorAccountIsClosed());    pageWrapper.addFooter();  } else {    final StringBuilder result=new StringBuilder();    try {      final String userId=getEffectiveUserId(requestAndResponse);      final User user=dbLogic.getUserById(userId);      if (user != null) {        Entry entry=dbLogic.getEntryById(id);        if (entry != null && !entry.getType("").equals(DbLogic.Constants.notebook)) {          entry=null;        }        if (entry == null) {          pageWrapper.addHeader();          requestAndResponse.print(servletText.errorNotebookCouldNotBeFound());          pageWrapper.addFooter();          return;        }        boolean userCanSee=false;        Entry root=null;        if (entry != null) {          root=dbLogic.getEntryById(entry.getRootId());          userCanSee=dbLogic.canUserSeeEntry(user,entry,isUserAnAdmin(requestAndResponse));        }        if (!userCanSee) {          pageWrapper.addHeader();          requestAndResponse.print(servletText.errorMayNotSeeNotebook());          pageWrapper.addFooter();          return;        }        String extension=null;        if (format.equals("html")) {          getNotebookHtmlForExport(result,entry,root,htmlStructure.equals("nestedLists"),includeQuotations,includeReferencesSection);          extension="html";        } else         if (format.equals("markdown")) {          getNotebookMarkdownForExport(result,entry,root,includeQuotations,includeReferencesSection);          extension="md";          requestAndResponse.setResponseContentTypeText();        } else         if (format.equals("rtf")) {          getNotebookRtfForExport(result,entry,root,includeQuotations,includeReferencesSection);          extension="rtf";          requestAndResponse.setResponseContentTypeRtf();        }        requestAndResponse.response.setHeader("Content-Disposition","attachment; filename=crushpaper-export-" + user.getUserName() + "-"+ formatDateTimeForFileName(System.currentTimeMillis())+ "."+ extension);      }      dbLogic.commit();    } catch (    final PersistenceException e) {    }    requestAndResponse.print(result.toString());  }}  }
class C{  public void scrollBy(int deltaX){  int scrollX=getScrollX() + deltaX;  if (scrollX < 0) {    scrollX=0;  }  int maxWidth=effectiveWidth * (zoomLevel - 1);  if (scrollX > maxWidth) {    scrollX=maxWidth;  }  scrollTo(scrollX,0);}  }
class C{  public Coordinate_ createCoordinate_(){  Coordinate_Impl coordinate_=new Coordinate_Impl();  return coordinate_;}  }
class C{  public KeyUsage(byte[] encoding) throws IOException {  super(encoding);  this.keyUsage=(boolean[])ASN1.decode(encoding);}  }
class C{  public static BucketLoggingResult parseBucketLogging(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    BucketLoggingResult result=new BucketLoggingResult();    if (root.getChild("LoggingEnabled") != null) {      result.setTargetBucket(root.getChild("LoggingEnabled").getChildText("TargetBucket"));    }    if (root.getChild("LoggingEnabled") != null) {      result.setTargetPrefix(root.getChild("LoggingEnabled").getChildText("TargetPrefix"));    }    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  private void persistCurrentProjectState(Collection<PersistenceComponent> persistenceComponents){  final CurrentProject currentProject=appContext.getCurrentProject();  if (currentProject == null) {    return;  }  ProjectDescriptor descriptor=currentProject.getRootProject();  final String projectPath=descriptor.getPath();  final String fullProjectPath="/" + descriptor.getWorkspaceName() + projectPath;  final ProjectState projectState=dtoFactory.createDto(ProjectState.class);  appState.getProjects().put(fullProjectPath,projectState);  final List<ActionDescriptor> actions=projectState.getActions();  for (  PersistenceComponent persistenceComponent : persistenceComponents) {    actions.addAll(persistenceComponent.getActions(projectPath));  }}  }
class C{  public boolean isSetPutResponse(){  return this.putResponse != null;}  }
class C{  public SAXException(){  super();  this.exception=null;}  }
class C{  public static int findFirstNotOf(String container,String chars,int begin){  for (int i=begin; i < container.length() && i >= 0; ++i)   if (!chars.contains("" + container.charAt(i)))   return i;  return -1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double solvePolynomial(double x,double[] coefficients){  double value=coefficients[0];  for (int i=1; i < coefficients.length; i++) {    value+=coefficients[i] * Math.pow(x,i);  }  return value;}  }
class C{  private void createField(final FormObject formObject){  if (ExternalHandlers.isULCPresent() && formFactory.getType() == FormFactory.SWING) {    return;  }  final Integer widgetType;  final Object retComponent=null;  final int formType=formObject.getNameAsConstant(PdfDictionary.FT);  final int formFactoryType=formFactory.getType();  storeSignatures(formObject,formType);  if (formObject.getDictionary(PdfDictionary.Popup) != null) {    formObject.setActionFlag(FormObject.POPUP);  }  final boolean readOnly;  final boolean required;  final boolean noexport;  final boolean[] flags=formObject.getFieldFlags();  if (flags != null) {    readOnly=flags[FormObject.READONLY_ID];    required=flags[FormObject.REQUIRED_ID];    noexport=flags[FormObject.NOEXPORT_ID];  }  if (!ExternalHandlers.isXFAPresent() && (formFactoryType == FormFactory.HTML || formFactoryType == FormFactory.SVG)) {    widgetType=FormFactory.ANNOTATION;  } else   if (formType == PdfDictionary.Btn) {    boolean isPushButton=false, isRadio=false;    if (flags != null) {      isPushButton=flags[FormObject.PUSHBUTTON_ID];      isRadio=flags[FormObject.RADIO_ID];    }    if (isPushButton) {      widgetType=FormFactory.PUSHBUTTON;    } else     if (isRadio) {      widgetType=FormFactory.RADIOBUTTON;    } else {      widgetType=FormFactory.CHECKBOXBUTTON;    }  } else {switch (formType) {case PdfDictionary.Tx:      boolean isMultiline=false, hasPassword=false;    if (flags != null) {      isMultiline=flags[FormObject.MULTILINE_ID];      hasPassword=flags[FormObject.PASSWORD_ID];    }  if (isMultiline) {    if (hasPassword) {      widgetType=FormFactory.MULTILINEPASSWORD;    } else {      widgetType=FormFactory.MULTILINETEXT;    }  } else {    if (hasPassword) {      widgetType=FormFactory.SINGLELINEPASSWORD;    } else {      widgetType=FormFactory.SINGLELINETEXT;    }  }break;case PdfDictionary.Ch:boolean isCombo=false;if (flags != null) {isCombo=flags[FormObject.COMBO_ID];}if (isCombo) {widgetType=FormFactory.COMBOBOX;} else {widgetType=FormFactory.LIST;}break;case PdfDictionary.Sig:widgetType=FormFactory.SIGNATURE;break;default :widgetType=FormFactory.ANNOTATION;break;}}formObject.setFormType(widgetType);if (formFactory.getType() == FormFactory.HTML || formFactory.getType() == FormFactory.SVG) {compData.checkGUIObjectResolved(formObject);} else if (retComponent != null && formFactory.getType() != FormFactory.SWING) {formObject.setGUIComponent(retComponent,formFactory.getType());compData.setGUIComp(formObject,retComponent);}}  }
class C{  private List<ServiceStat> querySingleEntity(StatCollectionContext ctx) throws RuntimeFaultFaultMsg {  List<PerfEntityMetricBase> metrics=getVimPort().queryPerf(PERF_MGR_MOREF,Collections.singletonList(ctx.getSpec()));  List<ServiceStat> res=new ArrayList<>();  if (metrics.isEmpty()) {    return Collections.emptyList();  }  PerfEntityMetric m=(PerfEntityMetric)metrics.get(0);  for (  PerfMetricSeries pms : m.getValue()) {    PerfMetricId metricId=pms.getId();    PerfMetricIntSeries series=(PerfMetricIntSeries)pms;    SamplesAggregator factory=ctx.getFactory(metricId.getCounterId());    PerfCounterInfo counter=this.perfCounterLookup.getCounterByKey(metricId.getCounterId());    ServiceStat stat=factory.createStat(counter,m.getSampleInfo(),series.getValue());    if (stat != null) {      res.add(stat);    }  }  return res;}  }
class C{  public void markAllFailedUpdate(){  for (  EdxLocalParseChannel pc : this) {    pc.setOperationFailed(true);  }}  }
class C{  public Collection<RTMPConnection> removeConnections(){  rtmpConnections.clear();  return null;}  }
class C{  private InputStream startExternal(String fileName){  InputStream result=null;  try {    String extension=getExtension(fileName);    String command=externalSupport.get(extension).replace(FILEPLACEHOLDER,fileName);    Process externalProcess=Runtime.getRuntime().exec(command);    result=externalProcess.getInputStream();  } catch (  IOException ignore) {  }  return result;}  }
class C{  protected CCAnimation(String name,float delay){  this(name,delay,(ArrayList<CCSpriteFrame>)null);}  }
class C{  public void test(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix07.class,args);}  }
class C{  public IllegalArgumentException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  @Override protected void handleChildChange(PropertyChangeEvent evt){  super.handleChildChange(evt);}  }
class C{  private void addEntry(ContactsExampleParameters parameters) throws IOException, ServiceException {  if (parameters.isGroupFeed()) {    ContactGroupEntry addedGroup=service.insert(feedUrl,buildGroup(parameters));    printGroup(addedGroup);    lastAddedId=addedGroup.getId();  } else {    ContactEntry addedContact=service.insert(feedUrl,buildContact(parameters));    printContact(addedContact);    lastAddedId=addedContact.getId();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void add(PatternReference pr){  patterns.add(pr);}  }
class C{  public static CCriteriumTreeNode findNode(final CCriteriumTreeNode node,final ICriterium criterium){  if (node.getCriterium() == criterium) {    return node;  }  for (  final CCriteriumTreeNode child : node.getChildren()) {    final CCriteriumTreeNode childNode=findNode(child,criterium);    if (childNode != null) {      return childNode;    }  }  return null;}  }
class C{  public void addRequestProcessor(RequestProcessor rp){  requestProcessors.add(rp);}  }
class C{  public static String createLambdaRole(){  final String ROLE_NAME="hello-swf-lambda-role";  System.out.println("** Attempting to create Lambda role: " + ROLE_NAME);  final String ROLE_POLICY="{" + "  \"Version\": \"2012-10-17\"," + "  \"Statement\": [{"+ "    \"Effect\": \"Allow\","+ "    \"Action\": ["+ "      \"lambda:InvokeFunction\""+ "    ],"+ "    \"Resource\": [\"*\"]"+ "  }]"+ "}";  final String SWF_LAMBDA_TRUST="{" + "  \"Version\": \"2012-10-17\"," + "  \"Statement\": ["+ "    {"+ "      \"Sid\": \"\","+ "      \"Effect\": \"Allow\","+ "      \"Principal\": {"+ "        \"Service\": ["+ "          \"lambda.amazonaws.com\","+ "          \"swf.amazonaws.com\""+ "        ]"+ "      },"+ "      \"Action\": \"sts:AssumeRole\""+ "    }"+ "  ]"+ "}";  AmazonIdentityManagement iam=AmazonIdentityManagementClientBuilder.defaultClient();  CreateRoleRequest request=new CreateRoleRequest().withRoleName(ROLE_NAME).withAssumeRolePolicyDocument(SWF_LAMBDA_TRUST);  CreateRoleResult result=null;  String role_arn=null;  try {    result=iam.createRole(request);    role_arn=result.getRole().getArn();  } catch (  EntityAlreadyExistsException e) {    System.out.println("** IAM Role already exists!");    role_arn=iam.getRole(new GetRoleRequest().withRoleName(ROLE_NAME)).getRole().getArn();  }  return role_arn;}  }
class C{  private boolean createOrder(MDistributionListLine dll){  MBPartner bp=new MBPartner(getCtx(),dll.getC_BPartner_ID(),get_TrxName());  if (bp.get_ID() == 0)   throw new IllegalArgumentException("Business Partner not found - C_BPartner_ID=" + dll.getC_BPartner_ID());  MOrder order=m_singleOrder;  if (!p_IsTest && order == null) {    order=new MOrder(getCtx(),0,get_TrxName());    order.setIsSOTrx(true);    order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_Standard);    order.setBPartner(bp);    if (dll.getC_BPartner_Location_ID() != 0)     order.setC_BPartner_Location_ID(dll.getC_BPartner_Location_ID());    if (!order.save()) {      log.log(Level.SEVERE,"Order not saved");      return false;    }  }  BigDecimal ratio=dll.getRatio();  BigDecimal qty=p_Qty.multiply(ratio);  if (qty.compareTo(Env.ZERO) != 0)   qty=qty.divide(m_dl.getRatioTotal(),m_product.getUOMPrecision(),BigDecimal.ROUND_HALF_UP);  BigDecimal minQty=dll.getMinQty();  if (qty.compareTo(minQty) < 0)   qty=minQty;  m_totalQty=m_totalQty.add(qty);  if (p_IsTest) {    addLog(0,null,qty,bp.getName());    return false;  }  MOrderLine line=new MOrderLine(order);  line.setC_BPartner_ID(dll.getC_BPartner_ID());  if (dll.getC_BPartner_Location_ID() != 0)   line.setC_BPartner_Location_ID(dll.getC_BPartner_Location_ID());  line.setM_Product_ID(p_M_Product_ID,true);  line.setQty(qty);  line.setPrice();  if (!line.save()) {    log.log(Level.SEVERE,"OrderLine not saved");    return false;  }  addLog(0,null,qty,order.getDocumentNo() + ": " + bp.getName());  return true;}  }
class C{  protected Namespace_Impl(){  super();}  }
class C{  public void testComputeSignificanceDoesntAlterAverage() throws Exception {  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  String kraskov_K="4";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKraskov.PROP_KRASKOV_ALG_NUM,"2");  teCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testComputeSignificanceDoesntAlterAverage(teCalc,100,1);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Deprecated public void checkTotalDelayUsingAlternativeMethod(){  EventsManager em=EventsUtils.createEventsManager();  CongestionHandlerImplV3 implV3=new CongestionHandlerImplV3(em,this.scenario);  MatsimEventsReader eventsReader=new MatsimEventsReader(em);  em.addHandler(implV3);  eventsReader.readFile(this.eventsFile);  if (implV3.getTotalDelay() / 3600. != this.congestionHandler.getTotalDelayInHours())   throw new RuntimeException("Total Delays are not equal using two methods; values are " + implV3.getTotalDelay() / 3600 + "," + this.congestionHandler.getTotalDelayInHours());}  }
class C{  @NonNull public static ApiService createApiService(){  OkLogInterceptor okLogInterceptor=OkLogInterceptor.builder().build();  HttpLoggingInterceptor httpLoggingInterceptor=createHttpLoggingInterceptor();  OkHttpClient okHttpClient=createOkHttpClient(okLogInterceptor,httpLoggingInterceptor);  return new Retrofit.Builder().baseUrl(Constants.ENDPOINT).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.createWithScheduler(Schedulers.io())).client(okHttpClient).build().create(ApiService.class);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setHasOptionsMenu(true);  Activity a=getActivity();  NfcAdapter nfc=NfcAdapter.getDefaultAdapter(a);  if (nfc != null) {    Log.w(TAG,"NFC available. Setting Beam Push URI callback");    nfc.setBeamPushUrisCallback(this,a);  } else {    Log.w(TAG,"NFC is not available");  }}  }
class C{  public String text(){  return "";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getAutoConvertDest();}  }
class C{  public void pln(Object o) throws IOException {  p(o.toString());  pln();}  }
class C{  private boolean isAllowedByUserSettingsLocked(String provider,int uid){  if (UserHandle.getUserId(uid) != mCurrentUserId && !isUidALocationProvider(uid)) {    return false;  }  return isAllowedByCurrentUserSettingsLocked(provider);}  }
class C{  @Inject public DefaultNamespaceService(AuditService auditService,SystemConfiguration _sysConfig){  super(auditService,_sysConfig);}  }
class C{  private Map<String,Long> computeMoverCapacity(Map<String,List<String>> nasFsMountMap,Map<String,Long> fsCapMap,Map<String,Map<String,Long>> snapCapFsMap){  Map<String,Long> snapCapMap=new HashMap<String,Long>();  for (  Map<String,Long> snapCapEntry : snapCapFsMap.values()) {    snapCapMap.putAll(snapCapEntry);  }  Map<String,Long> moverCapacityMap=new HashMap<String,Long>();  for (  Entry<String,List<String>> eachNas : nasFsMountMap.entrySet()) {    _logger.info(" mover {} has Filestem or Snapshot mounts {} ",eachNas.getKey(),eachNas.getValue().size());    Long moverTotalCapacity=0L;    for (    String fsNativeId : eachNas.getValue()) {      if (snapCapMap.get(fsNativeId) != null) {        moverTotalCapacity=moverTotalCapacity + snapCapMap.get(fsNativeId);      } else       if (fsCapMap.get(fsNativeId) != null) {        moverTotalCapacity=moverTotalCapacity + fsCapMap.get(fsNativeId);      }    }    moverCapacityMap.put(eachNas.getKey(),moverTotalCapacity);  }  return moverCapacityMap;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(byteArrayToString(cpu,true));  sb.append(" ");  sb.append(byteArrayToString(os,true));  return sb.toString();}  }
class C{  public Sub4(){  super("sub4",4);}  }
class C{  public static Set<String> flattenPaths(Object value){  Set<String> paths=new HashSet<>();  if (value == null) {    return paths;  } else   if (CWLSchemaHelper.isFileFromValue(value)) {    paths.add(getPath(value));    List<Map<String,Object>> secondaryFiles=getSecondaryFiles(value);    if (secondaryFiles != null) {      paths.addAll(flattenPaths(secondaryFiles));    }    return paths;  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      paths.addAll(flattenPaths(subvalue));    }    return paths;  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      paths.addAll(flattenPaths(subvalue));    }  }  return paths;}  }
class C{  public final MutableDouble3D zero(){  this.x=0;  this.y=0;  this.z=0;  return this;}  }
class C{  private void initializeISO(){  initializeISO(ISOConstants.VOLUME_IDENTIFIER);}  }
class C{  public PublishedId_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_publishedIdType=jcas.getRequiredFeatureDE(casType,"publishedIdType","uima.cas.String",featOkTst);  casFeatCode_publishedIdType=(null == casFeat_publishedIdType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_publishedIdType).getCode();}  }
class C{  public static org.oscm.vo.VOLocalizedText convertToApi(org.oscm.internal.vo.VOLocalizedText oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOLocalizedText newVO=new org.oscm.vo.VOLocalizedText();  newVO.setLocale(oldVO.getLocale());  newVO.setText(oldVO.getText());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  StringBuffer sbUrl=new StringBuffer();  try {    sbUrl.append(WebAuthenticationHelper.getWebAuthDesconectURL(request));    request.getSession().invalidate();    response.sendRedirect(sbUrl.toString());    return null;  } catch (  Exception e) {    logger.error("Error obteniendo datos del usuario.");    return mapping.findForward(GLOBAL_FORWARD_ERROR);  }}  }
class C{  public boolean isPlotable(double lat,double lon){  lat=normalizeLatitude(ProjMath.degToRad(lat));  lon=wrapLongitude(ProjMath.degToRad(lon));  return hemisphere_clip(centerY,centerX,lat,lon);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  static int[] calculateSerial(int[][] sizes,ResizeConstraint[] resConstr,Float[] defPushWeights,int startSizeType,int bounds){  float[] lengths=new float[sizes.length];  float usedLength=0.0f;  for (int i=0; i < sizes.length; i++) {    if (sizes[i] != null) {      float len=sizes[i][startSizeType] != NOT_SET ? sizes[i][startSizeType] : 0;      int newSizeBounded=getBrokenBoundary(len,sizes[i][MIN],sizes[i][MAX]);      if (newSizeBounded != NOT_SET)       len=newSizeBounded;      usedLength+=len;      lengths[i]=len;    }  }  int useLengthI=MathUtil.round(usedLength);  if (useLengthI != bounds && resConstr != null) {    boolean isGrow=useLengthI < bounds;    TreeSet<Integer> prioList=new TreeSet<Integer>();    for (int i=0; i < sizes.length; i++) {      ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);      if (resC != null)       prioList.add(new Integer(isGrow ? resC.growPrio : resC.shrinkPrio));    }    Integer[] prioIntegers=prioList.toArray(new Integer[prioList.size()]);    for (int force=0; force <= ((isGrow && defPushWeights != null) ? 1 : 0); force++) {      for (int pr=prioIntegers.length - 1; pr >= 0; pr--) {        int curPrio=prioIntegers[pr];        float totWeight=0f;        Float[] resizeWeight=new Float[sizes.length];        for (int i=0; i < sizes.length; i++) {          if (sizes[i] == null)           continue;          ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);          if (resC != null) {            int prio=isGrow ? resC.growPrio : resC.shrinkPrio;            if (curPrio == prio) {              if (isGrow) {                resizeWeight[i]=(force == 0 || resC.grow != null) ? resC.grow : (defPushWeights[i < defPushWeights.length ? i : defPushWeights.length - 1]);              } else {                resizeWeight[i]=resC.shrink;              }              if (resizeWeight[i] != null)               totWeight+=resizeWeight[i];            }          }        }        if (totWeight > 0f) {          boolean hit;          do {            float toChange=bounds - usedLength;            hit=false;            float changedWeight=0f;            for (int i=0; i < sizes.length && totWeight > 0.0001f; i++) {              Float weight=resizeWeight[i];              if (weight != null) {                float sizeDelta=toChange * weight / totWeight;                float newSize=lengths[i] + sizeDelta;                if (sizes[i] != null) {                  int newSizeBounded=getBrokenBoundary(newSize,sizes[i][MIN],sizes[i][MAX]);                  if (newSizeBounded != NOT_SET) {                    resizeWeight[i]=null;                    hit=true;                    changedWeight+=weight;                    newSize=newSizeBounded;                    sizeDelta=newSize - lengths[i];                  }                }                lengths[i]=newSize;                usedLength+=sizeDelta;              }            }            totWeight-=changedWeight;          } while (hit);        }      }    }  }  return roundSizes(lengths);}  }
class C{  public static void main(String[] args){  Random r=new Random();  UnivariateEqualFrequencyHistogramEstimator e=new UnivariateEqualFrequencyHistogramEstimator();  System.out.println(e);  double sum=0;  for (int i=0; i < 1000; i++) {    sum+=Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));  }  System.out.println("Approximate integral: " + 10.0 * sum / 1000);  for (int i=0; i < 1000; i++) {    e.addValue(0.1 * r.nextGaussian() - 3,1);    e.addValue(r.nextGaussian() * 0.25,3);  }  sum=0;  int points=10000000;  for (int i=0; i < points; i++) {    double value=r.nextDouble() * 20.0 - 10.0;    sum+=Math.exp(e.logDensity(value));  }  System.out.println(e);  System.out.println("Approximate integral: " + 20.0 * sum / points);  double[][] Intervals=e.predictIntervals(0.9);  System.out.println("Printing histogram intervals ---------------------");  for (  double[] interval : Intervals) {    System.out.println("Left: " + interval[0] + "\t Right: "+ interval[1]);  }  System.out.println("Finished histogram printing intervals ---------------------");  double Covered=0;  for (int i=0; i < 1000; i++) {    double val=-1;    if (r.nextDouble() < 0.25) {      val=0.1 * r.nextGaussian() - 3.0;    } else {      val=r.nextGaussian() * 0.25;    }    for (    double[] interval : Intervals) {      if (val >= interval[0] && val <= interval[1]) {        Covered++;        break;      }    }  }  System.out.println("Coverage at 0.9 level for histogram intervals: " + Covered / 1000);  for (int j=1; j < 5; j++) {    double numTrain=Math.pow(10,j);    System.out.println("Number of training cases: " + numTrain);    UnivariateEqualFrequencyHistogramEstimator eHistogram=new UnivariateEqualFrequencyHistogramEstimator();    UnivariateNormalEstimator eNormal=new UnivariateNormalEstimator();    for (int i=0; i < numTrain; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      eHistogram.addValue(val,1);      eNormal.addValue(val,1);    }    sum=0;    points=10000000;    for (int i=0; i < points; i++) {      double value=r.nextDouble() * 20.0 - 10.0;      sum+=Math.exp(eHistogram.logDensity(value));    }    System.out.println(eHistogram);    System.out.println("Approximate integral for histogram estimator: " + 20.0 * sum / points);    double loglikelihoodHistogram=0, loglikelihoodNormal=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      loglikelihoodHistogram+=eHistogram.logDensity(val);      loglikelihoodNormal+=eNormal.logDensity(val);    }    System.out.println("Loglikelihood for histogram estimator: " + loglikelihoodHistogram / 1000);    System.out.println("Loglikelihood for normal estimator: " + loglikelihoodNormal / 1000);    double[][] histogramIntervals=eHistogram.predictIntervals(0.95);    double[][] normalIntervals=eNormal.predictIntervals(0.95);    System.out.println("Printing histogram intervals ---------------------");    for (    double[] histogramInterval : histogramIntervals) {      System.out.println("Left: " + histogramInterval[0] + "\t Right: "+ histogramInterval[1]);    }    System.out.println("Finished histogram printing intervals ---------------------");    System.out.println("Printing normal intervals ---------------------");    for (    double[] normalInterval : normalIntervals) {      System.out.println("Left: " + normalInterval[0] + "\t Right: "+ normalInterval[1]);    }    System.out.println("Finished normal printing intervals ---------------------");    double histogramCovered=0;    double normalCovered=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      for (      double[] histogramInterval : histogramIntervals) {        if (val >= histogramInterval[0] && val <= histogramInterval[1]) {          histogramCovered++;          break;        }      }      for (      double[] normalInterval : normalIntervals) {        if (val >= normalInterval[0] && val <= normalInterval[1]) {          normalCovered++;          break;        }      }    }    System.out.println("Coverage at 0.95 level for histogram intervals: " + histogramCovered / 1000);    System.out.println("Coverage at 0.95 level for normal intervals: " + normalCovered / 1000);    histogramIntervals=eHistogram.predictIntervals(0.8);    normalIntervals=eNormal.predictIntervals(0.8);    histogramCovered=0;    normalCovered=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      for (      double[] histogramInterval : histogramIntervals) {        if (val >= histogramInterval[0] && val <= histogramInterval[1]) {          histogramCovered++;          break;        }      }      for (      double[] normalInterval : normalIntervals) {        if (val >= normalInterval[0] && val <= normalInterval[1]) {          normalCovered++;          break;        }      }    }    System.out.println("Coverage at 0.8 level for histogram intervals: " + histogramCovered / 1000);    System.out.println("Coverage at 0.8 level for normal intervals: " + normalCovered / 1000);  }}  }
class C{  public SourceModel sourceForFile(File path){  Iterator<SourceModel> iter=sourceList.iterator();  SourceModel sm=null;  while (iter.hasNext()) {    SourceModel candidate=iter.next();    if (candidate.fileName().equals(path)) {      sm=candidate;      iter.remove();      break;    }  }  if (sm == null && path.exists()) {    sm=new SourceModel(env,path);  }  if (sm != null) {    sourceList.add(0,sm);  }  return sm;}  }
class C{  @Override public void mousePressed(MouseEvent evt){  int pos=(slider.getOrientation() == JSlider.HORIZONTAL) ? evt.getX() : evt.getY();  int loc=getLocationForValue(getSnappedValue(evt));  this.offset=(loc < 0) ? 0 : pos - loc;}  }
class C{  public static String convertXMLCharEntity(String charEntity){  return convertCharEntity(charEntity,false,null);}  }
class C{  @Nullable public static HKey psiKey(@NotNull PsiMethod psiMethod,@NotNull Direction direction,@NotNull MessageDigest md){  final PsiClass psiClass=PsiTreeUtil.getParentOfType(psiMethod,PsiClass.class,false);  if (psiClass == null) {    return null;  }  byte[] classDigest=psiClassDigest(psiClass,md);  if (classDigest == null) {    return null;  }  byte[] sigDigest=methodDigest(psiMethod,md);  if (sigDigest == null) {    return null;  }  byte[] digest=new byte[HASH_SIZE];  System.arraycopy(classDigest,0,digest,0,CLASS_HASH_SIZE);  System.arraycopy(sigDigest,0,digest,CLASS_HASH_SIZE,SIGNATURE_HASH_SIZE);  return new HKey(digest,mkDirectionKey(direction),true);}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.679 -0500",hash_original_method="7C74580464CD8E195E3FB8BED8B93C53",hash_generated_method="7C74580464CD8E195E3FB8BED8B93C53") void clearConnectionLocked(){  mCurrentTextBoxAttribute=null;  mServedInputConnection=null;}  }
class C{  public MaterialChip(){  super(Document.get().createDivElement(),"chip");}  }
class C{  private static String postFormatCurrency(String currency){  if (sPostFormatCurrency) {    return currency.replace(",00",",-").replace(".00",".-");  } else {    return currency;  }}  }
class C{  public static <A>MonoTSeq<A> of(final AnyMSeq<Mono<A>> monads){  return new MonoTSeq<>(monads);}  }
class C{  public void appendLine(final Line line){  if (this.lineTail == null) {    this.lines=this.lineTail=line;  } else {    this.lineTail.nextEmpty=line.isEmpty;    line.prevEmpty=this.lineTail.isEmpty;    line.previous=this.lineTail;    this.lineTail.next=line;    this.lineTail=line;  }}  }
class C{  protected boolean checkNodeAddress(int address){  return (address >= 0) && (address < 128);}  }
class C{  protected static int toDigit(final char ch,final int index) throws IllegalArgumentException {  final int digit=Character.digit(ch,16);  if (digit == -1) {    throw new IllegalArgumentException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  public CompilationPlan createCompilationPlan(NormalMethod method,int optLevel,InstrumentationPlan instPlan){  return new CompilationPlan(method,_optPlans[optLevel],null,_options[optLevel]);}  }
class C{  public byte[] write(){  try {    final AllocBlock fb=m_allocBlocks.get(0);    if (s_islogTrace)     log.trace("writing allocator " + m_index + " for "+ getStartAddr()+ " with "+ fb.m_live[0]);    final byte[] buf=new byte[1024];    final DataOutputStream str=new DataOutputStream(new FixedOutputStream(buf));    final boolean protectTransients=m_sessionActive || m_store.isSessionProtected();    try {      str.writeInt(m_size);      assert m_sessionActive || m_freeTransients == transientbits();      final Iterator<AllocBlock> iter=m_allocBlocks.iterator();      while (iter.hasNext()) {        final AllocBlock block=iter.next();        str.writeInt(block.m_addr);        for (int i=0; i < m_bitSize; i++) {          str.writeInt(block.m_live[i]);        }        if (!protectTransients) {          assert m_sessionFrees.intValue() == 0;          block.releaseCommitWrites(m_store.getWriteCacheService());        }      }      final int chk=ChecksumUtility.getCHK().checksum(buf,str.size());      str.writeInt(chk);    }  finally {      str.close();    }    if (s_islogDebug)     checkBits();    return buf;  } catch (  IOException e) {    throw new StorageTerminalError("Error on write",e);  }}  }
class C{  private ReRootedNode createInternalNode(Node source,List<? extends Node> children){  ReRootedNode node=new ReRootedNode(source,children);  for (  Node child : children) {    ((ReRootedNode)child).setParent(node);  }  internalNodes.add(node);  rootNode=node;  return node;}  }
class C{  public final void lazySet(double newValue){  set(newValue);}  }
class C{  public StatementPattern(Scope scope,Var subject,Var predicate,Var object){  this(scope,subject,predicate,object,null);}  }
class C{  static boolean addPropertyToJsonString(StringBuilder result,Object value,boolean addedAnyYet,String key,int indentationLevel){  appendIndentation(indentationLevel,result);  return addPropertyToJsonString(result,value,addedAnyYet,key);}  }
class C{  public static DatagramConnection createDatagramConnection(){  return new AndroidDatagramConnection();}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public void addPackageLevelLiteral(Package pkg,Sequence seq){  if (packageLiterals == null) {    packageLiterals=new PackageLiterals();  }  packageLiterals.addSequence(pkg,seq);}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Inject public NotificationContainer(Resources resources){  this.resources=resources;  nGrid=new Grid(0,1);  nGrid.setStyleName(resources.notificationCss().notificationPanelContainer());  add(nGrid);}  }
class C{  public void parseFile(String osmFile) throws FileNotFoundException {  File file=new File(osmFile);  if (!file.exists()) {    throw new FileNotFoundException("Could not find OSM file " + osmFile);  }  CombinedOsmSink combinedOsmSink=new CombinedOsmSink(this.outputCRS,this.osmLandUseToMatsimTypeMap,this.osmBuildingToMatsimTypeMap,this.osmAmenityToMatsimTypeMap,this.osmLeisureToMatsimTypeMap,this.osmTourismToMatsimTypeMap,this.unmannedEntitiesList,this.buildingTypeFromVicinityRange);  XmlReader xmlReader=new XmlReader(file,false,CompressionMethod.None);  xmlReader.setSink(combinedOsmSink);  xmlReader.run();  this.facilities=combinedOsmSink.getFacilities();  this.facilityAttributes=combinedOsmSink.getFacilityAttributes();}  }
class C{  private void completeCommits(long previousCommitIndex,long commitIndex){  for (long i=previousCommitIndex + 1; i <= commitIndex; i++) {    CompletableFuture<Long> future=appendFutures.remove(i);    if (future != null) {      future.complete(i);    }  }}  }
class C{  public static void populateTradeOrderfill(TradeOrderfill execution,TradeOrderfill tradeOrderfill) throws ParseException, IOException {  tradeOrderfill.setTime(execution.getTime());  tradeOrderfill.setExchange(execution.getExchange());  tradeOrderfill.setSide(execution.getSide());  tradeOrderfill.setQuantity(execution.getQuantity());  tradeOrderfill.setPrice(execution.getPrice());  tradeOrderfill.setAccountNumber(execution.getAccountNumber());  tradeOrderfill.setAveragePrice(execution.getAveragePrice());  tradeOrderfill.setCumulativeQuantity(execution.getCumulativeQuantity());  tradeOrderfill.setExecId(execution.getExecId());}  }
class C{  private void type(final StatementEnum type){  byte b=flags;  if (type == null) {    b=Bits.set(Bits.set(Bits.set(b,TYPE_BIT,false),(TYPE_BIT + 1),false),(TYPE_BIT + 2),false);  } else {switch (type) {case Explicit:      b=Bits.set(Bits.set(Bits.set(b,TYPE_BIT,true),(TYPE_BIT + 1),false),(TYPE_BIT + 2),false);    break;case Axiom:  b=Bits.set(Bits.set(Bits.set(b,TYPE_BIT,false),(TYPE_BIT + 1),true),(TYPE_BIT + 2),false);break;case Inferred:b=Bits.set(Bits.set(Bits.set(b,TYPE_BIT,true),(TYPE_BIT + 1),true),(TYPE_BIT + 2),false);break;case History:b=Bits.set(Bits.set(Bits.set(b,TYPE_BIT,false),(TYPE_BIT + 1),false),(TYPE_BIT + 2),true);break;default :throw new IllegalStateException();}}flags=b;}  }
class C{  @Override public byte[] toByteArray(){  ByteArrayDataOutput byteArrayDataOutput=ByteStreams.newDataOutput();  try {    this.write(byteArrayDataOutput);    return byteArrayDataOutput.toByteArray();  } catch (  IOException e) {    LOG.error("Failed to serialize due to: " + e.getMessage(),e);    throw new RuntimeException(e);  }}  }
class C{  private static void exposeReferencedInternalTypes(N4JSResource res){  final TModule module=res.getModule();  if (module == null)   return;  module.getInternalTypes().addAll(module.getExposedInternalTypes());  final List<EObject> stuffToScan=new ArrayList<>();  stuffToScan.addAll(module.getTopLevelTypes());  stuffToScan.addAll(module.getVariables());  for (  EObject currRoot : stuffToScan) {    exposeTypesReferencedBy(currRoot);    final TreeIterator<EObject> i=currRoot.eAllContents();    while (i.hasNext())     exposeTypesReferencedBy(i.next());  }}  }
class C{  public void bind(Vector other,int direction){  IncompatibleVectorsException.checkVectorsCompatible(this,other);  BinaryVector binaryOther=(BinaryVector)other.copy();  if (direction > 0) {    this.permute(PermutationUtils.getShiftPermutation(VectorType.BINARY,dimension,1));    this.bitSet.xor(binaryOther.bitSet);  } else {    this.bitSet.xor(binaryOther.bitSet);    this.permute(PermutationUtils.getShiftPermutation(VectorType.BINARY,dimension,-1));  }}  }
class C{  public static void moveFile(File srcFile,File destFile){  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile.getAbsolutePath(),destFile.getAbsolutePath());    deleteFile(srcFile.getAbsolutePath());  }}  }
class C{  public static boolean isRequiredConfigDirectory(final String directory){  return requiredConfigDirectories.contains(directory);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid quoted-printable encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid quoted-printable encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  private CSearchExecuter(){}  }
class C{  public static int finalizerPos(JCTree tree){  if (tree.hasTag(TRY)) {    JCTry t=(JCTry)tree;    Assert.checkNonNull(t.finalizer);    return firstStatPos(t.finalizer);  } else   if (tree.hasTag(SYNCHRONIZED)) {    return endPos(((JCSynchronized)tree).body);  } else {    throw new AssertionError();  }}  }
class C{  public static void error(Object message){  RuntimeSingleton.error(message);}  }
class C{  public static void showWarningDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title){  try {    if (canShowMacSheetPanel()) {      MacMessages.getInstance().showErrorDialog(title,message,OK_BUTTON,null);      return;    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  showDialog(message,title,new String[]{OK_BUTTON},0,getWarningIcon());}  }
class C{  protected boolean visitTypevarSubtype(AnnotatedTypeVariable subtype,AnnotatedTypeMirror supertype,VisitHistory visited){  AnnotatedTypeMirror upperBound=subtype.getUpperBound();  if (TypesUtils.isBoxedPrimitive(upperBound.getUnderlyingType()) && supertype instanceof AnnotatedPrimitiveType) {    upperBound=supertype.atypeFactory.getUnboxedType((AnnotatedDeclaredType)upperBound);  }  return checkAndSubtype(upperBound,supertype,visited);}  }
class C{  public static double regularizedGammaQ(double a,double x){  return regularizedGammaQ(a,x,DEFAULT_EPSILON,Integer.MAX_VALUE);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private ConcurrentBufferedUpdate(final Network network){  this.network=network;  currentAvailableProcessors=getAvailableConsumerProcessors();  executors=Executors.newFixedThreadPool(currentAvailableProcessors);  for (  Neuron n : network.getFlatNeuronList()) {    neurons.add(n);  }  for (  NeuronGroup ng : network.getFlatNeuronGroupList()) {    neurons.addAll(ng.getNeuronList());  }  taskSet=new CyclicTaskQueue(neurons,currentAvailableProcessors);}  }
class C{  public void update(byte[] input){  engineUpdate(input,0,input.length);  state=IN_PROGRESS;}  }
class C{  protected void checkActive() throws IllegalStateException {  if (!this.active) {    throw new IllegalStateException("Request is not active anymore");  }}  }
class C{  protected void checkParameters() throws BuildException {  if (module == null || module.isEmpty()) {    throw new BuildException("Missing module parameter is required");  }}  }
class C{  public static boolean isPaddy(IBlockAccess world,int x,int y,int z){  final Block block=world.getBlock(x,y,z);  return isPaddy(block);}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex thought=memory.createVertex(getClass());  Vertex property=thought.getRelationship(Primitive.ENABLED);  if (property != null) {    setEnabled((Boolean)property.getData());  }  thought.internalRemoveRelationships(Primitive.ENABLED);  memory.save();  saveProperties();}  }
class C{  public static Font[] loadFontUsingByteArray(File file) throws IOException {  return loadFontUsingByteArray(file,true);}  }
class C{  public boolean requiresCropOperation(ImageProxy image,@Nullable Rect crop){  if (crop == null) {    return false;  }  return !(crop.equals(new Rect(0,0,image.getWidth(),image.getHeight())));}  }
class C{  public void testIsolatedMode() throws Throwable {  processTest(ISOLATED);}  }
class C{  public void onLoad(ClassPool pool,String classname){}  }
class C{  @SuppressWarnings("deprecation") private void initCropGridStyle(@NonNull TypedArray a){  int cropGridStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_grid_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_grid_stoke_width));  int cropGridColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_grid_color,getResources().getColor(R.color.ucrop_color_default_crop_grid));  mCropGridPaint.setStrokeWidth(cropGridStrokeSize);  mCropGridPaint.setColor(cropGridColor);  mCropGridRowCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_row_count,DEFAULT_CROP_GRID_ROW_COUNT);  mCropGridColumnCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_column_count,DEFAULT_CROP_GRID_COLUMN_COUNT);}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  public static String printDuration(double uptime){  NumberFormat fmtI=new DecimalFormat("###,###",new DecimalFormatSymbols(Locale.ENGLISH));  NumberFormat fmtD=new DecimalFormat("###,##0.000",new DecimalFormatSymbols(Locale.ENGLISH));  uptime/=1000;  if (uptime < 60) {    return fmtD.format(uptime) + " seconds";  }  uptime/=60;  if (uptime < 60) {    long minutes=(long)uptime;    String s=fmtI.format(minutes) + (minutes > 1 ? " minutes" : " minute");    return s;  }  uptime/=60;  if (uptime < 24) {    long hours=(long)uptime;    long minutes=(long)((uptime - hours) * 60);    String s=fmtI.format(hours) + (hours > 1 ? " hours" : " hour");    if (minutes != 0) {      s+=" " + fmtI.format(minutes) + (minutes > 1 ? " minutes" : " minute");    }    return s;  }  uptime/=24;  long days=(long)uptime;  long hours=(long)((uptime - days) * 24);  String s=fmtI.format(days) + (days > 1 ? " days" : " day");  if (hours != 0) {    s+=" " + fmtI.format(hours) + (hours > 1 ? " hours" : " hour");  }  return s;}  }
class C{  public ServerHandshaker(DTLSSession session,RecordLayer recordLayer,SessionListener sessionListener,DtlsConnectorConfig config,int maxTransmissionUnit) throws HandshakeException {  this(0,session,recordLayer,sessionListener,config,maxTransmissionUnit);}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath("/server/tests/expiration");  RestAssured.requestSpecification.baseUri("http://localhost:" + MAIN_PORT + ROOT);}  }
class C{  public synchronized void animatePanAndZoomTo(final Point2D p,double scale,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animatePanAndZoomToAbs(pp,scale,duration);}  }
class C{  private void enableResourceAccess(){  final ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(this.getServletContext());  final WicketResourceMounter mounter=ctx.getBean("wicketResourceMounter",WicketResourceMounter.class);  mounter.enableResourceAccess(this);}  }
class C{  public E points(Coordinate... coordinates){  shell.points(coordinates);  return thisRef();}  }
class C{  public DatatypeConfigurationException(String message){  super(message);}  }
class C{  public void load(final String assetPath,final Class<?> assetClass){  load(assetPath,assetClass,null);}  }
class C{  public Spider pipeline(Pipeline pipeline){  return addPipeline(pipeline);}  }
class C{  private void checkIterator(Direction dir,boolean endInclusive){  final boolean keyGenMatches=(lastKeyGen == storeData.persistitKey.getGeneration());  if ((itDir != dir) || !keyGenMatches) {    if (keyGenMatches) {      if ((itDir == GTEQ && dir == GT) || (itDir == LTEQ && dir == LT)) {        itDir=dir;        return;      }    }    final boolean reverse=(dir == LT) || (dir == LTEQ);    adapter.getUnderlyingStore().indexIterator(adapter.getSession(),storeData,reverse);    lastKeyGen=storeData.persistitKey.getGeneration();    itDir=dir;  }}  }
class C{  private static void insertData(String tableId) throws IOException {  Sql sql=fusiontables.query().sql("INSERT INTO " + tableId + " (Text,Number,Location,Date) "+ "VALUES ("+ "'Google Inc', "+ "1, "+ "'1600 Amphitheatre Parkway Mountain View, "+ "CA 94043, USA','"+ new DateTime(new Date())+ "')");  try {    sql.execute();  } catch (  IllegalArgumentException e) {  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.745 -0500",hash_original_method="B2D89085FD1440204585B1FDE708D472",hash_generated_method="0DB1D891C4BC734697C61313156F9928") public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory){  return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1,1,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),threadFactory));}  }
class C{  public void calculateMin(double min){  if (this.min == -1) {    this.min=min;  } else {    this.min=Math.min(this.min,min);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hznu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public List<ParallelSuffixArrayEntry> lookupSource(String sourceQuery,int numResults,boolean exactMatch){  final int[] sourcePhrase=toTMArray(IStrings.tokenize(sourceQuery));  for (  int id : sourcePhrase) {    if (id < 0)     return Collections.emptyList();  }  SuffixArraySample sample=sa.sample(sourcePhrase,numResults,exactMatch);  return sample.samples.stream().map(null).collect(Collectors.toList());}  }
class C{  public PropertyTable viewAsFlatList(){  styleOfView=VIEW_AS_FLAT_LIST;  return rebuild();}  }
class C{  @Override public void onDrawFrame(GL10 unused){  Frame pickFrame=this.pickQueue.poll();  if (pickFrame != null) {    try {      this.drawFrame(pickFrame);    } catch (    Exception e) {      Logger.logMessage(Logger.ERROR,"WorldWindow","onDrawFrame","Exception while processing pick in OpenGL thread",e);    } finally {      pickFrame.signalDone();      pickFrame.recycle();      super.requestRender();    }  }  Frame nextFrame=this.frameQueue.poll();  if (nextFrame != null) {    if (this.currentFrame != null) {      this.currentFrame.recycle();    }    this.currentFrame=nextFrame;    super.requestRender();  }  try {    if (this.currentFrame != null) {      this.drawFrame(this.currentFrame);    }  } catch (  Exception e) {    Logger.logMessage(Logger.ERROR,"WorldWindow","onDrawFrame","Exception while drawing frame in OpenGL thread",e);  }}  }
class C{  public static IndexedConnectivity serializableInstance(){  return new IndexedConnectivity(BasicLagGraph.serializableInstance());}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public void prepare(FIXMessage message,char msgType){  message.reset();  message.addField(MsgType).setChar(msgType);  prepare(message);}  }
class C{  public void testInputNonexistent() throws Exception {  File f=new File("testInputNonExistent");  try {    new BufferedFileDataInput(f);    throw new Exception("Able to open non-existent file: " + f.getAbsolutePath());  } catch (  FileNotFoundException e) {  }}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  public void updatePasswordExpirationConfiguration(String tenantName,PasswordExpiration config) throws Exception {  getService().updatePasswordExpirationConfiguration(tenantName,config,this.getServiceContext());}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_ByteBuffer$ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer[] bbd={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public static void assertErrorMessage(String msg){  if (list.isEmpty()) {    Assert.fail("No message present: " + msg);    return;  }  LoggingEvent evt=list.remove(0);  while ((evt.getLevel() == Level.INFO) || (evt.getLevel() == Level.DEBUG) || (evt.getLevel() == Level.TRACE)) {    if (list.isEmpty()) {      Assert.fail("Only debug/info messages present: " + msg);      return;    }    evt=list.remove(0);  }  if (evt.getLevel() != Level.ERROR) {    Assert.fail("Level mismatch when looking for ERROR message: \"" + msg + "\" found \""+ (String)evt.getMessage()+ "\"");  }  if (!compare((String)evt.getMessage(),msg)) {    Assert.fail("Looking for ERROR message \"" + msg + "\" got \""+ evt.getMessage()+ "\"");  }}  }
class C{  @Override public void onBuildHeaders(List<Header> target){  loadHeadersFromResource(R.xml.preference_headers,target);}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  private synchronized void onAdFetched(NativeAd adNative){  Log.i(TAG,"onAdFetched");  int index=-1;  if (canUseThisAd(adNative)) {    mPrefetchedAdList.add(adNative);    index=mPrefetchedAdList.size() - 1;    mNoOfFetchedAds++;  }  lockFetch.set(false);  mFetchFailCount=0;  ensurePrefetchAmount();  notifyObserversOfAdSizeChange(index);}  }
class C{  private double move(IString word,Integer fromClass,Integer toClass,boolean updateDeltaState){  assert fromClass != toClass;  final Counter<NgramHistory> fullHistoryFromClass=inputState.classHistoryCount.getCounter(fromClass);  final Counter<NgramHistory> deltaFromClass=deltaClassHistoryCount.getCounter(fromClass);  final Counter<NgramHistory> fullHistoryToClass=inputState.classHistoryCount.getCounter(toClass);  final Counter<NgramHistory> deltaToClass=deltaClassHistoryCount.getCounter(toClass);  final Counter<NgramHistory> historiesForWord=inputState.historyCount.getCounter(word);  double fromClassCount=inputState.classCount.getCount(fromClass) + deltaClassCount.getCount(fromClass);  assert fromClassCount > 0.0;  double toClassCount=inputState.classCount.getCount(toClass) + deltaClassCount.getCount(toClass);  double wordCount=inputState.wordCount.getCount(word);  double newObjValue=objValue;  for (  NgramHistory history : historiesForWord.keySet()) {    double fromCount=fullHistoryFromClass.getCount(history) + deltaFromClass.getCount(history);    assert fromCount > 0.0;    double toCount=fullHistoryToClass.getCount(history) + deltaToClass.getCount(history);    double historyCount=historiesForWord.getCount(history);    newObjValue-=fromCount * Math.log(fromCount);    if (toCount > 0.0) {      newObjValue-=toCount * Math.log(toCount);    }    fromCount-=historyCount;    toCount+=historyCount;    if (updateDeltaState) {      deltaFromClass.decrementCount(history,historyCount);      deltaToClass.incrementCount(history,historyCount);    }    if (fromCount > 0.0) {      newObjValue+=fromCount * Math.log(fromCount);    }    newObjValue+=toCount * Math.log(toCount);  }  newObjValue+=fromClassCount * Math.log(fromClassCount);  if (toClassCount > 0.0) {    newObjValue+=toClassCount * Math.log(toClassCount);  }  fromClassCount-=wordCount;  toClassCount+=wordCount;  if (updateDeltaState) {    deltaClassCount.decrementCount(fromClass,wordCount);    deltaClassCount.incrementCount(toClass,wordCount);  }  if (fromClassCount > 0.0) {    newObjValue-=fromClassCount * Math.log(fromClassCount);  }  newObjValue-=toClassCount * Math.log(toClassCount);  if (updateDeltaState) {    localWordToClass.put(word,toClass);  }  return newObjValue;}  }
class C{  protected Map<double[],Map<T,double[]>> assignToClusters(Map<T,double[]> object_locations,Set<double[]> centroids){  Map<double[],Map<T,double[]>> clusterMap=new HashMap<double[],Map<T,double[]>>();  for (  double[] centroid : centroids)   clusterMap.put(centroid,new HashMap<T,double[]>());  for (  Map.Entry<T,double[]> object_location : object_locations.entrySet()) {    T object=object_location.getKey();    double[] location=object_location.getValue();    Iterator<double[]> c_iter=centroids.iterator();    double[] closest=c_iter.next();    double distance=DiscreteDistribution.squaredError(location,closest);    while (c_iter.hasNext()) {      double[] centroid=c_iter.next();      double dist_cur=DiscreteDistribution.squaredError(location,centroid);      if (dist_cur < distance) {        distance=dist_cur;        closest=centroid;      }    }    clusterMap.get(closest).put(object,location);  }  return clusterMap;}  }
class C{  public MethodInfo findMethod(String name,Class<?>... paramTypes){  return findMethod(name,ClassInfo.findOrCreateClass(paramTypes));}  }
class C{  public BlowFishCrypt(byte[] key){  try {    secretKeySpec=new SecretKeySpec(key,"Blowfish");  } catch (  Exception e) {  }}  }
class C{  public void initialize(){  this.regionStack.clear();  this.detailHint=0.0;}  }
class C{  public void undock(DockNode node){  DockNodeEventHandler dockNodeEventHandler=dockNodeEventFilters.get(node);  node.removeEventFilter(DockEvent.DOCK_OVER,dockNodeEventHandler);  dockNodeEventFilters.remove(node);  Stack<Parent> findStack=new Stack<Parent>();  findStack.push((Parent)root);  while (!findStack.isEmpty()) {    Parent parent=findStack.pop();    ObservableList<Node> children=parent.getChildrenUnmodifiable();    if (parent instanceof SplitPane) {      SplitPane split=(SplitPane)parent;      children=split.getItems();    }    for (int i=0; i < children.size(); i++) {      if (children.get(i) == node) {        children.remove(i);        Stack<Parent> clearStack=new Stack<Parent>();        clearStack.push((Parent)root);        while (!clearStack.isEmpty()) {          parent=clearStack.pop();          children=parent.getChildrenUnmodifiable();          if (parent instanceof SplitPane) {            SplitPane split=(SplitPane)parent;            children=split.getItems();          }          for (i=0; i < children.size(); i++) {            if (children.get(i) instanceof SplitPane) {              SplitPane split=(SplitPane)children.get(i);              if (split.getItems().size() < 1) {                children.remove(i);                continue;              } else {                clearStack.push(split);              }            }          }        }        return;      } else       if (children.get(i) instanceof Parent) {        findStack.push((Parent)children.get(i));      }    }  }}  }
class C{  private void requestWritePermissions(){  boolean hasPermission=(ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);  if (!hasPermission) {    ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_WRITE_STORAGE);  } else {    makeZipArchiveDialog();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ELEMENT_POSITION___X1:    return getX_1();case UmplePackage.ELEMENT_POSITION___Y1:  return getY_1();case UmplePackage.ELEMENT_POSITION___WIDTH_1:return getWidth_1();case UmplePackage.ELEMENT_POSITION___HEIGHT_1:return getHeight_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Boolean isIpv6RouterAdvertisementConfigurationEnabled(){  return ipv6RouterAdvertisementConfigurationEnabled;}  }
class C{  public void addChild(K aKey,V aValue){  addChild(new KeyValueNode<K,V>(aKey,aValue));}  }
class C{  public void notifyValue(XScrollbar obj,int type,int v,boolean isAdjusting){  if (obj == vsb) {    scroll(-1,v,VERTICAL,type);  } else   if ((XHorizontalScrollbar)obj == hsb) {    scroll(v,-1,HORIZONTAL,type);  }}  }
class C{  public void assertFalse(boolean value,String errorMessage){  TestUtils.assertFalse(value,errorMessage);}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  private T selectPivot(int from,int to){  int count=(int)(6 * Math.log10(to - from));  count=Math.min(count,temp.length);  int step=(to - from) / count;  for (int i=from, j=0; i < to; i+=step, j++) {    temp[j]=data[i];  }  T pivot=select(temp,0,count - 1,count / 2);  return pivot;}  }
class C{  public void test_delete002(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      journal.commit();    }    final long tx0=journal.newTx(ITx.UNISOLATED);    final long tx1=journal.newTx(ITx.UNISOLATED);    assertNotSame(tx0,tx1);    assertTrue(Math.abs(tx0) >= journal.getRootBlockView().getLastCommitTime());    assertTrue(Math.abs(tx1) > Math.abs(tx0));    final byte[] id0=new byte[]{1};    final byte[] v0=getRandomData().array();    journal.getIndex(name,tx0).insert(id0,v0);    assertEquals(v0,journal.getIndex(name,tx0).lookup(id0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertEquals(v0,(byte[])journal.getIndex(name,tx0).remove(id0));    assertFalse(journal.getIndex(name,tx0).contains(id0));    assertNull(journal.getIndex(name,tx0).remove(id0));    final byte[] v1=getRandomData().array();    assertNull(journal.getIndex(name,tx0).insert(id0,v1));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertFalse(journal.getIndex(name).contains(id0));    assertEquals(v1,(byte[])journal.getIndex(name,tx0).remove(id0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertFalse(journal.getIndex(name).contains(id0));    assertEquals(0L,journal.commit(tx0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertFalse(journal.getIndex(name).contains(id0));    assertEquals(0L,journal.commit(tx1));    assertFalse(journal.getIndex(name).contains(id0));  }  finally {    journal.destroy();  }}  }
class C{  public BigDecimal calculateDiscount(BigDecimal Qty,BigDecimal Price,int M_Product_ID,int M_Product_Category_ID,BigDecimal BPartnerFlatDiscount){  if (BPartnerFlatDiscount == null)   BPartnerFlatDiscount=Env.ZERO;  if (DISCOUNTTYPE_FlatPercent.equals(getDiscountType())) {    if (isBPartnerFlatDiscount())     return BPartnerFlatDiscount;    return getFlatDiscount();  } else   if (DISCOUNTTYPE_Formula.equals(getDiscountType()) || DISCOUNTTYPE_Pricelist.equals(getDiscountType())) {    log.info("Not supported (yet) DiscountType=" + getDiscountType());    return Env.ZERO;  }  getBreaks(false);  boolean found=false;  BigDecimal Amt=Price.multiply(Qty);  if (isQuantityBased())   log.finer("Qty=" + Qty + ",M_Product_ID="+ M_Product_ID+ ",M_Product_Category_ID="+ M_Product_Category_ID); else   log.finer("Amt=" + Amt + ",M_Product_ID="+ M_Product_ID+ ",M_Product_Category_ID="+ M_Product_Category_ID);  for (int i=0; i < m_breaks.length; i++) {    MDiscountSchemaBreak br=m_breaks[i];    if (!br.isActive())     continue;    if (isQuantityBased()) {      if (!br.applies(Qty,M_Product_ID,M_Product_Category_ID)) {        log.finer("No: " + br);        continue;      }      log.finer("Yes: " + br);    } else {      if (!br.applies(Amt,M_Product_ID,M_Product_Category_ID)) {        log.finer("No: " + br);        continue;      }      log.finer("Yes: " + br);    }    BigDecimal discount=null;    if (br.isBPartnerFlatDiscount())     discount=BPartnerFlatDiscount; else     discount=br.getBreakDiscount();    log.fine("Discount=>" + discount);    return discount;  }  return Env.ZERO;}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof IndexedParent)) {    return false;  }  IndexedParent c=(IndexedParent)o;  return c.getIndex() == this.getIndex() && c.getLag() == this.getLag();}  }
class C{  public void upload(){  Uploader.zipAndUpload();}  }
class C{  public static void AntiAliasifSet(Graphics graph){  if (getInstance().getAntiAliasing()) {    ((Graphics2D)graph).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  }}  }
class C{  public static boolean isSizeExpression(final IOperandTreeNode expression){  return OperandSize.isSizeString(expression.getValue());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.338 -0500",hash_original_method="862168FA5BAB349E5C10CD857946505D",hash_generated_method="E03AFF4D69A7D2042BC424EE0AB65B98") public final static boolean isDialable(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == WILD;}  }
class C{  public SassNumber(double value,String unit){  this.value=value;  this.unit=unit;}  }
class C{  public static byte[] readInputStream(InputStream in) throws IOException {  try {class Part {      byte[] partData;      int len;    }    LinkedList<Part> parts=new LinkedList<>();    int len=1;    while (len > 0) {      byte[] data=new byte[1024];      len=in.read(data);      if (len > 0) {        Part part=new Part();        part.partData=data;        part.len=len;        parts.add(part);      }    }    int length=0;    for (    Part part : parts) {      length+=part.len;    }    byte[] result=new byte[length];    int pos=0;    for (    Part part : parts) {      System.arraycopy(part.partData,0,result,pos,part.len);      pos+=part.len;    }    return result;  }  finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void add(T t,double percentX,double percentY,double percentWidth,double percentHeight){  surface.addRelative("",t,percentX,percentY,percentWidth,percentHeight,0,Double.MAX_VALUE,0,Double.MAX_VALUE);  content.getChildren().add(t);}  }
class C{  public Builder addShard(IndexShardRoutingTable refData,ShardRouting shard){  IndexShardRoutingTable indexShard=shards.get(shard.id());  if (indexShard == null) {    indexShard=new IndexShardRoutingTable.Builder(refData.shardId()).addShard(new ShardRouting(shard)).build();  } else {    indexShard=new IndexShardRoutingTable.Builder(indexShard).addShard(new ShardRouting(shard)).build();  }  shards.put(indexShard.shardId().id(),indexShard);  return this;}  }
class C{  public void run(JobNodeBean node){  if (node instanceof ActJobNodeBean) {    ActJobNodeBean jobNode=(ActJobNodeBean)node;    if (jobNode.getStatus().equals(JobQueueStatus.Created.name())) {      controller.startJob(jobNode.getId());    } else {      if (jobNode.getStatus().equals(JobStatus.Paused.name()) || jobNode.getStatus().equals(JobStatus.RampPaused.name())) {        controller.restartJob(jobNode.getId());      } else {        controller.startJob(jobNode.getId());      }    }  } else   if (node instanceof VMNodeBean) {    VMNodeBean agentNode=(VMNodeBean)node;    if (agentNode.getStatus().equals(JobStatus.Paused.name()) || agentNode.getStatus().equals(JobStatus.RampPaused.name())) {      controller.restartAgent(agentNode.getId());    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.263 -0500",hash_original_method="84AAB7006BE97BBDBF66CEB78BE6403B",hash_generated_method="3C20BC051E9D2FCD151EE798638265AC") public void offset(float dx,float dy){  addTaint(dx + dy);}  }
class C{  public NeighborChangeEvent(Optional<Vector3D> neighborPosition){  this.neighborPosition=neighborPosition;}  }
class C{  protected Command dropFilter(long sw,OFPacketIn pi,FloodlightContext cntx){  Command result=Command.CONTINUE;  short port=pi.getInPort();  if (isAllowed(sw,port) == false) {    if (log.isTraceEnabled()) {      log.trace("Ignoring packet because of topology " + "restriction on switch={}, port={}",sw,port);      result=Command.STOP;    }  }  return result;}  }
class C{  public void createKirdnehNPC(StendhalRPZone zone){  final SpeakerNPC npc=new KirdnehHouseSeller("Roger Frampton","kirdneh",houseTax);  zone.add(npc);}  }
class C{  private static Point2D.Double computeRightTangent(ArrayList<Point2D.Double> d,int end){  Point2D.Double tHat2;  tHat2=v2SubII(d.get(end - 1),d.get(end));  tHat2=v2Normalize(tHat2);  return tHat2;}  }
class C{  synchronized static void broadcast(int broadcastPort) throws MatlabConnectionException {  if (_registry == null) {    setupRegistry(broadcastPort);    bindSession();    maintainRegistryConnection(broadcastPort);  }}  }
class C{  public ColorRange addSaturationRange(FloatRange sat){  saturationConstraint.add(sat);  return this;}  }
class C{  public static String httpGetString(HttpRequest request){  HttpResponse response=httpGet(request);  return response == null ? null : response.getResponseBody();}  }
class C{  private void ruleR0(){  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      List<Node> sepset2=this.sepsets.get(a,c);      if (sepset2 == null)       continue;      if (!sepset2.contains(b)) {        if (!isArrowpointAllowed(a,b)) {          continue;        }        if (!isArrowpointAllowed(c,b)) {          continue;        }        graph.setEndpoint(a,b,Endpoint.ARROW);        graph.setEndpoint(c,b,Endpoint.ARROW);        logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c));      }    }  }}  }
class C{  GeoKey(int id,int v){  this.id=id;  this.count=1;  this.tag=GeoKey.Tag.get(id);  this.tagValue=TagValue.get(tag,v);  if (tagValue == null) {    this.value=new int[1];    this.value[0]=v;  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.TYPE_REF;}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public Composer to(long animDuration,float x,float y,int alpha,float scaleX,float scaleY,float rotation,Ease ease){  mTweenParameterList.add(new TweenParameter(x,y,alpha,scaleX,scaleY,rotation,animDuration,ease));  return this;}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.insertUpdate(e,a,f);  }}  }
class C{  public boolean verifySignature(byte[] signature){  if (forSigning) {    throw new IllegalStateException("GenericSigner not initialised for verification");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  try {    byte[] sig=engine.processBlock(signature,0,signature.length);    if (sig.length < hash.length) {      byte[] tmp=new byte[hash.length];      System.arraycopy(sig,0,tmp,tmp.length - sig.length,sig.length);      sig=tmp;    }    return Arrays.constantTimeAreEqual(sig,hash);  } catch (  Exception e) {    return false;  }}  }
class C{  public ConcurrentModificationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void computeEigensystemFromSymmetricMatrix3(Matrix matrix,double[] outEigenvalues,Vec4[] outEigenvectors){  if (matrix == null) {    throw new IllegalArgumentException("Matrix Is Null");  }  if (matrix.m12 != matrix.m21 || matrix.m13 != matrix.m31 || matrix.m23 != matrix.m32) {    throw new IllegalArgumentException("Matrix Not Symmetric");  }  final double EPSILON=1.0e-10;  final int MAX_SWEEPS=32;  double m11=matrix.m11;  double m12=matrix.m12;  double m13=matrix.m13;  double m22=matrix.m22;  double m23=matrix.m23;  double m33=matrix.m33;  double[][] r=new double[3][3];  r[0][0]=r[1][1]=r[2][2]=1d;  for (int a=0; a < MAX_SWEEPS; a++) {    if ((Math.abs(m12) < EPSILON) && (Math.abs(m13) < EPSILON) && (Math.abs(m23) < EPSILON))     break;    if (m12 != 0d) {      double u=(m22 - m11) * 0.5 / m12;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m11-=t * m12;      m22+=t * m12;      m12=0d;      double temp=c * m13 - s * m23;      m23=s * m13 + c * m23;      m13=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][1];        r[i][1]=s * r[i][0] + c * r[i][1];        r[i][0]=temp;      }    }    if (m13 != 0d) {      double u=(m33 - m11) * 0.5 / m13;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m11-=t * m13;      m33+=t * m13;      m13=0d;      double temp=c * m12 - s * m23;      m23=s * m12 + c * m23;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][2];        r[i][2]=s * r[i][0] + c * r[i][2];        r[i][0]=temp;      }    }    if (m23 != 0d) {      double u=(m33 - m22) * 0.5 / m23;      double u2=u * u;      double u2p1=u2 + 1d;      double t=(u2p1 != u2) ? ((u < 0d) ? -1d : 1d) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1d / Math.sqrt(t * t + 1d);      double s=c * t;      m22-=t * m23;      m33+=t * m23;      m23=0d;      double temp=c * m12 - s * m13;      m13=s * m12 + c * m13;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][1] - s * r[i][2];        r[i][2]=s * r[i][1] + c * r[i][2];        r[i][1]=temp;      }    }  }  outEigenvalues[0]=m11;  outEigenvalues[1]=m22;  outEigenvalues[2]=m33;  outEigenvectors[0]=new Vec4(r[0][0],r[1][0],r[2][0]);  outEigenvectors[1]=new Vec4(r[0][1],r[1][1],r[2][1]);  outEigenvectors[2]=new Vec4(r[0][2],r[1][2],r[2][2]);}  }
class C{  static void testCopyInputStreamToFile() throws IOException {  testCopyInputStreamToFile(0);  for (int i=0; i < 100; i++) {    testCopyInputStreamToFile(rand.nextInt(32000));  }  Path target=createTempFile("blah",null);  try {    InputStream in=new ByteArrayInputStream(new byte[0]);    try {      copy(in,target);      throw new RuntimeException("FileAlreadyExistsException expected");    } catch (    FileAlreadyExistsException ignore) {    }  }  finally {    delete(target);  }  Path tmpdir=createTempDirectory("blah");  try {    if (TestUtil.supportsLinks(tmpdir)) {      Path link=createSymbolicLink(tmpdir.resolve("link"),tmpdir.resolve("target"));      try {        InputStream in=new ByteArrayInputStream(new byte[0]);        try {          copy(in,link);          throw new RuntimeException("FileAlreadyExistsException expected");        } catch (        FileAlreadyExistsException ignore) {        }      }  finally {        delete(link);      }    }  }  finally {    delete(tmpdir);  }  try {    copy((InputStream)null,target);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }  try {    copy(new ByteArrayInputStream(new byte[0]),(Path)null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }}  }
class C{  public static String randomLetters(int length){  return randomString(LETTERS,length);}  }
class C{  public static CHelpManager instance(){  return m_instance;}  }
class C{  public FileLoggerFrame(){  fileHandleModel=new FileHandleModel();  fileCommandModel=new FileCommandModel();  initComponents();  postInit();  refreshThread=new Thread(this,"FileLogger");  refreshThread.start();  if (Settings.getInstance().readBool("emu.debug.enablefilelogger")) {    cbFileTrace.setSelected(true);    Modules.IoFileMgrForUserModule.registerIoListener(this);  }  WindowPropSaver.loadWindowProperties(this);}  }
class C{  public LazySetX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  @Override public V call(){  return loop(original.call());}  }
class C{  private void processNonControlCharacters(char character){  StringBuffer buffer=new StringBuffer();  buffer.append(character);  while (hasNextChar()) {    character=getNextChar();    if (character == '\u0000' || character == '\b' || character == '\t' || character == '\u0007' || character == '\n' || character == '\r' || character == '\u001b') {      pushBackChar(character);      break;    }    buffer.append(character);  }  displayNewText(buffer.toString());}  }
class C{  final public static double[] earthCircle(double phi1,double lambda0,double c,double s,double e,int n,double[] ret_val){  double Az, cosAz, sinAz;  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double sinc=Math.sin(c);  double cosc=Math.cos(c);  if (n < 2)   n=2;  int end=n << 1;  if (ret_val == null || end > ret_val.length) {    ret_val=new double[end];  }  double inc=e / (n - 1);  Az=s;  for (int i=0; i < end; i+=2, Az+=inc) {    cosAz=Math.cos(Az);    sinAz=Math.sin(Az);    ret_val[i]=Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    ret_val[i + 1]=Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return ret_val;}  }
class C{  public static double entropyConditionedOnRows(double[][] matrix){  double returnValue=0, sumForRow, total=0;  for (int i=0; i < matrix.length; i++) {    sumForRow=0;    for (int j=0; j < matrix[0].length; j++) {      returnValue=returnValue + lnFunc(matrix[i][j]);      sumForRow+=matrix[i][j];    }    returnValue=returnValue - lnFunc(sumForRow);    total+=sumForRow;  }  if (Utils.eq(total,0)) {    return 0;  }  return -returnValue / (total * log2);}  }
class C{  public PathImpl createTempFile(String prefix,String suffix) throws IOException {  return getWrappedPath().createTempFile(prefix,suffix);}  }
class C{  private static String printableLabel(int label){  if (label >= 0x20 && label <= 0x7d && label != 0x22 && label != 0x5c) {    return Character.toString((char)label);  }  return "0x" + Integer.toHexString(label);}  }
class C{  public HashMapPro(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  key=key.clone();}  }
class C{  @Path("/clients/{clientId}/groups/{groupId}") @Timed @ExceptionMetered @DELETE public Response evictClient(@Auth User user,@PathParam("clientId") LongParam clientId,@PathParam("groupId") LongParam groupId){  logger.info("User {} evicting clientId {} from groupId {}.",user.getName(),clientId,groupId);  try {    aclDAO.findAndEvictClient(clientId.get(),groupId.get(),auditLog,user.getName(),new HashMap<>());  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  protected FPTreeRoot buildFPTree(ArrayList<BinaryItem> singletons,Object dataSource,int minSupport) throws Exception {  FPTreeRoot tree=new FPTreeRoot();  Instances data=null;  if (dataSource instanceof Instances) {    data=(Instances)dataSource;  } else   if (dataSource instanceof weka.core.converters.ArffLoader) {    data=((weka.core.converters.ArffLoader)dataSource).getStructure();  }  if (dataSource instanceof Instances) {    for (int i=0; i < data.numInstances(); i++) {      insertInstance(data.instance(i),singletons,tree,minSupport);    }  } else   if (dataSource instanceof weka.core.converters.ArffLoader) {    weka.core.converters.ArffLoader loader=(weka.core.converters.ArffLoader)dataSource;    Instance current=null;    int count=0;    while ((current=loader.getNextInstance(data)) != null) {      insertInstance(current,singletons,tree,minSupport);      count++;      if (count % m_offDiskReportingFrequency == 0) {        System.err.println("build tree done: " + count);      }    }  }  return tree;}  }
class C{  protected boolean shouldRenderAsCluster(Cluster<T> cluster){  return cluster.getSize() > MIN_CLUSTER_SIZE;}  }
class C{  public void handleWindowFocusEvent(boolean parentWindowActive){  this.parentWindowActive=parentWindowActive;synchronized (classLock) {    if (!parentWindowActive) {      this.browserWindowFocusedApplet=globalFocusedWindow;    }    if (parentWindowActive && globalFocusedWindow != this && isParentWindowChanged()) {      globalFocusedWindow=(this.browserWindowFocusedApplet != null) ? this.browserWindowFocusedApplet : this;    }  }  if (globalFocusedWindow == this && parentWindowActive) {    responder.handleWindowFocusEvent(parentWindowActive,null);  }}  }
class C{  public static EventType createEventType(StatementContext statementContext,StatViewAdditionalProps additionalProps,int streamNum){  Map<String,Object> eventTypeMap=new HashMap<String,Object>();  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__DATAPOINTS.getName(),Long.class);  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__TOTAL.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEV.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEVPA.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__VARIANCE.getName(),Double.class);  eventTypeMap.put(ViewFieldEnum.UNIVARIATE_STATISTICS__AVERAGE.getName(),Double.class);  StatViewAdditionalProps.addCheckDupProperties(eventTypeMap,additionalProps,ViewFieldEnum.UNIVARIATE_STATISTICS__DATAPOINTS,ViewFieldEnum.UNIVARIATE_STATISTICS__TOTAL,ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEV,ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEVPA,ViewFieldEnum.UNIVARIATE_STATISTICS__VARIANCE,ViewFieldEnum.UNIVARIATE_STATISTICS__AVERAGE);  String outputEventTypeName=statementContext.getStatementId() + "_statview_" + streamNum;  return statementContext.getEventAdapterService().createAnonymousMapType(outputEventTypeName,eventTypeMap,false);}  }
class C{  public void removeEmptySoftbuttons(){  if (left != null && left.getParent() != null && "".equals(left.getText())) {    left.getParent().removeComponent(left);    revalidate();  }  if (right != null && right.getParent() != null && "".equals(right.getText())) {    right.getParent().removeComponent(right);    revalidate();  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new ExceptionsAttribute(newCp,this,classnames);}  }
class C{  public void decode(final String encoded){  int len;  int pos;  int epos;  int cpos;  String name;  String value;  list.clear();  len=encoded.length();  pos=0;  while (pos < len) {    cpos=encoded.indexOf(':',pos);    if (cpos == -1) {      cpos=len;    }    epos=encoded.indexOf('=',pos);    if ((epos == -1) || (epos > cpos)) {      epos=cpos;    }    name=encoded.substring(pos,epos);    if (epos < cpos) {      value=encoded.substring(epos + 1,cpos);    } else {      value="";    }    list.put(name,value);    pos=cpos + 1;  }}  }
class C{  public Building(int bldgClass,int type,int id,String name,Vector<Coords> coords){  this.bldgClass=bldgClass;  this.type=type;  this.id=id;  this.name=name;  coordinates=coords;  for (  Coords coord : coordinates) {    currentCF.put(coord,getDefaultCF(this.type));    phaseCF.putAll(currentCF);    armor.put(coord,0);    if (getDefaultCF(this.type) == Building.UNKNOWN) {      throw new IllegalArgumentException("Invalid construction type: " + this.type + ".");    }    basement.put(coord,BasementType.UNKNOWN);    basementCollapsed.put(coord,false);  }}  }
class C{  private NameID createNameId(String subject,String format){  assert subject != null;  assert format != null;  NameID nameId=new NameIDBuilder().buildObject();  nameId.setValue(subject);  nameId.setFormat(format);  log.debug("Created nameId: {}",subject);  return nameId;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() - right.num());}  }
class C{  private void addFileStreamEntries(String kind){  Obligation obligation=database.getFactory().addObligation("java.io." + kind);  database.addEntry(new MatchMethodEntry(new SubtypeTypeMatcher(BCELUtil.getObjectTypeInstance("java.io.File" + kind)),new ExactStringMatcher("<init>"),new RegexStringMatcher(".*"),false,ObligationPolicyDatabaseActionType.ADD,ObligationPolicyDatabaseEntryType.STRONG,obligation));  database.addEntry(new MatchMethodEntry(new SubtypeTypeMatcher(BCELUtil.getObjectTypeInstance("java.io." + kind)),new ExactStringMatcher("close"),new ExactStringMatcher("()V"),false,ObligationPolicyDatabaseActionType.DEL,ObligationPolicyDatabaseEntryType.STRONG,obligation));}  }
class C{  public StringBufferWriter(StringBuffer buffer){  this.buffer=buffer;}  }
class C{  private static String hextetsToIPv6String(int[] hextets){  StringBuilder buf=new StringBuilder(39);  boolean lastWasNumber=false;  for (int i=0; i < hextets.length; i++) {    boolean thisIsNumber=hextets[i] >= 0;    if (thisIsNumber) {      if (lastWasNumber) {        buf.append(':');      }      buf.append(Integer.toHexString(hextets[i]));    } else {      if (i == 0 || lastWasNumber) {        buf.append("::");      }    }    lastWasNumber=thisIsNumber;  }  return buf.toString();}  }
class C{  private String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  @Override public final void preTearDown() throws Exception {  map.clear();  closeCache();  clientVM1.invoke(null);  clientVM2.invoke(null);  serverVM0.invoke(null);  serverVM1.invoke(null);  serverVM0.invoke(null);  serverVM1.invoke(null);  disconnectAllFromDS();}  }
class C{  HeapArrayOfDoublesIntersection(final int numValues,final long seed){  super(numValues,seed);}  }
class C{  public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static String simpleExceptionName(RegressionTestChromosome test,Integer statementPos,Throwable ex){  if (ex == null)   return "";  String exception=ex.getClass().getSimpleName();  if (test.getTheTest().getTestCase().hasStatement(statementPos)) {    Statement exThrowingStatement=test.getTheTest().getTestCase().getStatement(statementPos);    if (exThrowingStatement instanceof MethodStatement) {      String exMethodcall=((MethodStatement)exThrowingStatement).getMethod().getName();      exception=exMethodcall + ":" + exception;    }  }  return exception;}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.INVOICE,getC_Invoice_ID(),get_TrxName());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  public void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  private float bytesToFloat(byte b0,byte b1){  int mantissa=unsignedToSigned(unsignedByteToInt(b0) + ((unsignedByteToInt(b1) & 0x0F) << 8),12);  int exponent=unsignedToSigned(unsignedByteToInt(b1) >> 4,4);  return (float)(mantissa * Math.pow(10,exponent));}  }
class C{  public final static void initializeDefaultUserAgentStylesheet(){  StyleManager.getInstance().addUserAgentStylesheet(DockPane.class.getResource("default.css").toExternalForm());}  }
class C{  public double[] toGeocentricFrame(LatLonPoint llpt){  double ecef[]=new double[3];  double ned[]=new double[3];  double lat_=llpt.getY();  double lon_=llpt.getX();  double latitude=ProjMath.degToRad(lat_);  double longitude=ProjMath.degToRad(lon_);  ned2ecef(ned,latitude,longitude,ecef);  return ecef;}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomgdetail","EditableOMScalingRaster.render()");  State state=getStateMachine().getState();  if (raster == null) {    Debug.message("eomg","EditableOMScalingRaster.render: null rect.");    return;  }  raster.setVisible(true);  raster.render(graphics);  raster.setVisible(false);  int renderType=raster.getRenderType();  if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {    for (int i=0; i < gPoints.length; i++) {      GrabPoint gp=gPoints[i];      if (gp != null) {        if ((i == OFFSET_POINT_INDEX && renderType == OMGraphic.RENDERTYPE_OFFSET && movingPoint == gpo) || (state instanceof GraphicSelectedState && ((i != OFFSET_POINT_INDEX && renderType != OMGraphic.RENDERTYPE_OFFSET) || (renderType == OMGraphic.RENDERTYPE_OFFSET)))) {          gp.setVisible(true);          gp.render(graphics);          gp.setVisible(false);        }      }    }  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public ScaleInAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  private void awaitTermination(){  try {    executor.awaitTermination(400,TimeUnit.MILLISECONDS);  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void initializeSerialNode(SerialNode node){synchronized (this) {    for (int i=0; i < getNumNodes(); i++) {      if (getNode(i) == node) {        setMustInit(i,true);        return;      }    }  }}  }
class C{  @Override public void createGroupClone(StorageSystem storage,List<URI> cloneList,Boolean createInactive,TaskCompleter taskCompleter){  _log.info("START create group clone operation");  CIMObjectPath targetGroupPath=null;  List<String> targetDeviceIds=null;  String sourceGroupName=null;  try {    final Volume first=_dbClient.queryObject(Volume.class,cloneList.get(0));    Volume sourceVolume=_dbClient.queryObject(Volume.class,first.getAssociatedSourceVolume());    sourceGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVolume,_dbClient);    URI tenant=sourceVolume.getTenant().getURI();    TenantOrg tenantOrg=_dbClient.queryObject(TenantOrg.class,tenant);    String targetGroupLabel=generateLabel(tenantOrg,sourceVolume);    ReplicationUtils.checkReplicationGroupAccessibleOrFail(storage,sourceVolume,_dbClient,_helper,_cimPath);    final Map<String,List<Volume>> clonesBySizeMap=new HashMap<String,List<Volume>>();    List<Volume> clones=_dbClient.queryObject(Volume.class,cloneList);    if (storage.checkIfVmax3() || !storage.getUsingSmis80()) {      targetDeviceIds=new ArrayList<String>();      for (      Volume clone : clones) {        final URI poolId=clone.getPool();        Volume source=_dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());        final List<String> newDeviceIds=ReplicationUtils.createTargetDevices(storage,sourceGroupName,clone.getLabel(),createInactive,1,poolId,clone.getCapacity(),source.getThinlyProvisioned(),source,taskCompleter,_dbClient,_helper,_cimPath);        targetDeviceIds.addAll(newDeviceIds);      }      targetGroupPath=ReplicationUtils.createTargetDeviceGroup(storage,sourceGroupName,targetDeviceIds,taskCompleter,_dbClient,_helper,_cimPath,SYNC_TYPE.CLONE);    }    CIMObjectPath job=VmaxGroupOperationsUtils.internalCreateGroupReplica(storage,sourceGroupName,targetGroupLabel,targetGroupPath,createInactive,taskCompleter,SYNC_TYPE.CLONE,_dbClient,_helper,_cimPath);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisCreateCGCloneJob(job,storage.getId(),!createInactive,taskCompleter)));    }  } catch (  Exception e) {    final String errMsg=format("An exception occurred when trying to create clones for consistency group {0} on storage system {1}",sourceGroupName,storage.getId());    _log.error(errMsg,e);    ReplicationUtils.rollbackCreateReplica(storage,targetGroupPath,targetDeviceIds,taskCompleter,_dbClient,_helper,_cimPath);    List<Volume> clones=_dbClient.queryObject(Volume.class,cloneList);    for (    Volume clone : clones) {      clone.setInactive(true);    }    _dbClient.persistObject(clones);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createGroupClones",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static void valueToDocument(Value value,String rootNodeName,Document document){  Element root=document.createElement(rootNodeName);  document.appendChild(root);  _valueToDocument(value,root,document);}  }
class C{  public void keyTyped(KeyEvent e){  JList src=(JList)e.getSource();  ListModel model=src.getModel();  if (model.getSize() == 0 || e.isAltDown() || BasicGraphicsUtils.isMenuShortcutKeyDown(e) || isNavigationKey(e)) {    return;  }  boolean startingFromSelection=true;  char c=e.getKeyChar();  long time=e.getWhen();  int startIndex=adjustIndex(src.getLeadSelectionIndex(),list);  if (time - lastTime < timeFactor) {    typedString+=c;    if ((prefix.length() == 1) && (c == prefix.charAt(0))) {      startIndex++;    } else {      prefix=typedString;    }  } else {    startIndex++;    typedString="" + c;    prefix=typedString;  }  lastTime=time;  if (startIndex < 0 || startIndex >= model.getSize()) {    startingFromSelection=false;    startIndex=0;  }  int index=src.getNextMatch(prefix,startIndex,Position.Bias.Forward);  if (index >= 0) {    src.setSelectedIndex(index);    src.ensureIndexIsVisible(index);  } else   if (startingFromSelection) {    index=src.getNextMatch(prefix,0,Position.Bias.Forward);    if (index >= 0) {      src.setSelectedIndex(index);      src.ensureIndexIsVisible(index);    }  }}  }
class C{  protected static byte[] parseContentType(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map){  assert (null != pduDataStream);  byte[] contentType=null;  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  int cur=(temp & 0xFF);  if (cur < TEXT_MIN) {    int length=parseValueLength(pduDataStream);    int startPos=pduDataStream.available();    pduDataStream.mark(1);    temp=pduDataStream.read();    assert (-1 != temp);    pduDataStream.reset();    int first=(temp & 0xFF);    if ((first >= TEXT_MIN) && (first <= TEXT_MAX)) {      contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);    } else     if (first > TEXT_MAX) {      int index=parseShortInteger(pduDataStream);      if (index < PduContentTypes.contentTypes.length) {        contentType=(PduContentTypes.contentTypes[index]).getBytes();      } else {        pduDataStream.reset();        contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);      }    } else {      return (PduContentTypes.contentTypes[0]).getBytes();    }    int endPos=pduDataStream.available();    int parameterLen=length - (startPos - endPos);    if (parameterLen > 0) {      parseContentTypeParams(pduDataStream,map,parameterLen);    }    if (parameterLen < 0) {      return (PduContentTypes.contentTypes[0]).getBytes();    }  } else   if (cur <= TEXT_MAX) {    contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);  } else {    contentType=(PduContentTypes.contentTypes[parseShortInteger(pduDataStream)]).getBytes();  }  return contentType;}  }
class C{  public static boolean deleteRecursive(File fileOrDirectory){  if (fileOrDirectory.isDirectory()) {    File[] list=fileOrDirectory.listFiles();    if (list == null) {      return false;    }    for (    File f : list) {      if (!deleteRecursive(f)) {        return false;      }    }  }  if (!fileOrDirectory.delete()) {    if (fileOrDirectory.exists()) {      return false;    }  }  return true;}  }
class C{  protected IssueCommentsEntry makeUpdatingComment(){  Person author=new Person();  author.setName(username);  Updates updates=new Updates();  updates.setSummary(new Summary("New issue summary"));  updates.setStatus(new Status("Accepted"));  updates.setOwnerUpdate(new OwnerUpdate(username));  updates.addLabel(new Label("-Priority-High"));  updates.addLabel(new Label("Priority-Low"));  updates.addLabel(new Label("-Milestone-2009"));  updates.addLabel(new Label("Milestone-2010"));  updates.addLabel(new Label("Type-Enhancement"));  updates.addCcUpdate(new CcUpdate("-" + username));  IssueCommentsEntry entry=new IssueCommentsEntry();  entry.getAuthors().add(author);  entry.setContent(new HtmlTextConstruct("some comment"));  entry.setUpdates(updates);  entry.setSendEmail(new SendEmail("False"));  return entry;}  }
class C{  private synchronized void openCamera(){  if (mCamera != null) {    if (LogUtils.isActive) {      Log.d(LOGTAG,"Already opened camera");    }    return;  }  openCamera(mOpenedCameraId);  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {    mVideoView.setAspectRatio(mVideoWidth,mVideoHeight);  } else {    mVideoView.setAspectRatio(mVideoHeight,mVideoWidth);  }  mCamera.setPreviewCallback(mVideoPlayer);  startCameraPreview();}  }
class C{  public String types(){  return "Line Segments";}  }
class C{  public <T>T to(String tailAPIUrl,Class<T> type,T instance) throws IOException {  HttpURLConnection connection=null;  try {    connection=setupConnection(root.getAPIUrl(tailAPIUrl));    if (hasOutput()) {      submitData(connection);    } else     if ("PUT".equals(method)) {      connection.setDoOutput(true);      connection.setFixedLengthStreamingMode(0);    }    try {      return parse(connection,type,instance);    } catch (    IOException e) {      handleAPIError(e,connection);    }    return null;  }  finally {    if (connection != null) {      connection.disconnect();    }  }}  }
class C{  public SimpleQuantifier createSimpleQuantifier(){  SimpleQuantifierImpl simpleQuantifier=new SimpleQuantifierImpl();  return simpleQuantifier;}  }
class C{  private static String join(String... regex){  List<String> ss=Arrays.asList(regex);  return ListHelper.join(ss,"");}  }
class C{  void resize(int newCapacity){  Entry[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  public boolean isDeterministic(){  return deterministic;}  }
class C{  public void addBlock(BlockPosition blockPos){  if (!graph.contains(blockPos) && blobHandler.canFormBlob()) {    graph.add(blockPos,getPositionsToAdd(blockPos));  }}  }
class C{  public void clearAll(){  final List<EncodedImage> old;synchronized (this) {    old=new ArrayList<>(mMap.values());    mMap.clear();  }  for (int i=0; i < old.size(); i++) {    EncodedImage encodedImage=old.get(i);    if (encodedImage != null) {      encodedImage.close();    }  }}  }
class C{  private int generateCustomActivityRequestCode(AppRestrictionsPreference preference){  mCustomRequestCode++;  mCustomRequestMap.put(mCustomRequestCode,preference);  return mCustomRequestCode;}  }
class C{  private boolean closeInternal(ErrorCode errorCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.errorCode != null) {      return false;    }    if (in.finished && out.finished) {      return false;    }    this.errorCode=errorCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  protected void showToast(int resId){  hideToast();  mToast=Toast.makeText(this,resId,Toast.LENGTH_SHORT);  mToast.show();}  }
class C{  public thead addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public SuperBit(final int d){  this(d,d,DEFAULT_CODE_LENGTH / d);}  }
class C{  @Override public void boundsInvalidated(ToolEvent e){  fireBoundsInvalidated(e.getInvalidatedArea());}  }
class C{  public void testReadonlyNoWrite() throws Exception {  File logDir=prepareLogDir("testReadonlyNoWrite");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  THLEvent e0=this.createTHLEvent(0);  conn.store(e0,false);  conn.commit();  conn.release();  conn=log.connect(true);  THLEvent e1=this.createTHLEvent(1);  try {    conn.store(e1,false);    throw new Exception("Read-only connection writes to log");  } catch (  THLException e) {  }  try {    conn.commit();    throw new Exception("Read-only connection commits to log");  } catch (  THLException e) {  }  conn.release();  log.release();  log=this.openLog(logDir,true);  conn=log.connect(false);  try {    conn.store(e1,false);    throw new Exception("Read-only connection writes to log");  } catch (  THLException e) {  }  try {    conn.commit();    throw new Exception("Read-only connection commits to log");  } catch (  THLException e) {  }  conn.release();  log.release();}  }
class C{  private void executeResumeWorkflow(StorageSystem storageSystem,List<URI> readOnlyVolumes,Copy copy,String op,String task){  String waitFor=null;  List<URI> volumeURIs=getCompleterVolumesForSRDFProtectionOperaton(copy);  VolumeWorkflowCompleter completer=new VolumeWorkflowCompleter(volumeURIs,task);  try {    Workflow workflow=workflowService.getNewWorkflow(this,"performSRDFResumeOperation",true,task,completer);    StringBuilder volNames=new StringBuilder();    waitFor=vplexConsistencyGroupManager.addStepForUpdateConsistencyGroupReadOnlyState(workflow,readOnlyVolumes,true,"Set CG state to read-only: " + volNames,waitFor);    Workflow.Method performProtectionOperationMethod=srdfDeviceController.performProtectionOperationMethod(storageSystem.getId(),copy,op);    Workflow.Method nullRollbackMethod=srdfDeviceController.rollbackMethodNullMethod();    String srdfStep=workflow.createStep(SRDF_PROTECTION_OPERATION,"SRDFProtectionOperation: " + op,waitFor,storageSystem.getId(),storageSystem.getSystemType(),false,srdfDeviceController.getClass(),performProtectionOperationMethod,nullRollbackMethod,false,null);    workflow.executePlan(completer,"Sucessful workflow for SRDF Resume Operation" + copy.getCopyID().toString());  } catch (  Exception ex) {    s_logger.error("Could not create vplex-srdf resume workflow",ex);    ServiceError error=DeviceControllerException.errors.jobFailed(ex);    completer.error(dbClient,error);  }}  }
class C{  protected boolean checkDrawerItem(int position,boolean includeOffset){  return getAdapter().getItem(position) != null;}  }
class C{  public T sample(){  double v=rnd.nextDouble() * tree.getRoot().value;  EVNode<T> node=binSearch(v);  if (!withReplacement) {    double value=node.value;    EVNode<T> parent=node.getParent();    if (parent.getLeftChild() == node) {      parent.setLeftChild(null);    } else {      parent.setRightChild(null);    }    while (parent != null) {      parent.value-=value;      parent=(EVNode<T>)parent.getParent();    }    n--;  }  return node.elem;}  }
class C{  static String floatToString(float f,int precision){  String s=Float.toString(f);  int i=s.lastIndexOf('.');  if (i == -1)   return s;  int end=i + precision + 1;  return (end < s.length()) ? s.substring(0,end) : s;}  }
class C{  public static boolean equals(final Object obj1,final Object obj2){  return (obj1 != null && obj1.equals(obj2));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAchievement[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  @DSComment("Wifi subsystem") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.437 -0500",hash_original_method="D7CEEF49E1A909FEFC04FBB22CAEF31F",hash_generated_method="6E5AE3C21361B5E024A600F344792BD5") public boolean isHeld(){synchronized (mBinder) {    return mHeld;  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public int size(){  return size;}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    Map<?,?> map=(Map<?,?>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    Collection<?> coll=(Collection<?>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  private void doSearchQuery(final Intent queryIntent,final String entryPoint){  final String queryString=queryIntent.getStringExtra(SearchManager.QUERY);  mQueryText.setText(queryString);  SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SearchSuggestionSampleProvider.AUTHORITY,SearchSuggestionSampleProvider.MODE);  suggestions.saveRecentQuery(queryString,null);  final Bundle appData=queryIntent.getBundleExtra(SearchManager.APP_DATA);  if (appData == null) {    mAppDataText.setText("<no app data bundle>");  }  if (appData != null) {    String testStr=appData.getString("demo_key");    mAppDataText.setText((testStr == null) ? "<no app data>" : testStr);  }  mDeliveredByText.setText(entryPoint);}  }
class C{  public AuthorView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  private String _serializeDateTime(DateTime dateTime){  String strDate=new lucee.runtime.format.DateFormat(Locale.US).format(dateTime,"yyyy-m-d",TimeZoneConstants.UTC);  String strTime=new lucee.runtime.format.TimeFormat(Locale.US).format(dateTime,"H:m:s",TimeZoneConstants.UTC);  return goIn() + "<dateTime>" + strDate+ "T"+ strTime+ "+0:0"+ "</dateTime>";}  }
class C{  public boolean isWatchOptionAllowed(){  return watchOptionAllowed;}  }
class C{  public static boolean hasFroyo(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;}  }
class C{  public final void deleteBatchCommand(final ArrayList<Integer> ids){  for (  final int id : ids) {    deleteConfirmed(id);  }}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  long previousSum=0L;  int lockCount=0;  try {    for (int retries=-1; ; retries++) {      long sum=0L;      for (int j=0; j < segments.length; j++) {        Segment<K,V> segment;        if (retries == RETRIES_BEFORE_LOCK) {          segment=ensureSegment(j);          segment.lock();          lockCount++;        } else {          segment=segmentAt(segments,j);          if (segment == null)           continue;        }        HashEntry<K,V>[] tab=segment.table;        if (tab != null) {          for (int i=0; i < tab.length; i++) {            HashEntry<K,V> e;            for (e=entryAt(tab,i); e != null; e=e.next) {              V v=e.value;              if (v != null && value.equals(v))               return true;            }          }          sum+=segment.modCount;        }      }      if ((retries >= 0 && sum == previousSum) || lockCount > 0)       return false;      previousSum=sum;    }  }  finally {    for (int j=0; j < lockCount; j++)     segments[j].unlock();  }}  }
class C{  public Task attachDisk(String vmId,VmDiskOperation vmDiskOperation) throws IOException {  String path=String.format("%s/%s/attach_disk",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(vmDiskOperation));  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  public static Sector fromRadians(double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  return new Sector(Angle.fromRadians(minLatitude),Angle.fromRadians(maxLatitude),Angle.fromRadians(minLongitude),Angle.fromRadians(maxLongitude));}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPointsToUse=10;  int numPoints=0;  int lineNum=0;  int nlines=0;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<XYPoint>> results;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<XYPoint> pointsTree=new KdTree.SqrEuclid<XYPoint>(2,numPoints);    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            XYPoint pnt=new XYPoint(x,y);            double[] entry={y,x};            pointsTree.addPoint(entry,pnt);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double northing, easting;    double halfResolution=resolution / 2;    double area=0;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);        minX=Double.POSITIVE_INFINITY;        maxX=Double.NEGATIVE_INFINITY;        minY=Double.POSITIVE_INFINITY;        maxY=Double.NEGATIVE_INFINITY;        for (i=0; i < results.size(); i++) {          x=results.get(i).value.x;          y=results.get(i).value.y;          if (x < minX) {            minX=x;          }          if (x > maxX) {            maxX=x;          }          if (y < minY) {            minY=y;          }          if (y > maxY) {            maxY=y;          }        }        area=(maxX - minX) * (maxY - minY);        if (area > 0) {          image.setValue(row,col,area / numPointsToUse);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  float h=getFloat(stack);  float w=getFloat(stack);  float y=getFloat(stack);  float x=getFloat(stack);  if (!Sage.EMBEDDED)   stack.getUIMgrSafe().setEmbeddedBounds(x,y,w,h);  return null;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public JobManagerServlet(BaleenJobManager manager){  super("jobs",manager,JobManagerServlet.class);}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  Collection<MailAddress> recipients=new ArrayList<MailAddress>(mail.getRecipients());  Collection<MailAddress> matchedRcpts=wrappedMatcher.match(mail);  if (matchedRcpts != null) {    recipients.removeAll(matchedRcpts);    if (recipients.isEmpty()) {      return null;    }  }  return recipients;}  }
class C{  protected void initializeSortIndices(){  int i;  m_SortedIndices=new int[getUnsortedModel().getRowCount()];  for (i=0; i < m_SortedIndices.length; i++)   m_SortedIndices[i]=i;}  }
class C{  private void assignTutorialIntent(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_miscellaneous_key);  final Preference prefTutorial=findPreferenceByResId(R.string.pref_tutorial_key);  if ((category == null) || (prefTutorial == null)) {    return;  }  final int touchscreenState=getResources().getConfiguration().touchscreen;  if (touchscreenState == Configuration.TOUCHSCREEN_NOTOUCH) {    category.removePreference(prefTutorial);    return;  }  final Intent tutorialIntent=new Intent(this,AccessibilityTutorialActivity.class);  tutorialIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  tutorialIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  prefTutorial.setIntent(tutorialIntent);}  }
class C{  @Override public void onErrorResponse(VolleyError error){}  }
class C{  public SpanQuery snear(String s,String e,int slop,boolean inOrder){  return snear(st(s),st(e),slop,inOrder);}  }
class C{  public void generateLogicalOr(BlockScope currentScope,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,valueRequired);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      } else {        this.left.generateCode(currentScope,valueRequired);        this.right.generateCode(currentScope,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public void loadHistory(SourceInfo startingPoint){  tables=new Tables();  dbHistory.recover(startingPoint.partition(),startingPoint.offset(),tables,ddlParser);  refreshSchemas();}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++) {        output.print(' ');      }      output.print(s);    }    output.println();  }  output.println();}  }
class C{  public void add(Annotation... annotations){  add(Arrays.asList(annotations));}  }
class C{  public void testTrackColorSettings_dynamic(){  testTrackColor(R.string.settings_map_track_color_mode_dynamic,R.string.settings_map_track_color_mode_dynamic_summary);}  }
class C{  public void paintEditorPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private static void searchAllDocs() throws IOException {  System.out.println("Searching for document...");  final SolrQuery query=new SolrQuery(QUERY_MATCHING_ANY_DOCUMENT);  try {    final QueryResponse response=solrClient.query(COLLECTION_NAME,query);    System.out.println("Found " + response.getResults().size() + " documents!");    System.out.println(response);  } catch (  final SolrServerException e) {    throw new RuntimeException("Failed to search!",e);  }}  }
class C{  public void addSubtitle(String subtitle){  this.chart.addSubtitle(new TextTitle(subtitle));}  }
class C{  private Object proxyIfInterfaceIsJdbc(Object toProxy,Class<?> clazz){  Class<?>[] interfaces=clazz.getInterfaces();  for (  Class<?> iclass : interfaces) {    String packageName=iclass.getPackage().getName();    if ("java.sql".equals(packageName) || "javax.sql".equals(packageName)) {      return Proxy.newProxyInstance(toProxy.getClass().getClassLoader(),interfaces,new ConnectionErrorFiringInvocationHandler(toProxy));    }    return proxyIfInterfaceIsJdbc(toProxy,iclass);  }  return toProxy;}  }
class C{  public void message(LocoNetMessage m){  if (handleMessageIplResult(m)) {    return;  }  if (handleMessageDuplexInfoQuery(m)) {    gotQueryReply=true;    thisone.firePropertyChange(DPLX_PC_RCD_DPLX_IDENTITY_QUERY,false,true);    return;  }  if (handleMessageDuplexInfoReport(m)) {    gotQueryReply=true;    thisone.firePropertyChange(DPLX_PC_RCD_DPLX_IDENTITY_REPORT,false,true);    return;  }  return;}  }
class C{  public boolean isAllowedToTransferFileToGroupChat(String chatId) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mApi.isAllowedToTransferFileToGroupChat(chatId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>Segment<K,V> segmentAt(Segment<K,V>[] ss,int j){  long u=(j << SSHIFT) + SBASE;  return ss == null ? null : (Segment<K,V>)UNSAFE.getObjectVolatile(ss,u);}  }
class C{  public static void deleteAllPhoto(String path){  if (checkSDCardAvailable()) {    File folder=new File(path);    File[] files=folder.listFiles();    for (int i=0; i < files.length; i++) {      files[i].delete();    }  }}  }
class C{  public synchronized void log(String message){  if (DO_LOG && (out != null)) {    out.println("[" + this + "]: "+ message);  }}  }
class C{  public CronTrigger deepCopy(){  return new CronTrigger(this);}  }
class C{  private void mergeWindow(List<WindowedValue<KV<K,AccumT>>> elements){  int currentStart=0;  IntervalWindow currentWindow=(IntervalWindow)Iterables.getOnlyElement(elements.get(0).getWindows());  for (int i=1; i < elements.size(); i++) {    WindowedValue<KV<K,AccumT>> nextValue=elements.get(i);    IntervalWindow nextWindow=(IntervalWindow)Iterables.getOnlyElement(nextValue.getWindows());    if (currentWindow.intersects(nextWindow)) {      currentWindow=currentWindow.span(nextWindow);    } else {      for (int j=i - 1; j >= currentStart; j--) {        WindowedValue<KV<K,AccumT>> value=elements.get(j);        elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));      }      currentStart=i;      currentWindow=nextWindow;    }  }  if (currentStart < elements.size() - 1) {    for (int j=elements.size() - 1; j >= currentStart; j--) {      WindowedValue<KV<K,AccumT>> value=elements.get(j);      elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));    }  }}  }
class C{  public Heap(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public static double partialCovariance(TetradMatrix submatrix){  double covXy=submatrix.get(0,1);  int[] _z=new int[submatrix.rows() - 2];  for (int i=0; i < submatrix.rows() - 2; i++)   _z[i]=i + 2;  TetradMatrix covXz=submatrix.getSelection(new int[]{0},_z).copy();  TetradMatrix covZy=submatrix.getSelection(_z,new int[]{1}).copy();  TetradMatrix covZ=submatrix.getSelection(_z,_z).copy();  TetradMatrix _zInverse=covZ.inverse();  TetradMatrix temp1=covXz.times(_zInverse);  TetradMatrix temp2=temp1.times(covZy);  return covXy - temp2.get(0,0);}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public final void addPane(final OptionsPane pane){  MAIN_PANEL.add(pane.getContainer(),pane.getName());  OPTIONS_PANE_LIST.add(pane);}  }
class C{  protected void deleteLinksOnPort(NodePortTuple npt,String reason){  List<Link> eraseList=new ArrayList<Link>();  if (this.portLinks.containsKey(npt)) {    if (log.isTraceEnabled()) {      log.trace("handlePortStatus: Switch {} port #{} " + "removing links {}",new Object[]{npt.getNodeId().toString(),npt.getPortId(),this.portLinks.get(npt)});    }    eraseList.addAll(this.portLinks.get(npt));    deleteLinks(eraseList,reason);  }}  }
class C{  public PrintItemBarcode(String type,String position,String code,double scale){  m_sCode=code;  this.scale=1.5;  if (DevicePrinter.BARCODE_CODE128.equals(type)) {    m_barcode=new Code128Bean();  } else {    m_barcode=new EAN13Bean();  }  if (m_barcode != null) {    m_barcode.setModuleWidth(1.0);    m_barcode.setBarHeight(40.0);    m_barcode.setFontSize(10.0);    m_barcode.setQuietZone(10.0);    m_barcode.doQuietZone(true);    if (DevicePrinter.POSITION_NONE.equals(position)) {      m_barcode.setMsgPosition(HumanReadablePlacement.HRP_NONE);    } else {      m_barcode.setMsgPosition(HumanReadablePlacement.HRP_BOTTOM);    }    BarcodeDimension dim=m_barcode.calcDimensions(m_sCode);    m_iWidth=(int)dim.getWidth(0);    m_iHeight=(int)dim.getHeight(0);  }}  }
class C{  public Collection<ClusterNode> topologyNodes(){  return topNodes;}  }
class C{  public static int parseErrorCode(String parsedMessage){  try {    JSONValue message=JSONParser.parseStrict(parsedMessage).isObject().get("errorCode");    return new Double(message.isNumber().doubleValue()).intValue();  } catch (  Exception e) {    return -1;  }}  }
class C{  protected AbstractMatrix2D vColumnFlip(){  if (columns > 0) {    columnZero+=(columns - 1) * columnStride;    columnStride=-columnStride;    this.isNoView=false;  }  return this;}  }
class C{  private boolean checkSupportedControl(final String control,final LdapContextConfig ldapContextConfig){  LdapContextSource ctxSource=new LdapContextSource();  ctxSource.setUrl(ldapContextConfig.getLdapUrl());  ctxSource.setUserDn(ldapContextConfig.getLdapUser());  ctxSource.setPassword(ldapContextConfig.getLdapPassword());  DirContext context=null;  boolean ret=false;  try {    ctxSource.afterPropertiesSet();    context=ctxSource.getReadWriteContext();    Attributes attrs=context.getAttributes("",new String[]{LdapConstants.SUPPORTED_CONTROL_ATTRIBUTE});    Attribute attr=attrs.get(LdapConstants.SUPPORTED_CONTROL_ATTRIBUTE);    for (int i=0; i < attr.size(); ++i) {      if (attr.get(i).equals(control)) {        ret=true;        break;      }    }  } catch (  Exception e) {    LdapLogDebugUtils.generateDebug(LdapErrorCodes.ERR_10010_CONTROL_NOT_SUPPORTED_ERROR,LOGGER,e);  } finally {    if (context != null) {      try {        context.close();      } catch (      javax.naming.NamingException e) {        LdapLogDebugUtils.generateDebug(LdapErrorCodes.ERR_10010_CONTROL_NOT_SUPPORTED_ERROR,LOGGER,e);      }    }  }  return ret;}  }
class C{  public static final TColor newHex(String hexRGB){  TColor c=new TColor();  if (hexRGB.length() <= 6) {    c.setRGB(hexToRGB(hexRGB));    c.alpha=1;  } else   if (hexRGB.length() == 8) {    c.setRGB(hexToRGB(hexRGB));    c.setAlpha(Integer.parseInt(hexRGB.substring(0,2),16) * INV8BIT);  }  return c;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  protected void drawSimpleEdge(RenderContext<V,E> rc,Layout<V,E> layout,E e){  TransformingGraphics g=(TransformingGraphics)rc.getGraphicsContext();  Graph<V,E> graph=layout.getGraph();  Pair<V> endpoints=graph.getEndpoints(e);  V v1=endpoints.getFirst();  V v2=endpoints.getSecond();  Point2D p1=layout.apply(v1);  Point2D p2=layout.apply(v2);  p1=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,p1);  p2=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,p2);  float x1=(float)p1.getX();  float y1=(float)p1.getY();  float x2=(float)p2.getX();  float y2=(float)p2.getY();  float flatness=0;  MutableTransformer transformer=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (transformer instanceof LensTransformer) {    LensTransformer ht=(LensTransformer)transformer;    RectangularShape lensShape=ht.getLensShape();    if (lensShape.contains(x1,y1) || lensShape.contains(x2,y2)) {      flatness=.05f;    }  }  boolean isLoop=v1.equals(v2);  Shape s2=rc.getVertexShapeTransformer().apply(v2);  Shape edgeShape=rc.getEdgeShapeTransformer().apply(e);  boolean edgeHit=true;  boolean arrowHit=true;  Rectangle deviceRectangle=null;  JComponent vv=rc.getScreenDevice();  if (vv != null) {    Dimension d=vv.getSize();    deviceRectangle=new Rectangle(0,0,d.width,d.height);  }  AffineTransform xform=AffineTransform.getTranslateInstance(x1,y1);  if (isLoop) {    Rectangle2D s2Bounds=s2.getBounds2D();    xform.scale(s2Bounds.getWidth(),s2Bounds.getHeight());    xform.translate(0,-edgeShape.getBounds2D().getWidth() / 2);  } else {    float dx=x2 - x1;    float dy=y2 - y1;    float thetaRadians=(float)Math.atan2(dy,dx);    xform.rotate(thetaRadians);    float dist=(float)Math.sqrt(dx * dx + dy * dy);    xform.scale(dist,1.0);  }  edgeShape=xform.createTransformedShape(edgeShape);  MutableTransformer vt=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (vt instanceof LensTransformer) {    vt=((LensTransformer)vt).getDelegate();  }  edgeHit=vt.transform(edgeShape).intersects(deviceRectangle);  if (edgeHit == true) {    Paint oldPaint=g.getPaint();    Paint fill_paint=rc.getEdgeFillPaintTransformer().apply(e);    if (fill_paint != null) {      g.setPaint(fill_paint);      g.fill(edgeShape,flatness);    }    Paint draw_paint=rc.getEdgeDrawPaintTransformer().apply(e);    if (draw_paint != null) {      g.setPaint(draw_paint);      g.draw(edgeShape,flatness);    }    float scalex=(float)g.getTransform().getScaleX();    float scaley=(float)g.getTransform().getScaleY();    if (scalex < .3 || scaley < .3)     return;    if (rc.getEdgeArrowPredicate().apply(Context.<Graph<V,E>,E>getInstance(graph,e))) {      Shape destVertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getSecond());      AffineTransform xf=AffineTransform.getTranslateInstance(x2,y2);      destVertexShape=xf.createTransformedShape(destVertexShape);      arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(destVertexShape).intersects(deviceRectangle);      if (arrowHit) {        AffineTransform at=edgeArrowRenderingSupport.getArrowTransform(rc,new GeneralPath(edgeShape),destVertexShape);        if (at == null)         return;        Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));        arrow=at.createTransformedShape(arrow);        g.setPaint(rc.getArrowFillPaintTransformer().apply(e));        g.fill(arrow);        g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));        g.draw(arrow);      }      if (graph.getEdgeType(e) == EdgeType.UNDIRECTED) {        Shape vertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getFirst());        xf=AffineTransform.getTranslateInstance(x1,y1);        vertexShape=xf.createTransformedShape(vertexShape);        arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(vertexShape).intersects(deviceRectangle);        if (arrowHit) {          AffineTransform at=edgeArrowRenderingSupport.getReverseArrowTransform(rc,new GeneralPath(edgeShape),vertexShape,!isLoop);          if (at == null)           return;          Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));          arrow=at.createTransformedShape(arrow);          g.setPaint(rc.getArrowFillPaintTransformer().apply(e));          g.fill(arrow);          g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));          g.draw(arrow);        }      }    }    if (draw_paint == null)     g.setPaint(oldPaint);    g.setPaint(oldPaint);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatabegining.class,args);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.MARKER__KEY:    setKey(KEY_EDEFAULT);  return;case DomPackage.MARKER__VALUE:setValue(VALUE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  protected static DatabaseConfigService makeDatabaseRefService(ConfigurationInformation configSnapshot,SchedulingService schedulingService,SchedulingMgmtService schedulingMgmtService){  DatabaseConfigService databaseConfigService;  try {    ScheduleBucket allStatementsBucket=schedulingMgmtService.allocateBucket();    databaseConfigService=new DatabaseConfigServiceImpl(configSnapshot.getDatabaseReferences(),schedulingService,allStatementsBucket);  } catch (  IllegalArgumentException ex) {    throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);  }  return databaseConfigService;}  }
class C{  public InstantConverter addInstantConverter(InstantConverter converter) throws SecurityException {  checkAlterInstantConverters();  if (converter == null) {    return null;  }  InstantConverter[] removed=new InstantConverter[1];  iInstantConverters=iInstantConverters.add(converter,removed);  return removed[0];}  }
class C{  private void growStack(int depth){  if (nodes.length == depth) {    PathNode[] newNodes=new PathNode[ArrayUtil.oversize(nodes.length + 1,RamUsageEstimator.NUM_BYTES_OBJECT_REF)];    System.arraycopy(nodes,0,newNodes,0,nodes.length);    for (int i=depth, end=newNodes.length; i < end; i++) {      newNodes[i]=new PathNode();    }    nodes=newNodes;  }}  }
class C{  public void adjustForGravity(){  Dimension d=getSize();  double height=d.getHeight();  double width=d.getWidth();  double gx=0;  double gy=0;  for (int i=0; i < xydata.length; i++) {    gx+=xydata[i].getX();    gy+=xydata[i].getY();  }  gx/=xydata.length;  gy/=xydata.length;  double diffx=width / 2 - gx;  double diffy=height / 2 - gy;  for (int i=0; i < xydata.length; i++) {    xydata[i].setLocation(xydata[i].getX() + diffx,xydata[i].getY() + diffy);  }}  }
class C{  public void done(final T element){  Item<T> item=head;  Item<T> prev=null;  while (item != null) {    if (equivalent(item.element,element)) {      if (prev == null) {        head=item.next;      } else {        prev.next=item.next;      }      return;    }    prev=item;    item=item.next;  }  throw new IllegalStateException("Element not found: " + element);}  }
class C{  public int hash(int key){  return key;}  }
class C{  public static Image pack(String imageName) throws IOException {  return pack(Image.createImage(imageName));}  }
class C{  public void read(int tenant,long time_nanos,long bytes){  finished(Operation.READ,tenant,bytes,time_nanos);}  }
class C{  public Preferences buildPreferences(URI uri){  if (!"file".equals(uri.getScheme())) {    return null;  }  return new FilePreferences(new File(uri));}  }
class C{  private void registerAc(){  acReceiver=new BAc();  final IntentFilter filterOn=new IntentFilter(Intent.ACTION_POWER_CONNECTED);  final IntentFilter filterOff=new IntentFilter(Intent.ACTION_POWER_DISCONNECTED);  Status.getAppContext().registerReceiver(acReceiver,filterOn);  Status.getAppContext().registerReceiver(acReceiver,filterOff);}  }
class C{  public static void ensureVarsInData(List<Node> pmVars,DataSet dataSet){  for (  Node pmVar1 : pmVars) {    DiscreteVariable pmVar=(DiscreteVariable)pmVar1;    String name=pmVar.getName();    DiscreteVariable from=(DiscreteVariable)dataSet.getVariable(name);    if (from == null) {      throw new IllegalArgumentException("Variable " + pmVar + " was not in the data.");    }    List<String> pmCategories=pmVar.getCategories();    List<String> dataCategories=from.getCategories();    if (!pmCategories.equals(dataCategories)) {      if (pmCategories.containsAll(dataCategories)) {        DiscreteVariable to=new DiscreteVariable(pmVar);        dataSet.changeVariable(from,to);      } else {        throw new IllegalArgumentException("Variable '" + name + "' "+ "has more categories in the data than in the model."+ "\n\tIn the model, the categories are: "+ pmCategories+ "."+ "\n\tIn the data, the categories are: "+ dataCategories+ ".");      }    }  }}  }
class C{  public int threeWayDistance(Key k1,Key k2){  byte[] h0=hash;  byte[] h1=k1.hash;  byte[] h2=k2.hash;  int mmi=mismatch(h1,h2);  if (mmi == -1)   return 0;  int h=Byte.toUnsignedInt(h0[mmi]);  int a=Byte.toUnsignedInt(h1[mmi]);  int b=Byte.toUnsignedInt(h2[mmi]);  return Integer.compareUnsigned(a ^ h,b ^ h);}  }
class C{  public void appendExceptFirst(String s){  if (index++ > 0) {    builder.append(s);  }}  }
class C{  public static ICreateFrom create(GridTab mTab){  int AD_Table_ID=Env.getContextAsInt(Env.getCtx(),mTab.getWindowNo(),"BaseTable_ID");  ICreateFrom retValue=null;  Class<? extends ICreateFrom> cl=s_registeredClasses.get(AD_Table_ID);  if (cl != null) {    try {      java.lang.reflect.Constructor<? extends ICreateFrom> ctor=cl.getConstructor(GridTab.class);      retValue=ctor.newInstance(mTab);    } catch (    Throwable e) {      s_log.log(Level.SEVERE,e.getLocalizedMessage(),e);      return null;    }  }  if (retValue == null) {    s_log.info("Unsupported AD_Table_ID=" + AD_Table_ID);    return null;  }  return retValue;}  }
class C{  public void onBackKeyPressed(){  if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) {    exit();  } else {    if (mButtonPause.getVisibility() != View.GONE) {      pauseGame();    } else {      resumeGame();    }  }}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  public void query(boolean onlyCurrentRows,int onlyCurrentDays,int maxRows){  boolean open=gridTab.isOpen();  gridTab.query(onlyCurrentRows,onlyCurrentDays,maxRows);  if (listPanel.isVisible() && !open)   gridTab.getTableModel().fireTableDataChanged();}  }
class C{  public void initializeEnvironment(Interpreter interp,String lang){  interp.bindObject("window",createWindow(interp,lang));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateActions(@NotNull String listId){  actions.removeAll();  ActionGroup mainActionGroup=(ActionGroup)actionManager.getAction(listId);  if (mainActionGroup == null) {    return;  }  Action[] children=mainActionGroup.getChildren(null);  for (  Action action : children) {    Presentation presentation=presentationFactory.getPresentation(action);    ActionEvent e=new ActionEvent(ActionPlaces.DROPDOWN_MENU,presentation,actionManager,0);    action.update(e);    if (presentation.isVisible()) {      actions.add(action);    }  }}  }
class C{  public static String[] toWSOrCommaSeparatedArray(String str) throws IOException {  String[] result=str.split("(\\s*,\\s*|\\s+)");  if (result.length == 1 && result[0].equals("")) {    return new String[0];  } else {    return result;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public GetMovies(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public synchronized boolean contains(K key){  return mMap.containsKey(key);}  }
class C{  public FractionAtom(Atom num,Atom den,boolean rule,int numAlign,int denomAlign){  this(num,den,rule);  this.numAlign=checkAlignment(numAlign);  this.denomAlign=checkAlignment(denomAlign);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof OMDrawingTool) {    Debug.message("omdtl","OMDrawingToolLauncher found a DrawingTool.");    OMDrawingTool dt=(OMDrawingTool)someObj;    if (dt == getDrawingTool()) {      setDrawingTool(null);      dt.removePropertyChangeListener(this);    }  }  if (someObj instanceof DrawingToolRequestor) {    if (Debug.debugging("omdtl")) {      Debug.output("OMDrawingToolLauncher removing a DrawingToolRequestor - " + ((DrawingToolRequestor)someObj).getName());    }    drawingToolRequestors.remove((DrawingToolRequestor)someObj);    if (drawingToolRequestors.isEmpty()) {      getWindowSupport().killWindow();      currentRequestor=null;    }    resetCombo();    setRequestor(null);  }}  }
class C{  @CheckReturnValue public ThreadFactory build(){  return build(this);}  }
class C{  public void testMethodMemberDependencies() throws Exception {  checkMembers("method_depends_on_normal_method(self)");  Assert.assertThat("Method dependencies failed",getErrorMemberNames(),Matchers.containsInAnyOrder("normal_method(self)"));}  }
class C{  public Object[] keys(){  if (arrayTable == null) {    return null;  }  return arrayTable.getKeys(null);}  }
class C{  public static BinaryVariable newBinary(int length){  return new BinaryVariable(length);}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new VLookup("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));  initBPOrderDetails(C_BPartner_ID,forInvoice);}  }
class C{  public static void editGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  private static void deleteDirectory(File file) throws IOException {  if (file.isDirectory()) {    File[] files=file.listFiles();    if (files != null) {      for (int i=0; i < files.length; i++) {        deleteDirectory(files[i]);      }    }  }  file.delete();}  }
class C{  private void updateGatewaySender(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    if (cluster.getMembersHMap().containsKey(memberName)) {      Cluster.Member existingMember=cluster.getMembersHMap().get(memberName);      Cluster.GatewaySender gatewaySender=initGatewaySender(mbeanName);      for (Iterator<Cluster.GatewaySender> it=existingMember.getGatewaySenderList().iterator(); it.hasNext(); ) {        Cluster.GatewaySender exisGatewaySender=it.next();        if ((exisGatewaySender.getId()).equals(gatewaySender.getId())) {          it.remove();          break;        }      }      existingMember.getGatewaySenderList().add(gatewaySender);    } else {      Cluster.Member member=new Cluster.Member();      member.setName(memberName);      member.setId(memberName);      Cluster.GatewaySender gatewaySender=initGatewaySender(mbeanName);      member.getGatewaySenderList().add(gatewaySender);      cluster.getMembersHMap().put(memberName,member);    }  } catch (  InstanceNotFoundException infe) {    LOGGER.warning(infe);  }catch (  ReflectionException re) {    LOGGER.warning(re);  }catch (  MBeanException me) {    LOGGER.warning(me);  }catch (  AttributeNotFoundException anfe) {    LOGGER.warning(anfe);  }catch (  IntrospectionException ire) {    LOGGER.warning(ire);  }}  }
class C{  public String toString(){  return "." + getValue();}  }
class C{  public Matrix(double[][] A,int m,int n){  this.data=A;  this.rows=m;  this.cols=n;}  }
class C{  public static boolean isLoginIdExist(String loginId){  int findRowCount=find.where().ieq("loginId",loginId).findRowCount();  return (findRowCount != 0);}  }
class C{  public String rightString(int length){  if (length <= 0) {    return "";  } else   if (length >= size) {    return new String(buffer,0,size);  } else {    return new String(buffer,size - length,length);  }}  }
class C{  public void resetReferences(){  if (_refs != null)   _refs.clear();}  }
class C{  public static List<String[]> createSourceContent(String propertyName,String labelingScheme,ILaunchConfiguration config) throws CoreException {  Vector<String[]> result=new Vector<String[]>();  String value=config.getAttribute(propertyName,EMPTY_STRING);  if (value.trim().length() == 0) {    return result;  }  String identifier=getValidIdentifier(labelingScheme);  StringBuffer buffer=new StringBuffer();  buffer.append(identifier).append(DEFINES_CR);  buffer.append(value);  result.add(new String[]{identifier,buffer.toString()});  return result;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public static MultiErrorException of(String messageKey,Object... args){  return MultiErrorException.of(null,messageKey,args);}  }
class C{  public static int alertCountByStatus(EntityManager em,boolean enabled){  requireArgument(em != null,"Entity manager can not be null.");  TypedQuery<Long> query=em.createNamedQuery("Alert.countByStatus",Long.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("enabled",enabled);    return query.getSingleResult().intValue();  } catch (  NoResultException ex) {    return 0;  }}  }
