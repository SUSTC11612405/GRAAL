class C{  public Set searchSubPeopleContainers(String wildcard,int level) throws AMException, SSOException {  return searchSubPeopleContainers(wildcard,null,level);}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public LicenseSet(List<License> licenses){  if (licenses == null) {    throw new NullPointerException("Null license set");  }  this.licenses=licenses;}  }
class C{  private @Nonnull StepStartNode addBodyStartFlowNode(FlowHead head){  StepStartNode start=new StepStartNode(head.getExecution(),context.getStepDescriptor(),head.get());  this.startNodeId=start.getId();  start.addAction(new BodyInvocationAction());  head.setNewHead(start);  return start;}  }
class C{  public static void push(Context request){  stack.get().push(request);}  }
class C{  public SAMLResponderException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_DATE_TIME_TYPE,this);}  }
class C{  public List<Index> readAll(String database,String table){  return indexesRepo.readAllCached(new Identifier(database,table));}  }
class C{  private String policyRevision(Privilege policy){  return Long.toString(policy.getLastModifiedDate());}  }
class C{  @DataProvider(name="validRules") public Object[][] validData(){  return new Object[][]{{"129.34.55.67/0"},{"129.*.78.55+255.255.248.0"},{"128.*.*.*"},{"129.45.23.67/22"},{"128.33.23.*/32"},{"*.*.*.*"},{"129.45.67.34/0"},{"129.45.67.34+255.255.255.0"}};}  }
class C{  @Override public void init(FilterConfig filterConfig){  if (filterConfig != null) {    String value=filterConfig.getInitParameter("debug");    if (value != null) {      debug=Integer.parseInt(value);    }    String str=filterConfig.getInitParameter("compressionThreshold");    if (str != null) {      compressionThreshold=Integer.parseInt(str);      if (compressionThreshold != 0 && compressionThreshold < minThreshold) {        if (debug > 0) {          System.out.println("compressionThreshold should be either 0 - no compression or >= " + minThreshold);          System.out.println("compressionThreshold set to " + minThreshold);        }        compressionThreshold=minThreshold;      }    }    str=filterConfig.getInitParameter("compressionBuffer");    if (str != null) {      compressionBuffer=Integer.parseInt(str);      if (compressionBuffer < minBuffer) {        if (debug > 0) {          System.out.println("compressionBuffer should be >= " + minBuffer);          System.out.println("compressionBuffer set to " + minBuffer);        }        compressionBuffer=minBuffer;      }    }    str=filterConfig.getInitParameter("compressionMimeTypes");    if (str != null) {      List<String> values=new ArrayList<>();      StringTokenizer st=new StringTokenizer(str,",");      while (st.hasMoreTokens()) {        String token=st.nextToken().trim();        if (token.length() > 0) {          values.add(token);        }      }      if (values.size() > 0) {        compressionMimeTypes=values.toArray(new String[values.size()]);      } else {        compressionMimeTypes=null;      }      if (debug > 0) {        System.out.println("compressionMimeTypes set to " + Arrays.toString(compressionMimeTypes));      }    }  }}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode){  buf.append(m_val);}  }
class C{  private String generateCHash(String algorithm,OAuth2Request request,OAuth2ProviderSettings providerSettings) throws ServerException {  final AuthorizationCode authorizationCode=request.getToken(AuthorizationCode.class);  if (authorizationCode == null) {    logger.message("c_hash generation requires an existing code.");    return null;  }  final String codeValue=authorizationCode.getTokenId();  return generateHash(algorithm,codeValue,providerSettings);}  }
class C{  public boolean isReplicationRunning(){  Reject.checkNotNull(connectionParams);  int returnCode=ReplicationCliMain.mainCLI(ReplicationParameters.replicationParams().toCommandLineArgumentsStatus(configParams.getConfigurationFile(),connectionParams),!isRunning(),outStream,errStream);  return returnCode == 0;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic192Sha256Element createBasic192Sha256Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic192Sha256ElementImpl();}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,int[] pix,int off,int scan){  initialize(w,h,cm,(Object)pix,off,scan,null);}  }
class C{  public void enableAutoTagging(PdfPage page){  this.page=page;}  }
class C{  protected GapicContext(Model model,ApiConfig apiConfig){  this.model=Preconditions.checkNotNull(model);  this.apiConfig=Preconditions.checkNotNull(apiConfig);  this.serviceMessages=new ServiceMessages();  this.serviceConfig=new ServiceConfig();}  }
class C{  @DataProvider(name="targetAttrData") public Object[][] createData() throws Exception {  return new Object[][]{{"=","cn","cn",true},{"=","cn || sn","cn",true},{"=","cn || sn","sn",true},{"=","cn","sn",false},{"=","*","cn",true},{"=","*","modifytimestamp",false},{"=","+","modifytimestamp",true},{"=","+","cn",false},{"=","* || +","cn",true},{"=","* || +","modifytimestamp",true},{"=","+ || *","foo",true},{"=","* || +","foo",true},{"!=","cn","cn",false},{"!=","cn || sn","cn",false},{"!=","cn || sn","sn",false},{"!=","cn","sn",true},{"!=","cn || sn","description",true},{"!=","cn || sn","modifytimestamp",false},{"!=","aci","cn",false},{"!=","aci","modifytimestamp",true}};}  }
class C{  public boolean is_leaf(){  return children.isEmpty();}  }
class C{  public void serializeDOM3(Node node) throws IOException {  try {    DOM3TreeWalker walker=new DOM3TreeWalker(fSerializationHandler,fErrorHandler,fSerializerFilter,fNewLine);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  private void add(String key,String value){  addModel(key,value);  getContext().setSessionAttribute(key,value);}  }
class C{  public void addIssuerName(byte[] iss_name) throws IOException {  if (iss_name == null) {    throw new NullPointerException("iss_name == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=new Name(iss_name).getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Response processRequest(Request xacmlRequest,String pdpEntityId,String pepEntityId) throws XACMLException, SAML2Exception {  if (XACMLSDKUtils.debug.messageEnabled()) {    XACMLSDKUtils.debug.message("XACMLRequestProcessor.processRequest(), entering" + ":pdpEntityId=" + pdpEntityId + ":pepEntityId="+ pepEntityId+ ":xacmlRequest=\n"+ xacmlRequest.toXMLString(true,true));  }  XACMLAuthzDecisionQuery samlpQuery=createXACMLAuthzDecisionQuery(xacmlRequest);  samlpQuery.setInputContextOnly(true);  samlpQuery.setReturnContext(true);  if (XACMLSDKUtils.debug.messageEnabled()) {    XACMLSDKUtils.debug.message("XACMLRequestProcessor.processRequest()," + "samlpQuery=\n" + samlpQuery.toXMLString(true,true));  }  com.sun.identity.saml2.protocol.Response samlpResponse=QueryClient.processXACMLQuery(samlpQuery,pepEntityId,pdpEntityId);  if (XACMLSDKUtils.debug.messageEnabled()) {    XACMLSDKUtils.debug.message("XACMLRequestProcessor.processRequest()," + ":samlpResponse=\n" + samlpResponse.toXMLString(true,true));  }  Response xacmlResponse=null;  List assertions=samlpResponse.getAssertion();  if (assertions != null) {    Assertion assertion=(Assertion)(assertions.get(0));    if (assertion != null) {      List statements=assertion.getStatements();      if (statements.size() > 0) {        String statementString=(String)(statements.get(0));        if (statementString != null) {          XACMLAuthzDecisionStatement statement=ContextFactory.getInstance().createXACMLAuthzDecisionStatement(statementString);          if (XACMLSDKUtils.debug.messageEnabled()) {            XACMLSDKUtils.debug.message("XACMLRequestProcessor.processRequest()," + ":xacmlAuthzDecisionStatement=\n" + statement.toXMLString(true,true));          }          if (statement != null) {            xacmlResponse=statement.getResponse();            if (xacmlResponse != null) {              if (XACMLSDKUtils.debug.messageEnabled()) {                XACMLSDKUtils.debug.message("XACMLRequestProcessor.processRequest()" + ",returning :xacmlResponse=\n" + xacmlResponse.toXMLString(true,true));              }              return xacmlResponse;            }          }        }      }    }  }  return null;}  }
class C{  final TreeNode<K,V> find(int h,Object k,Class<?> kc){  TreeNode<K,V> p=this;  do {    int ph, dir;    K pk;    TreeNode<K,V> pl=p.left, pr=p.right, q;    if ((ph=p.hash) > h)     p=pl; else     if (ph < h)     p=pr; else     if ((pk=p.key) == k || (k != null && k.equals(pk)))     return p; else     if (pl == null)     p=pr; else     if (pr == null)     p=pl; else     if ((kc != null || (kc=comparableClassFor(k)) != null) && (dir=compareComparables(kc,k,pk)) != 0)     p=(dir < 0) ? pl : pr; else     if ((q=pr.find(h,k,kc)) != null)     return q; else     p=pl;  } while (p != null);  return null;}  }
class C{  public void fine(String msg){  log(Level.FINE,msg);}  }
class C{  void calculate_new_incomplete_rooms(ArtEngine p_autoroute_engine){  SortedRoom prev_neighbour=sorted_neighbours.last();  ShapeTileSimplex room_simplex=from_room.get_shape().to_Simplex();  for (  SortedRoom next_neighbour : sorted_neighbours) {    prev_neighbour=calculate_new_incomplete_rooms(p_autoroute_engine,room_simplex,prev_neighbour,next_neighbour);  }}  }
class C{  public View create(Element elem){  return new PasswordView(elem);}  }
class C{  protected void _skipIncomplete() throws IOException {  _tokenIncomplete=false;  int tb=_typeAsInt;switch (tb >> 5) {case 1:    tb&=0x1F;switch (tb >> 2) {case 1:switch (tb & 0x3) {case 1:      _skipBytes(4);case 0:    while (true) {      final int end=_inputEnd;      final byte[] buf=_inputBuffer;      while (_inputPtr < end) {        if (buf[_inputPtr++] < 0) {          return;        }      }      _loadMoreGuaranteed();    }case 2:  _skip7BitBinary();return;}break;case 2:switch (tb & 0x3) {case 0:_skipBytes(5);return;case 1:_skipBytes(10);return;case 2:_readUnsignedVInt();_skip7BitBinary();return;}break;}break;case 2:case 3:_skipBytes(1 + (tb & 0x3F));return;case 4:case 5:_skipBytes(2 + (tb & 0x3F));return;case 7:tb&=0x1F;switch (tb >> 2) {case 0:case 1:while (true) {final int end=_inputEnd;final byte[] buf=_inputBuffer;while (_inputPtr < end) {if (buf[_inputPtr++] == BYTE_MARKER_END_OF_STRING) {return;}}_loadMoreGuaranteed();}case 2:_skip7BitBinary();return;case 7:_skipBytes(_readUnsignedVInt());return;}}_throwInternal();}  }
class C{  public AuthenticationStatement(String authMethod,Date authInstant,Subject subject,SubjectLocality subjectLocality,List authorityBinding) throws SAMLException {  _authenticationMethod=authMethod;  _authenticationInstant=authInstant;  if (subject == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthenticationStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _subjectLocality=subjectLocality;  if (authorityBinding != null && !authorityBinding.isEmpty()) {    if (_authorityBinding == null) {      _authorityBinding=new ArrayList();    }    _authorityBinding=authorityBinding;  }}  }
class C{  public static ValueExpression createLabelValueExpression(String key){  key="#{msg.get('".concat(key).concat("')}");  final ValueExpression exp=JKJsfUtil.createValueException(key,String.class);  return exp;}  }
class C{  private void ensureCapacity(int requestedLength){  if (requestedLength > buffer.length) {    byte[] oldBuf=buffer;    buffer=new byte[oldBuf.length * 2];    System.arraycopy(oldBuf,0,buffer,0,oldBuf.length);  }}  }
class C{  @Override public Object pop(){  this.callStack.pop();  return super.pop();}  }
class C{  public static void decode(ByteBuffer data,int length,StringBuilder target) throws HpackException {  assert data.remaining() >= length;  int treePos=0;  boolean eosBits=true;  for (int i=0; i < length; ++i) {    byte b=data.get();    int bitPos=7;    while (bitPos >= 0) {      int val=DECODING_TABLE[treePos];      if (((1 << bitPos) & b) == 0) {        eosBits=false;        if ((val & LOW_TERMINAL_BIT) == 0) {          treePos=val & LOW_MASK;        } else {          target.append((char)(val & LOW_MASK));          treePos=0;          eosBits=true;        }      } else {        if ((val & HIGH_TERMINAL_BIT) == 0) {          treePos=(val >> 16) & LOW_MASK;        } else {          target.append((char)((val >> 16) & LOW_MASK));          treePos=0;          eosBits=true;        }      }      bitPos--;    }  }  if (!eosBits) {    throw new HpackException(sm.getString("hpackhuffman.huffmanEncodedHpackValueDidNotEndWithEOS"));  }}  }
class C{  public static ByteString encodeRequestValue(String symmetricKey,String instanceKeyID){  ByteStringBuilder builder=new ByteStringBuilder();  ASN1Writer writer=ASN1.getWriter(builder);  try {    writer.writeStartSequence();    writer.writeOctetString(TYPE_SYMMETRIC_KEY_ELEMENT,symmetricKey);    writer.writeOctetString(TYPE_INSTANCE_KEY_ID_ELEMENT,instanceKeyID);    writer.writeEndSequence();  } catch (  IOException e) {  }  return builder.toByteString();}  }
class C{  static public void assertSame(String message,Object expected,Object actual){  if (expected == actual)   return;  failNotSame(message,expected,actual);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof DelegationPermission))   return false;  DelegationPermission that=(DelegationPermission)obj;  return implies(that);}  }
class C{  public boolean isCheckExists(){  return checkExists;}  }
class C{  public void close_files(){  if (actlog != null) {    actlog.close_output();  }}  }
class C{  private static void ensureJsonPointerExists(JsonPointer ptr,JsonValue obj){  JsonValue refObj=obj;  for (  String p : ptr) {    if (!refObj.isDefined(p)) {      refObj.put(p,new JsonValue(new HashMap<String,Object>()));    }    refObj=refObj.get(p);  }}  }
class C{  public final void testIsRevoked(){  CRL crl=new MyCRL("TEST_TYPE");  crl.isRevoked(null);}  }
class C{  public OpenDJProvider(final String configFile){  this(new File(configFile).toURI());}  }
class C{  public FrameBodyIPLS(){  super();  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public NotConfiguration(String message,Throwable cause){  super(message,cause);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REFERENCES);    References references=new References();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    references.setCallId(callId);    super.parse(references);    return references;  }  finally {    if (debug)     dbg_leave("ReferencesParser.parse");  }}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public <M extends Configuration>void registerDeleteListener(SetRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener) throws ConfigException {  registerDeleteListener(d,new ServerManagedObjectDeleteListenerAdaptor<M>(listener));}  }
class C{  public DefaultTableModel(){  this(0,0);}  }
class C{  protected final boolean executePredicates(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  boolean result=true;  boolean positionAlreadySeen=false;  int n=getPredicateCount();  try {    xctxt.pushSubContextList(this);    for (int i=0; i < n; i++) {      xctxt.pushPredicatePos(i);      try {        XObject pred=m_predicates[i].execute(xctxt);        try {          if (XObject.CLASS_NUMBER == pred.getType()) {            int pos=(int)pred.num();            if (positionAlreadySeen) {              result=(pos == 1);              break;            } else {              positionAlreadySeen=true;              if (!checkProximityPosition(xctxt,i,dtm,currentNode,pos)) {                result=false;                break;              }            }          } else           if (!pred.boolWithSideEffects()) {            result=false;            break;          }        }  finally {          pred.detach();        }      }  finally {        xctxt.popPredicatePos();      }    }  }  finally {    xctxt.popSubContextList();  }  return result;}  }
class C{  @Inject public JsonValueToJsonBytesConverter(@Named("cts-json-object-mapper") ObjectMapper mapper){  this.mapper=mapper;}  }
class C{  public void ifPresent(LongConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  public void testConstrChar(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  BigDecimal result=new BigDecimal(value);  String res="-1.23804738E-419";  int resScale=427;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{});    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprevioussibling.class,args);}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  boolean undefined=false;  boolean isAnonUser=evalCtx.isAnonymousUser();  Iterator<UserDNTypeURL> it=urlList.iterator();  for (; it.hasNext() && matched != EnumEvalResult.TRUE && matched != EnumEvalResult.ERR; ) {    UserDNTypeURL dnTypeURL=it.next();    if (isAnonUser) {      if (dnTypeURL.getUserDNType() == EnumUserDNType.ANYONE) {        matched=EnumEvalResult.TRUE;      }    } else {      matched=evalNonAnonymous(evalCtx,dnTypeURL);    }  }  return matched.getRet(type,undefined);}  }
class C{  private void validateView(){  Component validateRoot=SwingUtilities.getValidateRoot(this,false);  if (validateRoot == null) {    return;  }  validateRoot.validate();  RepaintManager rm=RepaintManager.currentManager(this);  if (rm != null) {    rm.removeInvalidComponent((JComponent)validateRoot);  }}  }
class C{  static EntryIDSet evaluateFilter(IndexQueryFactory<IndexQuery> indexQueryFactory,IndexFilterType indexFilterType,SearchFilter filter,StringBuilder debugBuffer,BackendMonitor monitor){  try {    final IndexQuery indexQuery=getIndexQuery(indexQueryFactory,indexFilterType,filter);    return evaluateIndexQuery(indexQuery,indexFilterType.toString(),filter,debugBuffer,monitor);  } catch (  DecodeException e) {    logger.traceException(e);    return newDefinedSet();  }}  }
class C{  public void dispose(){  if (saved != null) {    putCachedRaster(model,saved);    saved=null;  }}  }
class C{  public static boolean remove(String file){  File f=new File(file);  if (!f.exists()) {    return true;  }  return f.delete();}  }
class C{  @Ignore @Test public void b4167874() throws Exception {  String orig=System.getProperty("test.resources.dir") + "/b4167874";  File tmp=Files.createTempDirectory("URLClassLoaderTest").toFile();  copyDir(orig,tmp.getPath() + "/work");  String workdir=tmp.getPath() + "/work/";  HttpServer httpServer=HttpServer.create(new InetSocketAddress(0),10);  try {    FileServerHandler handler=new FileServerHandler(workdir + "serverRoot/");    HttpContext ctx=httpServer.createContext("/",handler);    httpServer.start();    int port=httpServer.getAddress().getPort();    String s="http://127.0.0.1:" + port + "/";    URL url=new URL(s);    String testjar=workdir + "test.jar";    copyFile(workdir + "test1.jar",testjar);    test(testjar,1,url);    copyFile(workdir + "test2.jar",testjar);    test(testjar,2,url);    String testdir=workdir + "testdir/";    rm_minus_rf(new File(testdir));    copyDir(workdir + "test1/",testdir);    test(testdir,1,url);    testdir=workdir + "testdir/";    rm_minus_rf(new File(testdir));    copyDir(workdir + "test2/",testdir);    test(testdir,2,url);  }  finally {    httpServer.stop(3);  }}  }
class C{  public void addErrorCommandToRoot(final Element rootElement,final int errorNum,final String errorText){  Element element=this.getDocument().createElement("Error");  element.setAttribute("number",String.valueOf(errorNum));  if (errorText != null) {  }  rootElement.appendChild(element);}  }
class C{  public MessageCapture(final Logger logger,final boolean captureEntity){  this(logger,captureEntity,false);}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  private void addObjectClassToSchemaFile(String schemaFile,ObjectClass objectClass,Set<ByteString> values,Set<ObjectClass> addedClasses,int depth) throws DirectoryException {  if (depth > 20) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_CIRCULAR_REFERENCE_OC.get(objectClass.getNameOrOID());    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  if (addedClasses.contains(objectClass)) {    return;  }  for (  ObjectClass superiorClass : objectClass.getSuperiorClasses()) {    if (schemaFile.equals(getElementSchemaFile(superiorClass)) && !addedClasses.contains(superiorClass)) {      addObjectClassToSchemaFile(schemaFile,superiorClass,values,addedClasses,depth + 1);    }  }  values.add(ByteString.valueOfUtf8(objectClass.toString()));  addedClasses.add(objectClass);}  }
class C{  public Action createAction(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ACTION,xml);  if (obj == null) {    return new ActionImpl(xml);  } else {    return (Action)obj;  }}  }
class C{  public char last(){  pos=offset + count;  if (count != 0) {    pos-=1;    return array[pos];  }  return DONE;}  }
class C{  public PageRange addPageSequence(int startPageNumber,int endPageNumber){  sequenceStarts.add(startPageNumber);  sequenceEnds.add(endPageNumber);  return this;}  }
class C{  public static double radiansToDistance(double radians,String units) throws TurfException {  Double factor=factors.get(units);  if (factor == null) {    throw new TurfException("Invalid unit.");  }  return radians * factor;}  }
class C{  public PdfXObject addImage(ImageData image,float x,float y,float width,boolean asInline){  if (image.getOriginalType() == ImageType.WMF) {    WmfImageHelper wmf=new WmfImageHelper(image);    PdfXObject xObject=wmf.createPdfForm(document);    addImage(xObject,width,0,0,width,x,y);    return xObject;  } else {    PdfImageXObject imageXObject=new PdfImageXObject(image);    if (asInline && image.canImageBeInline()) {      addInlineImage(imageXObject,width,0,0,width / image.getWidth() * image.getHeight(),x,y);      return null;    } else {      addImage(imageXObject,width,0,0,width / image.getWidth() * image.getHeight(),x,y);      return imageXObject;    }  }}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public static Object evaluate(String value,Bindings bindings) throws ExpressionException {  return Expression.valueOf(value,Object.class).eval(bindings);}  }
class C{  protected void processKeyEvent(KeyEvent evt){  MenuSelectionManager.defaultManager().processKeyEvent(evt);  if (evt.isConsumed()) {    return;  }  super.processKeyEvent(evt);}  }
class C{  public Status(StatusCode code) throws SAMLException {  if (code == null) {    SAMLUtils.debug.message("Status: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  statusCode=code;}  }
class C{  public String createJDBCRealm(String parent,String driverName,String connectionName,String connectionPassword,String connectionURL) throws Exception {  JDBCRealm realm=new JDBCRealm();  realm.setDriverName(driverName);  realm.setConnectionName(connectionName);  realm.setConnectionPassword(connectionPassword);  realm.setConnectionURL(connectionURL);  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  container.setRealm(realm);  ObjectName oname=realm.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  public static LocalizableMessage wrapHTML(LocalizableMessage msg,int nCols){  String s=msg.toString();  StringBuilder sb=new StringBuilder();  StringBuilder lastLine=new StringBuilder();  int lastOpenTag=-1;  boolean inTag=false;  int lastSpace=-1;  int lastLineLengthInLastSpace=0;  int lastLineLength=0;  for (int i=0; i < s.length(); i++) {    boolean isNormalChar=false;    char c=s.charAt(i);    if (c == '<') {      inTag=true;      lastOpenTag=i;      lastLine.append(c);    } else     if (c == '>') {      if (lastOpenTag != -1) {        inTag=false;        String tag=s.substring(lastOpenTag,i + 1);        lastOpenTag=-1;        lastLine.append(c);        if (isLineBreakTag(tag)) {          sb.append(lastLine);          lastLine.delete(0,lastLine.length());          lastLineLength=0;          lastSpace=-1;          lastLineLengthInLastSpace=0;        }      } else {        isNormalChar=true;      }    } else     if (inTag) {      lastLine.append(c);    } else     if (c == HTML_SPACE.charAt(0)) {      if (s.length() >= i + HTML_SPACE.length()) {        if (HTML_SPACE.equalsIgnoreCase(s.substring(i,i + HTML_SPACE.length()))) {          if (lastLineLength < nCols) {            lastLine.append(HTML_SPACE);            lastSpace=lastLine.length() - HTML_SPACE.length();            lastLineLength++;            lastLineLengthInLastSpace=lastLineLength;            i+=HTML_SPACE.length() - 1;          } else {            sb.append(lastLine);            sb.append("<br>");            lastLine.delete(0,lastLine.length());            lastLineLength=0;            lastSpace=-1;            lastLineLengthInLastSpace=0;            i+=HTML_SPACE.length() - 1;          }        } else {          isNormalChar=true;        }      } else {        isNormalChar=true;      }    } else     if (c == ' ') {      if (lastLineLength < nCols) {        lastLine.append(c);        lastSpace=lastLine.length() - 1;        lastLineLength++;        lastLineLengthInLastSpace=lastLineLength;      } else {        sb.append(lastLine);        sb.append("<br>");        lastLine.delete(0,lastLine.length());        lastLineLength=0;        lastSpace=-1;        lastLineLengthInLastSpace=0;      }    } else {      isNormalChar=true;    }    if (isNormalChar) {      if (lastLineLength < nCols) {        lastLine.append(c);        lastLineLength++;      } else {        if (lastSpace != -1) {          sb.append(lastLine,0,lastSpace);          sb.append("<br>");          lastLine.delete(0,lastSpace + 1);          lastLine.append(c);          lastLineLength=lastLineLength - lastLineLengthInLastSpace + 1;          lastLineLengthInLastSpace=0;          lastSpace=-1;        } else {          sb.append(lastLine);          sb.append("<br>");          lastLine.delete(0,lastLine.length());          lastLine.append(c);          lastLineLength=1;        }      }    }  }  if (lastLine.length() > 0) {    sb.append(lastLine);  }  return LocalizableMessage.raw(sb.toString());}  }
class C{  public void resetStatistics(){  totalRequestTime=0;  totalSendTime=0;  lastSendTime=0;  nrOfFilterRequests=0;  nrOfRequests=0;  nrOfSendRequests=0;  nrOfCrossContextSendRequests=0;}  }
class C{  public static String formatDate(Date date){  return mSimpleDateFormat.format(date);}  }
class C{  public boolean isClosed(){  return outputBuffer.isClosed();}  }
class C{  public void addTreeExpansionListener(TreeExpansionListener tel){  if (settingUI) {    uiTreeExpansionListener=tel;  }  listenerList.add(TreeExpansionListener.class,tel);}  }
class C{  @Override protected Object createSsoServerFedEntitiesMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   fedEntitiesGroup=new SsoServerFedEntitiesImpl(this,server); else   fedEntitiesGroup=new SsoServerFedEntitiesImpl(this);  return fedEntitiesGroup;}  }
class C{  public String executionErrorMessage(){  return executionErrorMessage;}  }
class C{  private boolean mustAdd(MatchingRule matchingRule){  String f=filter.getText().trim();  return f.length() == 0 || (FILTER_NAME.equals(filterAttribute.getSelectedItem()) && mustAdd(f,matchingRule.getOID(),matchingRule.getNameOrOID()));}  }
class C{  public SessionResponseParser(Document xmlDoc){  document=xmlDoc;}  }
class C{  public EasySimMod(final Context context){  this.context=context;  tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);}  }
class C{  private int firstNonzeroIntNum(){  int fn=firstNonzeroIntNum - 2;  if (fn == -2) {    fn=0;    int i;    int mlen=mag.length;    for (i=mlen - 1; i >= 0 && mag[i] == 0; i--)     ;    fn=mlen - i - 1;    firstNonzeroIntNum=fn + 2;  }  return fn;}  }
class C{  public boolean equals(Object obj){  return (obj instanceof AllPermission);}  }
class C{  public static UIFacesVisitor visitComponent(final UIComponent component){  final UIFacesVisitor visitor=new UIFacesVisitor();  component.visitTree(VisitContext.createVisitContext(FacesContext.getCurrentInstance()),visitor);  return visitor;}  }
class C{  public static final int drawTabbedText(Segment s,int x,int y,Graphics g,TabExpander e,int startOffset){  return drawTabbedText(null,s,x,y,g,e,startOffset);}  }
class C{  static String createManagedName(Object component){  String className=component.getClass().getName();  for (int i=0; i < exceptions.length; i++) {    if (className.equals(exceptions[i][0])) {      return (exceptions[i][1]);    }  }  int period=className.lastIndexOf('.');  if (period >= 0)   className=className.substring(period + 1);  return (className);}  }
class C{  private boolean addPending(DN dn){  return pendingMap.putIfAbsent(dn,new CountDownLatch(1)) == null;}  }
class C{  public TablePrintable(JTable table,JTable.PrintMode printMode,MessageFormat headerFormat,MessageFormat footerFormat){  this.table=table;  header=table.getTableHeader();  colModel=table.getColumnModel();  totalColWidth=colModel.getTotalColumnWidth();  if (header != null) {    hclip.height=header.getHeight();  }  this.printMode=printMode;  this.headerFormat=headerFormat;  this.footerFormat=footerFormat;  headerFont=table.getFont().deriveFont(Font.BOLD,HEADER_FONT_SIZE);  footerFont=table.getFont().deriveFont(Font.PLAIN,FOOTER_FONT_SIZE);}  }
class C{  public final int decrementAndGet(){  for (; ; ) {    int current=get();    int next=current - 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  protected boolean updateSessions(InternalSession newSession,LoginState loginState,InternalSession sessionToActivate,InternalSession authSession,SessionService sessionService,Subject subject) throws AuthException {  final SessionID authSessionId=authSession.getID();  newSession.clearAuthContext();  loginState.setSessionProperties(newSession);  putAllPropertiesFromAuthSession(authSession,sessionToActivate);  sessionService.destroyAuthenticationSession(authSessionId);  if (DEBUG.messageEnabled()) {    DEBUG.message("Activating session: " + newSession);  }  loginState.setSubject(addSSOTokenPrincipal(subject,sessionToActivate.getID()));  try {    return activateSession(sessionToActivate,loginState);  } catch (  SessionException e) {    throw new AuthException(e);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldFp) {    return (this.p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  public MediaSize(float x,float y,int units){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  sizeVector.add(this);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ModifyType.ModificationType createModifyTypeModificationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyTypeImpl.ModificationTypeImpl();}  }
class C{  public JoinParser(String callID){  super(callID);}  }
class C{  public void initialize(Map configParams){}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  private final void add(ThreadGroup g){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    if (groups == null) {      groups=new ThreadGroup[4];    } else     if (ngroups == groups.length) {      groups=Arrays.copyOf(groups,ngroups * 2);    }    groups[ngroups]=g;    ngroups++;  }}  }
class C{  public DataBufferFloat(int size){  super(STABLE,TYPE_FLOAT,size);  data=new float[size];  bankdata=new float[1][];  bankdata[0]=data;}  }
class C{  public void schemaChanged(String serviceName,String version){}  }
class C{  public String toHTML(String name,boolean includeCss){  String jarName=name;  String css="*{font-family:Arial,sans-serif; overflow: auto;}" + "h3 {margin-bottom: 0px; font-weight: bold; text-decoration: underline;}" + "table{width=90%;} th, td{border:1px solid black;}"+ ".centTxt{text-align: center;}"+ ".shaded{background: #afd0db;}"+ ".tmain{margin-left:auto;margin-right:auto; }";  StringBuilder tableEntries=new StringBuilder("<table class=\"tmain\">");  for (  String className : threatsByClass.keySet()) {    tableEntries.append("<th colspan=\"2\" class=\"shaded\"><h3>" + className + "</h3></th>");    for (    ThreatResult tr : threatsByClass.get(className)) {      tableEntries.append(tr.toHTMLTableRow());    }  }  tableEntries.append("</table>");  StringBuilder content=new StringBuilder();  content.append("<html><head><meta charset=\"utf-8\">");  if (includeCss) {    content.append("<style>" + css + "</style>");  }  content.append("</head><body>");  content.append("<h1>Analysis of: " + jarName + "</h1><hr><hr>");  content.append(tableEntries.toString());  content.append("</body></html>");  return content.toString().replace("<init>","&lt;init&gt;").replace("<clinit>","&lt;clinit&gt;");}  }
class C{  public void modify(ModifyRequest request) throws LdapException {  addControls(request);  conn.getConnection().modify(request);}  }
class C{  public boolean signHash(){  return signHash;}  }
class C{  public String toString(){  return ("JDBCPrincipal:  " + name);}  }
class C{  @Override public void onPause(){  super.onPause();  mDelegate.detachView();  if (getActivity().isFinishing()) {    mDelegate.destroyPresenter();  }}  }
class C{  public void test_twoJar_diff_getResourceAsStream() throws Exception {  createInstanceAndCallStaticMethod(Configuration.TWO_JAR,"test.TestMethods","test_diff_getResourceAsStream");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextfour.class,args);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  PerThreadDocumentBuilderProvider(final DocumentBuilderProvider delegate,final int maxSize){  if (delegate == null) {    throw new NullPointerException("Delegate DocumentBuilderProvider cannot be null");  }  if (maxSize <= 0) {    throw new IllegalArgumentException("MaxSize must be positive");  }  this.validatingDBCache=new PerThreadDBCache(delegate,true,maxSize);  this.nonValidatingDBCache=new PerThreadDBCache(delegate,false,maxSize);}  }
class C{  private static byte[] convertToBytes(int i){  int size=(int)Math.floor(Math.log(i) / Math.log(10));  if (i % 100 != 0) {    size+=2;  }  if (i % 10 != 0) {    size++;  }  if (i < 100) {    size++;    if (i < 10) {      size++;    }  }  size--;  byte[] cache=new byte[size];  size--;  if (i < 100) {    cache[0]=(byte)'0';  }  if (i % 10 != 0) {    cache[size--]=bytes[i % 10];  }  if (i % 100 != 0) {    cache[size--]=bytes[(i / 10) % 10];    cache[size--]=(byte)'.';  }  size=(int)Math.floor(Math.log(i) / Math.log(10)) - 1;  int add=0;  while (add < size) {    cache[add]=bytes[(i / (int)Math.pow(10,size - add + 1)) % 10];    add++;  }  return cache;}  }
class C{  public String chooseEngineClientAlias(String[] keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  @Override public void addServletContainerInitializer(ServletContainerInitializer sci,Set<Class<?>> classes){  initializers.put(sci,classes);}  }
class C{  public Socket(){  this.impl=factory != null ? factory.createSocketImpl() : new PlainSocketImpl();  this.proxy=null;}  }
class C{  public void addTab(String title,Icon icon,Component component,String tip){  insertTab(title,icon,component,tip,pages.size());}  }
class C{  public PhoneCallEvent(String eventName,Intent intent){  super(APPLICATION_NAME,eventName,intent);}  }
class C{  public PdfException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void SyntaxException(String msg,LineCol lineCol) throws SyntaxException {  if (fastFail)   throw new SyntaxException(buildErrInfo(lineCol),msg,lineCol);  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.Syntax));}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public static float readSwappedFloat(byte[] data,int offset){  return Float.intBitsToFloat(readSwappedInteger(data,offset));}  }
class C{  private void uninstallDefaults(){}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  doGet(request,response);}  }
class C{  LambdaFormBuffer insertExpression(int pos,Name expr){  assert (!expr.isParam());  insertName(pos,expr,false);  return this;}  }
class C{  public void logIt(String[] s,int type,String messageName,Hashtable ssoProperties){  if (logStatus && (s != null)) {    try {      LogMessageProviderBase provider=(LogMessageProviderBase)MessageProviderFactory.getProvider("Authentication");      com.sun.identity.log.LogRecord lr=null;      SSOToken ssot=AccessController.doPrivileged(AdminTokenAction.getInstance());      if (ssoProperties == null) {        lr=provider.createLogRecord(messageName,s,ssot);      } else {        lr=provider.createLogRecord(messageName,s,ssoProperties);      }      com.sun.identity.log.Logger logger;switch (type) {case LOG_ACCESS:        logger=(com.sun.identity.log.Logger)Logger.getLogger("amAuthentication.access");      logger.log(lr,ssot);    break;case LOG_ERROR:  logger=(com.sun.identity.log.Logger)Logger.getLogger("amAuthentication.error");logger.log(lr,ssot);break;default :logger=(com.sun.identity.log.Logger)Logger.getLogger("amAuthentication.access");logger.log(lr,ssot);break;}} catch (IOException ex) {ex.printStackTrace();debug.error("Logging exception : " + ex.getMessage());}}}  }
class C{  public JPEGImageWriteParam(Locale locale){  super(locale);  this.canWriteProgressive=true;  this.progressiveMode=MODE_DISABLED;  this.canWriteCompressed=true;  this.compressionTypes=compressionNames;  this.compressionType=compressionTypes[0];  this.compressionQuality=JPEG.DEFAULT_QUALITY;}  }
class C{  public Result mapToXACMLResult(Object nativeResult,String nativeServiceName,ResourceMapper resourceMapper,ActionMapper actionMapper) throws XACMLException {  return null;}  }
class C{  @Override public int hashCode(){  return _canonicalName.hashCode();}  }
class C{  public ResourceLinkRef(String resourceClass,String globalName,String factory,String factoryLocation){  super(resourceClass,factory,factoryLocation);  StringRefAddr refAddr=null;  if (globalName != null) {    refAddr=new StringRefAddr(GLOBALNAME,globalName);    add(refAddr);  }}  }
class C{  public LongHolder(){}  }
class C{  public RecordingOutputStream(OutputStream parentStream){  this.enableRecording=false;  this.parentStream=parentStream;  this.buffer=new ByteStringBuilder(32);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public void postProcessRemoveUser(SSOToken token,String entryDN,Set members,int objectType) throws AMPostCallBackException {}  }
class C{  protected void updatePreferredSize(){  updatePreferredSize(getRow());}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  private static LocalizableMessage createMessage(ServerManagedObject<?> partialManagedObject,Collection<PropertyException> causes){  Reject.ifNull(causes);  Reject.ifFalse(!causes.isEmpty(),"causes should nnot be empty");  ManagedObjectDefinition<?,?> d=partialManagedObject.getManagedObjectDefinition();  if (causes.size() == 1) {    return ERR_MANAGED_OBJECT_DECODING_EXCEPTION_SINGLE.get(d.getUserFriendlyName(),causes.iterator().next().getMessageObject());  } else {    LocalizableMessageBuilder builder=new LocalizableMessageBuilder();    boolean isFirst=true;    for (    PropertyException cause : causes) {      if (!isFirst) {        builder.append("; ");      }      builder.append(cause.getMessageObject());      isFirst=false;    }    return ERR_MANAGED_OBJECT_DECODING_EXCEPTION_PLURAL.get(d.getUserFriendlyName(),builder.toMessage());  }}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  Object child=digester.peek(0);  Object parent=digester.peek(1);  if (digester.log.isDebugEnabled()) {    if (parent == null) {      digester.log.debug("[SetNextRule]{" + digester.match + "} Call [NULL PARENT]."+ methodName+ "("+ child+ ")");    } else {      digester.log.debug("[SetNextRule]{" + digester.match + "} Call "+ parent.getClass().getName()+ "."+ methodName+ "("+ child+ ")");    }  }  IntrospectionUtils.callMethod1(parent,methodName,child,paramType,digester.getClassLoader());}  }
class C{  private int processDirty(char[] chars,int end,int i,char ch,int lastDirty,boolean fromTextNode) throws IOException {  int startClean=lastDirty + 1;  if (i > startClean) {    int lengthClean=i - startClean;    m_writer.write(chars,startClean,lengthClean);  }  if (CharInfo.S_LINEFEED == ch && fromTextNode) {    m_writer.write(m_lineSep,0,m_lineSepLen);  } else {    startClean=accumDefaultEscape(m_writer,(char)ch,i,chars,end,fromTextNode,false);    i=startClean - 1;  }  return i;}  }
class C{  private static void processParameters(InputStream jpegStream,String errorID,ImageData image) throws java.io.IOException {  byte[][] icc=null;  if (jpegStream.read() != 0xFF || jpegStream.read() != 0xD8) {    throw new IOException(IOException._1IsNotAValidJpegFile).setMessageParams(errorID);  }  boolean firstPass=true;  int len;  while (true) {    int v=jpegStream.read();    if (v < 0)     throw new IOException(IOException.PrematureEofWhileReadingJpeg);    if (v == 0xFF) {      int marker=jpegStream.read();      if (firstPass && marker == M_APP0) {        firstPass=false;        len=getShort(jpegStream);        if (len < 16) {          StreamUtil.skip(jpegStream,len - 2);          continue;        }        byte[] bcomp=new byte[JFIF_ID.length];        int r=jpegStream.read(bcomp);        if (r != bcomp.length)         throw new IOException(IOException._1CorruptedJfifMarker).setMessageParams(errorID);        boolean found=true;        for (int k=0; k < bcomp.length; ++k) {          if (bcomp[k] != JFIF_ID[k]) {            found=false;            break;          }        }        if (!found) {          StreamUtil.skip(jpegStream,len - 2 - bcomp.length);          continue;        }        StreamUtil.skip(jpegStream,2);        int units=jpegStream.read();        int dx=getShort(jpegStream);        int dy=getShort(jpegStream);        if (units == 1) {          image.setDpi(dx,dy);        } else         if (units == 2) {          image.setDpi((int)(dx * 2.54f + 0.5f),(int)(dy * 2.54f + 0.5f));        }        StreamUtil.skip(jpegStream,len - 2 - bcomp.length- 7);        continue;      }      if (marker == M_APPE) {        len=getShort(jpegStream) - 2;        byte[] byteappe=new byte[len];        for (int k=0; k < len; ++k) {          byteappe[k]=(byte)jpegStream.read();        }        if (byteappe.length >= 12) {          String appe=new String(byteappe,0,5,"ISO-8859-1");          if (appe.equals("Adobe")) {            image.setInverted(true);          }        }        continue;      }      if (marker == M_APP2) {        len=getShort(jpegStream) - 2;        byte[] byteapp2=new byte[len];        for (int k=0; k < len; ++k) {          byteapp2[k]=(byte)jpegStream.read();        }        if (byteapp2.length >= 14) {          String app2=new String(byteapp2,0,11,"ISO-8859-1");          if (app2.equals("ICC_PROFILE")) {            int order=byteapp2[12] & 0xff;            int count=byteapp2[13] & 0xff;            if (order < 1)             order=1;            if (count < 1)             count=1;            if (icc == null)             icc=new byte[count][];            icc[order - 1]=byteapp2;          }        }        continue;      }      if (marker == M_APPD) {        len=getShort(jpegStream) - 2;        byte[] byteappd=new byte[len];        for (int k=0; k < len; k++) {          byteappd[k]=(byte)jpegStream.read();        }        int k;        for (k=0; k < len - PS_8BIM_RESO.length; k++) {          boolean found=true;          for (int j=0; j < PS_8BIM_RESO.length; j++) {            if (byteappd[k + j] != PS_8BIM_RESO[j]) {              found=false;              break;            }          }          if (found)           break;        }        k+=PS_8BIM_RESO.length;        if (k < len - PS_8BIM_RESO.length) {          byte namelength=byteappd[k];          namelength++;          if (namelength % 2 == 1)           namelength++;          k+=namelength;          int resosize=(byteappd[k] << 24) + (byteappd[k + 1] << 16) + (byteappd[k + 2] << 8)+ byteappd[k + 3];          if (resosize != 16) {            continue;          }          k+=4;          int dx=(byteappd[k] << 8) + (byteappd[k + 1] & 0xff);          k+=2;          k+=2;          int unitsx=(byteappd[k] << 8) + (byteappd[k + 1] & 0xff);          k+=2;          k+=2;          int dy=(byteappd[k] << 8) + (byteappd[k + 1] & 0xff);          k+=2;          k+=2;          int unitsy=(byteappd[k] << 8) + (byteappd[k + 1] & 0xff);          if (unitsx == 1 || unitsx == 2) {            dx=(unitsx == 2 ? (int)(dx * 2.54f + 0.5f) : dx);            if (image.getDpiX() != 0 && image.getDpiX() != dx) {              Logger logger=LoggerFactory.getLogger(JpegImageHelper.class);              logger.debug(MessageFormat.format("Inconsistent metadata (dpiX: {0} vs {1})",image.getDpiX(),dx));            } else {              image.setDpi(dx,image.getDpiY());            }          }          if (unitsy == 1 || unitsy == 2) {            dy=(unitsy == 2 ? (int)(dy * 2.54f + 0.5f) : dy);            if (image.getDpiY() != 0 && image.getDpiY() != dy) {              Logger logger=LoggerFactory.getLogger(JpegImageHelper.class);              logger.debug(MessageFormat.format("Inconsistent metadata (dpiY: {0} vs {1})",image.getDpiY(),dy));            } else {              image.setDpi(image.getDpiX(),dx);            }          }        }        continue;      }      firstPass=false;      int markertype=marker(marker);      if (markertype == VALID_MARKER) {        StreamUtil.skip(jpegStream,2);        if (jpegStream.read() != 0x08) {          throw new IOException(IOException._1MustHave8BitsPerComponent).setMessageParams(errorID);        }        image.setHeight(getShort(jpegStream));        image.setWidth(getShort(jpegStream));        image.setColorSpace(jpegStream.read());        image.setBpc(8);        break;      } else       if (markertype == UNSUPPORTED_MARKER) {        throw new IOException(IOException._1UnsupportedJpegMarker2).setMessageParams(errorID,Integer.toString(marker));      } else       if (markertype != NOPARAM_MARKER) {        StreamUtil.skip(jpegStream,getShort(jpegStream) - 2);      }    }  }  if (icc != null) {    int total=0;    for (int k=0; k < icc.length; ++k) {      if (icc[k] == null) {        icc=null;        return;      }      total+=icc[k].length - 14;    }    byte[] ficc=new byte[total];    total=0;    for (int k=0; k < icc.length; ++k) {      System.arraycopy(icc[k],14,ficc,total,icc[k].length - 14);      total+=icc[k].length - 14;    }    try {      image.setProfile(IccProfile.getInstance(ficc,image.getColorSpace()));    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public IllegalComponentStateException(String s){  super(s);}  }
class C{  private void enqueue(E x){  final Object[] items=this.items;  items[putIndex]=x;  if (++putIndex == items.length)   putIndex=0;  count++;  notEmpty.signal();}  }
class C{  public void paintTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void saveAsXML(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  FileOutputStream fous=new FileOutputStream(out);  saveAsXML(root,fous);  fous.close();}  }
class C{  SchemaFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof SchemaFactory)     return (SchemaFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    debugPrintln("failed to instantiate " + className);    if (debug)     t.printStackTrace();  }  return null;}  }
class C{  public void parseMethod(MethodDef m,int i,STypeDef type,SMethodDef lastMethod,List<Import> imports,int mode,boolean isStatic) throws SyntaxException {  SMethodDef methodDef=new SMethodDef(m.line_col());  methodDef.setName(m.name);  methodDef.setDeclaringType(type);  methodDef.setReturnType(m.returnType == null ? getTypeWithName("java.lang.Object",m.line_col()) : getRealReturnType(getTypeWithAccess(m.returnType,imports),true));  parseParameters(m.params,i,methodDef,imports,false);  boolean hasAccessModifier=false;  for (  Modifier mod : m.modifiers) {    if (mod.modifier.equals(Modifier.Available.PUBLIC) || mod.modifier.equals(Modifier.Available.PRIVATE) || mod.modifier.equals(Modifier.Available.PROTECTED)|| mod.modifier.equals(Modifier.Available.PKG)) {      hasAccessModifier=true;    }  }  if (!hasAccessModifier) {    methodDef.modifiers().add(SModifier.PUBLIC);  }  for (  Modifier mod : m.modifiers) {switch (mod.modifier) {case PUBLIC:      methodDef.modifiers().add(SModifier.PUBLIC);    break;case PRIVATE:  if (mode == PARSING_INTERFACE) {    err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString(),m.line_col());    return;  }methodDef.modifiers().add(SModifier.PRIVATE);break;case PROTECTED:if (mode == PARSING_INTERFACE) {err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString(),m.line_col());return;}methodDef.modifiers().add(SModifier.PROTECTED);break;case PKG:if (mode == PARSING_INTERFACE) {err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString(),m.line_col());return;}break;case VAL:methodDef.modifiers().add(SModifier.FINAL);break;case ABSTRACT:methodDef.modifiers().add(SModifier.ABSTRACT);if (!m.body.isEmpty()) {err.SyntaxException("abstract methods cannot have body",m.line_col());return;}break;case SYNCHRONIZED:methodDef.modifiers().add(SModifier.SYNCHRONIZED);break;case DEF:break;default :err.UnexpectedTokenException("valid modifier for methods (class:(public|private|protected|internal|val)|interface:(pub|val))",m.toString(),m.line_col());return;}}if (isStatic) {methodDef.modifiers().add(SModifier.STATIC);}if (mode == PARSING_INTERFACE && !methodDef.modifiers().contains(SModifier.ABSTRACT) && m.body.isEmpty()) {methodDef.modifiers().add(SModifier.ABSTRACT);}parseAnnos(m.annos,methodDef,imports,ElementType.METHOD,Collections.emptyList());List<SMethodDef> methods;if (mode == PARSING_CLASS) {methods=((SClassDef)type).methods();} else if (mode == PARSING_INTERFACE) {methods=((SInterfaceDef)type).methods();} else throw new LtBug("invalid mode " + mode);for (SMethodDef builtMethod : methods) {if (builtMethod.name().equals(methodDef.name())) {if (builtMethod.getParameters().size() == methodDef.getParameters().size()) {int size=methodDef.getParameters().size();List<SParameter> builtParam=builtMethod.getParameters();List<SParameter> current=methodDef.getParameters();boolean passCheck=false;for (int in=0; in < size; ++in) {if (builtParam.get(in).type() != current.get(in).type()) {passCheck=true;break;}}if (!passCheck) {err.SyntaxException("method signature check failed on " + methodDef,m.line_col());return;}}}}if (null != lastMethod) {Map<SInvokable,Expression> invoke=new HashMap<>();invoke.put(lastMethod,m.params.get(i).getInit());defaultParamInvokable.put(methodDef,invoke);}if (mode == PARSING_CLASS) {((SClassDef)type).methods().add(methodDef);} else {((SInterfaceDef)type).methods().add(methodDef);}}  }
class C{  public Dimension minimumLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getMinimumSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  private void sendAck(Request request,boolean throwIOExceptionAsSipException) throws SipException {  SIPRequest ackRequest=(SIPRequest)request;  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("sendAck" + this);  if (!ackRequest.getMethod().equals(Request.ACK))   throw new SipException("Bad request method -- should be ACK");  if (this.getState() == null || this.getState().getValue() == EARLY_STATE) {    if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {      logger.logError("Bad Dialog State for " + this + " dialogID = "+ this.getDialogId());    }    throw new SipException("Bad dialog state " + this.getState());  }  if (!this.getCallId().getCallId().equals(((SIPRequest)request).getCallId().getCallId())) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logError("CallID " + this.getCallId());      logger.logError("RequestCallID = " + ackRequest.getCallId().getCallId());      logger.logError("dialog =  " + this);    }    throw new SipException("Bad call ID in request");  }  try {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("setting from tag For outgoing ACK= " + this.getLocalTag());      logger.logDebug("setting To tag for outgoing ACK = " + this.getRemoteTag());      logger.logDebug("ack = " + ackRequest);    }    if (this.getLocalTag() != null)     ackRequest.getFrom().setTag(this.getLocalTag());    if (this.getRemoteTag() != null)     ackRequest.getTo().setTag(this.getRemoteTag());  } catch (  ParseException ex) {    throw new SipException(ex.getMessage());  }  boolean releaseAckSem=false;  long cseqNo=((SIPRequest)request).getCSeq().getSeqNumber();  if (!this.isAckSent(cseqNo)) {    releaseAckSem=true;  }  this.setLastAckSent((SIPRequest)ackRequest.clone());  try {    ackSendingStrategy.send(ackRequest);    this.isAcknowledged=true;    this.highestSequenceNumberAcknowledged=Math.max(this.highestSequenceNumberAcknowledged,((SIPRequest)ackRequest).getCSeq().getSeqNumber());    if (releaseAckSem && this.isBackToBackUserAgent) {      this.releaseAckSem();    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("Not releasing ack sem for " + this + " isAckSent "+ releaseAckSem);      }    }  } catch (  IOException ex) {    if (throwIOExceptionAsSipException)     throw new SipException("Could not send ack",ex);    Hop hop=ackSendingStrategy.getLastHop();    if (hop == null) {      hop=sipStack.getNextHop(ackRequest);    }    this.raiseIOException(hop.getHost(),hop.getPort(),hop.getTransport());  }catch (  SipException ex) {    if (logger.isLoggingEnabled())     logger.logException(ex);    throw ex;  }catch (  Exception ex) {    if (logger.isLoggingEnabled())     logger.logException(ex);    throw new SipException("Could not create message channel",ex);  }  if (this.dialogDeleteTask != null) {    this.getStack().getTimer().cancel(dialogDeleteTask);    this.dialogDeleteTask=null;  }}  }
class C{  private void copyData(){  try {    String aLine;    while ((aLine=inputReader.readLine()) != null)     writeHere.println(aLine);  } catch (  Exception exc) {    System.err.println(classname + "copyData() input closed");  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  debug.message("Stop recording: serverURL : '{}'",serverName);  String[] argsAttempt={serverName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_STOP_RECORD",argsAttempt);  SSOToken adminSSOToken=getAdminSSOToken();  try {    if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      String message="ServerName '" + serverName + "' doesn't exist";      debug.error(message);      outputWriter.printlnMessage(message);      String[] args={serverName,message};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_STOP_RECORD",args);      return;    }    Map<String,String> headers=new HashMap<String,String>();    headers.put("Content-Type","application/json");    RestCommand restCommand=new RestCommand();    String result=restCommand.sendRestCommand(adminSSOToken.getTokenID(),new URL(serverName + "/json/" + RecordConstants.RECORD_REST_ENDPOINT+ "?_action="+ RecordConstants.STOP_ACTION),"POST",headers,"");    debug.message("Stop recording with success. Result : '{}'",result);    if (result.isEmpty()) {      outputWriter.printlnMessage("Result from server is empty. An error occurred. See debug logs for more " + "information");      String[] args={serverName,"Result from server is empty. An error occurred."};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_STATUS_RECORD",args);    }    String[] args={serverName,result};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCESS_STOP_RECORD",args);    outputWriter.printlnMessage(result);  } catch (  IOException|SMSException|SSOException e) {    debug.error("An error occurred",e);    outputWriter.printlnMessage(e.getMessage());    String[] args={serverName,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_STOP_RECORD",args);  }}  }
class C{  private boolean isAllowedByDns(String dnsName) throws PolicyException {  boolean allowed=false;  dnsName=dnsName.toLowerCase();  Iterator dnsNames=dnsList.iterator();  while (dnsNames.hasNext()) {    String dnsPattern=(String)dnsNames.next();    if (dnsPattern.equals("*")) {      allowed=true;      break;    }    int starIndex=dnsPattern.indexOf("*");    if (starIndex != -1) {      String dnsWildSuffix=dnsPattern.substring(1);      if (dnsName.endsWith(dnsWildSuffix)) {        allowed=true;        break;      }    } else     if (dnsPattern.equalsIgnoreCase(dnsName)) {      allowed=true;      break;    }  }  return allowed;}  }
class C{  public static MethodNode generateSetter(String methodName,String fieldName,String className,String fieldDesc){  MethodNode methodNode=new MethodNode(ACC_PUBLIC,methodName,"(" + fieldDesc + ")V",null,null);  methodNode.instructions.insert(new VarInsnNode(ALOAD,0));  methodNode.instructions.insert(new VarInsnNode(Type.getType(fieldDesc).getOpcode(ILOAD),1));  methodNode.instructions.insert(new FieldInsnNode(PUTFIELD,className,fieldName,fieldDesc));  methodNode.instructions.insert(new InsnNode(RETURN));  return methodNode;}  }
class C{  public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  String fullCode=code;  if (generateChecksum && checksumText) {    fullCode=calculateChecksum(code);  }  if (!startStopText) {    fullCode=fullCode.substring(1,fullCode.length() - 1);  }  float fontX=0;  if (font != null) {    fontX=font.getWidth(fullCode=altText != null ? altText : fullCode,size);  }  byte[] bars=getBarsCodabar(generateChecksum ? calculateChecksum(code) : code);  int wide=0;  for (int k=0; k < bars.length; ++k) {    wide+=bars[k];  }  int narrow=bars.length - wide;  float fullWidth=x * (narrow + wide * n);  float barStartX=0;  float textStartX=0;switch (textAlignment) {case ALIGN_LEFT:    break;case ALIGN_RIGHT:  if (fontX > fullWidth) {    barStartX=fontX - fullWidth;  } else {    textStartX=fullWidth - fontX;  }break;default :if (fontX > fullWidth) {barStartX=(fontX - fullWidth) / 2;} else {textStartX=(fullWidth - fontX) / 2;}break;}float barStartY=0;float textStartY=0;if (font != null) {if (baseline <= 0) {textStartY=barHeight - baseline;} else {textStartY=-getDescender();barStartY=textStartY + baseline;}}boolean print=true;if (barColor != null) {canvas.setFillColor(barColor);}for (int k=0; k < bars.length; ++k) {float w=(bars[k] == 0 ? x : x * n);if (print) {canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight);}print=!print;barStartX+=w;}canvas.fill();if (font != null) {if (textColor != null) {canvas.setFillColor(textColor);}canvas.beginText();canvas.setFontAndSize(font,size);canvas.setTextMatrix(textStartX,textStartY);canvas.showText(fullCode);canvas.endText();}return getBarcodeSize();}  }
class C{  public FSLECPConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,FSAuthnRequest authnRequest,boolean doFederate,String relayState){  super(request,response,idpDescriptor,idpEntityId,authnRequest,doFederate,relayState);}  }
class C{  public static String parseNameFormOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_NAME_FORM_OID);}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  public FSAuthDomainsEditViewBean(){  super("FSAuthDomainsEdit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  PatternEntry other=(PatternEntry)obj;  boolean result=chars.equals(other.chars);  return result;}  }
class C{  public void deleteEntities(String name,String protocol,String realm) throws AMConsoleException {  if (protocol.equals(IDFF)) {    deleteIDFFEntity(name,realm);  } else   if (protocol.equals(WSFED)) {    deleteWSFedEntity(name,realm);  } else {    deleteSAMLv2Entity(name,realm);  }}  }
class C{  public NumberOfDocuments(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public LogoutRequest createLogoutRequest(org.w3c.dom.Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_REQUEST,value);  if (obj == null) {    return new LogoutRequestImpl(value);  } else {    return (LogoutRequest)obj;  }}  }
class C{  public ProtobufSchema forType(String messageTypeName){  MessageElement msg=_messageType(messageTypeName);  if (msg == null) {    throw new IllegalArgumentException("Protobuf schema definition (name '" + _name + "') has no message type with name '"+ messageTypeName+ "': known types: "+ getMessageNames());  }  return new ProtobufSchema(this,TypeResolver.construct(_nativeTypes).resolve(msg));}  }
class C{  public boolean validate(String value){  try {    Float.parseFloat(value);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public void appendEnvironmentReport(Node container,Document factory,Hashtable h){  if ((null == container) || (null == factory)) {    return;  }  try {    Element envCheckNode=factory.createElement("EnvironmentCheck");    envCheckNode.setAttribute("version","$Revision: 468646 $");    container.appendChild(envCheckNode);    if (null == h) {      Element statusNode=factory.createElement("status");      statusNode.setAttribute("result","ERROR");      statusNode.appendChild(factory.createTextNode("appendEnvironmentReport called with null Hashtable!"));      envCheckNode.appendChild(statusNode);      return;    }    boolean errors=false;    Element hashNode=factory.createElement("environment");    envCheckNode.appendChild(hashNode);    for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(FOUNDCLASSES)) {          Vector v=(Vector)h.get(keyStr);          errors|=appendFoundJars(hashNode,factory,v,keyStr);        } else {          if (keyStr.startsWith(ERROR)) {            errors=true;          }          Element node=factory.createElement("item");          node.setAttribute("key",keyStr);          node.appendChild(factory.createTextNode((String)h.get(keyStr)));          hashNode.appendChild(node);        }      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("item");        node.setAttribute("key",keyStr);        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        hashNode.appendChild(node);      }    }    Element statusNode=factory.createElement("status");    statusNode.setAttribute("result",(errors ? "ERROR" : "OK"));    envCheckNode.appendChild(statusNode);  } catch (  Exception e2) {    System.err.println("appendEnvironmentReport threw: " + e2.toString());    e2.printStackTrace();  }}  }
class C{  private LDAPReplicationDomain createReplicationDomain(int serverId,int groupId,String testCase) throws Exception {  SortedSet<String> replServers=createRSListForTestCase(testCase);  DN baseDn=DN.valueOf(TEST_ROOT_DN_STRING);  DomainFakeCfg domainConf=new DomainFakeCfg(baseDn,serverId,replServers,groupId);  LDAPReplicationDomain replicationDomain=MultimasterReplication.createNewDomain(domainConf);  replicationDomain.start();  return replicationDomain;}  }
class C{  @Override public void storeApplication(Application appl) throws EntitlementException {  SSOToken token=SubjectUtils.getSSOToken(subject);  try {    createApplicationCollectionConfig(realm);    String dn=getApplicationDN(appl.getName(),realm);    SMSEntry s=new SMSEntry(token,dn);    s.setAttributes(getApplicationData(appl));    String[] logParams={realm,appl.getName()};    OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"ATTEMPT_SAVE_APPLICATION",logParams,subject);    s.save();    OpenSSOLogger.log(OpenSSOLogger.LogLevel.MESSAGE,Level.INFO,"SUCCEEDED_SAVE_APPLICATION",logParams,subject);    Map<String,String> params=new HashMap<String,String>();    params.put(NotificationServlet.ATTR_REALM_NAME,realm);    Notifier.submit(NotificationServlet.APPLICATIONS_CHANGED,params);  } catch (  SMSException ex) {    String[] logParams={realm,appl.getName(),ex.getMessage()};    OpenSSOLogger.log(OpenSSOLogger.LogLevel.ERROR,Level.INFO,"FAILED_SAVE_APPLICATION",logParams,subject);    Object[] arg={appl.getName()};    throw new EntitlementException(EntitlementException.MODIFY_APPLICATION_FAIL,arg,ex);  }catch (  SSOException ex) {    String[] logParams={realm,appl.getName(),ex.getMessage()};    OpenSSOLogger.log(OpenSSOLogger.LogLevel.ERROR,Level.INFO,"FAILED_SAVE_APPLICATION",logParams,subject);    Object[] arg={appl.getName()};    throw new EntitlementException(EntitlementException.MODIFY_APPLICATION_FAIL,arg,ex);  }}  }
class C{  public boolean isInverted(){  return ((getData() & 0x8) != 0);}  }
class C{  public StatusDetailImpl(){  isMutable=true;}  }
class C{  public MTOMFeature(boolean enabled){  this.enabled=enabled;  this.threshold=0;}  }
class C{  public DuplicateRequestParameterException(final String message,final UrlLocation parameterLocation){  super(400,"invalid_request",message,parameterLocation);}  }
class C{  private Object readResolve(){  if (loadedScripts == null)   loadedScripts=new HashMap<String,String>();  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode18.class,args);}  }
class C{  public MediaSize(int x,int y,int units,MediaSizeName media){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  if (media != null && mediaMap.get(media) == null) {    mediaName=media;    mediaMap.put(mediaName,this);  }  sizeVector.add(this);}  }
class C{  PdfType3Font(PdfDocument document,boolean colorized){  super();  makeIndirect(document);  subset=true;  embedded=true;  fontProgram=new Type3FontProgram(colorized);  fontEncoding=FontEncoding.createEmptyFontEncoding();}  }
class C{  public static PdfAction createNamed(PdfName namedAction){  return new PdfAction().put(PdfName.S,PdfName.Named).put(PdfName.N,namedAction);}  }
class C{  @Override public void addResourceLink(ContextResourceLink resourceLink){  if (entries.contains(resourceLink.getName())) {    return;  } else {    entries.add(resourceLink.getName());  }synchronized (resourceLinks) {    resourceLink.setNamingResources(this);    resourceLinks.put(resourceLink.getName(),resourceLink);  }  support.firePropertyChange("resourceLink",null,resourceLink);  if (resourceRequireExplicitRegistration) {    try {      MBeanUtils.createMBean(resourceLink);    } catch (    Exception e) {      log.warn(sm.getString("namingResources.mbeanCreateFail",resourceLink.getName()),e);    }  }}  }
class C{  public void show(Component origin,int x,int y){  MenuContainer localParent=parent;  if (localParent == null) {    throw new NullPointerException("parent is null");  }  if (!(localParent instanceof Component)) {    throw new IllegalArgumentException("PopupMenus with non-Component parents cannot be shown");  }  Component compParent=(Component)localParent;  if (compParent != origin) {    if (compParent instanceof Container) {      if (!((Container)compParent).isAncestorOf(origin)) {        throw new IllegalArgumentException("origin not in parent's hierarchy");      }    } else {      throw new IllegalArgumentException("origin not in parent's hierarchy");    }  }  if (compParent.getPeer() == null || !compParent.isShowing()) {    throw new RuntimeException("parent not showing on screen");  }  if (peer == null) {    addNotify();  }synchronized (getTreeLock()) {    if (peer != null) {      ((PopupMenuPeer)peer).show(new Event(origin,0,Event.MOUSE_DOWN,x,y,0,0));    }  }}  }
class C{  static Object unmaskNull(Object key){  return (key == NULL_KEY) ? null : key;}  }
class C{  private AST.Access parse_cls_for_type_spec() throws SyntaxException {  AST.Access a;  int arrayDepth=0;  while (((Element)current).getContent().equals("[")) {    nextNode(false);    expecting("]",current.previous(),current,err);    nextNode(false);    ++arrayDepth;  }  if (isPackage((Element)current)) {    parse_package(false);    while (current instanceof Element && ((Element)current).getContent().equals(".")) {      parse_access(false);    }    a=(AST.Access)parsedExps.pop();  } else   if (current.getTokenType() == TokenType.VALID_NAME || isPrimitive(((Element)current).getContent())) {    AST.Access access=new AST.Access(null,((Element)current).getContent(),current.getLineCol());    parsedExps.push(access);    nextNode(true);    while (current instanceof Element && ((Element)current).getContent().equals(".")) {      parse_access(false);    }    a=(AST.Access)parsedExps.pop();  } else {    err.UnexpectedTokenException("type",((Element)current).getContent(),current.getLineCol());    err.debug("assume that the token is Object");    a=new AST.Access(null,"Object",LineCol.SYNTHETIC);  }  for (int i=0; i < arrayDepth; ++i) {    a=new AST.Access(a,"[]",a.line_col());  }  return a;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public RESTEndpointBuilder post(){  this.httpMethod=HTTPMethod.POST;  return this;}  }
class C{  private BigInteger squareToomCook3(){  int len=mag.length;  int k=(len + 2) / 3;  int r=len - 2 * k;  BigInteger a0, a1, a2;  a2=getToomSlice(k,r,0,len);  a1=getToomSlice(k,r,1,len);  a0=getToomSlice(k,r,2,len);  BigInteger v0, v1, v2, vm1, vinf, t1, t2, tm1, da1;  v0=a0.square();  da1=a2.add(a0);  vm1=da1.subtract(a1).square();  da1=da1.add(a1);  v1=da1.square();  vinf=a2.square();  v2=da1.add(a2).shiftLeft(1).subtract(a0).square();  t2=v2.subtract(vm1).exactDivideBy3();  tm1=v1.subtract(vm1).shiftRight(1);  t1=v1.subtract(v0);  t2=t2.subtract(t1).shiftRight(1);  t1=t1.subtract(tm1).subtract(vinf);  t2=t2.subtract(vinf.shiftLeft(1));  tm1=tm1.subtract(t2);  int ss=k * 32;  return vinf.shiftLeft(ss).add(t2).shiftLeft(ss).add(t1).shiftLeft(ss).add(tm1).shiftLeft(ss).add(v0);}  }
class C{  public static int lowestOneBit(int i){  return i & -i;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatedocumentfragment.class,args);}  }
class C{  public Subject createSubject(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT);  if (obj == null) {    return new SubjectImpl();  } else {    return (Subject)obj;  }}  }
class C{  public void showMigrationCling(){  mIsVisible=true;  mLauncher.hideWorkspaceSearchAndHotseat();  ViewGroup root=(ViewGroup)mLauncher.findViewById(R.id.launcher);  View inflated=mInflater.inflate(R.layout.migration_cling,root);  inflated.findViewById(R.id.cling_dismiss_migration_copy_apps).setOnClickListener(this);  inflated.findViewById(R.id.cling_dismiss_migration_use_default).setOnClickListener(this);}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  private Builder(net.aimeizi.person.Person.Builder other){  super(other);  if (isValidValue(fields()[0],other.age)) {    this.age=data().deepCopy(fields()[0].schema(),other.age);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.name)) {    this.name=data().deepCopy(fields()[1].schema(),other.name);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.sex)) {    this.sex=data().deepCopy(fields()[2].schema(),other.sex);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.salary)) {    this.salary=data().deepCopy(fields()[3].schema(),other.salary);    fieldSetFlags()[3]=true;  }  if (isValidValue(fields()[4],other.childrenCount)) {    this.childrenCount=data().deepCopy(fields()[4].schema(),other.childrenCount);    fieldSetFlags()[4]=true;  }}  }
class C{  @Deprecated public static FontProgram createType1Font(String name,byte[] afm,byte[] pfb,boolean cached) throws java.io.IOException {  FontProgram fontProgram;  String fontKey=null;  if (cached) {    if (name != null) {      fontKey=name;    } else {      fontKey=Integer.toString(ArrayUtil.hashCode(afm));    }    fontProgram=FontCache.getFont(fontKey);    if (fontProgram != null) {      return fontProgram;    }  }  fontProgram=new Type1Font(name,null,afm,pfb);  return cached ? FontCache.saveFont(fontProgram,fontKey) : fontProgram;}  }
class C{  public static String transliterate(String self,String transformIdentifier){  return Transliterator.getInstance(transformIdentifier).transform(self);}  }
class C{  private NSObject doParse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  bytes=data;  String magic=new String(copyOfRange(bytes,0,8));  if (!magic.startsWith("bplist")) {    throw new IllegalArgumentException("The given data is no binary property list. Wrong magic bytes: " + magic);  }  majorVersion=magic.charAt(6) - 0x30;  minorVersion=magic.charAt(7) - 0x30;  if (majorVersion > 0) {    throw new IllegalArgumentException("Unsupported binary property list format: v" + majorVersion + "."+ minorVersion+ ". "+ "Version 1.0 and later are not yet supported.");  }  byte[] trailer=copyOfRange(bytes,bytes.length - 32,bytes.length);  int offsetSize=(int)parseUnsignedInt(trailer,6,7);  objectRefSize=(int)parseUnsignedInt(trailer,7,8);  int numObjects=(int)parseUnsignedInt(trailer,8,16);  int topObject=(int)parseUnsignedInt(trailer,16,24);  int offsetTableOffset=(int)parseUnsignedInt(trailer,24,32);  offsetTable=new int[numObjects];  for (int i=0; i < numObjects; i++) {    offsetTable[i]=(int)parseUnsignedInt(bytes,offsetTableOffset + i * offsetSize,offsetTableOffset + (i + 1) * offsetSize);  }  return parseObject(topObject);}  }
class C{  @Override protected void thresholdReached() throws IOException {  if (prefix != null) {    outputFile=File.createTempFile(prefix,suffix,directory);  }  FileOutputStream fos=new FileOutputStream(outputFile);  memoryOutputStream.writeTo(fos);  currentOutputStream=fos;  memoryOutputStream=null;}  }
class C{  public String stripContentExtras(String contentType){  int index=contentType.indexOf(';');  return (index >= 0) ? contentType.substring(0,index) : contentType;}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private static void parse(InputStream in,Encoding encoding,ContentHandler contentHandler) throws IOException, SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    InputSource source=new InputSource(in);    source.setEncoding(encoding.expatName);    reader.parse(source);  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  private void updateBaseConfig(BaseConfigType baseConfig,String attributeName,List list) throws AMConsoleException {  List attrList=baseConfig.getAttribute();  for (Iterator it=attrList.iterator(); it.hasNext(); ) {    AttributeElement avpnew=(AttributeElement)it.next();    String name=avpnew.getName();    if (name.equals(attributeName)) {      avpnew.getValue().clear();      avpnew.getValue().addAll(list);    }  }}  }
class C{  public ExpressionException(Throwable cause){  super(cause);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns02","emp:domestic",attrName);}  }
class C{  private void uninstallWindowListeners(JRootPane root){  if (window != null) {    window.removeMouseListener(mouseInputListener);    window.removeMouseMotionListener(mouseInputListener);  }}  }
class C{  public void initialize(SSOToken token,Map configParams) throws DelegationException {  this.appToken=token;  try {    maxCacheSize=SystemProperties.getAsInt(CONFIGURED_CACHE_SIZE,DEFAULT_CACHE_SIZE);    if (maxCacheSize < 0) {      maxCacheSize=DEFAULT_CACHE_SIZE;    }    delegationCache=new Cache(maxCacheSize);    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("DelegationPolicyImpl.initialize(): cache size=" + maxCacheSize);    }    pe=new PolicyEvaluator(POLICY_REPOSITORY_REALM,DelegationManager.DELEGATION_SERVICE);    pe.addPolicyListener(this);    AMIdentityRepository idRepo=new AMIdentityRepository(appToken,"/");    idRepo.addEventListener(this);    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("DelegationPolicyImpl: IdRepo event listener added " + "for root realm.");    }    OrganizationConfigManager ocm=new OrganizationConfigManager(appToken,"/");    Set orgNames=ocm.getSubOrganizationNames("*",true);    if ((orgNames != null) && (!orgNames.isEmpty())) {      Iterator it=orgNames.iterator();      while (it.hasNext()) {        String org=(String)it.next();        AMIdentityRepository idr=new AMIdentityRepository(appToken,org);        idr.addEventListener(this);        idRepoListeners.put(org,idRepo);        if (DelegationManager.debug.messageEnabled()) {          DelegationManager.debug.message("DelegationPolicyImpl: IdRepo event listener " + "added for realm (" + org + ").");        }      }    }    scm=new ServiceConfigManager(PolicyConfig.POLICY_CONFIG_SERVICE,token);    scm.addListener(this);  } catch (  Exception e) {    DelegationManager.debug.error("DelegationPolicyImpl: initialize() failed");    throw new DelegationException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodename.class,args);}  }
class C{  private String encodeForHTML(String description){  return ESAPI.encoder().encodeForHTML(description);}  }
class C{  public void removeLifecycleListeners(String type) throws MBeanException {  Container container=null;  try {    container=(Container)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  LifecycleListener[] listeners=container.findLifecycleListeners();  for (  LifecycleListener listener : listeners) {    if (listener.getClass().getName().equals(type)) {      container.removeLifecycleListener(listener);    }  }}  }
class C{  public boolean isDefined(Object attrName){  return attributes.isDefined(attrName);}  }
class C{  public String encodedQuery(){  if (queryNamesAndValues == null)   return null;  int queryStart=url.indexOf('?') + 1;  int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),"#");  return url.substring(queryStart,queryEnd);}  }
class C{  public static void addCertificate(KeyStore ks,String ksType,String ksPath,String alias,char[] pwd,String certPath) throws KeyStoreException {  IMPL.addCertificate(ks,ksType,ksPath,alias,pwd,certPath);}  }
class C{  private void recycleView(View view,int index,int current){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  attributes=testEmployee.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItem("lang");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ReferenceParametersElement createReferenceParametersElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ReferenceParametersElementImpl();}  }
class C{  public boolean equals(XObject obj2){  return obj2.getType() == CLASS_NULL;}  }
class C{  public static String toString(int[] oid){  StringBuilder sb=new StringBuilder(3 * oid.length);  for (int i=0; i < oid.length - 1; ++i) {    sb.append(oid[i]);    sb.append('.');  }  sb.append(oid[oid.length - 1]);  return sb.toString();}  }
class C{  protected String sessions(ContextName cn,int idle,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.sessions(printWriter,cn,idle,smClient);  return stringWriter.toString();}  }
class C{  public ItemStack toItemStack(int amount){  return new ItemStack(type,amount,data);}  }
class C{  Object processCHAR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (value.length() != 1)) {        handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (value.length() != 1) {      handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);      return null;    }    return new Character(value.charAt(0));  }}  }
class C{  public static boolean isTimeStamp(final Class type){  return Timestamp.class.isAssignableFrom(type);}  }
class C{  private static int unsignedByteToInt(byte b){  return b & 0xFF;}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSFederationTerminationNotification.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification.signXML: " + "the assertion is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.REQUEST_ID,this.getRequestID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public FilterAttributeBuilder and(){  return new FilterAttributeBuilder(tokenFilter,Type.AND);}  }
class C{  public static boolean apply(JsonValue subject,List<PatchOperation> operations,PatchValueTransformer transformer) throws ResourceException {  boolean isModified=false;  if (operations != null) {    for (    final PatchOperation operation : operations) {      final JsonPointer field=(operation.isMove() || operation.isCopy()) ? operation.getFrom() : operation.getField();      if (field.leaf().matches("\\d") && subject.get(field.parent()) != null && subject.get(field.parent()).isList()) {        throw new BadRequestException("Position-based operation is not allowed: " + field);      }      isModified|=operation.isAdd() ? add(subject,operation) : operation.isRemove() ? remove(subject,operation) : operation.isReplace() ? replace(subject,operation) : operation.isIncrement() ? increment(subject,operation) : operation.isMove() ? move(subject,operation) : operation.isCopy() ? copy(subject,operation) : operation.isTransform() ? transform(subject,operation,transformer) : unknown(subject,operation);    }  }  return isModified;}  }
class C{  protected void tearDown(){}  }
class C{  public static int ignoringWhitespaceIndex(String str,int index){  int j=0;  for (int i=0; ; i++) {    if (!Character.isWhitespace(str.charAt(i)))     j++;    if (j > index)     return i;    if (i == str.length() - 1)     return i + 1;  }}  }
class C{  @NonNull public static Interpolator multiply(Interpolator interpolator,float multiplier){  return multiply(interpolator,constant(multiplier));}  }
class C{  @DataProvider(name="validStatements") public Object[][] valids(){  return new Object[][]{{"1.3.6.1.4.1.42.2.27.8.5.1"},{"2.16.840.1.113730.3.4.18"},{"*"}};}  }
class C{  public void removeStore(String sellerId,Handler<AsyncResult<Void>> resultHandler){  delegate.removeStore(sellerId,resultHandler);}  }
class C{  public GapContent(int initialLength){  super(Math.max(initialLength,2));  char[] implied=new char[1];  implied[0]='\n';  replace(0,0,implied,implied.length);  marks=new MarkVector();  search=new MarkData(0);  queue=new ReferenceQueue<StickyPosition>();}  }
class C{  private void fillLateQueue() throws ChangelogException {  try (DBCursor<UpdateMsg> cursor=replicationServerDomain.getCursorFrom(serverState)){    while (cursor.next() && isLateQueueBelowThreshold()) {      lateQueue.add(cursor.getRecord());    }  } }  }
class C{  private void emitPrimCast(Wrapper from,Wrapper to){  if (from == to) {    return;  }  if (from.isSubwordOrInt()) {    emitI2X(to);  } else {    if (to.isSubwordOrInt()) {      emitX2I(from);      if (to.bitWidth() < 32) {        emitI2X(to);      }    } else {      boolean error=false;switch (from) {case LONG:switch (to) {case FLOAT:          mv.visitInsn(Opcodes.L2F);        break;case DOUBLE:      mv.visitInsn(Opcodes.L2D);    break;default :  error=true;break;}break;case FLOAT:switch (to) {case LONG:mv.visitInsn(Opcodes.F2L);break;case DOUBLE:mv.visitInsn(Opcodes.F2D);break;default :error=true;break;}break;case DOUBLE:switch (to) {case LONG:mv.visitInsn(Opcodes.D2L);break;case FLOAT:mv.visitInsn(Opcodes.D2F);break;default :error=true;break;}break;default :error=true;break;}if (error) {throw new IllegalStateException("unhandled prim cast: " + from + "2"+ to);}}}}  }
class C{  @Override public final String toString(){  return String.valueOf(resultCode);}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  boolean addRESTRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL,boolean reRegister){  boolean status=false;  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.addRESTRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL);  }  if (remotePolicyListeners.contains(serviceName) && !reRegister) {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache.addRESTRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL+ ":is already registered");    }    return status;  }  if (appToken != null) {    try {      String policyServiceListenerURL=null;      policyServiceListenerURL=getRESTPolicyServiceListenerURL(appToken);      String rootURL=getRootURL(notificationURL);      if (debug.messageEnabled()) {        debug.message("ResourceResultCache." + "addRESTRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL+ ":rootURL="+ rootURL+ ":policyServiceListenerURL="+ policyServiceListenerURL);      }      Set<String> resourceNames=new HashSet<String>();      resourceNames.add(rootURL);      String queryString=buildRegisterListenerQueryString(appToken,serviceName,resourceNames);      queryString+="&url=" + URLEncoder.encode(notificationURL,"UTF-8");      String resourceContent=postForm(appToken,policyServiceListenerURL,queryString);      if (debug.messageEnabled()) {        debug.message("ResourceResultCache." + "addRESTRemotePolicyListener():" + ":resourceContent="+ resourceContent);      }      status=true;      remotePolicyListeners.add(serviceName);    } catch (    UnsupportedEncodingException e) {      debug.error("ResourceResultCache.addRESTRemotePolicyListener():" + "Can not add policy listner",e);    }catch (    SSOException se) {      debug.error("ResourceResultCache.addRESTRemotePolicyListener():" + "Can not add policy listner",se);    }catch (    PolicyException pe) {      debug.error("ResourceResultCache.addRESTRemotePolicyListener():" + "Can not add policy listner",pe);    }  } else {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache.addRESTRemotePolicyListener():" + "not adding listener, app sso token is null");    }  }  return status;}  }
class C{  public static boolean isConfigMigratedTo70(){  isRealmEnabled();  return (ditUpgradedCache);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public LayoutQueue(){  tasks=new Vector<Runnable>();}  }
class C{  public NotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){}  }
class C{  public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {  if ((serviceNames != null) && !serviceNames.isEmpty()) {    String[] params=new String[2];    params[0]=universalId;    String currentSvc="";    try {      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {        currentSvc=(String)iter.next();        params[1]=currentSvc;        logEvent("ATTEMPT_IDENTITY_UNASSIGN_SERVICE",params);        amid.unassignService(currentSvc);        logEvent("SUCCEED_IDENTITY_UNASSIGN_SERVICE",params);      }    } catch (    SSOException e) {      String[] paramsEx={universalId,currentSvc,getErrorString(e)};      logEvent("SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx);      debug.warning("EntitiesModelImpl.unassignServices",e);      throw new AMConsoleException(getErrorString(e));    }catch (    IdRepoException e) {      String[] paramsEx={universalId,currentSvc,getErrorString(e)};      logEvent("IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx);      debug.warning("EntitiesModelImpl.unassignServices",e);      throw new AMConsoleException(getErrorString(e));    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AdviceElement createAdviceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AdviceElementImpl();}  }
class C{  protected void updateAutoscroll(Point dragCursorLocn){  if (autoScroller != null)   autoScroller.updateLocation(dragCursorLocn);}  }
class C{  public static void shutdownBackends(){  for (  Backend<?> backend : directoryServer.backends.values()) {    try {      for (      BackendInitializationListener listener : getBackendInitializationListeners()) {        listener.performBackendPreFinalizationProcessing(backend);      }      for (      BackendInitializationListener listener : directoryServer.backendInitializationListeners) {        listener.performBackendPostFinalizationProcessing(backend);      }      backend.finalizeBackend();      try {        String lockFile=LockFileManager.getBackendLockFileName(backend);        StringBuilder failureReason=new StringBuilder();        if (!LockFileManager.releaseLock(lockFile,failureReason)) {          logger.warn(WARN_SHUTDOWN_CANNOT_RELEASE_SHARED_BACKEND_LOCK,backend.getBackendID(),failureReason);        }      } catch (      Exception e2) {        logger.traceException(e2);        logger.warn(WARN_SHUTDOWN_CANNOT_RELEASE_SHARED_BACKEND_LOCK,backend.getBackendID(),stackTraceToSingleLineString(e2));      }    } catch (    Exception e) {      logger.traceException(e);    }  }  LocalBackendWorkflowElement.removeAll();}  }
class C{  public void addPolicyListener(PolicyListener policyListener){  policyCache.addPolicyListener(policyListener);}  }
class C{  public boolean implies(Permission p){  if ((p == null) || (p.getClass() != getClass()))   return false;  BasicPermission that=(BasicPermission)p;  if (this.wildcard) {    if (that.wildcard) {      return that.path.startsWith(path);    } else {      return (that.path.length() > this.path.length()) && that.path.startsWith(this.path);    }  } else {    if (that.wildcard) {      return false;    } else {      return this.path.equals(that.path);    }  }}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public static boolean stackTraceContainsCause(Throwable throwable,Class<? extends Throwable> searchedCause){  Throwable t=throwable;  while ((t=t.getCause()) != null) {    if (searchedCause.isAssignableFrom(t.getClass())) {      return true;    }  }  return false;}  }
class C{  public Object clone(){  if (getClass() == RuleBasedCollator.class) {    return new RuleBasedCollator(this);  } else {    RuleBasedCollator result=(RuleBasedCollator)super.clone();    result.primResult=null;    result.secResult=null;    result.terResult=null;    result.sourceCursor=null;    result.targetCursor=null;    return result;  }}  }
class C{  protected void LocationPath() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_LOCATIONPATH);  boolean seenSlash=tokenIs('/');  if (seenSlash) {    appendOp(4,OpCodes.FROM_ROOT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else   if (m_token == null) {    error(XPATHErrorResources.ER_EXPECTED_LOC_PATH_AT_END_EXPR,null);  }  if (m_token != null) {    if (!RelativeLocationPath() && !seenSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_PATH,new Object[]{m_token});    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  super.firePropertyChange(propertyName,oldValue,newValue);  if (propertyName.equals(EnableWindowBlit)) {    if (newValue != null) {      setScrollMode(BLIT_SCROLL_MODE);    } else {      setScrollMode(SIMPLE_SCROLL_MODE);    }  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  @DataProvider(name="uncaughtInvalidFilters") public Object[][] paramsCreateFilterFromStringUncaughtInvalidFilters(){  return new Object[][]{{"(cn=**)"},{"( sn = test )"},{"&(cn=*)"},{"(!(sn=test)(sn=test2))"},{"(objectclass=**)"}};}  }
class C{  public SessionCondition(){  this(PrivilegeManager.debug,new CoreWrapper(),TimeService.SYSTEM);}  }
class C{  public static List<String> asListOfKeys(Map<String,Set<String>> map){  List<String> result=new ArrayList<>();  if (map != null) {    for (    Map.Entry<String,Set<String>> entry : map.entrySet()) {      result.add(entry.getKey());    }  }  return result;}  }
class C{  public FSAssertionArtifactHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,boolean doFederate,String nameIDPolicy,String relayState){  this.request=request;  this.response=response;  this.relayState=relayState;  this.idpDescriptor=idpDescriptor;  this.idpEntityId=idpEntityId;  this.doFederate=doFederate;  this.nameIDPolicy=nameIDPolicy;}  }
class C{  protected void freeBuffers(){  CryptoInputStream.freeDirectBuffer(inBuffer);  CryptoInputStream.freeDirectBuffer(outBuffer);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public static String makeEndElementTagXML(String elementName,boolean includeNS){  StringBuffer xml=new StringBuffer(100);  String appendNS="";  if (includeNS) {    appendNS="saml:";  }  xml.append(sc.START_END_ELEMENT).append(appendNS).append(elementName).append(sc.RIGHT_ANGLE).append(sc.NL);  return xml.toString();}  }
class C{  private final boolean lookahead(String s,int n){  boolean isToken;  if ((m_queueMark + n) <= m_ops.getTokenQueueSize()) {    String lookahead=(String)m_ops.m_tokenQueue.elementAt(m_queueMark + (n - 1));    isToken=(lookahead != null) ? lookahead.equals(s) : (s == null);  } else {    isToken=(null == s);  }  return isToken;}  }
class C{  private void writeDataUptoIncludingIlst(FileChannel fileReadChannel,FileChannel fileWriteChannel,int oldIlstSize,int startIlstWithinFile,ByteBuffer rawIlstData) throws IOException {  fileReadChannel.position(0);  fileWriteChannel.transferFrom(fileReadChannel,0,startIlstWithinFile);  fileWriteChannel.position(startIlstWithinFile);  fileWriteChannel.write(rawIlstData);  fileReadChannel.position(startIlstWithinFile + oldIlstSize);}  }
class C{  public boolean canUndo(){  return !isInProgress() && super.canUndo();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  NodeList addressList;  NodeList addressChildList;  Element element;  EntityReference entRef2;  EntityReference entRefImp2;  EntityReference entRef3;  EntityReference entRefImp3;  String nodeName2;  String nodeName3;  String nodeNameImp2;  String nodeNameImp3;  NodeList nodes;  Node nodeImp3;  Node nodeImp2;  String nodeValueImp2;  String nodeValueImp3;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  addressList=doc.getElementsByTagName("address");  element=(Element)addressList.item(1);  addressChildList=element.getChildNodes();  entRef2=(EntityReference)addressChildList.item(0);  entRef3=(EntityReference)addressChildList.item(2);  entRefImp2=(EntityReference)docImp.importNode(entRef2,true);  entRefImp3=(EntityReference)docImp.importNode(entRef3,false);  nodeName2=entRef2.getNodeName();  nodeName3=entRef3.getNodeName();  nodeNameImp2=entRefImp2.getNodeName();  nodeNameImp3=entRefImp3.getNodeName();  assertEquals("documentimportnode21_Ent2NodeName",nodeName2,nodeNameImp2);  assertEquals("documentimportnode21_Ent3NodeName",nodeName3,nodeNameImp3);  entRefImp2=(EntityReference)doc.importNode(entRef2,true);  entRefImp3=(EntityReference)doc.importNode(entRef3,false);  nodes=entRefImp2.getChildNodes();  nodeImp2=nodes.item(0);  nodeValueImp2=nodeImp2.getNodeValue();  nodes=entRefImp3.getChildNodes();  nodeImp3=nodes.item(0);  nodeValueImp3=nodeImp3.getNodeValue();  assertEquals("documentimportnode21_Ent2NodeValue","1900 Dallas Road",nodeValueImp2);  assertEquals("documentimportnode21_Ent3Nodevalue","Texas",nodeValueImp3);}  }
class C{  private void validateDnsNames(Set dnsNameSet) throws PolicyException {  Iterator dnsNames=dnsNameSet.iterator();  while (dnsNames.hasNext()) {    String dnsName=(String)dnsNames.next();    validateDnsName(dnsName);    dnsList.add(dnsName.toLowerCase());  }}  }
class C{  @Override public void write(int c) throws IOException {  if (writer != null) {    writer.write(c);  } else {    ensureOpen();    if (nextChar >= bufferSize) {      reAllocBuff(1);    }    cb[nextChar++]=(char)c;  }}  }
class C{  public void add(NetObject obj){  super.add(obj);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public boolean hasLrParam(){  return uriParms.getNameValue(LR) != null;}  }
class C{  protected void ensureMyLastProtocolMessagesHaveRecords(List<ProtocolMessage> protocolMessages){  for (int pmPointer=0; pmPointer < protocolMessages.size(); pmPointer++) {    ProtocolMessage pm=protocolMessages.get(pmPointer);    if (handlingMyLastProtocolMessageWithContentType(protocolMessages,pmPointer)) {      if (pm.getRecords() == null || pm.getRecords().isEmpty()) {        pm.addRecord(new Record());      }    }  }}  }
class C{  public static String[][] read(String fileName,LogQuery logQuery,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  LogReader lr=new LogReader();  lr.readConfiguration();  if (fileName == null) {    throw new IllegalArgumentException("filename can't be null");  }  if (maxReordToReturn <= 0) {    maxReordToReturn=1;  }  if (logQuery != null) {    if (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS) {      logQuery.setMaxRecord(maxReordToReturn);    } else     if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) && (logTypeIsFile)) {      logQuery.setMaxRecord(maxReordToReturn);    }  } else {    logQuery=new LogQuery(maxReordToReturn);  }  setLoggerName(fileName);  if (lr.isAllowed(userCrdential) != true) {    throw new AMLogException(fileName + ":" + AMLogException.LOG_RD_AUTH_FAILED);  }  if (logTypeIsFile) {    String fullFileName=logPathName + fileName;    queryResult=currentHandler.logRecRead(fullFileName,logQuery,true);  } else {    queryResult=currentDBHandler.logRecRead(fileName,logQuery,manager,true);  }  return queryResult;}  }
class C{  public TimeTickEvent(Intent intent){  super(APPLICATION_NAME,EVENT_NAME,intent);}  }
class C{  private boolean promptIfRequiredForWindowsService(){  boolean enableService=false;  if (isWindows()) {    if (argParser.enableWindowsServiceArg.isPresent()) {      enableService=true;    } else {      println();      final LocalizableMessage message=INFO_INSTALLDS_PROMPT_ENABLE_SERVICE.get();      try {        final boolean defaultValue=(lastResetEnableWindowsService == null) ? false : lastResetEnableWindowsService;        enableService=confirmAction(message,defaultValue);      } catch (      final ClientException ce) {        logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));      }    }  }  return enableService;}  }
class C{  public ApplicationHttpResponse(HttpServletResponse response,boolean included){  super(response);  setIncluded(included);}  }
class C{  public InvalidRequestException(){  this("The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed.");}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  System.out.println("OblixAuthModule initialization" + options);  oamCookieName=CollectionHelper.getMapAttr(options,COOKIE_NAME,"ObSSOCookie");  oamSDKInstallDir=CollectionHelper.getMapAttr(options,OAM_SDK_INSTALL_DIR);  checkRemoteUserOnly=Boolean.valueOf(CollectionHelper.getMapAttr(options,CHECK_REMOTE_USER_ONLY,"false")).booleanValue();  remoteUserHeader=CollectionHelper.getMapAttr(options,REMOTE_USER_HEADER_NAME,"REMOTE_USER");  try {    obconfig=new ObConfig();    obconfig.initialize(oamSDKInstallDir);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public BasicAttributes(String attrID,Object val,boolean ignoreCase){  this(ignoreCase);  this.put(new BasicAttribute(attrID,val));}  }
class C{  public static Set asCaseInsensitiveHashSet(Object... values){  if (values == null) {    return new CaseInsensitiveHashSet(0);  } else {    return new CaseInsensitiveHashSet(Arrays.asList(values));  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyValueType createKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyValueTypeImpl();}  }
class C{  private boolean isLongMIN_VALUE(){  if (decimalAt != count || count != MAX_COUNT) {    return false;  }  for (int i=0; i < count; ++i) {    if (digits[i] != LONG_MIN_REP[i])     return false;  }  return true;}  }
class C{  protected void check(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"check",params,signature);}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,false);}  }
class C{  private PlaDirection(BigInteger dx,BigInteger dy){  if (dx.signum() == 0 && dy.signum() == 0) {    dir_x=0;    dir_y=0;    is_vertical=true;    is_horizontal=true;    is_NaN=true;    return;  }  BigInteger gcd=dx.gcd(dy);  if (gcd.signum() != 0) {    dx=dx.divide(gcd);    dy=dy.divide(gcd);  }  BigInteger two=BigInteger.valueOf(2);  while (PlaLimits.is_critical(dx.longValue()) || PlaLimits.is_critical(dy.longValue())) {    System.err.println("PlaDirection: INteger REDUCING accuracy");    dx=dx.divide(two);    dy=dx.divide(two);  }  dir_x=dx.intValue();  dir_y=dy.intValue();  is_vertical=dir_x == 0;  is_horizontal=dir_y == 0;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public String productShortName(){  return properties.getProperty("product.name.short");}  }
class C{  public static Document sign(String realm,EntityDescriptorElement descriptor) throws JAXBException, SAML2MetaException {  if (descriptor == null) {    throw new SAML2MetaException("Unable to sign null descriptor");  }  SAML2MetaManager metaManager=new SAML2MetaManager();  EntityConfigElement cfgElem=metaManager.getEntityConfig(realm,descriptor.getEntityID());  boolean isHosted;  if (cfgElem == null) {    isHosted=false;  } else {    isHosted=cfgElem.isHosted();  }  String signingCert=getRealmSetting(METADATA_SIGNING_KEY,realm);  if (signingCert == null) {    return null;  }  initializeKeyStore();  String xmlstr=SAML2MetaUtils.convertJAXBToString(descriptor);  xmlstr=formatBase64BinaryElement(xmlstr);  Document doc=XMLUtils.toDOMDocument(xmlstr,debug);  NodeList childNodes=doc.getDocumentElement().getChildNodes();  for (int i=0; i < childNodes.getLength(); i++) {    Node node=childNodes.item(i);    if (node.getLocalName() != null && node.getLocalName().equals("Signature") && node.getNamespaceURI().equals(NS_XMLSIG)) {      if (isHosted) {        node.getParentNode().removeChild(node);        break;      } else {        return doc;      }    }  }  String descriptorId=SAMLUtils.generateID();  doc.getDocumentElement().setAttribute(ATTR_ID,descriptorId);  XMLSignatureManager sigManager=XMLSignatureManager.getInstance();  try {    String xpath="//*[local-name()=\"" + TAG_ENTITY_DESCRIPTOR + "\" and namespace-uri()=\""+ NS_META+ "\"]/*[1]";    sigManager.signXMLUsingKeyPass(doc,signingCert,getRealmSetting(METADATA_SIGNING_KEY_PASS,realm),null,SAML2Constants.ID,descriptorId,true,xpath);  } catch (  XMLSignatureException xmlse) {    if (debug.messageEnabled()) {      debug.message("SAML2MetaSecurityUtils.sign:",xmlse);    }  }  return doc;}  }
class C{  protected void close(DirContext context){  if (context == null)   return;  if (tls != null) {    try {      tls.close();    } catch (    IOException e) {      containerLog.error(sm.getString("jndiRealm.tlsClose"),e);    }  }  try {    if (containerLog.isDebugEnabled())     containerLog.debug("Closing directory context");    context.close();  } catch (  NamingException e) {    containerLog.error(sm.getString("jndiRealm.close"),e);  }  this.context=null;}  }
class C{  public StringBuffer insert(int index,double d){  return insert(index,Double.toString(d));}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void fill3DRect(int x,int y,int width,int height,boolean raised){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling 3D rect: " + new Rectangle(x,y,width,height)+ " Raised bezel: "+ raised);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fill3DRect(x,y,width,height,raised);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fill3DRect(x,y,width,height,raised);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fill3DRect(x,y,width,height,raised);}  }
class C{  public static boolean matchArch(String name){  return osArchitecture.equalsIgnoreCase(name);}  }
class C{  private String wrapFilename(String fileName){  StringBuilder newFileName=new StringBuilder();  if (configuration.getDebugPrefix() != null) {    newFileName.append(configuration.getDebugPrefix());  }  newFileName.append(fileName);  if (suffixDateFormat != null && (configuration.getRotationInterval() > 0 || configuration.getRotationFileSizeInByte() > 0)) {synchronized (suffixDateFormat) {      newFileName.append(suffixDateFormat.format(new Date(fileCreationTime)));    }  }  return newFileName.toString();}  }
class C{  public void removeAllElements(){  int index1=delegate.size() - 1;  delegate.removeAllElements();  if (index1 >= 0) {    fireIntervalRemoved(this,0,index1);  }}  }
class C{  public DeltaSession(Manager manager){  super(manager);  this.resetDeltaRequest();}  }
class C{  static MatchingRuleImpl relativeTimeGTOMatchingRule(){  return new RelativeTimeGreaterThanOrderingMatchingRuleImpl();}  }
class C{  @Override public boolean valueIsAcceptable(final String valueString,final LocalizableMessageBuilder invalidReason){  File valueFile;  try {    valueFile=new File(valueString);    if (!valueFile.exists()) {      invalidReason.append(ERR_FILEARG_NO_SUCH_FILE.get(valueString,longIdentifier));      return false;    }  } catch (  final Exception e) {    invalidReason.append(ERR_FILEARG_CANNOT_VERIFY_FILE_EXISTENCE.get(valueString,longIdentifier,getExceptionMessage(e)));    return false;  }  String line;  try (BufferedReader reader=new BufferedReader(new FileReader(valueFile))){    line=reader.readLine();  } catch (  final FileNotFoundException e) {    invalidReason.append(ERR_FILEARG_CANNOT_OPEN_FILE.get(valueString,longIdentifier,getExceptionMessage(e)));    return false;  }catch (  final IOException e) {    invalidReason.append(ERR_FILEARG_CANNOT_READ_FILE.get(valueString,longIdentifier,getExceptionMessage(e)));    return false;  }  if (line == null) {    invalidReason.append(ERR_FILEARG_EMPTY_FILE.get(valueString,longIdentifier));    return false;  }  namesToValues.put(valueString,line);  return true;}  }
class C{  @Override public void addFilterMapBefore(FilterMap filterMap){  validateFilterMap(filterMap);  filterMaps.addBefore(filterMap);  fireContainerEvent("addFilterMap",filterMap);}  }
class C{  public static void handlePrintConversionException(Object caller,Exception e,XMLSerializer serializer) throws SAXException {  if (e instanceof SAXException)   throw (SAXException)e;  String message=e.getMessage();  if (message == null) {    message=e.toString();  }  ValidationEvent ve=new PrintConversionEventImpl(ValidationEvent.ERROR,message,new ValidationEventLocatorImpl(caller),e);  serializer.reportError(ve);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public static void writeJspMonitor(PrintWriter writer,Set<ObjectName> jspMonitorONs,MBeanServer mBeanServer,int mode) throws Exception {  int jspCount=0;  int jspReloadCount=0;  Iterator<ObjectName> iter=jspMonitorONs.iterator();  while (iter.hasNext()) {    ObjectName jspMonitorON=iter.next();    Object obj=mBeanServer.getAttribute(jspMonitorON,"jspCount");    jspCount+=((Integer)obj).intValue();    obj=mBeanServer.getAttribute(jspMonitorON,"jspReloadCount");    jspReloadCount+=((Integer)obj).intValue();  }  if (mode == 0) {    writer.print("<br>");    writer.print(" JSPs loaded: ");    writer.print(jspCount);    writer.print(" JSPs reloaded: ");    writer.print(jspReloadCount);  } else   if (mode == 1) {  }}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  private void uninstallLayout(JRootPane root){  if (savedOldLayout != null) {    root.setLayout(savedOldLayout);    savedOldLayout=null;  }}  }
class C{  private boolean fill(boolean block) throws IOException {  if (parsingHeader) {    if (lastValid >= headerBufferSize) {      throw new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"));    }  } else {    lastValid=pos=end;  }  int nRead=wrapper.read(block,buf,pos,buf.length - pos);  if (nRead > 0) {    lastValid=pos + nRead;    return true;  } else   if (nRead == -1) {    throw new EOFException(sm.getString("iib.eof.error"));  } else {    return false;  }}  }
class C{  private <K extends Comparable<K>,V>Log<K,V> openLog(final File serverIdPath,final RecordParser<K,V> parser,LogRotationParameters rotationParams,List<Log<K,V>> logsCache) throws ChangelogException {  checkShutDownBeforeOpening(serverIdPath);  final Log<K,V> log=Log.openLog(this,serverIdPath,parser,rotationParams);  checkShutDownAfterOpening(serverIdPath,log);  logsCache.add(log);  return log;}  }
class C{  public LDAPPostReadResponseControl(SearchResultEntry searchEntry){  this(false,searchEntry);}  }
class C{  public String toString(){  return (toXML());}  }
class C{  protected static boolean versionCompatible(String currentVersion,String expectedVersion){  if (Character.isDigit(expectedVersion.charAt(expectedVersion.length() - 1))) {    if (!currentVersion.startsWith(expectedVersion)) {      return false;    }  } else {    boolean backwardCom=false;    int compareLength=Math.min(expectedVersion.length() - 1,currentVersion.length());    if (expectedVersion.endsWith("-")) {      backwardCom=true;    }    for (int i=0; i < compareLength; i++) {      if (backwardCom) {        if (expectedVersion.charAt(i) < currentVersion.charAt(i)) {          return false;        }      } else {        if (currentVersion.charAt(i) > expectedVersion.charAt(i)) {          break;        }        if (currentVersion.charAt(i) < expectedVersion.charAt(i)) {          return false;        }      }    }  }  return true;}  }
class C{  public SessionException(Exception ex){  super(ex);}  }
class C{  public boolean is_colinear(PlaPointFloat f_point,double tolerance_sq){  PlaPointFloat f_project=f_point.projection_approx(this);  if (f_project.is_NaN())   return true;  double f_dist=f_project.distance_square(f_point);  return f_dist < tolerance_sq;}  }
class C{  public JKDataAccessException(final String message){  super(message);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.RetrievalMethodElement createRetrievalMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.RetrievalMethodElementImpl();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Vector)) {    return false;  }  Vector other=(Vector)obj;  return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));}  }
class C{  public void test_initializeILjava_security_SecureRandom() throws Exception {  KeyPairGenerator keyPair=KeyPairGenerator.getInstance("DSA");  keyPair.initialize(1024,new SecureRandom());}  }
class C{  protected final void openSessionForPublish(String applicationId,List<String> permissions,SessionLoginBehavior behavior,int activityCode){  openSession(applicationId,permissions,behavior,activityCode,SessionAuthorizationType.PUBLISH);}  }
class C{  public void replicaOfflineMsgForwarded(DN baseDN){  replicaOfflineMsgs.remove(baseDN);}  }
class C{  private Expression compileExtension(int opPos) throws TransformerException {  int endExtFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  java.lang.String ns=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  java.lang.String funcName=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  Function extension=new FuncExtFunction(ns,funcName,String.valueOf(getNextMethodId()));  try {    int i=0;    while (opPos < endExtFunc) {      int nextOpPos=getNextOpPos(opPos);      extension.setArg(this.compile(opPos),i);      opPos=nextOpPos;      i++;    }  } catch (  WrongNumberArgsException wnae) {    ;  }  return extension;}  }
class C{  private void closeConnectionPool(){  final GenericObjectPool<?> oldpool=connectionPool;  connectionPool=null;  try {    if (oldpool != null) {      oldpool.close();    }  } catch (  final Exception e) {  }}  }
class C{  protected void list(PrintWriter writer,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.list",engine.getName()));  }  writer.println(smClient.getString("hostManagerServlet.listed",engine.getName()));  Container[] hosts=engine.findChildren();  for (int i=0; i < hosts.length; i++) {    Host host=(Host)hosts[i];    String name=host.getName();    String[] aliases=host.findAliases();    StringBuilder buf=new StringBuilder();    if (aliases.length > 0) {      buf.append(aliases[0]);      for (int j=1; j < aliases.length; j++) {        buf.append(',').append(aliases[j]);      }    }    writer.println(smClient.getString("hostManagerServlet.listitem",name,buf.toString()));  }}  }
class C{  static void interleaveWithECBytes(BitVector bits,int numTotalBytes,int numDataBytes,int numRSBlocks,BitVector result) throws WriterException {  if (bits.sizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  List<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    ByteArray dataBytes=new ByteArray();    dataBytes.set(bits.getArray(),dataBytesOffset,numDataBytesInBlock[0]);    ByteArray ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,dataBytes.size());    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.size());    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  for (int i=0; i < maxNumDataBytes; ++i) {    for (int j=0; j < blocks.size(); ++j) {      ByteArray dataBytes=blocks.get(j).getDataBytes();      if (i < dataBytes.size()) {        result.appendBits(dataBytes.at(i),8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (int j=0; j < blocks.size(); ++j) {      ByteArray ecBytes=blocks.get(j).getErrorCorrectionBytes();      if (i < ecBytes.size()) {        result.appendBits(ecBytes.at(i),8);      }    }  }  if (numTotalBytes != result.sizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.sizeInBytes()+ " differ.");  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    String data=transformer.transformToString(this);    transformer.getResultTreeHandler().comment(data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  private void socksRequestConnection(InetAddress applicationServerAddress,int applicationServerPort) throws IOException {  socksSendRequest(Socks4Message.COMMAND_CONNECT,applicationServerAddress,applicationServerPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  public SyncFailedException(String desc){  super(desc);}  }
class C{  public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);  this.hitState=hitState[0];  yoloView=new ImageView(hitState[1]);  yoloView.setFitWidth(yoloWidth);  this.parent=parent;  zone=stageZone;}  }
class C{  public void stop(){  if (mShrinkingController != null && mShrinkingController.isRunning()) {    mShrinkingController.end();    mShrinkingController.cancel();  }  if (mProgressingController != null && mProgressingController.isRunning()) {    mProgressingController.end();    mProgressingController.cancel();  }}  }
class C{  public NamedStyle(Style parent){  this(null,parent);}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public void dropActionChanged(DropTargetDragEvent dtde){}  }
class C{  private void componentChanged(JComponent c){  JComponent comp=((JToolTip)c).getComponent();  if (comp != null && !(comp.isEnabled())) {    if (UIManager.getBorder("ToolTip.borderInactive") != null) {      LookAndFeel.installBorder(c,"ToolTip.borderInactive");    } else {      LookAndFeel.installBorder(c,"ToolTip.border");    }    if (UIManager.getColor("ToolTip.backgroundInactive") != null) {      LookAndFeel.installColors(c,"ToolTip.backgroundInactive","ToolTip.foregroundInactive");    } else {      LookAndFeel.installColors(c,"ToolTip.background","ToolTip.foreground");    }  } else {    LookAndFeel.installBorder(c,"ToolTip.border");    LookAndFeel.installColors(c,"ToolTip.background","ToolTip.foreground");  }}  }
class C{  public static String DNtoName(String dn,boolean noTypes){  String id=dn;  if (StringUtils.isNotEmpty(dn) && LDAPUtils.isDN(dn,1)) {    try {      DN name=DN.valueOf(dn);      id=LDAPUtils.unescapeValue(noTypes ? rdnValueFromDn(name) : name.rdn().toString());    } catch (    LocalizedIllegalArgumentException e) {      DEBUG.error("DNUtils.isDN: Invalid DN {}",dn,e);    }  }  return id;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.UserInteractionElement createUserInteractionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.UserInteractionElementImpl();}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (audiences != null) {      audiences=Collections.unmodifiableList(audiences);    }    isMutable=false;  }}  }
class C{  public static void doSSOFederate(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String reqBinding,SAML2EventLogger auditor){  try {    doSSOFederate(request,response,out,false,reqBinding,auditor);    auditor.auditAccessSuccess();  } catch (  FederatedSSOException ex) {    auditor.auditAccessFailure(ex.getFaultCode(),ex.getLocalizedMessage());    try {      SAML2Utils.debug.message("Invoking IDP adapter preSendFailureResponse hook");      final SAML2IdentityProviderAdapter idpAdapter=ex.getIdpAdapter();      if (idpAdapter != null) {        idpAdapter.preSendFailureResponse(request,response,ex.getFaultCode(),ex.getDetail());      }    } catch (    SAML2Exception se2) {      SAML2Utils.debug.error("Error invoking the IDP Adapter",se2);    }    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.getMessageCode(),SAML2Utils.bundle.getString(ex.getMessageCode()));  }}  }
class C{  private static float[] RGBtoHSL(float[] rgb,float[] hsl){  if (hsl == null) {    hsl=new float[3];  }  float max=max(rgb[0],rgb[1],rgb[2]);  float min=min(rgb[0],rgb[1],rgb[2]);  float summa=max + min;  float saturation=max - min;  if (saturation > 0.0f) {    saturation/=(summa > 1.0f) ? 2.0f - summa : summa;  }  hsl[0]=getHue(rgb[0],rgb[1],rgb[2],max,min);  hsl[1]=saturation;  hsl[2]=summa / 2.0f;  return hsl;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  public static void main(final String[] args) throws EmbeddedDirectoryServerException {  if (args.length != 2 && args.length != 4 && args.length != 7) {    System.err.println("Usage: openDJArchive serverRootDir " + "[baseDn backendType [ldapPort adminPort jmxPort]]");    System.exit(1);  }  int i=0;  final String openDJArchive=args[i++];  final String serverRootDir=args[i++];  final String baseDn=(args.length > i) ? args[i++] : "o=example";  final String backendType=(args.length > i) ? args[i++] : "pdb";  final int ldapPort=(args.length > i) ? Integer.parseInt(args[i++]) : 1500;  final int adminPort=(args.length > i) ? Integer.parseInt(args[i++]) : 4500;  final int jmxPort=(args.length > i) ? Integer.parseInt(args[i++]) : 1600;  performSetup(openDJArchive,serverRootDir,baseDn,backendType,ldapPort,adminPort,jmxPort);}  }
class C{  public boolean isAccessibleChildSelected(int i){  if (i == 0) {    Object[] rootPath=new Object[1];    rootPath[0]=treeModel.getRoot();    if (rootPath[0] == null)     return false;    TreePath childPath=new TreePath(rootPath);    return JTree.this.isPathSelected(childPath);  } else {    return false;  }}  }
class C{  private boolean hasPrivilege(final AuthenticationInfo authInfo){  boolean ret=true;  final InternalClientConnection tempConn=new InternalClientConnection(authInfo);  if (!tempConn.hasPrivilege(Privilege.PROXIED_AUTH,bindOp)) {    setCallbackMsg(ERR_SASL_AUTHZID_INSUFFICIENT_PRIVILEGES.get(authEntry.getName()));    ret=false;  }  return ret;}  }
class C{  @VisibleForTesting protected Map<String,String> calculateModifiedServerDefaults(Map<String,String> newDefaults,Map<String,String> existingDefaults,Set<String> attrToModify){  Map<String,String> modifiedValues=new HashMap<String,String>();  for (  String attrName : attrToModify) {    String newAttr=newDefaults.get(attrName);    String existingAttr=existingDefaults.get(attrName);    if (newAttr != null && existingAttr != null && !newAttr.equals(existingAttr)) {      modifiedValues.put(attrName,newAttr);    }  }  return modifiedValues;}  }
class C{  public static void include(ServletRequest request,ServletResponse response,String relativePath,JspWriter out,boolean flush) throws IOException, ServletException {  if (flush && !(out instanceof BodyContent))   out.flush();  String resourcePath=getContextRelativePath(request,relativePath);  RequestDispatcher rd=request.getRequestDispatcher(resourcePath);  rd.include(request,new ServletResponseWrapperInclude(response,out));}  }
class C{  public static PdfTargetDictionary createChildTarget(int pageNumber,int annotationIndex){  return new PdfTargetDictionary(PdfName.C).put(PdfName.P,new PdfNumber(pageNumber - 1)).put(PdfName.A,new PdfNumber(annotationIndex));}  }
class C{  public static ComponentUI createUI(JComponent x){  return new MetalSplitPaneUI();}  }
class C{  public org.w3c.dom.Document encryptAndReplaceResourceID(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.security.Key kek,int kekStrength,String providerID) throws EncryptionException {  return encryptAndReplace(doc,element,secretKeyAlg,keyStrength,kek,kekStrength,providerID,true);}  }
class C{  private <H,L>void store(H hashed,L listed,Map<H,LinkedHashSet<L>> map){  LinkedHashSet<L> list=map.get(hashed);  if (list == null) {    list=new LinkedHashSet<>(1);    map.put(hashed,list);  }  if (!list.contains(listed)) {    list.add(listed);  }}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  private void updateServer(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  DN dn=makeDNFromServerProperties(serverProperties);  try {    ModifyRequest request=newModifyRequest(dn);    for (    ServerProperty prop : serverProperties.keySet()) {      Attribute attr=makeAttrFromServerProperty(prop,serverProperties.get(prop));      if (attr != null) {        request.addModification(new Modification(REPLACE,attr));      }    }    throwIfNotSuccess(connectionWrapper.getConnection().modify(request));    if (serverProperties.containsKey(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE)) {      registerInstanceKeyCertificate(serverProperties,dn);    }  } catch (  ADSContextException ace) {    throw ace;  }catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.NOT_YET_REGISTERED);  }catch (  Exception x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  @Override public Object defaultInstance(Object bean) throws InstantiationException, IllegalAccessException {  if (bean instanceof StandardContext) {    StandardContext defaultContext=new StandardContext();    return defaultContext;  } else   return super.defaultInstance(bean);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],provider);      fail("Expected IllegalArgumentException was not thrown for null provider");    } catch (    IllegalArgumentException e) {    }    try {      KeyManagerFactory.getInstance(validValues[i],"");      fail("Expected IllegalArgumentException was not thrown for empty provider");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.FaultToElement createFaultToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.FaultToElementImpl();}  }
class C{  protected void fireMenuDragMouseEntered(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseEntered(event);    }  }}  }
class C{  public SectionAdapter(int layoutResId,int sectionHeadResId,List data){  super(layoutResId,sectionHeadResId,data);}  }
class C{  public void insertComponent(Component c){  MutableAttributeSet inputAttributes=getInputAttributes();  inputAttributes.removeAttributes(inputAttributes);  StyleConstants.setComponent(inputAttributes,c);  replaceSelection(" ",false);  inputAttributes.removeAttributes(inputAttributes);}  }
class C{  public void paint(Graphics g){  int width=getWidth();  int height=getHeight();  if (editingIcon != null) {    int yLoc=calculateIconY(editingIcon);    if (getComponentOrientation().isLeftToRight()) {      editingIcon.paintIcon(this,g,0,yLoc);    } else {      editingIcon.paintIcon(this,g,width - editingIcon.getIconWidth(),yLoc);    }  }  Color background=getBorderSelectionColor();  if (background != null) {    g.setColor(background);    g.drawRect(0,0,width - 1,height - 1);  }  super.paint(g);}  }
class C{  public LDIFImportConfig(List<String> ldifFiles){  this.ldifFiles=ldifFiles;  ldifFileIterator=ldifFiles.iterator();}  }
class C{  @Override public void memberDisappeared(Member member){  MembershipListener listener=this.listener;  if (listener != null) {    listener.memberDisappeared(member);  }}  }
class C{  static <T>ReplayPromise<T> replayPromise(final Duration timeout){  return new ReplayPromiseImpl<>(timeout,System.currentTimeMillis());}  }
class C{  @NotNull @SuppressWarnings("SuspiciousToArrayCall") public <T>T[] toArray(final T[] vec){  return elements.toArray(vec);}  }
class C{  public static boolean endsWith(final String value,final String search,final int position,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  int remainingLength=position - search.length();  if (caseSensitive) {    return value.indexOf(search,remainingLength) > -1;  }  return value.toLowerCase().indexOf(search.toLowerCase(),remainingLength) > -1;}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void checkStartWarningLabel(){  boolean visible=!getStartCheckBox().isSelected();  if (visible) {    final UserData userData=getApplication().getUserData();    visible=userData.getReplicationOptions().getType() != DataReplicationOptions.Type.STANDALONE;  }  getWarningLabel().setVisible(visible);}  }
class C{  public static void createTypedArray(String propertyName,Object bean,Method method,String[] values,Class<?> t,Class<?> propertyEditorClass) throws JasperException {  try {    if (propertyEditorClass != null) {      Object[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++) {        tmpval[i]=getValueFromBeanInfoPropertyEditor(t,propertyName,values[i],propertyEditorClass);      }      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Integer.class)) {      Integer[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Integer.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Byte.class)) {      Byte[] tmpval=new Byte[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Byte.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Boolean.class)) {      Boolean[] tmpval=new Boolean[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Boolean.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Short.class)) {      Short[] tmpval=new Short[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Short.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Long.class)) {      Long[] tmpval=new Long[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Long.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Double.class)) {      Double[] tmpval=new Double[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Double.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Float.class)) {      Float[] tmpval=new Float[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Float.valueOf(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(Character.class)) {      Character[] tmpval=new Character[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Character.valueOf(values[i].charAt(0));      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(int.class)) {      int[] tmpval=new int[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Integer.parseInt(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(byte.class)) {      byte[] tmpval=new byte[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Byte.parseByte(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(boolean.class)) {      boolean[] tmpval=new boolean[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Boolean.parseBoolean(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(short.class)) {      short[] tmpval=new short[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Short.parseShort(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(long.class)) {      long[] tmpval=new long[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Long.parseLong(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(double.class)) {      double[] tmpval=new double[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Double.parseDouble(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(float.class)) {      float[] tmpval=new float[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=Float.parseFloat(values[i]);      method.invoke(bean,new Object[]{tmpval});    } else     if (t.equals(char.class)) {      char[] tmpval=new char[values.length];      for (int i=0; i < values.length; i++)       tmpval[i]=values[i].charAt(0);      method.invoke(bean,new Object[]{tmpval});    } else {      Object[] tmpval=new Integer[values.length];      for (int i=0; i < values.length; i++) {        tmpval[i]=getValueFromPropertyEditorManager(t,propertyName,values[i]);      }      method.invoke(bean,new Object[]{tmpval});    }  } catch (  Exception ex) {    Throwable thr=ExceptionUtils.unwrapInvocationTargetException(ex);    ExceptionUtils.handleThrowable(thr);    throw new JasperException("error in invoking method",ex);  }}  }
class C{  public MemoryRuleSet(){  this("tomcat-users/");}  }
class C{  public BigInteger calculateAgreement(CipherParameters pubKey){  DHPublicKeyParameters pub=(DHPublicKeyParameters)pubKey;  if (!pub.getParameters().equals(dhParams)) {    throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters.");  }  return pub.getY().modPow(key.getX(),dhParams.getP());}  }
class C{  protected boolean isDragging(){  return isDragging;}  }
class C{  public static String replaceXMLCharacters(String xmlData){  StringBuffer sb=new StringBuffer();  StringCharacterIterator sCI=new StringCharacterIterator(xmlData);  for (char c=sCI.first(); c != CharacterIterator.DONE; c=sCI.next()) {switch (c) {case '&':      sb.append("&amp;");    break;case '<':  sb.append("&lt;");break;case '>':sb.append("&gt;");break;case '"':sb.append("&quot;");break;case '\'':sb.append("&apos;");break;default :sb.append(c);}}return sb.toString();}  }
class C{  public ServerHello(SecureRandom sr,byte[] server_version,byte[] session_id,CipherSuite cipher_suite,byte compression_method){  long gmt_unix_time=new java.util.Date().getTime() / 1000;  sr.nextBytes(random);  random[0]=(byte)((gmt_unix_time & 0xFF000000) >>> 24);  random[1]=(byte)((gmt_unix_time & 0xFF0000) >>> 16);  random[2]=(byte)((gmt_unix_time & 0xFF00) >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  this.session_id=session_id;  this.cipher_suite=cipher_suite;  this.compression_method=compression_method;  this.server_version=server_version;  length=38 + session_id.length;}  }
class C{  public Cookie(String name,String value){  validation.validate(name);  this.name=name;  this.value=value;}  }
class C{  public Object clone(){  Policy answer=null;  try {    answer=(Policy)super.clone();  } catch (  CloneNotSupportedException se) {    answer=new Policy();  }  answer.origPolicyName=origPolicyName;  answer.policyName=policyName;  answer.description=description;  answer.active=active;  answer.rules=new HashMap();  Iterator items=rules.keySet().iterator();  while (items.hasNext()) {    Object o=items.next();    Rule rule=(Rule)rules.get(o);    answer.rules.put(o,rule.clone());  }  answer.users=(Subjects)users.clone();  answer.referrals=(Referrals)referrals.clone();  answer.respProviders=(ResponseProviders)respProviders.clone();  answer.conditions=(Conditions)conditions.clone();  return (answer);}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  private void checkLoopInReferral(LDAPURL url,String referral) throws SearchAbandonException {  try {    if (url.getBaseDN().isSuperiorOrEqualTo(getNode().getDN())) {      HostPort hp=new HostPort(url.getHost(),url.getPort());      boolean checkSucceeded=hp.equals(controller.getConfigurationConnection().getConnectionWrapper().getHostPort()) && hp.equals(controller.getUserDataConnection().getConnectionWrapper().getHostPort());      if (!checkSucceeded) {        LdapException cause=newLdapException(CLIENT_SIDE_REFERRAL_LIMIT_EXCEEDED,ERR_CTRL_PANEL_REFERRAL_LOOP.get(url.getRawBaseDN()));        throw new SearchAbandonException(State.FAILED,cause,referral);      }    }  } catch (  OpenDsException ignore) {  }}  }
class C{  final boolean addResult(MembershipException membershipException){  try {    return resultQueue.offer(membershipException,10,TimeUnit.SECONDS);  } catch (  InterruptedException ie) {    return false;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinElement createActivationPinElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinElementImpl();}  }
class C{  @Override public boolean equals(Object otherInstant){  if (this == otherInstant) {    return true;  }  if (otherInstant instanceof Instant) {    Instant other=(Instant)otherInstant;    return this.seconds == other.seconds && this.nanos == other.nanos;  }  return false;}  }
class C{  private void initializeInternal(TemplateFile templateFile,String[] arguments,int lineNumber) throws InitializationException {switch (arguments.length) {case 0:    initialValue=0;  nextValue=0;resetOnNewParents=true;break;case 1:try {initialValue=Integer.parseInt(arguments[0]);} catch (NumberFormatException nfe) {LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[0],getName(),lineNumber);throw new InitializationException(message);}nextValue=initialValue;resetOnNewParents=true;break;case 2:try {initialValue=Integer.parseInt(arguments[0]);} catch (NumberFormatException nfe) {LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[0],getName(),lineNumber);throw new InitializationException(message);}if (arguments[1].equalsIgnoreCase("true")) {resetOnNewParents=true;} else if (arguments[1].equalsIgnoreCase("false")) {resetOnNewParents=false;} else {LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_BOOLEAN.get(arguments[1],getName(),lineNumber);throw new InitializationException(message);}nextValue=initialValue;break;default :LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,0,2,arguments.length);throw new InitializationException(message);}}  }
class C{  public AMClientCapException(String msg){  super(msg);  message=msg;}  }
class C{  public boolean isNamespaceAware(){  return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ClaimType createClaimType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ClaimTypeImpl();}  }
class C{  public void stopThread(){  running=false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatagetlengthanddata.class,args);}  }
class C{  private void replaceSubject(String subjectName,Subject subject,boolean exclusive) throws NameNotFoundException, PolicyException, SSOException {  if (debug.messageEnabled()) {    debug.message("Replacing realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }  if (realmSubjects == null) {    initRealmSubjects();  }  realmSubjects.replaceSubject(subjectName,subject,exclusive);  saveSubjects();  if (debug.messageEnabled()) {    debug.message("Replaced realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }}  }
class C{  public void write(RandomAccessFile file) throws IOException {  byte[] buffer;  AbstractDataType object;  Iterator<AbstractDataType> iterator=objectList.listIterator();  while (iterator.hasNext()) {    object=iterator.next();    buffer=object.writeByteArray();    file.write(buffer);  }}  }
class C{  private void handleReleaseSession(SessionID sessionID){  InternalSession internalSession=InjectorHolder.getInstance(SessionAccessManager.class).releaseSession(sessionID);  if (internalSession == null) {    debug.message("releaseSession: session not found {}",sessionID);  }}  }
class C{  public java.net.URL readURL() throws SQLException {  return (java.net.URL)getNextAttribute();}  }
class C{  private void send(final byte[] buffer) throws IOException {  final String str=String.format("%08x",buffer.length);  final byte[] sendLengthBuf=str.getBytes();  publishLock.lock();  try {    output.write(sendLengthBuf);    output.write(buffer);    output.flush();  } catch (  final IOException e) {    setSessionError(e);    throw e;  } finally {    publishLock.unlock();  }  lastPublishTime=System.currentTimeMillis();}  }
class C{  private static byte[] hmac_sha(String crypto,byte[] keyBytes,byte[] text){  try {    Mac hmac;    hmac=Mac.getInstance(crypto);    SecretKeySpec macKey=new SecretKeySpec(keyBytes,"RAW");    hmac.init(macKey);    return hmac.doFinal(text);  } catch (  GeneralSecurityException gse) {    throw new UndeclaredThrowableException(gse);  }}  }
class C{  public ExpandDestinationDistance(ExpandCostFactor[] p_trace_costs,boolean[] p_layer_active,double p_min_normal_via_cost,double p_min_cheap_via_cost){  trace_costs=p_trace_costs;  layer_active=p_layer_active;  layer_count=p_layer_active.length;  min_normal_via_cost=p_min_normal_via_cost;  min_cheap_via_cost=p_min_cheap_via_cost;  int curr_active_layer_count=0;  for (int ind=0; ind < layer_count; ++ind) {    if (layer_active[ind])     curr_active_layer_count++;  }  active_layer_count=curr_active_layer_count;  if (layer_active[0]) {    if (trace_costs[0].horizontal < trace_costs[0].vertical) {      min_component_side_trace_cost=trace_costs[0].horizontal;      max_component_side_trace_cost=trace_costs[0].vertical;    } else {      min_component_side_trace_cost=trace_costs[0].vertical;      max_component_side_trace_cost=trace_costs[0].horizontal;    }  }  if (layer_active[layer_count - 1]) {    ExpandCostFactor curr_trace_cost=trace_costs[layer_count - 1];    if (curr_trace_cost.horizontal < curr_trace_cost.vertical) {      min_solder_side_trace_cost=curr_trace_cost.horizontal;      max_solder_side_trace_cost=curr_trace_cost.vertical;    } else {      min_solder_side_trace_cost=curr_trace_cost.vertical;      max_solder_side_trace_cost=curr_trace_cost.horizontal;    }  }  max_inner_side_trace_cost=Math.min(max_component_side_trace_cost,max_solder_side_trace_cost);  for (int ind2=1; ind2 < layer_count - 1; ++ind2) {    if (!layer_active[ind2]) {      continue;    }    double curr_max_cost=Math.max(trace_costs[ind2].horizontal,trace_costs[ind2].vertical);    max_inner_side_trace_cost=Math.min(max_inner_side_trace_cost,curr_max_cost);  }  min_component_inner_trace_cost=Math.min(min_component_side_trace_cost,max_inner_side_trace_cost);  min_solder_inner_trace_cost=Math.min(min_solder_side_trace_cost,max_inner_side_trace_cost);  min_component_solder_inner_trace_cost=Math.min(min_component_inner_trace_cost,min_solder_inner_trace_cost);}  }
class C{  public static int main(String[] args,Boolean initServer,OutputStream outStream,OutputStream errStream){  out=NullOutputStream.wrapOrNullStream(outStream);  err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  int result=parseArgsAndConnect(args,initServer);  if (result < 0) {    return LDAPResultCode.SUCCESS;  } else   if (result != LDAPResultCode.SUCCESS) {    return result;  }  try {    ByteStringBuilder builder=new ByteStringBuilder();    ASN1Writer writer=ASN1.getWriter(builder);    try {      writer.writeStartSequence();      writer.writeOctetString(targetDNString);      writer.writeStartSequence();      result=processSubcommand(writer);      if (result != LDAPResultCode.SUCCESS) {        return result;      }      writer.writeEndSequence();      writer.writeEndSequence();    } catch (    Exception e) {      err.println(e);    }    ExtendedRequestProtocolOp extendedRequest=new ExtendedRequestProtocolOp(OID_PASSWORD_POLICY_STATE_EXTOP,builder.toByteString());    LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),extendedRequest);    try {      ldapWriter.writeMessage(requestMessage);    } catch (    Exception e) {      printWrappedText(err,ERR_PWPSTATE_CANNOT_SEND_REQUEST_EXTOP.get(getExceptionMessage(e)));      return CLIENT_SIDE_SERVER_DOWN;    }    try {      LDAPMessage responseMessage=ldapReader.readMessage();      if (responseMessage == null) {        printWrappedText(err,ERR_PWPSTATE_CONNECTION_CLOSED_READING_RESPONSE.get());        return CLIENT_SIDE_SERVER_DOWN;      }      ExtendedResponseProtocolOp extendedResponse=responseMessage.getExtendedResponseProtocolOp();      int resultCode=extendedResponse.getResultCode();      if (resultCode != LDAPResultCode.SUCCESS) {        printWrappedText(err,ERR_PWPSTATE_REQUEST_FAILED.get(resultCode,LDAPResultCode.toString(resultCode),extendedResponse.getErrorMessage()));        return resultCode;      }      ASN1Reader reader=ASN1.getReader(extendedResponse.getValue());      reader.readStartSequence();      reader.skipElement();      reader.readStartSequence();      while (reader.hasNextElement()) {        int opType;        ArrayList<String> opValues;        try {          reader.readStartSequence();          opType=(int)reader.readInteger();          opValues=new ArrayList<>();          if (reader.hasNextElement()) {            reader.readStartSequence();            while (reader.hasNextElement()) {              opValues.add(reader.readOctetStringAsString());            }            reader.readEndSequence();          }          reader.readEndSequence();        } catch (        Exception e) {          printWrappedText(err,ERR_PWPSTATE_CANNOT_DECODE_RESPONSE_OP.get(getExceptionMessage(e)));          continue;        }switch (opType) {case OP_GET_PASSWORD_POLICY_DN:          LocalizableMessage message=INFO_PWPSTATE_LABEL_PASSWORD_POLICY_DN.get();        printLabelAndValues(message,opValues);      break;case OP_GET_ACCOUNT_DISABLED_STATE:    message=INFO_PWPSTATE_LABEL_ACCOUNT_DISABLED_STATE.get();  printLabelAndValues(message,opValues);break;case OP_GET_ACCOUNT_EXPIRATION_TIME:message=INFO_PWPSTATE_LABEL_ACCOUNT_EXPIRATION_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_ACCOUNT_EXPIRATION.get();printLabelAndValues(message,opValues);break;case OP_GET_PASSWORD_CHANGED_TIME:message=INFO_PWPSTATE_LABEL_PASSWORD_CHANGED_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_PASSWORD_EXPIRATION_WARNED_TIME:message=INFO_PWPSTATE_LABEL_PASSWORD_EXPIRATION_WARNED_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_PASSWORD_EXPIRATION.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING.get();printLabelAndValues(message,opValues);break;case OP_GET_AUTHENTICATION_FAILURE_TIMES:message=INFO_PWPSTATE_LABEL_AUTH_FAILURE_TIMES.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_AUTHENTICATION_FAILURE_UNLOCK:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_AUTH_FAILURE_UNLOCK.get();printLabelAndValues(message,opValues);break;case OP_GET_REMAINING_AUTHENTICATION_FAILURE_COUNT:message=INFO_PWPSTATE_LABEL_REMAINING_AUTH_FAILURE_COUNT.get();printLabelAndValues(message,opValues);break;case OP_GET_LAST_LOGIN_TIME:message=INFO_PWPSTATE_LABEL_LAST_LOGIN_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_IDLE_LOCKOUT:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_IDLE_LOCKOUT.get();printLabelAndValues(message,opValues);break;case OP_GET_PASSWORD_RESET_STATE:message=INFO_PWPSTATE_LABEL_PASSWORD_RESET_STATE.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT.get();printLabelAndValues(message,opValues);break;case OP_GET_GRACE_LOGIN_USE_TIMES:message=INFO_PWPSTATE_LABEL_GRACE_LOGIN_USE_TIMES.get();printLabelAndValues(message,opValues);break;case OP_GET_REMAINING_GRACE_LOGIN_COUNT:message=INFO_PWPSTATE_LABEL_REMAINING_GRACE_LOGIN_COUNT.get();printLabelAndValues(message,opValues);break;case OP_GET_PASSWORD_CHANGED_BY_REQUIRED_TIME:message=INFO_PWPSTATE_LABEL_PASSWORD_CHANGED_BY_REQUIRED_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME:message=INFO_PWPSTATE_LABEL_SECONDS_UNTIL_REQUIRED_CHANGE_TIME.get();printLabelAndValues(message,opValues);break;case OP_GET_PASSWORD_HISTORY:message=INFO_PWPSTATE_LABEL_PASSWORD_HISTORY.get();printLabelAndValues(message,opValues);break;default :message=ERR_PWPSTATE_INVALID_RESPONSE_OP_TYPE.get(opType);printWrappedText(err,message);break;}}reader.readEndSequence();reader.readEndSequence();} catch (Exception e) {printWrappedText(err,ERR_PWPSTATE_CANNOT_DECODE_RESPONSE_MESSAGE.get(getExceptionMessage(e)));return CLIENT_SIDE_SERVER_DOWN;}return 0;}  finally {if (connection != null) {connection.close(nextMessageID);}}}  }
class C{  protected static boolean isWhiteSpaceExceptSpace(char ch){  if (ch >= 0x20)   return false;  return ch == 0x9 || ch == 0xA || ch == 0xD;}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  protected void validateSecurityRoles(){  SecurityConstraint constraints[]=context.findConstraints();  for (int i=0; i < constraints.length; i++) {    String roles[]=constraints[i].findAuthRoles();    for (int j=0; j < roles.length; j++) {      if (!"*".equals(roles[j]) && !context.findSecurityRole(roles[j])) {        log.warn(sm.getString("contextConfig.role.auth",roles[j]));        context.addSecurityRole(roles[j]);      }    }  }  Container wrappers[]=context.findChildren();  for (int i=0; i < wrappers.length; i++) {    Wrapper wrapper=(Wrapper)wrappers[i];    String runAs=wrapper.getRunAs();    if ((runAs != null) && !context.findSecurityRole(runAs)) {      log.warn(sm.getString("contextConfig.role.runas",runAs));      context.addSecurityRole(runAs);    }    String names[]=wrapper.findSecurityReferences();    for (int j=0; j < names.length; j++) {      String link=wrapper.findSecurityReference(names[j]);      if ((link != null) && !context.findSecurityRole(link)) {        log.warn(sm.getString("contextConfig.role.link",link));        context.addSecurityRole(link);      }    }  }}  }
class C{  public ClearTextTransform(){}  }
class C{  public static boolean isApplicable(Aci aci,AciTargetMatchContext matchCtx){  if (matchCtx.hasRights(ACI_EXT_OP)) {    return AciTargets.isTargetApplicable(aci,matchCtx) && AciTargets.isExtOpApplicable(aci,matchCtx);  } else   if (matchCtx.hasRights(ACI_CONTROL)) {    return AciTargets.isTargetApplicable(aci,matchCtx) && AciTargets.isTargetControlApplicable(aci,matchCtx);  } else {    return hasNoExtOpOrTargetControl(aci.getTargets()) && haveSimilarRights(aci,matchCtx) && AciTargets.isTargetApplicable(aci,matchCtx)&& AciTargets.isTargetFilterApplicable(aci,matchCtx)&& AciTargets.isTargAttrFiltersApplicable(aci,matchCtx)&& AciTargets.isTargetAttrApplicable(aci,matchCtx);  }}  }
class C{  public Plugin[] loadPlugins(File directory){  Validate.notNull(directory,"Directory cannot be null");  Validate.isTrue(directory.isDirectory(),"Directory must be a directory");  List<Plugin> result=new ArrayList<Plugin>();  Set<Pattern> filters=fileAssociations.keySet();  if (!(server.getUpdateFolder().equals(""))) {    updateDirectory=new File(directory,server.getUpdateFolder());  }  Map<String,File> plugins=new HashMap<String,File>();  Set<String> loadedPlugins=new HashSet<String>();  Map<String,Collection<String>> dependencies=new HashMap<String,Collection<String>>();  Map<String,Collection<String>> softDependencies=new HashMap<String,Collection<String>>();  for (  File file : directory.listFiles()) {    PluginLoader loader=null;    for (    Pattern filter : filters) {      Matcher match=filter.matcher(file.getName());      if (match.find()) {        loader=fileAssociations.get(filter);      }    }    if (loader == null)     continue;    PluginDescriptionFile description=null;    try {      description=loader.getPluginDescription(file);      String name=description.getName();      if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {        server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "': Restricted Name");        continue;      } else       if (description.rawName.indexOf(' ') != -1) {        server.getLogger().warning(String.format("Plugin `%s' uses the space-character (0x20) in its name `%s' - this is discouraged",description.getFullName(),description.rawName));      }    } catch (    InvalidDescriptionException ex) {      server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);      continue;    }    File replacedFile=plugins.put(description.getName(),file);    if (replacedFile != null) {      server.getLogger().severe(String.format("Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",description.getName(),file.getPath(),replacedFile.getPath(),directory.getPath()));    }    Collection<String> softDependencySet=description.getSoftDepend();    if (softDependencySet != null && !softDependencySet.isEmpty()) {      if (softDependencies.containsKey(description.getName())) {        softDependencies.get(description.getName()).addAll(softDependencySet);      } else {        softDependencies.put(description.getName(),new LinkedList<String>(softDependencySet));      }    }    Collection<String> dependencySet=description.getDepend();    if (dependencySet != null && !dependencySet.isEmpty()) {      dependencies.put(description.getName(),new LinkedList<String>(dependencySet));    }    Collection<String> loadBeforeSet=description.getLoadBefore();    if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {      for (      String loadBeforeTarget : loadBeforeSet) {        if (softDependencies.containsKey(loadBeforeTarget)) {          softDependencies.get(loadBeforeTarget).add(description.getName());        } else {          Collection<String> shortSoftDependency=new LinkedList<String>();          shortSoftDependency.add(description.getName());          softDependencies.put(loadBeforeTarget,shortSoftDependency);        }      }    }  }  while (!plugins.isEmpty()) {    boolean missingDependency=true;    Iterator<String> pluginIterator=plugins.keySet().iterator();    while (pluginIterator.hasNext()) {      String plugin=pluginIterator.next();      if (dependencies.containsKey(plugin)) {        Iterator<String> dependencyIterator=dependencies.get(plugin).iterator();        while (dependencyIterator.hasNext()) {          String dependency=dependencyIterator.next();          if (loadedPlugins.contains(dependency)) {            dependencyIterator.remove();          } else           if (!plugins.containsKey(dependency)) {            missingDependency=false;            File file=plugins.get(plugin);            pluginIterator.remove();            softDependencies.remove(plugin);            dependencies.remove(plugin);            server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",new UnknownDependencyException(dependency));            break;          }        }        if (dependencies.containsKey(plugin) && dependencies.get(plugin).isEmpty()) {          dependencies.remove(plugin);        }      }      if (softDependencies.containsKey(plugin)) {        Iterator<String> softDependencyIterator=softDependencies.get(plugin).iterator();        while (softDependencyIterator.hasNext()) {          String softDependency=softDependencyIterator.next();          if (!plugins.containsKey(softDependency)) {            softDependencyIterator.remove();          }        }        if (softDependencies.get(plugin).isEmpty()) {          softDependencies.remove(plugin);        }      }      if (!(dependencies.containsKey(plugin) || softDependencies.containsKey(plugin)) && plugins.containsKey(plugin)) {        File file=plugins.get(plugin);        pluginIterator.remove();        missingDependency=false;        try {          result.add(loadPlugin(file));          loadedPlugins.add(plugin);          continue;        } catch (        InvalidPluginException ex) {          server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);        }      }    }    if (missingDependency) {      pluginIterator=plugins.keySet().iterator();      while (pluginIterator.hasNext()) {        String plugin=pluginIterator.next();        if (!dependencies.containsKey(plugin)) {          softDependencies.remove(plugin);          missingDependency=false;          File file=plugins.get(plugin);          pluginIterator.remove();          try {            result.add(loadPlugin(file));            loadedPlugins.add(plugin);            break;          } catch (          InvalidPluginException ex) {            server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);          }        }      }      if (missingDependency) {        softDependencies.clear();        dependencies.clear();        Iterator<File> failedPluginIterator=plugins.values().iterator();        while (failedPluginIterator.hasNext()) {          File file=failedPluginIterator.next();          failedPluginIterator.remove();          server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "': circular dependency detected");        }      }    }  }  return result.toArray(new Plugin[result.size()]);}  }
class C{  @CpsVmThreadOnly private void propagateErrorToWorkflow(Throwable t){  Map.Entry<Integer,CpsThread> lastEntry=threads.lastEntry();  if (lastEntry != null) {    lastEntry.getValue().resume(new Outcome(null,t));  } else {    LOGGER.log(Level.WARNING,"encountered error but could not pass it to the flow",t);  }}  }
class C{  private static ResultCode registerErrorResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){  final ResultCode t=new ResultCode(intValue,name,true,resultCodeEnum);  ELEMENTS.put(intValue,t);  return t;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("[\n");  sb.append(super.toString());  sb.append("  Maximum Path Length: " + maxPathLength + "\n");  sb.append("]\n");  return sb.toString();}  }
class C{  public IPv4Condition(){  this(PrivilegeManager.debug);}  }
class C{  public void trimToSize(){  balance();  redimNodeArrays(freenode);  CharVector kx=new CharVector();  kx.alloc(1);  TernaryTree map=new TernaryTree();  compact(kx,map,root);  kv=kx;  kv.trimToSize();}  }
class C{  public UnableToRedirectException(){}  }
class C{  public DSAMEHrefTag(){  super();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl();}  }
class C{  public final void testGetMidTermsOfReductionPolynomial03(){  int[] a=new int[]{367};  int[] b=new ECFieldF2m(1999,a).getMidTermsOfReductionPolynomial();  assertTrue(Arrays.equals(a,b));}  }
class C{  public ReplicationRepairRequestControl(){  super(OID_REPLICATION_REPAIR_CONTROL,false);}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  public boolean equals(Object schemaAttrType){  if (schemaAttrType instanceof UIType) {    UIType s=(UIType)schemaAttrType;    return (s.attrType.equals(attrType));  }  return (false);}  }
class C{  public void clearAccountExpirationTime(){  operations.add(PasswordPolicyStateOperationType.CLEAR_ACCOUNT_EXPIRATION_TIME);}  }
class C{  private JPanel createBackendsPanel(){  JPanel p=new JPanel(new GridBagLayout());  p.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=new Insets(0,0,0,0);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  JLabel l=Utilities.createTitleLabel(INFO_CTRL_PANEL_DATA_SOURCES.get());  p.add(l,gbc);  dbTableModelWithReplication=new BaseDNTableModel(true);  dbTableModelWithoutReplication=new BaseDNTableModel(false);  BaseDNCellRenderer renderer=new BaseDNCellRenderer();  noReplicatedBaseDNsTable=Utilities.createSortableTable(dbTableModelWithoutReplication,renderer);  noReplicatedBaseDNsTable.setVisible(false);  noReplicatedBaseDNsTable.getTableHeader().setVisible(false);  replicationBaseDNsTable=Utilities.createSortableTable(dbTableModelWithReplication,renderer);  noReplicatedBaseDNsTable.setCellSelectionEnabled(false);  replicationBaseDNsTable.setCellSelectionEnabled(false);  Utilities.addClickTooltipListener(noReplicatedBaseDNsTable);  Utilities.addClickTooltipListener(replicationBaseDNsTable);  l.setLabelFor(replicationBaseDNsTable);  noReplicatedBaseDNsTable.getAccessibleContext().setAccessibleName(l.getText());  replicationBaseDNsTable.getAccessibleContext().setAccessibleName(l.getText());  gbc.insets.top=5;  p.add(noReplicatedBaseDNsTable.getTableHeader(),gbc);  gbc.insets.top=0;  p.add(noReplicatedBaseDNsTable,gbc);  gbc.insets.top=5;  p.add(replicationBaseDNsTable.getTableHeader(),gbc);  gbc.insets.top=0;  p.add(replicationBaseDNsTable,gbc);  replicationBaseDNsTable.setVisible(true);  replicationBaseDNsTable.getTableHeader().setVisible(true);  gbc.insets.top=5;  dbTableEmpty=Utilities.makeHtmlPane(INFO_CTRL_PANEL_NO_DATA_SOURCES_FOUND.get().toString(),ColorAndFontConstants.primaryFont);  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.CENTER;  p.add(dbTableEmpty,gbc);  dbTableEmpty.setVisible(false);  return p;}  }
class C{  public void parseMethod(SMethodDef methodDef,List<Statement> statements,SemanticScope superScope) throws SyntaxException {  if (!methodDef.statements().isEmpty())   return;  if (methodDef.modifiers().contains(SModifier.ABSTRACT)) {    if (!statements.isEmpty()) {      err.SyntaxException("abstract method cannot contain statements",statements.get(0).line_col());      return;    }    return;  }  if (!methodDef.getReturnType().equals(VoidType.get())) {    transformLastExpToReturn(statements);  }  SemanticScope scope=new SemanticScope(superScope);  if (!methodDef.modifiers().contains(SModifier.STATIC)) {    scope.setThis(new Ins.This(scope.type()));  }  if (defaultParamInvokable.containsKey(methodDef)) {    fillDefaultParamMethod(methodDef,scope);  } else {    for (    SParameter p : methodDef.getParameters()) {      if (p.canChange() && !isPointerType(p.type()) && CompileUtil.isValidName(p.name())) {        scope.putLeftValue(scope.generateTempName(),p);      } else {        scope.putLeftValue(p.name(),p);      }    }    paramValueAvaliable(methodDef.getParameters(),methodDef.statements(),scope,methodDef.line_col());    for (    SParameter p : methodDef.getParameters()) {      if (p.canChange() && !isPointerType(p.type()) && CompileUtil.isValidName(p.name())) {        PointerType t=new PointerType(p.type());        if (types.containsKey(t.toString())) {          t=(PointerType)types.get(t.toString());        } else {          types.put(t.toString(),t);        }        LocalVariable local=new LocalVariable(t,p.canChange());        scope.putLeftValue(p.name(),local);        Ins.TStore tStore=new Ins.TStore(local,invokePointerSet(constructPointer(p.isNotNull(),p.isNotEmpty()),new Ins.TLoad(p,scope,LineCol.SYNTHETIC),LineCol.SYNTHETIC),scope,LineCol.SYNTHETIC,err);        methodDef.statements().add(tStore);      }    }    if (statements.isEmpty()) {      methodDef.statements().add(new Ins.Nop());    } else {      for (      Statement stmt : statements) {        parseStatement(stmt,methodDef.getReturnType(),scope,methodDef.statements(),methodDef.exceptionTables(),null,null,false);      }    }  }}  }
class C{  public TextLayout nextLayout(float wrappingWidth){  return nextLayout(wrappingWidth,limit,false);}  }
class C{  public String resolve(OAuth2Request request) throws NotFoundException, InvalidClientException, InvalidRequestException {  String redirectUri=null;  ClientRegistration clientRegistration=clientRegistrationStore.get(request.<String>getParameter(CLIENT_ID),request);  if (clientRegistration != null) {    Set<URI> redirectUris=clientRegistration.getRedirectUris();    if (isEmpty(redirectUris)) {      throw new InvalidRequestException("Failed to resolve the redirect URI, no URI's registered");    }    redirectUri=request.getParameter(REDIRECT_URI);    if (isEmpty(redirectUri) && redirectUris.size() == 1) {      redirectUri=redirectUris.iterator().next().toString();    }  }  if (isEmpty(redirectUri)) {    throw new InvalidRequestException("Failed to resolve the redirect URI");  }  return redirectUri;}  }
class C{  public boolean isServerTransaction(){  return m_isServerTransaction;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ObjectElement createObjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ObjectElementImpl();}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final File file){  return createFile(folder,file,file.getName());}  }
class C{  public void authenticateRequester(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {  AttributeQueryUtil.validateEntityRequester(attrQuery,attrAuthorityEntityID,realm);}  }
class C{  public boolean isOnLine1(){  return onLine1;}  }
class C{  protected Object createCtsConnectionFailureRateMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  ctsConnectionFailureRate=new CtsConnectionFailureRateImpl(this);  return ctsConnectionFailureRate;}  }
class C{  @DataProvider(name="createAckData") public Object[][] createAckData(){  CSN csn1=new CSN(1,0,1);  CSN csn2=new CSN(TimeThread.getTime(),123,45);  CSN csn3=new CSN(TimeThread.getTime(),1234567,45678);  List<Integer> fservers1=newArrayList(12345,-12345,31657,-28456,0);  List<Integer> fservers2=newArrayList();  List<Integer> fservers3=newArrayList(0);  List<Integer> fservers4=newArrayList(100,2000,30000,-100,-2000,-30000);  return new Object[][]{{csn1,true,false,false,fservers1},{csn2,false,true,false,fservers2},{csn1,false,false,true,fservers3},{csn2,false,false,false,fservers4},{csn1,true,true,false,fservers1},{csn2,false,true,true,fservers2},{csn1,true,false,true,fservers3},{csn2,true,true,true,fservers4},{csn3,true,true,true,fservers4}};}  }
class C{  private boolean remove(Object o,Object[] snapshot,int index){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] current=getArray();    int len=current.length;    if (snapshot != current)     findIndex: {      int prefix=Math.min(index,len);      for (int i=0; i < prefix; i++) {        if (current[i] != snapshot[i] && eq(o,current[i])) {          index=i;          break findIndex;        }      }      if (index >= len)       return false;      if (current[index] == o)       break findIndex;      index=indexOf(o,current,index,len);      if (index < 0)       return false;    }    Object[] newElements=new Object[len - 1];    System.arraycopy(current,0,newElements,0,index);    System.arraycopy(current,index + 1,newElements,index,len - index - 1);    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public InvalidFormatException(String rbName,String errCode,Object[] args,String name,int type){  super(rbName,errCode,args,null);  fillInStackTrace();  this.name=name;  this.type=type;}  }
class C{  public SOAPMessage onMessage(SOAPMessage soapMsg,HttpServletRequest request,HttpServletResponse response,String realm,String pdpEntityID) throws SOAPException {  String classMethod="QueryHandlerServlet:onMessage:";  SOAPMessage soapMessage=null;  String pepEntityID=null;  try {    Element soapBody=SOAPCommunicator.getInstance().getSOAPBody(soapMsg);    if (debug.messageEnabled()) {      debug.message(classMethod + "SOAPMessage recd. :" + XMLUtils.print(soapBody));    }    Element reqAbs=SOAPCommunicator.getInstance().getSamlpElement(soapMsg,REQUEST_ABSTRACT);    Response samlResponse=processSAMLRequest(realm,pdpEntityID,reqAbs,request,soapMsg);    soapMessage=SOAPCommunicator.getInstance().createSOAPMessage(samlResponse.toXMLString(true,true),false);  } catch (  SAML2Exception se) {    debug.error(classMethod + "XACML Response Error SOAP Fault",se);    soapMessage=SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"invalidQuery",se.getMessage());  }  return soapMessage;}  }
class C{  void handleError(VolleyError error){  String errorMessage=null;  try {    errorMessage=new String(error.networkResponse.data,"UTF-8");    JSONObject jsonObject=new JSONObject(errorMessage);    JSONArray errorArray=new JSONArray(jsonObject.get("errors").toString());    JSONObject firstError=new JSONObject(errorArray.get(0).toString());    Log.d("Error",firstError.get("message").toString());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.VATType createVATType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.VATTypeImpl();}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  private Builder(net.aimeizi.person.QueryParameter.Builder other){  super(other);  if (isValidValue(fields()[0],other.ageStart)) {    this.ageStart=data().deepCopy(fields()[0].schema(),other.ageStart);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.ageEnd)) {    this.ageEnd=data().deepCopy(fields()[1].schema(),other.ageEnd);    fieldSetFlags()[1]=true;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String attrValue;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attrValue=element.getAttributeNS(nullNS,"defaultAttr");  assertEquals("elementgetattributens02","defaultVal",attrValue);}  }
class C{  public BlockVector toBlockVector(){  return new BlockVector(x,y,z);}  }
class C{  public boolean isAgain(){  return type == Type.AGAIN;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetnodevalue.class,args);}  }
class C{  public void addTableModelListener(TableModelListener l){  listenerList.add(TableModelListener.class,l);}  }
class C{  private Promise<Request,ResourceException> evaluateOnRequest(final Context context,final Request request){  if (onRequest != null) {    ScriptEntry scriptEntry=onRequest.getRight();    if (!scriptEntry.isActive()) {      return new ServiceUnavailableException("Failed to execute inactive script: " + onRequest.getRight().getName()).asPromise();    }    Script script=populateScript(scriptEntry,context,request);    try {      evalScript(script,onRequest.getLeft(),onRequest.getRight().getName());    } catch (    ResourceException e) {      return e.asPromise();    }  }  return newResultPromise(request);}  }
class C{  public static void writeHeader(PrintWriter writer,Object[] args,int mode){  if (mode == 0) {    writer.print(Constants.HTML_HEADER_SECTION);  } else   if (mode == 1) {    writer.write(Constants.XML_DECLARATION);    writer.print(MessageFormat.format(Constants.XML_STYLE,args));    writer.write("<status>");  }}  }
class C{  public Object clone(){  DefaultMutableTreeNode newNode;  try {    newNode=(DefaultMutableTreeNode)super.clone();    newNode.children=null;    newNode.parent=null;  } catch (  CloneNotSupportedException e) {    throw new Error(e.toString());  }  return newNode;}  }
class C{  public void testEqualsUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertFalse(aNumber.equals(bNumber));}  }
class C{  private void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String classMethod="QueryHandlerServlet:processRequest";  try {    SAMLUtils.checkHTTPContentLength(request);    String requestURI=request.getRequestURI();    String queryMetaAlias=SAML2MetaUtils.getMetaAliasByUri(requestURI);    if (debug.messageEnabled()) {      debug.message(classMethod + "queryMetaAlias is :" + queryMetaAlias);    }    String pdpEntityID=SAML2Utils.getSAML2MetaManager().getEntityByMetaAlias(queryMetaAlias);    String realm=SAML2MetaUtils.getRealmByMetaAlias(queryMetaAlias);    if (debug.messageEnabled()) {      debug.message(classMethod + "uri : " + requestURI+ ",queryMetaAlias="+ queryMetaAlias+ ", pdpEntityID="+ pdpEntityID);    }    SOAPMessage soapMsg=SOAPCommunicator.getInstance().getSOAPMessage(request);    Element soapBody=SOAPCommunicator.getInstance().getSOAPBody(soapMsg);    if (debug.messageEnabled()) {      debug.message(classMethod + "SOAPMessage received.:" + XMLUtils.print(soapBody));    }    SOAPMessage reply=null;    reply=onMessage(soapMsg,request,response,realm,pdpEntityID);    if (reply != null) {      if (reply.saveRequired()) {        reply.saveChanges();      }      response.setStatus(HttpServletResponse.SC_OK);      SAML2Utils.putHeaders(reply.getMimeHeaders(),response);    } else {      debug.error(classMethod + "SOAPMessage is null");      response.setStatus(HttpServletResponse.SC_NO_CONTENT);      reply=SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"invalidQuery",null);    }    OutputStream os=response.getOutputStream();    reply.writeTo(os);    os.flush();  } catch (  SAML2Exception ex) {    debug.error(classMethod,ex);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedToProcessRequest",ex.getMessage());    return;  }catch (  SOAPException soap) {    debug.error(classMethod,soap);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedToProcessRequest",soap.getMessage());    return;  }}  }
class C{  private void copyThumb(final FilePostParam file) throws IOException {  File sourceThumbFile=new File(configuration.getThumbsPath() + File.separator + file.getType()+ file.getFolder(),file.getName());  File destThumbFile=new File(configuration.getThumbsPath() + File.separator + type+ this.currentFolder,file.getName());  if (sourceThumbFile.isFile() && sourceThumbFile.exists()) {    FileUtils.copyFromSourceToDestFile(sourceThumbFile,destThumbFile,false,configuration);  }}  }
class C{  private void generateTagHandlerAttributes(TagInfo tagInfo){  if (tagInfo.hasDynamicAttributes()) {    out.printil("private java.util.HashMap _jspx_dynamic_attrs = new java.util.HashMap();");  }  TagAttributeInfo[] attrInfos=tagInfo.getAttributes();  for (int i=0; i < attrInfos.length; i++) {    out.printin("private ");    if (attrInfos[i].isFragment()) {      out.print("javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(JspUtil.makeJavaIdentifierForAttribute(attrInfos[i].getName()));    out.println(";");  }  out.println();  for (int i=0; i < attrInfos.length; i++) {    String javaName=JspUtil.makeJavaIdentifierForAttribute(attrInfos[i].getName());    out.printin("public ");    if (attrInfos[i].isFragment()) {      out.print("javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(toGetterMethod(attrInfos[i].getName()));    out.println(" {");    out.pushIndent();    out.printin("return this.");    out.print(javaName);    out.println(";");    out.popIndent();    out.printil("}");    out.println();    out.printin("public void ");    out.print(toSetterMethodName(attrInfos[i].getName()));    if (attrInfos[i].isFragment()) {      out.print("(javax.servlet.jsp.tagext.JspFragment ");    } else {      out.print("(");      out.print(JspUtil.toJavaSourceType(attrInfos[i].getTypeName()));      out.print(" ");    }    out.print(javaName);    out.println(") {");    out.pushIndent();    out.printin("this.");    out.print(javaName);    out.print(" = ");    out.print(javaName);    out.println(";");    if (ctxt.isTagFile()) {      out.printin("jspContext.setAttribute(\"");      out.print(attrInfos[i].getName());      out.print("\", ");      out.print(javaName);      out.println(");");    }    out.popIndent();    out.printil("}");    out.println();  }}  }
class C{  public boolean isNamespaceDeclUris(){  return namespaceDeclUris;}  }
class C{  public boolean isDisableReplicationSubcommand(){  return isSubcommand(DISABLE_REPLICATION_SUBCMD_NAME);}  }
class C{  @Deprecated public void write(int b){  if (b == '\n') {synchronized (this) {synchronized (logOut) {        buffer.setLength(0);        ;        buffer.append((new Date()).toString());        buffer.append(':');        buffer.append(name);        buffer.append(':');        buffer.append(Thread.currentThread().getName());        buffer.append(':');        try {          logWriter.write(buffer.toString());          logWriter.flush();          bufOut.writeTo(logOut);          logOut.write(b);          logOut.flush();        } catch (        IOException e) {          setError();        } finally {          bufOut.reset();        }      }    }  } else   super.write(b);}  }
class C{  public void reset(){  contexts=new Context[32];  namespaceDeclUris=false;  contextPos=0;  contexts[contextPos]=currentContext=new Context();  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public void _write(OutputStream output){  output.write_octet(value);}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  public void undoableEditHappened(UndoableEditEvent e){  addEdit(e.getEdit());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedEndorsingSupportingTokensElement createSignedEndorsingSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedEndorsingSupportingTokensElementImpl();}  }
class C{  public boolean canAcceptVariables(){  return false;}  }
class C{  public static void error(Level level,String msgid,String data[],SSOToken session,String nameId){  if (logActive) {    try {      if (isErrorLoggable(level)) {        SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());        LogMessageProvider msgProvider=MessageProviderFactory.getProvider(LOG_MSG_XML);        LogRecord logRec=msgProvider.createLogRecord(msgid,data,session);        logRec.addLogInfo(TokenLogUtils.TOKEN_NAME_ID,nameId);        if (logRec != null) {          errorLogger.log(logRec,adminToken);        }      }    } catch (    IOException le) {      CoreTokenUtils.debug.error("TokenLogUtils.error:Couldn't write error log:",le);    }  }}  }
class C{  public Builder(AbstractManagedObjectDefinition<?,?> pd,String name,String pluralName,AbstractManagedObjectDefinition<C,S> cd){  super(pd,name,cd);  this.pluralName=pluralName;}  }
class C{  public boolean isTimedOut() throws SessionException {  if (timedOutAt > 0) {    return true;  }  if (!usingCachedBasedPolling() && maxCachingTimeReached()) {    try {      refresh(false);    } catch (    SessionTimedOutException e) {      latestRefreshTime=currentTimeMillis() / 1000;      timedOutAt=latestRefreshTime;    }  }  return timedOutAt > 0;}  }
class C{  final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public boolean isBefore(YearMonth other){  return compareTo(other) < 0;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public UnsavedChangesDialog.Result checkUnsavedChanges(){  UnsavedChangesDialog.Result result;  final UnsavedChangesDialog unsavedChangesDlg=new UnsavedChangesDialog(getParentDialog(this),getInfo());  unsavedChangesDlg.setMessage(INFO_CTRL_PANEL_UNSAVED_CHANGES_SUMMARY.get(),INFO_CTRL_PANEL_UNSAVED_INDEX_CHANGES_DETAILS.get(index.getName()));  centerGoldenMean(unsavedChangesDlg,getParentDialog(this));  unsavedChangesDlg.setVisible(true);  result=unsavedChangesDlg.getResult();  if (result == UnsavedChangesDialog.Result.SAVE) {    saveIndex(false);    if (newModifyTask == null || newModifyTask.getState() != Task.State.FINISHED_SUCCESSFULLY) {      result=UnsavedChangesDialog.Result.CANCEL;    }  }  return result;}  }
class C{  public Builder removeProhibitedAttribute(String attributeNameOrOID){  this.prohibitedAttributeOIDs.remove(attributeNameOrOID);  return this;}  }
class C{  public RenderableImageOp(ContextualRenderedImageFactory CRIF,ParameterBlock paramBlock){  this.myCRIF=CRIF;  this.paramBlock=(ParameterBlock)paramBlock.clone();}  }
class C{  public void rotate_90_deg(int p_factor,PlaPointInt p_pole){  if (p_factor == 0)   return;  rotation_in_degree=normalize_rotation(rotation_in_degree + p_factor * 90);  if (location != null) {    location=location.rotate_90_deg(p_factor,p_pole);  }}  }
class C{  @Override public List<Foo> findByUuid_C(String uuid,long companyId){  return findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public void finalizeAuthenticationPolicies(){  DirectoryServer.getSubentryManager().deregisterChangeListener(this);  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.removePasswordPolicyAddListener(this);  rootConfiguration.removePasswordPolicyDeleteListener(this);}  }
class C{  public Object object(){  if (m_DTMXRTreeFrag.getXPathContext() != null)   return new org.apache.xml.dtm.ref.DTMNodeIterator((DTMIterator)(new org.apache.xpath.NodeSetDTM(m_dtmRoot,m_DTMXRTreeFrag.getXPathContext().getDTMManager()))); else   return super.object();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedNode;  doc=(Document)load("staff",true);  newChild=doc.createElement("newChild");  oldChild=doc.createElement("oldChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      replacedNode=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static ExtOp decode(EnumTargetOperator operator,String expr) throws AciException {  Set<String> extOpOIDs=Aci.decodeOID(expr,WARN_ACI_SYNTAX_INVALID_TARGEXTOP_EXPRESSION.get(expr));  return new ExtOp(operator,extOpOIDs);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode19.class,args);}  }
class C{  public final void encodeAttribute(final ByteStringBuilder builder,final Attribute attribute) throws DirectoryException {  int id=getAttributeId(attribute.getAttributeDescription());  final byte[] idBytes=encodeId(id);  builder.appendBERLength(idBytes.length);  builder.appendBytes(idBytes);  builder.appendBERLength(attribute.size());  for (  final ByteString v : attribute) {    builder.appendBERLength(v.length());    builder.appendBytes(v);  }}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public LogRotationPolicyConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){  return fooPersistence.countWithDynamicQuery(dynamicQuery,projection);}  }
class C{  public IMP_LIMIT(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens04.class,args);}  }
class C{  private void toString(StringBuilder buffer){  for (  String line : encode()) {    buffer.append(line);    buffer.append(EOL);  }}  }
class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider(),mProv);    checkResult(cerPB);  }}  }
class C{  public void removeButtonActionListener(ButtonActionListener l){  buttonListeners.remove(l);}  }
class C{  private void parseGetSessionAttributes(Element elem){  if (elem == null) {    return;  }  String temp=elem.getAttribute("reset");  if (temp != null) {    if (temp.equals("true")) {      sessionRequest.setResetFlag(true);    } else {      sessionRequest.setResetFlag(false);    }  }}  }
class C{  public void forwardTo(RequestContext requestContext){  exDebug.message("In forwardTo()");  if (requestContext != null) {    request=requestContext.getRequest();    response=requestContext.getResponse();  }  response.setHeader("Pragma","no-cache");  response.setHeader("Expires","0");  if (ad == null) {    super.forwardTo(requestContext);    return;  }  try {    ac=AuthUtils.getAuthContext(request,response,AuthUtils.getSessionIDFromRequest(request),false,false);  } catch (  Exception e) {    if (e instanceof L10NMessage) {      java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac));      ResultVal=((L10NMessage)e).getL10NMessage(locale);    } else {      ResultVal=e.getMessage();    }  }  if ((ac == null) || AuthUtils.sessionTimedOut(ac)) {    try {      if (exDebug.messageEnabled()) {        exDebug.message("Goto Login URL : " + LOGINURL);      }      response.sendRedirect(LOGINURL);    } catch (    Exception e) {    }  } else {    super.forwardTo(requestContext);  }}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  public synchronized void moveLast(final Entry element){  if (element.getValid() && element.getNext() != null) {    Entry next=element.getNext();    Entry prev=element.getPrevious();    next.setPrevious(prev);    if (prev != null) {      prev.setNext(next);    } else {      first=next;    }    last.setNext(element);    element.setPrevious(last);    element.setNext(null);    last=element;  }}  }
class C{  public FrameBodyTOAL(){}  }
class C{  public FrameBodyWOAS(){}  }
class C{  private static void log(final String message){  System.out.println(message);}  }
class C{  public Name addAll(List<Rdn> suffixRdns){  return addAll(size(),suffixRdns);}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  void saveDevicePrint(Map<String,Object> devicePrint){  saveDevicePrint(null,devicePrint);}  }
class C{  public CharConversionException(){}  }
class C{  public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  Node node;  while (null != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  public void expireAllLocalSessions(){  long timeNow=System.currentTimeMillis();  Session sessions[]=findSessions();  int expireDirect=0;  int expireIndirect=0;  if (log.isDebugEnabled()) {    log.debug("Start expire all sessions " + getName() + " at "+ timeNow+ " sessioncount "+ sessions.length);  }  for (int i=0; i < sessions.length; i++) {    if (sessions[i] instanceof DeltaSession) {      DeltaSession session=(DeltaSession)sessions[i];      if (session.isPrimarySession()) {        if (session.isValid()) {          session.expire();          expireDirect++;        } else {          expireIndirect++;        }      }    }  }  long timeEnd=System.currentTimeMillis();  if (log.isDebugEnabled()) {    log.debug("End expire sessions " + getName() + " expire processingTime "+ (timeEnd - timeNow)+ " expired direct sessions: "+ expireDirect+ " expired direct sessions: "+ expireIndirect);  }}  }
class C{  public GetSessionInfoActionHandler(SessionResourceUtil sessionResourceUtil){  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  fastTime=s.readLong();}  }
class C{  @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  public AttributeValueTag(){  attributeType=null;  numCharacters=0;}  }
class C{  private Response validateStatements(Assertion assertion,List respondWith,List contents,int index,String respID,String inResponseTo,String recipient){  String message=null;  Set statements=assertion.getStatement();  int length=statements.size();  Response retResponse=null;  Status status=null;  if ((statements.isEmpty()) || (length == 0)) {    SAMLUtils.debug.error("SOAPReceiver: Assertion found does not have" + " any statements in it");    message=SAMLUtils.bundle.getString("missingStatement");    try {      status=new Status(new StatusCode("samlp:Responder"),message,null);      retResponse=new Response(respID,inResponseTo,status,recipient,contents);    } catch (    SAMLException se) {      SAMLUtils.debug.error("SOAPReceiver:Fatal error, cannot " + "create status or response",se);      String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};      LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);    }    return retResponse;  } else {    boolean mismatchError=false;    if (respondWith.size() == 0) {      contents.add(index,assertion);    } else {      mismatchError=!checkAgainstRespondWith(respondWith,statements);      if (!mismatchError) {        contents.add(index,assertion);      }    }    if (mismatchError) {      SAMLUtils.debug.error("SOAPReceiver: Assertion does not " + " meet respondWith criteria in the received Request");      message=SAMLUtils.bundle.getString("mismatchRespondWith");      try {        status=new Status(new StatusCode("samlp:Success"),message,null);        return new Response(respID,inResponseTo,status,recipient,contents);      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + " cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }    }  }  return null;}  }
class C{  protected void writeHeader(){  writeByte('%').writeString(document.getPdfVersion().toString()).writeString("\n%\u00e2\u00e3\u00cf\u00d3\n");}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public static String removeKeyFromRequest(CreateRequest request){  return (String)(request.getContent().isNull() ? null : request.getContent().expect(Map.class).asMap().remove("_key"));}  }
class C{  private void reloadObjectClassesMap(Mappings mappings,Mappings newMappings){  for (  Entry<Map<ObjectClass,String>,Integer> entry : mappings.ocEncodeMap.entrySet()) {    Map<ObjectClass,String> ocMap=entry.getKey();    Integer id=entry.getValue();    loadObjectClassesToMaps(id,ocMap.values(),newMappings,false);  }}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  private void ensureCapacityHelper(int minCapacity){  if (minCapacity - elementData.length > 0)   grow(minCapacity);}  }
class C{  public void testReceive_UnconnectedReadonly() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL).asReadOnlyBuffer();  assertTrue(dst.isReadOnly());  try {    this.channel1.receive(dst);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public PixelGrabber(Image img,int x,int y,int w,int h,int[] pix,int off,int scansize){  this(img.getSource(),x,y,w,h,pix,off,scansize);}  }
class C{  public int readOggVorbisRawSize(RandomAccessFile raf) throws CannotReadException, IOException {  byte[] rawVorbisCommentData=readRawPacketData(raf);  return rawVorbisCommentData.length + VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH;}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void addSelectionPaths(TreePath[] paths){  int newPathLength=((paths == null) ? 0 : paths.length);  if (newPathLength > 0) {    if (selectionMode == TreeSelectionModel.SINGLE_TREE_SELECTION) {      setSelectionPaths(paths);    } else     if (selectionMode == TreeSelectionModel.CONTIGUOUS_TREE_SELECTION && !canPathsBeAdded(paths)) {      if (arePathsContiguous(paths)) {        setSelectionPaths(paths);      } else {        TreePath[] newPaths=new TreePath[1];        newPaths[0]=paths[0];        setSelectionPaths(newPaths);      }    } else {      int counter, validCount;      int oldCount;      TreePath beginLeadPath=leadPath;      Vector<PathPlaceHolder> cPaths=null;      if (selection == null)       oldCount=0; else       oldCount=selection.length;      lastPaths.clear();      for (counter=0, validCount=0; counter < newPathLength; counter++) {        if (paths[counter] != null) {          if (uniquePaths.get(paths[counter]) == null) {            validCount++;            if (cPaths == null)             cPaths=new Vector<PathPlaceHolder>();            cPaths.addElement(new PathPlaceHolder(paths[counter],true));            uniquePaths.put(paths[counter],Boolean.TRUE);            lastPaths.put(paths[counter],Boolean.TRUE);          }          leadPath=paths[counter];        }      }      if (leadPath == null) {        leadPath=beginLeadPath;      }      if (validCount > 0) {        TreePath newSelection[]=new TreePath[oldCount + validCount];        if (oldCount > 0)         System.arraycopy(selection,0,newSelection,0,oldCount);        if (validCount != paths.length) {          Enumeration<TreePath> newPaths=lastPaths.keys();          counter=oldCount;          while (newPaths.hasMoreElements()) {            newSelection[counter++]=newPaths.nextElement();          }        } else {          System.arraycopy(paths,0,newSelection,oldCount,validCount);        }        selection=newSelection;        insureUniqueness();        updateLeadIndex();        resetRowSelection();        notifyPathChange(cPaths,beginLeadPath);      } else       leadPath=beginLeadPath;      lastPaths.clear();    }  }}  }
class C{  private void decideUILookAndFeel(MainOptions options){  try {    boolean systemPlaf=false;    systemPlaf=options.system_plaf;    String systemPlafReq=System.getenv("systemplaf");    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase("true"))     systemPlaf=true;    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception exc) {    exc.printStackTrace();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.TransformationParametersType createTransformationParametersType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.TransformationParametersTypeImpl();}  }
class C{  static DN create(ManagedObjectPath<?,?> path,InstantiableRelationDefinition<?,?> relation,LDAPProfile profile){  DNBuilder builder=new DNBuilder(profile);  path.serialize(builder);  builder.appendManagedObjectPathElement(relation);  return builder.build();}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS04.class,args);}  }
class C{  private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  public static <K,V>Map<K,TimerTask> checkMinIdle(final KeyedObjectPool<K,V> keyedPool,final Collection<K> keys,final int minIdle,final long period) throws IllegalArgumentException {  if (keys == null) {    throw new IllegalArgumentException("keys must not be null.");  }  final Map<K,TimerTask> tasks=new HashMap<>(keys.size());  final Iterator<K> iter=keys.iterator();  while (iter.hasNext()) {    final K key=iter.next();    final TimerTask task=checkMinIdle(keyedPool,key,minIdle,period);    tasks.put(key,task);  }  return tasks;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home) {    super.onBackPressed();    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public DisallowCharactersValidator(final char[] chars){  this.chars=chars;}  }
class C{  protected JButton createRightOneTouchButton(){  SynthArrowButton b=new SynthArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.rightOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(false));  return b;}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public static void removeAllAttributeDefaultValues(String serviceName,String schemaType,String attributeName,String subSchema) throws UpgradeException {  String classMethod="UpgradeUtils:removeAttributeDefaultValues : ";  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    if (ss != null) {      AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);      attrSchema.removeDefaultValues();    }  } catch (  SMSException sme) {    throw new UpgradeException(sme.getMessage());  }catch (  Exception e) {    debug.error(classMethod + "Error removing default values",e);    throw new UpgradeException(e.getMessage());  }}  }
class C{  public boolean isC66Encoded(){  return encryptedString != null && encryptedString.contains("*");}  }
class C{  @Deprecated protected String normalizeMimeType(String mimeType){  return mimeType;}  }
class C{  public boolean is_on_front(){  return on_front;}  }
class C{  public JsonValue continueAuthentication(HttpServletRequest request,HttpServletResponse response,JsonValue postBody,String sessionUpgradeSSOTokenId) throws RestAuthException {  return authenticate(request,response,postBody,null,null,sessionUpgradeSSOTokenId);}  }
class C{  public void append(Printable painter,PageFormat page,int numPages){  BookPage bookPage=new BookPage(painter,page);  int pageIndex=mPages.size();  int newSize=pageIndex + numPages;  mPages.setSize(newSize);  for (int i=pageIndex; i < newSize; i++) {    mPages.setElementAt(bookPage,i);  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  super.onCreateOptionsMenu(menu);  getMenuInflater().inflate(R.menu.menu_cast,menu);  MenuItem mediaRouteMenuItem=menu.findItem(R.id.media_route_menu_item);  MediaRouteActionProvider mediaRouteActionProvider=(MediaRouteActionProvider)MenuItemCompat.getActionProvider(mediaRouteMenuItem);  mediaRouteActionProvider.setRouteSelector(mMediaRouteSelector);  return true;}  }
class C{  private void initEvents(){  setSelectionSounds(play,hScore,credits,quit,quitY,quitN);  play.setOnAction(null);  hScore.setOnAction(null);  credits.setOnAction(null);  quit.setOnAction(null);  quitY.setOnAction(null);  quitN.setOnAction(null);  scene.setOnKeyPressed(null);  scene.setOnKeyReleased(null);}  }
class C{  int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    context=dtm.getParent(context);  }  return context;}  }
class C{  public void test_NeedClientAuth() throws UnknownHostException, IOException {  SSLSocket ssl=getSSLSocket();  ssl.setNeedClientAuth(true);  assertTrue(ssl.getNeedClientAuth());  ssl.setNeedClientAuth(false);  assertFalse(ssl.getNeedClientAuth());  ssl.close();}  }
class C{  public int length(){  int len=getArrayLength() - (getGapEnd() - getGapStart());  return len;}  }
class C{  public ModelMBeanInfoSupport(String className,String description,ModelMBeanAttributeInfo[] attributes,ModelMBeanConstructorInfo[] constructors,ModelMBeanOperationInfo[] operations,ModelMBeanNotificationInfo[] notifications,Descriptor mbeandescriptor){  super(className,description,(attributes != null) ? attributes : NO_ATTRIBUTES,(constructors != null) ? constructors : NO_CONSTRUCTORS,(operations != null) ? operations : NO_OPERATIONS,(notifications != null) ? notifications : NO_NOTIFICATIONS);  modelMBeanAttributes=attributes;  modelMBeanConstructors=constructors;  modelMBeanOperations=operations;  modelMBeanNotifications=notifications;  modelMBeanDescriptor=validDescriptor(mbeandescriptor);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanInfoSupport.class.getName(),"ModelMBeanInfoSupport(String,String,ModelMBeanAttributeInfo[]," + "ModelMBeanConstructorInfo[],ModelMBeanOperationInfo[]," + "ModelMBeanNotificationInfo[],Descriptor)","Exit");  }}  }
class C{  public void next(){  next(true);}  }
class C{  public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/XML/1998/namespaces";  String qualifiedName="xml:attr1";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public AMException(String msg,String errorCode,Object[] args){  super(msg);  this.localizedMsg=msg;  this.errorCode=errorCode;  this.args=args;}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  int index=1;  while (index < size()) {    result.append(getSegment(index));    if (index < size() - 1) {      int kind=getSegment(index + 1).getKind();      if (kind == STRUCT_FIELD_STEP || kind == QUALIFIER_STEP) {        result.append('/');      }    }    index++;  }  return result.toString();}  }
class C{  public void updateUI(){  setUI((ToolBarUI)UIManager.getUI(this));  if (getLayout() == null) {    setLayout(new DefaultToolBarLayout(getOrientation()));  }  invalidate();}  }
class C{  public ErrorInfoHeader createErrorInfoHeader(URI errorInfo){  if (errorInfo == null)   throw new NullPointerException("null arg");  return new ErrorInfo((GenericURI)errorInfo);}  }
class C{  public void testField(){  checkSecretKey sk=new checkSecretKey();  assertEquals("Incorrect serialVersionUID",sk.getSerVerUID(),-4795878709595146952L);}  }
class C{  public RxGalleryFinal cropAllowedGestures(@UCropActivity.GestureTypes int tabScale,@UCropActivity.GestureTypes int tabRotate,@UCropActivity.GestureTypes int tabAspectRatio){  configuration.setAllowedGestures(new int[]{tabScale,tabRotate,tabAspectRatio});  return this;}  }
class C{  public void addCondition(String conditionName,Condition condition) throws NameAlreadyExistsException {  if (conditionName == null) {    conditionName="Condition:" + ServiceTypeManager.generateRandomName();  }  if (conditions.containsKey(conditionName)) {    String[] objs={conditionName};    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"name_already_present",objs,conditionName,PolicyException.CONDITION_COLLECTION));  }  conditions.put(conditionName,condition);}  }
class C{  public boolean containsHeader(String name){  for (int i=0; i < headers.size(); i++) {    Header header=(Header)headers.get(i);    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof DocumentName);}  }
class C{  public boolean addConfirmationMethod(String confirmationMethod){  if ((confirmationMethod == null) || (confirmationMethod.length() == 0)) {    return false;  }  _confirmationMethodList.add(confirmationMethod);  return true;}  }
class C{  public ReplicationServer(ReplicationServerCfg cfg) throws ConfigException {  this(cfg,new DSRSShutdownSync(),new ECLEnabledDomainPredicate());}  }
class C{  public void createIDRepo(String realmName,String idRepoName,String idRepoType,Map values) throws AMConsoleException {  String[] params={realmName,idRepoName,idRepoType};  logEvent("ATTEMPT_CREATE_ID_REPO",params);  values.remove("idRepoLoadSchema");  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,getUserSSOToken());    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realmName,null);    if (cfg == null) {      cfg=createOrganizationConfig(realmName,idRepoType);    }    cfg.addSubConfig(idRepoName,idRepoType,0,values);    logEvent("SUCCEED_CREATE_ID_REPO",params);  } catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,idRepoName,idRepoType,strError};    logEvent("SMS_EXCEPTION_CREATE_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,idRepoName,idRepoType,strError};    logEvent("SSO_EXCEPTION_CREATE_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public static boolean useImpliedResource(){  return useImpliedRes;}  }
class C{  public boolean update(Long ruleActionID,Long ruleID,Long actionID,Integer failureType,String message){  if (ruleActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (ruleID != null) {    args.put(KEY_RULEID,ruleID);  }  if (actionID != null) {    args.put(KEY_ACTIONID,actionID);  }  if (failureType != null) {    args.put(KEY_FAILURE_TYPE,failureType);  }  if (message != null) {    args.put(KEY_MESSAGE,message);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_FAILEDACTIONID + "=" + ruleActionID,null) > 0;  }  return false;}  }
class C{  public TeeOutputStream(OutputStream out,OutputStream branch){  super(out);  this.branch=branch;}  }
class C{  protected void clearTrace(){synchronized (this.traceList) {    this.traceList.clear();  }}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public FSBrowserPostConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,FSAuthnRequest authnRequest,boolean doFederate,String relayState){  super(request,response,idpDescriptor,idpEntityId,authnRequest,doFederate,relayState);}  }
class C{  public T status(Status status){  if (null != status) {    jsonValue.put(STATUS,status.name());  }  return self();}  }
class C{  public ParseConversionEventImpl(int _severity,String _message,ValidationEventLocator _locator){  super(_severity,_message,_locator);}  }
class C{  private void init(SSLParametersImpl sslParameters) throws IOException {  init(sslParameters,NativeCrypto.getDefaultProtocols(),NativeCrypto.getDefaultCipherSuites());}  }
class C{  public void signXML() throws SAMLException {  throw new SAMLException(FSUtils.BUNDLE_NAME,"unsupportedOperation",null);}  }
class C{  public String mapToXACMLActionEffect(String nativeActionEffect,String serviceName) throws XACMLException {  return null;}  }
class C{  public static TextHitInfo afterOffset(int offset){  return new TextHitInfo(offset,true);}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){switch (userAttrType) {case ROLEDN:case GROUPDN:case USERDN:    return evalDNKeywords(evalCtx);case URL:  return evalURL(evalCtx);default :return evalVAL(evalCtx);}}  }
class C{  static String convertRealmPathToDN(String realmPath){  return coreWrapper.convertRealmNameToOrgName(realmPath);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String configName=getStringOptionValue(AuthOptions.AUTH_CONFIG_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List listEntries=rc.getOption(AuthOptions.AUTH_CONFIG_ENTRIES);  if ((datafile == null) && (listEntries == null)) {    throw new CLIException(getResourceString("authentication-set-auth-config-entries-missing-data"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  String[] params={realm,configName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_AUTH_CONFIG_ENTRIES",params);  try {    List entries=parse(datafile,listEntries);    validateEntries(realm,adminSSOToken,entries,params);    Map configData=new HashMap(2);    Set tmp=new HashSet(2);    String xml=AMAuthConfigUtils.authConfigurationEntryToXMLString(entries);    tmp.add(xml);    configData.put(AuthOptions.AUTH_CONFIG_ATTR,tmp);    IOutput outputWriter=getOutputWriter();    AMAuthConfigUtils.replaceNamedConfig(configName,0,configData,realm,adminSSOToken);    outputWriter.printlnMessage(getResourceString("authentication-set-auth-config-entries-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SET_AUTH_CONFIG_ENTRIES",params);  } catch (  AMConfigurationException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public StateInteractive extent_to_whole_components(){  Set<Integer> curr_group_no_set=new TreeSet<Integer>();  Iterator<BrdItem> it=items_list.iterator();  while (it.hasNext()) {    BrdItem curr_item=it.next();    if (curr_item.get_component_no() > 0) {      curr_group_no_set.add(curr_item.get_component_no());    }  }  Set<BrdItem> new_selected_items=new TreeSet<BrdItem>();  new_selected_items.addAll(items_list);  Iterator<Integer> it2=curr_group_no_set.iterator();  while (it2.hasNext()) {    int curr_group_no=it2.next();    new_selected_items.addAll(r_brd.get_component_items(curr_group_no));  }  if (new_selected_items.isEmpty()) {    return return_state;  }  items_list=new_selected_items;  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_COMPONENTS);  i_brd.repaint();  return this;}  }
class C{  public static String composeQualifierPath(String qualNS,String qualName) throws XMPException {  assertQualNS(qualNS);  assertQualName(qualName);  XMPPath qualPath=XMPPathParser.expandXPath(qualNS,qualName);  if (qualPath.size() != 2) {    throw new XMPException("The qualifier name must be simple",XMPError.BADXPATH);  }  return "/?" + qualPath.getSegment(XMPPath.STEP_ROOT_PROP).getName();}  }
class C{  public Object clone(){  return (new CompositeName(getAll()));}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,byte[] pix,int off,int scan,Hashtable<?,?> props){  initialize(w,h,cm,(Object)pix,off,scan,props);}  }
class C{  void notExcessiveNesting(){synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {                                                                }                                                              }                                                            }                                                          }                                                        }                                                      }                                                    }                                                  }                                                }                                              }                                            }                                          }                                        }                                      }                                    }                                  }                                }                              }                            }                          }                        }                      }                    }                  }                }              }            }          }        }      }    }  }}  }
class C{  public boolean isLeafNode(){  return isLeafNode;}  }
class C{  public DefaultMutableTreeNode(){  this(null);}  }
class C{  public static AdjustmentListener remove(AdjustmentListener l,AdjustmentListener oldl){  return (AdjustmentListener)removeInternal(l,oldl);}  }
class C{  public static String extractKeywords(String url){  if (StringUtils.isEmpty(url)) {    return null;  }  for (  KeywordMatcher matcher : SEARCH_ENGINES) {    String keywords=matcher.matchKeywords(url);    if (keywords != null) {      return keywords.replace("+"," ");    }  }  return null;}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void testIsOverflow(){  assertFalse(CoderResult.UNDERFLOW.isOverflow());  assertTrue(CoderResult.OVERFLOW.isOverflow());  assertFalse(CoderResult.malformedForLength(1).isOverflow());  assertFalse(CoderResult.unmappableForLength(1).isOverflow());}  }
class C{  public boolean countMatchingEntries(){  return countMatchingEntries;}  }
class C{  public AbortedChangelogCursorException(LocalizableMessage message){  super(message);}  }
class C{  protected void contextConfig(Digester digester){  String defaultContextXml=null;  if (context instanceof StandardContext) {    defaultContextXml=((StandardContext)context).getDefaultContextXml();  }  if (defaultContextXml == null) {    defaultContextXml=Constants.DefaultContextXml;  }  if (!context.getOverride()) {    File defaultContextFile=new File(defaultContextXml);    if (!defaultContextFile.isAbsolute()) {      defaultContextFile=new File(context.getCatalinaBase(),defaultContextXml);    }    if (defaultContextFile.exists()) {      try {        URL defaultContextUrl=defaultContextFile.toURI().toURL();        processContextConfig(digester,defaultContextUrl);      } catch (      MalformedURLException e) {        log.error(sm.getString("contextConfig.badUrl",defaultContextFile),e);      }    }    File hostContextFile=new File(getHostConfigBase(),Constants.HostContextXml);    if (hostContextFile.exists()) {      try {        URL hostContextUrl=hostContextFile.toURI().toURL();        processContextConfig(digester,hostContextUrl);      } catch (      MalformedURLException e) {        log.error(sm.getString("contextConfig.badUrl",hostContextFile),e);      }    }  }  if (context.getConfigFile() != null) {    processContextConfig(digester,context.getConfigFile());  }}  }
class C{  public int rtf(){  return DTM.NULL;}  }
class C{  public static PropertyMapper resourceType(){  return ResourceTypePropertyMapper.INSTANCE;}  }
class C{  public StateInteractive add_corner(PlaPointFloat p_location){  PlaPointInt location=snap_to_restriction(p_location.round());  corner_list.add(location);  i_brd.repaint();  actlog_add_corner(p_location);  return this;}  }
class C{  public static JMenuItem createMenuItem(LocalizableMessage msg){  return new JMenuItem(msg.toString());}  }
class C{  public void debug(Object message,Throwable exception){  log(Level.FINE,String.valueOf(message),exception);}  }
class C{  public LinkLoopException(String explanation){  super(explanation);}  }
class C{  public void testAddEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="123121247898748373566323807282924555312937.1991359555";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public BootstrapFailure(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean isComplianceUserDeletionEnabled() throws AMException {  try {    if (gsc == null) {      ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,internalToken);      gsc=scm.getGlobalSchema();    }    Map attrMap=gsc.getReadOnlyAttributeDefaults();    Set values=(Set)attrMap.get(COMPLIANCE_USER_DELETION_ATTR);    boolean enabled=false;    if (values == null || values.isEmpty()) {      enabled=false;    } else {      String val=(String)values.iterator().next();      enabled=(val.equalsIgnoreCase("true"));    }    if (debug.messageEnabled()) {      debug.message("Compliance.isComplianceUserDeletionEnabled = " + enabled);    }    return enabled;  } catch (  SMSException ex) {    debug.error(AMSDKBundle.getString("359"),ex);    throw new AMException(AMSDKBundle.getString("359"),"359");  }catch (  SSOException ex) {    debug.error(AMSDKBundle.getString("359"),ex);    throw new AMException(AMSDKBundle.getString("359"),"359");  }}  }
class C{  public boolean isAllowedWithoutReferer(){  return allowWithoutReferer;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusDetailType createStatusDetailType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusDetailTypeImpl();}  }
class C{  public String switchStagePath(){  return "M " + RelCoordinates.getRelCoords(3040,72) + " L "+ RelCoordinates.getRelCoords(3040,72,3040,200)+ RelCoordinates.getRelCoords(3040,200,3392,200)+ RelCoordinates.getRelCoords(3392,200,3392,224)+ RelCoordinates.getRelCoords(3392,224,2480,224)+ RelCoordinates.getRelCoords(2480,224,2480,136)+ RelCoordinates.getRelCoords(2480,136,2496,136)+ RelCoordinates.getRelCoords(2496,136,2496,152)+ RelCoordinates.getRelCoords(2496,152,2512,152)+ RelCoordinates.getRelCoords(2512,152,2512,168)+ RelCoordinates.getRelCoords(2512,168,2528,168)+ RelCoordinates.getRelCoords(2528,168,2528,184)+ RelCoordinates.getRelCoords(2528,184,2544,184)+ RelCoordinates.getRelCoords(2544,184,2544,200)+ RelCoordinates.getRelCoords(2544,200,2610,200)+ RelCoordinates.getRelCoords(2610,200,2610,190)+ RelCoordinates.getRelCoords(2610,190,2608,181)+ RelCoordinates.getRelCoords(2608,181,2608,168)+ RelCoordinates.getRelCoords(2608,181,2608,168)+ RelCoordinates.getRelCoords(2608,168,2641,168)+ RelCoordinates.getRelCoords(2641,168,2641,183)+ RelCoordinates.getRelCoords(2641,183,2638,183)+ RelCoordinates.getRelCoords(2638,183,2638,200)+ RelCoordinates.getRelCoords(2638,200,2866,200)+ RelCoordinates.getRelCoords(2866,200,2866,190)+ RelCoordinates.getRelCoords(2866,190,2864,181)+ RelCoordinates.getRelCoords(2864,181,2864,168)+ RelCoordinates.getRelCoords(2864,168,2896,168)+ RelCoordinates.getRelCoords(2896,168,2896,181)+ RelCoordinates.getRelCoords(2896,181,2894,187)+ RelCoordinates.getRelCoords(2894,187,2894,200)+ RelCoordinates.getRelCoords(2894,200,2896,200)+ RelCoordinates.getRelCoords(2896,200,2896,184)+ RelCoordinates.getRelCoords(2896,184,2912,184)+ RelCoordinates.getRelCoords(2912,184,2912,168)+ RelCoordinates.getRelCoords(2912,168,2928,168)+ RelCoordinates.getRelCoords(2928,168,2928,152)+ RelCoordinates.getRelCoords(2928,152,2944,152)+ RelCoordinates.getRelCoords(2944,152,2944,136)+ RelCoordinates.getRelCoords(2944,136,2960,136)+ RelCoordinates.getRelCoords(2960,136,2960,120)+ RelCoordinates.getRelCoords(2960,120,2976,120)+ RelCoordinates.getRelCoords(2976,120,2976,104)+ RelCoordinates.getRelCoords(2976,104,2992,104)+ RelCoordinates.getRelCoords(2992,104,2992,88)+ RelCoordinates.getRelCoords(2992,88,3008,88)+ RelCoordinates.getRelCoords(3008,88,3008,72)+ RelCoordinates.getRelCoords(3008,72,3040,72)+ " Z";}  }
class C{  @Override public Dialog onCreateDialog(Bundle savedInstanceState){  Dialog dialog=super.onCreateDialog(savedInstanceState);  dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);  dialog.setCanceledOnTouchOutside(true);  return dialog;}  }
class C{  @Override public boolean isPrintValue(Object bean,Object bean2,String attrName,StoreDescription desc){  boolean isPrint=super.isPrintValue(bean,bean2,attrName,desc);  if (isPrint) {    StandardContext context=((StandardContext)bean);    if ("workDir".equals(attrName)) {      String defaultWorkDir=getDefaultWorkDir(context);      isPrint=!defaultWorkDir.equals(context.getWorkDir());    } else     if ("path".equals(attrName)) {      isPrint=desc.isStoreSeparate() && desc.isExternalAllowed() && context.getConfigFile() == null;    } else     if ("docBase".equals(attrName)) {      Container host=context.getParent();      if (host instanceof StandardHost) {        File appBase=getAppBase(((StandardHost)host));        File docBase=getDocBase(context,appBase);        isPrint=!appBase.equals(docBase.getParentFile());      }    }  }  return isPrint;}  }
class C{  ScriptedCondition(Script script){  this.script=script;}  }
class C{  private boolean level_handled(Object src){  for (  CheckboxAndBitmask arow : level_list) {    if (arow.checkbox != src)     continue;    if ((stat.debug_level & arow.bitmask) != 0)     stat.debug_level&=~arow.bitmask; else     stat.debug_level|=arow.bitmask;    return true;  }  return false;}  }
class C{  public void addPluginSchema(Document pluginDoc) throws SMSException, SSOException {  SMSEntry.validateToken(token);  Node serviceNode=XMLUtils.getRootNode(pluginDoc,SMSUtils.SERVICE);  String serviceName=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.NAME);  ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);  Document schemaDoc=ssm.getDocumentCopy();  Node pluginSchemaDoc=XMLUtils.getRootNode(pluginDoc,SMSUtils.PLUGIN_SCHEMA);  SMSSchema smsSchema=new SMSSchema(schemaDoc);  PluginSchema.createPluginSchema(token,pluginSchemaDoc,smsSchema);}  }
class C{  public void stop(){  context.unregisterReceiver(this);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionElement createAsymmetricDecryptionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionElementImpl();}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  OperationMonitor(final RateTimer timer,final RateWindow rateWindow){  this.timerGetter=timer;  this.rateWindow=rateWindow;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanAttributeInfo))   return false;  MBeanAttributeInfo p=(MBeanAttributeInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getType(),getType()) && Objects.equals(p.getDescription(),getDescription())&& Objects.equals(p.getDescriptor(),getDescriptor())&& p.isReadable() == isReadable() && p.isWritable() == isWritable() && p.isIs() == isIs());}  }
class C{  public Builder optionalAttributes(final Collection<String> nameOrOIDs){  this.optionalAttributes.addAll(nameOrOIDs);  return this;}  }
class C{  public ISSecurityPermission(String access,String action){  super(access);  perm=access;  this.actions=convertActionStringToSet(action);  hashCode=rnd.nextInt();}  }
class C{  private AST.Throw parse_throw() throws SyntaxException {  LineCol lineCol=current.getLineCol();  Expression exp=next_exp(false);  return new AST.Throw(exp,lineCol);}  }
class C{  public InvalidRequestException(final String message,final UrlLocation parameterLocation){  super(400,"invalid_request",message,parameterLocation);}  }
class C{  @SuppressWarnings("unused") public static RectF inflateRect(RectF source,float value){  return ScWidget.inflateRect(source,value,false);}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,StringMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final StringMonitorObservedObject smo=(StringMonitorObservedObject)o;    smo.setStatus(MATCHING_OR_DIFFERING);  }  doStart();}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.isDefined(cssKey);    }  }  return super.isDefined(key);}  }
class C{  public void log(LogRecord record){  if (record instanceof ILogRecord) {    log((ILogRecord)record);  } else {    Object obj=token.get();    log(record,obj);  }}  }
class C{  protected void check(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"check",params,signature);}  }
class C{  public AiffFile(){}  }
class C{  public ProfileViewer(){  rootFrames=new HashMap<>();  stacksByMethod=new HashMap<>();  totalDuration=0;  totalIntervals=0;}  }
class C{  public LogRecord(Level level,String msg,Object token){  this(level,msg);  this.token=token;  try {    Logger.extractInfoFromLogFor(this);  } catch (  SSOException se) {    Debug.error("LogRecord:LogRecord:SSOException: " + se.getMessage());  }}  }
class C{  public final boolean isInitial(){  return flags[INITIAL_TICKET_FLAG];}  }
class C{  public void writeString(byte[] string){  try {    uncompData.write(string);  } catch (  IOException e) {    throw new PdfException(PdfException.LzwDecoderException,e);  }}  }
class C{  public TemplateValue(TemplateLine templateLine){  this.templateLine=templateLine;  templateValue=new StringBuilder();}  }
class C{  protected void closeOutUnwantedEmbeddedTags(AttributeSet attr) throws IOException {  tagsToRemove.removeAllElements();  attr=convertToHTML(attr,null);  HTML.Tag t;  Object tValue;  int firstIndex=-1;  int size=tags.size();  for (int i=size - 1; i >= 0; i--) {    t=tags.elementAt(i);    tValue=tagValues.elementAt(i);    if ((attr == null) || noMatchForTagInAttributes(attr,t,tValue)) {      firstIndex=i;      tagsToRemove.addElement(t);    }  }  if (firstIndex != -1) {    boolean removeAll=((size - firstIndex) == tagsToRemove.size());    for (int i=size - 1; i >= firstIndex; i--) {      t=tags.elementAt(i);      if (removeAll || tagsToRemove.contains(t)) {        tags.removeElementAt(i);        tagValues.removeElementAt(i);      }      write('<');      write('/');      write(t.toString());      write('>');    }    size=tags.size();    for (int i=firstIndex; i < size; i++) {      t=tags.elementAt(i);      write('<');      write(t.toString());      Object o=tagValues.elementAt(i);      if (o != null && o instanceof AttributeSet) {        writeAttributes((AttributeSet)o);      }      write('>');    }  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static MatchedValuesFilter createLessOrEqualFilter(String rawAttributeType,ByteString rawAssertionValue){  Reject.ifNull(rawAttributeType,rawAssertionValue);  return new MatchedValuesFilter(LESS_OR_EQUAL_TYPE,rawAttributeType,rawAssertionValue,null,null,null,null);}  }
class C{  public void checkCanceled() throws SynchronizationException {  if (isCanceled()) {    throw new SynchronizationException("Reconciliation canceled: " + getReconId());  }}  }
class C{  public PortLimitAttribute(int port){  super(OctetUtils.toOctets(AttributeType.PORT_LIMIT,port));  this.port=port;}  }
class C{  public void updateVLVIndex(VLVIndexDescriptor index){  vlvIndexPanel.update(index);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,vlvIndexPanel.getTitle().toString());}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  private static boolean contentsEquals(InputStream in1,InputStream in2) throws IOException {  if (!(in1 instanceof BufferedInputStream)) {    in1=new BufferedInputStream(in1);  }  if (!(in2 instanceof BufferedInputStream)) {    in2=new BufferedInputStream(in2);  }  int ch=in1.read();  while (ch != -1) {    int ch2=in2.read();    if (ch != ch2) {      return false;    }    ch=in1.read();  }  int ch2=in2.read();  return ch2 == -1;}  }
class C{  public int makeLDIFMain(String[] args){  return makeLDIFMain(args,true,true,System.out,System.err);}  }
class C{  public void removeBandwidth(String name){  if (name != null)   if (bandwidthList != null) {    for (int i=0; i < bandwidthList.size(); i++) {      Object o=bandwidthList.elementAt(i);      if (o instanceof BandwidthField) {        BandwidthField b=(BandwidthField)o;        try {          String type=b.getType();          if (type != null) {            if (name.equals(type)) {              bandwidthList.remove(b);            }          }        } catch (        SdpParseException e) {        }      }    }  }}  }
class C{  public void clear(){  if (states != null) {    states.removeAllElements();  }}  }
class C{  public void startPreserving() throws org.xml.sax.SAXException {  m_preserves.push(true);  m_ispreserve=true;}  }
class C{  private String[] newLDIFEntries(){  return new String[]{"dn: " + baseDN + "\n"+ "objectClass: top\n"+ "objectClass: organization\n"+ "entryUUID: 21111111-1111-1111-1111-111111111111\n"+ "\n","dn: ou=People," + baseDN + "\n"+ "objectClass: top\n"+ "objectClass: organizationalUnit\n"+ "entryUUID: 21111111-1111-1111-1111-111111111112\n"+ "\n","dn: cn=Fiona Jensen,ou=people," + baseDN + "\n"+ "objectclass: top\n"+ "objectclass: person\n"+ "objectclass: organizationalPerson\n"+ "objectclass: inetOrgPerson\n"+ "cn: Fiona Jensen\n"+ "sn: Jensen\n"+ "uid: fiona\n"+ "telephonenumber: +1 408 555 1212\n"+ "entryUUID: 21111111-1111-1111-1111-111111111113\n"+ "\n","dn: cn=Robert Langman,ou=people," + baseDN + "\n"+ "objectclass: top\n"+ "objectclass: person\n"+ "objectclass: organizationalPerson\n"+ "objectclass: inetOrgPerson\n"+ "cn: Robert Langman\n"+ "sn: Langman\n"+ "uid: robert\n"+ "telephonenumber: +1 408 555 1213\n"+ "entryUUID: 21111111-1111-1111-1111-111111111114\n"+ "\n"};}  }
class C{  public OneStepIteratorForward(int axis){  super(null);  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static synchronized void clearCache(){  entityDescriptorCache.clear();  entityConfigCache.clear();  metaAliasEntityCache.clear();  metaAliasRoleCache.clear();  entitySuccinctIDCache.clear();}  }
class C{  public String rubyTypeNameForProtoElement(ProtoElement element){  String fullName=element.getFullName();  int lastDot=fullName.lastIndexOf('.');  if (lastDot < 0) {    return fullName;  }  List<String> rubyNames=new ArrayList<>();  for (  String name : fullName.substring(0,lastDot).split("\\.")) {    if (Character.isUpperCase(name.charAt(0))) {      rubyNames.add(name);    } else {      rubyNames.add(lowerUnderscoreToUpperCamel(name));    }  }  rubyNames.add(element.getSimpleName());  return Joiner.on("::").join(rubyNames);}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  return Thread.currentThread().getContextClassLoader();}  }
class C{  private byte[] pbeEncrypt(final byte[] clearText){  byte[] result=null;  if (clearText == null || clearText.length == 0) {    return null;  }  if (_initialized) {    try {      byte type[]=new byte[2];      type[1]=(byte)DEFAULT_ENC_ALG_INDEX;      type[0]=(byte)DEFAULT_KEYGEN_ALG_INDEX;      final Cipher pbeCipher=cipherProvider.getCipher();      if (pbeCipher != null) {        pbeCipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParameterSpec);        result=pbeCipher.doFinal(clearText);        byte[] iv=pbeCipher.getIV();        result=addPrefix(type,iv,result);      } else {        Debug debug=Debug.getInstance("amSDK");        if (debug != null) {          debug.error("JCEEncryption: Failed to obtain Cipher");        }      }    } catch (    Exception ex) {      Debug debug=Debug.getInstance("amSDK");      if (debug != null) {        debug.error("JCEEncryption:: failed to encrypt data",ex);      }    }  } else {    Debug debug=Debug.getInstance("amSDK");    if (debug != null) {      debug.error("JCEEncryption:: not yet initialized");    }  }  return result;}  }
class C{  <C extends ConfigurationClient,S extends Configuration>ServerManagedObject<? extends S> decode(ManagedObjectPath<C,S> path,Entry configEntry) throws DefinitionDecodingException, ServerManagedObjectDecodingException {  return decode(path,configEntry,null);}  }
class C{  public void error(String msg,Object[] args){  String themsg=XSLMessages.createMessage(msg,args);  throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{themsg}));}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="nomatch";  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS(namespaceURI,localName);  assertSize("throw_Size",0,elementList);}  }
class C{  public void store(SSOToken token,String name) throws SSOException, NoPermissionException, NameAlreadyExistsException, NameNotFoundException, PolicyException {  PolicyManager pm=new PolicyManager(token,name);  pm.addPolicy(this);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AgeElement createAgeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AgeElementImpl();}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public synchronized boolean intersectsSet(NSSet otherSet){  for (  NSObject o : set) {    if (otherSet.containsObject(o))     return true;  }  return false;}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle,boolean dtime){  this(peer,lcle,dtime,true);}  }
class C{  @Override public void write(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (writeLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return;    }    NativeCrypto.SSL_write(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,writeTimeoutMilliseconds);  }}  }
class C{  int[] toIntArray(){  int[] result=new int[intLen];  for (int i=0; i < intLen; i++)   result[i]=value[offset + i];  return result;}  }
class C{  private void showPopup(){  Popup oldPopup=popup;  if (oldPopup != null) {    oldPopup.hide();  }  PopupFactory popupFactory=PopupFactory.getSharedInstance();  if (isLightWeightPopupEnabled()) {    popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);  } else {    popupFactory.setPopupType(PopupFactory.HEAVY_WEIGHT_POPUP);  }  Point p=adjustPopupLocationToFitScreen(desiredLocationX,desiredLocationY);  desiredLocationX=p.x;  desiredLocationY=p.y;  Popup newPopup=getUI().getPopup(this,desiredLocationX,desiredLocationY);  popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);  popup=newPopup;  newPopup.show();}  }
class C{  public static int toLower(int c){  return toLower[c & 0xff] & 0xff;}  }
class C{  protected int readHeader(RandomAccessFile file) throws InvalidTagException, IOException {  int size;  byte[] buffer=new byte[5];  file.read(buffer,0,5);  size=Integer.parseInt(new String(buffer,0,5));  if ((size == 0) && (!TagOptionSingleton.getInstance().isLyrics3KeepEmptyFieldIfRead())) {    throw new InvalidTagException("Lyircs3v2 Field has size of zero.");  }  return size;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  validateData();  StringBuffer result=new StringBuffer();  String NS="";  String NSP="";  String uri="";  if (declareNS) {    NS=SAML2Constants.PROTOCOL_DECLARE_STR;    uri=NS;  }  if (includeNSPrefix) {    NSP=SAML2Constants.PROTOCOL_PREFIX;  }  result.append("<").append(NSP).append("NameIDMappingResponse").append(uri).append(" ID=\"").append(responseId).append("\"");  if (inResponseTo != null && inResponseTo.trim().length() != 0) {    result.append(" InResponseTo=\"").append(inResponseTo).append("\"");  }  result.append(" Version=\"").append(version).append("\"").append(" IssueInstant=\"").append(DateUtils.toUTCDateFormat(issueInstant)).append("\"");  if ((destination != null) && (destination.trim().length() != 0)) {    result.append(" Destination=\"").append(destination).append("\"");  }  if ((consent != null) && (consent.trim().length() != 0)) {    result.append(" Consent=\"").append(consent).append("\"");  }  result.append(">");  if (issuer != null) {    result.append(issuer.toXMLString(includeNSPrefix,declareNS));  }  if (signatureString != null) {    result.append(signatureString);  }  if (extensions != null) {    result.append(extensions.toXMLString(includeNSPrefix,declareNS));  }  if (nameID != null) {    result.append(nameID.toXMLString(includeNSPrefix,declareNS));  }  if (encryptedID != null) {    result.append(encryptedID.toXMLString(includeNSPrefix,declareNS));  }  result.append(status.toXMLString(includeNSPrefix,declareNS));  result.append("</").append(NSP).append(elementName).append(">");  return result.toString();}  }
class C{  @AndroidOnly("Uses specific class: " + "org.apache.harmony.security.asn1.ASN1OctetString.") public void testSetMinCRLNumberLjava_math_BigInteger(){  X509CRLSelector selector=new X509CRLSelector();  BigInteger minCRL=new BigInteger("10000");  CRL crl=new TestCRL(minCRL);  selector.setMinCRLNumber(null);  assertTrue("Any CRL should match in the case of null minCRLNumber.",selector.match(crl));  selector.setMinCRLNumber(minCRL);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setMinCRLNumber(new BigInteger("10001"));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  private void exception(Request request,Response response,Throwable exception){  request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,exception);  response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  response.setError();}  }
class C{  @Inject public SMSAuditor(@Named("amSMS") Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,@Assisted SSOToken runAs,@Assisted("realm") @Nullable String realm,@Assisted("objectId") String objectId,@Assisted Map<String,Object> initialState,Set<SMSAuditFilter> filters){  super(debug,auditEventPublisher,auditEventFactory,runAs,realm,objectId,initialState,filters);}  }
class C{  public void onDirectoryCreate(final File directory){}  }
class C{  public NetClass find(int p_trace_half_width,int p_trace_clearance_class,RuleViaInfoList p_via_rule){  for (  NetClass curr_class : class_list) {    if (curr_class.get_trace_clearance_class() != p_trace_clearance_class)     continue;    if (curr_class.get_via_rule() != p_via_rule)     continue;    if (curr_class.has_trace_half_width(p_trace_half_width))     return curr_class;  }  return null;}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecCipher01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        PKCS8EncodedKeySpec eks=epki.getKeySpec(g.c());        if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {          fail(algName[i][0] + " != " + algName[i][1]);        }      } catch (      InvalidKeySpecException e) {        fail(algName[i][0] + ", " + algName[i][1]+ e+ "\n");      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowed) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.UsernameTokenType createUsernameTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.UsernameTokenTypeImpl();}  }
class C{  public MemberName asNormalOriginal(){  byte normalVirtual=clazz.isInterface() ? REF_invokeInterface : REF_invokeVirtual;  byte refKind=getReferenceKind();  byte newRefKind=refKind;  MemberName result=this;switch (refKind) {case REF_invokeInterface:case REF_invokeVirtual:case REF_invokeSpecial:    newRefKind=normalVirtual;  break;}if (newRefKind == refKind) return this;result=clone().changeReferenceKind(newRefKind,refKind);assert (this.referenceKindIsConsistentWith(result.getReferenceKind()));return result;}  }
class C{  private Collection<ShapePolygon> split_to_convex_recu(){  int start_corner_no=random_generator.nextInt(border_line_count());  PlaPointInt curr_corner=corners.get(start_corner_no);  PlaPointInt prev_corner;  if (start_corner_no != 0)   prev_corner=corners.get(start_corner_no - 1); else   prev_corner=corners.get(border_line_count() - 1);  PlaPointInt next_corner=null;  int concave_corner_no=-1;  for (int i=0; i < border_line_count(); ++i) {    if (start_corner_no < border_line_count() - 1)     next_corner=corners.get(start_corner_no + 1); else     next_corner=corners.get(0);    if (next_corner.side_of(prev_corner,curr_corner) == PlaSide.ON_THE_RIGHT) {      concave_corner_no=start_corner_no;      break;    }    prev_corner=curr_corner;    curr_corner=next_corner;    start_corner_no=(start_corner_no + 1) % border_line_count();  }  Collection<ShapePolygon> result=new LinkedList<ShapePolygon>();  if (concave_corner_no < 0) {    result.add(this);    return result;  }  ShapePolygonDivisionPoint d=new ShapePolygonDivisionPoint(corners,concave_corner_no);  if (d.projection == null) {    return null;  }  int corner_count=d.corner_no_after_projection - concave_corner_no;  if (corner_count < 0)   corner_count+=border_line_count();  ++corner_count;  PlaPointIntAlist first_arr=new PlaPointIntAlist(corner_count);  int corner_ind=concave_corner_no;  for (int index=0; index < corner_count - 1; ++index) {    first_arr.add(corners.get(corner_ind));    corner_ind=(corner_ind + 1) % border_line_count();  }  first_arr.add(d.projection.round());  ShapePolygon first_piece=new ShapePolygon(first_arr);  corner_count=concave_corner_no - d.corner_no_after_projection;  if (corner_count < 0)   corner_count+=border_line_count();  corner_count+=2;  PlaPointIntAlist last_arr=new PlaPointIntAlist(corner_count);  last_arr.add(d.projection.round());  corner_ind=d.corner_no_after_projection;  for (int index=1; index < corner_count; ++index) {    last_arr.add(corners.get(corner_ind));    corner_ind=(corner_ind + 1) % border_line_count();  }  ShapePolygon last_piece=new ShapePolygon(last_arr);  Collection<ShapePolygon> c1=first_piece.split_to_convex_recu();  if (c1 == null)   return null;  Collection<ShapePolygon> c2=last_piece.split_to_convex_recu();  if (c2 == null)   return null;  result.addAll(c1);  result.addAll(c2);  return result;}  }
class C{  public static void main(String[] args){  if (args.length != 5) {    printUsage();  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final String groupDN=args[2];  final String memberDN=args[3];  final ModificationType modType=getModificationType(args[4]);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    Collection<String> controls=RootDSE.readRootDSE(connection).getSupportedControls();    final String user="cn=Directory Manager";    final char[] password="password".toCharArray();    connection.bind(user,password);    if (controls.contains(PermissiveModifyRequestControl.OID)) {      final ModifyRequest request=Requests.newModifyRequest(groupDN).addControl(PermissiveModifyRequestControl.newControl(true)).addModification(modType,"member",memberDN);      connection.modify(request);    } else {      System.out.println("Checking whether the entry with DN " + memberDN + " belongs to the group with DN "+ groupDN+ "...");      final CompareRequest request=Requests.newCompareRequest(groupDN,"member",memberDN);      CompareResult result=connection.compare(request);      if (modType == ModificationType.ADD && result.getResultCode() == ResultCode.COMPARE_FALSE) {        System.out.println("Member does not yet belong to group." + " Adding it...");        final ModifyRequest addMember=Requests.newModifyRequest(groupDN).addModification(modType,"member",memberDN);        connection.modify(addMember);      }      if (modType == ModificationType.DELETE && result.getResultCode() == ResultCode.COMPARE_TRUE) {        System.out.println("Member belongs to group." + " Removing it...");        final ModifyRequest delMember=Requests.newModifyRequest(groupDN).addModification(modType,"member",memberDN);        connection.modify(delMember);      }    }    String op=(modType == ModificationType.ADD) ? "added to" : "deleted from";    System.out.println("The entry with DN " + memberDN + " has been "+ op+ " the group with DN "+ groupDN+ ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public void layoutContainer(Container parent){  arrangeGrid(parent);}  }
class C{  public ResponseImpl(){}  }
class C{  static public int nextPowerOfTwo(int value){  if (value == 0)   return 1;  value--;  value|=value >> 1;  value|=value >> 2;  value|=value >> 4;  value|=value >> 8;  value|=value >> 16;  return value + 1;}  }
class C{  private AttributeValue(AttributeDescription attributeDescription,ByteString value){  this.attributeDescription=attributeDescription;  this.value=value;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public PlaPointInt[] try_shove_via_points(ShapeTile p_obstacle_shape,int p_layer,BrdAbitVia p_via,int p_cl_class_no,boolean p_extended_check){  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  ShapeTile curr_via_shape=p_via.get_tree_shape_on_layer(search_tree,p_layer);  if (curr_via_shape == null) {    return new PlaPointInt[0];  }  boolean is_int_octagon=p_obstacle_shape.is_IntOctagon();  double clearance_value=r_board.get_clearance(p_cl_class_no,p_via.clearance_idx(),p_layer);  double shove_distance;  if (is_int_octagon) {    shove_distance=0.5 * curr_via_shape.bounding_box().max_width();    if (!search_tree.is_clearance_compensation_used()) {      shove_distance+=clearance_value;    }  } else {    shove_distance=0;    if (!search_tree.is_clearance_compensation_used()) {      shove_distance+=0.5 * clearance_value;    }  }  shove_distance+=2;  PlaPointInt curr_via_center=p_via.center_get();  PlaPointInt[] try_via_centers;  int try_count=1;  if (is_int_octagon) {    ShapeTileOctagon curr_offset_octagon=p_obstacle_shape.bounding_octagon().enlarge(shove_distance);    if (p_extended_check)     try_count=4;    Collection<PlaPointIntDist> nearest_list=curr_offset_octagon.nearest_border_projections(curr_via_center,try_count);    try_via_centers=new PlaPointInt[nearest_list.size()];    int index=0;    for (    PlaPointIntDist a_row : nearest_list)     try_via_centers[index++]=a_row.i_point;  } else {    ShapeTile curr_offset_shape=p_obstacle_shape.enlarge(shove_distance);    if (!search_tree.is_clearance_compensation_used()) {      curr_via_shape=curr_via_shape.enlarge(0.5 * clearance_value);    }    if (p_extended_check) {      try_count=4;    }    PlaPointFloat[] shove_deltas=curr_offset_shape.nearest_relative_outside_locations(curr_via_shape,try_count);    try_via_centers=new PlaPointInt[shove_deltas.length];    for (int index=0; index < try_via_centers.length; ++index) {      PlaVectorInt curr_delta=shove_deltas[index].to_vector();      try_via_centers[index]=curr_via_center.translate_by(curr_delta);    }  }  return try_via_centers;}  }
class C{  public PrivilegeSet read(InputStream xacml) throws EntitlementException {  PolicySet policySet;  try {    policySet=XACMLPrivilegeUtils.streamToPolicySet(xacml);  } catch (  JAXBException e) {    throw new EntitlementException(INVALID_XML,e);  }  return fromXACML(policySet);}  }
class C{  public boolean hasFeature(String feature,String version){  if (feature.equals("Core")) {    return version == null || version.equals("1.0") || version.equals("2.0");  }  return false;}  }
class C{  protected final void openSessionForRead(String applicationId,List<String> permissions,SessionLoginBehavior behavior,int activityCode){  openSession(applicationId,permissions,behavior,activityCode,SessionAuthorizationType.READ);}  }
class C{  public int hashCode(){  return charIndex;}  }
class C{  protected FHTreeStateNode createChildFor(Object userObject){  int newChildIndex=treeModel.getIndexOfChild(getUserObject(),userObject);  if (newChildIndex < 0)   return null;  FHTreeStateNode aNode;  FHTreeStateNode child=createNodeForValue(userObject,newChildIndex);  int childRow;  if (isVisible()) {    childRow=getRowToModelIndex(newChildIndex);  } else {    childRow=-1;  }  child.row=childRow;  for (int counter=0, maxCounter=getChildCount(); counter < maxCounter; counter++) {    aNode=(FHTreeStateNode)getChildAt(counter);    if (aNode.childIndex > newChildIndex) {      insert(child,counter);      return child;    }  }  add(child);  return child;}  }
class C{  protected void swapOut(Session session) throws IOException {  if (store == null || !session.isValid()) {    return;  }  ((StandardSession)session).passivate();  writeSession(session);  super.remove(session,true);  session.recycle();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.AttributedDateTime createAttributedDateTime() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.AttributedDateTimeImpl();}  }
class C{  protected void fireMenuDragMouseExited(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseExited(event);    }  }}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean hasSecond(){  return fieldSetFlags()[2];}  }
class C{  public XMLStreamException(String msg,Throwable th){  super(msg,th);  nested=th;}  }
class C{  public String toString(){  return ("SAML2Principal:  " + name);}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  private <K,V>Map<K,V> newMapIfNull(Map<K,V> map){  if (map != null) {    return map;  }  return new HashMap<>();}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public void removeAllChildren(){  for (int i=getChildCount() - 1; i >= 0; i--) {    remove(i);  }}  }
class C{  public String createAuthId(LoginConfiguration loginConfiguration,AuthenticationContext authContext) throws SignatureException, RestAuthException {  final SecretKey key=getSigningKey(authContext.getOrgDN());  Map<String,Object> jwtValues=new HashMap<String,Object>();  if (loginConfiguration.getIndexType().getIndexType() != null && loginConfiguration.getIndexValue() != null) {    jwtValues.put("authIndexType",escapeJsonString(loginConfiguration.getIndexType().getIndexType().toString()));    jwtValues.put("authIndexValue",escapeJsonString(loginConfiguration.getIndexValue()));  }  jwtValues.put("realm",authContext.getOrgDN());  jwtValues.put(SESSION_ID,authContext.getSessionID().toString());  return generateAuthId(key,jwtValues);}  }
class C{  @SuppressWarnings("unchecked") private void genManagedObjectInheritanceTree(TreeMap<String,TreeMap<String,AbstractManagedObjectDefinition>> list){  htmlHeader(DynamicConstants.PRODUCT_NAME + " " + "Configuration Reference - Inheritance View");  tabMenu(INHERITANCE_TREE_FILE);  viewHelp("This view represents the inheritance relationships between " + "configuration components.");  jumpSection();  for (  String catName : list.keySet()) {    heading3(getFriendlyName(catName));    TreeMap<String,AbstractManagedObjectDefinition> catList=list.get(catName);    for (    AbstractManagedObjectDefinition mo : catList.values()) {      RelationDefinition relDefn=relList.get(mo.getName());      if (relDefn != null && relDefn.hasOption(RelationOption.HIDDEN)) {        continue;      }      paragraph(getLink(mo.getUserFriendlyName().toString(),mo.getName() + ".html",MAIN_FRAME));      if (mo.hasChildren()) {        genMoInheritanceTree(makeMOTreeMap(mo.getChildren()));      }    }  }  htmlFooter();  generateFile(INHERITANCE_TREE_FILE);}  }
class C{  private static boolean isAccessPermitted(){  try {    ISSecurityPermission isp=new ISSecurityPermission("access","adminpassword");    if (securityManager != null) {      securityManager.checkPermission(isp);    }    return true;  } catch (  SecurityException e) {    Debug debug=Debug.getInstance("amSDK");    debug.error("Security Alert: Unauthorized access to Encoding/Decoding" + " password utility: Returning NULL",e);  }  return false;}  }
class C{  private long cancelWaiter(WNode node,WNode group,boolean interrupted){  if (node != null && group != null) {    Thread w;    node.status=CANCELLED;    for (WNode p=group, q; (q=p.cowait) != null; ) {      if (q.status == CANCELLED) {        U.compareAndSwapObject(p,WCOWAIT,q,q.cowait);        p=group;      } else       p=q;    }    if (group == node) {      for (WNode r=group.cowait; r != null; r=r.cowait) {        if ((w=r.thread) != null)         U.unpark(w);      }      for (WNode pred=node.prev; pred != null; ) {        WNode succ, pp;        while ((succ=node.next) == null || succ.status == CANCELLED) {          WNode q=null;          for (WNode t=wtail; t != null && t != node; t=t.prev)           if (t.status != CANCELLED)           q=t;          if (succ == q || U.compareAndSwapObject(node,WNEXT,succ,succ=q)) {            if (succ == null && node == wtail)             U.compareAndSwapObject(this,WTAIL,node,pred);            break;          }        }        if (pred.next == node)         U.compareAndSwapObject(pred,WNEXT,node,succ);        if (succ != null && (w=succ.thread) != null) {          succ.thread=null;          U.unpark(w);        }        if (pred.status != CANCELLED || (pp=pred.prev) == null)         break;        node.prev=pp;        U.compareAndSwapObject(pp,WNEXT,pred,succ);        pred=pp;      }    }  }  WNode h;  while ((h=whead) != null) {    long s;    WNode q;    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (h == whead) {      if (q != null && h.status == 0 && ((s=state) & ABITS) != WBIT && (s == 0L || q.mode == RMODE))       release(h);      break;    }  }  return (interrupted || Thread.interrupted()) ? INTERRUPTED : 0L;}  }
class C{  public boolean containsKey(Object o){synchronized (children) {    return children.containsKey(o);  }}  }
class C{  static ReplayPromise<Double> replayPromiseDouble(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public static StringArgument bindDNArgument(final String defaultBindDN,final LocalizableMessage description) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(description).defaultValue(defaultBindDN).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildArgument();}  }
class C{  public boolean isLeadAnchorNotificationEnabled(){  return leadAnchorNotificationEnabled;}  }
class C{  private AMCommonNameGenerator(){  initialize();}  }
class C{  public static String forceFrameID22To23(String identifier){  return ID3Frames.forcev22Tov23.get(identifier);}  }
class C{  void updateVisibilityModel(){  Component c=getContainer();  if (c instanceof JTextField) {    JTextField field=(JTextField)c;    BoundedRangeModel vis=field.getHorizontalVisibility();    int hspan=(int)getPreferredSpan(X_AXIS);    int extent=vis.getExtent();    int maximum=Math.max(hspan,extent);    extent=(extent == 0) ? maximum : extent;    int value=maximum - extent;    int oldValue=vis.getValue();    if ((oldValue + extent) > maximum) {      oldValue=maximum - extent;    }    value=Math.max(0,Math.min(value,oldValue));    vis.setRangeProperties(value,extent,0,maximum,false);  }}  }
class C{  public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  public boolean isTransientChild(String classname){  if (transientChildren != null)   return transientChildren.contains(classname);  return false;}  }
class C{  protected boolean isJdk14Available(){  return isLogLibraryAvailable("Jdk14","org.apache.commons.logging.impl.Jdk14Logger");}  }
class C{  private PropertyChangeListener createWindowPropertyChangeListener(){  return new PropertyChangeHandler();}  }
class C{  public AMSearchResults searchPeopleContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,searchControl);}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  @Override protected void doHandle(Restlet next,Request request,Response response){  if (request.getAttributes().containsKey("realmId")) {    super.doHandle(next,request,response);    return;  }  try {    Realm realm=getRealmFromURI(request);    if (realm == null) {      realm=getRealmFromServerName(request);    }    if (next != delegateRoute) {      String overrideRealm=getRealmFromQueryString(request);      if (overrideRealm != null) {        realm=Realm.of(overrideRealm);      }      request.getAttributes().put(REALM_URL,request.getResourceRef().getBaseRef().toString());    }    request.getAttributes().put(REALM,realm.asPath());    request.getAttributes().put(REALM_OBJECT,realm);    HttpServletRequest httpRequest=ServletUtils.getRequest(request);    httpRequest.setAttribute(REALM,realm.asPath());    httpRequest.setAttribute(REALM_OBJECT,realm);    request.getAttributes().remove("subrealm");    super.doHandle(next,request,response);  } catch (  RealmLookupException e) {    throw new ResourceException(Status.CLIENT_ERROR_NOT_FOUND,"Realm \"" + e.getRealm() + "\" not found",e);  }}  }
class C{  public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void clearGlobals(){  ac=null;  cookie=null;}  }
class C{  private List<String> convertToCommentedBlock(String content){  if (Strings.isNullOrEmpty(content)) {    return ImmutableList.<String>of();  }  ImmutableList.Builder<String> builder=ImmutableList.builder();  for (  String comment : Splitter.on("\n").splitToList(content)) {    builder.add(comment);  }  return builder.build();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public long insert(long timeStamp,String description,int level){  if (description == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_TIMESTAMP,timeStamp);  initialValues.put(KEY_DESCRIPTION,description);  initialValues.put(KEY_LEVEL,level);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public AssertionIDRef createAssertionIDRef(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REF);  if (obj == null) {    return new AssertionIDRefImpl();  } else {    return (AssertionIDRef)obj;  }}  }
class C{  protected PdfSignatureAppearance(PdfDocument document,Rectangle pageRect,int pageNumber){  this.document=document;  this.pageRect=new Rectangle(pageRect);  this.rect=new Rectangle(pageRect.getWidth(),pageRect.getHeight());  this.page=pageNumber;}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  public LDAPConnectionException(LocalizableMessage message,int resultCode,LocalizableMessage errorMessage,DN matchedDN,Throwable cause){  super(message,cause);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  forwardToProperties(event);}  }
class C{  private void twoTasksLoadCallsToRepository(TasksDataSource.LoadTasksCallback callback){  mTasksRepository.getTasks(callback);  verify(mTasksLocalDataSource).getTasks(mTasksCallbackCaptor.capture());  mTasksCallbackCaptor.getValue().onDataNotAvailable();  verify(mTasksRemoteDataSource).getTasks(mTasksCallbackCaptor.capture());  mTasksCallbackCaptor.getValue().onTasksLoaded(TASKS);  mTasksRepository.getTasks(callback);}  }
class C{  private void changeSelection(int clearMin,int clearMax,int setMin,int setMax){  changeSelection(clearMin,clearMax,setMin,setMax,true);}  }
class C{  private LeftValueExpression(final String expression,final Class<T> expectedType) throws ExpressionException {  super(expression,expectedType,Bindings.bindings());}  }
class C{  public void resetProgressLogs(){  progressPanel.resetLogs();}  }
class C{  public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,String host) throws CertificateException {  return checkTrusted(chain,authType,host,false);}  }
class C{  public PhoneFieldParser(String phoneField){  lexer=new Lexer("charLexer",phoneField);}  }
class C{  private static void addCollationMatchingRule(final SchemaBuilder builder,final String baseOid,final List<String> names,final int numericSuffix,final String symbolicSuffix,final MatchingRuleImpl matchingRuleImplementation){  final String oid=symbolicSuffix.isEmpty() ? baseOid : baseOid + "." + numericSuffix;  builder.buildMatchingRule(oid).names(collationMatchingRuleNames(names,numericSuffix,symbolicSuffix)).syntaxOID(SYNTAX_DIRECTORY_STRING_OID).extraProperties(OPENDS_ORIGIN).implementation(matchingRuleImplementation).addToSchema();}  }
class C{  public static boolean isIP(String input){  String regex="(?:[0-9]{1,3}\\.){3}[0-9]{1,3}";  Pattern p=Pattern.compile(regex);  Matcher m=p.matcher(input);  String ss=input.replace(".","");  if (m.find() && isNumeric(ss) && (input.length() - ss.length() > 2)) {    return true;  }  return false;}  }
class C{  public static boolean not(Object a,Object b,@SuppressWarnings("unused") Class<?> callerClass) throws Throwable {  if (a == null && b == null)   return false;  if (a == null || b == null)   return true;  if (a == b || a.equals(b))   return false;  if (b instanceof Class)   if (((Class)b).isInstance(a))   return false;  return true;}  }
class C{  public void _read(InputStream input){  value=((org.omg.CORBA_2_3.portable.InputStream)input).read_value();}  }
class C{  @Deprecated public Handle(int tag,String owner,String name,String desc){  this(tag,owner,name,desc,tag == Opcodes.H_INVOKEINTERFACE);}  }
class C{  public InitialDirContext() throws NamingException {  super();}  }
class C{  public BasicTreeNode updateSelectionForCoordinates(int x,int y){  BasicTreeNode node=null;  if (mRootNode != null) {    MinAreaFindNodeListener listener=new MinAreaFindNodeListener();    boolean found=mRootNode.findLeafMostNodesAtPoint(x,y,listener);    if (found && listener.mNode != null && !listener.mNode.equals(mSelectedNode)) {      node=listener.mNode;    }  }  return node;}  }
class C{  protected String createNodeVersion(String nodeId) throws GroundException {  return this.factories.getNodeVersionFactory().create(new HashMap<>(),null,null,new HashMap<>(),nodeId,new ArrayList<>()).getId();}  }
class C{  private void updateEntryPane(){  ViewPositions pos=Utilities.getViewPositions(entryPane);  TreePath[] paths=treePane.getTree().getSelectionPaths();  TreePath path=null;  if (paths != null && paths.length == 1) {    path=paths[0];  }  lastEntryTreePath=path;  if (path != null) {    Object node=path.getLastPathComponent();    if (node instanceof StandardObjectClassTreeNode) {      entryPane.updateStandardObjectClass(((StandardObjectClassTreeNode)node).getObjectClass(),lastSchema);    } else     if (node instanceof ConfigurationObjectClassTreeNode) {      entryPane.updateConfigurationObjectClass(((ConfigurationObjectClassTreeNode)node).getObjectClass(),lastSchema);    } else     if (node instanceof CustomObjectClassTreeNode) {      entryPane.updateCustomObjectClass(((CustomObjectClassTreeNode)node).getObjectClass(),lastSchema);    } else     if (node instanceof StandardAttributeTreeNode) {      entryPane.updateStandardAttribute(((StandardAttributeTreeNode)node).getAttribute(),lastSchema);    } else     if (node instanceof ConfigurationAttributeTreeNode) {      entryPane.updateConfigurationAttribute(((ConfigurationAttributeTreeNode)node).getAttribute(),lastSchema);    } else     if (node instanceof CustomAttributeTreeNode) {      entryPane.updateCustomAttribute(((CustomAttributeTreeNode)node).getAttribute(),lastSchema);    } else     if (node instanceof MatchingRuleTreeNode) {      entryPane.updateMatchingRule(((MatchingRuleTreeNode)node).getMatchingRule(),lastSchema);    } else     if (node instanceof AttributeSyntaxTreeNode) {      entryPane.updateAttributeSyntax(((AttributeSyntaxTreeNode)node).getAttributeSyntax(),lastSchema);    } else {      entryPane.displayMessage(NO_SCHEMA_ITEM_SELECTED);    }  } else   if (paths != null && paths.length > 1) {    boolean categorySelected=false;    int nNonCategory=0;    for (    TreePath p : paths) {      Object node=p.getLastPathComponent();      if (node instanceof CategoryTreeNode) {        categorySelected=true;      } else {        nNonCategory++;      }    }    if (nNonCategory == 0) {      entryPane.displayMessage(NO_SCHEMA_ITEM_SELECTED);    } else     if (categorySelected) {      entryPane.displayMessage(INFO_CTRL_PANEL_CATEGORY_ITEM_SELECTED.get());    } else {      entryPane.displayMessage(INFO_CTRL_PANEL_MULTIPLE_SCHEMA_ITEMS_SELECTED.get());    }  } else {    entryPane.displayMessage(NO_SCHEMA_ITEM_SELECTED);  }  Utilities.updateViewPositions(pos);}  }
class C{  private SecurityOptions promptIfRequiredForSecurityData(UserData uData) throws UserDataException, ClientException {  boolean enableSSL=false;  boolean enableStartTLS=false;  int ldapsPort=-1;  final List<Integer> usedPorts=new LinkedList<>();  usedPorts.add(uData.getServerPort());  if (uData.getServerJMXPort() != -1) {    usedPorts.add(uData.getServerJMXPort());  }  if (!argParser.ldapsPortArg.isPresent()) {    println();    try {      final boolean defaultValue=lastResetEnableSSL != null ? lastResetEnableSSL : false;      enableSSL=confirmAction(INFO_INSTALLDS_PROMPT_ENABLE_SSL.get(),defaultValue);      if (enableSSL) {        ldapsPort=promptIfRequiredForPortData(argParser.ldapsPortArg,lastResetLdapsPort,INFO_INSTALLDS_PROMPT_LDAPSPORT.get(),usedPorts,false);      }    } catch (    final ClientException ce) {      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    }  } else {    ldapsPort=promptIfRequiredForPortData(argParser.ldapsPortArg,lastResetLdapsPort,INFO_INSTALLDS_PROMPT_LDAPSPORT.get(),usedPorts,true);    enableSSL=true;  }  if (!argParser.enableStartTLSArg.isPresent()) {    println();    try {      final boolean defaultValue=lastResetEnableStartTLS != null ? lastResetEnableStartTLS : false;      enableStartTLS=confirmAction(INFO_INSTALLDS_ENABLE_STARTTLS.get(),defaultValue);    } catch (    final ClientException ce) {      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    }  } else {    enableStartTLS=true;  }  SecurityOptions securityOptions;  if (argParser.generateSelfSignedCertificateArg.isPresent()) {    securityOptions=SecurityOptions.createSelfSignedCertificateOptions(enableSSL,enableStartTLS,ldapsPort);  } else   if (argParser.useJavaKeyStoreArg.isPresent()) {    securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.JKS,enableSSL,enableStartTLS,ldapsPort);  } else   if (argParser.useJCEKSArg.isPresent()) {    securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.JCEKS,enableSSL,enableStartTLS,ldapsPort);  } else   if (argParser.usePkcs12Arg.isPresent()) {    securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.PKCS12,enableSSL,enableStartTLS,ldapsPort);  } else   if (argParser.usePkcs11Arg.isPresent()) {    securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.PKCS11,enableSSL,enableStartTLS,ldapsPort);  } else   if (!enableSSL && !enableStartTLS) {    securityOptions=SecurityOptions.createNoCertificateOptions();  } else {    final int SELF_SIGNED=1;    final int JKS=2;    final int JCEKS=3;    final int PKCS12=4;    final int PKCS11=5;    final int[] indexes={SELF_SIGNED,JKS,JCEKS,PKCS12,PKCS11};    final LocalizableMessage[] msgs={INFO_INSTALLDS_CERT_OPTION_SELF_SIGNED.get(),INFO_INSTALLDS_CERT_OPTION_JKS.get(),INFO_INSTALLDS_CERT_OPTION_JCEKS.get(),INFO_INSTALLDS_CERT_OPTION_PKCS12.get(),INFO_INSTALLDS_CERT_OPTION_PKCS11.get()};    final MenuBuilder<Integer> builder=new MenuBuilder<>(this);    builder.setPrompt(INFO_INSTALLDS_HEADER_CERT_TYPE.get());    for (int i=0; i < indexes.length; i++) {      builder.addNumberedOption(msgs[i],MenuResult.success(indexes[i]));    }    if (lastResetCertType == null) {      builder.setDefault(LocalizableMessage.raw(String.valueOf(SELF_SIGNED)),MenuResult.success(SELF_SIGNED));    } else {switch (lastResetCertType) {case JKS:        builder.setDefault(LocalizableMessage.raw(String.valueOf(JKS)),MenuResult.success(JKS));      break;case JCEKS:    builder.setDefault(LocalizableMessage.raw(String.valueOf(JCEKS)),MenuResult.success(JCEKS));  break;case PKCS11:builder.setDefault(LocalizableMessage.raw(String.valueOf(PKCS11)),MenuResult.success(PKCS11));break;case PKCS12:builder.setDefault(LocalizableMessage.raw(String.valueOf(PKCS12)),MenuResult.success(PKCS12));break;default :builder.setDefault(LocalizableMessage.raw(String.valueOf(SELF_SIGNED)),MenuResult.success(SELF_SIGNED));}}final Menu<Integer> menu=builder.toMenu();int certType;try {final MenuResult<Integer> m=menu.run();if (m.isSuccess()) {certType=m.getValue();} else {throw new RuntimeException();}} catch (final ClientException ce) {logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));certType=SELF_SIGNED;}if (certType == SELF_SIGNED) {securityOptions=SecurityOptions.createSelfSignedCertificateOptions(enableSSL,enableStartTLS,ldapsPort);} else if (certType == JKS) {securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.JKS,enableSSL,enableStartTLS,ldapsPort);} else if (certType == JCEKS) {securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.JCEKS,enableSSL,enableStartTLS,ldapsPort);} else if (certType == PKCS12) {securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.PKCS12,enableSSL,enableStartTLS,ldapsPort);} else if (certType == PKCS11) {securityOptions=createSecurityOptionsPrompting(SecurityOptions.CertificateType.PKCS11,enableSSL,enableStartTLS,ldapsPort);} else {throw new IllegalStateException("Unexpected cert type: " + certType);}}return securityOptions;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnextsibling.class,args);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  public void waitForMonitor(){  while (!monitorDone) {    StaticUtils.sleep(10);  }}  }
class C{  public void incSAML1Cache(String assertOrArtifact,String rWHM){}  }
class C{  public BerInputStream(InputStream in,int initialSize) throws IOException {  this.in=in;  buffer=new byte[initialSize];  next();  if (length != INDEFINIT_LENGTH) {    if (buffer.length < (length + offset)) {      byte[] newBuffer=new byte[length + offset];      System.arraycopy(buffer,0,newBuffer,0,offset);      buffer=newBuffer;    }  } else {    isIndefinedLength=true;    throw new ASN1Exception("Decoding indefinite length encoding is not supported");  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public int next(int x){  int n=members.length;  for (int i=0; i < n; ++i) {    if (x < members[i][0]) {      return members[i][0];    } else     if (x < members[i][1]) {      return x + 1;    }  }  return -1;}  }
class C{  public boolean checkAuthentication(final HttpServletRequest request){  return DEFAULT_CHECKAUTHENTICATION;}  }
class C{  public void testConstrLongMathContext(){  long a=4576578677732546982L;  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="45766";  int resScale=-14;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  static void clear(){  federationCache.clear();  configCache.clear();}  }
class C{  public Schema readSchema() throws DirectoryException, ConfigException, InitializationException {  SchemaHandler schemaHandler=serverContext.getSchemaHandler();  final File schemaDir=schemaHandler.getSchemaDirectoryPath();  final List<String> fileNames=StaticUtils.getFileNames(SchemaUtils.getSchemaFiles(schemaDir));  Schema baseSchema=getBaseSchema();  SchemaBuilder schemaBuilder=new SchemaBuilder(baseSchema);  for (  String schemaFile : fileNames) {    schemaHandler.loadSchemaFileIntoSchemaBuilder(new File(schemaDir,schemaFile),schemaBuilder,baseSchema);  }  return buildSchema(schemaBuilder);}  }
class C{  public Iterator<Object> iterator(){  return components().iterator();}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  @Override public synchronized void write(byte[] b) throws IOException {  super.write(b);  this.branch.write(b);}  }
class C{  public static boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetFormat,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  public void refresh(){  RoutingBoard routing_board=board_frame.board_panel.itera_board.get_routing_board();  if (clearance_table_model.getRowCount() != routing_board.brd_rules.clearance_matrix.get_class_count()) {    adjust_clearance_table();  }  clearance_table_model.set_values(layer_combo_box.get_selected_layer().index);  repaint();}  }
class C{  static StringBuilder object2Groovy(StringBuilder b,Object o,boolean nestedExp) throws UnsupportedOperationException {  if (o == null) {    return b.append("null");  }  final Class<?> clazz=o.getClass();  if (clazz == String.class || clazz == Character.class) {    String text=String.valueOf(o);    if (text.contains("\n")) {      b.append("'''").append(text.replace("\\","\\\\").replace("'","\\'")).append("'''");    } else {      b.append('\'').append(text.replace("\\","\\\\").replace("'","\\'")).append('\'');    }    return b;  }  if (clazz == Boolean.class || clazz == Integer.class || clazz == Long.class) {    return b.append(o);  }  if (o instanceof List) {    return list2groovy(b,(List<?>)o);  }  if (o instanceof Map) {    return map2groovy(b,(Map)o);  }  if (o instanceof UninstantiatedDescribable) {    return ud2groovy(b,(UninstantiatedDescribable)o,false,nestedExp);  }  for (  StepDescriptor d : StepDescriptor.all()) {    if (d.clazz.equals(clazz)) {      Step step=(Step)o;      UninstantiatedDescribable uninst=d.uninstantiate(step);      boolean blockArgument=d.takesImplicitBlockArgument();      if (d.isMetaStep()) {        DescribableModel<?> m=new DescribableModel(d.clazz);        DescribableParameter p=m.getFirstRequiredParameter();        if (p != null) {          Object wrapped=uninst.getArguments().get(p.getName());          if (wrapped instanceof UninstantiatedDescribable) {            boolean failSimplification=false;            UninstantiatedDescribable nested=(UninstantiatedDescribable)wrapped;            TreeMap<String,Object> copy=new TreeMap<String,Object>(nested.getArguments());            for (            Entry<String,?> e : uninst.getArguments().entrySet()) {              if (!e.getKey().equals(p.getName())) {                if (copy.put(e.getKey(),e.getValue()) != null) {                  failSimplification=true;                }              }            }            if (!canUseMetaStep(nested))             failSimplification=true;            if (!failSimplification) {              UninstantiatedDescribable combined=new UninstantiatedDescribable(nested.getSymbol(),nested.getKlass(),copy);              combined.setModel(nested.getModel());              return ud2groovy(b,combined,blockArgument,nestedExp);            }          }        } else {          LOGGER.log(Level.WARNING,"Buggy meta-step " + d.clazz + " defines no mandatory parameter");        }      }      uninst.setSymbol(d.getFunctionName());      return functionCall(b,uninst,blockArgument,nestedExp);    }  }  return b.append("<object of type ").append(clazz.getCanonicalName()).append('>');}  }
class C{  private void deleteEntry(String dn) throws Exception {  DN realDN=DN.valueOf(dn);  DeleteOperation delOp=connection.processDelete(realDN);  waitOpResult(delOp,ResultCode.SUCCESS);  assertNull(DirectoryServer.getEntry(realDN));}  }
class C{  @Override public int compare(File o1,File o2){  if (o1 == o2) {    return 0;  }  if (o1.lastModified() > o2.lastModified()) {    return -1;  } else   if (o1.lastModified() < o2.lastModified()) {    return 1;  } else {    return 0;  }}  }
class C{  public MethodHandleValue(SMethodDef method,int mode,STypeDef type){  this.method=method;  this.mode=mode;  this.type=type;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  List names=(List)rc.getOption(AuthOptions.AUTH_INSTANCE_NAMES);  String[] params={realm,names.toString()};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_AUTH_INSTANCES",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,realm);    for (Iterator i=names.iterator(); i.hasNext(); ) {      String name=(String)i.next();      mgr.deleteAuthenticationInstance(name);    }    if (names.size() == 1) {      getOutputWriter().printlnMessage(getResourceString("authentication-delete-auth-instance-succeeded"));    } else {      getOutputWriter().printlnMessage(getResourceString("authentication-delete-auth-instances-succeeded"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_AUTH_INSTANCES",params);  } catch (  AMConfigurationException e) {    debugError("DeleteAuthInstances,handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AUTH_INSTANCES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public static String removeLinesByNumber(String filePath,int lineNum,int numLines){  String line=null;  boolean success=false;  try {    LineNumberReader reader=getLineNumReader(filePath);    StringWriter writer=new StringWriter();    if (lineNum > 1) {      reader=(LineNumberReader)copyTillLine(reader,writer,lineNum);    }    if (reader != null) {      if (numLines <= 0) {        numLines=1;      }      for (int i=0; i < numLines; i++) {        line=reader.readLine();      }      success=copyTillEnd(reader,writer);      if (!success) {        throw new Exception("ERROR: Failed to copy lines");      }      String tempFilePath=filePath + ".tmp";      success=writeToFile(tempFilePath,writer);      if (!success) {        throw new Exception("ERROR: Writing to File");      }      File tempFile=new File(tempFilePath);      if (tempFile.exists() && tempFile.isFile()) {        copyFile(tempFilePath,filePath);      }      tempFile.delete();    }  } catch (  Exception ex) {    Debug.log("FileUtils.removeLinesByNumber() threw exception : ",ex);  }  return line;}  }
class C{  @Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {  Foo foo=findByUUID_G(uuid,groupId);  return remove(foo);}  }
class C{  public boolean isTrustedProvider(String realm,String hostedEntityID,String entityID){  String classMethod="IDFFMetaManager:isTrustedProvider";  boolean isTrusted=false;  try {    SPDescriptorConfigElement spConfig=getSPDescriptorConfig(realm,entityID);    if (spConfig != null) {      isTrusted=isSameCircleOfTrust(spConfig,realm,entityID);    } else {      IDPDescriptorConfigElement idpConfig=getIDPDescriptorConfig(realm,entityID);      if (idpConfig != null) {        isTrusted=isSameCircleOfTrust(idpConfig,realm,entityID);      }    }  } catch (  IDFFMetaException ide) {    debug.error(classMethod + "Error retrieving trust relationship" + "between "+ hostedEntityID+ "with "+ entityID);  }  return isTrusted;}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  @DataProvider(name="certificateExactMatchingRules") public Object[][] createCertificateExactMatchingRuleTest(){  String validcert1="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV" + "BAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRpb25lMRwwGgYDVQQLExNQcm9kdWN0IERl" + "dmVsb3BtZW50MRQwEgYDVQQDEwtCYWJzIEplbnNlbjAeFw0xMjA1MDIxNjM0MzVa"+ "Fw0xMjEyMjExNjM0MzVaMFYxCzAJBgNVBAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRp"+ "b25lMRwwGgYDVQQLExNQcm9kdWN0IERldmVsb3BtZW50MRQwEgYDVQQDEwtCYWJz"+ "IEplbnNlbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApysa0c9qc8FB8gIJ"+ "8zAb1pbJ4HzC7iRlVGhRJjFORkGhyvU4P5o2wL0iz/uko6rL9/pFhIlIMbwbV8sm"+ "mKeNUPitwiKOjoFDmtimcZ4bx5UTAYLbbHMpEdwSpMC5iF2UioM7qdiwpAfZBd6Z"+ "69vqNxuUJ6tP+hxtr/aSgMH2i8ECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB"+ "hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE"+ "FLlZD3aKDa8jdhzoByOFMAJDs2osMB8GA1UdIwQYMBaAFLlZD3aKDa8jdhzoByOF"+ "MAJDs2osMA0GCSqGSIb3DQEBBQUAA4GBAE5vccY8Ydd7by2bbwiDKgQqVyoKrkUg"+ "6CD0WRmc2pBeYX2z94/PWO5L3Fx+eIZh2wTxScF+FdRWJzLbUaBuClrxuy0Y5ifj"+ "axuJ8LFNbZtsp1ldW3i84+F5+SYT+xI67ZcoAtwx/VFVI9s5I/Gkmu9f9nxjPpK7"+ "1AIUXiE3Qcck";  String incompleteCert="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV";  String assertion="{ serialNumber 13233831500277100508, issuer rdnSequence:\"" + "CN=Babs Jensen,OU=Product Development,L=Cupertione,C=US\" }";  String assertionWithSpaces="{    serialNumber     13233831500277100508,  issuer  rdnSequence:\"" + "CN=Babs Jensen,OU=Product Development, L=Cupertione,C=US\" }";  String assertionDNencoded="{ serialNumber 13233831500277100508, issuer rdnSequence:\"" + "cn=BABS Jensen,ou=Product Development,L=Cupertione,c=#5553\" }";  String assertionWrong="{ serialNumber 13233831511277100508, issuer rdnSequence:\"" + "CN=Babs Jensen,OU=Product Development,L=Cupertione,C=US\" }";  return new Object[][]{{ByteString.valueOfBase64(validcert1),ByteString.valueOfUtf8(assertion),ConditionResult.TRUE},{ByteString.valueOfBase64(validcert1),ByteString.valueOfUtf8(assertionWithSpaces),ConditionResult.TRUE},{ByteString.valueOfBase64(validcert1),ByteString.valueOfUtf8(assertionDNencoded),ConditionResult.TRUE},{ByteString.valueOfBase64(validcert1),ByteString.valueOfUtf8(assertionWrong),ConditionResult.FALSE},{ByteString.valueOfBase64(incompleteCert),ByteString.valueOfBase64(incompleteCert),ConditionResult.TRUE},{ByteString.valueOfBase64(validcert1),ByteString.valueOfBase64(validcert1),ConditionResult.TRUE}};}  }
class C{  public CryptoManagerImpl(ServerContext serverContext,CryptoManagerCfg config) throws ConfigException, InitializationException {  this.serverContext=serverContext;  if (!schemaInitDone) {    attrKeyID=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_KEY_ID);    attrPublicKeyCertificate=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_PUBLIC_KEY_CERTIFICATE);    attrTransformation=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_CIPHER_TRANSFORMATION_NAME);    attrMacAlgorithm=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_MAC_ALGORITHM_NAME);    attrSymmetricKey=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_SYMMETRIC_KEY);    attrInitVectorLength=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_INIT_VECTOR_LENGTH_BITS);    attrKeyLength=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_KEY_LENGTH_BITS);    attrCompromisedTime=DirectoryServer.getSchema().getAttributeType(ATTR_CRYPTO_KEY_COMPROMISED_TIME);    ocCertRequest=DirectoryServer.getSchema().getObjectClass("ds-cfg-self-signed-cert-request");    ocInstanceKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_INSTANCE_KEY);    ocCipherKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_CIPHER_KEY);    ocMacKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_MAC_KEY);    localTruststoreDN=DN.valueOf(DN_TRUST_STORE_ROOT);    DN adminSuffixDN=ADSContext.getAdministrationSuffixDN();    instanceKeysDN=adminSuffixDN.child(DN.valueOf("cn=instance keys"));    secretKeysDN=adminSuffixDN.child(DN.valueOf("cn=secret keys"));    serversDN=adminSuffixDN.child(DN.valueOf("cn=Servers"));    schemaInitDone=true;  }  List<LocalizableMessage> why=new LinkedList<>();  if (!isConfigurationChangeAcceptable(config,why)) {    throw new InitializationException(why.get(0));  }  applyConfigurationChange(config);  sslCertNicknames=config.getSSLCertNickname();  sslEncryption=config.isSSLEncryption();  sslProtocols=config.getSSLProtocol();  sslCipherSuites=config.getSSLCipherSuite();  config.addChangeListener(this);}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node childNode;  Node newChild;  Node memberNode;  String memberName;  java.util.List refreshedActual=new java.util.ArrayList();  java.util.List actual=new java.util.ArrayList();  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("em");  Node appendedChild;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  childNode=elementList.item(1);  childList=((Element)childNode).getElementsByTagName("*");  newChild=childList.item(0);  appendedChild=childNode.appendChild(newChild);  for (int indexN10085=0; indexN10085 < childList.getLength(); indexN10085++) {    memberNode=(Node)childList.item(indexN10085);    memberName=memberNode.getNodeName();    actual.add(memberName);  }  assertEqualsAutoCase("element","liveByTagName",expected,actual);  childList=childNode.getChildNodes();  for (int indexN1009C=0; indexN1009C < childList.getLength(); indexN1009C++) {    memberNode=(Node)childList.item(indexN1009C);    nodeType=(int)memberNode.getNodeType();    if (equals(1,nodeType)) {      memberName=memberNode.getNodeName();      refreshedActual.add(memberName);    }  }  assertEqualsAutoCase("element","refreshedChildNodes",expected,refreshedActual);}  }
class C{  public void testmodInverseNeg1(){  byte aBytes[]={15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={2,122,45,36,100};  int aSign=-1;  int mSign=1;  byte rBytes[]={0,-41,4,-91,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static boolean isTargAttrFiltersApplicable(Aci aci,AciTargetMatchContext matchCtx){  TargAttrFilters targAttrFilters=aci.getTargets().getTargAttrFilters();  if (targAttrFilters != null) {    if ((matchCtx.hasRights(ACI_ADD) && targAttrFilters.hasMask(TARGATTRFILTERS_ADD)) || (matchCtx.hasRights(ACI_DELETE) && targAttrFilters.hasMask(TARGATTRFILTERS_DELETE))) {      return targAttrFilters.isApplicableAddDel(matchCtx);    } else     if ((matchCtx.hasRights(ACI_WRITE_ADD) && targAttrFilters.hasMask(TARGATTRFILTERS_ADD)) || (matchCtx.hasRights(ACI_WRITE_DELETE) && targAttrFilters.hasMask(TARGATTRFILTERS_DELETE))) {      return targAttrFilters.isApplicableMod(matchCtx,aci);    }  }  return true;}  }
class C{  @NonNull public final Closeable consume(){  EmptyUpdatable u=new EmptyUpdatable(this);  addUpdatable(u);  return u;}  }
class C{  public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult res=FALSE;  List<PermBindRulePair> pairs=getPermBindRulePairs();  for (  PermBindRulePair p : pairs) {    if (evalCtx.isDenyEval() && p.hasAccessType(EnumAccessType.ALLOW)) {      continue;    }    if (!p.hasRights(getEvalRights(evalCtx))) {      continue;    }    res=p.getBindRule().evaluate(evalCtx);    if (res != TRUE && res != FALSE) {      res=FAIL;      break;    } else     if (p.hasAccessType(EnumAccessType.DENY) && res == TRUE) {      res=TRUE;      break;    } else     if (p.hasAccessType(EnumAccessType.ALLOW) && res == TRUE) {      res=TRUE;      break;    }  }  return res;}  }
class C{  public int length(){  return n;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public ApplicationTrustManager createCopy(){  ApplicationTrustManager copy=new ApplicationTrustManager(keystore);  copy.lastRefusedAuthType=lastRefusedAuthType;  copy.lastRefusedChain=lastRefusedChain;  copy.lastRefusedCause=lastRefusedCause;  copy.acceptedChains.addAll(acceptedChains);  copy.acceptedAuthTypes.addAll(acceptedAuthTypes);  copy.acceptedHosts.addAll(acceptedHosts);  copy.host=host;  return copy;}  }
class C{  public PrintEvent(Object source){  super(source);}  }
class C{  public Cursor fetch(Long ruleID){  if (ruleID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEID + "=" + ruleID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new SynthTextAreaUI();}  }
class C{  public byte[] writeByteArray(){  int size=getSize();  byte[] arr;  if (size == 0) {    arr=new byte[0];  } else {    long temp=ID3Tags.getWholeNumber(value);    arr=new byte[size];    for (int i=size - 1; i >= 0; i--) {      arr[i]=(byte)(temp & 0xFF);      temp>>=8;    }  }  return arr;}  }
class C{  @Override public void init(int mode,Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  Utils.checkNotNull(key);  Utils.checkNotNull(params);  int cipherMode=OpenSslNativeJna.OOSL_JNA_DECRYPT_MODE;  if (mode == Cipher.ENCRYPT_MODE) {    cipherMode=OpenSslNativeJna.OOSL_JNA_ENCRYPT_MODE;  }  byte[] iv;  if (params instanceof IvParameterSpec) {    iv=((IvParameterSpec)params).getIV();  } else {    throw new InvalidAlgorithmParameterException("Illegal parameters");  }  if (algMode == AlgorithmMode.AES_CBC) {switch (key.getEncoded().length) {case 16:      algo=OpenSslNativeJna.EVP_aes_128_cbc();    break;case 24:  algo=OpenSslNativeJna.EVP_aes_192_cbc();break;case 32:algo=OpenSslNativeJna.EVP_aes_256_cbc();break;default :throw new InvalidKeyException("keysize unsupported (" + key.getEncoded().length + ")");}} else {switch (key.getEncoded().length) {case 16:algo=OpenSslNativeJna.EVP_aes_128_ctr();break;case 24:algo=OpenSslNativeJna.EVP_aes_192_ctr();break;case 32:algo=OpenSslNativeJna.EVP_aes_256_ctr();break;default :throw new InvalidKeyException("keysize unsupported (" + key.getEncoded().length + ")");}}int retVal=OpenSslNativeJna.EVP_CipherInit_ex(context,algo,null,key.getEncoded(),iv,cipherMode);throwOnError(retVal);OpenSslNativeJna.EVP_CIPHER_CTX_set_padding(context,padding);}  }
class C{  private void endSpanTag() throws IOException {  write(NEWLINE);  writeEndTag("</span>");  fontAttributes=null;}  }
class C{  public long skip(long n) throws IOException {  byte[] buf=new byte[512];  long total=0;  while (total < n) {    long len=n - total;    len=read(buf,0,len < buf.length ? (int)len : buf.length);    if (len == -1) {      return total;    }    total+=len;  }  return total;}  }
class C{  public void addConfiguredRedirector(RedirectorElement redirectorElement){  if (this.redirectorElement != null) {    throw new BuildException("Cannot have > 1 nested <redirector>s");  } else {    this.redirectorElement=redirectorElement;  }}  }
class C{  public boolean isDone(){  return index > 5;}  }
class C{  public Leaves(){  this(DEFAULT_TYPE,DEFAULT_SPECIES,DEFAULT_DECAYABLE);}  }
class C{  private void checkIsCorrectClass(){  if (checkIsSubClass(ACT_NAME)) {    type=ElementType.ACTTIVITY;  } else   if (checkIsSubClass(FRAG_NAME) || checkIsSubClass(V4_FRAG_NAME)) {    type=ElementType.FRAGMENT;  } else {    throw new IllegalArgumentException(String.format("class %s must be extends from %s or %s or %s",element.getQualifiedName(),ACT_NAME,FRAG_NAME,V4_FRAG_NAME));  }}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl,boolean act) throws HeadlessException {  this(c,ops,dtl,act,null);}  }
class C{  private synchronized void close(boolean rename){  if (writer == null) {    return;  }  writer.flush();  writer.close();  if (rename && renameOnRotate) {    File newLogFile=getLogFile(true);    if (!newLogFile.exists()) {      try {        if (!currentLogFile.renameTo(newLogFile)) {          log.error(sm.getString("accessLogValve.renameFail",currentLogFile,newLogFile));        }      } catch (      Throwable e) {        ExceptionUtils.handleThrowable(e);        log.error(sm.getString("accessLogValve.renameFail",currentLogFile,newLogFile),e);      }    } else {      log.error(sm.getString("accessLogValve.alreadyExists",currentLogFile,newLogFile));    }  }  writer=null;  dateStamp="";  currentLogFile=null;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField gfields=in.readFields();  @SuppressWarnings("unchecked") Hashtable<String,Permission> permissions=(Hashtable<String,Permission>)gfields.get("permissions",null);  perms=new HashMap<String,Permission>(permissions.size() * 2);  perms.putAll(permissions);  all_allowed=gfields.get("all_allowed",false);  permClass=(Class<?>)gfields.get("permClass",null);  if (permClass == null) {    Enumeration<Permission> e=permissions.elements();    if (e.hasMoreElements()) {      Permission p=e.nextElement();      permClass=p.getClass();    }  }}  }
class C{  public static byte[] decode(final String s){  return decode(s.toCharArray());}  }
class C{  private static Entry createAddMsg(final DN baseDN,final long changeNumber,final String cookie,final UpdateMsg msg) throws DirectoryException {  final AddMsg addMsg=(AddMsg)msg;  String changeInitiatorsName=null;  String ldifChanges=null;  try {    final StringBuilder builder=new StringBuilder(256);    for (    Attribute attr : addMsg.getAttributes()) {      if (!attr.isEmpty() && attr.getAttributeDescription().getAttributeType().equals(getCreatorsNameAttributeType())) {        changeInitiatorsName=attr.iterator().next().toString();      }      for (      ByteString value : attr) {        builder.append(attr.getAttributeDescription());        appendLDIFSeparatorAndValue(builder,value);        builder.append('\n');      }    }    ldifChanges=builder.toString();  } catch (  Exception e) {    logEncodingMessageError("add",addMsg.getDN(),e);  }  return createChangelogEntry(baseDN,changeNumber,cookie,addMsg,ldifChanges,"add",changeInitiatorsName);}  }
class C{  public void testNegPosFirstLonger(){  String numA="-2837462783428374767845648748973847593874837948575684767";  String numB="293478573489347658763745839457637";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public INVALID_ACTIVITY(){  this("");}  }
class C{  private void checkDSSentAndAcked(FakeReplicationDomain fakeRd,int nPacket){  fakeRd.newSafeReadAssertions().sentUpdates(nPacket).acknowledgedUpdates(nPacket).runAsserts();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthFormattedTextFieldUI();}  }
class C{  public StyleSheet(){  super();  selectorMapping=new SelectorMapping(0);  resolvedStyles=new Hashtable<String,ResolvedStyle>();  if (css == null) {    css=new CSS();  }}  }
class C{  public static void fill(byte[] a,int fromIndex,int toIndex,byte val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public static boolean binaryDataIsGifFormat(byte[] data){  if (data.length < 3) {    return false;  }  return (0x47 == (data[0] & 0xff)) && (0x49 == (data[1] & 0xff)) && (0x46 == (data[2] & 0xff));}  }
class C{  @Deprecated protected void removeListeners(){  if (propertyChangeListener != null) {    comboBox.removePropertyChangeListener(propertyChangeListener);  }}  }
class C{  public synchronized boolean containsKey(Object key){  Entry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      return true;    }  }  return false;}  }
class C{  protected final void copyTextNode(final int nodeID,SerializationHandler handler) throws SAXException {  if (nodeID != DTM.NULL) {    int dataIndex=m_dataOrQName.elementAt(nodeID);    if (dataIndex >= 0) {      m_chars.sendSAXcharacters(handler,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      m_chars.sendSAXcharacters(handler,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  }}  }
class C{  protected TreePath(Object[] path,int length){  lastPathComponent=path[length - 1];  if (length > 1)   parentPath=new TreePath(path,length - 1);}  }
class C{  public void invalidateTokens(OAuth2Request request,String clientId,String userName,String authGrantId) throws ServerException, NotFoundException {  String realm=realmResolver.resolveFrom(request);  QueryFilter<CoreTokenField> allTokensQuery=and(equalTo(USERNAME_FIELD,userName),equalTo(CLIENT_ID_FIELD,clientId),equalTo(GRANT_ID_FIELD,authGrantId));  JsonValue tokens=tokenStore.queryForToken(realm,allTokensQuery);  for (  JsonValue token : tokens) {    tokenStore.delete(realm,getAttributeValue(token,ID));  }}  }
class C{  @Override public Foo createFoo(long fooId){  return fooPersistence.create(fooId);}  }
class C{  protected static AttrSet mapToAttrSet(Map map,boolean byteValues){  AttrSet attrSet=new AttrSet();  if (map == null) {    return attrSet;  }  if (!byteValues) {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(String)(itr.next());      Set set=(Set)(map.get(attrName));      String attrValues[]=(set == null ? null : (String[])set.toArray(new String[set.size()]));      attrSet.replace(new Attr(attrName,attrValues));    }  } else {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(String)(itr.next());      byte[][] attrValues=(byte[][])(map.get(attrName));      attrSet.replace(new Attr(attrName,attrValues));    }  }  return attrSet;}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(1000);  sb.append("<Query xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(">");  if (resourceID != null) {    sb.append(resourceID.toString());  } else   if (encryptResID != null) {    sb.append(encryptResID.toString());  }  if ((requestedService != null) && !requestedService.isEmpty()) {    Iterator iter=requestedService.iterator();    while (iter.hasNext()) {      sb.append(((RequestedService)iter.next()).toString());    }  }  sb.append("</Query>");  return sb.toString();}  }
class C{  PooledConnectionImpl(final Connection connection){  this.connection=connection;  if (connection instanceof DelegatingConnection) {    this.delegatingConnection=(DelegatingConnection<?>)connection;  } else {    this.delegatingConnection=new DelegatingConnection<>(connection);  }  eventListeners=new Vector<>();  isClosed=false;}  }
class C{  private JsonValue invokeRecon(String mappingName) throws Exception {  System.out.println("1. Invoke recon on openidm");  HttpResponse<String> response=Unirest.post(idmEndpoint + "/recon?_action=recon&mapping=" + mappingName+ "&waitForCompletion=true").header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").asString();  return json(readJson(response.getBody()));}  }
class C{  public static NamingRequest parseXML(String xml){  NamingRequestParser parser=new NamingRequestParser(xml);  return parser.parseXML();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public boolean checkIfReloadConfig() throws Exception {  File cfgFile;  try {    cfgFile=new File(FileUtils.getFullPath(xmlFilePath));  } catch (  Exception e) {    if (this.debug) {      throw e;    }    return false;  }  return (cfgFile.lastModified() > this.lastCfgModificationDate);}  }
class C{  ProxyPolicyEvaluator(SSOToken token,String serviceType) throws NoPermissionException, NameNotFoundException, PolicyException, SSOException {  SSOTokenManager.getInstance().validateToken(token);  this.adminToken=token;  this.serviceType=serviceType;  this.policyEvaluator=PolicyEvaluatorFactory.getInstance().getPolicyEvaluator(token,serviceType);}  }
class C{  public int undo(UndoOwner[] owners,int count){  if (mWorking != null) {    throw new IllegalStateException("Can't be called during an update");  }  int num=0;  int i=-1;  mInUndo=true;  UndoState us=getTopUndo(null);  if (us != null) {    us.makeExecuted();  }  while (count > 0 && (i=findPrevState(mUndos,owners,i)) >= 0) {    UndoState state=mUndos.remove(i);    mRedos.add(state);    state.undo();    count--;    num++;  }  mInUndo=false;  return num;}  }
class C{  private int divadd(int[] a,int[] result,int offset){  long carry=0;  for (int j=a.length - 1; j >= 0; j--) {    long sum=(a[j] & LONG_MASK) + (result[j + offset] & LONG_MASK) + carry;    result[j + offset]=(int)sum;    carry=sum >>> 32;  }  return (int)carry;}  }
class C{  public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("invalid.character.in.base64.data");    }  }}  }
class C{  private void saveFilterRuleNode(long ruleID,long parentRuleNodeID,RuleNode node){  ModelRuleFilter filter=(ModelRuleFilter)node.getItem();  long ruleFilterID=ruleFilterDbAdapter.insert(ruleID,filter.getModelFilter().getAttribute().getDatabaseId(),-1L,filter.getModelFilter().getDatabaseId(),parentRuleNodeID,filter.getData().toString());  for (  RuleNode filterNode : node.getChildren()) {    saveFilterRuleNode(ruleID,ruleFilterID,filterNode);  }}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  @Override public void put(String name,Object value){  emulatedFields.put(name,value);}  }
class C{  public void appendCell(Object value){  if (height == 0) {    startRow();  }  String s=String.valueOf(value);  rows.get(height - 1).add(s);  column++;  if (column > width) {    width=column;    columnWidths.add(s.length());  } else   if (columnWidths.get(column - 1) < s.length()) {    columnWidths.set(column - 1,s.length());  }}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  public boolean encryptAttributes(){  return encryptAttributes;}  }
class C{  public int size(){  return list.size();}  }
class C{  SelfIteratorNoPredicate(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);}  }
class C{  public void addPopupMenuListener(PopupMenuListener l){  listenerList.add(PopupMenuListener.class,l);}  }
class C{  @Override public boolean authenticate(Callback[] credentials) throws IdRepoException, AuthLoginException {  if (DEBUG.messageEnabled()) {    DEBUG.message("authenticate invoked");  }  String userName=null;  char[] password=null;  for (  Callback callback : credentials) {    if (callback instanceof NameCallback) {      userName=((NameCallback)callback).getName();    } else     if (callback instanceof PasswordCallback) {      password=((PasswordCallback)callback).getPassword();    }  }  if (userName == null || password == null) {    throw newIdRepoException(IdRepoErrorCode.UNABLE_TO_AUTHENTICATE,CLASS_NAME);  }  String dn=findDNForAuth(IdType.USER,userName);  Connection conn=null;  try {    BindRequest bindRequest=LDAPRequests.newSimpleBindRequest(dn,password);    conn=createBindConnection();    BindResult bindResult=conn.bind(bindRequest);    return bindResult.isSuccess();  } catch (  LdapException ere) {    ResultCode resultCode=ere.getResult().getResultCode();    if (DEBUG.messageEnabled()) {      DEBUG.message("An error occurred while trying to authenticate a user: " + ere.toString());    }    if (resultCode.equals(ResultCode.INVALID_CREDENTIALS)) {      throw new InvalidPasswordException(AM_AUTH,"InvalidUP",null,userName,null);    } else     if (resultCode.equals(ResultCode.UNWILLING_TO_PERFORM) || resultCode.equals(ResultCode.CONSTRAINT_VIOLATION)) {      throw new AuthLoginException(AM_AUTH,"FAuth",null);    } else     if (resultCode.equals(ResultCode.INAPPROPRIATE_AUTHENTICATION)) {      throw new AuthLoginException(AM_AUTH,"InappAuth",null);    } else {      throw new AuthLoginException(AM_AUTH,"LDAPex",null);    }  } finally {    IOUtils.closeIfNotNull(conn);  }}  }
class C{  public TableModelEvent(TableModel source,int row){  this(source,row,row,ALL_COLUMNS,UPDATE);}  }
class C{  public boolean isNamespaceNode(Node n){  if (Node.ATTRIBUTE_NODE == n.getNodeType()) {    String attrName=n.getNodeName();    return (attrName.startsWith("xmlns:") || attrName.equals("xmlns"));  }  return false;}  }
class C{  public R visitIPAddress(IPAddressPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public void testAddEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.231212478987483735663238072829245553129371991359555E+61";  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  JwtSessionMapper(@Nonnull JwtSessionMapperBuilder builder){  this.jwsAlgorithm=builder.jwsAlgorithm;  this.signingHandler=builder.signingHandler;  this.verificationHandler=builder.verificationHandler;  this.encryptionKey=builder.encryptionKey;  this.decryptionKey=builder.decryptionKey;  this.jweAlgorithm=builder.jweAlgorithm;  this.encryptionMethod=builder.encryptionMethod;  this.compressionAlgorithm=builder.compressionAlgorithm;}  }
class C{  public void button_released(){  if (interactive_state != null) {    StateInteractive return_state=interactive_state.button_released();    if (return_state != interactive_state) {      set_interactive_state(return_state);      repaint();    }  }}  }
class C{  public boolean isShiftClick(){  return click.isShiftClick();}  }
class C{  private void putAttributes(AttributeType attrType,List<Attribute> attributes){  getUserOrOperationalAttributes(attrType).put(attrType,attributes);}  }
class C{  public void dispose(){  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows)   cur_subwindow.dispose();  permanent_subwindows.clear();  for (  GuiSubWindowTemp curr_subwindow : temporary_subwindows)   curr_subwindow.board_frame_disposed();  temporary_subwindows.clear();  board_panel.itera_board.dispose();  work_frame.dispose();}  }
class C{  @Override protected boolean isIgnoredProfile(String realm){  return SAML2PluginsUtils.isIgnoredProfile(realm);}  }
class C{  public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  public void poll(final SoftnetStatsHandler softnetStatsHandler){  this.softnetStatsHandler=softnetStatsHandler;  try {    fileLoader.load();    final ByteBuffer buffer=fileLoader.getBuffer();    cpuId=0;    lineParser.reset();    lineParser.handleToken(buffer,buffer.position(),buffer.limit());  }  finally {    this.softnetStatsHandler=null;  }}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  @Inject public OAuth2AuditLogger(){  init();  SystemProperties.observe(this,Constants.AM_LOGSTATUS);}  }
class C{  private void verifyPassword(){  Transaction transaction=new Transaction("user",1,new SecureRandom().nextLong());  if (!mStoreBackend.verify(transaction,mPassword.getText().toString())) {    return;  }  if (mStage == Stage.NEW_FINGERPRINT_ENROLLED) {    SharedPreferences.Editor editor=mSharedPreferences.edit();    editor.putBoolean(getString(R.string.use_fingerprint_to_authenticate_key),mUseFingerprintFutureCheckBox.isChecked());    editor.apply();    if (mUseFingerprintFutureCheckBox.isChecked()) {      mActivity.createKeyPair();      mStage=Stage.FINGERPRINT;    }  }  mPassword.setText("");  mActivity.onPurchased(null);  dismiss();}  }
class C{  private void restore(){  Frame frame=getFrame();  if (frame == null) {    return;  }  if ((state & Frame.ICONIFIED) != 0) {    frame.setExtendedState(state & ~Frame.ICONIFIED);  } else {    frame.setExtendedState(state & ~Frame.MAXIMIZED_BOTH);  }}  }
class C{  public void testSubtractDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="-7472334291698975400195996883915836900189542365.218615243205013";  int cScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public CallbackNumberAttribute(String callbackNumber){  super(OctetUtils.toOctets(AttributeType.CALLBACK_NUMBER,callbackNumber));  this.str=callbackNumber;}  }
class C{  public void removeEmptyValues(){  Set emptyKeys=new HashSet();  if (!byteValues) {    Iterator itr=keySet().iterator();    while (itr.hasNext()) {      String name=(String)itr.next();      Set values=(Set)get(name);      if (values.isEmpty()) {        emptyKeys.add(name);      }    }    removeKeys(emptyKeys);  }  clearNegativeByteAttrs();}  }
class C{  public static boolean matchResources(Set<String> resources,ResourceType resourceType,ResourceName resourceComparator){  for (  String resource : resources) {    if (matchResource(resource,resourceType,resourceComparator)) {      return true;    }  }  return false;}  }
class C{  public void zoom_region(){  interactive_state=new StateSelectRegionZoom(interactive_state,this,actlog,null);}  }
class C{  private int decodeSize(byte[] buffer){  BigInteger bi=new BigInteger(buffer);  int tmpSize=bi.intValue();  if (tmpSize < 0) {    logger.warning("Invalid Frame Size of:" + tmpSize + "Decoded from bin:"+ Integer.toBinaryString(tmpSize)+ "Decoded from hex:"+ Integer.toHexString(tmpSize));  }  return tmpSize;}  }
class C{  private void removeCookiesForRedirects(final HttpServletRequest request,final HttpServletResponse response){  final Set<String> domains=AuthClientUtils.getCookieDomainsForRequest(request);  for (  String domain : domains) {    CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(Constants.AM_LOCATION_COOKIE,"",0,"/",domain));  }}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(getSearchFilter(AMObject.USER),searchControl,avfilter);}  }
class C{  public XMLDocument(File file) throws Exception {  setDocumentFile(file);  setParser(new XMLParser());  initDocument(file);}  }
class C{  public SAMLRequestVersionTooHighException(Throwable t){  super(t);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ProcessingContextElement createProcessingContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProcessingContextElementImpl();}  }
class C{  public void debugError(String message,Exception e){  debug.error(message,e);}  }
class C{  protected void validateRequirements(){  requireBinding(IServer.class);  requireBinding(parameterizeWithContextInterfaces(IRouter.class));  requireBinding(Key.get(new TypeLiteral<IRouter<?,?>>(){  }));  requireBinding(parameterizeWithContextInterfaces(IRouteBuilderFactory.class));  requireBinding(parameterizeWithRequestContext(IStaticResourceFactory.class));  requireBinding(parameterizeWithContextInterfaces(IRedirectRuleBuilderFactory.class));  requireBinding(parameterizeWithContextInterfaces(IWebsocketRouteBuilderFactory.class));  requireBinding(IETagFactory.class);  requireBinding(ITemplatingEngine.class);  requireBinding(IJsonManager.class);  requireBinding(IXmlManager.class);  requireBinding(ISpincastConfig.class);  requireBinding(ISpincastDictionary.class);  requireBinding(ICookieFactory.class);  requireBinding(ILocaleResolver.class);  requireBinding(parameterizeWithRequestContext(IRequestRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(IResponseRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(IRoutingRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(ICookiesRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(ITemplatingRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(IVariablesRequestContextAddon.class));  requireBinding(parameterizeWithRequestContext(ICacheHeadersRequestContextAddon.class));}  }
class C{  public String byteStringNoComma(){  StringBuilder retval=new StringBuilder();  try {    while (true) {      char next=lookAhead(0);      if (next == '\n' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {  }  return retval.toString();}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public Builder names(final String... names){  return names(asList(names));}  }
class C{  public static int resetPostOperationCount(){  return postOperationCounter.getAndSet(0);}  }
class C{  public CertificateException(String msg){  super(msg);}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  super.layoutMajorAxis(targetSpan,axis,offsets,spans);  int used=0;  int n=spans.length;  for (int i=0; i < n; i++) {    used+=spans[i];  }  int adjust=0;  if (used < targetSpan) {    String valign=(String)getElement().getAttributes().getAttribute(HTML.Attribute.VALIGN);    if (valign == null) {      AttributeSet rowAttr=getElement().getParentElement().getAttributes();      valign=(String)rowAttr.getAttribute(HTML.Attribute.VALIGN);    }    if ((valign == null) || valign.equals("middle")) {      adjust=(targetSpan - used) / 2;    } else     if (valign.equals("bottom")) {      adjust=targetSpan - used;    }  }  if (adjust != 0) {    for (int i=0; i < n; i++) {      offsets[i]+=adjust;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvalue.class,args);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return _fooLocalService.createFoo(fooId);}  }
class C{  public static ItemListener remove(ItemListener l,ItemListener oldl){  return (ItemListener)removeInternal(l,oldl);}  }
class C{  public void reset(){  events.clear();}  }
class C{  public static int dpToPixel(Context context,int dp){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return dp < 0 ? dp : Math.round(dp * displayMetrics.density);}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Number) {    result=new XNumber(((Number)val));  } else   if (val instanceof DTM) {    DTM dtm=(DTM)val;    try {      int dtmRoot=dtm.getDocument();      DTMAxisIterator iter=dtm.getAxisIterator(Axis.SELF);      iter.setStartNode(dtmRoot);      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(dtmRoot,xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMAxisIterator) {    DTMAxisIterator iter=(DTMAxisIterator)val;    try {      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(iter.getStartNode(),xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMIterator) {    result=new XNodeSet((DTMIterator)val);  } else   if (val instanceof org.w3c.dom.Node) {    result=new XNodeSetForDOM((org.w3c.dom.Node)val,xctxt);  } else   if (val instanceof org.w3c.dom.NodeList) {    result=new XNodeSetForDOM((org.w3c.dom.NodeList)val,xctxt);  } else   if (val instanceof org.w3c.dom.traversal.NodeIterator) {    result=new XNodeSetForDOM((org.w3c.dom.traversal.NodeIterator)val,xctxt);  } else {    result=new XObject(val);  }  return result;}  }
class C{  public WriterException(){  super();}  }
class C{  public final void stopIdleThreads(){synchronized (idleThreadList) {    while (tail >= 0) {      IPSThread idleThread=idleThreadList[tail];      idleThreadList[tail--]=null;      idleThread.stop();    }  }}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String nullNS=null;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setAttributeNS(nullNS,"dom:root","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens05",success);  }}  }
class C{  protected MultistepExprHolder createMultistepExprList(Vector paths){  MultistepExprHolder first=null;  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner eo=(ExpressionOwner)paths.elementAt(i);    if (null == eo)     continue;    LocPathIterator lpi=(LocPathIterator)eo.getExpression();    int numPaths=countSteps(lpi);    if (numPaths > 1) {      if (null == first)       first=new MultistepExprHolder(eo,numPaths,null); else       first=first.addInSortedOrder(eo,numPaths);    }  }  if ((null == first) || (first.getLength() <= 1))   return null; else   return first;}  }
class C{  private void deleteBaseDNs(ConnectionWrapper connWrapper,Set<BaseDNDescriptor> baseDNs) throws Exception {  RootCfgClient root=connWrapper.getRootConfiguration();  PluggableBackendCfgClient backend=(PluggableBackendCfgClient)root.getBackend(baseDNs.iterator().next().getBackend().getBackendID());  SortedSet<DN> oldBaseDNs=backend.getBaseDN();  SortedSet<DN> newBaseDNs=new TreeSet<>(oldBaseDNs);  ArrayList<DN> dnsToRemove=new ArrayList<>();  for (  BaseDNDescriptor baseDN : baseDNs) {    dnsToRemove.add(baseDN.getDn());  }  newBaseDNs.removeAll(dnsToRemove);  backend.setBaseDN(newBaseDNs);  backend.commit();}  }
class C{  private void drawUnderlyingViews(){  if (windowBackground != null) {    windowBackground.draw(internalCanvas);  }  rootView.draw(internalCanvas);}  }
class C{  public boolean hasValidSize(){  return (preferredHeight != 0);}  }
class C{  public List<CollectEntity> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<CollectEntity> list=new ArrayList<CollectEntity>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  private void removeWaiter(WaitNode node){  if (node != null) {    node.thread=null;    retry:     for (; ; ) {      for (WaitNode pred=null, q=waiters, s; q != null; q=s) {        s=q.next;        if (q.thread != null)         pred=q; else         if (pred != null) {          pred.next=s;          if (pred.thread == null)           continue retry;        } else         if (!UNSAFE.compareAndSwapObject(this,waitersOffset,q,s))         continue retry;      }      break;    }  }}  }
class C{  public void add(RefAddr addr){  addrs.addElement(addr);}  }
class C{  public void testDoubleValuePositive2(){  String a="2746723894572364578265426346273456972";  double result=2.7467238945723645E36;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public void addAll(ResourceSearchIndexes other){  this.hostIndexes.addAll(other.hostIndexes);  this.pathIndexes.addAll(other.pathIndexes);  this.parentPathIndexes.addAll(other.parentPathIndexes);}  }
class C{  public static IOFileFilter asFileFilter(FileFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public void put(Object key,Action action){  if (key == null) {    return;  }  if (action == null) {    remove(key);  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    arrayTable.put(key,action);  }}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  public Locator2Impl(){}  }
class C{  public void clear(){  m.clear();}  }
class C{  private static void processProxyAuthControls(Operation operation,String oid) throws DirectoryException {  final Entry authorizationEntry;  if (OID_PROXIED_AUTH_V1.equals(oid)) {    final ProxiedAuthV1Control proxyControlV1=operation.getRequestControl(ProxiedAuthV1Control.DECODER);    operation.addAdditionalLogItem(AdditionalLogItem.keyOnly(operation.getClass(),"obsoleteProxiedAuthzV1Control"));    checkPrivilegeForProxyAuthControl(operation);    authorizationEntry=proxyControlV1.getAuthorizationEntry();  } else   if (OID_PROXIED_AUTH_V2.equals(oid)) {    final ProxiedAuthV2Control proxyControlV2=operation.getRequestControl(ProxiedAuthV2Control.DECODER);    checkPrivilegeForProxyAuthControl(operation);    authorizationEntry=proxyControlV2.getAuthorizationEntry();  } else {    return;  }  checkAciForProxyAuthControl(operation,authorizationEntry);  operation.setAuthorizationEntry(authorizationEntry);  operation.setProxiedAuthorizationDN(authorizationEntry != null ? authorizationEntry.getName() : DN.rootDN());}  }
class C{  public int hashCode(){  if (this == POINT_INFINITY)   return 0;  return x.hashCode() << 5 + y.hashCode();}  }
class C{  private static boolean equalURL(String url1,String url2){  try {    URL u1=new URL(url1);    URL u2=new URL(url2);    int port1=u1.getPort();    if (port1 == -1) {      port1=u1.getDefaultPort();    }    int port2=u2.getPort();    if (port2 == -1) {      port2=u2.getDefaultPort();    }    if ((u1.getProtocol().equalsIgnoreCase(u2.getProtocol())) && (u1.getHost().equalsIgnoreCase(u2.getHost())) && (port1 == port2)&& (u1.getPath().equalsIgnoreCase(u2.getPath()))) {      return true;    } else {      return false;    }  } catch (  MalformedURLException m) {    debug.message("Error in SAMLUtils.equalURL",m);    return false;  }}  }
class C{  private void redoTheLayout(){  if (treeState != null) {    treeState.invalidateSizes();  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LOElement createLOElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LOElementImpl();}  }
class C{  void processDropActionChanged(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dropActionChanged(dsde);  }}  }
class C{  public boolean isAccessibleSelected(int r,int c){  return false;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if ((obj == null) || (obj.getClass() != getClass()))   return false;  BasicPermission bp=(BasicPermission)obj;  return getName().equals(bp.getName());}  }
class C{  public CssFilterRule(String ruleText){  super(ruleText);  String mask;  boolean styleInject=false;  boolean whiteListRule=false;  if (StringUtils.contains(ruleText,MASK_CSS_INJECT_EXCEPTION_RULE)) {    mask=MASK_CSS_INJECT_EXCEPTION_RULE;    whiteListRule=true;    styleInject=true;  } else   if (StringUtils.contains(ruleText,MASK_CSS_INJECT_RULE)) {    mask=MASK_CSS_INJECT_RULE;    styleInject=true;  } else   if (StringUtils.contains(ruleText,MASK_CSS_EXCEPTION_RULE)) {    mask=MASK_CSS_EXCEPTION_RULE;    whiteListRule=true;  } else   if (StringUtils.contains(ruleText,MASK_CSS_RULE)) {    mask=MASK_CSS_RULE;  } else {    throw new IllegalArgumentException("ruleText");  }  int indexOfMask=StringUtils.indexOf(ruleText,mask);  if (indexOfMask > 0) {    String domains=StringUtils.substring(ruleText,0,indexOfMask);    loadDomains(domains);  }  this.styleInject=styleInject;  this.whiteListRule=whiteListRule;  cssContent=ruleText.substring(indexOfMask + mask.length());}  }
class C{  public boolean beginInfoBlockDisplay(ChildDisplayEvent event){  String msg=model.getInformationMessage();  if (msg != null && msg.length() > 0) {    setDisplayFieldValue(INFO_MSG,msg);    return true;  }  return false;}  }
class C{  private boolean split_inside_drill_pad_allowed(int p_line_no,PlaLineInt p_line){  PlaPoint intersection=polyline.plaline(p_line_no).intersection(p_line,null);  if (intersection.is_NaN())   return true;  Collection<BrdItem> overlap_items=r_board.pick_items(intersection,get_layer());  boolean pad_found=false;  for (  BrdItem curr_item : overlap_items) {    if (!curr_item.shares_net(this))     continue;    if (curr_item instanceof BrdAbitPin) {      BrdAbit curr_drill_item=(BrdAbit)curr_item;      pad_found=true;      if (curr_drill_item.center_get().equals(intersection)) {        return true;      }    } else     if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      if (curr_trace != this && curr_trace.corner_first().equals(intersection) || curr_trace.corner_last().equals(intersection)) {        return true;      }    }  }  return pad_found == false;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ProviderType createProviderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProviderTypeImpl();}  }
class C{  public void clear(){  elements=0;}  }
class C{  public void trace(Object message,Throwable exception){  log(Level.FINEST,String.valueOf(message),exception);}  }
class C{  public boolean isSameAs(ProductVersion other){  return version.compareTo(other.version) == 0 && revision.equals(other.revision);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformsElement createTransformsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformsElementImpl();}  }
class C{  public final void testGetPrimeQ(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeQ()));}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiToolBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiToolBarUI)mui).uis,a);}  }
class C{  public void removeAccountFedInfoKey(String userID,FSAccountFedInfoKey fedInfoKey) throws FSAccountMgmtException {  FSUtils.debug.message("FSAccountManager.removeAccountFedInfoKey():called");  if (userID == null) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfoKey():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  if (fedInfoKey == null) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfoKey():" + "Invalid Argument : FedInfo key is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_FED_INFO_KEY_OBJECT,null);  }  try {    Map attrMap=new HashMap();    Set existFedInfoKeySet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_KEY_ATTR);    if (existFedInfoKeySet != null && !existFedInfoKeySet.isEmpty()) {      Iterator i=existFedInfoKeySet.iterator();      String existFedInfoKeyStr="";      String filter=FSAccountUtils.createFilter(fedInfoKey);      while (i.hasNext()) {        existFedInfoKeyStr=(String)i.next();        if (existFedInfoKeyStr.indexOf(filter) >= 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAccountManager.removeAccountFedInfoKey():" + "Account Fed Info Key Exists, will remove it");          }          existFedInfoKeySet.remove(existFedInfoKeyStr);          attrMap.put(FSAccountUtils.USER_FED_INFO_KEY_ATTR,existFedInfoKeySet);          provider.setAttributes(userID,attrMap);          break;        }      }    }  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfoKey():Exception:",ame);    throw new FSAccountMgmtException(ame.getMessage());  }}  }
class C{  public static Cookie newCookie(String name,String value){  return newCookie(name,value,defAge,null,null);}  }
class C{  public static byte[] serializeToBuffer(XMPMetaImpl xmp,SerializeOptions options) throws XMPException {  ByteArrayOutputStream out=new ByteArrayOutputStream(2048);  serialize(xmp,out,options);  return out.toByteArray();}  }
class C{  protected void notifyListeners(LocalizableMessage msg){  notifyListeners(null,null,null,msg);}  }
class C{  public static Object gatRandomItem(final List items){  if (items == null || items.size() == 0) {    return null;  }  final int itemIndex=(int)(Math.random() * items.size());  return items.get(itemIndex);}  }
class C{  public PdfXObject addImage(ImageData image,Rectangle rect,boolean asInline){  return addImage(image,rect.getWidth(),0,0,rect.getHeight(),rect.getX(),rect.getY(),asInline);}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  MAPCreateDeviceViewBean vb=(MAPCreateDeviceViewBean)getViewBean(MAPCreateDeviceViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void testCase23(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.mod(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public PdfCollectionSchema addField(String name,PdfCollectionField field){  getPdfObject().put(new PdfName(name),field.getPdfObject());  return this;}  }
class C{  private void resetToSAXHandler(){  this.m_lexHandler=null;  this.m_saxHandler=null;  this.m_state=null;  this.m_shouldGenerateNSAttribute=false;}  }
class C{  public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){  if (p_color == null)   return;  Graphics2D g2=(Graphics2D)p_g;  Polygon draw_polygon=new Polygon();  for (int index=0; index < p_points.length; index++) {    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));  }  g2.setColor(p_color);  set_translucency(g2,p_translucency_factor);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.fill(draw_polygon);}  }
class C{  public Canvas(GraphicsConfiguration config){  this();  setGraphicsConfiguration(config);}  }
class C{  public static XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XPathContext xpathSupport=new XPathContext(false);  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  protected final void initialize() throws Exception {  for (  PropertyDefinition<?> pd : getAllPropertyDefinitions()) {    pd.initialize();    pd.getDefaultBehaviorProvider().initialize();  }  for (  RelationDefinition<?,?> rd : getAllRelationDefinitions()) {    rd.initialize();  }  for (  AggregationPropertyDefinition<?,?> apd : getAllAggregationPropertyDefinitions()) {    apd.initialize();    registerReverseAggregationPropertyDefinition(apd);  }  for (  Constraint constraint : getAllConstraints()) {    constraint.initialize();  }}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL_SPLIT ? "HORIZONTAL_SPLIT" : "VERTICAL_SPLIT");  String continuousLayoutString=(continuousLayout ? "true" : "false");  String oneTouchExpandableString=(oneTouchExpandable ? "true" : "false");  return super.paramString() + ",continuousLayout=" + continuousLayoutString+ ",dividerSize="+ dividerSize+ ",lastDividerLocation="+ lastDividerLocation+ ",oneTouchExpandable="+ oneTouchExpandableString+ ",orientation="+ orientationString;}  }
class C{  protected static int toDigit(char ch,int index) throws DecoderException {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new DecoderException("Illegal hexadecimal charcter " + ch + " at index "+ index);  }  return digit;}  }
class C{  public SocketException(Throwable cause){  super(cause);}  }
class C{  private void acceptPermanently(){  returnValue=ReturnType.ACCEPTED_PERMANENTLY;  dispose();}  }
class C{  Response processXACMLResponse(String realm,String pdpEntityID,RequestAbstract samlRequest,HttpServletRequest request,SOAPMessage soapMsg) throws SAML2Exception {  String classMethod="QueryHandlerServlet:processXACMLResponse";  Response samlResponse=null;  String path=request.getPathInfo();  String key=path.substring(path.indexOf(METAALIAS_KEY) + 10);  String pepEntityID=samlRequest.getIssuer().getValue();  if (debug.messageEnabled()) {    debug.message(classMethod + "SOAPMessage KEY . :" + key);    debug.message(classMethod + "pepEntityID is :" + pepEntityID);  }  boolean pdpWantAuthzQuerySigned=SAML2Utils.getWantXACMLAuthzDecisionQuerySigned(realm,pdpEntityID,SAML2Constants.PDP_ROLE);  if (debug.messageEnabled()) {    debug.message(classMethod + "PDP wantAuthzQuerySigned:" + pdpWantAuthzQuerySigned);  }  if (pdpWantAuthzQuerySigned) {    if (samlRequest.isSigned()) {      XACMLAuthzDecisionQueryDescriptorElement pep=SAML2Utils.getSAML2MetaManager().getPolicyEnforcementPointDescriptor(realm,pepEntityID);      Set<X509Certificate> verificationCerts=KeyUtil.getPEPVerificationCerts(pep,pepEntityID);      if (verificationCerts.isEmpty() || !samlRequest.isSignatureValid(verificationCerts)) {        debug.error(classMethod + "Invalid signature in message");        throw new SAML2Exception("invalidQuerySignature");      } else {        debug.message(classMethod + "Valid signature found");      }    } else {      debug.error("Request not signed");      throw new SAML2Exception("nullSig");    }  }  RequestHandler handler=(RequestHandler)SOAPBindingService.handlers.get(key);  if (handler != null) {    if (debug.messageEnabled()) {      debug.message(classMethod + "Found handler");    }    samlResponse=handler.handleQuery(pdpEntityID,pepEntityID,samlRequest,soapMsg);    samlResponse.setID(SAML2Utils.generateID());    samlResponse.setVersion(SAML2Constants.VERSION_2_0);    samlResponse.setIssueInstant(newDate());    Issuer issuer=AssertionFactory.getInstance().createIssuer();    issuer.setValue(pdpEntityID);    samlResponse.setIssuer(issuer);    List assertionList=samlResponse.getAssertion();    Assertion assertion=(Assertion)assertionList.get(0);    assertion.setID(SAML2Utils.generateID());    assertion.setVersion(SAML2Constants.VERSION_2_0);    assertion.setIssueInstant(newDate());    assertion.setIssuer(issuer);    String wantAssertionEncrypted=SAML2Utils.getAttributeValueFromXACMLConfig(realm,SAML2Constants.PEP_ROLE,pepEntityID,SAML2Constants.WANT_ASSERTION_ENCRYPTED);    XACMLAuthzDecisionQueryDescriptorElement pepDescriptor=SAML2Utils.getSAML2MetaManager().getPolicyEnforcementPointDescriptor(realm,pepEntityID);    EncInfo encInfo=null;    boolean wantAssertionSigned=pepDescriptor.isWantAssertionsSigned();    if (debug.messageEnabled()) {      debug.message(classMethod + " wantAssertionSigned :" + wantAssertionSigned);    }    if (wantAssertionSigned) {      signAssertion(realm,pdpEntityID,assertion);    }    if (wantAssertionEncrypted != null && wantAssertionEncrypted.equalsIgnoreCase(SAML2Constants.TRUE)) {      encInfo=KeyUtil.getPEPEncInfo(pepDescriptor,pepEntityID);      EncryptedAssertion encryptedAssertion=assertion.encrypt(encInfo.getWrappingKey(),encInfo.getDataEncAlgorithm(),encInfo.getDataEncStrength(),pepEntityID);      if (encryptedAssertion == null) {        debug.error(classMethod + "Assertion encryption failed.");        throw new SAML2Exception("FailedToEncryptAssertion");      }      assertionList=new ArrayList();      assertionList.add(encryptedAssertion);      samlResponse.setEncryptedAssertion(assertionList);      samlResponse.setAssertion(new ArrayList());      if (debug.messageEnabled()) {        debug.message(classMethod + "Assertion encrypted.");      }    } else {      List assertionsList=new ArrayList();      assertionsList.add(assertion);      samlResponse.setAssertion(assertionsList);    }    signResponse(samlResponse,realm,pepEntityID,pdpEntityID);  } else {    debug.error(classMethod + "RequestHandler not found");    throw new SAML2Exception("missingRequestHandler");  }  return samlResponse;}  }
class C{  public void internalFrameDeiconified(InternalFrameEvent e){}  }
class C{  public static boolean isEmpty(final String str){  return str == null || str.trim().equals("");}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AuthnAuthorityConfigElement createAuthnAuthorityConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AuthnAuthorityConfigElementImpl();}  }
class C{  protected String paramString(){  String str="key=" + key;  if (usesShiftModifier()) {    str+=",usesShiftModifier";  }  return str;}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public LocalBackendModifyOperation(ModifyOperation modify){  super(modify);  LocalBackendWorkflowElement.attachLocalOperation(modify,this);}  }
class C{  public void monitor(FileChangeListener listener){  if (lock.tryLock()) {    try {      FileChangeSet fileChangeSet=createFileChangeSet();      if (fileChangeSet.isEmpty()) {        return;      }      listener.onChanges(fileChangeSet);    }  finally {      lock.unlock();    }  }}  }
class C{  public void reset(){  if (!isReset && this.overwriteList != null) {    for (Iterator iterator=this.iterator(); iterator.hasNext(); ) {      DecompilerAdapter adapter=(DecompilerAdapter)iterator.next();      if (this.overwriteList.contains(adapter.getId())) {        iterator.remove();        DecompilerAdapterManager.logger.log(Level.FINE,"<" + adapter.getId() + "> is overwritten.");      }    }    this.isReset=true;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  state=element.hasAttribute("defaultAttr");  assertTrue("elementhasattribute02",state);}  }
class C{  public Cache(){  this(28,9);}  }
class C{  public BerInputStream(byte[] encoded) throws IOException {  this(encoded,0,encoded.length);}  }
class C{  public void addRule(String pattern,Rule rule){  rule.setDigester(this);  getRules().add(pattern,rule);}  }
class C{  @SuppressWarnings("unused") public static <T>void swapArrayPosition(T[] source,int first,int second){  T temp=source[first];  source[first]=source[second];  source[second]=temp;}  }
class C{  private static void updateNamingTable() throws SMSException {  Hashtable updatedNamingTable=updateNamingTable(false);  if (namingTable != null) {synchronized (namingTable) {      namingTable.clear();      namingTable.putAll(updatedNamingTable);    }  } else {    namingTable=updatedNamingTable;  }}  }
class C{  void removePolicyListener(PolicyListener policyListener){  String listenerServiceName=policyListener.getServiceTypeName();  Set oldListeners=(Set)policyListenersMap.get(listenerServiceName);  if (oldListeners != null) {    Set newListeners=new HashSet();    newListeners.addAll(oldListeners);    newListeners.remove(policyListener);    policyListenersMap.put(listenerServiceName,newListeners);  }}  }
class C{  public boolean isAccountLocked(String aUserName){  boolean locked=false;  try {    AMIdentity amIdentity=AuthD.getAuth().getIdentity(IdType.USER,aUserName,loginState.getOrgDN());    String userDN=normalizeDN(aUserName);    if (isAccountLockout.getStoreInvalidAttemptsInDS()) {      userDN=normalizeDN(IdentityUtils.getDN(amIdentity));    }    if (acInfo == null) {      acInfo=isAccountLockout.getAcInfo(userDN,amIdentity);    }    if (DEBUG.messageEnabled()) {      DEBUG.message("userDN=" + userDN);      DEBUG.message("acInfo=" + acInfo);    }    if (isAccountLockout.isMemoryLocking() && acInfo != null) {      locked=acInfo.isLockout();    } else {      if (isAccountValid(amIdentity)) {        locked=isAccountLockout.isAccountLocked(amIdentity);        if (locked) {          resetPasswdLockout(aUserName,false);        }      } else {        locked=true;        resetPasswdLockout(aUserName,false);      }    }    if (DEBUG.messageEnabled()) {      DEBUG.message("isLockedOut :" + locked);    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("isAccountLocked:Exception : " + e.toString());    }  }  return locked;}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (uri == null || (null == m_excludeResultPrefixes && null == m_ExtensionElementURIs))   return super.containsExcludeResultPrefix(prefix,uri);  if (prefix.length() == 0)   prefix=Constants.ATTRVAL_DEFAULT_PREFIX;  if (m_excludeResultPrefixes != null)   for (int i=0; i < m_excludeResultPrefixes.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_excludeResultPrefixes.elementAt(i))))     return true;  }  if (m_ExtensionElementURIs != null && m_ExtensionElementURIs.contains(uri))   return true;  return super.containsExcludeResultPrefix(prefix,uri);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof QName) {    return m_qname.equals(obj);  } else   return super.equals(obj);}  }
class C{  public void testProceedingTerminatedScenario(){  try {    Request invite=createRiInviteRequest(null,null,null);    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial invite request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    waitForMessage();    assertEquals(TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted INVITEs should not be passed to the TU",inviteReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ringing);      ringing.setHeader(createTiContact());    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted INVITEs should not be passed to the TU",inviteReceivedEvent);    waitLongForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No RINGING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from RINGING was sent by the TI upon " + "reception of a retransmitted invite INVITE",Response.RINGING == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the PROCEEDING state.",TransactionState.PROCEEDING,tran.getState());    Response ok=null;    try {      ok=tiMessageFactory.createResponse(Response.OK,tran.getRequest());      ContactHeader contact=this.createTiContact();      ok.addHeader(contact);      ((ToHeader)ok.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ok);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create an ok " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ok);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a OK response");    }    assertEquals("The Transaction did not move to the TERMINATED state " + "after transmitting an OK response",TransactionState.TERMINATED,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    try {      Dialog dialog=responseEvent.getDialog();      Request ack=dialog.createAck(((CSeqHeader)ok.getHeader(CSeqHeader.NAME)).getSeqNumber());      dialog.sendAck(ack);    } catch (    SipException ex) {      fail("error sending ack ",ex);    }  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  protected boolean isPlainSupported(){  return plainData != null;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private VirtualAttributeProvider<? extends VirtualAttributeCfg> loadProvider(String className,VirtualAttributeCfg cfg,boolean initialize) throws InitializationException {  try {    VirtualAttributeCfgDefn definition=VirtualAttributeCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends VirtualAttributeProvider> providerClass=propertyDefinition.loadClass(className,VirtualAttributeProvider.class);    VirtualAttributeProvider provider=providerClass.newInstance();    if (initialize) {      provider.initializeVirtualAttributeProvider(cfg);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!provider.isConfigurationAcceptable(cfg,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        LocalizableMessage message=ERR_CONFIG_VATTR_CONFIG_NOT_ACCEPTABLE.get(cfg.dn(),reasons);        throw new InitializationException(message);      }    }    return provider;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_VATTR_INITIALIZATION_FAILED.get(className,cfg.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public static Log YLog(){  if (YLog == null) {    YLog=new Log(YC);  }  return YLog;}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  KeyIterator(QName name,Vector keyDeclarations){  super(Axis.ALL);  m_keyDeclarations=keyDeclarations;  m_name=name;}  }
class C{  public LoginIPHostAttribute(byte[] octets){  super(octets);  hostAddr=OctetUtils.toIntVal(octets);}  }
class C{  public void persistInternal(@NonNull final String module,@NonNull final String key,@Nullable final String value){  persist(module,key,null,value,true);}  }
class C{  @Override public boolean matchFilter(Filter filter,DataType userDefinedValue) throws IllegalArgumentException {  throw new IllegalArgumentException("Matching filter not found for the datatype " + userDefinedValue.getClass().toString() + ". ");}  }
class C{  public LockableFileWriter(File file,boolean append) throws IOException {  this(file,append,null);}  }
class C{  protected void changeRequestSessionID(Request request,String sessionId,String newSessionID){  request.changeSessionId(newSessionID);  if (sessionIdAttribute != null && !"".equals(sessionIdAttribute)) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("jvmRoute.set.orignalsessionid",sessionIdAttribute,sessionId));    }    request.setAttribute(sessionIdAttribute,sessionId);  }}  }
class C{  public static Border createBevelBorder(int type,Color highlightOuter,Color highlightInner,Color shadowOuter,Color shadowInner){  return new BevelBorder(type,highlightOuter,highlightInner,shadowOuter,shadowInner);}  }
class C{  public void addResult(Result result) throws XACMLException {  if (!mutable) {    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("objectImmutable"));  }  if (results == null) {    results=new ArrayList();  }  results.add(result);}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {  root.recomposeOutput(this);}  }
class C{  public SearchResults search(String filter,String[] resultAttributeNames,SearchControl searchControl) throws InvalidSearchFilterException, UMSException {  int scope=SearchControl.SCOPE_SUB;  if (searchControl != null) {    scope=searchControl.getSearchScope(scope);  }  SearchResults results=DataLayer.getInstance().search(getPrincipal(),getGuid(),scope,filter,resultAttributeNames,false,searchControl);  results.setPrincipal(getPrincipal());  return results;}  }
class C{  public ManageNameIDResponse createManageNameIDResponse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_RESPONSE);  if (obj == null) {    return new ManageNameIDResponseImpl();  } else {    return (ManageNameIDResponse)obj;  }}  }
class C{  public byte[] decrypt(byte[] encText){  return pbeDecrypt(encText);}  }
class C{  private String escapedAV() throws IOException {  beg=pos;  end=pos;  while (true) {    if (pos >= chars.length) {      return new String(chars,beg,end - beg);    }switch (chars[pos]) {case '+':case ',':case ';':      return new String(chars,beg,end - beg);case '\\':    chars[end++]=getEscaped();  pos++;break;case ' ':int cur=end;pos++;chars[end++]=' ';for (; pos < chars.length && chars[pos] == ' '; pos++) {chars[end++]=' ';}if (pos == chars.length || chars[pos] == ',' || chars[pos] == '+' || chars[pos] == ';') {return new String(chars,beg,cur - beg);}break;default :chars[end++]=chars[pos];pos++;}}}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSliderUI();  return MultiLookAndFeel.createUIs(mui,((MultiSliderUI)mui).uis,a);}  }
class C{  public <M extends Configuration>void registerAddListener(SetRelationDefinition<?,M> d,ConfigurationAddListener<M> listener) throws ConfigException {  registerAddListener(d,new ServerManagedObjectAddListenerAdaptor<M>(listener));}  }
class C{  public IndexCreatedEvent create(Index index){  verifyTable(index.getDatabaseName(),index.getTableName());  ValidationEngine.validateAndThrow(index);  index.setActive(false);  logger.debug("Creating index: " + index.toString());  Index created=indexesRepo.create(index);  long dataSize=tablesRepo.countTableSize(index.getDatabaseName(),index.getTableName());  Date now=new Date();  UUID uuid=UUID.randomUUID();  IndexCreatedEvent toReturn=new IndexCreatedEvent(uuid,now,now,created,dataSize,0l);  statusRepo.create(toReturn);  toReturn.calculateValues();  DomainEvents.publish(toReturn);  return toReturn;}  }
class C{  private void disableMapper() throws Exception {  String externalDN="cn=EXTERNAL,cn=SASL Mechanisms,cn=config";  String mapperDN="cn=Subject Equals DN,cn=Certificate Mappers,cn=config";  assertModifyReplaceIsSuccess(externalDN,"ds-cfg-certificate-mapper",mapperDN);}  }
class C{  public PagedResultsResponseControl(String id,boolean criticality,byte[] value) throws IOException {  super(id,criticality,value);  BerDecoder ber=new BerDecoder(value,0,value.length);  ber.parseSeq(null);  resultSize=ber.parseInt();  cookie=ber.parseOctetString(Ber.ASN_OCTET_STR,null);}  }
class C{  public boolean dispatchKeyEvent(KeyEvent e){  Component focusOwner=(((AWTEvent)e).isPosted) ? getFocusOwner() : e.getComponent();  if (focusOwner != null && focusOwner.isShowing() && focusOwner.canBeFocusOwner()) {    if (!e.isConsumed()) {      Component comp=e.getComponent();      if (comp != null && comp.isEnabled()) {        redispatchEvent(comp,e);      }    }  }  boolean stopPostProcessing=false;  java.util.List<KeyEventPostProcessor> processors=getKeyEventPostProcessors();  if (processors != null) {    for (java.util.Iterator<KeyEventPostProcessor> iter=processors.iterator(); !stopPostProcessing && iter.hasNext(); ) {      stopPostProcessing=iter.next().postProcessKeyEvent(e);    }  }  if (!stopPostProcessing) {    postProcessKeyEvent(e);  }  Component source=e.getComponent();  ComponentPeer peer=source.getPeer();  if (peer == null || peer instanceof LightweightPeer) {    Container target=source.getNativeContainer();    if (target != null) {      peer=target.getPeer();    }  }  if (peer != null) {    peer.handleEvent(e);  }  return true;}  }
class C{  private void copyAppConfigFiles(File appBuildDir,File appConfigDir) throws IOException {  File[] files=appConfigDir.listFiles();  if (files != null) {    appBuildDir.mkdirs();    for (    File file : files) {      File outFile=new File(appBuildDir,file.getName());      if (file.isDirectory()) {        copyAppConfigFiles(outFile,file);      } else {        Files.copy(file,outFile);      }    }  }}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  private static Object newInstance(String className,ClassLoader classLoader){  try {    Class spiClass=safeLoadClass(className,classLoader);    return spiClass.newInstance();  } catch (  ClassNotFoundException x) {    throw new WebServiceException("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new WebServiceException("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  private static void updateEmbeddedIdRepo(String orgName,String configName,String entry) throws SMSException, SSOException {  SSOToken token=AccessController.doPrivileged(AdminTokenAction.getInstance());  ServiceConfigManager scm=new ServiceConfigManager(token,IdConstants.REPO_SERVICE,"1.0");  ServiceConfig sc=scm.getOrganizationConfig(orgName,null);  if (sc != null) {    ServiceConfig subConfig=sc.getSubConfig(configName);    if (subConfig != null) {      Map<String,Set<String>> configMap=subConfig.getAttributes();      Set<String> vals=configMap.get("sun-idrepo-ldapv3-config-ldap-server");      vals.add(entry);      HashMap<String,Set<String>> mp=new HashMap<String,Set<String>>(2);      mp.put("sun-idrepo-ldapv3-config-ldap-server",vals);      subConfig.setAttributes(mp);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  int childLength;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("data","1230 North Ave. Dallas, Texas ",childData);  childLength=(int)child.getLength();  assertEquals("length",30,childLength);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public static AndroidArtwork createArtworkFromFile(File file) throws IOException {  AndroidArtwork artwork=new AndroidArtwork();  artwork.setFromFile(file);  return artwork;}  }
class C{  public FrameBodyTFLT(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  public void completeTemplateInitialization(Map<String,Template> templates) throws MakeLDIFException {  if (subordinateTemplateNames == null) {    subordinateTemplateNames=new String[0];    subordinateTemplates=new Template[0];  } else {    subordinateTemplates=new Template[subordinateTemplateNames.length];    for (int i=0; i < subordinateTemplates.length; i++) {      subordinateTemplates[i]=templates.get(toLowerCase(subordinateTemplateNames[i]));      if (subordinateTemplates[i] == null) {        LocalizableMessage message=ERR_MAKELDIF_UNDEFINED_TEMPLATE_SUBORDINATE.get(subordinateTemplateNames[i],name);        throw new MakeLDIFException(message);      }    }  }  HashSet<AttributeType> rdnAttrs=new HashSet<>(rdnAttributes.length);  Collections.addAll(rdnAttrs,rdnAttributes);  for (  TemplateLine l : templateLines) {    if (rdnAttrs.remove(l.getAttributeType()) && rdnAttrs.isEmpty()) {      break;    }  }  if (!rdnAttrs.isEmpty()) {    AttributeType t=rdnAttrs.iterator().next();    LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_MISSING_RDN_ATTR.get(name,t.getNameOrOID());    throw new MakeLDIFException(message);  }}  }
class C{  protected AbstractConnPool createConnectionPool(final HttpParams params){  AbstractConnPool acp=new ConnPoolByRoute(connOperator,params);  boolean conngc=true;  if (conngc) {    acp.enableConnectionGC();  }  return acp;}  }
class C{  public static NSObject parse(String filePath) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  return parse(new File(filePath));}  }
class C{  public DatatypeConfigurationException(String message,Throwable cause){  super(message);  initCauseByReflection(cause);}  }
class C{  private static ASN1Primitive convertValueToObject(Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getExtnValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  private int sieveSearch(int limit,int start){  if (start >= limit)   return -1;  int index=start;  do {    if (!get(index))     return index;    index++;  } while (index < limit - 1);  return -1;}  }
class C{  public static void addNewSchema(String serviceName,SchemaUpgradeWrapper schemaChanges,SSOToken adminToken) throws UpgradeException {  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,adminToken);    InputStream schemaStream=ssm.getSchema();    Document dom=XMLUtils.toDOMDocument(schemaStream,debug);    NodeList schemaElements=dom.getElementsByTagName("Schema");    String schemaName=schemaChanges.getNewSchema().getSchemaName();    debug.message("Adding new " + schemaName + " schema to "+ serviceName);    if (schemaElements.getLength() == 1) {      Node schemaElement=schemaElements.item(0);      NodeList schemas=schemaElement.getChildNodes();      Node newNextSibling=null;      int idx=SCHEMA_ORDER.indexOf(schemaName);      for (int i=0; i < schemas.getLength(); i++) {        Node node=schemas.item(i);        int currentIdx=SCHEMA_ORDER.indexOf(node.getNodeName());        if (currentIdx > idx) {          newNextSibling=node;          break;        }      }      String xml="<" + schemaName + "></"+ schemaName+ ">";      Document doc=XMLUtils.toDOMDocument(xml,debug);      for (      AttributeSchemaImpl attr : schemaChanges.getNewSchema().getAttributes()) {        Node imported=doc.importNode(attr.getAttributeSchemaNode(),true);        doc.getDocumentElement().appendChild(imported);      }      Node schemaNode=dom.importNode(doc.getDocumentElement(),true);      schemaElement.insertBefore(schemaNode,newNextSibling);      InputStream is=new ByteArrayInputStream(XMLUtils.print(dom.getDocumentElement()).getBytes());      ssm.replaceSchema(is);    } else {      debug.error("Unexpected number of Schema element in service XML for " + serviceName + "\n"+ XMLUtils.print(dom));      throw new UpgradeException("Unexpected number of Schema element in service XML for " + serviceName);    }  } catch (  Exception ex) {    UpgradeProgress.reportEnd("upgrade.failed");    debug.error("An error occurred while trying to add new schema to service: " + serviceName,ex);    throw new UpgradeException(ex);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    if (currentNode == m_root && m_nextSibling != null)     currentNode.insertBefore(newNode,m_nextSibling); else     currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    if (m_nextSibling != null)     m_docFrag.insertBefore(newNode,m_nextSibling); else     m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_OUTPUT_TEXT_BEFORE_DOC,null));      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        ok=false;        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_HAVE_MORE_THAN_ONE_ROOT,null));      }    }    if (ok) {      if (m_nextSibling != null)       m_doc.insertBefore(newNode,m_nextSibling); else       m_doc.appendChild(newNode);    }  }}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public DataInputStream(InputStream in){  super(in);}  }
class C{  public DTMDocumentImpl(DTMManager mgr,int documentNumber,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory){  initDocument(documentNumber);  m_xsf=xstringfactory;}  }
class C{  static public void assertTrue(String message,boolean condition){  if (!condition)   fail(message);}  }
class C{  public FrameBodyTYER(FrameBodyTDRC body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,body.getText());}  }
class C{  public SerialClob(char ch[]) throws SerialException, SQLException {  len=ch.length;  buf=new char[(int)len];  for (int i=0; i < len; i++) {    buf[i]=ch[i];  }  origLen=len;  clob=null;}  }
class C{  public void init(String componentName) throws LogException {  accessLogger=(com.sun.identity.log.Logger)Logger.getLogger(componentName + ".access");  errorLogger=(com.sun.identity.log.Logger)Logger.getLogger(componentName + ".error");  try {    msgProvider=MessageProviderFactory.getProvider(componentName);  } catch (  IOException e) {    debug.error("LogProvider.<init>: unable to create log message provider",e);  }}  }
class C{  public synchronized Object clone(){  AMPassword dolly=new AMPassword();  dolly.password=(char[])password.clone();  dolly.cleared=cleared;  return dolly;}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  String propertyName=pce.getPropertyName();  Object source=pce.getSource();synchronized (children) {    if ("beanContext".equals(propertyName) && containsKey(source) && ((BCSChild)children.get(source)).isRemovePending()) {      BeanContext bc=getBeanContextPeer();      if (bc.equals(pce.getOldValue()) && !bc.equals(pce.getNewValue())) {        remove(source,false);      } else {        ((BCSChild)children.get(source)).setRemovePending(false);      }    }  }}  }
class C{  public Value parseValueFromNew(AST.New aNew,SemanticScope scope) throws SyntaxException {  SClassDef type;  try {    type=(SClassDef)getTypeWithAccess((AST.Access)aNew.invocation.exp,fileNameToImport.get(aNew.line_col().fileName));  } catch (  Throwable t) {    err.SyntaxException(aNew.invocation.exp + " is not a class",aNew.line_col());    return null;  }  assert type != null;  if (type.modifiers().contains(SModifier.ABSTRACT)) {    err.SyntaxException("abstract class cannot be instantiated",aNew.line_col());    return null;  }  List<Value> argList=new ArrayList<>();  for (  Expression e : aNew.invocation.args) {    argList.add(parseValueFromExpression(e,null,scope));  }  return constructingNewInst(type,argList,aNew.line_col());}  }
class C{  public ConnectorMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(InstantiableRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterDeleteListener(baseDN,listener);}  }
class C{  public final void testHashCode02(){  assertEquals(new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]).hashCode(),new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]).hashCode());}  }
class C{  public AMPreCallBackException(String msg,String errorCode,Object[] args,UMSException ue){  super(msg,errorCode,args,ue);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  int w=src.getWidth();  int h=src.getHeight();  WritableRaster wr=null;  if (destCM == null) {    destCM=src.getColorModel();    if (destCM instanceof IndexColorModel) {      destCM=ColorModel.getRGBdefault();    } else {      wr=src.getData().createCompatibleWritableRaster(w,h);    }  }  if (wr == null) {    wr=destCM.createCompatibleWritableRaster(w,h);  }  image=new BufferedImage(destCM,wr,destCM.isAlphaPremultiplied(),null);  return image;}  }
class C{  public synchronized void sync(long position) throws IOException {  if (position + SYNC_SIZE >= end) {    seek(end);    return;  }  if (position < headerEnd) {    in.seek(headerEnd);    syncSeen=true;    return;  }  try {    seek(position + 4);    in.readFully(syncCheck);    int syncLen=sync.length;    for (int i=0; in.getPos() < end; i++) {      int j=0;      for (; j < syncLen; j++) {        if (sync[j] != syncCheck[(i + j) % syncLen]) {          break;        }      }      if (j == syncLen) {        in.seek(in.getPos() - SYNC_SIZE);        return;      }      syncCheck[i % syncLen]=in.readByte();    }  } catch (  ChecksumException e) {    handleChecksumException(e);  }}  }
class C{  public ServerHandshakeImpl(Object owner){  super(owner);  status=NEED_UNWRAP;}  }
class C{  public synchronized void terminate(){  shouldTerminate=true;  needReturn=false;  this.notify();}  }
class C{  DropLocation dropLocationForPoint(Point p){  Position.Bias[] bias=new Position.Bias[1];  int index=getUI().viewToModel(this,p,bias);  if (bias[0] == null) {    bias[0]=Position.Bias.Forward;  }  return new DropLocation(p,index,bias[0]);}  }
class C{  public boolean included(String uri,String method){  if (method == null)   return false;  for (int i=0; i < collections.length; i++) {    if (!collections[i].findMethod(method))     continue;    String patterns[]=collections[i].findPatterns();    for (int j=0; j < patterns.length; j++) {      if (matchPattern(uri,patterns[j]))       return true;    }  }  return false;}  }
class C{  public synchronized void clearCache(){  sdkCache.clear();  initializeCache();}  }
class C{  @Override protected void destroyInternal() throws LifecycleException {  if (getObjectName() != null) {    Notification notification=new Notification("j2ee.object.deleted",this.getObjectName(),sequenceNumber.getAndIncrement());    broadcaster.sendNotification(notification);  }  if (namingResources != null) {    namingResources.destroy();  }  Loader loader=getLoader();  if (loader instanceof Lifecycle) {    ((Lifecycle)loader).destroy();  }  Manager manager=getManager();  if (manager instanceof Lifecycle) {    ((Lifecycle)manager).destroy();  }  if (resources != null) {    resources.destroy();  }  super.destroyInternal();}  }
class C{  public String encode(){  String encoded_string=BANDWIDTH_FIELD;  if (bwtype != null)   encoded_string+=bwtype + Separators.COLON;  return encoded_string + bandwidth + Separators.NEWLINE;}  }
class C{  public static Object deserialize(String str) throws JobPersistenceException {  try {    byte[] bytes=Base64.decode(str);    if (bytes == null) {      bytes=new byte[0];    }    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bytes));    Object o=ois.readObject();    ois.close();    return o;  } catch (  Exception e) {    e.printStackTrace();    throw new JobPersistenceException(e.getMessage());  }}  }
class C{  public PlaPointFloat dsn_to_board_rel(double[] p_tuple){  double x=dsn_to_board(p_tuple[0]);  double y=dsn_to_board(p_tuple[1]);  return new PlaPointFloat(x,y);}  }
class C{  public Matcher next() throws IOException {  readahead();  if (matches == null) {    throw new NoSuchElementException();  }  Matcher matcher=matches.next();  if (discard) {    Pattern pattern=matcher.pattern();    for (int n=0; n < patterns.length; n++) {      if (patterns[n] == pattern) {        patterns[n]=null;        break;      }    }  }  return matcher;}  }
class C{  public LauncherScroller(Context context){  this(context,null);}  }
class C{  public void test_addPathToNameLintLbyte_array2() throws Exception {  TestUtils.initCertPathSSCertChain();  setupEnvironment();  byte[] bytes, bytesName;  bytes=new byte[]{-127,8,56,50,50,46,78,97,109,101};  bytesName=new byte[]{22,8,56,50,50,46,78,97,109,101};  bytes[bytes.length - 3]=(byte)200;  try {    theCertSelector.addPathToName(1,bytes);  } catch (  IOException e) {  }  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,bytesName);  assertNotNull(theCertSelector.getPathToNames());  CertPath p=buildCertPath();  assertNull(p);  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(4,TestUtils.rootCertificateSS.getIssuerX500Principal().getEncoded());  assertNotNull(theCertSelector.getPathToNames());  p=TestUtils.buildCertPathSSCertChain();  assertNotNull(p);}  }
class C{  @Deprecated protected String normalize(String s){  if (s == null) {    return "";  }  StringBuilder str=new StringBuilder();  int len=s.length();  for (int i=0; i < len; i++) {    char ch=s.charAt(i);switch (ch) {case '<':      str.append("&lt;");    break;case '>':  str.append("&gt;");break;case '&':str.append("&amp;");break;case '"':str.append("&quot;");break;case '\r':case '\n':if (canonical) {str.append("&#");str.append(Integer.toString(ch));str.append(';');break;}default :str.append(ch);}}return (str.toString());}  }
class C{  public void writeUint64(long n){  check(8);  buffer[write_pos++]=(byte)((n & 0x00ff00000000000000L) >> 56);  buffer[write_pos++]=(byte)((n & 0x00ff000000000000L) >> 48);  buffer[write_pos++]=(byte)((n & 0x00ff0000000000L) >> 40);  buffer[write_pos++]=(byte)((n & 0x00ff00000000L) >> 32);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  private Component createInstructionsPane(){  LocalizableMessage instructions=INFO_SECURITY_OPTIONS_INSTRUCTIONS.get();  JTextComponent instructionsPane=UIFactory.makeHtmlPane(instructions,UIFactory.INSTRUCTIONS_FONT);  instructionsPane.setOpaque(false);  instructionsPane.setEditable(false);  return instructionsPane;}  }
class C{  protected void diagnose(){  System.err.print("Found multistep iterators: " + this.getLength() + "  ");  MultistepExprHolder next=this;  while (null != next) {    System.err.print("" + next.m_stepCount);    next=next.m_next;    if (null != next)     System.err.print(", ");  }  System.err.println();}  }
class C{  private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  public boolean hasAuthenticationType(AuthenticationType authenticationType){  return this.authenticationType == authenticationType;}  }
class C{  public void removeTag(){  parameters.delete(ParameterNames.TAG);}  }
class C{  public List<String> fieldPropertyComment(Field field){  String commentType=fieldTypeCardinalityComment(field);  String fieldName=propertyName(field);  return convertToCommentedBlock(fieldComment(String.format("@property {%s} %s",commentType,fieldName),null,field));}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public int capacity(){  return value.length;}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public void test_SubSelect() throws SQLException {  String sql="SELECT finteger," + " (SELECT ftext FROM " + DatabaseCreator.TEST_TABLE2 + " WHERE finteger = 1) as ftext"+ " FROM "+ DatabaseCreator.TEST_TABLE2;  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,String> value=new HashMap<Integer,String>();  value.put(1,DatabaseCreator.defaultString + "1");  value.put(2,DatabaseCreator.defaultString + "1");  value.put(3,DatabaseCreator.defaultString + "1");  value.put(4,DatabaseCreator.defaultString + "1");  value.put(5,DatabaseCreator.defaultString + "1");  while (result.next()) {    int key=result.getInt("finteger");    String val=result.getString("ftext");    assertTrue("wrong value of finteger field",value.containsKey(key));    assertEquals("wrong value of ftext field",value.get(key),val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
