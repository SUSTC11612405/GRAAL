class C{  public static long toLong(byte[] bytes){  return toLong(bytes,0);}  }
class C{  public double mean(){  throw new RuntimeException("Not yet implemented");}  }
class C{  public void testSort(){  performTest(getFilter(true,""));}  }
class C{  protected Object convertArray(Object value){  return value;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  AccessibleContext ac=getCurrentAccessibleContext();  if (ac != null) {    ac.removePropertyChangeListener(l);  } else {    super.removePropertyChangeListener(l);  }}  }
class C{  public void assertNotEqual(byte expected,byte actual,String errorMessage){  TestUtils.assertNotEqual(expected,actual,errorMessage);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(REL);  builder.addAttribute(HREF);  builder.addAttribute(READ_ONLY);  builder.addAttribute(COUNT_HINT);  builder.addElement(Feed.KEY);}  }
class C{  public void testUnisolatedAllocationContextRecycling(){  final Journal store=(Journal)getStore(0);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final IAllocationContext cntxt=rw.newAllocationContext(false);    final int allocs=1000;    final PseudoRandom ran=new PseudoRandom(20000);    final ArrayList<Integer> addrs=new ArrayList<Integer>();    final ArrayList<Integer> sizes=new ArrayList<Integer>();    for (int a=0; a < allocs; a++) {      final int sze=32 + ran.nextInt(1200);      addrs.add(rw.alloc(sze,cntxt));      sizes.add(sze);    }    store.commit();    IAllocationContext iso_cntxt=rw.newAllocationContext(true);    for (int a=0; a < 3; a++) {      rw.alloc(32 + ran.nextInt(1200),iso_cntxt);    }    if (log.isInfoEnabled()) {      final StringBuilder str=new StringBuilder();      rw.showAllocators(str);      log.info(str);    }    for (int a=0; a < 36; a++) {      rw.free(addrs.get(a),sizes.get(a),cntxt);    }    store.abort();    for (int a=0; a < 36; a++) {      final int rwaddr=addrs.get(a);      if (log.isInfoEnabled())       log.info("Address: " + rw.physicalAddress(rwaddr) + ", Committed: "+ rw.isCommitted(rwaddr));    }    log.info("INTERMEDIATE COMMIT");    for (int a=0; a < 36; a++) {      final int rwaddr=addrs.get(a);      if (log.isInfoEnabled())       log.info("Address: " + rw.physicalAddress(rwaddr) + ", Committed: "+ rw.isCommitted(rwaddr)+ ", Index: "+ getIndex(rwaddr));    }    log.info("DETACH CONTEXT");    rw.detachContext(iso_cntxt);    for (int a=0; a < 36; a++) {      final int rwaddr=addrs.get(a);      if (log.isInfoEnabled())       log.info("Address: " + rw.physicalAddress(rwaddr) + ", Committed: "+ rw.isCommitted(rwaddr)+ ", Index: "+ getIndex(rwaddr));    }    store.commit();    log.info("COMMIT");    for (int a=0; a < 36; a++) {      final int rwaddr=addrs.get(a);      if (log.isInfoEnabled())       log.info("Address: " + rw.physicalAddress(rwaddr) + ", Committed: "+ rw.isCommitted(rwaddr)+ ", Index: "+ getIndex(rwaddr));    }    store.commit();    log.info("SECONDARY");    for (int a=0; a < 36; a++) {      final int rwaddr=addrs.get(a);      if (log.isInfoEnabled())       log.info("Address: " + rw.physicalAddress(rwaddr) + ", Committed: "+ rw.isCommitted(rwaddr)+ ", Index: "+ getIndex(rwaddr));    }  }  finally {    store.destroy();  }}  }
class C{  public default void artifactPreAdd(final PreAddContext context) throws Exception {}  }
class C{  public static Container encloseIn(Layout l,Component cmp,Object cons){  Container cnt=new Container(l);  if (cons instanceof Component) {    return cnt.add(cmp).add((Component)cons);  }  if (cons != null) {    cnt.addComponent(cons,cmp);  } else {    cnt.addComponent(cmp);  }  return cnt;}  }
class C{  public void resetTask(){  this.theOwner=null;  this.petPathfinder.clearPathEntity();}  }
class C{  public double[] computeLocalJointEntropyOfPreviousObservations() throws Exception {  return computeLocalJointEntropyUsingPreviousObservations(sourceObservations,destObservations,true);}  }
class C{  private void fillComboReport(int AD_PrintFormat_ID){  comboReport.removeActionListener(this);  comboReport.removeAllItems();  KeyNamePair selectValue=null;  String sql=MRole.getDefault().addAccessSQL("SELECT AD_PrintFormat_ID, Name, Description " + "FROM AD_PrintFormat " + "WHERE AD_Table_ID=? "+ "AND IsActive='Y' "+ "ORDER BY Name","AD_PrintFormat",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      comboReport.addItem(pp);      if (rs.getInt(1) == AD_PrintFormat_ID)       selectValue=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  StringBuffer sb=new StringBuffer("** ").append(Msg.getMsg(m_ctx,"NewReport")).append(" **");  KeyNamePair pp=new KeyNamePair(-1,sb.toString());  comboReport.addItem(pp);  sb=new StringBuffer("** ").append(Msg.getMsg(m_ctx,"CopyReport")).append(" **");  pp=new KeyNamePair(-2,sb.toString());  comboReport.addItem(pp);  if (selectValue != null)   comboReport.setSelectedItem(selectValue);  comboReport.addActionListener(this);}  }
class C{  public static CodeArray createStub(int[] sigIds,RVMMethod[] targets){  int numEntries=sigIds.length;  Assembler asm=new Assembler(numEntries);  if (VM.VerifyAssertions) {    for (int i=1; i < sigIds.length; i++) {      VM._assert(sigIds[i - 1] < sigIds[i]);    }  }  int[] bcIndices=new int[numEntries];  assignBytecodeIndices(0,bcIndices,0,numEntries - 1);  insertStubPrologue(asm);  insertStubCase(asm,sigIds,targets,bcIndices,0,numEntries - 1);  CodeArray stub=asm.getMachineCodes();  if (VM.runningVM)   Memory.sync(Magic.objectAsAddress(stub),stub.length() << LG_INSTRUCTION_WIDTH);  return stub;}  }
class C{  public NodeSorter(XPathContext p){  m_execContext=p;}  }
class C{  public static String[] readStrings(String filename){  return new In(filename).readAllStrings();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append('[');  sb.append("checksum=0x");  sb.append(Long.toHexString(checksum));  sb.append(']');  return sb.toString();}  }
class C{  public CopySubgraphAction(GraphEditable graphEditor){  super("Copy Selected Graph");  if (graphEditor == null) {    throw new NullPointerException("Desktop must not be null.");  }  this.graphEditor=graphEditor;}  }
class C{  public boolean addToActiveList(DownloadInfoRunnable downloadInfoRunnable){  return activeListHasRoom() && mActiveList.add(downloadInfoRunnable);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTSid))   return false;  NTSid that=(NTSid)o;  if (sid.equals(that.sid)) {    return true;  }  return false;}  }
class C{  public void add(SchemaObject obj){  if (SysProperties.CHECK && obj.getSchema() != this) {    DbException.throwInternalError("wrong schema");  }  String name=obj.getName();  Map<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists: " + name);  }  map.put(name,obj);  freeUniqueName(name);}  }
class C{  public MemoryIndex(boolean storeOffsets,boolean storePayloads){  this(storeOffsets,storePayloads,0);}  }
class C{  void delete(int index){  if (num == 0 || index >= num) {    return;  }  while (++index < num) {    if (index - 1 >= 0) {      minRange[index - 1]=minRange[index];      maxRange[index - 1]=maxRange[index];    }  }  num--;}  }
class C{  private void updateSelection(Mode mode,SVGPoint p1,SVGPoint p2){  DBIDSelection selContext=context.getSelection();  final HashSetModifiableDBIDs selection;  if (selContext == null || mode == Mode.REPLACE) {    selection=DBIDUtil.newHashSet();  } else {    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());  }  int[] axisrange=getAxisRange(Math.min(p1.getX(),p2.getX()),Math.max(p1.getX(),p2.getX()));  DBIDs ids=ResultUtil.getSamplingResult(relation).getSample();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double[] yPos=proj.fastProjectDataToRenderSpace(relation.get(iter));    if (checkSelected(axisrange,yPos,Math.max(p1.getX(),p2.getX()),Math.min(p1.getX(),p2.getX()),Math.max(p1.getY(),p2.getY()),Math.min(p1.getY(),p2.getY()))) {      if (mode == Mode.INVERT) {        if (!selection.contains(iter)) {          selection.add(iter);        } else {          selection.remove(iter);        }      } else {        selection.add(iter);      }    }  }  context.setSelection(new DBIDSelection(selection));}  }
class C{  public T caseLogicalAndExpression(LogicalAndExpression object){  return null;}  }
class C{  protected void init(int rows,int cols){  rowData.clear();  for (int i=0; i < rows; i++) {    rowData.add(createNewRow(" ",cols));  }  fireTableStructureChanged();}  }
class C{  @Override public void runSingleIteration(){  for (  long rightNode : salsaInternalState.getCurrentRightNodes().keySet()) {    int numWalks=salsaInternalState.getCurrentRightNodes().get(rightNode);    EdgeIterator sampledLeftNodes=salsaInternalState.getBipartiteGraph().getRandomRightNodeEdges(rightNode,numWalks,random);    if (sampledLeftNodes != null) {      while (sampledLeftNodes.hasNext()) {        salsaInternalState.addNodeToCurrentLeftNodes(sampledLeftNodes.nextLong());      }    }  }  salsaInternalState.clearCurrentRightNodes();}  }
class C{  public static Matrix parseMatlab(String matlab) throws Exception {  return new Matrix(weka.core.matrix.Matrix.parseMatlab(matlab).getArray());}  }
class C{  public static void handleCommandLineArgs(final String[] args,final String[] availableProperties,GameMode gameMode){  if (args.length == 1 && !args[0].contains("=")) {    args[0]=GameRunner.TRIPLEA_GAME_PROPERTY + "=" + args[0];  }  boolean usagePrinted=false;  for (  final String arg : args) {    String key;    final int indexOf=arg.indexOf('=');    if (indexOf > 0) {      key=arg.substring(0,indexOf);    } else {      throw new IllegalArgumentException("Argument " + arg + " doesn't match pattern 'key=value'");    }    if (!setSystemProperty(key,getValue(arg),availableProperties)) {      System.out.println("Unrecogized:" + arg);      if (!usagePrinted) {        usagePrinted=true;        usage(gameMode);      }    }  }  if (gameMode == GameMode.HEADLESS_BOT) {    System.getProperties().setProperty(TRIPLEA_HEADLESS,"true");    boolean printUsage=false;    final String playerName=System.getProperty(GameRunner.TRIPLEA_NAME_PROPERTY,"");    final String hostName=System.getProperty(GameRunner.LOBBY_GAME_HOSTED_BY,"");    if (playerName.length() < 7 || hostName.length() < 7 || !hostName.equals(playerName) || !playerName.startsWith("Bot") || !hostName.startsWith("Bot")) {      System.out.println("Invalid argument: " + GameRunner.TRIPLEA_NAME_PROPERTY + " and "+ GameRunner.LOBBY_GAME_HOSTED_BY+ " must start with \"Bot\" and be at least 7 characters long and be the same.");      printUsage=true;    }    final String comments=System.getProperty(GameRunner.LOBBY_GAME_COMMENTS,"");    if (!comments.contains("automated_host")) {      System.out.println("Invalid argument: " + GameRunner.LOBBY_GAME_COMMENTS + " must contain the string \"automated_host\".");      printUsage=true;    }    final String email=System.getProperty(GameRunner.LOBBY_GAME_SUPPORT_EMAIL,"");    if (email.length() < 3 || !Util.isMailValid(email)) {      System.out.println("Invalid argument: " + GameRunner.LOBBY_GAME_SUPPORT_EMAIL + " must contain a valid email address.");      printUsage=true;    }    final String reconnection=System.getProperty(GameRunner.LOBBY_GAME_RECONNECTION,"" + LOBBY_RECONNECTION_REFRESH_SECONDS_DEFAULT);    try {      final int reconnect=Integer.parseInt(reconnection);      if (reconnect < LOBBY_RECONNECTION_REFRESH_SECONDS_MINIMUM) {        System.out.println("Invalid argument: " + GameRunner.LOBBY_GAME_RECONNECTION + " must be an integer equal to or greater than "+ LOBBY_RECONNECTION_REFRESH_SECONDS_MINIMUM+ " seconds, and should normally be either "+ LOBBY_RECONNECTION_REFRESH_SECONDS_DEFAULT+ " or "+ (2 * LOBBY_RECONNECTION_REFRESH_SECONDS_DEFAULT)+ " seconds.");        printUsage=true;      }    } catch (    final NumberFormatException e) {      System.out.println("Invalid argument: " + GameRunner.LOBBY_GAME_RECONNECTION + " must be an integer equal to or greater than "+ LOBBY_RECONNECTION_REFRESH_SECONDS_MINIMUM+ " seconds, and should normally be either "+ LOBBY_RECONNECTION_REFRESH_SECONDS_DEFAULT+ " or "+ (2 * LOBBY_RECONNECTION_REFRESH_SECONDS_DEFAULT)+ " seconds.");      printUsage=true;    }    final String clientWait=System.getProperty(GameRunner.TRIPLEA_SERVER_START_GAME_SYNC_WAIT_TIME,"");    final String observerWait=System.getProperty(GameRunner.TRIPLEA_SERVER_OBSERVER_JOIN_WAIT_TIME,"");    if (clientWait.length() > 0) {      try {        final int wait=Integer.parseInt(clientWait);        GameRunner.setServerStartGameSyncWaitTime(wait);      } catch (      final NumberFormatException e) {        System.out.println("Invalid argument: " + GameRunner.TRIPLEA_SERVER_START_GAME_SYNC_WAIT_TIME + " must be an integer.");        printUsage=true;      }    }    if (observerWait.length() > 0) {      try {        final int wait=Integer.parseInt(observerWait);        GameRunner.setServerObserverJoinWaitTime(wait);      } catch (      final NumberFormatException e) {        System.out.println("Invalid argument: " + GameRunner.TRIPLEA_SERVER_START_GAME_SYNC_WAIT_TIME + " must be an integer.");        printUsage=true;      }    }    if (printUsage || usagePrinted) {      usage(gameMode);      System.exit(-1);    }  } else {    final String version=System.getProperty(TRIPLEA_ENGINE_VERSION_BIN);    if (version != null && version.length() > 0) {      final Version testVersion;      try {        testVersion=new Version(version);        System.out.println(TRIPLEA_ENGINE_VERSION_BIN + ":" + version);        if (!ClientContext.engineVersion().getVersion().equals(testVersion,false)) {          System.out.println("Current Engine version in use: " + ClientContext.engineVersion());        }      } catch (      final Exception e) {        System.getProperties().setProperty(TRIPLEA_ENGINE_VERSION_BIN,ClientContext.engineVersion().toString());        System.out.println(TRIPLEA_ENGINE_VERSION_BIN + ":" + ClientContext.engineVersion());      }    } else {      System.getProperties().setProperty(TRIPLEA_ENGINE_VERSION_BIN,ClientContext.engineVersion().toString());      System.out.println(TRIPLEA_ENGINE_VERSION_BIN + ":" + ClientContext.engineVersion());    }  }}  }
class C{  @Deprecated public void expungeNotebook(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeNotebook",mAuthenticationToken,guid);}  }
class C{  protected Object deserialize(byte[] payload,Schema readerSchema) throws SerializationException {  return deserialize(false,null,null,payload,readerSchema);}  }
class C{  public PTQuery parse(String queryName,String queryString) throws PTQueryParserException, PTQueryException {  return new Parser(this).parse(queryName,queryString);}  }
class C{  public String peekElement(){  return peekElement(0);}  }
class C{  public String checkWriteProtected(int resIdAction,final File... filesToBeModified){  if (filesToBeModified != null) {    for (    File file : filesToBeModified) {      if ((file != null) && (file.exists()) && (!file.canWrite())) {        String action=(resIdAction == 0) ? "" : mContext.getString(resIdAction);        return mContext.getString(R.string.file_err_writeprotected,file.getAbsolutePath(),action);      }    }  }  return null;}  }
class C{  public IntegerConstant(ConstantPool pool,int index,int value){  super(pool,index);  _value=value;}  }
class C{  public static String generateRandomName(String prefix){  StringBuilder sb=new StringBuilder();  Random random=new Random();  sb.append(prefix);  for (int i=0; i < 5; i++) {    sb.append('a' + random.nextInt(26));  }  return sb.toString();}  }
class C{  public boolean isEvenInvoiceWeek(){  Object oo=get_Value(COLUMNNAME_EvenInvoiceWeek);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void deOp(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't remove op on null user");  setMode("-o " + user.getNick());}  }
class C{  public static String[] makeBucketLabels(int numBuckets,double min,double max,boolean logScale){  String[] s=new String[numBuckets];  if (min > max) {    double tmp=min;    min=max;    max=tmp;  }  if (min == max) {    s[0]="[" + min + "..."+ max+ "]";    for (int x=1; x < s.length; x++)     s[x]="";    return s;  } else   if (logScale) {    min=Math.log(min);    max=Math.log(max);    for (int x=0; x < s.length; x++)     s[x]="[" + Math.exp((x / (double)numBuckets) * (max - min) + min) + "..."+ Math.exp(((x + 1) / (double)numBuckets) * (max - min) + min)+ (x == s.length - 1 ? "]" : ")");  } else   for (int x=0; x < s.length; x++)   s[x]="[" + ((x / (double)numBuckets) * (max - min) + min) + "..."+ (((x + 1) / (double)numBuckets) * (max - min) + min)+ (x == s.length - 1 ? "]" : ")");  return s;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.634 -0500",hash_original_method="D3DDD15A13BA6EC1D9CD48C2CCCFE0B4",hash_generated_method="BDAD5B72FB8DC237D351054ED50949FF") private Event(){}  }
class C{  public void putDouble(String key,double value){  putString(key,String.valueOf(value));}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.476 -0500",hash_original_method="23A8E01E039C76712F2C134222EAC45B",hash_generated_method="EA68455D0713862A2AE3E437A935F177") public void putCharSequence(String key,CharSequence value){  unparcel();  mMap.put(key,value);}  }
class C{  public Memory(final com.google.security.zynamics.zylib.general.memmanager.Memory memory){  m_memory=memory;  memory.addMemoryListener(m_listener);}  }
class C{  public LinkedIdentityHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  accessOrder=false;}  }
class C{  private void addMitreJoin(Coordinate p,LineSegment offset0,LineSegment offset1,double distance){  boolean isMitreWithinLimit=true;  Coordinate intPt=null;  try {    intPt=HCoordinate.intersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);    double mitreRatio=distance <= 0.0 ? 1.0 : intPt.distance(p) / Math.abs(distance);    if (mitreRatio > bufParams.getMitreLimit())     isMitreWithinLimit=false;  } catch (  NotRepresentableException ex) {    intPt=new Coordinate(0,0);    isMitreWithinLimit=false;  }  if (isMitreWithinLimit) {    segList.addPt(intPt);  } else {    addLimitedMitreJoin(offset0,offset1,distance,bufParams.getMitreLimit());  }}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  synchronized protected void timeout(){  Runnable r=null;  javax.swing.SwingUtilities.invokeLater(r);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  protected void onSingleClick(){  stackTrace.setText("");  final ISelection selection=testTreeViewer.getSelection();  if (selection.isEmpty()) {    return;  }  if (selection instanceof IStructuredSelection) {    final Object element=((IStructuredSelection)selection).getFirstElement();    if (element instanceof ResultNode) {      final ResultNode resultNode=(ResultNode)element;      final TestElement testElement=resultNode.getElement();      if (testElement instanceof TestCase) {        final TestCase testCase=(TestCase)testElement;        final TestResult result=testCase.getResult();        if (result != null) {          if (result.getTrace() != null && !result.getTrace().isEmpty()) {            final List<String> trace=newArrayList(result.getTrace());            final String firstLine=trace.get(0);            if ("Error".equals(firstLine) && !isNullOrEmpty(result.getMessage())) {              trace.set(0,result.getMessage());            }            final StringBuilder sb=new StringBuilder();            trace.forEach(null);            stackTrace.setText(sb.toString());            stackTrace.setSelection(0);          } else           if ((SKIPPED_IGNORE.equals(result.getTestStatus()) || SKIPPED_FIXME.equals(result.getTestStatus())) && !isNullOrEmpty(result.getMessage())) {            stackTrace.setText(result.getMessage());            stackTrace.setSelection(0);          }        }      }    }  }}  }
class C{  public RecordsMatcher<T> atLeastNOfThem(int n){  return new RecordsMatcher<>(MatcherCombiner.atLeast(matchers,n));}  }
class C{  private static int upperIndex(int ch){  int index=-1;  if (ch >= 0xdf) {    if (ch <= 0x587) {switch (ch) {case 0xdf:        return 0;case 0x149:      return 1;case 0x1f0:    return 2;case 0x390:  return 3;case 0x3b0:return 4;case 0x587:return 5;}} else if (ch >= 0x1e96) {if (ch <= 0x1e9a) {index=6 + ch - 0x1e96;} else if (ch >= 0x1f50 && ch <= 0x1ffc) {index=upperValues2[ch - 0x1f50];if (index == 0) {index=-1;}} else if (ch >= 0xfb00) {if (ch <= 0xfb06) {index=90 + ch - 0xfb00;} else if (ch >= 0xfb13 && ch <= 0xfb17) {index=97 + ch - 0xfb13;}}}}return index;}  }
class C{  public static String toStringAccessValue(short accessValue) throws SecurityException {switch (accessValue) {case VALUE_NONE:    return "none";case VALUE_YES:  return "yes";case VALUE_LOCAL:return "local";case VALUE_1:return "1";case VALUE_2:return "2";case VALUE_3:return "3";case VALUE_4:return "4";case VALUE_5:return "5";case VALUE_6:return "6";case VALUE_7:return "7";case VALUE_8:return "8";case VALUE_9:return "9";case VALUE_10:return "10";}throw new SecurityException("invalid access value","valid access values are [all,local,no,none,yes,1,...,10]");}  }
class C{  private void performCalibrationCheckin(){  PowerManager pm=(PowerManager)getApplicationContext().getSystemService(Context.POWER_SERVICE);  PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"NSDownload");  wl.acquire();  try {    Log.i("CALIBRATION-CHECK-IN: ","Wake Lock Acquired");    if (acquireSerialDevice()) {      try {        ReadData readData=new ReadData(mSerialDevice,mConnection,dexcom);        CalRecord[] calRecords=readData.getRecentCalRecords();        Log.i("CALIBRATION-CHECK-IN: ","Found " + calRecords.length + " Records!");        save_most_recent_cal_record(calRecords);      } catch (      Exception e) {        Log.wtf("Unhandled exception caught",e);      } finally {        try {          mSerialDevice.getPorts().get(0).close();        } catch (        IOException e) {          Log.e(TAG,"Unable to close",e);        }      }    } else {      Log.w("CALIBRATION-CHECK-IN: ","Failed to acquire serial device");    }  }  finally {    wl.release();  }}  }
class C{  void open() throws ReplicatorException, InterruptedException {  try {    if (getFileName() == null) {      throw new MySQLExtractException("No binlog file specified");    }    if (bfdi != null) {      throw new MySQLExtractException("Attempt to open binlog twice: " + this.fileName);    }    File file=new File(getDirectory() + File.separator + getFileName());    int tryCnt=0;    while (file.exists() == false && tryCnt++ < 500) {      Thread.sleep(10);    }    if (logger.isDebugEnabled())     logger.debug("Opening file " + file.getName() + " with buffer = "+ bufferSize);    bfdi=new BufferedFileDataInput(file,bufferSize);    byte magic[]=new byte[MysqlBinlog.BIN_LOG_HEADER_SIZE];    try {      waitAvailable(magic.length,binlogFlushDelayMillis);      if (available() < magic.length) {        throw new MySQLExtractException("Failed reading header;  Probably an empty file or very slow file system: " + getBaseName());      }      read(magic);      if (!Arrays.equals(magic,MysqlBinlog.BINLOG_MAGIC)) {        throw new MySQLExtractException("File is not a binary log file - found : " + LogEvent.hexdump(magic) + " / expected : "+ LogEvent.hexdump(MysqlBinlog.BINLOG_MAGIC));      }    } catch (    IOException e) {      throw new MySQLExtractException("Failed reading binlog file header: " + getBaseName(),e);    }    mark(2048);    byte[] header=new byte[MysqlBinlog.PROBE_HEADER_LEN];    waitAvailable(header.length,binlogFlushDelayMillis);    if (available() < header.length) {      throw new MySQLExtractException("Failed reading header;  You may have an incomplete log file or a very slow file system: " + getBaseName());    }    bfdi.readFully(header);    int typeCode=header[4];    int eventLength=(int)LittleEndianConversion.convert4BytesToLong(header,MysqlBinlog.EVENT_LEN_OFFSET);    if (typeCode == MysqlBinlog.START_EVENT_V3) {      if (eventLength == 69) {        version=MysqlBinlog.BINLOG_V1;        if (logger.isDebugEnabled())         logger.debug("Binlog format is V1");      } else       if (eventLength == 75) {        version=MysqlBinlog.BINLOG_V3;        if (logger.isDebugEnabled())         logger.debug("Binlog format is V3");      } else {        throw new MySQLExtractException("Unexpected start event length: file=" + this.fileName + " length="+ eventLength);      }    } else     if (typeCode == MysqlBinlog.FORMAT_DESCRIPTION_EVENT) {      version=MysqlBinlog.BINLOG_V4;      if (logger.isDebugEnabled())       logger.debug("Binlog format is V4");    } else     if (typeCode == MysqlBinlog.ROTATE_EVENT) {      version=MysqlBinlog.BINLOG_V3;      if (logger.isDebugEnabled())       logger.debug("Binlog format is V3 (special case w/ rotate event)");    } else {      throw new MySQLExtractException("Unexpected start event type code: file=" + this.fileName + " type code="+ typeCode);    }    if (startPosition >= bfdi.getOffset()) {      bfdi.seek(startPosition);    } else {      bfdi.reset();    }  } catch (  FileNotFoundException e) {    throw new MySQLExtractException("Unable to open binlog file",e);  }catch (  IOException e) {    throw new MySQLExtractException("Unable to scan binlog file",e);  }}  }
class C{  public static FlightStick logitechExtreme3D(int port){  Joystick joystick=new Joystick(port);  return FlightStick.create(null,null,null,null,null,null,null,null,null);}  }
class C{  boolean run(File baseDir,String... args){  if (args.length == 0) {    usage(System.out);    return true;  }  List<File> files=new ArrayList<File>();  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.equals("-encoding") && i + 1 < args.length)     encoding=args[++i]; else     if (arg.equals("-gui"))     gui=true; else     if (arg.equals("-q"))     quiet=true; else     if (arg.equals("-v"))     verbose=true; else     if (arg.equals("-t") && i + 1 < args.length)     tags.add(args[++i]); else     if (arg.equals("-ef") && i + 1 < args.length)     excludeFiles.add(new File(baseDir,args[++i])); else     if (arg.equals("-et") && i + 1 < args.length)     excludeTags.add(args[++i]); else     if (arg.equals("-r")) {      if (excludeFiles.size() > 0)       throw new Error("-r must be used before -ef");      File d=baseDir;      while (!new File(d,"TEST.ROOT").exists()) {        d=d.getParentFile();        if (d == null)         throw new Error("cannot find TEST.ROOT");      }      baseDir=d;    } else     if (arg.startsWith("-"))     throw new Error("unknown option: " + arg); else {      while (i < args.length)       files.add(new File(baseDir,args[i++]));    }  }  for (  File file : files) {    if (file.exists())     test(file); else     error("File not found: " + file);  }  if (fileCount != 1)   System.err.println(fileCount + " files read");  if (errors > 0)   System.err.println(errors + " errors");  return (gui || errors == 0);}  }
class C{  public static Value SelectInSeq(Value s,Value test){  TupleValue seq=TupleValue.convert(s);  if (seq == null) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"first","SelectInSeq","sequence",Value.ppr(s.toString())});  }  if (!(test instanceof Applicable)) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"second","SelectInSeq","function",Value.ppr(test.toString())});  }  int len=seq.size();  Applicable ftest=(Applicable)test;  Value[] args=new Value[1];  for (int i=0; i < len; i++) {    args[0]=seq.elems[i];    Value val=ftest.apply(args,EvalControl.Clear);    if (!(val instanceof BoolValue)) {      throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"second","SelectInSeq","boolean-valued function",Value.ppr(test.toString())});    }    if (((BoolValue)val).val)     return IntValue.gen(i + 1);  }  return ValZero;}  }
class C{  private GCActivitySet gcActivitySet(int series){  assert 0 <= series && series < checkpoint.gcTraceSize();  return gcTrace.get(series);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void mouseEntered(MouseEvent evt){}  }
class C{  public FixedParentMemorySubjectData(PermissionService service,Subject parent){  super(service);  this.forcedParent=parent;}  }
class C{  public static BigInteger[] transformRawSignature(byte[] raw) throws IOException {  BigInteger[] output=new BigInteger[2];  output[0]=new BigInteger(1,Arrays.copyOfRange(raw,0,32));  output[1]=new BigInteger(1,Arrays.copyOfRange(raw,32,64));  return output;}  }
class C{  public final static void debug(String s){  if (DEBUG)   debug.println("// Debug: " + s);}  }
class C{  public void addNewFeatureTree(FeaturesObjectTypesEnum type,FeatureTreeNode root){  FeaturesStructure list=this.collection.get(type);  if (list == null) {    list=new FeaturesStructure();    this.collection.put(type,list);  }  if (list.list == null) {    list.list=new ArrayList<>();  }  list.list.add(root);}  }
class C{  public DecoderPro3Window(){  super(Application.getApplicationName());}  }
class C{  long trueDataSize(){  if (!isValidHeader()) {    return 0L;  }  int naxis=getIntValue(NAXIS,0);  if (naxis == 0) {    return 0L;  }  getIntValue(BITPIX);  int[] axes=new int[naxis];  for (int axis=1; axis <= naxis; axis+=1) {    axes[axis - 1]=getIntValue(NAXISn.n(axis),0);  }  boolean isGroup=getBooleanValue(GROUPS,false);  int pcount=getIntValue(PCOUNT,0);  int gcount=getIntValue(GCOUNT,1);  int startAxis=0;  if (isGroup && naxis > 1 && axes[0] == 0) {    startAxis=1;  }  long size=1;  for (int i=startAxis; i < naxis; i+=1) {    size*=axes[i];  }  size+=pcount;  size*=gcount;  size*=Math.abs(getIntValue(BITPIX,0)) / FitsIO.BITS_OF_1_BYTE;  return size;}  }
class C{  public Object evaluate(File file) throws CompilationFailedException, IOException {  return evaluate(new GroovyCodeSource(file,config.getSourceEncoding()));}  }
class C{  public boolean remove(final String label){  if ((label == null) || (label.equals(""))) {    logger.debug("will not remove transitions with empty label");    return false;  }  boolean res=false;  Iterator<Transition> itr=stateTransitionTable.iterator();  while (itr.hasNext()) {    Transition transition=itr.next();    if (transition.checkLabel(label)) {      itr.remove();      res=true;    }  }  return res;}  }
class C{  public FloatMatrix(int newRows,int newColumns){  this(newRows,newColumns,new float[newRows * newColumns]);}  }
class C{  public void printAttlistEnd(char[] space) throws IOException {  if (space != null) {    printSpaces(space,false);  }  writer.write('>');}  }
class C{  protected void buildSuccessful(Notification notification,String successMessage,String prefixConsole){  notification.setMessage(successMessage);  notification.setStatus(FINISHED);  console.print(prefixConsole + "::" + successMessage);}  }
class C{  void nativeObject(Tree.NamedArgumentList argList){  final List<Tree.NamedArgument> nargs=argList.getNamedArguments();  if (argList.getSequencedArgument() == null) {    ArrayList<Tree.NamedArgument> getters=null;    for (    Tree.NamedArgument arg : nargs) {      if (arg instanceof Tree.AttributeArgument) {        if (getters == null) {          getters=new ArrayList<>(nargs.size());        }        getters.add(arg);      }    }    final String tmpobjvar=getters == null ? null : gen.createRetainedTempVar();    if (getters != null) {      gen.out("(",tmpobjvar,"=");    }    gen.out("{");    boolean first=true;    for (    Tree.NamedArgument arg : nargs) {      if (arg instanceof Tree.AttributeArgument == false) {        if (first) {          first=false;        } else {          gen.out(",");        }        String argName=arg.getIdentifier().getText();        if (JsIdentifierNames.isReservedWord(argName)) {          gen.out("$_");        }        gen.out(argName,":");        arg.visit(gen);      }    }    gen.out("}");    if (getters != null) {      for (      Tree.NamedArgument arg : getters) {        if (first) {          first=false;        } else {          gen.out(",");        }        gen.out("Object.defineProperty(",tmpobjvar,",'");        if (arg instanceof Tree.AttributeArgument) {          String argName=arg.getIdentifier().getText();          if (JsIdentifierNames.isReservedWord(argName)) {            gen.out("$_");          }          gen.out(argName,"',{get:function(){ return ");          gen.visitSingleExpression(((Tree.AttributeArgument)arg).getSpecifierExpression().getExpression());          gen.out("},configurable:true,enumerable:true})");        }      }      gen.out(",",tmpobjvar,")");    }  } else {    String arr=null;    boolean isComp=false;    boolean isSpread=argList.getSequencedArgument() != null && !argList.getSequencedArgument().getPositionalArguments().isEmpty() && argList.getSequencedArgument().getPositionalArguments().get(argList.getSequencedArgument().getPositionalArguments().size() - 1) instanceof Tree.SpreadArgument;    if (nargs.size() > 0) {      gen.out("function()");      gen.beginBlock();      arr=names.createTempVariable();      gen.out("var ",arr,"=");    } else {      isComp=argList.getSequencedArgument().getPositionalArguments().size() == 1 && argList.getSequencedArgument().getPositionalArguments().get(0) instanceof Tree.Comprehension;    }    if (isComp) {      gen.out(gen.getClAlias(),"nfor$(");    } else     if (isSpread) {      gen.out(gen.getClAlias(),"tpl$([");    } else {      gen.out("[");    }    boolean first=true;    for (    Tree.PositionalArgument arg : argList.getSequencedArgument().getPositionalArguments()) {      if (arg instanceof Tree.SpreadArgument) {        gen.out("],");        arg.visit(gen);        gen.out(").nativeArray()");      } else {        if (first) {          first=false;        } else {          gen.out(",");        }        arg.visit(gen);      }    }    if (isComp) {      gen.out(")");    } else     if (!isSpread) {      gen.out("]");    }    if (nargs.size() > 0) {      gen.endLine(true);      for (      Tree.NamedArgument arg : nargs) {        gen.out(arr,".",arg.getIdentifier().getText(),"=");        arg.visit(gen);        gen.endLine(true);      }      gen.out("return ",arr,";");      gen.endBlock();      gen.out("()");    }  }}  }
class C{  public CustomerWishListServiceImpl(final GenericDAO<CustomerWishList,Long> genericDao){  super(genericDao);}  }
class C{  public boolean isCreateGetterSetter(){  return JavaRefactoringDescriptorUtil.getBoolean(fArguments,CREATE_GETTER_SETTER,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodevalue.class,args);}  }
class C{  public Random(byte[] randomBytes){  if (randomBytes == null) {    throw new NullPointerException("Random bytes must not be null");  } else   if (randomBytes.length != 32) {    throw new IllegalArgumentException("Random bytes array's length must be 32");  } else {    this.randomBytes=Arrays.copyOf(randomBytes,randomBytes.length);  }}  }
class C{  static boolean promptForYes(String promptText){  return Ascii.toUpperCase(System.console().readLine(promptText + " (y/N): ")).startsWith("Y");}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  public static LiquidNetwork initNetwork(){  Random random=new Random(System.currentTimeMillis());  int id=random.nextInt();  while (usedIds.contains(id)) {    id=random.nextInt();  }  ;  LiquidNetwork net=new LiquidNetwork();  usedIds.add(id);  net.networkID=id;  return net;}  }
class C{  public WidgetProposalComputer(String text,int offset,Element rootElement,Element parentElement,IJavaProject javaProject) throws JavaModelException, UiBinderException {  super(javaProject,text,offset,text.length());  this.rootElement=rootElement;  this.parentElement=parentElement;  packageManager.readFromElement(rootElement);}  }
class C{  public boolean checkAndAdd(int length){  int turn=SingletonRepository.getRuleProcessor().getTurn();  boolean res=check(turn);  if (res) {    add(turn,length);  }  return res;}  }
class C{  private Atom processCommands(String command) throws ParseException {  MacroInfo mac=MacroInfo.Commands.get(command);  int opts=0;  if (mac.hasOptions)   opts=mac.posOpts;  String[] args=getOptsArgs(mac.nbArgs,opts);  args[0]=command;  if (NewCommandMacro.isMacro(command)) {    String ret=(String)mac.invoke(this,args);    insert(spos,pos,ret);    return null;  }  return (Atom)mac.invoke(this,args);}  }
class C{  public static String toLowerString(String s){  int len=s.length();  int idx=0;  for (; idx < len; idx++) {    if (isUpper(s.charAt(idx))) {      break;    }  }  if (idx == len) {    return s;  }  char[] buf=new char[len];  for (int i=0; i < len; i++) {    char c=s.charAt(i);    buf[i]=(i < idx) ? c : toLower(c);  }  return new String(buf);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  protected void doRenderGraphic(DrawContext dc){  this.circle.render(dc);}  }
class C{  public int findReferencePosition(int offset,boolean danglingElse,boolean matchBrace,boolean matchParen,boolean matchCase){  fIndent=0;  fAlign=JavaHeuristicScanner.NOT_FOUND;  fPosition=offset;  if (matchBrace) {    if (skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE)) {      try {        int lineOffset=fDocument.getLineOffset(fLine);        if (lineOffset <= fPosition && fDocument.get(lineOffset,fPosition - lineOffset).trim().length() == 0)         return fPosition;      } catch (      BadLocationException e) {      }      int pos=skipToStatementStart(true,true);      fIndent=0;      return pos;    } else {      int pos=findReferencePosition(offset,danglingElse,false,matchParen,matchCase);      fIndent--;      return pos;    }  }  if (matchParen) {    if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN))     return fPosition; else {      int pos=findReferencePosition(offset,danglingElse,matchBrace,false,matchCase);      fIndent--;      return pos;    }  }  if (matchCase) {    return matchCaseAlignment();  }  nextToken();switch (fToken) {case Symbols.TokenGREATERTHAN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:    int pos=fPosition;  if (!skipScope())   fPosition=pos;case Symbols.TokenSEMICOLON:return skipToStatementStart(danglingElse,false);case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:return handleScopeIntroduction(offset + 1);case Symbols.TokenEOF:return JavaHeuristicScanner.NOT_FOUND;case Symbols.TokenEQUAL:fIndent=fPrefs.prefAssignmentIndent;return fPosition;case Symbols.TokenCOLON:fIndent=fPrefs.prefCaseBlockIndent;return fPosition;case Symbols.TokenQUESTIONMARK:if (fPrefs.prefTernaryDeepAlign) {setFirstElementAlignment(fPosition,offset + 1);return fPosition;} else {fIndent=fPrefs.prefTernaryIndent;return fPosition;}case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenELSE:fIndent=fPrefs.prefSimpleIndent;return fPosition;case Symbols.TokenTRY:return skipToStatementStart(danglingElse,false);case Symbols.TokenRPAREN:int line=fLine;if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN)) {int scope=fPosition;nextToken();if (fToken == Symbols.TokenIF || fToken == Symbols.TokenWHILE || fToken == Symbols.TokenFOR) {fIndent=fPrefs.prefSimpleIndent;return fPosition;}fPosition=scope;if (looksLikeMethodDecl()) {return skipToStatementStart(danglingElse,false);}if (fToken == Symbols.TokenCATCH) {return skipToStatementStart(danglingElse,false);}fPosition=scope;if (looksLikeAnonymousTypeDecl()) {return skipToStatementStart(danglingElse,false);}}fPosition=offset;fLine=line;case Symbols.TokenCOMMA:default :return skipToPreviousListItemOrListStart();}}  }
class C{  public void add(ObjectType type,boolean explicit){  int index=factory.getIndexOfType(type);  if (!exceptionSet.get(index)) {    ++size;  }  exceptionSet.set(index);  if (explicit) {    explicitSet.set(index);  }  commonSupertype=null;}  }
class C{  public final boolean isForwardable(){  return flags[FORWARDABLE_TICKET_FLAG];}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @SuppressWarnings("deprecation") @TargetApi(Build.VERSION_CODES.ECLAIR) @SuppressLint("NewApi") private void dumpEvent(MotionEvent event){  String names[]={"DOWN","UP","MOVE","CANCEL","OUTSIDE","POINTER_DOWN","POINTER_UP","7?","8?","9?"};  @SuppressWarnings("MismatchedQueryAndUpdateOfStringBuilder") StringBuilder sb=new StringBuilder();  int action=event.getAction();  int actionCode=action & MotionEvent.ACTION_MASK;  sb.append("event ACTION_").append(names[actionCode]);  if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {    sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);    sb.append(")");  }  sb.append("[");  for (int i=0; i < event.getPointerCount(); i++) {    sb.append("#").append(i);    sb.append("(pid ").append(event.getPointerId(i));    sb.append(")=").append((int)event.getX(i));    sb.append(",").append((int)event.getY(i));    if (i + 1 < event.getPointerCount())     sb.append(";");  }  sb.append("]");}  }
class C{  final private void cycle(IntGrid2D d,IntGrid2D buffer){  buffer.setTo(d);  int x;  int y;  int w=d.getWidth();  int h=d.getHeight();  for (y=0; y < h; y++) {    for (x=0; x < w; x++)     computeNextState(d,buffer,x,y);  }  for (y=0; y < h; y+=2) {    for (x=0; x < w; x+=2)     turn22(d,x,y);  }  for (y=1; y < h; y+=2) {    for (x=1; x < w; x+=2)     turn22(d,x,y);  }}  }
class C{  public StringKernel(Instances data,int cacheSize,int subsequenceLength,double lambda,boolean debug) throws Exception {  setDebug(debug);  setCacheSize(cacheSize);  setInternalCacheSize(200003);  setSubsequenceLength(subsequenceLength);  setMaxSubsequenceLength(-1);  setLambda(lambda);  buildKernel(data);}  }
class C{  public void doBucketChecks(long now){  boolean survival=isInSurvivalMode();  if (survival && now - timeOfLastPingCheck > DHTConstants.BOOTSTRAP_MIN_INTERVAL)   return;  timeOfLastPingCheck=now;  mergeBuckets();  int newEntryCount=0;  Map<InetAddress,KBucket> addressDedup=new HashMap<>(num_entries);  for (  RoutingTableEntry e : routingTableCOW.entries) {    KBucket b=e.bucket;    List<KBucketEntry> entries=b.getEntries();    Set<Key> localIds=usedIDs.snapshot();    boolean wasFull=b.getNumEntries() >= DHTConstants.MAX_ENTRIES_PER_BUCKET;    for (    KBucketEntry entry : entries) {      if (localIds.contains(entry.getID()) || (wasFull && dht.getBootStrapNodes().contains(entry.getAddress()))) {        b.removeEntryIfBad(entry,true);        continue;      }      addressDedup.compute(entry.getAddress().getAddress(),null);    }    boolean refreshNeeded=b.needsToBeRefreshed();    boolean replacementNeeded=b.needsReplacementPing();    if (refreshNeeded || replacementNeeded)     tryPingMaintenance(b,"Refreshing Bucket #" + e.prefix,null,null);    if (!survival) {      b.promoteVerifiedReplacement();    }    newEntryCount+=e.bucket.getNumEntries();  }  num_entries=newEntryCount;  rebuildAddressCache();  decayThrottle();}  }
class C{  public void begin(){  this.zkClient.start();  this.lastEmittedBeginTxPosition=openReplicatorClient.initialize(this.spoutConfig.getMysqlConfig(),this.spoutConfig.getZkBinLogStateConfig(),this.txQueue);  openReplicatorClient.start();}  }
class C{  public void rotateLog(){  initialize(m_adempiereHome,true,Ini.isClient());}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.startBT=this.findView(R.id.start_bt);}  }
class C{  @Override public int delete(String key){  checkKey(key);  return database.delete(TABLE_NAME,COLUMN_KEY + " = ?",new String[]{key});}  }
class C{  public BillingAdapterConnectionException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime){  registerListener(requestUrl,target,methods,expireTime,null);}  }
class C{  public void addTransaction(SIPClientTransaction clientTransaction){  if (isLoggingEnabled())   stackLogger.logDebug("added transaction " + clientTransaction);  addTransactionHash(clientTransaction);}  }
class C{  public int indexOfSegment(Segment segment){  return selectedSegments.indexOf(segment);}  }
class C{  public CstString(ByteArray bytes){  if (bytes == null) {    throw new NullPointerException("bytes == null");  }  this.bytes=bytes;  this.string=utf8BytesToString(bytes).intern();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION;}  }
class C{  protected ExportedVariableStatementImpl(){  super();}  }
class C{  public PostLogProfilerProcessor(String filename,PrintStream out) throws Exception {  FileReader f=new FileReader(filename);  LineNumberReader l=new LineNumberReader(f);  String line;  boolean blankLine;  StringBuffer sql=new StringBuffer();  do {    line=l.readLine();    if (line != null) {      blankLine=line.length() == 0;      lineNo++;      if (blankLine) {        processSql(sql);        sql=new StringBuffer();      } else {        sql.append(line);      }    }  } while (line != null);  out.println("processed " + lineNo + " lines.");  f.close();  out.println("Number of sql statements:  " + totalSql);  out.println("Total number of msec    :  " + totalMsec);  if (totalMsec > 0) {    out.println("Average msec/statement  :  " + totalSql / totalMsec);  }  int flaggedSqlStmts=flaggedSql.size();  if (flaggedSqlStmts > 0) {    out.println("Sql statements that took more than " + threshold + " msec were flagged.");    out.println("Flagged sql statements              :  " + flaggedSqlStmts);    out.println("Flagged sql Total number of msec    :  " + flaggedSqlTotalMsec);    out.println("Flagged sql Average msec/statement  :  " + flaggedSqlTotalMsec / flaggedSqlStmts);    out.println("sorting...");    Object[] flaggedSqlArray=flaggedSql.toArray();    Arrays.sort(flaggedSqlArray);    int execTimeSize=("" + maxMsec).length();    if (topOffenderCount > flaggedSqlArray.length) {      topOffenderCount=flaggedSqlArray.length;    }    out.println("top " + topOffenderCount + " offender"+ (topOffenderCount == 1 ? "" : "s")+ ":");    ProfiledSql p;    for (int i=0; i < topOffenderCount; i++) {      p=(ProfiledSql)flaggedSqlArray[i];      out.println(Utilities.rightJustify(execTimeSize,"" + p.getExecTime()) + " " + p.getSql());    }  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  buffer.setAtIndexAndInc(byte3);  buffer.setAtIndexAndInc(byte4);  super.loadByteArray(buffer);}  }
class C{  final public int lastIndexOf(final MutableString pattern){  return lastIndexOf(pattern,length());}  }
class C{  public void addCreds(Credentials creds) throws IOException, Asn1Exception {  creds.cname.writePrincipal(this);  creds.sname.writePrincipal(this);  creds.key.writeKey(this);  write32((int)(creds.authtime.getTime() / 1000));  if (creds.starttime != null)   write32((int)(creds.starttime.getTime() / 1000)); else   write32(0);  write32((int)(creds.endtime.getTime() / 1000));  if (creds.renewTill != null)   write32((int)(creds.renewTill.getTime() / 1000)); else   write32(0);  if (creds.isEncInSKey) {    write8(1);  } else   write8(0);  writeFlags(creds.flags);  if (creds.caddr == null)   write32(0); else   creds.caddr.writeAddrs(this);  if (creds.authorizationData == null) {    write32(0);  } else   creds.authorizationData.writeAuth(this);  writeTicket(creds.ticket);  writeTicket(creds.secondTicket);}  }
class C{  public void onBindViewHolder(PreferenceViewHolder holder){  if (!constraintsMet()) {    final TextView summaryView=(TextView)holder.findViewById(android.R.id.summary);    if (summaryView != null) {      summaryView.setText(mConstraintViolationSummary);      summaryView.setVisibility(View.VISIBLE);    }  }}  }
class C{  public VaultToken initializeVault(){  int createKeys=2;  int requiredKeys=2;  VaultInitializationResponse initialized=vaultOperations.opsForSys().initialize(VaultInitializationRequest.create(createKeys,requiredKeys));  for (int i=0; i < requiredKeys; i++) {    VaultUnsealStatus unsealStatus=vaultOperations.opsForSys().unseal(initialized.getKeys().get(i));    if (!unsealStatus.isSealed()) {      break;    }  }  return initialized.getRootToken();}  }
class C{  public SoftValueHashMap(int initialCapacity,float loadFactor){  hash=new HashMap(initialCapacity,loadFactor);}  }
class C{  private boolean allowNotificationEmission(ObjectName name,TargetedNotification tn){  try {    if (checkNotificationEmission) {      checkMBeanPermission(name,"addNotificationListener");    }    if (notificationAccessController != null) {      notificationAccessController.fetchNotification(connectionId,name,tn.getNotification(),getSubject());    }    return true;  } catch (  SecurityException e) {    if (logger.debugOn()) {      logger.debug("fetchNotifs","Notification " + tn.getNotification() + " not forwarded: the "+ "caller didn't have the required access rights");    }    return false;  }catch (  Exception e) {    if (logger.debugOn()) {      logger.debug("fetchNotifs","Notification " + tn.getNotification() + " not forwarded: "+ "got an unexpected exception: "+ e);    }    return false;  }}  }
class C{  public void start(final TraceList trace,final Set<BreakpointAddress> relocatedAddresses,final int maximumHits){  Preconditions.checkNotNull(relocatedAddresses,"IE00762: Address list can not be null");  Preconditions.checkArgument(!relocatedAddresses.isEmpty(),"IE00787: Address list can not be empty");  for (  final BreakpointAddress address : relocatedAddresses) {    Preconditions.checkNotNull(address,"IE00788: Address list contains invalid elements");  }  lock.lock();  eventList=trace;  debugger.addListener(m_debuggerListener);  debugger.getProcessManager().addListener(m_processListener);  breakpointManager.addListener(m_breakpointManagerListener);  NaviLogger.info("Starting new event list with name %s",trace.getName());  final Set<BreakpointAddress> collectedAddresses=new HashSet<BreakpointAddress>();  for (  final BreakpointAddress address : relocatedAddresses) {    if (EchoBreakpointCollector.isBlocked(breakpointManager,address)) {      continue;    }    if (!debugger.isConnected()) {      lock.unlock();      return;    }    collectedAddresses.add(address);  }  breakpointManager.addBreakpoints(BreakpointType.ECHO,collectedAddresses);  for (  final BreakpointAddress address : collectedAddresses) {    try {      activeEchoBreakpoints.put(address,maximumHits);      for (      final ITraceLoggerListener listener : listeners) {        listener.addedBreakpoint();      }    } catch (    final IllegalArgumentException exception) {      CUtilityFunctions.logException(exception);    }  }  if (activeEchoBreakpoints.isEmpty()) {    removeListeners();  }  lock.unlock();}  }
class C{  protected static Object object(int element){  return new Integer(element);}  }
class C{  @NotNull public PsiQuery siblings(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    final PsiElement parent=element.getParent();    for (    final PsiNamedElement namedSibling : PsiTreeUtil.findChildrenOfType(parent,clazz)) {      if ((!namedSibling.equals(element)) && (name.equals(namedSibling.getName()))) {        result.add(namedSibling);      }    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public String pref(){  if (chars[0] != 0) {    return new String(chars,1,chars[0] - 1);  }  return "";}  }
class C{  public static void playSoundBuffer(byte[] wavData){  float sampleRate=11200.0f;  int sampleSizeInBits=8;  int channels=1;  boolean signed=(sampleSizeInBits > 8);  boolean bigEndian=true;  AudioFormat format=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);  SourceDataLine line;  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);  if (!AudioSystem.isLineSupported(info)) {    log.warn("line not supported: " + info);    return;  }  try {    line=(SourceDataLine)AudioSystem.getLine(info);    line.open(format);  } catch (  LineUnavailableException ex) {    log.error("error opening line: " + ex);    return;  }  line.start();  line.write(wavData,0,wavData.length);}  }
class C{  public Array createArray(){  ArrayImpl array=new ArrayImpl();  return array;}  }
class C{  public ToStringBuilder append(final String fieldName,final short[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static void sendChatPacket(Player player,String json) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException, InstantiationException, NoSuchFieldException {  Object craftPlayer=Class.forName(PackageType.CRAFTBUKKIT + ".entity.CraftPlayer").cast(player);  Object craftHandle=Class.forName(PackageType.CRAFTBUKKIT + ".entity.CraftPlayer").getMethod("getHandle").invoke(craftPlayer);  Object playerConnection=Class.forName(PackageType.MINECRAFT_SERVER + ".EntityPlayer").getField("playerConnection").get(craftHandle);  Object parsedMessage;  try {    parsedMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent$ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),json));  } catch (  ClassNotFoundException e) {    parsedMessage=Class.forName(PackageType.MINECRAFT_SERVER + ".ChatSerializer").getMethod("a",String.class).invoke(null,ChatColor.translateAlternateColorCodes("&".charAt(0),json));  }  Object packetPlayOutChat=Class.forName(PackageType.MINECRAFT_SERVER + ".PacketPlayOutChat").getConstructor(Class.forName(PackageType.MINECRAFT_SERVER + ".IChatBaseComponent")).newInstance(parsedMessage);  Class.forName(PackageType.MINECRAFT_SERVER + ".PlayerConnection").getMethod("sendPacket",Class.forName(PackageType.MINECRAFT_SERVER + ".Packet")).invoke(playerConnection,packetPlayOutChat);}  }
class C{  public void test_ConstructorLjava_io_FileI() throws IOException {  zfile.close();  File file=new File(tempFileName);  ZipFile zip=new ZipFile(file,ZipFile.OPEN_DELETE | ZipFile.OPEN_READ);  zip.close();  assertTrue("Zip should not exist",!file.exists());  file=new File(tempFileName);  file.delete();  try {    zip=new ZipFile(file,ZipFile.OPEN_READ);    fail("IOException expected");  } catch (  IOException ee) {  }  file=new File(tempFileName);  try {    zip=new ZipFile(file,-1);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException ee) {  }}  }
class C{  static boolean isFlagSet(short flags,short flag){  return (flags & flag) == flag;}  }
class C{  public void alignItemsVertically(){  alignItemsVertically(kDefaultPadding);}  }
class C{  public void showResultsDialog(final boolean visible){  if (m_dialog != null) {    m_dialog.setVisible(visible);  }}  }
class C{  public JScrollPane(){  this(null,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  static int difference(StringEncoder encoder,String s1,String s2) throws EncoderException {  return differenceEncoded(encoder.encode(s1),encoder.encode(s2));}  }
class C{  public PTBLexer(Reader r,boolean invertable,boolean tokenizeCRs){  this(r);  tokenFactory=new FeatureLabelTokenFactory();  this.invertable=invertable;  this.tokenizeCRs=tokenizeCRs;}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  Object[] cs=c.toArray();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    if (cs.length == 0)     return false;    int numMoved=len - index;    Object[] newElements;    if (numMoved == 0)     newElements=Arrays.copyOf(elements,len + cs.length); else {      newElements=new Object[len + cs.length];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + cs.length,numMoved);    }    System.arraycopy(cs,0,newElements,index,cs.length);    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public static boolean isEmpty(String s){  return (s == null) || s.length() == 0;}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (inlineComment_1: ");  result.append(inlineComment_1);  result.append(')');  return result.toString();}  }
class C{  @Override public Vertex parseVariable(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex variable=parseElementName(Primitive.VARIABLE,stream,elements,debug,network);  stream.skipWhitespace();  ensureNext('{',stream);  stream.skipWhitespace();  while (stream.peek() != '}') {    if (stream.atEnd()) {      throw new SelfParseException("Unexpected end of variable, missing '}'",stream);    }    if (stream.peek() == ':') {      stream.skip();      boolean more=true;      while (more) {        boolean not=false;        stream.skipWhitespace();        if (stream.peek() == '!') {          not=true;          stream.next();        }        Vertex value=parseElement(stream,elements,debug,network);        if (not) {          variable.removeRelationship(Primitive.EQUALS,value);        } else {          variable.addRelationship(Primitive.EQUALS,value);        }        stream.skipWhitespace();        more=stream.peek() == ',';        if (more) {          stream.next();        }      }    } else {      String name=stream.nextWord();      if (name == null || !Character.isAlphabetic(name.charAt(0))) {        throw new SelfParseException("Invalid variable attribute: " + name,stream);      }      Vertex attribute=network.createVertex(new Primitive(name));      stream.skipWhitespace();      ensureNext(':',stream);      boolean more=true;      while (more) {        boolean not=false;        stream.skipWhitespace();        if (stream.peek() == '!') {          not=true;          stream.skip();        }        Vertex value=parseElement(stream,elements,debug,network);        if (not) {          variable.removeRelationship(attribute,value);        } else {          variable.addRelationship(attribute,value);        }        stream.skipWhitespace();        more=stream.peek() == ',';        if (more) {          stream.skip();          stream.skipWhitespace();        }      }    }    stream.skipWhitespace();    ensureNext(';',stream);    stream.skipWhitespace();  }  ensureNext('}',stream);  return variable;}  }
class C{  public RestApiClient(String url,int port,AuthenticationToken authenticationToken){  if (!url.startsWith("http")) {    url="http://" + url;  }  restClient=new RestClientBuilder(url + ":" + port).authenticationToken(authenticationToken).connectionTimeout(5000).build();}  }
class C{  @Override public int compareTo(Vertex o){  if (this.x > o.x)   return 1;  if (this.x < o.x)   return -1;  if (this.y > o.y)   return 1;  if (this.y < o.y)   return -1;  if (this.z > o.z)   return 1;  if (this.z < o.z)   return -1;  return 0;}  }
class C{  public ScheduledExecutorService eventLoop(){  return eventLoop;}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  protected void drawCubic(Canvas c,LineDataSet dataSet,List<Entry> entries){  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int diff=(entryFrom == entryTo) ? 1 : 0;  int minx=Math.max(dataSet.getEntryPosition(entryFrom) - diff,0);  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryPosition(entryTo) + 1),entries.size());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  float intensity=dataSet.getCubicIntensity();  cubicPath.reset();  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);  if (size - minx >= 2) {    float prevDx=0f;    float prevDy=0f;    float curDx=0f;    float curDy=0f;    Entry prevPrev=entries.get(minx);    Entry prev=entries.get(minx);    Entry cur=entries.get(minx);    Entry next=entries.get(minx + 1);    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);    prevDx=(cur.getXIndex() - prev.getXIndex()) * intensity;    prevDy=(cur.getVal() - prev.getVal()) * intensity;    curDx=(next.getXIndex() - cur.getXIndex()) * intensity;    curDy=(next.getVal() - cur.getVal()) * intensity;    cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    for (int j=minx + 1, count=Math.min(size,entries.size() - 1); j < count; j++) {      prevPrev=entries.get(j == 1 ? 0 : j - 2);      prev=entries.get(j - 1);      cur=entries.get(j);      next=entries.get(j + 1);      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }    if (size > entries.size() - 1) {      prevPrev=entries.get((entries.size() >= 3) ? entries.size() - 3 : entries.size() - 2);      prev=entries.get(entries.size() - 2);      cur=entries.get(entries.size() - 1);      next=cur;      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;      curDy=(next.getVal() - prev.getVal()) * intensity;      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }  }  if (dataSet.isDrawFilledEnabled()) {    cubicFillPath.reset();    cubicFillPath.addPath(cubicPath);    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,entryFrom.getXIndex(),entryFrom.getXIndex() + size);  }  mRenderPaint.setColor(dataSet.getColor());  mRenderPaint.setStyle(Paint.Style.STROKE);  trans.pathValueToPixel(cubicPath);  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);  mRenderPaint.setPathEffect(null);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static int hashCode(float[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public List fetchRowsByIdRelacion(String idRelacion){  return fetchRowsByIdRelacion(idRelacion,TipoUInstalacion.ALL.getIdentificador());}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  public Builder<I,O> asBuilder(){  return new Builder<>(name,typeIn,typeOut,converter);}  }
class C{  public GuildDeleteHandler(ImplDiscordAPI api){  super(api,true,"GUILD_DELETE");}  }
class C{  public static <T>T notNull(final T argument,final String name){  if (argument == null) {    throw new IllegalArgumentException(name + " should not be null!");  }  return argument;}  }
class C{  public static double CalorieBurned(double activity,double timeHour){  return CalorieBurned(activity,weightKg,timeHour);}  }
class C{  private void updateContentDescription(Time time){  int flags=DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_24HOUR;  String contentDescription=DateUtils.formatDateTime(this.getContext(),time.toMillis(false),flags);  setContentDescription(contentDescription);}  }
class C{  private int findEndOfLabel(String literal){  return literal.lastIndexOf("\"");}  }
class C{  private void handle302MovedTemporarily(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("302 Moved Temporarily response received");  }  SipResponse resp=ctx.getSipResponse();  ContactHeader contactHeader=(ContactHeader)resp.getStackMessage().getHeader(ContactHeader.NAME);  String newUri=contactHeader.getAddress().getURI().toString();  mDialogPath.setTarget(newUri);  mDialogPath.incrementCseq();  if (sLogger.isActivated()) {    sLogger.info("Send REGISTER to new address");  }  SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,ctx.getTransaction().getRequest().getExpires().getExpires() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE,mInstanceId,mRcsSettings.isSipKeepAliveEnabled());  sendRegister(register);}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public final Graph search(){  return search(independenceTest.getVariables());}  }
class C{  @Override public void testFailure(Failure failure){  LoggingUtils.getEvoLogger().info("* Failure: " + failure.getMessage());  for (  StackTraceElement s : failure.getException().getStackTrace()) {    LoggingUtils.getEvoLogger().info("   " + s.toString());  }  this.testResult.setSuccessful(false);  this.testResult.setTrace(failure.getTrace());  this.testResult.incrementFailureCount();}  }
class C{  public void bindEntity(Class<?> cls){  Annotation annotation=getFirstAnnotation(cls,Arrays.asList(Include.class,Exclude.class));  Include include=annotation instanceof Include ? (Include)annotation : null;  Exclude exclude=annotation instanceof Exclude ? (Exclude)annotation : null;  if (exclude != null) {    log.trace("Exclude {}",cls.getName());    return;  }  if (include == null) {    log.trace("Missing include {}",cls.getName());    return;  }  String type;  if ("".equals(include.type())) {    type=WordUtils.uncapitalize(cls.getSimpleName());  } else {    type=include.type();  }  Class<?> duplicate=bindJsonApiToEntity.put(type,cls);  if (duplicate != null && !duplicate.equals(cls)) {    log.error("Duplicate binding {} for {}, {}",type,cls,duplicate);    throw new DuplicateMappingException(type + " " + cls.getName()+ ":"+ duplicate.getName());  }  entityBindings.putIfAbsent(lookupEntityClass(cls),new EntityBinding(this,cls,type));  if (include.rootLevel()) {    bindEntityRoots.add(cls);  }}  }
class C{  private void checkForModuleOrApplication(StandardDefs standardDefs,TypeAnalyzer typeAnalyzer,ClassInfo info,QName qName,Configuration configuration){  if (info != null) {    if (info.implementsInterface(standardDefs.getModulesPackage(),StandardDefs.INTERFACE_IMODULE_NO_PACKAGE) || info.extendsClass(StandardDefs.CLASS_APPLICATION) || info.extendsClass(StandardDefs.CLASS_SPARK_APPLICATION)) {      ClassInfo rootInfo=typeAnalyzer.getClassInfo(configuration.getMainDefinition());      if (rootInfo != null && !rootInfo.implementsInterface(qName.getNamespace(),qName.getLocalPart()) && !rootInfo.extendsClass(qName.toString())) {        ThreadLocalToolkit.getLogger().log(new CompiledAsAComponent(qName.toString(),configuration.getMainDefinition()));      }    }  }}  }
class C{  private void initialize(){  this.setLayout(new BorderLayout());  this.setSize(645,321);  this.add(getJSplitPane(),java.awt.BorderLayout.CENTER);}  }
class C{  public double eulerMacheroniTerm(int N){  try {    return -MathsUtils.digamma(1) + MathsUtils.digamma(N);  } catch (  Exception e) {    return 0;  }}  }
class C{  public static boolean matchesRange(ByteBuffer buffer,int start,byte[] pattern){  for (int i=0; i < pattern.length; ++i) {    if (pattern[i] != buffer.get(start + i)) {      return false;    }  }  return true;}  }
class C{  private int nextChar() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        if (yylength() == 1) {          return zzBuffer[zzStartRead];        } else {          outputSegment.append(yytext());          return outputSegment.nextChar();        }      }case 55:    break;case 2:{    inputStart=yychar;    inputSegment.clear();    inputSegment.append('<');    yybegin(LEFT_ANGLE_BRACKET);  }case 56:break;case 3:{inputStart=yychar;inputSegment.clear();inputSegment.append('&');yybegin(AMPERSAND);}case 57:break;case 4:{yypushback(yylength());outputSegment=inputSegment;outputSegment.restart();yybegin(YYINITIAL);return outputSegment.nextChar();}case 58:break;case 5:{inputSegment.append('#');yybegin(NUMERIC_CHARACTER);}case 59:break;case 6:{int matchLength=yylength();inputSegment.write(zzBuffer,zzStartRead,matchLength);if (matchLength <= 7) {String decimalCharRef=yytext();int codePoint=0;try {codePoint=Integer.parseInt(decimalCharRef);} catch (Exception e) {assert false : "Exception parsing code point '" + decimalCharRef + "'";}if (codePoint <= 0x10FFFF) {outputSegment=entitySegment;outputSegment.clear();if (codePoint >= Character.MIN_SURROGATE && codePoint <= Character.MAX_SURROGATE) {outputSegment.unsafeWrite(REPLACEMENT_CHARACTER);} else {outputSegment.setLength(Character.toChars(codePoint,outputSegment.getArray(),0));}yybegin(CHARACTER_REFERENCE_TAIL);} else {outputSegment=inputSegment;yybegin(YYINITIAL);return outputSegment.nextChar();}} else {outputSegment=inputSegment;yybegin(YYINITIAL);return outputSegment.nextChar();}}case 60:break;case 7:{cumulativeDiff+=inputSegment.length() + yylength() - outputSegment.length();addOffCorrectMap(outputCharCount + outputSegment.length(),cumulativeDiff);yybegin(YYINITIAL);return outputSegment.nextChar();}case 61:break;case 8:{inputSegment.write(zzBuffer,zzStartRead,yylength());if (null != escapedTags && escapedTags.contains(zzBuffer,zzStartRead,yylength())) {yybegin(START_TAG_TAIL_INCLUDE);} else {yybegin(START_TAG_TAIL_SUBSTITUTE);}}case 62:break;case 9:{inputSegment.write(zzBuffer,zzStartRead,yylength());if (null != escapedTags && escapedTags.contains(zzBuffer,zzStartRead,yylength())) {yybegin(START_TAG_TAIL_INCLUDE);} else {yybegin(START_TAG_TAIL_EXCLUDE);}}case 63:break;case 10:{inputSegment.append('!');yybegin(BANG);}case 64:break;case 11:{inputSegment.write(zzBuffer,zzStartRead,yylength());yybegin(LEFT_ANGLE_BRACKET_SPACE);}case 65:break;case 12:{inputSegment.append('/');yybegin(LEFT_ANGLE_BRACKET_SLASH);}case 66:break;case 13:{inputSegment.append(yytext());}case 67:break;case 14:{cumulativeDiff+=inputSegment.length() + yylength();addOffCorrectMap(outputCharCount,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);}case 68:break;case 15:{}case 69:break;case 16:{restoreState=SCRIPT_COMMENT;yybegin(SINGLE_QUOTED_STRING);}case 70:break;case 17:{restoreState=SCRIPT_COMMENT;yybegin(DOUBLE_QUOTED_STRING);}case 71:break;case 18:{inputSegment.write(zzBuffer,zzStartRead,yylength());if (null != escapedTags && escapedTags.contains(zzBuffer,zzStartRead,yylength())) {yybegin(END_TAG_TAIL_INCLUDE);} else {yybegin(END_TAG_TAIL_SUBSTITUTE);}}case 72:break;case 19:{inputSegment.write(zzBuffer,zzStartRead,yylength());if (null != escapedTags && escapedTags.contains(zzBuffer,zzStartRead,yylength())) {yybegin(END_TAG_TAIL_INCLUDE);} else {yybegin(END_TAG_TAIL_EXCLUDE);}}case 73:break;case 20:{inputSegment.write(zzBuffer,zzStartRead,yylength());}case 74:break;case 21:{if (yylength() == 1) {return zzBuffer[zzStartRead];} else {outputSegment.append(yytext());return outputSegment.nextChar();}}case 75:break;case 22:{previousRestoreState=restoreState;restoreState=SERVER_SIDE_INCLUDE;yybegin(SINGLE_QUOTED_STRING);}case 76:break;case 23:{previousRestoreState=restoreState;restoreState=SERVER_SIDE_INCLUDE;yybegin(DOUBLE_QUOTED_STRING);}case 77:break;case 24:{yybegin(restoreState);restoreState=previousRestoreState;}case 78:break;case 25:{inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;yybegin(YYINITIAL);return outputSegment.nextChar();}case 79:break;case 26:{cumulativeDiff+=inputSegment.length() + yylength() - 1;addOffCorrectMap(outputCharCount + 1,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return BLOCK_LEVEL_END_TAG_REPLACEMENT;}case 80:break;case 27:{cumulativeDiff+=inputSegment.length() + yylength();addOffCorrectMap(outputCharCount,cumulativeDiff);inputSegment.clear();outputSegment=inputSegment;yybegin(YYINITIAL);}case 81:break;case 28:{cumulativeDiff+=inputSegment.length() + yylength() - 1;addOffCorrectMap(outputCharCount + 1,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return BLOCK_LEVEL_START_TAG_REPLACEMENT;}case 82:break;case 29:{restoreState=STYLE_COMMENT;yybegin(SINGLE_QUOTED_STRING);}case 83:break;case 30:{restoreState=STYLE_COMMENT;yybegin(DOUBLE_QUOTED_STRING);}case 84:break;case 31:{int length=yylength();inputSegment.write(zzBuffer,zzStartRead,length);entitySegment.clear();char ch=entityValues.get(zzBuffer,zzStartRead,length).charValue();entitySegment.append(ch);outputSegment=entitySegment;yybegin(CHARACTER_REFERENCE_TAIL);}case 85:break;case 32:{int matchLength=yylength();inputSegment.write(zzBuffer,zzStartRead,matchLength);if (matchLength <= 6) {String hexCharRef=new String(zzBuffer,zzStartRead + 1,matchLength - 1);int codePoint=0;try {codePoint=Integer.parseInt(hexCharRef,16);} catch (Exception e) {assert false : "Exception parsing hex code point '" + hexCharRef + "'";}if (codePoint <= 0x10FFFF) {outputSegment=entitySegment;outputSegment.clear();if (codePoint >= Character.MIN_SURROGATE && codePoint <= Character.MAX_SURROGATE) {outputSegment.unsafeWrite(REPLACEMENT_CHARACTER);} else {outputSegment.setLength(Character.toChars(codePoint,outputSegment.getArray(),0));}yybegin(CHARACTER_REFERENCE_TAIL);} else {outputSegment=inputSegment;yybegin(YYINITIAL);return outputSegment.nextChar();}} else {outputSegment=inputSegment;yybegin(YYINITIAL);return outputSegment.nextChar();}}case 86:break;case 33:{if (inputSegment.length() > 2) {inputSegment.append(yytext());} else {yybegin(COMMENT);}}case 87:break;case 34:{yybegin(YYINITIAL);if (escapeBR) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;return outputSegment.nextChar();} else {cumulativeDiff+=inputSegment.length() + yylength() - 1;addOffCorrectMap(outputCharCount + 1,cumulativeDiff);inputSegment.reset();return BR_START_TAG_REPLACEMENT;}}case 88:break;case 35:{cumulativeDiff+=yychar - inputStart + yylength();addOffCorrectMap(outputCharCount,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);}case 89:break;case 36:{yybegin(SCRIPT);}case 90:break;case 37:{yybegin(YYINITIAL);if (escapeBR) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;return outputSegment.nextChar();} else {cumulativeDiff+=inputSegment.length() + yylength() - 1;addOffCorrectMap(outputCharCount + 1,cumulativeDiff);inputSegment.reset();return BR_END_TAG_REPLACEMENT;}}case 91:break;case 38:{cumulativeDiff+=yylength();addOffCorrectMap(outputCharCount,cumulativeDiff);yybegin(YYINITIAL);}case 92:break;case 39:{yybegin(restoreState);}case 93:break;case 40:{yybegin(STYLE);}case 94:break;case 41:{yybegin(SCRIPT_COMMENT);}case 95:break;case 42:{yybegin(STYLE_COMMENT);}case 96:break;case 43:{restoreState=COMMENT;yybegin(SERVER_SIDE_INCLUDE);}case 97:break;case 44:{restoreState=SCRIPT_COMMENT;yybegin(SERVER_SIDE_INCLUDE);}case 98:break;case 45:{restoreState=STYLE_COMMENT;yybegin(SERVER_SIDE_INCLUDE);}case 99:break;case 46:{yybegin(STYLE);if (escapeSTYLE) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;inputStart+=1 + yylength();return outputSegment.nextChar();}}case 100:break;case 47:{yybegin(SCRIPT);if (escapeSCRIPT) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;inputStart+=1 + yylength();return outputSegment.nextChar();}}case 101:break;case 48:{if (inputSegment.length() > 2) {inputSegment.append(yytext());} else {cumulativeDiff+=inputSegment.length() + yylength();addOffCorrectMap(outputCharCount,cumulativeDiff);inputSegment.clear();yybegin(CDATA);}}case 102:break;case 49:{inputSegment.clear();yybegin(YYINITIAL);cumulativeDiff+=yychar - inputStart;int offsetCorrectionPos=outputCharCount;int returnValue;if (escapeSTYLE) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;returnValue=outputSegment.nextChar();} else {cumulativeDiff+=yylength() - 1;++offsetCorrectionPos;returnValue=STYLE_REPLACEMENT;}addOffCorrectMap(offsetCorrectionPos,cumulativeDiff);return returnValue;}case 103:break;case 50:{inputSegment.clear();yybegin(YYINITIAL);cumulativeDiff+=yychar - inputStart;int offsetCorrectionPos=outputCharCount;int returnValue;if (escapeSCRIPT) {inputSegment.write(zzBuffer,zzStartRead,yylength());outputSegment=inputSegment;returnValue=outputSegment.nextChar();} else {cumulativeDiff+=yylength() - 1;++offsetCorrectionPos;returnValue=SCRIPT_REPLACEMENT;}addOffCorrectMap(offsetCorrectionPos,cumulativeDiff);return returnValue;}case 104:break;case 51:{outputSegment=entitySegment;outputSegment.clear();String surrogatePair=yytext();char highSurrogate='\u0000';try {highSurrogate=(char)Integer.parseInt(surrogatePair.substring(2,6),16);} catch (Exception e) {assert false : "Exception parsing high surrogate '" + surrogatePair.substring(2,6) + "'";}try {outputSegment.unsafeWrite((char)Integer.parseInt(surrogatePair.substring(10,14),16));} catch (Exception e) {assert false : "Exception parsing low surrogate '" + surrogatePair.substring(10,14) + "'";}cumulativeDiff+=inputSegment.length() + yylength() - 2;addOffCorrectMap(outputCharCount + 2,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return highSurrogate;}case 105:break;case 52:{String surrogatePair=yytext();char highSurrogate='\u0000';char lowSurrogate='\u0000';try {highSurrogate=(char)Integer.parseInt(surrogatePair.substring(2,6),16);} catch (Exception e) {assert false : "Exception parsing high surrogate '" + surrogatePair.substring(2,6) + "'";}try {lowSurrogate=(char)Integer.parseInt(surrogatePair.substring(9,14));} catch (Exception e) {assert false : "Exception parsing low surrogate '" + surrogatePair.substring(9,14) + "'";}if (Character.isLowSurrogate(lowSurrogate)) {outputSegment=entitySegment;outputSegment.clear();outputSegment.unsafeWrite(lowSurrogate);cumulativeDiff+=inputSegment.length() + yylength() - 2;addOffCorrectMap(outputCharCount + 2,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return highSurrogate;}yypushback(surrogatePair.length() - 1);inputSegment.append('#');yybegin(NUMERIC_CHARACTER);}case 106:break;case 53:{String surrogatePair=yytext();char highSurrogate='\u0000';try {highSurrogate=(char)Integer.parseInt(surrogatePair.substring(1,6));} catch (Exception e) {assert false : "Exception parsing high surrogate '" + surrogatePair.substring(1,6) + "'";}if (Character.isHighSurrogate(highSurrogate)) {outputSegment=entitySegment;outputSegment.clear();try {outputSegment.unsafeWrite((char)Integer.parseInt(surrogatePair.substring(10,14),16));} catch (Exception e) {assert false : "Exception parsing low surrogate '" + surrogatePair.substring(10,14) + "'";}cumulativeDiff+=inputSegment.length() + yylength() - 2;addOffCorrectMap(outputCharCount + 2,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return highSurrogate;}yypushback(surrogatePair.length() - 1);inputSegment.append('#');yybegin(NUMERIC_CHARACTER);}case 107:break;case 54:{String surrogatePair=yytext();char highSurrogate='\u0000';try {highSurrogate=(char)Integer.parseInt(surrogatePair.substring(1,6));} catch (Exception e) {assert false : "Exception parsing high surrogate '" + surrogatePair.substring(1,6) + "'";}if (Character.isHighSurrogate(highSurrogate)) {char lowSurrogate='\u0000';try {lowSurrogate=(char)Integer.parseInt(surrogatePair.substring(9,14));} catch (Exception e) {assert false : "Exception parsing low surrogate '" + surrogatePair.substring(9,14) + "'";}if (Character.isLowSurrogate(lowSurrogate)) {outputSegment=entitySegment;outputSegment.clear();outputSegment.unsafeWrite(lowSurrogate);cumulativeDiff+=inputSegment.length() + yylength() - 2;addOffCorrectMap(outputCharCount + 2,cumulativeDiff);inputSegment.clear();yybegin(YYINITIAL);return highSurrogate;}}yypushback(surrogatePair.length() - 1);inputSegment.append('#');yybegin(NUMERIC_CHARACTER);}case 108:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();{return eofReturnValue;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void drawBytes(byte data[],int offset,int length,int x,int y){  g.drawBytes(data,offset,length,x,y);}  }
class C{  public void append(PathIterator pi,boolean connect){  double[] vals=new double[6];  while (!pi.isDone()) {    Arrays.fill(vals,0);    int type=pi.currentSegment(vals);    pi.next();    if (connect && (numVals != 0)) {      if (type == PathIterator.SEG_MOVETO) {        double x=vals[0];        double y=vals[1];        if ((x != cx) || (y != cy)) {          type=PathIterator.SEG_LINETO;        } else {          if (pi.isDone())           break;          type=pi.currentSegment(vals);          pi.next();        }      }      connect=false;    }switch (type) {case PathIterator.SEG_CLOSE:      closePath();    break;case PathIterator.SEG_MOVETO:  moveTo((float)vals[0],(float)vals[1]);break;case PathIterator.SEG_LINETO:lineTo((float)vals[0],(float)vals[1]);break;case PathIterator.SEG_QUADTO:quadTo((float)vals[0],(float)vals[1],(float)vals[2],(float)vals[3]);break;case PathIterator.SEG_CUBICTO:curveTo((float)vals[0],(float)vals[1],(float)vals[2],(float)vals[3],(float)vals[4],(float)vals[5]);break;}}}  }
class C{  public StringOwnTokenizer(String text,String nontokenDelims,String tokenDelims){  this(text,nontokenDelims,tokenDelims,false);}  }
class C{  public static Matcher<Method> returns(final Matcher<? super Class<?>> returnType){  return new Returns(returnType);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS02.class,args);}  }
class C{  public Relationship mostConsciousRelationship(Primitive type){  return mostConsciousRelationship(this.network.createVertex(type));}  }
class C{  public HaltCommand(final int packetId){  super(DebugCommandType.CMD_HALT,packetId);}  }
class C{  public static RegExpExpression notRegexp(String property,String regExExpression){  return new RegExpExpression(getPropExpr(property),new ConstantExpression(regExExpression),true);}  }
class C{  public void actionPerformed(AnActionEvent event){  triggerAction(null,SearchContext.buildFromDataContext(event.getDataContext()));}  }
class C{  public Switch(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  Resources res=getResources();  DisplayMetrics dm=res.getDisplayMetrics();  mTextPaint.density=dm.density;  mThumbDrawable=res.getDrawable(R.drawable.switch_inner_holo_dark);  mTrackDrawable=res.getDrawable(R.drawable.switch_track_holo_dark);  mTextOn=res.getString(R.string.capital_on);  mTextOff=res.getString(R.string.capital_off);  mThumbTextPadding=res.getDimensionPixelSize(R.dimen.thumb_text_padding);  mSwitchMinWidth=res.getDimensionPixelSize(R.dimen.switch_min_width);  mSwitchTextMaxWidth=res.getDimensionPixelSize(R.dimen.switch_text_max_width);  mSwitchPadding=res.getDimensionPixelSize(R.dimen.switch_padding);  setSwitchTextAppearance(context,android.R.style.TextAppearance_Material_Small);  ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  public Set<IonValue> generateValues(){switch (valueType) {case DECIMAL:    return generateIonDecimals();case FLOAT:  return generateIonFloats();case INT:return generateIonInts();case SYMBOL:return generateIonSymbols();case TIMESTAMP:return generateIonTimestamps();default :fail("not supported: " + valueType);return null;}}  }
class C{  public void layoutGraph(ArrayList<Integer> nPosX,ArrayList<Integer> nPosY){  if (m_bNeedsUndoAction) {    addUndoAction(new LayoutGraphAction(nPosX,nPosY));  }  m_nPositionX=nPosX;  m_nPositionY=nPosY;}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  @Override public void repaintUI(){  Frame[] frames=Frame.getFrames();  for (  Frame frame : frames) {    repaintUI(frame);  }}  }
class C{  public boolean match(CharacterLiteral node,Object other){  if (!(other instanceof CharacterLiteral)) {    return false;  }  CharacterLiteral o=(CharacterLiteral)other;  return safeEquals(node.getEscapedValue(),o.getEscapedValue());}  }
class C{  public void removeDocumentFromCache(int n){  if (DTM.NULL == n)   return;  for (int i=m_sourceTree.size() - 1; i >= 0; --i) {    SourceTree st=(SourceTree)m_sourceTree.elementAt(i);    if (st != null && st.m_root == n) {      m_sourceTree.removeElementAt(i);      return;    }  }}  }
class C{  public void run(){  if (sLogger.isActivated()) {    sLogger.debug("RTP Receiver processing is started");  }  try {    while (mDatagramConnection != null) {      byte[] data=mDatagramConnection.receive();      if (data.length >= 12) {        int payloadType=(byte)((data[1] & 0xff) & 0x7f);        if (payloadType != 20) {          int seqnum=(char)((data[2] << 8) | (data[3] & 0xff));          if (seqnum > mLastSeqnum - 10) {            if (mBuffer.size() >= FIFO_MAX_NUMBER) {              mBuffer.clean(FIFO_CLEAN_NUMBER);            }            mBuffer.addObject(data);            mLastSeqnum=seqnum;          } else {            mStats.numBadRtpPkts++;          }        }      }    }  } catch (  NetworkException e) {    if (!mInterrupted) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }    }  }catch (  RuntimeException e) {    sLogger.error("Datagram socket server failed!",e);  }}  }
class C{  public static void copy(InputStream in,boolean closeIn,OutputStream out,boolean closeOut) throws IOException {  try {    try {      IOUtils.copy(in,out);    }  finally {      if (closeIn)       IOUtils.closeQuietly(in);    }  }  finally {    if (closeOut)     IOUtils.closeQuietly(out);  }}  }
class C{  public InterruptedIOException(java.lang.String s){  super(s);}  }
class C{  public BinaryProperty(File file) throws IOException {  this.data=new Gobble(file).asByteArray();}  }
class C{  @Override public void ready(){  rerollInitiativeB.setEnabled(false);  butDone.setEnabled(false);  clientgui.getClient().sendDone(true);}  }
class C{  protected void onOffline(){  if (offlineMenuItem != null) {    offlineMenuItem.setVisible(true);  }  logger.debug("You are now offline");}  }
class C{  @Override public String toString(){  JSONObject jsonResult=new JSONObject();  try {    jsonResult.put(PATH,"__path");    jsonResult.put(METHOD,this.mMethod);    if (!mHeaderParams.isEmpty()) {      JSONObject metaJson=new JSONObject();      for (      String headerKey : mHeaderParams.keySet()) {        metaJson.put(headerKey,mHeaderParams.get(headerKey));      }      jsonResult.put(META,metaJson);    }    if (!mQueryParams.isEmpty()) {      JSONObject queryJson=new JSONObject();      for (      String headerKey : mQueryParams.keySet()) {        queryJson.put(headerKey,mQueryParams.get(headerKey));      }      jsonResult.put(GET,queryJson);    }    if (!TextUtils.isEmpty(mContent)) {      JSONObject postJson=new JSONObject(mContent);      jsonResult.put(POST,postJson);    }  } catch (  JSONException e) {    e.printStackTrace();  }  return jsonResult.toString().replace("__path",this.mPath) + ESCAPE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Status acknowledgeMessageArrival(String clientHandle,String id){  if (messageStore.discardArrived(clientHandle,id)) {    return Status.OK;  } else {    return Status.ERROR;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private static double calculateFallingDamage(double odds,Entity ent){  double dmg=odds;  dmg*=1.0 - (Compute.oddsAbove(ent.getBasePilotingRoll().getValue(),ent.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING)) / 100.0);  dmg*=ent.getWeight() * 0.1;  return dmg;}  }
class C{  public final RowSet merge(final RowSet c) throws SpaceExceededException {  assert c != null;  return mergeEnum(this,c);}  }
class C{  public Object clone(){  IVector clone=null;  try {    clone=(IVector)super.clone();  } catch (  Exception e) {    System.err.println("Error cloning " + getClass().getName() + ":");    e.printStackTrace();    System.exit(1);  }  clone.vector=(int[])vector.clone();  return clone;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  private boolean isNameValid(ProjectTypeDef type){  boolean valid=true;  if (type.getId() == null || type.getId().isEmpty() || NAME_PATTERN.matcher(type.getId()).find()) {    LOG.error("Could not register Project Type ID is null or invalid (only Alphanumeric, dash, point and underscore allowed): " + type.getClass().getName());    valid=false;  }  if (type.getDisplayName() == null || type.getDisplayName().isEmpty()) {    LOG.error("Could not register Project Type with null or empty display name: " + type.getId());    valid=false;  }  for (  Attribute attr : type.getAttributes()) {    if (NAME_PATTERN.matcher(attr.getName()).find()) {      LOG.error("Could not register Project Type with invalid attribute Name (only Alphanumeric, dash and underscore allowed): " + attr.getClass().getName() + " ID: '"+ attr.getId()+ "'");      valid=false;    }  }  return valid;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 % z2);            } else {              outputFile.setValue(row,col,Double.POSITIVE_INFINITY);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 % constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 % z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double P_PrecisionMicro(int Y[][],int Ypred[][]){  return P_Precision(MatrixUtils.flatten(Y),MatrixUtils.flatten(Ypred));}  }
class C{  public static double distance(double x1,double y1,double x2,double y2){  return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Builder config(Bitmap.Config config){  this.config=config;  return this;}  }
class C{  public boolean isFirstNameOnly(){  Object oo=get_Value(COLUMNNAME_IsFirstNameOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected GenericPermsImpl(){  _perms=new PermsImpl();}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  private void loadProperties(Class c,String parsersFile,boolean verbose,boolean parserWarning,boolean canReplace) throws IOException {  if (verbose) {    if (parsersFile.equalsIgnoreCase(RELEASE + PARSER_PROPERTIES_SUFFIX)) {      System.out.println("\nAlways loading " + parsersFile + ":");    } else {      System.out.println("\n\nLoading additional parsers (" + parsersFile + "):");    }  }  final InputStream stream=c.getResourceAsStream(parsersFile);  if (stream == null) {    throw new RuntimeException("Parsers file not found: " + parsersFile);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(stream));  String line=reader.readLine();  while (line != null) {    if (verbose && line.trim().startsWith("#"))     System.out.println(line);    if (line.trim().length() > 0 && !line.trim().startsWith("#")) {      try {        if (line.contains("Vector")) {          System.out.println("");        }        Class parser=Class.forName(line);        if (XMLObjectParser.class.isAssignableFrom(parser)) {          boolean replaced=addXMLObjectParser((XMLObjectParser)parser.newInstance(),canReplace);          if (verbose) {            System.out.println((replaced ? "Replaced" : "Loaded") + " parser: " + parser.getName());          } else           if (parserWarning && replaced) {            System.out.println("WARNING: parser - " + parser.getName() + " in "+ parsersFile+ " is duplicated, "+ "which is REPLACING the same parser loaded previously.\n");          }        } else {          boolean parserFound=false;          Field[] fields=parser.getDeclaredFields();          for (          Field field : fields) {            if (XMLObjectParser.class.isAssignableFrom(field.getType())) {              try {                boolean replaced=addXMLObjectParser((XMLObjectParser)field.get(null),canReplace);                if (verbose) {                  System.out.println((replaced ? "Replaced" : "Loaded") + " parser: " + parser.getName()+ "."+ field.getName());                } else                 if (parserWarning && replaced) {                  System.out.println("WARNING: parser - " + parser.getName() + " in "+ parsersFile+ " is duplicated, "+ "which is REPLACING the same parser loaded previously.\n");                }              } catch (              IllegalArgumentException iae) {                System.err.println("Failed to install parser: " + iae.getMessage());              }              parserFound=true;            }          }          if (!parserFound) {            throw new IllegalArgumentException(parser.getName() + " is not of type XMLObjectParser " + "and doesn't contain any static members of this type");          }        }      } catch (      Exception e) {        System.err.println("\nFailed to load parser: " + e.getMessage());        System.err.println("line = " + line + "\n");      }    }    line=reader.readLine();  }  if (verbose) {    System.out.println("load " + parsersFile + " successfully.\n");  }}  }
class C{  public T peek(int depth){  if (depth >= size)   throw new NoSuchElementException(); else {    Node<T> curr=top;    while (depth-- > 0)     curr=curr.next;    return curr.data;  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static void createImage(final Shell shell,final Image image){  final Label labelImage=new Label(shell,SWT.NONE);  final GridData gdImage=new GridData(GridData.CENTER,GridData.BEGINNING,false,true);  gdImage.horizontalIndent=10;  labelImage.setLayoutData(gdImage);  if (image == null) {    final Image temp=SWTGraphicUtil.createImageFromFile("images/information.png");    labelImage.setImage(temp);    SWTGraphicUtil.addDisposer(shell,temp);  } else {    labelImage.setImage(image);  }}  }
class C{  public State(PlotRenderingInfo info){  super(info);}  }
class C{  public static Integer appendGlobalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00482: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00483: edge argument can not be null");  Preconditions.checkNotNull(commentText,"IE00484: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE00485: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String function="{ ? = call append_global_edge_comment(?, ?, ?, ?, ?, ?) }";  try {    final int sourceModuleId=getModuleId(edge.getSource());    final int destinationModuleId=getModuleId(edge.getTarget());    final IAddress sourceAddress=CViewNodeHelpers.getAddress(edge.getSource());    final IAddress destinationAddress=CViewNodeHelpers.getAddress(edge.getTarget());    try {      final CallableStatement appendCommentFunction=connection.prepareCall(function);      try {        appendCommentFunction.registerOutParameter(1,Types.INTEGER);        appendCommentFunction.setInt(2,sourceModuleId);        appendCommentFunction.setInt(3,destinationModuleId);        appendCommentFunction.setObject(4,sourceAddress.toBigInteger(),Types.BIGINT);        appendCommentFunction.setObject(5,destinationAddress.toBigInteger(),Types.BIGINT);        appendCommentFunction.setInt(6,userId);        appendCommentFunction.setString(7,commentText);        appendCommentFunction.execute();        final int commentId=appendCommentFunction.getInt(1);        if (appendCommentFunction.wasNull()) {          throw new CouldntSaveDataException("Error: Got an comment id of null from the database");        }        return commentId;      }  finally {        appendCommentFunction.close();      }    } catch (    final SQLException exception) {      throw new CouldntSaveDataException(exception);    }  } catch (  final MaybeNullException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public static float[] RGBtoHSL(int r,int g,int b){  return RGBtoHSL(r,g,b,null);}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  public void addFactor(String factor){  if (!NamingProtocol.isLegalName(factor)) {    throw new IllegalArgumentException(NamingProtocol.getProtocolDescription());  }  if (!existsFactor(factor)) {    try {      lagGraph.addFactor(factor);      getPropertyChangeManager().firePropertyChange("nodeAdded",null,factor);    } catch (    Exception e) {    }  }}  }
class C{  private void switchToRegularCapture(){  SettingsManager settingsManager=mAppController.getSettingsManager();  settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR_PLUS,false);  ButtonManager buttonManager=mAppController.getButtonManager();  buttonManager.disableButtonClick(ButtonManager.BUTTON_HDR_PLUS);  mAppController.getCameraAppUI().freezeScreenUntilPreviewReady();  mAppController.onModeSelected(mContext.getResources().getInteger(R.integer.camera_mode_photo));  buttonManager.enableButtonClick(ButtonManager.BUTTON_HDR_PLUS);}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty set");  return set.first();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiComboBoxUI();  return MultiLookAndFeel.createUIs(mui,((MultiComboBoxUI)mui).uis,a);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,float[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public void appendLine(final String propertyName,final String rawValue){  appendLine(propertyName,rawValue,false,false);}  }
class C{  @Override public double cloudletSubmit(Cloudlet cl,double fileTransferTime){  ResCloudlet rcl=new ResCloudlet(cl);  rcl.setCloudletStatus(Cloudlet.INEXEC);  for (int i=0; i < cl.getNumberOfPes(); i++) {    rcl.setMachineAndPeId(0,i);  }  getCloudletExecList().add(rcl);  return getEstimatedFinishTime(rcl,getPreviousTime());}  }
class C{  public boolean isAnonymous(){  if (keyExchange == KEY_EXCHANGE_DH_anon || keyExchange == KEY_EXCHANGE_DH_anon_EXPORT || keyExchange == KEY_EXCHANGE_ECDH_anon) {    return true;  }  return false;}  }
class C{  public void testGetDumpParserForSunLogfile() throws FileNotFoundException {  System.out.println("getDumpParserForVersion");  InputStream dumpFileStream=new FileInputStream("test/none/test.log");  Map threadStore=null;  DumpParserFactory instance=DumpParserFactory.get();  DumpParser result=instance.getDumpParserForLogfile(dumpFileStream,threadStore,false,0);  assertNotNull(result);  assertTrue(result instanceof com.pironet.tda.SunJDKParser);}  }
class C{  public XmlTextBuilder(){  m_textBuf=new StringBuffer(DEFAULT_CAPACITY);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public static void storeResult(final Message message,final Object result) throws Exception {  String resultString;  if (result != null) {    JsonArray jsonArray=JsonUtil.toJSONArray(new Object[]{result});    resultString=jsonArray.toString();  } else {    resultString=null;  }  message.getBodyBuffer().writeNullableSimpleString(SimpleString.toSimpleString(resultString));}  }
class C{  public AnnotationList createAnnotationList(){  AnnotationListImpl annotationList=new AnnotationListImpl();  return annotationList;}  }
class C{  public boolean isSetTriggerName(){  return this.triggerName != null;}  }
class C{  private Transaction tx(long id){  Transaction tx=txMap.get(id);  assert tx != null : "Transaction not found for ID: " + id;  return tx;}  }
class C{  public void checkFollowers(){  if (!getAutoFollow() && getWelcomeMessage().isEmpty()) {    return;  }  try {    log("Checking followers",Level.FINE);    long[] followerIds=getConnection().getFollowersIDs(-1).getIDs();    long[] friends=getConnection().getFriendsIDs(-1).getIDs();    int friendCount=friends.length;    int count=0;    boolean welcomeOnly=false;    if (friendCount >= getMaxFriends()) {      if (!getWelcomeMessage().isEmpty()) {        welcomeOnly=true;      } else {        log("Max friend limit",Level.FINE,getMaxFriends());        return;      }    }    for (int index=0; index < followerIds.length; index++) {      boolean found=false;      long followerId=followerIds[index];      for (      long friend : friends) {        if (followerId == friend) {          found=true;          break;        }      }      if (!found) {        log("Checking new follower",Level.FINE,followerId);        boolean isNewFriend=checkFriendship(followerId,welcomeOnly);        if (!isNewFriend) {          break;        }        friendCount++;        if (friendCount >= getMaxFriends()) {          if (!getWelcomeMessage().isEmpty()) {            welcomeOnly=true;          } else {            return;          }        }        count++;        if (count >= this.maxFriendsPerCycle) {          if (!getWelcomeMessage().isEmpty() && count < this.maxWelcomesPerCycle) {            welcomeOnly=true;          } else {            log("Max friend per cycle limit",Level.FINE,this.maxFriendsPerCycle);            return;          }        }        if (!welcomeOnly && getAutoFollowFriendsFriends()) {          log("Checking friends friends",Level.FINE,followerId);          long[] friendsFriends=getConnection().getFriendsIDs(followerId,-1).getIDs();          for (          long friendsFriend : friendsFriends) {            if (checkFriendship(friendsFriend,welcomeOnly)) {              friendCount++;              if (friendCount >= getMaxFriends()) {                log("Max friend limit",Level.FINE,getMaxFriends());                return;              }              count++;              if (count >= this.maxFriendsPerCycle) {                log("Max friend per cycle limit",Level.FINE,this.maxFriendsPerCycle);                return;              }            }          }        }        if (!welcomeOnly && getAutoFollowFriendsFollowers()) {          log("Checking friends followers",Level.FINE,followerId);          long[] friendsFollowers=getConnection().getFollowersIDs(followerId,-1).getIDs();          for (          long friendsFollower : friendsFollowers) {            if (checkFriendship(friendsFollower,welcomeOnly)) {              friendCount++;              if (friendCount >= getMaxFriends()) {                log("Max friend limit",Level.FINE,getMaxFriends());                return;              }              count++;              if (count >= this.maxFriendsPerCycle) {                log("Max friend per cycle limit",Level.FINE,this.maxFriendsPerCycle);                return;              }            }          }        }      }    }    checkAutoFollowSearch(friendCount);  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public Range(int lower,int upper){  this.lower=lower;  this.upper=upper;}  }
class C{  public RelRoot convertQuery(SqlNode query,final boolean needsValidation,final boolean top){  if (needsValidation) {    query=validator.validate(query);  }  RelMetadataQuery.THREAD_PROVIDERS.set(JaninoRelMetadataProvider.of(cluster.getMetadataProvider()));  RelNode result=convertQueryRecursive(query,top,null).rel;  if (top) {    if (isStream(query)) {      result=new LogicalDelta(cluster,result.getTraitSet(),result);    }  }  RelCollation collation=RelCollations.EMPTY;  if (!query.isA(SqlKind.DML)) {    if (isOrdered(query)) {      collation=requiredCollation(result);    }  }  checkConvertedType(query,result);  if (SQL2REL_LOGGER.isDebugEnabled()) {    SQL2REL_LOGGER.debug(RelOptUtil.dumpPlan("Plan after converting SqlNode to RelNode",result,false,SqlExplainLevel.EXPPLAN_ATTRIBUTES));  }  final RelDataType validatedRowType=validator.getValidatedNodeType(query);  return RelRoot.of(result,validatedRowType,query.getKind()).withCollation(collation);}  }
class C{  public static void unzip(File zip,String outputFolder){  byte[] buffer=new byte[1024];  try {    File folder=new File(outputFolder);    if (!folder.exists()) {      folder.mkdir();    }    ZipInputStream zis=new ZipInputStream(new FileInputStream(zip));    ZipEntry ze=zis.getNextEntry();    while (ze != null) {      String fileName=ze.getName();      File newFile=new File(outputFolder + File.separator + fileName);      new File(newFile.getParent()).mkdirs();      FileOutputStream fos=new FileOutputStream(newFile);      int len;      while ((len=zis.read(buffer)) > 0) {        fos.write(buffer,0,len);      }      fos.close();      ze=zis.getNextEntry();    }    zis.closeEntry();    zis.close();  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  @ObjectiveCName("probablyEndCall") public void probablyEndCall(){  if (modules.getCallsModule() != null) {    modules.getCallsModule().probablyEndCall();  }}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(get(),0);}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,DateTimeZone zone){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstance(zone));}  }
class C{  public void addItemSet(Collection<BinaryItem> itemSet,Map<BinaryItem,FPTreeRoot.Header> headerTable,int incr){  Iterator<BinaryItem> i=itemSet.iterator();  if (i.hasNext()) {    BinaryItem first=i.next();    FPTreeNode aChild;    if (!m_children.containsKey(first)) {      aChild=new FPTreeNode(this,first);      m_children.put(first,aChild);      if (!headerTable.containsKey(first)) {        headerTable.put(first,new FPTreeRoot.Header());      }      headerTable.get(first).addToList(aChild);    } else {      aChild=m_children.get(first);    }    headerTable.get(first).getProjectedCounts().increaseCount(0,incr);    aChild.increaseProjectedCount(0,incr);    itemSet.remove(first);    aChild.addItemSet(itemSet,headerTable,incr);  }}  }
class C{  public void removeVariable(String varId){  variables.remove(varId);  discreteCache=null;  continuousCache=null;  for (  Assignment s : samples) {    s.removePair(varId);  }}  }
class C{  public void println(Object x){  String line;  Throwable t;  StackTraceElement[] trace;  int i;  if (x instanceof Throwable) {    t=(Throwable)x;    trace=t.getStackTrace();    line=t.toString() + "\n";    for (i=0; i < trace.length; i++)     line+="\t" + trace[i].toString() + "\n";    x=line;  }  printHeader();  for (i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  public static Map<Integer,String> generateMapOfValueNameInteger(Class<?> clazz){  Map<Integer,String> valuesName=new HashMap<>();  try {    for (    Field field : clazz.getFields()) {      valuesName.put((Integer)field.get(int.class),field.getName());    }  } catch (  IllegalAccessException e) {    e.printStackTrace();  }  return valuesName;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public GridStripedLock(int concurrencyLevel){  locks=new Lock[concurrencyLevel];  for (int i=0; i < concurrencyLevel; i++)   locks[i]=new ReentrantLock();}  }
class C{  public Quaternionf add(float x,float y,float z,float w){  return add(x,y,z,w,this);}  }
class C{  private void ensureLastUsedServerInList(URI serverURI){  if (serverURI == null) {    serverURI=UIConnectionPersistence.getInstance().getLastUsedServerURI();  }  final ServerList serversList=ServerListManagerFactory.getServerListProvider(DefaultPersistenceStoreProvider.INSTANCE).getServerList();  if (!serversList.contains(serverURI)) {    final ServerListConfigurationEntry configEntry=new ServerListConfigurationEntry(serverURI.getHost(),ServerListEntryType.TEAM_PROJECT_COLLECTION,serverURI);    serversList.add(configEntry);    ServerListManagerFactory.getServerListProvider(DefaultPersistenceStoreProvider.INSTANCE).setServerList(serversList);  }}  }
class C{  private static final String toXml(Filter filter){  StringBuilder sb=new StringBuilder();  sb.append("<Filter xsi:type=\"");  if (filter == Filter.DEFAULT_FILTER) {    sb.append("DefaultFilter\" />");  } else   if (filter instanceof CategoryFilter) {    sb.append("CategoryFilter\">");    CategoryFilter cf=(CategoryFilter)filter;    sb.append("<PartOfGroups>");    sb.append(XmlGenerator.toXml((int)cf.getCategory()));    sb.append("</PartOfGroups>");    sb.append("<CollideWithGroups>");    sb.append(XmlGenerator.toXml((int)cf.getMask()));    sb.append("</CollideWithGroups>");    sb.append("</Filter>");  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),filter.getClass().getName()));  }  return sb.toString();}  }
class C{  public final void rewind(){  finishWriting();  this.size=0;  if (this.chunks != null) {    for (    ByteBuffer bb : this.chunks) {      bb.rewind();      size+=bb.remaining();    }  }  this.buffer.rewind();  size+=this.buffer.remaining();}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    controller().sendSprogMessage(SprogMessage.getExitProgMode(),this);    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public ActionTargetOnline(String targetAttribute,boolean tellAboutPostman){  this.targetAttribute=targetAttribute;  this.tellAboutPostman=tellAboutPostman;}  }
class C{  public ConstantValue(){}  }
class C{  public static Method declineCounter(){  return create(DECLINECOUNTER);}  }
class C{  protected void drawGridBackground(Canvas c){  if (mDrawGridBackground) {    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);  }  if (mDrawBorders) {    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);  }}  }
class C{  @BeforeClass public static void deleteIndicationsFile(){  boolean wasException=false;  try {    StringBuffer fileNameBuff=new StringBuffer(System.getProperty(FileCimIndicationConsumer.WORKING_DIR_SYSTEM_VARIABLE));    fileNameBuff.append(File.separator);    fileNameBuff.append(FileCimIndicationConsumer.INDICATIONS_FILE_NAME);    File outFile=new File(fileNameBuff.toString());    if (outFile.exists()) {      Assert.assertTrue(outFile.delete());      Assert.assertFalse(outFile.exists());    }  } catch (  Exception e) {    wasException=true;  } finally {    Assert.assertFalse(wasException);  }}  }
class C{  public boolean parsePriority(String source) throws CSSException, IOException {  return parser.parsePriority(new InputSource(new StringReader(source)));}  }
class C{  public void addStandaloneRule(){  int start=numStates;  int end=numStates + 1;  for (int c=0; c < classes.getNumClasses(); c++)   addTransition(start,c,end);  for (int i=0; i < numLexStates * 2; i++)   addEpsilonTransition(i,start);  action[end]=new Action("System.out.print(yytext());",Integer.MAX_VALUE);  isFinal[end]=true;}  }
class C{  protected void removeContenidoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  String path="";  logger.info("Inicio de removeContenidoExecuteLogic");  String id=request.getParameter(Constants.ID);  if (logger.isInfoEnabled())   logger.info("Id Clasificador: " + id);  String idObjeto=request.getParameter("idObjeto");  if (logger.isInfoEnabled())   logger.info("Id Objeto: " + idObjeto);  int tipoObjeto=TypeConverter.toInt(request.getParameter("tipoObjeto"),TipoObjeto.DESCRIPTOR);  if (logger.isInfoEnabled())   logger.info("Tipo Objeto: " + tipoObjeto);  DocumentosTreeView treeView=(DocumentosTreeView)getFromTemporalSession(request,DocumentosConstants.DOCUMENT_TREE_KEY);  TreeNode parentNode=treeView.getSelectedNode();  try {    DataClfDocYRepEcm dataClfDocYRepEcm=null;    String[] listaIdClasificadores=request.getParameterValues("eliminarClasificador");    boolean eliminarClasificador=listaIdClasificadores != null && listaIdClasificadores.length > 0;    String[] listaIdDocumentos=request.getParameterValues("eliminarDocumento");    GestionDocumentosElectronicosBI docElecBI=getGestionDocumentosElectronicosBI(request);    int motivoRepEcmExcepcion=0;    if (tipoObjeto == TipoObjeto.DESCRIPTOR) {      motivoRepEcmExcepcion=DocElectronicosException.XNO_SE_PUEDE_ELIMINAR_DOCUMENTO_XFALTA_REPOSITORIO_ECM_DESCRIPTOR;      dataClfDocYRepEcm=docElecBI.getIdFichaClfDocYRepEcmDescriptor(idObjeto);    } else {      motivoRepEcmExcepcion=DocElectronicosException.XNO_SE_PUEDE_ELIMINAR_DOCUMENTO_XFALTA_REPOSITORIO_ECM_ELEMENTO_CUADRO;      dataClfDocYRepEcm=docElecBI.getIdFichaClfDocYRepEcmElementoCF(idObjeto);    }    if (eliminarClasificador) {      int i=0;      while (i < listaIdClasificadores.length) {        if (docElecBI.tieneDescendientes(tipoObjeto,idObjeto,listaIdClasificadores[i]))         throw new DocElectronicosException(DocElectronicosException.XNO_SE_PUEDE_ELIMINAR_CLASIFICADOR_XTIENE_DESCENDIENTES);        TreeNode node=null;        if (parentNode != null)         node=treeView.getNode(parentNode.getNodePath() + "/item" + listaIdClasificadores[i]); else         node=treeView.getNode("item" + listaIdClasificadores[i]);        treeView.removeNode(node);        i++;      }    } else {      int i=0;      while (i < listaIdDocumentos.length) {        DocDocumentoVO documentoVO=docElecBI.getDocumento(tipoObjeto,idObjeto,listaIdDocumentos[i]);        if (documentoVO != null && StringUtils.isEmpty(documentoVO.getIdExtDeposito())) {          if (StringUtils.isEmpty(dataClfDocYRepEcm.getIdRepEcm()))           throw new DocElectronicosException(motivoRepEcmExcepcion);        }        i++;      }    }    getGestionDocumentosElectronicosBI(request).removeContenidoClasificador(tipoObjeto,idObjeto,request.getParameterValues("eliminarClasificador"),request.getParameterValues("eliminarDocumento"));    updateRelacionRechazada(request);    if (parentNode != null)     path=parentNode.getNodePath();    setReturnActionFordward(request,redirectForwardMethod(request,"/clasificador","method","retrieve" + (id != null ? "&id=" + id : "") + (idObjeto != null ? "&idObjeto=" + idObjeto : "")+ "&tipoObjeto="+ tipoObjeto+ "&node="+ path+ "&refresh=1"));  } catch (  DocElectronicosException e) {    guardarError(request,e);    setReturnActionFordward(request,redirectForwardMethod(request,"/clasificador","method","retrieve" + (id != null ? "&id=" + id : "") + (idObjeto != null ? "&idObjeto=" + idObjeto : "")+ "&tipoObjeto="+ tipoObjeto+ "&node="+ path+ "&refresh=1"));  }}  }
class C{  public List<UserStat> findByCoins(long minCoins,long maxCoins){  List<User> allUsers=userService.findAll();  int userListSize=allUsers.size();  List<UserStat> result=new ArrayList<>(userListSize);  for (  User user : allUsers) {    long coins=coinService.totalCoinsMinedBy(user);    if (coins >= minCoins && (maxCoins < 0 || coins <= maxCoins)) {      result.add(new UserStat(user,-1d,coins));    }  }  return result;}  }
class C{  public static void doSetup(){  new UnicodeStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  public static void requestTimeoutMS(Intent intentToHost,int timeoutMS){  if (timeoutMS < 0)   Log.w(TAG,"requestTimeoutMS: ignoring negative timeout (" + timeoutMS + ")"); else {    if ((timeoutMS > REQUESTED_TIMEOUT_MS_MAX) && (timeoutMS != REQUESTED_TIMEOUT_MS_NEVER)) {      Log.w(TAG,"requestTimeoutMS: requested timeout " + timeoutMS + " exceeds maximum, setting to max ("+ REQUESTED_TIMEOUT_MS_MAX+ ")");      timeoutMS=REQUESTED_TIMEOUT_MS_MAX;    }    intentToHost.putExtra(EXTRA_REQUESTED_TIMEOUT,timeoutMS);  }}  }
class C{  protected void drawFilledCheckboxes(DrawContext dc,Iterable<NodeLayout> nodes){  Dimension selectedSymbolSize=this.getSelectedSymbolSize();  TreeAttributes attributes=this.getActiveAttributes();  GL2 gl=dc.getGL().getGL2();  Color[] colors=attributes.getCheckBoxColor();  try {    gl.glLineWidth(1f);    gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_FILL);    gl.glBegin(GL2.GL_QUADS);    for (    NodeLayout layout : nodes) {      int vertAdjust=layout.bounds.height - selectedSymbolSize.height - (this.lineHeight - selectedSymbolSize.height) / 2;      int x=layout.drawPoint.x;      int y=layout.drawPoint.y + vertAdjust;      String selected=layout.node.isTreeSelected();      boolean filled=TreeNode.PARTIALLY_SELECTED.equals(selected);      if (filled) {        OGLUtil.applyColor(gl,colors[0],1,false);        gl.glVertex2f(x + selectedSymbolSize.width,y + selectedSymbolSize.height);        gl.glVertex2f(x,y + selectedSymbolSize.height);        gl.glVertex2f(x,y);        OGLUtil.applyColor(gl,colors[1],1,false);        gl.glVertex2f(x + selectedSymbolSize.width,y);      }    }  }  finally {    gl.glEnd();  }}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  public static char toCharValue(String str) throws PageException {  if (str.length() > 0)   return str.charAt(0);  throw new ExpressionException("can't cast empty string to a char");}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  public WFG2(int k,int l,int M){  super(k,l,M);}  }
class C{  public final static byte[] extractChallengeFromType2Message(byte[] msg){  byte[] challenge=new byte[8];  System.arraycopy(msg,24,challenge,0,8);  return challenge;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  protected Border createRolloverBorder(){  Object border=UIManager.get("ToolBar.rolloverBorder");  if (border != null) {    return (Border)border;  }  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.RolloverButtonBorder(table.getColor("controlShadow"),table.getColor("controlDkShadow"),table.getColor("controlHighlight"),table.getColor("controlLtHighlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public static void close(boolean keepAlive){  PoolManagerImpl.getPMI().close(keepAlive);}  }
class C{  public DOMNodeIterator(AbstractDocument doc,Node n,int what,NodeFilter nf,boolean exp){  document=doc;  root=n;  whatToShow=what;  filter=nf;  expandEntityReferences=exp;  referenceNode=root;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5){  return construct(e1,e2,e3,e4,e5);}  }
class C{  private void initializeDefault(){  McElieceKeyGenerationParameters mcParams=new McElieceKeyGenerationParameters(new SecureRandom(),new McElieceParameters());  initialize(mcParams);}  }
class C{  public BermudanExercise(final Date[] dates,final boolean payoffAtExpiry){  super(Exercise.Type.Bermudan,payoffAtExpiry);  QL.require(dates != null && dates.length > 0,"empty exercise dates");  if (dates.length == 1) {    super.type=Exercise.Type.European;    super.payoffAtExpiry=false;  }  for (  final Date date : dates) {    super.dates.add(date);  }  Arrays.sort(dates);}  }
class C{  public static void computeSingleComponentStatus(ComponentStatus componentStatus){  Map<StatusType,Long> stats=componentStatus.getInstances().stream().filter(null).collect(Collectors.groupingBy(null,Collectors.counting()));  componentStatus.setStats(stats.entrySet().stream().collect(Collectors.toMap(null,null)));  componentStatus.setStatus(getSingleComponentStatus(stats.keySet()));}  }
class C{  public static void assertJQ(String request,String... tests) throws Exception {  assertJQ(request,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public MovieTreeNode(Object userObject){  super(userObject);}  }
class C{  public ColumnItem(final ColumnBrowserWidget widget,final int index){  if (widget == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.widget=widget;  this.parent=null;  this.children=new ArrayList<ColumnItem>();  widget.getRootItem().children.add(index,this);  widget.updateContent();}  }
class C{  public String canopyMinimumCanopyDensityTipText(){  return "If using canopy clustering for initialization and/or speedup " + "this is the minimum T2-based density " + "below which a canopy will be pruned during periodic pruning";}  }
class C{  public static <T>T eachWithIndex(T self,Closure closure){  final Object[] args=new Object[2];  int counter=0;  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    args[0]=iter.next();    args[1]=counter++;    closure.call(args);  }  return self;}  }
class C{  SortableProperty(ConnectionRecordSet.SortableProperty recordProperty){  this.recordProperty=recordProperty;}  }
class C{  private void notifyNewTabCreated(Tab tab){  for (  TabModelSelectorObserver listener : mObservers) {    listener.onNewTabCreated(tab);  }}  }
class C{  public int numDecodingsB(String s){  if (s == null || s.length() == 0) {    return 0;  }  int len=s.length();  int prev1=1;  int prev2=s.charAt(0) == '0' ? 0 : 1;  for (int i=2; i <= len; i++) {    int code1=Integer.valueOf(s.substring(i - 1,i));    int code2=Integer.valueOf(s.substring(i - 2,i));    int temp=prev2;    prev2=(code1 != 0 ? prev2 : 0) + (code2 <= 26 && code2 > 9 ? prev1 : 0);    prev1=temp;  }  return prev2;}  }
class C{  public boolean isUseful(Result current,LinkedList<Result> otherResults,int criterion,ExampleSet exampleSet,int min_model_number){  boolean result=true;switch (criterion) {case IteratingGSS.TYPE_WORST_UTILITY:    double worstUtility=current.getUtility() - current.getConfidence();  if (worstUtility < this.min_utility_useful) {    result=false;  } else {    result=true;  }break;case IteratingGSS.TYPE_UTILITY:double utility=current.getUtility();if (utility < this.min_utility_useful) {result=false;} else {result=true;}break;case IteratingGSS.TYPE_BEST_UTILITY:double bestUtility=current.getUtility() + current.getConfidence();if (bestUtility < this.min_utility_useful) {result=false;} else {result=true;}break;case IteratingGSS.TYPE_EXAMPLE:if (otherResults.size() == 0 || otherResults.size() < min_model_number) {return true;}double sum=0.0d;Iterator it=otherResults.iterator();while (it.hasNext()) {Result r=(Result)it.next();sum=sum + r.getTotalWeight();}double average=sum / otherResults.size();if (current.getTotalWeight() < this.exampleFactor * average) {result=true;} else {result=false;}break;}return result;}  }
class C{  public boolean isValidTree(){  int nnodes=getNodeCount();  int nedges=getEdgeCount();  if (nnodes != nedges + 1) {    s_logger.warning("Node/edge counts incorrect.");    return false;  }  int root=getRootRow();  IntIterator nodes=getNodeTable().rows();  while (nodes.hasNext()) {    int n=nodes.nextInt();    int id=getInDegree(n);    if (n == root && id > 0) {      s_logger.warning("Root node has a parent.");      return false;    } else     if (id > 1) {      s_logger.warning("Node " + n + " has multiple parents.");      return false;    }  }  int[] counts=new int[]{0,nedges};  isValidHelper(getRootRow(),counts);  if (counts[0] > nedges) {    s_logger.warning("The tree has non-tree edges in it.");    return false;  }  if (counts[0] < nedges) {    s_logger.warning("Not all of the tree was visited. " + "Only " + counts[0] + "/"+ nedges+ " edges encountered");    return false;  }  return true;}  }
class C{  public void applyCurrentUser(){  FacesContext facesContext=getContext();  HttpSession session=(HttpSession)facesContext.getExternalContext().getSession(false);  String userId="" + session.getAttribute("loggedInUserId");  String password="" + session.getAttribute("loggedInUserPassword");  String userKey="" + session.getAttribute("loggedInUserKey");  getConfigurationItem(ControllerConfigurationKey.BSS_USER_ID.name()).setValue(userId);  getConfigurationItem(ControllerConfigurationKey.BSS_USER_PWD.name()).setValue(password);  getConfigurationItem(ControllerConfigurationKey.BSS_USER_KEY.name()).setValue(userKey);}  }
class C{  @Override public boolean mutate(TestCase test,TestFactory factory){  if (Randomness.nextDouble() >= Properties.P_CHANGE_PARAMETER)   return false;  if (!isStatic()) {    VariableReference source=getSource();    List<VariableReference> objects=test.getObjects(source.getType(),getPosition());    objects.remove(source);    if (!objects.isEmpty()) {      setSource(Randomness.choice(objects));      return true;    }  }  return false;}  }
class C{  public SVGFeTurbulenceElementBridge(){}  }
class C{  public static void verifyDatastore(Datastore datastore,VCenterAPI vCenterApi) throws Exception {  DatastoreSummary summary=datastore.getSummary();  if (summary == null) {    throw new Exception("Summary unavailable for datastore " + datastore.getName());  }  if (!summary.isAccessible()) {    throw new Exception("Datastore " + datastore.getName() + " is not accessible");  }  checkMaintenanceMode(datastore,summary);  checkVirtualMachines(datastore);}  }
class C{  public List<ShardRouting> allShards(){  List<ShardRouting> shards=new ArrayList<>();  String[] indices=indicesRouting.keySet().toArray(new String[indicesRouting.keySet().size()]);  for (  String index : indices) {    List<ShardRouting> allShardsIndex=allShards(index);    shards.addAll(allShardsIndex);  }  return shards;}  }
class C{  public static void validateNonNegativeNumber(long fieldValue,String fieldName){  if (fieldValue < 0) {    logAndThrow(String.format("%s should be a non-negative number: %d",fieldName,fieldValue));  }}  }
class C{  public boolean isIncludeNullsUserElement2(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsUserElement2);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Topic(final Queue<T> q){  distributor.addQueue(q);}  }
class C{  protected static void postProcessDeepFreeze(IHex[] hexSet,int modifier){  int n;  IHex field;  ITerrainFactory f=Terrains.getTerrainFactory();  for (n=0; n < hexSet.length; n++) {    field=hexSet[n];    if (field.containsTerrain(Terrains.WATER)) {      int level=field.terrainLevel(Terrains.WATER);      if (modifier != 0) {        level-=modifier;        field.removeTerrain(Terrains.WATER);        if (level > 0) {          field.addTerrain(f.createTerrain(Terrains.WATER,level));        }      }      field.addTerrain(f.createTerrain(Terrains.ICE,1));    } else     if (field.containsTerrain(Terrains.SWAMP)) {      field.removeTerrain(Terrains.SWAMP);      if (field.terrainsPresent() == 0) {        if (Compute.randomInt(100) < 30) {          field.addTerrain(f.createTerrain(Terrains.ROUGH,1));        } else {          field.addTerrain(f.createTerrain(Terrains.ICE,1));        }      }    }  }}  }
class C{  public static Bitmap imageWithTextNoLayout(Context context,Bitmap bitmap,GenerateParams params){  Paint paint=new Paint();  paint.setColor(params.color);  paint.setTextAlign(Paint.Align.CENTER);  paint.setTextSize(applyDimension(COMPLEX_UNIT_SP,20,context.getResources().getDisplayMetrics()));  paint.setTypeface(Typeface.DEFAULT_BOLD);  Canvas canvas=new Canvas(bitmap);  canvas.drawColor(params.background);  canvas.drawText(params.text,canvas.getWidth() / 2,canvas.getHeight() / 2,paint);  return bitmap;}  }
class C{  static Instruction instanceOfNotNull(Instruction s,IR ir){  RegisterOperand result=InstanceOf.getClearResult(s);  TypeReference LHStype=InstanceOf.getType(s).getTypeRef();  Operand ref=InstanceOf.getClearRef(s);  Operand guard=InstanceOf.getClearGuard(s);  Instruction next=s.nextInstructionInCodeOrder();  if (next.operator() == INT_IFCMP && IfCmp.getVal1(next) instanceof RegisterOperand && result.similar(IfCmp.getVal1(next))) {    Operand val2=IfCmp.getVal2(next);    if (VM.VerifyAssertions) {      VM._assert(val2.isIntConstant());    }    int ival2=((IntConstantOperand)val2).value;    ConditionOperand cond=IfCmp.getCond(next);    boolean branchCondition=(((ival2 == 0) && (cond.isNOT_EQUAL() || cond.isLESS_EQUAL())) || ((ival2 == 1) && (cond.isEQUAL() || cond.isGREATER_EQUAL())));    BasicBlock branchBB=next.getBranchTarget();    RegisterOperand oldGuard=IfCmp.getGuardResult(next);    next.remove();    BasicBlock fallThroughBB=fallThroughBB(s,ir);    Operand RHStib=getTIB(s,ir,ref,guard);    if (branchCondition) {      return generateBranchingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,branchBB,fallThroughBB,oldGuard.copyRO(),IfCmp.getClearBranchProfile(next).flip());    } else {      return generateBranchingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,fallThroughBB,branchBB,oldGuard.copyRO(),IfCmp.getClearBranchProfile(next));    }  } else {    Operand RHStib=getTIB(s,ir,ref,guard);    return generateValueProducingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,result);  }}  }
class C{  private void showErrorOnField(List<RegisterResponseFieldError> errors,@NonNull IRegistrationFieldView fieldView){  if (errors != null && !errors.isEmpty()) {    StringBuffer buffer=new StringBuffer();    for (    RegisterResponseFieldError e : errors) {      buffer.append(e.getUserMessage() + " ");    }    fieldView.handleError(buffer.toString());  }}  }
class C{  protected boolean afterDelete(boolean success){  updateEntry();  return success;}  }
class C{  @Override public Object callableStatement_getObject(FilterChain chain,CallableStatementProxy statement,String parameterName,java.util.Map<String,Class<?>> map) throws SQLException {  Object obj=chain.callableStatement_getObject(statement,parameterName,map);  if (obj instanceof ResultSetProxy) {    resultSetOpenAfter((ResultSetProxy)obj);  }  return obj;}  }
class C{  public static byte[] messageRowKey(HBaseId mailboxUid,MessageUid uid){  return Bytes.add(mailboxUid.toBytes(),Bytes.toBytes(Long.MAX_VALUE - uid.asLong()));}  }
class C{  public static void e(String string,Exception exception){  if (sIsLogEnabled) {    Log.e(sApplicationTag,getContent(getCurrentStackTraceElement()) + "\n>" + exception.getMessage()+ "\n>"+ exception.getStackTrace()+ "   "+ string);    exception.printStackTrace();  }}  }
class C{  @EventHandler(ignoreCancelled=true,priority=EventPriority.MONITOR) public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){  String[] split=event.getMessage().split(" ");  if (split.length > 0) {    split[0]=split[0].substring(1);    split=WorldEdit.getInstance().getPlatformManager().getCommandManager().commandDetection(split);  }  final String newMessage="/" + StringUtil.joinString(split," ");  if (!newMessage.equals(event.getMessage())) {    event.setMessage(newMessage);    plugin.getServer().getPluginManager().callEvent(event);    if (!event.isCancelled()) {      if (!event.getMessage().isEmpty()) {        plugin.getServer().dispatchCommand(event.getPlayer(),event.getMessage().substring(1));      }      event.setCancelled(true);    }  }}  }
class C{  public ShareRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public boolean deleteJob(JobKey jobKey) throws SchedulerException {  validateState();  boolean result=false;  List<? extends Trigger> triggers=getTriggersOfJob(jobKey);  for (  Trigger trigger : triggers) {    if (!unscheduleJob(trigger.getKey())) {      StringBuilder sb=new StringBuilder().append("Unable to unschedule trigger [").append(trigger.getKey()).append("] while deleting job [").append(jobKey).append("]");      throw new SchedulerException(sb.toString());    }    result=true;  }  result=resources.getJobStore().removeJob(jobKey) || result;  if (result) {    notifySchedulerThread(0L);    notifySchedulerListenersJobDeleted(jobKey);  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.625 -0500",hash_original_method="BB9DACD07ED93D41347C3772C10021CB",hash_generated_method="DA2DCBE5F00DBE7618C1F279A9CD37FF") public InterruptedIOException(){}  }
class C{  public GeoPoint(final double magnitude,final double x,final double y,final double z){  super(x * magnitude,y * magnitude,z * magnitude);  this.magnitude=magnitude;}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  char[] separator={'[',' '};  int n=rows();  int m=columns();  for (int i=0; i < n; i++) {    separator[0]='{';    for (int j=0; j < m; j++) {      sb.append(separator);      sb.append(components[i][j]);      separator[0]=' ';    }    sb.append('}');    sb.append('\n');  }  return sb.toString();}  }
class C{  public boolean insert(int val){  if (map.containsKey(val)) {    return false;  }  map.put(val,list.size());  list.add(val);  return true;}  }
class C{  protected ImportScopeImpl(){  super();}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  private void updateStateFromTypedArray(TypedArray a) throws XmlPullParserException {  final RippleState state=mState;  state.mChangingConfigurations|=TypedArrayCompat.getChangingConfigurations(a);  state.mTouchThemeAttrs=TypedArrayCompat.extractThemeAttrs(a);  final ColorStateList color=a.getColorStateList(R.styleable.RippleDrawable_android_color);  if (color != null) {    mState.mColor=color;  }  mState.mMaxRadius=a.getDimensionPixelSize(R.styleable.RippleDrawable_android_radius,mState.mMaxRadius);  verifyRequiredAttributes(a);}  }
class C{  public static CheckIndex.Status checkIndex(Directory dir) throws IOException {  return checkIndex(dir,true);}  }
class C{  public int write(OutputStream out) throws IOException {  writeId(out,"RIFF");  writeInt(out,36 + mNumBytes);  writeId(out,"WAVE");  writeId(out,"fmt ");  writeInt(out,16);  writeShort(out,mFormat);  writeShort(out,mNumChannels);  writeInt(out,mSampleRate);  writeInt(out,mNumChannels * mSampleRate * mBitsPerSample / 8);  writeShort(out,(short)(mNumChannels * mBitsPerSample / 8));  writeShort(out,mBitsPerSample);  writeId(out,"data");  writeInt(out,mNumBytes);  return HEADER_LENGTH;}  }
class C{  public void verifyHeader() throws VerificationException {  maybeParseHeader();  checkProofOfWork(true);  checkTimestamp();}  }
class C{  public Builder byDay(DayOfWeek... days){  return byDay(Arrays.asList(days));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Pair(ThrowableSet caught,ThrowableSet uncaught){  this.caught=caught;  this.uncaught=uncaught;}  }
class C{  public void unscheduleAllTimers(){  assert false : "Not implemented. Use unscheduleAllSelectors";}  }
class C{  private boolean isCacheValid(){  long now=CurrentTime.currentTime();  if ((now - _lastTime < 100) && !CurrentTime.isTest())   return true;  long oldLastModified=_lastModified;  long oldLength=_length;  long newLastModified=getBacking().getLastModified();  long newLength=getBacking().length();  _lastTime=now;  if (newLastModified == oldLastModified && newLength == oldLength) {    _lastTime=now;    return true;  } else {    _changeSequence.incrementAndGet();    clearCache();    _zipEntryCache.clear();    _lastModified=newLastModified;    _length=newLength;    _lastTime=now;    return false;  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (keyidentifier != null) {    v.add(new DERTaggedObject(false,0,keyidentifier));  }  if (certissuer != null) {    v.add(new DERTaggedObject(false,1,certissuer));  }  if (certserno != null) {    v.add(new DERTaggedObject(false,2,certserno));  }  return new DERSequence(v);}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  ItemTypeDescription(BaseEntry owner){  this.owner=owner;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.028 -0400",hash_original_method="0BA5737D802F499B64A85853275E3368",hash_generated_method="B9078954865C695972CAFFD384122A35") public int hashCode(){  return rp == null ? m : m + rp.hashCode();}  }
class C{  public void providesSingletonInScope(){  isProvidingSingletonInScope=true;}  }
class C{  public static boolean isRowIndexMin(AggregateUnaryOperator uaggOp){  return (uaggOp.aggOp.increOp.fn instanceof Builtin && (((Builtin)(uaggOp.aggOp.increOp.fn)).bFunc == Builtin.BuiltinCode.MININDEX));}  }
class C{  @NotNull private static Direction extractDirection(int directionKey){  if (directionKey == 0) {    return Out;  } else   if (directionKey == 1) {    return NullableOut;  } else   if (directionKey == 2) {    return Pure;  } else {    int paramKey=directionKey - 3;    int paramId=paramKey / 8;    int subDirectionId=paramKey % 8;    if (subDirectionId <= 1) {      return new In(paramId,subDirectionId);    } else {      int valueId=subDirectionId - 2;      return new InOut(paramId,Value.values()[valueId]);    }  }}  }
class C{  public static Object invoke(String apiName,ApiProtocol apiProtocol){  Class<?> classname;  Object classObject;  Constructor constructor;  Method method;  Object result=null;  Api api=ApiRoute.apiMap.get(apiName);  if (api == null) {    return ErrorHandler.error(StatusCode.API_NOT_FOUND);  }  if (apiProtocol.getBuild() < api.getBuild()) {    return ErrorHandler.error(StatusCode.VERSION_IS_TOO_LOW);  }  if (api.getHttpMethod() != null && !api.getHttpMethod().contains(apiProtocol.getMethod().toString().toLowerCase())) {    return ErrorHandler.error(StatusCode.REQUEST_MODE_ERROR);  }  try {    classname=Class.forName(Config.getString("resource.package.name") + "." + api.getResource());    constructor=classname.getConstructor(ApiProtocol.class);    classObject=constructor.newInstance(apiProtocol);  } catch (  NoSuchMethodException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }catch (  ClassNotFoundException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }catch (  InvocationTargetException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }catch (  InstantiationException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }catch (  IllegalAccessException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }  try {    method=classname.getMethod(apiProtocol.getMethod().toString().toLowerCase());  } catch (  NoSuchMethodException e) {    logger.error(e.getMessage());    return ErrorHandler.error(StatusCode.API_SERVER_ERROR);  }  try {    result=method.invoke(classObject);  } catch (  InvocationTargetException e) {    e.printStackTrace();    logger.error(e.getMessage());  }catch (  IllegalAccessException e) {    logger.error(e.toString());  }  return result;}  }
class C{  public static Object[] findMethodWithListParameters(Object service,String methodName,Object[] args){  Method method=null;  try {    method=service.getClass().getMethod(methodName,ConversionUtils.convertParams(args));    log.debug("Exact method found (skipping list): {}",methodName);    return new Object[]{method,args};  } catch (  NoSuchMethodException nsme) {    log.debug("Method not found using exact parameter types");  }  List<Method> methods=ConversionUtils.findMethodsByNameAndNumParams(service,methodName,1);  log.debug("Found {} methods",methods.size());  if (methods.isEmpty()) {    return new Object[]{null,null};  } else   if (methods.size() > 1) {    log.debug("Multiple methods found with same name and parameter count.");    log.debug("Parameter conversion will be attempted in order.");  }  ArrayList<Object> argsList=new ArrayList<Object>();  if (args != null) {    for (    Object element : args) {      argsList.add(element);    }  }  args=new Object[]{argsList};  Object[] params=null;  for (int i=0; i < methods.size(); i++) {    try {      method=methods.get(i);      params=ConversionUtils.convertParams(args,method.getParameterTypes());      if (argsList.size() > 0 && (argsList.get(0) instanceof IConnection) && (!(params[0] instanceof IConnection))) {        continue;      }      return new Object[]{method,params};    } catch (    Exception ex) {      log.debug("Parameter conversion failed",ex);    }  }  return nullReturn;}  }
class C{  private void buildHierarchy(Relation<V> database,Clustering<SubspaceModel> clustering,List<Cluster<SubspaceModel>> clusters,int dimensionality){  StringBuilder msg=LOG.isDebugging() ? new StringBuilder() : null;  final int db_dim=RelationUtil.dimensionality(database);  Hierarchy<Cluster<SubspaceModel>> hier=clustering.getClusterHierarchy();  for (int i=0; i < clusters.size() - 1; i++) {    Cluster<SubspaceModel> c_i=clusters.get(i);    final Subspace s_i=c_i.getModel().getSubspace();    int subspaceDim_i=dimensionality - s_i.dimensionality();    NumberVector ci_centroid=ProjectedCentroid.make(s_i.getDimensions(),database,c_i.getIDs());    long[] pv1=s_i.getDimensions();    for (int j=i + 1; j < clusters.size(); j++) {      Cluster<SubspaceModel> c_j=clusters.get(j);      final Subspace s_j=c_j.getModel().getSubspace();      int subspaceDim_j=dimensionality - s_j.dimensionality();      if (subspaceDim_i < subspaceDim_j) {        if (msg != null) {          msg.append("\n l_i=").append(subspaceDim_i).append(" pv_i=[").append(BitsUtil.toStringLow(s_i.getDimensions(),db_dim)).append(']');          msg.append("\n l_j=").append(subspaceDim_j).append(" pv_j=[").append(BitsUtil.toStringLow(s_j.getDimensions(),db_dim)).append(']');        }        if (s_j.dimensionality() == 0) {          if (hier.numParents(c_i) == 0) {            clustering.addChildCluster(c_j,c_i);            if (msg != null) {              msg.append("\n [").append(BitsUtil.toStringLow(s_j.getDimensions(),db_dim));              msg.append("] is parent of [").append(BitsUtil.toStringLow(s_i.getDimensions(),db_dim));              msg.append(']');            }          }        } else {          NumberVector cj_centroid=ProjectedCentroid.make(c_j.getModel().getDimensions(),database,c_j.getIDs());          long[] pv2=s_j.getDimensions();          long[] commonPreferenceVector=BitsUtil.andCMin(pv1,pv2);          int subspaceDim=subspaceDimensionality(ci_centroid,cj_centroid,pv1,pv2,commonPreferenceVector);          double d=weightedDistance(ci_centroid,cj_centroid,commonPreferenceVector);          if (msg != null) {            msg.append("\n dist = ").append(subspaceDim);          }          if (subspaceDim == subspaceDim_j) {            if (msg != null) {              msg.append("\n d = ").append(d);            }            if (d <= 2 * epsilon) {              if (hier.numParents(c_i) == 0 || !isParent(database,c_j,hier.iterParents(c_i),db_dim)) {                clustering.addChildCluster(c_j,c_i);                if (msg != null) {                  msg.append("\n [").append(BitsUtil.toStringLow(s_j.getDimensions(),db_dim));                  msg.append("] is parent of [");                  msg.append(BitsUtil.toStringLow(s_i.getDimensions(),db_dim));                  msg.append(']');                }              }            } else {              throw new RuntimeException("Should never happen: d = " + d);            }          }        }      }    }  }  if (msg != null) {    LOG.debug(msg.toString());  }}  }
class C{  public EchoRequestMessage(EchoRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  boolean standardizedPCA=false;  int numberOfComponentImagesToCreate=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  standardizedPCA=Boolean.parseBoolean(args[2]);  if (args[3].toLowerCase().contains("not")) {    numberOfComponentImagesToCreate=9999999;  } else {    numberOfComponentImagesToCreate=Integer.parseInt(args[3]);  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageAverages=new double[numImages];    imageTotals=new double[numImages];    imageNumPixels=new double[numImages];    noDataValues=new double[numImages];    data=new double[numImages][];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=images[i].getNoDataValue();      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }    }    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotals[i]+=data[i][col];            imageNumPixels[i]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating image means:",progress);    }    for (i=0; i < numImages; i++) {      imageAverages[i]=imageTotals[i] / imageNumPixels[i];    }    double[] imageTotalDeviation=new double[numImages];    double[][] covariances=new double[numImages][numImages];    double[][] correlationMatrix=new double[numImages][numImages];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotalDeviation[i]+=(data[i][col] - imageAverages[i]) * (data[i][col] - imageAverages[i]);            for (a=0; a < numImages; a++) {              if (data[a][col] != noDataValues[a]) {                covariances[i][a]+=(data[i][col] - imageAverages[i]) * (data[a][col] - imageAverages[a]);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating covariances:",progress);    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(imageTotalDeviation[i] * imageTotalDeviation[a]));      }    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        covariances[i][a]=covariances[i][a] / (imageNumPixels[i] - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentImagesToCreate) {        String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (j + 1)+ ".dep";        WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);        output.setDataScale(DataScale.CONTINUOUS);        for (row=0; row < nRows; row++) {          for (i=0; i < numImages; i++) {            data[i]=images[i].getRowValues(row);          }          for (col=0; col < nCols; col++) {            if (data[0][col] != noDataValues[0]) {              z=0;              for (i=0; i < numImages; i++) {                z+=data[i][col] * eigenvector[i];              }              output.setValue(row,col,z);            } else {              output.setValue(row,col,noDataValues[0]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (nRows - 1));          updateProgress("Creating component images:",progress);        }        output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        output.addMetadataEntry("Created on " + new Date());        output.addMetadataEntry("Principal Component Num.: " + (j + 1));        output.addMetadataEntry("Eigenvalue: " + pc.eigenValue);        eigenvec="[";        for (i=0; i < numComponents; i++) {          if (i < numComponents - 1) {            eigenvec+=eigenvector[i] + ", ";          } else {            eigenvec+=eigenvector[i];          }        }        eigenvec+="]";        output.addMetadataEntry("Eigenvector: " + eigenvec);        if (!standardizedPCA) {          output.addMetadataEntry("PCA Type: unstandardized");        } else {          output.addMetadataEntry("PCA Type: standardized");        }        output.close();      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    }    for (i=0; i < numImages; i++) {      images[i].close();    }    returnData(ret);    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);    if (numComponents > 3) {      for (i=2; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    } else {      for (i=numComponents - 1; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int tileXToX(int tx){  return tx * tileWidth + tileGridXOffset;}  }
class C{  public boolean match(Element e,String pseudoE){  Node n=e.getParentNode();  if (n != null && n.getNodeType() == Node.ELEMENT_NODE) {    return ((ExtendedSelector)getAncestorSelector()).match((Element)n,null) && ((ExtendedSelector)getSimpleSelector()).match(e,pseudoE);  }  return false;}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  super.finalize();}  }
class C{  public void addIncomingEdge(final EdgeType edge){  Preconditions.checkNotNull(edge,"Error: Edge argument can't be null");  m_incomingEdges.add(edge);}  }
class C{  public static String[] delimitedListToStringArray(String str,String delimiter){  return delimitedListToStringArray(str,delimiter,null);}  }
class C{  public static <K,V>boolean compare(Map<K,V> mapA,Map<K,V> mapB){  if (mapA == mapB)   return true;  if (mapA == null || mapB == null || mapA.size() != mapB.size())   return false;  for (  K key : mapA.keySet()) {    V value1=mapA.get(key);    V value2=mapB.get(key);    if (value1 == null && value2 == null) {      continue;    } else     if (value1 == null || value2 == null) {      return false;    }    if (!value1.equals(value2)) {      return false;    }  }  return true;}  }
class C{  public static final XPATHErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XPATHErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XPATHErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  private void createTheUserForSingleUserMode(){  if (!isInSingleUserMode()) {    return;  }  try {    final User user=dbLogic.getOrCreateUser(singleUserName);    if (user == null) {      logger.log(Level.SEVERE,"Could not create single user user");      return;    }    if (!user.getIsSingleUser()) {      user.setIsSingleUser(true);    }    if (!user.getIsAdmin()) {      user.setIsAdmin(true);    }    dbLogic.commit();  } catch (  final PersistenceException e) {    logger.log(Level.SEVERE,"Could not create single user user",e);  }}  }
class C{  @SuppressWarnings("unused") public static byte[] select_position_hri(byte n){  byte[] result=new byte[3];  result[0]=GS;  result[1]=72;  result[2]=n;  return result;}  }
class C{  public LinearComponentExtracter(Collection lines){  this.lines=lines;}  }
class C{  public QueueNode(Object contents){  m_Contents=contents;  next(null);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.SOURCE;}  }
class C{  public static void iterate(Iterator iterator,Command command) throws Exception {  while (iterator.hasNext()) {    command.execute(iterator.next());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().searchByExactPerson(getPerson(stack));}  }
class C{  public void addPostalAddress(final String addressItem){  if (postalAddress != null) {    postalAddress=new ArrayList<String>();  }  postalAddress.add(addressItem);}  }
class C{  public final void writeInt(int val) throws IOException {  Memory.pokeInt(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.INT);}  }
class C{  public InvitationProjectsExample(InvitationProjectsObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getInvitationId() != null) {    criteria.andInvitationIdEqualTo(sample.getInvitationId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }}  }
class C{  public double calcScoreWithReversedParent(int nNode,int nCandidateParent) throws Exception {  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  ParentSet oParentSet2=m_BayesNet.getParentSet(nCandidateParent);  Instances instances=m_BayesNet.m_Instances;  if (!oParentSet.contains(nCandidateParent)) {    return -1e100;  }  int iParent=oParentSet.deleteParent(nCandidateParent,instances);  oParentSet2.addParent(nNode,instances);  double fAccuracy=calcScore(m_BayesNet);  oParentSet2.deleteLastParent(instances);  oParentSet.addParent(nCandidateParent,iParent,instances);  return fAccuracy;}  }
class C{  private boolean checkTaskCanExecute(){  FileDownloadStatusFailReason failReason=null;  String url=getUrl();  if (mTaskParamInfo == null) {    failReason=new OnFileDownloadStatusFailReason(url,"init param is null pointer !",OnFileDownloadStatusFailReason.TYPE_NULL_POINTER);  }  if (failReason == null && !UrlUtil.isUrl(url)) {    failReason=new OnFileDownloadStatusFailReason(url,"url illegal !",OnFileDownloadStatusFailReason.TYPE_URL_ILLEGAL);  }  if (failReason == null && !FileUtil.isFilePath(mTaskParamInfo.getFilePath())) {    failReason=new OnFileDownloadStatusFailReason(url,"saveDir illegal !",OnFileDownloadStatusFailReason.TYPE_FILE_SAVE_PATH_ILLEGAL);  }  if (failReason == null && (!FileUtil.canWrite(mTaskParamInfo.getTempFilePath()) || !FileUtil.canWrite(mTaskParamInfo.getFilePath()))) {    failReason=new OnFileDownloadStatusFailReason(url,"savePath can not write !",OnFileDownloadStatusFailReason.TYPE_STORAGE_SPACE_CAN_NOT_WRITE);  }  if (failReason == null) {    DownloadFileInfo downloadFileInfo=getDownloadFile();    if (downloadFileInfo != null) {      if (downloadFileInfo.getStatus() == Status.DOWNLOAD_STATUS_COMPLETED) {        mFinishState=new FinishState(Status.DOWNLOAD_STATUS_COMPLETED);        return false;      } else       if (downloadFileInfo.getDownloadedSizeLong() == downloadFileInfo.getFileSizeLong()) {        boolean isSucceed=DownloadFileUtil.tryToRenameTempFileToSaveFile(downloadFileInfo);        if (isSucceed) {          mFinishState=new FinishState(Status.DOWNLOAD_STATUS_COMPLETED);          return false;        }      }    }  }  if (failReason == null) {    try {      String checkPath=null;      File file=new File(mTaskParamInfo.getFilePath());      if (file != null) {        checkPath=file.getParentFile().getAbsolutePath();      }      if (!FileUtil.isFilePath(checkPath)) {        failReason=new OnFileDownloadStatusFailReason(url,"file save path illegal !",OnFileDownloadStatusFailReason.TYPE_FILE_SAVE_PATH_ILLEGAL);      } else {        long freeSize=FileUtil.getAvailableSpace(checkPath);        long needDownloadSize=mTaskParamInfo.getFileTotalSize() - mTaskParamInfo.getStartPosInTotal();        if (freeSize == -1 || needDownloadSize > freeSize) {          failReason=new OnFileDownloadStatusFailReason(url,"storage space is full or" + " storage can not " + "write !",OnFileDownloadStatusFailReason.TYPE_STORAGE_SPACE_IS_FULL);        }      }    } catch (    Exception e) {      e.printStackTrace();      failReason=new OnFileDownloadStatusFailReason(url,e);    }  }  if (failReason != null) {    mFinishState=new FinishState(Status.DOWNLOAD_STATUS_ERROR,failReason);    return false;  }  return true;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity " + "is about to be \"paused\")");}  }
class C{  public static void clearAll(){  SharedPreferences sp=context.getSharedPreferences(APP_ID,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sp.edit();  editor.clear().commit();}  }
class C{  @Override public void printMessage(final String message){  printMessage(message,preferenceStore.getBoolean(UIPreferenceConstants.CONSOLE_SHOW_ON_NEW_MESSAGE));}  }
class C{  private void computeMinDistancePolygonRings(PlanarPolygon3D poly,Polygon ringPoly,boolean flip){  computeMinDistancePolygonLine(poly,ringPoly.getExteriorRing(),flip);  if (isDone)   return;  int nHole=ringPoly.getNumInteriorRing();  for (int i=0; i < nHole; i++) {    computeMinDistancePolygonLine(poly,ringPoly.getInteriorRingN(i),flip);    if (isDone)     return;  }}  }
class C{  private void recursiveCompatibleEnvironemntCollector(IN4JSSourceContainerAware sourceContainer,Collection<String> collection,Predicate<IN4JSProject> predicate,List<IN4JSProject> allRuntimeEnv){  IN4JSProject project=(extractProject(sourceContainer));  if (predicate.test(project)) {    com.google.common.base.Optional<String> oExtendedProjectId=project.getExtendedRuntimeEnvironmentId();    if (!oExtendedProjectId.isPresent()) {      return;    }    String extendedProjectId=oExtendedProjectId.get();    collection.add(extendedProjectId);    allRuntimeEnv.stream().filter(null).findFirst().ifPresent(null);  }}  }
class C{  @Override public KeyParameter deriveKey(CharSequence password) throws KeyCrypterException {  byte[] passwordBytes=null;  try {    passwordBytes=convertToByteArray(password);    byte[] salt=new byte[0];    if (scryptParameters.getSalt() != null) {      salt=scryptParameters.getSalt().toByteArray();    } else {      log.warn("You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack.");    }    byte[] keyBytes=SCrypt.scrypt(passwordBytes,salt,(int)scryptParameters.getN(),scryptParameters.getR(),scryptParameters.getP(),KEY_LENGTH);    return new KeyParameter(keyBytes);  } catch (  Exception e) {    throw new KeyCrypterException("Could not generate key from password and salt.",e);  } finally {    if (passwordBytes != null) {      java.util.Arrays.fill(passwordBytes,(byte)0);    }  }}  }
class C{  protected boolean reverseArcMakesSense(BayesNet bayesNet,Instances instances,int iAttributeHead,int iAttributeTail){  if (iAttributeHead == iAttributeTail) {    return false;  }  if (!isArc(bayesNet,iAttributeHead,iAttributeTail)) {    return false;  }  int nNodes=instances.numAttributes();  boolean[] bDone=new boolean[nNodes];  for (int iNode=0; iNode < nNodes; iNode++) {    bDone[iNode]=false;  }  bayesNet.getParentSet(iAttributeTail).addParent(iAttributeHead,instances);  for (int iNode=0; iNode < nNodes; iNode++) {    boolean bFound=false;    for (int iNode2=0; !bFound && iNode2 < nNodes; iNode2++) {      if (!bDone[iNode2]) {        ParentSet parentSet=bayesNet.getParentSet(iNode2);        boolean bHasNoParents=true;        for (int iParent=0; iParent < parentSet.getNrOfParents(); iParent++) {          if (!bDone[parentSet.getParent(iParent)]) {            if (!(iNode2 == iAttributeHead && parentSet.getParent(iParent) == iAttributeTail)) {              bHasNoParents=false;            }          }        }        if (bHasNoParents) {          bDone[iNode2]=true;          bFound=true;        }      }    }    if (!bFound) {      bayesNet.getParentSet(iAttributeTail).deleteLastParent(instances);      return false;    }  }  bayesNet.getParentSet(iAttributeTail).deleteLastParent(instances);  return true;}  }
class C{  public Jerry each(JerryFunction function){  for (int i=0; i < nodes.length; i++) {    Node node=nodes[i];    Jerry $this=new Jerry(this,node);    if (function.onNode($this,i) == false) {      break;    }  }  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ARRAY_TYPE_SPECIFIER__SIZE:    setSize((Integer)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){  int placeHolderPosition=-1;  String placeHolder=null;  for (int i=0; i < parameters.length; i++) {    if (parameters[i] == null) {      break;    }    placeHolder="%" + (i + 1) + "%";    placeHolderPosition=buffer.indexOf(placeHolder);    if (placeHolderPosition != -1) {      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);    } else {      break;    }  }  return buffer;}  }
class C{  public static Map<String,Integer> parseBlastOutputFile(String pathToFile) throws IOException {  Map<String,Integer> pirsfIdHitNumberMap=new HashMap<String,Integer>();  File blastOutputFile=new File(pathToFile);  if (blastOutputFile == null) {    throw new NullPointerException("Blast output file resource is null");  }  if (!blastOutputFile.exists()) {    throw new IllegalStateException(blastOutputFile.getName() + " does not exist");  }  if (!blastOutputFile.canRead()) {    throw new IllegalStateException(blastOutputFile.getName() + " is not readable");  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(blastOutputFile));    String readline;    Long currentProteinId=null;    String currentModelId=null;    while ((readline=reader.readLine()) != null) {      long proteinId;      String modelId;      String[] columns=readline.split("\t");      if (columns != null && columns.length == 12) {        proteinId=Long.parseLong(columns[0]);        if (currentProteinId == null) {          currentProteinId=proteinId;        } else         if (currentProteinId != proteinId) {          currentProteinId=proteinId;          currentModelId=null;        }        String matchId=columns[1];        String[] dividedMatchId=matchId.split("-");        if (dividedMatchId != null && dividedMatchId.length == 2) {          if (currentModelId == null) {            currentModelId=dividedMatchId[1];            String key=currentProteinId.toString() + '-' + currentModelId;            pirsfIdHitNumberMap.put(key,1);          } else {            modelId=dividedMatchId[1];            if (currentModelId.equals(modelId)) {              String key=currentProteinId.toString() + '-' + currentModelId;              if (pirsfIdHitNumberMap.containsKey(key)) {                Integer numOfHits=pirsfIdHitNumberMap.get(key);                numOfHits++;                pirsfIdHitNumberMap.put(key,numOfHits);              } else {                LOGGER.warn("Could not increment number of hits for this protein Id and best match model Id");              }            }          }        }      } else {        LOGGER.warn("Skip line - wrong number of columns in blast output file for line: " + readline);      }    }  }  finally {    if (reader != null) {      reader.close();    }  }  return pirsfIdHitNumberMap;}  }
class C{  public Expirer(){  expirerThread=new Thread(this,"ExpiringMapExpirer-" + expirerCount++);  expirerThread.setDaemon(true);}  }
class C{  public void init(StreamImpl source){  _isDisableClose=false;  _isDisableCloseSource=false;  if (_source != null && _source != source) {    try {      close();    } catch (    IOException e) {    }  }  if (source == null)   throw new IllegalArgumentException();  if (_tempWrite == null) {    _tempWrite=TempBuffer.create();    _writeBuffer=_tempWrite.buffer();  }  _source=source;  _position=0;  _writeLength=0;  _isFlushRequired=false;  _isFlushOnNewline=source.getFlushOnNewline();  _newline="\n";  _newlineBytes=LF_BYTES;  _writeEncoding=null;  _writeEncodingName="ISO-8859-1";}  }
class C{  public boolean removeEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex >= mDataSets.size())   return false;  boolean removed=mDataSets.get(dataSetIndex).removeEntry(e.getXIndex());  if (removed) {    float val=e.getVal();    mYValCount-=1;    mYValueSum-=val;    calcMinMax(mDataSets);  }  return removed;}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public static void logError(final Logger logger,final Error e){  logger.logError(Level.SEVERE,"Unexpected Error",e);}  }
class C{  public static boolean isTimeSeries(Class<? extends TaggedLogAPIEntity> clazz){  TimeSeries ts=clazz.getAnnotation(TimeSeries.class);  return ts != null && ts.value();}  }
class C{  public ErrorMessage(int status,String message){  this.status=status;  this.message=message;}  }
class C{  public NTRUSigningPublicKeyParameters(InputStream is,NTRUSigningParameters params) throws IOException {  super(false);  h=IntegerPolynomial.fromBinary(is,params.N,params.q);  this.params=params;}  }
class C{  public void add(Item item){  Node oldfirst=first;  first=new Node();  first.item=item;  first.next=oldfirst;  n++;}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public void testAD_OrgBP_ID_Issue() throws Exception {  MBPartner bp=new MBPartner(getCtx(),50004,getTrxName());  final int old_org_id=bp.getAD_OrgBP_ID_Int();  int new_org_id=50005;  if (old_org_id == new_org_id) {    new_org_id=12;  }  bp.setAD_OrgBP_ID(new_org_id);  bp.getAD_OrgBP_ID_Int();  bp.saveEx();}  }
class C{  public Builder permitDiskReads(){  return disable(DETECT_DISK_READ);}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  final double pcc=PearsonCorrelation.coefficient(v1,v2);  return 1 - pcc * pcc;}  }
class C{  public final void replaceAll(Object from,Object to,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  Object[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      Object obj=fieldx[y];      if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from)))       fieldx[y]=to;    }  }}  }
class C{  private void highlightExpression(boolean highlight){  expressionHighlighted=highlight;  if (highlight) {    expressionPanel.setBorder(BorderFactory.createMatteBorder(1,1,1,1,SwingTools.RAPIDMINER_ORANGE));    expressionPanel.setBackground(Color.LIGHT_GRAY);  } else {    expressionPanel.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.GRAY));    expressionPanel.setBackground(defaultBackground);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SYMBOL_TABLE_ENTRY;}  }
class C{  protected void fail(String string){  lastPrint=0;  if (string.length() > 100) {    char[] data=string.toCharArray();    for (int i=0; i < data.length; i++) {      char c=data[i];      if (c >= 128 || c < 32) {        data[i]=(char)('a' + (c & 15));        string=null;      }    }    if (string == null) {      string=new String(data);    }  }  println(string);  throw new AssertionError(string);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting NetworkExample3...");  try {    int num_user=2;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    Datacenter datacenter0=createDatacenter("Datacenter_0");    Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker1=createBroker(1);    int brokerId1=broker1.getId();    DatacenterBroker broker2=createBroker(2);    int brokerId2=broker2.getId();    vmlist1=new ArrayList<Vm>();    vmlist2=new ArrayList<Vm>();    int vmid=0;    long size=10000;    int mips=250;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId1,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    Vm vm2=new Vm(vmid,brokerId2,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist1.add(vm1);    vmlist2.add(vm2);    broker1.submitVmList(vmlist1);    broker2.submitVmList(vmlist2);    cloudletList1=new ArrayList<Cloudlet>();    cloudletList2=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId1);    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId2);    cloudletList1.add(cloudlet1);    cloudletList2.add(cloudlet2);    broker1.submitCloudletList(cloudletList1);    broker2.submitCloudletList(cloudletList2);    NetworkTopology.buildNetworkTopology("topology.brite");    int briteNode=0;    NetworkTopology.mapNode(datacenter0.getId(),briteNode);    briteNode=2;    NetworkTopology.mapNode(datacenter1.getId(),briteNode);    briteNode=3;    NetworkTopology.mapNode(broker1.getId(),briteNode);    briteNode=4;    NetworkTopology.mapNode(broker2.getId(),briteNode);    CloudSim.startSimulation();    List<Cloudlet> newList1=broker1.getCloudletReceivedList();    List<Cloudlet> newList2=broker2.getCloudletReceivedList();    CloudSim.stopSimulation();    Log.print("=============> User " + brokerId1 + "    ");    printCloudletList(newList1);    Log.print("=============> User " + brokerId2 + "    ");    printCloudletList(newList2);    Log.printLine("NetworkExample3 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public static synchronized ComponentUI createUI(JComponent label){  if (instance == null) {    instance=new StyledLabelUI(StyleUtil.getStyle());  }  return instance;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.053 -0500",hash_original_method="EEDFE0453AAAF2A630A301400F88A0DB",hash_generated_method="E90D1453F700D1C14BCE902B1840D5A8") public static void register(){  DdmServer.registerHandler(CHUNK_HELO,mInstance);  DdmServer.registerHandler(CHUNK_FEAT,mInstance);}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  private void createGui(){  for (  final IResultsPanel panel : m_factory) {    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());  }  add(m_tabbedPane,BorderLayout.CENTER);  m_tabbedPane.setVisible(true);}  }
class C{  public CacheServerImpl(AdminDistributedSystemImpl system,GemFireVM vm) throws AdminException {  super(system,vm);  this.config=new CacheServerConfigImpl(vm);}  }
class C{  public static AVList extractRasterParameters(Dataset ds,AVList params,boolean quickReadingMode) throws IllegalArgumentException, WWRuntimeException {  if (null == params) {    params=new AVListImpl();  }  if (!gdalIsAvailable.get()) {    String message=Logging.getMessage("gdal.GDALNotAvailable");    Logging.logger().finest(message);    throw new WWRuntimeException(message);  }  if (null == ds) {    String message=Logging.getMessage("nullValue.DataSetIsNull");    Logging.logger().finest(message);    throw new IllegalArgumentException(message);  }  int width=ds.getRasterXSize();  if (0 >= width) {    String message=Logging.getMessage("generic.InvalidWidth",width);    Logging.logger().finest(message);    throw new IllegalArgumentException(message);  }  params.setValue(AVKey.WIDTH,width);  int height=ds.getRasterYSize();  if (0 >= height) {    String message=Logging.getMessage("generic.InvalidHeight",height);    Logging.logger().finest(message);    throw new IllegalArgumentException(message);  }  params.setValue(AVKey.HEIGHT,height);  int bandCount=ds.getRasterCount();  if (0 >= bandCount) {    String message=Logging.getMessage("generic.UnexpectedBandCount",bandCount);    Logging.logger().finest(message);    throw new WWRuntimeException(message);  }  params.setValue(AVKey.NUM_BANDS,bandCount);  Band band=ds.GetRasterBand(1);  if (null != band) {    if (band.GetOverviewCount() > 0) {      params.setValue(AVKey.RASTER_HAS_OVERVIEWS,Boolean.TRUE);    }    int dataType=band.getDataType();    if (dataType == gdalconst.GDT_Int16 || dataType == gdalconst.GDT_CInt16) {      params.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);      params.setValue(AVKey.DATA_TYPE,AVKey.INT16);    } else     if (dataType == gdalconst.GDT_Int32 || dataType == gdalconst.GDT_CInt32) {      params.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);      params.setValue(AVKey.DATA_TYPE,AVKey.INT32);    } else     if (dataType == gdalconst.GDT_Float32 || dataType == gdalconst.GDT_CFloat32) {      params.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);      params.setValue(AVKey.DATA_TYPE,AVKey.FLOAT32);    } else     if (dataType == gdalconst.GDT_Byte) {      int colorInt=band.GetColorInterpretation();      if (colorInt == gdalconst.GCI_GrayIndex && bandCount < 3) {        params.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.GRAYSCALE);      } else {        params.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.COLOR);      }      params.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      params.setValue(AVKey.DATA_TYPE,AVKey.INT8);    } else     if (dataType == gdalconst.GDT_UInt16) {      params.setValue(AVKey.IMAGE_COLOR_FORMAT,((bandCount >= 3) ? AVKey.COLOR : AVKey.GRAYSCALE));      params.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      params.setValue(AVKey.DATA_TYPE,AVKey.INT16);    } else     if (dataType == gdalconst.GDT_UInt32) {      params.setValue(AVKey.IMAGE_COLOR_FORMAT,((bandCount >= 3) ? AVKey.COLOR : AVKey.GRAYSCALE));      params.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      params.setValue(AVKey.DATA_TYPE,AVKey.INT32);    } else {      String msg=Logging.getMessage("generic.UnrecognizedDataType",dataType);      Logging.logger().severe(msg);      throw new WWRuntimeException(msg);    }    if ("GTiff".equalsIgnoreCase(ds.GetDriver().getShortName()) && params.hasKey(AVKey.FILE) && AVKey.ELEVATION.equals(params.getValue(AVKey.PIXEL_FORMAT))&& !params.hasKey(AVKey.ELEVATION_UNIT)) {      GeotiffReader reader=null;      try {        File src=(File)params.getValue(AVKey.FILE);        AVList tiffParams=new AVListImpl();        reader=new GeotiffReader(src);        reader.copyMetadataTo(tiffParams);        WWUtil.copyValues(tiffParams,params,new String[]{AVKey.ELEVATION_UNIT,AVKey.ELEVATION_MIN,AVKey.ELEVATION_MAX,AVKey.MISSING_DATA_SIGNAL},false);      } catch (      Throwable t) {        Logging.logger().finest(WWUtil.extractExceptionReason(t));      } finally {        if (null != reader)         reader.dispose();      }    }    extractMinMaxSampleValues(ds,band,params);    if (AVKey.ELEVATION.equals(params.getValue(AVKey.PIXEL_FORMAT)) && (!params.hasKey(AVKey.ELEVATION_MIN) || !params.hasKey(AVKey.ELEVATION_MAX) || !params.hasKey(AVKey.MISSING_DATA_SIGNAL)) && !quickReadingMode) {      double[] minmax=new double[2];      band.ComputeRasterMinMax(minmax);      if (ElevationsUtil.isKnownMissingSignal(minmax[0])) {        params.setValue(AVKey.MISSING_DATA_SIGNAL,minmax[0]);        if (setNoDataValue(band,minmax[0])) {          band.ComputeRasterMinMax(minmax);          params.setValue(AVKey.ELEVATION_MIN,minmax[0]);          params.setValue(AVKey.ELEVATION_MAX,minmax[1]);        }      } else {        params.setValue(AVKey.ELEVATION_MIN,minmax[0]);        params.setValue(AVKey.ELEVATION_MAX,minmax[1]);      }    }  }  String proj_wkt=null;  if (params.hasKey(AVKey.SPATIAL_REFERENCE_WKT)) {    proj_wkt=params.getStringValue(AVKey.SPATIAL_REFERENCE_WKT);  }  if (WWUtil.isEmpty(proj_wkt)) {    proj_wkt=ds.GetProjectionRef();  }  if (WWUtil.isEmpty(proj_wkt)) {    proj_wkt=ds.GetProjection();  }  SpatialReference srs=null;  if (!WWUtil.isEmpty(proj_wkt)) {    params.setValue(AVKey.SPATIAL_REFERENCE_WKT,proj_wkt);    srs=new SpatialReference(proj_wkt);  }  double[] gt=new double[6];  ds.GetGeoTransform(gt);  if (gt[GDAL.GT_5_PIXEL_HEIGHT] > 0) {    gt[GDAL.GT_5_PIXEL_HEIGHT]=-gt[GDAL.GT_5_PIXEL_HEIGHT];  }  java.awt.geom.Point2D[] corners=GDAL.computeCornersFromGeotransform(gt,width,height);  double minX=GDAL.getMinX(corners);  double minY=GDAL.getMinY(corners);  double maxX=GDAL.getMaxX(corners);  double maxY=GDAL.getMaxY(corners);  double rotX=gt[GDAL.GT_2_ROTATION_X];  double rotY=gt[GDAL.GT_4_ROTATION_Y];  double pixelWidth=gt[GDAL.GT_1_PIXEL_WIDTH];  double pixelHeight=gt[GDAL.GT_5_PIXEL_HEIGHT];  params.setValue(AVKey.PIXEL_WIDTH,pixelWidth);  params.setValue(AVKey.PIXEL_HEIGHT,pixelHeight);  if (minX == 0d && pixelWidth == 1d && rotX == 0d && maxY == 0d && rotY == 0d && pixelHeight == 1d) {    params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_SCREEN);  } else   if (Angle.isValidLongitude(minX) && Angle.isValidLatitude(maxY) && Angle.isValidLongitude(maxX)&& Angle.isValidLatitude(minY)) {    if (null == srs) {      srs=createGeographicSRS();    } else     if (srs.IsGeographic() == 0) {      String msg=Logging.getMessage("generic.UnexpectedCoordinateSystem",srs.ExportToWkt());      Logging.logger().warning(msg);      srs=createGeographicSRS();    }  }  if (null != srs) {    Sector sector=null;    if (!params.hasKey(AVKey.SPATIAL_REFERENCE_WKT)) {      params.setValue(AVKey.SPATIAL_REFERENCE_WKT,srs.ExportToWkt());    }    if (srs.IsLocal() == 1) {      params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_UNKNOWN);      String msg=Logging.getMessage("generic.UnknownCoordinateSystem",proj_wkt);      Logging.logger().severe(msg);      return params;    }    GDAL.Area area=new GDAL.Area(srs,ds);    if (null != area) {      params.setValue(AVKey.GDAL_AREA,area);      sector=area.getSector();      if (null != sector) {        params.setValue(AVKey.SECTOR,sector);        LatLon origin=new LatLon(sector.getMaxLatitude(),sector.getMinLongitude());        params.setValue(AVKey.ORIGIN,origin);      }    }    if (srs.IsGeographic() == 1) {      params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_GEOGRAPHIC);    } else     if (srs.IsProjected() == 1) {      params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_PROJECTED);      String projection=srs.GetAttrValue("PROJCS|PROJECTION");      String unit=srs.GetAttrValue("PROJCS|UNIT");      if (null != unit) {        unit=unit.toLowerCase();        if ("meter".equals(unit) || "meters".equals(unit) || "metre".equals(unit)|| "metres".equals(unit)) {          params.setValue(AVKey.PROJECTION_UNITS,AVKey.UNIT_METER);        } else         if ("foot".equals(unit) || "feet".equals(unit)) {          params.setValue(AVKey.PROJECTION_UNITS,AVKey.UNIT_FOOT);        } else {          Logging.logger().warning(Logging.getMessage("generic.UnknownProjectionUnits",unit));        }      }      if (null != projection && 0 < projection.length()) {        params.setValue(AVKey.PROJECTION_NAME,projection);      }    } else     if (srs.IsLocal() == 1) {      params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_SCREEN);    } else {      params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_UNKNOWN);      String msg=Logging.getMessage("generic.UnknownCoordinateSystem",proj_wkt);      Logging.logger().severe(msg);    }  }  if (!params.hasKey(AVKey.COORDINATE_SYSTEM)) {    params.setValue(AVKey.COORDINATE_SYSTEM,AVKey.COORDINATE_SYSTEM_UNKNOWN);  }  return params;}  }
class C{  public void measure(int reactTag,Callback callback){  mOperationsQueue.enqueueMeasure(reactTag,callback);}  }
class C{  public void add(Make make){  if (make == this)   throw new IllegalArgumentException("Can't add self as a dependency.");  int p=_makeList.indexOf(make);  if (p >= 0) {    Make oldMake=_makeList.get(p);    if (oldMake != make)     _makeList.add(p,make);  } else   _makeList.add(make);}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public synchronized static void removeComp(String component){  skinSpecs.remove(component);}  }
class C{  protected void initLST(){  logger.fine("initializing Library Selection Table (LST)");  try {    if (lst == null) {      if (libraryBeanName != null) {        LibraryBean libraryBean=null;        BeanContext beanContext=getBeanContext();        if (beanContext == null) {          return;        }        for (        Object obj : beanContext) {          if (obj instanceof LibraryBean) {            LibraryBean lb=(LibraryBean)obj;            if (libraryBeanName.equals(lb.getName())) {              if (logger.isLoggable(Level.FINE)) {                logger.fine(getName() + ": setting library bean to " + lb.getName());              }              libraryBean=lb;              break;            }          }        }        if (libraryBean != null) {          lst=libraryBean.getLibrarySelectionTable();          warehouse=libraryBean.getWarehouse();          warehouse.setProperties(getPropertyPrefix(),props);          searchByFeatures=true;          box=null;          logger.fine("VPFLayer.initLST(libraryBean)");        } else {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Couldn't find libraryBean " + libraryBeanName + " to read VPF data");          }        }      } else {        if (dataPaths == null) {          logger.info("VPFLayer|" + getName() + ": path not set");        } else {          logger.fine("VPFLayer.initLST(dataPaths)");          lst=new LibrarySelectionTable(dataPaths);          lst.setCutoffScale(cutoffScale);        }      }    }  } catch (  com.bbn.openmap.io.FormatException f) {    throw new java.lang.IllegalArgumentException(f.getMessage());  }}  }
class C{  protected boolean isShortClassName(){  return useShortClassName;}  }
class C{  public synchronized void disconnect(){  if (connection != null && connection.isOpen()) {    connection.close();    transaction=null;    setTransaction(null);  }}  }
class C{  public InputStream openClassfile(String classname){  String jarname="/" + classname.replace('.','/') + ".class";  return thisClass.getResourceAsStream(jarname);}  }
class C{  public void notifyAdapter(){  try {    if (mSidePanelHandler.profileAdapter != null)     mSidePanelHandler.profileAdapter.notifyDataSetChanged();    mSidePanelHandler.reloadProfileAdapter();  } catch (  NullPointerException e) {    e.printStackTrace();  }}  }
class C{  public void dropAllCTFItems(Player player){  int amount;  for (  String ctfItemName : ctfItemNames) {    amount=player.getNumberOfEquipped(ctfItemName);    if (amount > 0) {      player.drop(ctfItemName,amount);    }  }}  }
class C{  @Override protected void configure(){  bind(AuditDAO.class).to(AuditDAOImpl.class).in(Singleton.class);  bind(EventsDAO.class).to(EventsDAOImpl.class).in(Singleton.class);  bind(StateMachinesDAO.class).to(StateMachinesDAOImpl.class).in(Singleton.class);  bind(StatesDAO.class).to(StatesDAOImpl.class).in(Singleton.class);  final SessionFactoryProvider sessionFactoryProvider=new SessionFactoryProvider();  requestInjection(sessionFactoryProvider);  bind(SessionFactory.class).toProvider(sessionFactoryProvider).in(Singleton.class);  final TransactionInterceptor transactionInterceptor=new TransactionInterceptor(sessionFactoryProvider);  bindInterceptor(Matchers.not(Matchers.inPackage(MessageDao.class.getPackage())),Matchers.annotatedWith(Transactional.class),transactionInterceptor);}  }
class C{  @Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {  mDispatcher.performBackup(oldState,data,newState);}  }
class C{  public Iterator lookupName(Identifier name){  List methodList=(List)lookupMap.get(name);  if (methodList == null) {    return Collections.emptyIterator();  }  return methodList.iterator();}  }
class C{  @Deprecated public boolean isBackingStoreEnabled(){  return scrollMode == BACKINGSTORE_SCROLL_MODE;}  }
class C{  public static boolean wildmatch(String str,String pat){  return wildmatch(str,pat,0,str.length(),0,pat.length());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.963 -0500",hash_original_method="C2CB13972600F76BB48639CA034B1C26",hash_generated_method="BE93D2D64BA5AB54040206A47E6A751C") final synchronized void _sendDo(int option) throws IOException {  if (debug || debugoptions) {    System.err.println("DO: " + TelnetOption.getOption(option));  }  _output_.write(_COMMAND_DO);  _output_.write(option);  _output_.flush();}  }
class C{  public static Address fromP2SHScript(NetworkParameters params,Script scriptPubKey){  checkArgument(scriptPubKey.isPayToScriptHash(),"Not a P2SH script");  return fromP2SHHash(params,scriptPubKey.getPubKeyHash());}  }
class C{  public boolean isStandardPeriod(){  return PERIODTYPE_StandardCalendarPeriod.equals(getPeriodType());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_11:    return anonymous_invariant_1_1 != null && !anonymous_invariant_1_1.isEmpty();case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_21:  return anonymous_invariant_2_1 != null && !anonymous_invariant_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public void announceSeeds(){  BufferedReader reader=new BufferedReader(textSource.obtainReader());  try {    announceSeedsFromReader(reader);  }  finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  private boolean indexExists(String table) throws SQLException {  return indexExists(table,null);}  }
class C{  public boolean hasAllSource(){  boolean yes=false;  int expect=getSourceExpectedCount();  int have=getSourceCount();  if (expect == -1 && isSwdLoading())   yes=false; else   if (expect == have)   yes=true; else   yes=false;  return yes;}  }
class C{  public void removeVariables(Set<String> variables){  for (  String var : variables) {    range.remove(var);  }}  }
class C{  public ContentObserver(Handler handler){  mHandler=handler;}  }
class C{  private int instrumentNotNull(File dir,final InstrumentationClassFinder finder){  int instrumented=0;  final File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    File file=files[i];    final String name=file.getName();    if (name.endsWith(".class")) {      final String path=file.getPath();      log("Adding @NotNull assertions to " + path,Project.MSG_VERBOSE);      try {        final FileInputStream inputStream=new FileInputStream(file);        try {          ClassReader reader=new FailSafeClassReader(inputStream);          int version=getClassFileVersion(reader);          if (version >= Opcodes.V1_5 && !shouldBeSkippedByAnnotationPattern(reader)) {            ClassWriter writer=new InstrumenterClassWriter(getAsmClassWriterFlags(version),finder);            if (NotNullVerifyingInstrumenter.processClassFile(reader,writer)) {              final FileOutputStream fileOutputStream=new FileOutputStream(path);              try {                fileOutputStream.write(writer.toByteArray());                instrumented++;              }  finally {                fileOutputStream.close();              }            }          }        }  finally {          inputStream.close();        }      } catch (      IOException e) {        log("Failed to instrument @NotNull assertion for " + path + ": "+ e.getMessage(),Project.MSG_WARN);      }catch (      Exception e) {        fireError("@NotNull instrumentation failed for " + path + ": "+ e.toString());      }    } else     if (file.isDirectory()) {      instrumented+=instrumentNotNull(file,finder);    }  }  return instrumented;}  }
class C{  public void run(){  List<SsaInsn> useList=ssaMeth.getUseListForRegister(regV);  for (  SsaInsn insn : useList) {    nextFunction=NextFunction.DONE;    if (insn instanceof PhiInsn) {      PhiInsn phi=(PhiInsn)insn;      for (      SsaBasicBlock pred : phi.predBlocksForReg(regV,ssaMeth)) {        blockN=pred;        nextFunction=NextFunction.LIVE_OUT_AT_BLOCK;        handleTailRecursion();      }    } else {      blockN=insn.getBlock();      statementIndex=blockN.getInsns().indexOf(insn);      if (statementIndex < 0) {        throw new RuntimeException("insn not found in it's own block");      }      nextFunction=NextFunction.LIVE_IN_AT_STATEMENT;      handleTailRecursion();    }  }  int nextLiveOutBlock;  while ((nextLiveOutBlock=liveOutBlocks.nextSetBit(0)) >= 0) {    blockN=ssaMeth.getBlocks().get(nextLiveOutBlock);    liveOutBlocks.clear(nextLiveOutBlock);    nextFunction=NextFunction.LIVE_OUT_AT_BLOCK;    handleTailRecursion();  }}  }
class C{  private boolean isAtom(){  return "application".equals(type) && "atom+xml".equals(subType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS__FLAGS:    getFlags().clear();  return;}super.eUnset(featureID);}  }
class C{  protected boolean calculateSize(){  p_width=0;  p_height=0;  if (m_barcode == null)   return true;  p_width=m_barcode.getWidth();  p_height=m_barcode.getHeight();  if (p_width * p_height == 0)   return true;  m_scaleFactor=1f;  if (p_maxWidth != 0 && p_width > p_maxWidth)   m_scaleFactor=p_maxWidth / p_width;  if (p_maxHeight != 0 && p_height > p_maxHeight && p_maxHeight / p_height < m_scaleFactor)   m_scaleFactor=p_maxHeight / p_height;  p_width=(float)m_scaleFactor * p_width;  p_height=(float)m_scaleFactor * p_height;  return true;}  }
class C{  private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.242 -0500",hash_original_method="F4780612A05468EA5B4971365E65F2E9",hash_generated_method="3CA9ECB8B6579E2ED02777D3C810F04C") public boolean quickContains(int left,int top,int right,int bottom){  return (((left + right + top+ bottom+ getTaintInt())) == 1);}  }
class C{  public void damageReport(VisualItem item,Rectangle2D region){  for (int i=0; i < m_displays.size(); ++i) {    Display d=getDisplay(i);    if (d.getPredicate().getBoolean(item)) {      d.damageReport(region);    }  }}  }
class C{  public static String httpEngine(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String serviceName=request.getParameter("serviceName");  String serviceMode=request.getParameter("serviceMode");  String xmlContext=request.getParameter("serviceContext");  Map<String,Object> result=new HashMap<String,Object>();  Map<String,Object> context=null;  if (serviceName == null)   result.put(ModelService.ERROR_MESSAGE,"Cannot have null service name");  if (serviceMode == null)   serviceMode="SYNC";  if (!result.containsKey(ModelService.ERROR_MESSAGE)) {    if (xmlContext != null) {      try {        Object o=XmlSerializer.deserialize(xmlContext,delegator);        if (o instanceof Map<?,?>)         context=UtilGenerics.checkMap(o); else {          Debug.logError("Context not an instance of Map error",module);          result.put(ModelService.ERROR_MESSAGE,"Context not an instance of Map");        }      } catch (      Exception e) {        Debug.logError(e,"Deserialization error",module);        result.put(ModelService.ERROR_MESSAGE,"Error occurred deserializing context: " + e.toString());      }    }  }  if (!result.containsKey(ModelService.ERROR_MESSAGE)) {    try {      ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);      if (model.export || exportAll) {        if (serviceMode.equals("ASYNC")) {          dispatcher.runAsync(serviceName,context);        } else {          result=dispatcher.runSync(serviceName,context);        }      } else {        Debug.logWarning("Attempt to invoke a non-exported service: " + serviceName,module);        throw new GenericServiceException("Cannot find requested service");      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Service invocation error",module);      result.put(ModelService.ERROR_MESSAGE,"Service invocation error: " + e.toString());    }  }  StringBuilder errorMessage=new StringBuilder();  String resultString=null;  try {    resultString=XmlSerializer.serialize(result);  } catch (  Exception e) {    Debug.logError(e,"Cannot serialize result",module);    if (result.containsKey(ModelService.ERROR_MESSAGE))     errorMessage.append(result.get(ModelService.ERROR_MESSAGE));    errorMessage.append("::");    errorMessage.append(e);  }  try {    PrintWriter out=response.getWriter();    response.setContentType("plain/text");    if (errorMessage.length() > 0) {      response.setContentLength(errorMessage.length());      out.write(errorMessage.toString());    } else {      response.setContentLength(resultString.length());      out.write(resultString);    }    out.flush();    response.flushBuffer();  } catch (  IOException e) {    Debug.logError(e,"Problems w/ getting the servlet writer.",module);    return "error";  }  return null;}  }
class C{  public ColladaMaterial(String ns){  super(ns);}  }
class C{  protected void layoutContainer(){  Rectangle inBounds=p.getBounds();  Insets insets=p.getInsets();  inBounds.x+=insets.left;  inBounds.width-=insets.left;  inBounds.width-=insets.right;  inBounds.y+=insets.top;  inBounds.height-=insets.top;  inBounds.height-=insets.bottom;  backgroundBounds=(Rectangle)inBounds.clone();  occludingBounds=(Rectangle)inBounds.clone();  layoutCardinals();  layoutEast(p.getEast(),occludingBounds.x + occludingBounds.width,occludingBounds.y,occludingBounds.width,occludingBounds.height);  layoutWest(p.getWest(),occludingBounds.x,occludingBounds.y,occludingBounds.width,occludingBounds.height);  int southLeft=inBounds.x + getWidthAtYCardinal(p.getWest(),inBounds.y + inBounds.height - getHeightAtLeftCardinal(p.getSouth()));  int southRight=inBounds.x + inBounds.width - getWidthAtYCardinal(p.getEast(),inBounds.y + inBounds.height - getHeightAtRightCardinal(p.getSouth()));  layoutSouth(p.getSouth(),southLeft,occludingBounds.y + occludingBounds.height,southRight - southLeft,occludingBounds.height);  int northLeft=inBounds.x + getWidthAtYCardinal(p.getWest(),inBounds.y + getHeightAtLeftCardinal(p.getNorth()));  int northRight=inBounds.x + inBounds.width - getWidthAtYCardinal(p.getEast(),inBounds.y + getHeightAtRightCardinal(p.getNorth()));  layoutNorth(p.getNorth(),northLeft,occludingBounds.y,northRight - northLeft,occludingBounds.height);  layoutBackground();}  }
class C{  @Override public double nextPathAvailable(){  if (pathQueue.size() == 0) {    return latestPathStartTime;  } else {    return pathQueue.element().getKey();  }}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public List<String> hvals(final String key){  checkIsInMulti();  client.hvals(key);  final List<String> lresult=client.getMultiBulkReply();  return lresult;}  }
class C{  public STAXEventWriter(XMLEventConsumer consumer){  this.consumer=consumer;}  }
class C{  public MockSpamd(int port) throws IOException {  socket=new ServerSocket(port);}  }
class C{  private boolean isIdentifierStartChar(){  return isIdentifierStartChar(_pos);}  }
class C{  public boolean isAnonymousVisible(){  return anonymousVisible;}  }
class C{  protected void onPeerFailure(Json msg){  HGPeerIdentity id=getThisPeer().getIdentity(getSender(msg));  this.future.result.exception=new ExceptionAtPeer(id,msg.at(CONTENT).asString());  getState().assign(WorkflowState.Failed);}  }
class C{  public static void reverse(byte[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    byte tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static Map<Integer,Properties> collectProperties(Properties properties){  Map<Integer,Properties> ret=new HashMap<Integer,Properties>();  if (properties != null) {    for (    String name : properties.stringPropertyNames()) {      int index=getIndex(name);      if (index >= 0) {        Properties props=ret.get(index);        if (props == null) {          props=new Properties();          ret.put(index,props);        }        String newName=dropToken(name);        if (newName.length() > 0) {          props.setProperty(newName,properties.getProperty(name));        }      }    }  }  return ret;}  }
class C{  private void handleQuit(){  GUIMediator.applyWindowSettings();  GUIMediator.close(false);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public TungstenProperties generateTHLParallelQueueProps(String schemaName,int channels) throws Exception {  prepareLogDir(schemaName);  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.setProperty(ReplicatorConf.METADATA_SCHEMA,schemaName);  builder.addPipeline("master","extract,feed,apply","thl,thl-queue");  builder.addStage("extract","dummy","thl-apply",null);  builder.addStage("feed","thl-extract","thl-queue-apply",null);  builder.addStage("apply","thl-queue-extract","dummy",null);  builder.addComponent("store","thl",THL.class);  builder.addProperty("store","thl","logDir",schemaName);  builder.addComponent("store","thl-queue",THLParallelQueue.class);  builder.addProperty("store","thl-queue","maxSize","5");  builder.addComponent("extractor","dummy",DummyExtractor.class);  builder.addProperty("extractor","dummy","nFrags","1");  builder.addComponent("applier","thl-apply",THLStoreApplier.class);  builder.addProperty("applier","thl-apply","storeName","thl");  builder.addComponent("extractor","thl-extract",THLStoreExtractor.class);  builder.addProperty("extractor","thl-extract","storeName","thl");  builder.addComponent("applier","thl-queue-apply",THLParallelQueueApplier.class);  builder.addProperty("applier","thl-queue-apply","storeName","thl-queue");  builder.addComponent("extractor","thl-queue-extract",THLParallelQueueExtractor.class);  builder.addProperty("extractor","thl-queue-extract","storeName","thl-queue");  builder.addComponent("applier","dummy",DummyApplier.class);  return builder.getConfig();}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  @VisibleForTesting protected void cancelAlarmOnSystem(Context context,PendingIntent operation){  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.cancel(operation);}  }
class C{  synchronized void initmessage(XNetReply l){  int oldState=internalState;  message(l);  internalState=oldState;}  }
class C{  private static String mungeName(String fname){  String result=fname;  result=result.replace("/",SLASH_SWAP);  return result;}  }
class C{  public Map<String,Object> next() throws IOException {  if (!atDocs) {    boolean found=advanceToDocs();    atDocs=true;    if (!found)     return null;  }  int event=parser.nextEvent();  if (event == JSONParser.ARRAY_END)   return null;  Object o=ObjectBuilder.getVal(parser);  return (Map<String,Object>)o;}  }
class C{  public SendMessageBatchResult sendMessageBatch(String queueUrl,List<SendMessageBatchRequestEntry> entries){  SendMessageBatchRequest sendMessageBatchRequest=new SendMessageBatchRequest(queueUrl,entries);  return sendMessageBatch(sendMessageBatchRequest);}  }
class C{  public MP3(File file){  this.file=file;}  }
class C{  @Override public Future<DLSN> write(final LogRecord record){  final Stopwatch stopwatch=Stopwatch.createStarted();  return asyncWrite(record,true).addEventListener(new OpStatsListener<DLSN>(writeOpStatsLogger,stopwatch));}  }
class C{  public synchronized boolean containsAll(Collection c){  return super.containsAll(c);}  }
class C{  public static void e(String tag,String s){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s);}  }
class C{  public boolean isMatch(String input){  if (!isCaseSensitive)   input=input.toLowerCase();  if (parts.length == 1)   return (parts[0] == MATCH_ANY || parts[0].equals(input));  if (parts.length == 2) {    if (parts[0] == MATCH_ANY)     return input.endsWith(parts[1]);    if (parts[parts.length - 1] == MATCH_ANY)     return input.startsWith(parts[0]);  }  int pos=0;  int len=input.length();  boolean doMatchAny=false;  for (  String part : parts) {    if (part == MATCH_ANY) {      doMatchAny=true;      continue;    }    if (part == MATCH_ONE) {      doMatchAny=false;      pos++;      continue;    }    int ix=input.indexOf(part,pos);    if (ix == -1)     return false;    if (!doMatchAny && ix != pos)     return false;    pos=ix + part.length();    doMatchAny=false;  }  if ((parts[parts.length - 1] != MATCH_ANY) && (len != pos))   return false;  return true;}  }
class C{  public Person(){  this("Unknown","Unknown","Unknown","Unknown");}  }
class C{  public static boolean isStrictfp(int flags){  return (flags & AccStrictfp) != 0;}  }
class C{  @Override public String index(){  return this.index;}  }
class C{  public static Color blend(Color color1,Color color2,double weight){  double w2=MathUtils.limit(weight,0.0,1.0);  double w1=1.0 - w2;  int r=(int)Math.round(w1 * color1.getRed() + w2 * color2.getRed());  int g=(int)Math.round(w1 * color1.getGreen() + w2 * color2.getGreen());  int b=(int)Math.round(w1 * color1.getBlue() + w2 * color2.getBlue());  int a=(int)Math.round(w1 * color1.getAlpha() + w2 * color2.getAlpha());  return new Color(r,g,b,a);}  }
class C{  private Cipher createRC4Cipher() throws NoSuchAlgorithmException, NoSuchPaddingException {  return Cipher.getInstance(CIPHER_RC4);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof UseCandidateAttribute))   return false;  if (obj == this)   return true;  UseCandidateAttribute useCandidateAtt=(UseCandidateAttribute)obj;  if (useCandidateAtt.getAttributeType() != getAttributeType() || useCandidateAtt.getDataLength() != getDataLength())   return false;  return true;}  }
class C{  public long length() throws SerialException {  isValid();  return len;}  }
class C{  public String toString(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(String.format("0x"));  for (  byte b : this.instance_uid) {    stringBuilder.append(String.format("%02x",b));  }  return stringBuilder.toString();}  }
class C{  static GLUhalfEdge MakeEdge(GLUhalfEdge eNext){  GLUhalfEdge e;  GLUhalfEdge eSym;  GLUhalfEdge ePrev;  e=new GLUhalfEdge(true);  eSym=new GLUhalfEdge(false);  if (!eNext.first) {    eNext=eNext.Sym;  }  ePrev=eNext.Sym.next;  eSym.next=ePrev;  ePrev.Sym.next=e;  e.next=eNext;  eNext.Sym.next=eSym;  e.Sym=eSym;  e.Onext=e;  e.Lnext=eSym;  e.Org=null;  e.Lface=null;  e.winding=0;  e.activeRegion=null;  eSym.Sym=e;  eSym.Onext=eSym;  eSym.Lnext=e;  eSym.Org=null;  eSym.Lface=null;  eSym.winding=0;  eSym.activeRegion=null;  return e;}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  synchronized void storeTransaction(Transaction t){  if (t.getStatus() == Transaction.STATUS_PREPARED || t.getName() != null) {    Object[] v={t.getStatus(),t.getName()};    preparedTransactions.put(t.getId(),v);  }}  }
class C{  public void addComponent(Component component) throws InvalidComponentException {  isComponentAddable(component);  components.add(component);}  }
class C{  public synchronized void close(){  if (closing) {    return;  }  if (userSessions.size() > 0) {    Session[] all=new Session[userSessions.size()];    userSessions.toArray(all);    for (    Session s : all) {      try {        s.rollback();        s.close();      } catch (      DbException e) {        trace.error(e,"disconnecting session #{0}",s.getId());      }    }  }  repository.close();  if (queryExecutor != null) {    Threads.shutdownGracefully(queryExecutor,1000,1000,TimeUnit.MILLISECONDS);  }  closing=true;}  }
class C{  public static Bit valueOf(boolean b){  return b ? TRUE : FALSE;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnormalize2.class,args);}  }
class C{  @Override public boolean isSatisfiedBy(Assignment input){  if (!variable.isFilledBy(input) || !templateValue.isFilledBy(input)) {    return false;  }  BasicCondition grounded=new BasicCondition(this,input);  Value actualValue=input.getValue(grounded.variable.toString());  return grounded.isSatisfied(actualValue);}  }
class C{  public void testUnknownHandlingIgnoreWithFeature() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,false);  TestBean result=null;  try {    result=mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD),TestBean.class);  } catch (  JsonMappingException jex) {    fail("Did not expect a problem, got: " + jex.getMessage());  }  assertNotNull(result);  assertEquals(1,result._a);  assertNull(result._unknown);  assertEquals(-1,result._b);}  }
class C{  public Object removeFromVisualization(IVisualAgent agent){  return environment.remove(agent.getVisualizationObject());}  }
class C{  public void complete(ClassSymbol c) throws CompletionFailure {  if (completionFailureName == c.fullname) {    throw new CompletionFailure(c,"user-selected completion failure by class name");  }  JCCompilationUnit tree;  JavaFileObject filename=c.classfile;  JavaFileObject prev=log.useSource(filename);  try {    tree=parse(filename,filename.getCharContent(false));  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  } finally {    log.useSource(prev);  }  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.started(e);  }  enter.complete(List.of(tree),c);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.finished(e);  }  if (enter.getEnv(c) == null) {    boolean isPkgInfo=tree.sourcefile.isNameCompatible("package-info",JavaFileObject.Kind.SOURCE);    if (isPkgInfo) {      if (enter.getEnv(tree.packge) == null) {        JCDiagnostic diag=diagFactory.fragment("file.does.not.contain.package",c.location());        throw reader.new BadClassFile(c,filename,diag);      }    } else {      JCDiagnostic diag=diagFactory.fragment("file.doesnt.contain.class",c.getQualifiedName());      throw reader.new BadClassFile(c,filename,diag);    }  }  implicitSourceFilesRead=true;}  }
class C{  private static PsiElement asOperationOrNull(PsiElement operationCandidate){  if (operationCandidate instanceof JSGraphQLPsiElement) {    if (operationCandidate instanceof JSGraphQLFragmentDefinitionPsiElement) {      return null;    }    if (operationCandidate instanceof JSGraphQLSelectionSetPsiElement) {      if (!((JSGraphQLSelectionSetPsiElement)operationCandidate).isAnonymousQuery()) {        return null;      }    }    return operationCandidate;  }  return null;}  }
class C{  private Rectangle interpolate(Rectangle startBounds,Rectangle finalBounds,double progress){  Rectangle bounds=new Rectangle();  bounds.setLocation(interpolate(startBounds.getLocation(),finalBounds.getLocation(),progress));  bounds.setSize(interpolate(startBounds.getSize(),finalBounds.getSize(),progress));  return bounds;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof InOutParameter) {    obj=((InOutParameter)obj).getValue();  }  return ((obj == value) || (value != null && value.equals(obj)));}  }
class C{  public static GridLayout createFormGridLayout(boolean makeColumnsEqualWidth,int numColumns){  GridLayout layout=new GridLayout();  layout.marginHeight=FORM_BODY_MARGIN_HEIGHT;  layout.marginWidth=FORM_BODY_MARGIN_WIDTH;  layout.marginTop=FORM_BODY_MARGIN_TOP;  layout.marginBottom=FORM_BODY_MARGIN_BOTTOM;  layout.marginLeft=FORM_BODY_MARGIN_LEFT;  layout.marginRight=FORM_BODY_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_BODY_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_BODY_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof BasicEffect) {    if (!((BasicEffect)o).getVariable().equals(variableLabel)) {      return false;    } else     if (!((BasicEffect)o).getValue().equals(getValue())) {      return false;    } else     if (((BasicEffect)o).exclusive != exclusive) {      return false;    } else     if (((BasicEffect)o).isNegated() != negated) {      return false;    } else     if (((BasicEffect)o).priority != priority) {      return false;    }    return true;  }  return false;}  }
class C{  public boolean checkAllMessagesContaining(boolean check,String message){  if (message == null || message.length() == 0) {    return checkAllMessages(check,false);  }  message=Utils.makeTextSafeForSQL(message);  SQLiteDatabase db=getWritableDatabase();  if (db != null) {    String likeQuery="";    String messageNoSpace=message.replaceAll("\\s","");    if (message.length() == 0 || messageNoSpace.length() == 0)     likeQuery=(COL_MESSAGE + " LIKE '%" + message+ "%'");    if (likeQuery.length() == 0) {      message=message.replaceAll("[\n\"]"," ");      while (message.charAt(0) == ' ') {        message=message.substring(1);      }      String[] words=message.split("\\s");      for (int i=0; i < words.length; i++) {        if (i > 0) {          likeQuery+=" OR ";        }        likeQuery+=" " + COL_MESSAGE + " LIKE '%"+ words[i]+ "%' ";      }    }    String parentOnly=" AND (" + COL_BIGPARENT + " IS NULL OR "+ COL_BIGPARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ ") AND "+ COL_PARENT+ " NOT IN (SELECT "+ COL_MESSAGE_ID+ " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ "))";    db.execSQL("UPDATE " + TABLE + " SET "+ COL_CHECKED+ "="+ (check ? TRUE : FALSE)+ " WHERE "+ COL_DELETED+ " ="+ FALSE+ " AND ("+ likeQuery+ ")"+ parentOnly+ ";");    return true;  }  return false;}  }
class C{  public boolean isFull(){  return height >= 2;}  }
class C{  final public boolean isTargetDefault(){  return getTargetGraph() == null;}  }
class C{  public void destroy() throws IllegalStateTransitionException {  if (state == AdapterState.DESTROYED) {    throw new IllegalStateTransitionException("Cannot destroy from the " + state + " state");  }  state=AdapterState.DESTROYED;}  }
class C{  @Category(FlakyTest.class) @Test public void testModifyColocation() throws Throwable {  createColocatedPRs("region1");  closeCache();  IgnoredException ex=IgnoredException.addIgnoredException("DiskAccessException|IllegalStateException");  try {    createColocatedPRs("region2");    fail("Should have received an illegal state exception");  } catch (  IllegalStateException expected) {  } finally {    ex.remove();  }  closeCache();  createColocatedPRs("/region1");  closeCache();  ex=IgnoredException.addIgnoredException("DiskAccessException|IllegalStateException");  try {    createColocatedPRs(null);    fail("Should have received an illegal state exception");  } catch (  IllegalStateException expected) {  } finally {    ex.remove();  }  closeCache();}  }
class C{  public T caseTypeAlias(TypeAlias object){  return null;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public void warning(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).warning(e);  } else {    try {      errorListener.warning(new javax.xml.transform.TransformerException(e));    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public static AvatarBitmapTransformation transformationFor(final Context applicationContext,final AvatarSize avatarSize){  if (TRANSFORMATION_CACHE.get(avatarSize) == null) {synchronized (AvatarBitmapTransformation.class) {      if (TRANSFORMATION_CACHE.get(avatarSize) == null) {        TRANSFORMATION_CACHE.put(avatarSize,new AvatarBitmapTransformation(applicationContext,avatarSize));      }    }  }  return TRANSFORMATION_CACHE.get(avatarSize);}  }
class C{  public GemFireCheckedException(Throwable cause){  super();  this.initCause(cause);}  }
class C{  @SuppressWarnings({"regex","not.sef"}) public static String regexError(String s,int groups){  try {    Pattern p=Pattern.compile(s);    int actualGroups=getGroupCount(p);    if (actualGroups < groups) {      return regexErrorMessage(s,groups,actualGroups);    }  } catch (  PatternSyntaxException e) {    return e.getMessage();  }  return null;}  }
class C{  private void fetchEmotes(String room,Set<Integer> emotesets){  Set<Emoticon> result=new HashSet<>();  for (  int set : emotesets) {    Set<Emoticon> fetched=fetchEmoteSet(room,set);    for (    Emoticon emoteToAdd : fetched) {      for (      Emoticon emote : result) {        if (emote.equals(emoteToAdd)) {          emote.addInfos(emoteToAdd.getInfos());          break;        }      }      result.add(emoteToAdd);    }  }  EmoticonUpdate update=new EmoticonUpdate(result,Emoticon.Type.FFZ,Emoticon.SubType.EVENT,room);  listener.channelEmoticonsReceived(update);}  }
class C{  public static double[][] align(int[] real,double[] pred){  int missing=numberOfMissingLabels(real);  double[] _real=new double[real.length - missing];  double[] _pred=new double[real.length - missing];  int offset=0;  for (int i=0; i < real.length; i++) {    if (real[i] == -1 || pred[i] == -1.0 || Double.isNaN(pred[i])) {      offset++;      continue;    }    _real[i - offset]=real[i];    _pred[i - offset]=pred[i];  }  double[][] res=new double[2][0];  res[0]=_real;  res[1]=_pred;  return res;}  }
class C{  public SVGPath ellipticalArc(double[] rxy,double ar,double la,double sp,double[] xy){  append(SVGConstants.PATH_ARC,rxy[0],rxy[1],ar,la,sp,xy[0],xy[1]);  return this;}  }
class C{  private int loadEmotes(String json,String streamRestriction){  if (streamRestriction != null && streamRestriction.equals("$global$")) {    streamRestriction=null;  }  Set<Emoticon> emotes=parseEmotes(json,streamRestriction);  Set<String> bots=parseBots(json);  LOGGER.info("BTTV: Found " + emotes.size() + " emotes / "+ bots.size()+ " bots");  listener.receivedEmoticons(emotes);  listener.receivedBotNames(streamRestriction,bots);  return emotes.size();}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public double cleanPriceFromZSpread(final double zSpread,final DayCounter dc,final Compounding comp,final Frequency freq,final Date settlementDate){  final double p=dirtyPriceFromZSpread(zSpread,dc,comp,freq,settlementDate);  return p - accruedAmount(settlementDate);}  }
class C{  protected void checkCancel(IProgressMonitor monitor){  if (monitor.isCanceled()) {    throw new OperationCanceledException();  }}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public GraphWorkbench(){  this(new EdgeListGraph());}  }
class C{  public HashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];  init();}  }
class C{  public void testCameraPairwiseScenario22() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.MAX,WhiteBalance.AUTO,SceneMode.ACTION,PictureSize.SMALL,Geotagging.OFF);}  }
class C{  public void validate() throws InvalidMameArgumentsException {  Options mergedOptions=new Options();  for (  Option o : mameOptions.getAllOptions().getOptions()) {    mergedOptions.addOption(o);  }  for (  Option o : iaMameOptions.getOptions()) {    mergedOptions.addOption(o);  }  try {    CommandLineParser parser=new DefaultParser();    this.commandLine=parser.parse(mergedOptions,rawArgs);  } catch (  ParseException e) {    throw (InvalidMameArgumentsException)new InvalidMameArgumentsException(e.getMessage()).initCause(e);  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  protected boolean isValidHeader(HttpURLConnection connection){  String version=connection.getHeaderField(API_VERSION_FIELD);  return version != null && version.equals(SUPPORTED_SANTA_HEADER_API);}  }
class C{  public void testFileFileWithConfigOption() throws Exception {  Properties properties=loadProperties("test-file-configfile-file");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  public BillReceipt linkBillToReceipt(BillReceiptInfo bri) throws InvalidAccountHeadException, ObjectNotFoundException {  BillReceipt billRecpt=null;  try {    if (bri != null) {      billRecpt=new BillReceipt();      EgBill egBill=egBillDAO.findById(Long.valueOf(bri.getBillReferenceNum()),false);      List<EgBillDetails> billDetList=egBillDetailsDAO.getBillDetailsByBill(egBill);      BigDecimal totalCollectedAmt=calculateTotalCollectedAmt(bri,billDetList);      billRecpt.setBillId(egBill);      billRecpt.setReceiptAmt(totalCollectedAmt);      billRecpt.setReceiptNumber(bri.getReceiptNum());      billRecpt.setReceiptDate(bri.getReceiptDate());      billRecpt.setCollectionStatus(bri.getReceiptStatus().getCode());      billRecpt.setIsCancelled(Boolean.FALSE);      billRecpt.setCreatedBy(bri.getCreatedBy());      billRecpt.setModifiedBy(bri.getModifiedBy());      billRecpt.setCreatedDate(new Date());      billRecpt.setModifiedDate(new Date());      egBillReceiptDAO.create(billRecpt);    }  } catch (  ApplicationRuntimeException e) {    throw new ApplicationRuntimeException("Exception in linkBillToReceipt" + e);  }  return billRecpt;}  }
class C{  public float key(){  return _map._set[_index];}  }
class C{  protected void clearFile(){  m_pathFile=null;  m_inputStreamFile=null;}  }
class C{  public void handleEntry(File file,boolean RPFDirFound){  try {    String[] filenames=file.list();    boolean dirTest=false;    boolean not14=false;    try {      java.lang.reflect.Method method=file.getClass().getDeclaredMethod("isDirectory",(Class[])null);      Object obj=method.invoke(file,(Object[])null);      if (obj instanceof Boolean) {        dirTest=((Boolean)obj).booleanValue();      }    } catch (    NoSuchMethodException nsme) {      not14=true;    }catch (    SecurityException se) {      not14=true;    }catch (    IllegalAccessException iae) {      not14=true;    }catch (    IllegalArgumentException iae2) {      not14=true;    }catch (    java.lang.reflect.InvocationTargetException ite) {      not14=true;    }    if ((dirTest || not14) && filenames != null) {      if (Debug.debugging("maketocdetail")) {        Debug.output("RpfFileSearch.handleEntry(" + file + ", "+ RPFDirFound+ "), file is a directory");      }      File[] contents=new File[filenames.length];      for (int i=0; i < contents.length; i++) {        contents[i]=new File(file,filenames[i]);      }      for (int i=0; i < contents.length; i++) {        boolean rpf=false;        if (!RPFDirFound) {          rpf=filenames[i].equalsIgnoreCase("RPF");        }        handleEntry(contents[i],RPFDirFound || rpf);      }    } else {      if (Debug.debugging("maketocdetail")) {        Debug.output("RpfFileSearch.handleEntry(" + file + ", "+ RPFDirFound+ "), adding to list...");      }      String parent=file.getParent();      if (RPFDirFound) {        if (parent != null) {          files.add(file.getParent() + File.separator + file.getName());        } else {          files.add("." + File.separator + file.getName());        }      }    }  } catch (  NullPointerException npe) {  }catch (  SecurityException se) {  }}  }
class C{  public void save(OutputStream out) throws IOException {  reset();  try {    if (doctype != null) {      OutputStreamWriter w=new OutputStreamWriter(out,"UTF8");      w.write("<!DOCTYPE ");      w.write(doctype);      w.write(">\n");      w.flush();    }    Transformer t=TransformerFactory.newInstance().newTransformer();    t.transform(new DOMSource(document),new StreamResult(out));  } catch (  TransformerException e) {    IOException error=new IOException(e.getMessage());    error.initCause(e);    throw error;  }}  }
class C{  public void stopDrawShadowTexture(){  GLES20.glColorMask(mCachedColorMask[0],mCachedColorMask[1],mCachedColorMask[2],mCachedColorMask[3]);  GLES20.glDepthMask(mCachedDepthMask[0]);  GLES20.glCullFace(GLES20.GL_BACK);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);}  }
class C{  public Linear(double[] priors,int large){  super(priors,large);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public boolean containsKey(K key){  return root.containsKey(ord,key);}  }
class C{  private static Array listToArrayRemoveEmpty(String list,String delimiter,boolean multiCharDelim){  if (!multiCharDelim || delimiter.length() == 0)   return listToArrayRemoveEmpty(list,delimiter);  if (delimiter.length() == 1)   return listToArrayRemoveEmpty(list,delimiter.charAt(0));  int len=list.length();  if (len == 0)   return new ArrayImpl();  Array array=new ArrayImpl();  int from=0;  int index;  int dl=delimiter.length();  while ((index=list.indexOf(delimiter,from)) != -1) {    if (from < index)     array.appendEL(list.substring(from,index));    from=index + dl;  }  if (from < len)   array.appendEL(list.substring(from,len));  return array;}  }
class C{  public void changeGeneralConfig(String value){  WebElement generalConfigButton=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.tab.identifier"))));  WebElement inputGeneralConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.input.monitoringFr.identifier"))));  WebElement buttonSaveConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.button.save.identifier"))));  generalConfigButton.click();  inputGeneralConfig.sendKeys(value);  buttonSaveConfig.click();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int numIslandsUnionFind(char[][] grid){  if (grid.length == 0 || grid[0].length == 0) {    return 0;  }  int m=grid.length, n=grid[0].length;  UnionFind uf=new UnionFind(m,n,grid);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      if (grid[i][j] == '0') {        continue;      }      int p=i * n + j;      int q;      if (i > 0 && grid[i - 1][j] == '1') {        q=p - n;        uf.union(p,q);      }      if (i < m - 1 && grid[i + 1][j] == '1') {        q=p + n;        uf.union(p,q);      }      if (j > 0 && grid[i][j - 1] == '1') {        q=p - 1;        uf.union(p,q);      }      if (j < n - 1 && grid[i][j + 1] == '1') {        q=p + 1;        uf.union(p,q);      }    }  }  return uf.count;}  }
class C{  public GameDataComponent(final GameData data){  m_data=data;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childNodes;  ProcessingInstruction piNode;  String target;  doc=(Document)load("staff",false);  childNodes=doc.getChildNodes();  piNode=(ProcessingInstruction)childNodes.item(0);  target=piNode.getTarget();  assertEquals("processinginstructionGetTargetAssert","TEST-STYLE",target);}  }
class C{  public NotificationChain basicSetAnnotationList(AnnotationList newAnnotationList,NotificationChain msgs){  AnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static List<Position> computeShiftedPositions(Position oldPosition,Position newPosition,Iterable<? extends Position> positions){  if (oldPosition == null || newPosition == null) {    String msg=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (positions == null) {    String msg=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  ArrayList<Position> newPositions=new ArrayList<Position>();  double elevDelta=newPosition.getElevation() - oldPosition.getElevation();  for (  Position pos : positions) {    Angle distance=LatLon.greatCircleDistance(oldPosition,pos);    Angle azimuth=LatLon.greatCircleAzimuth(oldPosition,pos);    LatLon newLocation=LatLon.greatCircleEndPosition(newPosition,azimuth,distance);    double newElev=pos.getElevation() + elevDelta;    newPositions.add(new Position(newLocation,newElev));  }  return newPositions;}  }
class C{  @Deprecated public static CallSite bootstrapCurrent(Lookup caller,String name,MethodType type){  return realBootstrap(caller,name,CALL_TYPES.METHOD.ordinal(),type,false,true,false);}  }
class C{  public ActionSwitch(){  m_switchVal=0;}  }
class C{  public static void until(Callable<Boolean> condition,long timeout,TimeUnit timeUnit){  until(condition,timeout,timeUnit,50);}  }
class C{  public Counter<String> generateTags(String[] doc,int n,StringBuilder explain){  Map<String,Double> p=new Hashtable<String,Double>();  Map<String,Double> prwd=new Hashtable<String,Double>();  Counter<String> nwd=new Counter<String>();  for (  String w : doc) {    nwd.inc(w,1);  }  for (  Entry<String,Long> e : nwd) {    if (!ntw.columns().contains(e.getKey()))     continue;    double prw=prw(e.getKey());    prwd.put(e.getKey(),e.getValue() * prw);  }  Counter<String> tags=nwd;  tags.clear();  boolean warned=true;  for (int i=0; i < n; i++) {    String reason=sample(prwd);    if (reason == null) {      if (warned == false)       LOG.info("reason == null, prwd.size()=" + prwd.size() + " doc.length="+ doc.length);      warned=true;      continue;    }    p.clear();    for (    String tag : ntw.rows(reason)) {      p.put(tag,ptr(tag,reason));    }    if (p.size() > 0) {      String tag=sample(p);      tags.inc(tag,1);      if (explain != null) {        explain.append("from " + reason + " => "+ tag+ "<br>");      }    }  }  return tags;}  }
class C{  public static X509Certificate loadCertificate(String asciiCrt) throws CertificateParsingException {  return loadCertificate(new ByteArrayInputStream(asciiCrt.getBytes(US_ASCII)));}  }
class C{  public static String toSQLName(Class<?> table){  if (table.isAnnotationPresent(Table.class)) {    Table annotation=table.getAnnotation(Table.class);    if ("".equals(annotation.name())) {      return NamingHelper.toSQLNameDefault(table.getSimpleName());    }    return annotation.name();  }  return NamingHelper.toSQLNameDefault(table.getSimpleName());}  }
class C{  private boolean conditionM0(String value,int index){  if (charAt(value,index + 1) == 'M') {    return true;  }  return contains(value,index - 1,3,"UMB") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,"ER"));}  }
class C{  private final int inCache(final long index){  if (index >= this.cacheindex && index < this.cacheindex + this.cachecount) {    return (int)(index - this.cacheindex);  }  return -1;}  }
class C{  @SuppressWarnings("unchecked") public int partition(int left,int right,int pivotIndex){  Comparable<E> pivot=ar[pivotIndex];  Comparable<E> tmp;  tmp=ar[right];  ar[right]=ar[pivotIndex];  ar[pivotIndex]=tmp;  int store=left;  for (int idx=left; idx < right; idx++) {    if (ar[idx].compareTo((E)pivot) <= 0) {      tmp=ar[idx];      ar[idx]=ar[store];      ar[store]=tmp;      store++;    }  }  tmp=ar[right];  ar[right]=ar[store];  ar[store]=tmp;  return store;}  }
class C{  Set<Pair<String,String>> resolveCacheNames(final String entityOperation,final String entityName){  final Map<String,Set<Pair<String,String>>> entOperations=this.entityOperationCache.get(entityName);  if (entOperations != null) {    return entOperations.get(entityOperation);  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultXYZDataset clone=(DefaultXYZDataset)super.clone();  clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);  clone.seriesList=new ArrayList(this.seriesList.size());  for (int i=0; i < this.seriesList.size(); i++) {    double[][] data=(double[][])this.seriesList.get(i);    double[] x=data[0];    double[] y=data[1];    double[] z=data[2];    double[] xx=new double[x.length];    double[] yy=new double[y.length];    double[] zz=new double[z.length];    System.arraycopy(x,0,xx,0,x.length);    System.arraycopy(y,0,yy,0,y.length);    System.arraycopy(z,0,zz,0,z.length);    clone.seriesList.add(i,new double[][]{xx,yy,zz});  }  return clone;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_B:    return stateVector[0] == State.main_region_B;case main_region_C:  return stateVector[0] == State.main_region_C;case main_region_D:return stateVector[0] == State.main_region_D;case main_region_A:return stateVector[0] == State.main_region_A;default :return false;}}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  protected Node newNode(){  return new SVGOMSwitchElement();}  }
class C{  public Mono<T> mono(String key,Executor ex){  return Mono.fromFuture(pipes.oneOrErrorAsync(key,ex).getFuture());}  }
class C{  public void doPrepare(){synchronized (LAYERWORKER_LOCK) {    if (layerWorkerQueue) {      return;    }    ISwingWorker<OMGraphicList> currentLayerWorker=layerWorker;    if (currentLayerWorker != null) {      layerWorkerQueue=true;      if (interruptable) {        currentLayerWorker.interrupt();      }      return;    }    setLayerWorker(createLayerWorker());  }}  }
class C{  public static <K,V>Map<K,V> requireKeys(Map<K,V> map,K requiredKeyA,K requiredKeyB){  requireKeys(map,requiredKeyA);  requireKeys(map,requiredKeyB);  return map;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Option(String description,String name,int numArguments,String synopsis){  m_Description=description;  m_Name=name;  m_NumArguments=numArguments;  m_Synopsis=synopsis;}  }
class C{  @Override public String toString(){  NumberFormat numberFormatter=NumberFormat.getNumberInstance();  numberFormatter.setMaximumFractionDigits(0);  numberFormatter.setMinimumIntegerDigits(2);  StringBuffer buffer=new StringBuffer();  buffer.append("base calendar: [");  if (getBaseCalendar() != null) {    buffer.append(getBaseCalendar().toString());  } else {    buffer.append("null");  }  buffer.append("], time range: '");  buffer.append(numberFormatter.format(rangeStartingHourOfDay));  buffer.append(":");  buffer.append(numberFormatter.format(rangeStartingMinute));  buffer.append(":");  buffer.append(numberFormatter.format(rangeStartingSecond));  buffer.append(":");  numberFormatter.setMinimumIntegerDigits(3);  buffer.append(numberFormatter.format(rangeStartingMillis));  numberFormatter.setMinimumIntegerDigits(2);  buffer.append(" - ");  buffer.append(numberFormatter.format(rangeEndingHourOfDay));  buffer.append(":");  buffer.append(numberFormatter.format(rangeEndingMinute));  buffer.append(":");  buffer.append(numberFormatter.format(rangeEndingSecond));  buffer.append(":");  numberFormatter.setMinimumIntegerDigits(3);  buffer.append(numberFormatter.format(rangeEndingMillis));  buffer.append("', inverted: " + invertTimeRange + "]");  return buffer.toString();}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:28.775 -0500",hash_original_method="5C5D2075C67DB185E1C8FAD979C1C6EE",hash_generated_method="82AFFDC08ABE282C4377A87122DA1464") public boolean copyMessageToIccEf(int status,byte[] pdu,byte[] smsc){  if (DBG)   log("copyMessageToIccEf: status=" + status + " ==> "+ "pdu=("+ Arrays.toString(pdu)+ "), smsm=("+ Arrays.toString(smsc)+ ")");  enforceReceiveAndSend("Copying message to SIM");synchronized (mLock) {    mSuccess=false;    Message response=mHandler.obtainMessage(EVENT_UPDATE_DONE);    mPhone.mCM.writeSmsToSim(status,IccUtils.bytesToHexString(smsc),IccUtils.bytesToHexString(pdu),response);    try {      mLock.wait();    } catch (    InterruptedException e) {      log("interrupted while trying to update by index");    }  }  return mSuccess;}  }
class C{  public RollCommand(Server server){  super(server,"roll","Rolls some dice.  Usage: /roll [XdY]");}  }
class C{  public static double angle(Geo p0,Geo p1,Geo p2){  return Math.PI - p0.cross(p1).distance(p1.cross(p2));}  }
class C{  public DrawerBuilder withStatusBarColor(@ColorInt int statusBarColor){  this.mStatusBarColor=statusBarColor;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore1.class,args);}  }
class C{  public MultiDimIntTable(int[] dims){  reset(dims);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARENT\"";  db.execSQL(sql);}  }
class C{  @Override public boolean isEnabled(){  return false;}  }
class C{  @MainThread public void start(){  mRestartOnDisconnect=true;  if (mThread != null) {    return;  }  Log.d(TAG,"Starting socket notification client");  mThread=new SocketThread();  mThread.start();}  }
class C{  public static byte[] toRawSignatureBytes(BigInteger[] rs) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream(64);  byte[] r=toUnsignedByteArray(rs[0]);  byte[] s=toUnsignedByteArray(rs[1]);  bos.write(r);  bos.write(s);  return bos.toByteArray();}  }
class C{  private static ValueLob createBlob(InputStream in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLob.createSmallLob(Value.BLOB,small);    }    ValueLob lob=new ValueLob(Value.BLOB,null);    lob.createFromStream(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  private static boolean isBeforeDot(String src,int index){  int ch;  int cc;  int len=src.length();  for (int i=index + Character.charCount(src.codePointAt(index)); i < len; i+=Character.charCount(ch)) {    ch=src.codePointAt(i);    if (ch == '\u0307') {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public static MigrationRestRep map(final Migration from){  if (from == null) {    return null;  }  MigrationRestRep to=new MigrationRestRep();  DbObjectMapper.mapDataObjectFields(from,to);  to.setVolume(DbObjectMapper.toRelatedResource(ResourceTypeEnum.VOLUME,from.getVolume()));  to.setSource(DbObjectMapper.toRelatedResource(ResourceTypeEnum.VOLUME,from.getSource()));  to.setTarget(DbObjectMapper.toRelatedResource(ResourceTypeEnum.VOLUME,from.getTarget()));  to.setStartTime(from.getStartTime());  to.setPercentageDone(from.getPercentDone());  to.setStatus(from.getMigrationStatus());  return to;}  }
class C{  public static void multiplyMV(float[] output,int outputOffset,float[] lhs,int lhsOffset,float[] rhs,int rhsOffset){  output[outputOffset + 0]=lhs[lhsOffset + 0] * rhs[rhsOffset + 0] + lhs[lhsOffset + 4] * rhs[rhsOffset + 1] + lhs[lhsOffset + 8] * rhs[rhsOffset + 2] + lhs[lhsOffset + 12] * rhs[rhsOffset + 3];  output[outputOffset + 1]=lhs[lhsOffset + 1] * rhs[rhsOffset + 0] + lhs[lhsOffset + 5] * rhs[rhsOffset + 1] + lhs[lhsOffset + 9] * rhs[rhsOffset + 2] + lhs[lhsOffset + 13] * rhs[rhsOffset + 3];  output[outputOffset + 2]=lhs[lhsOffset + 2] * rhs[rhsOffset + 0] + lhs[lhsOffset + 6] * rhs[rhsOffset + 1] + lhs[lhsOffset + 10] * rhs[rhsOffset + 2] + lhs[lhsOffset + 14] * rhs[rhsOffset + 3];  output[outputOffset + 3]=lhs[lhsOffset + 3] * rhs[rhsOffset + 0] + lhs[lhsOffset + 7] * rhs[rhsOffset + 1] + lhs[lhsOffset + 11] * rhs[rhsOffset + 2] + lhs[lhsOffset + 15] * rhs[rhsOffset + 3];}  }
class C{  public static final boolean shouldLogSlowQuery(long elapsedTimeMillis){  int slowQueryMillis=10000;  return slowQueryMillis >= 0 && elapsedTimeMillis >= slowQueryMillis;}  }
class C{  public static Bitmap imageWithText(Context context,Bitmap bitmap,GenerateParams params){  TextView view=new TextView(context);  view.setText(params.text);  view.setTextColor(params.color);  view.setBackgroundColor(params.background);  view.setTypeface(null,Typeface.BOLD);  view.setGravity(Gravity.CENTER);  view.setTextSize(20);  Canvas canvas=new Canvas(bitmap);  view.measure(makeMeasureSpec(canvas.getWidth(),EXACTLY),makeMeasureSpec(canvas.getHeight(),EXACTLY));  view.layout(0,0,canvas.getWidth(),canvas.getHeight());  view.draw(canvas);  return bitmap;}  }
class C{  public double computeAverageActiveInfoStorageOfObservations(){  double active=0.0;  double activeCont=0.0;  for (int nextVal=0; nextVal < base; nextVal++) {    double p_next=(double)nextCount[nextVal] / (double)observations;    for (int prevVal=0; prevVal < base_power_k; prevVal++) {      if (nextPastCount[nextVal][prevVal] != 0) {        double logTerm=(double)nextPastCount[nextVal][prevVal] / (double)pastCount[prevVal] / p_next;        double localValue=Math.log(logTerm) / log_2;        activeCont=(nextPastCount[nextVal][prevVal] / (double)observations) * localValue;      } else {        activeCont=0.0;      }      active+=activeCont;    }  }  return active;}  }
class C{  public IBEA(Problem problem,NondominatedPopulation archive,Initialization initialization,Variation variation,IndicatorFitnessEvaluator fitnessEvaluator){  super(problem,new Population(),archive,initialization);  this.variation=variation;  this.fitnessEvaluator=fitnessEvaluator;  fitnessComparator=new FitnessComparator(fitnessEvaluator.areLargerValuesPreferred());  selection=new TournamentSelection(fitnessComparator);}  }
class C{  public static Geometry[] toGeometryArray(Collection geometries){  if (geometries == null)   return null;  Geometry[] geometryArray=new Geometry[geometries.size()];  return (Geometry[])geometries.toArray(geometryArray);}  }
class C{  public String toString(){  return new String(super.toString() + " with current value: " + getStateLabel(getValue()));}  }
class C{  public static boolean isFedora(){  getLinuxRelease();  return linuxRelease != null && linuxRelease.contains("Fedora");}  }
class C{  public T userId(String value){  setString(USER_ID,value);  return (T)this;}  }
class C{  public static boolean isStopword(String str){  return m_Stopwords.is(str.toLowerCase());}  }
class C{  public void clearSurface(SurfaceHolder surfaceHolder){  if (surfaceHolder == null) {    throw new IllegalArgumentException("Invalid surface holder");  }  final Surface surface=surfaceHolder.getSurface();  if (surface == null) {    throw new IllegalArgumentException("Surface could not be retrieved from surface holder");  }  if (surface.isValid() == false) {    throw new IllegalStateException("Surface is not valid");  }  if (mMANativeHelper != null) {    mMANativeHelper.clearPreviewSurface(surface);  } else {    Log.w(TAG,"Native helper was not ready!");  }}  }
class C{  public static void sendCurrentWarning(Object source,Throwable e){  WarningSystem warning=getCurrent();  if (warning != null)   warning.sendWarning(source,e); else {    e.printStackTrace();    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public void removeLoader(EditToolLoader loader){  String[] classnames=loader.getEditableClasses();  if (classnames != null) {    for (int i=0; i < classnames.length; i++) {      EditToolLoader etl=(EditToolLoader)loaders.get(classnames[i].intern());      if (etl == loader) {        loaders.remove(classnames[i]);      } else {        if (DEBUG) {          Debug.output("DrawingTool.removeLoader: loader to be removed isn't the current loader for " + classnames[i] + ", ignored.");        }      }    }    rawLoaders.remove(loader);    firePropertyChange(LoadersProperty,null,rawLoaders);    possibleEditableClasses=null;  }}  }
class C{  public void reportSuccess(long waitTime){  mSumOfWaitTime+=waitTime;  mSuccessfulRequests++;}  }
class C{  public static boolean deleteFiles(File directory){  boolean result=true;  if (directory.isDirectory()) {    File[] list=directory.listFiles();    for (int i=list.length; i-- > 0; ) {      File file=list[i];      if (file.isFile()) {        result=result && file.delete();      }    }  }  return result;}  }
class C{  private static void initializeComponents(){  frame.setTitle("LGoodDatePicker Independent Calendar Panel Demo " + InternalUtilities.getProjectVersionString());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.setLayout(new GridBagLayout());  JPanel mainPanel=new JPanel();  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));  frame.getContentPane().add(mainPanel);  container.setLayout(new GridBagLayout());  mainPanel.add(informationLabel);  mainPanel.add(new JLabel(" "));  mainPanel.add(new JLabel(" "));  mainPanel.add(container);  informationLabel.setOpaque(true);  informationLabel.setBackground(Color.white);  informationLabel.setBorder(new CompoundBorder(new LineBorder(Color.black),new EmptyBorder(2,4,2,4)));  informationLabel.setText("The selected date will be displayed here.");  informationLabel.setAlignmentX(Component.CENTER_ALIGNMENT);  frame.pack();  frame.validate();  frame.setSize(640,480);  frame.setLocationRelativeTo(null);}  }
class C{  protected boolean isMapKey(){  return false;}  }
class C{  protected void onBeforeClusterItemRendered(T item,MarkerOptions markerOptions){}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.772 -0500",hash_original_method="778ABE3A69AA8FF60B65094F75FB879B",hash_generated_method="D1720953CA111AD0C30DE369B4C6B058") public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  public LocalTime withMillisOfDay(int millis){  return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(),millis));}  }
class C{  private void usageError(String errorMsg) throws AdeUsageException {  System.out.flush();  System.err.println("Usage:");  System.err.println("\tVerifyLinuxTraining <analysis_group> <start date> <end date> ");  System.err.println();  System.err.println("Determines if the date range includes sufficient methods to allow training for the analysis group");  System.err.println();  System.err.flush();  throw new AdeUsageException(errorMsg);}  }
class C{  public void releaseTargetVersionLock(){  _coordinator.releaseTargetVersionLock();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public FilteredTollHandler(final double simulationEndTime,final int numberOfTimeBins,final String userGroup){  this(simulationEndTime,numberOfTimeBins,null,null,userGroup);  LOGGER.info("Usergroup filtering is used, result will include all links but persons from given user group only.");  LOGGER.warn("User group will be identified for Munich scenario only, i.e. Urban, (Rev)Commuter and Freight.");}  }
class C{  @Deprecated public static boolean isIdentical(OfflinePlayer player,OfflinePlayer compareTo){  return areIdentical(player,compareTo);}  }
class C{  private void readTextPropertiesElement(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {}  }
class C{  private void sendPatchToIncrementImageReplicatedCount(final State current){  try {    ImageService.DatastoreCountRequest requestBody=constructDatastoreCountRequest(1);    sendRequest(((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createPatch(ImageServiceFactory.SELF_LINK + "/" + current.image).setBody(requestBody).setCompletion(null));  } catch (  Exception e) {    ServiceUtils.logSevere(this,"Exception thrown while sending patch to image service to increment count: %s",e);  }}  }
class C{  public IpcSharedMemoryInitResponse(Exception err){  this.err=err;}  }
class C{  private void createSubFamilySignatures(String dirName,Map<String,String> familyIdFamilyNameMap,SignatureLibraryRelease release) throws IOException {  for (  Resource modelFile : modelFiles) {    File subFamilyDir=new File(modelFile.getFile().getPath() + "/books/" + dirName);    if (subFamilyDir.exists() && subFamilyDir.getAbsoluteFile() != null) {      String[] children=subFamilyDir.getAbsoluteFile().list(new DirectoryFilenameFilter());      if (children != null) {        for (        String signatureAcc : children) {          signatureAcc=dirName + ":" + signatureAcc;          String signatureName=familyIdFamilyNameMap.get(signatureAcc);          release.addSignature(createSignature(signatureAcc,signatureName,release));        }      } else {        LOGGER.debug("Either dir does not exist or is not a directory.");      }    }  }}  }
class C{  public GridLayout(String group){  super(group);  analyze=true;}  }
class C{  public EchoReplyMessage(EchoReplyMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public ParsedGraphQuery(String sourceString,TupleExpr tupleExpr,Map<String,String> namespaces){  this(sourceString,tupleExpr);  queryNamespaces=namespaces;}  }
class C{  public int type(){  return tag;}  }
class C{  protected URI unwrap(URI uri){  return uri;}  }
class C{  @Deprecated public Map<String,String> queryHostIPAddressesMap(){  if (!hostIPv4AddressMap.isEmpty()) {    return hostIPv4AddressMap;  }  return hostIPv6AddressMap;}  }
class C{  public AlgVectorTest(String name){  super(name);}  }
class C{  synchronized void queueEvent(EventObject event,Vector<? extends NamingListener> vector){  if (eventQueue == null)   eventQueue=new EventQueue();  @SuppressWarnings("unchecked") Vector<NamingListener> v=(Vector<NamingListener>)vector.clone();  eventQueue.enqueue(event,v);}  }
class C{  public CloseSessionRequest clone(){  CloseSessionRequest result=new CloseSessionRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.DeleteSubscriptions=DeleteSubscriptions;  return result;}  }
class C{  @Override public PrefixQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public GraphHistory(){  graphs=new LinkedList<>();  index=-1;}  }
class C{  void applyAudioSettings(){  AudioManager am=new AudioManager(mContext);  am.reloadAudioSettings();}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean xslAttribute){  boolean was_added;  int index;  if (uri == null || localName == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    String old_value=null;    if (m_tracer != null) {      old_value=m_attributes.getValue(index);      if (value.equals(old_value))       old_value=null;    }    m_attributes.setValue(index,value);    was_added=false;    if (old_value != null)     firePseudoAttributes();  } else {    if (xslAttribute) {      final int colonIndex=rawName.indexOf(':');      if (colonIndex > 0) {        String prefix=rawName.substring(0,colonIndex);        NamespaceMappings.MappingRecord existing_mapping=m_prefixMap.getMappingFromPrefix(prefix);        if (existing_mapping != null && existing_mapping.m_declarationDepth == m_elemContext.m_currentElemDepth && !existing_mapping.m_uri.equals(uri)) {          prefix=m_prefixMap.lookupPrefix(uri);          if (prefix == null) {            prefix=m_prefixMap.generateNextPrefix();          }          rawName=prefix + ':' + localName;        }      }      try {        String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      } catch (      SAXException e) {        e.printStackTrace();      }    }    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;    if (m_tracer != null)     firePseudoAttributes();  }  return was_added;}  }
class C{  public link addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected int countDocsWithClass() throws IOException {  Terms terms=MultiFields.getTerms(this.indexReader,this.classFieldName);  int docCount;  if (terms == null || terms.getDocCount() == -1) {    TotalHitCountCollector classQueryCountCollector=new TotalHitCountCollector();    BooleanQuery.Builder q=new BooleanQuery.Builder();    q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName,String.valueOf(WildcardQuery.WILDCARD_STRING))),BooleanClause.Occur.MUST));    if (query != null) {      q.add(query,BooleanClause.Occur.MUST);    }    indexSearcher.search(q.build(),classQueryCountCollector);    docCount=classQueryCountCollector.getTotalHits();  } else {    docCount=terms.getDocCount();  }  return docCount;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getAllUserStores();}  }
class C{  public double scalarProjectOnto(Vec2D otherVector){  return dot(otherVector) / otherVector.magnitude();}  }
class C{  @Override public void createGroupSnapshots(StorageSystem storage,List<URI> snapshotList,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    URI snapshot=snapshotList.get(0);    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume volume=_dbClient.queryObject(Volume.class,snapshotObj.getParent());    if (ControllerUtils.isNotInRealVNXRG(volume,_dbClient)) {      throw DeviceControllerException.exceptions.groupSnapshotNotSupported(volume.getReplicationGroupInstance());    }    ReplicationUtils.checkReplicationGroupAccessibleOrFail(storage,snapshotObj,_dbClient,_helper,_cimPath);    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    String snapLabelToUse=_nameGenerator.generate(tenantName,snapshotObj.getLabel(),snapshot.toString(),'-',SmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    String groupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,groupName);    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=_helper.getCreateGroupReplicaInputArgumentsForVNX(storage,cgPath,createInactive,snapLabelToUse,SYNC_TYPE.SNAPSHOT.getValue());    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvc,SmisConstants.CREATE_GROUP_REPLICA,inArgs,outArgs);    CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.JOB);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockCreateCGSnapshotJob(job,storage.getId(),!createInactive,null,taskCompleter)));    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);    setInactive(((BlockSnapshotCreateCompleter)taskCompleter).getSnapshotURIs(),true);  }}  }
class C{  @Override protected void check(){  super.check();  if (m_Classifier == null) {    throw new IllegalStateException("No classifier set!");  }  if (m_ClassIndex == -1) {    throw new IllegalStateException("No class index set!");  }  if (m_Evaluation == null) {    throw new IllegalStateException("No evaluation set");  }}  }
class C{  public static String obtainEncodingStringFromFile(String filename) throws IOException {  String encoding="UTF-8";  FileInputStream fis=new FileInputStream(filename);  BufferedInputStream bis=new BufferedInputStream(fis);  if (bis.markSupported()) {    String line=null;    bis.mark(ENOUGH);    DataInputStream dis=new DataInputStream(bis);    line=dis.readLine();    line=line.replace("'","\"");    if (line.matches(XML_FIRST_LINE_REGEX)) {      encoding=extractEncoding(line);    }    bis.reset();  }  fis.close();  bis.close();  return encoding;}  }
class C{  public void copyMove(String path,boolean shouldMove){  shouldMoveCopiedFile=shouldMove;  copyMoveSourceFile=new File(path);  if (!copyMoveSourceFile.exists()) {    Toast.makeText(mContext,R.string.cant_copy_this_file_folder,Toast.LENGTH_SHORT).show();    return;  }  mIsPasteShown=true;  ((MainActivity)getActivity()).showFolderFragmentActionItems(currentDir,getActivity().getMenuInflater(),((MainActivity)getActivity()).getMenu(),true);}  }
class C{  public boolean restoreJsonForUser(String userId,InputStreamReader streamReader,boolean reuseIds,boolean isAdmin,Errors errors){  boolean result=reallyRestoreJsonForUser(userId,streamReader,reuseIds,isAdmin,errors);  if (!result) {    rollback();  } else {    commit();  }  return result;}  }
class C{  public Namespace addNamespace(String prefix,String uri){  Namespace namespace=createNamespace(prefix,uri);  push(namespace);  return namespace;}  }
class C{  public Import peek(){  return stack.peek();}  }
class C{  boolean hasReadBinaryChildren(){  return this.binaryChildren != null;}  }
class C{  public LinkedIntegerMap(final LinkedIntegerMap<T>[] integerMaps){  m_values=new LinkedHashMap<>();  for (  final LinkedIntegerMap<T> integerMap : integerMaps) {    this.add(integerMap);  }}  }
class C{  public static Blob toBlob(Connection conn,Object value) throws PageException, SQLException {  if (value instanceof Blob)   return (Blob)value;  if (SystemUtil.JAVA_VERSION >= SystemUtil.JAVA_VERSION_1_6) {    try {      Blob blob=conn.createBlob();      blob.setBytes(1,Caster.toBinary(value));      return blob;    } catch (    Throwable t) {      return BlobImpl.toBlob(value);    }  }  if (isOracle(conn)) {    Blob blob=OracleBlob.createBlob(conn,Caster.toBinary(value),null);    if (blob != null)     return blob;  }  return BlobImpl.toBlob(value);}  }
class C{  public final short addAndGet(int index,short delta){  return this.addAndGet(index,delta,false);}  }
class C{  public boolean isClean(File file) throws IOException {  String raw=new String(Files.readAllBytes(file.toPath()),encoding);  String unix=LineEnding.toUnix(raw);  int totalNewLines=(int)unix.codePoints().filter(null).count();  int windowsNewLines=raw.length() - unix.length();  if (lineEndingPolicy.isUnix(file)) {    if (windowsNewLines != 0) {      return false;    }  } else {    if (windowsNewLines != totalNewLines) {      return false;    }  }  String formatted=applySteps(unix,file);  return formatted.equals(unix);}  }
class C{  public form(String action,String method,Element element){  addElement(element);  setAction(action);  setMethod(method);}  }
class C{  public void saveSelectionDetail(){  int row=p_table.getSelectedRow();  if (row == -1)   return;  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"A_Asset_ID",ID == null ? "0" : ID.toString());}  }
class C{  public FileListener(Printer printer,File inputFile,ConstructLengths constructLengths,Set<Rules> enabledRules) throws IOException {  this.printer=printer;  this.inputFile=inputFile;  this.constructLengths=constructLengths;  this.reader=new LineNumberReader(Files.newBufferedReader(inputFile.toPath()));  this.enabledRules=enabledRules;}  }
class C{  private static void checkLen(int expectedLen,int actual) throws DimensionMismatchException {  if (expectedLen != actual) {    throw new DimensionMismatchException(actual,expectedLen);  }}  }
class C{  private void initialize(Object[] sorted){  keys.removeAllElements();  data.removeAllElements();  int n=sorted.length;  for (int i=0; i < n; i+=2) {    keys.addElement(sorted[i]);    data.addElement(sorted[i + 1]);  }}  }
class C{  public void withdraw(double amount){  balance-=amount;}  }
class C{  protected Node newNode(){  return new SVGOMMaskElement();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private int validatePreloadOrder(CacheConfiguration[] cfgs) throws IgniteCheckedException {  int maxOrder=0;  for (  CacheConfiguration cfg : cfgs) {    int rebalanceOrder=cfg.getRebalanceOrder();    if (rebalanceOrder > 0) {      if (cfg.getCacheMode() == LOCAL)       throw new IgniteCheckedException("Rebalance order set for local cache (fix configuration and restart the " + "node): " + U.maskName(cfg.getName()));      if (cfg.getRebalanceMode() == CacheRebalanceMode.NONE)       throw new IgniteCheckedException("Only caches with SYNC or ASYNC rebalance mode can be set as rebalance " + "dependency for other caches [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceMode="+ cfg.getRebalanceMode()+ ", rebalanceOrder="+ cfg.getRebalanceOrder()+ ']');      maxOrder=Math.max(maxOrder,rebalanceOrder);    } else     if (rebalanceOrder < 0)     throw new IgniteCheckedException("Rebalance order cannot be negative for cache (fix configuration and restart " + "the node) [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceOrder="+ rebalanceOrder+ ']');  }  return maxOrder;}  }
class C{  public List<Object> syncAndReturnAll(){  List<Object> unformatted=client.getAll();  List<Object> formatted=new ArrayList<Object>();  for (  Object o : unformatted) {    try {      formatted.add(generateResponse(o).get());    } catch (    JedisDataException e) {      formatted.add(e);    }  }  return formatted;}  }
class C{  public TFloatLongIterator(TFloatLongHashMap map){  super(map);  _map=map;}  }
class C{  public JUnitGuiceClassRunner(final Class<?> clazz) throws InitializationError {  super(clazz);  this.injector=createInjector(clazz);}  }
class C{  public static void main(String[] args){  if (args.length != 3)   return;  Config config=ConfigUtils.loadConfig(args[0]);  config.plans().setInputFile(null);  config.facilities().setInputFile(null);  config.network().setInputFile(null);  config.transit().setUseTransit(true);  Scenario scenario=ScenarioUtils.loadScenario(config);  log.info("Reading transit router network from file...");  Gbl.startMeasurement();  TransitRouterNetwork transitRouterNetwork=new TransitRouterNetwork();  new TransitRouterNetworkReaderMatsimV1(scenario,transitRouterNetwork).readFile(args[1]);  Gbl.printElapsedTime();  Gbl.printMemoryUsage();  System.gc();  Gbl.printMemoryUsage();  log.info("done.");  log.info("Thinning transit router network...");  Gbl.startMeasurement();  new RemoveRedundantLinks().run(transitRouterNetwork);  new RemoveRedundantDistanceLinks().run(transitRouterNetwork);  Gbl.printElapsedTime();  Gbl.printMemoryUsage();  System.gc();  Gbl.printMemoryUsage();  log.info("done.");  log.info("Writing thinned transit router network to file...");  new TransitRouterNetworkWriter(transitRouterNetwork).write(args[2]);  log.info("done.");  log.info("Writing thinned transit router network as matsim network to file...");  new NetworkWriter(transitRouterNetwork).write(args[2].replace("thinned","thinned_MATSim"));  log.info("done.");}  }
class C{  private boolean verifyPoint(GPNode inner1){  if (inner1.depth() + inner1.atDepth() + 1 > maxDepth)   return false;  return true;}  }
class C{  protected boolean isPutMethod(ODataRequest.Method method){  return ODataRequest.Method.PUT.equals(method);}  }
class C{  public final void testGetSystemScope(){  String name=Security.getProperty("system.scope");  assertNotNull(name);  IdentityScope scope=IdentityScope.getSystemScope();  assertNotNull(scope);  assertEquals(name,scope.getClass().getName());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringcountnegative.class,args);}  }
class C{  public void writeMessageNoTag(final MessageLite value) throws IOException {  writeRawVarint32(value.getSerializedSize());  value.writeTo(this);}  }
class C{  @Override public String toString(){  return byteArrayToIPString(address);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.318 -0400",hash_original_method="6ED420CF552A86625F93410A37AE84F2",hash_generated_method="2F8A160491D2810787A3AB449FF5BB11") public Resolution(String id,String label,int horizontalDpi,int verticalDpi){  if (TextUtils.isEmpty(id)) {    throw new IllegalArgumentException("id cannot be empty.");  }  if (TextUtils.isEmpty(label)) {    throw new IllegalArgumentException("label cannot be empty.");  }  if (horizontalDpi <= 0) {    throw new IllegalArgumentException("horizontalDpi " + "cannot be less than or equal to zero.");  }  if (verticalDpi <= 0) {    throw new IllegalArgumentException("verticalDpi" + " cannot be less than or equal to zero.");  }  mId=id;  mLabel=label;  mHorizontalDpi=horizontalDpi;  mVerticalDpi=verticalDpi;}  }
class C{  public void reset(){  container.removeAll();  colorBar.clear();  ArrayList<ColorMap> colorMapList=Landscape.getInstance().getLayerManager().getColorMaps();  for (int i=0; i < colorMapList.size(); ++i) {    colorBar.add(new ColorBar(colorMapList.get(i),false));  }  if (colorBar.size() == 0) {    container.setLayout(new GridLayout(1,1));    container.add(new Label("No color bars."));  } else {    container.setLayout(new GridLayout(colorBar.size(),1));    for (int i=0; i < colorBar.size(); ++i) {      container.add(colorBar.get(i));    }  }  validate();  repaint();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (factor == null) {    throw new NullPointerException();  }  if (lag < 0) {    throw new IllegalStateException();  }}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) != nodeType) {    }  } else {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) < DTM.NTYPES) {    }  }  _currentNode=node;  return (node == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(node));}  }
class C{  @Override protected void installTileRasterLater(LevelSet levelSet,Tile tile,DataRaster tileRaster,AVList params){  this.updateExtremeElevations(tileRaster);  super.installTileRasterLater(levelSet,tile,tileRaster,params);}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed. Failed to update discovery status to ERROR.",e);  }}  }
class C{  private List<Object> convertFunnelStepObjectToList(Object parameter){  if (parameter instanceof List) {    return (List<Object>)funnelObjectInspector.getList(parameter);  } else {    return Arrays.asList(ObjectInspectorUtils.copyToStandardObject(parameter,funnelObjectInspector.getListElementObjectInspector()));  }}  }
class C{  public static byte[] hexStringToByteArray(String s){  if (s == null || s.length() == 0) {    return null;  }  int len=s.length();  if (len % 2 != 0) {    throw new IllegalArgumentException();  }  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));  }  return data;}  }
class C{  public OMSpline(double latPoint,double lonPoint,int[] xypoints,int cMode){  super(latPoint,lonPoint,xypoints,cMode);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  MutableInt count=counts.get(key);  if (count == null) {    count=new MutableInt(0);    counts.put(cloneKey(key),count);  }  count.increment();}  }
class C{  public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public String amounts(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  if (isCalloutActive())   return "";  int C_Invoice_ID=Env.getContextAsInt(ctx,WindowNo,"C_Invoice_ID");  if (C_Invoice_ID == 0)   return "";  BigDecimal Amount=(BigDecimal)mTab.getValue("Amount");  BigDecimal DiscountAmt=(BigDecimal)mTab.getValue("DiscountAmt");  BigDecimal WriteOffAmt=(BigDecimal)mTab.getValue("WriteOffAmt");  BigDecimal OverUnderAmt=(BigDecimal)mTab.getValue("OverUnderAmt");  BigDecimal InvoiceAmt=(BigDecimal)mTab.getValue("InvoiceAmt");  log.fine("Amt=" + Amount + ", Discount="+ DiscountAmt+ ", WriteOff="+ WriteOffAmt+ ", OverUnder="+ OverUnderAmt+ ", Invoice="+ InvoiceAmt);  String colName=mField.getColumnName();  if (colName.equals("Amount")) {    WriteOffAmt=InvoiceAmt.subtract(Amount).subtract(DiscountAmt).subtract(OverUnderAmt);    mTab.setValue("WriteOffAmt",WriteOffAmt);  } else {    Amount=InvoiceAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);    mTab.setValue("Amount",Amount);  }  return "";}  }
class C{  @Override public boolean first() throws SQLException {  try {    debugCodeCall("first");    checkClosed();    if (result.getRowId() < 0) {      return nextRow();    }    resetResult();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Object remove(int index){  int _numObjs=numObjs;  if (index >= _numObjs)   throw new ArrayIndexOutOfBoundsException(index);  Object[] _objs=this.objs;  Object ret=_objs[index];  _objs[index]=_objs[_numObjs - 1];  _objs[_numObjs - 1]=null;  numObjs--;  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.612 -0400",hash_original_method="D336BDB6264C4835A6DCD28216EF4935",hash_generated_method="7A5A1E56A7E371652DBBF49CCF9E5ECC") public void enable(BluetoothAdapter adapter){  int mask=(BluetoothReceiver.STATE_TURNING_ON_FLAG | BluetoothReceiver.STATE_ON_FLAG | BluetoothReceiver.SCAN_MODE_CONNECTABLE_FLAG);  long start=-1;  BluetoothReceiver receiver=getBluetoothReceiver(mask);  int state=adapter.getState();switch (state) {case BluetoothAdapter.STATE_ON:    assertTrue(adapter.isEnabled());  removeReceiver(receiver);return;case BluetoothAdapter.STATE_TURNING_ON:assertFalse(adapter.isEnabled());mask=0;break;case BluetoothAdapter.STATE_OFF:assertFalse(adapter.isEnabled());start=System.currentTimeMillis();assertTrue(adapter.enable());break;case BluetoothAdapter.STATE_TURNING_OFF:start=System.currentTimeMillis();assertTrue(adapter.enable());break;default :removeReceiver(receiver);fail(String.format("enable() invalid state: state=%d",state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {state=adapter.getState();if (state == BluetoothAdapter.STATE_ON && (receiver.getFiredFlags() & mask) == mask) {assertTrue(adapter.isEnabled());long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("enable() completed in %d ms",(finish - start)));} else {writeOutput("enable() completed");}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("enable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_ON,firedFlags,mask));}  }
class C{  private void fireFeatureEnabled(final String name,final String value){  logger.debug("Feature enabled: " + name + " = "+ value);  for (  final FeatureChangeListener l : featureListeners) {    l.featureEnabled(name,value);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public long create(User user){  if (user.getSettingsId() == 0) {    user.setSettings(mSettingsDataSource.createNewDefaultSettings());  }  return mDaoSession.getUserDao().insert(user);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public String toString(){  return CommandProcessingException.class.getSimpleName() + "[errorType=" + errorTypeStrings[errorType]+ ", errorData="+ errorData+ "]";}  }
class C{  protected CustomToolBar createEditToolBar(){  CustomToolBar editTools=new CustomToolBar();  for (  Action action : actionManager.getNetworkEditingActions()) {    editTools.add(action);  }  editTools.add(actionManager.getZeroSelectedObjectsAction());  editTools.add(actionManager.getRandomizeObjectsAction());  return editTools;}  }
class C{  public static boolean isHexCharacter(final char c){  return isDecCharacter(c) || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));}  }
class C{  public static int compare(double left,Object right) throws PageException {  if (right instanceof Number)   return compare(left,((Number)right).doubleValue()); else   if (right instanceof String)   return compare(left,(String)right); else   if (right instanceof Boolean)   return compare(left,((Boolean)right).booleanValue() ? 1D : 0D); else   if (right instanceof Date)   return compare(left,((Date)right)); else   if (right instanceof Castable) {    if (isComparableComponent((Castable)right))     return -compareComponent((Castable)right,left);    return -((Castable)right).compareTo(left);  } else   if (right instanceof Locale)   return compare(Caster.toString(left),((Locale)right)); else   if (right == null)   return 1; else   if (right instanceof Character)   return compare(left,((Character)right).toString()); else   if (right instanceof Calendar)   return compare(left,((Calendar)right).getTime()); else   if (right instanceof TimeZone)   return compare(Caster.toString(left),((TimeZone)right)); else   return error(true,false);}  }
class C{  private static String readFromPath(String path){  try {    StringBuilder sb=new StringBuilder();    BufferedReader reader=new BufferedReader(new FileReader(path));    String line;    while ((line=reader.readLine()) != null) {      sb.append(line).append("\n");    }    return sb.toString();  } catch (  IOException e) {    LOG.e(e,format("Failed to read xml form into a String. FilePath=  %s",path));    return null;  }}  }
class C{  public ListIterator<E> listIterator(){  return new ListItr(0);}  }
class C{  public boolean convert(){  if (getC_Currency_ID() == Doc.NO_CURRENCY)   setC_Currency_ID(m_acctSchema.getC_Currency_ID());  if (m_acctSchema.getC_Currency_ID() == getC_Currency_ID()) {    setAmtAcctDr(getAmtSourceDr());    setAmtAcctCr(getAmtSourceCr());    return true;  }  int C_ConversionType_ID=0;  int AD_Org_ID=0;  if (m_docLine != null) {    C_ConversionType_ID=m_docLine.getC_ConversionType_ID();    AD_Org_ID=m_docLine.getAD_Org_ID();  }  if (C_ConversionType_ID == 0) {    if (m_doc == null) {      log.severe("No Document VO");      return false;    }    C_ConversionType_ID=m_doc.getC_ConversionType_ID();    if (AD_Org_ID == 0)     AD_Org_ID=m_doc.getAD_Org_ID();  }  setAmtAcctDr(MConversionRate.convert(getCtx(),getAmtSourceDr(),getC_Currency_ID(),m_acctSchema.getC_Currency_ID(),getDateAcct(),C_ConversionType_ID,m_doc.getAD_Client_ID(),AD_Org_ID));  if (getAmtAcctDr() == null)   return false;  setAmtAcctCr(MConversionRate.convert(getCtx(),getAmtSourceCr(),getC_Currency_ID(),m_acctSchema.getC_Currency_ID(),getDateAcct(),C_ConversionType_ID,m_doc.getAD_Client_ID(),AD_Org_ID));  return true;}  }
class C{  public void bindAllArgsAsStrings(String[] bindArgs){  if (bindArgs != null) {    for (int i=bindArgs.length; i != 0; i--) {      bindString(i,bindArgs[i - 1]);    }  }}  }
class C{  public static int executeUpdate(String sql,int param,String trxName){  return executeUpdate(sql,param,trxName,0);}  }
class C{  public boolean isCreditCardDisabled(){  return (isPersistedType(PaymentInfoType.CREDIT_CARD) && isCreditCardAvailable()) ? true : false;}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute){  this(year,month,dayOfMonth,hourOfDay,minute,0,0);}  }
class C{  public HttpsURL(final String user,final String password,final String host,final int port,final String path) throws URIException {  this(user,password,host,port,path,null,null);}  }
class C{  public DefaultResultAdapterContext(boolean registerDefaults){  adapters=new ArrayList<>();  if (registerDefaults) {    adapters.add(new VoidResultAdapter());    adapters.add(new SameTypeResultAdapter());    adapters.add(new NullSimpleResultAdapter());    adapters.add(new NullToIteratorResultAdapter());    adapters.add(new NullToCollectionResultAdapter());    adapters.add(new NullToIterableResultAdapter());    adapters.add(new NullToSliceResultAdapter());    adapters.add(new NullToFutureResultAdapter());    adapters.add(new NullToListenableFutureResultAdapter());    adapters.add(new NumberIterableResultAdapter());    adapters.add(new SimpleIterableResultAdapter());    adapters.add(new IteratorIterableResultAdapter());    adapters.add(new CollectionIterableResultAdapter());    adapters.add(new SliceIterableResultAdapter());    adapters.add(new PageIterableResultAdapter());    adapters.add(new GeoPageIterableResultAdapter());    adapters.add(new FutureIterableResultAdapter());    adapters.add(new ListenableFutureIterableResultAdapter());    Collections.sort(adapters);  }}  }
class C{  public boolean isAutoAdjustBlendFactor(){  return (layerManager.autoAdjustOpacity);}  }
class C{  public GroupChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver,String chatId){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CHAT_ID,SELECTION_CHATMESSAGES_BY_CHATID,chatId);  mChatService=chatService;  mImService=imService;}  }
class C{  public ToStringBuilder append(String fieldName,float value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public static void print(StackMapTable smt,PrintWriter writer){  try {    new Printer(smt.get(),writer).parse();  } catch (  BadBytecode e) {    writer.println(e.getMessage());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.830 -0500",hash_original_method="961A5CFC9275837B3D79C86ECF9A0692",hash_generated_method="635F9BB5EC31EC20435F9A758E3D2B16") public TestResult run(){  TestResult result=createResult();  run(result);  return result;}  }
class C{  public static boolean isValidSignature(byte[] pubKey,byte[] message,byte[] signature) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException, InvalidKeySpecException {  Signature ecdsaVerify=Signature.getInstance("SHA256withECDSA",new BouncyCastleProvider());  ecdsaVerify.initVerify(decodeNISTP256PublicKeyFromBytes(pubKey));  ecdsaVerify.update(message);  return ecdsaVerify.verify(signature);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createComment("This is a new Comment node");  newValue=newNode.getNodeValue();  assertEquals("initial","This is a new Comment node",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("afterChange","This should have an effect",newValue);}  }
class C{  public void validateBusinessObjectData(Integer expectedBusinessObjectDataId,String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,Boolean expectedLatestVersion,String expectedStatusCode,String expectedStorageName,String expectedStorageDirectoryPath,List<StorageFile> expectedStorageFiles,List<Attribute> expectedAttributes,BusinessObjectData actualBusinessObjectData){  validateBusinessObjectData(expectedBusinessObjectDataId,expectedNamespace,expectedBusinessObjectDefinitionName,expectedBusinessObjectFormatUsage,expectedBusinessObjectFormatFileType,expectedBusinessObjectFormatVersion,expectedBusinessObjectDataPartitionValue,expectedBusinessObjectDataSubPartitionValues,expectedBusinessObjectDataVersion,expectedLatestVersion,expectedStatusCode,actualBusinessObjectData);  assertEquals(1,actualBusinessObjectData.getStorageUnits().size());  StorageUnit actualStorageUnit=actualBusinessObjectData.getStorageUnits().get(0);  assertEquals(expectedStorageName,actualStorageUnit.getStorage().getName());  assertEquals(expectedStorageDirectoryPath,actualStorageUnit.getStorageDirectory() != null ? actualStorageUnit.getStorageDirectory().getDirectoryPath() : null);  AbstractServiceTest.assertEqualsIgnoreOrder("storage files",expectedStorageFiles,actualStorageUnit.getStorageFiles());  assertEquals(expectedAttributes,actualBusinessObjectData.getAttributes());}  }
class C{  public static double pareto(){  return pareto(1.0);}  }
class C{  public double actual(){  return m_Actual;}  }
class C{  private int currentDepth(){  try {    Integer oneBased=((Integer)DEPTH_FIELD.get(this));    return oneBased - 1;  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }}  }
class C{  public IMFErrorLoggerImpl(){  this.errorObjects=Collections.synchronizedSet(new HashSet<ErrorLogger.ErrorObject>());}  }
class C{  public static void main(String[] args){  LatLonPoint llpt1=new LatLonPoint.Double(87.00,-74.50);  System.out.println(llpt1.toString());  UPSPoint ups=new UPSPoint(llpt1);  System.out.println(ups.toString());  LatLonPoint llpt2=ups.toLatLonPoint(false);  System.out.println(llpt2.toString());  System.out.println("--------------------------------------------");  llpt1=new LatLonPoint.Double(-89.00,110.50);  System.out.println(llpt1.toString());  ups=new UPSPoint(llpt1);  System.out.println(ups.toString());  llpt2=ups.toLatLonPoint(true);  System.out.println(llpt2.toString());}  }
class C{  private void disablePahoLogging(){  LogManager.getLogManager().reset();  logging=false;  HashMap<String,Connection> connections=(HashMap<String,Connection>)Connections.getInstance(context).getConnections();  if (!connections.isEmpty()) {    Entry<String,Connection> entry=connections.entrySet().iterator().next();    Connection connection=(Connection)entry.getValue();    connection.getClient().setTraceEnabled(false);    clientConnections.invalidateOptionsMenu();  } else {    Log.i("SampleListener","No connection to disable log in service");  }  clientConnections.invalidateOptionsMenu();}  }
class C{  public double computeAverageLocalOfObservationsWithCorrection() throws Exception {  double te=0.0;  for (int b=0; b < totalObservations; b++) {    TransferEntropyKernelCounts kernelCounts=teKernelEstimator.getCount(destPastVectors[b],destNextVectors[b],sourceVectors[b],b);    double cont=0.0;    if (kernelCounts.countNextPastSource > 0) {      cont=MathsUtils.digamma(kernelCounts.countNextPastSource) - MathsUtils.digamma(kernelCounts.countPastSource) - MathsUtils.digamma(kernelCounts.countNextPast) + MathsUtils.digamma(kernelCounts.countPast);    }    te+=cont;  }  lastAverage=te / (double)totalObservations / log2;  return lastAverage;}  }
class C{  public static final double squareSum(final double[] v1){  double acc=0.0;  for (int row=0; row < v1.length; row++) {    final double v=v1[row];    acc+=v * v;  }  return acc;}  }
class C{  protected void trimContextForElement(SVGGraphicContext svgGC,Element element){  String tag=element.getTagName();  Map groupAttrMap=svgGC.getGroupContext();  if (tag != null) {    Iterator iter=groupAttrMap.keySet().iterator();    while (iter.hasNext()) {      String attrName=(String)iter.next();      SVGAttribute attr=SVGAttributeMap.get(attrName);      if (attr != null && !attr.appliesTo(tag))       groupAttrMap.remove(attrName);    }  }}  }
class C{  public void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public static Test suite(){  return (new TestSuite(ReplaceViewHandlerTestCase.class));}  }
class C{  private long hash(final long[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.021 -0500",hash_original_method="0B2DE5EAED23ABC2AB533476CA60B194",hash_generated_method="F9084A2132A4774A25EB67D6F9253A14") public void socksAccept() throws IOException {  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Comparable>ImmutableRangeSet<C> of(){  return (ImmutableRangeSet<C>)EMPTY;}  }
class C{  public static Map<String,XmlNamespace> calculateNamespaces(Element root,ElementMetadata<?,?> metadata){  Map<String,XmlNamespace> namespaceMap=Maps.newHashMap();  calculateNamespaces(namespaceMap,root,metadata);  return namespaceMap;}  }
class C{  public final SSLEngine createSSLEngine(String peerHost,int peerPort){  try {    return contextSpi.engineCreateSSLEngine(peerHost,peerPort);  } catch (  AbstractMethodError e) {    UnsupportedOperationException unsup=new UnsupportedOperationException("Provider: " + getProvider() + " does not support this operation");    unsup.initCause(e);    throw unsup;  }}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public void open(final Shell parent){  if (this.index == -1) {    this.index=new Random().nextInt(this.tips.size());  }  buildShell(parent);  if (this.style == TipStyle.HEADER) {    buildHeader();  } else {    buildLeftColumn();  }  buildTip();  buildButtons();  openShell();}  }
class C{  public static Class<?>[] wrappersToPrimitives(final Class<?>[] classes){  if (classes == null) {    return null;  }  if (classes.length == 0) {    return classes;  }  Class<?>[] convertedClasses=new Class[classes.length];  for (int i=0; i < classes.length; i++) {    convertedClasses[i]=ClassUtils.wrapperToPrimitive(classes[i]);  }  return convertedClasses;}  }
class C{  private boolean canUseThisAd(NativeExpressAdView adNative){  if (adNative == null || adNative.isLoading())   return false;  return true;}  }
class C{  public final boolean isDependentRegionLinefeedStatusChanged(){  return (myFlags & DEPENDENT_REGION_LF_CHANGED_MASK) != 0;}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentWidth() > 10 && !mViewPortHandler.isFullyZoomedOutY()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentBottom());    if (!mYAxis.isInverted()) {      yMin=(float)p2.y;      yMax=(float)p1.y;    } else {      yMin=(float)p1.y;      yMax=(float)p2.y;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Item perFieldAnalyzer(Map<String,String> perFieldAnalyzer){  this.perFieldAnalyzer=perFieldAnalyzer;  return this;}  }
class C{  public String toString(){  return getName();}  }
class C{  private void indexQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){  if (entry.getIndex() > session.getLastApplied()) {    session.registerIndexQuery(entry.getIndex(),null);  } else {    applyQuery(entry,future);  }}  }
class C{  public DirectedOrderedSparseMultigraph(){  vertices=new LinkedHashMap<V,Pair<Set<E>>>();  edges=new LinkedHashMap<E,Pair<V>>();}  }
class C{  public void visible(boolean visible){  this.visible=visible;}  }
class C{  public static void writeStringMap(DataOutput out,@Nullable Map<String,String> map) throws IOException {  if (map != null) {    out.writeInt(map.size());    for (    Map.Entry<String,String> e : map.entrySet()) {      writeUTFStringNullable(out,e.getKey());      writeUTFStringNullable(out,e.getValue());    }  } else   out.writeInt(-1);}  }
class C{  @PUT @Path("/{machineId}/cancel") public void cancelExecution(@PathParam("machineId") Long machineId){}  }
class C{  public SQLiteSession(SQLiteConnectionPool connectionPool){  if (connectionPool == null) {    throw new IllegalArgumentException("connectionPool must not be null");  }  mConnectionPool=connectionPool;}  }
class C{  public static Stats of(int... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public static Test suite(){  final TestSuite suite=new TestSuite("B+Tree basics");  suite.addTestSuite(TestUtilMethods.class);  suite.addTestSuite(TestFindChild.class);  suite.addTestSuite(TestInsertLookupRemoveKeysInRootLeaf.class);  suite.addTestSuite(TestSplitRootLeaf.class);  suite.addTestSuite(TestSplitJoinRootLeaf.class);  suite.addTestSuite(TestSplitJoinThreeLevels.class);  suite.addTestSuite(TestLeafSplitShortestSeparatorKey.class);  suite.addTestSuite(TestLinearListMethods.class);  suite.addTestSuite(TestIndexCounter.class);  suite.addTestSuite(TestConstrainKeys.class);  suite.addTest(TestAll_Iterators.suite());  suite.addTestSuite(TestRemoveAll.class);  suite.addTestSuite(TestTouch.class);  suite.addTestSuite(TestBTree.class);  suite.addTestSuite(TestDirtyIterators.class);  suite.addTestSuite(TestIncrementalWrite.class);  suite.addTestSuite(TestCopyOnWrite.class);  suite.addTestSuite(TestDeleteMarkers.class);  suite.addTestSuite(TestPutIfAbsent.class);  suite.addTestSuite(TestCommit.class);  suite.addTestSuite(TestDirtyListener.class);  suite.addTestSuite(TestReopen.class);  suite.addTestSuite(TestNullValues.class);  suite.addTestSuite(TestBTreeRecycle.class);  suite.addTestSuite(TestTransientBTree.class);  suite.addTestSuite(TestRawRecords.class);  suite.addTestSuite(StressTestBTreeRemove.class);  suite.addTestSuite(TestBloomFilter.class);  suite.addTestSuite(TestBTreeWithBloomFilter.class);  suite.addTestSuite(TestBTreeBranchingFactors.class);  return suite;}  }
class C{  public float screenY(float x,float y){  showMissingWarning("screenY");  return 0;}  }
class C{  public void addDivider(ArchiveTokenDivider div){  m_dividers.add(div);}  }
class C{  public void forceKeyspaceFlush(String keyspaceName,String... columnFamilies) throws IOException {  for (  ColumnFamilyStore cfStore : getValidColumnFamilies(true,false,keyspaceName,columnFamilies)) {    logger.debug("Forcing flush on keyspace {}, CF {}",keyspaceName,cfStore.name);    cfStore.forceBlockingFlush();  }}  }
class C{  private void extract(Detail detail,DefaultType access) throws Exception {  List<MethodDetail> methods=detail.getMethods();  if (access == PROPERTY) {    for (    MethodDetail entry : methods) {      Annotation[] list=entry.getAnnotations();      Method method=entry.getMethod();      Class value=factory.getType(method);      if (value != null) {        process(method,list);      }    }  }}  }
class C{  public void recordBounds(final PlanetModel planetModel,final LatLonBounds boundsInfo,final Plane p,final Membership... bounds){  findIntersectionBounds(planetModel,boundsInfo,p,bounds);}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public void addException(long fromDomainValue,long toDomainValue){  addException(new SegmentRange(fromDomainValue,toDomainValue));}  }
class C{  private Properties cloneProperties(Properties properties){  Properties clonedProperties=new Properties();  for (Enumeration<?> propertyNames=properties.propertyNames(); propertyNames.hasMoreElements(); ) {    Object key=propertyNames.nextElement();    clonedProperties.put(key,properties.get(key));  }  return clonedProperties;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(SUBJECT_NAME)) {    names=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectAlternativeName.");  }  encodeThis();}  }
class C{  public static ExtensionRegistry newInstance(){  return new ExtensionRegistry();}  }
class C{  private static Integer computeLegacyIdFromCamera2Id(@Nonnull String camera2Id){  try {    return Integer.parseInt(camera2Id);  } catch (  NumberFormatException ignored) {  }  return null;}  }
class C{  private ManagedSystemInfo(int gmtOffset,String osName){  if ((osName == null) || (osName.length() == 0)) {    m_osName="";  } else {    m_osName=osName.trim();  }  m_gmtOffset=gmtOffset;  logger.trace(String.format("ManagedSystemInfo CTOR( gmt=%d, osName=%s )...",m_gmtOffset,m_osName));}  }
class C{  public byte[] toBytes() throws UnsupportedEncodingException {  StringBuilder result=new StringBuilder(256);  result.append(requestLine).append("\r\n");  for (int i=0; i < namesAndValues.size(); i+=2) {    result.append(namesAndValues.get(i)).append(": ").append(namesAndValues.get(i + 1)).append("\r\n");  }  result.append("\r\n");  return result.toString().getBytes("ISO-8859-1");}  }
class C{  private void usageError(String errorMsg) throws AdeUsageException {  System.out.flush();  System.err.println("Usage:");  System.err.println("\ttrain <analysis_group_name> [<start date> | <start date> <end date>] ");  System.err.println("\ttrain all [<start date> | <start date> <end date>");  System.err.println();  System.err.println("Reads summary of all messages within the specified dates and system id");  System.err.println("and updates the default model for this system.");  System.err.println("Specifying 'all' instead of analysis_group_name creates a model for each system in the database");  System.err.println("For Linux, analysis group name is the name of the group for a set of Linux Systems.");  System.err.println();  System.err.flush();  throw new AdeUsageException(errorMsg);}  }
class C{  public void insert(String namespace,String set,Key key,List<Bin> bins){  insert(namespace,set,key,bins,0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.196 -0400",hash_original_method="95E1997ED876C3EFBCA8CFB5348AD2D8",hash_generated_method="239D91317D1BB114819FD0921C6687B1") public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,Object interfaceObject){  Class<?> interfaceClass=interfaceObject.getClass();  return interfaceOf(objectClass,interfaceClass);}  }
class C{  JCNewClass makeNewClass(Type ctype,List<JCExpression> args){  return makeNewClass(ctype,args,rs.resolveConstructor(null,attrEnv,ctype,TreeInfo.types(args),List.<Type>nil()));}  }
class C{  public static double MSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  private Token scanToken(){  Token token=_token;  if (token != null) {    _token=null;    return token;  }  int sign=1;  int ch;  for (ch=read(); Character.isWhitespace((char)ch); ch=read()) {  }switch (ch) {case -1:    return Token.EOF;case '(':  return Token.LPAREN;case ')':return Token.RPAREN;case ',':return Token.COMMA;case '*':return Token.STAR;case '-':return Token.MINUS;case '+':return Token.PLUS;case '/':return Token.DIV;case '%':return Token.MOD;case '.':return Token.DOT;case '?':return Token.QUESTION_MARK;case '=':return Token.EQ;case '<':if ((ch=read()) == '=') return Token.LE; else if (ch == '>') return Token.NE; else {unread(ch);return Token.LT;}case '>':if ((ch=read()) == '=') return Token.GE; else {unread(ch);return Token.GT;}}if (Character.isJavaIdentifierStart((char)ch) || ch == ':') {CharBuffer cb=_cb;cb.clear();for (; ch > 0 && isIdentifierPart((char)ch); ch=read()) {cb.append((char)ch);}unread(ch);_lexeme=cb.toString();String lower=_lexeme.toLowerCase(Locale.ENGLISH);token=_reserved.get(lower);if (token != null) return token; else return Token.IDENTIFIER;} else if (ch >= '0' && ch <= '9') {CharBuffer cb=_cb;cb.clear();Token type=Token.INTEGER;if (sign < 0) cb.append('-');for (; ch >= '0' && ch <= '9'; ch=read()) cb.append((char)ch);if (ch == '.') {type=Token.DOUBLE;cb.append('.');for (ch=read(); ch >= '0' && ch <= '9'; ch=read()) cb.append((char)ch);}if (ch == 'e' || ch == 'E') {type=Token.DOUBLE;cb.append('e');if ((ch=read()) == '+' || ch == '-') {cb.append((char)ch);ch=read();}if (!(ch >= '0' && ch <= '9')) throw error(L.l("exponent needs digits at {0}",charName(ch)));for (; ch >= '0' && ch <= '9'; ch=read()) cb.append((char)ch);}if (ch == 'F' || ch == 'D') type=Token.DOUBLE; else if (ch == 'L') {type=Token.LONG;} else unread(ch);_lexeme=cb.toString();return type;} else if (ch == '\'') {CharBuffer cb=_cb;cb.clear();for (ch=read(); ch >= 0; ch=read()) {if (ch == '\'') {if ((ch=read()) == '\'') cb.append('\''); else {unread(ch);break;}} else if (ch == '\\') {ch=read();if (ch >= 0) cb.append(ch);} else cb.append((char)ch);}_lexeme=cb.toString();return Token.STRING;} else if (ch == '#') {while ((ch=read()) >= 0 && ch != '\n' && ch != '\r') {}return scanToken();}throw error(L.l("unexpected char at {0} ({1})","" + (char)ch,String.valueOf(ch)));}  }
class C{  @Override public String toString(){  String s="(" + this.getX() + ", "+ this.getY()+ ", "+ this.getZ()+ ")";  if (_isTunnel) {    s+="(tunnel)";  }  return (s);}  }
class C{  @Override public void process(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    processTuple(e.getKey());  }}  }
class C{  public AbViewInfo(View view,int width,int height){  super();  this.view=view;  this.width=width;  this.height=height;}  }
class C{  public void reschedule(long delay,TimeUnit unit){  boolean needQueue=true;  SingletonTaskWorker stw=null;synchronized (context) {    if (context.taskRunning || context.taskShouldRun) {      if (context.taskRunning) {        if (delay > 0) {          long now=System.nanoTime();          long then=now + TimeUnit.NANOSECONDS.convert(delay,unit);          context.waitingTask.nextschedule=then;        } else {          context.waitingTask.nextschedule=0;        }        needQueue=false;      } else {        context.waitingTask.canceled=true;        context.waitingTask=null;      }    }    context.taskShouldRun=true;    if (needQueue) {      stw=context.waitingTask=new SingletonTaskWorker(this);    }  }  if (needQueue) {    if (delay <= 0)     ses.execute(stw); else     ses.schedule(stw,delay,unit);  }}  }
class C{  protected Options addOptions(Options options){  options.addOption("b","beans",true,"Beans to start during initialization");  options.addOption("c","config",true,"Configuration URL or file path");  options.addOption("cv","configversion",true,"Version of configuration");  options.addOption("n","name",true,"Name of application");  options.addOption("p","port",true,"Monitoring port");  options.addOption("z","zone",true,"URL or path of dns zone content");  options.addOption("nd","nodns",false,"Not a network application");  options.addOption("wqz","workqueuesz",true,"work queue size");  options.addOption("wt","workerthreads",true,"worker threads");  return options;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMRule[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void markAsConsumedFromInterface(N4MemberDeclaration element){  tag(Tag.consumedFromInterface,element);}  }
class C{  public void initialize(SignalStrength ss,int timingAdvance){  mSignalStrength=ss.getLteSignalStrenght();  mRsrp=ss.getLteRsrp();  mRsrq=ss.getLteRsrq();  mRssnr=ss.getLteRssnr();  mCqi=ss.getLteCqi();  mTimingAdvance=timingAdvance;}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  public long time(int i){  long offset=0;  for (int j=indices.length - 1; j >= 0; j--) {    if (i >= indices[j]) {      offset=offsets[j];      break;    }  }  return offset + rtimes[i];}  }
class C{  public void afterReceivingFromServer(EventID eventId){}  }
class C{  public void removeDesignations(Object entity,URI... types) throws RepositoryException {  assert types != null && types.length > 0;  boolean autoCommit=isAutoCommit();  if (autoCommit) {    setAutoCommit(false);  }  try {    Resource resource=findResource(entity);    for (    URI type : types) {      this.types.removeTypeStatement(resource,type);    }    if (autoCommit) {      setAutoCommit(true);    }    cachedObjects.remove(resource);  }  finally {    if (autoCommit && !isAutoCommit()) {      rollback();      setAutoCommit(true);    }  }}  }
class C{  public void onResetMap(View view){  if (!checkReady()) {    return;  }  mMap.clear();  addMarkersToMap();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void toggleClickability(View view){  if (mGroundOverlayRotated != null) {    mGroundOverlayRotated.setClickable(((CheckBox)view).isChecked());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodevalue.class,args);}  }
class C{  HeapOperand<Object>[] replaceDefs(Instruction s,BasicBlock b){  if (s.operator() == PHI) {    HeapOperand<Object> oldDef=(HeapOperand)Phi.getResult(s);    int number=getNextHeapVariableNumber(oldDef.getHeapType());    HeapOperand<Object>[] newH=new HeapOperand[1];    newH[0]=new HeapOperand<Object>(new HeapVariable<Object>(oldDef.getHeapType(),number,ir));    newH[0].setInstruction(s);    Phi.setResult(s,newH[0]);    newH[0].getHeapVariable().registerDef(b);    if (DEBUG)     System.out.println("New heap def " + newH[0] + " for "+ s);    HeapKey<Object> key=new HeapKey<Object>(number,oldDef.getHeapType());    heapVariables.put(key,newH[0].getHeapVariable());    return newH;  } else {    HeapOperand<Object>[] oldH=defs.get(s);    HeapOperand<Object>[] newH=new HeapOperand[oldH.length];    for (int i=0; i < oldH.length; i++) {      int number=getNextHeapVariableNumber(oldH[i].getHeapType());      newH[i]=new HeapOperand<Object>(new HeapVariable<Object>(oldH[i].getHeapType(),number,ir));      newH[i].setInstruction(s);      newH[i].getHeapVariable().registerDef(b);      if (DEBUG)       System.out.println("New heap def " + newH[i] + " for "+ s);      HeapKey<Object> key=new HeapKey<Object>(number,oldH[i].getHeapType());      heapVariables.put(key,newH[i].getHeapVariable());    }    defs.put(s,newH);    return newH;  }}  }
class C{  public ParameterMap newParams(){  return new ParameterMap();}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  public OutputNode push(OutputNode value){  active.add(value);  add(value);  return value;}  }
class C{  public static String escapeString(final String str){  final StringBuilder result=new StringBuilder(3 * str.length());  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c < NON_PRINTABLE_CHARS.length) {      result.append(NON_PRINTABLE_CHARS[c]);    } else     if (c == '\\') {      result.append("\\\\");    } else {      result.append(c);    }  }  return result.toString();}  }
class C{  public EaseInOut(){}  }
class C{  public NSDate(Date d){  if (d == null)   throw new IllegalArgumentException("Date cannot be null");  date=d;}  }
class C{  public void onLoad(ClassPool pool,String classname){}  }
class C{  public void testHashCode(){  XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);  XYBoxAnnotation a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);  assertTrue(a1.equals(a2));  int h1=a1.hashCode();  int h2=a2.hashCode();  assertEquals(h1,h2);}  }
class C{  private void checkAttributePresence(Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=TestSolution.PASSED;  for (  Element el : elements) {    if (!el.hasAttr(attributeName)) {      testSolution=setTestSolution(testSolution,getFailureSolution());      createSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    } else {      testSolution=setTestSolution(testSolution,getSuccessSolution());      createSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  public static JFrame showForcePanel(ForceSimulator fsim){  JFrame frame=new JFrame("prefuse Force Simulator");  frame.setContentPane(new JForcePanel(fsim));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  @NonNull public IntroductionBuilder withSlides(@NonNull @Size(min=1) List<Slide> slides){  if (slides.isEmpty()) {    throw new IntroductionConfigurationException(EXCEPTION_SLIDE_AMOUNT_MESSAGE);  }  this.slides.addAll(new ArrayList<>(slides));  return this;}  }
class C{  private String findAlias(String varName){  if (aliases == null)   return varName;  String alias=aliases.get(varName);  if (alias == null) {    return varName;  }  return alias;}  }
class C{  public void clear(){  elements=0;}  }
class C{  private String generateTemplateIdSQLStatement(boolean tableExists){  StringBuffer output=new StringBuffer();  output.append("CREATE TABLE IF NOT EXISTS " + GeneratorConstants.TABLE_TPLID_TPLNAME + " ("+ "templateId INTEGER NOT NULL AUTO_INCREMENT,"+ "templateName MEDIUMTEXT NOT NULL, "+ "PRIMARY KEY(templateId)); \r\n");  if (!tableExists) {    output.append("CREATE INDEX tplIdx ON " + GeneratorConstants.TABLE_TPLID_TPLNAME + "(templateId);");    output.append("\r\n");  }  return output.toString();}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,char[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  private CHighlightLayers(){}  }
class C{  @Override public boolean hasCustomSpawnLocation(){  return false;}  }
class C{  public Map<Integer,Double> compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public static void configItem(String name,String value){  openMinorTag("conf");  attribute("name",name);  attribute("value",value);  closeMinorTag();}  }
class C{  public String scriptLang(){  return scriptLang;}  }
class C{  @Override public synchronized void doDeleteChild(BaseSolrResource endpoint,String childId){  String key=getIgnoreCase() ? childId.toLowerCase(Locale.ROOT) : childId;  if (!managedWords.contains(key))   throw new SolrException(ErrorCode.NOT_FOUND,String.format(Locale.ROOT,"%s not found in %s",childId,getResourceId()));  managedWords.remove(key);  storeManagedData(managedWords);  log.info("Removed word: {}",key);}  }
class C{  private void handleSetTexture(int id){  mTextureId=id;}  }
class C{  static void runMobsimDefault(Scenario sc,EventsManager ev,int iteration,OutputDirectoryHierarchy controlerIO){  QSim qSim=new QSim(sc,ev);  ActivityEngine activityEngine=new ActivityEngine(ev,qSim.getAgentCounter());  qSim.addMobsimEngine(activityEngine);  qSim.addActivityHandler(activityEngine);  QNetsimEngine netsimEngine=new QNetsimEngine(qSim);  qSim.addMobsimEngine(netsimEngine);  qSim.addDepartureHandler(netsimEngine.getDepartureHandler());  TeleportationEngine teleportationEngine=new TeleportationEngine(sc,ev);  qSim.addMobsimEngine(teleportationEngine);  AgentFactory agentFactory=new DefaultAgentFactory(qSim);  PopulationAgentSource agentSource=new PopulationAgentSource(sc.getPopulation(),agentFactory,qSim);  qSim.addAgentSource(agentSource);  if (sc.getConfig().controler().getWriteSnapshotsInterval() != 0 && iteration % sc.getConfig().controler().getWriteSnapshotsInterval() == 0) {    SnapshotWriterManager manager=new SnapshotWriterManager(sc.getConfig());    String fileName=controlerIO.getIterationFilename(iteration,"otfvis.mvi");    SnapshotWriter snapshotWriter=new OTFFileWriter(sc,fileName);    manager.addSnapshotWriter(snapshotWriter);    qSim.addQueueSimulationListeners(manager);  }  qSim.run();}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(DatabaseService.class);}  }
class C{  public void updateGestorValoracion(String[] valoraciones,String idGestor){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateORTokens(CAMPO_ID,valoraciones));  Map fieldsToUpdate=Collections.singletonMap(CAMPO_IDUSRGESTORSERIE,idGestor);  updateFields(qual.toString(),fieldsToUpdate,TABLE_NAME);}  }
class C{  private static PartitionedRegion isPartitionedCheck(final Region<?,?> r){  if (!isPartitionedRegion(r)) {    throw new IllegalArgumentException(LocalizedStrings.PartitionManager_REGION_0_IS_NOT_A_PARTITIONED_REGION.toLocalizedString(r.getFullPath()));  }  return (PartitionedRegion)r;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public T caseSimpleScope(SimpleScope object){  return null;}  }
class C{  public static String indent(String text,int steps){switch (steps) {case 0:    return text;case 1:  return indent(text);default :return indent(indent(text,steps - 1));}}  }
class C{  public Bag removeObjectsAtLocation(final int x,final int y,final int z){  return removeObjectsAtLocation(new Int3D(x,y,z));}  }
class C{  BillingRun executeBilling(BillingSubscriptionChunk billingSubscriptionChunk,Set<Long> failedSubscriptions){  BillingRun result=new BillingRun(billingSubscriptionChunk.getBillingPeriodStart(),billingSubscriptionChunk.getBillingPeriodEnd());  for (  BillingInput billingInput : billingSubscriptionChunk.getBillingInputList()) {    Long subscriptionKey=Long.valueOf(billingInput.getSubscriptionKey());    if (!failedSubscriptions.contains(subscriptionKey)) {      try {        BillingResult bill=revenueCalculator.performBillingRunForSubscription(billingInput);        if (!Strings.isEmpty(bill.getResultXML())) {          result.addBillingResult(bill);        }      } catch (      Exception e) {        failedSubscriptions.add(subscriptionKey);        result.setSuccessful(false);        logBillingRunFailed(e,billingInput);      }    }  }  return result;}  }
class C{  public Vector3d normalize(){  double invLength=1.0 / length();  x*=invLength;  y*=invLength;  z*=invLength;  return this;}  }
class C{  public boolean isRange(){  return m_vo.IsRange;}  }
class C{  public static ParsedOperation parseOperation(QueryLanguage ql,String operation,String baseURI) throws MalformedQueryException {  ParsedOperation parsedOperation=null;  QueryParser parser=createParser(ql);  if (QueryLanguage.SPARQL.equals(ql)) {    String strippedOperation=removeSPARQLQueryProlog(operation).toUpperCase();    if (strippedOperation.startsWith("SELECT") || strippedOperation.startsWith("CONSTRUCT") || strippedOperation.startsWith("DESCRIBE")|| strippedOperation.startsWith("ASK")) {      parsedOperation=parser.parseQuery(operation,baseURI);    } else {      parsedOperation=parser.parseUpdate(operation,baseURI);    }  } else {    parsedOperation=parser.parseQuery(operation,baseURI);  }  return parsedOperation;}  }
class C{  public int append(final int lhs,final int rhs,final String fieldName){  int comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public ConnectionRequest(String url,boolean post){  this(url);  setPost(post);}  }
class C{  void startEdit(){  assert (verifyArity());  int oc=ownedCount();  assert (!inTrans());  flags|=F_TRANS;  Name[] oldNames=names;  Name[] ownBuffer=(oc == 2 ? originalNames : null);  assert (ownBuffer != oldNames);  if (ownBuffer != null && ownBuffer.length >= length) {    names=copyNamesInto(ownBuffer);  } else {    final int SLOP=2;    names=Arrays.copyOf(oldNames,Math.max(length + SLOP,oldNames.length));    if (oc < 2)     ++flags;    assert (ownedCount() == oc + 1);  }  originalNames=oldNames;  assert (originalNames != names);  firstChange=length;  assert (inTrans());}  }
class C{  private void assignUnitMatrix(int n){  numRows=n;  numColumns=n;  length=(n + 31) >>> 5;  matrix=new int[numRows][length];  for (int i=0; i < numRows; i++) {    for (int j=0; j < length; j++) {      matrix[i][j]=0;    }  }  for (int i=0; i < numRows; i++) {    int rest=i & 0x1f;    matrix[i][i >>> 5]=1 << rest;  }}  }
class C{  public void emitop2(int op,int od){  emitop(op);  if (!alive)   return;  emit2(od);switch (op) {case getstatic:    state.push(((Symbol)(pool.pool[od])).erasure(types));  break;case putstatic:state.pop(((Symbol)(pool.pool[od])).erasure(types));break;case new_:Symbol sym;if (pool.pool[od] instanceof UniqueType) {sym=((UniqueType)(pool.pool[od])).type.tsym;} else {sym=(Symbol)(pool.pool[od]);}state.push(uninitializedObject(sym.erasure(types),cp - 3));break;case sipush:state.push(syms.intType);break;case if_acmp_null:case if_acmp_nonnull:case ifeq:case ifne:case iflt:case ifge:case ifgt:case ifle:state.pop(1);break;case if_icmpeq:case if_icmpne:case if_icmplt:case if_icmpge:case if_icmpgt:case if_icmple:case if_acmpeq:case if_acmpne:state.pop(2);break;case goto_:markDead();break;case putfield:state.pop(((Symbol)(pool.pool[od])).erasure(types));state.pop(1);break;case getfield:state.pop(1);state.push(((Symbol)(pool.pool[od])).erasure(types));break;case checkcast:{state.pop(1);Object o=pool.pool[od];Type t=(o instanceof Symbol) ? ((Symbol)o).erasure(types) : types.erasure((((UniqueType)o).type));state.push(t);break;}case ldc2w:state.push(typeForPool(pool.pool[od]));break;case instanceof_:state.pop(1);state.push(syms.intType);break;case ldc2:state.push(typeForPool(pool.pool[od]));break;case jsr:break;default :throw new AssertionError(mnem(op));}}  }
class C{  protected boolean assertChildIndex(final int index){  if (index < 0 || index > nchildren)   throw new IndexOutOfBoundsException("index=" + index + ", nchildren="+ nchildren);  return true;}  }
class C{  public void testInputWaitInterruption() throws Exception {  File f=this.initFile("testInputWaitInterruption");  FileOutputStream fos=new FileOutputStream(f);  @SuppressWarnings("resource") DataOutputStream dos=new DataOutputStream(fos);  dos.writeShort(13);  dos.flush();  logger.info("Starting read thread interruption");  CountDownLatch latch=new CountDownLatch(1);  SampleInputReader reader=new SampleInputReader(f,100,latch);  Thread readerThread=new Thread(reader);  readerThread.start();  try {    assertTrue("Waiting for reader thread to become ready",latch.await(5,TimeUnit.SECONDS));    Thread.sleep(75);    readerThread.interrupt();    reader.assertOK("[single run]");  }  finally {    reader.cancel();    readerThread.join(1000);  }}  }
class C{  public boolean isVisited(String uri){  if (uri == null)   return false;  uri=resolveURI(uri);  return history.contains(uri);}  }
class C{  public static void doEntryOps(){  try {    LogWriterUtils.getLogWriter().info("Putting entries...");    Cache cacheClient=GemFireCacheImpl.getInstance();    Region r1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    Region r3=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME3);    r1.put("key-1","11");    r2.put("key-1","11");    r3.put("key-1","11");    r1.put("key-1","22");    r2.put("key-1","22");    r3.put("key-1","22");    r1.invalidate("key-1");    r2.invalidate("key-1");    r3.invalidate("key-1");    r1.destroy("key-1");    r2.destroy("key-1");    r3.destroy("key-1");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region doing ops",ex);  }}  }
class C{  public void initializeMethodAccessor(MethodBinding accessedMethod,boolean isSuperAccess,ReferenceBinding receiverType){  this.targetMethod=accessedMethod;  this.modifiers=ClassFileConstants.AccDefault | ClassFileConstants.AccStatic | ClassFileConstants.AccSynthetic;  this.tagBits|=(TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);  SourceTypeBinding declaringSourceType=(SourceTypeBinding)receiverType;  SyntheticMethodBinding[] knownAccessMethods=declaringSourceType.syntheticMethods();  int methodId=knownAccessMethods == null ? 0 : knownAccessMethods.length;  this.index=methodId;  this.selector=CharOperation.concat(TypeConstants.SYNTHETIC_ACCESS_METHOD_PREFIX,String.valueOf(methodId).toCharArray());  this.returnType=accessedMethod.returnType;  this.purpose=isSuperAccess ? SyntheticMethodBinding.SuperMethodAccess : SyntheticMethodBinding.MethodAccess;  if (accessedMethod.isStatic()) {    this.parameters=accessedMethod.parameters;  } else {    this.parameters=new TypeBinding[accessedMethod.parameters.length + 1];    this.parameters[0]=declaringSourceType;    System.arraycopy(accessedMethod.parameters,0,this.parameters,1,accessedMethod.parameters.length);  }  this.thrownExceptions=accessedMethod.thrownExceptions;  this.declaringClass=declaringSourceType;  boolean needRename;  do {    check: {      needRename=false;      MethodBinding[] methods=declaringSourceType.methods();      for (int i=0, length=methods.length; i < length; i++) {        if (CharOperation.equals(this.selector,methods[i].selector) && areParameterErasuresEqual(methods[i])) {          needRename=true;          break check;        }      }      if (knownAccessMethods != null) {        for (int i=0, length=knownAccessMethods.length; i < length; i++) {          if (knownAccessMethods[i] == null)           continue;          if (CharOperation.equals(this.selector,knownAccessMethods[i].selector) && areParameterErasuresEqual(knownAccessMethods[i])) {            needRename=true;            break check;          }        }      }    }    if (needRename) {      setSelector(CharOperation.concat(TypeConstants.SYNTHETIC_ACCESS_METHOD_PREFIX,String.valueOf(++methodId).toCharArray()));    }  } while (needRename);  AbstractMethodDeclaration[] methodDecls=declaringSourceType.scope.referenceContext.methods;  if (methodDecls != null) {    for (int i=0, length=methodDecls.length; i < length; i++) {      if (methodDecls[i].binding == accessedMethod) {        this.sourceStart=methodDecls[i].sourceStart;        return;      }    }  }}  }
class C{  public void unregisterResources(){  if (myContext != null && registerReceiver) {synchronized (MqttAndroidClient.this) {      myContext.unregisterReceiver(this);      registerReceiver=false;    }    if (bindedService) {      try {        myContext.unbindService(serviceConnection);        bindedService=false;      } catch (      IllegalArgumentException e) {      }    }  }}  }
class C{  public void move(double timeIncrement){  double possibleMovement;  double distance;  double dx, dy;  if (!isMovementActive() || SimClock.getTime() < this.nextTimeToMove) {    return;  }  if (this.destination == null) {    if (!setNextWaypoint()) {      return;    }  }  possibleMovement=timeIncrement * speed;  distance=this.location.distance(this.destination);  while (possibleMovement >= distance) {    this.location.setLocation(this.destination);    possibleMovement-=distance;    if (!setNextWaypoint()) {      return;    }    distance=this.location.distance(this.destination);  }  dx=(possibleMovement / distance) * (this.destination.getX() - this.location.getX());  dy=(possibleMovement / distance) * (this.destination.getY() - this.location.getY());  this.location.translate(dx,dy);}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  if (this.appView != null)   this.appView.onNewIntent(intent);}  }
class C{  public Object doLogin(final String authuri,final String username,final String password,final int portNumber) throws VNXFilePluginException {  PostMethod postMethod=null;  try {    _logger.debug("doLogin " + authuri + ":"+ username+ ":"+ portNumber);    Protocol protocol=_protocol.getProtocol(portNumber);    Protocol.registerProtocol("https",protocol);    _logger.info("Querying the url {}",authuri);    postMethod=new PostMethod(authuri);    postMethod.addParameter("user",username);    postMethod.addParameter("password",password);    postMethod.addParameter("Login","Login");    postMethod.setRequestHeader("Content-Type","application/x-www-form-urlencoded");    postMethod.getParams().setVersion(HttpVersion.HTTP_1_1);    setTimeoutValues();    Level origLevel=LogManager.getRootLogger().getLevel();    LogManager.getRootLogger().setLevel(Level.INFO);    final int response=_client.executeMethod(postMethod);    LogManager.getRootLogger().setLevel(origLevel);    _logger.debug("connection timeout set {}",_client.getParams().getParameter("http.connection.timeout"));    if (response != HttpStatus.SC_OK) {      _logger.error("Invalid response received from XML API Server while getting cookie information. " + "HTTP Error code: {}",response);      throw new VNXFilePluginException("Invalid response recieved from XML API Server while getting cookie information.",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }  } catch (  final IOException ioEx) {    _logger.error("IOException occurred while sending the Login request due to {}",ioEx.getMessage());    throw new VNXFilePluginException("IOException occurred while sending Login the request.",ioEx.getCause());  }catch (  final Exception ex) {    _logger.error("Exception occurred while sending the Login request due to {}",ex.getMessage());    throw new VNXFilePluginException("Exception occurred while sending the Login request.",ex.getCause());  }  return postMethod;}  }
class C{  public BubbleChartSeriesAttributes(ChartGenerator generator,String name,int index,double[][] values,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(values);  super.setSeriesName(name);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public DependencyPathNgrams(String dependencyViewName,int ngramSize){  this.dependencyViewName=dependencyViewName;  this.ngramSize=ngramSize;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ActionPresentationData(@NotNull String text,String description,Icon icon){  myText=text;  myDescription=description;  myIcon=icon;}  }
class C{  private static int parsePolicyFromMessage(String message){  if (message == null || !message.startsWith("policy=")) {    return 0;  }  int spaceIndex=message.indexOf(' ');  if (spaceIndex == -1) {    return 0;  }  String policyString=message.substring(7,spaceIndex);  try {    return Integer.valueOf(policyString).intValue();  } catch (  NumberFormatException e) {    return 0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.318 -0500",hash_original_method="9D75E2E2AB8D83EF2AA67EF8FE72195D",hash_generated_method="66F94E328ECD4F0B65EDA58A2030DF2D") public boolean documentHasImages(){  return getTaintBoolean();}  }
class C{  public JpaRepositoryTransition(JpaRepositoryState source,JpaRepositoryState target,String event){  this(null,source,target,event);}  }
class C{  public AuthScope(final String host,int port,final String realm){  this(host,port,realm,ANY_SCHEME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:21.190 -0500",hash_original_method="17E369F2319E43AC424DA68053015181",hash_generated_method="2CD6AE535FF35BFAB0DB87222EE51702") public void split(){  if (!needsSplitting()) {    return;  }  Node parent=getParentNode();  String[] parts=getData().split("\\]\\]>");  parent.insertBefore(new CDATASectionImpl(document,parts[0] + "]]"),this);  for (int p=1; p < parts.length - 1; p++) {    parent.insertBefore(new CDATASectionImpl(document,">" + parts[p] + "]]"),this);  }  setData(">" + parts[parts.length - 1]);}  }
class C{  @Override public synchronized void startHandshake() throws IOException {synchronized (handshakeLock) {    checkOpen();    if (!handshakeStarted) {      handshakeStarted=true;    } else {      return;    }  }  final int seedLengthInBytes=NativeCrypto.RAND_SEED_LENGTH_IN_BYTES;  final SecureRandom secureRandom=sslParameters.getSecureRandomMember();  if (secureRandom == null) {    NativeCrypto.RAND_load_file("/dev/urandom",seedLengthInBytes);  } else {    NativeCrypto.RAND_seed(secureRandom.generateSeed(seedLengthInBytes));  }  final boolean client=sslParameters.getUseClientMode();  final long sslCtxNativePointer=(client) ? sslParameters.getClientSessionContext().sslCtxNativePointer : sslParameters.getServerSessionContext().sslCtxNativePointer;  this.sslNativePointer=0;  boolean exception=true;  try {    sslNativePointer=NativeCrypto.SSL_new(sslCtxNativePointer);    guard.open("close");    if (npnProtocols != null) {      NativeCrypto.SSL_CTX_enable_npn(sslCtxNativePointer);    }    if (client && alpnProtocols != null) {      NativeCrypto.SSL_CTX_set_alpn_protos(sslCtxNativePointer,alpnProtocols);    }    if (!client) {      Set<String> keyTypes=new HashSet<String>();      for (      String enabledCipherSuite : enabledCipherSuites) {        if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {          continue;        }        String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();        if (keyType != null) {          keyTypes.add(keyType);        }      }      for (      String keyType : keyTypes) {        try {          setCertificate(sslParameters.getKeyManager().chooseServerAlias(keyType,null,this));        } catch (        CertificateEncodingException e) {          throw new IOException(e);        }      }    }    NativeCrypto.setEnabledProtocols(sslNativePointer,enabledProtocols);    NativeCrypto.setEnabledCipherSuites(sslNativePointer,enabledCipherSuites);    if (useSessionTickets) {      NativeCrypto.SSL_clear_options(sslNativePointer,NativeCrypto.SSL_OP_NO_TICKET);    }    if (hostname != null) {      NativeCrypto.SSL_set_tlsext_host_name(sslNativePointer,hostname);    }    boolean enableSessionCreation=sslParameters.getEnableSessionCreation();    if (!enableSessionCreation) {      NativeCrypto.SSL_set_session_creation_enabled(sslNativePointer,enableSessionCreation);    }    AbstractSessionContext sessionContext;    OpenSSLSessionImpl sessionToReuse;    if (client) {      ClientSessionContext clientSessionContext=sslParameters.getClientSessionContext();      sessionContext=clientSessionContext;      sessionToReuse=getCachedClientSession(clientSessionContext);      if (sessionToReuse != null) {        NativeCrypto.SSL_set_session(sslNativePointer,sessionToReuse.sslSessionNativePointer);      }    } else {      sessionContext=sslParameters.getServerSessionContext();      sessionToReuse=null;    }    if (client) {    } else {      boolean certRequested;      if (sslParameters.getNeedClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER | NativeCrypto.SSL_VERIFY_FAIL_IF_NO_PEER_CERT);        certRequested=true;      } else       if (sslParameters.getWantClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER);        certRequested=true;      } else {        certRequested=false;      }      if (certRequested) {        X509TrustManager trustManager=sslParameters.getTrustManager();        X509Certificate[] issuers=trustManager.getAcceptedIssuers();        if (issuers != null && issuers.length != 0) {          byte[][] issuersBytes;          try {            issuersBytes=encodeIssuerX509Principals(issuers);          } catch (          CertificateEncodingException e) {            throw new IOException("Problem encoding principals",e);          }          NativeCrypto.SSL_set_client_CA_list(sslNativePointer,issuersBytes);        }      }    }    int savedReadTimeoutMilliseconds=getSoTimeout();    int savedWriteTimeoutMilliseconds=getSoWriteTimeout();    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(handshakeTimeoutMilliseconds);      setSoWriteTimeout(handshakeTimeoutMilliseconds);    }    if (channelIdEnabled) {      if (client) {        if (channelIdPrivateKey == null) {          throw new SSLHandshakeException("Invalid TLS channel ID key specified");        }        NativeCrypto.SSL_set1_tls_channel_id(sslNativePointer,channelIdPrivateKey.getPkeyContext());      } else {        NativeCrypto.SSL_enable_tls_channel_id(sslNativePointer);      }    }    long sslSessionNativePointer;    try {      sslSessionNativePointer=NativeCrypto.SSL_do_handshake(sslNativePointer,socket.getFileDescriptor$(),this,getSoTimeout(),client,npnProtocols,client ? null : alpnProtocols);    } catch (    CertificateException e) {      SSLHandshakeException wrapper=new SSLHandshakeException(e.getMessage());      wrapper.initCause(e);      throw wrapper;    }    byte[] sessionId=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);    if (sessionToReuse != null && Arrays.equals(sessionToReuse.getId(),sessionId)) {      this.sslSession=sessionToReuse;      sslSession.lastAccessedTime=System.currentTimeMillis();      NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);    } else {      if (!enableSessionCreation) {        throw new IllegalStateException("SSL Session may not be created");      }      X509Certificate[] localCertificates=createCertChain(NativeCrypto.SSL_get_certificate(sslNativePointer));      X509Certificate[] peerCertificates=createCertChain(NativeCrypto.SSL_get_peer_cert_chain(sslNativePointer));      this.sslSession=new OpenSSLSessionImpl(sslSessionNativePointer,localCertificates,peerCertificates,getPeerHostName(),getPeerPort(),sessionContext);      if (handshakeCompleted) {        sessionContext.putSession(sslSession);      }    }    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(savedReadTimeoutMilliseconds);      setSoWriteTimeout(savedWriteTimeoutMilliseconds);    }    if (handshakeCompleted) {      notifyHandshakeCompletedListeners();    }    exception=false;  } catch (  SSLProtocolException e) {    throw new SSLHandshakeException(e);  } finally {    if (exception) {      close();    }  }}  }
class C{  public void compact(){  if (isCompact) {    return;  }  for (int plane=0; plane < PLANECOUNT; plane++) {    if (!planeTouched[plane]) {      continue;    }    int limitCompacted=0;    int iBlockStart=0;    short iUntouched=-1;    for (int i=0; i < indices[plane].length; ++i, iBlockStart+=BLOCKCOUNT) {      indices[plane][i]=-1;      if (!blockTouched[plane][i] && iUntouched != -1) {        indices[plane][i]=iUntouched;      } else {        int jBlockStart=limitCompacted * BLOCKCOUNT;        if (i > limitCompacted) {          System.arraycopy(values[plane],iBlockStart,values[plane],jBlockStart,BLOCKCOUNT);        }        if (!blockTouched[plane][i]) {          iUntouched=(short)jBlockStart;        }        indices[plane][i]=(short)jBlockStart;        limitCompacted++;      }    }    int newSize=limitCompacted * BLOCKCOUNT;    int[] result=new int[newSize];    System.arraycopy(values[plane],0,result,0,newSize);    values[plane]=result;    blockTouched[plane]=null;  }  isCompact=true;}  }
class C{  public final static float distance_to_endpoint(int x1,int y1,int x2,int y2,int x,int y){  return (float)Math.min(distance(x1,y1,x,y),distance(x2,y2,x,y));}  }
class C{  public GPathResult parse(final Reader in) throws IOException, SAXException {  return parse(new InputSource(in));}  }
class C{  public Builder noTransform(){  this.noTransform=true;  return this;}  }
class C{  public void startScan(SiteNode startNode){  Target target=new Target(startNode);  target.setRecurse(true);  this.startScan(target,null,null);}  }
class C{  public Builder withTimeout(long timeout,TimeUnit unit){  LettuceAssert.notNull(unit,"TimeUnit must not be null");  LettuceAssert.isTrue(timeout >= 0,"Timeout must be greater or equal 0");  disqueURI.setTimeout(timeout);  disqueURI.setUnit(unit);  return this;}  }
class C{  public VcpcAltRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public Tokenizer(CharSequence text){  this.text=text;  matcher=WHITESPACE.matcher(text);  skipWhitespace();  nextToken();}  }
class C{  public String randomString(int len){  StringBuilder buff=new StringBuilder();  for (int i=0; i < len; i++) {    String from=(i % 2 == 0) ? "bdfghklmnpqrst" : "aeiou";    buff.append(from.charAt(getInt(from.length())));  }  return buff.toString();}  }
class C{  public static boolean add(ImageFetchable src){  final FetcherInfo info=FetcherInfo.getFetcherInfo();synchronized (info.waitList) {    if (!info.waitList.contains(src)) {      info.waitList.addElement(src);      if (info.numWaiting == 0 && info.numFetchers < info.fetchers.length) {        createFetchers(info);      }      if (info.numFetchers > 0) {        info.waitList.notify();      } else {        info.waitList.removeElement(src);        return false;      }    }  }  return true;}  }
class C{  private void relax(Integer node){  double timeNow=times.get(node);  int to;  double timeTo;  for (  ScheduleEntry se : oracle.getConnected(node,timeNow)) {    to=se.getTo();    if (visited.contains(to)) {      continue;    }    timeTo=se.getTime() + se.getDuration();    if (timeTo < times.get(to)) {      prevHops.put(to,se);      setTime(to,timeTo);    }  }}  }
class C{  public boolean parseAlignments(){  return false;}  }
class C{  public ScaleTypeDrawable(Drawable drawable,ScaleType scaleType){  super(Preconditions.checkNotNull(drawable));  mScaleType=scaleType;}  }
class C{  public Component add(Component comp){  add(comp,new DockConstraint());  return comp;}  }
class C{  public static void deleteContents(File dir) throws IOException {  File[] files=dir.listFiles();  if (files != null) {    for (    File file : files) {      if (file.isDirectory()) {        deleteContents(file);      }      file.delete();    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatecomment.class,args);}  }
class C{  public static boolean equals(final TypeRepresentation first,final TypeRepresentation second){  if (!first.equals(second))   return false;  final boolean firstCollection=first instanceof TypeRepresentation.CollectionTypeRepresentation;  final boolean secondCollection=second instanceof TypeRepresentation.CollectionTypeRepresentation;  if (firstCollection ^ secondCollection)   return false;  if (firstCollection)   return ((TypeRepresentation.CollectionTypeRepresentation)first).contentEquals(((TypeRepresentation.CollectionTypeRepresentation)second).getRepresentation());  final boolean firstEnum=first instanceof TypeRepresentation.EnumTypeRepresentation;  final boolean secondEnum=second instanceof TypeRepresentation.EnumTypeRepresentation;  if (firstEnum ^ secondEnum)   return false;  if (firstEnum) {    final TypeRepresentation.EnumTypeRepresentation firstEnumRep=(TypeRepresentation.EnumTypeRepresentation)first;    final TypeRepresentation.EnumTypeRepresentation secondEnumRep=(TypeRepresentation.EnumTypeRepresentation)second;    return firstEnumRep.getEnumValues().equals(secondEnumRep.getEnumValues()) && firstEnumRep.getComponentType().equals(secondEnumRep.getComponentType());  }  return ((TypeRepresentation.ConcreteTypeRepresentation)first).contentEquals(((TypeRepresentation.ConcreteTypeRepresentation)second).getProperties());}  }
class C{  @Nullable public static String dateToStringUTC(@Nullable Date date,@NonNull DateFormat df){  if (date == null) {    return null;  } else {    df.setTimeZone(UTC);    return dateToString(date,df);  }}  }
class C{  private BlockConsistencyGroup queryConsistencyGroup(final URI consistencyGroupUri){  ArgValidator.checkFieldNotNull(consistencyGroupUri,"consistency_group");  ArgValidator.checkUri(consistencyGroupUri);  final BlockConsistencyGroup consistencyGroup=_dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroupUri);  ArgValidator.checkEntity(consistencyGroup,consistencyGroupUri,isIdEmbeddedInURL(consistencyGroupUri));  return consistencyGroup;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  if (s == null)   s="";  stack.getUIMgrSafe().put("default_subpic_language",s);  return null;}  }
class C{  private Instruction do_store(int index,Operand op1){  TypeReference type=op1.getType();  boolean Dual=(type.isLongType() || type.isDoubleType());  if (LOCALS_ON_STACK) {    replaceLocalsOnStack(index,type);  }  if (ELIM_COPY_LOCALS) {    if (op1 instanceof RegisterOperand) {      RegisterOperand rop1=(RegisterOperand)op1;      Register r1=rop1.getRegister();      if (lastInstr != null && ResultCarrier.conforms(lastInstr) && ResultCarrier.hasResult(lastInstr) && !r1.isLocal() && r1 == ResultCarrier.getResult(lastInstr).getRegister()) {        if (DBG_ELIMCOPY)         db("eliminated copy " + op1 + " to"+ index);        RegisterOperand newop0=gc.makeLocal(index,rop1);        ResultCarrier.setResult(lastInstr,newop0);        if (Dual) {          setLocalDual(index,newop0);        } else {          setLocal(index,newop0);        }        gc.getTemps().release(rop1);        return null;      }    }  }  RegisterOperand op0=(op1 instanceof RegisterOperand) ? gc.makeLocal(index,(RegisterOperand)op1) : gc.makeLocal(index,type);  Operand set=op0;  if (CP_IN_LOCALS) {    set=(op1 instanceof RegisterOperand) ? op0 : op1;  }  if (Dual) {    setLocalDual(index,set);  } else {    setLocal(index,set);  }  Instruction s=Move.create(IRTools.getMoveOp(type),op0,op1);  setSourcePosition(s);  return s;}  }
class C{  public void addInitiatorsUsingREST(StorageSystem storage,URI exportMaskURI,List<URI> volumeURIs,List<Initiator> initiatorList,TaskCompleter taskCompleter){  try {    ExportMask mask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    XIVRestClient restExportOpr=getRestClient(storage);    final String storageIP=storage.getSmisProviderIP();    List<Initiator> userAddedInitiators=new ArrayList<Initiator>();    for (    Initiator initiator : initiatorList) {      final Host host=_dbClient.queryObject(Host.class,initiator.getHost());      if (!restExportOpr.createHostPort(storageIP,host.getLabel(),Initiator.normalizePort(initiator.getInitiatorPort()),initiator.getProtocol().toLowerCase())) {        userAddedInitiators.add(initiator);      }    }    mask.addToUserCreatedInitiators(userAddedInitiators);    ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,mask);    _dbClient.updateObject(mask);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Unexpected error: addInitiator failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("addInitiator",e);    taskCompleter.error(_dbClient,error);  }}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MouseDelegator) {    Debug.message("mousemodepanel","MouseModePanel removing MouseDelegator.");    if (someObj == getMouseDelegator()) {      setMouseDelegator(null);    }  }}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SEXPERIMENT;}  }
class C{  public static void createImageToStorage(String url,Label l,String cacheId,Image placeholder,byte priority){  createImageToStorage(url,l,cacheId,false,null,priority,placeholder,defaultMaintainAspectRatio);}  }
class C{  public static Number next(Number self){  return NumberNumberPlus.plus(self,ONE);}  }
class C{  public int read(byte[] buf,int off,int len) throws TTransportException {  if (inputStream_ == null) {    throw new TTransportException(TTransportException.NOT_OPEN,"Cannot read from null inputStream");  }  int bytesRead;  try {    bytesRead=inputStream_.read(buf,off,len);  } catch (  IOException iox) {    throw new TTransportException(TTransportException.UNKNOWN,iox);  }  if (bytesRead < 0) {    throw new TTransportException(TTransportException.END_OF_FILE);  }  return bytesRead;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == mRefresh) {    m_goal.updateGoal(true);    updateDisplay();    Container parent=getParent();    if (parent != null)     parent.invalidate();    invalidate();    if (parent != null)     parent.repaint(); else     repaint();  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError, IOException {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public static long capacityRemainingBackward(GenericValue techDataCalendar,Timestamp dateFrom){  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return 0;  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  int moveDay=((Integer)position.get("moveDay")).intValue();  if (moveDay != 0)   return 0;  Time startTime=(Time)position.get("startTime");  Double capacity=(Double)position.get("capacity");  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateFrom).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateFrom.before(startAvailablePeriod))   return 0;  Timestamp endAvailablePeriod=new Timestamp(startAvailablePeriod.getTime() + capacity.longValue());  if (dateFrom.after(endAvailablePeriod))   return 0;  return dateFrom.getTime() - startAvailablePeriod.getTime();}  }
class C{  public void close(){  if (bdd != null)   bdd.close();}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public boolean isInitialLightingDone(){  return isInitialLightingDone;}  }
class C{  static void importPreferences(InputStream is) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=loadPrefsDoc(is);    String xmlVersion=doc.getDocumentElement().getAttribute("EXTERNAL_XML_VERSION");    if (xmlVersion.compareTo(EXTERNAL_XML_VERSION) > 0)     throw new InvalidPreferencesFormatException("Exported preferences file format version " + xmlVersion + " is not supported. This java installation can read"+ " versions "+ EXTERNAL_XML_VERSION+ " or older. You may need"+ " to install a newer version of JDK.");    Element xmlRoot=(Element)doc.getDocumentElement().getChildNodes().item(0);    Preferences prefsRoot=(xmlRoot.getAttribute("type").equals("user") ? Preferences.userRoot() : Preferences.systemRoot());    ImportSubtree(prefsRoot,xmlRoot);  } catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public void addConversation(Conversation conversation){  conversations.put(conversation.getName().toLowerCase(),conversation);}  }
class C{  public static org.oscm.internal.vo.VOService convertToUp(org.oscm.vo.VOService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOService newVO=new org.oscm.internal.vo.VOService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToUpVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.internal.types.enumtypes.OfferingType.class));  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){  double result;  double v=mapValueToFixedRange(value);  if (this.displayStart < this.displayEnd) {    result=trans(v,area,edge);  } else {    double cutoff=(this.displayStart + this.displayEnd) / 2.0;    double length1=this.fixedRange.getUpperBound() - this.displayStart;    double length2=this.displayEnd - this.fixedRange.getLowerBound();    if (v > cutoff) {      result=transStart(v,area,edge,length1,length2);    } else {      result=transEnd(v,area,edge,length1,length2);    }  }  return result;}  }
class C{  @Override public void registerIndex(IndexMetadata indexMetadata){  throw new UnsupportedOperationException();}  }
class C{  public void deleteVideoSharings2(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  mRichcallService.tryToDeleteVideoSharings(contact);}  }
class C{  private long calculateEffectiveBillingEndDate(long billingInvocationTime,long billingOffset){  Calendar cal=getCalendar();  cal.setTimeInMillis(subtractBillingOffset(billingInvocationTime,billingOffset));  cal.set(Calendar.DAY_OF_MONTH,normalizeCutOffDay(cal.get(Calendar.DAY_OF_MONTH)));  return cal.getTimeInMillis();}  }
class C{  public static byte[] fileReadToByteArray(String path){  SuperUserCommand superUserCommand=new SuperUserCommand("cat '" + path + "'");  superUserCommand.setHideInput(true);  superUserCommand.setHideStandardOutput(true);  superUserCommand.setBinaryStandardOutput(true);  superUserCommand.execute();  if (!superUserCommand.commandWasSuccessful())   return null;  return superUserCommand.getStandardOutputBinary();}  }
class C{  public static void isInRange(String member,BigDecimal inputValue,BigDecimal minValue,BigDecimal maxValue) throws ValidationException {  if (inputValue != null && minValue != null && inputValue.compareTo(minValue) == -1) {    ValidationException vf=new ValidationException(ReasonEnum.VALUE_NOT_IN_RANGE,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }  if (inputValue != null && maxValue != null && inputValue.compareTo(maxValue) == 1) {    ValidationException vf=new ValidationException(ReasonEnum.VALUE_NOT_IN_RANGE,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  private static CacheTypeMetadata metaForClass(Class cls){  CacheTypeMetadata meta=new CacheTypeMetadata();  meta.setKeyType(Integer.class);  meta.setValueType(cls);  meta.setAscendingFields(Collections.<String,Class<?>>singletonMap("val",Integer.class));  return meta;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public EchoReplyMessage(EchoReplyMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  private Element consistToXml(Consist consist){  Element e=new Element("consist");  e.setAttribute("id",consist.getConsistID());  e.setAttribute("consistNumber","" + consist.getConsistAddress().getNumber());  e.setAttribute("longAddress",consist.getConsistAddress().isLongAddress() ? "yes" : "no");  e.setAttribute("type",consist.getConsistType() == Consist.ADVANCED_CONSIST ? "DAC" : "CSAC");  ArrayList<DccLocoAddress> addressList=consist.getConsistList();  for (int i=0; i < addressList.size(); i++) {    DccLocoAddress locoaddress=addressList.get(i);    Element eng=new Element("loco");    eng.setAttribute("dccLocoAddress","" + locoaddress.getNumber());    eng.setAttribute("longAddress",locoaddress.isLongAddress() ? "yes" : "no");    eng.setAttribute("locoDir",consist.getLocoDirection(locoaddress) ? "normal" : "reverse");    int position=consist.getPosition(locoaddress);    if (position == Consist.POSITION_LEAD) {      eng.setAttribute("locoName","lead");    } else     if (position == Consist.POSITION_TRAIL) {      eng.setAttribute("locoName","rear");    } else {      eng.setAttribute("locoName","mid");      eng.setAttribute("locoMidNumber","" + position);    }    e.addContent(eng);  }  return (e);}  }
class C{  public InstanceComparator(boolean includeClass,String range,boolean invert){  super();  m_Range=new Range();  setIncludeClass(includeClass);  setRange(range);  setInvert(invert);}  }
class C{  public IntervalleObject merge(IntervalleObject with){  if (with == null) {    return this;  } else {    Object lower=compareTo(getLowerBound(),with.getLowerBound()) < 0 ? getLowerBound() : with.getLowerBound();    Object upper=compareTo(getUpperBound(),with.getUpperBound()) > 0 ? getUpperBound() : with.getUpperBound();    return new IntervalleObject(lower,upper);  }}  }
class C{  public boolean isRolePresent(Role role){  return id.getRoles().contains(role);}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  List createPolys(int nItems,double size,int nPts){  double overlapPct=0.2;  int nCells=(int)Math.sqrt(nItems);  List geoms=new ArrayList();  double width=nCells * (1 - overlapPct) * size;  double height=nCells * 2 * size;  double xInc=width / nCells;  double yInc=height / nCells;  for (int i=0; i < nCells; i++) {    for (int j=0; j < nCells; j++) {      Coordinate base=new Coordinate(i * xInc,j * yInc);      Geometry poly=createPoly(base,size,nPts);      geoms.add(poly);    }  }  return geoms;}  }
class C{  private byte[] checkUserPassword(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,byte[] uValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException, EncryptionUnsupportedByProductException, PDFParseException {  final byte[] generalKey=calculateGeneralEncryptionKey(userPassword,firstDocIdValue,keyBitLength,revision,oValue,pValue,encryptMetadata);  final byte[] calculatedUValue=calculateUValue(generalKey,firstDocIdValue,revision);  assert calculatedUValue.length == 32;  if (uValue.length != calculatedUValue.length) {    throw new PDFParseException("Improper U entry length; " + "expected 32, is " + uValue.length);  }  final int numSignificantBytes=revision == 2 ? 32 : 16;  for (int i=0; i < numSignificantBytes; ++i) {    if (uValue[i] != calculatedUValue[i]) {      return null;    }  }  return generalKey;}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public void invalidate(){  isValid=false;  sessionContext=null;}  }
class C{  public void load(){  directory=directory.replaceAll(" Grappl","Grappl");  File[] files=new File(directory).listFiles();  try {    if (files != null) {      for (      File file : files) {        try {          String[] pluginName=file.getName().split("\\.");          if (pluginName[1].equalsIgnoreCase(extension)) {            try {              ClassLoader classLoader=new URLClassLoader(new URL[]{file.toURI().toURL()});              String mainClassLocation="";              DataInputStream plgInfoStream=new DataInputStream(classLoader.getResourceAsStream("plginfo.dat"));              mainClassLocation=plgInfoStream.readLine();              if (!loadedPlugins.contains(mainClassLocation)) {                Class theClass=classLoader.loadClass(mainClassLocation);                try {                  Object the=theClass.newInstance();                  Method m=theClass.newInstance().getClass().getMethod("main");                  m.invoke(the);                  pluginsLoaded++;                } catch (                Exception e) {                  e.printStackTrace();                }                loadedPlugins.add(mainClassLocation);              }            } catch (            MalformedURLException e) {              e.printStackTrace();            }          }        } catch (        Exception e) {          e.printStackTrace();        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  Application.getLog().log(pluginsLoaded + " plugin(s) loaded");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.970 -0500",hash_original_method="7596573BC98218F8353DB810A415EA55",hash_generated_method="FC221DD174470D4245763A796A96A214") public PorterDuffColorFilter(int srcColor,PorterDuff.Mode mode){  native_instance=native_CreatePorterDuffFilter(srcColor,mode.nativeInt);  nativeColorFilter=nCreatePorterDuffFilter(native_instance,srcColor,mode.nativeInt);}  }
class C{  public void bindStage(Date currentDate,int stage){  mStage=stage;  mTitle.setText(itemView.getResources().getString(R.string.setting_stage,stage));  mInitialDate=currentDate;  initializeDuration(currentDate);  mButton.setEnabled(false);  mErrorLayout.setVisibility(View.GONE);  mErrorLayout.collapse();}  }
class C{  public static AttributeSet synchronizedView(AttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedAttributeSet(attributeSet);}  }
class C{  private byte[] assembleReceiverReportPacket(){  final int FIXED_HEADER_SIZE=4;  byte V_P_RC=(byte)((RtcpPacket.VERSION << 6) | (RtcpPacket.PADDING << 5) | (0x00));  byte ss[]=RtcpPacketUtils.longToBytes(mRtcpSession.SSRC,4);  byte PT[]=RtcpPacketUtils.longToBytes(RtcpPacket.RTCP_RR,1);  byte receptionReportBlocks[]=new byte[0];  receptionReportBlocks=RtcpPacketUtils.append(receptionReportBlocks,assembleRTCPReceptionReport());  byte receptionReports=(byte)(receptionReportBlocks.length / 24);  V_P_RC=(byte)(V_P_RC | (byte)(receptionReports & 0x1F));  byte length[]=RtcpPacketUtils.longToBytes((FIXED_HEADER_SIZE + ss.length + receptionReportBlocks.length) / 4 - 1,2);  byte RRPacket[]=new byte[1];  RRPacket[0]=V_P_RC;  RRPacket=RtcpPacketUtils.append(RRPacket,PT);  RRPacket=RtcpPacketUtils.append(RRPacket,length);  RRPacket=RtcpPacketUtils.append(RRPacket,ss);  RRPacket=RtcpPacketUtils.append(RRPacket,receptionReportBlocks);  return RRPacket;}  }
class C{  public Analyzer includeHypervolume(){  includeHypervolume=true;  return this;}  }
class C{  public boolean isBounded(){  return cuboid.isFinite();}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public BootstrapService(final String username,final String password){  this.username=username;  this.password=password;  this.apiKey=null;}  }
class C{  public static VisitorData newVisitor(){  int visitorId=new SecureRandom().nextInt() & 0x7FFFFFFF;  long now=now();  return new VisitorData(visitorId,now,now,now,1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CASE_CLAUSE__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void contributeToSymbols(ChooseByNameContributor contributor){  myGotoSymbolContributors.add(contributor);}  }
class C{  public int length(){  int m=maxLength >> ADDRESS_BITS;  while (m > 0 && data[m] == 0) {    m--;  }  maxLength=(m << ADDRESS_BITS) + (64 - Long.numberOfLeadingZeros(data[m]));  return maxLength;}  }
class C{  private void refresh(){  String sql=m_sql;  int pos=m_sql.lastIndexOf(" ORDER BY ");  if (!showAll.isChecked()) {    sql=m_sql.substring(0,pos) + m_sqlNonZero;    if (m_sqlMinLife.length() > 0)     sql+=m_sqlMinLife;    sql+=m_sql.substring(pos);  }  log.finest(sql);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (m_M_Warehouse_ID != 0)     pstmt.setInt(2,m_M_Warehouse_ID);    rs=pstmt.executeQuery();    m_table.loadTable(rs);  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  enableButtons();}  }
class C{  @Override public void close(){  CloseableReference.closeSafely(mPooledByteBufferRef);}  }
class C{  public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){  tableLockMap.remove(absoluteTableIdentifier);  tableBlocksMap.remove(absoluteTableIdentifier);}  }
class C{  public static boolean useEMCForceFlag(DbClient _dbClient,URI blockObjectURI){  boolean forceFlag=false;  BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,blockObjectURI);  if (bo != null && BlockObject.checkForRP(_dbClient,bo.getId())) {    forceFlag=true;  }  return forceFlag;}  }
class C{  private int handleGH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && !isVowel(charAt(value,index - 1))) {    result.append('K');    index+=2;  } else   if (index == 0) {    if (charAt(value,index + 2) == 'I') {      result.append('J');    } else {      result.append('K');    }    index+=2;  } else   if ((index > 1 && contains(value,index - 2,1,"B","H","D")) || (index > 2 && contains(value,index - 3,1,"B","H","D")) || (index > 3 && contains(value,index - 4,1,"B","H"))) {    index+=2;  } else {    if (index > 2 && charAt(value,index - 1) == 'U' && contains(value,index - 3,1,"C","G","L","R","T")) {      result.append('F');    } else     if (index > 0 && charAt(value,index - 1) != 'I') {      result.append('K');    }    index+=2;  }  return index;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.156 -0500",hash_original_method="BA9D4031BD488C1D379B1950A362F8D4",hash_generated_method="4894634EDDCA3FC9A62B97AC03EE312F") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchKeyShortcutEvent(KeyEvent event){  if (mWindow.superDispatchKeyShortcutEvent(event)) {    return true;  }  return onKeyShortcut(event.getKeyCode(),event);}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  JMenuItem preferences=new JMenuItem("Preferences...");  editMenu.add(preferences);  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/histogram.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  public void remove(int index){  m_List.remove(index);}  }
class C{  public boolean isDescription(){  Object oo=get_Value(COLUMNNAME_IsDescription);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static IdealState buildIdealStateForHdfsDir(DFSClient hdfsClient,String hdfsDir,String resourceName,PartitionerType partitioner,int numReplicas,boolean enableZkCompression) throws ControllerException {  List<HdfsFileStatus> fileList;  try {    fileList=TerrapinUtil.getHdfsFileList(hdfsClient,hdfsDir);  } catch (  IOException e) {    throw new ControllerException("Exception while listing files in " + hdfsDir,ControllerErrorCode.HDFS_ERROR);  }  Map<Integer,Set<String>> hdfsBlockMapping=Maps.newHashMapWithExpectedSize(fileList.size());  for (  HdfsFileStatus fileStatus : fileList) {    Integer partitionName=TerrapinUtil.extractPartitionName(fileStatus.getLocalName(),partitioner);    if (partitionName == null) {      LOG.info("Skipping " + fileStatus.getLocalName() + " for "+ hdfsDir);      continue;    }    String fullName=fileStatus.getFullName(hdfsDir);    BlockLocation[] locations=null;    try {      locations=hdfsClient.getBlockLocations(fullName,0,fileStatus.getLen());    } catch (    Exception e) {      throw new ControllerException("Exception while getting block locations " + e.getMessage(),ControllerErrorCode.HDFS_ERROR);    }    Set<String> instanceSet=Sets.newHashSetWithExpectedSize(3);    BlockLocation firstLocation=locations[0];    String[] hosts=null;    try {      hosts=firstLocation.getHosts();    } catch (    IOException e) {      throw new ControllerException("Exception while getting hosts " + e.getMessage(),ControllerErrorCode.HDFS_ERROR);    }    for (    String host : hosts) {      instanceSet.add(host);    }    hdfsBlockMapping.put(partitionName,instanceSet);  }  int bucketSize=TerrapinUtil.getBucketSize(hdfsBlockMapping.size(),enableZkCompression);  CustomModeISBuilder idealStateBuilder=new CustomModeISBuilder(resourceName);  for (  Map.Entry<Integer,Set<String>> mapping : hdfsBlockMapping.entrySet()) {    String partitionName=null;    if (bucketSize > 0) {      partitionName=resourceName + "_" + mapping.getKey();    } else {      partitionName=resourceName + "$" + mapping.getKey();    }    Set<String> instanceSet=mapping.getValue();    for (    String instance : instanceSet) {      idealStateBuilder.assignInstanceAndState(partitionName,TerrapinUtil.getHelixInstanceFromHDFSHost(instance),"ONLINE");    }  }  idealStateBuilder.setStateModel("OnlineOffline");  idealStateBuilder.setNumReplica(numReplicas);  idealStateBuilder.setNumPartitions(hdfsBlockMapping.size());  IdealState is=idealStateBuilder.build();  if (bucketSize > 0) {    is.setBucketSize(bucketSize);  }  is.setRebalanceMode(IdealState.RebalanceMode.CUSTOMIZED);  if (enableZkCompression) {    TerrapinUtil.compressIdealState(is);  }  return is;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.259 -0500",hash_original_method="B2A0BAE23B24F963FF842B8EAAF5D840",hash_generated_method="8291981AB63407AE29C5D4C7916DDECA") public boolean wpsKeypadSupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_KEYPAD) != 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public List<ReferenceType> findClassesByName(String name) throws NoSessionException {  ensureActiveSession();  return vm().classesByName(name);}  }
class C{  private boolean isValidUserGroup(ValidationFailureReason[] failureReason,String group){  List<UserGroup> objectList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,UserGroup.class,PrefixConstraint.Factory.getFullMatchConstraint(UserGroup.class,"label",group));  if (CollectionUtils.isEmpty(objectList)) {    _log.error("UserGroup {} is not present in DB",group);    failureReason[0]=ValidationFailureReason.USER_OR_GROUP_NOT_FOUND_FOR_TENANT;    return false;  } else {    _log.debug("UserGroup {} is valid",group);    return true;  }}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public BivariateDiscreteDiffusionModel(Parameter graphRate,int xDim,int yDim,double[] eVal,double[][] eVec){  super();  this.graphRate=graphRate;  this.xDim=xDim;  this.yDim=yDim;  this.totalDim=xDim * yDim;  this.eVal=eVal;  this.eVec=eVec;  addVariable(graphRate);  System.err.println("TEST00 = " + getCTMCProbability(0,0,0.0));  System.err.println("TEST01 = " + getCTMCProbability(0,1,0.0));}  }
class C{  public String format(final LogEvent event){  final String message=event.getMessage();  if (null == message) {    return "";  } else {    return message;  }}  }
class C{  public static String format(String format,Object[] args){  StringBuilder answer=new StringBuilder(format.length() + (args.length * 20));  String[] argStrings=new String[args.length];  for (int i=0; i < args.length; ++i) {    if (args[i] == null)     argStrings[i]="<null>"; else     argStrings[i]=args[i].toString();  }  int lastI=0;  for (int i=format.indexOf('{',0); i >= 0; i=format.indexOf('{',lastI)) {    if (i != 0 && format.charAt(i - 1) == '\\') {      if (i != 1)       answer.append(format.substring(lastI,i - 1));      answer.append('{');      lastI=i + 1;    } else {      if (i > format.length() - 3) {        answer.append(format.substring(lastI,format.length()));        lastI=format.length();      } else {        int argnum=(byte)Character.digit(format.charAt(i + 1),10);        if (argnum < 0 || format.charAt(i + 2) != '}') {          answer.append(format.substring(lastI,i + 1));          lastI=i + 1;        } else {          answer.append(format.substring(lastI,i));          if (argnum >= argStrings.length)           answer.append("<missing argument>"); else           answer.append(argStrings[argnum]);          lastI=i + 3;        }      }    }  }  if (lastI < format.length())   answer.append(format.substring(lastI,format.length()));  return answer.toString();}  }
class C{  public Transform(Document doc,String algorithmURI) throws InvalidTransformException {  this(doc,algorithmURI,(NodeList)null);}  }
class C{  static public FunctionNode GT(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.GT,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public boolean hasMoreElements(){  prep();  return rootValue != null || otherValue != null || (subMapValues != null && subMapValues.hasMoreElements());}  }
class C{  @Deprecated @SuppressWarnings("static-method") public final boolean isEmbeddable(){  return true;}  }
class C{  void executeNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=n - 1; i >= 0; i--) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.startPrefixMapping(decl.getPrefix(),decl.getURI(),true);        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  @Override public TemporaryTopic createTemporaryTopic() throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.QUEUE_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION) {    throw new IllegalStateException("Cannot create temporary topic for javax.jms.QueueSession");  }  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createTemporaryTopic " + session);    }    TemporaryTopic temp=session.createTemporaryTopic();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdTemporaryTopic " + session + " temp="+ temp);    }    sf.addTemporaryTopic(temp);    return temp;  }  finally {    unlock();  }}  }
class C{  public Element store(Object o){  QuadOutputSignalHead p=(QuadOutputSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getGreen(),"green"));  element.addContent(addTurnoutElement(p.getYellow(),"yellow"));  element.addContent(addTurnoutElement(p.getRed(),"red"));  element.addContent(addTurnoutElement(p.getLunar(),"lunar"));  return element;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:11.468 -0400",hash_original_method="382ABFEB62D05869A6A7FF602B7E67FB",hash_generated_method="382ABFEB62D05869A6A7FF602B7E67FB") void stop(){  if (mRunning) {    mTriggerPercentage=0;    mFinishTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=false;    mParent.postInvalidate();  }}  }
class C{  public static void executeApiTask(ExecutorService executorService,BaseIngestionRequestContext requestContext,IngestStrategyFactory ingestStrategyFactory,UnManagedVolumeService unManagedVolumeService,DbClient dbClient,Map<String,TaskResourceRep> taskMap,TaskList taskList){  IngestVolumesExportedSchedulingThread schedulingThread=new IngestVolumesExportedSchedulingThread(requestContext,ingestStrategyFactory,unManagedVolumeService,dbClient,taskMap);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    String message="Failed to start unmanaged volume ingestion tasks...";    _logger.error(message,e);    for (    TaskResourceRep taskRep : taskList.getTaskList()) {      taskRep.setMessage(message);    }  }}  }
class C{  public RippleDrawableFroyo(@NonNull ColorStateList color,@Nullable Drawable content,@Nullable Drawable mask){  this(new RippleState(null,null,null),null);  if (color == null) {    throw new IllegalArgumentException("RippleDrawable requires a non-null color");  }  if (content != null) {    addLayer(content,null,0,0,0,0,0);  }  if (mask != null) {    addLayer(mask,null,R.id.carbon_mask,0,0,0,0);  }  background=content;  setColor(color);  ensurePadding();  refreshPadding();  updateLocalState();}  }
class C{  public final void println(long l) throws IOException {  print(l);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public void addAndComponent(final PlanLinkIdentifier delegate){  if (locked)   throw new IllegalStateException("cannot modify a " + getClass().getSimpleName() + " after its areLinked() method has been called");  this.andDelegates.add(delegate);}  }
class C{  public void testEquals(){  @SuppressWarnings("unchecked") List<Constructor<F>> constructors=(List)Arrays.asList(clazz.getDeclaredConstructors());  constructors=getCompatibleConstructors(constructors,defaultArgs);  Assert.assertFalse(String.format("Expected at least one constructor to match default args (%s), but found none.",Arrays.asList(defaultArgs)),constructors.isEmpty());  constructors=getCompatibleConstructors(constructors,alternateArgs);  Assert.assertEquals(String.format("Expected only one constructor to match default and alternative args, but found %d.",constructors.size()),1,constructors.size());  Constructor<F> constructor=constructors.get(0);  try {    EqualsTester tester=equalsTesterProvider.get();    for (int i=0; i <= alternateArgs.length; i++) {      Object[] args=getArgs(defaultArgs,alternateArgs,i);      tester.newEqualityGroup(constructor.newInstance(args),constructor.newInstance(args));    }    tester.testEquals();  } catch (  SecurityException e) {    Assert.fail("Could not access constructor for " + clazz + " with types: "+ Arrays.asList(constructor.getParameterTypes()));  }catch (  InstantiationException e) {    Assert.fail("Failed to create a new " + clazz + " instance: "+ e);  }catch (  IllegalAccessException e) {    Assert.fail("Failed to create a new " + clazz + " instance: "+ e);  }catch (  InvocationTargetException e) {    Assert.fail("Failed to create a new " + clazz + " instance: "+ e);  }}  }
class C{  private String truncateMessageForDB(String message){  if (message.length() > 4096) {    return message.substring(0,4090) + "...";  }  return message;}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int a;  float progress;  int range;  boolean blnTextOutput=false;  double z;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    range=(int)(image.getMaximumValue());    long[][] proportionData=new long[3][range + 1];    double[] proportion=new double[range + 1];    int cN, rN;    double zN;    boolean edge;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=image.getValue(row,col);        if (z > 0) {          a=(int)(z);          proportionData[0][a]++;          edge=false;          for (i=0; i < 8; i++) {            cN=col + dX[i];            rN=row + dY[i];            zN=image.getValue(rN,cN);            if (zN != z) {              edge=true;              break;            }          }          if (edge) {            proportionData[1][a]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (a=0; a <= range; a++) {      if (proportionData[1][a] > 1) {        proportion[a]=(double)proportionData[1][a] / proportionData[0][a];      }    }    double[] data=null;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col]);          output.setValue(row,col,proportion[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Edge Proportion\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (proportionData[1][a] > 0) {          retstr=retstr + "\n" + a+ "\t"+ df.format(proportion[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] args){  TestModifier tester=new TestModifier();  if (run(tester,ARGS,TEST,NEGATED_TEST) != 0) {    throw new Error("Javadoc error occured during execution.");  }}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public boolean isHole(){  return isHole;}  }
class C{  public static final double sigma(double a){  return 1.0 / (1.0 + Math.exp(-a));}  }
class C{  @Override public void connect(){  try {    Class.forName(databaseDriver).newInstance();    connection=DriverManager.getConnection(databaseUrl,connectionProperties);    logger.debug("JDBC connection Success");  } catch (  Throwable t) {    DTThrowable.rethrow(t);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  setStyle(s.readInt());  seg=new Segment();}  }
class C{  @Override public void end(){  GLU.gluTessEndContour(this.tess);}  }
class C{  public AvalonLogSystem(){}  }
class C{  public PipedOutputStream(PipedInputStream snk) throws IOException {  connect(snk);}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(stackTraceElementCompositeType,cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for StackTraceElement");  }}  }
class C{  public static void frustumM(float[] m,int offset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (top == bottom) {    throw new IllegalArgumentException("top == bottom");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  if (near <= 0.0f) {    throw new IllegalArgumentException("near <= 0.0f");  }  if (far <= 0.0f) {    throw new IllegalArgumentException("far <= 0.0f");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (near - far);  final float x=2.0f * (near * r_width);  final float y=2.0f * (near * r_height);  final float A=2.0f * ((right + left) * r_width);  final float B=(top + bottom) * r_height;  final float C=(far + near) * r_depth;  final float D=2.0f * (far * near * r_depth);  m[offset + 0]=x;  m[offset + 5]=y;  m[offset + 8]=A;  m[offset + 9]=B;  m[offset + 10]=C;  m[offset + 14]=D;  m[offset + 11]=-1.0f;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 15]=0.0f;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.349 -0500",hash_original_method="65CFF0B218928C469B4491A10DEABC8E",hash_generated_method="9C1308D1F4C5EFBDC70FFAD2FAA828F3") public BasicHeaderElementIterator(final HeaderIterator headerIterator,final HeaderValueParser parser){  if (headerIterator == null) {    throw new IllegalArgumentException("Header iterator may not be null");  }  if (parser == null) {    throw new IllegalArgumentException("Parser may not be null");  }  this.headerIt=headerIterator;  this.parser=parser;}  }
class C{  @ToString public String toString(){  return "PT" + String.valueOf(getValue()) + "S";}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public void testLegacyIntReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyIntField("value",300000,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_INTEGER));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("300000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double threshold=0;  double centreValue=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      threshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPointX) && (y != midPointY)) {              z=inputFile.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            if (Math.abs((centreValue - average) / stdDev) > threshold) {              outputFile.setValue(row,col,average);            } else {              outputFile.setValue(row,col,centreValue);            }          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.216 -0400",hash_original_method="29CF94A8D78D7A07450933C1FA54D781",hash_generated_method="456E4A0190C28AE89497DA7AB99F64EE") public void deactivateGLEnvironment(){  GLEnvironment glEnv=mContext.getGLEnvironment();  if (glEnv != null) {    mContext.getGLEnvironment().deactivate();  } else {    throw new NullPointerException("No GLEnvironment in place to deactivate!");  }}  }
class C{  public static Field makeFieldModifiable(String field,Class clazz) throws NoSuchFieldException, IllegalAccessException {  try {    Field fieldInstance=getField(field,clazz);    fieldInstance.setAccessible(true);    int modifiers=fieldInstance.getModifiers();    Field modifierField=fieldInstance.getClass().getDeclaredField("modifiers");    modifiers=modifiers & ~Modifier.FINAL;    modifierField.setAccessible(true);    modifierField.setInt(fieldInstance,modifiers);    return fieldInstance;  } catch (  NoSuchFieldException|IllegalAccessException e) {    LOGGER.error("Could not access field or set value to it",e);    throw e;  }}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("format=" + cudaResourceViewFormat.stringFor(format) + f);  sb.append("width=" + width + f);  sb.append("height=" + height + f);  sb.append("depth=" + depth + f);  sb.append("firstMipmapLevel=" + firstMipmapLevel + f);  sb.append("lastMipmapLevel=" + lastMipmapLevel + f);  sb.append("firstLayer=" + firstLayer + f);  sb.append("lastLayer=" + lastLayer + f);  return sb.toString();}  }
class C{  public static String readFileContents(IPath path) throws IOException {  File file=new File(path.toOSString());  return readFileContents(file);}  }
class C{  public Crop withWidth(int width){  cropIntent.putExtra(Extra.MAX_WIDTH,width);  return this;}  }
class C{  public static Map<String,Object> curryDelegateAndGetContent(Closure<?> c,Object o){  JsonDelegate delegate=new JsonDelegate();  Closure<?> curried=c.curry(o);  curried.setDelegate(delegate);  curried.setResolveStrategy(Closure.DELEGATE_FIRST);  curried.call();  return delegate.getContent();}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == 0) {    aTarget.appendJavaScript("alert('This is the first document!')");    return;  }  bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex - 1).getName());  bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex - 1));  loadDocumentAction(aTarget);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.192 -0500",hash_original_method="B19BAB1EEF674556A3A9CC47CD14FB0B",hash_generated_method="A4A93DB84096F87B82DB777B3CD75A12") private void updateVisitedHistory(String url,boolean isReload){  mCallbackProxy.doUpdateVisitedHistory(url,isReload);}  }
class C{  public void addParameter(DoubleParameter param,Distribution dist){  if (param == null)   throw new IllegalArgumentException("null not allowed for parameter");  searchParams.add(param);  searchValues.add(dist.clone());}  }
class C{  public static int abs(final int x){  final int i=x >>> 31;  return (x ^ (~i + 1)) + i;}  }
class C{  public void arrange(ArrayList<Integer> A){  int N=A.size();  for (int i=0; i < N; i++) {    int num=A.get(i);    int B=num;    int C=A.get(num);    if (C >= N) {      C=A.get(num) % N;    }    int encode=B + C * N;    A.set(i,encode);  }  for (int i=0; i < N; i++) {    A.set(i,A.get(i) / N);  }}  }
class C{  public long duration(){  return (endTime - startTime) / 1000;}  }
class C{  private Graphics2D createSVGGraphics2D(int w,int h){  try {    Class<?> svgGraphics2d=Class.forName("org.jfree.graphics2d.svg.SVGGraphics2D");    Constructor<?> ctor=svgGraphics2d.getConstructor(int.class,int.class);    return (Graphics2D)ctor.newInstance(w,h);  } catch (  ClassNotFoundException ex) {    return null;  }catch (  NoSuchMethodException ex) {    return null;  }catch (  SecurityException ex) {    return null;  }catch (  InstantiationException ex) {    return null;  }catch (  IllegalAccessException ex) {    return null;  }catch (  IllegalArgumentException ex) {    return null;  }catch (  InvocationTargetException ex) {    return null;  }}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  void update(final byte[] input){  md5.update(input);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  void registerAnimatedInternal(Animation cmp){  if (internalAnimatableComponents == null) {    internalAnimatableComponents=new ArrayList<Animation>();  }  if (!internalAnimatableComponents.contains(cmp)) {    internalAnimatableComponents.add(cmp);  }  Display.getInstance().notifyDisplay();}  }
class C{  private void initRasterProgram(){  glUseProgram(rasterProgram);  viewMatrixUniform=glGetUniformLocation(rasterProgram,"viewMatrix");  projectionMatrixUniform=glGetUniformLocation(rasterProgram,"projectionMatrix");  glUseProgram(0);}  }
class C{  int chunkSize(){  return mChunkSize;}  }
class C{  @Override public String toString(){  return ("epanechnikov(s=" + sigma + ",d="+ degree+ ")");}  }
class C{  public static byte[] toBytes(int data){  return new byte[]{(byte)((data >> 24) & 0xff),(byte)((data >> 16) & 0xff),(byte)((data >> 8) & 0xff),(byte)((data >> 0) & 0xff)};}  }
class C{  public void released(){  released(-1,-1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void removeGCTrace(){  int index=getSelectedRow();  if (index > -1) {    assert 0 <= index && index < gcTraceSet.size();    GCTrace gcTrace=gcTraceSet.findGCTrace(index);    gcTraceSet.remove(gcTrace.getName());    if (gcTraceSet.size() > 0) {      if (index < gcTraceSet.size()) {        setSelectedRow(index);      } else {        assert index == gcTraceSet.size();        setSelectedRow(index - 1);      }    }  }}  }
class C{  public String completeState(){  StringBuilder builder=new StringBuilder();  args.asMap().forEach(null);  return builder.toString();}  }
class C{  private static void validateFieldName(String fieldName){  if (fieldName == null) {    throw new NullPointerException("fieldName is null");  }  if (fieldName.length() == 0) {    throw new IllegalArgumentException("fieldName is empty");  }}  }
class C{  final public MutableString insert(final int index,final double d){  return insert(index,String.valueOf(d));}  }
class C{  private static int intValue(String key,Map<String,Object> params,int dfltVal) throws IgniteCheckedException {  assert key != null;  String val=(String)params.get(key);  try {    return val == null ? dfltVal : Integer.parseInt(val);  } catch (  NumberFormatException ignore) {    throw new IgniteCheckedException("Failed to parse parameter of Integer type [" + key + "="+ val+ "]");  }}  }
class C{  public void test4(){  final JPanel panel=new JPanel(new GridLayoutManager(3,1,new Insets(0,0,0,0),0,7));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn2,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(65,preferredSize.height);  } else {    assertEquals(47,preferredSize.height);  }  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @JsonCreator public ClockEntry(@JsonProperty("nodeId") short nodeId,@JsonProperty("version") long version){  if (nodeId < 0)   throw new IllegalArgumentException("Node id " + nodeId + " is not in the range (0, "+ Short.MAX_VALUE+ ").");  if (version < 1)   throw new IllegalArgumentException("Version " + version + " is not in the range (1, "+ Short.MAX_VALUE+ ").");  this.nodeId=nodeId;  this.version=version;}  }
class C{  public Boolean isCloseOnPowerOffOrSuspend(){  return closeOnPowerOffOrSuspend;}  }
class C{  public static void main(String[] args){  if (args.length != 9) {    throw new RuntimeException("Must provide 9 field arguments: filename, startLine, outputfolder and the field locations for VehId, Time, Long, Lat, Status and Speed.");  }  log.info("=================================================================");  log.info("  Splitting the DigiCore data file into seperate vehicle files.");  log.info("=================================================================");  DigicoreFileSplitter dfs=new DigicoreFileSplitter(args[0],args[1],Long.parseLong(args[2]));  dfs.split(Integer.parseInt(args[3]),Integer.parseInt(args[4]),Integer.parseInt(args[5]),Integer.parseInt(args[6]),Integer.parseInt(args[7]),Integer.parseInt(args[8]));  GregorianCalendar first=new GregorianCalendar(TimeZone.getTimeZone("GMT+02"),Locale.ENGLISH);  first.setTimeInMillis(dfs.getEarliestTimestamp() * 1000);  GregorianCalendar last=new GregorianCalendar(TimeZone.getTimeZone("GMT+02"),Locale.ENGLISH);  last.setTimeInMillis(dfs.getLatestTimestamp() * 1000);  log.info("-----------------------------------------------------------------");  log.info("   Process complete.");  log.info("-----------------------------------------------------------------");  log.info("   Earliest date parsed: " + dfs.calendarToString(first));  log.info("     Latest date parsed: " + dfs.calendarToString(last));  log.info("=================================================================");}  }
class C{  public static Complex ComplexFromPolar(double r,double phi){  return new Complex(r * Math.cos(phi),r * Math.sin(phi));}  }
class C{  @After public void cleanEnv() throws IOException {  try {    FileUtils.deleteDirectory(localTempPath.toFile());    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();    s3FileTransferRequestParamsDto.setS3KeyPrefix(testS3KeyPrefix);    s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);  } catch (  Exception ex) {    LOGGER.warn("Unable to cleanup environment.",ex);  }}  }
class C{  public void query(String structuredQuery) throws IOException, ServiceException {  RecordQuery query=new RecordQuery(recordsFeedUrl);  query.setSpreadsheetQuery(structuredQuery);  RecordFeed feed=service.query(query,RecordFeed.class);  out.println("Results for [" + structuredQuery + "]");  for (  RecordEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  public EaseOut(){}  }
class C{  public void engineSetProperty(String key,String value){  if (properties == null) {    properties=new HashMap<String,String>();  }  properties.put(key,value);}  }
class C{  public static Boolean evaluate(boolean defaultValue,List<Pair<StringPatternSet,Boolean>> patterns,String literal){  boolean result=defaultValue;  for (  Pair<StringPatternSet,Boolean> item : patterns) {    if (result) {      if (!item.getSecond()) {        boolean testResult=item.getFirst().match(literal);        if (testResult) {          result=false;        }      }    } else {      if (item.getSecond()) {        boolean testResult=item.getFirst().match(literal);        if (testResult) {          result=true;        }      }    }  }  return result;}  }
class C{  public Distribution(double[] values){  addAll(values);}  }
class C{  public void testDurableTopicRollbackMarksMessageRedelivered() throws JMSException {  connection.setClientID(getName());  connection.start();  Session session=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  Topic topic=session.createTopic("topic-" + getName());  MessageConsumer consumer=session.createDurableSubscriber(topic,"sub1");  MessageProducer producer=createProducer(session,topic);  producer.send(createTextMessage(session));  session.commit();  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.rollback();  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  session.commit();  session.close();}  }
class C{  private void newline(Writer out) throws IOException {  out.write(lineSeparator);}  }
class C{  private boolean puedeSerEnviada(PrevisionVO prevision){  boolean puedeSerEnviada=false;  if (prevision.getEstado() == EstadoPrevision.ABIERTA.getIdentificador()) {    if (prevision.isDetallada()) {      if (numeroDetallesPrevision(prevision.getId()) > 0)       puedeSerEnviada=true; else       errorCode=ArchivoErrorCodes.PREVISION_DETALLADA_SIN_DETALLES;    } else     puedeSerEnviada=true;  } else   errorCode=ArchivoErrorCodes.PREVISION_NO_ABIERTA;  return puedeSerEnviada;}  }
class C{  private void updateCrc(Buffer buffer,long offset,long byteCount){  Segment s=buffer.head;  for (; offset >= (s.limit - s.pos); s=s.next) {    offset-=(s.limit - s.pos);  }  for (; byteCount > 0; s=s.next) {    int pos=(int)(s.pos + offset);    int toUpdate=(int)Math.min(s.limit - pos,byteCount);    crc.update(s.data,pos,toUpdate);    byteCount-=toUpdate;    offset=0;  }}  }
class C{  public static List<String> parseArguments(String functionCall) throws FBSQLParseException {  functionCall=functionCall.trim();  checkSyntax(functionCall);  final int parenthesisStart=functionCall.indexOf('(');  if (parenthesisStart == -1) {    return Collections.emptyList();  }  final String paramsString=functionCall.substring(parenthesisStart + 1,functionCall.length() - 1);  final List<String> params=new ArrayList<String>();  final StringBuilder sb=new StringBuilder();  boolean inQuotes=false;  boolean inDoubleQuotes=false;  boolean coalesceSpace=true;  int nestedParentheses=0;  for (int i=0, n=paramsString.length(); i < n; i++) {    char currentChar=paramsString.charAt(i);    if (Character.isWhitespace(currentChar)) {      if (inQuotes || inDoubleQuotes) {        sb.append(currentChar);      } else       if (!coalesceSpace) {        sb.append(' ');        coalesceSpace=true;      }      continue;    }switch (currentChar) {case '\'':      sb.append(currentChar);    if (!inDoubleQuotes)     inQuotes=!inQuotes;  coalesceSpace=false;break;case '"':sb.append(currentChar);if (!inQuotes) inDoubleQuotes=!inDoubleQuotes;coalesceSpace=false;break;case '(':if (!(inQuotes || inDoubleQuotes)) {nestedParentheses++;}sb.append('(');coalesceSpace=false;break;case ')':if (!(inQuotes || inDoubleQuotes)) {nestedParentheses--;if (nestedParentheses < 0) {throw new FBSQLParseException("Unbalanced parentheses in parameters at position " + i);}}sb.append(')');coalesceSpace=false;break;case ',':if (inQuotes || inDoubleQuotes || nestedParentheses > 0) {sb.append(currentChar);} else {params.add(sb.toString());sb.setLength(0);coalesceSpace=true;}break;default :sb.append(currentChar);coalesceSpace=false;}}if (sb.length() > 0) params.add(sb.toString());if (inQuotes || inDoubleQuotes) {throw new FBSQLParseException("String literal is not properly closed.");}if (nestedParentheses != 0) {throw new FBSQLParseException("Unbalanced parentheses in parameters.");}return params;}  }
class C{  public static void validateExperimentalMode(){  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress");}  }
class C{  public static Test suite(){  return (new TestSuite(ConverterTagTestCase.class));}  }
class C{  private boolean putSource(int swfIndex,int moduleId,int bitmap,String name,String text,int isolateId){  Map<Integer,DModule> source=getIsolateState(isolateId).m_source;synchronized (source) {    if (!source.containsKey(moduleId)) {      DModule s=new DModule(this,moduleId,bitmap,name,text,isolateId);      source.put(moduleId,s);      DSwfInfo swf;      if (swfIndex == -1)       swf=getActiveSwfInfo(isolateId); else       swf=getOrCreateSwfInfo(swfIndex,isolateId);      swf.addSource(moduleId,s);      return true;    }    return false;  }}  }
class C{  public static Geometry combine(Collection geoms){  GeometryCombiner combiner=new GeometryCombiner(geoms);  return combiner.combine();}  }
class C{  public static void UF7(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 0) {      sum2+=yj * yj;      count2++;    } else {      sum1+=yj * yj;      count1++;    }  }  yj=Math.pow(x[0],0.2);  f[0]=yj + 2.0 * sum1 / (double)count1;  f[1]=1.0 - yj + 2.0 * sum2 / (double)count2;}  }
class C{  CopticDate(int prolepticYear,int month,int dayOfMonth){  CopticChronology.MOY_RANGE.checkValidValue(month,MONTH_OF_YEAR);  ValueRange range;  if (month == 13) {    range=CopticChronology.INSTANCE.isLeapYear(prolepticYear) ? CopticChronology.DOM_RANGE_LEAP : CopticChronology.DOM_RANGE_NONLEAP;  } else {    range=CopticChronology.DOM_RANGE;  }  range.checkValidValue(dayOfMonth,DAY_OF_MONTH);  this.prolepticYear=prolepticYear;  this.month=(short)month;  this.day=(short)dayOfMonth;}  }
class C{  Item newItfMethod(final String ownerItf,final String name,final String desc){  key3.set(IMETH,ownerItf,name,desc);  Item result=get(key3);  if (result == null) {    put122(IMETH,newClass(ownerItf).index,newNameType(name,desc).index);    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void putString(String key,String value){  map.put(key,value);}  }
class C{  public final synchronized void newGame(GameMode gameMode,TimeControlData tcData){  boolean updateGui=abortSearch();  if (updateGui)   updateGUI();  this.gameMode=gameMode;  if (computerPlayer == null) {    computerPlayer=new DroidComputerPlayer(gui.getContext(),listener);    computerPlayer.setBookOptions(bookOptions);    computerPlayer.setEngineOptions(engineOptions);  }  computerPlayer.queueStartEngine(searchId,engine);  searchId++;  game=new Game(gameTextListener,tcData);  computerPlayer.uciNewGame();  setPlayerNames(game);  updateGameMode();}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public AboutDialog(){  initComponents();}  }
class C{  public FrameworkException(String message,Throwable cause){  super(message,cause);}  }
class C{  private Map<Double,Map<Id<Link>,Double>> convertMapToDoubleValues(Map<Double,Map<Id<Link>,Integer>> time2Counts1){  Map<Double,Map<Id<Link>,Double>> mapOfDoubleValues=new HashMap<>();  for (  Double endOfTimeInterval : time2Counts1.keySet()) {    Map<Id<Link>,Integer> linkId2Value=time2Counts1.get(endOfTimeInterval);    Map<Id<Link>,Double> linkId2DoubleValue=new HashMap<>();    for (    Id<Link> linkId : linkId2Value.keySet()) {      int intValue=linkId2Value.get(linkId);      double doubleValue=intValue;      double linkLength_km=this.scenario.getNetwork().getLinks().get(linkId).getLength() / 1000.;      double vehicleKm=doubleValue * linkLength_km;      linkId2DoubleValue.put(linkId,vehicleKm);    }    mapOfDoubleValues.put(endOfTimeInterval,linkId2DoubleValue);  }  return mapOfDoubleValues;}  }
class C{  public boolean hasSubtypes(ClassDescriptor classDescriptor) throws ClassNotFoundException {  Set<ClassDescriptor> subtypes=getDirectSubtypes(classDescriptor);  if (DEBUG) {    System.out.println("Direct subtypes of " + classDescriptor + " are "+ subtypes);  }  return !subtypes.isEmpty();}  }
class C{  public static <T>String[] toStringArray(Sequence<T> sequence){  String[] tokens=new String[sequence.size()];  for (int i=0, sz=sequence.size(); i < sz; ++i)   tokens[i]=sequence.get(i).toString();  return tokens;}  }
class C{  public static double sqrt(long n){  long lastGuess=1;  long nextGuess=(lastGuess + n / lastGuess) / 2;  while (nextGuess - lastGuess > 0.0001) {    lastGuess=nextGuess;    nextGuess=(lastGuess + n / lastGuess) / 2;  }  lastGuess=nextGuess;  return nextGuess=(lastGuess + n / lastGuess) / 2;}  }
class C{  public void addProperty(String property,Character value){  add(property,createJsonElement(value));}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public BadLocationException(String message){  super(message);}  }
class C{  public Action chooseAction(Map<Direction,Occupant> neighbors){  List<Direction> empties=getNeighborsOfType(neighbors,"empty");  if (empties.size() == 1) {    Direction moveDir=empties.get(0);    return new Action(Action.ActionType.MOVE,moveDir);  }  if (empties.size() > 1) {    if (HugLifeUtils.random() < moveProbability) {      Direction moveDir=HugLifeUtils.randomEntry(empties);      return new Action(Action.ActionType.MOVE,moveDir);    }  }  return new Action(Action.ActionType.STAY);}  }
class C{  public static final Criterion bodyContains(String value){  return new TextCriterion(value,Scope.BODY);}  }
class C{  public void disconnected(){  m_isHalted=false;  m_isConnected=false;  m_manager.disconnected();}  }
class C{  public static void addNewMapping(final Class<?> type,final String property,final String mapping){  if (allowedColmns.get(type) == null) {    allowedColmns.put(type,new HashMap<String,String>());  }  allowedColmns.get(type).put(property,mapping);}  }
class C{  public static void severe(final String message,final Object... objects){  NaviLogger.severe(message,objects);}  }
class C{  private static List<SiteVerificationWebResourceResource> listOwnedSites(SiteVerification siteVerification) throws IOException {  SiteVerification.WebResource.List listRequest=siteVerification.webResource().list();  SiteVerificationWebResourceListResponse listResponse=listRequest.execute();  return listResponse.getItems();}  }
class C{  public static List<? extends SearchResult> crawlTorrent(SearchPerformer performer,TorrentCrawlableSearchResult sr,byte[] data,boolean detectAlbums){  List<TorrentCrawledSearchResult> list=new LinkedList<TorrentCrawledSearchResult>();  if (data == null) {    return list;  }  TorrentInfo ti=null;  try {    ti=TorrentInfo.bdecode(data);  } catch (  Throwable t) {    LOG.error("Can't bdecode:\n" + new String(data) + "\n\n");    throw t;  }  int numFiles=ti.numFiles();  FileStorage fs=ti.files();  for (int i=0; !performer.isStopped() && i < numFiles; i++) {    if (fs.padFileAt(i)) {      continue;    }    list.add(new TorrentCrawledSearchResult(sr,ti,i,fs.filePath(i),fs.fileSize(i)));  }  if (detectAlbums) {    List<SearchResult> temp=new LinkedList<SearchResult>();    temp.addAll(list);    temp.addAll(new AlbumCluster().detect(sr,list));    return temp;  } else {    return list;  }}  }
class C{  private void initUnconfirmedTab(){  if (m_modelUnconfirmed != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"MovementQty"));  columnNames.add(Msg.translate(Env.getCtx(),"MovementDate"));  columnNames.add(Msg.translate(Env.getCtx(),"IsSOTrx"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  String sql=null;  int parameter=0;  if (m_C_BPartner_ID == 0) {    sql="SELECT bp.Name," + " CASE WHEN io.IsSOTrx='Y' THEN iol.MovementQty*-1 ELSE iol.MovementQty END AS MovementQty," + " io.MovementDate,io.IsSOTrx,"+ " dt.PrintName || ' ' || io.DocumentNo As DocumentNo,"+ " w.Name "+ "FROM M_InOutLine iol"+ " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)"+ " INNER JOIN C_BPartner bp  ON (io.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN C_DocType dt ON (io.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (io.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_InOutLineConfirm lc ON (iol.M_InOutLine_ID=lc.M_InOutLine_ID) "+ "WHERE iol.M_Product_ID=?"+ " AND lc.Processed='N' "+ "ORDER BY io.MovementDate,io.IsSOTrx";    parameter=m_M_Product_ID;  } else {    sql="SELECT p.Name," + " CASE WHEN io.IsSOTrx='Y' THEN iol.MovementQty*-1 ELSE iol.MovementQty END AS MovementQty," + " io.MovementDate,io.IsSOTrx,"+ " dt.PrintName || ' ' || io.DocumentNo As DocumentNo,"+ " w.Name "+ "FROM M_InOutLine iol"+ " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)"+ " INNER JOIN M_Product p  ON (iol.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN C_DocType dt ON (io.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (io.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_InOutLineConfirm lc ON (iol.M_InOutLine_ID=lc.M_InOutLine_ID) "+ "WHERE io.C_BPartner_ID=?"+ " AND lc.Processed='N' "+ "ORDER BY io.MovementDate,io.IsSOTrx";    parameter=m_C_BPartner_ID;  }  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,parameter);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(6);      line.add(rs.getString(1));      line.add(new Double(rs.getDouble(2)));      line.add(rs.getTimestamp(3));      line.add(new Boolean("Y".equals(rs.getString(4))));      line.add(rs.getString(5));      line.add(rs.getString(6));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("#" + data.size());  m_modelUnconfirmed=new ListModelTable(data);  m_tableUnconfirmed.setData(m_modelUnconfirmed,columnNames);  m_tableUnconfirmed.setColumnClass(0,String.class,true);  m_tableUnconfirmed.setColumnClass(1,Double.class,true);  m_tableUnconfirmed.setColumnClass(2,Timestamp.class,true);  m_tableUnconfirmed.setColumnClass(3,Boolean.class,true);  m_tableUnconfirmed.setColumnClass(4,String.class,true);  m_tableUnconfirmed.autoSize();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mAddButton=(ImageButton)findViewById(R.id.addButton);  mContactAddressMapper=new ContactAddressMapper(this);}  }
class C{  public FilteredExperienceDelayHandler(final Scenario scenario,final int noOfTimeBins,final String userGroup,final PersonFilter personFilter){  this(scenario,noOfTimeBins,userGroup,personFilter,null);  LOGGER.info("Usergroup filtering is used, result will include all links but persons from given user group only.");}  }
class C{  public void scheduleCommitWithin(long commitMaxTime){  _scheduleCommitWithin(commitMaxTime);}  }
class C{  private int findAppIndex(String appName){  int index=-1;  for (int i=0; i < appUsages.size(); i++) {    if (appUsages.get(i).getAppName().equals(appName)) {      index=i;    }  }  return index;}  }
class C{  public void createPictScenario09() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  String supplierAdminId="Pict09Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict09SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict09Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC09Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC09CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_PERUNIT_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT09_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate);  VOServiceDetails serviceDetails=serviceSetup.activateMarketableService(unitServTemplate);  VOServiceDetails serviceFreeDetails=serviceSetup.activateMarketableService(freeTemplate);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_09",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 13:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetailsOld=subDetails;  subDetails.setSubscriptionId("PICT_TEST_09" + "_SubID2");  subDetails=subscrSetup.modifySubscription(subDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 14:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetailsOld);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:10:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:20:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:30:00"));  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:40:00"));  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:41:00"),"FILE_DOWNLOAD",100);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:42:00"),"FILE_UPLOAD",100);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 11:59:58"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 11:59:59"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 14:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 15:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails2);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:05:00"),"FILE_DOWNLOAD",100);  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:06:00"),"FILE_UPLOAD",100);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 16:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-10 10:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_09",customer);}  }
class C{  protected int[] colorInscribedDataCircleFromYuvImage(ImageProxy img,int subsample){  Rect defaultCrop=new Rect(0,0,img.getWidth(),img.getHeight());  return colorInscribedDataCircleFromYuvImage(img,defaultCrop,subsample);}  }
class C{  public synchronized boolean add(Object obj){  throw new UnsupportedOperationException("add(Object) not supported, try add(Object key, Object obj) instead");}  }
class C{  private void actionRead(boolean binary) throws PageException {  if (variable == null)   throw new ApplicationException("attribute variable is not defined for tag file");  checkFile(pageContext,securityManager,file,serverPassword,false,false,true,false);  boolean hasCached=cachedWithin != null;  if (StringUtil.isEmpty(cachedWithin)) {    Object tmp=((PageContextImpl)pageContext).getCachedWithin(ConfigWeb.CACHEDWITHIN_HTTP);    if (tmp != null)     setCachedwithin(tmp);  }  if (hasCached) {    CacheHandler ch=pageContext.getConfig().getCacheHandlerCollection(Config.CACHE_TYPE_FILE,null).getInstanceMatchingObject(cachedWithin,null);    CacheItem ci=ch != null ? ch.get(pageContext,createId(binary)) : null;    if (ci instanceof FileCacheItem) {      pageContext.setVariable(variable,((FileCacheItem)ci).getData());      return;    }  }  try {    long start=System.nanoTime();    Object data=binary ? IOUtil.toBytes(file) : IOUtil.toString(file,CharsetUtil.toCharset(charset));    pageContext.setVariable(variable,data);    if (cachedWithin != null) {      String id=createId(binary);      CacheHandler ch=pageContext.getConfig().getCacheHandlerCollection(Config.CACHE_TYPE_FILE,null).getInstanceMatchingObject(cachedWithin,null);      if (ch != null)       ch.set(pageContext,id,cachedWithin,FileCacheItem.getInstance(file.getAbsolutePath(),data,System.nanoTime() - start));    }  } catch (  IOException e) {    throw new ApplicationException("can't read file [" + file.toString() + "]",e.getMessage());  }}  }
class C{  public NettyWSTransport(URI remoteLocation,NettyTransportOptions options){  this(null,remoteLocation,options);}  }
class C{  public base addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected static boolean id_char(int ch){  return id_start_char(ch) || (ch >= '0' && ch <= '9');}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public BigDecimalPolynomial mult(BigIntPolynomial poly2){  return mult(new BigDecimalPolynomial(poly2));}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public XMLDocument(double version,boolean standalone){  prolog=new Vector<Object>(2);  StringBuffer versionStr=new StringBuffer();  versionStr.append("<?xml version=\"");  versionStr.append(version);  versionStr.append("\" standalone=\"");  if (standalone)   versionStr.append("yes\"?>"); else   versionStr.append("no\"?>\n");  this.versionDecl=versionStr.toString();}  }
class C{  public void rollback(URI taskId){  client.postURI(String.class,client.uriBuilder(getIdUrl() + "/rollback").build(taskId));}  }
class C{  public ConditionIn(Database database,Expression left,ArrayList<Expression> values){  this.database=database;  this.left=left;  this.valueList=values;}  }
class C{  public Builder withTerm(long term){  response.term=Assert.argNot(term,term < 0,"term cannot be negative");  return this;}  }
class C{  private static void rotate(int first,int middle,int last,Swapper swapper){  if (middle != first && middle != last) {    reverse(first,middle,swapper);    reverse(middle,last,swapper);    reverse(first,last,swapper);  }}  }
