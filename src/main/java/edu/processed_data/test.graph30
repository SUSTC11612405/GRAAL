class C{  public static Element addChildElementCDATAValue(Element element,String childElementName,String childElementValue,Document document){  Element newElement=addChildElement(element,childElementName,document);  newElement.appendChild(document.createCDATASection(childElementValue));  return newElement;}  }
class C{  private boolean allowedAsHttpRequestResponse(WellKnownType wkt){  return wkt.allowedAsHttpRequestResponse();}  }
class C{  public void shutdown(boolean isDestroy,boolean shutdowContainer) throws RemoteException {  if (_spaceState.isAborted()) {    _logger.fine("Shutdown already in progress...");    return;  }  int previousState=_spaceState.getState();  _spaceState.setState(ISpaceState.ABORTING);  Level logLevel=isPrivate() ? Level.FINE : Level.INFO;  _logger.log(logLevel,"Beginning shutdown...");  beforeShutdown();  if (isDestroy)   destroy(); else   if (previousState != ISpaceState.STOPPED)   stopInternal();  _spaceState.setState(ISpaceState.ABORTED);  if (_logger.isLoggable(Level.FINE))   _logger.fine("Life cycle is " + getLifeCycle());  if (getLifeCycle() != null)   getLifeCycle().unregister(SpaceImpl.this);  if (shutdowContainer && _container != null)   _container.shutdownInternal();  unregister();  if (_qp != null)   _qp.close();  if (_embeddedProxy != null)   _embeddedProxy.close();  if (_clusteredProxy != null)   _clusteredProxy.close();  if (_taskProxy != null)   _taskProxy.close();  if (_customProperties != null)   _customProperties.clear();  if (_jspaceAttr != null)   _jspaceAttr.clear();  _logger.log(logLevel,"Shutdown complete");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME_30(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400203,durationtime0);}  }
class C{  public List<T> toList(){  @SuppressWarnings("unchecked") T[] copiedElements=(T[])new Object[numElements];  System.arraycopy(elements,0,copiedElements,0,numElements);  return Arrays.asList(copiedElements);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_CANT_UNEQUIP_STONE_FOR_AFTERSKILL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400214,value0,value1);}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    json=json.trim();    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200478,skillcaster,skilltarget,skillname);}  }
class C{  public GraphSimilarityComparatorAdapter(){}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  protected String millisecondsToYearMonth(long millis){  return getSimpleDateFormatForMilliseconds("yyyy-MM",millis);}  }
class C{  public static <T>Type<T> limitedValueOf(final java.lang.reflect.Type type,final Set<java.lang.reflect.Type> recursiveBounds){  if (type instanceof Type) {    return (Type<T>)type;  } else   if (type instanceof ParameterizedType) {    return limitedValueOf((ParameterizedType)type,recursiveBounds);  } else   if (type instanceof Class) {    return limitedValueOf((Class<T>)type,recursiveBounds,new java.lang.reflect.Type[0]);  } else   if (type instanceof TypeVariable) {    return limitedValueOf((TypeVariable<?>)type,recursiveBounds);  } else   if (type instanceof WildcardType) {    return limitedValueOf((WildcardType)type,recursiveBounds);  } else {    throw new IllegalArgumentException(type + " is an unsupported type");  }}  }
class C{  public void testBoundaryEventSubscriptionDeletedOnDeploymentDelete(){  String deploymentId=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKey("messageTest");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKey("messageTest");  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId,true);  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId2,true);  assertEquals(0,getAllEventSubscriptions().size());}  }
class C{  public AdsGetSuggestionsQuery(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){  super(client,"ads.getSuggestions",Utils.buildParametrizedType(List.class,TargSuggestions.class));  accessToken(actor.getAccessToken());  section(section);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_REQUESTED(String datetime0){  return new SM_SYSTEM_MESSAGE(1300303,datetime0);}  }
class C{  public SerialMessage removeAssociationMessage(int group,int node){  logger.debug("NODE {}: Creating new message for application command ASSOCIATIONCMD_REMOVE group={}, node={}",getNode().getNodeId(),group,node);  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Config);  ByteArrayOutputStream outputData=new ByteArrayOutputStream();  outputData.write(this.getNode().getNodeId());  outputData.write(4);  outputData.write(getCommandClass().getKey());  outputData.write(ASSOCIATIONCMD_REMOVE);  outputData.write(group);  outputData.write(node);  result.setMessagePayload(outputData.toByteArray());  return result;}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public static void root(@NotNull ScopedOperation scopedOperation){  push(null,scopedOperation);}  }
class C{  public static boolean isYear(String s){  if (isEmpty(s))   return defaultEmptyOK;  if (!isNonnegativeInteger(s))   return false;  return ((s.length() == 2) || (s.length() == 4));}  }
class C{  public int remove(K key){  int prev=(int)0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GLORY_POINT_LOSE_COMMON(int num0){  return new SM_SYSTEM_MESSAGE(1402219,num0);}  }
class C{  private void checkCreateTemplate(String category,String name,boolean createWithProject) throws Exception {  if (DISABLED) {    return;  }  File templateFile=findTemplate(category,name);  assertNotNull(templateFile);  if (haveChecked(templateFile,createWithProject)) {    return;  }  if (KNOWN_BROKEN.contains(templateFile.getName())) {    return;  }  markChecked(templateFile,createWithProject);  Stopwatch stopwatch=Stopwatch.createStarted();  checkTemplate(templateFile,createWithProject);  stopwatch.stop();  System.out.println("Checked " + templateFile.getName() + " successfully in "+ stopwatch.toString());}  }
class C{  private static boolean isSameTreePath(TreePath tp1,TreePath tp2){  if ((tp1 == null) || (tp2 == null)) {    return false;  }  return (tp1.toString().compareTo(tp2.toString()) == 0);}  }
class C{  public void loadData(List<ScaleSLDData> dataList){  scaleList=dataList;  this.fireTableDataChanged();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void logLowPrioritySearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchLowPrioritySearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public UsersGetSubscriptionsQueryWithExtended userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private void editFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof BodyFixture) {      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();      SandboxBody body=(SandboxBody)parent.getUserObject();      BodyFixture fixture=(BodyFixture)node.getUserObject();synchronized (Simulation.LOCK) {        Convex convex=fixture.getShape();        Image icon;        if (convex instanceof Circle) {          icon=Icons.EDIT_CIRCLE.getImage();        } else         if (convex instanceof Rectangle) {          icon=Icons.EDIT_RECTANGLE.getImage();        } else         if (convex instanceof Segment) {          icon=Icons.EDIT_SEGMENT.getImage();        } else {          icon=Icons.EDIT_POLYGON.getImage();        }        EditFixtureDialog.show(ControlUtilities.getParentWindow(this),icon,body,fixture);      }    }  }}  }
class C{  @Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo info){  int start=rowId * chunkAttributes.getColumnValueSize();  long[] keyArray=info.getKeyGenerator().getKeyArray(dataChunk,start);  int[] ordinal=info.getMdkeyQueryDimensionOrdinal();  for (int i=0; i < ordinal.length; i++) {    row[columnIndex++]=(int)keyArray[ordinal[i]];  }  return columnIndex;}  }
class C{  public LikesGetListQuery skipOwn(Boolean value){  return unsafeParam("skip_own",value);}  }
class C{  public void addTreeUpdate(SLDTreeUpdatedInterface sldTree){  treeUpdateList.add(sldTree);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_TOO_FAR_FROM_SUBZONE_DEV(String value0,String value2,String value1){  return new SM_SYSTEM_MESSAGE(1400547,value0,value2,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200492,skilltarget,skillname);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public static long pow(final long k,int e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  long result=1l;  long k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result*=k2p;    }    k2p*=k2p;    e=e >> 1;  }  return result;}  }
class C{  public boolean touchOutside(){  return outsideTouching != null && !outsideTouching.isEmpty();}  }
class C{  public AdsGetUploadURLQuery(VkApiClient client,UserActor actor,AdsGetUploadURLAdFormat adFormat){  super(client,"ads.getUploadURL",String.class);  accessToken(actor.getAccessToken());  adFormat(adFormat);}  }
class C{  private static boolean matches(Type from,Type to,Map<String,Type> typeMap){  return to.equals(from) || (from instanceof TypeVariable && to.equals(typeMap.get(((TypeVariable<?>)from).getName())));}  }
class C{  @deprecated public AttributedCharacterIterator formatToCharacterIterator(Object obj){  StringBuffer toAppendTo=new StringBuffer();  FieldPosition pos=new FieldPosition(0);  toAppendTo=format(obj,toAppendTo,pos);  AttributedString as=new AttributedString(toAppendTo.toString());  as.addAttribute(DateFormat.Field.TIME_ZONE,DateFormat.Field.TIME_ZONE);  return as.getIterator();}  }
class C{  private ConnectDatum tryConnect(){  try (SocketChannel dstSocket=SocketChannel.open()){    return tryConnect(dstSocket);  } catch (  IOException ex) {    throw new RuntimeException("socket creation failed",ex);  }}  }
class C{  public long adjustOrPutValue(final short key,final long adjust_amount,final long put_amount){  int index=insertionIndex(key);  final boolean isNewMapping;  final long newValue;  if (index < 0) {    index=-index - 1;    newValue=(_values[index]+=adjust_amount);    isNewMapping=false;  } else {    newValue=(_values[index]=put_amount);    isNewMapping=true;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return newValue;}  }
class C{  public UtilsCheckLinkQuery(VkApiClient client,UserActor actor,String url){  super(client,"utils.checkLink",LinkChecked.class);  accessToken(actor.getAccessToken());  url(url);}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  if (fAnnotationDepth != -1) {    schemaDOM.startAnnotationCDATA();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_ENOUGH_GOLD(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300481,descriptionId);}  }
class C{  public double compareDistributions(Distribution d1,Distribution d2){  return d1.similarityTo(d2);}  }
class C{  public boolean isEmpty(){  return this.getEntries().size() == 0;}  }
class C{  private Set<Integer> computeId2DataRec(int numberOfDataSets,Node v,Map<Integer,Integer[]> id2counts,Map<Integer,Set<Integer>> id2idsBelow,Map<Integer,NodeData> id2data){  final int id=(Integer)v.getInfo();  final Set<Integer> idsBelow=new HashSet<>();  id2idsBelow.put(id,idsBelow);  idsBelow.add(id);  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    final Set<Integer> allBelow=computeId2DataRec(numberOfDataSets,w,id2counts,id2idsBelow,id2data);    idsBelow.addAll(allBelow);  }  int[] assigned=new int[numberOfDataSets];  int[] summarized=new int[numberOfDataSets];  long total=0;  final Integer[] counts=id2counts.get(id);  if (counts != null) {    int top=Math.min(assigned.length,counts.length);    for (int i=0; i < top; i++) {      if (counts[i] != null) {        assigned[i]=counts[i];        total+=counts[i];      }    }  }  for (  Integer below : id2idsBelow.get(id)) {    Integer[] countBelow=id2counts.get(below);    if (countBelow != null) {      int top=Math.min(summarized.length,countBelow.length);      for (int i=0; i < top; i++) {        if (countBelow[i] != null) {          summarized[i]+=countBelow[i];          total+=countBelow[i];        }      }    }  }  if (total > 0)   id2data.put(id,new NodeData(assigned,summarized));  return idsBelow;}  }
class C{  public void put(String key,T value){  internalMap.put(key,value);}  }
class C{  @Override public void updateLayerStyle(List<GeoServerLayer> layerList){  if (layerList != null) {    for (    GeoServerLayer layer : layerList) {      GeoServerClientInterface client=connectionMap.get(layer.getConnection());      if (client != null) {        client.updateLayerStyles(layer);      }    }  }}  }
class C{  @Override public double[] makeLogDensityTestValues(){  return new double[]{Double.NEGATIVE_INFINITY,-0.916290731874155,-1.42711635564015,-1.93794197940614,-2.44876760317213,-2.95959322693812,-3.47041885070411,-3.9812444744701,-4.49207009823609,-5.00289572200208,-5.51372134576807,-6.02454696953406,-6.53537259330005,-7.04619821706604,-7.55702384083203,-8.06784946459802,-8.57867508836402,-9.08950071213001,-9.600326335896,-10.111151959662,-10.621977583428,-11.132803207194,-11.64362883096,-12.154454454726,-12.6652800784919,-13.1761057022579,-13.6869313260239,-14.1977569497899,-14.7085825735559,-15.2194081973219};}  }
class C{  public boolean isShowLabel(){  if (showLabel == null) {    return false;  } else {    return showLabel;  }}  }
class C{  protected void destroySearchBarControl(){  if (mContextualSearchBarControl != null) {    mContextualSearchBarControl.destroy();    mContextualSearchBarControl=null;  }}  }
class C{  public static void showError(Object parentIgnored,String message,long milliseconds){  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);}  }
class C{  protected AdsUpdateAdsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public TranslatedMessage(@Nonnull String name,@Nonnull List<String> replacements){  this.name=Preconditions.checkNotNull(name,"name");  this.replacements=ImmutableList.copyOf(Preconditions.checkNotNull(replacements,"replacements"));}  }
class C{  private void fireProcessSupervisionUpdate(final SupervisionEvent supervisionEvent){  Set<SupervisionListener> listeners=processSupervisionListeners.get(supervisionEvent.getEntityId());  if (listeners != null) {    for (    SupervisionListener listener : listeners) {      listener.onSupervisionUpdate(supervisionEvent);    }  }}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof String) {    populateField((String)objValue);  }}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public void expm1(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.expm1(operand[operandOffset]);  Arrays.fill(function,1,1 + order,FastMath.exp(operand[operandOffset]));  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public CreateViewData(String viewName,QueryData qryData){  this.viewName=viewName;  this.qryData=qryData;}  }
class C{  private String separeMetaTagsContent(String content){  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);  return htmlDecode(result);}  }
class C{  public static double nd(){  return R.nextGaussian();}  }
class C{  private boolean initIfNecessary(){  if (myAvdManager == null) {    if (mySdkHandler == null) {      IJ_LOG.warn("No Android SDK Found");      return false;    }    try {      myAvdManager=AvdManager.getInstance(mySdkHandler,SDK_LOG,myFileOp);    } catch (    AndroidLocation.AndroidLocationException e) {      IJ_LOG.error("Could not instantiate AVD Manager from SDK",e);      return false;    }    if (myAvdManager == null) {      return false;    }  }  return true;}  }
class C{  public void removeItemBoundsListener(ItemBoundsListener ibl){  m_bounders.remove(ibl);}  }
class C{  public BytesMessage createBytesMessage() throws JMSException {  return createBytesMessage(null);}  }
class C{  public FullFrameRect(IFilter program){  mFilter=program;  Matrix.setIdentityM(IDENTITY_MATRIX,0);}  }
class C{  private void startAnimation(long time,OverviewAnimationType type,int sourceIndex,boolean finishImmediately){  startAnimation(time,type,mTabModel.index(),sourceIndex,finishImmediately);}  }
class C{  private static void midPoint(MPPointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.x=(x / 2f);  point.y=(y / 2f);}  }
class C{  public boolean isActiveStepCompleted(){  return isStepCompleted(activeStep);}  }
class C{  public boolean print_graph(){  return soot.PhaseOptions.getBoolean(options,"print-graph");}  }
class C{  public DeriveColumnsFromTimeTransform build(){  return new DeriveColumnsFromTimeTransform(this);}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("Matrix is rank deficient.");  }  int nx=B.getColumnDimension();  double[][] X=B.getArrayCopy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR[i][k] * X[i][j];      }      s=-s / QR[k][k];      for (int i=k; i < m; i++) {        X[i][j]+=s * QR[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=Rdiag[k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * QR[i][k];      }    }  }  return (new Matrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));}  }
class C{  static public void createOutputFilesReverse(Result[] result,String fileDst,boolean bAppend) throws IOException {  BufferedWriter output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDst,bAppend)));  for (int i=(result.length - 1); i >= 0; i--) {    output.write("Gen" + result[i].getGenNum() + ":  scale of "+ result[i].getScale()+ "  "+ result[i].getRemark()+ "\n");  }  output.close();  System.err.println();  System.err.println(fileDst + " is generated!");}  }
class C{  public String post(String url) throws HttpException {  return post(null,url,null);}  }
class C{  public static String stripCharsInBag(String s,String bag){  int i;  StringBuilder stringBuilder=new StringBuilder("");  for (i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (bag.indexOf(c) == -1)     stringBuilder.append(c);  }  return stringBuilder.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200753,skilltarget);}  }
class C{  public Request(byte[] b,int offset){  this.data=b;  this.offset=offset;}  }
class C{  public int add(int type,String value){  for (int i=index_map.size(); i <= type; i++)   index_map.add(new Object2IntOpenHashMap<>());  Object2IntMap<String> map=index_map.get(type);  int index=map.getOrDefault(value,-1);  if (index < 0) {    index=feature_size++;    map.put(value,index);  }  return index;}  }
class C{  private double apply(double[] pX,double[] pY,double[][] coeff){  double result=0;  for (int i=0; i < N; i++) {    final double r=MathArrays.linearCombination(coeff[i],pY);    result+=r * pX[i];  }  return result;}  }
class C{  public TransactionException(String desc,Throwable cause){  super(desc,cause);}  }
class C{  public Object[] toParameterArray(StoreQuery q,Map userParams){  if (userParams == null || userParams.isEmpty())   return StoreQuery.EMPTY_OBJECTS;  String sql=q.getContext().getQueryString();  List<Integer> paramOrder=new ArrayList<Integer>();  try {    sql=substituteParams(sql,paramOrder);  } catch (  IOException ex) {    throw new UserException(ex.getLocalizedMessage());  }  Object[] result=new Object[paramOrder.size()];  int idx=0;  for (  Integer key : paramOrder) {    if (!userParams.containsKey(key))     throw new UserException("Missing parameter " + key + " in "+ sql);    result[idx++]=userParams.get(key);  }  q.getContext().getQuery().setQuery(sql);  return result;}  }
class C{  public SparseGradient compose(final double f0,final double f1){  return new SparseGradient(f0,f1,derivatives);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  private GSMessageImpl receiveFromTopic(long timeout){  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"receiveFromTopic(): Receiving from Topic");  }  GSMessageImpl message=m_session.getNextRecoveredMessage();  if (message != null) {    if (_logger.isLoggable(Level.FINEST)) {      _logger.log(Level.FINEST,toString2() + "receiveFromTopic(): Recovered message found: " + message.JMSMessageID);    }    message.JMSRedelivered=Boolean.TRUE;    return message;  }  long now;  long startTime=SystemTime.timeMillis();synchronized (synchTopicNotifyLock) {    while (currentMessage == null && timeout > 0) {      try {        synchTopicNotifyLock.wait(timeout);      } catch (      InterruptedException e) {        if (_logger.isLoggable(Level.SEVERE)) {          _logger.log(Level.SEVERE,toString2() + "receiveFromTopic(): InterruptedException while waiting " + "for a message from a topic: "+ e);        }      }      now=SystemTime.timeMillis();      timeout=timeout - (now - startTime);      startTime=now;    }    if (currentMessage != null) {      message=currentMessage != topicWakeupObject ? currentMessage : null;      currentMessage=null;      synchTopicNotifyLock.notify();      return message;    }    return null;  }}  }
class C{  private static void prependSchwa(Item item){  Item schwa=item.prependItem(null);  schwa.getFeatures().setString("name","ax");  item.getItemAs(Relation.SYLLABLE_STRUCTURE).prependItem(schwa);}  }
class C{  public V removeLocal(K key){  return super.remove(key);}  }
class C{  boolean canDragView(V view){  return false;}  }
class C{  public void endArray(A array){}  }
class C{  public void failPicture(String err){  this.callbackContext.error(err);}  }
class C{  public double sumOfValues(){  double dSum=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dSum+=(Double)iValIter.next();  }  return dSum;}  }
class C{  public Selector(Selector.XPath xpath,IdentityConstraint identityConstraint){  fXPath=xpath;  fIdentityConstraint=identityConstraint;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200980,skilltarget,skillcaster,skillname);}  }
class C{  protected void onPromoAcceptanceAnimationFinished(){}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  private static boolean isSuppressed(@NonNull Issue issue,@NonNull String string){  for (  String id : Splitter.on(',').trimResults().split(string)) {    if (id.equals(issue.getId()) || id.equals(SUPPRESS_ALL)) {      return true;    }  }  return false;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  protected FriendsGetQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private void resolve(Method method,Set<FieldSelector> bound,Iterable<PathSegment> path){  for (  PathSegment seg : path) {    if (seg instanceof FieldSegment) {      FieldSegment fieldSeg=(FieldSegment)seg;      FieldSelector selector=resolveFieldPath(method,fieldSeg.getFieldPath());      if (selector != null) {        checkPathParameterConditions(method,selector);        fieldSeg.setFieldSelector(selector);        bound.add(selector);      }      if (!fieldSeg.getSubPath().isEmpty()) {        resolve(method,bound,fieldSeg.getSubPath());      }    }  }}  }
class C{  private static int snapVertical(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,int position,ArrayList<SnapCandidate> snapCandidates){  SnapCandidate candidate=new SnapCandidate();  ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);  if (handle == null) {    return position;  }  handle.setDrawY(position);  SnapPlacement.snapAnchor(widgets,widget,anchor,candidate);  if (candidate.target != null) {    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(candidate.target);    int ty=candidate.y;    if (targetHandle != null) {      ty=targetHandle.getDrawY();    }    position=ty + candidate.margin;    snapCandidates.add(candidate);  }  return position;}  }
class C{  public GroupsUnbanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.unbanUser",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  protected boolean invalidStandaloneAttDef(QName element,QName attribute){  boolean state=true;  return state;}  }
class C{  protected void addCommonComponent(XMLComponent component){  if (fCommonComponents.contains(component)) {    return;  }  fCommonComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  @Override public void revertToDefaultValue(){  if (ttfPanel != null) {    ttfPanel.revertToDefaultValue();  }}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  private void writeDomainSpec(DomainSpec spec,Document document,Element parentElement){  if (spec instanceof TopDomain) {    Element topDomain=document.createElement("top");    parentElement.appendChild(topDomain);  } else   if (spec instanceof BottomDomain) {    Element bottomDomain=document.createElement("bottom");    parentElement.appendChild(bottomDomain);  } else   if (spec instanceof Category) {    Element categoryDomain=document.createElement("category");    parentElement.appendChild(categoryDomain);    Category cat=(Category)spec;    categoryDomain.setAttribute("value",cat.getValue());  } else   throw new RuntimeException("Unsupported source or sink specification type");}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyEqual(String propertyName,Object value){  return property(propertyName,equal(value));}  }
class C{  public static Map<String,Object> echoService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  result.putAll(context);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static String toString(Object o,String tagName) throws JSONException {  StringBuilder b=new StringBuilder();  int i;  JSONArray ja;  JSONObject jo;  String k;  Iterator keys;  int len;  String s;  Object v;  if (o instanceof JSONObject) {    if (tagName != null) {      b.append('<');      b.append(tagName);      b.append('>');    }    jo=(JSONObject)o;    keys=jo.keys();    while (keys.hasNext()) {      k=keys.next().toString();      v=jo.opt(k);      if (v == null) {        v="";      }      if (v instanceof String) {        s=(String)v;      } else {        s=null;      }      if (k.equals("content")) {        if (v instanceof JSONArray) {          ja=(JSONArray)v;          len=ja.length();          for (i=0; i < len; i+=1) {            if (i > 0) {              b.append('\n');            }            b.append(escape(ja.get(i).toString()));          }        } else {          b.append(escape(v.toString()));        }      } else       if (v instanceof JSONArray) {        ja=(JSONArray)v;        len=ja.length();        for (i=0; i < len; i+=1) {          v=ja.get(i);          if (v instanceof JSONArray) {            b.append('<');            b.append(k);            b.append('>');            b.append(toString(v));            b.append("</");            b.append(k);            b.append('>');          } else {            b.append(toString(v,k));          }        }      } else       if (v.equals("")) {        b.append('<');        b.append(k);        b.append("/>");      } else {        b.append(toString(v,k));      }    }    if (tagName != null) {      b.append("</");      b.append(tagName);      b.append('>');    }    return b.toString();  } else   if (o instanceof JSONArray) {    ja=(JSONArray)o;    len=ja.length();    for (i=0; i < len; ++i) {      v=ja.opt(i);      b.append(toString(v,(tagName == null) ? "array" : tagName));    }    return b.toString();  } else {    s=(o == null) ? "null" : escape(o.toString());    return (tagName == null) ? "\"" + s + "\"" : (s.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ s+ "</"+ tagName+ ">";  }}  }
class C{  private BSPTree<Sphere1D> leafAfter(BSPTree<Sphere1D> node){  node=childAfter(node);  while (node.getCut() != null) {    node=childBefore(node);  }  return node;}  }
class C{  public FuzzyKMeansClusterer(final int k,final double fuzziness,final int maxIterations,final DistanceMeasure measure,final double epsilon,final RandomGenerator random) throws MathIllegalArgumentException {  super(measure);  if (fuzziness <= 1.0d) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,fuzziness,1.0);  }  this.k=k;  this.fuzziness=fuzziness;  this.maxIterations=maxIterations;  this.epsilon=epsilon;  this.random=random;  this.membershipMatrix=null;  this.points=null;  this.clusters=null;}  }
class C{  public Boolean isAutoConnect(){  return autoConnect;}  }
class C{  public boolean acceptsChild(@NotNull NlComponent layout,@NotNull NlComponent newChild){  return true;}  }
class C{  protected void addClassPath(String classpath){  if (classpath == null)   return;  String sep=classpath.indexOf(";") == -1 ? ":" : ";";  String[] parseCp=classpath.split(sep);  for (  String cpEntry : parseCp) {    addEntry(cpEntry);  }}  }
class C{  public static boolean isShowToastEnabled(){  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();  return configuration.SHOW_TOAST;}  }
class C{  public static JsonObject createSymbol(ISymbol symbol){  if (instance != null) {    return instance.internal_createSymbol(symbol);  }  return null;}  }
class C{  public StringRequest(String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public void release(int key){  controller.keyRelease(key);}  }
class C{  public static boolean isUpgradeble(Item item){  if (item.getItemTemplate().isNoEnchant()) {    return false;  }  if (item.getItemTemplate().isWeapon()) {    return true;  }  if (item.getItemTemplate().getCategory() == ItemCategory.STIGMA) {    return false;  }  if (item.getItemTemplate().isArmor()) {    int at=item.getItemTemplate().getItemSlot();    if (at == 1 || at == 2 || at == 8 || at == 16 || at == 32 || at == 2048 || at == 4096 || at == 131072 || at == 262144) {      return true;    }  }  return false;}  }
class C{  private DataApprovalLevel nextHigherLevel(DataApprovalLevel level,DataApprovalWorkflow workflow){  List<DataApprovalLevel> sortedLevels=workflow.getSortedLevels();  for (int i=0; i < sortedLevels.size(); i++) {    if (i > 0 && sortedLevels.get(i).getLevel() == level.getLevel()) {      return sortedLevels.get(i - 1);    }  }  return level;}  }
class C{  public IObjectInfo<T> add(T subject){  lock.lock();  try {    return store_impl(subject);  }  finally {    lock.unlock();  }}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<>();}  }
class C{  public void unlock(Object key){  String uid=String.valueOf(key);  Transaction tr=lockedUIDHashMap.get(uid);  if (tr == null) {    return;  }  try {    tr.commit();  } catch (  Exception e) {    logger.warn("Failed to commit transaction and unlocking the object, ignoring",e);  } finally {    lockedUIDHashMap.remove(uid);  }}  }
class C{  public static String roundToString(double value,int significantFigures){  MathContext mc=new MathContext(significantFigures);  BigDecimal num=new BigDecimal(value);  return num.round(mc).toPlainString();}  }
class C{  public static void writeCustomAttributes(Collection<List<ExtensionAttribute>> attributes,XMLStreamWriter xtw,Map<String,String> namespaceMap,List<ExtensionAttribute>... blackLists) throws XMLStreamException {  for (  List<ExtensionAttribute> attributeList : attributes) {    if (attributeList != null && !attributeList.isEmpty()) {      for (      ExtensionAttribute attribute : attributeList) {        if (!isBlacklisted(attribute,blackLists)) {          if (attribute.getNamespacePrefix() == null) {            if (attribute.getNamespace() == null)             xtw.writeAttribute(attribute.getName(),attribute.getValue()); else {              xtw.writeAttribute(attribute.getNamespace(),attribute.getName(),attribute.getValue());            }          } else {            if (!namespaceMap.containsKey(attribute.getNamespacePrefix())) {              namespaceMap.put(attribute.getNamespacePrefix(),attribute.getNamespace());              xtw.writeNamespace(attribute.getNamespacePrefix(),attribute.getNamespace());            }            xtw.writeAttribute(attribute.getNamespacePrefix(),attribute.getNamespace(),attribute.getName(),attribute.getValue());          }        }      }    }  }}  }
class C{  @Override public void reloadApps(){  List<App> appList=new ArrayList<>();  HashMap<String,App> appNamespaces=new HashMap<>();  ObjectMapper mapper=new ObjectMapper();  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  if (null != getAppFolderPath()) {    File appFolderPath=new File(getAppFolderPath());    if (appFolderPath.isDirectory()) {      File[] listFiles=appFolderPath.listFiles();      if (listFiles != null) {        for (        File folder : listFiles) {          if (folder.isDirectory()) {            File appManifest=new File(folder,"manifest.webapp");            if (appManifest.exists()) {              try {                App app=mapper.readValue(appManifest,App.class);                app.setFolderName(folder.getName());                appList.add(app);                String appNamespace=app.getActivities().getDhis().getNamespace();                if (appNamespace != null) {                  appNamespaces.put(appNamespace,app);                }              } catch (              IOException ex) {                log.error(ex.getLocalizedMessage(),ex);              }            }          }        }      }    }  }  this.apps=appList;  this.appNamespaces=appNamespaces;  log.info("Detected apps: " + apps);}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public GroupsApproveRequestQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.approveRequest",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  protected GroupsIsMemberQueryWithUserIds userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  public final boolean isOverridingDeviceState(){  return (myOverride & CFG_DEVICE_STATE) != 0;}  }
class C{  @NotNull public RecognizeDomainSpecificContentInImageAction recognizeDomainSpecificContentInImage(@NotNull List<DomainSpecificDetails> model,@NotNull String imageUrl){  return new RecognizeDomainSpecificContentInImageAction(cognitiveContext,model,imageUrl);}  }
class C{  protected VideoGetAlbumByIdQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  void validate(DynamicAABBTreeNode node){  if (node == null) {    return;  }  if (node == this.root) {    assert (node.parent == null);  }  DynamicAABBTreeNode left=node.left;  DynamicAABBTreeNode right=node.right;  if (node.isLeaf()) {    @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)node;    assert (node.left == null);    assert (node.right == null);    assert (node.height == 0);    assert (leaf.collidable != null);    return;  }  assert (node.aabb.contains(left.aabb));  if (right != null)   assert (node.aabb.contains(right.aabb));  assert (left.parent == node);  assert (right.parent == node);  validate(left);  validate(right);}  }
class C{  public static String md5(byte[] source) throws NoSuchAlgorithmException {  char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  java.security.MessageDigest md=java.security.MessageDigest.getInstance("MD5");  md.update(source);  byte tmp[]=md.digest();  char str[]=new char[32];  int k=0;  for (int i=0; i < 16; i++) {    str[k++]=hexDigits[tmp[i] >>> 4 & 0xf];    str[k++]=hexDigits[tmp[i] & 0xf];  }  return new String(str);}  }
class C{  public static void main(String[] args){  System.out.println(merge("http://www.haodf.com/wenda/adele_g_4491037166.htm","http://www.haodf.com/wenda/aiai6905_g_4377802805.htm"));  System.out.println(merge("http://www.haodf.com/wenda/y.*_g_44959.*9.*9.*.htm","http://www.haodf.com/wenda/doc.*_g_4.*4.*5.*7.*.htm"));}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private static String buildMessage(final Locale locale,final String pattern,final Object... arguments){  return (pattern == null) ? "" : new MessageFormat(translate(pattern,locale),locale).format(arguments);}  }
class C{  public PhotosCreateAlbumQuery createAlbum(UserActor actor,String title){  return new PhotosCreateAlbumQuery(getClient(),actor,title);}  }
class C{  public AudioEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){  super(client,"audio.editAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);  title(title);}  }
class C{  public CronTimer(int minute,int sec){  cronExpression=sec + " " + minute+ " * * * ?";}  }
class C{  public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){  mIconWidthPx=iconWidthPx;  mIconHeightPx=iconHeightPx;  mCornerRadiusPx=cornerRadiusPx;  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mBackgroundPaint.setColor(backgroundColor);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  mTextPaint.setColor(Color.WHITE);  mTextPaint.setFakeBoldText(true);  mTextPaint.setTextSize(textSizePx);  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);  mTextYOffset=-textFontMetrics.top;}  }
class C{  public static void rollback() throws GenericTransactionException {  rollback(null);}  }
class C{  public static double readDouble(byte[] bytes){  return ByteBuffer.wrap(bytes).getFloat();}  }
class C{  private void updatePressPosition(int buttonIndex,RectF rectF){  if (buttonIndex < 0) {    return;  }  if (isPointInRectF(pressPointF,rectF)) {    if (!pressInButton) {      updatePressState(buttonIndex,true);      pressInButton=true;    }  } else {    if (pressInButton) {      updatePressState(buttonIndex,false);      pressInButton=false;    }  }}  }
class C{  public summaryFuzzyEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress,String sSspellParams){  super(sOutputSemaphore,sDo,iWordMin,iWordMax,iWordDist,iCharMin,iCharMax,iCharDist,iThreads,sOutFile,sSummaryDir,sModelDir,bSilent,iWeightMethod,bProgress);  sspellParams=sSspellParams;}  }
class C{  protected void initSentenceRepresentationFilter(){  if (SentenceRepresentationFilter == null)   SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();}  }
class C{  private void updateHalfDayTogglesState(int halfDay){  TextView leftHalfDayToggle=(TextView)mLeftHalfDayToggle.getChildAt(0);  TextView rightHalfDayToggle=(TextView)mRightHalfDayToggle.getChildAt(0);switch (halfDay) {case HALF_DAY_1:    leftHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);  rightHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);break;case HALF_DAY_2:rightHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);leftHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor);break;}}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (table != null) {      return table.isEnabled();    }  }  return false;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAvailablePermitQuestion && ((AirMapAvailablePermitQuestion)o).getId().equals(getId());}  }
class C{  public static boolean isTinkerEnableWithSharedPreferences(Context context){  SharedPreferences sp=context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);  return sp.getBoolean(ShareConstants.TINKER_ENABLE_CONFIG,true);}  }
class C{  void executeRepl() throws IOException {  console.print(LICENSE_PROMPT);  console.setExpandEvents(false);  console.setPrompt(PROMPT);  if (!tempFile.exists()) {    boolean success=tempFile.createNewFile();    if (!success)     print(ErrorMessage.COULD_NOT_CREATE_TEMP_FILE.getMessage());  }  File historyFile=new File(System.getProperty("java.io.tmpdir") + historyFilename);  historyFile.createNewFile();  FileHistory history=new FileHistory(historyFile);  console.setHistory(history);  console.addCompleter(new AggregateCompleter(new GraQLCompleter(this),new ShellCommandCompleter()));  String queryString;  while ((queryString=console.readLine()) != null) {    history.flush();switch (queryString) {case EDIT_COMMAND:      executeQuery(runEditor());    break;case COMMIT_COMMAND:  commit();break;case ROLLBACK_COMMAND:rollback();break;case CLEAR_COMMAND:console.clearScreen();break;case LICENSE_COMMAND:printLicense();break;case EXIT_COMMAND:return;case "":break;default :if (queryString.startsWith(LOAD_COMMAND + " ")) {String path=queryString.substring(LOAD_COMMAND.length() + 1);try {queryString=loadQuery(path);} catch (IOException e) {System.err.println(e.toString());break;}}executeQuery(queryString);break;}}}  }
class C{  @deprecated protected boolean matchNodesCanHaveValues(){  return false;}  }
class C{  public void forceAddFile(@NotNull File f,@Nullable Icon ic){  String s=f.isAbsolute() ? FileUtil.getRelativePath(myRoot,f) : f.getPath();  if (s != null) {    List<String> parts=Lists.newLinkedList(Splitter.on(File.separatorChar).split(s));    makeNode(myRootNode,parts,ic,true);  }}  }
class C{  @Override public final void occurrence(short occurrence,Augmentations augs) throws XNIException {  if (!fMixed) {    int currentIndex=fGroupIndexStackSizes[fDepth] - 1;    if (occurrence == XMLDTDContentModelHandler.OCCURS_ZERO_OR_ONE) {      fGroupIndexStack[fDepth][currentIndex]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE,fGroupIndexStack[fDepth][currentIndex],-1);    } else     if (occurrence == XMLDTDContentModelHandler.OCCURS_ZERO_OR_MORE) {      fGroupIndexStack[fDepth][currentIndex]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE,fGroupIndexStack[fDepth][currentIndex],-1);    } else     if (occurrence == XMLDTDContentModelHandler.OCCURS_ONE_OR_MORE) {      fGroupIndexStack[fDepth][currentIndex]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE,fGroupIndexStack[fDepth][currentIndex],-1);    }  }}  }
class C{  public void refineByAppraisalIVRange(int selectedItemPosition){  int lowest;  int highest;switch (selectedItemPosition) {case 1:    lowest=15;  highest=15;break;case 2:lowest=13;highest=14;break;case 3:lowest=8;highest=12;break;case 4:lowest=0;highest=7;break;default :lowest=0;highest=15;}ArrayList<IVCombination> refinedList=new ArrayList<>();for (IVCombination comb : iVCombinations) {if (comb.getHighestStat() >= lowest && comb.getHighestStat() <= highest) {refinedList.add(comb);}}iVCombinations=refinedList;}  }
class C{  public static String checkStoreCustomerRole(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore != null && userLogin != null) {    if ("Y".equals(productStore.getString("requireCustomerRole"))) {      List<GenericValue> productStoreRoleList=null;      try {        productStoreRoleList=EntityQuery.use(delegator).from("ProductStoreRole").where("productStoreId",productStore.get("productStoreId"),"partyId",userLogin.get("partyId"),"roleTypeId","CUSTOMER").filterByDate().queryList();      } catch (      GenericEntityException e) {        Debug.logError(e,"Database error finding CUSTOMER ProductStoreRole records, required by the ProductStore with ID [" + productStore.getString("productStoreId") + "]",module);      }      if (UtilValidate.isEmpty(productStoreRoleList)) {        String errorMsg="The " + productStore.getString("storeName") + " ["+ productStore.getString("productStoreId")+ "] ProductStore requires that customers be associated with it, and the logged in user is NOT associated with it in the CUSTOMER role; userLoginId=["+ userLogin.getString("userLoginId")+ "], partyId=["+ userLogin.getString("partyId")+ "]";        Debug.logWarning(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        session.removeAttribute("userLogin");        session.removeAttribute("autoUserLogin");        return "error";      }    }  }  return "success";}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  public int addNonProductItem(String itemType,String description,String categoryId,BigDecimal price,BigDecimal quantity,Map<String,Object> attributes,String prodCatalogId,String itemGroupNumber,LocalDispatcher dispatcher) throws CartItemModifyException {  ShoppingCart.ShoppingCartItemGroup itemGroup=this.getItemGroupByNumber(itemGroupNumber);  return this.addItem(0,ShoppingCartItem.makeItem(Integer.valueOf(0),itemType,description,categoryId,price,null,quantity,attributes,prodCatalogId,itemGroup,dispatcher,this,Boolean.TRUE));}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private void updateColumnIndexMap(){  columnIndexMap.clear();  for (int i=0; i < headers.size(); i++) {    columnIndexMap.put(headers.get(i).getColumn(),i);  }}  }
class C{  public void insertEquationData(final int index,T[] equationData,T[] complete) throws MathIllegalArgumentException {  checkIndex(index);  final int begin=start[index];  final int end=start[index + 1];  final int dimension=end - begin;  if (complete.length < end) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,complete.length,end);  }  if (equationData.length != dimension) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,equationData.length,dimension);  }  System.arraycopy(equationData,0,complete,begin,dimension);}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis){  this(file,listener,delayMillis,false);}  }
class C{  private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));  options.put("minValue",ff.literal("1"));  options.put("maxValue",ff.literal("5"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  public static OfbizUrlBuilder from(HttpServletRequest request) throws GenericEntityException, WebAppConfigurationException {  Assert.notNull("request",request);  OfbizUrlBuilder builder=(OfbizUrlBuilder)request.getAttribute("_OFBIZ_URL_BUILDER_");  if (builder == null) {    WebSiteProperties webSiteProps=WebSiteProperties.from(request);    URL url=ConfigXMLReader.getControllerConfigURL(request.getServletContext());    ControllerConfig config=ConfigXMLReader.getControllerConfig(url);    String servletPath=(String)request.getAttribute("_CONTROL_PATH_");    String contextPath=request.getContextPath();    builder=new OfbizUrlBuilder(config,webSiteProps,servletPath,contextPath);    request.setAttribute("_OFBIZ_URL_BUILDER_",builder);  }  return builder;}  }
class C{  public boolean isAllowed(VersionData versionData){  if (versionData == null) {    return false;  }  if (versionData.getVendorOptionType() == NoVendorOption.class) {    return true;  }  if (versionData.getVendorOptionType() != this.classType) {    return false;  }  return versionData.inRange(this.minimumVersion,this.maximumVersion);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public int attachChildAt(Spatial child,int index){  if (child == null) {    throw new NullPointerException();  }  if (child.getParent() != this && child != this) {    if (child.getParent() != null) {      child.getParent().detachChild(child);    }    child.setParent(this);    children.add(index,child);  }  return children.size();}  }
class C{  static Process forkProcess(File directory,String... processArgs) throws IOException {  ProcessBuilder processBuilder=new ProcessBuilder(processArgs);  processBuilder.directory(directory);  processBuilder.redirectErrorStream(true);  return processBuilder.start();}  }
class C{  void commit(long waitFor) throws CannotCommitException, TimeoutExpiredException, RemoteException {  commitImpl(waitFor,false);}  }
class C{  @NotNull protected ProcessHandler startProcess() throws ExecutionException {  FlutterDaemonService service=FlutterDaemonService.getInstance();  assert service != null;  Project project=getEnvironment().getProject();  String workingDir=project.getBasePath();  assert workingDir != null;  Collection<ConnectedDevice> devices=service.getConnectedDevices();  if (devices.isEmpty()) {    throw new ExecutionException("No connected device");  }  ConnectedDevice device=service.getSelectedDevice();  if (device == null) {    throw new ExecutionException("No selected device");  }  FlutterRunnerParameters parameters=((FlutterRunConfiguration)getEnvironment().getRunProfile()).getRunnerParameters().clone();  final String cwd=parameters.computeProcessWorkingDirectory(project);  String relativePath=parameters.getFilePath();  if (relativePath != null && relativePath.startsWith(cwd)) {    relativePath=relativePath.substring(cwd.length());    if (relativePath.startsWith(File.separator)) {      relativePath=relativePath.substring(1);    }  }  myApp=service.startApp(project,cwd,device.deviceId(),myMode,relativePath);  return myApp.getController().getProcessHandler();}  }
class C{  public Set<RefType> catchableSubset(ThrowableSet thrownSet){  Set<RefType> result=new ExceptionHashSet<RefType>(ALL_TEST_THROWABLES.size());  for (  RefType e : ALL_TEST_THROWABLES) {    if (thrownSet.catchableAs(e)) {      result.add(e);    }  }  return result;}  }
class C{  public PhotosGetAlbumsQuery(VkApiClient client,UserActor actor){  super(client,"photos.getAlbums",GetAlbumsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDY_CANT_ADD_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1300795,value0);}  }
class C{  protected static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  void startRotate(float startAngleDeg,float dAngleDeg,int durationMillis){  mMode=SCROLL_MODE;  mFinished=false;  mDurationMillis=durationMillis;  mStartMillis=AnimationUtils.currentAnimationTimeMillis();  mStartAngleDeg=startAngleDeg;  mDeltaAngleDeg=dAngleDeg;}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  return map.containsKey(o);}  }
class C{  private boolean isChildService(Operation op){  String path=op.getUri().getPath();  return !path.equals(getParentPath(op));}  }
class C{  private static Number parseNumber(final String source,final double value,final ParsePosition pos){  Number ret=null;  StringBuilder sb=new StringBuilder();  sb.append('(');  sb.append(value);  sb.append(')');  final int n=sb.length();  final int startIndex=pos.getIndex();  final int endIndex=startIndex + n;  if (endIndex < source.length() && source.substring(startIndex,endIndex).compareTo(sb.toString()) == 0) {    ret=Double.valueOf(value);    pos.setIndex(endIndex);  }  return ret;}  }
class C{  public static java.sql.Timestamp nowTimestamp(){  return getTimestamp(System.currentTimeMillis());}  }
class C{  @Override public boolean equals(Object object){  if (object instanceof QName) {    QName qname=(QName)object;    if (qname.uri != null) {      return uri == qname.uri && localpart == qname.localpart;    } else     if (uri == null) {      return rawname == qname.rawname;    }  }  return false;}  }
class C{  public static final Polygon minkowskiSum(Polygon polygon,double radius,int count){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullMinkowskiSumPolygon"));  if (radius <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidMinkowskiSumRadius"));  if (count <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidMinkowskiSumCount"));  Vector2[] vertices=polygon.vertices;  Vector2[] normals=polygon.normals;  int size=vertices.length;  Vector2[] nVerts=new Vector2[size * 2 + size * count];  int j=0;  for (int i=0; i < size; i++) {    Vector2 v1=vertices[i];    Vector2 v2=vertices[i + 1 == size ? 0 : i + 1];    Vector2 normal=normals[i];    Vector2 nv1=normal.product(radius).add(v1);    Vector2 nv2=normal.product(radius).add(v2);    Vector2 cv1=null;    if (i == 0) {      Vector2 tn=normals[size - 1];      cv1=v1.to(tn.product(radius).add(v1));    } else {      cv1=v1.to(nVerts[j - 1]);    }    Vector2 cv2=v1.to(nv1);    final double theta=cv1.getAngleBetween(cv2);    final double pin=theta / (count + 1);    final double c=Math.cos(pin);    final double s=Math.sin(pin);    double t=0;    double sTheta=Vector2.X_AXIS.getAngleBetween(normals[i - 1 < 0 ? size - 1 : i - 1]);    if (sTheta < 0) {      sTheta+=Geometry.TWO_PI;    }    double x=radius * Math.cos(sTheta);    double y=radius * Math.sin(sTheta);    for (int k=0; k < count; k++) {      t=x;      x=c * x - s * y;      y=s * t + c * y;      nVerts[j++]=new Vector2(x,y).add(v1);    }    nVerts[j++]=nv1;    nVerts[j++]=nv2;  }  return new Polygon(nVerts);}  }
class C{  public String stringToConstant(String string){  int length=string.length();  for (int i=0; i < length; i++) {    char character=string.charAt(i);    if (character != "_".charAt(0) && Character.isUpperCase(character) && i != 0) {      String firstPart=string.substring(0,i);      String secondPart=string.substring(i,length);      String newFirstPart=firstPart + "_";      string=newFirstPart + secondPart;      i=newFirstPart.length();      length++;    }  }  return string;}  }
class C{  public ObjectMessage createObjectMessage() throws JMSException {  ensureOpen();  GSObjectMessageImpl objMsg=new GSObjectMessageImpl(this);  return objMsg;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((spinner != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Integer) {      Integer oldValue=(Integer)undoRedoObject.getOldValue();      internalSetValue(oldValue);    }  }}  }
class C{  public static boolean isLocalStore(int bc){switch (bc) {case ByteCode.ISTORE:case ByteCode.FSTORE:case ByteCode.ASTORE:case ByteCode.LSTORE:case ByteCode.DSTORE:case ByteCode.ISTORE_0:case ByteCode.ISTORE_1:case ByteCode.ISTORE_2:case ByteCode.ISTORE_3:case ByteCode.FSTORE_0:case ByteCode.FSTORE_1:case ByteCode.FSTORE_2:case ByteCode.FSTORE_3:case ByteCode.ASTORE_0:case ByteCode.ASTORE_1:case ByteCode.ASTORE_2:case ByteCode.ASTORE_3:case ByteCode.LSTORE_0:case ByteCode.LSTORE_1:case ByteCode.LSTORE_2:case ByteCode.LSTORE_3:case ByteCode.DSTORE_0:case ByteCode.DSTORE_1:case ByteCode.DSTORE_2:case ByteCode.DSTORE_3:    return true;default :  return false;}}  }
class C{  private void trackRange(final long value){  if (value < minValue) {    minValue=value;  }  if (value > maxValue) {    maxValue=value;  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public void registerEvent(Class<? extends Event> event,Listener listener,EventPriority priority,EventExecutor executor,Plugin plugin,boolean ignoreCancelled){  Validate.notNull(listener,"Listener cannot be null");  Validate.notNull(priority,"Priority cannot be null");  Validate.notNull(executor,"Executor cannot be null");  Validate.notNull(plugin,"Plugin cannot be null");  if (!plugin.isEnabled()) {    throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");  }  if (useTimings) {    getEventListeners(event).register(new TimedRegisteredListener(listener,executor,priority,plugin,ignoreCancelled));  } else {    getEventListeners(event).register(new RegisteredListener(listener,executor,priority,plugin,ignoreCancelled));  }}  }
class C{  public void repositoryModified(ISVNRepositoryLocation repository){  for (  ISVNListener listener : repositoryListeners) {    listener.repositoryModified(repository);  }}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs){  if (!fNamespaceDeclarations && fNamespaceAware) {    int len=attributes.getLength();    for (int i=len - 1; i >= 0; --i) {      if (XMLSymbols.PREFIX_XMLNS == attributes.getPrefix(i) || XMLSymbols.PREFIX_XMLNS == attributes.getQName(i)) {        attributes.removeAttributeAt(i);      }    }  }  super.startElement(element,attributes,augs);}  }
class C{  private static Optional<Map.Entry<String,String>> createTagEntry(Map.Entry<String,MetricValue> tag_entry){  final Optional<String> opt_tag_value=tag_entry.getValue().asString();  return opt_tag_value.map(null);}  }
class C{  public void collapseDataSource(DataSource dataSource){  collapseNode(getNode(dataSource));}  }
class C{  public boolean isInfoEnabled(){  return this.logger.isInfoEnabled();}  }
class C{  public DirectedGraph load(String fileName) throws IOException, MaryConfigurationException {  InputStream is=new FileInputStream(fileName);  try {    return load(is);  }  finally {    is.close();  }}  }
class C{  public static float saturate(float input){  return clamp(input,0f,1f);}  }
class C{  @Override public boolean isEnabled(){  if (attributeComboBox != null) {    return attributeComboBox.isEnabled();  }  return false;}  }
class C{  public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,OCUpload ocUpload){  if (ocUpload == null || listener == null)   return;  String targetKey=buildRemoteName(ocUpload.getAccountName(),ocUpload.getRemotePath());  if (mBoundListeners.get(targetKey) == listener) {    mBoundListeners.remove(targetKey);  }}  }
class C{  public ConstAttr(CP val){  this.val=val;}  }
class C{  private void pauseAutoCycle(){  if (mCycling) {    mCycleTimer.cancel();    mCycleTask.cancel();    mCycling=false;  } else {    if (mResumingTimer != null && mResumingTask != null) {      recoverCycle();    }  }}  }
class C{  public WallEditQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public ZWaveCentralSceneCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  private Map loadBinaryLexicon(InputStream is,int estimatedSize) throws IOException {  DataInputStream dis=new DataInputStream(new BufferedInputStream(is));  int size=0;  int numEntries=0;  List phonemeList=new ArrayList();  Map lexicon=new LinkedHashMap();  int magic;  try {    if (dis.readInt() != MAGIC) {      throw new Error("bad magic number in lexicon");    }  } catch (  IOException e) {    throw e;  }  if (dis.readInt() != VERSION) {    throw new Error("bad version number in lexicon");  }  size=dis.readInt();  for (int i=0; i < size; i++) {    String phoneme=getString(dis);    phonemeList.add(phoneme);  }  numEntries=dis.readInt();  for (int i=0; i < numEntries; i++) {    String wordAndPos=getString(dis);    String pos=Character.toString(wordAndPos.charAt(wordAndPos.length() - 1));    if (!partsOfSpeech.contains(pos)) {      partsOfSpeech.add(pos);    }    int numPhonemes=dis.readByte();    String[] phonemes=new String[numPhonemes];    for (int j=0; j < numPhonemes; j++) {      phonemes[j]=(String)phonemeList.get(dis.readByte());    }    lexicon.put(wordAndPos,phonemes);  }  dis.close();  return lexicon;}  }
class C{  private String parseAlignedSequence(String aLine){  String[] tokens=aLine.split("\\s+");switch (tokens.length) {case 3:{      final StringBuilder buf=new StringBuilder();      int gaps=Integer.parseInt(tokens[0]);      while (--gaps >= 0)       buf.append("-");      buf.append(tokens[1]);      gaps=Integer.parseInt(tokens[2]);      while (--gaps >= 0)       buf.append("-");      return buf.toString();    }case 2:{    final StringBuilder buf=new StringBuilder();    int gaps=Integer.parseInt(tokens[0]);    while (--gaps >= 0)     buf.append("-");    buf.append(tokens[1]);    return buf.toString();  }case 1:return tokens[0];default :return aLine.replaceAll("\\s+","");}}  }
class C{  public StrokeAction(){  super();}  }
class C{  public PhotosGetAllQueryWithExtended noServiceAlbums(Boolean value){  return unsafeParam("no_service_albums",value);}  }
class C{  public Hits search(String query) throws ParseException, IOException {  return null;}  }
class C{  @SuppressWarnings({"checkstyle:cyclomaticcomplexity","checkstyle:javadocstyle","checkstyle:javadocmethod"}) public Object parseText(String text){  if (text == null || text.length() == 0) {    throw new IllegalArgumentException("The JSON input text should neither be null nor empty.");  }  return parse(new LineColumnReader(new StringReader(text)));}  }
class C{  protected void onUnregisterObserver(){}  }
class C{  public StringDataType(String s,int len){  if (len < s.length()) {    this.s=s.substring(0,len);  } else {    this.s=String.format("%-" + len + "s",s);  }}  }
class C{  private void postAlerts(Collection<ValidationResult> validationResults,Date scheduledRunStart){  SortedSet<ValidationResult> results=new TreeSet<>(validationResults);  Map<SortedSet<ValidationResult>,Set<User>> messageMap=getMessageMap(results);  for (  Map.Entry<SortedSet<ValidationResult>,Set<User>> entry : messageMap.entrySet()) {    sendAlertmessage(entry.getKey(),entry.getValue(),scheduledRunStart);  }}  }
class C{  public void read(IInputReader r) throws IOException {  r.seek(r.length() - 9);  RMA2File.check((byte)r.read(),RMA2File.CHECK_BYTE);  infoSectionStart=r.readLong();  r.seek(infoSectionStart);  version=(byte)r.read();  if (!(version == VERSION_RMA2_0 || version == VERSION_RMA2_1))   throw new IOException("Unsupported subversion of RMA2 format (MEGAN version too old?)");  setCreationDate(r.readLong());  if (getCreationDate() < 1292313486909L)   throw new IOException("RMA2 file generated by alpha version, too old, please regenerate");  setModificationDate(r.readLong());  setNumberOfReads(r.readInt());  setNumberOfMatches(r.readInt());  if (version == VERSION_RMA2_0) {    rma2Formatter=new RMA2Formatter(ReadBlockRMA2Formatter.DEFAULT_RMA2_0,MatchBlockRMA2Formatter.DEFAULT_RMA2_0);  } else {    rma2Formatter=new RMA2Formatter(r.readString(),r.readString());  }  setTextStoragePolicy(TextStoragePolicy.fromId((byte)r.read()));  if (getTextStoragePolicy() == TextStoragePolicy.Embed) {    setDataDumpSectionStart(r.readLong());    setDataDumpSectionEnd(r.readLong());    textFileNames=new String[0];    textFileSizes=new Long[0];  } else   if (getTextStoragePolicy() == TextStoragePolicy.Reference || getTextStoragePolicy() == TextStoragePolicy.InRMAZ) {    int length=r.readInt();    textFileNames=new String[length];    for (int i=0; i < textFileNames.length; i++) {      textFileNames[i]=r.readString();    }    length=r.readInt();    textFileSizes=new Long[length];    for (int i=0; i < textFileSizes.length; i++) {      textFileSizes[i]=r.readLong();    }    setDataDumpSectionStart(0);    setDataDumpSectionEnd(0);  } else   throw new IOException("Unknown textStoragePolicy: " + textStoragePolicy);  setDataIndexSectionStart(r.readLong());  setDataIndexSectionEnd(r.readLong());  setNumberOfClassifications(r.readInt());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationName(i,r.readString());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationSize(i,r.readInt());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationIndexSectionStart(i,r.readLong());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationIndexSectionEnd(i,r.readLong());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationDumpSectionStart(i,r.readLong());  for (int i=0; i < getNumberOfClassifications(); i++)   setClassificationDumpSectionEnd(i,r.readLong());  setAuxiliaryDataStart(r.readLong());  setAuxiliaryDataEnd(r.readLong());  byte aByte=(byte)r.read();  if (aByte == AUXILIARY_DATA_AS_MAP_BYTE) {    setHasAuxiliaryMap(true);    RMA2File.check((byte)r.read(),RMA2File.CHECK_BYTE);  } else {    setHasAuxiliaryMap(false);    RMA2File.check(aByte,RMA2File.CHECK_BYTE);  }  RMA2File.check(r.readLong(),infoSectionStart);}  }
class C{  @Deprecated public static int offset(Schema sch,String fldName){  int pos=0;  for (  String fldname : sch.fields()) {    if (fldName.equals(fldname))     break;    pos+=Page.maxSize(sch.type(fldname));  }  return pos;}  }
class C{  public PagerManageImplementor(PagerManageModel model,PagerManageView view){  this.model=model;  this.view=view;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getCustomerDao() : null;}  }
class C{  public void emit(String eventName,Object data){  this.connection.send(MessageBuilder.getMsg(Topic.EVENT,Actions.EVENT,eventName,MessageBuilder.typed(data)));  this.broadcastEvent(eventName,data);}  }
class C{  public void removeToken(int i){  tokens.remove(i);  saveTokenChanges();}  }
class C{  public BoardDeleteTopicQuery deleteTopic(UserActor actor,int groupId,int topicId){  return new BoardDeleteTopicQuery(getClient(),actor,groupId,topicId);}  }
class C{  public static URL stringToURL(String string){  try {    return new URL(string);  } catch (  MalformedURLException exception) {    System.err.println("invalid URL: " + string + ": "+ exception);    return null;  }}  }
class C{  private void filterChildOrganisationUnits(Map<String,Set<String>> associationMap,Integer maxLevels){  User currentUser=currentUserService.getCurrentUser();  if (currentUser != null && currentUser.getOrganisationUnits() != null) {    List<String> parentIds=getUids(currentUser.getOrganisationUnits());    List<OrganisationUnit> organisationUnitsWithChildren=getOrganisationUnitsWithChildren(parentIds,maxLevels);    Set<String> children=Sets.newHashSet(getUids(organisationUnitsWithChildren));    associationMap.keySet().retainAll(children);  }}  }
class C{  private boolean renderRule(Rule rule){  boolean render=false;  if ((rule != null) && (ruleToRender != null)) {    Filter ruleFilter=rule.getFilter();    Filter ruleToRenderFilter=ruleToRender.getFilter();    boolean filtersSame=false;    if ((ruleFilter == null) && (ruleToRenderFilter == null)) {      filtersSame=true;    } else     if ((ruleFilter == null) || (ruleToRenderFilter == null)) {      filtersSame=false;    } else {      filtersSame=ruleFilter.equals(ruleToRenderFilter);    }    String ruleName=rule.getName();    String ruleToRenderName=ruleToRender.getName();    if ((ruleName != null) && (ruleToRenderName != null)) {      render=(rule.getName().compareTo(ruleToRender.getName()) == 0) && filtersSame;    } else     if ((ruleName == null) && (ruleToRenderName == null)) {      render=filtersSame;    } else {      render=false;    }  }  return render;}  }
class C{  public ChangeSet custom(CustomChangeOperation changeOperation){  return add(changeOperation);}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  SimulationBody body1=new SimulationBody(Color.CYAN);{    Convex c=Geometry.createSquare(1.0);    BodyFixture bf=new BodyFixture(c);    body1.addFixture(bf);  }  body1.setLinearVelocity(new Vector2(0.0,0.0));  body1.setAngularVelocity(0.0);  body1.setMass(MassType.NORMAL);  body1.setAutoSleep(false);  world.addBody(body1);  controller=new SimulationBody(new Color(100,100,100,50));{    Convex c=Geometry.createSquare(1.0);    BodyFixture bf=new BodyFixture(c);    bf.setSensor(true);    controller.addFixture(bf);  }  controller.setAngularVelocity(0.0);  controller.setMass(MassType.INFINITE);  world.addBody(controller);  MotorJoint joint1=new MotorJoint(controller,body1);  joint1.setLinearTarget(new Vector2(0.5,0.5));  joint1.setAngularTarget(Math.PI * 0.25);  joint1.setCorrectionFactor(0.3);  joint1.setMaximumForce(1000.0);  joint1.setMaximumTorque(7.0);  joint1.setCollisionAllowed(false);  world.addJoint(joint1);}  }
class C{  public static boolean isFirstChildInLane(BaseLayoutManager lm,int itemPosition){  final int laneCount=lm.getLanes().getCount();  if (itemPosition >= laneCount) {    return false;  }  int count=0;  for (int i=0; i < itemPosition; i++) {    count+=lm.getLaneSpanForPosition(i);    if (count >= laneCount) {      return false;    }  }  return true;}  }
class C{  public boolean isValidRow(int row){  return (row >= m_firstid && row <= m_curid && (m_openrows == null || !m_openrows.containsKey(row)));}  }
class C{  public ScrollableContainer(JComponent view,int vsbPolicy,int hsbPolicy){  setViewportView(new ScrollableContents(view));  setVerticalScrollBarPolicy(vsbPolicy);  setHorizontalScrollBarPolicy(hsbPolicy);  setBorder(BorderFactory.createEmptyBorder());  setViewportBorder(BorderFactory.createEmptyBorder());  getViewport().setOpaque(false);  setOpaque(false);}  }
class C{  public NotSetPositionException(String s){  super(s);}  }
class C{  public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType,StorageType storageType){  return addFixedProperty(propertyName,propertyType,SpaceDocumentSupport.DEFAULT,storageType);}  }
class C{  public Builder withSortField(RangeRequest.SortTarget field){  this.sortTarget=field;  return this;}  }
class C{  public PhotosCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  public BesselJ(double order){  this.order=order;}  }
class C{  public ModifyData(String tblName,Map<String,Expression> fldVals,Predicate pred){  this.tblName=tblName;  this.fldVals=fldVals;  this.pred=pred;}  }
class C{  public static void main(String[] args){  String text=null;  String inFile=null;  String protocol=null;  boolean dumpAudioTypes=false;  Voice voice=null;  VoiceManager voiceManager=VoiceManager.getInstance();  String voices=voiceManager.toString();  for (int i=0; i < args.length; i++) {    if (args[i].equals("-voice")) {      if (++i < args.length) {        String voiceName=args[i];        if (voiceManager.contains(voiceName)) {          voice=voiceManager.getVoice(voiceName);        } else {          System.out.println("Invalid voice: " + voiceName);          System.out.println("  Valid voices are " + voices);          System.exit(1);        }      } else {        usage(voices);        System.exit(1);      }      break;    }  }  if (voice == null) {    voice=voiceManager.getVoice("kevin16");  }  if (voice == null) {    throw new Error("The specified voice is not defined");  }  FreeTTS freetts=new FreeTTS(voice);  for (int i=0; i < args.length; i++) {    if (args[i].equals("-metrics")) {      voice.setMetrics(true);    } else     if (args[i].equals("-detailedMetrics")) {      voice.setDetailedMetrics(true);    } else     if (args[i].equals("-silent")) {      freetts.setSilentMode(true);    } else     if (args[i].equals("-streaming")) {      freetts.setStreamingAudio(true);    } else     if (args[i].equals("-verbose")) {      voice.setVerbose(true);    } else     if (args[i].equals("-dumpUtterance")) {      voice.setDumpUtterance(true);    } else     if (args[i].equals("-dumpAudioTypes")) {      dumpAudioTypes=true;    } else     if (args[i].equals("-dumpRelations")) {      voice.setDumpRelations(true);    } else     if (args[i].equals("-dumpASCII")) {      if (++i < args.length) {        voice.setWaveDumpFile(args[i]);      } else {        usage(voices);      }    } else     if (args[i].equals("-dumpAudio")) {      if (++i < args.length) {        freetts.setAudioFile(args[i]);      } else {        usage(voices);      }    } else     if (args[i].equals("-dumpMultiAudio")) {      if (++i < args.length) {        freetts.setAudioFile(args[i]);        freetts.setMultiAudio(true);      } else {        usage(voices);      }    } else     if (args[i].equals("-version")) {      System.out.println(VERSION);    } else     if (args[i].equals("-voice")) {      i++;    } else     if (args[i].equals("-help")) {      usage(voices);      System.exit(0);    } else     if (args[i].equals("-voiceInfo")) {      System.out.println(VoiceManager.getInstance().getVoiceInfo());      System.exit(0);    } else     if (args[i].equals("-text")) {      freetts.setInputMode(InputMode.TEXT);      StringBuffer sb=new StringBuffer();      for (int j=i + 1; j < args.length; j++) {        sb.append(args[j]);        sb.append(" ");      }      text=sb.toString();      break;    } else     if (args[i].equals("-file")) {      if (++i < args.length) {        inFile=args[i];        freetts.setInputMode(InputMode.FILE);      } else {        usage(voices);      }    } else     if (args[i].equals("-lines")) {      if (++i < args.length) {        inFile=args[i];        freetts.setInputMode(InputMode.LINES);      } else {        usage(voices);      }    } else     if (args[i].equals("-url")) {      if (++i < args.length) {        inFile=args[i];        freetts.setInputMode(InputMode.URL);      } else {        usage(voices);      }    } else     if (args[i].equals("-run")) {      if (++i < args.length) {        voice.setRunTitle(args[i]);      } else {        usage(voices);      }    } else {      System.out.println("Unknown option:" + args[i]);    }  }  if (dumpAudioTypes) {    dumpAudioTypes();  }  freetts.startup();  if (freetts.getInputMode() == InputMode.TEXT) {    freetts.batchTextToSpeech(text);  } else   if (freetts.getInputMode() == InputMode.FILE) {    freetts.fileToSpeech(inFile);  } else   if (freetts.getInputMode() == InputMode.URL) {    freetts.urlToSpeech(inFile);  } else   if (freetts.getInputMode() == InputMode.LINES) {    freetts.lineToSpeech(inFile);  } else {    interactiveMode(freetts);  }  if (freetts.getVoice().isMetrics() && !freetts.getSilentMode()) {  }  freetts.shutdown();  System.exit(0);}  }
class C{  public PlacesSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public double average(boolean bOnlyValueAverage){  double dRes=0.0;  Distribution dTemp=new Distribution();  dTemp.asTreeMap().putAll(hDistro);  if (!bOnlyValueAverage)   dTemp=dTemp.getProbabilityDistribution();  Iterator iKeyIter=dTemp.asTreeMap().keySet().iterator();  while (iKeyIter.hasNext()) {    Object oNextKey=iKeyIter.next();    if (bOnlyValueAverage)     dRes+=(Double)dTemp.getValue(oNextKey) / dTemp.asTreeMap().size(); else     dRes+=(Double)oNextKey * (Double)dTemp.getValue(oNextKey);  }  return dRes;}  }
class C{  public static Process buildCreateBasicProcess(Properties properties){  if (properties == null) {    properties=new Properties();  }  Process process=Process.create("P_TEST").build();  properties.setProperty("name","P_TEST");  properties.setProperty("description","<no description provided>");  properties.setProperty("statusTagId",String.valueOf(100L));  properties.setProperty("aliveInterval",String.valueOf(10000));  properties.setProperty("aliveTagId",String.valueOf(101l));  properties.setProperty("maxMessageDelay",String.valueOf(1000));  properties.setProperty("maxMessageSize",String.valueOf(100));  return process;}  }
class C{  public void changeTitle(String path,String newTitle) throws RepositoryException {  jcrHelper.addNodeProperty(path,JCR_TITLE,newTitle,1);}  }
class C{  public PollsCreateQuery create(UserActor actor){  return new PollsCreateQuery(getClient(),actor);}  }
class C{  public static void genc(Zmat A,int ii1,int ii2,int jj,Rot P){  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j=jj - A.basex;  Rot.genc(A.re[i1][j],A.im[i1][j],A.re[i2][j],A.im[i2][j],P);  A.re[i1][j]=P.zr;  A.im[i1][j]=P.zi;  A.re[i2][j]=0;  A.im[i2][j]=0;}  }
class C{  public void removeUserPresenceListener(UserPresenceListener userPresenceListener){  userPresenceListeners.remove(userPresenceListener);}  }
class C{  private void updateDownloadedFiles(SQLiteDatabase db,String newAccountName,String oldAccountName){  String whereClause=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_STORAGE_PATH+ " IS NOT NULL";  Cursor c=db.query(ProviderTableMeta.FILE_TABLE_NAME,null,whereClause,new String[]{newAccountName},null,null,null);  try {    if (c.moveToFirst()) {      String oldAccountPath=FileStorageUtils.getSavePath(oldAccountName);      String newAccountPath=FileStorageUtils.getSavePath(newAccountName);      File oldAccountFolder=new File(oldAccountPath);      File newAccountFolder=new File(newAccountPath);      oldAccountFolder.renameTo(newAccountFolder);      do {        String oldPath=c.getString(c.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));        OCFile file=new OCFile(c.getString(c.getColumnIndex(ProviderTableMeta.FILE_PATH)));        String newPath=FileStorageUtils.getDefaultSavePathFor(newAccountName,file);        ContentValues cv=new ContentValues();        cv.put(ProviderTableMeta.FILE_STORAGE_PATH,newPath);        db.update(ProviderTableMeta.FILE_TABLE_NAME,cv,ProviderTableMeta.FILE_STORAGE_PATH + "=?",new String[]{oldPath});        Log_OC.v("SQL","Updated path of downloaded file: old file name == " + oldPath + ", new file name == "+ newPath);      } while (c.moveToNext());    }  }  finally {    c.close();  }}  }
class C{  private USEnglish(){}  }
class C{  protected boolean scanAttributeValue(XMLString value,XMLString nonNormalizedValue,String atName,boolean checkEntities,String eleName) throws IOException, XNIException {  int quote=fEntityScanner.peekChar();  if (quote != '\'' && quote != '"') {    reportFatalError("OpenQuoteExpected",new Object[]{eleName,atName});  }  fEntityScanner.scanChar();  int entityDepth=fEntityDepth;  int c=fEntityScanner.scanLiteral(quote,value);  if (DEBUG_ATTR_NORMALIZATION) {    System.out.println("** scanLiteral -> \"" + value.toString() + "\"");  }  int fromIndex=0;  if (c == quote && (fromIndex=isUnchangedByNormalization(value)) == -1) {    nonNormalizedValue.setValues(value);    int cquote=fEntityScanner.scanChar();    if (cquote != quote) {      reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});    }    return true;  }  fStringBuffer2.clear();  fStringBuffer2.append(value);  normalizeWhitespace(value,fromIndex);  if (DEBUG_ATTR_NORMALIZATION) {    System.out.println("** normalizeWhitespace -> \"" + value.toString() + "\"");  }  if (c != quote) {    fScanningAttribute=true;    fStringBuffer.clear();    do {      fStringBuffer.append(value);      if (DEBUG_ATTR_NORMALIZATION) {        System.out.println("** value2: \"" + fStringBuffer.toString() + "\"");      }      if (c == '&') {        fEntityScanner.skipChar('&');        if (entityDepth == fEntityDepth) {          fStringBuffer2.append('&');        }        if (fEntityScanner.skipChar('#')) {          if (entityDepth == fEntityDepth) {            fStringBuffer2.append('#');          }          int ch=scanCharReferenceValue(fStringBuffer,fStringBuffer2);          if (ch != -1) {            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value3: \"" + fStringBuffer.toString() + "\"");            }          }        } else {          String entityName=fEntityScanner.scanName();          if (entityName == null) {            reportFatalError("NameRequiredInReference",null);          } else           if (entityDepth == fEntityDepth) {            fStringBuffer2.append(entityName);          }          if (!fEntityScanner.skipChar(';')) {            reportFatalError("SemicolonRequiredInReference",new Object[]{entityName});          } else           if (entityDepth == fEntityDepth) {            fStringBuffer2.append(';');          }          if (entityName == fAmpSymbol) {            fStringBuffer.append('&');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value5: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fAposSymbol) {            fStringBuffer.append('\'');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value7: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fLtSymbol) {            fStringBuffer.append('<');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value9: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fGtSymbol) {            fStringBuffer.append('>');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** valueB: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fQuotSymbol) {            fStringBuffer.append('"');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** valueD: \"" + fStringBuffer.toString() + "\"");            }          } else {            if (fEntityManager.isExternalEntity(entityName)) {              reportFatalError("ReferenceToExternalEntity",new Object[]{entityName});            } else {              if (!fEntityManager.isDeclaredEntity(entityName)) {                if (checkEntities) {                  if (fValidation) {                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"EntityNotDeclared",new Object[]{entityName},XMLErrorReporter.SEVERITY_ERROR);                  }                } else {                  reportFatalError("EntityNotDeclared",new Object[]{entityName});                }              }              fEntityManager.startEntity(entityName,true);            }          }        }      } else       if (c == '<') {        reportFatalError("LessthanInAttValue",new Object[]{eleName,atName});        fEntityScanner.scanChar();        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }      } else       if (c == '%' || c == ']') {        fEntityScanner.scanChar();        fStringBuffer.append((char)c);        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }        if (DEBUG_ATTR_NORMALIZATION) {          System.out.println("** valueF: \"" + fStringBuffer.toString() + "\"");        }      } else       if (c == '\n' || c == '\r') {        fEntityScanner.scanChar();        fStringBuffer.append(' ');        if (entityDepth == fEntityDepth) {          fStringBuffer2.append('\n');        }      } else       if (c != -1 && XMLChar.isHighSurrogate(c)) {        fStringBuffer3.clear();        if (scanSurrogates(fStringBuffer3)) {          fStringBuffer.append(fStringBuffer3);          if (entityDepth == fEntityDepth) {            fStringBuffer2.append(fStringBuffer3);          }          if (DEBUG_ATTR_NORMALIZATION) {            System.out.println("** valueI: \"" + fStringBuffer.toString() + "\"");          }        }      } else       if (c != -1 && isInvalidLiteral(c)) {        reportFatalError("InvalidCharInAttValue",new Object[]{eleName,atName,Integer.toString(c,16)});        fEntityScanner.scanChar();        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }      }      c=fEntityScanner.scanLiteral(quote,value);      if (entityDepth == fEntityDepth) {        fStringBuffer2.append(value);      }      normalizeWhitespace(value);    } while (c != quote || entityDepth != fEntityDepth);    fStringBuffer.append(value);    if (DEBUG_ATTR_NORMALIZATION) {      System.out.println("** valueN: \"" + fStringBuffer.toString() + "\"");    }    value.setValues(fStringBuffer);    fScanningAttribute=false;  }  nonNormalizedValue.setValues(fStringBuffer2);  int cquote=fEntityScanner.scanChar();  if (cquote != quote) {    reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});  }  return nonNormalizedValue.equals(value.ch,value.offset,value.length);}  }
class C{  public static Complex[] scaleArray(Complex[] f,double d){  for (int i=0; i < f.length; i++) {    f[i]=new Complex(d * f[i].getReal(),d * f[i].getImaginary());  }  return f;}  }
class C{  @RequestMapping(value="/",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<RoleDTO> update(@RequestBody RoleDTO roleDTO) throws URISyntaxException {  log.debug("Update RoleDTO : {}",roleDTO);  if (!roleDTO.isIdSet()) {    return create(roleDTO);  }  RoleDTO result=roleDTOService.save(roleDTO);  return ResponseEntity.ok().body(result);}  }
class C{  public boolean isNeverUploadCrashDump(){  if (isCellularExperimentEnabled())   return !isUsageAndCrashReportingEnabled();  return !isUploadCrashDumpEnabled();}  }
class C{  public int size(){  return mSize;}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  private void initializeFindText(){  mSettingFindTextProgrammatically=true;  String findText=null;  if (mSettingFindTextProgrammatically) {    findText=mFindInPageBridge.getPreviousFindText();    if (findText.isEmpty() && !mCurrentTab.isIncognito()) {      findText=mLastUserSearch;    }    mSearchKeyShouldTriggerSearch=true;  } else {    mSearchKeyShouldTriggerSearch=false;  }  mFindQuery.setText(findText);  mSettingFindTextProgrammatically=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_CARRIER_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1390196,value1,value0);}  }
class C{  public ReversePseudoTopologicalOrderer(){  super();  setReverseOrder(true);}  }
class C{  public void monitorStatusChanged(MonitorStatusChangeEvent event){}  }
class C{  public void logStatisticsAsTableDriver(){}  }
class C{  public void updateCurrentPage(Object page){  scenarioContext.add(ContextKeys.CURRENT_PAGE,page);}  }
class C{  private void error(Element element,String message,Object... args){  if (args.length > 0) {    message=String.format(message,args);  }  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,message,element);}  }
class C{  public NewsfeedAddBanQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.addBan",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public boolean shouldDerivedDiscoveryDoc(){  return deriveDiscoveryDoc;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  ensureTextSet();  WritableUtils.writeVInt(out,_text.limit());  out.write(_text.array(),0,_text.limit());}  }
class C{  public boolean containsValue(int val){  Object[] keys=_set;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public DefaultChunkListDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(entityName,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  public static java.sql.Timestamp monthBegin(){  Calendar mth=Calendar.getInstance();  mth.set(Calendar.DAY_OF_MONTH,1);  mth.set(Calendar.HOUR_OF_DAY,0);  mth.set(Calendar.MINUTE,0);  mth.set(Calendar.SECOND,0);  mth.set(Calendar.MILLISECOND,0);  mth.set(Calendar.AM_PM,Calendar.AM);  return new java.sql.Timestamp(mth.getTime().getTime());}  }
class C{  protected Map<Dimension,Set<ApiFilter>> generateFilters(String filterQuery,LogicalTable table,DimensionDictionary dimensionDictionary) throws BadApiRequestException {  LOG.trace("Dimension Dictionary: {}",dimensionDictionary);  Map<Dimension,Set<ApiFilter>> generated=new LinkedHashMap<>();  if (filterQuery == null || "".equals(filterQuery)) {    return generated;  }  List<String> apiFilters=Arrays.asList(filterQuery.split(COMMA_AFTER_BRACKET_PATTERN));  for (  String apiFilter : apiFilters) {    ApiFilter newFilter;    try {      newFilter=new ApiFilter(apiFilter,table,dimensionDictionary);    } catch (    BadFilterException filterException) {      throw new BadApiRequestException(filterException.getMessage(),filterException);    }    if (!BardFeatureFlag.DATA_FILTER_SUBSTRING_OPERATIONS.isOn()) {      FilterOperation filterOperation=newFilter.getOperation();      if (filterOperation.equals(FilterOperation.startswith) || filterOperation.equals(FilterOperation.contains)) {        throw new BadApiRequestException(ErrorMessageFormat.FILTER_SUBSTRING_OPERATIONS_DISABLED.format());      }    }    Dimension dim=newFilter.getDimension();    if (!generated.containsKey(dim)) {      generated.put(dim,new LinkedHashSet<>());    }    Set<ApiFilter> filterSet=generated.get(dim);    filterSet.add(newFilter);  }  LOG.trace("Generated map of filters: {}",generated);  return generated;}  }
class C{  private static void split(final double d,final double split[]){  if (d < 8e298 && d > -8e298) {    final double a=d * HEX_40000000;    split[0]=(d + a) - a;    split[1]=d - split[0];  } else {    final double a=d * 9.31322574615478515625E-10;    split[0]=(d + a - d) * HEX_40000000;    split[1]=d - split[0];  }}  }
class C{  public StyleImageView disableAnimation(){  styler.disableAnimation();  return this;}  }
class C{  public static void log(Object message,Exception exception){  Gdx.app.log(TAG,String.valueOf(message),exception);}  }
class C{  public GroupsRemoveUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.removeUser",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  public static void onCreate(Activity activity){  FieldsRetainer<Activity> retainer=findFieldsRetainer(activity.getClass());  if (retainer != null) {    retainer.onCreate(activity);  }}  }
class C{  public DateColumn date(){  DateColumn newColumn=DateColumn.create(this.name() + " date");  for (int r=0; r < this.size(); r++) {    long c1=this.getLong(r);    if (c1 == MISSING_VALUE) {      newColumn.add(DateColumn.MISSING_VALUE);    } else {      newColumn.add(PackedLocalDateTime.date(c1));    }  }  return newColumn;}  }
class C{  public static int px2dip(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public boolean isEmpty(){  return q.isEmpty();}  }
class C{  public boolean selectTreeItem(TreeSelectionData data){  SLDTree sldTree=uiMgr.getSymbolTree();  if (sldTree == null) {    return false;  }  return sldTree.selectTreeItem(data);}  }
class C{  public Map<String,Object> addToCartBulkRequirements(String catalogId,Map<String,? extends Object> context){  String itemGroupNumber=(String)context.get("itemGroupNumber");  boolean useRowSubmit=(!context.containsKey("_useRowSubmit")) ? false : "Y".equalsIgnoreCase((String)context.get("_useRowSubmit"));  int rowCount=UtilHttp.getMultiFormRowCount(context);  String facilityId=(String)context.get("facilityId_o_0");  if (UtilValidate.isNotEmpty(facilityId)) {    cart.setFacilityId(facilityId);  }  for (int i=0; i < rowCount; i++) {    String productId=null;    String quantStr=null;    String requirementId=null;    String thisSuffix=UtilHttp.MULTI_ROW_DELIMITER + i;    boolean rowSelected=(!context.containsKey("_rowSubmit" + thisSuffix)) ? false : "Y".equalsIgnoreCase((String)context.get("_rowSubmit" + thisSuffix));    if (useRowSubmit && !rowSelected) {      continue;    }    if (context.containsKey("productId" + thisSuffix)) {      productId=(String)context.get("productId" + thisSuffix);      quantStr=(String)context.get("quantity" + thisSuffix);      requirementId=(String)context.get("requirementId" + thisSuffix);      GenericValue requirement=null;      try {        requirement=EntityQuery.use(delegator).from("Requirement").where("requirementId",requirementId).queryOne();      } catch (      GenericEntityException gee) {      }      if (requirement == null) {        return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"OrderRequirementDoesNotExists",UtilMisc.toMap("requirementId",requirementId),cart.getLocale()));      }      if (UtilValidate.isNotEmpty(quantStr)) {        BigDecimal quantity=BigDecimal.ZERO;        try {          quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantStr,"BigDecimal",null,cart.getLocale());        } catch (        GeneralException ge) {          quantity=BigDecimal.ZERO;        }        if (quantity.compareTo(BigDecimal.ZERO) > 0) {          Iterator<ShoppingCartItem> items=this.cart.iterator();          boolean requirementAlreadyInCart=false;          while (items.hasNext() && !requirementAlreadyInCart) {            ShoppingCartItem sci=items.next();            if (sci.getRequirementId() != null && sci.getRequirementId().equals(requirementId)) {              requirementAlreadyInCart=true;              continue;            }          }          if (requirementAlreadyInCart) {            if (Debug.warningOn())             Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderTheRequirementIsAlreadyInTheCartNotAdding",UtilMisc.toMap("requirementId",requirementId),cart.getLocale()),module);            continue;          }          try {            if (Debug.verboseOn())             Debug.logVerbose("Bulk Adding to cart requirement [" + quantity + "] of ["+ productId+ "]",module);            int index=this.cart.addOrIncreaseItem(productId,null,quantity,null,null,null,requirement.getTimestamp("requiredByDate"),null,null,null,catalogId,null,null,itemGroupNumber,null,dispatcher);            ShoppingCartItem sci=this.cart.items().get(index);            sci.setRequirementId(requirementId);          } catch (          CartItemModifyException e) {            return ServiceUtil.returnError(e.getMessage());          }catch (          ItemNotFoundException e) {            return ServiceUtil.returnError(e.getMessage());          }        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void stopGatherableTask(Player player,boolean save){  Future<?> gatherableTask=player.getController().getTask(TaskId.GATHERABLE);  if (gatherableTask != null) {    if (save) {      long delay=player.getGatherableTimer();      if (delay < 0) {        delay=0;      }      player.setGatherableTimer(delay);    }    player.getController().cancelTask(TaskId.GATHERABLE);  }}  }
class C{  protected void broadcastDownloadSuccessful(DownloadInfo downloadInfo){}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValueObj=(String)undoRedoObject.getNewValue();  functionComboBox.setSelectedItem(newValueObj);}  }
class C{  public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  public DatabaseGetRegionsQuery(VkApiClient client,UserActor actor,int countryId){  super(client,"database.getRegions",GetRegionsResponse.class);  accessToken(actor.getAccessToken());  countryId(countryId);}  }
class C{  public boolean fastContains(double p){  if (isInverted()) {    return (p >= lo() || p <= hi()) && !isEmpty();  } else {    return p >= lo() && p <= hi();  }}  }
class C{  @Override public void release(){  try {    Log.d(SBMP_TAG,"release() 492");    if (pmInterface == null) {      if (!ConnectPlayMediaService()) {        ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);      }    }    if (pmInterface != null) {      Log.d(SBMP_TAG,"release() 500");      try {        pmInterface.release(ServiceBackedMediaPlayer.this.sessionId);      } catch (      RemoteException e) {        e.printStackTrace();        ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);      }      mContext.unbindService(this.mPlayMediaServiceConnection);      this.setWakeMode(mContext,0);      pmInterface=null;      this.sessionId=0;    }    if ((this.mWakeLock != null) && this.mWakeLock.isHeld()) {      Log.d(SBMP_TAG,"Releasing wakelock");      this.mWakeLock.release();    }  } catch (  Exception e) {  }}  }
class C{  private void createIntepretation(Interpretation interpretation,HttpServletRequest request,HttpServletResponse response){  interpretationService.saveInterpretation(interpretation);  response.addHeader("Location",InterpretationSchemaDescriptor.API_ENDPOINT + "/" + interpretation.getUid());  webMessageService.send(WebMessageUtils.created("Interpretation created"),response,request);}  }
class C{  public ProperBigFractionFormat(final NumberFormat format){  this(format,(NumberFormat)format.clone(),(NumberFormat)format.clone());}  }
class C{  public void addDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  String targetKey=buildRemoteName(account.name,file.getRemotePath());  mBoundListeners.put(targetKey,listener);}  }
class C{  public ExecuteStorageFunctionQuery storageFunction(Actor actor,String storageFunctionName){  return new ExecuteStorageFunctionQuery(getClient(),actor,storageFunctionName);}  }
class C{  public EggPokemon(PokemonData proto){  if (!proto.getIsEgg()) {    throw new IllegalArgumentException("You cant build a EggPokemon without a valid PokemonData.");  }  this.proto=proto;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public void initZK() throws PulsarServerException {  String zpath=ResourceQuotaCache.path(null);  ResourceQuota quota=this.readQuotaFromZnode(zpath);  if (!quota.isValid()) {    quota=ResourceQuotaCache.getInitialQuotaValue();    try {      this.saveQuotaToZnode(zpath,quota);    } catch (    Exception e) {      throw new PulsarServerException(e);    }  }}  }
class C{  public void showLoading(List<Integer> skipIds){  switchState(LOADING,null,null,null,null,null,skipIds);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  VeryBusyExpressions vbe=new SimpleVeryBusyExpressions(new ExceptionalUnitGraph(b));  for (  Unit u : b.getUnits()) {    for (    Value v : vbe.getBusyExpressionsAfter(u)) {      u.addTag(new StringTag("Busy expression: " + v,TAG_TYPE));      for (      ValueBox use : u.getUseBoxes()) {        if (use.getValue().equivTo(v))         use.addTag(new ColorTag(ColorTag.RED,TAG_TYPE));      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200873,skillcaster,num0,skillname);}  }
class C{  public void loadNamespaceDestinations(ServiceUnitId suName) throws Exception {  LOG.info("Loading all topics on service unit: {}",suName);  NamespaceName nsName=suName.getNamespaceObject();  List<CompletableFuture<Topic>> persistentTopics=Lists.newArrayList();  long topicLoadStart=System.nanoTime();  for (  String topic : getNamespaceService().getListOfDestinations(nsName.getProperty(),nsName.getCluster(),nsName.getLocalName())) {    try {      DestinationName dn=DestinationName.get(topic);      if (suName.includes(dn)) {        CompletableFuture<Topic> future=brokerService.getTopic(topic);        if (future != null) {          persistentTopics.add(future);        }      }    } catch (    Throwable t) {      LOG.warn("Failed to preload topic {}",topic,t);    }  }  if (!persistentTopics.isEmpty()) {    FutureUtil.waitForAll(persistentTopics).thenRun(null);  }}  }
class C{  @Override public void stopWatch(){  super.stopWatch();  _retries=0;}  }
class C{  public BackgroundPainter(String imageLocation,boolean fixed,boolean tile){  this(Toolkit.getDefaultToolkit().getImage(IOLib.urlFromString(imageLocation)),fixed,tile);}  }
class C{  public void deleteDevice(@Nullable Device info){  if (info != null) {    if (!initIfNecessary()) {      return;    }    ourDeviceManager.removeUserDevice(info);    ourDeviceManager.saveUserDevices();  }}  }
class C{  public boolean handlesPainting(){  return false;}  }
class C{  public static String[] splitProtocol(String packet){  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitProtocolToken);  for (int i=0; i < _partitioningPacket.length - 1; i++) {    _partitioningPacket[i]=_partitioningPacket[i + 1];  }  _partitioningPacket[_partitioningPacket.length - 1]=null;  return _partitioningPacket;}  }
class C{  public static void checkMethodSignature(List<ExecutableElement> elements){  for (  ExecutableElement element : elements) {    if (element.getReturnType().getKind() != TypeKind.VOID) {      throw new WrongReturnTypeException(element);    }    if (!element.getThrownTypes().isEmpty()) {      throw new NoThrowsAllowedException(element);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200883,skillcaster,value0,skillname);}  }
class C{  void createFinish(int width,int height){  if (mWXSDKInstance.getRenderStrategy() == WXRenderStrategy.APPEND_ONCE) {    mWXSDKInstance.onViewCreated(mGodComponent);  }  mWXSDKInstance.onRenderSuccess(width,height);}  }
class C{  private static Principal[] checkPrincipals(Principal[] principals){  if (principals == null) {    return null;  }  principals=principals.clone();  for (int i=principals.length; --i >= 0; ) {    if (principals[i] == null) {      throw new NullPointerException("principal cannot be null");    }  }  return principals;}  }
class C{  public DetailsView(String name,String description,int preferredPosition,JComponent view,JComponent[] options){  tab=new DisplayArea.Tab(name,description,preferredPosition,view,options);}  }
class C{  static List<View> findChilds(@NonNull final ViewGroup viewGroup,@NonNull final List<View> ordoredChilds,@NonNull final ViewFilter viewFilter,final boolean addChildsFromFilteredGroupViews){  for (int childViewIndex=0; childViewIndex < viewGroup.getChildCount(); childViewIndex++) {    final View childView=viewGroup.getChildAt(childViewIndex);    final boolean isNotFiltered=viewFilter.filter(childView);    if (isNotFiltered) {      ordoredChilds.add(childView);    }    if (childView instanceof ViewGroup && (isNotFiltered || addChildsFromFilteredGroupViews)) {      findChilds((ViewGroup)childView,ordoredChilds,viewFilter,addChildsFromFilteredGroupViews);    }  }  return ordoredChilds;}  }
class C{  public ActionButton create(){  ActionButton actionButton=new ActionButton(context);  actionButton.setText(text);  actionButton.setOnClickListener(onClickListener);  actionButton.setTextColor(getTextColor());  return actionButton;}  }
class C{  public long fileSize(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("TYPE I");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    communication.sendFTPCommand("SIZE " + path);    r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    String[] messages=r.getMessages();    if (messages.length != 1) {      throw new FTPIllegalReplyException();    } else {      try {        return Long.parseLong(messages[0]);      } catch (      Throwable t) {        throw new FTPIllegalReplyException();      }    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void prepareChannelsByOrder(){  SequenceTemplateParameterContext sequenceContext=contextProvider.getSequenceContext();  channelsByOrder.clear();  for (  SequenceUUID seqUuid : sequenceContext.getUuids(SequenceType.AUDIO)) {    ContextInfo contextInfo=new ContextInfoBuilder().setSequenceType(SequenceType.AUDIO).setSequenceUuid(seqUuid).build();    String channelsNum=sequenceContext.getParameterValue(SequenceContextParameters.CHANNELS_NUM,contextInfo);    IntStream.rangeClosed(1,Integer.parseInt(channelsNum)).mapToObj(null).forEachOrdered(null);  }}  }
class C{  public static boolean isAndroidProjectWithoutGradleFacet(@NotNull ModuleChunk chunk){  return isAndroidProjectWithoutGradleFacet(chunk.getModules());}  }
class C{  protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){  if (buffer != null) {    buffer.clear();  } else {    buffer=new CharArrayBuffer(64);  }  return buffer;}  }
class C{  public boolean isPrivateService(){  return isPrivateService(getServiceConfig().getName());}  }
class C{  public EnergyNormaliser(DoubleDataSource reference){  this.referencePower=determineAveragePower(reference);  this.amplitudeFactor=-1;}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final ChartColorManager chartColorManager=((Director)getDir()).getDocument().getChartColorManager();  np.matchIgnoreCase("set color=");  Color color=np.getColor();  np.matchIgnoreCase("attribute=");  String attribute=np.getLabelRespectCase();  np.matchIgnoreCase(";");  np.matchIgnoreCase("state=");  String state=np.getLabelRespectCase();  if (attribute != null && state != null) {    chartColorManager.setAttributeStateColor(attribute,state,color);    ((Director)getDir()).getDocument().setDirty(true);  }}  }
class C{  public ServerConfiguration killBookie(InetSocketAddress addr) throws Exception {  BookieServer toRemove=null;  int toRemoveIndex=0;  for (  BookieServer server : bs) {    if (server.getLocalAddress().equals(addr)) {      server.shutdown();      toRemove=server;      break;    }    ++toRemoveIndex;  }  if (toRemove != null) {    stopAutoRecoveryService(toRemove);    bs.remove(toRemove);    return bsConfs.remove(toRemoveIndex);  }  return null;}  }
class C{  public int equivHashCode(){  return 1729;}  }
class C{  @Nullable public File resolveParentDirectory(@Nullable Label label){  return label != null ? resolveParentDirectory(label.blazePackage(),label.ruleName()) : null;}  }
class C{  public Object clone(){  try {    IntObjectHashMap copy=(IntObjectHashMap)super.clone();    copy.table=(int[])copy.table.clone();    copy.values=(Object[])copy.values.clone();    copy.state=(byte[])copy.state.clone();    return copy;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public static void drawArrow(Graphics2D g,Polygon arrow,int x,int y){  arrow.translate(x,y);  g.draw(arrow);  g.fill(arrow);  arrow.translate(-x,-y);}  }
class C{  private void sendInstallNotificationAndNextStep(OMAInfo omaInfo,DownloadInfo downloadInfo,String statusMessage){  if (!sendNotification(omaInfo,downloadInfo,statusMessage)) {    showNextUrlDialog(omaInfo);  }}  }
class C{  public IncompatibleComparatorException(){  super();}  }
class C{  public void startObjectValue(O object,String name){}  }
class C{  @deprecated public static void permute(String source,boolean skipZeros,Set<String> output){  if ((source.length() <= 2) && (UTF16.countCodePoint(source) <= 1)) {    output.add(source);    return;  }  Set<String> subpermute=new HashSet();  int cp;  String chStr;  for (int i=0; i < source.length(); i+=UTF16.getCharCount(cp)) {    cp=UTF16.charAt(source,i);    if ((!skipZeros) || (i == 0) || (UCharacter.getCombiningClass(cp) != 0)) {      subpermute.clear();      permute(source.substring(0,i) + source.substring(i + UTF16.getCharCount(cp)),skipZeros,subpermute);      chStr=UTF16.valueOf(source,i);      for (      String s : subpermute) {        String piece=chStr + s;        output.add(piece);      }    }  }}  }
class C{  public ClassPathResource(String resourceName){  if (resourceName == null)   throw new IllegalStateException("Resource name can't be null");  this.resourceName=resourceName;}  }
class C{  @Override public void close(){}  }
class C{  private void inflateEmptyTextColor(){  if (mEmptyTextColor != R.color.text_empty_color) {    if (mEmptyLayout != R.layout.layout_empty) {      throw new RuntimeException("Cannot assign the emptyTextColor attribute. " + "You already overridden the entire empty view, no need to specify " + "custom color or custom text message");    } else {      textEmpty.setTextColor(ColorUtil.getColorWrapper(mContext,mEmptyTextColor));    }  }}  }
class C{  public GroupsEditQuery market(Boolean value){  return unsafeParam("market",value);}  }
class C{  @Override public int stop(int exitCode){  if (logger.isInfoEnabled()) {    logger.info("stop() - exitCode:" + exitCode);  }  try {    if (cb != null) {      cb.close();    }    CloseVoteFinder.getInstance().shutDown();  } catch (  Throwable e) {    logger.error("stop(int)",e);  }  if (logger.isInfoEnabled()) {    logger.info("stop() end");  }  return exitCode;}  }
class C{  @Override public ILongPutter put(long index,long value){  if (index < limit()) {    index<<=3;    final ByteBuffer buf=buffers[getWhichBuffer(index)];    int indexBuffer=getIndexInBuffer(index);    buf.put(indexBuffer++,(byte)(value >> 56));    buf.put(indexBuffer++,(byte)(value >> 48));    buf.put(indexBuffer++,(byte)(value >> 40));    buf.put(indexBuffer++,(byte)(value >> 32));    buf.put(indexBuffer++,(byte)(value >> 24));    buf.put(indexBuffer++,(byte)(value >> 16));    buf.put(indexBuffer++,(byte)(value >> 8));    buf.put(indexBuffer,(byte)(value));  } else   throw new ArrayIndexOutOfBoundsException("" + index);  return this;}  }
class C{  public static List<String> propertyAsList(Properties props,String propertyName){  String prop=props.getProperty(propertyName);  if (prop != null) {    return Arrays.asList(prop.split(Pattern.quote(",")));  } else {    return null;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_HE_REJECT_DUEL(String value0){  return new SM_SYSTEM_MESSAGE(1300097,value0);}  }
class C{  public static RealMatrix createRealIdentityMatrix(int dimension){  final RealMatrix m=createRealMatrix(dimension,dimension);  for (int i=0; i < dimension; ++i) {    m.setEntry(i,i,1.0);  }  return m;}  }
class C{  @Override public void windBarbValueUpdated(){  setCachedExpression(generateExpression());  FieldConfigBase parent=getParent();  if (parent != null) {    parent.valueUpdated();  }}  }
class C{  @Deprecated public static IOFileFilter orFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new OrFileFilter(filter1,filter2);}  }
class C{  public LabelRenderer(String textField,String imageField){  setTextField(textField);  setImageField(imageField);}  }
class C{  public Whitelist(Collection<String> patterns,int statusCode){  if (patterns == null || patterns.isEmpty()) {    this.patterns=Collections.emptyList();  } else {    ImmutableList.Builder<Pattern> builder=ImmutableList.builder();    for (    String pattern : patterns) {      builder.add(Pattern.compile(pattern));    }    this.patterns=builder.build();  }  this.statusCode=statusCode;  this.enabled=true;}  }
class C{  private void startHotRefresh(){  try {    String host=new URL(mUri.toString()).getHost();    String wsUrl="ws://" + host + ":8082";    mWXHandler.obtainMessage(Constants.HOT_REFRESH_CONNECT,0,0,wsUrl).sendToTarget();  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  static public Document buildClusterXMLDom(int _totalMembers,int _backupMembers,String _clusterSchemaName,String _clusterName,String _distCacheConfigName,String _jmsConfigName,String _groups) throws ParserConfigurationException {  Document rootDoc=XmlUtils.getDocumentBuilder().newDocument();  Element clusterConfigTag=rootDoc.createElement(ClusterXML.CLUSTER_CONFIG_TAG);  Node clusterSchemaTag=createTextNode(rootDoc,ClusterXML.CLUSTER_SCHEMA_NAME_TAG,_clusterSchemaName);  clusterConfigTag.appendChild(clusterSchemaTag);  Node clusterNameTag=createTextNode(rootDoc,ClusterXML.CLUSTER_NAME_TAG,_clusterName);  clusterConfigTag.appendChild(clusterNameTag);  if (!JSpaceUtilities.isEmpty(_distCacheConfigName)) {    Element dcacheConfigElem=rootDoc.createElement(ClusterXML.DCACHE_TAG);    dcacheConfigElem.appendChild(createTextNode(rootDoc,ClusterXML.DCACHE_CONFIG_NAME_TAG,_distCacheConfigName));    clusterConfigTag.appendChild(dcacheConfigElem);  }  if (!JSpaceUtilities.isEmpty(_jmsConfigName)) {    Element jmsConfigElem=rootDoc.createElement(ClusterXML.JMS_TAG);    jmsConfigElem.appendChild(createTextNode(rootDoc,ClusterXML.JMS_CONFIG_NAME_TAG,_jmsConfigName));    clusterConfigTag.appendChild(jmsConfigElem);  }  Node notifyRecoveryTag=createTextNode(rootDoc,ClusterXML.NOTIFY_RECOVERY_TAG,ClusterXML.NOTIFY_RECOVERY_DEFAULT_VALUE);  clusterConfigTag.appendChild(notifyRecoveryTag);  Element clusterMembersTag=rootDoc.createElement(ClusterXML.CLUSTER_MEMBERS_TAG);  clusterConfigTag.appendChild(clusterMembersTag);  createClusterMembers(rootDoc,clusterMembersTag,_totalMembers,_backupMembers,_clusterName,_groups);  rootDoc.appendChild(clusterConfigTag);  return rootDoc;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT1(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400001,value0,value1);}  }
class C{  private void onOverrideUrlLoadingAndLaunchIntent(){  if (mTab.getWebContents() == null)   return;  if (shouldCloseContentsOnOverrideUrlLoadingAndLaunchIntent()) {    if (mTab.getLaunchType() == TabLaunchType.FROM_EXTERNAL_APP) {      mActivity.moveTaskToBack(true);    }    mActivity.getTabModelSelector().closeTab(mTab);  } else   if (mTab.getTabRedirectHandler().isOnNavigation()) {    int lastCommittedEntryIndexBeforeNavigation=mTab.getTabRedirectHandler().getLastCommittedEntryIndexBeforeStartingNavigation();    if (getLastCommittedEntryIndex() > lastCommittedEntryIndexBeforeNavigation) {      mClearAllForwardHistoryRequired=true;      mTab.getWebContents().getNavigationController().goToNavigationIndex(lastCommittedEntryIndexBeforeNavigation);    }  }}  }
class C{  public void drag(long time,float x,float y,float deltaX,float deltaY,float totalX,float totalY){  resetResizeTimeout(false);  deltaX=MathUtils.flipSignIf(deltaX,LocalizationUtils.isLayoutRtl());  mNewTabButton.drag(x,y);  if (mLastPressedCloseButton != null) {    if (!mLastPressedCloseButton.drag(x,y))     mLastPressedCloseButton=null;  }  if (mInReorderMode) {    float accumulatedDeltaX=x - mLastReorderX;    if (Math.abs(accumulatedDeltaX) >= 1.f) {      if (!LocalizationUtils.isLayoutRtl()) {        if (deltaX >= 1.f) {          mReorderState|=REORDER_SCROLL_RIGHT;        } else         if (deltaX <= -1.f) {          mReorderState|=REORDER_SCROLL_LEFT;        }      } else {        if (deltaX >= 1.f) {          mReorderState|=REORDER_SCROLL_LEFT;        } else         if (deltaX <= -1.f) {          mReorderState|=REORDER_SCROLL_RIGHT;        }      }      mLastReorderX=x;      updateReorderPosition(accumulatedDeltaX);    }  } else   if (!mScroller.isFinished()) {    mScroller.setFinalX((int)(mScroller.getFinalX() + deltaX));  } else {    float fastExpandDelta=calculateOffsetToMakeTabVisible(mInteractingTab,true,true,true);    if (mInteractingTab != null && fastExpandDelta != 0.f) {      if ((fastExpandDelta > 0 && deltaX > 0) || (fastExpandDelta < 0 && deltaX < 0)) {        mScroller.startScroll(mScrollOffset,0,(int)fastExpandDelta,0,time,EXPAND_DURATION_MS);      }    } else {      updateScrollOffsetPosition((int)(mScrollOffset + deltaX));    }  }  if (!mInReorderMode) {    final float absTotalX=Math.abs(totalX);    final float absTotalY=Math.abs(totalY);    if (totalY > mReorderMoveStartThreshold && absTotalX < mReorderMoveStartThreshold * 2.f && (absTotalX > EPSILON && (absTotalY / absTotalX) > TAN_OF_REORDER_ANGLE_START_THRESHOLD)) {      startReorderMode(time,x,x - totalX);    }  }  if (!mInReorderMode)   mInteractingTab=null;  mUpdateHost.requestUpdate();}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (corruptedOutputStream) {    return;  }  if (sizeRollingPolicy.hasReachedLimit() || timeRollingPolicy.needsRollover()) {    configureOutputStream();  }  super.publish(record);  super.flush();}  }
class C{  @Override public void refresh0(int year,int month){  if (mode == Constant.MODE_CALENDAR) {    selectedYear=year;    selectedMonth=month;    selectedIndex=-1;    calendar.set(Calendar.YEAR,selectedYear);    calendar.set(Calendar.MONTH,selectedMonth - 1);    calendar.set(Calendar.DAY_OF_MONTH,1);    initial();    invalidate();    if (onRefreshListener != null) {      onRefreshListener.onRefresh();    }  }}  }
class C{  public static final void drawCircleFromTopLeft(GL2 gl,double sx,double sy,double w,double h,boolean points,boolean line){  double r=Math.min(w,h) * 0.5;  RenderUtilities.drawCircleFromCenter(gl,r,sx + r,sy - r,points,line);}  }
class C{  public static Value binop(Value val){  if (val == null)   return null;  if (val instanceof BinopExpr)   return val;  return null;}  }
class C{  boolean updateValueType(Object value){  if (_valueTypeFinallySet || value == null)   return _valueTypeFinallySet;  Class<?> type=value.getClass();  if (_valueType == null) {synchronized (this) {      if (_valueType == null)       _valueType=type;    }  } else   if (_valueType != type && !_valueType.isAssignableFrom(type)) {synchronized (this) {      _valueType=TypeDataIndex.getCommonSuperType(type,_valueType);    }  }  if (_valueType == Object.class)   _valueTypeFinallySet=true;  return _valueTypeFinallySet;}  }
class C{  public void childrenEndGroup() throws XNIException {}  }
class C{  protected Locale determineLocale(String text,Locale defaultLocale){  if (defaultLocale == null) {    defaultLocale=Locale.getDefault();    Log.w(Mary.LOG,"Locale is null, overriding with " + defaultLocale);  }  return defaultLocale;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((columnSchema == null) ? 0 : columnSchema.hashCode());  return result;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public SourceAttr(String name){  this.name=new AsciiCP(name);}  }
class C{  protected final boolean isViewAttached(){  return mView != null;}  }
class C{  public void putGrammar(Grammar grammar){  if (!fPoolIsLocked) {synchronized (fGrammars) {      clean();      XMLGrammarDescription desc=grammar.getGrammarDescription();      int hash=hashCode(desc);      int index=(hash & 0x7FFFFFFF) % fGrammars.length;      for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {        if (entry.hash == hash && equals(entry.desc,desc)) {          if (entry.grammar.get() != grammar) {            entry.grammar=new SoftGrammarReference(entry,grammar,fReferenceQueue);          }          return;        }      }      Entry entry=new Entry(hash,index,desc,grammar,fGrammars[index],fReferenceQueue);      fGrammars[index]=entry;      fGrammarCount++;    }  }}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public AdsDeleteAdsQuery deleteAds(UserActor actor,int accountId,String ids){  return new AdsDeleteAdsQuery(getClient(),actor,accountId,ids);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_WIN_FORT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1320003,value0,value1);}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_FAILED(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300456,descriptionId);}  }
class C{  public boolean saveImage(OutputStream output,String format,double scale){  try {    Dimension d=new Dimension((int)(scale * getWidth()),(int)(scale * getHeight()));    BufferedImage img=getNewOffscreenBuffer(d.width,d.height);    Graphics2D g=(Graphics2D)img.getGraphics();    Point2D p=new Point2D.Double(0,0);    zoom(p,scale);    boolean q=isHighQuality();    setHighQuality(true);    paintDisplay(g,d);    setHighQuality(q);    zoom(p,1 / scale);    ImageIO.write(img,format,output);    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public void testGenerateAltQueriesFuzz(){  Random rand=new Random();  SearchcodeLib scl=new SearchcodeLib();  for (int i=0; i < 10; i++) {    StringBuilder bf=new StringBuilder();    for (int j=0; j < 5; j++) {      if (j % 2 == 0) {        bf.append(RandomStringUtils.randomAscii(rand.nextInt(10) + 1) + " ");      } else {        bf.append(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1) + " ");      }      Singleton.getSpellingCorrector().putWord(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1));switch (rand.nextInt(5)) {case 1:        bf.append(" AND ");      break;case 2:    bf.append(" OR ");  break;case 3:bf.append(" NOT ");break;case 4:bf.append(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1));break;default :break;}}scl.generateAltQueries(bf.toString());}}  }
class C{  @SafeVarargs public static final <T>T firstNonNull(T... objects){  if (objects != null) {    for (    T object : objects) {      if (object != null) {        return object;      }    }  }  return null;}  }
class C{  public static String fieldNameToMethodName(String methodPrefix,String fieldName){  return fieldNameToMethodName(methodPrefix,fieldName,false);}  }
class C{  protected boolean shouldDrawValues(IDataSet set){  return set.isVisible() && set.isDrawValuesEnabled();}  }
class C{  private void drawAllComponents(Graphics2D gc,NlComponent component,@Nullable ScreenView blueprintView){  Color color=gc.getColor();  if (myComponent != null && component.getId() != null && component.getId().equals(myComponent.getId())) {    gc.setColor(myColorSet.getSelectedFrames());  }  drawComponent(gc,component,blueprintView);  gc.setColor(color);  int childCount=component.getChildCount();  for (int i=0; i < childCount; i++) {    drawAllComponents(gc,component.getChild(i),blueprintView);  }}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  @Override public final boolean readBoolean() throws IOException {  return dis.readBoolean();}  }
class C{  public SQLModel(Connection connection){  this.connection=connection;  this.tables=new ArrayList<>();  ResultSet results=null;  try {    results=connection.getMetaData().getTables(null,null,null,new String[]{"TABLE"});    while (results.next()) {      String tableName=results.getString("TABLE_NAME");      tables.add(new SQLTable(tableName,connection));    }  } catch (  SQLException e) {    throw new RuntimeException(e);  } finally {    closeQuietly(results);  }}  }
class C{  public JsonReader newJsonReader(Reader reader){  JsonReader jsonReader=new JsonReader(reader);  jsonReader.setLenient(lenient);  return jsonReader;}  }
class C{  @Override public ResultSet map(ResultSet resultSet){  Pagination<Result> pages=new AllPagesPagination<>(resultSet,paginationParameters);  AbstractResponse.addLinks(pages,uriBuilder,responseProcessor);  return new ResultSet(pages.getPageOfData(),map(resultSet.getSchema()));}  }
class C{  public static boolean[] convertStringToBooleanArr(String noDictionaryColMapping){  String[] splittedValue=null != noDictionaryColMapping ? noDictionaryColMapping.split(CarbonCommonConstants.COMA_SPC_CHARACTER) : new String[0];  boolean[] noDictionaryMapping=new boolean[splittedValue.length];  int index=0;  for (  String str : splittedValue) {    noDictionaryMapping[index++]=Boolean.parseBoolean(str);  }  return noDictionaryMapping;}  }
class C{  public static void reduceAccordingSegment(TtEltype tt,long offsetMS,long startMS,long endMS){  TtmlTimeConverter ttConverter=new TtmlTimeConverter(tt);  long totalBegin=ttConverter.parseTimeExpression(tt.getBody().getBegin());  tt.getBody().setBegin(null);  tt.getBody().setEnd(null);  tt.getBody().setDur(null);  Iterator<DivEltype> divIt=tt.getBody().getDiv().iterator();  while (divIt.hasNext()) {    DivEltype div=divIt.next();    totalBegin+=ttConverter.parseTimeExpression(div.getBegin());    div.setBegin(null);    div.setEnd(null);    div.setDur(null);    Iterator blockIt=div.getBlockClass().iterator();    while (blockIt.hasNext()) {      Object blockClass=blockIt.next();      if (!(blockClass instanceof PEltype)) {        blockIt.remove();        continue;      }      PEltype p=(PEltype)blockClass;      long pBegin=totalBegin + ttConverter.parseTimeExpression(p.getBegin());      long pEnd=totalBegin + getEnd(ttConverter,p.getBegin(),p.getEnd(),p.getDur());      if (pEnd < startMS || pBegin > endMS) {        blockIt.remove();        continue;      }      if (pBegin < startMS) {        pBegin=startMS;      }      if (pEnd > endMS) {        pEnd=endMS;      }      p.setBegin(ConversionHelper.msToSmpteTimecode(offsetMS + pBegin - startMS,ttConverter.getUnitsInSec()));      p.setEnd(ConversionHelper.msToSmpteTimecode(offsetMS + pEnd - startMS,ttConverter.getUnitsInSec()));      p.setDur(null);    }    if (div.getBlockClass().isEmpty()) {      divIt.remove();    }  }}  }
class C{  private void processImportElement(StartElement element,XMLEventWriter writer,Properties metadata) throws XMLStreamException, IOException {  File file=new File(baseDir,getAttributeValue(element,qNameFile,null,"Attribute 'file' is missing or empty."));  if (!file.exists()) {    throw new FileNotFoundException("Missing file to import:" + file.getPath());  }  boolean skipRoot=Boolean.valueOf(getAttributeValue(element,qNameSkipRoot,"false",null));  boolean recImport=Boolean.valueOf(getAttributeValue(element,qNameRecursiveImport,"true",null));  if (file.isFile()) {    importFile(file,skipRoot,writer,metadata);  } else {    logger.debug("Processing dir " + file);    Collection<File> files=listFiles(file,recImport);    for (    File childFile : files) {      importFile(childFile,skipRoot,writer,metadata);    }  }}  }
class C{  public SandboxRay(String name,Vector2 start,double direction){  super(start,direction);  this.name=name;}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public static void moveToBindLocation(Player player,boolean useTeleport){  float x, y, z;  int worldId;  byte h=0;  if (player.getBindPoint() != null) {    BindPointPosition bplist=player.getBindPoint();    worldId=bplist.getMapId();    x=bplist.getX();    y=bplist.getY();    z=bplist.getZ();    h=bplist.getHeading();  } else {    PlayerInitialData.LocationData locationData=DataManager.PLAYER_INITIAL_DATA.getSpawnLocation(player.getRace());    worldId=locationData.getMapId();    x=locationData.getX();    y=locationData.getY();    z=locationData.getZ();  }  InstanceService.onLeaveInstance(player);  if (useTeleport) {    teleportTo(player,worldId,x,y,z,h);  } else {    World.getInstance().setPosition(player,worldId,1,x,y,z,h);  }}  }
class C{  public static void fitViewToBounds(Display display,Rectangle2D bounds,long duration){  fitViewToBounds(display,bounds,null,duration);}  }
class C{  public State(){}  }
class C{  public boolean interiorIntersects(final S1Interval y){  if (isEmpty() || y.isEmpty() || lo() == hi()) {    return false;  }  if (isInverted()) {    return y.isInverted() || y.lo() < hi() || y.hi() > lo();  } else {    if (y.isInverted()) {      return y.lo() < hi() || y.hi() > lo();    }    return (y.lo() < hi() && y.hi() > lo()) || isFull();  }}  }
class C{  public HashJobStore(Map<String,JobRow> store){  this.store=store;}  }
class C{  private void handleDeletedObjects(Collection<OpenJPAStateManager> sms,ArrayList<Exception> exceptions,IJSpace space){  for (  OpenJPAStateManager sm : sms) {    ClassMetaData cm=sm.getMetaData();    if (_classesRelationStatus.containsKey(cm.getDescribedType()))     continue;    try {      final Object[] ids=ApplicationIds.toPKValues(sm.getObjectId(),cm);      final ISpaceProxy proxy=(ISpaceProxy)space;      final ITypeDesc typeDescriptor=proxy.getDirectProxy().getTypeManager().getTypeDescByName(sm.getMetaData().getDescribedType().getName());      final Object routing=sm.fetch(typeDescriptor.getRoutingPropertyId());      ITemplatePacket template;      if (typeDescriptor.isAutoGenerateId())       template=TemplatePacketFactory.createUidPacket((String)ids[0],routing,0,QueryResultTypeInternal.OBJECT_JAVA); else       template=TemplatePacketFactory.createIdPacket(ids[0],routing,0,typeDescriptor,QueryResultTypeInternal.OBJECT_JAVA,null);      int result=proxy.clear(template,_transaction,0);      if (result != 1)       throw new Exception("Unable to clear object from space.");    } catch (    Exception e) {      exceptions.add(e);    }  }}  }
class C{  public static Bitmap toBitmap(byte[] bytes,int width,int height){  Bitmap bitmap=null;  if (bytes.length != 0) {    try {      BitmapFactory.Options options=new BitmapFactory.Options();      options.inDither=false;      options.inPreferredConfig=null;      if (width > 0 && height > 0) {        options.outWidth=width;        options.outHeight=height;      }      bitmap=BitmapFactory.decodeByteArray(bytes,0,bytes.length,options);    } catch (    Exception e) {      LogUtils.error(e);    }  }  return bitmap;}  }
class C{  DataSourceContainer(DataSource owner){  this.owner=owner;}  }
class C{  final public static long updateCollection(String collection,Bson query,V v){  Document d=new Document();  for (  String name : v.names()) {    Object v1=v.value(name);    d.append(name,v1);  }  try {    log.debug("data=" + d);    MongoCollection<Document> c=MongoHelper.getCollection(collection);    UpdateResult r=c.updateMany(query,new Document("$set",d));    if (log.isDebugEnabled())     log.debug("updated collection=" + collection + ", query="+ query+ ", d="+ d+ ", n="+ r.getModifiedCount()+ ",result="+ r);    return r.getModifiedCount();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }  return 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_MATCH_ALREADY_SENT_APPLY(String value0){  return new SM_SYSTEM_MESSAGE(1400215,value0);}  }
class C{  public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays){  return addOrderTerm(termTypeId,termValue,termDays,null);}  }
class C{  public CallableTaskAdapter(){}  }
class C{  public SampleInfo(ByteBuffer bb) throws IOException {  numberOfChannels=bb.getInt();  sampleRate=bb.getInt();  coeffMin=bb.getFloat();  coeffRange=bb.getFloat();  postEmphasis=bb.getFloat();  residualFold=bb.getInt();}  }
class C{  public String decrypt(String input){  if (input == null || input.length() == 0) {    return input;  }  byte[] inputBytes=input.getBytes(UTF_8);  byte[] outputBytes=decrypt(inputBytes);  return new String(outputBytes,UTF_8);}  }
class C{  @Override public void endConditional(Augmentations augmentations) throws XNIException {}  }
class C{  public boolean print_graph(){  return soot.PhaseOptions.getBoolean(options,"print-graph");}  }
class C{  public static RecipientEntry constructGeneratedEntry(String display,String address,boolean isValid){  return new RecipientEntry(ENTRY_TYPE_PERSON,display,address,INVALID_DESTINATION_TYPE,null,GENERATED_CONTACT,null,GENERATED_CONTACT,null,true,isValid,null);}  }
class C{  public static void snapAnchor(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,SnapCandidate candidate){  if (widget.getParent() != null) {    if (!anchor.isVerticalAnchor()) {      checkHorizontalParentMarginSnap(anchor,ConstraintAnchor.Type.RIGHT,-DEFAULT_MARGIN,candidate);      checkHorizontalParentMarginSnap(anchor,ConstraintAnchor.Type.LEFT,DEFAULT_MARGIN,candidate);    } else {      checkVerticalParentMarginSnap(anchor,ConstraintAnchor.Type.BOTTOM,-DEFAULT_MARGIN,candidate);      checkVerticalParentMarginSnap(anchor,ConstraintAnchor.Type.TOP,DEFAULT_MARGIN,candidate);    }  }  for (  ConstraintWidget w : widgets) {    if (w == widget) {      continue;    }    ArrayList<ConstraintAnchor> anchorsTarget=w.getAnchors();    for (    ConstraintAnchor at : anchorsTarget) {      snapCheck(anchor,at,candidate,CONNECTION_SLOPE);    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set drawer=");  String drawerName=np.getWordMatchesIgnoringCase(Basic.toString(ViewerBase.DiagramType.values()," "));  np.matchIgnoreCase(";");  ViewerBase viewer=(ViewerBase)getViewer();  viewer.setDrawerType(drawerName);  viewer.updateTree();}  }
class C{  private void calculateVolumeLevel(byte[] buffer,float[] spectrum){  long currentMaxDb=getMaxDecibels(buffer);  float coefficient=(float)currentMaxDb / maxVolumeDb;  float maxCoefficient=0;  for (int i=0; i < NUMBER_OF_FREQ_BARS; i++) {    if (maxCoefficient < spectrum[i]) {      maxCoefficient=spectrum[i];    }  }  if (maxCoefficient > 0) {    coefficient/=maxCoefficient;    for (int i=0; i < NUMBER_OF_FREQ_BARS; i++) {      spectrum[i]*=coefficient;    }  }}  }
class C{  public static boolean parseBooleanParam(String value){  if (value == null) {    return false;  }  if (value.equalsIgnoreCase("false") || value.equals("0")) {    return false;  }  return true;}  }
class C{  protected void processSceneActivationSet(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int sceneId=serialMessage.getMessagePayloadByte(offset + 1);  int sceneTime=0;  if (serialMessage.getMessagePayload().length > (offset + 2)) {    sceneTime=serialMessage.getMessagePayloadByte(offset + 2);  }  logger.debug(String.format("Scene activation node from node %d: Scene %d, Time %d",this.getNode().getNodeId(),sceneId,sceneTime));  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),sceneId);  this.getController().notifyEventListeners(zEvent);}  }
class C{  public String readString() throws IOException {  int size=readInt();  if (Math.abs(size) > 100000000)   throw new IOException("Unreasonable string length: " + Math.abs(size));  byte[] bytes=new byte[Math.abs(size)];  int got=in.read(bytes,0,Math.abs(size));  if (got != Math.abs(size))   throw new IOException("Bytes read: " + got + ", expected: "+ Math.abs(size));  if (size < 0) {    try {      return compressor.inflateByteArray2String(-size,bytes);    } catch (    DataFormatException e) {      throw new IOException(e.getMessage());    }  } else {    return Compressor.convertUncompressedByteArray2String(size,bytes);  }}  }
class C{  public static TangoPoseData matrixToTangoPose(Matrix4 transform){  Vector3 p=transform.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(transform);  TangoPoseData tangoPose=new TangoPoseData();  double[] t=tangoPose.translation=new double[3];  t[0]=p.x;  t[1]=p.y;  t[2]=p.z;  double[] r=tangoPose.rotation=new double[4];  r[0]=q.x;  r[1]=q.y;  r[2]=q.z;  r[3]=q.w;  return tangoPose;}  }
class C{  public boolean canEvolve(){  return !EvolutionInfo.isFullyEvolved(getPokemonId()) && (getCandy() >= getCandiesToEvolve());}  }
class C{  public DynamicTemplateParameterContext appendParameter(DynamicContextParameters param,String paramValue,boolean deleteOnExit){  return appendParameter(param,paramValue,deleteOnExit,ContextInfo.EMPTY);}  }
class C{  public MullerSolver(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public void onAfterSpawn(){}  }
class C{  protected long doRenew(long duration) throws UnknownLeaseException, RemoteException {  return server.renewEventLease(eventID,leaseID,duration);}  }
class C{  public void moveToRecordId(RecordId rid){  moveTo(rid.block().number());  rp.moveToId(rid.id());}  }
class C{  public static String serveImage(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  ServletContext application=session.getServletContext();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Map<String,Object> parameters=UtilHttp.getParameterMap(request);  Debug.logInfo("Img UserAgent - " + request.getHeader("User-Agent"),module);  String dataResourceId=(String)parameters.get("imgId");  if (UtilValidate.isEmpty(dataResourceId)) {    String errorMsg="Error getting image record from db: " + " dataResourceId is empty";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  try {    GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).cache().queryOne();    if (!"Y".equals(dataResource.getString("isPublic"))) {      GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");      if (userLogin == null) {        String errorMsg="You must be logged in to download the Data Resource with ID [" + dataResourceId + "]";        Debug.logError(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        return "error";      }      long contentAndRoleCount=EntityQuery.use(delegator).from("ContentAndRole").where("partyId",userLogin.get("partyId"),"dataResourceId",dataResourceId).queryCount();      if (contentAndRoleCount == 0) {        String errorMsg="You do not have permission to download the Data Resource with ID [" + dataResourceId + "], ie you are not associated with it.";        Debug.logError(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        return "error";      }    }    String mimeType=DataResourceWorker.getMimeType(dataResource);    String userAgent=request.getHeader("User-Agent");    if (userAgent.indexOf("MSIE") > -1) {      Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);      mimeType="application/octet-stream";    }    if (mimeType != null) {      response.setContentType(mimeType);    }    OutputStream os=response.getOutputStream();    Map<String,Object> resourceData=DataResourceWorker.getDataResourceStream(dataResource,"",application.getInitParameter("webSiteId"),UtilHttp.getLocale(request),application.getRealPath("/"),false);    os.write(IOUtils.toByteArray((ByteArrayInputStream)resourceData.get("stream")));    os.flush();  } catch (  GenericEntityException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }catch (  GeneralException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }catch (  IOException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public static Aggregate<Object,Long> count(){  return Aggregates.count();}  }
class C{  public boolean hasBOM() throws IOException {  return getBOM() != null;}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  @SuppressWarnings("rawtypes") public Value newBoundVariable(String name,Class type){  return new Variable(name,type);}  }
class C{  public static FrozenNativePage freeze(NativePage nativePage){  FrozenNativePage fnp=new FrozenNativePage(nativePage);  nativePage.destroy();  return fnp;}  }
class C{  public NewsfeedUnsubscribeQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){  super.onCreateOptionsMenu(menu,inflater);  mOptionsMenu=menu;  inflater.inflate(R.menu.list,menu);}  }
class C{  public void addPermission(String permissionName){  AXmlNode permission=new AXmlNode("uses-permission",null,manifest);  AXmlAttribute<String> permissionNameAttr=new AXmlAttribute<String>("name",permissionName,AXmlHandler.ANDROID_NAMESPACE);  permission.addAttribute(permissionNameAttr);}  }
class C{  private void updateTableMetadata(String table,Delta delta,Audit audit,@Nullable InvalidationScope scope){  _backingStore.update(_systemTable,table,TimeUUIDs.newUUID(),delta,audit,scope == InvalidationScope.GLOBAL ? WriteConsistency.GLOBAL : WriteConsistency.STRONG);  if (scope != null) {    _tableCacheHandle.invalidate(scope,table);  }}  }
class C{  protected ODEStateAndDerivative initIntegration(final ExpandableODE eqn,final ODEState s0,final double t){  this.equations=eqn;  evaluations=evaluations.withCount(0);  eqn.init(s0,t);  final double t0=s0.getTime();  final double[] y0=s0.getCompleteState();  final double[] y0Dot=computeDerivatives(t0,y0);  final ODEStateAndDerivative s0WithDerivatives=eqn.getMapper().mapStateAndDerivative(t0,y0,y0Dot);  for (  final EventState state : eventsStates) {    state.getEventHandler().init(s0WithDerivatives,t);  }  for (  ODEStepHandler handler : stepHandlers) {    handler.init(s0WithDerivatives,t);  }  setStateInitialized(false);  return s0WithDerivatives;}  }
class C{  private void estimateLoadPercentage(){  double cpuUsed=this.systemResourceUsage.cpu.usage;  double cpuAllocated=cpuUsageByMsgRate * (this.allocatedQuota.getMsgRateIn() + this.allocatedQuota.getMsgRateOut());  double cpuPreAllocated=cpuUsageByMsgRate * (this.preAllocatedQuota.getMsgRateIn() + this.preAllocatedQuota.getMsgRateOut());  this.allocatedLoadPercentageCPU=(this.systemResourceUsage.cpu.limit <= 0) ? 0 : Math.min(100,100 * cpuAllocated / this.systemResourceUsage.cpu.limit);  this.estimatedLoadPercentageCPU=(this.systemResourceUsage.cpu.limit <= 0) ? 0 : Math.min(100,100 * (Math.max(cpuUsed,cpuAllocated) + cpuPreAllocated) / this.systemResourceUsage.cpu.limit);  double memUsed=this.systemResourceUsage.memory.usage;  double memAllocated=this.allocatedQuota.getMemory();  double memPreAllocated=this.preAllocatedQuota.getMemory();  this.allocatedLoadPercentageMemory=(this.systemResourceUsage.memory.limit <= 0) ? 0 : Math.min(100,100 * memAllocated / this.systemResourceUsage.memory.limit);  this.estimatedLoadPercentageMemory=(this.systemResourceUsage.memory.limit <= 0) ? 0 : Math.min(100,100 * (Math.max(memUsed,memAllocated) + memPreAllocated) / this.systemResourceUsage.memory.limit);  double bandwidthInUsed=this.systemResourceUsage.bandwidthIn.usage;  double bandwidthInAllocated=this.allocatedQuota.getBandwidthIn() / KBITS_TO_BYTES;  double bandwidthInPreAllocated=this.preAllocatedQuota.getBandwidthIn() / KBITS_TO_BYTES;  this.allocatedLoadPercentageBandwidthIn=(this.systemResourceUsage.bandwidthIn.limit <= 0) ? 0 : Math.min(100,100 * bandwidthInAllocated / this.systemResourceUsage.bandwidthIn.limit);  this.estimatedLoadPercentageBandwidthIn=(this.systemResourceUsage.bandwidthIn.limit <= 0) ? 0 : Math.min(100,100 * (Math.max(bandwidthInUsed,bandwidthInAllocated) + bandwidthInPreAllocated) / this.systemResourceUsage.bandwidthIn.limit);  double bandwidthOutUsed=this.systemResourceUsage.bandwidthOut.usage;  double bandwidthOutAllocated=this.allocatedQuota.getBandwidthOut() / KBITS_TO_BYTES;  double bandwidthOutPreAllocated=this.preAllocatedQuota.getBandwidthOut() / KBITS_TO_BYTES;  this.allocatedLoadPercentageBandwidthOut=(this.systemResourceUsage.bandwidthOut.limit <= 0) ? 0 : Math.min(100,100 * bandwidthOutAllocated / this.systemResourceUsage.bandwidthOut.limit);  this.estimatedLoadPercentageBandwidthOut=(this.systemResourceUsage.bandwidthOut.limit <= 0) ? 0 : Math.min(100,100 * (Math.max(bandwidthOutUsed,bandwidthOutAllocated) + bandwidthOutPreAllocated) / this.systemResourceUsage.bandwidthOut.limit);  double directMemoryUsed=this.systemResourceUsage.directMemory.usage;  this.estimatedLoadPercentageDirectMemory=(this.systemResourceUsage.directMemory.limit <= 0) ? 0 : Math.min(100,100 * directMemoryUsed / this.systemResourceUsage.directMemory.limit);  this.estimatedLoadPercentage=Math.max(this.estimatedLoadPercentageCPU,Math.max(this.estimatedLoadPercentageMemory,Math.max(this.estimatedLoadPercentageDirectMemory,Math.max(this.estimatedLoadPercentageBandwidthIn,this.estimatedLoadPercentageBandwidthOut))));}  }
class C{  private boolean expect(ProjectViewTokenType kind){  if (matches(kind)) {    return true;  }  builder.error(String.format("'%s' expected",kind));  return false;}  }
class C{  public void testMinApiParent(){  doTestForParentApi("android:Theme.Holo","apiParentTestAfter3");}  }
class C{  public static boolean isAnyCard(String ccPassed){  if (isEmpty(ccPassed))   return defaultEmptyOK;  String cc=stripCharsInBag(ccPassed,creditCardDelimiters);  if (!isCreditCard(cc))   return false;  if (isMasterCard(cc) || isVisa(cc) || isAmericanExpress(cc)|| isDinersClub(cc)|| isDiscover(cc)|| isEnRoute(cc)|| isJCB(cc)|| isSolo(cc)|| isswitch(cc)|| isVisaElectron(cc))   return true;  return false;}  }
class C{  public void close(){  mSocket.close();}  }
class C{  void checkForDuplicateNames(String qName,int declType,Hashtable registry,Hashtable registry_sub,Element currComp,XSDocumentInfo currSchema){  Object objElem=null;  if ((objElem=registry.get(qName)) == null) {    if (fNamespaceGrowth && !fTolerateDuplicates) {      checkForDuplicateNames(qName,declType,currComp);    }    registry.put(qName,currComp);    registry_sub.put(qName,currSchema);  } else {    Element collidingElem=(Element)objElem;    XSDocumentInfo collidingElemSchema=(XSDocumentInfo)registry_sub.get(qName);    if (collidingElem == currComp)     return;    Element elemParent=null;    XSDocumentInfo redefinedSchema=null;    boolean collidedWithRedefine=true;    if ((DOMUtil.getLocalName((elemParent=DOMUtil.getParent(collidingElem))).equals(SchemaSymbols.ELT_REDEFINE))) {      redefinedSchema=(XSDocumentInfo)(fRedefine2XSDMap.get(elemParent));    } else     if ((DOMUtil.getLocalName(DOMUtil.getParent(currComp)).equals(SchemaSymbols.ELT_REDEFINE))) {      redefinedSchema=collidingElemSchema;      collidedWithRedefine=false;    }    if (redefinedSchema != null) {      if (collidingElemSchema == currSchema) {        reportSchemaError("sch-props-correct.2",new Object[]{qName},currComp);        return;      }      String newName=qName.substring(qName.lastIndexOf(',') + 1) + REDEF_IDENTIFIER;      if (redefinedSchema == currSchema) {        currComp.setAttribute(SchemaSymbols.ATT_NAME,newName);        if (currSchema.fTargetNamespace == null) {          registry.put("," + newName,currComp);          registry_sub.put("," + newName,currSchema);        } else {          registry.put(currSchema.fTargetNamespace + "," + newName,currComp);          registry_sub.put(currSchema.fTargetNamespace + "," + newName,currSchema);        }        if (currSchema.fTargetNamespace == null)         checkForDuplicateNames("," + newName,declType,registry,registry_sub,currComp,currSchema); else         checkForDuplicateNames(currSchema.fTargetNamespace + "," + newName,declType,registry,registry_sub,currComp,currSchema);      } else {        if (collidedWithRedefine) {          if (currSchema.fTargetNamespace == null)           checkForDuplicateNames("," + newName,declType,registry,registry_sub,currComp,currSchema); else           checkForDuplicateNames(currSchema.fTargetNamespace + "," + newName,declType,registry,registry_sub,currComp,currSchema);        } else {          reportSchemaError("sch-props-correct.2",new Object[]{qName},currComp);        }      }    } else {      if (!fTolerateDuplicates || fUnparsedRegistriesExt[declType].get(qName) == currSchema) {        reportSchemaError("sch-props-correct.2",new Object[]{qName},currComp);      }    }  }  if (fTolerateDuplicates) {    fUnparsedRegistriesExt[declType].put(qName,currSchema);  }}  }
class C{  public void update(){  if (mProfile == null)   return;  Account[] accounts=AccountManagerHelper.get(mContext).getGoogleAccounts();  for (int i=0; i < accounts.length; i++) {    if (mCacheEntries.get(accounts[i].name) == null) {      ProfileDownloader.startFetchingAccountInfoFor(mContext,mProfile,accounts[i].name,mImageSizePx,true);    }  }}  }
class C{  public void tag(JavaRDD<Row> sentences,String outputFileName,OutputFormat outputFormat){  StructType schema=new StructType(new StructField[]{new StructField("sentence",DataTypes.StringType,false,Metadata.empty())});  SQLContext sqlContext=new SQLContext(jsc);  DataFrame input=sqlContext.createDataFrame(sentences,schema);  tag(input,outputFileName,outputFormat);}  }
class C{  private PrefsHelper(){}  }
class C{  protected void addLanguageVariables(BundleContext context){  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage("en","US");  addLanguageVariables(context,defaultLanguage);}  }
class C{  public Z(){  re=0.;  im=0.;}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysRole other=(SysRole)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getRoleName() == null ? other.getRoleName() == null : this.getRoleName().equals(other.getRoleName())) && (this.getDeptId() == null ? other.getDeptId() == null : this.getDeptId().equals(other.getDeptId()))&& (this.getRoleType() == null ? other.getRoleType() == null : this.getRoleType().equals(other.getRoleType()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public boolean containsKey(Object key){  int hash=hash(key.hashCode());  return segmentFor(hash).containsKey(key,hash);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public final boolean isOnline(){  return gscHandler != null && gscHandler.getState() == State.AUTHED;}  }
class C{  public void removeFence(@NonNull String id){  Set<String> fenceIdSet=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);  if ((fenceIdSet != null) && fenceIdSet.contains(id)) {    SharedPreferences.Editor editor=mPrefs.edit();    editor.remove(mPrefix + id);    fenceIdSet.remove(id);    editor.putStringSet(FENCE_ID_SET_KEY,fenceIdSet);    editor.apply();  }}  }
class C{  public int hash(String symbol){  return symbol.hashCode() & 0x7FFFFFFF;}  }
class C{  private static void processColumnData(List<Column> colList,Packages pkg,String tbName){  Set<String> set=new HashSet<String>();  StringBuilder initBuilder=new StringBuilder();  StringBuilder pkConditionBuilder=new StringBuilder();  StringBuilder insertBuilder=new StringBuilder();  StringBuilder updateBuilder=new StringBuilder();  for (  Column col : colList) {    col.setColName(StringUtil.parseHumpName(col.getDbColName(),false,isHumpColumn));    col.setImportClass(ColumnUtil.parseColumnType(col.getClassName(),col.getColSize(),col.getScale()));    String importClass=col.getImportClass();    col.setClassName(importClass.indexOf(".") == -1 ? importClass : importClass.substring(importClass.lastIndexOf(".") + 1));    col.setImportClass(importClass.indexOf(".") == -1 ? "" : importClass);    if (col.getImportClass() != null && !"".equals(col.getImportClass())) {      set.add(col.getImportClass());    }    col.setSetMethod("set" + StringUtil.upperFirst(col.getColName()));    col.setGetMethod("get" + StringUtil.upperFirst(col.getColName()));    initBuilder.append(col.getDbColName()).append(",");    if (col.getIsPk() == 1) {      if (pkConditionBuilder.length() > 0) {        pkConditionBuilder.append(" AND ");      }      pkConditionBuilder.append(col.getDbColName()).append("=#{").append(col.getColName()).append("} ");    }    insertBuilder.append("#{").append(col.getColName()).append("},");    updateBuilder.append(col.getDbColName()).append("=#{").append(col.getColName()).append("},");  }  pkg.setInitSql(initBuilder.deleteCharAt(initBuilder.length() - 1).toString());  pkg.setPkCondition(pkConditionBuilder.toString());  pkg.setInsertStatements(insertBuilder.deleteCharAt(insertBuilder.length() - 1).toString());  pkg.setUpdateStatements(updateBuilder.deleteCharAt(updateBuilder.length() - 1).toString());  pkg.setImportSet(set);  pkg.setColumnList(colList);}  }
class C{  @Override public Histogram histogram(){  return p.histogram();}  }
class C{  public static void enableConsoleLogging(){  consoleLoggingEnabled=true;}  }
class C{  private void addSegmentsIfEmpty(JobContext job,AbsoluteTableIdentifier absoluteTableIdentifier) throws IOException {  if (getSegmentsFromConfiguration(job).length == 0) {    SegmentStatusManager.ValidAndInvalidSegmentsInfo validAndInvalidSegments=new SegmentStatusManager(absoluteTableIdentifier).getValidAndInvalidSegments();    setSegmentsToAccess(job.getConfiguration(),validAndInvalidSegments.getValidSegments());  }}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  private static double exp(double x,double extra,double[] hiPrec){  double intPartA;  double intPartB;  int intVal=(int)x;  if (x < 0.0) {    if (x < -746d) {      if (hiPrec != null) {        hiPrec[0]=0.0;        hiPrec[1]=0.0;      }      return 0.0;    }    if (intVal < -709) {      final double result=exp(x + 40.19140625,extra,hiPrec) / 285040095144011776.0;      if (hiPrec != null) {        hiPrec[0]/=285040095144011776.0;        hiPrec[1]/=285040095144011776.0;      }      return result;    }    if (intVal == -709) {      final double result=exp(x + 1.494140625,extra,hiPrec) / 4.455505956692756620;      if (hiPrec != null) {        hiPrec[0]/=4.455505956692756620;        hiPrec[1]/=4.455505956692756620;      }      return result;    }    intVal--;  } else {    if (intVal > 709) {      if (hiPrec != null) {        hiPrec[0]=Double.POSITIVE_INFINITY;        hiPrec[1]=0.0;      }      return Double.POSITIVE_INFINITY;    }  }  intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX + intVal];  intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX + intVal];  final int intFrac=(int)((x - intVal) * 1024.0);  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];  final double epsilon=x - (intVal + intFrac / 1024.0);  double z=0.04168701738764507;  z=z * epsilon + 0.1666666505023083;  z=z * epsilon + 0.5000000000042687;  z=z * epsilon + 1.0;  z=z * epsilon + -3.940510424527919E-20;  double tempA=intPartA * fracPartA;  double tempB=intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;  final double tempC=tempB + tempA;  if (tempC == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  }  final double result;  if (extra != 0.0) {    result=tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;  } else {    result=tempC * z + tempB + tempA;  }  if (hiPrec != null) {    hiPrec[0]=tempA;    hiPrec[1]=tempC * extra * z + tempC * extra + tempC * z + tempB;  }  return result;}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_LOW_GUILD_LEVEL(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400906,value1,value0);}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public static String formatQuantity(float quantity){  return formatQuantity((double)quantity);}  }
class C{  public MapleQuestStatus(final MapleQuest quest,final int status){  this.quest=quest;  this.setStatus((byte)status);  this.completionTime=System.currentTimeMillis();  if (status == 1) {    if (!quest.getRelevantMobs().isEmpty()) {      registerMobs();    }  }}  }
class C{  public void deepFill(MaryNode specTree){  tree=specTree;  numberOfLeaves=0;  sortNode(0,tree);}  }
class C{  @Deployment public void testSignalBoundaryOnSubProcess(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("signalEventOnSubprocess");  runtimeService.signalEventReceived("stopSignal");  assertProcessEnded(pi.getProcessInstanceId());}  }
class C{  public void monitorMemoryUsage(boolean isWriteTypeOperation) throws MemoryShortageException {  MemoryEvictionDecision res;  if (_enabled && ((res=monitorMemoryUsageWithNoEviction_Impl(isWriteTypeOperation)) != MemoryEvictionDecision.NO_EVICTION)) {    _evictor.evict(isWriteTypeOperation,res == MemoryEvictionDecision.SYNC_EVICTION);  }}  }
class C{  private static void print(String header,String prefix,Object[] array){  System.out.print(header);  if (array.length > 0) {    System.out.println();    for (int i=0; i < array.length; i++) {      System.out.print("  ");      System.out.print(prefix);      System.out.println(array[i]);    }  } else {    System.out.println(" none.");  }}  }
class C{  protected void startBKCluster() throws Exception {  baseClientConf.setZkServers(zkUtil.getZooKeeperConnectString());  baseClientConf.setUseV2WireProtocol(true);  if (numBookies > 0) {    bkc=new BookKeeperTestClient(baseClientConf);  }  for (int i=0; i < numBookies; i++) {    startNewBookie();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201055,num0,skillname);}  }
class C{  public void onDirectoryChange(final File directory){}  }
class C{  public boolean containsListener(Listener listener){  return this.listeners.contains(listener);}  }
class C{  public boolean isError(){  return state.equals(ERROR);}  }
class C{  public void mousePressed(MouseEvent e){  mIsControlDown=e.isControlDown();  mIsShiftDown=e.isShiftDown();  mIsAltDown=e.isAltDown();  float x=mViewTransform.getAndroidFX(e.getX());  float y=mViewTransform.getAndroidFY(e.getY());  mousePressed(x,y,SwingUtilities.isRightMouseButton(e));}  }
class C{  public void add(int[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public static boolean isWifiEnabled(Context context){  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);}  }
class C{  public boolean equalTo(Highlight h){  if (h == null)   return false; else {    if (this.mDataSetIndex == h.mDataSetIndex && this.mX == h.mX && this.mStackIndex == h.mStackIndex && this.mDataIndex == h.mDataIndex)     return true; else     return false;  }}  }
class C{  public void addEventListener(ZWaveEventListener eventListener){synchronized (zwaveEventListeners) {    if (zwaveEventListeners.contains(eventListener)) {      logger.debug("Event Listener {} already registered",eventListener);      return;    }    zwaveEventListeners.add(eventListener);  }}  }
class C{  protected Label createWrappingLabel(Composite parent,String text,int indent){  return createWrappingLabel(parent,text,indent,1);}  }
class C{  public PolyEntry(String name,String desc,StructType type){  this.name=name;  this.desc=desc;  this.type=type;}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  public Storage(File directory){  this(directory,null);}  }
class C{  public static String compatibleFieldName(String original){  if (!original.matches("^[A-Za-z_].*")) {    return "_" + original;  } else {    return original;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CAPTCHA_RESTRICTED(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400268,durationtime0);}  }
class C{  protected final boolean isLoadFooterVisible(){  return mLoadFooter == getChildAt(getChildCount() - 1);}  }
class C{  public void delete(@NonNull Key key){  final ReentrantReadWriteLock.WriteLock lock=guard.writeLock();  lock.lock();  try {    if (!readKeys.remove(key))     throw new IllegalArgumentException("key does not exist");    Files.delete(key.getFile());  } catch (  IOException ex) {    LOG.log(Level.WARNING,"unable to remove file " + key.getFile(),ex);  } finally {    lock.unlock();  }}  }
class C{  public List<ProcessFunctionParameterValue> extractParameters(ProcessDescriptionType selectedCustomFunction){  List<ProcessFunctionParameterValue> valueList=new ArrayList<ProcessFunctionParameterValue>();  if (dataTypeMap.isEmpty()) {    populateDataMap();  }  if (selectedCustomFunction != null) {    for (int index=0; index < selectedCustomFunction.getDataInputs().getInput().size(); index++) {      InputDescriptionType input=(InputDescriptionType)selectedCustomFunction.getDataInputs().getInput().get(index);      ProcessFunctionParameterValue value=new ProcessFunctionParameterValue();      value.name=input.getIdentifier().getValue();      getType(input,value);      value.optional=isOptional(input);      value.type=dataTypeMap.get(value.dataType);      value.minOccurences=input.getMinOccurs().intValue();      value.maxOccurences=input.getMaxOccurs().intValue();      valueList.add(value);    }  }  return valueList;}  }
class C{  public boolean isIgnoreInactive(){  return this.ignoreInactive;}  }
class C{  public VideoGetAlbumsQuery(VkApiClient client,UserActor actor){  super(client,"video.getAlbums",GetAlbumsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public static BloomSpecification computeBloomSpec(int bucketsPerElement){  assert bucketsPerElement >= 1;  assert bucketsPerElement <= probs.length - 1;  return new BloomSpecification(optKPerBuckets[bucketsPerElement],bucketsPerElement);}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (other == this)   return true;  if (CPtr.class != other.getClass())   return false;  return peer == ((CPtr)other).peer;}  }
class C{  public static Map<String,Object> searchDuplicatedAncestor(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String productId=(String)context.get("productId");  String productIdKey=(String)context.get("productIdTo");  Timestamp fromDate=(Timestamp)context.get("fromDate");  String bomType=(String)context.get("productAssocTypeId");  if (fromDate == null) {    fromDate=Timestamp.valueOf((new Date()).toString());  }  GenericValue duplicatedProductAssoc=null;  try {    duplicatedProductAssoc=BOMHelper.searchDuplicatedAncestor(productId,productIdKey,bomType,fromDate,delegator,dispatcher,userLogin);  } catch (  GenericEntityException gee) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningDuplicatedAncestorSearch",UtilMisc.toMap("errorString",gee.getMessage()),locale));  }  result.put("duplicatedProductAssoc",duplicatedProductAssoc);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_START_EATING(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400616,value0,value1);}  }
class C{  private boolean hasNext(){  return currentToken != null;}  }
class C{  public CatchResult catchPokemon(double normalizedHitPosition,double normalizedReticleSize,double spinModifier,Pokeball type,int amount,int razberriesLimit) throws LoginFailedException, RemoteServerException {  Item razzberriesInventory=api.getInventories().getItemBag().getItem(ItemId.ITEM_RAZZ_BERRY);  int razzberriesCountInventory=razzberriesInventory.getCount();  int razberries=0;  int numThrows=0;  CatchResult result;  if (razzberriesCountInventory < razberriesLimit) {    razberriesLimit=razzberriesCountInventory;  }  do {    if ((razberries < razberriesLimit || razberriesLimit == -1) && useItem(ItemId.ITEM_RAZZ_BERRY).getSuccess()) {      razberries++;      razzberriesCountInventory--;      razzberriesInventory.setCount(razzberriesCountInventory);    }    result=AsyncHelper.toBlocking(catchPokemonAsync(normalizedHitPosition,normalizedReticleSize,spinModifier,type));    if (result == null) {      Log.wtf(TAG,"Got a null result after catch attempt");      break;    }    if (result.getStatus() == CatchStatus.CATCH_FLEE || result.getStatus() == CatchStatus.CATCH_SUCCESS) {      Log.v(TAG,"Pokemon caught/or flee");      break;    }    if (result.getStatus() == CatchStatus.CATCH_ERROR || result.getStatus() == CatchStatus.UNRECOGNIZED) {      Log.wtf(TAG,"Got an error or unrecognized catch attempt");      Log.wtf(TAG,"Proto:" + result);      break;    }    numThrows++;  } while (amount < 0 || numThrows < amount);  return result;}  }
class C{  public PokemonGo(OkHttpClient client,Time time,long seed){  this.time=time;  this.seed=seed;  sessionHash=new byte[32];  new Random().nextBytes(sessionHash);  client=client.newBuilder().addNetworkInterceptor(new ClientInterceptor()).build();  requestHandler=new RequestHandler(this,client);  map=new Map(this);  longitude=Double.NaN;  latitude=Double.NaN;  altitude=Double.NaN;}  }
class C{  private void trigger(int position,float positionOffset){  CircleIndicator.this.mCurItemPosition=position;  CircleIndicator.this.mCurItemPositionOffset=positionOffset;  Log.e("CircleIndicator","onPageScrolled()" + position + ":"+ positionOffset);  requestLayout();  invalidate();}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  static protected boolean isVowel(String phone){  return VOWELS.indexOf(phone.substring(0,1)) != -1;}  }
class C{  public boolean isJsInject(){  return isOptionEnabled(UrlFilterRuleOption.JS_INJECT);}  }
class C{  public static RotateBitmapResult rotateBitmapByExif(Bitmap bitmap,Context context,Uri uri){  try {    File file=getFileFromUri(context,uri);    if (file.exists()) {      ExifInterface ei=new ExifInterface(file.getAbsolutePath());      return rotateBitmapByExif(bitmap,ei);    }  } catch (  Exception ignored) {  }  return new RotateBitmapResult(bitmap,0);}  }
class C{  protected static String appendLinkParams(String url,Object paramsObj) throws IOException {  if (paramsObj == null) {    return url;  }  String params=paramsObj.toString();  if (params.isEmpty()) {    return url;  }  if (params.startsWith("?")) {    url+=params;  } else {    url+="?" + params;  }  return url;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_Instant_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200992,skilltarget,num0,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200390,num0,skillname);}  }
class C{  public void run(){  filterMessageSender.connect();}  }
class C{  public static double[] convolve_FD(final double[] signal1,final double[] fft2){  if (signal1 == null || fft2 == null)   throw new NullPointerException("Received null argument");  if (signal1.length != fft2.length)   throw new IllegalArgumentException("Arrays must be equal length");  int N=signal1.length;  assert MathUtils.isPowerOfTwo(N);  double[] fft1=new double[N];  System.arraycopy(signal1,0,fft1,0,N);  realTransform(fft1,false);  fft1[0]=fft1[0] * fft2[0];  fft1[1]=fft1[1] * fft2[1];  for (int i=2; i < N; i+=2) {    double tmp=fft1[i];    fft1[i]=fft1[i] * fft2[i] - fft1[i + 1] * fft2[i + 1];    fft1[i + 1]=tmp * fft2[i + 1] + fft1[i + 1] * fft2[i];  }  realTransform(fft1,true);  return fft1;}  }
class C{  public void updateUnreadLabel(){  int count=getUnreadMsgCountTotal();  if (count > 0) {    unreadLabel.setText(String.valueOf(count));    unreadLabel.setVisibility(View.VISIBLE);  } else {    unreadLabel.setVisibility(View.INVISIBLE);  }}  }
class C{  public void removeCookie(String url){  cookieJar.remove(url);}  }
class C{  @Override public Grammar[] retrieveInitialGrammarSet(String grammarType){  Grammar[] grammars=super.retrieveInitialGrammarSet(grammarType);  if (grammars != null)   return grammars;  return fGrammarPool.retrieveInitialGrammarSet(grammarType);}  }
class C{  protected String insertSyllable(Item syllableItem,Element token,boolean deep){  if (syllableItem == null || token == null) {    throw new NullPointerException("Null arguments to insertSyllable()");  }  if (!token.getTagName().equals(MaryXML.TOKEN)) {    throw new IllegalArgumentException("Syllables can only be inserted in <t> elements");  }  Document doc=token.getOwnerDocument();  Element syllable=null;  StringBuilder sampa=new StringBuilder();  if (deep) {    syllable=MaryXML.createElement(doc,MaryXML.SYLLABLE);    token.appendChild(syllable);  }  if (syllableItem.getFeatures().isPresent("accent")) {    String accentString=syllableItem.getFeatures().getString("accent");    if (deep)     syllable.setAttribute("accent",accentString);    token.setAttribute("accent",accentString);  }  if (syllableItem.getFeatures().isPresent("stress")) {    String stressString=syllableItem.getFeatures().getString("stress");    if (!stressString.equals("0")) {      if (deep)       syllable.setAttribute("stress",stressString);      if (stressString.equals("1"))       sampa.append("'"); else       if (stressString.equals("2"))       sampa.append(",");    }  }  Item segmentItem=syllableItem.getDaughter();  while (segmentItem != null) {    if (sampa.length() > 0)     sampa.append(" ");    sampa.append(insertSegment(segmentItem,syllable,deep));    segmentItem=segmentItem.getNext();  }  String sampaString=sampa.toString();  if (deep)   syllable.setAttribute("ph",sampaString);  if (syllableItem.getFeatures().isPresent("endtone") && !tokenItemHasFollowingBoundary(syllableItem.getParent().getItemAs(Relation.TOKEN).getParent())) {    String endtone=syllableItem.getFeatures().getString("endtone");    if (!endtone.equals("")) {      Element boundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);      boundary.setAttribute("tone",endtone);      boundary.setAttribute("breakindex","4");      boundary.setAttribute("duration","200");      token.getParentNode().appendChild(boundary);    }  }  return sampaString;}  }
class C{  public boolean isClassSuperclassOfIncluding(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getSubclassesOfIncluding(parent).contains(possibleChild);}  }
class C{  public NGramCorrelationForm(){  initComponents();}  }
class C{  public V put(R rowKey,C columnKey,V value){  if (rowKey != null && columnKey != null) {    Map<C,V> row=row(rowKey);    if (row == null) {      row=new HashMap<>();      dataMap.put(rowKey,row);    }    V oldValue=row.get(columnKey);    row.put(columnKey,value);    if (oldValue != null)     return oldValue; else     return value;  }  return null;}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public boolean adjustValue(K key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  protected VideoGetTagsQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  @Override public void saveSLDData(SLDDataInterface sldData){  boolean saved=false;  for (  ExtensionInterface extension : extensionList) {    if (saved == false) {      saved=extension.save(sldData);    }  }}  }
class C{  protected void moveToBackup(){  beforeSpaceModeChange(SpaceMode.BACKUP);  setSpaceMode(SpaceMode.BACKUP);  afterSpaceModeChange(SpaceMode.BACKUP);}  }
class C{  public Grammar parseGrammar(String type,String uri) throws XNIException, IOException {  XMLInputSource source=new XMLInputSource(null,uri,null);  return parseGrammar(type,source);}  }
class C{  private void extendTail(int count){  if (terminated || count < 1) {    return;  }  while (--count >= 0) {    final Slot inserted=insertSlotAt(size,lastSlot);    inserted.withTags(TAG_EXTENSION);  }}  }
class C{  private void updateAfterDisbandLegion(Legion legion){  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {    PacketSendUtility.broadcastPacket(onlineLegionMember,new SM_LEGION_UPDATE_TITLE(onlineLegionMember.getObjectId(),0,"",0),true);    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_LEAVE_MEMBER(1300302,0,legion.getLegionName()));    onlineLegionMember.resetLegionMember();  }}  }
class C{  public boolean isExplain(){  return isExplain;}  }
class C{  @GET @Path("{table}") @RequiresPermissions("blob|read|{table}") @Timed(name="bv.emodb.blob.BlobStoreResource1.scanMetadata",absolute=true) @ApiOperation(value="Retrieves a list of content items in a particular table.",notes="Retuns BlobMetadata.",response=BlobMetadata.class) public Iterator<BlobMetadata> scanMetadata(@PathParam("table") String table,@QueryParam("from") String blobId,@QueryParam("limit") @DefaultValue("10") LongParam limit){  return streamingIterator(_blobStore.scanMetadata(table,Strings.emptyToNull(blobId),limit.get()));}  }
class C{  private static boolean hasSelfPermission(Context context,String permission){switch (Build.MANUFACTURER) {case "Xiaomi":{      return checkSelfPermissionForXiaomi(context,permission);    }default :{    try {      return checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;    } catch (    RuntimeException t) {      return false;    }  }}}  }
class C{  public long readLong(){  return scanner.nextLong();}  }
class C{  public static String u8(long v){  char[] result=new char[16];  for (int i=0; i < 16; i++) {    result[15 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public Record updateRecord(List<DataType> values,RecordID rid) throws DatabaseException {  return null;}  }
class C{  public boolean optimizeScanForSingleObject(){  return true;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public void collectTags(SootClass sc,boolean includeBodies){  collectClassTags(sc);  for (  SootField sf : sc.getFields()) {    collectFieldTags(sf);  }  for (  SootMethod sm : sc.getMethods()) {    collectMethodTags(sm);    if (!includeBodies || !sm.hasActiveBody())     continue;    Body b=sm.getActiveBody();    collectBodyTags(b);  }}  }
class C{  private RequestLog(){  logId=null;  info=null;  mostRecentTimer=null;  times=new LinkedHashMap<>();  threadIds=new LinkedHashSet<>();  mapper.registerModule((new JodaModule()).addSerializer(Interval.class,new ToStringSerializer()));  mapper.registerModule(new Jdk8Module().configureAbsentsAsNulls(false));  MDC.remove(ID_KEY);}  }
class C{  public static BigInteger pow(final BigInteger k,BigInteger e) throws IllegalArgumentException {  if (e.compareTo(BigInteger.ZERO) < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  BigInteger result=BigInteger.ONE;  BigInteger k2p=k;  while (!BigInteger.ZERO.equals(e)) {    if (e.testBit(0)) {      result=result.multiply(k2p);    }    k2p=k2p.multiply(k2p);    e=e.shiftRight(1);  }  return result;}  }
class C{  void receiveDeletedText(CharacterDataImpl node,int offset,int count){  if (node == null)   return;  if (fDeleteNode == node)   return;  if (node == fStartContainer) {    if (fStartOffset > offset + count) {      fStartOffset=offset + (fStartOffset - (offset + count));    } else     if (fStartOffset > offset) {      fStartOffset=offset;    }  }  if (node == fEndContainer) {    if (fEndOffset > offset + count) {      fEndOffset=offset + (fEndOffset - (offset + count));    } else     if (fEndOffset > offset) {      fEndOffset=offset;    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public V remove(int key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public CronExpression(String cronExpression,ClockReader clockReader) throws ParseException {  if (cronExpression == null) {    throw new IllegalArgumentException("cronExpression cannot be null");  }  this.clockReader=clockReader;  this.cronExpression=cronExpression.toUpperCase(Locale.US);  buildExpression(this.cronExpression);}  }
class C{  public static File extractArchive(File archive,File destination){  File directory=getUniqueFile(destination,archive.getName());  ZipFile zipFile=null;  try {    prepareDirectory(directory);    zipFile=new ZipFile(archive);    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry entry=entries.nextElement();      FileOutputStream fos=null;      InputStream is=null;      try {        is=zipFile.getInputStream(entry);        fos=new FileOutputStream(new File(directory,entry.getName()));        int bytes;        byte[] packet=new byte[COPY_PACKET_SIZE];        while ((bytes=is.read(packet,0,COPY_PACKET_SIZE)) != -1)         fos.write(packet,0,bytes);      }  finally {        try {          if (fos != null)           fos.close();        } catch (        Exception e) {          LOGGER.log(Level.SEVERE,"Problem closing extracted file stream",e);        }        try {          if (is != null)           is.close();        } catch (        Exception e) {          LOGGER.log(Level.SEVERE,"Problem closing zipentry stream",e);        }      }    }  } catch (  Exception e) {    LOGGER.log(Level.SEVERE,"Error extracting archive",e);    return null;  } finally {    try {      if (zipFile != null)       zipFile.close();    } catch (    Exception e) {      LOGGER.log(Level.SEVERE,"Problem closing archive",e);    }  }  return directory;}  }
class C{  public InputStreamInputSplit(InputStream is,File path){  this.is=is;  this.location=new URI[]{path.toURI()};}  }
class C{  public FileWriterWithEncoding(File file,String encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public Type buildArrayOrAddDimension(Type type){  if (type instanceof ArrayType) {    ArrayType array=(ArrayType)type;    return array.makeArrayType();  } else   return ArrayType.v(type,1);}  }
class C{  public void deleteDirectory(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("RMD " + path);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  @SuppressLint("DefaultLocale") public static String doublePrecision(int time){  return String.format("%02d",time);}  }
class C{  private boolean isContainedInRectangles(SegmentNode pnew){  SegmentNode p=header[GeometricManager.MANY_TO_MANY];  while (p != null) {    if (pnew.I1 >= p.I1 && pnew.I2 >= p.I2) {      if ((pnew.I1 + pnew.L) <= (p.I1 + p.L) && (pnew.I2 + pnew.L) <= (p.I2 + ((RectangleNode)p).L_prime))       return true;    }    p=p.next;  }  return false;}  }
class C{  public void drawAsOneDot(String prefix,String name){  DotGraph dot=new DotGraph(name);  dot.setGraphLabel(name);  dot.setGraphAttribute("compound","true");  dot.setGraphAttribute("rankdir","LR");  Map<Unit,Integer> node=new HashMap<Unit,Integer>();  int id=0;  Iterator it=graph.iterator();  while (it.hasNext()) {    Unit stmt=(Unit)it.next();    PurityGraphBox ref=(PurityGraphBox)getFlowAfter(stmt);    DotGraph sub=dot.createSubGraph("cluster" + id);    DotGraphNode label=sub.drawNode("head" + id);    String lbl=stmt.toString();    if (lbl.startsWith("lookupswitch"))     lbl="lookupswitch...";    if (lbl.startsWith("tableswitch"))     lbl="tableswitch...";    sub.setGraphLabel(" ");    label.setLabel(lbl);    label.setAttribute("fontsize","18");    label.setShape("box");    ref.g.fillDotGraph("X" + id,sub);    node.put(stmt,new Integer(id));    id++;  }  it=graph.iterator();  while (it.hasNext()) {    Object src=it.next();    Iterator itt=graph.getSuccsOf(src).iterator();    while (itt.hasNext()) {      Object dst=itt.next();      DotGraphEdge edge=dot.drawEdge("head" + node.get(src),"head" + node.get(dst));      edge.setAttribute("ltail","cluster" + node.get(src));      edge.setAttribute("lhead","cluster" + node.get(dst));    }  }  File f=new File(SourceLocator.v().getOutputDir(),prefix + name + DotGraph.DOT_EXTENSION);  dot.plot(f.getPath());}  }
class C{  public int read(long position,InputReader reader,int classId) throws IOException {  reader.seek(position);  map2Weight.clear();  final int numberOfClasses=reader.readInt();  for (int i=0; i < numberOfClasses; i++) {    final int currentId=reader.readInt();    final int weight=reader.readInt();    final int count=reader.readInt();    reader.skipBytes(count * 8);    if (currentId == classId) {      map2Weight.put(currentId,weight);      break;    }  }  return map2Weight.size();}  }
class C{  public static Map<String,Object> generateReqsFromCancelledPOItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  String facilityId=(String)context.get("facilityId");  try {    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isEmpty(orderHeader)) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    if (!"PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {      String errorMessage=UtilProperties.getMessage(resource_error,"ProductErrorOrderNotPurchaseOrder",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    Map<String,Object> productRequirementQuantities=new HashMap<String,Object>();    List<GenericValue> orderItems=orderHeader.getRelated("OrderItem",null,null,false);    for (    GenericValue orderItem : orderItems) {      if (!"PRODUCT_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId")))       continue;      BigDecimal orderItemCancelQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("cancelQuantity"))) {        orderItemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      }      if (orderItemCancelQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;      String productId=orderItem.getString("productId");      if (productRequirementQuantities.containsKey(productId)) {        orderItemCancelQuantity=orderItemCancelQuantity.add((BigDecimal)productRequirementQuantities.get(productId));      }      productRequirementQuantities.put(productId,orderItemCancelQuantity);    }    for (    String productId : productRequirementQuantities.keySet()) {      BigDecimal requiredQuantity=(BigDecimal)productRequirementQuantities.get(productId);      Map<String,Object> createRequirementResult=dispatcher.runSync("createRequirement",UtilMisc.<String,Object>toMap("requirementTypeId","PRODUCT_REQUIREMENT","facilityId",facilityId,"productId",productId,"quantity",requiredQuantity,"userLogin",userLogin));      if (ServiceUtil.isError(createRequirementResult))       return createRequirementResult;    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  public byte readByte() throws IOException {  return dis.readByte();}  }
class C{  public EquipmentUnitRemove(){}  }
class C{  private static void toText(ByteBuffer data,StringBuilder result,int cnt){  int charPos=data.position() - cnt;  for (int a=0; a < cnt; a++) {    int c=data.get(charPos++);    if (c > 0x1f && c < 0x80) {      result.append((char)c);    } else {      result.append('.');    }  }}  }
class C{  public float[] toFloatArray(){  float[] faRes=new float[3];  faRes[0]=(float)ValueSimilarity;  faRes[1]=(float)ContainmentSimilarity;  faRes[2]=(float)SizeSimilarity;  return faRes;}  }
class C{  public static List<Integer> createColors(int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(i);  }  return result;}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int errorCorrectionLevel,int width,int height,int margin) throws WriterException {  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(1,aspectRatio);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale,scale * aspectRatio);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  private void acquire() throws IOException {  char[] four=new char[4];  int i=0;  do {    int b=inputStream.read();    if (b == -1) {      if (i != 0) {        throw new IOException("Bad base64 stream");      } else {        buffer=new int[0];        eof=true;        return;      }    }    char c=(char)b;    if (Base64.chars.indexOf(c) != -1 || c == Base64.pad) {      four[i++]=c;    } else     if (c != '\r' && c != '\n') {      throw new IOException("Bad base64 stream");    }  } while (i < 4);  boolean padded=false;  for (i=0; i < 4; i++) {    if (four[i] != Base64.pad) {      if (padded) {        throw new IOException("Bad base64 stream");      }    } else {      if (!padded) {        padded=true;      }    }  }  int l;  if (four[3] == Base64.pad) {    if (inputStream.read() != -1) {      throw new IOException("Bad base64 stream");    }    eof=true;    if (four[2] == Base64.pad) {      l=1;    } else {      l=2;    }  } else {    l=3;  }  int aux=0;  for (i=0; i < 4; i++) {    if (four[i] != Base64.pad) {      aux=aux | (Base64.chars.indexOf(four[i]) << (6 * (3 - i)));    }  }  buffer=new int[l];  for (i=0; i < l; i++) {    buffer[i]=(aux >>> (8 * (2 - i))) & 0xFF;  }}  }
class C{  public void resourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.remoteResourceCopied(source,destination);  }}  }
class C{  public boolean isSimpleTypeOrSimpleObject(final Field field){  Class<?> type=field.getType();  boolean simpleType=(type.isAssignableFrom(Short.class) || type.isAssignableFrom(Short.TYPE) || type.isAssignableFrom(Integer.class)|| type.isAssignableFrom(Integer.TYPE)|| type.isAssignableFrom(Float.class)|| type.isAssignableFrom(Float.TYPE)|| type.isAssignableFrom(Double.class)|| type.isAssignableFrom(Double.TYPE)|| type.isAssignableFrom(Long.class)|| type.isAssignableFrom(Long.TYPE)|| type.isAssignableFrom(Byte.class)|| type.isAssignableFrom(Byte.TYPE)|| type.isAssignableFrom(Character.class)|| type.isAssignableFrom(Character.TYPE)|| type.isAssignableFrom(Boolean.class)|| type.isAssignableFrom(Boolean.TYPE)|| type.isAssignableFrom(String.class)) || type.isEnum();  return simpleType;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ASK_OTHER_HAS_LOGOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300148,value0);}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public FriendsGetRequestsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected MarketAddQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public PhotosCreateCommentQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  public ModelMenuItem mergeOverrideModelMenuItem(ModelMenuItem overrideMenuItem,BuildArgs buildArgs){  return new ModelMenuItem(this,overrideMenuItem,buildArgs);}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  allowXMLCatalogPI=false;  String resolved=catalogResolver.getResolvedEntity(publicId,systemId);  if (resolved == null && piCatalogResolver != null) {    resolved=piCatalogResolver.getResolvedEntity(publicId,systemId);  }  if (resolved != null) {    try {      InputSource iSource=new InputSource(resolved);      iSource.setPublicId(publicId);      URL url=new URL(resolved);      InputStream iStream=url.openStream();      iSource.setByteStream(iStream);      return iSource;    } catch (    Exception e) {      catalogManager.debug.message(1,"Failed to create InputSource (" + e.toString() + ")",resolved);      return null;    }  } else {    return null;  }}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  protected MarketSearchQueryWithExtended ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static float calculateHeight(float width,float targetAspectRatio){  return width / targetAspectRatio;}  }
class C{  public SM_AUTH_GG(int sessionId){  super(0x0b);  this.sessionId=sessionId;}  }
class C{  public void writeInt(int a) throws IOException {  outs.write((byte)(a));  outs.write((byte)(a >> 8));  outs.write((byte)(a >> 16));  outs.write((byte)(a >> 24));}  }
class C{  @NotNull public NlConfigurationToolbarFixture requireApi(int apiLevel){  Wait.seconds(30).expecting("configuration to be updated").until(null);  return this;}  }
class C{  protected void processThermostatFanModeReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Thermostat Fan Mode report value = {}",this.getNode().getNodeId(),value);  FanModeType fanModeType=FanModeType.getFanModeType(value);  if (fanModeType == null) {    logger.error("NODE {}: Unknown Fan Mode Type = {}, ignoring report.",this.getNode().getNodeId(),value);    return;  }  if (!fanModeTypes.contains(fanModeType)) {    fanModeTypes.add(fanModeType);  }  dynamicDone=true;  logger.debug("NODE {}: Thermostat Fan Mode Report value = {}",this.getNode().getNodeId(),fanModeType.getLabel());  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_mini_retryButton:    photosPresenter.initRefresh(getContext());  break;}}  }
class C{  public PageLabel(String label,int s,int n,int seq){  this.label=label;  this.s=s;  this.n=n;  this.seq=seq;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getDataType().equalsIgnoreCase("KEGG");}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public SourceAsset sendSourceAsset(SourceAsset sourceAsset){  return authenticatedRestTemplate.postForObject(getBasePathForEntity(),sourceAsset,SourceAsset.class);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void onStop(final FileAlterationObserver observer){}  }
class C{  public void press(int mask){  controller.mousePress(mask);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public Builder color(String color){  this.color=color;  return this;}  }
class C{  public SimpsonIntegrator(final double relativeAccuracy,final double absoluteAccuracy,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,SIMPSON_MAX_ITERATIONS_COUNT);  }}  }
class C{  private static void loadPackageData(Context context){  if (context != null) {    try {      PackageManager packageManager=context.getPackageManager();      PackageInfo packageInfo=packageManager.getPackageInfo(context.getPackageName(),0);      Constants.APP_PACKAGE=packageInfo.packageName;      Constants.APP_VERSION="" + packageInfo.versionCode;      Constants.APP_VERSION_NAME=packageInfo.versionName;      int buildNumber=loadBuildNumber(context,packageManager);      if ((buildNumber != 0) && (buildNumber > packageInfo.versionCode)) {        Constants.APP_VERSION="" + buildNumber;      }    } catch (    Exception e) {      Log.e(TAG,"Exception thrown when accessing the package info:");      e.printStackTrace();    }  }}  }
class C{  public static String checkEmpty(String string1,String string2){  if (UtilValidate.isNotEmpty(string1))   return string1; else   if (UtilValidate.isNotEmpty(string2))   return string2; else   return "";}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  @Override public void reset(XMLComponentManager componentManager) throws XNIException {  try {    fNamespaces=componentManager.getFeature(NAMESPACES);  } catch (  XMLConfigurationException e) {    fNamespaces=true;  }  fSymbolTable=(SymbolTable)componentManager.getProperty(SYMBOL_TABLE);  fErrorReporter=(XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);}  }
class C{  public static Window windowForWordInPosition(int windowSize,int wordPos,List<String> sentence){  List<String> window=new ArrayList<>();  List<String> onlyTokens=new ArrayList<>();  int contextSize=(int)Math.floor((windowSize - 1) / 2);  for (int i=wordPos - contextSize; i <= wordPos + contextSize; i++) {    if (i < 0)     window.add("<s>"); else     if (i >= sentence.size())     window.add("</s>"); else {      onlyTokens.add(sentence.get(i));      window.add(sentence.get(i));    }  }  String wholeSentence=StringUtils.join(sentence);  String window2=StringUtils.join(onlyTokens);  int begin=wholeSentence.indexOf(window2);  int end=begin + window2.length();  return new Window(window,begin,end);}  }
class C{  @Override public void populateField(Double value){  if (slider != null) {    double ratio=value / this.maxValue;    int sliderRatio=(int)(ratio * slider.getMaximum());    slider.setValue(sliderRatio);    oldValueObj=Integer.valueOf(sliderRatio);  }}  }
class C{  public static boolean equals(double x,double y){  return (Double.isNaN(x) && Double.isNaN(y)) || x == y;}  }
class C{  public Spanned build(){  SpannableStringBuilder builder=new SpannableStringBuilder(mText);  RoundedCornersBackgroundSpan span=new RoundedCornersBackgroundSpan(this);  builder.setSpan(span,0,builder.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  return builder;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public Builder withPhysical(boolean physical){  this.physical=physical;  return this;}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  protected boolean isValidAuthority(String authority){  if (authority == null) {    return false;  }  if (authorityValidator != null && authorityValidator.isValid(authority)) {    return true;  }  final String authorityASCII=DomainValidator.unicodeToASCII(authority);  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);  if (!authorityMatcher.matches()) {    return false;  }  String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);  DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));  if (!domainValidator.isValid(hostLocation)) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    if (!inetAddressValidator.isValid(hostLocation)) {      return false;    }  }  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);  if (port != null && !PORT_PATTERN.matcher(port).matches()) {    return false;  }  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);  if (extra != null && extra.trim().length() > 0) {    return false;  }  return true;}  }
class C{  public FractionFormat(){}  }
class C{  public static int loadCubeMap(Context context,int[] cubeResources){  final int[] textureObjectIds=new int[1];  glGenTextures(1,textureObjectIds,0);  if (textureObjectIds[0] == 0) {    if (LoggerConfig.ON) {      Log.w(TAG,"Could not generate a new OpenGL texture object.");    }    return 0;  }  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inScaled=false;  final Bitmap[] cubeBitmaps=new Bitmap[6];  for (int i=0; i < 6; i++) {    cubeBitmaps[i]=BitmapFactory.decodeResource(context.getResources(),cubeResources[i],options);    if (cubeBitmaps[i] == null) {      if (LoggerConfig.ON) {        Log.w(TAG,"Resource ID " + cubeResources[i] + " could not be decoded.");      }      glDeleteTextures(1,textureObjectIds,0);      return 0;    }  }  glBindTexture(GL_TEXTURE_CUBE_MAP,textureObjectIds[0]);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,cubeBitmaps[0],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,cubeBitmaps[1],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,cubeBitmaps[2],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,cubeBitmaps[3],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,cubeBitmaps[4],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,cubeBitmaps[5],0);  glBindTexture(GL_TEXTURE_2D,0);  for (  Bitmap bitmap : cubeBitmaps) {    bitmap.recycle();  }  return textureObjectIds[0];}  }
class C{  private void openMenuDrawer(){  if (mDrawerLayout != null) {    mDrawerLayout.openDrawer(MENU_DRAWER_GRAVITY);  }}  }
class C{  public GroupFacesAction groupFaces(List<String> faceIds){  Validation.validateArray(faceIds,1,1000,new ParameterValidationException("faceIds","length must be between 1 & 1000"));  return new GroupFacesAction(cognitiveContext,faceIds);}  }
class C{  public List<String> listACL(int from,int to){  AmazonEC2 client=null;  try {    client=getEc2Client();    List<String> ipPermissions=new ArrayList<String>();    if (this.insEnvIdentity.isClassic()) {      DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withGroupNames(Arrays.asList(config.getACLGroupName()));      DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);      for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());      logger.info("Fetch current permissions for classic env of running instance");    } else {      Filter nameFilter=new Filter().withName("group-name").withValues(config.getACLGroupName());      String vpcid=config.getVpcId();      if (vpcid == null || vpcid.isEmpty()) {        throw new IllegalStateException("vpcid is null even though instance is running in vpc.");      }      Filter vpcFilter=new Filter().withName("vpc-id").withValues(vpcid);      DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withFilters(nameFilter,vpcFilter);      DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);      for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());      logger.info("Fetch current permissions for vpc env of running instance");    }    return ipPermissions;  }  finally {    if (client != null)     client.shutdown();  }}  }
class C{  public LibraryHolder(View itemView,LibraryObject object){  super(itemView);  itemView.findViewById(R.id.item_about_library_container).setOnClickListener(this);  TextView title=(TextView)itemView.findViewById(R.id.item_about_library_title);  title.setText(object.title);  DisplayUtils.setTypeface(itemView.getContext(),title);  TextView content=(TextView)itemView.findViewById(R.id.item_about_library_content);  content.setText(object.subtitle);  DisplayUtils.setTypeface(itemView.getContext(),content);  this.uri=object.uri;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public InstanceInitializer fullCopy(){  InstanceInitializer tree=(InstanceInitializer)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private static String readFile(File file,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));  return new String(encoded,encoding);}  }
class C{  private static Website mergePermissionInfoForTopLevelOrigin(WebsiteAddress address,List<Set<Website>> websiteSets){  String origin=address.getOrigin();  String host=Uri.parse(origin).getHost();  Website merged=new Website(address);  for (  Set<Website> websiteSet : websiteSets) {    for (    Website other : websiteSet) {      if (merged.getCookieInfo() == null && other.getCookieInfo() != null && permissionInfoIsForTopLevelOrigin(other.getCookieInfo(),origin)) {        merged.setCookieInfo(other.getCookieInfo());      }      if (merged.getFullscreenInfo() == null && other.getFullscreenInfo() != null && permissionInfoIsForTopLevelOrigin(other.getFullscreenInfo(),origin)) {        merged.setFullscreenInfo(other.getFullscreenInfo());      }      if (merged.getGeolocationInfo() == null && other.getGeolocationInfo() != null && permissionInfoIsForTopLevelOrigin(other.getGeolocationInfo(),origin)) {        merged.setGeolocationInfo(other.getGeolocationInfo());      }      if (merged.getMidiInfo() == null && other.getMidiInfo() != null && permissionInfoIsForTopLevelOrigin(other.getMidiInfo(),origin)) {        merged.setMidiInfo(other.getMidiInfo());      }      if (merged.getProtectedMediaIdentifierInfo() == null && other.getProtectedMediaIdentifierInfo() != null && permissionInfoIsForTopLevelOrigin(other.getProtectedMediaIdentifierInfo(),origin)) {        merged.setProtectedMediaIdentifierInfo(other.getProtectedMediaIdentifierInfo());      }      if (merged.getPushNotificationInfo() == null && other.getPushNotificationInfo() != null && permissionInfoIsForTopLevelOrigin(other.getPushNotificationInfo(),origin)) {        merged.setPushNotificationInfo(other.getPushNotificationInfo());      }      if (merged.getCameraInfo() == null && other.getCameraInfo() != null) {        if (origin.equals(other.getCameraInfo().getOrigin()) && (origin.equals(other.getCameraInfo().getEmbedderSafe()) || "*".equals(other.getCameraInfo().getEmbedderSafe()))) {          merged.setCameraInfo(other.getCameraInfo());        }      }      if (merged.getMicrophoneInfo() == null && other.getMicrophoneInfo() != null) {        if (origin.equals(other.getMicrophoneInfo().getOrigin()) && (origin.equals(other.getMicrophoneInfo().getEmbedderSafe()) || "*".equals(other.getMicrophoneInfo().getEmbedderSafe()))) {          merged.setMicrophoneInfo(other.getMicrophoneInfo());        }      }      if (merged.getLocalStorageInfo() == null && other.getLocalStorageInfo() != null && origin.equals(other.getLocalStorageInfo().getOrigin())) {        merged.setLocalStorageInfo(other.getLocalStorageInfo());      }      for (      StorageInfo storageInfo : other.getStorageInfo()) {        if (host.equals(storageInfo.getHost())) {          merged.addStorageInfo(storageInfo);        }      }    }  }  return merged;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public JsonElement parse(Reader json) throws JsonIOException, JsonSyntaxException {  try {    JsonReader jsonReader=new JsonReader(json);    JsonElement element=parse(jsonReader);    if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {      throw new JsonSyntaxException("Did not consume the entire document.");    }    return element;  } catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  protected MessagesGetChatQueryWithChatIdsFields chatIds(Integer... value){  return unsafeParam("chat_ids",value);}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  static synchronized ExplorerContextMenuFactory instance(){  if (sharedInstance == null)   sharedInstance=new ExplorerContextMenuFactory();  return sharedInstance;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", roleName=").append(roleName);  sb.append(", deptId=").append(deptId);  sb.append(", roleType=").append(roleType);  sb.append("]");  return sb.toString();}  }
class C{  public static <T extends Bean>T load(String table,String where,Object[] args,String orderby,Class<T> clazz){  try {    T b=(T)clazz.newInstance();    if (load(table,where,args,orderby,b)) {      return b;    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }  return null;}  }
class C{  public static void syncArchive2Summary(String fileName,IConnector connector,DataTable table,SampleAttributeTable sampleAttributeTable) throws IOException {  table.clear();  Map<String,byte[]> label2data=connector.getAuxiliaryData();  if (label2data.containsKey(SampleAttributeTable.USER_STATE)) {    syncAux2Summary(fileName,label2data.get(SampleAttributeTable.USER_STATE),table);  }  if (label2data.containsKey(SampleAttributeTable.SAMPLE_ATTRIBUTES)) {    sampleAttributeTable.read(new StringReader(new String(label2data.get(SampleAttributeTable.SAMPLE_ATTRIBUTES))),null,true);    if (sampleAttributeTable.getSampleSet().size() > 0) {      String sampleName=sampleAttributeTable.getSampleSet().iterator().next();      String name=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(fileName),"");      if (!sampleName.equals(name))       sampleAttributeTable.renameSample(sampleName,name,false);    }  } else {    String name=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(fileName),"");    sampleAttributeTable.addSample(name,new HashMap<String,Object>(),true,true);  }  if (sampleAttributeTable.getSampleSet().size() > 1) {    String sampleName=Basic.getFileNameWithoutPath(fileName);    if (sampleAttributeTable.getSampleSet().contains(sampleName))     sampleAttributeTable.removeSample(sampleName);  }  String[] classifications=connector.getAllClassificationNames();  for (  String classification : classifications) {    final IClassificationBlock classificationBlock=connector.getClassificationBlock(classification);    if (classificationBlock != null)     syncClassificationBlock2Summary(0,1,classificationBlock,table);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static boolean isBitOn(int value,int bitNumber){  if (bitNumber <= 0 || bitNumber > 8) {    throw new IllegalArgumentException("Only bits 1 through 8 are supported");  }  return ((value & MASKS[bitNumber - 1]) == MASKS[bitNumber - 1]);}  }
class C{  public UTF16Reader(InputStream inputStream,boolean isBigEndian,MessageFormatter messageFormatter,Locale locale){  this(inputStream,DEFAULT_BUFFER_SIZE,isBigEndian,messageFormatter,locale);}  }
class C{  public RenderPanelImpl(){  setBounds(0,0,ST_WIDTH,ST_HEIGHT);  setPreferredSize(new Dimension(ST_WIDTH,ST_HEIGHT));  wmsEnvVarValues.setImageWidth(ST_WIDTH);  wmsEnvVarValues.setImageHeight(ST_HEIGHT);  PrefManager.getInstance().addListener(this);}  }
class C{  public PrecompiledJoinCostReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName,null,null,0);}  }
class C{  public boolean ignore_types_for_sccs(){  return soot.PhaseOptions.getBoolean(options,"ignore-types-for-sccs");}  }
class C{  public JsonWriter name(String name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if (deferredName != null) {    throw new IllegalStateException();  }  if (stackSize == 0) {    throw new IllegalStateException("JsonWriter is closed.");  }  deferredName=name;  return this;}  }
class C{  public void close() throws JMSException {synchronized (this) {    if (!closed) {      closing=true;      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("GSConnectionImpl.close()  closing connection: " + toString());      }      stop();      while (!sessions.isEmpty()) {        GSSessionImpl session=(GSSessionImpl)sessions.elementAt(0);        try {          session.close();        } catch (        JMSException jE) {        }      }      getConnFacParent().removeConnection(this);      closed=true;      closing=false;      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("GSConnectionImpl.close() connection was closed: " + toString());      }    }  }}  }
class C{  public MullerSolver2(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  private BpmResult logOnPtc(final LoginData loginData){  OkHttpClient http;  CredentialProvider cp;  http=new OkHttpClient();  final String username=loginData.getUsername();  final String password=loginData.getPassword();  final boolean saveAuth=config.getBool(ConfigKey.LOGIN_SAVE_AUTH);  try {    cp=new PtcCredentialProvider(http,username,password);    config.setString(ConfigKey.LOGIN_PTC_USERNAME,username);    if (saveAuth) {      config.setString(ConfigKey.LOGIN_PTC_PASSWORD,password);    } else {      deleteLoginData(LoginType.PTC);    }  } catch (  LoginFailedException|RemoteServerException e) {    deleteLoginData(LoginType.PTC);    return new BpmResult(e.getMessage());  }  try {    prepareLogin(cp,http);    return new BpmResult();  } catch (  LoginFailedException|RemoteServerException e) {    deleteLoginData(LoginType.ALL);    return new BpmResult(e.getMessage());  }}  }
class C{  public boolean removeChildEdge(Edge e){  edgeCheck(e,true);  return removeChild(getTargetNode(e.getRow()));}  }
class C{  @Override public void validate(ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {  if (context == null)   context=fEmptyContext;  if (context.needFacetChecking() && (fFacetsDefined != 0 && fFacetsDefined != FACET_WHITESPACE)) {    checkFacets(validatedInfo);  }  if (context.needExtraChecking()) {    checkExtraRules(context,validatedInfo);  }}  }
class C{  public Bindings add(String property,JTextArea textArea){  registerPropertyChangeListener(textArea);  return add(new JTextAreaBinding(property,textArea));}  }
class C{  public void hideAppMenu(){  if (mAppMenu != null && mAppMenu.isShowing())   mAppMenu.dismiss();}  }
class C{  private static void reverse(ConstraintWidget[] widgets){  for (int i=0; i < widgets.length / 2; i++) {    ConstraintWidget widget=widgets[i];    widgets[i]=widgets[widgets.length - 1 - i];    widgets[widgets.length - 1 - i]=widget;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_INFO_FORMAT_NOPASSWORD(String value0,String value1,int num2){  return new SM_SYSTEM_MESSAGE(1300901,value0,value1,num2);}  }
class C{  public IdViewFilter(@NonNull final int[] viewIdentifiers){  this.viewIdentifiers=viewIdentifiers;}  }
class C{  protected void initializeWorld(){  Body ground=new SimulationBody();{    Convex c=Geometry.createRectangle(100.0,1.0);    BodyFixture bf=new BodyFixture(c);    ground.addFixture(bf);  }  ground.translate(new Vector2(0.6875,-8.75));  ground.setMass(MassType.INFINITE);  world.addBody(ground);  Body head=new SimulationBody();{    Convex c=Geometry.createCircle(0.25);    BodyFixture bf=new BodyFixture(c);    head.addFixture(bf);  }  head.setMass(MassType.NORMAL);  world.addBody(head);  Body torso=new SimulationBody();{    Convex c=Geometry.createRectangle(0.5,1.0);    BodyFixture bf=new BodyFixture(c);    torso.addFixture(bf);  }{    Convex c=Geometry.createRectangle(1.0,0.25);    c.translate(new Vector2(0.00390625,0.375));    BodyFixture bf=new BodyFixture(c);    torso.addFixture(bf);  }  torso.translate(new Vector2(0.0234375,-0.8125));  torso.setMass(MassType.NORMAL);  world.addBody(torso);  Body rightHumerus=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    rightHumerus.addFixture(bf);  }  rightHumerus.translate(new Vector2(0.4375,-0.609375));  rightHumerus.setMass(MassType.NORMAL);  world.addBody(rightHumerus);  Body rightUlna=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.4);    BodyFixture bf=new BodyFixture(c);    rightUlna.addFixture(bf);  }  rightUlna.translate(new Vector2(0.44140625,-0.98828125));  rightUlna.setMass(MassType.NORMAL);  world.addBody(rightUlna);  Body neck=new SimulationBody();{    Convex c=Geometry.createRectangle(0.15,0.2);    BodyFixture bf=new BodyFixture(c);    neck.addFixture(bf);  }  neck.translate(new Vector2(0.015625,-0.2734375));  neck.setMass(MassType.NORMAL);  world.addBody(neck);  Body leftHumerus=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    leftHumerus.addFixture(bf);  }  leftHumerus.translate(new Vector2(-0.3828125,-0.609375));  leftHumerus.setMass(MassType.NORMAL);  world.addBody(leftHumerus);  Body leftUlna=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.4);    BodyFixture bf=new BodyFixture(c);    leftUlna.addFixture(bf);  }  leftUlna.translate(new Vector2(-0.3828125,-0.9765625));  leftUlna.setMass(MassType.NORMAL);  world.addBody(leftUlna);  Body rightFemur=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.75);    BodyFixture bf=new BodyFixture(c);    rightFemur.addFixture(bf);  }  rightFemur.translate(new Vector2(0.1796875,-1.5703125));  rightFemur.setMass(MassType.NORMAL);  world.addBody(rightFemur);  Body leftFemur=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.75);    BodyFixture bf=new BodyFixture(c);    leftFemur.addFixture(bf);  }  leftFemur.translate(new Vector2(-0.1328125,-1.5703125));  leftFemur.setMass(MassType.NORMAL);  world.addBody(leftFemur);  Body rightTibia=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    rightTibia.addFixture(bf);  }  rightTibia.translate(new Vector2(0.18359375,-2.11328125));  rightTibia.setMass(MassType.NORMAL);  world.addBody(rightTibia);  Body leftTibia=new SimulationBody();{    Convex c=Geometry.createRectangle(0.25,0.5);    BodyFixture bf=new BodyFixture(c);    leftTibia.addFixture(bf);  }  leftTibia.translate(new Vector2(-0.1328125,-2.1171875));  leftTibia.setMass(MassType.NORMAL);  world.addBody(leftTibia);  RevoluteJoint headToNeck=new RevoluteJoint(head,neck,new Vector2(0.01,-0.2));  headToNeck.setLimitEnabled(false);  headToNeck.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  headToNeck.setReferenceAngle(Math.toRadians(0.0));  headToNeck.setMotorEnabled(false);  headToNeck.setMotorSpeed(Math.toRadians(0.0));  headToNeck.setMaximumMotorTorque(0.0);  headToNeck.setCollisionAllowed(false);  world.addJoint(headToNeck);  RevoluteJoint neckToTorso=new RevoluteJoint(neck,torso,new Vector2(0.01,-0.35));  neckToTorso.setLimitEnabled(false);  neckToTorso.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  neckToTorso.setReferenceAngle(Math.toRadians(0.0));  neckToTorso.setMotorEnabled(false);  neckToTorso.setMotorSpeed(Math.toRadians(0.0));  neckToTorso.setMaximumMotorTorque(0.0);  neckToTorso.setCollisionAllowed(false);  world.addJoint(neckToTorso);  RevoluteJoint torsoToLeftHumerus=new RevoluteJoint(torso,leftHumerus,new Vector2(-0.4,-0.4));  torsoToLeftHumerus.setLimitEnabled(false);  torsoToLeftHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToLeftHumerus.setReferenceAngle(Math.toRadians(0.0));  torsoToLeftHumerus.setMotorEnabled(false);  torsoToLeftHumerus.setMotorSpeed(Math.toRadians(0.0));  torsoToLeftHumerus.setMaximumMotorTorque(0.0);  torsoToLeftHumerus.setCollisionAllowed(false);  world.addJoint(torsoToLeftHumerus);  RevoluteJoint torsoToRightHumerus=new RevoluteJoint(torso,rightHumerus,new Vector2(0.4,-0.4));  torsoToRightHumerus.setLimitEnabled(false);  torsoToRightHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToRightHumerus.setReferenceAngle(Math.toRadians(0.0));  torsoToRightHumerus.setMotorEnabled(false);  torsoToRightHumerus.setMotorSpeed(Math.toRadians(0.0));  torsoToRightHumerus.setMaximumMotorTorque(0.0);  torsoToRightHumerus.setCollisionAllowed(false);  world.addJoint(torsoToRightHumerus);  RevoluteJoint rightHumerusToRightUlna=new RevoluteJoint(rightHumerus,rightUlna,new Vector2(0.43,-0.82));  rightHumerusToRightUlna.setLimitEnabled(false);  rightHumerusToRightUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  rightHumerusToRightUlna.setReferenceAngle(Math.toRadians(0.0));  rightHumerusToRightUlna.setMotorEnabled(false);  rightHumerusToRightUlna.setMotorSpeed(Math.toRadians(0.0));  rightHumerusToRightUlna.setMaximumMotorTorque(0.0);  rightHumerusToRightUlna.setCollisionAllowed(false);  world.addJoint(rightHumerusToRightUlna);  RevoluteJoint leftHumerusToLeftUlna=new RevoluteJoint(leftHumerus,leftUlna,new Vector2(-0.4,-0.81));  leftHumerusToLeftUlna.setLimitEnabled(false);  leftHumerusToLeftUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  leftHumerusToLeftUlna.setReferenceAngle(Math.toRadians(0.0));  leftHumerusToLeftUlna.setMotorEnabled(false);  leftHumerusToLeftUlna.setMotorSpeed(Math.toRadians(0.0));  leftHumerusToLeftUlna.setMaximumMotorTorque(0.0);  leftHumerusToLeftUlna.setCollisionAllowed(false);  world.addJoint(leftHumerusToLeftUlna);  RevoluteJoint torsoToRightFemur=new RevoluteJoint(torso,rightFemur,new Vector2(0.16,-1.25));  torsoToRightFemur.setLimitEnabled(false);  torsoToRightFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToRightFemur.setReferenceAngle(Math.toRadians(0.0));  torsoToRightFemur.setMotorEnabled(false);  torsoToRightFemur.setMotorSpeed(Math.toRadians(0.0));  torsoToRightFemur.setMaximumMotorTorque(0.0);  torsoToRightFemur.setCollisionAllowed(false);  world.addJoint(torsoToRightFemur);  RevoluteJoint torsoToLeftFemur=new RevoluteJoint(torso,leftFemur,new Vector2(-0.13,-1.25));  torsoToLeftFemur.setLimitEnabled(false);  torsoToLeftFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  torsoToLeftFemur.setReferenceAngle(Math.toRadians(0.0));  torsoToLeftFemur.setMotorEnabled(false);  torsoToLeftFemur.setMotorSpeed(Math.toRadians(0.0));  torsoToLeftFemur.setMaximumMotorTorque(0.0);  torsoToLeftFemur.setCollisionAllowed(false);  world.addJoint(torsoToLeftFemur);  RevoluteJoint rightFemurToRightTibia=new RevoluteJoint(rightFemur,rightTibia,new Vector2(0.17,-1.9));  rightFemurToRightTibia.setLimitEnabled(false);  rightFemurToRightTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  rightFemurToRightTibia.setReferenceAngle(Math.toRadians(0.0));  rightFemurToRightTibia.setMotorEnabled(false);  rightFemurToRightTibia.setMotorSpeed(Math.toRadians(0.0));  rightFemurToRightTibia.setMaximumMotorTorque(0.0);  rightFemurToRightTibia.setCollisionAllowed(false);  world.addJoint(rightFemurToRightTibia);  RevoluteJoint leftFemurToLeftTibia=new RevoluteJoint(leftFemur,leftTibia,new Vector2(-0.14,-1.9));  leftFemurToLeftTibia.setLimitEnabled(false);  leftFemurToLeftTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));  leftFemurToLeftTibia.setReferenceAngle(Math.toRadians(0.0));  leftFemurToLeftTibia.setMotorEnabled(false);  leftFemurToLeftTibia.setMotorSpeed(Math.toRadians(0.0));  leftFemurToLeftTibia.setMaximumMotorTorque(0.0);  leftFemurToLeftTibia.setCollisionAllowed(false);  world.addJoint(leftFemurToLeftTibia);}  }
class C{  public AccountRegisterDeviceQuery deviceModel(String value){  return unsafeParam("device_model",value);}  }
class C{  public static List<FileWrapper> readModelConfigs(String dataPath,List<String> configs,DiagCollector diagCollector){  List<FileWrapper> files=Lists.newArrayList();  for (  String filename : configs) {    File file=findDataFile(filename,dataPath);    if (file == null) {      diagCollector.addDiag(Diag.error(SimpleLocation.TOPLEVEL,"Cannot find configuration file '%s'.",filename));    } else {      try {        files.add(FileWrapper.from(filename));      } catch (      IOException ex) {        diagCollector.addDiag(Diag.error(SimpleLocation.TOPLEVEL,"Cannot read input file '%s': %s",filename,ex.getMessage()));      }    }  }  if (diagCollector.hasErrors()) {    return null;  }  return files;}  }
class C{  @NotNull public ThemePreviewBuilder addNavigationBar(boolean supportsThemePreviewNavigationBar){  String navigationBarClass=supportsThemePreviewNavigationBar ? "com.android.layoutlib.bridge.bars.ThemePreviewNavigationBar" : "com.android.layoutlib.bridge.bars.NavigationBar";  ComponentDefinition navigationBar=new ComponentDefinition("Navigation bar",ComponentGroup.NAVIGATION_BAR,navigationBarClass).set(ATTR_LAYOUT_HEIGHT,"@android:dimen/navigation_bar_height").set(ATTR_LAYOUT_WIDTH,VALUE_MATCH_PARENT);  return addComponent(navigationBar);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  public static <T>Optional<T> mapNearestDruidQuery(JsonGenerator gen,Function<DruidQuery,T> mapper){  JsonStreamContext context=gen.getOutputContext();  while (context != null) {    Object parent=context.getCurrentValue();    if (parent instanceof DruidQuery) {      return Optional.of(mapper.apply((DruidQuery)parent));    }    context=context.getParent();  }  return Optional.empty();}  }
class C{  private boolean filterComment(ILogEntry logEntry,String comment){  if (comment == null)   return true;  if (regExp) {    return matchesExpression(logEntry.getComment(),comment + CHAR_MATCH_MANY);  } else {    return containsExpression(logEntry.getComment(),comment);  }}  }
class C{  public static AlertDialog showTwoButtonsDialog(final Activity activity,final String title,final String text,final String negativeButtonText,final DialogInterface.OnClickListener leftButtonListener,final String positiveButtonText,final DialogInterface.OnClickListener positiveButtonListener){  if (activity == null || activity.isFinishing()) {    return null;  }  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(negativeButtonText,leftButtonListener).setNegativeButton(positiveButtonText,positiveButtonListener).show();}  }
class C{  protected MarketAddToAlbumQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  public void increaseDefeat(){  defeat++;}  }
class C{  public static double standardDeviation(double[] data,int opt){  if (opt == 0)   return Math.sqrt(variance(data,opt)); else   return Math.sqrt(variance(data,opt));}  }
class C{  private static boolean pingURL(String url,int timeout){  try {    HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();    connection.setConnectTimeout(timeout);    connection.setReadTimeout(timeout);    connection.setRequestMethod("GET");    int responseCode=connection.getResponseCode();    return (200 <= responseCode && responseCode <= 399);  } catch (  IOException exception) {    exception.printStackTrace();    return false;  }}  }
class C{  public boolean isSelected(){  return isApplicable() && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipH();}  }
class C{  public static String format(char text,char strand){  if (strand == '+') {    return "\033[48;5;147;38;5;240m" + text + "\033[0m";  } else   if (strand == '-') {    return "\033[48;5;225;38;5;240m" + text + "\033[0m";  } else {    return "\033[48;5;250;38;5;240m" + text + "\033[0m";  }}  }
class C{  private boolean scrollAndFocus(int direction,int left,int right){  boolean handled=true;  int width=getWidth();  int containerLeft=getScrollX();  int containerRight=containerLeft + width;  boolean toLeft=direction == View.FOCUS_LEFT;  View newFocused=findFocusableViewInBounds(toLeft,left,right);  if (newFocused == null) {    newFocused=this;  }  if (left >= containerLeft && right <= containerRight) {    handled=false;  } else {    int delta=toLeft ? (left - containerLeft) : (right - containerRight);    doScrollX(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  public static List<NameableObject> asList(Collection<? extends NameableObject> collection){  List<NameableObject> list=new ArrayList<>();  list.addAll(collection);  return list;}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  @Nonnull public OperatingSystem.Builder copy(){  return new Builder(this);}  }
class C{  public void rectValuesToPixel(List<RectF> rects){  Matrix m=getValueToPixelMatrix();  for (int i=0; i < rects.size(); i++)   m.mapRect(rects.get(i));}  }
class C{  public double[] skipTo(final int index) throws MathIllegalArgumentException {  count=index;  return nextVector();}  }
class C{  private void reconfigurePipeline(){  if (fDTDValidator == null) {    fBindNamespaces=true;  } else   if (!fDTDValidator.hasGrammar()) {    fBindNamespaces=true;    fPerformValidation=fDTDValidator.validate();    XMLDocumentSource source=fDTDValidator.getDocumentSource();    XMLDocumentHandler handler=fDTDValidator.getDocumentHandler();    source.setDocumentHandler(handler);    if (handler != null)     handler.setDocumentSource(source);    fDTDValidator.setDocumentSource(null);    fDTDValidator.setDocumentHandler(null);  }}  }
class C{  public EigenDecomposition(final double[] main,final double[] secondary){  isSymmetric=true;  this.main=main.clone();  this.secondary=secondary.clone();  transformer=null;  final int size=main.length;  final double[][] z=new double[size][size];  for (int i=0; i < size; i++) {    z[i][i]=1.0;  }  findEigenVectors(z);}  }
class C{  void dumpBinaryIndex(String path){  try {    FileOutputStream fos=new FileOutputStream(path);    DataOutputStream dos=new DataOutputStream(fos);    dos.writeInt(INDEX_MAGIC);    dos.writeInt(diphoneIndex.keySet().size());    for (Iterator i=diphoneIndex.keySet().iterator(); i.hasNext(); ) {      String key=(String)i.next();      int pos=((Integer)diphoneIndex.get(key)).intValue();      dos.writeUTF(key);      dos.writeInt(pos);    }    dos.close();  } catch (  FileNotFoundException fe) {    throw new Error("Can't dump binary index " + fe.getMessage());  }catch (  IOException ioe) {    throw new Error("Can't write binary index " + ioe.getMessage());  }}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Override public void close(){  if (mustWriteOnClose) {    System.err.println("Writing file: " + file);    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      for (      Long key : map.keySet()) {        w.write(key + "\t" + map.get(key)+ "\n");      }    } catch (    IOException ex) {      Basic.caught(ex);    }  }}  }
class C{  public void createInFile(String filePath) throws IOException {  this.inFile=new ExifInterface(filePath);}  }
class C{  public BigFraction pow(final long exponent){  if (exponent == 0) {    return ONE;  }  if (numerator.signum() == 0) {    return this;  }  if (exponent < 0) {    return new BigFraction(ArithmeticUtils.pow(denominator,-exponent),ArithmeticUtils.pow(numerator,-exponent));  }  return new BigFraction(ArithmeticUtils.pow(numerator,exponent),ArithmeticUtils.pow(denominator,exponent));}  }
class C{  public void removeColumn(String columnName){  if (featureCollection != null) {    if (columnList.contains(columnName)) {      columnList.remove(columnName);      SimpleFeatureTypeBuilder featureTypeBuilder=new SimpleFeatureTypeBuilder();      featureTypeBuilder.init(featureCollection.getSchema());      featureTypeBuilder.remove(columnName);      SimpleFeatureType newFeatureType=featureTypeBuilder.buildFeatureType();      int attributeToRemoveIndex=0;      for (      AttributeDescriptor descriptor : newFeatureType.getAttributeDescriptors()) {        if (descriptor.getLocalName().compareTo(columnName) == 0) {          break;        }        attributeToRemoveIndex++;      }      String typeName=userLayer.getInlineFeatureType().getTypeName();      try {        SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);        SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(newFeatureType);        ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();        SimpleFeatureIterator it=featureSource.getFeatures().features();        try {          while (it.hasNext()) {            SimpleFeature sf=it.next();            List<Object> attributes=sf.getAttributes();            attributes.remove(attributeToRemoveIndex);            sfb.addAll(attributes);            featureList.add(sfb.buildFeature(null));          }        }  finally {          it.close();        }        SimpleFeatureCollection collection=new ListFeatureCollection(newFeatureType,featureList);        DataStore dataStore=DataUtilities.dataStore(collection);        featureCollection=collection;        cachedFeature=null;        lastRow=-1;        userLayer.setInlineFeatureDatastore(dataStore);        userLayer.setInlineFeatureType(newFeatureType);      } catch (      IOException e) {        ConsoleManager.getInstance().exception(this,e);      }      this.fireTableStructureChanged();      this.fireTableDataChanged();      if (parentObj != null) {        parentObj.inlineFeatureUpdated();      }    }  }}  }
class C{  private void fireEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){  Set<SupervisionListener> listeners=equipmentSupervisionListeners.get(supervisionEvent.getEntityId());  if (listeners != null) {    for (    SupervisionListener listener : listeners) {      listener.onSupervisionUpdate(supervisionEvent);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCHeal_Instant_HEAL_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200546,num0,skilltarget,skillname);}  }
class C{  public DOMParserImpl(SymbolTable symbolTable){  this((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);}  }
class C{  public MarketSearchQuery priceFrom(Integer value){  return unsafeParam("price_from",value);}  }
class C{  private void endList(boolean orderedList){  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle style=mParagraphStyles.peek();    ParagraphType type=style.getType();    if ((orderedList && (type.isNumbering() || type == ParagraphType.INDENTATION_OL)) || (!orderedList && (type.isBullet() || type == ParagraphType.INDENTATION_UL))) {      int indent=style.getRelativeIndent();      if (indent > 1) {        style.setRelativeIndent(indent - 1);        style.setAbsoluteIndent(style.getAbsoluteIndent() - 1);      } else {        mParagraphStyles.pop();      }    } else {      mParagraphStyles.pop();      endList(orderedList);    }  }}  }
class C{  public static double product(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return PRODUCT.evaluate(values,begin,length);}  }
class C{  public static Vector<String> effectClasses(){  return new Vector<String>(getList("audioeffects.classes.list"));}  }
class C{  public static int parseInt(String text) throws DataParseException {  try {    return Integer.parseInt(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public static final void shuffle(float[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    float t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Point3D");  sb.append("{x=").append(x);  sb.append(", y=").append(y);  sb.append(", z=").append(z);  sb.append('}');  return sb.toString();}  }
class C{  public ZWaveHrvStatusCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public final void notifyWhenRemoved(DataRemovedListener listener){  if (listener == null)   throw new IllegalArgumentException("Listener cannot be null");  if (isRemoved())   listener.dataRemoved(this); else   getRemovedListeners().add(new ComparableWeakReference(listener));}  }
class C{  public RunnableTaskAdapter(Runnable runnable,T result){  this.runnable=runnable;  this.result=result;}  }
class C{  private double differentiateThreePoint(double[] xvals,double[] yvals,int indexOfDifferentiation,int indexOfFirstSample,int indexOfSecondsample,int indexOfThirdSample){  final double x0=yvals[indexOfFirstSample];  final double x1=yvals[indexOfSecondsample];  final double x2=yvals[indexOfThirdSample];  final double t=xvals[indexOfDifferentiation] - xvals[indexOfFirstSample];  final double t1=xvals[indexOfSecondsample] - xvals[indexOfFirstSample];  final double t2=xvals[indexOfThirdSample] - xvals[indexOfFirstSample];  final double a=(x2 - x0 - (t2 / t1 * (x1 - x0))) / (t2 * t2 - t1 * t2);  final double b=(x1 - x0 - a * t1 * t1) / t1;  return (2 * a * t) + b;}  }
class C{  private static int probe(final int perturb,final int j){  return (j << 2) + j + perturb+ 1;}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  @SuppressWarnings("unchecked") public static String mapWritableToString(MapWritable map){  JSONObject jsonObj=new JSONObject();  for (  Writable key : map.keySet()) {    jsonObj.put(key.toString(),map.get(key).toString());  }  return jsonObj.toJSONString();}  }
class C{  void addClassName(String className){  getClassNames().add(className);}  }
class C{  protected String toString(Object[] values){  int size=values.length;  if (size == 0) {    return "";  }  fTempBuffer.setLength(0);  for (int i=0; i < size; i++) {    if (i > 0) {      fTempBuffer.append(',');    }    fTempBuffer.append(values[i]);  }  return fTempBuffer.toString();}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  if (needsSyncChildren()) {    synchronizeChildren();  }  out.defaultWriteObject();}  }
class C{  public Optional<Double> min(){  if (isEmpty())   return Optional.empty();  return Optional.of(buckets_.get(0).getRange().getFloor());}  }
class C{  public AuthCheckPhoneQuery(VkApiClient client,UserActor actor,String phone,String clientSecret){  super(client,"auth.checkPhone",OkResponse.class);  accessToken(actor.getAccessToken());  phone(phone);  clientSecret(clientSecret);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void createUI(){  readConfigFileNoScrollPane(null,this,"symboltype/ExternalGraphicSymbol.xml");  registerForTextFieldButton(FieldIdEnum.EXTERNAL_GRAPHIC,this);}  }
class C{  private void createUI(){  setLayout(new BorderLayout());  colourRampMap=ColourRampFactory.getColourRampMap();  createTopPanel();  createEditPanel();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_CANNOT_SUBMIT(String value){  return new SM_SYSTEM_MESSAGE(1390259,value);}  }
class C{  @Nullable static GrMethodCall createNewValue(@NotNull GrStatementOwner root,@NotNull BuildFileKey key,@Nullable Object value,boolean reformatClosure){  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(root.getProject());  String path=key.getPath();  String[] parts=path.split("/");  GrStatementOwner parent=root;  for (int i=0; i < parts.length - 1; i++) {    String part=parts[i];    GrStatementOwner closure=getMethodClosureArgument(parent,part);    if (closure == null) {      parent.addStatementBefore(factory.createStatementFromText(part + " {}"),null);      closure=getMethodClosureArgument(parent,part);      if (closure == null) {        return null;      }    }    parent=closure;  }  String name=parts[parts.length - 1];  String text=name + " " + key.getType().convertValueToExpression(value);  GrStatement statementBefore=null;  if (key.shouldInsertAtBeginning()) {    GrStatement[] parentStatements=parent.getStatements();    if (parentStatements.length > 0) {      statementBefore=parentStatements[0];    }  }  parent.addStatementBefore(factory.createStatementFromText(text),statementBefore);  if (reformatClosure) {    reformatClosure(parent);  }  return getMethodCall(parent,name);}  }
class C{  private AnAction[] processActions(AndroidLogcatView.AndroidLogConsole console,AnAction[] actions){  List<AnAction> actionList=new ArrayList<AnAction>(actions.length);  AnAction scrollToEndAction=null;  for (  AnAction a : actions) {    if (a instanceof ConsoleViewImpl.ClearAllAction) {      continue;    }    if (a instanceof ScrollToTheEndToolbarAction) {      String message="Scroll to the end. Clicking on a particular line stops scrolling and keeps that line visible.";      a.getTemplatePresentation().setDescription(message);      a.getTemplatePresentation().setText(message);      scrollToEndAction=a;      continue;    }    actionList.add(a);  }  if (scrollToEndAction != null) {    actionList.add(0,scrollToEndAction);  }  actionList.add(0,new ClearLogCatAction(console));  return actionList.toArray(new AnAction[actionList.size()]);}  }
class C{  public void clear(){  freqTable.clear();}  }
class C{  public void removeFifoXtnInfoForEntry(IEntryHolder eh){  _terminatingXtnsInfo.removeFifoXtnInfoForEntry(eh);}  }
class C{  public PlayerLevelUpRewards acceptLevelUpRewards(int level) throws RemoteServerException, LoginFailedException {  if (level > stats.getLevel()) {    return new PlayerLevelUpRewards(PlayerLevelUpRewards.Status.NOT_UNLOCKED_YET);  }  LevelUpRewardsMessage msg=LevelUpRewardsMessage.newBuilder().setLevel(level).build();  ServerRequest serverRequest=new ServerRequest(RequestType.LEVEL_UP_REWARDS,msg);  api.getRequestHandler().sendServerRequests(serverRequest);  LevelUpRewardsResponse response;  try {    response=LevelUpRewardsResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  ItemBag bag=api.getInventories().getItemBag();  for (  ItemAward itemAward : response.getItemsAwardedList()) {    Item item=bag.getItem(itemAward.getItemId());    item.setCount(item.getCount() + itemAward.getItemCount());  }  return new PlayerLevelUpRewards(response);}  }
class C{  public PluginLogger(Plugin context){  super(context.getClass().getCanonicalName(),null);  String prefix=context.getDescription().getPrefix();  pluginName=prefix != null ? new StringBuilder().append("[").append(prefix).append("] ").toString() : "[" + context.getDescription().getName() + "] ";  setParent(context.getServer().getLogger());  setLevel(Level.ALL);}  }
class C{  public void add(short[] vals){  add(vals,0,vals.length);}  }
class C{  public SnackTextfileDoubleDataSource(Reader reader){  super(reader);}  }
class C{  public void freeSLHolder(IStoredListIterator<T> slh){  if (slh != null)   slh.release();}  }
class C{  public static boolean isValidHexColor(String value){  return value != null && HEX_COLOR_PATTERN.matcher(value).matches();}  }
class C{  public void destroy(){  mContextControl.destroy();  mSearchTermControl.destroy();}  }
class C{  public void addDataMapObject(double mapValue,OrganisationUnit unit){  InternalMapObject mapObject=new InternalMapObject();  mapObject.setName(unit.getName());  mapObject.setValue(mapValue);  mapObject.setFillOpacity(opacity);  mapObject.setStrokeColor(Color.WHITE);  mapObject.setMapLayerType(MapLayerType.THEMATIC);  mapObject.buildGeometryForOrganisationUnit(unit);  addMapObject(mapObject);  mapObject.setMapLayer(this);}  }
class C{  private void copyIn(final double[][] in) throws MathIllegalArgumentException, NullArgumentException {  setSubMatrix(in,0,0);}  }
class C{  protected PhotosGetChatUploadServerQuery chatId(int value){  return unsafeParam("chat_id",value);}  }
class C{  private List<Result> makeTimeSeriesResults(JsonNode jsonResult,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){  List<Result> results=new ArrayList<>();  for (  JsonNode record : jsonResult) {    DateTime timeStamp=new DateTime(record.get("timestamp").asText(),dateTimeZone);    JsonNode result=record.get("result");    LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,result);    results.add(new Result(new LinkedHashMap<>(),metricValues,timeStamp));  }  return results;}  }
class C{  @Override protected void onResume(){  super.onResume();  LOG.d(TAG,"Resumed the activity.");  if (this.appView == null) {    return;  }  this.getWindow().getDecorView().requestFocus();  this.appView.handleResume(this.keepRunning);}  }
class C{  private boolean isTempBlock(BlockId blk){  return blk.fileName().startsWith("_temp");}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_RIGHT);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_RIGHT);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_LEFT);      } else {        handled=fullScroll(View.FOCUS_LEFT);      }    break;case KeyEvent.KEYCODE_DPAD_RIGHT:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_RIGHT);  } else {    handled=fullScroll(View.FOCUS_RIGHT);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_LEFT : View.FOCUS_RIGHT);break;}}return handled;}  }
class C{  public boolean equals(Object other){  if (other instanceof LocalUnitPair && ((LocalUnitPair)other).local == this.local && ((LocalUnitPair)other).unit == this.unit) {    return true;  } else   return false;}  }
class C{  private IEditorPart openEditor() throws PartInitException {  IEditorPart part;  IEditorRegistry registry;  registry=SVNUIPlugin.getPlugin().getWorkbench().getEditorRegistry();  IEditorDescriptor descriptor=registry.getDefaultEditor(svnFile.getName());  String id;  if (descriptor == null || !(descriptor instanceof EditorDescriptor) || !(((EditorDescriptor)descriptor).isInternal())) {    id=IDEWorkbenchPlugin.DEFAULT_TEXT_EDITOR_ID;  } else {    try {      Object obj=IDEWorkbenchPlugin.createExtension(((EditorDescriptor)descriptor).getConfigurationElement(),"class");      if (obj instanceof ITextEditor) {        id=descriptor.getId();      } else {        id=IDEWorkbenchPlugin.DEFAULT_TEXT_EDITOR_ID;      }    } catch (    CoreException e) {      id=IDEWorkbenchPlugin.DEFAULT_TEXT_EDITOR_ID;    }  }  if (editor != null && editor instanceof IReusableEditor && page.isPartVisible(editor) && editor.getSite().getId().equals(id)) {    ((IReusableEditor)editor).setInput(new RemoteAnnotationEditorInput(svnFile,contents));    part=editor;  } else {    if (editor != null) {      page.closeEditor(editor,false);      editor=null;    }    part=page.openEditor(new RemoteAnnotationEditorInput(svnFile,contents),id);  }  ITextEditor editor=(ITextEditor)part;  if (editor.getSelectionProvider() instanceof IPostSelectionProvider) {    ((IPostSelectionProvider)editor.getSelectionProvider()).addPostSelectionChangedListener(this);  }  part.getSite().getPage().addPartListener(partListener);  return part;}  }
class C{  public void remove() throws RecurrenceInfoException {  List<RecurrenceRule> rulesList=new ArrayList<RecurrenceRule>();  rulesList.addAll(rRulesList);  rulesList.addAll(eRulesList);  try {    for (    RecurrenceRule rule : rulesList)     rule.remove();    info.remove();  } catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException(rre.getMessage(),rre);  }catch (  GenericEntityException gee) {    throw new RecurrenceInfoException(gee.getMessage(),gee);  }}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {  if (this.fElementDeclTab.containsKey(elementName)) {  } else {    fCurrentElementIndex=createElementDecl();    XMLElementDecl elementDecl=new XMLElementDecl();    elementDecl.name.setValues(null,elementName,elementName,null);    elementDecl.scope=-1;    this.fElementDeclTab.put(elementName,elementDecl);    setElementDecl(fCurrentElementIndex,elementDecl);  }  int elementIndex=getElementDeclIndex(elementName);  if (getAttributeDeclIndex(elementIndex,attributeName) != -1) {    return;  }  fCurrentAttributeIndex=createAttributeDecl();  fSimpleType.clear();  if (defaultType != null) {    if (defaultType.equals("#FIXED")) {      fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_FIXED;    } else     if (defaultType.equals("#IMPLIED")) {      fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_IMPLIED;    } else     if (defaultType.equals("#REQUIRED")) {      fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_REQUIRED;    }  }  if (DEBUG) {    System.out.println("defaultvalue = " + defaultValue.toString());  }  fSimpleType.defaultValue=defaultValue != null ? defaultValue.toString() : null;  fSimpleType.nonNormalizedDefaultValue=nonNormalizedDefaultValue != null ? nonNormalizedDefaultValue.toString() : null;  fSimpleType.enumeration=enumeration;  if (type.equals("CDATA")) {    fSimpleType.type=XMLSimpleType.TYPE_CDATA;  } else   if (type.equals("ID")) {    fSimpleType.type=XMLSimpleType.TYPE_ID;  } else   if (type.startsWith("IDREF")) {    fSimpleType.type=XMLSimpleType.TYPE_IDREF;    if (type.indexOf("S") > 0) {      fSimpleType.list=true;    }  } else   if (type.equals("ENTITIES")) {    fSimpleType.type=XMLSimpleType.TYPE_ENTITY;    fSimpleType.list=true;  } else   if (type.equals("ENTITY")) {    fSimpleType.type=XMLSimpleType.TYPE_ENTITY;  } else   if (type.equals("NMTOKENS")) {    fSimpleType.type=XMLSimpleType.TYPE_NMTOKEN;    fSimpleType.list=true;  } else   if (type.equals("NMTOKEN")) {    fSimpleType.type=XMLSimpleType.TYPE_NMTOKEN;  } else   if (type.startsWith("NOTATION")) {    fSimpleType.type=XMLSimpleType.TYPE_NOTATION;  } else   if (type.startsWith("ENUMERATION")) {    fSimpleType.type=XMLSimpleType.TYPE_ENUMERATION;  } else {    System.err.println("!!! unknown attribute type " + type);  }  fQName.setValues(null,attributeName,attributeName,null);  fAttributeDecl.setValues(fQName,fSimpleType,false);  setAttributeDecl(elementIndex,fCurrentAttributeIndex,fAttributeDecl);  int chunk=fCurrentAttributeIndex >> CHUNK_SHIFT;  int index=fCurrentAttributeIndex & CHUNK_MASK;  ensureAttributeDeclCapacity(chunk);  fAttributeDeclIsExternal[chunk][index]=(fReadingExternalDTD || fPEDepth > 0) ? 1 : 0;}  }
class C{  public boolean showDialog(){  dialog.setVisible(true);  return !canceled;}  }
class C{  public GeoServerWPSClient(GeoServerConnection connection){  this.connection=connection;}  }
class C{  public boolean hasThrowable(){  return observers.get() == TERMINATED && error != null;}  }
class C{  public static int nthIndex(String s,char ch,int n){  int index=0;  for (int i=0; i < n; i++) {    if (index == s.length() - 1) {      return -1;    }    index=s.indexOf(ch,index + 1);    if (index == -1) {      return (-1);    }  }  return index;}  }
class C{  public static void openAccountManagementScreen(Context applicationContext,Profile profile,int serviceType){  Intent intent=PreferencesLauncher.createIntentForSettingsPage(applicationContext,AccountManagementFragment.class.getName());  Bundle arguments=new Bundle();  arguments.putInt(SHOW_GAIA_SERVICE_TYPE_EXTRA,serviceType);  intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,arguments);  applicationContext.startActivity(intent);}  }
class C{  public long renew(Uuid uuid,long extension) throws UnknownLeaseException, LeaseDeniedException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"renew",new Object[]{uuid,new Long(extension)});  }  readyState.check();  verifyLeaseUuid(uuid);  Long tid=getLeaseTid(uuid);  TxnManagerTransaction txntr=_txns.get(tid);  if (txntr == null) {    Object xid=_tidToExternalXid.get(tid);    if (xid != null)     txntr=_txns.get(xid);  }  if (txntr == null)   throw new UnknownLeaseException();  Result r;synchronized (txntr) {    if (!ensureCurrent(txntr))     throw new UnknownLeaseException("Lease already expired");    long oldExpiration=txntr.getExpiration();    r=txnLeasePeriodPolicy.renew(txntr,extension);    txntr.setExpiration(r.expiration);    expMgr.renewed(txntr);    if (operationsLogger.isLoggable(Level.FINER)) {      operationsLogger.exiting(TxnManagerImpl.class.getName(),"renew",new Object[]{new Long(r.duration)});    }    txntr.renew(extension);    return r.duration;  }}  }
class C{  private void readState(DataInputStream dis) throws IOException, SVNException {  int version=dis.readInt();  if ((version < REPOSITORIES_STATE_FILE_VERSION_1) || (version > REPOSITORIES_STATE_FILE_VERSION_3)) {    Util.logError(Policy.bind("SVNProviderPlugin.unknownStateFileVersion",new Integer(version).toString()),null);    return;  }  int count=dis.readInt();  for (int i=0; i < count; i++) {    ISVNRepositoryLocation root=SVNRepositoryLocation.fromString(dis.readUTF());    addToRepositoriesCache(root);    if (version >= REPOSITORIES_STATE_FILE_VERSION_2) {      String label=dis.readUTF();      if (!label.equals("")) {        root.setLabel(label);      }    }    if (version >= REPOSITORIES_STATE_FILE_VERSION_3) {      String repositoryRoot=dis.readUTF();      if (!repositoryRoot.equals("")) {        root.setRepositoryRoot(new SVNUrl(repositoryRoot));      }    }  }}  }
class C{  private void gauss(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double delta=5.0 / size;  double x=(1 - size) / 2.0 * delta;  double c=-Math.PI * Math.exp(1.0) / 10.0;  double sum=0;  for (int i=start; i < stop; i++) {    windowFunction[i]=Math.exp(c * x * x);    x+=delta;    sum+=windowFunction[i];  }  for (int i=start; i < stop; i++)   windowFunction[i]/=sum;}  }
class C{  public static String convertToJavaFieldName(String name){  int dotIndex=name.indexOf('.');  if (dotIndex >= 0) {    name=name.substring(0,dotIndex);  }  String[] split=name.split("[_-]");  StringBuilder out=new StringBuilder();  boolean first=true;  for (  String section : split) {    if (first) {      first=false;      out.append(section);    } else {      out.append(StringUtil.capitalize(section));    }  }  return out.toString();}  }
class C{  public FastConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  public LruListWithThreadAffinity(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=new Entry[capacity];  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  lruHead.nextLinked=lruHead.prevLinked=lruHead;}  }
class C{  public FriendsGetRecentQuery(VkApiClient client,UserActor actor){  super(client,"friends.getRecent",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public Ticket schedule(long when,Runnable task){  return schedule(when,task,null);}  }
class C{  private void recycleViewsFromStart(RecyclerView.Recycler recycler,int dt){  if (dt < 0) {    if (DEBUG) {      Log.d(TAG,"Called recycle from start with a negative value. This might happen" + " during layout changes but may be sign of a bug");    }    return;  }  final int limit=dt;  final int childCount=getChildCount();  if (mShouldReverseLayout) {    for (int i=childCount - 1; i >= 0; i--) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedEnd(child) > limit) {        recycleChildren(recycler,childCount - 1,i);        return;      }    }  } else {    for (int i=0; i < childCount; i++) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedEnd(child) > limit) {        recycleChildren(recycler,0,i);        return;      }    }  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  HandlerThread thread=new HandlerThread("FileDownloaderThread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mServiceLooper=thread.getLooper();  mServiceHandler=new ServiceHandler(mServiceLooper,this);  mBinder=new FileDownloaderBinder();  AccountManager am=AccountManager.get(getApplicationContext());  am.addOnAccountsUpdatedListener(this,null,false);}  }
class C{  public void close() throws IOException {  if (readerWriter != null) {    readerWriter.close();    readerWriter=null;  }}  }
class C{  public ExtractionFilter withValue(String value){  return new ExtractionFilter(getDimension(),value,extractionFunction);}  }
class C{  private GeoServerRESTManager internal_getManager(GeoServerConnection connection){  if (connection == null) {    return null;  }  GeoServerRESTManager manager=map.get(connection);  if (manager == null) {    URL geoserverURL=connection.getUrl();    if (geoserverURL != null) {      try {        if (connection.getUserName() != null) {          manager=new GeoServerRESTManager(geoserverURL,connection.getUserName(),connection.getPassword());          map.put(connection,manager);        }      } catch (      IllegalArgumentException e) {        ConsoleManager.getInstance().exception(this,e);      }    }  }  return manager;}  }
class C{  public boolean isProfileFilled(){  Object[] props={jobTitle,introduction,gender,birthday,nationality,employer,education,interests,languages};  int count=0;  for (  Object prop : props) {    count=prop != null ? (count + 1) : count;  }  return count > 3;}  }
class C{  public static float reduceSinAngle(float radians){  radians%=TWO_PI;  if (Math.abs(radians) > PI) {    radians=radians - (TWO_PI);  }  if (Math.abs(radians) > HALF_PI) {    radians=PI - radians;  }  return radians;}  }
class C{  public static boolean is3G(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {    return true;  }  return false;}  }
class C{  void resetTouchBehaviorTracking(){  mDidBlockInteraction=false;}  }
class C{  public String encrypt(String raw){  try {    MessageDigest localMessageDigest=cloneMessageDigest();    byte[] digest=localMessageDigest.digest(raw.getBytes("UTF-8"));    return new String(Hex.encodeHex(digest));  } catch (  UnsupportedEncodingException e) {    throw new EncodingException("UTF-8 not supported!",e);  }}  }
class C{  @Override public void close(){}  }
class C{  @Override protected void seekTo(int newPosition){  if (mInitialized) {    mPlayer.seekTo(newPosition);  }}  }
class C{  public void attach(ActionObserver observer){  observer.makeOneTimeUse();  lock.lock();  try {    onceUsedObservers.add(observer);  }  finally {    lock.unlock();  }}  }
class C{  RenewTask(long now){  bList=new ArrayList<Entry>(1);  Entry e=leases.lastKey();  if (e.renewalsDone() || e.endTime <= now) {    noRenewals=true;    Map<Entry,Entry> lMap=leases.tailMap(new Entry(now,renewalRTT));    for (Iterator<Entry> iter=lMap.values().iterator(); iter.hasNext(); ) {      Entry be=iter.next();      if (be.renewalsDone() || be.endTime <= now) {        iter.remove();        logExpiration(be);        if (be.listener != null)         bList.add(be);      }    }  } else {    noRenewals=false;    Map<Entry,Entry> lMap=leases.tailMap(new Entry(e.renew + renewBatchTimeWindow,renewalRTT));    for (Iterator<Entry> iter=lMap.values().iterator(); iter.hasNext(); ) {      Entry be=iter.next();      if (be == e || be.canBatch(e)) {        iter.remove();        leaseInRenew.add(be);        bList.add(be);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static void assertAllRegistered(@NonNull MultiTypeAdapter adapter,@NonNull List<? extends Item> items) throws ProviderNotFoundException, IllegalArgumentException, IllegalAccessError {  if (items.size() == 0) {    throw new IllegalArgumentException("Your Items/List is empty.");  }  for (  Item item : items) {    adapter.indexOf(adapter.onFlattenClass(item));  }}  }
class C{  public DHCPMessage(DataInputStream inStream){  initialize();  try {    this.op=inStream.readByte();    this.htype=inStream.readByte();    this.hlen=inStream.readByte();    this.hops=inStream.readByte();    this.xid=inStream.readInt();    this.secs=inStream.readShort();    this.flags=inStream.readShort();    inStream.readFully(this.ciaddr,0,4);    inStream.readFully(this.yiaddr,0,4);    inStream.readFully(this.siaddr,0,4);    inStream.readFully(this.giaddr,0,4);    inStream.readFully(this.chaddr,0,16);    inStream.readFully(this.sname,0,64);    inStream.readFully(this.file,0,128);    byte[] options=new byte[312];    inStream.readFully(options,0,312);    this.optionsList.internalize(options);  } catch (  IOException e) {    System.err.println(e);  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public AudioInputStream synthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  if (backchannelNumber >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ backchannelNumber);  }  VocalizationUnit bUnit=unitFileReader.getUnit(backchannelNumber);  long start=bUnit.startTime;  int duration=bUnit.duration;  Datagram[] frames=null;  try {    frames=audioTimeline.getDatagrams(start,duration);  } catch (  IOException e) {    throw new SynthesisException("Can not read data from timeline file " + e);  }  LinkedList<Datagram> datagrams=new LinkedList<Datagram>();  datagrams.addAll(Arrays.asList(frames));  DoubleDataSource audioSource=new DatagramDoubleDataSource(datagrams);  return (new DDSAudioInputStream(new BufferedDoubleDataSource(audioSource),aft.getFormat()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201207,skilltarget,skillname);}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public static byte[] toByteArray(String hexData,boolean isHex){  if (hexData == null || hexData.equals("")) {    return null;  }  if (!isHex) {    return hexData.getBytes();  }  hexData=hexData.replaceAll("\\s+","");  String hexDigits="0123456789ABCDEF";  ByteArrayOutputStream baos=new ByteArrayOutputStream(hexData.length() / 2);  for (int i=0; i < hexData.length(); i+=2) {    baos.write((hexDigits.indexOf(hexData.charAt(i)) << 4 | hexDigits.indexOf(hexData.charAt(i + 1))));  }  byte[] bytes=baos.toByteArray();  try {    baos.close();  } catch (  Exception e) {    e.printStackTrace();  }  return bytes;}  }
class C{  public static Date parseISOTimestamp(String timestampStr){  for (  String iso8601Format : ISO_8601_FORMATS) {    try {      SimpleDateFormat dateFmt=new SimpleDateFormat(iso8601Format);      dateFmt.setTimeZone(getTimeZone("UTC"));      dateFmt.setLenient(false);      return dateFmt.parse(timestampStr);    } catch (    Exception ex) {      LOGGER.error("unable to parse date",ex);    }  }  return null;}  }
class C{  public void createTempTable(Schema schema,String tempTableName) throws DatabaseException {  assert (this.active);  if (Database.this.tableLookup.containsKey(tempTableName) || this.tempTables.containsKey(tempTableName)) {    throw new DatabaseException("Table name already exists");  }  File f=new File(Database.this.fileDir + "temp/");  if (!f.exists()) {    f.mkdirs();  }  this.tempTables.put(tempTableName,new Table(schema,tempTableName,Database.this.fileDir + "temp/"));  this.locksHeld.put(tempTableName,LockManager.LockType.EXCLUSIVE);}  }
class C{  public void updateGraph() throws Exception {  if (tabbedPane.getSelectedComponent() instanceof ITab) {    final ITab iTab=(ITab)tabbedPane.getSelectedComponent();    iTab.compute(taxa,distances);    clusterAnalysisSearcher.updateMatrixSearcher();  }}  }
class C{  public ClusterConfigurationException(String str){  super(str);}  }
class C{  public Builder pointerEvents(String pointerEvents){  this.pointerEvents=pointerEvents;  return this;}  }
class C{  private void populateMethylLocus(){  if (this.refBase != 'C' && this.refBase != 'G') {    cntM=null;    cntU=null;    return;  }  for (  RecordAndOffset recOff : this.locus.getRecordAndPositions()) {    boolean readIsTopStrand=!(new ReadFromTopStrandFilter(true)).filterOut(recOff.getRecord());    char readBase=Character.toUpperCase((char)recOff.getReadBase());    if (this.refBase == 'C') {      if (readIsTopStrand) {        if (readBase == 'C') {          cntM++;        } else         if (readBase == 'T') {          cntU++;        }      }    } else     if (this.refBase == 'G') {      if (!readIsTopStrand) {        if (readBase == 'G') {          cntM++;        } else         if (readBase == 'A') {          cntU++;        }      }    } else {      System.err.println("Unexpected strand or base!");      System.exit(1);    }  }}  }
class C{  public Predicate selectPredicate(Schema sch){  Predicate result=new Predicate();  for (  Term t : terms)   if (t.isApplicableTo(sch))   result.terms.add(t);  if (result.terms.size() == 0)   return null; else   return result;}  }
class C{  public static String runService(HttpServletRequest request,HttpServletResponse response){  String serviceName=request.getParameter("serviceName");  String mode=request.getParameter("mode");  Locale locale=UtilHttp.getLocale(request);  if (UtilValidate.isEmpty(serviceName)) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.must_specify_service_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isEmpty(mode)) {    mode="sync";  }  Security security=(Security)request.getAttribute("security");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService(serviceName);  } catch (  GenericServiceException e) {    Debug.logError(e,"Error looking up ModelService for serviceName [" + serviceName + "]",module);    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + "[" + serviceName+ "]: "+ e.toString());    return "error";  }  if (modelService == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_name_not_find",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + "[" + serviceName+ "]");    return "error";  }  if (!modelService.export && !security.hasPermission("SERVICE_INVOKE_ANY",request.getSession())) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.not_authorized_to_call",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + ".");    return "error";  }  Debug.logInfo("Running service named [" + serviceName + "] from event with mode ["+ mode+ "]",module);  Event event=new Event("service",mode,serviceName,false);  try {    return seh.invoke(event,null,request,response);  } catch (  EventHandlerException e) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_eventhandler_exception",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + ": " + e.getMessage());    return "error";  }}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  @Override public void createTitle(Box textPanel,UpdateSymbolInterface parent){}  }
class C{  public static double parseDouble(String text) throws DataParseException {  try {    return Double.parseDouble(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public void insert(){  if (tx.isReadOnly() && !isTempTable())   throw new UnsupportedOperationException();  try {    if (!isTempTable())     tx.concurrencyMgr().modifyFile(fileName);  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }  if (fhp == null)   fhp=openHeaderForModification();  tx.recoveryMgr().logLogicalStart();  if (fhp.hasDeletedSlots()) {    moveToRecordId(fhp.getLastDeletedSlot());    RecordId lds=rp.insertIntoDeletedSlot();    fhp.setLastDeletedSlot(lds);  } else {    if (!fhp.hasDataRecords()) {      appendBlock();      moveTo(1);      rp.insertIntoNextEmptySlot();    } else {      RecordId tailSlot=fhp.getTailSolt();      moveToRecordId(tailSlot);      while (!rp.insertIntoNextEmptySlot()) {        if (atLastBlock())         appendBlock();        moveTo(currentBlkNum + 1);      }    }    fhp.setTailSolt(currentRecordId());  }  RecordId insertedRid=currentRecordId();  tx.recoveryMgr().logRecordFileInsertionEnd(ti.tableName(),insertedRid.block().number(),insertedRid.id());  closeHeader();}  }
class C{  public CategoryAboutObject(String category){  this.category=category;}  }
class C{  public void testLongStringPerformance(){  ISpellingCorrector sc=getSpellingCorrector();  sc.correct("thisisareallylongstringthatshouldcalusethingstorunreallyslow");}  }
class C{  public final List readLines(final int numOfLines,final IFallback fallbackObj) throws DataFallbackException {  int readlines=0;  List objects=new ArrayList();  String line=null;  IFallback obj;  boolean moreLines=true;  try {    while (moreLines && readlines < numOfLines) {      line=getInput().readLine();      if (line == null) {        moreLines=false;      } else {        try {          obj=fallbackObj.getObject(line);          objects.add(obj);        } catch (        DataFallbackException e) {          LOG.error("readLines() - " + e.getMessage() + ""+ line);          objects.add(null);        }        readlines++;      }    }  } catch (  IOException e) {    throw new DataFallbackException(e.getMessage());  }  if (LOG.isDebugEnabled()) {    LOG.debug("readLines() - " + objects.size() + " lines has been read from the log file");  }  return objects;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VariableArityParameterDeclaration fullCopy(){  VariableArityParameterDeclaration tree=(VariableArityParameterDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Deprecated public boolean isAssignableFrom(TypeToken<?> token){  return isAssignableFrom(token.getType());}  }
class C{  private Object castValue(Object value){  ResourceType.DataType<D> parentDataType=dataType();  if (parentDataType.equals(ResourceType.DataType.DOUBLE)) {    return ((Number)value).doubleValue();  } else   if (parentDataType.equals(ResourceType.DataType.LONG)) {    if (value instanceof Double) {      throw new ClassCastException();    }    return ((Number)value).longValue();  } else {    try {      return Class.forName(parentDataType.getName()).cast(value);    } catch (    ClassNotFoundException e) {      throw new RuntimeException(ErrorMessage.INVALID_RESOURCE_CAST.getMessage(value,parentDataType.getName()));    }  }}  }
class C{  private Observable<JobRow> buildUpdateRowChain(Observable<JobRow> jobRowStoredNotification,Observable<String> preResponseStoredNotification,Observable<PreResponse> preResponseEmitter,JobRow jobMetadata){  return preResponseEmitter.zipWith(jobRowStoredNotification,null).zipWith(preResponseStoredNotification,null).map(null).map(null).map(null).flatMap(null);}  }
class C{  public boolean isOption(){  if (option == null) {    return false;  } else {    return option;  }}  }
class C{  @Transactional(propagation=Propagation.REQUIRES_NEW) public PollableTask finishTask(long id,String messageOverride,ExceptionHolder exceptionHolder,Integer expectedSubTaskNumberOverride){  PollableTask pollableTask=getPollableTask(id);  pollableTask.setFinishedDate(DateTime.now());  if (exceptionHolder != null && exceptionHolder.getException() != null) {    pollableTask.setErrorStack(Throwables.getStackTraceAsString(exceptionHolder.getException()));    pollableTask.setErrorMessage(objectMapper.writeValueAsStringUnsafe(exceptionHolder));  }  if (messageOverride != null) {    pollableTask.setMessage(messageOverride);  }  if (expectedSubTaskNumberOverride != null) {    pollableTask.setExpectedSubTaskNumber(expectedSubTaskNumberOverride);  }  return pollableTaskRepository.save(pollableTask);}  }
class C{  public ChangeSet(){  _mutators=new LinkedList<SpaceEntryMutator>();  _lease=0;}  }
class C{  public AccountRegisterDeviceQuery(VkApiClient client,UserActor actor,String token,String deviceId){  super(client,"account.registerDevice",OkResponse.class);  accessToken(actor.getAccessToken());  token(token);  deviceId(deviceId);}  }
class C{  public static String encrypt(final String password,String message) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] cipherText=encrypt(key,ivBytes,message.getBytes(CHARSET));    String encoded=Base64.encodeToString(cipherText,Base64.NO_WRAP);    return encoded;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public void resetConfiguration(){  setRainTime(-1);  setFadeOutTime(-1);  setSnowTime(-1);  setRainParticles(-1);  setSnowParticles(-1);}  }
class C{  public static boolean applyCount(Context context,int badgeCount){  try {    applyCountOrThrow(context,badgeCount);    return true;  } catch (  ShortcutBadgeException e) {    Log.e(LOG_TAG,"Unable to execute badge",e);    return false;  }}  }
class C{  public static boolean equalsNullSafe(String s1,String s2){  return s1 == null ? s2 == null : s1.equals(s2);}  }
class C{  private int byteArrayToInteger(byte[] b,int offset){  return (b[offset + 3] & 0xFF) << 24 | (b[offset + 2] & 0xFF) << 16 | (b[offset + 1] & 0xFF) << 8 | (b[offset] & 0xFF);}  }
class C{  private void createUI(){  readConfigFileNoScrollPane(null,this,"symboltype/WKT.xml");  registerForTextFieldButton(FieldIdEnum.WKT,this);}  }
class C{  protected void shareBySms(){  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SMS,getShareData(ShareConstant.SHARE_CHANNEL_SMS),ShareConstant.REQUEST_CODE);}  }
class C{  public static <T extends RealFieldElement<T>>FieldVector3D<T> applyInverseTo(final Rotation r,final FieldVector3D<T> u){  final T x=u.getX();  final T y=u.getY();  final T z=u.getZ();  final T s=x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));  final double m0=-r.getQ0();  return new FieldVector3D<T>(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));}  }
class C{  protected MessagesEditChatQuery chatId(int value){  return unsafeParam("chat_id",value);}  }
class C{  private void collectError(Location location,int lineNum,String message){  diagCollector.addDiag(Diag.error(new SimpleLocation(String.format("%s (at document line %d)",location.getDisplayString(),lineNum)),message));}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  if (e.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL) {    boolean doScaleVertical=!e.isMetaDown() && !e.isAltDown() && !e.isShiftDown();    boolean doScaleHorizontal=!e.isMetaDown() && !e.isControlDown() && !e.isAltDown()&& e.isShiftDown();    boolean doScrollVertical=!e.isMetaDown() && e.isAltDown() && !e.isShiftDown();    boolean doScrollHorizontal=!e.isMetaDown() && e.isAltDown() && e.isShiftDown();    boolean useMag=viewer.trans.getMagnifier().isActive();    viewer.trans.getMagnifier().setActive(false);    if (doScrollVertical) {      viewer.getScrollPane().getVerticalScrollBar().setValue(viewer.getScrollPane().getVerticalScrollBar().getValue() + e.getUnitsToScroll());    } else     if (doScaleVertical) {      ScrollPaneAdjuster spa=new ScrollPaneAdjuster(viewer.getScrollPane(),viewer.trans,e.getPoint());      double toScroll=1.0 + (e.getUnitsToScroll() / 100.0);      double s=(toScroll > 0 ? 1.0 / toScroll : toScroll);      double scale=s * viewer.trans.getScaleY();      if (scale >= MainViewer.YMIN_SCALE && scale <= MainViewer.YMAX_SCALE) {        viewer.trans.composeScale(1,s);        spa.adjust(false,true);      }    } else     if (doScrollHorizontal) {      viewer.getScrollPane().getHorizontalScrollBar().setValue(viewer.getScrollPane().getHorizontalScrollBar().getValue() + e.getUnitsToScroll());    } else     if (doScaleHorizontal) {      ScrollPaneAdjuster spa=new ScrollPaneAdjuster(viewer.getScrollPane(),viewer.trans,e.getPoint());      double units=1.0 + (e.getUnitsToScroll() / 100.0);      double s=(units > 0 ? 1.0 / units : units);      double scale=s * viewer.trans.getScaleX();      if (scale >= MainViewer.XMIN_SCALE && scale <= MainViewer.XMAX_SCALE) {        viewer.trans.composeScale(s,1);        spa.adjust(true,false);      }    }    viewer.trans.getMagnifier().setActive(useMag);  }}  }
class C{  public static boolean isVersionNewerThan(String oneVersion,String otherVersion){  if (oneVersion == null || otherVersion == null) {    return false;  }  if (otherVersion.equals(oneVersion + "-SNAPSHOT")) {    return true;  }  if (oneVersion.equals(otherVersion + "-SNAPSHOT")) {    return false;  }  return oneVersion.compareTo(otherVersion) > 0;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Mysplash.getInstance().addActivity(this);  setTheme();  LanguageUtils.setLanguage(this);  DisplayUtils.setWindowTop(this);  setContentView(R.layout.activity_photo);}  }
class C{  private BSPTree<Sphere1D> childAfter(BSPTree<Sphere1D> node){  if (isDirect(node)) {    return node.getPlus();  } else {    return node.getMinus();  }}  }
class C{  public static String toString(Bundle bundle){  if (bundle == null) {    return null;  }  StringBuilder stringBuilder=new StringBuilder();  for (  String key : bundle.keySet()) {    Object value=bundle.get(key);    stringBuilder.append(String.format("%s %s (%s)\n",key,value,value == null ? "null" : value.getClass().getName()));  }  return stringBuilder.substring(0,stringBuilder.length() - 1);}  }
class C{  public void initialize(){  loginToClientChannelFactory=initChannelFactory();  Channel loginToClientChannel=initChannel(loginToClientChannelFactory,Config.CHAT_ADDRESS,loginToClientPipeLineFactory);  channelGroup.add(loginToClientChannel);  ServerCfg gs=new ServerCfg(Config.GAME_ADDRESS.getAddress().getHostAddress(),Config.GAME_ADDRESS.getPort(),"Gs Connections",new GsConnectionFactoryImpl());  nioServer=new NioServer(5,gs);  nioServer.connect();}  }
class C{  public CommentTemplateEditDialog(Shell parentShell,String dialogTitle,String dialogMessage,String initialValue,IInputValidator validator){  super(parentShell);  this.title=dialogTitle;  message=dialogMessage;  if (initialValue == null)   value=""; else   value=initialValue;  this.validator=validator;}  }
class C{  public static void main(String[] args){  if ((args.length != 2) && (args.length != 3)) {    System.out.println("This method needs two arguments:\n" + "- a file name for the document to tokenize\n" + "- the language of the document\n"+ "- an optional encoding to use (default is UTF-8)");    System.exit(1);  }  String encoding="UTF-8";  if (args.length == 3) {    encoding=args[2];  }  String text=null;  try {    text=FileTools.readFileAsString(new File(args[0]),encoding);  } catch (  IOException ioe) {    ioe.printStackTrace();    System.exit(1);  }  try {    JTok testTok=new JTok();    AnnotatedString result=testTok.tokenize(text,args[1]);    System.out.println(XmlOutputter.createXmlString(result));  } catch (  IOException e) {    System.out.println(e.getLocalizedMessage());  }}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  @Override protected void onBindView(View view){  super.onBindView(view);  if (mOriginalTotalPhrase == null)   updateDetailData();  mOriginalSizeTextView=(TextView)view.findViewById(R.id.data_reduction_original_size);  mOriginalSizeTextView.setText(mOriginalTotalPhrase);  mReceivedSizeTextView=(TextView)view.findViewById(R.id.data_reduction_compressed_size);  mReceivedSizeTextView.setText(mReceivedTotalPhrase);  mPercentReductionTextView=(TextView)view.findViewById(R.id.data_reduction_percent);  mPercentReductionTextView.setText(mPercentReductionPhrase);  mStartDateTextView=(TextView)view.findViewById(R.id.data_reduction_start_date);  mStartDateTextView.setText(mStartDatePhrase);  mEndDateTextView=(TextView)view.findViewById(R.id.data_reduction_end_date);  mEndDateTextView.setText(mEndDatePhrase);  mChartDataUsageView=(ChartDataUsageView)view.findViewById(R.id.chart);  mChartDataUsageView.bindOriginalNetworkStats(mOriginalNetworkStatsHistory);  mChartDataUsageView.bindCompressedNetworkStats(mReceivedNetworkStatsHistory);  mChartDataUsageView.setVisibleRange(mCurrentTime - DateUtils.DAY_IN_MILLIS * DAYS_IN_CHART,mCurrentTime + DateUtils.HOUR_IN_MILLIS,mLeftPosition,mRightPosition);  View dataReductionProxyUnreachableWarning=view.findViewById(R.id.data_reduction_proxy_unreachable);  if (DataReductionProxySettings.getInstance().isDataReductionProxyUnreachable()) {    dataReductionProxyUnreachableWarning.setVisibility(View.VISIBLE);  } else {    dataReductionProxyUnreachableWarning.setVisibility(View.GONE);  }}  }
class C{  public int size(){  return cursors.size();}  }
class C{  private void deleteLegionFromDB(Legion legion){  this.allCachedLegions.remove(legion);  DAOManager.getDAO(LegionDAO.class).deleteLegion(legion.getLegionId());}  }
class C{  public boolean execute(String action,CordovaArgs args,CallbackContext callbackContext) throws JSONException {  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201130,value0);}  }
class C{  public boolean add(E o){  if (o == null)   return false;  return map.put(o,PRESENT) == null;}  }
class C{  @Override @CallSuper public void onDestroy(){}  }
class C{  public void onDown(long time){  mDragLock=DragLock.NONE;  if (mOverviewAnimationType == OverviewAnimationType.NONE) {    stopScrollingMovement(time);  }  mScrollingTab=null;  commitDiscard(time,false);}  }
class C{  public void firstPage(){  goToPage(getRowCount(),1);}  }
class C{  public boolean isEdgeVector(int edgeIndex){  String edgeValue=getFeature(edgeIndex).toString();  return (!edgeValue.equals(FeatureDefinition.NULLVALUE));}  }
class C{  private void drawAsCircle(Node v,NodeView nv,NodeData data){  Point2D location=nv.getLocation();  if (location == null)   return;  nv.setShape(NodeView.OVAL_NODE);  long num;  if (scaleBy == ScaleBy.Summarized || v.getOutDegree() == 0)   num=data.getCountSummarized(); else   num=data.getCountAssigned();  if (num > 0) {    int radius=(int)Math.max(1.0,getScaledSize(num));    nv.setHeight((2 * radius));    nv.setWidth((2 * radius));  } else {    nv.setWidth(1);    nv.setHeight(1);  }  if (data.getUpPValue() >= 0 || data.getDownPValue() >= 0) {    int width=nv.getWidth();    int height=nv.getHeight();    Point apt=viewer.trans.w2d(location);    apt.x-=(width >> 1);    apt.y-=(height >> 1);    if (data.getUpPValue() >= 0) {      gc.setColor(pvalueColor);      Stroke oldStroke=gc.getStroke();      int leftWidth=getWidthForPValue(data.getUpPValue());      gc.setStroke(new BasicStroke(leftWidth));      gc.drawArc(apt.x - (leftWidth >> 1) - 1,apt.y - (leftWidth >> 1) - 1,width + leftWidth + 1,height + leftWidth + 1,90,180);      gc.setStroke(oldStroke);    }    if (data.getDownPValue() >= 0) {      gc.setColor(pvalueColor);      Stroke oldStroke=gc.getStroke();      int rightWidth=getWidthForPValue(data.getDownPValue());      gc.setStroke(new BasicStroke(rightWidth));      gc.drawArc(apt.x - (rightWidth >> 1) - 1,apt.y - (rightWidth >> 1) - 1,width + rightWidth + 1,height + rightWidth + 1,270,180);      gc.setStroke(oldStroke);    }  }  nv.draw(gc,viewer.trans);}  }
class C{  @Override public String toString(){  return "ViterbiCandidate: target " + target + ", unit "+ unit+ (bestPath != null ? ", best path score " + bestPath.score : ", no best path");}  }
class C{  public boolean isDirect(){  return direct;}  }
class C{  public ServerStateMachine(ServerState initialState,MissionInit minit){  super(initialState);  this.currentMissionInit=minit;  initBusses();}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public TimeStamp(){  start=System.currentTimeMillis();}  }
class C{  public void forceClose(ServerInfo server){  if (server == null || server.sock == null) {    return;  }  try {    if (this.keep_alive) {      try {        ProtoCommon.quit(server.sock);      } catch (      IOException ex) {        System.err.println("quit error: " + ex.getMessage());      }    }    server.sock.close();    server.sock=null;  } catch (  IOException ex) {    System.err.println("close socket error: " + ex.getMessage());  }}  }
class C{  public int rankOf(double value){  int ret=0;  if (!hasCapacity()) {    ret=Arrays.binarySearch(data,value);    if (ret < 0) {      return -ret - 1;    } else {      return ret;    }  } else {    for (int i=0; i < next; i++) {      if (data[i] < value) {        ret++;      }    }    return ret;  }}  }
class C{  public void read(IInputReader reader,boolean wantReadSequence,boolean wantMatches,float minScore,float maxExpected) throws IOException {  setUId(reader.getPosition());  if (pairedReads)   mateUid=reader.readLong();  String readText=reader.readString();  if (readText.length() > 0) {    int pos=readText.indexOf('\n');    if (pos == -1) {      setReadHeader(readText);      setReadWeight(ReadMagnitudeParser.parseMagnitude(getReadHeader()));      setReadSequence(null);      setReadLength(0);    } else     if (pos > 0) {      setReadHeader(readText.substring(0,pos));      setReadWeight(ReadMagnitudeParser.parseMagnitude(getReadHeader()));      if (pos + 1 < readText.length()) {        String sequence=Basic.removeAllWhiteSpaces(readText.substring(pos + 1));        setReadSequence(wantReadSequence ? sequence : null);        setReadLength(sequence.length());      } else {        setReadSequence(null);        setReadLength(0);      }    } else {      setReadHeader(null);      setReadSequence(null);      setReadLength(0);    }  }  numberOfMatches=reader.readInt();  if (wantMatches) {    matchBlocks=new MatchBlockRMA6[numberOfMatches];    for (int i=0; i < numberOfMatches; i++)     matchBlocks[i]=new MatchBlockRMA6();    for (int i=0; i < numberOfMatches; i++) {      for (      String cName : cNames) {        matchBlocks[i].setId(cName,reader.readInt());      }    }    final String matchesText=reader.readString();    int offset=0;    int matchCount=0;    final IMatchBlock[] copies=new MatchBlockRMA6[numberOfMatches];    for (int i=0; i < numberOfMatches; i++) {      int end=matchesText.indexOf('\n',offset + 1);      if (end == -1)       end=matchesText.length();      final String aLine=matchesText.substring(offset,end);      tmpSAMMatch.parse(aLine);      ((MatchBlockRMA6)matchBlocks[matchCount]).setFromSAM(tmpSAMMatch);      offset=end + 1;      if (matchBlocks[matchCount].getBitScore() >= minScore && matchBlocks[matchCount].getExpected() <= maxExpected)       copies[matchCount++]=matchBlocks[i];    }    if (matchCount < matchBlocks.length) {      matchBlocks=new MatchBlockRMA6[matchCount];      System.arraycopy(copies,0,matchBlocks,0,matchCount);    }  } else {    reader.skipBytes(cNames.length * numberOfMatches * 4);    reader.skipBytes(Math.abs(reader.readInt()));  }}  }
class C{  public final static float calculateAngleFrom(float obj1X,float obj1Y,float obj2X,float obj2Y){  float angleTarget=(float)Math.toDegrees(Math.atan2(obj2Y - obj1Y,obj2X - obj1X));  if (angleTarget < 0) {    angleTarget=360 + angleTarget;  }  return angleTarget;}  }
class C{  public static void generateSampleXml(String path){  generateSampleXml(new File(path));}  }
class C{  private void initView(GLSurfaceView glSurfaceView,@ColorInt int backgroundColor){  Context context=glSurfaceView.getContext();  final ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final ConfigurationInfo configurationInfo=activityManager.getDeviceConfigurationInfo();  final boolean supportsEs2=configurationInfo.reqGlEsVersion >= 0x20000;  if (supportsEs2) {    glSurfaceView.setEGLContextClientVersion(2);    mRenderer=new BezierRenderer(glSurfaceView,backgroundColor);    glSurfaceView.setRenderer(mRenderer);    glSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);  } else {    throw new UnsupportedOperationException();  }}  }
class C{  private void abortRequest(ContainerRequestContext containerRequestContext,Response.Status status,BouncerAuthorizationStatus reason){  LOG.debug("The user is not authorized in an authorized role ",status);  Map<String,Object> responseMap=new LinkedHashMap<>();  responseMap.put("status",status);  responseMap.put("reason",reason.getName());  responseMap.put("description",reason.getDescription());  String json;  try {    json=mapper.writer().withDefaultPrettyPrinter().writeValueAsString(responseMap);  } catch (  JsonProcessingException e) {    json=e.getMessage();  }  containerRequestContext.abortWith(Response.status(status).entity(json).build());}  }
class C{  protected void matched(Object actualValue,short valueType,ShortList itemValueType,boolean isNil){  if (DEBUG_METHODS3) {    System.out.println(toString() + "#matched(\"" + actualValue+ "\")");  }}  }
class C{  @Nullable public static String extractId(@Nullable String str){  if (str == null) {    return null;  }  int index=str.lastIndexOf("@id/");  if (index != -1) {    return str.substring(index + 4);  }  index=str.lastIndexOf("@+id/");  if (index != -1) {    return str.substring(index + 5);  }  return null;}  }
class C{  public DiscoveryEvent(Object source,Map groups){  super(source);  this.groups=groups;  this.regs=(ServiceRegistrar[])(groups.keySet()).toArray(new ServiceRegistrar[groups.size()]);}  }
class C{  public ThetaSketchSetOperationPostAggregation withSize(int size){  return new ThetaSketchSetOperationPostAggregation(getName(),getFunc(),getFields(),size);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BridgeMethodDecl fullCopy(){  BridgeMethodDecl tree=(BridgeMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void reset(){  schema=null;  geometryType=GeometryTypeEnum.UNKNOWN;  typeName=null;  dataStore=null;  gridCoverageReader=null;  fieldNameMap.clear();  fieldTypeMap.clear();}  }
class C{  protected void sendMembershipList(LocalGossipMember me,List<LocalGossipMember> memberList){  me.setHeartbeat(System.currentTimeMillis());  LocalGossipMember member=selectPartner(memberList);  if (member == null) {    LOGGER.debug("Send sendMembershipList() is called without action");    return;  } else {    LOGGER.debug("Send sendMembershipList() is called to " + member.toString());  }  try (DatagramSocket socket=new DatagramSocket()){    socket.setSoTimeout(gossipManager.getSettings().getGossipInterval());    UdpActiveGossipMessage message=new UdpActiveGossipMessage();    message.setUriFrom(gossipManager.getMyself().getUri().toASCIIString());    message.setUuid(UUID.randomUUID().toString());    message.getMembers().add(convert(me));    for (    LocalGossipMember other : memberList) {      message.getMembers().add(convert(other));    }    byte[] json_bytes=MAPPER.writeValueAsString(message).getBytes();    int packet_length=json_bytes.length;    if (packet_length < GossipManager.MAX_PACKET_SIZE) {      Response r=gossipCore.send(message,member.getUri());      if (r instanceof ActiveGossipOk) {      } else {        LOGGER.warn("Message " + message + " generated response "+ r);      }    } else {      LOGGER.error("The length of the to be send message is too large (" + packet_length + " > "+ GossipManager.MAX_PACKET_SIZE+ ").");    }  } catch (  IOException e1) {    LOGGER.warn(e1);  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof RepoResult == false) {    return false;  }  RepoResult rr=(RepoResult)o;  if (this.getName().equals(rr.getName())) {    return true;  }  return false;}  }
class C{  @Override public void clear(){  queryName=null;  flag=0;  refName=null;  pos=0;  mapQuality=0;  cigarString=null;  RNext=null;  PNext=0;  TLength=0;  sequence=null;  quality=null;  optionalFields.clear();  cigar=null;}  }
class C{  public void update(Object value,boolean forceToDisk) throws IOException {  if (log == null) {    throw new LogException("log file for persistent state is " + "inaccessible, it may have been " + "corrupted or closed");  }  try {    handler.writeUpdate(new LogOutputStream(log),value);  } catch (  Exception e) {    throw new LogException("write update failed",e);  }  if (forceToDisk) {    try {      logFD.sync();    } catch (    SyncFailedException sfe) {      throw new LogException("sync log failed",sfe);    }  }  long entryEnd=log.getFilePointer();  long updateLen=entryEnd - logBytes - intBytes;  if (updateLen > Integer.MAX_VALUE) {    throw new LogException("maximum record length exceeded");  }  log.seek(logBytes);  writeInt(log,(int)updateLen);  if (format == FORMAT_PADDED) {    entryEnd=(entryEnd + 3) & ~3L;  }  log.seek(entryEnd);  log.write(zeroBuf);  logBytes=entryEnd;  if (forceToDisk) {    try {      logFD.sync();    } catch (    SyncFailedException sfe) {      throw new LogException("sync log failed",sfe);    }  }}  }
class C{  @JsonIgnore public boolean isDeleted(){  return state.equals(State.DELETED);}  }
class C{  @Override public void updateSymbol(PolygonSymbolizer polygonSymbolizer){  Map<String,String> options=polygonSymbolizer.getOptions();  for (  FieldIdEnum key : fieldMap.keySet()) {    internalUpdateSymbol(options,key,fieldMap.get(key));  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private boolean isSemitonesDelta(String string){  String s=string.trim();  if (s.length() < 4)   return false;  return s.substring(s.length() - 2).equals("st") && isNumberDelta(s.substring(0,s.length() - 2));}  }
class C{  public static String searchRemoveFromCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String errMsg=null;  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      int numRemoved=0;      GenericValue searchResultView=null;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        numRemoved+=delegator.removeByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",productCategoryId,"productId",productId));      }      eli.close();      Map<String,String> messageMap=UtilMisc.toMap("numRemoved",Integer.toString(numRemoved));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.removed_x_items",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  private void createSDTtimeDeadbandScheduler(final SourceDataTag currentTag){  if (currentTag.getAddress().isTimeDeadbandEnabled()) {    if (currentTag.getAddress().getTimeDeadband() > 0) {      this.equipmentLogger.debug("createSDTtimeDeadbandScheduler - creating time-deadband scheduler for tag " + currentTag.getId());      this.sdtTimeDeadbandSchedulers.put(currentTag.getId(),new SDTTimeDeadbandScheduler(currentTag,this.processMessageSender,this.equipmentSenderFilterModule,timeDeadbandTimer,this.dataTagValueFilter,this.dynamicTimeDeadbandFilterer));    }  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsEqualsToImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsEqualToExtended();  } else {    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);    filter=new IsEqualToExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public DocsAddQuery(VkApiClient client,UserActor actor,int ownerId,int docId){  super(client,"docs.add",AddResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  docId(docId);}  }
class C{  public void addChangeListener(PropertyChangeListener newListener){  listener.add(newListener);}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSMapMessageImpl dup=new GSMapMessageImpl();  copyTo(dup);  return dup;}  }
class C{  public ComponentCellRenderer(TreeCellRenderer renderer){  this.renderer=renderer;  Boolean booleanValue=(Boolean)UIManager.get("Tree.drawsFocusBorderAroundIcon");  leafRenderer.setFocusPainted((booleanValue != null) && (booleanValue.booleanValue()));  selectionForeground=UIManager.getColor("Tree.selectionForeground");  selectionBackground=UIManager.getColor("Tree.selectionBackground");  textForeground=UIManager.getColor("Tree.textForeground");  textBackground=UIManager.getColor("Tree.textBackground");  checkBox=new JCheckBox();  checkBox.setBackground(UIManager.getColor("Tree.background"));  checkBox.setBorder(null);  label=new JLabel();  label.setBackground(UIManager.getColor("Tree.background"));  label.setBorder(null);  panel=new JPanel();  panel.setOpaque(false);  panel.add(checkBox);  panel.add(label);}  }
class C{  public CollectionsObject(Activity a){  this.adapter=new CollectionAdapter(a,new ArrayList<Collection>());  this.service=CollectionService.getService();  this.requestKey=Mysplash.getInstance().getUser();  this.collectionsPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public void onScrollToClose(){}  }
class C{  static int currentUserCheck(String stmt,int offset){  int length=offset + _CURRENT_USER.length;  if (stmt.length() >= length) {    if (ParseUtil.compare(stmt,offset,_CURRENT_USER)) {      if (stmt.length() > length && stmt.charAt(length) != ' ') {        return OTHER;      }      return USER;    }  }  return OTHER;}  }
class C{  protected MuleMessage doRequest(long timeout) throws Exception {  try {    MuleMessage message=null;    if (logger.isDebugEnabled()) {      logger.debug("Waiting for a message on " + endpoint.getEndpointURI().getAddress());    }    try {      long startTime=System.currentTimeMillis();      long currentTime=System.currentTimeMillis();      long interval=100;      do {        OpenSpacesQueueObject entry=(OpenSpacesQueueObject)connector.getGigaSpaceObj().take(template);        if (entry != null) {          return createMuleMessage(entry);        }        Thread.sleep(interval);        currentTime=System.currentTimeMillis();      } while (timeout == -1 || currentTime - startTime < timeout);    } catch (    SpaceInterruptedException e) {    }catch (    SpaceClosedException e) {    }    if (message != null) {      if (message instanceof ThreadSafeAccess) {        ((ThreadSafeAccess)message).resetAccessControl();      }      if (logger.isDebugEnabled()) {        logger.debug("Message received: " + message);      }      return message;    } else {      if (logger.isDebugEnabled()) {        logger.debug("No event received after " + timeout + " ms");      }      return null;    }  } catch (  Exception e) {    throw e;  }}  }
class C{  private static void updateFill(URL resourceLocator,Fill fill,List<String> externalImageList){  if (fill != null) {    if (fill.getGraphicFill() != null) {      updateGraphicalSymbol(resourceLocator,fill.getGraphicFill().graphicalSymbols(),externalImageList);    }  }}  }
class C{  public ResourceLazyLoadingScript metaArguments(Object... metaArguments){  this.metaArguments=metaArguments;  return this;}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public <D>void removeMappedEntityClass(Class<D> dtoClass){  checkNotInitialized();  mappings.remove(dtoClass);}  }
class C{  public boolean removeNode(Node n){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static String shellEscape(String word){  int len=word.length();  if (len == 0) {    return "''";  }  for (int ii=0; ii < len; ii++) {    char c=word.charAt(ii);    if (!Character.isLetterOrDigit(c) && SAFE_PUNCTUATION.indexOf(c) == -1) {      return "'" + word.replace("'","'\\''") + "'";    }  }  return word;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  private void writeDataTofile(Object[] row) throws CarbonSortKeyAndGroupByException {  if (mergerParameters.isSortFileCompressionEnabled() || mergerParameters.isPrefetch()) {    if (entryCount == 0) {      records=new Object[totalSize][];      records[entryCount++]=row;      return;    }    records[entryCount++]=row;    if (entryCount == totalSize) {      this.writer.writeSortTempFile(records);      entryCount=0;      records=new Object[totalSize][];    }    return;  }  try {    int fieldIndex=0;    char[] aggType=mergerParameters.getAggType();    for (int counter=0; counter < mergerParameters.getDimColCount(); counter++) {      stream.writeInt((Integer)RemoveDictionaryUtil.getDimension(fieldIndex++,row));    }    if ((mergerParameters.getNoDictionaryCount() + mergerParameters.getComplexDimColCount()) > 0) {      stream.write(RemoveDictionaryUtil.getByteArrayForNoDictionaryCols(row));    }    fieldIndex=0;    for (int counter=0; counter < mergerParameters.getMeasureColCount(); counter++) {      if (null != RemoveDictionaryUtil.getMeasure(fieldIndex,row)) {        stream.write((byte)1);        if (aggType[counter] == CarbonCommonConstants.BYTE_VALUE_MEASURE) {          Double val=(Double)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeDouble(val);        } else         if (aggType[counter] == CarbonCommonConstants.SUM_COUNT_VALUE_MEASURE) {          Double val=(Double)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeDouble(val);        } else         if (aggType[counter] == CarbonCommonConstants.BIG_INT_MEASURE) {          Long val=(Long)RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeLong(val);        } else         if (aggType[counter] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {          byte[] bigDecimalInBytes=(byte[])RemoveDictionaryUtil.getMeasure(fieldIndex,row);          stream.writeInt(bigDecimalInBytes.length);          stream.write(bigDecimalInBytes);        }      } else {        stream.write((byte)0);      }      fieldIndex++;    }  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException("Problem while writing the file",e);  }}  }
class C{  public SimpleBooleanProperty repeatProperty(){  return this.repeat;}  }
class C{  public SimpleVectorValueChecker(final double relativeThreshold,final double absoluteThreshold,final int maxIter){  super(relativeThreshold,absoluteThreshold);  if (maxIter <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxIter,0);  }  maxIterationCount=maxIter;}  }
class C{  public ColumnQuery addColumn(String column) throws NullPointerException {  this.columns.add(Objects.requireNonNull(column,"column is required"));  return this;}  }
class C{  @PickTriggerResult public int fromMultipleSources(@NonNull final CharSequence pTitle,@NonNull final PickSource... pPickSources){  if (pPickSources.length == 0) {    return PickTriggerResult.TRIGGER_PICK_ERR_NO_PICK_SOURCES;  }  final PackageManager packageManager=this.mContext.getPackageManager();  final ArrayList<Intent> resultIntents=new ArrayList<>();  for (  final PickSource source : pPickSources) {switch (source) {case CAMERA:{        final List<Intent> cameraIntents=new ArrayList<>();        final File file=this.createCameraImageFile();        if (file != null) {          final Uri outputFileUri=this.createCameraImageUri(file);          final Intent cameraIntent=this.prepareCameraIntent(outputFileUri);          final List<ResolveInfo> camList=packageManager.queryIntentActivities(cameraIntent,0);          for (          final ResolveInfo resolveInfo : camList) {            final String packageName=resolveInfo.activityInfo.packageName;            final Intent intent=new Intent(cameraIntent);            intent.setComponent(new ComponentName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));            intent.setPackage(packageName);            intent.putExtra(MediaStore.EXTRA_OUTPUT,outputFileUri);            cameraIntents.add(intent);          }        }        resultIntents.addAll(cameraIntents);        break;      }case GALLERY:{      final List<Intent> galleryIntents=new ArrayList<>();      final Intent galleryIntent=this.prepareGalleryIntent();      final List<ResolveInfo> camList=packageManager.queryIntentActivities(galleryIntent,0);      for (      final ResolveInfo resolveInfo : camList) {        final String packageName=resolveInfo.activityInfo.packageName;        final Intent intent=new Intent(galleryIntent);        intent.setComponent(new ComponentName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));        intent.setPackage(packageName);        galleryIntents.add(intent);      }      resultIntents.addAll(galleryIntents);      break;    }case DOCUMENTS:{    resultIntents.add(this.prepareDocumentsIntent(false));    break;  }}}if (resultIntents.size() == 0) {return PickTriggerResult.TRIGGER_PICK_ERR_NO_ACTIVITY;}final Intent result=Intent.createChooser(resultIntents.remove(resultIntents.size() - 1),pTitle);result.putExtra(Intent.EXTRA_INITIAL_INTENTS,resultIntents.toArray(new Parcelable[resultIntents.size()]));return this.triggerPick(result,QiPick.REQ_MULTIPLE);}  }
class C{  public Array2DRowFieldMatrix<T> initializeHighOrderDerivatives(final T h,final T[] t,final T[][] y,final T[][] yDot){  final T[][] a=MathArrays.buildArray(field,c1.length + 1,c1.length + 1);  final T[][] b=MathArrays.buildArray(field,c1.length + 1,y[0].length);  final T[] y0=y[0];  final T[] yDot0=yDot[0];  for (int i=1; i < y.length; ++i) {    final T di=t[i].subtract(t[0]);    final T ratio=di.divide(h);    T dikM1Ohk=h.reciprocal();    final T[] aI=a[2 * i - 2];    final T[] aDotI=(2 * i - 1) < a.length ? a[2 * i - 1] : null;    for (int j=0; j < aI.length; ++j) {      dikM1Ohk=dikM1Ohk.multiply(ratio);      aI[j]=di.multiply(dikM1Ohk);      if (aDotI != null) {        aDotI[j]=dikM1Ohk.multiply(j + 2);      }    }    final T[] yI=y[i];    final T[] yDotI=yDot[i];    final T[] bI=b[2 * i - 2];    final T[] bDotI=(2 * i - 1) < b.length ? b[2 * i - 1] : null;    for (int j=0; j < yI.length; ++j) {      bI[j]=yI[j].subtract(y0[j]).subtract(di.multiply(yDot0[j]));      if (bDotI != null) {        bDotI[j]=yDotI[j].subtract(yDot0[j]);      }    }  }  final FieldLUDecomposition<T> decomposition=new FieldLUDecomposition<T>(new Array2DRowFieldMatrix<T>(a,false));  final FieldMatrix<T> x=decomposition.getSolver().solve(new Array2DRowFieldMatrix<T>(b,false));  final Array2DRowFieldMatrix<T> truncatedX=new Array2DRowFieldMatrix<T>(field,x.getRowDimension() - 1,x.getColumnDimension());  for (int i=0; i < truncatedX.getRowDimension(); ++i) {    for (int j=0; j < truncatedX.getColumnDimension(); ++j) {      truncatedX.setEntry(i,j,x.getEntry(i,j));    }  }  return truncatedX;}  }
class C{  public void closeAllContexts(){  long closeMaxWait=Long.getLong(SystemProperties.CACHE_CONTEXT_CLOSE_MAX_WAIT,SystemProperties.CACHE_CONTEXT_CLOSE_MAX_WAIT_DEFAULT);  long startTime=System.currentTimeMillis();  long endTime=(closeMaxWait * 1000) + startTime;  _isClosed=true;synchronized (_createdContexts) {    for (    Context context : _createdContexts) {      while (context.isActive()) {        try {          Thread.sleep(100);        } catch (        InterruptedException ignored) {        }        if ((0 < closeMaxWait) && (0 < (System.currentTimeMillis() - endTime))) {          CacheManager.getLogger().log(Level.WARNING,_fullSpaceName + ": not all cache context closed, forced exit, owning thread is " + context.getOwningThreadName());          return;        }      }    }  }}  }
class C{  public GroupsIsMemberQueryWithExtended(VkApiClient client,String groupId){  super(client,"groups.isMember",IsMemberExtendedResponse.class);  groupId(groupId);  extended(true);}  }
class C{  private void printStatementsInBody(Body body,java.io.PrintWriter out){  LabeledUnitPrinter up=new NormalUnitPrinter(body);  Map<Unit,String> stmtToName=up.labels();  Chain<Unit> units=body.getUnits();  ExceptionalUnitGraph exceptionalUnitGraph=new soot.toolkits.graph.ExceptionalUnitGraph(body);  LiveLocals sll=new SimpleLiveLocals(exceptionalUnitGraph);  String cleanMethodName=cleanMethod(body.getMethod().getName());  Iterator<Unit> unitIt=units.iterator();  Unit currentStmt=null;  String currentLabel="default";  long statementCount=0;  long labelCount=0;  long labelID=0;  Vector<String> useList=new Vector<String>();  Vector<Vector<Long>> useDataList=new Vector<Vector<Long>>();  Vector<String> defList=new Vector<String>();  Vector<Vector<Long>> defDataList=new Vector<Vector<Long>>();  Vector<Vector<String>> paramData=new Vector<Vector<String>>();  Vector<XMLLabel> xmlLabelsList=new Vector<XMLLabel>();  long maxStmtCount=0;  XMLNode methodNode=xmlNode.addChild("method",new String[]{"name","returntype","class"},new String[]{cleanMethodName,body.getMethod().getReturnType().toString(),body.getMethod().getDeclaringClass().getName().toString()});  String declarationStr=body.getMethod().getDeclaration().toString().trim();  methodNode.addChild("declaration",toCDATA(declarationStr),new String[]{"length"},new String[]{declarationStr.length() + ""});  XMLNode parametersNode=methodNode.addChild("parameters",new String[]{"method"},new String[]{cleanMethodName});  XMLNode localsNode=methodNode.addChild("locals");  XMLNode labelsNode=methodNode.addChild("labels");  XMLNode stmtsNode=methodNode.addChild("statements");  XMLLabel xmlLabel=new XMLLabel(labelCount,cleanMethodName,currentLabel);  labelsNode.addChild("label",new String[]{"id","name","method"},new String[]{(labelCount++) + "",currentLabel,cleanMethodName});  while (unitIt.hasNext()) {    currentStmt=(Unit)unitIt.next();    if (stmtToName.containsKey(currentStmt)) {      currentLabel=stmtToName.get(currentStmt).toString();      xmlLabel.stmtCount=labelID;      xmlLabel.stmtPercentage=new Float((new Float(labelID).floatValue() / new Float(units.size()).intValue()) * 100.0).longValue();      if (xmlLabel.stmtPercentage > maxStmtCount)       maxStmtCount=xmlLabel.stmtPercentage;      xmlLabelsList.addElement(xmlLabel);      xmlLabel=new XMLLabel(labelCount,cleanMethodName,currentLabel);      labelsNode.addChild("label",new String[]{"id","name","method"},new String[]{labelCount + "",currentLabel,cleanMethodName});      labelCount++;      labelID=0;    }    XMLNode stmtNode=stmtsNode.addChild("statement",new String[]{"id","label","method","labelid"},new String[]{statementCount + "",currentLabel,cleanMethodName,labelID + ""});    XMLNode sootstmtNode=stmtNode.addChild("soot_statement",new String[]{"branches","fallsthrough"},new String[]{boolToString(currentStmt.branches()),boolToString(currentStmt.fallsThrough())});    int j=0;    Iterator<ValueBox> boxIt=currentStmt.getUseBoxes().iterator();    while (boxIt.hasNext()) {      ValueBox box=(ValueBox)boxIt.next();      if (box.getValue() instanceof Local) {        String local=cleanLocal(((Local)box.getValue()).toString());        sootstmtNode.addChild("uses",new String[]{"id","local","method"},new String[]{j + "",local,cleanMethodName});        j++;        Vector<Long> tempVector=null;        int useIndex=useList.indexOf(local);        if (useIndex == -1) {          useDataList.addElement(tempVector);          useList.addElement(local);          useIndex=useList.indexOf(local);        }        if (useDataList.size() > useIndex) {          tempVector=useDataList.elementAt(useIndex);          if (tempVector == null) {            tempVector=new Vector<Long>();          }          tempVector.addElement(new Long(statementCount));          useDataList.setElementAt(tempVector,useIndex);        }      }    }    j=0;    boxIt=currentStmt.getDefBoxes().iterator();    while (boxIt.hasNext()) {      ValueBox box=(ValueBox)boxIt.next();      if (box.getValue() instanceof Local) {        String local=cleanLocal(((Local)box.getValue()).toString());        sootstmtNode.addChild("defines",new String[]{"id","local","method"},new String[]{j + "",local,cleanMethodName});        j++;        Vector<Long> tempVector=null;        int defIndex=defList.indexOf(local);        if (defIndex == -1) {          defDataList.addElement(tempVector);          defList.addElement(local);          defIndex=defList.indexOf(local);        }        if (defDataList.size() > defIndex) {          tempVector=defDataList.elementAt(defIndex);          if (tempVector == null) {            tempVector=new Vector<Long>();          }          tempVector.addElement(new Long(statementCount));          defDataList.setElementAt(tempVector,defIndex);        }      }    }    List<Local> liveLocalsIn=sll.getLiveLocalsBefore(currentStmt);    List<Local> liveLocalsOut=sll.getLiveLocalsAfter(currentStmt);    XMLNode livevarsNode=sootstmtNode.addChild("livevariables",new String[]{"incount","outcount"},new String[]{liveLocalsIn.size() + "",liveLocalsOut.size() + ""});    for (int i=0; i < liveLocalsIn.size(); i++) {      livevarsNode.addChild("in",new String[]{"id","local","method"},new String[]{i + "",cleanLocal(liveLocalsIn.get(i).toString()),cleanMethodName});    }    for (int i=0; i < liveLocalsOut.size(); i++) {      livevarsNode.addChild("out",new String[]{"id","local","method"},new String[]{i + "",cleanLocal(liveLocalsOut.get(i).toString()),cleanMethodName});    }    for (int i=0; i < body.getMethod().getParameterTypes().size(); i++) {      Vector<String> tempVec=new Vector<String>();      paramData.addElement(tempVec);    }    currentStmt.toString(up);    String jimpleStr=up.toString().trim();    if (currentStmt instanceof soot.jimple.IdentityStmt && jimpleStr.indexOf("@parameter") != -1) {      String tempStr=jimpleStr.substring(jimpleStr.indexOf("@parameter") + 10);      if (tempStr.indexOf(":") != -1)       tempStr=tempStr.substring(0,tempStr.indexOf(":")).trim();      if (tempStr.indexOf(" ") != -1)       tempStr=tempStr.substring(0,tempStr.indexOf(" ")).trim();      int paramIndex=new Integer(tempStr).intValue();      Vector<String> tempVec=paramData.elementAt(paramIndex);      if (tempVec != null)       tempVec.addElement(Long.toString(statementCount));      paramData.setElementAt(tempVec,paramIndex);    }    sootstmtNode.addChild("jimple",toCDATA(jimpleStr),new String[]{"length"},new String[]{(jimpleStr.length() + 1) + ""});    labelID++;    statementCount++;  }  stmtsNode.addAttribute("count",statementCount + "");  parametersNode.addAttribute("count",body.getMethod().getParameterCount() + "");  for (int i=0; i < body.getMethod().getParameterTypes().size(); i++) {    XMLNode paramNode=parametersNode.addChild("parameter",new String[]{"id","type","method","name"},new String[]{i + "",body.getMethod().getParameterTypes().get(i).toString(),cleanMethodName,"_parameter" + i});    XMLNode sootparamNode=paramNode.addChild("soot_parameter");    Vector<String> tempVec=paramData.elementAt(i);    for (int k=0; k < tempVec.size(); k++) {      sootparamNode.addChild("use",new String[]{"id","line","method"},new String[]{k + "",String.valueOf(tempVec.elementAt(k)) + "",cleanMethodName});    }    sootparamNode.addAttribute("uses",tempVec.size() + "");  }  xmlLabel.stmtCount=labelID;  xmlLabel.stmtPercentage=new Float((new Float(labelID).floatValue() / new Float(units.size()).floatValue()) * 100.0).longValue();  if (xmlLabel.stmtPercentage > maxStmtCount)   maxStmtCount=xmlLabel.stmtPercentage;  xmlLabelsList.addElement(xmlLabel);  Collection<Local> locals=body.getLocals();  Iterator<Local> localsIterator=locals.iterator();  Vector<String> localTypes=new Vector<String>();  Vector<Vector<XMLNode>> typedLocals=new Vector<Vector<XMLNode>>();  Vector<Integer> typeCounts=new Vector<Integer>();  int j=0;  int currentType=0;  while (localsIterator.hasNext()) {    int useCount=0;    int defineCount=0;    Local localData=(Local)localsIterator.next();    String local=cleanLocal((String)localData.toString());    String localType=localData.getType().toString();    if (!localTypes.contains(localType)) {      localTypes.addElement(localType);      typedLocals.addElement(new Vector<XMLNode>());      typeCounts.addElement(new Integer(0));    }    XMLNode localNode=new XMLNode("local","",new String[]{"id","method","name","type"},new String[]{j + "",cleanMethodName,local,localType});    XMLNode sootlocalNode=localNode.addChild("soot_local");    currentType=0;    for (int k=0; k < localTypes.size(); k++) {      if (localType.equalsIgnoreCase(localTypes.elementAt(k))) {        currentType=k;        Integer tempInt=new Integer(typeCounts.elementAt(k).intValue() + 1);        typeCounts.setElementAt(tempInt,k);        break;      }    }    for (int k=0; k < useList.size(); k++) {      String query=useList.elementAt(k);      if (query.equalsIgnoreCase(local)) {        Vector<Long> tempVector=useDataList.elementAt(useList.indexOf(local));        for (int i=0; i < tempVector.size(); i++) {          sootlocalNode.addChild("use",new String[]{"id","line","method"},new String[]{i + "",((Long)tempVector.elementAt(i)).toString(),cleanMethodName});        }        useCount=tempVector.size();        break;      }    }    for (int k=0; k < defList.size(); k++) {      String query=(defList.elementAt(k));      if (query.equalsIgnoreCase(local)) {        Vector<Long> tempVector=defDataList.elementAt(defList.indexOf(local));        for (int i=0; i < tempVector.size(); i++) {          sootlocalNode.addChild("definition",new String[]{"id","line","method"},new String[]{i + "",((Long)tempVector.elementAt(i)).toString(),cleanMethodName});        }        defineCount=tempVector.size();        break;      }    }    sootlocalNode.addAttribute("uses",useCount + "");    sootlocalNode.addAttribute("defines",defineCount + "");    Vector<XMLNode> list=typedLocals.elementAt(currentType);    list.addElement(localNode);    typedLocals.setElementAt(list,currentType);    localsNode.addChild((XMLNode)localNode.clone());    j++;  }  localsNode.addAttribute("count",locals.size() + "");  XMLNode typesNode=localsNode.addChild("types",new String[]{"count"},new String[]{localTypes.size() + ""});  for (int i=0; i < localTypes.size(); i++) {    String type=localTypes.elementAt(i);    XMLNode typeNode=typesNode.addChild("type",new String[]{"id","type","count"},new String[]{i + "",type,typeCounts.elementAt(i) + ""});    Vector<XMLNode> list=typedLocals.elementAt(i);    for (j=0; j < list.size(); j++) {      typeNode.addChild(list.elementAt(j));    }  }  labelsNode.addAttribute("count",labelCount + "");  XMLNode current=labelsNode.child;  for (int i=0; i < xmlLabelsList.size(); i++) {    XMLLabel tempLabel=xmlLabelsList.elementAt(i);    tempLabel.stmtPercentage=new Float((new Float(tempLabel.stmtPercentage).floatValue() / new Float(maxStmtCount).floatValue()) * 100.0).longValue();    if (current != null) {      current.addAttribute("stmtcount",tempLabel.stmtCount + "");      current.addAttribute("stmtpercentage",tempLabel.stmtPercentage + "");      current=current.next;    }  }  statementCount=0;  XMLNode exceptionsNode=methodNode.addChild("exceptions");  Iterator<Trap> trapIt=body.getTraps().iterator();  if (trapIt.hasNext()) {    while (trapIt.hasNext()) {      Trap trap=trapIt.next();      XMLNode catchNode=exceptionsNode.addChild("exception",new String[]{"id","method","type"},new String[]{(statementCount++) + "",cleanMethodName,Scene.v().quotedNameOf(trap.getException().getName())});      catchNode.addChild("begin",new String[]{"label"},new String[]{stmtToName.get(trap.getBeginUnit()).toString()});      catchNode.addChild("end",new String[]{"label"},new String[]{stmtToName.get(trap.getEndUnit()).toString()});      catchNode.addChild("handler",new String[]{"label"},new String[]{stmtToName.get(trap.getHandlerUnit()).toString()});    }  }  exceptionsNode.addAttribute("count",exceptionsNode.getNumberOfChildren() + "");  return;}  }
class C{  public static SparseGradient createVariable(final int idx,final double value){  return new SparseGradient(value,Collections.singletonMap(idx,1.0));}  }
class C{  public int size(){  return size;}  }
class C{  @Override public boolean isAutoStartup(){  return false;}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public static APIUser createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,APIUser.class);}  }
class C{  public SparseFieldMatrix(final Field<T> field,final int rowDimension,final int columnDimension){  super(field,rowDimension,columnDimension);  this.rows=rowDimension;  this.columns=columnDimension;  entries=new OpenIntToFieldHashMap<T>(field);}  }
class C{  protected LinkedHashMap<Dimension,LinkedHashSet<DimensionField>> generateDimensionFields(@NotNull List<PathSegment> apiDimensionPathSegments,@NotNull DimensionDictionary dimensionDictionary){  return apiDimensionPathSegments.stream().filter(null).collect(Collectors.toMap(null,null,null,null));}  }
class C{  private boolean pop(byte mode){  if (top < 0 || stack[top] != mode) {    return false;  }  --top;  return true;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void show(long time,boolean animate){  super.show(time,animate);  mLayoutTabs=null;  setStaticTab(mTabModelSelector.getCurrentTabId());}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public JIndentAction(){  super("JINDENT");}  }
class C{  public Builder shadowRetinaUrl(String shadowRetinaUrl){  this.shadowRetinaUrl=shadowRetinaUrl;  return this;}  }
class C{  public ZWaveThermostatModeCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public boolean cancelAlarm(Intent scheduledIntent){  PendingIntent pendingIntent=PendingIntent.getService(mContext,0,scheduledIntent,PendingIntent.FLAG_NO_CREATE);  if (pendingIntent != null) {    AlarmManager am=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);    am.cancel(pendingIntent);    pendingIntent.cancel();    return true;  } else {    return false;  }}  }
class C{  public static Map updateOrderItemShipGroupAssoc(DispatchContext dctx,Map context) throws GeneralException {  Map<String,Object> result=ServiceUtil.returnSuccess();  String message=null;  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  if (UtilValidate.isEmpty(quantity)) {    quantity=BigDecimal.ZERO;  }  BigDecimal totalQuantity=(BigDecimal)context.get("totalQuantity");  if (UtilValidate.isEmpty(totalQuantity)) {    totalQuantity=BigDecimal.ZERO;  }  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToUpdateOrderItemFromOISG",locale);  Integer rowCount=(Integer)context.get("rowCount");  Integer rowNumber=(Integer)context.get("rowNumber");  if (rowNumber == null) {    Long count=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryCount();    if (count != null) {      rowNumber=new Integer(count.intValue());      result.put("rowNumber",rowNumber);    }  }  GenericValue oisga=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId).queryOne();  if (UtilValidate.isEmpty(oisga)) {    String errMsg=mainErrorMessage + " : Order Item Ship Group Assoc Does Not Exist";    Debug.logError(errMsg,module);    return ServiceUtil.returnError(errMsg);  }  GenericValue oisg=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();  GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryOne();  if (UtilValidate.isEmpty(orderItem)) {    String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemNotFound",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),locale);    return ServiceUtil.returnError(errMsg);  }  if (oisg != null) {    if (ZERO.compareTo(quantity) == 0) {      if (rowNumber.intValue() == 1) {        String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedCannotBeNullOrNegative",locale);        Debug.logError(errMsg,module);        return ServiceUtil.returnError(errMsg);      }      try {        Map<String,Object> cancelOrderInventoryReservationMap=dctx.makeValidContext("cancelOrderInventoryReservation","IN",context);        Map<String,Object> localResult=dispatcher.runSync("cancelOrderInventoryReservation",cancelOrderInventoryReservationMap);        if (ServiceUtil.isError(localResult))         return localResult;        Map<String,Object> deleteOrderItemShipGroupAssocMap=dctx.makeValidContext("deleteOrderItemShipGroupAssoc","IN",context);        localResult=dispatcher.runSync("deleteOrderItemShipGroupAssoc",deleteOrderItemShipGroupAssocMap);        if (ServiceUtil.isError(localResult))         return localResult;      } catch (      GenericServiceException e) {        return ServiceUtil.returnError(e.toString());      }      if (rowCount != null && rowNumber != null) {        int rowCountInt=rowCount.intValue();        int rowNumberInt=rowNumber.intValue();        if (rowCountInt == rowNumberInt - 1) {          try {            message=validateOrderItemShipGroupAssoc(delegator,dispatcher,orderItem,totalQuantity,oisga,userLogin,locale);          } catch (          Exception e) {            String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsLessThanOrderItemQuantity",locale);            Debug.logError(errMsg,module);            return ServiceUtil.returnError(errMsg);          }        }      }      result.put("totalQuantity",totalQuantity);      if (UtilValidate.isNotEmpty(message)) {        result.put("successMessage",message);      }      return result;    }    BigDecimal actualQuantity=totalQuantity.add(quantity);    BigDecimal qty=(BigDecimal)orderItem.get("quantity");    if (UtilValidate.isEmpty(qty)) {      qty=BigDecimal.ZERO;    }    BigDecimal cancelQty=(BigDecimal)orderItem.get("cancelQuantity");    if (UtilValidate.isEmpty(cancelQty)) {      cancelQty=BigDecimal.ZERO;    }    BigDecimal orderItemQuantity=qty.subtract(cancelQty);    if (actualQuantity.compareTo(orderItemQuantity) > 0) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsBiggerThanOrderItemQuantity",locale);      Debug.logError(errMsg,module);      return ServiceUtil.returnError(errMsg);    }    if (quantity.compareTo(orderItemQuantity) > 0) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsBiggerThanOrderItemQuantity",locale);      Debug.logError(errMsg,module);      return ServiceUtil.returnError(errMsg);    }    oisga.set("quantity",quantity);    oisga.store();    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isNotEmpty(orderHeader)) {      Map<String,Object> cancelResp=dispatcher.runSync("cancelOrderInventoryReservation",UtilMisc.toMap("userLogin",userLogin,"orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId));      if (ServiceUtil.isError(cancelResp)) {        throw new GeneralException(ServiceUtil.getErrorMessage(cancelResp));      }      String productStoreId=orderHeader.getString("productStoreId");      String orderTypeId=orderHeader.getString("orderTypeId");      List<String> resErrorMessages=new LinkedList<String>();      if (Debug.infoOn())       Debug.logInfo("Calling reserve inventory...",module);      reserveInventory(delegator,dispatcher,userLogin,locale,UtilMisc.toList(oisga),null,UtilMisc.<String,GenericValue>toMap(orderItemSeqId,orderItem),orderTypeId,productStoreId,resErrorMessages);    }    totalQuantity=totalQuantity.add(quantity);    result.put("totalQuantity",totalQuantity);    if (rowCount != null && rowNumber != null) {      int rowCountInt=rowCount.intValue();      int rowNumberInt=rowNumber.intValue();      if (rowCountInt == rowNumberInt - 1) {        try {          message=validateOrderItemShipGroupAssoc(delegator,dispatcher,orderItem,totalQuantity,oisga,userLogin,locale);        } catch (        GeneralException e) {          String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsLessThanOrderItemQuantity",locale);          Debug.logError(errMsg,module);          return ServiceUtil.returnError(errMsg);        }      }      if (UtilValidate.isNotEmpty(message)) {        result.put("successMessage",message);      }    }  } else {    totalQuantity=totalQuantity.add(quantity);    result.put("totalQuantity",totalQuantity);  }  return result;}  }
class C{  AppendOnlyStreamReader(DistributedLogManager dlm) throws IOException {  this.dlm=dlm;  reader=dlm.getInputStream(0);  currentPosition=0;}  }
class C{  public static final void drawWheelJoint(GL2 gl,WheelJoint joint){  Vector2 anchor=joint.getAnchor1();  gl.glColor4f(0.8f,0.8f,0.8f,1.0f);  RenderUtilities.fillCircleFromCenter(gl,0.025,anchor.x,anchor.y);  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  RenderUtilities.drawCircleFromCenter(gl,0.025,anchor.x,anchor.y,false,false);}  }
class C{  Context fork(){  return new Context(snippets,globals);}  }
class C{  public ImageOverlayOptions build(){  ImageOverlayOptions options=new ImageOverlayOptions();  options.opacity=this.opacity;  options.attribution=this.attribution;  return options;}  }
class C{  public boolean hasSimilarityMatrix(int featureIndex){  if (featureIndex >= this.getNumberOfByteFeatures()) {    return false;  }  return this.similarityMatrices != null && this.similarityMatrices[featureIndex] != null;}  }
class C{  public void startFirstSampleTimer(){}  }
class C{  public IntDataType(){  this.i=0;}  }
class C{  static double slowexp(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    split(FACT[i],as);    splitReciprocal(as,facts);    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public int readUnsignedShort() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readUnsignedShort();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public CM_PING(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  @Override public void addIdRef(String name){  if (fIdIdrefChecking) {    super.addIdRef(name);  }}  }
class C{  public int size(){  return worldMaps == null ? 0 : worldMaps.size();}  }
class C{  public void refined__Program_addCompilationUnit(CompilationUnit node){  List<CompilationUnit> list=(parent == null || state == null) ? getCompilationUnitListNoTransform() : getCompilationUnitList();  list.addChild(node);}  }
class C{  private void addDataElementOperandValues(DataQueryParams params,Grid grid){  if (!params.getDataElementOperands().isEmpty() && !params.isSkipData()) {    DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimension(DataDimensionItemType.DATA_ELEMENT_OPERAND).withIncludeNumDen(false).build();    List<DataElementOperand> operands=asTypedList(dataSourceParams.getDataElementOperands());    List<DimensionalItemObject> dataElements=Lists.newArrayList(DimensionalObjectUtils.getDataElements(operands));    List<DimensionalItemObject> categoryOptionCombos=Lists.newArrayList(DimensionalObjectUtils.getCategoryOptionCombos(operands));    DataQueryParams operandParams=DataQueryParams.newBuilder(dataSourceParams).removeDimension(DATA_X_DIM_ID).addDimension(new BaseDimensionalObject(DATA_X_DIM_ID,DimensionType.DATA_X,dataElements)).addDimension(new BaseDimensionalObject(CATEGORYOPTIONCOMBO_DIM_ID,DimensionType.CATEGORY_OPTION_COMBO,categoryOptionCombos)).build();    Map<String,Object> aggregatedDataMap=getAggregatedDataValueMapObjectTyped(operandParams);    aggregatedDataMap=AnalyticsUtils.convertDxToOperand(aggregatedDataMap);    for (    Map.Entry<String,Object> entry : aggregatedDataMap.entrySet()) {      Object value=AnalyticsUtils.getRoundedValueObject(operandParams,entry.getValue());      grid.addRow();      grid.addValues(entry.getKey().split(DIMENSION_SEP));      grid.addValue(value);      if (params.isIncludeNumDen()) {        grid.addNullValues(3);      }    }  }}  }
class C{  public InstanceNotExistException(String s){  super(s);}  }
class C{  protected boolean needsToSaveDirtyEditors(){  IResource[] selectedResources=getSelectedResources();  if (selectedResources != null && selectedResources.length > 0) {    IEditorReference[] editorReferences=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();    for (    IEditorReference editorReference : editorReferences) {      if (editorReference.isDirty()) {        try {          IEditorInput editorInput=editorReference.getEditorInput();          if (editorInput instanceof IFileEditorInput) {            IFile file=((IFileEditorInput)editorInput).getFile();            if (needsToSave(file,selectedResources)) {              return true;            }          }        } catch (        PartInitException e) {        }      }    }  }  return false;}  }
class C{  public int backend(){  String s=soot.PhaseOptions.getString(options,"backend");  if (s.equalsIgnoreCase("auto"))   return backend_auto;  if (s.equalsIgnoreCase("buddy"))   return backend_buddy;  if (s.equalsIgnoreCase("cudd"))   return backend_cudd;  if (s.equalsIgnoreCase("sable"))   return backend_sable;  if (s.equalsIgnoreCase("javabdd"))   return backend_javabdd;  if (s.equalsIgnoreCase("none"))   return backend_none;  throw new RuntimeException("Invalid value " + s + " of phase option backend");}  }
class C{  private void populateConnectionComboBox(){  connectionComboBox.removeAllItems();  if (geoServerConnectionManager != null) {    List<GeoServerConnection> connectionList=geoServerConnectionManager.getConnectionList();    for (    GeoServerConnection connection : connectionList) {      connectionComboBox.addItem(connection.getConnectionName());      connectionMap.put(connection.getConnectionName(),connection);    }  }}  }
class C{  public GermanLexicon(){  this("germanlex");}  }
class C{  public void release(){  releaseEglSurface();}  }
class C{  public static List<String> splitPath(String path){  return splitPath(new File(path));}  }
class C{  public void saveToXML(boolean forceSave){  Selection selection=getSelection();  if (forceSave || !selection.getModifiedWidgets().isEmpty()) {    ourLock.lock();    myModificationCount++;    ourLock.unlock();    if (DEBUG) {      System.out.println("Model Saved to XML -> " + myModificationCount + "("+ selection.getModifiedWidgets().size()+ " elements modified)");    }    ConstraintUtilities.saveModelToXML(myNlModel,true);    selection.clearModifiedWidgets();    requestRender();  }}  }
class C{  public RulesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public MessagesGetDialogsQuery(VkApiClient client,Actor actor){  super(client,"messages.getDialogs",GetDialogsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected void prepareDataSet(){  dataSet1=Arrays.asList(new String[]{"a","b","c"});  dataSet2=Arrays.asList(new String[]{"d","e","f"});  dataSet3=Arrays.asList(new String[]{"b","c","a","d"});}  }
class C{  public void parseCommandLine(String[] args){  String language=DEFAULT_LANGUAGE;  String country=DEFAULT_COUNTRY;  if (args != null) {    for (    String arg : args) {      if (arg.startsWith(ARG_STRING)) {        String locale=arg.substring(ARG_STRING.length());        String[] components=locale.split("\\:");        if (components.length == 2) {          language=components[0];          country=components[1];        }      }    }  }  currentLocale=new Locale(language,country);}  }
class C{  @Override public boolean isChildFragmentResolved(){  if (fIsShortHand && fShortHandPointer != null && fChildSequence.length <= 0) {    return fShortHandPointer.isChildFragmentResolved();  } else {    return fWasOnlyEmptyElementFound ? !fWasOnlyEmptyElementFound : (fIsFragmentResolved && (fCurrentChildDepth >= fFoundDepth));  }}  }
class C{  public boolean equals(Object t){  return t == this;}  }
class C{  private FileChannel updateCache(String filePath){  FileChannel fileChannel=fileNameAndStreamCache.get(filePath);  try {    if (null == fileChannel) {      FileInputStream stream=new FileInputStream(filePath);      fileChannel=stream.getChannel();      fileNameAndStreamCache.put(filePath,fileChannel);    }  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return fileChannel;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo keyStructureInfo){  if (chunkAttributes.getInvertedIndexes() != null) {    index=chunkAttributes.getInvertedIndexesReverse()[index];  }  System.arraycopy(dataChunk,index * chunkAttributes.getColumnValueSize(),data,offset,chunkAttributes.getColumnValueSize());  return chunkAttributes.getColumnValueSize();}  }
class C{  public static ServerRequest[] fillRequest(ServerRequest request,PokemonGo api){  return new ServerRequest[]{request,new ServerRequest(RequestType.CHECK_CHALLENGE,CheckChallengeMessage.getDefaultInstance()),new ServerRequest(RequestType.GET_HATCHED_EGGS,GetHatchedEggsMessage.getDefaultInstance()),new ServerRequest(RequestType.GET_INVENTORY,CommonRequest.getDefaultGetInventoryMessage(api)),new ServerRequest(RequestType.CHECK_AWARDED_BADGES,CheckAwardedBadgesMessage.getDefaultInstance()),new ServerRequest(RequestType.DOWNLOAD_SETTINGS,CommonRequest.getDownloadSettingsMessageRequest(api))};}  }
class C{  public static void main1(String[] args) throws Exception {  HMMData htsData=new HMMData();  HTSPStream lf0Pst, mcepPst, strPst, magPst;  boolean[] voiced=null;  LEDataInputStream lf0Data, mcepData, strData, magData;  String lf0File, mcepFile, strFile, magFile, outFile, residualFile;  String voiceName, voiceConfig, outDir, voiceExample, hmmTrainDir;  String MaryBase="/project/mary/marcela/openmary/";  outDir="/project/mary/marcela/openmary/tmp/";  outFile=outDir + "tmp.wav";  voiceName="hsmm-ot";  voiceConfig="tr-hsmm-ot.config";  voiceExample="ot0010";  hmmTrainDir="/project/mary/marcela/HMM-voices/turkish/";  htsData.initHMMData(voiceName,MaryBase,voiceConfig);  htsData.setUseMixExc(true);  htsData.setUseFourierMag(true);  lf0File=hmmTrainDir + "data/lf0/" + voiceExample+ ".lf0";  mcepFile=hmmTrainDir + "data/mgc/" + voiceExample+ ".mgc";  strFile=hmmTrainDir + "data/str/" + voiceExample+ ".str";  magFile=hmmTrainDir + "data/mag/" + voiceExample+ ".mag";  int mcepVsize=htsData.getCartTreeSet().getMcepVsize();  int strVsize=htsData.getCartTreeSet().getStrVsize();  int lf0Vsize=htsData.getCartTreeSet().getLf0Stream();  int magVsize=htsData.getCartTreeSet().getMagVsize();  int totalFrame=0;  int lf0VoicedFrame=0;  float fval;  int i, j;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  try {    while (true) {      fval=lf0Data.readFloat();      totalFrame++;      if (fval > 0)       lf0VoicedFrame++;    }  } catch (  EOFException e) {  }  lf0Data.close();  totalFrame=totalFrame - 2;  System.out.println("Total number of Frames = " + totalFrame);  voiced=new boolean[totalFrame];  lf0Pst=new HTSPStream(lf0Vsize,totalFrame,HMMData.FeatureType.LF0,0);  mcepPst=new HTSPStream(mcepVsize,totalFrame,HMMData.FeatureType.MGC,0);  strPst=new HTSPStream(strVsize,totalFrame,HMMData.FeatureType.STR,0);  magPst=new HTSPStream(magVsize,totalFrame,HMMData.FeatureType.MAG,0);  lf0VoicedFrame=0;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  for (i=0; i < totalFrame; i++) {    fval=lf0Data.readFloat();    if (fval < 0)     voiced[i]=false; else {      voiced[i]=true;      lf0Pst.setPar(lf0VoicedFrame,0,fval);      lf0VoicedFrame++;    }  }  lf0Data.close();  mcepData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(mcepFile)));  for (i=0; i < totalFrame; i++) {    for (j=0; j < mcepPst.getOrder(); j++)     mcepPst.setPar(i,j,mcepData.readFloat());  }  mcepData.close();  strData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(strFile)));  for (i=0; i < totalFrame; i++) {    for (j=0; j < strPst.getOrder(); j++)     strPst.setPar(i,j,strData.readFloat());  }  strData.close();  magData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(magFile)));  for (i=0; i < totalFrame; i++) {    for (j=0; j < magPst.getOrder(); j++)     magPst.setPar(i,j,magData.readFloat());  }  magData.close();  AudioFormat af=getHTSAudioFormat(htsData);  double[] audio_double=null;  HTSVocoder par2speech=new HTSVocoder();  audio_double=par2speech.htsMLSAVocoder(lf0Pst,mcepPst,strPst,magPst,voiced,htsData,null);  long lengthInSamples=(audio_double.length * 2) / (af.getSampleSizeInBits() / 8);  Log.d(Mary.LOG,"length in samples=" + lengthInSamples);  double MaxSample=MathUtils.getAbsMax(audio_double);  for (i=0; i < audio_double.length; i++)   audio_double[i]=0.3 * (audio_double[i] / MaxSample);  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af);  File fileOut=new File(outFile);  System.out.println("saving to file: " + outFile);  if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,oais)) {    AudioSystem.write(oais,AudioFileFormat.Type.WAVE,fileOut);  }  System.out.println("Calling audioplayer:");  AudioPlayer player=new AudioPlayer(fileOut);  player.start();  player.join();  System.out.println("audioplayer finished...");}  }
class C{  private void populateDefaults(){  MqttConfigurationUtils.populateMessageLogDefaults(configuration.getConnection().getMessageLog());  populateDaemonDefaults(configuration.getConnection().getBackgroundScript());  generateClientIdIfMissing(configuration.getConnection());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ConstCase fullCopy(){  ConstCase tree=(ConstCase)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public static IOFileFilter magicNumberFileFilter(String magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  @SuppressWarnings("unchecked") public synchronized <T extends Output>void output(@NotNull T output){  Class<? extends Output> outputClass=output.getClass();  List<OutputSink<?>> outputSinks=this.outputSinks.get(outputClass);  boolean continuePropagation=true;  for (int i=outputSinks.size() - 1; i >= 0; --i) {    OutputSink<?> outputSink=outputSinks.get(i);    OutputSink.Propagation propagation=((OutputSink<T>)outputSink).onOutput(output);    continuePropagation=propagation == OutputSink.Propagation.Continue;    if (!continuePropagation) {      break;    }  }  if (continuePropagation && parentContext != null) {    parentContext.output(output);  }}  }
class C{  public boolean isFlipped(){  return this.flipped;}  }
class C{  @POST @Path("/echoParam") public void testSameCapitalizationDuplicate(@QueryParam("tEstingEChO") String param){}  }
class C{  @Override public void createRaster(Symbolizer symbolizer){}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isAddColumnSupported(){  return true;}  }
class C{  public CreateException(){  super();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private void digitsDashToWords(String tokenVal){  int tokenLength=tokenVal.length();  int a=0;  for (int p=0; p <= tokenLength; p++) {    if (p == tokenLength || tokenVal.charAt(p) == '-') {      String aaa=tokenVal.substring(a,p);      NumberExpander.expandDigits(aaa,wordRelation);      wordRelation.addBreak();      a=p + 1;    }  }}  }
class C{  @Override public boolean isApplicableTo(Schema sch){  return true;}  }
class C{  public AdsGetAdsQuery campaignIds(String value){  return unsafeParam("campaign_ids",value);}  }
class C{  private MonsterHunterDatabaseHelper(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);  myContext=context;  setForcedUpgrade();}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public void removeRasterImageOutline(RasterSymbolizer rasterSymbolizer){  if (rasterSymbolizer != null) {    rasterSymbolizer.setImageOutline(null);  }}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_BID_WIN(int address){  return new SM_SYSTEM_MESSAGE(1401267,address);}  }
class C{  public GettingInvolvedTooltip(final String textValue,final String logo){  final HBox tooltipContent=new HBox();  final Label text=new Label(textValue);  text.getStyleClass().add("small-font");  tooltipContent.getChildren().addAll(ImageUtils.createIcon(logo,70),text);  tooltipContent.setSpacing(20);  tooltipContent.setPadding(new Insets(0,10,0,0));  setGraphic(tooltipContent);  setAutoHide(false);  setHideOnEscape(true);  setOpacity(0.95);}  }
class C{  public Builder(){}  }
class C{  public void print(){  for (int i=0; i < clusters.length; i++)   clusters[i].print();}  }
class C{  protected MessagesAddChatUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  private List<EventQueryParams> groupByQueryItems(EventQueryParams params){  List<EventQueryParams> queries=new ArrayList<>();  if (params.isAggregateData()) {    for (    QueryItem item : params.getItemsAndItemFilters()) {      EventQueryParams.Builder query=new EventQueryParams.Builder(params).removeItems().removeItemProgramIndicators().withValue(item.getItem());      if (item.hasProgram()) {        query.withProgram(item.getProgram());      }      queries.add(query.build());    }    for (    ProgramIndicator programIndicator : params.getItemProgramIndicators()) {      EventQueryParams query=new EventQueryParams.Builder(params).removeItems().removeItemProgramIndicators().withProgramIndicator(programIndicator).withProgram(programIndicator.getProgram()).build();      queries.add(query);    }  } else   if (params.isCollapseDataDimensions() && !params.getItems().isEmpty()) {    for (    QueryItem item : params.getItems()) {      EventQueryParams.Builder query=new EventQueryParams.Builder(params).removeItems().addItem(item);      if (item.hasProgram()) {        query.withProgram(item.getProgram());      }      queries.add(query.build());    }  } else {    queries.add(new EventQueryParams.Builder(params).build());  }  return queries;}  }
class C{  public boolean verify(){  if (!keepAlive)   return (false);  boolean verified=false;  try {    checkAvailability();    verified=true;  } catch (  RemoteException e) {    if (logger.isLoggable(Level.FINEST))     logger.finest("RemoteException reaching space, " + "space cannot be reached");    keepAlive=false;  }catch (  Throwable t) {    final int category=ThrowableConstants.retryable(t);    if (category == ThrowableConstants.BAD_INVOCATION || category == ThrowableConstants.BAD_OBJECT) {      keepAlive=false;      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,"Unrecoverable Exception invoking " + "IJSpace.ping()",t);    }  }  return (verified);}  }
class C{  public static Map<String,Object> updateElectronicTextMethod(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  GenericValue electronicText=null;  Locale locale=(Locale)context.get("locale");  String dataResourceId=(String)context.get("dataResourceId");  result.put("dataResourceId",dataResourceId);  String contentId=(String)context.get("contentId");  result.put("contentId",contentId);  if (UtilValidate.isEmpty(dataResourceId)) {    Debug.logError("dataResourceId is null.",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentDataResourceIsNull",locale));  }  String textData=(String)context.get("textData");  if (Debug.verboseOn()) {    Debug.logVerbose("in updateElectronicText, textData:" + textData,module);  }  try {    electronicText=EntityQuery.use(delegator).from("ElectronicText").where("dataResourceId",dataResourceId).queryOne();    if (electronicText != null) {      electronicText.put("textData",textData);      electronicText.store();    } else {      electronicText=delegator.makeValue("ElectronicText");      electronicText.put("dataResourceId",dataResourceId);      electronicText.put("textData",textData);      electronicText.create();    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentElectronicTextNotFound",locale) + " " + e.getMessage());  }  return result;}  }
class C{  @Override public void onWebDriverClosed(boolean terminated){  reset();}  }
class C{  public static boolean isSimpleName(String name){  return reSimpleName.matcher(name).matches();}  }
class C{  public static boolean sameProxyClass(Object proxy1,Object proxy2){  return (proxy1.getClass() == proxy2.getClass() || (Proxy.isProxyClass(proxy2.getClass()) && equalInterfaces(proxy1,proxy2)));}  }
class C{  private boolean initializeAuthority(String p_uriSpec){  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  boolean hasPort=false;  if (index < end) {    if (p_uriSpec.charAt(start) == '[') {      int bracketIndex=p_uriSpec.indexOf(']',start);      index=(bracketIndex != -1) ? bracketIndex : end;      if (index + 1 < end && p_uriSpec.charAt(index + 1) == ':') {        ++index;        hasPort=true;      } else {        index=end;      }    } else {      int colonIndex=p_uriSpec.lastIndexOf(':',end);      index=(colonIndex > start) ? colonIndex : end;      hasPort=(index != end);    }  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (hasPort) {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        try {          port=Integer.parseInt(portStr);          if (port == -1)           --port;        } catch (        NumberFormatException nfe) {          port=-2;        }      }    }  }  if (isValidServerBasedAuthority(host,port,userinfo)) {    m_host=host;    m_port=port;    m_userinfo=userinfo;    return true;  } else   if (isValidRegistryBasedAuthority(p_uriSpec)) {    m_regAuthority=p_uriSpec;    return true;  }  return false;}  }
class C{  public static ResourcesPoet create(File file){  init();  try {    Document document=sDocumentBuilder.parse(file);    Element resources;    NodeList list=document.getElementsByTagName(ELEMENT_RESOURCES);    if (list == null || list.getLength() == 0) {      resources=document.createElement(ELEMENT_RESOURCES);      document.appendChild(resources);    } else {      resources=(Element)list.item(0);    }    return create(document,resources);  } catch (  IOException|SAXException e) {    throw new IllegalStateException("Unable to parse the resource file you passed. Make sure it is properly formatted",e);  }}  }
class C{  protected void initSentenceRepresentationFilter(){  if (SentenceRepresentationFilter == null)   SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  private boolean isErrorResponse(final SoapMessage msg){  final Map<String,List<String>> headers=(Map<String,List<String>>)msg.get(Message.PROTOCOL_HEADERS);  final List<String> strings=headers.get("X-Backside-Transport");  for (  final String header : strings) {    final List<String> split=Arrays.asList(header.split(" "));    if (split.contains("FAIL")) {      return true;    }  }  return false;}  }
class C{  protected AudioEditAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      value=jo.opt(key);      if (value == null) {        value="";      }      string=value instanceof String ? (String)value : null;      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  public boolean isCollapsed(){  return collapsed;}  }
class C{  public boolean lazy_pts(){  return soot.PhaseOptions.getBoolean(options,"lazy-pts");}  }
class C{  public int addDecoration(int pieceIndex,Decoration decoration,boolean updateSkills){  Log.v("ASB","Adding decoration at piece index " + pieceIndex);  if (getAvailableSlots(pieceIndex) >= decoration.getNumSlots()) {    int i=0;    while (decorations[pieceIndex][i] != null) {      i++;    }    decorations[pieceIndex][i]=decoration;    if (decoration.getNumSlots() == 2) {      decorations[pieceIndex][i + 1]=dummyDecoration;    } else     if (decoration.getNumSlots() == 3) {      decorations[pieceIndex][i + 1]=dummyDecoration;      decorations[pieceIndex][i + 2]=dummyDecoration;    }    if (updateSkills) {      updateSkillTreePointsSets();    }    return i;  } else {    Log.e("ASB","Cannot add that decoration!");    return -1;  }}  }
class C{  static void commitGuideline(NlModel model,@NotNull AttributesTransaction component,@NotNull Guideline guideline){  int behaviour=guideline.getRelativeBehaviour();  WidgetCompanion companion=(WidgetCompanion)guideline.getCompanionWidget();  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_BEGIN,null);  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_END,null);  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_PERCENT,null);  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_DEPRECATED_GUIDE_PERCENT,null);  String previousValue=companion.getWidgetProperties().getGuidelineAttribute();  if (previousValue != null && !previousValue.startsWith("@")) {    previousValue=null;  }  String value=previousValue;  if (behaviour == Guideline.RELATIVE_PERCENT) {    boolean useFloat=useGuidelineFloat(model);    if (value == null) {      float percent=guideline.getRelativePercent();      if (useFloat) {        value=String.valueOf(percent);      } else {        value=String.valueOf((int)(percent * 100));      }    }    String percentAttribute=useFloat ? SdkConstants.LAYOUT_CONSTRAINT_GUIDE_PERCENT : SdkConstants.LAYOUT_CONSTRAINT_DEPRECATED_GUIDE_PERCENT;    component.setAttribute(SdkConstants.SHERPA_URI,percentAttribute,value);  } else   if (behaviour == Guideline.RELATIVE_BEGIN) {    if (value == null) {      value=String.format(SdkConstants.VALUE_N_DP,guideline.getRelativeBegin());    }    component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_BEGIN,value);  } else   if (behaviour == Guideline.RELATIVE_END) {    if (value == null) {      value=String.format(SdkConstants.VALUE_N_DP,guideline.getRelativeEnd());    }    component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_END,value);  }}  }
class C{  private void updateFields(TimePeriodPanel panel){  if (panel == null) {    return;  }  if (panel.areFieldsConfigured()) {    boolean dateEnabled=panel.dateRadioButton.isSelected();    panel.datePicker.setEnabled(dateEnabled);    panel.timePicker.setEnabled(dateEnabled);    if (panel.durationRadioButton.isSelected()) {      panel.dateCheckbox.setEnabled(true);      boolean durationDateEnabled=panel.dateCheckbox.isSelected();      panel.yearSpinner.setEnabled(durationDateEnabled);      panel.monthSpinner.setEnabled(durationDateEnabled);      panel.daySpinner.setEnabled(durationDateEnabled);      panel.timeCheckbox.setEnabled(true);      boolean durationTimeEnabled=panel.timeCheckbox.isSelected();      panel.hourSpinner.setEnabled(durationTimeEnabled);      panel.minuteSpinner.setEnabled(durationTimeEnabled);      panel.secondSpinner.setEnabled(durationTimeEnabled);    } else {      panel.dateCheckbox.setEnabled(false);      panel.yearSpinner.setEnabled(false);      panel.monthSpinner.setEnabled(false);      panel.daySpinner.setEnabled(false);      panel.timeCheckbox.setEnabled(false);      panel.hourSpinner.setEnabled(false);      panel.minuteSpinner.setEnabled(false);      panel.secondSpinner.setEnabled(false);    }  }}  }
class C{  private static void createFlattenedListFromMap(List<Distributable> blockInfos,List<NodeBlockRelation> flattenedList,Set<Distributable> uniqueBlocks,Set<String> nodeList){  for (  Distributable blockInfo : blockInfos) {    uniqueBlocks.add(blockInfo);    for (    String eachNode : blockInfo.getLocations()) {      NodeBlockRelation nbr=new NodeBlockRelation(blockInfo,eachNode);      flattenedList.add(nbr);      nodeList.add(eachNode);    }  }}  }
class C{  public boolean equals(Object o){  return ReferentUuids.compare(this,o);}  }
class C{  public static Zmat bai(Zmat B,Zmat A) throws JampackException {  Zludpp LU;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nc)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.LU == null)     A.LU=new Zludpp(A);    LU=A.LU;  } else   LU=new Zludpp(A);  return H.o(Solve.ahib(A,H.o(B)));}  }
class C{  public AdamsBashforthFieldIntegrator(final Field<T> field,final int nSteps,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance) throws IllegalArgumentException {  super(field,METHOD_NAME,nSteps,nSteps,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathGreaterEqual(String path,Comparable<?> value){  return path(path,greaterEqual(value));}  }
class C{  public DataChangeEvent(Set<X> current,Set<X> added,Set<X> removed){  this.current=current == null ? EMPTY_SET : current;  this.added=added == null ? EMPTY_SET : added;  this.removed=removed == null ? EMPTY_SET : removed;}  }
class C{  public Type type(){  return type;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  private static void scan(String path) throws Exception {  log.info("begin scan jar from path:" + path);  List<String> jarPathList=null;  if (path == null) {    String classpath=System.getProperty("java.class.path");    String[] paths=classpath.split(Constants.PATH_SEPARATOR);    jarPathList=FileUtil.getFirstPath(paths);  } else {    jarPathList=FileUtil.getFirstPath(path);  }  if (jarPathList == null) {    throw new Exception("no jar fonded from path: " + path);  }  for (  String jpath : jarPathList) {    Set<Class> clsSet=new HashSet<Class>();    if (jpath.endsWith(".class")) {      String className=jpath.substring(0,jpath.length() - 6).replace(Constants.FILE_SEPARATOR,".");      try {        Class c=Thread.currentThread().getContextClassLoader().loadClass(className);        clsSet.add(c);      } catch (      Exception e) {        log.error("class not found,class:" + jpath,e);      }    } else {      try {        clsSet=ClassUtil.getClassFromJar(jpath);      } catch (      Exception ex) {        log.error("getClassFromJar",ex);      }    }    if (clsSet == null) {      continue;    }    for (    Class<?> cls : clsSet) {      try {        ServiceAnnotation behavior=cls.getAnnotation(ServiceAnnotation.class);        if (behavior != null) {          Object instance=cls.newInstance();          String serviceName=behavior.name();          if (serviceName == null || serviceName.equals("")) {            serviceName=cls.getSimpleName();          }          cachedInstances.put(serviceName,instance);        }      } catch (      Exception ex) {        log.error("",ex);      }    }  }  log.info("finish scan jar");}  }
class C{  public static ControlTagCacheObject createTestSubEquipmentAlive(){  ControlTagCacheObject cacheObject=new ControlTagCacheObject(new Long(5000300),"Test subequipment alive tag","Long",DataTagConstants.MODE_TEST);  cacheObject.setDescription("test alive description");  cacheObject.setLogged(false);  cacheObject.setUnit("seconds since 1970");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(new Long(System.currentTimeMillis()));  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setMinValue(Long.MIN_VALUE);  cacheObject.setMaxValue(Long.MAX_VALUE);  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  return cacheObject;}  }
class C{  public static int absoluteMax(int[] intArray){  int max=Integer.MIN_VALUE;  for (int i=0; i < intArray.length; i++) {    if (Math.abs(intArray[i]) > max && intArray[i] != 0) {      max=intArray[i];    }  }  return max == Integer.MIN_VALUE ? 0 : max;}  }
class C{  public void addHeaderView(@NonNull View view){  mNavigationView.addHeaderView(view);}  }
class C{  public boolean isCellEditable(int row){  return !m_readOnly;}  }
class C{  @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200383,num0,skillname);}  }
class C{  public Zmat bq(Zmat B) throws JampackException {  if (B.nrow != ncol) {    throw new JampackException("Inconsistent dimensions.");  }  return (H.o(qhb(H.o(B))));}  }
class C{  public static void removeCredentials(String url){  server2Credentials.remove(url);}  }
class C{  private File createTempFile(JarEntryInfo inf) throws JarClassLoaderException {  if (dirTemp == null) {    File dir=new File(System.getProperty("java.io.tmpdir"),TMP_SUB_DIRECTORY);    if (!dir.exists()) {      dir.mkdir();    }    chmod777(dir);    if (!dir.exists() || !dir.isDirectory()) {      throw new JarClassLoaderException("Cannot create temp directory " + dir.getAbsolutePath());    }    dirTemp=dir;  }  File fileTmp=null;  try {    fileTmp=File.createTempFile(inf.getName() + ".",null,dirTemp);    fileTmp.deleteOnExit();    chmod777(fileTmp);    byte[] a_by=inf.getJarBytes();    BufferedOutputStream os=new BufferedOutputStream(new FileOutputStream(fileTmp));    os.write(a_by);    os.close();    return fileTmp;  } catch (  IOException e) {    throw new JarClassLoaderException(String.format("Cannot create temp file '%s' for %s",fileTmp,inf.jarEntry),e);  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public Shape triangle_right(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y + height);  m_path.lineTo(x + height,y + height / 2);  m_path.lineTo(x,y);  m_path.closePath();  return m_path;}  }
class C{  private void initializeSoot(){  Options.v().set_no_bodies_for_excluded(true);  Options.v().set_allow_phantom_refs(true);  Options.v().set_output_format(Options.output_format_none);  Options.v().set_whole_program(true);  if (!JadeCfg.isEnable_apklibs())   Options.v().set_process_dir(Collections.singletonList(apkFileLocation)); else {    ArrayList<String> paths=new ArrayList<>();    paths.add(apkFileLocation);    File addtionLibPath=new File(JadeCfg.APK_LIBPATH);    if (addtionLibPath.isDirectory()) {      for (      File file : addtionLibPath.listFiles()) {        paths.add(file.getAbsolutePath());      }    }    Options.v().set_process_dir(paths);  }  if (JadeCfg.isEnable_apklibs()) {    forceAndroidJar=true;    if (!androidJar.endsWith(".jar"))     androidJar=Scene.v().getAndroidJarPath(androidJar,apkFileLocation);  }  Options.v().set_soot_classpath(forceAndroidJar ? androidJar : Scene.v().getAndroidJarPath(androidJar,apkFileLocation));  if (forceAndroidJar)   Options.v().set_force_android_jar(androidJar); else   Options.v().set_android_jars(androidJar);  Options.v().set_src_prec(Options.src_prec_apk);  Main.v().autoSetOptions();switch (callgraphAlgorithm) {case AutomaticSelection:    Options.v().setPhaseOption("cg.spark","on");  break;case RTA:Options.v().setPhaseOption("cg.spark","on");Options.v().setPhaseOption("cg.spark","rta:true");break;case VTA:Options.v().setPhaseOption("cg.spark","on");Options.v().setPhaseOption("cg.spark","vta:true");break;default :throw new RuntimeException("Invalid callgraph algorithm");}Scene.v().loadNecessaryClasses();}  }
class C{  private void photoCameraIntent(){  String nomeFoto=DateFormat.format("yyyy-MM-dd_hhmmss",new Date()).toString();  filePathImageCamera=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),nomeFoto + "camera.jpg");  Intent it=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  it.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(filePathImageCamera));  startActivityForResult(it,IMAGE_CAMERA_REQUEST);}  }
class C{  public boolean isAlwaysNullBefore(Unit s,Immediate i){  return getFlowBefore(s).get(i) == NULL;}  }
class C{  public boolean isSingleton(){  return true;}  }
class C{  public void pausePlaying(){  if (this.state == STATE.MEDIA_RUNNING && this.player != null) {    this.player.pause();    this.setState(STATE.MEDIA_PAUSED);  } else {    Log.d(LOG_TAG,"AudioPlayer Error: pausePlaying() called during invalid state: " + this.state.ordinal());    sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getMenuName() == null) ? 0 : getMenuName().hashCode());  result=prime * result + ((getMenuType() == null) ? 0 : getMenuType().hashCode());  result=prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());  result=prime * result + ((getIconcls() == null) ? 0 : getIconcls().hashCode());  result=prime * result + ((getRequest() == null) ? 0 : getRequest().hashCode());  result=prime * result + ((getExpand() == null) ? 0 : getExpand().hashCode());  result=prime * result + ((getSortNo() == null) ? 0 : getSortNo().hashCode());  result=prime * result + ((getIsShow() == null) ? 0 : getIsShow().hashCode());  result=prime * result + ((getPermission() == null) ? 0 : getPermission().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public static RuleTagCacheObject createTestRuleTag(){  RuleTagCacheObject cacheObject=new RuleTagCacheObject(new Long(130),"Junit_test_tag","Integer",DataTagConstants.MODE_TEST,"(#100000 = true)&(#100001 = true)[2],true[3]");  cacheObject.setId(new Long(130));  cacheObject.setName("Junit_test_rule_tag");  cacheObject.setDescription("test rule description");  cacheObject.setMode(DataTagConstants.MODE_TEST);  cacheObject.setDataType("Integer");  cacheObject.setLogged(false);  cacheObject.setUnit("test unit m/sec");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(new Integer(1000));  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setRuleIdsString("");  return cacheObject;}  }
class C{  public int optInt(int index){  return optInt(index,0);}  }
class C{  public boolean isSomeSampleColored(){  for (  String sample : getSampleOrder()) {    if (get(sample,HiddenAttribute.Color) != null)     return true;  }  return false;}  }
class C{  public SwapReadOnlyIterator(ReadOnlyIterator<T> memoryIterator){  this._memoryIterator=memoryIterator;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200340,num0,skillname);}  }
class C{  private void sendAlertmessage(SortedSet<ValidationResult> results,Set<User> users,Date scheduledRunStart){  StringBuilder builder=new StringBuilder();  Map<Importance,Integer> importanceCountMap=countResultsByImportanceType(results);  String subject="Alerts as of " + DateUtils.getLongDateString(scheduledRunStart) + ": High "+ (importanceCountMap.get(Importance.HIGH) == null ? 0 : importanceCountMap.get(Importance.HIGH))+ ", Medium "+ (importanceCountMap.get(Importance.MEDIUM) == null ? 0 : importanceCountMap.get(Importance.MEDIUM))+ ", Low "+ (importanceCountMap.get(Importance.LOW) == null ? 0 : importanceCountMap.get(Importance.LOW));  for (  ValidationResult result : results) {    ValidationRule rule=result.getValidationRule();    builder.append(result.getOrgUnit().getName()).append(" ").append(result.getPeriod().getName()).append(result.getAttributeOptionCombo().isDefault() ? "" : " " + result.getAttributeOptionCombo().getName()).append(LN).append(rule.getName()).append(" (").append(rule.getImportance()).append(") ").append(LN).append(rule.getLeftSide().getDescription()).append(": ").append(result.getLeftsideValue()).append(LN).append(rule.getRightSide().getDescription()).append(": ").append(result.getRightsideValue()).append(LN).append(LN);  }  log.info("Alerting users: " + users.size() + ", subject: "+ subject);  messageService.sendMessage(subject,builder.toString(),null,users);}  }
class C{  public static InetSocketAddress parseSocketAddress(String addr){  String[] parts=addr.split(COLON);  Preconditions.checkArgument(parts.length == 2);  String hostname=parts[0];  int port=Integer.parseInt(parts[1]);  return new InetSocketAddress(hostname,port);}  }
class C{  public SM_QUEST_ACTION(int questId){  this.action=3;  this.questId=questId;}  }
class C{  void removeLocals(){  locals=new HashMultiMap();  backLocals=new HashMultiMap();}  }
class C{  public PhotosReorderAlbumsQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public void onLoadHandler(Item item){  ItemTemplate template=item.getItemTemplate();  if (template.getArmorType() != null) {    if (!validateEquippedArmor(item,true)) {      putItemBackToInventory(item);      return;    }  }  if (template.getWeaponType() != null) {    if (!validateEquippedWeapon(item,true)) {      putItemBackToInventory(item);      return;    }  }  if (template.isTwoHandWeapon()) {    ItemSlot[] oldSlots=ItemSlot.getSlotsFor(item.getEquipmentSlot());    if (oldSlots.length != 2) {      long currentSlot=item.getEquipmentSlot();      if ((item.getEquipmentSlot() & ItemSlot.MAIN_OR_SUB.getSlotIdMask()) != 0) {        item.setEquipmentSlot(ItemSlot.MAIN_OR_SUB.getSlotIdMask());      } else {        item.setEquipmentSlot(ItemSlot.MAIN_OFF_OR_SUB_OFF.getSlotIdMask());      }      if (currentSlot != item.getEquipmentSlot()) {        setPersistentState(PersistentState.UPDATE_REQUIRED);      }      oldSlots=ItemSlot.getSlotsFor(item.getEquipmentSlot());    }    for (    ItemSlot sl : oldSlots) {      if (equipment.containsKey(sl.getSlotIdMask())) {        log.warn("Duplicate equipped item in slot : " + sl.getSlotIdMask() + " "+ owner.getObjectId());        putItemBackToInventory(item);        break;      }      equipment.put(sl.getSlotIdMask(),item);    }    return;  }  if (equipment.containsKey(item.getEquipmentSlot())) {    log.warn("Duplicate equipped item in slot: " + item.getEquipmentSlot() + " "+ owner.getObjectId());    putItemBackToInventory(item);    return;  }  equipment.put(item.getEquipmentSlot(),item);}  }
class C{  protected void synchronizeChildren(){  needsSyncChildren(false);}  }
class C{  public static short readShort(DataInputStream dis,boolean isBigEndian) throws IOException {  if (!isBigEndian) {    return readLittleEndianShort(dis);  } else {    return dis.readShort();  }}  }
class C{  public SiteAdminPage createNewPage(String title,String name,String templateName){  openCreatePageWindow();  createPageWindow.createPage(title,name,templateName);  grid.waitForLoaderNotPresent();  return this;}  }
class C{  protected void keyTyped(char typedChar,int keyCode){  if (this.buttonId != null) {    buttonId.FunctionExt=typedChar;    this.buttonId=null;  } else {    try {      super.keyTyped(typedChar,keyCode);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public DatabaseGetCountriesByIdQuery countryIds(List<Integer> value){  return unsafeParam("country_ids",value);}  }
class C{  static void trackSyncError(@NotNull String errorType,@Nullable String extraInfo){  UsageTracker.getInstance().trackEvent(CATEGORY_GRADLE_SYNC_FAILURE,errorType,extraInfo,null);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  protected Element insertProsodySettings(Element insertHere,FeatureSet featureSet){  if (insertHere == null || featureSet == null)   throw new NullPointerException("I thoroughly dislike getting null arguments!");  boolean haveProsodyInfo=false;  for (  String att : XML2UttBase.PROSODY_ATTRIBUTES) {    if (featureSet.getString(att) != null) {      haveProsodyInfo=true;      break;    }  }  if (!haveProsodyInfo) {    return null;  }  Document doc=insertHere.getOwnerDocument();  Element prosody=MaryXML.createElement(doc,MaryXML.PROSODY);  insertHere.appendChild(prosody);  for (  String att : XML2UttBase.PROSODY_ATTRIBUTES) {    String val=featureSet.getString(att);    if (val != null) {      prosody.setAttribute(att,val);    }  }  return prosody;}  }
class C{  public boolean hit(float x,float y){  return mBounds.contains(x,y);}  }
class C{  public File showOpenDialog(){  return showDialog(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_ME(String value0){  return new SM_SYSTEM_MESSAGE(1300967,value0);}  }
class C{  public ApiJobStoreException(Exception cause,JobRow jobRow){  super(cause);  this.jobRow=jobRow;}  }
class C{  @PickTriggerResult public int fromDocuments(){  return this.fromDocuments(false);}  }
class C{  public boolean isEmpty(){  return lo() - hi() == 2 * S2.M_PI;}  }
class C{  public TObjectShortHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  protected AbstractProjectStructureChange(@NotNull DataNode<T> data) throws IllegalArgumentException {  this(data,DefaultProjectStructureEntityDescriptionBuilder.build(data));}  }
class C{  public static boolean isEmpty(CharSequence data){  return data == null || data.length() == 0;}  }
class C{  public void reloadPreviewContents(){  myPreviewPanel.invalidateGraphicsRenderer();  myPreviewPanel.revalidate();}  }
class C{  public void send(String msg){  this.send(msg,null);}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  private void trimSuccessfulUploads(SQLiteDatabase db){  Cursor c=null;  try {    c=db.rawQuery("delete from " + ProviderTableMeta.UPLOADS_TABLE_NAME + " where "+ ProviderTableMeta.UPLOADS_STATUS+ " == "+ UploadsStorageManager.UploadStatus.UPLOAD_SUCCEEDED.getValue()+ " and "+ ProviderTableMeta._ID+ " not in (select "+ ProviderTableMeta._ID+ " from "+ ProviderTableMeta.UPLOADS_TABLE_NAME+ " where "+ ProviderTableMeta.UPLOADS_STATUS+ " == "+ UploadsStorageManager.UploadStatus.UPLOAD_SUCCEEDED.getValue()+ " order by "+ ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP+ " desc limit "+ MAX_SUCCESSFUL_UPLOADS+ ")",null);    c.moveToFirst();  } catch (  Exception e) {    Log_OC.e(TAG,"Something wrong trimming successful uploads, database could grow more than expected",e);  } finally {    if (c != null) {      c.close();    }  }}  }
class C{  public Builder opacity(Number opacity){  this.opacity=opacity;  return this;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length){  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiconSpan[] oldSpans=text.getSpans(0,textLength,EmojiconSpan.class);  int spanStarts[]=new int[oldSpans.length];  int sp=0;  for (int i=0; i < oldSpans.length; i++) {    int spanStart=text.getSpanStart(oldSpans[i]);    if (spanStart < index)     sp++;    spanStarts[i]=spanStart;  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    if (sp < oldSpans.length) {      int spanStart=spanStarts[sp];      if (spanStart == i) {        int spanEnd=text.getSpanEnd(oldSpans[sp]);        skip=spanEnd - spanStart;        sp++;        continue;      }    }    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0xfe0f) {          int followSkip=Character.charCount(followUnicode);          if (i + skip + followSkip < textLengthToProcess) {            int nextFollowUnicode=Character.codePointAt(text,i + skip + followSkip);            if (nextFollowUnicode == 0x20e3) {              int nextFollowSkip=Character.charCount(nextFollowUnicode);              int tempIcon=getKeyCapEmoji(unicode);              if (tempIcon == 0) {                followSkip=0;                nextFollowSkip=0;              } else {                icon=tempIcon;              }              skip+=(followSkip + nextFollowSkip);            }          }        } else         if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);          int tempIcon=getKeyCapEmoji(unicode);          if (tempIcon == 0) {            followSkip=0;          } else {            icon=tempIcon;          }          skip+=followSkip;        } else         if (sEmojiModifiersMap.get(followUnicode,0) > 0) {          int followSkip=Character.charCount(followUnicode);          String hexUnicode=Integer.toHexString(unicode);          String hexFollowUnicode=Integer.toHexString(followUnicode);          String resourceName="emoji_" + hexUnicode + "_"+ hexFollowUnicode;          int resourceId=0;          if (sEmojisModifiedMap.containsKey(resourceName)) {            resourceId=sEmojisModifiedMap.get(resourceName);          } else {            resourceId=context.getResources().getIdentifier(resourceName,"drawable",context.getApplicationContext().getPackageName());            if (resourceId != 0) {              sEmojisModifiedMap.put(resourceName,resourceId);            }          }          if (resourceId == 0) {            followSkip=0;          } else {            icon=resourceId;          }          skip+=followSkip;        }      }    }    if (icon > 0) {      text.setSpan(new EmojiconSpan(context,icon,emojiSize,emojiAlignment,textSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }}  }
class C{  public Rotation(final Vector3D axis,final double angle,final RotationConvention convention) throws MathIllegalArgumentException {  double norm=axis.getNorm();  if (norm == 0) {    throw new MathIllegalArgumentException(LocalizedGeometryFormats.ZERO_NORM_FOR_ROTATION_AXIS);  }  double halfAngle=convention == RotationConvention.VECTOR_OPERATOR ? -0.5 * angle : +0.5 * angle;  double coeff=FastMath.sin(halfAngle) / norm;  q0=FastMath.cos(halfAngle);  q1=coeff * axis.getX();  q2=coeff * axis.getY();  q3=coeff * axis.getZ();}  }
class C{  public boolean containsSink(Stmt sink){  for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().equals(sink))   return true;  return false;}  }
class C{  public static String restoreAutoSaveList(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (!ProductStoreWorker.autoSaveCart(productStore)) {    return "success";  }  HttpSession session=request.getSession();  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);  if (cart.getWebSiteId() == null) {    cart.setWebSiteId(WebSiteWorker.getWebSiteId(request));  }  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  if (userLogin == null) {    userLogin=(GenericValue)session.getAttribute("autoUserLogin");  }  String autoSaveListId=cart.getAutoSaveListId();  if (autoSaveListId == null) {    try {      autoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());    } catch (    GeneralException e) {      Debug.logError(e,module);    }    cart.setAutoSaveListId(autoSaveListId);  } else   if (userLogin != null) {    String existingAutoSaveListId=null;    try {      existingAutoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());    } catch (    GeneralException e) {      Debug.logError(e,module);    }    if (existingAutoSaveListId != null) {      if (!existingAutoSaveListId.equals(autoSaveListId)) {        cart.setAutoSaveListId(existingAutoSaveListId);        autoSaveListId=existingAutoSaveListId;        cart.setLastListRestore(null);      } else {        return "success";      }    }  }  java.sql.Timestamp lastLoad=cart.getLastListRestore();  boolean okayToLoad=autoSaveListId == null ? false : (lastLoad == null ? true : false);  if (!okayToLoad && lastLoad != null) {    GenericValue shoppingList=null;    try {      shoppingList=EntityQuery.use(delegator).from("ShoppingList").where("shoppingListId",autoSaveListId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (shoppingList != null) {      java.sql.Timestamp lastModified=shoppingList.getTimestamp("lastAdminModified");      if (lastModified != null) {        if (lastModified.after(lastLoad)) {          okayToLoad=true;        }        if (cart.size() == 0 && lastModified.after(cart.getCartCreatedTime())) {          okayToLoad=true;        }      }    }  }  if (okayToLoad) {    String prodCatalogId=CatalogWorker.getCurrentCatalogId(request);    try {      addListToCart(delegator,dispatcher,cart,prodCatalogId,autoSaveListId,false,false,userLogin != null ? true : false);      cart.setLastListRestore(UtilDateTime.nowTimestamp());    } catch (    IllegalArgumentException e) {      Debug.logError(e,module);    }  }  return "success";}  }
class C{  public MessagesGetLongPollServerQuery needPts(Boolean value){  return unsafeParam("need_pts",value);}  }
class C{  public Dictionary(String sName,int iMaxWordSize){  WordDefs=new HashSet();  Name=sName;  MaxWordSize=iMaxWordSize;}  }
class C{  public PhotosSaveMarketPhotoQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,Integer... userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatus.class));  groupId(groupId);  userIds(userIds);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MethodDecl fullCopy(){  MethodDecl tree=(MethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean isConnected(){  return mService != null;}  }
class C{  public void insertAfter(List<E> toInsert,E point){  innerChain.insertAfter(toInsert,point);}  }
class C{  public int addSecondaryEquations(final FieldSecondaryODE<T> secondary){  components.add(secondary);  mapper=new FieldEquationsMapper<T>(mapper,secondary.getDimension());  return components.size();}  }
class C{  public static String toString(JSONObject o) throws JSONException {  StringBuilder sb=new StringBuilder();  sb.append(escape(o.getString("name")));  sb.append("=");  sb.append(escape(o.getString("value")));  if (o.has("expires")) {    sb.append(";expires=");    sb.append(o.getString("expires"));  }  if (o.has("domain")) {    sb.append(";domain=");    sb.append(escape(o.getString("domain")));  }  if (o.has("path")) {    sb.append(";path=");    sb.append(escape(o.getString("path")));  }  if (o.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){  super(client,"market.removeFromAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  albumIds(albumIds);}  }
class C{  public boolean equals(ShoppingCartItem item){  if (item == null)   return false;  return this.equals(item.getProductId(),item.additionalProductFeatureAndAppls,item.attributes,item.prodCatalogId,item.selectedAmount,item.getItemType(),item.getItemGroup(),item.getIsPromo());}  }
