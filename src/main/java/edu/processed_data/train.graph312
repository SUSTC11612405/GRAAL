class C{  public boolean isExceptionHandler(){  return exceptionGen != null;}  }
class C{  private AttributeList cloneAttributeList(AttributeList list){  if (list != null) {    List<Attribute> alist=list.asList();    if (!list.getClass().equals(AttributeList.class)) {      AttributeList newList=new AttributeList(alist.size());      for (      Attribute attribute : alist)       newList.add(cloneAttribute(attribute));      return newList;    } else {      for (int i=0; i < alist.size(); i++) {        Attribute attribute=alist.get(i);        if (!attribute.getClass().equals(Attribute.class)) {          list.set(i,cloneAttribute(attribute));        }      }      return list;    }  }  return list;}  }
class C{  public void test_wrap_ByteBuffer$ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.wrap(bbA,bb);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBucketFill(PlayerBucketFillEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_BREAK)) {    Block evaluating=event.getBlockClicked();    if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,evaluating,event.getPlayer())) {      break;    }  }}  }
class C{  public static String toString(int i){  return IntegralToString.intToString(i);}  }
class C{  public void enteringSteadyStateStatistics(int subpop,final SteadyStateEvolutionState state){  for (int x=0; x < children.length; x++)   if (children[x] instanceof SteadyStateStatisticsForm)   ((SteadyStateStatisticsForm)children[x]).enteringSteadyStateStatistics(subpop,state);}  }
class C{  public void write(char chars[],int start,int length) throws java.io.IOException {  int n=length + start;  for (int i=start; i < n; i++) {    m_os.write(chars[i]);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.910 -0500",hash_original_method="76399CA140680AA49BE7C693D75B5452",hash_generated_method="AE1B956E482E3895DADD3266E599D404") private void readHyperText(){  HyperText hyperText=new HyperText();  hyperText.startChar=mParcel.readInt();  hyperText.endChar=mParcel.readInt();  int len=mParcel.readInt();  byte[] url=mParcel.createByteArray();  hyperText.URL=new String(url,0,len);  len=mParcel.readInt();  byte[] alt=mParcel.createByteArray();  hyperText.altString=new String(alt,0,len);  if (mHyperTextList == null) {    mHyperTextList=new ArrayList<HyperText>();  }  mHyperTextList.add(hyperText);}  }
class C{  public void createWeekScenarioBug10265_UpgradeAndParChange2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-23 00:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS2,3,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"BUG10265_UPG_PARCHG2",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-25 00:00:00"),"MAX_FOLDER_NUMBER","3");  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG2_SERVICE2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS3,0,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.copyParametersAndUpgradeSubscription(basicSetup.getCustomerAdminKey(),subDetails,perUnitService);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 00:00:00"),"MAX_FOLDER_NUMBER","5");  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 07:00:00"),"MAX_FOLDER_NUMBER","7");  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-02 12:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-03 07:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG2",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG2",upgradedSubDetails);}  }
class C{  public void initialize(LagGraph lagGraph){  lagGraph.clearEdges();  List factors=new ArrayList(lagGraph.getFactors());  for (Iterator it=factors.iterator(); it.hasNext(); ) {    String factor=(String)it.next();    LaggedFactor laggedFactor=new LaggedFactor(factor,1);    lagGraph.addEdge(factor,laggedFactor);  }  for (Iterator it=factors.iterator(); it.hasNext(); ) {    String factor=(String)it.next();    int extraEdges=1;    boolean isHousekeeping=RandomUtil.getInstance().nextDouble() * 100 < this.percentHousekeeping;    if (isHousekeeping) {      continue;    }switch (indegreeType) {case CONSTANT:      extraEdges=indegree - 1;    break;case MAX:  extraEdges=RandomUtil.getInstance().nextInt(indegree - 1) + 1;break;case MEAN:extraEdges=RandomUtil.getInstance().nextInt(2 * (indegree - 1) - 1) + 1;break;default :throw new IllegalStateException();}int i=0;while (i < extraEdges) {int lag=RandomUtil.getInstance().nextInt(this.mlag) + 1;int factorIndex=RandomUtil.getInstance().nextInt(lagGraph.getNumFactors());String otherFactor=(String)factors.get(factorIndex);LaggedFactor laggedFactor=new LaggedFactor(otherFactor,lag);if (!lagGraph.existsEdge(factor,laggedFactor)) {lagGraph.addEdge(factor,laggedFactor);++i;}}}}  }
class C{  public List<SourceUnit> listLogsFilesByContainer(String containerId) throws ServiceException {  List<SourceUnit> files=new ArrayList<>();  try {    String logDirectory=getLogDirectory(containerId);    if (logDirectory.equalsIgnoreCase("stdout")) {      files.add(new SourceUnit("stdout"));      return files;    }    String containerName=dockerService.getContainerNameFromId(containerId);    final String command="find " + logDirectory + " -type f ! -size 0 ";    String execOutput=dockerService.execCommand(containerName,command);    if (execOutput != null && execOutput.contains("cannot access") == false) {      if (logger.isDebugEnabled()) {        logger.debug(execOutput);      }      StringTokenizer lignes=new StringTokenizer(execOutput,"\n");      while (lignes.hasMoreTokens()) {        String name=lignes.nextToken();        name=name.substring(name.lastIndexOf("/") + 1);        SourceUnit sourceUnit=new SourceUnit(name);        files.add(sourceUnit);      }    }  } catch (  FatalDockerJSONException e) {    throw new ServiceException("Error in listByContainerIdAndPath",e);  }  return files;}  }
class C{  public static void writeValueInfoToFile(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + VALUE_INFO_FILE_NAME);    Set<MethodModel> entryPoints=securitySpecModel.getEntryPoints();    SortedSet<MethodModel> allMethods=new TreeSet<MethodModel>(new MethodP2Comparator());    allMethods.addAll(entryPoints);    for (    MethodModel entryPoint : entryPoints) {      allMethods.addAll(securitySpecModel.getOutputEvents(entryPoint));    }    for (    MethodModel method : allMethods) {      StringBuffer buf=new StringBuffer();      String receiverValue=method.getReceiverValue();      if (receiverValue != null && !receiverValue.isEmpty()) {        buf.append("<receiver>");        buf.append(receiverValue);        buf.append("\n\n");      }      List<String> args=method.getMethodArguments();      for (int i=0; i < args.size(); i++) {        String argValue=method.getArgumentValue(i);        if (argValue != null && !argValue.isEmpty()) {          buf.append("<argument " + (i + 1) + "> : "+ args.get(i)+ "\n");          buf.append(argValue);          buf.append("\n\n");        }      }      if (buf.length() > 0) {        fw.write(method.getSignature() + "\n");        fw.write(buf.toString());      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing points-to info file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  public boolean hasError(int error){  boolean rval=(0 <= error && error < SslError.SSL_MAX_ERROR);  if (rval) {    rval=((mErrors & (0x1 << error)) != 0);  }  return rval;}  }
class C{  public Object borrowConnection() throws PoolException {  return connPoolCache.getPooledConnectionFromPool();}  }
class C{  @ExpectWarning("FI_EXPLICIT_INVOCATION") void bug(FI_EXPLICIT_INVOCATION any) throws Throwable {  any.finalize();}  }
class C{  public int size(){  return attributes.size();}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public Page(Collection<? extends ITEM_T> items,long itemsBefore,int pageSize,long totalCount){  requireNonNull(items,"Required non-null items");  this.items=new ArrayList<>(items);  checkArgument(itemsBefore >= 0,"Required non-negative value of items before");  this.itemsBefore=itemsBefore;  checkArgument(pageSize > 0,"Required positive value of page size");  this.pageSize=pageSize;  checkArgument(totalCount >= 0,"Required non-negative value of total items");  this.totalCount=totalCount;}  }
class C{  public RequestLoggingFilterWrapper(HttpServletRequest request) throws IOException {  super(request);  if (LOGGER.isDebugEnabled()) {    InputStream inputStream=null;    try {      inputStream=request.getInputStream();      if (inputStream != null) {        payload=IOUtils.toByteArray(request.getInputStream());      }    }  finally {      if (inputStream != null) {        try {          inputStream.close();        } catch (        IOException iox) {          LOGGER.warn("Unable to close request input stream.",iox);        }      }    }  }}  }
class C{  @Override public final V remove(Object key){  return removeFromDataIndexOfKey(getDataIndexOfKey(key));}  }
class C{  public void doOpen(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void clearCache(){synchronized (this.metadataReaderCache) {    this.metadataReaderCache.clear();  }}  }
class C{  public static void main(String[] args){  runEvaluator(new ReliefFAttributeEval(),args);}  }
class C{  public Property createProperty(){  PropertyImpl property=new PropertyImpl();  return property;}  }
class C{  public ShowWeightsAction(final NetworkPanel networkPanel){  super("Loose Weights Visible");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Show weights in GUI (Use 5 to toggle)");}  }
class C{  public Locator2Impl(){}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  name="";  description="";  op=null;  uniqueId=null;  params=new Hashtable();  useDefaults=new Hashtable();  for (Iterator i=(new SolverParameterDefDAO()).findAll().iterator(); i.hasNext(); ) {    SolverParameterDef def=(SolverParameterDef)i.next();    if (!def.isVisible().booleanValue())     continue;    if ("boolean".equals(def.getType()))     params.put(def.getUniqueId(),"false"); else     params.put(def.getUniqueId(),"");    useDefaults.put(def.getUniqueId(),Boolean.FALSE);  }}  }
class C{  public static boolean initLocalFileTree(Config config){  return config.getBooleanValue(LocalFileSystemKeys.initializeFileTree(),true);}  }
class C{  public void addTrack(SoundCloudTrack track,boolean playNow){  checkState();  mPlayerPlaylist.add(track);  for (  CheerleaderPlaylistListener listener : mCheerleaderPlaylistListeners) {    listener.onTrackAdded(track);  }  if (playNow) {    play(mPlayerPlaylist.size() - 1);  }}  }
class C{  public ComparableCircle(double radius){  super(radius);}  }
class C{  @Override public String toString(){  return "cudaMipmappedArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static Builder builder(SortedLockCollection<LockDescriptor> locks){  return new Builder(locks);}  }
class C{  private void mergeRemoteAndLocalMembership(NodeGroupState localState,NodeGroupState remotePeerState,EnumSet<NodeGroupChange> changes){  if (localState == null) {    return;  }  boolean isSelfPatch=remotePeerState.documentOwner.equals(getHost().getId());  long now=Utils.getNowMicrosUtc();  NodeState selfEntry=localState.nodes.get(getHost().getId());  for (  NodeState remoteEntry : remotePeerState.nodes.values()) {    NodeState currentEntry=localState.nodes.get(remoteEntry.id);    boolean isLocalNode=remoteEntry.id.equals(getHost().getId());    if (!isSelfPatch && isLocalNode) {      if (remoteEntry.status != currentEntry.status) {        logWarning("Peer %s is reporting us as %s, current status: %s",remotePeerState.documentOwner,remoteEntry.status,currentEntry.status);        if (remoteEntry.documentVersion > currentEntry.documentVersion) {          currentEntry.documentVersion=remoteEntry.documentVersion;          currentEntry.documentUpdateTimeMicros=now;          changes.add(NodeGroupChange.SELF_CHANGE);        }      }      continue;    }    if (currentEntry == null) {      boolean hasExpired=remoteEntry.documentExpirationTimeMicros > 0 && remoteEntry.documentExpirationTimeMicros < now;      if (hasExpired || NodeState.isUnAvailable(remoteEntry,null)) {        continue;      }      if (!isLocalNode) {        logInfo("Adding new peer %s (%s), status %s",remoteEntry.id,remoteEntry.groupReference,remoteEntry.status);      }      localState.nodes.put(remoteEntry.id,remoteEntry);      changes.add(NodeGroupChange.PEER_ADDED);      continue;    }    boolean needsUpdate=currentEntry.status != remoteEntry.status || currentEntry.membershipQuorum != remoteEntry.membershipQuorum;    if (needsUpdate) {      changes.add(NodeGroupChange.PEER_STATUS_CHANGE);    }    if (isSelfPatch && isLocalNode && needsUpdate) {      currentEntry.documentVersion=Math.max(remoteEntry.documentVersion,currentEntry.documentVersion) + 1;      currentEntry.documentUpdateTimeMicros=Math.max(remoteEntry.documentUpdateTimeMicros,now);      currentEntry.status=remoteEntry.status;      currentEntry.options=remoteEntry.options;      continue;    }    if (remoteEntry.documentVersion < currentEntry.documentVersion) {      logInfo("v:%d - q:%d, v:%d - q:%d , %s - %s (local:%s %d)",currentEntry.documentVersion,currentEntry.membershipQuorum,remoteEntry.documentVersion,remoteEntry.membershipQuorum,currentEntry.id,remotePeerState.documentOwner,getHost().getId(),selfEntry.documentVersion);      continue;    }    if (remoteEntry.documentVersion == currentEntry.documentVersion && needsUpdate) {      if (remoteEntry.documentUpdateTimeMicros < currentEntry.documentUpdateTimeMicros) {        logWarning("Ignoring update for %s from peer %s. Local status: %s, remote status: %s",remoteEntry.id,remotePeerState.documentOwner,currentEntry.status,remoteEntry.status);        continue;      }    }    if (remoteEntry.status == NodeStatus.UNAVAILABLE && currentEntry.documentExpirationTimeMicros == 0 && remoteEntry.documentExpirationTimeMicros == 0) {      remoteEntry.documentExpirationTimeMicros=Utils.fromNowMicrosUtc(localState.config.nodeRemovalDelayMicros);      logInfo("Set expiration at %d for unavailable node %s(%s)",remoteEntry.documentExpirationTimeMicros,remoteEntry.id,remoteEntry.groupReference);      changes.add(NodeGroupChange.PEER_STATUS_CHANGE);      needsUpdate=true;    }    if (remoteEntry.status == NodeStatus.UNAVAILABLE && needsUpdate) {      remoteEntry.documentVersion++;    }    localState.nodes.put(remoteEntry.id,remoteEntry);  }  List<String> missingNodes=new ArrayList<>();  for (  NodeState l : localState.nodes.values()) {    NodeState r=remotePeerState.nodes.get(l.id);    if (!NodeState.isUnAvailable(l,null) || l.id.equals(getHost().getId())) {      continue;    }    long expirationMicros=l.documentExpirationTimeMicros;    if (r != null) {      expirationMicros=Math.max(l.documentExpirationTimeMicros,r.documentExpirationTimeMicros);    }    if (expirationMicros > 0 && now > expirationMicros) {      changes.add(NodeGroupChange.PEER_STATUS_CHANGE);      logInfo("Removing expired unavailable node %s(%s)",l.id,l.groupReference);      missingNodes.add(l.id);    }  }  for (  String id : missingNodes) {    localState.nodes.remove(id);  }  boolean isModified=!changes.isEmpty();  localState.membershipUpdateTimeMicros=Math.max(remotePeerState.membershipUpdateTimeMicros,isModified ? now : localState.membershipUpdateTimeMicros);  if (isModified) {    logInfo("State updated, merge with %s, self %s, %d",remotePeerState.documentOwner,localState.documentOwner,localState.membershipUpdateTimeMicros);    localState.localMembershipUpdateTimeMicros=now;  }}  }
class C{  @Deprecated public AsyncBusinessNoteStoreClient createBusinessNoteStoreClient() throws TException, EDAMUserException, EDAMSystemException {  String authToken=EvernoteSession.getInstance().getAuthToken();  if (mBusinessAuthResult == null || mBusinessAuthResult.getExpiration() < System.currentTimeMillis()) {    mBusinessAuthResult=createUserStoreClient().getClient().authenticateToBusiness(authToken);  }  TEvernoteHttpClient transport=new TEvernoteHttpClient(mBusinessAuthResult.getNoteStoreUrl(),mUserAgent,mTempDir);  TBinaryProtocol protocol=new TBinaryProtocol(transport);  return new AsyncBusinessNoteStoreClient(protocol,protocol,mBusinessAuthResult.getAuthenticationToken(),this);}  }
class C{  public String toString(){  return "" + m_operator;}  }
class C{  public static String format(long ms){  return FORMAT.format(new Date(ms));}  }
class C{  public ObjectReader withType(Class<?> valueType){  return withType(_config.constructType(valueType));}  }
class C{  public static void checkOpen(ExecutionSystem es){  checkArgument(es.isOpen(),"executions system must be open");}  }
class C{  public static double lnGamma(double alpha){  double x=alpha, f=0.0, z;  if (x < 7) {    f=1;    z=x - 1;    while (++z < 7) {      f*=z;    }    x=z;    f=-Math.log(f);  }  z=1 / (x * x);  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;}  }
class C{  public void readJobs(ActivityFacilitiesImpl opportunities,final ActivityFacilitiesImpl parcelsOrZones,final boolean isParcel){  String filename=module.getMATSim4OpusTemp() + InternalConstants.URBANSIM_JOB_DATASET_TABLE + this.year+ InternalConstants.FILE_TYPE_TAB;  Map<Id<ActivityFacility>,? extends ActivityFacility> facilityMap=parcelsOrZones.getFacilities();  try {    BufferedReader reader=IOUtils.getBufferedReader(filename);    String line=reader.readLine();    Map<String,Integer> idxFromKey=HeaderParser.createIdxFromKey(line,InternalConstants.TAB);    int indexJobID=idxFromKey.get(InternalConstants.JOB_ID);    int indexParcelID=-1;    int indexZoneID=idxFromKey.get(InternalConstants.ZONE_ID_WORK);    if (isParcel)     indexParcelID=idxFromKey.get(InternalConstants.PARCEL_ID_WORK);    while ((line=reader.readLine()) != null) {      String[] parts=line.split(InternalConstants.TAB);      Id<ActivityFacility> jobId=Id.create(parts[indexJobID],ActivityFacility.class);      if (isParcel) {        Id<ActivityFacility> parcelId=Id.create(parts[indexParcelID],ActivityFacility.class);        ActivityFacility parcel=facilityMap.get(parcelId);        opportunities.createAndAddFacility(jobId,parcel.getCoord());      } else {        Id zoneId=Id.create(parts[indexZoneID],ActivityFacility.class);        ActivityFacility zone=facilityMap.get(zoneId);        opportunities.createAndAddFacility(jobId,zone.getCoord());      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public EnhancedServer remoteConnection(RemoteConnection connection){  return remoteConnection(null);}  }
class C{  private void updateInstructionMap(){  m_instructionMap.clear();  for (  final INaviViewNode node : m_graph.getRawView().getGraph()) {    if (node instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)node;      for (      final INaviInstruction instruction : cnode.getInstructions()) {        final IAddress address=instruction.getAddress();        m_instructionMap.put(address,instruction);      }    }  }}  }
class C{  public static void main(String[] args){  if (args.length != 3) {    final JFrame jf=new JFrame("AttribVisualization");    AttributeVisualizationPanel ap=new AttributeVisualizationPanel();    try {      Instances ins=new Instances(new FileReader(args[0]));      ap.setInstances(ins);      System.out.println("Loaded: " + args[0] + "\nRelation: "+ ap.m_data.relationName()+ "\nAttributes: "+ ap.m_data.numAttributes());      ap.setAttribute(Integer.parseInt(args[1]));    } catch (    Exception ex) {      ex.printStackTrace();      System.exit(-1);    }    System.out.println("The attributes are: ");    for (int i=0; i < ap.m_data.numAttributes(); i++) {      System.out.println(ap.m_data.attribute(i).name());    }    jf.setSize(500,300);    jf.getContentPane().setLayout(new BorderLayout());    jf.getContentPane().add(ap,BorderLayout.CENTER);    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    jf.setVisible(true);  } else {    System.out.println("Usage: java AttributeVisualizationPanel" + " [arff file] [index of attribute]");  }}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public boolean isDot1X(){  return dot1X;}  }
class C{  void actionItemChanged(int type){  int actionType=_curAction.getType();  if (log.isDebugEnabled()) {    log.debug("actionItemChanged: itemType= " + type + ", actionType= "+ actionType);  }  _actionTypeBox.removeActionListener(_actionTypeListener);  _actionTypePanel.setVisible(false);  _setPanel.setVisible(false);  _shortTextPanel.setVisible(false);  _shortActionString.setText("");  _textPanel.setVisible(false);  _longActionString.setText("");  _namePanel.setVisible(false);  _actionPanel.setVisible(false);  _optionPanel.setVisible(false);  int itemType=Conditional.ACTION_TO_ITEM[actionType];  if (type == Conditional.TYPE_NONE && itemType == Conditional.TYPE_NONE) {    return;  }  _actionTypePanel.setVisible(true);  _actionTypeBox.removeAllItems();  _actionBox.removeAllItems();  if (type != Conditional.TYPE_NONE) {    itemType=type;  }  if (itemType != Conditional.ACTION_TO_ITEM[actionType]) {    actionType=Conditional.ACTION_NONE;  }  if (actionType != Conditional.ACTION_NONE) {    _optionPanel.setVisible(true);  }  _actionTypeBox.addItem("");  _actionNameField.removeActionListener(actionSignalHeadNameListener);  _actionNameField.removeActionListener(actionSignalMastNameListener);switch (itemType) {case Conditional.ITEM_TYPE_TURNOUT:    for (int i=0; i < Conditional.ITEM_TO_TURNOUT_ACTION.length; i++) {      _actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_TURNOUT_ACTION[i]));    }  if ((actionType == Conditional.ACTION_RESET_DELAYED_TURNOUT) || (actionType == Conditional.ACTION_DELAYED_TURNOUT)) {    JPanel p=(JPanel)_shortTextPanel.getComponent(0);    JLabel l=(JLabel)p.getComponent(0);    l.setText(rbx.getString("LabelDelayTime"));    _shortTextPanel.setToolTipText(rbx.getString("DataHintDelayedTurnout"));    _shortTextPanel.setVisible(true);  }JPanel panel=(JPanel)_actionPanel.getComponent(0);JLabel label=(JLabel)panel.getComponent(0);if ((actionType == Conditional.ACTION_SET_TURNOUT) || (actionType == Conditional.ACTION_RESET_DELAYED_TURNOUT) || (actionType == Conditional.ACTION_DELAYED_TURNOUT)) {label.setText(rbx.getString("LabelActionTurnout"));_actionBox.addItem(Bundle.getMessage("TurnoutStateClosed"));_actionBox.addItem(Bundle.getMessage("TurnoutStateThrown"));_actionBox.addItem(Bundle.getMessage("Toggle"));_actionPanel.setToolTipText(rbx.getString("TurnoutSetHint"));_actionPanel.setVisible(true);} else if (actionType == Conditional.ACTION_LOCK_TURNOUT) {label.setText(rbx.getString("LabelActionLock"));_actionBox.addItem(rbx.getString("TurnoutUnlock"));_actionBox.addItem(rbx.getString("TurnoutLock"));_actionBox.addItem(Bundle.getMessage("Toggle"));_actionPanel.setToolTipText(rbx.getString("LockSetHint"));_actionPanel.setVisible(true);}_namePanel.setToolTipText(rbx.getString("NameHintTurnout"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_SENSOR:for (int i=0; i < Conditional.ITEM_TO_SENSOR_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_SENSOR_ACTION[i]));}if ((actionType == Conditional.ACTION_RESET_DELAYED_SENSOR) || (actionType == Conditional.ACTION_DELAYED_SENSOR)) {JPanel p=(JPanel)_shortTextPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelDelayTime"));_shortTextPanel.setToolTipText(rbx.getString("DataHintDelayedTurnout"));_shortTextPanel.setVisible(true);}if ((actionType == Conditional.ACTION_SET_SENSOR) || (actionType == Conditional.ACTION_RESET_DELAYED_SENSOR) || (actionType == Conditional.ACTION_DELAYED_SENSOR)) {JPanel p=(JPanel)_actionPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelActionSensor"));_actionBox.addItem(Bundle.getMessage("SensorStateActive"));_actionBox.addItem(Bundle.getMessage("SensorStateInactive"));_actionBox.addItem(Bundle.getMessage("Toggle"));_actionPanel.setToolTipText(rbx.getString("SensorSetHint"));_actionPanel.setVisible(true);}_namePanel.setToolTipText(rbx.getString("NameHintSensor"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_SIGNALHEAD:_actionNameField.addActionListener(actionSignalHeadNameListener);for (int i=0; i < Conditional.ITEM_TO_SIGNAL_HEAD_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_SIGNAL_HEAD_ACTION[i]));}if (actionType == Conditional.ACTION_SET_SIGNAL_APPEARANCE) {JPanel p=(JPanel)_actionPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelActionSignal"));loadJComboBoxWithSignalAspects(_actionBox,_actionNameField.getText().trim());_actionPanel.setToolTipText(rbx.getString("SignalSetHint"));_actionPanel.setVisible(true);}_namePanel.setToolTipText(rbx.getString("NameHintSignal"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_SIGNALMAST:_actionNameField.addActionListener(actionSignalMastNameListener);for (int i=0; i < Conditional.ITEM_TO_SIGNAL_MAST_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_SIGNAL_MAST_ACTION[i]));}if (actionType == Conditional.ACTION_SET_SIGNALMAST_ASPECT) {JPanel p=(JPanel)_actionPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelSignalAspect"));loadJComboBoxWithMastAspects(_actionBox,_actionNameField.getText().trim());_actionPanel.setToolTipText(rbx.getString("SignalMastSetHint"));_actionPanel.setVisible(true);}_namePanel.setToolTipText(rbx.getString("NameHintSignalMast"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_LIGHT:for (int i=0; i < Conditional.ITEM_TO_LIGHT_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_LIGHT_ACTION[i]));}if (actionType == Conditional.ACTION_SET_LIGHT_INTENSITY) {JPanel p=(JPanel)_shortTextPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelLightIntensity"));_shortTextPanel.setToolTipText(rbx.getString("DataHintLightIntensity"));_shortTextPanel.setVisible(true);} else if (actionType == Conditional.ACTION_SET_LIGHT_TRANSITION_TIME) {JPanel p=(JPanel)_shortTextPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelTransitionTime"));_shortTextPanel.setToolTipText(rbx.getString("DataHintLightTransitionTime"));_shortTextPanel.setVisible(true);} else if (actionType == Conditional.ACTION_SET_LIGHT) {JPanel p=(JPanel)_actionPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelActionLight"));_actionBox.addItem(rbx.getString("LightOn"));_actionBox.addItem(rbx.getString("LightOff"));_actionBox.addItem(Bundle.getMessage("Toggle"));_actionPanel.setToolTipText(rbx.getString("LightSetHint"));_actionPanel.setVisible(true);}_namePanel.setToolTipText(rbx.getString("NameHintLight"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_MEMORY:for (int i=0; i < Conditional.ITEM_TO_MEMORY_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_MEMORY_ACTION[i]));}JPanel p=(JPanel)_shortTextPanel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);if (actionType == Conditional.ACTION_COPY_MEMORY) {_shortTextPanel.setToolTipText(rbx.getString("DataHintToMemory"));l.setText(rbx.getString("LabelMemoryLocation"));} else {_shortTextPanel.setToolTipText(rbx.getString("DataHintMemory"));l.setText(rbx.getString("LabelValue"));}_shortTextPanel.setVisible(true);_namePanel.setToolTipText(rbx.getString("NameHintMemory"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_CLOCK:for (int i=0; i < Conditional.ITEM_TO_CLOCK_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_CLOCK_ACTION[i]));}if (actionType == Conditional.ACTION_SET_FAST_CLOCK_TIME) {p=(JPanel)_textPanel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelSetTime"));_textPanel.setToolTipText(rbx.getString("DataHintTime"));_textPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_LOGIX:for (int i=0; i < Conditional.ITEM_TO_LOGIX_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_LOGIX_ACTION[i]));}_namePanel.setToolTipText(rbx.getString("NameHintLogix"));_namePanel.setVisible(true);break;case Conditional.ITEM_TYPE_WARRANT:for (int i=0; i < Conditional.ITEM_TO_WARRANT_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_WARRANT_ACTION[i]));}_namePanel.setToolTipText(rbx.getString("NameHintWarrant"));_namePanel.setVisible(true);if (actionType == Conditional.ACTION_CONTROL_TRAIN) {p=(JPanel)_actionPanel.getComponent(0);l=(JLabel)p.getComponent(0);_actionBox.addItem(rbx.getString("WarrantHalt"));_actionBox.addItem(rbx.getString("WarrantResume"));_actionBox.addItem(rbx.getString("WarrantAbort"));l.setText(rbx.getString("LabelControlTrain"));_actionPanel.setVisible(true);} else if (actionType == Conditional.ACTION_SET_TRAIN_ID || actionType == Conditional.ACTION_SET_TRAIN_NAME || actionType == Conditional.ACTION_THROTTLE_FACTOR) {p=(JPanel)_shortTextPanel.getComponent(0);l=(JLabel)p.getComponent(0);if (actionType == Conditional.ACTION_SET_TRAIN_ID) {_shortTextPanel.setToolTipText(rbx.getString("DataHintTrainId"));l.setText(rbx.getString("LabelTrainId"));} else if (actionType == Conditional.ACTION_SET_TRAIN_NAME) {_shortTextPanel.setToolTipText(rbx.getString("DataHintTrainName"));l.setText(rbx.getString("LabelTrainName"));} else {_shortTextPanel.setToolTipText(rbx.getString("DataHintThrottleFactor"));l.setText(rbx.getString("LabelThrottleFactor"));}_shortTextPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_OBLOCK:for (int i=0; i < Conditional.ITEM_TO_OBLOCK_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_OBLOCK_ACTION[i]));}_namePanel.setToolTipText(rbx.getString("NameHintOBlock"));_namePanel.setVisible(true);if (actionType == Conditional.ACTION_SET_BLOCK_VALUE) {p=(JPanel)_shortTextPanel.getComponent(0);l=(JLabel)p.getComponent(0);_shortTextPanel.setToolTipText(rbx.getString("DataHintBlockValue"));l.setText(rbx.getString("LabelBlockValue"));_shortTextPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_AUDIO:for (int i=0; i < Conditional.ITEM_TO_AUDIO_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_AUDIO_ACTION[i]));}if (actionType == Conditional.ACTION_PLAY_SOUND) {p=(JPanel)_textPanel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelSetFile"));_textPanel.setToolTipText(rbx.getString("SetHintSound"));_textPanel.setVisible(true);_setPanel.setVisible(true);} else if (actionType == Conditional.ACTION_CONTROL_AUDIO) {p=(JPanel)_actionPanel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelActionAudio"));_actionBox.addItem(rbx.getString("AudioSourcePlay"));_actionBox.addItem(rbx.getString("AudioSourceStop"));_actionBox.addItem(rbx.getString("AudioSourcePlayToggle"));_actionBox.addItem(rbx.getString("AudioSourcePause"));_actionBox.addItem(rbx.getString("AudioSourceResume"));_actionBox.addItem(rbx.getString("AudioSourcePauseToggle"));_actionBox.addItem(rbx.getString("AudioSourceRewind"));_actionBox.addItem(rbx.getString("AudioSourceFadeIn"));_actionBox.addItem(rbx.getString("AudioSourceFadeOut"));_actionBox.addItem(rbx.getString("AudioResetPosition"));_actionPanel.setToolTipText(rbx.getString("SetHintAudio"));_actionPanel.setVisible(true);_namePanel.setToolTipText(rbx.getString("NameHintAudio"));_namePanel.setVisible(true);}break;case Conditional.ITEM_TYPE_SCRIPT:for (int i=0; i < Conditional.ITEM_TO_SCRIPT_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_SCRIPT_ACTION[i]));}if (actionType == Conditional.ACTION_RUN_SCRIPT) {p=(JPanel)_textPanel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelSetFile"));_textPanel.setToolTipText(rbx.getString("SetHintScript"));_textPanel.setVisible(true);_setPanel.setVisible(true);} else if (actionType == Conditional.ACTION_JYTHON_COMMAND) {p=(JPanel)_shortTextPanel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelScriptCommand"));_shortTextPanel.setToolTipText(rbx.getString("SetHintJythonCmd"));_shortTextPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_OTHER:for (int i=0; i < Conditional.ITEM_TO_OTHER_ACTION.length; i++) {_actionTypeBox.addItem(DefaultConditionalAction.getActionTypeString(Conditional.ITEM_TO_OTHER_ACTION[i]));}if (actionType == Conditional.ACTION_TRIGGER_ROUTE) {_namePanel.setToolTipText(rbx.getString("NameHintRoute"));_namePanel.setVisible(true);}break;default :break;}_actionTypeBox.setMaximumSize(_actionTypeBox.getPreferredSize());_actionBox.setMaximumSize(_actionBox.getPreferredSize());_actionTypeListener.setItemType(itemType);_actionTypeBox.addActionListener(_actionTypeListener);if (log.isDebugEnabled()) {log.debug("Exit actionItemChanged size: " + _editActionFrame.getWidth() + " X "+ _editActionFrame.getHeight());}}  }
class C{  public static int estimateTextureMemorySize(int internalFormat,int width,int height,boolean includeMipmaps){  if (width < 0) {    String message=Logging.getMessage("Geom.WidthInvalid",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height < 0) {    String message=Logging.getMessage("Geom.HeightInvalid",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int numPixels=width * height;  if (includeMipmaps) {    int maxLevel=Math.max((int)WWMath.logBase2(width),(int)WWMath.logBase2(height));    for (int level=1; level <= maxLevel; level++) {      int w=Math.max(width >> level,1);      int h=Math.max(height >> level,1);      numPixels+=w * h;    }  }switch (internalFormat) {case GL2.GL_ALPHA4:case GL2.GL_LUMINANCE4:case GL2.GL_INTENSITY4:    return numPixels / 2;case GL2.GL_ALPHA:case GL2.GL_ALPHA8:case GL2.GL_LUMINANCE:case GL2.GL_LUMINANCE8:case GL2.GL_LUMINANCE4_ALPHA4:case GL2.GL_LUMINANCE6_ALPHA2:case GL2.GL_INTENSITY:case GL2.GL_INTENSITY8:case GL2.GL_R3_G3_B2:case GL2.GL_RGBA2:case GL2.GL_SLUMINANCE:case GL2.GL_SLUMINANCE8:  return numPixels;case GL2.GL_ALPHA12:case GL2.GL_LUMINANCE12:case GL2.GL_INTENSITY12:case GL2.GL_RGB4:return 12 * numPixels / 8;case GL2.GL_ALPHA16:case GL2.GL_DEPTH_COMPONENT16:case GL2.GL_LUMINANCE16:case GL2.GL_LUMINANCE_ALPHA:case GL2.GL_LUMINANCE8_ALPHA8:case GL2.GL_LUMINANCE12_ALPHA4:case GL2.GL_INTENSITY16:case GL2.GL_RGB5:case GL2.GL_RGBA4:case GL2.GL_RGB5_A1:case GL2.GL_SLUMINANCE_ALPHA:case GL2.GL_SLUMINANCE8_ALPHA8:return 2 * numPixels;case GL2.GL_DEPTH_COMPONENT:case GL2.GL_DEPTH_COMPONENT24:case GL2.GL_LUMINANCE12_ALPHA12:case GL2.GL_RGB:case GL2.GL_RGB8:case GL2.GL_SRGB:case GL2.GL_SRGB8:return 3 * numPixels;case GL2.GL_DEPTH_COMPONENT32:case GL2.GL_LUMINANCE16_ALPHA16:case GL2.GL_RGB10:case GL2.GL_RGBA:case GL2.GL_RGBA8:case GL2.GL_RGB10_A2:case GL2.GL_SRGB_ALPHA:case GL2.GL_SRGB8_ALPHA8:return 4 * numPixels;case GL2.GL_RGB12:return 36 * numPixels / 8;case GL2.GL_RGB16:case GL2.GL_RGBA12:return 6 * numPixels;case GL2.GL_RGBA16:return 8 * numPixels;case GL2.GL_COMPRESSED_ALPHA:case GL2.GL_COMPRESSED_LUMINANCE:case GL2.GL_COMPRESSED_LUMINANCE_ALPHA:case GL2.GL_COMPRESSED_INTENSITY:case GL2.GL_COMPRESSED_RGB:case GL2.GL_COMPRESSED_RGBA:return 0;default :return 0;}}  }
class C{  public static boolean processKeyBindings(KeyEvent event){  if (event != null) {    if (event.isConsumed()) {      return false;    }    Component component=event.getComponent();    boolean pressed=(event.getID() == KeyEvent.KEY_PRESSED);    if (!isValidKeyEventForKeyBindings(event)) {      return false;    }    while (component != null) {      if (component instanceof JComponent) {        return ((JComponent)component).processKeyBindings(event,pressed);      }      if ((component instanceof Applet) || (component instanceof Window)) {        return JComponent.processKeyBindingsForAllComponents(event,(Container)component,pressed);      }      component=component.getParent();    }  }  return false;}  }
class C{  private static double CallDoubleMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallDoubleMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Double,false);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static String createTypeParameterSignature(String typeParameterName,String[] boundSignatures){  int length=boundSignatures.length;  char[][] boundSignatureChars=new char[length][];  for (int i=0; i < length; i++) {    boundSignatureChars[i]=boundSignatures[i].toCharArray();  }  return new String(createTypeParameterSignature(typeParameterName.toCharArray(),boundSignatureChars));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.475 -0400",hash_original_method="7BBD2FE125A14B4336F98A66912C9079",hash_generated_method="6B291B7CF066ACAB4A37FF3BC6B00BEE") @Override public int available() throws IOException {  try {    return super.available();  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  private void drawHexBorder(Graphics g,Point p,Color col,double pad){  drawHexBorder(g,p,col,pad,1);}  }
class C{  public FastAdapterDialog<Item> withPositiveButton(String text,OnClickListener listener){  return withButton(BUTTON_POSITIVE,text,listener);}  }
class C{  public void addDconst(double d){  if (d == 0.0 || d == 1.0)   addOpcode(14 + (int)d); else   addLdc2w(d);}  }
class C{  private void notifyItemClicked(View view,Node node){  if (mOnItemClickListener != null) {    mOnItemClickListener.onItemClicked(MultiLevelListView.this,view,node.getObject(),node.getItemInfo());  }}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws BadBytecode {  int c=iterator.byteAt(pos);  if (c == INVOKEINTERFACE || c == INVOKESPECIAL || c == INVOKESTATIC || c == INVOKEVIRTUAL) {    int index=iterator.u16bitAt(pos + 1);    String cname=cp.eqMember(methodname,methodDescriptor,index);    if (cname != null && matchClass(cname,clazz.getClassPool())) {      int ntinfo=cp.getMemberNameAndType(index);      pos=match(c,pos,iterator,cp.getNameAndTypeDescriptor(ntinfo),cp);    }  }  return pos;}  }
class C{  public static String join(CharSequence sep,CharSequence... items){  int n=items.length;  int sumOfLengths=sep.length() * n;  for (int i=n; --i >= 0; ) {    sumOfLengths+=items[i].length();  }  StringBuilder sb=new StringBuilder(sumOfLengths);  join(sb,sep,items);  return sb.toString();}  }
class C{  public AfterEvent_ createAfterEvent_(){  AfterEvent_Impl afterEvent_=new AfterEvent_Impl();  return afterEvent_;}  }
class C{  public static SendableStickerMessageBuilder builder(){  return new SendableStickerMessageBuilder();}  }
class C{  public String serialize(TreeNode root){  if (root == null) {    return "#,";  }  String mid=root.val + ",";  String left=serialize(root.left);  String right=serialize(root.right);  mid+=left + right;  return mid;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension cpd;  Dimension mbd;  Dimension tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMinimumSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getJMenuBar() != null) {    mbd=root.getJMenuBar().getMinimumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof SeaGlassRootPaneUI)) {    JComponent titlePane=((SeaGlassRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMinimumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpHeight+ i.top+ i.bottom);}  }
class C{  public TitlePaneMaximizeButtonWindowMaximizedState(){  super("WindowMaximized");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Array _deserializeArray(Element el) throws ConverterException {  Array array=new ArrayImpl();  NodeList list=el.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element)     try {      array.append(_deserialize((Element)node));    } catch (    PageException e) {      throw toConverterException(e);    }  }  return array;}  }
class C{  @Override public void preProcess() throws Exception {  if (m_SplitEvaluator == null) {    throw new Exception("No SplitEvalutor set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  @Override public boolean containsWithinBounds(Object value){  final int result=compareTo(from,value);  return result == 0 || result < 0 && compareTo(to,value) >= 0;}  }
class C{  public void emitStackMap(){  int pc=curCP();  if (!needStackMap)   return;switch (stackMap) {case CLDC:    emitCLDCStackMap(pc,getLocalsSize());  break;case JSR202:emitStackMapFrame(pc,getLocalsSize());break;default :throw new AssertionError("Should have chosen a stackmap format");}if (debugCode) state.dump(pc);}  }
class C{  public long removeUser(final String username){  if (supportsTransactions)   graph.tx().rollback();  try {    final long count=g.V().has(CredentialGraphTokens.PROPERTY_USERNAME,username).sideEffect(drop()).count().next();    if (supportsTransactions)     graph.tx().commit();    return count;  } catch (  Exception ex) {    if (supportsTransactions)     graph.tx().rollback();    throw new RuntimeException(ex);  }}  }
class C{  @Override public void process(Map<K,V> tuple){  addTuple(tuple,numerators);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String kernelMatrixFileTipText(){  return "The file holding the kernel matrix.";}  }
class C{  public void initialize(DSAParams params,SecureRandom random){  if (params == null) {    throw new InvalidParameterException("Params must not be null");  }  DSAParameterSpec spec=new DSAParameterSpec(params.getP(),params.getQ(),params.getG());  initialize0(spec,random);}  }
class C{  public boolean isTargetUnderFlightPath(MovePath flightPath,EntityState targetState){  Coords targetCoords=targetState.getPosition();  for (Enumeration<MoveStep> step=flightPath.getSteps(); step.hasMoreElements(); ) {    Coords stepCoords=step.nextElement().getPosition();    if (targetCoords.equals(stepCoords)) {      return true;    }  }  return false;}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public void writeSyncValue(String storeName,Scope scope,boolean persist,byte[] key,Iterable<Versioned<byte[]>> values) throws PersistException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null) {    store=storeRegistry.register(storeName,scope,persist);  }  store.writeSyncValue(new ByteArray(key),values);}  }
class C{  public static void main(String[] args){  println(spaceTableGuide(4,15,32));}  }
class C{  public Evaluation(){}  }
class C{  public boolean booleanValue(){  return v;}  }
class C{  @Override public void step(MessageLogger logger){  prepareActions();  if (!actions.isEmpty()) {    env.executeAction(null,actions.remove());    actionCount++;    if (actions.isEmpty())     logger.log("Number of Steps: " + actionCount);  }}  }
class C{  public void removeAll(){  int size=getItemCount();  getList().clear();  notifyItemRangeRemoved(0,size);}  }
class C{  private void removeSession(final Session session){  SESSIONS.remove(session);}  }
class C{  public address addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void newCircuit(){  if (editingOK()) {    addCircuitDialog();    if (_currentBlock != null) {      if (_editCircuitFrame == null) {        checkCircuits();        _editor.setSelectionGroup(makeSelectionGroup(_currentBlock,false));        _editor.disableMenus();        TargetPane targetPane=(TargetPane)_editor.getTargetPanel();        targetPane.setSelectGroupColor(_editGroupColor);        targetPane.setHighlightColor(_editGroupColor);        _editCircuitFrame=new EditCircuitFrame(Bundle.getMessage("newCircuitItem"),this,_currentBlock);      }    }  }}  }
class C{  public RDG1(){  super();  setNumAttributes(defaultNumAttributes());  setNumClasses(defaultNumClasses());  setMaxRuleSize(defaultMaxRuleSize());  setMinRuleSize(defaultMinRuleSize());  setNumIrrelevant(defaultNumIrrelevant());  setNumNumeric(defaultNumNumeric());}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  @Override protected boolean isTargetClassName(String className){  ClassNameSplitter splitter=new ClassNameSplitter(className);  return !className.contains("$") && splitter.isValid() && filterPackages.contains(splitter.getFullHostPackageName());}  }
class C{  private static String callMethodAndLine(){  String result="at ";  StackTraceElement thisMethodStack=(new Exception()).getStackTrace()[2];  result+=thisMethodStack.getClassName() + ".";  result+=thisMethodStack.getMethodName();  result+="(" + thisMethodStack.getFileName();  result+=":" + thisMethodStack.getLineNumber() + ")  ";  return result;}  }
class C{  private boolean isWithinDistance(Entity entity,Block block,int x,int y,int z){  Location loc=entity.getLocation();  return Math.abs(loc.getX() - block.getX()) <= x && Math.abs(loc.getY() - block.getY()) <= y && Math.abs(loc.getZ() - block.getZ()) <= z;}  }
class C{  private void log(int level,String msg,@Nullable Throwable e){  String errorInfo=null;  if (e != null)   errorInfo=X.getFullStackTrace(e);  PlatformNativeException e0=X.cause(e,PlatformNativeException.class);  if (ctx != null && e0 != null) {    try (PlatformMemory mem=ctx.memory().allocate()){      PlatformOutputStream out=mem.output();      BinaryRawWriterEx writer=ctx.writer(out);      writer.writeObject(e0.cause());      out.synchronize();      gate.loggerLog(level,msg,category,errorInfo,mem.pointer());    }   } else {    gate.loggerLog(level,msg,category,errorInfo,0);  }}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.209 -0400",hash_original_method="2BB487B18E5FB280D54FBE5684C98468",hash_generated_method="3FE9F51999529E02E83E06DE652589F5") public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public void removeKeys(KeyCode... keyCodes){  for (  KeyCode key : keyCodes) {    removeKey(key);  }}  }
class C{  public static void sendMessage(SearchLoadAndWriteProcessor processor,String regionName,int timeoutMs,CacheEvent event,Set recipients,int action){  NetWriteRequestMessage msg=new NetWriteRequestMessage();  msg.initialize(processor,regionName,timeoutMs,event,action);  msg.setRecipients(recipients);  processor.distributionManager.putOutgoing(msg);}  }
class C{  public void add(DalvInsn insn){  insns.add(insn);  updateInfo(insn);}  }
class C{  public void rollbackCreateVirtualVolumes(URI vplexURI,List<URI> vplexVolumeURIs,String executeStepId,String stepId) throws WorkflowException {  try {    List<List<VolumeInfo>> rollbackData=(List<List<VolumeInfo>>)_workflowService.loadStepData(executeStepId);    if (rollbackData != null) {      WorkflowStepCompleter.stepExecuting(stepId);      StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);      for (      List<VolumeInfo> rollbackList : rollbackData) {        client.deleteVirtualVolume(rollbackList);      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception rollback VPlex Virtual Volume create: " + vae.getLocalizedMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception rollback VPlex Virtual Volume create: " + ex.getLocalizedMessage(),ex);    ServiceError serviceError=VPlexApiException.errors.createVirtualVolumesRollbackFailed(stepId,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  ChoiceFormat other=(ChoiceFormat)obj;  return (Arrays.equals(choiceLimits,other.choiceLimits) && Arrays.equals(choiceFormats,other.choiceFormats));}  }
class C{  public static String format(Flags flags){  StringBuffer buf=new StringBuffer();  buf.append("(");  if (flags.contains(Flags.Flag.ANSWERED)) {    buf.append("\\Answered ");  }  if (flags.contains(Flags.Flag.DELETED)) {    buf.append("\\Deleted ");  }  if (flags.contains(Flags.Flag.DRAFT)) {    buf.append("\\Draft ");  }  if (flags.contains(Flags.Flag.FLAGGED)) {    buf.append("\\Flagged ");  }  if (flags.contains(Flags.Flag.RECENT)) {    buf.append("\\Recent ");  }  if (flags.contains(Flags.Flag.SEEN)) {    buf.append("\\Seen ");  }  if (buf.length() > 1) {    buf.setLength(buf.length() - 1);  }  buf.append(")");  return buf.toString();}  }
class C{  void drawBar(Canvas canvas,float left,float top,float right,float bottom){  canvas.drawRoundRect(new RectF((int)left,(int)top,(int)right,(int)bottom),style.cornerRadius,style.cornerRadius,style.barPaint);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.IF_STATEMENT__EXPRESSION:    return expression != null;case N4JSPackage.IF_STATEMENT__IF_STMT:  return ifStmt != null;case N4JSPackage.IF_STATEMENT__ELSE_STMT:return elseStmt != null;}return super.eIsSet(featureID);}  }
class C{  public ProjectionMap(ProjectionMap other){  map=new LinkedHashMap<>(other.map);}  }
class C{  @Override public final String leftSide(Instances data){  return m_c45S.leftSide(data);}  }
class C{  public void removeKeyListener(int keyCode,ActionListener listener){  if (keyListeners == null) {    return;  }  removeKeyListener(keyCode,listener,keyListeners);}  }
class C{  PolicyEntry(PolicyTool tool,PolicyParser.GrantEntry ge) throws MalformedURLException, NoSuchMethodException, ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, CertificateException, IOException, NoSuchAlgorithmException, UnrecoverableKeyException {  this.tool=tool;  URL location=null;  if (ge.codeBase != null)   location=new URL(ge.codeBase);  this.codesource=new CodeSource(location,(java.security.cert.Certificate[])null);  if (testing) {    System.out.println("Adding Policy Entry:");    System.out.println("    CodeBase = " + location);    System.out.println("    Signers = " + ge.signedBy);    System.out.println("    with " + ge.principals.size() + " Principals");  }  this.grantEntry=ge;}  }
class C{  public boolean isSparseInput(){  return sparseInput;}  }
class C{  static private WbXmlDefinition loadDefinition(Properties props){  String name=props.getProperty(PROP_WBXML_NAME);  long publicId=Long.decode(props.getProperty(PROP_WBXML_PUBLIC_ID));  String xmlPublicId=props.getProperty(PROP_WBXML_XML_PUBLIC_IDENTIFIER);  String xmlUriRef=props.getProperty(PROP_WBXML_XML_URI_REFERENCE);  String clazz=props.getProperty(PROP_WBXML_CLASS_ELEMENT);  WbXmlDefinition def=new WbXmlDefinition(name,publicId,xmlPublicId,xmlUriRef,clazz);  for (  String key : props.stringPropertyNames()) {    if (key.startsWith(PROP_WBXML_TAG_PREFIX)) {      WbXmlTagDef tag=getTagDefinition(key,props.getProperty(key));      if (tag != null) {        def.addTag(tag);      }    } else     if (key.startsWith(PROP_WBXML_NAMESPACE_PREFIX)) {      WbXmlNamespaceDef ns=getNamespaceDefinition(key,props.getProperty(key));      if (ns != null) {        def.addNamespace(ns);      }    } else     if (key.startsWith(PROP_WBXML_ATTR_PREFIX) && !key.endsWith(PROP_WBXML_VALUE_SUFFIX)) {      WbXmlAttributeDef attr=getAttrDefinition(props,key,props.getProperty(key));      if (attr != null) {        def.addAttr(attr);      }    } else     if (key.startsWith(PROP_WBXML_ATTR_VALUE_PREFIX) && !key.endsWith(PROP_WBXML_VALUE_SUFFIX)) {      WbXmlAttributeValueDef attrVal=getAttrValueDefinition(props,key,props.getProperty(key));      if (attrVal != null) {        def.addAttrValue(attrVal);      }    } else     if (key.startsWith(PROP_WBXML_EXT_PREFIX) && !key.endsWith(PROP_WBXML_VALUE_SUFFIX)) {      WbXmlExtensionDef ext=getExtDefinition(props,key,props.getProperty(key));      if (ext != null) {        def.addExtension(ext);      }    } else     if (key.startsWith(PROP_WBXML_OPAQUE_ATTR_PREFIX)) {      addOpaqueAttrPlugin(def,props,key,props.getProperty(key));    } else     if (key.startsWith(PROP_WBXML_OPAQUE_TAG_PREFIX)) {      addOpaqueTagPlugin(def,props,key,props.getProperty(key));    } else     if (key.startsWith(PROP_WBXML_LINKED_DEF)) {      addLinkedDefinition(def,props.getProperty(key));    }  }  String root=props.getProperty(PROP_WBXML_ROOT_ELEMENT);  def.setRoot(root);  return def;}  }
class C{  public boolean isPaused(){  return pauseController.isPaused();}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  if (session.getHandlerState() == POP3Session.TRANSACTION) {    int num=0;    try {      num=Integer.parseInt(request.getArgument());    } catch (    Exception e) {      return SYNTAX_ERROR;    }    try {      MessageMetaData meta=MessageMetaDataUtils.getMetaData(session,num);      if (meta == null) {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");        return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }      List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);      String uid=meta.getUid();      if (deletedUidList.contains(uid)) {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") already deleted.");        return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      } else {        deletedUidList.add(uid);        return DELETED;      }    } catch (    IndexOutOfBoundsException iob) {      StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");      return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());    }  } else {    return POP3Response.ERR;  }}  }
class C{  private static void printCloudletList(List<Cloudlet> list) throws IOException {  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cmd=getString(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.removeCommand(remoteName,cmd);      tun.saveChanges();    }  }  return null;}  }
class C{  private static void copySwap(Object[] src,int from,Object[] dst,int to,int len){  if (src == dst && from + len > to) {    int new_to=to + len - 1;    for (; from < to; from++, new_to--, len--) {      dst[new_to]=src[from];    }    for (; len > 1; from++, new_to--, len-=2) {      swap(from,new_to,dst);    }  } else {    to=to + len - 1;    for (; len > 0; from++, to--, len--) {      dst[to]=src[from];    }  }}  }
class C{  @Override public void glBindFramebufferOES(int target,int framebuffer){  mGL11ExtPack.glBindFramebufferOES(target,framebuffer);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public void clear(){  for (int i=0; i < components.length; i++)   components[i]=0;}  }
class C{  @Kroll.method public boolean requestPermissions(@Kroll.argument String[] requestedPerms,@Kroll.argument(optional=true) KrollFunction permissionCallback,@Kroll.argument(optional=true) Integer requestCode){  for (  String permission : requestedPerms) {    Log.d(LCAT,"Requesting permission: " + permission);    if (!isValidPermissionString(permission)) {      Log.e(LCAT,"Requested permission is not supported :" + permission);      return false;    }  }  return handleRequest(requestedPerms,requestCode,permissionCallback);}  }
class C{  private void stopTimer(){  if (mCountDown != null) {    mCountDown.cancel();    mCountDown=null;  }}  }
class C{  @Override public void step(int step,Closure closure){}  }
class C{  public static SpreadMap toSpreadMap(List self){  if (self == null)   throw new GroovyRuntimeException("Fail to convert List to SpreadMap, because it is null."); else   if (self.size() % 2 != 0)   throw new GroovyRuntimeException("Fail to convert List to SpreadMap, because it's size is not even."); else   return new SpreadMap(self);}  }
class C{  public void removeAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  public void configureManagers(){  while (!configured) {synchronized (this) {      try {        this.wait();      } catch (      java.lang.InterruptedException ie) {      }    }  }  log.debug("Manager configuration complete for bus " + _bus);}  }
class C{  public JSearchPanel(Visualization vis,String field){  this(vis,Visualization.ALL_ITEMS,field,true);}  }
class C{  public void testDoubles() throws Exception {  double[] values=new double[]{Double.NEGATIVE_INFINITY,-2.3E25,-1.0E15,-1.0,-1.0E-1,-1.0E-2,-0.0,+0.0,1.0E-2,1.0E-1,1.0,1.0E15,2.3E25,Double.POSITIVE_INFINITY,Double.NaN};  long[] encoded=new long[values.length];  for (int i=0; i < values.length; i++) {    encoded[i]=NumericUtils.doubleToSortableLong(values[i]);    assertTrue("forward and back conversion should generate same double",Double.compare(values[i],NumericUtils.sortableLongToDouble(encoded[i])) == 0);  }  for (int i=1; i < encoded.length; i++) {    assertTrue("check sort order",encoded[i - 1] < encoded[i]);  }}  }
class C{  public BeanContextSupport(BeanContext peer){  this(peer,Locale.getDefault(),false,true);}  }
class C{  public ZDT3(){  this(30);}  }
class C{  @NotNull public static Map<VirtualFile,List<FilePath>> sortFilePathsByGitRoot(@NotNull Collection<FilePath> files,boolean ignoreNonGit) throws VcsException {  Map<VirtualFile,List<FilePath>> rc=new HashMap<VirtualFile,List<FilePath>>();  for (  FilePath p : files) {    VirtualFile root=getGitRootOrNull(p);    if (root == null) {      if (ignoreNonGit) {        continue;      } else {        throw new VcsException("The file " + p.getPath() + " is not under Git");      }    }    List<FilePath> l=rc.get(root);    if (l == null) {      l=new ArrayList<FilePath>();      rc.put(root,l);    }    l.add(p);  }  return rc;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS10.class,args);}  }
class C{  public DUserNoticeChooser(JDialog parent,String title,UserNotice userNotice){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(userNotice);}  }
class C{  public h5 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void readResponse() throws IOException {  if (userResponse != null) {    return;  }  if (networkRequest == null && cacheResponse == null) {    throw new IllegalStateException("call sendRequest() first!");  }  if (networkRequest == null) {    return;  }  Response networkResponse;  if (forWebSocket) {    httpStream.writeRequestHeaders(networkRequest);    networkResponse=readNetworkResponse();  } else   if (!callerWritesRequestBody) {    networkResponse=new NetworkInterceptorChain(0,networkRequest).proceed(networkRequest);  } else {    if (bufferedRequestBody != null && bufferedRequestBody.buffer().size() > 0) {      bufferedRequestBody.emit();    }    if (sentRequestMillis == -1) {      if (OkHeaders.contentLength(networkRequest) == -1 && requestBodyOut instanceof RetryableSink) {        long contentLength=((RetryableSink)requestBodyOut).contentLength();        networkRequest=networkRequest.newBuilder().header("Content-Length",Long.toString(contentLength)).build();      }      httpStream.writeRequestHeaders(networkRequest);    }    if (requestBodyOut != null) {      if (bufferedRequestBody != null) {        bufferedRequestBody.close();      } else {        requestBodyOut.close();      }      if (requestBodyOut instanceof RetryableSink) {        httpStream.writeRequestBody((RetryableSink)requestBodyOut);      }    }    networkResponse=readNetworkResponse();  }  receiveHeaders(networkResponse.headers());  if (cacheResponse != null) {    if (validate(cacheResponse,networkResponse)) {      userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).headers(combine(cacheResponse.headers(),networkResponse.headers())).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();      networkResponse.body().close();      releaseStreamAllocation();      InternalCache responseCache=Internal.instance.internalCache(client);      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,stripBody(userResponse));      userResponse=unzip(userResponse);      return;    } else {      closeQuietly(cacheResponse.body());    }  }  userResponse=networkResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();  if (hasBody(userResponse)) {    maybeCache();    userResponse=unzip(cacheWritingResponse(storeRequest,userResponse));  }}  }
class C{  private boolean testJDBC(String url,String uid,String pwd){  log.fine("Url=" + url + ", UID="+ uid);  try {    if (s_oracleDriver == null) {      s_oracleDriver=new OracleDriver();      DriverManager.registerDriver(s_oracleDriver);    }    m_con=DriverManager.getConnection(url,uid,pwd);  } catch (  UnsatisfiedLinkError ule) {    log.warning("Check [ORACLE_HOME]/jdbc/Readme.txt for (OCI) driver setup");    log.warning(ule.toString());  }catch (  Exception e) {    log.warning(e.toString());    return false;  }  return true;}  }
class C{  public void addProgram(final List<String> code){  programs.add(code);}  }
class C{  public FunctionScoreQueryBuilder boostMode(CombineFunction combineFunction){  this.boostMode=combineFunction.getName();  return this;}  }
class C{  public JParamsLocationWithStockLevel(){  Font font=new Font("Arial",0,12);  setFont(font);  panel=new JPanel(new MigLayout());  GroupLayout layout=new GroupLayout(this);  setLayout(layout);  layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(panel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addContainerGap(319,Short.MAX_VALUE)));  layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(panel,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));  jLabel1=new JLabel(AppLocal.getIntString("label.warehouse"));  jLabel1.setFont(font);  jLabel2=new JLabel(AppLocal.getIntString("label.stocklevel"));  jLabel2.setFont(font);  m_jstock.setFont(font);  m_jLocation.setFont(font);  jStockLevel.setFont(font);  jStockLevel.setPreferredSize(new Dimension(60,25));  panel.add(jLabel1,"w 80");  panel.add(m_jLocation,"w 220, gapright 5");  panel.add(jLabel2,"w 90");  panel.add(m_jstock,"w 120");  panel.add(jStockLevel,"w 50, gapright 10");}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=stream.putFields();  fields.put("positivePrefix",ndf.getPositivePrefix());  fields.put("positiveSuffix",ndf.getPositiveSuffix());  fields.put("negativePrefix",ndf.getNegativePrefix());  fields.put("negativeSuffix",ndf.getNegativeSuffix());  fields.put("posPrefixPattern",(String)null);  fields.put("posSuffixPattern",(String)null);  fields.put("negPrefixPattern",(String)null);  fields.put("negSuffixPattern",(String)null);  fields.put("multiplier",ndf.getMultiplier());  fields.put("groupingSize",(byte)ndf.getGroupingSize());  fields.put("groupingUsed",ndf.isGroupingUsed());  fields.put("decimalSeparatorAlwaysShown",ndf.isDecimalSeparatorAlwaysShown());  fields.put("parseBigDecimal",ndf.isParseBigDecimal());  fields.put("roundingMode",roundingMode);  fields.put("symbols",symbols);  fields.put("useExponentialNotation",false);  fields.put("minExponentDigits",(byte)0);  fields.put("maximumIntegerDigits",ndf.getMaximumIntegerDigits());  fields.put("minimumIntegerDigits",ndf.getMinimumIntegerDigits());  fields.put("maximumFractionDigits",ndf.getMaximumFractionDigits());  fields.put("minimumFractionDigits",ndf.getMinimumFractionDigits());  fields.put("serialVersionOnStream",4);  stream.writeFields();}  }
class C{  public void collapseRow(int row){  collapsePath(getPathForRow(row));}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x,long length) throws SQLException {  updateClob(columnIndex,x,length);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  private boolean saveLOBDataToDB(){  if (m_items == null || m_items.size() == 0) {    setBinaryData(null);    return true;  }  ByteArrayOutputStream out=new ByteArrayOutputStream();  ZipOutputStream zip=new ZipOutputStream(out);  zip.setMethod(ZipOutputStream.DEFLATED);  zip.setLevel(Deflater.BEST_COMPRESSION);  zip.setComment("adempiere");  try {    for (int i=0; i < m_items.size(); i++) {      MAttachmentEntry item=getEntry(i);      ZipEntry entry=new ZipEntry(item.getName());      entry.setTime(System.currentTimeMillis());      entry.setMethod(ZipEntry.DEFLATED);      zip.putNextEntry(entry);      byte[] data=item.getData();      zip.write(data,0,data.length);      zip.closeEntry();      log.fine(entry.getName() + " - " + entry.getCompressedSize()+ " ("+ entry.getSize()+ ") "+ (entry.getCompressedSize() * 100 / entry.getSize())+ "%");    }    zip.close();    byte[] zipData=out.toByteArray();    log.fine("Length=" + zipData.length);    setBinaryData(zipData);    return true;  } catch (  Exception e) {    log.log(Level.SEVERE,"saveLOBData",e);  }  setBinaryData(null);  return false;}  }
class C{  public void writeText(char text[]) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    HtmlUtils.writeText(writer,true,true,buffer,text);  }}  }
class C{  public void updateTimestamp(){  put(TIMESTAMP,Long.toString(System.currentTimeMillis()));}  }
class C{  public PriorityQueue<E> asMinPriorityQueue(){  PriorityQueue<E> pq=new PriorityQueue<E>(entries.size());  for (  E key : entries.keySet()) {    pq.add(key,-1.0 * entries.getSure(key));  }  return pq;}  }
class C{  public int size(){  return values.size();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Exporting GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String filterTypeTipText(){  return "Determines how/if the data will be transformed.";}  }
class C{  protected void processPacket(Packet packet){  if (packet == null) {    return;  }  for (  PacketCollector collector : getPacketCollectors()) {    collector.processPacket(packet);  }  listenerExecutor.submit(new ListenerNotification(packet));}  }
class C{  public Raster createChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  return createWritableChild(x,y,width,height,x0,y0,bandList);}  }
class C{  public boolean isAcceptable(GeneralName gname){  if (this.tag != gname.getTag()) {    return false;  }switch (this.tag) {case RFC822_NAME:    return ((String)gname.getName()).toLowerCase(Locale.US).endsWith(((String)name).toLowerCase(Locale.US));case DNS_NAME:  String dns=(String)name;String _dns=(String)gname.getName();if (dns.equalsIgnoreCase(_dns)) {return true;} else {return _dns.toLowerCase(Locale.US).endsWith("." + dns.toLowerCase(Locale.US));}case UR_ID:String uri=(String)name;int begin=uri.indexOf("://") + 3;int end=uri.indexOf('/',begin);String host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);uri=(String)gname.getName();begin=uri.indexOf("://") + 3;end=uri.indexOf('/',begin);String _host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);if (host.startsWith(".")) {return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US));} else {return host.equalsIgnoreCase(_host);}case IP_ADDR:byte[] address=(byte[])name;byte[] _address=(byte[])gname.getName();int length=address.length;if (length != 4 && length != 8 && length != 16 && length != 32) {return false;}int _length=_address.length;if (length == _length) {return Arrays.equals(address,_address);} else if (length == 2 * _length) {for (int i=0; i < _address.length; i++) {int octet=_address[i] & 0xff;int min=address[i] & 0xff;int max=address[i + _length] & 0xff;if ((octet < min) || (octet > max)) {return false;}}return true;} else {return false;}case DIR_NAME:case X400_ADDR:case OTHER_NAME:case EDIP_NAME:case REG_ID:return Arrays.equals(getEncoded(),gname.getEncoded());default :}return true;}  }
class C{  private void freeKick(Team offense){  if (gameTime <= 0)   return; else {    if (gameTime < 180 && ((gamePoss && (awayScore - homeScore) <= 8 && (awayScore - homeScore) > 0) || (!gamePoss && (homeScore - awayScore) <= 8 && (homeScore - awayScore) > 0))) {      if (offense.getK(0).ratKickFum * Math.random() > 60 || Math.random() < 0.1) {        gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " successfully executes onside kick! "+ offense.abbr+ " has possession!";        gameYardLine=35;        gameDown=1;        gameYardsNeed=10;      } else {        gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " failed the onside kick and lost possession.";        gamePoss=!gamePoss;        gameYardLine=65;        gameDown=1;        gameYardsNeed=10;      }      gameTime-=4 + 4 * Math.random();    } else {      gameYardLine=(int)(115 - (offense.getK(0).ratKickPow + 20 - 40 * Math.random()));      if (gameYardLine <= 0)       gameYardLine=25;      gameDown=1;      gameYardsNeed=10;      gamePoss=!gamePoss;      gameTime-=15 * Math.random();    }  }}  }
class C{  private void addListeners(){  this.payloadTabsId.getSelectionModel().selectedItemProperty().addListener(null);  this.textFieldNameId.textProperty().addListener(null);  this.textFieldAuthorId.textProperty().addListener(null);  this.textFieldTagsId.textProperty().addListener(null);  this.textFieldDescriptionId.textProperty().addListener(null);}  }
class C{  protected void applyToCategoryItemRenderer(CategoryItemRenderer renderer){  ParamChecks.nullNotPermitted(renderer,"renderer");  if (renderer instanceof AbstractRenderer) {    applyToAbstractRenderer((AbstractRenderer)renderer);  }  renderer.setBaseItemLabelFont(this.regularFont);  renderer.setBaseItemLabelPaint(this.itemLabelPaint);  if (renderer instanceof BarRenderer) {    BarRenderer br=(BarRenderer)renderer;    br.setBarPainter(this.barPainter);    br.setShadowVisible(this.shadowVisible);    br.setShadowPaint(this.shadowPaint);  }  if (renderer instanceof BarRenderer3D) {    BarRenderer3D br3d=(BarRenderer3D)renderer;    br3d.setWallPaint(this.wallPaint);  }  if (renderer instanceof LineRenderer3D) {    LineRenderer3D lr3d=(LineRenderer3D)renderer;    lr3d.setWallPaint(this.wallPaint);  }  if (renderer instanceof StatisticalBarRenderer) {    StatisticalBarRenderer sbr=(StatisticalBarRenderer)renderer;    sbr.setErrorIndicatorPaint(this.errorIndicatorPaint);  }  if (renderer instanceof MinMaxCategoryRenderer) {    MinMaxCategoryRenderer mmcr=(MinMaxCategoryRenderer)renderer;    mmcr.setGroupPaint(this.errorIndicatorPaint);  }}  }
class C{  private LayoutManager createLayoutManager(){  return new XMetalRootLayout();}  }
class C{  public void testFromString() throws Exception {  final URIConverter instance=new URIConverter();  final Object expResult=new URI(TEST_URI_STRING);  final Object result=instance.fromString(TEST_URI_STRING);  assertEquals(expResult,result);}  }
class C{  public void cleanUp(){  if (!this.worldObj.isRemote)   new Thread(cleanThread).run();}  }
class C{  private String convertToCurrent(String configString){  return configString.replaceAll("<headerType>0<","<headerType>gui<").replaceAll("<headerType>1<","<headerType>console<").replaceAll("jarArgs>","cmdLine>").replaceAll("<jarArgs[ ]*/>","<cmdLine/>").replaceAll("args>","opt>").replaceAll("<args[ ]*/>","<opt/>").replaceAll("<dontUsePrivateJres>false</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_PREFER_JRE + "</jdkPreference>").replaceAll("<dontUsePrivateJres>true</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_JRE_ONLY + "</jdkPreference>").replaceAll("<initialHeapSize>0</initialHeapSize>","").replaceAll("<maxHeapSize>0</maxHeapSize>","").replaceAll("<customProcName>.*</customProcName>","");}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsNumber(xctxt));}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  double currentValue;  double newValue;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  if (updateAllIndependently) {    for (int i=0; i < dim; i++) {      currentValue=variable.getValue(i);      newValue=coltNormal.nextDouble(model.getMean().getValue(i),1.0 / Math.sqrt(model.getPrecision().getValue(i)));      logq+=(model.logPdf(currentValue) - model.logPdf(newValue));      if (newValue < bounds.getLowerLimit(i) || newValue > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }      variable.setValue(i,newValue);    }  }  return logq;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.968 -0500",hash_original_method="8D936CCD11169852B60D86BE02120DB8",hash_generated_method="84A17DE28E583D85A533C31812768C46") public boolean match(Object other){  if (other == null)   return true;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObject that=(GenericObject)other;  Class<?> hisclass=other.getClass();  Class<?> myclass=this.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else {          Object myObj=f.get(this);          Object hisObj=g.get(that);          if (hisObj != null && myObj == null)           return false; else           if (hisObj == null && myObj != null)           continue; else           if (hisObj == null && myObj == null)           continue; else           if (hisObj instanceof java.lang.String && myObj instanceof java.lang.String) {            if (((String)hisObj).equals(""))             continue;            if (((String)myObj).compareToIgnoreCase((String)hisObj) != 0)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && GenericObject.isMySubclass(hisObj.getClass()) && myObj.getClass().equals(hisObj.getClass())&& ((GenericObject)hisObj).getMatcher() != null) {            String myObjEncoded=((GenericObject)myObj).encode();            boolean retval=((GenericObject)hisObj).getMatcher().match(myObjEncoded);            if (!retval)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && !((GenericObject)myObj).match(hisObj))           return false; else           if (GenericObjectList.isMySubclass(myObj.getClass()) && !((GenericObjectList)myObj).match(hisObj))           return false;        }      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  public FileVersionOutputStream(BigdataFileSystem repo,String id,int version){  if (repo == null)   throw new IllegalArgumentException();  if (id == null)   throw new IllegalArgumentException();  this.repo=repo;  this.id=id;  this.version=version;  this.buffer=new byte[repo.getBlockSize()];}  }
class C{  @Override public double[] computeLocalUsingPreviousObservations(double states[][]){  return computeLocalUsingPreviousObservations(states,false);}  }
class C{  @Override protected Object typeIdForObject(Object obj) throws CacheException {  if (obj instanceof BinaryObject)   return ((BinaryObjectEx)obj).typeId();  return obj.getClass();}  }
class C{  protected void optimizetSNE(AffinityMatrix pij,double[][] sol){  final int size=pij.size();  if (size * 3L * dim > 0x7FFF_FFFAL) {    throw new AbortException("Memory exceeds Java array size limit.");  }  double[] meta=new double[size * 3 * dim];  final int dim3=dim * 3;  for (int off=2 * dim; off < meta.length; off+=dim3) {    Arrays.fill(meta,off,off + dim,1.);  }  double[][] qij=new double[size][size];  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Iterative Optimization",iterations,LOG) : null;  Duration timer=LOG.isStatistics() ? LOG.newDuration(this.getClass().getName() + ".runtime.optimization").begin() : null;  for (int it=0; it < iterations; it++) {    double qij_sum=computeQij(qij,sol);    computeGradient(pij,qij,qij_sum,sol,meta);    updateSolution(sol,meta,it);    if (it == EARLY_EXAGGERATION_ITERATIONS) {      pij.scale(1. / EARLY_EXAGGERATION);    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  if (timer != null) {    LOG.statistics(timer.end());  }}  }
class C{  private Text text() throws Exception {  return new Text(parser);}  }
class C{  public void putOrderedSet(byte tag,DerEncoder[] set) throws IOException {  putOrderedSet(tag,set,tagOrder);}  }
class C{  @Override public void stop(){  final int port=getPort();  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"stop","Stopping: using port " + port);  }  if ((state == ONLINE) || (state == STARTING)) {    super.stop();    try {      DatagramSocket sn=new DatagramSocket(0);      try {        byte[] ob=new byte[1];        DatagramPacket pk;        if (address != null)         pk=new DatagramPacket(ob,1,address,port); else         pk=new DatagramPacket(ob,1,java.net.InetAddress.getLocalHost(),port);        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"stop","Sending: using port " + port);        }        sn.send(pk);      }  finally {        sn.close();      }    } catch (    Throwable e) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"stop","Got unexpected Throwable",e);      }    }  }}  }
class C{  public Compare(){  super("text_information.compare",2);}  }
class C{  public void testAddPageAudit(){  System.out.println("addPageAudit");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);  AuditServiceThread auditServiceThread=createMockAuditServiceThread(instance);  AuditServiceThreadFactory auditServiceThreadFactory=createMockAuditServiceThreadFactory(auditCommand,auditServiceThread);  instance.setAuditServiceThreadFactory(auditServiceThreadFactory);  instance.addPageAudit(auditCommand);  try {    Thread.sleep(500);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  EasyMock.verify(auditServiceThreadFactory);  EasyMock.verify(auditServiceThread);}  }
class C{  public boolean isVisible(){  return this.visible;}  }
class C{  public boolean isLogSegmentSequenceNumberValidationEnabled(){  return this.getBoolean(BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED,BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED_DEFAULT);}  }
class C{  public RAbstractVector tryFoldConstantTime(RAbstractVector left,int leftLength,RAbstractVector right,int rightLength){  return null;}  }
class C{  public GsonRequest(int type,String url,Class<T> clazz,Map<String,String> headers,Map<String,String> params,Listener<T> listener,ErrorListener errorListener){  super(type,url,errorListener);  this.clazz=clazz;  this.headers=headers;  this.params=params;  this.listener=listener;}  }
class C{  public static String limit(String string,int startAt,int limit){  try {    return string.substring(startAt,startAt + limit);  } catch (  Exception e) {    return string;  }}  }
class C{  private void flushCache(Iterator<Map.Entry<K,StatefulValue<K,V>>> it){  StoreOperation operation=null;  Map<K,StatefulValue<K,V>> batch=null;  Map<K,StatefulValue<K,V>> pending=U.newLinkedHashMap(batchSize);  while (it.hasNext()) {    Map.Entry<K,StatefulValue<K,V>> e=it.next();    StatefulValue<K,V> val=e.getValue();    val.writeLock().lock();    try {      ValueStatus status=val.status();      if (acquired(status))       continue;      if (status == ValueStatus.RETRY)       retryEntriesCnt.decrementAndGet();      assert retryEntriesCnt.get() >= 0;      val.status(ValueStatus.PENDING);      if (operation == null)       operation=val.operation();      if (operation != val.operation()) {        batch=pending;        pending=U.newLinkedHashMap(batchSize);        operation=val.operation();        pending.put(e.getKey(),val);      } else       pending.put(e.getKey(),val);      if (pending.size() == batchSize) {        batch=pending;        pending=U.newLinkedHashMap(batchSize);        operation=null;      }    }  finally {      val.writeLock().unlock();    }    if (batch != null && !batch.isEmpty()) {      applyBatch(batch,true);      batch=null;    }  }  if (!pending.isEmpty())   applyBatch(pending,true);}  }
class C{  public static char[] toCharArray(Long[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].longValue();  }  return result;}  }
class C{  public Extensions generate(){  Extension[] exts=new Extension[extOrdering.size()];  for (int i=0; i != extOrdering.size(); i++) {    exts[i]=(Extension)extensions.get(extOrdering.elementAt(i));  }  return new Extensions(exts);}  }
class C{  public void deleteAttribute(boolean multiple){  if (!isPanelSelected()) {    return;  }  if (multiple) {    getCurrentPanel().deleteAttributes();  } else {    getCurrentPanel().deleteAttribute();  }}  }
class C{  protected Utf16TransformationStrategy(boolean prefixFree){  this.prefixFree=prefixFree;}  }
class C{  protected void generatePseudoPawnMoves(PriorityMoveList moves){  long pawnsBB=getPieceBB(colorToMove,PAWN);  int oppositeColor, epModifier;  if (colorToMove == WHITE) {    oppositeColor=BLACK;    epModifier=-8;  } else {    oppositeColor=WHITE;    epModifier=+8;  }  while (pawnsBB != 0) {    int fromSquare=bitscanForward(pawnsBB);    long fromBB=getBitboard(fromSquare);    generatePseudoPawnEPCaptures(fromSquare,fromBB,oppositeColor,moves);    generatePseudoPawnCaptures(fromSquare,fromBB,oppositeColor,moves);    generatePseudoPawnSinglePush(fromSquare,fromBB,oppositeColor,moves);    generatePseudoPawnDoublePush(fromSquare,fromBB,oppositeColor,epModifier,moves);    pawnsBB=bitscanClear(pawnsBB);  }}  }
class C{  void decUsage(){  incUsage(-1);}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  public TradeCenterMarketSlot(){  super();}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  public AssertionValidationException(){}  }
class C{  public void testIncomingPanConnection(){  int iterations=BluetoothTestRunner.sConnectPanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.disablePan(adapter);  mTestUtils.enablePan(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.acceptPair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("incomingPanConnection iteration " + (i + 1) + " of "+ iterations);    mTestUtils.incomingPanConnection(adapter,device);    mTestUtils.incomingPanDisconnection(adapter,device);  }  mTestUtils.unpair(adapter,device);  mTestUtils.disablePan(adapter);  mTestUtils.disable(adapter);}  }
class C{  private static boolean argumentParse(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker argMarker=builder.mark();  if (argumentLabelStartCheck(builder,parser)) {    ParserUtils.getToken(builder,GroovyTokenTypes.mCOLON,GroovyBundle.message("colon.expected"));    if (!AssignmentExpression.parse(builder,parser)) {      builder.error(GroovyBundle.message("expression.expected"));    }    argMarker.done(GroovyElementTypes.NAMED_ARGUMENT);    return true;  }  if (ParserUtils.getToken(builder,GroovyTokenTypes.mSTAR)) {    if (AssignmentExpression.parse(builder,parser)) {      argMarker.done(GroovyElementTypes.SPREAD_ARGUMENT);    } else {      builder.error(GroovyBundle.message("colon.expected"));      argMarker.done(GroovyElementTypes.NAMED_ARGUMENT);    }    return true;  }  argMarker.drop();  return AssignmentExpression.parse(builder,parser);}  }
class C{  public static void organizeDistribution(final double[] probabilities){  organizeDistribution(probabilities,false);}  }
class C{  public static Rethrowing createRethrowing(Function<Throwable,RuntimeException> transform){  return new Rethrowing(transform);}  }
class C{  public InvalidRequestException(String message,Errors errors){  super(message);  this.errors=errors;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public void removeServer(IOException e,int i,int count){  trace.debug(e,"removing server because of exception");  transferList.remove(i);  if (transferList.size() == 0 && autoReconnect(count)) {    return;  }  checkClosed();  switchOffCluster();}  }
class C{  public double log(){  return iE * (double)iLogRange + Math.log(iF);}  }
class C{  public static LongsRef deepCopyOf(LongsRef other){  return new LongsRef(Arrays.copyOfRange(other.longs,other.offset,other.offset + other.length),0,other.length);}  }
class C{  public static void exercise2(){  Point blank=new Point(5,8);  Rectangle rect=new Rectangle(0,2,4,4);  Point center=findCenter(rect);  double dist=distance(center,blank);  System.out.println(dist);}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    this.outputLogger.close();  }}  }
class C{  public void close(){  bytes=null;}  }
class C{  public void updateProgressBar(int percentage){  view.updateProgressBar(percentage);  resolveDependencyPresenter.updateProgressBar(percentage);}  }
class C{  private TIntIntMap combineMultimodalRoutingAccessTimes(Map<LegMode,StreetRouter> routers,TIntObjectMap<LegMode> stopModeMap,ProfileRequest request){  TIntIntMap times=new TIntIntHashMap();  TIntIntMap weights=new TIntIntHashMap();  for (  Map.Entry<LegMode,StreetRouter> entry : routers.entrySet()) {    int maxTime=30;    int minTime=0;    int penalty=0;    LegMode mode=entry.getKey();switch (mode) {case BICYCLE:      maxTime=request.maxBikeTime;    minTime=request.minBikeTime;  penalty=BIKE_PENALTY;break;case BICYCLE_RENT:maxTime=request.maxBikeTime;minTime=request.minBikeTime;penalty=BIKESHARE_PENALTY;break;case WALK:maxTime=request.maxWalkTime;break;case CAR:case CAR_PARK:maxTime=request.maxCarTime;minTime=request.minCarTime;penalty=CAR_PENALTY;break;}maxTime*=60;minTime*=60;final int maxTimeFinal=maxTime;final int minTimeFinal=minTime;final int penaltyFinal=penalty;StreetRouter router=entry.getValue();router.getReachedStops().forEachEntry(null);}int stopsFound=times.size();if (stopsFound > MAX_ACCESS_STOPS) {TIntList timeList=new TIntArrayList();times.forEachValue(null);timeList.sort();int cutoff=timeList.get(MAX_ACCESS_STOPS);for (TIntIntIterator it=times.iterator(); it.hasNext(); ) {it.advance();if (it.value() > cutoff) it.remove();}LOG.warn("{} stops found, using {} nearest",stopsFound,times.size());} else {LOG.info("{} stops found",stopsFound);}return times;}  }
class C{  public void stop(){  stop("");}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof PropertyPermission))   return false;  PropertyPermission pp=(PropertyPermission)permission;  PropertyPermission x;  int desired=pp.getMask();  int effective=0;  if (all_allowed) {synchronized (this) {      x=perms.get("*");    }    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return true;    }  }  String name=pp.getName();synchronized (this) {    x=perms.get(name);  }  if (x != null) {    effective|=x.getMask();    if ((effective & desired) == desired)     return true;  }  int last, offset;  offset=name.length() - 1;  while ((last=name.lastIndexOf(".",offset)) != -1) {    name=name.substring(0,last + 1) + "*";synchronized (this) {      x=perms.get(name);    }    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return true;    }    offset=last - 1;  }  return false;}  }
class C{  public Builder asImmutable(){  role.immutable=true;  return this;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override public void onPassphraseTypeSelected(PassphraseType type){  if (!mProfileSyncService.isSyncInitialized()) {    return;  }  boolean isAllDataEncrypted=mProfileSyncService.isEncryptEverythingEnabled();  boolean isUsingSecondaryPassphrase=mProfileSyncService.isUsingSecondaryPassphrase();  assert !isAllDataEncrypted;  assert !isUsingSecondaryPassphrase;  displayCustomPassphraseDialog();}  }
class C{  protected Object processOutObject(int type) throws IgniteCheckedException {  return throwUnsupported(type);}  }
class C{  private boolean readSend(InH3 hIn,OutboxAmp outbox,HeadersAmp headers) throws IOException {  MethodRefHamp methodHamp=null;  try {    methodHamp=readMethod(hIn);  } catch (  Throwable e) {    log.log(Level.FINER,e.toString(),e);    skipArgs(hIn);    return true;  }  MethodRefAmp method=methodHamp.getMethod();  ClassLoader loader=methodHamp.getClassLoader();  Thread thread=Thread.currentThread();  thread.setContextClassLoader(loader);  Object[] args=readArgs(methodHamp,hIn);  if (log.isLoggable(_logLevel)) {    log.log(_logLevel,this + " send-r " + method.getName()+ debugArgs(args)+ " {to:"+ method+ ", "+ headers+ "}");  }  SendMessage_N sendMessage=new SendMessage_N(outbox,headers,method.serviceRef(),method.method(),args);  long timeout=1000L;  try {    sendMessage.offer(timeout);  } catch (  Throwable e) {    log.fine(e.toString());    if (log.isLoggable(Level.FINEST)) {      log.log(Level.FINEST,e.toString(),e);    }  }  return true;}  }
class C{  public static void writeDeclaredField(final Object target,final String fieldName,final Object value) throws IllegalAccessException {  FieldUtils.writeDeclaredField(target,fieldName,value,false);}  }
class C{  public static boolean pause(List<Animator> animators){  boolean isPauseCalled=false;  if (animators != null) {    for (    Animator animator : animators) {      if (pause(animator)) {        isPauseCalled=true;      }    }  }  return isPauseCalled;}  }
class C{  public StorageSystemValidatorFactory vplex(){  return systemFactories.get("vplex");}  }
class C{  public long endcode(){  return Long.parseLong(fields[26]);}  }
class C{  public boolean isNull(){  return maxx < minx;}  }
class C{  public boolean isUuid(){  return uuid;}  }
class C{  private void collectClassesFromInterfaceAndSubInterfaces(Collection<ImmutableClassType> results,ImmutableInterfaceType interfaceType){  for (  ImmutableClassType classType : interfaceType.getImmutableRealizingClasses()) {    if (classType.isInitialized()) {      results.add(classType);    }    collectClassesFromSubClasses(results,classType);  }  for (  ImmutableInterfaceType superInterfaceType : interfaceType.getImmutableSubInterfaces()) {    collectClassesFromInterfaceAndSubInterfaces(results,superInterfaceType);  }}  }
class C{  public static double quantile(double val,double mu,double beta){  return mu + beta * Math.log(1 / Math.log(1 / val));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public RhythmSpecLayer inflateLayer(String configString,@NonNull Map<String,String> vars){  return inflateLayerInternal(parseConfigInternal(configString,vars,0),0);}  }
class C{  @Override public double apply(double sample){  if (cutoffFreqFactor <= 0.0) {    return sample;  }  double element_0=sample - elements[0] * a1 - elements[1] * a2;  if (Double.isNaN(element_0)) {    element_0=sample;  }  double output=element_0 * b0 + elements[0] * b1 + elements[1] * b2;  elements[1]=elements[0];  elements[0]=element_0;  return output;}  }
class C{  public static boolean testNetwork(Activity parentActivity){  ConnectivityManager connMgr=(ConnectivityManager)parentActivity.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();  return (networkInfo != null && networkInfo.isConnected());}  }
class C{  public TupleSet<E> extend(List<E> elements){  List<List<E>> tupleList=new ArrayList<>();  for (  List<E> tuple : tuples) {    for (    E e : elements) {      List<E> extTuple=new ArrayList<>(tuple);      extTuple.add(e);      assert extTuple.size() == tupleLength + 1 : "tuple lengths don't match, expected " + tupleLength + " have "+ extTuple.size();      tupleList.add(extTuple);    }  }  return new TupleSet<>(tupleList,tupleLength + 1);}  }
class C{  Property(MonthDay partial,int fieldIndex){  super();  iBase=partial;  iFieldIndex=fieldIndex;}  }
class C{  public static void main(String[] args) throws Exception {  String string=IOUtils.toString(System.in,StandardCharsets.UTF_8.toString());  System.out.println(string);  MonitoringParametersSchemaValidator.validate(string);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean areFilenamesEqual(String fileName1,String fileName2){  return new File(fileName1).equals(new File(fileName2));}  }
class C{  public void addStateName(String stateName,int line){  if (stateGroups != null && stateGroups.containsKey(stateName)) {    ThreadLocalToolkit.log(new AmbiguousStateIdentifier(stateName),path,line);  }  stateNames=(stateNames != null) ? stateNames : new LinkedHashSet<String>();  stateNames.add(stateName);}  }
class C{  public boolean isMinXSet(int scale){  return mMinX[scale] != MathHelper.NULL_VALUE;}  }
class C{  public SPQRResourceManagerClient(final String resourceManagerProtocol,final String resourceManagerRemoteHost,final int resourceManagerServicePort,final Client resourceManagerClient) throws RequiredInputMissingException {  if (StringUtils.isBlank(resourceManagerProtocol))   throw new RequiredInputMissingException("Missing required protocol");  if (StringUtils.isBlank(resourceManagerRemoteHost))   throw new RequiredInputMissingException("Missing required remote host");  if (resourceManagerServicePort < 1)   throw new RequiredInputMissingException("Missing required service port");  if (resourceManagerClient == null)   throw new RequiredInputMissingException("Missing required client");  this.resourceManagerServiceBaseUrl=new StringBuffer(resourceManagerProtocol).append("://").append(resourceManagerRemoteHost).append(":").append(resourceManagerServicePort).toString();  this.restClient=resourceManagerClient;}  }
class C{  public int keylength(){  return this.keylength;}  }
class C{  private String processingWKT(final String text,final int lastID){  String newWKT;  final String[] prep=text.split(",");  if (prep[prep.length - 2].toUpperCase().contains("AUTHORITY")) {    final String substring=text.substring(0,text.lastIndexOf(','));    newWKT=substring.substring(0,substring.lastIndexOf(',')) + ", AUTHORITY[\"UDIG\",\"" + (lastID - 1)+ "\"]]";  } else {    newWKT=text.substring(0,text.lastIndexOf(']')) + ", AUTHORITY[\"UDIG\",\"" + (lastID - 1)+ "\"]]";  }  wktText.setText(newWKT);  return newWKT;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MSR");  translateAll(environment,instruction,"MSR",instructions);}  }
class C{  @Override public void columnMoved(final TableColumnModelEvent e){  if (isEditing()) {    cellEditor.stopCellEditing();  }  super.columnMoved(e);}  }
class C{  public SeeAllCommand(Server server){  super(server,"seeall","Allows player to see all in double blind game if you are " + "an observer.  Usage: /seeall <password> <player id#>.   " + "For a list of player id #s, use the /who command "+ "(default is yourself)");}  }
class C{  public long nextCommandRequest(){  return ++commandRequest;}  }
class C{  public void flushAdditionalObjOnPage(){  if (endItem != -1) {    currentItem=endItem;  }  endItem=-1;  objectType.resetToCheckpoint();  shapeType.resetToCheckpoint();  pageObjects.resetToCheckpoint();  areas.resetToCheckpoint();  clips.resetToCheckpoint();  textFillType.resetToCheckpoint();  text_color.resetToCheckpoint();  fill_color.resetToCheckpoint();  stroke_color.resetToCheckpoint();  stroke.resetToCheckpoint();  if (TRvalues != null) {    TRvalues.resetToCheckpoint();  }  if (fs != null) {    fs.resetToCheckpoint();  }  if (lw != null) {    lw.resetToCheckpoint();  }  af1.resetToCheckpoint();  af2.resetToCheckpoint();  af3.resetToCheckpoint();  af4.resetToCheckpoint();  if (opacity != null) {    opacity.resetToCheckpoint();  }  if (BMvalues != null) {    BMvalues.resetToCheckpoint();  }  lastFillTextCol=0;  lastFillCol=0;  lastStrokeCol=0;  lastClip=null;  hasClips=false;  lastStroke=null;  lastAf=new double[4];  fillSet=false;  strokeSet=false;  lastStrokeOpacity=-1;  lastFillOpacity=-1;}  }
class C{  public void removeCodeAttribute(){  AttributeInfo.remove(attribute,CodeAttribute.tag);}  }
class C{  public static List<URI> filterVolumesByExportMask(List<URI> volumeURIs,ExportMask exportMask){  List<URI> result=new ArrayList<URI>();  for (  URI uri : volumeURIs) {    if (exportMask.hasVolume(uri)) {      result.add(uri);    }  }  return result;}  }
class C{  private static void createCentralNumeration(Integer bookID,AxSf axsf,String format,String entidad) throws SQLException, Exception {  Date registerDate=(Date)axsf.getAttributeValue("fld2");  int year=Integer.parseInt(FORMATTER.format(registerDate));  int bookType=1;  if (Repository.getInstance(entidad).isOutBook(bookID).booleanValue()) {    bookType=2;  }  DBEntityDAOFactory.getCurrentDBEntityDAO().updateScrCntCentral(year,bookType,entidad);  int newCont=DBEntityDAOFactory.getCurrentDBEntityDAO().getNumRegFromScrCntCentral(year,bookType,entidad);  if (newCont == -1) {    DBEntityDAOFactory.getCurrentDBEntityDAO().lockScrCentral(year,entidad);    newCont=DBEntityDAOFactory.getCurrentDBEntityDAO().getNumRegFromScrCntCentral(year,bookType,entidad);    if (newCont == -1) {      newCont=DBEntityDAOFactory.getCurrentDBEntityDAO().createScrCentralRow(year,bookType,entidad);    }  }  String fld1=centralNumerationFormat(format,year,newCont);  axsf.setAttributeValue("fld1",fld1);}  }
class C{  private boolean doZoneExportMasksDelete(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){  NetworkFCContext context=new NetworkFCContext();  boolean status=false;  try {    if (zoningParams.isEmpty()) {      _log.info("zoningParams is empty, returning");      WorkflowStepCompleter.stepSucceded(stepId);      return true;    }    URI exportGroupId=zoningParams.get(0).getExportGroupId();    URI virtualArray=zoningParams.get(0).getVirtualArray();    if (!checkZoningRequired(stepId,virtualArray)) {      return true;    }    volumeURIs=removeDuplicateURIs(volumeURIs);    context.setAddingZones(false);    List<NetworkFCZoneInfo> zones=_networkScheduler.getZoningRemoveTargets(zoningParams,volumeURIs);    context.getZoneInfos().addAll(zones);    logZones(zones);    if (context.getZoneInfos().isEmpty()) {      WorkflowStepCompleter.stepSucceded(stepId);      return true;    }    List<NetworkFCZoneInfo> lastReferenceZoneInfo=new ArrayList<NetworkFCZoneInfo>();    for (    NetworkFCZoneInfo zoneInfo : zones) {      if (zoneInfo.isLastReference()) {        _log.debug("EndPoints with last reference" + zoneInfo.getEndPoints());        lastReferenceZoneInfo.add(zoneInfo);      }    }    BiosCommandResult result=addRemoveZones(exportGroupId,context.getZoneInfos(),true);    status=result.isCommandSuccess();    List<URI> exportMaskURIs=new ArrayList<URI>();    for (    NetworkZoningParam zoningParam : zoningParams) {      exportMaskURIs.add(zoningParam.getMaskId());    }    if (status && !lastReferenceZoneInfo.isEmpty()) {      _log.info("There seems to be last reference zones that were removed, clean those zones from the ExportMask zoning map.");      updateZoningMap(lastReferenceZoneInfo,exportGroupId,exportMaskURIs);    }    completeWorkflowState(stepId,"zoneExportMasksDelete",result);    _log.info("Successfully removed zones for ExportGroup: {}",exportGroupId.toString());  } catch (  Exception ex) {    _log.error("Exception zoning delete Export Masks",ex);    WorkflowService.getInstance().storeStepData(stepId,context);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneExportGroupDeleteFailed(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }  return status;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public BlockVirtualPoolRestRep updateBlockVirtualPoolWithAssignedPools(@PathParam("id") URI id,VirtualPoolPoolUpdateParam param){  return toBlockVirtualPool(_dbClient,updateVirtualPoolWithAssignedStoragePools(id,param));}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  void cleanup(){}  }
class C{  public boolean isDiscountPrinted(){  Object oo=get_Value(COLUMNNAME_IsDiscountPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void addLibro(int type,int canAdd,int canDel,Element parent){  Element context=parent.addElement(XML_LIBRO_TEXT).addAttribute(XML_TIPO_TEXT,Integer.toString(type)).addAttribute(XML_CANADD_TEXT,Integer.toString(canAdd)).addAttribute(XML_CANDEL_TEXT,Integer.toString(canDel));}  }
class C{  public long longHashCode(){  return ObjectsUtil.longHash(fileName,fileLength,fileTime.millisecondsRemovedHashCode(),fileHash,fileAttributes);}  }
class C{  public boolean removeParent(SessionNode parent){  if (this.parents.contains(parent)) {    this.parents.remove(parent);    parent.removeChild(this);    parent.removeSessionListener(getSessionHandler());    getSessionSupport().fireParentRemoved(parent,this);    return true;  }  return false;}  }
class C{  private void checkCapabilitiesIfNeeded(){  if (!mCapabilitiesCheckDeferred)   return;  mMaxTextures=Capabilities.getInstance().getMaxTextureImageUnits();}  }
class C{  public static double select(final double[] arr,int lo,int hi,final int pivot){  while (hi > lo) {    int j=partition(arr,lo,hi);    if (j == pivot) {      return arr[pivot];    }    if (j > pivot) {      hi=j - 1;    } else {      lo=j + 1;    }  }  return arr[pivot];}  }
class C{  private static byte[] toRadix16(final Ed25519EncodedFieldElement encoded){  final byte[] a=encoded.getRaw();  final byte[] e=new byte[64];  int i;  for (i=0; i < 32; i++) {    e[2 * i]=(byte)(a[i] & 15);    e[2 * i + 1]=(byte)((a[i] >> 4) & 15);  }  int carry=0;  for (i=0; i < 63; i++) {    e[i]+=carry;    carry=e[i] + 8;    carry>>=4;    e[i]-=carry << 4;  }  e[63]+=carry;  return e;}  }
class C{  protected void removeBogusHeads(){  Chain<Unit> units=body.getUnits();  Unit trueHead=units.getFirst();  while (this.getHeads().size() > 1) {    for (Iterator<Unit> headItr=this.getHeads().iterator(); headItr.hasNext(); ) {      Unit head=headItr.next();      if (trueHead == head)       continue;      this.unitToPreds.remove(head);      List<Unit> succs=this.unitToSuccs.get(head);      for (Iterator<Unit> succsItr=succs.iterator(); succsItr.hasNext(); ) {        List<Unit> tobeRemoved=new ArrayList<Unit>();        Unit succ=succsItr.next();        List<Unit> predOfSuccs=this.unitToPreds.get(succ);        for (Iterator<Unit> predItr=predOfSuccs.iterator(); predItr.hasNext(); ) {          Unit pred=predItr.next();          if (pred == head)           tobeRemoved.add(pred);        }        predOfSuccs.removeAll(tobeRemoved);      }      this.unitToSuccs.remove(head);      if (units.contains(head))       units.remove(head);    }    this.buildHeadsAndTails();  }}  }
class C{  public void moveIndexToEnd(){  this.millisecond=this.segmentEnd;}  }
class C{  @Override public boolean hasMoreElements(){  return iterator.hasNext();}  }
class C{  public CTextCriteriumPanel(final CTextCriterium criterium){  super(new BorderLayout());  m_inputField=new CTextInputField(criterium,null);  initPanel();}  }
class C{  public CompilerException(){}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  protected void paintIconForVertex(RenderContext<V,E> rc,V v,Layout<V,E> layout){  GraphicsDecorator g=rc.getGraphicsContext();  boolean vertexHit=true;  Shape shape=rc.getVertexShapeTransformer().transform(v);  Point2D p=layout.transform(v);  p=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,p);  float x=(float)p.getX();  float y=(float)p.getY();  AffineTransform xform=AffineTransform.getTranslateInstance(x,y);  shape=xform.createTransformedShape(shape);  vertexHit=vertexHit(rc,shape);  if (vertexHit) {    if (rc.getVertexIconTransformer() != null) {      Icon icon=rc.getVertexIconTransformer().transform(v);      if (icon != null) {        g.draw(icon,rc.getScreenDevice(),shape,(int)x,(int)y);      } else {        paintShapeForVertex(rc,v,shape);      }    } else {      paintShapeForVertex(rc,v,shape);    }  }}  }
class C{  private void process(File baseDir,String xmlFile,File destDir,Document projectDocument) throws BuildException {  File outFile=null;  File inFile=null;  Writer writer=null;  try {    inFile=new File(baseDir,xmlFile);    outFile=new File(destDir,xmlFile.substring(0,xmlFile.lastIndexOf('.')) + extension);    if (lastModifiedCheck == false || (inFile.lastModified() > outFile.lastModified() || styleSheetLastModified > outFile.lastModified() || projectFileLastModified > outFile.lastModified())) {      ensureDirectoryFor(outFile);      log("Input:  " + xmlFile,Project.MSG_INFO);      Document root=builder.build(inFile);      VelocityContext context=new VelocityContext();      String encoding=(String)ve.getProperty(RuntimeConstants.OUTPUT_ENCODING);      if (encoding == null || encoding.length() == 0 || encoding.equals("8859-1") || encoding.equals("8859_1")) {        encoding="ISO-8859-1";      }      OutputWrapper ow=new OutputWrapper();      ow.setEncoding(encoding);      context.put("root",root.getRootElement());      context.put("xmlout",ow);      context.put("relativePath",getRelativePath(xmlFile));      context.put("treeWalk",new TreeWalker());      context.put("xpath",new XPathTool());      context.put("escape",new Escape());      context.put("date",new java.util.Date());      if (projectDocument != null) {        context.put("project",projectDocument.getRootElement());      }      writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFile),encoding));      Template template=ve.getTemplate(style);      template.merge(context,writer);      log("Output: " + outFile,Project.MSG_INFO);    }  } catch (  JDOMException e) {    if (outFile != null)     outFile.delete();    if (e.getCause() != null) {      Throwable rootCause=e.getCause();      if (rootCause instanceof SAXParseException) {        System.out.println("");        System.out.println("Error: " + rootCause.getMessage());        System.out.println("       Line: " + ((SAXParseException)rootCause).getLineNumber() + " Column: "+ ((SAXParseException)rootCause).getColumnNumber());        System.out.println("");      } else {        rootCause.printStackTrace();      }    } else {      e.printStackTrace();    }  }catch (  Throwable e) {    if (outFile != null) {      outFile.delete();    }    e.printStackTrace();  } finally {    if (writer != null) {      try {        writer.flush();        writer.close();      } catch (      Exception e) {      }    }  }}  }
class C{  public SelectionBuilder reset(){  mSelection.setLength(0);  mSelectionArgs.clear();  return this;}  }
class C{  public Optional<IN4JSProject> findRuntimeEnvironmentProject(RuntimeEnvironment runtimeEnvironment){  return from(getAllProjects()).filter(null).filter(null).first();}  }
class C{  public RolePreference(){  super();}  }
class C{  public static void main(String args[]){  try {    InstanceQuery iq=new InstanceQuery();    String query=Utils.getOption('Q',args);    if (query.length() == 0) {      iq.setQuery("select * from Experiment_index");    } else {      iq.setQuery(query);    }    iq.setOptions(args);    try {      Utils.checkForRemainingOptions(args);    } catch (    Exception e) {      System.err.println("Options for weka.experiment.InstanceQuery:\n");      Enumeration<Option> en=iq.listOptions();      while (en.hasMoreElements()) {        Option o=en.nextElement();        System.err.println(o.synopsis() + "\n" + o.description());      }      System.exit(1);    }    Instances aha=iq.retrieveInstances();    iq.disconnectFromDatabase();    if (aha == null) {      return;    }    System.out.println(new Instances(aha,0));    for (int i=0; i < aha.numInstances(); i++) {      System.out.println(aha.instance(i));    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR:setOperator(OPERATOR_EDEFAULT);return;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public static String deparseTagName(String tagName){  return Character.toLowerCase(tagName.charAt(0)) + tagName.substring(1).replace(" ","_");}  }
class C{  public void saveModel(OutputStream out) throws IOException {  GZIPOutputStream zipout=new GZIPOutputStream(out);  DataOutputStream dataout=new DataOutputStream(zipout);  dataout.writeInt(numTopics);  dataout.writeInt(nwz.size());  dataout.writeDouble(alpha);  dataout.writeDouble(beta);  dataout.writeBoolean(locked);  for (  Entry<String,int[]> e : nwz.entrySet()) {    dataout.writeUTF(e.getKey());    int[] c=e.getValue();    for (int i=0; i < numTopics; i++) {      dataout.writeInt(c[i]);    }  }  dataout.writeInt(ntz.size());  dataout.writeDouble(eta);  for (  Entry<String,int[]> e : ntz.entrySet()) {    dataout.writeUTF(e.getKey());    int[] c=e.getValue();    for (int i=0; i < numTopics + 1; i++) {      dataout.writeInt(c[i]);    }  }  dataout.flush();  zipout.finish();}  }
class C{  public void importContext(Context ctx,Configuration config) throws ConfigurationException {  for (  ContextDataFactory cdf : this.contextDataFactories) {    cdf.importContextData(ctx,config);  }}  }
class C{  @org.junit.Test public void testImport() throws Exception {  Utils.sleep(SLEEP);  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://www.freebase.com/physics/particle"));  Utils.sleep(5000);  bot.shutdown();}  }
class C{  public FractionAtom(Atom num,Atom den){  this(num,den,true);}  }
class C{  private void check(Rectangle bounds){  if (ColorBlind.getColorType() != m_colorBlind) {    m_colorBlind=ColorBlind.getColorType();    setDirty(true);  }  if ((m_height < (bounds.y + bounds.height)) || (m_width < (bounds.x + bounds.width))) {    createColorBackground(bounds);    fillColorBackground();  } else   if (isDirty())   fillColorBackground();}  }
class C{  public TemplateBuffer translate(Template template) throws TemplateException {  return parse(template.getPattern());}  }
class C{  public List<String> findPhantomStorageGroupAssociatedWithFastPolicy(StorageSystem storage,StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam) throws Exception {  CloseableIterator<CIMObjectPath> cimPathItr=null;  List<String> sgNames=new ArrayList<String>();  try {    _log.info("findPhantomStorageGroupAssociatedWithFastPolicy START: " + storageGroupPolicyLimitsParam);    Map<StorageGroupPolicyLimitsParam,Set<String>> allStorageGroups=getExistingSGNamesFromArray(storage);    Set<String> storageGroupsOfPolicy=allStorageGroups.get(storageGroupPolicyLimitsParam);    if (storageGroupsOfPolicy == null || storageGroupsOfPolicy.isEmpty()) {      return null;    }    for (    String storageGroupName : storageGroupsOfPolicy) {      StringSet policyNames=findTierPoliciesForStorageGroup(storage,storageGroupName);      CIMObjectPath storageGroupPath=_cimPath.getStorageGroupObjectPath(storageGroupName,storage);      if (this.isCascadedSG(storage,storageGroupPath)) {        _log.info("findPhantomStorageGroupAssociatedWithFastPolicy avoiding storage group: " + storageGroupName + " because it is a parent storage group.");        continue;      }      _log.debug("findPhantomStorageGroupAssociatedWithFastPolicy found policies: " + Joiner.on("\t").join(policyNames) + " on storage group: "+ storageGroupName);      if (policyNames != null && policyNames.contains(storageGroupPolicyLimitsParam.getAutoTierPolicyName())) {        _log.info("findPhantomStorageGroupAssociatedWithFastPolicy found policy on storage group: " + storageGroupName);        if (!checkStorageGroupInAnyMaskingView(storage,storageGroupPath)) {          boolean inMaskView=false;          cimPathItr=getAssociatorNames(storage,storageGroupPath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null);          if (cimPathItr != null) {            while (cimPathItr.hasNext() && !inMaskView) {              CIMObjectPath parentObjectPath=cimPathItr.next();              if (checkStorageGroupInAnyMaskingView(storage,parentObjectPath)) {                inMaskView=true;              }            }          }          if (!inMaskView) {            _log.info("findPhantomStorageGroupAssociatedWithFastPolicy found policy on storage group: " + storageGroupName + " and it's not associated with a masking view, so it's a container for FAST volumes");            _log.info("findPhantomStorageGroupAssociatedWithFastPolicy END: " + storageGroupPolicyLimitsParam);            sgNames.add(storageGroupName);          } else {            _log.info("findPhantomStorageGroupAssociatedWithFastPolicy found policy on storage group: " + storageGroupName + ", but it's associated indirectly with a masking view");          }        } else {          _log.info("findPhantomStorageGroupAssociatedWithFastPolicy found policy on storage group: " + storageGroupName + ", but it's associated with a masking view");        }        closeCIMIterator(cimPathItr);      }    }  } catch (  Exception e) {    _log.error("Failed trying to find existing Storage Groups with policy name",storageGroupPolicyLimitsParam,e);    throw e;  } finally {    closeCIMIterator(cimPathItr);  }  _log.info("findPhantomStorageGroupAssociatedWithFastPolicy END: " + storageGroupPolicyLimitsParam);  return sgNames;}  }
class C{  public Tree importTree(TaxonList taxonList) throws IOException, ImportException {  return importTree(taxonList,false);}  }
class C{  boolean isResultStream(){  return resultStream;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.148 -0500",hash_original_method="DB17BDB963992533B7D3120B4F8AA0BD",hash_generated_method="0FAFDCCE70A0B6A60C3CB38E4C077433") public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;}  }
class C{  void update(DetectUrlFileInfo detectUrlFileInfo){  if (UrlUtil.isUrl(detectUrlFileInfo.mUrl)) {    this.mUrl=detectUrlFileInfo.mUrl;  }  if (detectUrlFileInfo.mFileSize > 0 && detectUrlFileInfo.mFileSize != this.mFileSize) {    this.mFileSize=detectUrlFileInfo.mFileSize;  }  if (!TextUtils.isEmpty(detectUrlFileInfo.mETag)) {    this.mETag=detectUrlFileInfo.mETag;  }  if (!TextUtils.isEmpty(detectUrlFileInfo.mLastModified)) {    this.mLastModified=detectUrlFileInfo.mLastModified;  }  if (!TextUtils.isEmpty(detectUrlFileInfo.mAcceptRangeType)) {    this.mAcceptRangeType=detectUrlFileInfo.mAcceptRangeType;  }  if (FileUtil.isFilePath(detectUrlFileInfo.mFileDir)) {    this.mFileDir=detectUrlFileInfo.mFileDir;  }  if (!TextUtils.isEmpty(detectUrlFileInfo.mFileName)) {    this.mFileName=detectUrlFileInfo.mFileName;  }  if (!TextUtils.isEmpty(detectUrlFileInfo.mCreateDatetime)) {    this.mCreateDatetime=detectUrlFileInfo.mCreateDatetime;  }}  }
class C{  public static List<String> asStrings(Collection<URI> values){  List<String> results=new ArrayList<>();  if (values != null) {    for (    URI value : values) {      if (value != null) {        results.add(value.toString());      }    }  }  return results;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public double[] toArray(){  return Arrays.copyOf(data,size);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearText(){  text=null;  fieldSetFlags()[14]=false;  return this;}  }
class C{  public final double errorRate(){  if (!m_ClassIsNominal) {    return Math.sqrt(m_SumSqrErr / (m_WithClass - m_Unclassified));  }  if (m_CostMatrix == null) {    return m_Incorrect / m_WithClass;  } else {    return avgCost();  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.524 -0500",hash_original_method="066946089A5EEE9700468FE67EE373C2",hash_generated_method="39D30A18E3CBA1A0CA0CA065CE6FFE58") public void sendMessage(int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  sendMessage(msg);}  }
class C{  public <T extends ServiceDocument>T document(String selfLink,Class<T> type){  if (this.results == null || this.results.documents == null) {    return null;  }  Object o=this.results.documents.get(selfLink);  return convert(type,o);}  }
class C{  protected static Pair<String,String> rorRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  final String tmpRsFour=environment.getNextVariableString();  final String tmpRsFourNegative=environment.getNextVariableString();  final String tmpRsSeven=environment.getNextVariableString();  final String isZeroConditionFour=environment.getNextVariableString();  final String isNotZeroConditionFour=environment.getNextVariableString();  final String isZeroConditionSeven=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  final String tmpVar5=environment.getNextVariableString();  final String tmpVar6=environment.getNextVariableString();  final String tmpVar7=environment.getNextVariableString();  final String tmpVar8=environment.getNextVariableString();  final String shifterCarryOutTmp1=environment.getNextVariableString();  final String shifterCarryOutTmp2=environment.getNextVariableString();  final String shifterCarryOutTmp3=environment.getNextVariableString();  final String shifterCarryOutTmp4=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue2,dWordSize,String.valueOf(0xFFL),dWordSize,tmpRsSeven));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpRsSeven,byteSize,isZeroConditionSeven));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpRsSeven,dWordSize,String.valueOf(0x1FL),dWordSize,tmpRsFour));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpRsFour,byteSize,isZeroConditionFour));  instructions.add(ReilHelpers.createBisz(baseOffset++,byteSize,isZeroConditionFour,byteSize,isNotZeroConditionFour));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpRsFour,dWordSize,tmpRsFourNegative));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpRsFourNegative,dWordSize,tmpVar1));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,String.valueOf(32L),dWordSize,tmpRsFour,dWordSize,tmpVar2));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar2,dWordSize,tmpVar3));  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,dWordSize,tmpVar3,dWordSize,tmpVar4));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar4,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,"C",byteSize,isZeroConditionSeven,byteSize,shifterCarryOutTmp1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,minusThirtyOneSet,byteSize,tmpVar5));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,tmpVar5,byteSize,isZeroConditionFour,byteSize,shifterCarryOutTmp2));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpRsFour,byteSize,oneSet,dWordSize,tmpVar6));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpVar6,dWordSize,tmpVar7));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar7,dWordSize,tmpVar8));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar8,byteSize,isNotZeroConditionFour,byteSize,shifterCarryOutTmp3));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp1,byteSize,shifterCarryOutTmp2,byteSize,shifterCarryOutTmp4));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp3,byteSize,shifterCarryOutTmp4,byteSize,shifterCarryOut));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  public void transformValues(TLongFunction function){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static final void drawJoint(GL2 gl,Joint joint,double invdt){  if (joint instanceof AngleJoint) {  } else   if (joint instanceof DistanceJoint) {    RenderUtilities.drawDistanceJoint(gl,(DistanceJoint)joint);  } else   if (joint instanceof FrictionJoint) {  } else   if (joint instanceof MotorJoint) {    RenderUtilities.drawMotorJoint(gl,(MotorJoint)joint);  } else   if (joint instanceof PinJoint) {    RenderUtilities.drawMouseJoint(gl,(PinJoint)joint,invdt);  } else   if (joint instanceof PrismaticJoint) {    RenderUtilities.drawPrismaticJoint(gl,(PrismaticJoint)joint);  } else   if (joint instanceof PulleyJoint) {    RenderUtilities.drawPulleyJoint(gl,(PulleyJoint)joint);  } else   if (joint instanceof RevoluteJoint) {    RenderUtilities.drawRevoluteJoint(gl,(RevoluteJoint)joint);  } else   if (joint instanceof RopeJoint) {    RenderUtilities.drawRopeJoint(gl,(RopeJoint)joint);  } else   if (joint instanceof WeldJoint) {    RenderUtilities.drawWeldJoint(gl,(WeldJoint)joint);  } else   if (joint instanceof WheelJoint) {    RenderUtilities.drawWheelJoint(gl,(WheelJoint)joint);  } else {  }}  }
class C{  private void processStorageUnitsForGenerateDdl(GenerateDdlRequest generateDdlRequest,StringBuilder sb,HashMap<String,String> replacements,BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectFormat businessObjectFormat,String ifNotExistsOption,List<StorageUnitEntity> storageUnitEntities){  if (!CollectionUtils.isEmpty(storageUnitEntities)) {    MultiValuedMap<Integer,String> storageUnitIdToStorageFilePathsMap=storageFileDao.getStorageFilePathsByStorageUnits(storageUnitEntities);    for (    StorageUnitEntity storageUnitEntity : storageUnitEntities) {      BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(storageUnitEntity.getBusinessObjectData());      String s3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(storageUnitEntity.getStorage(),storageUnitEntity.getBusinessObjectData().getBusinessObjectFormat(),businessObjectDataKey);      Collection<String> storageFilePaths=storageUnitIdToStorageFilePathsMap.containsKey(storageUnitEntity.getId()) ? storageUnitIdToStorageFilePathsMap.get(storageUnitEntity.getId()) : new ArrayList<>();      storageFileHelper.validateStorageFiles(storageFilePaths,s3KeyPrefix,storageUnitEntity.getBusinessObjectData(),storageUnitEntity.getStorage().getName());      if (storageFilePaths.isEmpty()) {        Assert.isTrue(storageUnitEntity.getDirectoryPath() != null && storageUnitEntity.getDirectoryPath().startsWith(s3KeyPrefix),String.format("Storage directory path \"%s\" registered with business object data {%s} " + "in \"%s\" storage does not match the expected S3 key prefix \"%s\".",storageUnitEntity.getDirectoryPath(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageUnitEntity.getBusinessObjectData()),storageUnitEntity.getStorage().getName(),s3KeyPrefix));        storageFilePaths.add(storageUnitEntity.getDirectoryPath() + "/");      }      String s3BucketName;      if (generateDdlRequest.s3BucketNames.containsKey(storageUnitEntity.getStorage())) {        s3BucketName=generateDdlRequest.s3BucketNames.get(storageUnitEntity.getStorage());      } else {        s3BucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storageUnitEntity.getStorage(),true);        generateDdlRequest.s3BucketNames.put(storageUnitEntity.getStorage(),s3BucketName);      }      if (generateDdlRequest.isPartitioned) {        Assert.isTrue(businessObjectFormat.getSchema().getPartitions().size() > businessObjectDataKey.getSubPartitionValues().size(),String.format("Number of subpartition values specified for the business object data is greater than or equal to " + "the number of partition columns defined in the schema of the business object format selected for DDL generation. " + "Business object data: {%s},  business object format: {%s}",businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));        int subPartitionValuesCount=CollectionUtils.size(businessObjectDataKey.getSubPartitionValues());        List<SchemaColumn> autoDiscoverableSubPartitionColumns=businessObjectFormat.getSchema().getPartitions().subList(1 + subPartitionValuesCount,businessObjectFormat.getSchema().getPartitions().size());        for (        HivePartitionDto hivePartition : getHivePartitions(businessObjectDataKey,autoDiscoverableSubPartitionColumns,s3KeyPrefix,storageFilePaths,storageUnitEntity.getBusinessObjectData(),storageUnitEntity.getStorage().getName())) {          sb.append(String.format("ALTER TABLE `%s` ADD %sPARTITION (",generateDdlRequest.tableName,ifNotExistsOption));          List<String> partitionKeyValuePairs=new ArrayList<>();          for (int i=0; i < businessObjectFormat.getSchema().getPartitions().size(); i++) {            String partitionColumnName=businessObjectFormat.getSchema().getPartitions().get(i).getName();            String partitionValue=hivePartition.getPartitionValues().get(i);            partitionKeyValuePairs.add(String.format("`%s`='%s'",partitionColumnName,partitionValue));          }          sb.append(StringUtils.join(partitionKeyValuePairs,", "));          sb.append(String.format(") LOCATION 's3n://%s/%s%s';\n",s3BucketName,s3KeyPrefix,StringUtils.isNotBlank(hivePartition.getPath()) ? hivePartition.getPath() : ""));        }      } else {        String tableLocation=String.format("s3n://%s/%s",s3BucketName,s3KeyPrefix);        if (generateDdlRequest.customDdlEntity == null) {          sb.append(String.format("LOCATION '%s';",tableLocation));        } else {          replacements.put(NON_PARTITIONED_TABLE_LOCATION_CUSTOM_DDL_TOKEN,tableLocation);        }      }    }  }}  }
class C{  public ResourceQueue(R resource,TxDag waitsFor){  if (resource == null)   throw new NullPointerException();  this.resource=resource;  this.waitsFor=waitsFor;}  }
class C{  public XML(Reader reader,String options) throws IOException, ParserConfigurationException, SAXException {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    factory.setAttribute("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);  } catch (  IllegalArgumentException e) {  }  factory.setExpandEntityReferences(false);  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(new InputSource(reader));  node=document.getDocumentElement();}  }
class C{  public ClusterJoinResponseMessage(ClusterJoinResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.newNodeId=other.newNodeId;  if (other.isSetNodeStore()) {    List<KeyedValues> __this__nodeStore=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.nodeStore) {      __this__nodeStore.add(new KeyedValues(other_element));    }    this.nodeStore=__this__nodeStore;  }}  }
class C{  public JSONObject articleAPI(String url,JSONObject genericScraperData) throws MalformedURLException {  URL qurl=new URL(url);  String data="";  try {    data=null;    genericScraperData.put("query",qurl);    genericScraperData.put("data",data);    genericScraperData.put("NLP","true");  } catch (  Exception e) {    if ("".equals(data)) {      try {        Document htmlPage=Jsoup.connect(url).get();        data=htmlPage.text();        genericScraperData.put("query",qurl);        genericScraperData.put("data",data);        genericScraperData.put("NLP","false");      } catch (      Exception ex) {      }    }  }  return genericScraperData;}  }
class C{  public static void verifyFileExistsAndReadable(File file){  if (!file.exists()) {    throw new IllegalArgumentException("File \"" + file.getName() + "\" doesn't exist.");  }  if (!file.isFile()) {    throw new IllegalArgumentException("File \"" + file.getName() + "\" is not a valid file that can be read as a manifest. Is it a directory?");  }  if (!file.canRead()) {    throw new IllegalArgumentException("Unable to read file \"" + file.getName() + "\". Check permissions.");  }}  }
class C{  public String convertStatement(String oraStatement){  String retValue[]=m_convert.convert(oraStatement);  if (retValue.length == 0)   return oraStatement;  if (retValue == null) {    log.log(Level.SEVERE,("DB_PostgreSQL.convertStatement - Not Converted (" + oraStatement + ") - "+ m_convert.getConversionError()));    throw new IllegalArgumentException("DB_PostgreSQL.convertStatement - Not Converted (" + oraStatement + ") - "+ m_convert.getConversionError());  }  if (retValue.length != 1) {    log.log(Level.SEVERE,("DB_PostgreSQL.convertStatement - Convert Command Number=" + retValue.length + " ("+ oraStatement+ ") - "+ m_convert.getConversionError()));    throw new IllegalArgumentException("DB_PostgreSQL.convertStatement - Convert Command Number=" + retValue.length + " ("+ oraStatement+ ") - "+ m_convert.getConversionError());  }  if (log.isLoggable(Level.FINE)) {    if (!oraStatement.equals(retValue[0]) && retValue[0].indexOf("AD_Error") == -1) {      log.log(Level.FINE,"PostgreSQL =>" + retValue[0] + "<= <"+ oraStatement+ ">");    }  }  Convert.logMigrationScript(oraStatement,retValue[0],null);  return retValue[0];}  }
class C{  public boolean volumeCanBeDeleted(Volume volume){  if ((BlockFullCopyUtils.isVolumeFullCopy(volume,_dbClient)) || (BlockFullCopyUtils.isVolumeFullCopySource(volume,_dbClient))) {    BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(volume);    return fullCopyApiImpl.volumeCanBeDeleted(volume);  }  return true;}  }
class C{  public Statement isNotNull(){  statement.append(" IS NOT NULL");  return this;}  }
class C{  public PennTreebankReader(String treebankHome) throws Exception {  this(treebankHome,null,ViewNames.PARSE_GOLD);}  }
class C{  public TreeViewer build(){  return viewer;}  }
class C{  public void stop(){  if (isNative) {    ((BrowserComponent)internal).stop();  } else {    ((HTMLComponent)internal).cancel();  }}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/hybrid.glsl",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public Action_ createAction_(){  Action_Impl action_=new Action_Impl();  return action_;}  }
class C{  public void autoTune(Long progress){  if (lastAction == ACTION.NOOP) {    if (prevProgress == -1) {      doAction(ACTION.INCREASE,autoTuneFactor,progress);    } else     if (moreThanNum(progress,prevProgress,progressBound)) {      doAction(ACTION.INCREASE,autoTuneFactor,progress);    } else     if (lessThanNum(progress,prevProgress,progressBound)) {      doAction(ACTION.DECREASE,Math.max((prevProgress - progress) / (float)prevProgress,autoTuneFactor),progress);    } else {      ++callsInNoop;      if (callsInNoop >= NOOP_THRESHOLD) {        doAction(speculativeAction,autoTuneFactor,progress);        speculativeAction=speculativeAction == ACTION.INCREASE ? ACTION.DECREASE : ACTION.INCREASE;      }    }  } else   if (lastAction == ACTION.INCREASE) {    if (moreThanNum(progress,prevProgress,autoTuneFactor - progressBound)) {      doAction(ACTION.INCREASE,autoTuneFactor,progress);    } else     if (lessThanNum(progress,prevProgress,progressBound)) {      float drop=Math.max((prevProgress - progress) / (float)prevProgress,autoTuneFactor);      if (drop > autoTuneFactor) {        doAction(ACTION.DECREASE,drop,progress);      } else {        doAction(ACTION.RESTORE,autoTuneFactor,progress);      }    } else {      doAction(ACTION.RESTORE,autoTuneFactor,progress);    }  } else   if (lastAction == ACTION.DECREASE) {    if (moreThanNum(progress,prevProgress,progressBound)) {      doAction(ACTION.DECREASE,autoTuneFactor,progress);    } else {      doAction(ACTION.NOOP,autoTuneFactor,progress);    }  } else   if (lastAction == ACTION.RESTORE) {    doAction(ACTION.NOOP,autoTuneFactor,progress);  }}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  private boolean isInsideString(String line,int position){  if (line.indexOf("\"") < 0) {    return false;  }  int index;  String left=line.substring(0,position);  String right=line.substring(position);  int leftCount=0;  int rightCount=0;  while ((index=left.indexOf("\"")) > -1) {    leftCount++;    left=left.substring(index + 1);  }  while ((index=right.indexOf("\"")) > -1) {    rightCount++;    right=right.substring(index + 1);  }  if (rightCount % 2 != 0 && leftCount % 2 != 0) {    return true;  } else {    return false;  }}  }
class C{  @Override protected void beginBody() throws IOException {  PrintStream out=getPrintStream();  out.println(beginBodyText);}  }
class C{  private FrameworkConfig buildFrameWorkConfig(){  List<SqlOperatorTable> sqlOperatorTables=new ArrayList<>();  sqlOperatorTables.add(SqlStdOperatorTable.instance());  sqlOperatorTables.add(new CalciteCatalogReader(CalciteSchema.from(schema),false,Collections.<String>emptyList(),typeFactory));  return Frameworks.newConfigBuilder().defaultSchema(schema).parserConfig(SqlParser.configBuilder().setLex(Lex.MYSQL).build()).operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables)).build();}  }
class C{  public static void invokeMain(String className,String[] args){  try {    Class.forName(className).getMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  Exception e) {    InternalError error=new InternalError("Failed to invoke main method");    error.initCause(e);    throw error;  }}  }
class C{  javax.xml.transform.Templates processFromNode(Node node,String systemID) throws TransformerConfigurationException {  m_DOMsystemID=systemID;  return processFromNode(node);}  }
class C{  public SampleReader(Reader reader,ParameterFile parameterFile){  this(new MatrixReader(reader,parameterFile.size()),parameterFile);}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  public static void refreshLayout(final JFrame parent,final ZyGraph graph){  checkArguments(parent,graph);  final LayoutWaiter waiter=new LayoutWaiter(graph);  final CEndlessProgressDialog dlg=new CEndlessProgressDialog(parent,Constants.DEFAULT_WINDOW_TITLE,"Calculating the new graph layout" + "...",waiter);  waiter.start();  dlg.setVisible(true);}  }
class C{  public static String ofParameters(CtClass[] paramTypes){  return ofMethod(null,paramTypes);}  }
class C{  int readInt() throws IOException {  mDexFile.readFully(tmpBuf,0,4);  if (isBigEndian) {    return (tmpBuf[3] & 0xff) | ((tmpBuf[2] & 0xff) << 8) | ((tmpBuf[1] & 0xff) << 16)| ((tmpBuf[0] & 0xff) << 24);  } else {    return (tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8) | ((tmpBuf[2] & 0xff) << 16)| ((tmpBuf[3] & 0xff) << 24);  }}  }
class C{  public StatusBarView(Context context){  super(context);}  }
class C{  public static StatisticLevel toLevel(String sArg,Level defaultLevel){  return STATISTIC;}  }
class C{  public void addSubscriber(String subscriber){  if (subscribers == null) {    subscribers=new HashSet<>();  }  subscribers.add(subscriber);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.335 -0500",hash_original_method="BE275DDE2732AB3F4C79CA9D98784573",hash_generated_method="66BE17CD09D5B5BA95935952938962E4") public String resolveType(Context context){  return resolveType(context.getContentResolver());}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static int createOrderIndexToPositionIndex(final ColumnViewer viewer,final int createOrderIndex){  return createOrderIndexToPositionIndex(getColumnOrder(viewer),createOrderIndex);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @PostConstruct void init(){  createRequiredComponents();}  }
class C{  static RightThreadedBinaryTree<Integer> buildLeftLinear(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  for (int i=n; i > 0; i--) {    bt.insert(i);  }  return bt;}  }
class C{  public Schaffers(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public static void reverse(final long[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  long tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public MosaicDefinitionSupplyPair(final MosaicDefinition mosaicDefinition,final Supply supply){  this.mosaicDefinition=mosaicDefinition;  this.supply=supply;  this.validate();}  }
class C{  @Override public int[] createPartition(double[] ratio,int size){  int[] startNewP=new int[ratio.length + 1];  startNewP[0]=0;  double ratioSum=0;  for (int i=1; i < startNewP.length; i++) {    ratioSum+=ratio[i - 1];    startNewP[i]=(int)Math.round(size * ratioSum);  }  int p=0;  int[] part=new int[size];  for (int i=0; i < part.length; i++) {    if (i >= startNewP[p + 1]) {      p++;    }    part[i]=p;  }  return part;}  }
class C{  public SVD(final Matrix A){  this.m=A.rows();  this.n=A.cols();  final int nu=Math.min(m,n);  this.U=new Matrix(m,nu);  this.V=new Matrix(n,n);  this.S=new Matrix(n,n);  this.s=new Array(Math.min(m + 1,n));  final double[] e=new double[n];  final double[] work=new double[m];  final boolean wantu=true;  final boolean wantv=true;  final int nct=Math.min(m - 1,n);  final int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s.$[s.addr.op(k)]=0;      for (int i=k; i < m; i++) {        s.$[s.addr.op(k)]=Math.hypot(s.$[s.addr.op(k)],A.$[A.addr.op(i,k)]);      }      if (s.$[s.addr.op(k)] != 0.0) {        if (A.$[A.addr.op(k,k)] < 0.0) {          s.$[s.addr.op(k)]=-s.$[s.addr.op(k)];        }        for (int i=k; i < m; i++) {          A.$[A.addr.op(i,k)]/=s.$[s.addr.op(k)];        }        A.$[A.addr.op(k,k)]+=1.0;      }      s.$[s.addr.op(k)]=-s.$[s.addr.op(k)];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s.$[s.addr.op(k)] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A.$[A.addr.op(i,k)] * A.$[A.addr.op(i,j)];        }        t=-t / A.$[A.addr.op(k,k)];        for (int i=k; i < m; i++) {          A.$[A.addr.op(i,j)]+=t * A.$[A.addr.op(i,k)];        }      }      e[j]=A.$[A.addr.op(k,j)];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U.$[U.addr.op(i,k)]=A.$[A.addr.op(i,k)];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Math.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A.$[A.addr.op(i,j)];          }        }        for (int j=k + 1; j < n; j++) {          final double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A.$[A.addr.op(i,j)]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V.$[V.addr.op(i,k)]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s.$[nct]=A.$[A.addr.op(nct,nct)];  }  if (m < p) {    s.$[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A.$[A.addr.op(nrt,p - 1)];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U.$[U.addr.op(i,j)]=0.0;      }      U.$[U.addr.op(j,j)]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s.$[s.addr.op(k)] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U.$[U.addr.op(i,k)] * U.$[U.addr.op(i,j)];          }          t=-t / U.$[U.addr.op(k,k)];          for (int i=k; i < m; i++) {            U.$[U.addr.op(i,j)]+=t * U.$[U.addr.op(i,k)];          }        }        for (int i=k; i < m; i++) {          U.$[U.addr.op(i,k)]=-U.$[U.addr.op(i,k)];        }        U.$[U.addr.op(k,k)]=1.0 + U.$[U.addr.op(k,k)];        for (int i=0; i < k - 1; i++) {          U.$[U.addr.op(i,k)]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U.$[U.addr.op(i,k)]=0.0;        }        U.$[U.addr.op(k,k)]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) && (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V.$[V.addr.op(i,k)] * V.$[V.addr.op(i,j)];          }          t=-t / V.$[V.addr.op(k + 1,k)];          for (int i=k + 1; i < n; i++) {            V.$[V.addr.op(i,j)]+=t * V.$[V.addr.op(i,k)];          }        }      }      for (int i=0; i < n; i++) {        V.$[V.addr.op(i,k)]=0.0;      }      V.$[V.addr.op(k,k)]=1.0;    }  }  final int pp=p - 1;  int iter=0;  final double eps=Math.pow(2.0,-52.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= eps * (Math.abs(s.$[s.addr.op(k)]) + Math.abs(s.$[s.addr.op(k + 1)]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        final double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s.$[s.addr.op(ks)]) <= eps * t) {          s.$[s.addr.op(ks)]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Math.hypot(s.$[j],f);          final double cs=s.$[j] / t;          final double sn=f / t;          s.$[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V.$[V.addr.op(i,j)] + sn * V.$[V.addr.op(i,p - 1)];              V.$[V.addr.op(i,p - 1)]=-sn * V.$[V.addr.op(i,j)] + cs * V.$[V.addr.op(i,p - 1)];              V.$[V.addr.op(i,j)]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Math.hypot(s.$[j],f);      final double cs=s.$[j] / t;      final double sn=f / t;      s.$[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U.$[U.addr.op(i,j)] + sn * U.$[U.addr.op(i,k - 1)];          U.$[U.addr.op(i,k - 1)]=-sn * U.$[U.addr.op(i,j)] + cs * U.$[U.addr.op(i,k - 1)];          U.$[U.addr.op(i,j)]=t;        }      }    }  }break;case 3:{final double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s.$[p - 1]),Math.abs(s.$[p - 2])),Math.abs(e[p - 2])),Math.abs(s.$[s.addr.op(k)])),Math.abs(e[k]));final double sp=s.$[p - 1] / scale;final double spm1=s.$[p - 2] / scale;final double epm1=e[p - 2] / scale;final double sk=s.$[s.addr.op(k)] / scale;final double ek=e[k] / scale;final double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;final double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Math.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s.$[j] + sn * e[j];  e[j]=cs * e[j] - sn * s.$[j];  g=sn * s.$[j + 1];  s.$[j + 1]=cs * s.$[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V.$[V.addr.op(i,j)] + sn * V.$[V.addr.op(i,j + 1)];      V.$[V.addr.op(i,j + 1)]=-sn * V.$[V.addr.op(i,j)] + cs * V.$[V.addr.op(i,j + 1)];      V.$[V.addr.op(i,j)]=t;    }  }  t=Math.hypot(f,g);  cs=f / t;  sn=g / t;  s.$[j]=t;  f=cs * e[j] + sn * s.$[j + 1];  s.$[j + 1]=-sn * e[j] + cs * s.$[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U.$[U.addr.op(i,j)] + sn * U.$[U.addr.op(i,j + 1)];      U.$[U.addr.op(i,j + 1)]=-sn * U.$[U.addr.op(i,j)] + cs * U.$[U.addr.op(i,j + 1)];      U.$[U.addr.op(i,j)]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s.$[s.addr.op(k)] <= 0.0) {s.$[s.addr.op(k)]=(s.$[s.addr.op(k)] < 0.0 ? -s.$[s.addr.op(k)] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V.$[V.addr.op(i,k)]=-V.$[V.addr.op(i,k)];}}}while (k < pp) {if (s.$[s.addr.op(k)] >= s.$[s.addr.op(k + 1)]) {break;}double t=s.$[s.addr.op(k)];s.$[s.addr.op(k)]=s.$[s.addr.op(k + 1)];s.$[s.addr.op(k + 1)]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V.$[V.addr.op(i,k + 1)];  V.$[V.addr.op(i,k + 1)]=V.$[V.addr.op(i,k)];  V.$[V.addr.op(i,k)]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U.$[U.addr.op(i,k + 1)];  U.$[U.addr.op(i,k + 1)]=U.$[U.addr.op(i,k)];  U.$[U.addr.op(i,k)]=t;}}k++;}iter=0;p--;}break;}}for (int i=0; i < n; i++) {S.$[S.addr.op(i,i)]=s.$[s.addr.op(i)];}}  }
class C{  public MMRoll(MMRandom rng,int count,int start,int keep){  super(count,start);  this.total=rng.randomInt(this.faces) + this.min;  all.addElement(this.total);  this.keep=keep;}  }
class C{  public void testOmitNormsCombos() throws IOException {  FieldType customType=new FieldType(TextField.TYPE_STORED);  Field norms=new Field("foo","a",customType);  FieldType customType1=new FieldType(TextField.TYPE_STORED);  customType1.setOmitNorms(true);  Field noNorms=new Field("foo","a",customType1);  FieldType customType2=new FieldType();  customType2.setStored(true);  Field noIndex=new Field("foo","a",customType2);  FieldType customType3=new FieldType();  customType3.setStored(true);  customType3.setOmitNorms(true);  Field noNormsNoIndex=new Field("foo","a",customType3);  Field emptyNorms=new Field("bar","a",customType);  assertNotNull(getNorms("foo",norms,norms));  assertNull(getNorms("foo",norms,noNorms));  assertNotNull(getNorms("foo",norms,noIndex));  assertNotNull(getNorms("foo",norms,noNormsNoIndex));  assertNotNull(getNorms("foo",norms,emptyNorms));  assertNull(getNorms("foo",noNorms,noNorms));  assertNull(getNorms("foo",noNorms,noIndex));  assertNull(getNorms("foo",noNorms,noNormsNoIndex));  assertNull(getNorms("foo",noNorms,emptyNorms));  assertNull(getNorms("foo",noIndex,noIndex));  assertNull(getNorms("foo",noIndex,noNormsNoIndex));  assertNull(getNorms("foo",noIndex,emptyNorms));  assertNull(getNorms("foo",noNormsNoIndex,noNormsNoIndex));  assertNull(getNorms("foo",noNormsNoIndex,emptyNorms));  assertNull(getNorms("foo",emptyNorms,emptyNorms));}  }
class C{  public void add(XMLX509Digest xmlX509Digest){  this.constructionElement.appendChild(xmlX509Digest.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public static int numberOfTrailingZeros(long longValue){  int x, y;  if (longValue == 0)   return 64;  int n=63;  y=(int)longValue;  if (y != 0) {    n=n - 32;    x=y;  } else   x=(int)(longValue >>> 32);  y=x << 16;  if (y != 0) {    n=n - 16;    x=y;  }  y=x << 8;  if (y != 0) {    n=n - 8;    x=y;  }  y=x << 4;  if (y != 0) {    n=n - 4;    x=y;  }  y=x << 2;  if (y != 0) {    n=n - 2;    x=y;  }  return n - ((x << 1) >>> 31);}  }
class C{  public CUserViewsModel(final IViewContainer originContainer){  m_originContainer=originContainer;  m_listener=new CViewTableListener();}  }
class C{  public IntBuffer2D(IntBuffer2DConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.xElements=new int[capacity];  this.yElements=new int[capacity];  this.xList=new IntArrayList(xElements);  this.yList=new IntArrayList(yElements);  this.size=0;}  }
class C{  public void prepare(int width,int height){  float lx=(float)(Math.cos(azimuth) * Math.cos(elevation));  float ly=(float)(Math.sin(azimuth) * Math.cos(elevation));  float lz=(float)Math.sin(elevation);  direction=new Vector3f(lx,ly,lz);  direction.normalize();  if (type != DISTANT) {    lx*=distance;    ly*=distance;    lz*=distance;    lx+=width * centreX;    ly+=height * centreY;  }  position=new Vector3f(lx,ly,lz);  realColor.set(new Color(color));  realColor.scale(intensity);  cosConeAngle=(float)Math.cos(coneAngle);}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  @Override public UpdateResponse deleteById(String id) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteById(id);  return ur;}  }
class C{  public synchronized void updateNString(int columnIndex,String x) throws SQLException {  String fieldEncoding=this.fields[columnIndex - 1].getEncoding();  if (fieldEncoding == null || !fieldEncoding.equals("UTF-8")) {    throw new SQLException("Can not call updateNString() when field's character set isn't UTF-8");  }  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    ((com.mysql.jdbc.JDBC4PreparedStatement)this.updater).setNString(columnIndex,x);  } else {    ((com.mysql.jdbc.JDBC4PreparedStatement)this.inserter).setNString(columnIndex,x);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      this.thisRow.setColumnValue(columnIndex - 1,StringUtils.getBytes(x,this.charConverter,fieldEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),getExceptionInterceptor()));    }  }}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof AmmoType)) {    return false;  }  if (getAmmoType() == T_MML) {    if (hasFlag(F_MML_LRM) != ((AmmoType)other).hasFlag(F_MML_LRM)) {      return false;    }  }  if (getAmmoType() == T_AR10) {    if (hasFlag(F_AR10_BARRACUDA) != ((AmmoType)other).hasFlag(F_AR10_BARRACUDA)) {      return false;    }    if (hasFlag(F_AR10_WHITE_SHARK) != ((AmmoType)other).hasFlag(F_AR10_WHITE_SHARK)) {      return false;    }    if (hasFlag(F_AR10_KILLER_WHALE) != ((AmmoType)other).hasFlag(F_AR10_KILLER_WHALE)) {      return false;    }  }  return ((getAmmoType() == ((AmmoType)other).getAmmoType()) && (getRackSize() == ((AmmoType)other).getRackSize()));}  }
class C{  @Override public void read(Kryo kryo,Input input){  int size=input.readInt(true);  --size;  index=new ConcurrentHashIndex<>(size);  for (int i=0; i < size; ++i) {    index.add(input.readString());  }}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  @Override public void executionUnitExported(final ExecutionUnit process,final Element element){  for (  Port port : process.getInnerSources().getAllPorts()) {    Element spacingElement=element.getOwnerDocument().createElement(XML_TAG_PORT_SPACING);    spacingElement.setAttribute(XML_ATTRIBUTE_PORT,XML_ATTRIBUTE_SOURCE + port.getName());    spacingElement.setAttribute(XML_ATTRIBUTE_SPACING,"" + lookupPortSpacing(port));    element.appendChild(spacingElement);  }  for (  Port port : process.getInnerSinks().getAllPorts()) {    Element spacingElement=element.getOwnerDocument().createElement(XML_TAG_PORT_SPACING);    spacingElement.setAttribute(XML_ATTRIBUTE_PORT,XML_ATTRIBUTE_SINK + port.getName());    spacingElement.setAttribute(XML_ATTRIBUTE_SPACING,"" + lookupPortSpacing(port));    element.appendChild(spacingElement);  }}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  private boolean checkDocumentEnd(){  if (reader.getColumn() == 0) {    if ("...".equals(reader.prefix(3)) && Constant.NULL_BL_T_LINEBR.has(reader.peek(3))) {      return true;    }  }  return false;}  }
class C{  public void initObject() throws IOException {  writeCode(INIT_OBJECT);}  }
class C{  private ByteBuffer read(FileChannel channel,int size){  ByteBuffer byteBffer=ByteBuffer.allocate(size);  try {    channel.read(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  byteBffer.rewind();  return byteBffer;}  }
class C{  protected static void printDiagnostic(Diagnostic diagnostic,String indent){  System.out.print(indent);  System.out.println(diagnostic.getMessage());  for (  Diagnostic child : diagnostic.getChildren()) {    printDiagnostic(child,indent + "  ");  }}  }
class C{  public <X extends Throwable>T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {  if (value != null) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  static void invokePropertyChange(Object listener,Object ev){  try {    propertyChangeMethod.invoke(listener,ev);  } catch (  IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'visitorModel'";  db.execSQL(sql);}  }
class C{  private byte[] generateDerivedKey(int bytesNeeded){  byte[] buf=new byte[digest.getDigestSize()];  byte[] key=new byte[bytesNeeded];  int offset=0;  for (; ; ) {    digest.update(password,0,password.length);    digest.update(salt,0,salt.length);    digest.doFinal(buf,0);    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;    System.arraycopy(buf,0,key,offset,len);    offset+=len;    bytesNeeded-=len;    if (bytesNeeded == 0) {      break;    }    digest.reset();    digest.update(buf,0,buf.length);  }  return key;}  }
class C{  public void insertAtHead(T element){  insertAtTail(element);  head=head.prev;}  }
class C{  public HoltWintersData(Map<Long,String> forecastedDatapoints,Map<Long,String> deviationDatapoints){  this._forecastedDatapoints=forecastedDatapoints;  this._deviationDatapoints=deviationDatapoints;}  }
class C{  public static <K,V>Map<K,V> leftShift(Map<K,V> self,Map.Entry<K,V> entry){  self.put(entry.getKey(),entry.getValue());  return self;}  }
class C{  public void resizeCapacity(int newCapacity){  if (newCapacity == capacity_)   return;  totalQuads_=Math.min(totalQuads_,newCapacity);  capacity_=newCapacity;  ByteBuffer tbb=ByteBuffer.allocateDirect(ccQuad2.size * newCapacity * 4);  tbb.order(ByteOrder.nativeOrder());  FloatBuffer tmpTexCoords=tbb.asFloatBuffer();  tmpTexCoords.put(textureCoordinates);  textureCoordinates=tmpTexCoords;  textureCoordinates.position(0);  ByteBuffer vbb=ByteBuffer.allocateDirect(ccQuad3.size * newCapacity * 4);  vbb.order(ByteOrder.nativeOrder());  FloatBuffer tmpVertexCoords=vbb.asFloatBuffer();  tmpVertexCoords.put(vertexCoordinates);  vertexCoordinates=tmpVertexCoords;  vertexCoordinates.position(0);  ByteBuffer isb=ByteBuffer.allocateDirect(6 * newCapacity * 2);  isb.order(ByteOrder.nativeOrder());  ShortBuffer tmpIndices=isb.asShortBuffer();  tmpIndices.put(indices);  indices=tmpIndices;  indices.position(0);  initIndices();  if (withColorArray_) {    ByteBuffer cbb=ByteBuffer.allocateDirect(4 * ccColor4B.size * newCapacity* 4);    cbb.order(ByteOrder.nativeOrder());    FloatBuffer tmpColors=cbb.asFloatBuffer();    tmpColors.put(colors);    colors=tmpColors;    colors.position(0);  }}  }
class C{  protected void loadValue(String sValue){  try {    value=Integer.parseInt(sValue.trim());  } catch (  NumberFormatException nfe) {    revertToDefault();  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  public boolean has(String key){  return urlParams.get(key) != null || streamParams.get(key) != null || fileParams.get(key) != null || urlParamsWithObjects.get(key) != null || fileArrayParams.get(key) != null;}  }
class C{  public static void main(String[] args){  runFilter(new KernelFilter(),args);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public StatusList(RPEntity entity){  this.entityRef=new WeakReference<RPEntity>(entity);  immunities=EnumSet.noneOf(StatusType.class);  statuses=new LinkedList<Status>();}  }
class C{  public File file(){  return file;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.729 -0500",hash_original_method="DB007ED9A7C8404ED556121239348407",hash_generated_method="2A59D95977C369CBFD3E64CC09891369") public void clearShadowLayer(){  hasShadow=false;  nSetShadowLayer(0,0,0,0);}  }
class C{  public static EditorTextField createCommitTextEditor(final Project project,boolean forceSpellCheckOn){  Set<EditorCustomization> features=new HashSet<EditorCustomization>();  VcsConfiguration configuration=VcsConfiguration.getInstance(project);  if (configuration != null) {    boolean enableSpellChecking=forceSpellCheckOn || configuration.CHECK_COMMIT_MESSAGE_SPELLING;    ContainerUtil.addIfNotNull(features,SpellCheckingEditorCustomizationProvider.getInstance().getCustomization(enableSpellChecking));    features.add(new RightMarginEditorCustomization(configuration.USE_COMMIT_MESSAGE_MARGIN,configuration.COMMIT_MESSAGE_MARGIN_SIZE));    features.add(WrapWhenTypingReachesRightMarginCustomization.getInstance(configuration.WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN));  } else {    ContainerUtil.addIfNotNull(features,SpellCheckingEditorCustomizationProvider.getInstance().getEnabledCustomization());    features.add(new RightMarginEditorCustomization(false,-1));  }  features.add(SoftWrapsEditorCustomization.ENABLED);  features.add(AdditionalPageAtBottomEditorCustomization.DISABLED);  EditorTextFieldProvider service=ServiceManager.getService(project,EditorTextFieldProvider.class);  return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(),project,features);}  }
class C{  public void addListener(EventDispatcherListener listener){  mListeners.add(listener);}  }
class C{  public ToHitData guessAirToGroundStrikeToHitModifier(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,MovePath flightPath,Mounted weapon,IGame game,boolean assumeUnderFlightPlan){  if (targetState == null) {    targetState=new EntityState(target);  }  if (shooterState == null) {    shooterState=new EntityState(shooter);  }  if (!weapon.canFire()) {    return new ToHitData(TH_WEAP_CANNOT_FIRE);  }  if (((WeaponType)weapon.getType()).ammoType != AmmoType.T_NA) {    if (weapon.getLinked() == null) {      return new ToHitData(TH_WEAP_NO_AMMO);    }    if (weapon.getLinked().getUsableShotsLeft() == 0) {      return new ToHitData(TH_WEAP_NO_AMMO);    }  }  if (!assumeUnderFlightPlan && !isTargetUnderFlightPath(flightPath,targetState)) {    return new ToHitData(TH_AIR_STRIKE_PATH);  }  ToHitData tohit=new ToHitData(shooter.getCrew().getGunnery(),TH_GUNNERY);  tohit.append(guessToHitModifierHelperForAnyAttack(shooter,shooterState,target,targetState,0,game));  tohit.addModifier(TH_AIR_STRIKE);  return tohit;}  }
class C{  private static String pathConcat(String a,String b){  if (a.length() == 0)   return b;  if (b.length() == 0)   return a;  if (isSlash(a.charAt(a.length() - 1)) || isSlash(b.charAt(0)) || (win32 && (a.charAt(a.length() - 1) == ':'))) {    return a + b;  } else {    return a + File.separatorChar + b;  }}  }
class C{  public boolean isFinal(){  return (results != null) && (resultIndex < results.size()) && (results.get(resultIndex) != null)&& results.get(resultIndex).isFinal();}  }
class C{  public boolean isRejectRemoteRecipient(){  return fieldRejectRemoteRecipient;}  }
class C{  private final int match(String a,int startOffset,int stopOffset,String b){  int i=startOffset;  for (int j=0; j < b.length(); j++) {    if (i >= stopOffset)     return j;    if (a.charAt(i) != b.charAt(j))     return j;    i++;  }  return -1;}  }
class C{  @Deprecated public UpdateRequest scriptParams(Map<String,Object> scriptParams){  updateOrCreateScript(null,null,null,scriptParams);  return this;}  }
class C{  public synchronized boolean awaitEvents(int cnt,long timeout) throws InterruptedException {  long start=U.currentTimeMillis();  long now=start;  while (start + timeout > now) {    if (evtCnt >= cnt)     return true;    wait(start + timeout - now);    now=U.currentTimeMillis();  }  return false;}  }
class C{  private final boolean readEntry(int index,StartEntry se,EndEntry ee){  int offs=indexToFileOffs(index);  for (int i=0; i < 16; i++)   bb.put(i,mapBuf.get(offs + i));  int otherIndex=bb.getInt(0);  boolean isStartEntry=(otherIndex == -1) || (otherIndex > index);  if (isStartEntry) {    se.endIndex=otherIndex;    se.parentIndex=bb.getInt(4);    int m=bb.getShort(8);    se.move=new Move(m & 63,(m >> 6) & 63,(m >> 12) & 15);    se.alpha=bb.getShort(10);    se.beta=bb.getShort(12);    se.ply=bb.get(14);    se.depth=bb.get(15);  } else {    ee.startIndex=otherIndex;    ee.score=bb.getShort(4);    ee.scoreType=bb.getShort(6);    ee.evalScore=bb.getShort(8);    ee.hashKey=bb.getLong(8) & 0x0000ffffffffffffL;  }  return isStartEntry;}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public MarketplaceRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Deprecated public static String encode(String s){  s=java.net.URLEncoder.encode(s);  if (s.indexOf('+') != -1)   s=StringUtil.replace(s,"+","%20",false);  return s;}  }
class C{  public String toString(){  return str();}  }
class C{  private Drawable loadAndTint(Context context,@DrawableRes int drawableId,@ColorRes int tintColor){  Drawable imageDrawable=ContextCompat.getDrawable(context,drawableId);  if (imageDrawable == null) {    throw new IllegalArgumentException("The drawable with id " + drawableId + " does not exist");  }  DrawableCompat.setTint(DrawableCompat.wrap(imageDrawable),tintColor);  return imageDrawable;}  }
class C{  private void addUsers(User[] users,LocalConfiguration configuration){  for (  User user : users) {    configuration.addUser(user.createUser());  }}  }
class C{  public static String byteCountToDisplaySize(final long size){  long localSize=size;  boolean isNegative=false;  if (size < 0) {    localSize=-size;    isNegative=true;  }  String displaySize=FileUtils.byteCountToDisplaySize(localSize);  if (isNegative) {    displaySize="-" + displaySize;  }  return displaySize;}  }
class C{  public static boolean isTrue(int actualDimensionValue){  if (actualDimensionValue >= 0 || actualDimensionValue == Dimension.TRUE) {    return true;  }  return false;}  }
class C{  public static boolean intersectPlaneSphere(double a,double b,double c,double d,double centerX,double centerY,double centerZ,double radius,Vector4d intersectionCenterAndRadius){  double invDenom=1.0 / Math.sqrt(a * a + b * b + c * c);  double dist=(a * centerX + b * centerY + c * centerZ + d) * invDenom;  if (-radius <= dist && dist <= radius) {    intersectionCenterAndRadius.x=centerX + dist * a * invDenom;    intersectionCenterAndRadius.y=centerY + dist * b * invDenom;    intersectionCenterAndRadius.z=centerZ + dist * c * invDenom;    intersectionCenterAndRadius.w=Math.sqrt(radius * radius - dist * dist);    return true;  }  return false;}  }
class C{  public static boolean isInDirectory(final File file,final File directory){  boolean inDirectory;  try {    inDirectory=(directory != null && directory.isDirectory() && file != null && file.isFile() && directory.getCanonicalPath().equalsIgnoreCase(file.getParentFile().getCanonicalPath()));  } catch (  final IOException e) {    inDirectory=false;  }  return inDirectory;}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));}  }
class C{  public final boolean isBlockComment(){  return (this instanceof BlockComment);}  }
class C{  @Override public boolean rowDeleted() throws SQLException {  try {    debugCodeCall("rowDeleted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  private final void augmentTokenList(){  Token[] temp=new Token[size + increment];  System.arraycopy(tokenList,0,temp,0,size);  size+=increment;  tokenList=temp;  for (int i=0; i < increment; i++) {    tokenList[size - i - 1]=createInternalUseOnlyToken();  }}  }
class C{  public PrivateMLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory,boolean delegateToCLR){  super(urls,parent,factory,delegateToCLR);}  }
class C{  private boolean isEmptyLine(String[] line){  String joined=Joiner.on("").useForNull("").join(line);  return StringUtils.isBlank(joined);}  }
class C{  private void checkIteratorHasNext(){  Iterator<Cache.Entry<Object,Object>> iter=jcache(0).iterator();  assertEquals(iter.hasNext(),iter.hasNext());  while (iter.hasNext())   iter.next();  assertFalse(iter.hasNext());}  }
class C{  @Override public void connection_rollback(FilterChain chain,ConnectionProxy connection,Savepoint savePoint) throws SQLException {  super.connection_rollback(chain,connection,savePoint);  connectionLog("{conn " + connection.getId() + "} rollback -> "+ savePoint.getSavepointId());}  }
class C{  SchemaFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof SchemaFactory)     return (SchemaFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    debugPrintln("failed to instantiate " + className);    if (debug)     t.printStackTrace();  }  return null;}  }
class C{  @Override public Properties trackSubSectionBulkVideoDownload(String section,String subSection,String enrollmentId,long videoCount){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  if (section != null && subSection != null) {    aEvent.data.putValue(Keys.COURSE_SECTION,section);    aEvent.data.putValue(Keys.COURSE_SUBSECTION,subSection);  }  aEvent.data.putValue(Keys.NO_OF_VIDEOS,videoCount);  aEvent.properties.putValue(Keys.NAME,Values.BULK_DOWNLOAD_SUBSECTION);  aEvent.setCourseContext(enrollmentId,null,Values.DOWNLOAD_MODULE);  tracker.track(Events.BULK_DOWNLOAD_SUBSECTION,aEvent.properties);  return aEvent.properties;}  }
class C{  public static int showYesNoWarning(final Component parent,final String msg){  return JOptionPane.showConfirmDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);}  }
class C{  public ObjectArrayImmutableBiomeBuffer(BiomeType[] biomes,Vector3i start,Vector3i size){  super(start,size);  this.biomes=biomes.clone();}  }
class C{  public MyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  @Override public void onDirectoryCancel(int queryTypeId){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STORE_NAME;case 2:  return SCOPE;case 3:return PERSIST;default :return null;}}  }
class C{  private synchronized void removeLoader(ClassLoader loader){  int i;  for (i=_loaders.size() - 1; i >= 0; i--) {    WeakReference<ClassLoader> ref=_loaders.get(i);    ClassLoader refLoader=ref.get();    if (refLoader == null)     _loaders.remove(i); else     if (refLoader == loader)     _loaders.remove(i);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void loadFile(final String file,final RDFFormat format) throws Exception {  final AddOp add=new AddOp(new File(file),format);  m_repo.add(add);}  }
class C{  public SslContext sslContext(){  return sslContext;}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("DummyCompleteTestBean");  sb.append("{doNotStreamMe=").append(doNotStreamMe);  sb.append(", _byte=").append(_byte);  sb.append(", _boolean=").append(_boolean);  sb.append(", _char=").append(_char);  sb.append(", _double=").append(_double);  sb.append(", _float=").append(_float);  sb.append(", _int=").append(_int);  sb.append(", _long=").append(_long);  sb.append(", _short=").append(_short);  sb.append(", _byteArr=").append(_byteArr == null ? "null" : "");  for (int i=0; _byteArr != null && i < _byteArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_byteArr[i]);  sb.append(", _booleanArr=").append(_booleanArr == null ? "null" : "");  for (int i=0; _booleanArr != null && i < _booleanArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_booleanArr[i]);  sb.append(", _charArr=").append(_charArr == null ? "null" : "");  for (int i=0; _charArr != null && i < _charArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_charArr[i]);  sb.append(", _doubleArr=").append(_doubleArr == null ? "null" : "");  for (int i=0; _doubleArr != null && i < _doubleArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_doubleArr[i]);  sb.append(", _floatArr=").append(_floatArr == null ? "null" : "");  for (int i=0; _floatArr != null && i < _floatArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_floatArr[i]);  sb.append(", _intArr=").append(_intArr == null ? "null" : "");  for (int i=0; _intArr != null && i < _intArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_intArr[i]);  sb.append(", _longArr=").append(_longArr == null ? "null" : "");  for (int i=0; _longArr != null && i < _longArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_longArr[i]);  sb.append(", _shortArr=").append(_shortArr == null ? "null" : "");  for (int i=0; _shortArr != null && i < _shortArr.length; ++i)   sb.append(i == 0 ? "" : ", ").append(_shortArr[i]);  sb.append(", _byteObj=").append(_byteObj);  sb.append(", _booleanObj=").append(_booleanObj);  sb.append(", _charObj=").append(_charObj);  sb.append(", _doubleObj=").append(_doubleObj);  sb.append(", _floatObj=").append(_floatObj);  sb.append(", _intObj=").append(_intObj);  sb.append(", _longObj=").append(_longObj);  sb.append(", _shortObj=").append(_shortObj);  sb.append(", _byteObjArr=").append(_byteObjArr == null ? "null" : Arrays.asList(_byteObjArr).toString());  sb.append(", _booleanObjArr=").append(_booleanObjArr == null ? "null" : Arrays.asList(_booleanObjArr).toString());  sb.append(", _charObjArr=").append(_charObjArr == null ? "null" : Arrays.asList(_charObjArr).toString());  sb.append(", _doubleObjArr=").append(_doubleObjArr == null ? "null" : Arrays.asList(_doubleObjArr).toString());  sb.append(", _floatObjArr=").append(_floatObjArr == null ? "null" : Arrays.asList(_floatObjArr).toString());  sb.append(", _intObjArr=").append(_intObjArr == null ? "null" : Arrays.asList(_intObjArr).toString());  sb.append(", _longObjArr=").append(_longObjArr == null ? "null" : Arrays.asList(_longObjArr).toString());  sb.append(", _shortObjArr=").append(_shortObjArr == null ? "null" : Arrays.asList(_shortObjArr).toString());  sb.append(", _private_object=").append(_private_object);  sb.append(", _public_object=").append(_public_object);  sb.append(", _protected_object=").append(_protected_object);  sb.append(", _packagescope_object=").append(_packagescope_object);  sb.append(", _objArr=").append(_objArr == null ? "null" : Arrays.asList(_objArr).toString());  sb.append(", nameString='").append(nameString).append('\'');  sb.append(", nameStrings=").append(nameStrings == null ? "null" : Arrays.asList(nameStrings).toString());  sb.append(", collection=").append(collection);  sb.append(", list=").append(list);  sb.append(", map=").append(map);  sb.append(", sortedMap=").append(sortedMap);  sb.append(", set=").append(set);  sb.append(", sortedSet=").append(sortedSet);  sb.append(", vector=").append(vector);  sb.append(", arrayList=").append(arrayList);  sb.append(", linkedList=").append(linkedList);  sb.append(", hashMap=").append(hashMap);  sb.append(", hashtable=").append(hashtable);  sb.append(", treeMap=").append(treeMap);  sb.append(", linkedHashMap=").append(linkedHashMap);  sb.append(", hashSet=").append(hashSet);  sb.append(", treeSet=").append(treeSet);  sb.append(", linkedHashSet=").append(linkedHashSet);  sb.append(", _string='").append(_string).append('\'');  sb.append(", _utilDate=").append(_utilDate);  sb.append(", _sqlDate=").append(_sqlDate);  sb.append(", _sqlTime=").append(_sqlTime);  sb.append(", _sqlTimestamp=").append(_sqlTimestamp);  sb.append(", bigDecimal=").append(bigDecimal);  sb.append(", bigInteger=").append(bigInteger);  sb.append('}');  return sb.toString();}  }
class C{  public String archiveAddress(String address) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("address",address);  String response=HttpClient.getInstance().post(String.format("merchant/%s/archive_address",identifier),params);  JsonObject topElem=parseResponse(response);  return topElem.get("archived").getAsString();}  }
class C{  private int rightmostDip(){  for (int i=n - 2; i >= 0; i--) {    if (index[i] < index[i + 1]) {      return i;    }  }  return -1;}  }
class C{  public UnsignedByte add(UnsignedByte increment){  return valueOf(getValue() + increment.getValue());}  }
class C{  public static Graph subscan(Object o){  return subscan(o,false);}  }
class C{  static String defaultTestClass(Class<?> aClass){  Class<?> outer=aClass;  while (outer.getEnclosingClass() != null) {    outer=outer.getEnclosingClass();  }  return outer.getPackage().getName() + "." + outer.getSimpleName().replaceAll("^Abstract","Dummy")+ "Test";}  }
class C{  public void appendCloseBlockQuoteTag(){  text.append("</blockquote>");}  }
class C{  public ExceptionMessage create(){  return new ExceptionMessage(m_exceptionMessage);}  }
class C{  private static byte[] readAllBytes(InputStream input) throws IOException {  ByteArrayOutputStream result=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int length;  while ((length=input.read(buffer,0,buffer.length)) != -1) {    result.write(buffer,0,length);  }  return result.toByteArray();}  }
class C{  public static Map<String,Object> updateLowLevelCode(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String productId=(String)context.get("productIdTo");  Boolean alsoComponents=(Boolean)context.get("alsoComponents");  Locale locale=(Locale)context.get("locale");  if (alsoComponents == null) {    alsoComponents=Boolean.TRUE;  }  Boolean alsoVariants=(Boolean)context.get("alsoVariants");  if (alsoVariants == null) {    alsoVariants=Boolean.TRUE;  }  Long llc=null;  try {    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();    Map<String,Object> depthResult=dispatcher.runSync("getMaxDepth",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));    llc=(Long)depthResult.get("depth");    List<GenericValue> virtualProducts=EntityQuery.use(delegator).from("ProductAssoc").where("productIdTo",productId,"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();    int virtualMaxDepth=0;    for (    GenericValue oneVirtualProductAssoc : virtualProducts) {      int virtualDepth=0;      GenericValue virtualProduct=EntityQuery.use(delegator).from("Product").where("productId",oneVirtualProductAssoc.getString("productId")).queryOne();      if (virtualProduct.get("billOfMaterialLevel") != null) {        virtualDepth=virtualProduct.getLong("billOfMaterialLevel").intValue();      } else {        virtualDepth=0;      }      if (virtualDepth > virtualMaxDepth) {        virtualMaxDepth=virtualDepth;      }    }    if (virtualMaxDepth > llc.intValue()) {      llc=Long.valueOf(virtualMaxDepth);    }    product.set("billOfMaterialLevel",llc);    product.store();    if (alsoComponents.booleanValue()) {      Map<String,Object> treeResult=dispatcher.runSync("getBOMTree",UtilMisc.toMap("productId",productId,"bomType","MANUF_COMPONENT"));      BOMTree tree=(BOMTree)treeResult.get("tree");      List<BOMNode> products=FastList.newInstance();      tree.print(products,llc.intValue());      for (int i=0; i < products.size(); i++) {        BOMNode oneNode=products.get(i);        GenericValue oneProduct=oneNode.getProduct();        int lev=0;        if (oneProduct.get("billOfMaterialLevel") != null) {          lev=oneProduct.getLong("billOfMaterialLevel").intValue();        }        if (lev < oneNode.getDepth()) {          oneProduct.set("billOfMaterialLevel",Long.valueOf(oneNode.getDepth()));          oneProduct.store();        }      }    }    if (alsoVariants.booleanValue()) {      List<GenericValue> variantProducts=EntityQuery.use(delegator).from("ProductAssoc").where("productId",productId,"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      for (      GenericValue oneVariantProductAssoc : variantProducts) {        GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",oneVariantProductAssoc.getString("productId")).queryOne();        variantProduct.set("billOfMaterialLevel",llc);        variantProduct.store();      }    }  } catch (  Exception e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningUpdateLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put("lowLevelCode",llc);  return result;}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="INFO",message="Loading modules from {file name}",explanation="The controller is initializing its module " + "configuration from the specified properties " + "file or directory"),@LogMessageDoc(level="INFO",message="Loading default modules",explanation="The controller is initializing its module " + "configuration to the default configuration"),@LogMessageDoc(level="ERROR",message="Could not load module configuration file",explanation="The controller failed to read the " + "module configuration file",recommendation="Verify that the module configuration is " + "present. " + LogMessageDoc.CHECK_CONTROLLER),@LogMessageDoc(level="ERROR",message="Could not load default modules",explanation="The controller failed to read the default " + "module configuration",recommendation=LogMessageDoc.CHECK_CONTROLLER)}) public IFloodlightModuleContext loadModulesFromConfig(String fName) throws FloodlightModuleException {  Properties prop=new Properties();  Collection<String> configMods=new ArrayList<>();  if (fName == null) {    logger.info("Loading default modules");    InputStream is=this.getClass().getClassLoader().getResourceAsStream(COMPILED_CONF_FILE);    mergeProperties(is,null,configMods,prop);  } else {    File confFile=new File(fName);    if (!confFile.exists())     throw new FloodlightModuleConfigFileNotFoundException(fName);    logger.info("Loading modules from {}",confFile.getPath());    if (confFile.isFile()) {      mergeProperties(null,confFile,configMods,prop);    } else {      File[] files=confFile.listFiles();      Arrays.sort(files);      for (      File f : files) {        logger.debug("Loading conf.d file {}",f.getPath());        if (f.isFile() && f.getName().matches(".*\\.properties$")) {          mergeProperties(null,f,configMods,prop);        }      }    }  }  return loadModulesFromList(configMods,prop);}  }
class C{  public EliasFanoLongBigList(final LongIterator iterator){  this(iterator,0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void listAvailableServices(BluetoothGatt bluetoothGatt){  Log.d(TAG,"Listing available services:");  for (  BluetoothGattService service : bluetoothGatt.getServices()) {    Log.d(TAG,"Service: " + service.getUuid().toString());    for (    BluetoothGattCharacteristic characteristic : service.getCharacteristics()) {      Log.d(TAG,"|-- Characteristic: " + characteristic.getUuid().toString());    }  }}  }
class C{  public Repositories(){  _repositoriesImpl=new RepositoriesImpl();}  }
class C{  public void addPlayer(String playerName){  gameData.getPlayers().add(playerName);}  }
class C{  public TypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static int listMBeans(MBeanServerConnection server) throws IOException {  return listMBeans(server,null,null);}  }
class C{  public final long readLong() throws IOException {  return byteBuffer.getLong();}  }
class C{  public boolean greaterEqual(RegisterPriority other){  return ordinal() >= other.ordinal();}  }
class C{  public static Map asMap(String json) throws JsonParseException {  return fromJson(json,Map.class);}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public Integer decrypt(Integer value){  return value;}  }
class C{  public synchronized void stopRecordingShow(IConnection conn,String broadcastId,Long flvRecordingMetaDataId){  try {    if (flvRecordingMetaDataId == null) {      log.error("flvRecordingMetaDataId is null");    }    log.debug("** stopRecordingShow: " + conn);    log.debug("### Stop recording show for broadcastId: " + broadcastId + " || "+ conn.getScope().getContextPath());    Object streamToClose=scopeApplicationAdapter.getBroadcastStream(conn.getScope(),broadcastId);    BaseStreamListener listenerAdapter=streamListeners.get(flvRecordingMetaDataId);    log.debug("Stream Closing :: " + flvRecordingMetaDataId);    ClientBroadcastStream stream=(ClientBroadcastStream)streamToClose;    if (stream != null) {      if (stream.getStreamListeners() != null) {        for (        IStreamListener iStreamListener : stream.getStreamListeners()) {          stream.removeStreamListener(iStreamListener);        }      }    }    if (listenerAdapter == null) {      log.debug("Stream Not Found :: " + flvRecordingMetaDataId);      log.debug("Available Streams :: " + streamListeners.size());      for (      Long entryKey : streamListeners.keySet()) {        log.debug("Stored flvRecordingMetaDataId in Map: " + entryKey);      }      FlvRecordingMetaData flvRecordingMetaData=flvRecordingMetaDataDaoImpl.getFlvRecordingMetaDataById(flvRecordingMetaDataId);      flvRecordingMetaData.setStreamReaderThreadComplete(true);      flvRecordingMetaDataDaoImpl.updateFlvRecordingMetaData(flvRecordingMetaData);      throw new IllegalStateException("Could not find Listener to stop! flvRecordingMetaDataId " + flvRecordingMetaDataId);    }    listenerAdapter.closeStream();    streamListeners.remove(flvRecordingMetaDataId);  } catch (  Exception err) {    log.error("[stopRecordingShow]",err);  }}  }
class C{  public IncompatibleRolesException(String message,Object[] params){  super(message,params);}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,CMSUtils.getProvider(sigProvider)).getSignerInfos();}  }
class C{  public Main(String name){  this(name,new PrintWriter(System.err,true));}  }
class C{  public EnvironmentStream(String envVariable,OutputStream defaultStream){  _environmentStream=new EnvironmentLocal<>(envVariable);  _environmentStream.setGlobal(defaultStream);}  }
class C{  public static String format(final Long date){  if (date != null) {    return format(new Date(date),DATE_FORMAT_DEFAULT);  } else {    return getCurrent();  }}  }
class C{  public FixedLengthValueRabaCoder(){}  }
class C{  public void postCompileStep(Compiler compiler){}  }
class C{  protected ImportDeclarationImpl(){  super();}  }
class C{  public Quaterniond rotationYXZ(double angleY,double angleX,double angleZ){  double sx=Math.sin(angleX * 0.5);  double cx=Math.cos(angleX * 0.5);  double sy=Math.sin(angleY * 0.5);  double cy=Math.cos(angleY * 0.5);  double sz=Math.sin(angleZ * 0.5);  double cz=Math.cos(angleZ * 0.5);  double x=cy * sx;  double y=sy * cx;  double z=sy * sx;  double w=cy * cx;  this.x=x * cz + y * sz;  this.y=y * cz - x * sz;  this.z=w * sz - z * cz;  this.w=w * cz + z * sz;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static MMovementConfirm create(MMovement move,boolean checkExisting){  if (checkExisting) {    MMovementConfirm[] confirmations=move.getConfirmations(false);    for (int i=0; i < confirmations.length; i++) {      MMovementConfirm confirm=confirmations[i];      return confirm;    }  }  MMovementConfirm confirm=new MMovementConfirm(move);  confirm.save(move.get_TrxName());  MMovementLine[] moveLines=move.getLines(false);  for (int i=0; i < moveLines.length; i++) {    MMovementLine mLine=moveLines[i];    MMovementLineConfirm cLine=new MMovementLineConfirm(confirm);    cLine.setMovementLine(mLine);    cLine.save(move.get_TrxName());  }  return confirm;}  }
class C{  public boolean verify(X509Certificate cert,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  return verify(cert,CMSUtils.getProvider(sigProvider));}  }
class C{  protected void handlePortStatusMessage(OFPortStatus m,boolean doNotify){  if (sw == null) {    String msg=getSwitchStateMessage(m,"State machine error: switch is null. Should never happen");    throw new SwitchStateException(msg);  }  Collection<PortChangeEvent> changes=sw.processOFPortStatus(m);  if (doNotify) {    for (    PortChangeEvent ev : changes)     switchManager.notifyPortChanged(sw,ev.port,ev.type);  }}  }
class C{  protected Call enqueue(Request request,com.squareup.okhttp.Callback requestCallback){  mCurrentCall=getClient().newCall(request);  if (requestCallback != null)   mCurrentCall.enqueue(requestCallback);  return mCurrentCall;}  }
class C{  private void boundOldItemsToPlayer(final Player player,final Item item){  if (ITEMS_TO_UNBIND.contains(item.getName())) {    item.setBoundTo(null);    return;  }  item.autobind(player.getName());}  }
class C{  private static int indexOfNonDigit(String string,int offset){  for (int i=offset; i < string.length(); i++) {    char c=string.charAt(i);    if (c < '0' || c > '9')     return i;  }  return string.length();}  }
class C{  public void testLoggingEnabledSamplingNotSet() throws Exception {  logging=true;  startUp();  assert logEnabled();}  }
class C{  public CategorySeries(String title){  mTitle=title;}  }
class C{  public boolean isRelative(){  if (relative == null) {    return false;  } else {    return relative;  }}  }
class C{  protected void updateSubSamplingStuff(){  tfNumSubSamples.setEnabled(cbUseSubSampling.isSelected());}  }
class C{  public void chartMouseClicked(int index){  GraphColumn bgc=list.get(index);  if (null == bgc)   return;  MQuery query=bgc.getMQuery(builder.getMGoal());  if (query != null)   AEnv.zoom(query); else   log.warning("Nothing to zoom to - " + bgc);}  }
class C{  public void allRadiusSearch(double d,double p,int kindOfDistance){  int n=this.getNumberOfObjects();  int segment=10;  for (int i=0; i < n; i++) {    this.radiusODSearch(d,p,this.listOfObjects.elementAt(i),kindOfDistance);    if (100 * i / n > segment) {      segment=segment + 10;    }  }}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public static SparkRunner create(){  SparkPipelineOptions options=PipelineOptionsFactory.as(SparkPipelineOptions.class);  options.setRunner(SparkRunner.class);  return new SparkRunner(options);}  }
class C{  public static LastReq parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new LastReq(subDer);  }}  }
class C{  protected void indentOut(){  currentIndent-=indentStep;  if (currentIndent < 0)   currentIndent=0;}  }
class C{  private Symbol implementedIn(MethodSymbol m,TypeSymbol c,Types types){  Symbol impl=null;  for (Scope.Entry e=c.members().lookup(m.name); impl == null && e.scope != null; e=e.next()) {    if (isIgnored(e.sym))     continue;    if (m.overrides(e.sym,(TypeSymbol)m.owner,types,true)) {      impl=e.sym;    }  }  return impl;}  }
class C{  public static void cursorDoubleToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    values.put(key,cursor.getDouble(colIndex));  } else {    values.put(key,(Double)null);  }}  }
class C{  public boolean wasNull() throws SQLException {  return getAndAssertSingletonResultSet().wasNull();}  }
class C{  private void resolveConflict(final ConflictDescription conflictDescription,final ConflictResolution resolution){  if (this.repository == null) {    return;  }  if (!promptForMissingResolutionData(conflictDescription,resolution)) {    return;  }  resolution.addStatusListener(this);  resolution.addStatusListener(conflictResolutionControl);  if (resolution instanceof ExternalConflictResolution) {    ((ExternalConflictResolution)resolution).setConflictResolver(new ResourceChangingConflictResolver(getSite().getShell()));  }  final ResolveConflictsCommand resolver=new ResolveConflictsCommand(repository,resolution);  final ICommandExecutor commandExecutor;  if (resolution instanceof EclipseMergeConflictResolution) {    commandExecutor=UICommandExecutorFactory.newUICommandExecutor(getSite().getShell(),0);  } else {    commandExecutor=UICommandExecutorFactory.newUICommandExecutor(getSite().getShell());  }  commandExecutor.execute(new ResourceChangingCommand(resolver));}  }
class C{  public ShortLookupTable(int offset,short data[][]){  super(offset,data.length);  numComponents=data.length;  numEntries=data[0].length;  this.data=new short[numComponents][];  for (int i=0; i < numComponents; i++) {    this.data[i]=data[i];  }}  }
class C{  protected double calculateLogLikelihood(){  final NodeRef root=treeModel.getRoot();  if (rootPartials == null) {    rootPartials=new double[patternCount * stateCount];  }  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (gammaCategoryRates == null) {    gammaCategoryRates=new double[gammaCategoryCount];  }  for (int i=0; i < gammaCategoryCount; i++) {    gammaCategoryRates[i]=siteModel.getRateForCategory(i);  }  final double mu=siteModel.getMutationRateParameter().getParameterValue(0);  final double k=substitutionRateParameter.getParameterValue(0);  final double lambda=Math.log(2) / halfLifeParameter.getParameterValue(0);  if (nodeTimes == null) {    nodeTimes=new double[treeModel.getNodeCount()];  }  calculateNodeTimes(treeModel,root);  traverse(treeModel,root,mu,k,lambda);  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  double logL=0.0;  for (int i=0; i < patternCount; i++) {    logL+=patternLogLikelihoods[i] * patternWeights[i];  }  if (Double.isNaN(logL)) {    throw new RuntimeException("Likelihood NaN");  }  return logL;}  }
class C{  public static long nanosFromDate(long ms){  Calendar cal=CACHED_CALENDAR.get();  cal.clear();  cal.setTimeInMillis(ms);  return nanosFromCalendar(cal);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VERSIONS;default :return null;}}  }
class C{  @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EXTERNAL_DEFINITION___INTERFACE_1:    setInterface_1((Boolean)newValue);  return;case UmplePackage.EXTERNAL_DEFINITION___NAME_1:setName_1((String)newValue);return;case UmplePackage.EXTERNAL_DEFINITION___CLASS_CONTENT_1:getClassContent_1().clear();getClassContent_1().addAll((Collection<? extends ClassContent_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void addOpaqueTag(WbXmlTagDef tag,OpaqueContentPlugin plugin){  this.opaqueTagByName.put(tag.getNameWithPrefix(),plugin);  this.opaqueTagByToken.put(tag.getToken(),plugin);}  }
class C{  public Object beforeEncode(mxCodec enc,Object obj,Node node){  return obj;}  }
class C{  public synchronized void waitForHex(IHex hex){  loadHexImage(hex);  try {    tracker.waitForID(1);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  private List<List<Solution>> associateToReferencePoint(Population population){  List<List<Solution>> result=new ArrayList<List<Solution>>();  for (int i=0; i < weights.size(); i++) {    result.add(new ArrayList<Solution>());  }  for (  Solution solution : population) {    double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);    double minDistance=Double.POSITIVE_INFINITY;    int minIndex=-1;    for (int i=0; i < weights.size(); i++) {      double distance=pointLineDistance(weights.get(i),objectives);      if (distance < minDistance) {        minDistance=distance;        minIndex=i;      }    }    result.get(minIndex).add(solution);  }  return result;}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public static String toString(HostAddress[] addrs){  String str="";  for (int i=0; i < addrs.length; i++) {    if (addrs[i].type != null) {      str+="address=(host=" + addrs[i].host + ")(port="+ addrs[i].port+ ")(type="+ addrs[i].type+ ")";    } else {      boolean isIPv6=addrs[i].host != null && addrs[i].host.contains(":");      String host=(isIPv6) ? ("[" + addrs[i].host + "]") : addrs[i].host;      str+=host + ":" + addrs[i].port;    }    if (i < addrs.length - 1) {      str+=",";    }  }  return str;}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());      } else       if (((TreeModel.TreeChangedEvent)object).isTreeChanged()) {        System.err.println("Full tree update event - these events currently aren't used\n" + "so either this is in error or a new feature is using them so remove this message.");        updateAllNodes();      } else {      }    }  } else   if (model == branchRateModel) {    if (index == -1) {      updateAllNodes();    } else {      updateNode(treeModel.getNode(index));    }  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model instanceof SiteModel) {    updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  public RosterGroup createGroup(String name){  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Not logged in to server.");  }  if (connection.isAnonymous()) {    throw new IllegalStateException("Anonymous users can't have a roster.");  }  if (groups.containsKey(name)) {    throw new IllegalArgumentException("Group with name " + name + " alread exists.");  }  RosterGroup group=new RosterGroup(name,connection);  groups.put(name,group);  return group;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",Integer.valueOf(source.length),Integer.valueOf(off),Integer.valueOf(len)));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException(MessageFormat.format(Constant.messages.getString("enc2.base64.decode.error.invalidlenght"),Integer.valueOf(len)));  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(MessageFormat.format(Constant.messages.getString("enc2.base64.decode.error.badinput"),Integer.valueOf(source[i] & 0xFF),Integer.valueOf(i)));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public QueueEvent offer(byte[] data,long timeout) throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_offer");  try {    String path=createData(dir + "/" + prefix,data,CreateMode.PERSISTENT_SEQUENTIAL);    String watchID=createData(dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1),null,CreateMode.EPHEMERAL);    Object lock=new Object();    LatchChildWatcher watcher=new LatchChildWatcher(lock);synchronized (lock) {      if (zookeeper.exists(watchID,watcher,true) != null) {        watcher.await(timeout);      }    }    byte[] bytes=zookeeper.getData(watchID,null,null,true);    zookeeper.delete(watchID,-1,true);    return new QueueEvent(watchID,bytes,watcher.getWatchedEvent());  }  finally {    time.stop();  }}  }
class C{  public ObjectWriter withType(Class<?> rootType){  return withType(_config.constructType(rootType));}  }
class C{  void closeUnclosedNodes(){  if (needsDebugData) {    for (    Node node : unpoppedElements) {      Nodes.setFilePositionFor(node,FilePosition.span(Nodes.getFilePositionFor(node),endTok.pos));    }  }  unpoppedElements.clear();}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  private void toEntryValues(Object[] fromRow){  for (int i=0; i < _entryValues.length; ++i) {    _entryValues[i]=_fromCols.get(i).getColumn().getRowValue(fromRow);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private void quadTo(float x1,float y1,float x2,float y2){  mPath.quadTo(x1,y1,mLastX=x2,mLastY=y2);}  }
class C{  @Override public boolean compareCount(int val1,int val2){  return val1 < val2;}  }
class C{  public static ExchangeRate chain(final ExchangeRate r1,final ExchangeRate r2){  final ExchangeRate result=new ExchangeRate();  result.type_=ExchangeRate.Type.Derived;  result.rateChain_=new Pair<ExchangeRate,ExchangeRate>(new ExchangeRate(r1),new ExchangeRate(r2));  if (r1.source_.eq(r2.source_)) {    result.source_=r1.target_;    result.target_=r2.target_;    result.rate_=r2.rate_ / r1.rate_;  } else   if (r1.source_.eq(r2.target_)) {    result.source_=r1.target_;    result.target_=r2.source_;    result.rate_=1.0 / (r1.rate_ * r2.rate_);  } else   if (r1.target_.eq(r2.source_)) {    result.source_=r1.source_;    result.target_=r2.target_;    result.rate_=r1.rate_ * r2.rate_;  } else   if (r1.target_.eq(r2.target_)) {    result.source_=r1.source_;    result.target_=r2.source_;    result.rate_=r1.rate_ / r2.rate_;  } else {    throw new LibraryException("exchange rates not chainable");  }  return result;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  public StrTokenizer(String input,char delim){  this(input);  setDelimiterChar(delim);}  }
class C{  public boolean isShowCustomTextGridY(){  return mShowCustomTextGridY;}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public URIReferenceException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public synchronized int read(){  return (pos < count) ? (buffer.charAt(pos++) & 0xFF) : -1;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  return true;}  }
class C{  public boolean isValidLockdownProfile(){  try {    return true;  } catch (  IllegalArgumentException e) {    Log.w(TAG,"Invalid address",e);    return false;  }}  }
class C{  public void hide(){  view.hide();  resolveDependencyPresenter.hide();}  }
class C{  public static boolean cs_entry(Dcs T,int i,int j,double x){  if (!Dcs_util.CS_TRIPLET(T) || i < 0 || j < 0)   return (false);  if (T.nz >= T.nzmax) {    Dcs_util.cs_sprealloc(T,2 * (T.nzmax));  }  if (T.x != null)   T.x[T.nz]=x;  T.i[T.nz]=i;  T.p[T.nz++]=j;  T.m=Math.max(T.m,i + 1);  T.n=Math.max(T.n,j + 1);  return (true);}  }
class C{  private static boolean addDirectoryDigest(File file,MessageDigest digest,@Nullable IgniteLogger log){  assert file.isDirectory();  File[] files=file.listFiles();  if (files == null)   return true;  for (  File visited : files) {    if (visited.isFile()) {      if (!addFileDigest(visited,digest,log))       return false;    } else     if (visited.isDirectory()) {      if (!addDirectoryDigest(visited,digest,log))       return false;    }  }  return true;}  }
class C{  public String TO_NUMBER(BigDecimal number,int displayType){  if (number == null)   return "NULL";  BigDecimal result=number;  int scale=DisplayType.getDefaultPrecision(displayType);  if (scale > number.scale()) {    try {      result=number.setScale(scale,BigDecimal.ROUND_HALF_UP);    } catch (    Exception e) {    }  }  return result.toString();}  }
class C{  public boolean isDrawTopYLabelEntryEnabled(){  return mDrawTopYLabelEntry;}  }
class C{  boolean isDistributionMessage(){  return this.kind == MESSAGE;}  }
class C{  public String write(String[] list){  return write(list,token);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  doc=WebDoc.create("Help - Post Not Implemented");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public DrmConvertedStatus(int statusCode,byte[] convertedData,int offset){  if (!isValidStatusCode(statusCode)) {    throw new IllegalArgumentException("Unsupported status code: " + statusCode);  }  this.statusCode=statusCode;  this.convertedData=convertedData;  this.offset=offset;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.154 -0500",hash_original_method="085907F485A51FAD6B2086211DEE0B83",hash_generated_method="D9F29EB632250682A89CBB9954F94F02") public boolean hasDelay(){  return delay != -1;}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  private boolean isExtendsWildcard(AnnotatedWildcardType awt){  return awt.getUnderlyingType().getSuperBound() == null;}  }
class C{  public void attachTo(ContextFactory factory){  detach();  this.contextFactory=factory;  this.listener=new DimIProxy(this,IPROXY_LISTEN);  factory.addListener(this.listener);}  }
class C{  public static void removeHandler(String id){  CompleteHandlerRegistry.HANDLER.remove(id);}  }
class C{  public static ByteBuffer convertToSigned16BitSamples(float[] samples){  ByteBuffer converted=ByteBuffer.allocate(samples.length * 2);  converted.order(ByteOrder.LITTLE_ENDIAN);  for (  float sample : samples) {    converted.putShort((short)(sample * Short.MAX_VALUE));  }  return converted;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public XMLString(char[] ch,int offset,int length){  setValues(ch,offset,length);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void startDocument() throws IOException {}  }
class C{  public void addAll(Collection<Individual> newIndividuals){  individuals.addAll(newIndividuals);}  }
class C{  public Compression(){  table=new Entry[TABLE_SIZE];}  }
class C{  public int compareTo(TextureTile that){  if (that == null) {    String msg=Logging.getMessage("nullValue.CacheEntryIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return this.lastUsed < that.lastUsed ? -1 : this.lastUsed == that.lastUsed ? 0 : 1;}  }
class C{  public void registerRootView(SizeMonitoringFrameLayout rootView,int tag,int width,int height,ThemedReactContext context){  final ReactShadowNode rootCSSNode=createRootShadowNode();  rootCSSNode.setReactTag(tag);  rootCSSNode.setThemedContext(context);  rootCSSNode.setStyleWidth(width);  rootCSSNode.setStyleHeight(height);  mShadowNodeRegistry.addRootNode(rootCSSNode);  mOperationsQueue.addRootView(tag,rootView,context);}  }
class C{  public static String toString(Node node,boolean prettyPrint){  Map<String,String> properties=new HashMap<String,String>();  if (prettyPrint) {    properties.put(OutputKeys.INDENT,"yes");    properties.put("{http://xml.apache.org/xslt}indent-amount","2");  }  return toString(node,properties);}  }
class C{  @Override protected boolean validateConnection(Connection conn){  try {    return (!conn.isClosed());  } catch (  SQLException e) {    return false;  }}  }
class C{  @Override public RunIdFileManager createManager(final String fileName,final FactoryData data){  return new RunIdFileManager(fileName,data.flagAppend,data.flagLock,data.flagBuffered,data.uriAdvertise,data.layout,data.buffSize);}  }
class C{  @Override @Reference(authors="D.H.D. West",title="Updating Mean and Variance Estimates: An Improved Method",booktitle="Communications of the ACM, Volume 22 Issue 9") public void put(double val,double weight){  final double nwsum=weight + n;  final double delta=val - m1;  final double rval=delta * weight / nwsum;  m1+=rval;  m2+=n * delta * rval;  n=nwsum;}  }
class C{  private void executeDownload(State state,AndroidHttpClient client,HttpGet request) throws StopRequest, RetryDownload {  InnerState innerState=new InnerState();  byte data[]=new byte[Constants.BUFFER_SIZE];  checkPausedOrCanceled(state);  setupDestinationFile(state,innerState);  addRequestHeaders(innerState,request);  checkConnectivity(state);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_CONNECTING);  HttpResponse response=sendRequest(state,client,request);  handleExceptionalStatus(state,innerState,response);  if (Constants.LOGV) {    Log.v(Constants.TAG,"received response for " + mInfo.mUri);  }  processResponseHeaders(state,innerState,response);  InputStream entityStream=openResponseEntity(state,response);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_DOWNLOADING);  transferData(state,innerState,data,entityStream);}  }
class C{  public AnnotationTypeMismatchException(Method element,String foundType){  super("Incorrectly typed data found for annotation element " + element + " (Found data of type "+ foundType+ ")");  this.element=element;  this.foundType=foundType;}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SASSIGNMENT__VALUE:    setValue((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public static LogisticRegressionResult serializableInstance(){  double[] values=new double[]{1.0,2.0};  return new LogisticRegressionResult("X1",new String[]{"X2"},values,values,1,2,3,values,values,values,1.5,"",0.0);}  }
class C{  public boolean isShowLocalConnectRequests(){  return showLocalConnectRequests;}  }
class C{  public StatementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static EndpointEntry lookup(Endpoint ep){synchronized (endpointTable) {    EndpointEntry entry=endpointTable.get(ep);    if (entry == null) {      entry=new EndpointEntry(ep);      endpointTable.put(ep,entry);      if (gcLatencyRequest == null) {        gcLatencyRequest=GC.requestLatency(gcInterval);      }    }    return entry;  }}  }
class C{  public static Extent maxMemory(){  return HeapGrowthManager.getMaxHeapSize();}  }
class C{  public static void createView(String tableName,String tableColumns) throws SQLException {  if (testSingleHost) {    Statement stmt=sharedConnection.createStatement();    stmt.execute("drop view if exists " + tableName);    stmt.execute("create view " + tableName + " AS ("+ tableColumns+ ") ");    tempViewList.add(tableName);  }}  }
class C{  public ECEFPoint(double x,double y,double z){  setECEF(x,y,z);}  }
class C{  void replace(MatchResult match,String replacement){  Preconditions.checkArgument(match.group().equals(value.substring(match.start(),match.end())),"MatchResult does not match the current value of this string");  value=value.substring(0,match.start()) + replacement + value.substring(match.end());}  }
class C{  protected CompositeElementImpl(){  super();}  }
class C{  public static int[] palette2rgb(ImageLineInt line,PngChunkPLTE pal,PngChunkTRNS trns,int[] buf){  return palette2rgb(line,pal,trns,buf,false);}  }
class C{  public BootZipScanner(String fileName,Supplier<InputStream> streamFactory,int fileLength){  _streamFactory=streamFactory;  try (InputStream is=streamFactory.get()){    if (fileName == null) {      fileName=String.valueOf(is);    }    int length=fileLength;    if (length < 22 + 7) {      return;    }    is.skip(length - 22 - 7);    if (is.read() != 0x50) {      is.skip(6);      if (is.read() != 0x50) {        return;      }    }    if (is.read() == 0x4b && is.read() == 0x05 && is.read() == 0x06) {      _isValid=true;    }    if (_isValid) {      is.skip(6);      _entries=is.read() + (is.read() << 8);      is.skip(4);      _offset=readInt(is);    }  } catch (  Exception e) {    log().log(Level.FINER,e.toString(),e);  } finally {    if (!_isValid) {      log().fine("Invalid Zip scan for " + fileName + " "+ _entries);    }  }}  }
class C{  public void rotateY(float angle){  showMethodWarning("rotateY");}  }
class C{  public boolean containsKey(Object key){  if (cache.containsKey(key))   return true;  if (container.containsKey(key))   return true;  Iterator<String> regexKeys=container.keySet().iterator();  while (regexKeys.hasNext()) {    if (Pattern.matches(regexKeys.next(),(String)key))     return true;  }  return false;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  final void removeThread(Thread thread) throws IllegalThreadStateException {synchronized (threadRefs) {    for (Iterator<Thread> i=threads.iterator(); i.hasNext(); ) {      if (i.next().equals(thread)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public void pauseFlyThrough(){  flyThroughTimer.stop();}  }
class C{  protected SSLContext(SSLContextSpi contextSpi,Provider provider,String protocol){  this.contextSpi=contextSpi;  this.provider=provider;  this.protocol=protocol;}  }
class C{  private static String translate(final String s,final Locale locale){  try {    ResourceBundle bundle=ResourceBundle.getBundle("org.apache.commons.math.MessagesResources",locale);    if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {      return bundle.getString(s);    }  } catch (  MissingResourceException mre) {  }  return s;}  }
class C{  @Override public String globalInfo(){  return "Just stores the statistics in mmemory.";}  }
class C{  public static CurrencyException convertToApi(org.oscm.internal.types.exception.CurrencyException oldEx){  return convertExceptionToApi(oldEx,CurrencyException.class);}  }
class C{  static public TxId2CommitTimeIndex createTransient(){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(TxId2CommitTimeIndex.class.getName());  metadata.setTupleSerializer(new TupleSerializer(new ASCIIKeyBuilderFactory(Bytes.SIZEOF_LONG * 2)));  return (TxId2CommitTimeIndex)BTree.createTransient(metadata);}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public void addUGraphic(UGraphic ug){  graphics.addElement(ug);}  }
class C{  public LingamPatternRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public ProgressMeter(){  printer=new ProgressPrinter();}  }
class C{  protected S_SetImpl(){  super();}  }
class C{  public int toColorInt(){  int r8=Math.round(this.red * 0xFF);  int g8=Math.round(this.green * 0xFF);  int b8=Math.round(this.blue * 0xFF);  int a8=Math.round(this.alpha * 0xFF);  return android.graphics.Color.argb(a8,r8,g8,b8);}  }
class C{  public CompilerError(Exception e){  super(e.getMessage());  this.e=e;}  }
class C{  private void validate(){  final ByteArrayOutputStream array=new ByteArrayOutputStream();  final OutputSerializer serializer=new OutputSerializer(array);  try {    attr.writeObject(serializer);  } catch (  IOException e) {    logger.error("Failed to set attributes",e);  }  content.data=array.toByteArray();  content.timestamp=CRC.cmpCRC(content.data);  valid=true;}  }
class C{  public InactiveController(Game game){  this(game,"Inactive",Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.BOARD_TAKEOVER_INACTIVE_GAMES));}  }
class C{  public void addReference(Reference reference){  if (reference != null) {    for (int idx=0; idx < references.size(); idx++) {      Reference curRef=getReference(idx);      if (curRef.getSequenceValue() > reference.getSequenceValue()) {        references.add(idx,reference);        return;      }    }    references.add(reference);  }}  }
class C{  public TriggerBPodAction(int entityId,int equipId,int targetId){  super(entityId);  podId=equipId;  this.targetId=targetId;}  }
class C{  protected void paintText(final Graphics g,final JComponent c,final Rectangle localTextRect,final String text){  final Graphics2D g2d=g instanceof Graphics2D ? (Graphics2D)g : null;  final AbstractButton b=(AbstractButton)c;  final ButtonModel model=b.getModel();  final FontMetrics fm=g.getFontMetrics();  final int mnemonicIndex=AquaMnemonicHandler.isMnemonicHidden() ? -1 : b.getDisplayedMnemonicIndex();  if (model.isEnabled()) {    g.setColor(b.getForeground());  } else {    g.setColor(defaultDisabledTextColor);  }  SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,localTextRect.x,localTextRect.y + fm.getAscent());}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  private void moveVertices(Map<S2Point,S2Point> mergeMap){  if (mergeMap.isEmpty()) {    return;  }  List<S2Edge> edgesCopy=Lists.newArrayList();  for (  Map.Entry<S2Point,Multiset<S2Point>> edge : this.edges.entrySet()) {    S2Point v0=edge.getKey();    Multiset<S2Point> vset=edge.getValue();    for (    S2Point v1 : vset) {      if (mergeMap.get(v0) != null || mergeMap.get(v1) != null) {        if (!options.getUndirectedEdges() || v0.lessThan(v1)) {          edgesCopy.add(new S2Edge(v0,v1));        }      }    }  }  for (int i=0; i < edgesCopy.size(); ++i) {    S2Point v0=edgesCopy.get(i).getStart();    S2Point v1=edgesCopy.get(i).getEnd();    eraseEdge(v0,v1);    if (mergeMap.get(v0) != null) {      v0=mergeMap.get(v0);    }    if (mergeMap.get(v1) != null) {      v1=mergeMap.get(v1);    }    addEdge(v0,v1);  }}  }
class C{  public boolean intersects(GeoBounds other){  boolean rv=false;  for (  Rectangle2D r1 : rects) {    for (    Rectangle2D r2 : other.rects) {      rv=r1.intersects(r2);      if (rv) {        break;      }    }    if (rv) {      break;    }  }  return rv;}  }
class C{  public void deferOnDragEnd(){  mDeferOnDragEnd=true;}  }
class C{  public Triangle(){  side1=side2=side3=1.0;}  }
class C{  public String skipCountTipText(){  return "If enabled, the count is skipped, ie not output.";}  }
class C{  protected ConstraintImpl(){  super();}  }
class C{  @Override public boolean doCheckFSExists(StorageSystem storage,FileDeviceInputOutput args) throws ControllerException {  _log.info("checking file system existence on array: ",args.getFsName());  boolean isFSExists=true;  try {    String portGroup=findSVMName(args.getFs());    NetAppClusterApi ncApi=new NetAppClusterApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).svm(portGroup).build();    List<String> fs=ncApi.listFileSystems();    if (!fs.isEmpty() && fs.contains(args.getFsName())) {      isFSExists=true;    } else {      isFSExists=false;    }  } catch (  NetAppException e) {    _log.error("NetAppClusterModeDevice::doCheckFSExists failed with an Exception",e);  }  return isFSExists;}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public PyElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        return PARAMETER;      }case 7:    break;case 1:{    return NL;  }case 8:break;case 3:{return IDENTIFIER;}case 9:break;case 5:{return OP;}case 10:break;case 4:{return MARKUP;}case 11:break;case 2:{return SPACE;}case 12:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  protected void addScalarDimension(int i){  for (  Dimension dimension : dimensionList) {    if (dimension.getDimension() == i) {      return;    }  }  dimensionList.add(new Dimension(i));}  }
class C{  protected void computeParameters(){  if (m_SumOfWeights > 0) {    m_Mean=m_SumOfValues / m_SumOfWeights;    double stdDev=Math.sqrt(Math.abs(m_SumOfValuesSq - m_Mean * m_SumOfValues) / m_SumOfWeights);    if (stdDev > 1e-10) {      m_StandardDev=Math.max(m_Precision / (2 * 3),stdDev);    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static DynamicGrpcClient create(MethodDescriptor protoMethod,HostAndPort endpoint,CallConfiguration callConfiguration){  Channel channel=createChannel(endpoint,callConfiguration);  return new DynamicGrpcClient(protoMethod,channel,createExecutorService());}  }
class C{  public static CCMenuItemFont item(String value){  return new CCMenuItemFont(CCLabel.makeLabel(value,_fontName,_fontSize),null,null);}  }
class C{  private void handleLocalAssociatedParams(){  for (  ArrayList<RegisterSpec> ssaRegs : localVariables.values()) {    int sz=ssaRegs.size();    int paramIndex=-1;    int paramCategory=0;    for (int i=0; i < sz; i++) {      RegisterSpec ssaSpec=ssaRegs.get(i);      int ssaReg=ssaSpec.getReg();      paramIndex=getParameterIndexForReg(ssaReg);      if (paramIndex >= 0) {        paramCategory=ssaSpec.getCategory();        addMapping(ssaSpec,paramIndex);        break;      }    }    if (paramIndex < 0) {      continue;    }    tryMapRegs(ssaRegs,paramIndex,paramCategory,true);  }}  }
class C{  public void removeAllAttributes(){  this.attributes=null;}  }
class C{  public void onRedButtonClick(View v){  if (isSubscribed()) {    centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.redbutton));    update();  } else {    generateSubscribeDialog();  }}  }
class C{  public static void startQueryHaveLockedMessages(AsyncQueryHandler handler,long threadId,int token){  ArrayList<Long> threadIds=null;  if (threadId != -1) {    threadIds=new ArrayList<Long>();    threadIds.add(threadId);  }  startQueryHaveLockedMessages(handler,threadIds,token);}  }
class C{  public double localScore(int i){  return localScore(i,new int[0]);}  }
class C{  public static void writeHistogram(TDoubleDoubleHashMap map,String keyCol,String valCol,String file) throws IOException {  writeHistogram(map,keyCol,valCol,file,false);}  }
class C{  public static void waitSomeTime(int seconds){  try {    Thread.sleep(seconds * 1000);  } catch (  InterruptedException e) {  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private static void assertSingleValueQuery(Statement testStmt,String query,Object result) throws Exception {  ResultSet testRs=testStmt.executeQuery(query);  assertTrue(testRs.next());  assertEquals(result,testRs.getObject(1));  assertFalse(testRs.next());  testRs.close();}  }
class C{  public void add(Collection<? extends Annotation> annotations){  for (  Annotation annot : annotations) {    annot.addToIndexes();    monitor.entityAdded(annot.getType().getName());    if (annot instanceof Entity) {      Entity entity=(Entity)annot;      if (Strings.isNullOrEmpty(entity.getValue())) {        entity.setValue(annot.getCoveredText());      }      addToHistory(annot.getCAS(),HistoryEvents.createAdded((Recordable)annot,referrer));    }  }}  }
class C{  public void sendException(final Exception exception,final Map<String,String> properties){  final PropertyMapBuilder builder=new PropertyMapBuilder(properties);  logger.debug(String.format("sendException(%s, %s)",exception.getMessage(),builder.toString()));  if (telemetryClient != null) {    telemetryClient.trackException(exception,builder.build(),null);  }}  }
class C{  void quit(){  setVisible(false);}  }
class C{  public void error(String message,Throwable e){  logger.error(message,e);}  }
class C{  protected void scrollDueToClickInTrack(int dir){  scrollByBlock(dir);}  }
class C{  static public boolean isHttpSeparatorChar(char ch){switch (ch) {case '(':case ')':case '<':case '>':case '@':case ',':case ';':case ':':case '\\':case '"':case '/':case '[':case ']':case '?':case '=':case '{':case '}':case ' ':case (char)0x09:    return true;}return false;}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  double r;  int n=sampleSize();  TetradMatrix submatrix=DataUtils.subMatrix(_covMatrix,indexMap,x,y,z);  r=StatUtils.partialCorrelation(submatrix);  double t=Math.sqrt(n - 2) * (r / Math.sqrt(1. - r * r));  pValue=2.0 * (1.0 - gettDistribution().cumulativeProbability(abs(t)));  boolean independent=pValue > alpha;  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,r));    } else {      if (pValueLogger != null) {        pValueLogger.println(getPValue());      }      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,getPValue()));    }  }  return independent;}  }
class C{  @NotNull public Collection<VirtualFile> retrieveUntrackedFiles() throws VcsException {  if (isReady()) {    verifyPossiblyUntrackedFiles();  } else {    rescanAll();  }synchronized (myDefinitelyUntrackedFiles) {    return new ArrayList<VirtualFile>(myDefinitelyUntrackedFiles);  }}  }
class C{  public GroupChatDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver,String chatId){  super(contentResolver,GroupChatData.CONTENT_URI,GroupChatData.KEY_CHAT_ID,null,chatId);  mChatService=chatService;  mImService=imService;}  }
class C{  public int compareTo(T o){  return -1;}  }
class C{  public final void writeInt(int v) throws IOException {  out.write((v >>> 24) & 0xFF);  out.write((v >>> 16) & 0xFF);  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(4);}  }
class C{  private void writeRegistrationIdentifiers(long triggerProcessKey) throws Exception {  RegistrationIdentifiers regIds=determineRegistrationIds(triggerProcessKey);  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.USER_ID,regIds.getUserId());  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.USER_EMAIL,regIds.getUserMail());}  }
class C{  public ExponentialBackoffScheduler(String packageName,Context context,long baseMilliseconds,long maxMilliseconds){  mPreferencePackage=packageName;  mContext=context;  mBaseMilliseconds=baseMilliseconds;  mMaxMilliseconds=maxMilliseconds;}  }
class C{  public static RelationalOpExpression gtProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),">",new PropertyValueExpression(propertyRight));}  }
class C{  protected boolean isLinkActivationTrigger(SelectEvent event){  return event.isLeftClick();}  }
class C{  private double variance(double p,double totalExampleWeight){  return (p * (1.0d - p)) / totalExampleWeight;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:12:13.872 -0400",hash_original_method="809379BF79F9399301A93C4CE561647E",hash_generated_method="DA6B98CC42ACCEE43DE2B0725E00C56A") public static int maxAbsPcm(byte[] pcmBuf,int offset,int length){  int max=0;  for (int i=0; i < length; i++) {    int pcm=(0xff & pcmBuf[offset++]) + (pcmBuf[offset++] << 8);    if (pcm < 0)     pcm=-pcm;    if (pcm > max)     max=pcm;  }  return max;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.514 -0400",hash_original_method="DB21E175FA436FCA8A0E56DF8C83D0C2",hash_generated_method="0D6F934A903FC33FE71C0EDF4AE0035D") public boolean isStarted(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_STARTED;}  }
class C{  public RangeMarker(int offset,int length){  super(offset,length);}  }
class C{  public void onPurpleButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(PURPLE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_purple));      storeRequestId(requestId,PURPLE_BUTTON);      Log.v("Amazon-IAP",String.format("Sending Request for Sku: %s Request ID: %s" + requestId,getResources().getString(R.string.entitlement_sku_purple),requestId));    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.purplebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  Move readMove(IGameState board,Logic logic){  java.io.BufferedReader in=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));  String s;  try {    System.out.println("Enter move [col row] or press enter to forfeit move: ");    s=in.readLine();  } catch (  java.io.IOException ioe) {    return null;  }  java.util.StringTokenizer st=new java.util.StringTokenizer(s);  int col=-1;  int row=-1;  boolean grabbedCol=false;  boolean grabbedRow=false;  if (st.hasMoreTokens()) {    col=Integer.parseInt(st.nextToken());    grabbedCol=true;  }  if (st.hasMoreTokens()) {    row=Integer.parseInt(st.nextToken());    grabbedRow=true;  }  if (!grabbedRow || !grabbedCol) {    return null;  }  return logic.interpretMove(board,col,row,this);}  }
class C{  @Override public boolean clickAndWaitForNewWindow(Selector obj,long timeout) throws UiObjectNotFoundException {  if (obj.toUiObject2() == null) {    return device.findObject(obj.toUiSelector()).clickAndWaitForNewWindow(timeout);  } else {    return obj.toUiObject2().clickAndWait(Until.newWindow(),timeout);  }}  }
class C{  public void updatePriors(Instance instance) throws Exception {  m_delegate.updatePriors(instance);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  int nodeType;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  nodeType=(int)piNode.getNodeType();  assertEquals("nodeProcessingInstructionNodeTypeAssert1",7,nodeType);}  }
class C{  public void removeElemento(DefFmtElemento elemento){  elementos.remove(elemento);}  }
class C{  public Text(){  this("");}  }
class C{  public TaskDescriptionCompat(){  this(null,null,0);}  }
class C{  private boolean isCompatible(String guacamoleVersion){  return ALLOWED_GUACAMOLE_VERSIONS.contains(guacamoleVersion);}  }
class C{  public synchronized void flush(){  sampleHolder=new SampleHolder(SampleHolder.BUFFER_REPLACEMENT_MODE_NORMAL);  parsing=false;  result=null;  error=null;}  }
class C{  private int hinv64(LongArrayPointer a,boolean smooth){  int nmax=this.nx > this.ny ? this.nx : this.ny;  int log2n=calculateLog2N(nmax);  long[] tmp=new long[(nmax + 1) / 2];  int shift=1;  long bit0=(long)1 << log2n - 1;  long bit1=bit0 << 1;  long bit2=bit0 << 2;  long mask0=-bit0;  long mask1=mask0 << 1;  long mask2=mask0 << 2;  long prnd0=bit0 >> 1;  long prnd1=bit1 >> 1;  long prnd2=bit2 >> 1;  long nrnd0=prnd0 - 1;  long nrnd1=prnd1 - 1;  long nrnd2=prnd2 - 1;  a.set(0,a.get(0) + (a.get(0) >= 0 ? prnd2 : nrnd2) & mask2);  int nxtop=1;  int nytop=1;  int nxf=this.nx;  int nyf=this.ny;  int c=1 << log2n;  int i;  for (int k=log2n - 1; k >= 0; k--) {    c=c >> 1;    nxtop=nxtop << 1;    nytop=nytop << 1;    if (nxf <= c) {      nxtop-=1;    } else {      nxf-=c;    }    if (nyf <= c) {      nytop-=1;    } else {      nyf-=c;    }    if (k == 0) {      nrnd0=0;      shift=2;    }    for (i=0; i < nxtop; i++) {      unshuffle64(a.copy(this.ny * i),nytop,1,tmp);    }    for (int j=0; j < nytop; j++) {      unshuffle64(a.copy(j),nxtop,this.ny,tmp);    }    if (smooth) {      hsmooth64(a,nxtop,nytop);    }    int oddx=nxtop % 2;    int oddy=nytop % 2;    for (i=0; i < nxtop - oddx; i+=2) {      int s00=this.ny * i;      int s10=s00 + this.ny;      for (int j=0; j < nytop - oddy; j+=2) {        long h0=a.get(s00);        long hx=a.get(s10);        long hy=a.get(s00 + 1);        long hc=a.get(s10 + 1);        hx=hx + (hx >= 0 ? prnd1 : nrnd1) & mask1;        hy=hy + (hy >= 0 ? prnd1 : nrnd1) & mask1;        hc=hc + (hc >= 0 ? prnd0 : nrnd0) & mask0;        long lowbit0=hc & bit0;        hx=hx >= 0 ? hx - lowbit0 : hx + lowbit0;        hy=hy >= 0 ? hy - lowbit0 : hy + lowbit0;        long lowbit1=(hc ^ hx ^ hy) & bit1;        h0=h0 >= 0 ? h0 + lowbit0 - lowbit1 : h0 + (lowbit0 == 0 ? lowbit1 : lowbit0 - lowbit1);        a.set(s10 + 1,h0 + hx + hy+ hc >> shift);        a.set(s10,h0 + hx - hy - hc >> shift);        a.set(s00 + 1,h0 - hx + hy - hc >> shift);        a.set(s00,h0 - hx - hy + hc >> shift);        s00+=2;        s10+=2;      }      if (oddy != 0) {        long h0=a.get(s00);        long hx=a.get(s10);        hx=(hx >= 0 ? hx + prnd1 : hx + nrnd1) & mask1;        long lowbit1=hx & bit1;        h0=h0 >= 0 ? h0 - lowbit1 : h0 + lowbit1;        a.set(s10,h0 + hx >> shift);        a.set(s00,h0 - hx >> shift);      }    }    if (oddx != 0) {      int s00=this.ny * i;      for (int j=0; j < nytop - oddy; j+=2) {        long h0=a.get(s00);        long hy=a.get(s00 + 1);        hy=(hy >= 0 ? hy + prnd1 : hy + nrnd1) & mask1;        long lowbit1=hy & bit1;        h0=h0 >= 0 ? h0 - lowbit1 : h0 + lowbit1;        a.set(s00 + 1,h0 + hy >> shift);        a.set(s00,h0 - hy >> shift);        s00+=2;      }      if (oddy != 0) {        long h0=a.get(s00);        a.set(s00,h0 >> shift);      }    }    bit1=bit0;    bit0=bit0 >> 1;    mask1=mask0;    mask0=mask0 >> 1;    prnd1=prnd0;    prnd0=prnd0 >> 1;    nrnd1=nrnd0;    nrnd0=prnd0 - 1;  }  return 0;}  }
class C{  public static CentralServiceId create(String xRoadInstance,String serviceCode){  validateField("xRoadInstance",xRoadInstance);  validateField("serviceCode",serviceCode);  return new CentralServiceId(xRoadInstance,serviceCode);}  }
class C{  private List<NotizenMassnahmeResult> addNotes(BausteinUmsetzung bstUms,List<NotizenMassnahmeResult> massnahmenNotizen) throws CommandException {  List<NotizenMassnahmeResult> copy=new ArrayList<NotizenMassnahmeResult>();  copy.addAll(massnahmenNotizen);  List<MassnahmenUmsetzung> ums=bstUms.getMassnahmenUmsetzungen();  for (  MassnahmenUmsetzung mnums : ums) {    List<NotizenMassnahmeResult> notizVorlagen=TransferData.findMassnahmenVorlageNotiz(mnums,massnahmenNotizen);    for (    NotizenMassnahmeResult notizVorlage : notizVorlagen) {      copy.remove(notizVorlage);      LOG.debug("Adding note for " + bstUms.getTitle() + ", "+ mnums.getKapitel());      Integer dbId=mnums.getDbId();      String elmtTitle=mnums.getTitle();      String noteTitle="Notiz " + mnums.getKapitel();      String text=notizVorlage.notiz.getNotizText();      saveNewNote(dbId,elmtTitle,noteTitle,text);      appendDescription(mnums,notizVorlage.notiz.getNotizText());    }  }  if (copy.size() > 0) {    List<NotizenMassnahmeResult> bstNotizVorlagen=TransferData.findBausteinVorlageNotiz(bstUms,massnahmenNotizen);    for (    NotizenMassnahmeResult bstNotizVorlage : bstNotizVorlagen) {      copy.remove(bstNotizVorlage);      LOG.debug("Adding note for " + bstUms.getTitle());      Integer dbId=bstUms.getDbId();      String elmtTitle=bstUms.getTitle();      String noteTitle="Notiz " + bstUms.getKapitel();      String text=bstNotizVorlage.notiz.getNotizText();      saveNewNote(dbId,elmtTitle,noteTitle,text);    }    LOG.debug("Notes without target object: ");    for (    NotizenMassnahmeResult note : copy) {      Logger.getLogger(this.getClass()).debug(note.notiz.getNotizText());    }  }  return copy;}  }
class C{  public static org.apache.nutch.storage.Host.Builder newBuilder(){  return new org.apache.nutch.storage.Host.Builder();}  }
class C{  protected void validate_return(StorageEvent[] param){}  }
class C{  public static String removeLinebreakCharacters(String s){  if (s == null) {    return null;  }  return LINEBREAK_CHARACTERS.matcher(s).replaceAll(" ");}  }
class C{  public static Kind device(){  return new Kind(DEVICE);}  }
class C{  @Override public String toString(){  return super.toString() + "[left=" + this.left+ ",right="+ this.right+ ",top="+ this.top+ ",bottom="+ this.bottom+ "]";}  }
class C{  public XmlParser(StreamProperties props,Reader r,Charset cs){  this(props,new SaxEventSource(r));  Preconditions.checkNotNull(cs,"cs");}  }
class C{  public static boolean checkNetworkId(String ssid,boolean result){  Log.i("Discovery","Checking ID");  final int message;  boolean exists=false;  if (result)   message=R.string.devices_discovery_toast_success; else   message=R.string.devices_discovery_toast_error;  if (DatabaseController.isPreference(DatabaseController.TAG_NETWORK,"Last")) {    if (DatabaseController.getPreference(DatabaseController.TAG_NETWORK,"Last").equals(getNetworkId(ssid))) {      exists=true;      DatabaseController.handlePreference(DatabaseController.TAG_NETWORK,"Last",null,false);    }  }  return exists;}  }
class C{  public void registerProvider(Class<?> dtoInterface,DtoProvider<?> provider){  dtoInterface2Providers.put(dtoInterface,provider);  dtoImpl2Providers.put(provider.getImplClass(),provider);}  }
class C{  private void initializeBindings(){  final SharedPreferences preferences=getSharedPreferences();  final String storedBindings=preferences.getString(SHARED_PREF_BINDINGS_KEY,null);  try {    if (null != storedBindings) {      if (SensorsDataAPI.sharedInstance(mContext).isDebugMode()) {        Log.v(LOGTAG,"Initialize event bindings: " + storedBindings);      }      final JSONArray bindings=new JSONArray(storedBindings);      mPersistentEventBindings.clear();      for (int i=0; i < bindings.length(); i++) {        final JSONObject event=bindings.getJSONObject(i);        final String targetActivity=JSONUtils.optionalStringKey(event,"target_activity");        mPersistentEventBindings.add(new Pair<String,JSONObject>(targetActivity,event));      }    }  } catch (  final JSONException e) {    Log.w(LOGTAG,"JSON error when initializing saved changes, clearing persistent memory",e);    final SharedPreferences.Editor editor=preferences.edit();    editor.remove(SHARED_PREF_BINDINGS_KEY);    editor.apply();  }  applyVariantsAndEventBindings();}  }
class C{  public boolean isProvisioningRejectButton(){  return readBoolean(RcsSettingsData.PROV_REJECT_BUTTON);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tLook Ahead Depth","L",2,"-L <nr of look ahead steps>"));  newVector.addElement(new Option("\tNr of Good Operations","G",5,"-G <nr of good operations>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private boolean catchBlockHasComment(SourceLineAnnotation srcLine){  if (!LOOK_IN_SOURCE_TO_FIND_COMMENTED_CATCH_BLOCKS) {    return false;  }  SourceFinder sourceFinder=AnalysisContext.currentAnalysisContext().getSourceFinder();  try {    SourceFile sourceFile=sourceFinder.findSourceFile(srcLine.getPackageName(),srcLine.getSourceFile());    int startLine=srcLine.getStartLine();    int scanStartLine=startLine - NUM_CONTEXT_LINES;    if (scanStartLine < 1) {      scanStartLine=1;    }    int offset=sourceFile.getLineOffset(scanStartLine - 1);    if (offset < 0) {      return false;    }    Tokenizer tokenizer=new Tokenizer(UTF8.reader(sourceFile.getInputStreamFromOffset(offset)));    ArrayList<Token> tokenList=new ArrayList<Token>(40);    int eolOfCatchBlockStart=-1;    for (int line=scanStartLine; line < scanStartLine + MAX_LINES; ) {      Token token=tokenizer.next();      int kind=token.getKind();      if (kind == Token.EOF) {        break;      }      if (kind == Token.EOL) {        if (line == startLine) {          eolOfCatchBlockStart=tokenList.size();        }        ++line;      }      tokenList.add(token);    }    if (eolOfCatchBlockStart < 0) {      return false;    }    ListIterator<Token> iter=tokenList.listIterator(eolOfCatchBlockStart);    boolean foundCatch=false;    while (iter.hasPrevious()) {      Token token=iter.previous();      if (token.getKind() == Token.WORD && "catch".equals(token.getLexeme())) {        foundCatch=true;        break;      }    }    if (!foundCatch) {      return false;    }    boolean done=false;    int numLines=0;    int state=START;    int level=0;    do {      if (!iter.hasNext()) {        break;      }      Token token=iter.next();      int type=token.getKind();      String value=token.getLexeme();switch (type) {case Token.EOL:        if (DEBUG) {          System.out.println("Saw token: [EOL]");        }      ++numLines;    if (numLines >= MAX_LINES) {      done=true;    }  break;default :if (DEBUG) {  System.out.println("Got token: " + value);}switch (state) {case START:if ("catch".equals(value)) {  state=CATCH;}break;case CATCH:if ("(".equals(value)) {state=OPEN_PAREN;}break;case OPEN_PAREN:if (")".equals(value)) {if (level == 0) {state=CLOSE_PAREN;} else {--level;}} else if ("(".equals(value)) {++level;}break;case CLOSE_PAREN:if ("{".equals(value)) {state=OPEN_BRACE;}break;case OPEN_BRACE:boolean closeBrace="}".equals(value);if (DEBUG && !closeBrace) {System.out.println("Found a comment in catch block: " + value);}return !closeBrace;}break;}} while (!done);} catch (IOException e) {}return false;}  }
class C{  public ConfigFileServerSet(String serverSetZKPath){  this(ConfigFileWatcher.defaultInstance(),serverSetZKPath);}  }
class C{  public static String hosthashes(final String hostlist) throws MalformedURLException {  String[] hs=CommonPattern.COMMA.split(hostlist);  StringBuilder sb=new StringBuilder(hostlist.length());  for (  String h : hs) {    if (h == null)     continue;    h=h.trim();    if (h.isEmpty())     continue;    h=hosthash(h,h.startsWith("ftp.") ? 21 : 80);    if (h == null || h.length() != 6)     continue;    sb.append(h);  }  return sb.toString();}  }
class C{  public void removeAllRefinementsForShard(int shardNumber){  queuedRefinements.remove(shardNumber);}  }
class C{  public static BigDecimal balance(int p_Account_ID,BigDecimal p_AmtDr,BigDecimal p_AmtCr) throws SQLException {  BigDecimal AmtDr=p_AmtDr;  if (AmtDr == null)   AmtDr=Adempiere.ZERO;  BigDecimal AmtCr=p_AmtCr;  if (AmtCr == null)   AmtCr=Adempiere.ZERO;  BigDecimal balance=AmtDr.subtract(AmtCr);  if (p_Account_ID != 0) {    String sql="SELECT AccountType, AccountSign " + "FROM C_ElementValue " + "WHERE C_ElementValue_ID=?";    PreparedStatement pstmt=Adempiere.prepareStatement(sql);    pstmt.setInt(1,p_Account_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      String AccountType=rs.getString(1);      String AccountSign=rs.getString(2);      if (AccountSign.equals("N")) {        if (AccountType.equals("A") || AccountType.equals("E"))         AccountSign="D"; else         AccountSign="C";      }      if (AccountSign.equals("C"))       balance=AmtCr.subtract(AmtDr);    }    rs.close();    pstmt.close();  }  return balance;}  }
class C{  public static SetContextResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SetContextResponse object=new SetContextResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"setContextResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (SetContextResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.set_return(null);        reader.next();        reader.next();      } else {        object.set_return(VasaProviderInfo.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static Post fromFile(final File file) throws FileNotFoundException, IOException, InvalidPostFormatException {  try (BufferedReader br=new BufferedReader(new FileReader(file))){    final XmlRpcStruct c=FileParser.parseFile(br);    final Post result=new Post();    result.fromXmlRpcStruct(c);    return result;  } }  }
class C{  public int intValue(){  return 0;}  }
class C{  public void commit() throws IOException {  if (this.file == null)   return;  File bakfile=new File(this.file.getAbsolutePath() + ".bak");  try {    Files.copy(this.file,bakfile);  } catch (  final IOException e) {    this.file.createNewFile();  }  @SuppressWarnings("unchecked") TreeMap<String,Entry> tclone=(TreeMap<String,Entry>)this.clone();  final BufferedWriter writer=new BufferedWriter(new FileWriter(this.file));  try {    final BufferedReader reader=new BufferedReader(new FileReader(bakfile));    String s, sorig;    String key;    int i;    while ((sorig=reader.readLine()) != null) {      if (sorig.startsWith("##") || sorig.isEmpty()) {        writer.write(sorig + "\n");        continue;      }      if (sorig.startsWith("#")) {        s=sorig.substring(1).trim();      } else {        s=sorig;      }      if (s.contains("#")) {        i=s.indexOf("#");        s=s.substring(0,i).trim();      }      if (s.contains("=")) {        i=s.indexOf("=");        key=s.substring(0,i).trim();      } else {        key=s.trim();      }      if (!key.isEmpty()) {        Entry e=this.get(key);        if (e != null) {          writer.write(e.toString());          tclone.remove(key);        }        writer.write("\n");      } else {        writer.write(sorig + "\n");      }    }    reader.close();    bakfile.delete();  } catch (  final IOException e) {  }  Iterator<Map.Entry<String,Entry>> ie=tclone.entrySet().iterator();  while (ie.hasNext()) {    Object e=ie.next();    writer.write(e.toString() + "\n");  }  writer.close();}  }
class C{  private void processFeaturesAdded(final Map<String,String> changes){  for (  final Entry<String,String> entry : changes.entrySet()) {    if (!features.containsKey(entry.getKey())) {      features.put(entry.getKey(),entry.getValue());      fireFeatureEnabled(entry.getKey(),entry.getValue());    }  }}  }
class C{  public MiniAdmin(String jdbcUrl) throws SQLException {  this(jdbcUrl,new Properties());}  }
class C{  public void destroy(){  if (completionExecutor != null) {    completionExecutor.shutdown();  }}  }
class C{  public void syncIpsecStatusToLocal(String ipsecStatus) throws LocalRepositoryException {  final String prefix="syncIpsecStateToLocal(): ";  _log.debug(prefix);  final String[] cmd={_IPSECTOOL_CMD,IPSEC_SYNC_STATUS,ipsecStatus};  exec(prefix,cmd);  _log.info(prefix + "Success!");}  }
class C{  protected void removeStartupModeOnDisk(){  _log.info("Remove bootmode file");  File bootModeFile=new File(dbDir,Constants.STARTUPMODE);  bootModeFile.delete();}  }
class C{  @Override public final String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append("Document<");  for (int i=0; i < fields.size(); i++) {    IndexableField field=fields.get(i);    buffer.append(field.toString());    if (i != fields.size() - 1) {      buffer.append(" ");    }  }  buffer.append(">");  return buffer.toString();}  }
class C{  public XMLString emptystr(){  return XString.EMPTYSTRING;}  }
class C{  public ByteString fileKey(KeyBag keyBag,ICloud.MBSFile file){  return fileKey(keyBag,file,aesWraps.get(),sha256s.get());}  }
class C{  public ValidateQueryRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  @Override protected boolean isValidChar(char ch){  return Character.isLetterOrDigit(ch) || ch == '_' || ch == '.';}  }
class C{  public static CopyParticipant[] loadCopyParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,CopyArguments arguments,IParticipantDescriptorFilter filter,String affectedNatures[],SharableParticipants shared){  RefactoringParticipant[] participants=fgCopyInstance.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);  CopyParticipant[] result=new CopyParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  public LookupSubtable read(int type,RandomAccessFile raf,int offset) throws IOException {  LookupSubtable s=null;switch (type) {case 1:    s=SingleSubst.read(raf,offset);  break;case 2:break;case 3:break;case 4:s=LigatureSubst.read(raf,offset);break;case 5:break;case 6:break;}return s;}  }
class C{  public static String clearEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotClearCache",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    utilCache.clear();    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.clearCache",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_EVENT_MESSAGE_",errMsg);  } else {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotClearCacheNotFoundName",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public NetVisualizerPanel(){  initComponents();  initBoard();}  }
class C{  public ObjectState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState){  super(id,deferred,entryActions,exitActions,pseudoState);}  }
class C{  boolean isOpaqueDrawn(){  return (mAttrs.format == PixelFormat.OPAQUE || mAttrs.type == TYPE_WALLPAPER) && isDrawnLw() && mWinAnimator.mAnimation == null && (mAppToken == null || mAppToken.mAppAnimator.animation == null);}  }
class C{  public void schedule(TimerTask task,long delay,long period){  TimerTaskWrapper taskWrapper=new TimerTaskWrapper(task);  wrappedTasks.put(task,taskWrapper);  timer.schedule(taskWrapper,delay,period);}  }
class C{  public String sqlObject_createForeignKey(String vendorName,String catalogName,String schemaName,String keyName,String localTable,ArrayList<String> localColumns,String foreignTable,ArrayList<String> foreignColumns,String matchType,String onDelete,String onUpdate,boolean isDeferrable,boolean isDeferred){  keyName=normalizeIdentifier(vendorName,keyName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_createForeignKey(catalogName,schemaName,keyName,localTable,localColumns,foreignTable,foreignColumns,matchType,onDelete,onUpdate,isDeferrable,isDeferred);}  }
class C{  public AuthorData(String displayName,String sortKey){  DisplayName=displayName.intern();  SortKey=sortKey != null ? sortKey.intern() : DisplayName.toLowerCase().intern();}  }
class C{  public final void reset(byte[] encoded) throws IOException {  buffer=encoded;  next();}  }
class C{  public void store(final long address,final long value,final int length){  Preconditions.checkArgument(address >= 0,"Error: Argument address can't be less than 0");  Preconditions.checkArgument(length > 0,"Error: Argument length must be bigger than 0");  memory.store(address,getData(value,length));}  }
class C{  public static URI datastorePathToUri(String path){  if (path == null) {    return null;  }  int i=path.indexOf("] ");  if (i <= 0) {    throw new IllegalArgumentException("Invalid datastore path " + path);  }  String dsName=path.substring(1,i);  String pathOnly=path.substring(i + 2);  return URI.create(SCHEME_DATASTORE + "://" + dsName+ "/"+ stripLeadingSlashes(pathOnly));}  }
class C{  @Override protected StorageSystem queryResource(URI id){  ArgValidator.checkUri(id);  StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  return system;}  }
class C{  public Iterable<Object> loadAll(InputStream yaml){  return loadAll(new UnicodeReader(yaml));}  }
class C{  public static void main(String[] args){  TestLinkOption tester=new TestLinkOption();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  public void increment(){  super.set(Long.valueOf(super.get().longValue() + 1));}  }
class C{  private void adjustForHSB(boolean wantsHSB,Rectangle available,Rectangle hsbR,Insets vpbInsets){  int oldHeight=hsbR.height;  if (wantsHSB) {    int hsbHeight=Math.max(0,Math.min(available.height,hsb.getPreferredSize().height));    available.height-=hsbHeight;    hsbR.y=available.y + available.height + vpbInsets.bottom;    hsbR.height=hsbHeight;  } else {    available.height+=oldHeight;  }}  }
class C{  public static String base64UUID(){  return TIME_UUID_GENERATOR.getBase64UUID();}  }
class C{  public static ICreateFrom create(GridTab mTab){  int AD_Table_ID=Env.getContextAsInt(Env.getCtx(),mTab.getWindowNo(),"BaseTable_ID");  ICreateFrom retValue=null;  Class<? extends ICreateFrom> cl=s_registeredClasses.get(AD_Table_ID);  if (cl != null) {    try {      java.lang.reflect.Constructor<? extends ICreateFrom> ctor=cl.getConstructor(GridTab.class);      retValue=ctor.newInstance(mTab);    } catch (    Throwable e) {      s_log.log(Level.SEVERE,e.getLocalizedMessage(),e);      return null;    }  }  if (retValue == null) {    s_log.info("Unsupported AD_Table_ID=" + AD_Table_ID);    return null;  }  return retValue;}  }
class C{  public String invertSelectionTipText(){  return "Determines whether action is to select or delete." + " If set to true, only the specified attributes will be kept;" + " If set to false, specified attributes will be deleted.";}  }
class C{  public OPVocabulary(){  super();}  }
class C{  public void validate(){}  }
class C{  @HLEFunction(nid=0xBD123D9E,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelDelaySysClockThread(TPointer64 sysclocksPointer){  long sysclocks=sysclocksPointer.getValue();  int micros=SystemTimeManager.hleSysClock2USec32(sysclocks);  hleKernelDelayThread(micros,false);  return 0;}  }
class C{  public static HierarchicalAggregateEntity sort(HierarchicalAggregateEntity result,List<SortOption> sortOptions){  SortedSet<Map.Entry<String,HierarchicalAggregateEntity>> tmp=sortByValue(result,sortOptions);  result.setSortedList(tmp);  result.setChildren(null);  for (  Map.Entry<String,HierarchicalAggregateEntity> entry : tmp) {    sort(entry.getValue(),sortOptions);  }  return result;}  }
class C{  public boolean updateDownload(DownloadInfo di){  ContentValues cv=new ContentValues();  cv.put(DownloadColumns.INDEX,di.mIndex);  cv.put(DownloadColumns.FILENAME,di.mFileName);  cv.put(DownloadColumns.URI,di.mUri);  cv.put(DownloadColumns.ETAG,di.mETag);  cv.put(DownloadColumns.TOTALBYTES,di.mTotalBytes);  cv.put(DownloadColumns.CURRENTBYTES,di.mCurrentBytes);  cv.put(DownloadColumns.LASTMOD,di.mLastMod);  cv.put(DownloadColumns.STATUS,di.mStatus);  cv.put(DownloadColumns.CONTROL,di.mControl);  cv.put(DownloadColumns.NUM_FAILED,di.mNumFailed);  cv.put(DownloadColumns.RETRY_AFTER,di.mRetryAfter);  cv.put(DownloadColumns.REDIRECT_COUNT,di.mRedirectCount);  return updateDownload(di,cv);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession();  WebSessionCtx wsc=WebSessionCtx.get(request);  ctx=wsc.ctx;  if (ctx == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Menu_ID=WebUtil.getParameterAsInt(request,"AD_Menu_ID");  int AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");  AD_Language=Env.getAD_Language(ctx);  int AD_Workflow_ID=getAD_Workflow_ID(AD_Menu_ID);  loadWorkflow(ctx,AD_Workflow_ID,sess);  MWorkflow wf=(MWorkflow)sess.getAttribute(WORKFLOW);  MWFNode[] nodes=(MWFNode[])sess.getAttribute(NODES);  ArrayList nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  int[][] imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  int activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  WebDoc doc=preparePage("loginInfo");  doc=createLayout(doc,wf,activeNode,nodes,nodes_ID,imageMap);  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  void calcArcDirections(boolean[][] edges,boolean[][] arrows){  int i, j, k, m;  boolean bFound;  do {    bFound=false;    for (i=0; i < maxn(); i++) {      for (j=0; j < maxn(); j++) {        if (i != j && arrows[i][j]) {          for (k=0; k < maxn(); k++) {            if (i != k && j != k && edges[j][k] && !edges[i][k] && !arrows[j][k] && !arrows[k][j]) {              arrows[j][k]=true;              bFound=true;            }          }        }      }    }    for (i=0; i < maxn(); i++) {      for (j=0; j < maxn(); j++) {        if (i != j && arrows[i][j]) {          for (k=0; k < maxn(); k++) {            if (i != k && j != k && edges[i][k] && arrows[j][k] && !arrows[i][k] && !arrows[k][i]) {              arrows[i][k]=true;              bFound=true;            }          }        }      }    }    for (i=0; i < maxn(); i++) {      for (j=0; j < maxn(); j++) {        if (i != j && arrows[i][j]) {          for (k=0; k < maxn(); k++) {            if (k != i && k != j && arrows[k][j] && !edges[k][i]) {              for (m=0; m < maxn(); m++) {                if (m != i && m != j && m != k && edges[m][i] && !arrows[m][i] && !arrows[i][m] && edges[m][j] && !arrows[m][j] && !arrows[j][m] && edges[m][k] && !arrows[m][k] && !arrows[k][m]) {                  arrows[m][j]=true;                  bFound=true;                }              }            }          }        }      }    }    for (i=0; i < maxn(); i++) {      for (j=0; j < maxn(); j++) {        if (i != j && arrows[j][i]) {          for (k=0; k < maxn(); k++) {            if (k != i && k != j && edges[k][j] && !arrows[k][j] && !arrows[j][k] && edges[k][i] && !arrows[k][i] && !arrows[i][k]) {              for (m=0; m < maxn(); m++) {                if (m != i && m != j && m != k && edges[m][i] && !arrows[m][i] && !arrows[i][m] && edges[m][k] && !arrows[m][k] && !arrows[k][m]) {                  arrows[i][m]=true;                  arrows[k][m]=true;                  bFound=true;                }              }            }          }        }      }    }    if (!bFound) {      i=0;      while (!bFound && i < maxn()) {        j=0;        while (!bFound && j < maxn()) {          if (edges[i][j] && !arrows[i][j] && !arrows[j][i]) {            arrows[i][j]=true;            bFound=true;          }          j++;        }        i++;      }    }  } while (bFound);}  }
class C{  public final MutableDouble3D addIn(final double x,final double y,final double z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public int sendMessageWithClient(Object newMessage){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    Long room_id=currentClient.getRoom_id();    log.debug("room_id: " + room_id);    log.debug("currentClient.getIsChatNotification(): " + currentClient.getIsChatNotification());    if (currentClient.getIsChatNotification()) {      room_id=currentClient.getChatUserRoomId();    }    ArrayList messageMap=(ArrayList)newMessage;    String messageText=messageMap.get(4).toString() + " ";    messageMap.set(1,parseDateAsTimeString());    LinkedList<String[]> parsedStringObjects=ChatString.getInstance().parseChatString(messageText);    log.debug("size:" + messageMap.size());    messageMap.add(parsedStringObjects);    newMessage=messageMap;    HashMap<String,Object> hsm=new HashMap<String,Object>();    hsm.put("client",currentClient);    hsm.put("message",newMessage);    List<HashMap<String,Object>> myChatList=myChats.get(room_id);    if (myChatList == null)     myChatList=new LinkedList<HashMap<String,Object>>();    if (myChatList.size() == chatRoomHistory)     myChatList.remove(0);    myChatList.add(hsm);    myChats.put(room_id,myChatList);    log.debug("SET CHATROOM: " + room_id);    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());            if (rcl == null) {              continue;            }            if (rcl.getIsAVClient()) {              continue;            }            if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {              continue;            }            log.debug("*..*idremote room_id: " + room_id);            log.debug("*..*my idstreamid room_id: " + rcl.getRoom_id());            if (room_id != null && room_id.equals(rcl.getRoom_id())) {              ((IServiceCapableConnection)conn).invoke("sendVarsToMessageWithClient",new Object[]{hsm},this);              log.debug("sending sendVarsToMessageWithClient to " + conn);            } else             if (rcl.getIsChatNotification()) {              if (room_id.equals(rcl.getChatUserRoomId()) && room_id != null) {                ((IServiceCapableConnection)conn).invoke("sendVarsToMessageWithClient",new Object[]{hsm},this);              }            }          }        }      }    }  } catch (  Exception err) {    log.error("[ChatService sendMessageWithClient] ",err);    return -1;  }  return 1;}  }
class C{  public CampaignConfigurationBuilder withLocation(long locationId){  Location location=new Location();  location.setId(locationId);  return withCriterion(location);}  }
class C{  protected static boolean isSpecifyIdentityGapLimit(){  return "true".equalsIgnoreCase(System.getProperty("org.jumpmind.symmetric.ddl.gap.limit","false"));}  }
class C{  public final void add(float scalar){  m00+=scalar;  m01+=scalar;  m02+=scalar;  m03+=scalar;  m10+=scalar;  m11+=scalar;  m12+=scalar;  m13+=scalar;  m20+=scalar;  m21+=scalar;  m22+=scalar;  m23+=scalar;  m30+=scalar;  m31+=scalar;  m32+=scalar;  m33+=scalar;}  }
class C{  @Override public StringBuffer format(long number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  public UserAction(String name){  this.name=name;}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public void preloadFirstDemo(){  DemoModule demo=addDemo(new InternalFrameDemo(this));  setDemo(demo);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        LOG.log(Level.INFO,e.getMessage(),e);      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCT_MEMBER;}  }
class C{  public LocalDate withFields(ReadablePartial partial){  if (partial == null) {    return this;  }  return withLocalMillis(getChronology().set(partial,getLocalMillis()));}  }
class C{  public ComplianceFeature checkPolicyState(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  policy=new ComplianceFeature();  policy.setFeatureCode(operation.getCode());switch (operation.getCode()) {case Constants.Operation.CAMERA:    return checkCameraPolicy(operation);case Constants.Operation.INSTALL_APPLICATION:  return checkInstallAppPolicy(operation);case Constants.Operation.UNINSTALL_APPLICATION:return checkUninstallAppPolicy(operation);case Constants.Operation.ENCRYPT_STORAGE:return checkEncryptPolicy(operation);case Constants.Operation.PASSCODE_POLICY:return checkPasswordPolicy();case Constants.Operation.WIFI:return checkWifiPolicy(operation);case Constants.Operation.WORK_PROFILE:return checkWorkProfilePolicy(operation);case Constants.Operation.DISALLOW_ADJUST_VOLUME:case Constants.Operation.DISALLOW_CONFIG_BLUETOOTH:case Constants.Operation.DISALLOW_CONFIG_CELL_BROADCASTS:case Constants.Operation.DISALLOW_CONFIG_CREDENTIALS:case Constants.Operation.DISALLOW_CONFIG_MOBILE_NETWORKS:case Constants.Operation.DISALLOW_CONFIG_TETHERING:case Constants.Operation.DISALLOW_CONFIG_VPN:case Constants.Operation.DISALLOW_CONFIG_WIFI:case Constants.Operation.DISALLOW_APPS_CONTROL:case Constants.Operation.DISALLOW_CREATE_WINDOWS:case Constants.Operation.DISALLOW_CROSS_PROFILE_COPY_PASTE:case Constants.Operation.DISALLOW_DEBUGGING_FEATURES:;case Constants.Operation.DISALLOW_FACTORY_RESET:case Constants.Operation.DISALLOW_ADD_USER:case Constants.Operation.DISALLOW_INSTALL_APPS:case Constants.Operation.DISALLOW_INSTALL_UNKNOWN_SOURCES:case Constants.Operation.DISALLOW_MODIFY_ACCOUNTS:case Constants.Operation.DISALLOW_MOUNT_PHYSICAL_MEDIA:case Constants.Operation.DISALLOW_NETWORK_RESET:case Constants.Operation.DISALLOW_OUTGOING_BEAM:case Constants.Operation.DISALLOW_OUTGOING_CALLS:case Constants.Operation.DISALLOW_REMOVE_USER:case Constants.Operation.DISALLOW_SAFE_BOOT:case Constants.Operation.DISALLOW_SHARE_LOCATION:case Constants.Operation.DISALLOW_SMS:case Constants.Operation.DISALLOW_UNINSTALL_APPS:case Constants.Operation.DISALLOW_UNMUTE_MICROPHONE:case Constants.Operation.DISALLOW_USB_FILE_TRANSFER:case Constants.Operation.ALLOW_PARENT_PROFILE_APP_LINKING:case Constants.Operation.ENSURE_VERIFY_APPS:case Constants.Operation.AUTO_TIME:case Constants.Operation.ENABLE_ADMIN:case Constants.Operation.SET_SCREEN_CAPTURE_DISABLED:case Constants.Operation.SET_STATUS_BAR_DISABLED:if (applicationManager.isPackageInstalled(Constants.SERVICE_PACKAGE_NAME)) {CommonUtils.callSystemApp(context,operation.getCode(),Boolean.toString(operation.isEnabled()),null);policy.setCompliance(true);return policy;} else {throw new AndroidAgentException("Invalid operation code received");}case Constants.Operation.APP_RESTRICTION:return checkAppRestrictionPolicy(operation);default :throw new AndroidAgentException("Invalid operation code received");}}  }
class C{  public static Trends createTrends(final String rawJSON) throws TwitterException {  try {    return trendsConstructor.newInstance(rawJSON);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new TwitterException(e);  }catch (  final InvocationTargetException e) {    throw new AssertionError(e);  }}  }
class C{  public ToStringBuilder append(float value){  style.append(buffer,null,value);  return this;}  }
class C{  private int addOrSetBigram(String word1,String word2,int frequency,boolean addFrequency){  Node firstWord=searchWord(mRoots,word1,0,null);  Node secondWord=searchWord(mRoots,word2,0,null);  LinkedList<NextWord> bigram=firstWord.ngrams;  if (bigram == null || bigram.size() == 0) {    firstWord.ngrams=new LinkedList<NextWord>();    bigram=firstWord.ngrams;  } else {    for (    NextWord nw : bigram) {      if (nw.word == secondWord) {        if (addFrequency) {          nw.frequency+=frequency;        } else {          nw.frequency=frequency;        }        return nw.frequency;      }    }  }  NextWord nw=new NextWord(secondWord,frequency);  firstWord.ngrams.add(nw);  return frequency;}  }
class C{  public void undelete(){  isDeleted=false;}  }
class C{  private FormalTypeParameter parseFormalTypeParameter(){  String id=parseIdentifier();  FieldTypeSignature[] bs=parseBounds();  return FormalTypeParameter.make(id,bs);}  }
class C{  public void testRegression(){  Regression reg;  Instances train;  Instances test;  Instances data;  TestInstances testInst;  int tot;  int mid;  EvaluationUtils evaluation;  ArrayList<Prediction> regressionResults;  reg=new Regression(this.getClass());  try {    testInst=new TestInstances();    testInst.setClassType(Attribute.NOMINAL);    testInst.setNumNominal(5);    testInst.setNumNominalValues(4);    testInst.setNumNumeric(0);    testInst.setNumDate(0);    testInst.setNumString(0);    testInst.setNumRelational(0);    testInst.setNumInstances(100);    data=testInst.generate();  } catch (  Exception e) {    fail("Failed generating data: " + e);    return;  }  tot=data.numInstances();  mid=tot / 2;  train=null;  test=null;  try {    train=new Instances(data,0,mid);    test=new Instances(data,mid,tot - mid);    m_Classifier=new SerializedClassifier();    m_Classifier.setModelFile(new File(MODEL_FILENAME));  } catch (  Exception e) {    e.printStackTrace();    fail("Problem setting up to use classifier: " + e);  }  evaluation=new EvaluationUtils();  try {    trainAndSerializeClassifier(train);    regressionResults=evaluation.getTrainTestPredictions(m_Classifier,train,test);    reg.println(predictionsToString(regressionResults));  } catch (  Exception e) {    fail("Failed obtaining classifier predictions: " + e);  }  try {    String diff=reg.diff();    if (diff == null) {      System.err.println("Warning: No reference available, creating.");    } else     if (!diff.equals("")) {      fail("Regression test failed. Difference:\n" + diff);    }  } catch (  java.io.IOException ex) {    fail("Problem during regression testing.\n" + ex);  }}  }
class C{  public boolean isAvailable(){  return mNetworkInfo.isAvailable();}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to obtain a BluetoothAdapter.");    return false;  }  return true;}  }
class C{  public Maybe(){  myValue=null;  myIsDefined=false;}  }
class C{  public static List<Number> findIndexValues(Object self,Closure closure){  return findIndexValues(self,0,closure);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType buildDefaultDigestMethodType(){  org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType();  digestMethodType.setAlgorithm(PackingListBuilder.defaultHashAlgorithm);  return digestMethodType;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public final CC maxWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),null,null,ConstraintParser.parseUnitValue(size,true)));  return this;}  }
class C{  public static <T>Streamable<T> fromPublisher(final Publisher<? extends T> publisher){  Objects.requireNonNull(publisher);  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();  publisher.subscribe(sub);  return fromStream(sub.stream());}  }
class C{  @Override public boolean load(Element shared,Element perNode){  EntryExitPairs eep=jmri.InstanceManager.getDefault(jmri.jmrit.signalling.EntryExitPairs.class);  try {    String clearoption=shared.getChild("cleardown").getText();    eep.setClearDownOption(Integer.parseInt(clearoption));  } catch (  java.lang.NullPointerException e) {  }  ConfigureManager cm=jmri.InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  ArrayList<Object> loadedPanel;  if (cm != null) {    loadedPanel=cm.getInstanceList(LayoutEditor.class);  } else {    log.error("Failed getting optional default config manager");    loadedPanel=new ArrayList<Object>();  }  if (shared.getChild("dispatcherintegration") != null && shared.getChild("dispatcherintegration").getText().equals("yes")) {    eep.setDispatcherIntegration(true);  }  if (shared.getChild("colourwhilesetting") != null) {    eep.setSettingRouteColor(stringToColor(shared.getChild("colourwhilesetting").getText()));    int settingTimer=2000;    try {      settingTimer=Integer.parseInt(shared.getChild("settingTimer").getText());    } catch (    Exception e) {      log.error("Error in converting timer to int " + shared.getChild("settingTimer"));    }    eep.setSettingTimer(settingTimer);  }  List<Element> panelList=shared.getChildren("layoutPanel");  for (int k=0; k < panelList.size(); k++) {    String panelName=panelList.get(k).getAttribute("name").getValue();    LayoutEditor panel=null;    for (int i=0; i < loadedPanel.size(); i++) {      LayoutEditor tmp=(LayoutEditor)loadedPanel.get(i);      if (tmp.getLayoutName().equals(panelName)) {        panel=tmp;        break;      }    }    if (panel != null) {      List<Element> sourceList=panelList.get(k).getChildren("source");      for (int i=0; i < sourceList.size(); i++) {        String sourceType=sourceList.get(i).getAttribute("type").getValue();        String sourceItem=sourceList.get(i).getAttribute("item").getValue();        NamedBean source=null;        if (sourceType.equals("signalMast")) {          source=jmri.InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(sourceItem);        } else         if (sourceType.equals("sensor")) {          source=jmri.InstanceManager.sensorManagerInstance().getSensor(sourceItem);        } else         if (sourceType.equals("signalHead")) {          source=jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(sourceItem);        }        List<Element> destinationList=sourceList.get(i).getChildren("destination");        if (destinationList.size() > 0) {          eep.addNXSourcePoint(source,panel);        }        for (int j=0; j < destinationList.size(); j++) {          String id=null;          if (destinationList.get(j).getAttribute("uniqueid") != null) {            id=destinationList.get(j).getAttribute("uniqueid").getValue();          }          String destType=destinationList.get(j).getAttribute("type").getValue();          String destItem=destinationList.get(j).getAttribute("item").getValue();          NamedBean dest=null;          if (destType.equals("signalMast")) {            dest=jmri.InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(destItem);          } else           if (destType.equals("sensor")) {            dest=jmri.InstanceManager.sensorManagerInstance().getSensor(destItem);          } else           if (destType.equals("signalHead")) {            dest=jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(destItem);          }          try {            eep.addNXDestination(source,dest,panel,id);          } catch (          java.lang.NullPointerException e) {            log.error("An error occured while trying to add a point");          }          if ((destinationList.get(j).getAttribute("uniDirection") != null) && (destinationList.get(j).getAttribute("uniDirection").getValue().equals("no"))) {            eep.setUniDirection(source,panel,dest,false);          }          if ((destinationList.get(j).getAttribute("enabled") != null) && (destinationList.get(j).getAttribute("enabled").getValue().equals("no"))) {            eep.setEnabled(source,panel,dest,false);          }          if (destinationList.get(j).getAttribute("nxType") != null) {            String nxType=destinationList.get(j).getAttribute("nxType").getValue();            if (nxType.equals("turnoutsetting")) {              eep.setEntryExitType(source,panel,dest,0x00);            } else             if (nxType.equals("signalmastlogic")) {              eep.setEntryExitType(source,panel,dest,0x01);            } else             if (nxType.equals("fullinterlocking")) {              eep.setEntryExitType(source,panel,dest,0x02);            }          }        }      }    } else {      log.error("Panel has not been loaded");    }  }  return true;}  }
class C{  public ModelMBeanAttributeInfo(ModelMBeanAttributeInfo inInfo){  super(inInfo.getName(),inInfo.getType(),inInfo.getDescription(),inInfo.isReadable(),inInfo.isWritable(),inInfo.isIs());  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(ModelMBeanAttributeInfo)","Entry");  }  Descriptor newDesc=inInfo.getDescriptor();  attrDescriptor=validDescriptor(newDesc);}  }
class C{  public AnyCraftingRecipeItem(final ItemStack item,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=(item == null) ? new BaseItemStack(Material.BEDROCK) : item.clone();  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=null;  this.replacementFunc=null;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void initialize(String pname,Scheduler scheduler,ClassLoadHelper classLoadHelper) throws SchedulerException {  this.name=pname;  scheduler.getListenerManager().addTriggerListener(this,EverythingMatcher.allTriggers());}  }
class C{  public SQFVarInheritedPrivatization(@NotNull SQFVariable privateElement,@NotNull SQFScope declarationScope){  super(privateElement,declarationScope);  this.declarationScope=declarationScope;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.STATE__LOCAL_REACTIONS:    return !getLocalReactions().isEmpty();case SGraphPackage.STATE__SCOPES:  return scopes != null && !scopes.isEmpty();case SGraphPackage.STATE__NAMESPACE:return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case SGraphPackage.STATE__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SGraphPackage.STATE__PARENT_REGION:return basicGetParentRegion() != null;case SGraphPackage.STATE__INCOMING_TRANSITIONS:return incomingTransitions != null && !incomingTransitions.isEmpty();case SGraphPackage.STATE__OUTGOING_TRANSITIONS:return outgoingTransitions != null && !outgoingTransitions.isEmpty();case SGraphPackage.STATE__REGIONS:return regions != null && !regions.isEmpty();case SGraphPackage.STATE__DOCUMENTATION:return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);case SGraphPackage.STATE__ORTHOGONAL:return isOrthogonal() != ORTHOGONAL_EDEFAULT;case SGraphPackage.STATE__SIMPLE:return isSimple() != SIMPLE_EDEFAULT;case SGraphPackage.STATE__COMPOSITE:return isComposite() != COMPOSITE_EDEFAULT;case SGraphPackage.STATE__LEAF:return isLeaf() != LEAF_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public MouseAction(MouseActionType actionType,int button,TerminalPosition position){  super(KeyType.MouseEvent,false,false);  this.actionType=actionType;  this.button=button;  this.position=position;}  }
class C{  public static int readS16bit(byte[] code,int index){  return (code[index] << 8) | (code[index + 1] & 0xff);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest md=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(md);    }  }  try {    MessageDigest.getInstance(null,new TestProvider());    fail("expected NullPointerException");  } catch (  NullPointerException expected) {  }  try {    MessageDigest.getInstance("UnknownDigest",new TestProvider());    fail("expected NoSuchAlgorithmException");  } catch (  NoSuchAlgorithmException expected) {  }  try {    MessageDigest.getInstance("AnyDigest",(Provider)null);    fail("expected IllegalArgumentException");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static GridWindowVO create(Properties ctx,int WindowNo,int AD_Window_ID,int AD_Menu_ID){  CLogger.get().config("#" + WindowNo + " - AD_Window_ID="+ AD_Window_ID+ "; AD_Menu_ID="+ AD_Menu_ID);  GridWindowVO vo=new GridWindowVO(ctx,WindowNo);  vo.AD_Window_ID=AD_Window_ID;  if (vo.AD_Window_ID == 0 && AD_Menu_ID != 0) {    String sql="SELECT AD_Window_ID, IsSOTrx, IsReadOnly FROM AD_Menu " + "WHERE AD_Menu_ID=? AND Action='W'";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,AD_Menu_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        vo.AD_Window_ID=rs.getInt(1);        String IsSOTrx=rs.getString(2);        Env.setContext(ctx,WindowNo,"IsSOTrx",(IsSOTrx != null && IsSOTrx.equals("Y")));        String IsReadOnly=rs.getString(3);        if (IsReadOnly != null && IsReadOnly.equals("Y"))         vo.IsReadWrite="Y"; else         vo.IsReadWrite="N";      }    } catch (    SQLException e) {      CLogger.get().log(Level.SEVERE,"Menu",e);      return null;    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    CLogger.get().config("AD_Window_ID=" + vo.AD_Window_ID);  }  StringBuffer sql=new StringBuffer("SELECT Name,Description,Help,WindowType, " + "AD_Color_ID,AD_Image_ID,WinHeight,WinWidth, " + "IsSOTrx ");  if (Env.isBaseLanguage(vo.ctx,"AD_Window"))   sql.append("FROM AD_Window w WHERE w.AD_Window_ID=? AND w.IsActive='Y'"); else   sql.append("FROM AD_Window_vt w WHERE w.AD_Window_ID=?").append(" AND AD_Language='").append(Env.getAD_Language(vo.ctx)).append("'");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,vo.AD_Window_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      vo.Name=rs.getString(1);      vo.Description=rs.getString(2);      if (vo.Description == null)       vo.Description="";      vo.Help=rs.getString(3);      if (vo.Help == null)       vo.Help="";      vo.WindowType=rs.getString(4);      vo.AD_Color_ID=rs.getInt(5);      vo.AD_Image_ID=rs.getInt(6);      vo.WinHeight=rs.getInt(7);      vo.WinWidth=rs.getInt(8);      vo.IsSOTrx="Y".equals(rs.getString(9));    } else     vo=null;  } catch (  SQLException ex) {    CLogger.get().log(Level.SEVERE,sql.toString(),ex);    return null;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  MRole role=MRole.getDefault(ctx,false);  final Boolean windowAccess=role.getWindowAccess(vo.AD_Window_ID);  if (vo != null && windowAccess == null)   vo=null;  if (vo != null && windowAccess != null)   vo.IsReadWrite=(windowAccess.booleanValue() ? "Y" : "N");  if (vo == null) {    CLogger.get().log(Level.SEVERE,"No Window - AD_Window_ID=" + AD_Window_ID + ", AD_Role_ID="+ role+ " - "+ sql);    CLogger.get().saveError("AccessTableNoView","(Not found)");    return null;  }  if (vo.IsReadWrite == null) {    CLogger.get().saveError("AccessTableNoView","(found)");    return null;  }  createTabs(vo);  if (vo.Tabs == null || vo.Tabs.size() == 0)   return null;  return vo;}  }
class C{  public static void perform(IR ir){  GlobalValueNumberState gvn=null;  gvn=new GlobalValueNumberState(ir);  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.operator() == INT_ADD || s.operator() == LONG_ADD || s.operator() == REF_ADD || s.operator() == REF_SUB || s.operator() == INT_SUB || s.operator() == LONG_SUB) {      Operand val2=Binary.getVal2(s);      if (val2.isConstant()) {        Operand lhs=Binary.getResult(s);        Operand rhs=Binary.getVal1(s);        gvn.mergeClasses(gvn.valueGraph.getVertex(lhs),gvn.valueGraph.getVertex(rhs));      }    }  }  if (DEBUG) {    System.out.println("@@@@ START OF INDEX EQUIVALENCE VALUE NUMBERS FOR " + ir.method + " @@@@");    gvn.printValueNumbers();    System.out.println("@@@@ END OF INDEX EQUIVALENCE VALUE NUMBERS FOR " + ir.method + " @@@@");  }  ir.HIRInfo.uniformlyGeneratedValueNumbers=gvn;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.363 -0500",hash_original_method="BD0D54E815B3E8434D2BE4AD1DDC7411",hash_generated_method="78BB64D9372F21C949C4029C556A8131") @Override protected URLConnection openConnection(URL u) throws IOException {  return new JarURLConnectionImpl(u);}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public Editor edit() throws IOException {  return LruDiskCache.this.editByDiskKey(diskKey,sequenceNumber);}  }
class C{  private ByteBuf writeError(ByteBuf buffer,Throwable t,ThreadContext context){  context.serializer().writeObject(t,OUTPUT.get().setByteBuf(buffer));  return buffer;}  }
class C{  public boolean postMortem(PostMortem pm){  Node that=(Node)pm;  if (that == null) {    JSONzip.log("\nMisalign");    return false;  }  if (this.integer != that.integer) {    JSONzip.log("\nInteger " + this.integer + " <> "+ that.integer);    return false;  }  if (this.next == null) {    if (that.next == null) {      return true;    }    JSONzip.log("\nNext is null " + this.integer);    return false;  }  for (int i=0; i < 256; i+=1) {    Node node=this.next[i];    if (node != null) {      if (!node.postMortem(that.next[i])) {        return false;      }    } else     if (that.next[i] != null) {      JSONzip.log("\nMisalign " + i);      return false;    }  }  return true;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  private void addToStore(List<Cert> certs,String alias,X509Certificate x509Cert){  Cert cert=new Cert();  cert.setAlias(alias);  cert.setSubjectDistinguishedName(x509Cert.getSubjectDN().toString());  cert.setNotBefore(x509Cert.getNotBefore());  cert.setNotAfter(x509Cert.getNotAfter());  cert.setIssuerDistinguishedName(x509Cert.getIssuerDN().toString());  certs.add(cert);}  }
class C{  public final boolean hasAttributes(){  return !this.attributes.isEmpty();}  }
class C{  public static void ensureRegistryOnLoopbackAddress(){  System.setProperty("java.rmi.server.hostname","127.0.0.1");}  }
class C{  public synchronized void selectAPI(String id){  SQLiteDatabase db=getReadableDatabase();  selectAPI(db,id);  db.close();}  }
class C{  private static void estimatorTimeSource(){  TimeSource tsNow=new SystemTimeSource();  TimeSource tsEstimated=new EstimatorTimeSource(100);  compareTimeSources(SYSTEM_SOURCE_NAME,"Estimator",tsNow,tsEstimated);}  }
class C{  public static void deleteTrace(final AbstractSQLProvider provider,final TraceList trace) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00576: Provider argument can not be null");  Preconditions.checkNotNull(trace,"IE00577: Trace argument can not be null");  Preconditions.checkArgument(trace.inSameDatabase(provider),"IE00578: Trace list is not part of this database");  final CConnection connection=provider.getConnection();  final String query="DELETE FROM " + CTableNames.TRACES_TABLE + " WHERE id = "+ trace.getId();  try {    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  private void manageDisplayRequest(Mail mail) throws MessagingException {  MailAddress senderMailAddress=mail.getSender();  String senderUser=senderMailAddress.getLocalPart().toLowerCase(Locale.US);  String senderHost=senderMailAddress.getDomain().toLowerCase(Locale.US);  senderUser=getPrimaryName(senderUser);  Connection conn=null;  PreparedStatement selectStmt=null;  ResultSet selectRS=null;  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  try {    out.println("Answering on behalf of: " + whitelistManagerAddress);    out.println("Displaying white list of " + (new MailAddress(senderUser,senderHost)) + ":");    out.println();    conn=datasource.getConnection();    selectStmt=conn.prepareStatement(selectBySender);    selectStmt.setString(1,senderUser);    selectStmt.setString(2,senderHost);    selectRS=selectStmt.executeQuery();    while (selectRS.next()) {      MailAddress mailAddress=new MailAddress(selectRS.getString(1),selectRS.getString(2));      out.println(mailAddress.toInternetAddress().toString());    }    out.println();    out.println("Finished");    sendReplyFromPostmaster(mail,sout.toString());  } catch (  SQLException sqle) {    out.println("Error accessing the database");    sendReplyFromPostmaster(mail,sout.toString());    throw new MessagingException("Error accessing database",sqle);  } finally {    theJDBCUtil.closeJDBCResultSet(selectRS);    theJDBCUtil.closeJDBCStatement(selectStmt);    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public String redo(){  if (!canRedo()) {    Log.e(TAG,"Attempted to redo, but no redo checkpoints available");    return null;  }  String name=redoCheckpoints.getLast().name;  Checkpoint reundoPoint=new Checkpoint(name);  redoCheckpoints.removeLast().restore(reundoPoint);  undoCheckpoints.add(reundoPoint);  updateIcon();  return name;}  }
class C{  void ioMessage(Throwable ex){  out.println(getLocalizedString("msg.io"));  ex.printStackTrace(out);}  }
class C{  void indexClassOperation(Record record){  Proc process=processes.get(record.pid);  if (record.processName.equals("dexopt")) {    return;  }  String name=record.className;  LoadedClass loadedClass=loadedClasses.get(name);  Operation o=null;switch (record.type) {case START_LOAD:case START_INIT:    if (loadedClass == null) {      loadedClass=new LoadedClass(name,record.classLoader == 0);      if (loadedClass.systemClass) {        loadedClass.measureMemoryUsage();      }      loadedClasses.put(name,loadedClass);    }  break;case END_LOAD:case END_INIT:o=process.endOperation(record.tid,record.className,loadedClass,record.time);if (o == null) {return;}}switch (record.type) {case START_LOAD:process.startOperation(record.tid,loadedClass,record.time,Operation.Type.LOAD);break;case START_INIT:process.startOperation(record.tid,loadedClass,record.time,Operation.Type.INIT);break;case END_LOAD:loadedClass.loads.add(o);break;case END_INIT:loadedClass.initializations.add(o);break;}}  }
class C{  public HRService(final Reactor reactor,final DepartmentRepoAsync departmentRepoAsync){  this.reactor=reactor;  this.reactor.addServiceToFlush(departmentRepoAsync);  this.departmentRepoAsync=departmentRepoAsync;}  }
class C{  public static boolean isCompressed(File file){  InputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      int mag1=fis.read();      int mag2=fis.read();      fis.close();      return selectCompressionProvider(mag1,mag2) != null;    }  } catch (  IOException e) {    LOG.log(Level.FINEST,"Error while checking if file " + file + " is compressed",e);    return false;  } finally {    SafeClose.close(fis);  }  return false;}  }
class C{  private void parse(){  while (off < source.count) {    char next=source.buf[off++];    if (next == '$') {      if (off < source.count)       if (source.buf[off++] == '{') {        name();        continue;      } else {        off--;      }    }    text.append(next);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.647 -0500",hash_original_method="606F4ADF8EBB5ECDC152643EADDC0AC8",hash_generated_method="68DCE7C74489AFAF0B7F33A387BEB9DB") public javax.sip.address.SipURI createSipURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null URI");  try {    StringMsgParser smp=new StringMsgParser();    SipUri sipUri=smp.parseSIPUrl(uri);    return (SipURI)sipUri;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  private void handleException(Throwable ex){  String msg=null;  if (ex instanceof OutOfMemoryError) {    msg=labelUtil.getString("err.memory.full");  } else {    msg=ex.getMessage();  }  if ((msg == null) || (msg.trim().equals(""))) {    StringWriter writer=new StringWriter();    ex.printStackTrace(new PrintWriter(writer));    msg=writer.toString();  }  ex.printStackTrace();  JOptionPane.showMessageDialog(this,msg,labelUtil.getString("gui.msg.title.err"),JOptionPane.ERROR_MESSAGE);}  }
class C{  protected void addHistoryRegionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StateSwitch_historyRegion_feature"),getString("_UI_PropertyDescriptor_description","_UI_StateSwitch_historyRegion_feature","_UI_StateSwitch_type"),SexecPackage.Literals.STATE_SWITCH__HISTORY_REGION,true,false,true,null,null,null));}  }
class C{  @LargeTest public void testCameraPairwiseScenario02() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.MIN,WhiteBalance.FLUORESCENT,SceneMode.AUTO,PictureSize.LARGE,Geotagging.ON);}  }
class C{  public void validateResponse(String masterId,ProtocolHandshakeResponse handshakeResponse) throws InterruptedException, ReplicatorException {  String remoteLogin=handshakeResponse.getOption(ProtocolParams.REMOTE_LOGIN);  String remotePassword=handshakeResponse.getOption(ProtocolParams.REMOTE_PASSWORD);  if (remotePassword != null)   handshakeResponse.setOption(ProtocolParams.REMOTE_PASSWORD,"****");  heartbeatMillis=handshakeResponse.getHeartbeatMillis();  logger.info("New THL client connection: sourceID=" + handshakeResponse.getSourceId() + " heartbeatMillis="+ heartbeatMillis+ " socketType="+ socket.getSocket().getClass().getSimpleName()+ " options="+ new TungstenProperties(handshakeResponse.getOptions()).toString());  if (server.isUseSSL()) {    if (remoteLogin == null) {      logger.warn(String.format("THL authentication failure: THL login was not specified: sourceID=%s",handshakeResponse.getSourceId()));      throw new THLException("THL authentication failure");    } else     if (remotePassword == null) {      logger.warn(String.format("THL authentication failure: THL password was not specified: sourceID=%s, login=%s",handshakeResponse.getSourceId(),remoteLogin));      throw new THLException("THL authentication failure");    }    int authResult=server.authenticate(remoteLogin,remotePassword);    if (authResult == Server.AUTH_OK) {      logger.info(String.format("Client authenticated: sourceID=%s, login=%s",handshakeResponse.getSourceId(),remoteLogin));    } else {      if (authResult == Server.AUTH_FAILED_NO_SUCH_USER) {        logger.warn(String.format("THL authentication failure: user does not exist: sourceID=%s, login=%s",handshakeResponse.getSourceId(),remoteLogin));      } else       if (authResult == Server.AUTH_FAILED_BAD_PASSWORD) {        logger.warn(String.format("THL authentication failure: bad password: sourceID=%s, login=%s",handshakeResponse.getSourceId(),remoteLogin));      } else       if (authResult == Server.AUTH_FAILED_UNKNOWN) {        logger.warn(String.format("THL authentication failure: unexpected failure, see other log messages: sourceID=%s, login=%s",handshakeResponse.getSourceId(),remoteLogin));      } else {        logger.warn(String.format("THL authentication failure: unknown error code: sourceID=%s, login=%s, code=%d",handshakeResponse.getSourceId(),remoteLogin,authResult));      }      throw new THLException("THL authentication failed");    }  }  setRmiHost(handshakeResponse.getOption(ProtocolParams.RMI_HOST));  setRmiPort(handshakeResponse.getOption(ProtocolParams.RMI_PORT));  if (heartbeatMillis <= 0)   throw new THLException("Client heartbeat requests must be greater than zero: " + heartbeatMillis);  long clientLastEpochNumber=handshakeResponse.getLastEpochNumber();  long clientLastSeqno=handshakeResponse.getLastSeqno();  long masterMaxSeqno=thl.getMaxStoredSeqno();  long masterMinSeqno=thl.getMinStoredSeqno();  String eventIdString=handshakeResponse.getOption(ProtocolParams.INIT_EVENT_ID);  if ((clientLastEpochNumber < 0 || clientLastSeqno < 0) && eventIdString == null) {    logger.info("Client log checking disabled; not checking for diverging histories");  } else   if (masterMaxSeqno == -1 && masterMinSeqno == -1) {    checkFirstSeqno=true;    logger.info("Server log is empty; deferring log consistency checking until first transaction");  } else {    LogConnection conn=thl.connect(true);    try {      THLEvent event=null;      if (conn.seek(clientLastSeqno))       event=conn.next(false);      if (event == null) {        if (conn.seek(clientLastSeqno + 1))         event=conn.next(false);        if (event == null) {          throw new THLException("Master log does not contain requested transaction: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " requested seqno="+ clientLastSeqno+ " client epoch number="+ clientLastEpochNumber+ " master min seqno="+ masterMinSeqno+ " master max seqno="+ masterMaxSeqno);        } else {          logger.info("Master log has starting client seqno but does not have previous committed seqno;" + " not checking for diverging histories");        }      } else       if (event.getEpochNumber() != clientLastEpochNumber) {        throw new THLException("Log epoch numbers do not match: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " seqno="+ clientLastSeqno+ " server epoch number="+ event.getEpochNumber()+ " client epoch number="+ clientLastEpochNumber);      } else {        logger.info("Log epoch numbers checked and match: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " seqno="+ clientLastSeqno+ " epoch number="+ clientLastEpochNumber);      }      if (eventIdString != null) {        EventIdFactory factory=EventIdFactory.getInstance();        EventId eventId=factory.createEventId(eventIdString);        if (eventId == null || !eventId.isValid()) {          throw new THLException("Unable to parse eventId requested by client: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " requested event ID="+ eventId);        }        boolean found=false;        while (!found) {          EventId currentEventId=factory.createEventId(event.getEventId());          long currentSeqno=event.getSeqno();          int comp=eventId.compareTo(currentEventId);          if (comp > 0) {            if (logger.isDebugEnabled()) {              logger.debug("Skipping event: seqno=" + currentSeqno + " eventId="+ currentEventId);            }          } else           if (comp == 0) {            altSeqno=currentSeqno + 1;            logger.info("Found alterative seqno requested by client using eventId: seqno=" + altSeqno + " eventId="+ eventId);            break;          } else {            throw new THLException("Client seeking event ID that does not exist or may be too old: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " requested event ID="+ eventId+ " closest server seqno="+ currentSeqno+ " closest server event ID="+ currentEventId);          }          event=conn.next(false);          if (event == null) {            throw new THLException("Client seeking non-existent event ID: " + "master source ID=" + masterId + " client source ID="+ handshakeResponse.getSourceId()+ " requested event ID="+ eventId+ " last client seqno="+ clientLastSeqno+ " closest server seqno="+ currentSeqno+ " closest server event ID="+ currentEventId);          }        }      }    }  finally {      if (conn != null) {        conn.release();      }    }  }}  }
class C{  public void nodeCrashed(GfManagerAgent source,GemFireVM vm){synchronized (this.membershipListenerLock) {    SystemMember member=AdminDistributedSystemImpl.this.removeSystemMember(vm.getId());    if (member == null) {      return;    }    SystemMembershipEvent event=new SystemMembershipEventImpl(vm.getId());    for (Iterator iter=this.membershipListeners.iterator(); iter.hasNext(); ) {      SystemMembershipListener listener=(SystemMembershipListener)iter.next();      listener.memberCrashed(event);    }  }}  }
class C{  public void fireGenerateEvent(int eventType,String name,Attributes atts){}  }
class C{  public static ParamConstraint serializableInstance(){  return new ParamConstraint(SemIm.serializableInstance(),Parameter.serializableInstance(),ParamConstraintType.EQ,1.0);}  }
class C{  private void updateVOParameters(List<VOParameter> originalParameters,List<VOParameter> updatedParameters){  for (  VOParameter originalParam : originalParameters) {    for (    VOParameter updatedParam : updatedParameters) {      if (originalParam.getKey() == updatedParam.getKey()) {        originalParam.setValue(updatedParam.getValue());      }    }  }}  }
class C{  public void backward(boolean reset){  if (reset)   stack[pos].reset();  pos--;}  }
class C{  private static void verifyCertificates(Certificate[] certificates) throws GeneralSecurityException {  GeneralSecurityException lastException=null;  boolean verified=false;  for (  Certificate certificate : certificates) {    try {      certificate.verify(key);      verified=true;      break;    } catch (    GeneralSecurityException e) {      lastException=e;    }  }  if (!verified) {    throw lastException;  }}  }
class C{  public boolean isDisabledExpressionListChanged(){  return disabledExpressionListChanged;}  }
class C{  public void testReadContactCapabilities(){  Log.i(TAG,"testReadContactCapabilities");  String contactNumber=remote.toString();  Uri uri=Uri.withAppendedPath(CapabilitiesLog.CONTENT_URI,contactNumber);  Cursor cursor=mContext.getContentResolver().query(uri,null,null,null,null);  assertNotNull(cursor);  if (cursor.moveToFirst()) {    Log.i(TAG,"Capabilities:");    Log.i(TAG,"- chat support: " + cursor.getInt(cursor.getColumnIndex(CapabilitiesLog.CAPABILITY_IM_SESSION)));    Log.i(TAG,"- FT support: " + cursor.getInt(cursor.getColumnIndex(CapabilitiesLog.CAPABILITY_FILE_TRANSFER)));    Log.i(TAG,"- Extensions: " + cursor.getString(cursor.getColumnIndex(CapabilitiesLog.CAPABILITY_EXTENSIONS)));  } else {    Log.i(TAG,"Capabilities not found");  }  cursor.close();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void removeKnownObject(ParseObject object){synchronized (mutex) {    knownObjects.remove(object);  }}  }
class C{  public static List<File> scan(File root,String[] includes,String[] excludes){  List<File> files=new ArrayList<File>();  if (!root.exists()) {    return files;  }  final DirectoryScanner directoryScanner=new DirectoryScanner();  directoryScanner.setIncludes(includes);  directoryScanner.setExcludes(excludes);  directoryScanner.setBasedir(root);  directoryScanner.scan();  for (  final String fileName : directoryScanner.getIncludedFiles()) {    files.add(new File(root,fileName));  }  return files;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getOwnedMembersRaw()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @Override protected String toResinConfigurationEntry(DataSource ds){  StringBuilder dataSourceString=new StringBuilder();  dataSourceString.append("<database>\n");  dataSourceString.append("  <jndi-name>").append(ds.getJndiLocation()).append("</jndi-name>\n");  if (ds.getConnectionType().equals(ConfigurationEntryType.XA_DATASOURCE)) {    dataSourceString.append("  <xa>true</xa>\n");  }  dataSourceString.append("  <driver>").append("\n");  dataSourceString.append("    <type>").append(ds.getDriverClass()).append("</type>\n");  if (ds.getUrl() != null) {    dataSourceString.append("    <url>" + ds.getUrl() + "</url>\n");  }  dataSourceString.append("    <user>" + ds.getUsername() + "</user>\n");  dataSourceString.append("    <password>" + ds.getPassword() + "</password>\n");  if (ds.getConnectionProperties() != null && ds.getConnectionProperties().size() != 0) {    for (    Object parameter : ds.getConnectionProperties().keySet()) {      String key=parameter.toString();      dataSourceString.append("    <").append(key);      dataSourceString.append(">").append(ds.getConnectionProperties().getProperty(key));      dataSourceString.append("</").append(key).append(">\n");    }  }  dataSourceString.append("  </driver>\n");  dataSourceString.append("</database>");  return dataSourceString.toString();}  }
class C{  void write_header(long iterations,long dimensions,double endl,double endr,boolean b,double kappa,long nrow,long ncol,long vals){  printf("SOLVING THE [A^TA] EIGENPROBLEM\n");  printf("NO. OF ROWS               = %6d\n",nrow);  printf("NO. OF COLUMNS            = %6d\n",ncol);  printf("NO. OF NON-ZERO VALUES    = %6d\n",vals);  printf("MATRIX DENSITY            = %6.2f%%\n",((float)vals / nrow) * 100 / ncol);  printf("MAX. NO. OF LANCZOS STEPS = %6d\n",iterations);  printf("MAX. NO. OF EIGENPAIRS    = %6d\n",dimensions);  printf("LEFT  END OF THE INTERVAL = %9.2E\n",endl);  printf("RIGHT END OF THE INTERVAL = %9.2E\n",endr);  printf("KAPPA                     = %9.2E\n",kappa);  printf("\n");  return;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public InteriorPointArea(Geometry g){  factory=g.getFactory();  add(g);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.REACTION_TRIGGER__TRIGGERS:    getTriggers().clear();  return;case StextPackage.REACTION_TRIGGER__GUARD:setGuard((Guard)null);return;}super.eUnset(featureID);}  }
class C{  public void sendSerialMessage(String value){  Buffer buffer=new Buffer();  try {    buffer.write(value.getBytes("UTF-8"));    sendMessage(BeanMessageID.SERIAL_DATA,buffer);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public CoreferenceLink_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_next=jcas.getRequiredFeatureDE(casType,"next","de.tudarmstadt.ukp.dkpro.core.api.coref.type.CoreferenceLink",featOkTst);  casFeatCode_next=(null == casFeat_next) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_next).getCode();  casFeat_referenceType=jcas.getRequiredFeatureDE(casType,"referenceType","uima.cas.String",featOkTst);  casFeatCode_referenceType=(null == casFeat_referenceType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_referenceType).getCode();  casFeat_referenceRelation=jcas.getRequiredFeatureDE(casType,"referenceRelation","uima.cas.String",featOkTst);  casFeatCode_referenceRelation=(null == casFeat_referenceRelation) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_referenceRelation).getCode();}  }
class C{  public boolean isPdfAttachment(){  if (getPO() == null)   return false;  return m_po.isPdfAttachment();}  }
class C{  public double testDist(ContinuousDistribution cd){  double d=dCalc(cd);  double n=v.length();  return pValue(n,d);}  }
class C{  @Override public String toStringKey(){  String result;  int i;  result="Key:\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i)) {      continue;    }    result+=LEFT_PARENTHESES + (i + 1) + RIGHT_PARENTHESES+ " "+ removeFilterName(m_ColNames[i])+ "\n";  }  return result;}  }
class C{  public boolean isIsGroup(){  return isGroup;}  }
class C{  public void testIntSortMissingFirst() throws Exception {  checkSortMissingFirst("intdv_missingfirst","-1","4");}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  private void notifyListeners(final long address,final int size){  for (  final IMemoryListener listener : m_listeners) {    listener.memoryChanged(address,size);  }}  }
class C{  @ObjectiveCName("initWithConfiguration:") public CocoaMessenger(@NotNull Configuration configuration){  super(configuration);  ThreadDispatcher.pushDispatcher(null);}  }
class C{  @Override public StrBuilder append(final char ch){  final int len=length();  ensureCapacity(len + 1);  buffer[size++]=ch;  return this;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof LenientChronology == false) {    return false;  }  LenientChronology chrono=(LenientChronology)obj;  return getBase().equals(chrono.getBase());}  }
class C{  public static void auditaRechazoDocumentoVital(Locale locale,IServiceBase service,InfoBDocumentoVitalExtVO docVital){  LoggingEvent event=getLogginEvent(service,ArchivoActions.DOCUMENTOS_VITALES_MODULE_RECHAZO);  DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_DOCUMENTO_VITAL,docVital.getId());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_ID_BD_TERCEROS,docVital.getIdBdTerceros());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_NUM_IDENTIDAD,docVital.getNumIdentidad());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_IDENTIDAD,docVital.getIdentidad());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_ID_TIPO,docVital.getIdTipoDocVit());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_NOMBRE_TIPO,docVital.getNombreTipoDocVit());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_FECHA_CAD,TypeConverter.toString(docVital.getFechaCad()));  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_ESTADO,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_ESTADO + "." + docVital.getEstadoDocVit(),locale));  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_FECHA_CR,TypeConverter.toString(docVital.getFechaCr()));  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_ID_USUARIO_CR,docVital.getIdUsuarioCr());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_ID_FICH,docVital.getIdFich());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_NOMBRE_FICH,docVital.getNombreOrgFich());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_EXT_FICH,docVital.getExtFich());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_TAMANO_FICH,new Double(docVital.getTamanoFich()).toString());  data.addDetalle(locale,ArchivoDetails.DOCUMENTOS_VITALES_OBSERVACIONES,docVital.getObservaciones());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void closeTutorialGuide(){  workspaceAgent.removePart(guidePage);}  }
class C{  public Attribute classAttribute(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  return attribute(m_ClassIndex);}  }
class C{  public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {  Vector<XmlNamespace> nsDecls=new Vector<XmlNamespace>(namespaceDeclsRss);  nsDecls.addAll(extProfile.getNamespaceDecls());  generateStartElement(w,Namespaces.rssNs,"item",null,nsDecls);  if (state.id != null) {    List<Attribute> attrs=new ArrayList<Attribute>(1);    attrs.add(new Attribute("isPermaLink","false"));    w.simpleElement(Namespaces.rssNs,"guid",attrs,state.id);  }  String lang=null;  if (state.content != null) {    lang=state.content.getLang();  }  if (lang == null && state.summary != null) {    lang=state.summary.getLang();  }  if (lang == null && state.title != null) {    lang=state.title.getLang();  }  if (lang != null) {    w.simpleElement(Namespaces.rssNs,"language",null,lang);  }  if (state.published != null) {    w.simpleElement(Namespaces.rssNs,"pubDate",null,state.published.toStringRfc822());  }  if (state.updated != null) {    w.simpleElement(Namespaces.atomNs,"updated",null,state.updated.toString());  }  w.startRepeatingElement();  for (  Category cat : state.categories) {    cat.generateRss(w);  }  w.endRepeatingElement();  if (state.title != null) {    state.title.generateRss(w,"title",TextConstruct.RssFormat.PLAIN_TEXT);  }  if (state.summary != null) {    state.summary.generateAtom(w,"summary");  }  if (state.content != null) {    state.content.generateRss(w,extProfile);  }  w.startRepeatingElement();  for (  Link link : state.links) {    link.generateRss(w);  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person author : state.authors) {    author.generateRss(w,"author");  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person contributor : state.contributors) {    contributor.generateRss(w,"author");  }  w.endRepeatingElement();  generateExtensions(w,extProfile);  w.endElement(Namespaces.rssNs,"item");}  }
class C{  @Override public String next() throws NoSuchElementException {  if (this.hasNext()) {    if (display_progress) {      int newProgress=(reader != null) ? progress() : 100;      if (newProgress > progress) {        for (int i=progress + 1; i <= newProgress; i++)         if (i == 97) {          System.err.print("1");        } else         if (i == 98) {          System.err.print("0");        } else         if (i == 99) {          System.err.print("0");        } else         if (i == 100) {          System.err.println("%");        } else         if (i % 10 == 0) {          System.err.print(String.format("%d",i));          System.err.flush();        } else         if ((i - 1) % 10 == 0)         ; else {          System.err.print(".");          System.err.flush();        }        progress=newProgress;      }    }    String line=this.buffer;    this.lineno++;    this.buffer=null;    return line;  } else {    throw new NoSuchElementException();  }}  }
class C{  public void stop(){  if (reader != null)   reader.stop();}  }
class C{  public static NameValuePair parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  NameValuePair object=new NameValuePair();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"NameValuePair".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (NameValuePair)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setParameterName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterValue").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setParameterValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public CInstructionResult(final INaviInstruction instruction,final RegisterSetLatticeElement registerSetLatticeElement){  m_instruction=Preconditions.checkNotNull(instruction,"IE01666: Instruction argument can not be null");  m_registerSet=Preconditions.checkNotNull(registerSetLatticeElement,"IE01667: RegisterSetLatticeElement can not be null");}  }
class C{  private double ARAMm_Update_Weights(SortedMap data,HashMap labels,int category){  double weightChange=0;  sweightsA[category]=0;  Set<Integer> s1=data.keySet();  int count=0;  for (  Integer i : s1) {    count+=1;    double da=(Double)data.get(i);    if (weightsA[category].containsKey(i)) {      double wa=(Double)weightsA[category].get(i);      if (da < wa) {        wa=(learningRate * da) + (1 - learningRate) * wa;        if (wa == 0) {          weightsA[category].remove(i);        } else {          weightsA[category].put(i,wa);        }      }      sweightsA[category]+=wa;    }  }  for (  Integer i : s1) {    double da=(Double)data.get(i);    int j1=i + snumFeatures;    double dat=1 - da;    if (weightsA[category].containsKey(j1)) {      double wat=1 - (Double)weightsA[category].get(j1);      if (dat < wat) {        wat=((learningRate * dat) + (1 - learningRate) * wat);        if (wat == 0) {          weightsA[category].remove(j1);        } else {          weightsA[category].put(j1,1 - wat);        }      }      sweightsA[category]+=wat;    } else {      double wa=(learningRate * dat);      if (wa == 0) {        weightsA[category].remove(j1);      } else {        weightsA[category].put(j1,1 - wa);        sweightsA[category]+=wa;      }    }  }  Set<Integer> s2=weightsA[category].keySet();  List<Integer> s3=new ArrayList<Integer>();  try {    for (    Integer i : s2) {      if (s1.contains(i)) {        continue;      }      if (i < snumFeatures) {        s3.add(i);      }    }    for (    Integer i : s3) {      count+=1;      weightsA[category].remove(i);    }  } catch (  Exception e) {    e.getClass();  }  sweightsA[category]+=snumFeatures - count;  s1=labels.keySet();  for (  Integer i : s1) {    double lb=(Double)labels.get(i);    if (weightsB[category].containsKey(i)) {      double wb=(Double)weightsB[category].get(i);      if (weightblearnmethod == 0) {        weightsB[category].put(i,lb + wb);        weightChange=1;      } else {        if (lb < wb) {          weightsB[category].put(i,(learningRate * lb) + (1 - learningRate) * wb);          weightChange=1;        }      }    }  }  return weightChange;}  }
class C{  public void decode(DataBuffer buffer){  if (buffer != null) {    try {      int length=buffer.readInt();      mHeader=new Header();      mHeader.setLength(length);      mHeader.decode(buffer,mHeader.getVersion());      mData=buffer.readDataBuffer();    } catch (    Exception e) {      logger.error(e.getMessage());    }  }}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  public void removeAllEdges(){  int n=allNodes.numObjs;  Iterator i=indexOutInHash.values().iterator();  for (int k=0; k < n; k++) {    IndexOutIn ioi=(IndexOutIn)i.next();    if (ioi.in != null)     ioi.in.clear();    if (ioi.out != null)     ioi.out.clear();  }}  }
class C{  public char readCharFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Character)getPrimitive(node)).charValue();}  }
class C{  public void printStackTrace(PrintStream err){  err.println(toString());  StackTraceElement[] stack=getInternalStackTrace();  for (  java.lang.StackTraceElement element : stack) {    err.println("\tat " + element);  }  StackTraceElement[] parentStack=stack;  Throwable throwable=getCause();  while (throwable != null) {    err.print("Caused by: ");    err.println(throwable);    StackTraceElement[] currentStack=throwable.getInternalStackTrace();    int duplicates=countDuplicates(currentStack,parentStack);    for (int i=0; i < currentStack.length - duplicates; i++) {      err.println("\tat " + currentStack[i]);    }    if (duplicates > 0) {      err.println("\t... " + duplicates + " more");    }    parentStack=currentStack;    throwable=throwable.getCause();  }}  }
class C{  public DecodeReturn reset(final String _data,int _pos){  data=_data;  pos=_pos;  return this;}  }
class C{  public Socks5Message(InputStream in) throws SocksException, IOException {  this(in,true);}  }
class C{  public JFXPopup(Pane popupContainer,Region content){  initialize();  setContent(content);  setPopupContainer(popupContainer);}  }
class C{  public void start(final String[] args) throws Exception {  final Map<String,Object> options=getStartOptions(args);  workingDirectory=IOUtils.tryGetCanonicalFileElseGetAbsoluteFile((File)options.get(DIR));  verifyAndClearStatus();  runCommandLine(options,buildCommandLine(options));  pollAgentUntilRunning();  System.exit(0);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState state,PlotRenderingInfo info){  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);  if (b1 || b2) {    return;  }  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  drawChipGrid(g2,area);  drawWaferEdge(g2,area);}  }
class C{  private DaylightUpdater(){  onTurnReached(0);}  }
class C{  private byte[] GSS_initSecContext(byte[] token) throws GSSException {  byte[] tok=null;  if (mechContext == null) {    GSSName serverName=factory.manager.createName(peerName.toString(),peerName.getStringNameType(),internal_mech);    GSSCredential cred=null;    if (myCred != null) {      cred=new GSSCredentialImpl(factory.manager,myCred.getInternalCred());    }    mechContext=factory.manager.createContext(serverName,internal_mech,cred,GSSContext.DEFAULT_LIFETIME);    mechContext.requestConf(confState);    mechContext.requestInteg(integState);    mechContext.requestCredDeleg(credDelegState);    mechContext.requestMutualAuth(mutualAuthState);    mechContext.requestReplayDet(replayDetState);    mechContext.requestSequenceDet(sequenceDetState);    if (mechContext instanceof ExtendedGSSContext) {      ((ExtendedGSSContext)mechContext).requestDelegPolicy(delegPolicyState);    }  }  if (token != null) {    tok=token;  } else {    tok=new byte[0];  }  byte[] init_token=mechContext.initSecContext(tok,0,tok.length);  return init_token;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Resource fromProperties(Properties properties){  String name=properties.getProperty(ResourcePropertySet.RESOURCE_NAME);  String type=properties.getProperty(ResourcePropertySet.RESOURCE_TYPE);  Resource resource=new Resource(name,type);  if (properties.containsKey(ResourcePropertySet.RESOURCE_CLASS)) {    String className=properties.getProperty(ResourcePropertySet.RESOURCE_CLASS);    resource.setClassName(className);  }  if (properties.containsKey(ResourcePropertySet.RESOURCE_ID)) {    String id=properties.getProperty(ResourcePropertySet.RESOURCE_ID);    resource.setId(id);  } else {    resource.setId(createIdFromJndiLocationIfNotNull(name));  }  String parametersAsASemicolonDelimitedString=properties.getProperty(ResourcePropertySet.PARAMETERS);  resource.setParameters(PropertyUtils.toMap(getParametersFromString(PropertyUtils.escapeBackSlashesIfNotNull(parametersAsASemicolonDelimitedString))));  return resource;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  private final boolean checkLong(long in,Condition condition){  String value=condition.getValue();  long v;  try {    v=Long.parseLong(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  @Override public T find(final String query){  return persistenceService.find(query);}  }
class C{  public static String referenceIdentifierToString(byte[] ref,short stratum,byte version){  if (stratum == 0 || stratum == 1) {    return new String(ref);  } else   if (version == 3) {    return unsignedByteToShort(ref[0]) + "." + unsignedByteToShort(ref[1])+ "."+ unsignedByteToShort(ref[2])+ "."+ unsignedByteToShort(ref[3]);  } else   if (version == 4) {    return "" + ((unsignedByteToShort(ref[0]) / 256.0) + (unsignedByteToShort(ref[1]) / 65536.0) + (unsignedByteToShort(ref[2]) / 16777216.0)+ (unsignedByteToShort(ref[3]) / 4294967296.0));  }  return "";}  }
class C{  private static PDFDecrypter createCryptFilterDecrypter(PDFObject encryptDict,PDFObject documentId,PDFPassword password,int v) throws PDFAuthenticationFailureException, IOException, EncryptionUnsupportedByPlatformException, EncryptionUnsupportedByProductException {  assert v >= 4 : "crypt filter decrypter not supported for " + "standard encryption prior to version 4";  boolean encryptMetadata=true;  final PDFObject encryptMetadataObj=encryptDict.getDictRef("EncryptMetadata");  if (encryptMetadataObj != null && encryptMetadataObj.getType() == PDFObject.BOOLEAN) {    encryptMetadata=encryptMetadataObj.getBooleanValue();  }  final Map<String,PDFDecrypter> cfDecrypters=new HashMap<String,PDFDecrypter>();  final PDFObject cfDict=encryptDict.getDictRef("CF");  if (cfDict == null) {    throw new PDFParseException("No CF value present in Encrypt dict for V4 encryption");  }  final Iterator<String> cfNameIt=cfDict.getDictKeys();  while (cfNameIt.hasNext()) {    final String cfName=cfNameIt.next();    final PDFObject cryptFilter=cfDict.getDictRef(cfName);    final PDFObject lengthObj=cryptFilter.getDictRef("Length");    final Integer length=lengthObj != null ? lengthObj.getIntValue() * 8 : null;    final PDFObject cfmObj=cryptFilter.getDictRef("CFM");    final String cfm=cfmObj != null ? cfmObj.getStringValue() : "None";    final PDFDecrypter cfDecrypter;    if ("None".equals(cfm)) {      cfDecrypter=IdentityDecrypter.getInstance();    } else     if ("V2".equals(cfm)) {      cfDecrypter=createStandardDecrypter(encryptDict,documentId,password,length,encryptMetadata,StandardDecrypter.EncryptionAlgorithm.RC4);    } else     if ("AESV2".equals(cfm)) {      cfDecrypter=createStandardDecrypter(encryptDict,documentId,password,length,encryptMetadata,StandardDecrypter.EncryptionAlgorithm.AESV2);    } else {      throw new UnsupportedOperationException("Unknown CryptFilter method: " + cfm);    }    cfDecrypters.put(cfName,cfDecrypter);  }  cfDecrypters.put(CF_IDENTITY,IdentityDecrypter.getInstance());  PDFObject stmFObj=encryptDict.getDictRef("StmF");  final String defaultStreamFilter=stmFObj != null ? stmFObj.getStringValue() : CF_IDENTITY;  PDFObject strFObj=encryptDict.getDictRef("StrF");  final String defaultStringFilter=strFObj != null ? strFObj.getStringValue() : CF_IDENTITY;  return new CryptFilterDecrypter(cfDecrypters,defaultStreamFilter,defaultStringFilter);}  }
class C{  public T[] ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= items.length)   resize(Math.max(8,sizeNeeded));  return items;}  }
class C{  public CropImageFilter(int x,int y,int w,int h){  cropX=x;  cropY=y;  cropW=w;  cropH=h;}  }
class C{  private boolean tooComplexForSimplification(){  double maxPossibleCalculations=(((double)(Math.min(denominator,numerator) - 1) / 5d) + 2);  return maxPossibleCalculations > maxSimplificationCalculations;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (image.getDataScale() == WhiteboxRaster.DataScale.BOOLEAN || image.getDataScale() == WhiteboxRaster.DataScale.CATEGORICAL || image.getDataScale() == WhiteboxRaster.DataScale.RGB) {      showFeedback("This tool should only be used with data on a continuous scale.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    updateProgress("Calculating image average:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotal+=data[col];          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    imageAverage=imageTotal / imageN;    updateProgress("Calculating the standard deviation:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the standard deviation:",(int)progress);    }    stdDeviation=Math.sqrt(imageTotalDeviation / (imageN - 1));    updateProgress("Calculating the z-scores:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          output.setValue(row,col,(data[col] - imageAverage) / stdDeviation);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the z-scores:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr=null;    retstr="CONVERT TO Z-SCORE\n";    retstr=retstr + "Input image:\t\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Created image:\t\t" + output.getShortHeaderFile()+ "\n";    retstr=retstr + "Input image average:\t" + df.format(imageAverage)+ "\n";    retstr=retstr + "Input image std. dev.:\t" + df.format(stdDeviation)+ "\n";    retstr=retstr + "N:\t\t" + imageN;    returnData(retstr);    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public PKCS5S2ParametersGenerator(){  this(AndroidDigestFactory.getSHA1());}  }
class C{  public static boolean renameTo(final Path self,String newPathName){  try {    Files.move(self,Paths.get(newPathName));    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public Ellipse(RotatedRect rect){  this.rect=rect;}  }
class C{  @SuppressWarnings("unused") private static void stopServer() throws Exception {  getJettyServer().stop();}  }
class C{  public boolean wasURLVisited(String url){  return visitedURLs != null && visitedURLs.contains(url);}  }
class C{  public DigicoreChainExtractor(File file,File outputFolder,double thresholdMinor,double thresholdActivity,List<String> ignitionOn,List<String> ignitionOff,CoordinateTransformation ct,Counter threadCounter){  this.vehicleFile=file;  this.outputFolder=outputFolder;  this.thresholdMinorMajor=thresholdMinor;  this.thresholdActivityDuration=thresholdActivity;  this.ignitionOn=ignitionOn;  this.ignitionOff=ignitionOff;  this.threadCounter=threadCounter;  if (ct == null) {    this.ct=TransformationFactory.getCoordinateTransformation("Atlantis","Atlantis");  } else {    this.ct=ct;  }}  }
class C{  public int hashCode(){  int hash=attrID.hashCode();  int num=values.size();  Object val;  for (int i=0; i < num; i++) {    val=values.elementAt(i);    if (val != null) {      if (val.getClass().isArray()) {        Object it;        int len=Array.getLength(val);        for (int j=0; j < len; j++) {          it=Array.get(val,j);          if (it != null) {            hash+=it.hashCode();          }        }      } else {        hash+=val.hashCode();      }    }  }  return hash;}  }
class C{  public void unpinVisiblePanels(){  if (layout == Layout.FULL) {    getTabbedFull().unpinTabs();  } else {    getTabbedSelect().unpinTabs();    getTabbedWork().unpinTabs();    getTabbedStatus().unpinTabs();  }}  }
class C{  public RowInfo(List<ColumnInfo> columnInfoList){  this.columnInfoList=columnInfoList;}  }
class C{  public static XMLStreamWriter startDocument(ByteArrayOutputStream outputStream,String prefix,String documentRootName,String nameSpaceURI) throws XMLStreamException {  XMLStreamWriter writer=XML_OUTPUT_FACTORY.createXMLStreamWriter(outputStream,UTF_8.name());  if (isNullOrEmpty(prefix)) {    writer.writeStartElement(documentRootName);    writer.setDefaultNamespace(nameSpaceURI);    writer.writeDefaultNamespace(nameSpaceURI);  } else {    writer.writeStartElement(prefix,documentRootName,nameSpaceURI);    writer.writeNamespace(prefix,nameSpaceURI);  }  return writer;}  }
class C{  public static List<Long> zScoreTest(GeoTimeSerie gts,boolean useMedian,double d) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  double[] musigma=madsigma(gts,useMedian);  double m=musigma[0];  double std=musigma[1];  if (0.0D == std) {    return anomalous_ticks;  }  for (int i=0; i < gts.values; i++) {    double z=(gts.doubleValues[i] - m) / std;    if (Math.abs(z) >= d) {      anomalous_ticks.add(gts.ticks[i]);    }  }  return anomalous_ticks;}  }
class C{  public BusinessObjectDataEntity createTestValidBusinessObjectData(List<String> subPartitionValues,List<AttributeDefinition> attributeDefinitions,List<Attribute> attributes){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,subPartitionValues,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);  if (!CollectionUtils.isEmpty(attributeDefinitions)) {    for (    AttributeDefinition attributeDefinition : attributeDefinitions) {      businessObjectFormatDaoTestHelper.createBusinessObjectDataAttributeDefinitionEntity(businessObjectDataEntity.getBusinessObjectFormat(),attributeDefinition.getName(),attributeDefinition.isPublish());    }  }  if (!CollectionUtils.isEmpty(attributes)) {    for (    Attribute attribute : attributes) {      businessObjectDataAttributeDaoTestHelper.createBusinessObjectDataAttributeEntity(businessObjectDataEntity,attribute.getName(),attribute.getValue());    }  }  return businessObjectDataEntity;}  }
class C{  public PaintHelper(){  super();  paintMap=new PaintMap();  nextPaintIndex=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.630 -0500",hash_original_method="90CCF6EED6ECF06B8A0ACB9E5CF21EA6",hash_generated_method="FD471B1E125744525FF1C71DCA18C5CB") public static String[] makeStrings(Collection<InetAddress> addrs){  String[] result=new String[addrs.size()];  int i=0;  for (  InetAddress addr : addrs) {    result[i++]=addr.getHostAddress();  }  return result;}  }
class C{  public void findSameAsChaining(Resource subj,Set<Resource> currentSameAs,Resource[] contxts) throws InferenceEngineException {  try {    CloseableIteration<Statement,QueryEvaluationException> subjIter=RyaDAOHelper.query(ryaDAO,subj,OWL.SAMEAS,null,conf,contxts);    while (subjIter.hasNext()) {      Statement st=subjIter.next();      if (!currentSameAs.contains(st.getObject())) {        Resource castedObj=(Resource)st.getObject();        currentSameAs.add(castedObj);        findSameAsChaining(castedObj,currentSameAs,contxts);      }    }    subjIter.close();    CloseableIteration<Statement,QueryEvaluationException> objIter=RyaDAOHelper.query(ryaDAO,null,OWL.SAMEAS,subj,conf,contxts);    while (objIter.hasNext()) {      Statement st=objIter.next();      if (!currentSameAs.contains(st.getSubject())) {        Resource sameAsSubj=st.getSubject();        currentSameAs.add(sameAsSubj);        findSameAsChaining(sameAsSubj,currentSameAs,contxts);      }    }    objIter.close();  } catch (  QueryEvaluationException e) {    throw new InferenceEngineException(e);  }}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  put(d);  return this;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  validationMarkerEClass=createEClass(VALIDATION_MARKER);  createEAttribute(validationMarkerEClass,VALIDATION_MARKER__DELEGATE_RESOURCE);  createEOperation(validationMarkerEClass,VALIDATION_MARKER___ERESOURCE);  preValidationEClass=createEClass(PRE_VALIDATION);  postValidationEClass=createEClass(POST_VALIDATION);}  }
class C{  @Field(33) public __VARIANT_NAME_3_union uiVal(short uiVal){  this.io.setShortField(this,33,uiVal);  return this;}  }
class C{  private MLArray readMatrix(ByteBuffer buf,boolean isRoot) throws IOException {  MLArray mlArray;  ISMatTag tag;  int[] flags=readFlags(buf);  int attributes=(flags.length != 0) ? flags[0] : 0;  int nzmax=(flags.length != 0) ? flags[1] : 0;  int type=attributes & 0xff;  int[] dims=readDimension(buf);  String name=readName(buf);  if (isRoot && !filter.matches(name)) {    return null;  }switch (type) {case MLArray.mxSTRUCT_CLASS:    MLStructure struct=new MLStructure(name,dims,type,attributes);  tag=new ISMatTag(buf);int maxlen=buf.getInt();tag=new ISMatTag(buf);int numOfFields=tag.size / maxlen;int padding=(tag.size % 8) != 0 ? 8 - (tag.size % 8) : 0;String[] fieldNames=new String[numOfFields];for (int i=0; i < numOfFields; i++) {byte[] names=new byte[maxlen];buf.get(names);fieldNames[i]=zeroEndByteArrayToString(names);}buf.position(buf.position() + padding);for (int index=0; index < struct.getM() * struct.getN(); index++) {for (int i=0; i < numOfFields; i++) {tag=new ISMatTag(buf);MLArray fieldValue=readMatrix(buf,false);struct.setField(fieldNames[i],fieldValue,index);}}mlArray=struct;break;case MLArray.mxCELL_CLASS:MLCell cell=new MLCell(name,dims,type,attributes);for (int i=0; i < cell.getM() * cell.getN(); i++) {tag=new ISMatTag(buf);MLArray cellmatrix=readMatrix(buf,false);cell.set(cellmatrix,i);}mlArray=cell;break;case MLArray.mxDOUBLE_CLASS:mlArray=new MLDouble(name,dims,type,attributes);tag=new ISMatTag(buf);tag.readToByteBuffer(((MLNumericArray)mlArray).getRealByteBuffer(),(MLNumericArray)mlArray);if (mlArray.isComplex()) {tag=new ISMatTag(buf);tag.readToByteBuffer(((MLNumericArray)mlArray).getImaginaryByteBuffer(),(MLNumericArray)mlArray);}break;case MLArray.mxUINT8_CLASS:mlArray=new MLUInt8(name,dims,type,attributes);tag=new ISMatTag(buf);tag.readToByteBuffer(((MLNumericArray)mlArray).getRealByteBuffer(),(MLNumericArray)mlArray);if (mlArray.isComplex()) {tag=new ISMatTag(buf);tag.readToByteBuffer(((MLNumericArray)mlArray).getImaginaryByteBuffer(),(MLNumericArray)mlArray);}break;case MLArray.mxCHAR_CLASS:MLChar mlchar=new MLChar(name,dims,type,attributes);tag=new ISMatTag(buf);char[] ac=tag.readToCharArray();for (int i=0; i < ac.length; i++) {mlchar.setChar(ac[i],i);}mlArray=mlchar;break;case MLArray.mxSPARSE_CLASS:MLSparse sparse=new MLSparse(name,dims,attributes,nzmax);tag=new ISMatTag(buf);int[] ir=tag.readToIntArray();tag=new ISMatTag(buf);int[] jc=tag.readToIntArray();tag=new ISMatTag(buf);double[] ad1=tag.readToDoubleArray();int n=0;for (int i=0; i < ir.length; i++) {if (i < sparse.getN()) {n=jc[i];}sparse.setReal(ad1[i],ir[i],n);}if (sparse.isComplex()) {tag=new ISMatTag(buf);double[] ad2=tag.readToDoubleArray();int n1=0;for (int i=0; i < ir.length; i++) {if (i < sparse.getN()) {n1=jc[i];}sparse.setImaginary(ad2[i],ir[i],n1);}}mlArray=sparse;break;default :throw new MatlabIOException("Incorrect matlab array class: " + MLArray.typeToString(type));}return mlArray;}  }
class C{  public String comment() throws ParseException {  StringBuffer retval=new StringBuffer();  if (lookAhead(0) != '(')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == ')') {      break;    } else     if (next == '\0') {      throw new ParseException(this.buffer + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      retval.append(next);      next=getNextChar();      if (next == '\0')       throw new ParseException(this.buffer + " : unexpected EOL",this.ptr);      retval.append(next);    } else {      retval.append(next);    }  }  return retval.toString();}  }
class C{  public IGameMove bestMove(IGameState s,IPlayer player,IPlayer opponent){  state=s.copy();  MoveEvaluation me=negmax(ply,player,opponent);  return me.move;}  }
class C{  public void terminate(){  mTerminated=true;  mBuffer.unblockRead();  interrupt();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.999 -0500",hash_original_method="1D31D4C3FCFC5F71DF82BB85794AF70A",hash_generated_method="EDDC5D76963B1276225BF29A01A54E44") public boolean remove(HttpConnection connection){  TimeValues times=connectionToTimes.remove(connection);  if (times == null) {    log.warn("Removing a connection that never existed!");    return true;  } else {    return System.currentTimeMillis() <= times.timeExpires;  }}  }
class C{  public static <T>CopyOnWriteArrayList<T> copyOnWriteArrayList(){  return new CopyOnWriteArrayList<T>();}  }
class C{  private void onBluetoothConnected(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  log.info("Bluetooth broadcast: connected! (to " + device + ")");}  }
class C{  @POST @Path("consistency/cancel") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response cancelDbConsistencyCheck(){  log.info("receive cancel db consistency check request");  if (!isDbConsistencyCheckInProgress()) {    log.warn("db consistency check is not in progress");    throw APIException.badRequests.canNotCanceldbConsistencyCheck();  }  DbConsistencyStatus status=getStatusFromZk();  status.setStatus(DbConsistencyStatusRestRep.Status.CANCEL);  this.coordinator.persistRuntimeState(Constants.DB_CONSISTENCY_STATUS,status);  log.info("try to cancel db consistency check");  return Response.ok().build();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return (sage.msg.SystemMessage[])sage.msg.MsgManager.getInstance().getSystemMessages().clone();}  }
class C{  private void wakeup(){  String sql="SELECT * " + "FROM AD_WF_Activity a " + "WHERE Processed='N' AND WFState='OS'"+ " AND EndWaitTime > SysDate"+ " AND AD_Client_ID=?"+ " AND EXISTS (SELECT * FROM AD_Workflow wf "+ " INNER JOIN AD_WF_Node wfn ON (wf.AD_Workflow_ID=wfn.AD_Workflow_ID) "+ "WHERE a.AD_WF_Node_ID=wfn.AD_WF_Node_ID"+ " AND wfn.Action='Z'"+ " AND (wf.AD_WorkflowProcessor_ID IS NULL OR wf.AD_WorkflowProcessor_ID=?))";  PreparedStatement pstmt=null;  int count=0;  int countEMails=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_Client_ID());    pstmt.setInt(2,m_model.getAD_WorkflowProcessor_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MWFActivity activity=new MWFActivity(getCtx(),rs,null);      activity.setWFState(StateEngine.STATE_Completed);      count++;    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"wakeup",e);  } finally {    DB.close(pstmt);  }  m_summary.append("Wakeup #").append(count).append(" - ");}  }
class C{  private void initializeDefaults(){  this.astKind=K_COMPILATION_UNIT;  this.rawSource=null;  this.bits=0;  this.sourceLength=-1;  this.sourceOffset=0;  this.unitName=null;  this.classpaths=null;  this.sourcepaths=null;  this.sourcepathsEncodings=null;  Map options=JavaCore.getOptions();  this.compilerOptions=options;}  }
class C{  private void addManifestPackage(String name,Attributes attr){  if (!name.endsWith("/") && !name.equals(""))   return;  String specTitle=attr.getValue("Specification-Title");  String specVersion=attr.getValue("Specification-Version");  String specVendor=attr.getValue("Specification-Vendor");  String implTitle=attr.getValue("Implementation-Title");  String implVersion=attr.getValue("Implementation-Version");  String implVendor=attr.getValue("Implementation-Vendor");  if (specTitle == null && specVersion == null && specVendor != null && implTitle == null && implVersion == null && implVendor != null)   return;  ClassPackage pkg=new ClassPackage(name);  pkg.setSpecificationTitle(specTitle);  pkg.setSpecificationVersion(specVersion);  pkg.setSpecificationVendor(specVendor);  pkg.setImplementationTitle(implTitle);  pkg.setImplementationVersion(implVersion);  pkg.setImplementationVendor(implVendor);  _packages.add(pkg);}  }
class C{  int terminal(int[] flags) throws RESyntaxException {switch (pattern.charAt(idx)) {case RE.OP_EOL:case RE.OP_BOL:case RE.OP_ANY:    return node(pattern.charAt(idx++),0);case '[':  return characterClass();case '(':return expr(flags);case ')':syntaxError("Unexpected close paren");case '|':internalError();case ']':syntaxError("Mismatched class");case 0:syntaxError("Unexpected end of input");case '?':case '+':case '{':case '*':syntaxError("Missing operand to closure");case '\\':{int idxBeforeEscape=idx;switch (escape()) {case ESC_CLASS:case ESC_COMPLEX:flags[0]&=~NODE_NULLABLE;return node(RE.OP_ESCAPE,pattern.charAt(idx - 1));case ESC_BACKREF:{char backreference=(char)(pattern.charAt(idx - 1) - '0');if (parens <= backreference) {syntaxError("Bad backreference");}flags[0]|=NODE_NULLABLE;return node(RE.OP_BACKREF,backreference);}default :idx=idxBeforeEscape;flags[0]&=~NODE_NULLABLE;break;}}}flags[0]&=~NODE_NULLABLE;return atom();}  }
class C{  @Override public boolean remove(E value){  if (value == null)   return false;  int index=indices[this.getIndex(value)];  if (index < 0) {    return false;  } else {    if (classicalRemove) {      boolean decreasedKey=decreaseKey(value,Double.NEGATIVE_INFINITY);      if (decreasedKey && data[0] == value) {        this.poll();        return true;      } else       return false;    } else {      siftDownUp(index);      indices[this.getIndex(value)]=-1;      this.modCount++;      return true;    }  }}  }
class C{  public final AlgorithmParameters generateParameters(){  return paramGenSpi.engineGenerateParameters();}  }
class C{  public List<Comment> queryForAllNew(){  return queryForEq(Comment.UPDATED,true);}  }
class C{  int size(){  return iConverters.length;}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  super.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public static RelationalOpExpression ge(Expression left,Expression right){  return new RelationalOpExpression(left,">=",right);}  }
class C{  private void validateResult(VOTriggerProcess result,TriggerType triggerType,boolean requiresDetailedEvaluation){  assertNotNull(result);  assertEquals(11,result.getKey());  assertEquals(123,result.getActivationDate());  assertEquals(0,result.getVersion());  assertEquals(TriggerProcessStatus.APPROVED,result.getStatus());  if (requiresDetailedEvaluation) {    assertEquals(2,result.getTargetNames().size());  } else {    assertEquals(1,result.getTargetNames().size());  }  assertEquals("",result.getReason());  VOTriggerDefinition triggerDefinition=result.getTriggerDefinition();  assertEquals(33,triggerDefinition.getKey());  assertEquals("target",triggerDefinition.getTarget());  assertEquals(TriggerTargetType.WEB_SERVICE,triggerDefinition.getTargetType());  assertEquals(triggerType,triggerDefinition.getType());  assertEquals(0,triggerDefinition.getVersion());  VOUser user=result.getUser();  assertEquals(44,user.getKey());  assertEquals(0,user.getVersion());  assertEquals("organizationId",user.getOrganizationId());  assertEquals(UserAccountStatus.ACTIVE,user.getStatus());  assertEquals("userId",user.getUserId());}  }
class C{  @ApiMethod(httpMethod="DELETE") public final void removeRecommendation(@Named("id") final String id,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  Recommendation recommendation=findRecommendation(id);  if (recommendation == null) {    LOG.info("Recommendation " + id + " not found, skipping deletion.");    return;  }  ofy().delete().entity(recommendation).now();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceQuery<O> distFunc=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distFunc,k);  DoubleMinMax ldofminmax=new DoubleMinMax();  WritableDoubleDataStore ldofs=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  if (LOG.isVerbose()) {    LOG.verbose("Computing LDOFs");  }  FiniteProgress progressLDOFs=LOG.isVerbose() ? new FiniteProgress("LDOF for objects",relation.size(),LOG) : null;  Mean dxp=new Mean(), Dxp=new Mean();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    KNNList neighbors=knnQuery.getKNNForDBID(iditer,k);    dxp.reset();    Dxp.reset();    DoubleDBIDListIter neighbor1=neighbors.iter(), neighbor2=neighbors.iter();    for (; neighbor1.valid(); neighbor1.advance()) {      if (DBIDUtil.equal(neighbor1,iditer)) {        continue;      }      dxp.put(neighbor1.doubleValue());      for (neighbor2.seek(neighbor1.getOffset() + 1); neighbor2.valid(); neighbor2.advance()) {        if (DBIDUtil.equal(neighbor2,iditer)) {          continue;        }        Dxp.put(distFunc.distance(neighbor1,neighbor2));      }    }    double ldof=dxp.getMean() / Dxp.getMean();    if (Double.isNaN(ldof) || Double.isInfinite(ldof)) {      ldof=1.0;    }    ldofs.putDouble(iditer,ldof);    ldofminmax.put(ldof);    LOG.incrementProcessed(progressLDOFs);  }  LOG.ensureCompleted(progressLDOFs);  DoubleRelation scoreResult=new MaterializedDoubleRelation("LDOF Outlier Score","ldof-outlier",ldofs,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(ldofminmax.getMin(),ldofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,LDOF_BASELINE);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public SecurityFilter(final IValueExpression<? extends IV> user,final IValueExpression<? extends IV> document,final GlobalAnnotations globals,GlobalSecurityValidator validator){  this(new BOp[]{user,document},XSDBooleanIVValueExpression.anns(globals));  this.validator=validator;}  }
class C{  public void testZoomOut_tooFar(){  float newFieldOfView=ZoomController.MAX_ZOOM_OUT;  expect(astronomerModel.getFieldOfView()).andStubReturn(INITIAL_FIELD_OF_VIEW);  astronomerModel.setFieldOfView(newFieldOfView);  replay(astronomerModel);  zoomController.zoomBy(1000);  verify(astronomerModel);}  }
class C{  public void write(File file) throws IOException {  FileWriter writer=new FileWriter(file);  try {    write(writer);  }  finally {    writer.close();  }}  }
class C{  private void cmd_customize(){  AWindow win=new AWindow(getGraphicsConfiguration());  new AWindowListener(win,this);  int AD_Window_ID=240;  int AD_PrintFormat_ID=m_reportEngine.getPrintFormat().get_ID();  boolean loadedOK=win.initWindow(AD_Window_ID,MQuery.getEqualQuery("AD_PrintFormat_ID",AD_PrintFormat_ID));  if (loadedOK) {    AEnv.addToWindowManager(win);    AEnv.showCenterScreen(win);  }}  }
class C{  public E remove(int index){  hashCodeUpToDate=false;  modCount++;  E oldValue=elementData(index);  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  private void requestFineLocationPermission(){  ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},PERMISSION_REQ);}  }
class C{  public Boolean isSpbmEnabled(){  return spbmEnabled;}  }
class C{  public static String revertNewLines(String string){  int index;  StringBuffer newStringBuffer=new StringBuffer();  while ((index=string.indexOf("\\n")) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\n');    if ((index + 2) < string.length()) {      string=string.substring(index + 2);    } else {      string="";    }  }  newStringBuffer.append(string);  string=newStringBuffer.toString();  newStringBuffer=new StringBuffer();  while ((index=string.indexOf("\\r")) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\r');    if ((index + 2) < string.length()) {      string=string.substring(index + 2);    } else {      string="";    }  }  newStringBuffer.append(string);  return newStringBuffer.toString();}  }
class C{  public void testLargeNumberOfPositions() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())));  int howMany=1000;  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setOmitNorms(true);  for (int i=0; i < 39; i++) {    Document doc=new Document();    StringBuilder builder=new StringBuilder();    for (int j=0; j < howMany; j++) {      if (j % 2 == 0) {        builder.append("even ");      } else {        builder.append("odd ");      }    }    doc.add(newField(fieldName,builder.toString(),customType));    writer.addDocument(doc);  }  IndexReader reader=writer.getReader();  writer.close();  int num=atLeast(13);  for (int i=0; i < num; i++) {    BytesRef bytes=new BytesRef("even");    IndexReaderContext topReaderContext=reader.getContext();    for (    LeafReaderContext leafReaderContext : topReaderContext.leaves()) {      PostingsEnum docsAndPosEnum=getDocsAndPositions(leafReaderContext.reader(),bytes);      assertNotNull(docsAndPosEnum);      int initDoc=0;      int maxDoc=leafReaderContext.reader().maxDoc();      if (random().nextBoolean()) {        initDoc=docsAndPosEnum.nextDoc();      } else {        initDoc=docsAndPosEnum.advance(random().nextInt(maxDoc));      }      String msg="Iteration: " + i + " initDoc: "+ initDoc;      assertEquals(howMany / 2,docsAndPosEnum.freq());      for (int j=0; j < howMany; j+=2) {        assertEquals("position missmatch index: " + j + " with freq: "+ docsAndPosEnum.freq()+ " -- "+ msg,j,docsAndPosEnum.nextPosition());      }    }  }  reader.close();  dir.close();}  }
class C{  protected void transform(TransformW transform){  context.transform(transform.getScaleX(),transform.getShearX(),transform.getShearY(),transform.getScaleY(),transform.getTranslateX(),transform.getTranslateY());}  }
class C{  StartupEvent(NetView v){  this.kind=VIEW;  this.gmsView=v;}  }
class C{  public boolean hasExperimentId(){  return hasExtension(GwoExperimentId.class);}  }
class C{  public RandomListNode helper(RandomListNode node,Map<RandomListNode,RandomListNode> map){  if (node == null)   return null;  if (map.containsKey(node))   return map.get(node);  RandomListNode res=new RandomListNode(node.label);  map.put(node,res);  res.next=helper(node.next,map);  res.random=helper(node.random,map);  return res;}  }
class C{  public String[] repositories(){  return this.repositories;}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.117 -0500",hash_original_method="71297ADEDFB051E21A298196DEA9F7A9",hash_generated_method="512C8436B08E5E9450DA46964D8395B7") public void write(byte b[],int offset,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (offset < 0 || len < 0) {    throw new IndexOutOfBoundsException();  } else   if (offset > b.length || offset + len > b.length) {    throw new IndexOutOfBoundsException();  } else   if (len > 0) {    if (doEncode) {      base64.encode(b,offset,len);    } else {      base64.decode(b,offset,len);    }    flush(false);  }}  }
class C{  static int toCodePoint(char highSurrogate,char lowSurrogate){  int codePoint=((highSurrogate - 0xd800) << 10) + (lowSurrogate - 0xdc00) + 0x10000;  return codePoint;}  }
class C{  public static <V0 extends Vec,V1 extends Vec>List<List<? extends VecPaired<V0,Double>>> allNearestNeighbors(final VectorCollection<V0> collection,V1[] search,final int k,ExecutorService threadpool){  return allNearestNeighbors(collection,Arrays.asList(search),k,threadpool);}  }
class C{  public PanEvent(Object source,int direction,float amount){  this(source,dir2Az(direction),Float.NaN);}  }
class C{  public String keyMarker(){  return keyMarker;}  }
class C{  public void finalizeMethod(){  String currentMethodName=currentMethod.getName();  methodDefs.put(currentMethodName,currentMethod);switch (currentScope) {case AFTER:    afterMethods.add(currentMethod);  break;case AFTER_CLASS:afterClassMethods.add(currentMethod);break;case BEFORE:beforeMethods.add(currentMethod);break;case BEFORE_CLASS:beforeClassMethods.add(currentMethod);break;case CONSTRUCTOR:constructors.add(currentMethod);break;default :break;}currentScope=TestScope.FIELDS;currentMethod=null;currentMethodVars.clear();}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IEditorPart editor=DroidsafePluginUtilities.getActiveEditor();  if (editor != null && editor instanceof ITextEditor) {    IProject project=DroidsafePluginUtilities.getProcessedDroidsafeProjectForEditor(editor);    if (project != null) {      ProjectMarkerProcessor taintMarkerProcessor=ProjectMarkerProcessor.get(project);      Map<String,Set<CallLocationModel>> filteredTaintKinds=taintMarkerProcessor.getFilteredTaintSourcesMap();      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();      CheckedTreeSelectionDialog selectionDialog=new CheckedTreeSelectionDialog(shell,new LabelProvider(),getContentProvider(project));      selectionDialog.setTitle("Filter Taint Sources");      selectionDialog.setMessage("Select the taint sources to display:");      selectionDialog.setContainerMode(true);      selectionDialog.setInput(project);      selectionDialog.setExpandedElements(getExpandedElements());      selectionDialog.setInitialElementSelections(getInitialSelection());      selectionDialog.open();      Object[] result=selectionDialog.getResult();      if (result != null) {        Map<String,Set<CallLocationModel>> newFilteredTaintKinds=new TreeMap<String,Set<CallLocationModel>>();        for (        Object selected : result) {          TreeElement<?,?> selectedElement=(TreeElement<?,?>)selected;          Object data=selectedElement.getData();          if (data instanceof CallLocationModel) {            String taintKind=(String)selectedElement.getParent().getData();            CallLocationModel taintSource=(CallLocationModel)data;            Set<CallLocationModel> taintSources=newFilteredTaintKinds.get(taintKind);            if (taintSources == null) {              taintSources=new TreeSet<CallLocationModel>();              newFilteredTaintKinds.put(taintKind,taintSources);            }            taintSources.add(taintSource);          }        }        if (!newFilteredTaintKinds.equals(filteredTaintKinds)) {          ITextEditor textEditor=(ITextEditor)editor;          taintMarkerProcessor.setFilteredTaintSources(textEditor,newFilteredTaintKinds);        }      }    }  }  return null;}  }
class C{  public static Market createShop(){  Market shop=new Market();  return shop;}  }
class C{  public boolean hasNumSections(){  return hasExtension(GwoNumSections.class);}  }
class C{  protected Intersection findClosestIntersection(int x,int y){  return findClosestIntersection(createLatLonPoint(x,y));}  }
class C{  public T caseN4MethodDeclaration(N4MethodDeclaration object){  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  Attr newAttribute;  Attr oldAttr;  Attr districtAttr;  String attrVal;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);  newAttribute=doc.createAttribute("lang");  oldAttr=testAddress.setAttributeNode(newAttribute);  assertNull("old_attr_doesnt_exist",oldAttr);  districtAttr=testAddress.getAttributeNode("lang");  assertNotNull("new_district_accessible",districtAttr);  attrVal=testAddress.getAttribute("lang");  assertEquals("attr_value","",attrVal);}  }
class C{  public long writeLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : acquireWrite(false,0L));}  }
class C{  public static void makeSettingFile(String dataFile,String testFile,Set<Integer> targets,HeuristicType treeHeuristic,String location){  PrintWriter writer;  try {    writer=new PrintWriter(location + "/setting.s","UTF-8");    writer.println();    writer.println("[Data]");    writer.println("File = " + dataFile);    writer.println("TestSet = " + testFile);    writer.println();    writer.println("[Output]");    writer.println("WritePredictions = {Test}");    StringBuilder targetsFormatted=new StringBuilder();    for (    int singleTarget : targets)     targetsFormatted.append(singleTarget + 1 + ",");    targetsFormatted.deleteCharAt(targetsFormatted.length() - 1);    writer.println();    writer.println("[Attributes]");    writer.println("Target = " + targetsFormatted.toString());    writer.println();    writer.println("[Tree]");    writer.println("Heuristic = " + treeHeuristic.toString());    writer.println();    writer.println("[Ensemble]");    writer.println("Optimize = y");    writer.println();    writer.println("%TargetSize = " + targets.size());    writer.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }}  }
class C{  public ScriptBuilder number(int index,long num){  if (num >= 0 && num < 16) {    return addChunk(index,new ScriptChunk(Script.encodeToOpN((int)num),null));  } else {    return bigNum(index,num);  }}  }
class C{  public void cancelAnimations(){  if (mFlashAnim != null && mFlashAnim.isRunning()) {    mFlashAnim.cancel();  }  if (mCaptureAnimator != null && mCaptureAnimator.isStarted()) {    mCaptureAnimator.cancel();  }}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Hibernate L2 cache example started.");    try (IgniteCache c1=createCache(UPDATE_TIMESTAMPS_CACHE_NAME,ATOMIC);IgniteCache c2=createCache(STANDART_QUERY_CACHE_NAME,ATOMIC);IgniteCache c3=createCache(USER_CACHE_NAME,TRANSACTIONAL);IgniteCache c4=createCache(USER_POSTS_CACHE_NAME,TRANSACTIONAL);IgniteCache c5=createCache(POST_CACHE_NAME,TRANSACTIONAL)){      URL hibernateCfg=ExamplesUtils.url(HIBERNATE_CFG);      SessionFactory sesFactory=createHibernateSessionFactory(hibernateCfg);      System.out.println();      System.out.println(">>> Creating objects.");      final long userId;      Session ses=sesFactory.openSession();      try {        Transaction tx=ses.beginTransaction();        User user=new User("jedi","Luke","Skywalker");        user.getPosts().add(new Post(user,"Let the Force be with you."));        ses.save(user);        tx.commit();        userId=user.getId();      }  finally {        ses.close();      }      printStats(sesFactory);      System.out.println();      System.out.println(">>> Querying object by ID.");      for (int i=0; i < 3; i++) {        ses=sesFactory.openSession();        try {          Transaction tx=ses.beginTransaction();          User user=(User)ses.get(User.class,userId);          System.out.println("User: " + user);          for (          Post post : user.getPosts())           System.out.println("\tPost: " + post);          tx.commit();        }  finally {          ses.close();        }      }      printStats(sesFactory);    }  finally {      ignite.destroyCache(UPDATE_TIMESTAMPS_CACHE_NAME);      ignite.destroyCache(STANDART_QUERY_CACHE_NAME);      ignite.destroyCache(USER_CACHE_NAME);      ignite.destroyCache(USER_POSTS_CACHE_NAME);      ignite.destroyCache(POST_CACHE_NAME);    }  } }  }
class C{  public int compare(Object[] rowA,Object[] rowB){  int diff=0;  for (int i=0; i < dimensionCount; i++) {    int dimFieldA=RemoveDictionaryUtil.getDimension(i,rowA);    int dimFieldB=RemoveDictionaryUtil.getDimension(i,rowB);    diff=dimFieldA - dimFieldB;    if (diff != 0) {      return diff;    }  }  return diff;}  }
class C{  public boolean hasAttributeNS(String name,String x){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  public static void main(String[] args){  ToolTipDemo demo=new ToolTipDemo(null);  demo.mainImpl();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public boolean execute(IGameState gameState){  boolean rc=super.execute(gameState);  if (rc) {    TicTacToeState state=(TicTacToeState)gameState;    NeighborState neighbor=(NeighborState)state.storedData();    neighbor.updateLast(player,(new Cell(this.col,this.row)));  }  return rc;}  }
class C{  public Iterable<Key> keys(Key lo,Key hi){  if (lo == null)   throw new NullPointerException("first argument to keys() is null");  if (hi == null)   throw new NullPointerException("second argument to keys() is null");  Queue<Key> queue=new Queue<Key>();  keys(root,queue,lo,hi);  return queue;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=zzPushbackPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  private InlineDecision shouldInline(Instruction call,boolean isExtant,int realBCI){  if (Call.getMethod(call).getTarget() == null) {    return InlineDecision.NO("Target method is null");  }  CompilationState state=new CompilationState(call,isExtant,gc.getOptions(),gc.getOriginalCompiledMethod(),realBCI);  InlineDecision d=gc.getInlinePlan().shouldInline(state);  return d;}  }
class C{  public Geo midPoint(Geo g2,Geo ret){  return add(g2).normalize(ret);}  }
class C{  protected void addToMainMenu(final Menu fileMenuList){  currentMenu.getMenus().add(fileMenuList);  currentMenu.setUseSystemMenuBar(true);}  }
class C{  public boolean isCaseSensitive(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].caseSensitive;}  }
class C{  protected boolean reportReturn(String methodCall,boolean value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public void testAccuracy(){  WordForm __wordForm=new WordForm();  Parser labeledParser=new POSBracketToToken(labeledTestFile);  int numSeen=0;  int numEqual=0;  Token labeledWord=(Token)labeledParser.next();  for (; labeledWord != null; labeledWord=(Token)labeledParser.next()) {    String labeledTag=labeledWord.label;    String testTag=tagger.discreteValue(labeledWord);    if (labeledTag.equals(testTag)) {      numEqual++;    }    numSeen++;  }  System.out.println("Total accuracy over " + numSeen + " items: "+ String.format("%.2f",100.0 * (double)numEqual / (double)numSeen)+ "%");}  }
class C{  public TerminalBuffer(int columns,int totalRows,int screenRows){  mColumns=columns;  mTotalRows=totalRows;  mScreenRows=screenRows;  mLines=new TerminalRow[totalRows];  blockSet(0,0,columns,screenRows,' ',TextStyle.NORMAL);}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  private LogConfiguration loadLogConfiguration() throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String classname=this.properties.getProperty("feature.logging.impl");  if (classname == null) {    classname=DEFAULT_LOGGING;  }  final Class<?> logImplClass=Class.forName(classname);  final Object logImpl=logImplClass.newInstance();  if (logImpl instanceof LogConfiguration) {    return (LogConfiguration)logImpl;  }  throw new InstantiationException(classname + " is not valid LogConfiguration instance!");}  }
class C{  public boolean first() throws SQLException {  return crsInternal.first();}  }
class C{  protected static Resource[] decodeContexts(final HttpServletRequest req,final String name){  final String[] values=req.getParameterValues(name);  if (values == null) {    return EMPTY_RESOURCE_ARRAY;  }  final Resource[] contexts=EncodeDecodeValue.decodeContexts(values);  return contexts;}  }
class C{  public boolean increment(){  if (value < maxValue) {    value++;    recalculate=true;    return true;  }  return false;}  }
class C{  public void resetData(){  for (int i=0; i < data.length; i++)   data[i]=defaultValue;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssFtsInfo[");  buffer.append("FtsPlatform = ").append(m_ftsPlatform);  buffer.append(", FtsRoot = ").append(m_ftsRoot);  buffer.append("]");  return buffer.toString();}  }
class C{  public ServerProxyConnectionAborted2(){  requestFileName="getstate.query";}  }
class C{  public CUsurfObject(){}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public boolean isJavaProcess(){  String Classname=getClassname();  return (Classname != null && Classname.length() > 0);}  }
class C{  public double nextDouble(){  return nextDouble(lambda);}  }
class C{  public T caseAwaitExpression(AwaitExpression object){  return null;}  }
class C{  public int size(){  return al.size();}  }
class C{  public static final void printCurrentThreadCpuTime(){  printThreadCpuTime(Thread.currentThread());}  }
class C{  public AuthenticatorException(Throwable nested){  super(nested);}  }
class C{  public final synchronized void reconnect() throws IOException, IrcException, NickAlreadyInUseException {  if (getServer() == null) {    throw new IrcException("Cannot reconnect to an IRC server because we were never connected to one previously!");  }  connect(getServer(),getPort(),getPassword());}  }
class C{  public static double mean(Iterator<? extends Number> values){  MeanAccumulator accumulator=new MeanAccumulator();  while (values.hasNext()) {    accumulator.add(values.next().doubleValue());  }  return accumulator.mean();}  }
class C{  public static void showToast(Context context,String msg){  Toast.makeText(context,msg,Toast.LENGTH_LONG).show();}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("MultiTestt1","id int, test varchar(100)");  createTable("MultiTestt2","id int, test varchar(100)");  createTable("MultiTestt3","message text");  createTable("MultiTestt4","id int, test varchar(100), PRIMARY KEY (`id`)");  createTable("MultiTestt5","id int, test varchar(100)");  createTable("MultiTestt6","id int, test varchar(100)");  createTable("MultiTestt7","id int, test varchar(100)");  createTable("MultiTestt8","id int, test varchar(100)");  createTable("MultiTestt10","id int");  createTable("MultiTestreWriteDuplicateTestTable","id int, name varchar(100), PRIMARY KEY (`id`)");  createTable("MultiTesttselect1","LAST_UPDATE_DATETIME TIMESTAMP , nn int");  createTable("MultiTesttselect2","nn int");  createTable("MultiTesttselect3","LAST_UPDATE_DATETIME TIMESTAMP , nn int");  createTable("MultiTesttselect4","nn int");  createTable("MultiTestt3_dupp","col1 int, pkey int NOT NULL, col2 int, col3 int, col4 int, PRIMARY KEY " + "(`pkey`)");  createTable("MultiTesttest_table","col1 VARCHAR(32), col2 VARCHAR(32), col3 VARCHAR(32), col4 VARCHAR(32), " + "col5 VARCHAR(32)");  createTable("MultiTesttest_table2","col1 VARCHAR(32), col2 VARCHAR(32), col3 VARCHAR(32), col4 VARCHAR(32), " + "col5 VARCHAR(32)");  createTable("MultiTestValues","col1 VARCHAR(32), col2 VARCHAR(32)");  createTable("MultiTestprepsemi","id int not null primary key auto_increment, text text");  createTable("MultiTestA","data varchar(10)");  if (testSingleHost) {    Statement st=sharedConnection.createStatement();    st.execute("insert into MultiTestt1 values(1,'a'),(2,'a')");    st.execute("insert into MultiTestt2 values(1,'a'),(2,'a')");    st.execute("insert into MultiTestt5 values(1,'a'),(2,'a'),(2,'b')");  }}  }
class C{  private Element createRSAKeyValue(RSAPrivateKey rsaKey){  if (rsaKey == null) {    return null;  }  String modulusStr=Base64.encodeBytes(rsaKey.getModulus().toByteArray());  String exponentStr=Base64.encodeBytes(rsaKey.getPrivateExponent().toByteArray());  if (modulusStr == null || exponentStr == null) {    return null;  }  Element rsaEle=doc.createElement(SAMLNames.DS_RSAKEYVALUE);  Element modulusEle=doc.createElement(SAMLNames.DS_MODULUS);  Node modText=doc.createTextNode(modulusStr);  modulusEle.appendChild(modText);  Element exponentEle=doc.createElement(SAMLNames.DS_EXPONENT);  Node expText=doc.createTextNode(exponentStr);  exponentEle.appendChild(expText);  rsaEle.appendChild(modulusEle);  rsaEle.appendChild(exponentEle);  return rsaEle;}  }
class C{  protected void rechazarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  RevisionDocumentacionForm revDocForm=((RevisionDocumentacionForm)form);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  GestionRelacionesEntregaBI relacionBI=services.lookupGestionRelacionesBI();  String idRevDoc=revDocForm.getIdRevDocSeleccionado()[0];  if (StringUtils.isNotEmpty(idRevDoc)) {    ActionErrors errors=validateForm(request,revDocForm);    if (errors.isEmpty()) {      RevisionDocumentacionVO revDocVO=prestamosService.getRevisionDocumentacionById(idRevDoc);      if (!relacionBI.existeRelacion(revDocVO.getIdAlta())) {        revDocVO.setMotivoRechazo(revDocForm.getMotivoRechazo());        revDocVO.setEstado(EstadoRevDoc.RECHAZADA.getIdentificador());        prestamosService.actualizarRevisionDocumentacion(revDocVO);        revDocForm.reset();        goLastClientExecuteLogic(mapping,revDocForm,request,response);      } else {        revDocForm.setMotivoRechazo("");        revDocForm.setOcultarMotivo(true);        errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_NO_POSIBLE_RECHAZAR_REVDOC_CON_ALTA));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("listado_revisionDoc"));      }    } else {      ErrorsTag.saveErrors(request,errors);      revDocForm.setOcultarMotivo(false);      setReturnActionFordward(request,mapping.findForward("listado_revisionDoc"));    }  }}  }
class C{  protected void lineTo(float x,float y){  mPSStream.println(trunc(x) + " " + trunc(y)+ LINETO_STR);  mPenX=x;  mPenY=y;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.351 -0500",hash_original_method="16D402CE6C8A18B31360BC5A64438993",hash_generated_method="587E26B484264A00B9E32E86B75AB1CC") public LongSparseArray(int initialCapacity){  initialCapacity=idealLongArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public boolean isBackendVolume(UnManagedVolume volumeToCheck){  String id=volumeToCheck.getId().toString();  for (  UnManagedVolume vol : getUnmanagedBackendVolumes()) {    if (id.equals(vol.getId().toString())) {      return true;    }  }  return false;}  }
class C{  JdbcStatement(JdbcConnection conn){  assert conn != null;  this.conn=conn;}  }
class C{  public void removeMount(){  if (currentMount == null) {    return;  }  currentMount.clear();  currentMount=null;}  }
class C{  public LoggingFraction customFormatter(String name,String module,String className,Properties properties){  Map<Object,Object> formatterProperties=new HashMap<>();  final Enumeration<?> names=properties.propertyNames();  while (names.hasMoreElements()) {    final String nextElement=(String)names.nextElement();    formatterProperties.put(nextElement,properties.getProperty(nextElement));  }  customFormatter(new CustomFormatter(name).module(module).attributeClass(className).properties(formatterProperties));  return this;}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(MethodDescriptor methodDescriptor,Location location){  return fromVisitedInstruction(methodDescriptor,location.getHandle().getPosition());}  }
class C{  public static void appendToFile(String text,Path file){  try {    Files.write(file,StandardCharsets.UTF_8.encode(text).array(),StandardOpenOption.APPEND);  } catch (  IOException e) {    Throwables.propagate(e);  }}  }
class C{  public boolean remove(Object obj){  boolean ret=super.remove(obj);  if (obj instanceof BeanContextMembershipListener) {    super.removeBeanContextMembershipListener((BeanContextMembershipListener)obj);  }  return ret;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.boxPaint,stream);  SerialUtilities.writePaint(this.artifactPaint,stream);}  }
class C{  protected void releaseContext(){  contextStore.erase(context);}  }
class C{  public void execute(Object parent){  Object[] vertices=graph.getChildVertices(parent);  Object[] edges=graph.getChildEdges(parent);  mxRectangle bounds=graph.getBoundsForCells(vertices,false,false,true);  if (averageNodeArea == 0.0) {    if (boundsWidth == 0.0 && bounds != null) {      boundsX=bounds.getX();      boundsY=bounds.getY();      boundsWidth=bounds.getWidth();      boundsHeight=bounds.getHeight();    }  } else {    double newArea=averageNodeArea * vertices.length;    double squareLength=Math.sqrt(newArea);    if (bounds != null) {      double centreX=bounds.getX() + bounds.getWidth() / 2.0;      double centreY=bounds.getY() + bounds.getHeight() / 2.0;      boundsX=centreX - squareLength / 2.0;      boundsY=centreY - squareLength / 2.0;    } else {      boundsX=0;      boundsY=0;    }    boundsWidth=squareLength;    boundsHeight=squareLength;    if (boundsX < 0.0 || boundsY < 0.0) {      double maxNegativeAxis=Math.min(boundsX,boundsY);      double axisOffset=-maxNegativeAxis;      boundsX+=axisOffset;      boundsY+=axisOffset;    }  }  if (initialMoveRadius == 0.0) {    initialMoveRadius=Math.max(boundsWidth,boundsHeight) / 2.0;  }  moveRadius=initialMoveRadius;  minDistanceLimitSquared=minDistanceLimit * minDistanceLimit;  maxDistanceLimitSquared=maxDistanceLimit * maxDistanceLimit;  unchangedEnergyRoundCount=0;  Map<Object,Integer> vertexMap=new Hashtable<Object,Integer>();  v=new CellWrapper[vertices.length];  for (int i=0; i < vertices.length; i++) {    v[i]=new CellWrapper(vertices[i]);    vertexMap.put(vertices[i],new Integer(i));    bounds=graph.getCellBounds(vertices[i]);    double width=bounds.getWidth();    double height=bounds.getHeight();    v[i].x=bounds.getX() + width / 2.0;    v[i].y=bounds.getY() + height / 2.0;    if (approxNodeDimensions) {      v[i].radiusSquared=Math.min(width,height);      v[i].radiusSquared*=v[i].radiusSquared;    } else {      v[i].radiusSquared=width * width;      v[i].heightSquared=height * height;    }  }  e=new CellWrapper[edges.length];  mxIGraphModel model=graph.getModel();  for (int i=0; i < e.length; i++) {    e[i]=new CellWrapper(edges[i]);    Object sourceCell=model.getTerminal(edges[i],true);    Object targetCell=model.getTerminal(edges[i],false);    Integer source=null;    Integer target=null;    if (sourceCell != null) {      source=(Integer)vertexMap.get(sourceCell);    }    if (targetCell != null) {      target=(Integer)vertexMap.get(targetCell);    }    if (source != null) {      e[i].source=source.intValue();    } else {      e[i].source=-1;    }    if (target != null) {      e[i].target=target.intValue();    } else {      e[i].target=-1;    }  }  for (int i=0; i < v.length; i++) {    v[i].relevantEdges=getRelevantEdges(i);    v[i].connectedEdges=getConnectedEdges(i);  }  xNormTry=new double[triesPerCell];  yNormTry=new double[triesPerCell];  for (int i=0; i < triesPerCell; i++) {    double angle=(double)i * ((2.0 * Math.PI) / (double)triesPerCell);    xNormTry[i]=Math.cos(angle);    yNormTry[i]=Math.sin(angle);  }  for (iteration=0; iteration < maxIterations; iteration++) {    performRound();  }  double[][] result=new double[v.length][2];  for (int i=0; i < v.length; i++) {    vertices[i]=v[i].cell;    bounds=graph.getCellBounds(vertices[i]);    result[i][0]=v[i].x - bounds.getWidth() / 2;    result[i][1]=v[i].y - bounds.getHeight() / 2;  }  model.beginUpdate();  try {    for (int i=0; i < vertices.length; i++) {      setVertexLocation(vertices[i],result[i][0],result[i][1]);    }  }  finally {    model.endUpdate();  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  DummyCredentials other=(DummyCredentials)obj;  if (password == null) {    if (other.password != null) {      return false;    }  } else   if (!password.equals(other.password)) {    return false;  }  if (token == null) {    if (other.token != null) {      return false;    }  } else   if (!token.equals(other.token)) {    return false;  }  if (username == null) {    if (other.username != null) {      return false;    }  } else   if (!username.equals(other.username)) {    return false;  }  return true;}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  while (true) {    InputNode next=node.getNext();    if (next == null) {      return true;    }    root.validate(next);  }}  }
class C{  public boolean isEqual(Ingredient ingredient){  for (  Ingredient i : equivalents) {    if (i.getUnlocalized().equals(ingredient.getUnlocalized()))     return true;  }  return false;}  }
class C{  public boolean isDefaultEnabled(){  return defEnabled;}  }
class C{  public void flush(){  if (!begun)   throw new IllegalStateException(getClass().getSimpleName() + " flush() without begin()");}  }
class C{  private void doTileRefStuff(String pathname,boolean DCW){  String faceIDColumnName=null;  boolean addSlash=true;  if (pathname.endsWith("/") || pathname.endsWith(File.separator)) {    addSlash=false;  }  try {    String fcsFile=pathname + (addSlash ? "/" : "") + "fcs";    if (!BinaryFile.exists(fcsFile)) {      fcsFile+=".";    }    DcwRecordFile fcs=new DcwRecordFile(fcsFile);    List<Object> fcsv=new ArrayList<Object>(fcs.getColumnCount());    int fcscols[];    if (!DCW) {      fcscols=fcs.lookupSchema(fcsColumns,true);    } else {      fcscols=fcs.lookupSchema(fcsColumnsDCW,true);    }    while (fcs.parseRow(fcsv)) {      String fclass=(String)fcsv.get(fcscols[0]);      String table1=(String)fcsv.get(fcscols[1]);      String table1_key=(String)fcsv.get(fcscols[2]);      if ("tileref".equalsIgnoreCase(fclass) && "tileref.aft".equalsIgnoreCase(table1)) {        faceIDColumnName=table1_key.toLowerCase();        break;      }    }    fcs.close();  } catch (  FormatException f) {    if (!DCW)     doTileRefStuff(pathname,true);    return;  }catch (  NullPointerException npe) {    return;  }  if (faceIDColumnName == null) {    return;  }  isTiled=true;  try {    DcwRecordFile aft=new DcwRecordFile(pathname + (addSlash ? "/" : "") + "tileref.aft");    int faceIDColumn=aft.whatColumn(faceIDColumnName.toLowerCase());    int tileNameColumn=aft.whatColumn("tile_name");    if ((faceIDColumn == -1) || (tileNameColumn == -1)) {      aft.close();      return;    }    String fbrFile=pathname + (addSlash ? "/" : "") + "fbr";    if (!BinaryFile.exists(fbrFile)) {      fbrFile+=".";    }    DcwRecordFile fbr=new DcwRecordFile(fbrFile);    int fbrIDColumn=fbr.whatColumn(Constants.ID);    List<Object> aftv=new ArrayList<Object>(aft.getColumnCount());    List<Object> fbrv=new ArrayList<Object>(fbr.getColumnCount());    int fbrcols[]=fbr.lookupSchema(fbrColumns,true);    ArrayList<Object> tileArrayList=new ArrayList<Object>(500);    Object nullTile=new Object();    while (aft.parseRow(aftv)) {      int fac_num=((Number)aftv.get(faceIDColumn)).intValue();      fbr.getRow(fbrv,fac_num);      int tileid=((Number)aftv.get(fbrIDColumn)).intValue();      String tilename=(String)aftv.get(tileNameColumn);      char chs[]=tilename.toCharArray();      boolean goodTile=false;      for (int i=0; i < chs.length; i++) {        if ((chs[i] != '\\') && (chs[i] != ' ')) {          goodTile=true;        }        if (chs[i] == '\\') {          chs[i]='/';        }      }      tilename=new String(chs);      while (tileid > tileArrayList.size() - 1) {        tileArrayList.add(nullTile);      }      if (!goodTile) {        continue;      }      float westlon=((Number)fbrv.get(fbrcols[0])).floatValue();      float southlat=((Number)fbrv.get(fbrcols[1])).floatValue();      float eastlon=((Number)fbrv.get(fbrcols[2])).floatValue();      float northlat=((Number)fbrv.get(fbrcols[3])).floatValue();      if (bounds == null) {        bounds=new DataBounds(westlon,southlat,eastlon,northlat);      } else {        bounds.add(westlon,southlat);        bounds.add(eastlon,northlat);      }      tileArrayList.set(tileid,new TileDirectory(tilename,tileid,northlat,southlat,eastlon,westlon));    }    aft.close();    fbr.close();    containedTiles=new TileDirectory[tileArrayList.size()];    Iterator<Object> it=tileArrayList.iterator();    int cnt=0;    while (it.hasNext()) {      Object obj=it.next();      if (obj == nullTile) {        containedTiles[cnt++]=null;      } else {        containedTiles[cnt++]=(TileDirectory)obj;      }    }  } catch (  FormatException f) {    containedTiles=null;  }}  }
class C{  @JTranscInline @HaxeMethodBody("if (!p0) HaxeNatives.debugger();") @JTranscMethodBody(target="js",value="if (!p0) debugger;") static public void assert2(boolean trueCond){  if (!trueCond) {    System.out.println("debugger");    throw new Error("Debugger");  }}  }
class C{  public <T>CompletableFuture<T> submit(Command<T> command){  State state=state();  if (state == State.CLOSED || state == State.EXPIRED) {    return Futures.exceptionalFuture(new ClosedSessionException("session closed"));  }  return submitter.submit(command);}  }
class C{  @Override public Weight createWeight(IndexSearcher searcher,boolean needsScores,float boost) throws IOException {  return new DisjunctionMaxWeight(searcher,needsScores,boost);}  }
class C{  public void removeIncomingBytestreamListener(String initiatorJID){  this.userListeners.remove(initiatorJID);}  }
class C{  public void addPhonenumber(String aPhonenumber){  if (mPhoneNumbers.indexOf(aPhonenumber) < 0) {    mPhoneNumbers.add(aPhonenumber);  }}  }
class C{  public TreeDecoder(BitVector[] lexSortedCodeWord,int[] symbol){  this(buildTree(lexSortedCodeWord,symbol,0,0,lexSortedCodeWord.length),lexSortedCodeWord.length);}  }
class C{  @Deprecated protected ActionListener createKeyboardHomeListener(){  return new KeyboardHomeHandler();}  }
class C{  private void computeDepthParity(PolygonizeDirectedEdge de){}  }
class C{  public MDMHomePage loginAs(String userName,String password) throws IOException {  WebElement userNameField=driver.findElement(By.name(uiElementMapper.getElement("emm.login.username")));  WebElement passwordField=driver.findElement(By.name(uiElementMapper.getElement("emm.login.password")));  userNameField.sendKeys(userName);  passwordField.sendKeys(password);  driver.findElement(By.xpath(uiElementMapper.getElement("emm.login.button.xpath"))).click();  return new MDMHomePage(driver);}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  public void showDialog(@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setUrl("");  view.setName("");  view.setEnableOkButton(false);  view.showDialog();}  }
class C{  public DataSource<Void> prefetchToDiskCache(ImageRequest imageRequest,Object callerContext){  if (!mIsPrefetchEnabledSupplier.get()) {    return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);  }  try {    Producer<Void> producerSequence=mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);    return submitPrefetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  public void open(){  if (((partialTransition != null && partialTransition.getStatus().equals(Status.STOPPED)) || partialTransition == null)) {    drawerTransition.setRate(1);    this.drawerTransition.setOnFinished(null);    if (this.drawerTransition.getStatus().equals(Status.STOPPED)) {      if (isHidden())       this.drawerTransition.playFromStart(); else       this.drawerTransition.play();    }  } else {    partialOpen();  }}  }
class C{  public <T>T retrieve(String key,final Class<T> clazz,boolean isEncrypted,String encryptKey){  key=safetyKey(key);  File file=new File(cacheDirectory,key);  if (isEncrypted) {    file=fileEncryptor.decrypt(encryptKey,file);  }  try {    T data=jolyglot.fromJson(file,clazz);    return data;  } catch (  Exception ignore) {    return null;  } finally {    if (isEncrypted) {      file.delete();    }  }}  }
class C{  public void checkTimeout() throws RuntimeException {  if (kill) {    throw new RuntimeException("Kill switch");  }}  }
class C{  public String toString(){  return "TAG_IntArray(\"" + name + "\"): size="+ data.length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.465 -0500",hash_original_method="06213E432958F959DC8D842BD0BC1A12",hash_generated_method="A12F4F08B7A2E0F4F9C66F47F3D4C47B") public Builder add(Element element,String name,int arraySize){  if (arraySize < 1) {    throw new RSIllegalArgumentException("Array size cannot be less than 1.");  }  if (mCount == mElements.length) {    Element[] e=new Element[mCount + 8];    String[] s=new String[mCount + 8];    int[] as=new int[mCount + 8];    System.arraycopy(mElements,0,e,0,mCount);    System.arraycopy(mElementNames,0,s,0,mCount);    System.arraycopy(mArraySizes,0,as,0,mCount);    mElements=e;    mElementNames=s;    mArraySizes=as;  }  mElements[mCount]=element;  mElementNames[mCount]=name;  mArraySizes[mCount]=arraySize;  mCount++;  return this;}  }
class C{  public void addOfflineMovie(String title,String datasource){  addOfflineMovie(title,datasource,MediaSource.UNKNOWN);}  }
class C{  public void testWhitespaceBug() throws Exception {  String notes="<notes> This is a      multiline\n\rentry</notes>";  Document doc=DocumentHelper.parseText(notes);  OutputFormat format=new OutputFormat();  format.setEncoding("UTF-8");  format.setIndentSize(4);  format.setNewlines(true);  format.setTrimText(true);  format.setExpandEmptyElements(true);  StringWriter buffer=new StringWriter();  XMLWriter writer=new XMLWriter(buffer,format);  writer.write(doc);  String xml=buffer.toString();  log(xml);  Document doc2=DocumentHelper.parseText(xml);  String text=doc2.valueOf("/notes");  String expected="This is a multiline entry";  assertEquals("valueOf() returns the correct text padding",expected,text);  assertEquals("getText() returns the correct text padding",expected,doc2.getRootElement().getText());}  }
class C{  protected static void initCommunicationSummaryTreeNode(CommunicationSummaryStatistics node,Map<String,CommunicationSummaryStatistics> nodeMap,Set<String> usedIds){  for (  String id : node.getOutbound().keySet()) {    if (!usedIds.contains(id)) {      if (!nodeMap.containsKey(id)) {        log.severe("Node missing for id = " + id);      }      CommunicationSummaryStatistics copy=new CommunicationSummaryStatistics(nodeMap.get(id));      ConnectionStatistics cs=node.getOutbound().get(id);      cs.setNode(copy);      usedIds.add(id);      initCommunicationSummaryTreeNode(copy,nodeMap,usedIds);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.NULL_TYPE;}  }
class C{  public static void superposeWithSparseAngle(ComplexVector vec1,ComplexVector vec2,float weight,int[] permutation){  assert (vec1.getOpMode() == Mode.CARTESIAN || vec1.getOpMode() == ComplexVector.Mode.HERMITIAN);  assert (vec2.getOpMode() == Mode.POLAR_SPARSE);  short offsets[]=vec2.getSparseOffsets();  float[] coordinates=vec1.getCoordinates();  for (int i=0; i < offsets.length; i+=2) {    int positionToAdd=offsets[i] << 1;    if (permutation != null)     positionToAdd=permutation[offsets[i]] << 1;    int phaseAngleIdx=i + 1;    coordinates[positionToAdd]+=CircleLookupTable.getRealEntry(offsets[phaseAngleIdx]) * weight;    coordinates[positionToAdd + 1]+=CircleLookupTable.getImagEntry(offsets[phaseAngleIdx]) * weight;  }}  }
class C{  private void retrieveXrdsDocument(YadisResult result,int maxRedirects,Set serviceTypes) throws DiscoveryException {  _httpFetcher.getRequestOptions().setMaxRedirects(maxRedirects);  try {    HttpResponse resp=_httpFetcher.get(result.getXrdsLocation().toString());    if (resp == null || HttpStatus.SC_OK != resp.getStatusCode())     throw new YadisException("GET failed on " + result.getXrdsLocation(),OpenIDException.YADIS_GET_ERROR);    result.setXrdsLocation(resp.getFinalUri(),OpenIDException.YADIS_GET_INVALID_RESPONSE);    Header contentType=resp.getResponseHeader("content-type");    if (contentType != null && contentType.getValue() != null)     result.setContentType(contentType.getValue());    if (resp.isBodySizeExceeded())     throw new YadisException("More than " + _httpFetcher.getRequestOptions().getMaxBodySize() + " bytes in HTTP response body from "+ result.getXrdsLocation(),OpenIDException.YADIS_XRDS_SIZE_EXCEEDED);    result.setEndpoints(XRDS_PARSER.parseXrds(resp.getBody(),serviceTypes));  } catch (  IOException e) {    throw new YadisException("Fatal transport error: " + e.getMessage(),OpenIDException.YADIS_GET_TRANSPORT_ERROR,e);  }}  }
class C{  public void animateVisibility(boolean visible){  if (mVisible != visible) {    mVisible=visible;    if (mAlphaAnimator != null) {      mAlphaAnimator.cancel();    }    mAlphaAnimator=ObjectAnimator.ofFloat(this,"alpha",visible ? 1f : 0f);    mAlphaAnimator.setDuration(visible ? 200 : 150);    mAlphaAnimator.start();  }}  }
class C{  private void resolveResultingIndependencies(){  List<SepsetMapDci> allSepsets=new ArrayList<>();  Pc fci=new Pc(new IndTestSepset(combineSepsets(sepsetMaps),variables));  System.out.println("Starting pc...");  SepsetMapDci consSepset=new SepsetMapDci();  doSepsetClosure(consSepset,fci.search());  for (int k=0; k < marginalVars.size(); k++) {    SepsetMapDci newSepset=new SepsetMapDci();    List<NodePair> pairs=allNodePairs(new ArrayList<>(marginalVars.get(k)));    int p=1;    for (    NodePair pair : pairs) {      Node x=pair.getFirst();      Node y=pair.getSecond();      if (consSepset.getSet(x,y) == null) {        continue;      }      int c=1;      List<List<Node>> conds=consSepset.getSet(x,y);      for (      List<Node> z : conds) {        System.out.println("Resolving inconsistencies... " + c + " of "+ conds.size()+ " ("+ p+ " of "+ pairs.size()+ " pairs and )"+ (k + 1)+ " of "+ marginalVars.size()+ " datasets)");        if (marginalVars.get(k).containsAll(z)) {          newSepset.set(x,y,z);        }        c++;      }      p++;    }    allSepsets.add(newSepset);  }  for (int k=0; k < marginalVars.size(); k++) {    List<Node> variables=new ArrayList<>(marginalVars.get(k));    Graph newGraph=new EdgeListGraph(variables);    newGraph.fullyConnect(Endpoint.CIRCLE);    FasDci fas=new FasDci(newGraph,new IndTestSepset(allSepsets.get(k),new ArrayList<>(marginalVars.get(k))));    minimalSepsetMaps.add(fas.search());  }  sepsetMaps=allSepsets;  System.out.println(sepsetMaps);}  }
class C{  public void drawColorBar(Graphics2D g2,Rectangle2D colorBarArea,RectangleEdge edge){  Object antiAlias=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  Stroke strokeSaved=g2.getStroke();  g2.setStroke(new BasicStroke(1.0f));  if (RectangleEdge.isTopOrBottom(edge)) {    double y1=colorBarArea.getY();    double y2=colorBarArea.getMaxY();    double xx=colorBarArea.getX();    Line2D line=new Line2D.Double();    while (xx <= colorBarArea.getMaxX()) {      double value=this.axis.java2DToValue(xx,colorBarArea,edge);      line.setLine(xx,y1,xx,y2);      g2.setPaint(getPaint(value));      g2.draw(line);      xx+=1;    }  } else {    double y1=colorBarArea.getX();    double y2=colorBarArea.getMaxX();    double xx=colorBarArea.getY();    Line2D line=new Line2D.Double();    while (xx <= colorBarArea.getMaxY()) {      double value=this.axis.java2DToValue(xx,colorBarArea,edge);      line.setLine(y1,xx,y2,xx);      g2.setPaint(getPaint(value));      g2.draw(line);      xx+=1;    }  }  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,antiAlias);  g2.setStroke(strokeSaved);}  }
class C{  public void translateCMPL(){switch (value) {case EQUAL:    value=CMPL_EQUAL;  break;case NOT_EQUAL:value=CMPL_NOT_EQUAL;break;case LESS:value=CMPL_LESS;break;case GREATER_EQUAL:value=CMPL_GREATER_EQUAL;break;case GREATER:value=CMPL_GREATER;break;case LESS_EQUAL:value=CMPL_LESS_EQUAL;break;default :throw new OptimizingCompilerException("invalid condition " + this);}}  }
class C{  private Map<String,Set<String>> findMissingClasses(Map<String,Set<String>> deps,Set<String> zipClasses){  Map<String,Set<String>> missing=new TreeMap<String,Set<String>>();  for (  Entry<String,Set<String>> entry : deps.entrySet()) {    String name=entry.getKey();    for (    String dep : entry.getValue()) {      if (!zipClasses.contains(dep)) {        Set<String> set=missing.get(dep);        if (set == null) {          set=new TreeSet<String>();          missing.put(dep,set);        }        set.add(name);      }    }  }  return missing;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected double unwrapValue(Object value){  return ((Double)value).doubleValue();}  }
class C{  public Boolean isDigitalOn(int pin){  if (!parent.isDigitalEnabled(pin)) {    return null;  }  if (pin >= 0 && pin <= 7) {    return ByteUtils.getBit(dioLsb,pin + 1);  } else {    return ByteUtils.getBit(dioMsb,1);  }}  }
class C{  public void uncaughtException(Thread t,Throwable e){  Clock.stop();  Trace.trace(Item.EXCEPTION,"Processing uncaught exception %s",e.getClass().getCanonicalName());  if (e.getClass() == expectedThrowable) {    System.err.println("Mutator " + context.getId() + " exiting due to expected exception of class "+ expectedThrowable);    Main.exitWithSuccess();  } else {    System.err.print("Mutator " + context.getId() + " caused unexpected exception: ");    e.printStackTrace();    Main.exitWithFailure();  }}  }
class C{  public String print(ReadableInstant instant){  StringBuffer buf=new StringBuffer(requirePrinter().estimatePrintedLength());  printTo(buf,instant);  return buf.toString();}  }
class C{  public void addDragSourceMotionListener(DragSourceMotionListener dsml){  if (dsml != null) {synchronized (this) {      motionListener=DnDEventMulticaster.add(motionListener,dsml);    }  }}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  private void init(){  this.fillFieldValues();  mainEditor=new ReflectivePropertyEditor();  if (entityRef instanceof RotatingEntity) {    mainEditor.setExcludeList(new String[]{"entityType","id"});  } else {    mainEditor.setExcludeList(new String[]{"entityType","id","showSensors","sensorsEnabled","effectorsEnabled"});  }  mainEditor.setObject(entityRef);  tabbedPane.addTab("Main",mainEditor);  if (entityRef.getSmellSource() != null) {    smellPanel=new SmellSourcePanel(entityRef.getSmellSource());    tabbedPane.addTab("Smell",smellPanel.getValuesPanel());    tabbedPane.addTab("Dispersion",smellPanel.getDispersionPanel());  }  if (entityRef instanceof RotatingEntity) {    tabbedPane.addTab("Sensors",new SensorPanel(entityRef));    tabbedPane.addTab("Effectors",new EffectorPanel(entityRef));  }  cbRenderer.setPreferredSize(new Dimension(cbRendererDimension,cbRendererDimension));  cbImageName.setRenderer(cbRenderer);  bitesToDie.setColumns(2);  edible.addActionListener(this);  miscPanel.addItem("Edible",edible);  miscPanel.addItem("Bites to die",bitesToDie);  miscPanel.addItem("Resurrection Probability",resurrectionProb);  ShowHelpAction helpAction;  if (entityRef instanceof RotatingEntity) {    helpAction=new ShowHelpAction("Pages/Worlds/OdorWorld/agents.html");  } else {    helpAction=new ShowHelpAction("Pages/Worlds/OdorWorld/objects.html");  }  addButton(new JButton(helpAction));  setContentPane(tabbedPane);}  }
class C{  public Mail duplicate(String newName){  try {    return new MailImpl(this,newName);  } catch (  MessagingException me) {  }  return null;}  }
class C{  public void startApp(){  if (bFirst == false) {    System.out.println("Starting GPIO Demo");    try {      led1=GPIOManager.getPin(LED1_PIN_ID);      led2=GPIOManager.getPin(LED2_PIN_ID);      ledPort=GPIOManager.getPort(LED_PORT_ID);      button1=GPIOManager.getPin(BUTTON1_PIN_ID);      button2=GPIOManager.getPin(BUTTON2_PIN_ID);      button3=GPIOManager.getPin(BUTTON3_PIN_ID);    } catch (    Exception ex) {      ex.printStackTrace();      System.out.println("Get pin and port fail");      return;    }    System.out.println("set listener for button 1,2,3");    try {      button1.setInputListener(button1Listener);      button2.setInputListener(button2Listener);      button3.setInputListener(button3Listener);    } catch (    Exception ex) {      ex.printStackTrace();    }    bFirst=true;  } else {    System.out.println("GPIO Demo is already started..");  }}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  public static boolean isPotentialEmergencyNumber(String number){  return isEmergencyNumberInternal(number,false);}  }
class C{  public boolean isVisibleByRegisteredUsers(){  List<PermissionRule> access=relevant.getPermission(Permission.READ);  List<PermissionRule> overridden=relevant.getOverridden(Permission.READ);  Set<ProjectRef> allows=new HashSet<>();  Set<ProjectRef> blocks=new HashSet<>();  for (  PermissionRule rule : access) {    if (rule.isBlock()) {      blocks.add(relevant.getRuleProps(rule));    } else     if (SystemGroupBackend.isAnonymousOrRegistered(rule.getGroup())) {      allows.add(relevant.getRuleProps(rule));    }  }  for (  PermissionRule rule : overridden) {    if (SystemGroupBackend.isAnonymousOrRegistered(rule.getGroup())) {      blocks.remove(relevant.getRuleProps(rule));    }  }  blocks.removeAll(allows);  return blocks.isEmpty() && !allows.isEmpty();}  }
class C{  public float score(float weight,float boost){  if (boost == 0f) {    return weight;  }  if (weight == 0f) {    return boost;  }  return weight * boost;}  }
class C{  public Vector2f add(Vector2f vec,Vector2f result){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  if (result == null)   result=new Vector2f();  result.x=x + vec.x;  result.y=y + vec.y;  return result;}  }
class C{  public static CoreException createCoreException(String message,Throwable throwable){  return new CoreException(createErrorStatus(message,throwable));}  }
class C{  public final void testCodonToAmino1(){  assertEquals(512,TranslatedFrame.CODON_TO_AMINO.length);  for (  final DNA c1 : DNA.values()) {    for (    final DNA c2 : DNA.values()) {      for (      final DNA c3 : DNA.values()) {        final Protein pr=TranslatedFrame.codonToAmino(c1,c2,c3);        final byte prb=TranslatedFrame.codonToAmino((byte)c1.ordinal(),(byte)c2.ordinal(),(byte)c3.ordinal());        assertEquals(pr.ordinal(),prb);      }    }  }}  }
class C{  public boolean isAmmoUsable(){  if (destroyed || missing || m_bDumping|| useless|| (shotsLeft <= 0)|| (location == Entity.LOC_NONE)) {    return false;  }  return true;}  }
class C{  public Value(String name,Type type,Set<String> aggregators){  setName(name);  setType(type);  setAggregators(aggregators);}  }
class C{  public SVGOMSubImageElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing s=getAir(stack);  return Boolean.valueOf(s != null && !(s.isFirstRun()));}  }
class C{  @Deprecated public void percentile(String name,String defName,double percent){  datasource(name,defName,new Variable.PERCENTILE(percent));}  }
class C{  public int execute(){  return doExecute(new UpdateExecutor());}  }
class C{  public void addColumn(String name,String expr){  Expression ex=ExpressionParser.parse(expr);  Throwable t=ExpressionParser.getError();  if (t != null) {    throw new RuntimeException(t);  } else {    addColumn(name,ex);  }}  }
class C{  public static void process(Process p,LineConsumer stdout) throws IOException {  try (BufferedReader inputReader=new BufferedReader(new InputStreamReader(p.getInputStream()))){    String line;    while ((line=inputReader.readLine()) != null) {      stdout.writeLine(line);    }  } }  }
class C{  public boolean postLoad(){  return false;}  }
class C{  @RequestMapping(value={"/{id}"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),"read"); else     processDAO.securityCheck(processId,principal.getName(),"read");    List<Properties> propertiesList=new ArrayList<Properties>();    Process process=new Process();    process.setProcessId(processId);    List<com.wipro.ats.bdre.md.dao.jpa.Properties> propertiesList1=new ArrayList<com.wipro.ats.bdre.md.dao.jpa.Properties>();    propertiesList1=propertiesDAO.getByProcessId(process);    Integer counter=propertiesList1.size();    for (    com.wipro.ats.bdre.md.dao.jpa.Properties properties : propertiesList1) {      com.wipro.ats.bdre.md.beans.table.Properties returnProperties=new com.wipro.ats.bdre.md.beans.table.Properties();      returnProperties.setProcessId(properties.getProcess().getProcessId());      returnProperties.setConfigGroup(properties.getConfigGroup());      returnProperties.setKey(properties.getId().getPropKey());      returnProperties.setValue(properties.getPropValue());      returnProperties.setDescription(properties.getDescription());      returnProperties.setCounter(counter);      propertiesList.add(returnProperties);    }    restWrapper=new RestWrapper(propertiesList,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + "selected from Properties by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  if (log_rounds < 4 || log_rounds > 31) {    throw new IllegalArgumentException("Bad number of rounds");  }  StringBuilder rs=new StringBuilder();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10) {    rs.append("0");  }  rs.append(log_rounds);  rs.append("$");  encode_base64(rnd,rnd.length,rs);  return rs.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void sendMomentaryFunctionGroup4(){  if (log.isDebugEnabled()) {    log.debug("Momentary function request not supported by Elite.");  }  return;}  }
class C{  @After public void closeStore(){  if (store == null) {    return;  }  store.close();  store=null;}  }
class C{  public static void escapeString(String label,Appendable appendable,boolean escapeUnicode) throws IOException {  int labelLength=label.length();  for (int i=0; i < labelLength; i++) {    char c=label.charAt(i);    int cInt=c;    if (c == '\\') {      appendable.append("\\\\");    } else     if (c == '"') {      appendable.append("\\\"");    } else     if (c == '\n') {      appendable.append("\\n");    } else     if (c == '\r') {      appendable.append("\\r");    } else     if (c == '\t') {      appendable.append("\\t");    } else     if (cInt >= 0x0 && cInt <= 0x8 || cInt == 0xB || cInt == 0xC || cInt >= 0xE && cInt <= 0x1F || cInt >= 0x7F && cInt <= 0xFFFF) {      if (escapeUnicode) {        appendable.append("\\u");        appendable.append(toHexString(cInt,4));      } else {        appendable.append(c);      }    } else     if (cInt >= 0x10000 && cInt <= 0x10FFFF) {      if (escapeUnicode) {        appendable.append("\\U");        appendable.append(toHexString(cInt,8));      } else {        appendable.append(c);      }    } else {      appendable.append(c);    }  }}  }
class C{  @Override public void showURLInBrowser(final URL url){  if ("mailto".equals(url.getProtocol()) && Env.APP_SETTINGS.get(Settings.USE_INTERNAL_EMAIL_CLIENT)) {    if (checkEmailSettings())     new SendEmailDialog(url.getPath());  } else   super.showURLInBrowser(url);}  }
class C{  private static void removeQueryCursor(Long qryId,ConcurrentHashMap<Long,QueryCursorIterator> qryCurs){  QueryCursorIterator qryCurIt=qryCurs.get(qryId);  if (qryCurIt == null)   return;  qryCurIt.lock();  try {    if (qryCurIt.timestamp() == -1)     return;    qryCurIt.close();    qryCurs.remove(qryId);  }  finally {    qryCurIt.unlock();  }}  }
class C{  public boolean checkMetaTypeConsistency(){  if (hasMethod()) {    return !(hasField() || hasAccessor());  }  return true;}  }
class C{  public LdapUsers(){  _usersImpl=new LdapUsersImpl();}  }
class C{  private static void cycleExistingSearch(final Window parent,final ZyGraph graph,final GraphSearcher searcher,final boolean cycleBackwards,final boolean zoomToResult){  if (cycleBackwards) {    searcher.getCursor().previous();    if (searcher.getCursor().isBeforeFirst()) {      CMessageBox.showInformation(parent,"All search results were displayed. Going back to the last one");    }  } else {    searcher.getCursor().next();    if (searcher.getCursor().isAfterLast()) {      CMessageBox.showInformation(parent,"All search results were displayed. Going back to the first one");    }  }  final SearchResult result=searcher.getCursor().current();  if (result == null) {    return;  }  if (result.getObject() instanceof NaviNode) {    ZyGraphHelpers.centerNode(graph,(NaviNode)result.getObject(),zoomToResult);  } else   if (result.getObject() instanceof NaviEdge) {    ZyGraphHelpers.centerEdgeLabel(graph,(NaviEdge)result.getObject(),zoomToResult);  }}  }
class C{  public synchronized void resetAnswers(){  answers=null;}  }
class C{  @Override protected void processException(ReplyException ex){  logger.debug("DeposePrimaryBucketMessage ignoring exception {}",ex.getMessage(),ex);}  }
class C{  public OMArc(double latPoint,double lonPoint,int offset_x1,int offset_y1,int w,int h,double s,double e){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  center=new LatLonPoint.Double(latPoint,lonPoint);  off_x=offset_x1;  off_y=offset_y1;  width=w;  height=h;  start=s;  extent=e;}  }
class C{  private void composite(){  ArrayList<Sprite> newSlaves=new ArrayList<Sprite>(slaves.size());  ImageSprite floor=null;  ListIterator<Sprite> iter=slaves.listIterator();  boolean copied=false;  while (iter.hasNext()) {    Sprite current=iter.next();    if (current instanceof ImageSprite) {      if (floor != null) {        if (!copied) {          floor=new ImageSprite(floor);          copied=true;        }        Graphics g=floor.getGraphics();        current.draw(g,0,0);        g.dispose();      } else {        floor=(ImageSprite)current;        if (blend != null) {          floor=new ImageSprite(floor);          copied=true;        }      }    } else {      if (floor != null) {        newSlaves.add(floor);        floor=null;      }      newSlaves.add(current);    }  }  if (floor != null) {    newSlaves.add(floor);  }  newSlaves.trimToSize();  slaves=newSlaves;  if (blend != null) {    applyBlend(newSlaves);    blend=null;    adjSprite=null;  }  composited=true;}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  public String removeContactMech(String contactMechPurposeTypeId){  return contactMechIdsMap.remove(contactMechPurposeTypeId);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    return body != null;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:  return _lok != null;}return super.eIsSet(featureID);}  }
class C{  public MessageRetryRecord createNextRetryRecord(){  return new MessageRetryRecord(this.offset,this.retryNum + 1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double xllcenter=0;  double yllcenter=0;  double xllcorner=0;  double yllcorner=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      arcFile=imageFiles[i];      if (!((new File(arcFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        return;      }      if (arcFile.lastIndexOf(".") >= 0) {        String extension=arcFile.substring(arcFile.lastIndexOf("."));        whiteboxHeaderFile=arcFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=arcFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(arcFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (arcFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nrows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcenter")) {            xllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcenter")) {            yllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcorner")) {            xllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcorner")) {            yllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cellsize")) {            cellsize=Double.parseDouble(str[str.length - 1]);            if (xllcorner != 0) {              east=xllcorner + cols * cellsize;              west=xllcorner;              south=yllcorner;              north=yllcorner + rows * cellsize;            } else {              east=xllcenter - (0.5 * cellsize) + cols * cellsize;              west=xllcenter - (0.5 * cellsize);              south=yllcenter - (0.5 * cellsize);              north=yllcenter - (0.5 * cellsize) + rows * cellsize;            }          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {          } else           if (str[0].toLowerCase().contains("nrows")) {          } else           if (str[0].toLowerCase().contains("xllcenter")) {          } else           if (str[0].toLowerCase().contains("yllcenter")) {          } else           if (str[0].toLowerCase().contains("xllcorner")) {          } else           if (str[0].toLowerCase().contains("yllcorner")) {          } else           if (str[0].toLowerCase().contains("cellsize")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              z=Double.parseDouble(str[i]);              if (z != arcNoData) {                wbr.setValue(row,col,z);              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void verifyTaskExecution(TaskExecution expectedTaskExecution,TaskExecution actualTaskExecution){  assertEquals("taskExecutionId must be equal",expectedTaskExecution.getExecutionId(),actualTaskExecution.getExecutionId());  assertEquals("startTime must be equal",expectedTaskExecution.getStartTime(),actualTaskExecution.getStartTime());  assertEquals("endTime must be equal",expectedTaskExecution.getEndTime(),actualTaskExecution.getEndTime());  assertEquals("exitCode must be equal",expectedTaskExecution.getExitCode(),actualTaskExecution.getExitCode());  assertEquals("taskName must be equal",expectedTaskExecution.getTaskName(),actualTaskExecution.getTaskName());  assertEquals("exitMessage must be equal",expectedTaskExecution.getExitMessage(),actualTaskExecution.getExitMessage());  assertEquals("errorMessage must be equal",expectedTaskExecution.getErrorMessage(),actualTaskExecution.getErrorMessage());  if (expectedTaskExecution.getArguments() != null) {    assertNotNull("arguments should not be null",actualTaskExecution.getArguments());    assertEquals("arguments result set count should match expected count",expectedTaskExecution.getArguments().size(),actualTaskExecution.getArguments().size());  } else {    assertNull("arguments should be null",actualTaskExecution.getArguments());  }  Set<String> args=new HashSet<String>();  for (  String param : expectedTaskExecution.getArguments()) {    args.add(param);  }  for (  String arg : actualTaskExecution.getArguments()) {    assertTrue("arg must exist in the repository",args.contains(arg));  }}  }
class C{  @BeforeClass public static void init() throws NoSuchAlgorithmException {  KeyPairGenerator generator=KeyPairGenerator.getInstance("RSA");  generator.initialize(2048);  keyPair=generator.generateKeyPair();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void deleteAttributeAt(int columnIndex){  deleteAttributeAt(columnIndex,true);}  }
class C{  public double distanceTo(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","distanceTo","missingVector"));  }  return Math.sqrt(this.distanceToSquared(vector));}  }
class C{  public void write(final IFile file,final IProgressMonitor progressMonitor) throws CoreException {  Check.notNull(file,"file");  if (file.exists() == false) {    file.create(getInputStream(),false,progressMonitor);  } else {    file.setContents(getInputStream(),false,true,progressMonitor);  }}  }
