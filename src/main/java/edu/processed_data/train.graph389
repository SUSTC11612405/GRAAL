class C{  @RequestProcessing(value="/admin/search/index",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void searchIndex(final HTTPRequestContext context) throws Exception {  context.renderJSON(true);  final JSONObject stat=optionQueryService.getStatistic();  final int articleCount=stat.optInt(Option.ID_C_STATISTIC_ARTICLE_COUNT);  final int pages=(int)Math.ceil((double)articleCount / 50.0);  for (int pageNum=1; pageNum <= pages; pageNum++) {    final List<JSONObject> articles=articleQueryService.getArticles(pageNum,50);    for (    final JSONObject article : articles) {      final int articleType=article.optInt(Article.ARTICLE_TYPE);      if (Article.ARTICLE_TYPE_C_DISCUSSION == articleType || Article.ARTICLE_TYPE_C_THOUGHT == articleType) {        continue;      }      searchMgmtService.updateDocument(article,Article.ARTICLE);    }    LOGGER.info("Indexed page [" + pageNum + "]");  }}  }
class C{  protected boolean beforeDelete(){  return true;}  }
class C{  public synchronized void addPanListener(PanListener listener){  mPanListeners.add(listener);}  }
class C{  public void append(StringBuffer buffer,String fieldName,int value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public BufferedBlockCipher(BlockCipher cipher){  this.cipher=cipher;  buf=new byte[cipher.getBlockSize()];  bufOff=0;  String name=cipher.getAlgorithmName();  int idx=name.indexOf('/') + 1;  pgpCFB=(idx > 0 && name.startsWith("PGP",idx));  if (pgpCFB || cipher instanceof StreamCipher) {    partialBlockOkay=true;  } else {    partialBlockOkay=(idx > 0 && (name.startsWith("OpenPGP",idx)));  }}  }
class C{  public static <E,S extends SortedSet<E>>UnmodifiableSortedSet<E> of(S set){  if (set == null) {    throw new IllegalArgumentException("cannot create an UnmodifiableSortedSet for null");  }  return new UnmodifiableSortedSet<>(SortedSetAdapter.adapt(set));}  }
class C{  public static boolean hasChanges(@NotNull PsiFile file){  final Project project=file.getProject();  final VirtualFile virtualFile=file.getVirtualFile();  if (virtualFile != null) {    final Change change=ChangeListManager.getInstance(project).getChange(virtualFile);    return change != null;  }  return false;}  }
class C{  public synchronized static PublicKey decodePublicKey(@Nonnull String encodedKey,@Nonnull String algorithm){  try {    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(Base64.getDecoder().decode(encodedKey));    PublicKey pub=KeyFactory.getInstance(algorithm).generatePublic(keySpec);    return pub;  } catch (  NoSuchAlgorithmException|InvalidKeySpecException e) {    Log.getLog().warn(e);  }  return null;}  }
class C{  public static <K,V>ConcurrentMap<K,V> newMap(){  return new ConcurrentHashMap8<>();}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  public int evaluate(float v1,float v2){switch (value) {case CMPL_EQUAL:    return (v1 == v2) ? TRUE : FALSE;case CMPL_GREATER:  return (v1 > v2) ? TRUE : FALSE;case CMPG_LESS:return (v1 < v2) ? TRUE : FALSE;case CMPL_GREATER_EQUAL:return (v1 >= v2) ? TRUE : FALSE;case CMPG_LESS_EQUAL:return (v1 <= v2) ? TRUE : FALSE;case CMPL_NOT_EQUAL:return (v1 == v2) ? FALSE : TRUE;case CMPL_LESS:return (v1 >= v2) ? FALSE : TRUE;case CMPG_GREATER_EQUAL:return (v1 < v2) ? FALSE : TRUE;case CMPG_GREATER:return (v1 <= v2) ? FALSE : TRUE;case CMPL_LESS_EQUAL:return (v1 > v2) ? FALSE : TRUE;}throw new OptimizingCompilerException("invalid condition " + this);}  }
class C{  public void drawString(String str,int x,int y){  drawString(str,x,y,0);}  }
class C{  public static boolean lineContainsPoint(int x1,int y1,int x2,int y2,int px,int py){  return lineContainsPoint(x1,y1,x2,y2,px,py,3d);}  }
class C{  public StdXMLReader(Reader reader){  this.currentReader=new StackedReader();  this.readers=new Stack();  this.currentReader.lineReader=new LineNumberReader(reader);  this.currentReader.pbReader=new PushbackReader(this.currentReader.lineReader,2);  this.currentReader.publicId="";  try {    this.currentReader.systemId=new URL("file:.");  } catch (  MalformedURLException e) {  }}  }
class C{  public CEdgeUpdater(final INaviEdge edge){  Preconditions.checkNotNull(edge,"IE00987: Edge argument can't be null");  m_edge=edge;}  }
class C{  public Object to(){  return to;}  }
class C{  @Override protected void prepareRetransmission(Exchange exchange,RetransmissionTask task){  int timeout;  if (exchange.getFailedTransmissionCount() == 0) {    timeout=(int)getRemoteEndpoint(exchange).getRTO();    if (appliesDithering()) {      getRemoteEndpoint(exchange).matchCurrentRTO();      timeout=(int)getRemoteEndpoint(exchange).getRTO();      float ack_random_factor=config.getFloat(NetworkConfig.Keys.ACK_RANDOM_FACTOR);      timeout=getRandomTimeout(timeout,(int)(timeout * ack_random_factor));    }  } else {    int tempTimeout=(int)(getRemoteEndpoint(exchange).getExchangeVBF(exchange) * exchange.getCurrentTimeout());    timeout=(tempTimeout < MAX_RTO) ? tempTimeout : MAX_RTO;    getRemoteEndpoint(exchange).setCurrentRTO(timeout);  }  exchange.setCurrentTimeout(timeout);  ScheduledFuture<?> f=executor.schedule(task,timeout,TimeUnit.MILLISECONDS);  exchange.setRetransmissionHandle(f);}  }
class C{  private void addProjectData(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getProject().getTitle()) || !eml.getProject().getPersonnel().isEmpty() || exists(eml.getProject().getFunding())|| exists(eml.getProject().getStudyAreaDescription().getDescriptorValue())|| exists(eml.getProject().getDesignDescription())) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.project.details"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    if (exists(eml.getProject().getTitle())) {      p.add(new Phrase(getText("rtf.project.title") + ": ",fontTitle));      p.add(eml.getProject().getTitle());      p.add(Chunk.NEWLINE);    }    if (!eml.getProject().getPersonnel().isEmpty()) {      p.add(new Phrase(getText("rtf.project.personnel") + ": ",fontTitle));      Iterator<Agent> iter=eml.getProject().getPersonnel().iterator();      while (iter.hasNext()) {        Agent personnel=iter.next();        if (!Strings.isNullOrEmpty(personnel.getFirstName())) {          p.add(personnel.getFirstName() + " " + personnel.getLastName());        }        if (iter.hasNext()) {          p.add(", ");        }      }      p.add(Chunk.NEWLINE);    }    if (exists(eml.getProject().getFunding())) {      p.add(new Phrase(getText("rtf.project.funding") + ": ",fontTitle));      p.add(eml.getProject().getFunding().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    if (exists(eml.getProject().getStudyAreaDescription().getDescriptorValue())) {      p.add(new Phrase(getText("rtf.project.area") + ": ",fontTitle));      p.add(eml.getProject().getStudyAreaDescription().getDescriptorValue().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    if (exists(eml.getProject().getDesignDescription())) {      p.add(new Phrase(getText("rtf.project.design") + ": ",fontTitle));      p.add(eml.getProject().getDesignDescription().replace("\r\n","\n"));      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  public void registerCommand(String notificationName,Class<? extends Command> command){  if (null != commandMap.put(notificationName,command)) {    return;  }  view.registerObserver(notificationName,new BaseObserver(null,this));}  }
class C{  public void createPictScenario03_1() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_1Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_1Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_1CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_1",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_1",serviceDetails,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-22 09:59:59");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_1",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_1",customer);}  }
class C{  private static double remainderTwoPi(double angle){  if (USE_JDK_MATH) {    double y=STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);    double x=STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);    return STRICT_MATH ? StrictMath.atan2(y,x) : Math.atan2(y,x);  }  boolean negateResult;  if (angle < 0.0) {    negateResult=true;    angle=-angle;  } else {    negateResult=false;  }  if (angle <= NORMALIZE_ANGLE_MAX_MEDIUM_DOUBLE) {    double fn=(double)(int)(angle * INVTWOPI + 0.5);    double result=(angle - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle < Double.POSITIVE_INFINITY) {    long lx=Double.doubleToRawLongBits(angle);    long exp=((lx >> 52) & 0x7FF) - 1046;    double z=Double.longBitsToDouble(lx - (exp << 52));    double x0=(double)((int)z);    z=(z - x0) * TWO_POW_24;    double x1=(double)((int)z);    double x2=(z - x1) * TWO_POW_24;    double result=subRemainderTwoPi(x0,x1,x2,(int)exp,(x2 == 0) ? 2 : 3);    return negateResult ? -result : result;  } else {    return Double.NaN;  }}  }
class C{  public void mirror(){  assert !isMirrored : "Map data already mirrored";  Coord c;  for (  MapNode n : nodes) {    c=n.getLocation();    c.setLocation(c.getX(),-c.getY());  }  setBounds();  this.isMirrored=true;  needsRehash=true;}  }
class C{  public LongThreadDialog(TDA owner,TreePath[] dumps,DefaultMutableTreeNode top,Map threadDumps){  super(TDA.frame,"Detect long running Threads",true);  backRef=owner;  this.dumps=dumps;  this.threadDumps=threadDumps;  this.top=top;  this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  getContentPane().setLayout(new BorderLayout());  initPanel();  setLocationRelativeTo(owner);}  }
class C{  @SuppressWarnings("unchecked") public Iterator<Node> xpathIterator(String xpath){  List<Node> nodes=XMLUtil.selectNodes(document,xpath);  return nodes.iterator();}  }
class C{  public void comment(final String line){  out.println("\t\t// " + line);}  }
class C{  private void handleOrderBy(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {  final ASTOrderClause orderNode=astQuery.getOrderClause();  if (orderNode != null) {    final OrderByNode orderBy=new OrderByNode();    @SuppressWarnings("unchecked") final List<OrderByExpr> orderElemements=(List<OrderByExpr>)orderNode.jjtAccept(this,null);    for (    OrderByExpr orderByExpr : orderElemements)     orderBy.addExpr(orderByExpr);    queryRoot.setOrderBy(orderBy);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static void addDefaultValidatorsToComponent(FacesContext ctx,EditableValueHolder editableValueHolder){  if (ComponentSupport.isBuildingNewComponentTree(ctx)) {    Set<String> keySet=ctx.getApplication().getDefaultValidatorInfo().keySet();    List<String> validatorIds=new ArrayList<>(keySet.size());    Set<String> disabledValidatorIds=(Set<String>)RequestStateManager.remove(ctx,RequestStateManager.DISABLED_VALIDATORS);    for (    String key : keySet) {      if (disabledValidatorIds != null && disabledValidatorIds.contains(key)) {        continue;      }      validatorIds.add(key);    }    addValidatorsToComponent(ctx,validatorIds,editableValueHolder,null);  }}  }
class C{  private void writeKind(JsonGenerator jsonGenerator,Object entity) throws IOException {  jsonGenerator.writeFieldName(KIND);  if (entity instanceof EntitySet) {    jsonGenerator.writeObject(ENTITY_SET);  } else {    jsonGenerator.writeObject(SINGLETON);  }}  }
class C{  InputThread(PircBot bot,Socket socket,BufferedReader breader,BufferedWriter bwriter){  _bot=bot;  _socket=socket;  _breader=breader;  _bwriter=bwriter;  this.setName(this.getClass() + "-Thread");}  }
class C{  public HBaseLogByRowkeyReader(String table,String columnFamily,boolean includingAllQualifiers,List<String> qualifiers){  this.table=table;  this.columnFamily=columnFamily;  if (qualifiers != null) {    this.outputQualifiers=new byte[qualifiers.size()][];    int i=0;    for (    String qualifier : qualifiers) {      this.outputQualifiers[i++]=qualifier.getBytes();    }  }  this.includingAllQualifiers=includingAllQualifiers;}  }
class C{  public void show(StepLayout stepLayout,int direction){  View currentStep=findViewById(R.id.rsb_current_step);  if (currentStep != null) {    String currentStepId=(String)currentStep.getTag(R.id.rsb_step_layout_id);    String stepLayoutId=(String)stepLayout.getLayout().getTag(R.id.rsb_step_layout_id);    if (currentStepId.equals(stepLayoutId)) {      return;    }  }  if (direction != StepSwitcher.SHIFT_LEFT && direction != StepSwitcher.SHIFT_RIGHT) {    throw new InvalidParameterException("Direction with value: " + direction + " is not supported.");  }  post(null);}  }
class C{  public static List<TimeZone> availableTimeZones(){  return TimeZoneHolder.availableTimeZoneList;}  }
class C{  private int funnelAggregateComparator(Integer i1,Integer i2){  int result=((Comparable)timestamps.get(i1)).compareTo(timestamps.get(i2));  if (result == 0) {    return ((Comparable)actions.get(i1)).compareTo(actions.get(i2));  }  return result;}  }
class C{  public Item(String name){  this.name=name;  itemMap=new TreeMap<Integer,IItem>();}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end,Comparator c){  int len=end - start;  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      Object current=out[i];      Object prev=out[i - 1];      if (c.compare(prev,current) > 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && (c.compare(prev=out[j - 1],current) > 0));        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med,c);  mergeSort(out,in,med,end,c);  if (c.compare(in[med - 1],in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    Object fromVal=in[start];    Object rVal=in[r];    if (c.compare(fromVal,rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1,c);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1,c);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Outline(@NonNull Outline src){  set(src);}  }
class C{  public Quaternion conjugate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  @Reference(authors="Erich Schubert, Arthur Zimek and Hans-Peter Kriegel",title="Geodetic Distance Queries on R-Trees for Indexing Geographic Data",booktitle="13th Int. Symposium on Advances in Spatial and Temporal Databases",url="http://dx.doi.org/10.1007/978-3-642-40235-7_9") public static double latlngMinDistDeg(double plat,double plng,double rminlat,double rminlng,double rmaxlat,double rmaxlng){  return latlngMinDistRad(MathUtil.deg2rad(plat),MathUtil.deg2rad(plng),MathUtil.deg2rad(rminlat),MathUtil.deg2rad(rminlng),MathUtil.deg2rad(rmaxlat),MathUtil.deg2rad(rmaxlng));}  }
class C{  protected FunctionNode convert(final AST2BOpContext ctx,final FunctionNode searchInSearch){  final VarNode var=(VarNode)searchInSearch.get(0);  final Literal search=(Literal)((ConstantNode)searchInSearch.get(1)).getValue();  final String match;  if (searchInSearch.arity() > 2) {    final Literal l=(Literal)((ConstantNode)searchInSearch.get(2)).getValue();    match=l.getLabel();  } else {    match="ANY";  }  final String regex;  if (searchInSearch.arity() > 3) {    final Literal l=(Literal)((ConstantNode)searchInSearch.get(3)).getValue();    regex=l.getLabel();  } else {    regex=null;  }  final IV[] hits=getHits(ctx,search,match,regex);  final ValueExpressionNode[] args=new ValueExpressionNode[hits.length + 1];  args[0]=var;  for (int i=0; i < hits.length; i++) {    args[i + 1]=new ConstantNode(new Constant<IV>(hits[i]));  }  final Map<String,Object> props=NV.asMap(new NV(InFactory.Annotations.ALLOW_LITERALS,true));  final FunctionNode in=new FunctionNode(FunctionRegistry.IN,props,args);  return in;}  }
class C{  private void respondWithHeaders(Operation get){  StringBuilder sb=new StringBuilder();  Map<String,String> headers=get.getRequestHeaders();  for (  Map.Entry<String,String> header : headers.entrySet()) {    sb.append(header.getKey());    sb.append(":");    sb.append(header.getValue());    sb.append("\n");  }  MinimalTestServiceState state=new MinimalTestServiceState();  state.stringValue=sb.toString();  get.setBody(state).complete();}  }
class C{  public static int run(Model queryModel,Model newTriples,SPINExplanations explanations,List<SPINStatistics> statistics,boolean singlePass,ProgressMonitor monitor){  return run(queryModel,SPIN.rule,newTriples,explanations,statistics,singlePass,monitor);}  }
class C{  public long indexVersion(){  return indexVersion;}  }
class C{  public void remove(){  for (  NineSwitchesGameSwitch gameSwitch : switches) {    zone.remove(gameSwitch);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.488 -0500",hash_original_method="B55C51475342E21944BBC277A5B7F7B5",hash_generated_method="5FD637A1BF21F23506E3D921E389895C") public static AsyncResult forMessage(Message m){  AsyncResult ret;  ret=new AsyncResult(m.obj,null,null);  m.obj=ret;  return ret;}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("jetty4x",DeployerType.EMBEDDED,Jetty4xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty5x",DeployerType.EMBEDDED,Jetty5xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty6x",DeployerType.EMBEDDED,Jetty6xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty6x",DeployerType.INSTALLED,Jetty6xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jetty6x",DeployerType.REMOTE,JettyRemoteDeployer.class);  deployerFactory.registerDeployer("jetty7x",DeployerType.EMBEDDED,Jetty7xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty7x",DeployerType.INSTALLED,Jetty7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jetty7x",DeployerType.REMOTE,JettyRemoteDeployer.class);  deployerFactory.registerDeployer("jetty8x",DeployerType.EMBEDDED,Jetty7xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty8x",DeployerType.INSTALLED,Jetty7xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jetty8x",DeployerType.REMOTE,JettyRemoteDeployer.class);  deployerFactory.registerDeployer("jetty9x",DeployerType.EMBEDDED,Jetty7xEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("jetty9x",DeployerType.INSTALLED,Jetty9xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("jetty9x",DeployerType.REMOTE,JettyRemoteDeployer.class);}  }
class C{  final public void removePropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  public DrawerBuilder withDisplayBelowStatusBar(boolean displayBelowStatusBar){  this.mDisplayBelowStatusBar=displayBelowStatusBar;  return this;}  }
class C{  public SshTask(SshMeta sshMeta,String targetHost){  this.sshMeta=sshMeta;  this.targetHost=targetHost;}  }
class C{  public TriggerDefinitionDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static Sector fromDegrees(double[] array){  if (array == null) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (array.length < 4) {    String message=Logging.getMessage("generic.ArrayInvalidLength",array.length);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return fromDegrees(array[0],array[1],array[2],array[3]);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ExecutionScope.class) {switch (baseFeatureID) {case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:      return SexecPackage.EXECUTION_STATE__STATE_VECTOR;case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:    return SexecPackage.EXECUTION_STATE__SUB_SCOPES;case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:  return SexecPackage.EXECUTION_STATE__SUPER_SCOPE;case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:return SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES;case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:return SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE;case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:return SexecPackage.EXECUTION_STATE__INIT_SEQUENCE;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void insertSentenceMarkers(String sos,String eos){  insertSentenceMarker(sos,0);  insertSentenceMarker(eos,-1);}  }
class C{  public static Byte valueOf(byte i){  return null;}  }
class C{  private void updateParentNode(final INaviViewNode node,final INaviGroupNode groupNode){  final Node mappedNaviNode=m_mappings.getYNode(node);  final Node mappedGroupNode=groupNode == null ? null : m_mappings.getYNode(groupNode);  if (mappedNaviNode != null) {    m_graph.getGraph().getHierarchyManager().setParentNode(mappedNaviNode,mappedGroupNode);    m_graph.updateViews();  }}  }
class C{  public void updateField(){  this.repaint();}  }
class C{  public static final void sort(int[] a,double[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public boolean canChangeInfo(UserLeafNode uln){  if (!uln.allowsUnsignedKeychange() && sig == null) {    Logging.error("Tried to make unsigned KeyChange but wasn't allowed");    return false;  }  if (!uln.allowsUnsignedKeychange()) {    boolean res=false;    try {      res=Signing.dsaVerify(uln.getChangeKey(),msg,sig);    } catch (    Exception e) {      Logging.error("[KeyChange] " + e.getMessage());    }    if (!res) {      Logging.error("Requires that key changes be signed, but the signature was invalid");      return false;    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.614 -0500",hash_original_method="399A2DDCEE4C827B87F141BE75C58C17",hash_generated_method="F7736150B11B3F6FB6A6BC4E4FE9CAB4") @Override public int hashCode(){  return mID;}  }
class C{  boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n,Comparator<? super K> cmp){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=cpr(cmp,k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public void actionPerformed(ActionEvent evt){  JMenuItem mi=(JMenuItem)evt.getSource();  if (mi.getActionCommand().equals("Delete")) {    delete();  } else   if (mi.getActionCommand().equals("Add")) {    add();  } else   if (mi.getActionCommand().equals("ClearAll")) {    clearAll();  } else   if (mi.getActionCommand().equals("Print")) {    try {      print();    } catch (    PrinterException e) {    }  } else   if (mi.getActionCommand().equals("Save As")) {    try {      saveAs();    } catch (    IOException e) {    }  }}  }
class C{  public synchronized void renameDatabaseObject(Session session,DbObject obj,String newName){  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  map.remove(obj.getName());  obj.rename(newName);  map.put(newName,obj);}  }
class C{  public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {  if (!MODE_MODELCHECK.equals(mode)) {    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Unsupported launch mode " + mode));  }  IProject project=ResourceHelper.getProject(specName);  if (project == null) {    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error accessing the spec project " + specName));  }  config.getAdapter(Model.class).setRunning(true);  config.getAdapter(Model.class).setOriginalTraceShown(true);  int numberOfWorkers=config.getAttribute(LAUNCH_NUMBER_OF_WORKERS,LAUNCH_NUMBER_OF_WORKERS_DEFAULT);  String cloud="off";  if (config.hasAttribute(LAUNCH_DISTRIBUTED)) {    try {      cloud=config.getAttribute(LAUNCH_DISTRIBUTED,LAUNCH_DISTRIBUTED_DEFAULT);    } catch (    CoreException e) {      boolean distributed=config.getAttribute(LAUNCH_DISTRIBUTED,false);      if (distributed) {        cloud="ad hoc";      }    }  }  Job job=null;  if ("off".equalsIgnoreCase(cloud)) {    job=new TLCProcessJob(specName,modelName,launch,numberOfWorkers);    job.setRule(mutexRule);  } else {    if ("ad hoc".equalsIgnoreCase(cloud)) {      job=new DistributedTLCJob(specName,modelName,launch,numberOfWorkers);      job.setRule(mutexRule);    } else {      numberOfWorkers=config.getAttribute(LAUNCH_DISTRIBUTED_NODES_COUNT,LAUNCH_DISTRIBUTED_NODES_COUNT_DEFAULT);      final IFolder launchDir=project.getFolder(modelName);      final File file=launchDir.getRawLocation().makeAbsolute().toFile();      final BundleContext bundleContext=FrameworkUtil.getBundle(TLCModelLaunchDelegate.class).getBundleContext();      final ServiceReference<IExtensionRegistry> serviceReference=bundleContext.getServiceReference(IExtensionRegistry.class);      final IExtensionRegistry registry=bundleContext.getService(serviceReference);      final IConfigurationElement[] elements=registry.getConfigurationElementsFor("org.lamport.tla.toolx.tlc.job");      for (      IConfigurationElement element : elements) {        final DummyProcess process=new DummyProcess(launch);        launch.addProcess(process);        final TLCJobFactory factory=(TLCJobFactory)element.createExecutableExtension("clazz");        final Properties props=new Properties();        props.put(TLCJobFactory.MAIN_CLASS,tlc2.TLC.class.getName());        final Model model=config.getAdapter(Model.class);        props.put(TLCJobFactory.MODEL_NAME,model.getName());        props.put(TLCJobFactory.SPEC_NAME,model.getSpec().getName());        if (numberOfWorkers > 1) {          props.put(TLCJobFactory.MAIN_CLASS,tlc2.tool.distributed.TLCServer.class.getName());        }        props.put(TLCJobFactory.MAIL_ADDRESS,config.getAttribute(LAUNCH_DISTRIBUTED_RESULT_MAIL_ADDRESS,"tlc@localhost"));        final StringBuffer tlcParams=new StringBuffer();        final int fpSeedOffset=launch.getLaunchConfiguration().getAttribute(LAUNCH_FP_INDEX,LAUNCH_FP_INDEX_DEFAULT);        tlcParams.append("-fp ");        tlcParams.append(String.valueOf(fpSeedOffset - 1));        tlcParams.append(" ");        final int maxSetSize=launch.getLaunchConfiguration().getAttribute(LAUNCH_MAXSETSIZE,TLCGlobals.setBound);        if (maxSetSize != TLCGlobals.setBound) {          tlcParams.append("-maxSetSize ");          tlcParams.append(String.valueOf(maxSetSize));          tlcParams.append(" ");        }        boolean checkDeadlock=config.getAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_CHECK_DEADLOCK,IModelConfigurationDefaults.MODEL_CORRECTNESS_CHECK_DEADLOCK_DEFAULT);        if (!checkDeadlock) {          tlcParams.append("-deadlock");        }        job=factory.getTLCJob(cloud,file,numberOfWorkers,props,tlcParams.toString());        job.addJobChangeListener(new WithStatusJobChangeListener(process,config.getAdapter(Model.class)));        break;      }      if (job == null) {        throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,String.format("The distribution mode '%s' selected in the \"How to run?\" section caused " + "an error. Check the Toolbox's \"Installation Details\" if the " + "'JCloud distributed TLC provider' is installed. If not, this is a bug "+ "and should be reported to the Toolbox authors. Thank you for "+ "your help and sorry for the inconvenience."+ "\n\n"+ "In the meantime, try running the Toolbox in non-distributed mode "+ "by setting \"Run in distributed mode\" to 'off'. "+ "You might have to 'Repair' your model via the \"Spec Explorer\" first.",cloud)));      }    }  }  job.setPriority(Job.LONG);  job.setUser(true);  TLCJobChangeListener tlcJobListener=new TLCJobChangeListener(config.getAdapter(Model.class));  job.addJobChangeListener(tlcJobListener);  job.schedule();}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readShort();}  }
class C{  public void incMessagesNotQueuedNotInterested(){  this._stats.incInt(_messagesNotQueuedNotInterestedId,1);}  }
class C{  public void runTestPoiSelection(double[] poiProbs,int rngSeed) throws Exception {  setUpWith(poiProbs,rngSeed,null);  final int TOTAL=5000;  final double DELTA=0.02;  double probSum=0;  double[] expectedProbs=new double[poiProbs.length];  int[] nrofHits=new int[poiProbs.length];  for (int i=0; i < poiProbs.length; i++) {    nrofHits[i]=0;    probSum+=poiProbs[i];  }  for (int i=0; i < poiProbs.length; i++) {    double randomProb=(1 - probSum) * (COORDS_IN_MAP[i].length / (nrofMapNodes * 1.0));    expectedProbs[i]=poiProbs[i] + randomProb;  }  for (int i=0; i < TOTAL; i++) {    MapNode n=pois.selectDestination();    for (int j=0; j < POINTS_IN_MAP.length; j++) {      if (isPartOf(n.getLocation(),COORDS_IN_MAP[j])) {        nrofHits[j]++;      }    }  }  int nrofHitsSum=0;  for (int i=0; i < nrofHits.length; i++) {    nrofHitsSum+=nrofHits[i];    double prob=nrofHits[i] / (TOTAL * 1.0);    assertEquals("Prob too far for index " + i,expectedProbs[i],prob,DELTA);  }  double poiProbSum=0;  for (int i=0; i < expectedProbs.length; i++) {    poiProbSum+=expectedProbs[i];  }  double otherProb=(TOTAL - nrofHitsSum) / (TOTAL * 1.0);  assertEquals(1 - poiProbSum,otherProb,DELTA);}  }
class C{  public Solution search(INode initial,INode goal){  INodeSet open=StateStorageFactory.create(StateStorageFactory.PRIORITY_RETRIEVAL);  INode copy=initial.copy();  scoringFunction.score(copy);  open.insert(copy);  INodeSet closed=StateStorageFactory.create(closedStorage);  if (debug != null) {    debug.visitNode(copy);    debug.markStart(copy);  }  while (!open.isEmpty()) {    INode best=open.remove();    if (best.equals(goal)) {      if (debug != null) {        debug.markGoal(best);        for (Iterator<INode> it=open.iterator(); it.hasNext(); ) {          debug.markUnexplored(it.next());        }        if (legendOn) {          debug.visitNode(new Legend("A*Search [" + scoringFunction.getClass().getSimpleName() + "] Processed:"+ closed.size()+ " , open:"+ open.size()));        }      }      numOpen=open.size();      numClosed=closed.size();      return new Solution(initial,best,debug);    }    closed.insert(best);    DepthTransition trans=(DepthTransition)best.storedData();    int depth=1;    if (trans != null) {      depth=trans.depth + 1;    }    for (    IMove move : best.validMoves()) {      numMoves++;      INode successor=best.copy();      move.execute(successor);      if (closed.contains(successor) != null) {        continue;      }      successor.storedData(new DepthTransition(move,best,depth));      scoringFunction.score(successor);      INode exist=open.contains(successor);      if (exist == null || successor.score() < exist.score()) {        if (exist != null) {          open.remove(exist);        }        if (debug != null) {          debug.visitNode(successor);          debug.visitEdge(best,successor);        }        open.insert(successor);      }    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,debug,false);}  }
class C{  int peek(){  return index == chars.length ? EOF : chars[index];}  }
class C{  private PackageType(String path){  this.path=path;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public SharedPreferences putStringSet(String key,Set<String> values){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {    return this;  }  editor.putStringSet(key,values);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.612 -0500",hash_original_method="765B8FA015660A1850228BA85BA4D2EA",hash_generated_method="CA6ED245EC0E0A57425C294E408499EF") @Override public void startHandshake() throws IOException {  if (appDataIS == null) {    throw new IOException("Socket is not connected.");  }  if (socket_was_closed) {    throw new IOException("Socket has already been closed.");  }  if (!handshake_started) {    handshake_started=true;    if (sslParameters.getUseClientMode()) {      if (logger != null) {        logger.println("SSLSocketImpl: CLIENT");      }      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      if (logger != null) {        logger.println("SSLSocketImpl: SERVER");      }      handshakeProtocol=new ServerHandshakeImpl(this);    }    alertProtocol=new AlertProtocol();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,new SSLStreamedInput(input),appDataIS.dataPoint);  }  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake");  }  handshakeProtocol.start();  doHandshake();  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake: END");  }}  }
class C{  private void computeRates(){  for (int i=0; i < treeModel.getNodeCount(); i++) {    if (!treeModel.isRoot(treeModel.getNode(i))) {      rates[treeModel.getNode(i).getNumber()]=distributionModel.quantile(rateCategoryQuantiles.getNodeValue(treeModel,treeModel.getNode(i)));    }  }  updateRates=false;}  }
class C{  protected TypedPosition findClosestPosition(int offset){  int index=-1;  try {    index=this.documentPositionMap.computeIndexInCategory(this.positionCategory,offset);  } catch (  final BadLocationException e) {    Log.warn(DefaultPartitioner.class,"Bad location: " + offset + "(max:"+ getContentLength()+ ").");    return null;  }catch (  final BadPositionCategoryException e) {    Log.warn(DefaultPartitioner.class,"Bad position category: " + this.positionCategory);    return null;  }  if (index == -1) {    return null;  }  List<TypedPosition> category=null;  try {    category=getPositions();  } catch (  final BadPositionCategoryException e) {    Log.warn(DefaultPartitioner.class,"Bad position category: " + this.positionCategory);    return null;  }  if (category == null || category.size() == 0) {    return null;  }  if (index < category.size()) {    if (offset == category.get(index).offset) {      return category.get(index);    }  }  if (index > 0) {    index--;  }  return category.get(index);}  }
class C{  protected boolean isLocalRecipient(MailAddress recipient) throws UsersRepositoryException {  if (isLocalServer(recipient)) {    if (getConfiguration().getLocalUsers().supportVirtualHosting()) {      return getLocalUsers().contains(recipient.toString());    } else {      return getLocalUsers().contains(recipient.getLocalPart());    }  }  return false;}  }
class C{  public InvertCovMatrixWrapper(DataWrapper wrapper){  if (wrapper == null) {    throw new NullPointerException("The given data must not be null");  }  DataModel model=wrapper.getSelectedDataModel();  if (model instanceof ICovarianceMatrix) {    ICovarianceMatrix dataSet=(ICovarianceMatrix)model;    TetradMatrix data=dataSet.getMatrix();    TetradMatrix inverse=data.inverse();    String[] varNames=dataSet.getVariableNames().toArray(new String[0]);    ICovarianceMatrix covarianceMatrix=new CovarianceMatrix(DataUtils.createContinuousVariables(varNames),inverse,((ICovarianceMatrix)model).getSampleSize());    setDataModel(covarianceMatrix);    setSourceGraph(wrapper.getSourceGraph());  } else {    throw new IllegalArgumentException("Must be a covariance matrix");  }  LogDataUtils.logDataModelList("Inverts a parent covaraince matrix.",getDataModelList());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void unregisterDropController(DropController dropController){  dropControllerList.remove(dropController);}  }
class C{  public boolean isItemChecked(int position){  return mCheckStates.get(position);}  }
class C{  private void login(final String username,final String email,final String password,final ResultListener listener){  final Map<String,Object> userData=new HashMap<String,Object>();  if (username != null) {    userData.put("username",username);  } else   if (email != null) {    userData.put("email",email);  } else {    throw new RuntimeException("You must provide either a username or an email address");  }  final Map<String,Object> authData=new HashMap<String,Object>();  authData.put("user",userData);  authData.put("password",password);  call("login",new Object[]{authData},listener);}  }
class C{  static public void assertEquals(String message,long expected,long actual){  assertEquals(message,new Long(expected),new Long(actual));}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){  if (oldSampleRate == newSampleRate) {    return samples;  }  int newLength=(int)Math.round(((float)samples.length / oldSampleRate * newSampleRate));  float lengthMultiplier=(float)newLength / samples.length;  short[] interpolatedSamples=new short[newLength];  for (int i=0; i < newLength; i++) {    float currentPosition=i / lengthMultiplier;    int nearestLeftPosition=(int)currentPosition;    int nearestRightPosition=nearestLeftPosition + 1;    if (nearestRightPosition >= samples.length) {      nearestRightPosition=samples.length - 1;    }    float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];    float positionFromLeft=currentPosition - nearestLeftPosition;    interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);  }  return interpolatedSamples;}  }
class C{  private void untangle2(){  Ease a;  Edge e;  Node r, nf=null, ns=null, mark;  int l=0;  int f, s, tf=0, ts=0, pf, ps;  while ((a=overlap(l)) != null) {    f=a.m_place;    s=a.m_place + 1;    while (f != s) {      a.m_lev--;      tf=f;      ts=s;      f=m_groups[f].m_pg;      s=m_groups[s].m_pg;    }    l=a.m_lev;    pf=0;    ps=0;    r=m_groups[f].m_p;    mark=m_groups[tf].m_p;    nf=null;    ns=null;    for (int noa=0; nf != mark; noa++) {      pf++;      nf=r.getChild(noa).getTarget();    }    mark=m_groups[ts].m_p;    for (int noa=pf; ns != mark; noa++) {      ps++;      ns=r.getChild(noa).getTarget();    }    Vector<Double> o_pos=new Vector<Double>(20,10);    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {      if (e.getTarget().getParent(0) == e) {        Double tem=new Double(e.getTarget().getCenter());        o_pos.addElement(tem);      }    }    pf--;    double inc=a.m_amount / ps;    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {      ns=e.getTarget();      if (ns.getParent(0) == e) {        if (noa > pf + ps) {          ns.adjustCenter(a.m_amount);        } else         if (noa > pf) {          ns.adjustCenter(inc * (noa - pf));        }      }    }    nf=r.getChild(0).getTarget();    inc=ns.getCenter() - nf.getCenter();    m_groups[f].m_size=inc;    m_groups[f].m_left=r.getCenter() - inc / 2;    m_groups[f].m_right=m_groups[f].m_left + inc;    inc=m_groups[f].m_left - nf.getCenter();    double shift;    int g_num=0;    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {      ns=e.getTarget();      if (ns.getParent(0) == e) {        ns.adjustCenter(inc);        shift=ns.getCenter() - o_pos.elementAt(noa).doubleValue();        if (ns.getChild(0) != null) {          moveSubtree(m_groups[f].m_start + g_num,shift);          g_num++;        }      }    }  }}  }
class C{  public static void loadCompilationUnits(Configuration configuration,FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,ResourceBundlePath bundlePath,List sources,List units,int[] checksums,Map<QName,Long> swcDefSignatureChecksums,Map swcFileChecksums,RandomAccessFile f,String cacheName,FontManager fontManager) throws IOException {  loadCompilationUnits(configuration,fileSpec,sourceList,sourcePath,resources,bundlePath,sources,units,checksums,swcDefSignatureChecksums,swcFileChecksums,null,f,cacheName,null);}  }
class C{  public TinyDancerBuilder yellowFlagPercentage(float percentage){  fpsConfig.yellowFlagPercentage=percentage;  return this;}  }
class C{  public StrBuilder insert(int index,char value){  validateIndex(index);  ensureCapacity(size + 1);  System.arraycopy(buffer,index,buffer,index + 1,size - index);  buffer[index]=value;  size++;  return this;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType){}  }
class C{  public static Kind application(){  return new Kind(APPLICATION);}  }
class C{  private void visit(ElementVisitor ev,Element parent,ElementMetadata<?,?> meta) throws ElementVisitor.StoppedException {  boolean visitChildren=ev.visit(parent,this,meta);  if (visitChildren) {    visitChildren(ev,meta);  }  ev.visitComplete(parent,this,meta);}  }
class C{  private void initTimeBgRect(float topPaddingSize){  float mHourLeft;  float mMinuteLeft;  float mSecondLeft;  boolean isInitHasBackgroundTextBaseY=false;  if (isShowDay) {    if (isShowTimeBgBorder) {      mDayBgBorderRectF=new RectF(mLeftPaddingSize,topPaddingSize,mLeftPaddingSize + mDayTimeBgWidth + (mTimeBgBorderSize * 2),topPaddingSize + mTimeBgSize + (mTimeBgBorderSize * 2));      mDayBgRectF=new RectF(mLeftPaddingSize + mTimeBgBorderSize,topPaddingSize + mTimeBgBorderSize,mLeftPaddingSize + mDayTimeBgWidth + mTimeBgBorderSize,topPaddingSize + mTimeBgSize + mTimeBgBorderSize);    } else {      mDayBgRectF=new RectF(mLeftPaddingSize,topPaddingSize,mLeftPaddingSize + mDayTimeBgWidth,topPaddingSize + mTimeBgSize);    }    mHourLeft=mLeftPaddingSize + mDayTimeBgWidth + mSuffixDayTextWidth+ mSuffixDayLeftMargin+ mSuffixDayRightMargin+ (mTimeBgBorderSize * 2);    if (!isShowHour && !isShowMinute && !isShowSecond) {      isInitHasBackgroundTextBaseY=true;      initHasBackgroundTextBaseY(mDayBgRectF);    }  } else {    mHourLeft=mLeftPaddingSize;  }  if (isShowHour) {    if (isShowTimeBgBorder) {      mHourBgBorderRectF=new RectF(mHourLeft,topPaddingSize,mHourLeft + mTimeBgSize + (mTimeBgBorderSize * 2),topPaddingSize + mTimeBgSize + (mTimeBgBorderSize * 2));      mHourBgRectF=new RectF(mHourLeft + mTimeBgBorderSize,topPaddingSize + mTimeBgBorderSize,mHourLeft + mTimeBgSize + mTimeBgBorderSize,topPaddingSize + mTimeBgSize + mTimeBgBorderSize);    } else {      mHourBgRectF=new RectF(mHourLeft,topPaddingSize,mHourLeft + mTimeBgSize,topPaddingSize + mTimeBgSize);    }    mMinuteLeft=mHourLeft + mTimeBgSize + mSuffixHourTextWidth+ mSuffixHourLeftMargin+ mSuffixHourRightMargin+ (mTimeBgBorderSize * 2);    if (!isInitHasBackgroundTextBaseY) {      isInitHasBackgroundTextBaseY=true;      initHasBackgroundTextBaseY(mHourBgRectF);    }  } else {    mMinuteLeft=mHourLeft;  }  if (isShowMinute) {    if (isShowTimeBgBorder) {      mMinuteBgBorderRectF=new RectF(mMinuteLeft,topPaddingSize,mMinuteLeft + mTimeBgSize + (mTimeBgBorderSize * 2),topPaddingSize + mTimeBgSize + (mTimeBgBorderSize * 2));      mMinuteBgRectF=new RectF(mMinuteLeft + mTimeBgBorderSize,topPaddingSize + mTimeBgBorderSize,mMinuteLeft + mTimeBgSize + mTimeBgBorderSize,topPaddingSize + mTimeBgSize + mTimeBgBorderSize);    } else {      mMinuteBgRectF=new RectF(mMinuteLeft,topPaddingSize,mMinuteLeft + mTimeBgSize,topPaddingSize + mTimeBgSize);    }    mSecondLeft=mMinuteLeft + mTimeBgSize + mSuffixMinuteTextWidth+ mSuffixMinuteLeftMargin+ mSuffixMinuteRightMargin+ (mTimeBgBorderSize * 2);    if (!isInitHasBackgroundTextBaseY) {      isInitHasBackgroundTextBaseY=true;      initHasBackgroundTextBaseY(mMinuteBgRectF);    }  } else {    mSecondLeft=mMinuteLeft;  }  if (isShowSecond) {    if (isShowTimeBgBorder) {      mSecondBgBorderRectF=new RectF(mSecondLeft,topPaddingSize,mSecondLeft + mTimeBgSize + (mTimeBgBorderSize * 2),topPaddingSize + mTimeBgSize + (mTimeBgBorderSize * 2));      mSecondBgRectF=new RectF(mSecondLeft + mTimeBgBorderSize,topPaddingSize + mTimeBgBorderSize,mSecondLeft + mTimeBgSize + mTimeBgBorderSize,topPaddingSize + mTimeBgSize + mTimeBgBorderSize);    } else {      mSecondBgRectF=new RectF(mSecondLeft,topPaddingSize,mSecondLeft + mTimeBgSize,topPaddingSize + mTimeBgSize);    }    if (isShowMillisecond) {      float mMillisecondLeft=mSecondLeft + mTimeBgSize + mSuffixSecondTextWidth+ mSuffixSecondLeftMargin+ mSuffixSecondRightMargin+ (mTimeBgBorderSize * 2);      if (isShowTimeBgBorder) {        mMillisecondBgBorderRectF=new RectF(mMillisecondLeft,topPaddingSize,mMillisecondLeft + mTimeBgSize + (mTimeBgBorderSize * 2),topPaddingSize + mTimeBgSize + (mTimeBgBorderSize * 2));        mMillisecondBgRectF=new RectF(mMillisecondLeft + mTimeBgBorderSize,topPaddingSize + mTimeBgBorderSize,mMillisecondLeft + mTimeBgSize + mTimeBgBorderSize,topPaddingSize + mTimeBgSize + mTimeBgBorderSize);      } else {        mMillisecondBgRectF=new RectF(mMillisecondLeft,topPaddingSize,mMillisecondLeft + mTimeBgSize,topPaddingSize + mTimeBgSize);      }    }    if (!isInitHasBackgroundTextBaseY) {      initHasBackgroundTextBaseY(mSecondBgRectF);    }  }}  }
class C{  public RpcServerChannelIdleHandler(){}  }
class C{  private String validateDateValue(java.util.Date date){  int day, month, year;  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(date);  day=cal.get(Calendar.DAY_OF_MONTH);  month=cal.get(Calendar.MONTH) + 1;  year=cal.get(Calendar.YEAR);  if ((day < 1) || (day > 31)) {    return "day field of date is < 1 or > 31";  }  if ((month < 1) || (month > 12)) {    return "month field of date is < 1 or > 12";  }  if ((day > 30) && ((month == 9) || (month == 4) || (month == 6)|| (month == 11))) {    return "day field of date is invalid - 31st of a day with 30 days";  }  if (month == 2) {    int days=28;    if (new GregorianCalendar().isLeapYear(year)) {      days=29;    }    if (day > days) {      return "day field of date is invalid - no day " + day + " in February of "+ year;    }  }  return null;}  }
class C{  static void importPrefs(InputStream in) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=builder.parse(new InputSource(in));    Element preferences;    preferences=doc.getDocumentElement();    String version=preferences.getAttribute("EXTERNAL_XML_VERSION");    if (version != null && Float.parseFloat(version) > XML_VERSION) {      throw new InvalidPreferencesFormatException("Preferences version " + version + " is not supported");    }    Element root=(Element)preferences.getElementsByTagName("root").item(0);    Preferences prefsRoot=null;    String type=root.getAttribute("type");    if (type.equals("user")) {      prefsRoot=Preferences.userRoot();    } else {      prefsRoot=Preferences.systemRoot();    }    loadNode(prefsRoot,root);  } catch (  FactoryConfigurationError e) {    throw new InvalidPreferencesFormatException(e);  }catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public MarshallerContextTestImpl(List<PluginProvider> plugins){  this(plugins,null);}  }
class C{  @Override protected OccupantArea createArea(final ConfigurableFactoryContext ctx){  return new DamagingArea(getWidth(ctx),getHeight(ctx),getInterval(ctx),getDamage(ctx),getProbability(ctx));}  }
class C{  public static boolean isRotationEnabled(Context context){  return android.provider.Settings.System.getInt(context.getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.597 -0500",hash_original_method="AE6C103DE6DE549189EC8F2DC89B4935",hash_generated_method="A73E43305BABACE81C65AE941761E502") @Override public boolean isOtaSpNumber(String dialStr){  boolean isOtaSpNum=false;  String dialableStr=PhoneNumberUtils.extractNetworkPortionAlt(dialStr);  if (dialableStr != null) {    isOtaSpNum=isIs683OtaSpDialStr(dialableStr);    if (isOtaSpNum == false) {      isOtaSpNum=isCarrierOtaSpNum(dialableStr);    }  }  if (DBG)   Log.d(LOG_TAG,"isOtaSpNumber " + isOtaSpNum);  return isOtaSpNum;}  }
class C{  void checkLength(ProtocolVersion pv) throws SSLProtocolException {  if (sessionId.length > MAX_LENGTH) {    throw new SSLProtocolException("Invalid session ID length (" + sessionId.length + " bytes)");  }}  }
class C{  private Configure(){  Properties p=new Properties();  Map args=new HashMap();  args.putAll(System.getenv());  args.putAll(System.getProperties());  p.putAll(args);  this.property=p;  reload(false);}  }
class C{  public void appendTextToFile(File file,String text) throws IOException {  try (PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file,true),StandardCharsets.UTF_8))){    pw.println(text);  } }  }
class C{  public static int copy(Reader in,Writer out) throws IOException {  Assert.notNull(in,"No Reader specified");  Assert.notNull(out,"No Writer specified");  try {    int byteCount=0;    char[] buffer=new char[BUFFER_SIZE];    int bytesRead=-1;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      byteCount+=bytesRead;    }    out.flush();    return byteCount;  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public byte[] asn1Encode(int rep_type) throws Asn1Exception, IOException {  DerOutputStream temp=new DerOutputStream();  DerOutputStream bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),key.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),lastReq.asn1Encode());  temp.putInteger(BigInteger.valueOf(nonce));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  if (keyExpiration != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),keyExpiration.asn1Encode());  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),flags.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),authtime.asn1Encode());  if (starttime != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),starttime.asn1Encode());  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),endtime.asn1Encode());  if (renewTill != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),renewTill.asn1Encode());  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x09),sname.getRealm().asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0A),sname.asn1Encode());  if (caddr != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0B),caddr.asn1Encode());  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)msgType),temp);  return bytes.toByteArray();}  }
class C{  public void addInitializedClasses(List<String> classNamesWithDots){  for (  String classNameWithDots : classNamesWithDots) {    this.addInitializedClass(classNameWithDots);  }}  }
class C{  public boolean hasVoice(User user){  return getDao().levelContainsUser(UserLevel.VOICE,this,user);}  }
class C{  public static X509Certificate loadCertificate(Path certPath) throws CertificateParsingException, IOException {  return loadCertificate(Files.newInputStream(certPath));}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean consumed=this.pickGestureDetector.onTouchEvent(event);  if (!consumed) {    return super.onTouchEvent(event);  }  return consumed;}  }
class C{  public boolean isCurrency(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].currency;}  }
class C{  protected void deleteBasis(int selectedBasis){  basisSet.remove(Integer.valueOf(selectedBasis));  alpha[selectedBasis]=-1.0d;}  }
class C{  public IndexResultSet(BJETxCursor cursor,DatabaseEntry keyIn,ByteArrayConverter<T> converter,Supplier<T> forwardSupplier,Supplier<T> backwardSupplier,boolean is_ordered){  this.converter=converter;  this.cursor=cursor;  this.key=new DatabaseEntry();  this.is_ordered=is_ordered;  this.forwardSupplier=forwardSupplier;  this.backwardSupplier=backwardSupplier;  if (keyIn != null) {    bje.assignData(this.key,keyIn.getData());  }  try {    cursor.cursor().getCurrent(key,data,LockMode.DEFAULT);    next=converter.fromByteArray(data.getData(),data.getOffset(),data.getSize());    lookahead=1;  } catch (  Throwable t) {    throw new HGException(t);  }}  }
class C{  @Override public void addEjbReference(EjbRef ref){}  }
class C{  public String toString(){  return getDescriptor();}  }
class C{  @Override public void createFieldEditors(){  createRadioGroup();  dialect=new StringFieldEditor(PreferenceConstants.DB_DIALECT,Messages.getString("DatenbankPreferencePage.7"),getFieldEditorParent());  addField(dialect);  url=new StringFieldEditor(PreferenceConstants.DB_URL,Messages.getString("DatenbankPreferencePage.8"),getFieldEditorParent());  addField(url);  user=new StringFieldEditor(PreferenceConstants.DB_USER,Messages.getString("DatenbankPreferencePage.9"),getFieldEditorParent());  addField(user);  pass=new StringFieldEditor(PreferenceConstants.DB_PASS,Messages.getString("DatenbankPreferencePage.10"),getFieldEditorParent());  pass.getTextControl(getFieldEditorParent()).setEchoChar('*');  addField(pass);}  }
class C{  public static Header[] parseHeaders(final InputStream is,final String charset) throws IOException, HttpException {  LOG.trace("enter HeaderParser.parseHeaders(InputStream, String)");  final ArrayList headers=new ArrayList();  String name=null;  StringBuffer value=null;  for (; ; ) {    final String line=HttpParser.readLine(is,charset);    if ((line == null) || (line.trim().length() < 1)) {      break;    }    if ((line.charAt(0) == ' ') || (line.charAt(0) == '\t')) {      if (value != null) {        value.append(' ');        value.append(line.trim());      }    } else {      if (name != null) {        headers.add(new Header(name,value.toString()));      }      final int colon=line.indexOf(":");      if (colon < 0) {        throw new ProtocolException("Unable to parse header: " + line);      }      name=line.substring(0,colon).trim();      value=new StringBuffer(line.substring(colon + 1).trim());    }  }  if (name != null) {    headers.add(new Header(name,value.toString()));  }  return (Header[])headers.toArray(new Header[headers.size()]);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private boolean allowedForFallback(String key){  return KEY_UNLOCK_BACKUP_INFO.equals(key) || KEY_UNLOCK_SET_PATTERN.equals(key) || KEY_UNLOCK_SET_PIN.equals(key);}  }
class C{  public final void recycle(Writer writer){  this.writer=writer;  flushed=false;  clear();}  }
class C{  private static String readComment(String input,int index){  String comment=null;  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));  if (matcher.find()) {    comment=matcher.group(1);    comment=comment.substring(1);  }  return comment;}  }
class C{  private static SiteVerificationWebResourceResource verifySite(String siteUrl,SiteVerification siteVerification) throws IOException {  SiteVerificationWebResourceResource resource=new SiteVerificationWebResourceResource();  SiteVerificationWebResourceResource.Site resourceSite=new SiteVerificationWebResourceResource.Site();  resourceSite.setIdentifier(siteUrl);  resourceSite.setType(SITE_TYPE);  resource.setSite(resourceSite);  SiteVerification.WebResource.Insert request=siteVerification.webResource().insert(META_VERIFICATION_METHOD,resource);  return request.execute();}  }
class C{  public String upperFirstLetter(String stringLowerCase){  String stringUpperCase=stringLowerCase.toUpperCase();  StringBuffer newBufferLowerCase=new StringBuffer(stringLowerCase);  StringBuffer newBufferUpperCase=new StringBuffer(stringUpperCase);  newBufferLowerCase.setCharAt(0,newBufferUpperCase.charAt(0));  return newBufferLowerCase.toString();}  }
class C{  public final boolean isSelectionRectangular(){  return rectSelect;}  }
class C{  public static <T1,T2,R>Function<T2,R> partial2(final T1 t1,final BiFunction<T1,T2,R> biFunc){  return null;}  }
class C{  @Override public void drawHighlight(Graphics g,int w,int h){  g.setColor(Color.black);  FontMetrics fm=g.getFontMetrics();  int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2;  int t=(int)(m_y * h) - fm.getHeight() / 2;  g.fillRect(l - 2,t - 2,fm.stringWidth(m_id) + 8,fm.getHeight() + fm.getDescent() + 8);  drawNode(g,w,h);}  }
class C{  public AbstractTogglePreference(){  this(ApplicationPreferences.getPreferences());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected String toTitleString(DoubleMatrix2D matrix,String[] rowNames,String[] columnNames,String rowAxisName,String columnAxisName,String title){  if (matrix.size() == 0)   return "Empty matrix";  String[][] s=format(matrix);  align(s);  return new cern.colt.matrix.objectalgo.Formatter().toTitleString(cern.colt.matrix.ObjectFactory2D.dense.make(s),rowNames,columnNames,rowAxisName,columnAxisName,title);}  }
class C{  public static byte[] toBytes(long val){  byte[] b=new byte[8];  for (int i=7; i > 0; i--) {    b[i]=(byte)val;    val>>>=8;  }  b[0]=(byte)val;  return b;}  }
class C{  public JMenu(){  this("");}  }
class C{  public ReturnStmt newReturnStmt(Value op){  return new JReturnStmt(op);}  }
class C{  void changeNetworkSpeedCaps(String csvFile,String outFile) throws IOException {  if (network == null)   initNetwork();  BufferedReader reader=IOUtils.getBufferedReader(csvFile);  HashMap<String,String[]> remapString=new HashMap<>();  reader.readLine();  String line=reader.readLine();  while (line != null) {    String[] e=line.split(",");    remapString.put((e[0] + "_" + e[1]+ "_"+ e[2]),new String[]{e[3],e[4],e[5]});    line=reader.readLine();  }  Map<Id<Link>,? extends Link> links=network.getLinks();  for (  Link currLink : links.values()) {    if (currLink.getId().toString().equals("SW7_SW8")) {      System.out.println();    }    String type=Double.toString(roundOneDecimal(currLink.getFreespeed())) + "_" + Double.toString(roundOneDecimal(currLink.getCapacity()))+ "_"+ Double.toString(roundOneDecimal(currLink.getNumberOfLanes()));    String[] newValues=remapString.get(type);    if (newValues != null) {      currLink.setFreespeed(Double.parseDouble(newValues[0]));      currLink.setCapacity(Double.parseDouble(newValues[1]));      currLink.setNumberOfLanes(Double.parseDouble(newValues[2]));    }  }  new NetworkWriter(network).write(outFile);}  }
class C{  public boolean isEmpty(){  return cubes.isEmpty();}  }
class C{  public int lastIndexOf(Object elem){  return delegate.lastIndexOf(elem);}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:34.543 -0400",hash_original_method="4B340B7A1F4FC0CB9D13EE0AB48D5C4B",hash_generated_method="0CA7B8CF1CD01C8AC236B4EBF07CD05D") public MethodNotSupportedException(final String message){  super(message);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] a=new double[2][2];  double[] b=new double[2];  System.out.println("Enter a00, a01, a10, a11, b0, and b1:");  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[i].length; j++) {      a[i][j]=input.nextDouble();    }  }  for (int i=0; i < b.length; i++) {    b[i]=input.nextDouble();  }  double[] result=linearEquation(a,b);  if (result == null)   System.out.println("The equation has no solution."); else {    System.out.println("x is " + result[0] + " and y is "+ result[1]);  }}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2,boolean alternate){  return doubleMetaphone(value1,alternate).equals(doubleMetaphone(value2,alternate));}  }
class C{  @Deprecated public void emailNote(NoteEmailParameters parameters,OnClientCallback<Void> callback){  AsyncReflector.execute(mClient,callback,"emailNote",mAuthenticationToken,parameters);}  }
class C{  public void resetOptions(){  m_delta=0.05;  m_metricThreshold=0.9;  m_numRulesToFind=10;  m_lowerBoundMinSupport=0.1;  m_upperBoundMinSupport=1.0;  m_positiveIndex=2;  m_transactionsMustContain="";  m_rulesMustContain="";  m_mustContainOR=false;}  }
class C{  private TombstoneService.State createTombStoneState(String availabilityZone){  TombstoneService.State tombStoneState=new TombstoneService.State();  tombStoneState.entityId=ServiceUtils.getIDFromDocumentSelfLink(availabilityZone);  tombStoneState.entityKind=AVAILABILITY_ZONE_ENTITY_KIND;  tombStoneState.tombstoneTime=System.currentTimeMillis();  return tombStoneState;}  }
class C{  public static boolean isWindows2k(){  return win2k;}  }
class C{  private Element createOrganization(String name,String displName,String url,String langStr) throws Exception {  Element orgEle=doc.createElement(SAMLNames.ORGANIZATION);  Element nameEle=doc.createElement(SAMLNames.ORGANIZATIONNAME);  nameEle.setAttribute(SAMLNames.XMLLANG,SAMLNames.ENGLISH);  nameEle.appendChild(doc.createTextNode(name));  orgEle.appendChild(nameEle);  Element displayNameEle=doc.createElement(SAMLNames.ORGANIZATIONDISPLAYNAME);  displayNameEle.setAttribute(SAMLNames.XMLLANG,SAMLNames.ENGLISH);  displayNameEle.appendChild(doc.createTextNode(displName));  orgEle.appendChild(displayNameEle);  String urlStr=idmClient.getEntityID(tenantName);  if (urlStr == null) {    urlStr=tenantName;  }  Element urlEle=doc.createElement(SAMLNames.ORGANIZATIONURL);  urlEle.setAttribute(SAMLNames.XMLLANG,langStr);  urlEle.appendChild(doc.createTextNode(url));  orgEle.appendChild(urlEle);  return orgEle;}  }
class C{  public void saveAlertDefinitionsAsSerializedObjects(){  File serFile=null;  FileOutputStream foStr=null;  DataOutputStream ooStr=null;  try {    serFile=new File(statAlertDefnSerFile);    if (logger.isDebugEnabled()) {      logger.debug("AdminDistributedSystemJmxImpl.saveAlertDefinitionsAsSerializedObjects: File: {}",serFile.getPath());    }    if (!canWriteToFile(serFile)) {      return;    }    foStr=new FileOutputStream(serFile);    ooStr=new DataOutputStream(foStr);    int numOfAlerts=0;    StatAlertDefinition[] defs=null;synchronized (ALERT_DEFINITIONS) {      numOfAlerts=ALERT_DEFINITIONS.size();      defs=new StatAlertDefinition[numOfAlerts];      int i=0;      for (Iterator iter=ALERT_DEFINITIONS.keySet().iterator(); iter.hasNext(); ) {        Integer key=(Integer)iter.next();        StatAlertDefinition readDefn=(StatAlertDefinition)ALERT_DEFINITIONS.get(key);        defs[i]=readDefn;        i++;      }    }    DataSerializer.writeObjectArray(defs,ooStr);  } catch (  IOException ex) {    logger.error(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystem_ENCOUNTERED_A_0_WHILE_SAVING_STATALERTDEFINITIONS_1,new Object[]{ex.getClass().getName(),statAlertDefnSerFile}),ex);  } finally {    if (foStr != null)     try {      foStr.close();    } catch (    IOException ex) {      ;    }    if (ooStr != null)     try {      ooStr.close();    } catch (    IOException ex) {      ;    }  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.shape,stream);  SerialUtilities.writeStroke(this.stroke,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writePaint(this.fillPaint,stream);}  }
class C{  public static Word prepareWord(Object object,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Word.max();}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public static String generateStreamIdByPartition(int partitionNum){  return String.format(STREAM_ID_NUM_TEMPLATE,partitionNum);}  }
class C{  @Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",justification="OK to write to static variables as we only do so if not initialised") public boolean init(){  if (initialised) {    return true;  }  try {    ALut.alutInit();    al=ALFactory.getAL();    al.alGetError();    if (log.isInfoEnabled()) {      log.info("Initialised JOAL using OpenAL:" + " vendor - " + al.alGetString(AL.AL_VENDOR) + " version - "+ al.alGetString(AL.AL_VERSION));    }  } catch (  ALException e) {    if (log.isDebugEnabled()) {      log.debug("Error initialising JOAL: " + e);    }    return false;  }catch (  RuntimeException e) {    if (log.isDebugEnabled()) {      log.debug("Error initialising OpenAL: " + e);    }    return false;  }  int checkMultiChannel;  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_QUAD8");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_QUAD8=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_QUAD16");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_QUAD16=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_51CHN8");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_51CHN8=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_51CHN16");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_51CHN16=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_61CHN8");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_61CHN8=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_61CHN16");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_61CHN16=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_71CHN8");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_71CHN8=checkMultiChannel;  }  checkMultiChannel=al.alGetEnumValue("AL_FORMAT_71CHN16");  checkALError();  if (checkMultiChannel != ALConstants.AL_FALSE) {    AL_FORMAT_71CHN16=checkMultiChannel;  }  log.debug("8-bit quadrophonic supported? " + (AL_FORMAT_QUAD8 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("16-bit quadrophonic supported? " + (AL_FORMAT_QUAD16 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("8-bit 5.1 surround supported? " + (AL_FORMAT_51CHN8 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("16-bit 5.1 surround supported? " + (AL_FORMAT_51CHN16 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("8-bit 6.1 surround supported? " + (AL_FORMAT_61CHN8 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("16-bit 6.1 surround supported? " + (AL_FORMAT_61CHN16 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("8 bit 7.1 surround supported? " + (AL_FORMAT_71CHN8 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  log.debug("16 bit 7.1 surround supported? " + (AL_FORMAT_71CHN16 == AudioBuffer.FORMAT_UNKNOWN ? "No" : "Yes"));  alc=ALFactory.getALC();  alcDevice=alc.alcGetContextsDevice(alc.alcGetCurrentContext());  if (!checkALCError(alcDevice)) {    int[] size=new int[1];    alc.alcGetIntegerv(alcDevice,ALC.ALC_ATTRIBUTES_SIZE,size.length,size,0);    log.debug("Size of ALC_ATTRIBUTES: " + size[0]);    if (!checkALCError(alcDevice) && size[0] > 0) {      int[] attributes=new int[size[0]];      alc.alcGetIntegerv(alcDevice,ALC.ALC_ALL_ATTRIBUTES,attributes.length,attributes,0);      for (int i=0; i < attributes.length; i++) {        if (i % 2 != 0) {          continue;        }switch (attributes[i]) {case ALC.ALC_INVALID:          log.debug("Invalid");        break;case ALC.ALC_MONO_SOURCES:      log.debug("Number of mono sources: " + attributes[i + 1]);    break;case ALC.ALC_STEREO_SOURCES:  log.debug("Number of stereo sources: " + attributes[i + 1]);break;case ALC.ALC_FREQUENCY:log.debug("Frequency: " + attributes[i + 1]);break;case ALC.ALC_REFRESH:log.debug("Refresh: " + attributes[i + 1]);break;default :log.debug("Attribute " + i + ": "+ attributes[i]);}}}}super.init();initialised=true;return true;}  }
class C{  public void flag(UserConfig config){  config.addCredentials(this);  POST(this.url + "/flag-user",config.toXML());}  }
class C{  public static Geometry dissolve(Geometry g){  LineDissolver d=new LineDissolver();  d.add(g);  return d.getResult();}  }
class C{  public BasicConstraints(int pathLenConstraint){  this.cA=ASN1Boolean.getInstance(true);  this.pathLenConstraint=new ASN1Integer(pathLenConstraint);}  }
class C{  public boolean isMinYSet(){  return isMinYSet(0);}  }
class C{  private static void runFromCode(){  List<String> coordNames=new ArrayList<>();  coordNames.add("greenWaveZ");  List<String> ttZs=new ArrayList<>();  ttZs.add("5s");  String cap="8640";  String date="2015-04-15";  int tbs=1;  int numberOfAgents=3600;  int lastIterationNonBC=200;  double expBeta=2.0;  double reRoute=0.1;  for (  String coordName : coordNames) {    for (    String ttZ : ttZs) {      String runDirectory=DgPaths.REPOS + "runs-svn/cottbus/braess/" + date+ "_tbs"+ tbs+ "_net"+ cap+ "-"+ ttZ+ "_p"+ numberOfAgents+ "_"+ coordName+ "_it"+ lastIterationNonBC+ "_expBeta"+ expBeta+ "_reRoute"+ reRoute+ "/";      String outputDir=runDirectory + "analysis/";      new File(outputDir).mkdir();      int lastIteration;      if (coordName == "basecase")       lastIteration=100; else       lastIteration=lastIterationNonBC;      TtRunBraessAnalysisAfterSimulation analyzer=new TtRunBraessAnalysisAfterSimulation(runDirectory,lastIteration,outputDir);      analyzer.calculateLastItResults();      analyzer.writeResults();    }  }}  }
class C{  public FieldView(Element elem){  super(elem);}  }
class C{  private Snapshot createMemorySnapshot(SnapshotDescriptor descriptor){  HeapBuffer buffer=HeapBuffer.allocate(SnapshotDescriptor.BYTES,Integer.MAX_VALUE);  Snapshot snapshot=new MemorySnapshot(buffer,descriptor.copyTo(buffer),this);  LOGGER.debug("Created memory snapshot: {}",snapshot);  return snapshot;}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  redHeader=args[0];  greenHeader=args[1];  blueHeader=args[2];  intensityHeader=args[3];  hueHeader=args[4];  saturationHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double r, g, b;    double i, s, h, m;    float progress;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(redHeader);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(greenHeader);    if (green.getNumberRows() != rows || green.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(blueHeader);    if (blue.getNumberRows() != rows || blue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double redNoData=red.getNoDataValue();    double greenNoData=green.getNoDataValue();    double blueNoData=blue.getNoDataValue();    WhiteboxRaster intensity=new WhiteboxRaster(intensityHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster hue=new WhiteboxRaster(hueHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster saturation=new WhiteboxRaster(saturationHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    double overallMin=Math.min(Math.min(red.getDisplayMinimum(),green.getDisplayMinimum()),blue.getDisplayMinimum());    double overallMax=Math.max(Math.max(red.getDisplayMaximum(),green.getDisplayMaximum()),blue.getDisplayMaximum());    double range=overallMax - overallMin;    double[] dataRed, dataGreen, dataBlue;    for (row=0; row < rows; row++) {      dataRed=red.getRowValues(row);      dataGreen=green.getRowValues(row);      dataBlue=blue.getRowValues(row);      for (col=0; col < cols; col++) {        redVal=dataRed[col];        greenVal=dataGreen[col];        blueVal=dataBlue[col];        if ((redVal != redNoData) && (greenVal != greenNoData) && (blueVal != blueNoData)) {          r=(redVal - overallMin) / range;          if (r < 0) {            r=0;          }          if (r > 1) {            r=1;          }          g=(greenVal - overallMin) / range;          if (g < 0) {            g=0;          }          if (g > 1) {            g=1;          }          b=(blueVal - overallMin) / range;          if (b < 0) {            b=0;          }          if (b > 1) {            b=1;          }          m=Math.min(Math.min(r,g),b);          i=r + g + b;          if (i == 3) {            h=0;          } else           if (m == b) {            h=(g - b) / (i - 3 * b);          } else           if (m == r) {            h=(b - r) / (i - 3 * r) + 1;          } else {            h=(r - g) / (i - 3 * g) + 2;          }          if (h <= 1) {            s=(i - 3 * b) / i;          } else           if (h <= 2) {            s=(i - 3 * r) / i;          } else {            s=(i - 3 * g) / i;          }          intensity.setValue(row,col,i);          hue.setValue(row,col,h);          saturation.setValue(row,col,s);        } else {          intensity.setValue(row,col,redNoData);          hue.setValue(row,col,redNoData);          saturation.setValue(row,col,redNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(intensityHeader);    returnData(hueHeader);    returnData(saturationHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ValidateException(ErrorEntity entity){  super(Response.status(422).entity(entity).type("application/json").build());}  }
class C{  public static double uniform(){  return random.nextDouble();}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  @Override public void output(Vertex output){}  }
class C{  public DependenciesNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return 0.0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person p=getPerson(stack);  return (p != null) ? p.getBirthplace() : "";}  }
class C{  private void resetInternal(){  mTransitionState=TRANSITION_NONE;  Arrays.fill(mStartAlphas,0);  mStartAlphas[0]=255;  Arrays.fill(mAlphas,0);  mAlphas[0]=255;  Arrays.fill(mIsLayerOn,false);  mIsLayerOn[0]=true;}  }
class C{  protected void showHighlight(){  if (revertColor == null) {    width=3;    revertColor=getContainerForeground();    setContainerForeground(highLightColor);  }}  }
class C{  private Object callNativeMethod(Object object,String methodName,Class[] classes,Object[] arguments){  log.debug("Calling methodName {}",methodName);  try {    if (classes == null) {      classes=new Class[arguments.length];      for (int i=0; i < classes.length; i++) {        classes[i]=arguments[i].getClass();      }    }    Method method=object.getClass().getMethod(methodName,classes);    return method.invoke(object,arguments);  } catch (  NoSuchMethodException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  boolean hasZoom(){  return false;}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  int[] readCodewords() throws FormatException {  int width=bitMatrix.getWidth();  int height=bitMatrix.getHeight();  erasures=new int[MAX_CW_CAPACITY];  float moduleWidth=1.0f;  int[] rowCounters=new int[width];  int[] codewords=new int[MAX_CW_CAPACITY];  int next=0;  int matchingConsecutiveScans=0;  boolean rowInProgress=false;  int rowNumber=0;  int rowHeight=0;  for (int i=1; i < height; i++) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    int rowDifference=0;    for (int j=0; j < width; j++) {      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {        rowDifference++;      }    }    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {      for (int j=0; j < width; j++) {        if (bitMatrix.get(j,i)) {          rowCounters[j]++;        }      }      matchingConsecutiveScans++;      if ((matchingConsecutiveScans + 1) >= 2.0f * moduleWidth) {        rowInProgress=true;      }    } else {      if (rowInProgress) {        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);        if (next == -1) {          throw FormatException.getFormatInstance();        }        for (int j=0; j < rowCounters.length; j++) {          rowCounters[j]=0;        }        rowNumber++;        rowHeight=0;      }      matchingConsecutiveScans=0;      rowInProgress=false;    }    rowHeight++;  }  if (rowInProgress) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);    rowNumber++;    rows=rowNumber;  }  erasures=trimArray(erasures,eraseCount);  return trimArray(codewords,next);}  }
class C{  public static boolean isService(String processName){  return SERVICES.contains(processName);}  }
class C{  public IndexRequest contentType(XContentType contentType){  this.contentType=contentType;  return this;}  }
class C{  private List<String> readCredits(){  final URL url=DataLoader.getResource("games/stendhal/client/gui/credits.txt");  final List<String> res=new LinkedList<String>();  try {    final BufferedReader br=new BufferedReader(new InputStreamReader(url.openStream(),"UTF-8"));    try {      String line=br.readLine();      while (line != null) {        res.add(line);        line=br.readLine();      }    }  finally {      br.close();    }  } catch (  final IOException e) {    res.add(0,"credits.txt not found");  }  return res;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void generate(Projection p,long time){  TemporalPoint tp=setPosition(time);  if (tp == null) {    return;  }  Point2D pt=tp.getLocation();switch (renderType) {case RENDERTYPE_XY:    set((int)pt.getX(),(int)pt.getY());  break;default :set(pt.getY(),pt.getX());}super.generate(p);}  }
class C{  public synchronized void reset(){  loaded=false;  started=false;  tracker=new MediaTracker(boardview);  mechImageList.clear();  mechImages.clear();  hexTileset.reset();}  }
class C{  public static WMRuleInterface createWMRule(String name){  WMRuleInterface rule=null;  if ("WMRuleFIFO".equals(name)) {    rule=new WMRuleFIFO();  }  return rule;}  }
class C{  public AbstractDelegatingSailImplConfig(String type,SailImplConfig delegate){  this(type);  setDelegate(delegate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.907 -0500",hash_original_method="322DCBCAE81D964565C547E136E2F152",hash_generated_method="322DCBCAE81D964565C547E136E2F152") void _setWantWont(int option){  _options[option]&=~_REQUESTED_WILL_MASK;}  }
class C{  public LocatorStats(){}  }
class C{  public void cancelAnimation(){  mIsAnimationRunning=false;}  }
class C{  public RectangleConstraint toUnconstrainedHeight(){  if (this.heightConstraintType == LengthConstraintType.NONE) {    return this;  } else {    return new RectangleConstraint(this.width,this.widthRange,this.widthConstraintType,0.0,this.heightRange,LengthConstraintType.NONE);  }}  }
class C{  public boolean isInMaintenanceMode(){  return inMaintenanceMode;}  }
class C{  protected TaskImage calculateInputImage(ImageToProcess img,Rect cropApplied){  return new TaskImage(img.rotation,img.proxy.getWidth(),img.proxy.getHeight(),img.proxy.getFormat(),cropApplied);}  }
class C{  public String toString(){  if (attrs.size() == 0) {    return ("No attributes");  } else {    return attrs.toString();  }}  }
class C{  public static void main(final String[] args) throws IOException, InterruptedException {  Scanner scanner=new Scanner(System.in);  System.out.println("Enter your project id: ");  String projectId=scanner.nextLine();  System.out.println("Enter your dataset id: ");  String datasetId=scanner.nextLine();  System.out.println("Enter your table id: ");  String tableId=scanner.nextLine();  System.out.println("Enter the Google Cloud Storage Path to the data " + "you'd like to load: ");  String cloudStoragePath=scanner.nextLine();  System.out.println("Enter the filepath to your schema: ");  String sourceSchemaPath=scanner.nextLine();  System.out.println("Enter how often to check if your job is complete " + "(milliseconds): ");  long interval=scanner.nextLong();  scanner.close();  run(cloudStoragePath,projectId,datasetId,tableId,new FileReader(new File(sourceSchemaPath)),interval);}  }
class C{  private void readEntityDeclaration() throws IOException, XmlPullParserException {  read(START_ENTITY);  boolean generalEntity=true;  skip();  if (peekCharacter() == '%') {    generalEntity=false;    position++;    skip();  }  String name=readName();  skip();  int quote=peekCharacter();  String entityValue;  if (quote == '"' || quote == '\'') {    position++;    entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION);    if (peekCharacter() == quote) {      position++;    }  } else   if (readExternalId(true,false)) {    entityValue="";    skip();    if (peekCharacter() == NDATA[0]) {      read(NDATA);      skip();      readName();    }  } else {    throw new XmlPullParserException("Expected entity value or external ID",this,null);  }  if (generalEntity && processDocDecl) {    if (documentEntities == null) {      documentEntities=new HashMap<String,char[]>();    }    documentEntities.put(name,entityValue.toCharArray());  }  skip();  read('>');}  }
class C{  void openKeyStore(String name,String type,String provider,String pwdURL) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException, IOException, CertificateException, NoSuchProviderException, ExpandException {  if (name == null && type == null && provider == null && pwdURL == null) {    this.keyStoreName=null;    this.keyStoreType=null;    this.keyStoreProvider=null;    this.keyStorePwdURL=null;    return;  }  URL policyURL=null;  if (policyFileName != null) {    File pfile=new File(policyFileName);    policyURL=new URL("file:" + pfile.getCanonicalPath());  }  if (name != null && name.length() > 0) {    name=PropertyExpander.expand(name).replace(File.separatorChar,'/');  }  if (type == null || type.length() == 0) {    type=KeyStore.getDefaultType();  }  if (pwdURL != null && pwdURL.length() > 0) {    pwdURL=PropertyExpander.expand(pwdURL).replace(File.separatorChar,'/');  }  try {    this.keyStore=PolicyUtil.getKeyStore(policyURL,name,type,provider,pwdURL,null);  } catch (  IOException ioe) {    String MSG="no password provided, and no callback handler " + "available for retrieving password";    Throwable cause=ioe.getCause();    if (cause != null && cause instanceof javax.security.auth.login.LoginException && MSG.equals(cause.getMessage())) {      throw new IOException(MSG);    } else {      throw ioe;    }  }  this.keyStoreName=name;  this.keyStoreType=type;  this.keyStoreProvider=provider;  this.keyStorePwdURL=pwdURL;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.294 -0500",hash_original_method="92B387BCC5497E96DCF4BCCE85C5A491",hash_generated_method="E783C853CB2DBC2528530EE61AC0DE37") public ColorMatrixColorFilter(ColorMatrix matrix){  final float[] colorMatrix=matrix.getArray();  native_instance=nativeColorMatrixFilter(colorMatrix);  nativeColorFilter=nColorMatrixFilter(native_instance,colorMatrix);}  }
class C{  public boolean fillBindingsForStage(Stage stage){  if (stage == null) {    return false;  }  boolean changed=false;  if (hasKey(EntryType.TEAM,stage.getName())) {    Team oldTeam=getTeamValue(stage.getName());    Team newTeam=fillBindingsForTeam(oldTeam);    changed|=!oldTeam.equals(newTeam);  } else {    Team newTeam=new TeamImpl();    changed|=setEntry(EntryType.TEAM,stage.getName(),newTeam);  }  return changed;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends View>T findViewById(Activity context,int id){  T view=null;  View genericView=context.findViewById(id);  try {    view=(T)(genericView);  } catch (  Exception ex) {    String message="Can't cast view (" + id + ") to a "+ view.getClass()+ ".  Is actually a "+ genericView.getClass()+ ".";    Log.e("PercolateAndroidUtils",message);    throw new ClassCastException(message);  }  return view;}  }
class C{  public void addDevice(IEspDevice device,int upgradeType){  if (!contain(device)) {    mDevices.add(new UpgradeDevice(device,upgradeType));  }}  }
class C{  public static int[] lastIndexOf(String s,String arr[]){  return lastIndexOf(s,arr,s.length());}  }
class C{  public static void testUnsecure(String loggerName) throws Exception {  if (System.getSecurityManager() != null) {    throw new Error("Security manager is set");  }  test(loggerName);}  }
class C{  public int countQuirks(){  int count=0;  if ((null == entity) || (null == entity.game) || !entity.game.getOptions().booleanOption("stratops_quirks")) {    return count;  }  for (Enumeration<IOptionGroup> i=quirks.getGroups(); i.hasMoreElements(); ) {    IOptionGroup group=i.nextElement();    for (Enumeration<IOption> j=group.getOptions(); j.hasMoreElements(); ) {      IOption quirk=j.nextElement();      if (quirk.booleanValue()) {        count++;      }    }  }  return count;}  }
class C{  protected double findSplitNumericNominal(int index) throws Exception {  double bestVal=Double.MAX_VALUE, currVal, currCutPoint;  int numMissing=0;  double[] sum=new double[m_Instances.numClasses()];  double[][] bestDist=new double[3][m_Instances.numClasses()];  for (int i=0; i < m_Instances.numInstances(); i++) {    Instance inst=m_Instances.instance(i);    if (!inst.isMissing(index)) {      m_Distribution[1][(int)inst.classValue()]+=inst.weight();    } else {      m_Distribution[2][(int)inst.classValue()]+=inst.weight();      numMissing++;    }  }  System.arraycopy(m_Distribution[1],0,sum,0,m_Instances.numClasses());  for (int j=0; j < 3; j++) {    System.arraycopy(m_Distribution[j],0,bestDist[j],0,m_Instances.numClasses());  }  m_Instances.sort(index);  for (int i=0; i < m_Instances.numInstances() - (numMissing + 1); i++) {    Instance inst=m_Instances.instance(i);    Instance instPlusOne=m_Instances.instance(i + 1);    m_Distribution[0][(int)inst.classValue()]+=inst.weight();    m_Distribution[1][(int)inst.classValue()]-=inst.weight();    if (inst.value(index) < instPlusOne.value(index)) {      currCutPoint=(inst.value(index) + instPlusOne.value(index)) / 2.0;      currVal=ContingencyTables.entropyConditionedOnRows(m_Distribution);      if (currVal < bestVal) {        m_SplitPoint=currCutPoint;        bestVal=currVal;        for (int j=0; j < 3; j++) {          System.arraycopy(m_Distribution[j],0,bestDist[j],0,m_Instances.numClasses());        }      }    }  }  if (numMissing == 0) {    System.arraycopy(sum,0,bestDist[2],0,m_Instances.numClasses());  }  m_Distribution=bestDist;  return bestVal;}  }
class C{  public NodeLocator(String publicId,String systemId,int lineNumber,int columnNumber){  this.m_publicId=publicId;  this.m_systemId=systemId;  this.m_lineNumber=lineNumber;  this.m_columnNumber=columnNumber;}  }
class C{  public boolean reconfigClusterIps(ClusterIpInfo clusterIpInfo,boolean powerOff){  UriBuilder builder=client.uriBuilder(CLUSER_IP_RECONFIG_URL);  if (powerOff) {    addQueryParam(builder,RECONFIG_POWEROFF_PARAM,RECONFIG_POWEROFF_VALUE);  }  ClientResponse response=client.postURI(ClientResponse.class,clusterIpInfo,builder.build());  return (response.getClientResponseStatus() == ClientResponse.Status.ACCEPTED);}  }
class C{  public boolean clear(){  boolean toReturn=currentGadget != null || currentParticleEffect != null || currentPet != null || currentMount != null || currentTreasureChest != null || currentHat != null || currentEmote != null;  if (Category.MORPHS.isEnabled() && Bukkit.getPluginManager().isPluginEnabled("LibsDisguises")) {    removeMorph();    try {      DisguiseAPI.undisguiseToAll(getPlayer());    } catch (    Exception ignored) {    }  }  removeGadget();  removeParticleEffect();  removePet();  removeMount();  removeTreasureChest();  removeHat();  removeEmote();  removeSuit();  return toReturn;}  }
class C{  public DChangePassword(JDialog parent,String title,Dialog.ModalityType modality,Password oldPassword,PasswordQualityConfig passwordQualityConfig){  super(parent,title,modality);  this.oldPassword=oldPassword;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(algorithm);  v.add(publicKey);  return new DERSequence(v);}  }
class C{  private void initializeGenderSpinner(){  genderSpinner=(Spinner)findViewById(R.id.gender_spinner);  genderSpinner.addValidator(Validators.notNull(this,R.string.not_null_validator_error_message));}  }
class C{  public boolean hasOffset(){  return offset > 0L;}  }
class C{  public boolean isSetAuthChallengeResponse(){  return this.authChallengeResponse != null;}  }
class C{  public JEditorArea(){  setEditorKit(new StyledEditorKit());  initComponents();}  }
class C{  protected double f(Double u,int n){  if (null == u || n < Ne) {    return Rplus;  }  return u;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  double[] imageTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    imageTotals=new double[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###.0000");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageTotals[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testCcdC(){  Node a=new ContinuousVariable("A");  Node b=new ContinuousVariable("B");  Node c=new ContinuousVariable("C");  Node d=new ContinuousVariable("D");  Node e=new ContinuousVariable("E");  a.setNodeType(NodeType.MEASURED);  b.setNodeType(NodeType.MEASURED);  c.setNodeType(NodeType.MEASURED);  d.setNodeType(NodeType.MEASURED);  e.setNodeType(NodeType.MEASURED);  Graph graph=new EdgeListGraph();  graph.addNode(a);  graph.addNode(b);  graph.addNode(c);  graph.addNode(d);  graph.addNode(e);  graph.addDirectedEdge(a,b);  graph.addDirectedEdge(b,c);  graph.addDirectedEdge(c,b);  graph.addDirectedEdge(c,d);  graph.addDirectedEdge(d,c);  graph.addDirectedEdge(e,d);  IndTestDSep test=new IndTestDSep(graph);  Ccd ccd=new Ccd(test);  Graph outPag=ccd.search();  boolean b1=PagUtils.graphInPagStep0(outPag,graph);  if (!b1) {    fail();  }  boolean b2=PagUtils.graphInPagStep1(outPag,graph);  if (!b2) {    fail();  }  boolean b3=PagUtils.graphInPagStep2(outPag,graph);  if (!b3) {    fail();  }  boolean b4=PagUtils.graphInPagStep3(outPag,graph);  if (!b4) {    fail();  }  boolean b5=PagUtils.graphInPagStep4(outPag,graph);  if (!b5) {    fail();  }  boolean b6=PagUtils.graphInPagStep5(outPag,graph);  if (!b6) {    fail();  }}  }
class C{  private static void inplacePermute(int[] list,byte[] mthd,Object[] cst,Integer[] indices){  int x;  byte xb=0;  Object xo=null;  int j, k;  for (int i=0; i < list.length; i++) {    x=list[i];    xb=mthd[i];    if (cst != null)     xo=cst[i];    j=i;    while (true) {      k=indices[j];      indices[j]=j;      if (k == i)       break;      list[j]=list[k];      mthd[j]=mthd[k];      if (cst != null)       cst[j]=cst[k];      j=k;    }    list[j]=x;    mthd[j]=xb;    if (cst != null)     cst[j]=xo;  }}  }
class C{  public Attaching then(Constraint... constraints){  this.constraints.addAll(Arrays.asList(constraints));  return this;}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractEntity ae=(AbstractEntity)n;  ae.nodeName=nodeName;  ae.publicId=publicId;  ae.systemId=systemId;  return n;}  }
class C{  public synchronized void stop() throws NoSuchObjectException {  if (isRunning()) {    isRunning=!UnicastRemoteObject.unexportObject(registry,true);  }}  }
class C{  public void enableButtons(boolean enable){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.176 -0400",hash_original_method="5F2B3EFC037F339DB05B9FCB9716EDC6",hash_generated_method="B18C4A8E49ACEF0C4D036C298830168C") public boolean match(CRL crl){  if (!(crl instanceof X509CRL)) {    return false;  }  X509CRL crlist=(X509CRL)crl;  if ((issuerNames != null) && !(issuerNames.contains(crlist.getIssuerX500Principal().getName(X500Principal.CANONICAL)))) {    return false;  }  if ((minCRL != null) || (maxCRL != null)) {    try {      byte[] bytes=crlist.getExtensionValue("2.5.29.20");      bytes=(byte[])ASN1OctetString.getInstance().decode(bytes);      BigInteger crlNumber=new BigInteger((byte[])ASN1Integer.getInstance().decode(bytes));      if ((minCRL != null) && (crlNumber.compareTo(minCRL) < 0)) {        return false;      }      if ((maxCRL != null) && (crlNumber.compareTo(maxCRL) > 0)) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (dateAndTime != -1) {    Date thisUp=crlist.getThisUpdate();    Date nextUp=crlist.getNextUpdate();    if ((thisUp == null) || (nextUp == null)) {      return false;    }    if ((dateAndTime < thisUp.getTime()) || (dateAndTime > nextUp.getTime())) {      return false;    }  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.949 -0500",hash_original_method="226EAAC156D556D42E48670E64FEC4E8",hash_generated_method="BAA289D8CF1FC3382A99E9306635F827") public String replace(CharSequence target,CharSequence replacement){  addTaint(target.getTaintInt());  addTaint(replacement.getTaintInt());  return this;}  }
class C{  public byte[] byteArrayValue(){  bb.position(0);  byte[] b=new byte[bb.limit()];  bb.get(b);  return b;}  }
class C{  protected boolean updateAttachmentPoint(long sw,short port,long lastSeen){  ITopologyService topology=deviceManager.topology;  List<AttachmentPoint> oldAPList;  List<AttachmentPoint> apList;  boolean oldAPFlag=false;  if (!deviceManager.isValidAttachmentPoint(sw,port))   return false;  AttachmentPoint newAP=new AttachmentPoint(sw,port,lastSeen);  apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  oldAPList=new ArrayList<AttachmentPoint>();  if (oldAPs != null)   oldAPList.addAll(oldAPs);  if (oldAPList.contains(newAP)) {    int index=oldAPList.indexOf(newAP);    newAP=oldAPList.remove(index);    newAP.setLastSeen(lastSeen);    this.oldAPs=oldAPList;    oldAPFlag=true;  }  Map<Long,AttachmentPoint> apMap=getAPMap(apList);  if (apMap == null || apMap.isEmpty()) {    apList.add(newAP);    attachmentPoints=apList;    return true;  }  long id=topology.getL2DomainId(sw);  AttachmentPoint oldAP=apMap.get(id);  if (oldAP == null) {    apList=new ArrayList<AttachmentPoint>();    apList.addAll(apMap.values());    apList.add(newAP);    this.attachmentPoints=apList;    return true;  }  if (oldAP.equals(newAP)) {    if (newAP.lastSeen > oldAP.lastSeen) {      oldAP.setLastSeen(newAP.lastSeen);    }    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    return false;  }  int x=deviceManager.apComparator.compare(oldAP,newAP);  if (x < 0) {    apMap.put(id,newAP);    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(oldAP);    this.oldAPs=oldAPList;    if (!topology.isInSameBroadcastDomain(oldAP.getSw(),oldAP.getPort(),newAP.getSw(),newAP.getPort()))     return true;  } else   if (oldAPFlag) {    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(newAP);    this.oldAPs=oldAPList;  }  return false;}  }
class C{  public static VcpcAltRunner serializableInstance(){  return new VcpcAltRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  @VisibleForTesting public boolean isMetricUnits(){  return metricUnits;}  }
class C{  public static <T>Predicate<T> memoizePredicate(Predicate<T> p,Cacheable<Boolean> cache){  Function<T,Boolean> memoised=memoizeFunction((Function1<T,Boolean>)null,cache);  return null;}  }
class C{  public ASCIIHexOutputStream(OutputStream out){  super(out);  characters=MAX_CHARS_PER_LINE;  end=false;  try {    newline=System.getProperty("line.separator");  } catch (  SecurityException e) {  }}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public TIFFField(int tag,int type,int count,Object data){  this.tag=tag;  this.type=type;  this.count=count;  this.data=data;}  }
class C{  public boolean contains(Block b){  return this.contains(b.getLocation());}  }
class C{  private void displayCommitA(@Nullable Revision revision){  if (revision == null) {    view.setCommitADate("");    view.setCommitARevision("");  } else {    view.setCommitADate(dateTimeFormatter.getFormattedDate(revision.getCommitTime()));    view.setCommitARevision(revision.getId());  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ENTITY___CLASS_DEFINITION_1:    return ((InternalEList<?>)getClassDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTITY___INTERFACE_DEFINITION_1:  return ((InternalEList<?>)getInterfaceDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:return ((InternalEList<?>)getExternalDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:return ((InternalEList<?>)getAssociationDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:return ((InternalEList<?>)getAssociationClassDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:return ((InternalEList<?>)getStateMachineDefinition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Field(34) public __VARIANT_NAME_3_union ulVal(int ulVal){  this.io.setIntField(this,34,ulVal);  return this;}  }
class C{  private HashMap<BasicBlock,BasicBlock> createOptimizedLoop(AnnotatedLSTNode loop,HashMap<Register,Register> regMap,ArrayList<Instruction> instrToEliminate,HashMap<Register,BasicBlock> regToBlockMap){  HashMap<BasicBlock,BasicBlock> originalToCloneBBMap=new HashMap<BasicBlock,BasicBlock>();  originalToCloneBBMap.put(loop.successor,loop.header);  BasicBlock new_pred=loop.header.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);  ir.cfg.linkInCodeOrder(ir.cfg.lastInCodeOrder(),new_pred);  originalToCloneBBMap.put(loop.predecessor,new_pred);  Enumeration<BasicBlock> blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    BasicBlock copy=block.copyWithoutLinks(ir);    originalToCloneBBMap.put(block,copy);    ir.cfg.linkInCodeOrder(ir.cfg.lastInCodeOrder(),copy);    IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(ir,copy);    loop_over_created_instructions:     while (instructions.hasMoreElements()) {      Instruction instruction=instructions.nextElement();      if (BoundsCheck.conforms(instruction)) {        for (        Instruction anInstrToEliminate : instrToEliminate) {          if (instruction.similar(anInstrToEliminate)) {            instruction.remove();            continue loop_over_created_instructions;          }        }      } else       if (NullCheck.conforms(instruction)) {        for (        Instruction anInstrToEliminate : instrToEliminate) {          if (instruction.similar(anInstrToEliminate)) {            instruction.remove();            continue loop_over_created_instructions;          }        }      }      Enumeration<Operand> operands=instruction.getDefs();      while (operands.hasMoreElements()) {        Operand operand=operands.nextElement();        if (operand instanceof RegisterOperand) {          Register register=operand.asRegister().getRegister();          if (regMap.containsKey(register)) {            instruction.replaceRegister(register,regMap.get(register));            regToBlockMap.put(regMap.get(register),copy);          }        }      }      operands=instruction.getUses();      while (operands.hasMoreElements()) {        Operand operand=operands.nextElement();        if (operand.isRegister()) {          Register register=operand.asRegister().getRegister();          if (regMap.containsKey(register)) {            instruction.replaceRegister(register,regMap.get(register));          }        }      }    }  }  new_pred.redirectOuts(loop.header,originalToCloneBBMap.get(loop.header),ir);  blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    BasicBlock copy=originalToCloneBBMap.get(block);    Enumeration<BasicBlock> outs=block.getOutNodes();    while (outs.hasMoreElements()) {      BasicBlock out=outs.nextElement();      if (originalToCloneBBMap.containsKey(out)) {        copy.redirectOuts(out,originalToCloneBBMap.get(out),ir);      }    }  }  blocks=loop.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    BasicBlock copy=originalToCloneBBMap.get(block);    IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(ir,copy);    while (instructions.hasMoreElements()) {      Instruction instruction=instructions.nextElement();      if (Phi.conforms(instruction)) {        for (int i=0; i < Phi.getNumberOfValues(instruction); i++) {          BasicBlock phi_predecessor=Phi.getPred(instruction,i).block;          if (originalToCloneBBMap.containsKey(phi_predecessor)) {            Phi.setPred(instruction,i,new BasicBlockOperand(originalToCloneBBMap.get(phi_predecessor)));          } else {            throw new Error("There's > 1 route to this phi node from outside the loop: " + phi_predecessor);          }        }      }    }  }  return originalToCloneBBMap;}  }
class C{  private void inferCaller(){  needToInferCaller=false;  Throwable throwable=new Throwable();  boolean lookingForLogger=true;  for (  final StackTraceElement frame : throwable.getStackTrace()) {    String cname=frame.getClassName();    boolean isLoggerImpl=isLoggerImplFrame(cname);    if (lookingForLogger) {      if (isLoggerImpl) {        lookingForLogger=false;      }    } else {      if (!isLoggerImpl) {        if (!cname.startsWith("java.lang.reflect.") && !cname.startsWith("sun.reflect.")) {          setSourceClassName(cname);          setSourceMethodName(frame.getMethodName());          return;        }      }    }  }}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  private static INaviCodeNode searchForSourceNodeOfEnterInlinedEdge(final INaviCodeNode node){  try {    return searchForSourceNodeOfEnterInlinedEdge(node,node.getParentFunction(),new HashSet<INaviCodeNode>());  } catch (  final MaybeNullException e) {    return null;  }}  }
class C{  public MWMArea(Properties ctx,int WM_Area_ID){  this(ctx,WM_Area_ID,null);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.CONTENT_NODE;}  }
class C{  private E doGet(Object okey){  Comparable<? super E> key=comparable(okey);  for (; ; ) {    Node<E> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (E)v;  }}  }
class C{  @Override protected void onNfcStateEnabled(){  toast(getString(R.string.nfcAvailableEnabled));}  }
class C{  private void hideSoftKeyboard(){  if (inputView == null)   return;  if (BuildConfig.DEBUG)   Log.v("hideSoftKeyboard()");  if (inputManager == null) {    inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  }  inputManager.hideSoftInputFromWindow(inputView.getApplicationWindowToken(),0);  inputView=null;}  }
class C{  void initializeDownloaderTask(AttachmentManager photoManager,AttachmentView photoView,boolean cacheFlag){  sPhotoManager=photoManager;  mImageURL=photoView.getImageUrl();  message=photoView.getMessage();  setAttachementView(photoView);  mCacheEnabled=cacheFlag;  mTargetWidth=photoView.getWidth();  mTargetHeight=photoView.getHeight();  context=photoView.getContext().getApplicationContext();}  }
class C{  @SubscribeEvent public static void breakSpeed(PlayerEvent.BreakSpeed event){  if (isPlayerHarvestingLogWithoutCorrectTool(event.getState(),event.getEntityPlayer().getEntityWorld(),event.getPos(),event.getEntityPlayer())) {    event.setCanceled(true);  }}  }
class C{  private void assertTimestampsEqualWithEpsilon(long expected,long actual,int epsilon,String desc){  assertTrue("Expected a " + desc + " time within "+ epsilon+ "ms of "+ expected+ " but got "+ actual,Math.abs(actual - expected) < epsilon);}  }
class C{  public void randomizeIncomingWeights(){  for (  Neuron n : getNeuronList()) {    for (    Synapse s : n.getFanIn()) {      s.setLowerBound(0);      s.setStrength(s.getUpperBound() * Math.random());    }  }}  }
class C{  private static int moveToAPP1EXIF(InputStream is) throws IOException {  if (moveToMarker(is,MARKER_APP1)) {    int length=StreamProcessor.readPackedInt(is,2,false) - 2;    if (length > 6) {      int magic=StreamProcessor.readPackedInt(is,4,false);      length-=4;      int zero=StreamProcessor.readPackedInt(is,2,false);      length-=2;      if (magic == APP1_EXIF_MAGIC && zero == 0) {        return length;      }    }  }  return 0;}  }
class C{  public static FaweQueue createQueue(World world,boolean autoqueue){  return SetQueue.IMP.getNewQueue(world,true,autoqueue);}  }
class C{  public void skipHDU() throws FitsException, IOException {  if (this.atEOF) {    return;  } else {    Header hdr=new Header(this.dataStr);    int dataSize=(int)hdr.getDataSize();    this.dataStr.skipAllBytes(dataSize);    if (this.dataStr instanceof RandomAccess) {      this.lastFileOffset=((RandomAccess)this.dataStr).getFilePointer();    }  }}  }
class C{  private void applyPrediction(SingleChannelElement sce){  if (!sce.ics.predictorInitialized) {    resetAllPredictors(sce.predictorState);    sce.ics.predictorInitialized=true;  }  if (sce.ics.windowSequence[0] != EIGHT_SHORT_SEQUENCE) {    for (int sfb=0; sfb < ff_aac_pred_sfb_max[ac.oc[1].m4ac.samplingIndex]; sfb++) {      for (int k=sce.ics.swbOffset[sfb]; k < sce.ics.swbOffset[sfb + 1]; k++) {        predict(sce.predictorState[k],sce.coeffs,k,sce.ics.predictorPresent && sce.ics.predictionUsed[sfb]);      }    }    if (sce.ics.predictorResetGroup != 0) {      resetPredictorGroup(sce.predictorState,sce.ics.predictorResetGroup);    }  } else {    resetAllPredictors(sce.predictorState);  }}  }
class C{  public static int calcRWCount(int lvl){  return (int)Math.ceil(Math.log10(1 + rand.nextInt(lvl * lvl + 1))) + rand.nextInt(1);}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  public void write(OutputNode node,Object item) throws Exception {  Class expect=type.getType();  String key=entry.getValue();  if (key == null) {    key=context.getName(expect);  }  String name=style.getElement(key);  root.write(node,item,expect,name);}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public static RoundingParams fromCornersRadii(float[] radii){  return (new RoundingParams()).setCornersRadii(radii);}  }
class C{  protected void addRequestHeaders(HessianConnection conn){  conn.addHeader("Content-Type","x-application/hessian");  conn.addHeader("Accept-Encoding","deflate");  String basicAuth=_factory.getBasicAuth();  if (basicAuth != null)   conn.addHeader("Authorization",basicAuth);}  }
class C{  public boolean isGenericSuperTypeOf(Type subType){  return GenericTypeReflector.isSuperType(type,subType);}  }
class C{  public void processThreadWorkQueue(){  DualWorkQueue queues=threadWorkQueue.getThreadQueue();  if (queues.getFrontQueue().isEmpty()) {    boolean haveDispatched=services.getNamedWindowDispatchService().dispatch();    if (haveDispatched) {      dispatch();      if (!queues.getFrontQueue().isEmpty()) {        processThreadWorkQueueFront(queues);      }    }  } else {    processThreadWorkQueueFront(queues);  }  Object item;  while ((item=queues.getBackQueue().poll()) != null) {    if (item instanceof InsertIntoLatchSpin) {      processThreadWorkQueueLatchedSpin((InsertIntoLatchSpin)item);    } else     if (item instanceof InsertIntoLatchWait) {      processThreadWorkQueueLatchedWait((InsertIntoLatchWait)item);    } else {      processThreadWorkQueueUnlatched(item);    }    boolean haveDispatched=services.getNamedWindowDispatchService().dispatch();    if (haveDispatched) {      dispatch();    }    if (!queues.getFrontQueue().isEmpty()) {      processThreadWorkQueueFront(queues);    }  }}  }
class C{  public PacketNOTIFICATION(String title,String message,byte iconType,byte[] iconData){  super(PT_NOTIFICATION);  appendPayload(title,message,iconType,iconData);}  }
class C{  protected void onFileEnd(){  int size=trackIds.size();  if (size == 0) {    return;  }  long trackId=trackIds.get(size - 1);  Track track=myTracksProviderUtils.getTrack(trackId);  if (track == null) {    return;  }  int waypointPosition=-1;  Waypoint waypoint=null;  Location location=null;  TripStatisticsUpdater trackTripStatisticstrackUpdater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  TripStatisticsUpdater markerTripStatisticsUpdater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  LocationIterator locationIterator=null;  ActivityType activityType=CalorieUtils.getActivityType(context,track.getCategory());  try {    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(track.getId(),-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    while (true) {      if (waypoint == null) {        waypointPosition++;        waypoint=waypointPosition < waypoints.size() ? waypoints.get(waypointPosition) : null;        if (waypoint == null) {          return;        }      }      if (location == null) {        if (!locationIterator.hasNext()) {          return;        }        location=locationIterator.next();        trackTripStatisticstrackUpdater.addLocation(location,recordingDistanceInterval,false,ActivityType.INVALID,0.0);        markerTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);      }      if (waypoint.getLocation().getTime() > location.getTime()) {        location=null;      } else       if (waypoint.getLocation().getTime() < location.getTime()) {        waypoint=null;      } else {        if (!LocationUtils.isValidLocation(location)) {          location=null;          continue;        }        if (location.getLatitude() == waypoint.getLocation().getLatitude() && location.getLongitude() == waypoint.getLocation().getLongitude()) {          TripStatistics tripStatistics;          String waypointDescription;          String icon;          if (waypoint.getType() == WaypointType.STATISTICS) {            tripStatistics=markerTripStatisticsUpdater.getTripStatistics();            markerTripStatisticsUpdater=new TripStatisticsUpdater(location.getTime());            waypointDescription=new DescriptionGeneratorImpl(context).generateWaypointDescription(tripStatistics);            icon=context.getString(R.string.marker_statistics_icon_url);          } else {            tripStatistics=null;            waypointDescription=waypoint.getDescription();            icon=context.getString(R.string.marker_waypoint_icon_url);          }          double length=trackTripStatisticstrackUpdater.getTripStatistics().getTotalDistance();          long duration=trackTripStatisticstrackUpdater.getTripStatistics().getTotalTime();          Waypoint newWaypoint=new Waypoint(waypoint.getName(),waypointDescription,waypoint.getCategory(),icon,track.getId(),waypoint.getType(),length,duration,-1L,-1L,location,tripStatistics,waypoint.getPhotoUrl());          myTracksProviderUtils.insertWaypoint(newWaypoint);        }        waypoint=null;      }    }  }  finally {    if (locationIterator != null) {      locationIterator.close();    }  }}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public static double cdf(double x,double mu,double sigma,double lambda){  if (x == Double.NEGATIVE_INFINITY) {    return 0.;  }  if (x == Double.POSITIVE_INFINITY) {    return 1.;  }  final double u=lambda * (x - mu);  final double v=lambda * sigma;  final double v2=v * v;  final double logphi=Math.log(NormalDistribution.cdf(u,v2,v));  return NormalDistribution.cdf(u,0.,v) - Math.exp(-u + v2 * .5 + logphi);}  }
class C{  public Boolean isOcspEnabled(){  return ocspEnabled;}  }
class C{  public static boolean isUniqueConstraintViolation(Throwable e){  if (throwableContainsMessage(e,"ORA-00001") || throwableContainsMessage(e,"duplicate key value violates unique constraint") || throwableContainsMessage(e,"Unique index or primary key violation")|| throwableContainsMessage(e,"SQLITE_CONSTRAINT")) {    return true;  }  return false;}  }
class C{  void reset(){  try {    remove(0,getLength());    if (initialText != null) {      insertString(0,initialText,null);    }  } catch (  BadLocationException e) {  }}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  if (bufOff == buf.length) {    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    bufOff=0;  }  return resultLen;}  }
class C{  public static Message deserialize(ByteBuf bb){  Schema<Message> schema=RuntimeSchema.getSchema(Message.class);  Message message=schema.newMessage();  try {    ProtostuffIOUtil.mergeFrom(new ByteBufInputStream(bb),message,schema);  } catch (  Exception e) {    throw new DecoderException(e.getMessage(),e);  }  return message;}  }
class C{  public void selectEntry(OMGraphic graphic){  if (lsm == null) {    getTable();  }  lsm.setSelectionInterval(graphicIndex,graphicIndex);  getTable().scrollRectToVisible(getTable().getCellRect(graphicIndex,0,true));}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  private boolean runWordCountConfigBasedHadoopJob() throws Exception {  Job job=createConfigBasedHadoopJob();  FileSystem fs=FileSystem.get(job.getConfiguration());  X.println(">>> Using distributed file system: " + fs.getHomeDirectory());  prepareDirectories(fs);  long time=System.currentTimeMillis();  boolean res=job.waitForCompletion(true);  X.println(">>> Job execution time: " + (System.currentTimeMillis() - time) / 1000 + " sec.");  publishResults(fs);  return res;}  }
class C{  public ExtensionHeaderImpl(){}  }
class C{  private void initSkinLoader(){  SkinManager.getInstance().init(this);  SkinManager.getInstance().load();}  }
class C{  public void warning(SAXParseException e) throws SAXException {  System.err.println(e.getMessage());}  }
class C{  boolean oppositeTurn(MoveStep turn2){switch (type) {case TURN_LEFT:    return turn2.getType() == MoveStepType.TURN_RIGHT;case TURN_RIGHT:  return turn2.getType() == MoveStepType.TURN_LEFT;default :return false;}}  }
class C{  private boolean isListaDescriptoraEnUso(HttpServletRequest request,String idListaDescriptora){  return isListaDescriptoraEnUso(request,new String[]{idListaDescriptora});}  }
class C{  @Override public void release(){  super.release();}  }
class C{  private boolean isRedirectingOutput(){  return Boolean.TRUE.equals(getRedirectOutput());}  }
class C{  public boolean isBound(){  return unboundMap.isEmpty();}  }
class C{  @SuppressWarnings("unchecked") public Memory(int size,int startIndex){  this.values=new byte[size];  this.dirty=new int[size];  for (int i=0; i < size; i++) {    this.values[i]=ZERO;    this.dirty[i]=Integer.MIN_VALUE;  }  this.dirtysteps=Integer.MIN_VALUE + 2;  this.firstIndex=startIndex;  this.addressedListeners=new ArrayList[size];  this.globalListeners=new ArrayList<>();}  }
class C{  public static boolean isMultiThreaded(int numThreads){  return (ThreadUtils.getActualNumThreads(numThreads,ThreadUtils.getAvailableProcessors()) != ThreadUtils.SEQUENTIAL);}  }
class C{  public SplitPaneResizeListener(Component child){  this.child=child;}  }
class C{  private static boolean isChild(Lop a,Lop b,HashMap<Long,Integer> IDMap){  int bID=IDMap.get(b.getID());  return a.get_reachable()[bID];}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static IsNullValue nullOnComplexPathValue(){  return instanceByFlagsList[0][NCP2];}  }
class C{  public Rational divide(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getDenominator());  BigInteger d=r[1].multiply(secondRational.getNumerator());  return new Rational(n,d);}  }
class C{  public void testBacktracking() throws IOException {  assertEquals(1,regexQueryNrHits("4934[314]"));}  }
class C{  public Task<StorageSystemRestRep> discover(URI id){  return discover(id,null);}  }
class C{  public PCAFilteredResult(SortedEigenPairs eigenPairs,int numstrong,double big,double small){  super(eigenPairs);  int dim=eigenPairs.getEigenPair(0).getEigenvector().length;  double sumStrongEigenvalues=0;  double sumWeakEigenvalues=0;{    strongEigenvalues=new double[numstrong];    strongEigenvectors=new double[dim][numstrong];    for (int i=0; i < numstrong; i++) {      EigenPair eigenPair=eigenPairs.getEigenPair(i);      strongEigenvalues[i]=eigenPair.getEigenvalue();      setCol(strongEigenvectors,i,eigenPair.getEigenvector());      sumStrongEigenvalues+=strongEigenvalues[i];    }  }{    weakEigenvalues=new double[dim - numstrong];    weakEigenvectors=new double[dim][dim - numstrong];    for (int i=numstrong, j=0; i < dim; i++, j++) {      EigenPair eigenPair=eigenPairs.getEigenPair(i);      weakEigenvalues[j]=eigenPair.getEigenvalue();      setCol(weakEigenvectors,j,eigenPair.getEigenvector());      sumWeakEigenvalues+=weakEigenvalues[j];    }  }  explainedVariance=sumStrongEigenvalues / (sumStrongEigenvalues + sumWeakEigenvalues);  int localdim=strongEigenvalues.length;  e_hat=new double[dim][dim];  e_czech=new double[dim][dim];  for (int d=0; d < dim; d++) {    if (d < localdim) {      e_czech[d][d]=big;      e_hat[d][d]=small;    } else {      e_czech[d][d]=small;      e_hat[d][d]=big;    }  }  double[][] V=getEigenvectors();  m_hat=timesTranspose(times(V,e_hat),V);  m_czech=timesTranspose(times(V,e_czech),V);}  }
class C{  public void growOrShrink(){  getDialogComponent().setShouldCalcPreferredSize(true);  growOrShrinkImpl(Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight());  forceRevalidate();}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void addEmptyBattle(final Route route,final Collection<Unit> units,final PlayerID id,final IDelegateBridge bridge,final UndoableMove changeTracker,final Collection<Unit> unitsNotUnloadedTilEndOfRoute){  final GameData data=bridge.getData();  final Collection<Unit> canConquer=Match.getMatches(units,Matches.unitIsBeingTransportedByOrIsDependentOfSomeUnitInThisList(units,route,id,data,false).invert());  if (Match.noneMatch(canConquer,Matches.UnitIsNotAir)) {    return;  }  final Collection<Unit> presentFromStartTilEnd=new ArrayList<>(canConquer);  if (unitsNotUnloadedTilEndOfRoute != null) {    presentFromStartTilEnd.removeAll(unitsNotUnloadedTilEndOfRoute);  }  final boolean canConquerMiddleSteps=Match.someMatch(presentFromStartTilEnd,Matches.UnitIsNotAir);  final boolean scramblingEnabled=games.strategy.triplea.Properties.getScramble_Rules_In_Effect(data);  final CompositeMatch<Territory> conquerable=new CompositeMatchAnd<>();  conquerable.add(Matches.territoryIsEmptyOfCombatUnits(data,id));  conquerable.add(new CompositeMatchOr<>(Matches.territoryIsOwnedByPlayerWhosRelationshipTypeCanTakeOverOwnedTerritoryAndPassableAndNotWater(id),Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(id,data)));  final Collection<Territory> conquered=new ArrayList<>();  if (canConquerMiddleSteps) {    conquered.addAll(route.getMatches(conquerable));    if (route.getStart() != route.getEnd() && conquerable.match(route.getStart())) {      conquered.add(route.getStart());    }  }  conquered.remove(route.getEnd());  final Collection<Territory> blitzed=Match.getMatches(conquered,Matches.TerritoryIsBlitzable(id,data));  m_blitzed.addAll(Match.getMatches(blitzed,Matches.isTerritoryEnemy(id,data)));  m_conquered.addAll(Match.getMatches(conquered,Matches.isTerritoryEnemy(id,data)));  for (  final Territory current : conquered) {    IBattle nonFight=getPendingBattle(current,false,BattleType.NORMAL);    if (nonFight == null) {      nonFight=new FinishedBattle(current,id,this,false,BattleType.NORMAL,data,BattleRecord.BattleResultDescription.CONQUERED,WhoWon.ATTACKER);      m_pendingBattles.add(nonFight);      getBattleRecords().addBattle(id,nonFight.getBattleID(),current,nonFight.getBattleType());    }    final Change change=nonFight.addAttackChange(route,units,null);    bridge.addChange(change);    if (changeTracker != null) {      changeTracker.addChange(change);    }    takeOver(current,id,bridge,changeTracker,units);  }  if (conquerable.match(route.getEnd())) {    IBattle precede=getDependentAmphibiousAssault(route);    if (precede == null) {      precede=getPendingBattle(route.getEnd(),true,null);    }    if (precede != null || (scramblingEnabled && route.isUnload() && route.hasExactlyOneStep())) {      IBattle nonFight=getPendingBattle(route.getEnd(),false,BattleType.NORMAL);      if (nonFight == null) {        nonFight=new NonFightingBattle(route.getEnd(),id,this,data);        m_pendingBattles.add(nonFight);        getBattleRecords().addBattle(id,nonFight.getBattleID(),route.getEnd(),nonFight.getBattleType());      }      final Change change=nonFight.addAttackChange(route,units,null);      bridge.addChange(change);      if (changeTracker != null) {        changeTracker.addChange(change);      }      if (precede != null) {        addDependency(nonFight,precede);      }    } else {      if (Matches.isTerritoryEnemy(id,data).match(route.getEnd())) {        if (Matches.TerritoryIsBlitzable(id,data).match(route.getEnd())) {          m_blitzed.add(route.getEnd());        }        m_conquered.add(route.getEnd());      }      IBattle nonFight=getPendingBattle(route.getEnd(),false,BattleType.NORMAL);      if (nonFight == null) {        nonFight=new FinishedBattle(route.getEnd(),id,this,false,BattleType.NORMAL,data,BattleRecord.BattleResultDescription.CONQUERED,WhoWon.ATTACKER);        m_pendingBattles.add(nonFight);        getBattleRecords().addBattle(id,nonFight.getBattleID(),route.getEnd(),nonFight.getBattleType());      }      final Change change=nonFight.addAttackChange(route,units,null);      bridge.addChange(change);      if (changeTracker != null) {        changeTracker.addChange(change);      }      takeOver(route.getEnd(),id,bridge,changeTracker,units);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void find2Methods(Object self,String superMethod,String thisMethod,int index,String desc,java.lang.reflect.Method[] methods){  methods[index + 1]=thisMethod == null ? null : findMethod(self,thisMethod,desc);  methods[index]=findSuperMethod(self,superMethod,desc);}  }
class C{  public void store(float value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public SearchableEnvironment(JavaProject project,WorkingCopyOwner owner) throws JavaModelException {  this(project,owner == null ? null : project.manager.getWorkingCopies(owner,true));  this.owner=owner;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.144 -0400",hash_original_method="3697643F129B92B3621F4F9C1EF1C970",hash_generated_method="2049645E4F8B42379BB79B89F9701548") public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be encoded using Q codec");  }}  }
class C{  public void applyTo(IconicsDrawable iconicsDrawable){  if (mColorInt != 0) {    iconicsDrawable.color(mColorInt);  } else   if (mColorRes != -1) {    iconicsDrawable.colorRes(mColorRes);  }}  }
class C{  public XmlSerializer newSerializer() throws XmlPullParserException {  if (serializerClasses == null) {    throw new XmlPullParserException("Factory initialization incomplete - has not tried " + classNamesLocation);  }  if (serializerClasses.size() == 0) {    throw new XmlPullParserException("No valid serializer classes found in " + classNamesLocation);  }  final StringBuilder issues=new StringBuilder();  for (int i=0; i < serializerClasses.size(); i++) {    final Class ppClass=(Class)serializerClasses.get(i);    try {      final XmlSerializer ser=(XmlSerializer)ppClass.newInstance();      return ser;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create serializer: " + issues);}  }
class C{  public static void text(double x,double y,String s,double degrees){  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,s);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  public boolean hasMouse(){  return ((movable != null));}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  protected void addResourceToConfigurationViaProperty(ResourceFixture fixture){  Configuration config=getLocalContainer().getConfiguration();  config.setProperty(ResourcePropertySet.RESOURCE,fixture.buildResourcePropertyString());}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public static String crypt(final String text,final String salt){  try {    final MessageDigest md=MessageDigest.getInstance(SHA_512);    md.update(salt.getBytes(StandardCharsets.UTF_8));    final byte[] digest=md.digest(text.getBytes(StandardCharsets.UTF_8));    return String.format("%064x",new BigInteger(1,digest));  } catch (  final NoSuchAlgorithmException e) {    throw new IllegalStateException("The SHA512Crypt class uses an invalid algorithm",e);  }}  }
class C{  public void reset(){  mHash=0L;  mCount=0;}  }
class C{  private void updateDebugger(final DebuggerTemplate template){  if ((m_debugger == null) || !m_debugger.isConnected()) {    if (template == null) {      m_debugger=null;    } else {      m_debugger=new TcpDebugger(template,new ModuleTargetSettings(m_module));      m_debugger.setAddressTranslator(m_module,m_fileBase,m_imageBase);    }    for (    final IModuleListener listener : m_listeners) {      try {        listener.changedDebugger(m_module,m_debugger);      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);      }    }  }}  }
class C{  public void removeFormat(String key){  mFormatAndSample.remove(key);}  }
class C{  private String toLocalInteger(Object valueObj){  if (valueObj instanceof Integer) {    return toLocalNumber((Integer)valueObj);  } else {    String value=valueObj.toString();    try {      value=toLocalNumber(Integer.parseInt(value));    } catch (    NumberFormatException ex) {    }    return value;  }}  }
class C{  public CountRequest minScore(float minScore){  this.minScore=minScore;  return this;}  }
class C{  public boolean equals(XObject obj2){  try {    if (XObject.CLASS_NODESET == obj2.getType()) {      return obj2.equals(this);    } else     if (XObject.CLASS_BOOLEAN == obj2.getType()) {      return bool() == obj2.bool();    } else     if (XObject.CLASS_NUMBER == obj2.getType()) {      return num() == obj2.num();    } else     if (XObject.CLASS_NODESET == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_STRING == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_RTREEFRAG == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else {      return super.equals(obj2);    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  if (lastText == null)   lastText=new StringBuilder();  lastText.append(ch,start,length);}  }
class C{  public void tryToDeleteVideoSharings(ContactId contact){  mVideoSharingDeleteOperationHandler.post(new VideoSharingDeleteTask(mVideoSharingService,this,mLocalContentResolver,contact));}  }
class C{  public static Class<?> readBeanClass(String fqcn,FSDataInputStream inputStream) throws IOException {  byte[] bytes=IOUtils.toByteArray(inputStream);  inputStream.close();  return new ByteArrayClassLoader().defineClass(fqcn,bytes);}  }
class C{  public ModifiableSolrParams(Map<String,String[]> v){  vals=v;}  }
class C{  protected void startDragging(){  Component leftC=splitPane.getLeftComponent();  Component rightC=splitPane.getRightComponent();  ComponentPeer cPeer;  beginDragDividerLocation=getDividerLocation(splitPane);  draggingHW=false;  if (leftC != null && (cPeer=leftC.getPeer()) != null && !(cPeer instanceof LightweightPeer)) {    draggingHW=true;  } else   if (rightC != null && (cPeer=rightC.getPeer()) != null && !(cPeer instanceof LightweightPeer)) {    draggingHW=true;  }  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    setLastDragLocation(divider.getBounds().x);    dividerSize=divider.getSize().width;    if (!isContinuousLayout() && draggingHW) {      nonContinuousLayoutDivider.setBounds(getLastDragLocation(),0,dividerSize,splitPane.getHeight());      addHeavyweightDivider();    }  } else {    setLastDragLocation(divider.getBounds().y);    dividerSize=divider.getSize().height;    if (!isContinuousLayout() && draggingHW) {      nonContinuousLayoutDivider.setBounds(0,getLastDragLocation(),splitPane.getWidth(),dividerSize);      addHeavyweightDivider();    }  }}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  @Override public void paintComponent(java.awt.Graphics g){  super.paintComponent(g);  if (env != null) {    Map map=getMapEnv().getMap();    if (!map.getLocations().isEmpty()) {      updateTracks();      java.awt.Graphics2D g2=(java.awt.Graphics2D)g;      adjustTransformation();      paintMap(g2);      for (      Agent a : env.getAgents())       paintTrack(g2,a);      for (      String loc : map.getLocations())       paintLoc(g2,loc);    }  }}  }
class C{  public void testLoadSearchResults_waitsOnLocations(){  mController.setLocationFilter(Zones.TRIAGE_ZONE_UUID);  mController.loadSearchResults();  verify(mMockAppModel,times(0)).fetchPatients(any(CrudEventBus.class),any(SimpleSelectionFilter.class),anyString());}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void copyFilesIfNeeded(final String localPath,final String serverPath,final File[] files,final String uploadPath){  if (LocalPath.equals(localPath,uploadPath)) {    return;  }  for (int i=0; i < files.length; i++) {    final File file=files[i];    final String fromPath=file.getPath();    try {      final String relativePath=fromPath.substring(uploadPath.length());      final String serverDestPath=ServerPath.combine(serverPath,relativePath);      final String toFilePath=repository.getWorkspace().getMappedLocalPath(serverDestPath);      if (toFilePath == null) {        files[i]=null;        TFSCommonUIClientPlugin.getDefault().getConsole().printErrorMessage(MessageFormat.format(Messages.getString("AddFilesWizard.NotMappedTextFormat"),fromPath));      } else {        final File toFile=new File(toFilePath);        if (!toFile.getParentFile().exists()) {          toFile.getParentFile().mkdirs();        }        if (!toFile.exists()) {          FileCopyHelper.copy(fromPath,toFile.getPath());        } else         if (!LocalPath.equals(fromPath,toFilePath)) {          TFSCommonUIClientPlugin.getDefault().getConsole().printErrorMessage(MessageFormat.format(Messages.getString("AddFilesWizard.ItemAlreadyInWorkingFolderFormat"),toFile.getName()));        }        files[i]=toFile;      }    } catch (    final Exception e) {      TFSCommonUIClientPlugin.getDefault().getConsole().printErrorMessage(MessageFormat.format(Messages.getString("AddFilesWizard.CopyErrorTextFormat"),fromPath));      TFSCommonUIClientPlugin.getDefault().getConsole().printErrorMessage(e.getMessage());      files[i]=null;    }  }  final ArrayList<File> fileList=new ArrayList<File>();  for (  final File f : files) {    if (f != null) {      fileList.add(f);    }  }  this.setPageData(SELECTED_FILES,fileList.toArray(new File[fileList.size()]));}  }
class C{  public TIntByteHashMap(TIntByteMap map){  super(map.size());  if (map instanceof TIntByteHashMap) {    TIntByteHashMap hashmap=(TIntByteHashMap)map;    this._loadFactor=hashmap._loadFactor;    this.no_entry_key=hashmap.no_entry_key;    this.no_entry_value=hashmap.no_entry_value;    if (this.no_entry_key != (int)0) {      Arrays.fill(_set,this.no_entry_key);    }    if (this.no_entry_value != (byte)0) {      Arrays.fill(_values,this.no_entry_value);    }    setUp((int)Math.ceil(DEFAULT_CAPACITY / _loadFactor));  }  putAll(map);}  }
class C{  public DebuggerClosedUnexpectedlyReply(){  super(0,0);}  }
class C{  public static RE mkBinOp(BinaryOperation o,RE arg1,RE arg2){  RE res=new RE(ReOp.BINOP);  res.strOp=o;  res.cats=new LinkedList<RE>();  res.cats.add(arg1);  res.cats.add(arg2);  return res;}  }
class C{  public static byte[] decompressIfRequired(byte[] input){  final int MAX_HEADER_SIZE=16 * 1024;  final String HEADER_BODY_SEPERATOR="\r\n\r\n";  String initialPart=new String(input,0,Math.min(MAX_HEADER_SIZE,input.length));  int headerLocation=initialPart.indexOf("Content-Encoding: gzip\r\n");  if (headerLocation >= 0) {    int bodyOffset=initialPart.indexOf(HEADER_BODY_SEPERATOR) + HEADER_BODY_SEPERATOR.length();    if (headerLocation >= bodyOffset) {      return input;    }    ByteArrayOutputStream baos=new ByteArrayOutputStream(input.length);    baos.write(input,0,bodyOffset);    try {      baos.write(new UncompressImpl(CompressionType.gzip,Arrays.copyOfRange(input,bodyOffset,input.length),null).uncompress());      return baos.toByteArray();    } catch (    IOException e1) {      BurpExtender.callbacks.printError("Unable to ungzip - returning raw data");      return input;    }  }  return input;}  }
class C{  public boolean isDeclaredFinal(){  return declaredFinal;}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.280 -0400",hash_original_method="E35E62D29EF3FAA3F823A024032BC8E2",hash_generated_method="FC4FC6DB57BD8FD1ED23AD32CA2BEE03") public V remove(Object key){  return doRemove(key,null);}  }
class C{  public boolean isAutoStart(){  return autoStart;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttribute;  Attr newAttr1;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(0);  attributes=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","streets");  newAttribute=((Element)element).setAttributeNodeNS(newAttr1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","streets");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns01","streets",attrName);}  }
class C{  public static void changeFont(JComponent comp,double scaleFactor){  Font font=comp.getFont();  comp.setFont(scale(font,scaleFactor));}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  fsb().sendSAXcharacters(ch,m_start,m_length);}  }
class C{  public void writeParameter(String id,PartitionOptions options,XMLWriter writer){  Parameter parameter=options.getParameter(id);  String prefix=options.getPrefix();  if (parameter == null) {    throw new IllegalArgumentException("parameter with name, " + id + ", is unknown; and its prefix is "+ options.getPrefix());  }  writeParameter(prefix + id,parameter,writer);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public void addAttribute(Attribute sa){  attributes.add(sa);}  }
class C{  public static <T>T withWriter(File file,String charset,@ClosureParams(value=SimpleType.class,options="java.io.BufferedWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(file,charset),closure);}  }
class C{  public static String calculateMD5RequestDigest(String uri,String username,String password,String realm,String nonce,String nc,String cnonce,String qop){  String reqA1=username + ":" + realm+ ":"+ password;  String reqA2="POST:" + uri;  String hashA1=checksumMD5(reqA1);  String hashA2=checksumMD5(reqA2);  String requestDigest=digestMD5(hashA1,nonce + ":" + nc+ ":"+ cnonce+ ":"+ qop+ ":"+ hashA2);  return requestDigest;}  }
class C{  public void testReadWriteSplitting() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  assertEquals(this.masterPort,getPort());  Statement s=this.conn.createStatement();  s.executeUpdate("drop table if exists fruits");  s.executeUpdate("create table fruits (name varchar(30))");  s.executeUpdate("insert into fruits values ('Rambutan'), ('Starfruit')");  this.conn.setReadOnly(true);  assertTrue(!this.masterPort.equals(getPort()));  Thread.sleep(3000);  ResultSet rs=s.executeQuery("select name from fruits order by 1");  assertTrue(rs.next());  assertEquals("Rambutan",rs.getString(1));  assertTrue(rs.next());  assertEquals("Starfruit",rs.getString(1));  assertFalse(rs.next());  rs.close();  this.conn.setReadOnly(false);  s.executeUpdate("drop table fruits");}  }
class C{  public Vector4d mul(double scalar){  x*=scalar;  y*=scalar;  z*=scalar;  w*=scalar;  return this;}  }
class C{  private void sendCalendarEvents(){  try {    TransactionBuilder builder=performInitialized("Send upcoming events");    BluetoothGattCharacteristic characteristic=getCharacteristic(MiBandService.UUID_CHARACTERISTIC_CONTROL_POINT);    Prefs prefs=GBApplication.getPrefs();    int availableSlots=prefs.getInt(MiBandConst.PREF_MIBAND_RESERVE_ALARM_FOR_CALENDAR,0);    if (availableSlots > 0) {      CalendarEvents upcomingEvents=new CalendarEvents();      List<CalendarEvents.CalendarEvent> mEvents=upcomingEvents.getCalendarEventList(getContext());      int iteration=0;      for (      CalendarEvents.CalendarEvent mEvt : mEvents) {        if (iteration >= availableSlots || iteration > 2) {          break;        }        int slotToUse=2 - iteration;        Calendar calendar=Calendar.getInstance();        calendar.setTimeInMillis(mEvt.getBegin());        Alarm alarm=GBAlarm.createSingleShot(slotToUse,false,calendar);        queueAlarm(alarm,builder,characteristic);        iteration++;      }      builder.queue(getQueue());    }  } catch (  IOException ex) {    LOG.error("Unable to send Events to MI device",ex);  }}  }
class C{  public static Protos.Payment createPaymentMessage(List<Transaction> transactions,@Nullable Coin refundAmount,@Nullable Address refundAddress,@Nullable String memo,@Nullable byte[] merchantData){  if (refundAddress != null) {    if (refundAmount == null)     throw new IllegalArgumentException("Specify refund amount if refund address is specified.");    return createPaymentMessage(transactions,ImmutableList.of(createPayToAddressOutput(refundAmount,refundAddress)),memo,merchantData);  } else {    return createPaymentMessage(transactions,null,memo,merchantData);  }}  }
class C{  protected void addToCheckList(CandidatePair candidatePair){synchronized (checkList) {    checkList.add(candidatePair);  }}  }
class C{  public static boolean delete(File f){  if (f.isFile())   return f.delete(); else   if (f.isDirectory()) {    boolean b=clearDir(f);    b&=f.delete();    return b;  } else   return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.261 -0500",hash_original_method="9E081198F867421B2EE1E810B189D8F9",hash_generated_method="BCC8384EAE212F81EE15688CABF5786B") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public Set<K> keySet(){  return super.keySet();}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGroupLocalDeviceDBDao() : null;}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  @Override @SuppressWarnings("unchecked") public V put(K key,V value){  return putImpl(key,value);}  }
class C{  public void boilAndWakeUp(Calendar calendar,int phoneNumber){}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);changed=true;return local;}  }
class C{  private boolean recursiveHasNext(){  if (current == null) {    if (itit.hasNext()) {      current=itit.next();    } else {      return false;    }  }  boolean result=current.hasNext();  if (!result) {    current=null;    result=recursiveHasNext();  }  return result;}  }
class C{  public void onDestroy(){  this.pcClient.closeAllConnections();  this.mPubNub.unsubscribeAll();}  }
class C{  @Override public String put(String key,String value){  String valueToStore=(value == null) ? Boolean.TRUE.toString() : value;  return super.put(key,valueToStore);}  }
class C{  public final void printBehavior(int errorCode,String[] parameters,TLCState state,final StateVec stateTrace){  MP.printError(errorCode,parameters);  if (this.traceDepth == Long.MAX_VALUE) {    MP.printMessage(EC.TLC_ERROR_STATE);    StatePrinter.printState(state);  } else {    MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);    TLCState lastState=null;    for (int i=0; i < stateTrace.size(); i++) {      StatePrinter.printState(stateTrace.elementAt(i),lastState,i + 1);      lastState=stateTrace.elementAt(i);    }    StatePrinter.printState(state,null,stateTrace.size() + 1);  }  this.printSummary();}  }
class C{  public Vertex delete(Vertex source,Vertex target){  return delete(source,source.getNetwork().createVertex(Primitive.ELEMENT),target);}  }
class C{  public LinkedCaseInsensitiveMap(){  this(null);}  }
class C{  public void showDialog(final Class<?> dialogControllerClass){  if (currentController != null) {    dialogControllers.get(dialogControllerClass).show(currentController.getStage());  }}  }
class C{  public static void main(String[] args){  runFileSaver(new MatlabSaver(),args);}  }
class C{  public static void onResume(final Context context){  log.onResume(context);}  }
class C{  public String next() throws java.io.IOException {  int yy_input;  int yy_action;  int yy_currentPos_l;  int yy_startRead_l;  int yy_markedPos_l;  int yy_endRead_l=yy_endRead;  char[] yy_buffer_l=yy_buffer;  char[] yycmap_l=yycmap;  int[] yytrans_l=yytrans;  int[] yy_rowMap_l=yy_rowMap;  byte[] yy_attr_l=YY_ATTRIBUTE;  while (true) {    yy_markedPos_l=yy_markedPos;    yy_action=-1;    yy_startRead_l=yy_currentPos_l=yy_currentPos=yy_startRead=yy_markedPos_l;    yy_state=yy_lexical_state;    yy_forAction: {      while (true) {        if (yy_currentPos_l < yy_endRead_l)         yy_input=yy_buffer_l[yy_currentPos_l++]; else         if (yy_atEOF) {          yy_input=YYEOF;          break yy_forAction;        } else {          yy_currentPos=yy_currentPos_l;          yy_markedPos=yy_markedPos_l;          boolean eof=yy_refill();          yy_currentPos_l=yy_currentPos;          yy_markedPos_l=yy_markedPos;          yy_buffer_l=yy_buffer;          yy_endRead_l=yy_endRead;          if (eof) {            yy_input=YYEOF;            break yy_forAction;          } else {            yy_input=yy_buffer_l[yy_currentPos_l++];          }        }        int yy_next=yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];        if (yy_next == -1)         break yy_forAction;        yy_state=yy_next;        int yy_attributes=yy_attr_l[yy_state];        if ((yy_attributes & 1) == 1) {          yy_action=yy_state;          yy_markedPos_l=yy_currentPos_l;          if ((yy_attributes & 8) == 8)           break yy_forAction;        }      }    }    yy_markedPos=yy_markedPos_l;switch (yy_action) {case 32:{        return ("N'T");      }case 40:    break;case 31:{    return ("n't");  }case 41:break;case 10:case 11:{return (yytext().substring(1,yytext().length()));}case 42:break;case 1:case 3:case 5:case 6:case 7:case 8:case 19:case 20:case 29:case 30:case 35:case 36:{return (yytext());}case 43:break;case 2:{return (yytext());}case 44:break;case 4:{return (yytext());}case 45:break;case 24:{return ("\"");}case 46:break;case 23:{return ("$");}case 47:break;case 22:{return ("[");}case 48:break;case 21:{return ("(");}case 49:break;case 15:{return (")");}case 50:break;case 16:{return ("]");}case 51:break;case 17:{return ("%");}case 52:break;case 18:{return ("`");}case 53:break;default :if (yy_input == YYEOF && yy_startRead == yy_currentPos) {yy_atEOF=true;{return (null);}} else {yy_ScanError(YY_NO_MATCH);}}}}  }
class C{  @Override protected boolean canBePrimary(){  return true;}  }
class C{  public boolean isOneTimeFeeDisabled(){  boolean flag=false;  int page=getCurrentPMPage();  if (page == PRICEMODEL_FOR_SUBSCRIPTION) {    flag=true;  }  return flag;}  }
class C{  public static String convertDateToStartTimeString(final Date date){  final String startTimeString=START_TIME_FORMATTER.format(date);  return startTimeString;}  }
class C{  @Override public int size(){  return _size;}  }
class C{  @Override public boolean contains(O object){  return firstResultSet.contains(object) && !secondResultSet.contains(object);}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  private XStringForFSB(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_CANNOT_TAKE_STRING,null));}  }
class C{  public static void main(String... args) throws Exception {  new CachedPreparedStatements().run();}  }
class C{  protected static <O>void initializeDistanceMatrix(double[] scratch,DistanceQuery<O> dq,DBIDArrayIter ix,DBIDArrayIter iy,boolean square){  int pos=0;  for (ix.seek(0); ix.valid(); ix.advance()) {    for (iy.seek(0); iy.getOffset() < ix.getOffset(); iy.advance()) {      double dist=dq.distance(ix,iy);      dist=square ? (dist * dist) : dist;      scratch[pos]=dist;      pos++;    }  }}  }
class C{  @Field(40) public __VARIANT_NAME_3_union puiVal(Pointer<Short> puiVal){  this.io.setPointerField(this,40,puiVal);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void startServer() throws Exception {  final InputStream stream=ServiceTest.class.getResourceAsStream("gremlin-server.yaml");  this.server=new GremlinServer(Settings.read(stream));  server.start().join();}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean parseUnknownField(final CodedInputByteBufferNano input,final int tag) throws IOException {  return input.skipField(tag);}  }
class C{  static <T extends HasAltId>String generateAltId(Collection<T> properties){  Set<String> altIds=new HashSet<String>();  for (  T property : properties) {    String altId=property.getAltId();    if (altId != null) {      altIds.add(altId);    }  }  int altId=1;  while (altIds.contains(Integer.toString(altId))) {    altId++;  }  return Integer.toString(altId);}  }
class C{  public static void writeTexture(ETC1Texture texture,OutputStream output) throws IOException {  ByteBuffer dataBuffer=texture.getData();  int originalPosition=dataBuffer.position();  try {    int width=texture.getWidth();    int height=texture.getHeight();    ByteBuffer header=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.nativeOrder());    ETC1.formatHeader(header,width,height);    byte[] ioBuffer=new byte[4096];    header.get(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE);    output.write(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE);    int encodedSize=ETC1.getEncodedDataSize(width,height);    for (int i=0; i < encodedSize; ) {      int chunkSize=Math.min(ioBuffer.length,encodedSize - i);      dataBuffer.get(ioBuffer,0,chunkSize);      output.write(ioBuffer,0,chunkSize);      i+=chunkSize;    }  }  finally {    dataBuffer.position(originalPosition);  }}  }
class C{  private ExchangeRateManager(){  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress");  addKnownRates();}  }
class C{  public double evaluateModelOnceAndRecordPrediction(Classifier classifier,Instance instance) throws Exception {  return evaluationForSingleInstance(classifier,instance,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case SRuntimePackage.EXECUTION_CONTEXT:{      ExecutionContext executionContext=(ExecutionContext)theEObject;      T result=caseExecutionContext(executionContext);      if (result == null)       result=caseCompositeSlot(executionContext);      if (result == null)       result=caseExecutionSlot(executionContext);      if (result == null)       result=caseNamedElement(executionContext);      if (result == null)       result=defaultCase(theEObject);      return result;    }case SRuntimePackage.EXECUTION_EVENT:{    ExecutionEvent executionEvent=(ExecutionEvent)theEObject;    T result=caseExecutionEvent(executionEvent);    if (result == null)     result=caseExecutionSlot(executionEvent);    if (result == null)     result=caseNamedElement(executionEvent);    if (result == null)     result=defaultCase(theEObject);    return result;  }case SRuntimePackage.EXECUTION_SLOT:{  ExecutionSlot executionSlot=(ExecutionSlot)theEObject;  T result=caseExecutionSlot(executionSlot);  if (result == null)   result=caseNamedElement(executionSlot);  if (result == null)   result=defaultCase(theEObject);  return result;}case SRuntimePackage.EXECUTION_VARIABLE:{ExecutionVariable executionVariable=(ExecutionVariable)theEObject;T result=caseExecutionVariable(executionVariable);if (result == null) result=caseExecutionSlot(executionVariable);if (result == null) result=caseNamedElement(executionVariable);if (result == null) result=defaultCase(theEObject);return result;}case SRuntimePackage.COMPOSITE_SLOT:{CompositeSlot compositeSlot=(CompositeSlot)theEObject;T result=caseCompositeSlot(compositeSlot);if (result == null) result=caseExecutionSlot(compositeSlot);if (result == null) result=caseNamedElement(compositeSlot);if (result == null) result=defaultCase(theEObject);return result;}case SRuntimePackage.REFERENCE_SLOT:{ReferenceSlot referenceSlot=(ReferenceSlot)theEObject;T result=caseReferenceSlot(referenceSlot);if (result == null) result=caseCompositeSlot(referenceSlot);if (result == null) result=caseExecutionSlot(referenceSlot);if (result == null) result=caseNamedElement(referenceSlot);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public static String convertToBitcoinURI(String address,@Nullable BigInteger amount,@Nullable String label,@Nullable String message){  checkNotNull(address);  if (amount != null && amount.compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("Amount must be positive");  }  StringBuilder builder=new StringBuilder();  builder.append(BITCOIN_SCHEME).append(":").append(address);  boolean questionMarkHasBeenOutput=false;  if (amount != null) {    builder.append(QUESTION_MARK_SEPARATOR).append(FIELD_AMOUNT).append("=");    builder.append(Utils.bitcoinValueToPlainString(amount));    questionMarkHasBeenOutput=true;  }  if (label != null && !"".equals(label)) {    if (questionMarkHasBeenOutput) {      builder.append(AMPERSAND_SEPARATOR);    } else {      builder.append(QUESTION_MARK_SEPARATOR);      questionMarkHasBeenOutput=true;    }    builder.append(FIELD_LABEL).append("=").append(encodeURLString(label));  }  if (message != null && !"".equals(message)) {    if (questionMarkHasBeenOutput) {      builder.append(AMPERSAND_SEPARATOR);    } else {      builder.append(QUESTION_MARK_SEPARATOR);    }    builder.append(FIELD_MESSAGE).append("=").append(encodeURLString(message));  }  return builder.toString();}  }
class C{  public static Request createSendRequest(String username,TransportAddress peerAddress,byte[] data){  Request sendRequest=new Request();  try {    sendRequest.setMessageType(Message.SEND_REQUEST);    sendRequest.putAttribute(AttributeFactory.createMagicCookieAttribute());    sendRequest.putAttribute(AttributeFactory.createUsernameAttribute(username));    DestinationAddressAttribute peerAddressAttribute=AttributeFactory.createDestinationAddressAttribute(peerAddress);    sendRequest.putAttribute(peerAddressAttribute);    if (data != null && data.length > 0) {      DataAttribute dataAttribute=AttributeFactory.createDataAttributeWithoutPadding(data);      sendRequest.putAttribute(dataAttribute);    }  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return sendRequest;}  }
class C{  private void importNotes() throws CommandException {  List<ZielobjektTypeResult> allZielobjekte=getGstoolDao().findZielobjektTypAll();  int n=allZielobjekte.size();  int i=0;  monitor.beginTask("Importiere Notizen",n);  for (  ZielobjektTypeResult zielobjekt : allZielobjekte) {    String name=zielobjekt.zielobjekt.getName();    monitor.worked(1);    i++;    monitor.subTask(i + "/" + n+ " - Zielobjekt: "+ name);    List<NotizenMassnahmeResult> notesResults=getGstoolDao().findNotizenForZielobjekt(name);    Map<MbBaust,List<NotizenMassnahmeResult>> notizenMap=transferData.convertZielobjektNotizenMap(notesResults);    ImportNotesForZielobjekt command=new ImportNotesForZielobjekt(name,notizenMap);    command=ServiceFactory.lookupCommandService().executeCommand(command);  }}  }
class C{  private static void fixDuplicateMSCAPIAliases(KeyStore keyStore){  try {    Field keyStoreSpiField=keyStore.getClass().getDeclaredField("keyStoreSpi");    keyStoreSpiField.setAccessible(true);    KeyStoreSpi keyStoreSpi=(KeyStoreSpi)keyStoreSpiField.get(keyStore);    Field entriesField=keyStoreSpi.getClass().getEnclosingClass().getDeclaredField("entries");    entriesField.setAccessible(true);    Collection<?> entries=(Collection<?>)entriesField.get(keyStoreSpi);    Map<String,Object> aliases=new HashMap<String,Object>();    for (    Object entry : entries) {      Field aliasField=entry.getClass().getDeclaredField("alias");      aliasField.setAccessible(true);      String alias=(String)aliasField.get(entry);      if (aliases.containsKey(alias.toLowerCase())) {        addCertHashPostfix(aliases.get(alias.toLowerCase()));        addCertHashPostfix(entry);      } else {        aliases.put(alias.toLowerCase(),entry);      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static Result runJUnitTests(Class<?> testClass){  Result results=org.junit.runner.JUnitCore.runClasses(testClass);  for (  Failure failure : results.getFailures()) {    System.err.println("FAILURE!!!");    System.err.println("FAILURE!!! Test: " + failure.toString());    System.err.println("FAILURE!!! Message: " + failure.getMessage());    System.err.println("FAILURE!!! Exception: ");    failure.getException().printStackTrace();    System.err.println("FAILURE!!!");  }  return results;}  }
class C{  public TIntDoubleHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void resetAxisMaxValue(){  mCustomAxisMax=Float.NaN;}  }
class C{  public double overlapRadiusDegree(SphereCluster other){  double[] center0=getCenter();  double radius0=getRadius();  double[] center1=other.getCenter();  double radius1=other.getRadius();  double radiusBig;  double radiusSmall;  if (radius0 < radius1) {    radiusBig=radius1;    radiusSmall=radius0;  } else {    radiusBig=radius0;    radiusSmall=radius1;  }  double dist=0;  for (int i=0; i < center0.length; i++) {    double delta=center0[i] - center1[i];    dist+=delta * delta;  }  dist=Math.sqrt(dist);  if (dist > radiusSmall + radiusBig)   return 0;  if (dist + radiusSmall <= radiusBig) {    return 1;  } else {    return (radiusSmall + radiusBig - dist) / (2 * radiusSmall);  }}  }
class C{  public T removeFirst(){  T o=_head;  T n=(T)o.getNext();  o.setNext(null);  if (null != n) {    n.setPrevious(null);  }  _head=n;  if (--_size == 0) {    _tail=null;  }  return o;}  }
class C{  public Organization(int id,String name){  this.id=id;  this.name=name;}  }
class C{  private boolean isSilentStart(String value){  boolean result=false;  for (  String element : SILENT_START) {    if (value.startsWith(element)) {      result=true;      break;    }  }  return result;}  }
class C{  public GitHubPullRequestList createPullRequestsList(PagedIterable<GHPullRequest> ghPullRequestsList) throws IOException {  GitHubPullRequestList gitHubPullRequestList=DtoFactory.getInstance().createDto(GitHubPullRequestList.class);  List<GitHubPullRequest> dtoPullRequestsList=new ArrayList<>();  for (  GHPullRequest ghPullRequest : ghPullRequestsList) {    dtoPullRequestsList.add(createPullRequest(ghPullRequest));  }  gitHubPullRequestList.setPullRequests(dtoPullRequestsList);  return gitHubPullRequestList;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static PlusMult plusMult(final double constant){  return new PlusMult(constant);}  }
class C{  @SuppressWarnings("unchecked") @Override public void dispose(){  if (executor != null) {    executor.shutdown();    executor=null;  }  if (disposables != null) {    for (    Disposable d : (LinkedList<Disposable>)disposables.clone()) {      d.dispose();    }    disposables=null;  }  removeAll();}  }
class C{  static IntersectionImpl heapifyInstance(Memory srcMem,long seed){  int preLongs=CONST_PREAMBLE_LONGS;  long[] preArr=new long[preLongs];  srcMem.getLongArray(0,preArr,0,preLongs);  long pre0=preArr[0];  int preambleLongs=extractPreLongs(pre0);  if (preambleLongs != CONST_PREAMBLE_LONGS) {    throw new SketchesArgumentException("PreambleLongs must equal " + CONST_PREAMBLE_LONGS);  }  int serVer=extractSerVer(pre0);  if (serVer != SER_VER) {    throw new SketchesArgumentException("Ser Version must equal " + SER_VER);  }  int famID=extractFamilyID(pre0);  Family.INTERSECTION.checkFamilyID(famID);  short seedHash=computeSeedHash(seed);  short seedHashMem=(short)extractSeedHash(pre0);  Util.checkSeedHashes(seedHashMem,seedHash);  IntersectionImpl impl=new IntersectionImpl(seedHash);  impl.lgArrLongs_=extractLgArrLongs(pre0);  int flags=extractFlags(pre0);  impl.empty_=(flags & EMPTY_FLAG_MASK) > 0;  impl.curCount_=srcMem.getInt(RETAINED_ENTRIES_INT);  impl.thetaLong_=srcMem.getLong(THETA_LONG);  if (impl.empty_) {    if (impl.curCount_ != 0) {      throw new SketchesArgumentException("srcMem empty state inconsistent with curCount: " + impl.empty_ + ","+ impl.curCount_);    }  } else {    if (impl.curCount_ > 0) {      impl.hashTable_=new long[1 << impl.lgArrLongs_];      srcMem.getLongArray(CONST_PREAMBLE_LONGS << 3,impl.hashTable_,0,1 << impl.lgArrLongs_);    }  }  impl.mem_=null;  return impl;}  }
class C{  public final void removeVetoableChangeListener(VetoableChangeListener listener){  vcs.removeVetoableChangeListener(listener);}  }
class C{  public LocalProcessLauncher(final File pidFile,final boolean force) throws FileAlreadyExistsException, IOException, PidUnavailableException {  this.pid=ProcessUtils.identifyPid();  this.pidFile=pidFile;  writePid(force);}  }
class C{  protected void adjustInwards(){  int lower=0;  int upper=this.labels.size() - 1;  while (upper > lower) {    if (lower < upper - 1) {      PieLabelRecord r0=getPieLabelRecord(lower);      PieLabelRecord r1=getPieLabelRecord(lower + 1);      if (r1.getLowerY() < r0.getUpperY()) {        double adjust=r0.getUpperY() - r1.getLowerY() + this.minGap;        r1.setAllocatedY(r1.getAllocatedY() + adjust);      }    }    PieLabelRecord r2=getPieLabelRecord(upper - 1);    PieLabelRecord r3=getPieLabelRecord(upper);    if (r2.getUpperY() > r3.getLowerY()) {      double adjust=(r2.getUpperY() - r3.getLowerY()) + this.minGap;      r3.setAllocatedY(r3.getAllocatedY() + adjust);    }    lower++;    upper--;  }}  }
class C{  public static float floatPow(float f,int i){  float g=1;  for (; i > 0; i--) {    g*=f;  }  return g;}  }
class C{  protected void tearDown(){  TestField.pubfield1=0;  TestField.privfield1=123;  TestField.intSField=Integer.MAX_VALUE;  TestField.shortSField=Short.MAX_VALUE;  TestField.booleanSField=true;  TestField.byteSField=Byte.MAX_VALUE;  TestField.longSField=Long.MAX_VALUE;  TestField.doubleSField=Double.MAX_VALUE;  TestField.floatSField=Float.MAX_VALUE;  TestField.charSField='T';  TestField.prsttrvol=99;}  }
class C{  public int randomIndex(double[] probs){  double r=nextDouble();  double sum=0.0d;  for (int i=0; i < probs.length; i++) {    sum+=probs[i];    if (r < sum) {      return i;    }  }  return probs.length - 1;}  }
class C{  public void minimize(){  Out.print(numStates + " states before minimization, ");  if (numStates == 0) {    Out.error(ErrorMessages.ZERO_STATES);    throw new GeneratorException();  }  if (Options.no_minimize) {    Out.println("minimization skipped.");    return;  }  final int n=numStates + 1;  int[] block=new int[2 * n];  int[] b_forward=new int[2 * n];  int[] b_backward=new int[2 * n];  int lastBlock=n;  final int b0=n;  int[] l_forward=new int[n * numInput + 1];  int[] l_backward=new int[n * numInput + 1];  int anchorL=n * numInput;  int[][] inv_delta=new int[n][numInput];  int[] inv_delta_set=new int[2 * n * numInput];  int[] twin=new int[2 * n];  int numSplit;  int[] SD=new int[2 * n];  int[] D=new int[n];  int numD;  int lastDelta=0;  int[] inv_lists=new int[n];  int[] inv_list_last=new int[n];  for (int c=0; c < numInput; c++) {    for (int s=0; s < n; s++) {      inv_list_last[s]=-1;      inv_delta[s][c]=-1;    }    inv_delta[0][c]=0;    inv_list_last[0]=0;    for (int s=1; s < n; s++) {      int t=table[s - 1][c] + 1;      if (inv_list_last[t] == -1) {        inv_delta[t][c]=s;        inv_list_last[t]=s;      } else {        inv_lists[inv_list_last[t]]=s;        inv_list_last[t]=s;      }    }    for (int s=0; s < n; s++) {      int i=inv_delta[s][c];      inv_delta[s][c]=lastDelta;      int j=inv_list_last[s];      boolean go_on=(i != -1);      while (go_on) {        go_on=(i != j);        inv_delta_set[lastDelta++]=i;        i=inv_lists[i];      }      inv_delta_set[lastDelta++]=-1;    }  }  b_forward[b0]=0;  b_backward[b0]=0;  b_forward[0]=b0;  b_backward[0]=b0;  block[0]=b0;  block[b0]=1;  for (int s=1; s < n; s++) {    int b=b0 + 1;    boolean found=false;    while (!found && b <= lastBlock) {      int t=b_forward[b];      if (isFinal[s - 1]) {        found=isFinal[t - 1] && action[s - 1].isEquiv(action[t - 1]);      } else {        found=!isFinal[t - 1];      }      if (found) {        block[s]=b;        block[b]++;        int last=b_backward[b];        b_forward[last]=s;        b_forward[s]=b;        b_backward[b]=s;        b_backward[s]=last;      }      b++;    }    if (!found) {      block[s]=b;      block[b]++;      b_forward[b]=s;      b_forward[s]=b;      b_backward[b]=s;      b_backward[s]=b;      lastBlock++;    }  }  int B_max=b0;  int B_i;  for (B_i=b0 + 1; B_i <= lastBlock; B_i++)   if (block[B_max] < block[B_i])   B_max=B_i;  l_forward[anchorL]=anchorL;  l_backward[anchorL]=anchorL;  if (B_max == b0)   B_i=b0 + 1; else   B_i=b0;  int index=(B_i - b0) * numInput;  while (index < (B_i + 1 - b0) * numInput) {    int last=l_backward[anchorL];    l_forward[last]=index;    l_forward[index]=anchorL;    l_backward[index]=last;    l_backward[anchorL]=index;    index++;  }  while (B_i <= lastBlock) {    if (B_i != B_max) {      index=(B_i - b0) * numInput;      while (index < (B_i + 1 - b0) * numInput) {        int last=l_backward[anchorL];        l_forward[last]=index;        l_forward[index]=anchorL;        l_backward[index]=last;        l_backward[anchorL]=index;        index++;      }    }    B_i++;  }  while (l_forward[anchorL] != anchorL) {    int B_j_a=l_forward[anchorL];    l_forward[anchorL]=l_forward[B_j_a];    l_backward[l_forward[anchorL]]=anchorL;    l_forward[B_j_a]=0;    int B_j=b0 + B_j_a / numInput;    int a=B_j_a % numInput;    numD=0;    int s=b_forward[B_j];    while (s != B_j) {      int t=inv_delta[s][a];      while (inv_delta_set[t] != -1) {        D[numD++]=inv_delta_set[t++];      }      s=b_forward[s];    }    numSplit=0;    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      SD[B_i]=-1;      twin[B_i]=0;    }    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      if (SD[B_i] < 0) {        SD[B_i]=0;        int t=b_forward[B_i];        while (t != B_i && (t != 0 || block[0] == B_j) && (t == 0 || block[table[t - 1][a] + 1] == B_j)) {          SD[B_i]++;          t=b_forward[t];        }      }    }    for (int indexD=0; indexD < numD; indexD++) {      s=D[indexD];      B_i=block[s];      if (SD[B_i] != block[B_i]) {        int B_k=twin[B_i];        if (B_k == 0) {          B_k=++lastBlock;          b_forward[B_k]=B_k;          b_backward[B_k]=B_k;          twin[B_i]=B_k;          twin[numSplit++]=B_i;        }        b_forward[b_backward[s]]=b_forward[s];        b_backward[b_forward[s]]=b_backward[s];        int last=b_backward[B_k];        b_forward[last]=s;        b_forward[s]=B_k;        b_backward[s]=last;        b_backward[B_k]=s;        block[s]=B_k;        block[B_k]++;        block[B_i]--;        SD[B_i]--;      }    }    for (int indexTwin=0; indexTwin < numSplit; indexTwin++) {      B_i=twin[indexTwin];      int B_k=twin[B_i];      for (int c=0; c < numInput; c++) {        int B_i_c=(B_i - b0) * numInput + c;        int B_k_c=(B_k - b0) * numInput + c;        if (l_forward[B_i_c] > 0) {          int last=l_backward[anchorL];          l_backward[anchorL]=B_k_c;          l_forward[last]=B_k_c;          l_backward[B_k_c]=last;          l_forward[B_k_c]=anchorL;        } else {          if (block[B_i] <= block[B_k]) {            int last=l_backward[anchorL];            l_backward[anchorL]=B_i_c;            l_forward[last]=B_i_c;            l_backward[B_i_c]=last;            l_forward[B_i_c]=anchorL;          } else {            int last=l_backward[anchorL];            l_backward[anchorL]=B_k_c;            l_forward[last]=B_k_c;            l_backward[B_k_c]=last;            l_forward[B_k_c]=anchorL;          }        }      }    }  }  int trans[]=new int[numStates];  boolean kill[]=new boolean[numStates];  int move[]=new int[numStates];  for (int b=b0 + 1; b <= lastBlock; b++) {    int s=b_forward[b];    int min_s=s;    for (; s != b; s=b_forward[s])     if (min_s > s)     min_s=s;    min_s--;    for (s=b_forward[b] - 1; s != b - 1; s=b_forward[s + 1] - 1) {      trans[s]=min_s;      kill[s]=s != min_s;    }  }  int amount=0;  for (int i=0; i < numStates; i++) {    if (kill[i])     amount++; else     move[i]=amount;  }  int i, j;  for (i=0, j=0; i < numStates; i++) {    if (!kill[i]) {      for (int c=0; c < numInput; c++) {        if (table[i][c] >= 0) {          table[j][c]=trans[table[i][c]];          table[j][c]-=move[table[j][c]];        } else {          table[j][c]=table[i][c];        }      }      isFinal[j]=isFinal[i];      action[j]=action[i];      j++;    }  }  numStates=j;  for (i=0; i < entryState.length; i++) {    entryState[i]=trans[entryState[i]];    entryState[i]-=move[entryState[i]];  }  Out.println(numStates + " states in minimized DFA");}  }
class C{  public boolean isAllow_Info_Invoice(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Invoice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SmellSource(final double[] distalstim,final DecayFunction decay,final double disp,final boolean addNoise,final double noiseLevel){  this.stimulusVector=distalstim;  this.decayFunction=decay;  this.stimulusDispersion=disp;  this.addNoise=addNoise;  this.noiseLevel=noiseLevel;}  }
class C{  public void pickStartPlayer(int startPlayerIndex){  int playerCount=getPlayerCount();  for (int i=0; i < playerCount; i++) {    Player p=players.get(i);    p.setSeat((i - startPlayerIndex + playerCount) % playerCount + 1);  }  sortPlayers();}  }
class C{  public IIOInvalidTreeException(String message,Node offendingNode){  super(message);  this.offendingNode=offendingNode;}  }
class C{  private static void vecSwap(final BigSwapper swapper,long from,long l,final long s){  for (int i=0; i < s; i++, from++, l++)   swapper.swap(from,l);}  }
class C{  public AddReferencesResponse AddReferences(RequestHeader RequestHeader,AddReferencesItem... ReferencesToAdd) throws ServiceFaultException, ServiceResultException {  AddReferencesRequest req=new AddReferencesRequest(RequestHeader,ReferencesToAdd);  return (AddReferencesResponse)channel.serviceRequest(req);}  }
class C{  public ISO8859_1Reader(InputStream is){  this.is=is;}  }
class C{  private RepositoryContent readRepository(URL repo,int redirectCount) throws RemoteRepositoryException {  try {    _log.debug("Repository URL is: " + repo.toString());    HttpURLConnection httpCon=prepareConnection(repo);    httpCon.setInstanceFollowRedirects(false);    httpCon.addRequestProperty("User-Agent","Mozilla");    if (SoftwareUpdate.isCatalogServer(repo)) {      writePostContent(httpCon,SoftwareUpdate.getCatalogPostContent(repo));    } else {      httpCon.connect();      _log.debug("The return code of the connection is: " + httpCon.getResponseCode());      if (httpCon.getResponseCode() == HttpURLConnection.HTTP_MOVED_PERM || httpCon.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) {        redirectCount++;        if (redirectCount > MAXIMUM_REDIRECT_ALLOWED) {          throw SyssvcException.syssvcExceptions.remoteRepoError("Too many redirects! Quit connection!");        }        URL forwardedTo=new URL(httpCon.getHeaderField("Location"));        _log.info("Connecting to URL " + repo.toString() + " redirected to "+ forwardedTo);        return readRepository(forwardedTo,redirectCount);      }    }    return new RepositoryContent(httpCon.getContentType(),httpCon.getInputStream(),repo);  } catch (  Exception e) {    throw SyssvcException.syssvcExceptions.remoteRepoError(MessageFormat.format("Failed to read repository {0} ({1})",_repo,e));  }}  }
class C{  public static void writeSetting(final AbstractSQLProvider provider,final INaviProject project,final String key,final String value) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02050: Provider argument can not be null");  Preconditions.checkNotNull(project,"IE00543: Project argument can not be null");  Preconditions.checkNotNull(key,"IE00544: Key argument can not be null");  Preconditions.checkNotNull(value,"IE02082: Value argument can not be null");  Preconditions.checkArgument(project.inSameDatabase(provider),"IE00545: Project is not part of this database");  writeSetting(provider.getConnection(),project.getConfiguration().getId(),key,value,CTableNames.PROJECT_SETTINGS_TABLE);}  }
class C{  protected void testExactCosine(ListParameterization inputparams,Class<?> expectKNNQuery,Class<?> expectRangeQuery){  inputparams.addParameter(FileBasedDatabaseConnection.Parameterizer.INPUT_ID,dataset);  Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,inputparams);  db.initialize();  Relation<DoubleVector> rep=db.getRelation(TypeUtil.DOUBLE_VECTOR_FIELD);  DistanceQuery<DoubleVector> dist=db.getDistanceQuery(rep,CosineDistanceFunction.STATIC);  assertTrue(rep.size() == shoulds);  if (expectKNNQuery != null) {    DoubleVector dv=DoubleVector.wrap(querypoint);    KNNQuery<DoubleVector> knnq=db.getKNNQuery(dist,k);    assertTrue("Returned knn query is not of expected class: expected " + expectKNNQuery + " got "+ knnq.getClass(),expectKNNQuery.isAssignableFrom(knnq.getClass()));    KNNList ids=knnq.getKNNForObject(dv,k);    assertEquals("Result size does not match expectation!",cosshouldd.length,ids.size());    int i=0;    for (DoubleDBIDListIter res=ids.iter(); res.valid(); res.advance(), i++) {      assertEquals("Expected distance doesn't match.",cosshouldd[i],res.doubleValue(),1e-15);      DoubleVector c=rep.get(res);      DoubleVector c2=DoubleVector.wrap(cosshouldc[i]);      assertEquals("Expected vector doesn't match: " + c.toString(),0.0,dist.distance(c,c2),1e-15);    }  }  if (expectRangeQuery != null) {    DoubleVector dv=DoubleVector.wrap(querypoint);    RangeQuery<DoubleVector> rangeq=db.getRangeQuery(dist,coseps);    assertTrue("Returned range query is not of expected class: expected " + expectRangeQuery + " got "+ rangeq.getClass(),expectRangeQuery.isAssignableFrom(rangeq.getClass()));    DoubleDBIDList ids=rangeq.getRangeForObject(dv,coseps);    assertEquals("Result size does not match expectation!",cosshouldd.length,ids.size());    int i=0;    for (DoubleDBIDListIter res=ids.iter(); res.valid(); res.advance(), i++) {      assertEquals("Expected distance doesn't match.",cosshouldd[i],res.doubleValue(),1e-15);      DoubleVector c=rep.get(res);      DoubleVector c2=DoubleVector.wrap(cosshouldc[i]);      assertEquals("Expected vector doesn't match: " + c.toString(),0.0,dist.distance(c,c2),1e-15);    }  }}  }
class C{  private void buildGui(){  final XToolBar toolBar=new XToolBar();  addNorth(toolBar);  toolBar.add(showCmdCheckBox);  toolBar.add(showSelectionDeltaCheckBox);  toolBar.add(showControlGroupUpdateCheckBox);  toolBar.add(showCameraUpdateCheckBox);  toolBar.add(showOtherEssentialsCheckBox);  toolBar.addSeparator();  toolBar.add(showOtherRestCheckBox);  toolBar.finalizeLayout();  addCenter(table.createWrapperBox(true,table.createToolBarParams(chartsComp)));}  }
class C{  public static Pair<ILogicalOperator,Set<LogicalVariable>> findOrCreatePrimaryKeyOpAndVariables(ILogicalOperator operator,boolean usedForCorrelationJoin,IOptimizationContext context) throws AlgebricksException {  computePrimaryKeys(operator,context);  Set<LogicalVariable> liveVars=new HashSet<>();  VariableUtilities.getSubplanLocalLiveVariables(operator,liveVars);  Set<LogicalVariable> primaryKeyVars=new HashSet<>();  Set<LogicalVariable> noKeyVars=new HashSet<>();  for (  LogicalVariable liveVar : liveVars) {    List<LogicalVariable> keyVars=context.findPrimaryKey(liveVar);    if (keyVars != null) {      keyVars.retainAll(liveVars);    }    if ((keyVars == null || keyVars.isEmpty())) {      noKeyVars.add(liveVar);    } else {      primaryKeyVars.addAll(keyVars);    }  }  primaryKeyVars.retainAll(liveVars);  if (primaryKeyVars.containsAll(noKeyVars)) {    return new Pair<ILogicalOperator,Set<LogicalVariable>>(operator,primaryKeyVars);  } else {    LogicalVariable assignVar=context.newVar();    ILogicalOperator assignOp=new AssignOperator(assignVar,new MutableObject<ILogicalExpression>(new StatefulFunctionCallExpression(FunctionUtil.getFunctionInfo(AsterixBuiltinFunctions.CREATE_QUERY_UID),null)));    OperatorPropertiesUtil.markMovable(assignOp,!usedForCorrelationJoin);    assignOp.getInputs().add(new MutableObject<ILogicalOperator>(operator));    context.addPrimaryKey(new FunctionalDependency(Collections.singletonList(assignVar),new ArrayList<LogicalVariable>(liveVars)));    context.computeAndSetTypeEnvironmentForOperator(assignOp);    return new Pair<ILogicalOperator,Set<LogicalVariable>>(assignOp,Collections.singleton(assignVar));  }}  }
class C{  public static String toBits(final long x,final int len){  if (len <= 0 || len > 64) {    throw new IllegalArgumentException("length out of range=" + len);  }  final StringBuilder sb=new StringBuilder();  final int left=64 - len;  long t=x << left;  for (int i=0; i < len; i++) {    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  public static void main(String[] args) throws Throwable {  MultipleWarningsTest test=new MultipleWarningsTest();  test.start();}  }
class C{  public VcfEvalParamsBuilder outputMode(final String modeName){  mOutputMode=modeName;  return self();}  }
class C{  @Override public void writeToNBT(NBTTagCompound nbt){  super.writeToNBT(nbt);  nbt.setInteger("safetyBanJing",safetyRange);  nbt.setInteger("alarmBanJing",alarmRange);  nbt.setBoolean("emitAll",emitAll);  nbt.setInteger("frequency",frequency);}  }
class C{  private void processDoublinCoreTags(String qName,String data,RSSObject o){  o.addDoublinCoreElement(qName.toLowerCase(),data);}  }
class C{  public void disableCamera(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  boolean camFunc=operation.isEnabled();  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  devicePolicyManager.setCameraDisabled(cdmDeviceAdmin,!camFunc);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Camera enabled: " + camFunc);  }}  }
class C{  public StripedCounters(final int batchSize){  this(SystemUtil.numProcessors() * 2,batchSize);}  }
class C{  static LogFile createLogFile(String name,long seqno) throws Exception {  File logfile=new File(name);  logfile.delete();  LogFile tf=new LogFile(logfile);  tf.create(seqno);  return tf;}  }
class C{  private void terminateAndWaitFsyncService() throws Exception {  if (fsyncService.isTerminated())   return;  fsyncService.shutdown();  fsyncService.awaitTermination(3600,TimeUnit.SECONDS);  Exception fsyncExceptionCopy=fsyncException;  if (fsyncExceptionCopy != null)   throw fsyncExceptionCopy;}  }
class C{  public static String saltString(byte[] salt){  return Base64.encodeToString(salt,BASE64_FLAGS);}  }
class C{  public void initForTestCase(){  data=new ArrayList<Byte>();  counter=new AtomicInteger(0);  endReached=false;  if (RuntimeSettings.mockSystemIn) {    System.setIn(this);  }}  }
class C{  public BlockIndex(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public boolean isItalic(){  return italic;}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  return parentEngine.client.onNavigationAttempt(url);}  }
class C{  static public String[] escape(String[] words){  for (int i=0; i < words.length; ++i) {    if (words[i].contains(CompiledPhraseTable.FIELD_DELIM)) {      words[i]=words[i].replace(CompiledPhraseTable.FIELD_DELIM,",");    }  }  return words;}  }
class C{  public InstanceManager(AppMessage message) throws RemoteException, AlreadyBoundException {  m_registry=LocateRegistry.createRegistry(Registry.REGISTRY_PORT);  m_message=message;  AppMessage stub=(AppMessage)UnicastRemoteObject.exportObject(m_message,0);  m_registry.bind("AppMessage",stub);}  }
class C{  public static void addMaterialization(Materialization materialization){  MaterializerRecipes.instance().materialize(materialization);}  }
class C{  @Override public boolean isCallPermitted(){  return stateReference.get().isCallPermitted();}  }
class C{  public double distance(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public void testSingleMultiPolygonNoHoleRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  checkRoundTrip(pt);}  }
class C{  @Override public void removeTableModelListener(TableModelListener l){  m_Listeners.remove(l);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenodenomodificationallowederrEE.class,args);}  }
class C{  @DSComment("potential callback called inside method") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:53.004 -0500",hash_original_method="08C00AEC5C2F4A8557AFE56DD5038FAA",hash_generated_method="F6900602A78D362DC13AF520AEF4FB59") @Deprecated public void unregisterListener(SensorListener listener,int sensors){  unregisterLegacyListener(SENSOR_ACCELEROMETER,Sensor.TYPE_ACCELEROMETER,listener,sensors);  unregisterLegacyListener(SENSOR_MAGNETIC_FIELD,Sensor.TYPE_MAGNETIC_FIELD,listener,sensors);  unregisterLegacyListener(SENSOR_ORIENTATION_RAW,Sensor.TYPE_ORIENTATION,listener,sensors);  unregisterLegacyListener(SENSOR_ORIENTATION,Sensor.TYPE_ORIENTATION,listener,sensors);  unregisterLegacyListener(SENSOR_TEMPERATURE,Sensor.TYPE_TEMPERATURE,listener,sensors);}  }
class C{  protected SourceLibrary newSourceLibrary(AbstractClassLibrary parentLibrary){  return new SourceLibrary(parentLibrary);}  }
class C{  public static void sendMessage(Context context,String sendNo,String sendContent){  Uri uri=Uri.parse("smsto:" + sendNo);  Intent intent=new Intent(Intent.ACTION_SENDTO,uri);  intent.putExtra("sms_body",sendContent);  context.startActivity(intent);}  }
class C{  public synchronized void addReference(){  ensureValid();  mRefCount++;}  }
class C{  private static void handle(ExecutionException ex){  Throwable cause=ex.getCause();  if (cause instanceof OperationCancelledException) {    return;  }  if (cause instanceof CancelException) {    throw new FutureCancelledException(LocalizedStrings.AdminDistributedSystemImpl_FUTURE_CANCELLED_DUE_TO_SHUTDOWN.toLocalizedString(),ex);  }  throw new RuntimeAdminException(LocalizedStrings.AdminDistributedSystemImpl_WHILE_WAITING_FOR_FUTURE.toLocalizedString(),ex);}  }
class C{  static public double normalize(double rawScore,double totalRawScore){  if (totalRawScore == 0d) {    return 0d;  }  return rawScore / totalRawScore;}  }
class C{  public void addParser(Parser parser){  if (parserManager == null) {    parserManager=new ParserManager(this);  }  parserManager.addParser(parser);}  }
class C{  public static void saveLongToPreference(Context context,String key,long value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (Long.MIN_VALUE == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putLong(key,value).apply();  }}  }
class C{  public void configure(){  this.getSystemConnectionMemo().getTrafficController().connectPort(this);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.bachrus.ActiveFlag.setActive();}  }
class C{  public static byte[] base64Decode(String content) throws UtilException {  try {    return Base64.decodeBase64(content.getBytes(GlobalConstants.DEFAULT_CHARSET));  } catch (  UnsupportedEncodingException e) {    throw new UtilException(ErrorCodeDef.BASE64_ERROR_10037,e);  }}  }
class C{  public void applyStageChart(){  PieChart chart=(PieChart)mItemView.findViewById(R.id.statisticsChart);  mStatisticsLogic.fillChart(chart,StatisticType.TYPE_STAGE);}  }
class C{  private static void initializeSignatures(PsiClass clazz,PsiSubstitutor substitutor,Map<MethodSignature,PsiMethod> signatures,Set<PsiClass> classes){  if (clazz.isInterface())   return;  if (classes.add(clazz)) {    final List<PsiMethod> methods;    if (clazz instanceof GrTypeDefinition) {      methods=new ArrayList<PsiMethod>();      GrClassImplUtil.collectMethodsFromBody((GrTypeDefinition)clazz,methods);    } else {      methods=Arrays.asList(clazz.getMethods());    }    for (    PsiMethod method : methods) {      addMethodChecked(signatures,method,substitutor,null);    }    for (    PsiClassType type : getSuperTypes(clazz)) {      final PsiClassType.ClassResolveResult result=type.resolveGenerics();      final PsiClass superClass=result.getElement();      if (superClass == null)       continue;      final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,clazz,substitutor);      initializeSignatures(superClass,superClassSubstitutor,signatures,classes);    }  }}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  return 1 - PearsonCorrelation.weightedCoefficient(v1,v2,weights);}  }
class C{  public SortableAndSearchableTable(TableModel dm){  super(dm);}  }
class C{  public ProgressBarIndeterminateState(){  super("Indeterminate");}  }
class C{  public static Builder create(int depthLimit){  return new Builder(depthLimit);}  }
class C{  boolean defineChar2StringMapping(String outputString,char inputChar){  CharKey character=new CharKey(inputChar);  m_charToString.put(character,outputString);  set(inputChar);  boolean extraMapping=extraEntity(outputString,inputChar);  return extraMapping;}  }
class C{  public final void add(PaneItem item){  PANE_ITEMS_LIST.add(item);  CONTAINER.add(item.getContainer());}  }
class C{  @Override public void handlePut(Operation put){  if (!put.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_POST_TO_PUT)) {    put.fail(new IllegalStateException("PUT not supported for SynchronizationTaskService"));    return;  }  State task=getState(put);  TaskState.TaskStage currentStage=task.taskInfo.stage;  SubStage currentSubStage=task.subStage;  State body=validatePutRequest(task,put);  if (body == null) {    return;  }  boolean startStateMachine=false;switch (task.taskInfo.stage) {case CREATED:    startStateMachine=true;  break;case STARTED:logInfo("Restarting SynchronizationTask");task.subStage=SubStage.RESTART;break;case FAILED:case CANCELLED:case FINISHED:startStateMachine=true;break;default :break;}task.membershipUpdateTimeMicros=body.membershipUpdateTimeMicros;task.queryResultLimit=body.queryResultLimit;if (startStateMachine) {task.taskInfo.stage=TaskState.TaskStage.STARTED;task.subStage=SubStage.QUERY;}if (this.isDetailedLoggingEnabled) {logInfo("Transitioning task from %s-%s to %s-%s. Time %d",currentStage,currentSubStage,task.taskInfo.stage,task.subStage,task.membershipUpdateTimeMicros);}if (startStateMachine) {setFactoryAvailability(task,false,null,put);} else {put.complete();}}  }
class C{  public void stopMasking(){  this.stop=false;}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public void activate(){  if (isEnabled_) {    if (targetCallback != null & invocation != null) {      try {        invocation.invoke(targetCallback,this);      } catch (      IllegalArgumentException e) {        e.printStackTrace();      }catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      InvocationTargetException e) {        e.printStackTrace();      }    }  }}  }
class C{  public void accountOutput(StatementMetricHandle handle,int numIStream,int numRStream){  StatementMetricArray array=groupMetrics[handle.getGroupNum()];  array.getRwLock().acquireReadLock();  try {    StatementMetric metric=array.getAddMetric(handle.getIndex());    metric.addNumOutputIStream(numIStream);    metric.addNumOutputRStream(numRStream);  }  finally {    array.getRwLock().releaseReadLock();  }}  }
class C{  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {  if (!(privateKey instanceof java.security.interfaces.DSAPrivateKey)) {    throw new InvalidKeyException("not a DSA private key: " + privateKey);  }  java.security.interfaces.DSAPrivateKey priv=(java.security.interfaces.DSAPrivateKey)privateKey;  DSAParams params=priv.getParams();  if (params == null) {    throw new InvalidKeyException("DSA private key lacks parameters");  }  if (md.getAlgorithm() != "NullDigest20") {    checkKey(params,md.getDigestLength() * 8,md.getAlgorithm());  }  this.params=params;  this.presetX=priv.getX();  this.presetY=null;  this.presetP=params.getP();  this.presetQ=params.getQ();  this.presetG=params.getG();  this.md.reset();}  }
class C{  public static String nodeListToString(List<? extends Node> list){  StringBuffer buf=new StringBuffer();  buf.append("{");  if (list.size() > 0) {    buf.append("\n  0 : [" + domToString(list.get(0)) + "]");    for (int i=1; i < list.size(); ++i) {      buf.append("\n  " + i + " : ["+ domToString(list.get(0))+ "]");    }    buf.append("\n");  }  buf.append("}");  return buf.toString();}  }
class C{  public static <T>T newDto(Class<T> dtoInterface){  return getInstance().createDto(dtoInterface);}  }
class C{  public static void saveRegistrations(DataOutput out) throws IOException {  for (  Instantiator inst : InternalInstantiator.getInstantiators()) {    out.writeInt(inst.getId());    DataSerializer.writeClass(inst.getClass(),out);    DataSerializer.writeClass(inst.getInstantiatedClass(),out);  }  out.writeInt(0);}  }
class C{  private void readHeader() throws IOException {  _leis.readByte();  _leis.readByte();  _leis.readByte();  _leis.readByte();  _rowCount=_leis.readLEInt();  _headerLength=_leis.readLEShort();  _leis.readLEShort();  _columnCount=(_headerLength - 32 - 1) / 32;  _leis.skipBytes(20);}  }
class C{  public static <T>T withObjectInputStream(Path path,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectInputStream(path),closure);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.552 -0500",hash_original_method="DAD8B3BB967F6D568CBDEF14E7D7FC31",hash_generated_method="9B11EFCAF424D0D01AAEA8CED2C46F16") protected final void sendMessageAtFrontOfQueue(Message msg){  mSmHandler.sendMessageAtFrontOfQueue(msg);}  }
class C{  public boolean forEach(TIntProcedure procedure){  byte[] states=_states;  int[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public static void escapeXml(Writer writer,String str) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (str == null) {    return;  }  EntitiesUtils.XML.escape(writer,str);}  }
class C{  public static long copy(final InputStream source,final OutputStream dest,final long count) throws IOException {  assert count < 0 || count > 0 : "precondition violated: count == " + count + " (nothing to copy)";  if (count == 0) {    return 0;  }  final byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  int chunkSize=(int)((count > 0) ? Math.min(count,DEFAULT_BUFFER_SIZE) : DEFAULT_BUFFER_SIZE);  int c;  long total=0;  while ((c=source.read(buffer,0,chunkSize)) > 0) {    dest.write(buffer,0,c);    dest.flush();    total+=c;    if (count > 0 && count == total) {      break;    }  }  dest.flush();  return total;}  }
class C{  public ModelBuilder namedGraph(Resource namedGraph){  this.currentSubject=null;  this.currentNamedGraph=namedGraph;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:52.993 -0500",hash_original_method="CA10DA2A107C571495F28D1A1A335E4D",hash_generated_method="39A71066D52410B1B2BC40D185752AD1") @Deprecated @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public boolean registerListener(SensorListener listener,int sensors){  return registerListener(listener,sensors,SENSOR_DELAY_NORMAL);}  }
class C{  public SecurityCredentialsBasicProvider(SecurityCredentials cred){  this.cred=cred;}  }
class C{  public <T>List<T> search(Properties properties,String baseDN,String filter,ILdapResultMapper<T> mapper,boolean checkAttribute) throws NamingException {  if ("invalid".equals(properties.getProperty(Context.PROVIDER_URL))) {    throw new NamingException("Invalid URL.");  }  List<T> list=new ArrayList<T>();  T t;  String[] attrIds=mapper.getAttributes();  if (filter.endsWith("*")) {    t=mapper.map(getValues(attrIds,0));    list.add(t);    t=mapper.map(getValues(attrIds,1));    list.add(t);    t=mapper.map(getValues(attrIds,2));    list.add(t);  } else   if (filter.endsWith(allValues[0][0])) {    t=mapper.map(getValues(attrIds,0));    list.add(t);  } else   if (filter.endsWith(allValues[1][0])) {    t=mapper.map(getValues(attrIds,1));    list.add(t);  } else   if (filter.endsWith(allValues[2][0])) {    t=mapper.map(getValues(attrIds,2));    list.add(t);  }  return list;}  }
class C{  public static int[] subArray(final int[] input,final int start,final int end){  int[] result=new int[end - start];  System.arraycopy(input,start,result,0,end - start);  return result;}  }
class C{  public CycleFilterThreshold(){  super(Options.set,"Cycle Filter Threshold","Trigger cycle buffer filtering if the space available falls below this threshold",512);}  }
class C{  public static Block registerPaintableBlock(Block paintable,PropertyEnum<EnumDyeColor> colorProp){  paintableBlocks.put(paintable,colorProp);  return paintable;}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("p",1);  optionArgDefs.put("m",0);  optionArgDefs.put("l",0);  optionArgDefs.put("u",1);  optionArgDefs.put("r",1);  return optionArgDefs;}  }
class C{  @After public void cleanUp() throws IOException {  fileWriter.close();  jsonFile.delete();}  }
class C{  public Watermark(Position position,BufferedImage watermarkImg,float opacity){  if (position == null) {    throw new NullPointerException("Position is null.");  }  if (watermarkImg == null) {    throw new NullPointerException("Watermark image is null.");  }  if (opacity > 1.0f || opacity < 0.0f) {    throw new IllegalArgumentException("Opacity is out of range of " + "between 0.0f and 1.0f.");  }  this.position=position;  this.watermarkImg=watermarkImg;  this.opacity=opacity;}  }
class C{  public static void main(String[] args) throws Exception {  runScript(new JythonScript(),args);}  }
class C{  protected void processAwaitCompletion(final State current){  ServiceUtils.logInfo(this,"Checking status:  finishedCopies is %s, failedOrCancelledCopies is %s," + "triggeredCopies is %s",current.finishedCopies,current.failedOrCancelledCopies,current.triggeredCopies);  if (current.finishedCopies != null && current.triggeredCopies.equals(current.finishedCopies)) {    this.sendSelfPatch(buildPatch(TaskState.TaskStage.FINISHED,null,null));    return;  }  if (current.finishedCopies != null && current.failedOrCancelledCopies != null && current.triggeredCopies.equals(current.finishedCopies + current.failedOrCancelledCopies)) {    RuntimeException e=new RuntimeException(String.format("Image seeding failed: %s image seeding succeeded, %s image seeding failed or cancelled",current.finishedCopies,current.failedOrCancelledCopies));    this.failTask(e);    return;  }  getHost().schedule(null,current.queryPollDelay,TimeUnit.MILLISECONDS);}  }
class C{  public Workflow.Method zoneNullRollbackMethod(){  return new Workflow.Method("zoneNullRollback");}  }
class C{  final void selectType(Environment env,Context ctx,int tm){  Type rtype=null;switch (op) {case ASGADD:    if (left.type == Type.tString) {      if (right.type == Type.tVoid) {        env.error(where,"incompatible.type",opNames[op],Type.tVoid,Type.tString);        type=Type.tError;      } else {        type=itype=Type.tString;      }      return;    }case ASGDIV:case ASGMUL:case ASGSUB:case ASGREM:  if ((tm & TM_DOUBLE) != 0) {    itype=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    itype=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    itype=Type.tLong;  } else {    itype=Type.tInt;  }break;case ASGBITAND:case ASGBITOR:case ASGBITXOR:if ((tm & TM_BOOLEAN) != 0) {itype=Type.tBoolean;} else if ((tm & TM_LONG) != 0) {itype=Type.tLong;} else {itype=Type.tInt;}break;case ASGLSHIFT:case ASGRSHIFT:case ASGURSHIFT:rtype=Type.tInt;if (right.type.inMask(TM_INTEGER)) {right=new ConvertExpression(where,Type.tInt,right);}if (left.type == Type.tLong) {itype=Type.tLong;} else {itype=Type.tInt;}break;default :throw new CompilerError("Bad assignOp type: " + op);}if (rtype == null) {rtype=itype;}right=convert(env,ctx,rtype,right);type=left.type;}  }
class C{  private static void insertExtraConfigFiles(ModuleDetails details,ResourcePatternResolver ctx,JarOutputStream newModuleJarFile) throws IOException {  final String locationPattern="classpath*:**/" + details.getName() + "-*.yml";  final Resource[] configFiles=ctx.getResources(locationPattern);  Stream.of(configFiles).forEach(null);}  }
class C{  public float[] transposeToArray(float[] result,int offset){  if (result == null || result.length - offset < 16) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","transposeToArray","missingResult"));  }  result[offset++]=(float)this.m[0];  result[offset++]=(float)this.m[4];  result[offset++]=(float)this.m[8];  result[offset++]=(float)this.m[12];  result[offset++]=(float)this.m[1];  result[offset++]=(float)this.m[5];  result[offset++]=(float)this.m[9];  result[offset++]=(float)this.m[13];  result[offset++]=(float)this.m[2];  result[offset++]=(float)this.m[6];  result[offset++]=(float)this.m[10];  result[offset++]=(float)this.m[14];  result[offset++]=(float)this.m[3];  result[offset++]=(float)this.m[7];  result[offset++]=(float)this.m[11];  result[offset]=(float)this.m[15];  return result;}  }
class C{  public void onCorruption(SQLiteDatabase dbObj){  Logger.e(TAG,"Corruption reported by sqlite on database: " + dbObj.getPath());  if (!dbObj.isOpen()) {    deleteDatabaseFile(dbObj.getPath());    return;  }  List<Pair<String,String>> attachedDbs=null;  try {    try {      attachedDbs=dbObj.getAttachedDbs();    } catch (    SQLiteException e) {    }    try {      dbObj.close();    } catch (    SQLiteException e) {    }  }  finally {    if (attachedDbs != null) {      for (      Pair<String,String> p : attachedDbs) {        deleteDatabaseFile(p.second);      }    } else {      deleteDatabaseFile(dbObj.getPath());    }  }}  }
class C{  public static StyledString emptyStyledStringIfNull(String text){  return new StyledString(StringUtils.defaultString(text));}  }
class C{  private static void initializeMasterPlan(){  ArrayList<OptimizationPlanElement> temp=new ArrayList<OptimizationPlanElement>();  BC2HIR(temp);  HIROptimizations(temp);  HIR2LIR(temp);  LIROptimizations(temp);  if (VM.BuildForIA32) {    org.jikesrvm.compilers.opt.driver.ia32.MIROptimizationPlanner.intializeMasterPlan(temp);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    org.jikesrvm.compilers.opt.driver.ppc.MIROptimizationPlanner.intializeMasterPlan(temp);  }  masterPlan=toArray(temp);}  }
class C{  public String nextToken(){  int workingPosition=position;  boolean workingEmptyReturned=emptyReturned;  boolean onToken=advancePosition();  while (position != workingPosition || emptyReturned != workingEmptyReturned) {    if (onToken) {      tokenCount--;      return (emptyReturned ? "" : text.substring(workingPosition,(position != -1) ? position : strLength));    }    workingPosition=position;    workingEmptyReturned=emptyReturned;    onToken=advancePosition();  }  throw new java.util.NoSuchElementException();}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  private String asRegPattern(String string){  StringBuffer out=new StringBuffer(string.length());  for (int i=0, length=string.length(); i < length; i++) {    char ch=string.charAt(i);    if (ch == '\\') {      out.append("\\\\");    } else     if (ch == '*') {      out.append("\\*");    } else {      out.append(ch);    }  }  return out.toString();}  }
class C{  public static boolean isTestServer(){  return System.getProperty(TestServerOnly.TEST_SERVER_PROPERTY) != null;}  }
class C{  private static boolean chunkedUploadIsSupported(OwnCloudVersion version){  return (version != null && version.compareTo(OwnCloudVersion.owncloud_v4_5) >= 0);}  }
class C{  public void refreshCurrentView(){  FormController formController=Collect.getInstance().getFormController();  int event=formController.getEvent();  if (event == FormEntryController.EVENT_PROMPT_NEW_REPEAT) {    createRepeatDialog();  } else {    View current=createView(event,false);    showView(current,AnimationType.FADE);  }}  }
class C{  public void beforeSendingClientAck(){}  }
class C{  public static void putIntLE(byte[] arr,long off,int val){  if (UNALIGNED)   UNSAFE.putInt(arr,off,Integer.reverseBytes(val)); else   putIntByByte(arr,off,val,false);}  }
class C{  public void testDisablePrefix(){  Query expected=new TermQuery(new Term("field","test*"));  assertEquals(expected,parseKeyword("test*",~PREFIX_OPERATOR));}  }
class C{  void relaxNodeLogic(final Link l,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final PreProcessDijkstra.DeadEndData ddOutData){  if (this.pruneDeadEnds) {    if (canPassLink(l)) {      Node n=l.getToNode();      PreProcessDijkstra.DeadEndData ddData=getPreProcessData(n);      if (ddData.getDeadEndEntryNode() == null || ddOutData.getDeadEndEntryNode() != null)       addToPendingNodes(l,n,pendingNodes,currTime,currCost); else {        TO_NODES:         for (        Node deadEndEntryNode : deadEndEntryNodes)         if (deadEndEntryNode != null && deadEndEntryNode.getId() == ddData.getDeadEndEntryNode().getId()) {          addToPendingNodes(l,n,pendingNodes,currTime,currCost);          break TO_NODES;        }      }    }  } else {    if (canPassLink(l)) {      addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost);    }  }}  }
class C{  public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {  compileProjects(Arrays.asList(new File(".")),projects,Collections.emptyList(),issueAcceptor);}  }
class C{  private void requestContactCapabilities(String contact){  PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(contact);  if (number != null) {    ContactId remote=ContactUtil.createContactIdFromValidatedData(number);    getImsService().getImsModule().getCapabilityService().requestContactCapabilities(remote);  } else {    if (sLogger.isActivated()) {      sLogger.debug("Failed to request capabilities: invalid contact '" + contact + "'");    }  }}  }
class C{  float metrics(FontMetricsInt fmi){  return measure(mLen,false,fmi);}  }
class C{  public static void logError(String message,Throwable e){  getDefault().getLog().log(new Status(Status.ERROR,TLCActivator.PLUGIN_ID,message,e));}  }
class C{  public static void normalize(float[] a){  float total=sum(a);  if (total == 0.0) {    throw new RuntimeException("Can't normalize an array with sum 0.0");  }  scale(a,1.0F / total);}  }
class C{  public void importTenantConfiguration(String tenantName,Document configDoc) throws Exception {  samlValidate(configDoc);  SAMLImporter importer=new SAMLImporter(this);  importer.importConfiguration(tenantName,configDoc);}  }
class C{  public boolean isHasFixedWorkgroup(){  Object oo=get_Value(COLUMNNAME_IsHasFixedWorkgroup);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean isSelfCaptured(Primary that,TypedDeclaration d){  TypeDeclaration type=d.getTypeDeclaration();  Scope scope=that.getScope();  while (scope != null && scope instanceof Package == false && !Decl.equalScopeDecl(scope,type)) {    scope=scope.getScope();  }  return Decl.equalScopeDecl(scope,type);}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void cleanup(){}  }
class C{  public int intValue(){  return (this.value);}  }
class C{  private byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static void logStatus(final Logger logger,final ArticleReaderInterface articleReader,final long startTime,final long sleepingTime,final long workingTime){  String message="Consumer-Status-Report [" + Time.toClock(System.currentTimeMillis() - startTime) + "]";  if (articleReader != null) {    message+="\tPOSITION <" + articleReader.getBytePosition() + ">";  }  message+="\tEFFICIENCY\t " + MathUtilities.percentPlus(workingTime,sleepingTime) + "\tWORK  ["+ Time.toClock(workingTime)+ "]"+ "\tSLEEP ["+ Time.toClock(sleepingTime)+ "]";  logger.logMessage(Level.FINE,message);}  }
class C{  public void update(){}  }
class C{  public ProcessModalDialog(ASyncProcess aProcess,int WindowNo,int AD_Process_ID,int tableId,int recordId,boolean autoStart){  this(aProcess,WindowNo,new ProcessInfo("",AD_Process_ID,tableId,recordId),autoStart);}  }
class C{  public void limitTransAndScale(Matrix matrix,RectF content){  float[] vals=new float[9];  matrix.getValues(vals);  float curTransX=vals[Matrix.MTRANS_X];  float curScaleX=vals[Matrix.MSCALE_X];  float curTransY=vals[Matrix.MTRANS_Y];  float curScaleY=vals[Matrix.MSCALE_Y];  mScaleX=Math.min(Math.max(mMinScaleX,curScaleX),mMaxScaleX);  mScaleY=Math.min(Math.max(mMinScaleY,curScaleY),mMaxScaleY);  float width=0f;  float height=0f;  if (content != null) {    width=content.width();    height=content.height();  }  float maxTransX=-width * (mScaleX - 1f);  float newTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);  mTransX=newTransX;  float maxTransY=height * (mScaleY - 1f);  float newTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);  mTransY=newTransY;  vals[Matrix.MTRANS_X]=mTransX;  vals[Matrix.MSCALE_X]=mScaleX;  vals[Matrix.MTRANS_Y]=mTransY;  vals[Matrix.MSCALE_Y]=mScaleY;  matrix.setValues(vals);}  }
class C{  public boolean isCurrent(String first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof RegularFileObject))   return false;  RegularFileObject o=(RegularFileObject)other;  return getAbsoluteFile().equals(o.getAbsoluteFile());}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames) throws RuntimeCopyException {  try {    return new StackMapTable(newCp,new Copier(this.constPool,info,newCp,classnames).doit());  } catch (  BadBytecode e) {    throw new RuntimeCopyException("bad bytecode. fatal?");  }}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<Integer>();}  }
class C{  public IP(byte[] address){  a=UnsignedByte.toInt(address[0]);  b=UnsignedByte.toInt(address[1]);  c=UnsignedByte.toInt(address[2]);  d=UnsignedByte.toInt(address[3]);  value=this.toLong();}  }
class C{  public AnnotationDeclaration addAnnotationDeclaration(String name,Modifier... modifiers){  AnnotationDeclaration annotationDeclaration=new AnnotationDeclaration(Arrays.stream(modifiers).collect(Collectors.toCollection(null)),name);  getTypes().add(annotationDeclaration);  annotationDeclaration.setParentNode(this);  return annotationDeclaration;}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public ClassParameter(OptionID optionID,Class<?> restrictionClass){  this(optionID,restrictionClass,false);}  }
class C{  public static MockPneumaticsModule pnuematicsModule(){  return new MockPneumaticsModule();}  }
class C{  public static boolean isDebug(){  return DEBUG;}  }
class C{  @RequestMapping(value="/listen/branch",method=RequestMethod.POST) public String listenBranch(@RequestBody GitlabPushEvents body,@RequestParam String token,HttpSession session) throws IOException {  if (token.equals("XXX")) {    System.out.println(body);    User user=null;    try {      user=userService.findByLogin(body.getUserName());    } catch (    ServiceException e) {      logger.error(e.getLocalizedMessage());    }    Authentication authentication=null;    if (user != null) {      authentication=new UsernamePasswordAuthenticationToken(user.getLogin(),user.getPassword());    }    Authentication result=authenticationManager.authenticate(authentication);    SecurityContext securityContext=SecurityContextHolder.getContext();    securityContext.setAuthentication(result);    session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,securityContext);    try {      if (body.getBefore().equals("0000000000000000000000000000000000000000")) {        System.out.println("New branch added for : " + token + ", sessionId : "+ session.getId());      } else {        System.out.println("New Build on existing branch for : " + token + ", sessionId : "+ session.getId());      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return new HttpOk().toString();}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() > 1)   fireActionPerformed(e);  if (SwingUtilities.isRightMouseButton(e))   popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public void automaticallyDiscoverEntryExitPairs(LayoutEditor editor,int interlockType) throws JmriException {  runWhenStablised=false;  jmri.jmrit.display.layoutEditor.LayoutBlockManager lbm=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class);  if (!lbm.isAdvancedRoutingEnabled()) {    throw new JmriException("advanced routing not enabled");  }  if (!lbm.routingStablised()) {    runWhenStablised=true;    toUseWhenStable=editor;    interlockTypeToUseWhenStable=interlockType;    log.debug("Layout block routing has not yet stabilised, discovery will happen once it has");    return;  }  Hashtable<NamedBean,ArrayList<NamedBean>> validPaths=lbm.getLayoutBlockConnectivityTools().discoverValidBeanPairs(editor,Sensor.class,LayoutBlockConnectivityTools.SENSORTOSENSOR);  Enumeration<NamedBean> en=validPaths.keys();  EntryExitPairs eep=this;  while (en.hasMoreElements()) {    NamedBean key=en.nextElement();    ArrayList<NamedBean> validDestMast=validPaths.get(key);    if (validDestMast.size() > 0) {      eep.addNXSourcePoint(key,editor);      for (int i=0; i < validDestMast.size(); i++) {        if (!eep.isDestinationValid(key,validDestMast.get(i),editor)) {          eep.addNXDestination(key,validDestMast.get(i),editor);          eep.setEntryExitType(key,editor,validDestMast.get(i),interlockType);        }      }    }  }  firePropertyChange("autoGenerateComplete",null,null);}  }
class C{  public void pause(){  if (mMediaPlayer == null) {    return;  }  if (mMediaPlayer.isPlaying()) {    mMediaPlayer.pause();    setPlayable();  }}  }
class C{  public static String startCalculator(Container jc,String value,DecimalFormat format,int displayType,String title){  return startCalculator(jc,value,format,displayType,title,' ');}  }
class C{  @SuppressWarnings("unchecked") public void listRecords(String cfName,Map<String,String> criterias) throws Exception {  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  List<URI> uris=null;  uris=getColumnUris(clazz,activeOnly);  if (uris == null || !uris.iterator().hasNext()) {    System.out.println("No records found");    return;  }  int count=queryAndPrintRecords(uris,clazz,criterias);  System.out.println("Number of All Records is: " + count);}  }
class C{  public static IntSet makeInterferenceSet(int countRegs){  return countRegs <= INTERFERENCE_SET_THRESHOLD_SIZE ? new BitIntSet(countRegs) : new ListIntSet();}  }
class C{  private AFTPClient actionExists() throws PageException, IOException {  required("item",item);  AFTPClient client=getClient();  FTPFile file=existsFile(client,item,false);  Struct cfftp=writeCfftp(client);  cfftp.setEL(RETURN_VALUE,Caster.toBoolean(file != null));  cfftp.setEL(SUCCEEDED,Boolean.TRUE);  return client;}  }
class C{  public synchronized boolean isValid(){  return !mIsClosed;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case ImPackage.SCRIPT_IM:{      Script_IM script_IM=(Script_IM)theEObject;      T result=caseScript_IM(script_IM);      if (result == null)       result=caseScript(script_IM);      if (result == null)       result=caseVariableEnvironmentElement(script_IM);      if (result == null)       result=caseAnnotableElement(script_IM);      if (result == null)       result=defaultCase(theEObject);      return result;    }case ImPackage.SYMBOL_TABLE:{    SymbolTable symbolTable=(SymbolTable)theEObject;    T result=caseSymbolTable(symbolTable);    if (result == null)     result=defaultCase(theEObject);    return result;  }case ImPackage.SYMBOL_TABLE_ENTRY:{  SymbolTableEntry symbolTableEntry=(SymbolTableEntry)theEObject;  T result=caseSymbolTableEntry(symbolTableEntry);  if (result == null)   result=defaultCase(theEObject);  return result;}case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL:{SymbolTableEntryOriginal symbolTableEntryOriginal=(SymbolTableEntryOriginal)theEObject;T result=caseSymbolTableEntryOriginal(symbolTableEntryOriginal);if (result == null) result=caseSymbolTableEntry(symbolTableEntryOriginal);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.SYMBOL_TABLE_ENTRY_IM_ONLY:{SymbolTableEntryIMOnly symbolTableEntryIMOnly=(SymbolTableEntryIMOnly)theEObject;T result=caseSymbolTableEntryIMOnly(symbolTableEntryIMOnly);if (result == null) result=caseSymbolTableEntry(symbolTableEntryIMOnly);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.SYMBOL_TABLE_ENTRY_INTERNAL:{SymbolTableEntryInternal symbolTableEntryInternal=(SymbolTableEntryInternal)theEObject;T result=caseSymbolTableEntryInternal(symbolTableEntryInternal);if (result == null) result=caseSymbolTableEntry(symbolTableEntryInternal);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.REFERENCING_ELEMENT_IM:{ReferencingElement_IM referencingElement_IM=(ReferencingElement_IM)theEObject;T result=caseReferencingElement_IM(referencingElement_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.REFERENCING_ELEMENT_EXPRESSION_IM:{ReferencingElementExpression_IM referencingElementExpression_IM=(ReferencingElementExpression_IM)theEObject;T result=caseReferencingElementExpression_IM(referencingElementExpression_IM);if (result == null) result=caseReferencingElement_IM(referencingElementExpression_IM);if (result == null) result=caseExpression(referencingElementExpression_IM);if (result == null) result=caseTypableElement(referencingElementExpression_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.IDENTIFIER_REF_IM:{IdentifierRef_IM identifierRef_IM=(IdentifierRef_IM)theEObject;T result=caseIdentifierRef_IM(identifierRef_IM);if (result == null) result=caseIdentifierRef(identifierRef_IM);if (result == null) result=caseReferencingElementExpression_IM(identifierRef_IM);if (result == null) result=casePrimaryExpression(identifierRef_IM);if (result == null) result=caseStrictModeRelevant(identifierRef_IM);if (result == null) result=caseReferencingElement_IM(identifierRef_IM);if (result == null) result=caseExpression(identifierRef_IM);if (result == null) result=caseTypableElement(identifierRef_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM:{ParameterizedPropertyAccessExpression_IM parameterizedPropertyAccessExpression_IM=(ParameterizedPropertyAccessExpression_IM)theEObject;T result=caseParameterizedPropertyAccessExpression_IM(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseParameterizedPropertyAccessExpression(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseReferencingElementExpression_IM(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseExpression(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseParameterizedAccess(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseReferencingElement_IM(parameterizedPropertyAccessExpression_IM);if (result == null) result=caseTypableElement(parameterizedPropertyAccessExpression_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.PARAMETERIZED_TYPE_REF_IM:{ParameterizedTypeRef_IM parameterizedTypeRef_IM=(ParameterizedTypeRef_IM)theEObject;T result=caseParameterizedTypeRef_IM(parameterizedTypeRef_IM);if (result == null) result=caseParameterizedTypeRef(parameterizedTypeRef_IM);if (result == null) result=caseReferencingElement_IM(parameterizedTypeRef_IM);if (result == null) result=caseBaseTypeRef(parameterizedTypeRef_IM);if (result == null) result=caseStaticBaseTypeRef(parameterizedTypeRef_IM);if (result == null) result=caseTypeRef(parameterizedTypeRef_IM);if (result == null) result=caseTypeArgument(parameterizedTypeRef_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM:{ParameterizedTypeRefStructural_IM parameterizedTypeRefStructural_IM=(ParameterizedTypeRefStructural_IM)theEObject;T result=caseParameterizedTypeRefStructural_IM(parameterizedTypeRefStructural_IM);if (result == null) result=caseParameterizedTypeRef_IM(parameterizedTypeRefStructural_IM);if (result == null) result=caseParameterizedTypeRefStructural(parameterizedTypeRefStructural_IM);if (result == null) result=caseParameterizedTypeRef(parameterizedTypeRefStructural_IM);if (result == null) result=caseReferencingElement_IM(parameterizedTypeRefStructural_IM);if (result == null) result=caseStructuralTypeRef(parameterizedTypeRefStructural_IM);if (result == null) result=caseBaseTypeRef(parameterizedTypeRefStructural_IM);if (result == null) result=caseStaticBaseTypeRef(parameterizedTypeRefStructural_IM);if (result == null) result=caseTypeRef(parameterizedTypeRefStructural_IM);if (result == null) result=caseTypeArgument(parameterizedTypeRefStructural_IM);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.SNIPPET:{Snippet snippet=(Snippet)theEObject;T result=caseSnippet(snippet);if (result == null) result=caseExpression(snippet);if (result == null) result=caseTypableElement(snippet);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.DELEGATING_MEMBER:{DelegatingMember delegatingMember=(DelegatingMember)theEObject;T result=caseDelegatingMember(delegatingMember);if (result == null) result=caseN4MemberDeclaration(delegatingMember);if (result == null) result=caseAnnotableElement(delegatingMember);if (result == null) result=caseModifiableElement(delegatingMember);if (result == null) result=caseTypeProvidingElement(delegatingMember);if (result == null) result=caseTypableElement(delegatingMember);if (result == null) result=caseNamedElement(delegatingMember);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.DELEGATING_GETTER_DECLARATION:{DelegatingGetterDeclaration delegatingGetterDeclaration=(DelegatingGetterDeclaration)theEObject;T result=caseDelegatingGetterDeclaration(delegatingGetterDeclaration);if (result == null) result=caseN4GetterDeclaration(delegatingGetterDeclaration);if (result == null) result=caseDelegatingMember(delegatingGetterDeclaration);if (result == null) result=caseGetterDeclaration(delegatingGetterDeclaration);if (result == null) result=caseN4FieldAccessor(delegatingGetterDeclaration);if (result == null) result=caseFieldAccessor(delegatingGetterDeclaration);if (result == null) result=caseTypedElement(delegatingGetterDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(delegatingGetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(delegatingGetterDeclaration);if (result == null) result=casePropertyNameOwner(delegatingGetterDeclaration);if (result == null) result=caseN4MemberDeclaration(delegatingGetterDeclaration);if (result == null) result=caseAnnotableElement(delegatingGetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(delegatingGetterDeclaration);if (result == null) result=caseThisArgProvider(delegatingGetterDeclaration);if (result == null) result=caseTypableElement(delegatingGetterDeclaration);if (result == null) result=caseTypeProvidingElement(delegatingGetterDeclaration);if (result == null) result=caseNamedElement(delegatingGetterDeclaration);if (result == null) result=caseModifiableElement(delegatingGetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.DELEGATING_SETTER_DECLARATION:{DelegatingSetterDeclaration delegatingSetterDeclaration=(DelegatingSetterDeclaration)theEObject;T result=caseDelegatingSetterDeclaration(delegatingSetterDeclaration);if (result == null) result=caseN4SetterDeclaration(delegatingSetterDeclaration);if (result == null) result=caseDelegatingMember(delegatingSetterDeclaration);if (result == null) result=caseSetterDeclaration(delegatingSetterDeclaration);if (result == null) result=caseN4FieldAccessor(delegatingSetterDeclaration);if (result == null) result=caseFieldAccessor(delegatingSetterDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(delegatingSetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(delegatingSetterDeclaration);if (result == null) result=casePropertyNameOwner(delegatingSetterDeclaration);if (result == null) result=caseN4MemberDeclaration(delegatingSetterDeclaration);if (result == null) result=caseAnnotableElement(delegatingSetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(delegatingSetterDeclaration);if (result == null) result=caseThisArgProvider(delegatingSetterDeclaration);if (result == null) result=caseTypableElement(delegatingSetterDeclaration);if (result == null) result=caseTypeProvidingElement(delegatingSetterDeclaration);if (result == null) result=caseNamedElement(delegatingSetterDeclaration);if (result == null) result=caseModifiableElement(delegatingSetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.DELEGATING_METHOD_DECLARATION:{DelegatingMethodDeclaration delegatingMethodDeclaration=(DelegatingMethodDeclaration)theEObject;T result=caseDelegatingMethodDeclaration(delegatingMethodDeclaration);if (result == null) result=caseN4MethodDeclaration(delegatingMethodDeclaration);if (result == null) result=caseDelegatingMember(delegatingMethodDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(delegatingMethodDeclaration);if (result == null) result=caseMethodDeclaration(delegatingMethodDeclaration);if (result == null) result=caseN4MemberDeclaration(delegatingMethodDeclaration);if (result == null) result=caseFunctionDefinition(delegatingMethodDeclaration);if (result == null) result=caseGenericDeclaration(delegatingMethodDeclaration);if (result == null) result=caseTypedElement(delegatingMethodDeclaration);if (result == null) result=casePropertyNameOwner(delegatingMethodDeclaration);if (result == null) result=caseModifiableElement(delegatingMethodDeclaration);if (result == null) result=caseTypeProvidingElement(delegatingMethodDeclaration);if (result == null) result=caseNamedElement(delegatingMethodDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(delegatingMethodDeclaration);if (result == null) result=caseTypeDefiningElement(delegatingMethodDeclaration);if (result == null) result=caseAnnotableElement(delegatingMethodDeclaration);if (result == null) result=caseTypableElement(delegatingMethodDeclaration);if (result == null) result=caseVariableEnvironmentElement(delegatingMethodDeclaration);if (result == null) result=caseThisArgProvider(delegatingMethodDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case ImPackage.STRING_LITERAL_FOR_STE:{StringLiteralForSTE stringLiteralForSTE=(StringLiteralForSTE)theEObject;T result=caseStringLiteralForSTE(stringLiteralForSTE);if (result == null) result=caseStringLiteral(stringLiteralForSTE);if (result == null) result=caseLiteral(stringLiteralForSTE);if (result == null) result=casePrimaryExpression(stringLiteralForSTE);if (result == null) result=caseExpression(stringLiteralForSTE);if (result == null) result=caseTypableElement(stringLiteralForSTE);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case ExpressionsPackage.ASSIGNMENT_OPERATOR:    return convertAssignmentOperatorToString(eDataType,instanceValue);case ExpressionsPackage.SHIFT_OPERATOR:  return convertShiftOperatorToString(eDataType,instanceValue);case ExpressionsPackage.ADDITIVE_OPERATOR:return convertAdditiveOperatorToString(eDataType,instanceValue);case ExpressionsPackage.MULTIPLICATIVE_OPERATOR:return convertMultiplicativeOperatorToString(eDataType,instanceValue);case ExpressionsPackage.UNARY_OPERATOR:return convertUnaryOperatorToString(eDataType,instanceValue);case ExpressionsPackage.RELATIONAL_OPERATOR:return convertRelationalOperatorToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public Matrix4d reflect(Vector3dc normal,Vector3dc point){  return reflect(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  private void subtractDepthAndWorkDone(int depthToSubtract,BigInteger workDoneToSubtract,Collection<Transaction> transactions){  for (  Transaction tx : transactions) {    if (tx.getConfidence().getConfidenceType() == ConfidenceType.BUILDING) {      tx.getConfidence().setDepthInBlocks(tx.getConfidence().getDepthInBlocks() - depthToSubtract);      tx.getConfidence().setWorkDone(tx.getConfidence().getWorkDone().subtract(workDoneToSubtract));      confidenceChanged.put(tx,TransactionConfidence.Listener.ChangeReason.DEPTH);    }  }}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0L);}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input.toString());}  }
class C{  @Override public void updateDisplay(final boolean force){  if (alreadyUpdating) {    return;  }  try {    alreadyUpdating=true;    final boolean oldState=animator.isPaused();    if (force) {      animator.resume();    }    layerManager.drawLayersOn(renderer);    if (temp_focus != null) {      final IShape geometry=Cast.asGeometry(getScope(),temp_focus.value(getScope()));      if (geometry != null) {        temp_focus=null;        focusOn(geometry);      }    }    if (force) {      if (oldState) {        animator.pause();      }    }  }  finally {    alreadyUpdating=false;  }}  }
class C{  public LoadRelevantViewsThread(final TraceList list){  m_list=list;}  }
class C{  public Media createMedia(String uri,boolean isVideo,Runnable onCompletion) throws IOException {  return impl.createMedia(uri,isVideo,onCompletion);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_guard_1_();}  }
class C{  public void processRequest(SIPRequest sipRequest,MessageChannel incomingMessageChannel){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("PROCESSING INCOMING REQUEST " + sipRequest + " transactionChannel = "+ transactionChannel+ " listening point = "+ listeningPoint.getIPAddress()+ ":"+ listeningPoint.getPort());  if (listeningPoint == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping message: No listening point registered!");    return;  }  SipStackImpl sipStack=(SipStackImpl)transactionChannel.getSIPStack();  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("No provider - dropping !!");    return;  }  if (sipStack == null)   InternalErrorHandler.handleException("Egads! no sip stack!");  SIPServerTransaction transaction=(SIPServerTransaction)this.transactionChannel;  if (transaction != null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("transaction state = " + transaction.getState());  }  String dialogId=sipRequest.getDialogId(true);  SIPDialog dialog=sipStack.getDialog(dialogId);  if (dialog != null && sipProvider != dialog.getSipProvider()) {    Contact contact=dialog.getMyContactHeader();    if (contact != null) {      SipUri contactUri=(SipUri)(contact.getAddress().getURI());      String ipAddress=contactUri.getHost();      int contactPort=contactUri.getPort();      String contactTransport=contactUri.getTransportParam();      if (contactTransport == null)       contactTransport="udp";      if (contactPort == -1) {        if (contactTransport.equals("udp") || contactTransport.equals("tcp"))         contactPort=5060; else         contactPort=5061;      }      if (ipAddress != null && (!ipAddress.equals(listeningPoint.getIPAddress()) || contactPort != listeningPoint.getPort())) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("nulling dialog -- listening point mismatch!  " + contactPort + "  lp port = "+ listeningPoint.getPort());        }        dialog=null;      }    }  }  if (sipProvider.isAutomaticDialogSupportEnabled() && sipProvider.isDialogErrorsAutomaticallyHandled() && sipRequest.getToTag() == null) {    SIPServerTransaction sipServerTransaction=sipStack.findMergedTransaction(sipRequest);    if (sipServerTransaction != null) {      this.sendLoopDetectedResponse(sipRequest,transaction);      return;    }  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("dialogId = " + dialogId);    sipStack.getStackLogger().logDebug("dialog = " + dialog);  }  if (sipRequest.getHeader(Route.NAME) != null && transaction.getDialog() != null) {    RouteList routes=sipRequest.getRouteHeaders();    Route route=(Route)routes.getFirst();    SipUri uri=(SipUri)route.getAddress().getURI();    int port;    if (uri.getHostPort().hasPort()) {      port=uri.getHostPort().getPort();    } else {      if (listeningPoint.getTransport().equalsIgnoreCase("TLS"))       port=5061; else       port=5060;    }    String host=uri.getHost();    if ((host.equals(listeningPoint.getIPAddress()) || host.equalsIgnoreCase(listeningPoint.getSentBy())) && port == listeningPoint.getPort()) {      if (routes.size() == 1)       sipRequest.removeHeader(Route.NAME); else       routes.removeFirst();    }  }  if (sipRequest.getMethod().equals(Request.REFER) && dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {    ReferToHeader sipHeader=(ReferToHeader)sipRequest.getHeader(ReferTo.NAME);    if (sipHeader == null) {      this.sendBadRequestResponse(sipRequest,transaction,"Refer-To header is missing");      return;    }    SIPTransaction lastTransaction=((SIPDialog)dialog).getLastTransaction();    if (lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {      SIPRequest lastRequest=(SIPRequest)lastTransaction.getRequest();      if (lastTransaction instanceof SIPServerTransaction) {        if (!((SIPDialog)dialog).isAckSeen() && lastRequest.getMethod().equals(Request.INVITE)) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      } else       if (lastTransaction instanceof SIPClientTransaction) {        long cseqno=lastRequest.getCSeqHeader().getSeqNumber();        String method=lastRequest.getMethod();        if (method.equals(Request.INVITE) && !dialog.isAckSent(cseqno)) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      }    }  } else   if (sipRequest.getMethod().equals(Request.UPDATE)) {    if (sipProvider.isAutomaticDialogSupportEnabled() && dialog == null) {      this.sendCallOrTransactionDoesNotExistResponse(sipRequest,transaction);      return;    }  } else   if (sipRequest.getMethod().equals(Request.ACK)) {    if (transaction != null && transaction.isInviteTransaction()) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for INVITE Tx ");    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for dialog " + dialog);      if (dialog == null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);        }        SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);        if (st != null && st.isRetransmissionAlertEnabled()) {          st.disableRetransmissionAlerts();        }        SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);        if (ackTransaction != null) {          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logDebug("Found Tx pending ACK");          try {            ackTransaction.setAckSeen();            sipStack.removeTransaction(ackTransaction);            sipStack.removeTransactionPendingAck(ackTransaction);          } catch (          Exception ex) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logError("Problem terminating transaction",ex);            }          }          return;        }      } else {        if (!dialog.handleAck(transaction)) {          if (!dialog.isSequnceNumberValidation()) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dialog exists with loose dialog validation " + sipRequest.getFirstLine() + " isServerTransaction = "+ true+ " dialog = "+ dialog.getDialogId());            }            SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);            if (st != null && st.isRetransmissionAlertEnabled()) {              st.disableRetransmissionAlerts();            }          } else {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dropping ACK - cannot find a transaction or dialog");            }            SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);            if (ackTransaction != null) {              if (sipStack.isLoggingEnabled())               sipStack.getStackLogger().logDebug("Found Tx pending ACK");              try {                ackTransaction.setAckSeen();                sipStack.removeTransaction(ackTransaction);                sipStack.removeTransactionPendingAck(ackTransaction);              } catch (              Exception ex) {                if (sipStack.isLoggingEnabled()) {                  sipStack.getStackLogger().logError("Problem terminating transaction",ex);                }              }            }            return;          }        } else {          transaction.passToListener();          dialog.addTransaction(transaction);          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);          if (sipRequest.getMethod().equals(Request.INVITE) && sipProvider.isDialogErrorsAutomaticallyHandled()) {            sipStack.putInMergeTable(transaction,sipRequest);          }          if (sipStack.deliverTerminatedEventForAck) {            try {              sipStack.addTransaction(transaction);              transaction.scheduleAckRemoval();            } catch (            IOException ex) {            }          } else {            transaction.setMapped(true);          }        }      }    }  } else   if (sipRequest.getMethod().equals(Request.PRACK)) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Processing PRACK for dialog " + dialog);    if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);      }      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");      }      SIPResponse notExist=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      try {        sipProvider.sendResponse(notExist);      } catch (      SipException e) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("error sending response",e);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    } else     if (dialog != null) {      if (!dialog.handlePrack(sipRequest)) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Dropping out of sequence PRACK ");        if (transaction != null) {          sipStack.removeTransaction(transaction);          transaction.releaseSem();        }        return;      } else {        try {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);        } catch (        Exception ex) {          InternalErrorHandler.handleException(ex);        }      }    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing PRACK without a DIALOG -- this must be a proxy element");    }  } else   if (sipRequest.getMethod().equals(Request.BYE)) {    if (dialog != null && !dialog.isRequestConsumable(sipRequest)) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping out of sequence BYE " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq().getSeqNumber());      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && transaction.getState() == TransactionState.TRYING) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      }      if (transaction != null)       sipStack.removeTransaction(transaction);      return;    } else     if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      response.setReasonPhrase("Dialog Not Found");      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("dropping request -- automatic dialog " + "support enabled and dialog does not exist!");      try {        transaction.sendResponse(response);      } catch (      SipException ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Error in sending response",ex);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();        transaction=null;      }      return;    }    if (transaction != null && dialog != null) {      try {        if (sipProvider == dialog.getSipProvider()) {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          transaction.setDialog(dialog,dialogId);        }      } catch (      IOException ex) {        InternalErrorHandler.handleException(ex);      }    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("BYE Tx = " + transaction + " isMapped ="+ transaction.isTransactionMapped());    }  } else   if (sipRequest.getMethod().equals(Request.CANCEL)) {    SIPServerTransaction st=(SIPServerTransaction)sipStack.findCancelTransaction(sipRequest,true);    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Got a CANCEL, InviteServerTx = " + st + " cancel Server Tx ID = "+ transaction+ " isMapped = "+ transaction.isTransactionMapped());    }    if (sipRequest.getMethod().equals(Request.CANCEL)) {      if (st != null && st.getState() == SIPTransaction.TERMINATED_STATE) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Too late to cancel Transaction");        try {          transaction.sendResponse(sipRequest.createResponse(Response.OK));        } catch (        Exception ex) {          if (ex.getCause() != null && ex.getCause() instanceof IOException) {            st.raiseIOExceptionEvent();          }        }        return;      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Cancel transaction = " + st);    }    if (transaction != null && st != null && st.getDialog() != null) {      transaction.setDialog((SIPDialog)st.getDialog(),dialogId);      dialog=(SIPDialog)st.getDialog();    } else     if (st == null && sipProvider.isAutomaticDialogSupportEnabled() && transaction != null) {      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("dropping request -- automatic dialog support " + "enabled and INVITE ST does not exist!");      }      try {        sipProvider.sendResponse(response);      } catch (      SipException ex) {        InternalErrorHandler.handleException(ex);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    }    if (st != null) {      try {        if (transaction != null) {          sipStack.addTransaction(transaction);          transaction.setPassToListener();          transaction.setInviteTransaction(st);          st.acquireSem();        }      } catch (      Exception ex) {        InternalErrorHandler.handleException(ex);      }    }  } else   if (sipRequest.getMethod().equals(Request.INVITE)) {    SIPTransaction lastTransaction=dialog == null ? null : dialog.getInviteTransaction();    if (dialog != null && transaction != null && lastTransaction != null && sipRequest.getCSeq().getSeqNumber() > dialog.getRemoteSeqNumber() && lastTransaction instanceof SIPServerTransaction && sipProvider.isDialogErrorsAutomaticallyHandled() && dialog.isSequnceNumberValidation() && lastTransaction.isInviteTransaction() && lastTransaction.getState() != TransactionState.COMPLETED && lastTransaction.getState() != TransactionState.TERMINATED && lastTransaction.getState() != TransactionState.CONFIRMED) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 500 response for out of sequence message");      }      this.sendServerInternalErrorResponse(sipRequest,transaction);      return;    }    lastTransaction=(dialog == null ? null : dialog.getLastTransaction());    if (dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction != null && lastTransaction.isInviteTransaction() && lastTransaction instanceof ClientTransaction && lastTransaction.getLastResponse() != null && lastTransaction.getLastResponse().getStatusCode() == 200 && !dialog.isAckSent(lastTransaction.getLastResponse().getCSeq().getSeqNumber())) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 491 response for client Dialog ACK not sent.");      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }    if (dialog != null && lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction.isInviteTransaction() && lastTransaction instanceof ServerTransaction && !dialog.isAckSeen()) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 491 response for server Dialog ACK not seen.");      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("CHECK FOR OUT OF SEQ MESSAGE " + dialog + " transaction "+ transaction);  }  if (dialog != null && transaction != null && !sipRequest.getMethod().equals(Request.BYE) && !sipRequest.getMethod().equals(Request.CANCEL) && !sipRequest.getMethod().equals(Request.ACK) && !sipRequest.getMethod().equals(Request.PRACK)) {    if (!dialog.isRequestConsumable(sipRequest)) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Dropping out of sequence message " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq());      }      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && sipProvider.isDialogErrorsAutomaticallyHandled() && (transaction.getState() == TransactionState.TRYING || transaction.getState() == TransactionState.PROCEEDING)) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      }      return;    }    try {      if (sipProvider == dialog.getSipProvider()) {        sipStack.addTransaction(transaction);        dialog.addTransaction(transaction);        dialog.addRoute(sipRequest);        transaction.setDialog(dialog,dialogId);      }    } catch (    IOException ex) {      transaction.raiseIOExceptionEvent();      sipStack.removeTransaction(transaction);      return;    }  }  RequestEvent sipEvent;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug(sipRequest.getMethod() + " transaction.isMapped = " + transaction.isTransactionMapped());  }  if (dialog == null && sipRequest.getMethod().equals(Request.NOTIFY)) {    SIPClientTransaction pendingSubscribeClientTx=sipStack.findSubscribeTransaction(sipRequest,listeningPoint);    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("PROCESSING NOTIFY  DIALOG == null " + pendingSubscribeClientTx);    }    if (sipProvider.isAutomaticDialogSupportEnabled() && pendingSubscribeClientTx == null && !sipStack.deliverUnsolicitedNotify) {      try {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not find Subscription for Notify Tx.");        }        Response errorResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);        errorResponse.setReasonPhrase("Subscription does not exist");        sipProvider.sendResponse(errorResponse);        return;      } catch (      Exception ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Exception while sending error response statelessly",ex);        return;      }    }    if (pendingSubscribeClientTx != null) {      transaction.setPendingSubscribe(pendingSubscribeClientTx);      SIPDialog subscriptionDialog=(SIPDialog)pendingSubscribeClientTx.getDefaultDialog();      if (subscriptionDialog == null || subscriptionDialog.getDialogId() == null || !subscriptionDialog.getDialogId().equals(dialogId)) {        if (subscriptionDialog != null && subscriptionDialog.getDialogId() == null) {          subscriptionDialog.setDialogId(dialogId);        } else {          subscriptionDialog=pendingSubscribeClientTx.getDialog(dialogId);        }        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("PROCESSING NOTIFY Subscribe DIALOG " + subscriptionDialog);        }        if (subscriptionDialog == null && (sipProvider.isAutomaticDialogSupportEnabled() || pendingSubscribeClientTx.getDefaultDialog() != null)) {          Event event=(Event)sipRequest.getHeader(EventHeader.NAME);          if (sipStack.isEventForked(event.getEventType())) {            subscriptionDialog=SIPDialog.createFromNOTIFY(pendingSubscribeClientTx,transaction);          }        }        if (subscriptionDialog != null) {          transaction.setDialog(subscriptionDialog,dialogId);          subscriptionDialog.setState(DialogState.CONFIRMED.getValue());          sipStack.putDialog(subscriptionDialog);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);          if (!transaction.isTransactionMapped()) {            this.sipStack.mapTransaction(transaction);            transaction.setPassToListener();            try {              this.sipStack.addTransaction(transaction);            } catch (            Exception ex) {            }          }        }      } else {        transaction.setDialog(subscriptionDialog,dialogId);        dialog=subscriptionDialog;        if (!transaction.isTransactionMapped()) {          this.sipStack.mapTransaction(transaction);          transaction.setPassToListener();          try {            this.sipStack.addTransaction(transaction);          } catch (          Exception ex) {          }        }        sipStack.putDialog(subscriptionDialog);        if (pendingSubscribeClientTx != null) {          subscriptionDialog.addTransaction(pendingSubscribeClientTx);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);        }      }      if (transaction != null && ((SIPServerTransaction)transaction).isTransactionMapped()) {        sipEvent=new RequestEvent((SipProvider)sipProvider,(ServerTransaction)transaction,subscriptionDialog,(Request)sipRequest);      } else {        sipEvent=new RequestEvent((SipProvider)sipProvider,null,subscriptionDialog,(Request)sipRequest);      }    } else {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("could not find subscribe tx");      }      sipEvent=new RequestEvent(sipProvider,null,null,(Request)sipRequest);    }  } else {    if (transaction != null && (((SIPServerTransaction)transaction).isTransactionMapped())) {      sipEvent=new RequestEvent(sipProvider,(ServerTransaction)transaction,dialog,(Request)sipRequest);    } else {      sipEvent=new RequestEvent(sipProvider,null,dialog,(Request)sipRequest);    }  }  sipProvider.handleEvent(sipEvent,transaction);}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  mTabHost=(TabHost)findViewById(com.android.internal.R.id.tabhost);  if (mTabHost == null) {    throw new RuntimeException("Your content must have a TabHost whose id attribute is " + "'android.R.id.tabhost'");  }  mTabHost.setup(getLocalActivityManager());}  }
class C{  public void merge(Rectangle other){  int oldX2=getX2();  int oldY2=getY2();  setX(Math.min(getX(),other.getX()));  setY(Math.min(getY(),other.getY()));  setWidth(Math.max(oldX2,other.getX2()) - getX());  setHeight(Math.max(oldY2,other.getY2()) - getY());}  }
class C{  public boolean coversClass(Class<?> c){  return executionResults.getCoveredClasses().contains(c);}  }
class C{  private static RenderedImage generateTestImage(int width,int height,Random r,double angle){  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  Graphics g=img.getGraphics();  g.setColor(Color.white);  g.fillRect(0,0,width,height);  g.setColor(Color.BLUE);  int x=width / 2;  int y=height / 2;  int radius=Math.min(x,y);  g.drawLine(x,y,x + (int)(radius * Math.cos(angle)),y + (int)(radius * Math.sin(angle)));  g.drawString("giftest",r.nextInt(width),r.nextInt(height));  return img;}  }
class C{  public String modCommand(User user,String line){  String channel=user.getChannel();  String settingChannel=settings.getString("streamHighlightChannel");  String command=StringUtil.toLowerCase(settings.getString("streamHighlightCommand"));  if (command != null && !command.isEmpty() && settingChannel != null && settingChannel.equalsIgnoreCase(channel) && user.hasChannelModeratorRights()) {    if (StringUtil.toLowerCase(line).startsWith(command)) {      String comment=line.substring(command.length());      return addHighlight(channel,"[" + user.getDisplayNick() + "]"+ comment);    }  }  return null;}  }
class C{  private void checkNodeIsMarkedAsCountStation(Node node){  Link linkToBlock=null;  if (this.shortNameMap.keySet().contains(node.getId().toString())) {    if (node.getInLinks().size() == 1 && node.getOutLinks().size() == 1) {      for (      Link inLink : node.getInLinks().values()) {        for (        Link outLink : node.getOutLinks().values()) {          if (inLink.getLength() > outLink.getLength()) {            linkToBlock=outLink;          } else {            linkToBlock=inLink;          }          break;        }        break;      }      Id<Link> shortNameId=Id.create(this.shortNameMap.get(node.getId().toString()),Link.class);      if (this.outCounts.getCount(shortNameId) == null) {        Count<Link> oldCount=this.inCounts.getCount(shortNameId);        if (oldCount == null) {        } else {          if (linkToBlock != null) {            this.outCounts.createAndAddCount(linkToBlock.getId(),oldCount.getCsLabel());            Count<Link> newCount=this.outCounts.getCount(linkToBlock.getId());            newCount.setCoord(oldCount.getCoord());            for (            Volume volume : oldCount.getVolumes().values()) {              newCount.createVolume(volume.getHourOfDayStartingWithOne(),volume.getValue());            }          }        }      } else {      }    } else {      log.warn("Count station " + this.shortNameMap.get(node.getId().toString()) + " is registerd to node "+ node.getId().toString()+ " which has "+ node.getInLinks().size()+ " inLinks and "+ node.getOutLinks().size()+ " outLinks. Can only map one to one. Removing count station from counts data.");    }  }  if (linkToBlock != null) {    this.linksBlockedByFacility.add(linkToBlock.getId().toString());  }}  }
class C{  public static void main(String[] args){  runFilter(new RemoveDuplicates(),args);}  }
class C{  public static Stats of(Iterator<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  private void connectSocket(int connectTimeout,int readTimeout,int writeTimeout,ConnectionSpecSelector connectionSpecSelector) throws IOException {  rawSocket.setSoTimeout(readTimeout);  try {    Platform.get().connectSocket(rawSocket,route.socketAddress(),connectTimeout);  } catch (  ConnectException e) {    throw new ConnectException("Failed to connect to " + route.socketAddress());  }  source=Okio.buffer(Okio.source(rawSocket));  sink=Okio.buffer(Okio.sink(rawSocket));  if (route.address().sslSocketFactory() != null) {    connectTls(readTimeout,writeTimeout,connectionSpecSelector);  } else {    protocol=Protocol.HTTP_1_1;    socket=rawSocket;  }  if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {    socket.setSoTimeout(0);    FramedConnection framedConnection=new FramedConnection.Builder(true).socket(socket,route.address().url().host(),source,sink).protocol(protocol).listener(this).build();    framedConnection.sendConnectionPreface();    this.allocationLimit=framedConnection.maxConcurrentStreams();    this.framedConnection=framedConnection;  } else {    this.allocationLimit=1;  }}  }
class C{  public int objectSize(){  return objectClasses().size();}  }
class C{  public void clearDataTable(final String name){  DataTable table=getDataTable(name);  if (table != null) {    if (table instanceof SimpleDataTable) {      ((SimpleDataTable)table).clear();    }  }}  }
class C{  protected String chooseRandomEnemys(){  final List<String> enemyList=new LinkedList<String>(enemyForces.keySet());  final int enemySize=enemyList.size();  final int position=Rand.rand(enemySize);  return enemyList.get(position);}  }
class C{  @RequestMapping(value="/tags/tagTypes/{tagTypeCode}/tagCodes/{tagCode}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_TAGS_DELETE) public Tag deleteTag(@PathVariable("tagTypeCode") String tagTypeCode,@PathVariable("tagCode") String tagCode){  TagKey tagKey=new TagKey(tagTypeCode,tagCode);  return tagService.deleteTag(tagKey);}  }
class C{  public Role(final String name){  this.name=name;}  }
class C{  public void transitionToCapture(){  mCaptureLayout.setVisibility(View.VISIBLE);  mCancelLayout.setVisibility(View.GONE);  mIntentReviewLayout.setVisibility(View.GONE);  mMode=MODE_CAPTURE;}  }
class C{  public JRangeSlider(int minimum,int maximum,int lowValue,int highValue,int orientation,int direction){  this(new DefaultBoundedRangeModel(lowValue,highValue - lowValue,minimum,maximum),orientation,direction);}  }
class C{  private void validateDestinationStorage(StorageEntity storageEntity,StoragePolicyKey storagePolicyKey,Integer storagePolicyVersion){  Assert.isTrue(StoragePlatformEntity.GLACIER.equals(storageEntity.getStoragePlatform().getName()),String.format("Storage platform for storage policy transition destination storage with name \"%s\" is not \"%s\". Storage policy: {%s}",storageEntity.getName(),StoragePlatformEntity.GLACIER,storagePolicyHelper.storagePolicyKeyAndVersionToString(storagePolicyKey,storagePolicyVersion)));}  }
class C{  public void attemptJoin(View view){  roomNameView.setError(null);  String room_name=roomNameView.getText().toString();  boolean cancel=false;  if (TextUtils.isEmpty(room_name)) {    roomNameView.setError(getString(R.string.error_field_required));    cancel=true;  } else   if (!isEmailValid(room_name)) {    roomNameView.setError(getString(R.string.error_invalid_room_name));    cancel=true;  }  if (cancel) {    roomNameView.setText("");    roomNameView.requestFocus();  } else {    Intent intent=new Intent(this,MainActivity.class);    intent.putExtra(ROOM_NAME,room_name);    startActivity(intent);  }}  }
class C{  public PaletteSliderThumbIcon(String resource,int tileCount,boolean isTiledHorizontaly){  super(Images.createImage(PaletteSliderThumbIcon.class.getResource(resource)),tileCount,isTiledHorizontaly);}  }
class C{  public static EnumSet<KindName> kindNames(int kind){  EnumSet<KindName> kinds=EnumSet.noneOf(KindName.class);  if ((kind & VAL) != 0)   kinds.add(((kind & VAL) == VAR) ? KindName.VAR : KindName.VAL);  if ((kind & MTH) != 0)   kinds.add(KindName.METHOD);  if ((kind & TYP) != 0)   kinds.add(KindName.CLASS);  if ((kind & PCK) != 0)   kinds.add(KindName.PACKAGE);  return kinds;}  }
class C{  public void addCircle(float latPoint,float lonPoint,int w,int h,LinkProperties properties) throws IOException {  LinkCircle.write(latPoint,lonPoint,w,h,properties,link.dos);}  }
class C{  private void connect(Throwable exception){  c.changeConnectionStatus(Connection.ConnectionStatus.ERROR);  c.addAction("Client failed to connect");}  }
class C{  public String validateQuery(SolrQueryRequest req,String... tests) throws Exception {  String res=query(req);  return validateXPath(res,tests);}  }
class C{  public Task<Void> unlinkFromInBackground(final String authType){  if (authType == null) {    return Task.forResult(null);  }synchronized (mutex) {    if (!getAuthData().containsKey(authType)) {      return Task.forResult(null);    }    putAuthData(authType,null);  }  return saveInBackground();}  }
class C{  public <V extends Vertex>List<Set<V>> components(Graph graph){  AdjacencyMatrix<V> y=new AdjacencyMatrix<V>(graph);  List<TIntArrayList> comps=extractComponents(y);  List<Set<V>> components=new ArrayList<Set<V>>(comps.size());  for (  TIntArrayList comp : comps) {    Set<V> component=new HashSet<V>();    for (int i=0; i < comp.size(); i++) {      component.add(y.getVertex(comp.get(i)));    }    components.add(component);  }  return components;}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  } else {    return 1;  }}  }
class C{  public boolean endsWith(String suffix){  return str.endsWith(suffix);}  }
class C{  private void backpatchForwardBranches(Instruction branchTarget,CodeArray machinecodes,int machineCodeIndex,MachineCodeOffsets mcOffsets){  Iterator<Instruction> branchSources=branchBackPatching.getBranchSources(branchTarget);  while (branchSources.hasNext()) {    Instruction branchStmt=branchSources.next();    int bo=mcOffsets.getMachineCodeOffset(branchStmt) - (1 << LG_INSTRUCTION_WIDTH);    int bi=bo >> LG_INSTRUCTION_WIDTH;    int targetOffset=(machineCodeIndex - bi) << LG_INSTRUCTION_WIDTH;    boolean setLink=false;    if (targetOffset > MAX_DISPL << LG_INSTRUCTION_WIDTH) {      throw new OptimizingCompilerException("CodeGen","Branch positive offset too large: ",targetOffset);    }switch (branchStmt.getOpcode()) {case PPC_B_opcode:case PPC_BL_opcode:      machinecodes.set(bi,machinecodes.get(bi) | targetOffset & LI_MASK);    break;case PPC_DATA_LABEL_opcode:  machinecodes.set(bi,targetOffset);break;case IG_PATCH_POINT_opcode:break;case PPC_BCL_opcode:setLink=true;default :if (targetOffset <= MAX_COND_DISPL << 2) {machinecodes.set(bi,machinecodes.get(bi) | targetOffset & BD_MASK);if (DEBUG) {VM.sysWrite("**** Forward Short Cond. Branch ****\n");VM.sysWrite(disasm(machinecodes.get(bi),0) + "\n");}} else {int oldOffset=mcOffsets.getMachineCodeOffset(branchStmt);mcOffsets.setMachineCodeOffset(branchStmt,oldOffset + (1 << LG_INSTRUCTION_WIDTH));machinecodes.set(bi,flipCondition(machinecodes.get(bi)));machinecodes.set(bi,machinecodes.get(bi) | (2 << LG_INSTRUCTION_WIDTH));machinecodes.set(bi,machinecodes.get(bi) & 0xfffffffe);machinecodes.set(bi + 1,Btemplate | ((targetOffset - 4) & LI_MASK));if (setLink) {machinecodes.set(bi + 1,machinecodes.get(bi + 1) | 1);}if (DEBUG) {VM.sysWrite("**** Forward Long Cond. Branch ****\n");VM.sysWrite(disasm(machinecodes.get(bi),0) + "\n");VM.sysWrite(disasm(machinecodes.get(bi + 1),0) + "\n");}}break;}unresolvedBranches--;}mcOffsets.setMachineCodeOffset(branchTarget,machineCodeIndex << LG_INSTRUCTION_WIDTH);}  }
class C{  public void printNotice(String msg){  printMessage(Diagnostic.Kind.NOTE,msg);}  }
class C{  public DeleteResponseMessage(DeleteResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.deleted=other.deleted;}  }
class C{  public DateTime withWeekyear(int weekyear){  return withMillis(getChronology().weekyear().set(getMillis(),weekyear));}  }
class C{  public boolean checkDuplicate(T obj){  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isUseStringWidth(){  return useStringWidth;}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public CommercialChainExtractor(double threshold){  this.threshold=threshold;}  }
class C{  private DateBuilder(TimeZone tz){  Calendar cal=Calendar.getInstance(tz);  this.tz=tz;  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  year=cal.get(Calendar.YEAR);  hour=cal.get(Calendar.HOUR_OF_DAY);  minute=cal.get(Calendar.MINUTE);  second=cal.get(Calendar.SECOND);}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public void testSinglePolygonManyPointsNoHoleRoundTrip() throws SQLException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(1000);  Polygon pt=(Polygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Polygon pt2=(Polygon)or.read(st);  assertTrue("The input polygon is not the same as the output polygon",pt.equals(pt2));}  }
class C{  public void add(int id,String name,int parentId,boolean isFixed){  FolderTokenDivider div;  div=new FolderTokenDivider(id,name,parentId,isFixed);  super.add(div);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    buf=null;    in.close();  }}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  long temp=Double.doubleToLongBits(this.angle);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.tipRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.baseRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.arrowLength);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.arrowWidth);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=result * 37 + HashUtilities.hashCodeForPaint(this.arrowPaint);  result=result * 37 + this.arrowStroke.hashCode();  temp=Double.doubleToLongBits(this.labelOffset);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  static final public boolean isINFO(Logger log){  return log.getEffectiveLevel().toInt() <= Level.INFO.toInt();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (derivedFeatureID) {case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET:  return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void stopButtonInvoked(){  browser.stop();  isNavigateInProgress=false;  setToolbarButtonState();}  }
class C{  public double[][][] computeLocal(int timeSeries[][][]){  initialise();  addObservations(timeSeries);  return computeLocalFromPreviousObservations(timeSeries);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public boolean hasErrors(){  return this.errors != null;}  }
class C{  private void paintBackground(SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  Component c=ctx.getComponent();  Color bg=(c != null) ? c.getBackground() : null;  if (bg == null || bg.getAlpha() > 0) {    SeaGlassPainter backgroundPainter=style.getBackgroundPainter(ctx);    if (backgroundPainter != null) {      paint(backgroundPainter,ctx,g,x,y,w,h,transform);    }  }}  }
class C{  public ParallelTaskBuilder prepareSsh(){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.setProtocol(RequestProtocol.SSH);  return cb;}  }
class C{  @Override public void connectionNotification(String eventName,Object source){}  }
class C{  public synchronized void decrease(Bitmap bitmap){  final int bitmapSize=BitmapUtil.getSizeInBytes(bitmap);  Preconditions.checkArgument(mCount > 0,"No bitmaps registered.");  Preconditions.checkArgument(bitmapSize <= mSize,"Bitmap size bigger than the total registered size: %d, %d",bitmapSize,mSize);  mSize-=bitmapSize;  mCount--;}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public static byte[] altAccSignalDecoderPkt(int outputAddr,int aspect){  if (outputAddr < 1 || outputAddr > 2048) {    log.error("invalid signal decoder address " + outputAddr);    return null;  }  outputAddr-=1;  int lowAddr=(outputAddr & 0x03);  int boardAddr=(outputAddr >> 2);  return accSignalDecoderPktCommon(lowAddr,boardAddr,aspect);}  }
class C{  protected void removeFromMapping(){  if (path != null) {    removeMapping(this);    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((TreeStateNode)getChildAt(counter)).removeFromMapping();  }}  }
class C{  private boolean tooBig(BasicBlock bb,int maxCost){  int cost=0;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.isCall()) {      cost+=3;    } else     if (s.isAllocation()) {      cost+=6;    } else {      cost++;    }    if (cost > maxCost)     return true;  }  return false;}  }
class C{  protected AbstractPieItemLabelGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){  ParamChecks.nullNotPermitted(labelFormat,"labelFormat");  ParamChecks.nullNotPermitted(numberFormat,"numberFormat");  ParamChecks.nullNotPermitted(percentFormat,"percentFormat");  this.labelFormat=labelFormat;  this.numberFormat=numberFormat;  this.percentFormat=percentFormat;}  }
class C{  public Chars chars(String chars,double fontSize) throws NoGlyphException {  return new Chars(chars,fontSize);}  }
class C{  public void changeCandleSeriesPeriod(int newPeriod){  clearChartDatasets();  this.getCandleDataset().getSeries(0).setBarSize(newPeriod);  for (int i=0; i < getBaseCandleSeries().getItemCount(); i++) {    CandleItem candelItem=(CandleItem)getBaseCandleSeries().getDataItem(i);    boolean newBar=this.getCandleDataset().getSeries(0).buildCandle(candelItem.getPeriod().getStart(),candelItem.getOpen(),candelItem.getHigh(),candelItem.getLow(),candelItem.getClose(),candelItem.getVolume(),candelItem.getVwap(),candelItem.getCount(),this.getCandleDataset().getSeries(0).getBarSize() / getBaseCandleSeries().getBarSize(),null);    updateIndicators(this.getCandleDataset(),newBar);  }  this.getCandleDataset().getSeries(0).fireSeriesChanged();}  }
class C{  private void configureSupportedApplicationTypes(){  Set<ApplicationType> supportedTypes=Sets.intersection(_typeToFetcher.keySet(),_typeToHeuristics.keySet());  supportedTypes=Sets.intersection(supportedTypes,_appTypeToJobTypes.keySet());  supportedTypes=Sets.intersection(supportedTypes,_typeToAggregator.keySet());  _typeToAggregator.keySet().retainAll(supportedTypes);  _typeToFetcher.keySet().retainAll(supportedTypes);  _typeToHeuristics.keySet().retainAll(supportedTypes);  _appTypeToJobTypes.keySet().retainAll(supportedTypes);  logger.info("Configuring ElephantContext...");  for (  ApplicationType type : supportedTypes) {    _nameToType.put(type.getName(),type);    List<String> classes=new ArrayList<String>();    List<Heuristic> heuristics=_typeToHeuristics.get(type);    for (    Heuristic heuristic : heuristics) {      classes.add(heuristic.getClass().getName());    }    List<JobType> jobTypes=_appTypeToJobTypes.get(type);    logger.info("Supports " + type.getName() + " application type, using "+ _typeToFetcher.get(type).toString()+ " fetcher class with Heuristics ["+ StringUtils.join(classes,", ")+ "] and following JobTypes ["+ StringUtils.join(jobTypes,", ")+ "].");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:30.926 -0500",hash_original_method="3989731AACDA6B2FAA3C843D8746ADA9",hash_generated_method="3B9EE989A8D2280E604B3D6296E45F2E") public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  private void createModeShareStackedBarChart(String title,String filePath,BenchmarkDataReader data,String xLabel,String yLabel){  StackedBarChart stackedBarChart=new StackedBarChart(title,xLabel,yLabel,data.getCategories());  double[] modeShareArray=new double[data.getCategories().length];  int modeCount=0;  for (  String mode : data.getModes()) {    int i=0;    for (    Integer key : data.getDataMap().keySet()) {      Integer[] shares=data.getDataMap().get(key);      modeShareArray[i]=shares[modeCount] / data.getTotalTripsMap().get(key) * 100;      i++;    }    stackedBarChart.addSeries(mode,modeShareArray);    modeCount++;  }  AddSecondChart secondAxis=new AddSecondChart(stackedBarChart.getChart(),"Total share of observations [%]",data.getCategories(),0,50);  secondAxis.addChartAndAxis();  secondAxis.addSeries("Total trip share",data.getTotalTripShareArray());  GraphEditor stackedBarChartEdit=new GraphEditor(stackedBarChart,10,0.0,100.0,commonColorScheme);  stackedBarChartEdit.stackedBarRenderer();  stackedBarChart.saveAsPng(filePath,1024,768);}  }
class C{  @SuppressWarnings("PMD.ExcessiveParameterList") public PaymentGatewayFeatureImpl(final boolean supportAuthorize,final boolean supportAuthorizePerShipment,final boolean supportCapture,final boolean supportAuthorizeCapture,final boolean supportVoid,final boolean supportReverseAuthorization,final boolean supportRefund,final boolean externalFormProcessing,final boolean onlineGateway,final boolean requireDetails,final String additionalFeatures,final boolean supportCaptureMore,final boolean supportCaptureLess){  this.supportAuthorize=supportAuthorize;  this.supportAuthorizePerShipment=supportAuthorizePerShipment;  this.supportCapture=supportCapture;  this.supportAuthorizeCapture=supportAuthorizeCapture;  this.supportVoid=supportVoid;  this.supportReverseAuthorization=supportReverseAuthorization;  this.supportRefund=supportRefund;  this.externalFormProcessing=externalFormProcessing;  this.additionalFeatures=additionalFeatures;  this.onlineGateway=onlineGateway;  this.requireDetails=requireDetails;  this.supportCaptureMore=supportCaptureMore;  this.supportCaptureLess=supportCaptureLess;}  }
class C{  public RecurrenceRule(GenericValue rule) throws RecurrenceRuleException {  this.rule=rule;  if (!rule.getEntityName().equals("RecurrenceRule"))   throw new RecurrenceRuleException("Invalid RecurrenceRule Value object.");  init();}  }
class C{  public static void shutdown(){  throw new ShutdownException();}  }
class C{  public int step(){  return remainingStepCount > 0 ? --remainingStepCount : remainingStepCount;}  }
class C{  public boolean readCharacteristic(BleCharactCallback bleCallback){  return readCharacteristic(getCharacteristic(),bleCallback);}  }
class C{  public ConsensusMessage createPropose(int id,int epoch,byte[] value){  return new ConsensusMessage(PROPOSE,id,epoch,from,value);}  }
class C{  private synchronized void addEntries(Hashtable entries){  entryDirectory.putAll(entries);}  }
class C{  protected Header[] parseHeaders(final String line){  final String[] cols=trim(split(line));  final Header[] headers=new Header[cols.length];  for (int i=0; i < cols.length; i++) {    headers[i]=new Header(cols[i]);  }  return headers;}  }
class C{  public InlineQueryResultCachedPhotoBuilder description(String description){  this.description=description;  return this;}  }
class C{  public void store(Element root){  store(root,Xml.OWNERS,Xml.OWNER,Xml.CAR_OWNERS);}  }
class C{  public void testMissingMissionNameHandling(){  String xml="";  xml+="<mission " + "start_id='' >";  xml+=createEndMissionXml();  InputStream missionInputStream=new ByteArrayInputStream(xml.getBytes());  boolean didMissionNameParseFail=false;  try {    MissionParser.getMissionName(missionInputStream);  } catch (  MissionParseException e) {    didMissionNameParseFail=true;  }  Assert.assertEquals(true,didMissionNameParseFail);}  }
class C{  public T typeface(Typeface tf){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setTypeface(tf);  }  return self();}  }
class C{  public static String[] doubleArrayToStringArray(final double[] line){  String[] ret=new String[line.length];  for (int i=0; i < line.length; i++) {    ret[i]="" + line[i];  }  return ret;}  }
class C{  public static Resource computeTotalResourceChange(TopologyAPI.Topology topology,Map<String,Integer> componentChanges,Resource defaultInstanceResources,ScalingDirection scalingDirection){  double cpu=0;  long ram=0;  long disk=0;  Map<String,Long> ramMap=TopologyUtils.getComponentRamMapConfig(topology);  Map<String,Integer> componentsToScale=PackingUtils.getComponentsToScale(componentChanges,scalingDirection);  for (  String component : componentsToScale.keySet()) {    int parallelismChange=Math.abs(componentChanges.get(component));    cpu+=parallelismChange * defaultInstanceResources.getCpu();    disk+=parallelismChange * defaultInstanceResources.getDisk();    if (ramMap.containsKey(component)) {      ram+=parallelismChange * ramMap.get(component);    } else {      ram+=parallelismChange * defaultInstanceResources.getRam();    }  }  return new Resource(cpu,ram,disk);}  }
class C{  private void mountResources(){  final ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(this.getServletContext());  final WicketResourceMounter mounter=ctx.getBean("wicketResourceMounter",WicketResourceMounter.class);  mounter.mountResources(this);}  }
class C{  public CRootTagTreeNode(final JFrame parent,final CTagsTree tagsTree,final ZyGraph graph,final ITagManager tagManager){  super(0,graph);  m_parent=Preconditions.checkNotNull(parent,"IE02325: Parent argument can not be null");  m_tagsTree=Preconditions.checkNotNull(tagsTree,"IE02326: Tags tree argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01796: Tag manager can not be null");  m_rootTag=tagManager.getRootTag();  m_tagManager.addListener(m_tagManagerListener);  createChildren();}  }
class C{  public static String expand(CharSequence self,int tabStop){  if (self.length() == 0)   return "";  StringBuilder builder=new StringBuilder();  for (  String line : new LineIterable(self)) {    builder.append(expandLine((CharSequence)line,tabStop));    builder.append("\n");  }  if (self.charAt(self.length() - 1) != '\n') {    builder.deleteCharAt(builder.length() - 1);  }  return builder.toString();}  }
class C{  public boolean isInProduction(){  Object oo=get_Value(COLUMNNAME_IsInProduction);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Answer findType(String typeName,String packageName,boolean partialMatch,int acceptFlags,boolean checkRestrictions){  return findType(typeName,packageName,partialMatch,acceptFlags,true,false,checkRestrictions,null);}  }
class C{  public boolean ownerVersion(GridCacheVersion ownerVer){  assert ownerVer != null;  if (this.ownerVer == null) {    this.ownerVer=ownerVer;    return true;  }  return this.ownerVer.equals(ownerVer);}  }
class C{  @Override public Set<Map.Entry<K,V>> entrySet(){  return new EntrySet(this);}  }
class C{  public void bind(@NonNull RecyclerView recyclerView){  unbind();  this.recyclerViewWeakReference=new WeakReference<>(recyclerView);  recyclerView.getAdapter().registerAdapterDataObserver(this);}  }
class C{  protected RequestContextWrapper(T delegate){  this.delegate=requireNonNull(delegate,"delegate");}  }
class C{  public void removeHubNotificationListener(String memberName,ObjectName objectName){  try {synchronized (listenerObjectMap) {      if (listenerObjectMap.get(objectName) != null) {        NotificationHubListener listener=listenerObjectMap.get(objectName);        if (listener.decNumCounter() == 0) {          listenerObjectMap.remove(objectName);          mbeanServer.removeNotificationListener(objectName,listener);        }      }    }  } catch (  ListenerNotFoundException e) {  }catch (  InstanceNotFoundException e) {  }}  }
class C{  public final boolean isEmpty(){  return adapter.isEmpty();}  }
class C{  public static Converter<?> createConverter(BeanManager beanManager,String value){  Converter<?> managedConverter=createConverter(beanManager,new FacesConverterAnnotationLiteral(value,Object.class));  if (managedConverter != null) {    return new CdiConverter(value,Object.class,managedConverter);  }  return null;}  }
class C{  public T withIconTintingEnabled(boolean iconTintingEnabled){  this.iconTinted=iconTintingEnabled;  return (T)this;}  }
class C{  public boolean includesUpper(){  return includeUpper;}  }
class C{  public IllegalPathStateException(String s){  super(s);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ResultViewDialog(Window owner,String i18nKey,JComponent results,Object... i18nArgs){  super(owner,"results." + i18nKey,ModalityType.APPLICATION_MODAL,i18nArgs);  results.setBorder(createBorder());  layoutDefault(results,ButtonDialog.LARGE,makeCloseButton());}  }
class C{  public FilteredColdEmissionHandler(final double simulationEndTime,final int noOfTimeBins,final String userGroup,final PersonFilter personFilter,final Network network,final AreaFilter areaFilter){  this.delegate=new EmissionsPerLinkColdEventHandler(simulationEndTime,noOfTimeBins);  this.af=areaFilter;  this.network=network;  this.ug=userGroup;  this.pf=personFilter;  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  @Override public void keyPressed(KeyEvent evt){  if (!evt.isConsumed()) {    if (evt.getSource() instanceof Container) {      editor.setActiveView(editor.findView((Container)evt.getSource()));    }    Object obj=null;    if (inputMap != null) {      obj=inputMap.get(KeyStroke.getKeyStroke(evt.getKeyCode(),evt.getModifiers(),false));    }    if (obj == null) {      InputMap im=editor.getInputMap();      if (im != null) {        obj=im.get(KeyStroke.getKeyStroke(evt.getKeyCode(),evt.getModifiers(),false));      }    }    ActionListener al=null;    if (obj instanceof ActionListener) {      al=(ActionListener)obj;    } else     if (obj != null) {      if (actionMap != null) {        al=actionMap.get(obj);      }      if (al == null) {        al=editor.getActionMap().get(obj);      }    }    if (al != null) {      evt.consume();      al.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"tool",evt.getWhen(),evt.getModifiers()));      fireToolDone();    }  }}  }
class C{  public AxisInformation clone(){  AxisInformation result=new AxisInformation();  result.EngineeringUnits=EngineeringUnits == null ? null : EngineeringUnits.clone();  result.EURange=EURange == null ? null : EURange.clone();  result.Title=Title;  result.AxisScaleType=AxisScaleType;  result.AxisSteps=AxisSteps == null ? null : AxisSteps.clone();  return result;}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,RemoveForeignKeyChange change,StringBuilder ddl){  writeExternalForeignKeyDropStmt(change.getChangedTable(),change.getForeignKey(),ddl);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public boolean dropNamespaceFromMapgraph(final String namespace) throws Exception {  assertMapgraphRuntimeAvailable();  if (!namespacePublishedToMapgraph(namespace))   return false;  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(namespace);  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);  JettyResponseListener response=null;{    opts.addRequestParam(MAPGRAPH,MAPGRAPH_DROP);    opts.method="POST";  }  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }  return true;}  }
class C{  @Override public void printPredefinedStyle(String text,String style){  String preStyle=" style='margin:0px; font-size: 12px;' ";  HTML html=new HTML();  html.setHTML("<pre" + preStyle + "><span style='"+ SimpleHtmlSanitizer.sanitizeHtml(style).asString()+ "'>"+ SimpleHtmlSanitizer.sanitizeHtml(text).asString()+ "</span></pre>");  html.getElement().setAttribute("style","padding-left: 2px;");  consoleArea.add(html);}  }
class C{  private static String join(final Object[] array,final String token,final String delimiter){  StringBuffer buffer=new StringBuffer();  if ((array != null) && (array.length > 0)) {    for (int i=0; i < array.length; i++) {      if (i > 0) {        buffer.append(token);      }      if (StringUtils.isNotEmpty(delimiter)) {        buffer.append(delimiter).append(array[i].toString()).append(delimiter);      } else {        buffer.append(array[i].toString());      }    }  }  return buffer.toString();}  }
class C{  public void add(File file,String name,AVList params) throws FileNotFoundException {  if (null != file && file.exists()) {    this.totalBytesToUpload+=file.length();    this.filesToUpload.add(new FileInfo(name,file,params));  } else   throw new FileNotFoundException((file != null) ? file.getName() : "");}  }
class C{  public CCopyLineAction(final NaviNode node,final int line){  super("Copy line to clipboard");  m_node=Preconditions.checkNotNull(node,"IE02153: Node argument can not be null");  Preconditions.checkPositionIndex(line,node.getRealizer().getNodeContent().getLineCount(),"IE02154: Line argument is out of bounds");  m_line=line;}  }
class C{  public InvalidCredentialsException(final String message){  super(message);}  }
class C{  public AuthenticationException(String hostname,String message,Throwable cause){  super("failed to authenticate to " + hostname + ": "+ message,cause);}  }
class C{  public int showDialog(){  m_Result=CANCEL_OPTION;  setData();  setVisible(true);  return m_Result;}  }
class C{  private void indent(Writer out,int level) throws IOException {  for (int i=0; i < level; i++) {    out.write("\t");  }}  }
class C{  public static LocalTime fromMillisOfDay(long millisOfDay){  return fromMillisOfDay(millisOfDay,null);}  }
class C{  protected void appendLocation(ControlPointMarker controlPoint,List<LatLon> locations){  Globe globe=this.getWwd().getModel().getGlobe();  if (controlPoint.getId() == 0) {    Vec4 pointA=globe.computeEllipsoidalPointFromLocation(locations.get(0));    Vec4 pointB=globe.computeEllipsoidalPointFromLocation(locations.get(1));    Vec4 newPoint=pointA.add3(pointA.subtract3(pointB).multiply3(0.1));    locations.add(0,globe.computePositionFromEllipsoidalPoint(newPoint));  } else   if (controlPoint.getId() == locations.size() - 1) {    Vec4 pointA=globe.computeEllipsoidalPointFromLocation(locations.get(locations.size() - 2));    Vec4 pointB=globe.computeEllipsoidalPointFromLocation(locations.get(locations.size() - 1));    Vec4 newPoint=pointB.add3(pointB.subtract3(pointA).multiply3(0.1));    locations.add(globe.computePositionFromEllipsoidalPoint(newPoint));  }}  }
class C{  public static boolean evaluatePattern(Vertex pattern,Vertex sentence,Primitive variable,Map<Vertex,Vertex> variables,Network network){  List<Vertex> elements=pattern.orderedRelations(Primitive.WORD);  List<Vertex> words=sentence.orderedRelations(Primitive.WORD);  if (words == null && (sentence.getData() instanceof String) && (!((String)sentence.getData()).isEmpty())) {    sentence=network.createSentence(sentence.getDataValue());    words=sentence.orderedRelations(Primitive.WORD);  }  if (elements == null && (pattern.getData() instanceof String) && (!((String)pattern.getData()).isEmpty()) && (!((String)pattern.getData()).startsWith("Pattern"))) {    sentence=network.createSentence(pattern.getDataValue());    elements=sentence.orderedRelations(Primitive.WORD);  }  if (elements == null || words == null) {    return false;  }  boolean result=evaluatePattern(pattern,sentence,variable,variables,network,elements,words,0);  return result;}  }
class C{  public SortedListModel(ListModel model,SortOrder sortOrder){  this(model,sortOrder,null);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  public static List<String> measurements(List<EvaluationStatistics> stats){  List<String> result;  HashSet<String> set;  result=new ArrayList<>();  set=new HashSet<>();  for (  EvaluationStatistics stat : stats)   set.addAll(stat.keySet());  result.addAll(set);  Collections.sort(result);  return result;}  }
class C{  @Override public void onBindHeaderViewHolder(RecyclerView.ViewHolder viewHolder,int position){  TextView textView=(TextView)viewHolder.itemView.findViewById(R.id.stick_text);  textView.setText(String.valueOf(getItem(hasHeaderView() ? position - 1 : position).charAt(0)));  viewHolder.itemView.setBackgroundColor(Color.parseColor("#AAffffff"));  ImageView imageView=(ImageView)viewHolder.itemView.findViewById(R.id.stick_img);  SecureRandom imgGen=new SecureRandom();switch (imgGen.nextInt(3)) {case 0:    imageView.setImageResource(R.drawable.scn1);  break;case 1:imageView.setImageResource(R.drawable.jr13);break;case 2:imageView.setImageResource(R.drawable.jr16);break;}}  }
class C{  private void startDistributedSystem(Attributes atts){  Assert.assertTrue(stack.isEmpty());  String id=atts.getValue(ID);  if (id != null) {    this.config.setSystemId(id);  }  String disable_tcp=atts.getValue(DISABLE_TCP);  if (disable_tcp != null) {    this.config.setDisableTcp(DISABLE_TCP.equalsIgnoreCase("true"));  }  stack.push(this.config);}  }
class C{  public static boolean isEnum(int mod){  return (mod & ENUM) != 0;}  }
class C{  public boolean checkSelect(JCFieldAccess select){  if (!JSweetConfig.isJDKReplacementMode()) {    if (select.selected.type instanceof ClassType) {      String type=select.selected.type.tsym.toString();      if (type.startsWith("java.")) {        if (!translator.getContext().options.isJDKAllowed() && !(AUTHORIZED_ACCESSED_TYPES.contains(type) || type.startsWith("java.util.function"))) {          translator.report(select,JSweetProblem.JDK_TYPE,type);          return false;        }      }    }  }  return true;}  }
class C{  public Boolean isReservationEnabled(){  return reservationEnabled;}  }
class C{  public void paintCheckBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] biasReturn){  int pos;  int index;  Shape ca;synchronized (locator) {    index=locator.getViewIndexAtPoint(x,y,a);    ca=locator.getChildAllocation(index,a);  }  ChildState cs=getChildState(index);synchronized (cs) {    View v=cs.getChildView();    pos=v.viewToModel(x,y,ca,biasReturn);  }  return pos;}  }
class C{  @DSComment("device physical access/control") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.794 -0500",hash_original_method="55A25C535CCD0059748A82385B0A19D3",hash_generated_method="A58F77895EF8459FD95FA9B4DF308629") public static KeyCharacterMap load(int deviceId){synchronized (sInstances) {    KeyCharacterMap map=sInstances.get(deviceId);    if (map == null) {      String kcm=null;      if (deviceId != VIRTUAL_KEYBOARD) {        InputDevice device=InputDevice.getDevice(deviceId);        if (device != null) {          kcm=device.getKeyCharacterMapFile();        }      }      if (kcm == null || kcm.length() == 0) {        kcm="/system/usr/keychars/Virtual.kcm";      }      int ptr=nativeLoad(kcm);      map=new KeyCharacterMap(deviceId,ptr);      sInstances.put(deviceId,map);    }    return map;  }}  }
class C{  private void maybeMakeButtonOpaque(JComponent c){  Object opaque=UIManager.get("SplitPane.oneTouchButtonsOpaque");  if (opaque != null) {    c.setOpaque(((Boolean)opaque).booleanValue());  }}  }
class C{  private void processFailedTag(String identifier){  doTestEnded(identifier,false);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public int compareTo(HistEntry e){  return (int)(e.freq - freq);}  }
class C{  public void stop(){  long now=System.currentTimeMillis();synchronized (timerThread) {synchronized (this) {      if (!stopped) {        TimerThread.dequeue(this);        remainingTime=Math.max(0,sleepUntil - now);        sleepUntil=now;        stopped=true;      }    }  }}  }
class C{  public boolean isSetConfig(){  return this.config != null;}  }
class C{  public static Map<String,Object> jsonToStorageEntry(String fmJson) throws IOException {  Map<String,Object> entry=new HashMap<String,Object>();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  String tpSrcPort="NOT_SPECIFIED";  String tpDstPort="NOT_SPECIFIED";  String ipProto="NOT_SPECIFIED";  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals("")) {      continue;    }switch (n) {case StaticFlowEntryPusher.COLUMN_NAME:      entry.put(StaticFlowEntryPusher.COLUMN_NAME,jp.getText());    break;case StaticFlowEntryPusher.COLUMN_SWITCH:  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TABLE_ID:entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIVE:entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PRIORITY:entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,jp.getText());break;case StaticFlowEntryPusher.COLUMN_COOKIE:entry.put(StaticFlowEntryPusher.COLUMN_COOKIE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IN_PORT:entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_SRC:entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_DST:entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_TOS:entry.put(StaticFlowEntryPusher.COLUMN_NW_TOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_ECN:entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DSCP:entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_PROTO:entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,jp.getText());ipProto=jp.getText();break;case StaticFlowEntryPusher.COLUMN_NW_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_DST:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_DST:entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TP_SRC,jp.getText());tpSrcPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_TP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TP_DST,jp.getText());tpDstPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_ICMP_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_OPCODE:entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_SLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TARGET:entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_TC:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_BOS:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TUNNEL_ID:entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PBB_ISID:entry.put(StaticFlowEntryPusher.COLUMN_PBB_ISID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,jp.getText());break;default :log.error("Could not decode field from JSON string: {}",n);}}if (ipProto.equalsIgnoreCase("tcp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("udp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("sctp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,tpDstPort);}} else {log.debug("Got IP protocol of '{}' and tp-src of '{}' and tp-dst of '" + tpDstPort + "' via SFP REST API",ipProto,tpSrcPort);}return entry;}  }
class C{  private void determineVisibleTabIndices(int tabCount,int selectedIndex,int tabAreaLength,int buttonLength){  int desiredMaximumLength=calcDesiredMaximumLength(tabCount);  int leadingTabOffset=orientation.getPosition(rects[leadingTabIndex]);  int selectedTabEndOffset=orientation.getPosition(rects[selectedIndex].x + rects[selectedIndex].width,rects[selectedIndex].y + rects[selectedIndex].height);  if (desiredMaximumLength <= tabAreaLength) {    leadingTabIndex=0;    trailingTabIndex=tabCount - 1;  } else   if (desiredMaximumLength - leadingTabOffset + buttonLength <= tabAreaLength) {    trailingTabIndex=tabCount - 1;  } else   if ((leadingTabIndex == 0 && selectedTabEndOffset - leadingTabOffset + buttonLength <= tabAreaLength) || (selectedTabEndOffset - leadingTabOffset + 2 * buttonLength <= tabAreaLength)) {    trailingTabIndex=-1;    for (int i=tabCount - 1; i > selectedIndex; i--) {      int end=orientation.getPosition(rects[i].x + rects[i].width,rects[i].y + rects[i].height);      if (end - leadingTabOffset + 2 * buttonLength <= tabAreaLength) {        trailingTabIndex=i;        break;      }    }    if (trailingTabIndex == -1) {      trailingTabIndex=selectedIndex;    }  } else {    trailingTabIndex=selectedIndex;    leadingTabIndex=-1;    for (int i=0; i < selectedIndex; i++) {      int start=orientation.getPosition(rects[i]);      if (selectedTabEndOffset - start + 2 * buttonLength <= tabAreaLength) {        leadingTabIndex=i;        break;      }    }    if (leadingTabIndex == -1) {      leadingTabIndex=selectedIndex;    }  }  tabRuns[0]=leadingTabIndex;}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public Minute(Date time,TimeZone zone,Locale locale){  ParamChecks.nullNotPermitted(time,"time");  ParamChecks.nullNotPermitted(zone,"zone");  ParamChecks.nullNotPermitted(locale,"locale");  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  int min=calendar.get(Calendar.MINUTE);  this.minute=(byte)min;  this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);  this.day=new Day(time,zone,locale);  peg(calendar);}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public boolean isDisconnected(){  return status == Status.DISCONNECTED;}  }
class C{  private GraphBuilder(boolean directed){  this.directed=directed;}  }
class C{  public static byte[] createThumbprint(byte[] data){  try {    MessageDigest shadigest=MessageDigest.getInstance("SHA1");    return shadigest.digest(data);  } catch (  NoSuchAlgorithmException e) {    throw new Error(e);  }}  }
class C{  public void windowIconified(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowIconified(e);  }}  }
class C{  public ExpressionPattern(String expression) throws ExpressionException {  checkNotNull(expression);  this.expression=Expression.compile(expression,"x","y","z");}  }
class C{  public static int computeLastRow(double tileDelta,double maxLatitude){  int row=(int)Math.ceil((maxLatitude + 90) / tileDelta - 1);  if (maxLatitude + 90 < tileDelta) {    row=0;  }  return row;}  }
class C{  private Character loadCharacter(final int imageSize){  final int id=getValueOfVariable("id");  if (id == TextMeshCreator.SPACE_ASCII) {    this.spaceWidth=(getValueOfVariable("xadvance") - paddingWidth) * horizontalPerPixelSize;    return null;  }  final double xTex=((double)getValueOfVariable("x") + (padding[PAD_LEFT] - DESIRED_PADDING)) / imageSize;  final double yTex=1.0 - ((double)getValueOfVariable("y") + (padding[PAD_TOP] - DESIRED_PADDING)) / imageSize;  final int width=getValueOfVariable("width") - (paddingWidth - 2 * DESIRED_PADDING);  final int height=-(getValueOfVariable("height") - (paddingHeight - 2 * DESIRED_PADDING));  final double quadWidth=width * horizontalPerPixelSize;  final double quadHeight=height * verticalPerPixelSize;  final double xTexSize=(double)width / imageSize;  final double yTexSize=(double)height / imageSize;  final double xOff=(getValueOfVariable("xoffset") + padding[PAD_LEFT] - DESIRED_PADDING) * horizontalPerPixelSize;  final double yOff=-(getValueOfVariable("yoffset") + padding[PAD_TOP] - DESIRED_PADDING) * verticalPerPixelSize;  final double xAdvance=(getValueOfVariable("xadvance") - paddingWidth) * horizontalPerPixelSize;  return new Character(id,xTex,yTex,xTexSize,yTexSize,xOff,yOff,quadWidth,quadHeight,xAdvance);}  }
class C{  static void initBackendFactory(Timer timer) throws IOException {  RrdNioBackend.setFileSyncTimer(timer);  try {    if (!RrdBackendFactory.getDefaultFactory().getFactoryName().equals(RrdNioBackendFactory.FACTORY_NAME)) {      RrdBackendFactory.registerAndSetAsDefaultFactory(new RrdNioBackendFactory());    }  } catch (  final RrdException e) {    throw createIOException(e);  }}  }
class C{  public void flushBuffer(){  Writer out=this.out;  if (out == null)   return;  try {    if (out instanceof FlushBuffer)     ((FlushBuffer)out).flushBuffer();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void remove(Predicate filter){  for (IntIterator ii=rows(filter); ii.hasNext(); )   removeRow(ii.nextInt());}  }
class C{  public static Document newDocument() throws ParserConfigurationException {  DocumentBuilderFactory dbfac=DocumentBuilderFactory.newInstance();  DocumentBuilder docBuilder;  docBuilder=dbfac.newDocumentBuilder();  return docBuilder.newDocument();}  }
class C{  private void syncGroupServersToReplicationConnectionGroup(ReplicationConnectionGroup replConnGroup) throws SQLException {  String currentMasterString=null;  if (replConnGroup.getMasterHosts().size() == 1) {    currentMasterString=replConnGroup.getMasterHosts().iterator().next();  }  if (currentMasterString != null && (this.serverGroup.getMaster() == null || !currentMasterString.equals(this.serverGroup.getMaster().getHostPortString()))) {    try {      replConnGroup.removeMasterHost(currentMasterString,false);    } catch (    SQLException ex) {      getLog().logWarn("Unable to remove master: " + currentMasterString,ex);    }  }  Server newMaster=this.serverGroup.getMaster();  if (newMaster != null && replConnGroup.getMasterHosts().size() == 0) {    getLog().logInfo("Changing master for group '" + replConnGroup.getGroupName() + "' to: "+ newMaster);    try {      if (!replConnGroup.getSlaveHosts().contains(newMaster.getHostPortString())) {        replConnGroup.addSlaveHost(newMaster.getHostPortString());      }      replConnGroup.promoteSlaveToMaster(newMaster.getHostPortString());    } catch (    SQLException ex) {      throw SQLError.createSQLException("Unable to promote new master '" + newMaster.toString() + "'",ex.getSQLState(),ex,null);    }  }  for (  Server s : this.serverGroup.getServers()) {    if (s.isSlave()) {      try {        replConnGroup.addSlaveHost(s.getHostPortString());      } catch (      SQLException ex) {        getLog().logWarn("Unable to add slave: " + s.toString(),ex);      }    }  }  for (  String hostPortString : replConnGroup.getSlaveHosts()) {    Server fabServer=this.serverGroup.getServer(hostPortString);    if (fabServer == null || !(fabServer.isSlave())) {      try {        replConnGroup.removeSlaveHost(hostPortString,true);      } catch (      SQLException ex) {        getLog().logWarn("Unable to remove slave: " + hostPortString,ex);      }    }  }}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return options.SSA_LOOP_VERSIONING;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TYPE:    return isSetType();case DATA:  return isSetData();}throw new IllegalStateException();}  }
class C{  public Scanner(Readable source){  this(Objects.requireNonNull(source,"source"),WHITESPACE_PATTERN);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiconSpan[] oldSpans=text.getSpans(0,textLength,EmojiconSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (icon == 0 && i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);switch (unicode) {case 0x0031:            icon=R.drawable.emoji_0031;          break;case 0x0032:        icon=R.drawable.emoji_0032;      break;case 0x0033:    icon=R.drawable.emoji_0033;  break;case 0x0034:icon=R.drawable.emoji_0034;break;case 0x0035:icon=R.drawable.emoji_0035;break;case 0x0036:icon=R.drawable.emoji_0036;break;case 0x0037:icon=R.drawable.emoji_0037;break;case 0x0038:icon=R.drawable.emoji_0038;break;case 0x0039:icon=R.drawable.emoji_0039;break;case 0x0030:icon=R.drawable.emoji_0030;break;case 0x0023:icon=R.drawable.emoji_0023;break;default :followSkip=0;break;}skip+=followSkip;} else {int followSkip=Character.charCount(followUnicode);switch (unicode) {case 0x1f1ef:icon=(followUnicode == 0x1f1f5) ? R.drawable.emoji_1f1ef_1f1f5 : 0;break;case 0x1f1fa:icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1fa_1f1f8 : 0;break;case 0x1f1eb:icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1eb_1f1f7 : 0;break;case 0x1f1e9:icon=(followUnicode == 0x1f1ea) ? R.drawable.emoji_1f1e9_1f1ea : 0;break;case 0x1f1ee:icon=(followUnicode == 0x1f1f9) ? R.drawable.emoji_1f1ee_1f1f9 : 0;break;case 0x1f1ec:icon=(followUnicode == 0x1f1e7) ? R.drawable.emoji_1f1ec_1f1e7 : 0;break;case 0x1f1ea:icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1ea_1f1f8 : 0;break;case 0x1f1f7:icon=(followUnicode == 0x1f1fa) ? R.drawable.emoji_1f1f7_1f1fa : 0;break;case 0x1f1e8:icon=(followUnicode == 0x1f1f3) ? R.drawable.emoji_1f1e8_1f1f3 : 0;break;case 0x1f1f0:icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1f0_1f1f7 : 0;break;default :followSkip=0;break;}skip+=followSkip;}}}if (icon > 0) {text.setSpan(new EmojiconSpan(context,icon,emojiSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);}}}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public void createLocalSupport(){  if (Compute.isInUrbanEnvironment(game,getPosition())) {    setIsCallingSupport(true);    canCallSupport=false;  }}  }
class C{  private void doSwitch(HttpServletRequest request,ChameleonForm frm,UserContext user) throws Exception {  for (  SessionAttribute a : SessionAttribute.values())   request.getSession().removeAttribute(a.key());  if (user instanceof UserContext.Chameleon)   user=((UserContext.Chameleon)user).getOriginalUserContext();  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();  if (authentication instanceof ChameleonAuthentication)   authentication=((ChameleonAuthentication)authentication).getOriginalAuthentication();  if (user.getExternalUserId().equals(frm.getPuid())) {    SecurityContextHolder.getContext().setAuthentication(authentication);  } else {    SecurityContextHolder.getContext().setAuthentication(new ChameleonAuthentication(authentication,new ChameleonUserContext(frm.getPuid(),frm.getName(),user)));  }}  }
class C{  protected void sequence_IndexedAccessExpressionTail_LeftHandSideExpression_MemberExpression(ISerializationContext context,IndexedAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void enableBatchMode(boolean enabled){  this.batchEnabled.set(enabled);}  }
class C{  public T caseRelationalExpression(RelationalExpression object){  return null;}  }
class C{  public ByDay(DayOfWeek day){  this(null,day);}  }
class C{  protected double computeStdDev(Instance inst,Matrix k) throws Exception {  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;  double s=0;  int n=m_L.length;  for (int i=0; i < n; i++) {    double t=0;    for (int j=0; j < n; j++) {      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);    }    s+=t * k.get(i,0);  }  double sigma=m_delta;  if (kappa > s) {    sigma=Math.sqrt(kappa - s);  }  return sigma;}  }
class C{  public RemoteConnection host(String host){  this.host=host;  return this;}  }
class C{  public ObjectFactory(){}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static void callWriteXmlFile(Document doc,Writer w,String encoding){  try {    Source source=new DOMSource(doc);    Result result=new StreamResult(w);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.setOutputProperty(OutputKeys.INDENT,"yes");    xformer.setOutputProperty(OutputKeys.ENCODING,encoding);    xformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    xformer.transform(source,result);  } catch (  TransformerConfigurationException e) {    System.err.println("Caught TransformerConfigurationException" + e);    log.error("Caught TransformerConfigurationException: ",e);  }catch (  TransformerException e) {    System.err.println("Caught TransformerException" + e);    log.error("Caught TransformerException: ",e);  }}  }
class C{  private void readEnd(){  long now=System.nanoTime();  readTime+=now - lastTs;  lastTs=now;}  }
class C{  public ArrayList<MechSummary> generate(int numRolls,String ratName){  return generate(numRolls,ratName,null);}  }
class C{  public void indexSourceFolder(JavaProject javaProject,IPath sourceFolder,char[][] inclusionPatterns,char[][] exclusionPatterns){  if (this.jobEnd > this.jobStart) {    IndexRequest request=new IndexAllProject(javaProject,this);    if (isJobWaiting(request))     return;  }  request(new AddFolderToIndex(sourceFolder,javaProject,inclusionPatterns,exclusionPatterns,this));}  }
class C{  public static long parseLong(final byte[] b,final int off) throws ParseException {  final int size=Long.SIZE / Byte.SIZE;  final int len=b.length - off;  if (len >= size) {    return getLong(b,off);  } else {    throw new ParseException("Not enough bytes to parse a long.");  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override public int compareTo(PfamHmmer3RawMatch that){  if (this == that)   return 0;  if (this.getDomainIeValue() < that.getDomainIeValue())   return -1;  if (this.getDomainIeValue() > that.getDomainIeValue())   return 1;  if (this.getScore() > that.getScore())   return -1;  if (this.getScore() < that.getScore())   return 1;  if (this.hashCode() > that.hashCode())   return -1;  if (this.hashCode() < that.hashCode())   return 1;  return 0;}  }
class C{  @Override public synchronized void doAppend(ILoggingEvent eventObject){  if (guard)   return;  try {    guard=true;    if (!this.started) {      if (statusRepeatCount++ < ALLOWED_REPEATS)       addStatus(new WarnStatus("Attempted to append to non started appender [" + name + "].",this));      return;    }    if (getFilterChainDecision(eventObject) == FilterReply.DENY)     return;    this.append(eventObject);  }  finally {    guard=false;  }}  }
class C{  public boolean isMostrarCabeceras(){  return mostrarCabeceras;}  }
class C{  private static int longHashCode(long value){  return (int)(value ^ (value >>> 32));}  }
class C{  private void loadAnimation(boolean playingRest,long animationTime,int[] frameIndices,int[] frameResourceIds){  if ((!playingRest && (mAnimPlaying || mScaling)) || !mCanTouch) {    return;  }  if (playingRest) {    mAnimPlaying=false;  } else {    mAnimPlaying=true;  }  mPlayingRest=playingRest;  if (mLoadBitmapsTask != null) {    mLoadBitmapsTask.cancel(true);    mAnimator.cancel();  }  LoadBitmapsTask task=new LoadBitmapsTask(animationTime,frameIndices,frameResourceIds);  task.execute();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void addValue(Comparable key,double value){  addValue(key,new Double(value));}  }
class C{  public void noLoop(){  loop=false;}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  DebugCounterResource other=(DebugCounterResource)obj;  if (counterDesc == null) {    if (other.counterDesc != null)     return false;  } else   if (!counterDesc.equals(other.counterDesc))   return false;  if (counterHierarchy == null) {    if (other.counterHierarchy != null)     return false;  } else   if (!counterHierarchy.equals(other.counterHierarchy))   return false;  if (counterValue == null) {    if (other.counterValue != null)     return false;  } else   if (!counterValue.equals(other.counterValue))   return false;  if (metadata == null) {    if (other.metadata != null)     return false;  } else   if (!metadata.equals(other.metadata))   return false;  if (metadataString == null) {    if (other.metadataString != null)     return false;  } else   if (!metadataString.equals(other.metadataString))   return false;  if (moduleName == null) {    if (other.moduleName != null)     return false;  } else   if (!moduleName.equals(other.moduleName))   return false;  return true;}  }
class C{  public void addException(String exception){  additions.add(exception);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TaskSeries clone=(TaskSeries)super.clone();  clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);  return clone;}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds,Map<String,Object> properties){  this(type,divisionType,resolution,bytes,microseconds);  this.properties=new HashMap<String,Object>(properties);}  }
class C{  public void unsetOperatorId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  StringBuffer userList=new StringBuffer(service.getString(R.string.message_users_on_chan,conversation.getName()));  User[] mUsers=service.getConnection(server.getId()).getUsers(conversation.getName());  int mSize=mUsers.length;  for (int i=0; i < mSize; i++) {    userList.append(" ");    userList.append(mUsers[i].getPrefix());    userList.append(mUsers[i].getNick());  }  Message message=new Message(userList.toString());  message.setColor(Message.COLOR_YELLOW);  conversation.addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());  service.sendBroadcast(intent);}  }
class C{  public Observable<BooleanResponse> leaveRoom(String roomId,String userId){  return api.leaveRoom(roomId,userId);}  }
class C{  final boolean isSameOrAncestor(ClassLoader child){  while (child != null) {    if (this == child) {      return true;    }    child=child.parentClassLoader;  }  return false;}  }
class C{  public JMenuItemRecentFile(JMenuRecentFiles jmRecentFiles,File recentFile){  super();  this.jmRecentFiles=jmRecentFiles;  this.recentFile=recentFile;  setPosition(1);}  }
class C{  public void notifyFunctionLockableChanged(int functionNumber,boolean isLockable){  if (log.isDebugEnabled()) {    log.debug("notifyFunctionLockableChanged: functionNumber= " + functionNumber + " isLockable= "+ isLockable);  }  if (_throttle == null) {    return;  }switch (functionNumber) {case 0:    _throttle.setF0Momentary(!isLockable);  break;case 1:_throttle.setF1Momentary(!isLockable);break;case 2:_throttle.setF2Momentary(!isLockable);break;case 3:_throttle.setF3Momentary(!isLockable);break;case 4:_throttle.setF4Momentary(!isLockable);break;case 5:_throttle.setF5Momentary(!isLockable);break;case 6:_throttle.setF6Momentary(!isLockable);break;case 7:_throttle.setF7Momentary(!isLockable);break;case 8:_throttle.setF8Momentary(!isLockable);break;case 9:_throttle.setF9Momentary(!isLockable);break;case 10:_throttle.setF10Momentary(!isLockable);break;case 11:_throttle.setF11Momentary(!isLockable);break;case 12:_throttle.setF12Momentary(!isLockable);break;case 13:_throttle.setF13Momentary(!isLockable);break;case 14:_throttle.setF14Momentary(!isLockable);break;case 15:_throttle.setF15Momentary(!isLockable);break;case 16:_throttle.setF16Momentary(!isLockable);break;case 17:_throttle.setF17Momentary(!isLockable);break;case 18:_throttle.setF18Momentary(!isLockable);break;case 19:_throttle.setF19Momentary(!isLockable);break;case 20:_throttle.setF20Momentary(!isLockable);break;case 21:_throttle.setF21Momentary(!isLockable);break;case 22:_throttle.setF22Momentary(!isLockable);break;case 23:_throttle.setF23Momentary(!isLockable);break;case 24:_throttle.setF24Momentary(!isLockable);break;case 25:_throttle.setF25Momentary(!isLockable);break;case 26:_throttle.setF26Momentary(!isLockable);break;case 27:_throttle.setF27Momentary(!isLockable);break;case 28:_throttle.setF28Momentary(!isLockable);break;}}  }
class C{  public NotificationChain basicSetElement(IdentifierRef newElement,NotificationChain msgs){  IdentifierRef oldElement=element;  element=newElement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EXPORT_SPECIFIER__ELEMENT,oldElement,newElement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static DaVinci with(){  if (sDaVinci == null) {    throw new RuntimeException("DaVinci instance has not been initialized yet, please use DaVinci.init() first");  }  mRequestQueue=mDefaultRequestQueue;  mDaImageLoader=mDefaultDaImageLoader;  return sDaVinci;}  }
class C{  public EdgeWeightedGraph(In in){  this(in.readInt());  int E=in.readInt();  if (E < 0)   throw new IllegalArgumentException("Number of edges must be nonnegative");  for (int i=0; i < E; i++) {    int v=in.readInt();    int w=in.readInt();    double weight=in.readDouble();    Edge e=new Edge(v,w,weight);    addEdge(e);  }}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances estimator...");  if (m_Estimator instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  private void attrStmt(){  nextToken("expected 'graph' or 'node' or 'edge'");  if (m_st.sval.equalsIgnoreCase("graph")) {    nextToken("expected a '['");    if (m_st.ttype == '[') {      attrList(m_grObj);    } else {      System.out.println("expected a '['");    }  } else   if (m_st.sval.equalsIgnoreCase("node")) {    nextToken("expected a '['");    if (m_st.ttype == '[') {      attrList(m_noObj);    } else {      System.out.println("expected a '['");    }  } else   if (m_st.sval.equalsIgnoreCase("edge")) {    nextToken("expected a '['");    if (m_st.ttype == '[') {      attrList(m_edObj);    } else {      System.out.println("expected a '['");    }  } else {    System.out.println("expected 'graph' or 'node' or 'edge'");  }}  }
class C{  public static boolean isBisFunction(@NotNull PsiElement element){  if (PsiUtil.isOfElementType(element,SQFTypes.VARIABLE)) {    return SQFStatic.isBisFunction(((SQFVariable)element).getVarName());  }  if (PsiUtil.isOfElementType(element,SQFTypes.GLOBAL_VAR)) {    SQFStatic.isBisFunction(element.getText());  }  return false;}  }
class C{  protected void printNotation() throws TranscoderException, XMLException, IOException {  int t=scanner.next();  if (t != LexicalUnits.S) {    throw fatalError("space",null);  }  char[] space1=getCurrentValue();  t=scanner.next();  if (t != LexicalUnits.NAME) {    throw fatalError("name",null);  }  char[] name=getCurrentValue();  t=scanner.next();  if (t != LexicalUnits.S) {    throw fatalError("space",null);  }  char[] space2=getCurrentValue();  t=scanner.next();  String externalId=null;  char[] space3=null;  char[] string1=null;  char string1Delim=0;  char[] space4=null;  char[] string2=null;  char string2Delim=0;switch (t) {default :    throw fatalError("notation.definition",null);case LexicalUnits.PUBLIC_IDENTIFIER:  externalId="PUBLIC";t=scanner.next();if (t != LexicalUnits.S) {throw fatalError("space",null);}space3=getCurrentValue();t=scanner.next();if (t != LexicalUnits.STRING) {throw fatalError("string",null);}string1=getCurrentValue();string1Delim=scanner.getStringDelimiter();t=scanner.next();if (t == LexicalUnits.S) {space4=getCurrentValue();t=scanner.next();if (t == LexicalUnits.STRING) {string2=getCurrentValue();string2Delim=scanner.getStringDelimiter();t=scanner.next();}}break;case LexicalUnits.SYSTEM_IDENTIFIER:externalId="SYSTEM";t=scanner.next();if (t != LexicalUnits.S) {throw fatalError("space",null);}space3=getCurrentValue();t=scanner.next();if (t != LexicalUnits.STRING) {throw fatalError("string",null);}string1=getCurrentValue();string1Delim=scanner.getStringDelimiter();t=scanner.next();}char[] space5=null;if (t == LexicalUnits.S) {space5=getCurrentValue();t=scanner.next();}if (t != LexicalUnits.END_CHAR) {throw fatalError("end",null);}output.printNotation(space1,name,space2,externalId,space3,string1,string1Delim,space4,string2,string2Delim,space5);scanner.next();}  }
class C{  public void restore(){  if (window instanceof RootPaneContainer) {    final Component glassPane=((RootPaneContainer)window).getGlassPane();    glassPane.setVisible(windowGlassPaneVisible);    glassPane.setCursor(oldWindowCursor);  }  if (window != null) {    window.setCursor(oldWindowCursor);  }}  }
class C{  public List<MethodNode> handleMissingMethod(ClassNode receiver,String name,ArgumentListExpression argumentList,ClassNode[] argumentTypes,MethodCall call){  return Collections.emptyList();}  }
class C{  protected final void FP_REM(Instruction s,Operand val1,Operand val2){  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,D(getFPR(1)),val2)));  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,D(getFPR(0)),val1)));  EMIT(MIR_BinaryAcc.mutate(s,IA32_FPREM,D(getFPR(0)),D(getFPR(1))));}  }
class C{  @Override public void stop(){  m_stopped=true;}  }
class C{  void redoTruncate(int tableId){  Index index=metaObjects.get(tableId);  Table table=index.getTable();  table.truncate(pageStoreSession);}  }
class C{  public LocationRequestBuilder addLastLocation(@NonNull String provider,@Nullable LocationTime howOldCanBe,final boolean isNullValid){  return addLastLocation(provider,howOldCanBe,isNullValid,null);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  protected void initializeAttributes(){  AttributeInitializer ai=getAttributeInitializer();  if (ai != null) {    ai.initializeAttributes(this);  }}  }
class C{  private final static String neighbor(String geohash,int level,int dx,int dy){  int cell=BASE_32_STRING.indexOf(geohash.charAt(level - 1));  int x0=cell & 1;  int y0=cell & 2;  int x1=cell & 4;  int y1=cell & 8;  int x2=cell & 16;  int x=x0 + (x1 / 2) + (x2 / 4);  int y=(y0 / 2) + (y1 / 4);  if (level == 1) {    if ((dy < 0 && y == 0) || (dy > 0 && y == 3)) {      return null;    } else {      return Character.toString(encode(x + dx,y + dy));    }  } else {    final int nx=((level % 2) == 1) ? (x + dx) : (x + dy);    final int ny=((level % 2) == 1) ? (y + dy) : (y + dx);    if (nx >= 0 && nx <= 7 && ny >= 0 && ny <= 3) {      return geohash.substring(0,level - 1) + encode(nx,ny);    } else {      String neighbor=neighbor(geohash,level - 1,dx,dy);      return (neighbor != null) ? neighbor + encode(nx,ny) : neighbor;    }  }}  }
class C{  public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){  if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null;  ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  public static synchronized double[] solve(Pair[] pairs,Integer polyOrder){  int size=pairs.length;  if (size > 1) {    return getCalculatedCoeffients(pairs,polyOrder);  }  return null;}  }
class C{  public static void process(Connection conn,String fileName,String options1,String options2) throws SQLException {  try (Statement stat=conn.createStatement()){    String sql="SCRIPT " + options1 + " TO '"+ fileName+ "' "+ options2;    stat.execute(sql);  } }  }
class C{  @SuppressWarnings("unused") @Contract(pure=true) public final boolean isOperationRunning(final int id){  return mHelper.isOperationRunning(id);}  }
class C{  public final void testRegexWithContextAndResourceIdParameters(){  assertNotNull(Validators.regex(getContext(),android.R.string.cancel,Pattern.compile(".")));}  }
class C{  public Vector divide(double n){  return new Vector(x / n,y / n,z / n);}  }
class C{  public void addBackToStatePropertyForTraceExplorer(SimpleTLCState finalState,SimpleTLCState backToState){  String id=getValidIdentifier(PROP_SCHEME);  cfgBuffer.append(COMMENT).append("PROPERTY definition").append(CR);  cfgBuffer.append("PROPERTY").append(CR);  cfgBuffer.append(id).append(CR);  tlaBuffer.append(COMMENT).append("PROPERTY definition").append(CR);  tlaBuffer.append(id).append(DEFINES_CR);  tlaBuffer.append(TLA_NOT).append(L_PAREN).append(L_PAREN).append(TLA_INF_OFTEN).append(L_PAREN).append(CR).append(getStateConjunction(finalState)).append(CR).append(R_PAREN).append(R_PAREN).append(TLA_AND).append(L_PAREN).append(TLA_INF_OFTEN).append(L_PAREN).append(CR).append(getStateConjunction(backToState)).append(CR).append(R_PAREN).append(R_PAREN).append(R_PAREN).append(CR);  tlaBuffer.append(SEP).append(CR).append(CR);}  }
class C{  public void destroyApp(boolean unconditional){  bFirst=false;  if (led1 != null) {    try {      led1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led1=null;  }  if (led2 != null) {    try {      led2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led2=null;  }  if (ledPort != null) {    try {      ledPort.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    ledPort=null;  }  if (button1 != null) {    try {      button1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button1=null;  }  if (button2 != null) {    try {      button2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button2=null;  }  if (button3 != null) {    try {      button3.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button3=null;  }}  }
class C{  public Vector plus(Vector v){  Vector result=new Vector(size());  for (int i=0; i < size(); i++) {    result.setValue(i,getValue(i) + v.getValue(i));  }  return result;}  }
class C{  public AnnotationsModel(ProcessRendererModel model){  this.model=model;}  }
class C{  private void notifyClassObservers(ClassDescriptor classDescriptor){  for (  IClassObserver observer : classObserverList) {    observer.observeClass(classDescriptor);  }}  }
class C{  public InlineComment_ createInlineComment_(){  InlineComment_Impl inlineComment_=new InlineComment_Impl();  return inlineComment_;}  }
class C{  protected final void IntConstant(Register reg,int value){  int lo=PPCMaskLower16(value);  int hi=PPCMaskUpper16(value);  if (hi != 0) {    EMIT(MIR_Unary.create(PPC_LDIS,I(reg),IC(hi)));    if (lo != 0) {      EMIT(MIR_Binary.create(PPC_ADDI,I(reg),I(reg),IC(lo)));    }  } else {    EMIT(MIR_Unary.create(PPC_LDI,I(reg),IC(lo)));  }}  }
class C{  @Override public Instruction nextElement(){  if (labelInstruction != null) {    Instruction temp=labelInstruction;    labelInstruction=null;    return temp;  }  if (implicitInstructions.hasNext()) {    return implicitInstructions.next();  }  return explicitInstructions.nextElement();}  }
class C{  public void add(final Player player,final List<String> args){  if (args.size() >= 3) {    final String myZone=args.get(0);    if ("-".equals(myZone)) {      sandbox.setZone(sandbox.getZone(player));    } else {      if (!sandbox.setZone(myZone)) {        sandbox.privateText(player,"Zone not found.");        return;      }    }    int x=0;    if ("-".equals(args.get(1))) {      x=player.getX();    } else {      x=MathHelper.parseInt(args.get(1));    }    int y=0;    if ("-".equals(args.get(2))) {      y=player.getY();    } else {      y=MathHelper.parseInt(args.get(2));    }    final games.stendhal.server.entity.mapstuff.sign.Sign sign=new games.stendhal.server.entity.mapstuff.sign.Sign();    sign.setPosition(x,y);    final StringBuilder sb=new StringBuilder();    for (int i=3; i < args.size(); i++) {      sb.append(args.get(i) + " ");    }    sign.setText(sb.toString().trim().replace("|","\n"));    sandbox.add(sign);    signcounter++;    storage.put(Integer.valueOf(signcounter),sign);  } else {    sandbox.privateText(player,"This script creates, lists or removes signs. Syntax: \r\nAdminSign.class <zone> <x> <y> <text> The first 3 parameters can be \"-\".\r\nAdminSign.class list\r\nAdminSign.class del <n>");  }}  }
class C{  public CreateIndexRequestBuilder addMapping(String type,XContentBuilder source){  request.mapping(type,source);  return this;}  }
class C{  public NetscapeCertTypeExtension(Boolean critical,Object value) throws IOException {  this.extensionId=NetscapeCertType_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.bitString=val.getUnalignedBitString().toBooleanArray();}  }
class C{  public StyledPanelUI(Style style){  this.style=style;}  }
class C{  protected EntityMappingRuleImpl(){  super();}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <V>V addMetaIfAbsent(int key,@Nullable Callable<V> c){  assert c != null;synchronized (this) {    V v=(V)meta(key);    if (v == null && c != null)     try {      addMeta(key,v=c.call());    } catch (    Exception e) {      throw F.wrap(e);    }    return v;  }}  }
class C{  private void validateInstanceDefinition(String name,InstanceDefinition instanceDefinition,Integer minimumInstanceCount){  String capitalizedName=StringUtils.capitalize(name);  Assert.isTrue(instanceDefinition.getInstanceCount() >= minimumInstanceCount,String.format("At least %d %s instance must be specified.",minimumInstanceCount,name));  Assert.hasText(instanceDefinition.getInstanceType(),"An instance type for " + name + " instances must be specified.");  if (instanceDefinition.getInstanceSpotPrice() != null) {    Assert.isNull(instanceDefinition.getInstanceMaxSearchPrice(),capitalizedName + " instance max search price must not be specified when instance spot price is specified.");    Assert.isTrue(instanceDefinition.getInstanceSpotPrice().compareTo(BigDecimal.ZERO) > 0,capitalizedName + " instance spot price must be greater than 0");  }  if (instanceDefinition.getInstanceMaxSearchPrice() != null) {    Assert.isNull(instanceDefinition.getInstanceSpotPrice(),capitalizedName + " instance spot price must not be specified when max search price is specified.");    Assert.isTrue(instanceDefinition.getInstanceMaxSearchPrice().compareTo(BigDecimal.ZERO) > 0,capitalizedName + " instance max search price must be greater than 0");    if (instanceDefinition.getInstanceOnDemandThreshold() != null) {      Assert.isTrue(instanceDefinition.getInstanceOnDemandThreshold().compareTo(BigDecimal.ZERO) > 0,capitalizedName + " instance on-demand threshold must be greater than 0");    }  } else {    Assert.isNull(instanceDefinition.getInstanceOnDemandThreshold(),capitalizedName + " instance on-demand threshold must not be specified when instance max search price is not specified.");  }}  }
class C{  public boolean isRevertToSnapshotSupported(){  return revertToSnapshotSupported;}  }
class C{  public CDeleteTagSubtreeAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  super("Delete Subtree");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01218: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  private static int calculateDelayForError(){  return random.nextInt(DELAY_MS * ERROR_DELAY_FACTOR);}  }
class C{  public MemoryFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth){  blockMap=new TransactionalHashMap<Sha256Hash,StoredBlockAndWasUndoableFlag>();  fullBlockMap=new TransactionalMultiKeyHashMap<Sha256Hash,Integer,StoredUndoableBlock>();  transactionOutputMap=new TransactionalHashMap<StoredTransactionOutPoint,StoredTransactionOutput>();  this.fullStoreDepth=fullStoreDepth > 0 ? fullStoreDepth : 1;  try {    StoredBlock storedGenesisHeader=new StoredBlock(params.getGenesisBlock().cloneAsHeader(),params.getGenesisBlock().getWork(),0);    List<Transaction> genesisTransactions=Lists.newLinkedList();    StoredUndoableBlock storedGenesis=new StoredUndoableBlock(params.getGenesisBlock().getHash(),genesisTransactions);    put(storedGenesisHeader,storedGenesis);    setChainHead(storedGenesisHeader);    setVerifiedChainHead(storedGenesisHeader);  } catch (  BlockStoreException e) {    throw new RuntimeException(e);  }catch (  VerificationException e) {    throw new RuntimeException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.721 -0500",hash_original_method="6341E21CDA970E0B49B9800DCF1B5945",hash_generated_method="624D979B6FE2FB064D5874DCDEC81C44") public boolean hasParameter(String name){  return uriParms.getValue(name) != null;}  }
class C{  public void afterStart(){  readWorker=new ReadWorker();  IgniteThread th=new IgniteThread(readWorker);  th.setPriority(Thread.MAX_PRIORITY);  th.start();}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  private boolean createZNodes(final String clientName){  boolean bZNodesCreated=false;  try {    byte[] clientNameInBytes=clientName.getBytes(Charset.forName("UTF-8"));    String versionId=UUID.randomUUID().toString();    String lockRootPath=ZKPaths.makePath(_persistentLockPath,_persistentLockName);    String lockPath=ZKPaths.makePath(lockRootPath,versionId);    _zkClient.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(lockRootPath).and().create().withMode(CreateMode.PERSISTENT).forPath(lockPath,clientNameInBytes).and().commit();    bZNodesCreated=true;  } catch (  KeeperException.NodeExistsException nee) {    _log.debug("createZNodes(): For lock: {}, ZNodes already exist",_persistentLockName,nee);    try {      if (clientName.equals(getLockOwner())) {        bZNodesCreated=true;        _log.debug("createZNodes(): owner is trying to create {} again.",_persistentLockName);      }    } catch (    Exception e) {      _log.warn("createZNodes(): Problem while getting ZNodes: {}",_persistentLockName,e);    }  }catch (  Exception e) {    _log.warn("createZNodes(): Problem while creating ZNodes: {}",_persistentLockName,e);  }  _log.debug("createZNodes(): Result: {}",bZNodesCreated);  return bZNodesCreated;}  }
class C{  public WETriangleMesh pointTowards(ReadonlyVec3D dir,ReadonlyVec3D forward){  return transform(Quaternion.getAlignmentQuat(dir,forward).toMatrix4x4(matrix),true);}  }
class C{  @Override public synchronized void streamBroadcastClose(IBroadcastStream stream){  log.debug("start streamBroadcastClose broadcast close: " + stream.getPublishedName());  try {    streamPublishingStop();    IConnection current=Red5.getConnectionLocal();    RoomClient rcl=clientListManager.getClientByStreamId(current.getClient().getId());    sendClientBroadcastNotifications(stream,"closeStream",rcl);  } catch (  Exception e) {    log.error("[streamBroadcastClose]",e);  }}  }
class C{  public DocumentHandlerState(TagHandler tagHandler){  this.tagHandler=tagHandler;}  }
class C{  public CLIOutputResponse propget(final PropertyGetRequest request) throws IOException, ServerException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  uArgs.add("propget");  uArgs.add(request.getName());  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout());}  }
class C{  protected int legalIndex(int index){  while (index >= points.size())   index-=points.size();  while (index < 0) {    index+=points.size();  }  return index;}  }
class C{  protected void succeeded(Description description){}  }
class C{  public boolean isAssignment(){  return (m_status == STATUS_NotConfirmed || m_status == STATUS_Confirmed);}  }
class C{  public static boolean hasAccess(Config config,int type){  boolean has=true;  if (config instanceof ConfigWeb) {    has=((ConfigWeb)config).getSecurityManager().getAccess(type) != SecurityManager.VALUE_NO;  }  return has;}  }
class C{  public ShortIterator(short[] primitiveArray){  super(primitiveArray);}  }
class C{  public static final int countFields(String fieldList){  return fieldList.split("\\s*,\\s*").length;}  }
class C{  @Override public String toString(){  return getClass().getName() + "{nvisited=" + visited.size()+ "}";}  }
class C{  public static int nvalues(GeoTimeSerie gts){  return gts.values;}  }
class C{  public static <T>T[] insert(T[] array,int currentSize,int index,T element){  assert currentSize <= array.length;  if (currentSize + 1 <= array.length) {    System.arraycopy(array,index,array,index + 1,currentSize - index);    array[index]=element;    return array;  }  @SuppressWarnings("unchecked") T[] newArray=(T[])new Object[growSize(currentSize)];  System.arraycopy(array,0,newArray,0,index);  newArray[index]=element;  System.arraycopy(array,index,newArray,index + 1,array.length - index);  return newArray;}  }
class C{  public Object clone(){  Style clone=null;  try {    clone=(Style)super.clone();  } catch (  CloneNotSupportedException cnse) {    cnse.printStackTrace();    return null;  }  clone.foreground=foreground;  clone.background=background;  clone.font=font;  clone.underline=underline;  clone.fontMetrics=fontMetrics;  return clone;}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){  ZonedDateTime now=ZonedDateTime.now();  List<User> users=userRepository.findAllByActivatedIsFalseAndCreatedDateBefore(now.minusDays(3));  for (  User user : users) {    log.debug("Deleting not activated user {}",user.getLogin());    userRepository.delete(user);    countingService.decUsersCount();  }}  }
class C{  public Long move(final String key,final int dbIndex){  checkIsInMulti();  client.move(key,dbIndex);  return client.getIntegerReply();}  }
class C{  public static Number and(Number left,Number right){  return NumberMath.and(left,right);}  }
class C{  public Metaphone(){  super();}  }
class C{  public CounterSet rangeIterator(long fromTime,long toTime,final TimeUnit unit,final Pattern filter,final int depth){  if (fromTime < 0)   throw new IllegalArgumentException();  if (toTime < 0)   throw new IllegalArgumentException();  if (unit == null)   throw new IllegalArgumentException();  if (fromTime == 0L) {    fromTime=getFirstTimestamp();  }  if (toTime == 0L || toTime == Long.MAX_VALUE) {    toTime=getLastTimestamp();  }  final long nslots=unit.convert(toTime,TimeUnit.MILLISECONDS) - unit.convert(fromTime,TimeUnit.MILLISECONDS) + 1;  if (nslots > Integer.MAX_VALUE)   throw new IllegalArgumentException("too many samples");  final CounterSetBTreeTupleSerializer tupleSer=(CounterSetBTreeTupleSerializer)getIndexMetadata().getTupleSerializer();  final IKeyBuilder keyBuilder=getIndexMetadata().getTupleSerializer().getKeyBuilder();  final long fromMinutes=TimeUnit.MILLISECONDS.toMinutes(fromTime);  final byte[] fromKey=keyBuilder.reset().append(fromMinutes).getKey();  final long toMinutes=TimeUnit.MILLISECONDS.toMinutes(toTime + TimeUnit.MINUTES.toMillis(1));  final byte[] toKey=keyBuilder.reset().append(toMinutes).getKey();  if (log.isInfoEnabled()) {    log.info("fromTime=" + fromTime + "ms ("+ fromMinutes+ "m), toTime="+ toTime+ "ms ("+ toMinutes+ "m), units="+ unit+ ", nslots="+ nslots);  }  final ITupleIterator itr=rangeIterator(fromKey,toKey);  int nselected=0;  long nvalues=0;  long nvisited=0;  final CounterSet counters=new CounterSet();  final IInstrumentFactory instrumentFactory=new DefaultInstrumentFactory((int)nslots,PeriodEnum.getValue(unit),false);  while (itr.hasNext()) {    final ITuple tuple=itr.next();    nvisited++;    final Entry entry=tupleSer.deserialize(tuple);    if (fromTime < entry.timestamp || toTime >= entry.timestamp) {      if (log.isTraceEnabled()) {        log.trace("Rejected: minutes=" + TimeUnit.MILLISECONDS.toMinutes(entry.timestamp) + " : "+ entry.path);      }    }    if (depth != 0 && depth > entry.getDepth()) {      if (log.isTraceEnabled()) {        log.trace("Rejected: minutes=" + TimeUnit.MILLISECONDS.toMinutes(entry.timestamp) + " : "+ entry.path);      }    }    if (filter != null && !filter.matcher(entry.path).matches()) {      if (log.isTraceEnabled()) {        log.trace("Rejected: minutes=" + TimeUnit.MILLISECONDS.toMinutes(entry.timestamp) + " : "+ entry.path);      }      continue;    }    ICounterNode c=counters.getPath(entry.path);    final IInstrument inst;    if (c == null) {      if (log.isDebugEnabled()) {        log.debug("Matched: ndistinct=" + nselected + ", "+ entry.path);      }      nselected++;      inst=instrumentFactory.newInstance(entry.value.getClass());      c=counters.addCounter(entry.path,inst);    } else     if (c instanceof ICounterSet) {      log.error("CounterSet exists for counter path: " + entry.path);      continue;    } else {      inst=((ICounter)c).getInstrument();    }    inst.setValue(entry.value,entry.timestamp);    nvalues++;  }  if (log.isInfoEnabled())   log.info("nselected=" + nselected + ", nvalues="+ nvalues+ ", nvisited="+ nvisited);  return counters;}  }
class C{  private void saveToContext(Context context,boolean updateSiteStructure){  ParameterParser urlParamParser=context.getUrlParamParser();  ParameterParser formParamParser=context.getPostParamParser();  List<String> structParams=new ArrayList<String>();  List<StructuralNodeModifier> ddns=new ArrayList<StructuralNodeModifier>();  for (  StructuralNodeModifier snm : this.ddnTableModel.getElements()) {    if (snm.getType().equals(StructuralNodeModifier.Type.StructuralParameter)) {      structParams.add(snm.getName());    } else {      ddns.add(snm);    }  }  if (urlParamParser instanceof StandardParameterParser) {    StandardParameterParser urlStdParamParser=(StandardParameterParser)urlParamParser;    urlStdParamParser.setKeyValuePairSeparators(this.getUrlKvPairSeparators().getText());    urlStdParamParser.setKeyValueSeparators(this.getUrlKeyValueSeparators().getText());    urlStdParamParser.setStructuralParameters(structParams);    context.setUrlParamParser(urlStdParamParser);    urlStdParamParser.setContext(context);  }  if (formParamParser instanceof StandardParameterParser) {    StandardParameterParser formStdParamParser=(StandardParameterParser)formParamParser;    formStdParamParser.setKeyValuePairSeparators(this.getPostKvPairSeparators().getText());    formStdParamParser.setKeyValueSeparators(this.getPostKeyValueSeparators().getText());    context.setPostParamParser(formStdParamParser);    formStdParamParser.setContext(context);  }  context.setDataDrivenNodes(ddns);  if (updateSiteStructure) {    context.restructureSiteTree();  }}  }
class C{  public static _WarningType fromString(final String value) throws SOAPSerializationException {  return (_WarningType)Enumeration.fromString(value,_WarningType.VALUES_TO_INSTANCES);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void generateOres(){  this.generateOre(22,10,OreGens.SULFUR,0,128);  this.generateOre(10,8,OreGens.SYRMORITE,WorldProviderBetweenlands.PITSTONE_HEIGHT,WorldProviderBetweenlands.CAVE_START - 15);  this.generateOre(10,8,OreGens.BONE_ORE,WorldProviderBetweenlands.PITSTONE_HEIGHT,WorldProviderBetweenlands.CAVE_START - 15);  this.generateOre(10,8,OreGens.OCTINE,WorldProviderBetweenlands.PITSTONE_HEIGHT,WorldProviderBetweenlands.CAVE_START - 15);  this.generateOre(4,12,OreGens.SWAMP_DIRT,WorldProviderBetweenlands.PITSTONE_HEIGHT,WorldProviderBetweenlands.CAVE_START - 15);  this.generateOre(0.2F,14,OreGens.LIMESTONE,WorldProviderBetweenlands.PITSTONE_HEIGHT,WorldProviderBetweenlands.CAVE_START - 15);  this.generateOre(3,8,OreGens.VALONITE,0,WorldProviderBetweenlands.PITSTONE_HEIGHT);  this.generateOre(4,8,OreGens.SCABYST,0,WorldProviderBetweenlands.PITSTONE_HEIGHT);  this.generateOre(80,8,OreGens.LIFE_GEM,0,WorldProviderBetweenlands.CAVE_WATER_HEIGHT);  int cycles=1 + (this.rand.nextBoolean() ? this.rand.nextInt(2) : 0);  for (int i=0; i < cycles; i++) {    if (this.rand.nextInt(9 / cycles + 1) == 0) {      int xx=this.x + this.offsetXZ();      int zz=this.z + this.offsetXZ();      int yy=this.world.getHeight(new BlockPos(xx,0,zz)).getY() - 1;      boolean hasMud=false;      for (int yo=0; yo < 16; yo++) {        int bx=yy + yo;        if (this.world.getBlockState(new BlockPos(xx,yy + yo,zz)).getBlock() == BlockRegistry.SWAMP_WATER && this.world.getBlockState(new BlockPos(xx,yy + yo - 1,zz)).getBlock() == BlockRegistry.MUD) {          hasMud=true;          yy=bx - 1;        }      }      if (hasMud) {switch (this.rand.nextInt(3)) {case 0:          this.world.setBlockState(new BlockPos(xx,yy,zz),BlockRegistry.AQUA_MIDDLE_GEM_ORE.getDefaultState());        break;case 1:      this.world.setBlockState(new BlockPos(xx,yy,zz),BlockRegistry.CRIMSON_MIDDLE_GEM_ORE.getDefaultState());    break;case 2:  this.world.setBlockState(new BlockPos(xx,yy,zz),BlockRegistry.GREEN_MIDDLE_GEM_ORE.getDefaultState());break;}}}}}  }
class C{  public static boolean testCircleCircle(Vector2dc centerA,double radiusSquaredA,Vector2dc centerB,double radiusSquaredB){  return testCircleCircle(centerA.x(),centerA.y(),radiusSquaredA,centerB.x(),centerB.y(),radiusSquaredB);}  }
class C{  public static void saveLongValue(String name,long value,boolean isDefault){  if (isDefault) {    preferenceStore.setDefault(name,value);  } else {    preferenceStore.setValue(name,value);  }  try {    preferenceStore.save();  } catch (  IOException e) {    InspectIT.getDefault().createErrorDialog("Error occurred trying to save setting with name '" + name + "' to preference store.",e,-1);  }}  }
class C{  private void closeSession(long index,long timestamp,ServerSessionContext session,CompletableFuture<Void> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  if (!session.state().active()) {    context.executor().execute(null);    return;  }  executor.tick(index,timestamp);  executor.init(index,Instant.ofEpochMilli(timestamp),ServerStateMachineContext.Type.COMMAND);  session.close(index);  for (  SessionListener listener : executor.context().sessions().listeners) {    listener.unregister(session);    listener.close(session);  }  long lastCompleted=calculateLastCompleted(index);  executor.commit();  context.executor().execute(null);}  }
class C{  protected int hash(Object key1,Object key2){  int h=0;  if (key1 != null) {    h^=key1.hashCode();  }  if (key2 != null) {    h^=key2.hashCode();  }  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public static Integer toInteger(String value,Integer defValue){  try {    return Integer.parseInt(value);  } catch (  NumberFormatException e) {    return defValue;  }}  }
class C{  protected boolean isParam(ExpressionNode expr){  while (null != expr) {    if (expr instanceof ElemTemplateElement)     break;    expr=expr.exprGetParent();  }  if (null != expr) {    ElemTemplateElement ete=(ElemTemplateElement)expr;    while (null != ete) {      int type=ete.getXSLToken();switch (type) {case Constants.ELEMNAME_PARAMVARIABLE:        return true;case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_STYLESHEET:      return false;  }  ete=ete.getParentElem();}}return false;}  }
class C{  public static ArrayList<IndexedMatrixValue> reshape(IndexedMatrixValue in,long rows1,long cols1,int brlen1,int bclen1,ArrayList<IndexedMatrixValue> out,long rows2,long cols2,int brlen2,int bclen2,boolean rowwise) throws DMLRuntimeException {  MatrixIndexes ixIn=in.getIndexes();  MatrixBlock mbIn=(MatrixBlock)in.getValue();  Collection<MatrixIndexes> rix=computeAllResultBlockIndexes(ixIn,rows1,cols1,brlen1,bclen1,rows2,cols2,brlen2,bclen2,rowwise);  HashMap<MatrixIndexes,MatrixBlock> rblk=createAllResultBlocks(rix,mbIn.nonZeros,rows1,cols1,brlen1,bclen1,rows2,cols2,brlen2,bclen2,rowwise,out);  long row_offset=(ixIn.getRowIndex() - 1) * brlen1;  long col_offset=(ixIn.getColumnIndex() - 1) * bclen1;  if (mbIn.sparse)   reshapeSparse(mbIn,row_offset,col_offset,rblk,rows1,cols1,rows2,cols2,brlen2,bclen2,rowwise); else   reshapeDense(mbIn,row_offset,col_offset,rblk,rows1,cols1,rows2,cols2,brlen2,bclen2,rowwise);  out=new ArrayList<IndexedMatrixValue>();  for (  Entry<MatrixIndexes,MatrixBlock> e : rblk.entrySet())   out.add(new IndexedMatrixValue(e.getKey(),e.getValue()));  return out;}  }
class C{  public void update(final ReservoirItemsSketch<T> sketchIn){  if (sketchIn == null) {    return;  }  final int maxK=ReservoirSize.decodeValue(encodedMaxK_);  final ReservoirItemsSketch<T> ris=(sketchIn.getK() <= maxK ? sketchIn : sketchIn.downsampledCopy(encodedMaxK_));  if (gadget_ == null) {    gadget_=(sketchIn == ris ? ris.copy() : ris);  } else {    final boolean isModifiable=(sketchIn != ris);    twoWayMergeInternal(ris,isModifiable);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piName;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  piName=piNode.getNodeName();  assertEquals("nodeProcessingInstructionNodeNameAssert1","TEST-STYLE",piName);}  }
class C{  @Override public boolean createNewFile(){  return volume.mDBCon.createFile(path);}  }
class C{  public byte[] sendRequest(RelayedCandidateDatagramSocket relayedCandidateDatagramSocket,Request request) throws StunException {  TransactionID transactionID=TransactionID.createNewTransactionID();  transactionID.setApplicationData(relayedCandidateDatagramSocket);  transactionID=sendRequest(request,false,transactionID);  return (transactionID == null) ? null : transactionID.getBytes();}  }
class C{  @Override public synchronized void refreshRow() throws SQLException {  checkClosed();  if (!this.isUpdatable) {    throw new NotUpdatable();  }  if (this.onInsertRow) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.8"),getExceptionInterceptor());  } else   if (this.rowData.size() == 0) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.9"),getExceptionInterceptor());  } else   if (isBeforeFirst()) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.10"),getExceptionInterceptor());  } else   if (isAfterLast()) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.11"),getExceptionInterceptor());  }  refreshRow(this.updater,this.thisRow);}  }
class C{  public boolean equals(CoordinateDDM o){  return degreesNorth == o.degreesNorth && thousandthsOfMinutesNorth == o.thousandthsOfMinutesNorth && degreesEast == o.degreesEast && thousandthsOfMinutesEast == o.thousandthsOfMinutesEast;}  }
class C{  public void initValuesNa(){  setRequestPort("0");  setHeaderMetadata(new ParallecHeader());  setHttpMethod(HttpMethod.NA);  setEntityBody(PcConstants.COMMAND_VAR_DEFAULT_REQUEST_CONTENT);  setRequestUrlPostfix("");  this.httpPollerProcessor=null;  this.isPollable=false;  this.asyncHttpClient=null;  this.responseHeaderMeta=null;}  }
class C{  public void open(){  int retVal;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  open(m_FileChooser.getSelectedFile(),m_FileChooser.getLoader());}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void testScenario(String aConfiguration,boolean anExpectingAnException,Method aMethodToCall) throws Exception {  openSession(aConfiguration);  Element myElement=selectElement();  String myMethodCallDescription;  if (aMethodToCall != null) {    Object[] myArguments=new Object[aMethodToCall.getParameterTypes().length];    aMethodToCall.invoke(myElement,myArguments);    myMethodCallDescription=aMethodToCall.toString();  } else {    myMethodCallDescription="not called a method";  }  myElement=disableLazyLoaders(myElement);  closeSession();  try {    Assert.assertEquals("parent",myElement.getElement().getValue());    if (anExpectingAnException) {      Assert.fail("Excpected an exception, since " + myMethodCallDescription + " should not trigger lazy loading");    }  } catch (  Exception anException) {    if (!anExpectingAnException) {      Assert.fail("Did not expect an exception, because " + myMethodCallDescription + " should trigger lazy loading");    }  }}  }
class C{  protected void populateBasicUserEventTrazaAuditoria(IsicresAuditEventAccesoRegistroVO eventoAccesoRegistro,TrazaAuditoriaVO trazaCampo){  IsicresAuditEventTrazaBuilderHandlerHelper.populateBasicUserEventTrazaAuditoria(eventoAccesoRegistro,trazaCampo);}  }
class C{  @Interruptible @Pure public static void validateAsTypeDescriptor(String s) throws IllegalArgumentException {  char[] val=s.toCharArray();  int i=0;  if (val.length == 0) {    malformed("is the empty string",s);  }  while (val[i] == '[') {    if (++i >= val.length) {      malformed("has just '[' chars",s);    }  }  if (VM.VerifyAssertions) {    VM._assert(i < val.length);  }  if (val[i] == VoidTypeCode && i != 0) {    malformed("can't have an array of void",s);  }  if (isJavaPrimitive(val[i])) {    if (i != val.length - 1) {      malformed("nothing should follow the primitive typecode '" + Character.toString(val[i]) + "'",s);    }    return;  }  if (VM.VerifyAssertions) {    VM._assert(val[i] != '[' && !isJavaPrimitive(val[i]));  }  if (val[i] != ClassTypeCode) {    malformed("unknown character '" + Character.toString(val[i]) + "'",s);  }  if (!isJavaClassNameInternalForm(val,i,val.length - 1)) {    malformed("doesn't end with a valid class name in internal form",s);  }}  }
class C{  private synchronized void appendMessage(String s){  talogging.append(s);}  }
class C{  public void addBiomes(List<BiomeGenBase> biomes){  allowedBiomes.addAll(getBiomesEntries(biomes));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenDept[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void saveSampleSetID(HttpServletResponse response,String sampleSetID,ServletContext context){  if (sampleSetID == null) {    return;  } else {    Cookie sampleSetIdCookie=new Cookie("SampleSetID",sampleSetID);    sampleSetIdCookie.setMaxAge(60 * 60 * 24* 30);    response.addCookie(sampleSetIdCookie);  }}  }
class C{  private void processDhcpSubnetsDocuments(final State current){  if (current.nextPageLink == null) {    finishTask(current);    return;  }  Operation getOnePageOfDhcpSubnetsDocuments=Operation.createGet(UriUtils.buildUri(getHost(),current.nextPageLink));  getOnePageOfDhcpSubnetsDocuments.setCompletion(null).sendWith(this);}  }
class C{  public void testAddingADocumentFragmentAddsItsChildren(){  Element a=document.createElement("a");  Element b=document.createElement("b");  Element c=document.createElement("c");  DocumentFragment fragment=document.createDocumentFragment();  fragment.appendChild(a);  fragment.appendChild(b);  fragment.appendChild(c);  Node returned=menu.appendChild(fragment);  assertSame(fragment,returned);  NodeList children=menu.getChildNodes();  assertEquals(6,children.getLength());  assertTrue(children.item(0) instanceof Text);  assertEquals(item,children.item(1));  assertTrue(children.item(2) instanceof Text);  assertEquals(a,children.item(3));  assertEquals(b,children.item(4));  assertEquals(c,children.item(5));}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_UseDiscretization) {    m_Disc.input(instance);    instance=m_Disc.output();  }  double[] probs=new double[m_NumClasses];  for (int j=0; j < m_NumClasses; j++) {    probs[j]=m_ClassDistribution.getProbability(j);  }  Enumeration<Attribute> enumAtts=instance.enumerateAttributes();  int attIndex=0;  while (enumAtts.hasMoreElements()) {    Attribute attribute=enumAtts.nextElement();    if (!instance.isMissing(attribute)) {      double temp, max=0;      for (int j=0; j < m_NumClasses; j++) {        temp=Math.max(1e-75,Math.pow(m_Distributions[attIndex][j].getProbability(instance.value(attribute)),m_Instances.attribute(attIndex).weight()));        probs[j]*=temp;        if (probs[j] > max) {          max=probs[j];        }        if (Double.isNaN(probs[j])) {          throw new Exception("NaN returned from estimator for attribute " + attribute.name() + ":\n"+ m_Distributions[attIndex][j].toString());        }      }      if ((max > 0) && (max < 1e-75)) {        for (int j=0; j < m_NumClasses; j++) {          probs[j]*=1e75;        }      }    }    attIndex++;  }  Utils.normalize(probs);  return probs;}  }
class C{  public void createCG(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info("Updated step state for consistency group creation to execute.");    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(dbClient,cgURI,vplexURI));    workflowService.acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.RP_VPLEX_CG));    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPLEX API client.");    BlockConsistencyGroup cg=getDataObject(BlockConsistencyGroup.class,cgURI,dbClient);    if (cg.created(vplexURI)) {      StringSet cgNames=cg.getSystemConsistencyGroups().get(vplexURI.toString());      log.info("Consistency group(s) already created: " + cgNames.toString());      if (!cg.getTypes().contains(Types.VPLEX.name())) {        cg.addConsistencyGroupTypes(Types.VPLEX.name());        dbClient.updateObject(cg);      }      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    Volume firstVPlexVolume=getDataObject(Volume.class,vplexVolumeURIs.get(0),dbClient);    ClusterConsistencyGroupWrapper clusterConsistencyGroup=getClusterConsistencyGroup(firstVPlexVolume,cg);    String cgName=clusterConsistencyGroup.getCgName();    String clusterName=clusterConsistencyGroup.getClusterName();    boolean isDistributed=clusterConsistencyGroup.isDistributed();    URI vaURI=firstVPlexVolume.getVirtualArray();    log.info("Got virtual array for VPLEX volume.");    client.createConsistencyGroup(cgName,clusterName,isDistributed);    log.info("Created VPLEX consistency group.");    cg.setVirtualArray(vaURI);    cg.setStorageController(vplexURI);    cg.addSystemConsistencyGroup(vplexSystem.getId().toString(),BlockConsistencyGroupUtils.buildClusterCgName(clusterName,cgName));    cg.addConsistencyGroupTypes(Types.VPLEX.name());    dbClient.persistObject(cg);    log.info("Updated consistency group in DB.");    WorkflowStepCompleter.stepSucceded(stepId);    log.info("Updated workflow step for consistency group creation to success.");  } catch (  VPlexApiException vex) {    log.error("Exception creating consistency group: " + vex.getMessage(),vex);    WorkflowStepCompleter.stepFailed(stepId,vex);  }catch (  Exception ex) {    log.error("Exception creating consistency group: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.CREATE_CONSISTENCY_GROUP.getName();    ServiceError serviceError=VPlexApiException.errors.createConsistencyGroupFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public int length(URL url){  return url.toString().length();}  }
class C{  public void dispose(){  try {    if (m_pstmt != null)     m_pstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"VAssignment.dispose");  }  m_text=null;  m_button=null;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public void grow(){  if (owner != null) {    owner.sendPrivateText("Your baby dragon grew into a purple dragon.");  }  final Player player=this.owner;  final String currentTitle=this.getTitle();  final int currentXP=this.getXP();  final int currentLevel=this.getLevel();  final PurpleDragon purpledragon=new PurpleDragon(owner);  purpledragon.setPosition(getX(),getY());  if (owner != null) {    player.removePet(this);    player.setPet(purpledragon);  }  if (!currentTitle.startsWith("baby dragon")) {    purpledragon.setTitle(currentTitle);  }  purpledragon.setXP(currentXP);  purpledragon.setLevel(currentLevel);  this.getZone().remove(this);}  }
class C{  private static <T,ID>void addCreateTableStatements(DatabaseType databaseType,TableInfo<T,ID> tableInfo,List<String> statements,List<String> queriesAfter,boolean ifNotExists) throws SQLException {  StringBuilder sb=new StringBuilder(256);  sb.append("CREATE TABLE ");  if (ifNotExists && databaseType.isCreateIfNotExistsSupported()) {    sb.append("IF NOT EXISTS ");  }  databaseType.appendEscapedEntityName(sb,tableInfo.getTableName());  sb.append(" (");  List<String> additionalArgs=new ArrayList<String>();  List<String> statementsBefore=new ArrayList<String>();  List<String> statementsAfter=new ArrayList<String>();  boolean first=true;  for (  FieldType fieldType : tableInfo.getFieldTypes()) {    if (fieldType.isForeignCollection()) {      continue;    } else     if (first) {      first=false;    } else {      sb.append(", ");    }    String columnDefinition=fieldType.getColumnDefinition();    if (columnDefinition == null) {      databaseType.appendColumnArg(tableInfo.getTableName(),sb,fieldType,additionalArgs,statementsBefore,statementsAfter,queriesAfter);    } else {      databaseType.appendEscapedEntityName(sb,fieldType.getColumnName());      sb.append(' ').append(columnDefinition).append(' ');    }  }  databaseType.addPrimaryKeySql(tableInfo.getFieldTypes(),additionalArgs,statementsBefore,statementsAfter,queriesAfter);  databaseType.addUniqueComboSql(tableInfo.getFieldTypes(),additionalArgs,statementsBefore,statementsAfter,queriesAfter);  for (  String arg : additionalArgs) {    sb.append(", ").append(arg);  }  sb.append(") ");  databaseType.appendCreateTableSuffix(sb);  statements.addAll(statementsBefore);  statements.add(sb.toString());  statements.addAll(statementsAfter);  addCreateIndexStatements(databaseType,tableInfo,statements,ifNotExists,false);  addCreateIndexStatements(databaseType,tableInfo,statements,ifNotExists,true);}  }
class C{  public static boolean curlPackage(String uri,String destination,boolean isVerbose,boolean isInheritIO){  File parentDirectory=Paths.get(destination).getParent().toFile();  String cmd=String.format("curl %s -o %s",uri,destination);  int ret=runSyncProcess(isVerbose,isInheritIO,cmd,new StringBuilder(),new StringBuilder(),parentDirectory);  return ret == 0;}  }
class C{  public boolean checkAndRemoveAlias(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,ZoneWwnAlias alias) throws WBEMException {  boolean removed=false;  _log.info("Starting remove alias with name {}",alias.getName());  ZoneWwnAlias existingAlias=null;  if (alias.getAddress() != null && alias.getAddress().length() > 0) {    existingAlias=_smisHelper.getAlias(client,alias.getName(),fabricWwn,true);    if (existingAlias != null && !StringUtils.equalsIgnoreCase(existingAlias.getAddress(),alias.getAddress())) {      _log.info("The existing alias has a WWN other than the expected {}. It will not be removed.",alias.getAddress());      throw NetworkDeviceControllerException.exceptions.aliasWithDifferentWwnExists(alias.getName(),existingAlias.getAddress(),alias.getAddress());    }  } else {    existingAlias=_smisHelper.getAlias(client,alias.getName(),fabricWwn,false);  }  if (existingAlias != null) {    _log.info("Found alias {}. The alias will be removed.",alias.getName());    _smisHelper.removeInstance(client,(CIMObjectPath)existingAlias.getCimObjectPath());    removed=true;  } else {    _log.info("Did not find alias {}. Nothing to do.",alias.getName());  }  return removed;}  }
class C{  public S2LatLngRect(final S2LatLng lo,final S2LatLng hi){  lat=new R1Interval(lo.lat().radians(),hi.lat().radians());  lng=new S1Interval(lo.lng().radians(),hi.lng().radians());}  }
class C{  public XmlHandler deleteClass(Class<?>... classes){  try {    for (    Class<?> clazz : classes)     xml.deleteClass(clazz);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public static int oversize(int minTargetSize,int bytesPerElement){  if (minTargetSize < 0) {    throw new IllegalArgumentException("invalid array size " + minTargetSize);  }  if (minTargetSize == 0) {    return 0;  }  if (minTargetSize > MAX_ARRAY_LENGTH) {    throw new IllegalArgumentException("requested array size " + minTargetSize + " exceeds maximum array in java ("+ MAX_ARRAY_LENGTH+ ")");  }  int extra=minTargetSize >> 3;  if (extra < 3) {    extra=3;  }  int newSize=minTargetSize + extra;  if (newSize + 7 < 0 || newSize + 7 > MAX_ARRAY_LENGTH) {    return MAX_ARRAY_LENGTH;  }  if (Constants.JRE_IS_64BIT) {switch (bytesPerElement) {case 4:      return (newSize + 1) & 0x7ffffffe;case 2:    return (newSize + 3) & 0x7ffffffc;case 1:  return (newSize + 7) & 0x7ffffff8;case 8:default :return newSize;}} else {switch (bytesPerElement) {case 2:return (newSize + 1) & 0x7ffffffe;case 1:return (newSize + 3) & 0x7ffffffc;case 4:case 8:default :return newSize;}}}  }
class C{  public DetectFileTypeAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("DetectFileTypeAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("DetectFileTypeAction.statusbar"));  putValue(NAME,res.getString("DetectFileTypeAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("DetectFileTypeAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DetectFileTypeAction.image")))));}  }
class C{  public Vector3D mul(double a){  return (new Vector3D(x * a,y * a,z * a));}  }
class C{  public double distanceSq(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return (dx * dx + dy * dy);}  }
class C{  private synchronized void cleanupConnection(){  mReconnectHandler.removeCallbacks(mReconnectRunnable);  if (mConnection != null) {    mConnection.removeAsyncStanzaListener(mPacketListener);    if (mConnectionListener != null) {      mConnection.removeConnectionListener(mConnectionListener);    }    if (mConnection.isConnected()) {      try {        mConnection.disconnect();      } catch (      Exception e) {      }      mConnection=null;      mPingManager=null;    }  }  mConnectionListener=null;}  }
class C{  private boolean noPrimariesActive(){  if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active() && !primaryAsList.get(0).initializing()) {    return true;  }  return false;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean isByteArray(){  return (bytes != null && (this.inputNodeSet == null && subNode == null));}  }
class C{  @Override public int numberOfClusters(){  determineNumberOfClusters();  return m_numberOfClusters;}  }
class C{  protected double estimateRemainingTravelCost(final Node fromNode,final Node toNode){  double dist=CoordUtils.calcEuclideanDistance(fromNode.getCoord(),toNode.getCoord()) * getMinTravelCostPerLength();  return dist * this.overdoFactor;}  }
class C{  public void testJsonType() throws Exception {  if (!versionMeetsMinimum(5,7,8)) {    return;  }  createTable("testJsonType","(id INT PRIMARY KEY, jsonDoc JSON)");  assertEquals(1,this.stmt.executeUpdate("INSERT INTO testJsonType VALUES (1, '{\"key1\": \"value1\"}')"));  this.rs=this.stmt.executeQuery("SELECT * FROM testJsonType");  assertEquals("JSON",this.rs.getMetaData().getColumnTypeName(2));  assertTrue(this.rs.next());  assertEquals("{\"key1\": \"value1\"}",this.rs.getString(2));  assertEquals("{\"key1\": \"value1\"}",this.rs.getObject(2));  assertFalse(this.rs.next());  Statement testStmt=this.conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  this.rs=testStmt.executeQuery("SELECT * FROM testJsonType");  assertTrue(this.rs.next());  this.rs.updateString(2,"{\"key1\": \"value1\", \"key2\": \"value2\"}");  this.rs.updateRow();  this.rs=testStmt.executeQuery("SELECT * FROM testJsonType");  assertEquals("JSON",this.rs.getMetaData().getColumnTypeName(2));  assertTrue(this.rs.next());  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getString(2));  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getObject(2));  assertFalse(this.rs.next());  this.pstmt=this.conn.prepareStatement("SELECT * FROM testJsonType");  this.rs=this.pstmt.executeQuery();  assertEquals("JSON",this.rs.getMetaData().getColumnTypeName(2));  assertTrue(this.rs.next());  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getString(2));  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getObject(2));  assertFalse(this.rs.next());  Connection testConn=getConnectionWithProps("useServerPrepStmts=true");  this.pstmt=testConn.prepareStatement("SELECT * FROM testJsonType");  this.rs=this.pstmt.executeQuery();  assertEquals("JSON",this.rs.getMetaData().getColumnTypeName(2));  assertTrue(this.rs.next());  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getString(2));  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",this.rs.getObject(2));  assertFalse(this.rs.next());  testConn.close();  createProcedure("testJsonTypeProc","(OUT jsonDoc JSON) SELECT t.jsonDoc INTO jsonDoc FROM testJsonType t");  CallableStatement testCstmt=this.conn.prepareCall("{CALL testJsonTypeProc(?)}");  testCstmt.registerOutParameter(1,Types.CHAR);  testCstmt.execute();  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",testCstmt.getString(1));  assertEquals("{\"key1\": \"value1\", \"key2\": \"value2\"}",testCstmt.getObject(1));  testJsonTypeCheckFunction(versionMeetsMinimum(5,7,9) ? "SELECT JSON_ARRAY_APPEND('[1]', '$', 2)" : "SELECT JSON_APPEND('[1]', '$', 2)","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_ARRAY_INSERT('[2]', '$[0]', 1)","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_ARRAY(1, 2)","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_CONTAINS_PATH('{\"a\": 1}', 'one', '$.a')","1");  testJsonTypeCheckFunction("SELECT JSON_CONTAINS('{\"a\": 1}', '1', '$.a')","1");  testJsonTypeCheckFunction("SELECT JSON_DEPTH('{\"a\": 1}')","2");  testJsonTypeCheckFunction("SELECT JSON_EXTRACT('[1, 2]', '$[0]')","1");  testJsonTypeCheckFunction("SELECT JSON_INSERT('[1]', '$[1]', 2)","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_KEYS('{\"a\": 1}')","[\"a\"]");  testJsonTypeCheckFunction("SELECT JSON_LENGTH('{\"a\": 1}')","1");  testJsonTypeCheckFunction("SELECT JSON_MERGE('[1]', '[2]')","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_OBJECT('a', 1)","{\"a\": 1}");  testJsonTypeCheckFunction("SELECT JSON_QUOTE('[1]')","\"[1]\"");  testJsonTypeCheckFunction("SELECT JSON_REMOVE('[1, 2]', '$[1]')","[1]");  testJsonTypeCheckFunction("SELECT JSON_REPLACE('[0]', '$[0]', 1)","[1]");  testJsonTypeCheckFunction("SELECT JSON_SEARCH('{\"a\": \"1\"}', 'one', '1')","\"$.a\"");  testJsonTypeCheckFunction("SELECT JSON_SET('[1, 1]', '$[1]', 2)","[1, 2]");  testJsonTypeCheckFunction("SELECT JSON_TYPE('[]')","ARRAY");  testJsonTypeCheckFunction("SELECT JSON_UNQUOTE('\"[1]\"')","[1]");  testJsonTypeCheckFunction("SELECT JSON_VALID('{\"a\": 1}')","1");}  }
class C{  public static AlertDialogUtils newInstance(final int id,final String title,final String message,final String args,final boolean neutralOnly){  final AlertDialogUtils frag=new AlertDialogUtils();  final Bundle bundle=new Bundle();  bundle.putInt("dialog_id",id);  bundle.putString("title",title);  bundle.putString("message",message);  bundle.putString("args",args);  bundle.putBoolean("only_neutral",neutralOnly);  frag.setArguments(bundle);  return frag;}  }
class C{  public boolean hasSameId(SabresObject other){  return id == other.id;}  }
class C{  public static <I,A>Parser<I,A> or(Parser<I,? extends A> p,Parser<I,? extends A> q){  return null;}  }
class C{  public Maximum(){  super("statistical.max",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.NUMERICAL);}  }
class C{  public static <U,R>Function<FluxTValue<U>,FluxTValue<R>> lift(Function<? super U,? extends R> fn){  return null;}  }
class C{  public static void navigateToTrafficPurchasePage(Context context,String sourceFrom){  Intent intent=new Intent(NETWORKASSISTANT_PURCHASE_ACTION);  Bundle bundle=new Bundle();  bundle.putString(BUNDLE_KEY_PURCHASE_FROM,sourceFrom);  intent.putExtra(BUNDLE_KEY_COMMON,bundle);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public BitwiseOpExpression add(String property){  this.getChildren().add(new PropertyValueExpression(property));  return this;}  }
class C{  public ContentFilterElement clone(){  ContentFilterElement result=new ContentFilterElement();  result.FilterOperator=FilterOperator;  result.FilterOperands=FilterOperands == null ? null : FilterOperands.clone();  return result;}  }
class C{  public void noNewStreams(){  deallocate(true,false,false);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  static void checkAccess(ManagementPermission p) throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(p);  }}  }
class C{  private void fireActiveLineRangeEvent(int min,int max){  ActiveLineRangeEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActiveLineRangeListener.class) {      if (e == null) {        e=new ActiveLineRangeEvent(this,min,max);      }      ((ActiveLineRangeListener)listeners[i + 1]).activeLineRangeChanged(e);    }  }}  }
class C{  public void clearAccessibleSelection(){  int childCount=getAccessibleChildrenCount();  for (int i=0; i < childCount; i++) {    removeAccessibleSelection(i);  }}  }
class C{  public static List<org.oscm.internal.vo.VOPricedParameter> convertToUpVOPricedParameter(List<org.oscm.vo.VOPricedParameter> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOPricedParameter> newVO=new ArrayList<org.oscm.internal.vo.VOPricedParameter>();  for (  org.oscm.vo.VOPricedParameter tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public void start(){  isRotating=true;  mPlayPauseDrawable.setPlaying(isRotating);  mHandlerRotate.removeCallbacksAndMessages(null);  mHandlerRotate.postDelayed(mRunnableRotate,ROTATE_DELAY);  if (isAutoProgress) {    mHandlerProgress.removeCallbacksAndMessages(null);    mHandlerProgress.postDelayed(mRunnableProgress,PROGRESS_SECOND_MS);  }  postInvalidate();}  }
class C{  public static int count(String input){  return Iterators.size(lineOffsetIterator(input)) - 1;}  }
class C{  public boolean isFixedAsset(){  Object oo=get_Value(COLUMNNAME_IsFixedAsset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String namespace(){  return theType.namespace();}  }
class C{  public ISO9797Alg3Mac(BlockCipher cipher,int macSizeInBits){  this(cipher,macSizeInBits,null);}  }
class C{  protected String attributeValuesString(Instance instance){  StringBuffer text=new StringBuffer();  if (m_Attributes != null) {    boolean firstOutput=true;    m_Attributes.setUpper(instance.numAttributes() - 1);    for (int i=0; i < instance.numAttributes(); i++)     if (m_Attributes.isInRange(i) && i != instance.classIndex()) {      if (firstOutput)       text.append("("); else       text.append(",");      text.append(instance.toString(i));      firstOutput=false;    }    if (!firstOutput)     text.append(")");  }  return text.toString();}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  try {    field=(String)in.readObject();    String patternString=(String)in.readObject();    pattern=Pattern.compile(patternString,Pattern.CASE_INSENSITIVE);  } catch (  PatternSyntaxException e) {    throw new IOException("Invalid LIKE rule - " + e.getMessage());  }}  }
class C{  public void store(short val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public JCatalog(DataLogicSales dlSales){  this(dlSales,false,false,64,54);}  }
class C{  public SGraphFactoryImpl(){  super();}  }
class C{  public ServiceInstance(DeleteServiceInstanceRequest request){  this.serviceInstanceId=request.getServiceInstanceId();  this.planId=request.getPlanId();  this.serviceDefinitionId=request.getServiceDefinitionId();  this.lastOperation=new GetLastServiceOperationResponse().withOperationState(OperationState.IN_PROGRESS).withDescription("Deprovisioning");}  }
class C{  public static boolean isIPv4Address(String address){  return strToIPv4(address) != null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public UnsignedLong(Random random){  random.nextBytes(value);}  }
class C{  public static MediaView newInstance(MediaView.Config config_){  ImmutableConfig config=ImmutableConfig.copyOf(config_);  Settings settings=Settings.of(config.activity());  if (config.audio() && settings.disableAudio())   config=config.withAudio(false);  if (config.mediaUri().hasDelayFlag()) {    return new DelayedMediaView(config.withMediaUri(config.mediaUri().withDelay(false)));  }  if (!config.mediaUri().isLocal()) {    config=config.withMediaUri(config.mediaUri().withProxy(true));  }  final MediaUri uri=config.mediaUri();  if (uri.getMediaType() == MediaUri.MediaType.VIDEO) {    return new VideoMediaView(config);  } else   if (uri.getMediaType() == MediaUri.MediaType.GIF) {    if (shouldUseGifToWebm(uri,settings)) {      return new Gif2VideoMediaView(config);    } else {      return new GifMediaView(config);    }  } else {    return new ImageMediaView(config);  }}  }
class C{  public void noZoneCommit(Integer vsanId) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.noZoneCommit.nozonecommitvsan.cmd"),vsanId.toString());  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  inSession=false;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void testIsValidUtf8_2Bytes() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(2,IsValidUtf8TestUtil.EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  public void removeCheckingPaths(TreePath[] paths){  for (  TreePath path : paths) {    removeCheckingPath(path);  }}  }
class C{  public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);  sha256_HMAC.init(integrityKey);  return sha256_HMAC.doFinal(byteCipherText);}  }
class C{  public EmptyComponent(WizardComponentContainer container){  super(container);  WizardComponentUtils.emptyGridCell(container.getComposite());  WizardComponentUtils.emptyGridCell(container.getComposite());  WizardComponentUtils.emptyGridCell(container.getComposite());}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  int[] distinctNumbers=new int[10];  int num;  int count=0;  System.out.print("Enter ten numbers: ");  for (int i=0; i < 10; i++) {    num=input.nextInt();    if (isDistinct(distinctNumbers,num)) {      distinctNumbers[count]=num;      count++;    }  }  System.out.println("The number of distinct numbers is " + count);  System.out.print("The distinct numbers are");  for (int i=0; i < distinctNumbers.length; i++) {    if (distinctNumbers[i] > 0)     System.out.print(" " + distinctNumbers[i]);  }  System.out.println();}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public TimeSeries addAndOrUpdate(TimeSeries series){  TimeSeries overwritten=new TimeSeries("Overwritten values from: " + getKey());  for (int i=0; i < series.getItemCount(); i++) {    TimeSeriesDataItem item=series.getRawDataItem(i);    TimeSeriesDataItem oldItem=addOrUpdate(item.getPeriod(),item.getValue());    if (oldItem != null) {      overwritten.add(oldItem);    }  }  return overwritten;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void createRequisition(MWMInOutBoundLine boundline,MProduct product,BigDecimal QtyPlanned){  int C_BPartner_ID=0;  int M_PriceList_ID=0;  MProductPO po=null;  MProductPO[] ppos=MProductPO.getOfProduct(getCtx(),product.getM_Product_ID(),null);  for (  MProductPO ppo : ppos) {    if (ppo.isCurrentVendor() && ppo.getC_BPartner_ID() != 0) {      C_BPartner_ID=ppo.getC_BPartner_ID();      po=ppo;      break;    }  }  if (C_BPartner_ID == 0 && ppos.length > 0) {    C_BPartner_ID=ppos[0].getC_BPartner_ID();  }  if (C_BPartner_ID == 0) {    throw new NoVendorForProductException(product.getName());  }  final String sql="SELECT COALESCE(bp." + MBPartner.COLUMNNAME_PO_PriceList_ID + ",bpg."+ X_C_BP_Group.COLUMNNAME_PO_PriceList_ID+ ")"+ " FROM C_BPartner bp"+ " INNER JOIN C_BP_Group bpg ON (bpg.C_BP_Group_ID=bp.C_BP_Group_ID)"+ " WHERE bp.C_BPartner_ID=?";  M_PriceList_ID=DB.getSQLValueEx(get_TrxName(),sql,C_BPartner_ID);  MRequisition req=new MRequisition(getCtx(),0,get_TrxName());  req.setAD_Org_ID(m_locator.getAD_Org_ID());  req.setAD_User_ID(AD_User_ID);  req.setDateRequired(boundline.getPickDate());  req.setDescription("Generate from Outbound Order");  req.setM_Warehouse_ID(m_locator.getM_Warehouse_ID());  req.setC_DocType_ID(MDocType.getDocType(MDocType.DOCBASETYPE_PurchaseRequisition));  if (M_PriceList_ID > 0)   req.setM_PriceList_ID(M_PriceList_ID);  req.saveEx();  MRequisitionLine reqline=new MRequisitionLine(req);  reqline.setLine(10);  reqline.setAD_Org_ID(m_locator.getAD_Org_ID());  reqline.setC_BPartner_ID(C_BPartner_ID);  reqline.setM_Product_ID(product.getM_Product_ID());  reqline.setPrice();  reqline.setPriceActual(Env.ZERO);  reqline.setQty(QtyPlanned);  reqline.saveEx();  MOrderLine oline=new MOrderLine(getCtx(),boundline.getC_OrderLine_ID(),get_TrxName());  oline.setDescription(oline.getDescription() + " " + Msg.translate(getCtx(),MRequisition.COLUMNNAME_M_Requisition_ID)+ " : "+ req.getDocumentNo());  oline.saveEx();  boundline.setDescription(boundline.getDescription() + " " + Msg.translate(boundline.getCtx(),MRequisition.COLUMNNAME_M_Requisition_ID)+ " : "+ req.getDocumentNo());}  }
class C{  public static Quaternion createFromAxisAngle(ReadonlyVec3D axis,float angle){  angle*=0.5;  float sin=MathUtils.sin(angle);  float cos=MathUtils.cos(angle);  Quaternion q=new Quaternion(cos,axis.getNormalizedTo(sin));  return q;}  }
class C{  public int search(Object object){  int i=size() - 1;  int n=1;  while (i >= 0) {    Object current=get(i);    if ((object == null && current == null) || (object != null && object.equals(current))) {      return n;    }    i--;    n++;  }  return -1;}  }
class C{  public int stepToPreviousScreenEvent() throws JavaRosaException {  try {    if (getEvent() != FormEntryController.EVENT_BEGINNING_OF_FORM) {      int event=stepToPreviousEvent();      while (event == FormEntryController.EVENT_REPEAT_JUNCTURE || event == FormEntryController.EVENT_PROMPT_NEW_REPEAT || (event == FormEntryController.EVENT_QUESTION && indexIsInFieldList()) || ((event == FormEntryController.EVENT_GROUP || event == FormEntryController.EVENT_REPEAT) && !indexIsInFieldList())) {        event=stepToPreviousEvent();      }      if (getEvent() == FormEntryController.EVENT_GROUP) {        FormIndex currentIndex=getFormIndex();        IFormElement element=mFormEntryController.getModel().getForm().getChild(currentIndex);        if (element instanceof GroupDef) {          GroupDef gd=(GroupDef)element;          if (ODKView.FIELD_LIST.equalsIgnoreCase(gd.getAppearanceAttr())) {            FormEntryCaption[] fclist=this.getCaptionHierarchy(currentIndex);            if (fclist.length > 1) {              FormEntryCaption fc=fclist[fclist.length - 2];              GroupDef pd=(GroupDef)fc.getFormElement();              if (pd.getChildren().size() == 1 && ODKView.FIELD_LIST.equalsIgnoreCase(pd.getAppearanceAttr())) {                mFormEntryController.jumpToIndex(fc.getIndex());              }            }          }        }      }    }    return getEvent();  } catch (  RuntimeException e) {    throw new JavaRosaException(e);  }}  }
class C{  public static AlertDialog buildAlert(Context context,CharSequence title,CharSequence msg,CharSequence ok,CharSequence cancel,DialogInterface.OnClickListener lOk,DialogInterface.OnClickListener lCancel){  AlertDialog.Builder builder=new AlertDialog.Builder(context);  if (title != null)   builder.setTitle(title);  if (msg != null)   builder.setMessage(msg);  if (ok != null)   builder.setPositiveButton(ok,lOk);  if (cancel != null)   builder.setNegativeButton(cancel,lCancel);  return builder.create();}  }
class C{  public void close(){  if (this.elasticsearchClient != null) {    this.elasticsearchClient.close();    this.elasticsearchClient=null;  }  if (this.elasticsearchNode != null) {    this.elasticsearchNode.close();    this.elasticsearchNode=null;  }}  }
class C{  public Iterator<SimEvent> iterator(){  return sortedSet.iterator();}  }
class C{  private String commandRenameCategory(String[] parameters){  if (parameters.length != 2) {    return "Rename category: Invalid number of parameters.";  }  String oldCategoryName=parameters[0];  String newCategoryName=parameters[1];  int result=renameCategory(oldCategoryName,newCategoryName);  return "Renamed category '" + oldCategoryName + "'->'"+ newCategoryName+ "' "+ "in "+ result+ " entries.";}  }
class C{  public static void main(String... args) throws Exception {  Log log=new Log();  int level=Integer.getInteger("level",Deflater.BEST_SPEED);  if (args.length == 1) {    File f=new File(args[0]);    if (f.exists()) {      if (f.isDirectory()) {        String fromDir=f.getAbsolutePath();        String toFile=fromDir + ".at";        compress(fromDir,toFile,level);        return;      }      String fromFile=f.getAbsolutePath();      int dot=fromFile.lastIndexOf('.');      if (dot > 0 && dot > fromFile.replace('\\','/').lastIndexOf('/')) {        String toDir=fromFile.substring(0,dot);        extract(fromFile,toDir);        return;      }    }  }  String arg=args.length != 3 ? null : args[0];  if ("-compress".equals(arg)) {    String toFile=args[1];    String fromDir=args[2];    compress(fromDir,toFile,level);  } else   if ("-extract".equals(arg)) {    String fromFile=args[1];    String toDir=args[2];    extract(fromFile,toDir);  } else {    log.println("An archive tool to efficiently compress large directories");    log.println("Command line options:");    log.println("<sourceDir>");    log.println("<compressedFile>");    log.println("-compress <compressedFile> <sourceDir>");    log.println("-extract <compressedFile> <targetDir>");  }}  }
class C{  public SelectClause addWildcard(){  selectList.add(new SelectClauseWildcard());  return this;}  }
class C{  public StatArchiveWriter(StatArchiveDescriptor archiveDescriptor){  this.archiveDescriptor=archiveDescriptor;  if (archiveDescriptor.getArchiveName().endsWith(".gz")) {    try {      this.outStream=new GZIPOutputStream(new FileOutputStream(archiveDescriptor.getArchiveName()),32768);    } catch (    IOException ex) {      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0.toLocalizedString(archiveDescriptor.getArchiveName()),ex);    }  } else {    try {      this.outStream=new BufferedOutputStream(new FileOutputStream(archiveDescriptor.getArchiveName()),32768);    } catch (    IOException ex) {      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0.toLocalizedString(archiveDescriptor.getArchiveName()),ex);    }  }  this.dataOut=new MyDataOutputStream(this.outStream);  if (this.trace) {    String traceFileName=archiveDescriptor.getArchiveName() + ".trace";    try {      this.traceOutStream=new BufferedOutputStream(new FileOutputStream(traceFileName),32768);    } catch (    IOException ex) {      throw new GemFireIOException("Could not open " + traceFileName,ex);    }    this.traceDataOut=new PrintStream(this.traceOutStream);  } else {    this.traceOutStream=null;    this.traceDataOut=null;  }}  }
class C{  public void addAttributeCertificate(X509AttributeCertificateHolder attrCert) throws CMSException {  certs.add(new DERTaggedObject(false,2,attrCert.toASN1Structure()));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__STATE_1:  return state_1 != null && !state_1.isEmpty();case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__TRACE_1:return trace_1 != null && !trace_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public void renderHead(IHeaderResponse response){  super.renderHead(response);  String jQueryString="";  if (firstLoad) {    jQueryString+="jQuery('#showOpenDocumentModal').trigger('click');";    firstLoad=false;  }  response.render(OnLoadHeaderItem.forScript(jQueryString));  if (bModel.getProject() != null) {    annotator.setModelObject(bModel);    annotator.setCollection("#" + bModel.getProject().getName() + "/");    annotator.bratInitRenderLater(response);  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String streamsHeader="";  String outputHeader=null;  int row, col, x, y;  int progress=0;  double myPointer, neighbourPointer;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double[] outflowingVals=new double[]{1,2,4,8,16,32,64,128};  boolean streamsSpecified=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  if (!args[1].toLowerCase().equals("not specified")) {    streamsHeader=args[1];    streamsSpecified=true;  }  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.BOOLEAN);    output.setPreferredPalette("spectrum_black_background.pal");    boolean isParallel;    if (!streamsSpecified) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          if (myPointer != noData) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i]) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");      if (streams.getNumberRows() != rows || streams.getNumberColumns() != cols) {        showFeedback("The flow pointer and streams file must have the same number " + "\nof rows and columns.");        return;      }      double streamsNoData=streams.getNoDataValue();      double streamVal, neighbourStreamVal;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          streamVal=streams.getValue(row,col);          if (myPointer != noData && streamVal != streamsNoData && streamVal > 0) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                neighbourStreamVal=streams.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i] && neighbourStreamVal > 0) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      streams.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Bookmark(final CBookmark bookmark){  m_bookmark=bookmark;  m_bookmark.addListener(m_internalBookmarkListener);}  }
class C{  public boolean isValue(){  return value;}  }
class C{  public synchronized void removeTLCStatusSource(Model[] models){  for (int i=0; i < models.length; i++) {    removeTLCStatusSource(models[i]);  }}  }
class C{  public byte[] evaluateResponse(byte[] responseData) throws SaslException {  if (completed) {    throw new IllegalStateException("CRAM-MD5 authentication already completed");  }  if (aborted) {    throw new IllegalStateException("CRAM-MD5 authentication previously aborted due to error");  }  try {    if (challengeData == null) {      if (responseData.length != 0) {        aborted=true;        throw new SaslException("CRAM-MD5 does not expect any initial response");      }      Random random=new Random();      long rand=random.nextLong();      long timestamp=System.currentTimeMillis();      StringBuffer buf=new StringBuffer();      buf.append('<');      buf.append(rand);      buf.append('.');      buf.append(timestamp);      buf.append('@');      buf.append(fqdn);      buf.append('>');      String challengeStr=buf.toString();      logger.log(Level.FINE,"CRAMSRV01:Generated challenge: {0}",challengeStr);      challengeData=challengeStr.getBytes("UTF8");      return challengeData.clone();    } else {      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"CRAMSRV02:Received response: {0}",new String(responseData,"UTF8"));      }      int ulen=0;      for (int i=0; i < responseData.length; i++) {        if (responseData[i] == ' ') {          ulen=i;          break;        }      }      if (ulen == 0) {        aborted=true;        throw new SaslException("CRAM-MD5: Invalid response; space missing");      }      String username=new String(responseData,0,ulen,"UTF8");      logger.log(Level.FINE,"CRAMSRV03:Extracted username: {0}",username);      NameCallback ncb=new NameCallback("CRAM-MD5 authentication ID: ",username);      PasswordCallback pcb=new PasswordCallback("CRAM-MD5 password: ",false);      cbh.handle(new Callback[]{ncb,pcb});      char pwChars[]=pcb.getPassword();      if (pwChars == null || pwChars.length == 0) {        aborted=true;        throw new SaslException("CRAM-MD5: username not found: " + username);      }      pcb.clearPassword();      String pwStr=new String(pwChars);      for (int i=0; i < pwChars.length; i++) {        pwChars[i]=0;      }      pw=pwStr.getBytes("UTF8");      String digest=HMAC_MD5(pw,challengeData);      logger.log(Level.FINE,"CRAMSRV04:Expecting digest: {0}",digest);      clearPassword();      byte[] expectedDigest=digest.getBytes("UTF8");      int digestLen=responseData.length - ulen - 1;      if (expectedDigest.length != digestLen) {        aborted=true;        throw new SaslException("Invalid response");      }      int j=0;      for (int i=ulen + 1; i < responseData.length; i++) {        if (expectedDigest[j++] != responseData[i]) {          aborted=true;          throw new SaslException("Invalid response");        }      }      AuthorizeCallback acb=new AuthorizeCallback(username,username);      cbh.handle(new Callback[]{acb});      if (acb.isAuthorized()) {        authzid=acb.getAuthorizedID();      } else {        aborted=true;        throw new SaslException("CRAM-MD5: user not authorized: " + username);      }      logger.log(Level.FINE,"CRAMSRV05:Authorization id: {0}",authzid);      completed=true;      return null;    }  } catch (  UnsupportedEncodingException e) {    aborted=true;    throw new SaslException("UTF8 not available on platform",e);  }catch (  NoSuchAlgorithmException e) {    aborted=true;    throw new SaslException("MD5 algorithm not available on platform",e);  }catch (  UnsupportedCallbackException e) {    aborted=true;    throw new SaslException("CRAM-MD5 authentication failed",e);  }catch (  SaslException e) {    throw e;  }catch (  IOException e) {    aborted=true;    throw new SaslException("CRAM-MD5 authentication failed",e);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.409 -0500",hash_original_method="ABE089B555C0BBE77A7ADBD2839474AC",hash_generated_method="000E1DE47EA28A846705866007F87BFF") public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthButtonUI();}  }
class C{  public void updateRepeatState(){switch (MusicUtils.getRepeatMode()) {case MusicPlaybackService.REPEAT_ALL:    setContentDescription(getResources().getString(R.string.accessibility_repeat_all));  setImageDrawable(mResources.getDrawable(REPEAT_ALL));break;case MusicPlaybackService.REPEAT_CURRENT:setContentDescription(getResources().getString(R.string.accessibility_repeat_one));setImageDrawable(mResources.getDrawable(REPEAT_CURRENT));break;case MusicPlaybackService.REPEAT_NONE:setContentDescription(getResources().getString(R.string.accessibility_repeat));setImageDrawable(mResources.getDrawable(REPEAT_NONE));break;default :break;}}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.207 -0400",hash_original_method="1573E83A14D593E0BFADABB9AEDBB7D2",hash_generated_method="0C16F7A946D77FA08793AC10C12614CA") public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  private Property[] parseProperties(final String contents){  final String[] parts=contents.split(";");  final List<Property> resultsAsList=new ArrayList<Property>();  for (  String part : parts) {    try {      if (!StringUtils.isEmpty(part.trim())) {        resultsAsList.add(new Property(part));      }    } catch (    final Exception e) {      LOG.warn(e.getMessage(),e);    }  }  return resultsAsList.toArray(new Property[resultsAsList.size()]);}  }
class C{  public ParseException(String detailMessage,int location){  super(detailMessage + (" (at offset " + location + ")"));  errorOffset=location;}  }
class C{  private final boolean checkValidAndUpdateMaterialDiff(){  try {    MaterialDiff md=Util.getMaterialDiff(cb.pos);    whiteFigText.setText(md.white);    blackFigText.setText(md.black);    String fen=TextIO.toFEN(cb.pos);    TextIO.readFEN(fen);    status.setText("");    return true;  } catch (  ChessParseError e) {    status.setText(getParseErrString(e));  }  return false;}  }
class C{  protected void preprocessDiagnostic(JCDiagnostic diag){  for (  Object o : diag.getArgs()) {    if (o != null) {      preprocessArgument(o);    }  }  if (diag.isMultiline()) {    for (    JCDiagnostic d : diag.getSubdiagnostics())     preprocessDiagnostic(d);  }}  }
class C{  public static Job asyncQuery(final Bigquery bigquery,final String projectId,final String querySql,final boolean useBatchMode,final boolean useLegacySql) throws IOException {  JobConfigurationQuery queryConfig=new JobConfigurationQuery().setQuery(querySql).setUseLegacySql(useLegacySql);  if (useBatchMode) {    queryConfig.setPriority("BATCH");  }  Job job=new Job().setConfiguration(new JobConfiguration().setQuery(queryConfig));  return bigquery.jobs().insert(projectId,job).execute();}  }
class C{  public void resume(){  this.bot.log(this,"Resuming",Bot.FINE,this);  if (!this.bot.mind().getThought(Consciousness.class).isEnabled()) {    clear();    return;  }  Set<Vertex> oldVerticies=new HashSet<Vertex>(allActive());  int level=1;  while ((oldVerticies.size() > MAX_SIZE) && (level < 256)) {    Iterator<Vertex> iterator=oldVerticies.iterator();    while ((oldVerticies.size() > MAX_SIZE) && iterator.hasNext()) {      Vertex vertex=iterator.next();      if ((!vertex.isPrimitive()) && vertex.getConsciousnessLevel() <= level) {        iterator.remove();      }    }    level=level * 2;  }  clear();  for (  Vertex oldVertex : oldVerticies) {    Vertex newVertex=findById(oldVertex.getId());    if (newVertex != null) {      newVertex.setConsciousnessLevel(oldVertex.getConsciousnessLevel());      if (newVertex.hasData()) {        this.verticiesByData.put(newVertex.getData(),newVertex);      }    }  }}  }
class C{  public CommandOutcome run(){  CommandOutcome result=runtime.getRunner().run();  if (!result.isSuccess()) {    String message=result.getMessage() != null ? "Error executing runtime: " + result.getMessage() : "Error executing runtime";    runtime.getBootLogger().stderr(message,result.getException());  }  return result;}  }
class C{  public void denyTypesByRegExp(final String... regexps){  denyPermission(new RegExpTypePermission(regexps));}  }
class C{  @Override public Long move(final byte[] key,final int dbIndex){  checkIsInMultiOrPipeline();  client.move(key,dbIndex);  return client.getIntegerReply();}  }
class C{  public void destroyOfflineData(){  Map<InternalDistributedMember,PersistentMemberID> onlineMembers=advisor.adviseInitializedPersistentMembers();  persistenceAdvisor.checkMyStateOnMembers(onlineMembers.keySet());  diskRegion.beginDestroyDataStorage();  persistenceAdvisor.finishPendingDestroy();  if (logger.isDebugEnabled()) {    logger.debug("destroyed persistent data for {}" + getFullPath());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (nonGreedy: ");  result.append(nonGreedy);  result.append(')');  return result.toString();}  }
class C{  public IPAddressName(byte[] address) throws IOException {  if (address.length == 4 || address.length == 8) {    isIPv4=true;  } else   if (address.length == 16 || address.length == 32) {    isIPv4=false;  } else {    throw new IOException("Invalid IPAddressName");  }  this.address=address;}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private <T extends DataObject>void testSet(DbClient dbClient,Class<T> clazz) throws Exception {  T obj=clazz.newInstance();  setAll(clazz,obj);  dbClient.persistObject(obj);  DataObject qObj=dbClient.queryObject(clazz,obj.getId());  getAllAndVerify(clazz,qObj);}  }
class C{  private int[] skipScan(int numVals,int rl){  int[] ret=new int[numVals];  final int blksz=BitmapEncoder.BITMAP_BLOCK_SZ;  if (rl > 0) {    int rskip=(getNumRows() / 2 / blksz) * blksz;    for (int k=0; k < numVals; k++) {      int boff=_ptr[k];      int blen=len(k);      int start=(rl >= rskip) ? rskip : 0;      int bix=(rl >= rskip) ? _skiplist[k] : 0;      for (int i=start; i < rl && bix < blen; i+=blksz) {        bix+=_data[boff + bix] + 1;      }      ret[k]=bix;    }  }  return ret;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  Vector<DerValue> v=new Vector<>();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(authenticator_vno));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp.toByteArray()));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),cname.getRealm().asn1Encode()));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),cname.asn1Encode()));  if (cksum != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),cksum.asn1Encode()));  }  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(cusec));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),temp.toByteArray()));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),ctime.asn1Encode()));  if (subKey != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),subKey.asn1Encode()));  }  if (seqNumber != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),temp.toByteArray()));  }  if (authorizationData != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),authorizationData.asn1Encode()));  }  DerValue der[]=new DerValue[v.size()];  v.copyInto(der);  temp=new DerOutputStream();  temp.putSequence(der);  DerOutputStream out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x02),temp);  return out.toByteArray();}  }
class C{  public StreamPipe(InputStream source,OutputStream destination){  this(source,destination,null);}  }
class C{  private void startPlaying(){  if (isRunning) {    return;  }  tickPosition=getLoopStartPoint();  tickPositionSetTime=System.currentTimeMillis();  isRunning=true;synchronized (this) {    notifyAll();  }}  }
class C{  public boolean isEnd(){  return false;}  }
class C{  public boolean isBorder(){  return this.border;}  }
class C{  protected boolean hasOutstandingChanges(){  return (fDocumentNo.hasChanged() || fDescription.hasChanged() || fPOReference.hasChanged()|| fIsSOTrx.hasChanged()|| fBPartner_ID.hasChanged()|| fShipper_ID.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged());}  }
class C{  private void releaseWriteLocksForClear(RegionEventImpl regionEvent,Set<InternalDistributedMember> participants){  ARMLockTestHook alth=getRegionMap().getARMLockTestHook();  if (alth != null)   alth.beforeRelease(this,regionEvent);  getVersionVector().unlockForClear(getMyId());  DistributedClearOperation.releaseLocks(regionEvent,participants);  if (alth != null)   alth.afterRelease(this,regionEvent);}  }
class C{  public static String normalizeLong(String value){  return normalizeIntegerValue(value,"-9223372036854775808","9223372036854775807");}  }
class C{  protected BigIntegerType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public void addChannelEventListener(Listener<ChannelEvent> listener){  mChannelEventBroadcaster.addListener(listener);}  }
class C{  public JavaRDD<Envelope> rePartition(Integer partitions){  return this.rawRectangleRDD.repartition(partitions);}  }
class C{  public Tuple make(NamedValue... builders){  Map<String,Object> values=new HashMap<>();  Stream.of(builders).forEach(null);  return make(values);}  }
class C{  @Override public int hashCode(){  return hashcode;}  }
class C{  DroidsafeTextMarkerVisitor(IDocument document){  this.document=document;}  }
class C{  public ImageInfo(int image,int title){  this.image=image;  this.title=title;}  }
class C{  public void doData(){  if (m_tradingdays.isDirty()) {    this.setStatusBarMessage("Please save before running strategy ...\n",BasePanel.WARNING);  } else {    runStrategy(m_tradingdays,true);  }}  }
class C{  @Override public TextAnnotation annotateTextAnnotation(TextAnnotation ta,boolean replaceExistingViews) throws AnnotatorException {  for (  String view : viewProviders.keySet())   addView(ta,view);  return ta;}  }
class C{  public boolean canImport(JComponent c,DataFlavor[] flavors,DropInfo ddi){  return false;}  }
class C{  void validateBlock(Row row){  if (!row.getDatabase().isValidate()) {    return;  }  int rowHead=_rowHead;  int blobTail=_blobTail;  if (rowHead < blobTail) {    throw new IllegalStateException(this + " rowHead:" + rowHead+ " blobTail:"+ blobTail);  }  int rowOffset=_rowHead;  byte[] buffer=_buffer;  while (rowOffset < BLOCK_SIZE) {    int code=buffer[rowOffset] & CODE_MASK;switch (code) {case INSERT:      row.validate(buffer,rowOffset,rowHead,blobTail);    break;case INSERT_DEAD:case REMOVE:  break;default :throw new IllegalStateException(this + " " + rowOffset+ " "+ code+ " unknown code");}int len=getLength(code,row);if (len < 0 || len + rowOffset > BLOCK_SIZE) {throw new IllegalStateException(this + " " + rowOffset+ " code:"+ code+ " len:"+ len+ " invalid len");}rowOffset+=len;}}  }
class C{  public static int binarySearch(short[] array,short value){  return binarySearch(array,0,array.length,value);}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.list.remove(index) : null;}  }
class C{  public VNXeCommandJob createNfsShareForSnap(String snapId,List<String> roEndpoints,List<String> rwEndpoints,List<String> rootEndpoints,AccessEnum access,String path,String shareName,String comments) throws VNXeException {  _logger.info("creating nfs share for the snap: " + snapId);  NfsShareRequests request=new NfsShareRequests(_khClient);  String softwareVersion=getBasicSystemInfo().getSoftwareVersion();  FileSystemSnapRequests req=new FileSystemSnapRequests(_khClient,softwareVersion);  VNXeFileSystemSnap snapshot=req.getFileSystemSnap(snapId,softwareVersion);  if (snapshot == null) {    _logger.info("Could not find snapshot in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find snapshot in the vnxe for: " + snapId);  }  NfsShareCreateForSnapParam nfsCreateParam=new NfsShareCreateForSnapParam();  VNXeBase snap=new VNXeBase(snapId);  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {    nfsCreateParam.setFilesystemSnap(snap);  } else {    nfsCreateParam.setSnap(snap);  }  List<VNXeBase> roHosts=getHosts(roEndpoints);  List<VNXeBase> rwHosts=getHosts(rwEndpoints);  List<VNXeBase> rootHosts=getHosts(rootEndpoints);  VNXeCommandJob job=null;  VNXeNfsShare nfsShareFound=request.findSnapNfsShare(snapId,shareName,softwareVersion);  if (nfsShareFound == null) {    nfsCreateParam.setReadOnlyHosts(roHosts);    nfsCreateParam.setReadWriteHosts(rwHosts);    nfsCreateParam.setRootAccessHosts(rootHosts);    nfsCreateParam.setName(shareName);    nfsCreateParam.setPath(path);    if (comments != null) {      nfsCreateParam.setDescription(comments);    }    request.unsetQueryParameters();    job=request.createShareForSnapshot(nfsCreateParam);  } else {    String nfsShareId=nfsShareFound.getId();    NFSShareDefaultAccessEnum nfsShareDefaultAccess=nfsShareFound.getDefaultAccess();    NfsShareModifyForShareParam nfsModifyParam=new NfsShareModifyForShareParam();    List<VNXeBase> hosts=new ArrayList<VNXeBase>();    nfsModifyParam.setReadOnlyHosts(roHosts);    nfsModifyParam.setReadWriteHosts(rwHosts);    nfsModifyParam.setRootAccessHosts(rootHosts);    if (comments != null) {      nfsModifyParam.setDescription(comments);    }    if (access == null) {      if (nfsShareFound != null) {        hosts.addAll(nfsShareFound.getNoAccessHosts());        hosts.addAll(nfsShareFound.getRootAccessHosts());        hosts.addAll(nfsShareFound.getReadWriteHosts());        hosts.addAll(nfsShareFound.getReadOnlyHosts());      }      if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.ROOT)) {        if (!hosts.isEmpty()) {          nfsModifyParam.setRootAccessHosts(hosts);        } else {          nfsModifyParam.setRootAccessHosts(null);        }        nfsModifyParam.setNoAccessHosts(null);        nfsModifyParam.setReadWriteHosts(null);        nfsModifyParam.setReadOnlyHosts(null);      } else       if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.READONLY)) {        if (!hosts.isEmpty()) {          nfsModifyParam.setReadOnlyHosts(hosts);        } else {          nfsModifyParam.setReadOnlyHosts(null);        }        nfsModifyParam.setNoAccessHosts(null);        nfsModifyParam.setReadWriteHosts(null);        nfsModifyParam.setRootAccessHosts(null);      } else       if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.READWRITE)) {        if (!hosts.isEmpty()) {          nfsModifyParam.setReadWriteHosts(hosts);        } else {          nfsModifyParam.setReadWriteHosts(null);        }        nfsModifyParam.setNoAccessHosts(null);        nfsModifyParam.setReadOnlyHosts(null);        nfsModifyParam.setRootAccessHosts(null);      } else       if (nfsShareDefaultAccess.equals(NFSShareDefaultAccessEnum.NONE)) {        if (!hosts.isEmpty()) {          nfsModifyParam.setNoAccessHosts(hosts);        } else {          nfsModifyParam.setNoAccessHosts(null);        }        nfsModifyParam.setReadWriteHosts(null);        nfsModifyParam.setReadOnlyHosts(null);        nfsModifyParam.setRootAccessHosts(null);      }    }    request.unsetQueryParameters();    job=request.modifyShareForSnapshot(nfsShareId,nfsModifyParam);  }  return job;}  }
class C{  protected Expression notequals(int opPos) throws TransformerException {  return compileOperation(new NotEquals(),opPos);}  }
class C{  private static EncryptionKey generateRandomKey(int eType) throws KrbException {  char[] pass=randomPassword();  String algo;switch (eType) {case EncryptedData.ETYPE_DES_CBC_MD5:    algo="DES";  break;case EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD:algo="DESede";break;case EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96:algo="AES128";break;case EncryptedData.ETYPE_ARCFOUR_HMAC:algo="ArcFourHMAC";break;case EncryptedData.ETYPE_AES256_CTS_HMAC_SHA1_96:algo="AES256";break;default :algo="DES";break;}return new EncryptionKey(pass,"NOTHING",algo);}  }
class C{  public IntArrayList(int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Invalid capacity: " + initialCapacity);  }  array=new int[initialCapacity];  size=0;}  }
class C{  public static boolean viaAny(final X500Name p1,final X500Name p2){  return viaEquals(p1,p2) || viaName(p1,p2);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LogAxis)) {    return false;  }  LogAxis that=(LogAxis)obj;  if (this.base != that.base) {    return false;  }  if (!ObjectUtilities.equal(this.baseSymbol,that.baseSymbol)) {    return false;  }  if (!this.baseFormatter.equals(that.baseFormatter)) {    return false;  }  if (this.smallestValue != that.smallestValue) {    return false;  }  if (!ObjectUtilities.equal(this.numberFormatOverride,that.numberFormatOverride)) {    return false;  }  return super.equals(obj);}  }
class C{  public static String updString(int i){  sections.check(i);  return updateSections[i];}  }
class C{  public boolean isClosed() throws SQLException {  return (this.closed || this.mc.isClosed());}  }
class C{  public void clearKeys(){  keys.clear();  uniqueKeys.clear();  nonKeyColumns.clear();  nonKeyColumns.addAll(this.allColumns);}  }
class C{  public WriteMultipleRegistersRequest(int first,Register[] registers){  setFunctionCode(Modbus.WRITE_MULTIPLE_REGISTERS);  setReference(first);  setRegisters(registers);}  }
class C{  protected void paint(CGMDisplay d){  for (  Command c : commandList) {    c.paint(d);  }}  }
class C{  public void processResponse(StunResponseEvent response){}  }
class C{  protected void connected(Connection connection){  policy.setSelectedProxy(connection.getRoute().getProxy());  connected=true;}  }
class C{  public boolean after(Timestamp ts){  return compareTo(ts) > 0;}  }
class C{  protected final void addValidator(String name,String validatorId){  this.factories.put(name,new ValidatorHandlerFactory(validatorId));}  }
class C{  public Iterator sortedKeys(){  return new TreeSet(this.map.keySet()).iterator();}  }
class C{  UnknownAction(List<String> suggestions){  Collections.sort(suggestions);  this.suggestions=suggestions;}  }
class C{  public LambdaIndividual generateTreeForInt(final EvolutionState state,int theInt){  LambdaIndividual toBreturn=new LambdaIndividual();  LambdaTree tree=new LambdaTree();  tree.child=new LNode();  GPNode iter=tree.child;  iter.parent=tree;  GPNode toBeParent=iter;  iter.children[0]=new LNode();  iter=iter.children[0];  iter.argposition=0;  iter.parent=toBeParent;  if (theInt == 0) {    toBeParent=iter;    GPNode temp=new IndexNode(1);    iter.children[0]=temp;    iter=iter.children[0];    iter.argposition=0;    iter.parent=toBeParent;  } else {    toBeParent=iter;    iter.children[0]=new PNode();    iter=iter.children[0];    iter.argposition=0;    iter.parent=toBeParent;    toBeParent=iter;    iter.children[0]=new IndexNode(2);    iter.children[0].argposition=0;    iter.children[0].parent=toBeParent;    for (int i=0; i < theInt - 1; i++) {      toBeParent=iter;      iter.children[1]=new PNode();      iter=iter.children[1];      iter.argposition=1;      iter.parent=toBeParent;      toBeParent=iter;      iter.children[0]=new IndexNode(2);      iter.children[0].argposition=0;      iter.children[0].parent=toBeParent;    }    toBeParent=iter;    iter.children[1]=new IndexNode(1);    iter=iter.children[1];    iter.argposition=1;    iter.parent=toBeParent;  }  toBreturn.trees[0]=tree;  return toBreturn;}  }
class C{  private Element clipToSVG(Shape clip){  Element clipDef=generatorContext.domFactory.createElementNS(SVG_NAMESPACE_URI,SVG_CLIP_PATH_TAG);  clipDef.setAttributeNS(null,SVG_CLIP_PATH_UNITS_ATTRIBUTE,SVG_USER_SPACE_ON_USE_VALUE);  clipDef.setAttributeNS(null,SVG_ID_ATTRIBUTE,generatorContext.idGenerator.generateID(ID_PREFIX_CLIP_PATH));  Element clipPath=shapeConverter.toSVG(clip);  if (clipPath != null) {    clipDef.appendChild(clipPath);    return clipDef;  } else {    clipDef.appendChild(shapeConverter.toSVG(ORIGIN));    return clipDef;  }}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat){  m_SelectCols.setUpper(inputFormat.numAttributes() - 1);  m_SelectedAttributes=m_SelectCols.getSelection();  double[][][] freqs=new double[inputFormat.numAttributes()][][];  for (  int m_SelectedAttribute : m_SelectedAttributes) {    int current=m_SelectedAttribute;    Attribute att=inputFormat.attribute(current);    if ((current != inputFormat.classIndex()) && (att.isNominal())) {      freqs[current]=new double[att.numValues()][inputFormat.numClasses()];    }  }  for (  Instance inst : inputFormat) {    for (    int m_SelectedAttribute : m_SelectedAttributes) {      int current=m_SelectedAttribute;      if ((current != inputFormat.classIndex()) && (inputFormat.attribute(current).isNominal())) {        if (!inst.isMissing(current) && !inst.classIsMissing()) {          freqs[current][(int)inst.value(current)][(int)inst.classValue()]+=inst.weight();        }      }    }  }  m_AttToBeModified=new boolean[inputFormat.numAttributes()];  m_Indicators=new int[inputFormat.numAttributes()][];  for (  int m_SelectedAttribute : m_SelectedAttributes) {    int current=m_SelectedAttribute;    if ((current != inputFormat.classIndex()) && (inputFormat.attribute(current).isNominal())) {      if (m_Debug) {        System.err.println(inputFormat.attribute(current));      }      m_Indicators[current]=mergeValues(freqs[current]);      if (m_Debug) {        for (int j=0; j < m_Indicators[current].length; j++) {          System.err.print(" - " + m_Indicators[current][j] + " - ");        }        System.err.println();      }      for (int k=0; k < m_Indicators[current].length; k++) {        if (m_Indicators[current][k] != k) {          m_AttToBeModified[current]=true;        }      }    }  }  ArrayList<Attribute> atts=new ArrayList<Attribute>();  for (int i=0; i < inputFormat.numAttributes(); i++) {    int current=i;    Attribute att=inputFormat.attribute(current);    if (m_AttToBeModified[i]) {      int numValues=0;      for (int j=0; j < m_Indicators[current].length; j++) {        if (m_Indicators[current][j] + 1 > numValues) {          numValues=m_Indicators[current][j] + 1;        }      }      ArrayList<StringBuilder> vals=new ArrayList<StringBuilder>(numValues);      for (int j=0; j < numValues; j++) {        vals.add(null);      }      for (int j=0; j < m_Indicators[current].length; j++) {        int index=m_Indicators[current][j];        StringBuilder val=vals.get(index);        if (val == null) {          if (m_UseShortIdentifiers) {            vals.set(index,new StringBuilder("" + (index + 1)));          } else {            vals.set(index,new StringBuilder(att.value(j)));          }        } else {          if (!m_UseShortIdentifiers) {            vals.get(index).append("_or_").append(att.value(j));          }        }      }      ArrayList<String> valsAsStrings=new ArrayList<String>(vals.size());      for (      StringBuilder val : vals) {        valsAsStrings.add(val.toString());      }      atts.add(new Attribute(att.name() + "_merged_values",valsAsStrings));    } else {      atts.add((Attribute)att.copy());    }  }  Instances data=new Instances(inputFormat.relationName(),atts,0);  data.setClassIndex(inputFormat.classIndex());  return data;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void testGetContextWhenOverrideAndMiddleSlash(){  WAR war=new WAR("c:/some/path/to/war/test.war");  war.setContext("/a/b");  assertEquals("a/b",war.getContext());}  }
class C{  public boolean bindLocked(){  UserState userState=getUserStateLocked(mUserId);  if (!mIsAutomation) {    if (mService == null && mContext.bindServiceAsUser(mIntent,this,Context.BIND_AUTO_CREATE,new UserHandle(mUserId))) {      userState.mBindingServices.add(mComponentName);    }  } else {    userState.mBindingServices.add(mComponentName);    mService=userState.mUiAutomationServiceClient.asBinder();    onServiceConnected(mComponentName,mService);    userState.mUiAutomationService=this;  }  return false;}  }
class C{  public void merge(Config s){  if (s == null) {    return;  }  for (  String section : s.getSections()) {    for (    String subsection : s.getSubsections(section)) {      for (      String name : s.getNames(section,subsection)) {        setStringList(section,subsection,name,Lists.newArrayList(s.getStringList(section,subsection,name)));      }    }    for (    String name : s.getNames(section,true)) {      setStringList(section,null,name,Lists.newArrayList(s.getStringList(section,null,name)));    }  }}  }
class C{  private static GridClientDataAffinity resolveAffinity(String affinity) throws GridClientException {  if (F.isEmpty(affinity))   return null;  if ("partitioned".equals(affinity))   return new GridClientPartitionAffinity();  return newInstance(GridClientDataAffinity.class,affinity);}  }
class C{  public void prepare(){  valuePool.prepare();  rootLocationPool.prepareNonBlocking();}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  @Override protected void finalize(){  try {    if (mWindow != null) {      if (mStackTrace != null) {        String sql=mQuery.getSql();        int len=sql.length();        StrictMode.onSqliteObjectLeaked("Finalizing a Cursor that has not been deactivated or closed. " + "database = " + mQuery.getDatabase().getLabel() + ", table = "+ mEditTable+ ", query = "+ sql.substring(0,(len > 1000) ? 1000 : len),mStackTrace);      }      close();    }  }  finally {    super.finalize();  }}  }
class C{  private String streamAttachment(HttpServletRequest request,HttpServletResponse response){  int C_RfQ_ID=WebUtil.getParameterAsInt(request,"C_RfQ_ID");  if (C_RfQ_ID == 0) {    log.fine("streamAttachment - no ID)");    return "No RfQ ID";  }  Properties ctx=JSPEnv.getCtx(request);  MRfQ doc=new MRfQ(ctx,C_RfQ_ID,null);  if (doc.getC_RfQ_ID() != C_RfQ_ID) {    log.fine("streamAttachment - RfQ not found - ID=" + C_RfQ_ID);    return "RfQ not found";  }  if (!doc.isPdfAttachment())   return "No PDF Attachment found";  byte[] data=doc.getPdfAttachment();  if (data == null)   return "No PDF Attachment";  try {    int bufferSize=2048;    int fileLength=data.length;    response.setContentType("application/pdf");    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    log.fine("streamAttachment - length=" + fileLength);    long time=System.currentTimeMillis();    ServletOutputStream out=response.getOutputStream();    out.write(data);    out.flush();    out.close();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.fine("streamInvoice - length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec");  } catch (  IOException ex) {    log.log(Level.SEVERE,"streamAttachment - " + ex);    return "Streaming error";  }  return null;}  }
class C{  public double eval(double params[]){  return (params[0] / params[1]);}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public void reset(){  for (  CodenvyClasspathLocation location : this.locations) {    if (location instanceof ClasspathSourceDirectory)     location.cleanup();  }}  }
class C{  @LargeTest public void testSkipVisibilityHidden() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>First </div>"+ "<div style=\"visibility:hidden;\">Second</div>"+ "<div> Third</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  @SuppressWarnings({"unused","unchecked"}) public <RestrictionT>Coder<RestrictionT> invokeGetRestrictionCoder(CoderRegistry registry) throws CannotProvideCoderException {  return (Coder)registry.getCoder(TypeDescriptor.of(restrictionType.getType()));}  }
class C{  public void remove() throws IllegalStateException, UnsupportedOperationException {  throw new UnsupportedOperationException("remove");}  }
class C{  public void pause() throws IllegalStateTransitionException {  assertStateTransitionsAllowed();  if (state != AdapterState.STARTED) {    throw new IllegalStateTransitionException("Cannot pause from the " + state + " state");  }  state=AdapterState.PAUSED;}  }
class C{  public void d(Object str){  if (debug) {    if (logLevel <= Log.DEBUG) {      String name=getFunctionName();      if (name != null) {        Log.d(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.d(tag,str.toString());      }    }  }}  }
class C{  public DLSequence(){}  }
class C{  public void mouseMoved(MouseEvent e){  HotSpot hotSpot=this.getActiveHotSpot();  if (hotSpot != null) {    Cursor cursor=hotSpot.getCursor();    if (cursor != null) {      ((Component)this.wwd).setCursor(cursor);      this.customCursor=true;    }  }}  }
class C{  static synchronized void addToCurrentMacro(String id,String actionCommand){  currentMacro.addMacroRecord(new Macro.MacroRecord(id,actionCommand));}  }
class C{  public void testEmpty(){  LinkedBlockingDeque q=new LinkedBlockingDeque();  assertTrue(q.isEmpty());  q.add(new Integer(1));  assertFalse(q.isEmpty());  q.add(new Integer(2));  q.removeFirst();  q.removeFirst();  assertTrue(q.isEmpty());}  }
class C{  private synchronized void closeCamera(){  if (mCamera == null) {    return;  }  if (LogUtils.isActive) {    Log.d(LOGTAG,"Close camera");  }  mCamera.setPreviewCallback(null);  if (mCameraPreviewRunning) {    mCameraPreviewRunning=false;    mCamera.stopPreview();  }  mCamera.release();  mCamera=null;}  }
class C{  public static Label[] newLabels(int cnt){  Label[] r=new Label[cnt];  for (int i=0; i < cnt; i++)   r[i]=new Label();  return r;}  }
class C{  private Point2D.Double[] toPoints(IXMLElement elem,String str) throws IOException {  StringTokenizer tt=new StringTokenizer(str," ,");  Point2D.Double[] points=new Point2D.Double[tt.countTokens() / 2];  for (int i=0; i < points.length; i++) {    points[i]=new Point2D.Double(toNumber(elem,tt.nextToken()),toNumber(elem,tt.nextToken()));  }  return points;}  }
class C{  protected void informPresenter(int fieldId){  if (presenter != null) {    presenter.modelChanged(this,fieldId);  }}  }
class C{  public boolean isComplete(){  return this.state == TYPE3_MSG_GENERATED || this.state == FAILED;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  public static void main(String[] args) throws Exception {  final int minBoardSize=intArg(args,"minBoardSize",8);  final int maxBoardSize=intArg(args,"maxBoardSize",15);  final int procs=intArg(args,"procs",0);  for (int reps=intArg(args,"reps",10); reps > 0; reps--) {    ForkJoinPool g=(procs == 0) ? new ForkJoinPool() : new ForkJoinPool(procs);    lastStealCount=g.getStealCount();    for (int i=minBoardSize; i <= maxBoardSize; i++)     test(g,i);    System.out.println(g);    g.shutdown();  }}  }
class C{  public QualifiedItem(final String versionedFileSpec,final String user,final VersionSpec defaultVersion,final boolean allowVersionRange) throws VersionSpecParseException, LabelSpecParseException {  final VersionedFileSpec vfs=VersionedFileSpec.parse(versionedFileSpec,user,allowVersionRange);  Check.notNull(vfs,"vfs");  _path=vfs.getItem();  _deletionID=(vfs.getDeletionVersionSpec() != null) ? vfs.getDeletionVersionSpec().getDeletionID() : 0;  if (vfs.getVersions().length == 0) {    if (defaultVersion == null) {      _versions=null;    } else {      _versions=new VersionSpec[]{defaultVersion};    }  } else {    _versions=vfs.getVersions();  }}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  private ActionErrors validateCamposSimple(HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (getCampo().length == 1 && StringUtils.isEmpty(getCampoCambio())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DescripcionConstants.ERROR_DESCRIPCION_REEEMPLAZO_SELECCION_CAMPO_OBLIGATORIA));    return errors;  }  boolean buscandoValoresVacio=false;  int i=0;  if (isReemplazoValoresNulos()) {    if (getTipoCampo()[i].intValue() == 3) {      if (StringUtils.isNotEmpty(getCampo()[i]) && StringUtils.isEmpty(getValor1D()[i]) && StringUtils.isEmpty(getValor1M()[i])&& StringUtils.isEmpty(getValor1A()[i])&& StringUtils.isEmpty(getValor1S()[i])) {        buscandoValoresVacio=true;      }    } else {      if (StringUtils.isNotEmpty(getCampo()[i]) && StringUtils.isEmpty(getValor1()[i])) {        buscandoValoresVacio=true;      }    }  }  if (!buscandoValoresVacio) {    if (getTipoCampo()[i].intValue() == TipoCampo.FECHA_VALUE) {      if (StringUtils.isNotEmpty(getCampo()[i]) && StringUtils.isEmpty(getValor1D()[i]) && StringUtils.isEmpty(getValor1M()[i])&& StringUtils.isEmpty(getValor1A()[i])&& StringUtils.isEmpty(getValor1S()[i])) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO_SOLOUNO));      }      try {        CustomDate fecha1=new CustomDate(getFormatoFecha1()[i],getValor1A()[i],getValor1M()[i],getValor1D()[i],getValor1S()[i]);        if (!fecha1.validate()) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));        }      } catch (      Exception e) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));      }      if (getOperador()[i].equals(CustomDateFormat.DATE_OPERATOR_RANGE)) {        try {          CustomDate fecha2=new CustomDate(getFormatoFecha2()[i],getValor2A()[i],getValor2M()[i],getValor2D()[i],getValor2S()[i]);          if (!fecha2.validate()) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));          }        } catch (        Exception e) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));        }      }    } else {      if (StringUtils.isNotEmpty(getCampo()[i]) && (getValor1().length == 0 || StringUtils.isEmpty(getValor1()[i]))) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO_SOLOUNO));      }    }  }  errors=checkValorNuevo(request,errors);  if (!ArrayUtils.isEmpty(getIdObjetoAmbito())) {    String[] codRefs=(String[])ArrayUtils.clone(getIdObjetoAmbito());    for (i=codRefs.length - 1; i >= 0; i--) {      if (StringUtils.isBlank(codRefs[i]))       codRefs=(String[])ArrayUtils.remove(codRefs,i); else {        for (int j=i - 1; j >= 0; j--) {          if (codRefs[i].equals(codRefs[j])) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_REPETIDO,getNombreObjetoAmbito()[i]));          } else           if (StringUtils.indexOf(codRefs[i],codRefs[j]) == 0) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,getNombreObjetoAmbito()[i],getNombreObjetoAmbito()[j]));          } else           if (StringUtils.indexOf(codRefs[j],codRefs[i]) == 0) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,getNombreObjetoAmbito()[j],getNombreObjetoAmbito()[i]));          }        }      }    }  }  return errors;}  }
class C{  public static void rmean(double[] y){  double mean=0.0f;  for (int i=0; i < y.length; i++)   mean+=y[i];  mean/=y.length;  for (int i=0; i < y.length; i++)   y[i]-=mean;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.457 -0500",hash_original_method="C1B0A0A6F00EB418D00ABC26C97C8AF6",hash_generated_method="599B1D8D84467266F519B3C099220E67") public ClientKeyExchange(HandshakeIODataStream in,int length,boolean isTLS,boolean isRSA) throws IOException {  this.isTLS=isTLS;  this.isRSA=isRSA;  if (length == 0) {    this.length=0;    exchange_keys=EmptyArray.BYTE;  } else {    int size;    if (isRSA && !isTLS) {      size=length;      this.length=size;    } else {      size=in.readUint16();      this.length=2 + size;    }    exchange_keys=new byte[size];    Streams.readFully(in,exchange_keys);    if (this.length != length) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientKeyExchange");    }  }}  }
class C{  public float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  static protected Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public Spring removeAllListeners(){  mListeners.clear();  return this;}  }
class C{  private void addQueryParamIfNotNull(DockerConnection connection,String queryParamName,Object paramValue){  if (paramValue != null) {    connection.query(queryParamName,paramValue);  }}  }
