class C{  private AuditServiceThread createMockAuditServiceThreadWithFireCompleted(AuditServiceThreadQueueImpl instance,int auditServiceThreadCallCounter){  AuditServiceThread auditServiceThread=EasyMock.createMock(AuditServiceThread.class);  auditServiceThread.add(instance);  EasyMock.expectLastCall().times(auditServiceThreadCallCounter);  auditServiceThread.run();  EasyMock.expectLastCall().times(auditServiceThreadCallCounter);  EasyMock.expect(auditServiceThread.getAudit()).andReturn(null).times(auditServiceThreadCallCounter);  auditServiceThread.remove(instance);  EasyMock.expectLastCall().times(auditServiceThreadCallCounter);  EasyMock.replay(auditServiceThread);  return auditServiceThread;}  }
class C{  IgniteState state(){  if (starterThread != Thread.currentThread())   U.awaitQuiet(startLatch);  return state;}  }
class C{  public void writeEntry(CCacheOutputStream cos) throws IOException {  cos.write16(adType);  cos.write32(adData.length);  cos.write(adData,0,adData.length);}  }
class C{  public static boolean isTablet(Context c){  return c.getResources().getBoolean(R.bool.isTablet);}  }
class C{  public UrlDetector(String content,UrlDetectorOptions options){  _reader=new InputTextReader(content);  _options=options;}  }
class C{  public XYImageAnnotation(double x,double y,Image image,RectangleAnchor anchor){  super();  ParamChecks.nullNotPermitted(image,"image");  ParamChecks.nullNotPermitted(anchor,"anchor");  this.x=x;  this.y=y;  this.image=image;  this.anchor=anchor;}  }
class C{  private void fetchSearchServiceCardsFromServer(String keyword,String categoryId){  final Map<String,String> params=new HashMap<String,String>(5);  params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude));  params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude));  params.put(HttpConstants.TYPE,HttpConstants.SearchType.SERVICE_CARD);  params.put(HttpConstants.GROUP_ID,categoryId);  params.put(HttpConstants.PER,"20");  params.put(HttpConstants.RADIUS,"50");  params.put(HttpConstants.TITLE,keyword);  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.SEARCH_SERVICES);  retroCallbackList.add(retroCallback);  params.put(HttpConstants.PAGE,"1");  mYeloApi.getServiceCards(params,retroCallback);  mSwipeRefreshLayout.setRefreshing(true);}  }
class C{  private static void processEmoticonsToRegex(){  List<String> emoticons=new ArrayList<String>();  for (  Emoji e : emojiData) {    if (e.getEmoticons() != null) {      emoticons.addAll(e.getEmoticons());    }  }  for (int i=0; i < emoticons.size(); i++) {    for (int j=i + 1; j < emoticons.size(); j++) {      String o1=emoticons.get(i);      String o2=emoticons.get(j);      if (o2.contains(o1)) {        String temp=o2;        emoticons.remove(j);        emoticons.add(i,temp);      }    }  }  StringBuilder sb=new StringBuilder();  for (  String emoticon : emoticons) {    if (sb.length() != 0) {      sb.append("|");    }    sb.append(Pattern.quote(emoticon));  }  emoticonRegexPattern=Pattern.compile(sb.toString());}  }
class C{  public void discardUpstreamSamples(int discardFromIndex){  rollingBuffer.discardUpstreamSamples(discardFromIndex);  largestParsedTimestampUs=rollingBuffer.peekSample(sampleInfoHolder) ? sampleInfoHolder.timeUs : Long.MIN_VALUE;}  }
class C{  private static boolean doSelfValidation(){  char lastChar=UNIHANS[0];  String lastString=Character.toString(lastChar);  for (  char c : UNIHANS) {    if (lastChar == c) {      continue;    }    final String curString=Character.toString(c);    int cmp=COLLATOR.compare(lastString,curString);    if (cmp >= 0) {      Log.e(TAG,"Internal error in Unihan table. " + "The last string \"" + lastString + "\" is greater than current string \""+ curString+ "\".");      return false;    }    lastString=curString;  }  return true;}  }
class C{  public RaceControlPanel(){  add(goButton);  add(stopButton);}  }
class C{  public boolean hasMoreDumps(){  nextDump=parseNext();  return (nextDump != null);}  }
class C{  public boolean increment(K key){  return adjustValue(key,1);}  }
class C{  protected boolean matchFound(String fileName){  for (  Mask mask1 : masks) {    boolean fMatch;    if (mask1.suffixMatch) {      fMatch=fileName.endsWith(mask1.matchString);    } else {      fMatch=fileName.equals(mask1.matchString);    }    if (fMatch) {      return true;    }  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void test(WeightGenerator generator,int D){  int size=generator.size();  List<double[]> weights=generator.generate();  Assert.assertEquals(size,weights.size());  checkWeights(weights,D);}  }
class C{  public static boolean canCanonicalize(final String canonicalizationMethod){  if (transforms.contains(canonicalizationMethod)) {    return false;  }  final boolean contains=canonicalizers.contains(canonicalizationMethod);  return contains;}  }
class C{  public void start(){  super.start();  setupPortrayals();}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  private boolean isGitUrlCorrect(@NotNull String url){  if (WHITE_SPACE.test(url)) {    view.showUrlError(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (SCP_LIKE_SYNTAX.test(url)) {    view.hideUrlError();    return true;  }  if (!PROTOCOL.test(url)) {    view.showUrlError(locale.importProjectMessageProtocolIncorrect());    return false;  }  if (!(HOST1.test(url) || HOST2.test(url))) {    view.showUrlError(locale.importProjectMessageHostIncorrect());    return false;  }  if (!(REPO_NAME.test(url))) {    view.showUrlError(locale.importProjectMessageNameRepoIncorrect());    return false;  }  view.hideUrlError();  return true;}  }
class C{  private CoordinatorClient connectClient() throws IOException {  CoordinatorClientImpl client=new CoordinatorClientImpl();  ZkConnection conn=new ZkConnection();  URI zkUri=URI.create(String.format("coordinator://localhost:%s",config.getClientPortAddress().getPort()));  conn.setServer(Arrays.asList(zkUri));  conn.setTimeoutMs(10 * 1000);  conn.setSiteIdFile("build/data/zk/siteIdFile");  log.info("Connecting with coordinator service...");  conn.build();  log.info("Connecting with coordinator service.");  client.setZkConnection(conn);  CoordinatorClientInetAddressMap inetAddressMap=new CoordinatorClientInetAddressMap();  inetAddressMap.setNodeId("standalone");  inetAddressMap.setDualInetAddress(DualInetAddress.fromAddress("127.0.0.1"));  inetAddressMap.setCoordinatorClient(client);  inetAddressMap.setControllerNodeIPLookupMap(new HashMap<String,DualInetAddress>());  client.setInetAddessLookupMap(inetAddressMap);  client.setSysSvcName("syssvc");  client.setSysSvcVersion("1");  client.setVdcShortId("vdc1");  Properties properties=new Properties();  properties.setProperty(BackupConstants.BACKUP_MAX_MANUAL_COPIES,"5");  client.setDefaultProperties(properties);  FileInputStream is=new FileInputStream(ovfPropsLocation);  Properties ovfProps=new Properties();  ovfProps.load(is);  is.close();  client.setOvfProperties(ovfProps);  client.start();  return client;}  }
class C{  public Composer scale(long animDuration,float scaleX,float scaleY,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(beforeParam.x,beforeParam.y,beforeParam.alpha,scaleX,scaleY,beforeParam.rotation,animDuration,ease));  return this;}  }
class C{  public T caseS_Reflex(S_Reflex object){  return null;}  }
class C{  private static File[] findConfigurationFilesOk(){  final String testSrc=System.getProperty("test.src");  final File dir=new File(testSrc);  final FilenameFilter filter=new ConfigFilenameFilter("management_test","ok.properties");  return dir.listFiles(filter);}  }
class C{  public int peekExpGolombCodedNumLength(){  int initialByteOffset=byteOffset;  int initialBitOffset=bitOffset;  int leadingZeros=0;  while (byteOffset < byteLimit && !readBit()) {    leadingZeros++;  }  boolean hitLimit=byteOffset == byteLimit;  byteOffset=initialByteOffset;  bitOffset=initialBitOffset;  return hitLimit ? -1 : leadingZeros * 2 + 1;}  }
class C{  void saveFile(String fileName){  boolean result;  File file=mKmlDocument.getDefaultPathForAndroid(fileName);  if (fileName.endsWith(".json"))   result=mKmlDocument.saveAsGeoJSON(file); else   result=mKmlDocument.saveAsKML(file);  if (result)   Toast.makeText(this,fileName + " saved",Toast.LENGTH_SHORT).show(); else   Toast.makeText(this,"Unable to save " + fileName,Toast.LENGTH_SHORT).show();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void clear(){  mSeries.clear();}  }
class C{  public synchronized void stop() throws ReplicatorException {  String command=vmrrControlScript + " stop";  logger.info("Stopping vmrr process: " + command);  execAndReturnStdout(command,true);}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.LightManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  return false;}  }
class C{  public boolean isRetainUnion(){  return isRetainUnion;}  }
class C{  private void updateStatusBar(){  String str=textArea.getText();  int length=str.length();  statusBar.setStatusDB(length);  int size=length;  try {    size=str.getBytes("UTF-8").length;  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,str,e);  }  if (m_maxSize == 0)   statusBar.setStatusLine(String.valueOf(size)); else   if (size < m_maxSize)   statusBar.setStatusLine(size + " < " + m_maxSize,false); else   if (size == m_maxSize)   statusBar.setStatusLine(size + " = " + m_maxSize,false); else {    statusBar.setStatusLine(size + " > " + m_maxSize,true);    Toolkit.getDefaultToolkit().beep();  }}  }
class C{  protected Document createConfigurationDocument(AVList params){  Document doc=super.createConfigurationDocument(params);  if (doc == null || doc.getDocumentElement() == null)   return doc;  DataConfigurationUtils.createWMSLayerConfigElements(params,doc.getDocumentElement());  return doc;}  }
class C{  public void connectPort(LnPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public boolean isCountedDown(){  assert countDown.get() >= 0;  return countDown.get() == 0;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.593 -0500",hash_original_method="83E6237273AAD0C9F4D2DED923ACAFB7",hash_generated_method="83E6237273AAD0C9F4D2DED923ACAFB7") boolean hasCookies(){synchronized (mCookieLock) {    return hasEntries(TABLE_COOKIES_ID);  }}  }
class C{  public String formatArray(Object array,String delim,String finaldelim){  StringBuffer sb=new StringBuffer();  int arrayLen=Array.getLength(array);  for (int i=0; i < arrayLen; i++) {    sb.append(Array.get(array,i).toString());    if (i < arrayLen - 2) {      sb.append(delim);    } else     if (i < arrayLen - 1) {      sb.append(finaldelim);    }  }  return sb.toString();}  }
class C{  @SuppressWarnings({"unchecked"}) public static IMeta mergeMeta(IMetaData<?,?> metaData1,IMetaData<?,?> metaData2){  Map<String,Object> map1=((Map<String,Object>)metaData1);  Set<Entry<String,Object>> set1=map1.entrySet();  Map<String,Object> map2=((Map<String,Object>)metaData2);  Set<Entry<String,Object>> set2=map2.entrySet();  Map<String,Object> rep=new HashMap<String,Object>();  for (  Entry<String,Object> entry1 : set1) {    String key1=entry1.getKey();    if (map2.containsKey(key1)) {      Object value1=map1.get(key1);      Object value2=map2.get(key1);      if (value1 instanceof Double) {        if (Double.valueOf(value1.toString()).doubleValue() < Double.valueOf(value2.toString()).doubleValue()) {          rep.put(key1,value2);        }      } else       if (value1 instanceof Integer) {        if (Integer.valueOf(value1.toString()).intValue() < Integer.valueOf(value2.toString()).intValue()) {          rep.put(key1,value2);        }      } else       if (value1 instanceof Long) {        if (Long.valueOf(value1.toString()).longValue() < Long.valueOf(value2.toString()).longValue()) {          rep.put(key1,value2);        }      }      if (value1 instanceof Boolean) {        if (!Boolean.valueOf(value1.toString()) && Boolean.valueOf(value2.toString())) {          rep.put(key1,value2);        }      }    }  }  set1.removeAll(rep.entrySet());  set1.addAll(rep.entrySet());  set1.addAll(set2);  return metaData1;}  }
class C{  public Collection<Facet> glitterFacets(Universe universe,Domain domain,DashboardSelection sel) throws ComputingException, InterruptedException, TimeoutException {  DomainFacetCompute compute=new DomainFacetCompute(universe);  try {    Collection<Facet> result=compute.computeDomainFacets(domain,sel);    boolean needToWait=false;    for (    Facet facet : result) {      if (!facet.isDone()) {        needToWait=true;        break;      }    }    if (needToWait) {      DomainHierarchyManager.INSTANCE.isHierarchyDone(universe,domain,null);      return compute.computeDomainFacets(domain,sel);    } else {      return result;    }  } catch (  ScopeException e) {    throw new ComputingException(e.getLocalizedMessage(),e);  }catch (  ExecutionException e) {    if (e.getCause() != null) {      throw new ComputingException(e.getCause().getLocalizedMessage(),e.getCause());    } else {      throw new ComputingException(e.getLocalizedMessage(),e);    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public T caseModuleFilter(ModuleFilter object){  return null;}  }
class C{  public static List<Double> multiply(List<Double> d1,List<Double> d2){  assert d1.size() == d2.size();  List<Double> out=new ArrayList<>();  for (int i=0; i < d1.size(); i++) {    out.add(d1.get(i) * d2.get(i));  }  return out;}  }
class C{  public boolean logout() throws LoginException {  if (subject.isReadOnly()) {    throw new LoginException("Subject is ReadOnly");  }  Set<Principal> principals=subject.getPrincipals();  if (principals.contains(userPrincipal)) {    principals.remove(userPrincipal);  }  if (principals.contains(userSID)) {    principals.remove(userSID);  }  if (principals.contains(userDomain)) {    principals.remove(userDomain);  }  if (principals.contains(domainSID)) {    principals.remove(domainSID);  }  if (principals.contains(primaryGroup)) {    principals.remove(primaryGroup);  }  for (int i=0; groups != null && i < groups.length; i++) {    if (principals.contains(groups[i])) {      principals.remove(groups[i]);    }  }  Set<Object> pubCreds=subject.getPublicCredentials();  if (pubCreds.contains(iToken)) {    pubCreds.remove(iToken);  }  succeeded=false;  commitSucceeded=false;  userPrincipal=null;  userDomain=null;  userSID=null;  domainSID=null;  groups=null;  primaryGroup=null;  iToken=null;  ntSystem=null;  if (debug) {    System.out.println("\t\t[NTLoginModule] " + "completed logout processing");  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.698 -0400",hash_original_method="A7E4D946C38615EB73B14A44B4632E34",hash_generated_method="23DE0A2C3212613CB254CB3434C23358") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (suffixes != null) {    for (int i=0; i < suffixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(suffixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  private void load(float sample){  mBufferPointer--;  if (mBufferPointer < 0) {    mBufferPointer+=mBufferSize;  }  mBuffer[mBufferPointer]=sample;}  }
class C{  protected void initForm(){  log.info("");  try {    confirmPanel=new ConfirmPanel(true);    createSelectionPanel(true,true,true);    createMainPanel();    confirmPanel.addActionListener(Events.ON_CLICK,this);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public static <T>LazySortedSetX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  protected IStatus errorStatus(Throwable e){  return new Status(IStatus.ERROR,pluginId,NLS.bind(Messages.DownloadFailed,getSourceURL(),getTargetPath()),e);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getTotalImportedLibraryDuration());}  }
class C{  public KeyNamePair createLot(int M_Product_ID){  KeyNamePair retValue=null;  int M_LotCtl_ID=getMAttributeSet().getM_LotCtl_ID();  if (M_LotCtl_ID != 0) {    MLotCtl ctl=new MLotCtl(getCtx(),M_LotCtl_ID,null);    MLot lot=ctl.createLot(M_Product_ID);    setM_Lot_ID(lot.getM_Lot_ID());    setLot(lot.getName());    retValue=new KeyNamePair(lot.getM_Lot_ID(),lot.getName());  }  return retValue;}  }
class C{  protected void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  @Deactivate protected void deactivate(){  if (logger.isInfoEnabled()) {    logger.info("Metrics Component is deactivated");  }}  }
class C{  public static Combo createCombo(Composite parent,int style,int hspan,String[] items){  Combo c=new Combo(parent,style);  c.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  c.setLayoutData(gd);  if (items != null) {    c.setItems(items);  }  c.setVisibleItemCount(30);  c.select(0);  return c;}  }
class C{  public void testDSAProvider() throws Exception {  AlgorithmParameters params=AlgorithmParameters.getInstance("DSA");  assertEquals("Algorithm","DSA",params.getAlgorithm());  BigInteger p=BigInteger.ONE;  BigInteger q=BigInteger.TEN;  BigInteger g=BigInteger.ZERO;  params.init(new DSAParameterSpec(p,q,g));  byte[] enc=params.getEncoded();  assertNotNull(enc);  assertNotNull(params.getEncoded("ASN.1"));  DSAParameterSpec spec=params.getParameterSpec(DSAParameterSpec.class);  assertEquals("p is wrong ",p,spec.getP());  assertEquals("q is wrong ",q,spec.getQ());  assertEquals("g is wrong ",g,spec.getG());  params=AlgorithmParameters.getInstance("DSA");  params.init(enc);  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));  params=AlgorithmParameters.getInstance("DSA");  params.init(enc,"ASN.1");  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));  params=AlgorithmParameters.getInstance("DSA");  try {    params.init(enc,"DOUGLASMAWSON");    fail("unsupported format should have raised IOException");  } catch (  IOException e) {  }}  }
class C{  protected void login() throws Exception {  AuthResponse res=loginAPI.logInUsingEmail("example@example.com","password");  assertNotNull(res);  assertNotNull(res.access_token);  assertNotNull(res.token_type);  assertNotNull(res.refresh_token);  print(res.toString());  assertNotNull(res.profile);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public HttpsPath(String host,int port){  super(host,port);}  }
class C{  @Override public int compareTo(Comparable<?> other){  if (other instanceof Region) {    Region r=(Region)other;    if (this.start < r.start) {      return -1;    } else     if (this.end > r.end) {      return 1;    } else {      return 0;    }  } else   if (other instanceof Integer) {    Integer l=(Integer)other;    if (l > end) {      return -1;    } else     if (l < start) {      return 1;    } else {      return 0;    }  } else {    throw new AssertionError();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION___MODIFIER_1:    setModifier_1(MODIFIER_1_EDEFAULT);  return;case UmplePackage.INLINE_ASSOCIATION___INLINE_ASSOCIATION_END_1:getInlineAssociationEnd_1().clear();return;case UmplePackage.INLINE_ASSOCIATION___ARROW_1:setArrow_1(ARROW_1_EDEFAULT);return;case UmplePackage.INLINE_ASSOCIATION___ASSOCIATION_END_1:getAssociationEnd_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static void lock(){  LOCK.lock();}  }
class C{  private void handleSync(boolean value){  syncDrivePreference.setChecked(value);  updateSyncDriveSummary();  if (value) {    SyncUtils.enableSync(this);  } else {    SyncUtils.disableSync(this);  }}  }
class C{  public static SecretKey createKey(String encoded,String algo){  return new SecretKeySpec(Base64.decodeBase64(encoded.getBytes(SignatureHelper.UTF_8)),algo);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SimpleStatistics(){  super();}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncPosition) || (func instanceof FuncLast))   m_hasPositionalPred=true;  return true;}  }
class C{  public int argmin(){  if (isEmpty()) {    return -1;  }  float v=Float.POSITIVE_INFINITY;  int a=-1;  for (int i=0; i < length; i++) {    if (!Float.isNaN(get(i)) && get(i) < v) {      v=get(i);      a=i;    }  }  return a;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.227 -0500",hash_original_method="729F260E3687A604BDCEB4B5144460BE",hash_generated_method="9E3315483A95DC9C427CB6571FD2FB57") @DSSink(DSSinkKind.DATABASE) public boolean putNull(int row,int column){  return true;}  }
class C{  public void modifyInstance(StorageSystem storage,CIMInstance instance,String[] properties) throws WBEMException {  getConnection(storage).getCimClient().modifyInstance(instance,properties);}  }
class C{  public static java.util.Random newRandom(int seed){  return new Random(seed,true);}  }
class C{  public static String assertValidSwfValue(String value){  if (value != null) {    if (value.length() == 0) {      throw new AssertionError("Empty value not allowed");    }    if (value.matches("\\s.*|.*\\s") || value.matches(".*[:/|\\u0000-\\u001f\\u007f-\\u009f].*") || value.contains("arn")) {      throw new AssertionError("Value contains one or more bad characters: '" + value + "'");    }  }  return value;}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  public boolean isFocusTraversable(){  if (source instanceof Component) {    return ((Component)source).isFocusTraversable();  } else {    return false;  }}  }
class C{  public void testZeroNeg(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=-1;  byte rBytes[]={-1,1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodetype.class,args);}  }
class C{  private void fillMultiZonesList(List<List<RPZonePath>> pathes){  for (  List<RPZonePath> i : pathes) {    this.pathes.add(i);    this.mzfpl.add(new MultiZonesFixedPath(npc,i,this));  }}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Merge.sort(a);  show(a);}  }
class C{  public SuspendException(String message,int responseCode){  super(message);  this.responseCode=responseCode;}  }
class C{  @Override public void accept(final Resource resource){  if (resource == null) {    return;  }  this.visit(resource);  if (!StringUtils.equals(this.nodeType,resource.getValueMap().get("jcr:primaryType",String.class))) {    this.traverseChildren(resource.listChildren());  } else {  }}  }
class C{  @Override public PerformanceVector evaluateIndividual(double[] individual) throws OperatorException {  return op.evaluateIndividual(individual);}  }
class C{  public String buildSentence(){  Sentence sentence=new Sentence();  List<Observable<Word>> observables=createObservables();  CountDownLatch latch=new CountDownLatch(observables.size());  Observable.merge(observables).subscribe(null);  waitForAll(latch);  return sentence.toString();}  }
class C{  public void paintTableHeaderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void doWrapAndWrite(N4JSResource resource,Writer outCode){  boolean moduleWrapping=projectUtils.isModuleWrappingEnabled(resource.getURI());  EObject script=resource.getContents().get(0);  CharSequence scriptAsText=NodeModelUtils.getNode(script).getRootNode().getText();  String decorated=(moduleWrapping ? ModuleWrappingTransformation.wrapPlainJSCode(scriptAsText) : scriptAsText).toString();  try {    outCode.write(decorated);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static ColorStateList generateTextColor(@ColorInt int pressColor,@ColorInt int defaultColor){  ColorStateList stateList=new ColorStateList(new int[][]{{android.R.attr.state_pressed},{}},new int[]{pressColor,defaultColor});  return stateList;}  }
class C{  private LOSGenerator(){  init();}  }
class C{  public static IStatus validateIdentifier(String id){  return validateIdentifier(id,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  @Override public Instances next(){  Instances result;  try {    log("Loading: " + m_Datasets.get(m_Current));    result=ConverterUtils.DataSource.read(m_Datasets.get(m_Current).getAbsolutePath());    MLUtils.prepareData(result);  } catch (  Exception e) {    result=null;    handleException("Failed to load dataset: " + m_Datasets.get(m_Current),e);  }  m_Current++;  return result;}  }
class C{  public RTMPProtocolDecoder(){}  }
class C{  private static String hex(char ch){  return Integer.toHexString(ch).toUpperCase();}  }
class C{  public static String byteArrayToHex(byte[] bytes){  StringBuilder sb=new StringBuilder();  for (int i=0; i < bytes.length; i++) {    sb.append(Integer.toString((bytes[i] & 0xff) + 0x100,16).substring(1));  }  return sb.toString();}  }
class C{  public static void startFullSync(){  Bundle b=new Bundle();  b.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  b.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  b.putBoolean(SyncOption.FULL_SYNC.name(),true);  LOG.i("Requesting full sync");  ContentResolver.requestSync(getAccount(),Contracts.CONTENT_AUTHORITY,b);}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public static final void show(final float[][] matrix1){  for (int row=0; row < 3; row++) {    LogWriter.writeLog(row + "((" + matrix1[row][0]+ " , "+ matrix1[row][1]+ " , "+ matrix1[row][2]+ " ))");  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  String readString() throws IOException {  int utf16len=readUnsignedLeb128();  byte inBuf[]=new byte[utf16len * 3];  int idx;  for (idx=0; idx < inBuf.length; idx++) {    byte val=readByte();    if (val == 0)     break;    inBuf[idx]=val;  }  return new String(inBuf,0,idx,"UTF-8");}  }
class C{  public void close(){  isConnect=false;  if (mBluetoothGatt == null) {    return;  }  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  public void printEquation(Vertex equation,Writer writer,String indent,Set<Vertex> elements,Network network) throws IOException {  if (equation.getData() instanceof BinaryData) {    Vertex detached=parseEquationByteCode(equation,(BinaryData)equation.getData(),network);    elements.add(detached);    printEquation(detached,writer,indent,elements,network);    return;  }  printComments(equation,writer,indent,false,network);  List<Vertex> equations=new ArrayList<Vertex>();  List<Vertex> variables=new ArrayList<Vertex>();  writer.write(indent);  printElement(equation,writer,indent,equations,variables,elements,network);  writer.write(" {\r\n");  writer.write(indent);  Vertex operator=equation.getRelationship(Primitive.OPERATOR);  if (operator == null) {    writer.write("}\r\n");    return;  }  if (operator.is(Primitive.DO)) {    writer.write("\t");    printArguments(equation,Primitive.ARGUMENT,null,false,true,true,writer,indent.substring(0,indent.length() - 1),variables,equations,elements,true,network);    writer.write(";\r\n");  } else {    writer.write("\t");    printOperator(equation,writer,indent,equations,variables,elements,network);    writer.write(";\r\n");  }  writer.write(indent);  writer.write("}\r\n");  for (  Vertex element : variables) {    printVariable(element,writer,indent,elements,network);  }  for (  Vertex element : equations) {    printEquation(element,writer,indent,elements,network);  }}  }
class C{  public static void main(String[] args){  ApplicationTemplate.start("World Wind Line Builder",LineBuilder.AppFrame.class);}  }
class C{  public boolean byteOrder(){  return MSBFirst;}  }
class C{  public static String antidote(String topic){  return topic.substring(0,topic.length() - 2).replaceAll(EMPTY,"");}  }
class C{  public void disable() throws IOException {synchronized (optOutLock) {    if (!isOptOut()) {      config.getNode("mcstats.opt-out").setValue(true);      configurationLoader.save(config);    }    if (task != null) {      task.cancel();      task=null;    }  }}  }
class C{  public byte[] sign(){  try {    if (md5 != null && md5_hash == null) {      md5_hash=new byte[16];      md5.digest(md5_hash,0,md5_hash.length);    }    if (md5_hash != null) {      if (signature != null) {        signature.update(md5_hash);      } else       if (cipher != null) {        cipher.update(md5_hash);      }    }    if (sha != null && sha_hash == null) {      sha_hash=new byte[20];      sha.digest(sha_hash,0,sha_hash.length);    }    if (sha_hash != null) {      if (signature != null) {        signature.update(sha_hash);      } else       if (cipher != null) {        cipher.update(sha_hash);      }    }    if (signature != null) {      return signature.sign();    } else     if (cipher != null) {      return cipher.doFinal();    }    return EmptyArray.BYTE;  } catch (  DigestException e) {    return EmptyArray.BYTE;  }catch (  SignatureException e) {    return EmptyArray.BYTE;  }catch (  BadPaddingException e) {    return EmptyArray.BYTE;  }catch (  IllegalBlockSizeException e) {    return EmptyArray.BYTE;  }}  }
class C{  public void warn(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  warn(srcLctr,null,null,msg,args);}  }
class C{  protected void deleteLink(Link link,String reason){  if (link == null)   return;  List<Link> linkList=new ArrayList<Link>();  linkList.add(link);  deleteLinks(linkList,reason);}  }
class C{  public boolean add(final CharSequence s){  int i=d, l=s.length();  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(s,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public boolean contains(final float[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  @Override public void visitLambda(JCLambda tree){  LambdaTranslationContext localContext=(LambdaTranslationContext)context;  MethodSymbol sym=(MethodSymbol)localContext.translatedSym;  MethodType lambdaType=(MethodType)sym.type;{    Symbol owner=localContext.owner;    ListBuffer<Attribute.TypeCompound> ownerTypeAnnos=new ListBuffer<Attribute.TypeCompound>();    ListBuffer<Attribute.TypeCompound> lambdaTypeAnnos=new ListBuffer<Attribute.TypeCompound>();    for (    Attribute.TypeCompound tc : owner.getRawTypeAttributes()) {      if (tc.position.onLambda == tree) {        lambdaTypeAnnos.append(tc);      } else {        ownerTypeAnnos.append(tc);      }    }    if (lambdaTypeAnnos.nonEmpty()) {      owner.setTypeAttributes(ownerTypeAnnos.toList());      sym.setTypeAttributes(lambdaTypeAnnos.toList());    }  }  JCMethodDecl lambdaDecl=make.MethodDef(make.Modifiers(sym.flags_field),sym.name,make.QualIdent(lambdaType.getReturnType().tsym),List.<JCTypeParameter>nil(),localContext.syntheticParams,lambdaType.getThrownTypes() == null ? List.<JCExpression>nil() : make.Types(lambdaType.getThrownTypes()),null,null);  lambdaDecl.sym=sym;  lambdaDecl.type=lambdaType;  lambdaDecl.body=translate(makeLambdaBody(tree,lambdaDecl));  kInfo.addMethod(lambdaDecl);  ListBuffer<JCExpression> syntheticInits=new ListBuffer<>();  if (!sym.isStatic()) {    syntheticInits.append(makeThis(sym.owner.enclClass().asType(),localContext.owner.enclClass()));  }  for (  Symbol fv : localContext.getSymbolMap(CAPTURED_VAR).keySet()) {    if (fv != localContext.self) {      JCTree captured_local=make.Ident(fv).setType(fv.type);      syntheticInits.append((JCExpression)captured_local);    }  }  List<JCExpression> indy_args=translate(syntheticInits.toList(),localContext.prev);  int refKind=referenceKind(sym);  result=makeMetafactoryIndyCall(context,refKind,sym,indy_args);}  }
class C{  public void writeData(Object entity,EntityType entityType) throws XMLStreamException, ODataRenderException {  xmlWriter.writeStartElement(ODATA_CONTENT);  xmlWriter.writeAttribute(TYPE,XML.toString());  xmlWriter.writeStartElement(METADATA,ODATA_PROPERTIES,"");  marshall(entity,entityType);  xmlWriter.writeEndElement();  xmlWriter.writeEndElement();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.684 -0500",hash_original_method="55A79A529B0E338884C3A2F27FEDBFDF",hash_generated_method="F3F3A49CE991C3A7C442CD09347F8D6B") public void reportFinishInputConnection(InputConnection ic){  if (mServedInputConnection != ic) {    ic.finishComposingText();  }}  }
class C{  public String toString(){  try {    return "IPAddress: " + getName();  } catch (  IOException ioe) {    HexDumpEncoder enc=new HexDumpEncoder();    return "IPAddress: " + enc.encodeBuffer(address);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.VARIABLE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  void reset(){  numRehashes=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.464 -0500",hash_original_method="B475BEB21FA51CA8F8F370C1A72E04BF",hash_generated_method="79AD016D5A550765E97C014A77EDB36D") public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public MariaDbFunctionStatement(MariaDbConnection connection,String databaseName,String procedureName,String arguments) throws SQLException {  super(connection,"SELECT " + procedureName + ((arguments == null) ? "()" : arguments),ResultSet.TYPE_FORWARD_ONLY);  parameterMetadata=new CallableParameterMetaData(connection,databaseName,procedureName,true);  super.initFunctionData(getParameterCount() + 1);}  }
class C{  public URIMetadataNode(final Properties prop,String collection) throws MalformedURLException {  super();  final String urlRaw=crypt.simpleDecode(prop.getProperty("url",""));  url=new DigestURL(urlRaw);  String descr=crypt.simpleDecode(prop.getProperty("descr",""));  if (descr == null)   descr="";  String dc_creator=crypt.simpleDecode(prop.getProperty("author",""));  if (dc_creator == null)   dc_creator="";  String tags=crypt.simpleDecode(prop.getProperty("tags",""));  if (tags == null)   tags="";  this.keywords=Tagging.cleanTagFromAutotagging(tags);  String dc_publisher=crypt.simpleDecode(prop.getProperty("publisher",""));  if (dc_publisher == null)   dc_publisher="";  String lons=crypt.simpleDecode(prop.getProperty("lon"));  String lats=crypt.simpleDecode(prop.getProperty("lat"));  this.setField(CollectionSchema.title.name(),descr);  this.setField(CollectionSchema.author.name(),dc_creator);  this.setField(CollectionSchema.publisher_t.name(),dc_publisher);  this.lon=(lons == null) ? 0.0d : Double.parseDouble(lons);  this.lat=(lats == null) ? 0.0d : Double.parseDouble(lats);  final GenericFormatter formatter=new GenericFormatter(GenericFormatter.FORMAT_SHORT_DAY,GenericFormatter.time_minute);  try {    this.setField(CollectionSchema.last_modified.name(),formatter.parse(prop.getProperty("mod","20000101"),0).getTime());  } catch (  final ParseException e) {    this.setField(CollectionSchema.last_modified.name(),new Date());  }  try {    this.setField(CollectionSchema.load_date_dt.name(),formatter.parse(prop.getProperty("load","20000101"),0).getTime());  } catch (  final ParseException e) {    this.setField(CollectionSchema.load_date_dt.name(),new Date());  }  try {    this.setField(CollectionSchema.fresh_date_dt.name(),formatter.parse(prop.getProperty("fresh","20000101"),0).getTime());  } catch (  final ParseException e) {    this.setField(CollectionSchema.fresh_date_dt.name(),new Date());  }  this.setField(CollectionSchema.referrer_id_s.name(),prop.getProperty("referrer",""));  this.setField(CollectionSchema.size_i.name(),Integer.parseInt(prop.getProperty("size","0")));  this.setField(CollectionSchema.wordcount_i.name(),Integer.parseInt(prop.getProperty("wc","0")));  final String dt=prop.getProperty("dt","t");  final String mime=crypt.simpleDecode(prop.getProperty("mime"));  if (mime != null && !mime.isEmpty() && Response.docType(mime) == dt.charAt(0)) {    this.setField(CollectionSchema.content_type.name(),mime);  } else {    final String[] mimes=Response.doctype2mime(null,dt.charAt(0));    this.setField(CollectionSchema.content_type.name(),mimes);  }  final String flagsp=prop.getProperty("flags","AAAAAA");  this.flags=(flagsp.length() > 6) ? QueryParams.empty_constraint : (new Bitfield(4,flagsp));  this.setField(CollectionSchema.language_s.name(),prop.getProperty("lang",""));  this.setField(CollectionSchema.inboundlinkscount_i.name(),Integer.parseInt(prop.getProperty("llocal","0")));  this.setField(CollectionSchema.outboundlinkscount_i.name(),Integer.parseInt(prop.getProperty("lother","0")));  this.imagec=Integer.parseInt(prop.getProperty("limage","0"));  this.audioc=Integer.parseInt(prop.getProperty("laudio","0"));  this.videoc=Integer.parseInt(prop.getProperty("lvideo","0"));  this.appc=Integer.parseInt(prop.getProperty("lapp","0"));  this.snippet=crypt.simpleDecode(prop.getProperty("snippet",""));  List<String> cs=new ArrayList<String>();  cs.add(collection);  this.setField(CollectionSchema.collection_sxt.name(),cs);  this.word=null;  if (prop.containsKey("wi")) {    this.word=new WordReferenceVars(new WordReferenceRow(Base64Order.enhancedCoder.decodeString(prop.getProperty("wi",""))),false);  }  if (prop.containsKey("favicon")) {    final String rawFaviconURL=crypt.simpleDecode(prop.getProperty("favicon",""));    DigestURL faviconURL=new DigestURL(rawFaviconURL);    this.setIconsFields(faviconURL);  }}  }
class C{  public void removeAttributes(String name,GoogleBaseAttributeType type){  Iterator<GoogleBaseAttribute> iter=attributes.iterator();  while (iter.hasNext()) {    GoogleBaseAttribute attribute=iter.next();    if (hasNameAndType(attribute,name,type)) {      iter.remove();    }  }}  }
class C{  protected Locale findMatch(FacesContext context,Locale pref){  Locale result=null;  Iterator<Locale> it=context.getApplication().getSupportedLocales();  while (it.hasNext()) {    Locale supportedLocale=it.next();    if (pref.equals(supportedLocale)) {      result=supportedLocale;      break;    } else {      if (pref.getLanguage().equals(supportedLocale.getLanguage()) && supportedLocale.getCountry().length() == 0) {        result=supportedLocale;      }    }  }  if (null == result) {    Locale defaultLocale=context.getApplication().getDefaultLocale();    if (defaultLocale != null) {      if (pref.equals(defaultLocale)) {        result=defaultLocale;      } else {        if (pref.getLanguage().equals(defaultLocale.getLanguage()) && defaultLocale.getCountry().length() == 0) {          result=defaultLocale;        }      }    }  }  return result;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  @Override public void parseProperties(Properties zkProp) throws IOException, ConfigException {  for (  Entry<Object,Object> entry : zkProp.entrySet()) {    String key=entry.getKey().toString().trim();    String value=entry.getValue().toString().trim();    if (key.equals("dataDir")) {      dataDir=value;    } else     if (key.equals("dataLogDir")) {      dataLogDir=value;    } else     if (key.equals("clientPort")) {      setClientPort(Integer.parseInt(value));    } else     if (key.equals("tickTime")) {      tickTime=Integer.parseInt(value);    } else     if (key.equals("initLimit")) {      initLimit=Integer.parseInt(value);    } else     if (key.equals("syncLimit")) {      syncLimit=Integer.parseInt(value);    } else     if (key.equals("electionAlg")) {      electionAlg=Integer.parseInt(value);    } else     if (key.equals("maxClientCnxns")) {      maxClientCnxns=Integer.parseInt(value);    } else     if (key.startsWith("server.")) {      int dot=key.indexOf('.');      long sid=Long.parseLong(key.substring(dot + 1));      String parts[]=value.split(":");      if ((parts.length != 2) && (parts.length != 3)) {        LOG.error(value + " does not have the form host:port or host:port:port");      }      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));      if (parts.length == 2) {        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr));      } else       if (parts.length == 3) {        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr,electionAddr));      }    } else     if (key.startsWith("group")) {      int dot=key.indexOf('.');      long gid=Long.parseLong(key.substring(dot + 1));      numGroups++;      String parts[]=value.split(":");      for (      String s : parts) {        long sid=Long.parseLong(s);        if (serverGroup.containsKey(sid))         throw new ConfigException("Server " + sid + "is in multiple groups"); else         serverGroup.put(sid,gid);      }    } else     if (key.startsWith("weight")) {      int dot=key.indexOf('.');      long sid=Long.parseLong(key.substring(dot + 1));      serverWeight.put(sid,Long.parseLong(value));    } else {      System.setProperty("zookeeper." + key,value);    }  }  if (dataDir == null) {    throw new IllegalArgumentException("dataDir is not set");  }  if (dataLogDir == null) {    dataLogDir=dataDir;  } else {    if (!new File(dataLogDir).isDirectory()) {      throw new IllegalArgumentException("dataLogDir " + dataLogDir + " is missing.");    }  }  if (tickTime == 0) {    throw new IllegalArgumentException("tickTime is not set");  }  if (servers.size() > 1) {    if (initLimit == 0) {      throw new IllegalArgumentException("initLimit is not set");    }    if (syncLimit == 0) {      throw new IllegalArgumentException("syncLimit is not set");    }    if (electionAlg != 0) {      for (      QuorumPeer.QuorumServer s : servers.values()) {        if (s.electionAddr == null)         throw new IllegalArgumentException("Missing election port for server: " + s.id);      }    }    if (serverGroup.size() > 0) {      if (servers.size() != serverGroup.size())       throw new ConfigException("Every server must be in exactly one group");      for (      QuorumPeer.QuorumServer s : servers.values()) {        if (!serverWeight.containsKey(s.id))         serverWeight.put(s.id,(long)1);      }      quorumVerifier=new QuorumHierarchical(numGroups,serverWeight,serverGroup);    } else {      LOG.info("Defaulting to majority quorums");      quorumVerifier=new QuorumMaj(servers.size());    }    File myIdFile=new File(dataDir,"myid");    if (!myIdFile.exists()) {      Long myid=getMyServerId();      if (myid != null) {        serverId=myid;        return;      }      if (zkRun == null)       return;      throw new IllegalArgumentException(myIdFile.toString() + " file is missing");    }    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile),StandardCharsets.UTF_8));    String myIdString;    try {      myIdString=br.readLine();    }  finally {      br.close();    }    try {      serverId=Long.parseLong(myIdString);    } catch (    NumberFormatException e) {      throw new IllegalArgumentException("serverid " + myIdString + " is not a number");    }  }}  }
class C{  public static void listObject_test2() throws Exception {  int i;  println("Test: listObjects(final String bucketName, final String prefix)");  String[] fileNames=new String[3];  for (i=0; i < 3; i++) {    String fileName=createFile(1 * MB);    client.putObject(bucketName,fileName,fileName);    Files.delete(Paths.get(fileName));    fileNames[i]=fileName;  }  i=0;  for (  Result r : client.listObjects(bucketName,"minio")) {    println(i++,r.get());    if (i == 10) {      break;    }  }  for (i=0; i < 3; i++) {    client.removeObject(bucketName,fileNames[i]);  }}  }
class C{  public ShippingOrderCreatedNotification(Object source){  super(source);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isMarkValid(int mark){  return mark > 0 && mark <= mMax;}  }
class C{  static public void checkZoningMap(ExportGroup exportGroup,ExportMask mask,Set<Initiator> initiators,DbClient dbClient){  if (mask.getZoningMap().isEmpty() && exportGroup.getZoneAllInitiators() == true) {    generateFullZoningMap(dbClient,exportGroup.getVirtualArray(),mask,initiators);  } else {    checkZoningMap(exportGroup.getVirtualArray(),mask,initiators);  }}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  @NonNull public static ZonedDateTime calendarToZonedDateTime(@NonNull Calendar calendar){  return DateTimeUtils.toInstant(calendar).atZone(ZoneId.systemDefault());}  }
class C{  public String toString(){  if (dnName == null)   return "";  return (dnName.toString());}  }
class C{  public static Iterator<Byte> iterator(InputStream self){  return iterator(new DataInputStream(self));}  }
class C{  @Override public boolean exist(String obj){  try {    return getUiObject(obj).exists();  } catch (  UiObjectNotFoundException e) {    return false;  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (  Player p : lastMoves.keySet()) {    DoubleLinkedList<Cell> list=lastMoves.get(p);    sb.append("  " + p + ": "+ list+ "\n");  }  return sb.toString();}  }
class C{  @Modifying @Transactional public Balance synchronizeBalanceOfCheque(Long chequeID,Balance balance){  Cheque cheque=chequeRepository.findOne(chequeID);  if (balance.getPayments() != null)   balance.getPayments().stream().forEach(null);  balance.setCheque(cheque);  balanceRepository.save(balance);  return balanceRepository.findByChequeId(chequeID);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:      return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:    return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void addZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.addZoomListener(listener);  }}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertificate tbsCert=x509Certificate.getTBSCertificate();  if (!CertUtils.isAlgIdEqual(tbsCert.getSignature(),x509Certificate.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCert.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCert);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509Certificate.getSignature().getBytes());}  }
class C{  public Stream<String> valueStream(){  return Stream.range(0,getRowCount()).map(null);}  }
class C{  protected SVGOMCursorElement(){}  }
class C{  public void clear(){  top.clear();}  }
class C{  protected void testParent(Branch parent){  for (int i=0, size=parent.nodeCount(); i < size; i++) {    Node node=parent.node(i);    assertTrue("Child node of root has parent of root",node.getParent() == parent);  }}  }
class C{  @InterfaceAudience.Private public TypeSystem reset(){  typeCache.clear();  initialize();  return this;}  }
class C{  public void store(long val){  SimulatedMemory.setLong(this,val);}  }
class C{  public void ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= threshold)   resize(MathUtils.nextPowerOfTwo((int)(sizeNeeded / loadFactor)));}  }
class C{  private void updateLowestPriorityAssignment(){  mLowestPriorityConnection=null;  for (  AudioOutputConnection connection : mAudioOutputConnections) {    if (connection.isConnected() && (mLowestPriorityConnection == null || mLowestPriorityConnection.getPriority() > connection.getPriority())) {      mLowestPriorityConnection=connection;    }  }}  }
class C{  public CLabeledComponent(final String labelText,final IHelpInformation helpInfo,final JComponent component){  super(new BorderLayout(5,5));  final JLabel label=new CHelpLabel(labelText,helpInfo);  label.setPreferredSize(new Dimension(170,25));  add(label,BorderLayout.WEST);  add(component,BorderLayout.CENTER);}  }
class C{  public SidedPlane(final SidedPlane sidedPlane){  super(sidedPlane,sidedPlane.D);  this.sigNum=-sidedPlane.sigNum;}  }
class C{  public boolean isUninstall(){  Object oo=get_Value(COLUMNNAME_Uninstall);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public ValidationEngine(XMLReaderCreator xrc,ErrorHandler eh,int flags){  super(makePropertyMap(xrc,eh,flags),(flags & COMPACT_SYNTAX) == 0 ? null : CompactSchemaReader.getInstance());}  }
class C{  public void appendOpenEmTag(){  text.append("<em>");}  }
class C{  public static String replaceEndPoint(String url,String endPoint){  return endPoint + url.replaceFirst(DEFAULT_ENDPOINT,"");}  }
class C{  private Locale(boolean unused,String lowerCaseLanguageCode,String upperCaseCountryCode){  this.languageCode=lowerCaseLanguageCode;  this.countryCode=upperCaseCountryCode;  this.variantCode="";}  }
class C{  public static String encodeNonCodes(String string){  Matcher matcher=nonCodes.matcher(string);  StringBuffer buf=new StringBuffer();  int idx=0;  while (matcher.find(idx)) {    int start=matcher.start();    buf.append(string.substring(idx,start));    buf.append("%25");    idx=start + 1;  }  buf.append(string.substring(idx));  return buf.toString();}  }
class C{  private void putWithValidation(String key,Object value) throws BitcoinURIParseException {  if (parameterMap.containsKey(key)) {    throw new BitcoinURIParseException(String.format("'%s' is duplicated, URI is invalid",key));  } else {    parameterMap.put(key,value);  }}  }
class C{  public CLIOutputWithRevisionResponse doSwitch(final SwitchRequest request) throws ApiException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--ignore-externals",request.isIgnoreExternals());  addFlag(cliArgs,"--ignore-ancestry",request.isIgnoreAncestry());  addFlag(cliArgs,"--relocate",request.isRelocate());  addFlag(cliArgs,"--force",request.isForce());  addOption(cliArgs,"--depth",request.getDepth());  addOption(cliArgs,"--set-depth",request.getSetDepth());  addOption(cliArgs,"--revision",request.getRevision());  addOption(cliArgs,"--accept",request.getAccept());  cliArgs.add("switch");  CommandLineResult result=runCommand(null,cliArgs,projectPath,singletonList(request.getLocation()),request.getUsername(),request.getPassword());  return newDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr()).withRevision(SubversionUtils.getUpdateRevision(result.getStdout()));}  }
class C{  boolean matchesOptionalSpacesFollowedBy(String s) throws JasperException {  Mark mark=mark();  skipSpaces();  boolean result=matches(s);  if (!result) {    reset(mark);  }  return result;}  }
class C{  private static void printMatrix(int[][] matrix){  Log.v(TAG,"\tprintMap:");  int m=matrix.length;  int n=matrix[0].length;  for (int j=0; j < n; j++) {    String colY="\t\t";    for (int i=0; i < m; i++) {      colY+=String.format("%3d",matrix[i][j]);    }    Log.v(TAG,colY);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TMODULE__ANNOTATIONS:    getAnnotations().clear();  return;case TypesPackage.TMODULE__QUALIFIED_NAME:setQualifiedName(QUALIFIED_NAME_EDEFAULT);return;case TypesPackage.TMODULE__PROJECT_ID:setProjectId(PROJECT_ID_EDEFAULT);return;case TypesPackage.TMODULE__VENDOR_ID:setVendorID(VENDOR_ID_EDEFAULT);return;case TypesPackage.TMODULE__MODULE_LOADER:setModuleLoader(MODULE_LOADER_EDEFAULT);return;case TypesPackage.TMODULE__N4JSD_MODULE:setN4jsdModule(N4JSD_MODULE_EDEFAULT);return;case TypesPackage.TMODULE__STATIC_POLYFILL_MODULE:setStaticPolyfillModule(STATIC_POLYFILL_MODULE_EDEFAULT);return;case TypesPackage.TMODULE__STATIC_POLYFILL_AWARE:setStaticPolyfillAware(STATIC_POLYFILL_AWARE_EDEFAULT);return;case TypesPackage.TMODULE__MAIN_MODULE:setMainModule(MAIN_MODULE_EDEFAULT);return;case TypesPackage.TMODULE__PRE_LINKING_PHASE:setPreLinkingPhase(PRE_LINKING_PHASE_EDEFAULT);return;case TypesPackage.TMODULE__TOP_LEVEL_TYPES:getTopLevelTypes().clear();return;case TypesPackage.TMODULE__VARIABLES:getVariables().clear();return;case TypesPackage.TMODULE__INTERNAL_TYPES:getInternalTypes().clear();return;case TypesPackage.TMODULE__EXPOSED_INTERNAL_TYPES:getExposedInternalTypes().clear();return;}super.eUnset(featureID);}  }
class C{  private static void writeXml(Object bean,OutputStream os,boolean fragment) throws JAXBException {  final Marshaller m=createMarshaller();  if (fragment)   m.setProperty(m.JAXB_FRAGMENT,Boolean.TRUE);  m.marshal(bean,os);}  }
class C{  public void printMatrix(){  showMethodWarning("printMatrix");}  }
class C{  @Override public void onPause(){  super.onPause();  mWebView.onPause();}  }
class C{  public SoftReference(T referent){  super(referent);  this.timestamp=clock;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private long calcWaitMillisFromNow(DLockRequestMessage request){  long result=request.getTimeoutTS();  if (result != Long.MAX_VALUE) {    long now=DLockService.getLockTimeStamp(this.dlock.getDistributionManager());    result=result - now;  }  return result;}  }
class C{  public void addSymbolToContext(Object name,SymbolNode s){  table.put(name,new Pair(s));}  }
class C{  public static void updateMacheps(){  MACHEPS=1;  do   MACHEPS/=2; while (1 + MACHEPS / 2 != 1);}  }
class C{  public void insertValue(int position,Comparable key,Object value){  if (position < 0 || position > this.data.size()) {    throw new IllegalArgumentException("'position' out of bounds.");  }  ParamChecks.nullNotPermitted(key,"key");  int pos=getIndex(key);  if (pos >= 0) {    this.data.remove(pos);  }  KeyedObject item=new KeyedObject(key,value);  if (position <= this.data.size()) {    this.data.add(position,item);  } else {    this.data.add(item);  }}  }
class C{  public SingleOutcome(double[] goldstandard,double[] prediction,double bipartitionThreshold,List<String> labels,String id){  this.goldstandard=goldstandard;  this.prediction=prediction;  this.bipartitionThreshold=bipartitionThreshold;  this.labels=labels;  this.setId(id);}  }
class C{  public SetPropertyITCase(String name){  super(name);}  }
class C{  public SimpleList(int initialCapacity){  source=new Object[initialCapacity];  size=0;}  }
class C{  public synchronized void fatal(String s,Parameter p1){  println(a("FATAL ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  if (p1 != null)   println(a("PARAMETER: " + p1),ALL_MESSAGE_LOGS,true);  exitWithError(this,error.toString(),throwsErrors);}  }
class C{  public void unbind(String name) throws RemoteException, NotBoundException {  if (!isRunning()) {    throw new IllegalStateException("RMIRegistryService is not running");  }  registry.unbind(name);}  }
class C{  public void testTwoExecutionsInProject() throws Exception {  Map<String,org.codehaus.cargo.container.Container> context=new HashMap<String,org.codehaus.cargo.container.Container>();  setUpMojo(InstalledLocalContainerStub.class,InstalledLocalContainerStub.ID,StandaloneLocalConfigurationStub.class);  this.mojo.setPluginContext(context);  this.mojo.setCargoProject(createTestCargoProject("pom"));  this.mojo.getConfigurationElement().setHome("foo");  this.mojo.execute();  this.mojo.getConfigurationElement().setHome("bar");  this.mojo.execute();  assertEquals(2,context.size());  Iterator<org.codehaus.cargo.container.Container> iter=context.values().iterator();  org.codehaus.cargo.container.Container container1=iter.next();  org.codehaus.cargo.container.Container container2=iter.next();  assertFalse("containers should be different",container1.equals(container2));}  }
class C{  private void validateNumCores(){  String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  try {    int numCores=Integer.parseInt(numCoresStr);    if (numCores < CarbonCommonConstants.NUM_CORES_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_MAX_VAL) {      LOGGER.info("The num Cores  value \"" + numCoresStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The num Cores  value \"" + numCoresStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }}  }
class C{  private <T extends DataObject>void printBeanProperties(PropertyDescriptor[] pds,T object) throws Exception {  System.out.println("id: " + object.getId().toString());  Object objValue;  Class type;  for (  PropertyDescriptor pd : pds) {    if (pd.getName().equals("class") || pd.getName().equals("id")) {      continue;    }    Name nameAnnotation=pd.getReadMethod().getAnnotation(Name.class);    String objKey;    if (nameAnnotation == null) {      objKey=pd.getName();    } else {      objKey=nameAnnotation.value();    }    objValue=pd.getReadMethod().invoke(object);    if (objValue == null) {      continue;    }    System.out.print("\t" + objKey + " = ");    Encrypt encryptAnnotation=pd.getReadMethod().getAnnotation(Encrypt.class);    if (encryptAnnotation != null) {      System.out.println("*** ENCRYPTED CONTENT ***");      continue;    }    type=pd.getPropertyType();    if (type == URI.class) {      System.out.println("URI: " + objValue);    } else     if (type == StringMap.class) {      System.out.println("StringMap " + objValue);    } else     if (type == StringSet.class) {      System.out.println("StringSet " + objValue);    } else     if (type == StringSetMap.class) {      System.out.println("StringSetMap " + objValue);    } else     if (type == OpStatusMap.class) {      System.out.println("OpStatusMap " + objValue);    } else {      System.out.println(objValue);    }  }  System.out.println();}  }
class C{  public ToStringBuilder append(String fieldName,long value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public void updateDebug(Boolean debug,Boolean database,Boolean exception,Boolean tracing,Boolean dump,Boolean timer,Boolean implicitAccess,Boolean queryUsage) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_DEBUGGING);  if (!hasAccess)   throw new SecurityException("no access to change debugging settings");  Element debugging=_getRootElement("debugging");  if (debug != null)   debugging.setAttribute("debug",Caster.toString(debug.booleanValue())); else   debugging.removeAttribute("debug");  if (database != null)   debugging.setAttribute("database",Caster.toString(database.booleanValue())); else   debugging.removeAttribute("database");  if (exception != null)   debugging.setAttribute("exception",Caster.toString(exception.booleanValue())); else   debugging.removeAttribute("exception");  if (tracing != null)   debugging.setAttribute("tracing",Caster.toString(tracing.booleanValue())); else   debugging.removeAttribute("tracing");  if (dump != null)   debugging.setAttribute("dump",Caster.toString(dump.booleanValue())); else   debugging.removeAttribute("dump");  if (timer != null)   debugging.setAttribute("timer",Caster.toString(timer.booleanValue())); else   debugging.removeAttribute("timer");  if (implicitAccess != null)   debugging.setAttribute("implicit-access",Caster.toString(implicitAccess.booleanValue())); else   debugging.removeAttribute("implicit-access");  if (queryUsage != null)   debugging.setAttribute("query-usage",Caster.toString(queryUsage.booleanValue())); else   debugging.removeAttribute("query-usage");}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Collection<X509CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException {  if (ldap) {    X509CRLSelector xsel=(X509CRLSelector)selector;    try {      xsel=ldapHelper.wrap(xsel,null,ldapPath);    } catch (    IOException ioe) {      throw new CertStoreException(ioe);    }    try {      return (Collection<X509CRL>)ldapCertStore.getCRLs(xsel);    } catch (    CertStoreException cse) {      throw new PKIX.CertStoreTypeException("LDAP",cse);    }  }  long time=System.currentTimeMillis();  if (time - lastChecked < CHECK_INTERVAL) {    if (debug != null) {      debug.println("Returning CRL from cache");    }    return getMatchingCRLs(crl,selector);  }  lastChecked=time;  try {    URLConnection connection=uri.toURL().openConnection();    if (lastModified != 0) {      connection.setIfModifiedSince(lastModified);    }    long oldLastModified=lastModified;    connection.setConnectTimeout(CRL_CONNECT_TIMEOUT);    try (InputStream in=connection.getInputStream()){      lastModified=connection.getLastModified();      if (oldLastModified != 0) {        if (oldLastModified == lastModified) {          if (debug != null) {            debug.println("Not modified, using cached copy");          }          return getMatchingCRLs(crl,selector);        } else         if (connection instanceof HttpURLConnection) {          HttpURLConnection hconn=(HttpURLConnection)connection;          if (hconn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {            if (debug != null) {              debug.println("Not modified, using cached copy");            }            return getMatchingCRLs(crl,selector);          }        }      }      if (debug != null) {        debug.println("Downloading new CRL...");      }      crl=(X509CRL)factory.generateCRL(in);    }     return getMatchingCRLs(crl,selector);  } catch (  IOException|CRLException e) {    if (debug != null) {      debug.println("Exception fetching CRL:");      e.printStackTrace();    }    lastModified=0;    crl=null;    throw new PKIX.CertStoreTypeException("URI",new CertStoreException(e));  }}  }
class C{  public synchronized void flush(){  mCache.clear();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:48.952 -0500",hash_original_method="740AD223006A949AE0C5FC9EABD0A7B2",hash_generated_method="740AD223006A949AE0C5FC9EABD0A7B2") void checkConnected(){  if ((mTag.getConnectedTechnology() != mSelectedTechnology) || (mTag.getConnectedTechnology() == -1)) {    throw new IllegalStateException("Call connect() first!");  }}  }
class C{  public RepowerReversalService(Environment environment,String consumerKey,PrivateKey privateKey){  super(consumerKey,privateKey);  this.environment=environment;}  }
class C{  public ManagedEntity[] searchManagedEntities(ManagedEntity parent,String type,boolean recurse) throws VMWareException {  try {    String[][] typeInfo=new String[][]{new String[]{type,"name"}};    InventoryNavigator navigator=new InventoryNavigator(parent);    ManagedEntity[] entities=navigator.searchManagedEntities(typeInfo,recurse);    return entities;  } catch (  InvalidProperty e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public E next(){  count++;  safeToRemove=true;  E retVal=current.value;  current=current.next;  return retVal;}  }
class C{  public PrefixResolverDefault(Node xpathExpressionContext){  m_context=xpathExpressionContext;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mmt";  String parameter="0.8";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public static <T>Iterable<T> dropWhile(final Predicate<Object> predicate,final Iterable<T> iterable){  return XUtils.dropWhile(predicate,iterable);}  }
class C{  private LongMap(boolean dummy){}  }
class C{  public BurpCertificate importCertificateFromString(String inputString){  setStatus("Importing certificate...");  CertificateFactory certFactory;  try {    certFactory=CertificateFactory.getInstance("X.509");    ByteArrayInputStream bais=new ByteArrayInputStream(Base64.decode(inputString));    X509Certificate x509certificate=(X509Certificate)certFactory.generateCertificate(bais);    BurpCertificate certificate=new BurpCertificate(x509certificate);    certificate.setPublicKey(x509certificate.getPublicKey());    certificate.setSource("Imported");    burpCertificateStore.addCertificate(certificate);    setCertificateTree();    setStatus("Certificate imported");    return certificate;  } catch (  CertificateException|Base64DecodingException e) {    setStatus("Error reading input certificate. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error. (" + e.getMessage() + ")");    e.printStackTrace();  }  return null;}  }
class C{  public static VcfReader openVcfReader(File f,ReferenceRanges<String> ranges) throws IOException {  final boolean stdin=CommonFlags.isStdio(f);  final VcfReader vcfr;  if (ranges == null || ranges.allAvailable()) {    vcfr=new VcfReader(new BufferedReader(new InputStreamReader(stdin ? System.in : FileUtils.createInputStream(f,true))));  } else {    if (stdin) {      throw new IOException("Cannot apply region restrictions when reading from stdin");    }    vcfr=new VcfReader(new TabixLineReader(f,TabixIndexer.indexFileName(f),ranges),VcfUtils.getHeader(f));  }  return vcfr;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  String url=WebUtil.getParameter(request,"ForwardTo");  if (url == null || url.length() == 0)   url="emailVerify.jsp";  WebLogin thisLogin=new WebLogin(request,response,ctx);  thisLogin.init();  thisLogin.setMode("EMailVerify");  if (!thisLogin.action()) {    if (!response.isCommitted())     response.sendRedirect("loginServlet?ForwardTo=" + url);    return;  }  url="/" + url;  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  protected static void fatal(String msg,Throwable t){  System.out.println(msg);  if (t != null)   t.printStackTrace();  fail();}  }
class C{  public ServicesStillPublishedException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void writeAndTick(int integer,Keep keep) throws JSONException {  int width=keep.bitsize();  keep.tick(integer);  if (probe) {    log("\"" + keep.value(integer) + "\"");  }  write(integer,width);}  }
class C{  private <T>Collection<T> convert(Enumeration<T> iter){  List<T> list=new ArrayList<>();  while (iter.hasMoreElements())   list.add(iter.nextElement());  return list;}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    soFar=tensNames[number % 10] + soFar;    number/=10;  }  if (number == 0)   return soFar;  return numNames[number] + "Hundred-" + soFar;}  }
class C{  public ICUCollationKeyAnalyzer(Collator collator){  this.factory=new ICUCollationAttributeFactory(collator);}  }
class C{  @Override public Void visitMethodInvocation(MethodInvocationTree node,Void p){  if (isInvocationOfEquals(node)) {    AnnotatedTypeMirror recv=atypeFactory.getReceiverType(node);    AnnotatedTypeMirror comp=atypeFactory.getAnnotatedType(node.getArguments().get(0));    if (this.checker.getLintOption("dotequals",true) && recv.hasEffectiveAnnotation(INTERNED) && comp.hasEffectiveAnnotation(INTERNED))     checker.report(Result.warning("unnecessary.equals"),node);  }  return super.visitMethodInvocation(node,p);}  }
class C{  public void readMoments(InputStream missionStream) throws MissionParseException {  MissionParser.parseMission(missionStream,this);}  }
class C{  public boolean isEntryBlock(){  return false;}  }
class C{  public Boolean isAcknowledged(){  return acknowledged;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean isInlineSourceMap(){  return inlineSourceMap;}  }
class C{  public boolean isRel(){  boolean isRel=false;  if (!isMult() && (getType() != ArchiveFldType.LONG_TEXT))   isRel=true;  return isRel;}  }
class C{  boolean advance(Element elem){  if ((exclusions != null) && exclusions.get(elem.getIndex())) {    return false;  }  if (state != null) {    ContentModelState newState=state.advance(elem);    if (newState != null) {      state=newState;      return true;    }  } else   if (this.elem.getType() == ANY) {    return true;  }  return (inclusions != null) && inclusions.get(elem.getIndex());}  }
class C{  public EfficientTerminalSet plus(Terminal terminal){  Integer index=indices.get(terminal);  if (index == null)   throw new IllegalArgumentException("Unregistered terminal: " + terminal);  return setBit(index,true);}  }
class C{  public static CacheInfoResponse create(DistributionManager dm,InternalDistributedMember recipient){  CacheInfoResponse m=new CacheInfoResponse();  m.setRecipient(recipient);  try {    GemFireCacheImpl c=(GemFireCacheImpl)CacheFactory.getInstanceCloseOk(dm.getSystem());    m.info=new RemoteCacheInfo(c);  } catch (  CancelException ex) {    m.info=null;  }  return m;}  }
class C{  private List<Member> createMembers(int nodes){  List<Member> members=new ArrayList<>();  for (int i=0; i < nodes; i++) {    members.add(new ServerMember(Member.Type.ACTIVE,new Address("localhost",5000 + i),new Address("localhost",6000 + i),Instant.now()));  }  return members;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  @Override public void deactivateMirror(URI storage,List<URI> mirrorList,List<URI> promotees,Boolean isCG,String opId) throws ControllerException {  _log.info("deactivateMirror: START");  TaskCompleter taskCompleter=null;  String mirrorStr=Joiner.on("\t").join(mirrorList);  try {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    Workflow workflow=_workflowService.getNewWorkflow(this,"deactivateMirror",true,opId);    taskCompleter=new BlockMirrorDeactivateCompleter(mirrorList,promotees,opId);    ControllerUtils.checkMirrorConsistencyGroup(mirrorList,_dbClient,taskCompleter);    String detachStep=workflow.createStepId();    Workflow.Method detach=detachMirrorMethod(storage,mirrorList,isCG);    workflow.createStep("deactivate","detaching mirror volume: " + mirrorStr,null,storage,storageSystem.getSystemType(),getClass(),detach,null,detachStep);    List<URI> mirrorsToDelete=mirrorList;    if (isCG) {      mirrorsToDelete=new ArrayList<URI>();      List<Volume> promotedVolumes=_dbClient.queryObject(Volume.class,promotees);      List<URI> orderedMirrorsToPromote=new ArrayList<URI>();      List<URI> orderedPromotedVolumes=new ArrayList<URI>();      for (      URI mirror : mirrorList) {        URI promotedVolume=null;        for (        Volume promotee : promotedVolumes) {          OpStatusMap statusMap=promotee.getOpStatus();          for (          Map.Entry<String,Operation> entry : statusMap.entrySet()) {            Operation operation=entry.getValue();            if (operation.getAssociatedResourcesField().contains(mirror.toString())) {              promotedVolume=promotee.getId();            }          }        }        if (promotedVolume != null) {          orderedMirrorsToPromote.add(mirror);          orderedPromotedVolumes.add(promotedVolume);        } else {          mirrorsToDelete.add(mirror);        }      }      if (!orderedMirrorsToPromote.isEmpty()) {        String stepId=workflow.createStep(PROMOTE_MIRROR_STEP_GROUP,String.format("Promote mirrors : %s",Joiner.on("\t").join(orderedMirrorsToPromote)),detachStep,storage,storageSystem.getSystemType(),this.getClass(),promoteMirrorMethod(orderedMirrorsToPromote,orderedPromotedVolumes,isCG),null,null);      }    }    String deleteStep=workflow.createStepId();    Workflow.Method delete=deleteMirrorMethod(storage,mirrorsToDelete,isCG);    workflow.createStep("deactivate","deleting mirror volume: " + Joiner.on("\t").join(mirrorsToDelete),detachStep,storage,storageSystem.getSystemType(),getClass(),delete,null,deleteStep);    String successMessage=String.format("Successfully deactivated mirror %s on StorageArray %s",mirrorStr,storage);    workflow.executePlan(taskCompleter,successMessage);  } catch (  Exception e) {    if (_log.isErrorEnabled()) {      String msg=String.format("Deactivate mirror failed for mirror %s",mirrorStr);      _log.error(msg);    }    if (taskCompleter != null) {      String opName=ResourceOperationTypeEnum.DEACTIVATE_VOLUME_MIRROR.getName();      ServiceError serviceError=DeviceControllerException.errors.jobFailedOp(opName);      taskCompleter.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.deactivateMirrorFailed(e);    }  }}  }
class C{  private void compilePattern(String patternString){  try {    pattern=Pattern.compile(patternString);  } catch (  PatternSyntaxException ex) {    LOGGER.warning("Invalid regex: " + ex.getLocalizedMessage());  }}  }
class C{  public boolean revertToDefault(){  if (FACTORY.revertToDefault()) {    fireSettingsEvent(EventType.REVERT_TO_DEFAULT);    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Element newElement;  Attr attrAddress;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("hc_staff",true);  addressElementList=doc.getElementsByTagName("body");  testAddress=(Element)addressElementList.item(0);  newElement=doc.createElement("p");  appendedChild=testAddress.appendChild(newElement);  newAttribute=doc.createAttribute("title");  setAttr1=newElement.setAttributeNode(newAttribute);{    boolean success=false;    try {      setAttr2=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public boolean isInit(){  return getState().isInit();}  }
class C{  private static void printEmphasized(String toPrint){  pristineSysErr.println("+----------\\");  for (  String line : toPrint.split("\n")) {    pristineSysErr.println("| " + line);  }  pristineSysErr.println("+----------/");}  }
class C{  private static void convertUrlParams(String url,Properties info){  if (url == null) {    return;  }  int iQuestionMark=url.indexOf("?");  if (iQuestionMark == -1) {    return;  }  String propString=url.substring(iQuestionMark + 1);  StringTokenizer st=new StringTokenizer(propString,"&;");  while (st.hasMoreTokens()) {    String propertyString=st.nextToken();    int iIs=propertyString.indexOf("=");    if (iIs > -1) {      String property=propertyString.substring(0,iIs);      String value=propertyString.substring(iIs + 1);      info.setProperty(property,value);    } else {      info.setProperty(propertyString,"");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:27.766 -0500",hash_original_method="7DCDC5B075D765D7A58F6B283FA65BC0",hash_generated_method="062FA83EFBFB4204B55A8B00490D8079") public static FileDescriptor open(String path,int flags) throws FileNotFoundException {  FileDescriptor fd=null;  try {    int mode=((flags & O_ACCMODE) == O_RDONLY) ? 0 : 0600;    fd=Libcore.os.open(path,flags,mode);    if (fd.valid()) {      if (S_ISDIR(Libcore.os.fstat(fd).st_mode)) {        throw new ErrnoException("open",EISDIR);      }    }    return fd;  } catch (  ErrnoException errnoException) {    try {      if (fd != null) {        IoUtils.close(fd);      }    } catch (    IOException ignored) {    }    FileNotFoundException ex=new FileNotFoundException(path + ": " + errnoException.getMessage());    ex.initCause(errnoException);    throw ex;  }}  }
class C{  public SessionTracker(Context context,Session.StatusCallback callback){  this(context,callback,null);}  }
class C{  public boolean isVertexIgnored(Object vertex){  return !graph.getModel().isVertex(vertex) || !graph.isCellVisible(vertex);}  }
class C{  private void addTrackWithMarker(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.startRecording();  instrumentation.waitForIdleSync();  EndToEndTestUtils.sendGps(2);  EndToEndTestUtils.createWaypoint(0);  EndToEndTestUtils.sendGps(2,2);  EndToEndTestUtils.createWaypoint(1);  EndToEndTestUtils.sendGps(2,4);  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  EndToEndTestUtils.stopRecording(true);}  }
class C{  private MInvoice createInvoiceLineFromShipmentLine(MInvoice invoice,MOrder order,MInOut inOut,MInOutLine inOutLine){  if (invoice == null) {    invoice=new MInvoice(inOut,p_DateInvoiced);    if (!invoice.save())     throw new IllegalStateException("Could not create Invoice (s)");  }  if (m_ship == null || m_ship.getM_InOut_ID() != inOut.getM_InOut_ID()) {    MDocType dt=MDocType.get(getCtx(),inOut.getC_DocType_ID());    if (m_bp == null || m_bp.getC_BPartner_ID() != inOut.getC_BPartner_ID())     m_bp=new MBPartner(getCtx(),inOut.getC_BPartner_ID(),get_TrxName());    MClient client=MClient.get(getCtx(),order.getAD_Client_ID());    String AD_Language=client.getAD_Language();    if (client.isMultiLingualDocument() && m_bp.getAD_Language() != null)     AD_Language=m_bp.getAD_Language();    if (AD_Language == null)     AD_Language=Language.getBaseAD_Language();    java.text.SimpleDateFormat format=DisplayType.getDateFormat(DisplayType.Date,Language.getLanguage(AD_Language));    String referenceDescr=dt.getPrintName(m_bp.getAD_Language()) + ": " + inOut.getDocumentNo()+ " - "+ format.format(inOut.getMovementDate());    m_ship=inOut;    MInvoiceLine descInvLine=new MInvoiceLine(invoice);    descInvLine.setIsDescription(true);    descInvLine.setDescription(referenceDescr);    descInvLine.setLine(m_line + inOutLine.getLine() - 2);    if (!descInvLine.save())     throw new IllegalStateException("Could not create Invoice Comment Line (sh)");    if (order.getBill_Location_ID() != inOut.getC_BPartner_Location_ID()) {      MLocation addr=MLocation.getBPLocation(getCtx(),inOut.getC_BPartner_Location_ID(),null);      descInvLine=new MInvoiceLine(invoice);      descInvLine.setIsDescription(true);      descInvLine.setDescription(addr.toString());      descInvLine.setLine(m_line + inOutLine.getLine() - 1);      if (!descInvLine.save())       throw new IllegalStateException("Could not create Invoice Comment Line 2 (sh)");    }  }  MInvoiceLine invLine=new MInvoiceLine(invoice);  invLine.setShipLine(inOutLine);  if (inOutLine.sameOrderLineUOM())   invLine.setQtyEntered(inOutLine.getQtyEntered()); else   invLine.setQtyEntered(inOutLine.getMovementQty());  invLine.setQtyInvoiced(inOutLine.getMovementQty());  invLine.setLine(m_line + inOutLine.getLine());  String toBeInvoiced=inOutLine.get_ValueAsString("ToBeInvoiced");  if ("N".equals(toBeInvoiced) || "false".equals(toBeInvoiced)) {    invLine.setPriceEntered(Env.ZERO);    invLine.setPriceActual(Env.ZERO);    invLine.setPriceList(Env.ZERO);    invLine.setPriceLimit(Env.ZERO);    invLine.setLineNetAmt(Env.ZERO);    invLine.setIsDescription(true);  }  if (!invLine.save())   throw new IllegalStateException("Could not create Invoice Line (s)");  inOutLine.setIsInvoiced(true);  if (!inOutLine.save())   throw new IllegalStateException("Could not update Shipment Line");  log.fine(invLine.toString());  return invoice;}  }
class C{  public final List<Throwable> errors(){  return errors;}  }
class C{  public final synchronized void makeHumanNullMove(){  if (humansTurn()) {    int varNo=game.tree.addMove("--","",0,"","");    game.tree.goForward(varNo);    abortSearch();    updateComputeThreads();    updateGUI();    gui.setSelection(-1);  }}  }
class C{  protected void validateOnStop(){  if (Command.STOP.equals(getCommand())) {  }}  }
class C{  public NetworkBookItem(INetworkLink link,String id,int index,CharSequence title,CharSequence summary,List<AuthorData> authors,List<String> tags,String seriesTitle,float indexInSeries,UrlInfoCollection<?> urls){  super(link,title,summary,urls);  Index=index;  Id=id;  Authors=new LinkedList<AuthorData>(authors);  Tags=new LinkedList<String>(tags);  SeriesTitle=seriesTitle;  IndexInSeries=indexInSeries;}  }
class C{  private void drawError(Graphics g,Exception e){  userAgent.displayError(e);}  }
class C{  public SabresQuery<T> whereContainsAll(String key,List<?> values){  innerSelect=new SelectCommand(SabresList.getTableName(name,key),Collections.singletonList(SabresList.getParentIdKey()));  innerSelect.as(SabresList.getParentIdKey(),SabresObject.getObjectIdKey());  Where where=null;  for (  Object o : values) {    if (where == null) {      where=Where.equalTo(SabresList.getValueKey(),SabresValue.create(o));    } else {      where.or(Where.equalTo(SabresList.getValueKey(),SabresValue.create(o)));    }  }  innerSelect.where(where);  innerSelect.groupBy(SabresList.getParentIdKey());  innerSelect.having(Where.equalTo(new SqlFunction(SabresList.getParentIdKey(),SqlFunction.Function.Count).toSql(),new IntValue(values.size())));  innerSelect.withoutSemicolon();  return this;}  }
class C{  public void add(String sequence,int start,int end){  getOrAdd(sequence).add(start,end);}  }
class C{  public static String fromAttrModelingModelClass(String vaModelClass){  return vaModelClass.split(ValueAnalysis.MODEL_PACKAGE_PREFIX)[1];}  }
class C{  public void deleteMin(){  if (isEmpty())   throw new NoSuchElementException("BST underflow");  if (!isRed(root.left) && !isRed(root.right))   root.color=RED;  root=deleteMin(root);  if (!isEmpty())   root.color=BLACK;}  }
class C{  public KMLIconStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  private Object readResolve(){  return ToStringStyle.SIMPLE_STYLE;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BasicOptionPaneUI();}  }
class C{  private static void prepareDatabaseConnections(){  NaviLogger.info("Initializing database connections");  final CDatabaseManager manager=CDatabaseManager.instance();  for (  final DatabaseConfigItem database : ConfigManager.instance().getDatabases()) {    manager.addDatabase(new CDatabase(database.getDescription(),database.getDriver(),database.getHost(),database.getName(),database.getUser(),database.getPassword(),database.getIdentity(),database.isSavePassword(),database.isAutoConnect()));  }}  }
class C{  @Override public void initialize(){  final ActorSystem actorSystem=actorSystemManager.retrieveActorSystem();  ClusterSingletonManagerSettings settings=ClusterSingletonManagerSettings.create(actorSystem);  actorSystem.actorOf(Props.create(ClusterListener.class,this.memberAddresses),"clusterListener");  while (this.memberAddresses.isEmpty()) {    LOGGER.info("Router init waiting 1000ms for cluster members to join...");    try {      Thread.sleep(1000L);    } catch (    InterruptedException e) {      throw new FluxError(FluxError.ErrorType.runtime,"All Router(s) initialization failed.",e);    }  }  final Iterable<Pair<String,ClusterRouterPoolSettings>> configurations=routerConfigurationRegistry.getConfigurations();  for (  Pair<String,ClusterRouterPoolSettings> next : configurations) {    actorSystem.actorOf(ClusterSingletonManager.props(new ClusterRouterPool(new RoundRobinPool(2).withSupervisorStrategy(getGatewayTasksuperviseStrategy()),next.getValue()).props(new RemoteRouterConfig(new RoundRobinPool(6),this.memberAddresses).props(Props.create(AkkaGatewayTask.class))),PoisonPill.getInstance(),settings),next.getKey());    ClusterSingletonProxySettings proxySettings=ClusterSingletonProxySettings.create(actorSystem);    this.proxyMap.put(next.getKey(),actorSystem.actorOf(ClusterSingletonProxy.props("/user/" + next.getKey(),proxySettings),next.getKey() + "_routerProxy"));  }}  }
class C{  static public String numberToString(Number n) throws JSONException {  if (n == null) {    throw new JSONException("Null pointer");  }  testValidity(n);  String s=n.toString();  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public boolean isOffilne(){  return offilne;}  }
class C{  public void snapshotBefore(){  before=new HeapSnapshot();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static Workflow.Method rollbackExpandVolumeMethod(URI systemURI,URI volumeURI,String expandStepId){  return new Workflow.Method("rollBackExpandVolume",systemURI,volumeURI,expandStepId);}  }
class C{  protected DelegatingSetterDeclarationImpl(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void assertEqualLines(String expected,String actual){  assertEqualLines("",expected,actual);}  }
class C{  public static void removeErrorListener(ActionListener listener){  if (onErrorListeners == null) {    return;  }  onErrorListeners.removeListener(listener);  if (!onErrorListeners.hasListeners()) {    onErrorListeners=null;  }}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  private void dropTables(){  try {    connection=DbConnection.open(dbConnectionCfg);    Statement statement=connection.createStatement();    String query="DROP TABLE AOESTRORG";    statement.executeUpdate(query);    query="DROP TABLE AOUSR";    statement.executeUpdate(query);    query="DROP TABLE AOUSRORGV;";    statement.executeUpdate(query);    statement.close();    DbConnection.close();  } catch (  Exception e) {    try {      DbConnection.ensureClose(e);    } catch (    Exception e1) {      LOGGER.error(e1);    }  }}  }
class C{  private void computeTimelineDuration(){  mDurationMs=0;  final int mediaItemsCount=mMediaItems.size();  for (int i=0; i < mediaItemsCount; i++) {    final MediaItem mediaItem=mMediaItems.get(i);    mDurationMs+=mediaItem.getTimelineDuration();    if (mediaItem.getEndTransition() != null) {      if (i < mediaItemsCount - 1) {        mDurationMs-=mediaItem.getEndTransition().getDuration();      }    }  }}  }
class C{  public static Remote exportObject(Remote obj,ActivationID id,int port) throws RemoteException {  return exportObject(obj,new ActivatableServerRef(id,port));}  }
class C{  public static Map<String,Object> generateResponseExampleMap(boolean generateMissingExamples,Operation operation,Map<String,Model> definitions,MarkupDocBuilder markupDocBuilder){  Map<String,Object> examples=new LinkedHashMap<>();  Map<String,Response> responses=operation.getResponses();  if (responses != null)   for (  Map.Entry<String,Response> responseEntry : responses.entrySet()) {    Response response=responseEntry.getValue();    Object example=response.getExamples();    if (example == null) {      Property schema=response.getSchema();      if (schema != null) {        example=schema.getExample();        if (example == null && schema instanceof RefProperty) {          String simpleRef=((RefProperty)schema).getSimpleRef();          example=generateExampleForRefModel(generateMissingExamples,simpleRef,definitions,markupDocBuilder,new HashMap<String,Integer>());        }        if (example == null && generateMissingExamples) {          example=PropertyUtils.generateExample(schema,markupDocBuilder);        }      }    }    if (example != null)     examples.put(responseEntry.getKey(),example);  }  return examples;}  }
class C{  public XMLParser(){}  }
class C{  private static boolean colorOf(Entry p){  return (p == null ? BLACK : p.color);}  }
class C{  public LinkingMorphemes(List<String> aMorphemes){  morphemes=aMorphemes;}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public synchronized boolean isSnapshotted(long genNumber){  return !nameToDetailsMapping.isEmpty() && isSnapshotted(solrCore.getIndexDir(),genNumber);}  }
class C{  public void testBasicInsertByGroup() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  Statement stmt;  this.conn.setServerGroupName("fabric_test1_shard2");  stmt=this.conn.createStatement();  stmt.executeUpdate("insert into employees values (1, 'William', 'Gisbon')");  stmt.executeUpdate("insert into employees values (6, 'Samuel', 'Delany')");  this.conn.setServerGroupName("fabric_test1_shard1");  stmt.executeUpdate("insert into employees values (9, 'William', 'Turner')");  stmt.executeUpdate("insert into employees values (19, 'Albrecht', 'Durer')");  assertBasicDataIsInProperPlaces();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BETreeUI();}  }
class C{  public static HasChildQueryBuilder hasChildQuery(String type,QueryBuilder query){  return new HasChildQueryBuilder(type,query);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public MatrixStack scale(Vector3D scaleVector){  scale(scaleVector.getX(),scaleVector.getY(),scaleVector.getZ());  return this;}  }
class C{  public String convertNameToRef(final String value){  if (nameLookup == null) {    return null;  } else {    return (String)nameLookup.get(value);  }}  }
class C{  public ReferenceBinding genericType(){  if (this.type instanceof UnresolvedReferenceBinding)   ((UnresolvedReferenceBinding)this.type).resolve(this.environment,false);  return this.type;}  }
class C{  public static String generateHash(String password){  String salt=generateSalt();  return Crypt.crypt(password,CRYPT_SHA_512 + salt);}  }
class C{  public RemoveDuplicatesTokenFilter(TokenStream in){  super(in);}  }
class C{  protected void configMinPts(Parameterization config){  IntParameter minptsP=new IntParameter(DBSCAN.Parameterizer.MINPTS_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ONE_INT);  if (config.grab(minptsP)) {    settings.minpts=minptsP.intValue();  }}  }
class C{  AuthService(ArgusHttpClient client){  super(client);}  }
class C{  public TaskList createSnapshotSession(URI resourceURI,SnapshotSessionCreateParam param,BlockFullCopyManager fcManager){  if (URIUtil.isType(resourceURI,Volume.class) || URIUtil.isType(resourceURI,BlockSnapshot.class)) {    BlockObject blockObject=BlockSnapshotSessionUtils.querySnapshotSessionSource(resourceURI,_uriInfo,false,_dbClient);    if (NullColumnValueGetter.isNotNullValue(blockObject.getReplicationGroupInstance())) {      return createSnapshotSession(blockObject.getConsistencyGroup(),param,fcManager);    } else {      return createSnapshotSession(Lists.newArrayList(blockObject),param,fcManager);    }  } else   if (URIUtil.isType(resourceURI,BlockConsistencyGroup.class)) {    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,resourceURI);    return createSnapshotSession(cg,param,fcManager);  }  return null;}  }
class C{  public Matrix4x4 transpose(){  return set(matrix[0][0],matrix[1][0],matrix[2][0],matrix[3][0],matrix[0][1],matrix[1][1],matrix[2][1],matrix[3][1],matrix[0][2],matrix[1][2],matrix[2][2],matrix[3][2],matrix[0][3],matrix[1][3],matrix[2][3],matrix[3][3]);}  }
class C{  protected void processHttpUploadResponse(byte[] response) throws PayloadException, NetworkException {  if (mUploadManager.isCancelled() || mUploadManager.isPaused()) {    return;  }  FileTransferHttpInfoDocument infoDocument;  if (response == null || (infoDocument=FileTransferUtils.parseFileTransferHttpDocument(response,mRcsSettings)) == null) {    handleError(new FileSharingError(FileSharingError.MEDIA_UPLOAD_FAILED));    return;  }  mMessagingLog.setFileTransferDownloadInfo(getFileTransferId(),infoDocument);  removeSession();  handleHttpDownloadInfoAvailable();}  }
class C{  private static void copyFile(Uri source,Uri destination) throws IOException {  FileInputStream sourceStream=null;  FileOutputStream destStream=null;  try {    sourceStream=(FileInputStream)AndroidFactory.getApplicationContext().getContentResolver().openInputStream(source);    destStream=(FileOutputStream)AndroidFactory.getApplicationContext().getContentResolver().openOutputStream(destination);    byte buffer[]=new byte[1024];    int length;    while ((length=sourceStream.read(buffer)) > 0) {      destStream.write(buffer,0,length);    }  }  finally {    CloseableUtils.tryToClose(sourceStream);    CloseableUtils.tryToClose(destStream);  }}  }
class C{  public int addBlocks(InputStream is) throws IOException {  return loadBlocks(is);}  }
class C{  private static IZyNodeRealizer createRealizer(final INaviViewNode node,final ZyLabelContent content){  if (node instanceof INaviGroupNode) {    final ZyGroupNodeRealizer<NaviNode> realizer=new ZyGroupNodeRealizer<NaviNode>(content,((INaviGroupNode)node).isCollapsed());    if ((node.getWidth() != 0) && (node.getHeight() != 0)) {      realizer.setSize(node.getWidth(),node.getHeight());    }    return realizer;  } else {    final ZyNormalNodeRealizer<NaviNode> realizer=new ZyNormalNodeRealizer<NaviNode>(content);    if ((node.getWidth() != 0) && (node.getHeight() != 0)) {      realizer.setSize(node.getWidth(),node.getHeight());    }    return realizer;  }}  }
class C{  public boolean requiresIntegerRate(){  if (DEBUG_SHOW_PUBLIC_CALLS) {    log.debug("requiresIntegerRate");  }  return true;}  }
class C{  private void copyViewScopeContextsFromSession(Map<Object,Map<String,ViewScopeContextObject>> contexts,Map<String,Object> viewMap){  if (viewMap == null) {    return;  }  Set<Object> toReplace=new HashSet<>();  Map<String,ViewScopeContextObject> resultMap=new ConcurrentHashMap<>();  for (  Map.Entry<Object,Map<String,ViewScopeContextObject>> contextEntry : contexts.entrySet()) {    Set<String> beanNames=new HashSet<>();    for (    ViewScopeContextObject viewObject : contextEntry.getValue().values()) {      beanNames.add(viewObject.getName());    }    for (    String name : beanNames) {      if (viewMap.keySet().contains(name)) {        toReplace.add(contextEntry.getKey());        break;      }    }  }  for (  Object key : toReplace) {    Map<String,ViewScopeContextObject> contextObject=contexts.get(key);    contexts.remove(key);    resultMap.putAll(contextObject);  }  contexts.put(System.identityHashCode(viewMap),resultMap);}  }
class C{  protected void onLinkDetached(final String linkId){}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  notifyAll();}  }
class C{  public boolean updateDB(Properties ctx,String line,String trxName){  if (line == null || line.trim().length() == 0) {    log.finest("No Line");    return false;  }  String[] nodes=parseLine(line,true,false,true);  if (nodes.length == 0) {    log.finest("Nothing parsed from: " + line);    return false;  }  int AD_Client_ID=m_AD_Client_ID == 0 ? Env.getAD_Client_ID(ctx) : m_AD_Client_ID;  int AD_Org_ID=m_AD_Org_ID == 0 ? Env.getAD_Org_ID(ctx) : m_AD_Org_ID;  if (getAD_Table_ID() == X_I_GLJournal.Table_ID)   AD_Org_ID=0;  int UpdatedBy=Env.getAD_User_ID(ctx);  StringBuffer sql=new StringBuffer("SELECT COUNT(*), MAX(").append(m_tablePK).append(") FROM ").append(m_tableName).append(" WHERE AD_Client_ID=").append(AD_Client_ID).append(" AND (");  String where1=null;  String where2=null;  String whereParentChild=null;  for (int i=0; i < nodes.length; i++) {    if (nodes[i].endsWith("=''") || nodes[i].endsWith("=0"))     ; else     if (nodes[i].startsWith(m_tableUnique1 + "="))     where1=nodes[i]; else     if (nodes[i].startsWith(m_tableUnique2 + "="))     where2=nodes[i]; else     if (nodes[i].startsWith(m_tableUniqueParent + "=") || nodes[i].startsWith(m_tableUniqueChild + "=")) {      if (whereParentChild == null)       whereParentChild=nodes[i]; else       whereParentChild+=" AND " + nodes[i];    }  }  StringBuffer find=new StringBuffer();  if (where1 != null)   find.append(where1);  if (where2 != null) {    if (find.length() > 0)     find.append(" OR ");    find.append(where2);  }  if (whereParentChild != null && whereParentChild.indexOf(" AND ") != -1) {    if (find.length() > 0)     find.append(" OR (").append(whereParentChild).append(")"); else     find.append(whereParentChild);  }  sql.append(find).append(")");  int count=0;  int ID=0;  try {    if (find.length() > 0) {      PreparedStatement pstmt=DB.prepareStatement(sql.toString(),trxName);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        count=rs.getInt(1);        if (count == 1)         ID=rs.getInt(2);      }      rs.close();      pstmt.close();    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);    return false;  }  if (ID == 0) {    ID=DB.getNextID(ctx,m_tableName,null);    sql=new StringBuffer("INSERT INTO ").append(m_tableName).append("(").append(m_tablePK).append(",").append("AD_Client_ID,AD_Org_ID,Created,CreatedBy,Updated,UpdatedBy,IsActive").append(") VALUES (").append(ID).append(",").append(AD_Client_ID).append(",").append(AD_Org_ID).append(",SysDate,").append(UpdatedBy).append(",SysDate,").append(UpdatedBy).append(",'Y'").append(")");    int no=DB.executeUpdate(sql.toString(),trxName);    if (no != 1) {      log.log(Level.SEVERE,"Insert records=" + no + "; SQL="+ sql.toString());      return false;    }    log.finer("New ID=" + ID + " "+ find);  } else   log.finer("Old ID=" + ID + " "+ find);  sql=new StringBuffer("UPDATE ").append(m_tableName).append(" SET ");  for (int i=0; i < nodes.length; i++)   sql.append(nodes[i]).append(",");  sql.append("IsActive='Y',Processed='N',I_IsImported='N',Updated=SysDate,UpdatedBy=").append(UpdatedBy);  sql.append(" WHERE ").append(m_tablePK).append("=").append(ID);  int no=DB.executeUpdate(sql.toString(),trxName);  if (no != 1) {    log.log(Level.SEVERE,m_tablePK + "=" + ID+ " - rows updated="+ no);    return false;  }  return true;}  }
class C{  public static String toRef(String o){  return o;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.194 -0500",hash_original_method="CFD3A90BD3110FE566B6AC2DC60734EF",hash_generated_method="AB5F2F13564317CD5377BC20B35B244C") static public Allocation createFromBitmapResource(RenderScript rs,Resources res,int id,MipmapControl mips,int usage){  rs.validate();  Bitmap b=BitmapFactory.decodeResource(res,id);  Allocation alloc=createFromBitmap(rs,b,mips,usage);  b.recycle();  return alloc;}  }
class C{  public void addDefaultImplementation(final Class<?> defaultImplementation,final Class<?> ofType){  if (defaultImplementationsMapper == null) {    throw new InitializationException("No " + DefaultImplementationsMapper.class.getName() + " available");  }  defaultImplementationsMapper.addDefaultImplementation(defaultImplementation,ofType);}  }
class C{  public static ThreadSafeValueExp wrap(Object syncObj,ValueExp valueExp){  if (valueExp != null)   return new ThreadSafeValueExp(syncObj,valueExp); else   return null;}  }
class C{  private long collectTerms(LeafReaderContext context,TermsEnum termsEnum,List<TermAndState> terms) throws IOException {  long count=0;  final int threshold=Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD,BooleanQuery.getMaxClauseCount());  for (int i=0; i < threshold; ++i) {    final BytesRef term=termsEnum.next();    if (term == null) {      return -count - 1;    }    TermState state=termsEnum.termState();    int df=termsEnum.docFreq();    count+=df;    terms.add(new TermAndState(BytesRef.deepCopyOf(term),state,df,termsEnum.totalTermFreq()));  }  return termsEnum.next() == null ? (-count - 1) : count;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  protected static RegisterPriority registerPriorityOfInputOperand(EnumSet<OperandFlag> flags){  if (flags.contains(OperandFlag.STACK)) {    return RegisterPriority.ShouldHaveRegister;  }  return RegisterPriority.MustHaveRegister;}  }
class C{  private String probsToString(Vector<Double> probs){  StringBuffer txt=new StringBuffer(" ");  for (int i=0; i < probs.size(); i++) {    txt.append("" + (probs.elementAt(i)).doubleValue() + " ");  }  return txt.toString();}  }
class C{  public static Alias fromXContent(XContentParser parser) throws IOException {  Alias alias=new Alias(parser.currentName());  String currentFieldName=null;  XContentParser.Token token=parser.nextToken();  if (token == null) {    throw new IllegalArgumentException("No alias is specified");  }  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {    if (token == XContentParser.Token.FIELD_NAME) {      currentFieldName=parser.currentName();    } else     if (token == XContentParser.Token.START_OBJECT) {      if ("filter".equals(currentFieldName)) {        Map<String,Object> filter=parser.mapOrdered();        alias.filter(filter);      }    } else     if (token == XContentParser.Token.VALUE_STRING) {      if ("routing".equals(currentFieldName)) {        alias.routing(parser.text());      } else       if ("index_routing".equals(currentFieldName) || "indexRouting".equals(currentFieldName) || "index-routing".equals(currentFieldName)) {        alias.indexRouting(parser.text());      } else       if ("search_routing".equals(currentFieldName) || "searchRouting".equals(currentFieldName) || "search-routing".equals(currentFieldName)) {        alias.searchRouting(parser.text());      }    }  }  return alias;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isFlaggedUsedInCode(){  return flaggedUsedInCode;}  }
class C{  public void bindSection(SectionPart sectionPart,String id,String pageId){  sectionParts.put(id,sectionPart);  pageForSection.put(id,pageId);  Vector<String> sectionIds=sectionsForPage.get(pageId);  if (sectionIds == null) {    sectionIds=new Vector<String>();    sectionsForPage.put(pageId,sectionIds);  }  sectionIds.add(id);}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  public Map<URI,List<URI>> assignSelectedStoragePorts(StorageSystem system,List<StoragePort> storagePorts,URI virtualArray,List<Initiator> initiators,ExportPathParams pathParams,StringSetMap existingZoningMap) throws DeviceControllerException {  Map<Initiator,List<StoragePort>> assignments=new HashMap<>();  try {    Map<NetworkLite,List<Initiator>> initiatorsByNetwork=getInitiatorsByNetwork(initiators,existingZoningMap,_dbClient);    Map<Initiator,NetworkLite> initiatorsToNetworkLiteMap=getInitiatorToNetworkLiteMap(initiatorsByNetwork);    Map<NetworkLite,List<StoragePort>> portsByNetwork=selectStoragePortsInNetworks(storagePorts,initiatorsByNetwork.keySet(),virtualArray,pathParams);    StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(system.getSystemType());    Map<URI,Map<URI,List<Initiator>>> hostsToNetToInitiators=getHostInitiatorsMapFromNetworkLite(initiatorsByNetwork);    Map<URI,List<StoragePort>> allocatedPortsMap=getAllocatedPortsMap(portsByNetwork);    Map<Initiator,List<StoragePort>> existingAssignments=generateInitiatorsToStoragePortsMap(existingZoningMap,virtualArray);    for (    URI hostURI : hostsToNetToInitiators.keySet()) {      assigner.assignPortsToHost(assignments,hostsToNetToInitiators.get(hostURI),allocatedPortsMap,pathParams,existingAssignments,hostURI,initiatorsToNetworkLiteMap);    }    validateMinPaths(system,pathParams,existingAssignments,assignments,initiators);    return convertAssignmentsToURIs(assignments);  } catch (  PlacementException e) {    _log.error("Unable to assign storage Ports",e);    throw DeviceControllerException.exceptions.exceptionAssigningStoragePorts(e.getMessage(),e);  }catch (  Exception e) {    _log.error("Unable to assign Storage Ports",e);    throw DeviceControllerException.exceptions.unexpectedExceptionAssigningPorts(e);  }}  }
class C{  public JavaMigrationExecutor(JavaMigration javaMigration){  this.javaMigration=javaMigration;}  }
class C{  @Deprecated public boolean isAssignableFrom(TypeToken<?> token){  return isAssignableFrom(token.getType());}  }
class C{  public void updateWidth(){  if (m_SumOfWeights > 0) {    double mean=m_WeightedSum / m_SumOfWeights;    double variance=m_WeightedSumSquared / m_SumOfWeights - mean * mean;    if (variance < 0) {      variance=0;    }    m_Width=Math.sqrt(variance) * Math.pow(m_SumOfWeights,m_Exponent);    if (m_Width <= m_MinWidth) {      m_Width=m_MinWidth;    }  } else {    m_Width=Double.MAX_VALUE;  }}  }
class C{  public void sendNotification(String notificationName,Object body){  facade.sendNotification(notificationName,body);}  }
class C{  public PropertiesProviderSelector(PropertiesProvider propertiesProvider,PropertiesProvider yamlProvider,PropertiesProvider jsonProvider){  this.propertiesProvider=requireNonNull(propertiesProvider);  this.yamlProvider=requireNonNull(yamlProvider);  this.jsonProvider=requireNonNull(jsonProvider);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget cw=getWidget(stack);  Widget pw=getWidget(stack);  if (SageConstants.LITE)   return null;  if (cw != null && pw != null)   WidgetFidget.discontent(pw,cw);  return null;}  }
class C{  public float moveBox(float speed,float degree,boolean bounce,float f,float f1){  if (bounce) {    return -MathHelper.abs((MathHelper.sin(f * speed) * f1 * degree));  } else {    return MathHelper.sin(f * speed) * f1 * degree - f1 * degree;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double maxSlope=0;  double maxZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxSlope=-99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                maxZChange=z - z2;              }            }          }          if (maxSlope > 0) {            output.setValue(row,col,maxZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean needsDefaultFormatter(){  if (mValueFormatter == null)   return true;  if (mValueFormatter instanceof DefaultValueFormatter)   return true;  return false;}  }
class C{  private void updateBoundsForRemovedItem(XYDataItem item){  boolean itemContributesToXBounds=false;  boolean itemContributesToYBounds=false;  double x=item.getXValue();  if (!Double.isNaN(x)) {    if (x <= this.minX || x >= this.maxX) {      itemContributesToXBounds=true;    }  }  if (item.getY() != null) {    double y=item.getYValue();    if (!Double.isNaN(y)) {      if (y <= this.minY || y >= this.maxY) {        itemContributesToYBounds=true;      }    }  }  if (itemContributesToYBounds) {    findBoundsByIteration();  } else   if (itemContributesToXBounds) {    if (getAutoSort()) {      this.minX=getX(0).doubleValue();      this.maxX=getX(getItemCount() - 1).doubleValue();    } else {      findBoundsByIteration();    }  }}  }
class C{  @NotNull public List<? extends ModuleLevelBuilder> createModuleLevelBuilders(){  return Collections.emptyList();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected void addClientProxy(CacheClientProxy proxy) throws IOException {  getCache();  this._clientProxies.put(proxy.getProxyID(),proxy);  removeClientInitProxy(proxy);  this._connectionListener.queueAdded(proxy.getProxyID());  if (!(proxy.clientConflation == HandShake.CONFLATION_ON)) {    ClientHealthMonitor chm=ClientHealthMonitor.getInstance();    if (chm != null) {      chm.numOfClientsPerVersion.incrementAndGet(proxy.getVersion().ordinal());    }  }  this.timedOutDurableClientProxies.remove(proxy.getProxyID());}  }
class C{  public ShareApi(final ShareContent shareContent){  this.shareContent=shareContent;}  }
class C{  private void addInt(int number){  list.add((byte)(number & 0xff));  list.add((byte)((number & 0xff00) >> 8));  list.add((byte)((number & 0xff0000) >> 16));  list.add((byte)((number & 0xff000000) >> 24));}  }
class C{  public static boolean testPointTriangle(Vector2dc point,Vector2dc v0,Vector2dc v1,Vector2dc v2){  return testPointTriangle(point.x(),point.y(),v0.x(),v0.y(),v1.x(),v1.y(),v2.x(),v2.y());}  }
class C{  public boolean before(Date when){  return getMillisOf(this) < getMillisOf(when);}  }
class C{  public String toDisplayString(){  return toDisplayString(Locale.getDefault());}  }
class C{  public long create_full_atom(MP4DataStream bitstream) throws IOException {  long value=bitstream.readBytes(4);  version=(int)value >> 24;  flags=(int)value & 0xffffff;  readed+=4;  return readed;}  }
class C{  public Osyczka2(){  super(6,2,6);}  }
class C{  public SortedArrayList(Collection<? extends E> c){  comparator=null;  addAll(c);}  }
class C{  public HighlightBuilder options(Map<String,Object> options){  this.options=options;  return this;}  }
class C{  public void writeShort(int v){  try {    dos.writeShort(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public static Collection<ParticipationStatus> all(){  return enums.all();}  }
class C{  public static void main(String argv[]) throws Exception {  pwd=new PasswordManagerCtrl();  ClientApplicationType clientApplicationType=null;  String securityPropertiesFileLocation=null;  String username=null;  String password=null;  CommandLine line=null;  try {    CommandLineParser parser=new GnuParser();    line=parser.parse(pwd.helpOptions,argv,true);    if (line.hasOption(_HELP)) {      DisplayHelpAndExit(EXIT_CODE.EXIT_OK);    }    line=parser.parse(pwd.options,argv);    if (line.hasOption(_HELP)) {      DisplayHelpAndExit(EXIT_CODE.EXIT_OK);    }    if (line.hasOption(_TARGET_APPLICATION)) {      String target=line.getOptionValue(TARGET_APPLICATION);      clientApplicationType=PasswordManagerCtrl.getClientApplicationType(target);    }    if (line.hasOption(_FILE)) {      securityPropertiesFileLocation=line.getOptionValue(_FILE);    }    if (line.hasOption(_AUTHENTICATE)) {      String[] authenticateArgs=line.getOptionValues(_AUTHENTICATE);      if (!line.hasOption(_USER_PASSWORD_FILE_LOCATION)) {        if (authenticateArgs.length < 2)         throw new MissingArgumentException(authenticate); else {          username=authenticateArgs[0];          password=authenticateArgs[1];        }      } else {        username=authenticateArgs[0];        pwd.userPasswordFileLocation=line.getOptionValue(USER_PASSWORD_FILE_LOCATION);        password=null;      }    }    if (line.hasOption(_CREATE)) {      String[] authenticateArgs=line.getOptionValues(_CREATE);      if (!line.hasOption(_USER_PASSWORD_FILE_LOCATION)) {        if (authenticateArgs.length < 2)         throw new MissingArgumentException(authenticate); else {          username=authenticateArgs[0];          password=authenticateArgs[1];        }      } else {        username=authenticateArgs[0];        pwd.userPasswordFileLocation=line.getOptionValue(USER_PASSWORD_FILE_LOCATION);        password=null;      }    }    if (line.hasOption(_ENCRYPTED_PASSWORD))     pwd.useEncryptedPassword=true;    if (line.hasOption(_TRUSTSTORE_LOCATION))     pwd.truststoreLocation=line.getOptionValue(_TRUSTSTORE_LOCATION);    if (line.hasOption(_TRUSTSTORE_PASSWORD))     pwd.truststorePassword=line.getOptionValue(_TRUSTSTORE_PASSWORD);    if (line.hasOption(_TRUSTSTORE_PASSWORD_FILE))     pwd.truststorePasswordFileLocation=line.getOptionValue(_TRUSTSTORE_PASSWORD_FILE);    if (line.hasOption(_KEYSTORE_LOCATION))     pwd.keystoreLocation=line.getOptionValue(_KEYSTORE_LOCATION);    if (line.hasOption(_KEYSTORE_PASSWORD))     pwd.keystorePassword=line.getOptionValue(_KEYSTORE_PASSWORD);    if (line.hasOption(_KEYSTORE_PASSWORD_FILE))     pwd.keystorePasswordFileLocation=line.getOptionValue(_KEYSTORE_PASSWORD_FILE);    if (line.hasOption(_PASSWORD_FILE_LOCATION))     pwd.passwordFileLocation=line.getOptionValue(_PASSWORD_FILE_LOCATION);    try {      pwd.passwordManager=new PasswordManager(securityPropertiesFileLocation,clientApplicationType);      AuthenticationInfo authenticationInfo=pwd.passwordManager.getAuthenticationInfo();      if (pwd.userPasswordFileLocation != null)       password=pwd.getPassewordFromFile(pwd.userPasswordFileLocation);      if (pwd.useEncryptedPassword != null)       authenticationInfo.setUseEncryptedPasswords(pwd.useEncryptedPassword);      if (pwd.truststoreLocation != null)       authenticationInfo.setTruststoreLocation(pwd.truststoreLocation);      if (pwd.truststorePasswordFileLocation != null)       authenticationInfo.setTruststorePassword(pwd.getPassewordFromFile(pwd.truststorePasswordFileLocation)); else       if (pwd.truststorePassword != null)       authenticationInfo.setTruststorePassword(pwd.truststorePassword);      if (pwd.keystoreLocation != null)       authenticationInfo.setKeystoreLocation(pwd.keystoreLocation);      if (pwd.keystorePasswordFileLocation != null)       pwd.keystorePasswordFileLocation=pwd.getPassewordFromFile(pwd.keystorePasswordFileLocation); else       if (pwd.keystorePassword != null)       authenticationInfo.setKeystorePassword(pwd.keystorePassword);      if (pwd.passwordFileLocation != null)       authenticationInfo.setPasswordFileLocation(pwd.passwordFileLocation);      logger.info("Using parameters: ");      logger.info("-----------------");      if (pwd.userPasswordFileLocation != null)       logger.info(MessageFormat.format("{0} \t = {1}",USER_PASSWORD_FILE_LOCATION,pwd.userPasswordFileLocation));      if (authenticationInfo.getParentPropertiesFileLocation() != null)       logger.info(MessageFormat.format("security.properties \t\t = {0}",authenticationInfo.getParentPropertiesFileLocation()));      logger.info(MessageFormat.format("password.file.location \t\t = {0}",authenticationInfo.getPasswordFileLocation()));      logger.info(MessageFormat.format("encrypted.password \t\t = {0}",authenticationInfo.isUseEncryptedPasswords()));      if (line.hasOption(_AUTHENTICATE)) {        logger.info(MessageFormat.format("keystore.location \t\t = {0}",authenticationInfo.getKeystoreLocation()));        if (pwd.keystorePasswordFileLocation == null)         logger.info(MessageFormat.format("keystore.password \t\t = {0}",getHiddenPassword(authenticationInfo.getKeystorePassword()))); else         logger.info(MessageFormat.format("{0} = {1}",KEYSTORE_PASSWORD_FILE,pwd.keystorePasswordFileLocation));      }      if (authenticationInfo.isUseEncryptedPasswords()) {        logger.info(MessageFormat.format("truststore.location \t\t = {0}",authenticationInfo.getTruststoreLocation()));        if (pwd.truststorePasswordFileLocation == null)         logger.info(MessageFormat.format("truststore.password \t\t = {0}",getHiddenPassword(authenticationInfo.getTruststorePassword()))); else         logger.info(MessageFormat.format("{0} = {1}",TRUSTSTORE_PASSWORD_FILE,pwd.truststorePasswordFileLocation));      }      logger.info("-----------------");      pwd.passwordManager.try_createAuthenticationInfoFiles();      authenticationInfo.checkAndCleanAuthenticationInfo();    } catch (    ConfigurationException ce) {      logger.error(MessageFormat.format("Could not retrieve configuration information: {0}\nTry to specify a security.properties file location, provide options on the command line, or have the cluster.home variable set.",ce.getMessage()));      System.exit(EXIT_CODE.EXIT_ERROR.value);    }catch (    ServerRuntimeException sre) {      logger.error(sre.getLocalizedMessage());      Exit(EXIT_CODE.EXIT_ERROR);    }catch (    Exception e) {      logger.error(e);      Exit(EXIT_CODE.EXIT_ERROR);    }    if (line.hasOption(_LIST_USERS)) {      try {        logger.info("Listing users by application type:");        HashMap<String,List<String>> mapUsers=new HashMap<String,List<String>>();        for (        ClientApplicationType applicationType : ClientApplicationType.values()) {          List<String> listUsernames=pwd.passwordManager.listUsers(applicationType);          mapUsers.put(applicationType.name(),listUsernames);        }        for (        ClientApplicationType applicationType : ClientApplicationType.values()) {          List<String> listUsers=mapUsers.get(applicationType.name());          if (listUsers != null && !listUsers.isEmpty()) {            logger.info("\n");            logger.info(MessageFormat.format("[{0}]",applicationType.name().toLowerCase()));            logger.info("-----------");            for (            String user : listUsers) {              logger.info(user);            }          }        }        logger.info("\n");      } catch (      Exception e) {        logger.error(MessageFormat.format("Error while listing users: {0}",e.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }    }    if (line.hasOption(_AUTHENTICATE)) {      try {        boolean authOK=pwd.passwordManager.authenticateUser(username,password);        String msgAuthOK=(authOK) ? "SUCCESS" : "FAILED";        logger.info(MessageFormat.format("Authenticating  {0}:{1} = {2}",username,password,msgAuthOK));      } catch (      Exception e) {        logger.error(MessageFormat.format("Error while authenticating user: {0}",e.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }    }    if (line.hasOption(_CREATE)) {      try {        pwd.passwordManager.setPasswordForUser(username,password);        logger.info(MessageFormat.format("User created successfuly: {0}",username));      } catch (      Exception e) {        logger.error(MessageFormat.format("Error while creating user: {0}",e.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }    } else     if (line.hasOption(_DELETE)) {      username=line.getOptionValue(_DELETE);      try {        pwd.passwordManager.deleteUser(username);        logger.info(MessageFormat.format("User deleted successfuly: {0}",username));      } catch (      Exception e) {        logger.error(MessageFormat.format("Error while deleting user: {0}",e.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }    }  } catch (  ParseException exp) {    logger.error(exp.getMessage());    DisplayHelpAndExit(EXIT_CODE.EXIT_ERROR);  }catch (  Exception e) {    if (e.toString().contains("CheckExitCalled")) {      throw e;    } else {      logger.error(e.getMessage());      Exit(EXIT_CODE.EXIT_ERROR);    }  }  Exit(EXIT_CODE.EXIT_OK);}  }
class C{  public int activeCount(){  int result;  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    if (destroyed) {      return 0;    }    result=nthreads;    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    result+=groupsSnapshot[i].activeCount();  }  return result;}  }
class C{  private void improveGermanSentences(JCas jcas){  HashSet<String[]> posRules=new HashSet<String[]>();  posRules.add(new String[]{"CARD","\\$.","NN"});  posRules.add(new String[]{"CARD","\\$.","NE"});  FSIterator sentIter=jcas.getAnnotationIndex(Sentence.type).iterator();  HashSet<HashSet<Sentence>> toMerge=new HashSet<HashSet<Sentence>>();  Sentence prevSent=null, thisSent=null;  while (sentIter.hasNext()) {    if (thisSent == null) {      thisSent=(Sentence)sentIter.next();      continue;    }    prevSent=thisSent;    thisSent=(Sentence)sentIter.next();    Token penultimateToken=null, ultimateToken=null, firstToken=null;    FSIterator tokIter=jcas.getAnnotationIndex(Token.type).subiterator(thisSent);    if (tokIter.hasNext()) {      firstToken=(Token)tokIter.next();    }    tokIter=jcas.getAnnotationIndex(Token.type).subiterator(prevSent);    while (tokIter.hasNext()) {      if (ultimateToken == null) {        ultimateToken=(Token)tokIter.next();        continue;      }      penultimateToken=ultimateToken;      ultimateToken=(Token)tokIter.next();    }    if (penultimateToken == null || ultimateToken == null || firstToken == null) {      continue;    }    for (    String[] posRule : posRules) {      if ((penultimateToken.getPos() != null && penultimateToken.getPos().matches(posRule[0]) && ultimateToken.getPos() != null && ultimateToken.getPos().matches(posRule[1]) && firstToken.getPos() != null && firstToken.getPos().matches(posRule[2])) || (firstToken.getCoveredText().matches("^[a-z/].*"))) {        Boolean candidateExisted=false;        for (        HashSet<Sentence> mergeCandidate : toMerge) {          if (mergeCandidate.contains(thisSent) || mergeCandidate.contains(prevSent)) {            mergeCandidate.add(prevSent);            mergeCandidate.add(thisSent);            candidateExisted=true;            break;          }        }        if (!candidateExisted) {          HashSet<Sentence> newCandidate=new HashSet<Sentence>();          newCandidate.add(prevSent);          newCandidate.add(thisSent);          toMerge.add(newCandidate);        }        break;      }    }  }  for (  HashSet<Sentence> mergeCandidate : toMerge) {    Integer beginIndex=Integer.MAX_VALUE, endIndex=Integer.MIN_VALUE;    Sentence mergedSent=new Sentence(jcas);    for (    Sentence s : mergeCandidate) {      if (s.getBegin() < beginIndex) {        beginIndex=s.getBegin();      }      if (s.getEnd() > endIndex) {        endIndex=s.getEnd();      }      s.removeFromIndexes();    }    mergedSent.setBegin(beginIndex);    mergedSent.setEnd(endIndex);    mergedSent.addToIndexes();  }}  }
class C{  public final void componentMoved(ComponentEvent e){  resetBounds();  repaint();}  }
class C{  public AssetsPropertiesPanel(Project propertiesFile){  initComponents();  this.project=propertiesFile;  loadSettings();  HelpCtx.setHelpIDString(this,"sdk.application_deployment");}  }
class C{  public boolean isEquiv(Action a){  return this == a || (this.content.equals(a.content) && this.kind == a.kind && this.len == a.len && this.entryState == a.entryState);}  }
class C{  private State convertStateDefinitionToState(StateDefinition stateDefinition){  try {    List<EventDefinition> eventDefinitions=stateDefinition.getDependencies();    List<String> events=new LinkedList<>();    if (eventDefinitions != null) {      for (      EventDefinition e : eventDefinitions) {        events.add(e.getName());      }    }    State state=new State(stateDefinition.getVersion(),stateDefinition.getName(),stateDefinition.getDescription(),stateDefinition.getOnEntryHook(),stateDefinition.getTask(),stateDefinition.getOnExitHook(),events,stateDefinition.getRetryCount(),stateDefinition.getTimeout(),stateDefinition.getOutputEvent() != null ? objectMapper.writeValueAsString(stateDefinition.getOutputEvent()) : null,Status.initialized,null,0l);    return state;  } catch (  Exception e) {    throw new IllegalRepresentationException("Unable to create state domain object",e);  }}  }
class C{  public LexicographicalComparator(){  super();}  }
class C{  private void disableStage(JCheckBox check,JLabel label,JLabel time){  check.setEnabled(false);  label.setEnabled(false);  time.setEnabled(false);}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to clear all flows on switch {switch}",explanation="An I/O error occured while trying send " + "topology discovery packet",recommendation=LogMessageDoc.CHECK_SWITCH) public void doMultiActionPacketOut(byte[] packetData,IOFSwitch sw,Set<OFPort> ports,FloodlightContext cntx){  if (ports == null)   return;  if (packetData == null || packetData.length <= 0)   return;  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  for (  OFPort p : ports) {    actions.add(sw.getOFFactory().actions().output(p,0));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(OFPort.ZERO);  pob.setData(packetData);  if (log.isTraceEnabled()) {    log.trace("write broadcast packet on switch-id={} " + "interaces={} packet-data={} packet-out={}",new Object[]{sw.getId(),ports,packetData,pob.build()});  }  sw.write(pob.build(),LogicalOFMessageCategory.MAIN);}  }
class C{  private void dumpPRMetaData(boolean showBuckets,List<PlaceHolderDiskRegion> regions){  StringBuilder msg=new StringBuilder(regions.get(0).getPrName());  regions.get(0).dumpCommonAttributes(msg);  if (showBuckets) {    for (    PlaceHolderDiskRegion region : regions) {      msg.append("\n");      msg.append("\n");      msg.append(region.getName());      region.dumpPersistentView(msg);    }  } else {    Map<DiskStoreID,String> online=new HashMap<DiskStoreID,String>();    Map<DiskStoreID,String> offline=new HashMap<DiskStoreID,String>();    Map<DiskStoreID,String> equal=new HashMap<DiskStoreID,String>();    for (    PlaceHolderDiskRegion region : regions) {      for (      PersistentMemberID mem : region.getOnlineMembers()) {        online.put(mem.diskStoreId,mem.host + ":" + mem.directory);      }      for (      PersistentMemberID mem : region.getOfflineMembers()) {        offline.put(mem.diskStoreId,mem.host + ":" + mem.directory);      }      for (      PersistentMemberID mem : region.getOfflineAndEqualMembers()) {        equal.put(mem.diskStoreId,mem.host + ":" + mem.directory);      }    }    msg.append("\n\tonlineMembers:");    for (    Map.Entry<DiskStoreID,String> id : online.entrySet()) {      msg.append("\n\t\t").append(id.getKey()).append(" ").append(id.getValue());    }    msg.append("\n\tofflineMembers:");    for (    Map.Entry<DiskStoreID,String> id : offline.entrySet()) {      msg.append("\n\t\t").append(id.getKey()).append(" ").append(id.getValue());    }    msg.append("\n\tequalsMembers:");    for (    Map.Entry<DiskStoreID,String> id : equal.entrySet()) {      msg.append("\n\t\t").append(id.getKey()).append(" ").append(id.getValue());    }  }  System.out.println(msg);}  }
class C{  @Override public void update(Observable arg0,Object arg1){  count++;  logger.info("count: " + count);  if (count != pathes.size()) {    middle.update(null,null);    mzfpl.get(count).update(null,null);  } else {    end.update(null,null);  }}  }
class C{  @PUT @Path("/{id}/rollback") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.TENANT_ADMIN}) public TaskResourceRep rollbackWorkflow(@PathParam("id") URI uri){  Workflow workflow=queryResource(uri);  verifySuspendedWorkflow(workflow);  String taskId=UUID.randomUUID().toString();  Operation op=initTaskStatus(_dbClient,workflow,taskId,Operation.Status.pending,ResourceOperationTypeEnum.WORKFLOW_ROLLBACK);  getController().rollbackWorkflow(uri,taskId);  return toTask(workflow,taskId,op);}  }
class C{  public byte[] toNativeArray(int offset,int len){  byte[] rv=new byte[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  public CertificateToken(X509Certificate x509Certificate){  if (x509Certificate == null) {    throw new NullPointerException("X509 certificate is missing");  }  this.x509Certificate=x509Certificate;  this.issuerX500Principal=x509Certificate.getIssuerX500Principal();  this.signatureAlgorithm=SignatureAlgorithm.forOID(x509Certificate.getSigAlgOID());  this.digestAlgorithm=signatureAlgorithm.getDigestAlgorithm();  this.encryptionAlgorithm=signatureAlgorithm.getEncryptionAlgorithm();  super.extraInfo=this.extraInfo=new CertificateTokenValidationExtraInfo();}  }
class C{  public Message createMessage(Session session,String threadname,int seq) throws Exception {  Message m=null;  String messageFile=Config.parms.getString("mf");synchronized (this) {    if (bytes == null) {      if ("".equals(messageFile)) {        bytes=generateRandomBytes(Config.parms.getInt("ms"));      } else {        try {          final InputStream instream=new BufferedInputStream(new FileInputStream(messageFile));          int size=instream.available();          bytes=new byte[size];          instream.read(bytes);          readFile=true;          instream.close();        } catch (        IOException ioe) {          Log.logger.log(Level.SEVERE,"Cannot read file {0}",messageFile);          throw ioe;        }      }    }  }  String mtype=Config.parms.getString("mt");  if (mtype.equals(TEXT)) {    try {      String s=new String(bytes,0,bytes.length,"UTF-8");      m=session.createTextMessage(s);    } catch (    Exception e) {      Log.logger.severe("Cannot create TextMessage on this JVM");      throw e;    }  } else   if (mtype.equals(BYTES)) {    m=session.createBytesMessage();    ((BytesMessage)m).writeBytes(bytes);  } else   if (mtype.equals(OBJECT)) {    Serializable o=bytes;    if (readFile) {      try {        ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bytes));        o=(Serializable)ois.readObject();        ois.close();      } catch (      Exception e) {        Log.logger.log(Level.WARNING,"Could not deserialise {0}, using it as a byte array.",messageFile);      }    }    m=session.createObjectMessage(o);  } else   if (mtype.equals(MAP)) {    m=session.createMapMessage();    ((MapMessage)m).setBytes("name",bytes);  } else   if (mtype.equals(STREAM)) {    m=session.createStreamMessage();    ((StreamMessage)m).writeBytes(bytes);  } else   if (mtype.equals(EMPTY)) {    m=session.createMessage();  } else {    throw new Exception("messagetype=[" + mtype + "] unknown");  }  String propertiesFile=Config.parms.getString("pf");  if (propertiesFile != null && !propertiesFile.equals("")) {    final Properties props=new Properties();    props.load(new BufferedInputStream(new FileInputStream(propertiesFile)));    for (Iterator<String> iter=props.stringPropertyNames().iterator(); iter.hasNext(); ) {      String key=iter.next();      if (!key.endsWith(".type")) {        String keyType=props.getProperty(key + ".type");        String value=props.getProperty(key);        if (keyType != null) {          try {            if (keyType.equalsIgnoreCase("int")) {              m.setIntProperty(key,Integer.parseInt(value));            } else             if (keyType.equalsIgnoreCase("boolean")) {              m.setBooleanProperty(key,Boolean.parseBoolean(value));            } else             if (keyType.equalsIgnoreCase("short")) {              m.setShortProperty(key,Short.parseShort(value));            } else             if (keyType.equalsIgnoreCase("byte")) {              m.setByteProperty(key,Byte.parseByte(value));            } else             if (keyType.equalsIgnoreCase("float")) {              m.setFloatProperty(key,Float.parseFloat(value));            } else             if (keyType.equalsIgnoreCase("double")) {              m.setDoubleProperty(key,Double.parseDouble(value));            } else             if (keyType.equalsIgnoreCase("long")) {              m.setLongProperty(key,Long.parseLong(value));            } else             if (keyType.equalsIgnoreCase("string")) {              m.setStringProperty(key,value);            } else {              Log.logger.log(Level.WARNING,"JMS message property [{0}] has unknown type [{1}] - adding as a string.",new Object[]{key,keyType});              m.setStringProperty(key,value);            }          } catch (          Exception e) {            Log.logger.log(Level.SEVERE,"JMS message property [{0}] is not of type [{1}] - skipping.",new Object[]{key,keyType});          }        } else {          m.setStringProperty(key,value);        }      }    }  }  return m;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof Channel);}  }
class C{  private String memberStr(int member) throws AdeException {  if (member < 0) {    return "NONE";  }  final int msgIid=m_msgIndices2msgIdMap[member];  final String msgId=AdeInternal.getAdeImpl().getDictionaries().getMessageIdDictionary().getWordById(msgIid);  return String.format("%s(%d)",msgId,msgIid);}  }
class C{  public void adjustForIllegalMove(int from,int to,boolean adjustClocks){  try {    adjustForIllegalMove("Illegal Move: " + getPseudoSan(getGame(),from,to),adjustClocks);  } catch (  IllegalArgumentException iae) {    adjustForIllegalMove("Illegal Move: " + getPseudoSan(getGame(),from,to),adjustClocks);  }}  }
class C{  public ProgressBar(){  this("");}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  public static IDETsconfigJson load(IFile tsconfigFile) throws CoreException {  IDETsconfigJson tsconfig=load(tsconfigFile.getContents(),IDETsconfigJson.class);  tsconfig.tsconfigFile=tsconfigFile;  tsconfig.outDir=computeOutDir(tsconfig);  tsconfig.outFile=computeOutFile(tsconfig);  return tsconfig;}  }
class C{  @SuppressWarnings("cast") public static Word fromIntZeroExtend(int val){  return new Word(((long)val) & 0xFFFFFFFFL);}  }
class C{  public void testPoll(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll());  }  assertNull(q.poll());}  }
class C{  public static void waitAll(@Nullable Iterable<IgniteFuture<?>> futs){  if (F.isEmpty(futs))   return;  for (  IgniteFuture fut : futs)   fut.get();}  }
class C{  public boolean isSetChanged(){  return EncodingUtils.testBit(__isset_bitfield,__CHANGED_ISSET_ID);}  }
class C{  protected int toLocal(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return (int)(((xOrY - ARROW_SZ) / scale) + min + 0.5);  } else {    if (orientation == VERTICAL) {      return (int)((sz.height - xOrY - ARROW_SZ) / scale + min + 0.5);    } else {      return (int)((sz.width - xOrY - ARROW_SZ) / scale + min + 0.5);    }  }}  }
class C{  public void initializeSerialNode(SerialNode node){synchronized (this) {    for (int i=0; i < getNumNodes(); i++) {      if (getNode(i) == node) {        setMustInit(i,true);        return;      }    }  }}  }
class C{  public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  void pause(){  imageLoader.pause();}  }
class C{  public RegistrationException(String message,RegistrationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public boolean undo(INode state){  TinyPuzzle tp=(TinyPuzzle)state;  tp.s[pos]--;  return true;}  }
class C{  @Override public void filter(ContainerRequestContext requestContext){  ContainerRequest request=(ContainerRequest)requestContext;  try {    checkCallAuthorization(request);    String requestPath=request.getPath(true);    if (!AvailableRoutes.API_PATH.equals(requestPath)) {      logger.info("Allow: API call: {}",requestPath);    }  } catch (  ExternalException e) {    logger.warn("Deny: API call: {}",request.getPath(true),e);    throw new WebApplicationException(e.getCause(),Responses.externalException(e));  }}  }
class C{  public static boolean isValidURIReference(String uriRef){  boolean valid=!uriRef.matches("[\u0000-\u001F\u007F-\u009F]");  if (valid) {    final String escaped=escapeExcludedChars(uriRef);    try {      final java.net.URI uri=new java.net.URI(escaped);      valid=uri.isAbsolute();    } catch (    URISyntaxException e) {      valid=false;    }  }  return valid;}  }
class C{  public Osgb(){  super(OSGB_REGEX,false,1.0);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  public static Area grow(final Shape s,final double offset,int join,float miterlimit){  Area shape=new Area(s);  if (MathUtils.almostEqual(offset,0.0,EPSILON)) {    return shape;  }  Stroke stroke=new BasicStroke((float)Math.abs(2.0 * offset),BasicStroke.CAP_SQUARE,join,miterlimit);  Area strokeShape=new Area(stroke.createStrokedShape(s));  if (offset > 0.0) {    shape.add(strokeShape);  } else {    shape.subtract(strokeShape);  }  return shape;}  }
class C{  private void initLocator(){  log.fine("");  String sql="SELECT M_Warehouse_ID, Name FROM M_Warehouse";  if (m_only_Warehouse_ID != 0)   sql+=" WHERE M_Warehouse_ID=" + m_only_Warehouse_ID;  String SQL=MRole.getDefault().addAccessSQL(sql,"M_Warehouse",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO) + " ORDER BY 2";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     fWarehouse.addItem(new KeyNamePair(rs.getInt(1),rs.getString(2)));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }  log.fine("Warehouses=" + fWarehouse.getItemCount());  m_mLocator.fillComboBox(m_mandatory,true,true,false);  log.fine(m_mLocator.toString());  fLocator.setModel(m_mLocator);  fLocator.setValue(m_M_Locator_ID);  fLocator.addActionListener(this);  displayLocator();  fCreateNew.setSelected(false);  fCreateNew.addActionListener(this);  enableNew();  fWarehouse.addActionListener(this);  fX.addKeyListener(this);  fY.addKeyListener(this);  fZ.addKeyListener(this);  pack();}  }
class C{  private Auth loadConfiguration(){  try {    Unmarshaller um=getContext().createUnmarshaller();    um.setSchema(getSchema());    auth=(Auth)um.unmarshal(getAuthConfigurationDefault().getInputStream());    return auth;  } catch (  RuntimeException e) {    log.error("Error while reading verinice authorization definition from file: " + getAuthConfigurationDefault().getFilename(),e);    throw e;  }catch (  Exception e) {    log.error("Error while reading verinice authorization definition from file: " + getAuthConfigurationDefault().getFilename(),e);    throw new RuntimeException(e);  }}  }
class C{  public void release() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int length=s.readInt();  this.longs=new AtomicLongArray(length);  for (int i=0; i < length; i++) {    set(i,s.readDouble());  }}  }
class C{  public void withWriter(Object cb){}  }
class C{  public boolean containsSKI(){  return this.lengthSKI() > 0;}  }
class C{  public Builder strike(){  this.strike=true;  return this;}  }
class C{  public static ProgressDialog createProgressDialog(Context context,String message){  ProgressDialog progressDialog=new ProgressDialog(context);  progressDialog.setMessage(message);  return progressDialog;}  }
class C{  public MapPoint transform(double x,double y) throws CoordinateTranformationException {  try {    CoordinateSequence sequence=createCoordinateSequence(x,y);    CoordinateSequenceTransformer transformer=createCoordinateSequenceTransformer();    CoordinateSequence result=transformer.transform(sequence,math);    return createPoint(result);  } catch (  TransformException te) {    throw new CoordinateTranformationException("Transformation of point x:" + x + ", y:"+ y+ " failed during transformation.",te);  }}  }
class C{  public void add(JavaProject project,int includeMask,HashSet projectsToBeAdded) throws JavaModelException {  add(project,null,includeMask,projectsToBeAdded,new HashSet(2),null);}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)((channelNumber >> 8) & 0xff);  binValue[5]=(byte)((channelNumber) & 0xff);  binValue[6]=0x00;  binValue[7]=0x00;  return binValue;}  }
class C{  public static Object normalizedReadArgs(Map<String,Object> keyMap,Object... objects){  int index=0;  for (  Object object : objects) {    if (object instanceof CIMObjectPath && object.toString().contains(Constants.SMIS80_DELIMITER)) {      objects[index]=modifyForViPRConsumption(keyMap,(CIMObjectPath)object);    }    index++;  }  return objects;}  }
class C{  public static void fillQueryDimensionsBlockIndexes(List<QueryDimension> queryDimensions,Map<Integer,Integer> columnOrdinalToBlockIndexMapping,Set<Integer> dictionaryDimensionBlockIndex,List<Integer> noDictionaryDimensionBlockIndex){  for (  QueryDimension queryDimension : queryDimensions) {    if (CarbonUtil.hasEncoding(queryDimension.getDimension().getEncoder(),Encoding.DICTIONARY) && queryDimension.getDimension().numberOfChild() == 0) {      dictionaryDimensionBlockIndex.add(columnOrdinalToBlockIndexMapping.get(queryDimension.getDimension().getOrdinal()));    } else     if (queryDimension.getDimension().numberOfChild() == 0) {      noDictionaryDimensionBlockIndex.add(columnOrdinalToBlockIndexMapping.get(queryDimension.getDimension().getOrdinal()));    }  }}  }
class C{  private CommonDataKinds(){}  }
class C{  public void enumerate() throws IOException {  writeCode(ENUMERATE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.013 -0400",hash_original_method="D974D7C6F8A53DC4C2F23EFB7DA19D0A",hash_generated_method="D82B58281B0E43EC5A6E27448E111F22") public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override public String property(String key){  return _config.get(key);}  }
class C{  private boolean updateLocked(){  boolean isActive=false;  long nextRetryTimeMillis=Long.MAX_VALUE;  long now=systemFacade.currentTimeMillis();  Collection<FileDownloadInfo> allDownloads=downloadsRepository.getAllDownloads();  updateTotalBytesFor(allDownloads);  List<DownloadBatch> downloadBatches=batchRepository.retrieveBatchesFor(allDownloads);  for (  DownloadBatch downloadBatch : downloadBatches) {    if (downloadBatch.isActive()) {      isActive=true;      break;    }  }  for (  DownloadBatch downloadBatch : downloadBatches) {    if (downloadBatch.isDeleted() || downloadBatch.prune(downloadDeleter)) {      continue;    }    if (!isActive && downloadReadyChecker.canDownload(downloadBatch)) {      boolean isBatchStartingForTheFirstTime=batchRepository.isBatchStartingForTheFirstTime(downloadBatch.getBatchId());      if (isBatchStartingForTheFirstTime) {        handleBatchStartingForTheFirstTime(downloadBatch);      }      downloadOrContinueBatch(downloadBatch.getDownloads());      isActive=true;    } else     if (downloadBatch.scanCompletedMediaIfReady(downloadScanner)) {      isActive=true;    }    nextRetryTimeMillis=downloadBatch.nextActionMillis(now,nextRetryTimeMillis);  }  batchRepository.deleteMarkedBatchesFor(allDownloads);  updateUserVisibleNotification(downloadBatches);  if (nextRetryTimeMillis > 0 && nextRetryTimeMillis < Long.MAX_VALUE) {    LLog.v("scheduling start in " + nextRetryTimeMillis + "ms");    Intent intent=new Intent(Constants.ACTION_RETRY);    intent.setClass(this,DownloadReceiver.class);    alarmManager.set(AlarmManager.RTC_WAKEUP,now + nextRetryTimeMillis,PendingIntent.getBroadcast(this,0,intent,PendingIntent.FLAG_ONE_SHOT));  }  if (!isActive) {    moveSubmittedTasksToBatchStatusIfNecessary();  }  return isActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI01.class,args);}  }
class C{  protected int defaultNumArcs(){  return 20;}  }
class C{  ZipEntry extractFile(InputStream is,ZipEntry e) throws IOException {  ZipEntry rc=null;  String name=safeName(e.getName().replace(File.separatorChar,'/'));  if (name.length() == 0) {    return rc;  }  File f=new File(name.replace('/',File.separatorChar));  if (e.isDirectory()) {    if (f.exists()) {      if (!f.isDirectory()) {        throw new IOException(formatMsg("error.create.dir",f.getPath()));      }    } else {      if (!f.mkdirs()) {        throw new IOException(formatMsg("error.create.dir",f.getPath()));      } else {        rc=e;      }    }    if (vflag) {      output(formatMsg("out.create",name));    }  } else {    if (f.getParent() != null) {      File d=new File(f.getParent());      if (!d.exists() && !d.mkdirs() || !d.isDirectory()) {        throw new IOException(formatMsg("error.create.dir",d.getPath()));      }    }    try {      copy(is,f);    }  finally {      if (is instanceof ZipInputStream)       ((ZipInputStream)is).closeEntry(); else       is.close();    }    if (vflag) {      if (e.getMethod() == ZipEntry.DEFLATED) {        output(formatMsg("out.inflated",name));      } else {        output(formatMsg("out.extracted",name));      }    }  }  if (!useExtractionTime) {    long lastModified=e.getTime();    if (lastModified != -1) {      f.setLastModified(lastModified);    }  }  return rc;}  }
class C{  public boolean isDataAvailable(){  return dataAvailable;}  }
class C{  public ProviderLookupException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int firstZero(){  return firstZero;}  }
class C{  @Override public synchronized void ready(){  if (ce() == null) {    return;  }  cmd.clipToPossible();  if ((cmd.length() == 0) && !ce().isAirborne() && GUIPreferences.getInstance().getNagForNoAction()) {    String title=Messages.getString("MovementDisplay.ConfirmNoMoveDlg.title");    String body=Messages.getString("MovementDisplay.ConfirmNoMoveDlg.message");    ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);    if (!response.getShowAgain()) {      GUIPreferences.getInstance().setNagForNoAction(false);    }    if (!response.getAnswer()) {      return;    }  }  if (cmd.hasActiveMASC() && GUIPreferences.getInstance().getNagForMASC()) {    if (!((ce() instanceof VTOL) && ce().hasWorkingMisc(MiscType.F_JET_BOOSTER))) {      ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmMoveRoll",new Object[]{new Integer(ce().getMASCTarget())}),true);      nag.setVisible(true);      if (nag.getAnswer()) {        if (!nag.getShowAgain()) {          GUIPreferences.getInstance().setNagForMASC(false);        }      } else {        return;      }    }  }  if ((cmd.getLastStepMovementType() == EntityMovementType.MOVE_SPRINT) && GUIPreferences.getInstance().getNagForSprint()) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmSprint"),true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForSprint(false);      }    } else {      return;    }  }  String check=SharedUtility.doPSRCheck(cmd);  if ((check.length() > 0) && GUIPreferences.getInstance().getNagForPSR()) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmPilotingRoll") + check,true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForPSR(false);      }    } else {      return;    }  }  if (cmd.shouldMechanicalJumpCauseFallDamage() && GUIPreferences.getInstance().getNagForMechanicalJumpFallDamage()) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmMechanicalJumpFallDamage",new Object[]{cmd.getJumpMaxElevationChange(),ce().getJumpMP(),cmd.getJumpMaxElevationChange() - ce().getJumpMP()}),true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForMechanicalJumpFallDamage(false);      }    } else {      return;    }  }  check=SharedUtility.doThrustCheck(cmd,clientgui.getClient());  if ((check.length() > 0) && GUIPreferences.getInstance().getNagForPSR()) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmPilotingRoll") + check,true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForPSR(false);      }    } else {      return;    }  }  if (cmd.contains(MoveStepType.VTAKEOFF) || cmd.contains(MoveStepType.TAKEOFF)) {    boolean unsecure=false;    for (    Entity loaded : ce().getLoadedUnits()) {      if (loaded.wasLoadedThisTurn() && !(loaded instanceof Infantry)) {        unsecure=true;        break;      }    }    if (unsecure) {      ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.UnsecuredTakeoff"),true);      nag.setVisible(true);      if (nag.getAnswer()) {        if (!nag.getShowAgain()) {          GUIPreferences.getInstance().setNagForPSR(false);        }      } else {        return;      }    }  }  if ((ce() instanceof Aero) && ((Aero)ce()).isSpheroid() && !clientgui.getClient().getGame().getBoard().inSpace()&& ((Aero)ce()).isAirborne()&& (cmd.getFinalNDown() == 0)&& (cmd.getMpUsed() == 0)&& !cmd.contains(MoveStepType.VLAND)) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.SpheroidAltitudeLoss") + check,true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForPSR(false);      }    } else {      return;    }  }  if (ce().isAirborne() && (ce() instanceof Aero)) {    if (!clientgui.getClient().getGame().useVectorMove() && !((Aero)ce()).isOutControlTotal()) {      boolean unusedVelocity=false;      if (null != cmd.getLastStep()) {        unusedVelocity=cmd.getLastStep().getVelocityLeft() > 0;      } else {        unusedVelocity=((Aero)ce()).getCurrentVelocity() > 0;      }      boolean flyoff=false;      if ((null != cmd) && (cmd.contains(MoveStepType.OFF) || cmd.contains(MoveStepType.RETURN))) {        flyoff=true;      }      boolean landing=false;      if ((null != cmd) && cmd.contains(MoveStepType.LAND)) {        landing=true;      }      boolean ejecting=false;      if ((null != cmd) && cmd.contains(MoveStepType.EJECT)) {        ejecting=true;      }      if (unusedVelocity && !flyoff && !landing&& !ejecting) {        String title=Messages.getString("MovementDisplay.VelocityLeft.title");        String body=Messages.getString("MovementDisplay.VelocityLeft.message");        clientgui.doAlertDialog(title,body);        return;      }    }    cmd=SharedUtility.moveAero(cmd,clientgui.getClient());  }  if (cmd.willCrushBuildings() && GUIPreferences.getInstance().getNagForCrushingBuildings()) {    ConfirmDialog nag=new ConfirmDialog(clientgui.frame,Messages.getString("MovementDisplay.areYouSure"),Messages.getString("MovementDisplay.ConfirmCrushingBuildings"),true);    nag.setVisible(true);    if (nag.getAnswer()) {      if (!nag.getShowAgain()) {        GUIPreferences.getInstance().setNagForCrushingBuildings(false);      }    } else {      return;    }  }  disableButtons();  clientgui.bv.clearMovementData();  clientgui.bv.clearMovementEnvelope();  if (ce().hasUMU()) {    clientgui.getClient().sendUpdateEntity(ce());  }  clientgui.getClient().moveEntity(cen,cmd);  if (ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="north: " + String.valueOf(wbr.getNorth());      out.println(str1);      str1="south: " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="east: " + String.valueOf(wbr.getEast());      out.println(str1);      str1="west: " + String.valueOf(wbr.getWest());      out.println(str1);      str1="rows: " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="cols: " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Iterator<String> engineGetCertPathEncodings(){  return (X509CertPath.getEncodingsStatic());}  }
class C{  public EditItem(int start,CharSequence before,CharSequence after){  mmStart=start;  mmBefore=before;  mmAfter=after;}  }
class C{  public void trace(String s){  lastPrint=0;  println(s);}  }
class C{  public ReaderInputStream(Reader reader){  in=reader;}  }
class C{  private void dettachmentOfBridgeServer(){  for (Iterator itr=cache.getCacheServers().iterator(); itr.hasNext(); ) {    CacheServerImpl server=(CacheServerImpl)itr.next();    String rName=((HAContainerWrapper)server.getAcceptor().getCacheClientNotifier().getHaContainer()).getName();    assertNotNull("client messages region is null ",cache.getRegion(Region.SEPARATOR + rName));    server.stop();    if (!itr.hasNext()) {      assertNull("client messages region is not null ",cache.getRegion(Region.SEPARATOR + rName));    }  }}  }
class C{  protected void updateHeaderAndList(){  calculateProfiles();  buildProfiles();  if (mSelectionListShown) {    buildDrawerSelectionList();  }}  }
class C{  public boolean toggleImmediateAlert(){  writeImmediateAlert(!mAlertOn);  return mAlertOn;}  }
class C{  private String normalize(String path,boolean discardRelativePrefix){  path=UrlUtils.canonicalizePath(path,discardRelativePrefix);  int colon=path.indexOf(':');  if (colon != -1) {    int slash=path.indexOf('/');    if (slash == -1 || colon < slash) {      path="./" + path;    }  }  return path;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IP_INFO\"";  db.execSQL(sql);}  }
class C{  @Override public V put(K key,V value){  V ret=null;  if (containsKey(key))   ret=remove(key);  super.put(key,value);  return ret;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  protected void createPersistentRegion(VM vm) throws Throwable {  AsyncInvocation future=createPersistentRegionAsync(vm);  future.join(MAX_WAIT);  if (future.isAlive()) {    fail("Region not created within" + MAX_WAIT);  }  if (future.exceptionOccurred()) {    throw new RuntimeException(future.getException());  }}  }
class C{  void deleteNewFiles(Collection<String> files) throws IOException {  assert locked();  Set<String> toDelete=new HashSet<>();  for (  final String fileName : files) {    if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","will delete new file \"" + fileName + "\"");      }      toDelete.add(fileName);    }  }  deleteFiles(toDelete);}  }
class C{  public static String fullPathOf(String fileName) throws FileNotFoundException {  return searchFile(fileName).getAbsolutePath();}  }
class C{  public void move(MouseEvent e){  Point2D pnt=getProjectionPoint(e);  int x=(int)pnt.getX();  int y=(int)pnt.getY();  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    gpm=new OffsetGrabPoint(x,y);    gpm.clear();  } else {    gpm=gpo;    gpm.clear();    gpm.set(x,y);  }  addPolyGrabPointsToOGP(gpm);  movingPoint=gpm;}  }
class C{  public boolean isGroupChatActivated(){  return !RcsSettingsData.DEFAULT_GROUP_CHAT_URI.equals(getImConferenceUri());}  }
class C{  public RuntimeException(java.lang.String s){  super(s);}  }
class C{  public boolean isSuperConstructorAccess(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ParameterizedCallExpression);}  }
class C{  private Object readPage(String url,ProgressListener listener,CancellableTask task,boolean checkIfModified) throws Exception {  boolean boardsList=url == null;  if (boardsList)   url=(useHttps() ? "https://" : "http://") + CHAN_DOMAIN + "/nav";  boolean catalog=boardsList ? false : url.contains("/catalog/");  HttpResponseModel responseModel=null;  Closeable in=null;  HttpRequestModel rqModel=HttpRequestModel.builder().setGET().setCheckIfModified(checkIfModified).build();  try {    responseModel=HttpStreamer.getInstance().getFromUrl(url,rqModel,httpClient,listener,task);    if (responseModel.statusCode == 200) {      in=boardsList ? new KrautBoardsListReader(responseModel.stream) : (catalog ? new KrautCatalogReader(responseModel.stream) : new KrautReader(responseModel.stream));      if (task != null && task.isCancelled())       throw new Exception("interrupted");      return boardsList ? ((KrautBoardsListReader)in).readBoardsList() : (catalog ? ((KrautCatalogReader)in).readPage() : ((KrautReader)in).readPage());    } else {      if (responseModel.notModified())       return null;      byte[] html=null;      try {        ByteArrayOutputStream byteStream=new ByteArrayOutputStream(1024);        IOUtils.copyStream(responseModel.stream,byteStream);        html=byteStream.toByteArray();      } catch (      Exception e) {      }      if (html != null) {        checkCloudflareError(new HttpWrongStatusCodeException(responseModel.statusCode,responseModel.statusReason,html),url);      }      throw new HttpWrongStatusCodeException(responseModel.statusCode,responseModel.statusCode + " - " + responseModel.statusReason);    }  } catch (  Exception e) {    if (responseModel != null)     HttpStreamer.getInstance().removeFromModifiedMap(url);    throw e;  } finally {    IOUtils.closeQuietly(in);    if (responseModel != null)     responseModel.release();  }}  }
class C{  public static Set<String> nonMonogamousSamples(Collection<Family> families){  final LinkedHashSet<String> ret=new LinkedHashSet<>();  final HashSet<String> parents=new HashSet<>();  for (  Family f : families) {    if (!parents.add(f.getFather())) {      ret.add(f.getFather());    }    if (!parents.add(f.getMother())) {      ret.add(f.getMother());    }  }  return ret;}  }
class C{  @Inject public MagneticDeclinationCalculatorSwitcher(AstronomerModel model,SharedPreferences preferences,@Named("zero") MagneticDeclinationCalculator zeroCalculator,@Named("real") MagneticDeclinationCalculator realCalculator){  this.zeroCalculator=zeroCalculator;  this.realCalculator=realCalculator;  this.model=model;  preferences.registerOnSharedPreferenceChangeListener(this);  setTheModelsCalculator(preferences);}  }
class C{  private void assign(HashMap<String,DBIDs> labelMap,String label,DBIDRef id){  if (labelMap.containsKey(label)) {    DBIDs exist=labelMap.get(label);    if (exist instanceof DBID) {      ModifiableDBIDs n=DBIDUtil.newHashSet();      n.add((DBID)exist);      n.add(id);      labelMap.put(label,n);    } else {      assert (exist instanceof HashSetModifiableDBIDs);      assert (exist.size() > 1);      ((ModifiableDBIDs)exist).add(id);    }  } else {    labelMap.put(label,DBIDUtil.deref(id));  }}  }
class C{  public void write(byte[] buffer,int offset,int total) throws IOException {  int count;  byte[] wrappedToken, saslBuffer;  if (debug) {    System.err.println("Total size: " + total);  }  for (int i=0; i < total; i+=rawSendSize) {    count=(total - i) < rawSendSize ? (total - i) : rawSendSize;    wrappedToken=sc.wrap(buffer,offset + i,count);    intToNetworkByteOrder(wrappedToken.length,lenBuf,0,4);    if (debug) {      System.err.println("sending size: " + wrappedToken.length);    }    out.write(lenBuf,0,4);    out.write(wrappedToken,0,wrappedToken.length);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addJar(Path jar){}  }
class C{  private Object readResolve(){  if (enabled == null)   enabled=true;  if (pcToSet != null && newCpuStateFlags == null) {    getNewCpuStateFlags().pc=1;    getNewCpuStateValues().setPc(pcToSet);  } else {    getNewCpuStateFlags();    getNewCpuStateValues();  }  return this;}  }
class C{  public T caseLineEnd(LineEnd object){  return null;}  }
class C{  public synchronized void warning(String msg,Object[] params){  LogRecord record=new LogRecord(Level.WARNING,msg);  record.setParameters(params);  log(record);}  }
class C{  public void renderJavaStyle(StringBuilder sb){  sb.append("\tat ").append(fileName);  if (lineNumber > -1) {    sb.append(':').append(lineNumber);  }  if (functionName != null) {    sb.append(" (").append(functionName).append(')');  }}  }
class C{  public Gas(Fluid f){  unlocalizedName=name=f.getName();  icon=f.getStillIcon();  fluid=f;  from_fluid=true;}  }
class C{  @Override protected void sendFunctionGroup4(){  int new_fn=((getF13() ? CbusConstants.CBUS_F13 : 0) | (getF14() ? CbusConstants.CBUS_F14 : 0) | (getF15() ? CbusConstants.CBUS_F15 : 0)| (getF16() ? CbusConstants.CBUS_F16 : 0)| (getF17() ? CbusConstants.CBUS_F17 : 0)| (getF18() ? CbusConstants.CBUS_F18 : 0)| (getF19() ? CbusConstants.CBUS_F19 : 0)| (getF20() ? CbusConstants.CBUS_F20 : 0));  cs.setFunctions(4,_handle,new_fn);}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("ChainBuilder v1.1");  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  ChainBuilder newContentPane=new ChainBuilder(frame);  newContentPane.setOpaque(true);  frame.setContentPane(newContentPane);  frame.pack();  frame.setVisible(true);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.833 -0500",hash_original_method="C3EFABB6ACCE73BCC8BAFC802C5DCA3C",hash_generated_method="C3EFABB6ACCE73BCC8BAFC802C5DCA3C") boolean isMMI(){  return poundString != null;}  }
class C{  public Border createPressedVersion(){  if (pressedBorder != null) {    return pressedBorder;  }switch (type) {case TYPE_LINE:    return createLineBorder(thickness + 1,colorA);case TYPE_ETCHED_LOWERED:{    Border b=createEtchedRaised(colorA,colorB);    b.themeColors=themeColors;    return b;  }case TYPE_ETCHED_RAISED:{  Border b=createEtchedLowered(colorA,colorB);  b.themeColors=themeColors;  return b;}case TYPE_BEVEL_RAISED:{Border b=createBevelLowered(colorA,colorB,colorC,colorD);b.themeColors=themeColors;return b;}case TYPE_BEVEL_LOWERED:{Border b=createBevelRaised(colorA,colorB,colorC,colorD);b.themeColors=themeColors;return b;}case TYPE_ROUNDED:{Border b=createRoundBorder(arcWidth,arcHeight,colorA);b.themeColors=themeColors;b.type=TYPE_ROUNDED_PRESSED;return b;}case TYPE_ROUNDED_PRESSED:{Border b=createRoundBorder(arcWidth,arcHeight,colorA);b.themeColors=themeColors;return b;}}return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int[] statIDs=EPG.getInstance().getAllStations(EPG.getInstance().getProviderIDForEPGDSName(getString(stack)));  Channel[] rv=new Channel[statIDs.length];  Wizard wiz=Wizard.getInstance();  for (int i=0; i < rv.length; i++)   rv[i]=wiz.getChannelForStationID(statIDs[i]);  return rv;}  }
class C{  public boolean isMinYSet(int scale){  return mMinY[scale] != MathHelper.NULL_VALUE;}  }
class C{  public void addTab(@NotNull Tab tab){  TabHeader header=tab.getHeader();  header.setDelegate(this);  TabPresenter content=tab.getContent();  tabs.add(tab);  view.addHeader(header);  view.addContent(content);}  }
class C{  public char charAt(int index){  if (index < 0 || index >= length()) {    throw new StringIndexOutOfBoundsException(index);  }  return buffer[index];}  }
class C{  @Override public void draw(Canvas canvas){  final int restoreCount=canvas.save();  if (mOuterScroller != null) {    canvas.clipRect(0,mOuterScroller.getHeaderVisibleHeight(),getWidth(),getHeight());  }  super.draw(canvas);  canvas.restoreToCount(restoreCount);}  }
class C{  public void filterHaving(IComparison having) throws SQLException {  for (int i=0; i < rows.size(); i++) {    if (!having.evaluate(rows.get(i))) {      rows.remove(i);      i--;    }  }  this.total=rows.size();}  }
class C{  public void run(){  try {    m_stopRx=false;    listenForMessages();  } catch (  Exception ex) {    m_disconnectCause=ex;    if (Trace.error && !(ex instanceof SocketException && ex.getMessage().equalsIgnoreCase("socket closed"))) {      ex.printStackTrace();    }  }  DProtocolNotifierIF[] listeners;synchronized (m_listeners) {    listeners=m_listeners.values().toArray(new DProtocolNotifierIF[m_listeners.size()]);  }  for (int i=0; i < listeners.length; ++i) {    DProtocolNotifierIF elem=listeners[i];    try {      elem.disconnected();    } catch (    Exception exc) {      if (Trace.error)       exc.printStackTrace();    }  }  m_rxThread=null;  m_socket=null;}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public boolean isDropAcceptable(DropTargetDropEvent e){  if ((e.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0) {    return false;  }  if (!e.isDataFlavorSupported(StringData.TREEPATH_FLAVOR)) {    return false;  }  Point pt=e.getLocation();  TreePath path=getClosestPathForLocation(pt.x,pt.y);  if (path.equals(m_selectedTreePath)) {    return false;  }  DataFlavor[] flavors=e.getCurrentDataFlavors();  for (  DataFlavor flavor : flavors) {    if (flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {      return true;    }  }  return true;}  }
class C{  public static double meanSquareError(TDoubleDoubleHashMap estimation,TDoubleDoubleHashMap observation){  double square_sum=0;  double[] keys=estimation.keys();  for (  double bin : keys) {    double X=estimation.get(bin);    if (!observation.containsKey(bin))     throw new IllegalArgumentException("The observed distribution has no value for " + bin);    double x=observation.get(bin);    double diff=X - x;    square_sum+=diff * diff;  }  return square_sum / (double)keys.length;}  }
class C{  public <T extends DataObject>Joiner join(Class<T> clazz,String alias){  if (!jClasses.isEmpty()) {    throw new JoinerException("Illegal use of Joiner; starting a new join in the middle of a join chain");  }  JClass jc=new JClass(clazz,alias,jClasses.size());  jClasses.add(jc);  lastJClass=jc;  aliasMap.put(alias,jc);  return this;}  }
class C{  public Observation(int humanLabel,int[] cps){  this.humanLabel=humanLabel;  this.cps=new int[cps.length];  for (int i=0; i < cps.length; i++) {    this.cps[i]=cps[i];  }}  }
class C{  public void register(IRunnerDescriptor runnerDescriptor){  final String runnerId=runnerDescriptor.getId();  if (descriptors.containsKey(runnerId))   throw new IllegalArgumentException("cannot register two runners with the same ID: " + runnerId);  descriptors.put(runnerId,runnerDescriptor);}  }
class C{  protected int number() throws IOException {  loop:   for (; ; ) {switch (nextChar()) {case '.':switch (nextChar()) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':        return dotNumber();    }  throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());default :break loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}return numberUnit(true);}  }
class C{  @Override public void markFileTransferAsRead(final String transferId) throws RemoteException {  if (TextUtils.isEmpty(transferId)) {    throw new ServerApiIllegalArgumentException("transferId must not be null or empty!");  }  try {    mMessagingLog.markFileTransferAsRead(transferId,System.currentTimeMillis());  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static EnkanSystem of(Object... args){  EnkanSystem system=new EnkanSystem();  for (int i=0; i < args.length; i+=2) {    system.setComponent(args[i].toString(),(SystemComponent)args[i + 1]);  }  return system;}  }
class C{  public ResourceNotFoundException(){}  }
class C{  public void testInvokeAllNullTask(){  testInvokeAllNullTask(mainPool());}  }
class C{  public static String escapeText(String text){  return text.replaceAll("[_\\\\]","\\\\$0");}  }
class C{  public static String formUrlEncode(final NameValuePair[] pairs,final String charset){  try {    return doFormUrlEncode(pairs,charset);  } catch (  final UnsupportedEncodingException e) {    LOG.error("Encoding not supported: " + charset);    try {      return doFormUrlEncode(pairs,DEFAULT_CHARSET);    } catch (    final UnsupportedEncodingException fatal) {      throw new HttpClientError("Encoding not supported: " + DEFAULT_CHARSET);    }  }}  }
class C{  public void close() throws IOException {  flush();  baos.close();}  }
class C{  @Override public TaxReceipt findById(TaxReceipt entity) throws DataAccessException {  if (!entity.getId().trim().isEmpty()) {    return dynamoDBMapper.load(getType(),entity.getId());  } else {    return null;  }}  }
class C{  public Model addProperty(String name,String value){  requireNonNull(name,"Property name should not be null");  requireNonNull(value,"Property value should not be null");  addPropertyToXML(name,value);  properties().put(name,value);  return this;}  }
class C{  public Vector2d sub(Vector2fc v){  x-=v.x();  y-=v.y();  return this;}  }
class C{  public SumOfSqrdPairwiseDistances(){  this(new EuclideanDistance());}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  FleetManagementAnalyticsClientApplication(String propsPath) throws Exception {  super(propsPath);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.REACTION_TRIGGER__TRIGGERS:    getTriggers().clear();  getTriggers().addAll((Collection<? extends EventSpec>)newValue);return;case StextPackage.REACTION_TRIGGER__GUARD:setGuard((Guard)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private String buildBuckDependencyPath(PsiElement element,Project project,String path){  String original=path;  Matcher matcher=DEPENDENCY_PATTERN.matcher(path);  if (matcher.matches()) {    path=matcher.group(2);  }  VirtualFile buckFile=referenceNameToBuckFile(project,path);  if (buckFile != null) {    path=buckFile.getPath().replaceFirst(project.getBasePath(),"");    path="/" + path.replace('.','/');    path=path.substring(0,path.lastIndexOf("/"));    String target=BuckBuildUtil.extractBuckTarget(project,buckFile);    if (target != null) {      path+=target;    } else {      String lastWord=path.substring(path.lastIndexOf("/") + 1,path.length());      path+=":" + lastWord;    }    if (element.getNode().getElementType() == TokenType.WHITE_SPACE) {      path="'" + path + "',";    }    return path;  } else {    return original;  }}  }
class C{  private void constructCPLopsPMM() throws HopsException, LopsException {  Hop pmInput=getInput().get(0);  Hop rightInput=getInput().get(1);  Hop nrow=HopRewriteUtils.createValueHop(pmInput,true);  HopRewriteUtils.setOutputBlocksizes(nrow,0,0);  nrow.setForcedExecType(ExecType.CP);  HopRewriteUtils.copyLineNumbers(this,nrow);  Lop lnrow=nrow.constructLops();  PMMJ pmm=new PMMJ(pmInput.constructLops(),rightInput.constructLops(),lnrow,getDataType(),getValueType(),false,false,ExecType.CP);  int k=OptimizerUtils.getConstrainedNumThreads(_maxNumThreads);  pmm.setNumThreads(k);  pmm.getOutputParameters().setDimensions(getDim1(),getDim2(),getRowsInBlock(),getColsInBlock(),getNnz());  setLineNumbers(pmm);  setLops(pmm);  HopRewriteUtils.removeChildReference(pmInput,nrow);}  }
class C{  private static int calcRowsOrCols(double cellRange,double cellMin,double requestRange,double requestMin,double worldRange){  assert requestMin >= cellMin;  double range=(requestRange + (requestMin - cellMin));  if (range == 0) {    return 1;  }  final double intervals=Math.ceil(range / cellRange);  if (intervals > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  final long intervalsMax=Math.round(worldRange / cellRange);  if (intervalsMax > Integer.MAX_VALUE) {    return (int)intervals;  }  return Math.min((int)intervalsMax,(int)intervals);}  }
class C{  public static Bundle installBundle(BundleContext context,Resource bundle,boolean checkExistence) throws IOException, BundleException {  if (checkExistence) {    BundleFile bf=new BundleFile(bundle);    if (!bf.isBundle())     throw new BundleException(bundle + " is not a valid bundle!");    Bundle existing=loadBundleFromLocal(context,bf.getSymbolicName(),bf.getVersion(),false,null);    if (existing != null)     return existing;  }  return _loadBundle(context,bundle.getAbsolutePath(),bundle.getInputStream(),true);}  }
class C{  public boolean isInternalLevelXingAC(LevelXing x,Block block){  LayoutBlock lBlock=layoutBlockManager.getByUserName(block.getUserName());  if ((((TrackSegment)x.getConnectA()).getLayoutBlock() == lBlock) && (((TrackSegment)x.getConnectC()).getLayoutBlock() == lBlock)) {    if (x.getLayoutBlockAC() == lBlock) {      return true;    } else {      log.error("Panel blocking error at AC of Level Crossing in Block " + block.getUserName());      return false;    }  }  return false;}  }
class C{  public boolean isMalformed(){  return this.type == TYPE_MALFORMED_INPUT;}  }
class C{  public void handleMessageEvent(StunMessageEvent e){  Message message=e.getMessage();  char messageType=message.getMessageType();  if (messageType != Message.OLD_DATA_INDICATION)   return;  if (!turnCandidateHarvest.hostCandidate.getTransportAddress().equals(e.getLocalAddress()))   return;  if (!turnCandidateHarvest.harvester.stunServer.equals(e.getRemoteAddress()))   return;  logger.finest("handle old DATA Indication");  XorPeerAddressAttribute peerAddressAttribute=(XorPeerAddressAttribute)message.getAttribute(Attribute.REMOTE_ADDRESS);  if (peerAddressAttribute == null) {    logger.info("peerAddressAttribute is null");    return;  }  DataAttribute dataAttribute=(DataAttribute)message.getAttribute(Attribute.DATA);  if (dataAttribute == null) {    logger.info("data is null");    return;  }  TransportAddress peerAddress=peerAddressAttribute.getAddress();  if (peerAddress == null)   return;  byte[] data=dataAttribute.getData();  if (data == null)   return;  DatagramPacket packetToReceive;  try {    packetToReceive=new DatagramPacket(data,0,data.length,peerAddress);  } catch (  Throwable t) {    if (t instanceof SocketException) {      packetToReceive=null;    } else     if (t instanceof Error) {      throw (Error)t;    } else     if (t instanceof RuntimeException) {      throw (RuntimeException)t;    } else {      if (t instanceof InterruptedException) {        Thread.currentThread().interrupt();      }      packetToReceive=null;    }  }  if (packetToReceive != null) {synchronized (packetsToReceive) {      packetsToReceive.add(packetToReceive);      packetsToReceive.notifyAll();    }  }}  }
class C{  public T casePropertyNameOwner(PropertyNameOwner object){  return null;}  }
class C{  public boolean isShort(String input){  return GenericValidator.isShort(input);}  }
class C{  @Override public void close(){  if (isOpen && realSource instanceof ICloseable)   ((ICloseable)realSource).close();  isOpen=false;}  }
class C{  public void addInfoTuto(final View targetView){  showView("addPoi_step4",targetView,activity.getString(R.string.tuto_text_confirm_creation),null);}  }
class C{  default B repairCost(final int repairCost){  this.meta().setRepairCost(repairCost);  return this.getBuilder();}  }
class C{  public static void assertNegative(int value){  try {    Assert.assertTrue(value + " is not negative",value < 0);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  protected void updatePrimaryKeyField(MappingAccessor idAccessor,DatabaseField overrideField){  getOwningDescriptor().removePrimaryKeyField(idAccessor.getMapping().getField());  getOwningDescriptor().addPrimaryKeyField(overrideField,idAccessor);}  }
class C{  public boolean isAssignableTo(Class cl){  if (getName().equals(cl.getName()))   return true;  JClass[] ifc=getInterfaces();  for (int i=0; i < ifc.length; i++) {    if (ifc[i].isAssignableTo(cl))     return true;  }  if (getSuperClass() != null)   return getSuperClass().isAssignableTo(cl); else   return false;}  }
class C{  public static String convertToBitcoinURI(Address address,Coin amount,String label,String message){  return convertToBitcoinURI(address.getParameters(),address.toString(),amount,label,message);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MMatchPO[");  sb.append(get_ID()).append(",Qty=").append(getQty()).append(",C_OrderLine_ID=").append(getC_OrderLine_ID()).append(",M_InOutLine_ID=").append(getM_InOutLine_ID()).append(",C_InvoiceLine_ID=").append(getC_InvoiceLine_ID()).append("]");  return sb.toString();}  }
class C{  protected void drawHighlightLines(Canvas c,float[] pts,LineScatterCandleRadarDataSet set){  mHighlightPaint.setColor(set.getHighLightColor());  mHighlightPaint.setStrokeWidth(set.getHighlightLineWidth());  mHighlightPaint.setPathEffect(set.getDashPathEffectHighlight());  if (set.isVerticalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(pts[0],mViewPortHandler.contentTop());    mHighlightLinePath.lineTo(pts[0],mViewPortHandler.contentBottom());    c.drawPath(mHighlightLinePath,mHighlightPaint);  }  if (set.isHorizontalHighlightIndicatorEnabled()) {    mHighlightLinePath.reset();    mHighlightLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    mHighlightLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(mHighlightLinePath,mHighlightPaint);  }}  }
class C{  public void map(Text key,BytesWritable bytes,OutputCollector<Text,NutchWritable> output,Reporter reporter) throws IOException {  String[] headers=key.toString().split("\\s+");  String urlStr=headers[0];  String version=headers[2];  String contentType=headers[3];  if (urlStr.startsWith("filedesc://")) {    LOG.info("Ignoring file header: " + urlStr);    return;  }  LOG.info("Processing: " + urlStr);  Text url=new Text();  CrawlDatum datum=new CrawlDatum(CrawlDatum.STATUS_DB_FETCHED,interval,1.0f);  String segmentName=getConf().get(Nutch.SEGMENT_NAME_KEY);  try {    urlStr=normalizers.normalize(urlStr,URLNormalizers.SCOPE_FETCHER);    urlStr=urlFilters.filter(urlStr);  } catch (  Exception e) {    if (LOG.isWarnEnabled()) {      LOG.warn("Skipping " + url + ":"+ e);    }    urlStr=null;  }  if (urlStr != null) {    url.set(urlStr);    try {      ProtocolStatus status=ProtocolStatus.STATUS_SUCCESS;      Content content=new Content(urlStr,urlStr,bytes.getBytes(),contentType,new Metadata(),getConf());      content.getMetadata().set(URL_VERSION,version);      ParseStatus pstatus=null;      pstatus=output(output,segmentName,url,datum,content,status,CrawlDatum.STATUS_FETCH_SUCCESS);      reporter.progress();    } catch (    Throwable t) {      logError(url,t);      output(output,segmentName,url,datum,null,null,CrawlDatum.STATUS_FETCH_RETRY);    }  }}  }
class C{  private void skipWhitespacesAndComments(){  boolean commentSkipped;  do {    commentSkipped=false;    while (accept(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE,WHITESPACE_SPACE,WHITESPACE_TAB)) {      skip();    }    if (acceptSequence(COMMENT_BEGIN_TOKEN,SINGLELINE_COMMENT_SECOND_TOKEN)) {      skip(2);      readInputUntil(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE);      commentSkipped=true;    } else     if (acceptSequence(COMMENT_BEGIN_TOKEN,MULTILINE_COMMENT_SECOND_TOKEN)) {      skip(2);      while (true) {        if (acceptSequence(MULTILINE_COMMENT_SECOND_TOKEN,MULTILINE_COMMENT_END_TOKEN)) {          skip(2);          break;        }        skip();      }      commentSkipped=true;    }  } while (commentSkipped);}  }
class C{  public ViewGroupNode(final NetworkPanel netPanel,final ArrayList<ScreenElement> elements){  super(netPanel);  PBounds bounds=new PBounds();  for (  ScreenElement element : elements) {    element.setPickable(false);    groupedObjects.add(element);    bounds.add(element.getGlobalBounds());  }  this.setBounds(bounds);  addPropertyChangeListener(PROPERTY_FULL_BOUNDS,this);}  }
class C{  public boolean isSetSessionIDs(){  return this.sessionIDs != null;}  }
class C{  public static List<String> localText(Element self){  List<String> result=new ArrayList<String>();  if (self.getNodeType() == Node.TEXT_NODE || self.getNodeType() == Node.CDATA_SECTION_NODE) {    result.add(self.getNodeValue());  } else   if (self.hasChildNodes()) {    NodeList nodeList=self.getChildNodes();    for (int i=0; i < nodeList.getLength(); i++) {      Node item=nodeList.item(i);      if (item.getNodeType() == Node.TEXT_NODE || item.getNodeType() == Node.CDATA_SECTION_NODE) {        result.add(item.getNodeValue());      }    }  }  return result;}  }
class C{  public HashChain(final int initialCapacity){  super(initialCapacity);}  }
class C{  public void load(final URL n3,final RDFFormat rdfFormat) throws IOException, RDFParseException, RepositoryException {  final InputStream in=n3.openConnection().getInputStream();  try {    final Reader reader=new InputStreamReader(in);    try {      final BigdataSailRepositoryConnection cxn=m_repo.getConnection();      try {        cxn.setAutoCommit(false);        cxn.add(reader,"",rdfFormat);        cxn.commit();      }  finally {        cxn.close();      }    }  finally {      reader.close();    }  }  finally {    in.close();  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public XMLException(String message){  super(message);  exception=null;}  }
class C{  public void validate() throws IllegalArgumentException {  if (distErr != null && distErrPct != null)   throw new IllegalArgumentException("Only distErr or distErrPct can be specified.");}  }
class C{  @SuppressWarnings("unused") private Iterator<HeapOperand<Object>> iterateOriginalHeapDefs(HeapVariable<Object> A){  Object type=A.getHeapType();  HashSet<HeapOperand<Object>> set=findOrCreateOriginalDefs(type);  return set.iterator();}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 >= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 >= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 >= constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isNativeArray(Object o){  if (o instanceof Object[])   return true; else   if (o instanceof boolean[])   return true; else   if (o instanceof byte[])   return true; else   if (o instanceof char[])   return true; else   if (o instanceof short[])   return true; else   if (o instanceof int[])   return true; else   if (o instanceof long[])   return true; else   if (o instanceof float[])   return true; else   if (o instanceof double[])   return true;  return false;}  }
class C{  public PostgreSQLModuleConverter(final SQLProvider provider){  m_provider=Preconditions.checkNotNull(provider,"IE02042: Connection argument can not be null");}  }
class C{  public int functionSourcesTop(){  return functionSources.length;}  }
class C{  int retryTime(){  return retryTime.decrementAndGet();}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public void stop(){  pool();}  }
class C{  public IImageLine readRow(int nrow){  if (chunkseq.firstChunksNotYetRead())   readFirstChunks();  if (!interlaced) {    if (imlinesSet == null)     imlinesSet=createLineSet(true,-1,0,1);    IImageLine line=imlinesSet.getImageLine(nrow);    if (nrow == rowNum)     return line; else     if (nrow < rowNum)     throw new PngjInputException("rows must be read in increasing order: " + nrow);    while (rowNum < nrow) {      while (!chunkseq.getIdatSet().isRowReady())       if (streamFeeder.feed(chunkseq) < 1)       throw new PngjInputException("premature ending");      rowNum++;      chunkseq.getIdatSet().updateCrcs(idatCrca,idatCrcb);      if (rowNum == nrow) {        line.readFromPngRaw(chunkseq.getIdatSet().getUnfilteredRow(),getCurImgInfo().bytesPerRow + 1,0,1);        line.endReadFromPngRaw();      }      chunkseq.getIdatSet().advanceToNextRow();    }    return line;  } else {    if (imlinesSet == null) {      imlinesSet=createLineSet(false,getCurImgInfo().rows,0,1);      loadAllInterlaced(getCurImgInfo().rows,0,1);    }    rowNum=nrow;    return imlinesSet.getImageLine(nrow);  }}  }
class C{  public JSONException(final String message){  super(message);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public void mutationScore(double mutationScore){  StatisticEntry entry=statistics.get(statistics.size() - 1);  entry.mutationScore=mutationScore;}  }
class C{  public boolean isSet(Option option){  return (values.get(option.text) != null);}  }
class C{  public T caseArgument(Argument object){  return null;}  }
class C{  public StandardSeatCargoBay(double space,int doors){  totalSpace=(int)(space / 0.075);  weight=space;  currentSpace=(int)(space / 0.075);  this.doors=doors;}  }
class C{  public Vector translate() throws RemoveNameConflictsException {  Vector result=new Vector();  AST xast=null;  for (int i=0; i < st.disambiguateReport.size(); i++)   result.addElement(st.disambiguateReport.elementAt(i));  try {    xast=PcalTranslate.Explode(ast,st);  } catch (  PcalTranslateException e) {    throw new RemoveNameConflictsException(e);  }  try {    PcalTLAGen tlaGenerator=new PcalTLAGen();    result=tlaGenerator.generate(xast,st,result);  } catch (  PcalTLAGenException e) {    throw new RemoveNameConflictsException(e);  }  try {    if (ParseAlgorithm.hasDefaultInitialization) {      st.CheckForDefaultInitValue();    }  } catch (  PcalSymTabException e) {    throw new RemoveNameConflictsException(e.getMessage());  }  return result;}  }
class C{  private boolean processChallenge(Response response,Request request,TransactionID transactionID) throws StunException {  boolean retried=false;  if (response.getAttributeCount() > 0) {    char[] excludedResponseAttributeTypes=new char[]{Attribute.USERNAME,Attribute.MESSAGE_INTEGRITY};    boolean challenge=true;    for (    char excludedResponseAttributeType : excludedResponseAttributeTypes) {      if (response.containsAttribute(excludedResponseAttributeType)) {        challenge=false;        break;      }    }    if (challenge) {      RealmAttribute realmAttribute=(RealmAttribute)response.getAttribute(Attribute.REALM);      if (realmAttribute == null)       challenge=false; else {        NonceAttribute nonceAttribute=(NonceAttribute)response.getAttribute(Attribute.NONCE);        if (nonceAttribute == null)         challenge=false; else {          retried=processChallenge(realmAttribute.getRealm(),nonceAttribute.getNonce(),request,transactionID);        }      }    }  }  return retried;}  }
class C{  public void testLegacyDoubleMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",-1.3,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333333,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333332,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_DOUBLE));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private void readObject(ObjectInputStream s) throws ObjectStreamException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void searchAllTypeNames(final char[] packageName,final int packageMatchRule,final char[] typeName,final int typeMatchRule,int searchFor,IJavaSearchScope scope,final TypeNameRequestor nameRequestor,int waitingPolicy,IProgressMonitor progressMonitor) throws JavaModelException {  TypeNameRequestorWrapper requestorWrapper=new TypeNameRequestorWrapper(nameRequestor);  this.basicEngine.searchAllTypeNames(packageName,packageMatchRule,typeName,typeMatchRule,searchFor,scope,requestorWrapper,waitingPolicy,progressMonitor);}  }
class C{  private void compareDictionaryData(List<String> actual,List<String> expected){  assertTrue(expected.size() == actual.size());  for (int i=0; i < actual.size(); i++) {    assertTrue(actual.get(i).equals(expected.get(i)));  }}  }
class C{  private void connectEqualized(SynapseGroup synapseGroup){  currentOrderingIndices=new int[sourceNeurons.length];  int numConnectsPerSrc;  int expectedNumSyns;  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));  } else {    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);  }  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;  synapseGroup.preAllocateSynapses(expectedNumSyns);  for (int i=0, n=sourceNeurons.length; i < n; i++) {    currentOrderingIndices[i]=numConnectsPerSrc;    Neuron src=sourceNeurons[i];    Neuron tar;    for (int j=0; j < numConnectsPerSrc; j++) {      tar=targetNeurons[sparseOrdering[i][j]];      Synapse s=new Synapse(src,tar);      synapseGroup.addNewSynapse(s);    }  }}  }
class C{  public Forgetron(KernelTrick kernel,int budget){  this.K=kernel;  setBudget(budget);}  }
class C{  @Override public void evictAll(){  File[] files=cacheDirectory.listFiles();  if (null != files) {    for (    File file : files) {      if (file != null)       file.delete();    }  }}  }
class C{  private boolean inPoly(ArrayList<Double> ob,double x,double y){  int count=0;  double vecx, vecy;  double change;  double x1, y1, x2, y2;  for (int noa=1; noa < ob.size() - 2; noa+=2) {    y1=ob.get(noa + 1).doubleValue();    y2=ob.get(noa + 3).doubleValue();    if ((y1 <= y && y < y2) || (y2 < y && y <= y1)) {      vecy=y2 - y1;      if (vecy == 0) {      } else {        x1=ob.get(noa).doubleValue();        x2=ob.get(noa + 2).doubleValue();        vecx=x2 - x1;        change=(y - y1) / vecy;        if (vecx * change + x1 >= x) {          count++;        }      }    }  }  if ((count % 2) == 1) {    return true;  } else {    return false;  }}  }
class C{  public JavaModelException(Throwable e,int code){  this(new JavaModelStatus(code,e));}  }
class C{  public MChangeLog changeLog(String TrxName,int AD_ChangeLog_ID,int AD_Table_ID,int AD_Column_ID,int Record_ID,int AD_Client_ID,int AD_Org_ID,Object OldValue,Object NewValue){  return changeLog(TrxName,AD_ChangeLog_ID,AD_Table_ID,AD_Column_ID,Record_ID,AD_Client_ID,AD_Org_ID,OldValue,NewValue,(String)null);}  }
class C{  public static String joinOnDelimiter(List<String> toJoin,char delimiter){  StringBuilder buf=new StringBuilder();  for (Iterator<String> it=toJoin.iterator(); it.hasNext(); ) {    String value=it.next();    buf.append(value);    if (it.hasNext()) {      buf.append(delimiter);    }  }  return buf.toString();}  }
class C{  public static void append(Path file,Writer writer) throws IOException {  append(file,writer,Charset.defaultCharset().name());}  }
class C{  public void componentShown(final ComponentEvent e){  final Object source=e.getSource();  if (!(source instanceof JMenuItem))   return;  setChildVisible((JMenuItem)source,true);}  }
class C{  public AbstractMergeNode removeFromWorkList(){  if (workListIndex != 0) {    return workList[--workListIndex];  }  return null;}  }
class C{  ThisExpression(AST ast){  super(ast);}  }
class C{  public void doLUBMTest(final String lubmResource) throws Exception {  final Properties properties=loadProperties("fastload.properties");  if (properties.getProperty(com.bigdata.journal.Options.FILE) == null) {    final File journal=File.createTempFile("bigdata",".jnl");    journal.deleteOnExit();    properties.setProperty(BigdataSail.Options.FILE,journal.getAbsolutePath());  }  BigdataSail sail=new BigdataSail(properties);  Repository repo=new BigdataSailRepository(sail);  repo.initialize();  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    long stmtsBefore=sail.getDatabase().getStatementCount();    log.info("statements before: " + stmtsBefore);    long start=System.currentTimeMillis();    cxn.add(getReader(getClass(),"univ-bench.owl"),LUBM.NS,RDFFormat.RDFXML);    InputStream is=getClass().getResourceAsStream(lubmResource);    ZipInputStream zis=new ZipInputStream(new BufferedInputStream(is));    ZipEntry ze=null;    while ((ze=zis.getNextEntry()) != null) {      if (ze.isDirectory()) {        continue;      }      String name=ze.getName();      log.info(name);      ByteArrayOutputStream baos=new ByteArrayOutputStream();      byte[] bytes=new byte[4096];      int count;      while ((count=zis.read(bytes,0,4096)) != -1) {        baos.write(bytes,0,count);      }      baos.close();      Reader reader=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));      cxn.add(reader,LUBM.NS,RDFFormat.RDFXML);    }    zis.close();    cxn.commit();    BigdataSailConnection sailCxn=(BigdataSailConnection)((BigdataSailRepositoryConnection)cxn).getSailConnection();    sailCxn.computeClosure();    sailCxn.getTripleStore().commit();    long elapsed=System.currentTimeMillis() - start;    long stmtsAfter=((BigdataSailRepository)repo).getDatabase().getStatementCount();    long stmtsAdded=stmtsAfter - stmtsBefore;    int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);    log.info("statements after: " + stmtsAfter);    log.info("loaded: " + stmtsAdded + " in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");    SparqlBuilder sb=new SparqlBuilder();    sb.addTriplePattern("?x",RDF.TYPE,LUBM.PROFESSOR);    sb.addTriplePattern("?x",LUBM.WORKS_FOR,new URIImpl("http://www.Department0.University0.edu"));    sb.addTriplePattern("?x",LUBM.NAME,"?y1");    sb.addTriplePattern("?x",LUBM.EMAIL_ADDRESS,"?y2");    sb.addTriplePattern("?x",LUBM.TELEPHONE,"?y3");    log.info("evaluating LUBM query 4...");    start=System.currentTimeMillis();    final GraphQuery graphQuery=cxn.prepareGraphQuery(QueryLanguage.SPARQL,sb.toString());    final StringWriter sw=new StringWriter();    graphQuery.evaluate(RDFWriterRegistry.getInstance().get(RDFFormat.RDFXML).getWriter(sw));    elapsed=System.currentTimeMillis() - start;    log.info("done. evaluted in " + elapsed + " millis");    log.info(sw.toString());  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:    return getAstStructuralMembers();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE:  if (resolve)   return getStructuralType();return basicGetStructuralType();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:return getGenStructuralMembers();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:return getPostponedSubstitutions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isEligibleForPreview(MediaUri url){  MediaUri.MediaType type=url.getMediaType();  return (type == MediaUri.MediaType.VIDEO || type == MediaUri.MediaType.GIF) && RE_VALID_URI.matcher(url.getBaseUri().toString()).matches();}  }
class C{  public SocketServerConnection createSocketServerConnection(){  return new AndroidSocketServerConnection();}  }
class C{  public static boolean isHigherThanOpenGL1(GL10 gl){  if (sIsHigherThanOpenGL1FirstTime) {    sIsHigherThanOpenGL1FirstTime=false;    sIsHigherThanOpenGL1=(getOpenGLVersion(gl).ordinal() > PLOpenGLVersion.PLOpenGLVersion1_0.ordinal());  }  return sIsHigherThanOpenGL1;}  }
class C{  public static byte[] streamToBytes(InputStream in,int length,ByteArrayPool pool) throws IOException {  byte[] bytes;  if (pool == null)   bytes=new byte[length]; else   bytes=pool.getBuf(length);  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  writer.print(prefix);  writer.print("mFragmentId=#");  writer.print(Integer.toHexString(mFragmentId));  writer.print(" mContainerId=#");  writer.print(Integer.toHexString(mContainerId));  writer.print(" mTag=");  writer.println(mTag);  writer.print(prefix);  writer.print("mState=");  writer.print(mState);  writer.print(" mIndex=");  writer.print(mIndex);  writer.print(" mWho=");  writer.print(mWho);  writer.print(" mBackStackNesting=");  writer.println(mBackStackNesting);  writer.print(prefix);  writer.print("mAdded=");  writer.print(mAdded);  writer.print(" mRemoving=");  writer.print(mRemoving);  writer.print(" mResumed=");  writer.print(mResumed);  writer.print(" mFromLayout=");  writer.print(mFromLayout);  writer.print(" mInLayout=");  writer.println(mInLayout);  writer.print(prefix);  writer.print("mHidden=");  writer.print(mHidden);  writer.print(" mDetached=");  writer.print(mDetached);  writer.print(" mMenuVisible=");  writer.print(mMenuVisible);  writer.print(" mHasMenu=");  writer.println(mHasMenu);  writer.print(prefix);  writer.print("mRetainInstance=");  writer.print(mRetainInstance);  writer.print(" mRetaining=");  writer.print(mRetaining);  writer.print(" mUserVisibleHint=");  writer.println(mUserVisibleHint);  if (mFragmentManager != null) {    writer.print(prefix);    writer.print("mFragmentManager=");    writer.println(mFragmentManager);  }  if (mActivity != null) {    writer.print(prefix);    writer.print("mActivity=");    writer.println(mActivity);  }  if (mParentFragment != null) {    writer.print(prefix);    writer.print("mParentFragment=");    writer.println(mParentFragment);  }  if (mArguments != null) {    writer.print(prefix);    writer.print("mArguments=");    writer.println(mArguments);  }  if (mSavedFragmentState != null) {    writer.print(prefix);    writer.print("mSavedFragmentState=");    writer.println(mSavedFragmentState);  }  if (mSavedViewState != null) {    writer.print(prefix);    writer.print("mSavedViewState=");    writer.println(mSavedViewState);  }  if (mTarget != null) {    writer.print(prefix);    writer.print("mTarget=");    writer.print(mTarget);    writer.print(" mTargetRequestCode=");    writer.println(mTargetRequestCode);  }  if (mNextAnim != 0) {    writer.print(prefix);    writer.print("mNextAnim=");    writer.println(mNextAnim);  }  if (mContainer != null) {    writer.print(prefix);    writer.print("mContainer=");    writer.println(mContainer);  }  if (mView != null) {    writer.print(prefix);    writer.print("mView=");    writer.println(mView);  }  if (mInnerView != null) {    writer.print(prefix);    writer.print("mInnerView=");    writer.println(mView);  }  if (mAnimatingAway != null) {    writer.print(prefix);    writer.print("mAnimatingAway=");    writer.println(mAnimatingAway);    writer.print(prefix);    writer.print("mStateAfterAnimating=");    writer.println(mStateAfterAnimating);  }  if (mLoaderManager != null) {    writer.print(prefix);    writer.println("Loader Manager:");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }  if (mChildFragmentManager != null) {    writer.print(prefix);    writer.println("Child " + mChildFragmentManager + ":");    mChildFragmentManager.dump(prefix + "  ",fd,writer,args);  }}  }
class C{  public static DialogOption showYesNoMessage(final String message,final IntSetting defaultValue,final DialogOption defaultOption){  return MessageService.instance().showYesNoMessage(message,defaultValue,defaultOption);}  }
class C{  protected boolean isIgnorableType(DeserializationConfig config,BasicBeanDescription beanDesc,Class<?> type,Map<Class<?>,Boolean> ignoredTypes){  Boolean status=ignoredTypes.get(type);  if (status == null) {    BasicBeanDescription desc=config.introspectClassAnnotations(type);    status=config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());    if (status == null) {      status=Boolean.FALSE;    }  }  return status;}  }
class C{  public boolean exiting(){  return exiting;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private Object readResolve(){  if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {    return new YearMonth(this,getChronology().withUTC());  }  return this;}  }
class C{  public String brokerList(){  return String.join(":",kafka.config().hostName(),Integer.toString(kafka.boundPort(SecurityProtocol.PLAINTEXT)));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYDataImageAnnotation)) {    return false;  }  XYDataImageAnnotation that=(XYDataImageAnnotation)obj;  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  if (this.w != that.w) {    return false;  }  if (this.h != that.h) {    return false;  }  if (this.includeInDataBounds != that.includeInDataBounds) {    return false;  }  if (!ObjectUtilities.equal(this.image,that.image)) {    return false;  }  return true;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void testConstrDoubleDenormalized(){  double a=2.274341322658976E-309;  int aScale=1073;  BigInteger bA=new BigInteger("227434132265897633950269241702666687639731047124115603942986140264569528085692462493371029187342478828091760934014851133733918639492582043963243759464684978401240614084312038547315281016804838374623558434472007664427140169018817050565150914041833284370702366055678057809362286455237716100382057360123091641959140448783514464639706721250400288267372238950016114583259228262046633530468551311769574111763316146065958042194569102063373243372766692713192728878701004405568459288708477607744497502929764155046100964958011009313090462293046650352146796805866786767887226278836423536035611825593567576424943331337401071583562754098901412372708947790843318760718495117047155597276492717187936854356663665005157041552436478744491526494952982062613955349661409854888916015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void insertPOJO(int index,Object value){  if (value == null) {    insertNull(index);  } else {    _insert(index,POJONode(value));  }}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  long bufferSize=4 * (3 + 3) * mesh.numVertices;  long normalsOffset=4L * 3 * mesh.numVertices;  glBufferData(GL_ARRAY_BUFFER,bufferSize,GL_STATIC_DRAW);  glBufferSubData(GL_ARRAY_BUFFER,0L,mesh.positions);  glBufferSubData(GL_ARRAY_BUFFER,normalsOffset,mesh.normals);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public void addSample(int weight,float value){  ensureSortedByIndex();  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();  newSample.index=nextSampleIndex++;  newSample.weight=weight;  newSample.value=value;  samples.add(newSample);  totalWeight+=weight;  while (totalWeight > maxWeight) {    int excessWeight=totalWeight - maxWeight;    Sample oldestSample=samples.get(0);    if (oldestSample.weight <= excessWeight) {      totalWeight-=oldestSample.weight;      samples.remove(0);      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {        recycledSamples[recycledSampleCount++]=oldestSample;      }    } else {      oldestSample.weight-=excessWeight;      totalWeight-=excessWeight;    }  }}  }
class C{  public List<String> extractText(Object data){  List<String> values=new ArrayList<String>();  if (!(data instanceof JSONObject)) {    return values;  }  Object en=((JSONObject)data).get("en");  if (en == null) {    return values;  } else   if (en instanceof JSONObject) {    values.add(String.valueOf(((JSONObject)en).get("value")));  } else   if (en instanceof JSONArray) {    for (    Object value : ((JSONArray)en)) {      values.add(String.valueOf(((JSONObject)value).get("value")));    }  }  return values;}  }
class C{  void positionCursorAtInitialLocation(){  JFormattedTextField ftf=getFormattedTextField();  if (ftf != null) {    ftf.setCaretPosition(getInitialVisualPosition());  }}  }
class C{  public OneToOneChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver,String messageId){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CONTACT,null,messageId);  mChatService=chatService;  mImService=imService;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  AxisSpace space=calculateAxisSpace(g2,area);  Rectangle2D dataArea=space.shrink(area,null);  setFixedDomainAxisSpaceForSubplots(space);  ValueAxis axis=getRangeAxis();  RectangleEdge edge=getRangeAxisEdge();  double cursor=RectangleEdge.coordinate(dataArea,edge);  AxisState axisState=axis.draw(g2,cursor,area,dataArea,edge,info);  if (parentState == null) {    parentState=new PlotState();  }  parentState.getSharedAxisStates().put(axis,axisState);  for (int i=0; i < this.subplots.size(); i++) {    XYPlot plot=(XYPlot)this.subplots.get(i);    PlotRenderingInfo subplotInfo=null;    if (info != null) {      subplotInfo=new PlotRenderingInfo(info.getOwner());      info.addSubplotInfo(subplotInfo);    }    plot.draw(g2,this.subplotAreas[i],anchor,parentState,subplotInfo);  }  if (info != null) {    info.setDataArea(dataArea);  }}  }
class C{  public T pop(){  length--;  return elements.remove(length);}  }
class C{  public List<IgfsFileAffinityRange> ranges(){  if (ranges == null)   return Collections.emptyList();  return Collections.unmodifiableList(ranges);}  }
class C{  private void generateSummaryTable(){  info.setContent(generateSummaryTable(issue,productField.getDisplay(),uomField.getDisplay(),attribute.getDisplay(),toDeliverQty.getDisplay(),deliveredQtyField.getDisplay(),scrapQtyField.getDisplay(),isBackflush(),isOnlyIssue(),isOnlyReceipt()));}  }
class C{  @Override public void cleanList(){  seriesAdapter.clearItems();}  }
class C{  public void addSelectionChangeListener(final SelectionChangeListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (selectionChangeListeners == null) {    selectionChangeListeners=new ArrayList<SelectionChangeListener>();  }  selectionChangeListeners.add(listener);}  }
class C{  public static Workflow.Method expandVolumesMethod(URI storage,URI pool,URI volume,Long size){  return new Workflow.Method("expandVolume",storage,pool,volume,size);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.366 -0500",hash_original_method="3A2C7DFB4FC2B15E53BF2781D24B3722",hash_generated_method="12BE94862BAC62C1414B67DFAD761ECF") public UriMatcher(int code){  mCode=code;  mWhich=-1;  mChildren=new ArrayList<UriMatcher>();  mText=null;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  @Override @Deprecated public void dismissFragment(int animationIn,int animationOut){  getNavigationManager().popFragment(animationIn,animationOut);}  }
class C{  protected void startDb(String schemaVersion,String extraModelsPkg) throws Exception {  List<String> packages=new ArrayList<String>();  packages.add("com.emc.storageos.db.client.model");  if (extraModelsPkg != null) {    packages.add(extraModelsPkg);  }  String[] pkgsArray=packages.toArray(new String[packages.size()]);  ServiceImpl service=new ServiceImpl();  service.setName("dbsvc");  service.setVersion(schemaVersion);  service.setEndpoint(URI.create("thrift://localhost:9160"));  service.setId("db-standalone");  DataObjectScanner scanner=new DataObjectScanner();  scanner.setPackages(pkgsArray);  scanner.init();  dbVersionInfo=new DbVersionInfo();  dbVersionInfo.setSchemaVersion(schemaVersion);  coordinator.setDbVersionInfo(dbVersionInfo);  DbServiceStatusChecker statusChecker=new DbServiceStatusChecker();  statusChecker.setCoordinator(coordinator);  statusChecker.setClusterNodeCount(1);  statusChecker.setDbVersionInfo(dbVersionInfo);  statusChecker.setServiceName(service.getName());  CoordinatorClientInetAddressMap coordinatorMap=new CoordinatorClientInetAddressMap();  coordinatorMap.setNodeId("localhost");  coordinatorMap.setDualInetAddress(DualInetAddress.fromAddress("127.0.0.1"));  Map<String,DualInetAddress> addressLookupMap=new HashMap<String,DualInetAddress>();  addressLookupMap.put(coordinatorMap.getNodeId(),coordinatorMap.getDualInetAddress());  coordinatorMap.setControllerNodeIPLookupMap(addressLookupMap);  coordinatorMap.setCoordinatorClient(coordinator);  coordinator.setInetAddessLookupMap(coordinatorMap);  SchemaUtil util=new SchemaUtil();  util.setKeyspaceName("Test");  util.setClusterName("Test");  util.setDataObjectScanner(scanner);  util.setService(service);  util.setStatusChecker(statusChecker);  util.setCoordinator(coordinator);  util.setVdcShortId("vdc1");  util.setClientContext(createLocalContext());  List<String> vdcHosts=new ArrayList();  vdcHosts.add("127.0.0.1");  util.setVdcNodeList(vdcHosts);  util.setDbCommonInfo(new java.util.Properties());  dbsvc=new InternalDbService();  dbsvc.setConfig("db-test.yaml");  dbsvc.setSchemaUtil(util);  dbsvc.setCoordinator(coordinator);  dbsvc.setStatusChecker(statusChecker);  dbsvc.setService(service);  dbsvc.setDbDir(".");  JmxServerWrapper jmx=new JmxServerWrapper();  jmx.setEnabled(false);  dbsvc.setJmxServerWrapper(jmx);  dbClient=getDbClientBase();  dbsvc.setDbClient(dbClient);  PasswordUtils passwordUtils=new PasswordUtils();  passwordUtils.setCoordinator(coordinator);  EncryptionProviderImpl provider=new EncryptionProviderImpl();  provider.setCoordinator(coordinator);  provider.start();  passwordUtils.setEncryptionProvider(provider);  passwordUtils.setDbClient(dbClient);  util.setPasswordUtils(passwordUtils);  StubBeaconImpl beacon=new StubBeaconImpl(service);  dbsvc.setBeacon(beacon);  MigrationHandlerImpl handler=new MigrationHandlerImpl();  handler.setPackages(pkgsArray);  handler.setService(service);  handler.setStatusChecker(statusChecker);  handler.setCoordinator(coordinator);  handler.setDbClient(dbClient);  handler.setSchemaUtil(util);  dbsvc.setMigrationHandler(handler);  dbsvc.setDisableScheduledDbRepair(true);  dbsvc.start();}  }
class C{  public void lockUI(ProcessInfo pi){  setBusy(true,false);}  }
class C{  public static boolean isPubKeyCanonical(byte[] pubkey){  if (pubkey.length < 33)   return false;  if (pubkey[0] == 0x04) {    if (pubkey.length != 65)     return false;  } else   if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {    if (pubkey.length != 33)     return false;  } else   return false;  return true;}  }
class C{  public void testZeroPosIncrSloppyMpqAndOrNoMatch() throws IOException {  final MultiPhraseQuery.Builder mpqb=new MultiPhraseQuery.Builder();  for (  Token tap[] : INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN) {    Term[] terms=tapTerms(tap);    final int pos=tap[0].getPositionIncrement() - 1;    mpqb.add(terms,pos);  }  doTestZeroPosIncrSloppy(mpqb.build(),0);  mpqb.setSlop(2);  doTestZeroPosIncrSloppy(mpqb.build(),0);}  }
class C{  public static String toHexString(byte[] value){  if (value == null) {    return null;  }  StringBuffer buffer=new StringBuffer(2 * value.length);  int single;  for (int i=0; i < value.length; i++) {    single=value[i] & 0xFF;    if (single < 0x10) {      buffer.append('0');    }    buffer.append(Integer.toString(single,16));  }  return buffer.toString();}  }
class C{  public SubscriptionAlreadyExistsException(){  super();}  }
class C{  public GroupbyValue(int initialCapacity){  this.initialCapacity=initialCapacity;  this.value=new WritableList<DoubleWritable>(DoubleWritable.class,this.initialCapacity);  this.meta=new WritableList<BytesWritable>(BytesWritable.class,this.initialCapacity);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public Iterator childNodes(){  throw new GroovyRuntimeException("can't call childNodes() in the attribute " + this.name);}  }
class C{  public address(String value){  addElement(value);}  }
class C{  private int endCheckBlock(){  Node n;  int rv=END_DROPS_OFF;  for (n=first; ((rv & END_DROPS_OFF) != 0) && n != null; n=n.next) {    rv&=~END_DROPS_OFF;    rv|=n.endCheck();  }  return rv;}  }
class C{  public void testEdgeInsideness(){  Polygon2D poly=Polygon2D.create(new Polygon(new double[]{-2,-2,2,2,-2},new double[]{-2,2,2,-2,-2}));  assertTrue(poly.contains(-2,-2));  assertFalse(poly.contains(-2,2));  assertFalse(poly.contains(2,-2));  assertFalse(poly.contains(2,2));  assertTrue(poly.contains(-2,-1));  assertTrue(poly.contains(-2,0));  assertTrue(poly.contains(-2,1));  assertFalse(poly.contains(2,-1));  assertFalse(poly.contains(2,0));  assertFalse(poly.contains(2,1));  assertFalse(poly.contains(-1,2));  assertFalse(poly.contains(0,2));  assertFalse(poly.contains(1,2));  assertTrue(poly.contains(-1,-2));  assertTrue(poly.contains(0,-2));  assertTrue(poly.contains(1,-2));}  }
class C{  public TimeColumn selectIf(IntPredicate predicate){  TimeColumn column=emptyCopy();  IntIterator iterator=intIterator();  while (iterator.hasNext()) {    int next=iterator.nextInt();    if (predicate.test(next)) {      column.add(next);    }  }  return column;}  }
class C{  public VirtualOffsets(long[] starts,long[] ends,SequenceNameLocus[] regions){  if (starts == null || ends == null || regions == null) {    throw new NullPointerException();  }  if (starts.length != ends.length) {    throw new IllegalArgumentException("Start and end virtual offset lists must have same length");  }  if (starts.length != regions.length) {    throw new IllegalArgumentException("Position and region lists must have same length");  }  mStarts=starts;  mEnds=ends;  mRegions=regions;  mSize=mStarts.length;}  }
class C{  public static void initConfig(Config config){  config.registerForUpdates(null);}  }
class C{  public VerifyError(){  super();}  }
class C{  public SWFWriter(int width,int height,int version,int framerate,int depth){  this.width=width;  this.height=height;  this.version=version;  this.framerate=framerate;  this.depth=depth;}  }
class C{  @Override public UpdateResponse add(Collection<SolrInputDocument> docs,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrInputDocument doc : docs)   ur=this.shards.server4write(doc).add(doc,commitWithinMs);  return ur;}  }
class C{  private void readMoreChars() throws IOException {  if (availableCapacity(charBuffer) == 0) {    if (charBuffer.position() > 0) {      charBuffer.compact().flip();    } else {      charBuffer=grow(charBuffer);    }  }  int limit=charBuffer.limit();  int numChars=reader.read(charBuffer.array(),limit,availableCapacity(charBuffer));  if (numChars == -1) {    endOfInput=true;  } else {    charBuffer.limit(limit + numChars);  }}  }
class C{  public void testNoServiceAssignmentCorruption() throws Exception {  filterHelper.setContext(generateDefaultRuntime(false));  filterHelper.setFilter(new EventMetadataFilter());  String japaneseInsert="insert into foo values('\u306B\u307B\u3093')";  byte[] japaneseInsertUtf8=japaneseInsert.getBytes("utf8");  ReplDBMSEvent e=this.eventHelper.eventFromBinaryStatement(1,"test",japaneseInsertUtf8,0,true,"ISO8859_1");  checkBinaryConsistency(e);  String euroInsert="insert into foo values('\u00A1Hola Se\u00F1or!')";  byte[] euroInsertIso_1=euroInsert.getBytes("ISO8859_1");  ReplDBMSEvent e2=this.eventHelper.eventFromBinaryStatement(1,"test",euroInsertIso_1,0,true,"utf8");  checkBinaryConsistency(e2);}  }
class C{  public Vector2D divide(double d){  return create(x / d,y / d);}  }
class C{  protected void checkColortable(RpfFrame frame,RpfFrameEntry frameEntry,RpfTocEntry entry,int tocNumber,int entryNumber){  if (true) {    if (Debug.debugging("rpf")) {      Debug.output("RpfFrameCacheHandler: getting new colors");      Debug.output("RpfFrameCacheHandler: getting CIB colors = " + entry.Cib);    }    colortable.setFrom(frame.getColortable());    colortable.setCib(entry.Cib);    colortable.setATOCIndexes(tocNumber,entryNumber);    colortable.zone=entry.zone;    colortable.seriesCode=entry.info.seriesCode;  }  if (viewAttributes != null) {    colortable.setOpaqueness(viewAttributes.opaqueness);  }}  }
class C{  public boolean start(){  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(classLoader());    if (!_lifecycle.toStarting()) {      return false;    }    _startTime=CurrentTime.currentTime();    _lifecycle.toStarting();    startImpl();    _lifecycle.toActive();    return true;  } catch (  RuntimeException e) {    log.log(Level.WARNING,e.toString(),e);    _lifecycle.toError();    throw e;  }catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    _lifecycle.toError();    throw new RuntimeException(e);  } finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  private Pair<Events,? extends Object> checkForPrompts(final String prompt,final HttpServletRequest request,final ClientDetailsEntity client,final OIDCAuthorizationRequestContext authRequest){  final List<String> prompts=Splitter.on(ConnectRequestParameters.PROMPT_SEPARATOR).splitToList(Strings.nullToEmpty(prompt));  if (prompts.contains(ConnectRequestParameters.PROMPT_NONE)) {    return checkForNonePrompt(client,authRequest);  }  if (prompts.contains(ConnectRequestParameters.PROMPT_LOGIN)) {    log.debug("Prompt contains {} which will require forced authN",ConnectRequestParameters.PROMPT_LOGIN);    SecurityContextHolder.clearContext();    authRequest.setForceAuthentication(true);  } else {    log.debug("Prompt {} is not supported",prompt);  }  return new Pair<>(Events.Success,null);}  }
class C{  int acc_compareToFull(int off1,int len1,AccurateValue n2,int off2){  int i;  if (sign == 0 || n2.sign == 0) {    if (sign == n2.sign) {      return 0;    }    if (sign == 0) {      return -n2.sign;    }    return -sign;  }  if (sign != n2.sign) {    if (sign < n2.sign)     return -1;    return +1;  }  for (i=0; i < len1; i++) {    if (n2.digits[off2 + i] == digits[off1 + i]) {      continue;    }    if (n2.digits[off2 + i] > digits[off1 + i]) {      if (n2.sign == 1) {        return -1;      } else {        return +1;      }    } else {      if (n2.sign == 1) {        return +1;      } else {        return -1;      }    }  }  return 0;}  }
class C{  public boolean isSetCursorResponse(){  return this.cursorResponse != null;}  }
class C{  private static long timeDiff(long later,long earlier){  return later - earlier;}  }
class C{  public PolicyMappingsTableModel(){  columnNames=new String[2];  columnNames[0]=res.getString("PolicyMappingsTableModel.IssuerDomainPolicyColumn");  columnNames[1]=res.getString("PolicyMappingsTableModel.SubjectDomainPolicyColumn");  data=new Object[0][0];}  }
class C{  private void executeValidate(FacesContext context){  try {    validate(context);  } catch (  RuntimeException e) {    context.renderResponse();    throw e;  }  if (!isValid()) {    context.validationFailed();    context.renderResponse();  }}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  public static boolean putInt(ContentResolver cr,String name,int value){  return putString(cr,name,Integer.toString(value));}  }
class C{  public static int random(int i,int j){  return i + (int)(Math.random() * (j - i));}  }
class C{  byte[] update(byte[] input,int inputOffset,int inputLen){  if (requireReinit) {    throw new IllegalStateException("Must use either different key or iv for GCM encryption");  }  byte[] output=null;  try {    output=new byte[getOutputSizeByOperation(inputLen,false)];    int len=update(input,inputOffset,inputLen,output,0);    if (len == output.length) {      return output;    } else {      return Arrays.copyOf(output,len);    }  } catch (  ShortBufferException e) {    throw new ProviderException("Unexpected exception",e);  }}  }
class C{  public String toString(){  return "Poisson Lambda = " + Utils.doubleToString(m_Lambda,4,2) + "\n";}  }
class C{  protected int calculateNextRespawnTurn(){  return MathHelper.clamp(Rand.randExponential(respawnTime),MIN_RESPAWN_TIME,MAX_RESPAWN_TIME);}  }
class C{  private void handleHttp(ParseState state,RobotToken token){  String urlFragment=token.getData();  if (urlFragment.contains("sitemap")) {    RobotToken fixedToken=new RobotToken(RobotDirective.SITEMAP,"http:" + token.getData());    handleSitemap(state,fixedToken);  } else {    reportWarning("Found raw non-sitemap URL: http:" + urlFragment,state.getUrl());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PACKAGE__MEMBER:    getMember().clear();  getMember().addAll((Collection<? extends PackageMember>)newValue);return;case TypesPackage.PACKAGE__DOMAIN:setDomain((Domain)newValue);return;case TypesPackage.PACKAGE__IMPORT:getImport().clear();getImport().addAll((Collection<? extends org.yakindu.base.types.Package>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testPosNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void searchUser(InstagramAPIResponseCallback<ArrayList<IGUser>> callback,String name){  Call<IGAPIResponse> call=instagramAPIService.searchUser(name,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<ArrayList<IGUser>>(){  }.getType()));}  }
class C{  protected void serialize(TransactionOperation op,XMLWriter xmlWriter) throws IOException {  if (op instanceof AddStatementOperation) {    serialize((AddStatementOperation)op,xmlWriter);  } else   if (op instanceof RemoveStatementsOperation) {    serialize((RemoveStatementsOperation)op,xmlWriter);  } else   if (op instanceof ClearOperation) {    serialize((ClearOperation)op,xmlWriter);  } else   if (op instanceof SetNamespaceOperation) {    serialize((SetNamespaceOperation)op,xmlWriter);  } else   if (op instanceof RemoveNamespaceOperation) {    serialize((RemoveNamespaceOperation)op,xmlWriter);  } else   if (op instanceof ClearNamespacesOperation) {    serialize((ClearNamespacesOperation)op,xmlWriter);  } else   if (op instanceof SPARQLUpdateOperation) {    serialize((SPARQLUpdateOperation)op,xmlWriter);  } else   if (op == null) {  } else {    throw new IllegalArgumentException("Unknown operation type: " + op.getClass());  }}  }
class C{  public NormalCard image(@DrawableRes int image){  mImage=image;  isImage=true;  isText=false;  return this;}  }
class C{  public SnmpInt(Long v) throws IllegalArgumentException {  this(v.longValue());}  }
class C{  public boolean isRepeat(){  return scriptDetails.isRepeat();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static XmlSerializer newSerializer(){  try {    return XmlSerializerFactory.instance.newSerializer();  } catch (  XmlPullParserException e) {    throw new AssertionError(e);  }}  }
class C{  public static <T>CopyOnWriteHashSet<T> copyOf(Collection<? extends T> set){  if (set instanceof CopyOnWriteHashSet) {    @SuppressWarnings("unchecked") final CopyOnWriteHashSet<T> cowSet=(CopyOnWriteHashSet<T>)set;    return cowSet;  } else {    return new CopyOnWriteHashSet<T>().copyAndAddAll(set);  }}  }
class C{  public ListenerWrapper(final ITraceManagerListener listener){  this.listener=Preconditions.checkNotNull(listener,"IE00774: Listener argument can't be null");}  }
class C{  public static StmtIterator listAllProperties(Resource subject,Property predicate){  List<Statement> results=new LinkedList<Statement>();  helper.setGraphReadOptimization(true);  try {    listAllProperties(subject,predicate,new HashSet<Property>(),results);  }  finally {    helper.setGraphReadOptimization(false);  }  return new StmtIteratorImpl(results.iterator());}  }
class C{  public boolean hasLoopInTree(){  int productCategoryId=getM_Product_Category_ID();  int newParentCategoryId=getM_Product_Category_Parent_ID();  ResultSet rs=null;  PreparedStatement pstmt=null;  String sql=" SELECT M_Product_Category_ID, M_Product_Category_Parent_ID FROM M_Product_Category";  final Vector<SimpleTreeNode> categories=new Vector<SimpleTreeNode>(100);  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      if (rs.getInt(1) == productCategoryId)       categories.add(new SimpleTreeNode(rs.getInt(1),newParentCategoryId));      categories.add(new SimpleTreeNode(rs.getInt(1),rs.getInt(2)));    }    if (hasLoop(newParentCategoryId,categories,productCategoryId))     return true;  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);    return true;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return false;}  }
class C{  public static List<Dashboard> findDashboards(EntityManager em,Integer limit){  TypedQuery<Dashboard> query=em.createNamedQuery("Dashboard.getDashboards",Dashboard.class);  try {    if (limit != null) {      query.setMaxResults(limit);    }    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  private void refreshCaches(StorageSystem vplex){  long timeRightNow=System.currentTimeMillis();  if (timeRightNow > (cacheLastRefreshed + CACHE_TIMEOUT)) {    _logger.info("clearing vplex api info caches for {}",vplex.getLabel());    getClusterIdToNameMap(vplex).clear();    getVarrayToClusterIdMap(vplex).clear();    cacheLastRefreshed=timeRightNow;  }}  }
class C{  @Override public void onLogin(){  EditProfileFragment editProfileFragment=((EditProfileFragment)getSupportFragmentManager().findFragmentByTag(AppConstants.FragmentTags.EDIT_PROFILE));  if (editProfileFragment != null && editProfileFragment.isResumed()) {    editProfileFragment.onGoogleLogin();  }}  }
class C{  private List<StoragePort> allocatePorts(StoragePortsAllocator allocator,List<StoragePort> candidatePorts,int portsRequested,NetworkLite net,URI varrayURI){  Collections.shuffle(candidatePorts);  if (simulation) {    StoragePortsAllocator.PortAllocationContext context=StoragePortsAllocator.getPortAllocationContext(net,"arrayX",allocator.getContext());    for (    StoragePort port : candidatePorts) {      context.addPort(port,null,null,null,null);    }    List<StoragePort> portsAllocated=allocator.allocatePortsForNetwork(portsRequested,context,false,null,false);    allocator.setContext(context);    return portsAllocated;  } else {    Map<StoragePort,Long> sportMap=_blockScheduler.computeStoragePortUsage(candidatePorts);    List<StoragePort> portsAllocated=allocator.selectStoragePorts(_dbClient,sportMap,net,varrayURI,portsRequested,null,false);    return portsAllocated;  }}  }
class C{  public static boolean isMirrorInConsistencyGroup(List<URI> mirrors,DbClient dbClient){  return getMirrorsConsistencyGroup(mirrors,dbClient) != null;}  }
class C{  public GradientXYBarPainter(){  this(0.10,0.20,0.80);}  }
class C{  public LocalSocket(){  this(new LocalSocketImpl());  isBound=false;  isConnected=false;}  }
class C{  public synchronized List<Relationship> findAllRelationshipsTo(Vertex vertex,Vertex type){  List<Relationship> relationships=new ArrayList<Relationship>();  Iterator<Vertex> iterator=findAll().iterator();  while (iterator.hasNext()) {    Vertex next=iterator.next();    Collection<Relationship> allRelationships=next.getRelationships(type);    if (allRelationships != null) {      for (      Relationship relationship : allRelationships) {        if (relationship.getTarget() == vertex) {          relationships.add(relationship);        }      }    }  }  return relationships;}  }
class C{  public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  if (record.getSourceClassName() != null) {    sb.append(record.getSourceClassName());  } else {    sb.append(record.getLoggerName());  }  if (record.getSourceMethodName() != null) {    sb.append(".");    sb.append(record.getSourceMethodName()).append("() ");  }  String message=formatMessage(record);  sb.append(record.getLevel().getLocalizedName());  sb.append(": ");  sb.append(message);  sb.append("\n");  if (record.getThrown() != null) {    try {      StringWriter sw=new StringWriter();      PrintWriter pw=new PrintWriter(sw);      record.getThrown().printStackTrace(pw);      pw.close();      sb.append(sw.toString());    } catch (    Exception ex) {    }  }  return sb.toString();}  }
class C{  public void writeBundleStream(BundleStreamSource source,WritableByteChannel output) throws IOException {  ByteBuffer buffer=ByteBuffer.allocateDirect(INITIAL_BUFFER);  DBIDVar var=DBIDUtil.newVar();  ByteBufferSerializer<?>[] serializers=null;  loop:   while (true) {    BundleStreamSource.Event ev=source.nextEvent();switch (ev) {case NEXT_OBJECT:      if (serializers == null) {        serializers=writeHeader(source,buffer,output);      }    if (serializers[0] != null) {      if (!source.assignDBID(var)) {        throw new AbortException("An object did not have an DBID assigned.");      }      DBID id=DBIDUtil.deref(var);      @SuppressWarnings("unchecked") ByteBufferSerializer<DBID> ser=(ByteBufferSerializer<DBID>)serializers[0];      int size=ser.getByteSize(id);      buffer=ensureBuffer(size,buffer,output);      ser.toByteBuffer(buffer,id);    }  for (int i=1, j=0; i < serializers.length; ++i, ++j) {    @SuppressWarnings("unchecked") ByteBufferSerializer<Object> ser=(ByteBufferSerializer<Object>)serializers[i];    int size=ser.getByteSize(source.data(j));    buffer=ensureBuffer(size,buffer,output);    ser.toByteBuffer(buffer,source.data(j));  }break;case META_CHANGED:if (serializers != null) {throw new AbortException("Meta changes are not supported, once the block header has been written.");}break;case END_OF_STREAM:break loop;default :LOG.warning("Unknown bundle stream event. API inconsistent? " + ev);break;}}if (buffer.position() > 0) {flushBuffer(buffer,output);}}  }
class C{  public LibSVMTest(String name){  super(name);}  }
class C{  private int newAssumeRepsIndex(int oldIndex,int initPos){  if (oldIndex >= state.firstAddedAssumption) {    return oldIndex;  }  if (oldIndex != -1) {    state.firstAddedAssumption--;  }  int i=state.firstAddedAssumption;  while ((i < state.assumeReps.size()) && (initPos >= state.assumeReps.elementAt(i).initialPosition)) {    i++;  }  return i;}  }
class C{  public int[] addInstance(BallNode node,Instance inst) throws Exception {  throw new Exception("BottomUpConstruction method does not allow addition " + "of new Instances.");}  }
class C{  protected void buildHistograms(int[] times,PointSet targets){  if (FreeFormPointSet.class.isInstance(targets))   this.histograms=Histogram.buildAll(times,(FreeFormPointSet)targets); else   this.histograms=null;}  }
class C{  public double doubleValue(){  return (double)numerator / (double)denominator;}  }
class C{  public VMCACertIterator(String serverName,int certFilter){  try {    this.certFilter=certFilter;    ctx=VMCAAdapter.VMCAOpenEnumContext(serverName,this.certFilter);  } catch (  Exception e) {  }}  }
class C{  public Vector3 add(Vector3 that){  return Vector3.add(this,that);}  }
class C{  protected void finishDraggingTo(int location){  splitPaneUI.finishDraggingTo(location);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_afterCode_1_();}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public SearchFieldHasPopupState(){  super("HasPopup");}  }
class C{  void increment(){  assert isEnabled();  setRawCounter(getCount() + 1);}  }
class C{  public synchronized void print(String s,int _verbosity,int[] _logs) throws OutputException {  for (int x=0; x < _logs.length; x++) {    if (_logs[x] == NO_LOGS)     return;    print(s,_logs[x]);  }}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  private void computeModelRecursivly(Node node,int[] partitions,int numberOfPartitions,ExampleSet exampleSet) throws OperatorException {  if (node.isLeaf()) {    return;  } else {    for (    Node child : node.getChildren()) {      computeModelRecursivly(child,partitions,numberOfPartitions,exampleSet);    }    SplittedExampleSet trainSet=new SplittedExampleSet(exampleSet,new Partition(partitions,numberOfPartitions));    Attribute workingLabel=trainSet.getAttributes().getLabel();    workingLabel.setMapping((NominalMapping)workingLabel.getMapping().clone());    workingLabel.getMapping().clear();    for (    Node child : node.getChildren()) {      trainSet.selectSingleSubset(child.getPartitionId());      int nodeLabelIndex=workingLabel.getMapping().mapString(child.getClassName());      for (      Example example : trainSet) {        example.setValue(workingLabel,nodeLabelIndex);      }    }    trainSet.clearSelection();    for (    Node child : node.getChildren()) {      trainSet.selectAdditionalSubset(child.getPartitionId());    }    Model model=applyInnerLearner(trainSet);    node.setModel(model);    int partitionId=node.getPartitionId();    for (    Node child : node.getChildren()) {      int childPartitionId=child.getPartitionId();      for (int i=0; i < partitions.length; i++) {        if (partitions[i] == childPartitionId) {          partitions[i]=partitionId;        }      }    }  }}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  this.parent=in.readInt();  this.componentType=in.readUTF();  this.id=in.readUTF();  if (id.length() == 0) {    id=null;  }}  }
class C{  Dictionary(){  dict=new HashMap();}  }
class C{  public synchronized void remove(BoundedObject o){  Node n=chooseLeaf(o.getBounds(),root);  n.data.remove(o);  n.computeMBR();}  }
class C{  public static double toDecimal(int degrees,int minutes,int seconds){  return degrees + (minutes / 60.0) + (seconds / 3600.0);}  }
class C{  private void advanceApiToAtLeast(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int startTime,int endTime){  sortedApiTree.remove(api);  AreaPanel ap=api.ap();  TimeTree rootTt=ap.getTimeTree();  if (api.setTt(rootTt.getMinTimeTreeAfterTime(startTime),endTime))   sortedApiTree.add(api);}  }
class C{  @NonNull public static String stripHtml(@NonNull String input){  return Html.fromHtml(input).toString().replace((char)160,(char)32).replace((char)65532,(char)32).trim();}  }
class C{  public void renameMemory(Memory memory,String name,boolean clearPrivateData){synchronized (memory) {    Vertex self=memory.getShortTermMemory().createVertex(Primitive.SELF);    self.internalRemoveRelationships(Primitive.WORD);    self.internalRemoveRelationships(Primitive.NAME);    Vertex word=createWord(Utils.capitalize(name),self,memory.getShortTermMemory(),Primitive.NAME);    self.addRelationship(Primitive.NAME,word);    Vertex birth=memory.getShortTermMemory().createTimestamp();    birth.setPinned(true);    self.setRelationship(Primitive.BIRTH,birth);    if (clearPrivateData) {      Vertex twitter=memory.getShortTermMemory().createVertex(Twitter.class);      twitter.unpinChildren();      twitter.internalRemoveAllRelationships();      Vertex email=memory.getShortTermMemory().createVertex(Email.class);      email.unpinChildren();      email.internalRemoveAllRelationships();      Vertex facebook=memory.getShortTermMemory().createVertex(Facebook.class);      facebook.unpinChildren();      facebook.internalRemoveAllRelationships();      memory.clearProperties("Twitter");      memory.clearProperties("Facebook");      memory.clearProperties("Email");    }    memory.save();  }}  }
class C{  private void checkPotentialConflicts(TransactionServiceState state){  Collection<Operation> operations=new HashSet<>();  boolean[] continueWithCommit=new boolean[1];  continueWithCommit[0]=true;  for (  String serviceLink : state.modifiedLinks) {    if (!state.servicesToCoordinators.containsKey(serviceLink)) {      continue;    }    for (    String coordinator : state.servicesToCoordinators.get(serviceLink)) {      if (coordinator.equals(getSelfLink())) {        continue;      }      operations.add(createNotifyOp(coordinator,serviceLink,Operation.TX_ENSURE_COMMIT,null));    }  }  if (operations.isEmpty()) {    selfPatch(ResolutionKind.COMMITTING);    return;  }  OperationJoin.create(operations).setCompletion(null).sendWith(getHost());}  }
class C{  public void addAll(JsonArray array){  elements.addAll(array.elements);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tRandom number seed.\n" + "\t(default " + m_SeedDefault + ")","S",1,"-S <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public boolean isNull(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.131 -0500",hash_original_method="FD99E1EA214C7B87A27E9195924486C8",hash_generated_method="E01615E8723A0E425B6CB93EA2F40F69") @Deprecated public synchronized void pluginClicked(Context context,int position){  try {    Plugin plugin=mPlugins.get(position);    plugin.dispatchClickEvent(context);  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public static boolean checkInRound(float sx,float sy,float r,float x,float y,float offset){  return Math.sqrt((sx - x + offset) * (sx - x + offset) + (sy - y + offset) * (sy - y + offset)) < r;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public boolean isChop(){  return chop;}  }
class C{  private void menuSalesRep(HtmlCode html,MStore wstore){  nl(html,true);  a a=new a("requests_sr.jsp");  a.setClass("menuSub");  a.addElement("Open Requests");  html.addElement(a);  nl(html,false);  a=new a("advertisements.jsp");  a.setClass("menuSub");  a.addElement("Advertisements");  html.addElement(a);  nl(html,false);  a=new a("commissionRuns.jsp");  a.setClass("menuSub");  a.addElement("Commissions");  html.addElement(a);  a=new a("commissionedInvoices.jsp");  a.setClass("menuDetail");  a.addElement("C.Invoices");  html.addElement(a);  nl(html,false);}  }
class C{  private StateSet closure(int startState){  StateSet notvisited=tempStateSet;  StateSet closure=new StateSet(numStates,startState);  notvisited.clear();  notvisited.addState(startState);  while (notvisited.containsElements()) {    int state=notvisited.getAndRemoveElement();    notvisited.add(closure.complement(epsilon[state]));    closure.add(epsilon[state]);  }  return closure;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.206 -0500",hash_original_method="C1242B9BCB6EB14AE3EB1BD030AE911A",hash_generated_method="4CD7309F051D89ED6524E56E7F263BA4") public boolean prackRecieved(){  if (this.pendingReliableResponse == null)   return false;  if (provisionalResponseTask != null)   this.provisionalResponseTask.cancel();  this.pendingReliableResponse=null;  this.provisionalResponseSem.release();  return true;}  }
class C{  public boolean satisfies(ServiceResourceProfile profile,Constraint constraint){  return satisfies(profile) && meetsConstraint(constraint);}  }
class C{  static public boolean eq(double v1,double v2){  return Math.abs(v1 - v2) < VERY_SMALL_VALUE;}  }
class C{  private static boolean shouldPreload(LoadedClass clazz){  return Policy.isPreloadable(clazz) && clazz.medianTimeMicros() > MIN_LOAD_TIME_MICROS;}  }
class C{  private void createStorageView(String viewName,VPlexClusterInfo clusterInfo,List<VPlexTargetInfo> targetInfoList) throws VPlexApiException {  boolean retryNeeded=false;  int retryCount=0;  do {    retryNeeded=false;    ClientResponse response=null;    try {      StringBuilder targetPathBuilder=new StringBuilder();      for (      VPlexTargetInfo targetInfo : targetInfoList) {        if (targetPathBuilder.length() != 0) {          targetPathBuilder.append(",");        }        targetPathBuilder.append(targetInfo.getPath());      }      s_logger.info("Creating storage view {} with targets {}",viewName,targetPathBuilder.toString());      URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_STORAGE_VIEW);      s_logger.info("Create storage view URI is {}",requestURI.toString());      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_N,viewName);      argsMap.put(VPlexApiConstants.ARG_DASH_P,targetPathBuilder.toString());      argsMap.put(VPlexApiConstants.ARG_DASH_C,clusterInfo.getPath());      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);      s_logger.info("Create storage view POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Create storage view response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Storage view creation completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else         if (response.getStatus() == VPlexApiConstants.COULD_NOT_READ_STORAGE_VIEW_STATUS && retryCount++ < VPlexApiConstants.STORAGE_VIEW_CREATE_MAX_RETRIES) {          s_logger.info("VPlex error {} will retry after a delay",response.getStatus());          VPlexApiUtils.pauseThread(VPlexApiConstants.STORAGE_VIEW_CREATE_RETRY_TIME_MS);          retryNeeded=true;        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.createStorageViewFailureStatus(viewName,String.valueOf(response.getStatus()),cause);        }      }      if (!retryNeeded) {        s_logger.info("Created storage view {}",viewName);      }    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedCreateStorageView(viewName,e);    } finally {      if (response != null) {        response.close();      }    }  } while (retryNeeded);}  }
class C{  public void testPingPong3xMtu(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.doTestPingPong(400,100);}  }
class C{  public IntVector(int len){  mValues=new int[len];}  }
class C{  public DeathmatchInfo(final Area arena,final StendhalRPZone zone,final Spot entrance){  super();  this.arena=new DeathmatchArea(arena);  this.zone=zone;  this.entranceSpot=entrance;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true) == 0;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldSet=_set;  byte[] oldStates=_states;  _set=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldSet[i];      int index=insertionIndex(o);      _set[index]=o;      _states[index]=FULL;    }  }}  }
class C{  public int size(){  return super.size();}  }
class C{  public Anonymous_program_1_ createAnonymous_program_1_(){  Anonymous_program_1_Impl anonymous_program_1_=new Anonymous_program_1_Impl();  return anonymous_program_1_;}  }
class C{  public static <T,K,L extends List<T>>Consumer<Partition<T,K,L>> evictAll(){  return null;}  }
class C{  private void checkName(final String name){  if (name == null) {    throw new IllegalArgumentException("Name must not be null.");  }  if (name.equals("")) {    throw new IllegalArgumentException("Name must not be an empty String.");  }}  }
class C{  public void yieldUnescaped(Object value){  yieldUnescaped(value.toString());}  }
class C{  public String revert(String uri){  String returnString=uri;  ListIterator itr=rules.listIterator(rules.indexOf(rules.getLast()));  while (itr.hasPrevious()) {    Rule rule=(Rule)itr.previous();    returnString=rule.revert(returnString);  }  return returnString;}  }
class C{  public CRemoveFunctionBreakpointsAction(final IFilledList<Pair<IDebugger,INaviFunction>> pairs){  super(pairs.size() == 1 ? String.format("Remove breakpoint from function '%s'",pairs.get(0).second().getName()) : "Remove breakpoints from all selected functions");  m_pairs=pairs;}  }
class C{  public static int parseInt(char[] chars,int offset,int len) throws NumberFormatException {  return parseInt(chars,offset,len,10);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col]));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DoubleArrayListParameter(OptionID optionID,ParameterConstraint<List<double[]>> constraint,boolean optional){  super(optionID,optional);  addConstraint(constraint);}  }
class C{  public Account findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Account instance=entityManager.find(Account.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  protected void endPage(PageFormat format,Printable painter,int index) throws PrinterException {  mPSStream.println(PAGE_RESTORE);  mPSStream.println(SHOWPAGE);}  }
class C{  public void moveControlPoint(ControlPoint point,String mode){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (point.getValue(CONTROL_TYPE_REGULAR_SHAPE) != null) {    updateShapeProperties((String)point.getValue(CONTROL_TYPE_REGULAR_SHAPE),point.getPosition(),mode);    updateShapeControlPoints();  }  if (point.getValue(CONTROL_TYPE_LOCATION_INDEX) != null) {    int positionIndex=(Integer)point.getValue(CONTROL_TYPE_LOCATION_INDEX);    Position surfacePosition=computeSurfacePosition(point.getPosition());    surfacePosition=new Position(point.getPosition(),surfacePosition.getAltitude());    positions.set(positionIndex,surfacePosition);    if (measureShapeType.equals(SHAPE_POLYGON) && positions.size() > 2 && positionIndex == 0)     positions.set(positions.size() - 1,surfacePosition);    if (measureShapeType.equals(SHAPE_LINE) && positions.size() > 1)     shapeOrientation=LatLon.greatCircleAzimuth(positions.get(0),positions.get(1));  }  updateMeasureShape();}  }
class C{  public boolean isOtherCapability(){  return ((m_Flags & OTHER_CAPABILITY) == OTHER_CAPABILITY);}  }
class C{  public TcpChannelHandler(TcpWorker tcpWorker){  super();  this.tcpWorker=tcpWorker;}  }
class C{  @Override public boolean isCaseSensitive(int column) throws SQLException {  try {    debugCodeCall("isCaseSensitive",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void prepareForIndexRecovery(){  if (state != IndexShardState.RECOVERING) {    throw new IndexShardNotRecoveringException(shardId,state);  }  recoveryState.setStage(RecoveryState.Stage.INDEX);  assert currentEngineReference.get() == null;}  }
class C{  private void createInputList(){  inputList.clear();  List<CmrRepositoryDefinition> repositories=cmrRepositoryManager.getCmrRepositoryDefinitions();  for (  CmrRepositoryDefinition cmrRepositoryDefinition : repositories) {    inputList.add(new DeferredAgentsComposite(cmrRepositoryDefinition,showOldAgents));    OnlineStatus onlineStatus=cmrRepositoryDefinition.getOnlineStatus();    if ((onlineStatus == OnlineStatus.ONLINE) || (onlineStatus == OnlineStatus.OFFLINE)) {      cachedStatusMap.put(cmrRepositoryDefinition,onlineStatus);    }  }}  }
class C{  public DatePicker(Date date){  this(date,null);}  }
class C{  public void testAuthenticateSpringActiveDirectoryEmpty(){  LdapManager mgr=getLdapAD();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10000_AUTHENTICACION_CREDENTIALS_EMPTY,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  void revisitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  pendingNodes.remove(n);  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public static Map<String,Object> cancelProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);  if (!productionRun.exist()) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));  }  String currentStatusId=productionRun.getGenericValue().getString("currentStatusId");  if (currentStatusId.equals("PRUN_CREATED") || currentStatusId.equals("PRUN_DOC_PRINTED") || currentStatusId.equals("PRUN_SCHEDULED")) {    try {      List<ProductionRun> mandatoryWorkEfforts=FastList.newInstance();      ProductionRunHelper.getLinkedProductionRuns(delegator,dispatcher,productionRunId,mandatoryWorkEfforts);      for (int i=1; i < mandatoryWorkEfforts.size(); i++) {        GenericValue mandatoryWorkEffort=(mandatoryWorkEfforts.get(i)).getGenericValue();        if (!(mandatoryWorkEffort.getString("currentStatusId").equals("PRUN_CANCELLED"))) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChangedMandatoryProductionRunFound",locale));        }      }      Map<String,Object> serviceContext=FastMap.newInstance();      serviceContext.put("workEffortId",productionRunId);      serviceContext.put("currentStatusId","PRUN_CANCELLED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("updateWorkEffort",serviceContext);      List<GenericValue> products=EntityQuery.use(delegator).from("WorkEffortGoodStandard").where("workEffortId",productionRunId,"workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED").queryList();      if (!UtilValidate.isEmpty(products)) {        for (        GenericValue product : products) {          product.set("statusId","WEGS_CANCELLED");          product.store();        }      }      List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();      String taskId=null;      for (      GenericValue oneTask : tasks) {        taskId=oneTask.getString("workEffortId");        serviceContext.clear();        serviceContext.put("workEffortId",taskId);        serviceContext.put("currentStatusId","PRUN_CANCELLED");        serviceContext.put("userLogin",userLogin);        dispatcher.runSync("updateWorkEffort",serviceContext);        List<GenericValue> components=EntityQuery.use(delegator).from("WorkEffortGoodStandard").where("workEffortId",taskId,"workEffortGoodStdTypeId","PRUNT_PROD_NEEDED","statusId","WEGS_CREATED").queryList();        if (!UtilValidate.isEmpty(components)) {          for (          GenericValue component : components) {            component.set("statusId","WEGS_CANCELLED");            component.store();          }        }      }    } catch (    Exception e) {      Debug.logError(e,"Problem calling the updateWorkEffort service",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));    }    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));    return result;  }  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotBeCancelled",locale));}  }
class C{  protected Module(){}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {  setDoctypeSystem(systemId);  setDoctypePublic(publicId);  m_elemContext.m_elementName=name;  m_inDoctype=true;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  public boolean containsSubSeq(String seq){  return indexOfSubSeq(seq) != -1;}  }
class C{  private static Address GetIntArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetIntArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    int[] sourceArray=(int[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size << LOG_BYTES_IN_INT);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size << LOG_BYTES_IN_INT);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public static List<String> readToList(Reader r) throws IOException {  try (BufferedReader in=new BufferedReader(r)){    List<String> l=new ArrayList<>();    String line=null;    while ((line=in.readLine()) != null)     l.add(line);    return Collections.unmodifiableList(l);  } }  }
class C{  protected void printIssueAndComments(IssuesEntry entry) throws IOException, ServiceException {  printIssue(entry);  String issueId=getIssueId(entry.getId());  IssueCommentsFeed commentsFeed=getCommentsFeed(issueId);  printComments(commentsFeed);}  }
class C{  static void checkLocationPermissions(Activity targetActivity,AirMapInterface airMapInterface){  if (hasSelfPermissions(targetActivity,LOCATION_PERMISSIONS)) {    airMapInterface.onLocationPermissionsGranted();  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    targetActivity.requestPermissions(LOCATION_PERMISSIONS,LOCATION_PERMISSION_REQUEST_CODE);  }}  }
class C{  public ReadMultipleRegistersRequest(int ref,int count){  super();  setFunctionCode(Modbus.READ_MULTIPLE_REGISTERS);  setDataLength(4);  setReference(ref);  setWordCount(count);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.STRING_LITERAL;}  }
class C{  public IPv4RangeBuilder addRange(String key,String from,String to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  PainterBorder(String painterKey,Insets insets){  this.insets=insets;  this.painterKey=painterKey;}  }
class C{  public synchronized CharArraySetting createCharArraySetting(String key,char[] defaultValue){  CharArraySetting result=new CharArraySetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public static boolean startsWithIgnoreCase(String str,String prefix){  if (str == null || prefix == null) {    return false;  }  if (str.startsWith(prefix)) {    return true;  }  if (str.length() < prefix.length()) {    return false;  }  String lcStr=str.substring(0,prefix.length()).toLowerCase();  String lcPrefix=prefix.toLowerCase();  return lcStr.equals(lcPrefix);}  }
class C{  public Person(Long id,String firstName,String lastName){  this.id=id;  this.firstName=firstName;  this.lastName=lastName;}  }
class C{  public void testClearBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=95;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(-69);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public NotificationChain basicSetProject(SimpleProjectDescription newProject,NotificationChain msgs){  SimpleProjectDescription oldProject=project;  project=newProject;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_REFERENCE__PROJECT,oldProject,newProject);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected TXCommitMessage buildMessageForAdjunctReceivers(){  TXCommitMessage msg=new DistTXAdjunctCommitMessage(this.proxy.getTxId(),this.proxy.getTxMgr().getDM(),this);  Iterator<Map.Entry<LocalRegion,TXRegionState>> it=this.regions.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<LocalRegion,TXRegionState> me=it.next();    LocalRegion r=me.getKey();    TXRegionState txrs=me.getValue();    if (r.isUsedForPartitionedRegionBucket() && !txrs.isCreatedDuringCommit()) {      txrs.buildMessageForAdjunctReceivers(r,msg);    }  }  return msg;}  }
class C{  public static boolean isSimpleMatchPattern(String str){  return str.indexOf('*') != -1;}  }
class C{  public ParallelTaskBuilder handleInManager(){  this.config.setHandlerExecutionLocation(HandlerExecutionLocation.MANAGER);  return this;}  }
class C{  protected SVGOMFontElement(){}  }
class C{  private Map<String,String> projectParameters(){  Map<String,String> parameters=dataObject.getSource().getProject().getParameters();  if (parameters == null) {    parameters=new HashMap<>();    dataObject.getSource().getProject().setParameters(parameters);  }  return parameters;}  }
class C{  @POST @Path("authenticate") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response authenticate(@CookieParam("session-access-key") Cookie tokenAccessCookie,Credentials credentials,@Context UriInfo uriInfo) throws AuthenticationException {  if (handler == null) {    LOG.warn("Bearer authenticator is null.");    return Response.serverError().build();  }  boolean isSecure=uriInfo.getRequestUri().getScheme().equals("https");  if (!handler.isValid(credentials.getToken())) {    throw new AuthenticationException("Provided token is not valid");  }  Map<String,String> payload=handler.getPayload(credentials.getToken());  handler.authenticate(credentials.getToken());  try {    final String username=userNameValidator.normalizeUserName(payload.get("username"));    User user=userCreator.createUser(payload.get("email"),username,payload.get("firstName"),payload.get("lastName"));    Response.ResponseBuilder builder=Response.ok();    if (tokenAccessCookie != null) {      AccessTicket accessTicket=ticketManager.getAccessTicket(tokenAccessCookie.getValue());      if (accessTicket != null) {        if (!user.getId().equals(accessTicket.getUserId())) {          LOG.info("EVENT#user-changed-name# OLD-USER#{}# NEW-USER#{}#",accessTicket.getUserId(),user.getId());          LOG.info("EVENT#user-sso-logged-out# USER#{}#",accessTicket.getUserId());          ticketManager.removeTicket(accessTicket.getAccessToken());        }      } else {        cookieBuilder.clearCookies(builder,tokenAccessCookie.getValue(),isSecure);      }    }    if (payload.containsKey("initiator")) {      LOG.info("EVENT#user-sso-logged-in# USING#{}# USER#{}#",payload.get("initiator"),username);    }    String token=uniqueTokenGenerator.generate();    ticketManager.putAccessTicket(new AccessTicket(token,user.getId(),"bearer"));    cookieBuilder.setCookies(builder,token,isSecure);    builder.entity(Collections.singletonMap("token",token));    LOG.debug("Authenticate user {} with token {}",username,token);    return builder.build();  } catch (  IOException|ServerException e) {    throw new AuthenticationException(e.getLocalizedMessage(),e);  }}  }
class C{  public LiveChatConnection openLiveChat(ChannelConfig channel,LiveChatListener listener){  LiveChatConnection connection=new LiveChatConnection(this.credentials,listener);  connection.connect(channel,this.user);  return connection;}  }
class C{  private void flush(){  Map<K,T> toReturn=clearPending();  if (toReturn != null) {    _target.onMessage(toReturn);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  public void appendOpenUnorderedListTag(String style){  StringBuilder sb=new StringBuilder("<ul");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public void removeListener(T listener){  if (listeners != null) {    List<T> newlisteners=new ArrayList<T>();    newlisteners.addAll(listeners);    newlisteners.remove(listener);    listeners=newlisteners;  }}  }
class C{  public RowBuilder timestampCol(String name){  Column column=new ColumnTimestamp(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public void addMember(AbstractResourceUndoState member){  if (members == null) {    members=new AbstractResourceUndoState[]{member};  } else {    AbstractResourceUndoState[] expandedMembers=new AbstractResourceUndoState[members.length + 1];    System.arraycopy(members,0,expandedMembers,0,members.length);    expandedMembers[members.length]=member;    members=expandedMembers;  }}  }
class C{  private Package(){  loader=null;  name=null;}  }
class C{  public static void register(Map<String,Taglet> tagletMap){  if (tagletMap.containsKey(NAME)) {    tagletMap.remove(NAME);  }  tagletMap.put(NAME,new ExternalResources());}  }
class C{  private void validateJobDefinitionCreateRequest(JobDefinitionCreateRequest request){  request.setNamespace(alternateKeyHelper.validateStringParameter("namespace",request.getNamespace()));  request.setJobName(alternateKeyHelper.validateStringParameter("job name",request.getJobName()));  Assert.hasText(request.getActivitiJobXml(),"An Activiti job XML must be specified.");  request.setActivitiJobXml(request.getActivitiJobXml().trim());  validateJobDefinition(request.getNamespace(),request.getJobName(),request.getActivitiJobXml(),request.getParameters(),request.getS3PropertiesLocation());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static RefactoringStatus analyzeLocalRenames(LocalAnalyzePackage[] analyzePackages,TextChange cuChange,CompilationUnit oldCUNode,boolean recovery) throws CoreException {  RefactoringStatus result=new RefactoringStatus();  ICompilationUnit compilationUnit=(ICompilationUnit)oldCUNode.getJavaElement();  String newCuSource=cuChange.getPreviewContent(new NullProgressMonitor());  CompilationUnit newCUNode=new RefactoringASTParser(ASTProvider.SHARED_AST_LEVEL).parse(newCuSource,compilationUnit,true,recovery,null);  result.merge(analyzeCompileErrors(newCuSource,newCUNode,oldCUNode));  if (result.hasError())   return result;  for (int i=0; i < analyzePackages.length; i++) {    ASTNode enclosing=getEnclosingBlockOrMethodOrLambda(analyzePackages[i].fDeclarationEdit,cuChange,newCUNode);    IRegion newRegion=RefactoringAnalyzeUtil.getNewTextRange(analyzePackages[i].fDeclarationEdit,cuChange);    ASTNode newDeclaration=NodeFinder.perform(newCUNode,newRegion.getOffset(),newRegion.getLength());    Assert.isTrue(newDeclaration instanceof Name);    VariableDeclaration declaration=getVariableDeclaration((Name)newDeclaration);    Assert.isNotNull(declaration);    SimpleName[] problemNodes=ProblemNodeFinder.getProblemNodes(enclosing,declaration,analyzePackages[i].fOccurenceEdits,cuChange);    result.merge(RefactoringAnalyzeUtil.reportProblemNodes(newCuSource,problemNodes));  }  return result;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public textarea addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int size(){  return root.size();}  }
class C{  void expandHeap(int need){  this.bstr=null;  allocate();  if (this.heapSize + need > this.heap.length) {    int newlen=(this.heapSize + need) * 2;    if (newlen < MINIMUM_HEAP_SIZE) {      newlen=MINIMUM_HEAP_SIZE;    }    byte[] newHeap=new byte[newlen];    System.arraycopy(this.heap,0,newHeap,0,this.heapSize);    this.heap=newHeap;  }}  }
class C{  public CCParticleSystem(HashMap<?,?> dictionary){}  }
class C{  @Override protected void sendReply(InternalDistributedMember member,int procId,DM dm,ReplyException ex,PartitionedRegion pr,long startTime){  if (ex != null) {    this.outStream=null;    this.replyMsgNum=0;    this.replyLastMsg=true;  }  if (this.replyLastMsg) {    if (pr != null && startTime > 0) {      pr.getPrStats().endPartitionMessagesProcessing(startTime);    }  }  StreamingReplyMessage.send(member,procId,ex,dm,this.outStream,this.numObjectsInChunk,this.replyMsgNum,this.replyLastMsg,this.isPdxSerialized);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addSegmentSplit(){  if (!pendingLocations.offer(new CachedLocation())) {    Log.e(TAG,"Unable to add to pendingLocations.");  }}  }
class C{  public static GetNumberOfServiceSessionsResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfServiceSessionsResponseE object=new GetNumberOfServiceSessionsResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","getNumberOfServiceSessionsResponse").equals(reader.getName())) {          object.setGetNumberOfServiceSessionsResponse(GetNumberOfServiceSessionsResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void call(Message mesg,String interactionId,String btxnName){  boolean activated=collector.session().activate(uri,null,interactionId);  if (activated) {    collector.consumerStart(null,uri,"Test",null,interactionId);    collector.setBusinessTransaction(null,btxnName);  }  if (calledServices != null) {    String calledServiceName=calledServices.get(mesg.getType());synchronized (this) {      try {        wait(((int)Math.random() % 300) + 50);      } catch (      Exception e) {        e.printStackTrace();      }    }    if (calledServiceName != null) {      Service calledService=registry.getServiceInstance(calledServiceName);      String nextInteractionId=UUID.randomUUID().toString();      if (activated) {        collector.producerStart(null,calledService.getUri(),"Test",null,nextInteractionId);      }synchronized (this) {        try {          wait(((int)Math.random() % 100) + 10);        } catch (        Exception e) {          e.printStackTrace();        }      }      calledService.call(mesg,nextInteractionId,collector.getBusinessTransaction());      if (activated) {        collector.producerEnd(null,calledService.getUri(),"Test",null);      }    }  }  if (activated) {    collector.consumerEnd(null,uri,"Test",null);  }  setLastUsed(System.currentTimeMillis());  registry.returnServiceInstance(this);}  }
class C{  public static short bytesToShort(byte[] bytes,int offset){  short result=0x0000;  int end=offset + 2;  for (int i=0; i < 2; i++) {    result|=(bytes[end - i - 1] & 0xff) << (8 * i);  }  return result;}  }
class C{  public boolean validateRuleProbabilities(List<Rule> ruleList){  float probTotal=0;  for (int i=0; i < vars.size(); i++) {    for (int j=0; j < ruleList.size(); j++) {      if (j == 0) {        probTotal=(float)0.0;      }      if (ruleList.get(i).lhs.get(0).equals(vars.get(i))) {        probTotal+=ruleList.get(i).PROB;      }      if (probTotal > 1.0) {        return false;      }      if (j == ruleList.size() - 1 && probTotal != (float)1.0) {        return false;      }    }  }  return true;}  }
class C{  public static String implode(String[] elements,String separator){  if (elements == null) {    return null;  }  if (elements.length == 0) {    return "";  }  StringBuilder builder=new StringBuilder();  builder.append(elements[0]);  boolean skippedFirst=false;  for (  String s : elements) {    if (skippedFirst) {      builder.append(separator);      builder.append(s);    } else {      skippedFirst=true;    }  }  return builder.toString();}  }
class C{  @Override public void writeVertex(final OutputStream outputStream,final Vertex v,Direction direction) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static boolean typeIsNumeric(int type){  boolean result;switch (type) {case Types.BIGINT:    result=true;  break;case Types.BINARY:result=false;case Types.BIT:result=false;break;case Types.CHAR:result=false;break;case Types.DATE:result=false;break;case Types.DECIMAL:result=true;break;case Types.DOUBLE:result=true;break;case Types.FLOAT:result=true;break;case Types.INTEGER:result=true;break;case Types.LONGVARBINARY:result=false;break;case Types.LONGVARCHAR:result=false;break;case Types.NULL:result=false;break;case Types.NUMERIC:result=true;break;case Types.OTHER:result=false;break;case Types.REAL:result=true;break;case Types.SMALLINT:result=true;break;case Types.TIME:result=false;break;case Types.TIMESTAMP:result=true;break;case Types.TINYINT:result=true;break;case Types.VARBINARY:result=false;break;case Types.VARCHAR:result=false;break;default :result=false;}return result;}  }
class C{  public SemPmWrapper(GraphSource graphWrapper,Parameters parameters){  this(new EdgeListGraph(graphWrapper.getGraph()));}  }
class C{  public ReilProgram<InstructionType> translate(final ITranslationEnvironment environment,final List<? extends IBlockContainer<InstructionType>> functions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  final ReilProgram<InstructionType> program=new ReilProgram<InstructionType>();  for (  final IBlockContainer<InstructionType> function : functions) {    program.addFunction(function,translate(environment,function));  }  return program;}  }
class C{  public final int addMove(String moveStr,String playerAction,int nag,String preComment,String postComment){  if (currentNode.verifyChildren(currentPos))   updateListener();  int idx=currentNode.children.size();  Node node=new Node(currentNode,moveStr,playerAction,Integer.MIN_VALUE,nag,preComment,postComment);  Move move=TextIO.UCIstringToMove(moveStr);  ArrayList<Move> moves=null;  if (move == null) {    moves=MoveGen.instance.legalMoves(currentPos);    move=TextIO.stringToMove(currentPos,moveStr,moves);  }  if (move == null)   return -1;  if (moves == null)   moves=MoveGen.instance.legalMoves(currentPos);  node.moveStr=TextIO.moveToString(currentPos,move,false,false,moves);  node.moveStrLocal=TextIO.moveToString(currentPos,move,false,true,moves);  node.move=move;  node.ui=new UndoInfo();  currentNode.children.add(node);  updateListener();  return idx;}  }
class C{  private static boolean needsStartOnFirstThreadHack(IJavaProject javaProject,ILaunchConfiguration config) throws CoreException {  if (!Util.isPlatformMac()) {    return false;  }  GwtSdk sdk=GwtSdk.findSdkFor(javaProject);  if (sdk == null || !sdk.validate().isOK()) {    GWTPluginLog.logWarning(String.format("Could not check whether the launch configuration \"%1$s\" needs the -XstartOnFirstThread argument, assuming it does",config.getName()));    return true;  }  return true;}  }
class C{  private void add(byte[] key,final byte[] blob) throws IOException {  assert blob.length > 0;  if ((blob == null) || (blob.length == 0))   return;  final int pos=(int)this.file.length();  try {    this.index.put(key,pos);    this.file.seek(pos);    this.file.writeInt(this.keylength + blob.length);    this.file.write(key);    this.file.write(blob,0,blob.length);  } catch (  final SpaceExceededException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public KeyPair createKeyPair(Integer KeyLength) throws Exception {  KeyPairGenerator keyGen=null;  if (KeyLength < MIN_KEY_LENGTH) {    throw new IllegalStateException(String.format("Minimum key length is %s bits",MIN_KEY_LENGTH));  }  try {    keyGen=KeyPairGenerator.getInstance(KEY_ALGORITHM_RSA);    keyGen.initialize(KeyLength,new SecureRandom());    KeyPair keypair=keyGen.generateKeyPair();    return keypair;  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();    throw e;  }}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public LimeJTable(DataLineModel<?,?> dm){  super(dm);  setToolTipText("");  GUIUtils.fixInputMap(this);  addFocusListener(FocusHandler.INSTANCE);  setupTableFont();}  }
class C{  public FindServersOnNetworkResponse FindServersOnNetwork(RequestHeader RequestHeader,UnsignedInteger StartingRecordId,UnsignedInteger MaxRecordsToReturn,String... ServerCapabilityFilter) throws ServiceFaultException, ServiceResultException {  FindServersOnNetworkRequest req=new FindServersOnNetworkRequest(RequestHeader,StartingRecordId,MaxRecordsToReturn,ServerCapabilityFilter);  return (FindServersOnNetworkResponse)channel.serviceRequest(req);}  }
class C{  protected static LuaValue[] newupn(){  return new LuaValue[]{NIL};}  }
class C{  public int equivHashCode(){  return hashCode();}  }
class C{  public static void copyArray(Object original,Object copy){  Class<? extends Object> originalClass=original.getClass();  if (!originalClass.isArray()) {    return;  }  int length=Array.getLength(original);  if (originalClass.getComponentType().isArray()) {    if (length != Array.getLength(copy)) {      return;    }    for (int index=0; index < length; index++) {      copyArray(Array.get(original,index),Array.get(copy,index));    }  }  System.arraycopy(original,0,copy,0,length);}  }
class C{  @Override public int hashCode(){  return this.getMBeanName().hashCode();}  }
class C{  public Xor(){  super("xor",2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.131 -0500",hash_original_method="7F46EDF7DD1A49A585957DF512054145",hash_generated_method="C596EE2D8B85408E720192458559F297") public boolean isTransactionMapped(){  return this.isMapped;}  }
class C{  int automap(){  int automapped=0;  int idx1=0;  for (  String col : columns) {    String normCol=normalizeColumnName(col);    if (normCol != null && TermFactory.normaliseTerm(mappingCoreid.getTerm().simpleName()).equalsIgnoreCase(normCol)) {      mappingCoreid.setIndex(idx1);      mapping.setIdColumn(idx1);      automapped++;      break;    }    idx1++;  }  for (  PropertyMapping f : fields) {    int idx2=0;    for (    String col : columns) {      String normCol=normalizeColumnName(col);      if (normCol != null && TermFactory.normaliseTerm(f.getTerm().simpleName()).equalsIgnoreCase(normCol)) {        f.setIndex(idx2);        automapped++;        break;      }      idx2++;    }  }  return automapped;}  }
class C{  public synchronized byte[] provideRefundTransaction(Transaction refundTx,byte[] clientMultiSigPubKey) throws VerificationException {  checkNotNull(refundTx);  checkNotNull(clientMultiSigPubKey);  stateMachine.checkState(State.WAITING_FOR_REFUND_TRANSACTION);  log.info("Provided with refund transaction: {}",refundTx);  refundTx.verify();  if (refundTx.getInputs().size() != 1)   throw new VerificationException("Refund transaction does not have exactly one input");  if (refundTx.getInput(0).getSequenceNumber() == TransactionInput.NO_SEQUENCE)   throw new VerificationException("Refund transaction's input's sequence number disables lock time");  if (refundTx.getLockTime() < minExpireTime)   throw new VerificationException("Refund transaction has a lock time too soon");  if (refundTx.getOutputs().size() != 1)   throw new VerificationException("Refund transaction does not have exactly one output");  refundTransactionUnlockTimeSecs=refundTx.getLockTime();  clientKey=ECKey.fromPublicOnly(clientMultiSigPubKey);  Script multisigPubKey=ScriptBuilder.createMultiSigOutputScript(2,ImmutableList.of(clientKey,serverKey));  TransactionSignature sig=refundTx.calculateSignature(0,serverKey,multisigPubKey,Transaction.SigHash.NONE,true);  log.info("Signed refund transaction.");  this.clientOutput=refundTx.getOutput(0);  stateMachine.transition(State.WAITING_FOR_MULTISIG_CONTRACT);  return sig.encodeToBitcoin();}  }
class C{  private HttpResponse executeGet(String bucketName,String objectName,Map<String,String> headerMap,Map<String,String> queryParamMap) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  updateRegionCache(bucketName);  return execute(Method.GET,BucketRegionCache.INSTANCE.region(bucketName),bucketName,objectName,headerMap,queryParamMap,null,null,0);}  }
class C{  public ProxyRepository(RepositoryResolver resolver,String proxiedIdentity){  super();  this.setRepositoryResolver(resolver);  this.setProxiedIdentity(proxiedIdentity);}  }
class C{  private boolean isFatalTagSatisfied(TagInfo tag,CleanTimeValues cleanTimeValues){  boolean fatal=true;  if (tag != null) {    if (tag.getFatalTags().isEmpty())     return true;    fatal=false;    for (    String fatalTagName : tag.getFatalTags()) {      if (getOpenTags(cleanTimeValues).tagExists(fatalTagName)) {        fatal=true;      }    }  }  return fatal;}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createList(this);    super.addNotify();  }}  }
class C{  @Transactional public void refreshTeams(final long time) throws ServiceException {  try {    boolean toAdd=false;    JSONObject archive=archiveRepository.getArchive(time);    if (null == archive) {      archive=new JSONObject();      archive.put(Archive.ARCHIVE_DATE,DateFormatUtils.format(System.currentTimeMillis(),"yyyyMMdd"));      toAdd=true;    }    final JSONArray teams=new JSONArray();    final String[] teamStrs=Symphonys.get("teams").split(",");    for (    final String teamStr : teamStrs) {      final JSONObject team=new JSONObject();      teams.put(team);      team.put(Common.TEAM_NAME,teamStr);      final JSONArray members=new JSONArray();      team.put(User.USERS,members);      final List<JSONObject> teamMembers=getTeamMembers(teamStr);      for (      final JSONObject teamMember : teamMembers) {        final String memberId=teamMember.optString(Keys.OBJECT_ID);        members.put(memberId);      }    }    archive.put(Archive.ARCHIVE_TEAMS,teams.toString());    if (toAdd) {      archiveRepository.add(archive);    } else {      archiveRepository.update(archive.optString(Keys.OBJECT_ID),archive);    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Refreshes archive failed",e);    throw new ServiceException(e);  }}  }
class C{  @TargetApi(VERSION_CODES.KITKAT) private void handleSmsReceived(Intent intent){  if (BuildConfig.DEBUG)   Log.v("SMSReceiver: Intercept SMS");  Bundle bundle=intent.getExtras();  if (bundle != null) {    SmsMessage[] messages=null;    if (SmsPopupUtils.hasKitKat()) {      messages=Intents.getMessagesFromIntent(intent);    } else {      messages=SmsPopupUtils.getMessagesFromIntent(intent);    }    if (messages != null) {      notifyMessageReceived(new SmsMmsMessage(context,messages,System.currentTimeMillis()));    }  }}  }
class C{  public SVGTextAreaFigure(){  this("Text");}  }
class C{  public static byte[] toUtf8(String s){  try {    ByteArrayOutputStream bs=new ByteArrayOutputStream(s.length());    DataOutputStream d=new DataOutputStream(bs);    d.writeUTF(s);    return bs.toByteArray();  } catch (  IOException e) {    G.v().out.println("Some sort of IO exception in toUtf8 with " + s);  }  return null;}  }
class C{  protected boolean matchesTypeReference(char[] pattern,TypeReference type){  if (pattern == null)   return true;  if (type == null)   return true;  char[][] compoundName=type.getTypeName();  char[] simpleName=compoundName[compoundName.length - 1];  int dimensions=type.dimensions() * 2;  if (dimensions > 0) {    int length=simpleName.length;    char[] result=new char[length + dimensions];    System.arraycopy(simpleName,0,result,0,length);    for (int i=length, l=result.length; i < l; ) {      result[i++]='[';      result[i++]=']';    }    simpleName=result;  }  return matchesName(pattern,simpleName);}  }
class C{  public BotInviteBuilder withGuild(IGuild guild){  this.guild=guild;  return this;}  }
class C{  public void run(){  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_DEFAULT + android.os.Process.THREAD_PRIORITY_LESS_FAVORABLE);  mCurrentThreadTime=0;  mTotalThreadTime=0;  while (mRunning) {    if (mCurrentThreadTime == -1) {      mCurrentThreadTime=SystemClock.currentThreadTimeMillis();    }    Request request;    request=mRequestFeeder.getRequest();    if (request == null) {synchronized (mRequestFeeder) {        if (HttpLog.LOGV)         HttpLog.v("ConnectionThread: Waiting for work");        mWaiting=true;        try {          mRequestFeeder.wait();        } catch (        InterruptedException e) {        }        mWaiting=false;        if (mCurrentThreadTime != 0) {          mCurrentThreadTime=SystemClock.currentThreadTimeMillis();        }      }    } else {      if (HttpLog.LOGV)       HttpLog.v("ConnectionThread: new request " + request.mHost + " "+ request);      mConnection=mConnectionManager.getConnection(mContext,request.mHost);      mConnection.processRequests(request);      if (mConnection.getCanPersist()) {        if (!mConnectionManager.recycleConnection(mConnection)) {          mConnection.closeConnection();        }      } else {        mConnection.closeConnection();      }      mConnection=null;      if (mCurrentThreadTime > 0) {        long start=mCurrentThreadTime;        mCurrentThreadTime=SystemClock.currentThreadTimeMillis();        mTotalThreadTime+=mCurrentThreadTime - start;      }    }  }}  }
class C{  public boolean isCoinBase(){  return inputs.size() == 1 && inputs.get(0).isCoinBase();}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener) throws javax.xml.transform.TransformerException {  initFunctionTable();  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  public SevenSegment(){  initComponents();  colormode=((new Random()).nextBoolean() ? COLOR_BLUE : COLOR_JASMIN);}  }
class C{  public boolean foundUsefulAttribute(){  return (m_attribute != null);}  }
class C{  public static void reverseComplement(byte[] src,byte[] dest,int length){  for (int k=0; k < length; k++) {switch (src[k]) {case (byte)'a':case (byte)'A':      dest[length - 1 - k]='T';    break;case (byte)'c':case (byte)'C':  dest[length - 1 - k]='G';break;case (byte)'g':case (byte)'G':dest[length - 1 - k]='C';break;case (byte)'t':case (byte)'T':dest[length - 1 - k]='A';break;default :dest[length - 1 - k]='N';break;}}}  }
class C{  public void addAddress(PeerAddress peerAddress){  int newMax;  lock.lock();  try {    addInactive(peerAddress);    newMax=getMaxConnections() + 1;  }  finally {    lock.unlock();  }  setMaxConnections(newMax);}  }
class C{  public void readingDone(){  for (  EdgePattern edgePattern : edgePatterns) {    for (    GraphID graphId : graphs.keySet()) {      if (edgePattern.graphNamePattern.matcher(graphId.getGraphName()).matches() && edgePattern.graphType.equals(graphId.getType())) {        addEdge(edgePattern.timestamp,graphId.getType(),graphId.getGraphName(),edgePattern.edgeName,edgePattern.state,edgePattern.source,edgePattern.dest,true);      }    }  }}  }
class C{  public static Document toDocument(SolrInputDocument doc,IndexSchema schema){  Document out=new Document();  final float docBoost=doc.getDocumentBoost();  Set<String> usedFields=Sets.newHashSet();  for (  SolrInputField field : doc) {    String name=field.getName();    SchemaField sfield=schema.getFieldOrNull(name);    boolean used=false;    if (sfield != null && !sfield.multiValued() && field.getValueCount() > 1) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued field "+ sfield.getName()+ ": "+ field.getValue());    }    float fieldBoost=field.getBoost();    boolean applyBoost=sfield != null && sfield.indexed() && !sfield.omitNorms();    if (applyBoost == false && fieldBoost != 1.0F) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "cannot set an index-time boost, unindexed or norms are omitted for field "+ sfield.getName()+ ": "+ field.getValue());    }    float compoundBoost=fieldBoost * docBoost;    List<CopyField> copyFields=schema.getCopyFieldsList(name);    if (copyFields.size() == 0)     copyFields=null;    boolean hasField=false;    try {      for (      Object v : field) {        if (v == null) {          continue;        }        hasField=true;        if (sfield != null) {          used=true;          addField(out,sfield,v,applyBoost ? compoundBoost : 1f);          usedFields.add(sfield.getName());        }        if (copyFields != null) {          for (          CopyField cf : copyFields) {            SchemaField destinationField=cf.getDestination();            final boolean destHasValues=usedFields.contains(destinationField.getName());            if (!destinationField.multiValued() && destHasValues) {              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued copy field "+ destinationField.getName()+ ": "+ v);            }            used=true;            Object val=v;            if (val instanceof String && cf.getMaxChars() > 0) {              val=cf.getLimitedValue((String)val);            }            final float destBoost=(destinationField.indexed() && !destinationField.omitNorms()) ? (destHasValues ? fieldBoost : compoundBoost) : 1.0F;            addField(out,destinationField,val,destBoost);            usedFields.add(destinationField.getName());          }        }        fieldBoost=compoundBoost=1.0f;      }    } catch (    SolrException ex) {      throw ex;    }catch (    Exception ex) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "Error adding field '"+ field.getName()+ "'='"+ field.getValue()+ "' msg="+ ex.getMessage(),ex);    }    if (!used && hasField) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "unknown field '"+ name+ "'");    }  }  for (  SchemaField field : schema.getRequiredFields()) {    if (out.getField(field.getName()) == null) {      if (field.getDefaultValue() != null) {        addField(out,field,field.getDefaultValue(),1.0f);      } else {        String msg=getID(doc,schema) + "missing required field: " + field.getName();        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);      }    }  }  return out;}  }
class C{  protected void onFeatureSelected(KMLAbstractFeature feature){  this.moveTo(feature);  if (this.balloonController != null)   this.balloonController.showBalloon(feature);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.573 -0500",hash_original_method="500B44D79F50634A486701EEF1530400",hash_generated_method="7F0F8C120B3C0A8B607FBBD9A4DB1485") public void reset(){  native_reset(mNativePaint);  setFlags(DEFAULT_PAINT_FLAGS);  mHasCompatScaling=false;  mCompatScaling=mInvCompatScaling=1;  mBidiFlags=BIDI_DEFAULT_LTR;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRANSACTION_ID;default :  return null;}}  }
class C{  private void updateFromRaDec(float ra,float dec){  float raRadians=ra * Geometry.DEGREES_TO_RADIANS;  float decRadians=dec * Geometry.DEGREES_TO_RADIANS;  this.x=MathUtil.cos(raRadians) * MathUtil.cos(decRadians);  this.y=MathUtil.sin(raRadians) * MathUtil.cos(decRadians);  this.z=MathUtil.sin(decRadians);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static void inheritGwtModule(Path path,String inheritableModuleLogicalName) throws IOException {  final String inheritsString="    <inherits name='" + inheritableModuleLogicalName + "'/>";  List<String> content=Files.readAllLines(path,UTF_8);  int i=0, lastInheritsLine=0;  for (  String str : content) {    i++;    if (str.contains("<inherits")) {      lastInheritsLine=i;    }  }  content.add(lastInheritsLine,inheritsString);  Files.write(path,content,UTF_8);}  }
class C{  @Override public void validate(final FacesContext context,final UIComponent captchaInputField,final Object value) throws ValidatorException {  String userInput=(String)value;  String captchaKey=(String)JSFUtils.getSessionAttribute(Constants.CAPTCHA_KEY);  if (userInput != null && userInput.equals(captchaKey)) {    JSFUtils.setSessionAttribute(Constants.CAPTCHA_INPUT_STATUS,Boolean.TRUE);  } else {    HtmlInputText htmlInputText=(HtmlInputText)captchaInputField;    htmlInputText.setValid(false);    JSFUtils.setSessionAttribute(Constants.CAPTCHA_INPUT_STATUS,Boolean.FALSE);    htmlInputText.setValue("");    String text=JSFUtils.getText(BaseBean.ERROR_CAPTCHA,(Object[])null);    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));  }}  }
class C{  public static long parseDuration(String durationStr){  long duration=-1;  String[] componentArr=durationStr.split(":");switch (componentArr.length) {case 1:    duration=parseDurationFromSeconds(durationStr);  break;case 2:case 3:durationStr=ensureSegmentedDuration(durationStr);duration=parseDurationFromString(durationStr);break;default :break;}return duration;}  }
class C{  private void addComponentToLocationCache(MultiblockComponent comp){  BlockPos pos=comp.getRelativePosition();  locationCache.put(pos,comp);}  }
class C{  @Override protected void init(){  super.init();  styleTableOnDistSelection();}  }
class C{  public void assertTermsEnum(TermsEnum leftTermsEnum,TermsEnum rightTermsEnum,boolean deep,boolean hasPositions) throws Exception {  BytesRef term;  PostingsEnum leftPositions=null;  PostingsEnum rightPositions=null;  PostingsEnum leftDocs=null;  PostingsEnum rightDocs=null;  while ((term=leftTermsEnum.next()) != null) {    assertEquals(term,rightTermsEnum.next());    assertTermStats(leftTermsEnum,rightTermsEnum);    if (deep) {      if (hasPositions) {        assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.ALL));        assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.ALL));        assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.PAYLOADS));        assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.PAYLOADS));        assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.OFFSETS));        assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.OFFSETS));        assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.POSITIONS));        assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.POSITIONS));      }      assertDocsEnum(leftDocs=leftTermsEnum.postings(leftDocs),rightDocs=rightTermsEnum.postings(rightDocs));      assertDocsEnum(leftDocs=leftTermsEnum.postings(leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(rightDocs,PostingsEnum.NONE));      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(leftDocs),rightDocs=rightTermsEnum.postings(rightDocs));      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(rightDocs,PostingsEnum.NONE));    }  }  assertNull(rightTermsEnum.next());}  }
class C{  public void log(Level level,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setParameters(params);  doLog(lr);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.BEFORE_CODE___OPERATION_NAME_1:    return getOperationName_1();case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_11:  return getAnonymous_beforeCode_1_1();case UmplePackage.BEFORE_CODE___CODE_1:return getCode_1();case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_21:return getAnonymous_beforeCode_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void applyImageResource(Element elem,ImageResource image){  applyImageResource(elem,image,"center","center");  elem.getStyle().setHeight(image.getHeight(),"px");  elem.getStyle().setWidth(image.getWidth(),"px");}  }
class C{  public static String formatTextBox(String text,int width,Pattern splitter,Set<String> singleRowers){  requireNonNulls(text,splitter);  requireNonNullElements(singleRowers);  final StringBuilder sb=new StringBuilder();  final AtomicInteger col=new AtomicInteger();  splitter.splitAsStream(text).map(null).forEachOrdered(null);  return sb.toString();}  }
class C{  public DelegationSpec(boolean isDelegable){  this.isDelegable=isDelegable;  this.delegateTo=null;  this.actAsToken=null;  assert invariantRespected();}  }
class C{  public InputStream createOutInputStream(InputStream is){  return new InstrumentedInputStream(collector(),Direction.Out,is);}  }
class C{  void track(Application application,Context context,String event){  if (application != null && application instanceof FoamApp) {    FoamMain foamMain=((FoamApp)application).getFoamMain();    if (foamMain != null) {      foamMain.logEvent(context,event);    }  }}  }
class C{  public VersionedDataInputStream(InputStream in,Version version){  super(in);  this.version=version;}  }
class C{  @Override public byte[] serialize(){  short padding=0;  if (paddingMap.containsKey(this.icmpType))   padding=paddingMap.get(this.icmpType);  int length=4 + padding;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(this.icmpType);  bb.put(this.icmpCode);  bb.putShort(this.checksum);  for (int i=0; i < padding; i++)   bb.put((byte)0);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IPv4.PROTOCOL_ICMP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(2,this.checksum);  }  return data;}  }
class C{  public void fillRect(int x,int y,int width,int height){  g.fillRect(x,y,width,height);}  }
class C{  public void visitEnd(){}  }
class C{  public void addListener(DNSListener listener,DNSQuestion question){  final long now=System.currentTimeMillis();  _listeners.add(listener);  if (question != null) {    for (    DNSEntry dnsEntry : this.getCache().getDNSEntryList(question.getName().toLowerCase())) {      if (question.answeredBy(dnsEntry) && !dnsEntry.isExpired(now)) {        listener.updateRecord(this.getCache(),now,dnsEntry);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.589 -0500",hash_original_method="2C93EF10C01AE643F78F003A0BECAC73",hash_generated_method="294280ED8CDC389357E4F36D66292F13") public static boolean isLocalEmergencyNumber(String number,Context context){  return isLocalEmergencyNumberInternal(number,context,true);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override protected boolean onActivate(){  boolean active=this.isActivated();  if (active) {    return active;  }  StatusType statusType;  if ((resistances != null) && !resistances.isEmpty()) {    for (    Entry<StatusType,Double> entry : resistances.getMap().entrySet()) {      statusType=entry.getKey();      active=this.adjustOwnerStatusResistance(statusType,true);      if (!active) {        logger.warn("Failed application of status resistance \"" + statusType.getName() + "\"");      }    }  } else {    logger.warn("Status resistance list is empty");  }  return active;}  }
class C{  public void shiftLeft() throws IOException {  print("shiftLeft",null);}  }
class C{  public CompassPlot(ValueDataset dataset){  super();  if (dataset != null) {    this.datasets[0]=dataset;    dataset.addChangeListener(this);  }  this.circle1=new Ellipse2D.Double();  this.circle2=new Ellipse2D.Double();  this.rect1=new Rectangle2D.Double();  setSeriesNeedle(0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI="http://www.w3.org/DOM/Test/level2";  String qualifiedName="XML:XML";  String nodeName;  String nsURI;  String localName;  String prefix;  String tagName;  doc=(Document)load("staffNS",false);  element=doc.createElementNS(namespaceURI,qualifiedName);  nodeName=element.getNodeName();  nsURI=element.getNamespaceURI();  localName=element.getLocalName();  prefix=element.getPrefix();  tagName=element.getTagName();  assertEquals("documentcreateelementNS01_nodeName","XML:XML",nodeName);  assertEquals("documentcreateelementNS01_namespaceURI","http://www.w3.org/DOM/Test/level2",nsURI);  assertEquals("documentcreateelementNS01_localName","XML",localName);  assertEquals("documentcreateelementNS01_prefix","XML",prefix);  assertEquals("documentcreateelementNS01_tagName","XML:XML",tagName);}  }
class C{  public static String printDate(Calendar date){  if (date == null) {    return "";  }  return Helper.printCalendar(date);}  }
class C{  @Override public void reset(){  if (!mIsLocked) {    super.reset();    for (int i=0; i < mElements.size(); i++)     mElements.get(i).reset();    mCamera.reset();  }}  }
class C{  public static void dump(Printer printer,String[] args){  boolean verbose=false;  for (  String arg : args) {    if (arg.equals("-v")) {      verbose=true;    }  }  SQLiteDatabase.dumpAll(printer,verbose);}  }
class C{  public synchronized AttributeSet addAttributes(AttributeSet old,AttributeSet attr){  if ((old.getAttributeCount() + attr.getAttributeCount()) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.addAttributes(attr);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.addAttributes(attr);  return ma;}  }
class C{  int processRow(int[] rowCounters,int rowNumber,int rowHeight,int[] codewords,int next) throws FormatException {  int width=bitMatrix.getWidth();  int columnNumber=0;  long symbol=0;  for (int i=0; i < width; i+=MODULES_IN_SYMBOL) {    if (i + MODULES_IN_SYMBOL > rowCounters.length) {      throw FormatException.getFormatInstance();    }    for (int mask=MODULES_IN_SYMBOL - 1; mask >= 0; mask--) {      if (rowCounters[i + (MODULES_IN_SYMBOL - 1 - mask)] >= rowHeight >>> 1) {        symbol|=1L << mask;      }    }    if (columnNumber > 0) {      int cw=getCodeword(symbol);      if (cw < 0 && i < width - MODULES_IN_SYMBOL) {        if (eraseCount >= erasures.length) {          throw FormatException.getFormatInstance();        }        erasures[eraseCount]=next;        next++;        eraseCount++;      } else {        codewords[next++]=cw;      }    } else {      int cw=getCodeword(symbol);      if (ecLevel < 0) {        if (rowNumber % 3 == 1) {          leftColumnECData=cw;        }      }    }    symbol=0;    columnNumber++;  }  if (columnNumber > 1) {    --next;    if (ecLevel < 0) {      if (rowNumber % 3 == 2) {        rightColumnECData=codewords[next];        if (rightColumnECData == leftColumnECData && leftColumnECData != 0) {          ecLevel=((rightColumnECData % 30) - rows % 3) / 3;        }      }    }    codewords[next]=0;  }  return next;}  }
class C{  public ToTextSAXHandler(ContentHandler handler,String encoding){  super(handler,encoding);}  }
class C{  public static void applyClusterXmlConfiguration(Cache cache,ConfigurationResponse response,DistributionConfig config){  if (response == null || response.getRequestedConfiguration().isEmpty())   return;  List<String> groups=getGroups(config);  Map<String,Configuration> requestedConfiguration=response.getRequestedConfiguration();  List<String> cacheXmlContentList=new LinkedList<String>();  Configuration clusterConfiguration=requestedConfiguration.get(SharedConfiguration.CLUSTER_CONFIG);  if (clusterConfiguration != null) {    String cacheXmlContent=clusterConfiguration.getCacheXmlContent();    if (!StringUtils.isBlank(cacheXmlContent)) {      cacheXmlContentList.add(cacheXmlContent);    }  }  for (  String group : groups) {    Configuration groupConfiguration=requestedConfiguration.get(group);    if (groupConfiguration != null) {      String cacheXmlContent=groupConfiguration.getCacheXmlContent();      if (!StringUtils.isBlank(cacheXmlContent)) {        cacheXmlContentList.add(cacheXmlContent);      }    }  }  for (  String cacheXmlContent : cacheXmlContentList) {    InputStream is=new ByteArrayInputStream(cacheXmlContent.getBytes());    try {      cache.loadCacheXml(is);    }  finally {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public boolean isPlaying() throws IllegalStateException {  if (mediaPlayer != null)   return mediaPlayer.isPlaying(); else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public Node elementAt(int i){  if (null == m_map)   return null;  return m_map[i];}  }
class C{  public static void unzip(File file,File destDir){  destDir.mkdir();  try {    ZipFile zipFile=new ZipFile(file);    Enumeration entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry ze=(ZipEntry)entries.nextElement();      if (ze.isDirectory())       (new File(destDir,ze.getName())).mkdir(); else {        File f=new File(destDir,ze.getName());        (new File(f.getParent())).mkdirs();        FileOutputStream fos=null;        BufferedOutputStream bos=null;        InputStream in=null;        try {          fos=new FileOutputStream(f);          bos=new BufferedOutputStream(fos);          in=zipFile.getInputStream(ze);          copystream(in,bos);        }  finally {          if (bos != null)           bos.close(); else           if (fos != null)           fos.close();          if (in != null)           in.close();        }      }    }  } catch (  IOException ioex) {    ioex.printStackTrace();  }}  }
class C{  public static void main(String[] args){  Bot bot=Bot.createInstance();  bot.memory().createMemory("test");  bot.shutdown();}  }
class C{  @Override public Vertex parseOperatorByteCode(DataInputStream dataStream,Network network) throws IOException {  return parseOperatorByteCode(dataStream,null,network);}  }
class C{  public void addJsLibFiles(File... files){  jsLibFiles.addAll(Arrays.asList(files));}  }
class C{  protected FaultImpl(){  super();}  }
class C{  public DErrorDetail(JFrame parent,Dialog.ModalityType modality,Throwable error){  super(parent,modality);  this.error=error;  initComponents();}  }
class C{  public static JToolBar leftShift(JToolBar self,Action action){  self.add(action);  return self;}  }
class C{  public MyString2(String s){  this.s="";  for (int i=0; i < s.length(); i++) {    this.s+=s.charAt(i) + "";  }}  }
class C{  public void addHyperlinkListener(HyperlinkListener l){  listenerList.add(HyperlinkListener.class,l);}  }
class C{  public VMwareEndpointCertificateStore createCertStore(String storeName) throws AlreadyExistsException {  if (storeName == null || storeName.isEmpty()) {    throw new IllegalArgumentException(String.format("storeName cannot be null or empty. " + "[Server: %s, User: %s]",_serverName,_userName));  }  ServerHandle serverHandle=openServer();  try {    int error=VecsAdapter.VecsCreateCertStoreHW(serverHandle.getHandle(),storeName,null,null);    if (error == VecsAdapter.ERROR_ALREADY_EXISTS) {      throw new AlreadyExistsException(String.format("%s store already exists. " + "[Server: %s, User: %s]",storeName,_serverName,_userName));    }    if (error != 0) {      throw new VecsGenericException(String.format("Creating store '%s' failed. [Server: %s, User: %s]",storeName,_serverName,_userName),error);    }  } catch (  Exception e) {    closeServer(serverHandle.getHandle());    throw e;  }  VMwareEndpointCertificateStore store=new VMwareEndpointCertificateStore(serverHandle,_serverName,_userName,storeName);  return store;}  }
class C{  boolean isItemHidden(int index){  return index < vsb.getValue() || index >= vsb.getValue() + itemsInWindow();}  }
class C{  @Override public ResponseFuture request(Object request) throws RemotingException {  return channel.request(request);}  }
class C{  public final void testValidateFails(){  NotNullValidator notNullValidator=new NotNullValidator("foo");  assertFalse(notNullValidator.validate(null));}  }
class C{  public int size(){  return 3;}  }
class C{  private MainFrame(){}  }
class C{  public FractionAtom(Atom num,Atom den,int unit,float t,int numAlign,int denomAlign){  this(num,den,unit,t);  this.numAlign=checkAlignment(numAlign);  this.denomAlign=checkAlignment(denomAlign);}  }
class C{  public List<Relationship> orderedRelationships(Primitive primitive){  return orderedRelationships(this.network.createVertex(primitive));}  }
class C{  @Override public boolean supportsCatalogsInPrivilegeDefinitions(){  debugCodeCall("supportsCatalogsInPrivilegeDefinitions");  return true;}  }
class C{  private static int handleDpadHorizontal(int iconIdx,int cntX,int cntY,int[][] matrix,int increment,boolean isRtl){  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int newIconIndex=NOOP;  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIdx) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadHorizontal: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIdx));  }  for (int x=xPos + increment; 0 <= x && x < cntX; x+=increment) {    if ((newIconIndex=inspectMatrix(x,yPos,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) {      return newIconIndex;    }  }  int nextYPos1;  int nextYPos2;  boolean haveCrossedAllAppsColumn1=false;  boolean haveCrossedAllAppsColumn2=false;  int x=-1;  for (int coeff=1; coeff < cntY; coeff++) {    nextYPos1=yPos + coeff * increment;    nextYPos2=yPos - coeff * increment;    x=xPos + increment * coeff;    if (inspectMatrix(x,nextYPos1,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn1=true;    }    if (inspectMatrix(x,nextYPos2,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn2=true;    }    for (; 0 <= x && x < cntX; x+=increment) {      int offset1=haveCrossedAllAppsColumn1 && x < cntX - 1 ? increment : 0;      newIconIndex=inspectMatrix(x,nextYPos1 + offset1,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }      int offset2=haveCrossedAllAppsColumn2 && x < cntX - 1 ? -increment : 0;      newIconIndex=inspectMatrix(x,nextYPos2 + offset2,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }    }  }  if (iconIdx == PIVOT) {    if (isRtl) {      return increment < 0 ? NEXT_PAGE_FIRST_ITEM : PREVIOUS_PAGE_LAST_ITEM;    }    return increment < 0 ? PREVIOUS_PAGE_LAST_ITEM : NEXT_PAGE_FIRST_ITEM;  }  return newIconIndex;}  }
class C{  @HLEFunction(nid=0x293B45B8,version=150,checkInsideInterrupt=true) public int sceKernelGetThreadId(){  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelGetThreadId returning uid=0x%X",currentThread.uid));  }  return currentThread.uid;}  }
class C{  public Lifecycle(Logger log,String name,Level level){  _log=log;  _name=name;  setLevel(level);}  }
class C{  public void actionPerformed(ActionEvent e){  workbench.deselectAll();  for (  Component comp : workbench.getComponents()) {    if (comp instanceof DisplayEdge) {      Edge edge=((DisplayEdge)comp).getModelEdge();      if (Edges.isBidirectedEdge(edge)) {        workbench.selectEdge(edge);      }    }  }}  }
class C{  public static void deviceDelete(Context context,String accessToken,String identifier,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  delete(context,String.format(getApiServerUrl() + DEVICE_DELETE,identifier),headerList,null,responseHandler);}  }
class C{  public void readSwitchPageTag() throws IOException {  if (WbXmlLiterals.SWTICH_PAGE == currentByte) {    read();    this.pageTagState=currentByte;    read();  }}  }
class C{  public N4mfSwitch(){  if (modelPackage == null) {    modelPackage=N4mfPackage.eINSTANCE;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildgetnodename.class,args);}  }
class C{  public FBStreamingBackupManager(){}  }
class C{  protected void onQuitting(){}  }
class C{  public void completeDrag(){  dragProperty.setValue(null);}  }
class C{  public void fireNeuronsUpdated(){  for (  NetworkListener listener : networkListeners) {    listener.updateNeurons();  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public ListNode removeNthFromEnd(ListNode head,int n){  ListNode pre=new ListNode(0);  pre.next=head;  ListNode p1=pre;  ListNode p2=pre;  int i=0;  while (i < n) {    p2=p2.next;    i++;  }  while (p2.next != null) {    p1=p1.next;    p2=p2.next;  }  p1.next=p1.next.next;  return pre.next;}  }
class C{  public static String buildDownloadUrl(String server,int size,String deviceId,String timestamp){  String downloadUrl=server + "/download?size=" + size+ "&device_id="+ deviceId+ "&timestamp="+ timestamp;  return downloadUrl;}  }
class C{  public void testCoordinatesTokenizer(){  List<Position> coords=new ArrayList<Position>();  coords.add(Position.fromDegrees(23.56,-18.3,9));  coords.add(Position.fromDegrees(56.0,34.9,2));  coords.add(Position.fromDegrees(19,56.9));  coords.add(Position.fromDegrees(23.9,90,44));  coords.add(Position.fromDegrees(18,12.3,8));  coords.add(Position.fromDegrees(57,3.3,-110.9));  coords.add(Position.fromDegrees(80.1,50,-23.1));  String coordString="-18.3,23.56,9     34.9, 56.0, 2     \t56.9, 19     90.0,23.9,44   " + " 12.3,18,8,3.3,57,-110.9,50,80.1,-23.1";  KMLCoordinateTokenizer tokenizer=new KMLCoordinateTokenizer(coordString);  List<Position> positions=new ArrayList<Position>();  while (tokenizer.hasMoreTokens()) {    positions.add(tokenizer.nextPosition());  }  assertEquals("Coordinates not as expected",coords,positions);}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  objWrite.set(WritableUtils.clone(value,conf));  output.collect(key,objWrite);}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  if (node instanceof TextLayoutFormatNode) {    if (FXG_LINKACTIVEFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkActiveFormat == null) {        linkActiveFormat=(TextLayoutFormatNode)node;        linkActiveFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkActiveFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKHOVERFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkHoverFormat == null) {        linkHoverFormat=(TextLayoutFormatNode)node;        linkHoverFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkHoverFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKNORMALFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkNormalFormat == null) {        linkNormalFormat=(TextLayoutFormatNode)node;        linkNormalFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkNormalFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownLinkFormat",propertyName);    }  } else {    addChild(node);  }}  }
class C{  boolean isDecoderSelected(){  return decoderBox.getSelectedIndex() != 0;}  }
class C{  public double eval(boolean useTrainingData,int valuesIndex){  try {    if (useTrainingData)     return trainingValues[valuesIndex]; else     return testingValues[valuesIndex];  } catch (  Exception e) {    System.err.println("Accessing data in TerminalSymbol '" + symbol + "' at index '"+ valuesIndex+ "' but no values available or index out of range.\n"+ e);    System.exit(0);  }  return 0.0;}  }
class C{  public HashMap<String,Object> save(){  HashMap<String,Object> map=new HashMap<String,Object>();  map.put("Name",name);  map.put("Type",type.toString());  if (viewData != null) {    viewData.save();    map.put("ViewData",viewData.toArray());  }  return (map);}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  public boolean orAndAndNot(BitVector orset,BitVector andset,BitVector andnotset){  boolean ret=false;  long[] a=null, b=null, c=null, d=null, e=null;  int al, bl, cl, dl;  a=this.bits;  al=a.length;  if (orset == null) {    bl=0;  } else {    b=orset.bits;    bl=b.length;  }  if (andset == null) {    cl=0;  } else {    c=andset.bits;    cl=c.length;  }  if (andnotset == null) {    dl=0;  } else {    d=andnotset.bits;    dl=d.length;  }  if (al < bl) {    e=new long[bl];    System.arraycopy(a,0,e,0,al);    this.bits=e;  } else {    e=a;  }  int i=0;  long l;  if (c == null) {    if (dl <= bl) {      while (i < dl) {        l=b[i] & ~d[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }      while (i < bl) {        l=b[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }    } else {      while (i < bl) {        l=b[i] & ~d[i];        if ((l & ~e[i]) != 0)         ret=true;        e[i]|=l;        i++;      }    }  } else   if (bl <= cl && bl <= dl) {    while (i < bl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  } else   if (cl <= bl && cl <= dl) {    while (i < cl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  } else {    while (i < dl) {      l=b[i] & c[i] & ~d[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }    int shorter=cl;    if (bl < shorter)     shorter=bl;    while (i < shorter) {      l=b[i] & c[i];      if ((l & ~e[i]) != 0)       ret=true;      e[i]|=l;      i++;    }  }  return ret;}  }
class C{  public void layoutView(int viewMode){  int layoutMode=0;  Parcelable s=getListView().getLayoutManager().onSaveInstanceState();  StorePosition.setParentPosition(mFile.getFileId(),s);switch (viewMode) {case 0:    mLayoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false);  mAdapter.setResourceLayout(R.layout.list_item);layoutView.setIcon(R.drawable.ic_grid);layoutMode=R.drawable.ic_grid;break;case 1:if (getActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {mLayoutManager=new GridLayoutManager(getActivity(),NUMBER_OF_GRID_COLUMNS,GridLayoutManager.VERTICAL,false);} else {mLayoutManager=new GridLayoutManager(getActivity(),NUMBER_OF_GRID_COLUMNS_LANDSCAPE,GridLayoutManager.VERTICAL,false);}mAdapter.setResourceLayout(R.layout.grid_item);layoutView.setIcon(R.drawable.ic_list);layoutMode=R.drawable.ic_list;break;default :mLayoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false);mAdapter.setResourceLayout(R.layout.list_item);layoutView.setIcon(R.drawable.ic_grid);layoutMode=R.drawable.ic_grid;break;}SharedPreferences.Editor editor=mAppPreferences.edit();editor.putInt("layoutMode",layoutMode);editor.apply();mCurrentListView.setLayoutManager(mLayoutManager);if (StorePosition.getListPositionList().containsKey(mFile.getFileId())) {Parcelable r=StorePosition.getParentPosition(mFile.getFileId());getListView().getLayoutManager().onRestoreInstanceState(r);StorePosition.removeParentPosition(mFile.getFileId());}}  }
class C{  static double[] sumWithCompensation(double[] intermediateSum,double value){  double tmp=value - intermediateSum[1];  double sum=intermediateSum[0];  double velvel=sum + tmp;  intermediateSum[1]=(velvel - sum) - tmp;  intermediateSum[0]=velvel;  return intermediateSum;}  }
class C{  public boolean visit(RangeMarker edit){  return visitNode(edit);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.404 -0500",hash_original_method="A5A902720BBA2BC5C38FC5C51260A9D6",hash_generated_method="BEF6C75B1C9182A7F94002676040FAA7") public void disconnect() throws IOException {  __input.close();  __output.close();  super.disconnect();}  }
class C{  private boolean collectTaint(ASTNode node,String nodeString,Map<String,Set<CallLocationModel>> dataMap){  Set<CallLocationModel> sources=dataMap.get(nodeString);  if (sources != null && !sources.isEmpty()) {    int offset=node.getStartPosition();    int length=node.getLength();    Position pos=new Position(offset,length);    fTaintSourcesMap.put(pos,sources);    return true;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ColorChooserDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ColorChooserDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  Record makeRecord(String line){  if (line == null || "".equals(line))   return null;  BreastCancerYRecord r=new BreastCancerYRecord();  String[] split=line.split(",");  String col;  for (int i=0; i < split.length; i++) {    col=split[i].replaceAll("'","");    if (i == 0) {      r.age="10-19".equals(col) ? 0f : "20-29".equals(col) ? 1 / 8f : "30-39".equals(col) ? 2 / 8f : "40-49".equals(col) ? 3 / 8f : "50-59".equals(col) ? 4 / 8f : "60-69".equals(col) ? 5 / 8f : "70-79".equals(col) ? 6 / 8f : "80-89".equals(col) ? 7 / 8f : "90-99".equals(col) ? 8 / 8f : 0f;    } else     if (i == 1) {      r.menopause="lt40".equals(col) ? 0f : "ge40".equals(col) ? 1 / 2f : "premeno".equals(col) ? 2 / 2f : 0f;    } else     if (i == 2) {      r.tumorSize="0-4".equals(col) ? 0f : "5-9".equals(col) ? 1 / 11f : "10-14".equals(col) ? 2 / 11f : "15-19".equals(col) ? 3 / 11f : "20-24".equals(col) ? 4 / 11f : "25-29".equals(col) ? 5 / 11f : "30-34".equals(col) ? 6 / 11f : "35-39".equals(col) ? 7 / 11f : "40-44".equals(col) ? 8 / 11f : "45-49".equals(col) ? 9 / 11f : "50-54".equals(col) ? 10 / 11f : "50-54".equals(col) ? 11 / 11f : 0;    } else     if (i == 3) {      r.invNodes="0-2".equals(col) ? 0f : "3-5".equals(col) ? 1 / 12f : "6-8".equals(col) ? 2 / 12f : "9-11".equals(col) ? 3 / 12f : "12-14".equals(col) ? 4 / 12f : "15-17".equals(col) ? 5 / 12f : "18-20".equals(col) ? 6 / 12f : "21-23".equals(col) ? 7 / 12f : "24-26".equals(col) ? 8 / 12f : "27-29".equals(col) ? 9 / 12f : "30-32".equals(col) ? 10 / 12f : "33-35".equals(col) ? 11 / 12f : "36-39".equals(col) ? 12 / 12f : 0;    } else     if (i == 4) {      r.nodeCaps="yes".equals(col) ? 1.0f : "no".equals(col) ? -1.0f : 0f;    } else     if (i == 5) {      r.degMalig="1".equals(col) ? 0 : "2".equals(col) ? 1 / 2f : "3".equals(col) ? 2 / 2f : 0;    } else     if (i == 6) {      r.breast="left".equals(col) ? 0f : 1f;    } else     if (i == 7) {      r.breastQuad="left_up".equals(col) ? 0 : "left_low".equals(col) ? 1 / 4f : "right_up".equals(col) ? 2 / 4f : "right_low".equals(col) ? 3 / 4f : "central".equals(col) ? 4 / 4f : 0;    } else     if (i == 8) {      r.irrad="yes".equals(col) ? 1f : "no".equals(col) ? -1f : 0f;    } else     if (i == 9) {      r.recurrence="recurrence-events".equals(col);    } else {      System.err.println("Too many columns!!!");    }  }  return r;}  }
class C{  @Override protected void addValues(){  super.addValues();  addDecl(new SampleDecl());}  }
class C{  public long signal(){  return Long.parseLong(fields[30]);}  }
class C{  public static TranClob createClob(Reader reader,int length){  return new TranClob(new ClobImpl(reader,length),false);}  }
class C{  public FloodlightModuleContext(){  this(null);}  }
class C{  public Divider build(){  return new Divider(sublayers);}  }
class C{  static int inplaceAdd(int a[],final int aSize,final int addend){  long carry=addend & 0xFFFFFFFFL;  for (int i=0; (carry != 0) && (i < aSize); i++) {    carry+=a[i] & 0xFFFFFFFFL;    a[i]=(int)carry;    carry>>=32;  }  return (int)carry;}  }
class C{  public void addField(String fieldName,String type,short flags,double value){  short fieldNameIndex=itsConstantPool.addUtf8(fieldName);  short typeIndex=itsConstantPool.addUtf8(type);  ClassFileField field=new ClassFileField(fieldNameIndex,typeIndex,flags);  field.setAttributes(itsConstantPool.addUtf8("ConstantValue"),(short)0,(short)2,itsConstantPool.addConstant(value));  itsFields.add(field);}  }
class C{  public void onDetachedFromWindow(){  mDraweeHolder.onDetach();}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    debugCodeCall("executeQuery",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){  if (contactInformation.equals("")) {    String lastRecipient=RecipientCmd.getLastRecipientNumber();    String lastRecipientName=RecipientCmd.getLastRecipientName();    if (lastRecipient != null) {      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);    } else {      send("error: last recipient not set");    }  } else {    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);    if (resolvedContact == null) {      send(R.string.chat_no_match_for,contactInformation);    } else     if (resolvedContact.isDistinct()) {      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);    } else {      askForMoreDetails(resolvedContact.getCandidates());    }  }}  }
class C{  public void start(){  try {    this.openReplicator.start();  } catch (  Exception ex) {    throw new RuntimeException("Error initializing the MySQL replicator...",ex);  }}  }
class C{  public void tokenCountsClear(){  hamTokenCounts.clear();  spamTokenCounts.clear();}  }
class C{  private boolean checkAndClearForceFlush(){  if (stopFlusher) {    return true;  }  boolean done=false;  boolean result;  do {    int v=this.forceFlushCount.get();    result=v > 0;    if (result) {      done=this.forceFlushCount.compareAndSet(v,0);    }  } while (result && !done);  return result;}  }
class C{  public boolean hasNext(){  return hasMoreTokens();}  }
class C{  @Override public void paintOverlay(Graphics2D g2,ChartPanel chartPanel){  Shape savedClip=g2.getClip();  Rectangle2D dataArea=chartPanel.getScreenDataArea();  g2.clip(dataArea);  JFreeChart chart=chartPanel.getChart();  XYPlot plot=(XYPlot)chart.getPlot();  ValueAxis xAxis=plot.getDomainAxis();  RectangleEdge xAxisEdge=plot.getDomainAxisEdge();  Iterator iterator=this.xCrosshairs.iterator();  while (iterator.hasNext()) {    Crosshair ch=(Crosshair)iterator.next();    if (ch.isVisible()) {      double x=ch.getValue();      double xx=xAxis.valueToJava2D(x,dataArea,xAxisEdge);      if (plot.getOrientation() == PlotOrientation.VERTICAL) {        drawVerticalCrosshair(g2,dataArea,xx,ch);      } else {        drawHorizontalCrosshair(g2,dataArea,xx,ch);      }    }  }  ValueAxis yAxis=plot.getRangeAxis();  RectangleEdge yAxisEdge=plot.getRangeAxisEdge();  iterator=this.yCrosshairs.iterator();  while (iterator.hasNext()) {    Crosshair ch=(Crosshair)iterator.next();    if (ch.isVisible()) {      double y=ch.getValue();      double yy=yAxis.valueToJava2D(y,dataArea,yAxisEdge);      if (plot.getOrientation() == PlotOrientation.VERTICAL) {        drawHorizontalCrosshair(g2,dataArea,yy,ch);      } else {        drawVerticalCrosshair(g2,dataArea,yy,ch);      }    }  }  g2.setClip(savedClip);}  }
class C{  @ObjectiveCName("rawRequestWithService:withMethod:WithParams:") public void rawRequest(String service,String method,ApiRawValue params){  modules.getExternalModule().rawRequest(service,method,params);}  }
class C{  protected void storeOutputProperties() throws Exception {  if (VERBOSE) {    System.out.println("Saving '" + getOutputFilename() + "'...");  }  m_OutputProperties.store(new FileOutputStream(getOutputFilename())," Customises the list of options given by the GenericObjectEditor\n# for various superclasses.");}  }
class C{  public static double convertHHMMInteger(int hhmm){  int h=hhmm / 100;  int m=hhmm - (h * 100);  double seconds=Math.abs(h) * 3600 + m * 60;  return seconds;}  }
class C{  public Plane(){  this.normal.z=1.0;}  }
class C{  public void testTwoOfThreeNodeSubmitCommand() throws Throwable {  testSubmitCommand(2,3);}  }
class C{  protected void fireTableEvent(int row0,int row1,int col,int type){  ++m_modCount;  if (type != EventConstants.UPDATE && col == EventConstants.ALL_COLUMNS) {    fireTupleEvent(this,row0,row1,type);  }  if (!m_listeners.isEmpty()) {    Object[] lstnrs=m_listeners.getArray();    for (int i=0; i < lstnrs.length; ++i) {      ((TableListener)lstnrs[i]).tableChanged(this,row0,row1,col,type);    }  }}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  private void paintCubicGraph(){  if (loops.length < 2)   return;  final CubicCurve2D.Float cubicCurve=new CubicCurve2D.Float();  Point2D.Float p=new Point2D.Float(), p1=new Point2D.Float(), p2=new Point2D.Float(), p3=new Point2D.Float(), pTemp;  final float s=0.25f;  getCP(idxMin,p);  getCP(idxMin + 1,p1);  getCP(idxMin + 2,p2);  for (int j=idxMin; j < idxMax; j++) {    getCP(j + 3,p3);    if (cubicNegativeEstimation && (values[j] < 0 || values[j + 1] < 0))     g.setStroke(STROKE_DOUBLE_DASHED);    cubicCurve.setCurve(p1.x,p1.y,-s * p.x + p1.x + s * p2.x,-s * p.y + p1.y + s * p2.y,s * p1.x + p2.x - s * p3.x,s * p1.y + p2.y - s * p3.y,p2.x,p2.y);    g.draw(cubicCurve);    if (cubicNegativeEstimation && (values[j] < 0 || values[j + 1] < 0))     g.setStroke(dataSet.getStroke());    pTemp=p;    p=p1;    p1=p2;    p2=p3;    p3=pTemp;  }}  }
class C{  private int abortThreadState(final ThreadState perThread){  assert perThread.isHeldByCurrentThread();  if (perThread.isInitialized()) {    try {      int abortedDocCount=perThread.dwpt.getNumDocsInRAM();      subtractFlushedNumDocs(abortedDocCount);      perThread.dwpt.abort();      return abortedDocCount;    }  finally {      flushControl.doOnAbort(perThread);    }  } else {    flushControl.doOnAbort(perThread);    return 0;  }}  }
class C{  public boolean isAcceptATM(){  Object oo=get_Value(COLUMNNAME_AcceptATM);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected FloatLiteralImpl(){  super();}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void notIdle(){  if (idleTimeoutMsec.get() > 0)   lastActionMsec.set(System.currentTimeMillis());}  }
class C{  private ReplicationJob restoreReplicationJob(PersistedJobInfo persistedJobInfo){  ReplicationTask replicationTask=null;  HiveObjectSpec tableSpec=new HiveObjectSpec(persistedJobInfo.getSrcDbName(),persistedJobInfo.getSrcTableName());  HiveObjectSpec partitionSpec=null;  if (persistedJobInfo.getSrcPartitionNames().size() > 0) {    partitionSpec=new HiveObjectSpec(persistedJobInfo.getSrcDbName(),persistedJobInfo.getSrcTableName(),persistedJobInfo.getSrcPartitionNames().get(0));  }switch (persistedJobInfo.getOperation()) {case COPY_UNPARTITIONED_TABLE:    replicationTask=new CopyUnpartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,tableSpec,persistedJobInfo.getSrcPath(),directoryCopier,true);  break;case COPY_PARTITIONED_TABLE:replicationTask=new CopyPartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,tableSpec,persistedJobInfo.getSrcPath());break;case COPY_PARTITION:replicationTask=new CopyPartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,partitionSpec,persistedJobInfo.getSrcPath(),Optional.empty(),directoryCopier,true);break;case COPY_PARTITIONS:List<String> partitionNames=persistedJobInfo.getSrcPartitionNames();replicationTask=new CopyPartitionsTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,tableSpec,partitionNames,persistedJobInfo.getSrcPath(),copyPartitionJobExecutor,directoryCopier);break;case DROP_TABLE:replicationTask=new DropTableTask(srcCluster,destCluster,tableSpec,persistedJobInfo.getSrcObjectTldt());break;case DROP_PARTITION:replicationTask=new DropPartitionTask(srcCluster,destCluster,partitionSpec,persistedJobInfo.getSrcObjectTldt());break;case RENAME_TABLE:if (!persistedJobInfo.getRenameToDb().isPresent() || !persistedJobInfo.getRenameToTable().isPresent()) {throw new RuntimeException(String.format("Rename to table is invalid: %s.%s",persistedJobInfo.getRenameToDb(),persistedJobInfo.getRenameToTable()));}HiveObjectSpec renameToTableSpec=new HiveObjectSpec(persistedJobInfo.getRenameToDb().get(),persistedJobInfo.getRenameToTable().get());replicationTask=new RenameTableTask(conf,srcCluster,destCluster,destinationObjectFactory,objectConflictHandler,tableSpec,renameToTableSpec,persistedJobInfo.getSrcPath(),persistedJobInfo.getRenameToPath(),persistedJobInfo.getSrcObjectTldt(),copyPartitionJobExecutor,directoryCopier);break;case RENAME_PARTITION:if (!persistedJobInfo.getRenameToDb().isPresent() || !persistedJobInfo.getRenameToTable().isPresent() || !persistedJobInfo.getRenameToPartition().isPresent()) {throw new RuntimeException(String.format("Rename to partition is invalid: %s.%s/%s",persistedJobInfo.getRenameToDb(),persistedJobInfo.getRenameToTable(),persistedJobInfo.getRenameToPartition()));}HiveObjectSpec renameToSpec=new HiveObjectSpec(persistedJobInfo.getRenameToDb().get(),persistedJobInfo.getRenameToTable().get(),persistedJobInfo.getRenameToPartition().get());replicationTask=new RenamePartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,partitionSpec,renameToSpec,Optional.empty(),persistedJobInfo.getRenameToPath(),persistedJobInfo.getSrcObjectTldt(),directoryCopier);break;default :throw new UnsupportedOperationException("Unhandled operation:" + persistedJobInfo.getOperation());}return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo);}  }
class C{  public void printStateMachine(Vertex state,Writer writer,Network network,long start,long timeout){  try {    Set<Vertex> elements=new HashSet<Vertex>();    elements.add(state);    printState(state,writer,"",elements,network,start,timeout);    writer.write("\r\n");  } catch (  IOException error) {    network.getBot().log(this,error);    return;  }}  }
class C{  public JpegSegmentReader(File file) throws JpegProcessingException {  _file=file;  _data=null;  _stream=null;  readSegments();}  }
class C{  public void testSetProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Beans.setProperty(introspectedTarget,STRING_PROPERTY,NEW_VALUE);  Beans.setProperty(hashedTarget,STRING_PROPERTY,NEW_VALUE);  assertEquals(NEW_VALUE,Beans.getProperty(introspectedTarget,STRING_PROPERTY));  assertEquals(NEW_VALUE,Beans.getProperty(hashedTarget,STRING_PROPERTY));}  }
class C{  public static <T extends Identifyable>ArrayList<T> checkIds(@NonNull ArrayList<T> items){  for (  T item : items) {    checkId(item);  }  return items;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Override public void addPages(){  page=new NewMavenPomPage(getSelection());  addPage(page);}  }
class C{  private void writePropName(String propName,ByteArrayBuilder bab){  ByteBuffer textBuf=ColumnImpl.encodeUncompressedText(propName,_database.getCharset());  bab.putShort((short)textBuf.remaining());  bab.put(textBuf);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public int round(final int f26dot6){  double d=TTVM.getDoubleFromF26Dot6(f26dot6);  d=round(d);  return TTVM.storeDoubleAsF26Dot6(d);}  }
class C{  protected ImplementationFactory(){}  }
class C{  public boolean isCanceled(){  return cancelled;}  }
class C{  public static Token newKeyword(String text,int startLine,int startColumn){  int type=Types.lookupKeyword(text);  if (type != Types.UNKNOWN) {    return new Token(type,text,startLine,startColumn);  }  return null;}  }
class C{  public int match(byte[] search,int offset,int length){  int ret=-1;  int searchLength=search.length;  if (searchLength > 0) {    int limit=Math.min(offset + length,buffer.size()) - searchLength - offset;    byte byte0=search[0];    for (int start=offset; start <= limit; ++start) {      if (buffer.getByte(start) == byte0) {        int i=0;        for (; i < searchLength; ++i) {          if (search[i] != buffer.getByte(start + i)) {            break;          }        }        if (i == searchLength) {          ret=start;          break;        }      }    }  }  return ret;}  }
class C{  public static <E>TopicProcessor<E> share(String name,int bufferSize,WaitStrategy strategy){  return share(name,bufferSize,strategy,null);}  }
class C{  public void loadApk(String pkgName,ZipFile apkFile){  apkAssets=new ZipBackedNode(apkFile,"assets/");  root.mount("/data/" + pkgName,apkAssets);}  }
class C{  public SliderArrowShapeState(){  super("ArrowShape");}  }
class C{  public void deselect(int index){  deselectItem(index);}  }
class C{  private void checkAlarms(final ZonedDateTime TIME){  alarmsToRemove.clear();  for (  Alarm alarm : alarms) {    final ZonedDateTime ALARM_TIME=alarm.getTime();switch (alarm.getRepetition()) {case ONCE:      if (TIME.isAfter(ALARM_TIME)) {        if (alarm.isArmed()) {          fireAlarmEvent(new AlarmEvent(Clock.this,alarm));          alarm.executeCommand();        }        alarmsToRemove.add(alarm);      }    break;case HALF_HOURLY:  if ((ALARM_TIME.getMinute() == TIME.getMinute() || ALARM_TIME.plusMinutes(30).getMinute() == TIME.getMinute()) && ALARM_TIME.getSecond() == TIME.getSecond()) {    if (alarm.isArmed()) {      fireAlarmEvent(new AlarmEvent(Clock.this,alarm));      alarm.executeCommand();    }  }break;case HOURLY:if (ALARM_TIME.getMinute() == TIME.getMinute() && ALARM_TIME.getSecond() == TIME.getSecond()) {if (alarm.isArmed()) {  fireAlarmEvent(new AlarmEvent(Clock.this,alarm));  alarm.executeCommand();}}break;case DAILY:if (ALARM_TIME.getHour() == TIME.getHour() && ALARM_TIME.getMinute() == TIME.getMinute() && ALARM_TIME.getSecond() == TIME.getSecond()) {if (alarm.isArmed()) {fireAlarmEvent(new AlarmEvent(Clock.this,alarm));alarm.executeCommand();}}break;case WEEKLY:if (ALARM_TIME.getDayOfWeek() == TIME.getDayOfWeek() && ALARM_TIME.getHour() == TIME.getHour() && ALARM_TIME.getMinute() == TIME.getMinute() && ALARM_TIME.getSecond() == TIME.getSecond()) {if (alarm.isArmed()) {fireAlarmEvent(new AlarmEvent(Clock.this,alarm));alarm.executeCommand();}}break;}}for (Alarm alarm : alarmsToRemove) {removeAlarm(alarm);}}  }
class C{  private void createTrivialLanes(){  Lanes laneDef20=this.scenario.getLanes();  LanesFactory fac=laneDef20.getFactory();  for (  Link link : scenario.getNetwork().getLinks().values()) {    if (link.getToNode().getOutLinks() != null && !link.getToNode().getOutLinks().isEmpty()) {      LanesToLinkAssignment linkAssignment=fac.createLanesToLinkAssignment(link.getId());      List<Id<Link>> toLinkList=new ArrayList<>();      for (      Id<Link> toLink : link.getToNode().getOutLinks().keySet()) {        toLinkList.add(toLink);      }      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create(link.getId() + ".ol",Lane.class),link.getCapacity(),link.getLength(),0,1,toLinkList,null);      laneDef20.addLanesToLinkAssignment(linkAssignment);    }  }}  }
class C{  public JsonEncoding detectEncoding() throws IOException, JsonParseException {  boolean foundEncoding=false;  if (ensureLoaded(4)) {    int quad=(_inputBuffer[_inputPtr] << 24) | ((_inputBuffer[_inputPtr + 1] & 0xFF) << 16) | ((_inputBuffer[_inputPtr + 2] & 0xFF) << 8)| (_inputBuffer[_inputPtr + 3] & 0xFF);    if (handleBOM(quad)) {      foundEncoding=true;    } else {      if (checkUTF32(quad)) {        foundEncoding=true;      } else       if (checkUTF16(quad >>> 16)) {        foundEncoding=true;      }    }  } else   if (ensureLoaded(2)) {    int i16=((_inputBuffer[_inputPtr] & 0xFF) << 8) | (_inputBuffer[_inputPtr + 1] & 0xFF);    if (checkUTF16(i16)) {      foundEncoding=true;    }  }  JsonEncoding enc;  if (!foundEncoding) {    enc=JsonEncoding.UTF8;  } else   if (_bytesPerChar == 2) {    enc=_bigEndian ? JsonEncoding.UTF16_BE : JsonEncoding.UTF16_LE;  } else   if (_bytesPerChar == 4) {    enc=_bigEndian ? JsonEncoding.UTF32_BE : JsonEncoding.UTF32_LE;  } else {    throw new RuntimeException("Internal error");  }  _context.setEncoding(enc);  return enc;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:    return ((InternalEList<?>)getCoordinate_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:  return ((InternalEList<?>)getCoordinate_2()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void focusLost(FocusEvent evt){  if (!(isValid())) {    this.setSelectionStart(0);    this.setSelectionEnd(0);  }}  }
class C{  public String ruleString(XMLObject xo){  return ruleString();}  }
class C{  protected void sequence_SingleNameBinding(ISerializationContext context,BindingElement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINDING_ELEMENT__VAR_DECL) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINDING_ELEMENT__VAR_DECL));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0(),semanticObject.getVarDecl());  feeder.finish();}  }
class C{  private CharSequence ellipsizeString(CharSequence str,TextView textView){  int width=textView.getWidth() - textView.getCompoundPaddingLeft() - textView.getCompoundPaddingRight();  return ellipsizeString(str,width,textView.getPaint());}  }
class C{  public boolean beginsWith(final int[] ids){  if (ids == null)   throw new IllegalArgumentException();  if (vertices.length < ids.length) {    return false;  }  for (int i=0; i < ids.length; i++) {    final int idSelf=vertices[i].pred.getId();    final int idOther=ids[i];    if (idSelf != idOther) {      return false;    }  }  return true;}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().openStream();  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageSDs;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageSDs=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      double imageTotal=0;      double imageN=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotal+=data[col];            imageN++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      double imageAverage=imageTotal / imageN;      double totalDeviation=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            totalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      imageSDs[a]=Math.sqrt(totalDeviation / (imageN - 1));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE STANDARD DEVIATION\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageSDs[a]);    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String toString(){  return move.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.704 -0500",hash_original_method="A50D0B5AC0368A8E12CF6CC75EC809BD",hash_generated_method="6D2CBD014CB05323E58D6ECF135C506E") public AccessibilityWebContentKeyBinding(long keyCodeAndModifiers,int[] actionSequence){  mKeyCodeAndModifiers=keyCodeAndModifiers;  mActionSequence=actionSequence;}  }
class C{  public void keyPressed(KeyEvent evt){  int keyCode=evt.getKeyCode();  int modifiers=evt.getModifiers();  if (keyCode == KeyEvent.VK_CONTROL || keyCode == KeyEvent.VK_SHIFT || keyCode == KeyEvent.VK_ALT || keyCode == KeyEvent.VK_META)   return;  if ((modifiers & ~KeyEvent.SHIFT_MASK) != 0 || evt.isActionKey() || keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_DELETE || keyCode == KeyEvent.VK_ENTER || keyCode == KeyEvent.VK_TAB || keyCode == KeyEvent.VK_ESCAPE) {    if (grabAction != null) {      handleGrabAction(evt);      return;    }    KeyStroke keyStroke=KeyStroke.getKeyStroke(keyCode,modifiers);    Object o=currentBindings.get(keyStroke);    if (o == null) {      if (currentBindings != bindings) {        Toolkit.getDefaultToolkit().beep();        repeatCount=0;        repeat=false;        evt.consume();      }      currentBindings=bindings;      return;    } else     if (o instanceof ActionListener) {      currentBindings=bindings;      executeAction(((ActionListener)o),evt.getSource(),String.valueOf(evt.getKeyChar()),evt.getModifiers());      evt.consume();      return;    } else     if (o instanceof Hashtable) {      currentBindings=(Hashtable)o;      evt.consume();      return;    }  }}  }
class C{  public int size(){synchronized (lock) {    return count;  }}  }
class C{  public static cuDoubleComplex cuCadd(cuDoubleComplex x,cuDoubleComplex y){  return cuCmplx(cuCreal(x) + cuCreal(y),cuCimag(x) + cuCimag(y));}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  private char[] convertToArrayType(char[] typeName,int arrayDim){  int length=typeName.length;  char[] arrayType=new char[length + arrayDim * 2];  System.arraycopy(typeName,0,arrayType,0,length);  for (int i=0; i < arrayDim; i++) {    arrayType[length + (i * 2)]='[';    arrayType[length + (i * 2) + 1]=']';  }  return arrayType;}  }
class C{  void resume(){  vmdata.resume();}  }
class C{  @Override protected final boolean failIfRegionMissing(){  return false;}  }
class C{  protected void parseGeometryString(){  int i=0;  byte[] bytes=geometryString.getBytes();  xgrav=new String(bytes,0,1);  for (i=2; i < bytes.length; i++) {    if ((bytes[i] == '-') || (bytes[i] == '+'))     break;  }  if (i == bytes.length)   return;  ygrav=(bytes[i] == '-') ? "-" : "+";  xpos=Integer.parseInt(new String(bytes,1,i - 1));  ++i;  ypos=Integer.parseInt(new String(bytes,i,bytes.length - i));}  }
class C{  public void loadSourceCode(){  if (getResourceName() != null) {    String filename=getResourceName() + ".java";    sourceCode=new String("<html><body bgcolor=\"#ffffff\"><pre>");    InputStream is;    InputStreamReader isr;    CodeViewer cv=new CodeViewer();    URL url;    try {      url=getClass().getResource(filename);      is=url.openStream();      isr=new InputStreamReader(is,"UTF-8");      BufferedReader reader=new BufferedReader(isr);      String line=reader.readLine();      while (line != null) {        sourceCode+=cv.syntaxHighlight(line) + " \n ";        line=reader.readLine();      }      sourceCode+=new String("</pre></body></html>");    } catch (    Exception ex) {      sourceCode="Could not load file: " + filename;    }  }}  }
class C{  protected Result executeFunctionOnAllMembersTabulateResultPersist(final Function function,final boolean addXmlElement,final Object... args){  final Cache cache=CacheFactory.getAnyInstance();  final Set<DistributedMember> members=CliUtil.getAllNormalMembers(cache);  @SuppressWarnings("unchecked") final ResultCollector<CliFunctionResult,List<CliFunctionResult>> resultCollector=(ResultCollector<CliFunctionResult,List<CliFunctionResult>>)CliUtil.executeFunction(function,args,members);  final List<CliFunctionResult> functionResults=(List<CliFunctionResult>)resultCollector.getResult();  XmlEntity xmlEntity=null;  final TabularResultData tabularResultData=ResultBuilder.createTabularResultData();  final String errorPrefix="ERROR: ";  for (  CliFunctionResult functionResult : functionResults) {    boolean success=functionResult.isSuccessful();    tabularResultData.accumulate("Member",functionResult.getMemberIdOrName());    if (success) {      tabularResultData.accumulate("Status",functionResult.getMessage());      xmlEntity=functionResult.getXmlEntity();    } else {      tabularResultData.accumulate("Status",errorPrefix + functionResult.getMessage());      tabularResultData.setStatus(Status.ERROR);    }  }  final Result result=ResultBuilder.buildResult(tabularResultData);  System.out.println("MockExtensionCommands: persisting xmlEntity=" + xmlEntity);  if (null != xmlEntity) {    if (addXmlElement) {      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,null));    } else {      result.setCommandPersisted((new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity,null));    }  }  return result;}  }
class C{  public static int compute4(int x){  return x * 134775813 + 1;}  }
class C{  public static ErCategory fromCategory(Category category){  if (category == null) {    return null;  }  ErCategory erCategory=new ErCategory();  erCategory.setName(category.getName());  erCategory.setLevel(ErLevel.fromLevel(category.getLevel()));  return erCategory;}  }
class C{  public static LuaTable bindMethods(Class<? extends LibFunction> factory,List<Method> methods){  LuaTable env=new LuaTable();  try {    if (methods != null) {      for (int i=0; i < methods.size(); i++) {        LibFunction f=factory.newInstance();        f.opcode=-1;        f.method=methods.get(i);        f.name=methods.get(i).getName();        env.set(f.name,f);      }    }  } catch (  Exception e) {    throw new LuaError("[Bind Failed] " + e);  } finally {    return env;  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 == z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress((int)progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 == constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 == constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  RegisterOperand destOperand(){  return _destOperand;}  }
class C{  private static void readDoubleBased(Scanner scanner,int width,int height,DoubleGrid2D doubleGrid2D) throws IOException {  double currentDouble;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      currentDouble=scanner.nextDouble();      doubleGrid2D.set(x,y,currentDouble);    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"mul");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a mul instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);  instructions.addAll(firstResult.getInstructions());  offset=baseOffset + instructions.size();  final String operand1=firstResult.getRegister();  final String operand2="eax";  final OperandSize size1=firstResult.getSize();  final OperandSize size2=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(size2);  final String result=environment.getNextVariableString();  final String upperHalf=environment.getNextVariableString();  final String upperHalfZero=environment.getNextVariableString();  final String maskUpper=String.valueOf(TranslationHelpers.getAllButMask(resultSize,size1));  instructions.add(ReilHelpers.createMul(offset,size1,operand1,size2,operand2,resultSize,result));  instructions.add(ReilHelpers.createAnd(offset + 1,resultSize,result,resultSize,maskUpper,resultSize,upperHalf));  instructions.add(ReilHelpers.createBisz(offset + 2,resultSize,upperHalf,OperandSize.BYTE,upperHalfZero));  instructions.add(ReilHelpers.createBisz(offset + 3,resultSize,upperHalfZero,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBisz(offset + 4,resultSize,upperHalfZero,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createUndef(offset + 5,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createUndef(offset + 6,OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createUndef(offset + 7,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  instructions.add(ReilHelpers.createUndef(offset + 8,OperandSize.BYTE,Helpers.PARITY_FLAG));  instructions.addAll(Helpers.writeMulResult(environment,offset + 9,result,size1));}  }
class C{  @OnClose public void onClose(final Session session,final CloseReason closeReason){  removeSession(session);}  }
class C{  public MapTile(final MapArea mapArea,final int zoom,final long i,final long j){  int ig=createcnt.incrementAndGet();  if (debug)   System.out.println("Create tile #" + ig);  this.mapArea=mapArea;  this.myZoom=zoom;  this.i=i;  this.j=j;  scale.setPivotX(0);  scale.setPivotY(0);  getTransforms().add(scale);  ImageView iv=new ImageView(temporaryImage);  if (debug)   debugLabel.setText("[" + zoom + "-"+ i+ "-"+ j+ "]");  getChildren().addAll(iv,debugLabel);  imageWorker=mapArea.tileTypeProperty().get().getImage(zoom,i,j);  loading.bind(imageWorker.progressProperty().lessThan(1.));  imageWorker.stateProperty().addListener(null);  parentTile=mapArea.findCovering(zoom,i,j);  if (parentTile != null) {    if (debug)     System.out.println("[JVDBG] ASK " + parentTile + " to cover for "+ this);    parentTile.addCovering(this);  }  iwpl=createImageWorkerProgressListener();  imageWorker.progressProperty().addListener(new WeakInvalidationListener(iwpl));  if (imageWorker.getProgress() >= 1) {    if (debug)     System.out.println("[JVDBG] ASK " + parentTile + " to NOWFORGET for "+ this);    if (parentTile != null) {      parentTile.removeCovering(this);    }  }  zl=recalculate();  mapArea.zoomProperty().addListener(new WeakInvalidationListener(zl));  mapArea.translateXProperty().addListener(new WeakInvalidationListener(zl));  mapArea.translateYProperty().addListener(new WeakInvalidationListener(zl));  calculatePosition();}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,byte[] value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  public ClientConnection reset(){  selector.reset();  return this;}  }
class C{  MyRectangle2D(double x,double y,double width,double height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  public boolean defVisible(Edge edge){  if (containsEdge(edge)) {    Node A=Edges.getDirectedEdgeTail(edge);    Node B=Edges.getDirectedEdgeHead(edge);    List<Node> adjToA=getAdjacentNodes(A);    while (!adjToA.isEmpty()) {      Node Curr=adjToA.remove(0);      if (!((getAdjacentNodes(Curr)).contains(B)) && ((getEdge(Curr,A)).getProximalEndpoint(A) == Endpoint.ARROW)) {        return true;      }    }    return false;  } else {    throw new IllegalArgumentException("Given edge is not in the graph.");  }}  }
class C{  @Nullable private static Help findHelp(@NotNull final PsiElement element){  if (!(element instanceof CommandLinePart)) {    return null;  }  final CommandLinePart commandLinePart=(CommandLinePart)element;  final Command realCommand=commandLinePart.findRealCommand();  if (realCommand == null) {    return null;  }  final CommandLineElement commandLineElement=PyUtil.as(element,CommandLineElement.class);  if (commandLineElement == null) {    return null;  }  final MyCommandHelpObtainer helpObtainer=new MyCommandHelpObtainer();  commandLineElement.accept(helpObtainer);  return helpObtainer.myResultHelp;}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  int n=xData.getCount();  if (pointsOnly) {    setMarkStyle(Plot.CIRCLE_MARK,3,new BasicStroke(0.5F),new Color(44,44,44),new Color(249,202,105));    Rectangle2D bounds=mark.getBounds2D();    float w=(float)bounds.getWidth();    float h=(float)bounds.getHeight();    for (int i=0; i < n; i++) {      float x=(float)transformX(((Number)xData.get(i)).doubleValue());      float y=(float)transformY(((Number)yData.get(i)).doubleValue());      x=x - (w / 2);      y=y - (h / 2);      g2.translate(x,y);      if (markFillPaint != null) {        g2.setPaint(markFillPaint);        g2.fill(mark);      }      g2.setPaint(markPaint);      g2.setStroke(markStroke);      g2.draw(mark);      g2.translate(-x,-y);    }  } else {    float x=(float)transformX(((Number)xData.get(0)).doubleValue());    float y=(float)transformY(((Number)yData.get(0)).doubleValue());    GeneralPath path=new GeneralPath();    path.moveTo(x,y);    for (int i=1; i < n; i++) {      x=(float)transformX(((Number)xData.get(i)).doubleValue());      y=(float)transformY(((Number)yData.get(i)).doubleValue());      path.lineTo(x,y);    }    if (solid) {      path.closePath();      Paint fillPaint=new Color(((Color)linePaint).getRed(),((Color)linePaint).getGreen(),((Color)linePaint).getBlue(),32);      g2.setPaint(fillPaint);      g2.fill(path);    }    g2.setStroke(lineStroke);    g2.setPaint(linePaint);    g2.draw(path);  }}  }
class C{  public static Flag registerExcludeMatedFlag(final CFlags flags){  return flags.registerOptional(EXCLUDE_MATED_FLAG,EXCLUDE_MATED_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public static void w(String msg,Throwable throwable){  if (!allowW)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public Integer nextElement(){  return table[current_index++];}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void reverseAuthorizations(final String orderNum){  super.reverseAuthorizations(orderNum);}  }
class C{  void notifyNetworkStateChange(NetworkInfo.DetailedState newState,String BSSID,int netId){  if (newState == NetworkInfo.DetailedState.CONNECTED) {    Message m=mStateMachine.obtainMessage(NETWORK_CONNECTION_EVENT,netId,0,BSSID);    mStateMachine.sendMessage(m);  } else {    Message m=mStateMachine.obtainMessage(NETWORK_DISCONNECTION_EVENT,netId,0,BSSID);    mStateMachine.sendMessage(m);  }}  }
class C{  UnwrapAction(ModeUsage modeUsage){  super(modeUsage);}  }
class C{  private final void processServerResponse(int code,String response){  if (code == RPL_LIST) {    int firstSpace=response.indexOf(' ');    int secondSpace=response.indexOf(' ',firstSpace + 1);    int thirdSpace=response.indexOf(' ',secondSpace + 1);    int colon=response.indexOf(':');    String channel=response.substring(firstSpace + 1,secondSpace);    int userCount=0;    try {      userCount=Integer.parseInt(response.substring(secondSpace + 1,thirdSpace));    } catch (    NumberFormatException e) {    }    String topic=response.substring(colon + 1);    this.onChannelInfo(channel,userCount,topic);  } else   if (code == RPL_TOPIC) {    int firstSpace=response.indexOf(' ');    int secondSpace=response.indexOf(' ',firstSpace + 1);    int colon=response.indexOf(':');    String channel=response.substring(firstSpace + 1,secondSpace);    String topic=response.substring(colon + 1);    _topics.put(channel,topic);    this.onTopic(channel,topic);  } else   if (code == RPL_TOPICINFO) {    StringTokenizer tokenizer=new StringTokenizer(response);    tokenizer.nextToken();    String channel=tokenizer.nextToken();    String setBy=tokenizer.nextToken();    long date=0;    try {      date=Long.parseLong(tokenizer.nextToken()) * 1000;    } catch (    NumberFormatException e) {    }    String topic=_topics.get(channel);    _topics.remove(channel);    this.onTopic(channel,topic,setBy,date,false);  } else   if (code == RPL_NAMREPLY) {    int channelEndIndex=response.indexOf(" :");    String channel=response.substring(response.lastIndexOf(' ',channelEndIndex - 1) + 1,channelEndIndex);    StringTokenizer tokenizer=new StringTokenizer(response.substring(response.indexOf(" :") + 2));    while (tokenizer.hasMoreTokens()) {      String nick=tokenizer.nextToken();      String prefix="";      if (nick.startsWith("@")) {        prefix="@";      } else       if (nick.startsWith("+")) {        prefix="+";      } else       if (nick.startsWith(".")) {        prefix=".";      } else       if (nick.startsWith("%")) {        prefix="%";      }      nick=nick.substring(prefix.length());      this.addUser(channel,new User(prefix,nick));    }  } else   if (code == RPL_ENDOFNAMES) {    String channel=response.substring(response.indexOf(' ') + 1,response.indexOf(" :"));    User[] users=this.getUsers(channel);    this.onUserList(channel,users);  }  this.onServerResponse(code,response);}  }
class C{  public Instruction disassemble_bytecode(byte bc[],int index){  byte b=bc[index];  boolean isWide=false;  Instruction i;  int x;  x=(b) & 0xff;switch (x) {case BIPUSH:    i=new Instruction_Bipush();  break;case SIPUSH:i=new Instruction_Sipush();break;case LDC1:i=new Instruction_Ldc1();break;case LDC2:i=new Instruction_Ldc2();break;case LDC2W:i=new Instruction_Ldc2w();break;case ACONST_NULL:i=new Instruction_Aconst_null();break;case ICONST_M1:i=new Instruction_Iconst_m1();break;case ICONST_0:i=new Instruction_Iconst_0();break;case ICONST_1:i=new Instruction_Iconst_1();break;case ICONST_2:i=new Instruction_Iconst_2();break;case ICONST_3:i=new Instruction_Iconst_3();break;case ICONST_4:i=new Instruction_Iconst_4();break;case ICONST_5:i=new Instruction_Iconst_5();break;case LCONST_0:i=new Instruction_Lconst_0();break;case LCONST_1:i=new Instruction_Lconst_1();break;case FCONST_0:i=new Instruction_Fconst_0();break;case FCONST_1:i=new Instruction_Fconst_1();break;case FCONST_2:i=new Instruction_Fconst_2();break;case DCONST_0:i=new Instruction_Dconst_0();break;case DCONST_1:i=new Instruction_Dconst_1();break;case ILOAD:i=new Instruction_Iload();break;case ILOAD_0:i=new Instruction_Iload_0();break;case ILOAD_1:i=new Instruction_Iload_1();break;case ILOAD_2:i=new Instruction_Iload_2();break;case ILOAD_3:i=new Instruction_Iload_3();break;case LLOAD:i=new Instruction_Lload();break;case LLOAD_0:i=new Instruction_Lload_0();break;case LLOAD_1:i=new Instruction_Lload_1();break;case LLOAD_2:i=new Instruction_Lload_2();break;case LLOAD_3:i=new Instruction_Lload_3();break;case FLOAD:i=new Instruction_Fload();break;case FLOAD_0:i=new Instruction_Fload_0();break;case FLOAD_1:i=new Instruction_Fload_1();break;case FLOAD_2:i=new Instruction_Fload_2();break;case FLOAD_3:i=new Instruction_Fload_3();break;case DLOAD:i=new Instruction_Dload();break;case DLOAD_0:i=new Instruction_Dload_0();break;case DLOAD_1:i=new Instruction_Dload_1();break;case DLOAD_2:i=new Instruction_Dload_2();break;case DLOAD_3:i=new Instruction_Dload_3();break;case ALOAD:i=new Instruction_Aload();break;case ALOAD_0:i=new Instruction_Aload_0();break;case ALOAD_1:i=new Instruction_Aload_1();break;case ALOAD_2:i=new Instruction_Aload_2();break;case ALOAD_3:i=new Instruction_Aload_3();break;case ISTORE:i=new Instruction_Istore();break;case ISTORE_0:i=new Instruction_Istore_0();break;case ISTORE_1:i=new Instruction_Istore_1();break;case ISTORE_2:i=new Instruction_Istore_2();break;case ISTORE_3:i=new Instruction_Istore_3();break;case LSTORE:i=new Instruction_Lstore();break;case LSTORE_0:i=new Instruction_Lstore_0();break;case LSTORE_1:i=new Instruction_Lstore_1();break;case LSTORE_2:i=new Instruction_Lstore_2();break;case LSTORE_3:i=new Instruction_Lstore_3();break;case FSTORE:i=new Instruction_Fstore();break;case FSTORE_0:i=new Instruction_Fstore_0();break;case FSTORE_1:i=new Instruction_Fstore_1();break;case FSTORE_2:i=new Instruction_Fstore_2();break;case FSTORE_3:i=new Instruction_Fstore_3();break;case DSTORE:i=new Instruction_Dstore();break;case DSTORE_0:i=new Instruction_Dstore_0();break;case DSTORE_1:i=new Instruction_Dstore_1();break;case DSTORE_2:i=new Instruction_Dstore_2();break;case DSTORE_3:i=new Instruction_Dstore_3();break;case ASTORE:i=new Instruction_Astore();break;case ASTORE_0:i=new Instruction_Astore_0();break;case ASTORE_1:i=new Instruction_Astore_1();break;case ASTORE_2:i=new Instruction_Astore_2();break;case ASTORE_3:i=new Instruction_Astore_3();break;case IINC:i=new Instruction_Iinc();break;case WIDE:{int nextIndex=(bc[index + 1]) & 0xff;switch (nextIndex) {case ILOAD:i=new Instruction_Iload();break;case FLOAD:i=new Instruction_Fload();break;case ALOAD:i=new Instruction_Aload();break;case LLOAD:i=new Instruction_Lload();break;case DLOAD:i=new Instruction_Dload();break;case ISTORE:i=new Instruction_Istore();break;case FSTORE:i=new Instruction_Fstore();break;case ASTORE:i=new Instruction_Astore();break;case LSTORE:i=new Instruction_Lstore();break;case DSTORE:i=new Instruction_Dstore();break;case RET:i=new Instruction_Ret();break;case IINC:i=new Instruction_Iinc();break;default :throw new RuntimeException("invalid wide instruction: " + nextIndex);}((Instruction_bytevar)i).isWide=true;isWide=true;}break;case NEWARRAY:i=new Instruction_Newarray();break;case ANEWARRAY:i=new Instruction_Anewarray();break;case MULTIANEWARRAY:i=new Instruction_Multianewarray();break;case ARRAYLENGTH:i=new Instruction_Arraylength();break;case IALOAD:i=new Instruction_Iaload();break;case LALOAD:i=new Instruction_Laload();break;case FALOAD:i=new Instruction_Faload();break;case DALOAD:i=new Instruction_Daload();break;case AALOAD:i=new Instruction_Aaload();break;case BALOAD:i=new Instruction_Baload();break;case CALOAD:i=new Instruction_Caload();break;case SALOAD:i=new Instruction_Saload();break;case IASTORE:i=new Instruction_Iastore();break;case LASTORE:i=new Instruction_Lastore();break;case FASTORE:i=new Instruction_Fastore();break;case DASTORE:i=new Instruction_Dastore();break;case AASTORE:i=new Instruction_Aastore();break;case BASTORE:i=new Instruction_Bastore();break;case CASTORE:i=new Instruction_Castore();break;case SASTORE:i=new Instruction_Sastore();break;case NOP:i=new Instruction_Nop();break;case POP:i=new Instruction_Pop();break;case POP2:i=new Instruction_Pop2();break;case DUP:i=new Instruction_Dup();break;case DUP2:i=new Instruction_Dup2();break;case DUP_X1:i=new Instruction_Dup_x1();break;case DUP_X2:i=new Instruction_Dup_x2();break;case DUP2_X1:i=new Instruction_Dup2_x1();break;case DUP2_X2:i=new Instruction_Dup2_x2();break;case SWAP:i=new Instruction_Swap();break;case IADD:i=new Instruction_Iadd();break;case LADD:i=new Instruction_Ladd();break;case FADD:i=new Instruction_Fadd();break;case DADD:i=new Instruction_Dadd();break;case ISUB:i=new Instruction_Isub();break;case LSUB:i=new Instruction_Lsub();break;case FSUB:i=new Instruction_Fsub();break;case DSUB:i=new Instruction_Dsub();break;case IMUL:i=new Instruction_Imul();break;case LMUL:i=new Instruction_Lmul();break;case FMUL:i=new Instruction_Fmul();break;case DMUL:i=new Instruction_Dmul();break;case IDIV:i=new Instruction_Idiv();break;case LDIV:i=new Instruction_Ldiv();break;case FDIV:i=new Instruction_Fdiv();break;case DDIV:i=new Instruction_Ddiv();break;case IREM:i=new Instruction_Irem();break;case LREM:i=new Instruction_Lrem();break;case FREM:i=new Instruction_Frem();break;case DREM:i=new Instruction_Drem();break;case INEG:i=new Instruction_Ineg();break;case LNEG:i=new Instruction_Lneg();break;case FNEG:i=new Instruction_Fneg();break;case DNEG:i=new Instruction_Dneg();break;case ISHL:i=new Instruction_Ishl();break;case ISHR:i=new Instruction_Ishr();break;case IUSHR:i=new Instruction_Iushr();break;case LSHL:i=new Instruction_Lshl();break;case LSHR:i=new Instruction_Lshr();break;case LUSHR:i=new Instruction_Lushr();break;case IAND:i=new Instruction_Iand();break;case LAND:i=new Instruction_Land();break;case IOR:i=new Instruction_Ior();break;case LOR:i=new Instruction_Lor();break;case IXOR:i=new Instruction_Ixor();break;case LXOR:i=new Instruction_Lxor();break;case I2L:i=new Instruction_I2l();break;case I2F:i=new Instruction_I2f();break;case I2D:i=new Instruction_I2d();break;case L2I:i=new Instruction_L2i();break;case L2F:i=new Instruction_L2f();break;case L2D:i=new Instruction_L2d();break;case F2I:i=new Instruction_F2i();break;case F2L:i=new Instruction_F2l();break;case F2D:i=new Instruction_F2d();break;case D2I:i=new Instruction_D2i();break;case D2L:i=new Instruction_D2l();break;case D2F:i=new Instruction_D2f();break;case INT2BYTE:i=new Instruction_Int2byte();break;case INT2CHAR:i=new Instruction_Int2char();break;case INT2SHORT:i=new Instruction_Int2short();break;case IFEQ:i=new Instruction_Ifeq();break;case IFNULL:i=new Instruction_Ifnull();break;case IFLT:i=new Instruction_Iflt();break;case IFLE:i=new Instruction_Ifle();break;case IFNE:i=new Instruction_Ifne();break;case IFNONNULL:i=new Instruction_Ifnonnull();break;case IFGT:i=new Instruction_Ifgt();break;case IFGE:i=new Instruction_Ifge();break;case IF_ICMPEQ:i=new Instruction_If_icmpeq();break;case IF_ICMPLT:i=new Instruction_If_icmplt();break;case IF_ICMPLE:i=new Instruction_If_icmple();break;case IF_ICMPNE:i=new Instruction_If_icmpne();break;case IF_ICMPGT:i=new Instruction_If_icmpgt();break;case IF_ICMPGE:i=new Instruction_If_icmpge();break;case LCMP:i=new Instruction_Lcmp();break;case FCMPL:i=new Instruction_Fcmpl();break;case FCMPG:i=new Instruction_Fcmpg();break;case DCMPL:i=new Instruction_Dcmpl();break;case DCMPG:i=new Instruction_Dcmpg();break;case IF_ACMPEQ:i=new Instruction_If_acmpeq();break;case IF_ACMPNE:i=new Instruction_If_acmpne();break;case GOTO:i=new Instruction_Goto();break;case GOTO_W:i=new Instruction_Goto_w();break;case JSR:i=new Instruction_Jsr();break;case JSR_W:i=new Instruction_Jsr_w();break;case RET:i=new Instruction_Ret();break;case RET_W:i=new Instruction_Ret_w();break;case RETURN:i=new Instruction_Return();break;case IRETURN:i=new Instruction_Ireturn();break;case LRETURN:i=new Instruction_Lreturn();break;case FRETURN:i=new Instruction_Freturn();break;case DRETURN:i=new Instruction_Dreturn();break;case ARETURN:i=new Instruction_Areturn();break;case BREAKPOINT:i=new Instruction_Breakpoint();break;case TABLESWITCH:i=(Instruction)new Instruction_Tableswitch();break;case LOOKUPSWITCH:i=(Instruction)new Instruction_Lookupswitch();break;case PUTFIELD:i=(Instruction)new Instruction_Putfield();break;case GETFIELD:i=(Instruction)new Instruction_Getfield();break;case PUTSTATIC:i=(Instruction)new Instruction_Putstatic();break;case GETSTATIC:i=(Instruction)new Instruction_Getstatic();break;case INVOKEVIRTUAL:i=(Instruction)new Instruction_Invokevirtual();break;case INVOKENONVIRTUAL:i=(Instruction)new Instruction_Invokenonvirtual();break;case INVOKESTATIC:i=(Instruction)new Instruction_Invokestatic();break;case INVOKEINTERFACE:i=(Instruction)new Instruction_Invokeinterface();break;case INVOKEDYNAMIC:i=(Instruction)new Instruction_Invokedynamic();break;case ATHROW:i=(Instruction)new Instruction_Athrow();break;case NEW:i=(Instruction)new Instruction_New();break;case CHECKCAST:i=(Instruction)new Instruction_Checkcast();break;case INSTANCEOF:i=(Instruction)new Instruction_Instanceof();break;case MONITORENTER:i=(Instruction)new Instruction_Monitorenter();break;case MONITOREXIT:i=(Instruction)new Instruction_Monitorexit();break;default :i=(Instruction)new Instruction_Unknown(b);break;}i.label=index;if (isWide) i.parse(bc,index + 2); else i.parse(bc,index + 1);return i;}  }
class C{  @Nullable public ListenableFuture<PaymentProtocol.Ack> sendPayment(List<Transaction> txns,@Nullable Address refundAddr,@Nullable String memo) throws PaymentProtocolException, VerificationException, IOException {  Protos.Payment payment=getPayment(txns,refundAddr,memo);  if (payment == null)   return null;  if (isExpired())   throw new PaymentProtocolException.Expired("PaymentRequest is expired");  URL url;  try {    url=new URL(paymentDetails.getPaymentUrl());  } catch (  MalformedURLException e) {    throw new PaymentProtocolException.InvalidPaymentURL(e);  }  return sendPayment(url,payment);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public static boolean isRtcpPacket(DatagramPacket p){  int len=p.getLength();  if (len >= 4) {    byte[] data=p.getData();    int off=p.getOffset();    if (((data[off] & 0xc0) >> 6) == 2) {      int pt=data[off + 1] & 0xff;      return (200 <= pt && pt <= 211);    }  }  return false;}  }
class C{  public void forEachVMInvoke(String methodName,Object[] args){  forEachVMInvoke(getClass(),methodName,args);}  }
class C{  private void assertByteStringLength(int len) throws EncodingException {  int maxLen=ctx.getMaxByteStringLength();  if (maxLen > 0 && len > maxLen) {    final EncodingException encodingException=new EncodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxByteStringLength " + maxLen + " < "+ len);    logger.warn("assertByteStringLength: failed",encodingException);    throw encodingException;  }}  }
class C{  public OrganizationAlreadyBannedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private boolean resolve(Context cx){  if (resolved)   return true;  if (this.indexed_type != null) {    ParameterizedName pname=name instanceof ParameterizedName ? (ParameterizedName)name : null;    if (pname != null) {      instantiateParameterizedType(cx,pname);      assert resolved;    }  }  return resolved;}  }
class C{  public InvalidConfigurationException(final String msg,final Throwable cause){  super(msg,cause);}  }
class C{  @Nullable public <T extends LocalQuickFix>T findQuickFixByClassInIntentions(@NotNull final Class<T> clazz){  for (  final IntentionAction action : myFixture.getAvailableIntentions()) {    if ((action instanceof QuickFixWrapper)) {      final QuickFixWrapper quickFixWrapper=(QuickFixWrapper)action;      final LocalQuickFix fix=quickFixWrapper.getFix();      if (clazz.isInstance(fix)) {        @SuppressWarnings("unchecked") final T result=(T)fix;        return result;      }    }  }  return null;}  }
class C{  public AbstractAreaRenderer(){  gap=0.0;  gapRounded=false;  color=Color.GRAY;}  }
class C{  public SaveToDatabaseThread(final INaviModule module){  m_module=module;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SafeVarargs static <E>Set<E> newSet(E... elements){  HashSet<E> set=new HashSet<>();  for (  E e : elements) {    set.add(e);  }  return set;}  }
class C{  public static void clear(String throttlingPointName){  setThrottlingPointRates(throttlingPointName,Collections.EMPTY_MAP);}  }
class C{  public String delete() throws DeletionConstraintException {  if (logger.isDebugLoggingEnabled()) {  }  try {    getAccountingService().deregisterOrganization();  } catch (  TechnicalServiceNotAliveException|TechnicalServiceOperationException e) {    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_ORGANIZATION_DELETION_FAILED);    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_DELETE_USER_FROM_EXPIRED_SUBSCRIPTION);    return "";  }  if (logger.isDebugLoggingEnabled()) {  }  return OUTCOME_LOGIN;}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(AssetsInstallationErrorEvent event){  Log.d("CHCP","Can't install assets on device. Continue to work with default bundle");  PluginResult result=PluginResultHelper.pluginResultFromEvent(event);  sendMessageToDefaultCallback(result);}  }
class C{  public void requestFocusOnEditText(){  mEditText.requestFocus();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  protected void addException(Element element,SAXParseException e){  element.addAttribute("column",Integer.toString(e.getColumnNumber()));  element.addAttribute("line",Integer.toString(e.getLineNumber()));  String publicID=e.getPublicId();  if ((publicID != null) && (publicID.length() > 0)) {    element.addAttribute("publicID",publicID);  }  String systemID=e.getSystemId();  if ((systemID != null) && (systemID.length() > 0)) {    element.addAttribute("systemID",systemID);  }  element.addText(e.getMessage());}  }
class C{  public boolean hasMetrics(){  return hasMetrics;}  }
class C{  public static void eachFileRecurse(File self,@ClosureParams(value=SimpleType.class,options="java.io.File") Closure closure) throws FileNotFoundException, IllegalArgumentException {  eachFileRecurse(self,FileType.ANY,closure);}  }
class C{  public DateTime withEarlierOffsetAtOverlap(){  long newMillis=getZone().adjustOffset(getMillis(),false);  return withMillis(newMillis);}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  static String maybeFormatHostname(String hostname,boolean preferUnicode){  return preferUnicode ? Idn.toUnicode(hostname) : hostname;}  }
class C{  public void clearUnknownParameters(){  this.unknownParameterInformation.clear();}  }
class C{  private static int calcTimeIndex(int fmt,int freq,int time_ms){  int rv=frameSize(fmt) * ((time_ms * freq) / 1000);  log.debug("calcTimeIndex: freq = " + freq + " time_us = "+ time_ms+ " rv = "+ rv);  return rv;}  }
class C{  private List<SimpleItem> generateUnsortedList(){  ArrayList<SimpleItem> result=new ArrayList<>(26);  for (int i=0; i < 26; i++) {    result.add(makeItem(i));  }  Collections.shuffle(result);  return result;}  }
class C{  public static synchronized void printAllMessages(){  System.out.println("---- Begin all messages");  String[] msgs=getAllMessages();  for (int i=0; i < msgs.length; i++) {    System.out.println("Msg " + i + ":");    System.out.println(msgs[i]);  }  System.out.println("---- End all messages");}  }
class C{  public void createUser(String username,String password,String plugin) throws SQLException {  StringBuilder createUserSql=new StringBuilder("CREATE USER ").append(username).append(" PASSWORD ").append('\'').append(password).append('\'');  if (plugin != null) {    createUserSql.append(" USING PLUGIN ").append(plugin);  }  try (Connection connection=getConnectionViaDriverManager();Statement statement=connection.createStatement()){    statement.execute(createUserSql.toString());  }   createdUsers.add(new User(username,plugin));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null)   return pluggy.getDemoVideoURLs();  return null;}  }
class C{  private void addApplicationName(StringBuffer arguments){  arguments.append("'-appname','");  arguments.append(deployable.getName());  arguments.append("'");}  }
class C{  private void appendPayload(String title,String message,byte iconType,byte[] iconData){  appendPayload(title);  appendPayload(message);  appendPayload(iconType);  appendPayload(0);  if (iconData != null)   appendPayload(iconData);}  }
class C{  public List<Derivation<TK,FV>> decode(int size,boolean distinct,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){  if (isIncompleteLattice)   return Collections.emptyList();  List<Derivation<TK,FV>> returnList=new ArrayList<>(size);  for (int i=0, sz=markedNodes.size(); i < sz; ++i) {    Derivation<TK,FV> node=markedNodes.get(i);    Derivation<TK,FV> finalDerivation=constructDerivation(node,sourceInputId,featurizer,scorer,heuristic,outputSpace);    returnList.add(finalDerivation);  }  returnList=returnList.stream().sorted().limit(size).collect(Collectors.toList());  if (distinct) {    IntSet uniqSet=new IntOpenHashSet(markedNodes.size());    List<Derivation<TK,FV>> uniqList=new ArrayList<>(returnList.size());    for (    Derivation<TK,FV> d : returnList) {      int hashCode=d.targetSequence.hashCode();      if (!uniqSet.contains(hashCode)) {        uniqSet.add(hashCode);        uniqList.add(d);      }    }    returnList=uniqList;  }  return returnList;}  }
class C{  public System(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("system");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public static void registerCommands(FMLServerStartingEvent event){  event.registerServerCommand(new CommandTestMod3());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:30.678 -0500",hash_original_method="9245ED01B44F4BC6EDE26C84298E681C",hash_generated_method="E8C3546FD55A7FDD98EBEFFA18A3BDEF") public NetworkStats withoutUid(int uid){  final NetworkStats stats=new NetworkStats(elapsedRealtime,10);  Entry entry=new Entry();  for (int i=0; i < size; i++) {    entry=getValues(i,entry);    if (entry.uid != uid) {      stats.addValues(entry);    }  }  return stats;}  }
class C{  public TwoDNode construct(IPoint value){  return new HorizontalNode(value);}  }
class C{  public void onSnackbarDismissed(Snackbar snackbar){}  }
class C{  public int jumpToIndex(FormIndex index){  return mFormEntryController.jumpToIndex(index);}  }
class C{  public void fireGroupAdded(final Group added){  for (  GroupListener listener : groupListeners) {    listener.groupAdded(new NetworkEvent<Group>(this,added));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node parentNode;  String parentName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  parentNode=employeeNode.getParentNode();  parentName=parentNode.getNodeName();  assertEqualsAutoCase("element","parentNodeName","body",parentName);}  }
class C{  public ParameterMap add(String name,String value){  map.put(name,value);  return this;}  }
class C{  @SuppressWarnings("unchecked") public List seqLabeling(File file){  List<Sentence> obsvSeqs=dataReader.readFile(file.getPath());  return labeling(obsvSeqs);}  }
class C{  private void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  public static boolean isSorted(char[] array){  if (array == null || array.length < 2) {    return true;  }  char previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final char current=array[i];    if (CharUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public void updateNClob(int columnIndex,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public NecronomiconPotionRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,Object potion,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,potion,offerings);}  }
class C{  protected void deleteShell(String shellId) throws WinRMException {  newDeleteShell(shellId).execute();}  }
class C{  private void ensureSerializable(){  if (status == null) {    status=new Status(0,0,"");    return;  }  if (status.getReport() == null)   status.setReport("");}  }
class C{  private int marginTopCenter(int height,int totalHeight){  return new Double(Math.floor((totalHeight - height) / 2.0)).intValue();}  }
class C{  public static String quote(String s){  s=s.replaceAll("\"","\\\\\"");  return '"' + s + '"';}  }
class C{  public ExponentialSawtoothModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter wavelengthParameter,Parameter offsetParameter,Type units){  super(name);  expSaw=new ExponentialSawtooth(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,-Double.MAX_VALUE,1));  this.wavelengthParameter=wavelengthParameter;  addVariable(wavelengthParameter);  wavelengthParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  this.offsetParameter=offsetParameter;  addVariable(offsetParameter);  offsetParameter.addBounds(new Parameter.DefaultBounds(1.0,-1.0,1));  setUnits(units);}  }
class C{  public MonitoringCreateTargetQueries(ICreateTargetQueries delegate,CreateTargetExecutionLog log){  fDelegate=delegate;  fLog=log;}  }
class C{  public static void init(){  options=new OptOptions();  optimizationPlan=OptimizationPlanner.createOptimizationPlan(options);  options.ESCAPE_INVOKEE_THREAD_LOCAL=true;}  }
class C{  public void addNeuron(Neuron neuron){  addNeuron(neuron,true);}  }
class C{  public ChangeMessageVisibilityBatchResult changeMessageVisibilityBatch(String queueUrl,List<ChangeMessageVisibilityBatchRequestEntry> entries) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.changeMessageVisibilityBatch(queueUrl,entries);}  }
class C{  public static void checkState(final boolean expression,@NonNull String errorMessage){  if (!expression) {    throw new IllegalStateException(errorMessage);  }}  }
class C{  public CRLExtensions(DerInputStream in) throws CRLException {  init(in);}  }
class C{  public void addZone(String id,Component zone,String constraints){  Component previousZone=getZone(id);  if (previousZone != null) {    remove(previousZone);    idToZones.remove(id);  }  if (zone instanceof JComponent) {    JComponent jc=(JComponent)zone;    if (jc.getBorder() == null || jc.getBorder() instanceof UIResource) {      if (jc instanceof JLabel) {        jc.setBorder(new CompoundBorder(zoneBorder,new EmptyBorder(0,2,0,2)));        ((JLabel)jc).setText(" ");      } else {        jc.setBorder(zoneBorder);      }    }  }  add(zone,constraints);  idToZones.put(id,zone);}  }
class C{  public static double hypot(double x,double y){  return StrictMath.hypot(x,y);}  }
class C{  public void updateButtonActionPerformed(){  nodeType=nodeTypeBox.getSelectedIndex();  log.debug("update performed: was " + curNode.getNodeType() + " request "+ nodeType);  if (curNode.getNodeType() != nodeType) {    curNode.setNodeType(nodeType);  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public void build(Context context){  final String vertexShader=getVertexShader(context);  final String fragmentShader=getFragmentShader(context);  final int vertexShaderHandle=compileShader(GLES20.GL_VERTEX_SHADER,vertexShader);  final int fragmentShaderHandle=compileShader(GLES20.GL_FRAGMENT_SHADER,fragmentShader);  mProgramHandle=createAndLinkProgram(vertexShaderHandle,fragmentShaderHandle,new String[]{"a_Position","a_TexCoordinate"});  mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_MVPMatrix");  mMVMatrixHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_MVMatrix");  mTextureUniformHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_Texture");  mPositionHandle=GLES20.glGetAttribLocation(mProgramHandle,"a_Position");  mTextureCoordinateHandle=GLES20.glGetAttribLocation(mProgramHandle,"a_TexCoordinate");}  }
class C{  public Object clone(){  try {    ZipEntry e=(ZipEntry)super.clone();    e.extra=(extra == null) ? null : extra.clone();    return e;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public boolean isIdle(){  return mWorkQueue.isEmpty() && (mPendingWorkers.get() == 0);}  }
class C{  static void applyBaseSocketSettings(Socket s) throws SocketException {  s.setTcpNoDelay(true);}  }
class C{  public ActionEvent(FacesContext facesContext,UIComponent component){  super(facesContext,component);}  }
class C{  public void testLMJelinekMercer() throws IOException {  float p=(1 - 0.1f) * FREQ / DOC_LEN + 0.1f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f);  float gold=(float)(Math.log(p / (0.1f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))));  correctnessTestCore(new LMJelinekMercerSimilarity(0.1f),gold);}  }
class C{  @PostConstruct public void afterPropertiesSet(){  this.vaadinSecurityContext.addAuthenticationSuccessHandler(redirectSaveHandler());}  }
class C{  private IgfsFixedLengthRecordResolver resolver(int len){  return new IgfsFixedLengthRecordResolver(len);}  }
class C{  @SuppressWarnings({"StatementWithEmptyBody"}) private boolean parseBranch(PsiBuilder builder){  PsiBuilder.Marker marker=builder.mark();  if (!parseAtom(builder)) {    final IElementType token=builder.getTokenType();    if (token == RegExpTT.GROUP_END || token == RegExpTT.UNION || token == null) {      marker.done(RegExpElementTypes.BRANCH);      return true;    }    marker.drop();    return false;  }  for (; parseAtom(builder); )   ;  marker.done(RegExpElementTypes.BRANCH);  return true;}  }
