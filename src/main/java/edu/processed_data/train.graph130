class C{  public ClientRemToken(){  this.uid=randomUUID();  this.random=randomUUID();}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  static void bilinearTimeIncrementHistogramCounters(final double[] samples,final int offset,final int numSamples,final long weight,final double[] splitPoints,final long[] counters){  assert (splitPoints.length + 1 == counters.length);  for (int i=0; i < numSamples; i++) {    final double sample=samples[i + offset];    int j=0;    for (j=0; j < splitPoints.length; j++) {      final double splitpoint=splitPoints[j];      if (sample < splitpoint) {        break;      }    }    assert j < counters.length;    counters[j]+=weight;  }}  }
class C{  public WmsLayerConfig(String serviceAddress,String wmsVersion,String layerNames,String styleNames,String coordinateSystem,boolean transparent,String timeString){  this.serviceAddress=serviceAddress;  this.wmsVersion=wmsVersion;  this.layerNames=layerNames;  this.styleNames=styleNames;  this.coordinateSystem=coordinateSystem;  this.transparent=transparent;  this.timeString=timeString;}  }
class C{  public double adjustedLog10(double val){  boolean negFlag=(val < 0.0);  if (negFlag) {    val=-val;  }  if (val < 10.0) {    val+=(10.0 - val) / 10.0;  }  double res=Math.log(val) / LOG10_VALUE;  return negFlag ? (-res) : res;}  }
class C{  public void init(){  this.encodedSize=0;  this.encodedSQLSize=0;}  }
class C{  private synchronized void removeMapEntry(String localId){  if (!isLocalId(localId)) {    throw new IllegalStateException("Tried to get invalid local id: \"" + localId + "\".");  }  File file=new File(diskPath,localId);  ParseFileUtils.deleteQuietly(file);}  }
class C{  public void removeAll(Principal caller) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  entryList.removeAllElements();}  }
class C{  public FileTextArea(FileWindow w){  this.w=w;  popup=new FilePopupMenu(this);  popup.addPopupMenuListener(this);  addMouseListener(this);  addKeyListener(this);  setFont(new Font("Monospaced",0,12));}  }
class C{  @SuppressWarnings("unchecked") public Object convert(Class type,Object value){  if (value == null) {    return null;  } else   if (type == Timestamp.class) {    return convertToDate(type,value,DateUtil.getDateTimePattern());  } else   if (type == Date.class) {    return convertToDate(type,value,DateUtil.getDatePattern());  } else   if (type == String.class) {    return convertToString(type,value);  }  throw new ConversionException("Could not convert " + value.getClass().getName() + " to "+ type.getName());}  }
class C{  @Override protected void createShapes(DrawContext dc){  this.paths=new Path[3];  Globe globe=dc.getGlobe();  Vec4 pt1=globe.computePointFromLocation(this.startPosition);  Vec4 pt2=globe.computePointFromLocation(this.endPosition);  Vec4[] controlPoints=this.computeBezierControlPoints(dc,pt1,pt2,this.getCurvature());  Line controlLine=Line.fromSegment(pt1,pt2);  int furthestPoint=0;  double maxDistance=-Double.MAX_VALUE;  List<Position> curvePositions=new ArrayList<Position>();  int[] coefficients=new int[controlPoints.length];  int intervals=this.getIntervals();  double delta=1.0 / intervals;  for (int i=0; i < intervals; i++) {    double t=i * delta;    Vec4 p=TacticalGraphicUtil.bezierCurve(controlPoints,t,coefficients);    Position pos=globe.computePositionFromPoint(p);    curvePositions.add(pos);    double dist=controlLine.distanceTo(p);    if (dist > maxDistance) {      furthestPoint=i;      maxDistance=dist;    }  }  curvePositions.add(this.endPosition);  this.labelPosition=curvePositions.get(furthestPoint);  if (furthestPoint != curvePositions.size() - 1) {    this.labelOrientationPosition=curvePositions.get(furthestPoint + 1);  } else {    this.labelOrientationPosition=curvePositions.get(furthestPoint - 1);  }  this.paths[0]=this.createPath(curvePositions);  Vec4 dir=pt1.subtract3(pt2);  double arrowheadLength=pt2.subtract3(pt1).getLength3() * this.getArrowLength();  List<Position> positions=this.computeArrowheadPositions(dc,pt2,dir,arrowheadLength);  this.paths[1]=this.createPath(positions);  pt2=pt2.subtract3(dir.normalize3().multiply3(arrowheadLength * DASHED_LINE_DISTANCE));  positions=this.computeArrowheadPositions(dc,pt2,dir,arrowheadLength * (1 + DASHED_LINE_DISTANCE));  this.paths[2]=this.createPath(positions);  this.paths[2].setAttributes(this.dashedAttributes);}  }
class C{  public static int familyOf(InetAddress address){  if (address instanceof Inet4Address)   return IPv4;  if (address instanceof Inet6Address)   return IPv6;  throw new IllegalArgumentException("unknown address family");}  }
class C{  public boolean isEmpty(){  if (table.isEmpty()) {    return true;  } else   return (table.size() == 1 && table.keySet().iterator().next().equals(ValueFactory.none()));}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.619 -0500",hash_original_method="FF43F4EB263E123805961D1A87217B48",hash_generated_method="F540E74265E8FD3B0104DB3691099F57") public boolean isEmpty(){  return hlist.isEmpty();}  }
class C{  public void testConcurrentLoading() throws Exception {  final Loader loader=new Loader(new String[]{"Bug4168625Class"},new String[]{"Bug4168625Resource3_en_US","Bug4168625Resource3_en_CA"});  final Class c=loader.loadClass("Bug4168625Class");  final Bug4168625Getter test=(Bug4168625Getter)c.newInstance();  ConcurrentLoadingThread thread1=new ConcurrentLoadingThread(loader,test,new Locale("en","CA"));  ConcurrentLoadingThread thread2=new ConcurrentLoadingThread(loader,test,new Locale("en","IE"));  thread1.start();  loader.waitForNotify(1);  thread2.start();  thread2.join();  if (!thread1.isAlive() || thread2.isAlive()) {    errln("ResourceBundle.getBundle not allowing legal concurrent loads");  }  thread1.ping();  thread1.join();}  }
class C{  public boolean isUserRecordable(int type){  assert type > 0 : "Invalid event type: " + type;  return type < len ? userRecordableEvts[type] : isUserRecordable0(type);}  }
class C{  public TaskEstimate analyze(HiveObjectSpec spec) throws HiveMetastoreException, IOException {  if (!spec.isPartition()) {    return analyzeTableSpec(spec);  } else {    return analyzePartitionSpec(spec);  }}  }
class C{  public void navigateToPhotoDetail(@NonNull Context context,ArrayList<Photo> photoList,int position){  if (context != null) {    Intent intentToLaunch=DetailActivity.buildIntent(context,photoList,position);    context.startActivity(intentToLaunch);  }}  }
class C{  @Override public void perform(IR ir){  ir.stackManager.insertPrologueAndEpilogue();}  }
class C{  public static GCounter newGCounter(long adds){  return new StateBasedGCounter(adds);}  }
class C{  private boolean canRunSyncTest(){  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_drive),true);  boolean canRun=EndToEndTestUtils.SOLO.waitForText(GoogleUtils.ACCOUNT_1,1,EndToEndTestUtils.SHORT_WAIT_TIME) && EndToEndTestUtils.SOLO.waitForText(GoogleUtils.ACCOUNT_2,1,EndToEndTestUtils.TINY_WAIT_TIME);  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackListActivity.getString(R.string.generic_cancel));  return canRun;}  }
class C{  public NumericColumn(){  super(ColumnType.NUMERIC);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:37.921 -0500",hash_original_method="1459872133D83D08012D8F1A13CEC4DA",hash_generated_method="13A360B8CBA047B9AD478B05EFFD33CF") public byte[] windowNaf(byte width,BigInteger k){  byte[] wnaf=new byte[k.bitLength() + 1];  short pow2wB=(short)(1 << width);  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);  int i=0;  int length=0;  while (k.signum() > 0) {    if (k.testBit(0)) {      BigInteger remainder=k.mod(pow2wBI);      if (remainder.testBit(width - 1)) {        wnaf[i]=(byte)(remainder.intValue() - pow2wB);      } else {        wnaf[i]=(byte)remainder.intValue();      }      k=k.subtract(BigInteger.valueOf(wnaf[i]));      length=i;    } else {      wnaf[i]=0;    }    k=k.shiftRight(1);    i++;  }  length++;  byte[] wnafShort=new byte[length];  System.arraycopy(wnaf,0,wnafShort,0,length);  return wnafShort;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static org.apache.nutch.storage.ProtocolStatus.Builder newBuilder(org.apache.nutch.storage.ProtocolStatus.Builder other){  return new org.apache.nutch.storage.ProtocolStatus.Builder(other);}  }
class C{  private boolean estadoPadreCorrecto(OrganizacionVO organizacionVO,GestionOrganizacionBI organizacionBI){  if (IOrganizacionDBEntity.ORGANO.equals(organizacionVO.getTipo().toString()) && StringUtils.isNotEmpty(organizacionVO.getIdOrgPadre())) {    OrganizacionVO organizacionPadre=organizacionBI.getOrganizacionById(organizacionVO.getIdOrgPadre());    if (IOrganizacionDBEntity.VIGENTE.equals(organizacionVO.getEstado().toString()) && IOrganizacionDBEntity.BORRADOR.equals(organizacionPadre.getEstado().toString())) {      return false;    }  }  return true;}  }
class C{  public SecretBuilder withDescription(String description){  this.description=checkNotNull(description);  return this;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int size(){  return parameters.size();}  }
class C{  public static void write(int x1,int y1,int w,int h,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.CIRCLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_CIRCLE);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(w);  dos.writeInt(h);  properties.write(dos);}  }
class C{  public SortInfo(){}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public void remove(int volId) throws Exception {  _volumesImpl.remove(volId);}  }
class C{  static List createMessageListForTesting(){  return qrmThread.createMessageList();}  }
class C{  public static Message fromHeaders(Map<String,String> headers){  return withHeaders(headers).build();}  }
class C{  @SuppressWarnings("rawtypes") public List findByNativeQuery(String sql,Class type,int max){  return new ArrayList<Vertex>();}  }
class C{  private void unzip(String file){  try {    final File fSourceZip=new File(file);    final String zipPath=file.substring(0,file.length() - 4);    ZipFile zipFile=new ZipFile(fSourceZip);    Enumeration<? extends ZipEntry> e=zipFile.entries();    while (e.hasMoreElements()) {      ZipEntry entry=e.nextElement();      File destinationFilePath=new File(zipPath,entry.getName());      destinationFilePath.getParentFile().mkdirs();      if (entry.isDirectory()) {        continue;      } else {        final BufferedInputStream bis=new BufferedInputStream(zipFile.getInputStream(entry));        int b;        final byte buffer[]=new byte[Updater.BYTE_SIZE];        final FileOutputStream fos=new FileOutputStream(destinationFilePath);        final BufferedOutputStream bos=new BufferedOutputStream(fos,Updater.BYTE_SIZE);        while ((b=bis.read(buffer,0,Updater.BYTE_SIZE)) != -1) {          bos.write(buffer,0,b);        }        bos.flush();        bos.close();        bis.close();        final String name=destinationFilePath.getName();        if (name.endsWith(".jar") && this.pluginFile(name)) {          destinationFilePath.renameTo(new File(this.plugin.getDataFolder().getParent(),this.updateFolder + "/" + name));        }      }      entry=null;      destinationFilePath=null;    }    e=null;    zipFile.close();    zipFile=null;    for (    final File dFile : new File(zipPath).listFiles()) {      if (dFile.isDirectory()) {        if (this.pluginFile(dFile.getName())) {          final File oFile=new File(this.plugin.getDataFolder().getParent(),dFile.getName());          final File[] contents=oFile.listFiles();          for (          final File cFile : dFile.listFiles()) {            boolean found=false;            for (            final File xFile : contents) {              if (xFile.getName().equals(cFile.getName())) {                found=true;                break;              }            }            if (!found) {              cFile.renameTo(new File(oFile.getCanonicalFile() + "/" + cFile.getName()));            } else {              cFile.delete();            }          }        }      }      dFile.delete();    }    new File(zipPath).delete();    fSourceZip.delete();  } catch (  final IOException ex) {    this.plugin.getLogger().warning("The auto-updater tried to unzip a new update file, but was unsuccessful.");    this.result=Updater.UpdateResult.FAIL_DOWNLOAD;    ex.printStackTrace();  }  new File(file).delete();}  }
class C{  public boolean cancelRecoveriesForShard(ShardId shardId,String reason){  return cancelRecoveriesForShard(shardId,reason,Predicates.<RecoveryStatus>alwaysTrue());}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  public static Instance calcCentroidPivot(int[] instList,Instances insts){  double[] attrVals=new double[insts.numAttributes()];  Instance temp;  for (int i=0; i < instList.length; i++) {    temp=insts.instance(instList[i]);    for (int j=0; j < temp.numValues(); j++) {      attrVals[j]+=temp.valueSparse(j);    }  }  for (int j=0, numInsts=instList.length; j < attrVals.length; j++) {    attrVals[j]/=numInsts;  }  temp=new DenseInstance(1.0,attrVals);  return temp;}  }
class C{  public IntLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  public Document createDefaultDocument(){  return new PlainDocument();}  }
class C{  public int nextInt(){  int ret=counter.getAndIncrement();  setLastInt(ret);  return ret;}  }
class C{  public String toString(){  return toKeywordValueString(toKeyword(DEFAULT,Collections.<String,String>emptyMap()));}  }
class C{  private int rotateRight(int x,int y){  return ((x >>> (y & (32 - 1))) | (x << (32 - (y & (32 - 1)))));}  }
class C{  public static void printFinishCalls(ExecutionTrace trace){  for (  MethodCall call : trace.getMethodCalls()) {    System.out.println("Found MethodCall for: " + call.methodName + " on object "+ call.callingObjectID);    System.out.println("#passed branches: " + call.branchTrace.size());    for (int i=0; i < call.defuseCounterTrace.size(); i++) {      System.out.println(i + ". at Branch " + call.branchTrace.get(i)+ " true_dist: "+ call.trueDistanceTrace.get(i)+ " false_dist: "+ call.falseDistanceTrace.get(i)+ " duCounter: "+ call.defuseCounterTrace.get(i));      System.out.println();    }  }}  }
class C{  public static final CButton createPrintButton(String text){  AppsAction aa=new AppsAction(A_PRINT,KeyStroke.getKeyStroke(KeyEvent.VK_F12,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  final ElemContext push(){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_startTagOpen=true;  return frame;}  }
class C{  @Override public final boolean isConnected(){  if (self == this) {    return super.isConnected();  } else {    return self.isConnected();  }}  }
class C{  static public void fail(String message){  if (message == null) {    throw new AssertionError();  }  throw new AssertionError(message);}  }
class C{  public static Color correctReadability(Color foreground,Color background){  int bd=getBrightnessDifference(foreground,background);  if (Math.abs(bd) < 50) {    if (getBrightness(background) > 180) {      foreground=makeDarker(foreground,0.5f);    } else {      foreground=makeBrighter(foreground,0.5f);    }  }  return foreground;}  }
class C{  public static void updateWidgets(Context context,boolean serviceRunning){  int[] appWidgetIds=findAppWidgetIds(context);  updateWidgets(context,appWidgetIds,serviceRunning);}  }
class C{  public FmBand(int minFrequency,int maxFrequency,int channelOffset,int defaultFrequency){  if (minFrequency >= maxFrequency) {    throw new IllegalArgumentException("Minimum frequency can not be equal or higher than maximum frequency");  }  if (defaultFrequency < minFrequency) {    throw new IllegalArgumentException("Default frequency can not be less than minFrequency");  }  if (defaultFrequency > maxFrequency) {    throw new IllegalArgumentException("Default frequency can not be higher than maxFrequency");  }  if ((maxFrequency - minFrequency) % channelOffset != 0 || (defaultFrequency - minFrequency) % channelOffset != 0) {    throw new IllegalArgumentException("Frequency has invalid offset");  }  this.mMinFrequency=minFrequency;  this.mMaxFrequency=maxFrequency;  this.mDefaultFrequency=defaultFrequency;  this.mChannelOffset=channelOffset;}  }
class C{  public static Frustum fromProjectionMatrix(Matrix projectionMatrix){  Matrix m=projectionMatrix;  if (m == null) {    throw new IllegalArgumentException("Matrix Is Null");  }  Plane leftPlane=new Plane(m.m41 + m.m11,m.m42 + m.m12,m.m43 + m.m13,m.m44 + m.m14).normalize();  Plane rightPlane=new Plane(m.m41 - m.m11,m.m42 - m.m12,m.m43 - m.m13,m.m44 - m.m14).normalize();  Plane bottomPlane=new Plane(m.m41 + m.m21,m.m42 + m.m22,m.m43 + m.m23,m.m44 + m.m24).normalize();  Plane topPlane=new Plane(m.m41 - m.m21,m.m42 - m.m22,m.m43 - m.m23,m.m44 - m.m24).normalize();  Plane nearPlane=new Plane(m.m41 + m.m31,m.m42 + m.m32,m.m43 + m.m33,m.m44 + m.m34).normalize();  Plane farPlane=new Plane(m.m41 - m.m31,m.m42 - m.m32,m.m43 - m.m33,m.m44 - m.m34).normalize();  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public static void showOdkCollect(Activity callingActivity,int requestCode,long formId,@Nullable org.odk.collect.android.model.Patient patient,@Nullable Preset fields){  Intent intent=new Intent(callingActivity,FormEntryActivity.class);  Uri formUri=ContentUris.withAppendedId(FormsProviderAPI.FormsColumns.CONTENT_URI,formId);  intent.setData(formUri);  intent.setAction(Intent.ACTION_PICK);  if (patient != null) {    intent.putExtra("patient",patient);  }  if (fields != null) {    intent.putExtra("fields",fields);  }  callingActivity.startActivityForResult(intent,requestCode);}  }
class C{  public static String pathName(String path){  String pathName=null;  String OSName=System.getProperty("os.name");  if (OSName.toLowerCase().indexOf("window") > 0) {    pathName=strReplace("\\","/",path);  } else {    pathName=strReplace("/","\\",path);  }  return pathName;}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mDatePicker.init(ldt.getYear(),ldt.getMonthOfYear() - 1,ldt.getDayOfMonth(),mDateListener);}  }
class C{  @Override public synchronized void updateShort(String columnName,short x) throws SQLException {  updateShort(findColumn(columnName),x);}  }
class C{  private char lookup(char c,char[] map,char offset){  if (!inside(c,map,offset)) {    return c;  } else {    return map[c - offset];  }}  }
class C{  private Map<Receipt,List<ReceiptDetail>> consolidateTuplesReceiptWise(final List<InstallmentReceiptTuple> tuples){  final Map<Receipt,List<ReceiptDetail>> consolidated=new HashMap<Receipt,List<ReceiptDetail>>();  List<ReceiptDetail> breakups=null;  for (  final InstallmentReceiptTuple t : tuples) {    breakups=consolidated.get(t.receipt);    if (breakups == null) {      breakups=new ArrayList<ReceiptDetail>();      consolidated.put(t.receipt,breakups);    }    final ReceiptDetail det=t.receipt.getReceiptDetails().get(0);    breakups.add(det);  }  LOGGER.info("consolidateTuplesReceiptWise() returned: " + consolidated);  return consolidated;}  }
class C{  public CommandLine add(Map<String,String> options){  if (options != null && !options.isEmpty()) {    for (    Map.Entry<String,String> entry : options.entrySet()) {      addPair(entry.getKey(),entry.getValue());    }  }  return this;}  }
class C{  public int read(char buff[],int off,int len) throws IOException {  int b=read();  if (b == -1)   return -1; else {    buff[off]=(char)b;    return 1;  }}  }
class C{  public boolean isValid(){  SSLSessionContext context=sessionContext;  if (isValid && context != null && context.getSessionTimeout() != 0 && getCreationTime() + (context.getSessionTimeout() * 1000) < System.currentTimeMillis()) {    isValid=false;  }  return isValid;}  }
class C{  public static Synapse copyTemplateSynapse(Synapse s){  if (s.getSource() != null || s.getTarget() != null) {    throw new IllegalArgumentException("Synapse is not template" + " synapse.");  }  return new Synapse(s);}  }
class C{  public void testInvertRange(){  Instances result;  m_Filter=getFilter("t","_",true,"first",true);  result=performTest();  assertTrue("The first attribute contains '_'!",(result.attribute(0).name().indexOf("_") == -1));}  }
class C{  @Override public String toString(String field){  return ExtendedQueryBase.getOptionsString(this) + "ConstantScore(" + filter.toString()+ ")";}  }
class C{  public boolean verifyExpectedStringInOutput(String str){  boolean exists=false;  String outputFileName=null;  if (!facesTestCase.sendResponseToFile() && (!facesTestCase.sendWriterToFile()) && (null == facesTestCase.getExpectedOutputFilename())) {    return true;  }  if (facesTestCase.sendResponseToFile()) {    outputFileName=FileOutputResponseWrapper.FACES_RESPONSE_FILENAME;  } else {    outputFileName=FileOutputResponseWriter.RESPONSE_WRITER_FILENAME;  }  try {    File fileToCheck=new File(outputFileName);    FileReader fileReader=new FileReader(fileToCheck);    LineNumberReader lineReader=new LineNumberReader(fileReader);    String line=lineReader.readLine().trim();    while (null != line) {      if (line.indexOf(str) >= 0) {        exists=true;        break;      }      line=lineReader.readLine();    }  } catch (  IOException e) {    System.out.println(e.getMessage());    e.printStackTrace();  }  return exists;}  }
class C{  public static double vectorDistance(double[] vec1,double[] vec2,double power,double oneOverPower){  double result=0;  if (power == 0) {    for (int i=0; i < vec1.length; i++) {      result+=vec1[i] - vec2[i] == 0 ? 0 : 1;    }  } else   if (power == 1.0) {    for (int i=0; i < vec1.length; i++) {      result+=Math.abs(vec1[i] - vec2[i]);    }  } else   if (power == 2.0) {    result=Math.sqrt(distSquaredCartesian(vec1,vec2));  } else   if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {    for (int i=0; i < vec1.length; i++) {      result=Math.max(result,Math.max(vec1[i],vec2[i]));    }  } else {    for (int i=0; i < vec1.length; i++) {      result+=Math.pow(vec1[i] - vec2[i],power);    }    result=Math.pow(result,oneOverPower);  }  return result;}  }
class C{  public static boolean canMoveUp(JList list){  boolean result;  int[] indices;  result=false;  indices=list.getSelectedIndices();  if (indices.length > 0) {    if (indices[0] > 0)     result=true;  }  return result;}  }
class C{  public TourGuide with(Technique technique){  mTechnique=technique;  return this;}  }
class C{  static String calculateNthPercentile(List<String> values,int n){  String[] valuesArr=new String[values.size()];  valuesArr=values.toArray(valuesArr);  Arrays.sort(valuesArr);  int ordinalRank=(int)Math.ceil(n * values.size() / 100.0);  return valuesArr[ordinalRank - 1];}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  @Override protected String doTask() throws Exception {  ran.compareAndSet(false,true);  return getOnlyResource();}  }
class C{  public ScatterPlotComponent(final String name,final int numDataSources){  super(name);  model=new ScatterPlotModel();  model.addDataSources(numDataSources);  initializeAttributes();  addListener();}  }
class C{  private static DataDiskStats parseDFResults(String dfResult){  String[] lines=dfResult.split("\n");  DataDiskStats dataDiskStats=new DataDiskStats();  for (  String line : lines) {    String[] v=line.split(SPACE_VALUE);    if (v != null && v.length > 5) {      if ("/".equals(v[5].trim())) {        dataDiskStats.setRootUsedKB(Long.parseLong(v[2]));        dataDiskStats.setRootAvailKB(Long.parseLong(v[3]));      } else       if ("/data".equals(v[5].trim())) {        dataDiskStats.setDataUsedKB(Long.parseLong(v[2]));        dataDiskStats.setDataAvailKB(Long.parseLong(v[3]));      }    }  }  return dataDiskStats;}  }
class C{  public MiniDrawer withAccountHeader(@NonNull AccountHeader accountHeader){  this.mAccountHeader=accountHeader;  return this;}  }
class C{  protected void addVolumeTask(Volume volume,TaskList taskList,String taskId,ResourceOperationTypeEnum operationTypeEnum){  Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),taskId,operationTypeEnum);  taskList.getTaskList().add(TaskMapper.toTask(volume,taskId,op));}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Long queueId,Principal principal){  RestWrapper restWrapper=null;  try {    archiveConsumpQueueDAO.delete(queueId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + queueId + " deleted from ArchiveConsumpQueue by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void logArchiveRetrieved(final Logger logger,final ArchiveDescription archive){  logger.logMessage(Level.INFO,"Retrieved archive " + archive.toString() + " succesfully");}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public AccessFieldNode(NodeClass<? extends AccessFieldNode> c,Stamp stamp,ValueNode object,ResolvedJavaField field){  super(c,stamp);  this.object=object;  this.field=field;  assert field.getDeclaringClass().isInitialized();}  }
class C{  protected SimpleLinearRegression[][] copyRegressions(SimpleLinearRegression[][] a) throws Exception {  SimpleLinearRegression[][] result=initRegressions();  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[i].length; j++) {      if (j != m_numericDataHeader.classIndex()) {        result[i][j].addModel(a[i][j]);      }    }  }  return result;}  }
class C{  private int bufferSize(int bufSize){  return bufSize == 0 ? cfg.getStreamBufferSize() : bufSize;}  }
class C{  public CommitContext addInstanceToCommit(Entity entity){  commitInstances.add(entity);  return this;}  }
class C{  @Override public ImmutableSortedSet<K> keySet(){  return keySet;}  }
class C{  public Vset join(Vset other){  if (this == DEAD_END) {    return other.copy();  }  if (other == DEAD_END) {    return this;  }  if (x == fullX) {    return other.copy();  }  if (other.x == fullX) {    return this;  }  vset&=other.vset;  uset&=other.uset;  if (other.x == emptyX) {    x=emptyX;  } else {    long otherX[]=other.x;    int selfLength=x.length;    int limit=(otherX.length < selfLength) ? otherX.length : selfLength;    for (int i=0; i < limit; i++) {      x[i]&=otherX[i];    }    for (int i=limit; i < selfLength; i++) {      x[i]=0;    }  }  return this;}  }
class C{  protected boolean check(Object o,String str){  if (o instanceof Map) {    Map h=(Map)o;    if (comp(h.get("name"),str)) {      return true;    }  } else {    String element=o.toString();    if (startsWithMode) {      if (element.toUpperCase().startsWith(str)) {        return true;      }    } else {      if (element.toUpperCase().indexOf(str) > -1) {        return true;      }    }  }  return false;}  }
class C{  public MassesCroyances(){}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  private boolean hasAlphaSupport(final String codec){  return "png".equals(codec);}  }
class C{  private boolean usingCookies(){  return PropertyUtils.getProperty(config,Properties.REDIRECT_SCOPE_COOKIES,false);}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_BOUNDARY) {    return NORTH_BOUNDARY;  } else   if (lat < SOUTH_BOUNDARY) {    return SOUTH_BOUNDARY;  }  return lat;}  }
class C{  public void clearIndex(){  IndexWriter writer=getWriter();  try {    writer.deleteAll();  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  } finally {    closeWriter(writer);  }}  }
class C{  BrowserTab(LaunchConfiguration launchConfiguration,Info info,String name,String moduleName){  id=launchConfiguration.getModel().getModelNodeNextId();  this.launchConfiguration=launchConfiguration;  this.tabInfo=info;  this.name=name;  addModule(moduleName,info.getInitialSessionKey());}  }
class C{  protected void fireRetransmissionTimer(){  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("fireRetransmissionTimer() -- ");    }    if (isInviteTransaction() && lastResponse != null) {      if (!this.retransmissionAlertEnabled || sipStack.isTransactionPendingAck(this)) {        if (lastResponse.getStatusCode() / 100 > 2 && !this.isAckSeen)         super.sendMessage(lastResponse);      } else {        SipProviderImpl sipProvider=(SipProviderImpl)this.getSipProvider();        TimeoutEvent txTimeout=new TimeoutEvent(sipProvider,this,Timeout.RETRANSMIT);        sipProvider.handleEvent(txTimeout,this);      }    }  } catch (  IOException e) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(e);    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  @Override public final String sourceExpression(int index,Instances data){  StringBuffer expr=null;  if (index < 0) {    return "i[" + m_attIndex + "] == null";  }  if (data.attribute(m_attIndex).isNominal()) {    expr=new StringBuffer("i[");    expr.append(m_attIndex).append("]");    expr.append(".equals(\"").append(data.attribute(m_attIndex).value(index)).append("\")");  } else {    expr=new StringBuffer("((Double) i[");    expr.append(m_attIndex).append("])");    if (index == 0) {      expr.append(".doubleValue() <= ").append(m_splitPoint);    } else {      expr.append(".doubleValue() > ").append(m_splitPoint);    }  }  return expr.toString();}  }
class C{  @SmallTest public void testStartable(){  Intent startIntent=new Intent();  startIntent.setClass(getContext(),LocalService.class);  startService(startIntent);}  }
class C{  private void attachDisk(HostScsiDisk disk){  logInfo("find.host.scsi.lun.esx.attach",lunDiskName,host.getName());  new HostStorageAPI(host).attachScsiLun(disk);}  }
class C{  public final DD multiply(double y){  if (Double.isNaN(y))   return createNaN();  return copy(this).selfMultiply(y,0.0);}  }
class C{  public Vector(Vector other){  this.x=other.x;  this.y=other.y;  this.z=other.z;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  protected String makeCorrelIdAsString(WorkerThread worker) throws UnknownHostException {  String proc_id=Config.parms.getString("id");  StringBuffer cid=new StringBuffer();  if (proc_id != null && proc_id.length() > 0) {    cid.append(proc_id);  } else {    cid.append(InetAddress.getLocalHost().toString());  }  cid.append(worker.getName());  cid.append(new UID().toString());  Log.logger.log(Level.FINEST,"makeCorrelIDAsString: {0}",cid);  return cid.toString();}  }
class C{  public void ignoreLocationOnce(Point location){  ignoreOnce.add(location);}  }
class C{  public int lookAhead() throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  return lookaheadChar;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);}  }
class C{  public ServiceNotFoundException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public RetryingAcknowledgingMessageListenerAdapter(AcknowledgingMessageListener<K,V> messageListener,RetryTemplate retryTemplate,RecoveryCallback<Void> recoveryCallback){  super(messageListener,retryTemplate,recoveryCallback);  Assert.notNull(messageListener,"'messageListener' cannot be null");  this.delegate=messageListener;}  }
class C{  public HistogramBuilder offset(long offset){  this.offset=offset;  return this;}  }
class C{  static public TXCommitMessage waitForMessage(Object id,DM dm){  TXFarSideCMTracker map=getTracker();  return map.waitForMessage(id,dm);}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public boolean containsValue(Object value){  return dataMap.containsValue(value);}  }
class C{  public boolean isDrawFilledEnabled(){  return mDrawFilled;}  }
class C{  public double assortativity(Graph g){  SampledGraph graph=(SampledGraph)g;  int iteration=SnowballStatistics.getInstance().lastIteration(graph.getVertices());  if (iteration == 0)   return Double.NaN;  double product=0;  double sum=0;  double squareSum=0;  double M_hat=0;  for (  SampledEdge e : graph.getEdges()) {    SampledVertex v_i=e.getVertices().getFirst();    SampledVertex v_j=e.getVertices().getSecond();    if (v_i.isSampled() && v_j.isSampled()) {      double p_i=piEstimator.probability(v_i,iteration - 1);      double p_j=piEstimator.probability(v_j,iteration - 1);      if (p_i > 0 && p_j > 0) {        double p=(p_i + p_j) - (p_i * p_j);        int k_i=v_i.getEdges().size();        int k_j=v_j.getEdges().size();        sum+=0.5 * (k_i + k_j) / p;        squareSum+=0.5 * (Math.pow(k_i,2) + Math.pow(k_j,2)) / p;        product+=k_i * k_j / p;        M_hat+=1 / p;      }    }  }  double norm=1 / M_hat;  return ((norm * product) - Math.pow(norm * sum,2)) / ((norm * squareSum) - Math.pow(norm * sum,2));}  }
class C{  public void cancelEffect(NotificationEntry entry){  entry.mEffectConsumers&=~ID;}  }
class C{  protected void startExecutorPool(){  if (m_executorPool != null) {    m_executorPool.shutdownNow();  }  m_executorPool=new ThreadPoolExecutor(m_numExecutionSlots,m_numExecutionSlots,120,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  public void togglePopup(){  if ((Instant.now().toEpochMilli() - lastPopupCloseTime.toEpochMilli()) < 200) {    return;  }  openPopup();}  }
class C{  public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){  this.method=method;  this.handler=handler;  this.args=Arrays.copyOf(args,args.length);  this.formParameters=formParameters;  this.responder=responder;}  }
class C{  public void paste(String sXML) throws Exception {  try {    paste(sXML,TEST);  } catch (  Exception e) {    throw e;  }  paste(sXML,EXECUTE);}  }
class C{  public void addVillage(int i,Village c){  forward[i]=c;}  }
class C{  public static Wildcards ofMatches(Wildcards.Flag setFlag){  return Wildcards.of(setFlag.matchOn(FULL_INT));}  }
class C{  @Override public Attribute export(JavaClass cl,JavaClass target){  ConstantPool cp=target.getConstantPool();  cp.addUTF8(getName());  BootstrapMethodAttribute attr=new BootstrapMethodAttribute();  return attr;}  }
class C{  protected void putRules(Rule... rules){  putRules(INITIAL_STATE,rules);}  }
class C{  public String evaluate(XPathContext xctxt,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  if (null != m_simpleString) {    return m_simpleString;  } else   if (null != m_parts) {    final FastStringBuffer buf=getBuffer();    String out=null;    int n=m_parts.size();    try {      for (int i=0; i < n; i++) {        AVTPart part=(AVTPart)m_parts.elementAt(i);        part.evaluate(xctxt,buf,context,nsNode);      }      out=buf.toString();    }  finally {      if (USE_OBJECT_POOL) {        StringBufferPool.free(buf);      } else {        buf.setLength(0);      }    }    return out;  } else {    return "";  }}  }
class C{  public static void addInputMode(String name,Hashtable values,boolean firstUpcase){  initInputModes();  inputModes.put(name,values);  if (firstUpcase) {    firstUppercaseInputMode.addElement(name);  }}  }
class C{  public SchedulableEvent waitNextEvent() throws InterruptedException {  SchedulableEvent event=null;  while (true) {    long millisToWait=Integer.MAX_VALUE;synchronized (lock) {      if (!mEventBuffer.isEmpty()) {        long now=System.nanoTime();        long lowestTime=mEventBuffer.firstKey();        if (lowestTime <= now) {          event=removeNextEventLocked(lowestTime);          break;        } else {          long nanosToWait=lowestTime - now;          millisToWait=1 + (nanosToWait / NANOS_PER_MILLI);          if (millisToWait > Integer.MAX_VALUE) {            millisToWait=Integer.MAX_VALUE;          }        }      }      lock.wait((int)millisToWait);    }  }  return event;}  }
class C{  SnmpTableEntryNotification(String type,Object source,long sequenceNumber,long timeStamp,Object entry,ObjectName entryName){  super(type,source,sequenceNumber,timeStamp);  this.entry=entry;  this.name=entryName;}  }
class C{  public void stopOrientationDetection(OrientationListener orientationListener){  stopLibrarySensorDetection(orientationListener);}  }
class C{  public static List<String> buildCommand(final String className,final String additionalClasspath,final Properties systemProperties,final List<String> jvmOptions){  final List<String> javaCommandLine=new ArrayList<String>();  final File javaBinDir=new File(System.getProperty("java.home"),"bin");  final File javaCommand=new File(javaBinDir,"java");  javaCommandLine.add(javaCommand.getPath());  final String dashServerArg=getDashServerArg(javaBinDir);  if (dashServerArg != null) {    javaCommandLine.add(dashServerArg);  }  if (jvmOptions != null) {    for (    final String jvmOption : jvmOptions) {      javaCommandLine.add(jvmOption);    }  }  javaCommandLine.add("-classpath");  javaCommandLine.add(buildClasspath(additionalClasspath));  if (systemProperties != null) {    for (    final Object key : systemProperties.keySet()) {      javaCommandLine.add("-D" + key + "="+ systemProperties.getProperty(key.toString()));    }  }  javaCommandLine.add(className);  return javaCommandLine;}  }
class C{  public double updateContainerProcessing(double currentTime,List<Double> mipsShare){  if (mipsShare != null) {    return getContainerCloudletScheduler().updateContainerProcessing(currentTime,mipsShare);  }  return 0.0;}  }
class C{  private Path makeDot(float radius){  Path p=new Path();  p.addCircle(0,0,radius,Path.Direction.CCW);  return p;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("SourceDebugExtensionTarg");  targetClass=bpe.location().declaringType();  if (!vm().canGetSourceDebugExtension()) {    failure("FAIL: canGetSourceDebugExtension() is false");  } else {    println("canGetSourceDebugExtension() is true");  }  String expected="An expected attribute string";  String sde=targetClass.sourceDebugExtension();  if (!sde.equals(expected)) {    failure("FAIL: got '" + sde + "' expected: '"+ expected+ "'");  }  listenUntilVMDisconnect();  if (!testFailed) {    println("SourceDebugExtensionTest: passed");  } else {    throw new Exception("SourceDebugExtensionTest: failed");  }}  }
class C{  public Vector(Collection c){  elementCount=c.size();  elementData=new Object[(int)Math.min((elementCount * 110L) / 100,Integer.MAX_VALUE)];  c.toArray(elementData);}  }
class C{  private void drawMagnifyMask(Graphics2D g){  double viewWidth=viewport.getWidthInView();  double viewHeight=viewport.getHeightInView();  float minExtent=(float)Math.min(viewWidth,viewHeight);  float maskWidth=(float)(minExtent * AppConstants.MASK_WIDTH_FRAC / 2);  Area mask=new Area(new Rectangle2D.Float((float)0,(float)0,(float)viewWidth,(float)viewHeight));  Area maskHole=new Area(new Rectangle2D.Float((float)maskWidth,(float)maskWidth,((float)viewWidth) - 2 * maskWidth,((float)viewHeight) - 2 * maskWidth));  mask.subtract(maskHole);  g.setColor(AppConstants.MASK_CLR);  g.fill(mask);}  }
class C{  public boolean isTextAfterHtmlSeparatorTag(int separatorIndex){  int ptr=separatorIndex;  if (ptr > this.separatorsPtr)   return false;  int tagIndex=this.htmlIndexes[ptr] & JAVADOC_TAGS_ID_MASK;  return tagIndex != -1 && tagIndex == JAVADOC_SEPARATOR_TAGS_ID;}  }
class C{  private int binarySearch(T x,int from,int to){  while (from <= to) {    int m=(from + to) >>> 1;    if (comp.compare(x,data[m]) >= 0) {      from=m + 1;    } else {      to=m - 1;    }  }  return from;}  }
class C{  protected Date previousStandardDate(Date date,DateTickUnit unit){  int milliseconds;  int seconds;  int minutes;  int hours;  int days;  int months;  int years;  Calendar calendar=Calendar.getInstance(this.timeZone,this.locale);  calendar.setTime(date);  int count=unit.getMultiple();  int current=calendar.get(unit.getCalendarField());  int value=count * (current / count);switch (unit.getUnit()) {case DateTickUnit.MILLISECOND:    years=calendar.get(Calendar.YEAR);  months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);seconds=calendar.get(Calendar.SECOND);calendar.set(years,months,days,hours,minutes,seconds);calendar.set(Calendar.MILLISECOND,value);Date mm=calendar.getTime();if (mm.getTime() >= date.getTime()) {calendar.set(Calendar.MILLISECOND,value - count);mm=calendar.getTime();}return mm;case DateTickUnit.SECOND:years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);minutes=calendar.get(Calendar.MINUTE);if (this.tickMarkPosition == DateTickMarkPosition.START) {milliseconds=0;} else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {milliseconds=500;} else {milliseconds=999;}calendar.set(Calendar.MILLISECOND,milliseconds);calendar.set(years,months,days,hours,minutes,value);Date dd=calendar.getTime();if (dd.getTime() >= date.getTime()) {calendar.set(Calendar.SECOND,value - count);dd=calendar.getTime();}return dd;case DateTickUnit.MINUTE:years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);hours=calendar.get(Calendar.HOUR_OF_DAY);if (this.tickMarkPosition == DateTickMarkPosition.START) {seconds=0;} else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {seconds=30;} else {seconds=59;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,hours,value,seconds);Date d0=calendar.getTime();if (d0.getTime() >= date.getTime()) {calendar.set(Calendar.MINUTE,value - count);d0=calendar.getTime();}return d0;case DateTickUnit.HOUR:years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);days=calendar.get(Calendar.DATE);if (this.tickMarkPosition == DateTickMarkPosition.START) {minutes=0;seconds=0;} else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {minutes=30;seconds=0;} else {minutes=59;seconds=59;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,days,value,minutes,seconds);Date d1=calendar.getTime();if (d1.getTime() >= date.getTime()) {calendar.set(Calendar.HOUR_OF_DAY,value - count);d1=calendar.getTime();}return d1;case DateTickUnit.DAY:years=calendar.get(Calendar.YEAR);months=calendar.get(Calendar.MONTH);if (this.tickMarkPosition == DateTickMarkPosition.START) {hours=0;} else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {hours=12;} else {hours=23;}calendar.clear(Calendar.MILLISECOND);calendar.set(years,months,value,hours,0,0);Date d2=calendar.getTime();if (d2.getTime() >= date.getTime()) {calendar.set(Calendar.DATE,value - count);d2=calendar.getTime();}return d2;case DateTickUnit.MONTH:value=count * ((current + 1) / count) - 1;years=calendar.get(Calendar.YEAR);calendar.clear(Calendar.MILLISECOND);calendar.set(years,value,1,0,0,0);Month month=new Month(calendar.getTime(),this.timeZone,this.locale);Date standardDate=calculateDateForPosition(month,this.tickMarkPosition);long millis=standardDate.getTime();if (millis >= date.getTime()) {for (int i=0; i < count; i++) {month=(Month)month.previous();}month.peg(Calendar.getInstance(this.timeZone));standardDate=calculateDateForPosition(month,this.tickMarkPosition);}return standardDate;case DateTickUnit.YEAR:if (this.tickMarkPosition == DateTickMarkPosition.START) {months=0;days=1;} else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {months=6;days=1;} else {months=11;days=31;}calendar.clear(Calendar.MILLISECOND);calendar.set(value,months,days,0,0,0);Date d3=calendar.getTime();if (d3.getTime() >= date.getTime()) {calendar.set(Calendar.YEAR,value - count);d3=calendar.getTime();}return d3;default :return null;}}  }
class C{  public PaymentProcessorSurrogate(CustomerOrderPaymentService customerOrderPaymentService,PaymentGatewayInternalForm paymentGateway){  super(customerOrderPaymentService);  setPaymentGateway(paymentGateway);  this.customerOrderPaymentService=customerOrderPaymentService;}  }
class C{  public String encodedQuery(){  if (queryNamesAndValues == null) {    return null;  }  int queryStart=url.indexOf('?') + 1;  int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),'#');  return url.substring(queryStart,queryEnd);}  }
class C{  public static void dataChanged(Context context){  if (sBackupManager == null) {    sBackupManager=new BackupManager(context);  }  sBackupManager.dataChanged();}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  public MalformedBodyResponse(){  requestFileName="getstate.query";  responseFile="malformed-body2.query";}  }
class C{  private static char decodeHexNibble(final char c){  if ('0' <= c && c <= '9') {    return (char)(c - '0');  } else   if ('a' <= c && c <= 'f') {    return (char)(c - 'a' + 10);  } else   if ('A' <= c && c <= 'F') {    return (char)(c - 'A' + 10);  } else {    return Character.MAX_VALUE;  }}  }
class C{  public MapMouseSupport(boolean shouldConsumeEvents){  this(null,shouldConsumeEvents);}  }
class C{  public Rotate3dAnimation(final float fromDegrees,final float toDegrees,final float centerX,final float centerY,final float depthZ,final boolean reverse){  super.setBackgroundColor(Color.WHITE);  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  protected void updateManuallyCreatedInterfaces(Iterable<IpInterface> ipInterfaces){  for (  IpInterface ipInterface : ipInterfaces) {    if (ipInterface.getIsManualCreation() == null) {      ipInterface.setIsManualCreation(true);      modelClient.save(ipInterface);    }  }}  }
class C{  public static boolean compatible(ARecordType reqType,IAType inputType) throws AlgebricksException {  if (inputType.getTypeTag() == ATypeTag.ANY) {    return false;  }  if (inputType.getTypeTag() != ATypeTag.RECORD) {    throw new AlgebricksException("The input type " + inputType + " is not a valid record type!");  }  ARecordType inputRecType=(ARecordType)inputType;  if (reqType.isOpen() != inputRecType.isOpen()) {    return false;  }  IAType[] reqTypes=reqType.getFieldTypes();  String[] reqFieldNames=reqType.getFieldNames();  IAType[] inputTypes=inputRecType.getFieldTypes();  String[] inputFieldNames=((ARecordType)inputType).getFieldNames();  if (reqTypes.length != inputTypes.length) {    return false;  }  for (int i=0; i < reqTypes.length; i++) {    if (!reqFieldNames[i].equals(inputFieldNames[i])) {      return false;    }    IAType reqTypeInside=reqTypes[i];    if (NonTaggedFormatUtil.isOptional(reqTypes[i])) {      reqTypeInside=((AUnionType)reqTypes[i]).getActualType();    }    IAType inputTypeInside=inputTypes[i];    if (NonTaggedFormatUtil.isOptional(inputTypes[i])) {      if (!NonTaggedFormatUtil.isOptional(reqTypes[i])) {        return false;      }      inputTypeInside=((AUnionType)inputTypes[i]).getActualType();    }    if (inputTypeInside.getTypeTag() != ATypeTag.MISSING && !reqTypeInside.equals(inputTypeInside)) {      return false;    }  }  return true;}  }
class C{  public void endTimingSpecifierList(){}  }
class C{  public static int objectEquals(Object obj1,Object obj2){  return obj1.equals(obj2) ? TRUE : FALSE;}  }
class C{  public int count(){  return mAdapter.count();}  }
class C{  protected void sendTestMessage(EasyDccMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public boolean isGlyphVisible(int glyphIndex){  int idx=getGVIdx(glyphIndex);  return gvs[idx].isGlyphVisible(glyphIndex - off[idx]);}  }
class C{  public void shutdown(){  running.set(false);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deprecated: ");  result.append(deprecated);  result.append(", comment: ");  result.append(comment);  result.append(')');  return result.toString();}  }
class C{  public static void write(int x){  writeByte((x >>> 24) & 0xff);  writeByte((x >>> 16) & 0xff);  writeByte((x >>> 8) & 0xff);  writeByte((x >>> 0) & 0xff);}  }
class C{  @SuppressWarnings("unchecked") public void writeShort(short x) throws SQLException {  attribs.add(Short.valueOf(x));}  }
class C{  protected void checkForTokens(String content,int startOffset,int endOffset){  while (startOffset <= endOffset) {    while (isDelimiter(content.substring(startOffset,startOffset + 1))) {      if (startOffset < endOffset) {        startOffset++;      } else {        return;      }    }    if (isQuoteDelimiter(content.substring(startOffset,startOffset + 1))) {      startOffset=getQuoteToken(content,startOffset,endOffset);    } else {      startOffset=getOtherToken(content,startOffset,endOffset);    }  }}  }
class C{  private static boolean isBuildInObject(Class cls){  return cls.isPrimitive() || cls.getName().startsWith("java.") || IgniteUuid.class == cls || IgniteBiTuple.class == cls || GridTuple3.class == cls;}  }
class C{  public boolean isEMailVerified(){  return m_bpc != null && m_bpc.isEMailVerified();}  }
class C{  public void deploy(String path,InputStream war,boolean update) throws TomcatManagerException, IOException {  deploy(path,war,update,null);}  }
class C{  public BukkitChunk_1_9(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public final Double2D negate(){  return new Double2D(-x,-y);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  public static int hash(char item){  return item;}  }
class C{  private void readRegistry(String registryId){  Assert.isNotNull(registryId);  JavaContextType javaType=new JavaContextType();  javaType.setId("java");  FieldResolver fieldResolver=new FieldResolver();  fieldResolver.setType("field");  javaType.addResolver(fieldResolver);  LocalVarResolver localVarResolver=new LocalVarResolver();  localVarResolver.setType("localVar");  javaType.addResolver(localVarResolver);  VarResolver varResolver=new VarResolver();  varResolver.setType("var");  javaType.addResolver(varResolver);  NameResolver nameResolver=new NameResolver();  nameResolver.setType("newName");  javaType.addResolver(nameResolver);  TypeResolver typeResolver=new TypeResolver();  typeResolver.setType("newType");  javaType.addResolver(typeResolver);  ElementTypeResolver elementTypeResolver=new ElementTypeResolver();  elementTypeResolver.setType("elemType");  javaType.addResolver(elementTypeResolver);  TypeVariableResolver typeVariableResolver=new TypeVariableResolver();  typeVariableResolver.setType("argType");  javaType.addResolver(typeVariableResolver);  LinkResolver linkResolver=new LinkResolver();  linkResolver.setType("link");  javaType.addResolver(linkResolver);  ImportsResolver importsResolver=new ImportsResolver();  importsResolver.setType("import");  javaType.addResolver(importsResolver);  StaticImportResolver staticImportResolver=new StaticImportResolver();  staticImportResolver.setType("importStatic");  javaType.addResolver(staticImportResolver);  ExceptionVariableNameResolver exceptionVariableNameResolver=new ExceptionVariableNameResolver();  exceptionVariableNameResolver.setType("exception_variable_name");  javaType.addResolver(exceptionVariableNameResolver);  addContextType(javaType);  JavaContextType statements=new JavaContextType();  statements.setId("java-statements");  addContextType(statements);  JavaContextType members=new JavaContextType();  members.setId("java-members");  addContextType(members);  JavaContextType javadoc=new JavaContextType();  javadoc.setId("javadoc");  addContextType(javadoc);}  }
class C{  private void stopManagingActivity(){  try {    this.pooledMembershipExecutor.shutdownNow();    Iterator<DistributedMember> it=repo.getMonitoringRegionMap().keySet().iterator();    while (it.hasNext()) {      removeMemberArtifacts(it.next(),false);    }  } catch (  Exception e) {    throw new ManagementException(e);  } finally {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean accept(String aPath){  boolean ok=true;  if (includes != null) {    ok=false;    for (    String include : includes) {      if (matcher.match(include,aPath)) {        ok=true;        break;      }    }  }  if (ok && excludes != null) {    for (    String exclude : excludes) {      if (matcher.match(exclude,aPath)) {        ok=false;        break;      }    }  }  return ok;}  }
class C{  public IgfsStringDelimiterRecordResolver(String... delims){  super(toBytes(Charset.defaultCharset(),delims));}  }
class C{  public boolean cachedOrAllEvents(){  return this.dataPolicy.withStorage() || allEvents();}  }
class C{  public boolean isProxyIpAnyLocalAddress(){  return proxyIpAnyLocalAddress;}  }
class C{  public static final int min(int a,int b,int c){  return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);}  }
class C{  private boolean validateBoolean(String value,boolean defaultValue){  if (isEmpty(value)) {    return defaultValue;  }  return Boolean.valueOf(value).booleanValue();}  }
class C{  public void testMergeOneFilterWithMultipleMappingsIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping2</url-pattern>"+ "  </filter-mapping>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping3</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  List<String> filterMappings=WebXmlUtils.getFilterMappings(srcWebXml,"f1");  assertEquals(3,filterMappings.size());  assertEquals("/f1mapping1",filterMappings.get(0));  assertEquals("/f1mapping2",filterMappings.get(1));  assertEquals("/f1mapping3",filterMappings.get(2));}  }
class C{  public boolean waitForCompletingTransaction(TXId txId){  TXStateProxy val;  val=this.hostedTXStates.get(txId);  if (val == null) {synchronized (this.hostedTXStates) {      val=this.hostedTXStates.get(txId);    }  }  if (val != null && val.isRealDealLocal()) {    TXStateProxyImpl impl=(TXStateProxyImpl)val;    TXState state=impl.getLocalRealDeal();    if (state.waitForPreviousCompletion()) {      return true;    }  }  return false;}  }
class C{  public static PeriodType years(){  PeriodType type=cYears;  if (type == null) {    type=new PeriodType("Years",new DurationFieldType[]{DurationFieldType.years()},new int[]{0,-1,-1,-1,-1,-1,-1,-1});    cYears=type;  }  return type;}  }
class C{  public double[] computeLocal(int timeSeries[][],int col){  initialise();  addObservations(timeSeries,col);  return computeLocalFromPreviousObservations(timeSeries,col);}  }
class C{  public static boolean isYesterday(DateTime date){  DateTime todayMidnight=new DateTime().withTimeAtStartOfDay();  DateTime yesterdayMidnight=new DateTime().minusDays(1).withTimeAtStartOfDay();  return (yesterdayMidnight.getMillis() == date.getMillis()) || (yesterdayMidnight.isBefore(date.getMillis()) && todayMidnight.isAfter(date.getMillis()));}  }
class C{  private boolean deleteDatabaseNow(String dbname){  File dbfile=this.getContext().getDatabasePath(dbname);  try {    return this.getContext().deleteDatabase(dbfile.getAbsolutePath());  } catch (  Exception e) {    Log.e(LOG_TAG,"couldn't delete database",e);    return false;  }}  }
class C{  public ImageCacheParams(Context context,String rootDirectory){  diskCacheDir=Utils.getDiskCacheDir(context,rootDirectory);}  }
class C{  public XmlObjectParser(XmlNamespaceDictionary namespaceDictionary){  this.namespaceDictionary=Preconditions.checkNotNull(namespaceDictionary);}  }
class C{  static void usageInfo(boolean welcome){  if (welcome) {    System.out.println("\n" + welcomeMsg + "\n");  }  System.out.println("\nUsage  : java edu.cmu.gene.algorithm.biolingua.BiolinguaRunner [parameters]\n\n" + "Parameters:\n" + "    -mfile    Name of file containing the Correlation Matrix       (def=cm.txt)\n"+ "    -gfile    Name of File containing the initial Graph            (def=g.txt)\n"+ "    -ka#      Coefficient for Annotations in eval. metric function (def=.1)\n"+ "    -ke#      Coefficient for Errors      in eval. metric function (def=3)\n"+ "    -kl#      Coefficient for Links       in eval. metric function (def=4)\n"+ "    -kp#      Coefficient for Predictions in eval. metric function (def=3)\n\n"+ "Example: java edu.cmu.gene.algorithm.biolingua.BiolinguaRunner  -mcm.txt  -gg.txt  -ka.1  -ke3  -kl4  -kp3\n\n"+ "  Runs biolingua with the correlation matrix in file cm.txt, starting search\n"+ "  from graph in file g.txt, and using coefficients .1, 3, 4, and 3.");}  }
class C{  public synchronized void addDatabaseObject(DbObject obj){  HashMap<String,DbObject> map=getMap(obj.getType());  String name=obj.getName();  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists");  }  map.put(name,obj);}  }
class C{  protected void removeRange(int fromIndex,int toIndex){  modCount++;  int numMoved=size - toIndex;  System.arraycopy(elementData,toIndex,elementData,fromIndex,numMoved);  int newSize=size - (toIndex - fromIndex);  while (size != newSize)   elementData[--size]=null;}  }
class C{  public ContentLengthHeader createContentLengthHeader(int contentLength) throws InvalidArgumentException {  if (contentLength < 0)   throw new InvalidArgumentException("bad contentLength");  ContentLength c=new ContentLength();  c.setContentLength(contentLength);  return c;}  }
class C{  public FastExample2SparseTransform(ExampleSet es) throws UserError {  this.mapping=new int[es.getExampleTable().getNumberOfAttributes()];  for (int i=0; i < mapping.length; i++) {    mapping[i]=-1;  }  int pos=0;  this.attributes=new Attribute[es.getAttributes().size()];  this.allIndices=new int[es.getAttributes().size()];  for (  Attribute attribute : es.getAttributes()) {    int tableIndex=attribute.getTableIndex();    if (tableIndex != Attribute.VIEW_ATTRIBUTE_INDEX) {      this.mapping[attribute.getTableIndex()]=pos;      this.attributes[pos]=attribute;      this.allIndices[pos]=pos;      pos++;    } else {      throw new UserError(null,140);    }  }  for (  Example e : es) {    e.getDataRow().trim();  }}  }
class C{  public ReilOperand(final ReilOperandNode root){  m_root=Preconditions.checkNotNull(root);}  }
class C{  public void testMac13() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    try {      macs[i].update(b,-10,b.length);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,0,-10);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,0,b.length + 1);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,b.length - 1,2);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public static int pointsToPixels(double pt,int dpi){  return millisToPixels(pointsToMillis(pt),dpi);}  }
class C{  public boolean isIdentical(Version version){  return compareTo(version) == 0;}  }
class C{  public static void drawImage(Graphics2D g2d,RenderableImage filter){  if (filter instanceof PaintRable) {    PaintRable pr=(PaintRable)filter;    if (pr.paintRable(g2d))     return;  }  AffineTransform at=g2d.getTransform();  RenderedImage ri=filter.createRendering(new RenderContext(at,g2d.getClip(),g2d.getRenderingHints()));  if (ri == null)   return;  g2d.setTransform(IDENTITY);  drawImage(g2d,GraphicsUtil.wrap(ri));  g2d.setTransform(at);}  }
class C{  public byte[] serialise(final Object object,final boolean prettyPrint) throws SerialisationException {  final ByteArrayBuilder byteArrayBuilder=new ByteArrayBuilder();  try {    serialise(object,JSON_FACTORY.createGenerator(byteArrayBuilder,JsonEncoding.UTF8),prettyPrint);  } catch (  IOException e) {    throw new SerialisationException(e.getMessage(),e);  }  return byteArrayBuilder.toByteArray();}  }
class C{  public static EncodedImage create(String i) throws IOException {  return create(Display.getInstance().getResourceAsStream(EncodedImage.class,i));}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);}  }
class C{  public static String executeStringQuery(String sql,Connection con,boolean mandatory) throws AdeException {  final StringQueryExecuter executer=new StringQueryExecuter(sql,con,mandatory);  executer.executeQuery();  return executer.m_result;}  }
class C{  public static void print(Object self,PrintWriter out){  if (out == null) {    out=new PrintWriter(System.out);  }  out.print(InvokerHelper.toString(self));}  }
class C{  public final void enlarge(int k){  if (k <= size) {    return;  }  int i;  GF2nElement[] res=new GF2nElement[k];  System.arraycopy(coeff,0,res,0,size);  GF2nField f=coeff[0].getField();  if (coeff[0] instanceof GF2nPolynomialElement) {    for (i=size; i < k; i++) {      res[i]=GF2nPolynomialElement.ZERO((GF2nPolynomialField)f);    }  } else   if (coeff[0] instanceof GF2nONBElement) {    for (i=size; i < k; i++) {      res[i]=GF2nONBElement.ZERO((GF2nONBField)f);    }  }  size=k;  coeff=res;}  }
class C{  public TaxiRideSource(String dataFilePath){  this(dataFilePath,0,1);}  }
class C{  public void addSharedAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/add-shared-avatar",config.toXML());}  }
class C{  private void cancelSubscription(){  if (subscriber != null && !subscriber.isUnsubscribed()) {    subscriber.unsubscribe();  }}  }
class C{  protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (aspectRatio != NO_RATIO) {    int widthSpecSize=MeasureSpec.getSize(widthMeasureSpec);    int heightSpecSize=MeasureSpec.getSize(heightMeasureSpec);    int width=widthSpecSize;    int height=heightSpecSize;    if (width > 0 && height > 0) {      float defaultRatio=((float)width) / ((float)height);      if (defaultRatio < aspectRatio) {        height=(int)(width / aspectRatio);      } else       if (defaultRatio > aspectRatio) {        width=(int)(height * aspectRatio);      }      width=Math.min(width,widthSpecSize);      height=Math.min(height,heightSpecSize);      setMeasuredDimension(width,height);      return;    }  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public StoragePoolRestRep deregister(URI id){  return client.post(StoragePoolRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  public final IntGrid3D multiply(IntGrid3D withThis){  checkBounds(withThis);  int[][] fieldx=null;  int[] fieldxy=null;  int[][][] ofield=withThis.field;  int[][] ofieldx=null;  int[] ofieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=ofield[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      ofieldxy=ofieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]*=ofieldxy[z];    }  }  return this;}  }
class C{  public static double bachelierBlackFormula(final PlainVanillaPayoff payoff,@Real final double forward,@StdDev final double stddev,@Real final double discount){  return bachelierBlackFormula(payoff.optionType(),payoff.strike(),forward,stddev,discount);}  }
class C{  public void mouseEntered(MouseEvent event){}  }
class C{  public static Vulnerability transform(IItem item){  Vulnerability vuln=new Vulnerability();  if (item.getName() != null) {    vuln.setTitel(item.getName().replaceAll("\\s"," "));  }  vuln.setDescription(item.getDescription());  return vuln;}  }
class C{  public void addChannelMap(ChannelMap channelMap){  if (!mChannelMaps.contains(channelMap)) {    mChannelMaps.add(channelMap);    int index=mChannelMaps.indexOf(channelMap);    fireIntervalAdded(this,index,index);    broadcast(new ChannelMapEvent(channelMap,Event.ADD));  }}  }
class C{  public URL find(String classname){  String cname=classname.replace('.','/') + ".class";  ClassLoader cl=(ClassLoader)clref.get();  if (cl == null)   return null; else   return cl.getResource(cname);}  }
class C{  public SetQuestToPlayerAgeAction(final String questname){  this.questname=checkNotNull(questname);  this.index=-1;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public void cleanFiles(Predicate<File> predicate){  storage.directory().mkdirs();  for (  File file : storage.directory().listFiles(null)) {    try {      Files.delete(file.toPath());    } catch (    IOException e) {    }  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  setHeader();  return success;}  }
class C{  private static int blendColors(int color1,int color2,double ratio){  double ir=1.0 - ratio;  int a=(int)(Color.alpha(color1) * ratio + Color.alpha(color2) * ir);  int r=(int)(Color.red(color1) * ratio + Color.red(color2) * ir);  int g=(int)(Color.green(color1) * ratio + Color.green(color2) * ir);  int b=(int)(Color.blue(color1) * ratio + Color.blue(color2) * ir);  return Color.argb(a,r,g,b);}  }
class C{  public ParallaxPage lastParallaxFactor(float factor){  this.lastParallaxFactor=factor;  return this;}  }
class C{  public TestResult(){}  }
class C{  private boolean runConstantCheck(DataIdentifier dat1) throws LanguageException {  LOG.trace("PARFOR: runConstantCheck.");  boolean ret=true;  LinearFunction f1=getLinearFunction(dat1);  if (f1 == null)   return true;  LOG.trace("PARFOR: f1: " + f1.toString());  boolean gcheck=true;  for (  String var : _bounds._local) {    if (var.startsWith(INTERAL_FN_INDEX_ROW) || var.startsWith(INTERAL_FN_INDEX_COL)) {      continue;    }    boolean lcheck=false;    for (int i=0; i < f1._vars.length; i++)     if (var.equals(f1._vars[i]))     if (f1._b[i] != 0)     lcheck=true;    if (!lcheck) {      gcheck=false;      break;    }  }  if (gcheck)   ret=false;  return ret;}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView exception(HttpServletRequest request,Exception exception){  String uri=request.getRequestURI();  logger.error("Request page: " + uri + " raised exception : "+ exception);  ModelAndView model=new ModelAndView("error/general");  model.addObject("error",Throwables.getRootCause(exception).getMessage());  model.addObject("status",Throwables.getRootCause(exception).getCause());  model.addObject("path",uri);  model.addObject("customMessage",exception.getMessage());  return model;}  }
class C{  @Deprecated public static CallSite bootstrap(Lookup caller,String name,MethodType type){  return realBootstrap(caller,name,CALL_TYPES.METHOD.ordinal(),type,false,false,false);}  }
class C{  @Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){  final int count=getChildCount();  int leftPos=getPaddingLeft();  int rightPos=right - left - getPaddingRight();  final int middleLeft=leftPos + mLeftWidth;  final int middleRight=rightPos - mRightWidth;  final int parentTop=getPaddingTop();  final int parentBottom=bottom - top - getPaddingBottom();  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() != GONE) {      final LayoutParams lp=(LayoutParams)child.getLayoutParams();      final int width=child.getMeasuredWidth();      final int height=child.getMeasuredHeight();      if (lp.position == LayoutParams.POSITION_LEFT) {        mTmpContainerRect.left=leftPos + lp.leftMargin;        mTmpContainerRect.right=leftPos + width + lp.rightMargin;        leftPos=mTmpContainerRect.right;      } else       if (lp.position == LayoutParams.POSITION_RIGHT) {        mTmpContainerRect.right=rightPos - lp.rightMargin;        mTmpContainerRect.left=rightPos - width - lp.leftMargin;        rightPos=mTmpContainerRect.left;      } else {        mTmpContainerRect.left=middleLeft + lp.leftMargin;        mTmpContainerRect.right=middleRight - lp.rightMargin;      }      mTmpContainerRect.top=parentTop + lp.topMargin;      mTmpContainerRect.bottom=parentBottom - lp.bottomMargin;      Gravity.apply(lp.gravity,width,height,mTmpContainerRect,mTmpChildRect);      child.layout(mTmpChildRect.left,mTmpChildRect.top,mTmpChildRect.right,mTmpChildRect.bottom);    }  }}  }
class C{  public static void testNonBCPRef2BCPRef() throws Throwable {  Class bcpInterface=Serializable.class;  Class bcpSuperClass=File.class;  Class nonBcpInterface=TestSerializableInterface.class;  Class nonBcpSuperSiblingClass=TestSerializableClass.class;  Class nonBcpSubClass=TestFileChildClass.class;  Object bcpSuperObj=new File(".");  Object testSuperSiblingObj=new TestSerializableClass();  Object testSubObj=new TestFileChildClass(".");  Class[] parents={bcpInterface,bcpSuperClass};  for (  TestConversionMode mode : TestConversionMode.values()) {    for (    Class parent : parents) {      testConversion(mode,nonBcpSubClass,parent,testSubObj,testSubObj,false,null);      testConversion(mode,nonBcpSubClass,parent,null,null,false,null);      testConversion(mode,parent,nonBcpSubClass,bcpSuperObj,null,true,ClassCastException.class);      testConversion(mode,parent,nonBcpSubClass,testSubObj,testSubObj,false,null);      testConversion(mode,parent,nonBcpSubClass,null,null,false,null);    }    testConversion(mode,bcpInterface,nonBcpSubClass,testSuperSiblingObj,null,true,ClassCastException.class);    Class[] siblings={nonBcpSubClass,bcpSuperClass};    for (    Class sibling : siblings) {      testConversion(mode,nonBcpSuperSiblingClass,sibling,testSuperSiblingObj,null,true,ClassCastException.class);      testConversion(mode,nonBcpSuperSiblingClass,sibling,null,null,false,null);      testConversion(mode,nonBcpInterface,sibling,testSubObj,testSubObj,false,null);      testConversion(mode,nonBcpInterface,sibling,null,null,false,null);      testConversion(mode,nonBcpInterface,sibling,testSuperSiblingObj,testSubObj,true,ClassCastException.class);    }  }}  }
class C{  public Sign(){  super(Number.class,Number.class);}  }
class C{  public XlsxNumberFormats parseNumberFormats() throws XMLStreamException, IOException {  boolean isCellFormats=false;  int cellFormatIndex=0;  XlsxNumberFormats xlsxNumberFormats=new XlsxNumberFormats();  XMLStreamReader reader=null;  try (ZipFile zipFile=new ZipFile(xlsxFile)){    ZipEntry zipEntry=zipFile.getEntry(XlsxUtilities.XLSX_PATH_PREFIX + stylesPath);    if (zipEntry == null) {      return null;    }    InputStream inputStream=zipFile.getInputStream(zipEntry);    reader=xmlFactory.createXMLStreamReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8));    while (reader.hasNext()) {switch (reader.next()) {case XMLStreamReader.START_ELEMENT:        if (TAG_NUMBER_FORMAT.equals(reader.getLocalName())) {          Attributes attributes=XlsxUtilities.getAttributes(reader);          xlsxNumberFormats.addNumberFormat(Integer.parseInt(attributes.getValue(ATT_NUM_FORM_ID)),attributes.getValue(ATT_FORMAT_CODE));        } else         if (TAG_CELL_FORMATS.equals(reader.getLocalName())) {          isCellFormats=true;          xlsxNumberFormats.initializeCellNumberFormatIds(Integer.parseInt(XlsxUtilities.getAttributes(reader).getValue(ATT_COUNT)));        } else         if (isCellFormats && TAG_FORMAT.equals(reader.getLocalName())) {          xlsxNumberFormats.setCellNumberFormatId(cellFormatIndex,Integer.parseInt(XlsxUtilities.getAttributes(reader).getValue(ATT_NUMBER_FORMAT_ID)));          ++cellFormatIndex;        }      break;case XMLStreamReader.END_ELEMENT:    if (TAG_CELL_FORMATS.equals(reader.getLocalName())) {      isCellFormats=false;    }  break;default :break;}}}  finally {if (reader != null) {reader.close();}}return xlsxNumberFormats;}  }
class C{  public static void addPoolToPreferredPoolMap(Map<String,String> preferredPoolToExportTypeMap,String pool,String type){  String oldType=preferredPoolToExportTypeMap.get(pool);  if (oldType == null || (!oldType.equals(type) && type.equals(ExportGroupType.Cluster.name()))) {    preferredPoolToExportTypeMap.put(pool,type);  }}  }
class C{  @Override public void onEntered(final ActiveEntity entity,final StendhalRPZone zone,final int newX,final int newY){  if (!(entity instanceof RPEntity)) {    return;  }  final RPEntity rpentity=(RPEntity)entity;  if (playersOnly && !(rpentity instanceof Player)) {    return;  }  if (handleAdded(rpentity)) {    handleMovement(rpentity);    addTarget(rpentity);  }}  }
class C{  public Set<String> knownMethods(String className){  Set<String> r=new HashSet<String>();  if (instructionMap.get(className) != null)   r.addAll(instructionMap.get(className).keySet());  return r;}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public boolean addEntry(T entry){  if (!mOriginalData.contains(entry)) {    mOriginalData.add(entry);    mViewData.add(new ViewObject<T>(entry));    return true;  }  return false;}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder longitude(double longitude){  this.longitude=longitude;  return this;}  }
class C{  protected Node newNode(){  return new SVGOMMPathElement();}  }
class C{  public void remove(Video video){  videoList.remove(video);  notifyDataSetChanged();}  }
class C{  public boolean exists(){  return false;}  }
class C{  private void merge(Relation<V> relation,List<ORCLUSCluster> clusters,int k_new,int d_new,IndefiniteProgress cprogress){  ArrayList<ProjectedEnergy> projectedEnergies=new ArrayList<>((clusters.size() * (clusters.size() - 1)) >>> 1);  for (int i=0; i < clusters.size(); i++) {    for (int j=i + 1; j < clusters.size(); j++) {      ORCLUSCluster c_i=clusters.get(i);      ORCLUSCluster c_j=clusters.get(j);      projectedEnergies.add(projectedEnergy(relation,c_i,c_j,i,j,d_new));    }  }  while (clusters.size() > k_new) {    if (cprogress != null) {      cprogress.setProcessed(clusters.size(),LOG);    }    ProjectedEnergy minPE=Collections.min(projectedEnergies);    for (int c=0; c < clusters.size(); c++) {      if (c == minPE.i) {        clusters.remove(c);        clusters.add(c,minPE.cluster);      }      if (c == minPE.j) {        clusters.remove(c);      }    }    int i=minPE.i, j=minPE.j;    for (Iterator<ProjectedEnergy> it=projectedEnergies.iterator(); it.hasNext(); ) {      ProjectedEnergy pe=it.next();      if (pe.i == i || pe.i == j || pe.j == i || pe.j == j) {        it.remove();      } else {        if (pe.i > j) {          pe.i-=1;        }        if (pe.j > j) {          pe.j-=1;        }      }    }    ORCLUSCluster c_ij=minPE.cluster;    for (int c=0; c < clusters.size(); c++) {      if (c < i) {        projectedEnergies.add(projectedEnergy(relation,clusters.get(c),c_ij,c,i,d_new));      } else       if (c > i) {        projectedEnergies.add(projectedEnergy(relation,clusters.get(c),c_ij,i,c,d_new));      }    }  }}  }
class C{  protected void fireEvent(final DebugEvent event){  DebugPlugin.getDefault().fireDebugEventSet(new DebugEvent[]{event});}  }
class C{  public void sortWithIndex(int xi,int xj,IntVector index){  if (xi < xj) {    double x;    int xm=(xi + xj) / 2;    x=Math.min(V[xi],Math.max(V[xm],V[xj]));    int i=xi;    int j=xj;    while (i < j) {      while (V[i] < x && i < xj) {        i++;      }      while (V[j] > x && j > xi) {        j--;      }      if (i <= j) {        swap(i,j);        index.swap(i,j);        i++;        j--;      }    }    sortWithIndex(xi,j,index);    sortWithIndex(i,xj,index);  }}  }
class C{  public boolean isNumber(){  return m_dataType.equals(X_AD_ImpFormat_Row.DATATYPE_Number);}  }
class C{  public static CompoundSelect intersect(Query query){  return new CompoundSelect(CompoundSelectOperator.INTERSECT,query);}  }
class C{  @Override public String toString(){  return "CandidatePair (State=" + getState() + " Priority="+ getPriority()+ "):\n\tLocalCandidate="+ getLocalCandidate()+ "\n\tRemoteCandidate="+ getRemoteCandidate();}  }
class C{  static int checkKeySize(long keyGenMech,int keySize,Token token) throws InvalidAlgorithmParameterException, ProviderException {  int sigKeySize;switch ((int)keyGenMech) {case (int)CKM_DES_KEY_GEN:    if ((keySize != 64) && (keySize != 56)) {      throw new InvalidAlgorithmParameterException("DES key length must be 56 bits");    }  sigKeySize=56;break;case (int)CKM_DES2_KEY_GEN:case (int)CKM_DES3_KEY_GEN:if ((keySize == 112) || (keySize == 128)) {sigKeySize=112;} else if ((keySize == 168) || (keySize == 192)) {sigKeySize=168;} else {throw new InvalidAlgorithmParameterException("DESede key length must be 112, or 168 bits");}break;default :CK_MECHANISM_INFO info=null;try {info=token.getMechanismInfo(keyGenMech);} catch (PKCS11Exception p11e) {throw new ProviderException("Cannot retrieve mechanism info",p11e);}if (info == null) {return keySize;}int minKeySize=(int)info.ulMinKeySize;int maxKeySize=(int)info.ulMaxKeySize;if (keyGenMech != CKM_RC4_KEY_GEN || minKeySize < 8) {minKeySize=(int)info.ulMinKeySize << 3;maxKeySize=(int)info.ulMaxKeySize << 3;}if (minKeySize < 40) minKeySize=40;if (keySize < minKeySize || keySize > maxKeySize) {throw new InvalidAlgorithmParameterException("Key length must be between " + minKeySize + " and "+ maxKeySize+ " bits");}if (keyGenMech == CKM_AES_KEY_GEN) {if ((keySize != 128) && (keySize != 192) && (keySize != 256)) {throw new InvalidAlgorithmParameterException("AES key length must be " + minKeySize + (maxKeySize >= 192 ? ", 192" : "")+ (maxKeySize >= 256 ? ", or 256" : "")+ " bits");}}sigKeySize=keySize;}return sigKeySize;}  }
class C{  public static ImageIcon createImageIcon(String path,String description){  URL imgURL=Utils.class.getClassLoader().getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL,description);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  private void scanThreadInternal(Address gprs,int verbosity,Address sentinelFp){  if (false) {    VM.sysWriteln("Scanning thread ",thread.getThreadSlot()," from thread ",RVMThread.getCurrentThreadSlot());  }  if (verbosity >= 2) {    Log.writeln("--- Start Of Stack Scan ---\n");    Log.write("Thread #");    Log.writeln(thread.getThreadSlot());  }  if (VM.VerifyAssertions)   assertImmovableInCurrentCollection();  getHWExceptionRegisters();  iteratorGroup.newStackWalk(thread,gprs);  if (verbosity >= 2)   dumpTopFrameInfo(verbosity);  if (fp.NE(StackFrameLayout.getStackFrameSentinelFP())) {    prevFp=Address.zero();    reinstallReturnBarrier=Options.useReturnBarrier.getValue() || Options.useShortStackScans.getValue();    while (Magic.getCallerFramePointer(fp).NE(sentinelFp)) {      if (false) {        VM.sysWriteln("Thread ",RVMThread.getCurrentThreadSlot()," at fp = ",fp);      }      prevFp=scanFrame(verbosity);      ip=Magic.getReturnAddress(fp,thread);      fp=Magic.getCallerFramePointer(fp);    }  }  if (verbosity >= 2)   Log.writeln("--- End Of Stack Scan ---\n");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public EdgeNGramTokenizer(int minGram,int maxGram){  super(minGram,maxGram,true);}  }
class C{  public void dispose(){  for (  WindowOpenInfo openInfo : windowOpenMode.values()) {    if (openInfo.getOpenMode() == OpenMode.DIALOG) {      JDialog dialog=(JDialog)openInfo.getData();      dialog.setVisible(false);    }  }  if (isMainWindowManager) {    WatchDog watchDog=AppBeans.get(WatchDog.NAME);    watchDog.stopTasks();  }  for (  Window window : windowOpenMode.keySet()) {    Frame frame=window.getFrame();    if (frame instanceof Component.Disposable)     ((Component.Disposable)frame).dispose();  }  tabs.clear();  windowOpenMode.clear();  stacks.clear();}  }
class C{  @Override public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  return false;}  }
class C{  private void ensureCapacity(int newNumStates){  int oldLength=epsilon.length;  if (newNumStates < oldLength)   return;  int newStatesLength=Math.max(oldLength * 2,newNumStates);  boolean[] newFinal=new boolean[newStatesLength];  boolean[] newIsPush=new boolean[newStatesLength];  Action[] newAction=new Action[newStatesLength];  StateSet[][] newTable=new StateSet[newStatesLength][numInput];  StateSet[] newEpsilon=new StateSet[newStatesLength];  System.arraycopy(isFinal,0,newFinal,0,numStates);  System.arraycopy(action,0,newAction,0,numStates);  System.arraycopy(epsilon,0,newEpsilon,0,numStates);  System.arraycopy(table,0,newTable,0,numStates);  isFinal=newFinal;  action=newAction;  epsilon=newEpsilon;  table=newTable;}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  static <T>void subscribe(Subscriber<? super T> s,Iterator<? extends T> it){  if (it == null) {    SubscriptionHelper.error(s,new NullPointerException("The iterator is null"));    return;  }  boolean b;  try {    b=it.hasNext();  } catch (  Throwable e) {    SubscriptionHelper.error(s,e);    return;  }  if (!b) {    SubscriptionHelper.complete(s);    return;  }  if (s instanceof ConditionalSubscriber) {    s.onSubscribe(new IterableSubscriptionConditional<>((ConditionalSubscriber<? super T>)s,it));  } else {    s.onSubscribe(new IterableSubscription<>(s,it));  }}  }
class C{  public void write(byte[] out){  ConnectedThread r;synchronized (this) {    if (mState != STATE_CONNECTED)     return;    r=mConnectedThread;  }  r.write(out);}  }
class C{  public ContainerVmAllocationPolicySimple(List<? extends ContainerHost> list){  super(list);  setFreePes(new ArrayList<Integer>());  for (  ContainerHost host : getContainerHostList()) {    getFreePes().add(host.getNumberOfPes());  }  setVmTable(new HashMap<String,ContainerHost>());  setUsedPes(new HashMap<String,Integer>());}  }
class C{  @Override protected void postDestroyRegion(boolean destroyDiskRegion,RegionEventImpl event){  distributedRegionCleanup(event);  try {    super.postDestroyRegion(destroyDiskRegion,event);  } catch (  CancelException e) {    logger.warn("postDestroyRegion: encountered cancellation",e);  }  if (this.rmq != null && destroyDiskRegion) {    this.rmq.destroy();  }}  }
class C{  @Override public Date parse(String source,ParsePosition pos){  return null;}  }
class C{  public ContextedRuntimeException(){  super();  exceptionContext=new DefaultExceptionContext();}  }
class C{  public void removeExtension(Project proj){  if (!(proj instanceof J2SEProject)) {    logger.log(Level.WARNING,"Trying to load Assets Properties from non-asset project");    return;  }  FileObject projDir=proj.getProjectDirectory();  final FileObject buildXmlFO=J2SEProjectUtil.getBuildXml((J2SEProject)proj);  if (buildXmlFO == null) {    logger.log(Level.WARNING,"The project build script does not exist, the project cannot be extended by jMP.");    return;  }  AntBuildExtender extender=proj.getLookup().lookup(AntBuildExtender.class);  if (extender != null) {    if (extender.getExtension(extensionName) != null) {      logger.log(Level.FINE,"Removing extension {0}",extensionName);      extender.removeExtension(extensionName);      try {        FileObject assetsBuildFile=getImplFile(projDir,false);        if (assetsBuildFile != null) {          logger.log(Level.FINE,"Deleting {0}",assetsBuildFile.getNameExt());          assetsBuildFile.delete();        }        logger.log(Level.FINE,"Saving project {0}",proj.getProjectDirectory().getName());      } catch (      IOException ex) {        Exceptions.printStackTrace(ex);      }      removeAntTaskLibrary(proj,antTaskLibrary);      try {        removeZipContents(proj.getProjectDirectory());      } catch (      IOException ex) {        Exceptions.printStackTrace(ex);      }    }  } else {    logger.log(Level.WARNING,"Trying to include assets build snippet in project type that doesn't support AntBuildExtender API contract.");  }}  }
class C{  @Override public Dimension preferredLayoutSize(Container parent){  if (isNativeSearchField()) {    return new Dimension();  } else {    return super.preferredLayoutSize(parent);  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String cFormulario=null;  Liquidacion oLiquidacion=null;  DynaValidatorForm oForm=(DynaValidatorForm)form;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,oForm);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oForm);    cFormulario=FormCreator.crearFormularioLiquidacion(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(FORMULARIO_KEY,cFormulario);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  void scan(JavaFileObject fo,Set<String> results) throws IOException {  InputStream in=fo.openInputStream();  try {    ClassFile cf=ClassFile.read(in);    for (    ConstantPool.CPInfo cpinfo : cf.constant_pool.entries()) {      if (cpinfo.getTag() == ConstantPool.CONSTANT_Utf8) {        String v=((ConstantPool.CONSTANT_Utf8_info)cpinfo).value;        if (v.matches("[A-Za-z0-9-_.]+"))         results.add(v);      }    }  } catch (  ConstantPoolException ignore) {  } finally {    in.close();  }}  }
class C{  public TurnoutOperation makeCopy(String n){  return new SensorTurnoutOperation(n,interval,maxTries);}  }
class C{  public TimingProblem(Problem problem){  super();  this.problem=problem;}  }
class C{  public void addModel(final DataModel<T> model){  dataModelList.add(model);}  }
class C{  public ClasspathSuite(Class<?> suiteClass,RunnerBuilder builder,ClassesFinderFactory factory) throws InitializationError {  super(builder,suiteClass,getSortedTestclasses(createFinder(suiteClass,factory)));  this.suiteClass=suiteClass;}  }
class C{  @Override public final void startElement(){  if ((this.field != null) || (this.idref != null)) {    getValueObject();  }}  }
class C{  public boolean show(Container c,int x,int y,int w,int h){synchronized (this) {    if (painting) {      return false;    }    showing=true;  }  try {    BufferInfo info=getBufferInfo(c);    BufferStrategy bufferStrategy;    if (info != null && info.isInSync() && (bufferStrategy=info.getBufferStrategy(false)) != null) {      SubRegionShowable bsSubRegion=(SubRegionShowable)bufferStrategy;      boolean paintAllOnExpose=info.getPaintAllOnExpose();      info.setPaintAllOnExpose(false);      if (bsSubRegion.showIfNotLost(x,y,(x + w),(y + h))) {        return !paintAllOnExpose;      }      bufferInfo.setContentsLostDuringExpose(true);    }  }  finally {synchronized (this) {      showing=false;      notifyAll();    }  }  return false;}  }
class C{  private static void saveChanges(){  PreferencesUtils.saveObject(PreferencesConstants.TABLE_COLUMN_SIZE_CACHE,columnSizeCache,false);  PreferencesUtils.saveObject(PreferencesConstants.HIDDEN_TABLE_COLUMN_CACHE,hiddenColumnsCache,false);  PreferencesUtils.saveObject(PreferencesConstants.TABLE_COLUMN_ORDER_CACHE,columnOrderCache,false);}  }
class C{  private Shape decodeMarkInterior(int width,int height){  double left=width / 2.0 - 4;  double top=height / 2.0 - 4;  path.reset();  path.moveTo(left + 1,top + 1);  path.lineTo(left + 8,top + 1);  path.lineTo(left + 4,top + 6);  path.closePath();  return path;}  }
class C{  public boolean match(SynchronizedStatement node,Object other){  if (!(other instanceof SynchronizedStatement)) {    return false;  }  SynchronizedStatement o=(SynchronizedStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  public HighPassBuilder order(int order){  mOrder=order;  return this;}  }
class C{  @Override public void show(Component invoker,int x,int y){  pane=(MapViewPane)invoker;  this.x=x;  this.y=y;  debugMenuItem.setState(pane.isDebugModeEnabled());  super.show(invoker,x,y);}  }
class C{  public void showError(Throwable error,View.OnClickListener onClickListener){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Error View, check if the error view was initialized.");  } else {    isErrorViewBeingShown=true;    changeViewsVisibility();    if (!viewsAreCustomized) {      boolean isNetworkError=error != null && error instanceof UnknownHostException;      viewErrorImage.setImageResource(isNetworkError ? R.drawable.icon_error_network : R.drawable.icon_error_unknown);      viewErrorMessage.setText(isNetworkError ? R.string.global_network_error : R.string.global_unknown_error);    }    viewErrorTryAgainButton.setOnClickListener(onClickListener);    setViewVisibility(viewError,View.VISIBLE);  }}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_BOOLEAN == right.getType())   return right; else   return right.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public CCSpriteFrame displayedFrame(){  return CCSpriteFrame.frame(getTexture(),rect_,CGPoint.zero());}  }
class C{  private void record(final BigdataValue describedResource,final BigdataStatement stmt){  Graph g=graphs.get(describedResource);  if (g == null) {    graphs.put(describedResource,g=new GraphImpl());  }  g.add(stmt);  if (log.isDebugEnabled())   log.debug("DESCRIBE: describedResource=" + describedResource + ", statement="+ stmt);}  }
class C{  public TObjectLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void verifyVO(VOServiceReview target){  assertEquals(voReview.getComment(),target.getComment());  assertEquals(voReview.getKey(),target.getKey());  assertEquals(voReview.getModificationDate(),target.getModificationDate());  assertEquals(voReview.getProductKey(),target.getProductKey());  assertEquals(voReview.getRating(),target.getRating());  assertEquals(voReview.getTitle(),target.getTitle());  assertEquals(voReview.getUserId(),target.getUserId());  assertEquals(voReview.getUserName(),target.getUserName());  assertEquals(voReview.getVersion(),target.getVersion());}  }
class C{  protected MultiplexingSocket(SocketImpl impl){  this((Socket)null);}  }
class C{  public IOException(Throwable cause){  super(cause == null ? null : cause.toString(),cause);}  }
class C{  @Override protected void finalize() throws Throwable {  mInternalListener=mListener=null;  super.finalize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.462 -0500",hash_original_method="C0959877EF2F1B6CBC27D41EECDAD445",hash_generated_method="F69C736707C112164A326AFEE9F3CAD1") public boolean isStretchAllColumns(){  return mStretchAllColumns;}  }
class C{  public X509CertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public static Frustum fromPerspective(Angle horizontalFieldOfView,int viewportWidth,int viewportHeight,double near,double far){  if (horizontalFieldOfView == null) {    String message=Logging.getMessage("Geom.ViewFrustum.FieldOfViewIsNull");    Logging.logger().fine(message);    throw new IllegalArgumentException(message);  }  double fov=horizontalFieldOfView.getDegrees();  double farMinusNear=far - near;  String message=null;  if (fov <= 0 || fov > 180)   message=Logging.getMessage("Geom.ViewFrustum.FieldOfViewOutOfRange",fov);  if (near <= 0 || farMinusNear <= 0)   message=Logging.getMessage("Geom.ViewFrustum.ClippingDistanceOutOfRange");  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double focalLength=1d / horizontalFieldOfView.tanHalfAngle();  double aspect=viewportHeight / (double)viewportWidth;  double lrLen=Math.sqrt(focalLength * focalLength + 1);  double btLen=Math.sqrt(focalLength * focalLength + aspect * aspect);  Plane leftPlane=new Plane(focalLength / lrLen,0d,0d - 1d / lrLen,0);  Plane rightPlane=new Plane(0d - focalLength / lrLen,0d,0d - 1d / lrLen,0d);  Plane bottomPlane=new Plane(0d,focalLength / btLen,0d - aspect / btLen,0d);  Plane topPlane=new Plane(0d,0d - focalLength / btLen,0d - aspect / btLen,0d);  Plane nearPlane=new Plane(0d,0d,0d - 1d,0d - near);  Plane farPlane=new Plane(0d,0d,1d,far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  protected int defaultNumClasses(){  return 2;}  }
class C{  public int size(){  return size;}  }
class C{  public void addDatasource(DsDef dsDef){  if (dsDefs.contains(dsDef)) {    throw new IllegalArgumentException("Datasource already defined: " + dsDef.dump());  }  dsDefs.add(dsDef);}  }
class C{  private void addListeners(){  StyledText text=fTextViewer.getTextWidget();  if (text != null) {    fKeyAndMouseListener=new KeyAndMouseListener();    text.addMouseListener(fKeyAndMouseListener);    text.addKeyListener(fKeyAndMouseListener);    fTextInputListener=new TextInputListener();    fTextViewer.addTextInputListener(fTextInputListener);  }}  }
class C{  protected void writeColumnDefaultValue(Table table,Column column,StringBuilder ddl){  printDefaultValue(getNativeDefaultValue(column),column.getMappedTypeCode(),ddl);}  }
class C{  @Override public boolean hasChildren(){  return !plugins.isEmpty();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.NEGATIVE_CONSTRAINT___CONSTRAINT_1:    return constraint_1 != null && !constraint_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void sendMomentaryFunctionGroup2(){  if (tc.getCommandStation().getCommandStationType() == 0x10) {    if (log.isDebugEnabled()) {      log.debug("Command station does not support Momentary functions");    }    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup2SetMomMsg(this.getDccAddress(),f5Momentary,f6Momentary,f7Momentary,f8Momentary);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String nName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    nName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    nName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  }  return nName;}  }
class C{  public void close() throws IOException {  if (debug) {    System.err.println("TarBuffer.closeBuffer().");  }  if (outStream != null) {    flushBlock();    if (outStream != System.out && outStream != System.err) {      outStream.close();      outStream=null;    }  } else   if (inStream != null) {    if (inStream != System.in) {      inStream.close();      inStream=null;    }  }}  }
class C{  private long givenSupplierService() throws ObjectNotFoundException {  long srvKey=100L;  newProductAndOrganization(srvKey,OrganizationRoleType.SUPPLIER);  newPriceModel(product);  return srvKey;}  }
class C{  @AssistedInject public ConnectionGroupResource(@Assisted UserContext userContext,@Assisted Directory<ConnectionGroup> directory,@Assisted ConnectionGroup connectionGroup,DirectoryObjectTranslator<ConnectionGroup,APIConnectionGroup> translator){  super(directory,connectionGroup,translator);  this.userContext=userContext;  this.connectionGroup=connectionGroup;}  }
class C{  public void addKeysTo(Collection dest){  List<GeoPointDto> data=this.load();  if (data != null) {    for (int i=data.size() - 1; i >= 0; i--) {      GeoPointDto item=data.get(i);      String id=(item == null) ? null : item.getId();      if ((id != null) && (id.length() > 0)) {        try {          Long idLong=Long.parseLong(id);          if ((idLong != null) && (!dest.contains(idLong))) {            dest.add(idLong);          }        } catch (        Exception ex) {          Log.w(Global.LOG_CONTEXT,"GeoPickHistory.addKeysTo('" + id + "'): removing invalid imageid "+ ex.getMessage());          data.remove(i);        }      }    }  }}  }
class C{  public String buildSentence(){  return String.format("%s %s %s %s %s.",wordService.getSubject().getString(),wordService.getVerb().getString(),wordService.getArticle().getString(),wordService.getAdjective().getString(),wordService.getNoun().getString());}  }
class C{  public boolean isValid(){  boolean isValid=super.isValid();  if (isValid) {    String dateText=this.getText().trim();    if (dateText.length() > 0) {      try {        dateFormat.parse(dateText);        this.setBackground(originalColor);      } catch (      ParseException ep) {        this.setBackground(Color.red);        isValid=false;      }    } else {      isValid=true;    }  }  return isValid;}  }
class C{  public Set<String> keySet(){  return Collections.unmodifiableSet(readMethods.keySet());}  }
class C{  static final Object unmaskNull(Object key){  return (key == NULL_KEY ? null : key);}  }
class C{  protected void render(){  groupStrategy.beforeBillboardGroups();  for (  SortedIntList.Node<Array<BillboardDecal>> group : groupList) {    groupStrategy.beforeBillboardGroup(group.index,group.value);    ShaderProgram shader=groupStrategy.getBillboardGroupShader(group.index);    render(shader,group.value);    groupStrategy.afterBillboardGroup(group.index);  }  groupStrategy.afterBillboardGroups();}  }
class C{  public void createPaymentForSupplier(long platformAdminKey,long supplierAdminKey,VOOrganization supplier) throws Exception {  createPaymentForSeller(platformAdminKey,supplierAdminKey,supplier,UserRoleType.SERVICE_MANAGER);}  }
class C{  public Person(int id,int orgId,String firstName,String lastName,double salary){  this.id=id;  this.orgId=orgId;  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeIterator) ? (NodeIterator)m_origObj : super.nodeset();}  }
class C{  public void processFEAdaptMetrics(Long idleTicks,Long cumTicks,Long iops,StorageHADomain haDomain,String statisticTime){  StorageSystem system=_dbClient.queryObject(StorageSystem.class,haDomain.getStorageDeviceURI());  StringMap dbMetrics=haDomain.getMetrics();  Long sampleTime=convertCIMStatisticTime(statisticTime);  _log.info(String.format("FEAdaptMetrics %s %s idleTicks %d cumTicks %d iops %d sampleTime %d",haDomain.getAdapterName(),haDomain.getNativeGuid(),idleTicks,cumTicks,iops,sampleTime));  Long idleTicksValue=MetricsKeys.getLong(MetricsKeys.idleTicksValue,dbMetrics);  Long cumTicksValue=MetricsKeys.getLong(MetricsKeys.cumTicksValue,dbMetrics);  Long iopsValue=MetricsKeys.getLong(MetricsKeys.iopsValue,dbMetrics);  Long idleTicksDelta=idleTicks - idleTicksValue;  if (idleTicksDelta < 0) {    idleTicksDelta=-idleTicksDelta;  }  Long cumTicksDelta=cumTicks - cumTicksValue;  if (cumTicksDelta < 0) {    cumTicksDelta=-cumTicksDelta;  }  Long iopsDelta=iops - iopsValue;  Long busyTicks=cumTicksDelta - idleTicksDelta;  if (busyTicks >= 0 && cumTicksValue > 0L && cumTicksDelta > 0L) {    computePercentBusyAverages(busyTicks,cumTicksDelta,iopsDelta,dbMetrics,haDomain.getNativeGuid(),haDomain.getAdapterName() + " [cpu]",sampleTime,system);  }  MetricsKeys.putLong(MetricsKeys.idleTicksValue,idleTicks,dbMetrics);  MetricsKeys.putLong(MetricsKeys.cumTicksValue,cumTicks,dbMetrics);  MetricsKeys.putLong(MetricsKeys.iopsValue,iops,dbMetrics);  MetricsKeys.putLong(MetricsKeys.lastSampleTime,sampleTime,dbMetrics);  haDomain.setMetrics(dbMetrics);  _dbClient.persistObject(haDomain);}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static int typecode(Type type){switch (type.getTag()) {case BYTE:    return BYTEcode;case SHORT:  return SHORTcode;case CHAR:return CHARcode;case INT:return INTcode;case LONG:return LONGcode;case FLOAT:return FLOATcode;case DOUBLE:return DOUBLEcode;case BOOLEAN:return BYTEcode;case VOID:return VOIDcode;case CLASS:case ARRAY:case METHOD:case BOT:case TYPEVAR:case UNINITIALIZED_THIS:case UNINITIALIZED_OBJECT:return OBJECTcode;default :throw new AssertionError("typecode " + type.getTag());}}  }
class C{  static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  public synchronized void soften(CtClass clazz){  if (repository.isPrune())   clazz.prune();  classes.remove(clazz.getName());  softcache.put(clazz.getName(),clazz);}  }
class C{  public static boolean isProjectParent(final IPath aFileName,final IProject project){  return aFileName.equals(project.getLocation().removeLastSegments(1));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static boolean isEvenParity(BinaryMessage bits){  return (bits.cardinality() % 2 == 0);}  }
class C{  private void createNew(MAcctSchema as){  if (!as.getCostingLevel().equals(MAcctSchema.COSTINGLEVEL_Client)) {    String txt="Costing Level prevents creating new Costing records for " + as.getName();    log.warning(txt);    addLog(0,null,null,txt);    return;  }  String sql="SELECT * FROM M_Product p " + "WHERE NOT EXISTS (SELECT * FROM M_Cost c WHERE c.M_Product_ID=p.M_Product_ID" + " AND c.M_CostType_ID=? AND c.C_AcctSchema_ID=? AND c.M_CostElement_ID=?"+ " AND c.M_AttributeSetInstance_ID=0) "+ "AND AD_Client_ID=?";  if (p_M_Product_Category_ID != 0)   sql+=" AND M_Product_Category_ID=?";  int counter=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,as.getM_CostType_ID());    pstmt.setInt(2,as.getC_AcctSchema_ID());    pstmt.setInt(3,m_ce.getM_CostElement_ID());    pstmt.setInt(4,as.getAD_Client_ID());    if (p_M_Product_Category_ID != 0)     pstmt.setInt(5,p_M_Product_Category_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      if (createNew(new MProduct(getCtx(),rs,null),as))       counter++;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.info("#" + counter);  addLog(0,null,new BigDecimal(counter),"Created for " + as.getName());}  }
class C{  public boolean incrementReceived(){  Long diff=System.currentTimeMillis() - startTime;  if (diff >= 1000) {    packetsPerSecond=intervalPackets;    startTime=System.currentTimeMillis();    intervalPackets=1;    return true;  } else {    intervalPackets++;  }  this.receivedPackets++;  return false;}  }
class C{  protected synchronized PreparedStatement prepare(Connection conn,String sql) throws SQLException {  SoftHashMap<String,PreparedStatement> c=cache.get(conn);  if (c == null) {    c=new SoftHashMap<String,PreparedStatement>();    cache.put(conn,c);  }  PreparedStatement prep=c.get(sql);  if (prep != null && prep.getConnection().isClosed()) {    prep=null;  }  if (prep == null) {    prep=conn.prepareStatement(sql);    c.put(sql,prep);  }  return prep;}  }
class C{  protected RegularExpressionLiteralImpl(){  super();}  }
class C{  public boolean isValid(){  return (adapter != null) && (position != RecyclerView.NO_POSITION);}  }
class C{  private Object[] process(Object[] row) throws KettleException {  Object[] outputRow=null;  if (meta.getNoDictionaryCount() > 0 || meta.getComplexDimsCount() > 0) {    outputRow=new Object[measureCount + 1 + 1];  } else {    outputRow=new Object[measureCount + 1];  }  int l=0;  int index=0;  for (int i=0; i < measureCount; i++) {    if (aggType[i] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {      outputRow[l++]=RemoveDictionaryUtil.getMeasure(index++,row);    } else     if (aggType[i] == CarbonCommonConstants.BIG_INT_MEASURE) {      outputRow[l++]=(Long)RemoveDictionaryUtil.getMeasure(index++,row);    } else {      outputRow[l++]=(Double)RemoveDictionaryUtil.getMeasure(index++,row);    }  }  outputRow[l]=RemoveDictionaryUtil.getByteArrayForNoDictionaryCols(row);  int[] highCardExcludedRows=new int[segmentProperties.getDimColumnsCardinality().length];  for (int i=0; i < highCardExcludedRows.length; i++) {    Object key=RemoveDictionaryUtil.getDimension(i,row);    highCardExcludedRows[i]=(Integer)key;  }  try {    outputRow[outputRow.length - 1]=data.generator.generateKey(highCardExcludedRows);  } catch (  KeyGenException e) {    throw new KettleException("unable to generate the mdkey",e);  }  return outputRow;}  }
class C{  public Builder doneButtonTypefacePath(String typefacePath){  this.doneButtonTypefacePath=typefacePath;  return this;}  }
class C{  public static String sc(Double score){  String score_str=String.format("%-5.4f",score);  return score_str;}  }
class C{  @Override public void registerPackages(ResourceSet resourceSet){  super.registerPackages(resourceSet);  if (!isInWorkspace(EipPackage.class)) {    resourceSet.getPackageRegistry().put(EipPackage.eNS_URI,EipPackage.eINSTANCE);  }}  }
class C{  public ChopRectangleConnector(){}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public String timestamp(){  float totalSeconds=this.length();  float second=totalSeconds % 60;  int minute=(int)totalSeconds / 60 % 60;  int hour=(int)(totalSeconds / 3600);  StringBuffer sb=new StringBuffer();  if (hour > 0) {    sb.append(hour + ":");  }  if (minute > 0) {    sb.append(minute + ":");  }  sb.append(second);  return sb.toString();}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.SegmentList buildSegmentList(List<org.smpte_ra.schemas.st2067_2_2016.SegmentType> segments){  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.SegmentList segmentList=new org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType.SegmentList();  segmentList.getSegment().addAll(segments);  return segmentList;}  }
class C{  public KeyBuilder none(){  modifiers=ModifierKeys.NONE;  return this;}  }
class C{  public static void main(String[] args){  TestDocRootLink tester=new TestDocRootLink();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  @Override public Object valueForSearch(Object value){  Long val=value(value);  if (val == null) {    return null;  }  return longToIp(val);}  }
class C{  public void showDialog(){  project=appContext.getCurrentProject().getRootProject();  getRemotes();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_CLASS_DEFINITION___GET_DEFINED_TYPE_AS_CLASS:    return getDefinedTypeAsClass();case N4JSPackage.N4_CLASS_DEFINITION___GET_SUPER_CLASSIFIER_REFS:  return getSuperClassifierRefs();case N4JSPackage.N4_CLASS_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();}return super.eInvoke(operationID,arguments);}  }
class C{  private static void parseDirectories(ByteBuffer data,int numTables,TrueTypeFont ttf){  for (int i=0; i < numTables; i++) {    int tag=data.getInt();    String tagString=TrueTypeTable.tagToString(tag);    int checksum=data.getInt();    int offset=data.getInt();    int length=data.getInt();    data.mark();    data.position(offset);    ByteBuffer tableData=data.slice();    tableData.limit(length);    int calcChecksum=calculateChecksum(tagString,tableData);    if (calcChecksum == checksum) {      ttf.addTable(tagString,tableData);    } else {      ttf.addTable(tagString,tableData);    }    data.reset();  }}  }
class C{  public void initCrashUploadPreference(boolean allowCrashUpload){  SharedPreferences.Editor ed=mSharedPreferences.edit();  if (isMobileNetworkCapable()) {    if (allowCrashUpload) {      ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpWifiOnlyUpload);    } else {      ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    }  } else {    ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    ed.putBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,allowCrashUpload);  }  ed.apply();  PrefServiceBridge.getInstance().setCrashReporting(allowCrashUpload);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.278 -0500",hash_original_method="8231389587D8A1396F36A075174F3D3F",hash_generated_method="BA0AD7E18F4DCF5C52C0A2E2DC39C35F") private void parseArgs(String args[]) throws IllegalArgumentException {  int curArg=0;  for (; curArg < args.length; curArg++) {    String arg=args[curArg];    if (arg.equals("--")) {      curArg++;      break;    } else     if (!arg.startsWith("--")) {      break;    }  }  if (curArg == args.length) {    throw new IllegalArgumentException("Missing classname argument to RuntimeInit!");  }  startClass=args[curArg++];  startArgs=new String[args.length - curArg];  System.arraycopy(args,curArg,startArgs,0,startArgs.length);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void init(Applet applet){  if (applet == null) {    init(System.getProperties());  } else {    if (env != null) {      Debug.output("Reinitializing Applet Environment!");      setApplet(applet);      env.setAppletProperties(applet,env);      return;    }    new Environment(applet);  }  if (Debug.debugging("env")) {    env.list(System.out);  }}  }
class C{  static boolean viewMatchesSelector(View view,List<Integer> filteringScope){  if (filteringScope.isEmpty()) {    return true;  }  if (filteringScope.size() == 1) {    return view.getId() == filteringScope.get(0);  }  List<Integer> newScope=new ArrayList<>(filteringScope);  newScope.remove(newScope.get(newScope.size() - 1));  return view.getParent() != null && viewMatchesSelector((View)view.getParent(),newScope);}  }
class C{  public void forEach(Consumer<? super C> action){  forEach(null);}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  protected void sequence_AnnotatedScriptElement_ImportClause_ImportDeclarationImpl_ImportSpecifiersExceptDefault(ISerializationContext context,ImportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  String convertURL(String url){  if (url == null) {    return pageURL;  }  if (isAbsoluteURL(url)) {    return url;  } else {    if (url.startsWith("//")) {      return protocol + url;    } else     if (url.startsWith("/")) {      return hostURL + url;    } else     if (url.startsWith(".")) {      int back=0;      while ((url.length() > 0) && (url.charAt(0) == '.')) {        if (url.startsWith("./")) {          url=url.substring(2);        } else         if (url.startsWith("../")) {          url=url.substring(3);          back++;        } else         if (url.equals("..")) {          url="";          back++;        } else {          url="";        }      }      String folder=getBaseURL().substring(hostURL.length() + 1);      while ((back > 0) && (folder.length() > 0)) {        back--;        folder=folder.substring(0,folder.length() - 1);        int index=folder.lastIndexOf('/');        if (index == -1) {          folder="";        } else {          folder=folder.substring(0,index + 1);        }      }      return hostURL + "/" + folder+ url;    } else {      return getBaseURL() + url;    }  }}  }
class C{  private boolean isBelowThresholdRegister(int ssaReg){  return ssaReg < threshold;}  }
class C{  protected ProvidedRuntimeLibraryDependencyImpl(){  super();}  }
class C{  private void lock(){  if (inCollection)   gcLock.acquire(); else   mutatorLock.acquire();}  }
class C{  public static String toHex(byte[] data){  StringBuilder sb=new StringBuilder(data.length * 2);  for (  byte aData : data) {    String hex=Integer.toHexString(aData);    if (hex.length() == 1) {      sb.append("0");    } else     if (hex.length() == 8) {      hex=hex.substring(6);    }    sb.append(hex);  }  return sb.toString().toLowerCase(Locale.getDefault());}  }
class C{  NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest,FieldType fieldType,String fieldName){  final String queryValue=analysisRequest.getQuery();  final Set<BytesRef> termsToMatch=(queryValue != null && analysisRequest.isShowMatch()) ? getQueryTokenSet(queryValue,fieldType.getQueryAnalyzer()) : EMPTY_BYTES_SET;  NamedList<NamedList> analyzeResults=new SimpleOrderedMap<>();  if (analysisRequest.getFieldValue() != null) {    AnalysisContext context=new AnalysisContext(fieldName,fieldType,fieldType.getIndexAnalyzer(),termsToMatch);    NamedList analyzedTokens=analyzeValue(analysisRequest.getFieldValue(),context);    analyzeResults.add("index",analyzedTokens);  }  if (analysisRequest.getQuery() != null) {    AnalysisContext context=new AnalysisContext(fieldName,fieldType,fieldType.getQueryAnalyzer());    NamedList analyzedTokens=analyzeValue(analysisRequest.getQuery(),context);    analyzeResults.add("query",analyzedTokens);  }  return analyzeResults;}  }
class C{  public static Number asin(Number a){  return Math.asin(a.doubleValue());}  }
class C{  public void sort(Comparator<? super LogLine> comparator){  this.mComparator=comparator;  Collections.sort(mObjects,comparator);  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public void saveAs(){  SFileChooser chooser=new SFileChooser(workspace.getCurrentDirectory(),"Zip Archive","zip");  File theFile;  if (workspace.getCurrentFile() != null) {    theFile=chooser.showSaveDialog(workspace.getCurrentFile());  } else {    theFile=chooser.showSaveDialog("workspace");  }  if (theFile != null) {    workspace.setCurrentFile(theFile);    workspace.setCurrentDirectory(chooser.getCurrentLocation());    save(theFile);  }}  }
class C{  public static void registerExceptionHandler(){  Thread.setDefaultUncaughtExceptionHandler(new ErrorHandler());  System.setProperty("sun.awt.exception.handler",ErrorHandler.class.getName());}  }
class C{  public boolean contains(ByteString namespace,ByteString key){  if (namespace != null && key != null) {    SetMultimap<ByteString,ByteString> namespaceData=contents.get(namespace);    return namespaceData != null && namespaceData.containsKey(key);  }  return false;}  }
class C{  public Iterator<K> keyIterator(K from){  return keyIterator(from,false);}  }
class C{  public String describeParams(){  StringBuilder sb=new StringBuilder();  sb.append("\t").append("maxQueryTermsPerField  : ").append(maxQueryTermsPerField).append("\n");  sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n");  sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n");  sb.append("\t").append("fieldNames     : ");  String delim="";  for (  String fieldName : getFieldNames()) {    sb.append(delim).append(fieldName);    delim=", ";  }  sb.append("\n");  sb.append("\t").append("boost          : ").append(boost).append("\n");  sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n");  sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n");  return sb.toString();}  }
class C{  public boolean isUuid(){  return uuid;}  }
class C{  public boolean hasDuration(){  return getDuration() != null;}  }
class C{  public Image(double lat,double lon,int offsetx,int offsety,int radius){  super(lat,lon,offsetx,offsety,radius);}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public RepowerService(Environment environment,String consumerKey,PrivateKey privateKey){  super(consumerKey,privateKey);  this.environment=environment;}  }
class C{  public static String toListString(Collection self){  return toListString(self,-1);}  }
class C{  @NonNull public Uri toUri(){  Uri.Builder uriBuilder=configuration.authorizationEndpoint.buildUpon().appendQueryParameter(PARAM_REDIRECT_URI,redirectUri.toString()).appendQueryParameter(PARAM_CLIENT_ID,clientId).appendQueryParameter(PARAM_RESPONSE_TYPE,responseType);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_DISPLAY,display);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_LOGIN_HINT,loginHint);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_PROMPT,prompt);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_STATE,state);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_SCOPE,scope);  UriUtil.appendQueryParameterIfNotNull(uriBuilder,PARAM_RESPONSE_MODE,responseMode);  if (codeVerifier != null) {    uriBuilder.appendQueryParameter(PARAM_CODE_CHALLENGE,codeVerifierChallenge).appendQueryParameter(PARAM_CODE_CHALLENGE_METHOD,codeVerifierChallengeMethod);  }  for (  Entry<String,String> entry : additionalParameters.entrySet()) {    uriBuilder.appendQueryParameter(entry.getKey(),entry.getValue());  }  return uriBuilder.build();}  }
class C{  public static boolean validateXML(String dialSpecs,String schemaFile){  log.fine("Checking the validation of file " + dialSpecs + " against XML schema "+ schemaFile+ "...");  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    SchemaFactory schema=SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");    factory.setSchema(schema.newSchema(new Source[]{new StreamSource(schemaFile)}));    DocumentBuilder builder=factory.newDocumentBuilder();    try {      builder.setErrorHandler(new XMLErrorHandler());      Document doc=builder.parse(new InputSource(dialSpecs));      log.fine("XML parsing of file: " + dialSpecs + " successful!");      String rootpath=dialSpecs.substring(0,dialSpecs.lastIndexOf("//") + 1);      Vector<String> includedFiles=extractIncludedFiles(doc);      for (      String file : includedFiles) {        boolean validation=validateXML(rootpath + file,schemaFile);        if (!validation) {          return false;        }      }    } catch (    Exception e) {      throw new RuntimeException(e.getMessage());    }    return true;  } catch (  SAXException e) {    log.warning("Validation aborted: \n" + e.getMessage());    return false;  }catch (  ParserConfigurationException e) {    log.warning(e.getMessage());    return false;  }}  }
class C{  private void sendNotification(String message){  Intent intent=new Intent(this,ChatActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.send).setContentTitle("GCM Message").setContentText(message).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public static byte[] toSimpleByteArray(CharSequence charSequence){  if (charSequence == null) {    return null;  }  byte[] barr=new byte[charSequence.length()];  for (int i=0; i < barr.length; i++) {    barr[i]=(byte)charSequence.charAt(i);  }  return barr;}  }
class C{  public void warn(Object message){  ri.warn(message);}  }
class C{  public static String serialize(Object node){  String ret=null;  if (node instanceof String) {    ret=(String)node;  } else   if (node instanceof byte[]) {    ret=new String((byte[])node);  } else   if (node instanceof DOMSource) {    ret=serializeDOMSource((DOMSource)node);  } else   if (node instanceof Node) {    ret=serializeNode((Node)node);  } else {    log.severe("Unable to serialize '" + node + "'");  }  if (ret != null) {    ret=ret.trim();  }  return ret;}  }
class C{  public static String urlEncode(final String in){  try {    final String out=URLEncoder.encode(in,RemoteRepository.UTF8);    return out;  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Map<String,String> strToMap(String str,String delim){  return strToMap(str,delim,false);}  }
class C{  public void deliverTimeoutRequest(LCMessage msg){switch (msg.getType()) {case TOMUtil.STOP:{      System.out.println("(Synchronizer.deliverTimeoutRequest) Last regency: " + lcManager.getLastReg() + ", next regency: "+ lcManager.getNextReg());      if (msg.getReg() == lcManager.getLastReg() + 1) {        Logger.println("(Synchronizer.deliverTimeoutRequest) received regency change request");        TOMMessage[] requests=deserializeTOMMessages(msg.getPayload());        lcManager.addRequestsFromSTOP(requests);        lcManager.addStop(msg.getReg(),msg.getSender());        processOutOfContextSTOPs(msg.getReg());        startSynchronization(msg.getReg());      } else       if (msg.getReg() > lcManager.getLastReg()) {        System.out.println("(Synchronizer.deliverTimeoutRequest) Keeping STOP message as out of context for regency " + msg.getReg());        outOfContextLC.add(msg);      } else {        System.out.println("(Synchronizer.deliverTimeoutRequest) Discarding STOP message");      }    }  break;case TOMUtil.STOPDATA:{  int regency=msg.getReg();  System.out.println("(Synchronizer.deliverTimeoutRequest) Last regency: " + lcManager.getLastReg() + ", next regency: "+ lcManager.getNextReg());  if (regency == lcManager.getLastReg() && this.controller.getStaticConf().getProcessId() == execManager.getCurrentLeader()) {    Logger.println("(Synchronizer.deliverTimeoutRequest) I'm the new leader and I received a STOPDATA");    processSTOPDATA(msg,regency);  } else   if (msg.getReg() > lcManager.getLastReg()) {    System.out.println("(Synchronizer.deliverTimeoutRequest) Keeping STOPDATA message as out of context for regency " + msg.getReg());    outOfContextLC.add(msg);  } else {    System.out.println("(Synchronizer.deliverTimeoutRequest) Discarding STOPDATA message");  }}break;case TOMUtil.SYNC:{int regency=msg.getReg();System.out.println("(Synchronizer.deliverTimeoutRequest) Last regency: " + lcManager.getLastReg() + ", next regency: "+ lcManager.getNextReg());boolean isExpectedSync=(regency == lcManager.getLastReg() && regency == lcManager.getNextReg());boolean islateSync=(regency == lcManager.getLastReg() && regency == (lcManager.getNextReg() - 1));boolean sentStopdata=(lcManager.getStopsSize(lcManager.getNextReg()) == 0);if ((isExpectedSync || (islateSync && !sentStopdata)) && (msg.getSender() == execManager.getCurrentLeader())) {processSYNC(msg.getPayload(),regency);} else if (msg.getReg() > lcManager.getLastReg()) {System.out.println("(Synchronizer.deliverTimeoutRequest) Keeping SYNC message as out of context for regency " + msg.getReg());outOfContextLC.add(msg);} else {System.out.println("(Synchronizer.deliverTimeoutRequest) Discarding SYNC message");}}break;}}  }
class C{  private void notifyListeners(){  for (  final ICaretListener listener : m_listeners) {    listener.caretStatusChanged(JCaret.this);  }}  }
class C{  public SortedTupleIterator(Iterator iter,int size,Comparator c){  m_tuples=new ArrayList(size);  init(iter,c);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Flux<T> instance(){  return (Flux<T>)INSTANCE;}  }
class C{  public static boolean isText(int displayType){  if (displayType == String || displayType == Text || displayType == TextLong || displayType == Memo || displayType == FilePath || displayType == FileName || displayType == URL || displayType == PrinterName)   return true;  return false;}  }
class C{  public short blue(){  return self.blue;}  }
class C{  @Override public Iterator<T> iterator(){  return this.delegate.iterator();}  }
class C{  @SuppressWarnings("unchecked") private <T extends Element>List<T> castElementList(Object obj){  return (List<T>)obj;}  }
class C{  @Override protected void doRollback() throws TransactionException {  final BigdataSailRepositoryConnection cxn=tlTx.get();  if (cxn != null) {    try {      cxn.rollback();    } catch (    Exception ex) {      throw new TransactionException(ex);    } finally {      close(cxn);    }  }}  }
class C{  public void lockPreview(boolean lock){  mPreviewLocked=lock;}  }
class C{  public static void writeToken(File dir,String name,String value) throws IOException {  Preconditions.checkArgument(dir.isDirectory(),"Need to create directory first!  %s",dir);  File token=new File(dir,name);  FileUtils.write(token,value,StandardCharsets.UTF_8);}  }
class C{  public boolean isOffline(){  return (OFFLINE.equals(status));}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WLookup.init");}  }
class C{  @Override public boolean onPreferenceStartFragment(PreferenceFragment caller,Preference pref){  showTimezonePicker(R.id.timezone_dropdown_anchor);  return true;}  }
class C{  @Override public void put(String name,char value){  emulatedFields.put(name,value);}  }
class C{  public boolean hasDownloads(){  return getProductDownloads(false).length > 0;}  }
class C{  private long calculateTrailingDuration(@NonNull Rect startPosition,@NonNull Rect endPosition,@NonNull Context context){  if (minTrailingDuration == maxTrailingDuration)   return minTrailingDuration;  float pxDistance=(float)Math.hypot(startPosition.exactCenterX() - endPosition.exactCenterX(),startPosition.exactCenterY() - endPosition.exactCenterY());  float dpDistance=pxDistance / context.getResources().getDisplayMetrics().density;  long duration=(long)(dpDistance / trailingSpeed);  return Math.max(minTrailingDuration,Math.min(maxTrailingDuration,duration));}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to queue hint for store {storeName}",explanation="There was an error synchronizing data to " + "remote nodes",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public void queueHint(String storeName,ByteArray key,Versioned<byte[]> value){  try {    HintKey hk=new HintKey(storeName,key);    hintLock.lock();    try {      boolean needed=!hints.containsKey(hk);      needed&=hints.doput(hk,value);      if (needed) {        hintQueue.add(hk);        hintsAvailable.signal();      }    }  finally {      hintLock.unlock();    }  } catch (  SyncException e) {    logger.error("Failed to queue hint for store " + storeName,e);  }}  }
class C{  public TokenSpec build(){  return new TokenSpec(this);}  }
class C{  public static int[] generateHashes(double[] histogram){  double product;  int[] result=new int[numFunctionBundles];  for (int k=0; k < numFunctionBundles; k++) {    product=0;    for (int i=0; i < histogram.length; i++) {      product+=histogram[i] * hashA[k][i];    }    result[k]=(int)Math.floor((product + hashB[k]) / binLength);  }  return result;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","fzfu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void crashAlert(Stage stage,String crashMessage){  messageLabel.setText("Unfortunately, we screwed up and the app crashed. Sorry about that!");  detailsLabel.setText(crashMessage);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public int selectPrevWeapon(){  int selected=getPrevWeaponListIdx();  weaponList.setSelectedIndex(selected);  weaponList.ensureIndexIsVisible(selected);  if ((selected >= 0) && (selected < entity.getWeaponList().size())) {    return entity.getEquipmentNum(((WeaponListModel)weaponList.getModel()).getWeaponAt(selected));  } else {    return -1;  }}  }
class C{  public static final Integer extractIplIdentitySlaveManufacturer(LocoNetMessage m){  return m.getElement(7);}  }
class C{  public static <T extends Control>T tooltip(T ctrl,String tip){  if (!tip.isEmpty())   ctrl.setTooltip(new Tooltip(tip));  return ctrl;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void findAndInit(Object obj){  if (obj instanceof PropertyConsumer) {    String prefix=((PropertyConsumer)obj).getPropertyPrefix();    if (prefix != null) {      getPrefixLibrarian().put(prefix,obj);    }  }}  }
class C{  private void fail(){  ClientSingletonRepository.getSound().getGroup(SoundLayer.USER_INTERFACE.groupName).play(sound,0,null,null,false,true);}  }
class C{  private int readByte(Command command,int value,int index,boolean signed) throws LibUsbException, UsbException {  if (mDeviceHandle != null) {    ByteBuffer buffer=ByteBuffer.allocateDirect(1);    int transferred=LibUsb.controlTransfer(mDeviceHandle,USB_REQUEST_IN,command.getValue(),(short)value,(short)index,buffer,USB_TIMEOUT_MS);    if (transferred < 0) {      throw new LibUsbException("read error",transferred);    }    byte result=buffer.get(0);    if (signed) {      return (result & 0xFF);    } else {      return result;    }  } else {    throw new LibUsbException("device handle is null",LibUsb.ERROR_NO_DEVICE);  }}  }
class C{  private ArrayList<ChartSet> prepareAnimation(ChartView chartView,ArrayList<float[][]> start,ArrayList<float[][]> end){  final int nSets=start.size();  final int nEntries=start.get(0).length;  mChartView=chartView;  mCurrentDuration=new long[nEntries];  if (mOrder == null) {    mOrder=new int[nEntries];    for (int i=0; i < mOrder.length; i++)     mOrder[i]=i;  } else {    if (mOrder.length != nEntries)     throw new IllegalArgumentException("Size of overlap order different than set's entries size.");  }  float noOverlapDuration=mGlobalDuration / nEntries;  mDuration=(int)(noOverlapDuration + (mGlobalDuration - noOverlapDuration) * mOverlapingFactor);  Path path;  mPathMeasures=new PathMeasure[nSets][nEntries];  for (int i=0; i < nSets; i++) {    for (int j=0; j < nEntries; j++) {      path=new Path();      path.moveTo(start.get(i)[j][0],start.get(i)[j][1]);      path.lineTo(end.get(i)[j][0],end.get(i)[j][1]);      mPathMeasures[i][j]=new PathMeasure(path,false);    }  }  mInitTime=new long[nEntries];  mGlobalInitTime=System.currentTimeMillis();  long noOverlapInitTime;  for (int i=0; i < nEntries; i++) {    noOverlapInitTime=mGlobalInitTime + (i * (mGlobalDuration / nEntries));    mInitTime[mOrder[i]]=(noOverlapInitTime - ((long)(mOverlapingFactor * (noOverlapInitTime - mGlobalInitTime))));  }  mPlaying=true;  return getUpdate(mChartView.getData());}  }
class C{  public String toBugReport(){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  pw.println("FrostWire version " + _limewireVersion + " build "+ FrostWireUtils.getBuildNumber());  pw.println("Java version " + _javaVersion + " from "+ _javaVendor);  pw.println(_os + " v. " + _osVersion+ " on "+ _architecture);  pw.println("Free/total memory: " + _freeMemory + "/"+ _totalMemory);  pw.println();  if (isFatalError()) {    pw.println("FATAL ERROR!");    pw.println();  }  pw.println(_bug);  pw.println();  if (_detail != null) {    pw.println("Detail: " + _detail);    pw.println();  }  pw.println("-- class path --");  pw.println(System.getProperty("java.class.path").replaceAll("\\;|\\:","\n"));  pw.println("-- listing session information --");  pw.println("Current thread: " + _currentThread);  pw.println("Active Threads: " + _threadCount);  append(pw,"Uptime",_upTime);  append(pw,"Is Connected",_connected);  append(pw,"Number of Ultrapeer -> Ultrapeer Connections",_upToUp);  append(pw,"Number of Ultrapeer -> Leaf Connections",_upToLeaf);  append(pw,"Number of Leaf -> Ultrapeer Connections",_leafToUp);  append(pw,"Number of Old Connections",_oldConnections);  append(pw,"Acting as Ultrapeer",_ultrapeer);  append(pw,"Acting as Shielded Leaf",_leaf);  append(pw,"Number of Active Uploads",_activeUploads);  append(pw,"Number of Queued Uploads",_queuedUploads);  append(pw,"Number of Active Managed Downloads",_activeDownloads);  append(pw,"Number of Active HTTP Downloaders",_httpDownloaders);  append(pw,"Number of Waiting Downloads",_waitingDownloaders);  append(pw,"Received incoming this session",_acceptedIncoming);  append(pw,"Number of Shared Files",_sharedFiles);  append(pw,"Guess Capable",_guessCapable);  append(pw,"Received Solicited UDP",_solicitedCapable);  append(pw,"SIMPP version",_latestSIMPP);  append(pw,"Port Stable",_portStable);  append(pw,"FWT Capable",_canDoFWT);  append(pw,"Last Reported Port",_lastReportedPort);  append(pw,"External Port",_externalPort);  append(pw,"IP Pongs Received",_receivedIpPong);  append(pw,"Number of Content Response URNs",_responseSize);  append(pw,"Number of CreationTimeCache URNs",_creationCacheSize);  append(pw,"VF Byte Cache Size",_vfByteSize);  append(pw,"VF Verify Cache Size",_vfVerifyingSize);  append(pw,"VF Queue Size",_vfQueueSize);  append(pw,"ByteBuffer Cache Size",_bbSize);  append(pw,"Number of Waiting Sockets",_waitingSockets);  append(pw,"Number of Pending Timeouts",_pendingTimeouts);  append(pw,"Peak Number of Thread",_peakThreads);  append(pw,"Number of SP2 Workarounds",_sp2Workarounds);  append(pw,"System Load Avg",_loadAverage);  append(pw,"Objects Pending GC",_pendingObjects);  append(pw,"Free Space In Settings",_settingsFreeSpace);  append(pw,"Free Space In Incomplete",_incompleteFreeSpace);  append(pw,"Free Space In Downloads",_downloadFreeSpace);  append(pw,"Heap Memory Usage",_heapUsage);  append(pw,"Non-Heap Memory Usage",_nonHeapUsage);  append(pw,"SlotManager dump:",_slotManager);  append(pw,"Number of select calls",_numSelects);  append(pw,"Number of immediate selects",_numImmediateSelects);  append(pw,"Average time in select",_avgSelectTime);  pw.println();  if (_otherThreads != null) {    pw.println("-- listing threads --");    pw.println(_otherThreads);    pw.println();  }  pw.println(_props);  pw.println();  pw.println("**************** Comments from the user ****************\n" + _userComments);  pw.flush();  System.out.println(sw.toString());  return sw.toString();}  }
class C{  public AuthorizeNetSimPaymentOkPage(final PageParameters params){  super(params);  add(new FeedbackPanel(FEEDBACK));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public RowSummingExactUpdater(BayesIm bayesIm){  if (bayesIm == null) {    throw new NullPointerException();  }  this.bayesIm=bayesIm;  setEvidence(Evidence.tautology(bayesIm));}  }
class C{  public synchronized void close(){  if (Debugger.TRACE) {    trace("close session");  }  if (closed) {    throw new IllegalStateException("session already closed");  }  clearStrategies();  removeBindings();  for (  Breakpoint breakpoint : getBreakpoints()) {    breakpoint.dispose();  }  alwaysHaltBreakpoint.dispose();  currentSuspendedEventMap.clear();  closed=true;}  }
class C{  static public boolean isCommitTime(final long timestamp){  return timestamp > 0;}  }
class C{  public static String toBinaryString(byte[] ba){  return byteArrayToBinaryString(ba);}  }
class C{  public void updateControls(RelationCount.Settings settings){  if (null == settings) {    return;  }  forwardRange.setLimits(settings.forward);  reverseRange.setLimits(settings.reverse);}  }
class C{  public ObjectFactory(){}  }
class C{  public HashCode append(final byte value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  private NetworkBuilder(boolean directed){  this.directed=directed;}  }
class C{  public VirtualFile resolve(String path){  VirtualFile resolved=null;  File absoluteOrRelativeFile=FileUtil.openFile(path);  if ((absoluteOrRelativeFile != null) && FileUtils.exists(absoluteOrRelativeFile) && FileUtils.isAbsolute(absoluteOrRelativeFile)) {    resolved=new LocalFile(absoluteOrRelativeFile);  } else   if (root != null) {    String rootRelativePath=root + File.separator + path;    File rootRelativeFile=FileUtil.openFile(rootRelativePath);    if ((rootRelativeFile != null) && FileUtils.exists(rootRelativeFile)) {      resolved=new LocalFile(rootRelativeFile);    }  } else {    absoluteOrRelativeFile=FileUtils.getAbsoluteFile(absoluteOrRelativeFile);    if ((absoluteOrRelativeFile != null) && FileUtils.exists(absoluteOrRelativeFile)) {      resolved=new LocalFile(absoluteOrRelativeFile);    }  }  if ((resolved != null) && Trace.pathResolver) {    Trace.trace("ConfigurationPathResolver.resolve: resolved " + path + " to "+ resolved.getName());  }  return resolved;}  }
class C{  public static Network createTriangularNetwork(){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)50,(double)100));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)50,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,500.0,10.0,3600.0,(double)1);  final Node fromNode1=node2;  final Node toNode1=node4;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,500.0,10.0,3600.0,(double)1);  final Node fromNode2=node1;  final Node toNode2=node3;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,50.0,0.1,3600.0,(double)1);  final Node fromNode3=node3;  final Node toNode3=node4;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,50.0,0.1,3600.0,(double)1);  return network;}  }
class C{  public DrawerBuilder withStickyHeader(@LayoutRes int stickyHeaderRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyHeaderRes != -1) {    this.mStickyHeaderView=mActivity.getLayoutInflater().inflate(stickyHeaderRes,null,false);  }  return this;}  }
class C{  private void maximize(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.MAXIMIZED_BOTH);  }}  }
class C{  public static boolean isJWSCompactRepTrainingReceipt(String jwsCompactRepresentation){  return isQRCodeRepTrainingReceipt(CashBoxUtils.getQRCodeRepresentationFromJWSCompactRepresentation(jwsCompactRepresentation));}  }
class C{  public PreSharedKeyIdentity(String identity){  if (identity == null) {    throw new NullPointerException("Identity must not be null");  } else {    this.identity=identity;  }}  }
class C{  private void buildExamplesSection(PathOperation operation,MarkupDocBuilder docBuilder){  Map<String,Object> generatedRequestExampleMap=ExamplesUtil.generateRequestExampleMap(config.isGeneratedExamplesEnabled(),operation,globalContext.getSwagger().getDefinitions(),markupDocBuilder);  Map<String,Object> generatedResponseExampleMap=ExamplesUtil.generateResponseExampleMap(config.isGeneratedExamplesEnabled(),operation.getOperation(),globalContext.getSwagger().getDefinitions(),markupDocBuilder);  exampleMap(generatedRequestExampleMap,EXAMPLE_REQUEST,REQUEST,docBuilder);  exampleMap(generatedResponseExampleMap,EXAMPLE_RESPONSE,RESPONSE,docBuilder);}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.555 -0500",hash_original_method="A7ACF6BA9DDECE3E31DBB8A7DF4DF0DB",hash_generated_method="8924B0BC1D30B617CA248F7E362509B4") public static String formatNumber(String phoneNumber,String defaultCountryIso){  if (phoneNumber.startsWith("#") || phoneNumber.startsWith("*")) {    return phoneNumber;  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    PhoneNumber pn=util.parseAndKeepRawInput(phoneNumber,defaultCountryIso);    result=util.formatInOriginalFormat(pn,defaultCountryIso);  } catch (  NumberParseException e) {  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.294 -0500",hash_original_method="73BDBCA2665627024F8A18D3318C8DB8",hash_generated_method="19BA20C32B3AE4D5ACF17271CBFDC670") public static boolean isLowerCase(char c){  return isLowerCase((int)c);}  }
class C{  public StringIndexOutOfBoundsException(int index){}  }
class C{  public void remove(T item){  int index=items.indexOf(item,true);  if (index == ItemNotFound) {    return;  }  if (owned.get(index)) {    items.get(index).dispose();  }  items.removeIndex(index);  owned.removeIndex(index);  items.removeValue(item,true);}  }
class C{  @Subscriber(tag=THREAD_TAG) private void sayHello(String name){  Log.d(getTag(),"### hello, " + name + " -->  in "+ getName());}  }
class C{  private Long determineCapacity(Volume volume,Volume.PersonalityTypes type,Long capacityToUseInCalculation){  long capacity=0L;  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());  if (type == Volume.PersonalityTypes.SOURCE) {    capacity=capacityCalculatorFactory.getCapacityCalculator(storageSystem.getSystemType()).calculateAllocatedCapacity(capacityToUseInCalculation,volume,_dbClient);  } else   if (type == Volume.PersonalityTypes.TARGET) {    capacity=capacityCalculatorFactory.getCapacityCalculator(storageSystem.getSystemType()).calculateAllocatedCapacity(capacityToUseInCalculation + 5242880L,volume,_dbClient);  }  return capacity;}  }
class C{  public int indexOfAnyOf(final CharSet s){  return indexOfAnyOf(s,0);}  }
class C{  public void addModule(final INaviModule module) throws CouldntSaveDataException {  Preconditions.checkNotNull(module,"IE00030: Module argument can not be null");  Preconditions.checkArgument(!m_modules.contains(module),"IE00032: Module can not be added more than once");  Preconditions.checkArgument(module.inSameDatabase(m_addressSpace),"IE00033: Module and address space are not in the same database");  m_provider.addModule(m_addressSpace,module);  m_modules.add(module);  for (  final IAddressSpaceContentListener listener : m_listeners) {    try {      listener.addedModule(m_addressSpace,module);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  setImageBase(module,module.getConfiguration().getImageBase());}  }
class C{  public static Value convertToValue(Object x,int type){  if (x == null) {    return ValueNull.INSTANCE;  }  if (type == Value.JAVA_OBJECT) {    return ValueJavaObject.getNoCopy(x,null);  }  if (x instanceof String) {    return ValueString.get((String)x);  } else   if (x instanceof Value) {    return (Value)x;  } else   if (x instanceof Long) {    return ValueLong.get(((Long)x).longValue());  } else   if (x instanceof Integer) {    return ValueInt.get(((Integer)x).intValue());  } else   if (x instanceof BigDecimal) {    return ValueDecimal.get((BigDecimal)x);  } else   if (x instanceof Boolean) {    return ValueBoolean.get(((Boolean)x).booleanValue());  } else   if (x instanceof Byte) {    return ValueByte.get(((Byte)x).byteValue());  } else   if (x instanceof Short) {    return ValueShort.get(((Short)x).shortValue());  } else   if (x instanceof Float) {    return ValueFloat.get(((Float)x).floatValue());  } else   if (x instanceof Double) {    return ValueDouble.get(((Double)x).doubleValue());  } else   if (x instanceof byte[]) {    return ValueBytes.get((byte[])x);  } else   if (x instanceof Date) {    return ValueDate.get((Date)x);  } else   if (x instanceof Time) {    return ValueTime.get((Time)x);  } else   if (x instanceof Timestamp) {    return ValueTimestamp.get((Timestamp)x);  } else   if (x instanceof java.util.Date) {    return ValueTimestamp.fromMillis(((java.util.Date)x).getTime());  } else   if (x instanceof java.io.Reader) {    Reader r=new BufferedReader((java.io.Reader)x);    return ValueLobDb.createTempClob(r,-1);  } else   if (x instanceof java.sql.Clob) {    try {      Reader r=new BufferedReader(((java.sql.Clob)x).getCharacterStream());      return ValueLobDb.createTempClob(r,-1);    } catch (    SQLException e) {      throw DbException.convert(e);    }  } else   if (x instanceof java.io.InputStream) {    return ValueLobDb.createTempBlob((java.io.InputStream)x,-1);  } else   if (x instanceof java.sql.Blob) {    try {      return ValueLobDb.createTempBlob(((java.sql.Blob)x).getBinaryStream(),-1);    } catch (    SQLException e) {      throw DbException.convert(e);    }  } else   if (x instanceof ResultSet) {    if (x instanceof SimpleResultSet) {      return ValueResultSet.get((ResultSet)x);    }    return ValueResultSet.getCopy((ResultSet)x,Integer.MAX_VALUE);  } else   if (x instanceof UUID) {    UUID u=(UUID)x;    return ValueUuid.get(u.getMostSignificantBits(),u.getLeastSignificantBits());  } else   if (x instanceof Object[]) {    Object[] o=(Object[])x;    int len=o.length;    Value[] v=new Value[len];    for (int i=0; i < len; i++) {      v[i]=convertToValue(o[i],type);    }    return ValueArray.get(x.getClass().getComponentType(),v);  } else   if (x instanceof Character) {    return ValueStringFixed.get(x.toString());  } else {    return ValueJavaObject.getNoCopy(x,null);  }}  }
class C{  public static Integer extractDuplexGroupChannel(LocoNetMessage m){switch (getDuplexGroupIdentityMessageType(m)) {case DUPLEX_GROUP_NAME_ETC_REPORT_MESSAGE:    return m.getElement(17) + (((m.getElement(14) & 0x4) == 0x4) ? 128 : 0);case DUPLEX_GROUP_CHANNEL_REPORT_MESSAGE:case DUPLEX_GROUP_CHANNEL_WRITE_MESSAGE:  return m.getElement(5) + (((m.getElement(4) & 0x1) == 0x1) ? 128 : 0);default :return -1;}}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static List<String> toString(List<Query> queries,IndexSchema schema){  List<String> out=new ArrayList<>(queries.size());  for (  Query q : queries) {    out.add(QueryParsing.toString(q,schema));  }  return out;}  }
class C{  public MapStream<K,V> filterValue(Predicate<? super V> predicate){  return filter(null);}  }
class C{  public static RecipeManaInfusion registerManaAlchemyRecipe(ItemStack output,Object input,int mana){  RecipeManaInfusion recipe=registerManaInfusionRecipe(output,input,mana);  recipe.setCatalyst(RecipeManaInfusion.alchemyState);  return recipe;}  }
class C{  public void increaseSpeed(){  animation.setRate(animation.getRate() + 1);}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if (structure != null) {    if (structure.classIndex() == -1) {      structure.setClassIndex(structure.numAttributes() - 1);      System.err.println("No class specified. Last attribute is used as class attribute.");    }    if (structure.attribute(structure.classIndex()).isNumeric()) {      throw new IOException("To save in C4.5 format the class attribute cannot be numeric.");    }  }  if (getRetrieval() == BATCH || getRetrieval() == NONE) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (retrieveFile() == null || getWriter() == null) {    throw new IOException("C4.5 format requires two files. Therefore no output to standard out can be generated.\nPlease specifiy output files using the -o option.");  }  outW=new PrintWriter(getWriter());  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure(Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    for (int i=0; i < structure.attribute(structure.classIndex()).numValues(); i++) {      outW.write(structure.attribute(structure.classIndex()).value(i));      if (i < structure.attribute(structure.classIndex()).numValues() - 1) {        outW.write(",");      } else {        outW.write(".\n");      }    }    for (int i=0; i < structure.numAttributes(); i++) {      if (i != structure.classIndex()) {        outW.write(structure.attribute(i).name() + ": ");        if (structure.attribute(i).isNumeric() || structure.attribute(i).isDate()) {          outW.write("continuous.\n");        } else {          Attribute temp=structure.attribute(i);          for (int j=0; j < temp.numValues(); j++) {            outW.write(temp.value(j));            if (j < temp.numValues() - 1) {              outW.write(",");            } else {              outW.write(".\n");            }          }        }      }    }    outW.flush();    outW.close();    writeMode=getWriteMode();    String out=retrieveFile().getAbsolutePath();    setFileExtension(".data");    out=out.substring(0,out.lastIndexOf('.')) + getFileExtension();    File namesFile=new File(out);    try {      setFile(namesFile);    } catch (    Exception ex) {      throw new IOException("Cannot create data file, only names file created.");    }    if (retrieveFile() == null || getWriter() == null) {      throw new IOException("Cannot create data file, only names file created.");    }    outW=new PrintWriter(getWriter());  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      for (int j=0; j < inst.numAttributes(); j++) {        if (j != structure.classIndex()) {          if (inst.isMissing(j)) {            outW.write("?,");          } else           if (structure.attribute(j).isNominal() || structure.attribute(j).isString()) {            outW.write(structure.attribute(j).value((int)inst.value(j)) + ",");          } else {            outW.write("" + inst.value(j) + ",");          }        }      }      if (inst.isMissing(structure.classIndex())) {        outW.write("?");      } else {        outW.write(structure.attribute(structure.classIndex()).value((int)inst.value(structure.classIndex())));      }      outW.write("\n");      m_incrementalCounter++;      if (m_incrementalCounter > 100) {        m_incrementalCounter=0;        outW.flush();      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      setFileExtension(".names");      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  public Distance3DOp(Geometry g0,Geometry g1,double terminateDistance){  this.geom=new Geometry[2];  geom[0]=g0;  geom[1]=g1;  this.terminateDistance=terminateDistance;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public PluginException(String msg){  super(msg);}  }
class C{  private String translateFunctionLanguage(String sourceVendorName,String targetVendorName,String functionLanguage){  if (functionLanguage != null)   functionLanguage=functionLanguage.trim();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionLanguage(sourceVendorName.toUpperCase(),functionLanguage);}  }
class C{  public static boolean uninstallNormal(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return construct(e1,e2,e3,e4,e5,e6);}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public CapitalizationFilterFactory(Map<String,String> args){  super(args);  boolean ignoreCase=getBoolean(args,KEEP_IGNORE_CASE,false);  Set<String> k=getSet(args,KEEP);  if (k != null) {    keep=new CharArraySet(10,ignoreCase);    keep.addAll(k);  }  k=getSet(args,OK_PREFIX);  if (k != null) {    okPrefix=new ArrayList<>();    for (    String item : k) {      okPrefix.add(item.toCharArray());    }  }  minWordLength=getInt(args,MIN_WORD_LENGTH,0);  maxWordCount=getInt(args,MAX_WORD_COUNT,CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);  maxTokenLength=getInt(args,MAX_TOKEN_LENGTH,CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);  onlyFirstWord=getBoolean(args,ONLY_FIRST_WORD,true);  forceFirstLetter=getBoolean(args,FORCE_FIRST_LETTER,true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public int navigateCurrent(){  log.info("Row=" + m_currentRow);  return setCurrentRow(m_currentRow,true);}  }
class C{  public static double[] join(double[]... arrays){  if (arrays.length == 0) {    return EMPTY_DOUBLES;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  double[] notNull=null;  int finalSize=0;  int nullArrays=0;  DoubleArrayList list=new DoubleArrayList(arrays.length * 10);  for (  double[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_DOUBLES;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new double[list.size()]);}  }
class C{  public static boolean isSuper(int flags){  return (flags & AccSuper) != 0;}  }
class C{  private void loadInsn(final Type type,final int index){}  }
class C{  private void ensureLoaded() throws RepositoryException {  if (isLoaded()) {    return;  }  data=new ArrayList<DataEntry>();  folders=new ArrayList<Folder>();  File fileFolder=getFile();  if (fileFolder != null && fileFolder.exists()) {    File[] listFiles=fileFolder.listFiles();    for (    File file : listFiles) {      if (file.isHidden()) {        continue;      }      if (file.isDirectory()) {        folders.add(new SimpleFolder(file.getName(),this,getRepository()));      } else       if (file.getName().endsWith(".ioo")) {        data.add(new SimpleIOObjectEntry(file.getName().substring(0,file.getName().length() - 4),this,getRepository()));      } else       if (file.getName().endsWith(".rmp")) {        data.add(new SimpleProcessEntry(file.getName().substring(0,file.getName().length() - 4),this,getRepository()));      } else       if (file.getName().endsWith(".blob")) {        data.add(new SimpleBlobEntry(file.getName().substring(0,file.getName().length() - 5),this,getRepository()));      }    }    Collections.sort(data,NAME_COMPARATOR);    Collections.sort(folders,NAME_COMPARATOR);  }}  }
class C{  public void writeFile(ArrayList<DccLocoAddress> consistList) throws IOException {  writeFile(consistList,defaultConsistFilename());}  }
class C{  protected void doDrawInteriorVA(DrawContext dc,Geometry geometry){  GL2 gl=dc.getGL().getGL2();  if (geometry.offset == -1)   return;  if (!dc.isPickingMode() && this.mustApplyLighting(dc,null) && this.normalBuffer != null)   gl.glNormalPointer(GL.GL_FLOAT,0,this.normalBuffer.rewind());  gl.glDrawArrays(this.elementType,geometry.offset,geometry.colladaGeometry.getCount() * this.vertsPerShape);}  }
class C{  public int coinChangeRecursive(int[] coins,int amount){  if (amount < 1)   return 0;  return helper(coins,amount,new int[amount]);}  }
class C{  public UserRoleAssignmentException(String message){  super(message);}  }
class C{  public String readResource(String resourceName,FilterChain filterChain,String encoding){  String newLine=System.getProperty("line.separator");  InputStream resource=ResourceUtils.resourceLoader.getResourceAsStream(resourceName);  if (resource == null) {    throw new CargoException("Resource [" + resourceName + "] not found in resource loader "+ ResourceUtils.resourceLoader);  }  BufferedReader in=null;  StringBuffer out=null;  try {    ChainReaderHelper helper=new ChainReaderHelper();    helper.setBufferSize(8192);    helper.setPrimaryReader(new BufferedReader(createReader(resource,encoding)));    Vector<FilterChain> filterChains=new Vector<FilterChain>();    filterChains.add(filterChain);    helper.setFilterChains(filterChains);    in=new BufferedReader(helper.getAssembledReader());    out=new StringBuffer();    String line;    while ((line=in.readLine()) != null) {      if (line.isEmpty()) {        out.append(newLine);      } else {        if (out.length() > 0) {          out.append(newLine);        }        out.append(line);      }    }  } catch (  IOException e) {    throw new CargoException("Error while reading resource [" + resourceName + "] ",e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        getLogger().warn("Failed to close input stream for [" + resourceName + "]",this.getClass().getName());      }    }  }  return out.toString();}  }
class C{  public static boolean areEquivalent(Property p1,Property p2){  return getPropertySqlDef(p1).equals(getPropertySqlDef(p2));}  }
class C{  public TagTestCaseBase(String name){  super(name);}  }
class C{  protected TCacheStatisticsInterface fillCacheStatistics(TCacheStatisticsInterface cacheStatistic){  cacheStatistic.setHitCount(statisticsCalculator.getHitCount());  cacheStatistic.setMissCount(statisticsCalculator.getMissCount());  cacheStatistic.setHitRatio(getCacheHitrate());  cacheStatistic.setElementCount(objects.size());  cacheStatistic.setPutCount(statisticsCalculator.getPutCount());  cacheStatistic.setRemoveCount(statisticsCalculator.getRemoveCount());  cacheStatistic.setDropCount(statisticsCalculator.getDropCount());  return cacheStatistic;}  }
class C{  private StoragePolicyEntity createStoragePolicyEntity(NamespaceEntity namespaceEntity,String storagePolicyName,StorageEntity storageEntity,StorageEntity destinationStorageEntity,StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity,Integer storagePolicyRuleValue,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,String businessObjectFormatUsage,FileTypeEntity fileTypeEntity,StoragePolicyStatusEntity storagePolicyStatusEntity,Integer storagePolicyVersion,Boolean storagePolicyLatestVersion){  StoragePolicyEntity storagePolicyEntity=new StoragePolicyEntity();  storagePolicyEntity.setNamespace(namespaceEntity);  storagePolicyEntity.setName(storagePolicyName);  storagePolicyEntity.setStorage(storageEntity);  storagePolicyEntity.setDestinationStorage(destinationStorageEntity);  storagePolicyEntity.setStoragePolicyRuleType(storagePolicyRuleTypeEntity);  storagePolicyEntity.setStoragePolicyRuleValue(storagePolicyRuleValue);  storagePolicyEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  if (StringUtils.isNotBlank(businessObjectFormatUsage)) {    storagePolicyEntity.setUsage(businessObjectFormatUsage);  }  storagePolicyEntity.setFileType(fileTypeEntity);  storagePolicyEntity.setStatus(storagePolicyStatusEntity);  storagePolicyEntity.setVersion(storagePolicyVersion);  storagePolicyEntity.setLatestVersion(storagePolicyLatestVersion);  return storagePolicyDao.saveAndRefresh(storagePolicyEntity);}  }
class C{  protected String doIt() throws java.lang.Exception {  CacheMgt.get().reset();  return "Cache Reset";}  }
class C{  public Accept(String value){  this();  setValue(value);}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public CActionCombineTraces(final JFrame parent,final ITraceListProvider traceProvider,final List<TraceList> traces){  super("Union");  m_parent=parent;  m_traceProvider=traceProvider;  m_traces=new ArrayList<TraceList>(traces);}  }
class C{  public void updateNextSeed(GMSSRandom gmssRandom){  gmssRandom.nextSeed(seedNext);}  }
class C{  public Set<BinaryRule> keySet(){  return entries.keySet();}  }
class C{  public SpanQuery snear(SpanQuery s,SpanQuery e,int slop,boolean inOrder){  if (inOrder) {    return spanNearOrderedQuery(slop,s,e);  } else {    return spanNearUnorderedQuery(slop,s,e);  }}  }
class C{  public void deleteScriptFilter(int id){  new ScriptFilterDao().delete(id);}  }
class C{  protected void sequence_PropertyNameValuePair(ISerializationContext context,PropertyNameValuePair semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void test_KBCreateAndDiscovery() throws Exception {  final String namespace=getName();  final Properties properties=getProperties();  Journal jnl=null;  try {    jnl=new Journal(properties);    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties)).get();    assertKBExists(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public static <E>List<E> of(E e1,E e2){  List<E> list=new ArrayList<>();  list.add(e1);  list.add(e2);  return list;}  }
class C{  public boolean hasNames(){  if (mIsPaired) {    return mLeft.hasNames() && mRight.hasNames();  } else {    return mSingle.hasNames();  }}  }
class C{  public LazyFutureStream<T> futureStream(final LazyReact s){  return s.fromStream(topic.stream());}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  @ObjectiveCName("findMentionsWithGid:withQuery:") public List<MentionFilterResult> findMentions(int gid,String query){  return modules.getMentions().findMentions(gid,query);}  }
class C{  public IntSet(){  this(DEFAULT_NUM_BUCKETS,DEFAULT_BUCKET_CAPACITY);}  }
class C{  public void testNoLeaderSelectionStrategy() throws Throwable {  List<Address> results=(List<Address>)ServerSelectionStrategies.LEADER.selectConnections(null,servers);  assertTrue(listsEqual(results,servers));}  }
class C{  private Rotator(){}  }
class C{  public static double blackFormulaImpliedStdDev(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount){  return blackFormulaImpliedStdDev(payoff,strike,forward,blackPrice,discount,Double.NaN,1.0e-6,0.0);}  }
class C{  public static int checkActions(Map<String,Object> entry){  boolean ip6=false;  boolean ip4=false;  String actions=null;  if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {    if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS);    }    if (actions.contains(MatchUtils.STR_ICMPV6_CODE) || actions.contains(MatchUtils.STR_ICMPV6_TYPE) || actions.contains(MatchUtils.STR_IPV6_DST)|| actions.contains(MatchUtils.STR_IPV6_SRC)|| actions.contains(MatchUtils.STR_IPV6_FLOW_LABEL)|| actions.contains(MatchUtils.STR_IPV6_ND_SSL)|| actions.contains(MatchUtils.STR_IPV6_ND_TARGET)|| actions.contains(MatchUtils.STR_IPV6_ND_TTL)) {      ip6=true;    }    if (actions.contains(MatchUtils.STR_NW_SRC) || actions.contains(MatchUtils.STR_NW_DST) || actions.contains(MatchUtils.STR_ARP_OPCODE)|| actions.contains(MatchUtils.STR_ARP_SHA)|| actions.contains(MatchUtils.STR_ARP_DHA)|| actions.contains(MatchUtils.STR_ARP_SPA)|| actions.contains(MatchUtils.STR_ARP_DPA)|| actions.contains(MatchUtils.STR_ICMP_CODE)|| actions.contains(MatchUtils.STR_ICMP_TYPE)) {      ip4=true;    }  }  if (ip6 == false && ip4 == false) {    return 0;  } else   if (ip6 == false && ip4 == true) {    return 1;  } else   if (ip6 == true && ip4 == false) {    return 2;  } else {    return -1;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.260 -0500",hash_original_method="4F1F7D3E12F4616733289A3F7EB4DC63",hash_generated_method="082BFA03233BE8BF651A1E5AC138D206") public static boolean isJavaIdentifierPart(int codePoint){  return ((codePoint) == 1);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/provision-bare-metal") public TaskList provisionBareMetalHosts(ProvisionBareMetalHostsParam param) throws DatabaseException {  ComputeVirtualPool cvp=_dbClient.queryObject(ComputeVirtualPool.class,param.getComputeVpool());  ArgValidator.checkEntity(cvp,param.getComputeVpool(),false);  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,param.getVarray());  ArgValidator.checkEntity(varray,param.getVarray(),false);  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,param.getTenant());  ArgValidator.checkEntity(tenant,param.getTenant(),false);  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {    Cluster cluster=_dbClient.queryObject(Cluster.class,param.getCluster());    ArgValidator.checkEntity(cluster,param.getCluster(),false);  }  _log.debug("checking if CVP is accessible");  _permissionsHelper.checkTenantHasAccessToComputeVirtualPool(tenant.getId(),cvp);  validateHostNames(param);  InterProcessLock lock=lockBladeReservation();  List<String> ceList=null;  try {    ceList=takeComputeElementsFromPool(cvp,param.getHostNames().size(),varray,param.getCluster());  } catch (  Exception e) {    _log.error("unable to takeComputeElementsFromPool",e);    throw e;  } finally {    unlockBladeReservation(lock);  }  Set<Host> hosts=new HashSet<Host>();  for (int i=0; i < param.getHostNames().size(); i++) {    Host host=populateHost(tenant,param.getHostNames().get(i),ceList.get(i),param.getCluster(),cvp.getId());    hosts.add(host);    _dbClient.createObject(host);  }  return createHostTasks(hosts,param.getComputeVpool(),param.getVarray());}  }
class C{  private void replaceImpl(final int startIndex,final int endIndex,final int removeLen,final String insertStr,final int insertLen){  final int newSize=size - removeLen + insertLen;  if (insertLen != removeLen) {    ensureCapacity(newSize);    System.arraycopy(buffer,endIndex,buffer,startIndex + insertLen,size - endIndex);    size=newSize;  }  if (insertLen > 0) {    insertStr.getChars(0,insertLen,buffer,startIndex);  }}  }
class C{  private MemberHandle ensureCorrectClass(MemberHandle mh){  if (mh instanceof MethodHandle) {    Method m=((MethodHandle)mh).hydrate(cl);    MethodHandle m2=new MethodHandle(m);    return m2;  }  return mh;}  }
class C{  private void computeOffsetSegment(LineSegment seg,int side,double distance,LineSegment offset){  int sideSign=side == Position.LEFT ? 1 : -1;  double dx=seg.p1.x - seg.p0.x;  double dy=seg.p1.y - seg.p0.y;  double len=Math.sqrt(dx * dx + dy * dy);  double ux=sideSign * distance * dx / len;  double uy=sideSign * distance * dy / len;  offset.p0.x=seg.p0.x - uy;  offset.p0.y=seg.p0.y + ux;  offset.p1.x=seg.p1.x - uy;  offset.p1.y=seg.p1.y + ux;}  }
class C{  public DialogEditCodeNodeComment(final JFrame parent,final CGraphModel graphModel,final INaviCodeNode node,final INaviInstruction instruction){  super(parent,"Edit Node Comments",true);  Preconditions.checkNotNull(parent,"IE01702: Parent argument can't be null");  m_codeNode=Preconditions.checkNotNull(node,"IE01703: Node argument can't be null");  new CDialogEscaper(this);  setLayout(new BorderLayout());  m_commentsPanel=new CodeNodeCommentsPanel(node);  m_globalLineCommentsPanel=new CGlobalInstructionCommentsPanel(m_codeNode,graphModel);  m_localLineCommentsPanel=new LocalInstructionCommentsPanel(m_codeNode,graphModel);  createGui(InitialTab.LocalLineComments);}  }
class C{  private void revokeRoleForUser(VOUser user){  identityServiceClient.revokeUserRoles(user.getKey(),UserRoleType.PLATFORM_OPERATOR);  user=identityServiceClient.refreshUserValue(user);  System.out.print("After revoke user role, user contains role: ");  for (  UserRoleType role : user.getUserRoles()) {    System.out.print("\"" + role + "\" ");  }  System.out.println("");}  }
class C{  private static Result parse(String input,boolean requireToNormalize){  String root="";  WindowsPathType type=null;  int len=input.length();  int off=0;  if (len > 1) {    char c0=input.charAt(0);    char c1=input.charAt(1);    char c=0;    int next=2;    if (isSlash(c0) && isSlash(c1)) {      type=WindowsPathType.UNC;      off=nextNonSlash(input,next,len);      next=nextSlash(input,off,len);      if (off == next)       throw new InvalidPathException(input,"UNC path is missing hostname");      String host=input.substring(off,next);      off=nextNonSlash(input,next,len);      next=nextSlash(input,off,len);      if (off == next)       throw new InvalidPathException(input,"UNC path is missing sharename");      root="\\\\" + host + "\\"+ input.substring(off,next)+ "\\";      off=next;    } else {      if (isLetter(c0) && c1 == ':') {        char c2;        if (len > 2 && isSlash(c2=input.charAt(2))) {          if (c2 == '\\') {            root=input.substring(0,3);          } else {            root=input.substring(0,2) + '\\';          }          off=3;          type=WindowsPathType.ABSOLUTE;        } else {          root=input.substring(0,2);          off=2;          type=WindowsPathType.DRIVE_RELATIVE;        }      }    }  }  if (off == 0) {    if (len > 0 && isSlash(input.charAt(0))) {      type=WindowsPathType.DIRECTORY_RELATIVE;      root="\\";    } else {      type=WindowsPathType.RELATIVE;    }  }  if (requireToNormalize) {    StringBuilder sb=new StringBuilder(input.length());    sb.append(root);    return new Result(type,root,normalize(sb,input,off));  } else {    return new Result(type,root,input);  }}  }
class C{  public void resetTracking(){  totalTime=0;  drawCycles=0;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public Close(String sessionID){  if (sessionID == null || "".equals(sessionID)) {    throw new IllegalArgumentException("Session ID must not be null or empty");  }  this.sessionID=sessionID;  setType(Type.SET);}  }
class C{  public void markAsUnspent(){  availableForSpending=true;  spentBy=null;}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public CellFeed(BaseFeed sourceFeed){  super(CellEntry.class,sourceFeed);  getCategories().add(CellEntry.CATEGORY);}  }
class C{  private Map<Integer,Set<Integer>> parseAssessments(Node root){  Map<Integer,Set<Integer>> map=new TreeMap<Integer,Set<Integer>>();  Node assess1=getNamedNode("Assessment",root.getChildNodes());  Node assess2=getNamedNode("Assessment",assess1.getChildNodes());  NodeList afiles=assess2.getChildNodes();  for (int i=0; i < afiles.getLength(); i++) {    Node afile=afiles.item(i);    String fileid=getAttributeValue("file_id",afile);    NodeList findings=afile.getChildNodes();    for (int j=0; j < findings.getLength(); j++) {      Node finding=findings.item(j);      if (finding != null && finding.getNodeName().equals("Finding")) {        int findingid=Integer.parseInt(getAttributeValue("data_id",finding));        int fileidint=Integer.parseInt(fileid);        Set<Integer> findingSet=map.get(fileidint);        if (findingSet == null) {          findingSet=new HashSet<Integer>();          map.put(fileidint,findingSet);        }        findingSet.add(findingid);      }    }  }  return map;}  }
class C{  Vector<String> parseIdentifierList(boolean lower) throws IOException {  Vector<String> elems=new Vector<>();  skipSpace();switch (ch) {case '(':    ch=in.read();  skipParameterSpace();while (parseNameToken(lower)) {  elems.addElement(getString(0));  skipParameterSpace();  if (ch == '|') {    ch=in.read();    skipParameterSpace();  }}expect(')');skipParameterSpace();break;default :if (!parseIdentifier(lower)) {error("expected","identifier");break;}elems.addElement(getString(0));skipParameterSpace();break;}return elems;}  }
class C{  public void test_URIs(){  final URI a=new URIImpl("http://www.bigdata.com");  assertEquals(a,roundTrip_tuned(a));}  }
class C{  public PushParams withRepository(@NotNull String repository){  requireNonNull(repository);  this.repository=repository;  return this;}  }
class C{  public static String toJson(Object obj){  return toJson(obj,false);}  }
class C{  public static void main(String[] args){  Header.printHeader(AccessibilityCalculator.class.toString(),args);  Config config=ConfigUtils.createConfig();  config.transit().setUseTransit(true);  MutableScenario sc=(MutableScenario)ScenarioUtils.createScenario(config);  String householdFile=args[0];  Households hhs=new HouseholdsImpl();  HouseholdsReaderV10 hhr=new HouseholdsReaderV10(hhs);  hhr.readFile(householdFile);  LOG.info("Number of households: " + hhs.getHouseholds().size());  String populationFile=args[1];  sc.getTransitSchedule();  PopulationReader mpr=new PopulationReader(sc);  mpr.readFile(populationFile);  LOG.info("Number of persons: " + sc.getPopulation().getPersons().size());  String personAttributesFile=args[2];  ObjectAttributes oa=new ObjectAttributes();  ObjectAttributesXmlReader oar=new ObjectAttributesXmlReader(oa);  oar.readFile(personAttributesFile);  for (  Id<Person> id : sc.getPopulation().getPersons().keySet()) {    String hhId=(String)oa.getAttribute(id.toString(),"householdId");    sc.getPopulation().getPersons().get(id).getCustomAttributes().put("householdId",Id.create(hhId,Household.class));    Double hhIncome=(Double)oa.getAttribute(id.toString(),"householdIncome");    sc.getPopulation().getPersons().get(id).getCustomAttributes().put("householdIncome",hhIncome);    String race=(String)oa.getAttribute(id.toString(),"race");    sc.getPopulation().getPersons().get(id).getCustomAttributes().put("race",race);    String school=(String)oa.getAttribute(id.toString(),"school");    sc.getPopulation().getPersons().get(id).getCustomAttributes().put("school",school);  }  LOG.info("Done adding custom attributes: household Id; household income; and race.");  String facilitiesFile=args[3];  FacilitiesReaderMatsimV1 fr=new FacilitiesReaderMatsimV1(sc);  fr.readFile(facilitiesFile);  LOG.info("Number of facilities: " + sc.getActivityFacilities().getFacilities().size());  for (  ActivityFacility af : sc.getActivityFacilities().getFacilities().values()) {    for (    String s : af.getActivityOptions().keySet()) {      if (!activityOptions.containsKey(s)) {        activityOptions.put(s,1);      } else {        int oldValue=activityOptions.get(s);        activityOptions.put(s,oldValue + 1);      }    }  }  LOG.info("----------------------------------------------------");  LOG.info("Summary of activity options offered at facilities:");  for (  String s : activityOptions.keySet()) {    LOG.info("   " + s + ": "+ activityOptions.get(s));  }  String networkFile=args[4];  MatsimNetworkReader mnr=new MatsimNetworkReader(sc.getNetwork());  mnr.readFile(networkFile);  String transitFile=args[5];  TransitScheduleReader tsr=new TransitScheduleReader(sc);  tsr.readFile(transitFile);  Scenario scTransit=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader transitNetworkReader=new MatsimNetworkReader(scTransit.getNetwork());  transitNetworkReader.readFile(args[6]);  AccessibilityCalculator ac=new AccessibilityCalculator(sc,hhs,scTransit.getNetwork());  String outputFolder=args[7];  ac.run(outputFolder);  LOG.info("----------------------------------------------------");  LOG.info("Exceptions handled:");  LOG.info("   Number of people working from home: " + workAtHomeCounter);  LOG.info("   Number of educationless scholars  : " + noEducationCounter);  Header.printFooter();}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  try {    resolvedFilterObject=FilterUtil.getFilterValues(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter());    if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {      resolvedFilterObject.getFilterList().add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);      Collections.sort(resolvedFilterObject.getFilterList());    }  } catch (  QueryExecutionException e) {    throw new FilterUnsupportedException(e);  }  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  public Literal createLiteral(Object object){  return lm.createLiteral(object);}  }
class C{  private final byte[] deriveRawKey(int cost,byte[] salt,byte[] psw){  if (salt.length != 16) {    throw new DataLengthException("Invalid salt size: 16 bytes expected.");  }  if (cost < 4 || cost > 31) {    throw new IllegalArgumentException("Illegal cost factor: 4 - 31 expected.");  }  if (psw.length == 0) {    psw=new byte[4];  }  initState();  int[] salt32Bit=new int[4];  salt32Bit[0]=BytesTo32bits(salt,0);  salt32Bit[1]=BytesTo32bits(salt,4);  salt32Bit[2]=BytesTo32bits(salt,8);  salt32Bit[3]=BytesTo32bits(salt,12);  int[] salt32Bit2=new int[salt.length];  salt32Bit2[0]=salt32Bit[2];  salt32Bit2[1]=salt32Bit[3];  salt32Bit2[2]=salt32Bit[0];  salt32Bit2[3]=salt32Bit[1];  cyclicXorKey(psw);  processTableWithSalt(P,salt32Bit,0,0);  Arrays.fill(salt32Bit,0);  processTableWithSalt(S,salt32Bit2,P[P.length - 2],P[P.length - 1]);  Arrays.fill(salt32Bit2,0);  int rounds=1 << cost;  for (int i=0; i != rounds; i++) {    cyclicXorKey(psw);    processTable(0,0,P);    processTable(P[P_SZ - 2],P[P_SZ - 1],S);    cyclicXorKey(salt);    processTable(0,0,P);    processTable(P[P_SZ - 2],P[P_SZ - 1],S);  }  return encryptMagicString();}  }
class C{  @NoInline public static void write(char value){  if (runningVM) {    sysCall.sysConsoleWriteChar(value);  } else {    writeNotRunningVM(value);  }}  }
class C{  private void paintBackgroundPressed(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,pressed);}  }
class C{  public boolean isIncludeNullsElementValue(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsElementValue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final double x(){  return this.x;}  }
class C{  public ResponseFuture request(Object request) throws RemotingException {  warning(request);  initClient();  return client.request(request);}  }
class C{  private static boolean unorderedCompare(List<Query> fqList1,List<Query> fqList2){  if (fqList1 == fqList2)   return true;  if (fqList1 == null || fqList2 == null)   return false;  int sz=fqList1.size();  if (sz != fqList2.size())   return false;  for (int i=0; i < sz; i++) {    if (!fqList1.get(i).equals(fqList2.get(i))) {      return unorderedCompare(fqList1,fqList2,i);    }  }  return true;}  }
class C{  public boolean isDirty(){  return m_dirty;}  }
class C{  public Scanner(String source){  this(new StringReader(source),WHITESPACE_PATTERN);}  }
class C{  private void addComponentsToPane(Container pane){  Locale locale=Locale.getDefault();  pane.setComponentOrientation(ComponentOrientation.getOrientation(locale));  pane.setLayout(new GridBagLayout());  JPanel panelParameters=new JPanel();  panelParameters.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelParameters.setLayout(new GridBagLayout());  panelParameters.setBorder(BorderFactory.createTitledBorder(s_logger.localizeMessage("guiParametersTitle")));  panelParameters.setToolTipText(s_logger.localizeMessage("guiParametersTip"));  pane.add(panelParameters,getParametersGroupConstraints(0,0));  JLabel label=new JLabel(s_logger.localizeMessage("guiSourceTitle"));  label.setToolTipText(s_logger.localizeMessage("guiSourceTip"));  panelParameters.add(label,getTitle1Constraints(1,0));  label=new JLabel(s_logger.localizeMessage("guiTargetTitle"));  label.setToolTipText(s_logger.localizeMessage("guiTargetTip"));  panelParameters.add(label,getTitle1Constraints(2,0));  label=new JLabel(s_logger.localizeMessage("guiSourceDescription"));  label.setToolTipText(s_logger.localizeMessage("guiSourceTip"));  panelParameters.add(label,getTitle2Constraints(1,1));  label=new JLabel(s_logger.localizeMessage("guiTargetDescription"));  label.setToolTipText(s_logger.localizeMessage("guiTargetTip"));  panelParameters.add(label,getTitle2Constraints(2,1));  label=new JLabel(s_logger.localizeMessage("guiVersion"));  label.setToolTipText(s_logger.localizeMessage("guiVersionTip"));  panelParameters.add(label,getLabelConstraints(0,2));  m_sourceVersion.setEnabled(false);  m_sourceVersion.setEditable(false);  m_sourceVersion.setDisabledTextColor(m_sourceHost.getForeground());  panelParameters.add(m_sourceVersion,getFieldConstraints(1,2));  m_targetVersion.setEnabled(false);  m_targetVersion.setEditable(false);  m_targetVersion.setDisabledTextColor(m_targetHost.getForeground());  panelParameters.add(m_targetVersion,getFieldConstraints(2,2));  label=new JLabel(s_logger.localizeMessage("guiVendor"));  label.setToolTipText(s_logger.localizeMessage("guiVendorTip"));  panelParameters.add(label,getLabelConstraints(0,3));  m_sourceVendor.addActionListener(this);  panelParameters.add(m_sourceVendor,getFieldConstraints(1,3));  m_targetVendor.addActionListener(this);  panelParameters.add(m_targetVendor,getFieldConstraints(2,3));  label=new JLabel(s_logger.localizeMessage("guiHost"));  label.setToolTipText(s_logger.localizeMessage("guiHostTip"));  panelParameters.add(label,getLabelConstraints(0,4));  m_sourceHost.addActionListener(this);  m_sourceHost.addFocusListener(this);  panelParameters.add(m_sourceHost,getFieldConstraints(1,4));  m_targetHost.addActionListener(this);  m_targetHost.addFocusListener(this);  panelParameters.add(m_targetHost,getFieldConstraints(2,4));  label=new JLabel(s_logger.localizeMessage("guiPort"));  label.setToolTipText(s_logger.localizeMessage("guiPortTip"));  panelParameters.add(label,getLabelConstraints(0,5));  m_sourcePort.addActionListener(this);  m_sourcePort.addFocusListener(this);  panelParameters.add(m_sourcePort,getFieldConstraints(1,5));  m_targetPort.addActionListener(this);  m_targetPort.addFocusListener(this);  panelParameters.add(m_targetPort,getFieldConstraints(2,5));  label=new JLabel(s_logger.localizeMessage("guiUser"));  label.setToolTipText(s_logger.localizeMessage("guiUserTip"));  panelParameters.add(label,getLabelConstraints(0,6));  m_sourceUser.addActionListener(this);  m_sourceUser.addFocusListener(this);  panelParameters.add(m_sourceUser,getFieldConstraints(1,6));  m_targetUser.addActionListener(this);  m_targetUser.addFocusListener(this);  panelParameters.add(m_targetUser,getFieldConstraints(2,6));  label=new JLabel(s_logger.localizeMessage("guiPassword"));  label.setToolTipText(s_logger.localizeMessage("guiPasswordTip"));  panelParameters.add(label,getLabelConstraints(0,7));  m_sourcePassword.addActionListener(this);  m_sourcePassword.addFocusListener(this);  panelParameters.add(m_sourcePassword,getFieldConstraints(1,7));  m_targetPassword.addActionListener(this);  m_targetPassword.addFocusListener(this);  panelParameters.add(m_targetPassword,getFieldConstraints(2,7));  label=new JLabel(s_logger.localizeMessage("guiSystemUser"));  label.setToolTipText(s_logger.localizeMessage("guiSystemUserTip"));  panelParameters.add(label,getLabelConstraints(0,8));  m_sourceSystemUser.addActionListener(this);  m_sourceSystemUser.addFocusListener(this);  panelParameters.add(m_sourceSystemUser,getFieldConstraints(1,8));  m_targetSystemUser.addActionListener(this);  m_targetSystemUser.addFocusListener(this);  panelParameters.add(m_targetSystemUser,getFieldConstraints(2,8));  label=new JLabel(s_logger.localizeMessage("guiSystemPassword"));  label.setToolTipText(s_logger.localizeMessage("guiSystemPasswordTip"));  panelParameters.add(label,getLabelConstraints(0,9));  m_sourceSystemPassword.addActionListener(this);  m_sourceSystemPassword.addFocusListener(this);  panelParameters.add(m_sourceSystemPassword,getFieldConstraints(1,9));  m_targetSystemPassword.addActionListener(this);  m_targetSystemPassword.addFocusListener(this);  panelParameters.add(m_targetSystemPassword,getFieldConstraints(2,9));  label=new JLabel(s_logger.localizeMessage("guiName"));  label.setToolTipText(s_logger.localizeMessage("guiNameTip"));  panelParameters.add(label,getLabelConstraints(0,10));  m_sourceName.setEditable(true);  m_sourceName.addActionListener(this);  panelParameters.add(m_sourceName,getFieldConstraints(1,10));  m_targetName.setEditable(true);  m_targetName.addActionListener(this);  panelParameters.add(m_targetName,getFieldConstraints(2,10));  label=new JLabel(s_logger.localizeMessage("guiUrl"));  label.setToolTipText(s_logger.localizeMessage("guiUrlTip"));  panelParameters.add(label,getLabelConstraints(0,11));  m_sourceURL.setEnabled(false);  m_sourceURL.setEditable(false);  m_sourceURL.setDisabledTextColor(m_sourceHost.getForeground());  panelParameters.add(m_sourceURL,getFieldConstraints(1,11));  m_targetURL.setEnabled(false);  m_targetURL.setEditable(false);  m_targetURL.setDisabledTextColor(m_targetHost.getForeground());  panelParameters.add(m_targetURL,getFieldConstraints(2,11));  label=new JLabel(s_logger.localizeMessage("guiCatalog"));  label.setToolTipText(s_logger.localizeMessage("guiCatalogTip"));  panelParameters.add(label,getLabelConstraints(0,12));  m_sourceCatalog.addActionListener(this);  panelParameters.add(m_sourceCatalog,getFieldConstraints(1,12));  m_targetCatalog.setEditable(true);  m_targetCatalog.addActionListener(this);  panelParameters.add(m_targetCatalog,getFieldConstraints(2,12));  label=new JLabel(s_logger.localizeMessage("guiSchema"));  label.setToolTipText(s_logger.localizeMessage("guiSchemaTip"));  panelParameters.add(label,getLabelConstraints(0,13));  m_sourceSchema.addActionListener(this);  panelParameters.add(m_sourceSchema,getFieldConstraints(1,13));  m_targetSchema.setEditable(true);  m_targetSchema.addActionListener(this);  panelParameters.add(m_targetSchema,getFieldConstraints(2,13));  m_sourceReset=new JButton(s_logger.localizeMessage("guiReset"));  m_sourceReset.setMnemonic(new Integer(s_logger.localizeMessage("guiSourceResetMnemonic")));  m_sourceReset.addActionListener(this);  m_sourceReset.setToolTipText(s_logger.localizeMessage("guiResetTip"));  m_sourceReset.setIcon(new ImageIcon(getImage("Reset16.png")));  panelParameters.add(m_sourceReset,getFieldConstraints(1,14));  m_targetReset=new JButton(s_logger.localizeMessage("guiReset"));  m_targetReset.setMnemonic(new Integer(s_logger.localizeMessage("guiTargetResetMnemonic")));  m_targetReset.addActionListener(this);  m_targetReset.setToolTipText(s_logger.localizeMessage("guiResetTip"));  m_targetReset.setIcon(new ImageIcon(getImage("Reset16.png")));  panelParameters.add(m_targetReset,getFieldConstraints(2,14));  JPanel panelMode=new JPanel();  panelMode.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelMode.setLayout(new GridBagLayout());  panelMode.setBorder(BorderFactory.createTitledBorder(s_logger.localizeMessage("guiModeTitle")));  panelMode.setToolTipText(s_logger.localizeMessage("guiModeTip"));  pane.add(panelMode,getOptionGroupConstraints(1,0));  m_modeUpgrade=new JRadioButton(s_logger.localizeMessage("guiModeUpgrade"));  m_modeUpgrade.setMnemonic(new Integer(s_logger.localizeMessage("guiModeUpgradeMnemonic")));  m_modeUpgrade.setToolTipText(s_logger.localizeMessage("guiModeUpgradeTip"));  m_modeUpgrade.addActionListener(this);  m_modeTransfer=new JRadioButton(s_logger.localizeMessage("guiModeTransfer"));  m_modeTransfer.setMnemonic(new Integer(s_logger.localizeMessage("guiModeTransferMnemonic")));  m_modeTransfer.setToolTipText(s_logger.localizeMessage("guiModeTransferTip"));  m_modeTransfer.addActionListener(this);  ButtonGroup modeGroup=new ButtonGroup();  modeGroup.add(m_modeUpgrade);  modeGroup.add(m_modeTransfer);  panelMode.add(m_modeUpgrade,getFieldConstraints(0,0));  panelMode.add(m_modeTransfer,getFieldConstraints(1,0));  JPanel panelOptions=new JPanel();  panelOptions.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelOptions.setLayout(new GridBagLayout());  panelOptions.setBorder(BorderFactory.createTitledBorder(s_logger.localizeMessage("guiOptionsTitle")));  panelOptions.setToolTipText(s_logger.localizeMessage("guiOptionsTip"));  pane.add(panelOptions,getOptionGroupConstraints(1,1));  JPanel panelLogLevel=new JPanel();  panelLogLevel.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelLogLevel.setLayout(new GridBagLayout());  m_optionLogLevel=new JComboBox();  m_optionLogLevel.setToolTipText(s_logger.localizeMessage("guiOptionLogLevelTip"));  m_labelLogLevel=new JLabel(s_logger.localizeMessage("guiOptionLogLevel"));  m_labelLogLevel.setLabelFor(m_optionLogLevel);  m_labelLogLevel.setToolTipText(s_logger.localizeMessage("guiOptionLogLevelTip"));  m_labelLogLevel.setDisplayedMnemonic(new Integer(s_logger.localizeMessage("guiOptionLogLevelMnemonic")));  panelLogLevel.add(m_labelLogLevel,getFieldConstraints(0,0));  panelLogLevel.add(m_optionLogLevel,getFieldConstraints(1,0));  m_optionAttemptTranslations=new JCheckBox(s_logger.localizeMessage("guiOptionAttemptTranslations"));  m_optionAttemptTranslations.setMnemonic(new Integer(s_logger.localizeMessage("guiOptionAttemptTranslationsMnemonic")));  m_optionAttemptTranslations.setToolTipText(s_logger.localizeMessage("guiOptionAttemptTranslationsTip"));  m_optionPreserveTableIDs=new JCheckBox(s_logger.localizeMessage("guiOptionPreserveTableIDs"));  m_optionPreserveTableIDs.setMnemonic(new Integer(s_logger.localizeMessage("guiOptionPreserveTableIDsMnemonic")));  m_optionPreserveTableIDs.setToolTipText(s_logger.localizeMessage("guiOptionPreserveTableIDsTip"));  m_optionDropSource=new JCheckBox(s_logger.localizeMessage("guiOptionDropSource"));  m_optionDropSource.setMnemonic(new Integer(s_logger.localizeMessage("guiOptionDropSourceMnemonic")));  m_optionDropSource.setToolTipText(s_logger.localizeMessage("guiOptionDropSourceTip"));  m_optionOptimizeDatabase=new JCheckBox(s_logger.localizeMessage("guiOptionOptimizeDatabase"));  m_optionOptimizeDatabase.setMnemonic(new Integer(s_logger.localizeMessage("guiOptionOptimizeDatabaseMnemonic")));  m_optionOptimizeDatabase.setToolTipText(s_logger.localizeMessage("guiOptionOptimizeDatabaseTip"));  panelOptions.add(panelLogLevel,getFieldConstraints(0,0));  panelOptions.add(m_optionAttemptTranslations,getFieldConstraints(0,1));  panelOptions.add(m_optionPreserveTableIDs,getFieldConstraints(0,2));  panelOptions.add(m_optionDropSource,getFieldConstraints(0,3));  panelOptions.add(m_optionOptimizeDatabase,getFieldConstraints(0,4));  JPanel panelDoNotInterrupt=new JPanel();  panelDoNotInterrupt.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelDoNotInterrupt.setLayout(new GridBagLayout());  pane.add(panelDoNotInterrupt,getDoNotInterruptConstraints(1,2));  m_labelDoNotInterrupt=new JLabel(s_logger.localizeMessage("migrateDoNotInterrupt"));  m_labelDoNotInterrupt.setForeground(Color.RED);  m_labelDoNotInterrupt.setVisible(false);  panelDoNotInterrupt.add(m_labelDoNotInterrupt,getFieldConstraints(0,0));  JPanel panelStartButton=new JPanel();  panelStartButton.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelStartButton.setLayout(new GridBagLayout());  pane.add(panelStartButton,getButtonGroupConstraints(1,3));  m_buttonStart=new JButton(s_logger.localizeMessage("guiButtonStart"));  m_buttonStart.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonStartMnemonic")));  m_buttonStart.setToolTipText(s_logger.localizeMessage("guiButtonStartTip"));  m_buttonStart.setIcon(new ImageIcon(getImage("Process16.png")));  m_buttonStart.addActionListener(this);  panelStartButton.add(m_buttonStart,getFieldConstraints(0,0));  JPanel panelStatus=new JPanel();  panelStatus.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelStatus.setLayout(new GridBagLayout());  panelStatus.setBorder(BorderFactory.createTitledBorder(s_logger.localizeMessage("guiStatusTitle")));  panelStatus.setToolTipText(s_logger.localizeMessage("guiStatusTip"));  pane.add(panelStatus,getLogGroupConstraints(0,4));  label=new JLabel(s_logger.localizeMessage("guiStep"));  panelStatus.add(label,getLabelConstraints(0,0));  m_step.setEditable(false);  m_step.setEnabled(false);  m_step.setDisabledTextColor(m_sourceHost.getForeground());  panelStatus.add(m_step,getStatusFieldConstraints(1,0));  label=new JLabel(s_logger.localizeMessage("guiAction"));  panelStatus.add(label,getLabelConstraints(0,1));  m_action.setEditable(false);  m_action.setEnabled(false);  m_action.setDisabledTextColor(m_sourceHost.getForeground());  panelStatus.add(m_action,getStatusFieldConstraints(1,1));  label=new JLabel(s_logger.localizeMessage("guiDetail"));  panelStatus.add(label,getLabelConstraints(0,2));  m_detail.setEditable(false);  m_detail.setEnabled(false);  m_detail.setDisabledTextColor(m_sourceHost.getForeground());  panelStatus.add(m_detail,getStatusFieldConstraints(1,2));  JPanel panelViewButtons=new JPanel();  panelViewButtons.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelViewButtons.setLayout(new GridBagLayout());  pane.add(panelViewButtons,getViewGroupConstraints(0,5));  m_trace=new JButton(s_logger.localizeMessage("guiButtonViewTrace"));  m_trace.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonViewTraceMnemonic")));  m_trace.setToolTipText(s_logger.localizeMessage("guiButtonViewTraceTip"));  m_trace.setIcon(new ImageIcon(getImage("Zoom16.png")));  m_trace.setEnabled(false);  m_trace.addActionListener(this);  m_warnings=new JButton(s_logger.localizeMessage("guiButtonViewWarnings"));  m_warnings.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonViewWarningsMnemonic")));  m_warnings.setToolTipText(s_logger.localizeMessage("guiButtonViewWarningsTip"));  m_warnings.setIcon(new ImageIcon(getImage("Zoom16.png")));  m_warnings.setEnabled(false);  m_warnings.addActionListener(this);  m_errors=new JButton(s_logger.localizeMessage("guiButtonViewErrors"));  m_errors.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonViewErrorsMnemonic")));  m_errors.setToolTipText(s_logger.localizeMessage("guiButtonViewErrorsTip"));  m_errors.setIcon(new ImageIcon(getImage("Zoom16.png")));  m_errors.setEnabled(false);  m_errors.addActionListener(this);  panelViewButtons.add(m_trace,getFieldConstraints(0,0));  panelViewButtons.add(m_warnings,getFieldConstraints(1,0));  panelViewButtons.add(m_errors,getFieldConstraints(2,0));  JPanel panelCloseButtons=new JPanel();  panelCloseButtons.setComponentOrientation(ComponentOrientation.getOrientation(locale));  panelCloseButtons.setLayout(new GridBagLayout());  pane.add(panelCloseButtons,getButtonGroupConstraints(1,5));  m_buttonCancel=new JButton(s_logger.localizeMessage("guiButtonCancel"));  m_buttonCancel.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonCancelMnemonic")));  m_buttonCancel.setToolTipText(s_logger.localizeMessage("guiButtonCancelTip"));  m_buttonCancel.setIcon(new ImageIcon(getImage("Cancel16.png")));  m_buttonCancel.addActionListener(this);  m_buttonClose=new JButton(s_logger.localizeMessage("guiButtonClose"));  m_buttonClose.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonCloseMnemonic")));  m_buttonClose.setToolTipText(s_logger.localizeMessage("guiButtonCloseTip"));  m_buttonClose.setIcon(new ImageIcon(getImage("Logout16.png")));  m_buttonClose.addActionListener(this);  panelCloseButtons.add(m_buttonCancel,getFieldConstraints(0,0));  panelCloseButtons.add(m_buttonClose,getFieldConstraints(1,0));  Vector<Component> order=new Vector<Component>();  order.add(m_sourceVersion);  order.add(m_sourceVendor);  order.add(m_sourceHost);  order.add(m_sourcePort);  order.add(m_sourceUser);  order.add(m_sourcePassword);  order.add(m_sourceSystemUser);  order.add(m_sourceSystemPassword);  order.add(m_sourceName);  order.add(m_sourceURL);  order.add(m_sourceCatalog);  order.add(m_sourceSchema);  order.add(m_sourceReset);  order.add(m_targetVersion);  order.add(m_targetVendor);  order.add(m_targetHost);  order.add(m_targetPort);  order.add(m_targetUser);  order.add(m_targetPassword);  order.add(m_targetSystemUser);  order.add(m_targetSystemPassword);  order.add(m_targetName);  order.add(m_targetURL);  order.add(m_targetCatalog);  order.add(m_targetSchema);  order.add(m_targetReset);  order.add(m_modeUpgrade);  order.add(m_modeTransfer);  order.add(m_optionLogLevel);  order.add(m_optionAttemptTranslations);  order.add(m_optionPreserveTableIDs);  order.add(m_optionDropSource);  order.add(m_optionOptimizeDatabase);  order.add(m_buttonStart);  order.add(m_step);  order.add(m_action);  order.add(m_detail);  order.add(m_trace);  order.add(m_warnings);  order.add(m_errors);  order.add(m_buttonCancel);  order.add(m_buttonClose);  m_tabOrder=new CustomTabOrder(order);  pane.setFocusCycleRoot(true);  pane.setFocusTraversalPolicy(m_tabOrder);}  }
class C{  public void connect(TlsClient tlsClient) throws IOException {  if (tlsClient == null) {    throw new IllegalArgumentException("'tlsClient' cannot be null");  }  if (this.tlsClient != null) {    throw new IllegalStateException("'connect' can only be called once");  }  this.tlsClient=tlsClient;  this.securityParameters=new SecurityParameters();  this.securityParameters.entity=ConnectionEnd.client;  this.tlsClientContext=new TlsClientContextImpl(secureRandom,securityParameters);  this.securityParameters.clientRandom=createRandomBlock(tlsClient.shouldUseGMTUnixTime(),tlsClientContext.getNonceRandomGenerator());  this.tlsClient.init(tlsClientContext);  this.recordStream.init(tlsClientContext);  TlsSession sessionToResume=tlsClient.getSessionToResume();  if (sessionToResume != null) {    SessionParameters sessionParameters=sessionToResume.exportSessionParameters();    if (sessionParameters != null) {      this.tlsSession=sessionToResume;      this.sessionParameters=sessionParameters;    }  }  sendClientHelloMessage();  this.connection_state=CS_CLIENT_HELLO;  completeHandshake();}  }
class C{  public static int countSubsets(LabelSet ysub,Set<LabelSet> Y){  int c=0;  for (  LabelSet s : Y) {    if (ysub.subsetof(s) > 0)     c++;  }  return c;}  }
class C{  public Integer uploadImage(String message,String fileName,Bitmap bitmap,int quality) throws Exception {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  if (fileName.endsWith("PNG") || fileName.endsWith("png")) {    bitmap.compress(CompressFormat.PNG,0,bos);  } else   if (fileName.endsWith("JPEG") || fileName.endsWith("JPG") || fileName.endsWith("jpg")|| fileName.endsWith("jpeg")) {    bitmap.compress(CompressFormat.JPEG,quality,bos);  } else {    throw new SocialAuthException("Image Format not supported");  }  InputStream inputStream=new ByteArrayInputStream(bos.toByteArray());  Response res;  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook") || getCurrentProvider().getProviderId().equalsIgnoreCase("twitter")) {      res=getCurrentProvider().uploadImage(message,fileName,inputStream);      Log.d("SocialAuthAdapter","Image Uploaded");      return res.getStatus();    } else {      throw new SocialAuthException("Provider not Supported");    }  } catch (  Exception e) {    throw new SocialAuthException("Image Upload Error");  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static boolean isWildCard(int[] stateSetOrSpec){  return stateSetOrSpec.length == 0 || stateSetOrSpec[0] == 0;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((tipoBusqueda == TIPO_BUSQUEDA_POR_GESTOR) && StringUtils.isBlank(gestor))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(PrestamosConstants.LABEL_PRESTAMOS_GESTOR_PRESTAMO,request.getLocale())));  return errors;}  }
class C{  private void updateTimesForScoring(List<Plan> newPlans){  for (  Plan plan : newPlans) {    double time=0.0;    boolean firstActivity=true;    Activity lastActivity=null;    if (plan.getPlanElements().size() == 1) {      ((Activity)plan.getPlanElements().get(0)).setStartTime(0.0);      ((Activity)plan.getPlanElements().get(0)).setEndTime(24.0 * 3600.0);    } else {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Activity) {          if (!firstActivity) {            ((Activity)pe).setStartTime(time);          }          lastActivity=(Activity)pe;          firstActivity=false;          if (((Activity)pe).getEndTime() != Time.UNDEFINED_TIME) {            if (time < ((Activity)pe).getEndTime())             time=((Activity)pe).getEndTime(); else {              ((Activity)pe).setEndTime(time);            }          }        } else {          if (((Leg)pe).getRoute() != null) {            double tt=((Leg)pe).getRoute().getTravelTime();            time+=tt;            ((Leg)pe).setTravelTime(tt);          } else {            time+=((Leg)pe).getTravelTime();          }        }      }      lastActivity.setEndTime(Time.UNDEFINED_TIME);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void randomizeStimulus(){  if (randomLower >= randomUpper) {    JOptionPane.showMessageDialog(null,"Upper and lower  values out of bounds.","Warning",JOptionPane.ERROR_MESSAGE);    return;  }  stimulusPanel.removeAll();  for (int i=0; i < valArray.length; i++) {    stimulusVals[i]=new JTextField("" + (((randomUpper - randomLower) * Math.random()) + randomLower));    int lbl=i + 1;    JLabel tmp=new JLabel(lbl + ":");    con.weightx=0.3;    con.gridx=1;    con.gridy=i + 1;    stimulusPanel.add(tmp,con);    con.weightx=3;    con.gridx=2;    con.gridy=i + 1;    stimulusPanel.add(stimulusVals[i],con);  }  stimulusPanel.updateUI();}  }
class C{  public boolean hasPath(){  return getPath() != null;}  }
class C{  static byte[] createBuffer(){  return new byte[8192];}  }
class C{  private void cmd_export(){  JFileChooser jc=new JFileChooser();  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Export"));  jc.setDialogType(JFileChooser.SAVE_DIALOG);  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);  if (jc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)   return;  try {    EditorKit kit=editorPane.getEditorKit();    OutputStreamWriter writer=new OutputStreamWriter(new FileOutputStream(jc.getSelectedFile()));    editorPane.write(writer);    writer.flush();    writer.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"HTMLEditor.export" + e.getMessage());  }}  }
class C{  public void transformValues(TDoubleFunction function){  Object[] keys=_set;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private static void generateParameterPassingCode(Assembler asm,TypeReference[] types,int nextVMArgReg,int nextVMArgFloatReg,int spillOffsetVM,int nextOSArgReg,int nextOSArgFloatReg,int spillOffsetOS){  if (VM.BuildForSVR4ABI) {    genSVR4ParameterPassingCode(asm,types,nextVMArgReg,nextVMArgFloatReg,spillOffsetVM,nextOSArgReg,nextOSArgFloatReg,spillOffsetOS);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPower64ELF_ABI);    gen64BitPowerPC_ELF_ParameterPassingCode(asm,types,nextVMArgReg,nextVMArgFloatReg,spillOffsetVM,nextOSArgReg,nextOSArgFloatReg,spillOffsetOS);  }}  }
class C{  private void printJavadoc(JavadocComment javadoc,Object arg){  if (javadoc != null) {    javadoc.accept(this,arg);  }}  }
class C{  private void writeModelInfo(ILaunchConfiguration config,ModelWriter writer) throws CoreException {  final List<Assignment> constants=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_CONSTANTS,new Vector<String>()),true);  TypedSet modelValues=TypedSet.parseSet(config.getAttribute(MODEL_PARAMETER_MODEL_VALUES,EMPTY_STRING));  writer.addConstants(constants,modelValues,MODEL_PARAMETER_CONSTANTS,MODEL_PARAMETER_MODEL_VALUES);  writer.addNewDefinitions(config.getAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,EMPTY_STRING),MODEL_PARAMETER_NEW_DEFINITIONS);  writer.addConstantsBis(constants,MODEL_PARAMETER_CONSTANTS);  List<Assignment> overrides=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_DEFINITIONS,new Vector<String>()));  writer.addFormulaList(ModelWriter.createOverridesContent(overrides,ModelWriter.DEFOV_SCHEME),"CONSTANT",MODEL_PARAMETER_DEFINITIONS);}  }
class C{  private void deleteIpLease(IpLeaseService.State state){  String ipLeaseId=ServiceUtils.getIDFromDocumentSelfLink(state.documentSelfLink);  Operation deleteOperation=Operation.createDelete(UriUtils.buildUri(getHost(),IpLeaseService.FACTORY_LINK + "/" + ipLeaseId)).setReferer(UriUtils.buildUri(getHost(),getSelfLink()));  deleteOperation.setCompletion(null).sendWith(this);}  }
class C{  public void fail(){  TestUtils.fail();}  }
class C{  public void write(int i){  VariableValue v=rowVector.elementAt(i);  v.writeAll();}  }
class C{  D createDelegate(){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.974 -0500",hash_original_method="7A2DC6C5A2282C24FE6927FC780CB71C",hash_generated_method="3134FCB24E4888B80FEFDDE016120A55") public SIPDate(long timeMillis){  javaCal=new GregorianCalendar(TimeZone.getTimeZone("GMT:0"),Locale.getDefault());  java.util.Date date=new java.util.Date(timeMillis);  javaCal.setTime(date);  wkday=javaCal.get(Calendar.DAY_OF_WEEK);switch (wkday) {case Calendar.MONDAY:    sipWkDay=MON;  break;case Calendar.TUESDAY:sipWkDay=TUE;break;case Calendar.WEDNESDAY:sipWkDay=WED;break;case Calendar.THURSDAY:sipWkDay=THU;break;case Calendar.FRIDAY:sipWkDay=FRI;break;case Calendar.SATURDAY:sipWkDay=SAT;break;case Calendar.SUNDAY:sipWkDay=SUN;break;default :InternalErrorHandler.handleException("No date map for wkday " + wkday);}day=javaCal.get(Calendar.DAY_OF_MONTH);month=javaCal.get(Calendar.MONTH);switch (month) {case Calendar.JANUARY:sipMonth=JAN;break;case Calendar.FEBRUARY:sipMonth=FEB;break;case Calendar.MARCH:sipMonth=MAR;break;case Calendar.APRIL:sipMonth=APR;break;case Calendar.MAY:sipMonth=MAY;break;case Calendar.JUNE:sipMonth=JUN;break;case Calendar.JULY:sipMonth=JUL;break;case Calendar.AUGUST:sipMonth=AUG;break;case Calendar.SEPTEMBER:sipMonth=SEP;break;case Calendar.OCTOBER:sipMonth=OCT;break;case Calendar.NOVEMBER:sipMonth=NOV;break;case Calendar.DECEMBER:sipMonth=DEC;break;default :InternalErrorHandler.handleException("No date map for month " + month);}year=javaCal.get(Calendar.YEAR);hour=javaCal.get(Calendar.HOUR_OF_DAY);minute=javaCal.get(Calendar.MINUTE);second=javaCal.get(Calendar.SECOND);}  }
class C{  private void addAndCollectGlobalFeatures(Predicate pred,ArgMap argMap,Collection<Integer> indices,Map<Integer,Double> nonbinFeats){  int offset=0;  if ((Parse.parseOptions != null && Parse.parseOptions.globalFeats) || ((Learn.learnOptions != null && Learn.learnOptions.globalFeats))) {    indices.add(sizePipelineFeatures + argMap.size());    offset=10;  }  String cals=Language.getLanguage().getCoreArgumentLabelSequence(pred,argMap);  Integer index=calsMap.get(cals);  if (index == null) {    calsMap.put(cals,calsCounter);    index=calsCounter++;  }  indices.add(offset + sizePipelineFeatures + index);}  }
class C{  public void testSetF6Momentary(){  boolean f6Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF6Momentary(f6Momentary);}  }
class C{  public boolean isError(){  return fSeverity == RefactoringStatus.ERROR;}  }
class C{  public byte[] serialize(){  int length;  if (dataOffset == 0)   dataOffset=5;  length=dataOffset << 2;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort(this.sourcePort);  bb.putShort(this.destinationPort);  bb.putInt(this.sequence);  bb.putInt(this.acknowledge);  bb.putShort((short)(this.flags | (dataOffset << 12)));  bb.putShort(this.windowSize);  bb.putShort(this.checksum);  bb.putShort(this.urgentPointer);  if (dataOffset > 5) {    int padding;    bb.put(options);    padding=(dataOffset << 2) - 20 - options.length;    for (int i=0; i < padding; i++)     bb.put((byte)0);  }  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IPv4.PROTOCOL_TCP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress() >> 16) & 0xffff) + (ipv4.getSourceAddress() & 0xffff);      accumulation+=((ipv4.getDestinationAddress() >> 16) & 0xffff) + (ipv4.getDestinationAddress() & 0xffff);      accumulation+=ipv4.getProtocol() & 0xff;      accumulation+=length & 0xffff;    }    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(16,this.checksum);  }  return data;}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public void postDelayed(Runnable runnable,long delayMs){  mHandler.postDelayed(runnable,delayMs);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected IPath defaultOutputLocation(){  return this.project.getFullPath().append("bin");}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER' ("+ "'USER_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT,"+ "'TOKEN' TEXT NOT NULL ,"+ "'IS_FIRST_LOGIN' INTEGER);");}  }
class C{  protected boolean acceptable(String type){  return true;}  }
class C{  private int handleG(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    index=handleGH(value,result,index);  } else   if (charAt(value,index + 1) == 'N') {    if (index == 1 && isVowel(charAt(value,0)) && !slavoGermanic) {      result.append("KN","N");    } else     if (!contains(value,index + 2,2,"EY") && charAt(value,index + 1) != 'Y' && !slavoGermanic) {      result.append("N","KN");    } else {      result.append("KN");    }    index=index + 2;  } else   if (contains(value,index + 1,2,"LI") && !slavoGermanic) {    result.append("KL","L");    index+=2;  } else   if (index == 0 && (charAt(value,index + 1) == 'Y' || contains(value,index + 1,2,ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {    result.append('K','J');    index+=2;  } else   if ((contains(value,index + 1,2,"ER") || charAt(value,index + 1) == 'Y') && !contains(value,0,6,"DANGER","RANGER","MANGER") && !contains(value,index - 1,1,"E","I")&& !contains(value,index - 1,3,"RGY","OGY")) {    result.append('K','J');    index+=2;  } else   if (contains(value,index + 1,1,"E","I","Y") || contains(value,index - 1,4,"AGGI","OGGI")) {    if ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index + 1,2,"ET")) {      result.append('K');    } else     if (contains(value,index + 1,4,"IER")) {      result.append('J');    } else {      result.append('J','K');    }    index+=2;  } else   if (charAt(value,index + 1) == 'G') {    index+=2;    result.append('K');  } else {    index++;    result.append('K');  }  return index;}  }
class C{  protected void renderTrianglesWithUniqueColors(DrawContext dc,RectTile tile){  int sideSize=density + 2;  int trianglesPerRow=sideSize * 2 + 4;  int indexCount=2 * sideSize * sideSize + 4 * sideSize - 2;  int trianglesNum=indexCount - 2;  int numVertices=(density + 3) * (density + 3);  int verticesSize=numVertices * 3;  ByteBuffer colorsOdd;  ByteBuffer colorsEven;  if (oddRowColorList.containsKey(density) && evenRowColorList.containsKey(density)) {    colorsOdd=oddRowColorList.get(density);    colorsEven=evenRowColorList.get(density);  } else {    colorsOdd=Buffers.newDirectByteBuffer(verticesSize);    colorsEven=Buffers.newDirectByteBuffer(verticesSize);    oddRowColorList.put(density,colorsOdd);    evenRowColorList.put(density,colorsEven);  }  tile.minColorCode=dc.getUniquePickColor().getRGB();  int prevPos=-1;  int pos;  for (int i=0; i < trianglesNum; i++) {    java.awt.Color color=dc.getUniquePickColor();    pos=3 * tile.ri.indices.get(i + 2);    if (pos > prevPos) {      colorsOdd.position(pos);      colorsOdd.put((byte)color.getRed()).put((byte)color.getGreen()).put((byte)color.getBlue());    } else     if (pos < prevPos) {      colorsEven.position(pos);      colorsEven.put((byte)color.getRed()).put((byte)color.getGreen()).put((byte)color.getBlue());    }    prevPos=pos;  }  tile.maxColorCode=dc.getUniquePickColor().getRGB();  GL2 gl=dc.getGL().getGL2();  try {    if (null != tile.ri.referenceCenter)     dc.getView().pushReferenceCenter(dc,tile.ri.referenceCenter);    gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);    gl.glEnableClientState(GL2.GL_COLOR_ARRAY);    if (dc.getGLRuntimeCapabilities().isUseVertexBufferObject() && this.bindVbos(dc,tile,0)) {      gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);      gl.glColorPointer(3,GL.GL_UNSIGNED_BYTE,0,colorsOdd.rewind());      for (int i=0; i < sideSize; i+=2) {        gl.glDrawElements(GL.GL_TRIANGLE_STRIP,trianglesPerRow,GL.GL_UNSIGNED_INT,trianglesPerRow * i * 4);      }      gl.glColorPointer(3,GL.GL_UNSIGNED_BYTE,0,colorsEven.rewind());      for (int i=1; i < sideSize - 1; i+=2) {        gl.glDrawElements(GL.GL_TRIANGLE_STRIP,trianglesPerRow,GL.GL_UNSIGNED_INT,trianglesPerRow * i * 4);      }    } else {      gl.glVertexPointer(3,GL.GL_FLOAT,0,tile.ri.vertices.rewind());      gl.glColorPointer(3,GL.GL_UNSIGNED_BYTE,0,colorsOdd.rewind());      for (int i=0; i < sideSize; i+=2) {        gl.glDrawElements(GL.GL_TRIANGLE_STRIP,trianglesPerRow,GL.GL_UNSIGNED_INT,tile.ri.indices.position(trianglesPerRow * i));      }      gl.glColorPointer(3,GL.GL_UNSIGNED_BYTE,0,colorsEven.rewind());      for (int i=1; i < sideSize - 1; i+=2) {        gl.glDrawElements(GL.GL_TRIANGLE_STRIP,trianglesPerRow,GL.GL_UNSIGNED_INT,tile.ri.indices.position(trianglesPerRow * i));      }    }  }  finally {    if (null != tile.ri.referenceCenter)     dc.getView().popReferenceCenter(dc);  }}  }
class C{  protected void firePublishFinished(IStatus status){}  }
class C{  @Override public void paintComponent(Graphics g){  List<String> locations=getLocations();  adjustTransformation(0,0,11 * locations.size() - 1,10);  Graphics2D g2=(Graphics2D)g;  g2.setBackground(Color.white);  g2.clearRect(0,0,getWidth(),getHeight());  for (int i=0; i < locations.size(); i++) {    String location=locations.get(i);    Agent agent=getAgent(location);    if (isDirty(location)) {      g2.setColor(Color.LIGHT_GRAY);      g2.fillRect(x(11 * i),y(0),scale(10),scale(10));    }    g2.setColor(Color.black);    g2.drawRect(x(11 * i),y(0),scale(10),scale(10));    g2.drawString(location.toString(),x(11 * i) + 10,y(0) + 20);    if (agent != null) {      Action action=lastActions.get(agent);      g2.setColor(Color.RED);      if (action == null || !((DynamicAction)action).getAttribute("name").equals("Suck"))       g2.fillArc(x(11 * i + 2),y(2),scale(6),scale(6),200,320); else       g2.fillOval(x(11 * i + 2),y(2),scale(6),scale(6));    }  }}  }
class C{  public void testFollowerOverridesVoteForNewTerm() throws Throwable {  runOnServer(null);}  }
class C{  private Auth loadConfiguration(){  try {    Unmarshaller unmarshaller=getContext().createUnmarshaller();    unmarshaller.setSchema(getSchema());    Auth authDefault=(Auth)unmarshaller.unmarshal(getAuthConfigurationDefault().getInputStream());    Auth authUser=null;    if (getAuthConfiguration().exists()) {      if (log.isDebugEnabled()) {        log.debug("Reading authorization configuration from file: " + getAuthConfiguration().getFile().getPath());      }      authUser=(Auth)unmarshaller.unmarshal(getAuthConfiguration().getInputStream());      if (!authDefault.getType().equals(authUser.getType())) {        final String message="You must use the same configurationType in 'verinice-auth-default.xml' and 'verinice-auth.xml'";        throw new IllegalAuthConfTypeException(message);      }      authDefault=AuthHelper.merge(new Auth[]{authUser,authDefault});    }    return authDefault;  } catch (  RuntimeException e) {    log.error("Error while reading verinice authorization definition from file: " + getAuthConfiguration().getFilename(),e);    throw e;  }catch (  Exception e) {    log.error("Error while reading verinice authorization definition from file: " + getAuthConfiguration().getFilename(),e);    throw new RuntimeException(e);  }}  }
class C{  public VNXeCommandResult createFileSystemQuotaSync(FileSystemQuotaCreateParam param) throws VNXeException {  _logger.info("Sync Create quota with name: " + param.getName());  _url=URL;  setQueryParameters(null);  return postRequestSync(param);}  }
class C{  public static void print(float x){  out.print(x);  out.flush();}  }
class C{  private void onRefresh(){  super.onResume();  if (event_poll != null) {    event_poll.abort();    event_poll=null;  }  app.clearConnectionState();  app.resetDatabase();  app.setEmail(app.getYou().getEmail());  startRequests();}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null)   return null;  int size=filename.length();  if (size == 0)   return filename;  int prefix=getPrefixLength(filename);  if (prefix < 0)   return null;  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator)     array[i]=separator;  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1)       lastIsDirectory=true;      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2)       return null;      if (i == size - 1)       lastIsDirectory=true;      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator)   return new String(array,0,size);  return new String(array,0,size - 1);}  }
class C{  private void reportProgress(State state,InnerState innerState){  long now=System.currentTimeMillis();  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownloadCurrentBytes(mInfo);    innerState.mBytesNotified=innerState.mBytesSoFar;    innerState.mTimeLastNotification=now;    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;    if (Constants.LOGVV) {      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);    }    mService.notifyUpdateBytes(totalBytesSoFar);  }}  }
class C{  public Long addUserSalutation(String titelname,long fieldvalues_id){  try {    Salutations ti=new Salutations();    ti.setName(titelname);    ti.setDeleted("false");    ti.setFieldvalues_id(fieldvalues_id);    ti.setStarttime(new Date());    ti=em.merge(ti);    Long salutations_id=ti.getSalutations_id();    return salutations_id;  } catch (  Exception ex2) {    log.error("[addUserSalutation]",ex2);  }  return null;}  }
class C{  public void start(){  managedPairs.add(createPort());  fixNames();  singlePorts.addObserver(observer,false);  for (  Ports<M> ports : multiPortsList) {    ports.addObserver(observer,false);  }}  }
class C{  @Override public boolean equals(Object that){  return (that instanceof Key) && jdkType == ((Key)that).jdkType;}  }
class C{  protected ReferenceEntry<K,V> next(){  return (ReferenceEntry<K,V>)next;}  }
class C{  public ColumnVector multiplyElementWise(final ColumnVector vector){  return this.transform(null);}  }
class C{  private static void usage(boolean printDebugOptions){  SmaliHelpFormatter formatter=new SmaliHelpFormatter();  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  formatter.setWidth(consoleWidth);  formatter.printHelp("java -jar baksmali.jar [options] <dex-file>","disassembles and/or dumps a dex file",basicOptions,printDebugOptions ? debugOptions : null);}  }
class C{  @Override public synchronized int remove(final HandleSet urlHashes) throws IOException {  int removedCounter=0;  for (  Index depthStack : this.depthStacks.values()) {    final int s=depthStack.size();    for (    final byte[] urlhash : urlHashes) {      final Row.Entry entry=depthStack.remove(urlhash);      if (entry != null)       removedCounter++;    }    if (removedCounter == 0)     return 0;    assert depthStack.size() + removedCounter == s : "urlFileIndex.size() = " + depthStack.size() + ", s = "+ s;  }  return removedCounter;}  }
class C{  public static Location convertLatLng(LatLng location){  return convertLatLng(location.latitude,location.longitude);}  }
class C{  public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  private void genId(){  setId(Long.valueOf(System.currentTimeMillis() % Long.MAX_VALUE).toString());}  }
class C{  @Override public int hashCode(){  return super.hashCode() + distrib.hashCode();}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private String charName(int ch){  if (ch < 0)   return L.l("end of query"); else   return String.valueOf((char)ch);}  }
class C{  synchronized public void terminate(){  done=true;}  }
class C{  protected static boolean isTypeOf(PsiElementFactory factory,PsiType type,String typeFQClassName){  if (isTypeOfVoid(type)) {    return false;  }  if (isPrimitiveType(type)) {    return false;  }  GlobalSearchScope scope=type.getResolveScope();  if (scope == null) {    return false;  }  PsiType typeTarget=factory.createTypeByFQClassName(typeFQClassName,scope);  return typeTarget.isAssignableFrom(type);}  }
class C{  public double calculateCreditRiskMonteCarlo(Credit[] portfolio,int horizon,int num,double percentile){  System.out.println(">>> Calculating credit risk for portfolio [size=" + portfolio.length + ", horizon="+ horizon+ ", percentile="+ percentile+ ", iterations="+ num+ "] <<<");  long start=System.currentTimeMillis();  double[] losses=calculateLosses(portfolio,horizon,num);  Arrays.sort(losses);  double[] lossProbs=new double[losses.length];  for (int i=0; i < losses.length; i++)   if (i == 0)   lossProbs[i]=getLossProbability(losses,0); else   if (losses[i] != losses[i - 1])   lossProbs[i]=getLossProbability(losses,i) + lossProbs[i - 1]; else   lossProbs[i]=lossProbs[i - 1];  double crdRisk=0;  for (int i=0; i < lossProbs.length; i++)   if (lossProbs[i] > percentile) {    crdRisk=losses[i - 1];    break;  }  System.out.println(">>> Finished calculating portfolio risk [risk=" + crdRisk + ", time="+ (System.currentTimeMillis() - start)+ "ms]");  return crdRisk;}  }
class C{  public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {  source=cp;  translator=t;  t.start(cp);}  }
class C{  private void parsePhoneContextList(Node node){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static int computeValidLevels(long bitPattern){  return Long.bitCount(bitPattern);}  }
class C{  public boolean isFdr(){  return fdr;}  }
class C{  public static void closeSilently(Writer writer){  if (writer != null) {    try {      writer.flush();      writer.close();    } catch (    Exception e) {    }  }}  }
class C{  public int compareTo(String string){  int o1=offset, o2=string.offset, result;  int end=offset + (count < string.count ? count : string.count);  char[] target=string.value;  while (o1 < end) {    if ((result=value[o1++] - target[o2++]) != 0) {      return result;    }  }  return count - string.count;}  }
class C{  public static byte[] generateSelfSignedCert(String keyId,ClientId memberId,KeyUsageInfo keyUsage,String commonName,Date notBefore,Date notAfter) throws Exception {  LOG.trace("Generate self-signed cert for key '{}'",keyId);  GenerateSelfSignedCertResponse response=execute(new GenerateSelfSignedCert(keyId,commonName,notBefore,notAfter,keyUsage,memberId));  byte[] certificateBytes=response.getCertificateBytes();  LOG.trace("Certificate with length of {} bytes generated",certificateBytes.length);  return certificateBytes;}  }
class C{  public void resetComponents(){  editRolloutEnabled=Boolean.FALSE;  rolloutName.clear();  targetFilterQuery.clear();  resetFields();  enableFields();  populateDistributionSet();  populateTargetFilterQuery();  setDefaultSaveStartGroupOption();  totalTargetsLabel.setVisible(false);  groupSizeLabel.setVisible(false);  removeComponent(1,2);  addComponent(targetFilterQueryCombo,1,2);  actionTypeOptionGroupLayout.selectDefaultOption();  totalTargetsCount=0L;  rolloutForEdit=null;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public Word minus(Extent w2){  return new Word(value.minus(w2.toLong()));}  }
class C{  @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position,List payload){  int viewType=getItemViewType(position);  if (viewType == R.layout.recycler_layout_item) {    LayoutItem item=(LayoutItem)getItem(position);    LayoutItem.ExampleViewHolder vHolder=(LayoutItem.ExampleViewHolder)holder;    assert item != null;    vHolder.mTitle.setSelected(true);    vHolder.mTitle.setText(item.getTitle());    vHolder.mSubtitle.setText(item.getSubtitle());    if (holder.itemView.getLayoutParams() instanceof StaggeredGridLayoutManager.LayoutParams) {      ((StaggeredGridLayoutManager.LayoutParams)holder.itemView.getLayoutParams()).setFullSpan(true);      Log.d("LayoutItem","LayoutItem configured fullSpan for StaggeredGridLayout");    }  } else   if (viewType == R.layout.recycler_label_item) {    OverallItem item=(OverallItem)getItem(position);    OverallItem.LabelViewHolder vHolder=(OverallItem.LabelViewHolder)holder;    assert item != null;    if (item.getTitle() != null) {      vHolder.mTitle.setText(item.getTitle());      vHolder.mTitle.setEnabled(isEnabled(position));    }    if (item.getDescription() != null) {      vHolder.mSubtitle.setText(Utils.fromHtmlCompat(item.getDescription()));      vHolder.mSubtitle.setEnabled(isEnabled(position));    }    if (item.getIcon() != null) {      vHolder.mIcon.setImageDrawable(item.getIcon());    }  }}  }
class C{  private void prepareNetwork(){  Map<Id<Link>,? extends Link> networkLinks=network.getLinks();  Set<Id<Link>> transitLinks=new HashSet<>();  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      NetworkRoute networkRoute=transitRoute.getRoute();      transitLinks.add(networkRoute.getStartLinkId());      for (      Id<Link> linkId : transitRoute.getRoute().getLinkIds()) {        transitLinks.add(linkId);      }      transitLinks.add(networkRoute.getEndLinkId());    }  }  for (  Id<Link> transitLinkId : transitLinks) {    Link transitLink=networkLinks.get(transitLinkId);    if (!transitLink.getAllowedModes().contains(TransportMode.pt)) {      Set<String> modes=new HashSet<>();      modes.addAll(transitLink.getAllowedModes());      modes.add(TransportMode.pt);      transitLink.setAllowedModes(modes);    }  }}  }
class C{  public void addFirst(T linkable){  insert(0,linkable);}  }
class C{  public boolean isMustCoerce(){  return isMustCoerce;}  }
class C{  public void reset(){  checkSubject("reset");  AttributeChangeNotification acn=new AttributeChangeNotification(this,0,0,"NbChanges reset","NbChanges","Integer",new Integer(nbChanges),new Integer(0));  state="initial state";  nbChanges=0;  nbResets++;  sendNotification(acn);}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  @SuppressWarnings("unchecked") public void send(ClusterNode node,GridCacheMessage msg,byte plc) throws IgniteCheckedException {  assert !node.isLocal();  if (!onSend(msg,node.id()))   return;  if (log.isDebugEnabled())   log.debug("Sending cache message [msg=" + msg + ", node="+ U.toShortString(node)+ ']');  int cnt=0;  while (cnt <= retryCnt) {    try {      cnt++;      cctx.gridIO().send(node,TOPIC_CACHE,msg,plc);      return;    } catch (    IgniteCheckedException e) {      if (!cctx.discovery().alive(node.id()) || !cctx.discovery().pingNode(node.id()))       throw new ClusterTopologyCheckedException("Node left grid while sending message to: " + node.id(),e);      if (cnt == retryCnt || cctx.kernalContext().isStopping())       throw e; else       if (log.isDebugEnabled())       log.debug("Failed to send message to node (will retry): " + node.id());    }    U.sleep(retryDelay);  }  if (log.isDebugEnabled())   log.debug("Sent cache message [msg=" + msg + ", node="+ U.toShortString(node)+ ']');}  }
class C{  private int endCheckTry(){  int rv=END_UNREACHED;  return rv;}  }
class C{  boolean subtypeAndCompare(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2,final VisitHistory visited){  final Types types=type1.atypeFactory.types;  final AnnotatedTypeMirror t1;  final AnnotatedTypeMirror t2;  if (type1.getKind() == TypeKind.NULL && type2.getKind() == TypeKind.NULL) {    return areEqual(type1,type2);  }  if (type1.getKind() == TypeKind.NULL || type2.getKind() == TypeKind.NULL) {    t1=type1;    t2=type2;  } else   if (types.isSubtype(type2.getUnderlyingType(),type1.getUnderlyingType())) {    t1=type1;    t2=AnnotatedTypes.asSuper(type1.atypeFactory,type2,type1);  } else   if (types.isSubtype(type1.getUnderlyingType(),type2.getUnderlyingType())) {    t1=AnnotatedTypes.asSuper(type1.atypeFactory,type1,type2);    t2=type2;  } else {    t1=null;    t2=null;  }  if (t1 == null || t2 == null) {    final QualifierHierarchy qualifierHierarchy=type1.atypeFactory.getQualifierHierarchy();    if (currentTop == null) {      return AnnotationUtils.areSame(AnnotatedTypes.findEffectiveAnnotations(qualifierHierarchy,type1),AnnotatedTypes.findEffectiveAnnotations(qualifierHierarchy,type2));    } else {      return AnnotationUtils.areSame(AnnotatedTypes.findEffectiveAnnotationInHierarchy(qualifierHierarchy,type1,currentTop),AnnotatedTypes.findEffectiveAnnotationInHierarchy(qualifierHierarchy,type2,currentTop));    }  }  return areEqual(t1,t2,visited);}  }
class C{  private static void add2Fmt(Collection<String> src,String fmt,Object... args){  add2(src,String.format(fmt,args));}  }
class C{  public MySqlCaseStatement parseCase(){  MySqlCaseStatement stmt=new MySqlCaseStatement();  accept(Token.CASE);  if (lexer.token() == Token.WHEN) {    while (lexer.token() == Token.WHEN) {      MySqlWhenStatement when=new MySqlWhenStatement();      when.setCondition(exprParser.expr());      accept(Token.THEN);      parseProcedureStatementList(when.getStatements());      stmt.addWhenStatement(when);    }    if (lexer.token() == Token.ELSE) {      MySqlElseStatement elseStmt=new MySqlElseStatement();      parseProcedureStatementList(elseStmt.getStatements());      stmt.setElseItem(elseStmt);    }  } else {    stmt.setCondition(exprParser.expr());    while (lexer.token() == Token.WHEN) {      accept(Token.WHEN);      MySqlWhenStatement when=new MySqlWhenStatement();      when.setCondition(exprParser.expr());      accept(Token.THEN);      parseProcedureStatementList(when.getStatements());      stmt.addWhenStatement(when);    }    if (lexer.token() == Token.ELSE) {      accept(Token.ELSE);      MySqlElseStatement elseStmt=new MySqlElseStatement();      parseProcedureStatementList(elseStmt.getStatements());      stmt.setElseItem(elseStmt);    }  }  accept(Token.END);  accept(Token.CASE);  accept(Token.SEMI);  return stmt;}  }
class C{  public Set<A> filter(Predicate<? super A> predicate){  Set<A> result=empty();  for (  A a : this) {    result=predicate.test(a) ? result.plus(a) : result;  }  return result;}  }
class C{  public static void deleteDriveTestFiles(Context context,String accountName){  try {    GoogleAccountCredential googleAccountCredential=SendToGoogleUtils.getGoogleAccountCredential(context,accountName,SendToGoogleUtils.DRIVE_SCOPE);    if (googleAccountCredential == null) {      return;    }    Drive drive=SyncUtils.getDriveService(googleAccountCredential);    com.google.api.services.drive.Drive.Files.List list=drive.files().list().setQ(DRIVE_TEST_FILES_QUERY);    List<File> files=list.execute().getItems();    Iterator<File> iterator=files.iterator();    while (iterator.hasNext()) {      File file=(File)iterator.next();      drive.files().delete(file.getId()).execute();    }  } catch (  Exception e) {    Log.e(TAG,"Unable to delete Google Drive test files.",e);  }}  }
class C{  public static boolean isRegister(final ReilOperand operand){  Preconditions.checkNotNull(operand,"Operand argument argument can not be null");  return operand.getType() == OperandType.REGISTER;}  }
class C{  public boolean canUnloadStranded(){  return (game.getTurn() instanceof GameTurn.UnloadStrandedTurn) && game.getTurn().isValid(localPlayerNumber,game);}  }
class C{  public Map<String,FCZoneReference> makeExportToReferenceMap(String key){  Map<String,FCZoneReference> volRefMap=new HashMap<String,FCZoneReference>();  List<FCZoneReference> refs=getFCZoneReferencesForKey(key);  for (  FCZoneReference ref : refs) {    String uri2key=make2UriKey(ref.getVolumeUri(),ref.getGroupUri());    volRefMap.put(uri2key,ref);  }  return volRefMap;}  }
class C{  public BigInteger[] generateSignature(byte[] message){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger k;  int qBitLength=params.getQ().bitLength();  do {    k=new BigInteger(qBitLength,random);  } while (k.compareTo(params.getQ()) >= 0);  BigInteger r=params.getG().modPow(k,params.getP()).mod(params.getQ());  k=k.modInverse(params.getQ()).multiply(m.add(((DSAPrivateKeyParameters)key).getX().multiply(r)));  BigInteger s=k.mod(params.getQ());  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public static boolean isRegAnti(SpaceEffGraphEdge edge){  return (edge.getInfo() & REG_ANTI) != 0;}  }
class C{  public static char charFromProperties(Properties p,String propName,char defaultValue){  char ret=defaultValue;  String charString=p.getProperty(propName);  if (charString != null && charString.length() > 0) {    return charString.charAt(0);  }  return ret;}  }
class C{  private void intAnalytics(){  avgSpeed=0;  maxSpeed=0;  distance=0;  timeStart=System.currentTimeMillis();  startLocation=null;}  }
class C{  public static Node[] toNodeArray(Document doc,Object o,short type) throws PageException {  if (Node.TEXT_NODE == type)   toTextArray(doc,o); else   if (Node.ATTRIBUTE_NODE == type)   toAttrArray(doc,o); else   if (Node.COMMENT_NODE == type)   toCommentArray(doc,o); else   if (Node.ELEMENT_NODE == type)   toElementArray(doc,o);  throw new ExpressionException("invalid node type definition");}  }
class C{  @Override public Invocation.Builder request(){  return this.request(MediaType.WILDCARD_TYPE);}  }
class C{  public boolean isLightboxEnabled(){  return lightboxEnabled;}  }
class C{  public void testSortsDifferentAttributes() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom a='1'/>");  XppDom dom2=XppFactory.buildDom("<dom b='1'/>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom[@a?]",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom[@b?]",xpath.get());}  }
class C{  public void testGetF15Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF15Momentary();  assertEquals(expResult,result);}  }
class C{  public boolean isSmoothScrollbarEnabled(){  return mSmoothScrollbarEnabled;}  }
class C{  public void subscriber(Class<?> api,@Pin ServiceRefAmp serviceRef,Result<? super Cancel> result){  String path=api.getName();  String address=address(path);  EventNodeAsset node=lookupPubSubNode(address);  Cancel cancel=node.subscribeImpl(serviceRef);  result.ok(cancel);}  }
class C{  public static boolean isDouble(CharSequence self){  try {    Double.valueOf(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  private static String encodeParametersToJSON(Map<String,String> parameters){  JSONObject object=new JSONObject();  object.putAll(parameters);  return object.toJSONString();}  }
class C{  public SpeechModel(String name){  super();  this.name=name;}  }
class C{  protected final void connect() throws IOException {  if (connection != null) {    return;  }  if (routeSelector == null) {    String uriHost=uri.getHost();    if (uriHost == null) {      throw new UnknownHostException(uri.toString());    }    SSLSocketFactory sslSocketFactory=null;    HostnameVerifier hostnameVerifier=null;    if (uri.getScheme().equalsIgnoreCase("https")) {      sslSocketFactory=client.getSslSocketFactory();      hostnameVerifier=client.getHostnameVerifier();    }    Address address=new Address(uriHost,getEffectivePort(uri),sslSocketFactory,hostnameVerifier,client.getAuthenticator(),client.getProxy(),client.getTransports());    routeSelector=new RouteSelector(address,uri,client.getProxySelector(),client.getConnectionPool(),Dns.DEFAULT,client.getRoutesDatabase());  }  connection=routeSelector.next(method);  if (!connection.isConnected()) {    connection.connect(client.getConnectTimeout(),client.getReadTimeout(),getTunnelConfig());    client.getConnectionPool().maybeShare(connection);    client.getRoutesDatabase().connected(connection.getRoute());  } else {    connection.updateReadTimeout(client.getReadTimeout());  }  connected(connection);  if (connection.getRoute().getProxy() != client.getProxy()) {    requestHeaders.getHeaders().setRequestLine(getRequestLine());  }}  }
class C{  public static void addPathToClasspaths(String path){  extraPaths.addElement(path);}  }
class C{  private static Double readAmfDouble(ParsableByteArray data){  return Double.longBitsToDouble(data.readLong());}  }
class C{  @FlakyTest(tolerance=3) public void testPopupGetListSelection() throws Throwable {  AutoCompleteTextViewSimple theActivity=getActivity();  final AutoCompleteTextView textView=theActivity.getTextView();  final Instrumentation instrumentation=getInstrumentation();  textView.requestFocus();  instrumentation.waitForIdleSync();  sendKeys("A");  waitAssertListSelection(textView,ListView.INVALID_POSITION);  sendKeys("DPAD_DOWN");  waitAssertListSelection("move selection to (0)",textView,0);  sendKeys("DPAD_DOWN");  waitAssertListSelection("move selection to (1)",textView,1);  clearText(textView);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public ReadRequest(int objectId,int objectInstanceId,int resourceId){  this(null,new LwM2mPath(objectId,objectInstanceId,resourceId));}  }
class C{  public DataSourceConnectionPropertyScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource,Entry<Object,Object> driverProperty){  super(configuration,resourcePath);  this.ds=dataSource;  this.driverProperty=driverProperty;}  }
class C{  protected void initData(){  Map<ICategory,List<Book>> sourceData=fetchSourceData();  List<DisplayBean> displayBeans=new ArrayList<>(20);  CommonDisplayBean progressBean=new CommonDisplayBean(R.layout.item_progress);  displayBeans.add(progressBean);  for (Iterator<Map.Entry<ICategory,List<Book>>> iterator=sourceData.entrySet().iterator(); iterator.hasNext(); ) {    Map.Entry<ICategory,List<Book>> entry=iterator.next();    ICategory category=entry.getKey();    displayBeans.add(new CategoryBean(category));    List<Book> books=entry.getValue();    if (category != null && books != null) {      for (      Book book : books) {        BookTitleBean bookTitleBean=new BookTitleBean(book);        displayBeans.add(bookTitleBean);      }    }  }  adapter.loadData(displayBeans);}  }
class C{  public static Request createBindingRequest(){  Request bindingRequest=new Request();  try {    bindingRequest.setMessageType(Message.BINDING_REQUEST);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return bindingRequest;}  }
class C{  public TriggerBuilder<T> withIdentity(TriggerKey triggerKey){  this.key=triggerKey;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS08.class,args);}  }
class C{  public NameInfo(char[] sp1,char[] nm,char[] sp2){  space1=sp1;  name=nm;  space2=sp2;}  }
class C{  public void init(){  ctx.affinity().addDhtAssignmentFetchFuture(this);  requestFromNextNode();}  }
class C{  public static void addProvider(final ContentProvider provider){  if (API.manualAPI != null)   API.manualAPI.addProvider(provider);}  }
class C{  public void addAvatar(String file,InstanceConfig config){  config.addCredentials(this);  POSTIMAGE(this.url + "/add-avatar",file,"image.jpg",config.toXML());}  }
class C{  public static boolean isInvalidArticleType(final int articleType){  return articleType < 0 || articleType > Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER;}  }
class C{  @NonNull private static Bitmap createVideoThumbnail(@NonNull final String filePath,final int kind){  Bitmap bitmap=null;  final MediaMetadataRetriever retriever=new MediaMetadataRetriever();  try {    retriever.setDataSource(filePath);    bitmap=retriever.getFrameAtTime(-1);  } catch (  RuntimeException ex) {    RCLog.i(ImageUtils.class.getSimpleName(),"Probable corrupt video file, image not created: " + filePath + " : "+ ex);  } finally {    try {      retriever.release();    } catch (    RuntimeException ex) {      RCLog.i(ImageUtils.class.getSimpleName(),"Video file cleanup error: " + filePath + " : "+ ex);    }  }  if (bitmap == null) {    throw new RuntimeException("Corrupt bitmap: " + filePath);  }  if (kind == Images.Thumbnails.MINI_KIND) {    int width=bitmap.getWidth();    int height=bitmap.getHeight();    int max=Math.max(width,height);    if (max > 512) {      float scale=512f / max;      int w=Math.round(scale * width);      int h=Math.round(scale * height);      bitmap=Bitmap.createScaledBitmap(bitmap,w,h,true);    }  } else   if (kind == Images.Thumbnails.MICRO_KIND) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO,TARGET_SIZE_MICRO,OPTIONS_RECYCLE_INPUT);  }  if (bitmap == null) {    throw new RuntimeException("Corrupt bitmap: " + filePath);  }  return bitmap;}  }
class C{  public org.apache.nutch.storage.Host.Builder clearOutlinks(){  outlinks=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  @WorkerThread public void publishEvent(String eventName,String event,@ParticleEventVisibility int eventVisibility,int timeToLive) throws ParticleCloudException {  eventsDelegate.publishEvent(eventName,event,eventVisibility,timeToLive);}  }
class C{  public boolean isSalesTax(){  Object oo=get_Value(COLUMNNAME_IsSalesTax);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CProcessListener(final JLabel label){  m_label=label;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public double dpow_lib(double a,double b){  return Math.pow(a,b);}  }
class C{  public final int readUnsignedShort() throws IOException {  return ((int)readShort()) & 0xffff;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public static void logAndShow(BirthdayListFragment fragment,String tag,Throwable t){  Log.e(tag,"Error",t);  String message=t.getMessage();  if (t instanceof GoogleJsonResponseException) {    GoogleJsonError details=((GoogleJsonResponseException)t).getDetails();    if (details != null) {      message=details.getMessage();    }  } else   if (t.getCause() instanceof GoogleAuthException) {    message=((GoogleAuthException)t.getCause()).getMessage();  }  showError(fragment,message);}  }
class C{  public SchedulerContext(Map<?,?> map){  this();  @SuppressWarnings("unchecked") Map<String,?> mapTyped=(Map<String,?>)map;  putAll(mapTyped);}  }
class C{  @SuppressWarnings("unchecked") public void addDesktopComponent(final WorkspaceComponent workspaceComponent){  LOGGER.trace("Adding workspace component: " + workspaceComponent);  final DesktopInternalFrame componentFrame=new DesktopInternalFrame(workspaceComponent);  GuiComponent<?> guiComponent=createDesktopComponent(componentFrame,workspaceComponent);  componentFrame.setGuiComponent(guiComponent);  if (guiComponents.size() == 0) {    componentFrame.setBounds(DEFAULT_WINDOW_OFFSET,DEFAULT_WINDOW_OFFSET,(int)guiComponent.getPreferredSize().getWidth(),(int)guiComponent.getPreferredSize().getHeight());  } else {    int highestComponentNumber=guiComponents.size();    componentFrame.setBounds((int)((highestComponentNumber * DEFAULT_WINDOW_OFFSET) % (desktop.getWidth() - guiComponent.getPreferredSize().getWidth())),(int)((highestComponentNumber * DEFAULT_WINDOW_OFFSET) % (desktop.getHeight() - guiComponent.getPreferredSize().getHeight())),(int)guiComponent.getPreferredSize().getWidth(),(int)guiComponent.getPreferredSize().getHeight());  }  componentFrame.addComponentListener(componentListener);  componentFrame.setContentPane(guiComponent);  registerComponentInstance(workspaceComponent,guiComponent);  componentFrame.setVisible(true);  componentFrame.setTitle(workspaceComponent.getName());  desktop.add(componentFrame);  guiComponent.postAddInit();  lastFocusedStack.push(guiComponent);  try {    ((JInternalFrame)componentFrame).setSelected(true);  } catch (  PropertyVetoException e) {    e.printStackTrace();  }}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent evt){  if (evt.getPropertyName().equals("numCodes")) {    setNumCodes(((Integer)evt.getNewValue()).intValue());  }}  }
class C{  public synchronized void allocate(String key){  if (this.rawByteAllocatorCache.get(key) == null) {    RawByteAllocator alloc=new RawByteAllocator();    alloc.key=key;    rawByteAllocatorCache.put(key,alloc);  } else {    throw new RuntimeException("Attempt to allocate existing vector: key=" + key);  }}  }
class C{  public void removeTask(Future task){  taskSet.remove(task);}  }
class C{  protected void onConnect(){}  }
class C{  private void gcmRegister(){  if (checkPlayServices()) {    gcm=GoogleCloudMessaging.getInstance(this);    try {      gcmRegId=getRegistrationId();    } catch (    Exception e) {      e.printStackTrace();    }    if (gcmRegId.isEmpty()) {      registerInBackground();    } else {      Toast.makeText(this,"Registration ID already exists: " + gcmRegId,Toast.LENGTH_SHORT).show();    }  } else {    Log.e("GCM-register","No valid Google Play Services APK found.");  }}  }
class C{  public void addNeuronListener(final NeuronListener listener){  neuronListeners.add(listener);}  }
class C{  public static RoundingParams fromCornersRadii(float[] radii){  return (new RoundingParams()).setCornersRadii(radii);}  }
class C{  protected String findTestFile(String clazz){  StringBuffer sourcesString=new StringBuffer();  for (  String dir : sources) {    String path=extractJavaFile(dir,clazz);    File file=new File(path);    if (file.exists()) {      return path;    }    sourcesString.append(dir).append(";");  }  throw new RuntimeException("Could not find class '" + clazz + "' in sources: "+ sourcesString.toString());}  }
class C{  public ObjIdMap(){  this(11,0.75f);}  }
class C{  public boolean deleteRoadName(String road){  if (!_roadList.contains(road)) {    return false;  }  _roadList.remove(road);  log.debug("train (" + getName() + ") delete car road "+ road);  setDirtyAndFirePropertyChange(ROADS_CHANGED_PROPERTY,_roadList.size() + 1,_roadList.size());  return true;}  }
class C{  public boolean isEmpty(){  return m.isEmpty();}  }
class C{  private X509Certificate resolveCertificate(Element element,String baseURI,StorageResolver storage) throws XMLSecurityException {  XMLX509Digest x509Digests[]=null;  Element x509childNodes[]=XMLUtils.selectDs11Nodes(element.getFirstChild(),Constants._TAG_X509DIGEST);  if (x509childNodes == null || x509childNodes.length <= 0) {    return null;  }  try {    checkStorage(storage);    x509Digests=new XMLX509Digest[x509childNodes.length];    for (int i=0; i < x509childNodes.length; i++) {      x509Digests[i]=new XMLX509Digest(x509childNodes[i],baseURI);    }    Iterator<Certificate> storageIterator=storage.getIterator();    while (storageIterator.hasNext()) {      X509Certificate cert=(X509Certificate)storageIterator.next();      for (int i=0; i < x509Digests.length; i++) {        XMLX509Digest keyInfoDigest=x509Digests[i];        byte[] certDigestBytes=XMLX509Digest.getDigestBytesFromCert(cert,keyInfoDigest.getAlgorithm());        if (Arrays.equals(keyInfoDigest.getDigestBytes(),certDigestBytes)) {          if (log.isLoggable(java.util.logging.Level.FINE)) {            log.log(java.util.logging.Level.FINE,"Found certificate with: " + cert.getSubjectX500Principal().getName());          }          return cert;        }      }    }  } catch (  XMLSecurityException ex) {    throw new KeyResolverException("empty",ex);  }  return null;}  }
class C{  public static void validate(int[] oid){  if (oid == null) {    throw new IllegalArgumentException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the " + "second subidentifier value MUST be less than 40");  }  for (  int anOid : oid) {    if (anOid < 0) {      throw new IllegalArgumentException("Subidentifier MUST have positive value");    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    int oldProgress=-1;    int progress;    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.ceil(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void paintIcon(Component c,Graphics g,int x,int y){  XPStyle xp=XPStyle.getXP();  assert xp != null;  if (xp != null) {    Skin skin=xp.getSkin(null,part);    skin.paintSkin(g,x,y,state);  }}  }
class C{  boolean matches(String string) throws JasperException {  Mark mark=mark();  int ch=0;  int i=0;  do {    ch=nextChar();    if (((char)ch) != string.charAt(i++)) {      reset(mark);      return false;    }  } while (i < string.length());  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public AltFormat lookupType(ContentType contentType){  AltFormat format=typeMap.get(contentType.getMediaType());  if (format == null) {    for (    AltFormat testFormat : typeMap.values()) {      if (contentType.match(testFormat.getContentType())) {        format=testFormat;        break;      }    }  }  if (format == null && delegate != null) {    return delegate.lookupType(contentType);  }  return format;}  }
class C{  public synchronized boolean hasCustomColor(){  return hasCustomColor;}  }
class C{  public DateTime plus(long duration){  return withDurationAdded(duration,1);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (deptSize != 1) {    if (deptCode == null || deptCode.equals("")) {      errors.add("dept",new ActionMessage("errors.required","Department"));    }  }  if (bldgId == null || bldgId.equalsIgnoreCase("")) {    errors.add("bldg",new ActionMessage("errors.required","Building"));  }  if (roomNum == null || roomNum.equalsIgnoreCase("")) {    errors.add("roomNum",new ActionMessage("errors.required","Room Number"));  }  return errors;}  }
class C{  public DBFWriter(String dbfFileString) throws DBFException {  try {    this.fileName=dbfFileString;    File dbfFile=new File(dbfFileString);    this.raf=new RandomAccessFile(dbfFile,"rw");    if (!dbfFile.exists() || dbfFile.length() == 0) {      this.header=new DBFHeader();      return;    }    header=new DBFHeader();    this.header.read(raf);    this.raf.seek(this.raf.length() - 1);  } catch (  FileNotFoundException e) {    throw new DBFException("Specified file is not found. " + e.getMessage());  }catch (  IOException e) {    throw new DBFException(e.getMessage() + " while reading header");  }  this.recordCount=this.header.numberOfRecords;}  }
class C{  @Override public Result onSelected(EntityPlayer player,EntityLiving entity,INPC npc,Quest quest,int option){  if (option == 1) {    if (npc.isBuilder())     player.openGui(HarvestFestival.instance,GuiHandler.SHOP_BUILDER,player.worldObj,entity.getEntityId(),0,0); else     player.openGui(HarvestFestival.instance,GuiHandler.SHOP_MENU,player.worldObj,entity.getEntityId(),0,0);    return Result.DEFAULT;  }  return Result.ALLOW;}  }
class C{  public DisplayComponent(String name,DisplayWorld newWorld){  super(name);  world=newWorld;  init();}  }
class C{  public static View create(String namespace,String name,Expression... parameters){  if (parameters != null) {    return new View(namespace,name,Arrays.asList(parameters));  } else {    return new View(namespace,name,new ArrayList<Expression>());  }}  }
class C{  public boolean knowsOption(String optionName){  boolean knownOption=this.optionNames.contains(optionName);  if (!knownOption) {    knownOption=this.deprecatedOptions.get(optionName) != null;  }  return knownOption;}  }
class C{  private Population orderBySmallestObjective(int objective,Population population){  Population result=new Population();  result.addAll(population);  result.sort(new ObjectiveComparator(objective));  return result;}  }
class C{  GSSException(int majorCode,String majorString){  if (validateMajor(majorCode))   major=majorCode; else   major=FAILURE;  this.majorString=majorString;}  }
class C{  public void killContainer(String container) throws IOException {  killContainer(KillContainerParams.create(container));}  }
class C{  public static void makeGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    System.err.println("The first argument to makeGrid must use SpringLayout.");    return;  }  Spring xPadSpring=Spring.constant(xPad);  Spring yPadSpring=Spring.constant(yPad);  Spring initialXSpring=Spring.constant(initialX);  Spring initialYSpring=Spring.constant(initialY);  int max=rows * cols;  Spring maxWidthSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  Spring maxHeightSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  for (int i=1; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    maxWidthSpring=Spring.max(maxWidthSpring,cons.getWidth());    maxHeightSpring=Spring.max(maxHeightSpring,cons.getHeight());  }  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    cons.setWidth(maxWidthSpring);    cons.setHeight(maxHeightSpring);  }  SpringLayout.Constraints lastCons=null;  SpringLayout.Constraints lastRowCons=null;  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    if (i % cols == 0) {      lastRowCons=lastCons;      cons.setX(initialXSpring);    } else {      cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST),xPadSpring));    }    if (i / cols == 0) {      cons.setY(initialYSpring);    } else {      cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH),yPadSpring));    }    lastCons=cons;  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,Spring.sum(Spring.constant(yPad),lastCons.getConstraint(SpringLayout.SOUTH)));  pCons.setConstraint(SpringLayout.EAST,Spring.sum(Spring.constant(xPad),lastCons.getConstraint(SpringLayout.EAST)));}  }
class C{  public static boolean start(RootDoc root) throws IOException {  return new Doclet().startDoc(root);}  }
class C{  public V put(K key,V value){  if (key == null) {    throw new IllegalArgumentException("Collection does not allow null key values");  }  if (refMap.containsKey(key)) {    throw new IllegalStateException("Key value already in collection");  }  Pair<V,Integer> refValue=new Pair<V,Integer>(value,1);  refMap.put(key,refValue);  return value;}  }
class C{  public static FunctionAlias newInstance(Schema schema,int id,String name,String javaClassMethod,boolean force,boolean bufferResultSetToLocalTemp){  FunctionAlias alias=new FunctionAlias(schema,id,name);  int paren=javaClassMethod.indexOf('(');  int lastDot=javaClassMethod.lastIndexOf('.',paren < 0 ? javaClassMethod.length() : paren);  if (lastDot < 0) {    throw DbException.get(ErrorCode.SYNTAX_ERROR_1,javaClassMethod);  }  alias.className=javaClassMethod.substring(0,lastDot);  alias.methodName=javaClassMethod.substring(lastDot + 1);  alias.bufferResultSetToLocalTemp=bufferResultSetToLocalTemp;  alias.init(force);  return alias;}  }
class C{  private void generateMapReduceInstructions(ArrayList<Lop> execNodes,ArrayList<Instruction> inst,ArrayList<Instruction> writeinst,ArrayList<Instruction> deleteinst,ArrayList<Instruction> rmvarinst,JobType jt) throws LopsException, DMLRuntimeException {  ArrayList<Byte> resultIndices=new ArrayList<Byte>();  ArrayList<String> inputs=new ArrayList<String>();  ArrayList<String> outputs=new ArrayList<String>();  ArrayList<InputInfo> inputInfos=new ArrayList<InputInfo>();  ArrayList<OutputInfo> outputInfos=new ArrayList<OutputInfo>();  ArrayList<Long> numRows=new ArrayList<Long>();  ArrayList<Long> numCols=new ArrayList<Long>();  ArrayList<Long> numRowsPerBlock=new ArrayList<Long>();  ArrayList<Long> numColsPerBlock=new ArrayList<Long>();  ArrayList<String> mapperInstructions=new ArrayList<String>();  ArrayList<String> randInstructions=new ArrayList<String>();  ArrayList<String> recordReaderInstructions=new ArrayList<String>();  int numReducers=0;  int replication=1;  ArrayList<String> inputLabels=new ArrayList<String>();  ArrayList<String> outputLabels=new ArrayList<String>();  ArrayList<Instruction> renameInstructions=new ArrayList<Instruction>();  ArrayList<Instruction> variableInstructions=new ArrayList<Instruction>();  ArrayList<Instruction> postInstructions=new ArrayList<Instruction>();  ArrayList<Integer> MRJobLineNumbers=null;  if (DMLScript.ENABLE_DEBUG_MODE) {    MRJobLineNumbers=new ArrayList<Integer>();  }  ArrayList<Lop> inputLops=new ArrayList<Lop>();  boolean cellModeOverride=false;  ArrayList<Lop> rootNodes=new ArrayList<Lop>();  getOutputNodes(execNodes,rootNodes,jt);  if (LOG.isTraceEnabled())   LOG.trace("# of root nodes = " + rootNodes.size());  if (jt == JobType.GMR || jt == JobType.GMRCELL) {    ArrayList<Lop> markedNodes=new ArrayList<Lop>();    for (    Lop rnode : rootNodes) {      if (rnode.getExecLocation() == ExecLocation.Data && ((Data)rnode).isTransient() && ((Data)rnode).getOperationType() == OperationTypes.WRITE && ((Data)rnode).getDataType() == DataType.MATRIX) {        if (rnode.getInputs().get(0).getExecLocation() == ExecLocation.Data && ((Data)rnode.getInputs().get(0)).isTransient() && rnode.getOutputParameters().getLabel().equals(rnode.getInputs().get(0).getOutputParameters().getLabel())) {          markedNodes.add(rnode);        }      }    }    rootNodes.removeAll(markedNodes);    markedNodes.clear();    if (rootNodes.isEmpty())     return;  }  HashMap<Lop,Integer> nodeIndexMapping=new HashMap<Lop,Integer>();  for (  Lop rnode : rootNodes) {    getInputPathsAndParameters(rnode,execNodes,inputs,inputInfos,numRows,numCols,numRowsPerBlock,numColsPerBlock,nodeIndexMapping,inputLabels,inputLops,MRJobLineNumbers);  }  if (jt == JobType.DATAGEN)   randInstructions=inputs;  int[] start_index=new int[1];  start_index[0]=inputs.size();  if (jt == JobType.GMR || jt == JobType.GMRCELL) {    for (    Lop rnode : rootNodes) {      getRecordReaderInstructions(rnode,execNodes,inputs,recordReaderInstructions,nodeIndexMapping,start_index,inputLabels,inputLops,MRJobLineNumbers);      if (recordReaderInstructions.size() > 1)       throw new LopsException("MapReduce job can only have a single recordreader instruction: " + recordReaderInstructions.toString());    }  }  if (jt != JobType.REBLOCK && jt != JobType.CSV_REBLOCK && jt != JobType.DATAGEN && jt != JobType.TRANSFORM) {    for (int i=0; i < inputInfos.size(); i++)     if (inputInfos.get(i) == InputInfo.BinaryCellInputInfo || inputInfos.get(i) == InputInfo.TextCellInputInfo)     cellModeOverride=true;  }  if (!recordReaderInstructions.isEmpty() || jt == JobType.GROUPED_AGG)   cellModeOverride=true;  for (int i=0; i < rootNodes.size(); i++) {    getMapperInstructions(rootNodes.get(i),execNodes,inputs,mapperInstructions,nodeIndexMapping,start_index,inputLabels,inputLops,MRJobLineNumbers);  }  if (LOG.isTraceEnabled()) {    LOG.trace("    Input strings: " + inputs.toString());    if (jt == JobType.DATAGEN)     LOG.trace("    Rand instructions: " + getCSVString(randInstructions));    if (jt == JobType.GMR)     LOG.trace("    RecordReader instructions: " + getCSVString(recordReaderInstructions));    LOG.trace("    Mapper instructions: " + getCSVString(mapperInstructions));  }  ArrayList<String> shuffleInstructions=new ArrayList<String>();  ArrayList<String> aggInstructionsReducer=new ArrayList<String>();  ArrayList<String> otherInstructionsReducer=new ArrayList<String>();  for (  Lop rn : rootNodes) {    int resultIndex=getAggAndOtherInstructions(rn,execNodes,shuffleInstructions,aggInstructionsReducer,otherInstructionsReducer,nodeIndexMapping,start_index,inputLabels,inputLops,MRJobLineNumbers);    if (resultIndex == -1)     throw new LopsException("Unexpected error in piggybacking!");    if (rn.getExecLocation() == ExecLocation.Data && ((Data)rn).getOperationType() == Data.OperationTypes.WRITE && ((Data)rn).isTransient() && rootNodes.contains(rn.getInputs().get(0))) {      NodeOutput out=setupNodeOutputs(rn,ExecType.MR,cellModeOverride,true);      writeinst.addAll(out.getLastInstructions());    } else {      resultIndices.add(Byte.valueOf((byte)resultIndex));      NodeOutput out=setupNodeOutputs(rn,ExecType.MR,cellModeOverride,false);      outputLabels.add(out.getVarName());      outputs.add(out.getFileName());      outputInfos.add(out.getOutInfo());      if (LOG.isTraceEnabled()) {        LOG.trace("    Output Info: " + out.getFileName() + ";"+ OutputInfo.outputInfoToString(out.getOutInfo())+ ";"+ out.getVarName());      }      renameInstructions.addAll(out.getLastInstructions());      variableInstructions.addAll(out.getPreInstructions());      postInstructions.addAll(out.getPostInstructions());    }  }  byte[] resultIndicesByte=new byte[resultIndices.size()];  for (int i=0; i < resultIndicesByte.length; i++) {    resultIndicesByte[i]=resultIndices.get(i).byteValue();  }  if (LOG.isTraceEnabled()) {    LOG.trace("    Shuffle Instructions: " + getCSVString(shuffleInstructions));    LOG.trace("    Aggregate Instructions: " + getCSVString(aggInstructionsReducer));    LOG.trace("    Other instructions =" + getCSVString(otherInstructionsReducer));    LOG.trace("    Output strings: " + outputs.toString());    LOG.trace("    ResultIndices = " + resultIndices.toString());  }  MRJobInstruction mr=new MRJobInstruction(jt);  if (!shuffleInstructions.isEmpty() || !aggInstructionsReducer.isEmpty() || !otherInstructionsReducer.isEmpty())   numReducers=total_reducers;  mr.setInputOutputLabels(inputLabels.toArray(new String[0]),outputLabels.toArray(new String[0]));  mr.setOutputs(resultIndicesByte);  mr.setDimsUnknownFilePrefix(getFilePath());  mr.setNumberOfReducers(numReducers);  mr.setReplication(replication);  mr.setRecordReaderInstructions(getCSVString(recordReaderInstructions));  mr.setMapperInstructions(getCSVString(mapperInstructions));  if (jt == JobType.GMR) {    double mem=0;    for (    Lop n : execNodes)     mem+=computeFootprintInMapper(n);    mr.setMemoryRequirements(mem);  }  if (jt == JobType.DATAGEN)   mr.setRandInstructions(getCSVString(randInstructions));  mr.setShuffleInstructions(getCSVString(shuffleInstructions));  mr.setAggregateInstructionsInReducer(getCSVString(aggInstructionsReducer));  mr.setOtherInstructionsInReducer(getCSVString(otherInstructionsReducer));  if (DMLScript.ENABLE_DEBUG_MODE) {    mr.setMRJobInstructionsLineNumbers(MRJobLineNumbers);  }  inst.addAll(variableInstructions);  inst.add(mr);  inst.addAll(postInstructions);  deleteinst.addAll(renameInstructions);  for (  Lop l : inputLops) {    if (DMLScript.ENABLE_DEBUG_MODE) {      processConsumers(l,rmvarinst,deleteinst,l);    } else {      processConsumers(l,rmvarinst,deleteinst,null);    }  }}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  final boolean oldState=isChecked();  final boolean newState;  if (commitChange) {    mVelocityTracker.computeCurrentVelocity(1000);    final float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);    } else {      newState=getTargetCheckedState();    }  } else {    newState=oldState;  }  if (newState != oldState) {    playSoundEffect(SoundEffectConstants.CLICK);  }  setChecked(newState);  cancelSuperTouch(ev);}  }
class C{  public boolean isLivePortMovingAllowed(){  return livePortMovingAllowed;}  }
class C{  @Override protected void addToFrontier(Node node){  if (!explored.contains(node.getState())) {    frontier.add(node);    updateMetrics(frontier.size());  }}  }
class C{  private final void computePawnHashData(Position pos,PawnHashData ph){  int score=0;  long wPawns=pos.pieceTypeBB[Piece.WPAWN];  long wPawnFiles=BitBoard.southFill(wPawns) & 0xff;  int wDouble=Long.bitCount(wPawns) - Long.bitCount(wPawnFiles);  int wIslands=Long.bitCount(((~wPawnFiles) >>> 1) & wPawnFiles);  int wIsolated=Long.bitCount(~(wPawnFiles << 1) & wPawnFiles & ~(wPawnFiles >>> 1));  long bPawns=pos.pieceTypeBB[Piece.BPAWN];  long bPawnFiles=BitBoard.southFill(bPawns) & 0xff;  int bDouble=Long.bitCount(bPawns) - Long.bitCount(bPawnFiles);  int bIslands=Long.bitCount(((~bPawnFiles) >>> 1) & bPawnFiles);  int bIsolated=Long.bitCount(~(bPawnFiles << 1) & bPawnFiles & ~(bPawnFiles >>> 1));  score-=(wDouble - bDouble) * 25;  score-=(wIslands - bIslands) * 15;  score-=(wIsolated - bIsolated) * 15;  long wPawnAttacks=(((wPawns & BitBoard.maskBToHFiles) << 7) | ((wPawns & BitBoard.maskAToGFiles) << 9));  long bPawnAttacks=(((bPawns & BitBoard.maskBToHFiles) >>> 9) | ((bPawns & BitBoard.maskAToGFiles) >>> 7));  long wBackward=wPawns & ~((wPawns | bPawns) >>> 8) & (bPawnAttacks >>> 8)& ~BitBoard.northFill(wPawnAttacks);  wBackward&=(((wPawns & BitBoard.maskBToHFiles) >>> 9) | ((wPawns & BitBoard.maskAToGFiles) >>> 7));  wBackward&=~BitBoard.northFill(bPawnFiles);  long bBackward=bPawns & ~((wPawns | bPawns) << 8) & (wPawnAttacks << 8)& ~BitBoard.southFill(bPawnAttacks);  bBackward&=(((bPawns & BitBoard.maskBToHFiles) << 7) | ((bPawns & BitBoard.maskAToGFiles) << 9));  bBackward&=~BitBoard.northFill(wPawnFiles);  score-=(Long.bitCount(wBackward) - Long.bitCount(bBackward)) * 15;  long passedPawnsW=wPawns & ~BitBoard.southFill(bPawns | bPawnAttacks | (wPawns >>> 8));  final int[] ppBonus={-1,24,26,30,36,55,100,-1};  int passedBonusW=0;  if (passedPawnsW != 0) {    long guardedPassedW=passedPawnsW & (((wPawns & BitBoard.maskBToHFiles) << 7) | ((wPawns & BitBoard.maskAToGFiles) << 9));    passedBonusW+=15 * Long.bitCount(guardedPassedW);    long m=passedPawnsW;    while (m != 0) {      int sq=Long.numberOfTrailingZeros(m);      int y=Position.getY(sq);      passedBonusW+=ppBonus[y];      m&=m - 1;    }  }  long passedPawnsB=bPawns & ~BitBoard.northFill(wPawns | wPawnAttacks | (bPawns << 8));  int passedBonusB=0;  if (passedPawnsB != 0) {    long guardedPassedB=passedPawnsB & (((bPawns & BitBoard.maskBToHFiles) >>> 9) | ((bPawns & BitBoard.maskAToGFiles) >>> 7));    passedBonusB+=15 * Long.bitCount(guardedPassedB);    long m=passedPawnsB;    while (m != 0) {      int sq=Long.numberOfTrailingZeros(m);      int y=Position.getY(sq);      passedBonusB+=ppBonus[7 - y];      m&=m - 1;    }  }  ph.key=pos.pawnZobristHash();  ph.score=score;  ph.passedBonusW=(short)passedBonusW;  ph.passedBonusB=(short)passedBonusB;  ph.passedPawnsW=passedPawnsW;  ph.passedPawnsB=passedPawnsB;}  }
class C{  protected int index(int row,int column){  return this.offset + rowOffsets[rowZero + row * rowStride] + columnOffsets[columnZero + column * columnStride];}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  void reset(){  latestConfirmedSeq=-1;  bitmap=0;}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT:    setExportedElement((ExportableElement)null);  return;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION:setDefaultExportedExpression((Expression)null);return;case N4JSPackage.EXPORT_DECLARATION__NAMED_EXPORTS:getNamedExports().clear();return;case N4JSPackage.EXPORT_DECLARATION__WILDCARD_EXPORT:setWildcardExport(WILDCARD_EXPORT_EDEFAULT);return;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORT:setDefaultExport(DEFAULT_EXPORT_EDEFAULT);return;case N4JSPackage.EXPORT_DECLARATION__REEXPORTED_FROM:setReexportedFrom((TModule)null);return;}super.eUnset(featureID);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) public static boolean isDeviceOwner(){  return EMMSystemService.devicePolicyManager.isDeviceOwnerApp(BuildConfig.APPLICATION_ID);}  }
class C{  public double findMinimum(double x,UnivariateFunction f,int fracDigits){  double tol=Math.pow(10,-1 - fracDigits);  final double optx=optimize(x,f,tol);  return optx;}  }
class C{  public Node previousNode() throws DOMException {  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return null;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public final Activity waitForActivity(){synchronized (this) {    while (mLastActivity == null) {      try {        wait();      } catch (      InterruptedException e) {      }    }    Activity res=mLastActivity;    mLastActivity=null;    return res;  }}  }
class C{  public static void e(String message,Throwable cause){  Log.e(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public String toString(cp_info constant_pool[]){  cp_info target=constant_pool[descriptor_index];  return target.toString(constant_pool);}  }
class C{  public static int compareCandidates(Candidate<?> c1,Candidate<?> c2){  if (c1.getPriority() < c2.getPriority())   return 1; else   if (c1.getPriority() == c2.getPriority())   return 0; else   return -1;}  }
class C{  @RequestProcessing(value="/admin/point-charge",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showPointCharge(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/point-charge.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  private static void stoppingAnimation(Thread me){  final FetcherInfo info=FetcherInfo.getFetcherInfo();synchronized (info.waitList) {    int index=-1;    for (int i=0; i < info.fetchers.length; i++) {      if (info.fetchers[i] == me) {        return;      }      if (info.fetchers[i] == null) {        index=i;      }    }    if (index >= 0) {      info.fetchers[index]=me;      info.numFetchers++;      me.setName("Image Fetcher " + index);      return;    }  }}  }
class C{  private boolean isInTimeframe(DefaultData defaultData){  if (null != fromDate) {    if (fromDate.after(defaultData.getTimeStamp())) {      return false;    }  }  if (null != toDate) {    if (toDate.before(defaultData.getTimeStamp())) {      return false;    }  }  return true;}  }
class C{  private void createSceneVao(){  int vao=glCreateVertexArrays();  int vbo=glCreateBuffers();  ByteBuffer bb=BufferUtils.createByteBuffer(4 * (3 + 3) * 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  DemoUtils.triangulateUnitBox(fv);  glNamedBufferData(vbo,bb,GL_STATIC_DRAW);  glEnableVertexArrayAttrib(vao,0);  glVertexArrayAttribFormat(vao,0,3,GL_FLOAT,false,0);  glVertexArrayVertexBuffer(vao,0,vbo,0L,4 * (3 + 3));  glVertexArrayAttribBinding(vao,0,0);  glEnableVertexArrayAttrib(vao,1);  glVertexArrayAttribFormat(vao,1,3,GL_FLOAT,false,0);  glVertexArrayVertexBuffer(vao,1,vbo,4 * 3,4 * (3 + 3));  glVertexArrayAttribBinding(vao,1,1);  int ivbo=glCreateBuffers();  bb=BufferUtils.createByteBuffer(4 * (3 + 3) * boxes.length);  fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put((max.x + min.x) / 2.0f).put((max.y + min.y) / 2.0f).put((max.z + min.z) / 2.0f);    fv.put((max.x - min.x) / 2.0f).put((max.y - min.y) / 2.0f).put((max.z - min.z) / 2.0f);  }  glNamedBufferData(ivbo,bb,GL_STATIC_DRAW);  glEnableVertexArrayAttrib(vao,2);  glVertexArrayAttribFormat(vao,2,3,GL_FLOAT,false,0);  glVertexArrayVertexBuffer(vao,2,ivbo,0L,4 * (3 + 3));  glVertexArrayAttribBinding(vao,2,2);  glVertexArrayBindingDivisor(vao,2,1);  glEnableVertexArrayAttrib(vao,3);  glVertexArrayAttribFormat(vao,3,3,GL_FLOAT,false,0);  glVertexArrayVertexBuffer(vao,3,ivbo,4 * 3,4 * (3 + 3));  glVertexArrayAttribBinding(vao,3,3);  glVertexArrayBindingDivisor(vao,3,1);  this.vaoScene=vao;}  }
class C{  public WordWrap newline(){  this.prepend="";  out.newlineHard();  return this;}  }
class C{  public static void register(Class ni,Class cls){  if (interfaceToClassLookup == null) {    interfaceToClassLookup=new HashMap<Class,Class>();  }  interfaceToClassLookup.put(ni,cls);}  }
class C{  public static Population readPopulation(String path2Population){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scenario).readFile(path2Population);  return scenario.getPopulation();}  }
class C{  private void updateVirtualVolumeInfoAfterExpansion(String clusterName,VPlexVirtualVolumeInfo virtualVolumeInfo,int expansionStatusRetryCount,long expansionStatusSleepTime) throws VPlexApiException {  int retryCount=0;  String expansionStatus=null;  String expandableCapacity=null;  boolean expansionCompleted=false;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  while (++retryCount <= expansionStatusRetryCount) {    try {      VPlexApiUtils.pauseThread(expansionStatusSleepTime);      discoveryMgr.updateVirtualVolumeInfo(clusterName,virtualVolumeInfo);      expansionStatus=virtualVolumeInfo.getExpansionStatus();      s_logger.info("Expansion status is {}",expansionStatus);      expandableCapacity=virtualVolumeInfo.getExpandableCapacity();      s_logger.info("Expandable capacity is {}",expandableCapacity);      if (((expansionStatus == null) || (VPlexApiConstants.NULL_ATT_VAL.equals(expansionStatus))) && (VPlexApiConstants.NO_EXPANDABLE_CAPACITY.equals(expandableCapacity))) {        expansionCompleted=true;        break;      } else       if (!VPlexVirtualVolumeInfo.ExpansionStatus.FAILED.equals(expansionStatus)) {        continue;      } else {        break;      }    } catch (    Exception e) {      s_logger.error("An error occurred updating the virtual volume info: {}",e.getMessage());      if (retryCount < expansionStatusRetryCount) {        s_logger.info("Trying again to get virtual volume info");      } else {        throw VPlexApiException.exceptions.exceptionGettingVolumeExpansionStatus(virtualVolumeInfo.getName(),e);      }    }  }  if (!expansionCompleted) {    s_logger.info(String.format("After %s retries with wait of %s ms between each retry volume %s " + "expansion status has not completed",String.valueOf(expansionStatusRetryCount),String.valueOf(expansionStatusSleepTime),virtualVolumeInfo.getName()));    if (VPlexVirtualVolumeInfo.ExpansionStatus.FAILED.equals(expansionStatus)) {      throw VPlexApiException.exceptions.vplexVolumeExpansionFailed(virtualVolumeInfo.getName());    } else     if (VPlexVirtualVolumeInfo.ExpansionStatus.INPROGRESS.equals(expansionStatus)) {      throw VPlexApiException.exceptions.vplexVolumeExpansionIsStillInProgress(virtualVolumeInfo.getName());    } else     if (VPlexVirtualVolumeInfo.ExpansionStatus.UNKNOWN.equals(expansionStatus)) {      throw VPlexApiException.exceptions.vplexVolumeExpansionIsInUnknownState(virtualVolumeInfo.getName());    } else {      throw VPlexApiException.exceptions.vplexVolumeExpansionBlockCountNotUpdated(virtualVolumeInfo.getName());    }  }}  }
class C{  protected void writeCollectionBegin(byte elemType,int size) throws TException {  if (size <= 14) {    writeByteDirect(size << 4 | getCompactType(elemType));  } else {    writeByteDirect(0xf0 | getCompactType(elemType));    writeVarint32(size);  }}  }
class C{  public static synchronized void registerHandler(ParsedURLProtocolHandler handler){  if (handler.getProtocolHandled() == null) {    defaultHandler=handler;    return;  }  Map handlers=getHandlersMap();  handlers.put(handler.getProtocolHandled(),handler);}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  byte[] new_data=new byte[size + confounderSize()];  byte[] conf=Confounder.bytes(confounderSize());  System.arraycopy(conf,0,new_data,0,confounderSize());  System.arraycopy(data,0,new_data,confounderSize(),size);  byte[] mdc_cksum=calculateChecksum(new_data,new_data.length);  byte[] cksum=new byte[cksumSize()];  System.arraycopy(conf,0,cksum,0,confounderSize());  System.arraycopy(mdc_cksum,0,cksum,confounderSize(),cksumSize() - confounderSize());  byte[] new_key=new byte[keySize()];  System.arraycopy(key,0,new_key,0,key.length);  for (int i=0; i < new_key.length; i++)   new_key[i]=(byte)(new_key[i] ^ 0xf0);  try {    if (DESKeySpec.isWeak(new_key,0)) {      new_key[7]=(byte)(new_key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[new_key.length];  byte[] enc_cksum=new byte[cksum.length];  Des.cbc_encrypt(cksum,enc_cksum,new_key,ivec,true);  return enc_cksum;}  }
class C{  private void statementList(ColumnFormat cf) throws ParserException, IOException {  while (true) {    if (lookahead.ttype != StreamTokenizer.TT_WORD) {      return;    }    if (lookahead.sval.compareTo(DATA) == 0) {      dataStmt(cf);    } else     if (lookahead.sval.compareTo(HEADER) == 0) {      headerStmt(cf);    } else     if (lookahead.sval.compareTo(WIDTH) == 0) {      widthStmt(cf);    } else     if (lookahead.sval.compareTo(FORMAT) == 0) {      formatStmt(cf);    } else     if (lookahead.sval.compareTo(ALIGN) == 0) {      alignStmt(cf);    } else     if (lookahead.sval.compareTo(SCALE) == 0) {      scaleStmt(cf);    } else {      return;    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARRAY_LITERAL;}  }
class C{  public Path toPath(){  Path path=new Path();  float[] point=new float[2];  point[0]=-width / 2;  point[1]=height / 2;  Matrix matrix=new Matrix();  matrix.setRotate(orientation);  matrix.postTranslate(centerX,centerY);  matrix.mapPoints(point);  path.moveTo(point[0],point[1]);  point[0]=-width / 2;  point[1]=-height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  point[0]=width / 2;  point[1]=-height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  point[0]=width / 2;  point[1]=height / 2;  matrix.mapPoints(point);  path.lineTo(point[0],point[1]);  path.close();  return path;}  }
class C{  public final <T2>Flux<Tuple2<T,T2>> zipWith(Publisher<? extends T2> source2){  return zipWith(source2,tuple2Function());}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public Base64(final boolean urlSafe){  this(MIME_CHUNK_SIZE,CHUNK_SEPARATOR,urlSafe);}  }
class C{  public static S2Cap empty(){  return new S2Cap(new S2Point(1,0,0),-1);}  }
class C{  public void init() throws ServletException {}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int lookAhead(){  return lookAhead(0);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(RPCLASS_NAME);  rpclass.isA("area");  rpclass.addAttribute("sound",Type.STRING);  rpclass.addAttribute("radius",Type.INT);  rpclass.addAttribute("volume",Type.BYTE);  rpclass.add(DefinitionClass.ATTRIBUTE,"layer",Type.BYTE);}  }
class C{  public OutOfMemoryError(){}  }
class C{  public ServiceDiscovery registerServiceExporter(ServiceExporter exporter,JsonObject configuration,Handler<AsyncResult<Void>> completionHandler){  ServiceDiscovery ret=ServiceDiscovery.newInstance(delegate.registerServiceExporter((io.vertx.servicediscovery.spi.ServiceExporter)exporter.getDelegate(),configuration,completionHandler));  return ret;}  }
class C{  public String identifier(String identifier){  identifier=dbSettings.databaseToUpper ? StringUtils.toUpperEnglish(identifier) : identifier;  return identifier;}  }
class C{  private void clearCallData(){  if (null != mCall) {    mCall.removeListener(mListener);  }  mHeaderPendingCallView.checkPendingCall();  VectorCallSoundManager.releaseAudioFocus();  mCall=null;  mCallView=null;  mSavedCallview=null;}  }
class C{  @Override public void updateBlob(int columnIndex,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public int compare(IType m1,IType m2){  if (m1 == m2) {    return 0;  }  if (is50OrHigher) {    return compare50(m1,m2);  }  IJavaElement firstAncestor1=getFirstAncestor(m1);  IJavaElement firstAncestor2=getFirstAncestor(m2);  int compilePrio1=getCompilePrio(m1,firstAncestor1);  int compilePrio2=getCompilePrio(m2,firstAncestor2);  if (compilePrio1 > compilePrio2) {    return -1;  } else   if (compilePrio1 < compilePrio2) {    return 1;  } else {    firstAncestor1=getFirstNonAnonymous(m1,topAncestorType);    firstAncestor2=getFirstNonAnonymous(m2,topAncestorType);    if (firstAncestor1 == firstAncestor2) {      if (isLocal(firstAncestor1)) {        boolean fromInitBlock1=isFromInitBlock(m1);        boolean fromInitBlock2=isFromInitBlock(m2);        if (fromInitBlock1 ^ fromInitBlock2) {          return fromInitBlock1 ? -1 : 1;        }      }      return sourceComparator.compare(m1,m2);    }    boolean isLocal=isLocal(firstAncestor1) || isLocal(firstAncestor2);    if (isLocal) {      return sourceComparator.compare(m1,m2);    }    int topAncestorDistance1=getTopAncestorDistance(firstAncestor1,topAncestorType);    int topAncestorDistance2=getTopAncestorDistance(firstAncestor2,topAncestorType);    if (topAncestorDistance1 > topAncestorDistance2) {      return -1;    } else     if (topAncestorDistance1 < topAncestorDistance2) {      return 1;    } else {      return sourceComparator.compare(m1,m2);    }  }}  }
class C{  public SVGGraphics2DIOException(IOException ex){  this(null,ex);}  }
class C{  protected final void _skipCR() throws IOException {  if (_inputPtr < _inputEnd || loadMore()) {    if (_inputBuffer[_inputPtr] == '\n') {      ++_inputPtr;    }  }  ++_currInputRow;  _currInputRowStart=_inputPtr;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof EightPuzzleNode) {    return equivalent((EightPuzzleNode)o);  }  return false;}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public boolean testAab(Vector3fc min,Vector3fc max){  return testAab(min.x(),min.y(),min.z(),max.x(),max.y(),max.z());}  }
class C{  public static void disconnect(){  if (--refCount == 0) {    doubleClickStrategy=null;    stringScanner=null;    codeScanner=null;  }}  }
class C{  public static boolean registerMachineBlock(Block aBlock,boolean... aMeta){  if (GT_Utility.isBlockInvalid(aBlock) || aMeta == null || aMeta.length == 0)   return false;  if (GregTech_API.sThaumcraftCompat != null)   GregTech_API.sThaumcraftCompat.registerPortholeBlacklistedBlock(aBlock);  int rMeta=0;  for (byte i=0; i < 16 && i < aMeta.length; i++)   if (aMeta[i])   rMeta|=B[i];  sMachineIDs.put(aBlock,rMeta);  return true;}  }
class C{  public static void selectActionButton(int selectedId){  if (mActionModePopupWindow != null) {    final LinearLayout popupLayout=(LinearLayout)mActionModePopupWindow.getContentView();    for (int i=0; i < popupLayout.getChildCount(); i++) {      View v=popupLayout.getChildAt(i);      if (v instanceof ImageButton) {        ImageButton ib=(ImageButton)v;        if (ib.getId() == selectedId)         ib.setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.oval_background_green)); else         ib.setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.action_button_selector_dark));      }    }  }}  }
class C{  private static ValueSource buildSourceTree(IndexSchema schema,String expression){  return buildSourceTree(schema,expression,FIELD_TYPE);}  }
class C{  public Parser(Scanner scanner,ParserActions actions) throws IOException {  this(scanner);  this.actions=actions;}  }
class C{  public HadoopIgfs20FileSystemLoopbackPrimarySelfTest(){  super(PRIMARY);}  }
class C{  protected void stop(){synchronized (sockLock) {    this.running=false;    if (this.sock != null) {      this.sock.close();      this.sock=null;    }  }}  }
class C{  public T caseParameterizedAccess(ParameterizedAccess object){  return null;}  }
class C{  public static byte readByte(){  char c=readChar();  byte x=(byte)(c & 0xff);  return x;}  }
class C{  @SuppressWarnings("unchecked") @Override public void addField(String name,Object value){  Object existing=_fields.get(name);  if (existing == null) {    if (value instanceof Collection) {      Collection<Object> c=new ArrayList<>(3);      for (      Object o : (Collection<Object>)value) {        c.add(o);      }      this.setField(name,c);    } else {      this.setField(name,value);    }    return;  }  Collection<Object> vals=null;  if (existing instanceof Collection) {    vals=(Collection<Object>)existing;  } else {    vals=new ArrayList<>(3);    vals.add(existing);  }  if (value instanceof Iterable) {    for (    Object o : (Iterable<Object>)value) {      vals.add(o);    }  } else   if (value instanceof Object[]) {    for (    Object o : (Object[])value) {      vals.add(o);    }  } else {    vals.add(value);  }  _fields.put(name,vals);}  }
class C{  private void checkWrittenJsonStream(Object data,String contextURL,String expectedEntityPath) throws IOException, ODataRenderException {  checkWrittenJsonStream(data,null,contextURL,expectedEntityPath);}  }
class C{  protected int sizeOf(K key,V value){  return 1;}  }
class C{  public List discoverRP(String url) throws DiscoveryException {  return discover(url,0,Collections.singleton(DiscoveryInformation.OPENID2_RP)).getDiscoveredInformation(Collections.singleton(DiscoveryInformation.OPENID2_RP));}  }
class C{  @SuppressWarnings("rawtypes") private static void migrateHeaders(EntityManager em){  em.getTransaction().begin();  Query headerCountQuery=em.createNativeQuery("SELECT COUNT(MESSAGE_ID) FROM MESSAGE_HEADER",Integer.class);  Integer headerCount=(Integer)headerCountQuery.getResultList().get(0);  System.out.println("Number of headers=" + headerCount);  JpaMigrateQuery.executeUpdate(em,"ALTER TABLE HEADER ADD COLUMN MESSAGE_ID BIGINT");  Query headerQuery=em.createNativeQuery("SELECT MESSAGE_ID, HEADERS_ID FROM MESSAGE_HEADER");  em.getTransaction().commit();  DelegatingResultList headerNameList=(DelegatingResultList)headerQuery.getResultList();  ResultList rl=headerNameList.getDelegate();  for (int i=0; i < rl.size(); i++) {    Object[] results=(Object[])rl.get(i);    Long messageId=(Long)results[0];    Long headerId=(Long)results[1];    em.getTransaction().begin();    Query update=em.createNativeQuery("UPDATE HEADER SET MESSAGE_ID = ? WHERE ID = ?");    update.setParameter(1,messageId);    update.setParameter(2,headerId);    int result=update.executeUpdate();    System.out.printf("ExecuteUpdate returned a result=" + result + " for header %d of %d\n",i + 1,headerCount);    em.getTransaction().commit();  }  em.getTransaction().begin();  System.out.println("Creating index.");  JpaMigrateQuery.executeUpdate(em,"CREATE INDEX SQL100727182411700 ON HEADER(MESSAGE_ID)");  em.getTransaction().commit();  em.getTransaction().begin();  System.out.println("Creating foreign key.");  JpaMigrateQuery.executeUpdate(em,"ALTER TABLE HEADER ADD CONSTRAINT SQL100727182411700 FOREIGN KEY (MESSAGE_ID) REFERENCES MESSAGE(ID)");  em.getTransaction().commit();  em.getTransaction().begin();  System.out.println("Dropping table.");  JpaMigrateQuery.executeUpdate(em,"DROP TABLE MESSAGE_HEADER");  em.getTransaction().commit();}  }
class C{  private void addIncludedResources(JsonApiDocument jsonApiDocument,PersistentResource rec,List<String> requestedRelationPaths){  requestedRelationPaths.forEach(null);}  }
class C{  private void scanElement(XMLElement2 elt){  StringBuffer buf=new StringBuffer();  this.scanIdentifier(buf);  String name=buf.toString();  if (name.length() == 0) {    throw new XMLParseException("","");  }  elt.setName(name);  char ch=this.scanWhitespace();  while ((ch != '>') && (ch != '/')) {    buf=new StringBuffer();    this.unreadChar(ch);    this.scanIdentifier(buf);    String key=buf.toString();    ch=this.scanWhitespace();    if (ch != '=') {      throw this.expectedInput("=");    }    this.unreadChar(this.scanWhitespace());    buf=new StringBuffer();    this.scanString(buf);    if (key.length() == 0) {      throw new XMLParseException("","");    }    elt.setAttribute(key,buf);    ch=this.scanWhitespace();  }  if (ch == '/') {    ch=this.readChar();    if (ch != '>') {      throw this.expectedInput(">");    } else {      return;    }  }  buf=new StringBuffer();  ch=this.scanWhitespace(buf);  if (ch != '<') {    this.unreadChar(ch);    this.scanPCData(buf);  } else {    for (; ; ) {      ch=this.readChar();      if (ch == '!') {        if (this.checkCDATA(buf)) {          this.scanPCData(buf);          break;        } else {          ch=this.scanWhitespace(buf);          if (ch != '<') {            this.unreadChar(ch);            this.scanPCData(buf);            break;          }        }      } else {        if ((ch != '/') || this.ignoreWhitespace) {          buf=new StringBuffer();        }        if (ch == '/') {          this.unreadChar(ch);        }        break;      }    }  }  if (buf.length() == 0) {    while (ch != '/') {      if (ch == '!') {        ch=this.readChar();        if (ch != '-') {          throw this.expectedInput("Comment or Element");        }        ch=this.readChar();        if (ch != '-') {          throw this.expectedInput("Comment or Element");        }        this.skipComment();      } else {        this.unreadChar(ch);        XMLElement2 child=this.createAnotherElement();        this.scanElement(child);        elt.addChild(child);      }      ch=this.scanWhitespace();      if (ch != '<') {        throw this.expectedInput("<");      }      ch=this.readChar();    }    this.unreadChar(ch);  } else {    if (this.ignoreWhitespace) {      elt.setContent(buf.toString().trim());    } else {      elt.setContent(buf.toString());    }  }  ch=this.readChar();  if (ch != '/') {    throw this.expectedInput("/");  }  this.unreadChar(this.scanWhitespace());  if (!this.checkLiteral(name)) {    throw this.expectedInput(name);  }  if (this.scanWhitespace() != '>') {    throw this.expectedInput(">");  } else {  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void PI(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PI()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PIdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PI);    currentPdfFile.checkResolved(PIdictionary);    if (PIdictionary != null) {      final String jsCode=PIdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  private Instruction do_fload(int index){  Operand r=getLocal(index);  if (VM.VerifyAssertions)   opt_assert(r.isFloat());  if (LOCALS_ON_STACK) {    push(r);    return null;  } else {    return _moveHelper(FLOAT_MOVE,r,TypeReference.Float);  }}  }
class C{  public void paint(Graphics g,JComponent c){  super.paint(g,c);  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  boolean in=model.isPressed() || model.isSelected();  CompiereUtils.paint3Deffect((Graphics2D)g,c,CompiereLookAndFeel.ROUND,!in);}  }
class C{  private void replaceNode(EscapeSet newNode,EscapeSet oldNode){  for (  EscapeSet e : oldNode.parentSets) {    e.childSets.remove(oldNode);    e.childSets.add(newNode);    newNode.parentSets.add(e);  }  for (  EscapeSet e : oldNode.childSets) {    e.parentSets.remove(oldNode);    e.parentSets.add(newNode);    newNode.childSets.add(e);  }}  }
class C{  public static void disable(){  sEnabled=false;}  }
class C{  public SemEstimator(DataSet dataSet,SemPm semPm,SemOptimizer semOptimizer){  this(new CovarianceMatrix(dataSet),semPm,semOptimizer);  if (DataUtils.containsMissingValue(dataSet)) {    throw new IllegalArgumentException("Expecting a data set with no missing values.");  }  setDataSet(subset(dataSet,semPm));}  }
class C{  protected TranscoderException fatalError(String key,Object[] params) throws TranscoderException {  TranscoderException result=new TranscoderException(key);  errorHandler.fatalError(result);  return result;}  }
class C{  public ArrayHandle(final ArrayType type,final long length){  if (type == null || length < 0) {    throw new IllegalArgumentException();  }  mType=type;  mLength=length;}  }
class C{  public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){  if (bytes == null) {    return null;  }  if (urlsafe == null) {    urlsafe=WWW_FORM_URL;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (urlsafe.get(b)) {      if (b == ' ') {        b='+';      }      buffer.write(b);    } else {      buffer.write('%');      char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));      char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));      buffer.write(hex1);      buffer.write(hex2);    }  }  return buffer.toByteArray();}  }
class C{  public int next(){  if (pointer < 1)   throw new NoSuchElementException();  double d=sum * r.nextDouble();  int i=pointer;  double tmp=weights[i - 1];  while (tmp < d && i > 1)   tmp+=weights[--i - 1];  int a=buffer[i - 1];  double b=weights[i - 1];  buffer[i - 1]=buffer[pointer - 1];  weights[i - 1]=weights[pointer - 1];  buffer[pointer - 1]=a;  weights[pointer - 1]=b;  sum-=b;  return buffer[--pointer];}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  Cursor c=(Cursor)getListAdapter().getItem(position);  startManagingCursor(c);  Uri instanceUri=ContentUris.withAppendedId(InstanceColumns.CONTENT_URI,c.getLong(c.getColumnIndex(InstanceColumns._ID)));  Collect.getInstance().getActivityLogger().logAction(this,"onListItemClick",instanceUri.toString());  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action)) {    setResult(RESULT_OK,new Intent().setData(instanceUri));  } else {    String status=c.getString(c.getColumnIndex(InstanceColumns.STATUS));    String strCanEditWhenComplete=c.getString(c.getColumnIndex(InstanceColumns.CAN_EDIT_WHEN_COMPLETE));    boolean canEdit=status.equals(InstanceProviderAPI.STATUS_INCOMPLETE) || Boolean.parseBoolean(strCanEditWhenComplete);    if (!canEdit) {      createErrorDialog(getString(R.string.cannot_edit_completed_form),DO_NOT_EXIT);      return;    }    startActivity(new Intent(Intent.ACTION_EDIT,instanceUri));  }  finish();}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  FingerprintAttribute(){  super(FINGERPRINT);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateStartState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      retrieveManagementHosts(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  SumDistinctLongAggregator distinctAggregator=(SumDistinctLongAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(distinctAggregator.valueSet);    firstTime=false;  }}  }
class C{  public void pushNode(Node node){  initNode(node);  inStream=null;synchronized (nodeStack) {    poppedNodes.clear();    if (suppress) {      suppressedNodeStack.push(node);      return;    }    if (nodeStack.isEmpty()) {      if (log.isLoggable(Level.FINEST)) {        log.finest("Pushing top level node: " + node + " for txn: "+ trace);      }      trace.getNodes().add(node);    } else {      Node parent=nodeStack.peek();      if (parent instanceof ContainerNode) {        if (log.isLoggable(Level.FINEST)) {          log.finest("Add node: " + node + " to parent: "+ parent+ " in txn: "+ trace);        }        ((ContainerNode)parent).getNodes().add(node);      } else {        log.severe("Attempt to add node '" + node + "' under non-container node '"+ parent+ "'");      }    }    nodeStack.push(node);  }}  }
class C{  private void generate(DiskStore ds) throws SAXException {  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0) {    return;  }  AttributesImpl atts=new AttributesImpl();  try {    atts.addAttribute("","",NAME,"",ds.getName());    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasAutoCompact())) {      if (generateDefaults() || ds.getAutoCompact() != DiskStoreFactory.DEFAULT_AUTO_COMPACT)       atts.addAttribute("","",AUTO_COMPACT,"",String.valueOf(ds.getAutoCompact()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasAllowForceCompaction())) {      if (generateDefaults() || ds.getAllowForceCompaction() != DiskStoreFactory.DEFAULT_ALLOW_FORCE_COMPACTION)       atts.addAttribute("","",ALLOW_FORCE_COMPACTION,"",String.valueOf(ds.getAllowForceCompaction()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasCompactionThreshold())) {      if (generateDefaults() || ds.getCompactionThreshold() != DiskStoreFactory.DEFAULT_COMPACTION_THRESHOLD)       atts.addAttribute("","",COMPACTION_THRESHOLD,"",String.valueOf(ds.getCompactionThreshold()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasMaxOplogSize())) {      if (generateDefaults() || ds.getMaxOplogSize() != DiskStoreFactory.DEFAULT_MAX_OPLOG_SIZE)       atts.addAttribute("","",MAX_OPLOG_SIZE,"",String.valueOf(ds.getMaxOplogSize()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasTimeInterval())) {      if (generateDefaults() || ds.getTimeInterval() != DiskStoreFactory.DEFAULT_TIME_INTERVAL)       atts.addAttribute("","",TIME_INTERVAL,"",String.valueOf(ds.getTimeInterval()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasWriteBufferSize())) {      if (generateDefaults() || ds.getWriteBufferSize() != DiskStoreFactory.DEFAULT_WRITE_BUFFER_SIZE)       atts.addAttribute("","",WRITE_BUFFER_SIZE,"",String.valueOf(ds.getWriteBufferSize()));    }    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasQueueSize())) {      if (generateDefaults() || ds.getQueueSize() != DiskStoreFactory.DEFAULT_QUEUE_SIZE)       atts.addAttribute("","",QUEUE_SIZE,"",String.valueOf(ds.getQueueSize()));    }    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {      if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasDiskUsageWarningPercentage())) {        if (generateDefaults() || ds.getDiskUsageWarningPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_WARNING_PERCENTAGE)         atts.addAttribute("","",DISK_USAGE_WARNING_PERCENTAGE,"",String.valueOf(ds.getDiskUsageWarningPercentage()));      }      if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasDiskUsageCriticalPercentage())) {        if (generateDefaults() || ds.getDiskUsageCriticalPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_CRITICAL_PERCENTAGE)         atts.addAttribute("","",DISK_USAGE_CRITICAL_PERCENTAGE,"",String.valueOf(ds.getDiskUsageCriticalPercentage()));      }    }  }  finally {    handler.startElement("",DISK_STORE,DISK_STORE,atts);    if ((!(ds instanceof DiskStoreAttributesCreation) || ((DiskStoreAttributesCreation)ds).hasDiskDirs())) {      File[] diskDirs=ds.getDiskDirs();      int[] diskSizes=ds.getDiskDirSizes();      if (diskDirs != null && diskDirs.length > 0) {        if (generateDefaults() || !Arrays.equals(diskDirs,DiskStoreFactory.DEFAULT_DISK_DIRS) || !Arrays.equals(diskSizes,DiskStoreFactory.DEFAULT_DISK_DIR_SIZES)) {          handler.startElement("",DISK_DIRS,DISK_DIRS,EMPTY);          for (int i=0; i < diskDirs.length; i++) {            AttributesImpl diskAtts=new AttributesImpl();            if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {              diskAtts.addAttribute("","",DIR_SIZE,"",String.valueOf(diskSizes[i]));            }            handler.startElement("",DISK_DIR,DISK_DIR,diskAtts);            File dir=diskDirs[i];            String name=generateDefaults() ? dir.getAbsolutePath() : dir.getPath();            handler.characters(name.toCharArray(),0,name.length());            handler.endElement("",DISK_DIR,DISK_DIR);          }          handler.endElement("",DISK_DIRS,DISK_DIRS);        }      }    }    handler.endElement("","",DISK_STORE);  }}  }
class C{  public static String dateToHeaderString(Date dat){  SimpleDateFormat fmt=new SimpleDateFormat(HTTP_FORMAT,Locale.US);  fmt.setTimeZone(GMT_ZONE);  return (fmt.format(dat));}  }
class C{  public void initWheelEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int wheelDeltaArg){  initUIEvent(typeArg,canBubbleArg,cancelableArg,viewArg,0);  wheelDelta=wheelDeltaArg;}  }
class C{  public static boolean isDemoMode(){  return DEMO_MODE;}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public static List<Trip> spatialTripFilter(List<Trip> trips,SpatialTripCutter cutter){  List<Trip> filteredTrips=new LinkedList<>();  for (  Trip tempTrip : trips) {    if (cutter.spatiallyConsideringTrip(tempTrip)) {      filteredTrips.add(tempTrip.clone());    }  }  return Collections.unmodifiableList(filteredTrips);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean match(PsiElement patternNode,PsiElement matchedNode,int start,int end,MatchContext context){  return match(patternNode,matchedNode,context);}  }
class C{  protected ClassFileUtilities(){}  }
class C{  public static int roundToOpSize(int a){  if ((a == 0) || (a == 1) || (a == 2)|| (a == 4)|| (a == 8)) {    return a;  } else   if (a == 3) {    return 4;  } else   if (a < 8) {    return 8;  } else {    while ((a % 4) != 0) {      a++;    }    return a;  }}  }
class C{  private void updateAdvancedFields(JTextField sampleFieldAdvanced,JTextField renderFieldAdvanced){  try {    Double.parseDouble(sampleFieldAdvanced.getText());  } catch (  Exception e1) {    sampleFieldAdvanced.setForeground(Color.RED);    return;  }  String format=formatField.getText();  try {    new DecimalFormat(format);  } catch (  Exception e2) {    formatField.setForeground(Color.RED);    return;  }  double sample=Double.parseDouble(sampleFieldAdvanced.getText());  NumberFormat nf=new DecimalFormat(format);  renderFieldAdvanced.setText(nf.format(sample));  sampleFieldAdvanced.setForeground(Color.BLACK);  formatField.setForeground(Color.BLACK);  Preferences.userRoot().put("numberFormat",format);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void paintThumb(SynthContext context,Graphics g,Rectangle thumbBounds){  int orientation=slider.getOrientation();  SynthLookAndFeel.updateSubregion(context,g,thumbBounds);  context.getPainter().paintSliderThumbBackground(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);  context.getPainter().paintSliderThumbBorder(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);}  }
class C{  public boolean savedPatternExists(){  return sHaveNonZeroPatternFile.get();}  }
class C{  public HighlightBuilder field(String name,int fragmentSize){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(new Field(name).fragmentSize(fragmentSize));  return this;}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public boolean isUseCustomBoundingBox(){  return useCustomBoundingBox;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_2__INDEX_1:    setIndex_1(INDEX_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void initWheel(int id){  WheelView wheel=getWheel(id);  wheel.setViewAdapter(new NumericWheelAdapter(this,0,9));  wheel.setCurrentItem((int)(Math.random() * 10));  wheel.addChangingListener(changedListener);  wheel.addScrollingListener(scrolledListener);  wheel.setCyclic(true);  wheel.setInterpolator(new AnticipateOvershootInterpolator());}  }
class C{  public static void w(String msg){  if (sIsLogEnabled) {    Log.w(sApplicationTag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  public boolean sendEMail(String to,String subject,String message,File attachment){  return sendEMail(to,subject,message,attachment,false);}  }
class C{  public static boolean isMoreSpecific(PsiMethod m1,PsiMethod m2,PsiExpression[] args,PsiElement context,boolean varargs){  List<PsiTypeParameter> params=new ArrayList<PsiTypeParameter>();  for (  PsiTypeParameter param : PsiUtil.typeParametersIterable(m2)) {    params.add(param);  }  final InferenceSession session=new InferenceSession(params.toArray(new PsiTypeParameter[params.size()]),PsiSubstitutor.EMPTY,m2.getManager(),context);  final PsiParameter[] parameters1=m1.getParameterList().getParameters();  final PsiParameter[] parameters2=m2.getParameterList().getParameters();  if (!varargs) {    LOG.assertTrue(parameters1.length == parameters2.length);  }  final int paramsLength=!varargs ? parameters1.length : parameters1.length - 1;  for (int i=0; i < paramsLength; i++) {    PsiType sType=getParameterType(parameters1,i,PsiSubstitutor.EMPTY,false);    PsiType tType=session.substituteWithInferenceVariables(getParameterType(parameters2,i,PsiSubstitutor.EMPTY,varargs));    if (LambdaUtil.isFunctionalType(sType) && LambdaUtil.isFunctionalType(tType) && !relates(sType,tType)) {      if (!isFunctionalTypeMoreSpecific(sType,tType,session,args[i])) {        return false;      }    } else {      if (session.isProperType(tType)) {        if (!TypeConversionUtil.isAssignable(tType,sType)) {          return false;        }      }      session.addConstraint(new StrictSubtypingConstraint(tType,sType));    }  }  if (varargs) {    PsiType sType=getParameterType(parameters1,paramsLength,PsiSubstitutor.EMPTY,true);    PsiType tType=session.substituteWithInferenceVariables(getParameterType(parameters2,paramsLength,PsiSubstitutor.EMPTY,true));    session.addConstraint(new StrictSubtypingConstraint(tType,sType));  }  return session.repeatInferencePhases(true);}  }
class C{  public boolean isValidateOnly(){  return validateOnly;}  }
class C{  public static String formatDecimal(double number,int digits){  StringBuffer a=new StringBuffer();  for (int i=0; i < digits; i++) {    if (i == 0)     a.append(".");    a.append("0");  }  DecimalFormat nf=new DecimalFormat("###,###,###,##0" + a.toString());  String formatted=nf.format(number);  return formatted;}  }
class C{  public void addRollAnimator(Angle begin,Angle end){  this.gotoAnimControl.remove(VIEW_ANIM_ROLL);  AngleAnimator rollAnimator=ViewUtil.createRollAnimator(this.getView(),begin,end);  this.gotoAnimControl.put(VIEW_ANIM_ROLL,rollAnimator);  this.getView().firePropertyChange(AVKey.VIEW,null,this.getView());}  }
class C{  public static int pointLineSide(Vector2 linePoint1,Vector2 linePoint2,Vector2 point){  return (int)Math.signum((linePoint2.x - linePoint1.x) * (point.y - linePoint1.y) - (linePoint2.y - linePoint1.y) * (point.x - linePoint1.x));}  }
class C{  public boolean createEntries(MAcctSchema as,Fact fact,DocLine line){  BigDecimal total=Env.ZERO;  for (int i=0; i < m_facts.size(); i++) {    MFactAcct factAcct=(MFactAcct)m_facts.get(i);    if (factAcct.getAmtSourceDr().compareTo(total) > 0) {      total=factAcct.getAmtSourceDr();      m_totalIndex=i;    }    if (factAcct.getAmtSourceCr().compareTo(total) > 0) {      total=factAcct.getAmtSourceCr();      m_totalIndex=i;    }  }  MFactAcct factAcct=(MFactAcct)m_facts.get(m_totalIndex);  log.info("Total Invoice = " + total + " - "+ factAcct);  int precision=as.getStdPrecision();  for (int i=0; i < m_facts.size(); i++) {    if (i == m_totalIndex)     continue;    factAcct=(MFactAcct)m_facts.get(i);    log.info(i + ": " + factAcct);    MAccount taxAcct=factAcct.getMAccount();    if (taxAcct == null || taxAcct.get_ID() == 0) {      log.severe("Tax Account not found/created");      return false;    }    if (m_DiscountAmt.signum() != 0) {      if (Env.ZERO.compareTo(factAcct.getAmtSourceDr()) != 0) {        BigDecimal amount=calcAmount(factAcct.getAmtSourceDr(),total,m_DiscountAmt,precision);        if (amount.signum() != 0) {          if (m_IsSOTrx) {            fact.createLine(line,m_DiscountAccount,as.getC_Currency_ID(),amount,null);            fact.createLine(line,taxAcct,as.getC_Currency_ID(),null,amount);          } else {            fact.createLine(line,m_DiscountAccount,as.getC_Currency_ID(),amount.negate(),null);            fact.createLine(line,taxAcct,as.getC_Currency_ID(),null,amount.negate());          }        }      } else {        BigDecimal amount=calcAmount(factAcct.getAmtSourceCr(),total,m_DiscountAmt,precision);        if (amount.signum() != 0) {          if (m_IsSOTrx) {            fact.createLine(line,taxAcct,as.getC_Currency_ID(),amount,null);            fact.createLine(line,m_DiscountAccount,as.getC_Currency_ID(),null,amount);          } else {            fact.createLine(line,taxAcct,as.getC_Currency_ID(),amount.negate(),null);            fact.createLine(line,m_DiscountAccount,as.getC_Currency_ID(),null,amount.negate());          }        }      }    }    if (m_WriteOffAmt.signum() != 0) {      if (Env.ZERO.compareTo(factAcct.getAmtSourceDr()) != 0) {        BigDecimal amount=calcAmount(factAcct.getAmtSourceDr(),total,m_WriteOffAmt,precision);        if (amount.signum() != 0) {          fact.createLine(line,m_WriteOffAccount,as.getC_Currency_ID(),amount,null);          fact.createLine(line,taxAcct,as.getC_Currency_ID(),null,amount);        }      } else {        BigDecimal amount=calcAmount(factAcct.getAmtSourceCr(),total,m_WriteOffAmt,precision);        if (amount.signum() != 0) {          fact.createLine(line,taxAcct,as.getC_Currency_ID(),amount,null);          fact.createLine(line,m_WriteOffAccount,as.getC_Currency_ID(),null,amount);        }      }    }  }  return true;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public static void runFinalizersOnExit(boolean flag){  Runtime.runFinalizersOnExit(flag);}  }
class C{  public static Object buildCustomSTV(String UIContext){  String currentSTV;  try {    currentSTV=(String)SageTV.apiUI(UIContext,"GetCurrentSTVFile",null);    assert currentSTV != null && currentSTV.length() > 0;  } catch (  Throwable e) {    if (e.getCause() != null)     e=e.getCause();    System.out.println("PluginManager.BuidCustomSTV: Failed getting current STV file: " + e);    return "Failed to get current STV file";  }  String baseSTV;  String[] stvis;  int numStvis=0;  try {    baseSTV=(String)SageTV.apiUI(UIContext,"GetProperty",new Object[]{PROPERTIES_BASESTV_NAME + "name",""});    String numStvisString=(String)SageTV.apiUI(UIContext,"GetProperty",new Object[]{PROPERTIES_STVIS_NAME + "/num_items",new Integer(0)});    if (numStvisString != null && numStvisString.length() > 0) {      try {        numStvis=Integer.parseInt(numStvisString);      } catch (      NumberFormatException e) {        numStvis=0;        SageTV.apiUI(UIContext,"SetProperty",new Object[]{PROPERTIES_STVIS_NAME + "/num_items",new Integer(0)});      }    }    if (numStvis == 0)     return "No importable plugins configured";    stvis=new String[numStvis];    for (int i=0; i < numStvis; i++) {      stvis[i]=(String)SageTV.apiUI(UIContext,"GetProperty",new Object[]{PROPERTIES_STVIS_NAME + "/" + i+ "/name",""});    }  } catch (  Throwable e) {    if (e.getCause() != null)     e=e.getCause();    System.out.println("PluginManager.BuidCustomSTV: Failed getting " + PROPERTIES_NAME + " properties: "+ e);    return "Failed to get plugins configuration";  }  File baseStvFile=new File(baseSTV);  if (!baseStvFile.exists() || !baseStvFile.canRead()) {    return "Cannot read base STV " + baseStvFile;  }  File[] stviFiles=new File[numStvis];  for (int i=0; i < numStvis; i++) {    if (stvis[i].length() > 0)     stviFiles[i]=new File(stvis[i]);    if (stviFiles[i] == null || !stviFiles[i].exists() || !stviFiles[i].canRead()) {      return "Cannot read STVI plugin file " + i + ":"+ stviFiles[i];    }  }  try {    displayMessage(UIContext,"Loading base STV\n" + baseStvFile.getName(),true,MESSAGEBOX_TIMEOUT);    Object retval=SageTV.apiUI(UIContext,"LoadSTVFile",new Object[]{baseStvFile});    if (!retval.equals(Boolean.TRUE)) {      return "Failed to read base STV file " + baseStvFile + " - "+ retval;    }    for (int i=0; i < stviFiles.length; i++) {      displayMessage(UIContext,"Importing plugin\n" + stviFiles[i].getName(),true,MESSAGEBOX_TIMEOUT);      retval=SageTV.apiUI(UIContext,"ImportSTVFile",new Object[]{stviFiles[i]});      if (!retval.equals(Boolean.TRUE)) {        throw new Exception("Failed to import plugin: " + stviFiles + " - "+ retval);      }      Thread.sleep(500);      String tmpSTV=(String)SageTV.apiUI(UIContext,"GetCurrentSTVFile",null);      File tmpStvFile=new File(tmpSTV);      System.out.println("PluginManager.BuidCustomSTV: deleting " + tmpSTV);      if (!tmpStvFile.equals(baseStvFile)) {        if (!tmpStvFile.delete())         tmpStvFile.deleteOnExit();      }    }    SageTV.apiUI(UIContext,"SetProperty",new Object[]{PROPERTIES_BASESTV_NAME + "timestamp",new Long(baseStvFile.lastModified())});    for (int i=0; i < numStvis; i++) {      SageTV.apiUI(UIContext,"SetProperty",new Object[]{PROPERTIES_STVIS_NAME + "/" + i+ "/timestamp",new Long(stviFiles[i].lastModified())});    }    displayMessage(UIContext,"Loading STV with plugins",true,MESSAGEBOX_TIMEOUT);    String stvName;    if (baseSTV.endsWith(".xml") || baseSTV.endsWith(".stv"))     stvName=baseSTV.substring(0,baseSTV.length() - 4); else     stvName=baseSTV;    stvName=stvName + "_withimports_" + UIContext+ ".xml";    File stvFile=new File(stvName);    retval=SageTV.apiUI(UIContext,"SaveWidgetsAsXML",new Object[]{stvFile,Boolean.TRUE});    if (!retval.equals(Boolean.TRUE)) {      throw new Exception("Failed to save STV file as: " + stvName);    }    SageTV.apiUI(UIContext,"SetProperty",new Object[]{PROPERTIES_NAME + "stv_name",stvName});    SageTV.apiUI(UIContext,"AddGlobalContext",new Object[]{"gCurThemeLoaded",null});    SageTV.apiUI(UIContext,"AddGlobalContext",new Object[]{"gGlobalVarsAreSet",null});    SageTV.apiUI(UIContext,"LoadSTVFile",new Object[]{stvFile});    if (!retval.equals(Boolean.TRUE)) {      throw new Exception("Failed to read generated STV file " + stvFile + " - "+ retval);    }  } catch (  Throwable e) {    if (e.getCause() != null)     e=e.getCause();    System.out.println("PluginManager.BuidCustomSTV: Failed to create custom STV file: " + e);    displayMessage(UIContext,"Failed to create custom STV file:\n" + e,true,0);    try {      SageTV.apiUI(UIContext,"LoadSTVFile",new Object[]{new File(currentSTV)});    } catch (    Throwable e1) {      if (e1.getCause() != null)       e1=e1.getCause();      System.out.println("PluginManager.BuidCustomSTV: Failed to to reload original STV file: " + e1);    }  }  displayMessage(UIContext,"STV rebuilt with STVI plugins and reloaded",true,MESSAGEBOX_TIMEOUT);  return Boolean.TRUE;}  }
class C{  private void parseNestedMode(Attributes attributes) throws SAXException {  ModeData oldMd=md;  modeDataStack.push(md);  md=new ModeData();  md.currentMode=oldMd.lastMode;  if (md.currentMode.isDefined()) {    error("duplicate_mode",md.currentMode.getName());    error("first_mode",md.currentMode.getName(),md.currentMode.getWhereDefined());  } else {    md.currentMode.noteDefined(locator);  }}  }
class C{  private void validateConfigurationProperties(final HashMap props){  for (  Object o : props.keySet()) {    String propertyName=(String)o;    Object value=null;    try {      Method method=getters.get(propertyName);      if (method != null) {        value=method.invoke(this,new Object[]{});      }    } catch (    Exception e) {      if (e instanceof RuntimeException) {        throw (RuntimeException)e;      }      if (e.getCause() instanceof RuntimeException) {        throw (RuntimeException)e.getCause();      } else {        throw new InternalGemFireException("error invoking getter for property" + propertyName);      }    }    checkAttribute(propertyName,value);  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void addArticleNote(int id,String note){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    markArticles("" + id,"note",note);    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.820 -0500",hash_original_method="E52D3B9BC90DBBDF3C179757863C5D97",hash_generated_method="69E91BDD0248A2C32E6AD5564234BB81") public SipAudioCall(Context context,SipProfile localProfile){  mContext=context;  mLocalProfile=localProfile;  mWm=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public boolean isClassname(String partial){  return (partial.replaceAll("[a-zA-Z0-9\\-\\.]*","").length() == 0);}  }
class C{  public void write(int b) throws java.io.IOException {  if (b == '\n') {    iBuffer.append("<br>");  }  iBuffer.append((char)b);}  }
class C{  public void addApp(Class<?> appClass){  JMenuItem item=addDemoToMenu(appsMenu,appClass);  item.addActionListener(new AppStarter(appClass));}  }
class C{  public RenderedImage createDefaultRendering(){  return getSource().createDefaultRendering();}  }
class C{  protected CCIntervalAction action(){  return CCMoveTo.action(duration,new CGPoint());}  }
class C{  public ErrorDetails validateVacantLandDetails(final CreatePropertyDetails createPropDetails,ErrorDetails errorDetails){  final VacantLandDetails vacantLandDetails=createPropDetails.getVacantLandDetails();  if (vacantLandDetails == null) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(VACANT_LAND_DETAILS_REQ_CODE);    errorDetails.setErrorMessage(VACANT_LAND_DETAILS_REQ_MSG);    return errorDetails;  } else {    if (StringUtils.isBlank(vacantLandDetails.getSurveyNumber())) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(SURVEY_NO_REQ_CODE);      errorDetails.setErrorMessage(SURVEY_NO_REQ_MSG);      return errorDetails;    } else     if (StringUtils.isBlank(vacantLandDetails.getPattaNumber())) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(PATTA_NO_REQ_CODE);      errorDetails.setErrorMessage(PATTA_NO_REQ_MSG);      return errorDetails;    } else     if (vacantLandDetails.getVacantLandArea() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(VACANT_LAND_AREA_REQ_CODE);      errorDetails.setErrorMessage(VACANT_LAND_AREA_REQ_MSG);      return errorDetails;    } else     if (Float.valueOf(vacantLandDetails.getVacantLandArea()) == 0.0) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(AREA_GREATER_THAN_ZERO_CODE);      errorDetails.setErrorMessage(AREA_GREATER_THAN_ZERO_MSG);      return errorDetails;    } else     if (vacantLandDetails.getMarketValue() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(MARKET_AREA_VALUE_REQ_CODE);      errorDetails.setErrorMessage(MARKET_AREA_VALUE_REQ_MSG);      return errorDetails;    } else     if (Double.valueOf(vacantLandDetails.getMarketValue()) == 0) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(MARKET_VALUE_GREATER_THAN_ZERO_CODE);      errorDetails.setErrorMessage(MARKET_VALUE_GREATER_THAN_ZERO_MSG);      return errorDetails;    } else     if (vacantLandDetails.getCurrentCapitalValue() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(CURRENT_CAPITAL_VALUE_REQ_CODE);      errorDetails.setErrorMessage(CURRENT_CAPITAL_VALUE_REQ_MSG);      return errorDetails;    } else     if (Double.valueOf(vacantLandDetails.getCurrentCapitalValue()) == 0.0) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(CURRENT_CAPITAL_VALUE_GREATER_THAN_ZERO_CODE);      errorDetails.setErrorMessage(CURRENT_CAPITAL_VALUE_GREATER_THAN_ZERO_MSG);      return errorDetails;    } else     if (StringUtils.isBlank(vacantLandDetails.getEffectiveDate())) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(EFFECTIVE_DATE_REQ_CODE);      errorDetails.setErrorMessage(EFFECTIVE_DATE_REQ_MSG);      return errorDetails;    }    final SurroundingBoundaryDetails surBoundaryDetails=createPropDetails.getSurroundingBoundaryDetails();    if (surBoundaryDetails == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(SURROUNDING_BOUNDARY_DETAILS_REQ_CODE);      errorDetails.setErrorMessage(SURROUNDING_BOUNDARY_DETAILS_REQ_MSG);      return errorDetails;    } else {      if (StringUtils.isBlank(surBoundaryDetails.getNorthBoundary())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(NORTH_BOUNDARY_REQ_CODE);        errorDetails.setErrorMessage(NORTH_BOUNDARY_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(surBoundaryDetails.getSouthBoundary())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(SOUTH_BOUNDARY_REQ_CODE);        errorDetails.setErrorMessage(SOUTH_BOUNDARY_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(surBoundaryDetails.getEastBoundary())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(EAST_BOUNDARY_REQ_CODE);        errorDetails.setErrorMessage(EAST_BOUNDARY_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(surBoundaryDetails.getWestBoundary())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(WEST_BOUNDARY_REQ_CODE);        errorDetails.setErrorMessage(WEST_BOUNDARY_REQ_MSG);        return errorDetails;      }    }  }  return errorDetails;}  }
class C{  public Element store(Object o){  LayoutEditor p=(LayoutEditor)o;  Element panel=new Element("LayoutEditor");  panel.setAttribute("class",getClass().getName());  panel.setAttribute("name",p.getLayoutName());  panel.setAttribute("x","" + p.getUpperLeftX());  panel.setAttribute("y","" + p.getUpperLeftY());  panel.setAttribute("height","" + p.getLayoutHeight());  panel.setAttribute("width","" + p.getLayoutWidth());  panel.setAttribute("windowheight","" + p.getWindowHeight());  panel.setAttribute("windowwidth","" + p.getWindowWidth());  panel.setAttribute("panelheight","" + p.getLayoutHeight());  panel.setAttribute("panelwidth","" + p.getLayoutWidth());  panel.setAttribute("sliders","" + (p.getScroll() ? "yes" : "no"));  panel.setAttribute("scrollable","" + p.getScrollable());  panel.setAttribute("editable","" + (p.isEditable() ? "yes" : "no"));  panel.setAttribute("positionable","" + (p.allPositionable() ? "yes" : "no"));  panel.setAttribute("controlling","" + (p.allControlling() ? "yes" : "no"));  panel.setAttribute("animating","" + (p.isAnimating() ? "yes" : "no"));  panel.setAttribute("showhelpbar","" + (p.getShowHelpBar() ? "yes" : "no"));  panel.setAttribute("drawgrid","" + (p.getDrawGrid() ? "yes" : "no"));  panel.setAttribute("snaponadd","" + (p.getSnapOnAdd() ? "yes" : "no"));  panel.setAttribute("snaponmove","" + (p.getSnapOnMove() ? "yes" : "no"));  panel.setAttribute("antialiasing","" + (p.getAntialiasingOn() ? "yes" : "no"));  panel.setAttribute("turnoutcircles","" + (p.getTurnoutCircles() ? "yes" : "no"));  panel.setAttribute("tooltipsnotedit","" + (p.getTooltipsNotEdit() ? "yes" : "no"));  panel.setAttribute("tooltipsinedit","" + (p.getTooltipsInEdit() ? "yes" : "no"));  panel.setAttribute("mainlinetrackwidth","" + p.getMainlineTrackWidth());  panel.setAttribute("xscale",Float.toString((float)p.getXScale()));  panel.setAttribute("yscale",Float.toString((float)p.getYScale()));  panel.setAttribute("sidetrackwidth","" + p.getSideTrackWidth());  panel.setAttribute("defaulttrackcolor",p.getDefaultTrackColor());  panel.setAttribute("defaultoccupiedtrackcolor",p.getDefaultOccupiedTrackColor());  panel.setAttribute("defaultalternativetrackcolor",p.getDefaultAlternativeTrackColor());  panel.setAttribute("defaulttextcolor",p.getDefaultTextColor());  panel.setAttribute("turnoutcirclecolor",p.getTurnoutCircleColor());  panel.setAttribute("turnoutcirclesize","" + p.getTurnoutCircleSize());  panel.setAttribute("turnoutdrawunselectedleg",(p.getTurnoutDrawUnselectedLeg() ? "yes" : "no"));  panel.setAttribute("turnoutbx",Float.toString((float)p.getTurnoutBX()));  panel.setAttribute("turnoutcx",Float.toString((float)p.getTurnoutCX()));  panel.setAttribute("turnoutwid",Float.toString((float)p.getTurnoutWid()));  panel.setAttribute("xoverlong",Float.toString((float)p.getXOverLong()));  panel.setAttribute("xoverhwid",Float.toString((float)p.getXOverHWid()));  panel.setAttribute("xovershort",Float.toString((float)p.getXOverShort()));  panel.setAttribute("autoblkgenerate","" + (p.getAutoBlockAssignment() ? "yes" : "no"));  if (p.getBackgroundColor() != null) {    panel.setAttribute("redBackground","" + p.getBackgroundColor().getRed());    panel.setAttribute("greenBackground","" + p.getBackgroundColor().getGreen());    panel.setAttribute("blueBackground","" + p.getBackgroundColor().getBlue());  }  panel.setAttribute("gridSize","" + p.getGridSize());  p.resetDirty();  panel.setAttribute("openDispatcher",p.getOpenDispatcherOnLoad() ? "yes" : "no");  panel.setAttribute("useDirectTurnoutControl",p.getDirectTurnoutControl() ? "yes" : "no");  List<Positionable> contents=p.getContents();  int num=contents.size();  if (num > 0) {    for (int i=0; i < num; i++) {      Positionable sub=contents.get(i);      if (sub != null && sub.storeItem()) {        try {          Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);          if (e != null) {            panel.addContent(e);          }        } catch (        Exception e) {          log.error("Error storing panel contents element: " + e);        }      } else {        log.warn("Null entry found when storing panel contents.");      }    }  }  num=p.turnoutList.size();  if (log.isDebugEnabled()) {    log.debug("N layoutturnout elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.turnoutList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel layoutturnout element: " + e);      }    }  }  num=p.trackList.size();  if (log.isDebugEnabled()) {    log.debug("N tracksegment elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.trackList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel tracksegment element: " + e);      }    }  }  num=p.pointList.size();  if (log.isDebugEnabled()) {    log.debug("N positionablepoint elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.pointList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel positionalpoint element: " + e);      }    }  }  num=p.xingList.size();  if (log.isDebugEnabled()) {    log.debug("N levelxing elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.xingList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel levelxing element: " + e);      }    }  }  num=p.slipList.size();  if (log.isDebugEnabled()) {    log.debug("N layoutSlip elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.slipList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel layoutSlip element: " + e);      }    }  }  num=p.turntableList.size();  if (log.isDebugEnabled()) {    log.debug("N turntable elements: " + num);  }  if (num > 0) {    for (int i=0; i < num; i++) {      Object sub=p.turntableList.get(i);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel turntable element: " + e);      }    }  }  return panel;}  }
class C{  public static void moveTextEditGroupsIntoChange(TextEditBasedChangeGroup[] groups,TextChange textChange){  for (  TextEditBasedChangeGroup changeGroup : groups) {    TextEditGroup group=changeGroup.getTextEditGroup();    for (    TextEdit edit : group.getTextEdits()) {      if (edit.getParent() != null) {        edit.getParent().removeChild(edit);      }      textChange.addEdit(edit);    }    TextEditBasedChangeGroup newChangeGroup=new TextEditBasedChangeGroup(textChange,group);    newChangeGroup.setEnabled(changeGroup.isEnabled());    textChange.addChangeGroup(newChangeGroup);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.401 -0500",hash_original_method="F891E9E45688B24DB77EAA9DE670091B",hash_generated_method="DE82729ACB015F73FA05A44E77A4C535") public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public SimplifySpanBuild appendNormalTextToFirst(String text,BaseSpecialUnit... normalSpecialUnits){  if (TextUtils.isEmpty(text))   return this;  if (null != normalSpecialUnits && normalSpecialUnits.length > 0) {    buildNormalSpecialUnits(true,mBeforeStringBuilder.length(),text,normalSpecialUnits);  } else {    mNormalSizeText.append(text);  }  mBeforeStringBuilder.append(text);  return this;}  }
class C{  public void duplicate() throws IOException {  print("duplicate",null);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public Template(Template template){  this(template.getId(),template.getName(),template.getDescription(),template.getContextTypeId(),template.getPattern(),template.isAutoInsertable());}  }
class C{  private static Key createDESKey(byte[] bytes,int offset){  byte[] keyBytes=new byte[7];  System.arraycopy(bytes,offset,keyBytes,0,7);  byte[] material=new byte[8];  material[0]=keyBytes[0];  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);  material[7]=(byte)(keyBytes[6] << 1);  oddParity(material);  return new SecretKeySpec(material,"DES");}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(funcName,argVec,methodKey,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,funcName}));    }  }  return result;}  }
class C{  public static BigDecimal availableToCapture(GenericValue billingAccount) throws GenericEntityException {  BigDecimal netBalance=getBillingAccountNetBalance(billingAccount.getDelegator(),billingAccount.getString("billingAccountId"));  BigDecimal accountLimit=billingAccount.getBigDecimal("accountLimit");  return accountLimit.subtract(netBalance).setScale(decimals,rounding);}  }
class C{  public void addMapsIdMapping(DatabaseMapping mapping){  mapsIdMappings.add(mapping);}  }
class C{  private static int createPackedParams(boolean isoblit,boolean texture,boolean rtt,boolean xform,int hint,int srctype){  return ((srctype << OFFSET_SRCTYPE) | (hint << OFFSET_HINT) | ((texture ? 1 : 0) << OFFSET_TEXTURE)| ((rtt ? 1 : 0) << OFFSET_RTT)| ((xform ? 1 : 0) << OFFSET_XFORM)| ((isoblit ? 1 : 0) << OFFSET_ISOBLIT));}  }
class C{  public CharEscaperBuilder addEscape(char c,String r){  map.put(c,r);  if (c > max) {    max=c;  }  return this;}  }
class C{  public static String retrieveGenericDisplayName(String id,int style,Locale locale){  String[] names=retrieveDisplayNamesImpl(id,locale);  if (Objects.nonNull(names)) {    return names[6 - style];  } else {    return null;  }}  }
class C{  public static RangeExpression between(String propertyName,Object from,Object to){  return new RangeExpression(Operator.BETWEEN,propertyName,from,to);}  }
class C{  private CFG inlineAll() throws CFGBuilderException {  CFG result=new CFG();  Context rootContext=new Context(null,topLevelSubroutine,result);  rootContext.mapBlock(topLevelSubroutine.getEntry(),result.getEntry());  rootContext.mapBlock(topLevelSubroutine.getExit(),result.getExit());  BasicBlock resultStartBlock=rootContext.getBlock(topLevelSubroutine.getStartBlock());  result.createEdge(result.getEntry(),resultStartBlock,START_EDGE);  inline(rootContext);  return result;}  }
class C{  private boolean doDdpOrientation(Node d,Node a,Node b,Node c,Map<Node,Node> previous,Graph graph){  if (graph.isAdjacentTo(d,c)) {    throw new IllegalArgumentException();  }  List<Node> path=getPath(d,previous);  boolean ind=getSepsets().isIndependent(d,c,path);  List<Node> path2=new ArrayList<>(path);  path2.remove(b);  boolean ind2=getSepsets().isIndependent(d,c,path2);  if (!ind && !ind2) {    List<Node> sepset=getSepsets().getSepset(d,c);    if (verbose) {      System.out.println("Sepset for d = " + d + " and c = "+ c+ " = "+ sepset);    }    if (sepset == null) {      if (verbose) {        System.out.println("Must be a sepset: " + d + " and "+ c+ "; they're non-adjacent.");      }      return false;    }    ind=sepset.contains(b);  }  if (ind) {    graph.setEndpoint(c,b,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.TAIL);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));      System.out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    }    changeFlag=true;    return true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return false;    }    if (!isArrowpointAllowed(c,b,graph)) {      return false;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    this.orientSimilarPairs(graph,this.getKnowledge(),a,b,Endpoint.ARROW);    this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.ARROW);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));      System.out.println(SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    }    changeFlag=true;    return true;  }}  }
class C{  public static GraphRequest newUploadStagingResourceWithImageRequest(AccessToken accessToken,File file,Callback callback) throws FileNotFoundException {  ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);  GraphRequest.ParcelableResourceWithMimeType<ParcelFileDescriptor> resourceWithMimeType=new GraphRequest.ParcelableResourceWithMimeType<>(descriptor,"image/png");  Bundle parameters=new Bundle(1);  parameters.putParcelable(STAGING_PARAM,resourceWithMimeType);  return new GraphRequest(accessToken,MY_STAGING_RESOURCES,parameters,HttpMethod.POST,callback);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public JarEntry(JarEntry je){  this((ZipEntry)je);  this.attr=je.attr;  this.certs=je.certs;  this.signers=je.signers;}  }
class C{  public boolean hasAttribute(String name){  return this.findAttribute(name) != null;}  }
class C{  public PendingChange remove(final PendingChange changeToRemove){  Check.notNull(changeToRemove,"changeToRemove");  Check.notNull(changeToRemove.getServerItem(),"changeToRemove.serverItem");  PendingChange removedChange;synchronized (lock) {    removedChange=removeInternal(changeToRemove);    if (removedChange != null && removedChange.getChangeType().contains(ChangeType.RENAME) && removedChange.getItemType().equals(ItemType.FOLDER)) {      retargetChildrenOfUndoneRename(removedChange);    }  }  return removedChange;}  }
class C{  public SnackbarCombinedCallback(SnackbarCallback snackbarCallback){  this(snackbarCallback,null);}  }
class C{  public void addEventListener(VideoSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IVideoSharingListener rcsListener=new VideoSharingListenerImpl(listener);    mVideoSharingListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener2(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.320 -0500",hash_original_method="84B9E6027D2FCCE6A1B5E4707316E9F7",hash_generated_method="086F7A707D0523E6E0AF66D51D098DC7") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.061 -0500",hash_original_method="3FBE7BF8C34BE1586BD3FB61F6724F2F",hash_generated_method="2F77D8C2A02E8DDB4F8B16E6421D8E7F") @DSSafe(DSCat.SAFE_OTHERS) public CopyStreamException(String message,long bytesTransferred,IOException exception){  super(message);  totalBytesTransferred=bytesTransferred;  ioException=exception;}  }
class C{  public SingleXZInputStream(InputStream in,int memoryLimit) throws IOException {  initialize(in,memoryLimit);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @Override public void run(ContinuationContext context){  List<Pair<SvnChangeList,LogHierarchyNode>> changeLists=null;  try {    changeLists=getChangeListsBefore(myFirst);  } catch (  VcsException e) {    context.handleException(e,true);  }  if (changeLists != null) {    initialize(context,changeLists);  }}  }
class C{  public void Gen_populate(android.content.ContentValues values){  gen__Id=values.getAsLong(GEN_FIELD__ID);  gen_sentText=values.getAsString(GEN_FIELD_SENTTEXT);}  }
class C{  @Override protected Element narrow(ElementMetadata<?,?> metadata,ValidationContext vc){  String term=Kinds.getElementKind(this);  if (term != null) {    return adapt(this,metadata,term);  }  return super.narrow(metadata,vc);}  }
class C{  private static boolean isChildOf(File f,String dirName){  try {    File dir=new File(dirName);    String canonicalDirName=dir.getCanonicalPath();    if (!canonicalDirName.endsWith(File.separator)) {      canonicalDirName+=File.separator;    }    String canonicalFileName=f.getCanonicalPath();    return canonicalFileName.startsWith(canonicalDirName);  } catch (  IOException e) {    return false;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.BaseResourceType buildTrackFileResource(IMFTrackFileResourceType trackResource){  org.smpte_ra.schemas.st2067_2_2016.TrackFileResourceType trackFileResource=new org.smpte_ra.schemas.st2067_2_2016.TrackFileResourceType();  trackFileResource.setId(trackResource.getId());  trackFileResource.setAnnotation(null);  trackFileResource.setTrackFileId(trackResource.getTrackFileId());  trackFileResource.getEditRate().add(trackResource.getEditRate().getNumerator());  trackFileResource.getEditRate().add(trackResource.getEditRate().getDenominator());  trackFileResource.setIntrinsicDuration(trackResource.getIntrinsicDuration());  trackFileResource.setEntryPoint(trackResource.getEntryPoint());  trackFileResource.setSourceDuration(trackResource.getSourceDuration());  trackFileResource.setRepeatCount(trackResource.getRepeatCount());  trackFileResource.setSourceEncoding(trackResource.getSourceEncoding());  trackFileResource.setHash(trackResource.getHash());  trackFileResource.setHashAlgorithm(buildDefaultDigestMethodType());  return trackFileResource;}  }
class C{  public void pickHTML(String text,int x,int y,TextRendererCache renderers,DrawContext dc,PickSupport pickSupport,Object refObject,Position refPosition){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (pickSupport == null) {    String msg=Logging.getMessage("nullValue.PickSupportIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.drawContext=dc;  this.pickSupport=pickSupport;  this.pickObject=refObject;  this.pickPosition=refPosition;  this.isPicking=true;  try {    drawHTML(text,x,y,renderers);  }  finally {    this.isPicking=false;  }}  }
class C{  public TechnicalServiceOperationException(){}  }
class C{  AllocationOutcome allocateBytes(long size){  final AllocationOutcome outcome=allocate(size,true,false);  if (!outcome.isOk()) {    releaseBytes(size);  }  return outcome;}  }
class C{  @Override public void operatorImported(final Operator op,final Element opElement){  String x=opElement.getAttribute(XML_ATTRIBUTE_X_POSITION);  String y=opElement.getAttribute(XML_ATTRIBUTE_Y_POSITION);  String w=opElement.getAttribute(XML_ATTRIBUTE_WIDTH);  String h=opElement.getAttribute(XML_ATTRIBUTE_HEIGHT);  if (x != null && x.length() > 0) {    try {      Rectangle2D rect=new Rectangle2D.Double(Double.parseDouble(x),Double.parseDouble(y),Double.parseDouble(w),Double.parseDouble(h));      setOperatorRectangle(op,rect);    } catch (    Exception e) {    }  }}  }
class C{  public Vector2 sub(float x,float y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  public Avg4(){  super("avg4",4);}  }
class C{  private static String joinAndSkipNulls(String separator,String... strings){  StringBuilder sb=null;  for (  String s : strings) {    if (s != null) {      s=s.trim();      if (s.length() > 0) {        if (sb == null) {          sb=new StringBuilder(s);        } else {          sb.append(separator).append(s);        }      }    }  }  return sb == null ? "" : sb.toString();}  }
class C{  public void dispose(){  this.removeAll();  _iconMap=null;  _order=null;  _catalog=null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("RColumn[");  sb.append(m_colSQL).append("=").append(m_colHeader).append("]");  return sb.toString();}  }
class C{  public <R>Stream<R> compose(Func1<Stream<T>,Stream<R>> factory){  return factory.call(this);}  }
class C{  public HRuleView(Element elem){  super(elem);  setPropertiesFromAttributes();}  }
class C{  public static double average(double x1,double x2){  return (x1 + x2) / 2.0;}  }
class C{  public int addLoadParameters(CtClass[] params,int offset){  int stacksize=0;  if (params != null) {    int n=params.length;    for (int i=0; i < n; ++i)     stacksize+=addLoad(stacksize + offset,params[i]);  }  return stacksize;}  }
class C{  public SpeechData(byte[] data){  AudioInputStream stream=AudioUtils.getAudioStream(data);  format=stream.getFormat();  this.data=data;  isFinal=true;}  }
class C{  private void performInOutZoom(){switch (zoomType) {case ZOOM_IN:    zoomInOut(true,true,Axis.ZOOM_RATIO);  break;case ZOOM_IN_HORIZONTALLY:zoomInOut(true,false,Axis.ZOOM_RATIO);break;case ZOOM_IN_VERTICALLY:zoomInOut(false,true,Axis.ZOOM_RATIO);break;case ZOOM_OUT:zoomInOut(true,true,-Axis.ZOOM_RATIO);break;case ZOOM_OUT_HORIZONTALLY:zoomInOut(true,false,-Axis.ZOOM_RATIO);break;case ZOOM_OUT_VERTICALLY:zoomInOut(false,true,-Axis.ZOOM_RATIO);break;default :}}  }
class C{  public final MutableDouble2D zero(){  this.x=0;  this.y=0;  return this;}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(0,ActionType.USE.getRepresentation());  super.buildActions(list);}  }
class C{  public static BufferedImage createRGBImageFromInvertedYCCK(Raster ycckRaster,ICC_Profile cmykProfile){  BufferedImage image;  if (cmykProfile != null) {    ycckRaster=convertInvertedYCCKToCMYK(ycckRaster);    image=createRGBImageFromCMYK(ycckRaster,cmykProfile);  } else {    int w=ycckRaster.getWidth(), h=ycckRaster.getHeight();    int[] rgb=new int[w * h];    int[] Y=ycckRaster.getSamples(0,0,w,h,0,(int[])null);    int[] Cb=ycckRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Cr=ycckRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=ycckRaster.getSamples(0,0,w,h,3,(int[])null);    float vr, vg, vb;    for (int i=0, imax=Y.length; i < imax; i++) {      float k=255 - K[i], y=255 - Y[i], cb=255 - Cb[i], cr=255 - Cr[i];      vr=y + 1.402f * (cr - 128) - k;      vg=y - 0.34414f * (cb - 128) - 0.71414f * (cr - 128) - k;      vb=y + 1.772f * (cb - 128) - k;      rgb[i]=(0xff & (vr < 0.0f ? 0 : vr > 255.0f ? 0xff : (int)(vr + 0.5f))) << 16 | (0xff & (vg < 0.0f ? 0 : vg > 255.0f ? 0xff : (int)(vg + 0.5f))) << 8 | (0xff & (vb < 0.0f ? 0 : vb > 255.0f ? 0xff : (int)(vb + 0.5f)));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestVacantArea(pixelX,pixelY,spanX,spanY,null,result);}  }
class C{  public void addErrorCallback(OneSheeldErrorCallback errorCallback){  if (errorCallback != null && !errorCallbacks.contains(errorCallback))   errorCallbacks.add(errorCallback);}  }
class C{  private boolean isTranslateable(String sourceWord){  return TokenUtils.isNumericOrPunctuationOrSymbols(sourceWord) || TokenUtils.isURL(sourceWord);}  }
class C{  public TransformVariablesZHat(BBOBFunction function,double[] xopt){  super(function);  this.xopt=xopt;}  }
class C{  public MMenu(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  float parsePos(int index,double value){  if (handleValues)   return (float)(chartView.horController.getAxisVerticalPosition() - (((value - minLabelValue) * screenStep) / (labelsValues.get(1) - minLabelValue))); else   return labelsPos.get(index);}  }
class C{  public boolean stop(){  if (isMusicPlayer()) {    if (musicPlayer != null && musicPlayer.isPlaying()) {      musicPlayer.stop();      return true;    } else {      return false;    }  } else {    if (player != null && player.isPlaying()) {      player.stop();      return true;    } else {      return false;    }  }}  }
class C{  public static Map<String,Object> testSOAPService(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> response=ServiceUtil.returnSuccess();  List<GenericValue> testingNodes=new LinkedList<GenericValue>();  for (int i=0; i < 3; i++) {    GenericValue testingNode=delegator.makeValue("TestingNode");    testingNode.put("testingNodeId","TESTING_NODE" + i);    testingNode.put("description","Testing Node " + i);    testingNode.put("createdStamp",UtilDateTime.nowTimestamp());    testingNodes.add(testingNode);  }  response.put("testingNodes",testingNodes);  return response;}  }
class C{  public int compare(Object that){  CharacterReference r;  String kernel;  int length;  int ret;  ret=0;  r=(CharacterReference)that;  kernel=r.getKernel();  length=kernel.length();  for (int i=mStart, j=0; i < mEnd; i++, j++) {    if (j >= length) {      ret=1;      break;    }    ret=mKernel.charAt(i) - kernel.charAt(j);    if (0 != ret)     break;  }  return (ret);}  }
class C{  public void resetCounters(){  mRetryCount=0;  mRetryAfter511ErrorCount=0;}  }
class C{  private Operation generateOperation(Terminal terminal,OracleDocument document) throws OracleException {  StringBuilder sb=new StringBuilder();  if (terminal == Terminal.REMOVE) {    return_query=false;    generateRemove(sb);  } else   if (replace(terminal)) {    return_query=false;    generateUpdate(sb);  } else {    if (terminal != Terminal.GET_CURSOR) {      return_query=false;    }    if (paginationWorkaround(terminal)) {      generatePaginationWorkaround(sb,terminal);    } else {      generateSelect(sb,terminal);    }  }  int numOfFilterSpecKeys=0;  if (filterSpec != null) {    if (tree == null) {      throw new IllegalStateException();    }    numOfFilterSpecKeys=getNumberOfFilterSpecKeys();  }  generateWhere(sb);  boolean filterSpecOrderByPresent=false;  if (!countOrWrite(terminal)) {    if (hasFilterSpecOrderBy()) {      generateFilterSpecOrderBy(sb,tree);      filterSpecOrderByPresent=true;    }    if (!paginationWorkaround(terminal)) {      generateOrderBy(sb,filterSpecOrderByPresent);      generateOffsetAndFetchNext(sb);    }  }  if (returningClause(terminal)) {    generateReturning(sb);  }  PreparedStatement stmt=null;  String sqltext=sb.toString();  try {    if (return_query)     beginQueryRecord(sqltext);    if (OracleLog.isLoggingEnabled())     log.fine("Query:\n" + sqltext);    metrics.startTiming();    stmt=connection.prepareStatement(sqltext);    int parameterIndex=0;    if (replace(terminal)) {      parameterIndex=bindUpdate(stmt,document);    }    Iterator<String> keysIter=null;    if (key != null) {      String canonicalKey=collection.canonicalKey(key);      ((TableCollectionImpl)collection).bindKeyColumn(stmt,++parameterIndex,canonicalKey);      if (return_query)       recordNamedBind("key",canonicalKey);    } else     if (keys != null) {      keysIter=keys.iterator();      bindKeys(keysIter,stmt,keys.size(),parameterIndex);      parameterIndex+=keys.size();    }    if (numOfFilterSpecKeys > 0) {      HashSet<String> keysFromFilterSpec=tree.getKeys();      bindKeys(keysFromFilterSpec.iterator(),stmt,keysFromFilterSpec.size(),parameterIndex);      parameterIndex+=keysFromFilterSpec.size();    }    parameterIndex=setStartAndEndTime(stmt,parameterIndex);    parameterIndex=setVersionAndLastModified(stmt,parameterIndex);    if (filterSpec != null) {      parameterIndex=bindJsonExists(stmt,tree,parameterIndex);    }    if (returningClause(terminal)) {      bindReturning(stmt,parameterIndex);    }    boolean isSingleKey=(key != null && !isStartKey);    if (!countOrWrite(terminal) && !isSingleKey) {      stmt.setFetchSize(SODAConstants.BATCH_FETCH_SIZE);      ((OraclePreparedStatement)stmt).setLobPrefetchSize(SODAConstants.LOB_PREFETCH_SIZE);    }    Operation operation=null;    boolean isFilterSpec=(filterSpec != null);    operation=new Operation(stmt,sqltext,headerOnly,isFilterSpec,isSingleKey,collection);    stmt=null;    return operation;  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());    throw SODAUtils.makeExceptionWithSQLText(e,sqltext);  } finally {    for (    String message : SODAUtils.closeCursor(stmt,null)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_SLOT__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);case SRuntimePackage.EXECUTION_SLOT__FQ_NAME:  return FQ_NAME_EDEFAULT == null ? fqName != null : !FQ_NAME_EDEFAULT.equals(fqName);case SRuntimePackage.EXECUTION_SLOT__WRITABLE:return writable != WRITABLE_EDEFAULT;case SRuntimePackage.EXECUTION_SLOT__TYPE:return type != null;}return super.eIsSet(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.PRESENCE__MANDATORY:    return isMandatory();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int numParameters(){  return D;}  }
class C{  public void load(Element element,Object o){  log.error("method with two args invoked");}  }
class C{  public ClientConfig withBulkSize(int bulkSize){  setBulkSize(bulkSize);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.605 -0500",hash_original_method="AEF025906C652297B5F2A3BDE834B061",hash_generated_method="4021A63D2D7B5DC7A8CB5BB56CA6A347") public boolean decodeXWapApplicationId(int startIndex){  if (decodeIntegerValue(startIndex) == true) {    stringValue=null;    return true;  }  return decodeTextString(startIndex);}  }
class C{  public long toNanos(){  return timeUnit.toNanos(length);}  }
class C{  @HLEFunction(nid=0x019B25EB,version=150,checkInsideInterrupt=true) public int __sceSasSetADSR(int sasCore,int voice,int flag,int attack,int decay,int sustain,int release){  checkSasAndVoiceHandlesGood(sasCore,voice);  VoiceADSREnvelope envelope=voices[voice].getEnvelope();  if ((flag & 0x1) != 0)   envelope.AttackRate=attack;  if ((flag & 0x2) != 0)   envelope.DecayRate=decay;  if ((flag & 0x4) != 0)   envelope.SustainRate=sustain;  if ((flag & 0x8) != 0)   envelope.ReleaseRate=release;  if (log.isDebugEnabled()) {    log.debug(String.format("__sceSasSetADSR voice=0x%X: %s",voice,envelope.toString()));  }  return 0;}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (this.getAD_Client_ID() > 0)   this.setAD_Client_ID(0);  if (this.getAD_Org_ID() > 0)   this.setAD_Org_ID(0);  return true;}  }
class C{  public BufferedInputStream(InputStream in){  this(in,DEFAULT_BUFFER_SIZE);}  }
class C{  public Boolean isLatencySensitivitySupported(){  return latencySensitivitySupported;}  }
class C{  public static String hex(int ch,int width){  StringBuffer buf=new StringBuffer();  return appendNumber(buf,ch,16,width).toString();}  }
class C{  @Override protected boolean isValid(Method method){  return super.isValid(method) && method.getName().equals(this.name);}  }
class C{  public void registerForResolve(MethodInfo mi,int pos){  a.add(new Pair<MethodInfo,Integer>(mi,pos));}  }
class C{  private boolean rangeCheck(final int aoff,final int alen){  if (aoff < 0)   throw new IndexOutOfBoundsException();  if (alen < 0)   throw new IndexOutOfBoundsException();  if ((aoff + alen) > len) {    throw new IndexOutOfBoundsException();  }  return true;}  }
class C{  public MekaFrame(String title){  super(title);  performInitialization();}  }
class C{  public VOPricedParameter(VOParameterDefinition voParameterDef){  this.voParameterDef=voParameterDef;}  }
class C{  private static int convert(Automaton.Builder a,State s,IdentityHashMap<State,Integer> visited){  Integer converted=visited.get(s);  if (converted != null) {    return converted;  }  converted=a.createState();  a.setAccept(converted,s.is_final);  visited.put(s,converted);  int i=0;  int[] labels=s.labels;  for (  DaciukMihovAutomatonBuilder.State target : s.states) {    a.addTransition(converted,convert(a,target,visited),labels[i++]);  }  return converted;}  }
class C{  @Override public MemChunkHolder<SysMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<SysMemAllocator> ret=null;  Long addr=null;  if (currentMemory.get() + size > maxStoreCapacity) {    if (m_activegc) {      forceGC();    }  }  if (currentMemory.get() + size <= maxStoreCapacity) {    addr=m_unsafe.allocateMemory(size);  }  if (null != addr && 0 != addr) {    ret=new MemChunkHolder<SysMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }    m_chunksize.put(addr,size);    currentMemory.getAndAdd(size);  }  return ret;}  }
class C{  public void cursorLeft(double units){  this.cursor=this.cursor - units;}  }
class C{  private void obtainStyledAttributes(AttributeSet attrs){  final TypedArray attributes=getContext().obtainStyledAttributes(attrs,R.styleable.HorizontalProgressBarWithNumber);  mTextColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_text_color,DEFAULT_TEXT_COLOR);  mTextSize=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_size,mTextSize);  mReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_reached_color,mTextColor);  mUnReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_color,DEFAULT_COLOR_UNREACHED_COLOR);  mReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_reached_bar_height,mReachedProgressBarHeight);  mUnReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_bar_height,mUnReachedProgressBarHeight);  mTextOffset=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_offset,mTextOffset);  int textVisible=attributes.getInt(R.styleable.HorizontalProgressBarWithNumber_progress_text_visibility,VISIBLE);  if (textVisible != VISIBLE) {    mIfDrawText=false;  }  attributes.recycle();}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  private void validateJdbcStatement(JdbcStatement jdbcStatement,int jdbcStatementIndex){  Assert.notNull(jdbcStatement,"JDBC statement [" + jdbcStatementIndex + "] is required");  Assert.notNull(jdbcStatement.getType(),"JDBC statement [" + jdbcStatementIndex + "] type is required");  validateSqlStatement(jdbcStatement.getSql(),jdbcStatementIndex);}  }
class C{  public void weaponSelected(MechDisplayEvent b){}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_oTabuList=new Operation[m_nTabuList];  int iCurrentTabuList=0;  double fBestScore;  double fCurrentScore=calcScore(bayesNet);  BayesNet bestBayesNet;  fBestScore=fCurrentScore;  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  for (int iRun=0; iRun < m_nRuns; iRun++) {    Operation oOperation=getOptimalOperation(bayesNet,instances);    performOperation(bayesNet,instances,oOperation);    if (oOperation == null) {      throw new Exception("Panic: could not find any step to make. Tabu list too long?");    }    m_oTabuList[iCurrentTabuList]=oOperation;    iCurrentTabuList=(iCurrentTabuList + 1) % m_nTabuList;    fCurrentScore+=oOperation.m_fScore;    if (fCurrentScore > fBestScore) {      fBestScore=fCurrentScore;      copyParentSets(bestBayesNet,bayesNet);    }    if (bayesNet.getDebug()) {      printTabuList();    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;}  }
class C{  public double cdf(int k){  return Probability.poisson(k,this.mean);}  }
class C{  public int compareTo(EcuCodeItem o){  return toString().compareTo(o.toString());}  }
class C{  public void add(int index,Object element){  content.beforeInsert(index,value(element));  modCount++;}  }
class C{  public HttpURL(final String userinfo,final String host,final int port,final String path,final String query,final String fragment) throws URIException {  final StringBuffer buff=new StringBuffer();  if (userinfo != null || host != null || port != -1) {    _scheme=DEFAULT_SCHEME;    buff.append(_default_scheme);    buff.append("://");    if (userinfo != null) {      buff.append(userinfo);      buff.append('@');    }    if (host != null) {      buff.append(URIUtil.encode(host,URI.allowed_host));      if (port != -1 || port != DEFAULT_PORT) {        buff.append(':');        buff.append(port);      }    }  }  if (path != null) {    if (scheme != null && !path.startsWith("/")) {      throw new URIException(URIException.PARSING,"abs_path requested");    }    buff.append(URIUtil.encode(path,URI.allowed_abs_path));  }  if (query != null) {    buff.append('?');    buff.append(URIUtil.encode(query,URI.allowed_query));  }  if (fragment != null) {    buff.append('#');    buff.append(URIUtil.encode(fragment,URI.allowed_fragment));  }  parseUriReference(buff.toString(),true);  checkValid();}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper lineageByProcessId(@RequestParam(value="pid",defaultValue="0") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    List<LineageNodeInfo> lineageNodeInfo=new ArrayList<LineageNodeInfo>();    List<String> dotStringList=getDotStringDAO.getDotString(processId);    for (    String dotString : dotStringList) {      LineageNodeInfo returnLineageNodeInfo=new LineageNodeInfo();      returnLineageNodeInfo.setDotString(dotString);      lineageNodeInfo.add(returnLineageNodeInfo);    }    String finalDot="";    for (    LineageNodeInfo rowLevelDot : lineageNodeInfo) {      finalDot+=rowLevelDot.getDotString().substring(0,rowLevelDot.getDotString().length() - 1);    }    LineageNodeInfo lineageNodeInfo1=new LineageNodeInfo();    lineageNodeInfo1.setDotString(finalDot);    restWrapper=new RestWrapper(lineageNodeInfo1,RestWrapper.OK);    LOGGER.info("lineageByProcessId for processId:" + processId + "from ColumnLineage by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static double cdf(double val,double mu,double sigma,double xi){  val=(val - mu) / sigma;  if (val < 0) {    return 0.;  }  if (xi < 0 && val > -1. / xi) {    return 1.;  }  return 1 - Math.pow(1 + xi * val,-1. / xi);}  }
class C{  @Override public Iterator<Entry<String,Object>> iterator(){  return _fields.entrySet().iterator();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)newValue);  return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps((Integer)newValue);return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)newValue);return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isExplicitCameraPermissionRequired(@NonNull Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    return hasPermissionInManifest(context,"android.permission.CAMERA") && context.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED;  }  return false;}  }
class C{  public Operand popAddress(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isAddress());  return r;}  }
class C{  public ImportClient(String username,String password) throws Exception {  this();  service.setUserCredentials(username,password);}  }
class C{  Prefix(String v,PrefixType t){  value=v;  type=t;  if (t == null) {    throw new Error("Type of prefix should never be null");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person p=getPerson(stack);  SeriesInfo si=getSeriesInfo(stack);  if (si == null || p == null)   return Boolean.FALSE;  return si.hasActorInCharacterImage(p) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void copyHdfsToLocal(final Path hdfsInputPath,final Path localOutputPath) throws IOException {  copyHdfsToLocal(hdfsInputPath,localOutputPath,conf);}  }
class C{  public void showQuickAssist(){  if (quickAssistant == null) {    return;  }  PositionConverter positionConverter=getPositionConverter();  if (positionConverter != null) {    TextPosition cursor=getCursorPosition();    PositionConverter.PixelCoordinates pixelPos=positionConverter.textToPixel(cursor);    quickAssistant.showPossibleQuickAssists(getCursorModel().getCursorPosition().getOffset(),pixelPos.getX(),pixelPos.getY());  }}  }
class C{  public InverseWishartDistribution(double df,double[][] scaleMatrix){  this.df=df;  this.scaleMatrix=scaleMatrix;  this.dim=scaleMatrix.length;  S=new Matrix(scaleMatrix);  computeNormalizationConstant();}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void transformOne(Vec3D point,Vec3D pointOut){  float x, y;  x=m00 * point.x + m01 * point.y + m02 * point.z + m03;  y=m10 * point.x + m11 * point.y + m12 * point.z + m13;  pointOut.z=m20 * point.x + m21 * point.y + m22 * point.z + m23;  pointOut.x=x;  pointOut.y=y;}  }
class C{  public boolean atEnd(){  return currentToken.length() == 0;}  }
class C{  public static IMount createResourceMount(Class modClass,String domain,String subPath){  findCC();  if (computerCraft_createResourceMount != null) {    try {      return (IMount)computerCraft_createResourceMount.invoke(null,modClass,domain,subPath);    } catch (    Exception e) {    }  }  return null;}  }
class C{  public static double[] renormalize(final double[] a){  double s=0;  for (  final double v : a) {    s+=v;  }  s=1 / s;  final double[] p=new double[a.length];  for (int k=0; k < a.length; k++) {    p[k]=s * a[k];  }  return p;}  }
class C{  private boolean validate(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  if (camposDatoForm.getNombre() == null || camposDatoForm.getNombre().trim().equals("")) {    ActionErrors errors=new ActionErrors();    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,"Nombre"));    ErrorsTag.saveErrors(request,errors);    return false;  }  if (camposDatoForm.getEtiquetaXml() == null || camposDatoForm.getEtiquetaXml().trim().equals("")) {    ActionErrors errors=new ActionErrors();    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,"Etiqueta"));    ErrorsTag.saveErrors(request,errors);    return false;  }  return true;}  }
class C{  public Morphing2D(Shape startShape,Shape endShape){  startGeometry=new Geometry(startShape);  endGeometry=new Geometry(endShape);  if (startGeometry.getWindingRule() != endGeometry.getWindingRule()) {    throw new IllegalPathStateException("shapes must use same " + "winding rule");  }  double tvals0[]=startGeometry.getTvals();  double tvals1[]=endGeometry.getTvals();  double masterTvals[]=mergeTvals(tvals0,tvals1);  startGeometry.setTvals(masterTvals);  endGeometry.setTvals(masterTvals);}  }
class C{  public void translate(Pipeline pipeline){  pipeline.traverseTopologically(this);}  }
class C{  public MqttMessageLogger(final String connectionId,final Queue<FormattedMqttMessage> queue,final MessageLog messageLogSettings,final boolean useAsTemplate,final int sleepWhenNoMessages){  this.queue=queue;  this.messageLogSettings=messageLogSettings;  this.sleepWhenNoMessages=sleepWhenNoMessages;  final String file=messageLogSettings.getLogFile();  if (file != null) {    RollingFileAppender appender;    if (useAsTemplate) {      final RollingFileAppender templateAppender=(RollingFileAppender)logger.getAppender("messagelog");      appender=new RollingFileAppender();      appender.setThreshold(templateAppender.getThreshold());      appender.setMaximumFileSize(templateAppender.getMaximumFileSize());      appender.setMaxBackupIndex(templateAppender.getMaxBackupIndex());      appender.setLayout(templateAppender.getLayout());      appender.setFile(file);      appender.activateOptions();      localLogger=Logger.getLogger("pl.baczkowicz.mqttspy.logger.ConnectionSpecificLogger" + connectionId);      localLogger.addAppender(appender);      localLogger.setAdditivity(false);    } else {      appender=(RollingFileAppender)logger.getAppender("messagelog");      appender.setFile(file);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.836 -0500",hash_original_method="F2FA78DDC7B88A7A9FD4B961BDAA52C1",hash_generated_method="63BBF6DB5D50663DB139C7C5EBEDDCFA") private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches() || responseCache == null) {    return;  }  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap());  if (candidate == null) {    return;  }  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    IoUtils.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    IoUtils.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  private void restoreSavedData(Bundle savedInstanceState){  if (null != savedInstanceState) {    mLoginEmailTextView.setText(savedInstanceState.getString(SAVED_LOGIN_EMAIL_ADDRESS));    mLoginPasswordTextView.setText(savedInstanceState.getString(SAVED_LOGIN_PASSWORD_ADDRESS));    mUseCustomHomeServersCheckbox.setChecked(savedInstanceState.getBoolean(SAVED_IS_SERVER_URL_EXPANDED));    mHomeServerText.setText(savedInstanceState.getString(SAVED_HOME_SERVER_URL));    mIdentityServerText.setText(savedInstanceState.getString(SAVED_IDENTITY_SERVER_URL));    mCreationEmailTextView.setText(savedInstanceState.getString(SAVED_CREATION_EMAIL_ADDRESS));    mCreationUsernameTextView.setText(savedInstanceState.getString(SAVED_CREATION_USER_NAME));    mCreationPassword1TextView.setText(savedInstanceState.getString(SAVED_CREATION_PASSWORD1));    mCreationPassword2TextView.setText(savedInstanceState.getString(SAVED_CREATION_PASSWORD2));    mForgotEmailTextView.setText(savedInstanceState.getString(SAVED_FORGOT_EMAIL_ADDRESS));    mForgotPassword1TextView.setText(savedInstanceState.getString(SAVED_FORGOT_PASSWORD1));    mForgotPassword2TextView.setText(savedInstanceState.getString(SAVED_FORGOT_PASSWORD2));    mRegistrationResponse=(RegistrationFlowResponse)savedInstanceState.getSerializable(SAVED_CREATION_REGISTRATION_RESPONSE);    mMode=savedInstanceState.getInt(SAVED_MODE,MODE_LOGIN);    if (savedInstanceState.containsKey(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI)) {      mUniversalLinkUri=savedInstanceState.getParcelable(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI);    }  }}  }
class C{  public static Function<String,String> unexpand(){  return null;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static boolean hasNonBuiltinDecorator(@NotNull PyDecoratable element,@NotNull TypeEvalContext context){  final List<KnownDecorator> knownDecorators=getKnownDecorators(element,context);  if (!allDecoratorsAreKnown(element,knownDecorators)) {    return true;  }  knownDecorators.removeAll(BUILTIN_DECORATORS);  return !knownDecorators.isEmpty();}  }
class C{  public void stop(int timeDelta){  if (this.timeRunning - timeDelta > 0) {    this.timeRunning-=timeDelta;  } else {    this.timeRunning=0;    this.isRunning=false;    this.timeIdle=0;    this.runDirection=1;  }}  }
class C{  public boolean isAbstract(){  return this.modifierKeyword == ModifierKeyword.ABSTRACT_KEYWORD;}  }
class C{  void matsim4UrbanSimShutdown(){  BackupMATSimOutput.prepareHotStart(scenario);  UrbanSimParameterConfigModuleV3 module=ConfigurationUtils.getUrbanSimParameterConfigModule(scenario);  if (module == null) {    log.error("UrbanSimParameterConfigModule module is null. Can't determine if backup option is activated. No backup will be performed.");  } else   if (module.isBackup()) {    BackupMATSimOutput.saveRunOutputs(scenario);  }}  }
class C{  public static TriggerDefinitionDataException convertToApi(org.oscm.internal.types.exception.TriggerDefinitionDataException oldEx){  return convertExceptionToApi(oldEx,TriggerDefinitionDataException.class);}  }
class C{  public em removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:37.460 -0500",hash_original_method="81C3D3C536033DCEF00354E775EF2F98",hash_generated_method="81C3D3C536033DCEF00354E775EF2F98") void onStartTrackingTouch(){  mIsDragging=true;}  }
class C{  public static void main(final String[] args){  final File f=new File(args[0]);  if (f.exists())   FileUtils.deletedelete(f);  try {    final Records t=new Records(f,8);    final byte[] b=new byte[8];    t.add("01234567".getBytes(),0);    t.add("ABCDEFGH".getBytes(),0);    t.add("abcdefgh".getBytes(),0);    t.add("--------".getBytes(),0);    t.add("********".getBytes(),0);    for (int i=0; i < 1000; i++)     t.add("++++++++".getBytes(),0);    t.add("=======0".getBytes(),0);    t.add("=======1".getBytes(),0);    t.add("=======2".getBytes(),0);    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.put(1,"AbCdEfGh".getBytes(),0);    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.get(3,b,0);    System.out.println(UTF8.String(b));    t.get(4,b,0);    System.out.println(UTF8.String(b));    System.out.println("size = " + t.size());    t.cleanLast();    final long start=System.currentTimeMillis();    long c=0;    for (int i=0; i < 100000; i++) {      c=t.size();    }    System.out.println("size() needs " + ((System.currentTimeMillis() - start) / 100) + " nanoseconds");    System.out.println("size = " + c);    t.close();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  @SuppressWarnings("unused") public void endRepeatingElement() throws IOException {  currentElement().repeatingCount=Element.NOT_REPEATING;}  }
class C{  public static VLookup createUser(int WindowNo){  int AD_Column_ID=10443;  try {    Lookup lookup=MLookupFactory.get(Env.getCtx(),WindowNo,0,AD_Column_ID,DisplayType.Search);    return new VLookup("AD_User_ID",false,false,true,lookup);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return null;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (publicId != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(publicId);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(systemId);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void logDebug(String message,Throwable cause){  getLog().log(new Status(IStatus.INFO,PLUGIN_ID,DEBUG_SEVERITY,message,cause));}  }
class C{  public List<GenericEntry> retrieveAllOrganizationUsersByOrgUnit(String customerId,String orgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "?get=children&orgUnitPath="+ URLEncoder.encode(orgUnitPath,"UTF-8")));}  }
class C{  protected String paramString(){  String str=super.paramString() + ",text=" + getText();  if (editable) {    str+=",editable";  }  return str + ",selection=" + getSelectionStart()+ "-"+ getSelectionEnd();}  }
class C{  public HDBSCAN(DistanceMetric dm,int m_pts,VectorCollectionFactory<Vec> vcf){  this(dm,m_pts,m_pts,vcf);}  }
class C{  public boolean free(T obj){  int top=_top.get();  if (top < _freeStack.length()) {    boolean isFree=_freeStack.compareAndSet(top,null,obj);    _top.compareAndSet(top,top + 1);    return isFree;  } else   return false;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static GraphRequest newUploadVideoRequest(AccessToken accessToken,File file,Callback callback) throws FileNotFoundException {  ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);  Bundle parameters=new Bundle(1);  parameters.putParcelable(file.getName(),descriptor);  return new GraphRequest(accessToken,MY_VIDEOS,parameters,HttpMethod.POST,callback);}  }
class C{  public void decrement(int i,int d){  boundsCheck(i);  expandFor(i,d);  vector[i]--;}  }
class C{  public static int hashCode(Object array){  return new HashCodeBuilder().append(array).toHashCode();}  }
class C{  private static byte hexCharsToByte(char highChar,char lowChar){  return (byte)((hexCharToInt(highChar) << 4) + hexCharToInt(lowChar));}  }
class C{  public boolean isProjectTaskDim(){  Object oo=get_Value(COLUMNNAME_IsProjectTaskDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public static boolean classExists(String name){  Object c=classes.get(name);  if (c == null) {    try {      c=Class.forName(name);    } catch (    ClassNotFoundException e) {    }    if (c != null)     classes.put(c,"unused");  }  return c != null;}  }
class C{  public TaskResourceRep exportFileSystem(URI fsId,FileSystemExportParam exportParam){  WebResource rRoot=createRequest(INTERNAL_FILE_ROOT + fsId + EXPORTS);  TaskResourceRep resp=addSignature(rRoot).post(TaskResourceRep.class,exportParam);  return resp;}  }
class C{  public SlidingLadderGenerator(double height){  max=height;}  }
class C{  public String encodeBase64(String value){  return Base64.encodeBase64String(value.getBytes());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFidorea(zone,20,13);}  }
class C{  public void write(BytesRef text,TermsEnum termsEnum) throws IOException {  BlockTermState state=postingsWriter.writeTerm(text,termsEnum,docsSeen);  if (state != null) {    assert state.docFreq != 0;    assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq : "postingsWriter=" + postingsWriter;    sumDocFreq+=state.docFreq;    sumTotalTermFreq+=state.totalTermFreq;    pushTerm(text);    PendingTerm term=new PendingTerm(BytesRef.deepCopyOf(text),state);    pending.add(term);    numTerms++;    if (firstPendingTerm == null) {      firstPendingTerm=term;    }    lastPendingTerm=term;  }}  }
class C{  void build(String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  this.m_namespace=namespace;  this.m_name=name;  this.m_nameAlias=nameAlias;  this.m_elements=elements;  this.m_attributes=attributes;  setElementProcessor(contentHandler);  this.m_classObject=classObject;  if (hasRequired() && m_elements != null) {    int n=m_elements.length;    for (int i=0; i < n; i++) {      XSLTElementDef def=m_elements[i];      if (def != null && def.getRequired()) {        if (m_requiredFound == null)         m_requiredFound=new Hashtable();        m_requiredFound.put(def.getName(),"xsl:" + def.getName());      }    }  }}  }
class C{  public Boolean isVStorageCapable(){  return vStorageCapable;}  }
class C{  private JDlgUploadProducts(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public static boolean intersectSphereSphere(Vector3d centerA,double radiusSquaredA,Vector3d centerB,double radiusSquaredB,Vector4d centerAndRadiusOfIntersectionCircle){  return intersectSphereSphere(centerA.x,centerA.y,centerA.z,radiusSquaredA,centerB.x,centerB.y,centerB.z,radiusSquaredB,centerAndRadiusOfIntersectionCircle);}  }
class C{  private boolean shouldWifiStayAwake(int pluggedType){  if (mSleepPolicy == Settings.Global.WIFI_SLEEP_POLICY_NEVER) {    return true;  } else   if ((mSleepPolicy == Settings.Global.WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED) && (pluggedType != 0)) {    return true;  } else {    return shouldDeviceStayAwake(pluggedType);  }}  }
class C{  public MarshallerContextTestImpl(){  this(null);}  }
class C{  private List<ResolvedMigration> doFindAvailableMigrations() throws CassandraMigrationException {  List<ResolvedMigration> migrations=new ArrayList<ResolvedMigration>(collectMigrations(migrationResolvers));  Collections.sort(migrations,new ResolvedMigrationComparator());  checkForIncompatibilities(migrations);  return migrations;}  }
class C{  public ToStringBuilder append(final byte[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  public boolean isLm(){  return lm;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosVillageBench(zone);}  }
class C{  protected synchronized void updateVisualizerMenus(){  Projection proj=null;  if (svgCanvas.getPlot() instanceof DetailView) {    PlotItem item=((DetailView)svgCanvas.getPlot()).getPlotItem();    proj=item.proj;  }  menubar.removeAll();  menubar.add(filemenu);  ResultHierarchy hier=context.getHierarchy();  Hierarchy<Object> vistree=context.getVisHierarchy();  Result start=context.getBaseResult();  ArrayList<JMenuItem> items=new ArrayList<>();  if (start == null) {    for (Hierarchy.Iter<Result> iter=hier.iterAll(); iter.valid(); iter.advance()) {      if (hier.numParents(iter.get()) == 0) {        recursiveBuildMenu(items,iter.get(),hier,vistree,proj);      }    }  } else {    for (Hierarchy.Iter<Result> iter=hier.iterChildren(start); iter.valid(); iter.advance()) {      recursiveBuildMenu(items,iter.get(),hier,vistree,proj);    }  }  for (  JMenuItem item : items) {    menubar.add(item);  }  menubar.revalidate();  menubar.repaint();}  }
class C{  public ServerEntry addDefaultLdapGroup(String name,List<String> members) throws Exception {  final ServerEntry group=newEntry("ou",name);  group.put("objectClass","top","groupOfNames");  group.put("cn",name);  group.put("ou",name);  for (  String member : members) {    group.add("member",member);  }  addEntry(group);  return group;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public BlockRegionParser(Element element) throws RegionException {  String text=element.getText();  if (text == null || text.isEmpty()) {    text=element.getAttributeValue("location");  }  if (text == null) {    throw new MissingRegionPropertyException("location",element);  }  vector=Numbers.getVector(text);  if (vector == null) {    throw new InvalidRegionPropertyException("location",element);  }}  }
class C{  private static byte CallByteMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallByteMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Byte,false);  return Reflection.unwrapByte(returnObj);}  }
class C{  protected int chooseBulkSplitPoint(int numEntries,int minEntries,int maxEntries){  if (numEntries < minEntries) {    throw new IllegalArgumentException("numEntries < minEntries!");  }  if (numEntries <= maxEntries) {    return numEntries;  } else   if (numEntries < maxEntries + minEntries) {    return (numEntries - minEntries);  } else {    return maxEntries;  }}  }
class C{  public void clearGets(){  gets.clear();}  }
class C{  private static char CallStaticCharMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticCharMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Char);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    createMandatoryColumns();    MSequence seq=MSequence.get(getCtx(),getTableName(),get_TrxName());    if (seq == null || seq.get_ID() == 0)     MSequence.createTableSequence(getCtx(),getTableName(),get_TrxName());  } else {    MSequence seq=MSequence.get(getCtx(),getTableName(),get_TrxName());    if (seq == null || seq.get_ID() == 0)     MSequence.createTableSequence(getCtx(),getTableName(),get_TrxName()); else     if (!seq.getName().equals(getTableName())) {      seq.setName(getTableName());      seq.saveEx();    }  }  return success;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  private void rehash(){  int oldCapacity=m_Table.length;  TableEntry[] oldTable=m_Table;  int newCapacity=oldCapacity * 2 + 1;  TableEntry[] newTable=new TableEntry[newCapacity];  m_Threshold=(int)(newCapacity * m_LoadFactor);  m_Table=newTable;  TableEntry e, old;  for (int i=oldCapacity; i-- > 0; ) {    for (old=oldTable[i]; old != null; ) {      e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newTable[index];      newTable[index]=e;    }  }}  }
class C{  protected void ensureArguments(String operator,int expected,int arguments,TextStream stream){  if (arguments != expected) {    throw new SelfParseException("'" + operator + "' requires "+ expected+ " arguments not: "+ arguments,stream);  }}  }
class C{  private boolean checkBounds(int pos){  if (pos < 0 || pos >= this.registry.length) {    return false;  }  return true;}  }
class C{  public XPathContext(Object owner,boolean recursiveVarContext){  this(recursiveVarContext);  m_owner=owner;  try {    m_ownerGetErrorListener=m_owner.getClass().getMethod("getErrorListener",new Class[]{});  } catch (  NoSuchMethodException nsme) {  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.188 -0500",hash_original_method="ACB2575EE39865032078A7B67E3D5076",hash_generated_method="195A2AA97CBD5879C8602CD14B86D68C") public void countDown(){  sync.releaseShared(1);}  }
class C{  public Vector4d normalize3(){  double invLength=1.0 / Math.sqrt(x * x + y * y + z * z);  x*=invLength;  y*=invLength;  z*=invLength;  w*=invLength;  return this;}  }
class C{  public CrawlDatum initializeSchedule(Text url,CrawlDatum datum){  datum.setFetchTime(System.currentTimeMillis());  datum.setFetchInterval(defaultInterval);  datum.setRetriesSinceFetch(0);  return datum;}  }
class C{  private int mapNSTokens(String pat,int startSubstring,int posOfNSSep,int posOfScan) throws javax.xml.transform.TransformerException {  String prefix="";  if ((startSubstring >= 0) && (posOfNSSep >= 0)) {    prefix=pat.substring(startSubstring,posOfNSSep);  }  String uName;  if ((null != m_namespaceContext) && !prefix.equals("*") && !prefix.equals("xmlns")) {    try {      if (prefix.length() > 0)       uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix); else {        if (false) {          addToTokenQueue(":");          String s=pat.substring(posOfNSSep + 1,posOfScan);          if (s.length() > 0)           addToTokenQueue(s);          return -1;        } else {          uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix);        }      }    } catch (    ClassCastException cce) {      uName=m_namespaceContext.getNamespaceForPrefix(prefix);    }  } else {    uName=prefix;  }  if ((null != uName) && (uName.length() > 0)) {    addToTokenQueue(uName);    addToTokenQueue(":");    String s=pat.substring(posOfNSSep + 1,posOfScan);    if (s.length() > 0)     addToTokenQueue(s);  } else {    m_processor.errorForDOM3(XPATHErrorResources.ER_PREFIX_MUST_RESOLVE,new String[]{prefix});  }  return -1;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((entries == null) ? 0 : entries.hashCode());  return result;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.externalEntityDecl(name,publicId,systemId);}  }
class C{  default ReactiveSeq<T> iterate(final UnaryOperator<T> fn){  return ReactiveSeq.iterate(get(),fn);}  }
class C{  @Inline public static ObjectReference depoison(Word value){  return value.and(Word.one().not()).toAddress().toObjectReference();}  }
class C{  @Override protected void tearDown() throws IOException {  zfile.close();  tempFileName=System.getProperty("java.io.tmpdir");  String separator=System.getProperty("file.separator");  if (tempFileName.charAt(tempFileName.length() - 1) == separator.charAt(0)) {    tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName,"gabba.zip");  } else {    tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName + separator,"gabba.zip");  }  File f=new File(tempFileName);  f.delete();}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);}  }
class C{  public HyperbolicTransformer(Component component){  this(component,new MutableAffineTransformer());}  }
class C{  public SchemaQuery(String id){  super(id,TYPE);}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {}  }
class C{  boolean sameMembers(ArrayList<RelationMemberDescription> rmds1,ArrayList<RelationMemberDescription> rmds2){  if (rmds1 == null) {    return rmds2 == null;  }  if (rmds2 == null) {    return rmds1 == null;  }  if (rmds1.size() != rmds2.size()) {    return false;  }  for (int i=0; i < rmds1.size(); i++) {    RelationMemberDescription rmd1=rmds1.get(i);    RelationMemberDescription rmd2=rmds2.get(i);    if (rmd1 == rmd2) {      continue;    }    if (rmd1 != null && !rmd1.equals(rmd2)) {      return false;    }  }  return true;}  }
class C{  public int[] intersectionJava8(int[] nums1,int[] nums2){  Set<Integer> set=Arrays.stream(nums2).boxed().collect(Collectors.toSet());  return Arrays.stream(nums1).distinct().filter(null).toArray();}  }
class C{  public Type3(Type2 model1,Type4 model2){}  }
class C{  public AppEngineToolsMenuAction(){  super(GctBundle.message("appengine.tools.menu.item.label"),GctBundle.message("appengine.tools.menu.item.label"),GoogleCloudToolsIcons.APP_ENGINE);}  }
class C{  @PostConstruct public void init() throws ConfigException {  try {    _pathLog.init();    super.init();    WriteStream os=_pathLog.getRotateStream().getStream();    _os=os;  } catch (  IOException e) {    throw ConfigException.wrap(e);  }}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs,boolean testTransients){  return reflectionEquals(lhs,rhs,testTransients,null,null);}  }
class C{  private String generateUserName(Candidate<?> candidate1,Candidate<?> candidate2){  candidate1.getUfrag();  candidate2.getUfrag();  return null;}  }
class C{  @SuppressWarnings({"unchecked"}) public void run() throws YarnException, IOException, InterruptedException {  LOG.info("Starting ApplicationMaster");  Credentials credentials=UserGroupInformation.getCurrentUser().getCredentials();  allTokens=YarnUtils.INSTANCE.tokensFromCredentials(credentials);  appSubmitterUgi=YarnUtils.INSTANCE.createUserGroup(credentials);  startTimelineClient(conf);  if (timelineClient != null) {    YarnUtils.INSTANCE.publishApplicationAttemptEvent(timelineClient,appAttemptID.toString(),ContainerEvents.APP_ATTEMPT_START,domainId,appSubmitterUgi);  }  int minSize=getMinContainerMemoryIncrement(conf);  listener=new ContainerRequestListener(timelineClient,appSubmitterUgi,domainId,minSize);  amRMClient=AMRMClientAsync.createAMRMClientAsync(1000,listener);  amRMClient.init(conf);  amRMClient.start();  nmClientAsync=new NMClientAsyncImpl(listener);  nmClientAsync.init(conf);  nmClientAsync.start();  appMasterHostname=NetUtils.getHostname();  RegisterApplicationMasterResponse response=amRMClient.registerApplicationMaster(appMasterHostname,appMasterRpcPort,appMasterTrackingUrl);  int maxMem=response.getMaximumResourceCapability().getMemory();  LOG.info("Max mem capabililty of resources in this cluster " + maxMem);  int maxVCores=response.getMaximumResourceCapability().getVirtualCores();  LOG.info("Max vcores capabililty of resources in this cluster " + maxVCores);  maasHandler=new MaaSHandler(zkQuorum,zkRoot);  try {    maasHandler.start();    maasHandler.getDiscoverer().resetState();    listener.initialize(amRMClient,nmClientAsync,maasHandler.getDiscoverer());  } catch (  Exception e) {    throw new IllegalStateException("Unable to find zookeeper",e);  }  EnumMap<Resources,Integer> maxResources=Resources.toResourceMap(Resources.MEMORY.of(maxMem),Resources.V_CORE.of(maxVCores));  requestQueue=maasHandler.getConfig().createQueue(ImmutableMap.of(ZKQueue.ZK_CLIENT,maasHandler.getClient()));  LOG.info("Ready to accept requests...");  while (true) {    ModelRequest request=requestQueue.dequeue();    if (request == null) {      LOG.error("Received a null request...");      continue;    }    LOG.info("Received request for model " + request.getName() + ":"+ request.getVersion()+ "x"+ request.getNumInstances()+ " containers of size "+ request.getMemory()+ "M at path "+ request.getPath());    EnumMap<Resources,Integer> resourceRequest=Resources.toResourceMap(Resources.MEMORY.of(request.getMemory()),Resources.V_CORE.of(1));    EnumMap<Resources,Integer> resources=Resources.getRealisticResourceRequest(maxResources,Resources.toResource(resourceRequest));    Resource resource=Resources.toResource(resources);    Path appMasterJar=getAppMasterJar();    if (request.getAction() == Action.ADD) {      listener.requestContainers(request.getNumInstances(),resource);      for (int i=0; i < request.getNumInstances(); ++i) {        Container container=listener.getContainers(resource).take();        LOG.info("Found container id of " + container.getId().getContainerId());        executor.execute(new LaunchContainer(conf,zkQuorum,zkRoot,nmClientAsync,request,container,allTokens,appMasterJar));        listener.getContainerState().registerRequest(container,request);      }    } else     if (request.getAction() == Action.REMOVE) {      listener.removeContainers(request.getNumInstances(),request);    }  }}  }
class C{  public List<Candle> findCandlesByContractDateRangeBarSize(final Integer idContract,final ZonedDateTime startDate,final ZonedDateTime endDate,final Integer barSize) throws PersistentModelException {  return m_candleHome.findCandlesByContractDateRangeBarSize(idContract,startDate,endDate,barSize);}  }
class C{  void resize(int newCapacity){  LongEntry<VALUE>[] oldTable=table;  int oldCapacity=oldTable.length;  if (size < threshold || oldCapacity > newCapacity)   return;  LongEntry[] newTable=new LongEntry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
