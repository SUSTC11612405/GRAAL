class C{  public AsyncResult BrowseNextAsync(BrowseNextRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void restoreFromStream(final ByteArrayInputStream bis) throws IOException, ClassNotFoundException {  final ObjectInput os=new ObjectInputStream(bis);  final int size=(Integer)os.readObject();  max_size=size;  items=new Area[size];  for (int i=0; i < size; i++) {    final GeneralPath path=PathSerializer.deserializePath(os);    if (path == null) {      items[i]=null;    } else {      items[i]=new Area(path);    }  }}  }
class C{  public int bitsLeft(){  return (byteLimit - byteOffset) * 8 - bitOffset;}  }
class C{  public void cleanup(){  pleaseDie=true;  if (threads != null)   threads.killThreads();  pleaseDie=false;  threads=null;}  }
class C{  public SelectClause addWithAsProvidedName(String propertyName,String asName){  selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName));  return this;}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=HashUtilities.hashCode(hash,this.g1);  hash=HashUtilities.hashCode(hash,this.g2);  hash=HashUtilities.hashCode(hash,this.g3);  return hash;}  }
class C{  public static void sendEmail(Context context,final String[] receivers,final String subject,final String text,final File... files){  sendEmail(context,receivers,subject,text,null,null,null,files);}  }
class C{  public void addBody(Body argBody){  bodies.add(argBody);  if (bodies.size() == 1) {    bodyA=argBody;  }  if (bodies.size() == 2) {    bodyB=argBody;  }}  }
class C{  boolean checkCameraSize(CameraOptions cameraId){  boolean sizeAvailable=false;  Camera camera=null;  Method method=getCameraOpenMethod();  if (method != null) {    try {      camera=(Camera)method.invoke(camera,new Object[]{cameraId.getValue()});    } catch (    Exception e) {      camera=Camera.open();    }  } else {    camera=Camera.open();  }  if (camera == null) {    return false;  }  Parameters param=camera.getParameters();  List<Camera.Size> sizes=param.getSupportedPreviewSizes();  for (  Camera.Size size : sizes) {    if ((size.width == H264Config.QVGA_WIDTH && size.height == H264Config.QVGA_HEIGHT) || (size.width == H264Config.CIF_WIDTH && size.height == H264Config.CIF_HEIGHT) || (size.width == H264Config.VGA_WIDTH && size.height == H264Config.VGA_HEIGHT)) {      sizeAvailable=true;      break;    }  }  camera.release();  return sizeAvailable;}  }
class C{  public static void loadTimeSeriesConfiguration(List<TimeSeriesConfiguration> configuration){  for (  TimeSeriesConfiguration tsConfig : configuration) {    TimeSeriesType tsType=getTimeSeriesType(tsConfig.getTsClass());    tsType.setTtl(tsConfig.getTtl());  }}  }
class C{  public void onButtonNoClicked(View view){  startActivity(new Intent(getApplicationContext(),MainActivity.class));  setResult(RESULT_CANCELED);  finish();}  }
class C{  public static <T>T loadSpringBean(URL springXmlUrl,String beanName) throws IgniteException {  try {    return IgnitionEx.loadSpringBean(springXmlUrl,beanName);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  public boolean intersectsRange(Date start,Date end){  return intersectsRange(new DateRange(start,end));}  }
class C{  public UniversalDataSource removeAndRelease(String name,boolean reduce) throws InterruptedException, ReplicatorException {  UniversalDataSource ds=remove(name);  if (name != null) {    if (reduce) {      ds.reduce();    }    ds.release();  }  return ds;}  }
class C{  public DefaultTransformFactory(String name){  this.name=requireNonNull(name);  this.transforms=new ConcurrentHashMap<>();}  }
class C{  protected boolean isInMigration(){  boolean result=false;  for (  ContainerVm vm : getContainerVmList()) {    if (vm.isInMigration()) {      result=true;      break;    }  }  return result;}  }
class C{  public ClientMessageSerializer(){  this(new SimpleStringProperty(),new SimpleObjectProperty<>());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static RevocationHash calculateRevocationHash(byte[] seed,int depth,int childNumber){  byte[] childseed=seed;  for (int i=0; i < depth; i++) {    childseed=Tools.hashSecret(childseed);  }  if (childNumber == 0) {    return new RevocationHash(depth,childNumber,childseed,null);  }  byte[] childseedWithNumber=new byte[24];  System.arraycopy(childseed,0,childseedWithNumber,0,20);  ByteBuffer buffer=ByteBuffer.allocate(4);  buffer.putInt(childNumber);  buffer.flip();  System.arraycopy(buffer.array(),0,childseedWithNumber,20,4);  byte[] secret=Tools.hashSecret(childseedWithNumber);  byte[] secretHash=Tools.hashSecret(secret);  return new RevocationHash(depth,childNumber,secret,secretHash);}  }
class C{  protected Size2D arrangeNN(Graphics2D g2){  Range max=new Range(0.0,Float.MAX_VALUE);  return arrangeRR(g2,max,max);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.912 -0500",hash_original_method="DDAF9FE3FD0F9348B3B8E9E8698F0E22",hash_generated_method="34B2FB0DEA43CFFC00CEB0B13E0786BC") public void put(String hostname,Object value,boolean isPositive){  String propertyName=isPositive ? "networkaddress.cache.ttl" : "networkaddress.cache.negative.ttl";  long defaultTtlNanos=isPositive ? DEFAULT_POSITIVE_TTL_NANOS : DEFAULT_NEGATIVE_TTL_NANOS;  long expiryNanos=System.nanoTime() + defaultTtlNanos;  cache.put(hostname,new AddressCacheEntry(value,expiryNanos));}  }
class C{  public TransactionAuthorizationObject evaluate(ContainerRequest request){  Matcher urlSegments=URL_PARSER.matcher(request.getPath(true));  if (!urlSegments.matches()) {    logger.debug("Request path did not follow the expected URL pattern. ({})",request.getPath(true));    return DEFAULT_OBJECT;  }  String kind=urlSegments.group(KIND_GROUP);  String action=urlSegments.group(ACTION_GROUP);  if (null == action) {    action=EMPTY;  }  Rule[] ruleList=getEvaluationRules().get(kind.toLowerCase());  if (null == ruleList) {    logger.debug("Did not find a rule matching the KIND. ({})",kind);    return DEFAULT_OBJECT;  }  for (  Rule rule : ruleList) {    if (rule.acceptedMethods.matcher(request.getMethod()).matches() && rule.acceptedActions.matcher(action).matches()) {      logger.debug("matched rule: {} {} {} {}",rule.acceptedMethods,rule.acceptedActions,rule.kind,rule.strategy);      return new TransactionAuthorizationObject(rule.kind,rule.strategy,urlSegments.group(ID_GROUP));    }  }  return DEFAULT_OBJECT;}  }
class C{  boolean isInside(LatinKey key,int x,int y){  final int code=key.codes[0];  if (code == KEYCODE_SHIFT || code == KEYCODE_DELETE) {    y-=key.height / 10;    if (code == KEYCODE_SHIFT) {      if (key.x == 0) {        x+=key.width / 6;      } else {        x-=key.width / 6;      }    }    if (code == KEYCODE_DELETE)     x-=key.width / 6;  } else   if (code == LatinIME.ASCII_SPACE) {    y+=LatinKeyboard.sSpacebarVerticalCorrection;    if (mLanguageSwitcher.getLocaleCount() > 1) {      if (mCurrentlyInSpace) {        int diff=x - mSpaceDragStartX;        if (Math.abs(diff - mSpaceDragLastDiff) > 0) {          updateLocaleDrag(diff);        }        mSpaceDragLastDiff=diff;        return true;      } else {        boolean insideSpace=key.isInsideSuper(x,y);        if (insideSpace) {          mCurrentlyInSpace=true;          mSpaceDragStartX=x;          updateLocaleDrag(0);        }        return insideSpace;      }    }  } else   if (mPrefLetterFrequencies != null) {    if (mPrefLetterX != x || mPrefLetterY != y) {      mPrefLetter=0;      mPrefDistance=Integer.MAX_VALUE;    }    final int[] pref=mPrefLetterFrequencies;    if (mPrefLetter > 0) {      if (DEBUG_PREFERRED_LETTER) {        if (mPrefLetter == code && !key.isInsideSuper(x,y)) {          Log.d(TAG,"CORRECTED !!!!!!");        }      }      return mPrefLetter == code;    } else {      final boolean inside=key.isInsideSuper(x,y);      int[] nearby=getNearestKeys(x,y);      List<Key> nearbyKeys=getKeys();      if (inside) {        if (inPrefList(code,pref)) {          mPrefLetter=code;          mPrefLetterX=x;          mPrefLetterY=y;          for (int i=0; i < nearby.length; i++) {            Key k=nearbyKeys.get(nearby[i]);            if (k != key && inPrefList(k.codes[0],pref)) {              final int dist=distanceFrom(k,x,y);              if (dist < (int)(k.width * OVERLAP_PERCENTAGE_LOW_PROB) && (pref[k.codes[0]] > pref[mPrefLetter] * 3)) {                mPrefLetter=k.codes[0];                mPrefDistance=dist;                if (DEBUG_PREFERRED_LETTER) {                  Log.d(TAG,"CORRECTED ALTHOUGH PREFERRED !!!!!!");                }                break;              }            }          }          return mPrefLetter == code;        }      }      for (int i=0; i < nearby.length; i++) {        Key k=nearbyKeys.get(nearby[i]);        if (inPrefList(k.codes[0],pref)) {          final int dist=distanceFrom(k,x,y);          if (dist < (int)(k.width * OVERLAP_PERCENTAGE_HIGH_PROB) && dist < mPrefDistance) {            mPrefLetter=k.codes[0];            mPrefLetterX=x;            mPrefLetterY=y;            mPrefDistance=dist;          }        }      }      if (mPrefLetter == 0) {        return inside;      } else {        return mPrefLetter == code;      }    }  }  if (mCurrentlyInSpace)   return false;  return key.isInsideSuper(x,y);}  }
class C{  public int conf(){  String s=soot.PhaseOptions.getString(options,"conf");  if (s.equalsIgnoreCase("ofcg"))   return conf_ofcg;  if (s.equalsIgnoreCase("cha"))   return conf_cha;  if (s.equalsIgnoreCase("cha-aot"))   return conf_cha_aot;  if (s.equalsIgnoreCase("ofcg-aot"))   return conf_ofcg_aot;  if (s.equalsIgnoreCase("cha-context-aot"))   return conf_cha_context_aot;  if (s.equalsIgnoreCase("ofcg-context-aot"))   return conf_ofcg_context_aot;  if (s.equalsIgnoreCase("cha-context"))   return conf_cha_context;  if (s.equalsIgnoreCase("ofcg-context"))   return conf_ofcg_context;  throw new RuntimeException("Invalid value " + s + " of phase option conf");}  }
class C{  public void start(){  if (!isStarted) {    isStarted=true;    postInvalidateOnAnimation();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static Error uncaughtException(Throwable ex){  if (ex instanceof Error)   throw (Error)ex;  if (ex instanceof RuntimeException)   throw (RuntimeException)ex;  throw newInternalError("uncaught exception",ex);}  }
class C{  private void error(@Nullable Element e,@NonNull String msg,Object... args){  if (e == null) {    messager.printMessage(Diagnostic.Kind.ERROR,String.format(msg,args));  } else {    messager.printMessage(Diagnostic.Kind.ERROR,String.format(msg,args),e);  }}  }
class C{  public void testMid() throws Exception {  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B",new String[]{"A:B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A::B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2",new String[]{"1.2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B",new String[]{"A.B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1..2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A..B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2",new String[]{"1,2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,,2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.:B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:.B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,.2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.,2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B_A:B",new String[]{"A:B_A:B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B_A::B",new String[]{"A:B_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2_1.2",new String[]{"1.2_1.2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B_A.B",new String[]{"A.B_A.B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2_1..2",new String[]{"1.2_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B_A..B",new String[]{"A.B_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2_1,2",new String[]{"1,2_1,2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2_1,,2",new String[]{"1,2_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"C_A.:B",new String[]{"C_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"C_A:.B",new String[]{"C_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"3_1,.2",new String[]{"3_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"3_1.,2",new String[]{"3_1","2"});}  }
class C{  private void fireTableValueChange(TableValueChangeEvent event){  for (  TableValueChangeListener listener : m_listeners) {    listener.tableValueChange(event);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigma=0;  double recipRoot2PiTimesSigma;  double twoSigmaSqr;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma < 0.5) {    sigma=0.5;  } else   if (sigma > 20) {    sigma=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma=1 / (Math.sqrt(2 * Math.PI) * sigma);    twoSigmaSqr=2 * sigma * sigma;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma * Math.exp(-1 * (i * i) / twoSigmaSqr);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    int cellsOnEitherSide=(int)Math.floor((double)filterSize / 2);    double term1=-1 / (Math.PI * sigma * sigma* sigma* sigma);    double term2=0;    double term3=0;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - cellsOnEitherSide;        y=row - cellsOnEitherSide;        term2=1 - ((x * x + y * y) / twoSigmaSqr);        term3=Math.exp(-(x * x + y * y) / twoSigmaSqr);        weight=term1 * term2 * term3;        weights[a]=weight;        dX[a]=x;        dY[a]=y;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Type type(){  return type;}  }
class C{  public static CaseInsensitiveArrayList sortNoExtras(CaseInsensitiveArrayList unsorted){  List<String> subs=new CaseInsensitiveArrayList(unsorted);  CaseInsensitiveArrayList finals=new CaseInsensitiveArrayList();  for (  String subreddit : specialSubreddits) {    if (subs.contains(subreddit)) {      subs.remove(subreddit);      finals.add(subreddit);    }  }  java.util.Collections.sort(subs,String.CASE_INSENSITIVE_ORDER);  finals.addAll(subs);  return finals;}  }
class C{  public void performBookKeeping(Map<String,StorageSystemViewObject> scannedSystemsNativeGuidsMap,List<URI> providerList){  StorageSystem storageSystem=null;  List<StorageSystem> systemsToPersist=new ArrayList<StorageSystem>();  List<StorageSystem> systemsToCreate=new ArrayList<StorageSystem>();  Set<String> scannedSystemNativeGuidKeySet;synchronized (scannedSystemsNativeGuidsMap) {    scannedSystemNativeGuidKeySet=new HashSet(scannedSystemsNativeGuidsMap.keySet());  }  Set<URI> scannedProviderList=new HashSet<URI>(providerList);  Map<URI,List<String>> providersToUpdate=new HashMap<URI,List<String>>();  for (  String scannedSystemNativeGuid : scannedSystemNativeGuidKeySet) {    try {      _logger.info("Found during scan : scannedSystemNativeGuid {}",scannedSystemNativeGuid);      List<StorageSystem> systems=CustomQueryUtility.getActiveStorageSystemByNativeGuid(_dbClient,scannedSystemNativeGuid);      if (DecommissionedResource.checkDecommissioned(_dbClient,scannedSystemNativeGuid,StorageSystem.class)) {        scannedSystemsNativeGuidsMap.remove(scannedSystemNativeGuid);        _logger.info("Storage system {} was decommissioned and cannot be added to Vipr",scannedSystemNativeGuid);        continue;      }      if (null == systems || systems.isEmpty()) {        storageSystem=createStorageSystem(scannedSystemsNativeGuidsMap.get(scannedSystemNativeGuid),scannedSystemNativeGuid,providersToUpdate);        if (storageSystem != null) {          systemsToCreate.add(storageSystem);          _logger.info("Added new storage system to be created to the create list with Native Guid: {}",storageSystem.getNativeGuid());        }      }    } catch (    Exception e) {      _logger.error(e.getMessage(),e);      _logger.error("Exception while creating new system: {} due to {}",storageSystem != null ? storageSystem.getId() : "N/A",e.getCause());    }  }  try {    _dbClient.createObject(systemsToCreate);  } catch (  DatabaseException ex) {    _logger.error("Exception occurred while persisting new StorageSystems due to ",ex);  }  updateActiveProviderDetailsInDbSystem(scannedSystemsNativeGuidsMap,systemsToPersist,scannedProviderList,providersToUpdate);  persistAllSystemsAndProviders(systemsToPersist,getSMISProvidersWithUpdatedSystems(providersToUpdate));}  }
class C{  public V put(char[] text,V value){  if (ignoreCase) {    CharacterUtils.toLowerCase(text,0,text.length);  }  int slot=getSlot(text,0,text.length);  if (keys[slot] != null) {    final V oldValue=values[slot];    values[slot]=value;    return oldValue;  }  keys[slot]=text;  values[slot]=value;  count++;  if (count + (count >> 2) > keys.length) {    rehash();  }  return null;}  }
class C{  public boolean isSeparator(){  return mIcon == -1;}  }
class C{  protected void diagnose(){  System.err.print("Found multistep iterators: " + this.getLength() + "  ");  MultistepExprHolder next=this;  while (null != next) {    System.err.print("" + next.m_stepCount);    next=next.m_next;    if (null != next)     System.err.print(", ");  }  System.err.println();}  }
class C{  public void testSelectingUser_SetsUserAndOpensTentSelection() throws Exception {  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));  mController.onUserSelected(user);  verify(mMockUserManager).setActiveUser(user);  verify(mMockUi).showTentSelectionScreen();}  }
class C{  public static void loadFromDatabase(final Window parent,final INaviModule module){  final LoadFromDatabaseThread thread=new LoadFromDatabaseThread(module);  CProgressDialog.showEndless(parent,"Loading data from the database" + " ...",thread);  final Exception exception=thread.getException();  if (exception != null) {    CUtilityFunctions.logException(exception);    final String message="E00199: " + "Could not load module data";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not load the module data of module '%s' from the database.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module data was not loaded from the database."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  public void beHealthy(){}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  private void insertRow(int currentRow){}  }
class C{  public void testQParserEmptyInput() throws Exception {  SolrQueryRequest req=req();  final String[] parsersTested=new String[]{OldLuceneQParserPlugin.NAME,LuceneQParserPlugin.NAME,DisMaxQParserPlugin.NAME,ExtendedDismaxQParserPlugin.NAME};  for (  String defType : parsersTested) {    for (    String qstr : new String[]{null,""}) {      QParser parser=null;      try {        parser=QParser.getParser(qstr,defType,req);      } catch (      Exception e) {        throw new RuntimeException("getParser excep using defType=" + defType + " with qstr="+ qstr,e);      }      Query q=parser.parse();      assertNull("expected no query",q);    }  }}  }
class C{  public static void addSentenceKeyWordsMeta(Vertex question,Vertex answer,String keywords,Network network){  if (keywords == null || keywords.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.KEYWORD,network);  } else {    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.internalRemoveRelationships(Primitive.KEYWORD);      List<String> words=Utils.getWords(keywords);      for (      String keyword : words) {        Vertex word=network.createWord(keyword);        meta.addRelationship(Primitive.KEYWORD,word);        word.addRelationship(Primitive.INSTANTIATION,Primitive.KEYWORD);        word.addRelationship(Primitive.KEYQUESTION,question);        Vertex lowercase=network.createWord(keyword.toLowerCase());        if (lowercase != word) {          meta.addRelationship(Primitive.KEYWORD,lowercase);          lowercase.addRelationship(Primitive.INSTANTIATION,Primitive.KEYWORD);          lowercase.addRelationship(Primitive.KEYQUESTION,question);        }      }    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.internalRemoveRelationships(Primitive.KEYWORD);          List<String> words=Utils.getWords(keywords);          for (          String keyword : words) {            Vertex word=network.createWord(keyword);            meta.addRelationship(Primitive.KEYWORD,word);            word.addRelationship(Primitive.KEYQUESTION,question);            Vertex lowercase=network.createWord(keyword.toLowerCase());            if (lowercase != word) {              meta.addRelationship(Primitive.KEYWORD,lowercase);              lowercase.addRelationship(Primitive.KEYQUESTION,question);            }          }        }      }    }  }}  }
class C{  static void errorInvalidEntity(String systemID,int lineNr,String entity) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Invalid entity: `&" + entity + ";'");}  }
class C{  protected void onBeforeClusterRendered(Cluster<ClusterStatus> cluster,MarkerOptions markerOptions){  int bucket=getBucket(cluster);  BitmapDescriptor descriptor=mIcons.get(bucket);  if (descriptor == null) {    mColoredCircleBackground.getPaint().setColor(getColor(bucket));    descriptor=BitmapDescriptorFactory.fromBitmap(mIconGenerator.makeIcon(getClusterText(bucket)));    mIcons.put(bucket,descriptor);  }  markerOptions.icon(descriptor);}  }
class C{  public Impurity(int partition,int attribute,Instances inst,int k){  Values values=new Values(0,inst.numInstances() - 1,inst.classIndex(),inst);  attr=attribute;  n=inst.numInstances();  sd=values.sd;  va=values.va;  values=new Values(0,partition,inst.classIndex(),inst);  nl=partition + 1;  sl=values.sum;  s2l=values.sqrSum;  values=new Values(partition + 1,inst.numInstances() - 1,inst.classIndex(),inst);  nr=inst.numInstances() - partition - 1;  sr=values.sum;  s2r=values.sqrSum;  order=k;  this.incremental(0,0);}  }
class C{  @Override public void cancel(){  cancel(false);}  }
class C{  public Builder connectTimeout(Duration connectTimeout){  this.connectTimeout=connectTimeout;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.194 -0500",hash_original_method="B84E7088610242E6493E719E7ABEF1E6",hash_generated_method="A006FE7A8FF3CC1C6DAB8DB5F9C7CA0D") public boolean isRect(RectF rect){  if (rect != null) {    rect.addTaint(getTaint());    return rect.getTaintBoolean();  }  return false;}  }
class C{  public static final void writeListXml(List val,OutputStream out) throws XmlPullParserException, IOException {  XmlSerializer serializer=Xml.newSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeListXml(val,null,serializer);  serializer.endDocument();}  }
class C{  @Provides @Config("brainframe") static String provideBrainframe(ConsoleDebug debug,UserService userService,@Config("projectId") String projectId){switch (debug) {case PRODUCTION:    return String.format("https://%s.storage.googleapis.com/%s",projectId,userService.isUserLoggedIn() && userService.isUserAdmin() ? "brainframe-map.html" : "brainframe.html");case DEBUG:case RAW:case TEST:  return "/assets/html/insecure-brainframe.html";default :throw new AssertionError(debug.toString());}}  }
class C{  public Restaurant(){  super();}  }
class C{  public R proceed(){  return fn.apply(param1,param2);}  }
class C{  boolean closeOutbound() throws SSLException {  if (sslEngine == null || sslEngine.isOutboundDone()) {    return false;  }  sslEngine.closeOutbound();  createOutNetBuffer(0);  SSLEngineResult result;  for (; ; ) {    result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());    if (result.getStatus() == Status.BUFFER_OVERFLOW) {      outNetBuffer.capacity(outNetBuffer.capacity() << 1);      outNetBuffer.limit(outNetBuffer.capacity());    } else {      break;    }  }  if (result.getStatus() != Status.CLOSED) {    throw new SSLException("Improper close state: " + result);  }  outNetBuffer.flip();  return true;}  }
class C{  protected void onPlaybackEnded(){  stopPlayback();  pollRepeater.stop();}  }
class C{  @Override public void stop(){}  }
class C{  public static void println(float x){  out.println(x);}  }
class C{  public final int bytesProduced(){  return bytesProduced;}  }
class C{  @CanIgnoreReturnValue @Override public boolean put(@Nullable K key,@Nullable V value){  addNode(key,value,null);  return true;}  }
class C{  private void plugRemoteControlDisplaysIntoClient_syncRcStack(IRemoteControlClient rcc){  final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();  while (displayIterator.hasNext()) {    final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();    try {      rcc.plugRemoteControlDisplay(di.mRcDisplay,di.mArtworkExpectedWidth,di.mArtworkExpectedHeight);      if (di.mWantsPositionSync) {        rcc.setWantsSyncForDisplay(di.mRcDisplay,true);      }    } catch (    RemoteException e) {      Log.e(TAG,"Error connecting RCD to RCC in RCC registration",e);    }  }}  }
class C{  public synchronized Enumeration<String> engineAliases(){  token.ensureValid();  return Collections.enumeration(new HashSet<String>(aliasMap.keySet()));}  }
class C{  public boolean isEmpty(){  return this.xmlFile == null;}  }
class C{  public TimeSeriesPlotGui(final GenericFrame frame,final TimeSeriesPlotComponent component){  super(frame,component);  actionManager=new PlotActionManager(this);  timeSeriesPanel=new TimeSeriesPlotPanel(component.getModel());  createAttachMenuBar();  this.setLayout(new BorderLayout());  add("Center",timeSeriesPanel);}  }
class C{  public static Map<String,Object> createForScm(String displayName,String defaultValue,boolean isPartOfIdentity,boolean isRequired,boolean isSecure,String displayOrder){  Map<String,Object> fieldProperties=new HashMap<String,Object>();  fieldProperties.put("display-name",displayName);  fieldProperties.put("default-value",defaultValue);  fieldProperties.put("part-of-identity",isPartOfIdentity);  fieldProperties.put("required",isRequired);  fieldProperties.put("secure",isSecure);  fieldProperties.put("display-order",displayOrder);  return fieldProperties;}  }
class C{  public char peek(int index){  if (this.pointer + index + 1 > this.buffer.length()) {    update();  }  return this.buffer.charAt(this.pointer + index);}  }
class C{  protected void clearOutEvents(){}  }
class C{  private JMessageDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public final void testFactoryMethodWithContextAndResourceIdParameters(){  CharSequence errorMessage=getContext().getText(android.R.string.cancel);  Validator<Object> validator=new AbstractValidatorImplementation("foo",true);  NegateValidator<Object> negateValidator=NegateValidator.create(getContext(),android.R.string.cancel,validator);  assertEquals(errorMessage,negateValidator.getErrorMessage());  assertEquals(validator,negateValidator.getValidator());}  }
class C{  public static int spinUpCannon(IGame cgame,WeaponAttackAction atk){  int threshold=12;  int test, final_spin;  Entity shooter;  Mounted weapon;  WeaponType wtype=new WeaponType();  shooter=atk.getEntity(cgame);  weapon=shooter.getEquipment(atk.getWeaponId());  wtype=(WeaponType)shooter.getEquipment(atk.getWeaponId()).getType();  if (!((wtype.getAmmoType() == AmmoType.T_AC_ULTRA) || (wtype.getAmmoType() == AmmoType.T_AC_ULTRA_THB) || (wtype.getAmmoType() == AmmoType.T_AC_ROTARY))) {    return 0;  }  threshold=atk.toHit(cgame).getValue();  weapon.setMode("Single");  final_spin=0;  if ((threshold == TargetRoll.IMPOSSIBLE) || (threshold == TargetRoll.AUTOMATIC_FAIL)) {    return final_spin;  }  test=Compute.d6(2);  if (test >= (threshold + 1)) {    final_spin=1;    if ((wtype.getAmmoType() == AmmoType.T_AC_ULTRA) || (wtype.getAmmoType() == AmmoType.T_AC_ULTRA_THB)) {      weapon.setMode("Ultra");    }    if (wtype.getAmmoType() == AmmoType.T_AC_ROTARY) {      weapon.setMode("2-shot");    }  }  if (wtype.getAmmoType() == AmmoType.T_AC_ROTARY) {    if (test >= (threshold + 2)) {      final_spin=2;      weapon.setMode("4-shot");    }    if (test >= (threshold + 3)) {      final_spin=3;      weapon.setMode("6-shot");    }  }  return final_spin;}  }
class C{  public boolean isResetOnNrc(){  return resetOnNrc;}  }
class C{  public static int findFirstCompletelyVisibleItemPosition(RecyclerView.LayoutManager layoutManager){  if (layoutManager instanceof StaggeredGridLayoutManager) {    return ((StaggeredGridLayoutManager)layoutManager).findFirstCompletelyVisibleItemPositions(null)[0];  } else {    return ((LinearLayoutManager)layoutManager).findFirstCompletelyVisibleItemPosition();  }}  }
class C{  private void testAccessible(String name,Accessible a,boolean isPublic,boolean isProtected,boolean isPrivate,boolean isPackagePrivate){  System.out.println("  Testing: " + name + " modifiers = "+ Integer.toBinaryString(a.modifiers()));  if (a.isPublic() != isPublic) {    failure("**Name = " + name + " expecting: "+ isPublic+ " isPublic() was: "+ a.isPublic());  }  if (a.isPrivate() != isPrivate) {    failure("**Name = " + name + " expecting: "+ isPrivate+ " isPrivate() was: "+ a.isPrivate());  }  if (a.isProtected() != isProtected) {    failure("**Name = " + name + " expecting: "+ isProtected+ " isProtected() is: "+ a.isProtected());  }  if (a.isPackagePrivate() != isPackagePrivate) {    failure("**Name = " + name + " expecting: "+ isPackagePrivate+ " isPackagePrivate() is: "+ a.isPackagePrivate());  }}  }
class C{  public boolean isPositive(){  return hi > 0.0 || (hi == 0.0 && lo > 0.0);}  }
class C{  public boolean add(int key){  int i=0;  while (i < index) {    if (keys[i] == key) {      return false;    }    ++i;  }  if (index >= keys.length) {    System.out.println("Check me: Growing Dump Set Ordered to:" + keys.length * 2);    keys=Arrays.copyOf(keys,keys.length * 2);  }  keys[index]=key;  ++index;  return true;}  }
class C{  public final int exec(String command) throws Exception {  final Runtime r=Runtime.getRuntime();  final Process process=r.exec(command);  return processOutput(process);}  }
class C{  private Object toColumn(TokenType tokenType,String value,ComparisonOperator op,Class<?> columnType){  if (op.equals(ComparisonOperator.CONTAINS) && tokenType.equals(TokenType.STRING)) {    return "%" + value + "%";  } else   if (tokenType.equals(TokenType.ID)) {    return new ColumnImpl(this.tableName,parseEntityAttribute(value));  } else   if (!tokenType.equals(TokenType.ID) && op.equals(ComparisonOperator.IN)) {    return EntityQualifierUtils.parseList(value);  } else   if (tokenType.equals(TokenType.NUMBER)) {    if (columnType.equals(Long.class) || columnType.equals(long.class)) {      return Long.parseLong(value);    } else     if (columnType.equals(int.class) || columnType.equals(Integer.class)) {      return Integer.parseInt(value);    } else {      return Double.parseDouble(value);    }  } else   if (op.equals(ComparisonOperator.LIKE) && value.equals(".*")) {    return "%";  } else {    if ((boolean.class.equals(columnType) || Boolean.class.equals(columnType)) && value != null) {      return Boolean.valueOf(value);    }    return value;  }}  }
class C{  private E unlinkFirst(Node<E> f){  final E element=f.item;  final Node<E> next=f.next;  f.item=null;  f.next=null;  first=next;  if (next == null)   last=null; else   next.prev=null;  size--;  modCount++;  return element;}  }
class C{  @Deprecated public boolean isLazy(){  return false;}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  nameBox.mouseClicked(par1,par2,par3);}  }
class C{  public static void testRef2Prim(){  for (  Wrapper from : Wrapper.values()) {    for (    Wrapper to : Wrapper.values()) {      if (from == Wrapper.VOID || to == Wrapper.VOID || to == Wrapper.OBJECT) {        continue;      }      Object value=RANDOM_VALUES.get(from);      for (      TestConversionMode mode : TestConversionMode.values()) {        if (from != Wrapper.OBJECT) {          Object convValue=to.wrap(value);          testConversion(mode,from.wrapperType(),to.primitiveType(),value,convValue,false,null);        } else {          testConversion(mode,from.wrapperType(),to.primitiveType(),value,null,true,ClassCastException.class);        }      }    }  }}  }
class C{  @Override public boolean hasFunctionalArmAES(int location){  boolean hasAES=false;  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (  Mounted mounted : getMisc()) {    if ((mounted.getLocation() == location) && mounted.getType().hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM) && !mounted.isDestroyed()&& !mounted.isBreached()&& !mounted.isMissing()) {      hasAES=true;    } else     if ((mounted.getLocation() == location) && mounted.getType().hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {      return false;    }  }  return hasAES;}  }
class C{  public void loadTargets(String path){  try {    LineNumberReader in=new LineNumberReader(new InputStreamReader(new URL(path).openStream()));    StringWriter out=new StringWriter();    String line=in.readLine();    while (line != null) {      out.write(line + "\n");      line=in.readLine();    }    in.close();    out.close();    extensionTargets=out.toString();  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  public void testNoApiNameAttribute(){  doTest();}  }
class C{  public boolean positionExists(int position){  int size=getItemCount() - 1;  return position <= size;}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public int invalidate(String key){  CacheNode<T> node=pmap.get(key);  if (node != null) {    remove(node);    return 1;  } else   return 0;}  }
class C{  protected CoordinateReferenceSystem createCRS(final String code){  if (code == null)   return null;  for (  final Object object : ReferencingFactoryFinder.getCRSAuthorityFactories(null)) {    final CRSAuthorityFactory factory=(CRSAuthorityFactory)object;    try {      return (CoordinateReferenceSystem)factory.createObject(code);    } catch (    final FactoryException e2) {    }catch (    final Exception e) {      ExceptionMonitor.show(wktText.getShell(),e,"Error creating CRS object, trying more...");    }  }  try {    final Preferences child=findNode(code);    if (child != null) {      final String wkt=child.get(WKT_ID,null);      if (wkt != null) {        try {          return ReferencingFactoryFinder.getCRSFactory(null).createFromWKT(wkt);        } catch (        final Exception e) {          ExceptionMonitor.show(wktText.getShell(),e);          child.removeNode();        }      }    }  } catch (  final Exception e) {    ExceptionMonitor.show(wktText.getShell(),e);  }  return null;}  }
class C{  protected void writeLocation(String location) throws IOException {  writeObject(location);}  }
class C{  public boolean remove(final long key){  if (key == FREE_KEY) {    m_hasFreeKey=false;    return true;  }  int ptr=(int)(Tools.phiMix(key) & m_mask);  long e=m_data[ptr];  if (e == FREE_KEY) {    return false;  } else   if (e == key) {    --m_size;    shiftKeys(ptr);    return true;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      return false;    } else     if (e == key) {      --m_size;      shiftKeys(ptr);      return true;    }  }}  }
class C{  public IMatrix _opAppendHorizontally(final IScope scope,final IMatrix b){  final GamaFloatMatrix a=this;  final GamaFloatMatrix aprime=(GamaFloatMatrix)a._reverse(scope);  final GamaFloatMatrix bprime=(GamaFloatMatrix)((GamaFloatMatrix)b)._reverse(scope);  final GamaFloatMatrix c=(GamaFloatMatrix)aprime.opAppendVertically(scope,bprime);  final GamaFloatMatrix cprime=(GamaFloatMatrix)c._reverse(scope);  return cprime;}  }
class C{  private void doubleCapacity(){  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  public static Response createRefreshResponse(int lifetime){  Response refreshSuccessResponse=new Response();  try {    refreshSuccessResponse.setMessageType(Message.REFRESH_RESPONSE);    LifetimeAttribute lifetimeAttribute=AttributeFactory.createLifetimeAttribute(lifetime);    refreshSuccessResponse.putAttribute(lifetimeAttribute);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return refreshSuccessResponse;}  }
class C{  public boolean isRepeats(){  return repeats;}  }
class C{  @Override public boolean autoCommitFailureClosesAllResultSets(){  debugCodeCall("autoCommitFailureClosesAllResultSets");  return false;}  }
class C{  public FDModel loadModel(String filename){  URI uri=FileHelper.createURI(filename);  if (uri.segmentCount() > 1) {    return loadModel(uri.lastSegment(),uri.trimSegments(1).toString() + "/");  } else {    return loadModel(filename,"");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.957 -0500",hash_original_method="0B7AAA10EE83BBF7A614BF8D8C7A7C84",hash_generated_method="2DC0FEE32095D2D025A52D980AD843AC") public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  public static boolean isProtected(int flags){  return (flags & AccProtected) != 0;}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (typingTarget != null) {    beginEdit(typingTarget);    updateCursor(getView(),e.getPoint());  }}  }
class C{  private void writeCrashInfoToFile(Throwable ex){  StringBuilder sb=new StringBuilder();  sb.append("crash log by JustWeEngine \n");  for (  Map.Entry<String,String> entry : info.entrySet()) {    sb.append(entry.getKey()).append("---------->").append(entry.getValue()).append("\n");  }  Writer writer=new StringWriter();  PrintWriter printWriter=new PrintWriter(writer);  ex.printStackTrace(printWriter);  Throwable cause=ex.getCause();  while (cause != null) {    cause.printStackTrace(printWriter);    cause=cause.getCause();  }  printWriter.close();  String result=writer.toString();  sb.append(result);  writeLog(sb.toString());}  }
class C{  private final String stdToLocal(String name){  return name.replace('/',java.io.File.separatorChar);}  }
class C{  public boolean isHA(){  return ha;}  }
class C{  public void ensureCapacity(int minCapacity){  delegate.ensureCapacity(minCapacity);}  }
class C{  private void cleanupAlreadyLocked(IBinder session){  ThreadUtils.assertOnUiThread();  SessionParams params=mSessionParams.get(session);  if (params == null)   return;  mSessionParams.remove(session);  IBinder binder=params.mCallback.asBinder();  binder.unlinkToDeath(params.mDeathRecipient,0);  if (mPrerender != null && session.equals(mPrerender.mSession)) {    prerenderUrl(session,null,null);  }}  }
class C{  @Override protected void find(boolean findMore){  BestMatchFinder bmf=new BestMatchFinder(pattern);  List<MapEntity> results=getResults();  BoundingBox bb=new BoundingBox(position,nextRadius);  if (!results.isEmpty())   bmf.checkMatchQuality(results.get(0));  if (mode.equals(Mode.ENTITY) || mode.equals(Mode.NODE)) {    for (    MapNode node : getStorage().getPois(bb)) {      int match=bmf.checkMatchQuality(node);      if (match >= 0) {        if (match > 0) {          results.clear();          bmf.useAsReference(node);        }        if (position.insertInAscendingDistanceOrder(results,node))         if (results.size() > 100)         results.remove(99);      }    }  }  if (mode.equals(Mode.ENTITY) || mode.equals(Mode.WAY)) {    for (    MapWay way : getStorage().getWays(bb)) {      int match=bmf.checkMatchQuality(way);      if (match >= 0) {        if (match > 0) {          results.clear();          bmf.useAsReference(way);        }        if (position.insertInAscendingDistanceOrder(results,way))         if (results.size() > 100)         results.remove(99);      }    }  }  if (mode.equals(Mode.ADDRESS)) {    List<MapEntity> iResults=getIntermediateResults();    StringTokenizer tokenizer=new StringTokenizer(pattern,",");    String placeName=null;    String wayName=null;    if (tokenizer.hasMoreElements())     placeName=tokenizer.nextToken();    if (tokenizer.hasMoreElements())     wayName=tokenizer.nextToken().trim();    if (placeName != null && !findMore) {      for (      MapNode place : getStorage().getPlaces(placeName)) {        position.insertInAscendingDistanceOrder(iResults,place);        if (iResults.size() > 100)         iResults.remove(99);      }      nextRadius=-1;    }    if (iResults.size() == 1 && wayName != null) {      MapNode place=(MapNode)iResults.get(0);      findWay(wayName,new Position(place.getLat(),place.getLon()),null);    }  } else {    nextRadius*=2;    if (results.isEmpty() && getIntermediateResults().isEmpty() && nextRadius <= getMaxRadius())     find(true);  }}  }
class C{  public void write(OutputStream out,Integer indent) throws TransformerException {  write(out,indent,null);}  }
class C{  public synchronized void moveOffsets(){  if (!overflowLock) {    overflowLock=true;    for (    Offset offset : offsetPoints.values()) {      offset.move();    }    overflowLock=false;  }}  }
class C{  public boolean openFile(final String path){  if (D)   LOG.info("openFile: path = " + path);synchronized (this) {    if (path == null) {      return false;    }    if (mCursor == null) {      Uri uri=Uri.parse(path);      long id=-1;      try {        id=Long.valueOf(uri.getLastPathSegment());      } catch (      NumberFormatException ex) {      }      if (id != -1 && path.startsWith(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI.toString())) {        updateCursor(uri);      } else       if (id != -1 && path.startsWith(MediaStore.Files.getContentUri("external").toString())) {        updateCursor(id);      } else {        String where=MediaStore.Audio.Media.DATA + "=?";        String[] selectionArgs=new String[]{path};        updateCursor(where,selectionArgs);      }      try {        if (mCursor != null) {          ensurePlayListCapacity(1);          mPlayListLen=1;          mPlayList[0]=mCursor.getLong(IDCOLIDX);          mPlayPos=0;        }      } catch (      final UnsupportedOperationException ignored) {      }    }    mFileToPlay=path;    if (mPlayer != null) {      mPlayer.setDataSource(mFileToPlay);      if (mPlayer.isInitialized()) {        mOpenFailedCounter=0;        return true;      }    }    stop(true);    return false;  }}  }
class C{  public boolean isSkype(){  return isProtocol(SKYPE);}  }
class C{  public void writeBinary(BinaryRawWriterEx writer){  writer.writeString(catalog);  writer.writeString(schema);  writer.writeString(table);  writer.writeString(tableType);}  }
class C{  public IntObjectHashMap(){  this(defaultCapacity);}  }
class C{  protected void saveDomainAs(){  Domain domain=system.getDomain();  JFileChooser fileChooser=new JFileChooser();  fileChooser.setCurrentDirectory(domain.getSourceFile().getParentFile());  fileChooser.setDialogTitle("Save the domain in file ...");  fileChooser.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {    File fileToSave=fileChooser.getSelectedFile();    log.info("Saving domain in " + domain.getSourceFile().getName());    saveDomain(fileToSave);    if (editorTab.getShownFile().equals(domain.getSourceFile())) {      domain.setSourceFile(fileToSave);    }    system.displayComment("Dialogue domain saved in " + fileToSave);    system.refreshDomain();  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public void testRelationshipSetMatcherMatchBackwardForward(){  MultipleDirectedRelationFinder original=new MultipleDirectedRelationFinder();  original.addRelation(MockRelation.CALL,true,false);  RelationshipSetAdapter relSetAdapter=new RelationshipSetAdapter("Temporary",original,relations);  assertFalse("Must not match backward",relSetAdapter.matchBackward(MockRelation.CALL));  assertTrue("Must match forward",relSetAdapter.matchForward(MockRelation.CALL));}  }
class C{  public T scrolled(OnScrollListener listener){  if (view instanceof AbsListView) {    setScrollListener().forward(listener);  }  return self();}  }
class C{  private JSONObject moveDirectory(File srcDir,File destinationDir) throws IOException, JSONException, InvalidModificationException, NoModificationAllowedException, FileExistsException {  if (destinationDir.exists() && destinationDir.isFile()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (isCopyOnItself(srcDir.getAbsolutePath(),destinationDir.getAbsolutePath())) {    throw new InvalidModificationException("Can't move itself into itself");  }  if (destinationDir.exists()) {    if (destinationDir.list().length > 0) {      throw new InvalidModificationException("directory is not empty");    }  }  if (!srcDir.renameTo(destinationDir)) {    copyDirectory(srcDir,destinationDir);    if (destinationDir.exists()) {      removeDirRecursively(srcDir);    } else {      throw new IOException("moved failed");    }  }  return makeEntryForFile(destinationDir);}  }
class C{  public static void fill(float[] a,float val){  fill(a,0,a.length,val);}  }
class C{  public void testNodeWithAttributeFailure() throws Exception {  try (Ignite node1=startNodeWithCache()){    GridStringLogger log=new GridStringLogger();    try (Ignite node2=startGrid("node2",getConfiguration("node2",true,log))){      fail();    } catch (    IgniteException e) {      assertTrue(log.toString().contains("Class not found for continuous query remote filter " + "[name=org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilter]"));    }  } }  }
class C{  public BlockAdapter(Block<DisplayItem> block){  super();  mBlock=block;  if (mBlock.blocks == null) {    mHasBlocks=false;  } else {    mHasBlocks=true;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MORE_CODE___ANONYMOUS_MORE_CODE_11:    getAnonymous_moreCode_1_1().clear();  getAnonymous_moreCode_1_1().addAll((Collection<? extends Anonymous_moreCode_1_>)newValue);return;case UmplePackage.MORE_CODE___CODE_1:setCode_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void removedAt(int removedIndex){  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.removedAt(removedIndex)) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  public EditCanvasAction(Application app,DrawingEditor editor){  super(editor);  this.app=app;  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.623 -0500",hash_original_method="A22E0BB42B0E543666A17B7B6AC4EDC6",hash_generated_method="8B634D2C9D16E7C7160326010210C3DD") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onSignalStrengthsChanged(SignalStrength signalStrength){}  }
class C{  private void accessProgramBlockBreakpoint(ProgramBlock pb,int lineNumber,int op,BPINSTRUCTION_STATUS status){  if (pb instanceof FunctionProgramBlock) {    FunctionProgramBlock fpb=(FunctionProgramBlock)pb;    for (    ProgramBlock pbc : fpb.getChildBlocks())     accessProgramBlockBreakpoint(pbc,lineNumber,op,status);  } else   if (pb instanceof WhileProgramBlock) {    WhileProgramBlock wpb=(WhileProgramBlock)pb;    this.accesBreakpointInstruction(wpb.getPredicate(),lineNumber,op,status);    for (    ProgramBlock pbc : wpb.getChildBlocks())     accessProgramBlockBreakpoint(pbc,lineNumber,op,status);  } else   if (pb instanceof IfProgramBlock) {    IfProgramBlock ipb=(IfProgramBlock)pb;    this.accesBreakpointInstruction(ipb.getPredicate(),lineNumber,op,status);    for (    ProgramBlock pbc : ipb.getChildBlocksIfBody())     accessProgramBlockBreakpoint(pbc,lineNumber,op,status);    if (!ipb.getChildBlocksElseBody().isEmpty()) {      for (      ProgramBlock pbc : ipb.getChildBlocksElseBody())       accessProgramBlockBreakpoint(pbc,lineNumber,op,status);    }  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock fpb=(ForProgramBlock)pb;    this.accesBreakpointInstruction(fpb.getFromInstructions(),lineNumber,op,status);    this.accesBreakpointInstruction(fpb.getToInstructions(),lineNumber,op,status);    this.accesBreakpointInstruction(fpb.getIncrementInstructions(),lineNumber,op,status);    for (    ProgramBlock pbc : fpb.getChildBlocks())     accessProgramBlockBreakpoint(pbc,lineNumber,op,status);  } else {    this.accesBreakpointInstruction(pb.getInstructions(),lineNumber,op,status);  }}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  static public void assertNull(Object object){  assertNull(null,object);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public TrueTypeFont(String platname,Object nativeNames,int fIndex,boolean javaRasterizer,boolean useFilePool) throws FontFormatException {  super(platname,nativeNames);  useJavaRasterizer=javaRasterizer;  fontRank=Font2D.TTF_RANK;  try {    verify(useFilePool);    init(fIndex);    if (!useFilePool) {      close();    }  } catch (  Throwable t) {    close();    if (t instanceof FontFormatException) {      throw (FontFormatException)t;    } else {      throw new FontFormatException("Unexpected runtime exception.");    }  }  Disposer.addObjectRecord(this,disposerRecord);}  }
class C{  public Builder database(String database){  this.innerDataBaseName=database;  return this;}  }
class C{  public Anonymous_invariant_2_ createAnonymous_invariant_2_(){  Anonymous_invariant_2_Impl anonymous_invariant_2_=new Anonymous_invariant_2_Impl();  return anonymous_invariant_2_;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.109 -0500",hash_original_method="6AFE9CBA6B56E35C594D2C594C957D14",hash_generated_method="EBE6484005C937078EB2F255949EA23A") public static HeaderParser createParser(String line) throws ParseException {  String headerName=Lexer.getHeaderName(line);  String headerValue=Lexer.getHeaderValue(line);  if (headerName == null || headerValue == null)   throw new ParseException("The header name or value is null",0);  Class parserClass=(Class)parserTable.get(SIPHeaderNamesCache.toLowerCase(headerName));  if (parserClass != null) {    try {      Constructor cons=(Constructor)parserConstructorCache.get(parserClass);      if (cons == null) {        cons=parserClass.getConstructor(constructorArgs);        parserConstructorCache.put(parserClass,cons);      }      Object[] args=new Object[1];      args[0]=line;      HeaderParser retval=(HeaderParser)cons.newInstance(args);      return retval;    } catch (    Exception ex) {      InternalErrorHandler.handleException(ex);      return null;    }  } else {    return new HeaderParser(line);  }}  }
class C{  public GridSessionCollisionSpiSelfTest(){  super(true);}  }
class C{  public GroupShardsIterator(List<ShardIterator> iterators){  CollectionUtil.timSort(iterators);  this.iterators=iterators;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String composeMetocSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getCategory(),1);  appendFieldValue(sb,this.getStaticDynamic(),2);  appendFieldValue(sb,this.getFunctionId(),6);  appendFieldValue(sb,this.getGraphicType(),3);  sb.append(UNUSED_POSITION_CODE);  sb.append(UNUSED_POSITION_CODE);  return sb.toString();}  }
class C{  public static void arc(double x,double y,double radius,double angle1,double angle2){  if (radius < 0)   throw new IllegalArgumentException("arc radius must be nonnegative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  List<String> parse(String cqlScriptSource){  return linesToStatements(readLines(new StringReader(cqlScriptSource)));}  }
class C{  public boolean hasPagination(){  return requestScope.getPagination() != null;}  }
class C{  public FunctionInput(Category category,String categoryName,String name,int type,String additionalInformation,boolean customIcon){  this.category=category;  this.categoryName=categoryName;  this.name=name;  this.type=type;  this.additionalInformation=additionalInformation;  this.useCustomIcon=customIcon;}  }
class C{  public static Date str2Date(String s,String format){  Date dRet=null;  SimpleDateFormat sdf=null;  try {    sdf=new SimpleDateFormat(format);    dRet=sdf.parse(s);    return dRet;  } catch (  ParseException pe) {  }  try {    sdf=new SimpleDateFormat(DATE_FORMAT);    dRet=sdf.parse(s);    return dRet;  } catch (  ParseException pe) {  }  try {    sdf=new SimpleDateFormat(DATE_FORMAT_1);    dRet=sdf.parse(s);    return dRet;  } catch (  ParseException pe) {  }  try {    sdf=new SimpleDateFormat(DATE_FORMAT_2);    dRet=sdf.parse(s);    return dRet;  } catch (  ParseException pe) {  }  return dRet;}  }
class C{  public static Selection empty(){  return new Selection(null,null,null);}  }
class C{  public ComputeTaskCancelledException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void addProject(DelphiProject newProject){  projects.add(newProject);}  }
class C{  public Rectangle2D shrink(Rectangle2D area,Rectangle2D result){  if (result == null) {    result=new Rectangle2D.Double();  }  result.setRect(area.getX() + this.left,area.getY() + this.top,area.getWidth() - this.left - this.right,area.getHeight() - this.top - this.bottom);  return result;}  }
class C{  public static boolean isRoot(){  String binPath="/system/bin/su";  String xBinPath="/system/xbin/su";  if (new File(binPath).exists() && isExecutable(binPath))   return true;  if (new File(xBinPath).exists() && isExecutable(xBinPath))   return true;  return false;}  }
class C{  public ReplyException(Throwable cause){  super(cause);}  }
class C{  public static FormattingModel createFormattingModelForPsiFile(PsiFile file,@NotNull Block rootBlock,CodeStyleSettings settings){  return myFactory.createFormattingModelForPsiFile(file,rootBlock,settings);}  }
class C{  public static boolean contains(final long[] array,final long valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  @LogMessageDoc(message="Inter-switch link removed:",explanation="A previously detected link between two openflow switches no longer exists, " + "use show link to find current status") protected void deleteLinks(List<Link> links,String reason,List<LDUpdate> updateList){  NodePortTuple srcNpt, dstNpt;  List<LDUpdate> linkUpdateList=new ArrayList<LDUpdate>();  lock.writeLock().lock();  try {    for (    Link lt : links) {      srcNpt=new NodePortTuple(lt.getSrc(),lt.getSrcPort());      dstNpt=new NodePortTuple(lt.getDst(),lt.getDstPort());      if (switchLinks.containsKey(lt.getSrc())) {        switchLinks.get(lt.getSrc()).remove(lt);        if (switchLinks.get(lt.getSrc()).isEmpty())         this.switchLinks.remove(lt.getSrc());      }      if (this.switchLinks.containsKey(lt.getDst())) {        switchLinks.get(lt.getDst()).remove(lt);        if (this.switchLinks.get(lt.getDst()).isEmpty())         this.switchLinks.remove(lt.getDst());      }      if (this.portLinks.get(srcNpt) != null) {        this.portLinks.get(srcNpt).remove(lt);        if (this.portLinks.get(srcNpt).isEmpty())         this.portLinks.remove(srcNpt);      }      if (this.portLinks.get(dstNpt) != null) {        this.portLinks.get(dstNpt).remove(lt);        if (this.portLinks.get(dstNpt).isEmpty())         this.portLinks.remove(dstNpt);      }      LinkInfo info=this.links.remove(lt);      LinkType linkType=getLinkType(lt,info);      linkUpdateList.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),linkType,UpdateOperation.LINK_REMOVED));      eventCategory.newEventWithFlush(new DirectLinkEvent(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),"link-deleted::" + reason));      removeLinkFromStorage(lt);      if (linkType == ILinkDiscovery.LinkType.DIRECT_LINK) {        log.info("Inter-switch link removed: {}",lt);        notifier.postNotification("Inter-switch link removed: " + lt.toString());      } else       if (log.isTraceEnabled()) {        log.trace("Deleted link {}",lt);      }    }  }  finally {    if (updateList != null)     linkUpdateList.addAll(updateList);    updates.addAll(linkUpdateList);    lock.writeLock().unlock();  }}  }
class C{  public byte[] asByteArray(){  byte[] result=new byte[16];  toByteArray(result);  return result;}  }
class C{  public AccountHeaderBuilder withResetDrawerOnProfileListClick(boolean resetDrawerOnProfileListClick){  this.mResetDrawerOnProfileListClick=resetDrawerOnProfileListClick;  return this;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public boolean isExternalRoleZoneLevel(String role){  return (role.equalsIgnoreCase(Role.SYSTEM_ADMIN.toString()) || role.equalsIgnoreCase(Role.SECURITY_ADMIN.toString()) || role.equalsIgnoreCase(Role.SYSTEM_MONITOR.toString())|| role.equalsIgnoreCase(Role.SYSTEM_AUDITOR.toString()));}  }
class C{  public String sqlObjectDetail_setColumnNullable(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_setColumnNullable(catalogName,schemaName,tableName,columnName);}  }
class C{  public FastPartitioner(IPartitionTokenScanner scanner,String[] legalContentTypes){  fScanner=scanner;  fLegalContentTypes=TextUtilities.copy(legalContentTypes);  fPositionCategory=CONTENT_TYPES_CATEGORY + hashCode();  fPositionUpdater=new DefaultPositionUpdater(fPositionCategory);}  }
class C{  public void readBoolean() throws IOException {  if (tag != ASN1Constants.TAG_BOOLEAN) {    throw expected("boolean");  }  if (length != 1) {    throw new ASN1Exception("Wrong length for ASN.1 boolean at [" + tagOffset + "]");  }  readContent();}  }
class C{  public static String extractNetworkPortionAlt(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  boolean haveSeenPlus=false;  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (c == '+') {      if (haveSeenPlus) {        continue;      }      haveSeenPlus=true;    }    if (isDialable(c)) {      ret.append(c);    } else     if (isStartsPostDial(c)) {      break;    }  }  return ret.toString();}  }
class C{  public void dropActionChanged(DropTargetDragEvent dtde){}  }
class C{  @Override public void closeElement(){  current=(XMLElement)stack.pop();}  }
class C{  public void addFileSuffix(String fileSuffix){  if (fileSuffix == "") {    throw new IllegalArgumentException("fileSuffix is an empty string");  }  mFileSuffixList.add(fileSuffix);}  }
class C{  protected boolean codecSupportsSparsity(){  return true;}  }
class C{  public static <T,S>Tuple<T,S> of(final T first,final S second){  return new Tuple<>(first,second);}  }
class C{  public UpdaterActivity(){}  }
class C{  public AlignmentAction(String nm,int a){  super(nm);  this.a=a;}  }
class C{  public void buildAdditionalPortInfo(JSONObject oper,JSONObject portClassHierarchy,JSONObject portTypesWithSchemaClasses){  try {    JSONArray ports=oper.getJSONArray(OperatorDiscoverer.PORT_TYPE_INFO_KEY);    for (int i=0; i < ports.length(); i++) {      JSONObject port=ports.getJSONObject(i);      String portType=port.optString("type");      if (portType == null) {        continue;      }      if (typeGraph.size() == 0) {        buildTypeGraph();      }      try {        LinkedList<String> queue=new LinkedList<>();        queue.add(portType);        while (!queue.isEmpty()) {          String currentType=queue.remove();          if (portClassHierarchy.has(currentType)) {            continue;          }          List<String> immediateParents=typeGraph.getParents(currentType);          if (immediateParents == null) {            portClassHierarchy.put(currentType,new ArrayList<String>());            continue;          }          portClassHierarchy.put(currentType,immediateParents);          queue.addAll(immediateParents);        }      } catch (      JSONException e) {        LOG.warn("building port type hierarchy {}",portType,e);      }      if (portTypesWithSchemaClasses.has(portType)) {        continue;      }      if (portType.equals("byte") || portType.equals("short") || portType.equals("char")|| portType.equals("int")|| portType.equals("long")|| portType.equals("float")|| portType.equals("double")|| portType.equals("java.lang.String")|| portType.equals("java.lang.Object")) {        continue;      }      if (port.has("typeArgs")) {        continue;      }      boolean hasSchemaClasses=false;      List<String> instantiableDescendants=typeGraph.getInstantiableDescendants(portType);      if (instantiableDescendants != null) {        for (        String descendant : instantiableDescendants) {          try {            if (typeGraph.isInstantiableBean(descendant)) {              hasSchemaClasses=true;              break;            }          } catch (          JSONException ex) {            LOG.warn("checking descendant is instantiable {}",descendant);          }        }      }      portTypesWithSchemaClasses.put(portType,hasSchemaClasses);    }  } catch (  JSONException e) {    LOG.error("JSON Exception {}",e);    throw new RuntimeException(e);  }}  }
class C{  public void reloadData(ActionEvent ae){  services=null;}  }
class C{  public boolean abort() throws LoginException {  if (!isAuthSucceeded())   return false;  if (isAuthSucceeded() && !isCommitSucceeded())   reset(); else   logout();  return true;}  }
class C{  public void close() throws IOException {  while (!this.atEndOfData) {    char ch=this.reader.read();    if (ch == '?') {      char ch2=this.reader.read();      if (ch2 == '>') {        this.atEndOfData=true;      }    }  }}  }
class C{  public void add(final CreatureRespawnPoint point){  respawnPoints.add(point);}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public int size(){  return entries.size();}  }
class C{  public void loadHeaders(PreparedStatementWrapper ps){  if (m_interface.getHeaderType() != null && m_interface.getHeaderTypes() != null) {    s_logger.log(Level.FINE,"loadHeaders",new Object[]{getHeaderTypes(),getObjectType(),m_name,m_parent.getDirection()});    m_headers=new HashMap<Integer,DBObjectDefinition>();    m_interface.loadHeaders(m_headers,s_parameters,s_logger,s_dbEngine,m_parent,m_name,ps);    int counter=m_headers.size();    String logObject=getHeaderTypes();    if (counter == 1)     logObject=getHeaderType();    s_logger.log(Level.FINE,"headersLoaded",new Object[]{Integer.toString(counter),logObject});  }}  }
class C{  public void swipeFlingOccurred(long time,float x,float y,float tx,float ty,float vx,float vy){  if (!mInSwipe)   return;  fling(time,x,y,vx,vy);  onUpOrCancel(time);}  }
class C{  private String readFile(String fileName) throws IOException {  FileReader inputStreamReader=null;  BufferedReader bufferedReader=null;  inputStreamReader=new FileReader(fileName);  bufferedReader=null;  bufferedReader=new BufferedReader(inputStreamReader);  String newLine="\n";  StringBuffer sb=new StringBuffer();  String line;  while ((line=bufferedReader.readLine()) != null) {    sb.append(line + newLine);  }  if (null != bufferedReader)   bufferedReader.close();  if (null != inputStreamReader)   inputStreamReader.close();  return sb.toString();}  }
class C{  public static String signatureMethodName(String sig){  int pos1=sig.indexOf(": ") + 2;  int pos2=sig.indexOf("(",pos1);  pos1=sig.lastIndexOf(" ",pos2) + 1;  return sig.substring(pos1,pos2);}  }
class C{  public EntityMigrationBuilder removeAssociation(String association,String defaultReference){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RemoveAssociation(association,defaultReference)));  return this;}  }
class C{  static void assertAwareCompatibility(Class aware,Object obj){  Class[] valid=awareCompatibility.get(aware);  if (valid == null) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown Aware interface: " + aware);  }  for (  Class v : valid) {    if (v.isInstance(obj)) {      return;    }  }  StringBuilder builder=new StringBuilder();  builder.append("Invalid 'Aware' object: ").append(obj);  builder.append(" -- ").append(aware.getName());  builder.append(" must be an instance of: ");  for (  Class v : valid) {    builder.append("[").append(v.getName()).append("] ");  }  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,builder.toString());}  }
class C{  private ImmutableMap<GracePeriod,BillingEvent> canonicalizeGracePeriods(ImmutableMap<GracePeriod,? extends BillingEvent> gracePeriods){  ImmutableMap.Builder<GracePeriod,BillingEvent> builder=new ImmutableMap.Builder<>();  for (  Map.Entry<GracePeriod,? extends BillingEvent> entry : gracePeriods.entrySet()) {    builder.put(GRACE_PERIOD_KEY_STRIPPER.apply(entry.getKey()),BILLING_EVENT_ID_STRIPPER.apply(entry.getValue()));  }  return builder.build();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasStreamIdsExt(){  return hasRepeatingExtension(GphotoStreamId.class);}  }
class C{  public ParticleFiltering(int N,DynamicBayesianNetwork dbn,Randomizer randomizer){  this.randomizer=randomizer;  this.priorSampler=new PriorSample(this.randomizer);  initPersistent(N,dbn);}  }
class C{  public void close() throws IOException {  guard.close();  RandomAccessFile localRaf=raf;  if (localRaf != null) {synchronized (localRaf) {      raf=null;      localRaf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  static float convertToLinearQuality(float quality){  if (quality <= 0.0F) {    quality=0.01F;  }  if (quality > 1.00F) {    quality=1.00F;  }  if (quality < 0.5F) {    quality=0.5F / quality;  } else {    quality=2.0F - (quality * 2.0F);  }  return quality;}  }
class C{  public void resolve(MethodScope scope){  super.resolve(scope);  internalResolve(scope);}  }
class C{  protected void listFromMenuExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AreasForm areasForm=(AreasForm)form;  areasForm.setAreasABorrar(null);  setReturnActionFordward(request,mapping.findForward("listFromMenu"));}  }
class C{  public void checkNames(Element element){  nameCheckScanner.scan(element);}  }
class C{  private void readFromStorage(){  File file=new File(PATH);  BufferedReader inputStream=null;  FileInputStream input=null;  try {    input=new FileInputStream(file);    inputStream=new BufferedReader(new InputStreamReader(input));    String test=inputStream.readLine();    this.textView.setText(String.format(Locale.getDefault(),getString(R.string.text_read),test));  } catch (  IOException e) {    Log.e(TAG,"Unable to read from storage",e);    this.textView.setText(R.string.text_failure_read);  } finally {    close(input);    close(inputStream);  }}  }
class C{  public static URL makeUrl(String url){  try {    return new URL(url);  } catch (  MalformedURLException e) {    throw new RuntimeException(e);  }}  }
class C{  private static void test(String algo,int keyLen) throws Exception {  Provider p=Security.getProvider("SunJCE");  System.out.println("=>Testing " + algo + " cipher with "+ keyLen+ "-bit key");  KeyGenerator kg=KeyGenerator.getInstance(algo,p);  kg.init(keyLen);  SecretKey key=kg.generateKey();  System.out.println("Generated key with algorithm " + key.getAlgorithm());  Cipher cipher=Cipher.getInstance(algo,p);  System.out.println("Requested cipher with algorithm " + algo);  cipher.init(Cipher.ENCRYPT_MODE,key);  System.out.println("Initialization succeeded as expected");}  }
class C{  public static LikeExpression notLike(String propertyName,Object value,String escape){  return new LikeExpression(getPropExpr(propertyName),new ConstantExpression(value),new ConstantExpression(escape),true);}  }
class C{  public static void throwException(Throwable e){  BaseTestCase.<RuntimeException>throwThis(e);}  }
class C{  public HttpClient(){}  }
class C{  @Override public InventoryMessage makeInventoryMessage(byte[] payloadBytes,int length) throws ProtocolException {  return new InventoryMessage(params,payloadBytes,this,length);}  }
class C{  public boolean rowDeleted() throws SQLException {  return crsInternal.rowDeleted();}  }
class C{  void reset(){  blocksRead=F.t(new LongAdder8(),new LongAdder8());  blocksWritten=F.t(new LongAdder8(),new LongAdder8());  bytesRead=F.t(new LongAdder8(),new LongAdder8());  bytesWritten=F.t(new LongAdder8(),new LongAdder8());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.679 -0500",hash_original_method="0FED75D6D7B207E32712BBEB8093B91D",hash_generated_method="6FC8ED0338E954EB3F74DF47F1EE5440") public ServerKeyExchange(HandshakeIODataStream in,int length,int keyExchange) throws IOException {  int size=in.readUint16();  bytes1=in.read(size);  par1=new BigInteger(1,bytes1);  this.length=2 + bytes1.length;  size=in.readUint16();  bytes2=in.read(size);  par2=new BigInteger(1,bytes2);  this.length+=2 + bytes2.length;  if (keyExchange != CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    size=in.readUint16();    bytes3=in.read(size);    par3=new BigInteger(1,bytes3);    this.length+=2 + bytes3.length;  } else {    par3=null;    bytes3=null;  }  if (keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT && keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon) {    size=in.readUint16();    hash=in.read(size);    this.length+=2 + hash.length;  } else {    hash=null;  }  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerKeyExchange");  }}  }
class C{  public synchronized int usedEntries(){  return map.size();}  }
class C{  public static float toFloat(byte[] bytes){  return toFloat(bytes,0);}  }
class C{  public Map<String,String> obtainProxyProperties(){  Map<String,String> proxyProperties=new HashMap<>();  Map<String,String> environment=getEnvironment();  if (environment.containsKey(Config.SYSTEM_HTTP_PROXY)) {    proxyProperties.put(Config.SYSTEM_HTTP_PROXY,environment.get(Config.SYSTEM_HTTP_PROXY));  }  if (environment.containsKey(Config.SYSTEM_HTTPS_PROXY)) {    proxyProperties.put(Config.SYSTEM_HTTPS_PROXY,environment.get(Config.SYSTEM_HTTPS_PROXY));  }  if (environment.containsKey(Config.SYSTEM_NO_PROXY)) {    proxyProperties.put(Config.SYSTEM_NO_PROXY,environment.get(Config.SYSTEM_NO_PROXY));  }  return proxyProperties;}  }
class C{  @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){  SourcePlugin analyzer=(SourcePlugin)source;  context.convertAnother(registry.getPluginId(analyzer));}  }
class C{  public SQLProcessor(Delegator delegator,GenericHelperInfo helperInfo){  this.delegator=delegator;  this.helperInfo=helperInfo;  this._manualTX=true;}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  protected static ModbusResponse readRequest(int functionCode,int register,int count){  ModbusTCPTransport transport=null;  ModbusTCPTransaction trans;  try {    Socket socket=new Socket(LOCALHOST,PORT);    transport=new ModbusTCPTransport(socket);    ModbusRequest req=null;switch (functionCode) {case Modbus.READ_COILS:      req=new ReadCoilsRequest(register,count);    break;case Modbus.READ_INPUT_DISCRETES:  req=new ReadInputDiscretesRequest(register,count);break;case Modbus.READ_INPUT_REGISTERS:req=new ReadInputRegistersRequest(register,count);break;case Modbus.READ_HOLDING_REGISTERS:req=new ReadMultipleRegistersRequest(register,count);break;default :fail(String.format("Request type %d is not supported by the test harness",functionCode));}req.setUnitID(UNIT_ID);trans=(ModbusTCPTransaction)transport.createTransaction();trans.setRequest(req);trans.setReconnecting(true);trans.execute();return trans.getResponse();} catch (Exception e) {logger.debug(e.getMessage());} finally {if (transport != null) {try {transport.close();} catch (IOException e) {logger.error(e.getMessage());}}}return null;}  }
class C{  public InfoRegister importFolder(User user,Integer bookId,List atts,List inter,Map documents,String entidad) throws ValidationException, SecurityException, BookException, SessionException, AttributesException {  InfoRegister result=null;  try {    result=RegisterServices.importFolder(user,bookId,atts,inter,documents,entidad);  } catch (  TecDocException e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  ParseException e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  Exception e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void write(byte[] b,int off,int len){  checkNotNull(b);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Start:    return stateVector[0] == State.main_region_Start;case main_region_Mid:  return stateVector[0] == State.main_region_Mid;case main_region_Mid2:return stateVector[0] == State.main_region_Mid2;case main_region_End:return stateVector[0] == State.main_region_End;default :return false;}}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  protected void processActiveMembers(Set activeMembers){  for (int i=0; i < this.members.length; i++) {    if (this.members[i] != null) {      if (!activeMembers.contains(this.members[i])) {        memberDeparted(this.members[i],false);      }    }  }}  }
class C{  void validate() throws IllegalStateException {  if (quoteChar != null && delimiter == quoteChar.charValue()) {    throw new IllegalStateException("The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')");  }  if (escape != null && delimiter == escape.charValue()) {    throw new IllegalStateException("The escape character and the delimiter cannot be the same ('" + escape + "')");  }  if (commentStart != null && delimiter == commentStart.charValue()) {    throw new IllegalStateException("The comment start character and the delimiter cannot be the same ('" + commentStart + "')");  }  if (quoteChar != null && quoteChar.equals(commentStart)) {    throw new IllegalStateException("The comment start character and the quoteChar cannot be the same ('" + commentStart + "')");  }  if (escape != null && escape.equals(commentStart)) {    throw new IllegalStateException("The comment start and the escape character cannot be the same ('" + commentStart + "')");  }  if (escape == null && quotePolicy == Quote.NONE) {    throw new IllegalStateException("No quotes mode set but no escape character is set");  }  if (header != null) {    final Set<String> set=new HashSet<String>(header.length);    set.addAll(Arrays.asList(header));    if (set.size() != header.length) {      throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header));    }  }}  }
class C{  private void startMachine(final String recipeURL,final String displayName,final boolean isDev,final String sourceType,final String machineType){  MachineSourceDto sourceDto=dtoFactory.createDto(MachineSourceDto.class).withType(sourceType).withLocation(recipeURL);  startMachine(sourceDto,displayName,isDev,machineType);}  }
class C{  @SuppressWarnings("unchecked") public long defaultMaxResponseLength(){  return getOrElse(DEFAULT_MAX_RESPONSE_LENGTH,DEFAULT_DEFAULT_MAX_RESPONSE_LENGTH);}  }
class C{  @Override public void modifiedDeleted(final RPObject changes){}  }
class C{  public final CC alignX(String align){  hor.setAlign(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  private void handle423IntervalTooBrief(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("423 interval too brief response received");  }  SipResponse resp=ctx.getSipResponse();  mDialogPath.incrementCseq();  long minExpire=SipUtils.getMinExpiresPeriod(resp);  if (minExpire == -1) {    if (sLogger.isActivated()) {      sLogger.error("Can't read the Min-Expires value");    }    handleError(new PresenceError(PresenceError.PUBLISH_FAILED,"No Min-Expires value found"));    return;  }  RegistryFactory.getFactory().writeLong(REGISTRY_MIN_EXPIRE_PERIOD,minExpire);  mExpirePeriod=minExpire;  SipRequest publish=SipMessageFactory.createPublish(mDialogPath,mExpirePeriod,mEntityTag,mDialogPath.getLocalContent());  sendPublish(publish);}  }
class C{  public void addService(Class<? extends IFloodlightService> clazz,IFloodlightService service){  serviceMap.put(clazz,service);}  }
class C{  public Iterator<RPSlot> slotIterator(Slots slotTypes){  Predicate<RPSlot> p=new SlotNameInList(slotTypes.getNames());  return Iterators.filter(slotsIterator(),p);}  }
class C{  public static void createFileStructure(@NotNull VirtualFile rootDir,String... paths){  for (  String path : paths) {    cd(rootDir);    boolean dir=path.endsWith("/");    if (dir) {      mkdir(path);    } else {      touch(path,"initial_content_" + Math.random());    }  }}  }
class C{  public ImageTile(){  super();}  }
class C{  public StartupWindow(String title){  this(title,"Joshua Developers","2010",Color.BLACK,5);}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (key == null) {    throw new IllegalStateException("RSA engine not initialised");  }  BigInteger input=core.convertInput(in,inOff,inLen);  BigInteger result;  if (key instanceof RSAPrivateCrtKeyParameters) {    RSAPrivateCrtKeyParameters k=(RSAPrivateCrtKeyParameters)key;    BigInteger e=k.getPublicExponent();    if (e != null) {      BigInteger m=k.getModulus();      BigInteger r=BigIntegers.createRandomInRange(ONE,m.subtract(ONE),random);      BigInteger blindedInput=r.modPow(e,m).multiply(input).mod(m);      BigInteger blindedResult=core.processBlock(blindedInput);      BigInteger rInv=r.modInverse(m);      result=blindedResult.multiply(rInv).mod(m);    } else {      result=core.processBlock(input);    }  } else {    result=core.processBlock(input);  }  return core.convertOutput(result);}  }
class C{  Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  public LessEqualConstraint(int constraintValue){  super(Integer.valueOf(constraintValue));}  }
class C{  public boolean isSetScope(){  return this.scope != null;}  }
class C{  public ParameterizedTypeRefStructural createParameterizedTypeRefStructural(){  ParameterizedTypeRefStructuralImpl parameterizedTypeRefStructural=new ParameterizedTypeRefStructuralImpl();  return parameterizedTypeRefStructural;}  }
class C{  public SharedRootConnectionGroup(SharedUserContext userContext){  this.userContext=userContext;}  }
class C{  public void redraw(){  mItemCount=getShouldDrawCount();  mPreviousSelectedIndicator=null;  for (  View i : mIndicators) {    removeView(i);  }  for (int i=0; i < mItemCount; i++) {    ImageView indicator=new ImageView(mContext);    indicator.setImageDrawable(mUnselectedDrawable);    addView(indicator);    mIndicators.add(indicator);  }  setItemAsSelected(mPreviousSelectedPosition);}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  public GenericPropertiesCreator() throws Exception {  this(CREATOR_FILE);  m_ExplicitPropsFile=false;}  }
class C{  @Override public boolean supportsResultSetConcurrency(int type,int concurrency){  if (isDebugEnabled()) {    debugCode("supportsResultSetConcurrency(" + type + ", "+ concurrency+ ");");  }  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  public static Request createAllocateRequest(byte protocol,boolean rFlag){  Request allocateRequest=new Request();  try {    allocateRequest.setMessageType(Message.ALLOCATE_REQUEST);    if (protocol != 6 && protocol != 17)     throw new StunException("Protocol not valid!");    allocateRequest.putAttribute(AttributeFactory.createRequestedTransportAttribute(protocol));    if (rFlag) {      allocateRequest.putAttribute(AttributeFactory.createEvenPortAttribute(rFlag));    }  } catch (  StunException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return allocateRequest;}  }
class C{  private boolean checkDBConnectivity(boolean createDB,boolean ignoreError) throws ReplicatorException {  Database conn=null;  try {    conn=connectionManager.getRawConnection(createDB);    conn.connect();    return true;  } catch (  SQLException e) {    if (!ignoreError) {      throw new ReplicatorException("Unable to connect to DBMS: url=" + connectionSpec.createUrl(createDB));    }  } finally {    if (conn != null) {      connectionManager.releaseConnection(conn);    }  }  return false;}  }
class C{  public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {  int len;  int fileType;  String filename, urlName;  if (cmd.startsWith("GET /"))   filename=urlName=cmd.substring(5,cmd.indexOf(' ',5)); else   throw new BadHttpRequest();  if (filename.endsWith(".class"))   fileType=typeClass; else   if (filename.endsWith(".html") || filename.endsWith(".htm"))   fileType=typeHtml; else   if (filename.endsWith(".gif"))   fileType=typeGif; else   if (filename.endsWith(".jpg"))   fileType=typeJpeg; else   fileType=typeText;  len=filename.length();  if (fileType == typeClass && letUsersSendClassfile(out,filename,len))   return;  checkFilename(filename,len);  if (htmlfileBase != null)   filename=htmlfileBase + filename;  if (File.separatorChar != '/')   filename=filename.replace('/',File.separatorChar);  File file=new File(filename);  if (file.canRead()) {    sendHeader(out,file.length(),fileType);    FileInputStream fin=new FileInputStream(file);    byte[] filebuffer=new byte[4096];    for (; ; ) {      len=fin.read(filebuffer);      if (len <= 0)       break; else       out.write(filebuffer,0,len);    }    fin.close();    return;  }  if (fileType == typeClass) {    InputStream fin=getClass().getResourceAsStream("/" + urlName);    if (fin != null) {      ByteArrayOutputStream barray=new ByteArrayOutputStream();      byte[] filebuffer=new byte[4096];      for (; ; ) {        len=fin.read(filebuffer);        if (len <= 0)         break; else         barray.write(filebuffer,0,len);      }      byte[] classfile=barray.toByteArray();      sendHeader(out,classfile.length,typeClass);      out.write(classfile);      fin.close();      return;    }  }  throw new BadHttpRequest();}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (DECODABET[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0);        out.write(b4,0,len);        position=0;      }    } else     if (DECODABET[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private static boolean isPostgresReadOnlyError(SQLException e){  PSQLException p=extractPSQLException(e);  return (null != p) && (p.getSQLState().equals(POSTGRES_READONLY_SQLSTATE));}  }
class C{  public EcuConversions(String resource){  put("DEFAULT",new Conversion[]{dfltCnv,dfltCnv});  loadFromResource(resource);}  }
class C{  public AttributeList(String name,int type,int modifier,String value,Vector<?> values,AttributeList next){  this.name=name;  this.type=type;  this.modifier=modifier;  this.value=value;  this.values=values;  this.next=next;}  }
class C{  XMLName toXMLNameOrIndex(Context cx,Object value){  XMLName result;  if (value instanceof XMLName) {    result=(XMLName)value;  } else   if (value instanceof String) {    String str=(String)value;    long test=ScriptRuntime.testUint32String(str);    if (test >= 0) {      ScriptRuntime.storeUint32Result(cx,test);      result=null;    } else {      result=toXMLNameFromString(cx,str);    }  } else   if (value instanceof Number) {    double d=((Number)value).doubleValue();    long l=(long)d;    if (l == d && 0 <= l && l <= 0xFFFFFFFFL) {      ScriptRuntime.storeUint32Result(cx,l);      result=null;    } else {      throw badXMLName(value);    }  } else   if (value instanceof QName) {    QName qname=(QName)value;    String uri=qname.uri();    boolean number=false;    result=null;    if (uri != null && uri.length() == 0) {      long test=ScriptRuntime.testUint32String(uri);      if (test >= 0) {        ScriptRuntime.storeUint32Result(cx,test);        number=true;      }    }    if (!number) {      result=XMLName.formProperty(uri,qname.localName());    }  } else   if (value instanceof Boolean || value == Undefined.instance || value == null) {    throw badXMLName(value);  } else {    String str=ScriptRuntime.toString(value);    long test=ScriptRuntime.testUint32String(str);    if (test >= 0) {      ScriptRuntime.storeUint32Result(cx,test);      result=null;    } else {      result=toXMLNameFromString(cx,str);    }  }  return result;}  }
class C{  public boolean hasEmbeddedFonts(){  return hasEmbeddedFonts;}  }
class C{  @DELETE @Path("/{id}") public Response cancelOrder(@PathParam("id") int orderId){  orderService.cancelOrder(orderId);  return Response.ok().build();}  }
class C{  private Id<Link> findClosestLink(TransitStopFacility stopFacility){  Link nearestLink=NetworkUtils.getNearestLink(this.network,stopFacility.getCoord());  if (NetworkUtils.getEuclideanDistance(stopFacility.getCoord(),nearestLink.getToNode().getCoord()) <= SEARCH_RADIUS) {    return nearestLink.getId();  } else {    return null;  }}  }
class C{  private String marshal(Marshaller marshaller,Object o) throws IOException {  Writer writer=new StringWriter();  marshaller.marshal(o,new StreamResult(writer));  String xml=writer.toString();  LOGGER.debug("\n" + xml);  return xml;}  }
class C{  public static void resumeAllMutators(){  try {    Clock.stop();    model.resumeAllMutators();  }  finally {    Clock.start();  }}  }
class C{  @Override public boolean isBusy(){  return (m_foldThread != null);}  }
class C{  private Identity newZestAccount() throws UnitOfWorkCompletionException {  UnitOfWork work=unitOfWorkFactory.newUnitOfWork();  EntityBuilder<AccountComposite> entityBuilder=work.newEntityBuilder(AccountComposite.class);  AccountComposite accountComposite=entityBuilder.instance();  accountComposite.name().set(ACCOUNT_NAME);  accountComposite=entityBuilder.newInstance();  Identity accoutnIdentity=accountComposite.identity().get();  work.complete();  return accoutnIdentity;}  }
class C{  public CursorPos(final BlockFace blockFace,final HandType handType,final int x,final int y,final int z){  Validate.notNull(handType,"HandType can't be null.");  this.handType=handType;  if (blockFace != null) {    Validate.isTrue(blockFace.isBasic(),"BlockFace must be simple or null.");  }  Validate.isTrue(validByteRange.isIn(x),"x pos must be in 0..16 range.");  Validate.isTrue(validByteRange.isIn(y),"y pos must be in 0..16 range.");  Validate.isTrue(validByteRange.isIn(z),"z pos must be in 0..16 range.");  this.blockFace=blockFace;  this.x=(byte)x;  this.y=(byte)y;  this.z=(byte)z;}  }
class C{  public StringLiteral createStringLiteral(){  StringLiteralImpl stringLiteral=new StringLiteralImpl();  return stringLiteral;}  }
class C{  static TBigInteger modInverseMontgomery(TBigInteger a,TBigInteger p){  if (a.sign == 0) {    throw new ArithmeticException("BigInteger not invertible");  }  if (!p.testBit(0)) {    return modInverseHars(a,p);  }  int m=p.numberLength * 32;  TBigInteger u, v, r, s;  u=p.copy();  v=a.copy();  int max=Math.max(v.numberLength,u.numberLength);  r=new TBigInteger(1,1,new int[max + 1]);  s=new TBigInteger(1,1,new int[max + 1]);  s.digits[0]=1;  int k=0;  int lsbu=u.getLowestSetBit();  int lsbv=v.getLowestSetBit();  int toShift;  if (lsbu > lsbv) {    TBitLevel.inplaceShiftRight(u,lsbu);    TBitLevel.inplaceShiftRight(v,lsbv);    TBitLevel.inplaceShiftLeft(r,lsbv);    k+=lsbu - lsbv;  } else {    TBitLevel.inplaceShiftRight(u,lsbu);    TBitLevel.inplaceShiftRight(v,lsbv);    TBitLevel.inplaceShiftLeft(s,lsbu);    k+=lsbv - lsbu;  }  r.sign=1;  while (v.signum() > 0) {    while (u.compareTo(v) > TBigInteger.EQUALS) {      TElementary.inplaceSubtract(u,v);      toShift=u.getLowestSetBit();      TBitLevel.inplaceShiftRight(u,toShift);      TElementary.inplaceAdd(r,s);      TBitLevel.inplaceShiftLeft(s,toShift);      k+=toShift;    }    while (u.compareTo(v) <= TBigInteger.EQUALS) {      TElementary.inplaceSubtract(v,u);      if (v.signum() == 0)       break;      toShift=v.getLowestSetBit();      TBitLevel.inplaceShiftRight(v,toShift);      TElementary.inplaceAdd(s,r);      TBitLevel.inplaceShiftLeft(r,toShift);      k+=toShift;    }  }  if (!u.isOne()) {    throw new ArithmeticException("BigInteger not invertible.");  }  if (r.compareTo(p) >= TBigInteger.EQUALS) {    TElementary.inplaceSubtract(r,p);  }  r=p.subtract(r);  int n1=calcN(p);  if (k > m) {    r=monPro(r,TBigInteger.ONE,p,n1);    k=k - m;  }  r=monPro(r,TBigInteger.getPowerOfTwo(m - k),p,n1);  return r;}  }
class C{  protected void configure(TypeScriptDTOGeneratorMojo mojo,File baseDir) throws Exception {  this.rule.setVariableValueToObject(mojo,"targetDirectory",this.resources.getBasedir(""));  this.rule.setVariableValueToObject(mojo,"useClassPath",true);}  }
class C{  public String signMachineCodeRepOfReceipt(String machineCodeRepOfReceipt,boolean signatureDeviceIsDamaged){  jws=new JsonWebSignature();  jws.setKey(openSystemSignatureModule.getSigningKey());  if (signatureDeviceIsDamaged) {    String jwsHeader="eyJhbGciOiJFUzI1NiJ9";    String jwsPayload=CashBoxUtils.base64Encode(machineCodeRepOfReceipt.getBytes(),true);    String jwsSignature=CashBoxUtils.base64Encode("Sicherheitseinrichtung ausgefallen".getBytes(),true);    String jwsCompactRep=jwsHeader + "." + jwsPayload+ "."+ jwsSignature;    return jwsCompactRep;  }  try {    jws.setPayload(machineCodeRepOfReceipt);    jws.setAlgorithmHeaderValue(RKSuite.R1_AT0.getJwsSignatureAlgorithm());    jws.sign();    return jws.getCompactSerialization();  } catch (  JoseException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  objWrite.set(value);  output.collect(key,objWrite);}  }
class C{  public StopContainerParams withTimeout(long timeout,TimeUnit timeunit){  requireNonNull(timeunit);  this.timeout=timeout;  this.timeunit=timeunit;  return this;}  }
class C{  public static List<Config> readConfigFiles(String[] files,boolean lowPrecedence){  if (files == null) {    return Lists.newArrayList();  }  YamlReader<Config> reader=new YamlReader<>(Config.getYamlConstructor());  ArrayList<Config> result=Lists.newArrayList();  for (  String file : files) {    File f=new File(file);    Config c=reader.read(f);    c.setLowPrecedence(lowPrecedence);    result.add(c);  }  return result;}  }
class C{  public IndicatorTreeElementContentProvider(IndicatorViewPart viewPart){  this.viewPart=viewPart;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/accessmode") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList changeAccessMode(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() != 1) {    throw APIException.badRequests.changeAccessCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {    throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.CHANGE_ACCESS_MODE.getRestOp());  }  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  ArgValidator.checkFieldNotEmpty(copy.getAccessMode(),"accessMode");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.CHANGE_ACCESS_MODE.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    _log.warn("Changing access mode is currently not supported for SRDF.  Returning empty task list (no-op).");    return taskList;  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public Z21XNetConnectionConfig(jmri.jmrix.AbstractStreamPortController p){  super(p);}  }
class C{  public static Interval fromToBy(int from,int to,int stepBy){  if (stepBy == 0) {    throw new IllegalArgumentException("Cannot use a step by of 0");  }  if (from > to && stepBy > 0 || from < to && stepBy < 0) {    throw new IllegalArgumentException("Step by is incorrect for the range");  }  return new Interval(from,to,stepBy);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TFUNCTION__AST_ELEMENT:    setAstElement((EObject)newValue);  return;case TypesPackage.TFUNCTION__EXTERNAL:setExternal((Boolean)newValue);return;case TypesPackage.TFUNCTION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends TFormalParameter>)newValue);return;case TypesPackage.TFUNCTION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;case TypesPackage.TFUNCTION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case TypesPackage.TFUNCTION__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)newValue);return;case TypesPackage.TFUNCTION__DECLARED_ASYNC:setDeclaredAsync((Boolean)newValue);return;case TypesPackage.TFUNCTION__CONSTRUCTOR:setConstructor((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void enableEffect(boolean enable){  if (enable && !mEffectEnabled) {    if (DBG)     Log.d(TAG,"Notification effect is now enabled for handler=" + ID);    mEffectEnabled=true;  } else   if (enable && !mEffectEnabled) {    if (DBG)     Log.d(TAG,"Notification effect is now disabled for handler=" + ID);    mEffectEnabled=false;    if (mEffect.isConsumer(ID)) {      mEffect.cancel();    }  }}  }
class C{  public int readMessages(Reader is,OutboxAmp outbox) throws IOException {  Objects.requireNonNull(outbox);  JsonReaderImpl jIn=new JsonReaderImpl(is,_jsonFactory);  return readMessages(jIn,outbox);}  }
class C{  public final byte[] doFinal(byte[] input) throws IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  update(input);  return doFinal();}  }
class C{  public void add(Value... items){  for (  Value Value : items) {    this.add(Value);  }}  }
class C{  public static String removeFormatting(String line){  int length=line.length();  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    char ch=line.charAt(i);    if (ch == '\u000f' || ch == '\u0002' || ch == '\u001f' || ch == '\u0016') {    } else {      buffer.append(ch);    }  }  return buffer.toString();}  }
class C{  public SingletonCollectionConverter(final Mapper mapper){  super(mapper);}  }
class C{  public String completeIt(){  if (!isValidAction(ACTION_Complete))   return m_status;  if (m_document != null) {    m_status=m_document.completeIt();    m_document.setDocStatus(m_status);  }  return m_status;}  }
class C{  public String str(){  if (null == m_strCache) {    m_strCache=fsb().getString(m_start,m_length);  }  return m_strCache;}  }
class C{  public ExtractSuperclassDescriptor(){  super(IJavaRefactorings.EXTRACT_SUPERCLASS);}  }
class C{  public HASELTest(String name){  super(name);}  }
class C{  public static long maxFractionalSeconds(long tstamp,boolean keepMillis){  int microsec=(int)(tstamp) & UMASK;  tstamp&=(long)(~UMASK);  if (!keepMillis)   microsec=999999; else   microsec=(microsec % 1000) + 999;  tstamp|=(long)microsec;  return (tstamp);}  }
class C{  @Override public void close(){  if (System.getProperty("testdirectory.nocleanup") != null) {    System.err.println("Not deleting test directory " + this.toString());  } else {    Assert.assertTrue(FileHelper.deleteAll(this));  }}  }
class C{  public Class<?> parameterType(int num){  return ptypes[num];}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthColorChooserUI();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  protected boolean checkSpansBoundary(long fp){  return fp % 512 > 508;}  }
class C{  public static boolean shouldHighlightMethd(MethodModel method){  boolean result=methodsToHighlight.contains(method.getSootMethodSignature());  return result;}  }
class C{  public static final double[] copy(final double[] v){  return Arrays.copyOf(v,v.length);}  }
class C{  public static CSVData parse(String path,Charset encoding) throws IOException, SimpleParserException {  return new CSVParser(path,encoding).doParse();}  }
class C{  public boolean run(){  try {    File elevDir=new File(landscapePath,"elevation");    if (!elevDir.exists()) {      messageText.setText("Cannot find Landscape elevation layer.");      return (false);    }    File propFile=new File(elevDir,"layer.properties");    if (!propFile.exists()) {      messageText.setText("Cannot find layer.properties file for Landscape elevation layer.");      return (false);    }    factory=new VectorPyramidLayerFactory(filePath);    factory.buildPyramid(landscapePath,layerName,color,elevAttrName,messageText);    return (true);  } catch (  Exception e) {    messageText.setText("Unable to complete pyramid.");    e.printStackTrace();    factory=null;    return (false);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Expression addExpression() throws ParserException, IOException {  Expression e=multExpression();  Operator op=null;  while (true) {switch (lookahead.ttype) {case OPERATOR_PLUS:      match(OPERATOR_PLUS);    op=Operator.PLUS;  break;case OPERATOR_MINUS:match(OPERATOR_MINUS);op=Operator.MINUS;break;default :log(pdebug,"Parsed: addExpression -> " + e);return e;}Expression e1=new Expression();e1.setOperator(op);e1.setLeft(e);e1.setRight(multExpression());e=e1;log(pdebug,"Parsed: addExpression -> " + e);}}  }
class C{  public void testMergeOneFilterWithOneMappingIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  List<String> filterMappings=WebXmlUtils.getFilterMappings(srcWebXml,"f1");  assertEquals(1,filterMappings.size());  assertEquals("/f1mapping1",filterMappings.get(0));}  }
class C{  protected static String quoteArray(String[] s){  return StringUtils.quoteJavaStringArray(s);}  }
class C{  public void hideTooltipTexts(ViewGroup parentView){  for (int childIndex=0; childIndex < parentView.getChildCount(); childIndex++) {    View child=parentView.getChildAt(childIndex);    if (child.getTag() != null && child.getTag() instanceof String) {      String tag=(String)child.getTag();      if (tag.startsWith(RenderTooltipInterface.TOOLTIP_TAG)) {        ViewGroup removeViewParent=((ViewGroup)child.getParent());        removeViewParent.removeView(child);      }    }  }}  }
class C{  protected double[] distributionForInstanceMajorityVoting(Instance instance) throws Exception {  double[] probs=new double[instance.classAttribute().numValues()];  double[] votes=new double[probs.length];  for (int i=0; i < m_Classifiers.length; i++) {    probs=getClassifier(i).distributionForInstance(instance);    int maxIndex=0;    for (int j=0; j < probs.length; j++) {      if (probs[j] > probs[maxIndex]) {        maxIndex=j;      }    }    if (probs[maxIndex] > 0) {      for (int j=0; j < probs.length; j++) {        if (probs[j] == probs[maxIndex]) {          votes[j]++;        }      }    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    probs=m_preBuiltClassifiers.get(i).distributionForInstance(instance);    int maxIndex=0;    for (int j=0; j < probs.length; j++) {      if (probs[j] > probs[maxIndex]) {        maxIndex=j;      }    }    if (probs[maxIndex] > 0) {      for (int j=0; j < probs.length; j++) {        if (probs[j] == probs[maxIndex]) {          votes[j]++;        }      }    }  }  int tmpMajorityIndex=0;  for (int k=1; k < votes.length; k++) {    if (votes[k] > votes[tmpMajorityIndex]) {      tmpMajorityIndex=k;    }  }  if (votes[tmpMajorityIndex] == 0) {    return new double[instance.numClasses()];  }  Vector<Integer> majorityIndexes=new Vector<Integer>();  for (int k=0; k < votes.length; k++) {    if (votes[k] == votes[tmpMajorityIndex]) {      majorityIndexes.add(k);    }  }  int majorityIndex=majorityIndexes.get(m_Random.nextInt(majorityIndexes.size()));  probs=new double[probs.length];  probs[majorityIndex]=1;  return probs;}  }
class C{  public static final void fillCircleFromCenter(GL2 gl,double r,double cx,double cy){  double c=COS;  double s=SIN;  double t;  double x=r;  double y=0;  gl.glBegin(GL.GL_TRIANGLE_FAN);  gl.glVertex2d(cx,cy);  for (int i=0; i <= N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=c * x - s * y;    y=s * t + c * y;  }  gl.glEnd();}  }
class C{  private static void ensureCapacity(int id){  int column=id >> LOG_ROW_SIZE;  if (column >= compiledMethods.length) {    CompiledMethod[][] tmp=new CompiledMethod[column + 1][];    for (int i=0; i < column; i++) {      tmp[i]=compiledMethods[i];    }    tmp[column]=new CompiledMethod[1 << LOG_ROW_SIZE];    compiledMethods=tmp;    Magic.sync();  }}  }
class C{  public void testMissionNameConstruction(){  String xml="";  xml+=createStartMissionXml("","Name");  xml+=createEndMissionXml();  InputStream missionInputStream=new ByteArrayInputStream(xml.getBytes());  String missionName=null;  try {    missionName=MissionParser.getMissionName(missionInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Name",missionName);}  }
class C{  public static void editNodeComments(final CGraphModel model,final INaviViewNode node,final InitialTab initialTab){  Preconditions.checkNotNull(node,"IE02131: Node argument can not be null");  final JDialog dialog=getCommentDialog(model,node,initialTab);  GuiHelper.centerChildToParent(model.getParent(),dialog,true);  dialog.setVisible(true);}  }
class C{  public void updateStack(PropertyHandler ph) throws HeatException, APPlatformException {  logger.debug("HeatProcessor.updateStack() stackname: " + ph.getStackName());  String template=getTemplate(ph,"update");  UpdateStackRequest request=(UpdateStackRequest)new UpdateStackRequest(ph.getStackName()).withTemplate(template).withParameters(ph.getTemplateParameters());  createHeatClient(ph).updateStack(request);}  }
class C{  public static void flushFromCaches(Class<?> clz){  if (clz == null) {    throw new NullPointerException();  }synchronized (declaredMethodCache) {    ThreadGroupContext.getContext().removeBeanInfo(clz);    declaredMethodCache.put(clz,null);  }}  }
class C{  public String toString(){  return "Take difference of opposite cells (across from" + "\n" + "the center square) and compare against the "+ "\n"+ "ideal of 16. Ignore blank cell.";}  }
class C{  public static ObservableStringValue decision(ObservableBooleanValue condition,ObservableStringValue ifTrue,ObservableStringValue ifFalse){  StringProperty ret=new SimpleStringProperty();  condition.addListener(null);  ifTrue.addListener(null);  ifFalse.addListener(null);  ret.set(condition.get() ? ifTrue.get() : ifFalse.get());  return ret;}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public String toString(){  if (this.xmlDocument != null) {    XMLOutputter outputter=new XMLOutputter();    String output=outputter.outputString(this.xmlDocument);    output=output.replaceAll("\r","");    output=output.replaceAll("\n","");    output=output.replaceAll("\t","");    return output;  }  return "";}  }
class C{  public static void verifyNumInvalidates(){  long invalidatesRecordedByStats=pool.getInvalidateCount();  LogWriterUtils.getLogWriter().info("invalidatesRecordedByStats = " + invalidatesRecordedByStats);  int expectedInvalidates=TOTAL_SERVERS * PUTS_PER_SERVER;  LogWriterUtils.getLogWriter().info("expectedInvalidates = " + expectedInvalidates);  if (invalidatesRecordedByStats != expectedInvalidates) {    fail("Invalidates received by client(" + invalidatesRecordedByStats + ") does not match with the number of operations("+ expectedInvalidates+ ") done at server");  }}  }
class C{  private boolean verifyDocType(MPaymentAllocate[] pAllocs){  if (getC_DocType_ID() == 0)   return false;  Boolean documentSO=null;  if (getC_Invoice_ID() > 0) {    String sql="SELECT idt.IsSOTrx " + "FROM C_Invoice i" + " INNER JOIN C_DocType idt ON (i.C_DocType_ID=idt.C_DocType_ID) "+ "WHERE i.C_Invoice_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,get_TrxName());      pstmt.setInt(1,getC_Invoice_ID());      rs=pstmt.executeQuery();      if (rs.next())       documentSO=new Boolean("Y".equals(rs.getString(1)));    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  } else   if (getC_Order_ID() > 0) {    String sql="SELECT odt.IsSOTrx " + "FROM C_Order o" + " INNER JOIN C_DocType odt ON (o.C_DocType_ID=odt.C_DocType_ID) "+ "WHERE o.C_Order_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,get_TrxName());      pstmt.setInt(1,getC_Order_ID());      rs=pstmt.executeQuery();      if (rs.next())       documentSO=new Boolean("Y".equals(rs.getString(1)));    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  } else   if (getC_Charge_ID() > 0) {  } else {    if (pAllocs.length > 0) {      for (      MPaymentAllocate pAlloc : pAllocs) {        String sql="SELECT idt.IsSOTrx " + "FROM C_Invoice i" + " INNER JOIN C_DocType idt ON (i.C_DocType_ID=idt.C_DocType_ID) "+ "WHERE i.C_Invoice_ID=?";        PreparedStatement pstmt=null;        ResultSet rs=null;        try {          pstmt=DB.prepareStatement(sql,get_TrxName());          pstmt.setInt(1,pAlloc.getC_Invoice_ID());          rs=pstmt.executeQuery();          if (rs.next()) {            if (documentSO != null) {              if (documentSO.booleanValue() != ("Y".equals(rs.getString(1)))) {                return false;              }            } else {              documentSO=new Boolean("Y".equals(rs.getString(1)));            }          }        } catch (        Exception e) {          log.log(Level.SEVERE,sql,e);        } finally {          DB.close(rs,pstmt);          rs=null;          pstmt=null;        }      }    }  }  Boolean paymentSO=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT IsSOTrx " + "FROM C_DocType " + "WHERE C_DocType_ID=?";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_DocType_ID());    rs=pstmt.executeQuery();    if (rs.next())     paymentSO=new Boolean("Y".equals(rs.getString(1)));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (paymentSO == null)   return false;  setIsReceipt(paymentSO.booleanValue());  if (documentSO != null && documentSO.booleanValue() != paymentSO.booleanValue())   return false;  return true;}  }
class C{  public static AnnotationsList combine(AnnotationsList list1,AnnotationsList list2){  int size=list1.size();  if (size != list2.size()) {    throw new IllegalArgumentException("list1.size() != list2.size()");  }  AnnotationsList result=new AnnotationsList(size);  for (int i=0; i < size; i++) {    Annotations a1=list1.get(i);    Annotations a2=list2.get(i);    result.set(i,Annotations.combine(a1,a2));  }  result.setImmutable();  return result;}  }
class C{  private static int compareCharsAlphabetically(char cCompare2,char cRef){  return Character.toLowerCase(cCompare2) - Character.toLowerCase(cRef);}  }
class C{  public void buildTree(Instances data,boolean keepData) throws Exception {  Instances[] localInstances;  if (keepData) {    m_train=data;  }  m_test=null;  m_isLeaf=false;  m_isEmpty=false;  m_sons=null;  m_localModel=m_toSelectModel.selectModel(data);  if (m_localModel.numSubsets() > 1) {    localInstances=m_localModel.split(data);    data=null;    m_sons=new ClassifierTree[m_localModel.numSubsets()];    for (int i=0; i < m_sons.length; i++) {      m_sons[i]=getNewTree(localInstances[i]);      localInstances[i]=null;    }  } else {    m_isLeaf=true;    if (Utils.eq(data.sumOfWeights(),0)) {      m_isEmpty=true;    }    data=null;  }}  }
class C{  public boolean wasInvoked(){  checkForError();  boolean value=this.invoked;  if (value) {    this.invoked=false;  }  return value;}  }
class C{  public IntSet(int initialCapacity){  if (initialCapacity == 0) {    mElements=ContainerHelpers.EMPTY_INTS;  } else {    mElements=new int[idealIntArraySize(initialCapacity)];  }  mSize=0;}  }
class C{  public void initializeOutput(ExtractorOutput output,long durationUs) throws ParserException {  String mimeType;  int maxInputSize=MediaFormat.NO_VALUE;  List<byte[]> initializationData=null;switch (codecId) {case CODEC_ID_VP8:    mimeType=MimeTypes.VIDEO_VP8;  break;case CODEC_ID_VP9:mimeType=MimeTypes.VIDEO_VP9;break;case CODEC_ID_MPEG4_SP:case CODEC_ID_MPEG4_ASP:case CODEC_ID_MPEG4_AP:mimeType=MimeTypes.VIDEO_MP4V;initializationData=codecPrivate == null ? null : Collections.singletonList(codecPrivate);break;case CODEC_ID_H264:mimeType=MimeTypes.VIDEO_H264;Pair<List<byte[]>,Integer> h264Data=parseAvcCodecPrivate(new ParsableByteArray(codecPrivate));initializationData=h264Data.first;nalUnitLengthFieldLength=h264Data.second;break;case CODEC_ID_H265:mimeType=MimeTypes.VIDEO_H265;Pair<List<byte[]>,Integer> hevcData=parseHevcCodecPrivate(new ParsableByteArray(codecPrivate));initializationData=hevcData.first;nalUnitLengthFieldLength=hevcData.second;break;case CODEC_ID_VORBIS:mimeType=MimeTypes.AUDIO_VORBIS;maxInputSize=VORBIS_MAX_INPUT_SIZE;initializationData=parseVorbisCodecPrivate(codecPrivate);break;case CODEC_ID_OPUS:mimeType=MimeTypes.AUDIO_OPUS;maxInputSize=OPUS_MAX_INPUT_SIZE;initializationData=new ArrayList<>(3);initializationData.add(codecPrivate);initializationData.add(ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN).putLong(codecDelayNs).array());initializationData.add(ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN).putLong(seekPreRollNs).array());break;case CODEC_ID_AAC:mimeType=MimeTypes.AUDIO_AAC;initializationData=Collections.singletonList(codecPrivate);break;case CODEC_ID_MP3:mimeType=MimeTypes.AUDIO_MPEG;maxInputSize=MP3_MAX_INPUT_SIZE;break;case CODEC_ID_AC3:mimeType=MimeTypes.AUDIO_AC3;break;case CODEC_ID_DTS:case CODEC_ID_DTS_EXPRESS:mimeType=MimeTypes.AUDIO_DTS;break;case CODEC_ID_DTS_LOSSLESS:mimeType=MimeTypes.AUDIO_DTS_HD;break;case CODEC_ID_SUBRIP:mimeType=MimeTypes.APPLICATION_SUBRIP;break;default :throw new ParserException("Unrecognized codec identifier.");}MediaFormat format;if (MimeTypes.isAudio(mimeType)) {format=MediaFormat.createAudioFormat(mimeType,MediaFormat.NO_VALUE,maxInputSize,durationUs,channelCount,sampleRate,initializationData);} else if (MimeTypes.isVideo(mimeType)) {format=MediaFormat.createVideoFormat(mimeType,MediaFormat.NO_VALUE,maxInputSize,durationUs,width,height,0,initializationData);} else if (MimeTypes.APPLICATION_SUBRIP.equals(mimeType)) {format=MediaFormat.createTextFormat(mimeType,MediaFormat.NO_VALUE,language,durationUs);} else {throw new ParserException("Unexpected MIME type.");}this.output=output.track(number);this.output.format(format);}  }
class C{  public static InterestEventResponse send(Set recipients,PartitionedRegion region,final InterestRegistrationEvent event) throws ForceReattemptException {  InterestEventResponse response=new InterestEventResponse(region.getSystem(),recipients);  InterestEventMessage m=new InterestEventMessage(recipients,region.getPRId(),response.getProcessorId(),event,response);  Set failures=region.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException("Failed sending <" + m + "> to "+ failures);  }  return response;}  }
class C{  public static void populateBasicUserEventTrazaAuditoria(IsicresAuditAbstractBasicUserEventVO evento,TrazaAuditoriaVO traza){  String appDescription=evento.getAppDescription();  traza.setAppDescription(appDescription);  Long appId=evento.getAppId();  traza.setAppId(appId);  traza.setEventDate(evento.getFecha());  String userName=evento.getUser();  traza.setUserName(userName);  String userId=evento.getIdUser();  traza.setUserId(userId);  String oficinaId=evento.getIdOficina();  if (StringUtils.isNotEmpty(oficinaId)) {    traza.setUserId(oficinaId + "-" + userId);  }  String userHostName=evento.getUserHostName();  traza.setUserHostName(userHostName);  String userIp=evento.getUserIp();  traza.setUserIp(userIp);}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  if (!getField().equals(field)) {    buffer.append(getField());    buffer.append(":");  }  buffer.append(term.text());  return buffer.toString();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  long time=startTime;  for (int row=0; row < rows; row++, time+=step) {    sb.append(time);    sb.append(": ");    for (int ds=0; ds < dsCount; ds++) {      sb.append(data[row][ds]);      sb.append(" ");    }    sb.append(NEWLINE);  }  return sb.toString();}  }
class C{  public boolean isDefaultColumn(String propertyId){  String prop=reportProperties.getProperty(getClass().getSimpleName());  if (prop == null) {    return false;  }  return (prop.indexOf(propertyId) > -1);}  }
class C{  public String(char[] data,int start,int length){  if (start >= 0 && 0 <= length && length <= data.length - start) {    offset=0;    value=new char[length];    count=length;    System.arraycopy(data,start,value,0,count);  } else {    throw new StringIndexOutOfBoundsException();  }}  }
class C{  public boolean matches(String input){  return pattern == null || pattern.matcher(input).matches();}  }
class C{  public DRLCertFactory(){  super("DRLCertFactory",1.0,"ASN.1, DER, PkiPath, PKCS7");  put("CertificateFactory.X509","org.apache.harmony.security.provider.cert.X509CertFactoryImpl");  put("Alg.Alias.CertificateFactory.X.509","X509");}  }
class C{  private Collection<FollowElement> doGetFollowElements(AbstractInternalContentAssistParser parser,ObservableXtextTokenStream tokens){  tokens.setInitialHiddenTokens(getInitialHiddenTokens());  parser.setTokenStream(tokens);  IUnorderedGroupHelper helper=getUnorderedGroupHelper().get();  parser.setUnorderedGroupHelper(helper);  helper.initializeWith(parser);  tokens.setListener(parser);  Collection<FollowElement> followElements=getFollowElements(parser);  return followElements;}  }
class C{  private void addErrorMessage(RequestAndResponse requestAndResponse,String message) throws IOException {  requestAndResponse.print("<span class=\"errorMessage\">" + message + "</span>");}  }
class C{  public static void fadeIn(final JDialog dialog){  fadeIn(dialog,5,0.05f);}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,false);  return returnNode(node);}  }
class C{  public GdbInfoLine step() throws IOException, InterruptedException, DebuggerException {  sendCommand("step");  return infoLine();}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public static void toNettyHttp1(int streamId,HttpHeaders inputHeaders,io.netty.handler.codec.http.HttpHeaders outputHeaders,HttpVersion httpVersion,boolean isTrailer,boolean isRequest) throws Http2Exception {  final Http2ToHttpHeaderTranslator translator=new Http2ToHttpHeaderTranslator(outputHeaders,isRequest);  try {    for (    Entry<AsciiString,String> entry : inputHeaders) {      translator.translate(entry);    }  } catch (  Throwable t) {    throw streamError(streamId,PROTOCOL_ERROR,t,"HTTP/2 to HTTP/1.x headers conversion error");  }  outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);  outputHeaders.remove(HttpHeaderNames.TRAILER);  if (!isTrailer) {    HttpUtil.setKeepAlive(outputHeaders,httpVersion,true);  }}  }
class C{  public UserClassesClasspathModel(){  this("Default Project classpath","User Custom classpath");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdatabeginning.class,args);}  }
class C{  protected void int2alphaCount(long val,CharArrayWrapper aTable,FastStringBuffer stringBuf){  int radix=aTable.getLength();  char[] table=new char[radix];  int i;  for (i=0; i < radix - 1; i++) {    table[i + 1]=aTable.getChar(i);  }  table[0]=aTable.getChar(i);  char buf[]=new char[100];  int charPos;  charPos=buf.length - 1;  int lookupIndex=1;  long correction=0;  do {    correction=((lookupIndex == 0) || (correction != 0 && lookupIndex == radix - 1)) ? (radix - 1) : 0;    lookupIndex=(int)(val + correction) % radix;    val=(val / radix);    if (lookupIndex == 0 && val == 0)     break;    buf[charPos--]=table[lookupIndex];  } while (val > 0);  stringBuf.append(buf,charPos + 1,(buf.length - charPos - 1));}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private static String replaceStars(String init){  StringBuilder builder=new StringBuilder();  char[] chars=init.toCharArray();  for (int i=0; i < chars.length; i++) {    if (chars[i] == '*' && i == 0 && chars.length > 1 && chars[i + 1] == ' ') {      builder.append("(?:.+ |)");      i++;    } else     if (chars[i] == '*' && i < (chars.length - 1) && i > 0 && chars[i + 1] == ' ' && chars[i - 1] == ' ') {      builder.deleteCharAt(builder.length() - 1);      builder.append("(?:.+|)");    } else     if (chars[i] == '*' && i == (chars.length - 1) && i > 0 && chars[i - 1] == ' ') {      builder.deleteCharAt(builder.length() - 1);      builder.append("(?: .+|)");    } else     if (chars[i] == '*') {      builder.append("(?:.*)");    } else {      builder.append(chars[i]);    }  }  return builder.toString();}  }
class C{  public void waitForUser(){  in.nextLine();}  }
class C{  public VariablePath locationVariablePath(){  return locationVariablePath;}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  private void readChunk() throws IOException {  final ByteBuffer cb=getCommBuffer();  clearParts();  cb.clear();  int totalBytesRead=0;  do {    int bytesRead=0;    bytesRead=is.read(cb.array(),totalBytesRead,CHUNK_HEADER_LENGTH - totalBytesRead);    if (bytesRead == -1) {      throw new EOFException(LocalizedStrings.ChunkedMessage_CHUNK_READ_ERROR_CONNECTION_RESET.toLocalizedString());    }    totalBytesRead+=bytesRead;    if (this.msgStats != null) {      this.msgStats.incReceivedBytes(bytesRead);    }  } while (totalBytesRead < CHUNK_HEADER_LENGTH);  cb.rewind();  this.chunkLength=cb.getInt();  byte lastChunk=cb.get();  setLastChunk((lastChunk & 0x01) == 0x01);  if ((lastChunk & 0x02) == 0x02) {    this.securePart=new Part();    if (logger.isDebugEnabled()) {      logger.debug("ChunkedMessage.readChunk() securePart present");    }  }  cb.clear();  if ((lastChunk & 0x01) == 0x01) {    int numParts=lastChunk >> 5;    if (numParts > 0) {      this.numberOfParts=numParts;    }  }  readPayloadFields(this.numberOfParts,this.chunkLength);}  }
class C{  public static void send(Connection connection,Packet packet,List<String> to,List<String> cc,List<String> bcc,String replyTo,String replyRoom,boolean noReply) throws XMPPException {  String serviceAddress=getMultipleRecipienServiceAddress(connection);  if (serviceAddress != null) {    sendThroughService(connection,packet,to,cc,bcc,replyTo,replyRoom,noReply,serviceAddress);  } else {    if (noReply || (replyTo != null && replyTo.trim().length() > 0) || (replyRoom != null && replyRoom.trim().length() > 0)) {      throw new XMPPException("Extended Stanza Addressing not supported by server");    }    sendToIndividualRecipients(connection,packet,to,cc,bcc);  }}  }
class C{  private void handleDimmerChange(final int idx,final int value,boolean selector){  listener.onDimmerChange(idx,value,selector);}  }
class C{  public boolean userCanDeleteArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentArchMgrId=Defs.NULL_ID;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeArchIdQual(archId));    if (parentId == Defs.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=this.getDirMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,Defs.NULL_ID,parentArchMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  long startTime=System.currentTimeMillis();  TaskTypes type=task.getTaskType();  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_FIRST) {    this.sqlEncoder.init();    this.processingTimeSQL=0;  }  super.process(task);  this.processingTimeSQL+=System.currentTimeMillis() - startTime;  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_LAST) {    ArticleInformation info=task.getHeader();    info.setEncodedSize(this.sqlEncoder.getEncodedSize());    info.setEncodedSQLSize(this.sqlEncoder.getEncodedSQLSize());    info.setExitingTime(System.currentTimeMillis());    info.setProcessingTimeSQL(processingTimeSQL);    String succesReport=info.toString();    this.outputLogger.logMessage(Level.INFO,"\r\n" + succesReport);  }}  }
class C{  public boolean isActive(){  return m_active;}  }
class C{  private boolean isSucceed(Configuration config){  String status=config.getConfig(IpReconfigConstants.CONFIG_STATUS_KEY);  return status.equals(ClusterNetworkReconfigStatus.Status.SUCCEED.toString());}  }
class C{  protected View makeControllerView(){  LayoutInflater inflate=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mRoot=inflate.inflate(R.layout.player_controller,null);  initControllerView(mRoot);  return mRoot;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public String combine(List<String> files,String outFile) throws Exception {  ArrayList<String> cmd=new ArrayList<String>();  cmd.add(soxBin);  for (  String file : files) {    cmd.add(file);  }  cmd.add(outFile);  int rc=execSox(cmd,callback);  if (rc != 0) {    throw new Exception("exit code: " + rc);  }  return outFile;}  }
class C{  public LinkDatum(String url){  this(url,"",System.currentTimeMillis());}  }
class C{  protected boolean endsWithQuote(Word w){  return w.form.endsWith("'") || w.form.endsWith("''") || w.form.endsWith("'''")|| w.form.endsWith("\"")|| w.form.endsWith("'\"");}  }
class C{  protected static List<View> removeChainLeafView(Viewable parentViewable,Viewable viewToRemove){  List<View> removedViews=new LinkedList<View>();  if (viewToRemove.hasViews()) {    return removedViews;  }  List<View> viewPath=ViewSupport.findDescendent(parentViewable,viewToRemove);  if (viewPath == null) {    String message="Viewable not found when removing view " + viewToRemove;    throw new IllegalArgumentException(message);  }  if (viewPath.isEmpty()) {    boolean isViewRemoved=parentViewable.removeView((View)viewToRemove);    if (!isViewRemoved) {      String message="Failed to remove immediate child view " + viewToRemove;      log.error(".remove " + message);      throw new IllegalStateException(message);    }    removedViews.add((View)viewToRemove);    return removedViews;  }  View[] viewPathArray=viewPath.toArray(new View[viewPath.size()]);  View currentView=(View)viewToRemove;  for (int index=viewPathArray.length - 1; index >= 0; index--) {    boolean isViewRemoved=viewPathArray[index].removeView(currentView);    removedViews.add(currentView);    if (!isViewRemoved) {      String message="Failed to remove view " + currentView;      log.error(".remove " + message);      throw new IllegalStateException(message);    }    if (viewPathArray[index].hasViews()) {      break;    }    if (index == 0) {      parentViewable.removeView(viewPathArray[0]);      removedViews.add(viewPathArray[0]);    } else {      currentView=viewPathArray[index];    }  }  return removedViews;}  }
class C{  private Date maxDate(@Nullable Date d1,@Nullable Date d2){  if (d1 == null)   return d2;  if (d2 == null)   return d1;  return d1.before(d2) ? d2 : d1;}  }
class C{  @Inject public WorkBenchPresenter(WorkBenchViewImpl view,EditorPartStack editorPartStackPresenter,PartStackPresenterFactory stackPresenterFactory,PartStackViewFactory partViewFactory,OutlinePart outlinePart,ProjectExplorerPart projectExplorerPart,NotificationManager notificationManager,HideWidgetCallback hideWidgetCallback){  this.view=view;  partStacks.put(PartStackType.EDITING.toString(),editorPartStackPresenter);  PartStackView navigationView=partViewFactory.create(PartStackView.TabPosition.LEFT,view.leftPanel);  PartStack navigationPartStack=stackPresenterFactory.create(navigationView,new WorkBenchPartControllerImpl(view.splitPanel,view.navPanel,hideWidgetCallback));  partStacks.put(PartStackType.NAVIGATION.toString(),navigationPartStack);  PartStackView informationView=partViewFactory.create(PartStackView.TabPosition.BELOW,view.bottomPanel);  PartStack informationStack=stackPresenterFactory.create(informationView,new WorkBenchPartControllerImpl(view.splitPanel,view.infoPanel,hideWidgetCallback));  partStacks.put(PartStackType.INFORMATION.toString(),informationStack);  PartStackView toolingView=partViewFactory.create(PartStackView.TabPosition.RIGHT,view.rightPanel);  PartStack toolingPartStack=stackPresenterFactory.create(toolingView,new WorkBenchPartControllerImpl(view.splitPanel,view.toolPanel,hideWidgetCallback));  partStacks.put(PartStackType.TOOLING.toString(),toolingPartStack);  openPart(outlinePart,PartStackType.TOOLING);  openPart(projectExplorerPart,PartStackType.NAVIGATION);  openPart(notificationManager,PartStackType.INFORMATION,Constraints.FIRST);  setActivePart(projectExplorerPart);}  }
class C{  @NonNull public final View child(){  return child;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean startsWith(byte[] bytes,byte[] prefix){  if (bytes == null || prefix == null || bytes.length < prefix.length) {    return false;  }  for (int i=0; i < prefix.length; i++) {    if (bytes[i] != prefix[i]) {      return false;    }  }  return true;}  }
class C{  public static <T,X extends Throwable>Subscription forEachXEvents(final Stream<T> stream,final long x,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError,final Runnable onComplete){  val t2=FutureStreamUtils.forEachXEvents(stream,x,consumerElement,consumerError,onComplete);  t2.v2.run();  return t2.v1.join();}  }
class C{  public static Texture createTexture(URL url,boolean flip){  Image image=loadImage(url,flip);  return (createTexture(image));}  }
class C{  public static <T>Predicate<T> or(Iterable<? extends Predicate<? super T>> components){  return new OrPredicate(components);}  }
class C{  private static boolean permissionExists(String permission){  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;}  }
class C{  private View findReferenceChildClosestToEnd(RecyclerView.State state){  return mShouldReverseLayout ? findFirstReferenceChild(state.getItemCount()) : findLastReferenceChild(state.getItemCount());}  }
class C{  public <T>void addToRequestQueue(Request<T> req,String tag){  try {    req.setRetryPolicy(new DefaultRetryPolicy(1000 * 10,DefaultRetryPolicy.DEFAULT_MAX_RETRIES,DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));    Log.d(TAG,"addToRequestQueue >> Making Request " + req.getUrl() + " With parameters "+ new String(req.getBody()));  } catch (  AuthFailureError authFailureError) {    authFailureError.printStackTrace();    Log.e(TAG,"addToRequestQueue failed >> " + authFailureError);  }  req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);  getRequestQueue(mContext).add(req);}  }
class C{  public boolean isValid(){  if (numVertices < 3) {    log.info("Degenerate loop");    return false;  }  for (int i=0; i < numVertices; ++i) {    if (!S2.isUnitLength(vertex(i))) {      log.info("Vertex " + i + " is not unit length");      return false;    }  }  HashMap<S2Point,Integer> vmap=Maps.newHashMap();  for (int i=0; i < numVertices; ++i) {    Integer previousVertexIndex=vmap.put(vertex(i),i);    if (previousVertexIndex != null) {      log.info("Duplicate vertices: " + previousVertexIndex + " and "+ i);      return false;    }  }  boolean crosses=false;  DataEdgeIterator it=getEdgeIterator(numVertices);  for (int a1=0; a1 < numVertices; a1++) {    int a2=(a1 + 1) % numVertices;    EdgeCrosser crosser=new EdgeCrosser(vertex(a1),vertex(a2),vertex(0));    int previousIndex=-2;    for (it.getCandidates(vertex(a1),vertex(a2)); it.hasNext(); it.next()) {      int b1=it.index();      int b2=(b1 + 1) % numVertices;      if (a1 != b2 && a2 != b1 && a1 != b1) {        double abc=S2.angle(vertex(a1),vertex(a2),vertex(b1));        boolean abcNearlyLinear=S2.approxEquals(abc,0D,MAX_INTERSECTION_ERROR) || S2.approxEquals(abc,S2.M_PI,MAX_INTERSECTION_ERROR);        double abd=S2.angle(vertex(a1),vertex(a2),vertex(b2));        boolean abdNearlyLinear=S2.approxEquals(abd,0D,MAX_INTERSECTION_ERROR) || S2.approxEquals(abd,S2.M_PI,MAX_INTERSECTION_ERROR);        if (abcNearlyLinear && abdNearlyLinear) {          continue;        }        if (previousIndex != b1) {          crosser.restartAt(vertex(b1));        }        crosses=crosser.robustCrossing(vertex(b2)) > 0;        previousIndex=b2;        if (crosses) {          log.info("Edges " + a1 + " and "+ b1+ " cross");          log.info(String.format("Edge locations in degrees: " + "%s-%s and %s-%s",new S2LatLng(vertex(a1)).toStringDegrees(),new S2LatLng(vertex(a2)).toStringDegrees(),new S2LatLng(vertex(b1)).toStringDegrees(),new S2LatLng(vertex(b2)).toStringDegrees()));          return false;        }      }    }  }  return true;}  }
class C{  private void incLowRedundancyBucketCount(int val){  final int HAS_LOW_REDUNDANCY=0;  final int ALREADY_GENERATED_WARNING=1;  final PartitionedRegionStats stats=getPartitionedRegionStats();  final boolean[] lowRedundancyFlags=this.regionAdvisor.getLowRedundancyFlags();  final int configuredRedundancy=this.pRegion.getRedundantCopies();synchronized (lowRedundancyFlags) {    stats.incLowRedundancyBucketCount(val);    if (stats.getLowRedundancyBucketCount() == 0) {      lowRedundancyFlags[HAS_LOW_REDUNDANCY]=false;      lowRedundancyFlags[ALREADY_GENERATED_WARNING]=false;      stats.setActualRedundantCopies(configuredRedundancy);    } else {      int numBucketHosts=getBucketRedundancy() + 1;      int actualRedundancy=Math.max(numBucketHosts - 1,0);      if (actualRedundancy < stats.getActualRedundantCopies()) {        lowRedundancyFlags[ALREADY_GENERATED_WARNING]=false;      }      if (!lowRedundancyFlags[HAS_LOW_REDUNDANCY] || !lowRedundancyFlags[ALREADY_GENERATED_WARNING]) {        lowRedundancyFlags[HAS_LOW_REDUNDANCY]=true;        stats.setActualRedundantCopies(actualRedundancy);        if (!lowRedundancyFlags[ALREADY_GENERATED_WARNING] && this.redundancyEverSatisfied) {          lowRedundancyFlags[ALREADY_GENERATED_WARNING]=true;          logger.warn(LocalizedMessage.create(LocalizedStrings.BucketAdvisor_REDUNDANCY_HAS_DROPPED_BELOW_0_CONFIGURED_COPIES_TO_1_ACTUAL_COPIES_FOR_2,new Object[]{Integer.valueOf(configuredRedundancy),Integer.valueOf(actualRedundancy),this.pRegion.getFullPath()}));        }      }    }  }}  }
class C{  public IOUtils(){  super();}  }
class C{  public java.util.ArrayList toList(){  int mySize=size();  Object[] theElements=elements;  java.util.ArrayList list=new java.util.ArrayList(mySize);  for (int i=0; i < mySize; i++)   list.add(theElements[i]);  return list;}  }
class C{  public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){  List<SpaceTime> points=new LinkedList<SpaceTime>();  points.add(start);  points.add(end);  stop=false;  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {    return points;  }  stop=false;  return null;}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  @Inline private static void putfieldStoreBarrierHelper(Assembler asm,BaselineCompilerImpl compiler,Offset fieldOffset,int locationMetadata,NormalMethod barrier){  asm.emitPUSH_Imm(fieldOffset.toInt());  asm.emitPUSH_Imm(locationMetadata);  MethodReference method=barrier.getMemberRef().asMethodReference();  compiler.genParameterRegisterLoad(method,false);  genNullCheck(asm,T0);  asm.generateJTOCcall(barrier.getOffset());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double blackFormula(final Option.Type optionType,@Real double strike,@Real double forward,@StdDev final double stddev,@DiscountFactor final double discount,@Real final double displacement){  QL.require(strike >= 0.0,"strike must be non-negative");  QL.require(forward > 0.0,"forward must be positive");  QL.require(stddev >= 0.0,"stddev must be non-negative");  QL.require(discount > 0.0,"discount must be positive");  QL.require(displacement >= 0.0,"displacement must be non-negative");  forward=forward + displacement;  strike=strike + displacement;  if (stddev == 0.0)   return Math.max((forward - strike) * optionType.toInteger(),(0.0d)) * discount;  if (strike == 0.0)   return (optionType == Option.Type.Call ? forward * discount : 0.0);  @Real final double d1=Math.log(forward / strike) / stddev + 0.5 * stddev;  @Real final double d2=d1 - stddev;  final CumulativeNormalDistribution phi=new CumulativeNormalDistribution();  @Real final double result=discount * optionType.toInteger() * (forward * phi.op(optionType.toInteger() * d1) - strike * phi.op(optionType.toInteger() * d2));  if (result >= 0.0)   return result;  throw new ArithmeticException("a negative value was calculated");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Era(String name,String abbr,long since,boolean localTime){  this.name=name;  this.abbr=abbr;  this.since=since;  this.localTime=localTime;  Gregorian gcal=CalendarSystem.getGregorianCalendar();  BaseCalendar.Date d=(BaseCalendar.Date)gcal.newCalendarDate(null);  gcal.getCalendarDate(since,d);  sinceDate=new ImmutableGregorianDate(d);}  }
class C{  protected List<Itemset> aprioriGenerate(List<? extends Itemset> supported,int length,int dim){  if (supported.size() < length) {    return Collections.emptyList();  }  long joined=0L;  final int ssize=supported.size();  List<Itemset> candidateList=new ArrayList<>();  Itemset ref=supported.get(0);  if (ref instanceof SparseItemset) {    SparseItemset scratch=new SparseItemset(new int[length - 1]);    for (int i=0; i < ssize; i++) {      SparseItemset ii=(SparseItemset)supported.get(i);      prefix:       for (int j=i + 1; j < ssize; j++) {        SparseItemset ij=(SparseItemset)supported.get(j);        if (!ii.prefixTest(ij)) {          break prefix;        }        joined++;        System.arraycopy(ii.indices,1,scratch.indices,0,length - 2);        scratch.indices[length - 2]=ij.indices[length - 2];        for (int k=length - 3; k >= 0; k--) {          scratch.indices[k]=ii.indices[k + 1];          int pos=Collections.binarySearch(supported,scratch);          if (pos < 0) {            continue prefix;          }        }        int[] items=new int[length];        System.arraycopy(ii.indices,0,items,0,length - 1);        items[length - 1]=ij.indices[length - 2];        candidateList.add(new SparseItemset(items));      }    }  } else   if (ref instanceof DenseItemset) {    DenseItemset scratch=new DenseItemset(BitsUtil.zero(dim),length - 1);    for (int i=0; i < ssize; i++) {      DenseItemset ii=(DenseItemset)supported.get(i);      prefix:       for (int j=i + 1; j < ssize; j++) {        DenseItemset ij=(DenseItemset)supported.get(j);        System.arraycopy(ii.items,0,scratch.items,0,ii.items.length);        BitsUtil.xorI(scratch.items,ij.items);        if (BitsUtil.cardinality(scratch.items) != 2) {          break prefix;        }        ++joined;        int first=BitsUtil.nextSetBit(scratch.items,0);        if (BitsUtil.nextSetBit(ii.items,first + 1) > -1) {          break prefix;        }        BitsUtil.orI(scratch.items,ij.items);        for (int l=length, b=BitsUtil.nextSetBit(scratch.items,0); l > 2; l--, b=BitsUtil.nextSetBit(scratch.items,b + 1)) {          BitsUtil.clearI(scratch.items,b);          int pos=Collections.binarySearch(supported,scratch);          if (pos < 0) {            continue prefix;          }          BitsUtil.setI(scratch.items,b);        }        candidateList.add(new DenseItemset(scratch.items.clone(),length));      }    }  } else {    throw new InconsistentDataException("Unexpected itemset type " + ref.getClass());  }  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(STAT + length + "-items.pairwise",(ssize * ((long)ssize - 1))));    LOG.statistics(new LongStatistic(STAT + length + "-items.joined",joined));    LOG.statistics(new LongStatistic(STAT + length + "-items.candidates",candidateList.size()));  }  return candidateList;}  }
class C{  public boolean forceReparsing(Parser parser){  for (int i=0; i < getParserCount(); i++) {    if (getParser(i) == parser) {      forceReparsing(i);      return true;    }  }  return false;}  }
class C{  private void showContextMenu(final PInputEvent event){  JPopupMenu contextMenu=getContextMenu();  Point2D canvasPosition=event.getCanvasPosition();  contextMenu.show((PCanvas)event.getComponent(),(int)canvasPosition.getX(),(int)canvasPosition.getY());}  }
class C{  public Property weekOfWeekyear(){  return new Property(this,getChronology().weekOfWeekyear());}  }
class C{  public void charToAscii() throws IOException {  print("charToAscii",null);}  }
class C{  public String toString(){  return name;}  }
class C{  public PullUpPoint(String sidc){  super(sidc);  this.setRadius(DEFAULT_RADIUS);}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public void gotoViewpoint(ViewpointStore vp){  int index=viewpointList.indexOf(vp);  if (index < 0) {    return;  }  viewpointIndex=index;  viewpointNode.setViewpoint(vp,true,true);}  }
class C{  @SuppressWarnings("unchecked") public V[] compare(V val1,V val2){  V[] result=(V[])new Number[2];  if (ascending) {    if (val1.doubleValue() < val2.doubleValue()) {      result[0]=val1;      result[1]=val2;    } else {      result[0]=val2;      result[1]=val1;    }  } else {    if (val1.doubleValue() < val2.doubleValue()) {      result[0]=val2;      result[1]=val1;    } else {      result[0]=val1;      result[1]=val2;    }  }  return result;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void save() throws IOException {  try {    final FileOutputStream fos=new FileOutputStream(new File(configfile.getFile()));    final Document doc=new DocumentImpl();    final Element collections=doc.createElement(Subcollection.TAG_COLLECTIONS);    final Iterator<Subcollection> iterator=collectionMap.values().iterator();    while (iterator.hasNext()) {      final Subcollection subCol=iterator.next();      final Element collection=doc.createElement(Subcollection.TAG_COLLECTION);      collections.appendChild(collection);      final Element name=doc.createElement(Subcollection.TAG_NAME);      name.setNodeValue(subCol.getName());      collection.appendChild(name);      final Element whiteList=doc.createElement(Subcollection.TAG_WHITELIST);      whiteList.setNodeValue(subCol.getWhiteListString());      collection.appendChild(whiteList);      final Element blackList=doc.createElement(Subcollection.TAG_BLACKLIST);      blackList.setNodeValue(subCol.getBlackListString());      collection.appendChild(blackList);    }    DomUtil.saveDom(fos,collections);    fos.flush();    fos.close();  } catch (  FileNotFoundException e) {    throw new IOException(e.toString());  }}  }
class C{  public Boolean isStatsCollectionEnabled(){  return statsCollectionEnabled;}  }
class C{  private int[] randomVector(int length,int sum){  int[] values=new int[length];  values[0]=sum;  for (int i=1; i < values.length; i++) {    values[i]=Rand.randUniform(0,sum);  }  Arrays.sort(values);  int low=0;  for (int i=0; i < values.length; i++) {    int rnd=values[i] - low;    low=values[i];    values[i]=rnd;  }  return values;}  }
class C{  void initializeStateVariables(){  int testType=_curVariable.getType();  if (log.isDebugEnabled()) {    log.debug("initializeStateVariables: testType= " + testType);  }  if (testType == Conditional.TYPE_NONE) {    return;  }  int itemType=Conditional.TEST_TO_ITEM[testType];  if (log.isDebugEnabled()) {    log.debug("initializeStateVariables: itemType= " + itemType + ", testType= "+ testType);  }  _variableTypeBox.setSelectedIndex(itemType);switch (itemType) {case Conditional.ITEM_TYPE_SENSOR:    _variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_SENSOR_TEST,testType));  _variableNameField.setText(_curVariable.getName());break;case Conditional.ITEM_TYPE_TURNOUT:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_TURNOUT_TEST,testType));_variableNameField.setText(_curVariable.getName());break;case Conditional.ITEM_TYPE_LIGHT:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_LIGHT_TEST,testType));_variableNameField.setText(_curVariable.getName());break;case Conditional.ITEM_TYPE_SIGNALHEAD:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_SIGNAL_HEAD_TEST,testType));_variableNameField.setText(_curVariable.getName());if ((Conditional.TYPE_SIGNAL_HEAD_RED <= testType && testType <= Conditional.TYPE_SIGNAL_HEAD_FLASHGREEN) || Conditional.TYPE_SIGNAL_HEAD_LUNAR == testType || Conditional.TYPE_SIGNAL_HEAD_FLASHLUNAR == testType) {_variableStateBox.setSelectedItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_SIGNAL_HEAD_TEST[1]));loadJComboBoxWithSignalAspects(_variableSignalBox,_curVariable.getName());_variableSignalBox.setSelectedItem(ConditionalVariable.getStateString(_curVariable.getType()));_variableSignalPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_SIGNALMAST:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_SIGNAL_MAST_TEST,testType));_variableNameField.setText(_curVariable.getName());if (testType == Conditional.TYPE_SIGNAL_MAST_ASPECT_EQUALS) {loadJComboBoxWithMastAspects(_variableSignalBox,_curVariable.getName());_variableSignalBox.setSelectedItem(_curVariable.getDataString());_variableSignalPanel.setVisible(true);}break;case Conditional.ITEM_TYPE_MEMORY:_variableCompareTypeBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_MEMORY_TEST,testType));_variableNameField.setText(_curVariable.getName());int num1=_curVariable.getNum1() - 1;if (num1 == -1) {num1=ConditionalVariable.EQUAL - 1;}_variableCompareOpBox.setSelectedIndex(num1);_variableData1Field.setText(_curVariable.getDataString());break;case Conditional.ITEM_TYPE_CONDITIONAL:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_CONDITIONAL_TEST,testType));_variableNameField.setText(_curVariable.getName());break;case Conditional.ITEM_TYPE_WARRANT:_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_WARRANT_TEST,testType));_variableNameField.setText(_curVariable.getName());break;case Conditional.ITEM_TYPE_CLOCK:int time=_curVariable.getNum1();_variableData1Field.setText(formatTime(time / 60,time - ((time / 60) * 60)));time=_curVariable.getNum2();_variableData2Field.setText(formatTime(time / 60,time - ((time / 60) * 60)));_variableNameField.setText("");break;case Conditional.ITEM_TYPE_OBLOCK:_variableNameField.setText(_curVariable.getName());Iterator<String> names=OBlock.getLocalStatusNames();while (names.hasNext()) {_variableStateBox.addItem(names.next());}_variableStateBox.setSelectedItem(OBlock.getLocalStatusName(_curVariable.getDataString()));_variableStateBox.setVisible(true);break;case Conditional.ITEM_TYPE_ENTRYEXIT:_variableNameField.setText(_curVariable.getBean().getUserName());_variableStateBox.setSelectedIndex(DefaultConditional.getIndexInTable(Conditional.ITEM_TO_ENTRYEXIT_TEST,testType));_variableStateBox.setVisible(true);break;default :break;}_editVariableFrame.pack();_editVariableFrame.transferFocusBackward();}  }
class C{  public void initializeGenerators(long seed){  this.rng.setSeed(seed);  if (this.baseBlockLayerVariationNoiseGen == null) {    this.baseBlockLayerVariationNoiseGen=new NoiseGeneratorPerlin(new Random(seed),4);  }  for (  BiomeFeature feature : this.biomeFeatures) {    feature.initializeGenerators(seed,this.biome);  }}  }
class C{  private void switchMapType(MapType newMapType){  assert !locked;  T[] oldKeys=keys;  float[] oldValues=values;  mapType=newMapType;  allocate(getCapacity(num,true));  numCollisions=0;  if (newMapType == MapType.SORTED_LIST) {    List<FullEntry> entries=new ArrayList<FullEntry>(num);    for (int i=0; i < oldKeys.length; i++)     if (oldKeys[i] != null)     entries.add(new FullEntry(oldKeys[i],oldValues[i]));    Collections.sort(entries);    for (int i=0; i < num; i++) {      keys[i]=entries.get(i).key;      values[i]=entries.get(i).value;    }  } else   if (mapType == MapType.HASH_TABLE) {    num=0;    for (int i=0; i < oldKeys.length; i++) {      if (oldKeys[i] != null)       put(oldKeys[i],oldValues[i]);    }  }}  }
class C{  protected String doIt() throws Exception {  m_C_ProjectPhase_ID=getRecord_ID();  log.info("doIt - C_ProjectPhase_ID=" + m_C_ProjectPhase_ID);  if (m_C_ProjectPhase_ID == 0)   throw new IllegalArgumentException("C_ProjectPhase_ID == 0");  MProjectPhase fromPhase=new MProjectPhase(getCtx(),m_C_ProjectPhase_ID,get_TrxName());  MProject fromProject=ProjectGenOrder.getProject(getCtx(),fromPhase.getC_Project_ID(),get_TrxName());  MOrder order=new MOrder(fromProject,true,MOrder.DocSubTypeSO_OnCredit);  order.setDescription(order.getDescription() + " - " + fromPhase.getName());  if (!order.save())   throw new Exception("Could not create Order");  if (fromPhase.getM_Product_ID() != 0) {    MOrderLine ol=new MOrderLine(order);    ol.setLine(fromPhase.getSeqNo());    StringBuffer sb=new StringBuffer(fromPhase.getName());    if (fromPhase.getDescription() != null && fromPhase.getDescription().length() > 0)     sb.append(" - ").append(fromPhase.getDescription());    ol.setDescription(sb.toString());    ol.setM_Product_ID(fromPhase.getM_Product_ID(),true);    ol.setQty(fromPhase.getQty());    ol.setPrice();    if (fromPhase.getPriceActual() != null && fromPhase.getPriceActual().compareTo(Env.ZERO) != 0)     ol.setPrice(fromPhase.getPriceActual());    ol.setTax();    if (!ol.save())     log.log(Level.SEVERE,"doIt - Lines not generated");    return "@C_Order_ID@ " + order.getDocumentNo() + " (1)";  }  int count=0;  MProjectLine[] lines=fromPhase.getLines();  for (int i=0; i < lines.length; i++) {    MOrderLine ol=new MOrderLine(order);    ol.setLine(lines[i].getLine());    ol.setDescription(lines[i].getDescription());    ol.setM_Product_ID(lines[i].getM_Product_ID(),true);    ol.setQty(lines[i].getPlannedQty().subtract(lines[i].getInvoicedQty()));    ol.setPrice();    if (lines[i].getPlannedPrice() != null && lines[i].getPlannedPrice().compareTo(Env.ZERO) != 0)     ol.setPrice(lines[i].getPlannedPrice());    ol.setDiscount();    ol.setTax();    if (ol.save())     count++;  }  if (lines.length != count)   log.log(Level.SEVERE,"Lines difference - ProjectLines=" + lines.length + " <> Saved="+ count);  MProjectTask[] tasks=fromPhase.getTasks();  for (int i=0; i < tasks.length; i++) {    MOrderLine ol=new MOrderLine(order);    ol.setLine(tasks[i].getSeqNo());    StringBuffer sb=new StringBuffer(tasks[i].getName());    if (tasks[i].getDescription() != null && tasks[i].getDescription().length() > 0)     sb.append(" - ").append(tasks[i].getDescription());    ol.setDescription(sb.toString());    ol.setM_Product_ID(tasks[i].getM_Product_ID(),true);    ol.setQty(tasks[i].getQty());    ol.setPrice();    ol.setTax();    if (ol.save())     count++;  }  if (tasks.length != count - lines.length)   log.log(Level.SEVERE,"doIt - Lines difference - ProjectTasks=" + tasks.length + " <> Saved="+ count);  return "@C_Order_ID@ " + order.getDocumentNo() + " ("+ count+ ")";}  }
class C{  public Instrumenter attachApproximationSetCollector(){  includeApproximationSet=true;  return this;}  }
class C{  KeyStoreState(KeyStoreHistory history,KeyStore keyStore,Password password){  this.history=history;  this.keyStore=keyStore;  this.password=password;}  }
class C{  public RefUpdateAttribute asRefUpdateAttribute(ObjectId oldId,ObjectId newId,Branch.NameKey refName){  RefUpdateAttribute ru=new RefUpdateAttribute();  ru.newRev=newId != null ? newId.getName() : ObjectId.zeroId().getName();  ru.oldRev=oldId != null ? oldId.getName() : ObjectId.zeroId().getName();  ru.project=refName.getParentKey().get();  ru.refName=refName.get();  return ru;}  }
class C{  boolean needToCompleteHandshake(){  return handshakeStatus == HandshakeStatus.NEED_WRAP && !isInboundDone();}  }
class C{  public T last(){  return isEmpty() ? null : get(0);}  }
class C{  public void testUrlConstructor() throws Exception {  new MiniAdmin(dbUrl);}  }
class C{  private Script(){  chunks=Lists.newArrayList();}  }
class C{  public int readLittleEndianUnsignedInt24(){  return (data[position++] & 0xFF) | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF) << 16;}  }
class C{  public SootClass(String name){  this(name,0);}  }
class C{  public JmsModuleScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void copy(Column source){  checkConstraint=source.checkConstraint;  checkConstraintSQL=source.checkConstraintSQL;  displaySize=source.displaySize;  name=source.name;  precision=source.precision;  scale=source.scale;  nullable=source.nullable;  defaultExpression=source.defaultExpression;  originalSQL=source.originalSQL;  convertNullToDefault=source.convertNullToDefault;  sequence=source.sequence;  comment=source.comment;  computeTableFilter=source.computeTableFilter;  isComputed=source.isComputed;  selectivity=source.selectivity;  primaryKey=source.primaryKey;}  }
class C{  public PoolParams(int maxSize,@Nullable SparseIntArray bucketSizes){  this(maxSize,maxSize,bucketSizes,0,Integer.MAX_VALUE,IGNORE_THREADS);}  }
class C{  protected synchronized Instance generateMergedInstance(InstanceHolder one,InstanceHolder two){  double[] vals=new double[m_mergedHeader.numAttributes()];  int count=0;  Instances currentStructure=m_mergedHeader;  if (m_runningIncrementally && m_stringAttsPresent) {    currentStructure=m_headerPool.get(m_count.getAndIncrement() % 10);  }  for (int i=0; i < m_headerOne.numAttributes(); i++) {    vals[count]=one.m_instance.value(i);    if (one.m_stringVals != null && one.m_stringVals.size() > 0 && m_mergedHeader.attribute(count).isString()) {      String valToSetInHeader=one.m_stringVals.get(one.m_instance.attribute(i).name());      currentStructure.attribute(count).setStringValue(valToSetInHeader);      vals[count]=0;    }    count++;  }  for (int i=0; i < m_headerTwo.numAttributes(); i++) {    vals[count]=two.m_instance.value(i);    if (two.m_stringVals != null && two.m_stringVals.size() > 0 && m_mergedHeader.attribute(count).isString()) {      String valToSetInHeader=one.m_stringVals.get(two.m_instance.attribute(i).name());      currentStructure.attribute(count).setStringValue(valToSetInHeader);      vals[count]=0;    }    count++;  }  Instance newInst=new DenseInstance(1.0,vals);  newInst.setDataset(currentStructure);  return newInst;}  }
class C{  public CertificatePolicyMap(DerValue val) throws IOException {  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for CertificatePolicyMap");  }  issuerDomain=new CertificatePolicyId(val.data.getDerValue());  subjectDomain=new CertificatePolicyId(val.data.getDerValue());}  }
class C{  public Entry(int hash,String key,Object value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public TemplateContextType(String id){  this(id,id);}  }
class C{  public void addOperationListener(OnRemoteOperationListener listener,Handler callbackHandler){synchronized (mBoundListeners) {    mBoundListeners.put(listener,callbackHandler);  }}  }
class C{  public static Object truncateNonDigits(String st,TExecutionContext context){  if (st.isEmpty())   return "0";  Matcher m=DOUBLE_PATTERN.matcher(st);  String truncated;  int last;  if (m.lookingAt() && !(truncated=st.substring(0,last=m.end())).isEmpty()) {    --last;    if (truncated.charAt(last) != st.charAt(last))     context.reportTruncate(st,truncated);    if (m.group(EXP_PART) != null)     return new BigDecimal(st);    return truncateNonDigitPlainString(truncated,context);  } else {    context.reportBadValue(st);    return "0";  }}  }
class C{  private static Class<?>[] upCast(final Class<?>[] parameterTypes){  final Class<?>[] upCastedParameters=new Class[parameterTypes.length];  for (int idx=0; idx < parameterTypes.length; idx++)   upCastedParameters[idx]=Primitives.getInstance().autoBox(parameterTypes[idx]);  return upCastedParameters;}  }
class C{  public void paint(Graphics g,Shape a){  RSyntaxDocument document=(RSyntaxDocument)getDocument();  Rectangle alloc=a.getBounds();  tabBase=alloc.x;  host=(RSyntaxTextArea)getContainer();  Rectangle clip=g.getClipBounds();  clipStart=clip.x;  clipEnd=clipStart + clip.width;  lineHeight=host.getLineHeight();  ascent=host.getMaxAscent();  int heightBelow=(alloc.y + alloc.height) - (clip.y + clip.height);  int linesBelow=Math.max(0,heightBelow / lineHeight);  int heightAbove=clip.y - alloc.y;  int linesAbove=Math.max(0,heightAbove / lineHeight);  int linesTotal=alloc.height / lineHeight;  if (alloc.height % lineHeight != 0) {    linesTotal++;  }  Rectangle lineArea=lineToRect(a,linesAbove);  int y=lineArea.y + ascent;  int x=lineArea.x;  Element map=getElement();  int lineCount=map.getElementCount();  int endLine=Math.min(lineCount,linesTotal - linesBelow);  RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)host.getHighlighter();  Graphics2D g2d=(Graphics2D)g;  Token token;  for (int line=linesAbove; line < endLine; line++) {    Element lineElement=map.getElement(line);    int startOffset=lineElement.getStartOffset();    int endOffset=lineElement.getEndOffset() - 1;    h.paintLayeredHighlights(g2d,startOffset,endOffset,a,host,this);    token=document.getTokenListForLine(line);    drawLine(token,g2d,x,y);    y+=lineHeight;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SMALLER_OP___SMALLER_OP_1:    return SMALLER_OP_1_EDEFAULT == null ? smallerOp_1 != null : !SMALLER_OP_1_EDEFAULT.equals(smallerOp_1);}return super.eIsSet(featureID);}  }
class C{  public void show(Component parent){  Dimension parentSize=parent.getSize();  Insets insets=getInsets();  parentSize.setSize(parentSize.width - (insets.right + insets.left),10 * parentSize.height);  Dimension scrollSize=computePopupBounds(parent,0,getBounds().height,parentSize.width,parentSize.height).getSize();  scroller.setMaximumSize(scrollSize);  scroller.setPreferredSize(scrollSize);  scroller.setMinimumSize(scrollSize);  super.show(parent,0,parent.getHeight());  tree.requestFocusInWindow();}  }
class C{  public boolean dispatchCommand(CommandSender sender,String commandLine,List<String> tabResults){  String[] split=commandLine.split(" ",-1);  if (split.length == 0) {    return false;  }  String commandName=split[0].toLowerCase();  if (sender instanceof ProxiedPlayer && proxy.getDisabledCommands().contains(commandName)) {    return false;  }  Command command=commandMap.get(commandName);  if (command == null) {    return false;  }  String permission=command.getPermission();  if (permission != null && !permission.isEmpty() && !sender.hasPermission(permission)) {    if (!(command instanceof TabExecutor) || tabResults == null) {      sender.sendMessage(proxy.getTranslation("no_permission"));    }    return true;  }  String[] args=Arrays.copyOfRange(split,1,split.length);  try {    if (tabResults == null) {      if (proxy.getConfig().isLogCommands()) {        proxy.getLogger().log(Level.INFO,"{0} executed command: /{1}",new Object[]{sender.getName(),commandLine});      }      command.execute(sender,args);    } else     if (commandLine.contains(" ") && command instanceof TabExecutor) {      for (      String s : ((TabExecutor)command).onTabComplete(sender,args)) {        tabResults.add(s);      }    }  } catch (  Exception ex) {    sender.sendMessage(ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details.");    ProxyServer.getInstance().getLogger().log(Level.WARNING,"Error in dispatching command",ex);  }  return true;}  }
class C{  public static <K1,V1,K2,V2>MutableMap<K2,V2> collect(Map<K1,V1> map,Function<? super K1,? extends K2> keyFunction,Function<? super V1,? extends V2> valueFunction,Map<K2,V2> target){  return MapIterate.collect(map,null,MapAdapter.adapt(target));}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  } else {    this.configfile=arg;    this.plansfile=argIter.next();    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      printUsage();      System.exit(1);    }  }}  }
class C{  public static SendableVoiceMessageBuilder builder(){  return new SendableVoiceMessageBuilder();}  }
class C{  private List<Recommendation> scheduleStorageForLocalVPLEXVolume(VirtualArray varray,Set<URI> requestedVPlexSystems,URI storageSystem,VirtualPool vpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse vPoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){  _log.info("Executing VPlex high availability placement strategy for Local VPLEX volumes");  if (storageSystem != null) {    StorageSystem sourceStorageSystem=_dbClient.queryObject(StorageSystem.class,storageSystem);    capabilities.put(VirtualPoolCapabilityValuesWrapper.SOURCE_STORAGE_SYSTEM,sourceStorageSystem);  }  List<Recommendation> recommendations=new ArrayList<Recommendation>();  Scheduler nextScheduler=_placementManager.getNextScheduler(SCHEDULER_NAME,vpool,vPoolUse);  _log.info(String.format("Calling next scheduler: %s",nextScheduler.getClass().getSimpleName()));  List<Recommendation> baseRecommendations=nextScheduler.getRecommendationsForVpool(varray,project,vpool,vPoolUse,capabilities,currentRecommendations);  _log.info(String.format("Received %d recommendations from %s",baseRecommendations.size(),nextScheduler.getClass().getSimpleName()));  List<StoragePool> allMatchingPools=_placementManager.getStoragePoolsFromRecommendations(baseRecommendations);  _log.info("Found {} matching pools for varray",allMatchingPools.size());  Map<String,List<StoragePool>> vplexPoolMapForSrcVarray=getVPlexConnectedMatchingPools(varray,requestedVPlexSystems,capabilities,allMatchingPools);  if (vplexPoolMapForSrcVarray.isEmpty()) {    _log.info("No matching pools on storage systems connected to a VPlex");    return recommendations;  }  for (  Map.Entry<String,List<StoragePool>> entry : vplexPoolMapForSrcVarray.entrySet()) {    if (entry.getValue().containsAll(allMatchingPools)) {      _log.info(String.format("Generating local recommendations for VPLEX %s",entry.getKey()));      recommendations.addAll(createVPlexRecommendations(baseRecommendations,entry.getKey(),varray,vpool));      break;    }  }  if (recommendations.isEmpty()) {    _log.info("No single VPLEX could front the entire set of recommendations");  }  _placementManager.logRecommendations("VPLEX Local",recommendations);  return recommendations;}  }
class C{  public static <T>T checkNonNull(T t){  if (t == null)   error();  return t;}  }
class C{  public static <S extends HasFormSubmitFailedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    FormSubmitFailedEvent event=new FormSubmitFailedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  Number v=dataset.getValue(row,column);  if (v == null) {    return;  }  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  PlotOrientation orientation=plot.getOrientation();  double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),adjusted,plot.getDomainAxisEdge());  double value=v.doubleValue();  double y1=rangeAxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());  Shape shape=getItemShape(row,column);  if (orientation == PlotOrientation.HORIZONTAL) {    shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);  } else   if (orientation == PlotOrientation.VERTICAL) {    shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);  }  if (pass == 0 && getItemLineVisible(row,column)) {    if (column != 0) {      Number previousValue=dataset.getValue(row,column - 1);      if (previousValue != null) {        double previous=previousValue.doubleValue();        double x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),adjusted,plot.getDomainAxisEdge());        double y0=rangeAxis.valueToJava2D(previous,adjusted,plot.getRangeAxisEdge());        double x2=x0 + getXOffset();        double y2=y0 - getYOffset();        double x3=x1 + getXOffset();        double y3=y1 - getYOffset();        GeneralPath clip=new GeneralPath();        if (orientation == PlotOrientation.HORIZONTAL) {          clip.moveTo((float)y0,(float)x0);          clip.lineTo((float)y1,(float)x1);          clip.lineTo((float)y3,(float)x3);          clip.lineTo((float)y2,(float)x2);          clip.lineTo((float)y0,(float)x0);          clip.closePath();        } else         if (orientation == PlotOrientation.VERTICAL) {          clip.moveTo((float)x0,(float)y0);          clip.lineTo((float)x1,(float)y1);          clip.lineTo((float)x3,(float)y3);          clip.lineTo((float)x2,(float)y2);          clip.lineTo((float)x0,(float)y0);          clip.closePath();        }        g2.setPaint(getItemPaint(row,column));        g2.fill(clip);        g2.setStroke(getItemOutlineStroke(row,column));        g2.setPaint(getItemOutlinePaint(row,column));        g2.draw(clip);      }    }  }  if (pass == 1 && isItemLabelVisible(row,column)) {    if (orientation == PlotOrientation.HORIZONTAL) {      drawItemLabel(g2,orientation,dataset,row,column,y1,x1,(value < 0.0));    } else     if (orientation == PlotOrientation.VERTICAL) {      drawItemLabel(g2,orientation,dataset,row,column,x1,y1,(value < 0.0));    }  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,shape);  }}  }
class C{  public void boardLoad(){  FileDialog fd=new FileDialog(this,"Load Board...",FileDialog.LOAD);  fd.setDirectory("data" + File.separator + "boards");  if (boardName.getText().length() > 0) {    fd.setFile(boardName.getText());  }  fd.setLocation(this.getLocation().x + 150,this.getLocation().y + 100);  fd.setVisible(true);  if (fd.getFile() == null) {    return;  }  String curpath=fd.getDirectory();  String curfile=fd.getFile();  try {    InputStream is=new FileInputStream(new File(curpath,curfile));    board.load(is);    is.close();    boardName.setText(curfile);    butSend.setEnabled(true);  } catch (  IOException ex) {    System.err.println("error opening file to save!");    System.err.println(ex);  }}  }
class C{  public static Object atomUnMarshall(String oDataEntityXml) throws UnsupportedEncodingException, ODataException {  return atomUnmarshall(oDataEntityXml,getDefaultTestUri());}  }
class C{  public static int checkedCompare(Comparable o1,Comparable o2){  if (o1 == null) {    if (o2 == null)     return 0; else     return 1;  } else   if (o2 == null) {    if (o1 == null)     return 0; else     return -1;  }  return o1.compareTo(o2);}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  if (e != null) {    TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());    TreeStateNode changedNode;    changedNode=getNodeForPath(changedPath,false,false);    if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() == 1)))) {      rebuild(true);    } else     if (changedNode != null) {      int nodeIndex, oldRow;      TreeStateNode newNode, parent;      boolean wasExpanded, wasVisible;      int newIndex;      wasExpanded=changedNode.isExpanded();      wasVisible=(changedNode.getRow() != -1);      parent=(TreeStateNode)changedNode.getParent();      nodeIndex=parent.getIndex(changedNode);      if (wasVisible && wasExpanded) {        changedNode.collapse(false);      }      if (wasVisible)       visibleNodes.removeElement(changedNode);      changedNode.removeFromParent();      createNodeAt(parent,nodeIndex);      newNode=(TreeStateNode)parent.getChildAt(nodeIndex);      if (wasVisible && wasExpanded)       newNode.expand(false);      newIndex=newNode.getRow();      if (!isFixedRowHeight() && wasVisible) {        if (newIndex == 0)         updateYLocationsFrom(newIndex); else         updateYLocationsFrom(newIndex - 1);        this.visibleNodesChanged();      } else       if (wasVisible)       this.visibleNodesChanged();    }  }}  }
class C{  public boolean engineCanResolve(Element element,String BaseURI,StorageResolver storage){  if (XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_X509DATA) || XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    return true;  }  return false;}  }
class C{  public static boolean isHighlightStyleState(KMLAbstractSubStyle subStyle){  if (subStyle == null)   return false;  String styleState=(String)subStyle.getField(KMLConstants.STYLE_STATE);  return styleState != null && styleState.equals(KMLConstants.HIGHLIGHT);}  }
class C{  public Shortcut(String id,String text){  super(new ShortcutCell());  setIconAlign(IconAlign.TOP);  setId(id);  setText(text);  setWidth(70);}  }
class C{  public Double earlyAbandonedDistance(double[] series1,double[] series2,double cutoff) throws Exception {  if (series1.length == series2.length) {    double cutOff2=cutoff;    if (Double.MAX_VALUE != cutoff) {      cutOff2=cutoff * cutoff;    }    Double res=0D;    for (int i=0; i < series1.length; i++) {      res=res + distance2(series1[i],series2[i]);      if (res > cutOff2) {        return Double.NaN;      }    }    return Math.sqrt(res);  } else {    throw new Exception("Exception in Euclidean distance: array lengths are not equal");  }}  }
class C{  @Override public boolean supportsOpenStatementsAcrossRollback(){  debugCodeCall("supportsOpenStatementsAcrossRollback");  return true;}  }
class C{  protected Class recompile(URL source,String className,Class oldClass) throws CompilationFailedException, IOException {  if (source != null) {    if ((oldClass != null && isSourceNewer(source,oldClass)) || (oldClass == null)) {synchronized (sourceCache) {        String name=source.toExternalForm();        sourceCache.remove(name);        if (isFile(source)) {          try {            return parseClass(new GroovyCodeSource(new File(source.toURI()),config.getSourceEncoding()));          } catch (          URISyntaxException e) {          }        }        return parseClass(source.openStream(),name);      }    }  }  return oldClass;}  }
class C{  private boolean isLeftRight(){  return (m_to.x + m_to.width <= m_from.x);}  }
class C{  public void configure(){  SerialTrafficController.instance().connectPort(this);  jmri.InstanceManager.setTurnoutManager(jmri.jmrix.secsi.SerialTurnoutManager.instance());  jmri.InstanceManager.setLightManager(jmri.jmrix.secsi.SerialLightManager.instance());  SerialSensorManager s;  jmri.InstanceManager.setSensorManager(s=jmri.jmrix.secsi.SerialSensorManager.instance());  SerialTrafficController.instance().setSensorManager(s);  jmri.jmrix.secsi.ActiveFlag.setActive();}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public CustomGarbageCollectorMetricSet(){  this(ManagementFactory.getGarbageCollectorMXBeans());}  }
class C{  public boolean isSymmetric(){  return m_Matrix.isSymmetric();}  }
class C{  public static void main(String[] args){  if (args.length != 6) {    System.err.println("Usage: AER <fCorpus> <eCorpus> <refAlignment> <refUCB> <hypAlignment> <hypUCB>");    System.err.println("where:");    System.err.println("  fCorpus: source-language text");    System.err.println("  eCorpus: target-language text");    System.err.println("  refAlignment: reference word alignment");    System.err.println("  refUCB: set to true if refAlignment in UCB alignment format (default: Moses format)");    System.err.println("  hypAlignment: system word alignment");    System.err.println("  hypUCB: set to true if hypAlignment in UCB alignment format (default: Moses format)");    System.err.println("Wrong number of args: " + args.length);    System.exit(1);  }  boolean r_s2t=true, r_zeroBased=false, h_s2t=true, h_zeroBased=false;  if (Boolean.parseBoolean(args[3])) {    r_s2t=false;    r_zeroBased=true;  }  if (Boolean.parseBoolean(args[5])) {    h_s2t=false;    h_zeroBased=true;  }  Iterator<String> fCorpus=ObjectBank.getLineIterator(args[0]).iterator(), eCorpus=ObjectBank.getLineIterator(args[1]).iterator(), rCorpus=ObjectBank.getLineIterator(args[2]).iterator(), hCorpus=ObjectBank.getLineIterator(args[4]).iterator();  List<SymmetricalWordAlignment> rAlign=new ArrayList<SymmetricalWordAlignment>();  List<SymmetricalWordAlignment> hAlign=new ArrayList<SymmetricalWordAlignment>();  int lineNb=0;  while (fCorpus.hasNext()) {    ++lineNb;    System.err.println("line : " + lineNb);    String fLine=fCorpus.next();    String eLine=eCorpus.next();    String rLine=rCorpus.next();    String hLine=hCorpus.next();    assert (eLine != null && rLine != null && hLine != null);    boolean isHyp=false;    try {      rAlign.add(new SymmetricalWordAlignment(fLine,eLine,rLine,r_s2t,r_zeroBased));      isHyp=true;      hAlign.add(new SymmetricalWordAlignment(fLine,eLine,hLine,h_s2t,h_zeroBased));    } catch (    RuntimeException e) {      System.err.printf("Error at line: %d\n",lineNb);      System.err.printf("ref: %s\neline: %s\nfline: %s\naline: %s\n",!isHyp,fLine,eLine,(isHyp ? hLine : rLine));      e.printStackTrace();      System.exit(1);    }  }  assert (!eCorpus.hasNext());  assert (!rCorpus.hasNext());  assert (!hCorpus.hasNext());  System.out.println(computeAER(rAlign.toArray(new SymmetricalWordAlignment[rAlign.size()]),hAlign.toArray(new SymmetricalWordAlignment[hAlign.size()])));}  }
class C{  public void run() throws SQLException, EntityException {  final String query=String.format("INSERT INTO %s (" + "audit_log_id, " + "category, "+ "type, "+ "name, "+ "serialized_object) "+ "VALUES (?, ?, ?, ?, ?)",tableName);  PreparedStatement ps=connection.prepareStatement(query);  Set<org.apache.hadoop.hive.ql.metadata.Table> tableForPartition=new HashSet<>();  String commandType=sessionStateLite.getCommandType();  String[] thriftCommandTypes={"THRIFT_ADD_PARTITION","THRIFT_ALTER_PARTITION","THRIFT_ALTER_TABLE","THRIFT_CREATE_DATABASE","THRIFT_CREATE_TABLE","THRIFT_DROP_DATABASE","THRIFT_DROP_PARTITION","THRIFT_DROP_TABLE"};  if (Arrays.asList(thriftCommandTypes).contains(commandType)) {    for (    ReadEntity entity : readEntities) {      if (entity.getType() == Entity.Type.PARTITION) {        addToObjectsTable(ps,auditLogId,ObjectCategory.REFERENCE_TABLE,new ReadEntity(entity.getT()));      }      addToObjectsTable(ps,auditLogId,ObjectCategory.INPUT,entity);    }    for (    WriteEntity entity : writeEntities) {      if (entity.getType() == Entity.Type.PARTITION) {        addToObjectsTable(ps,auditLogId,ObjectCategory.REFERENCE_TABLE,new WriteEntity(entity.getT(),WriteType.INSERT));      }      addToObjectsTable(ps,auditLogId,ObjectCategory.OUTPUT,entity);    }  } else {    boolean renameTable="ALTERTABLE_RENAME".equals(commandType);    boolean renamePartition="ALTERTABLE_RENAMEPART".equals(commandType) || "ALTERTABLE_EXCHANGEPARTITION".equals(commandType);    boolean renameOperation=renameTable || renamePartition;    String renameFromObject=null;    if (renameOperation) {      for (      ReadEntity entity : readEntities) {        if (renamePartition && entity.getType() == Entity.Type.TABLE) {          continue;        }        addToObjectsTable(ps,auditLogId,ObjectCategory.RENAME_FROM,entity);        renameFromObject=toIdentifierString(entity);      }    }    for (    Entity entity : writeEntities) {      if (renameOperation && toIdentifierString(entity).equals(renameFromObject)) {        continue;      }      addToObjectsTable(ps,auditLogId,ObjectCategory.OUTPUT,entity);      if (entity.getType() == Entity.Type.PARTITION || entity.getType() == Entity.Type.DUMMYPARTITION) {        tableForPartition.add(entity.getPartition().getTable());      }    }    for (    org.apache.hadoop.hive.ql.metadata.Table t : tableForPartition) {      WriteEntity entity=new WriteEntity(t,WriteEntity.WriteType.DDL_NO_LOCK);      addToObjectsTable(ps,auditLogId,ObjectCategory.REFERENCE_TABLE,entity);    }  }}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  ImmutableMap<Class<? extends B>,B> map=mapBuilder.build();  if (map.isEmpty()) {    return of();  } else {    return new ImmutableClassToInstanceMap<B>(map);  }}  }
class C{  public static void addValidator(IFDeployExternalValidator validator){  ValidatorRegistry.addValidator(validator,FAST);}  }
class C{  private void paintPreview(int dx,int dy,float zoomfactor){  if (image != null) {    Graphics2D g2=(Graphics2D)getGraphics();    UColor bg=renderer.getBackgroundColor();    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));    int newWidth=Math.round(image.getWidth(null) * zoomfactor);    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);    g2.drawImage(image,dx,dy,newWidth,newHeight,null);    if (dx > 0)     g2.clearRect(0,0,dx,getHeight()); else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy); else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());  }}  }
class C{  public static void main(String[] args) throws Exception {  int timeout=Integer.MIN_VALUE;  int maxContentLength=Integer.MIN_VALUE;  String logLevel="info";  boolean followTalk=false;  boolean keepConnection=false;  boolean dumpContent=false;  String urlString=null;  String usage="Usage: Ftp [-logLevel level] [-followTalk] [-keepConnection] [-timeout N] [-maxContentLength L] [-dumpContent] url";  if (args.length == 0) {    System.err.println(usage);    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("-logLevel")) {      logLevel=args[++i];    } else     if (args[i].equals("-followTalk")) {      followTalk=true;    } else     if (args[i].equals("-keepConnection")) {      keepConnection=true;    } else     if (args[i].equals("-timeout")) {      timeout=Integer.parseInt(args[++i]) * 1000;    } else     if (args[i].equals("-maxContentLength")) {      maxContentLength=Integer.parseInt(args[++i]);    } else     if (args[i].equals("-dumpContent")) {      dumpContent=true;    } else     if (i != args.length - 1) {      System.err.println(usage);      System.exit(-1);    } else {      urlString=args[i];    }  }  Ftp ftp=new Ftp();  ftp.setFollowTalk(followTalk);  ftp.setKeepConnection(keepConnection);  if (timeout != Integer.MIN_VALUE)   ftp.setTimeout(timeout);  if (maxContentLength != Integer.MIN_VALUE)   ftp.setMaxContentLength(maxContentLength);  Content content=ftp.getProtocolOutput(new Text(urlString),new CrawlDatum()).getContent();  System.err.println("Content-Type: " + content.getContentType());  System.err.println("Content-Length: " + content.getMetadata().get(Response.CONTENT_LENGTH));  System.err.println("Last-Modified: " + content.getMetadata().get(Response.LAST_MODIFIED));  if (dumpContent) {    System.out.print(new String(content.getContent()));  }  ftp=null;}  }
class C{  public static ModifiableDBIDs randomSample(DBIDs source,int k,Long seed){  if (seed != null) {    return randomSample(source,k,new Random(seed.longValue()));  } else {    return randomSample(source,k,new Random());  }}  }
class C{  public void testReadAllLines() throws IOException {  Files.write(tmpfile,new byte[0]);  List<String> lines=Files.readAllLines(tmpfile,US_ASCII);  assertTrue(lines.isEmpty(),"No line expected");  byte[] hi={(byte)'h',(byte)'i'};  Files.write(tmpfile,hi);  lines=Files.readAllLines(tmpfile,US_ASCII);  assertTrue(lines.size() == 1,"One line expected");  assertTrue(lines.get(0).equals("hi"),"'Hi' expected");  List<String> expected=Arrays.asList("hi","there");  Files.write(tmpfile,expected,US_ASCII);  assertTrue(Files.size(tmpfile) > 0,"File is empty");  lines=Files.readAllLines(tmpfile,US_ASCII);  assertTrue(lines.equals(expected),"Unexpected lines");  byte[] bad={(byte)0xff,(byte)0xff};  Files.write(tmpfile,bad);  try {    Files.readAllLines(tmpfile,US_ASCII);    fail("MalformedInputException expected");  } catch (  MalformedInputException ignore) {  }}  }
class C{  public void write(final String s) throws IOException {  if (m_writer != null)   m_writer.write(s);  final int length=s.length();  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  for (int i=0; i < length; i++) {    final char c=s.charAt(i);    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),jHipsterProperties.getSwagger().getContact(),jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).genericModelSubstitutes(ResponseEntity.class).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).directModelSubstitute(java.time.LocalDate.class,String.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  @Override public boolean usesLocalFiles(){  debugCodeCall("usesLocalFiles");  return true;}  }
class C{  public static String format(Date date,boolean millis,TimeZone tz){  Calendar calendar=new GregorianCalendar(tz,Locale.US);  calendar.setTime(date);  int capacity="yyyy-MM-ddThh:mm:ss".length();  capacity+=millis ? ".sss".length() : 0;  capacity+=tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();  StringBuilder formatted=new StringBuilder(capacity);  padInt(formatted,calendar.get(Calendar.YEAR),"yyyy".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.MONTH) + 1,"MM".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.DAY_OF_MONTH),"dd".length());  formatted.append('T');  padInt(formatted,calendar.get(Calendar.HOUR_OF_DAY),"hh".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.MINUTE),"mm".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.SECOND),"ss".length());  if (millis) {    formatted.append('.');    padInt(formatted,calendar.get(Calendar.MILLISECOND),"sss".length());  }  int offset=tz.getOffset(calendar.getTimeInMillis());  if (offset != 0) {    int hours=Math.abs((offset / (60 * 1000)) / 60);    int minutes=Math.abs((offset / (60 * 1000)) % 60);    formatted.append(offset < 0 ? '-' : '+');    padInt(formatted,hours,"hh".length());    formatted.append(':');    padInt(formatted,minutes,"mm".length());  } else {    formatted.append('Z');  }  return formatted.toString();}  }
class C{  public KtClassVisualPanel1(){  initComponents();}  }
class C{  public void evaluate(EvolutionState state,Individual ind,int subpopulation,int threadnum){  if (ind.evaluated)   return;  VectorSpeciesCGP s=(VectorSpeciesCGP)ind.species;  if (NUM_BITS == 0)   NUM_BITS=s.numInputs;  VectorIndividualCGP ind2=(VectorIndividualCGP)ind;  int diff=0;  Boolean[] inputs;  StringBuffer sb=new StringBuffer();  for (int i=0; i < max(); i++) {    int pow=1;    boolean even=true;    inputs=new Boolean[NUM_BITS];    for (int j=0; j < NUM_BITS; j++) {      if (j > 0)       pow*=2;      inputs[NUM_BITS - 1 - j]=(i & pow) > 0;      if (inputs[NUM_BITS - 1 - j])       even=!even;    }    Object[] outputs=Evaluator.evaluate(state,threadnum,inputs,ind2);    Boolean result=(Boolean)outputs[0];    sb.append(result ? "1 " : "0 ");    if (result != even)     diff++;  }  ((FitnessCGP)ind.fitness).setFitness(state,diff,diff == 0);  ind2.expression.append("  Output: [" + sb + "]");  ind.evaluated=true;}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  void registerDetector(DetectorFactory factory){  if (FindBugs.DEBUG) {    System.out.println("Registering detector: " + factory.getFullName());  }  String detectorName=factory.getShortName();  if (!factoryList.contains(factory)) {    factoryList.add(factory);  } else {    LOGGER.log(Level.WARNING,"Trying to add already registered factory: " + factory + ", "+ factory.getPlugin());  }  factoriesByName.put(detectorName,factory);  factoriesByDetectorClassName.put(factory.getFullName(),factory);}  }
class C{  void openInput(){  String file=getFileName();  if (file == null) {    return;  }  if (isEncrypted()) {    initStore();    in=new FileStoreInputStream(store,this,compressionAlgorithm != null,false);  } else {    InputStream inStream;    try {      inStream=FileUtils.newInputStream(file);    } catch (    IOException e) {      throw DbException.convertIOException(e,file);    }    in=new BufferedInputStream(inStream,Constants.IO_BUFFER_SIZE);    in=CompressTool.wrapInputStream(in,compressionAlgorithm,SCRIPT_SQL);    if (in == null) {      throw DbException.get(ErrorCode.FILE_NOT_FOUND_1,SCRIPT_SQL + " in " + file);    }  }}  }
class C{  public void stopProxy(int hostNumber,long millissecond){  proxySet.get(currentType)[hostNumber - 1].restart(millissecond);}  }
class C{  public void show(){  JFrame f=new JFrame();  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setVisible(true);  JLabel label=null;  while (true) {    for (int i=0; i < this.frames.size(); i++) {      Frame frame=this.frames.get(i);      if (label == null) {        label=new JLabel(new ImageIcon(frame.image));        f.getContentPane().add(label);        f.pack();      } else {        label.getGraphics().drawImage(frame.image,0,0,label);      }      try {        Thread.sleep(frame.delayMillis);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  @Override public boolean equals(Object that){  if (that instanceof String) {    return equals((String)that);  } else   if (that instanceof CharArray) {    return equals((CharArray)that);  } else   if (that instanceof java.lang.CharSequence) {    return contentEquals((java.lang.CharSequence)that);  } else {    return false;  }}  }
class C{  static boolean inLongRange(BigInteger value){  return value.bitLength() <= 63;}  }
class C{  public static void registerParameter(ParameterType type,String group){  Parameter parameter=PARAMETER_MAP.get(type.getKey());  if (parameter == null) {    parameter=new Parameter(type,group);    PARAMETER_MAP.put(type.getKey(),parameter);  } else {    parameter.setType(type);    parameter.setGroup(group);  }}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XMLStringDefault(m_str.toUpperCase(locale));}  }
class C{  public ShaderVisualToolBar(){  initComponents();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ValueRange(Set<Assignment> assigns){  this();  for (  Assignment a : assigns) {    addAssign(a);  }}  }
class C{  public void connectionErrorOccurred(ConnectionEvent event){  if (isActive) {    ManagedConnection conn=(ManagedConnection)event.getSource();    XAResource xar=(XAResource)xaResourcesMap.get(conn);    xaResourcesMap.remove(conn);    TransactionManagerImpl transManager=TransactionManagerImpl.getTransactionManager();    try {      Transaction txn=transManager.getTransaction();      if (txn != null && xar != null)       txn.delistResource(xar,XAResource.TMSUCCESS);    } catch (    SystemException se) {      se.printStackTrace();    }    try {      mannPoolCache.expirePooledConnection(conn);    } catch (    Exception ex) {      String exception="JCAConnectionManagerImpl::connectionErrorOccured: Exception occured due to " + ex;      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }  }}  }
class C{  public ReplDBMSEvent extract() throws ReplicatorException, InterruptedException {  DBMSEvent dbmsEvent=extractor.extract();  if (dbmsEvent == null)   return null;  Timestamp extractTimestamp=dbmsEvent.getSourceTstamp();  ReplDBMSEvent replEvent=new ReplDBMSEvent(seqno,fragno,dbmsEvent.isLastFrag(),sourceId,epochNumber,extractTimestamp,dbmsEvent);  if (logger.isDebugEnabled())   logger.debug("Source timestamp = " + dbmsEvent.getSourceTstamp() + " - Extracted timestamp = "+ extractTimestamp);  for (  Filter filter : autoFilters) {    try {      replEvent=filter.filter(replEvent);      if (replEvent == null)       return null;    } catch (    ReplicatorException e) {      throw new ExtractorException("Auto-filter operation failed unexpectedly: " + e.getMessage(),e);    }  }  if (dbmsEvent.isLastFrag()) {    seqno++;    fragno=0;  } else   fragno++;  return replEvent;}  }
class C{  public void open(){  this.shell.open();  this.shell.layout();  while (!this.shell.isDisposed()) {    if (!this.shell.getDisplay().readAndDispatch()) {      this.shell.getDisplay().sleep();    }  }}  }
class C{  public void testGetSpeedIncrement(){  AbstractThrottle instance=new AbstractThrottleImpl();  float expResult=0.0F;  float result=instance.getSpeedIncrement();  assertEquals(expResult,result,0.0);}  }
class C{  static private int buildFilter(final char[] s,final int n){  int i=n, bloomFilter=0;  while (i-- != 0)   bloomFilter|=1 << (s[i] & 0x1f);  return bloomFilter;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYStepAreaRenderer)) {    return false;  }  XYStepAreaRenderer that=(XYStepAreaRenderer)obj;  if (this.showOutline != that.showOutline) {    return false;  }  if (this.shapesVisible != that.shapesVisible) {    return false;  }  if (this.shapesFilled != that.shapesFilled) {    return false;  }  if (this.plotArea != that.plotArea) {    return false;  }  if (this.rangeBase != that.rangeBase) {    return false;  }  if (this.stepPoint != that.stepPoint) {    return false;  }  return super.equals(obj);}  }
class C{  @Override public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);  if (mimeType != null) {    attrs.add(new XmlWriter.Attribute("type",mimeType.getMediaType()));  }  if (ext != null) {    w.startElement(Namespaces.atomNs,"content",attrs,null);    ext.generate(w,extProfile);    w.endElement(Namespaces.atomNs,"content");  } else   if (xml != null) {    XmlBlob.startElement(w,Namespaces.atomNs,"content",xml,attrs,null);    XmlBlob.endElement(w,Namespaces.atomNs,"content",xml);  } else {    String value;    if (text != null) {      value=text;      if (lang != null) {        attrs.add(new XmlWriter.Attribute("xml:lang",lang));      }    } else     if (bytes != null) {      value=Base64.encode(bytes);      if (lang != null) {        attrs.add(new XmlWriter.Attribute("xml:lang",lang));      }    } else {      value=null;    }    w.simpleElement(Namespaces.atomNs,"content",attrs,value);  }}  }
class C{  public static void deleteAnnotationFromXML(Element annotationsElement,String name){  NodeList children=annotationsElement.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if ((child instanceof Element) && name.equals(((Element)child).getAttribute("annotation"))) {      annotationsElement.removeChild(child);    }  }}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public static byte[] buildRowkey(InternalLog log){  final String[] partitions=log.getPartitions();  final Map<String,String> tags=log.getTags();  final SortedMap<Integer,Integer> tagHashMap=generateSortedTagMap(partitions,tags);  long ts=Long.MAX_VALUE - log.getTimestamp();  List<Integer> partitionHashValues=new ArrayList<Integer>();  if (partitions != null) {    for (    String partition : partitions) {      final String tagValue=tags.get(partition);      if (tagValue != null) {        partitionHashValues.add(tagValue.hashCode());      } else {        partitionHashValues.add(EMPTY_PARTITION_DEFAULT_HASH_CODE);      }    }  }  return buildRowkey(log.getPrefix().hashCode(),partitionHashValues,ts,tagHashMap);}  }
class C{  public <U>Promise<U> map(Func1<T,U> func){  return new Promise<U>(this.observable.map(func));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isShowEmptyBlocks(){  return showEmptyBlocks;}  }
class C{  public void testUseCompress() throws Exception {  this.rs=this.stmt.executeQuery("SHOW VARIABLES LIKE 'max_allowed_packet'");  this.rs.next();  if (this.rs.getInt(2) < 4 + 1024 * 1024 * 16 - 1) {    fail("You need to increase max_allowed_packet to at least " + (4 + 1024 * 1024 * 16 - 1) + " before running this test!");  }  if (versionMeetsMinimum(5,6,20) && !versionMeetsMinimum(5,7)) {    this.rs=this.stmt.executeQuery("SHOW VARIABLES LIKE 'innodb_log_file_size'");    this.rs.next();    if (this.rs.getInt(2) < 1024 * 1024 * 32* 10) {      fail("You need to increase innodb_log_file_size to at least " + (1024 * 1024 * 32* 10) + " before running this test!");    }  }  testCompressionWith("false",1024 * 1024 * 16 - 2);  testCompressionWith("false",1024 * 1024 * 16 - 1);  testCompressionWith("false",1024 * 1024 * 32);  testCompressionWith("true",1024 * 1024 * 16 - 2 - 3);  testCompressionWith("true",1024 * 1024 * 16 - 2 - 2);  testCompressionWith("true",1024 * 1024 * 16 - 1);  testCompressionWith("true",1024 * 1024 * 32);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String prop=e.getPropertyName();  if (prop.equals(AbstractButton.MNEMONIC_CHANGED_PROPERTY))   updateMnemonicBindingX((AbstractButton)e.getSource()); else   super.propertyChange(e);}  }
class C{  public void createSubUsageScenario14() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-11-28 21:36:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO14_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO14_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO14_PERUNIT_MONTH",subDetails);}  }
class C{  @Override public IType fromFacetType(){  return Types.LIST.of(Types.LIST);}  }
class C{  public static String formatMessage(final String bundle,final String msgCode,final Object[] args){  String message=new StringBuffer(msgCode).append(": ").append(ApplicationMessages.getString(bundle,msgCode)).toString();  if ((args != null) && (message != null) && (args.length > 0)) {    message=MessageFormat.format(message,args);  }  return message;}  }
class C{  public int num(){  return stepNum;}  }
class C{  @Override public AggregateResult aggregate(EntityDefinition entityDefinition,Scan scan,List<String> groupbyFields,List<byte[]> aggregateFuncTypes,List<String> aggregatedFields,long startTime,long endTime,long intervalMin) throws IOException {  checkNotNull(entityDefinition,"entityDefinition");  String serviceName=entityDefinition.getService();  LOG.info(this.getLogHeader() + " time series group aggregate on service: " + serviceName+ " by: "+ groupbyFields+ " func: "+ AggregateFunctionType.fromBytesList(aggregateFuncTypes)+ " fields: "+ aggregatedFields+ " intervalMin: "+ intervalMin+ " from: "+ DateTimeUtil.millisecondsToHumanDateWithMilliseconds(startTime)+ " to: "+ DateTimeUtil.millisecondsToHumanDateWithMilliseconds(endTime));  if (LOG.isDebugEnabled())   LOG.debug("SCAN: " + scan.toJSON());  long _start=System.currentTimeMillis();  final TimeSeriesAggregator aggregator=new TimeSeriesAggregator(groupbyFields,AggregateFunctionType.fromBytesList(aggregateFuncTypes),aggregatedFields,startTime,endTime,intervalMin);  InternalReadReport report=this.asyncStreamRead(entityDefinition,scan,aggregator);  List<GroupbyKeyValue> keyValues=aggregator.getGroupbyKeyValues();  AggregateResult result=new AggregateResult();  result.setKeyValues(keyValues);  result.setStartTimestamp(report.getStartTimestamp());  result.setStopTimestamp(report.getStopTimestamp());  long _stop=System.currentTimeMillis();  LOG.info(String.format("%s: scan = %d rows, group = %d keys, startTime = %d, endTime = %d, spend = %d ms",this.getLogHeader(),report.getCounter(),keyValues.size(),report.getStartTimestamp(),report.getStopTimestamp(),(_stop - _start)));  return result;}  }
class C{  public Rect[] newArray(int size){  return new Rect[size];}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void transform(Vec4D vec){  float x, y, z;  x=m00 * vec.x + m01 * vec.y + m02 * vec.z + m03 * vec.w;  y=m10 * vec.x + m11 * vec.y + m12 * vec.z + m13 * vec.w;  z=m20 * vec.x + m21 * vec.y + m22 * vec.z + m23 * vec.w;  vec.w=m30 * vec.x + m31 * vec.y + m32 * vec.z + m33 * vec.w;  vec.x=x;  vec.y=y;  vec.z=z;}  }
class C{  public XppDomComparator(final ThreadLocal<String> xpath){  this.xpath=xpath;}  }
class C{  public DateMidnight(long instant){  super(instant);}  }
class C{  @Override public void draw(Graphics2D g){  drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.NULL_HANDLE_STROKE_COLOR));}  }
class C{  public void register(OnExternalResourcesChangeListener listener){  Logger.v(TAG,"Register listener:" + listener.getClass().getSimpleName());  listeners.add(listener);}  }
class C{  public IntroFragmentModel(IntroFragment fragment,String title,String description,int image,int backgroundColor,int imageElevation,int titleTextColor,int descriptionTextColor){  this.fragment=fragment;  this.title=title;  this.description=description;  this.image=image;  this.backgroundColor=backgroundColor;  this.imageElevation=imageElevation;  this.titleTextColor=titleTextColor;  this.descriptionTextColor=descriptionTextColor;}  }
class C{  public Y isNull(){  return add(" IS NULL");}  }
class C{  public static double ceil(double x){  return Math.ceil(x);}  }
class C{  public void addListener(DiscoveryManagerListener listener){  for (  ConnectableDevice device : compatibleDevices.values()) {    listener.onDeviceAdded(this,device);  }  discoveryListeners.add(listener);}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:      return N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:  return N4JSPackage.N4_GETTER_DECLARATION__OWNER;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:return N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void addOffset(float x,float y,float z){  this.offsetX+=x;  this.offsetY+=y;  this.offsetZ+=z;}  }
class C{  @Override public void addNewSubscription(final Subscription newSubscription){  final String clientID=newSubscription.getClientId();  List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID);  if (clientSubscriptions == null) {    clientSubscriptions=new ArrayList<>();    subscriptions.put(clientID,clientSubscriptions);  }  clientSubscriptions.add(newSubscription.asClientTopicCouple());}  }
class C{  @Override public void deleteByIds(final Collection<String> ids) throws IOException {  if (this.solr0 != null)   this.solr0.deleteByIds(ids);  if (this.solr1 != null)   this.solr1.deleteByIds(ids);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TFORMAL_PARAMETER;}  }
class C{  static Element createFinalElement(Path path,Element rootElement) throws ParseException {  Element parent=createParentElement(path,rootElement);  if (path.selectsAttribute() || parent == null) {    return parent;  }  ElementKey<?,?> childKey=path.getSelectedElementKey();  Element child=parent.getElement(childKey);  if (child == null) {    try {      child=Element.createElement(childKey);      parent.addElement(child);    } catch (    ContentCreationException e) {      throw new ParseException(e);    }  }  return child;}  }
class C{  public ToStringBuilder append(final String fieldName,final float[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  protected static int intersectionBinarySearch(int[] a,int lena,int[] b,int lenb,int[] target){  int step=(lenb / lena) + 1;  step=step + step;  int icount=0;  int low=0;  int max=lenb - 1;  for (int i=0; i < lena; i++) {    int doca=a[i];    int high=max;    int probe=low + step;    if (probe < high) {      if (b[probe] >= doca) {        high=probe;      } else {        low=probe + 1;        probe=low + step;        if (probe < high) {          if (b[probe] >= doca) {            high=probe;          } else {            low=probe + 1;          }        }      }    }    while (low <= high) {      int mid=(low + high) >>> 1;      int docb=b[mid];      if (docb < doca) {        low=mid + 1;      } else       if (docb > doca) {        high=mid - 1;      } else {        target[icount++]=doca;        low=mid + 1;        break;      }    }  }  return icount;}  }
class C{  private void drawProgress(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  paint.setAntiAlias(true);  paint.setColor(color);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - 8,transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  private String convertAlias(String sqlStatement){  String[] tokens=sqlStatement.split("\\s");  String table=null;  String alias=null;  if ("UPDATE".equalsIgnoreCase(tokens[0])) {    if ("SET".equalsIgnoreCase(tokens[2]))     return sqlStatement;    table=tokens[1];    alias=tokens[2];  } else   if ("INSERT".equalsIgnoreCase(tokens[0])) {    if ("VALUES".equalsIgnoreCase(tokens[3]) || "SELECT".equalsIgnoreCase(tokens[3]))     return sqlStatement;    if (tokens[2].indexOf('(') > 0)     return sqlStatement; else     if ((tokens[3].indexOf('(') < 0) || tokens[3].indexOf('(') > 0) {      table=tokens[2];      alias=tokens[3];    } else {      return sqlStatement;    }  } else   if ("DELETE".equalsIgnoreCase(tokens[0])) {    if (tokens.length < 4)     return sqlStatement;    if ("WHERE".equalsIgnoreCase(tokens[3]))     return sqlStatement;    table=tokens[2];    alias=tokens[3];  }  if (table != null && alias != null) {    if (alias.indexOf('(') > 0)     alias=alias.substring(0,alias.indexOf('('));    String converted=sqlStatement.replaceFirst("\\s" + alias + "\\s"," ");    converted=converted.replaceAll("\\b" + alias + "\\.",table + ".");    converted=converted.replaceAll("[+]" + alias + "\\.","+" + table + ".");    converted=converted.replaceAll("[-]" + alias + "\\.","-" + table + ".");    converted=converted.replaceAll("[*]" + alias + "\\.","*" + table + ".");    converted=converted.replaceAll("[/]" + alias + "\\.","/" + table + ".");    converted=converted.replaceAll("[%]" + alias + "\\.","%" + table + ".");    converted=converted.replaceAll("[<]" + alias + "\\.","<" + table + ".");    converted=converted.replaceAll("[>]" + alias + "\\.",">" + table + ".");    converted=converted.replaceAll("[=]" + alias + "\\.","=" + table + ".");    converted=converted.replaceAll("[|]" + alias + "\\.","|" + table + ".");    converted=converted.replaceAll("[(]" + alias + "\\.","(" + table + ".");    converted=converted.replaceAll("[)]" + alias + "\\.",")" + table + ".");    return converted;  } else {    return sqlStatement;  }}  }
class C{  public void doData(final Tradestrategy tradestrategy){  if (tradestrategy.isDirty()) {    this.setStatusBarMessage("Please save or refresh before running strategy ...\n",BasePanel.WARNING);  } else {    Tradingdays tradingdays=new Tradingdays();    Tradingday tradingday=Tradingday.newInstance(tradestrategy.getTradingday().getOpen());    tradingday.setIdTradingDay(Integer.MAX_VALUE);    tradingday.addTradestrategy(tradestrategy);    tradingdays.add(tradingday);    runStrategy(tradingdays,true);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public GenericEntry retrieveMailboxDumpRequest(String user,String id) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getEntry(new URL(BASE_URL + "mail/export/" + domain+ "/"+ user+ "/"+ id),GenericEntry.class);}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public static int compareTo(int[] n1,int[] n2,int len){  for (int i=0; i < len; i++) {    if (n2[i] == n1[i]) {      continue;    }    if (n2[i] > n1[i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (baseFeatureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:      return TypesPackage.TMODULE__ANNOTATIONS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public CategoryDataset createDataset1(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  String series1="First";  String series2="Second";  String type1="Type 1";  String type2="Type 2";  String type3="Type 3";  String type4="Type 4";  String type5="Type 5";  String type6="Type 6";  String type7="Type 7";  String type8="Type 8";  result.addValue(1.0,series1,type1);  result.addValue(4.0,series1,type2);  result.addValue(3.0,series1,type3);  result.addValue(5.0,series1,type4);  result.addValue(5.0,series1,type5);  result.addValue(7.0,series1,type6);  result.addValue(7.0,series1,type7);  result.addValue(8.0,series1,type8);  result.addValue(5.0,series2,type1);  result.addValue(7.0,series2,type2);  result.addValue(6.0,series2,type3);  result.addValue(8.0,series2,type4);  result.addValue(4.0,series2,type5);  result.addValue(4.0,series2,type6);  result.addValue(2.0,series2,type7);  result.addValue(1.0,series2,type8);  return result;}  }
class C{  public void encodeSignedData(DerOutputStream out) throws IOException {  DerOutputStream signedData=new DerOutputStream();  signedData.putInteger(version);  signedData.putOrderedSetOf(DerValue.tag_Set,digestAlgorithmIds);  contentInfo.encode(signedData);  if (certificates != null && certificates.length != 0) {    X509CertImpl implCerts[]=new X509CertImpl[certificates.length];    for (int i=0; i < certificates.length; i++) {      if (certificates[i] instanceof X509CertImpl)       implCerts[i]=(X509CertImpl)certificates[i]; else {        try {          byte[] encoded=certificates[i].getEncoded();          implCerts[i]=new X509CertImpl(encoded);        } catch (        CertificateException ce) {          throw new IOException(ce);        }      }    }    signedData.putOrderedSetOf((byte)0xA0,implCerts);  }  if (crls != null && crls.length != 0) {    Set<X509CRLImpl> implCRLs=new HashSet<X509CRLImpl>(crls.length);    for (    X509CRL crl : crls) {      if (crl instanceof X509CRLImpl)       implCRLs.add((X509CRLImpl)crl); else {        try {          byte[] encoded=crl.getEncoded();          implCRLs.add(new X509CRLImpl(encoded));        } catch (        CRLException ce) {          throw new IOException(ce);        }      }    }    signedData.putOrderedSetOf((byte)0xA1,implCRLs.toArray(new X509CRLImpl[implCRLs.size()]));  }  signedData.putOrderedSetOf(DerValue.tag_Set,signerInfos);  DerValue signedDataSeq=new DerValue(DerValue.tag_Sequence,signedData.toByteArray());  ContentInfo block=new ContentInfo(ContentInfo.SIGNED_DATA_OID,signedDataSeq);  block.encode(out);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public Builder deleteExternalId(){  deleteFields.add("externalId");  return this;}  }
class C{  public static int binarySearch(byte[] array,byte value){  return binarySearch(array,0,array.length,value);}  }
class C{  public int hashCode(){  return (x + "," + y).hashCode();}  }
class C{  private EventNode read(Node node) throws Exception {  Node parent=node.getParentNode();  Node top=stack.top();  if (parent != top) {    if (top != null) {      stack.pop();    }    return end();  }  if (node != null) {    queue.poll();  }  return convert(node);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void installButtonBarUI(AbstractButton button){}  }
class C{  public void handleCSSEngineEvent(CSSEngineEvent evt){  textBridge.handleCSSEngineEvent(evt);}  }
class C{  public static boolean[] readBoolean1D(){  int n=StdIn.readInt();  boolean[] a=new boolean[n];  for (int i=0; i < n; i++) {    a[i]=StdIn.readBoolean();  }  return a;}  }
class C{  public TargetedNotification(Notification notification,Integer listenerID){  validate(notification,listenerID);  this.notif=notification;  this.id=listenerID;}  }
class C{  protected int engineDigest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("buf == null");  }  if (offset > buf.length || len > buf.length || (len + offset) > buf.length) {    throw new IllegalArgumentException();  }  if (len < DIGEST_LENGTH) {    throw new DigestException("len < DIGEST_LENGTH");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  processDigest(buf,offset);  return DIGEST_LENGTH;}  }
class C{  public void testXmxMemoryArgumentOverride() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-Xmx256m");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms128m");  checkString(commandLine,"-Xmx256m");}  }
class C{  public Query createPhraseQuery(String field,String queryText,int phraseSlop){  return createFieldQuery(analyzer,BooleanClause.Occur.MUST,field,queryText,true,phraseSlop);}  }
class C{  public void removeAllListeners(){  if (clientgui != null) {    clientgui.getClient().getGame().removeGameListener(this);    clientgui.getBoardView().removeBoardViewListener(this);  }}  }
class C{  public static Bitmap loadConstrainedBitmap(Uri uri,Context context,int maxSideLength,Rect originalBounds,boolean useMin){  if (maxSideLength <= 0 || uri == null || context == null) {    throw new IllegalArgumentException("bad argument to getScaledBitmap");  }  Rect storedBounds=loadBitmapBounds(context,uri);  if (originalBounds != null) {    originalBounds.set(storedBounds);  }  int w=storedBounds.width();  int h=storedBounds.height();  if (w <= 0 || h <= 0) {    return null;  }  int imageSide=0;  if (useMin) {    imageSide=Math.min(w,h);  } else {    imageSide=Math.max(w,h);  }  int sampleSize=1;  while (imageSide > maxSideLength) {    imageSide>>>=1;    sampleSize<<=1;  }  if (sampleSize <= 0 || 0 >= (int)(Math.min(w,h) / sampleSize)) {    return null;  }  return loadDownsampledBitmap(context,uri,sampleSize);}  }
class C{  public AnimFrame(final Image image,final long endTime){  this.image=image;  this.endTime=endTime;}  }
class C{  public static void merge(int[] a,int[] b,int lastA,int lastB){  int indexMerged=lastB + lastA - 1;  int indexA=lastA - 1;  int indexB=lastB - 1;  while (indexB >= 0) {    if (indexA >= 0 && a[indexA] > b[indexB]) {      a[indexMerged]=a[indexA];      indexA--;    } else {      a[indexMerged]=b[indexB];      indexB--;    }    indexMerged--;  }}  }
class C{  public Generate_ createGenerate_(){  Generate_Impl generate_=new Generate_Impl();  return generate_;}  }
class C{  private void handleHtmlShowQuotations(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleQuotations();  if (addTitle(requestAndResponse,title)) {    return;  }  final String paneId="quotations";  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId(paneId);  pageWrapper.addHeader();  pageWrapper.addMetaData(new KeyAndValue("paneType",paneId));  pageWrapper.addPageIntroText(servletText.introTextShowQuotations(false),servletText.introTextShowQuotations(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceNoQuotationsExist(),result,servletText);      final List<?> results=dbLogic.getEntriesByUserIdAndType(queryUser.getId(),DbLogic.Constants.quotation,paginator.getStartPosition(),paginator.getMaxResults());      entryListToHtmlAndJson(paneId,result,paginator,results);    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }  pageWrapper.addFooter();}  }
class C{  void test(File file){  if (excludeFiles.contains(file)) {    if (!quiet)     error("File " + file + " excluded");    return;  }  if (file.isDirectory()) {    for (    File f : file.listFiles()) {      test(f);    }    return;  }  if (file.isFile() && file.getName().endsWith(".java")) {    try {      if (verbose)       System.err.println(file);      fileCount++;      PosTester p=new PosTester();      p.test(read(file));    } catch (    ParseException e) {      if (!quiet) {        error("Error parsing " + file + "\n"+ e.getMessage());      }    }catch (    IOException e) {      error("Error reading " + file + ": "+ e);    }    return;  }  if (!quiet)   error("File " + file + " ignored");}  }
class C{  public SolarisNumericUserPrincipal(String name){  if (name == null)   throw new NullPointerException(rb.getString("provided.null.name"));  this.name=name;}  }
class C{  public List<FileHandler> fileHandlers(){  return subresources().fileHandlers();}  }
class C{  public void redeploy(List<Deployable> deployables){  for (  Deployable deployable : deployables) {    redeploy(deployable);  }}  }
class C{  private void addWebsphereDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("META-INF/ibm-ejb-jar-bnd.xmi");    if (in != null) {      IbmEjbJarBndXmi descr=IbmEjbJarBndXmiIo.parseIbmEjbJarXmi(in);      if (descr != null) {        this.ejbJarXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public static void cleanBitSet(MethodNode mth,BitSet bs){  for (int i=bs.nextSetBit(0); i >= 0; i=bs.nextSetBit(i + 1)) {    BlockNode block=mth.getBasicBlocks().get(i);    if (isBlockMustBeCleared(block)) {      bs.clear(i);    }  }}  }
class C{  protected void sendTestMessage(EasyDccMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public void removeDataChangeListener(DataChangedListener l){  mv.removeDataChangeListener(l);}  }
class C{  @Override public boolean contains(Object o){  return indexes.keySet().contains(o);}  }
class C{  public static String stringToHex(final String data){  return new String(Hex.encodeHex(ConversionUtils.stringToArray(data)));}  }
class C{  protected void resetAttribute(){}  }
class C{  public MapWidget(Context context,File rootMapFolder,int initialZoomLevel){  this(null,context,rootMapFolder,initialZoomLevel);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.549 -0400",hash_original_method="BA1421E7ADA5C5B5A70A9ABA5C9A4B45",hash_generated_method="6330EBD913AF8D87164E2AA9C4839746") public SimpleArrayMap(int capacity){  if (capacity == 0) {    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  private void updateHotkeys(){  removeAllHotkeys();  addHotkeys(null);  addGlobalHotkeys();  updateActions();}  }
class C{  public WriteException(WriteRequest request){  super();  this.requests=asRequestList(request);}  }
class C{  public ColumnInfo(String colHeader,String colSQL,Class<?> colClass,String keyPairColSQL){  this(colHeader,colSQL,colClass,true,false,keyPairColSQL);}  }
class C{  private static final byte highBit(int n){  if (n <= 0) {    return -32;  }  byte bit=0;  if (n >= 1 << 16) {    n>>=16;    bit+=16;  }  if (n >= 1 << 8) {    n>>=8;    bit+=8;  }  if (n >= 1 << 4) {    n>>=4;    bit+=4;  }  if (n >= 1 << 2) {    n>>=2;    bit+=2;  }  if (n >= 1 << 1) {    n>>=1;    bit+=1;  }  return bit;}  }
class C{  public RawTypeInstanceReference(final int moduleId,final int viewId,final IAddress address,final int operandPosition,final int expressionId,final int typeInstanceId){  this.moduleId=moduleId;  this.viewId=viewId;  this.address=Preconditions.checkNotNull(address,"Error: address can not be null.");  this.operandPosition=operandPosition;  this.expressionId=expressionId;  this.typeInstanceId=typeInstanceId;}  }
class C{  static void flushOldAlertsFromInternalStorage(Context context){  if (BYPASS_DB) {    SharedPreferences prefs=getFiredAlertsTable(context);    long nowTime=System.currentTimeMillis();    long lastFlushTimeMs=prefs.getLong(KEY_LAST_FLUSH_TIME_MS,0);    if (nowTime - lastFlushTimeMs > FLUSH_INTERVAL_MS) {      if (DEBUG) {        Log.d(TAG,"Flushing old alerts from shared prefs table");      }      SharedPreferences.Editor editor=prefs.edit();      Time timeObj=new Time();      for (      Map.Entry<String,?> entry : prefs.getAll().entrySet()) {        String key=entry.getKey();        Object value=entry.getValue();        if (key.startsWith(KEY_FIRED_ALERT_PREFIX)) {          long alertTime;          if (value instanceof Long) {            alertTime=(Long)value;          } else {            Log.e(TAG,"SharedPrefs key " + key + " did not have Long value: "+ value);            continue;          }          if (nowTime - alertTime >= FLUSH_INTERVAL_MS) {            editor.remove(key);            if (DEBUG) {              int ageInDays=getIntervalInDays(alertTime,nowTime,timeObj);              Log.d(TAG,"SharedPrefs key " + key + ": removed ("+ ageInDays+ " days old)");            }          } else {            if (DEBUG) {              int ageInDays=getIntervalInDays(alertTime,nowTime,timeObj);              Log.d(TAG,"SharedPrefs key " + key + ": keep ("+ ageInDays+ " days old)");            }          }        }      }      editor.putLong(KEY_LAST_FLUSH_TIME_MS,nowTime);      editor.apply();    }  }}  }
class C{  @SuppressWarnings("fallthrough") private void createAnalysisPipelineComponent(StreamTokenizer stok,Class<? extends AbstractAnalysisFactory> clazz){  Map<String,String> argMap=new HashMap<>();  boolean parenthetical=false;  try {    WHILE_LOOP:     while (stok.nextToken() != StreamTokenizer.TT_EOF) {switch (stok.ttype) {case ',':{          if (parenthetical) {            break;          } else {            break WHILE_LOOP;          }        }case '(':{        if (parenthetical) {          throw new RuntimeException("Line #" + lineno(stok) + ": Unexpected opening parenthesis.");        }        parenthetical=true;        break;      }case ')':{      if (parenthetical) {        parenthetical=false;      } else {        throw new RuntimeException("Line #" + lineno(stok) + ": Unexpected closing parenthesis.");      }      break;    }case StreamTokenizer.TT_WORD:{    if (!parenthetical) {      throw new RuntimeException("Line #" + lineno(stok) + ": Unexpected token '"+ stok.sval+ "'");    }    String argName=stok.sval;    stok.nextToken();    if (stok.ttype != ':') {      throw new RuntimeException("Line #" + lineno(stok) + ": Missing ':' after '"+ argName+ "' param to "+ clazz.getSimpleName());    }    stok.nextToken();    String argValue=stok.sval;switch (stok.ttype) {case StreamTokenizer.TT_NUMBER:{        argValue=Double.toString(stok.nval);        argValue=TRAILING_DOT_ZERO_PATTERN.matcher(argValue).replaceFirst("");      }case '"':case '\'':case StreamTokenizer.TT_WORD:{      argMap.put(argName,argValue);      break;    }case StreamTokenizer.TT_EOF:{    throw new RuntimeException("Unexpected EOF: " + stok.toString());  }default :{  throw new RuntimeException("Line #" + lineno(stok) + ": Unexpected token: "+ stok.toString());}}}}}if (!argMap.containsKey("luceneMatchVersion")) {argMap.put("luceneMatchVersion",Version.LATEST.toString());}final AbstractAnalysisFactory instance;try {instance=clazz.getConstructor(Map.class).newInstance(argMap);} catch (Exception e) {throw new RuntimeException("Line #" + lineno(stok) + ": ",e);}if (instance instanceof ResourceLoaderAware) {Path baseDir=Paths.get(getRunData().getConfig().get("work.dir","work"));if (!Files.isDirectory(baseDir)) {baseDir=Paths.get(".");}((ResourceLoaderAware)instance).inform(new FilesystemResourceLoader(baseDir));}if (CharFilterFactory.class.isAssignableFrom(clazz)) {charFilterFactories.add((CharFilterFactory)instance);} else if (TokenizerFactory.class.isAssignableFrom(clazz)) {tokenizerFactory=(TokenizerFactory)instance;} else if (TokenFilterFactory.class.isAssignableFrom(clazz)) {tokenFilterFactories.add((TokenFilterFactory)instance);}} catch (RuntimeException e) {if (e.getMessage().startsWith("Line #")) {throw (e);} else {throw new RuntimeException("Line #" + lineno(stok) + ": ",e);}}catch (Throwable t) {throw new RuntimeException("Line #" + lineno(stok) + ": ",t);}}  }
class C{  protected void tearDown() throws Exception {}  }
class C{  public String[] toSCC(){  return new FormatSCC().toFile(this);}  }
class C{  public static int max(int[] a){  int max=Integer.MIN_VALUE;  for (int i=0; i < a.length; i++) {    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  public String processCallOut(GridField field,Object value,Object oldValue,int currentRow,int currentColumn){  String callout=field.getCallout();  if (callout.length() == 0)   return "";  log.fine(field.getColumnName() + "=" + value+ " ("+ callout+ ") - old="+ oldValue);  StringTokenizer st=new StringTokenizer(callout,";,",false);  while (st.hasMoreTokens()) {    String cmd=st.nextToken().trim();    if (activeCallOuts.contains(cmd))     continue;    String retValue="";    if (cmd.toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {      MRule rule=MRule.get(ctx,cmd.substring(MRule.SCRIPT_PREFIX.length()));      if (rule == null) {        retValue="Callout " + cmd + " not found";        log.log(Level.SEVERE,retValue);        return retValue;      }      if (!(rule.getEventType().equals(MRule.EVENTTYPE_Callout) && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs))) {        retValue="Callout " + cmd + " must be of type JSR 223 and event Callout";        log.log(Level.SEVERE,retValue);        return retValue;      }      ScriptEngine engine=rule.getScriptEngine();      MRule.setContext(engine,ctx,browser.getWindowNo());      engine.put(MRule.ARGUMENTS_PREFIX + "WindowNo",browser.getWindowNo());      engine.put(MRule.ARGUMENTS_PREFIX + "Tab",this);      engine.put(MRule.ARGUMENTS_PREFIX + "Field",field);      engine.put(MRule.ARGUMENTS_PREFIX + "Value",value);      engine.put(MRule.ARGUMENTS_PREFIX + "OldValue",oldValue);      engine.put(MRule.ARGUMENTS_PREFIX + "currentRow",currentRow);      engine.put(MRule.ARGUMENTS_PREFIX + "currentColumn",currentColumn);      engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",ctx);      try {        activeCallOuts.add(cmd);        retValue=engine.eval(rule.getScript()).toString();      } catch (      Exception e) {        log.log(Level.SEVERE,"",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallOuts.remove(cmd);      }    } else {      BrowserCallOut call=null;      String method=null;      int methodStart=cmd.lastIndexOf('.');      try {        if (methodStart != -1) {          Class<?> cClass=Class.forName(cmd.substring(0,methodStart));          call=(BrowserCallOut)cClass.newInstance();          method=cmd.substring(methodStart + 1);        }      } catch (      Exception e) {        log.log(Level.SEVERE,"class",e);        return "Callout Invalid: " + cmd + " ("+ e.toString()+ ")";      }      if (call == null || method == null || method.length() == 0)       return "Callout Invalid: " + method;      try {        activeCallOuts.add(cmd);        activeCallOutInstance.add(call);        retValue=call.start(ctx,method,browser.getWindowNo(),browserRows,field,value,oldValue,currentRow,currentColumn);      } catch (      Exception e) {        log.log(Level.SEVERE,"start",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallOuts.remove(cmd);        activeCallOutInstance.remove(call);      }    }    if (!Util.isEmpty(retValue)) {      log.severe(retValue);      return retValue;    }  }  return "";}  }
class C{  void recycle(XMLStreamReaderImpl reader){  _recycled.addLast(reader);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean matchStrings(String pattern,String str,boolean caseSensitive){  char[] patArr=pattern.toCharArray();  char[] strArr=str.toCharArray();  int patIdxStart=0;  int patIdxEnd=patArr.length - 1;  int strIdxStart=0;  int strIdxEnd=strArr.length - 1;  char ch;  boolean containsStar=false;  for (  char c : patArr) {    if (c == '*') {      containsStar=true;      break;    }  }  if (!containsStar) {    if (patIdxEnd != strIdxEnd) {      return false;    }    for (int i=0; i <= patIdxEnd; i++) {      ch=patArr[i];      if (ch != '?') {        if (different(caseSensitive,ch,strArr[i])) {          return false;        }      }    }    return true;  }  if (patIdxEnd == 0) {    return true;  }  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxStart])) {        return false;      }    }    patIdxStart++;    strIdxStart++;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxEnd])) {        return false;      }    }    patIdxEnd--;    strIdxEnd--;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {    int patIdxTmp=-1;    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {      if (patArr[i] == '*') {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patIdxStart + 1) {      patIdxStart++;      continue;    }    int patLength=patIdxTmp - patIdxStart - 1;    int strLength=strIdxEnd - strIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        ch=patArr[patIdxStart + j + 1];        if (ch != '?') {          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {            continue strLoop;          }        }      }      foundIdx=strIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    patIdxStart=patIdxTmp;    strIdxStart=foundIdx + patLength;  }  for (int i=patIdxStart; i <= patIdxEnd; i++) {    if (patArr[i] != '*') {      return false;    }  }  return true;}  }
class C{  public void testRecoverInconsistentDisk() throws Throwable {  appendEntries(entriesPerSegment * 2);  Segment firstSegment=log.segments.firstSegment();  log.segments.createSegment(SegmentDescriptor.builder().withId(firstSegment.descriptor().id()).withIndex(firstSegment.descriptor().index()).withVersion(firstSegment.descriptor().version() + 1).withMaxSegmentSize(firstSegment.descriptor().maxSegmentSize()).withMaxEntries(firstSegment.descriptor().maxEntries()).build()).close();  log.close();  try (Log log=createLog()){    assertEquals(log.length(),entriesPerSegment * 2);    assertEquals(log.segments.firstSegment().descriptor().version(),1);  } }  }
class C{  public BusinessObjectDataKey createBusinessObjectDataKeyFromStorageUnitKey(StorageUnitAlternateKeyDto storageUnitKey){  return new BusinessObjectDataKey(storageUnitKey.getNamespace(),storageUnitKey.getBusinessObjectDefinitionName(),storageUnitKey.getBusinessObjectFormatUsage(),storageUnitKey.getBusinessObjectFormatFileType(),storageUnitKey.getBusinessObjectFormatVersion(),storageUnitKey.getPartitionValue(),storageUnitKey.getSubPartitionValues(),storageUnitKey.getBusinessObjectDataVersion());}  }
class C{  private void isScrollCompleted(){  if (mCurrentVisibleItemCount > 0 && mCurrentScrollState == SCROLL_STATE_IDLE) {    if (mCellIsMobile && mIsMobileScrolling) {      handleMobileCellScroll();    } else     if (mIsWaitingForScrollFinish) {      touchEventsEnded();    }  }}  }
class C{  public List<File> writeTestSuite(String name,String directory,List<ExecutionResult> cachedResults) throws IllegalArgumentException {  if (name == null || name.isEmpty()) {    throw new IllegalArgumentException("Empty test class name");  }  if (!name.endsWith("Test")) {    throw new IllegalArgumentException("Test classes should have name ending with 'Test'. Invalid input name: " + name);  }  List<File> generated=new ArrayList<File>();  String dir=TestSuiteWriterUtils.makeDirectory(directory);  String content="";  executor.newObservers();  LoopCounter.getInstance().setActive(true);  List<ExecutionResult> results=new ArrayList<>();  for (int i=0; i < testCases.size(); i++) {    TestCase test=testCases.get(i);    boolean added=false;    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      logger.info("Using cached result");      for (      ExecutionResult result : cachedResults) {        if (result != null && result.test == test) {          results.add(result);          added=true;          break;        }      }    }    if (!added) {      ExecutionResult result=runTest(test);      results.add(result);    }  }  if (Properties.TEST_NAMING_STRATEGY == Properties.TestNamingStrategy.NUMBERED) {    nameGenerator=new NumberedTestNameGenerationStrategy(testCases,results);  } else   if (Properties.TEST_NAMING_STRATEGY == Properties.TestNamingStrategy.COVERAGE) {    nameGenerator=new CoverageGoalTestNameGenerationStrategy(testCases,results);  } else {    throw new RuntimeException("Unsupported naming strategy: " + Properties.TEST_NAMING_STRATEGY);  }  if (Properties.OUTPUT_GRANULARITY == OutputGranularity.MERGED) {    File file=new File(dir + "/" + name+ ".java");    content=getUnitTestsAllInSameFile(name,results);    FileIOUtils.writeFile(content,file);    generated.add(file);  } else {    for (int i=0; i < testCases.size(); i++) {      File file=new File(dir + "/" + name+ "_"+ i+ ".java");      String testCode=getOneUnitTestInAFile(name,i,results);      FileIOUtils.writeFile(testCode,file);      content+=testCode;      generated.add(file);    }  }  if (Properties.TEST_SCAFFOLDING) {    String scaffoldingName=Scaffolding.getFileName(name);    File file=new File(dir + "/" + scaffoldingName+ ".java");    String scaffoldingContent=Scaffolding.getScaffoldingFileContent(name,results,TestSuiteWriterUtils.hasAnySecurityException(results));    FileIOUtils.writeFile(scaffoldingContent,file);    generated.add(file);    content+=scaffoldingContent;  }  writeCoveredGoalsFile();  TestGenerationResultBuilder.getInstance().setTestSuiteCode(content);  return generated;}  }
class C{  protected TraceCaseDeactivation_Impl(){  super();}  }
class C{  public <T>void addHeaderAdapter(IndexableHeaderAdapter<T> adapter){  adapter.registerDataSetObserver(mHeaderFooterDataSetObserver);  mRealAdapter.addIndexableHeaderAdapter(adapter);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  double noData;  int progress;  int i;  double minVal, maxVal;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  minVal=Double.parseDouble(args[2]);  maxVal=Double.parseDouble(args[3]);  numBins=Integer.parseInt(args[4]);  int numBinsLessOne=numBins - 1;  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    noData=image.getNoDataValue();    double scaleFactor=numBins / (maxVal - minVal);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setPreferredPalette(image.getPreferredPalette());    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] != noData) {          z=(int)(data[col] - minVal) * scaleFactor;          if (z < 0) {            z=0;          }          if (z > numBinsLessOne) {            z=numBinsLessOne;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void fatalError(final SAXParseException exception) throws SAXException {  throw new SAXParseException("Fatal error while parsing XML at line " + exception.getLineNumber() + " column "+ exception.getColumnNumber()+ ": "+ exception.getMessage(),null,exception);}  }
class C{  public void resetRowSelection(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      Set<Integer> selectedRows=new HashSet<Integer>();      int min=listSelectionModel.getMinSelectionIndex();      int max=listSelectionModel.getMaxSelectionIndex();      if (min != -1 && max != -1) {        for (int counter=min; counter <= max; counter++) {          if (listSelectionModel.isSelectedIndex(counter)) {            selectedRows.add(new Integer(counter));          }        }      }      super.resetRowSelection();      listSelectionModel.clearSelection();      for (      final Object selectedRow : selectedRows) {        Integer row=(Integer)selectedRow;        listSelectionModel.addSelectionInterval(row.intValue(),row.intValue());      }    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  public void fadeOutLayer(int index){  mTransitionState=TRANSITION_STARTING;  mIsLayerOn[index]=false;  invalidateSelf();}  }
class C{  protected StructuralTypeRefImpl(){  super();}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int current=Integer.parseInt(argv[0]);    int max=current;    for (int i=1; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      if (current > max) {        max=current;      }    }    DiscreteEstimator newEst=new DiscreteEstimator(max + 1,true);    for (int i=0; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      System.out.println(newEst);      System.out.println("Prediction for " + current + " = "+ newEst.getProbability(current));      newEst.addValue(current,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public StringBuffer(int capacity){  super(capacity);}  }
class C{  public Element removeBeginStartModifier(){  setBeginStartModifierDefined(false);  return (this);}  }
class C{  public static int shiftBackwardUntil(@NotNull CharSequence buffer,int offset,@NotNull String chars){  if (offset >= buffer.length())   return offset;  while (true) {    if (offset < 0)     break;    char c=buffer.charAt(offset);    int i;    for (i=0; i < chars.length(); i++) {      if (c == chars.charAt(i))       break;    }    if (i < chars.length())     break;    offset--;  }  return offset;}  }
class C{  private void saveLastMotion(MotionEvent ev){  mLastPosX=ev.getX();  mLastPosY=ev.getY();}  }
class C{  public void fill(Shape s){  Element svgShape=shapeConverter.toSVG(s);  if (svgShape != null) {    domGroupManager.addElement(svgShape,DOMGroupManager.FILL);  }}  }
class C{  public Date optionalDateTime(ImapRequestLineReader request) throws DecodingException {  char next=request.nextWordChar();  if (next == '"') {    return request.dateTime();  } else {    return null;  }}  }
class C{  private void createStyles(){  this.redCrossStyle=kmlObjectFactory.createStyleType();  this.redCrossStyle.setId("redCrossStyle");  this.redMinusStyle=kmlObjectFactory.createStyleType();  this.redMinusStyle.setId("redMinusStyle");  this.yellowCrossStyle=kmlObjectFactory.createStyleType();  this.yellowCrossStyle.setId("yellowCrossStyle");  this.yellowMinusStyle=kmlObjectFactory.createStyleType();  this.yellowMinusStyle.setId("yellowMinusStyle");  this.greenCrossStyle=kmlObjectFactory.createStyleType();  this.greenCrossStyle.setId("greenCrossStyle");  this.greenMinusStyle=kmlObjectFactory.createStyleType();  this.greenMinusStyle.setId("greenMinusStyle");  this.greyCrossStyle=kmlObjectFactory.createStyleType();  this.greyCrossStyle.setId("greyCrossStyle");  this.greyMinusStyle=kmlObjectFactory.createStyleType();  this.greyMinusStyle.setId("greyMinusStyle");  byte[] red=new byte[]{(byte)0xFF,(byte)0x0F,(byte)0x0F,(byte)0xBE};  byte[] green=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xDC,(byte)0x0A};  byte[] yellow=new byte[]{(byte)0xFF,(byte)0x14,(byte)0xE6,(byte)0xE6};  byte[] grey=new byte[]{(byte)0xFF,(byte)0x42,(byte)0x42,(byte)0x42};  HashMap<StyleType,byte[]> colors=new HashMap<StyleType,byte[]>();  colors.put(this.redCrossStyle,red);  colors.put(this.redMinusStyle,red);  colors.put(this.yellowCrossStyle,yellow);  colors.put(this.yellowMinusStyle,yellow);  colors.put(this.greenCrossStyle,green);  colors.put(this.greenMinusStyle,green);  colors.put(this.greyCrossStyle,grey);  colors.put(this.greyMinusStyle,grey);  HashMap<StyleType,String> hrefs=new HashMap<StyleType,String>();  hrefs.put(this.redCrossStyle,CROSSICON);  hrefs.put(this.redMinusStyle,MINUSICON);  hrefs.put(this.yellowCrossStyle,CROSSICON);  hrefs.put(this.yellowMinusStyle,MINUSICON);  hrefs.put(this.greenCrossStyle,CROSSICON);  hrefs.put(this.greenMinusStyle,MINUSICON);  hrefs.put(this.greyCrossStyle,CROSSICON);  hrefs.put(this.greyMinusStyle,MINUSICON);  for (  StyleType styleType : new StyleType[]{this.redCrossStyle,this.redMinusStyle,this.yellowCrossStyle,this.yellowMinusStyle,this.greenCrossStyle,this.greenMinusStyle,this.greyCrossStyle,this.greyMinusStyle}) {    IconStyleType icon=kmlObjectFactory.createIconStyleType();    icon.setColor(new byte[]{colors.get(styleType)[0],colors.get(styleType)[1],colors.get(styleType)[2],colors.get(styleType)[3]});    icon.setScale(ICONSCALE);    LinkType link=kmlObjectFactory.createLinkType();    link.setHref(hrefs.get(styleType));    icon.setIcon(link);    styleType.setIconStyle(icon);    this.mainDoc.getAbstractStyleSelectorGroup().add(kmlObjectFactory.createStyle(styleType));  }}  }
class C{  protected void initLog4JMdcLoggingFilter(ServletContext servletContext){  FilterRegistration.Dynamic log4jMdcLoggingFilter=servletContext.addFilter("log4jMdcLoggingFilter",Log4jMdcLoggingFilter.class);  log4jMdcLoggingFilter.addMappingForUrlPatterns(null,true,"/*");}  }
class C{  public void stop(boolean wait){  clientImpl.stop(wait);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public ThreeComponentsSplitter(){  this(false);}  }
class C{  private void parseDetail(String detail,String[][] registerLabels) throws ParsingException {  String type=StringUtils.substringBefore(detail," ").toUpperCase().trim();  String variableName=StringUtils.replace(StringUtils.substringAfter(detail," ").trim()," ","_");  if (StringUtils.isEmpty(variableName)) {    variableName=registerLabels[0][register];  }  if ("IN".equals(type)) {    inVariableName=variableName;  } else   if ("OUT".equals(type)) {    outVariableName=variableName;  } else {    throw new ParsingException("Unknown variable type in function parameter: '" + type + "'");  }}  }
class C{  public Duration toDuration(){  return new Duration(getMillis());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getTitle();}  }
class C{  int curveProgressToScreenY(float p){  if (p < 0 || p > 1)   return mStackVisibleRect.top + (int)(p * mStackVisibleRect.height());  float pIndex=p * PrecisionSteps;  int pFloorIndex=(int)Math.floor(pIndex);  int pCeilIndex=(int)Math.ceil(pIndex);  float xFraction=0;  if (pFloorIndex < PrecisionSteps && (pCeilIndex != pFloorIndex)) {    float pFraction=(pIndex - pFloorIndex) / (pCeilIndex - pFloorIndex);    xFraction=(xp[pCeilIndex] - xp[pFloorIndex]) * pFraction;  }  float x=xp[pFloorIndex] + xFraction;  return mStackVisibleRect.top + (int)(x * mStackVisibleRect.height());}  }
class C{  void loadCache(){  boolean worked=true;  ArrayList<SourceFile> files=new ArrayList<SourceFile>();  SwfInfo[] swfs=getAllSwfs();  for (int i=0; i < swfs.length; i++) {    if (swfs[i] != null)     worked=loadSwfFiles(files,swfs[i]) ? worked : false;  }  ArrayList<SourceFile> fa=trimFileList(files);  m_files=fa.toArray(new SourceFile[fa.size()]);  Arrays.sort(m_files,this);  if (worked)   m_swfsLoaded=swfs.length;}  }
class C{  public static FontImage createMaterial(char icon,Style s){  Font f=getMaterialDesignFont().derive(s.getFont().getHeight(),Font.STYLE_PLAIN);  return create("" + icon,s,f);}  }
class C{  public DomainObjectExceptionBean(ApplicationExceptionBean sup,ClassEnum classEnum){  super(sup);  setClassEnum(classEnum);}  }
class C{  @Override public int compare(String o1,String o2){  String s1;  String s2;  if ((o1 == null) && (o2 == null)) {    return 0;  } else   if (o1 == null) {    return -1;  } else   if (o2 == null) {    return +1;  }  s1=o1;  s2=o2;  return s1.toLowerCase().compareTo(s2.toLowerCase());}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void flushBuffer() throws IOException {  if (pos > 0) {    written+=pos;    flush(buf,0,pos);    pos=0;  }}  }
class C{  public void restore(){  savedStateVector.copyInto(stateVector);}  }
class C{  public static <T>LazyPOrderedSetX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPOrderedSet(),it);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.175 -0400",hash_original_method="2285F4C7A21413E552915C4BCF96FB35",hash_generated_method="E7D4CD810FFE749270829D8F9B1CBC70") protected void handleRestricted(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public ToStringBuilder append(String fieldName,boolean value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public static String parseIcon(Context context,String iconUrl){  try {    if (iconUrl.contains("_icon")) {      String sizeString=IconSizeUtils.generateSizeString(context);      String[] splittedUrl=iconUrl.split("\\.(?=[^\\.]+$)");      iconUrl=splittedUrl[0] + "_" + sizeString+ "."+ splittedUrl[1];    }  } catch (  Exception e) {    Logger.printException(e);  }  return iconUrl;}  }
class C{  @Override public boolean put(@Nullable K k,@Nullable V v){  if (isKeyContainsMultiValue) {    Slice keySlice=streamCodec.toByteArray(k);    int bucketId=getBucketId(k);    Slice valueSlice=store.getSync(bucketId,keySlice);    List<V> listOb;    if (valueSlice == null || valueSlice.length == 0) {      listOb=new ArrayList<>();    } else {      listOb=(List<V>)streamCodec.fromByteArray(valueSlice);    }    listOb.add(v);    return insertInStore(bucketId,timeBucket,keySlice,streamCodec.toByteArray(listOb));  }  return insertInStore(getBucketId(k),timeBucket,streamCodec.toByteArray(k),streamCodec.toByteArray(v));}  }
class C{  public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  public boolean isGroupDisabledWithButton(){  return disableGroupWithButton;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec10(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null);  } catch (  Exception e) {    fail("Unexpected exception is thrown");  }}  }
class C{  private StringBuilder appendQuotedString(final String pattern,final ParsePosition pos,final StringBuilder appendTo){  assert pattern.toCharArray()[pos.getIndex()] == QUOTE : "Quoted string must start with quote character";  if (appendTo != null) {    appendTo.append(QUOTE);  }  next(pos);  final int start=pos.getIndex();  final char[] c=pattern.toCharArray();  int lastHold=start;  for (int i=pos.getIndex(); i < pattern.length(); i++) {switch (c[pos.getIndex()]) {case QUOTE:      next(pos);    return appendTo == null ? null : appendTo.append(c,lastHold,pos.getIndex() - lastHold);default :  next(pos);}}throw new IllegalArgumentException("Unterminated quoted string at position " + start);}  }
class C{  public boolean isChoosableByPlayers(){  boolean choosable;  choosable=(detail == null || detail == 0) && (hair < Outfits.HAIR_OUTFITS) && (hair >= 0)&& (head < Outfits.HEAD_OUTFITS)&& (head >= 0)&& (dress < Outfits.CLOTHES_OUTFITS)&& (dress >= 0)&& (body < Outfits.BODY_OUTFITS)&& (body >= 0);  return choosable;}  }
class C{  private void transferBounds(boolean addVisualPadding){  if (cc.isExternal()) {    return;  }  int compX=x;  int compY=y;  int compW=w;  int compH=h;  if (addVisualPadding) {    int[] visualPadding=comp.getVisualPadding();    if (visualPadding != null) {      compX-=visualPadding[1];      compY-=visualPadding[0];      compW+=(visualPadding[1] + visualPadding[3]);      compH+=(visualPadding[0] + visualPadding[2]);    }  }  comp.setBounds(compX,compY,compW,compH);}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  private void computeSearchResult(Object element){  String label=labelProvider.getText(element);  if (StringUtils.containsIgnoreCase(label,searchString)) {    this.searchResult.add(element);  }  for (  Object child : contentProvider.getSortedChildren(element)) {    computeSearchResult(child);  }}  }
class C{  private boolean isCounterSignature(final XAdESSignature xadesCounterSignature){  final List<Element> signatureReferences=xadesCounterSignature.getSignatureReferences();  for (  final Element reference : signatureReferences) {    final String type=reference.getAttribute("Type");    if (xPathQueryHolder.XADES_COUNTERSIGNED_SIGNATURE.equals(type)) {      return true;    }  }  return false;}  }
class C{  public MethodSelectionException(String methodName,FastArray methods,Class[] arguments){  super(methodName);  this.methodName=methodName;  this.arguments=arguments;  this.methods=methods;}  }
class C{  private void updateRoomHeaderAvatar(){  if (null != mRoom) {    VectorUtils.loadRoomAvatar(this,mSession,mActionBarHeaderRoomAvatar,mRoom);  } else   if (null != sRoomPreviewData) {    String roomName=sRoomPreviewData.getRoomName();    if (TextUtils.isEmpty(roomName)) {      roomName=" ";    }    VectorUtils.loadUserAvatar(this,sRoomPreviewData.getSession(),mActionBarHeaderRoomAvatar,sRoomPreviewData.getRoomAvatarUrl(),sRoomPreviewData.getRoomId(),roomName);  }}  }
class C{  public meta(){}  }
class C{  public TermSuggestionBuilder minWordLength(int minWordLength){  this.minWordLength=minWordLength;  return this;}  }
class C{  @SuppressWarnings({"rawtypes"}) public boolean consumeItemsInSlots(@Nonnull IInventory inv,@Nonnull List expected,@Nonnull int[] slots){  for (int i=0; i < slots.length; ++i) {    final int slot=slots[i];    final Object expectedStack=expected.get(i);    if (expectedStack != null) {      if (expectedStack instanceof IMultiItemStacks) {        inv.decrStackSize(slot,((IMultiItemStacks)expectedStack).getStackSize());      } else       if (expectedStack instanceof ItemStack) {        inv.decrStackSize(slot,((ItemStack)expectedStack).stackSize);      }    }  }  return true;}  }
class C{  public int size(){  return t2imap.size();}  }
class C{  public static Set<Emoticon> parseEmoticons(JSONArray emotes,String streamRestriction,String info,Emoticon.SubType subType){  Set<Emoticon> result=new HashSet<>();  if (emotes != null) {    for (    Object emote : emotes) {      if (emote != null && emote instanceof JSONObject) {        Emoticon createdEmote=parseEmote((JSONObject)emote,streamRestriction,info,subType);        if (createdEmote != null) {          result.add(createdEmote);        }      }    }  }  return result;}  }
class C{  public ExistingConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public void reset(){  for (; currentSection != null; currentSection=currentSection.parent) {    for (int i=0, len=currentSection.validators.size(); i < len; i++)     releaseValidator((Schema)currentSection.schemas.elementAt(i),(Validator)currentSection.validators.elementAt(i));  }  initCurrentSection();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.813 -0500",hash_original_method="14DD7EE25463BE2F409F1A554DB1FBD9",hash_generated_method="90AC6F49BA9BBA0C4EBC7A0E5C05A64C") public boolean isGroupExpanded(int groupPosition){  GroupMetadata groupMetadata;  for (int i=mExpGroupMetadataList.size() - 1; i >= 0; i--) {    groupMetadata=mExpGroupMetadataList.get(i);    if (groupMetadata.gPos == groupPosition) {      return true;    }  }  return false;}  }
class C{  public static DoubleVector wrap(double[] vals){  return new DoubleVector(vals,true);}  }
class C{  public Decomposition clone(){  Decomposition result=new Decomposition();  result.definedOpRep=null;  if (this.definedOpRep != null) {    result.definedOpRep=this.definedOpRep.clone();  }  result.renaming=null;  if (this.renaming != null) {    result.renaming=this.renaming.clone();  }  result.type=this.type;  result.definedOp=this.definedOp;  result.formalParams=this.formalParams;  result.arguments=this.arguments;  result.argNodes=this.argNodes;  result.moduleName=this.moduleName;  result.children=this.children;  result.namePath=this.namePath;  result.quantIds=this.quantIds;  result.quantBounds=this.quantBounds;  result.quantBoundsubexpNames=this.quantBoundsubexpNames;  result.primed=this.primed;  result.instantiationSubstitutions=this.instantiationSubstitutions.clone();  return result;}  }
class C{  private void putInvalidatePut(){  putAndInvalidate();  region.put(new Integer(1),new Integer(2));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public int selectPivotIndex(Comparable[] ar,int left,int right){  int midIndex=(left + right) / 2;  int lowIndex=left;  if (ar[lowIndex].compareTo(ar[midIndex]) >= 0) {    lowIndex=midIndex;    midIndex=left;  }  if (ar[right].compareTo(ar[lowIndex]) <= 0) {    return lowIndex;  } else   if (ar[right].compareTo(ar[midIndex]) <= 0) {    return midIndex;  }  return right;}  }
class C{  protected void addEntry(HashEntry entry,int hashIndex){  data[hashIndex]=entry;}  }
class C{  private void parse(KXmlParser parser,DocumentImpl document,Node node,int endToken) throws XmlPullParserException, IOException {  int token=parser.getEventType();  while (token != endToken && token != XmlPullParser.END_DOCUMENT) {    if (token == XmlPullParser.PROCESSING_INSTRUCTION) {      String text=parser.getText();      int dot=text.indexOf(' ');      String target=(dot != -1 ? text.substring(0,dot) : text);      String data=(dot != -1 ? text.substring(dot + 1) : "");      node.appendChild(document.createProcessingInstruction(target,data));    } else     if (token == XmlPullParser.DOCDECL) {      String name=parser.getRootElementName();      String publicId=parser.getPublicId();      String systemId=parser.getSystemId();      document.appendChild(new DocumentTypeImpl(document,name,publicId,systemId));    } else     if (token == XmlPullParser.COMMENT) {      if (!ignoreComments) {        node.appendChild(document.createComment(parser.getText()));      }    } else     if (token == XmlPullParser.IGNORABLE_WHITESPACE) {      if (!ignoreElementContentWhitespace && document != node) {        appendText(document,node,token,parser.getText());      }    } else     if (token == XmlPullParser.TEXT || token == XmlPullParser.CDSECT) {      appendText(document,node,token,parser.getText());    } else     if (token == XmlPullParser.ENTITY_REF) {      String entity=parser.getName();      if (entityResolver != null) {      }      String resolved=resolvePredefinedOrCharacterEntity(entity);      if (resolved != null) {        appendText(document,node,token,resolved);      } else {        node.appendChild(document.createEntityReference(entity));      }    } else     if (token == XmlPullParser.START_TAG) {      if (namespaceAware) {        String namespace=parser.getNamespace();        String name=parser.getName();        String prefix=parser.getPrefix();        if ("".equals(namespace)) {          namespace=null;        }        Element element=document.createElementNS(namespace,name);        element.setPrefix(prefix);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrNamespace=parser.getAttributeNamespace(i);          String attrPrefix=parser.getAttributePrefix(i);          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          if ("".equals(attrNamespace)) {            attrNamespace=null;          }          Attr attr=document.createAttributeNS(attrNamespace,attrName);          attr.setPrefix(attrPrefix);          attr.setValue(attrValue);          element.setAttributeNodeNS(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,namespace,name);      } else {        String name=parser.getName();        Element element=document.createElement(name);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          Attr attr=document.createAttribute(attrName);          attr.setValue(attrValue);          element.setAttributeNode(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,"",name);      }    }    token=parser.nextToken();  }}  }
class C{  private static void anchorTest() throws Exception {  Pattern p=Pattern.compile("^.*$",Pattern.MULTILINE);  Matcher m=p.matcher("blah1\r\nblah2");  m.find();  m.find();  if (!m.group().equals("blah2"))   failCount++;  m.reset("blah1\n\rblah2");  m.find();  m.find();  m.find();  if (!m.group().equals("blah2"))   failCount++;  p=Pattern.compile(".+$");  m=p.matcher("blah1\r\n");  if (!m.find())   failCount++;  if (!m.group().equals("blah1"))   failCount++;  if (m.find())   failCount++;  p=Pattern.compile(".+$",Pattern.MULTILINE);  m=p.matcher("blah1\r\n");  if (!m.find())   failCount++;  if (m.find())   failCount++;  p=Pattern.compile(".+$",Pattern.MULTILINE);  m=p.matcher("blah1\u0085");  if (!m.find())   failCount++;  p=Pattern.compile("^.*$",Pattern.MULTILINE);  m=p.matcher(toSupplementaries("blah1\r\nblah2"));  m.find();  m.find();  if (!m.group().equals(toSupplementaries("blah2")))   failCount++;  m.reset(toSupplementaries("blah1\n\rblah2"));  m.find();  m.find();  m.find();  if (!m.group().equals(toSupplementaries("blah2")))   failCount++;  p=Pattern.compile(".+$");  m=p.matcher(toSupplementaries("blah1\r\n"));  if (!m.find())   failCount++;  if (!m.group().equals(toSupplementaries("blah1")))   failCount++;  if (m.find())   failCount++;  p=Pattern.compile(".+$",Pattern.MULTILINE);  m=p.matcher(toSupplementaries("blah1\r\n"));  if (!m.find())   failCount++;  if (m.find())   failCount++;  p=Pattern.compile(".+$",Pattern.MULTILINE);  m=p.matcher(toSupplementaries("blah1\u0085"));  if (!m.find())   failCount++;  report("Anchors");}  }
class C{  public Chest(){  setRPClass(CHEST_RPCLASS_NAME);  put("type",CHEST_RPCLASS_NAME);  open=false;  final RPSlot slot=new ChestSlot(this);  addSlot(slot);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.336 -0500",hash_original_method="77EB9E59BE67AA43485FF3A0F0492CB7",hash_generated_method="4CD52BDA532FC5AB7C0B2B2E1A0C3792") public final void lazySet(int newValue){  set(newValue);}  }
class C{  public DataViewer(){  super("ARFF-Viewer");  createFrame();}  }
class C{  public DOMNodeInsertedEventListener(){}  }
class C{  public static String byteToHexString(byte data){  StringBuilder hexStrBuff=new StringBuilder(2);  String hexByteStr=Integer.toHexString(data & 0xff).toUpperCase();  if (hexByteStr.length() == 1) {    hexStrBuff.append("0");  }  hexStrBuff.append(hexByteStr);  return hexStrBuff.toString();}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,String unManagedFileSystemNativeGuid,StorageSystem system,StoragePool pool,StoragePort storagePort,VNXFileSystem fileSystem) throws IOException, VNXFileCollectionException {  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(system.getId());    unManagedFileSystem.setStoragePoolUri(pool.getId());    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),FALSE);  if (fileSystem.getType().equals(UnManagedDiscoveredObject.SupportedProvisioningType.THICK.name())) {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),FALSE);  } else {    unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),TRUE);  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),FALSE);  if (null != system) {    StringSet systemTypes=new StringSet();    systemTypes.add(system.getSystemType());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(_dbClient,pool.getId());    _logger.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      _logger.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != storagePort) {    StringSet storagePorts=new StringSet();    storagePorts.add(storagePort.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),TRUE);  StringSet fsPath=new StringSet();  fsPath.add("/" + fileSystem.getFsName());  StringSet fsMountPath=new StringSet();  fsMountPath.add("/" + fileSystem.getFsName());  StringSet fsName=new StringSet();  fsName.add(fileSystem.getFsName());  StringSet fsId=new StringSet();  fsId.add(fileSystem.getFsId() + "");  unManagedFileSystem.setLabel(fileSystem.getFsName());  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NAME.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NATIVE_ID.toString(),fsId);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PATH.toString(),fsPath);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  StringSet allocatedCapacity=new StringSet();  String usedCapacity="0";  if (fileSystem.getUsedCapacity() != null) {    usedCapacity=fileSystem.getUsedCapacity();  }  allocatedCapacity.add(usedCapacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet provisionedCapacity=new StringSet();  String capacity="0";  if (fileSystem.getTotalCapacity() != null) {    capacity=fileSystem.getTotalCapacity();  }  provisionedCapacity.add(capacity);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.setFileSystemCharacterstics(unManagedFileSystemCharacteristics);  return unManagedFileSystem;}  }
class C{  public boolean isComplete(){  Object oo=get_Value(COLUMNNAME_IsComplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  StringBuilder rs=new StringBuilder();  int saltLength=salt.length();  if (saltLength < 28) {    throw new IllegalArgumentException("Invalid salt");  }  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (saltLength - off < 25) {    throw new IllegalArgumentException("Invalid salt");  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds);  rs.append("$2");  if (minor >= 'a') {    rs.append(minor);  }  rs.append("$");  if (rounds < 10) {    rs.append("0");  }  rs.append(rounds);  rs.append("$");  encode_base64(saltb,saltb.length,rs);  encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1,rs);  return rs.toString();}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public void test(String problem,String algorithm1,String algorithm2,boolean allowBetterPerformance,AlgorithmFactory factory){  test(problem,algorithm1,new Properties(),algorithm2,new Properties(),allowBetterPerformance,factory);}  }
class C{  public Builder addDefaultValues(CharSequence... defaultValues){  for (  CharSequence defaultValue : defaultValues) {    this.defaultValues.add(defaultValue);  }  return this;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void stop(){  if (stopHelper()) {    Thread.currentThread().stop();  }}  }
class C{  void scheduleTMasterContainer() throws ContainerAllocationException {  LOG.log(Level.INFO,"Scheduling container for TM: {0}",topologyName);  launchContainerForExecutor(new HeronWorker(TMASTER_CONTAINER_ID,1,TM_MEM_SIZE_MB));}  }
class C{  public boolean isMissing(Attribute att){  return isMissing(att.index());}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public ListQueryAPIResponseEntity listQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName){  return listQuery(query,startTime,endTime,pageSize,startRowkey,treeAgg,timeSeries,intervalmin,top,filterIfMissing,parallel,metricName,true);}  }
class C{  private static int recordSize(byte type){  if ((type == ct_change_cipher_spec) || (type == ct_alert)) {    return maxAlertRecordSize;  } else {    return maxRecordSize;  }}  }
class C{  @Override public String toString(){  String result;  result=getClass().getName();  result+=" " + Utils.joinOptions(getOptions());  return result.trim();}  }
class C{  public CCheckBox(String text){  super(text);  init();}  }
class C{  public WriteBuffer putStringData(String s,int len){  ByteBuffer b=ensureCapacity(3 * len);  DataUtils.writeStringData(b,s,len);  return this;}  }
class C{  public VPAttribute(GridTab gridTab,boolean mandatory,boolean isReadOnly,boolean isUpdateable,int WindowNo,MPAttributeLookup lookup,boolean searchOnly){  super();  super.setName(m_columnName);  m_text.setName("VPAttribute Text - " + m_columnName);  m_button.setName("VPAttribute Button - " + m_columnName);  m_value=0;  m_GridTab=gridTab;  m_WindowNo=WindowNo;  m_mPAttribute=lookup;  m_C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),WindowNo,"C_BPartner_ID");  m_searchOnly=searchOnly;  LookAndFeel.installBorder(this,"TextField.border");  this.setLayout(new BorderLayout());  this.setPreferredSize(m_text.getPreferredSize());  int height=m_text.getPreferredSize().height;  m_text.setEditable(false);  m_text.setFocusable(false);  m_text.setBorder(null);  m_text.setHorizontalAlignment(JTextField.LEADING);  setMandatory(mandatory);  this.add(m_text,BorderLayout.CENTER);  m_button.setIcon(Env.getImageIcon("PAttribute10.gif"));  m_button.setMargin(new Insets(0,0,0,0));  m_button.setPreferredSize(new Dimension(height,height));  m_button.addActionListener(this);  m_button.setFocusable(true);  this.add(m_button,BorderLayout.EAST);  this.setPreferredSize(this.getPreferredSize());  if (isReadOnly || !isUpdateable)   setReadWrite(false); else   setReadWrite(true);  m_text.addMouseListener(new VPAttribute_mouseAdapter(this));  menuEditor=new CMenuItem(Msg.getMsg(Env.getCtx(),"PAttribute"),Env.getImageIcon("Zoom16.gif"));  menuEditor.addActionListener(this);  popupMenu.add(menuEditor);  set_oldValue();}  }
class C{  public static void markFirstLaunch(final Context context){  SharedPreferences sp=getDefaultSharedPreferences(context);  sp.edit().putBoolean(SHARED_PREF_IS_FIRST_LAUNCH,false).apply();}  }
class C{  public static int countPuncs(String str){  int count=0;  for (int i=0; i < str.length(); i++) {    if (str.charAt(i) == '.' || str.charAt(i) == '?' || str.charAt(i) == '!' || str.charAt(i) == ',' || str.charAt(i) == ':' || str.charAt(i) == ';') {      count++;    }  }  return count;}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public static void main(String[] args){  runFilter(new ClassAssigner(),args);}  }
class C{  public static Pattern compile(String regex) throws PatternSyntaxException {  return new Pattern(regex,DEFAULT);}  }
class C{  protected MyAbstractList(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public int size(){  return listeners.size();}  }
class C{  private void addBlockToWorklist(SsaBasicBlock ssaBlock){  if (!executableBlocks.get(ssaBlock.getIndex())) {    cfgWorklist.add(ssaBlock);    executableBlocks.set(ssaBlock.getIndex());  } else {    cfgPhiWorklist.add(ssaBlock);  }}  }
class C{  private void mergeLanesOnSameLink(Map<Integer,Map<Integer,List<Integer>>> knotenVonSpurNachSpurMapping,Map<Integer,Map<Integer,String>> knotenSpurLinkMapping){  Map<Integer,Tuple<Integer,Integer>> knotenVonSpurNachSpurToMergeMap=new HashMap<Integer,Tuple<Integer,Integer>>();  for (  Integer nodeId : knotenVonSpurNachSpurMapping.keySet()) {    Map<Integer,List<Integer>> vonSpurNachSpurMap=knotenVonSpurNachSpurMapping.get(nodeId);    for (    Integer vonSpurId : vonSpurNachSpurMap.keySet()) {      String vonSpurLinkId=knotenSpurLinkMapping.get(nodeId).get(vonSpurId);      List<Integer> nachSpurList=vonSpurNachSpurMap.get(vonSpurId);      for (      Integer nachSpurId : nachSpurList) {        String nachSpurLinkId=knotenSpurLinkMapping.get(nodeId).get(nachSpurId);        if (vonSpurLinkId.equalsIgnoreCase(nachSpurLinkId)) {          log.info("Found vonSpurNachSpur mapping on same link id " + vonSpurLinkId + " at node id "+ nodeId+ " vonSpur id "+ vonSpurId+ " nachSpur id "+ nachSpurId);          knotenVonSpurNachSpurToMergeMap.put(nodeId,new Tuple<Integer,Integer>(vonSpurId,nachSpurId));        }      }    }  }}  }
class C{  public ByteMemberValue(ConstPool cp){  super('B',cp);  setValue((byte)0);}  }
class C{  public void testRadix16Pos(){  String value="287628a883451b800865c67e8d7ff20";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public static void logError(String msg,Throwable ex){  getDefault().getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.OK,msg,ex));}  }
class C{  public boolean letsItemsOut(byte aSide,int aCoverID,int aCoverVariable,int aSlot,ICoverable aTileEntity){  return false;}  }
class C{  public void addRaster(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,offset_x1,offset_y1,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  private boolean nextSource() throws IOException {  if (mSamReader != null) {    mSamReader.close();  }  mSamReader=null;  mSamIterator=null;  if (mSourceIt.hasNext()) {    final InputStream is=mSourceIt.next();    if (is == null) {      mSamReader=null;      mSamIterator=null;      return false;    }    mSamReader=SamUtils.makeSamReader(is);    checkSortOrder();    final RecordIterator<SAMRecord> it=new SkipInvalidRecordsIterator(mSourceIt.currentFile().getPath(),mSamReader);    mSamIterator=mFilter == null ? it : new SamFilterIterator(it,mFilter);    return true;  }  return false;}  }
class C{  public static String toString(String[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  @SideOnly(Side.CLIENT) public boolean isInRangeToRenderDist(double distance){  double d0=this.getEntityBoundingBox().getAverageEdgeLength();  if (Double.isNaN(d0)) {    d0=1.0D;  }  d0=d0 * 64.0D * renderDistanceWeight;  return distance < d0 * d0;}  }
class C{  protected void fireModelChanged(){  final boolean empty=getAnnotationModelEvent().isEmpty();  if (empty) {    return;  }  if (getDocumentHandle() == null || getDocumentHandle().getDocEventBus() == null) {    return;  }  getDocumentHandle().getDocEventBus().fireEvent(this.modelEvent);}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  public WorkspacePoint(int x,int y){  super(x,y);}  }
class C{  public synchronized IFloodlightModuleContext loadModulesFromList(Collection<String> configMods,Properties prop) throws FloodlightModuleException {  logger.debug("Starting module loader");  findAllModules(configMods);  ArrayList<IFloodlightModule> moduleList=new ArrayList<>();  Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap=new HashMap<>();  HashSet<String> modsVisited=new HashSet<>();  ArrayDeque<String> modsToLoad=new ArrayDeque<>(configMods);  while (!modsToLoad.isEmpty()) {    String moduleName=modsToLoad.removeFirst();    traverseDeps(moduleName,modsToLoad,moduleList,moduleMap,modsVisited);  }  parseConfigParameters(prop);  loadedModuleList=moduleList;  initModules(moduleList);  if (startupModules)   startupModules(moduleList);  return floodlightModuleContext;}  }
class C{  public static HttpResponse response(String body){  return builder(HttpResponse.of(body)).set(null,200).build();}  }
class C{  public void add() throws IOException {  writeCode(ADD);}  }
class C{  protected void elementRemoved(Openable element){  if (element.isOpen()) {    close(element);  }  removeFromParentInfo(element);  int elementType=element.getElementType();switch (elementType) {case IJavaElement.JAVA_MODEL:    element.manager.getIndexManager().reset();  break;case IJavaElement.JAVA_PROJECT:JavaModelManager manager=element.manager;JavaProject javaProject=(JavaProject)element;manager.removePerProjectInfo(javaProject,true);manager.containerRemove(javaProject);break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:this.projectsToUpdate.add(element.getJavaProject());break;case IJavaElement.PACKAGE_FRAGMENT:JavaProject project=(JavaProject)element.getJavaProject();project.resetCaches();break;}}  }
class C{  public ClientMessage browseMessage(SimpleString queueName,long timeout){  final boolean browseOnly=true;  return getInternalClient().receiveMessage(queueName,timeout,browseOnly);}  }
class C{  private void doLoad(ExamDistributionPrefsForm frm,String distPrefId){  sessionContext.checkPermission(distPrefId,"DistributionPref",Right.ExaminationDistributionPreferenceDetail);  DistributionPref dp=new DistributionPrefDAO().get(new Long(distPrefId));  frm.setDistType(dp.getDistributionType().getUniqueId().toString());  frm.setDescription(dp.getDistributionType().getDescr());  frm.setPrefLevel(dp.getPrefLevel().getPrefId().toString());  frm.setDistPrefId(distPrefId);  for (Iterator i=new TreeSet(dp.getDistributionObjects()).iterator(); i.hasNext(); ) {    DistributionObject distObj=(DistributionObject)i.next();    Exam exam=(Exam)distObj.getPrefGroup();    frm.getSubjectArea().add(exam.firstSubjectArea().getUniqueId());    frm.getCourseNbr().add(exam.firstCourseOffering().getUniqueId());    frm.getExam().add(exam.getUniqueId());  }}  }
class C{  @Override public void onGlobalLayout(){  mTargetWrapperView.getViewTreeObserver().removeOnGlobalLayoutListener(this);  continueAnimation();}  }
class C{  public Permutation(byte[] enc){  if (enc.length <= 4) {    throw new IllegalArgumentException("invalid encoding");  }  int n=LittleEndianConversions.OS2IP(enc,0);  int size=IntegerFunctions.ceilLog256(n - 1);  if (enc.length != 4 + n * size) {    throw new IllegalArgumentException("invalid encoding");  }  perm=new int[n];  for (int i=0; i < n; i++) {    perm[i]=LittleEndianConversions.OS2IP(enc,4 + i * size,size);  }  if (!isPermutation(perm)) {    throw new IllegalArgumentException("invalid encoding");  }}  }
class C{  public PrivateKeyEncryptedException(){  super();}  }
class C{  public Collection addAccept(String accept){  super.addElement(Accept.KEY,new Accept(accept));  return this;}  }
class C{  public static void initializeMeasureCompilation(){  for (  OptimizationPlanElement element : masterPlan) {    element.initializeForMeasureCompilation();  }}  }
class C{  @Override public void quitServer(){  quitServer(service.getSettings().getQuitMessage());}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){}  }
class C{  @NoInline static RVMMethod resolveMethodRef(DynamicLink dynamicLink){  MethodReference methodRef=dynamicLink.methodRef();  if (dynamicLink.isInvokeSpecial()) {    return methodRef.resolveInvokeSpecial();  } else   if (dynamicLink.isInvokeStatic()) {    return methodRef.resolve();  } else {    VM.disableGC();    Object targetObject;    if (VM.BuildForIA32) {      targetObject=org.jikesrvm.ia32.DynamicLinkerHelper.getReceiverObject();    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForPowerPC);      targetObject=org.jikesrvm.ppc.DynamicLinkerHelper.getReceiverObject();    }    VM.enableGC();    RVMClass targetClass=Magic.getObjectType(targetObject).asClass();    RVMMethod targetMethod=targetClass.findVirtualMethod(methodRef.getName(),methodRef.getDescriptor());    if (targetMethod == null) {      throw new IncompatibleClassChangeError(targetClass.getDescriptor().classNameFromDescriptor());    }    return targetMethod;  }}  }
class C{  public RelationshipTypeAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  public boolean doSave(){  try {    usersAndTimes.save();    dataFileBean.save();    notificationsEditor.save();    projectVariableEditor.save();    project=new ProjectDao().saveOrUpdateProject(project);    workloadScripts.save();    projectEvent.fire(new ModifiedProjectMessage(project,this));    return true;  } catch (  Exception e) {    LOG.error("Error saving: " + e,e);    exceptionHandler.handle(e);  }  return false;}  }
class C{  public static void printToFile(File file,String message,boolean append){  FileWriter fw=null;  PrintWriter pw=null;  try {    fw=new FileWriter(file,append);    pw=new PrintWriter(fw);    pw.print(message);  } catch (  Exception e) {    System.out.println("Exception: in printToFile " + file.getAbsolutePath() + " "+ message);    e.printStackTrace();  } finally {    if (pw != null) {      pw.close();    }  }}  }
class C{  public SimpleThreadPool(){}  }
class C{  public void removeCommand(String notificationName){  if (hasCommand(notificationName)) {    view.removeObserver(notificationName,this);    commandMap.remove(notificationName);  }}  }
class C{  private Collection<IInterval> gather0(IInterval target){  int begin=target.getLeft();  int end=target.getRight();  if (begin <= left && right <= end) {    return intervals();  } else {    int mid=(left + right) / 2;    Collection<IInterval> col1=new ArrayList<IInterval>();    Collection<IInterval> col2=new ArrayList<IInterval>();    if (begin < mid) {      col1=((StoredIntervalsNode<T>)lson).gather0(target);    }    if (mid < end) {      col2=((StoredIntervalsNode<T>)rson).gather0(target);    }    for (    IInterval iiv : col2) {      if (!col1.contains(iiv)) {        col1.add(iiv);      }    }    for (    IInterval iiv : intervals()) {      if (!col1.contains(iiv)) {        col1.add(iiv);      }    }    return col1;  }}  }
class C{  public static void pause(){  try {    ThreadUtil.sleep(AbstractUIContext.getAIPauseDuration());  } catch (  final Exception e) {    ClientLogger.logQuietly(e);  }}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  private static String replace(String str){  return str.replaceAll(Pattern.quote("$"),"\\$");}  }
class C{  public static void newPhase(String description){  if (m_profiler != null) {    m_profiler.advanceGeneration(description);  }}  }
class C{  public boolean isImageCachable(int w,int h){  return (w * h) < maxSingleImagePixelSize;}  }
class C{  public static DBID deref(DBIDRef ref){  if (ref instanceof DBID) {    return (DBID)ref;  }  return importInteger(ref.internalGetIndex());}  }
class C{  public boolean isNone(){  return this == NONE;}  }
class C{  public Container bindFabToContainer(Component cnt){  return bindFabToContainer(cnt,Component.RIGHT,Component.BOTTOM);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void disableAllAttributes(){  enabledAttributes.removeAllElements();}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public boolean isFunctionPrototype(){  return category == BaseTypeCategory.FUNCTION_PROTOTYPE;}  }
class C{  private Calendar parse(final Class sourceType,final Class targetType,final String value,final DateFormat format){  format.setLenient(false);  ParsePosition pos=new ParsePosition(0);  Date parsedDate=format.parse(value,pos);  if (pos.getErrorIndex() >= 0 || pos.getIndex() != value.length() || parsedDate == null) {    String msg="Error converting '" + this.toString(sourceType) + "' to '"+ this.toString(targetType)+ "'";    if (format instanceof SimpleDateFormat) {      msg+=" using pattern '" + ((SimpleDateFormat)format).toPattern() + "'";    }    throw new ConversionException(msg);  }  Calendar calendar=format.getCalendar();  return calendar;}  }
class C{  private void editSettingsAction(){  SettingsDialog.show(ControlUtilities.getParentWindow(this),this.simulation.getWorld().getSettings());}  }
class C{  public String readNextWord(){  if (tokenizer.hasMoreTokens()) {    return tokenizer.nextToken();  } else {    return null;  }}  }
class C{  public static NodeVersion parse(final String s){  final Matcher matcher=VERSION_PATTERN.matcher(s);  if (!matcher.matches()) {    throw new IllegalArgumentException(String.format("pattern '%s' could not be parsed",s));  }  return new NodeVersion(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),matcher.group(5));}  }
class C{  private void initLotSelection(){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  list.add(new KeyNamePair(-1,""));  String whereAttributeSet;  if (p_M_AttributeSet_ID > 0)   whereAttributeSet="AND M_Product_ID IN (SELECT M_Product_ID FROM M_Product WHERE M_AttributeSet_ID=" + p_M_AttributeSet_ID + ")"; else   whereAttributeSet="";  String sql=MRole.getDefault().addAccessSQL("SELECT M_Lot_ID, Name FROM M_Lot WHERE IsActive='Y' " + whereAttributeSet + " ORDER BY 2","M_Lot",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next())     list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  KeyNamePair[] items=new KeyNamePair[list.size()];  list.toArray(items);  lotSelection=new VComboBox(items);}  }
class C{  private static String toString(Serializable o) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(o);  oos.close();  return Base64.encodeToString(baos.toByteArray(),Base64.DEFAULT);}  }
class C{  @Override public void init(Bundle savedInstanceState){  setTitle(R.string.image_activity);  setContent(R.layout.activity_content);  setImage(R.drawable.profile_picture);  Intent intent=getIntent();  if (intent.getBooleanExtra(SampleActivity.ARG_USE_EXPANSION,false)) {    expandFromPoints(intent.getIntExtra(SampleActivity.ARG_EXPANSION_LEFT_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_TOP_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_WIDTH,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_HEIGHT,0));  }}  }
class C{  @Nullable public CodenvyLicense load() throws LicenseException {  String licenseText;  try {    licenseText=storageManager.loadProperty(CODENVY_LICENSE_KEY);  } catch (  StorageNotFoundException|PropertyNotFoundException e) {    throw new LicenseNotFoundException("Codenvy license not found");  }catch (  IOException e) {    throw new LicenseException(e.getMessage(),e);  }  if (isNullOrEmpty(licenseText)) {    throw new LicenseNotFoundException("Codenvy license not found");  }  return licenseFactory.create(licenseText);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Bundle forPair(String key,String value){  Bundle b=new Bundle(1);  b.putString(key,value);  return b;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getAirDow();}  }
class C{  public void addAll(ASN1EncodableVector other){  for (Enumeration en=other.v.elements(); en.hasMoreElements(); ) {    v.addElement(en.nextElement());  }}  }
class C{  public AbstractValidatorImplementation(final CharSequence errorMessage,final boolean result){  super(errorMessage);  this.result=result;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public Bits dup(){  Assert.check(currentState != BitsState.UNKNOWN);  Bits tmp=new Bits();  tmp.bits=dupBits();  currentState=BitsState.NORMAL;  return tmp;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RepairingPriceCalculationStrategy(Set<String> repairableItems){  items=repairableItems;}  }
class C{  public static int doubleCompare(double a,double b,double precision){  if (java.lang.Math.abs(a - b) <= precision)   return 0; else   if (a > b)   return 1; else   return -1;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TEMPLATE_LITERAL__SEGMENTS:    getSegments().clear();  getSegments().addAll((Collection<? extends Expression>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Scale(double value){  this.value=value;}  }
class C{  public synchronized boolean addPeer(Peer p){  if (isKnownPeer(p)) {    touchPeer(p);    return false;  } else {    mCurrentPeers.add(p);    return true;  }}  }
class C{  public static void writePath(BinaryRawWriter writer,@Nullable IgfsPath path){  if (path != null) {    writer.writeBoolean(true);    path.writeRawBinary(writer);  } else   writer.writeBoolean(false);}  }
class C{  protected StoreRequest(ParameterList params){  _parameters=params;}  }
class C{  public Orange newOrange(String name) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": " + toString()+ ".newOrange("+ name+ "): BEGIN");  Orange orange=new OrangeImpl(name);  logger.log(Level.FINEST,threadName + ": " + toString()+ ".newOrange("+ name+ "): END");  return orange;}  }
class C{  boolean skip(Kind cl,Kind sp,Kind cp){  if (cl == Kind.NONE && sp == Kind.NONE && cp == Kind.NONE)   return true;  if (sp == Kind.OLD && cp == Kind.OLD)   return true;  if ((sp == Kind.NEW && cp != Kind.OLD) || (cp == Kind.NEW && sp != Kind.OLD))   return true;  if (sp == Kind.GEN && !(cl == Kind.NONE && cp == Kind.NONE) || cp == Kind.GEN && !(cl == Kind.NONE && sp == Kind.NONE)) {    return true;  }  return false;}  }
class C{  public static <T,V>void show(BackgroundTask<T,V> task,boolean cancelAllowed){  show(task,null,null,cancelAllowed);}  }
class C{  public long currentStopMarker(){  return delimiter[currSegment + 1];}  }
class C{  protected int skipWSC() throws IOException, RDFHandlerException {  int c=readCodePoint();  while (TurtleUtil.isWhitespace(c) || c == '#') {    if (c == '#') {      processComment();    } else     if (c == '\n') {      lineNumber++;      reportLocation();    }    c=readCodePoint();  }  unread(c);  return c;}  }
class C{  public static long[] toLongArray(@Nullable Collection<Long> c){  if (c == null || c.isEmpty())   return EMPTY_LONGS;  long[] arr=new long[c.size()];  int idx=0;  for (  Long l : c)   arr[idx++]=l;  return arr;}  }
class C{  public boolean contains(final String str){  return indexOf(str,0) >= 0;}  }
class C{  private ZyFunctionNodeBuilder(){}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public void executeFirst(Runnable task){synchronized (internalLock) {    queue.addFirst(task);  }  startQueueWorker();}  }
class C{  public static void centerShell(final Shell shell){  final Monitor primary=shell.getDisplay().getPrimaryMonitor();  final Rectangle bounds=primary.getBounds();  final Rectangle rect=shell.getBounds();  final int x=bounds.x + (bounds.width - rect.width) / 2;  final int y=bounds.y + (bounds.height - rect.height) / 2;  shell.setLocation(x,y);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  courseNbr="";  classes=new ArrayList();  subjectAreas=new ArrayList();  subjectAreaIds=new String[0];  demandIsVisible=new Boolean(false);  demand=new Boolean(false);  limit=new Boolean(false);  roomLimit=new Boolean(false);  datePattern=new Boolean(false);  timePattern=new Boolean(false);  instructor=new Boolean(false);  preferences=new Boolean(false);  timetable=new Boolean(false);  manager=new Boolean(false);  divSec=new Boolean(false);  schedulePrintNote=new Boolean(false);  note=new Boolean(false);  exams=new Boolean(false);  sortBy=ClassCourseComparator.getName(ClassCourseComparator.SortBy.NAME);  filterInstructor="";  filterManager="";  filterAssignedRoom="";  filterIType="";  filterAssignedTimeMon=false;  filterAssignedTimeTue=false;  filterAssignedTimeWed=false;  filterAssignedTimeThu=false;  filterAssignedTimeFri=false;  filterAssignedTimeSat=false;  filterAssignedTimeSun=false;  filterAssignedTimeHour="";  filterAssignedTimeMin="";  filterAssignedTimeAmPm="";  filterAssignedTimeLength="";  sortByKeepSubparts=false;  showCrossListedClasses=false;  returnAllControlClassesForSubjects=false;  sessionInLLREditStatus=false;  LookupTables.setupItypes(request,true);}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.724 -0400",hash_original_method="A695A8BF148290BDBA8C8C60EA64EB2D",hash_generated_method="D7ACD15EBD2094B01026B6C8D316484C") public FileWriterWithEncoding(String filename,CharsetEncoder encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  public static double cdf(double val,double k,double theta){  if (val < 0) {    return 0.;  }  final double vt=val * theta;  return (vt == Double.POSITIVE_INFINITY) ? 1. : regularizedGammaP(k,vt);}  }
class C{  public void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  private void processQCmd(){  cmds.addPop();  state=(ParserState)parserStates.pop();}  }
class C{  public boolean isPreferredPlan(){  boolean ret=true;  for (  Plan c : _childs)   if (c.getNode().getDataType() == DataType.MATRIX)   ret&=_ips.equals(c.getInterestingProperties());  return ret;}  }
class C{  public DataTransformProcess(DataTransform... transforms){  this();  for (  DataTransform dt : transforms)   this.addTransform(dt);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.200 -0500",hash_original_method="9AD54EE55D5A75E97AE6A449995157CC",hash_generated_method="6A077B8794B022F376FBDC9A4703A21D") public synchronized void stop(){  fStop=true;}  }
class C{  public void traverseFragment(Node pos) throws org.xml.sax.SAXException {  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }}  }
class C{  @Override public Object firstElement(){  return ((CheckBoxListItem)super.firstElement()).getContent();}  }
class C{  public GestureTouchHelperCallback(final GestureAdapter adapter){  mGestureAdapter=adapter;}  }
class C{  public static RepositoryExpression parseRepositoryExpression(String toParse) throws ParseError {  StreamTokenizer t=Parser.tokenize(toParse);  Term creator=Parser.parseTerm(t);  List<Operation> operations=Parser.parseOperationList(t);  RepositoryExpression ex=new RepositoryExpression(creator);  if (!operations.isEmpty()) {    throw new ParseError("Expression must represent a simple repository, e.g. 'internal(revision=3)'.");  }  return ex;}  }
class C{  private void parseBAAPM(Element apmTag,Entity entity){  if (!(entity instanceof BattleArmor)) {    warning.append("Found a BA APM tag but Entity is not " + "BattleArmor!\n");    return;  }  String mountNumber=apmTag.getAttribute(BA_APM_MOUNT_NUM);  String apTypeName=apmTag.getAttribute(BA_APM_TYPE_NAME);  if (mountNumber.length() == 0) {    warning.append("antiPersonnelMount tag does not specify " + "a baAPMountNum!\n");    return;  }  Mounted apMount=entity.getEquipment(Integer.parseInt(mountNumber));  EquipmentType apType=null;  if (apTypeName.length() > 0) {    apType=EquipmentType.get(apTypeName);  }  if (apMount.getLinked() != null && apMount.getLinked().getType() != apType) {    Mounted apWeapon=apMount.getLinked();    entity.getEquipment().remove(apWeapon);    entity.getWeaponList().remove(apWeapon);    entity.getTotalWeaponList().remove(apWeapon);    for (int loc=0; loc < entity.locations(); loc++) {      for (int c=0; c < entity.getNumberOfCriticals(loc); c++) {        CriticalSlot crit=entity.getCritical(loc,c);        if (crit != null && crit.getMount() != null && crit.getMount().equals(apWeapon)) {          entity.setCritical(loc,c,null);        }      }    }  }  if ((apMount.getLinked() != null && apMount.getLinked().getType() == apType) || (apType == null)) {    return;  }  try {    Mounted newWeap=entity.addEquipment(apType,apMount.getLocation());    apMount.setLinked(newWeap);    newWeap.setLinked(apMount);    newWeap.setAPMMounted(true);  } catch (  LocationFullException ex) {    ex.printStackTrace();  }}  }
class C{  public WhitenedPCA(DataSet dataSet,int dims){  SingularValueDecomposition svd=getSVD(dataSet);  setRegularization(svd);  setDimensions(dims);  setUpTransform(svd);}  }
class C{  protected void doUpdate(InstructorEditForm frm,HttpServletRequest request) throws Exception {  DepartmentalInstructorDAO idao=new DepartmentalInstructorDAO();  org.hibernate.Session hibSession=idao.getSession();  Transaction tx=null;  try {    tx=hibSession.beginTransaction();    DepartmentalInstructor inst=null;    String instrId=frm.getInstructorId();    if (instrId != null && instrId.trim().length() > 0) {      inst=new DepartmentalInstructorDAO().get(new Long(instrId));    } else {      inst=new DepartmentalInstructor();    }    if (frm.getFname() != null && frm.getFname().trim().length() > 0) {      inst.setFirstName(frm.getFname().trim());    } else {      inst.setFirstName(null);    }    if (frm.getMname() != null && frm.getMname().trim().length() > 0) {      inst.setMiddleName(frm.getMname().trim());    } else {      inst.setMiddleName(null);    }    inst.setLastName(frm.getLname().trim());    if (frm.getTitle() != null && frm.getTitle().trim().length() > 0) {      inst.setAcademicTitle(frm.getTitle().trim());    } else {      inst.setAcademicTitle(null);    }    if (frm.getPuId() != null && frm.getPuId().trim().length() > 0 && !frm.getPuId().equalsIgnoreCase("null")) {      inst.setExternalUniqueId(frm.getPuId().trim());    }    if (frm.getCareerAcct() != null && frm.getCareerAcct().trim().length() > 0) {      inst.setCareerAcct(frm.getCareerAcct().trim());    }    inst.setEmail(frm.getEmail());    if (frm.getPosType() != null && frm.getPosType().trim().length() > 0) {      PositionType pt=PositionType.findById(new Long(frm.getPosType().trim()));      if (pt != null) {        inst.setPositionType(pt);      }    }    if (frm.getNote() != null && !frm.getNote().isEmpty()) {      if (frm.getNote().length() > 2048)       inst.setNote(frm.getNote().substring(0,2048)); else       inst.setNote(frm.getNote());    } else     inst.setNote(null);    Department d=null;    if (sessionContext.getAttribute(SessionAttribute.DepartmentId) != null) {      String deptId=(String)sessionContext.getAttribute(SessionAttribute.DepartmentId);      d=new DepartmentDAO().get(new Long(deptId));      inst.setDepartment(d);      d.getInstructors().add(inst);    } else     throw new Exception("Department Id could not be retrieved from session");    inst.setIgnoreToFar(new Boolean(frm.getIgnoreDist()));    hibSession.saveOrUpdate(inst);    ChangeLog.addChange(hibSession,sessionContext,inst,ChangeLog.Source.INSTRUCTOR_EDIT,(instrId == null || instrId.trim().length() <= 0 ? ChangeLog.Operation.CREATE : ChangeLog.Operation.UPDATE),null,inst.getDepartment());    tx.commit();  } catch (  Exception e) {    Debug.error(e);    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    throw e;  }}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  PrimerPack(ByteProvider byteProvider,long byteOffset) throws IOException {  this.header=new KLVPacket.Header(byteProvider,byteOffset);  if (!PrimerPack.isValidKey(Arrays.copyOf(this.header.getKey(),this.header.getKey().length))) {    throw new MXFException("Found invalid PrimerPack key");  }  this.localTagEntryBatch=new LocalTagEntryBatch(byteProvider);}  }
class C{  private void updateTenantVcenterCascadeTenancy(VcenterParam param,Vcenter vcenter){  if (vcenter == null) {    if (param.getCascadeTenancy() == null) {      param.setCascadeTenancy(Boolean.TRUE);    }  }  if (vcenter != null && param.getCascadeTenancy() == null) {    param.setCascadeTenancy(vcenter.getCascadeTenancy());  }}  }
class C{  @Override public synchronized int read() throws IOException {  byte[] localBuf=buf;  InputStream localIn=in;  if (localBuf == null || localIn == null) {    throw streamClosed();  }  if (pos >= count && fillbuf(localIn,localBuf) == -1) {    return -1;  }  if (localBuf != buf) {    localBuf=buf;    if (localBuf == null) {      throw streamClosed();    }  }  if (count - pos > 0) {    return localBuf[pos++] & 0xFF;  }  return -1;}  }
class C{  public static boolean isDefaultDivertExclusive(){  return DEFAULT_DIVERT_EXCLUSIVE;}  }
class C{  public static OuterJoinQualifier create(String propertyLeft,OuterJoinType type,String propertyRight){  return new OuterJoinQualifier(type,new PropertyValueExpression(propertyLeft),new PropertyValueExpression(propertyRight));}  }
class C{  public static void registerBundledRedstoneProvider(IBundledRedstoneProvider handler){  findCC();  if (computerCraft_registerBundledRedstoneProvider != null) {    try {      computerCraft_registerBundledRedstoneProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  private void checkLabelAttribute(List<Tree> trees){  boolean hasLabel=false;  for (  Tree tree : trees) {    for (    Node node : tree.getNodes()) {      if (node.getAttribute("label") != null) {        hasLabel=true;      }    }  }  if (hasLabel) {    String labelName=null;    do {      labelName=JOptionPane.showInputDialog("The node/branches of the tree are labelled\n" + "(i.e., with bootstrap values or posterior probabilities).\n\n" + "Please select a name for these values.","label");      if (labelName == null) {        labelName="label";      }      labelName=labelName.trim();      if (labelName.length() == 0) {        Toolkit.getDefaultToolkit().beep();      }    } while (labelName == null || labelName.length() == 0);    if (!labelName.equals("label")) {      for (      Tree tree : trees) {        for (        Node node : tree.getNodes()) {          Object value=node.getAttribute("label");          if (value != null) {            node.removeAttribute("label");            node.setAttribute(labelName,value);          }        }      }    }  }}  }
class C{  public static String toStringBinary(final byte[] b,int off,int len){  StringBuilder result=new StringBuilder();  try {    String first=new String(b,off,len,"ISO-8859-1");    for (int i=0; i < first.length(); ++i) {      int ch=first.charAt(i) & 0xFF;      if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| " `~!@#$%^&*()-_=+[]{}\\|;:'\",.<>/?".indexOf(ch) >= 0) {        result.append(first.charAt(i));      } else {        result.append(String.format("\\x%02X",ch));      }    }  } catch (  UnsupportedEncodingException e) {    LOG.error("ISO-8859-1 not supported?",e);  }  return result.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.734 -0500",hash_original_method="89B9A833AE2CE5B13E9F312F3F36ED4B",hash_generated_method="00E8F812EAB398F385D00C450BD1C0AB") public PatternSyntaxException(String description,String pattern,int index){  this.desc=description;  this.pattern=pattern;  this.index=index;}  }
class C{  public static byte[] copyOf(byte[] arr,int offset,int newLength,int dstOffset){  byte[] newArr=new byte[newLength];  int srcLen=arr.length - offset;  int dstLen=newLength - dstOffset;  System.arraycopy(arr,offset,newArr,dstOffset,Math.min(srcLen,dstLen));  return newArr;}  }
class C{  public boolean isCallHold(){  return mCallHold;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private void cleanupTranslations(){  if (!m_source.isObjectExists("AD_Table",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Column",m_source.getTables()))   return;  resetDBObjects(null);  m_objectType="table";  m_objectTypes="tables";  m_detailType="translation";  m_detailTypes="translations";  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupTranslations",m_direction);  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  Savepoint sp=m_target.setSavepoint("add translations");  ArrayList<String> tableNames=new ArrayList<String>();  String sqlCommand=s_dbEngine.sqlAD_getTranslatedTables(vendor,catalog,schema);  Statement stmt=m_target.setStatement();  ResultSet rs=m_target.executeQuery(stmt,sqlCommand);  while (m_target.getResultSetNext(rs)) {    tableNames.add(m_target.getResultSetString(rs,"TableName"));    m_totalUpd=new Integer(m_totalUpd.intValue() + 1);  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  HashMap<String,ArrayList<String>> missingTranslations=new HashMap<String,ArrayList<String>>();  sqlCommand=s_dbEngine.sqlAD_getTranslatedColumns(vendor,catalog,schema);  PreparedStatementWrapper pstmt=m_target.setPreparedStatement(sqlCommand);  for (Iterator<String> i=tableNames.iterator(); i.hasNext(); ) {    String tableName=i.next();    ArrayList<String> columnNames=new ArrayList<String>();    m_target.setPreparedStatementString(pstmt,1,tableName);    rs=m_target.executeQuery(pstmt);    while (m_target.getResultSetNext(rs)) {      columnNames.add(m_target.getResultSetString(rs,"ColumnName"));    }    m_target.releaseResultSet(rs);    missingTranslations.put(tableName,columnNames);  }  m_target.releasePreparedStatement(pstmt);  for (Iterator<String> i=tableNames.iterator(); i.hasNext(); ) {    String tableName=i.next();    ArrayList<String> columnNames=missingTranslations.get(tableName);    sqlCommand=s_dbEngine.sqlADAction_insertTranslation(vendor,catalog,schema,tableName,columnNames);    stmt=m_target.setStatement();    Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);    if (sqlResult != null) {      logAddDetail(sqlResult,null);      m_counterUpd=new Integer(m_counterUpd.intValue() + 1);    }    m_target.releaseStatement(stmt);  }  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  public SaveConfiguration(T element,boolean updatePassword){  this.element=element;  this.updatePassword=updatePassword;}  }
class C{  public ISO9797Alg3Mac(BlockCipher cipher,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  if (!(cipher instanceof DESEngine)) {    throw new IllegalArgumentException("cipher must be instance of DESEngine");  }  this.cipher=new CBCBlockCipher(cipher);  this.padding=padding;  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  private void loadAdminUsersId(String entidad) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tableInfo.setTableObject(usrTbl);    tableInfo.setClassName(UsersTable.class.getName());    qual=usrTbl.getLoadAminUsersQual(ISicresAdminUserDefsKeys.PRODUCT_USER);    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add(user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public static void sort(Object[] array){  ComparableTimSort.sort(array);}  }
class C{  public void exceptionThrown(ExceptionEvent event){  if (event.request() == request) {    try {      System.out.print("ExceptionEvent: ");      System.out.print("" + event.exception().referenceType().name());      Location loc=event.location();      System.out.print(" @ " + loc.method().name());      System.out.print(":" + loc.lineNumber());    } catch (    VMDisconnectedException exc) {      System.out.print("Oops - " + exc.toString());    }    System.out.println();    eventCount++;  } else {    System.out.print("alien exception: ");    try {      println(event.toString());    } catch (    VMDisconnectedException exc) {      println("Oops - " + exc.toString());    }  }}  }
class C{  public static void writeBytes(OutputStream os,byte[] buf) throws IOException {  if (buf.length < OP_PUSHDATA1) {    os.write(buf.length);    os.write(buf);  } else   if (buf.length < 256) {    os.write(OP_PUSHDATA1);    os.write(buf.length);    os.write(buf);  } else   if (buf.length < 65536) {    os.write(OP_PUSHDATA2);    os.write(0xFF & (buf.length));    os.write(0xFF & (buf.length >> 8));    os.write(buf);  } else {    throw new RuntimeException("Unimplemented");  }}  }
class C{  @Override public Collection<Account> findAll(){  Collection<Account> accounts=accountRepository.findAll();  return accounts;}  }
class C{  public static void enableSync(String accountName){}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    while (!retTokens && (currpos < maxPosition) && (delimiters.indexOf(str.charAt(currpos)) >= 0)) {      currpos++;    }    if (currpos >= maxPosition) {      break;    }    int start=currpos;    while ((currpos < maxPosition) && (delimiters.indexOf(str.charAt(currpos)) < 0)) {      currpos++;    }    if (retTokens && (start == currpos) && (delimiters.indexOf(str.charAt(currpos)) >= 0)) {      currpos++;    }    count++;  }  return count;}  }
class C{  private void actionAppend() throws PageException {  if (output == null)   throw new ApplicationException("attribute output is not defined for tag file");  checkFile(pageContext,securityManager,file,serverPassword,createPath,true,false,true);  try {    if (!file.exists())     file.createNewFile();    String content=Caster.toString(output);    if (fixnewline)     content=doFixNewLine(content);    if (addnewline)     content+=SystemUtil.getOSSpecificLineSeparator();    IOUtil.write(file,content,CharsetUtil.toCharset(charset),true);  } catch (  UnsupportedEncodingException e) {    throw new ApplicationException("Unsupported Charset Definition [" + charset + "]",e.getMessage());  }catch (  IOException e) {    throw new ApplicationException("can't write file",e.getMessage());  }  setACL(pageContext,file,acl);  setMode(file,mode);  setAttributes(file,attributes);}  }
class C{  @SuppressWarnings("unused") private void debugTime(String s,boolean collectGarbage){  if (false) {    if (collectGarbage) {      System.gc();    }    System.out.println(s + ": " + System.currentTimeMillis());  }}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public boolean hasRequestListeners(TransportAddress localAddr){synchronized (messageListeners) {    if (!messageListeners.isEmpty()) {      return true;    }  }synchronized (children) {    if (!children.isEmpty()) {      EventDispatcher child=children.get(localAddr);      if (child != null)       return !child.messageListeners.isEmpty();    }  }  return false;}  }
class C{  private RdapSearchResults makeSearchResults(ImmutableList<DomainResource> domains,boolean isTruncated,DateTime now){  OutputDataType outputDataType=(domains.size() > 1) ? OutputDataType.SUMMARY : OutputDataType.FULL;  ImmutableList.Builder<ImmutableMap<String,Object>> jsonBuilder=new ImmutableList.Builder<>();  for (  DomainResource domain : domains) {    jsonBuilder.add(RdapJsonFormatter.makeRdapJsonForDomain(domain,false,rdapLinkBase,rdapWhoisServer,now,outputDataType));  }  return RdapSearchResults.create(jsonBuilder.build(),isTruncated);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  protected LocalTile findTile(final double latRadians,final double lonRadians){  for (  LocalTile tile : this.tiles) {    if (tile.sector.containsRadians(latRadians,lonRadians))     return tile;  }  return null;}  }
class C{  int crossOverUp(int index,E x){  if (index == 0) {    queue[0]=x;    return 0;  }  int parentIndex=getParentIndex(index);  E parentElement=elementData(parentIndex);  if (parentIndex != 0) {    int grandparentIndex=getParentIndex(parentIndex);    int uncleIndex=getRightChildIndex(grandparentIndex);    if (uncleIndex != parentIndex && getLeftChildIndex(uncleIndex) >= size) {      E uncleElement=elementData(uncleIndex);      if (ordering.compare(uncleElement,parentElement) < 0) {        parentIndex=uncleIndex;        parentElement=uncleElement;      }    }  }  if (ordering.compare(parentElement,x) < 0) {    queue[index]=parentElement;    queue[parentIndex]=x;    return parentIndex;  }  queue[index]=x;  return index;}  }
class C{  public PvXMLHandler() throws SAXException {  rootPv.setKeyValue("root");}  }
class C{  @Override public final int read() throws IOException {  return Util.readSingleByte(this);}  }
class C{  public void addFileToRecent(File xmlFile){  ArrayList<File> xmlFiles=GUISaveState.getInstance().getRecentFiles();  if (!xmlFiles.contains(xmlFile)) {    GUISaveState.getInstance().addRecentFile(xmlFile);  }  this.recentMenuCache.addRecentFile(xmlFile);}  }
class C{  public GridConcurrentLinkedHashSet(int initCap){  super(new ConcurrentLinkedHashMap<E,E>(initCap));}  }
class C{  public boolean isSendingVideo(){  return mSendingVideo;}  }
class C{  public static String asString(String text){  int abc[]=computeBobcat(text);  return String.format("%04x%04x%04x",abc[0],abc[1],abc[2]);}  }
class C{  public Environment(Environment parent){  super();  this.parent=parent;  memory=new HashMap<String,Object>();}  }
class C{  public static IgniteKernal localIgnite() throws IllegalArgumentException {  String name=U.getCurrentIgniteName();  if (U.isCurrentIgniteNameSet(name))   return gridx(name); else   if (Thread.currentThread() instanceof IgniteThread)   return gridx(((IgniteThread)Thread.currentThread()).getGridName()); else   throw new IllegalArgumentException("Ignite grid name thread local must be set or" + " this method should be accessed under " + IgniteThread.class.getName());}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  protected void textLineAlignImpl(char buffer[],int start,int stop,float x,float y){  if (textAlign == CENTER) {    x-=textWidthImpl(buffer,start,stop) / 2f;  } else   if (textAlign == RIGHT) {    x-=textWidthImpl(buffer,start,stop);  }  textLineImpl(buffer,start,stop,x,y);}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  static void e(String msg){  if (debug) {    android.util.Log.e(TAG,msg);  }}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  public static String extractTaskID(String path){  if (path.contains(HADOOP_ATTEMPT)) {    String prf=path.substring(path.indexOf(HADOOP_ATTEMPT));    if (prf.contains("/")) {      return TaskAttemptID.forName(prf.substring(0,prf.indexOf("/"))).toString();    }    return TaskAttemptID.forName(prf).toString();  }  return null;}  }
class C{  public SortedTupleIterator(Iterator iter,Comparator c){  this(iter,128,c);}  }
class C{  private static void mapIgfsBlock(URI file,long start,long len,IgfsBlockLocation... locations){  assert locations != null && locations.length > 0;  IgfsPath path=new IgfsPath(file);  Block block=new Block(path,start,len);  Collection<IgfsBlockLocation> locationsList=new ArrayList<>();  Collections.addAll(locationsList,locations);  BLOCK_MAP.put(block,locationsList);}  }
class C{  @Override public boolean previous() throws SQLException {  try {    debugCodeCall("previous");    checkClosed();    return relative(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void dataRefreshAll(boolean fireEvent,boolean retainedCurrentRow){  log.fine("#" + m_vo.TabNo);  int keyNo=m_mTable.getKeyID(m_currentRow);  m_mTable.dataRefreshAll(fireEvent,retainedCurrentRow ? m_currentRow : -1);  if (keyNo != -1) {    if (keyNo != m_mTable.getKeyID(m_currentRow)) {      int size=getRowCount();      for (int i=0; i < size; i++) {        if (keyNo == m_mTable.getKeyID(i)) {          m_currentRow=i;          break;        }      }    }  }  setCurrentRow(m_currentRow,fireEvent);  if (fireEvent)   fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_REFRESH_ALL));}  }
class C{  public static double rRMSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredRelativeError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rRMSE fitness calculation. Adjusting to avoid division by zero.");    }    error=(result - expectedResult) / expectedResult;    sumOfSquaredRelativeError+=error * error;  }  return Math.sqrt(sumOfSquaredRelativeError / dvValues.length);}  }
class C{  @Override public void run(){  if (wizardOfOzMode) {    system.attachModule(WizardLearner.class);    for (    final DialogueState turn : turns) {      addTurn(turn);    }  } else {    system.detachModule(ForwardPlanner.class);    for (    final DialogueState turn : turns) {      addTurn(turn);      system.getState().removeNodes(system.getState().getActionNodeIds());      system.getState().removeNodes(system.getState().getUtilityNodeIds());    }    system.attachModule(ForwardPlanner.class);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Entity entity;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entity=(Entity)entities.getNamedItemNS(nullNS,"ent1");  assertNull("entityNull",entity);}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof BigInteger|| object instanceof BigDecimal) {      return object;    }    if (object instanceof Collection) {      Collection<?> coll=(Collection<?>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      Map<?,?> map=(Map<?,?>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public void groupKeyIterator(Session session,FDBStoreData storeData,FDBScanTransactionOptions transactionOptions){  groupIterator(session,storeData,GroupIteratorBoundary.KEY,GroupIteratorBoundary.NEXT_KEY,1,transactionOptions);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.VARIABLE_REFERENCE__VARIABLE_NAME:    return VARIABLE_NAME_EDEFAULT == null ? variableName != null : !VARIABLE_NAME_EDEFAULT.equals(variableName);}return super.eIsSet(featureID);}  }
class C{  protected void onClusterItemRendered(T clusterItem,Marker marker){}  }
class C{  public static String collectionToCommaDelimitedString(Iterable<?> coll){  return collectionToDelimitedString(coll,",");}  }
class C{  public void addMapping(int id,Object object){  idToObject.put(id,object);  objectToID.put(object,id);  highestID=highestID < id ? id : highestID;}  }
class C{  @Override public Query createSpatialQuery(QParser parser,SpatialOptions options){  String[] pointStrs=parseCommaSeparatedList(options.pointStr,dimension);  double[] point=new double[dimension];  try {    for (int i=0; i < pointStrs.length; i++) {      point[i]=Double.parseDouble(pointStrs[i]);    }  } catch (  NumberFormatException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }  IndexSchema schema=parser.getReq().getSchema();  if (dimension == 1) {    String lower=String.valueOf(point[0] - options.distance);    String upper=String.valueOf(point[0] + options.distance);    SchemaField subSF=subField(options.field,0,schema);    return subSF.getType().getRangeQuery(parser,subSF,lower,upper,true,true);  } else {    BooleanQuery.Builder tmp=new BooleanQuery.Builder();    double[] ur=vectorBoxCorner(point,null,options.distance,true);    double[] ll=vectorBoxCorner(point,null,options.distance,false);    for (int i=0; i < ur.length; i++) {      SchemaField subSF=subField(options.field,i,schema);      Query range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[i]),String.valueOf(ur[i]),true,true);      tmp.add(range,BooleanClause.Occur.MUST);    }    return tmp.build();  }}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public ObjectStreamField(String name,Class<?> cl){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=new WeakReference<Class<?>>(cl);}  }
class C{  private void updateXPoints(XYSeries series){  ParamChecks.nullNotPermitted(series,"series");  HashSet seriesXPoints=new HashSet();  boolean savedState=this.propagateEvents;  this.propagateEvents=false;  for (int itemNo=0; itemNo < series.getItemCount(); itemNo++) {    Number xValue=series.getX(itemNo);    seriesXPoints.add(xValue);    if (!this.xPoints.contains(xValue)) {      this.xPoints.add(xValue);      int seriesCount=this.data.size();      for (int seriesNo=0; seriesNo < seriesCount; seriesNo++) {        XYSeries dataSeries=(XYSeries)this.data.get(seriesNo);        if (!dataSeries.equals(series)) {          dataSeries.add(xValue,null);        }      }    }  }  Iterator iterator=this.xPoints.iterator();  while (iterator.hasNext()) {    Number xPoint=(Number)iterator.next();    if (!seriesXPoints.contains(xPoint)) {      series.add(xPoint,null);    }  }  this.propagateEvents=savedState;}  }
class C{  public void testBug57662() throws Exception {  createTable("testBug57662","(x VARCHAR(10) NOT NULL DEFAULT '')");  Connection conn_is=null;  try {    Properties props=new Properties();    props.setProperty("profileSQL","true");    props.setProperty("useNanosForElapsedTime","true");    props.setProperty("logger","testsuite.simple.TestBug57662Logger");    conn_is=getConnectionWithProps(props);    this.rs=conn_is.getMetaData().getColumns(null,null,"testBug57662","%");    assertFalse(((testsuite.simple.TestBug57662Logger)((ConnectionImpl)conn_is).getLog()).hasNegativeDurations);  }  finally {    if (conn_is != null) {      conn_is.close();    }  }}  }
class C{  IMQEvaluator(IndexCreationHelper helper){  this.cache=helper.getCache();  this.fromIterators=helper.getIterators();  this.indexedExpr=helper.getCompiledIndexedExpression();  this.canonicalIterNames=((FunctionalIndexCreationHelper)helper).canonicalizedIteratorNames;  this.rgn=helper.getRegion();  isFirstItrOnEntry=((FunctionalIndexCreationHelper)helper).isFirstIteratorRegionEntry;  additionalProj=((FunctionalIndexCreationHelper)helper).additionalProj;  Object params1[]={new QRegion(rgn,false)};  initContext=new ExecutionContext(params1,cache);  if (isFirstItrOnEntry) {    this.indexInitIterators=this.fromIterators;  } else {    this.indexInitIterators=((FunctionalIndexCreationHelper)helper).indexInitIterators;    modifiedIndexExpr=((FunctionalIndexCreationHelper)helper).modifiedIndexExpr;    addnlProjType=((FunctionalIndexCreationHelper)helper).addnlProjType;  }  this.iteratorSize=this.indexInitIterators.size();  if (this.additionalProj instanceof CompiledPath) {    String tailId=((CompiledPath)this.additionalProj).getTailID();    if (tailId.equals("key")) {      indexOnRegionKeys=true;    } else     if (!isFirstItrOnEntry) {      indexOnValues=true;    }  }}  }
class C{  public CTracesPanel(final IFilteredTable<TraceList> table){  super(table,new CTracesFilterCreator(),new CTraceFilterHelp());  addListener(m_internalTracesTableMouseListener);}  }
class C{  public Register createRegister(){  return new SimpleRegister();}  }
class C{  private void doExecute(Tuple input){  if (!isTickTuple(input)) {    if (!isInitialized()) {      init(input);    }    update(input);  } else {    if (isInitialized()) {      flush(input);    }  }}  }
class C{  private void init() throws ObjectNotFoundException {  marketplace=loadMarketplace(marketplaceId);  doObjectQuery=listCriteria.getLimit() != 0;  doCountQuery=!doObjectQuery;  sortingRequired=isSortingRequired(listCriteria);  user=dm.getCurrentUserIfPresent();  if (user != null) {    currentUsersOrg=user.getOrganization();    if (locale == null || locale.trim().length() == 0) {      locale=user.getLocale();    }  }  initParameterLocalesForProjection();  initParameterInvisibleSet();}  }
class C{  public String createImporterMetadataDirIfItDoesnTExist(){  if (!isGeonamesDownloadDirectoryAccessible()) {    if (!new File(getGeonamesDir()).mkdir()) {      throw new RuntimeException("the geonameDirectory doesn't exists and we can not create it ");    }  }  String dirpath=getGeonamesDir() + IMPORTER_METADATA_RELATIVE_PATH + File.separator;  File directory=new File(dirpath);  if (!directory.exists()) {    if (!directory.mkdir()) {      throw new RuntimeException("Can not create ImporterMetadataDirectory");    }  }  return dirpath;}  }
class C{  public static IndexType createPrimaryKey(boolean hash){  IndexType type=new IndexType();  type.primaryKey=true;  type.hash=hash;  type.unique=true;  return type;}  }
class C{  public void warning(String mesg){  log(Level.WARNING,mesg,null);}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean traverseLevelOrder(final Tree tree,final NodeRef node,final int level,Map<Integer,List<DataLikelihoodDelegate.NodeOperation>> operationMap){  boolean update=false;  int nodeNum=node.getNumber();  if (tree.getParent(node) != null && updateNode[nodeNum]) {    addBranchUpdateOperation(tree,node);    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    final boolean update1=traverseLevelOrder(tree,child1,level + 1,operationMap);    NodeRef child2=tree.getChild(node,1);    final boolean update2=traverseLevelOrder(tree,child2,level + 1,operationMap);    if (update1 || update2) {      List<DataLikelihoodDelegate.NodeOperation> ops=operationMap.get(level);      if (ops == null) {        ops=new ArrayList<DataLikelihoodDelegate.NodeOperation>();        operationMap.put(level,ops);      }      ops.add(new DataLikelihoodDelegate.NodeOperation(nodeNum,child1.getNumber(),child2.getNumber()));      update=true;    }  }  return update;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  private void outOfLives(EntityPlayer playerEntity){  QuestingData data=QuestingData.getQuestingData(playerEntity);  Team team=data.getTeam();  if (!team.isSingle() && !teams.isEmpty()) {    team.removePlayer(QuestingData.getUserUUID(playerEntity));    if (team.getPlayerCount() == 0) {      team.deleteTeam();    } else {      team.refreshTeamData(TeamUpdateSize.ALL);    }  }  playerEntity.inventory.clear();  MinecraftServer mcServer=playerEntity.getServer();  if (mcServer.isSinglePlayer() && playerEntity.getName().equals(mcServer.getServerOwner())) {    ((EntityPlayerMP)playerEntity).connection.kickPlayerFromServer(Translator.translate("hqm.message.gameOver"));    mcServer.getActiveAnvilConverter().flushCache();    mcServer.getActiveAnvilConverter().deleteWorldDirectory(mcServer.worldServers[0].getSaveHandler().getWorldDirectory().getName());    mcServer.initiateShutdown();  } else {    String setBanReason="Out of lives in Hardcore Questing mode";    String setBannedBy="HQM";    UserListBansEntry userlistbansentry=new UserListBansEntry(playerEntity.getGameProfile(),(Date)null,setBannedBy,(Date)null,setBanReason);    mcServer.getPlayerList().getBannedPlayers().addEntry(userlistbansentry);    ((EntityPlayerMP)playerEntity).connection.kickPlayerFromServer(Translator.translate("hqm.message.gameOver"));    SoundHandler.playToAll(Sounds.DEATH);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String role=getString(stack);  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getPeopleCharacterString(Show.getRoleForString(role));  if (Sage.rez("Artist").equals(role) || Sage.rez("Album_Artist").equals(role)) {    Album al=getAlbumObj(obj);    if (al != null)     return al.getArtist();  }  return "";}  }
class C{  void clear(){  measurementRepList=new ArrayList<MeasurementRep>();  repaint(getBounds());}  }
class C{  public DExtendedKeyUsage(JDialog parent){  super(parent);  setTitle(res.getString("DExtendedKeyUsage.Title"));  initComponents();}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  boolean requiresEviction(){  assert lock.isHeldByCurrentThread();  final int size=mostRecentlyUsedQueries.size();  if (size == 0) {    return false;  } else {    return size > maxSize || ramBytesUsed() > maxRamBytesUsed;  }}  }
class C{  public void close(){  ModbusSlaveFactory.close(this);}  }
class C{  public boolean isBefore(YearMonth other){  return compareTo(other) < 0;}  }
class C{  static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  public static PatternOrExpr or(){  return new PatternOrExpr();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Element newElement;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("staff",true);  addressElementList=doc.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(1);  newElement=doc.createElement("newElement");  appendedChild=testAddress.appendChild(newElement);  newAttribute=doc.createAttribute("newAttribute");  setAttr1=newElement.setAttributeNode(newAttribute);{    boolean success=false;    try {      setAttr2=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  void jbInit() throws Exception {  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  titledBorder=new TitledBorder(BorderFactory.createEtchedBorder(Color.white,new Color(148,145,140)),Msg.getMsg(m_ctx,"CurrentSettings"));  lAttribute.setText(Msg.translate(m_ctx,"Attribute"));  lValue.setText(Msg.translate(m_ctx,"Value"));  lSetFor.setText(Msg.getMsg(m_ctx,"ValuePreferenceSetFor"));  cbClient.setText(Msg.translate(m_ctx,"AD_Client_ID"));  cbOrg.setText(Msg.translate(m_ctx,"AD_Org_ID"));  cbUser.setText(Msg.translate(m_ctx,"AD_User_ID"));  cbUser.setSelected(true);  cbWindow.setText(Msg.translate(m_ctx,"AD_Window_ID"));  cbWindow.setSelected(true);  setPanel.setLayout(setLayout);  fAttribute.setEditable(false);  fValue.setEditable(false);  this.getContentPane().add(setPanel,BorderLayout.NORTH);  setPanel.add(lAttribute,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(fAttribute,new GridBagConstraints(1,0,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  setPanel.add(lValue,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(fValue,new GridBagConstraints(1,1,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  setPanel.add(lSetFor,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(cbClient,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(cbOrg,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(cbUser,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(cbWindow,new GridBagConstraints(4,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  setPanel.add(lAttributeValue,new GridBagConstraints(5,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  setPanel.add(lValueValue,new GridBagConstraints(5,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  setPanel.add(lExplanation,new GridBagConstraints(1,3,4,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  currentPanel.setBorder(titledBorder);  currentPanel.setLayout(currentLayout);  currentPanel.add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(table,null);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);}  }
class C{  @Override public void removeChangeListener(DatasetChangeListener listener){}  }
class C{  public static BigInteger toBigInteger(final byte[] bytes){  BigInteger b=BigInteger.ZERO;  for (int i=0; i < bytes.length; i++) {    b=b.add(BigInteger.ONE.multiply(BigInteger.valueOf(bytes[i] & 0xff)).shiftLeft(i * 8));  }  return b;}  }
class C{  private static boolean isPrintableAscii(char ch){  return ch >= ' ' && ch <= '~';}  }
class C{  public boolean returnToOriginalOutfit(final Player player){  if (wearsOutfitFromHere(player)) {    return player.returnToOriginalOutfit();  }  return false;}  }
class C{  public Map<String,Serializable> toMap(){  Map<String,Serializable> map=new HashMap<String,Serializable>(5);  map.put(MAP_TYPE,new Integer(type));  map.put(MAP_QUERY,query);  map.put(MAP_XML,xml);  map.put(MAP_MEDIA,media);  map.put(MAP_TITLE,title);  return map;}  }
class C{  public LogFileTailer(File file){  this.logfile=file;}  }
class C{  @Override public boolean isListenerForSource(Object source){  return (source instanceof UIViewRoot);}  }
class C{  public void copyFrom(OutputProperties opsrc) throws TransformerException {  copyFrom(opsrc.getProperties());}  }
class C{  protected final void flushBuffer() throws IOException {  if (bufferSize == 0)   return;  flushed=true;  ensureOpen();  if (buf.pos == buf.offset)   return;  initOut();  out.write(buf.buf,buf.offset,buf.pos - buf.offset);  buf.pos=buf.offset;}  }
class C{  @Override public synchronized void start(){  if (running) {    return;  }  LOGGER.info("Starting server");  if (endpoints.isEmpty()) {    int port=config.getInt(NetworkConfig.Keys.COAP_PORT);    LOGGER.log(Level.INFO,"No endpoints have been defined for server, setting up server endpoint on default port {0}",port);    addEndpoint(new CoapEndpoint(port,this.config));  }  int started=0;  for (  Endpoint ep : endpoints) {    try {      ep.start();      ++started;    } catch (    IOException e) {      LOGGER.log(Level.SEVERE,"Cannot start server endpoint [" + ep.getAddress() + "]",e);    }  }  if (started == 0) {    throw new IllegalStateException("None of the server endpoints could be started");  } else {    running=true;  }}  }
class C{  public double kurtosis(){  double mu=mean();  double devsum=0;  double wsum=0;  int size=values.size();  for (int i=0; i < size; i++) {    double dev=values.get(i) - mu;    devsum+=Math.pow(dev,4.0d) * weights.get(i);    wsum+=weights.get(i);  }  double mu4=devsum / wsum;  double s4=Math.pow(variance(),4.0 / 2.0);  return mu4 / s4;}  }
class C{  public int oldToNew(int oldReg){  if (oldReg >= oldToNew.size()) {    return -1;  }  return oldToNew.get(oldReg);}  }
class C{  public void moveViewToY(float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,0f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public Iterator<IInterval> iterator(){  return new InorderTraversal(root);}  }
class C{  public void addFieldCamera(FieldCamera fieldCamera){  availableLayers.add(new LayerInfo(fieldCamera.getName(),"footprint",-1));  availableLayers.add(new LayerInfo(fieldCamera.getName(),"viewshed",-1));}  }
class C{  protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(0,s.height - ADJUST_FACTOR);}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,int length) throws SQLException {  updateBinaryStream(columnIndex,x,(long)length);}  }
class C{  protected <T extends ManagedEntity>T searchManagedEntity(ManagedEntity parent,Class<T> type,String name) throws VMWareException {  String typeName=type.getSimpleName();  T value=(T)searchManagedEntity(parent,typeName,name);  return value;}  }
class C{  public static void addParamJavadoc(String parameterName,MethodDeclaration methodDeclaration,ASTRewrite astRewrite,IJavaProject javaProject,TextEditGroup groupDescription){  if (!shouldAddParamJavadoc(methodDeclaration))   return;  ListRewrite tagsRewrite=astRewrite.getListRewrite(methodDeclaration.getJavadoc(),Javadoc.TAGS_PROPERTY);  HashSet<String> leadingNames=new HashSet<String>();  for (Iterator<SingleVariableDeclaration> iter=methodDeclaration.parameters().iterator(); iter.hasNext(); ) {    SingleVariableDeclaration curr=iter.next();    leadingNames.add(curr.getName().getIdentifier());  }  TagElement parameterTag=createParamTag(parameterName,astRewrite.getAST(),javaProject);  JavadocTagsSubProcessor.insertTag(tagsRewrite,parameterTag,leadingNames,groupDescription);}  }
class C{  public void asynchForceFlush(){  try {    flushFlusher(true);  } catch (  InterruptedException ignore) {  }}  }
class C{  private JComponent createLeftPanel(){  minimap=new MapPanelController(client);  positionChangeListener.add(minimap);  final StatsPanelController stats=StatsPanelController.get();  final BuddyPanelController buddies=BuddyPanelController.get();  ScrolledViewport buddyScroll=new ScrolledViewport((JComponent)buddies.getComponent());  buddyScroll.setScrollingSpeed(SCROLLING_SPEED);  final JComponent buddyPane=buddyScroll.getComponent();  buddyPane.setBorder(null);  final JComponent leftColumn=SBoxLayout.createContainer(SBoxLayout.VERTICAL);  leftColumn.add(minimap.getComponent(),SLayout.EXPAND_X);  leftColumn.add(stats.getComponent(),SLayout.EXPAND_X);  JPanel tabBackground=new JPanel();  tabBackground.setBorder(null);  tabBackground.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));  JTabbedPane tabs=new JTabbedPane(JTabbedPane.BOTTOM);  TabbedPaneUI ui=tabs.getUI();  if (ui instanceof StyledTabbedPaneUI) {    ((StyledTabbedPaneUI)ui).setTabLabelMargins(1);  }  tabs.setFocusable(false);  tabs.add("Friends",buddyPane);  tabs.add("Group",GroupPanelController.get().getComponent());  tabBackground.add(tabs,SBoxLayout.constraint(SLayout.EXPAND_X,SLayout.EXPAND_Y));  leftColumn.add(tabBackground,SBoxLayout.constraint(SLayout.EXPAND_X,SLayout.EXPAND_Y));  return leftColumn;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.SHIFT_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.SHIFT_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected boolean afterDelete(boolean success){  updateHeader();  return success;}  }
class C{  public boolean exists(Object key){  return pageSources.containsKey(key);}  }
class C{  public static double remainder(final double dividend,final double divisor){  if (Double.isInfinite(divisor)) {    if (Double.isInfinite(dividend)) {      return Double.NaN;    } else {      return dividend;    }  }  final double value=dividend % divisor;  if (Math.abs(value + value) > Math.abs(divisor)) {    return value + (value > 0.0 ? -Math.abs(divisor) : Math.abs(divisor));  } else {    return value;  }}  }
class C{  public NonBlockingLockManager(final int maxConcurrency,final boolean predeclareLocks,final Executor delegate){  this(maxConcurrency,predeclareLocks,true,delegate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.176 -0500",hash_original_method="D5BF387644292151C2CC3D8E2C24ADB4",hash_generated_method="A14DCC13E139FA9706E1C8C0B000CE6C") public synchronized void onPause(Activity activity){  NfcActivityState state=mNfcState.get(activity);  if (DBG)   Log.d(TAG,"onPause() for " + activity + " "+ state);  if (state != null) {    state.resumed=false;    updateNfcService(state);  }}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  public static String xmlContentEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '&':      sb.append("&amp;");    break;case '<':  sb.append("&lt;");break;case '\000':case '\001':case '\002':case '\003':case '\004':case '\005':case '\006':case '\007':case '\010':case '\013':case '\014':case '\016':case '\017':case '\020':case '\021':case '\022':case '\023':case '\024':case '\025':case '\026':case '\027':case '\030':case '\031':case '\032':case '\033':case '\034':case '\035':case '\036':case '\037':break;default :sb.append(c);}}return sb.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodename.class,args);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_DATE_TIME_TYPE,this);}  }
class C{  @GET @Produces({"text/html;qs=0.9","application/xhtml+xml"}) @Path("multiple_produces1") public String multipleProduces1(){  return "hello.jsp";}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  if (Consts.DEBUG) {    Log.i(TAG,"signature: " + signature);  }  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  private void errorsToJson(Errors errors,StringBuilder result){  result.append("\"errors\":[");  if (errors != null && errors.hasErrors()) {    boolean first=true;    for (    final String text : errors.getTexts()) {      if (!first) {        result.append(",");      }      first=false;      result.append(JsonBuilder.quote(text));    }  }  result.append("]");}  }
class C{  private void checkMethodCompliance(){  for (  JDiffMethod method : jDiffMethods) {    try {      if (JDiffType.INTERFACE.equals(mClassType)) {        method.mModifier|=Modifier.ABSTRACT;      }      Method m=findMatchingMethod(method);      if (m == null) {        mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISSING_METHOD,method.toReadableString(mAbsoluteClassName),"No method with correct signature found:" + method.toSignatureString());      } else {        if (m.isVarArgs()) {          method.mModifier|=METHOD_MODIFIER_VAR_ARGS;        }        if (m.isBridge()) {          method.mModifier|=METHOD_MODIFIER_BRIDGE;        }        if (m.isSynthetic()) {          method.mModifier|=METHOD_MODIFIER_SYNTHETIC;        }        if (mClass.isEnum() && method.mName.equals("values")) {          return;        }        if (!areMethodModifiedCompatibile(method,m)) {          mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISMATCH_METHOD,method.toReadableString(mAbsoluteClassName),"Non-compatible method found when looking for " + method.toSignatureString());        }      }    } catch (    Exception e) {      SignatureTestLog.e("Got exception when checking method compliance",e);      mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.CAUGHT_EXCEPTION,method.toReadableString(mAbsoluteClassName),"Exception!");    }  }}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  public boolean checkAESKey(KeyParameter aesKey){  lock.lock();  try {    if (!getKeys().iterator().hasNext())     return false;    ECKey firstEncryptedECKey=null;    Iterator<ECKey> iterator=getKeys().iterator();    while (iterator.hasNext() && firstEncryptedECKey == null) {      ECKey loopECKey=iterator.next();      if (loopECKey.isEncrypted()) {        firstEncryptedECKey=loopECKey;      }    }    if (firstEncryptedECKey == null)     return false;    String originalAddress=firstEncryptedECKey.toAddress(getNetworkParameters()).toString();    if (firstEncryptedECKey.isEncrypted() && firstEncryptedECKey.getEncryptedPrivateKey() != null) {      try {        ECKey rebornKey=firstEncryptedECKey.decrypt(keyCrypter,aesKey);        String rebornAddress=rebornKey.toAddress(getNetworkParameters()).toString();        return originalAddress.equals(rebornAddress);      } catch (      KeyCrypterException ede) {        return false;      }    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  space=calculateRangeAxisSpace(g2,plotArea,space);  Rectangle2D revPlotArea=space.shrink(plotArea,null);  space=calculateDomainAxisSpace(g2,revPlotArea,space);  return space;}  }
class C{  public static void main(String[] args){  SymbolicRegressionGUI.runDemo(new SymbolicRegression(new QuinticExample(),-1.0,1.0,100));}  }
class C{  public CompressedByteArray(long size,int range,int pack,int bits,boolean grow){  assert 0 <= size;  assert 1 < range && range <= 128;  assert 1 <= pack;  assert 1 <= bits && bits <= 12;  assert Math.pow(range,pack) <= Math.pow(2,bits);  mRange=range;  mPerBitfield=pack;  mBits=bits;  mMask=(int)Math.pow(2,mBits) - 1;  mNumBitfields=64 / mBits;  mPerLong=mPerBitfield * mNumBitfields;  mGrow=grow;  if (grow) {    mSize=0;    mData=LongCreate.createExtensibleIndex();  } else {    mSize=size;    mData=LongCreate.createIndex(size / mPerLong + 1);  }  mValue=new byte[mPerBitfield][];  mRangePowers=new int[mPerBitfield];  for (int withinBitfield=0; withinBitfield < mPerBitfield; withinBitfield++) {    mRangePowers[withinBitfield]=(int)Math.pow(mRange,withinBitfield);    mValue[withinBitfield]=new byte[mMask + 1];    final int divisor=(int)Math.pow(mRange,withinBitfield);    for (int i=0; i <= mMask; i++) {      mValue[withinBitfield][i]=(byte)(i / divisor % mRange);    }  }}  }
class C{  public void testCertStore08() throws InvalidAlgorithmParameterException, NoSuchProviderException {  if (!initParams()) {    return;  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams,dName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }  try {    CertStore.getInstance(null,dParams,dName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }}  }
class C{  ManagedIndexSchema shallowCopy(boolean includeFieldDataStructures){  ManagedIndexSchema newSchema=null;  try {    newSchema=new ManagedIndexSchema(solrConfig,loader,isMutable,managedSchemaResourceName,schemaZkVersion,getSchemaUpdateLock());  } catch (  KeeperException e) {    final String msg="Error instantiating ManagedIndexSchema";    log.error(msg,e);    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg,e);  }catch (  InterruptedException e) {    Thread.currentThread().interrupt();    log.warn("",e);  }  assert newSchema != null;  newSchema.name=name;  newSchema.version=version;  newSchema.defaultSearchFieldName=defaultSearchFieldName;  newSchema.queryParserDefaultOperator=queryParserDefaultOperator;  newSchema.isExplicitQueryParserDefaultOperator=isExplicitQueryParserDefaultOperator;  newSchema.similarity=similarity;  newSchema.similarityFactory=similarityFactory;  newSchema.isExplicitSimilarity=isExplicitSimilarity;  newSchema.uniqueKeyField=uniqueKeyField;  newSchema.uniqueKeyFieldName=uniqueKeyFieldName;  newSchema.uniqueKeyFieldType=uniqueKeyFieldType;  newSchema.resourceName=managedSchemaResourceName;  if (includeFieldDataStructures) {    newSchema.fields.putAll(fields);    newSchema.fieldsWithDefaultValue.addAll(fieldsWithDefaultValue);    newSchema.requiredFields.addAll(requiredFields);  }  newSchema.fieldTypes=fieldTypes;  newSchema.dynamicFields=dynamicFields;  newSchema.dynamicCopyFields=dynamicCopyFields;  newSchema.copyFieldsMap=copyFieldsMap;  newSchema.copyFieldTargetCounts=copyFieldTargetCounts;  newSchema.schemaAware=schemaAware;  return newSchema;}  }
class C{  protected void associate(Object element,Control item){  Object data=item.getData();  if (data != element) {    if (data != null) {      disassociate(item);    }    item.setData(element);    mapElement(element,item);  } else {    mapElement(element,item);  }}  }
class C{  DateValue head(){  return head;}  }
class C{  public XtextParametrizedRunner(Class<?> klass) throws Throwable {  super(klass,NO_RUNNERS);  FrameworkMethod parametersMethod=getParametersMethod();  if (parametersMethod != null) {    Parameters parameters=parametersMethod.getAnnotation(Parameters.class);    createRunnersForParameters(allParameters(),parameters.name());  } else {    FrameworkMethod parametersProviderMethod=getParametersProviderMethod();    ParametersProvider parameters=parametersProviderMethod.getAnnotation(ParametersProvider.class);    createRunnersForParameters(allParameters(),parameters.name());  }}  }
class C{  public static void out(final String _debug_message){  out(_debug_message,null);}  }
class C{  long entry(short order,long qAddr){  return lrus[order].entry(qAddr);}  }
class C{  private boolean canUpdateAliases(){  boolean canUpdateAliases=false;  PowerLevels powerLevels=mRoom.getLiveState().getPowerLevels();  if (null != powerLevels) {    int powerLevel=powerLevels.getUserPowerLevel(mSession.getMyUserId());    canUpdateAliases=powerLevel >= powerLevels.minimumPowerLevelForSendingEventAsStateEvent(Event.EVENT_TYPE_STATE_ROOM_ALIASES);  }  return canUpdateAliases;}  }
class C{  public static <T>T as(Class<T> asClass,Object obj){  return asClass.isInstance(obj) ? asClass.cast(obj) : null;}  }
class C{  public void enableCache(int size){  if (size > 0)   this.mObjectCache=new LruCache<>(size);}  }
class C{  public final JIPTerm nextSolution() throws JIPQueryClosedException {  boolean bSolution;  try {    if (m_bNoMore) {      throw JIPRuntimeException.createRuntimeException(49,m_query.toString());    } else     if (!m_bOpen) {      m_bOpen=true;      bSolution=m_wam.query(m_query);    } else {      bSolution=m_wam.nextSolution();    }  } catch (  JIPAbortException ex) {    if (m_bSoftAbort)     return null;    throw ex;  }catch (  JIPRuntimeException ex) {    throw ex;  }  try {    if (bSolution) {      PrologObject solution=m_solution.copy(true);      solution.unify(m_query,new Hashtable<Variable,Variable>(10));      return JIPTerm.getJIPTerm(solution);    } else {      m_bNoMore=true;      return null;    }  } catch (  Throwable er) {    throw new JIPJVMException(er);  }}  }
class C{  public String globalInfo(){  return "Class for performing additive logistic regression. \n" + "This class performs classification using a regression scheme as the " + "base learner, and can handle multi-class problems.  For more "+ "information, see\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Can do efficient internal cross-validation to determine "+ "appropriate number of iterations.";}  }
class C{  void connectCamera(Tango tango,int cameraId){  this.mTango=tango;  this.mCameraId=cameraId;  this.mConnectedTextureId=connectTangoTexture();}  }
class C{  public void removeResponseHeaders(){  log.debug("removeResponseHeaders, response " + response);  if (getSessionId() != null && response != null) {    String cookieName=Shared.getTenantSessionCookieName(this.getIdmAccessor().getTenant());    removeSessionCookie(cookieName,response);  }}  }
class C{  public Vertex evaluateExpression(String code,Vertex speaker,Vertex target,boolean debug,Network network){  Vertex expression=parseExpressionForEvaluation(code,speaker,target,debug,network);  Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();  return SelfInterpreter.getInterpreter().evaluateExpression(expression,variables,network,System.currentTimeMillis(),Language.MAX_STATE_PROCESS,0);}  }
class C{  protected void process(final DirtyRegion dirtyRegion){  Region region=dirtyRegion;  if (region == null) {    region=new RegionImpl(0,getDocument().getContents().length());  }  final List<TypedRegion> regions=computePartitioning(region.getOffset(),region.getLength());  for (  final TypedRegion r : regions) {    final ReconcilingStrategy strategy=getReconcilingStrategy(r.getType());    if (strategy == null) {      continue;    }    if (dirtyRegion != null) {      strategy.reconcile(dirtyRegion,r);    } else {      strategy.reconcile(r);    }  }}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public void addEntity(final OdorWorldEntity entity){  entity.setId(entityIDGenerator.getId());  entityList.add(entity);  fireEntityAdded(entity);  recomputeMaxStimulusLength();}  }
class C{  public JObjectId(String title){  this.title=title;  initComponents();}  }
class C{  public PlanMutateEndFirstActivity(final Map<Id,Double> originalTimes,final double mutationRange,final Random random){  this.originalTimes=originalTimes;  this.mutationRange=mutationRange;  this.random=random;}  }
class C{  public static synchronized void addRandomGenerator(final RandomGenerator generator){  getRandomGeneratorService().registerRandomGenerator(generator);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TANNOTATION_STRING_ARGUMENT__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  @SuppressWarnings({"squid:S2095"}) public static void main(final String[] args){  SpringApplication.run(DeviceSimulator.class,args);}  }
class C{  public static long lowestOnBitForLevel(int level){  return 1L << (2 * (MAX_LEVEL - level));}  }
class C{  public static double RSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfSquaredAbsoluteError=dv.getDependentVariableSumOfSquaredAbsoluteError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    error=result - expectedResult;    sumOfSquaredAbsoluteError+=error * error;  }  if (dvSumOfSquaredAbsoluteError == 0.0) {    dvSumOfSquaredAbsoluteError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of squared error for dependent variable is 0 in RSE fitness calculation. Adjusting to avoid division by zero.");  }  return (sumOfSquaredAbsoluteError / dvSumOfSquaredAbsoluteError);}  }
class C{  public ProtocolOK(Serializable payload){  super(payload);}  }
class C{  public AtomServiceDataParser(){  super(AltFormat.ATOM_SERVICE,ServiceDocument.class);}  }
class C{  public NotificationChain basicSetStateVector(StateVector newStateVector,NotificationChain msgs){  StateVector oldStateVector=stateVector;  stateVector=newStateVector;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__STATE_VECTOR,oldStateVector,newStateVector);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public <T>T read(T value,Reader source) throws Exception {  return read(value,source,true);}  }
class C{  public final boolean icTest(Tree tree){  double pos0=pos.value(0);  double pos1=pos.value(1);  double pos2=pos.value(2);  boolean result=true;  double xsc=(pos0 - tree.rmin.value(0)) / tree.rsize;  if (!(0.0 < xsc && xsc < 1.0)) {    result=false;  }  xsc=(pos1 - tree.rmin.value(1)) / tree.rsize;  if (!(0.0 < xsc && xsc < 1.0)) {    result=false;  }  xsc=(pos2 - tree.rmin.value(2)) / tree.rsize;  if (!(0.0 < xsc && xsc < 1.0)) {    result=false;  }  return result;}  }
class C{  public RunnerThread(ThreadGroup threadGroup){  super(threadGroup,"");  this.code=null;  this.runFinished=false;  this.exceptionThrown=null;  this.state=NextCallMustBe.SETUP;  this.setUncaughtExceptionHandler(RandoopUncaughtRunnerThreadExceptionHandler.getHandler());}  }
class C{  public void printAndCacheEntry(ListEntry entry){  String id=entry.getId().substring(entry.getId().lastIndexOf('/') + 1);  entriesCached.put(id,entry);  out.println("-- id: " + id + "  title: "+ entry.getTitle().getPlainText());  for (  String tag : entry.getCustomElements().getTags()) {    out.println("     <gsx:" + tag + ">"+ entry.getCustomElements().getValue(tag)+ "</gsx:"+ tag+ ">");  }}  }
class C{  public static int cs_dropzeros(Scs A){  return (Scs_fkeep.cs_fkeep(A,new Cs_nonzero(),null));}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=randomInt(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  public static String listToString(List<Size> sizes){  ArrayList<Integer> flatSizes=new ArrayList<>();  for (  Size s : sizes) {    flatSizes.add(s.width());    flatSizes.add(s.height());  }  return TextUtils.join(LIST_DELIMITER,flatSizes);}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){switch (lc) {case NUMERICAL_LABEL:case NO_LABEL:case UPDATABLE:case FORMULA_PROVIDER:    return false;default :  return true;}}  }
class C{  @Inline @Override public final ObjectReference objectReferenceAtomicWrite(ObjectReference objref,ObjectReference target,Word offset,Word unused,int mode){  Object obj=objref.toObject();  Object newObject=target.toObject();  Object oldObject;  do {    oldObject=Magic.prepareObject(obj,offset.toOffset());  } while (!Magic.attemptObject(obj,offset.toOffset(),oldObject,newObject));  return ObjectReference.fromObject(oldObject);}  }
class C{  private boolean complete(long timestamp){  return timestamp > time;}  }
class C{  private ChiSquare(){  this.df=5.0;}  }
class C{  boolean destroyIGroup(boolean force){  NaElement elem=new NaElement("igroup-destroy");  elem.addNewChild("initiator-group-name",name);  elem.addNewChild("force",Boolean.toString(force));  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to destroy initiator group: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  public Collection<?> toCollection(String column) throws SQLException {  return toCollection(getColIdxByName(column));}  }
class C{  protected void match(int w,int j){  matchJobByWorker[w]=j;  matchWorkerByJob[j]=w;}  }
class C{  @Override public void collectionProcessComplete() throws AnalysisEngineProcessException {  super.collectionProcessComplete();  try {    converter.createIndex();  } catch (  IOException e) {    throw new AnalysisEngineProcessException(e);  }}  }
class C{  public void stop(final String serviceName) throws LocalRepositoryException {  final String prefix="stop(): serviceName=" + serviceName + " ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_STOP,serviceName};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ELEMENT ");    writer.write(name);    writer.write(' ');    writer.write(model);    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private static int computeBestOffset(int newOffset,int invocationLocation,int bestOffset){  if (newOffset <= invocationLocation) {    if (bestOffset > invocationLocation) {      return newOffset;    } else     if (bestOffset <= newOffset) {      return newOffset;    }    return -1;  }  if (newOffset <= bestOffset) {    return newOffset;  }  return -1;}  }
class C{  public void updateListIndex(){  updateListIndex(false);}  }
class C{  public DAWGTestResultSetParseException(String msg){  super(msg);}  }
class C{  public void writeSecurityHeader(SipRequest request) throws PayloadException {  try {    String realm=mDigest.getRealm();    UserProfile profile=ImsModule.getImsUserProfile();    if (realm == null) {      realm=profile.getRealm();    }    String nonce="";    if (mDigest.getNextnonce() != null) {      mDigest.updateNonceParameters();      nonce=mDigest.getNonce();    }    String requestUri=request.getRequestURI();    String user=profile.getPrivateID();    String response="";    if (nonce.length() > 0) {      String password=profile.getPassword();      response=mDigest.calculateResponse(user,password,request.getMethod(),requestUri,mDigest.buildNonceCounter(),request.getContent());    }    StringBuilder auth=new StringBuilder("Digest username=\"").append(user).append("\",uri=\"").append(requestUri).append("\",algorithm=MD5,realm=\"").append(realm).append("\",nonce=\"").append(nonce).append("\",response=\"").append(response).append("\"");    String opaque=mDigest.getOpaque();    if (opaque != null) {      auth.append(",opaque=\"").append(opaque).append("\"");    }    String qop=mDigest.getQop();    if (qop != null && qop.startsWith("auth")) {      auth.append(",nc=").append(mDigest.buildNonceCounter()).append(",qop=").append(qop).append(",cnonce=\"").append(mDigest.getCnonce()).append("\"");    }    request.addHeader(AuthorizationHeader.NAME,auth.toString());  } catch (  ParseException e) {    throw new PayloadException("Failed to write security header!",e);  }}  }
class C{  public DigitsAuthConfig build(){  if (authCallback == null) {    throw new IllegalArgumentException("AuthCallback must not be null");  }  if ((confirmationCodeCallback != null) && ((phoneNumber == null) || (partnerKey == null))) {    throw new IllegalArgumentException("PhoneNumber and partnerKey must be set when " + "confirmationCodeCallback is used. Please contact support for more " + "information.");  }  return new DigitsAuthConfig(isEmailRequired,phoneNumber == null ? "" : phoneNumber,authCallback,themeResId,confirmationCodeCallback,partnerKey);}  }
class C{  public boolean mergeWays(Way mergeInto,Way mergeFrom) throws OsmIllegalOperationException {  boolean mergeOK=true;  if ((mergeInto.nodeCount() + mergeFrom.nodeCount()) > Way.maxWayNodes)   throw new OsmIllegalOperationException(Application.mainActivity.getString(R.string.exception_too_many_nodes));  if (((mergeInto.getOsmId() < 0) && (mergeFrom.getOsmId() > 0)) || mergeInto.getOsmVersion() < mergeFrom.getOsmVersion()) {    Log.d("StorageDelegator","swap into #" + mergeInto.getOsmId() + " with from #"+ mergeFrom.getOsmId());    Way tmpWay=mergeInto;    mergeInto=mergeFrom;    mergeFrom=tmpWay;    Log.d("StorageDelegator","now into #" + mergeInto.getOsmId() + " from #"+ mergeFrom.getOsmId());  }  mergeOK=!roleConflict(mergeInto,mergeFrom);  dirty=true;  undo.save(mergeInto);  removeWay(mergeFrom);  List<Node> newNodes=new ArrayList<Node>(mergeFrom.getNodes());  boolean atBeginning;  if (mergeInto.getFirstNode().equals(mergeFrom.getFirstNode())) {    atBeginning=true;    Map<String,String> dirTags=Reverse.getDirectionDependentTags(mergeFrom);    if (dirTags != null) {      Reverse.reverseDirectionDependentTags(mergeFrom,dirTags,true);    }    mergeOK=!mergeFrom.notReversable();    Collections.reverse(newNodes);    newNodes.remove(newNodes.size() - 1);    reverseWayNodeTags(newNodes);  } else   if (mergeInto.getLastNode().equals(mergeFrom.getFirstNode())) {    atBeginning=false;    newNodes.remove(0);  } else   if (mergeInto.getFirstNode().equals(mergeFrom.getLastNode())) {    atBeginning=true;    newNodes.remove(newNodes.size() - 1);  } else   if (mergeInto.getLastNode().equals(mergeFrom.getLastNode())) {    atBeginning=false;    Map<String,String> dirTags=Reverse.getDirectionDependentTags(mergeFrom);    if (dirTags != null) {      Reverse.reverseDirectionDependentTags(mergeFrom,dirTags,true);    }    mergeOK=!mergeFrom.notReversable();    newNodes.remove(newNodes.size() - 1);    reverseWayNodeTags(newNodes);    Collections.reverse(newNodes);  } else {    throw new RuntimeException("attempted to merge non-mergeable nodes. this is a bug.");  }  setTags(mergeInto,OsmElement.mergedTags(mergeInto,mergeFrom));  for (  String v : mergeInto.getTags().values()) {    if (v.indexOf(";") >= 0) {      mergeOK=false;      break;    }  }  mergeInto.addNodes(newNodes,atBeginning);  mergeInto.updateState(OsmElement.STATE_MODIFIED);  insertElementSafe(mergeInto);  mergeElementsRelations(mergeInto,mergeFrom);  return mergeOK;}  }
class C{  public void failureDetectionTimeoutEnabled(boolean enabled){  failureDetectionTimeoutEnabled=enabled;}  }
class C{  @Override public final CompilerPhase newExecution(IR ir){  return this;}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  public FacebookAuthorizationException(String message){  super(message);}  }
class C{  public SoapBindingMock(){  _exceptionMessage=null;}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  void open(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write("(");}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  boolean remove(final RemoteDevice remoteDevice){  return remove(remoteDevice,false);}  }
class C{  protected void onRequestProcessed(){}  }
class C{  protected TExportableElementImpl(){  super();}  }
class C{  public int totalExcludeRules(){  return excludesCount;}  }
class C{  @FlashException(referrer={"fileSystem"}) public static void addSubDirectory(String id,String shareName,String subDirectroy,String description){  ViPRCoreClient client=BourneUtil.getViprClient();  FileSystemShareParam param=new FileSystemShareParam();  param.setShareName(shareName);  if (subDirectroy != null && !"".equals(subDirectroy)) {    param.setSubDirectory(subDirectroy);  }  if (description != null && !"".equals(description)) {    param.setDescription(description);  }  client.fileSystems().share(uri(id),param);  flash.put("info",MessagesUtils.get("resources.filesystem.subdir.add"));  fileSystem(id);}  }
class C{  public MapperBuilder presentIn(String xmlPath){  this.path=xmlPath;  return this;}  }
class C{  public void addSourceType(final CertificateSourceType certSourceType){  if (certSourceType != null) {    sources.add(certSourceType);  }}  }
class C{  public InputTextReader(String content){  _content=content.toCharArray();}  }
class C{  public RoundRectangleRadiusHandle(Figure owner){  super(owner);}  }
class C{  private Promise<PrivateKey> fetchPreKey(byte[] publicKey){  try {    return Promise.success(ManagedList.of(ownKeys.getPreKeys()).filter(PrivateKey.PRE_KEY_EQUALS(publicKey)).first());  } catch (  Exception e) {    Log.d(TAG,"Unable to find own pre key " + Crypto.keyHash(publicKey));    for (    PrivateKey p : ownKeys.getPreKeys()) {      Log.d(TAG,"Have: " + Crypto.keyHash(p.getPublicKey()));    }    throw e;  }}  }
class C{  public MessageBuilder appendNewLine(){  strBuilder.append("\n");  return this;}  }
class C{  public static boolean isApplet(){  return (applet != null);}  }
class C{  public void rollbackUpgradeVirtualVolumeLocalToDistributed(URI vplexURI,String virtualVolumeName,String virtualVolumePath,String executeStepId,String stepId) throws WorkflowException {  try {    VolumeInfo mirrorInfo=(VolumeInfo)_workflowService.loadStepData(executeStepId);    if (mirrorInfo != null) {      WorkflowStepCompleter.stepExecuting(stepId);      StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);      String clusterId=client.getClaimedStorageVolumeClusterName(mirrorInfo);      try {        client.detachMirrorFromDistributedVolume(virtualVolumeName,clusterId);        VPlexVirtualVolumeInfo virtualVolumeInfo=client.findVirtualVolume(virtualVolumeName,virtualVolumePath);        String sourceDeviceName=virtualVolumeInfo.getSupportingDevice();        client.deviceCollapse(sourceDeviceName,VPlexApiConstants.DISTRIBUTED_DEVICE);        client.setDeviceVisibility(sourceDeviceName);      } catch (      Exception e) {        _log.error("Exception restoring virtual volume " + virtualVolumeName + " to its original state."+ e);        _log.info(String.format("Couldn't detach mirror corresponding to the backend volume %s from the VPLEX volume %s on VPLEX cluster %s during rollback. " + "Its possible mirror was never attached, so just move on to delete backend volume artifacts from the VPLEX",mirrorInfo.getVolumeName(),virtualVolumeName,clusterId));      }      client.deleteLocalDevice(mirrorInfo);    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception rollback VPlex Virtual Volume upgrade from local to distributed : " + vae.getLocalizedMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception rollback VPlex Virtual Volume upgrade from local to distributed : " + ex.getLocalizedMessage(),ex);    ServiceError serviceError=VPlexApiException.errors.createVirtualVolumesRollbackFailed(stepId,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public boolean isEmpty(){  return QUEUE.get().isEmpty();}  }
class C{  public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public ColCount(int count){  this.count=count;}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private void startupAcceptor() throws InterruptedException {  if (!selectable) {    registerQueue.clear();    cancelQueue.clear();    flushingSessions.clear();  }  lock.acquire();  if (acceptor == null) {    acceptor=new Acceptor();    executeWorker(acceptor);  } else {    lock.release();  }}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  private UTF8Reader(InputStream is){  _is=is;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static List<INaviEdge> loadEdges(final AbstractSQLProvider provider,final INaviView view,final Map<Integer,INaviViewNode> nodeLookup,final Map<Integer,ArrayList<IComment>> edgeToGlobalCommentMap) throws CouldntLoadDataException {  final String query="SELECT * FROM load_view_edges(" + view.getConfiguration().getId() + ")";  List<CBend> currentPaths=new ArrayList<CBend>();  final Map<Integer,INaviEdge> commentIdToEdge=new HashMap<Integer,INaviEdge>();  final Map<Integer,INaviEdge> edgeIdToEdge=new HashMap<Integer,INaviEdge>();  try {    final CConnection connection=provider.getConnection();    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    final ResultSet resultSet=statement.executeQuery();    try {      while (resultSet.next()) {        final int edgeId=resultSet.getInt("id");        if (edgeIdToEdge.containsKey(edgeId)) {          final INaviEdge edge=edgeIdToEdge.get(edgeId);          final double pathX=resultSet.getDouble("x");          final double pathY=resultSet.getDouble("y");          if (!resultSet.wasNull()) {            edge.addBend(pathX,pathY);          }          continue;        }        final int sourceNode=resultSet.getInt("source_node_id");        final int targetNode=resultSet.getInt("target_node_id");        Integer localCommentId=resultSet.getInt("comment_id");        if (resultSet.wasNull()) {          localCommentId=null;        }        final double x1=resultSet.getDouble("x1");        final double y1=resultSet.getDouble("y1");        final double x2=resultSet.getDouble("x2");        final double y2=resultSet.getDouble("y2");        final EdgeType type=EdgeType.valueOf(resultSet.getString("type").toUpperCase());        final Color color=new Color(resultSet.getInt("color"));        final boolean visible=resultSet.getBoolean("visible");        final boolean selected=resultSet.getBoolean("selected");        final INaviViewNode source=nodeLookup.get(sourceNode);        final INaviViewNode target=nodeLookup.get(targetNode);        final double pathX=resultSet.getDouble("x");        final double pathY=resultSet.getDouble("y");        if (!resultSet.wasNull()) {          currentPaths.add(new CBend(pathX,pathY));        }        final CNaviViewEdge edge=new CNaviViewEdge(edgeId,source,target,type,x1,y1,x2,y2,color,selected,visible,null,currentPaths,provider);        if (localCommentId != null) {          commentIdToEdge.put(localCommentId,edge);        }        final ArrayList<IComment> globalComments=edgeToGlobalCommentMap.containsKey(edgeId) ? edgeToGlobalCommentMap.get(edgeId) : null;        if ((globalComments != null) && (globalComments.size() != 0)) {          initializeGlobalComment(edge,globalComments,provider);        }        source.addOutgoingEdge(edge);        target.addIncomingEdge(edge);        edgeIdToEdge.put(edge.getId(),edge);        currentPaths=new ArrayList<CBend>();      }      if (!commentIdToEdge.isEmpty()) {        final HashMap<Integer,ArrayList<IComment>> commentIdToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdToEdge.keySet());        for (        final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdToComments.entrySet()) {          commentIdToEdge.get(commentIdToComment.getKey()).initializeLocalComment(commentIdToComment.getValue());        }      }    }  finally {      resultSet.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException("Error: Loading of view edges failed");  }  return Lists.newArrayList(edgeIdToEdge.values());}  }
class C{  public void parseAmenity(String file) throws FileNotFoundException {  File f=new File(file);  if (!f.exists()) {    throw new FileNotFoundException("Could not find " + file);  }  AmenitySink mes=new AmenitySink(this.ct,this.osmToMatsimTypeMap);  XmlReader xr=new XmlReader(f,false,CompressionMethod.None);  xr.setSink(mes);  xr.run();  this.amenities=mes.getFacilities();  this.amenityAttributes=mes.getFacilityAttributes();}  }
class C{  public Size size(){  return rect.size;}  }
class C{  protected void onVoice(String channel,String sourceNick,String sourceLogin,String sourceHostname,String recipient){}  }
class C{  public static void install(JSplitPane pane,IntSetting setting){  pane.setDividerLocation(setting.getValue());  pane.putClientProperty(propertyListener,setting);  pane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY,propertyListener);}  }
class C{  public static <T>SortedSet<T> minus(SortedSet<T> self,Collection<?> removeMe){  return (SortedSet<T>)minus((Set<T>)self,removeMe);}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(Object value){}  }
class C{  public void addPlot(PlotData2D newPlot) throws Exception {  if (m_plot2D.getPlots().size() == 0) {    m_plot2D.addPlot(newPlot);    if (m_plotSurround.getComponentCount() > 1 && m_plotSurround.getComponent(1) == m_attrib && m_showAttBars) {      try {        m_attrib.setInstances(newPlot.m_plotInstances);        m_attrib.setCindex(0);        m_attrib.setX(0);        m_attrib.setY(0);      } catch (      Exception ex) {        m_plotSurround.remove(m_attrib);        System.err.println("Warning : data contains more attributes " + "than can be displayed as attribute bars.");        if (m_Log != null) {          m_Log.logMessage("Warning : data contains more attributes " + "than can be displayed as attribute bars.");        }      }    } else     if (m_showAttBars) {      try {        m_attrib.setInstances(newPlot.m_plotInstances);        m_attrib.setCindex(0);        m_attrib.setX(0);        m_attrib.setY(0);        GridBagConstraints constraints=new GridBagConstraints();        constraints.fill=GridBagConstraints.BOTH;        constraints.insets=new Insets(0,0,0,0);        constraints.gridx=4;        constraints.gridy=0;        constraints.weightx=1;        constraints.gridwidth=1;        constraints.gridheight=1;        constraints.weighty=5;        m_plotSurround.add(m_attrib,constraints);      } catch (      Exception ex) {        System.err.println("Warning : data contains more attributes " + "than can be displayed as attribute bars.");        if (m_Log != null) {          m_Log.logMessage("Warning : data contains more attributes " + "than can be displayed as attribute bars.");        }      }    }    m_classPanel.setInstances(newPlot.m_plotInstances);    plotReset(newPlot.m_plotInstances,newPlot.getCindex());    if (newPlot.m_useCustomColour && m_showClassPanel) {      VisualizePanel.this.remove(m_classSurround);      switchToLegend();      m_legendPanel.setPlotList(m_plot2D.getPlots());      m_ColourCombo.setEnabled(false);    }  } else {    if (!newPlot.m_useCustomColour && m_showClassPanel) {      VisualizePanel.this.add(m_classSurround,BorderLayout.SOUTH);      m_ColourCombo.setEnabled(true);    }    if (m_plot2D.getPlots().size() == 1) {      switchToLegend();    }    m_plot2D.addPlot(newPlot);    m_legendPanel.setPlotList(m_plot2D.getPlots());  }}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final byte[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public Node parseXML(String text,Document doc){  return null;}  }
class C{  public void stopScroll(){  mStopped=true;  mHandler.removeCallbacks(mScrollRunnable);}  }
class C{  protected boolean inHitRegion(int x,int y){  if (lastRow != -1 && tree != null) {    Rectangle bounds=tree.getRowBounds(lastRow);    ComponentOrientation treeOrientation=tree.getComponentOrientation();    if (treeOrientation.isLeftToRight()) {      if (bounds != null && x <= (bounds.x + offset) && offset < (bounds.width - 5)) {        return false;      }    } else     if (bounds != null && (x >= (bounds.x + bounds.width - offset + 5) || x <= (bounds.x + 5)) && offset < (bounds.width - 5)) {      return false;    }  }  return true;}  }
class C{  public String valueToString(double value){  String strToReturn;  try {    strToReturn=(String)this.symbols.get((int)value);  } catch (  IndexOutOfBoundsException ex) {    strToReturn="";  }  return strToReturn;}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static Border createEtchedLowered(int highlight,int shadow){  Border b=new Border();  b.type=TYPE_ETCHED_LOWERED;  b.themeColors=false;  b.colorA=shadow;  b.colorB=highlight;  return b;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public double evaluate(double[] x){  int len=f.getNumArguments();  for (int i=0; i < len; i++) {    if (x[i] < f.getLowerBound(i) || x[i] > f.getUpperBound(i)) {      return veryLarge;    }  }  return f.evaluate(x);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static String arrayToString(int[] array){  return Arrays.toString(array).replace('[',' ').replace(']',' ').replace(',',' ');}  }
class C{  int parseTimeZone(String source,int ofs) throws ParseException {  char tzSign=source.charAt(0);  if (tzSign == SIGN_NEGATIVE || tzSign == SIGN_POSITIVE) {    source=source.substring(1);    int index=2;    if (source.length() == 3) {      index--;    }    int tzHours=parseNumber(source.substring(0,index),ofs,"timezone",0,23);    int tzMinutes=parseNumber(source.substring(index),ofs,"timezone",0,59);    tzMinutes+=tzHours * 60;    if (tzSign != SIGN_NEGATIVE) {      tzMinutes=-tzMinutes;    }    return tzMinutes;  }  if (source.startsWith(GMT)) {    int index=source.indexOf(':');    if (index != -1) {      source=source.substring(3,index) + source.substring(index + 1);    } else {      source=source.substring(3);    }    return parseTimeZone(source,ofs);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(source)) {        TimeZone tz=TimeZone.getTimeZone(timezone[DateFormatSymbols.ZONE_ID]);        return -(tz.getRawOffset() / MILLIS_TO_MINUTES);      }    }  }  return throwInvalid("timezone",ofs);}  }
class C{  @SuppressWarnings("unused") private static void buildSinCosTables(double[] SINE_TABLE_A,double[] SINE_TABLE_B,double[] COSINE_TABLE_A,double[] COSINE_TABLE_B,int SINE_TABLE_LEN,double[] TANGENT_TABLE_A,double[] TANGENT_TABLE_B){  final double result[]=new double[2];  for (int i=0; i < 7; i++) {    double x=i / 8.0;    slowSin(x,result);    SINE_TABLE_A[i]=result[0];    SINE_TABLE_B[i]=result[1];    slowCos(x,result);    COSINE_TABLE_A[i]=result[0];    COSINE_TABLE_B[i]=result[1];  }  for (int i=7; i < SINE_TABLE_LEN; i++) {    double xs[]=new double[2];    double ys[]=new double[2];    double as[]=new double[2];    double bs[]=new double[2];    double temps[]=new double[2];    if ((i & 1) == 0) {      xs[0]=SINE_TABLE_A[i / 2];      xs[1]=SINE_TABLE_B[i / 2];      ys[0]=COSINE_TABLE_A[i / 2];      ys[1]=COSINE_TABLE_B[i / 2];      splitMult(xs,ys,result);      SINE_TABLE_A[i]=result[0] * 2.0;      SINE_TABLE_B[i]=result[1] * 2.0;      splitMult(ys,ys,as);      splitMult(xs,xs,temps);      temps[0]=-temps[0];      temps[1]=-temps[1];      splitAdd(as,temps,result);      COSINE_TABLE_A[i]=result[0];      COSINE_TABLE_B[i]=result[1];    } else {      xs[0]=SINE_TABLE_A[i / 2];      xs[1]=SINE_TABLE_B[i / 2];      ys[0]=COSINE_TABLE_A[i / 2];      ys[1]=COSINE_TABLE_B[i / 2];      as[0]=SINE_TABLE_A[i / 2 + 1];      as[1]=SINE_TABLE_B[i / 2 + 1];      bs[0]=COSINE_TABLE_A[i / 2 + 1];      bs[1]=COSINE_TABLE_B[i / 2 + 1];      splitMult(xs,bs,temps);      splitMult(ys,as,result);      splitAdd(result,temps,result);      SINE_TABLE_A[i]=result[0];      SINE_TABLE_B[i]=result[1];      splitMult(ys,bs,result);      splitMult(xs,as,temps);      temps[0]=-temps[0];      temps[1]=-temps[1];      splitAdd(result,temps,result);      COSINE_TABLE_A[i]=result[0];      COSINE_TABLE_B[i]=result[1];    }  }  for (int i=0; i < SINE_TABLE_LEN; i++) {    double xs[]=new double[2];    double ys[]=new double[2];    double as[]=new double[2];    as[0]=COSINE_TABLE_A[i];    as[1]=COSINE_TABLE_B[i];    splitReciprocal(as,ys);    xs[0]=SINE_TABLE_A[i];    xs[1]=SINE_TABLE_B[i];    splitMult(xs,ys,as);    TANGENT_TABLE_A[i]=as[0];    TANGENT_TABLE_B[i]=as[1];  }}  }
class C{  public boolean isProvidedByRuntime(){  return this.isDeclaredProvidedByRuntime();}  }
class C{  private void checkAndRunItem(ImportItem item){  if (jobs.isEmpty()) {    return;  }  if (!item.isIncluded()) {    return;  }  if (verbose) {    item.pushLog(this,ALERT.MESSAGE,"Import started for " + item.getName());  }  runImport(item);  if (verbose) {    item.pushLog(this,ALERT.MESSAGE,"Import completed for " + item.getName());  }  if (jobs.isEmpty()) {    return;  }  item.readComplete();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RegressionCovariance(ICovarianceMatrix covariances){  this(covariances,zeroMeans(covariances.getDimension()));}  }
class C{  public static byte[] chars2utf(char[] src){  return chars2utf(src,0,src.length);}  }
class C{  public void alwaysClearColorBuffer(boolean value){  mAlwaysClearColorBuffer=value;}  }
class C{  ChatSession(ImEntity participant,ChatSessionManager manager){  mParticipant=participant;  mManager=manager;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  cipher.init(forEncryption,params);}  }
class C{  public void dispose(){  clearChildContexts();synchronized (eventListenerSet) {    Iterator iter=eventListenerSet.iterator();    while (iter.hasNext()) {      EventListenerMememto m=(EventListenerMememto)iter.next();      NodeEventTarget et=m.getTarget();      EventListener el=m.getListener();      boolean uc=m.getUseCapture();      String t=m.getEventType();      boolean n=m.getNamespaced();      if (et == null || el == null || t == null) {        continue;      }      if (n) {        String ns=m.getNamespaceURI();        et.removeEventListenerNS(ns,t,el,uc);      } else {        et.removeEventListener(t,el,uc);      }    }  }  if (document != null) {    removeDOMListeners();  }  if (animationEngine != null) {    animationEngine.dispose();    animationEngine=null;  }  Iterator iter=interpreterMap.values().iterator();  while (iter.hasNext()) {    Interpreter interpreter=(Interpreter)iter.next();    if (interpreter != null)     interpreter.dispose();  }  interpreterMap.clear();  if (focusManager != null) {    focusManager.dispose();  }  if (elementDataMap != null) {    elementDataMap.clear();  }  if (nodeElementMap != null) {    nodeElementMap.clear();  }  if (elementNodeMap != null) {    elementNodeMap.clear();  }}  }
class C{  public IMouseState createNodeClickedMiddleState(final Node n,final MouseEvent event){  final CNodeClickedMiddleState state=new CNodeClickedMiddleState(this,m_graph,n);  m_factory.createNodeClickedMiddleAction().execute(state,event);  return state;}  }
class C{  protected EventDefinition_Impl(){  super();}  }
class C{  public void testPruningData(){  for (int i=0; i < SUGGESTION_STARTS; i++)   sh.addToUserBigram(sentence0);  sh.flushUserBigrams();  assertTrue(sh.isUserBigramSuggestion("Hello",'w',"world"));  sh.addToUserBigram(sentence1);  sh.addToUserBigram(sentence2);  assertTrue(sh.isUserBigramSuggestion("Hello",'w',"world"));  sh.addToUserBigram(sentence3);  sh.addToUserBigram(sentence4);  sh.changeUserBigramLocale(getTestContext(),Locale.US);  assertFalse(sh.isUserBigramSuggestion("Hello",'w',"world"));}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  static public EasyDccTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new EasyDccTrafficController object");    }    self=new EasyDccTrafficController();  }  return self;}  }
class C{  public boolean isProgramCounter(){  return m_register.isPc();}  }
class C{  public void add(double value){  if (count == 0) {    count=1;    mean=value;    min=value;    max=value;    if (!isFinite(value)) {      sumOfSquaresOfDeltas=NaN;    }  } else {    count++;    if (isFinite(value) && isFinite(mean)) {      double delta=value - mean;      mean+=delta / count;      sumOfSquaresOfDeltas+=delta * (value - mean);    } else {      mean=calculateNewMeanNonFinite(mean,value);      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,value);    max=Math.max(max,value);  }}  }
