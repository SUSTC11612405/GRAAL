class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void close() throws IOException {}  }
class C{  protected BaseModelMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public boolean equals(Object that){  if (that.getClass() != this.getClass())   return false;  SIPDate other=(SIPDate)that;  return this.wkday == other.wkday && this.day == other.day && this.month == other.month && this.year == other.year && this.hour == other.hour && this.minute == other.minute && this.second == other.second;}  }
class C{  public PdfSignatureAppDictionary(PdfDictionary pdfObject){  super(pdfObject);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public int processChannelData() throws IOException {  if (saveBufferReader.remaining() == 0) {    saveBuffer.clear();    saveBufferReader.rewind();  }  if (byteBuffer.remaining() > 0) {    saveBuffer.appendBytes(byteBuffer,byteBuffer.remaining());  }  byteBuffer.clear();  try {    return byteChannel.read(byteBuffer);  }  finally {    byteBuffer.flip();  }}  }
class C{  public synchronized void mark(int readlimit){  marklimit=readlimit;  markpos=pos;}  }
class C{  protected void enrichCluster(Builder clusterBuilder){}  }
class C{  private Entry fetchBaseEntry(ReadableTransaction txn,DN searchBaseDN,SearchScope searchScope) throws DirectoryException {  Entry baseEntry=getEntry0(txn,searchBaseDN);  if (baseEntry == null) {    dn2uri.targetEntryReferrals(txn,searchBaseDN,searchScope);    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_SEARCH_NO_SUCH_OBJECT.get(searchBaseDN),getMatchedDN(txn,searchBaseDN),null);  }  return baseEntry;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  SCConfigSystemViewBean vb=(SCConfigSystemViewBean)getViewBean(SCConfigSystemViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void testSetBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=95;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private boolean brokerIsConnected(){  final IsolationPolicy isolationPolicy=config.getIsolationPolicy();  if (isolationPolicy.equals(IsolationPolicy.ACCEPT_ALL_UPDATES)) {    return true;  }  if (isolationPolicy.equals(IsolationPolicy.REJECT_ALL_UPDATES)) {    return !hasConnectionError();  }  return true;}  }
class C{  protected void updateReadyStatus(){  if (command != null && env != null && wd != null && params != null && response != null) {    readyToRun=true;  } else {    readyToRun=false;  }}  }
class C{  public BrdItem shove_fail_obstacle_get(){  return shove_obstacle.brd_item;}  }
class C{  public CertificateParsingException(){  super();}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  try {    dropTargetContext=(DropTargetContext)f.get("dropTargetContext",null);  } catch (  IllegalArgumentException e) {  }  if (dropTargetContext == null) {    dropTargetContext=createDropTargetContext();  }  component=(Component)f.get("component",null);  actions=f.get("actions",DnDConstants.ACTION_COPY_OR_MOVE);  active=f.get("active",true);  try {    dtListener=(DropTargetListener)f.get("dtListener",null);  } catch (  IllegalArgumentException e) {    dtListener=(DropTargetListener)s.readObject();  }}  }
class C{  public void test_equalsLjava_lang_Object(){  try {    DateFormat format=DateFormat.getInstance();    DateFormat clone=(DateFormat)format.clone();    assertTrue("Clone and parent are not equaled",format.equals(clone));    assertTrue("Clone is equal to other object",!clone.equals(DateFormat.getTimeInstance()));    format.setCalendar(Calendar.getInstance());    assertTrue("Clone and parent are not equaled",format.equals(clone));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private JPanel createPanel(){  GridBagConstraints gbc=new GridBagConstraints();  JPanel contentPanel=new JPanel(new GridBagLayout());  contentPanel.setBackground(UIFactory.DEFAULT_BACKGROUND);  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.insets=UIFactory.getEmptyInsets();  gbc.fill=GridBagConstraints.BOTH;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  JPanel topPanel=new JPanel(new GridBagLayout());  topPanel.setBorder(UIFactory.DIALOG_PANEL_BORDER);  topPanel.setBackground(UIFactory.CURRENT_STEP_PANEL_BACKGROUND);  gbc.weighty=0.0;  gbc.insets=UIFactory.getCurrentStepPanelInsets();  topPanel.add(createTitlePanel(),gbc);  gbc.insets.top=UIFactory.TOP_INSET_INSTRUCTIONS_SUBPANEL;  topPanel.add(createTextPane(),gbc);  certificateDetails=createCertificateDetailsPane();  gbc.insets.top=0;  gbc.insets.bottom=0;  topPanel.add(Box.createHorizontalStrut(certificateDetails.getPreferredSize().width),gbc);  gbc.insets.top=0;  gbc.weighty=1.0;  JPanel auxPanel=UIFactory.makeJPanel();  auxPanel.setLayout(new GridBagLayout());  gbc.weightx=0.0;  gbc.insets=UIFactory.getEmptyInsets();  gbc.gridwidth=GridBagConstraints.RELATIVE;  auxPanel.add(Box.createVerticalStrut(100),gbc);  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  auxPanel.add(certificateDetails,gbc);  gbc.insets=UIFactory.getCurrentStepPanelInsets();  gbc.insets.bottom=UIFactory.TOP_INSET_INPUT_SUBPANEL;  topPanel.add(auxPanel,gbc);  certificateDetails.setVisible(false);  gbc.weighty=0.2;  gbc.insets=UIFactory.getEmptyInsets();  topPanel.add(Box.createVerticalGlue(),gbc);  contentPanel.add(topPanel,gbc);  gbc.weighty=0.0;  gbc.insets=UIFactory.getButtonsPanelInsets();  gbc.fill=GridBagConstraints.HORIZONTAL;  contentPanel.add(createButtonsPanel(),gbc);  return contentPanel;}  }
class C{  public Element first(){switch (model.type) {case '*':case '?':case '|':case '&':    return null;case '+':  return model.first();case ',':{  ContentModel m=(ContentModel)model.content;  for (int i=0; i < value; i++, m=m.next)   ;  return m.first();}default :return model.first();}}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public Object clone(){  if (ipv6) {    return iPv6ConditionInstance.clone();  } else {    return iPv4ConditionInstance.clone();  }}  }
class C{  static public void fail(String message){  throw new AssertionFailedError(message);}  }
class C{  Properties checkExternalProperties() throws ArgumentException {  if (noPropertiesFileArgument != null && noPropertiesFileArgument.isPresent()) {    return null;  }  if (filePropertiesPathArgument == null) {    return null;  }  String propertiesFilePath;  if (filePropertiesPathArgument.isPresent()) {    propertiesFilePath=filePropertiesPathArgument.getValue();  } else {    final String userDir=System.getProperty("user.home");    propertiesFilePath=findPropertiesFile(userDir + File.separator + DEFAULT_OPENDJ_CONFIG_DIR);  }  if (propertiesFilePath == null) {    return null;  }  try {    final Properties argumentProperties=new Properties();    final String scriptName=getScriptName();    final Properties p=new Properties();    try (final FileInputStream fis=new FileInputStream(propertiesFilePath)){      p.load(fis);    }     for (final Enumeration<?> e=p.propertyNames(); e.hasMoreElements(); ) {      final String currentPropertyName=(String)e.nextElement();      String propertyName=currentPropertyName;      if (scriptName != null) {        if (currentPropertyName.startsWith(scriptName)) {          propertyName=currentPropertyName.substring(scriptName.length() + 1);        } else         if (p.containsKey(scriptName + "." + currentPropertyName)) {          continue;        }      }      argumentProperties.setProperty(propertyName.toLowerCase(),p.getProperty(currentPropertyName));    }    return argumentProperties;  } catch (  final Exception e) {    final LocalizableMessage message=ERR_ARGPARSER_CANNOT_READ_PROPERTIES_FILE.get(propertiesFilePath,getExceptionMessage(e));    throw new ArgumentException(message,e);  }}  }
class C{  public static MediaSizeName findMedia(float x,float y,int units){  MediaSize match=MediaSize.ISO.A4;  if (x <= 0.0f || y <= 0.0f || units < 1) {    throw new IllegalArgumentException("args must be +ve values");  }  double ls=x * x + y * y;  double tmp_ls;  float[] dim;  float diffx=x;  float diffy=y;  for (int i=0; i < sizeVector.size(); i++) {    MediaSize mediaSize=(MediaSize)sizeVector.elementAt(i);    dim=mediaSize.getSize(units);    if (x == dim[0] && y == dim[1]) {      match=mediaSize;      break;    } else {      diffx=x - dim[0];      diffy=y - dim[1];      tmp_ls=diffx * diffx + diffy * diffy;      if (tmp_ls < ls) {        ls=tmp_ls;        match=mediaSize;      }    }  }  return match.getMediaSizeName();}  }
class C{  public static FSAuthnResponse parseAuthnResponseXML(String xml) throws SAMLException, FSMsgException {  FSUtils.debug.message("FSAuthnResponse.parseAuthnResponseXML: Called");  Element root;  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.parseXML:Error " + "while parsing input xml string");    }    throw new FSMsgException("parseError",null);  }  root=doc.getDocumentElement();  return new FSAuthnResponse(root);}  }
class C{  @Deprecated protected void drawButton(PdfCanvas canvas,float x,float y,float width,float height,String text,PdfFont font,int fontSize){  drawButton(canvas,x,y,width,height,text,font,(float)fontSize);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS03.class,args);}  }
class C{  public void removeClassResolver(IClassResolver resolver){  m_resolvers.remove(resolver);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl(value);}  }
class C{  public static boolean matches(MappedMember mm,String name,String desc,boolean old){  if (name.equals(old ? mm.getOriginalName() : mm.getNewName()) && mm.getDesc().equals(desc)) {    return true;  }  return false;}  }
class C{  @Override public void shutdown(){  super.shutdown();  clearRemoteLSHandlers();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  List listContinues=(List)rc.getOption(IArgument.CONTINUE);  boolean continueFlag=(listContinues != null);  IOutput outputWriter=getOutputWriter();  List fileNames=(List)rc.getOption(ARGUMENT_SCHEMA_FILES);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  ServiceSchema ss=getServiceSchema();  CommandManager mgr=getCommandManager();  String url=mgr.getWebEnabledURL();  if ((url != null) && (url.length() > 0)) {    String[] param={CLIConstants.WEB_INPUT};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_ATTRIBUTE_SCHEMA",param);    addAttributeSchemaXML(ss,serviceName,schemaType,(String)fileNames.iterator().next());    outputWriter.printlnMessage(getResourceString("attribute-schema-added"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_ATTRIBUTE_SCHEMA",param);  } else {    for (Iterator i=fileNames.iterator(); i.hasNext(); ) {      String name=(String)i.next();      String[] param={serviceName,schemaType,name};      try {        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_ATTRIBUTE_SCHEMA",param);        addAttributeSchema(ss,serviceName,schemaType,name);        outputWriter.printlnMessage(getResourceString("attribute-schema-added"));        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_ATTRIBUTE_SCHEMA",param);      } catch (      CLIException e) {        if (continueFlag) {          outputWriter.printlnError(getResourceString("add-attribute-schema-failed") + e.getMessage());          if (isVerbose()) {            outputWriter.printlnError(Debugger.getStackTrace(e));          }        } else {          throw e;        }      }    }  }}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public boolean isShowing(){  return false;}  }
class C{  public DateTimeParseException(String message,CharSequence parsedData,int errorIndex){  super(message);  this.parsedString=parsedData.toString();  this.errorIndex=errorIndex;}  }
class C{  public StatusDetailImpl() throws XACMLException {  String xmlString="<xacml-context:StatusDetail xmlns:xacml-context=" + "\"urn:oasis:names:tc:xacml:2.0:context:schema:cd:04\"/>";  element=new StatusDetailImpl(xmlString).getElement();}  }
class C{  private ReferentialIntegrityDeleteListener(DN dn,LocalizableMessage message){  this.dn=dn;  this.message=message;}  }
class C{  public static IntegerArgument jmxPortArgument(final int defaultJMXPort) throws ArgumentException {  return IntegerArgument.builder("jmxPort").shortIdentifier('x').description(INFO_ARGUMENT_DESCRIPTION_SKIPPORT.get()).range(1,65535).defaultValue(defaultJMXPort).valuePlaceholder(INFO_JMXPORT_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void objectChanged(AMEvent event){  if (event == null) {    debug.error("AMConfiguration.objectChanged, event null");    return;  }  if (debug.messageEnabled()) {    debug.message("objectChanged, type=" + event.getEventType() + ", sDN="+ event.getSourceDN()+ ", sType="+ event.getSourceType());  }  processSDKNotification();}  }
class C{  @Override public void printOpenTag(PrintWriter aWriter,int indent,Object bean,StoreDescription aDesc) throws Exception {  aWriter.print("<");  aWriter.print(aDesc.getTag());  storeConnectorAttribtues(aWriter,indent,bean,aDesc);  aWriter.println(">");}  }
class C{  public int value(){  return _value;}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  @Override public void removeByUuid_C(String uuid,long companyId){  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  private boolean isSeparator(final char c){switch (c) {case ' ':case '-':    return true;default :  return false;}}  }
class C{  public void addAttributeNames(String[] attributeNames){  if (attributeNames != null) {    for (int i=0; i < attributeNames.length; i++) {      addAttributeName(attributeNames[i]);    }  }}  }
class C{  private <C extends ConfigurationClient,S extends Configuration>void processRelation(ManagedObjectPath<?,?> path,SingletonRelationDefinition<C,S> r){  AbstractManagedObjectDefinition<C,S> d=r.getChildDefinition();  helpHandler.registerManagedObjectDefinition(d);  processPath(path.child(r,d));  for (  AbstractManagedObjectDefinition<? extends C,? extends S> c : d.getAllChildren()) {    helpHandler.registerManagedObjectDefinition(c);    processPath(path.child(r,c));  }}  }
class C{  public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private String formatMessage(String message,Object... args){  if (args == null || args.length == 0) {    return message;  }  return MessageFormatter.arrayFormat(message,args).getMessage();}  }
class C{  public static <K,V>KeyedObjectPool<K,V> erodingPool(final KeyedObjectPool<K,V> keyedPool,final float factor,final boolean perKey){  if (keyedPool == null) {    throw new IllegalArgumentException("keyedPool must not be null.");  }  if (factor <= 0f) {    throw new IllegalArgumentException("factor must be positive.");  }  if (perKey) {    return new ErodingPerKeyKeyedObjectPool<>(keyedPool,factor);  }  return new ErodingKeyedObjectPool<>(keyedPool,factor);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(name);  if (hasDescription()) {    sb.append(" (");    sb.append(description);    sb.append(")");  }  return sb.toString();}  }
class C{  public void test_parseLjava_io_InputStream(){  InputStream is=getClass().getResourceAsStream("/simple.xml");  try {    Document d=db.parse(is);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputStream)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new FileInputStream("_"));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=getClass().getResourceAsStream("/wrong.xml");    db.parse(is);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  private void initInteraction(boolean isQuery,Map interactResourceMap,Message msg) throws SOAPFaultException, IDPPException {  IDPPUtils.debug.message("PPRequestHandler.initInteraction:Init");  if (msg == null || interactResourceMap == null || interactResourceMap.isEmpty()) {    IDPPUtils.debug.error("PPRequestHandler.initInteraction:Null" + "Input parameters");    throw new IDPPException(IDPPUtils.bundle.getString("nullInputParams"));  }  try {    InquiryElement inquiry=JAXBObjectFactory.getObjectFactory().createInquiryElement();    inquiry.setTitle(IDPPUtils.bundle.getString(IDPPConstants.INTERACTION_TITLE));    List selectElements=inquiry.getSelectOrConfirmOrText();    Set inquirySelects=interactResourceMap.keySet();    Iterator iter=inquirySelects.iterator();    while (iter.hasNext()) {      String resource=(String)iter.next();      String interactionType=(String)interactResourceMap.get(resource);      if (interactionType.equals(IDPPConstants.INTERACT_FOR_CONSENT)) {        selectElements.add(getInteractConfirmElement(isQuery,resource,msg));      } else       if (interactionType.equals(IDPPConstants.INTERACT_FOR_VALUE)) {        selectElements.addAll(getInteractTextElements(isQuery,resource,msg));      }    }    String lang=getLanguage(msg);    if (LogUtil.isLogEnabled()) {      String[] data={logMsg};      LogUtil.access(Level.INFO,LogUtil.PP_INTERACTION_SUCCESS,data);    }    InteractionManager.getInstance().handleInteraction(msg,inquiry,lang);  } catch (  InteractionSOAPFaultException ise) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PPRequestHandler.initInteraction:" + "Interact redirection happened");    }    throw ise.getSOAPFaultException();  }catch (  Exception ex) {    IDPPUtils.debug.error("PPRequestHandler.initInteraction:Failed");    throw new IDPPException(ex);  }}  }
class C{  private Order wrapRawOrder(JsonObject rawOrder){  return new Order(rawOrder).setCreateTime(System.currentTimeMillis());}  }
class C{  public String[] parse(String input){  String[] result=cache.get(input);  if (result != null) {    return result;  }  MediaType m=null;  try {    m=MediaType.parseMediaType(new StringReader(input));  } catch (  IOException e) {  }  if (m != null) {    result=new String[]{m.toStringNoCharset(),m.getCharset()};    cache.put(input,result);  }  return result;}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  return true;}  }
class C{  public void destroy() throws org.omg.CosNaming.NamingContextPackage.NotEmpty {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("destroy",true);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    destroy();  } finally {    _releaseReply($in);  }}  }
class C{  public String encodeMessage(String function,Object[] params){  int index=1;  StringBuffer sb=new StringBuffer(1000);  sb.append(ENVELOPE).append(HEADSTART).append(HEADEND).append(ENV_BODY);  sb.append("<ans1:").append(function).append(" xmlns:ans1=\"http://isp.com/wsdl\">");  for (int i=0; (params != null) && (i < params.length); i++) {    if (params[i] instanceof java.lang.String) {      sb.append(encodeString("String_" + index++,(String)params[i]));    } else     if (params[i] instanceof java.util.Set) {      sb.append(encodeSet("Set_" + index++,(Set)params[i]));    } else     if (params[i] instanceof java.util.Map) {      sb.append(encodeMap("Map_" + index++,(Map)params[i]));    } else     if (params[i] instanceof java.util.List) {      sb.append(encodeList("List_" + index++,(List)params[i]));    } else     if (params[i] instanceof Integer) {      sb.append(encodeInt("int_" + index++,(Integer)params[i]));    } else     if (params[i] instanceof Boolean) {      sb.append(encodeBoolean("boolean_" + index++,(Boolean)params[i]));    } else     if (params[i] == null) {      index++;    } else {      debug.error("SOAPClient: Unknown class: " + params.getClass().getName());    }  }  sb.append("</ans1:").append(function).append(">").append(SUFFIX);  return (sb.toString());}  }
class C{  public InvalidCipherTextException(String message){  super(message);}  }
class C{  public SimpleAttributeSet(AttributeSet source){  addAttributes(source);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ObjID) {    ObjID id=(ObjID)obj;    return objNum == id.objNum && space.equals(id.space);  } else {    return false;  }}  }
class C{  @Deprecated public ShapelessRecipe removeIngredient(int count,Material ingredient,int rawdata){  Iterator<ItemStack> iterator=ingredients.iterator();  while (count > 0 && iterator.hasNext()) {    ItemStack stack=iterator.next();    if (stack.getType() == ingredient && stack.getDurability() == rawdata) {      iterator.remove();      count--;    }  }  return this;}  }
class C{  public double num(){  return m_val;}  }
class C{  public StreamSource(File f){  setSystemId(f.toURI().toASCIIString());}  }
class C{  @Override public QueryResponseWrapper query(ParsedQuery query,int limit,long offset) throws IndexParseException {  long maxIndex=offset + limit;  ResultSet results=session.execute(generateQueryStatement(query,maxIndex + 1));  return DocumentPersistanceUtils.parseResultSetWithLimitAndOffset(results,limit,offset);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildinvalidnodetype.class,args);}  }
class C{  public static Object cast(Object o,Class<?> targetType) throws Throwable {  if (targetType.isInstance(o))   return o;  if (o == null) {    if (targetType.isPrimitive()) {      throw generateClassCastException(null,targetType);    } else {      return null;    }  }  if (isBoxType(targetType)) {    if (targetType.equals(Integer.class)) {      return castToInt(o);    } else     if (targetType.equals(Short.class)) {      return castToShort(o);    } else     if (targetType.equals(Byte.class)) {      return castToByte(o);    } else     if (targetType.equals(Character.class)) {      return castToChar(o);    } else     if (targetType.equals(Long.class)) {      return castToLong(o);    } else     if (targetType.equals(Boolean.class)) {      return castToBool(o);    } else     if (targetType.equals(Float.class)) {      return castToFloat(o);    } else     if (targetType.equals(Double.class)) {      return castToDouble(o);    } else     throw new RuntimeException("unknown box type " + targetType);  }  if (targetType.equals(int.class))   return castToInt(o);  if (targetType.equals(short.class))   return castToShort(o);  if (targetType.equals(byte.class))   return castToByte(o);  if (targetType.equals(char.class))   return castToChar(o);  if (targetType.equals(long.class))   return castToLong(o);  if (targetType.equals(boolean.class))   return castToBool(o);  if (targetType.equals(float.class))   return castToFloat(o);  if (targetType.equals(double.class))   return castToDouble(o);  if (targetType.isArray()) {    if (o instanceof java.util.List) {      Class<?> component=targetType.getComponentType();      java.util.List<?> list=(java.util.List<?>)o;      Object arr=Array.newInstance(component,list.size());      for (int cursor=0; cursor < list.size(); ++cursor) {        Object elem=list.get(cursor);        Array.set(arr,cursor,cast(elem,component));      }      return arr;    }  } else   if (Dynamic.isFunctionalAbstractClass(targetType) || Dynamic.isFunctionalInterface(targetType)) {    if (lambdaFunctionMap.containsKey(targetType)) {      return lambdaFunctionMap.get(targetType).apply(o);    }    if (o instanceof Function) {      Method method=Dynamic.findAbstractMethod(targetType);      Method funcMethod=o.getClass().getDeclaredMethods()[0];      if (method.getParameterCount() == funcMethod.getParameterCount()) {        int i=0;        while (true) {          try {            Class.forName(targetType.getSimpleName() + "$Latte$lambda$" + i);          } catch (          ClassNotFoundException e) {            break;          }        }        StringBuilder sb=new StringBuilder();        sb.append("class ").append(targetType.getSimpleName()).append("$Latte$lambda$").append(i).append("(func:").append(getLatteTypeName(funcMethod.getDeclaringClass().getInterfaces()[0].getName())).append("):").append(getLatteTypeName(targetType.getName())).append("\n").append("    ").append(method.getName()).append("(");        boolean isFirst=true;        int index=0;        for (        Class<?> param : method.getParameterTypes()) {          if (isFirst)           isFirst=false; else           sb.append(",");          sb.append("p").append(index++).append(":").append(getLatteTypeName(param.getName()));        }        sb.append("):").append(getLatteTypeName(method.getReturnType().getName())).append("\n").append("        func.self = this\n").append("        ");        if (method.getReturnType() != void.class)         sb.append("return ");        sb.append("func.apply(");        isFirst=true;        for (int j=0; j < index; ++j) {          if (isFirst)           isFirst=false; else           sb.append(",");          sb.append("p").append(j);        }        sb.append(")\n");        ClassLoader targetTypeCL=targetType.getClassLoader();        if (targetTypeCL == null) {          targetTypeCL=Thread.currentThread().getContextClassLoader();        }        @SuppressWarnings("unchecked") Class<?> cls=((java.util.List<Class<?>>)Utils.eval(targetTypeCL,sb.toString())).get(0);        Constructor<?> con=cls.getConstructor(funcMethod.getDeclaringClass().getInterfaces()[0]);        Function1 func=null;        lambdaFunctionMap.put(targetType,func);        return func.apply(o);      }    }  }  throw generateClassCastException(o,targetType);}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testInitWithFullUpdateIncludePrecommitProvider") private Object[][] testInitWithFullUpdateIncludePrecommitProvider(){  return new Object[][]{{1,true,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("signXML: doc is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  org.w3c.dom.Element root=null;  XMLSignature sig=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);    if (keystore == null) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullkeystore"));    }    PrivateKey privateKey=(PrivateKey)keystore.getPrivateKey(certAlias);    if (privateKey == null) {      SAMLUtilsCommon.debug.error("private key is null");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullprivatekey"));    }    root=doc.getDocumentElement();    if (algorithm == null || algorithm.length() == 0) {      algorithm=getKeyAlgorithm(privateKey);    }    if (!isValidAlgorithm(algorithm)) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidalgorithm"));    }    if (c14nMethod == null || c14nMethod.length() == 0) {      sig=new XMLSignature(doc,"",algorithm);    } else {      if (!isValidCanonicalizationMethod(c14nMethod)) {        throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidCanonicalizationMethod"));      }      sig=new XMLSignature(doc,"",algorithm,c14nMethod);    }    root.appendChild(sig.getElement());    sig.getSignedInfo().addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());    Transforms transforms=new Transforms(doc);    transforms.addTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE);    if (transformAlg != null && transformAlg.length() != 0) {      if (!isValidTransformAlgorithm(transformAlg)) {        throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidTransformAlgorithm"));      }      transforms.addTransform(transformAlg);    }    sig.addDocument("",transforms,digestAlg);    X509Certificate cert=(X509Certificate)keystore.getX509Certificate(certAlias);    sig.addKeyInfo(cert);    sig.sign(privateKey);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return (sig.getElement());}  }
class C{  @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  protected String stop(ContextName cn,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.stop(printWriter,cn,smClient);  return stringWriter.toString();}  }
class C{  public void doClose(CloseReason closeReasonMessage,CloseReason closeReasonLocal){  if (state != State.OPEN) {    return;  }synchronized (stateLock) {    if (state != State.OPEN) {      return;    }    if (log.isDebugEnabled()) {      log.debug(sm.getString("wsSession.doClose",id));    }    try {      wsRemoteEndpoint.setBatchingAllowed(false);    } catch (    IOException e) {      log.warn(sm.getString("wsSession.flushFailOnClose"),e);      fireEndpointOnError(e);    }    state=State.OUTPUT_CLOSED;    sendCloseMessage(closeReasonMessage);    fireEndpointOnClose(closeReasonLocal);  }  IOException ioe=new IOException(sm.getString("wsSession.messageFailed"));  SendResult sr=new SendResult(ioe);  for (  FutureToSendHandler f2sh : futures.keySet()) {    f2sh.onResult(sr);  }}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementType createAuthzDecisionStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementTypeImpl();}  }
class C{  public Cell add(Table element){  childElements.add(element);  return this;}  }
class C{  public void init(){  lastToken=firstToken=null;}  }
class C{  public AccessDeniedException(String file){  super(file);}  }
class C{  public void startAutoBlurUpdate(){  blurController.startBlurAutoUpdate();}  }
class C{  public static SearchResultReference newSearchResultReference(final String uri){  Reject.ifNull(uri);  return new SearchResultReferenceImpl(uri);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierRequestType createRegisterNameIdentifierRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierRequestTypeImpl();}  }
class C{  public static BooleanArgument trustAllArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_TRUSTALL).shortIdentifier(OPTION_SHORT_TRUSTALL).description(INFO_DESCRIPTION_TRUSTALL.get()).buildArgument();}  }
class C{  public boolean beginHasButtonDisplay(ChildDisplayEvent event){  return (buttonOptions != null) && (buttonOptions.length > 0);}  }
class C{  private static void mkdir(String dir) throws IOException {  FileUtils.createDirectory(dir);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  doc=(Document)load("staff",false);  element=doc.getDocumentElement();  state=element.hasAttribute("");  assertFalse("elementhasattribute01",state);}  }
class C{  protected Ellipse2D(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element element2;  Attr attribute;  Attr attributeCloned;  Attr newAttr;  NodeList elementList;  String attrName;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attribute=element.getAttributeNodeNS(nullNS,"street");  attributeCloned=(Attr)attribute.cloneNode(true);  element2=(Element)elementList.item(2);  newAttr=element2.setAttributeNodeNS(attributeCloned);  attrName=newAttr.getNodeName();  attrValue=newAttr.getNodeValue();  assertEquals("elementsetattributenodens02_attrName","street",attrName);  assertEquals("elementsetattributenodens02_attrValue","Yes",attrValue);}  }
class C{  private File retrieveGenerationIdFile(final File directory){  File[] generationIds=directory.listFiles(GENERATION_ID_FILE_FILTER);  return (generationIds != null && generationIds.length > 0) ? generationIds[0] : null;}  }
class C{  public NodeSetDTM(DTMManager dtmManager){  super();  m_manager=dtmManager;}  }
class C{  public void addAttribute(Attribute attr){  if (attr != null) {    attrs.addAttribute(attr);  }}  }
class C{  public void sign(PrivateKey privateKey,X509Certificate cert) throws SAML2Exception {  Element signatureEle=SigManager.getSigInstance().sign(toXMLString(true,true),getID(),privateKey,cert);  signatureString=XMLUtils.print(signatureEle);  signedXMLString=XMLUtils.print(signatureEle.getOwnerDocument().getDocumentElement());  isSigned=true;  makeImmutable();}  }
class C{  protected Connection open() throws SQLException {  if (dbConnection != null)   return (dbConnection);  if (driver == null) {    try {      Class<?> clazz=Class.forName(driverName);      driver=(Driver)clazz.newInstance();    } catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      throw new SQLException(e.getMessage(),e);    }  }  Properties props=new Properties();  if (connectionName != null)   props.put("user",connectionName);  if (connectionPassword != null)   props.put("password",connectionPassword);  dbConnection=driver.connect(connectionURL,props);  if (dbConnection == null) {    throw new SQLException(sm.getString("jdbcRealm.open.invalidurl",driverName,connectionURL));  }  dbConnection.setAutoCommit(false);  return (dbConnection);}  }
class C{  public SplittableRandom(){  long s=defaultGen.getAndAdd(2 * GOLDEN_GAMMA);  this.seed=mix64(s);  this.gamma=mixGamma(s + GOLDEN_GAMMA);}  }
class C{  public TriggerContext(final Context parent,final String trigger){  super(checkNotNull(parent,"Cannot instantiate TriggerContext with null parent Context"),CONTEXT_NAME);  data.put(ATTR_TRIGGER_SOURCE,trigger);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.StatementElement createStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl();}  }
class C{  public void requestSecondsUntilIdleLockout(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT);}  }
class C{  private AttributeParser(String input,char quote,boolean isELIgnored,boolean isDeferredSyntaxAllowedAsLiteral,boolean strict,boolean quoteAttributeEL){  this.input=input;  this.quote=quote;  this.isELIgnored=isELIgnored;  this.isDeferredSyntaxAllowedAsLiteral=isDeferredSyntaxAllowedAsLiteral;  this.strict=strict;  this.quoteAttributeEL=quoteAttributeEL;  this.type=getType(input);  this.size=input.length();  result=new StringBuilder(size);}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decodeText(pString);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public int showSaveDialog(Component parent) throws HeadlessException {  setDialogType(SAVE_DIALOG);  return showDialog(parent,null);}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  public SOAPMessage secureRequest(ResourceOffering offering,List credentials,String serviceType,SOAPMessage soapMessage,Map sharedData) throws SOAPBindingException {  Utils.debug.message("MessageProcessor.secureRequest:Init");  try {    SOAPHeader header=addCorrelationHeader(soapMessage,null);    QueryResponse discoResponse=getWebserviceOffering(offering,credentials,serviceType);    if (Utils.debug.messageEnabled()) {      Utils.debug.message("MessageProcessor.secureRequest: " + "Discovery Response: " + discoResponse.toString());    }    ResourceOffering serviceOffering=(ResourceOffering)discoResponse.getResourceOffering().get(0);    List creds=discoResponse.getCredentials();    String securityProfile=processResourceOffering(serviceOffering);    SecurityAssertion securityAssertion=null;    if (securityProfile.equals(Message.NULL_SAML) || securityProfile.equals(Message.TLS_SAML) || securityProfile.equals(Message.CLIENT_TLS_SAML)|| securityProfile.equals(Message.NULL_BEARER)|| securityProfile.equals(Message.TLS_BEARER)|| securityProfile.equals(Message.CLIENT_TLS_BEARER)|| securityProfile.equals(Message.NULL_SAML_WSF11)|| securityProfile.equals(Message.TLS_SAML_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_SAML_WSF11)|| securityProfile.equals(Message.NULL_BEARER_WSF11)|| securityProfile.equals(Message.TLS_BEARER_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_BEARER_WSF11)) {      if (creds != null && creds.size() != 0) {        securityAssertion=(SecurityAssertion)creds.get(0);        securityAssertion.addToParent(header);      }    }    if (securityProfile.equals(Message.NULL_SAML) || securityProfile.equals(Message.TLS_SAML) || securityProfile.equals(Message.CLIENT_TLS_SAML)|| securityProfile.equals(Message.NULL_X509)|| securityProfile.equals(Message.TLS_X509)|| securityProfile.equals(Message.CLIENT_TLS_X509)|| securityProfile.equals(Message.NULL_SAML_WSF11)|| securityProfile.equals(Message.TLS_SAML_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_SAML_WSF11)|| securityProfile.equals(Message.NULL_X509_WSF11)|| securityProfile.equals(Message.TLS_X509_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_X509_WSF11)) {      soapMessage=signMessage(soapMessage,securityProfile,securityAssertion);    }    if (Utils.debug.messageEnabled()) {      Utils.debug.message("MessageProcessor.secureRequest: " + XMLUtils.print(soapMessage.getSOAPPart().getEnvelope()));    }    return soapMessage;  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.secureRequest: Failure in " + "Securing the request.",ex);    throw new SOAPBindingException(Utils.bundle.getString("secureRequestFailed"));  }}  }
class C{  @Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {  Foo foo=findByUUID_G(uuid,groupId);  return remove(foo);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens01.class,args);}  }
class C{  private boolean expand_to_room_doors(MazeListElement p_element){  int layer_no=p_element.next_room.get_layer();  boolean layer_active=art_ctrl.layer_active[layer_no];  if (!layer_active) {    if (r_board.layer_structure.is_signal(layer_no)) {      return true;    }  }  double half_width=art_ctrl.compensated_trace_half_width[layer_no];  boolean curr_door_is_small=false;  if (p_element.door instanceof ExpandDoor) {    double half_width_add=half_width + ArtEngine.TRACE_WIDTH_TOLERANCE;    ExpandDoor curr_door=(ExpandDoor)p_element.door;    if (art_ctrl.with_neckdown) {      double neck_down_half_width=check_neck_down_at_dest_pin(p_element.next_room);      if (neck_down_half_width > 0) {        half_width_add=Math.min(half_width_add,neck_down_half_width);        half_width=half_width_add;      }    }    curr_door_is_small=door_is_small(curr_door,2 * half_width_add);  }  art_engine.complete_neigbour_rooms(p_element.next_room);  PlaPointFloat shape_entry_middle=p_element.shape_entry.point_a.middle_point(p_element.shape_entry.point_b);  if (art_ctrl.with_neckdown && p_element.door instanceof ExpandDoorItem) {    BrdItem start_item=((ExpandDoorItem)p_element.door).item;    if (start_item instanceof board.items.BrdAbitPin) {      double neckdown_half_width=((board.items.BrdAbitPin)start_item).get_trace_neckdown_halfwidth(layer_no);      if (neckdown_half_width > 0) {        half_width=Math.min(half_width,neckdown_half_width);      }    }  }  boolean next_room_is_thick=true;  if (p_element.next_room instanceof ExpandRoomObstacle) {    next_room_is_thick=room_shape_is_thick((ExpandRoomObstacle)p_element.next_room);  } else {    ShapeTile next_room_shape=p_element.next_room.get_shape();    if (next_room_shape.min_width() < 2 * half_width) {      next_room_is_thick=false;    } else     if (!p_element.already_checked && p_element.door.get_dimension().is_line() && !curr_door_is_small) {      PlaPointFloat[] nearest_points=next_room_shape.nearest_border_points_approx(shape_entry_middle,2);      if (nearest_points.length < 2) {        System.out.println("MazeSearchAlgo.expand_to_room_doors: nearest_points.length == 2 expected");        next_room_is_thick=false;      } else {        double curr_dist=nearest_points[1].distance(shape_entry_middle);        next_room_is_thick=(curr_dist > half_width + 1);      }    }  }  if (!layer_active && p_element.door instanceof ExpandDrill) {    PlaPointInt drill_location=((ExpandDrill)p_element.door).location;    ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.CONDUCTION);    Set<BrdItem> picked_items=r_board.pick_items(drill_location,layer_no,filter);    for (    BrdItem curr_item : picked_items) {      if (!curr_item.contains_net(art_ctrl.net_no))       return true;    }  }  boolean something_expanded=false;  if (expand_to_target_doors(p_element,next_room_is_thick,curr_door_is_small,shape_entry_middle)) {    something_expanded=true;  }  if (!layer_active) {    return true;  }  int ripup_costs=0;  if (p_element.next_room instanceof ExpandRoomFreespace) {    if (!p_element.already_checked) {      if (curr_door_is_small) {        boolean enter_through_small_door=false;        if (next_room_is_thick) {          enter_through_small_door=check_leaving_ripped_item(p_element);        }        if (!enter_through_small_door) {          return something_expanded;        }      }    }  } else   if (p_element.next_room instanceof ExpandRoomObstacle) {    ExpandRoomObstacle obstacle_room=(ExpandRoomObstacle)p_element.next_room;    if (!p_element.already_checked) {      boolean room_rippable=false;      if (art_ctrl.ripup_allowed) {        ripup_costs=check_ripup(p_element,obstacle_room.get_item(),curr_door_is_small);        room_rippable=(ripup_costs >= 0);      }      if (ripup_costs != ALREADY_RIPPED_COSTS && next_room_is_thick) {        BrdItem obstacle_item=obstacle_room.get_item();        if (!curr_door_is_small && art_ctrl.max_shove_trace_recursion_depth > 0 && obstacle_item instanceof board.items.BrdTracep) {          if (!shove_trace_room(p_element,obstacle_room)) {            if (ripup_costs > 0) {              MazeListElement new_element=new MazeListElement(p_element.door,p_element.section_no_of_door,p_element.backtrack_door,p_element.section_no_of_backtrack_door,p_element.expansion_value + ripup_costs,p_element.sorting_value + ripup_costs,p_element.next_room,p_element.shape_entry,true,p_element.adjustment,true);              maze_expansion_list.add(new_element);            }            return something_expanded;          }        }      }      if (!room_rippable) {        return true;      }    }  }  for (  ExpandDoor to_door : p_element.next_room.get_doors()) {    if (to_door == p_element.door) {      continue;    }    if (expand_to_door(to_door,p_element,ripup_costs,next_room_is_thick,MazeAdjustment.NONE)) {      something_expanded=true;    }  }  if (art_ctrl.vias_allowed && !(p_element.door instanceof ExpandDrill)) {    if ((something_expanded || next_room_is_thick) && p_element.next_room instanceof ExpandRoomFreespaceComplete) {      Collection<ExpandDrillPage> overlapping_drill_pages=art_engine.drill_page_array.overlapping_pages(p_element.next_room.get_shape());{        for (        ExpandDrillPage to_drill_page : overlapping_drill_pages) {          expand_to_drill_page(to_drill_page,p_element);          something_expanded=true;        }      }    } else     if (p_element.next_room instanceof ExpandRoomObstacle) {      BrdItem curr_obstacle_item=((ExpandRoomObstacle)p_element.next_room).get_item();      if (curr_obstacle_item instanceof board.items.BrdAbitVia) {        board.items.BrdAbitVia curr_via=(board.items.BrdAbitVia)curr_obstacle_item;        ExpandDrill via_drill_info=curr_via.get_autoroute_drill_info(art_engine.art_search_tree);        expand_to_drill(via_drill_info,p_element,ripup_costs);      }    }  }  return something_expanded;}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(normalize01.class,args);}  }
class C{  public List<CollectEntity> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public SSOToken createSSOToken(javax.servlet.http.HttpServletRequest request) throws UnsupportedOperationException, SSOException {  for (  SSOProviderPlugin ssoProvider : getSsoProviderPlugins()) {    if (ssoProvider.isApplicable(request)) {      return ssoProvider.createSSOToken(request);    }  }  if (dProProvider != null)   return (dProProvider.createSSOToken(request)); else   return (grappaProvider.createSSOToken(request));}  }
class C{  @Override public void addWrapperListener(String listener){synchronized (wrapperListenersLock) {    String results[]=new String[wrapperListeners.length + 1];    for (int i=0; i < wrapperListeners.length; i++)     results[i]=wrapperListeners[i];    results[wrapperListeners.length]=listener;    wrapperListeners=results;  }  fireContainerEvent("addWrapperListener",listener);}  }
class C{  public void applyPattern(String pattern){  applyPattern(pattern,false);}  }
class C{  public boolean isReadOnly(String beanName){  return true;}  }
class C{  @NonNull public static Interpolator path(int controlX,int controlY){  return PathInterpolatorCompat.create(controlX,controlY);}  }
class C{  private TemplateEntry templateEntry(String... values){  TemplateEntry templateEntry=mock(TemplateEntry.class);  List<TemplateValue> templateValues=new ArrayList<>();  for (  String value : values) {    templateValues.add(templateValue(value));  }  when(templateEntry.getValues(any(AttributeType.class))).thenReturn(templateValues);  return templateEntry;}  }
class C{  public String createDataSourceRealm(String parent,String dataSourceName,String roleNameCol,String userCredCol,String userNameCol,String userRoleTable,String userTable) throws Exception {  DataSourceRealm realm=new DataSourceRealm();  realm.setDataSourceName(dataSourceName);  realm.setRoleNameCol(roleNameCol);  realm.setUserCredCol(userCredCol);  realm.setUserNameCol(userNameCol);  realm.setUserRoleTable(userRoleTable);  realm.setUserTable(userTable);  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  container.setRealm(realm);  ObjectName oname=realm.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  private void initializeInternal(TemplateFile templateFile,String[] arguments,int lineNumber) throws InitializationException {  random=templateFile.getRandom();  if (arguments.length != 1) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,1,arguments.length);    throw new InitializationException(message);  }  try {    percentage=Integer.parseInt(arguments[0]);    if (percentage < 0) {      LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(percentage,0,getName(),lineNumber);      throw new InitializationException(message);    } else     if (percentage > 100) {      LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_ABOVE_UPPER_BOUND.get(percentage,100,getName(),lineNumber);      throw new InitializationException(message);    }  } catch (  NumberFormatException nfe) {    LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[0],getName(),lineNumber);    throw new InitializationException(message);  }}  }
class C{  public boolean update(Long attributeID,String attributeName,Long appID,Long dataTypeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (attributeName != null) {    args.put(KEY_EXTERNALATTRIBUTENAME,attributeName);  }  if (appID != null) {    args.put(KEY_APPID,appID);  }  if (dataTypeID != null) {    args.put(KEY_DATATYPEID,dataTypeID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_EXTERNALATTRIBUTEID + "=" + attributeID,null) > 0;  }  return false;}  }
class C{  @Override public void startActivityForResult(final Intent intent,final int requestCode){  delegate.startActivityForResult(intent,requestCode);}  }
class C{  public void removeAttribute(String attrName) throws SMSException, SSOException {  validatePluginConfig();  SMSEntry e=pc.getSMSEntry();  SMSUtils.removeAttribute(e,attrName);  saveSMSEntry(e);}  }
class C{  public SampleConfig convert(){  String apiName=apiaryConfig.getApiName();  String apiVersion=typeNameGenerator.getApiVersion(apiaryConfig.getApiVersion());  Map<String,MethodInfo> methods=new HashMap<String,MethodInfo>();  for (  Method method : this.methods) {    methods.put(method.getName(),createMethod(method));  }  String apiTypeName=typeNameGenerator.getApiTypeName(apiName);  return SampleConfig.newBuilder().apiTitle(apiaryConfig.getApiTitle()).apiName(apiName).apiVersion(apiVersion).apiTypeName(apiTypeName).packagePrefix(typeNameGenerator.getPackagePrefix(apiName,apiVersion)).methods(methods).authType(apiaryConfig.getAuthType()).authInstructionsUrl(apiaryConfig.getAuthInstructionsUrl()).build();}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  boolean savedIsSame=m_isSameContext;  m_isSameContext=false;  pred.callVisitors(owner,this);  m_isSameContext=savedIsSame;  return false;}  }
class C{  public boolean isDefaultButton(){  JRootPane root=SwingUtilities.getRootPane(this);  if (root != null) {    return root.getDefaultButton() == this;  }  return false;}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public boolean containsPoint(Vector point){  if (point == null) {    return false;  }  Vector diff1=point.subtract(startPoint);  if (diff1.get(0) < 0 || diff1.get(1) < 0 || diff1.get(2) < 0) {    return false;  }  Vector diff2=endPoint.subtract(point);  if (diff2.get(0) < 0 || diff2.get(1) < 0 || diff2.get(2) < 0) {    return false;  }  return true;}  }
class C{  float metrics(FontMetricsInt fmi){  return measure(mLen,false,fmi);}  }
class C{  public static String join(CharSequence delimiter,int[] tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  protected boolean synthesizedElement(Element elem){  if (matchNameAttribute(elem.getAttributes(),HTML.Tag.IMPLIED)) {    return true;  }  return false;}  }
class C{  public BandedSampleModel(int dataType,int w,int h,int scanlineStride,int bankIndices[],int bandOffsets[]){  super(dataType,w,h,1,scanlineStride,bankIndices,bandOffsets);}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException("c == null");  if (c == this)   throw new IllegalArgumentException("c == this");  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  protected void installNormalBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    setBorderToNormal(component);  }}  }
class C{  public boolean normalize(ShapeTileOctagon p_clip_shape){  return normalize_recu(p_clip_shape,10);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  int returnVal;  String path=field.getText();  if (path != null && path.trim().length() > 0) {    File f=new File(path);    while (f != null && !f.isDirectory()) {      f=f.getParentFile();    }    if (f != null) {      fc.setCurrentDirectory(f);    }  }switch (type) {case LOCATION_DIRECTORY:    returnVal=fc.showOpenDialog(parent);  break;case OPEN_LDIF_FILE:returnVal=fc.showOpenDialog(parent);break;case OPEN_ZIP_FILE:returnVal=fc.showOpenDialog(parent);break;case OPEN_GENERIC_FILE:returnVal=fc.showOpenDialog(parent);break;case CREATE_GENERIC_FILE:returnVal=fc.showSaveDialog(parent);break;case CREATE_LDIF_FILE:returnVal=fc.showSaveDialog(parent);break;case CREATE_DIRECTORY:returnVal=fc.showSaveDialog(parent);break;default :throw new RuntimeException("Unknown type: " + type);}if (returnVal == JFileChooser.APPROVE_OPTION) {File file=fc.getSelectedFile();field.setText(file.getAbsolutePath());field.requestFocusInWindow();field.selectAll();fieldUpdated();}}  }
class C{  private void sendModeMessage(){  currWSstateLock.lock();  currWSstate=WSstate.WS_MODE_SWITCHED;  currWSstateLock.unlock();  String instrumentString=getInstrumentString(instrumentList);  String msg="{\"a\": \"mode\", \"v\": [\"" + ZStreamingConfig.getStreamingQuoteMode() + "\", ["+ instrumentString+ "]]}";  System.out.println("WebsocketThread.sendModeMessage(): WS mode msg: " + msg);  clientEndPoint.sendMessage(msg);  fireDataMissTimerOnWSsubscribe();}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date firstTime,long period){  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,firstTime.getTime(),period);}  }
class C{  public static long parseLong(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  return l;}  }
class C{  public void updateEntityConfig(String realm,String name,String entityId) throws SAML2MetaException, JAXBException {  String classMethod="SAML2COTUtils.updateEntityConfig: ";  SAML2MetaManager metaManager=null;  if (callerSession == null) {    metaManager=new SAML2MetaManager();  } else {    metaManager=new SAML2MetaManager(callerSession);  }  ObjectFactory objFactory=new ObjectFactory();  EntityDescriptorElement edes=metaManager.getEntityDescriptor(realm,entityId);  if (edes == null) {    debug.error(classMethod + "No such entity: " + entityId);    String[] data={realm,entityId};    throw new SAML2MetaException("entityid_invalid",data);  }  boolean isAffiliation=false;  if (metaManager.getAffiliationDescriptor(realm,entityId) != null) {    isAffiliation=true;  }  if (debug.messageEnabled()) {    debug.message(classMethod + "is " + entityId+ " in realm "+ realm+ " an affiliation? "+ isAffiliation);  }  EntityConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);  if (eConfig == null) {    BaseConfigType bctype=null;    AttributeType atype=objFactory.createAttributeType();    atype.setName(SAML2Constants.COT_LIST);    atype.getValue().add(name);    EntityConfigElement ele=objFactory.createEntityConfigElement();    ele.setEntityID(entityId);    ele.setHosted(false);    if (isAffiliation) {      bctype=objFactory.createAffiliationConfigElement();      bctype.getAttribute().add(atype);      ele.setAffiliationConfig(bctype);    } else {      List ll=ele.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();      List list=edes.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();      for (Iterator iter=list.iterator(); iter.hasNext(); ) {        Object obj=iter.next();        if (obj instanceof SPSSODescriptorElement) {          bctype=objFactory.createSPSSOConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof IDPSSODescriptorElement) {          bctype=objFactory.createIDPSSOConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof XACMLPDPDescriptorElement) {          bctype=objFactory.createXACMLPDPConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof XACMLAuthzDecisionQueryDescriptorElement) {          bctype=objFactory.createXACMLAuthzDecisionQueryConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof AttributeAuthorityDescriptorElement) {          bctype=objFactory.createAttributeAuthorityConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof AttributeQueryDescriptorElement) {          bctype=objFactory.createAttributeQueryConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        } else         if (obj instanceof AuthnAuthorityDescriptorElement) {          bctype=objFactory.createAuthnAuthorityConfigElement();          bctype.getAttribute().add(atype);          ll.add(bctype);        }      }    }    metaManager.setEntityConfig(realm,ele);  } else {    boolean needToSave=true;    List elist=null;    if (isAffiliation) {      AffiliationConfigElement affiliationCfgElm=metaManager.getAffiliationConfig(realm,entityId);      elist=new ArrayList();      elist.add(affiliationCfgElm);    } else {      elist=eConfig.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();    }    for (Iterator iter=elist.iterator(); iter.hasNext(); ) {      boolean foundCOT=false;      BaseConfigType bConfig=(BaseConfigType)iter.next();      List list=bConfig.getAttribute();      for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {        AttributeType avp=(AttributeType)iter2.next();        if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {          foundCOT=true;          List avpl=avp.getValue();          if (avpl.isEmpty() || !containsValue(avpl,name)) {            avpl.add(name);            needToSave=true;            break;          }        }      }      if (!foundCOT) {        AttributeType atype=objFactory.createAttributeType();        atype.setName(SAML2Constants.COT_LIST);        atype.getValue().add(name);        list.add(atype);        needToSave=true;      }    }    if (needToSave) {      metaManager.setEntityConfig(realm,eConfig);    }  }}  }
class C{  private String generateConflictRDN(String entryUUID,String rdn){  return "entryuuid=" + entryUUID + "+"+ rdn;}  }
class C{  public static void main(final String[] args) throws Exception {  System.out.println(HardWare.MAC);  System.out.println(getMacAddress());}  }
class C{  public Set search2(String tokenID,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::search dn: " + startDN + " filter: "+ filter);  }  return (SMSEntry.search(getToken(tokenID),startDN,filter,numOfEntries,timeLimit,sortResults,ascendingOrder));}  }
class C{  protected Compression(int value){  super(value);}  }
class C{  public boolean can_pull_tight(){  return pull_tight;}  }
class C{  public void addAttribute(final String key,final Object value){  final Object object=getComponent().getAttributes().get(key);  if (object != null) {    getComponent().getAttributes().put(key,value);  }}  }
class C{  @Override public void addCookie(Cookie cookie){  if (!included)   ((HttpServletResponse)getResponse()).addCookie(cookie);}  }
class C{  public void replace(String valueString){  replace(ByteString.valueOfUtf8(valueString));}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){synchronized (comp.getTreeLock()) {    if (constraints == null) {      constraints="";    }    if (constraints instanceof String) {      addLayoutComponent((String)constraints,comp);    } else {      throw new IllegalArgumentException("cannot add to layout: constraint must be a string");    }  }}  }
class C{  private void authorizeCallback(final AuthorizeCallback callback){  final String responseAuthzID=callback.getAuthorizationID();  if (authEntry == null) {    final String authid=callback.getAuthenticationID();    try {      authEntry=identityMapper.getEntryForID(authid);      if (authEntry == null) {        setCallbackMsg(ERR_SASL_AUTHENTRY_NO_MAPPED_ENTRY.get(authid));        callback.setAuthorized(false);        return;      }    } catch (    final DirectoryException de) {      logger.traceException(de);      setCallbackMsg(ERR_SASL_CANNOT_MAP_AUTHENTRY.get(authid,de.getMessage()));      callback.setAuthorized(false);      return;    }    userName=authid;  }  if (responseAuthzID.length() == 0) {    setCallbackMsg(ERR_SASLDIGESTMD5_EMPTY_AUTHZID.get());    callback.setAuthorized(false);  } else   if (!responseAuthzID.equals(userName)) {    final String lowerAuthzID=toLowerCase(responseAuthzID);    if (lowerAuthzID.startsWith("dn:")) {      authzDNCheck(callback);    } else {      authzIDCheck(callback);    }  } else {    authzEntry=authEntry;    callback.setAuthorized(true);  }}  }
class C{  public static String formatDateTime(Date time,Locale locale){  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.SHORT,locale);  return dateFormat.format(time);}  }
class C{  public boolean containsAttribute(Object name,Object value){  return attributes.containsAttribute(name,value);}  }
class C{  public Fireball(Group parent,String SVGData,float xPos,float yPos,float xVel,int direction,Image sprite,Image... blastSprites){  super(SVGData,xPos,yPos + (8.57f * REL_HEIGHT),direction == 1 ? xVel : -xVel,0,sprite);  playerStates.addAll(Arrays.asList(blastSprites));  this.parent=parent;  parent.getChildren().addAll(spriteBounds,spriteFrame);  accel=(float)(0.186 * REL_HEIGHT) * (direction == 1 ? 1 : -1);  spriteFrame.setScaleX(direction);  this.stageFloorBase=SpriteHandler.getCurrentCast().get(1);}  }
class C{  public final void testDEFAULTmgfName(){  assertEquals("MGF1",PSSParameterSpec.DEFAULT.getMGFAlgorithm());}  }
class C{  protected void register(String ssoId,Principal principal,String authType,String username,String password){  if (containerLog.isDebugEnabled()) {    containerLog.debug(sm.getString("singleSignOn.debug.register",ssoId,principal != null ? principal.getName() : "",authType));  }  cache.put(ssoId,new SingleSignOnEntry(principal,authType,username,password));}  }
class C{  public HostPort hostPort(boolean allowWS) throws ParseException {  if (debug)   dbg_enter("hostPort");  try {    Host host=this.host();    HostPort hp=new HostPort();    hp.setHost(host);    if (allowWS)     lexer.SPorHT();    if (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);switch (la) {case ':':        lexer.consume(1);      if (allowWS)       lexer.SPorHT();    try {      String port=lexer.number();      hp.setPort(Integer.parseInt(port));    } catch (    NumberFormatException nfe) {      throw new ParseException(lexer.getBuffer() + " :Error parsing port ",lexer.getPtr());    }  break;case ',':case ';':case '?':case '>':case ' ':case '\t':case '\r':case '\n':case '/':break;case '%':if (stripAddressScopeZones) {break;}default :if (!allowWS) {throw new ParseException(lexer.getBuffer() + " Illegal character in hostname:" + lexer.lookAhead(0),lexer.getPtr());}}}return hp;}  finally {if (debug) dbg_leave("hostPort");}}  }
class C{  public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic,TransportGuarantee transportGuarantee,String... rolesAllowed){  if (rolesAllowed != null && rolesAllowed.length > 0 && EmptyRoleSemantic.DENY.equals(emptyRoleSemantic)) {    throw new IllegalArgumentException(lStrings.getString("httpConstraintElement.invalidRolesDeny"));  }  this.emptyRoleSemantic=emptyRoleSemantic;  this.transportGuarantee=transportGuarantee;  this.rolesAllowed=rolesAllowed;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public String toString(){  return "[id=" + id + ",offset="+ offset+ ",length="+ length+ "]";}  }
class C{  public static boolean isMPEGFrame(ByteBuffer bb){  int position=bb.position();  return (((bb.get(position) & SYNC_BYTE1) == SYNC_BYTE1) && ((bb.get(position + 1) & SYNC_BYTE2) == SYNC_BYTE2) && ((bb.get(position + 2) & SYNC_BIT_ANDSAMPING_BYTE3) != SYNC_BIT_ANDSAMPING_BYTE3));}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s10_one_commit_no_tag_repository();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public Subject createSubject(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.SUBJECT,xml);  if (obj == null) {    return new SubjectImpl(xml);  } else {    return (Subject)obj;  }}  }
class C{  public int hashCode(){  return selectedOrgDNs.hashCode();}  }
class C{  public void initializeUserPlugins(Set<PluginType> pluginTypes) throws ConfigException, InitializationException {  for (  String pluginName : pluginRootConfig.listPlugins()) {    PluginCfg pluginConfiguration=pluginRootConfig.getPlugin(pluginName);    pluginConfiguration.addChangeListener(this);    if (!pluginConfiguration.isEnabled()) {      continue;    }    HashSet<PluginType> initTypes=new HashSet<>();    for (    PluginCfgDefn.PluginType pluginType : pluginConfiguration.getPluginType()) {      PluginType t=getPluginType(pluginType);      if (pluginTypes == null || pluginTypes.contains(t)) {        initTypes.add(t);      }    }    if (initTypes.isEmpty()) {      continue;    }    try {      DirectoryServerPlugin<? extends PluginCfg> plugin=loadPlugin(pluginConfiguration.getJavaClass(),initTypes,pluginConfiguration,true);      registerPlugin(plugin,pluginConfiguration.dn(),initTypes);    } catch (    InitializationException ie) {      logger.error(ie.getMessageObject());      continue;    }  }}  }
class C{  public FileUpload(){  super();}  }
class C{  public static boolean needPolicyEvalLookup(){  return policyEvalLookup;}  }
class C{  public void testField(){  checkDHPrivateKey key=new checkDHPrivateKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),2211791113380396553L);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_04(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbAN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};  ByteBuffer[] bbN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bN,bbA,0,3);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbAN,0,3);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbN,0,0);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bN,bbN,0,0);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    SctpTest.fail(s);  }}  }
class C{  protected void waitForSendAllSessions(long beforeSendTime){  long reqStart=System.currentTimeMillis();  long reqNow=reqStart;  boolean isTimeout=false;  if (getStateTransferTimeout() > 0) {    do {      try {        Thread.sleep(100);      } catch (      Exception sleep) {      }      reqNow=System.currentTimeMillis();      isTimeout=((reqNow - reqStart) > (1000L * getStateTransferTimeout()));    } while ((!getStateTransfered()) && (!isTimeout) && (!isNoContextManagerReceived()));  } else {    if (getStateTransferTimeout() == -1) {      do {        try {          Thread.sleep(100);        } catch (        Exception sleep) {        }      } while ((!getStateTransfered()) && (!isNoContextManagerReceived()));      reqNow=System.currentTimeMillis();    }  }  if (isTimeout) {    counterNoStateTransfered++;    log.error(sm.getString("deltaManager.noSessionState",getName(),new Date(beforeSendTime),Long.valueOf(reqNow - beforeSendTime)));  } else   if (isNoContextManagerReceived()) {    if (log.isWarnEnabled())     log.warn(sm.getString("deltaManager.noContextManager",getName(),new Date(beforeSendTime),Long.valueOf(reqNow - beforeSendTime)));  } else {    if (log.isInfoEnabled())     log.info(sm.getString("deltaManager.sessionReceived",getName(),new Date(beforeSendTime),Long.valueOf(reqNow - beforeSendTime)));  }}  }
class C{  public RedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isInteger(){  return type == INTEGER;}  }
class C{  public boolean isPersonalQuestion(){  return (dataStatus == PERSONAL_ON || dataStatus == PERSONAL_OFF);}  }
class C{  private TestParentCfgClient createTestParent(ManagementContext context,String name) throws Exception {  ManagedObject<RootCfgClient> root=context.getRootConfigurationManagedObject();  return root.createChild(TestCfg.getTestOneToManyParentRelationDefinition(),TestParentCfgDefn.getInstance(),name,null).getConfiguration();}  }
class C{  public Builder withColor(Iterable<?> colors) throws IllegalArgumentException {  Validate.notNull(colors,"Cannot have null colors");  ImmutableList.Builder<Color> list=this.colors;  for (  Object color : colors) {    if (!(color instanceof Color)) {      throw new IllegalArgumentException(color + " is not a Color in " + colors);    }    list.add((Color)color);  }  return this;}  }
class C{  void reuse(){  pos=0;}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  private ExtOp(EnumTargetOperator op,Set<String> extOpOIDs){  this.extOpOIDs=extOpOIDs;  this.op=op;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionElement createMobileNetworkNoEncryptionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionElementImpl();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"HTML_ENTITY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"URL\" TEXT,"+ "\"TYPE\" TEXT,"+ "\"TITLE\" TEXT,"+ "\"HTML\" TEXT,"+ "\"SUMMARY\" TEXT,"+ "\"COLLECT\" TEXT,"+ "\"HIRE_DATE\" INTEGER);");}  }
class C{  protected void unconfigureEditor(){  if (focusListener != null) {    editor.removeFocusListener(focusListener);  }  editor.removePropertyChangeListener(propertyChangeListener);  editor.removeFocusListener(getHandler());  comboBox.getEditor().removeActionListener(getHandler());}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public JsonValue fromToken(Token token){  if (token == null) {    return null;  }  String data=blobUtils.getBlobAsString(token);  if (data == null) {    return null;  }  JsonValue r;  try {    r=new JsonValue(serialisation.deserialise(data,Map.class));  } catch (  IllegalStateException e) {    return null;  }  return r;}  }
class C{  public NSSet(NSObject... objects){  set=new LinkedHashSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  public synchronized void putAll(Map t){  Iterator i=t.entrySet().iterator();  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  public static String format(final String value,String... params){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  Pattern p=Pattern.compile("\\{(\\w+)\\}");  Matcher m=p.matcher(value);  String result=value;  while (m.find()) {    int paramNumber=Integer.parseInt(m.group(1));    if (params == null || paramNumber >= params.length) {      throw new IllegalArgumentException("params does not have value for " + m.group());    }    result=result.replace(m.group(),params[paramNumber]);  }  return result;}  }
class C{  public void preSingleLogoutProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding) throws SAML2Exception {  return;}  }
class C{  public AMPreCallBackException(SSOToken token,String errorCode){  super(token,errorCode);}  }
class C{  public void nodeChanged(TreeNode node){  if (listenerList != null && node != null) {    TreeNode parent=node.getParent();    if (parent != null) {      int anIndex=parent.getIndex(node);      if (anIndex != -1) {        int[] cIndexs=new int[1];        cIndexs[0]=anIndex;        nodesChanged(parent,cIndexs);      }    } else     if (node == getRoot()) {      nodesChanged(node,null);    }  }}  }
class C{  void ensureCapacity(){  if (_count == 0) {    _offsets=new int[InitialSize];    _scopeActions=new ScopeAction[InitialSize];    _localSymInfos=new LocalSymInfo[InitialSize];  } else   if (_count == _offsets.length) {    final int newSize=_count * 2;    _offsets=Arrays.copyOf(_offsets,newSize);    _scopeActions=Arrays.copyOf(_scopeActions,newSize);    _localSymInfos=Arrays.copyOf(_localSymInfos,newSize);  }}  }
class C{  public void releaseFormFieldFromWidgetAnnotation(){  PdfDictionary annotDict=getPdfObject();  for (  PdfName entry : widgetEntries) {    annotDict.remove(entry);  }  PdfDictionary parent=annotDict.getAsDictionary(PdfName.Parent);  if (parent != null && annotDict.size() == 1) {    PdfArray kids=parent.getAsArray(PdfName.Kids);    kids.remove(annotDict.getIndirectReference());    if (kids.size() == 0) {      parent.remove(PdfName.Kids);    }  }}  }
class C{  private boolean conditionM0(String value,int index){  if (charAt(value,index + 1) == 'M') {    return true;  }  return contains(value,index - 1,3,"UMB") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,"ER"));}  }
class C{  public DynamicGroupMemberList(DN groupDN,Set<LDAPURL> memberURLs,DN baseDN,SearchScope scope,SearchFilter filter) throws DirectoryException {  this.groupDN=groupDN;  this.memberURLs=memberURLs;  this.baseDN=baseDN;  this.filter=filter;  if (scope == null) {    this.scope=SearchScope.WHOLE_SUBTREE;  } else {    this.scope=scope;  }  searchesCompleted=false;  resultQueue=new LinkedBlockingQueue<>(10);  LinkedHashMap<DN,LinkedList<LDAPURL>> baseDNs=new LinkedHashMap<>();  for (  LDAPURL memberURL : memberURLs) {    DN urlBaseDN=memberURL.getBaseDN();    if (baseDN != null) {      if (baseDN.isSubordinateOrEqualTo(urlBaseDN)) {        urlBaseDN=baseDN;      } else       if (!urlBaseDN.isSubordinateOrEqualTo(baseDN)) {        continue;      }    }    if (baseDNs.isEmpty()) {      baseDNs.put(urlBaseDN,newLinkedList(memberURL));    } else {      LinkedList<LDAPURL> urlList=baseDNs.get(urlBaseDN);      if (urlList == null) {        boolean found=false;        Iterator<DN> iterator=baseDNs.keySet().iterator();        while (iterator.hasNext()) {          DN existingBaseDN=iterator.next();          if (urlBaseDN.isSubordinateOrEqualTo(existingBaseDN)) {            urlList=baseDNs.get(existingBaseDN);            urlList.add(memberURL);            found=true;            break;          } else           if (existingBaseDN.isSubordinateOrEqualTo(urlBaseDN)) {            urlList=baseDNs.get(existingBaseDN);            urlList.add(memberURL);            iterator.remove();            baseDNs.put(urlBaseDN,urlList);            found=true;            break;          }        }        if (!found) {          baseDNs.put(urlBaseDN,newLinkedList(memberURL));        }      } else {        urlList.add(memberURL);      }    }  }  LinkedHashMap<DN,SearchFilter> searchMap=new LinkedHashMap<>();  for (  DN urlBaseDN : baseDNs.keySet()) {    LinkedList<LDAPURL> urlList=baseDNs.get(urlBaseDN);    LinkedHashSet<SearchFilter> urlFilters=new LinkedHashSet<>();    for (    LDAPURL url : urlList) {      urlFilters.add(url.getFilter());    }    SearchFilter combinedFilter;    if (filter == null) {      if (urlFilters.size() == 1) {        combinedFilter=urlFilters.iterator().next();      } else {        combinedFilter=SearchFilter.createORFilter(urlFilters);      }    } else {      if (urlFilters.size() == 1) {        SearchFilter urlFilter=urlFilters.iterator().next();        if (urlFilter.equals(filter)) {          combinedFilter=filter;        } else {          LinkedHashSet<SearchFilter> filterSet=new LinkedHashSet<>();          filterSet.add(filter);          filterSet.add(urlFilter);          combinedFilter=SearchFilter.createANDFilter(filterSet);        }      } else {        if (urlFilters.contains(filter)) {          combinedFilter=filter;        } else {          LinkedHashSet<SearchFilter> filterSet=new LinkedHashSet<>();          filterSet.add(filter);          filterSet.add(SearchFilter.createORFilter(urlFilters));          combinedFilter=SearchFilter.createANDFilter(filterSet);        }      }    }    searchMap.put(urlBaseDN,combinedFilter);  }  DN[] baseDNArray=new DN[baseDNs.size()];  SearchFilter[] filterArray=new SearchFilter[baseDNArray.length];  LDAPURL[][] urlArray=new LDAPURL[baseDNArray.length][];  Iterator<DN> iterator=baseDNs.keySet().iterator();  for (int i=0; i < baseDNArray.length; i++) {    baseDNArray[i]=iterator.next();    filterArray[i]=searchMap.get(baseDNArray[i]);    LinkedList<LDAPURL> urlList=baseDNs.get(baseDNArray[i]);    urlArray[i]=new LDAPURL[urlList.size()];    int j=0;    for (    LDAPURL url : urlList) {      urlArray[i][j++]=url;    }  }  DynamicGroupSearchThread searchThread=new DynamicGroupSearchThread(this,baseDNArray,filterArray,urlArray);  searchThread.start();}  }
class C{  public FSPreLoginException(Throwable t,String msg){  super(t,msg);}  }
class C{  public boolean isOffRoute(Position position,RouteLeg route) throws ServicesException, TurfException {  for (int stepIndex=0; stepIndex < route.getSteps().size(); stepIndex++) {    if (isInStep(position,route,stepIndex)) {      return false;    }  }  return true;}  }
class C{  public static Border createEmptyBorder(){  return emptyBorder;}  }
class C{  public void append(String s){  int length=s.length();  if (this.length + length > this.ch.length) {    int newLength=this.ch.length * 2;    if (newLength < this.length + length + DEFAULT_SIZE)     newLength=this.ch.length + length + DEFAULT_SIZE;    char[] newch=new char[newLength];    System.arraycopy(this.ch,0,newch,0,this.length);    this.ch=newch;  }  s.getChars(0,length,this.ch,this.length);  this.length+=length;}  }
class C{  public FrameBodyUnsupported(String identifier){  this.identifier=identifier;}  }
class C{  @Override protected BasePoolableObjectFactory createChannelFactory(){  return new NettyChannelFactory(this);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_conversations);  this.videoButton=(Button)findViewById(R.id.videoButtonId);  this.participantsButton=(Button)findViewById(R.id.participantsButtonId);  if (findViewById(R.id.fragment_container) != null) {    this.currentConversation=((SFBDemoApplication)getApplication()).getAnonymousConversation();    this.conversationAlertObserver=new ConversationAlertObserver();    this.currentConversation.setAlertCallback(this.conversationAlertObserver);    com.microsoft.office.sfb.appsdk.Application.getInstance(this.getApplicationContext()).setAlertCallback(this.conversationAlertObserver);    this.devicesManager=com.microsoft.office.sfb.appsdk.Application.getInstance(this.getApplicationContext()).getDevicesManager();    this.endpoint=this.devicesManager.getSelectedSpeaker().getActiveEndpoint();    this.chatFragment=ChatFragment.newInstance(this.currentConversation);    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();    fragmentTransaction.add(R.id.fragment_container,this.chatFragment,null);    fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);    fragmentTransaction.commit();  }  this.conversationsToolbarLayout=(LinearLayout)findViewById(R.id.conversationsToolbarId);  this.alertLayout=(LinearLayout)findViewById(R.id.alertViewId);}  }
class C{  protected boolean isSpecial(String name){  for (int i=0; i < specials.length; i++) {    if (specials[i].equals(name))     return true;  }  return false;}  }
class C{  @Override public Name composeName(Name name,Name prefix) throws NamingException {  prefix=(Name)prefix.clone();  return prefix.addAll(name);}  }
class C{  private void createLayout(GuiApplication app){  setLayout(new GridBagLayout());  JPanel mainPanel=new JPanel(new GridBagLayout());  mainPanel.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.weightx=0.0;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.anchor=GridBagConstraints.WEST;  HashMap<WizardStep,LocalizableMessage> hmText=new HashMap<>();  LinkedHashSet<WizardStep> orderedSteps=app.getOrderedSteps();  boolean first=true;  for (  WizardStep s : orderedSteps) {    hmText.put(s,s.getDisplayMessage());    JPanel subPanel=new JPanel(new GridBagLayout());    subPanel.setOpaque(false);    if (!first) {      gbc.insets.top=UIFactory.TOP_INSET_STEP;    }    GridBagConstraints gbcAux=new GridBagConstraints();    gbcAux.gridwidth=GridBagConstraints.REMAINDER;    gbcAux.fill=GridBagConstraints.HORIZONTAL;    JPanel auxPanel=new JPanel(new GridBagLayout());    auxPanel.setOpaque(false);    JLabel iconLabel=UIFactory.makeJLabel(UIFactory.IconType.CURRENT_STEP,null,UIFactory.TextStyle.NO_STYLE);    gbcAux.insets.left=0;    auxPanel.add(iconLabel,gbcAux);    int width=(int)iconLabel.getPreferredSize().getWidth();    if (getApplication().isSubStep(s)) {      width+=UIFactory.LEFT_INSET_SUBSTEP;    }    gbcAux.insets.left=0;    auxPanel.add(Box.createHorizontalStrut(width),gbcAux);    hmIcons.put(s,iconLabel);    gbc.gridwidth=3;    gbc.weightx=0.0;    subPanel.add(auxPanel,gbc);    JLabel stepLabel=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,hmText.get(s),UIFactory.TextStyle.CURRENT_STEP);    hmLabels.put(s,stepLabel);    gbc.insets.left=UIFactory.LEFT_INSET_STEP;    gbc.gridwidth=GridBagConstraints.RELATIVE;    subPanel.add(stepLabel,gbc);    gbc.insets=UIFactory.getEmptyInsets();    gbc.gridwidth=GridBagConstraints.REMAINDER;    gbc.weightx=1.0;    subPanel.add(Box.createHorizontalGlue(),gbc);    mainPanel.add(subPanel,gbc);    hmSubPanels.put(s,subPanel);    stepLabel.setLabelFor(this);    iconLabel.setLabelFor(stepLabel);    first=false;  }  gbc.insets.left=0;  gbc.insets.top=0;  gbc.weightx=1.0;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.NONE;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.anchor=GridBagConstraints.NORTHWEST;  add(mainPanel,gbc);  int mainWidth=(int)mainPanel.getPreferredSize().getWidth();  add(Box.createHorizontalStrut(mainWidth),gbc);  gbc.fill=GridBagConstraints.VERTICAL;  gbc.weighty=1.0;  add(Box.createVerticalGlue(),gbc);}  }
class C{  public void reinitializeWithFullSchema(Schema schema) throws InitializationException {  final Map<String,EntryListeners> exportedListeners=exportListeners();  finalize();  File configFileToUse=preInitialization();  loadConfiguration(configFileToUse,schema);  importListeners(exportedListeners,schema);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  String tokenID=null;  String userDN=null;  if (token != null) {    Object tokenIDObject=token.getTokenID();    if (tokenIDObject != null) {      tokenID=tokenIDObject.toString();    }  }  if (tokenID == null) {    if (debug.warningEnabled()) {      debug.warning("AMIdentitySubject.isMember():" + "tokenID is null");      debug.warning("AMIdentitySubject.isMember():" + "returning false");    }    return false;  } else {    Principal principal=token.getPrincipal();    if (principal != null) {      userDN=principal.getName();    }    if (userDN == null) {      if (debug.warningEnabled()) {        debug.warning("AMIdentitySubject.isMember():" + "userDN is null");        debug.warning("AMIdentitySubject.isMember():" + "returning false");      }      return false;    }  }  boolean subjectMatch=false;  if (debug.messageEnabled()) {    debug.message("AMIndentitySubject.isMember(): " + "entering with userDN = " + userDN);  }  if (subjectValues.size() > 0) {    Iterator valueIter=subjectValues.iterator();    while (valueIter.hasNext()) {      Boolean matchFound=null;      String subjectValue=(String)valueIter.next();      if (debug.messageEnabled()) {        debug.message("AMIndentitySubject.isMember(): " + "checking membership with userDN = " + userDN + ", subjectValue = "+ subjectValue);      }      if ((matchFound=SubjectEvaluationCache.isMember(tokenID,"AMIdentitySubject",subjectValue)) != null) {        if (debug.messageEnabled()) {          debug.message("AMIdentitySubject.isMember():" + "got membership from SubjectEvaluationCache " + " for userDN = " + userDN + ", subjectValue = "+ subjectValue+ ", result = "+ matchFound.booleanValue());        }        boolean result=matchFound.booleanValue();        if (result) {          if (debug.messageEnabled()) {            debug.message("AMIndentitySubject.isMember(): " + " returning membership status = " + result);          }          return result;        } else {          continue;        }      }      if (debug.messageEnabled()) {        debug.message("AMIdentitySubject:isMember():entry for " + subjectValue + " not in subject evaluation "+ "cache, so compute using IDRepo api");      }      try {        AMIdentity subjectIdentity=IdUtils.getIdentity(getAdminToken(),subjectValue);        if (subjectIdentity == null) {          if (debug.messageEnabled()) {            debug.message("AMidentitySubject.isMember():" + "subjectIdentity is null for " + "subjectValue = "+ subjectValue);            debug.message("AMidentitySubject.isMember():" + "returning false");          }          return false;        }        AMIdentity tmpIdentity=IdUtils.getIdentity(token);        String univId=IdUtils.getUniversalId(tmpIdentity);        AMIdentity userIdentity=IdUtils.getIdentity(getAdminToken(),univId);        if (userIdentity == null) {          if (debug.messageEnabled()) {            debug.message("AMidentitySubject.isMember():" + "userIdentity is null");            debug.message("AMidentitySubject.isMember():" + "returning false");          }          return false;        }        if (debug.messageEnabled()) {          debug.message("AMidentitySubject.isMember():" + "user uuid = " + IdUtils.getUniversalId(userIdentity) + ", subject uuid = "+ IdUtils.getUniversalId(subjectIdentity));        }        IdType userIdType=userIdentity.getType();        IdType subjectIdType=subjectIdentity.getType();        Set allowedMemberTypes=null;        if (userIdentity.equals(subjectIdentity)) {          if (debug.messageEnabled()) {            debug.message("AMidentitySubject.isMember():" + "userIdentity equals subjectIdentity:" + "membership=true");          }          subjectMatch=true;        } else         if (((allowedMemberTypes=subjectIdType.canHaveMembers()) != null) && allowedMemberTypes.contains(userIdType)) {          subjectMatch=userIdentity.isMember(subjectIdentity);          if (debug.messageEnabled()) {            debug.message("AMIdentitySubject.isMember():" + "userIdentity type " + userIdType + " can be a member of "+ "subjectIdentityType "+ subjectIdType+ ":membership="+ subjectMatch);          }        } else {          subjectMatch=false;          if (debug.messageEnabled()) {            debug.message("AMIdentitySubject.isMember():" + "userIdentity type " + userIdType + " can not be a member of "+ "subjectIdentityType "+ subjectIdType+ ":membership="+ subjectMatch);          }        }        if (debug.messageEnabled()) {          debug.message("AMIdentitySubject.isMember: adding " + "entry in SubjectEvaluationCache for " + ", for userDN = " + userDN + ", subjectValue = "+ subjectValue+ ", subjectMatch = "+ subjectMatch);        }        if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {          try {            token.addSSOTokenListener(PolicyEvaluator.ssoListener);            SubjectEvaluationCache.addEntry(tokenID,"AMIdentitySubject",subjectValue,subjectMatch);            PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);            debug.message("AMIdentitySubject.isMember(): sso listener added");          } catch (          SSOTokenListenersUnsupportedException ex) {            debug.message("AMIdentitySubject.isMember(): could not add sso listener: {}",ex.getMessage());          }        }        if (subjectMatch) {          break;        }      } catch (      IdRepoException ire) {        debug.warning("AMidentitySubject.isMember():" + "can not check membership for user " + userDN + ", subject "+ subjectValue,ire);        String[] args={userDN,subjectValue};        throw (new PolicyException(ResBundleUtils.rbName,"am_id_subject_membership_evaluation_error",args,ire));      }    }  }  if (debug.messageEnabled()) {    if (!subjectMatch) {      debug.message("AMIdentitySubject.isMember(): user " + userDN + " is not a member of this subject");    } else {      debug.message("AMIdentitySubject.isMember(): User " + userDN + " is a member of this subject");    }  }  return subjectMatch;}  }
class C{  protected CGIEnvironment(HttpServletRequest req,ServletContext context) throws IOException {  setupFromContext(context);  setupFromRequest(req);  this.valid=setCGIEnvironment(req);  if (this.valid) {    workingDirectory=new File(command.substring(0,command.lastIndexOf(File.separator)));  } else {    workingDirectory=null;  }}  }
class C{  @Override public Foo[] findByUuid_PrevAndNext(long fooId,String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public boolean isExternalFile(ProtoFile file){  String filePath=file.getSimpleName();  for (  String commonPath : COMMON_PROTO_PATHS) {    if (filePath.startsWith(commonPath)) {      return true;    }  }  return false;}  }
class C{  public void testCompareToZeroNeg(){  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int bSign=-1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  private void delete(File file){  if (file.isDirectory()) {    for (    File entry : getChildren(file)) {      delete(entry);    }  }  file.delete();}  }
class C{  public void complete_neigbour_rooms(ExpandRoomComplete p_room){  List<ExpandDoor> doors=p_room.get_doors();  if (doors == null)   return;  Iterator<ExpandDoor> iter=doors.iterator();  while (iter.hasNext()) {    ExpandDoor curr_door=iter.next();    ExpandRoom neighbour_room=curr_door.other_room((ExpandRoom)p_room);    if (neighbour_room == null)     continue;    if (neighbour_room instanceof ExpandRoomFreespaceIncomplete) {      complete_expansion_room((ExpandRoomFreespaceIncomplete)neighbour_room);      iter=p_room.get_doors().iterator();    } else     if (neighbour_room instanceof ExpandRoomObstacle) {      ExpandRoomObstacle obstacle_neighbour_room=(ExpandRoomObstacle)neighbour_room;      if (!obstacle_neighbour_room.all_doors_calculated()) {        calculate_doors(obstacle_neighbour_room);        obstacle_neighbour_room.set_doors_calculated(true);      }    }  }}  }
class C{  public MalformedURLException(String detailMessage){  super(detailMessage);}  }
class C{  private boolean checkThird(final byte[] msg){  boolean result=false;  if (hasCorrectKeySize(48,msg)) {    result=true;  }  return result;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  static void testAbstract(ClassLoader loader){  Class abstractGetClass;  Object obj;  try {    abstractGetClass=loader.loadClass("AbstractGet");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass ta failed: " + cnfe);    return;  }  try {    obj=abstractGetClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on TA");    return;  }  BaseOkay baseRef=(BaseOkay)obj;  DoubledExtendOkay de=baseRef.getExtended();  try {    String result;    result=BaseOkay.doStuff(de);  } catch (  LinkageError le) {    System.out.println("Got LinkageError on TA");    return;  }  System.err.println("Should have failed by now in testAbstract");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementdefaultattr.class,args);}  }
class C{  public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  DocumentBuilder docBuilder=getDocBuilder();  Document doc=docBuilder.parse(is);  return parse(doc);}  }
class C{  public void replace(int offset,int length,View[] views){synchronized (stats) {    for (int i=0; i < length; i++) {      ChildState cs=stats.remove(offset);      float csSpan=cs.getMajorSpan();      cs.getChildView().setParent(null);      if (csSpan != 0) {        majorRequirementChange(cs,-csSpan);      }    }    LayoutQueue q=getLayoutQueue();    if (views != null) {      for (int i=0; i < views.length; i++) {        ChildState s=createChildState(views[i]);        stats.add(offset + i,s);        q.addTask(s);      }    }    q.addTask(flushTask);  }}  }
class C{  public JobKOctetsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  public static void register(AbstractMatcher<String> matcher){  matchers.add(matcher);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  Rectangle r=getBounds2D(src).getBounds();  int w=r.x + r.width;  int h=r.y + r.height;  if (w <= 0) {    throw new RasterFormatException("Transformed width (" + w + ") is less than or equal to 0.");  }  if (h <= 0) {    throw new RasterFormatException("Transformed height (" + h + ") is less than or equal to 0.");  }  if (destCM == null) {    ColorModel cm=src.getColorModel();    if (interpolationType != TYPE_NEAREST_NEIGHBOR && (cm instanceof IndexColorModel || cm.getTransparency() == Transparency.OPAQUE)) {      image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);    } else {      image=new BufferedImage(cm,src.getRaster().createCompatibleWritableRaster(w,h),cm.isAlphaPremultiplied(),null);    }  } else {    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  protected void removeRedundantState(){  Vector<Object> uselessKeys=new Vector<Object>();  Enumeration myKeys=preState.keys();  while (myKeys.hasMoreElements()) {    Object myKey=myKeys.nextElement();    if (postState.containsKey(myKey) && postState.get(myKey).equals(preState.get(myKey))) {      uselessKeys.addElement(myKey);    }  }  for (int i=uselessKeys.size() - 1; i >= 0; i--) {    Object myKey=uselessKeys.elementAt(i);    preState.remove(myKey);    postState.remove(myKey);  }}  }
class C{  @Inject public CoreTokenAdapter(TokenBlobStrategy strategy,TaskDispatcher dispatcher,ResultHandlerFactory handlerFactory,CTSWorkerInit reaperInit,@Named(CoreTokenConstants.CTS_DEBUG) Debug debug){  this.strategy=strategy;  this.handlerFactory=handlerFactory;  this.dispatcher=dispatcher;  this.debug=debug;  dispatcher.startDispatcher();  reaperInit.startTasks();}  }
class C{  private void updateLaunchWeeklyErrorMessages(Collection<LocalizableMessage> errorMessages){  setPrimaryValid(lWeeklyTime);  setPrimaryValid(lWeeklyDays);  int[] h={-1};  int[] min={-1};  checkTime(weeklyTime,lWeeklyTime,h,min,errorMessages);  boolean oneSelected=false;  for (  JCheckBox cb : weekDays) {    if (cb.isSelected()) {      oneSelected=true;      break;    }  }  if (!oneSelected) {    errorMessages.add(ERR_CTRL_PANEL_NO_WEEK_DAY_SELECTED.get());    setPrimaryInvalid(lWeeklyDays);  }}  }
class C{  public ThreadPoolException(String msg){  super(msg);}  }
class C{  @Override public String toString(){  return Long.toString(id);}  }
class C{  public void test_getServerSocketFactory() throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext[] sslC=createSSLCon();  assertNotNull("SSLContext objects were not created",sslC);  String tAlg=TrustManagerFactory.getDefaultAlgorithm();  String kAlg=KeyManagerFactory.getDefaultAlgorithm();  if (tAlg == null) {    fail("TrustManagerFactory default algorithm is not defined");    return;  }  if (kAlg == null) {    fail("KeyManagerFactory default algorithm is not defined");    return;  }  KeyManagerFactory kmf=KeyManagerFactory.getInstance(kAlg);  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());  try {    ks.load(null,null);  } catch (  Exception e) {    fail(e + " was thrown for method load(null, null)");  }  kmf.init(ks,new char[10]);  KeyManager[] kms=kmf.getKeyManagers();  TrustManagerFactory tmf=TrustManagerFactory.getInstance(tAlg);  tmf.init(ks);  TrustManager[] tms=tmf.getTrustManagers();  for (int i=0; i < sslC.length; i++) {    sslC[i].init(kms,tms,new SecureRandom());    assertNotNull("No SSLServerSocketFactory available",sslC[i].getServerSocketFactory());    assertNotNull("No SSLSocketFactory available",sslC[i].getSocketFactory());  }}  }
class C{  Values values(Thread current){  return current.localValues;}  }
class C{  public void add(final URI uri){  this.uris.add(uri);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);{    boolean success=false;    try {      employeeNode.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void addFooter(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null footer!");  }  mFooters.add(view);}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public void animateVisibility(boolean visible){  if (mVisible != visible) {    mVisible=visible;    if (mAlphaAnimator != null) {      mAlphaAnimator.cancel();    }    mAlphaAnimator=ObjectAnimator.ofFloat(this,"alpha",visible ? 1f : 0f);    mAlphaAnimator.setDuration(visible ? 200 : 150);    mAlphaAnimator.start();  }}  }
class C{  public void onScroll(float distanceX,float distanceY){  float viewportXOffset=distanceX / contentRect.width() * viewportRect.width();  computeScrollSurfaceSize();  computeXAxis();  move(viewportRect.left + viewportXOffset);}  }
class C{  public void dispose(){  close_files();  gdi_context=null;  coordinate_transform=null;  itera_settings=null;  interactive_state=null;  ratsnest=null;  clearance_violations=null;  r_board=null;}  }
class C{  public final void testGetEncryptedData03() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String appName=getStringOptionValue(PARAM_APPL_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,appName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_APPLICATION",params);  Subject adminSubject=getAdminSubject();  try {    Application appl=applicationServiceFactory.create(adminSubject,realm).getApplication(appName);    Object[] param={appName};    if (appl == null) {      throw new CLIException(MessageFormat.format(getResourceString("set-application-not-found"),param),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    setApplicationAttributes(appl,attributeValues,false);    applicationServiceFactory.create(getAdminSubject(),realm).saveApplication(appl);    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("set-application-modified"),param));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SET_APPLICATION",params);  } catch (  EntitlementException e) {    String[] paramExs={realm,appName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SET_APPLICATION",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  CLIException e) {    String[] paramExs={realm,appName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SET_APPLICATION",paramExs);    throw e;  }}  }
class C{  public static void createServerInstance(SSOToken ssoToken,String instanceName,Map values,String serverConfigXML) throws SMSException, SSOException, IOException, ConfigurationException, UnknownPropertyNameException {  createServerInstance(ssoToken,instanceName,getPropertiesSet(values),serverConfigXML);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  @Nullable @Override public ActionMode startSupportActionMode(@NonNull final ActionMode.Callback callback){  return super.startSupportActionMode(callback);}  }
class C{  public void initializeAccessControl(ServerContext serverContext) throws ConfigException, InitializationException {  this.serverContext=serverContext;  AccessControlHandlerCfg accessControlConfiguration=serverContext.getRootConfig().getAccessControlHandler();  accessControlConfiguration.addChangeListener(this);  currentConfiguration=null;  updateConfiguration(accessControlConfiguration);}  }
class C{  public static void checkStringLengthNullSafe(String value) throws IllegalArgumentException {  if (value != null) {    if (value.length() > MAXIMUM_STRING_LENGTH_ALLOWED) {      throw new IllegalArgumentException(ErrorMessage.WMA_LENGTH_OF_STRING_IS_TOO_LARGE.getMsg((value.length() * 2)));    }  }}  }
class C{  public LDIFImportResult(long entriesRead,long entriesRejected,long entriesSkipped){  this.entriesRead=entriesRead;  this.entriesRejected=entriesRejected;  this.entriesSkipped=entriesSkipped;}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  public void grantReadPermission(Collection attributeNames){  Iterator it=attributeNames.iterator();  if (it != null) {    while (it.hasNext()) {      String temp=(String)it.next();      readables.add(temp.toLowerCase());    }  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public EntryGenerator(){}  }
class C{  public void test_addAttributeLjava_text_AttributedCharacterIterator$AttributeLjava_lang_Object(){  AttributedString as=new AttributedString("123",new WeakHashMap());  as.addAttribute(AttributedCharacterIterator.Attribute.LANGUAGE,"english");  as.addAttribute(AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT,"input method");  as.addAttribute(AttributedCharacterIterator.Attribute.READING,"reading");  try {    as.addAttribute(null,new TreeSet());    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    as.addAttribute(null,null);    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  private <P>void decodeProperty(PropertySet newProperties,ManagedObjectPath<?,?> path,PropertyDefinition<P> propertyDef,Attribute attribute){  PropertyException exception=null;  SortedSet<P> activeValues=new TreeSet<>(propertyDef);  if (attribute != null) {    for (    ByteString byteValue : attribute) {      P value=ValueDecoder.decode(propertyDef,byteValue);      activeValues.add(value);    }  }  if (activeValues.size() > 1 && !propertyDef.hasOption(PropertyOption.MULTI_VALUED)) {    exception=PropertyException.propertyIsSingleValuedException(propertyDef);    P value=activeValues.first();    activeValues.clear();    activeValues.add(value);  }  Collection<P> defaultValues;  try {    defaultValues=findDefaultValues(path,propertyDef,false);  } catch (  PropertyException e) {    defaultValues=Collections.emptySet();    exception=e;  }  newProperties.addProperty(propertyDef,defaultValues,activeValues);  if (activeValues.isEmpty() && defaultValues.isEmpty() && propertyDef.hasOption(PropertyOption.MANDATORY)&& exception == null) {    exception=PropertyException.propertyIsMandatoryException(propertyDef);  }  if (exception != null) {    throw exception;  }}  }
class C{  private void createAndRegisterRemainingWorkflows() throws ConfigException {  try {    createAndRegisterWorkflows(getConfigurationBackend());    createAndRegisterWorkflows(rootDSEBackend);  } catch (  DirectoryException de) {    throw new ConfigException(de.getMessageObject());  }}  }
class C{  private void retrieveSuccessfulOperationElements(ModifyOperation modifyOperation){  assertTrue(modifyOperation.getProcessingStartTime() > 0);  assertTrue(modifyOperation.getProcessingStopTime() >= modifyOperation.getProcessingStartTime());  assertTrue(modifyOperation.getProcessingTime() >= 0);  @SuppressWarnings("unchecked") List<LocalBackendModifyOperation> localOps=(List<LocalBackendModifyOperation>)modifyOperation.getAttachment(Operation.LOCALBACKENDOPERATIONS);  assertNotNull(localOps);  for (  LocalBackendModifyOperation curOp : localOps) {    curOp.getNewPasswords();    curOp.getCurrentPasswords();    assertNotNull(curOp.getCurrentEntry());    assertNotNull(curOp.getModifiedEntry());  }}  }
class C{  private void showAlert(Intent intent){  String message=intent.getStringExtra(ShowAlertAction.PARAM_ALERT_MESSAGE);  if (message == null) {    Log.w("showAlert","No user message provided");    message=getString(R.string.action_default_message);  }  Toast.makeText(this,message,Toast.LENGTH_LONG).show();  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,null);}  }
class C{  SynchronizedKeyedObjectPool(final KeyedObjectPool<K,V> keyedPool) throws IllegalArgumentException {  if (keyedPool == null) {    throw new IllegalArgumentException("keyedPool must not be null.");  }  this.keyedPool=keyedPool;}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  @Override public void close() throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.close();  }}  }
class C{  @Override public void toString(StringBuilder buffer){switch (filterType) {case AND:    buffer.append("(&");  for (  RawFilter f : filterComponents) {    f.toString(buffer);  }buffer.append(")");break;case OR:buffer.append("(|");for (RawFilter f : filterComponents) {f.toString(buffer);}buffer.append(")");break;case NOT:buffer.append("(!");notComponent.toString(buffer);buffer.append(")");break;case EQUALITY:buffer.append("(");buffer.append(attributeDescription);buffer.append("=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;case SUBSTRING:buffer.append("(");buffer.append(attributeDescription);buffer.append("=");if (subInitialElement != null) {valueToFilterString(buffer,subInitialElement);}if (subAnyElements != null && !subAnyElements.isEmpty()) {for (ByteString s : subAnyElements) {buffer.append("*");valueToFilterString(buffer,s);}}buffer.append("*");if (subFinalElement != null) {valueToFilterString(buffer,subFinalElement);}buffer.append(")");break;case GREATER_OR_EQUAL:buffer.append("(");buffer.append(attributeDescription);buffer.append(">=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;case LESS_OR_EQUAL:buffer.append("(");buffer.append(attributeDescription);buffer.append("<=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;case PRESENT:buffer.append("(");buffer.append(attributeDescription);buffer.append("=*)");break;case APPROXIMATE_MATCH:buffer.append("(");buffer.append(attributeDescription);buffer.append("~=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;case EXTENSIBLE_MATCH:buffer.append("(");if (attributeDescription != null) {buffer.append(attributeDescription);}if (dnAttributes) {buffer.append(":dn");}if (matchingRuleID != null) {buffer.append(":");buffer.append(matchingRuleID);}buffer.append(":=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;}}  }
class C{  private static XMPNode separateFindCreateArray(String schemaNS,String arrayName,PropertyOptions arrayOptions,XMPMetaImpl xmp) throws XMPException {  arrayOptions=XMPNodeUtils.verifySetOptions(arrayOptions,null);  if (!arrayOptions.isOnlyArrayOptions()) {    throw new XMPException("Options can only provide array form",XMPError.BADOPTIONS);  }  XMPPath arrayPath=XMPPathParser.expandXPath(schemaNS,arrayName);  XMPNode arrayNode=XMPNodeUtils.findNode(xmp.getRoot(),arrayPath,false,null);  if (arrayNode != null) {    PropertyOptions arrayForm=arrayNode.getOptions();    if (!arrayForm.isArray() || arrayForm.isArrayAlternate()) {      throw new XMPException("Named property must be non-alternate array",XMPError.BADXPATH);    }    if (arrayOptions.equalArrayTypes(arrayForm)) {      throw new XMPException("Mismatch of specified and existing array form",XMPError.BADXPATH);    }  } else {    arrayNode=XMPNodeUtils.findNode(xmp.getRoot(),arrayPath,true,arrayOptions.setArray(true));    if (arrayNode == null) {      throw new XMPException("Failed to create named array",XMPError.BADXPATH);    }  }  return arrayNode;}  }
class C{  private BackupDirectory(String path,DN configEntryDN,LinkedHashMap<String,BackupInfo> backups){  this.path=path;  this.configEntryDN=configEntryDN;  if (backups != null) {    this.backups=backups;  } else {    this.backups=new LinkedHashMap<>();  }}  }
class C{  public int size(){  return collections.size();}  }
class C{  private static void assertEcho(String result,String expected){  assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);}  }
class C{  private JsonValue convertResults(Collection<Token> tokens){  List<Map<String,Object>> results=new ArrayList<>();  for (  Token token : tokens) {    results.add(convertToken(token));  }  return new JsonValue(results);}  }
class C{  private void checkScreenShot(byte[] pixel){synchronized (syncResScreenShotListener) {    if (resScreenShotListener != null) {      int[] argbPixel=new int[resCoreParameters.videoWidth * resCoreParameters.videoHeight];      ColorHelper.NV21TOARGB(pixel,argbPixel,resCoreParameters.videoWidth,resCoreParameters.videoHeight);      Bitmap result=Bitmap.createBitmap(argbPixel,resCoreParameters.videoWidth,resCoreParameters.videoHeight,Bitmap.Config.ARGB_8888);      CallbackDelivery.i().post(new RESScreenShotListener.RESScreenShotListenerRunable(resScreenShotListener,result));      resScreenShotListener=null;    }  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  unlockPageTrailForSwapping();  SCPolicyViewBean vb=(SCPolicyViewBean)getViewBean(SCPolicyViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public String toPattern(){  int lastOffset=0;  StringBuilder result=new StringBuilder();  for (int i=0; i <= maxOffset; ++i) {    copyAndFixQuotes(pattern,lastOffset,offsets[i],result);    lastOffset=offsets[i];    result.append('{').append(argumentNumbers[i]);    Format fmt=formats[i];    if (fmt == null) {    } else     if (fmt instanceof NumberFormat) {      if (fmt.equals(NumberFormat.getInstance(locale))) {        result.append(",number");      } else       if (fmt.equals(NumberFormat.getCurrencyInstance(locale))) {        result.append(",number,currency");      } else       if (fmt.equals(NumberFormat.getPercentInstance(locale))) {        result.append(",number,percent");      } else       if (fmt.equals(NumberFormat.getIntegerInstance(locale))) {        result.append(",number,integer");      } else {        if (fmt instanceof DecimalFormat) {          result.append(",number,").append(((DecimalFormat)fmt).toPattern());        } else         if (fmt instanceof ChoiceFormat) {          result.append(",choice,").append(((ChoiceFormat)fmt).toPattern());        } else {        }      }    } else     if (fmt instanceof DateFormat) {      int index;      for (index=MODIFIER_DEFAULT; index < DATE_TIME_MODIFIERS.length; index++) {        DateFormat df=DateFormat.getDateInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",date");          break;        }        df=DateFormat.getTimeInstance(DATE_TIME_MODIFIERS[index],locale);        if (fmt.equals(df)) {          result.append(",time");          break;        }      }      if (index >= DATE_TIME_MODIFIERS.length) {        if (fmt instanceof SimpleDateFormat) {          result.append(",date,").append(((SimpleDateFormat)fmt).toPattern());        } else {        }      } else       if (index != MODIFIER_DEFAULT) {        result.append(',').append(DATE_TIME_MODIFIER_KEYWORDS[index]);      }    } else {    }    result.append('}');  }  copyAndFixQuotes(pattern,lastOffset,pattern.length(),result);  return result.toString();}  }
class C{  public AMLoginContext(AuthContextLocal authContext){  Reject.ifNull(authContext);  ad=AuthD.getAuth();  debug=AuthD.debug;  if (debug.messageEnabled()) {    debug.message("AMLoginContext:initialThread name is... :" + Thread.currentThread().getName());  }  this.authContext=authContext;  loginStatus=new LoginStatus();  loginStatus.setStatus(LoginStatus.AUTH_IN_PROGRESS);  auditor=InjectorHolder.getInstance(AuthenticationProcessEventAuditor.class);  jaasModuleDetector=InjectorHolder.getInstance(JAASModuleDetector.class);  bundle=ad.bundle;}  }
class C{  public void testUpdateByteBuffer02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  byte[] bbuf={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1};  ByteBuffer byteBuf;  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    byteBuf=ByteBuffer.allocate(5);    byteBuf.put(bbuf);    byteBuf.position(2);    macs[i].init(sks);    macs[i].update(byteBuf);    bb1=macs[i].doFinal();    macs[i].init(sks);    macs[i].update(bbuf,2,3);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  public boolean isCellEditable(int p_row,int p_col){  return p_col >= 1;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  int fillWindow(CursorWindow window,int startPos,int requiredPos,boolean countAllRows){  acquireReference();  try {    window.acquireReference();    try {      return getSession().executeForCursorWindow(getSql(),getBindArgs(),window,startPos,requiredPos,countAllRows,getConnectionFlags(),mCancellationSignal);    } catch (    SQLiteDatabaseCorruptException ex) {      onCorruption();      throw ex;    }catch (    SQLiteException ex) {      Log.e(TAG,"exception: " + ex.getMessage() + "; query: "+ getSql());      throw ex;    } finally {      window.releaseReference();    }  }  finally {    releaseReference();  }}  }
class C{  public static boolean verifySignature(Response samlResponse){  if ((samlResponse != null) && (!samlResponse.isSigned() || (!samlResponse.isSignatureValid()))) {    return false;  }  return true;}  }
class C{  public int addAllAbsent(Collection<? extends E> c){  Object[] cs=c.toArray();  if (cs.length == 0)   return 0;  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    int added=0;    for (int i=0; i < cs.length; ++i) {      Object e=cs[i];      if (indexOf(e,elements,0,len) < 0 && indexOf(e,cs,0,added) < 0)       cs[added++]=e;    }    if (added > 0) {      Object[] newElements=Arrays.copyOf(elements,len + added);      System.arraycopy(cs,0,newElements,len,added);      setArray(newElements);    }    return added;  }  finally {    lock.unlock();  }}  }
class C{  static Promise<Double> blockingPromiseDouble(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public boolean isGroupWritable(){  return is(encodedPermission,GROUP_WRITABLE);}  }
class C{  public OggVorbisHeaderSizes readOggVorbisHeaderSizes(RandomAccessFile raf) throws CannotReadException, IOException {  logger.fine("Started to read comment and setup header sizes:");  long filepointer=raf.getFilePointer();  List<OggPageHeader.PacketStartAndLength> extraPackets=new ArrayList<OggPageHeader.PacketStartAndLength>();  long commentHeaderStartPosition;  long setupHeaderStartPosition;  int commentHeaderSize=0;  int setupHeaderSize;  OggPageHeader pageHeader=OggPageHeader.read(raf);  raf.seek(raf.getFilePointer() + pageHeader.getPageLength());  pageHeader=OggPageHeader.read(raf);  commentHeaderStartPosition=raf.getFilePointer() - (OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + pageHeader.getSegmentTable().length);  byte[] b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];  raf.read(b);  if (!isVorbisCommentHeader(b)) {    throw new CannotReadException("Cannot find comment block (no vorbiscomment header)");  }  raf.seek(raf.getFilePointer() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH));  logger.config("Found start of comment header at:" + raf.getFilePointer());  while (true) {    List<OggPageHeader.PacketStartAndLength> packetList=pageHeader.getPacketList();    commentHeaderSize+=packetList.get(0).getLength();    raf.skipBytes(packetList.get(0).getLength());    if (packetList.size() > 1 || !pageHeader.isLastPacketIncomplete()) {      logger.config("Found end of comment:size:" + commentHeaderSize + "finishes at file position:"+ raf.getFilePointer());      break;    }    pageHeader=OggPageHeader.read(raf);  }  OggPageHeader.PacketStartAndLength packet;  if (pageHeader.getPacketList().size() == 1) {    pageHeader=OggPageHeader.read(raf);    List<OggPageHeader.PacketStartAndLength> packetList=pageHeader.getPacketList();    packet=pageHeader.getPacketList().get(0);    b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];    raf.read(b);    if (!isVorbisSetupHeader(b)) {      throw new CannotReadException(ErrorMessage.OGG_VORBIS_NO_VORBIS_HEADER_FOUND.getMsg());    }    raf.seek(raf.getFilePointer() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH));    logger.config("Found start of vorbis setup header at file position:" + raf.getFilePointer());    setupHeaderStartPosition=raf.getFilePointer() - (OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + pageHeader.getSegmentTable().length);    setupHeaderSize=packet.getLength();    logger.fine("Adding:" + packet.getLength() + " to setup header size");    raf.skipBytes(packet.getLength());    if (packetList.size() > 1 || !pageHeader.isLastPacketIncomplete()) {      logger.config("Found end of setupheader:size:" + setupHeaderSize + "finishes at:"+ raf.getFilePointer());      if (packetList.size() > 1) {        extraPackets=packetList.subList(1,packetList.size());      }    } else {      pageHeader=OggPageHeader.read(raf);      packetList=pageHeader.getPacketList();      while (true) {        setupHeaderSize+=packetList.get(0).getLength();        logger.fine("Adding:" + packetList.get(0).getLength() + " to setup header size");        raf.skipBytes(packetList.get(0).getLength());        if (packetList.size() > 1 || !pageHeader.isLastPacketIncomplete()) {          logger.fine("Found end of setupheader:size:" + setupHeaderSize + "finishes at:"+ raf.getFilePointer());          if (packetList.size() > 1) {            extraPackets=packetList.subList(1,packetList.size());          }          break;        }        pageHeader=OggPageHeader.read(raf);      }    }  } else {    packet=pageHeader.getPacketList().get(1);    List<OggPageHeader.PacketStartAndLength> packetList=pageHeader.getPacketList();    b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];    raf.read(b);    if (!isVorbisSetupHeader(b)) {      logger.warning("Expecting but got:" + new String(b) + "at "+ (raf.getFilePointer() - b.length));      throw new CannotReadException(ErrorMessage.OGG_VORBIS_NO_VORBIS_HEADER_FOUND.getMsg());    }    raf.seek(raf.getFilePointer() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH));    logger.config("Found start of vorbis setup header at file position:" + raf.getFilePointer());    setupHeaderStartPosition=raf.getFilePointer() - (OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + pageHeader.getSegmentTable().length) - pageHeader.getPacketList().get(0).getLength();    setupHeaderSize=packet.getLength();    logger.fine("Adding:" + packet.getLength() + " to setup header size");    raf.skipBytes(packet.getLength());    if (packetList.size() > 2 || !pageHeader.isLastPacketIncomplete()) {      logger.fine("Found end of setupheader:size:" + setupHeaderSize + "finishes at:"+ raf.getFilePointer());      if (packetList.size() > 2) {        extraPackets=packetList.subList(2,packetList.size());      }    } else {      pageHeader=OggPageHeader.read(raf);      packetList=pageHeader.getPacketList();      while (true) {        setupHeaderSize+=packetList.get(0).getLength();        logger.fine("Adding:" + packetList.get(0).getLength() + " to setup header size");        raf.skipBytes(packetList.get(0).getLength());        if (packetList.size() > 1 || !pageHeader.isLastPacketIncomplete()) {          logger.fine("Found end of setupheader:size:" + setupHeaderSize + "finishes at:"+ raf.getFilePointer());          if (packetList.size() > 1) {            extraPackets=packetList.subList(1,packetList.size());          }          break;        }        pageHeader=OggPageHeader.read(raf);      }    }  }  raf.seek(filepointer);  return new OggVorbisHeaderSizes(commentHeaderStartPosition,setupHeaderStartPosition,commentHeaderSize,setupHeaderSize,extraPackets);}  }
class C{  public Node item(int index){  if (m_iter != null) {    int handle=m_iter.item(index);    if (handle == DTM.NULL) {      return null;    }    return m_iter.getDTM(handle).getNode(handle);  } else {    return null;  }}  }
class C{  private Map mergeWithInternal(String ct,Map dMap){  Map rMap=null;  Map sMap=(Map)internalClientData.get(ct);  if (sMap != null) {    rMap=mergeMap(sMap,dMap);  }  return rMap;}  }
class C{  @Override public int read() throws IOException {  int c=fSurrogate;  if (fSurrogate == -1) {    int index=0;    int b0=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;    if (b0 == -1) {      return -1;    }    if (b0 < 0x80) {      c=(char)b0;    } else     if ((b0 & 0xE0) == 0xC0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,2);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,2);      }      c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);    } else     if ((b0 & 0xF0) == 0xE0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,3);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,3);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,3);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3);      }      c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);    } else     if ((b0 & 0xF8) == 0xF0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,4);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,3);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,4);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3);      }      int b3=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b3 == -1) {        expectedByte(4,4);      }      if ((b3 & 0xC0) != 0x80) {        invalidByte(4,4);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | ((b1 << 2) & 0x003C)| ((b2 >> 4) & 0x0003);      int ls=0xDC00 | ((b2 << 6) & 0x03C0) | (b3 & 0x003F);      c=hs;      fSurrogate=ls;    } else {      invalidByte(1,1);    }  } else {    fSurrogate=-1;  }  if (DEBUG_READ) {    if (log.isDebugEnabled())     log.debug("read(): 0x" + Integer.toHexString(c));  }  return c;}  }
class C{  @Override public void write(File file) throws Exception {  if (isInMemory()) {    FileOutputStream fout=null;    try {      fout=new FileOutputStream(file);      fout.write(get());      fout.close();    }  finally {      IOUtils.closeQuietly(fout);    }  } else {    File outputFile=getStoreLocation();    if (outputFile != null) {      size=outputFile.length();      if (!outputFile.renameTo(file)) {        BufferedInputStream in=null;        BufferedOutputStream out=null;        try {          in=new BufferedInputStream(new FileInputStream(outputFile));          out=new BufferedOutputStream(new FileOutputStream(file));          IOUtils.copy(in,out);          out.close();        }  finally {          IOUtils.closeQuietly(in);          IOUtils.closeQuietly(out);        }      }    } else {      throw new FileUploadException("Cannot write uploaded file to disk!");    }  }}  }
class C{  @Override public synchronized void flush() throws IOException {  checkNotClosed();  flushInternal();  out.flush();}  }
class C{  JwtSessionMapperBuilder(){  this(new SigningManager(),new SystemProperties());}  }
class C{  private boolean processStartFromRemote(ReplServerStartMsg inReplServerStartMsg) throws DirectoryException {  try {    short protocolVersion=getCompatibleVersion(inReplServerStartMsg.getVersion());    session.setProtocolVersion(protocolVersion);    generationId=inReplServerStartMsg.getGenerationId();    serverId=inReplServerStartMsg.getServerId();    serverURL=inReplServerStartMsg.getServerURL();    serverAddressURL=toServerAddressURL(serverURL);    setBaseDNAndDomain(inReplServerStartMsg.getBaseDN(),false);    setInitialServerState(inReplServerStartMsg.getServerState());    setSendWindowSize(inReplServerStartMsg.getWindowSize());    if (protocolVersion > ProtocolVersion.REPLICATION_PROTOCOL_V1) {      this.groupId=inReplServerStartMsg.getGroupId();    }    oldGenerationId=-100;  } catch (  Exception e) {    LocalizableMessage message=LocalizableMessage.raw(e.getLocalizedMessage());    throw new DirectoryException(ResultCode.OTHER,message);  }  return inReplServerStartMsg.getSSLEncryption();}  }
class C{  public boolean isStringPainted(){  return paintString;}  }
class C{  public Collection<? extends Indexer> createIndexers(IndexingOptions options){  return impl.createIndexers(options);}  }
class C{  public void delete_selected_items(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateInteractive new_state=((StateSelectedItem)interactive_state).delete_items();  set_interactive_state(new_state);}  }
class C{  private int fillRecord(Record record,ProtocolMessageType contentType,byte[] data,int dataPointer){  record.setContentType(contentType.getValue());  record.setProtocolVersion(tlsContext.getProtocolVersion().getValue());  byte[] pmData;  int returnPointer=data.length;  pmData=Arrays.copyOfRange(data,dataPointer,data.length);  if (record.getMaxRecordLengthConfig() != null) {    int missingLength=data.length - dataPointer;    if (record.getMaxRecordLengthConfig() < missingLength) {      pmData=Arrays.copyOfRange(data,dataPointer,(dataPointer + record.getMaxRecordLengthConfig()));      returnPointer=(dataPointer + record.getMaxRecordLengthConfig());    }  }  record.setLength(pmData.length);  record.setProtocolMessageBytes(pmData);  if (recordCipher != null && contentType != ProtocolMessageType.CHANGE_CIPHER_SPEC) {    byte[] mac=recordCipher.calculateMac(tlsContext.getProtocolVersion(),contentType,record.getProtocolMessageBytes().getValue());    record.setMac(mac);    byte[] macedData=ArrayConverter.concatenate(record.getProtocolMessageBytes().getValue(),record.getMac().getValue());    int paddingLength=recordCipher.calculatePaddingLength(macedData.length);    record.setPaddingLength(paddingLength);    byte[] padding=recordCipher.calculatePadding(record.getPaddingLength().getValue());    record.setPadding(padding);    byte[] paddedMacedData=ArrayConverter.concatenate(macedData,record.getPadding().getValue());    record.setPlainRecordBytes(paddedMacedData);    LOGGER.debug("Padded MACed data before encryption:  {}",ArrayConverter.bytesToHexString(record.getPlainRecordBytes().getValue()));    byte[] encData=recordCipher.encrypt(record.getPlainRecordBytes().getValue());    record.setEncryptedProtocolMessageBytes(encData);    record.setLength(encData.length);    LOGGER.debug("Padded MACed data after encryption:  {}",ArrayConverter.bytesToHexString(encData));  }  return returnPointer;}  }
class C{  public static String readFileAsString(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toString(StandardCharsets.UTF_8);}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int changeType){  if (DEBUG.messageEnabled()) {    StringBuilder sb=new StringBuilder(255);    sb.append("Received SMS notification, orgConfigChanged");    sb.append("serviceName, version, orgName, groupName, ");    sb.append(" serviceComponent, changeType:");    sb.append(serviceName).append(":").append(version).append(":");    sb.append(orgName).append(":").append(groupName).append(":");    sb.append(serviceComponent).append(":").append(changeType);    DEBUG.message(sb.toString());  }  Policy oldPolicy=null;  Policy newPolicy=null;  if (serviceComponent.startsWith(POLICIES_COMPONENT)) {    String cacheKey=buildCacheKey(serviceName,version,orgName,groupName,serviceComponent);    if (changeType == ServiceListener.ADDED) {      if (DEBUG.messageEnabled()) {        DEBUG.message("SMS Notification- policy added -" + "Refreshing policy for cacheKey=" + cacheKey);      }      newPolicy=refreshPolicy(cacheKey);    } else     if (changeType == ServiceListener.REMOVED) {      if (DEBUG.messageEnabled()) {        DEBUG.message("SMS Notification- policy removed -" + " cacheKey=" + cacheKey);      }      oldPolicy=(Policy)policies.get(cacheKey);      policies.put(cacheKey,null);    } else     if (changeType == ServiceListener.MODIFIED) {      oldPolicy=(Policy)policies.get(cacheKey);      if (DEBUG.messageEnabled()) {        DEBUG.message("SMS Notification- policy modified -" + "Refreshing policy for cacheKey=" + cacheKey);      }      newPolicy=refreshPolicy(cacheKey);    } else {      DEBUG.error("SMS Notification- unsupported change type : " + changeType);    }    sendPolicyChangeNotification(oldPolicy,newPolicy,changeType);  }  if (serviceComponent.startsWith(RESOURCES_COMPONENT)) {    try {      PolicyManager pm=getPolicyManager(orgName);      String resourceTypeName=serviceComponent.substring("/resources".length() + 1);      if (DEBUG.messageEnabled()) {        DEBUG.message("SMS Notification- resource index modified-" + "clearing index for resource type " + resourceTypeName);      }      pm.getResourceIndexManager().clearResourceIndex(resourceTypeName);    } catch (    PolicyException pe) {      DEBUG.error("error while clearing resource index ",pe);    }catch (    SSOException ssoe) {      DEBUG.error(ResBundleUtils.getString("invalid_sso_token"),ssoe);    }  }  if (serviceComponent.startsWith(REALM_SUBJECTS_COMPONENT)) {    if (DEBUG.messageEnabled()) {      DEBUG.message("SMS Notification- realm subjects modified " + "- resetting realm subjects for orgName:" + orgName);    }    realmSubjectsChanged(orgName);  }}  }
class C{  public void start_scope(LogfileScope p_logfile_scope,int p_int_value){  start_scope(p_logfile_scope);  add_int(p_int_value);}  }
class C{  public Condition createCondition(String realmName,String conditionType,Map values) throws AMConsoleException {  Condition condition=null;  try {    PolicyManager policyMgr=getPolicyManager(realmName);    if (policyMgr != null) {      ConditionTypeManager conditionTypeMgr=policyMgr.getConditionTypeManager();      condition=conditionTypeMgr.getCondition(conditionType);      condition.setProperties(values);    }  } catch (  NameNotFoundException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  PolicyException e) {    throw new AMConsoleException(getErrorString(e));  }  return condition;}  }
class C{  private static AttributeQuery constructAttrQueryForFedlet(String spEntityID,String idpEntityID,String nameIDValue,List<String> attrsList,String attrqMetaAlias,String attrProfileNameAlias,String subjectDN,boolean wantNameIDEncrypted) throws SAML2Exception {  String attrqEntityID=SAML2Utils.getSAML2MetaManager().getEntityByMetaAlias(attrqMetaAlias);  ProtocolFactory protocolFactory=ProtocolFactory.getInstance();  AssertionFactory assertionFactory=AssertionFactory.getInstance();  AttributeQuery attrQuery=protocolFactory.createAttributeQuery();  Issuer issuer=assertionFactory.createIssuer();  issuer.setValue(attrqEntityID);  attrQuery.setIssuer(issuer);  attrQuery.setID(SAML2Utils.generateID());  attrQuery.setVersion(SAML2Constants.VERSION_2_0);  attrQuery.setIssueInstant(newDate());  List attrs=new ArrayList();  for (  String attributeName : attrsList) {    Attribute attr=assertionFactory.createAttribute();    attr.setName(attributeName);    attr.setNameFormat(SAML2Constants.BASIC_NAME_FORMAT);    attrs.add(attr);  }  attrQuery.setAttributes(attrs);  Subject subject=assertionFactory.createSubject();  NameID nameID=assertionFactory.createNameID();  nameID.setNameQualifier(idpEntityID);  nameID.setSPNameQualifier(spEntityID);  if (attrProfileNameAlias.equals(SAML2Constants.DEFAULT_ATTR_QUERY_PROFILE_ALIAS)) {    nameID.setFormat(SAML2Constants.NAMEID_TRANSIENT_FORMAT);    nameID.setValue(nameIDValue);  }  if (attrProfileNameAlias.equals(SAML2Constants.X509_SUBJECT_ATTR_QUERY_PROFILE_ALIAS)) {    nameID.setFormat(SAML2Constants.X509_SUBJECT_NAME);    nameID.setValue(subjectDN);  }  if (!wantNameIDEncrypted) {    subject.setNameID(nameID);  } else {    AttributeAuthorityDescriptorElement aad=metaManager.getAttributeAuthorityDescriptor("/",idpEntityID);    EncInfo encInfo=KeyUtil.getEncInfo(aad,idpEntityID,SAML2Constants.ATTR_AUTH_ROLE);    EncryptedID encryptedID=nameID.encrypt(encInfo.getWrappingKey(),encInfo.getDataEncAlgorithm(),encInfo.getDataEncStrength(),idpEntityID);    subject.setEncryptedID(encryptedID);  }  attrQuery.setSubject(subject);  return attrQuery;}  }
class C{  private TemplateValue templateValue(String value){  TemplateValue templateVal=new TemplateFile.TemplateValue(null);  templateVal.append(value);  return templateVal;}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public ECPRelayStateImpl(){  isMutable=true;}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof PropertyPermission))   return false;  PropertyPermission that=(PropertyPermission)p;  return ((this.mask & that.mask) == that.mask) && super.implies(that);}  }
class C{  public final PlaSide side_of(PlaPoint p_point){  PlaSide result=p_point.side_of(this);  return result.negate();}  }
class C{  public void paintColorChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Vector add(Vector vec){  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  public String toString(){  return getSize() + " bytes";}  }
class C{  public int read(ByteBuffer buf,NioChannel socket,long readTimeout) throws IOException {  SelectionKey key=socket.getIOChannel().keyFor(socket.getPoller().getSelector());  if (key == null)   throw new IOException("Key no longer registered");  KeyReference reference=keyReferenceStack.pop();  if (reference == null) {    reference=new KeyReference();  }  NioSocketWrapper att=(NioSocketWrapper)key.attachment();  int read=0;  boolean timedout=false;  int keycount=1;  long time=System.currentTimeMillis();  try {    while (!timedout) {      if (keycount > 0) {        read=socket.read(buf);        if (read != 0) {          break;        }      }      try {        if (att.getReadLatch() == null || att.getReadLatch().getCount() == 0)         att.startReadLatch(1);        poller.add(att,SelectionKey.OP_READ,reference);        if (readTimeout < 0) {          att.awaitReadLatch(Long.MAX_VALUE,TimeUnit.MILLISECONDS);        } else {          att.awaitReadLatch(readTimeout,TimeUnit.MILLISECONDS);        }      } catch (      InterruptedException ignore) {      }      if (att.getReadLatch() != null && att.getReadLatch().getCount() > 0) {        keycount=0;      } else {        keycount=1;        att.resetReadLatch();      }      if (readTimeout >= 0 && (keycount == 0))       timedout=(System.currentTimeMillis() - time) >= readTimeout;    }    if (timedout)     throw new SocketTimeoutException();  }  finally {    poller.remove(att,SelectionKey.OP_READ);    if (timedout && reference.key != null) {      poller.cancelKey(reference.key);    }    reference.key=null;    keyReferenceStack.push(reference);  }  return read;}  }
class C{  public String renderPrimitiveValue(TypeRef type,String value){  Type primitiveType=type.getKind();  if (!PRIMITIVE_TYPE_NAMES.containsKey(primitiveType)) {    throw new IllegalArgumentException("Initial values are only supported for primitive types, got type " + type + ", with value "+ value);  }switch (primitiveType) {case TYPE_BOOL:    return lowerCamelToUpperCamel(value.toLowerCase());case TYPE_STRING:case TYPE_BYTES:  return "'" + value + "'";default :return value;}}  }
class C{  public OpendsRMIJRMPServerImpl(int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf,Map<String,?> env) throws IOException {  super(port,csf,ssf,env);}  }
class C{  private static AxesWalker createDefaultWalker(Compiler compiler,int opPos,WalkingIterator lpi,int analysis){  AxesWalker ai=null;  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  int totalNumberWalkers=(analysis & BITS_COUNT);  boolean prevIsOneStepDown=true;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  if (DEBUG_WALKER_CREATION)   System.out.println("new walker:  FilterExprWalker: " + analysis + ", "+ compiler.toString());ai=new FilterExprWalker(lpi);simpleInit=true;break;case OpCodes.FROM_ROOT:ai=new AxesWalker(lpi,Axis.ROOT);break;case OpCodes.FROM_ANCESTORS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTOR);break;case OpCodes.FROM_ANCESTORS_OR_SELF:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTORORSELF);break;case OpCodes.FROM_ATTRIBUTES:ai=new AxesWalker(lpi,Axis.ATTRIBUTE);break;case OpCodes.FROM_NAMESPACE:ai=new AxesWalker(lpi,Axis.NAMESPACE);break;case OpCodes.FROM_CHILDREN:ai=new AxesWalker(lpi,Axis.CHILD);break;case OpCodes.FROM_DESCENDANTS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANT);break;case OpCodes.FROM_DESCENDANTS_OR_SELF:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANTORSELF);break;case OpCodes.FROM_FOLLOWING:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWING);break;case OpCodes.FROM_FOLLOWING_SIBLINGS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWINGSIBLING);break;case OpCodes.FROM_PRECEDING:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDING);break;case OpCodes.FROM_PRECEDING_SIBLINGS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDINGSIBLING);break;case OpCodes.FROM_PARENT:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PARENT);break;case OpCodes.FROM_SELF:ai=new AxesWalker(lpi,Axis.SELF);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (simpleInit) {ai.initNodeTest(DTMFilter.SHOW_ALL);} else {int whatToShow=compiler.getWhatToShow(opPos);if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_NAMESPACE | DTMFilter.SHOW_ELEMENT| DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL)) ai.initNodeTest(whatToShow); else {ai.initNodeTest(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos));}}return ai;}  }
class C{  public boolean hasSpansIntersecting(int start,int end){  for (int i=0; i < numberOfSpans; i++) {    if (spanStarts[i] >= end || spanEnds[i] <= start)     continue;    return true;  }  return false;}  }
class C{  static public boolean hasList(Class<?> sipHdrClass){  if (!initialized)   initializeListMap();  return headerListTable.get(sipHdrClass) != null;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Type) {    Type inType=(Type)obj;    SchemaType inSchemaType=inType.getInternalSchemaType();    return schemaType.equals(inSchemaType);  }  return (false);}  }
class C{  @Override public String toString(){  return ("ContainerEvent['" + getContainer() + "','"+ getType()+ "','"+ getData()+ "']");}  }
class C{  private void insertLocationData(Intent intent){  LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);  Location location=null;  String bestProvider=locationManager.getBestProvider(new Criteria(),true);  String locationData;  try {    location=locationManager.getLastKnownLocation(bestProvider);    OmniArea newLocation=new OmniArea(null,location.getLatitude(),location.getLongitude(),location.getAccuracy());    locationData=newLocation.toString();  } catch (  Exception e) {    locationData="";    if (location == null) {      Log.i(TAG,getString(R.string.location_not_available));    } else     if (bestProvider == null) {      Logger.w(TAG,getString(R.string.location_no_provider));    } else {      Logger.w(TAG,getString(R.string.location_unknown_error),e);    }  }  intent.putExtra(Event.ATTRIBUTE_LOCATION,locationData);}  }
class C{  boolean canReplace(ReplaceHolder rh){  return isValidEdit(rh);}  }
class C{  public void remove(String name){  parameters.remove(name.trim().toLowerCase());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementwrongdocumenterr.class,args);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="prefix:local";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public PluginDescriptionFile(final Reader reader) throws InvalidDescriptionException {  loadMap(asMap(YAML.get().load(reader)));}  }
class C{  public static void putProperty(String key,String value){  get().properties.put(key,value);}  }
class C{  public FrameBodyTOFN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public void show_layer_name(BrdLayer p_layer){  if (write_protected)   return;  statusPanel.current_layer.setText(active_layer_string + p_layer.name);}  }
class C{  public boolean valueChanged(){  return valueChanged;}  }
class C{  public CodeStream putInt(final int i){  ensureCapacity(4);  _data[_length++]=(byte)((i >>> 24) & 0xFF);  _data[_length++]=(byte)((i >>> 16) & 0xFF);  _data[_length++]=(byte)((i >>> 8) & 0xFF);  _data[_length++]=(byte)(i & 0xFF);  return this;}  }
class C{  public boolean append_objects(String p_button_name,String p_window_title,java.util.Collection<PrintableInfo> p_objects){  JButton button=new JButton();  button.setText(p_button_name);  button.setBorderPainted(false);  button.setContentAreaFilled(false);  button.setMargin(new java.awt.Insets(0,0,0,0));  button.setAlignmentY(0.75f);  button.setForeground(java.awt.Color.blue);  button.addActionListener(new InfoButtonListener(p_window_title,p_objects));  StyledDocument document=text_pane.getStyledDocument();  Style default_style=StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);  Style button_style=document.addStyle(p_button_name,default_style);  StyleConstants.setAlignment(button_style,StyleConstants.ALIGN_CENTER);  StyleConstants.setComponent(button_style,button);  try {    document.insertString(document.getLength(),p_button_name,button_style);  } catch (  BadLocationException e) {    System.err.println("ObjectInfoWindow.append: unable to insert text into text pane.");    return false;  }  return true;}  }
class C{  @Override public void addValve(Valve valve){  if (valve instanceof ClusterValve && (!valves.contains(valve)))   valves.add(valve);}  }
class C{  static void exportMap(OutputStream os,Map<String,String> map) throws IOException {  Document doc=createPrefsDoc("map");  Element xmlMap=doc.getDocumentElement();  xmlMap.setAttribute("MAP_XML_VERSION",MAP_XML_VERSION);  for (Iterator<Map.Entry<String,String>> i=map.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<String,String> e=i.next();    Element xe=(Element)xmlMap.appendChild(doc.createElement("entry"));    xe.setAttribute("key",e.getKey());    xe.setAttribute("value",e.getValue());  }  writeDoc(doc,os);}  }
class C{  public void addPattern(String pattern){  addPatternDecoded(UDecoder.URLDecode(pattern,"UTF-8"));}  }
class C{  private int countUpdatedEntriesInDb() throws Exception {  debugInfo("countUpdatedEntriesInDb");  int found=0;  for (  String entry : updatedEntries) {    int dns=entry.indexOf("dn: ");    int dne=entry.indexOf(TEST_ROOT_DN_STRING);    String dn=entry.substring(dns + 4,dne + TEST_ROOT_DN_STRING.length());    debugInfo("Search Entry: " + dn);    DN entryDN=DN.valueOf(dn);    try {      Entry resultEntry=getEntry(entryDN,1000,true);      if (resultEntry == null) {        debugInfo("Entry not found <" + dn + ">");      } else {        debugInfo("Entry found <" + dn + ">");        found++;      }    } catch (    Exception e) {      debugInfo("TestEntriesInDb/",e);    }  }  return found;}  }
class C{  public boolean hasPermissionToDestroySession(final Session requester,final SessionID sessionId) throws SessionException {  if (requester.getState(false) != SessionState.VALID) {    throw new SessionException(SessionBundle.getString("invalidSessionState") + sessionId.toString());  }  try {    if (hasTopLevelAdminRole(requester.getSessionID())) {      return true;    }    if (requester.getID().equals(sessionId)) {      return true;    }    AMIdentity user=getUser(requester.getSessionID());    Set<String> orgList=user.getAttribute("iplanet-am-session-destroy-sessions");    if (!orgList.contains(requester.getClientDomain())) {      return false;    }  } catch (  Exception e) {    throw new SessionException(e);  }  return true;}  }
class C{  public void remove(Component comp){  int oldCount=getComponentCount();  super.remove(comp);  if (oldCount == getComponentCount()) {    getContentPane().remove(comp);  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public SubResourceSingleton isReadOnly(final boolean readOnly){  isReadOnly=readOnly;  return this;}  }
class C{  public boolean listenerStart(){  if (log.isDebugEnabled())   log.debug("Configuring application event listeners");  String listeners[]=findApplicationListeners();  Object results[]=new Object[listeners.length];  boolean ok=true;  for (int i=0; i < results.length; i++) {    if (getLogger().isDebugEnabled())     getLogger().debug(" Configuring event listener class '" + listeners[i] + "'");    try {      String listener=listeners[i];      results[i]=getInstanceManager().newInstance(listener);    } catch (    Throwable t) {      t=ExceptionUtils.unwrapInvocationTargetException(t);      ExceptionUtils.handleThrowable(t);      getLogger().error(sm.getString("standardContext.applicationListener",listeners[i]),t);      ok=false;    }  }  if (!ok) {    getLogger().error(sm.getString("standardContext.applicationSkipped"));    return false;  }  ArrayList<Object> eventListeners=new ArrayList<>();  ArrayList<Object> lifecycleListeners=new ArrayList<>();  for (int i=0; i < results.length; i++) {    if ((results[i] instanceof ServletContextAttributeListener) || (results[i] instanceof ServletRequestAttributeListener) || (results[i] instanceof ServletRequestListener)|| (results[i] instanceof HttpSessionIdListener)|| (results[i] instanceof HttpSessionAttributeListener)) {      eventListeners.add(results[i]);    }    if ((results[i] instanceof ServletContextListener) || (results[i] instanceof HttpSessionListener)) {      lifecycleListeners.add(results[i]);    }  }  for (  Object eventListener : getApplicationEventListeners()) {    eventListeners.add(eventListener);  }  setApplicationEventListeners(eventListeners.toArray());  for (  Object lifecycleListener : getApplicationLifecycleListeners()) {    lifecycleListeners.add(lifecycleListener);    if (lifecycleListener instanceof ServletContextListener) {      noPluggabilityListeners.add(lifecycleListener);    }  }  setApplicationLifecycleListeners(lifecycleListeners.toArray());  if (getLogger().isDebugEnabled())   getLogger().debug("Sending application start events");  getServletContext();  context.setNewServletContextListenerAllowed(false);  Object instances[]=getApplicationLifecycleListeners();  if (instances == null || instances.length == 0) {    return ok;  }  ServletContextEvent event=new ServletContextEvent(getServletContext());  ServletContextEvent tldEvent=null;  if (noPluggabilityListeners.size() > 0) {    noPluggabilityServletContext=new NoPluggabilityServletContext(getServletContext());    tldEvent=new ServletContextEvent(noPluggabilityServletContext);  }  for (int i=0; i < instances.length; i++) {    if (!(instances[i] instanceof ServletContextListener))     continue;    ServletContextListener listener=(ServletContextListener)instances[i];    try {      fireContainerEvent("beforeContextInitialized",listener);      if (noPluggabilityListeners.contains(listener)) {        listener.contextInitialized(tldEvent);      } else {        listener.contextInitialized(event);      }      fireContainerEvent("afterContextInitialized",listener);    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      fireContainerEvent("afterContextInitialized",listener);      getLogger().error(sm.getString("standardContext.listenerStart",instances[i].getClass().getName()),t);      ok=false;    }  }  return (ok);}  }
class C{  public static String escapeValue(Object val){  return (val instanceof byte[]) ? escapeBinaryValue((byte[])val) : escapeStringValue((String)val);}  }
class C{  public void finalizePlugins(){  pluginLock.lock();  try {    for (    DirectoryServerPlugin<? extends PluginCfg> plugin : registeredPlugins.values()) {      try {        plugin.finalizePlugin();      } catch (      Exception e) {        logger.traceException(e);      }    }    registeredPlugins.clear();  }  finally {    pluginLock.unlock();  }}  }
class C{  public void testSharedStrings() throws Exception {  final String VALUE="abcde12345";  byte[] data=writeRepeatedString(false,VALUE);  int BASE_LEN=28;  assertEquals(BASE_LEN,data.length);  data=writeRepeatedString(true,VALUE);  if (data.length >= BASE_LEN) {    fail("Expected shared String length to be < " + BASE_LEN + ", was "+ data.length);  }}  }
class C{  public void resolvePrefixTables() throws TransformerException {  super.resolvePrefixTables();  StylesheetRoot stylesheet=getStylesheetRoot();  if ((null != m_namespace) && (m_namespace.length() > 0)) {    NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);    if (null != nsa) {      m_namespace=nsa.getResultNamespace();      String resultPrefix=nsa.getStylesheetPrefix();      if ((null != resultPrefix) && (resultPrefix.length() > 0))       m_rawName=resultPrefix + ":" + m_localName; else       m_rawName=m_localName;    }  }  if (null != m_avts) {    int n=m_avts.size();    for (int i=0; i < n; i++) {      AVT avt=(AVT)m_avts.get(i);      String ns=avt.getURI();      if ((null != ns) && (ns.length() > 0)) {        NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);        if (null != nsa) {          String namespace=nsa.getResultNamespace();          String resultPrefix=nsa.getStylesheetPrefix();          String rawName=avt.getName();          if ((null != resultPrefix) && (resultPrefix.length() > 0))           rawName=resultPrefix + ":" + rawName;          avt.setURI(namespace);          avt.setRawName(rawName);        }      }    }  }}  }
class C{  private void release(ByteArray byteArray){synchronized (syncRoot) {    if (availableByteArrays.size() >= maxAvailableArraysCount) {      return;    }    if (!availableByteArrays.contains(byteArray)) {      availableByteArrays.add(byteArray);    }  }}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale,final Date centuryStart){  printer=new FastDatePrinter(pattern,timeZone,locale);  parser=new FastDateParser(pattern,timeZone,locale,centuryStart);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public static Cookie createCookie(String cookieValue,String cookieDomain){  String cookieName=getCookieName();  if (utilDebug.messageEnabled()) {    utilDebug.message("cookieName='{}', cookieValue='{}', cookieDomain='{}'",cookieName,cookieValue,cookieDomain);  }  return (createCookie(cookieName,cookieValue,cookieDomain));}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  if ((value == null) || (value.trim().length() == 0)) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRefImpl.toXMLString: " + "AssertionIDRef value is null or empty.");    }    throw new SAML2Exception(SAML2Utils.bundle.getString("emptyElementValue"));  }  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  return ("<" + prefix + SAML2Constants.ASSERTION_ID_REF+ uri+ ">"+ value+ "</"+ prefix+ SAML2Constants.ASSERTION_ID_REF+ ">");}  }
class C{  public PdfPKCS7(PrivateKey privKey,Certificate[] certChain,String hashAlgorithm,String provider,IExternalDigest interfaceDigest,boolean hasRSAdata) throws InvalidKeyException, NoSuchProviderException, NoSuchAlgorithmException {  this.provider=provider;  this.interfaceDigest=interfaceDigest;  digestAlgorithmOid=DigestAlgorithms.getAllowedDigest(hashAlgorithm);  if (digestAlgorithmOid == null)   throw new PdfException(PdfException.UnknownHashAlgorithm1).setMessageParams(hashAlgorithm);  signCert=(X509Certificate)certChain[0];  certs=new ArrayList<>();  for (  Certificate element : certChain) {    certs.add(element);  }  digestalgos=new HashSet<>();  digestalgos.add(digestAlgorithmOid);  if (privKey != null) {    digestEncryptionAlgorithmOid=privKey.getAlgorithm();    if (digestEncryptionAlgorithmOid.equals("RSA")) {      digestEncryptionAlgorithmOid=SecurityIDs.ID_RSA;    } else     if (digestEncryptionAlgorithmOid.equals("DSA")) {      digestEncryptionAlgorithmOid=SecurityIDs.ID_DSA;    } else {      throw new PdfException(PdfException.UnknownKeyAlgorithm1).setMessageParams(digestEncryptionAlgorithmOid);    }  }  if (hasRSAdata) {    RSAdata=new byte[0];    messageDigest=DigestAlgorithms.getMessageDigest(getHashAlgorithm(),provider);  }  if (privKey != null) {    sig=initSignature(privKey);  }}  }
class C{  static int hashCode(final byte[] b,final int offset,final int length){  int hashCode=1;  int i=offset;  int count=length;  while (count-- != 0) {    hashCode=31 * hashCode + b[i++];  }  return hashCode;}  }
class C{  private static String c66EncodeSidString(String sidString){  if (sidString == null || sidString.length() == 0) {    return sidString;  }  int length=sidString.length();  char[] chars=new char[length];  for (int i=0; i < length; i++) {    char c=sidString.charAt(i);    if (c == '+') {      chars[i]='-';    } else     if (c == '/') {      chars[i]='_';    } else     if (c == '=') {      chars[i]='.';    } else     if (c == '@') {      chars[i]='*';    } else     if (c == '#') {      chars[i]='*';    } else {      chars[i]=c;    }  }  return new String(chars);}  }
class C{  public int remaining(){  return sequence.length() - pos;}  }
class C{  private void assertAllEntryMethodsReturnImmutableEntries(NavigableMap<String,String> map){  assertImmutable(map.ceilingEntry("B"));  assertImmutable(map.firstEntry());  assertImmutable(map.floorEntry("D"));  assertImmutable(map.higherEntry("A"));  assertImmutable(map.lastEntry());  assertImmutable(map.lowerEntry("C"));  assertImmutable(map.pollFirstEntry());  assertImmutable(map.pollLastEntry());}  }
class C{  @Override public void onServiceConnected(ComponentName className,IBinder service){  Log.d(TAG,"FmRadioActivity.onServiceConnected start");  mService=((FmRadioService.ServiceBinder)service).getService();  if (null == mService) {    Log.e(TAG,"ServiceConnection: Error: can't get Service");    finish();    return;  }  mService.registerFmRadioListener(mFmRadioListener);  if (!mService.isServiceInited()) {    Log.d(TAG,"ServiceConnection: FM service is not init");    mService.initService(mCurrentStation);    powerUpFm();  } else {    Log.d(TAG,"ServiceConnection: FM service is already init");    if (mService.isDeviceOpen()) {      if (!mService.isPowerUp() && mService.isModeNormal()) {        Log.d(TAG,"Need to power up auto for this case");        powerUpFm();      } else       if (!mService.isPowerUp() && !mService.isModeNormal()) {        if (!mIsNeedShowNoAntennaDlg && !mService.isAntennaAvailable() && !FmRadioUtils.isFmShortAntennaSupport()) {          Log.w(TAG,"Need to show no antenna dialog for plug out earphone in onPause state");          dismissNoAntennaDialog();          showNoAntennaDialog();        }      }      if (mNeedTuneto) {        tuneToStation(mCurrentStation);        mNeedTuneto=false;      }      updateCurrentStation();      boolean isPlaying=mService.isPowerUp();      mIsPlaying=isPlaying;      updateMenuStatus();      updateDialogStatus();      if (!isRecordFileExist()) {        mButtonPlayback.setEnabled(false);      }      updateRds();      restoreRecorderState();    } else {      Log.e(TAG,"ServiceConnection: service is exiting while start FM again");      exitService();      finish();    }  }  Log.d(TAG,"FmRadioActivity.onServiceConnected end");}  }
class C{  public SuffixFileFilter(String suffix,IOCase caseSensitivity){  if (suffix == null) {    throw new IllegalArgumentException("The suffix must not be null");  }  this.suffixes=new String[]{suffix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void testSchemaTypeDtd(){  assertUnsupported("schema-type","http://www.w3.org/TR/REC-xml");}  }
class C{  public boolean usageOrVersionDisplayed(){  return usageOrVersionDisplayed;}  }
class C{  public boolean connectDSwithDN(boolean ssl){  try (Connection conn=getLDAPConnection(ssl)){    ConnectionEntryReader results=conn.search(LDAPRequests.newSearchRequest(suffix,SearchScope.BASE_OBJECT,Filter.objectClassPresent().toString()));    return results.hasNext();  } catch (  LdapException e) {    disconnectDServer();    return false;  }}  }
class C{  public XMLStreamException(String msg,Location location,Throwable th){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  nested=th;  this.location=location;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributes02.class,args);}  }
class C{  protected Expression arg(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  public boolean isEmptyType(TypeRef type){  return s_isEmptyType(type);}  }
class C{  @Override public String toString(){  final Statement statement=getDelegate();  return statement == null ? "NULL" : statement.toString();}  }
class C{  TagResult generateLine(final TemplateEntry templateEntry){  final TemplateValue value=new TemplateValue(this);  for (  final TemplateTag tag : tags) {    final TagResult result=tag.generateValue(templateEntry,value);    if (result != TagResult.SUCCESS) {      return result;    }  }  templateEntry.addValue(value);  return TagResult.SUCCESS;}  }
class C{  public DiffOptions attributes(final String... attributeDescriptions){  return attributes(new AttributeFilter(attributeDescriptions));}  }
class C{  public void mouseDragged(MouseEvent e){  ((MouseMotionListener)a).mouseDragged(e);  ((MouseMotionListener)b).mouseDragged(e);}  }
class C{  public boolean isInputShutdown(){  return isInputShutdown;}  }
class C{  private void siftUp(int k,RunnableScheduledFuture<?> key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture<?> e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public AsfTagBannerField(){  super(AsfFieldKey.BANNER_IMAGE);}  }
class C{  public static boolean isScreenSw(int smallestWidthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float widthDp=displayMetrics.widthPixels / displayMetrics.density;  float heightDp=displayMetrics.heightPixels / displayMetrics.density;  float screenSw=Math.min(widthDp,heightDp);  return screenSw >= smallestWidthDp;}  }
class C{  protected void processBytes(byte[] bytes,int offset,int length){}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.HintElement createHintElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.HintElementImpl();}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (contentHandler != null) {    contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  private void processSynchPostOperationPlugins(){  for (  SynchronizationProvider<?> provider : DirectoryServer.getSynchronizationProviders()) {    try {      provider.doPostOperation(this);    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODDN_SYNCH_POSTOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return;    }  }}  }
class C{  public void endDTD() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDTD");  if (null != m_lexicalHandler) {    m_lexicalHandler.endDTD();  }}  }
class C{  public JMenuItem add(Action a){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  add(mi);  return mi;}  }
class C{  public void test_addAllILjava_util_Collection(){  ll.addAll(50,(Collection)ll.clone());  assertEquals("Returned incorrect size after adding to existing list",200,ll.size());  for (int i=0; i < 50; i++)   assertTrue("Manipulated elements < index",ll.get(i) == objArray[i]);  for (int i=0; i >= 50 && (i < 150); i++)   assertTrue("Failed to ad elements properly",ll.get(i) == objArray[i - 50]);  for (int i=0; i >= 150 && (i < 200); i++)   assertTrue("Failed to ad elements properly",ll.get(i) == objArray[i - 100]);  List myList=new LinkedList();  myList.add(null);  myList.add("Blah");  myList.add(null);  myList.add("Booga");  myList.add(null);  ll.addAll(50,myList);  assertNull("a) List w/nulls not added correctly",ll.get(50));  assertEquals("b) List w/nulls not added correctly","Blah",ll.get(51));  assertNull("c) List w/nulls not added correctly",ll.get(52));  assertEquals("d) List w/nulls not added correctly","Booga",ll.get(53));  assertNull("e) List w/nulls not added correctly",ll.get(54));  try {    ll.addAll(-1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.addAll(ll.size() + 1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.addAll(0,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public GitHubClient(String hostname){  this(hostname,-1,PROTOCOL_HTTPS);}  }
class C{  protected void cleanConfigEntries() throws Exception {  logger.error(LocalizableMessage.raw("ReplicationTestCase/Cleaning config entries"));  for (  DN dn : configEntriesToCleanup) {    deleteEntry(dn);  }  configEntriesToCleanup.clear();  synchroServerEntry=null;  replServerEntry=null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Node dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        dayNode=doc.createCDATASection("day");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    dayNode=doc.createCDATASection("day");    docFrag=doc.createDocumentFragment();    retval=docFrag.appendChild(terNode);    retval=docFrag.appendChild(dayNode);{      boolean success=false;      try {        retval=titleAttr.insertBefore(docFrag,refChild);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  protected TableSerializer(){}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SPKIDataType createSPKIDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SPKIDataTypeImpl();}  }
class C{  private Env createInitialEnv(){  return Envs.empty(isSandbox() ? new SandboxInvoker() : new DefaultInvoker());}  }
class C{  public Builder addPart(RequestBody body){  return addPart(Part.create(body));}  }
class C{  protected void shiftEnd(int newSize){  int oldGapEnd=getGapEnd();  super.shiftEnd(newSize);  int dg=getGapEnd() - oldGapEnd;  int adjustIndex=findMarkAdjustIndex(oldGapEnd);  int n=marks.size();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    mark.index+=dg;  }}  }
class C{  static SkipResult skipUntil(StringReader input,int c,char target) throws IOException {  while (c != -1 && c != target) {    c=input.read();  }  if (c == -1) {    return SkipResult.EOF;  } else {    return SkipResult.FOUND;  }}  }
class C{  private void addEntityToCOT(String realm,String entityID) throws IDFFMetaException {  IDPDescriptorConfigElement idpConfig=getIDPDescriptorConfig(realm,entityID);  if (idpConfig != null) {    addToCircleOfTrust(idpConfig,realm,entityID);  }  SPDescriptorConfigElement spConfig=getSPDescriptorConfig(realm,entityID);  if (spConfig != null) {    addToCircleOfTrust(spConfig,realm,entityID);  }}  }
class C{  public void refreshVisibility(){  this.visibilityManager.refreshVisibility();  fireTableStructureChanged();}  }
class C{  private EncodingUtils(){}  }
class C{  public void shutdown(){  localPorts.remove(getReplicationPort());  if (!shutdown.compareAndSet(false,true)) {    return;  }  if (connectThread != null) {    connectThread.interrupt();  }  close(listenSocket);  if (listenThread != null) {    listenThread.interrupt();  }  for (  ReplicationServerDomain domain : getReplicationServerDomains()) {    domain.shutdown();  }  shutdownExternalChangelog();  try {    this.changelogDB.shutdownDB();  } catch (  ChangelogException ignored) {    logger.traceException(ignored);  }  allInstances.remove(this);}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public static List orderByStringLength(Collection collection){  List ordered=new ArrayList(collection);  Collections.sort(ordered,new StringLengthComparator());  return ordered;}  }
class C{  public static void validate(DefaultJAXBContextImpl jaxbCtx,ValidationContext context,ValidatableObject vo) throws SAXException {  try {    new MSVValidator(jaxbCtx,context,vo)._validate();  } catch (  RuntimeException e) {    context.reportEvent(vo,e);  }}  }
class C{  public static void initializeForClientUse(){  EmbeddedUtils.initializeForClientUse();}  }
class C{  public int remaining(){  return length - pos;}  }
class C{  protected void rejectDrop(){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.rejectDrop();  }}  }
class C{  public boolean isWallSign(){  return getItemType() == Material.WALL_SIGN;}  }
class C{  @Override public int read() throws IOException {  int b=readFirstBytes();  return b >= 0 ? b : in.read();}  }
class C{  private static void validatePassword(Locale locale){  Map map=instance.defValues;  String adminPwd=((String)map.get(SetupConstants.CONFIG_VAR_ADMIN_PWD)).trim();  String confirmAdminPwd=((String)map.get(SetupConstants.CONFIG_VAR_CONFIRM_ADMIN_PWD)).trim();  if (isPasswordValid(adminPwd,confirmAdminPwd,locale)) {    SystemProperties.initializeProperties(SetupConstants.ENC_PWD_PROPERTY,(((String)map.get(SetupConstants.CONFIG_VAR_ENCRYPTION_KEY)).trim()));    Crypt.reinitialize();    map.put(SetupConstants.HASH_ADMIN_PWD,(String)Hash.hash(adminPwd));  }  String urlAccessAgentPwd=(String)map.get(SetupConstants.CONFIG_VAR_AMLDAPUSERPASSWD);  if (urlAccessAgentPwd != null) {    urlAccessAgentPwd.trim();    String urlAccessAgentPwdConfirm=((String)map.get(SetupConstants.CONFIG_VAR_AMLDAPUSERPASSWD_CONFIRM)).trim();    validateURLAccessAgentPassword(adminPwd,urlAccessAgentPwd,urlAccessAgentPwdConfirm,locale);    map.remove(SetupConstants.CONFIG_VAR_AMLDAPUSERPASSWD_CONFIRM);  }  String dbOption=(String)map.get(SetupConstants.CONFIG_VAR_DATA_STORE);  boolean embedded=dbOption.equals(SetupConstants.SMS_EMBED_DATASTORE);  boolean dbSunDS=false;  boolean dbMsAD=false;  if (embedded) {    dbSunDS=true;  } else {    dbSunDS=dbOption.equals(SetupConstants.SMS_DS_DATASTORE);    dbMsAD=dbOption.equals(SetupConstants.SMS_AD_DATASTORE);  }  if (dbSunDS || dbMsAD) {    String dsMgrPwd=((String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD)).trim();    if (embedded) {      if (dsMgrPwd.length() == 0) {        map.put(SetupConstants.CONFIG_VAR_DS_MGR_PWD,adminPwd);      }    }  }  String dsMgrPwd=((String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD));  map.put(SetupConstants.ENCRYPTED_SM_DS_PWD,(String)Crypt.encrypt(dsMgrPwd));  String ldapUserPwd=(String)map.get(SetupConstants.LDAP_USER_PWD);  if (ldapUserPwd != null) {    ldapUserPwd.trim();    map.put(SetupConstants.ENCRYPTED_LDAP_USER_PWD,(String)Crypt.encrypt(ldapUserPwd));    map.put(SetupConstants.HASH_LDAP_USER_PWD,(String)Hash.hash(ldapUserPwd));  }  map.put(SetupConstants.SSHA512_LDAP_USERPWD,(String)EmbeddedOpenDS.hash(adminPwd));  String encryptAdminPwd=Crypt.encrypt(adminPwd);  map.put(SetupConstants.ENCRYPTED_ADMIN_PWD,encryptAdminPwd);  map.put(SetupConstants.ENCRYPTED_AD_ADMIN_PWD,encryptAdminPwd);  map.remove(SetupConstants.CONFIG_VAR_CONFIRM_ADMIN_PWD);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String siteName=(String)getPageSessionAttribute(PG_ATTR_SITE_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  ptModel.setPageTitleText(model.getEditSitePageTitle(siteName));  try {    setDisplayFieldValue(TF_URL,model.getSitePrimaryURL(siteName));    getFailoverURLs(siteName,model);    getServers(siteName,model);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {  _throwInternal();  return false;}  }
class C{  private void applyTextAdjust(float tj){  float adjustBy=-tj / 1000f * getGraphicsState().getFontSize() * (getGraphicsState().getHorizontalScaling() / 100f);  textMatrix=new Matrix(adjustBy,0).multiply(textMatrix);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("<Result>");  stringBuilder.append("<Decision>");  if (this.getDecision() != null) {    stringBuilder.append(this.getDecision().value());  } else {    stringBuilder.append(DecisionType.INDETERMINATE.value());  }  stringBuilder.append("</Decision>");  if (this.getStatus() != null) {    stringBuilder.append(this.getStatus().toXML());  }  if (this.getObligations() != null) {    stringBuilder.append(this.getObligations().toXML());  }  if (this.getAssociatedAdvice() != null) {    stringBuilder.append(this.getAssociatedAdvice().toXML());  }  if ((this.getAttributes() != null) && (this.getAttributes().size() > 0)) {    stringBuilder.append("<Attributes>");    Iterator<Attributes> attributesIterator=this.getAttributes().iterator();    while (attributesIterator.hasNext()) {      Attributes innerAttributes=attributesIterator.next();      if (innerAttributes != null) {        stringBuilder.append(innerAttributes.toXML());      }    }    stringBuilder.append("</Attributes>");  }  if (this.getPolicyIdentifierList() != null) {    stringBuilder.append(this.getPolicyIdentifierList().toXML());  }  stringBuilder.append("</Result>");  return stringBuilder.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  descriptionType=CoreSchema.getDescriptionAttributeType();}  }
class C{  private void isMember(String group,boolean expected,String... dns) throws Exception {  GroupManager groupManager=DirectoryServer.getGroupManager();  Group<?> instance=groupManager.getGroupInstance(DN.valueOf(group));  for (  String dn : dns) {    assertEquals(instance.isMember(DN.valueOf(dn)),expected);  }}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  private Long initialBucket(int size,int position){  Long decValue=0l;  if (position != 0) {    decValue=((bucketMax / size) * position) - 1;  }  return decValue;}  }
class C{  public String toString(){  return getIdentifier();}  }
class C{  public boolean hasRemoteLDAPServers(){  return !remoteDirectoryServers.isEmpty();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  int buckets=capacity();  s.defaultWriteObject();  s.writeInt(buckets);  s.writeInt(size);  internalWriteEntries(s);}  }
class C{  public void removeListener(String listenerID){  if (ssm != null) {    ssm.removeListener(listenerID);  }}  }
class C{  private void encryptBuffer(ByteBuffer out) throws IOException {  int inputSize=inBuffer.remaining();  try {    int n=cipher.update(inBuffer,out);    if (n < inputSize) {      cipher.doFinal(inBuffer,out);      cipherReset=true;    }  } catch (  ShortBufferException e) {    throw new IOException(e);  }catch (  BadPaddingException e) {    throw new IOException(e);  }catch (  IllegalBlockSizeException e) {    throw new IOException(e);  }}  }
class C{  @Advice.OnMethodExit public static void exit(@Advice.Enter long startTime,@Advice.Argument(0) Statement statement,@Advice.Return ResultSetFuture result){  ConnectorImpl.executeStatementWrapper().processStatement(statement,startTime,result);}  }
class C{  private String toDefinitionClassName(String configClassName){  int finalDot=configClassName.lastIndexOf('.');  return configClassName.substring(0,finalDot - 6) + "meta." + configClassName.substring(finalDot + 1)+ "Defn";}  }
class C{  public void addEjb(ContextEjb ejb){  if (entries.contains(ejb.getName())) {    return;  } else {    entries.add(ejb.getName());  }synchronized (ejbs) {    ejb.setNamingResources(this);    ejbs.put(ejb.getName(),ejb);  }  support.firePropertyChange("ejb",null,ejb);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public void testDoubleValuePosRounded2(){  byte[] a={-128,1,2,3,4,5,36,23,1,-3,-5};  int aSign=1;  double result=1.547472643879479E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public boolean isPathSelected(TreePath path){  return getSelectionModel().isPathSelected(path);}  }
class C{  protected void configureReplication(String replServerEntryLdif,String synchroServerEntryLdif) throws Exception {  replServerEntry=TestCaseUtils.entryFromLdifString(replServerEntryLdif);  addConfigEntry(replServerEntry,"Unable to add the replication server");  addSynchroServerEntry(synchroServerEntryLdif);}  }
class C{  private static Key pad(final Key key){  final byte[] keyBytes=key.getEncoded();  final int keySize=keyBytes.length;  final int paddingSize=8 - (keySize % 8);  final byte[] paddedKeyBytes=Arrays.copyOf(keyBytes,keySize + paddingSize);  for (int i=0; i < paddingSize; i++) {    paddedKeyBytes[keySize + i]=(byte)(i + 1);  }  return new SecretKeySpec(paddedKeyBytes,DUMMY_KEY_ALGORITHM);}  }
class C{  public static JScrollPane createBorderLessScrollBar(Component comp){  JScrollPane scroll=new JScrollPane(comp);  scroll.setBorder(new EmptyBorder(0,0,0,0));  scroll.setViewportBorder(new EmptyBorder(0,0,0,0));  scroll.setOpaque(false);  scroll.getViewport().setOpaque(false);  scroll.getViewport().setBackground(DEFAULT_BACKGROUND);  scroll.setBackground(DEFAULT_BACKGROUND);  setScrollIncrementUnit(scroll);  return scroll;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype02.class,args);}  }
class C{  public Map<String,String> parse(final String str,char[] separators){  if (separators == null || separators.length == 0) {    return new HashMap<>();  }  char separator=separators[0];  if (str != null) {    int idx=str.length();    for (    char separator2 : separators) {      int tmp=str.indexOf(separator2);      if (tmp != -1 && tmp < idx) {        idx=tmp;        separator=separator2;      }    }  }  return parse(str,separator);}  }
class C{  public static <T>Expression<T> valueOf(String expression,Class<T> expectedType) throws ExpressionException {  return valueOf(expression,expectedType,bindings());}  }
class C{  public boolean beginHrefDisplay(ChildDisplayEvent event){  return true;}  }
class C{  protected String normalizeSQL(final String sql){  return sql.trim();}  }
class C{  public AMPostCallBackException(String msg,String errorCode,Object[] args){  super(msg,errorCode,args);}  }
class C{  public Polyline(PlaPointInt p_from_corner,PlaPointInt p_to_corner){  if (p_from_corner.equals(p_to_corner))   throw new IllegalArgumentException(classname + "C must contain at least 2 different points");  lines_list=new ArrayList<PlaLineInt>(3);  PlaDirection dir=new PlaDirection(p_from_corner,p_to_corner);  lines_list.add(new PlaLineInt(p_from_corner,dir.rotate_45_deg(2)));  lines_list.add(new PlaLineInt(p_from_corner,p_to_corner));  lines_list.add(new PlaLineInt(p_to_corner,dir.rotate_45_deg(2)));  corners_allocate(corner_count());  precalculated_corners[0]=p_from_corner;  precalculated_corners[1]=p_to_corner;}  }
class C{  public static @CheckForNull String replace(@Nonnull CpsFlowExecution execution,@Nonnull String clazz) throws IOException {  Queue.Executable executable=execution.getOwner().getExecutable();  if (executable instanceof Run) {    ReplayFlowFactoryAction action=((Run)executable).getAction(ReplayFlowFactoryAction.class);    if (action != null) {      return action.replace(clazz);    } else {      LOGGER.log(Level.FINE,"{0} was not a replay",executable);    }  } else {    LOGGER.log(Level.FINE,"{0} was not a run at all",executable);  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"260030");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfArgAssert","260030 North Ave. Dallas, Texas 98551",childData);}  }
class C{  public boolean isEmpty(){  return (impl.isEmpty());}  }
class C{  public W3CEndpointReference(Source source){  try {    W3CEndpointReference epr=w3cjc.createUnmarshaller().unmarshal(source,W3CEndpointReference.class).getValue();    this.address=epr.address;    this.metadata=epr.metadata;    this.referenceParameters=epr.referenceParameters;    this.elements=epr.elements;    this.attributes=epr.attributes;  } catch (  JAXBException e) {    throw new WebServiceException("Error unmarshalling W3CEndpointReference ",e);  }catch (  ClassCastException e) {    throw new WebServiceException("Source did not contain W3CEndpointReference",e);  }}  }
class C{  public Object clone(){  CreationTemplate t=(CreationTemplate)super.clone();  if (m_required != null) {    t.setRequiredAttributeSet((AttrSet)m_required.clone());  }  if (m_optional != null) {    t.setOptionalAttributeSet((AttrSet)m_optional.clone());  }  if (m_validated != null) {    t.setValidation((AttrSet)m_validated.clone());  }  return t;}  }
class C{  public boolean mustCheckUnsavedChanges(){  return index != null && saveChanges.isVisible() && saveChanges.isEnabled();}  }
class C{  public void testSerializationSelf() throws Exception {  TestUtils.initCertPathSSCertChain();  SerializationTest.verifySelf(TestUtils.rootCertificateSS);}  }
class C{  public void sendHeaders(){  action(ActionCode.COMMIT,this);  setCommitted(true);}  }
class C{  private boolean assertConflictAttributeExists(Entry entry){  return !isEmpty(entry.getAllAttributes("ds-sync-confict"));}  }
class C{  boolean isMulticastSocket(){  return false;}  }
class C{  public StatelessSection(int headerResourceId,int footerResourceId,int itemResourceId){  this(headerResourceId,itemResourceId);  this.footerResourceId=footerResourceId;  this.hasFooter=true;}  }
class C{  public void keyReleased(KeyEvent e){}  }
class C{  @PostConstruct public void initApplication(){  log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {    log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");  }  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {    log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");  }}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public void test_initWithKeyAlgorithmParameterSpecSecureRandom() throws Exception {  AlgorithmParameterSpec ap=new IvParameterSpec(IV);  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap,new SecureRandom());  byte[] cipherIV=cipher.getIV();  assertTrue("IVs differ",Arrays.equals(cipherIV,IV));  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap,new SecureRandom());    fail();  } catch (  InvalidKeyException expected) {  }  cipher=Cipher.getInstance("DES/CBC/NoPadding");  ap=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_DES,ap,new SecureRandom());    fail();  } catch (  InvalidAlgorithmParameterException expected) {  }}  }
class C{  public void notifyChangeNumberEntryAdded(DN baseDN,long changeNumber,String cookieString,UpdateMsg updateMsg) throws ChangelogException {  if (!(updateMsg instanceof LDAPUpdateMsg) || changeNumberBasedPersistentSearches.isEmpty()) {    return;  }  try {    final Entry changeNumberEntry=createEntryFromMsg(baseDN,changeNumber,cookieString,updateMsg);    for (    PersistentSearch pSearch : changeNumberBasedPersistentSearches) {      final SearchOperation searchOp=pSearch.getSearchOperation();      final ChangeNumberEntrySender entrySender=searchOp.getAttachment(ENTRY_SENDER_ATTACHMENT);      entrySender.persistentSearchSendEntry(changeNumber,changeNumberEntry);    }  } catch (  DirectoryException e) {    throw new ChangelogException(e.getMessageObject(),e);  }}  }
class C{  public void writeAbandonRequest(final int messageID,final AbandonRequest request) throws IOException {  logger.trace("ENCODE LDAP ABANDON REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeInteger(LDAP.OP_TYPE_ABANDON_REQUEST,request.getRequestID());  }  writeMessageFooter(request.getControls());}  }
class C{  public LoginLATServiceAttribute(byte[] octets){  super(octets);  latService=new String(octets,2,octets.length - 2);}  }
class C{  public String toString(){  return getClass().getName() + "[index=" + index+ ",errorIndex="+ errorIndex+ ']';}  }
class C{  public static RawHeaders fromBytes(InputStream in) throws IOException {  RawHeaders headers;  do {    headers=new RawHeaders();    headers.setStatusLine(Util.readAsciiLine(in));    readHeaders(in,headers);  } while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);  return headers;}  }
class C{  public static void main(final String[] args){  if (args.length != 2) {    System.err.println("Usage: host port");    System.err.println("For example: localhost 1389");    System.exit(1);  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    checkSupportedExtendedOperations(connection);    final String user="cn=Directory Manager";    final char[] password="password".toCharArray();    connection.bind(user,password);    useWhoAmIExtendedRequest(connection);  } catch (  LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  @SuppressWarnings("unchecked") public StackFrame[] analyze(final String owner,final MethodNode m,List<? extends InsnValue> list) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(StackFrame[])new StackFrame[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(StackFrame[])new StackFrame[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  StackFrame current=newFrame(m.maxLocals,m.maxStack);  StackFrame handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    if (list != null && i < list.size()) {      current.setLocal(local++,list.get(i));    } else {      current.setLocal(local++,interpreter.newValue(args[i]));    }    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    StackFrame f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      f.ain=insnNode;      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {    }catch (    Exception e) {      if (!e.getClass().equals(ArrayIndexOutOfBoundsException.class)) {        System.err.println(m.owner + "." + m.name+ m.desc+ "@"+ insn);        System.err.println(OpUtils.toString(f.ain));        e.printStackTrace();      }    }  }  return frames;}  }
class C{  protected void positionCaret(MouseEvent e){  Point pt=new Point(e.getX(),e.getY());  Position.Bias[] biasRet=new Position.Bias[1];  int pos=component.getUI().viewToModel(component,pt,biasRet);  if (biasRet[0] == null)   biasRet[0]=Position.Bias.Forward;  if (pos >= 0) {    setDot(pos,biasRet[0]);  }}  }
class C{  public void removeClient(String clientType) throws AMConsoleException {  String[] param={clientType};  logEvent("ATTEMPT_CLIENT_DETECTION_DELETE_CLIENT",param);  try {    clientTypesManager.removeClientExternal(getUserSSOToken(),clientType);    logEvent("SUCCEED_CLIENT_DETECTION_DELETE_CLIENT",param);  } catch (  AMClientCapException e) {    String strError=getErrorString(e);    String[] paramsEx={clientType,strError};    logEvent("CLIENT_SDK_EXCEPTION_CLIENT_DETECTION_DELETE_CLIENT",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  private GetSymmetricKeyExtendedRequest(){}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public void paint(Graphics g,float x,float y,float w,float h,View v){  float dx=0;  float dy=0;  float dw=0;  float dh=0;  AttributeSet a=v.getAttributes();  boolean isLeftToRight=isLeftToRight(v);  float localLeftMargin=getOrientationMargin(HorizontalMargin.LEFT,leftMargin,a,isLeftToRight);  float localRightMargin=getOrientationMargin(HorizontalMargin.RIGHT,rightMargin,a,isLeftToRight);  if (!(v instanceof HTMLEditorKit.HTMLFactory.BodyBlockView)) {    dx=localLeftMargin;    dy=topMargin;    dw=-(localLeftMargin + localRightMargin);    dh=-(topMargin + bottomMargin);  }  if (bg != null) {    g.setColor(bg);    g.fillRect((int)(x + dx),(int)(y + dy),(int)(w + dw),(int)(h + dh));  }  if (bgPainter != null) {    bgPainter.paint(g,x + dx,y + dy,w + dw,h + dh,v);  }  x+=localLeftMargin;  y+=topMargin;  w-=localLeftMargin + localRightMargin;  h-=topMargin + bottomMargin;  if (border instanceof BevelBorder) {    int bw=(int)getLength(CSS.Attribute.BORDER_TOP_WIDTH,a);    for (int i=bw - 1; i >= 0; i--) {      border.paintBorder(null,g,(int)x + i,(int)y + i,(int)w - 2 * i,(int)h - 2 * i);    }  } else {    border.paintBorder(null,g,(int)x,(int)y,(int)w,(int)h);  }}  }
class C{  @Override public int doAfterBody() throws JspException {  return SKIP_BODY;}  }
class C{  public PlaPointFloat rotate_rad(double p_rad_angle,PlaPointFloat p_pole){  if (p_rad_angle == 0)   return this;  double dx=v_x - p_pole.v_x;  double dy=v_y - p_pole.v_y;  double sin_angle=Math.sin(p_rad_angle);  double cos_angle=Math.cos(p_rad_angle);  double new_dx=dx * cos_angle - dy * sin_angle;  double new_dy=dx * sin_angle + dy * cos_angle;  return new PlaPointFloat(p_pole.v_x + new_dx,p_pole.v_y + new_dy);}  }
class C{  public LogoutRequest createLogoutRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_REQUEST,value);  if (obj == null) {    return new LogoutRequestImpl(value);  } else {    return (LogoutRequest)obj;  }}  }
class C{  public Set searchOrgNames(SSOToken token,String serviceName,String attrName,Set values) throws SMSException, SSOException {  SMSEntry.validateToken(token);  if (debug.messageEnabled()) {    debug.message("CachedSubEntries: reading orgNames DN: " + cachedEntry.getDN() + " attrName: "+ attrName);  }  return (cachedEntry.getSMSEntry().searchOrganizationNames(token,0,true,true,serviceName,attrName,values));}  }
class C{  public void warn(String msg,Object args[]) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createWarning(msg,args);  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    if (null != handler)     handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node replacedNode;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);{    boolean success=false;    try {      replacedNode=employeeNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public static void cacheResult(List<Foo> foos){  getPersistence().cacheResult(foos);}  }
class C{  private void indexFiles(){  String[] initialFiles=this.initialFiles;  if (initialFiles != null) {    this.initialFiles=null;    Set<CacheFile> diskOnly=new TreeSet<CacheFile>();    for (    String name : initialFiles) {      if (!accessOrder.containsKey(name)) {        diskOnly.add(new CacheFile(directory,name));      }    }    if (!diskOnly.isEmpty()) {      Map<String,File> newOrder=newAccessOrder();      for (      CacheFile cacheFile : diskOnly) {        newOrder.put(cacheFile.name,cacheFile);      }      newOrder.putAll(accessOrder);      this.accessOrder=newOrder;    }  }}  }
class C{  public boolean hasAttributeNS(String namespaceURI,String localName){  return hasAttribute(localName);}  }
class C{  @AfterMethod(alwaysRun=true) public void reenableBackend() throws DirectoryException {  for (  Object[] backendBaseDN2 : getBaseDNs()) {    final DN baseDN=DN.valueOf(backendBaseDN2[0].toString());    Backend<?> b=DirectoryServer.getBackend(baseDN);    b.setWritabilityMode(WritabilityMode.ENABLED);  }}  }
class C{  public void mark(int limit){}  }
class C{  public void testDoubleValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  double result=1.2380964839238476E53;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanOperationInfo(this));}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  @Override public void release(){  bodyContent=null;  super.release();}  }
class C{  public SimplePropertyMapper defaultJsonValue(final Object defaultValue){  this.defaultJsonValues=defaultValue != null ? singletonList(defaultValue) : emptyList();  return this;}  }
class C{  static void createDirectory(final String directory) throws IOException {  File dir=new File(directory);  if (!dir.exists()) {    if (!dir.mkdirs()) {      throw new IOException("Failed to create directory: " + directory);    }  }}  }
class C{  private String enhanceMessage(String message){  StackTraceElement[] stackTrace=new Exception().getStackTrace();  StackTraceElement elem=stackTrace[3];  String className=elem.getClassName();  String methodName=elem.getMethodName();  String fileName=elem.getFileName();  int lineNumber=elem.getLineNumber();  String newMessage=className + "." + methodName+ "("+ fileName+ ":"+ lineNumber+ ") ["+ message+ "]";  return newMessage;}  }
class C{  public static boolean isBold(AttributeSet a){  Boolean bold=(Boolean)a.getAttribute(Bold);  if (bold != null) {    return bold.booleanValue();  }  return false;}  }
class C{  public HttpSessionEvent(HttpSession source){  super(source);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.FaultType createFaultType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.FaultTypeImpl();}  }
class C{  private Parsed currentParsed(){  return parsed.get(parsed.size() - 1);}  }
class C{  protected boolean isGlobal(){  return true;}  }
class C{  protected String paramString(){  String viewportBorderString=(viewportBorder != null ? viewportBorder.toString() : "");  String viewportString=(viewport != null ? viewport.toString() : "");  String verticalScrollBarPolicyString;  if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_AS_NEEDED";  } else   if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_NEVER) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_NEVER";  } else   if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_ALWAYS) {    verticalScrollBarPolicyString="VERTICAL_SCROLLBAR_ALWAYS";  } else   verticalScrollBarPolicyString="";  String horizontalScrollBarPolicyString;  if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_AS_NEEDED";  } else   if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_NEVER) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_NEVER";  } else   if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {    horizontalScrollBarPolicyString="HORIZONTAL_SCROLLBAR_ALWAYS";  } else   horizontalScrollBarPolicyString="";  String horizontalScrollBarString=(horizontalScrollBar != null ? horizontalScrollBar.toString() : "");  String verticalScrollBarString=(verticalScrollBar != null ? verticalScrollBar.toString() : "");  String columnHeaderString=(columnHeader != null ? columnHeader.toString() : "");  String rowHeaderString=(rowHeader != null ? rowHeader.toString() : "");  String lowerLeftString=(lowerLeft != null ? lowerLeft.toString() : "");  String lowerRightString=(lowerRight != null ? lowerRight.toString() : "");  String upperLeftString=(upperLeft != null ? upperLeft.toString() : "");  String upperRightString=(upperRight != null ? upperRight.toString() : "");  return super.paramString() + ",columnHeader=" + columnHeaderString+ ",horizontalScrollBar="+ horizontalScrollBarString+ ",horizontalScrollBarPolicy="+ horizontalScrollBarPolicyString+ ",lowerLeft="+ lowerLeftString+ ",lowerRight="+ lowerRightString+ ",rowHeader="+ rowHeaderString+ ",upperLeft="+ upperLeftString+ ",upperRight="+ upperRightString+ ",verticalScrollBar="+ verticalScrollBarString+ ",verticalScrollBarPolicy="+ verticalScrollBarPolicyString+ ",viewport="+ viewportString+ ",viewportBorder="+ viewportBorderString;}  }
class C{  protected void resetReplicationRequest(Request request,boolean isCrossContext){  Session contextSession=request.getSessionInternal(false);  if (contextSession instanceof DeltaSession) {    resetDeltaRequest(contextSession);    ((DeltaSession)contextSession).setPrimarySession(true);  }  if (isCrossContext) {    List<DeltaSession> sessions=crossContextSessions.get();    if (sessions != null && sessions.size() > 0) {      Iterator<DeltaSession> iter=sessions.iterator();      for (; iter.hasNext(); ) {        Session session=iter.next();        resetDeltaRequest(session);        if (session instanceof DeltaSession) {          ((DeltaSession)contextSession).setPrimarySession(true);        }      }    }  }}  }
class C{  public void onStop(final FileAlterationObserver observer){}  }
class C{  private void fireTreeStructureChanged(Object source,TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  testEmployee.setAttribute("class","Neither");  attrValue=testEmployee.getAttribute("class");  assertEquals("elementChangeAttributeValueAssert","Neither",attrValue);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void addLanguage(final String language){  if (language.length() < MetadataDescriptor.MAX_LANG_INDEX) {    if (!this.languages.contains(language)) {      this.languages.add(language);    }  } else {    throw new IllegalArgumentException(ErrorMessage.WMA_LENGTH_OF_LANGUAGE_IS_TOO_LARGE.getMsg(language.length() * 2 + 2));  }}  }
class C{  public static boolean save(String aFileName,String aContent){  try {    FileWriter fOut=new FileWriter(aFileName);    fOut.write(aContent);    fOut.flush();    fOut.close();    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  @Override public void addConfigurationElementCreatedListener(ConfigurationElementCreatedListener listener){  super.addConfigurationElementCreatedListener(listener);  for (  SchemaElementPanel panel : panels) {    panel.addConfigurationElementCreatedListener(listener);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssKerberosV5ApReqToken11Element createWssKerberosV5ApReqToken11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssKerberosV5ApReqToken11ElementImpl();}  }
class C{  public AuthenticationException(String msg){  super(msg);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  public static Map verifyAssertionAndGetSSMap(Response response){  com.sun.identity.saml.assertion.Subject subject=null;  SAMLServiceManager.SOAPEntry srcSite=null;  List assertions=response.getAssertion();  Iterator iter=assertions.iterator();  Assertion assertion=null;  String aIDString=null;  String issuer=null;  Iterator stmtIter=null;  Statement statement=null;  int stmtType=Statement.NOT_SUPPORTED;  com.sun.identity.saml.assertion.Subject sub=null;  SubjectConfirmation subConf=null;  Set confMethods=null;  String confMethod=null;  Date date=null;  while (iter.hasNext()) {    assertion=(Assertion)iter.next();    aIDString=assertion.getAssertionID();    if (idTimeMap.containsKey(aIDString)) {      debug.error("verifyAssertion " + "AndGetSSMap: Assertion: " + aIDString + " is used.");      return null;    }    issuer=assertion.getIssuer();    if ((srcSite=SAMLUtils.getSourceSite(issuer)) == null) {      debug.error("verifyAsserti " + "onAndGetSSMap: issuer is not on the Partner list.");      return null;    }    if (!assertion.isSignatureValid()) {      debug.error("verifyAssertion " + "AndGetSSMap: assertion's signature is not valid.");      return null;    }    if (!assertion.isTimeValid()) {      debug.error("verifyAssertion " + "AndGetSSMap: assertion's time is not valid.");      return null;    }    stmtIter=assertion.getStatement().iterator();    while (stmtIter.hasNext()) {      statement=(Statement)stmtIter.next();      stmtType=statement.getStatementType();      if ((stmtType == Statement.AUTHENTICATION_STATEMENT) || (stmtType == Statement.ATTRIBUTE_STATEMENT) || (stmtType == Statement.AUTHORIZATION_DECISION_STATEMENT)) {        sub=((SubjectStatement)statement).getSubject();        if (((subConf=sub.getSubjectConfirmation()) == null) || ((confMethods=subConf.getConfirmationMethod()) == null) || (confMethods.size() != 1)) {          debug.error("verify " + "AssertionAndGetSSMap: missing or extra " + "ConfirmationMethod.");          return null;        }        if (((confMethod=(String)confMethods.iterator().next()) == null) || (!confMethod.equals(SAMLConstants.CONFIRMATION_METHOD_BEARER))) {          debug.error("verify " + "AssertionAndGetSSMap:wrong ConfirmationMethod.");          return null;        }        if (stmtType == Statement.AUTHENTICATION_STATEMENT) {          if (subject == null) {            subject=sub;          }        }      }    }    if (debug.messageEnabled()) {      debug.message("Adding " + aIDString + " to idTimeMap.");    }    Conditions conds=assertion.getConditions();    if ((conds != null) && ((date=conds.getNotOnorAfter()) != null)) {      cGoThrough.addElement(aIDString);      idTimeMap.put(aIDString,new Long(date.getTime()));    } else {      cPeriodic.addElement(aIDString);      idTimeMap.put(aIDString,aIDString);    }  }  if ((subject == null) || (srcSite == null)) {    debug.error("verifyAssertion AndGetSSMap: couldn't find Subject.");    return null;  }  Map ssMap=new HashMap();  ssMap.put(SAMLConstants.SUBJECT,subject);  ssMap.put(SAMLConstants.SOURCE_SITE_SOAP_ENTRY,srcSite);  ssMap.put(SAMLConstants.POST_ASSERTION,assertions);  return ssMap;}  }
class C{  public SysexMessage(){  this(new byte[2]);  data[0]=(byte)(SYSTEM_EXCLUSIVE & 0xFF);  data[1]=(byte)(ShortMessage.END_OF_EXCLUSIVE & 0xFF);}  }
class C{  @Override public void addDateHeader(String name,long date){  this._getHttpServletResponse().addDateHeader(name,date);}  }
class C{  public void verifyAA(){  int challengeLength=8;  byte[] challenge=new byte[challengeLength];  random.nextBytes(challenge);  ActiveAuthenticationResult aaResult=executeAA(challenge);  verifyAA(aaResult);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationElement createFederationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationElementImpl();}  }
class C{  public void addMembers(String universalId,Set names) throws AMConsoleException {  if ((names == null) || names.isEmpty()) {    throw new AMConsoleException("entities.members.add.no.selection.message");  }  SSOToken ssoToken=getUserSSOToken();  String currentId="";  try {    AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);    String[] params=new String[2];    params[0]=universalId;    for (Iterator iter=names.iterator(); iter.hasNext(); ) {      String id=(String)iter.next();      AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);      currentId=id;      params[1]=id;      logEvent("ATTEMPT_ADD_IDENTITY_MEMBER",params);      amid.addMember(amidentity);      logEvent("SUCCEED_ADD_IDENTITY_MEMBER",params);    }  } catch (  SSOException e) {    String[] paramsEx={universalId,currentId,getErrorString(e)};    logEvent("SSO_EXCEPTION_ADD_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.addMembers",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={universalId,currentId,getErrorString(e)};    logEvent("IDM_EXCEPTION_ADD_IDENTITY_MEMBER",paramsEx);    debug.warning("EntitiesModelImpl.addMembers",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public Comment createComment(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public GuiResources newGuiResources(String bundle_key){  return new GuiResources(stat,bundle_key);}  }
class C{  public Object clone(){  try {    return new RoleUnresolved(roleName,roleValue,problemType);  } catch (  IllegalArgumentException exc) {    return null;  }}  }
class C{  public DynamicGroup(CreationTemplate template,AttrSet attrSet,Guid baseGuid,String filter,int scope) throws UMSException {  super(template,attrSet);  try {    setUrl(baseGuid,Filter.valueOf(filter),SearchScope.valueOf(scope));  } catch (  Exception e) {    debug.error("DynamicGroup : Exception : " + e.getMessage());  }}  }
class C{  public final String toString(){  int length=(m_lastChunk << m_chunkBits) + m_firstFree;  return getString(new StringBuffer(length),0,0,length).toString();}  }
class C{  boolean isCurrentConfigurationValid(){  return AMSetupServlet.isCurrentConfigurationValid();}  }
class C{  public DSInfo toDSInfo(){  return dsInfo;}  }
class C{  public static boolean notifyAbandonedOperations(){  return directoryServer.notifyAbandonedOperations;}  }
class C{  public boolean shutdownRequested(){  return shutdownRequested;}  }
class C{  public boolean preAuthentication(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Object session,String reqID,String relayState) throws SAML2Exception {  return false;}  }
class C{  public FrameBodyTSOC(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Override public int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  int n=cipher.update(input,inputOffset,inputLen,output,outputOffset);  return n + cipher.doFinal(output,outputOffset + n);}  }
class C{  public Reference(String className,String factory,String factoryLocation){  this(className);  classFactory=factory;  classFactoryLocation=factoryLocation;}  }
class C{  public CredentialExpiredException(String msg){  super(msg);}  }
class C{  public boolean promptForCertificateConfirmation(Throwable errorRaised,ApplicationTrustManager usedTrustManager,HostPort hostPort,LocalizedLogger logger){  final ApplicationTrustManager.Cause cause=usedTrustManager != null ? usedTrustManager.getLastRefusedCause() : null;  logger.debug(INFO_CERTIFICATE_EXCEPTION_CAUSE.get(cause));  if (cause == null) {    app.println(getThrowableMsg(INFO_ERROR_CONNECTING_TO_LOCAL.get(),errorRaised));    return false;  }  String host=hostPort.getHost();  int port=hostPort.getPort();  final String authType=usedTrustManager.getLastRefusedAuthType();  if (authType == null) {    logger.warn(ERROR_CERTIFICATE_NULL_AUTH_TYPE.get());  } else {    app.println(ApplicationTrustManager.Cause.NOT_TRUSTED.equals(authType) ? INFO_CERTIFICATE_NOT_TRUSTED_TEXT_CLI.get(host,port) : INFO_CERTIFICATE_NAME_MISMATCH_TEXT_CLI.get(host,port,host,host,port));  }  final X509Certificate[] chain=usedTrustManager.getLastRefusedChain();  if (chain == null) {    logger.warn(ERROR_CERTIFICATE_NULL_CHAIN.get());    return false;  }  if (host == null) {    logger.warn(ERROR_CERTIFICATE_NULL_HOST_NAME.get());  }  return checkServerCertificate(chain,authType,host);}  }
class C{  public void testAbsPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  String result="123809648392384754573567356745735635678902957849027687.87678287";  assertEquals("incorrect value",result,aNumber.abs().toString());}  }
class C{  public void draw(java.awt.Graphics p_graphics,freert.graphics.GdiContext p_graphics_context,double p_intensity){  for (  ExpandRoomFreespaceComplete curr_room : complete_expansion_rooms)   curr_room.draw(p_graphics,p_graphics_context,p_intensity);  Collection<BrdItem> item_list=r_board.get_items();  for (  BrdItem curr_item : item_list) {    ArtItem autoroute_info=curr_item.art_item_get();    if (autoroute_info == null)     continue;    autoroute_info.draw(p_graphics,p_graphics_context,p_intensity);  }}  }
class C{  public SymbolTable(){  this(TABLE_SIZE);}  }
class C{  public static String envParametersToXMLString(Map envMap){  StringBuilder xmlSB=new StringBuilder(1000);  xmlSB.append('<').append(ENV_PARAMETERS).append('>').append(CRLF);  Set keySet=envMap.keySet();  Iterator keyIter=keySet.iterator();  while (keyIter.hasNext()) {    String name=(String)keyIter.next();    Set values=(Set)envMap.get(name);    xmlSB.append(attributeValuePairToXMLString(name,values));  }  xmlSB.append("</").append(ENV_PARAMETERS).append('>').append(CRLF);  return xmlSB.toString();}  }
class C{  public boolean isExtensible(){  return isExtensibleObject;}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  if (getParameter("realm") == null) {    throw new MalformedChallengeException("missing realm in challange");  }  if (getParameter("nonce") == null) {    throw new MalformedChallengeException("missing nonce in challange");  }  boolean unsupportedQop=false;  String qop=getParameter("qop");  if (qop != null) {    StringTokenizer tok=new StringTokenizer(qop,",");    while (tok.hasMoreTokens()) {      String variant=tok.nextToken().trim();      if (variant.equals("auth")) {        qopVariant=QOP_AUTH;        break;      } else       if (variant.equals("auth-int")) {        qopVariant=QOP_AUTH_INT;      } else {        unsupportedQop=true;      }    }  }  if (unsupportedQop && (qopVariant == QOP_MISSING)) {    throw new MalformedChallengeException("None of the qop methods is supported");  }  this.cnonce=null;  this.complete=true;}  }
class C{  public static int[] appendInt(int[] cur,int val){  if (cur == null) {    return new int[]{val};  }  final int N=cur.length;  for (int i=0; i < N; i++) {    if (cur[i] == val) {      return cur;    }  }  int[] ret=new int[N + 1];  System.arraycopy(cur,0,ret,0,N);  ret[N]=val;  return ret;}  }
class C{  @Override public String toString(){  return "FastDateFormat[" + printer.getPattern() + ","+ printer.getLocale()+ ","+ printer.getTimeZone().getID()+ "]";}  }
class C{  public void testReceive_UnconnectedCloseReadonly() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL).asReadOnlyBuffer();  assertTrue(dst.isReadOnly());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.receive(dst);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public Particle(){  mCircleRadius=5;  init();}  }
class C{  public FrameBodyTCON(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public Attr createAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void remove_ratsnest(){  ratsnest=null;}  }
class C{  public PowerBar(GuiScreen screen,int x,int y,BackgroundType type){  this.background=type;  this.screen=screen;  this.x=x;  this.y=y;}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  Node cdataNode;  int nodeType;  String cdataNodeName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  cdataNode=cdataName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (!equals(4,nodeType)) {    cdataNode=doc.createCDATASection("");  }  cdataNodeName=cdataNode.getNodeName();  assertEquals("cdataNodeName","#cdata-section",cdataNodeName);}  }
class C{  public FrameBodySYTC(final ByteBuffer byteBuffer,final int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void refresh_windows(){  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows)   cur_subwindow.refresh();}  }
class C{  @Action(operationDescription=@Operation(description=SNS_MESSAGE_RESOURCE + ACTION + "register."+ DESCRIPTION,errors=@ApiError(code=400,description=SNS_MESSAGE_RESOURCE + ERROR_400_DESCRIPTION)),request=@Schema(schemaResource="SnsMessageResource.register.schema.json"),response=@Schema(schemaResource="SnsMessageResource.response.schema.json")) public Promise<ActionResponse,ResourceException> register(Context context,ActionRequest actionRequest){  return handle(context,actionRequest,RequestType.REGISTER);}  }
class C{  public void writeElement(String namespace,String name,int type){  writeElement(namespace,null,name,type);}  }
class C{  public Collection<InternalSession> filterPermissionToAccess(final SessionID actorsSessionID,final Collection<InternalSession> sessionsActedUpon) throws SessionException {  Collection<InternalSession> toReturn=new ArrayList<>();  try {    if (hasTopLevelAdminRole(actorsSessionID)) {      toReturn.addAll(sessionsActedUpon);      return toReturn;    }    AMIdentity user=getUser(actorsSessionID);    Set orgList=user.getAttribute("iplanet-am-session-get-valid-sessions");    if (orgList == null) {      return Collections.emptySet();    }    for (    InternalSession session : sessionsActedUpon) {      if (orgList.contains(session.getClientDomain())) {        toReturn.add(session);      }    }  } catch (  SSOException|IdRepoException e) {    throw new SessionException(e);  }  return toReturn;}  }
class C{  public static boolean deleteDir(File dir){  return deleteDir(dir,true);}  }
class C{  public final static String formatRequestLine(final RequestLine reqline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatRequestLine(null,reqline).toString();}  }
class C{  public static <T>T newInstance(final String className){  try {    return (T)Thread.currentThread().getContextClassLoader().loadClass(className).newInstance();  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private SOAPMessage signLogoutRequest(SOAPMessage msg,String idAttrName,String id) throws SAMLException, FSMsgException {  FSUtils.debug.message("Entered FSSingleLogoutHandler::signLogoutRequest");  String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);  if (certAlias == null || certAlias.length() == 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSingleLogoutHandler::" + " signLogoutRequest: couldn't obtain " + "this site's cert alias.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSingleLogoutHandler::signLogoutRequest" + " Provider's certAlias is found: " + certAlias);  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);  String xpath="//*[local-name()=\'ProviderID\']";  manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),idAttrName,id,false,xpath);  return FSServiceUtils.convertDOMToSOAP(doc);}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public void toggle_select_action(Point2D p_point){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  StateInteractive return_state=((StateSelectedItem)interactive_state).toggle_select(location);  if (return_state != interactive_state) {    set_interactive_state(return_state);    repaint();  }}  }
class C{  public UnmarshalException(String s){  super(s);}  }
class C{  public final void testGetEncoded03() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]),epki.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public static Class<?> convertPrimitiveType(Class<?> clazz){  if (clazz.equals(char.class)) {    return Character.class;  } else   if (clazz.equals(int.class)) {    return Integer.class;  } else   if (clazz.equals(boolean.class)) {    return Boolean.class;  } else   if (clazz.equals(double.class)) {    return Double.class;  } else   if (clazz.equals(byte.class)) {    return Byte.class;  } else   if (clazz.equals(short.class)) {    return Short.class;  } else   if (clazz.equals(long.class)) {    return Long.class;  } else   if (clazz.equals(float.class)) {    return Float.class;  } else {    return clazz;  }}  }
class C{  public String parse(String source){  StringBuffer sbuf=new StringBuffer(source);  Iterator key_it=argmap.keySet().iterator();  while (key_it.hasNext()) {    String it_key=(String)key_it.next();    String it_obj=formatObject(argmap.get(it_key));    int it_idx=-1;    do {      it_idx=sbuf.toString().indexOf(it_obj,++it_idx);      if (it_idx >= 0) {        sbuf.replace(it_idx,it_idx + it_obj.length(),ldel + it_key + rdel);      }    } while (it_idx != -1);  }  return sbuf.toString();}  }
class C{  protected void OrExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  AndExpr();  if ((null != m_token) && tokenIs("or")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_OR);    OrExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  @Override protected Object createSsoServerSessSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   sessSvcGroup=new SsoServerSessSvcImpl(this,server); else   sessSvcGroup=new SsoServerSessSvcImpl(this);  return sessSvcGroup;}  }
class C{  public static String toLowerCase(Locale locale,String s,char[] value,int offset,int count){  String languageCode=locale.getLanguage();  if (languageCode.equals("tr") || languageCode.equals("az") || languageCode.equals("lt")) {    return ICU.toLowerCase(s,locale.toString());  }  char[] newValue=null;  int newCount=0;  for (int i=offset, end=offset + count; i < end; ++i) {    char ch=value[i];    char newCh;    if (ch == LATIN_CAPITAL_I_WITH_DOT || Character.isHighSurrogate(ch)) {      return ICU.toLowerCase(s,locale.toString());    } else     if (ch == GREEK_CAPITAL_SIGMA && isFinalSigma(value,offset,count,i)) {      newCh=GREEK_SMALL_FINAL_SIGMA;    } else {      newCh=Character.toLowerCase(ch);    }    if (newValue == null && ch != newCh) {      newValue=new char[count];      newCount=i - offset;      System.arraycopy(value,offset,newValue,0,newCount);    }    if (newValue != null) {      newValue[newCount++]=newCh;    }  }  return newValue != null ? new String(0,newCount,newValue) : s;}  }
class C{  public void addInternalSessionListener(){  try {    if (SessionNotificationHandler.handler == null) {      SessionNotificationHandler.handler=new SessionNotificationHandler(SessionCache.getInstance());      PLLClient.addNotificationHandler(SESSION_SERVICE,SessionNotificationHandler.handler);    }    String url=WebtopNaming.getNotificationURL().toString();    SessionOperations operations=sessionOperationStrategy.getOperation(sessionID);    operations.addSessionListener(this,url);  } catch (  Exception e) {  }}  }
class C{  public boolean isFederationActive(String userID,String providerID) throws FSAccountMgmtException {  FSUtils.debug.message("FSAccountManager.isFederationActive() : called");  if (userID == null) {    FSUtils.debug.error("FSAccountManager.isFederationActive():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  if ((providerID == null) || (providerID.length() <= 0)) {    FSUtils.debug.error("FSAccountManager.isFederationActive() : " + "Invalid Argument : ProviderID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_PROVIDER_ID,null);  }  Set existFedInfoSet=null;  try {    existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.isFederationActive() :Exception: ",ame);    throw new FSAccountMgmtException(ame.getMessage());  }  if (existFedInfoSet != null && !existFedInfoSet.isEmpty()) {    String filter=FSAccountUtils.createFilter(providerID);    Iterator i=existFedInfoSet.iterator();    while (i.hasNext()) {      String existFedInfoStr=(String)i.next();      if (existFedInfoStr.indexOf(filter) >= 0) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAccountManager.isFederationActive(): " + "value found: " + existFedInfoStr);        }        FSAccountFedInfo afi=FSAccountUtils.stringToObject(existFedInfoStr);        if (afi.isFedStatusActive()) {          return true;        }        return false;      }    }  }  FSUtils.debug.error("FSAccountManager.isFederationActive() : " + "Account Federation Info not Found");  throw new FSAccountMgmtException(IFSConstants.ACT_FED_INFO_NOT_FOUND,null);}  }
class C{  public boolean hasGetEffectiveRightsControl(){  return this.hasGetEffectiveRightsControl;}  }
class C{  @DataProvider(name="testSafeDataFromRSProvider") private Object[][] testSafeDataFromRSProvider(){  List<List<Object>> objectArrayList=new ArrayList<>();  objectArrayList=addPossibleParameters(objectArrayList,1,2,3);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,true,false);  return toDataProvider(objectArrayList);}  }
class C{  public static void main(String args[]){  String fileName=args[0];  SniffMessageList.fileName=fileName;  if (args[0] == null) {    System.out.println("Please specify sniffer file");    System.out.println("Bailing Out!");    System.exit(0);  }  SniffFileParser sfp=new SniffFileParser(args[0]);  SniffSessionList sniffSessions=sfp.getSniffSessionList();  LogFileParser parser=new LogFileParser();  Hashtable traces=parser.parseLogsFromString(sniffSessions.toXML());  new TracesViewer(traces,fileName,"Ethereal Sniffer Trace",null).show();}  }
class C{  void createImpl(boolean stream) throws SocketException {  if (impl == null)   setImpl();  try {    impl.create(stream);    created=true;  } catch (  IOException e) {    throw new SocketException(e.getMessage());  }}  }
class C{  public final byte readByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (byte)(ch);}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType){  return showInternalConfirmDialog(parentComponent,message,title,optionType,QUESTION_MESSAGE);}  }
class C{  public FrameBodyWCOP(){}  }
class C{  public JarOutputStream(OutputStream out,Manifest man) throws IOException {  super(out);  if (man == null) {    throw new NullPointerException("man");  }  ZipEntry e=new ZipEntry(JarFile.MANIFEST_NAME);  putNextEntry(e);  man.write(new BufferedOutputStream(this));  closeEntry();}  }
class C{  public static char[] createSelfSignedCertificatePwd(){  int pwdLength=50;  char[] pwd=new char[pwdLength];  Random random=new Random();  for (int pos=0; pos < pwdLength; pos++) {    int type=getRandomInt(random,3);    char nextChar=getRandomChar(random,type);    pwd[pos]=nextChar;  }  return pwd;}  }
class C{  public static String ipBytesToStr(byte[] ip){  try {    return InetAddress.getByAddress(null,ip).getHostAddress();  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));  }}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  FileStateChecker(ChecksumFile checksum) throws IOException, NoSuchAlgorithmException {  this.checksum=checksum;}  }
class C{  public CassandraResults equalitySelect(String table,List<String> projection,List<DbDataContainer> predicatesAndValues) throws EmptyResultException, GroundDBException {  String select="select ";  for (  String item : projection) {    select+=item + ", ";  }  select=select.substring(0,select.length() - 2) + " from " + table;  if (predicatesAndValues.size() > 0) {    select+=" where ";    for (    DbDataContainer container : predicatesAndValues) {      select+=container.getField() + " = ? and ";    }    select=select.substring(0,select.length() - 4);  }  BoundStatement statement=new BoundStatement(this.session.prepare(select + "ALLOW FILTERING;"));  int index=0;  for (  DbDataContainer container : predicatesAndValues) {    CassandraClient.setValue(statement,container.getValue(),container.getGroundType(),index);    index++;  }  LOGGER.info("Executing query: " + statement.preparedStatement().getQueryString() + ".");  ResultSet resultSet=this.session.execute(statement);  if (resultSet == null || resultSet.isExhausted()) {    throw new EmptyResultException("No results found for query: " + statement.toString());  }  return new CassandraResults(resultSet);}  }
class C{  public void println(String s){  javaLine++;  writer.println(s);}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  boolean workerStarted=false;  boolean workerAdded=false;  Worker w=null;  try {    w=new Worker(firstTask);    final Thread t=w.thread;    if (t != null) {      final ReentrantLock mainLock=this.mainLock;      mainLock.lock();      try {        int rs=runStateOf(ctl.get());        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {          if (t.isAlive())           throw new IllegalThreadStateException();          workers.add(w);          int s=workers.size();          if (s > largestPoolSize)           largestPoolSize=s;          workerAdded=true;        }      }  finally {        mainLock.unlock();      }      if (workerAdded) {        t.start();        workerStarted=true;      }    }  }  finally {    if (!workerStarted)     addWorkerFailed(w);  }  return workerStarted;}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){  super.initialize(cordova,webView);  Log.v(TAG,"Init FingerprintAuth");  packageName=cordova.getActivity().getApplicationContext().getPackageName();  mPluginResult=new PluginResult(PluginResult.Status.NO_RESULT);  if (android.os.Build.VERSION.SDK_INT < 23) {    return;  }  mKeyguardManager=cordova.getActivity().getSystemService(KeyguardManager.class);  mFingerPrintManager=cordova.getActivity().getApplicationContext().getSystemService(FingerprintManager.class);  try {    mKeyGenerator=KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,ANDROID_KEY_STORE);    mKeyStore=KeyStore.getInstance(ANDROID_KEY_STORE);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Failed to get an instance of KeyGenerator",e);  }catch (  NoSuchProviderException e) {    throw new RuntimeException("Failed to get an instance of KeyGenerator",e);  }catch (  KeyStoreException e) {    throw new RuntimeException("Failed to get an instance of KeyStore",e);  }  try {    mCipher=Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + "/" + KeyProperties.BLOCK_MODE_CBC+ "/"+ KeyProperties.ENCRYPTION_PADDING_PKCS7);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Failed to get an instance of Cipher",e);  }catch (  NoSuchPaddingException e) {    throw new RuntimeException("Failed to get an instance of Cipher",e);  }}  }
class C{  void recomposeKeys(KeyDeclaration keyDecl){  m_keyDecls.addElement(keyDecl);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl();}  }
class C{  public Type1Parser(String metricsPath,String binaryPath,byte[] afm,byte[] pfb) throws java.io.IOException {  this.afmData=afm;  this.pfbData=pfb;  this.afmPath=metricsPath;  this.pfbPath=binaryPath;}  }
class C{  protected final void fireServiceRevoked(Class serviceClass,boolean revokeNow){  Object[] copy;  BeanContextServiceRevokedEvent bcsre=new BeanContextServiceRevokedEvent(getBeanContextServicesPeer(),serviceClass,revokeNow);synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServicesListener)copy[i]).serviceRevoked(bcsre);  }}  }
class C{  public static void sort(long[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  private String parseString(){  return readInputUntil(WHITESPACE_SPACE,WHITESPACE_TAB,WHITESPACE_NEWLINE,WHITESPACE_CARRIAGE_RETURN,ARRAY_ITEM_DELIMITER_TOKEN,DICTIONARY_ITEM_DELIMITER_TOKEN,DICTIONARY_ASSIGN_TOKEN,ARRAY_END_TOKEN);}  }
class C{  public RadiusServiceConfig(boolean isEnabled,int port,ThreadPoolConfig poolCfg,ClientConfig... clientConfigs){  this.isEnabled=isEnabled;  this.port=port;  this.threadPoolConfig=poolCfg;  for (  final ClientConfig c : clientConfigs) {    this.clients.put(c.getIpaddr(),c);  }}  }
class C{  @Override public void add(Permission permission){  perms.add(permission);}  }
class C{  public KeywordMap(boolean ignoreCase,int mapLength){  this.mapLength=mapLength;  this.ignoreCase=ignoreCase;  map=new Keyword[mapLength];}  }
class C{  public static IntegerArgument portArgument(final int defaultPort,final LocalizableMessage description) throws ArgumentException {  return IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(description != null ? description : INFO_DESCRIPTION_ADMIN_PORT.get()).range(1,65535).defaultValue(defaultPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();}  }
class C{  private RecyclerView.ItemDecoration parseTransforms(String raw){  if (raw == null) {    return null;  }  float scaleX=0f, scaleY=0f;  int translateX=0, translateY=0;  float opacity=0f;  int rotate=0;  Matcher matcher=transformPattern.matcher(raw);  while (matcher.find()) {    String match=matcher.group();    String name=matcher.group(1);    try {switch (name) {case "scale":        scaleX=Float.parseFloat(matcher.group(2));      scaleY=Float.parseFloat(matcher.group(3));    break;case "translate":  translateX=Integer.parseInt(matcher.group(2));translateY=Integer.parseInt(matcher.group(3));break;case "opacity":opacity=Float.parseFloat(matcher.group(2));break;case "rotate":rotate=Integer.parseInt(matcher.group(2));break;default :WXLogUtils.e(TAG,"Invaild transform expression:" + match);break;}} catch (NumberFormatException e) {e.printStackTrace();WXLogUtils.e(TAG,"Invaild transform expression:" + match);}}return new TransformItemDecoration(getOrientation() == VERTICAL,opacity,translateX,translateY,rotate,scaleX,scaleY);}  }
class C{  private ByteBuffer startCreateBasicSecondPage(OggVorbisTagReader.OggVorbisHeaderSizes vorbisHeaderSizes,int newCommentLength,int newSecondPageLength,OggPageHeader secondPageHeader,ByteBuffer newComment) throws IOException {  logger.fine("WriteOgg Type 1");  byte[] segmentTable=createSegmentTable(newCommentLength,vorbisHeaderSizes.getSetupHeaderSize(),vorbisHeaderSizes.getExtraPacketList());  int newSecondPageHeaderLength=OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + segmentTable.length;  logger.fine("New second page header length:" + newSecondPageHeaderLength);  logger.fine("No of segments:" + segmentTable.length);  ByteBuffer secondPageBuffer=ByteBuffer.allocate(newSecondPageLength + newSecondPageHeaderLength);  secondPageBuffer.order(ByteOrder.LITTLE_ENDIAN);  secondPageBuffer.put(secondPageHeader.getRawHeaderData(),0,OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH - 1);  secondPageBuffer.put((byte)segmentTable.length);  for (  byte aSegmentTable : segmentTable) {    secondPageBuffer.put(aSegmentTable);  }  secondPageBuffer.put(newComment);  return secondPageBuffer;}  }
class C{  int refCount(){  return lock.refCount.get();}  }
class C{  public Resource objectClasses(final String... objectClasses){  this.objectClasses.add((Object[])objectClasses);  return this;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static void restartBridge(boolean debug){  WXEnvironment.sDebugMode=debug;  WXSDKManager.getInstance().restartBridge();}  }
class C{  public int plaline_len(){  return lines_list.size();}  }
class C{  @Override public void addFilterMap(FilterMap filterMap){  validateFilterMap(filterMap);  filterMaps.add(filterMap);  fireContainerEvent("addFilterMap",filterMap);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public TracesSocket(String fileName,String port) throws Exception {  this.fileName=fileName;  this.port=port;  System.out.println("Waiting for a connection on port: " + port);  ServerSocket serverSocket=new ServerSocket(Integer.valueOf(port).intValue());  Socket newsock=serverSocket.accept();  is=newsock.getInputStream();  fw=new FileWriter(fileName);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public ContextNotEmptyException(){  super();}  }
class C{  Object stringToValue(String text,Format f) throws ParseException {  if (f == null) {    return text;  }  Object value=f.parseObject(text);  return convertValueToValueClass(value,getValueClass());}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void addFile(String filename,String filePath){  int pathIndex=filePathList.indexOf(filePath);  if (pathIndex == -1) {    fileNameList.add(filename);    filePathList.add(filePath);  }}  }
class C{  @Override public void paintIcon(Component c,Graphics g,int x,int y){  Painter painter=(Painter)UIManager.get(prefix + "[Enabled]." + key);  if (painter != null) {    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;    Graphics2D gfx=(Graphics2D)g;    gfx.translate(x,y);    painter.paint(gfx,jc,width,height);    gfx.translate(-x,-y);  }}  }
class C{  public JCheckBox(String text,Icon icon,boolean selected){  super(text,icon,selected);  setUIProperty("borderPainted",Boolean.FALSE);  setHorizontalAlignment(LEADING);}  }
class C{  public static AttrSet mapToAttrSet(Map map){  return mapToAttrSet(map,false);}  }
class C{  @Override public void write(byte[] b,int off,int len){  for (  OutputStream s : targetStreams) {    try {      s.write(b,off,len);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  void deleteSubOrganization(String subOrgName) throws SMSException {  try {    if (subOrgName == null || subOrgName.trim().length() == 0) {      if (parentOrg.isExists()) {        parentOrg.delete(true);      }      return;    }    if (subOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_NAME)) {      return;    }    Set subOrgDNs=parentOrg.searchSubOrganizations(subOrgName,AMConstants.SCOPE_ONE);    if (subOrgDNs != null && !subOrgDNs.isEmpty()) {      for (Iterator items=subOrgDNs.iterator(); items.hasNext(); ) {        String dn=(String)items.next();        AMOrganization subOrg=parentOrg.getSubOrganization(dn);        if (subOrg != null) {          subOrg.delete(true);        }      }    } else {      AMOrganization subOrg=parentOrg.getSubOrganization(subOrgName);      if (subOrg != null) {        subOrg.delete(true);      }    }  } catch (  AMException ame) {    if (debug.messageEnabled()) {      debug.message("OrgConfigViaAMSDK::deleteSubOrganization" + ": failed with AMException",ame);    }    throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));  }catch (  SSOException ssoe) {    throw (new SMSException(bundle.getString("sms-INVALID_SSO_TOKEN"),ssoe,"sms-INVALID_SSO_TOKEN"));  }}  }
class C{  public void compose(StylesheetRoot sroot){  if (DEBUG) {    System.out.println("Before wildcard insert...");    dumpAssociationTables();  }  if (null != m_wildCardPatterns) {    Enumeration associations=m_patternTable.elements();    while (associations.hasMoreElements()) {      TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();      TemplateSubPatternAssociation wild=m_wildCardPatterns;      while (null != wild) {        try {          head=insertAssociationIntoList(head,(TemplateSubPatternAssociation)wild.clone(),true);        } catch (        CloneNotSupportedException cnse) {        }        wild=wild.getNext();      }    }  }  if (DEBUG) {    System.out.println("After wildcard insert...");    dumpAssociationTables();  }}  }
class C{  public static List<String> parseExpression(String expression){  return convertForJSSE(parse(expression));}  }
class C{  public void addRowSetListener(RowSetListener listener){  listeners.add(listener);}  }
class C{  public static String rightTrim(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.replaceAll("\\s+$","");}  }
class C{  public boolean beginContentStaticWarningDisplay(ChildDisplayEvent event){  lockWarning=ac.getLockoutMsg();  accountLocked=ac.isLockedOut();  if (loginDebug.messageEnabled()) {    loginDebug.message("lock warning message is : " + lockWarning);  }  return ((lockWarning != null) && (lockWarning.length() > 0));}  }
class C{  public static Date stringToDate(String strDate) throws ParseException {  int[] diffTime=null;  boolean plusTime=true;  int idxT=strDate.indexOf('T');  if (idxT == -1) {    throw new ParseException("Invalid Date Format",0);  }  int idxDiffUTC=strDate.indexOf('-',idxT);  if (idxDiffUTC == -1) {    idxDiffUTC=strDate.indexOf('+',idxT);    plusTime=false;  }  if (idxDiffUTC != -1) {    diffTime=getDiffTime(strDate,idxDiffUTC);    strDate=strDate.substring(0,idxDiffUTC);  }  char lastChar=strDate.charAt(strDate.length() - 1);  if ((lastChar == 'z') || (lastChar == 'Z')) {    strDate=strDate.substring(0,strDate.length() - 1);  }  return createDate(strDate,diffTime,plusTime);}  }
class C{  public boolean bool(){  return true;}  }
class C{  void evaluateInitialStage(final BindOperation bindOp){  this.bindOp=bindOp;  final ClientConnection clientConn=bindOp.getClientConnection();  try {    final ByteString challenge=evaluateResponse(ByteString.empty());    bindOp.setResultCode(ResultCode.SASL_BIND_IN_PROGRESS);    bindOp.setServerSASLCredentials(challenge);    clientConn.setSASLAuthStateInfo(this);  } catch (  final SaslException e) {    logger.traceException(e);    final LocalizableMessage msg=ERR_SASL_PROTOCOL_ERROR.get(mechanism,getExceptionMessage(e));    handleError(msg);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("Transaction[");  sb.append("]");  return (sb.toString());}  }
class C{  public static void assertSpecificLang(String specificLang) throws XMPException {  if (specificLang == null || specificLang.length() == 0) {    throw new XMPException("Empty specific language",XMPError.BADPARAM);  }}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  ChoiceFormat other=(ChoiceFormat)obj;  return (Arrays.equals(choiceLimits,other.choiceLimits) && Arrays.equals(choiceFormats,other.choiceFormats));}  }
class C{  protected static boolean isBufferEmpty(byte[] buffer){  for (  byte aBuffer : buffer) {    if (aBuffer != 0) {      return false;    }  }  return true;}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  protected static int calculatePort(String projectVersion){  int basePort=4;  String number;  int dashIndex=projectVersion.indexOf('-');  boolean snapshot=false;  if (dashIndex > -1) {    number=projectVersion.substring(0,dashIndex);    snapshot=true;  } else {    number=projectVersion;  }  number=number.replaceAll("\\Q.\\E","");  int numLength=number.length();  if (number.length() >= 3) {    number=number.substring(numLength - 3,numLength);  }  while (number.length() < 3) {    number+="0";  }  if (snapshot) {    number+="1";  } else {    number+="0";  }  number=basePort + number;  return Integer.parseInt(number);}  }
class C{  public LexerCore(String lexerName,String buffer){  super(buffer);  this.currentLexerName=lexerName;}  }
class C{  @Override public Collection<Object> values(){  checkInitialized();  return Collections.unmodifiableCollection(super.values());}  }
class C{  public final boolean connect_to_trace(PlaPointInt p_from_point,BrdTracep p_to_trace,int p_pen_half_width,int p_cl_type){  PlaPoint first_corner=p_to_trace.corner_first();  PlaPoint last_corner=p_to_trace.corner_last();  NetNosList net_no_arr=p_to_trace.net_nos;  Polyline apoly=p_to_trace.polyline();  if (apoly.contains(p_from_point))   return true;  Polyline connection_line=apoly.projection_line(p_from_point);  if (connection_line == null || !connection_line.is_valid())   return false;  int trace_layer=p_to_trace.get_layer();  if (!check_trace(connection_line,trace_layer,p_pen_half_width,net_no_arr,p_cl_type))   return false;  if (changed_area != null) {    for (int index=0; index < connection_line.corner_count(); ++index) {      changed_area.join(connection_line.corner_approx(index),trace_layer);    }  }  insert_trace(connection_line,trace_layer,p_pen_half_width,net_no_arr,p_cl_type,ItemFixState.UNFIXED);  if (!p_from_point.equals(first_corner)) {    BrdTracep tail=get_trace_tail(first_corner,trace_layer,net_no_arr);    if (tail != null && !tail.is_user_fixed()) {      remove_item(tail);    }  }  if (!p_from_point.equals(last_corner)) {    BrdTracep tail=get_trace_tail(last_corner,trace_layer,net_no_arr);    if (tail != null && !tail.is_user_fixed()) {      remove_item(tail);    }  }  return true;}  }
class C{  public LogoutRequestImpl(Element element) throws SAML2Exception {  parseElement(element);  if (isSigned) {    signedXMLString=XMLUtils.print(element);  }}  }
class C{  protected void serializePI(ProcessingInstruction node) throws SAXException {  ProcessingInstruction pi=node;  String name=pi.getNodeName();  if ((fFeatures & WELLFORMED) != 0) {    isPIWellFormed(node);  }  if (!applyFilter(node,NodeFilter.SHOW_PROCESSING_INSTRUCTION)) {    return;  }  if (name.equals("xslt-next-is-raw")) {    fNextIsRaw=true;  } else {    this.fSerializer.processingInstruction(name,pi.getData());  }}  }
class C{  public void addLayoutComponent(Component component,Object constraints){  if (constraints instanceof Constraints) {    putConstraints(component,(Constraints)constraints);  }}  }
class C{  public Enumeration children(){  if (children == null) {    return EMPTY_ENUMERATION;  } else {    return children.elements();  }}  }
class C{  public void addMember(Guid guid) throws UMSException {  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  DataLayer.getInstance().addAttributeValue(principal,guid,MEMBER_ATTR_NAME,this.getDN());}  }
class C{  public String[] convertString2Array(String str){  String[] arrayMember=str.split("\",\"");  arrayMember[0]=arrayMember[0].substring(2);  arrayMember[arrayMember.length - 1]=arrayMember[arrayMember.length - 1].substring(0,arrayMember[arrayMember.length - 1].length() - 2);  return arrayMember;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node employeeNode;  Node textNode;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("em");  employeeNode=elementList.item(1);  textNode=employeeNode.getFirstChild();  childList=textNode.getChildNodes();  length=(int)childList.getLength();  assertEquals("length_zero",0,length);}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  Object params[]={param1};  lr.setParameters(params);  doLog(lr,bundleName);}  }
class C{  public void bodyBlock(){  throw new EmperorHasNoClothes();}  }
class C{  public TagField createField(ID3v24FieldKey id3Key,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (id3Key == null) {    throw new KeyNotFoundException();  }  return super.doCreateTagField(new FrameAndSubId(id3Key.getFrameId(),id3Key.getSubId()),value);}  }
class C{  private boolean not(String cipher1,String cipher2,String match1,String match2){  return (!cipher1.equals(match1) || !cipher2.equals(match2)) && (!cipher2.equals(match1) || !cipher1.equals(match2));}  }
class C{  public void registerService(SSOToken token,String orgDN,String serviceName) throws AMException, SSOException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,orgDN,serviceName};    client.send(client.encodeMessage("registerService",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.registerService : orgDN=" + orgDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.registerService: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  SSOException ssoe) {    getDebug().error("RemoteServicesImpl.registerService: caught SSOException=",ssoe);    throw ssoe;  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.registerService : orgDN=" + orgDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public void appendBit(int bit){  if (!(bit == 0 || bit == 1)) {    throw new IllegalArgumentException("Bad bit");  }  int numBitsInLastByte=sizeInBits & 0x7;  if (numBitsInLastByte == 0) {    appendByte(0);    sizeInBits-=8;  }  array[sizeInBits >> 3]|=(byte)(bit << (7 - numBitsInLastByte));  ++sizeInBits;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : new XString(s1.substring(0,index));}  }
class C{  @Override public void authenticate(URL url,AuthenticatedURL.Token token) throws IOException, AuthenticationException {  if (!token.isSet()) {    this.url=url;    base64=new Base64(0);    conn=(HttpURLConnection)url.openConnection();    conn.setRequestMethod(AUTH_HTTP_METHOD);    conn.connect();    if (isNegotiate()) {      doSpnegoSequence(token);    } else {      getFallBackAuthenticator().authenticate(url,token);    }  }}  }
class C{  private void checkState(){  Bundle[] bundles=context.getBundleContext().getBundles();  List<String> missingBundles=new ArrayList<String>(requiredBundles);  List<String> bundleFailures=new ArrayList<String>();  List<String> fragmentFailures=new ArrayList<String>();  for (  String req : requiredBundles) {    for (    Bundle bundle : bundles) {      String symbolicName=bundle.getSymbolicName();      if (symbolicName != null && symbolicName.matches(req)) {        if (isFragment(bundle)) {          if (bundle.getState() != Bundle.RESOLVED) {            fragmentFailures.add(bundle.getSymbolicName());          }        } else {          if (bundle.getState() != Bundle.ACTIVE) {            bundleFailures.add(bundle.getSymbolicName());          }        }        missingBundles.remove(req);      }    }  }  ServiceReference<?>[] refs=null;  try {    refs=context.getBundleContext().getAllServiceReferences(null,null);  } catch (  Exception e) {    logger.debug("Unexpected failure in getting service references",e);  }  List<String> missingServices=new ArrayList<String>(requiredServices);  if (refs != null && refs.length > 0) {    for (    String req : requiredServices) {      for (      ServiceReference<?> ref : refs) {        String pid=(String)ref.getProperty(Constants.SERVICE_PID);        if (pid != null && pid.matches(req)) {          missingServices.remove(req);          break;        }      }    }  }  AppState updatedAppState=null;  String updatedShortDesc=null;  if (missingBundles.size() > 0 || bundleFailures.size() > 0 || fragmentFailures.size() > 0) {    updatedAppState=AppState.ACTIVE_NOT_READY;    updatedShortDesc="Not all modules started " + missingBundles + " "+ bundleFailures+ " "+ fragmentFailures;  } else   if (missingServices.size() > 0) {    updatedAppState=AppState.ACTIVE_NOT_READY;    updatedShortDesc="Required services not all started " + missingServices;  } else   if (clusterEnabled && !clusterUp) {    updatedAppState=AppState.ACTIVE_NOT_READY;    updatedShortDesc="This node can not yet join the cluster";  } else {    updatedAppState=AppState.ACTIVE_READY;    updatedShortDesc="OpenIDM ready";  }  setState(updatedAppState,updatedShortDesc);}  }
class C{  @Override public void cacheResult(Foo foo){  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);  foo.resetOriginalValues();}  }
class C{  private boolean createUserProfile(String token,Set aliasList){  try {    if (!dynamicProfileCreation) {      DEBUG.message("Error this user requires a profile to login");      return false;    }    if (isApplicationModule(authMethName)) {      DEBUG.message("No profile created for Application module");      return false;    }    if (DEBUG.messageEnabled()) {      DEBUG.message("Creating user entry: " + token);      DEBUG.message("aliasList : " + aliasList);    }    if (userCreationAttributes == null) {      userCreationAttributes=new HashMap<String,Object>();    }    Map<String,Object> aliasMap=Collections.emptyMap();    if ((aliasList != null) && !aliasList.isEmpty()) {      DEBUG.message("Adding alias list to user profile");      if ((externalAliasList != null) && (!externalAliasList.isEmpty())) {        aliasList.addAll(externalAliasList);      }      aliasMap.put(ISAuthConstants.USER_ALIAS_ATTR,aliasList);    }    if (!aliasMap.isEmpty()) {      userCreationAttributes.putAll(aliasMap);    }    if (DEBUG.messageEnabled()) {      DEBUG.message("userCreationAttributes is : " + userCreationAttributes);    }    Set<String> userPasswordSet=new HashSet<String>(1);    byte bytes[]=new byte[20];    SECURE_RANDOM.nextBytes(bytes);    userPasswordSet.add(byteArrayToHexString(bytes));    userCreationAttributes.put(ISAuthConstants.ATTR_USER_PASSWORD,userPasswordSet);    amIdentityUser=createUserIdentity(token,userCreationAttributes,defaultRoles);    userDN=getUserDN(amIdentityUser);    Map userAttributes=amIdentityUser.getAttributes();    if (amIdentityRole != null) {      Map sattrs=amIdentityRole.getServiceAttributes(ISAuthConstants.SESSION_SERVICE_NAME);      if (sattrs != null && !sattrs.isEmpty()) {        userAttributes.putAll(sattrs);      }    }    populateUserAttributes(userAttributes,true,null);    return true;  } catch (  Exception ex) {    DEBUG.error("Cannot create user profile for: " + token);    if (DEBUG.messageEnabled()) {      DEBUG.message("Stack trace: ",ex);    }  }  return false;}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){  Properties defaultProp=null;  if (withDefaults) {    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());    defaultProp=ServerConfiguration.getDefaults(appToken);  }  PropertiesHolder oldProps;  PropertiesHolder newProps;  do {    oldProps=propertiesHolderRef.get();    final Properties combined=new Properties();    if (defaultProp != null) {      combined.putAll(defaultProp);    }    if (!reset) {      combined.putAll(oldProps.properties);    }    combined.putAll(properties);    newProps=new PropertiesHolder(Maps.fromProperties(combined));  } while (!propertiesHolderRef.compareAndSet(oldProps,newProps));}  }
class C{  public boolean isStretchWidth(){  return this.stretchWidth;}  }
class C{  protected void destroy(){  close=true;  selector.wakeup();}  }
class C{  public ConnectorReference(ConnectorKey connectorKey,String connectorHost){  assert null != connectorKey;  this.connectorKey=connectorKey;  if (StringUtil.isBlank(connectorHost) || SINGLE_LOCAL_CONNECTOR_MANAGER.equalsIgnoreCase(connectorHost)) {    connectorLocationName=SINGLE_LOCAL_CONNECTOR_MANAGER;    connectorLocation=ConnectorLocation.LOCAL;  } else {    connectorLocationName=connectorHost;    if (connectorHost.toLowerCase().startsWith("osgi")) {      connectorLocation=ConnectorLocation.OSGI;    } else {      connectorLocation=ConnectorLocation.REMOTE;    }  }}  }
class C{  private boolean isExistingEntry(DN dn) throws ADSContextException {  SearchRequest request=newSearchRequest(dn,BASE_OBJECT,objectClassPresent(),NO_ATTRIBUTES);  try (ConnectionEntryReader entryReader=getConnection().getConnection().search(request)){    while (entryReader.hasNext()) {      entryReader.readEntry();      return true;    }    return false;  } catch (  EntryNotFoundException x) {    return false;  }catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  IOException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public boolean beginStaticTextMessageDisplay(ChildDisplayEvent event){  return true;}  }
class C{  public static void fillEntriesInSet(Map attrMap,String key,String value){  if ((key != null) && (value != null) && (attrMap != null)) {    Set valueSet=new HashSet();    valueSet.add(value);    attrMap.put(key,valueSet);  }}  }
class C{  public void _write(org.omg.CORBA.portable.OutputStream out){  org.omg.CORBA.ServiceInformationHelper.write(out,value);}  }
class C{  private void readFields() throws IOException, ClassFormatException {  final int fields_count=dataInputStream.readUnsignedShort();  for (int i=0; i < fields_count; i++) {    Utility.swallowFieldOrMethod(dataInputStream);  }}  }
class C{  public JobServiceImpl(){  LOG.info("Initializing JobService");}  }
class C{  protected ClassLoader(){  this(getSystemClassLoader(),false);}  }
class C{  public static SearchScope valueOf(final int intValue){  SearchScope result=null;  if (0 <= intValue && intValue < ELEMENTS.length) {    result=ELEMENTS[intValue];  }  if (result == null) {    result=new SearchScope(intValue,"unknown(" + intValue + ")",Enum.UNKNOWN);  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS04.class,args);}  }
class C{  public static boolean sendAckAsync(int options){  return ((Channel.SEND_OPTIONS_USE_ACK & options) == Channel.SEND_OPTIONS_USE_ACK) && ((Channel.SEND_OPTIONS_SYNCHRONIZED_ACK & options) != Channel.SEND_OPTIONS_SYNCHRONIZED_ACK);}  }
class C{  public void stop(){synchronized (eventMutex) {    if (this.refCount > 0)     this.refCount--;    if (this.refCount == 0) {      isStopped=true;      eventMutex.notify();    }  }}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  public NSData(String base64) throws IOException {  String data=base64.replaceAll("\\s+","");  bytes=Base64.decode(data);}  }
class C{  public AuthContext(String orgName,URL url) throws AuthLoginException {  organizationName=orgName;  authURL=url;}  }
class C{  private CompletionStage<List<BoundStatement>> processCargoRegistered(CargoRegistered event,UUID offset){  BoundStatement bindWriteCargo=writeCargo.bind();  bindWriteCargo.setString("cargoId",event.getCargo().getId());  bindWriteCargo.setString("name",event.getCargo().getName());  bindWriteCargo.setString("description",event.getCargo().getDescription());  bindWriteCargo.setString("owner",event.getCargo().getOwner());  bindWriteCargo.setString("destination",event.getCargo().getDestination());  BoundStatement bindWriteOffset=writeOffset.bind(offset);  log.info("Persisted {}",event.getCargo().getId());  return completedStatements(Arrays.asList(bindWriteCargo,bindWriteOffset));}  }
class C{  protected boolean runAndReset(){  if (state != NEW || !UNSAFE.compareAndSwapObject(this,runnerOffset,null,Thread.currentThread()))   return false;  boolean ran=false;  int s=state;  try {    Callable<V> c=callable;    if (c != null && s == NEW) {      try {        c.call();        ran=true;      } catch (      Throwable ex) {        setException(ex);      }    }  }  finally {    runner=null;    s=state;    if (s >= INTERRUPTING)     handlePossibleCancellationInterrupt(s);  }  return ran && s == NEW;}  }
class C{  public WorkflowTrace(){  this.protocolMessages=new LinkedList<>();}  }
class C{  public static ProxiedAuthV1RequestControl newControl(final DN authorizationName){  Reject.ifNull(authorizationName);  return new ProxiedAuthV1RequestControl(authorizationName);}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragOver(dsde);  }  getDragSource().processDragOver(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),OVER);}  }
class C{  Map<String,Set<String>> inheritDefaults(Map<String,Set<String>> attrs){  Set<String> values=attrs.get(as.getName());  if (values == null) {    attrs.put(as.getName(),as.getDefaultValues());  } else   if (as.getSyntax().equals(AttributeSchema.Syntax.PASSWORD) || as.getSyntax().equals(AttributeSchema.Syntax.ENCRYPTED_PASSWORD)) {    Set<String> vals=new HashSet<>();    for (    String tString : values) {      try {        vals.add(AccessController.doPrivileged(new DecodeAction(tString)));      } catch (      Throwable e) {        debug.error("AttributeValidator: Unable to decode",e);        vals.add(tString);      }    }    attrs.put(as.getName(),vals);  }  return attrs;}  }
class C{  public TransactionAlreadyExistsException(String message){  super(message);}  }
class C{  public NotConfiguration(String message){  super(message);}  }
class C{  public void addBeanContextServicesListener(BeanContextServicesListener bcsl){  if (bcsl == null)   throw new NullPointerException("bcsl");synchronized (bcsListeners) {    if (bcsListeners.contains(bcsl))     return; else     bcsListeners.add(bcsl);  }}  }
class C{  private EnumEvalResult evalDNKeywords(AciEvalContext evalCtx){  boolean matched=false;  boolean undefined=false;  int numLevels=parentInheritance.getNumLevels();  int[] levels=parentInheritance.getLevels();  AttributeType attrType=parentInheritance.getAttributeType();  DN baseDN=parentInheritance.getBaseDN();  Entry resourceEntry=evalCtx.getResourceEntry();  if (baseDN != null) {    matched=resourceEntry.hasAttribute(attrType) && GroupDN.evaluate(resourceEntry,evalCtx,attrType,baseDN);  } else {    for (int i=0; i < numLevels; i++) {      if (levels[i] == 0) {        if (evalCtx.isAddOperation()) {          undefined=true;        } else         if (resourceEntry.hasAttribute(attrType) && evalEntryAttr(resourceEntry,evalCtx,attrType)) {          matched=true;          break;        }      } else {        DN pDN=evalCtx.getResourceDN().parent(levels[i]);        if (pDN == null) {          continue;        }        final SearchRequest request=newSearchRequest(pDN,SearchScope.BASE_OBJECT).addAttribute(parentInheritance.getAttrTypeStr());        InternalSearchOperation op=getRootConnection().processSearch(request);        LinkedList<SearchResultEntry> result=op.getSearchEntries();        if (!result.isEmpty()) {          Entry e=result.getFirst();          if (e.hasAttribute(attrType) && evalEntryAttr(e,evalCtx,attrType)) {            matched=true;            break;          }        }      }    }  }  EnumEvalResult res=matched ? EnumEvalResult.TRUE : EnumEvalResult.FALSE;  return res.getRet(type,undefined);}  }
class C{  @Override public int read(byte[] b,int off,int len){  if (off < 0 || len < 0 || off + len > b.length) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return 0;  }  int bytesCopied=0;  int getLen;  if (saveBufferReader.remaining() > 0) {    getLen=Math.min(saveBufferReader.remaining(),len);    saveBufferReader.readBytes(b,off,getLen);    bytesCopied+=getLen;  }  if (bytesCopied < len && byteBuffer.remaining() > 0) {    getLen=Math.min(byteBuffer.remaining(),len - bytesCopied);    byteBuffer.get(b,off + bytesCopied,getLen);    bytesCopied+=getLen;  }  if (bytesCopied < len) {    throw new IllegalBlockingModeException();  }  return bytesCopied;}  }
class C{  public static BooleanArgument scriptFriendlyArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_SCRIPT_FRIENDLY).shortIdentifier(OPTION_SHORT_SCRIPT_FRIENDLY).description(INFO_DESCRIPTION_SCRIPT_FRIENDLY.get()).buildArgument();}  }
class C{  public void removeSchemaElementSelectionListener(SchemaElementSelectionListener listener){  for (  SchemaElementPanel panel : panels) {    panel.removeSchemaElementSelectionListener(listener);  }}  }
class C{  protected void loadChildren(ViewFactory f){}  }
class C{  public WorldCreator generateStructures(boolean generate){  this.generateStructures=generate;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringoffsetgreater.class,args);}  }
class C{  public boolean isUserExists(String userAttrValue,String userAttrName,String realm){  boolean found=false;  try {    AMIdentityRepository amir=new AMIdentityRepository(ssoToken,realm);    Map searchMap=new HashMap(2);    Set searchSet=new HashSet(2);    searchSet.add(userAttrValue);    searchMap.put(userAttrName,searchSet);    IdSearchControl isCtl=new IdSearchControl();    isCtl.setSearchModifiers(IdSearchOpModifier.AND,searchMap);    IdSearchResults isr=amir.searchIdentities(IdType.USER,"*",isCtl);    Set results=isr.getSearchResults();    if ((results != null) && !results.isEmpty()) {      if (results.size() > 1) {        errorMsg=getLocalizedString("multipleUsersExists.message");      } else {        AMIdentity amid=(AMIdentity)results.iterator().next();        userRealm=amid.getRealm();        userId=amid.getUniversalId();        found=true;      }    } else {      errorMsg=getLocalizedString("userNotExists.message");      writeLog("logUserNotExists.message",userAttrName);    }  } catch (  SSOException e) {    debug.error("PWResetUserValidationModelImpl.isUserExists",e);    errorMsg=getErrorString(e);  }catch (  IdRepoException e) {    debug.error("PWResetUserValidationModelImpl.isUserExists",e);    errorMsg=getErrorString(e);  }  return found;}  }
class C{  public void updatePDPConfig(String realm,String entityName,String location,Map attrValues) throws AMConsoleException {  String[] params={realm,entityName,"SAMLv2","XACML PDP"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  String role=EntityModel.POLICY_DECISION_POINT_DESCRIPTOR;  try {    SAML2MetaManager saml2Manager=getSAML2MetaManager();    EntityConfigElement entityConfig=saml2Manager.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.xacml.configuration");    }    XACMLPDPConfigElement pdpEntityConfig=saml2Manager.getPolicyDecisionPointConfig(realm,entityName);    if (pdpEntityConfig == null) {      throw new AMConsoleException("invalid.xacml.configuration");    } else {      updateBaseConfig(pdpEntityConfig,attrValues,role);    }    saml2Manager.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  SAML2MetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","XACML PDP",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }catch (  JAXBException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","XACML PDP",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Separator)) {    return false;  }  if (this == o) {    return true;  }  Separator other=(Separator)o;  return (this.character == other.character && this.quote == other.quote && this.escape == other.escape);}  }
class C{  protected Object createDecorator(Object proxy,Method method,Object[] args,Object statement,Constructor<?> constructor,String sql) throws InstantiationException, IllegalAccessException, InvocationTargetException {  Object result=null;  StatementProxy<Statement> statementProxy=new StatementProxy<>((Statement)statement,sql);  result=constructor.newInstance(new Object[]{statementProxy});  statementProxy.setActualProxy(result);  statementProxy.setConnection(proxy);  statementProxy.setConstructor(constructor);  return result;}  }
class C{  public String toString(){  return ("OATHPrincipal:  " + name);}  }
class C{  public java.math.BigDecimal readBigDecimal() throws SQLException {  return (java.math.BigDecimal)getNextAttribute();}  }
class C{  private void fetchRegions(){  final List<UIComponent> childeren=getChildren();  for (  final UIComponent uiComponent : childeren) {    if (uiComponent instanceof UINorth) {      this.north=(UIAbstractRegion)uiComponent;    }    if (uiComponent instanceof UISouth) {      this.south=(UIAbstractRegion)uiComponent;    }    if (uiComponent instanceof UICenter) {      this.center=(UIAbstractRegion)uiComponent;      this.colspan++;    }    if (uiComponent instanceof UIStart) {      this.start=(UIAbstractRegion)uiComponent;      this.colspan++;    }    if (uiComponent instanceof UIEnd) {      this.end=(UIAbstractRegion)uiComponent;      this.colspan++;    }  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public FSSessionMapStats(Map table,String name,String realm,String providerId){  this.table=table;  this.name=name;  this.providerId=providerId;  this.realm=realm;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.isSecureProcessing())   throw new javax.xml.transform.TransformerException(XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{toString()}));  XObject result;  Vector argVec=new Vector();  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    XObject xobj=arg.execute(xctxt);    xobj.allowDetachToRelease(false);    argVec.addElement(xobj);  }  ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();  Object val=extProvider.extFunction(this,argVec);  if (null != val) {    result=XObject.create(val,xctxt);  } else {    result=new XNull();  }  return result;}  }
class C{  public static boolean isFieldGeneric(String desc,String signature){  return signature != null && desc != null && signature.startsWith("T") && signature.endsWith(";") && Character.isUpperCase(signature.charAt(1)) && desc.contains("java/lang/Object");}  }
class C{  public void test_wrap_06(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,0,bbA.length,bb);  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  public void release(){  releaseEglSurface();}  }
class C{  public synchronized void abandon(ConversationAbandonedEvent details){  if (!abandoned) {    abandoned=true;    currentPrompt=null;    context.getForWhom().abandonConversation(this);    for (    ConversationAbandonedListener listener : abandonedListeners) {      listener.conversationAbandoned(details);    }  }}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsNull() throws Exception {  super.testDecodeTruncatedLengthArrayAsNull();}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public WeakLongHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=(Entry<K>[])new Entry[capacity];  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeLengthMismatchArrayAsBoolean() throws Exception {  super.testDecodeLengthMismatchArrayAsBoolean();}  }
class C{  public AccessRequest(short id,Authenticator auth){  super(PacketType.ACCESS_REQUEST,id,auth);}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  @Deactivate protected synchronized void deactivate(ComponentContext context){  if (registeredFilter != null) {    try {      servletFilterRegistration.unregisterFilter(registeredFilter);      logger.info("Unregistered servlet filter {}.",context.getProperties());    } catch (    Exception ex) {      logger.warn("Failure reported during unregistering of servlet filter {}: {}",new Object[]{context.getProperties(),ex.getMessage(),ex});    }  }  for (  String key : origSystemProperties.keySet()) {    String val=origSystemProperties.get(key);    if (val == null) {      System.clearProperty(key);    } else {      System.setProperty(key,val);    }  }  logger.debug("Deactivated {}",context);}  }
class C{  public void deleteAuthenticationInstance(String name) throws AMConfigurationException {  AMAuthenticationInstance instance=getAuthenticationInstance(name);  if (instance == null) {    throw new AMConfigurationException(BUNDLE_NAME,"authInstanceNotExist",new Object[]{name});  }  if (isModuleInstanceInUse(name)) {    throw new AMConfigurationException(BUNDLE_NAME,"authInstanceInUse",new Object[]{name});  }  String type=getAuthInstanceType(name);  ServiceConfig serviceConfig=instance.getServiceConfig();  if (serviceConfig == null) {    throw new AMConfigurationException(BUNDLE_NAME,"authInstanceIsGlobal",new Object[]{type});  }  try {    if (name.equals(type)) {      Map attrs=serviceConfig.getAttributesWithoutDefaults();      if (attrs != null) {        serviceConfig.removeAttributes(attrs.keySet());      }    } else {      String serviceName=serviceConfig.getServiceName();      ServiceConfigManager scm=new ServiceConfigManager(serviceName,token);      ServiceConfig orgConfig=scm.getOrganizationConfig(realm,null);      orgConfig.removeSubConfig(name);    }    if (isInheritedAuthInstance(name)) {      Set<String> moduleNames=new HashSet<String>();      moduleNames.add(name);      orgServiceConfig.removeAttributeValues(ISAuthConstants.AUTH_ALLOWED_MODULES,moduleNames);    }    if (!SystemProperties.isServerMode()) {      buildModuleInstanceForService(realm,serviceConfig.getServiceName());    }  } catch (  Exception e) {    throw new AMConfigurationException(e);  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.deleteFoo(foo);}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public static boolean areNotGranted(String authorities) throws IOException {  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();  authorizeTag.setIfNotGranted(authorities);  return authorizeTag.authorize();}  }
class C{  public void clear(){  LinkedListNode node=getLast();  while (node != null) {    node.remove();    node=getLast();  }  head.next=head.previous=head;}  }
class C{  public StreamSource(Reader reader){  setReader(reader);}  }
class C{  public void test_destroy(){  myDestroyable md=new myDestroyable();  try {    assertFalse(md.isDestroyed());    md.destroy();    assertTrue(md.isDestroyed());  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  protected Expression string(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.String(),opPos);}  }
class C{  private void writeJavaVersionContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_JAVA_VERSION_LABEL.get(),getJavaVersion(desc),maxLabelWidth);}  }
class C{  protected SIPServerTransactionImpl(SIPTransactionStack sipStack,MessageChannel newChannelToUse){  super(sipStack,newChannelToUse);  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("Creating Server Transaction" + this.getBranchId());    logger.logStackTrace();  }}  }
class C{  public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException {  return bool();}  }
class C{  public static void registerAlternateRootDN(DN actualRootEntryDN,DN alternateRootBindDN) throws DirectoryException {  DN existingRootEntryDN=directoryServer.alternateRootBindDNs.putIfAbsent(alternateRootBindDN,actualRootEntryDN);  if (existingRootEntryDN != null && !existingRootEntryDN.equals(actualRootEntryDN)) {    LocalizableMessage message=ERR_CANNOT_REGISTER_DUPLICATE_ALTERNATE_ROOT_BIND_DN.get(alternateRootBindDN,existingRootEntryDN);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }}  }
class C{  public void postProcessAddUser(SSOToken token,String entryDN,Set members,int objectType) throws AMPostCallBackException {}  }
class C{  protected Principal createPrincipal(String username,Subject subject,LoginContext loginContext){  List<String> roles=new ArrayList<>();  Principal userPrincipal=null;  Iterator<Principal> principals=subject.getPrincipals().iterator();  while (principals.hasNext()) {    Principal principal=principals.next();    String principalClass=principal.getClass().getName();    if (log.isDebugEnabled()) {      log.debug(sm.getString("jaasRealm.checkPrincipal",principal,principalClass));    }    if (userPrincipal == null && userClasses.contains(principalClass)) {      userPrincipal=principal;      if (log.isDebugEnabled()) {        log.debug(sm.getString("jaasRealm.userPrincipalSuccess",principal.getName()));      }    }    if (roleClasses.contains(principalClass)) {      roles.add(principal.getName());      if (log.isDebugEnabled()) {        log.debug(sm.getString("jaasRealm.rolePrincipalAdd",principal.getName()));      }    }  }  if (userPrincipal == null) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("jaasRealm.userPrincipalFailure"));      log.debug(sm.getString("jaasRealm.rolePrincipalFailure"));    }  } else {    if (roles.size() == 0) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("jaasRealm.rolePrincipalFailure"));      }    }  }  return new GenericPrincipal(username,null,roles,userPrincipal,loginContext);}  }
class C{  @Override public void sendResponse(Operation operation){}  }
class C{  public static StringArgument useJCEKSArgument() throws ArgumentException {  return StringArgument.builder("useJCEKS").description(INFO_ARGUMENT_DESCRIPTION_USE_JCEKS.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  private static boolean canMapToSpace(final StringBuilder buffer,final boolean trim){  final int buffLen=buffer.length();  final boolean doNotMap=(trim && buffLen == 0) || (buffLen > 0 && buffer.charAt(buffLen - 1) == SPACE_CHAR);  return !doNotMap;}  }
class C{  private T compareAfterBreakpoint(String resource,String target,String breakPoint){  int firstResourceBreakPoint=resource.indexOf(breakPoint);  int firstTargetBreakPoint=target.indexOf(breakPoint);  if (firstResourceBreakPoint == -1 || firstTargetBreakPoint == -1) {    return super.compare(resource,target,true);  }  String resourceSub=resource.substring(firstResourceBreakPoint + breakPoint.length());  String targetSub=target.substring(firstTargetBreakPoint + breakPoint.length());  if (targetSub.endsWith(wildcard)) {    return super.compare(resourceSub,targetSub,true);  } else {    return compareSplit(resourceSub,targetSub,breakPoint);  }}  }
class C{  public SystemAppTokenProvider(String appUserName,String appPassword){  this.appUserName=appUserName;  this.appPassword=appPassword;}  }
class C{  static void performSetup(final String openDJArchive,final String serverRootDir,final String baseDn,final String backendType,final int ldapPort,final int adminPort,final int jmxPort) throws EmbeddedDirectoryServerException {  EmbeddedDirectoryServer server=manageEmbeddedDirectoryServer(configParams().serverRootDirectory(serverRootDir).configurationFile(serverRootDir + File.separator + "config/config.ldif"),connectionParams().hostName("localhost").ldapPort(ldapPort).bindDn("cn=Directory Manager").bindPassword("password").adminPort(adminPort),System.out,System.err);  server.extractArchiveForSetup(new File(openDJArchive));  server.setup(setupParams().baseDn(baseDn).backendType(backendType).jmxPort(jmxPort));}  }
class C{  public AlphaComposite derive(float alpha){  return (this.extraAlpha == alpha) ? this : getInstance(this.rule,alpha);}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void replaceAttributeValue(String attrName,String oldValue,String newValue) throws SMSException, SSOException {  validateServiceConfigImpl();  Map attributes=getAttributes();  Set currentValues=(Set)attributes.get(attrName);  if (currentValues != null && !currentValues.contains(oldValue)) {    throw (new SMSException("Current value doesn't match supplied value","sms-INVALID_PARAMETERS"));  }  Set newVals=new HashSet();  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals.addAll(oldVals);    newVals.remove(oldValue);  }  newVals.add(newValue);  ss.validateAttrValues(token,attrName,newVals,true,sc.getOrganizationName());  SMSEntry e=sc.getSMSEntry();  SMSUtils.replaceAttributeValue(e,attrName,oldValue,newValue,ss.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  protected DropTargetAutoScroller(Component c,Point p){  super();  component=c;  autoScroll=(Autoscroll)component;  Toolkit t=Toolkit.getDefaultToolkit();  Integer initial=Integer.valueOf(100);  Integer interval=Integer.valueOf(100);  try {    initial=(Integer)t.getDesktopProperty("DnD.Autoscroll.initialDelay");  } catch (  Exception e) {  }  try {    interval=(Integer)t.getDesktopProperty("DnD.Autoscroll.interval");  } catch (  Exception e) {  }  timer=new Timer(interval.intValue(),this);  timer.setCoalesce(true);  timer.setInitialDelay(initial.intValue());  locn=p;  prev=p;  try {    hysteresis=((Integer)t.getDesktopProperty("DnD.Autoscroll.cursorHysteresis")).intValue();  } catch (  Exception e) {  }  timer.start();}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  protected void flushObject(PdfObject pdfObject,boolean canBeInObjStm) throws IOException {  PdfIndirectReference indirectReference=pdfObject.getIndirectReference();  if (isFullCompression() && canBeInObjStm) {    PdfObjectStream objectStream=getObjectStream();    objectStream.addObject(pdfObject);  } else {    indirectReference.setOffset(getCurrentPos());    writeToBody(pdfObject);  }  indirectReference.setState(PdfObject.FLUSHED).clearState(PdfObject.MUST_BE_FLUSHED);switch (pdfObject.getType()) {case PdfObject.BOOLEAN:case PdfObject.NAME:case PdfObject.NULL:case PdfObject.NUMBER:case PdfObject.STRING:    ((PdfPrimitiveObject)pdfObject).content=null;  break;case PdfObject.ARRAY:PdfArray array=((PdfArray)pdfObject);markArrayContentToFlush(array);array.releaseContent();break;case PdfObject.STREAM:case PdfObject.DICTIONARY:PdfDictionary dictionary=((PdfDictionary)pdfObject);markDictionaryContentToFlush(dictionary);dictionary.releaseContent();break;case PdfObject.INDIRECT_REFERENCE:markObjectToFlush(((PdfIndirectReference)pdfObject).getRefersTo(false));}}  }
class C{  private byte[] generateDerivedKey(int idByte,int n){  byte[] D=new byte[v];  byte[] dKey=new byte[n];  for (int i=0; i != D.length; i++) {    D[i]=(byte)idByte;  }  byte[] S;  if ((salt != null) && (salt.length != 0)) {    S=new byte[v * ((salt.length + v - 1) / v)];    for (int i=0; i != S.length; i++) {      S[i]=salt[i % salt.length];    }  } else {    S=new byte[0];  }  byte[] P;  if ((password != null) && (password.length != 0)) {    P=new byte[v * ((password.length + v - 1) / v)];    for (int i=0; i != P.length; i++) {      P[i]=password[i % password.length];    }  } else {    P=new byte[0];  }  byte[] I=new byte[S.length + P.length];  System.arraycopy(S,0,I,0,S.length);  System.arraycopy(P,0,I,S.length,P.length);  byte[] B=new byte[v];  int c=(n + u - 1) / u;  byte[] A=new byte[u];  for (int i=1; i <= c; i++) {    digest.update(D,0,D.length);    digest.update(I,0,I.length);    digest.doFinal(A,0);    for (int j=1; j < iterationCount; j++) {      digest.update(A,0,A.length);      digest.doFinal(A,0);    }    for (int j=0; j != B.length; j++) {      B[j]=A[j % A.length];    }    for (int j=0; j != I.length / v; j++) {      adjust(I,j * v,B);    }    if (i == c) {      System.arraycopy(A,0,dKey,(i - 1) * u,dKey.length - ((i - 1) * u));    } else {      System.arraycopy(A,0,dKey,(i - 1) * u,A.length);    }  }  return dKey;}  }
class C{  @CpsVmThreadOnly("root") private boolean run(){  boolean changed=false;  boolean ending=false;  boolean stillRunnable=false;  for (  CpsThread t : threads.values().toArray(new CpsThread[threads.size()])) {    if (t.isRunnable()) {      Outcome o=t.runNextChunk();      if (o.isFailure()) {        assert !t.isAlive();        Result result=Result.FAILURE;        Throwable error=o.getAbnormal();        if (error instanceof FlowInterruptedException) {          result=((FlowInterruptedException)error).getResult();        }        execution.setResult(result);        t.head.get().addAction(new ErrorAction(error));      }      if (!t.isAlive()) {        LOGGER.fine("completed " + t);        t.fireCompletionHandlers(o);        threads.remove(t.id);        if (threads.isEmpty()) {          execution.onProgramEnd(o);          ending=true;        }      } else {        stillRunnable|=t.isRunnable();      }      changed=true;    }  }  if (changed) {    try {      saveProgram();    } catch (    IOException x) {      LOGGER.log(WARNING,"program state save failed",x);    }  }  if (ending) {    execution.cleanUpHeap();    scripts.clear();  }  return stillRunnable;}  }
class C{  static Promise<Void> any(final Promise<?>... promises){  return new AnyPromise(promises);}  }
class C{  private void stop(){  timer.stop();}  }
class C{  public void addOperand(PdfVisibilityExpression expression){  getPdfObject().add(expression.getPdfObject());  getPdfObject().setModified();}  }
class C{  private boolean accept(char acceptableSymbol){  return data[index] == acceptableSymbol;}  }
class C{  public boolean isSiteEnabled(){  try {    return WebtopNaming.isSiteEnabled(getLocalServerID(true));  } catch (  Exception e) {    sessionDebug.error("Failed to check if local server {0} is part of site",getLocalServerID(),e);    throw new IllegalStateException(e);  }}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public void addAppender(Appender appender){  this.logger.addAppender(appender);}  }
class C{  public EulerAngle add(double x,double y,double z){  return new EulerAngle(this.x + x,this.y + y,this.z + z);}  }
class C{  public String encode(){  return EMAIL_FIELD + emailAddress.encode() + Separators.NEWLINE;}  }
class C{  public void testCipherSpi02() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineGetKeySize(null);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public static HashMap sendRequestToOrigServer(HttpServletRequest request,HttpServletResponse response,String sloServerUrl){  HashMap origRequestData=new HashMap();  String classMethod="SAML2Utils.sendRequestToOrigServer: ";  if (debug.messageEnabled()) {    for (Enumeration<String> requestHeaders=request.getHeaderNames(); requestHeaders.hasMoreElements(); ) {      String name=requestHeaders.nextElement();      Enumeration<String> value=request.getHeaders(name);      debug.message(classMethod + "Header name = " + name+ " Value = "+ value);    }  }  HttpURLConnection conn=null;  String strCookies=null;  try {    URL sloRoutingURL=new URL(sloServerUrl);    if (debug.messageEnabled()) {      debug.message(classMethod + "Connecting to : " + sloRoutingURL);    }    conn=HttpURLConnectionManager.getConnection(sloRoutingURL);    boolean isGET=request.getMethod().equalsIgnoreCase(GET_METHOD);    if (isGET) {      conn.setRequestMethod(GET_METHOD);    } else {      conn.setDoOutput(true);      conn.setRequestMethod(POST_METHOD);    }    HttpURLConnection.setFollowRedirects(false);    conn.setInstanceFollowRedirects(false);    strCookies=getCookiesString(request);    if (strCookies != null) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Sending cookies : " + strCookies);      }      conn.setRequestProperty("Cookie",strCookies);    }    conn.setRequestProperty("Host",request.getHeader("host"));    conn.setRequestProperty(SAMLConstants.ACCEPT_LANG_HEADER,request.getHeader(SAMLConstants.ACCEPT_LANG_HEADER));    if (isGET) {      conn.connect();    } else {      String data="";      Map<String,String[]> params=request.getParameterMap();      for (      Map.Entry<String,String[]> param : params.entrySet()) {        data=data + param.getKey() + "="+ URLEncDec.encode(param.getValue()[0])+ "&";      }      data=data.substring(0,data.length() - 1);      if (debug.messageEnabled()) {        debug.message(classMethod + "DATA to be SENT: " + data);      }      OutputStreamWriter writer=null;      try {        writer=new OutputStreamWriter(conn.getOutputStream());        writer.write(data);      } catch (      IOException ioe) {        debug.error(classMethod + "Could not write to the destination",ioe);      } finally {        writer.close();      }    }    if (debug.messageEnabled()) {      debug.message(classMethod + "RECEIVING DATA ... ");      debug.message(classMethod + "Response Code: " + conn.getResponseCode());      debug.message(classMethod + "Response Message: " + conn.getResponseMessage());      debug.message(classMethod + "Follow redirect : " + HttpURLConnection.getFollowRedirects());    }    StringBuilder in_buf=new StringBuilder();    BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));    int len;    char[] buf=new char[1024];    while ((len=in.read(buf,0,buf.length)) != -1) {      in_buf.append(buf,0,len);    }    String in_string=in_buf.toString();    if (debug.messageEnabled()) {      debug.message(classMethod + "Received response data : " + in_string);    }    origRequestData.put(SAML2Constants.OUTPUT_DATA,in_string);    String redirect_url=conn.getHeaderField(LOCATION);    if (redirect_url != null) {      origRequestData.put(SAML2Constants.AM_REDIRECT_URL,redirect_url);    }    origRequestData.put(SAML2Constants.RESPONSE_CODE,Integer.toString(conn.getResponseCode()));    Map headers=conn.getHeaderFields();    processCookies(headers,request,response);  } catch (  Exception ex) {    if (debug.messageEnabled()) {      debug.message(classMethod + "send exception : ",ex);    }  }  return origRequestData;}  }
class C{  public AdministrationConnector(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public void checkUnload(){  if (log.isTraceEnabled()) {    int queueLength=-1;    if (jspQueue != null) {      queueLength=jspQueue.getSize();    }    log.trace(Localizer.getMessage("jsp.message.jsp_unload_check",context.getContextPath(),"" + jsps.size(),"" + queueLength));  }  long now=System.currentTimeMillis();  if (jspIdleTimeout > 0) {    long unloadBefore=now - jspIdleTimeout;    Object[] wrappers=jsps.values().toArray();    for (int i=0; i < wrappers.length; i++) {      JspServletWrapper jsw=(JspServletWrapper)wrappers[i];synchronized (jsw) {        if (jsw.getLastUsageTime() < unloadBefore) {          if (log.isDebugEnabled()) {            log.debug(Localizer.getMessage("jsp.message.jsp_removed_idle",jsw.getJspUri(),context.getContextPath(),"" + (now - jsw.getLastUsageTime())));          }          if (jspQueue != null) {            jspQueue.remove(jsw.getUnloadHandle());          }          unloadJspServletWrapper(jsw);        }      }    }  }  lastJspQueueUpdate=now;}  }
class C{  public ISPermission(Subject subject,CodeSource codesource){  super("ISPermission");  if (debug.messageEnabled()) {    debug.message("ISPermission(subject,codesource) constructor " + "called ");  }  this.subject=subject;  this.codesource=codesource;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic192Sha256Rsa15Element createBasic192Sha256Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic192Sha256Rsa15ElementImpl();}  }
class C{  int useCount(Name n){  if (arguments == null)   return 0;  int count=0;  for (int i=arguments.length; --i >= 0; ) {    if (arguments[i] == n)     ++count;  }  return count;}  }
class C{  @Override public void run(){  long latestCount=exportedCount;  long deltaCount=latestCount - previousCount;  long latestTime=System.currentTimeMillis();  long deltaTime=latestTime - previousTime;  if (deltaTime == 0) {    return;  }  float rate=1000f * deltaCount / deltaTime;  logger.info(NOTE_EXPORT_PROGRESS_REPORT,latestCount,skippedCount,rate);  previousCount=latestCount;  previousTime=latestTime;}  }
class C{  public void hyperlinkUpdate(HyperlinkEvent evt){  JEditorPane c=getOutermostJEditorPane();  if (c == null) {    return;  }  if (!(evt instanceof HTMLFrameHyperlinkEvent)) {    c.fireHyperlinkUpdate(evt);    return;  }  HTMLFrameHyperlinkEvent e=(HTMLFrameHyperlinkEvent)evt;  if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {    String target=e.getTarget();    String postTarget=target;    if (target.equals("_parent") && !inNestedFrameSet()) {      target="_top";    }    if (evt instanceof FormSubmitEvent) {      HTMLEditorKit kit=(HTMLEditorKit)c.getEditorKit();      if (kit != null && kit.isAutoFormSubmission()) {        if (target.equals("_top")) {          try {            movePostData(c,postTarget);            c.setPage(e.getURL());          } catch (          IOException ex) {          }        } else {          HTMLDocument doc=(HTMLDocument)c.getDocument();          doc.processHTMLFrameHyperlinkEvent(e);        }      } else {        c.fireHyperlinkUpdate(evt);      }      return;    }    if (target.equals("_top")) {      try {        c.setPage(e.getURL());      } catch (      IOException ex) {      }    }    if (!c.isEditable()) {      c.fireHyperlinkUpdate(new HTMLFrameHyperlinkEvent(c,e.getEventType(),e.getURL(),e.getDescription(),getElement(),e.getInputEvent(),target));    }  }}  }
class C{  public Version removeQualifier(String qualifier){  List<String> newQualifiers=new ArrayList<>(this.qualifiers);  newQualifiers.remove(qualifier);  return new Version(major,minor,patch,newQualifiers.toArray(new String[newQualifiers.size()]));}  }
class C{  @Inject public LogService(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory) throws Exception {  this.auditEventFactory=auditEventFactory;  this.auditEventPublisher=auditEventPublisher;  parser=new WebtopParser();  parser.register(LogXMLStrings.RECWRITE,pkg + "LogRecWrite");  parser.register(LogXMLStrings.LOG,pkg + "Log");  parser.register(LogXMLStrings.LOGRECORD,pkg + "LogRecord");  parser.register(LogXMLStrings.LEVEL,pkg + "Level");  parser.register(LogXMLStrings.MSG,pkg + "RecMsg");  parser.register(LogXMLStrings.RECTYPE,pkg + "RecType");  parser.register(LogXMLStrings.LOGTYPE,pkg + "LogType");  parser.register(LogXMLStrings.LOGINFOMAP,pkg + "LogInfoMap");  parser.register(LogXMLStrings.LOGINFO,pkg + "LogInfo");  parser.register(LogXMLStrings.INFOKEY,pkg + "InfoKey");  parser.register(LogXMLStrings.INFOVALUE,pkg + "InfoValue");  parser.register(LogXMLStrings.PARAMETERS,pkg + "Parameters");  parser.register(LogXMLStrings.PARAMETER,pkg + "Parameter");  parser.register(LogXMLStrings.PARAMINDEX,pkg + "ParamIndex");  parser.register(LogXMLStrings.PARAMVALUE,pkg + "ParamValue");}  }
class C{  public static void main(String args[]) throws Exception {  McastService service=new McastService();  java.util.Properties p=new java.util.Properties();  p.setProperty("mcastPort","5555");  p.setProperty("mcastAddress","224.10.10.10");  p.setProperty("mcastClusterDomain","catalina");  p.setProperty("bindAddress","localhost");  p.setProperty("memberDropTime","3000");  p.setProperty("mcastFrequency","500");  p.setProperty("tcpListenPort","4000");  p.setProperty("tcpListenHost","127.0.0.1");  p.setProperty("tcpSecurePort","4100");  p.setProperty("udpListenPort","4200");  service.setProperties(p);  service.start();  Thread.sleep(60 * 1000 * 60);}  }
class C{  public void schemaChanged(String serviceName,String version){}  }
class C{  static ObjectName createObjectName(String domain,Group group) throws MalformedObjectNameException {  ObjectName name=null;  name=new ObjectName(domain + ":type=Group,groupname=" + ObjectName.quote(group.getGroupname())+ ",database="+ group.getUserDatabase().getId());  return (name);}  }
class C{  public Builder addPatterns(Set<String> patterns){  this.patterns.addAll(patterns);  return this;}  }
class C{  public static Entry stripObjectClass(Entry entry){  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);  if (attribute != null) {    AttributeDescription description=attribute.getAttributeDescription();    entry.removeAttribute(description);  }  return entry;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildinvalidnodetype.class,args);}  }
class C{  protected boolean isLog4JAvailable(){  return isLogLibraryAvailable("Log4J",LOGGING_IMPL_LOG4J_LOGGER);}  }
class C{  public SegmentCache(){  segments=new ArrayList<Segment>(11);}  }
class C{  public RequirementsBuilder addProperty(String name,String type,String description){  Reject.ifNull(name,description);  addProperty(name,type,description,null);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",2,length);}  }
class C{  protected void start(PrintWriter writer,String name,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.start",name));  }  if ((name == null) || name.length() == 0) {    writer.println(smClient.getString("hostManagerServlet.invalidHostName",name));    return;  }  Container host=engine.findChild(name);  if (host == null) {    writer.println(smClient.getString("hostManagerServlet.noHost",name));    return;  }  if (host == installedHost) {    writer.println(smClient.getString("hostManagerServlet.cannotStartOwnHost",name));    return;  }  if (host.getState().isAvailable()) {    writer.println(smClient.getString("hostManagerServlet.alreadyStarted",name));    return;  }  try {    host.start();    writer.println(smClient.getString("hostManagerServlet.started",name));  } catch (  Exception e) {    getServletContext().log(sm.getString("hostManagerServlet.startFailed",name),e);    writer.println(smClient.getString("hostManagerServlet.startFailed",name));    writer.println(smClient.getString("hostManagerServlet.exception",e.toString()));    return;  }}  }
class C{  public void _read(InputStream input){  value=input.read_Object();}  }
class C{  public void addDescription(String description){  this.description=description;}  }
class C{  public String encodeSessionURL(String url,short encodingScheme,boolean escape,String cookieName,Session session){  String encodedURL=url;  String cookieStr=session.getCookieStr();  if (!StringUtils.isBlank(url) && (!session.getCookieSupport())) {    if (!StringUtils.isBlank(cookieStr) && (sessionCookies.containsCookie(cookieStr,cookieName))) {      encodedURL=SessionEncodeURL.buildCookieString(url,cookieStr,encodingScheme,escape);    } else {      if (session.getSessionID() != null) {        session.setCookieStr(SessionEncodeURL.createCookieString(cookieName,session.getSessionID().toString()));        encodedURL=SessionEncodeURL.encodeURL(session.getCookieStr(),url,encodingScheme,escape);      }    }  }  return encodedURL;}  }
class C{  public static boolean isECLEnabled(){  waitForStartup();  for (  LDAPReplicationDomain domain : domains.values()) {    if (domain.isECLEnabled()) {      return true;    }  }  return false;}  }
class C{  @Override public void removeErrorPage(ErrorPage errorPage){  String exceptionType=errorPage.getExceptionType();  if (exceptionType != null) {synchronized (exceptionPages) {      exceptionPages.remove(exceptionType);    }  } else {synchronized (statusPages) {      statusPages.remove(Integer.valueOf(errorPage.getErrorCode()));    }  }  fireContainerEvent("removeErrorPage",errorPage);}  }
class C{  public void test_ConstructorIIIII(){  Date d1=new Date(70,0,1,1,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000);  assertTrue("Created incorrect date",d1.equals(d2));}  }
class C{  public void keyTyped(KeyEvent e){  JList src=(JList)e.getSource();  ListModel model=src.getModel();  if (model.getSize() == 0 || e.isAltDown() || BasicGraphicsUtils.isMenuShortcutKeyDown(e) || isNavigationKey(e)) {    return;  }  boolean startingFromSelection=true;  char c=e.getKeyChar();  long time=e.getWhen();  int startIndex=adjustIndex(src.getLeadSelectionIndex(),list);  if (time - lastTime < timeFactor) {    typedString+=c;    if ((prefix.length() == 1) && (c == prefix.charAt(0))) {      startIndex++;    } else {      prefix=typedString;    }  } else {    startIndex++;    typedString="" + c;    prefix=typedString;  }  lastTime=time;  if (startIndex < 0 || startIndex >= model.getSize()) {    startingFromSelection=false;    startIndex=0;  }  int index=src.getNextMatch(prefix,startIndex,Position.Bias.Forward);  if (index >= 0) {    src.setSelectedIndex(index);    src.ensureIndexIsVisible(index);  } else   if (startingFromSelection) {    index=src.getNextMatch(prefix,0,Position.Bias.Forward);    if (index >= 0) {      src.setSelectedIndex(index);      src.ensureIndexIsVisible(index);    }  }}  }
class C{  protected void writeOption(Option option) throws IOException {  indentSmart();  write('<');  write("option");  Object value=option.getAttributes().getAttribute(HTML.Attribute.VALUE);  if (value != null) {    write(" value=" + value);  }  if (option.isSelected()) {    write(" selected");  }  write('>');  if (option.getLabel() != null) {    write(option.getLabel());  }  writeLineSeparator();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagname.class,args);}  }
class C{  public DropTargetEvent(DropTargetContext dtc){  super(dtc.getDropTarget());  context=dtc;}  }
class C{  protected ClientConstraintHandler(){}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  public RoleUnresolvedList(){  super();}  }
class C{  private PlaPointInt calc_pin_center_in_drill(ShapeTile p_drill_shape,int p_layer,RoutingBoard p_board){  Collection<BrdItem> overlapping_items=p_board.overlapping_items(p_drill_shape,p_layer);  for (  BrdItem curr_item : overlapping_items) {    if (!(curr_item instanceof board.items.BrdAbitPin))     continue;    BrdAbitPin curr_pin=(BrdAbitPin)curr_item;    if (curr_pin.drill_allowed() && p_drill_shape.contains_inside(curr_pin.center_get()))     return curr_pin.center_get();  }  return null;}  }
class C{  private void checkAdminConnector(){  DN serverEntryDN=searchServerEntry();  if (serverEntryDN == null) {    return;  }  String adminPort=getAttr("cn=Administration Connector,cn=config",LDAP_PORT);  if (adminPort == null) {    return;  }  AttributeType attrType1=DirectoryServer.getSchema().getAttributeType("adminport");  AttributeType attrType2=DirectoryServer.getSchema().getAttributeType("adminEnabled");  LinkedList<Modification> mods=new LinkedList<>();  mods.add(new Modification(ModificationType.REPLACE,Attributes.create(attrType1,adminPort)));  mods.add(new Modification(ModificationType.REPLACE,Attributes.create(attrType2,"true")));  internalConnection.processModify(serverEntryDN,mods);}  }
class C{  protected void processEvent(AWTEvent e){  if (e instanceof TextEvent) {    processTextEvent((TextEvent)e);    return;  }  super.processEvent(e);}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ServerHelloDone(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHelloDone");  }}  }
class C{  public void clearAttribute(CoreTokenField field){  remove(field);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapnotfounderr.class,args);}  }
class C{  public static int rotateRight(int i,int distance){  return (i >>> distance) | (i << -distance);}  }
class C{  public FrameBodyWORS(String urlLink){  super(urlLink);}  }
class C{  public void callEvent(final Event event) throws EventException {  if (event instanceof Cancellable) {    if (((Cancellable)event).isCancelled() && isIgnoringCancelled()) {      return;    }  }  executor.execute(listener,event);}  }
class C{  private void seekStation(final int station,boolean direction){  startAnimation();  refreshImageButton(false);  refreshActionMenuItem(false);  refreshPopupMenuItem(false);  refreshActionMenuPower(false);  mService.seekStationAsync(FmRadioUtils.computeFrequency(station),direction);}  }
class C{  public boolean isPassword(){  return getFieldFlag(FF_PASSWORD);}  }
class C{  public void printlnError(String str){  buff.append(str).append("\n");}  }
class C{  @Override public int countByUuid_C(String uuid,long companyId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;  Object[] finderArgs=new Object[]{uuid,companyId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_C_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_C_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_C_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(companyId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public static SearchResultReference copyOfSearchResultReference(final SearchResultReference reference){  return new SearchResultReferenceImpl(reference);}  }
class C{  private Bindings mergeBindings(Bindings... allBindings){  Bindings result=new SimpleBindings();  for (  Bindings scope : allBindings) {    if (scope != null) {      result=new ChainedBindings(result,scope);    }  }  return result;}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_ByteBuffer$ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbAN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbAN,bb);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbAN,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  validateData();  StringBuffer xmlString=new StringBuffer(1000);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.LOGOUT_RESPONSE).append(SAML2Constants.SPACE);  xmlString.append(super.toXMLString(includeNSPrefix,declareNS));  xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.LOGOUT_RESPONSE).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public void endNamespaceDecls(){  if (!decls.isEmpty()) {    for (Iterator itr=decls.entrySet().iterator(); itr.hasNext(); ) {      Map.Entry e=(Map.Entry)itr.next();      String prefix=(String)e.getKey();      String uri=(String)e.getValue();      if (!uri.equals(nss.getURI(prefix)))       nss.declarePrefix(prefix,uri);    }    decls.clear();    reverseDecls.clear();  }  inCollectingMode=false;}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return returnNode(next);}  }
class C{  public String toString(){  if (val == null)   return "null";  if (val instanceof Long || val instanceof Integer) {    return Long.toString(val.longValue());  }  double d=val.doubleValue();  if (Double.isInfinite(d))   return (d > 0) ? "(1.0 / 0.0)" : "(-1.0 / 0.0)";  if (Double.isNaN(d))   return "(0.0 / 0.0)";  return Double.toString(d);}  }
class C{  public BAD_PARAM(){  this("");}  }
class C{  public void debug(Object message){}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      final float x=mInterpolator.getInterpolation(timePassed * mDurationReciprocal);    mCurrX=mStartX + Math.round(x * mDeltaX);  mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry[] oldMap=table;  int newCapacity=oldCapacity * 2 + 1;  Entry[] newMap=new Entry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.key & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="www.xyz.com";  String qualifiedName="emp:local1";  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Element genElement;  int nodeType;  doc=(Document)load("staffNS",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);{    boolean success=false;    try {      genElement.setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns07.class,args);}  }
class C{  public SQLSyntaxErrorException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  EncodingFlags(){  super();}  }
class C{  public static IOFileFilter magicNumberFileFilter(byte[] magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  java.io.ObjectInputStream.GetField fields=s.readFields();  value=(char[])fields.get("value",null);  count=fields.get("count",0);}  }
class C{  public final void testSetSeedbyteArray02() throws NoSuchFieldException, SecurityException, IllegalAccessException {  byte[] seed=new byte[LENGTH];  byte[] bytes1=new byte[LENGTH];  byte[] bytes2=new byte[LENGTH];  boolean b;  for (int i=0; i < seed.length; i++) {    seed[i]=(byte)i;  }  sr.setSeed(seed);  sr.setSeed(seed);  sr2.setSeed(seed);  sr.nextBytes(bytes1);  sr2.nextBytes(bytes2);  b=true;  for (int j=0; j < bytes1.length; j++) {    b&=bytes1[j] == bytes2[j];  }  assertFalse("unexpected: sequences are equal",b);}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  protected InvocationEvent(Object source,int id,Runnable runnable,Object notifier,boolean catchThrowables){  this(source,id,runnable,notifier,null,catchThrowables);}  }
class C{  public String generateNextPrefix(){  return "ns" + (count++);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditType createSecurityAuditType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditTypeImpl();}  }
class C{  public static long fileLength(File file){  long length=0L;  if (file.isFile())   length=file.length(); else   if (file.isDirectory()) {    File[] files=file.listFiles();    if (files != null) {      for (      File f : files)       length+=fileLength(f);    }  }  return length;}  }
class C{  private static void printMatrix(int[][] matrix){  Log.v(TAG,"\tprintMap:");  int m=matrix.length;  int n=matrix[0].length;  for (int j=0; j < n; j++) {    String colY="\t\t";    for (int i=0; i < m; i++) {      colY+=String.format("%3d",matrix[i][j]);    }    Log.v(TAG,colY);  }}  }
class C{  public ProxyReader(Reader proxy){  super(proxy);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ResponseType createResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ResponseTypeImpl();}  }
class C{  Branch(final TemplateFile templateFile,final DN branchDN,final Schema schema) throws DecodeException {  this(templateFile,branchDN,schema,new ArrayList<String>(),new ArrayList<Integer>(),new ArrayList<TemplateLine>());}  }
class C{  GF256Poly multiply(int scalar){  if (scalar == 0) {    return field.getZero();  }  if (scalar == 1) {    return this;  }  int size=coefficients.length;  int[] product=new int[size];  for (int i=0; i < size; i++) {    product[i]=field.multiply(coefficients[i],scalar);  }  return new GF256Poly(field,product);}  }
class C{  public synchronized int available(){  return count - pos;}  }
class C{  @Override public void addErrorPage(ErrorPage errorPage){  if (errorPage == null)   throw new IllegalArgumentException(sm.getString("standardContext.errorPage.required"));  String location=errorPage.getLocation();  if ((location != null) && !location.startsWith("/")) {    if (isServlet22()) {      if (log.isDebugEnabled())       log.debug(sm.getString("standardContext.errorPage.warning",location));      errorPage.setLocation("/" + location);    } else {      throw new IllegalArgumentException(sm.getString("standardContext.errorPage.error",location));    }  }  String exceptionType=errorPage.getExceptionType();  if (exceptionType != null) {synchronized (exceptionPages) {      exceptionPages.put(exceptionType,errorPage);    }  } else {synchronized (statusPages) {      statusPages.put(Integer.valueOf(errorPage.getErrorCode()),errorPage);    }  }  fireContainerEvent("addErrorPage",errorPage);}  }
class C{  public DomainComponent(SSOToken token,String dcName) throws UMSException {  setAttribute(new Attr("objectclass",dcObjectClasses));  setAttribute(new Attr("dc",dcName));  try {    SSOTokenManager.getInstance().validateToken(token);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.INVALID_TOKEN),se);  }  m_token=token;}  }
class C{  public static String asHex(byte value){  return "0x" + Integer.toHexString(value);}  }
class C{  protected void convertMB(MessageBytes mb){  if (mb.getType() != MessageBytes.T_BYTES) {    return;  }  ByteChunk bc=mb.getByteChunk();  CharChunk cc=mb.getCharChunk();  int length=bc.getLength();  cc.allocate(length,-1);  byte[] bbuf=bc.getBuffer();  char[] cbuf=cc.getBuffer();  int start=bc.getStart();  for (int i=0; i < length; i++) {    cbuf[i]=(char)(bbuf[i + start] & 0xff);  }  mb.setChars(cbuf,0,length);}  }
class C{  @Override public boolean isDiffable(){  return true;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public String decodeKey(final String hexEncodedKey){  if (StringUtils.isEmpty(hexEncodedKey)) {    throw new IllegalArgumentException("hexEncodedKey cannot be empty");  }  try {    return new String(Hex.decodeHex(hexEncodedKey.toCharArray()));  } catch (  DecoderException de) {    throw new IllegalStateException(de);  }}  }
class C{  public ModSet(AttrSet attrSet,int op){  for (int i=0; i < attrSet.size(); i++) {    this.add(op,attrSet.elementAt(i).toLDAPAttribute());  }}  }
class C{  public PermissionCollection newPermissionCollection(){  return new AllPermissionCollection();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedataoffsetnegative.class,args);}  }
class C{  public EntryDNVirtualAttributeProvider(){  super();}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public static String formatTime(final Time time){  return formatDate(time,"hh:mm");}  }
class C{  public ForegroundAction(String nm,Color fg){  super(nm);  this.fg=fg;}  }
class C{  public synchronized boolean stop(int level) throws IOException {  boolean valid=false;  if ((level & Channel.MBR_RX_SEQ) == Channel.MBR_RX_SEQ) {    valid=true;    doRunReceiver=false;    if (receiver != null)     receiver.interrupt();    receiver=null;  }  if ((level & Channel.MBR_TX_SEQ) == Channel.MBR_TX_SEQ) {    valid=true;    doRunSender=false;    if (sender != null)     sender.interrupt();    sender=null;  }  if (!valid) {    throw new IllegalArgumentException(sm.getString("mcastServiceImpl.invalid.stopLevel"));  }  startLevel=(startLevel & (~level));  if (startLevel == 0) {    member.setCommand(Member.SHUTDOWN_PAYLOAD);    send(false);    try {      socket.leaveGroup(address);    } catch (    Exception ignore) {    }    try {      socket.close();    } catch (    Exception ignore) {    }    member.setServiceStartTime(-1);  }  return (startLevel == 0);}  }
class C{  public static List sortMapByValue(Map map,Locale locale){  List listSorted=Collections.EMPTY_LIST;  if ((map != null) && !map.isEmpty()) {    Map mapReverse=reverseStringMap(map);    List sortedKey=sortKeyInMap(mapReverse,locale);    listSorted=new ArrayList(sortedKey.size());    Iterator iter=sortedKey.iterator();    while (iter.hasNext()) {      String key=(String)iter.next();      listSorted.addAll((Set)mapReverse.get(key));    }  }  return listSorted;}  }
class C{  public void flush(){  if (writer != null) {    try {      writer.flush();    } catch (    Exception ex) {      Debug.error(logName + ":SecureFileHandler: " + "Could not Flush Output",ex);    }  }}  }
class C{  public NightModeHelper(Activity activity,int theme){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,theme,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  public String debugDump(int indent){  return super.debugDump(indent);}  }
class C{  private CloneUtils(){}  }
class C{  public Observable<InputStream> open(DriveId driveId){  return open(driveId,null);}  }
class C{  public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_First(field2,orderByComparator);}  }
class C{  LambdaFormBuffer insertParameter(int pos,Name param){  assert (param.isParam());  insertName(pos,param,true);  return this;}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.security.Key key) throws XMLSignatureException {  return sp.verifyWSSSignature(document,key);}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  private char[] mapNumericReference(int c){  char[] data;  if (c >= 0xffff) {    try {      data=Character.toChars(c);    } catch (    IllegalArgumentException e) {      data=new char[0];    }  } else {    data=new char[1];    data[0]=(c < 130 || c > 159) ? (char)c : cp1252Map[c - 130];  }  return data;}  }
class C{  public JKEmptyReportException(Throwable arg0){  super(arg0);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction st){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ((SipURI)address.getURI()).setTransportParam(protocolObjects.transport);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      SctpTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    SctpTest.fail(s);  }}  }
class C{  public InvalidException(String message,Throwable cause){  super(message,cause);}  }
class C{  public UCSReader(InputStream inputStream,short encoding){  this(inputStream,DEFAULT_BUFFER_SIZE,encoding);}  }
class C{  public Cursor fetchAll(String dataFilterName,String dataFilterDisplayName,Long filterOnDataTypeID,Long compareWithDataTypeID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (dataFilterName != null) {    qb.appendWhere(" AND " + KEY_DATAFILTERNAME + " = ");    qb.appendWhereEscapeString(dataFilterName);  }  if (dataFilterDisplayName != null) {    qb.appendWhere(" AND " + KEY_DATAFILTERDISPLAYNAME + " = ");    qb.appendWhereEscapeString(dataFilterDisplayName);  }  if (filterOnDataTypeID != null) {    qb.appendWhere(" AND " + KEY_FILTERONDATATYPEID + " = "+ filterOnDataTypeID);  }  if (compareWithDataTypeID != null) {    qb.appendWhere(" AND " + KEY_COMPAREWITHDATATYPEID + " = "+ compareWithDataTypeID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @SuppressWarnings({"unchecked","boxing"}) public void testSerializationCompatibility() throws Exception {  EnumMap enumColorMap=new EnumMap<Color,Double>(Color.class);  enumColorMap.put(Color.Red,1);  enumColorMap.put(Color.Blue,3);  SerializationTest.verifyGolden(this,enumColorMap);}  }
class C{  public synchronized T unpush(){  T content=null;  if (first != null) {    Entry element=first;    first=first.getNext();    content=element.getContent();    if (first == null) {      last=null;    } else {      first.setPrevious(null);    }    size--;    element.invalidate();  }  return content;}  }
class C{  public void register(ReplicationServerHandler rsHandler){  startMonitoringPublisher();  connectedRSs.put(rsHandler.getServerId(),rsHandler);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: " + this.myPort + " got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ringingResponse.setHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag="shootme-" + myPort + "-"+ new Integer(new Random().nextInt()).toString();    toHeader.setTag(toTag);    if (sendRinging) {      Thread.sleep(this.ringingDelay / 2);      st.sendResponse(ringingResponse);    }    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    if (okDelay > 0) {      timer.schedule(new MyTimerTask(requestEvent,st,toTag),this.okDelay);    }  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  BaseUriFilter(final Expression<String> baseUri,final Logger logger){  this.baseUri=baseUri;  this.logger=logger;}  }
class C{  public static BigInteger bigIntSqRootFloor(BigInteger x) throws IllegalArgumentException {  if (x.compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("Negative argument.");  }  if (x.equals(BigInteger.ZERO) || x.equals(BigInteger.ONE)) {    return x;  }  BigInteger two=BigInteger.valueOf(2L);  BigInteger y;  for (y=x.divide(two); y.compareTo(x.divide(y)) > 0; y=((x.divide(y)).add(y)).divide(two))   ;  return y;}  }
class C{  public static boolean isUserActive(String uid) throws NotFoundException {  try {    AMIdentity userIdentity=new AMIdentity(RestUtils.getToken(),uid);    if (debug.messageEnabled()) {      debug.message("IdentityResource.isUserActive() : UID={} isActive={}",uid,userIdentity.isActive());    }    return userIdentity.isActive();  } catch (  IdRepoException idre) {    if (debug.errorEnabled()) {      debug.error("IdentityResource.isUserActive() : Invalid UID={}",uid,idre);    }    throw new NotFoundException("Invalid UID, could not retrieved " + uid,idre);  }catch (  SSOException ssoe) {    if (debug.errorEnabled()) {      debug.error("IdentityResource.isUserActive() : Invalid SSOToken",ssoe);    }    throw new NotFoundException("Invalid SSOToken " + ssoe.getMessage(),ssoe);  }}  }
class C{  public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  public static List<Foo> findByUuid(java.lang.String uuid){  return getPersistence().findByUuid(uuid);}  }
class C{  public void warning(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).warning(e);  } else {    try {      errorListener.warning(new javax.xml.transform.TransformerException(e));    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  assertSize("documentGetElementsByTagNameLengthAssert",5,nameList);}  }
class C{  @Override public Object runScriptOnConnector(ScriptContext request,OperationOptions options){  if ("SHELL".equals(request.getScriptLanguage())) {    throw new ConnectorException("SHELL Script is not supported");  } else   if ("Groovy".equals(request.getScriptLanguage())) {    return executeGroovyScript(request);  }  return null;}  }
class C{  public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().findByUuid_C(uuid,companyId);}  }
class C{  public static AddRequest unmodifiableAddRequest(final AddRequest request){  if (request instanceof UnmodifiableAddRequestImpl) {    return request;  }  return new UnmodifiableAddRequestImpl(request);}  }
class C{  private void processReplaceModification(Attribute attr) throws DirectoryException {  if (mustCheckSchema()) {    checkSchema(attr,ERR_MODIFY_REPLACE_INVALID_SYNTAX,ERR_MODIFY_REPLACE_INVALID_SYNTAX_NO_VALUE);  }  AttributeDescription attrDesc=attr.getAttributeDescription();  AttributeType t=attrDesc.getAttributeType();  if (t.isObjectClass()) {    validateObjectClasses(attr);  }  modifiedEntry.replaceAttribute(attr);  RDN rdn=modifiedEntry.getName().rdn();  if (rdn != null && rdn.hasAttributeType(t) && !modifiedEntry.hasValue(attrDesc,rdn.getAttributeValue(t))) {    throw newDirectoryException(modifiedEntry,ResultCode.NOT_ALLOWED_ON_RDN,ERR_MODIFY_DELETE_RDN_ATTR.get(entryDN,attrDesc));  }}  }
class C{  public void testNormalize() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType docTypeNull=null;  Element documentElement;  Element element1;  Element element2;  Element element3;  Element element4;  Element element5;  Element element6;  Element element7;  Text text1;  Text text2;  Text text3;  ProcessingInstruction pi;  CDATASection cData;  Comment comment;  EntityReference entRef;  NodeList elementList;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:root",docTypeNull);  element1=newDoc.createElement("element1");  element2=newDoc.createElement("element2");  element3=newDoc.createElement("element3");  element4=newDoc.createElement("element4");  element5=newDoc.createElement("element5");  element6=newDoc.createElement("element6");  element7=newDoc.createElement("element7");  text1=newDoc.createTextNode("text1");  text2=newDoc.createTextNode("text2");  text3=newDoc.createTextNode("text3");  cData=newDoc.createCDATASection("Cdata");  comment=newDoc.createComment("comment");  pi=newDoc.createProcessingInstruction("PITarget","PIData");  entRef=newDoc.createEntityReference("EntRef");  assertNotNull("createdEntRefNotNull",entRef);  documentElement=newDoc.getDocumentElement();  documentElement.appendChild(element1);  element2.appendChild(text1);  element2.appendChild(text2);  element2.appendChild(text3);  element1.appendChild(element2);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  element3.appendChild(entRef);  element3.appendChild(text1);  element3.appendChild(text2);  element1.appendChild(element3);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  element4.appendChild(cData);  element4.appendChild(text1);  element4.appendChild(text2);  element1.appendChild(element4);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element5.appendChild(comment);  element5.appendChild(text2);  element5.appendChild(text3);  element1.appendChild(element5);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element6.appendChild(pi);  element6.appendChild(text2);  element6.appendChild(text3);  element1.appendChild(element6);  entRef=(EntityReference)entRef.cloneNode(false);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element7.appendChild(entRef);  element7.appendChild(text1);  element7.appendChild(text2);  element7.appendChild(text3);  element1.appendChild(element7);  elementList=element1.getChildNodes();  assertEquals("nodeNormalize01_1Bef",6,elementList.getLength());  elementList=element2.getChildNodes();  assertEquals("nodeNormalize01_2Bef",3,elementList.getLength());  elementList=element3.getChildNodes();  assertEquals("nodeNormalize01_3Bef",3,elementList.getLength());  elementList=element4.getChildNodes();  assertEquals("nodeNormalize01_4Bef",3,elementList.getLength());  elementList=element5.getChildNodes();  assertEquals("nodeNormalize01_5Bef",3,elementList.getLength());  elementList=element6.getChildNodes();  assertEquals("nodeNormalize01_6Bef",3,elementList.getLength());  elementList=element7.getChildNodes();  assertEquals("nodeNormalize01_7Bef",4,elementList.getLength());  newDoc.normalize();  elementList=element1.getChildNodes();  assertEquals("nodeNormalize01_1Aft",6,elementList.getLength());  elementList=element2.getChildNodes();  assertEquals("nodeNormalize01_2Aft",1,elementList.getLength());  elementList=element3.getChildNodes();  assertEquals("nodeNormalize01_3Aft",2,elementList.getLength());  elementList=element4.getChildNodes();  assertEquals("nodeNormalize01_4Aft",2,elementList.getLength());  elementList=element5.getChildNodes();  assertEquals("nodeNormalize01_5Aft",2,elementList.getLength());  elementList=element6.getChildNodes();  assertEquals("nodeNormalize01_6Aft",2,elementList.getLength());  elementList=element7.getChildNodes();  assertEquals("nodeNormalize01_7Aft",2,elementList.getLength());}  }
class C{  @DataProvider(name="passwordPolicyErrorTypeData") public Object[][] createPasswordPolicyErrorTypeData(){  HashMap<Integer,String> values=new HashMap<>();  values.put(0,"passwordExpired");  values.put(1,"accountLocked");  values.put(2,"changeAfterReset");  values.put(3,"passwordModNotAllowed");  values.put(4,"mustSupplyOldPassword");  values.put(5,"insufficientPasswordQuality");  values.put(6,"passwordTooShort");  values.put(7,"passwordTooYoung");  values.put(8,"passwordInHistory");  return new Object[][]{{values}};}  }
class C{  public static boolean removeDir(File dir){  String[] list=dir.list();  if (list != null) {    int count=list.length;    for (int i=0; i < count; i++) {      String fileName=list[i];      File file=new File(dir,fileName);      if (file.isDirectory()) {        removeDir(file);      } else       if (!file.delete()) {        Debug.log("FileUtils.removeDir() Unable to delete file: " + file.getAbsolutePath());      }    }  }  boolean status=dir.delete();  if (!status) {    Debug.log("FileUtils.removeDir() Unable to delete directory: " + dir.getAbsolutePath());  }  return status;}  }
class C{  protected void fireStartDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTDOCUMENT);  }}  }
class C{  public UmaPendingRequest readPendingRequest(String id) throws ResourceException {  try {    return store.read(id);  } catch (  NotFoundException e) {    throw new org.forgerock.json.resource.NotFoundException("Pending request, " + id + ", not found",e);  }catch (  ServerException e) {    throw new InternalServerErrorException("Failed to read pending request, " + id,e);  }}  }
class C{  public void toString(StringBuilder buffer){  buffer.append("Password Attribute:                    ");  buffer.append(configuration.getPasswordAttribute().getNameOrOID());  buffer.append(EOL);  buffer.append("Default Password Storage Schemes:      ");  if (defaultStorageSchemes == null || defaultStorageSchemes.isEmpty()) {    buffer.append("{none specified}");    buffer.append(EOL);  } else {    Iterator<PasswordStorageScheme<?>> iterator=defaultStorageSchemes.iterator();    buffer.append(iterator.next().getStorageSchemeName());    buffer.append(EOL);    while (iterator.hasNext()) {      buffer.append("                                       ");      buffer.append(iterator.next().getStorageSchemeName());      buffer.append(EOL);    }  }  buffer.append("Deprecated Password Storage Schemes:   ");  if (deprecatedStorageSchemes == null || deprecatedStorageSchemes.isEmpty()) {    buffer.append("{none specified}");    buffer.append(EOL);  } else {    Iterator<String> iterator=deprecatedStorageSchemes.iterator();    buffer.append(iterator.next());    buffer.append(EOL);    while (iterator.hasNext()) {      buffer.append("                                       ");      buffer.append(iterator.next());      buffer.append(EOL);    }  }  buffer.append("Allow Multiple Password Values:        ");  buffer.append(configuration.isAllowMultiplePasswordValues());  buffer.append(EOL);  buffer.append("Allow Pre-Encoded Passwords:           ");  buffer.append(configuration.isAllowPreEncodedPasswords());  buffer.append(EOL);  buffer.append("Allow User Password Changes:           ");  buffer.append(configuration.isAllowUserPasswordChanges());  buffer.append(EOL);  buffer.append("Force Password Change on Add:          ");  buffer.append(configuration.isForceChangeOnAdd());  buffer.append(EOL);  buffer.append("Force Password Change on Admin Reset:  ");  buffer.append(configuration.isForceChangeOnReset());  buffer.append(EOL);  buffer.append("Require Current Password:              ");  buffer.append(configuration.isPasswordChangeRequiresCurrentPassword());  buffer.append(EOL);  buffer.append("Require Secure Authentication:         ");  buffer.append(configuration.isRequireSecureAuthentication());  buffer.append(EOL);  buffer.append("Require Secure Password Changes:       ");  buffer.append(configuration.isRequireSecurePasswordChanges());  buffer.append(EOL);  buffer.append("Lockout Failure Expiration Interval:   ");  buffer.append(configuration.getLockoutFailureExpirationInterval());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Password Validators:                   ");  if (passwordValidators == null || passwordValidators.isEmpty()) {    buffer.append("{none specified}");    buffer.append(EOL);  } else {    Iterator<DN> iterator=passwordValidators.keySet().iterator();    buffer.append(iterator.next());    buffer.append(EOL);    while (iterator.hasNext()) {      buffer.append("                                       ");      buffer.append(iterator.next());      buffer.append(EOL);    }  }  buffer.append("Skip Validation for Administrators:    ");  buffer.append(configuration.isSkipValidationForAdministrators());  buffer.append(EOL);  buffer.append("Password Generator:                    ");  if (passwordGenerator == null) {    buffer.append("{none specified}");  } else {    buffer.append(configuration.getPasswordGeneratorDN());  }  buffer.append(EOL);  buffer.append("Account Status Notification Handlers:  ");  if (notificationHandlers == null || notificationHandlers.isEmpty()) {    buffer.append("{none specified}");    buffer.append(EOL);  } else {    Iterator<DN> iterator=notificationHandlers.keySet().iterator();    buffer.append(iterator.next());    buffer.append(EOL);    while (iterator.hasNext()) {      buffer.append("                                       ");      buffer.append(iterator.next());      buffer.append(EOL);    }  }  buffer.append("Minimum Password Age:                  ");  buffer.append(configuration.getMinPasswordAge());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Maximum Password Age:                  ");  buffer.append(configuration.getMaxPasswordAge());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Maximum Password Reset Age:            ");  buffer.append(configuration.getMaxPasswordResetAge());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Expiration Warning Interval:           ");  buffer.append(configuration.getPasswordExpirationWarningInterval());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Expire Passwords Without Warning:      ");  buffer.append(configuration.isExpirePasswordsWithoutWarning());  buffer.append(EOL);  buffer.append("Allow Expired Password Changes:        ");  buffer.append(configuration.isAllowExpiredPasswordChanges());  buffer.append(EOL);  buffer.append("Grace Login Count:                     ");  buffer.append(configuration.getGraceLoginCount());  buffer.append(EOL);  buffer.append("Lockout Failure Count:                 ");  buffer.append(configuration.getLockoutFailureCount());  buffer.append(EOL);  buffer.append("Lockout Duration:                      ");  buffer.append(configuration.getLockoutDuration());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Lockout Count Expiration Interval:     ");  buffer.append(configuration.getLockoutFailureExpirationInterval());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("Required Password Change By Time:      ");  if (requireChangeByTime <= 0) {    buffer.append("{none specified}");  } else {    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GENERALIZED_TIME);    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));    buffer.append(dateFormat.format(new Date(requireChangeByTime)));  }  buffer.append(EOL);  buffer.append("Last Login Time Attribute:             ");  if (configuration.getLastLoginTimeAttribute() != null) {    buffer.append(configuration.getLastLoginTimeAttribute().getNameOrOID());  } else {    buffer.append("{none specified}");  }  buffer.append(EOL);  buffer.append("Last Login Time Format:                ");  if (configuration.getLastLoginTimeFormat() != null) {    buffer.append(configuration.getLastLoginTimeFormat());  } else {    buffer.append("{none specified}");  }  buffer.append(EOL);  buffer.append("Previous Last Login Time Formats:      ");  if (configuration.getPreviousLastLoginTimeFormat().isEmpty()) {    buffer.append("{none specified}");    buffer.append(EOL);  } else {    Iterator<String> iterator=configuration.getPreviousLastLoginTimeFormat().iterator();    buffer.append(iterator.next());    buffer.append(EOL);    while (iterator.hasNext()) {      buffer.append("                                       ");      buffer.append(iterator.next());      buffer.append(EOL);    }  }  buffer.append("Idle Lockout Interval:                 ");  buffer.append(configuration.getIdleLockoutInterval());  buffer.append(" seconds");  buffer.append(EOL);  buffer.append("History Count:                         ");  buffer.append(configuration.getPasswordHistoryCount());  buffer.append(EOL);  buffer.append("Update Failure Policy:                 ");  buffer.append(configuration.getStateUpdateFailurePolicy());  buffer.append(EOL);}  }
class C{  public static IOFileFilter suffixFileFilter(String suffix,IOCase caseSensitivity){  return new SuffixFileFilter(suffix,caseSensitivity);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonegetparentnull.class,args);}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public void testFloatValuePos(){  String a="1238096483923847.6356789029578E+21";  BigDecimal aNumber=new BigDecimal(a);  float result=1.2380965E36F;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  @Override public void publish(final LogRecord logRecord){  if (!isLoggable(logRecord)) {    return;  }  String formatted=getFormatter().format(logRecord);synchronized (logRecords) {    logRecords.add(formatted);    if (logRecords.size() >= bufferSize) {      nonBlockingFlush();    }  }}  }
class C{  public void createSubConfig(String name,String schemaName,Map values) throws AMConsoleException {  String[] params={serviceName,parentConfig.getComponentName(),name,schemaName};  try {    amModel.logEvent("ATTEMPT_CREATE_GLOBAL_SUB_CONFIGURATION",params);    parentConfig.addSubConfig(name,schemaName,0,values);    amModel.logEvent("SUCCEED_CREATE_GLOBAL_SUB_CONFIGURATION",params);  } catch (  SSOException e) {    String[] paramsEx={serviceName,parentConfig.getComponentName(),name,schemaName,amModel.getErrorString(e)};    amModel.logEvent("SSO_EXCEPTION_CREATE_GLOBAL_SUB_CONFIGURATION",paramsEx);    throw new AMConsoleException(amModel.getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={serviceName,parentConfig.getComponentName(),name,schemaName,amModel.getErrorString(e)};    amModel.logEvent("SMS_EXCEPTION_CREATE_GLOBAL_SUB_CONFIGURATION",paramsEx);    throw new AMConsoleException(amModel.getErrorString(e));  }}  }
class C{  public ContinuousQueryException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void iconifyFrame(JInternalFrame f){  JInternalFrame.JDesktopIcon desktopIcon;  Container c=f.getParent();  JDesktopPane d=f.getDesktopPane();  boolean findNext=f.isSelected();  desktopIcon=f.getDesktopIcon();  if (!wasIcon(f)) {    Rectangle r=getBoundsForIconOf(f);    desktopIcon.setBounds(r.x,r.y,r.width,r.height);    desktopIcon.revalidate();    setWasIcon(f,Boolean.TRUE);  }  if (c == null || d == null) {    return;  }  if (c instanceof JLayeredPane) {    JLayeredPane lp=(JLayeredPane)c;    int layer=lp.getLayer(f);    lp.putLayer(desktopIcon,layer);  }  if (!f.isMaximum()) {    f.setNormalBounds(f.getBounds());  }  d.setComponentOrderCheckingEnabled(false);  c.remove(f);  c.add(desktopIcon);  d.setComponentOrderCheckingEnabled(true);  c.repaint(f.getX(),f.getY(),f.getWidth(),f.getHeight());  if (findNext) {    if (d.selectFrame(true) == null) {      f.restoreSubcomponentFocus();    }  }}  }
class C{  void updateValue(Object value){  super.updateValue(value);  updateMaskIfNecessary();}  }
class C{  public static int stopDS(String[] args){  return stopDS(args,System.out,System.err);}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof FilePermission))   return false;  FilePermission that=(FilePermission)p;  return ((this.mask & that.mask) == that.mask) && impliesIgnoreMask(that);}  }
class C{  public RequestEvent extractCollectedRequestEvent(){  return this.extractCollectedRequestEvent(true);}  }
class C{  public static void bindContext(Object obj,Context context){  bindContext(obj,context,null);}  }
class C{  public TreeModelEvent(Object source,Object[] path,int[] childIndices,Object[] children){  this(source,(path == null) ? null : new TreePath(path),childIndices,children);}  }
class C{  @Override public boolean removeOperationInProgress(int messageID){  Operation operation=operationsInProgress.remove(messageID);  if (operation == null) {    return false;  }  if (operation.getOperationType() == OperationType.ABANDON && keepStats && operation.getResultCode() == ResultCode.CANCELLED) {    statTracker.updateAbandonedOperation();  }  lastCompletionTime.set(TimeThread.getTime());  return true;}  }
class C{  private void emitReturnInsn(BasicType type){  int opcode;switch (type) {case I_TYPE:    opcode=Opcodes.IRETURN;  break;case J_TYPE:opcode=Opcodes.LRETURN;break;case F_TYPE:opcode=Opcodes.FRETURN;break;case D_TYPE:opcode=Opcodes.DRETURN;break;case L_TYPE:opcode=Opcodes.ARETURN;break;case V_TYPE:opcode=Opcodes.RETURN;break;default :throw new InternalError("unknown return type: " + type);}mv.visitInsn(opcode);}  }
class C{  public TransactionTerminatedEvent extractCollectedTransactionTerminatedEvent(){  if (transactionTerminationCollector == null)   throw new TckInternalError("A timeout collect was attempted when the transactionTerminationCollector was null");  TransactionTerminatedEvent collectedEvent=this.transactionTerminationCollector.collectedEvent;  transactionTerminationCollector.provider.removeSipListener(transactionTerminationCollector);  resetCollectors();  return collectedEvent;}  }
class C{  @BeforeClass @SuppressWarnings("unchecked") public void entryCacheTestInit() throws Exception {  TestCaseUtils.startServer();  super.cache=(EntryCache<EntryCacheCfg>)DirectoryServer.getEntryCache();  softRefCache=new SoftReferenceEntryCache();  cacheSoftReferenceConfigEntry=TestCaseUtils.makeEntry("dn: cn=Soft Reference,cn=Entry Caches,cn=config","objectClass: ds-cfg-soft-reference-entry-cache","objectClass: ds-cfg-entry-cache","objectClass: top","cn: Soft Reference","ds-cfg-cache-level: 1","ds-cfg-java-class: " + "org.opends.server.extensions.SoftReferenceEntryCache","ds-cfg-enabled: true","ds-cfg-include-filter: uid=softref*","ds-cfg-include-filter: uid=test1*","ds-cfg-exclude-filter: uid=test0*");  softRefCache.initializeEntryCache(InitializationUtils.getConfiguration(SoftReferenceEntryCacheCfgDefn.getInstance(),cacheSoftReferenceConfigEntry));  cacheOrderMap.put(1,softRefCache);  fifoCache=new FIFOEntryCache();  cacheFIFOConfigEntry=TestCaseUtils.makeEntry("dn: cn=FIFO,cn=Entry Caches,cn=config","objectClass: ds-cfg-fifo-entry-cache","objectClass: ds-cfg-entry-cache","objectClass: top","cn: FIFO","ds-cfg-cache-level: 2","ds-cfg-java-class: org.opends.server.extensions.FIFOEntryCache","ds-cfg-enabled: true","ds-cfg-include-filter: uid=fifo*","ds-cfg-include-filter: uid=test2*","ds-cfg-include-filter: uid=test0*");  fifoCache.initializeEntryCache(InitializationUtils.getConfiguration(FIFOEntryCacheCfgDefn.getInstance(),cacheFIFOConfigEntry));  cacheOrderMap.put(2,fifoCache);  final Method[] defaultCacheMethods=super.cache.getClass().getDeclaredMethods();  for (  Method defaultCacheMethod : defaultCacheMethods) {    if (defaultCacheMethod.getName().equals("setCacheOrder")) {      defaultCacheMethod.setAccessible(true);      Object arglist[]=new Object[]{cacheOrderMap};      defaultCacheMethod.invoke(cache,arglist);    }  }  super.testEntriesList=new ArrayList<>(super.NUMTESTENTRIES);  for (int i=0; i < super.NUMTESTENTRIES; i++) {    super.testEntriesList.add(TestCaseUtils.makeEntry("dn: uid=test" + i + ".user"+ i+ ",ou=test"+ i+ ",o=test","objectClass: person","objectClass: inetorgperson","objectClass: top","objectClass: organizationalperson","postalAddress: somewhere in Testville" + i,"street: Under Construction Street" + i,"l: Testcounty" + i,"st: Teststate" + i,"telephoneNumber: +878 8378 8378" + i,"mobile: +878 8378 8378" + i,"homePhone: +878 8378 8378" + i,"pager: +878 8378 8378" + i,"mail: test" + i + ".user"+ i+ "@testdomain.net","postalCode: 8378" + i,"userPassword: testpassword" + i,"description: description for Test" + i + "User"+ i,"cn: Test" + i + "User"+ i,"sn: User" + i,"givenName: Test" + i,"initials: TST" + i,"employeeNumber: 8378" + i,"uid: test" + i + ".user"+ i));  }  testSoftRefEntriesList=new ArrayList<>(super.NUMTESTENTRIES);  for (int i=0; i < super.NUMTESTENTRIES; i++) {    testSoftRefEntriesList.add(TestCaseUtils.makeEntry("dn: uid=softref" + i + ".user"+ i+ ",ou=test"+ i+ ",o=test","objectClass: person","objectClass: inetorgperson","objectClass: top","objectClass: organizationalperson","uid: softref" + i + ".user"+ i));  }  testFIFOEntriesList=new ArrayList<>(super.NUMTESTENTRIES);  for (int i=0; i < super.NUMTESTENTRIES; i++) {    testFIFOEntriesList.add(TestCaseUtils.makeEntry("dn: uid=fifo" + i + ".user"+ i+ ",ou=test"+ i+ ",o=test","objectClass: person","objectClass: inetorgperson","objectClass: top","objectClass: organizationalperson","uid: fifo" + i + ".user"+ i));  }  System.gc();}  }
class C{  public Vector cross(Matrix by){  float x=vals[I1] * by.get(Matrix.I11) + vals[I2] * by.get(Matrix.I21) + vals[I3] * by.get(Matrix.I31);  float y=vals[I1] * by.get(Matrix.I12) + vals[I2] * by.get(Matrix.I22) + vals[I3] * by.get(Matrix.I32);  float z=vals[I1] * by.get(Matrix.I13) + vals[I2] * by.get(Matrix.I23) + vals[I3] * by.get(Matrix.I33);  return new Vector(x,y,z);}  }
class C{  private void writeObject(ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeObject(toString());}  }
class C{  public DispatchHandler addBinding(Expression<Boolean> condition,Handler handler,URI baseURI){  bindings.add(new Binding(condition,handler,baseURI));  return this;}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  public void init(KeyGenerationParameters param){  super.init(param);  if (strength == 0 || strength == (56 / 8)) {    strength=DESParameters.DES_KEY_LENGTH;  } else   if (strength != DESParameters.DES_KEY_LENGTH) {    throw new IllegalArgumentException("DES key must be " + (DESParameters.DES_KEY_LENGTH * 8) + " bits long.");  }}  }
class C{  public ChainedBindings(final Bindings parent,final Bindings current){  Reject.ifNull(parent,current);  this.parent=parent;  this.current=current;}  }
class C{  public SOAPMessage createSOAPMessage(final String xmlString,final boolean isClientMessage) throws SOAPException, SAML2Exception {  return createSOAPMessage(null,xmlString,isClientMessage);}  }
class C{  public String toString(){  return (resourceMatch);}  }
class C{  private static void toUNIXMode(StringBuilder buffer,FilePermission p){  byte modeByte=0x00;  if (p.isOwnerReadable()) {    modeByte|=0x04;  }  if (p.isOwnerWritable()) {    modeByte|=0x02;  }  if (p.isOwnerExecutable()) {    modeByte|=0x01;  }  buffer.append(modeByte);  modeByte=0x00;  if (p.isGroupReadable()) {    modeByte|=0x04;  }  if (p.isGroupWritable()) {    modeByte|=0x02;  }  if (p.isGroupExecutable()) {    modeByte|=0x01;  }  buffer.append(modeByte);  modeByte=0x00;  if (p.isOtherReadable()) {    modeByte|=0x04;  }  if (p.isOtherWritable()) {    modeByte|=0x02;  }  if (p.isOtherExecutable()) {    modeByte|=0x01;  }  buffer.append(modeByte);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ReferenceTypeImpl();}  }
class C{  public static PdfAction createGoToR(PdfFileSpec fileSpec,PdfDestination destination,boolean newWindow){  return new PdfAction().put(PdfName.S,PdfName.GoToR).put(PdfName.F,fileSpec.getPdfObject()).put(PdfName.D,destination.getPdfObject()).put(PdfName.NewWindow,new PdfBoolean(newWindow));}  }
class C{  private void readOrderFromDictionary(PdfLayer parent,PdfArray orderArray,Map<PdfIndirectReference,PdfLayer> layerMap){  for (int i=0; i < orderArray.size(); i++) {    PdfObject item=orderArray.get(i);    if (item.getType() == PdfObject.DICTIONARY) {      PdfLayer layer=layerMap.get(item.getIndirectReference());      if (layer != null) {        layers.add(layer);        layer.onPanel=true;        if (parent != null)         parent.addChild(layer);        if (i + 1 < orderArray.size() && orderArray.get(i + 1).getType() == PdfObject.ARRAY) {          readOrderFromDictionary(layer,orderArray.getAsArray(i + 1),layerMap);          i++;        }      }    } else     if (item.getType() == PdfObject.ARRAY) {      PdfArray subArray=(PdfArray)item;      if (subArray.isEmpty())       continue;      PdfObject firstObj=subArray.get(0);      if (firstObj.getType() == PdfObject.STRING) {        PdfLayer titleLayer=PdfLayer.createTitleSilent(((PdfString)firstObj).toUnicodeString(),getDocument());        titleLayer.onPanel=true;        layers.add(titleLayer);        if (parent != null)         parent.addChild(titleLayer);        readOrderFromDictionary(titleLayer,new PdfArray(subArray.subList(1,subArray.size())),layerMap);      } else {        readOrderFromDictionary(parent,subArray,layerMap);      }    }  }}  }
class C{  public FrameBodyTKEY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public AccountUsableResponseControl(boolean isCritical,boolean isInactive,boolean isReset,boolean isExpired,int remainingGraceLogins,boolean isLocked,int secondsBeforeUnlock){  super(OID_ACCOUNT_USABLE_CONTROL,isCritical);  this.isInactive=isInactive;  this.isReset=isReset;  this.isExpired=isExpired;  this.remainingGraceLogins=remainingGraceLogins;  this.isLocked=isLocked;  this.secondsBeforeUnlock=secondsBeforeUnlock;  isUsable=false;  secondsBeforeExpiration=-1;}  }
class C{  protected final String entryName(final Entry entry){  return entry.getName().rdn().getFirstAVA().getAttributeValue().toString();}  }
class C{  public boolean isSealed(){  return sealBase != null;}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  @SuppressWarnings("deprecation") public boolean contains(JComponent c,int x,int y){  return c.inside(x,y);}  }
class C{  public SAML2ConfigBuilder spAcsUrl(String spAcsUrl){  this.spAcsUrl=spAcsUrl;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  boolean found=false;  for (ElemTemplateElement childElem=getFirstChildElem(); childElem != null; childElem=childElem.getNextSiblingElem()) {    int type=childElem.getXSLToken();    if (Constants.ELEMNAME_WHEN == type) {      found=true;      ElemWhen when=(ElemWhen)childElem;      XPathContext xctxt=transformer.getXPathContext();      int sourceNode=xctxt.getCurrentNode();      if (when.getTest().bool(xctxt,sourceNode,when)) {        transformer.executeChildTemplates(when,true);        return;      }    } else     if (Constants.ELEMNAME_OTHERWISE == type) {      found=true;      transformer.executeChildTemplates(childElem,true);      return;    }  }  if (!found)   transformer.getMsgMgr().error(this,XSLTErrorResources.ER_CHOOSE_REQUIRES_WHEN);}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  @Override public int compareTo(LibPackage p_other){  return pkg_name.compareToIgnoreCase(p_other.pkg_name);}  }
class C{  protected void addRDNAttributesIfNecessary(DN entryDN,Map<AttributeType,List<Attribute>> userAttributes,Map<AttributeType,List<Attribute>> operationalAttributes){  for (  AVA ava : entryDN.rdn()) {    AttributeType t=ava.getAttributeType();    addRDNAttributesIfNecessary(t.isOperational() ? operationalAttributes : userAttributes,ava);  }}  }
class C{  public void removeSelectionRows(int[] rows){  TreeUI ui=getUI();  if (ui != null && rows != null) {    int numRows=rows.length;    TreePath[] paths=new TreePath[numRows];    for (int counter=0; counter < numRows; counter++)     paths[counter]=ui.getPathForRow(this,rows[counter]);    removeSelectionPaths(paths);  }}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {  Class<?>[] interfaceClasses=new Class[interfaces.length];  for (int i=0; i < interfaces.length; i++) {    interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);  }  try {    return Proxy.getProxyClass(classLoader,interfaceClasses);  } catch (  IllegalArgumentException e) {    return super.resolveProxyClass(interfaces);  }}  }
class C{  private void configure() throws Exception {  replicationServerPort=TestCaseUtils.findFreePort();  TestCaseUtils.dsconfig("create-replication-server","--provider-name","Multimaster Synchronization","--set","replication-db-directory:" + "replicationServerTestConfigureDb","--set","replication-port:" + replicationServerPort,"--set","replication-server-id:71");  for (  SynchronizationProvider<?> provider : DirectoryServer.getSynchronizationProviders()) {    if (provider instanceof MultimasterReplication) {      MultimasterReplication mmp=(MultimasterReplication)provider;      ReplicationServerListener list=mmp.getReplicationServerListener();      if (list != null) {        replicationServer=list.getReplicationServer();        if (replicationServer != null) {          break;        }      }    }  }  assertNotNull(replicationServer);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RequestAuthnContextType createRequestAuthnContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextTypeImpl();}  }
class C{  public CodeStream putByteArray(final byte[] b,final int offset,final int length){  ensureCapacity(length);  if (b != null) {    System.arraycopy(b,offset,_data,_length,length);  }  _length+=length;  return this;}  }
class C{  public static PolicyListenerRequest parseXML(Node pNode) throws PolicyEvaluationException {  PolicyListenerRequest policyListenerReq=new PolicyListenerRequest();  String attr=XMLUtils.getNodeAttributeValue(pNode,SERVICE_NAME);  if (attr == null) {    debug.error("PolicyListenerRequest: missing attribute " + SERVICE_NAME);    String objs[]={SERVICE_NAME};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  policyListenerReq.setServiceName(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,NOTIFICATION_URL);  if (attr == null) {    debug.error("PolicyListenerRequest: missing attribute " + NOTIFICATION_URL);    String objs[]={NOTIFICATION_URL};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  policyListenerReq.setNotificationURL(attr);  return policyListenerReq;}  }
class C{  protected boolean isFixedLayout(){  Object positioning=this.<Object>getProperty(Property.POSITION);  return Integer.valueOf(LayoutPosition.FIXED).equals(positioning);}  }
class C{  public String typeName(){  return typeName;}  }
class C{  public static PdfAction createGoToR(String filename,String destination){  return createGoToR(filename,destination,false);}  }
class C{  public void addCaretListener(CaretListener listener){  listenerList.add(CaretListener.class,listener);}  }
class C{  private LogSource(){}  }
class C{  public BlockIterator(LivingEntity entity,int maxDistance){  this(entity.getLocation(),entity.getEyeHeight(),maxDistance);}  }
class C{  public XMLElement newElement(String name) throws Exception {  return newElement(name,null,null);}  }
class C{  public FSAssertionManagerClient(String metaAlias,String url) throws FSException {  try {    this.metaAlias=metaAlias;    this.hostedEntityId=FSUtils.getIDFFMetaManager().getEntityIDByMetaAlias(metaAlias);    String[] urls={url};    stub=new SOAPClient(urls);  } catch (  Exception e) {    if (FSUtils.debug.warningEnabled()) {      FSUtils.debug.warning("FSAssertionManagerClient() Exception",e);    }    throw (new FSException(e.getMessage()));  }}  }
class C{  @SuppressWarnings("unchecked") public long put(K key,long value){  K k=(K)maskNull(key);  int h=System.identityHashCode(k);  Entry<K>[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry<K> e=tab[i]; e != null; e=e.next) {    if (h == e.hash && k == e.get()) {      long oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  Entry<K> e=tab[i];  tab[i]=new Entry<K>(k,value,queue,h,e);  if (++size >= threshold)   resize(tab.length * 2);  return 0;}  }
class C{  public ResponseAuthenticator(byte[] octets){  this.octets=octets;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public static Position[] simplify(Position[] points){  return simplify(points,SIMPLIFY_DEFAULT_TOLERANCE,SIMPLIFY_DEFAULT_HIGHEST_QUALITY);}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addRule(prefix + "user",new MemoryUserRule());}  }
class C{  private LameFrame(ByteBuffer lameHeader){  encoder=Utils.getString(lameHeader,0,ENCODER_SIZE,TextEncoding.CHARSET_ISO_8859_1);}  }
class C{  void register(Itr itr){  head=new Node(itr,head);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public WindowSurface(EglCore eglCore,SurfaceTexture surfaceTexture){  super(eglCore);  createWindowSurface(surfaceTexture);}  }
class C{  public static <T>T orderWrites(T ref){  theVolatile=0;  return ref;}  }
class C{  private Map createServicesMap(JsonValue realmDetails) throws Exception {  final String rstatus=realmDetails.get(IdConstants.ORGANIZATION_STATUS_ATTR).asString();  final String realmAliases=realmDetails.get(IdConstants.ORGANIZATION_ALIAS_ATTR).asString();  Map defaultValues=new HashMap(2);  try {    Map map=new HashMap(2);    Set values=new HashSet(2);    values.add(getStatusAttribute(rstatus));    map.put(IdConstants.ORGANIZATION_STATUS_ATTR,values);    if (realmAliases != null && !realmAliases.isEmpty()) {      Set values1=new HashSet(2);      values1.add(realmAliases);      map.put(IdConstants.ORGANIZATION_ALIAS_ATTR,values1);    }    defaultValues.put(IdConstants.REPO_SERVICE,map);  } catch (  Exception e) {    throw e;  }  return defaultValues;}  }
class C{  public void skipSpace(Reader in) throws IOException {  while ((c >= 0) && ((c == ' ') || (c == '\t') || (c == '\n')|| (c == '\r'))) {    c=in.read();  }}  }
class C{  private JsonValue toJsonValue(){  JsonValue jv=new JsonValue(new HashMap<String,Object>());  sourceId=mapping.getLinkType().normalizeSourceId(sourceId);  targetId=mapping.getLinkType().normalizeTargetId(targetId);  jv.put("linkType",mapping.getLinkType().getName());  jv.put("linkQualifier",linkQualifier);  if (mapping.getLinkType().useReverse()) {    jv.put("secondId",sourceId);    jv.put("firstId",targetId);  } else {    jv.put("firstId",sourceId);    jv.put("secondId",targetId);  }  return jv;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  m_cdataStartCalled=false;}  }
class C{  private DualPivotQuicksort(){}  }
class C{  public boolean createConfig(){  HttpServletRequest req=getContext().getRequest();  HttpServletRequestWrapper request=new HttpServletRequestWrapper(getContext().getRequest());  HttpServletResponseWrapper response=new HttpServletResponseWrapper(getContext().getResponse());  initializeResourceBundle();  request.addParameter(SetupConstants.ACCEPT_LICENSE_PARAM,"true");  String adminPassword=(String)getContext().getSessionAttribute(SessionAttributeNames.CONFIG_VAR_ADMIN_PWD);  request.addParameter(SetupConstants.CONFIG_VAR_ADMIN_PWD,adminPassword);  request.addParameter(SetupConstants.CONFIG_VAR_CONFIRM_ADMIN_PWD,adminPassword);  String agentPassword=(String)getContext().getSessionAttribute(SessionAttributeNames.CONFIG_VAR_AMLDAPUSERPASSWD);  request.addParameter(SetupConstants.CONFIG_VAR_AMLDAPUSERPASSWD,agentPassword);  request.addParameter(SetupConstants.CONFIG_VAR_AMLDAPUSERPASSWD_CONFIRM,agentPassword);  String tmp=getAttribute(SetupConstants.CONFIG_VAR_DATA_STORE,SetupConstants.SMS_EMBED_DATASTORE);  request.addParameter(SetupConstants.CONFIG_VAR_DATA_STORE,tmp);  boolean isEmbedded=false;  if (tmp.equals(SetupConstants.SMS_EMBED_DATASTORE)) {    tmp=getAttribute("configStoreHost",hostName);    request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST,tmp);    request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_SSL,"SIMPLE");    tmp=getAttribute(SetupConstants.DS_EMB_REPL_FLAG,"false");    isEmbedded=tmp.equals(SetupConstants.DS_EMP_REPL_FLAG_VAL);    if (isEmbedded) {      request.addParameter(SetupConstants.DS_EMB_REPL_FLAG,SetupConstants.DS_EMP_REPL_FLAG_VAL);      tmp=getAttribute("localRepPort","");      request.addParameter(SetupConstants.DS_EMB_REPL_REPLPORT1,tmp);      tmp=getAttribute("existingHost","");      request.addParameter(SetupConstants.DS_EMB_REPL_HOST2,tmp);      tmp=getAttribute("existingPort","");      request.addParameter(SetupConstants.DS_EMB_REPL_ADMINPORT2,tmp);      tmp=getAttribute("existingRepPort","");      request.addParameter(SetupConstants.DS_EMB_REPL_REPLPORT2,tmp);      tmp=getAttribute("existingserverid","");      request.addParameter(SetupConstants.DS_EMB_EXISTING_SERVERID,tmp);    }  }  tmp=getAttribute("configStorePort",defaultPort);  request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT,tmp);  tmp=getAttribute("configStoreAdminPort",defaultAdminPort);  request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_ADMIN_SERVER_PORT,tmp);  tmp=getAttribute("configStoreJmxPort",defaultJmxPort);  request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_JMX_SERVER_PORT,tmp);  tmp=getAttribute("rootSuffix",defaultRootSuffix);  request.addParameter(SetupConstants.CONFIG_VAR_ROOT_SUFFIX,tmp);  if (!isEmbedded) {    tmp=getAttribute("configStoreHost",hostName);    request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST,tmp);    tmp=getAttribute("configStoreSSL","SIMPLE");    request.addParameter(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_SSL,tmp);  }  tmp=getAttribute("configStoreLoginId",defaultUserName);  request.addParameter(SetupConstants.CONFIG_VAR_DS_MGR_DN,tmp);  tmp=getAttribute("configStorePassword","");  request.addParameter(SetupConstants.CONFIG_VAR_DS_MGR_PWD,tmp);  tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.EXT_DATA_STORE);  if ((tmp != null) && tmp.equals("true")) {    Map store=new HashMap(12);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_HOST);    store.put(SetupConstants.USER_STORE_HOST,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_SSL);    store.put(SetupConstants.USER_STORE_SSL,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_PORT);    store.put(SetupConstants.USER_STORE_PORT,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_ROOT_SUFFIX);    store.put(SetupConstants.USER_STORE_ROOT_SUFFIX,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_LOGIN_ID);    store.put(SetupConstants.USER_STORE_LOGIN_ID,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_LOGIN_PWD);    store.put(SetupConstants.USER_STORE_LOGIN_PWD,tmp);    tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.USER_STORE_TYPE);    store.put(SetupConstants.USER_STORE_TYPE,tmp);    request.addParameter("UserStore",store);  }  Map siteConfig=new HashMap(3);  String loadBalancerHost=(String)getContext().getSessionAttribute(SessionAttributeNames.LB_SITE_NAME);  String primaryURL=(String)getContext().getSessionAttribute(SessionAttributeNames.LB_PRIMARY_URL);  if (loadBalancerHost != null) {    siteConfig.put(SetupConstants.LB_SITE_NAME,loadBalancerHost);    siteConfig.put(SetupConstants.LB_PRIMARY_URL,primaryURL);    request.addParameter(SetupConstants.CONFIG_VAR_SITE_CONFIGURATION,siteConfig);  }  String serverUrl=(String)getContext().getSessionAttribute(SessionAttributeNames.SERVER_URL);  String serverHost;  int serverPort;  if (serverUrl == null) {    serverUrl=req.getRequestURL().toString();    serverHost=getHostName();    serverPort=req.getServerPort();  } else {    serverHost=getHostName(serverUrl,getHostName());    serverPort=getServerPort(serverUrl,req.getServerPort());  }  request.addParameter(SetupConstants.CONFIG_VAR_SERVER_HOST,serverHost);  request.addParameter(SetupConstants.CONFIG_VAR_SERVER_PORT,serverPort);  request.addParameter(SetupConstants.CONFIG_VAR_SERVER_URI,req.getRequestURL().toString());  request.addParameter(SetupConstants.CONFIG_VAR_SERVER_URL,getAttribute("serverURL",serverUrl));  tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.ENCRYPTION_KEY);  if (tmp == null) {    tmp=AMSetupUtils.getRandomString();  }  request.addParameter(SetupConstants.CONFIG_VAR_ENCRYPTION_KEY,tmp);  tmp=(String)getContext().getSessionAttribute(SessionAttributeNames.ENCLDAPUSERPASSWD);  if (tmp != null) {    request.addParameter(SetupConstants.ENCRYPTED_LDAP_USER_PWD,tmp);  }  String cookieDomain=(String)getContext().getSessionAttribute(SessionAttributeNames.COOKIE_DOMAIN);  request.addParameter(SetupConstants.CONFIG_VAR_COOKIE_DOMAIN,cookieDomain);  String locale=(String)getContext().getSessionAttribute(SessionAttributeNames.PLATFORM_LOCALE);  if (locale == null) {    locale=SetupConstants.DEFAULT_PLATFORM_LOCALE;  }  request.addParameter(SetupConstants.CONFIG_VAR_PLATFORM_LOCALE,locale);  String base=(String)getContext().getSessionAttribute(SessionAttributeNames.CONFIG_DIR);  if (base == null) {    base=getBaseDir(getContext().getRequest());  }  request.addParameter(SetupConstants.CONFIG_VAR_BASE_DIR,base);  request.addParameter("locale",configLocale.toString());  try {    if (AMSetupServlet.processRequest(request,response)) {      writeToResponse("true");    } else {      writeToResponse(AMSetupServlet.getErrorMessage());    }  } catch (  ConfiguratorException cfe) {    writeToResponse(cfe.getMessage());  }  setPath(null);  return false;}  }
class C{  public void stop(){synchronized (this) {    mStopped=true;    if (mListenerThread == null) {      return;    }  }  mListenerThread.interrupt();  try {    if (mServerSocket != null) {      mServerSocket.close();    }  } catch (  IOException e) {  }}  }
class C{  public void testCertPathBuilder07() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder certPB;  for (int i=0; i < validValues.length; i++) {    certPB=CertPathBuilder.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",certPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPB.getProvider().getName(),defaultProviderName);  }}  }
class C{  public void testMaxEqual(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="8478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="8478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  @Override public void forceResort(){  Set<String> selectedIds=getSelectedIds();  super.forceResort();  setSelectedIds(selectedIds);}  }
class C{  @Override public int hashCode(){  int code=super.hashCode();  if (key != null) {    code=31 * code + key.hashCode();  }  if (value != null) {    code=31 * code + value.hashCode();  }  if (pConditionName != null) {    code=31 * code + pConditionName.hashCode();  }  return code;}  }
class C{  public Set keySet(){  if (keySet == null)   keySet=new SynchronizedSet(new KeySet(),this);  return keySet;}  }
class C{  public static char[] encodeHex(byte[] data){  int l=data.length;  char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS[0x0F & data[i]];  }  return out;}  }
class C{  private RegistrationResult checkPassword(String password,String confirmPassword){  if ((password == null) || password.length() == 0) {    if (debug.messageEnabled()) {      debug.message("password was missing from the form");    }    return RegistrationResult.NO_PASSWORD_ERROR;  } else {    if (password.length() < requiredPasswordLength) {      if (debug.messageEnabled()) {        debug.message("password was not long enough");      }      return RegistrationResult.PASSWORD_TOO_SHORT;    }    if ((confirmPassword == null) || confirmPassword.length() == 0) {      if (debug.messageEnabled()) {        debug.message("no confirmation password");      }      return RegistrationResult.NO_CONFIRMATION_ERROR;    } else {      if (!password.equals(confirmPassword)) {        return RegistrationResult.PASSWORD_MISMATCH_ERROR;      }    }  }  return RegistrationResult.NO_ERROR;}  }
class C{  public PlaPoint corner_first(){  return polyline.corner_first();}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public AccountUsableResponseControl(boolean isCritical,int secondsBeforeExpiration){  super(OID_ACCOUNT_USABLE_CONTROL,isCritical);  this.secondsBeforeExpiration=secondsBeforeExpiration;  isUsable=true;  isInactive=false;  isReset=false;  isExpired=false;  remainingGraceLogins=-1;  isLocked=false;  secondsBeforeUnlock=0;}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  this.name=name;  intValue=Integer.parseInt(pcdata);}  }
class C{  public void paintScrollPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  protected CellRendererPane createCellRendererPane(){  return new CellRendererPane();}  }
class C{  private void parse_method_def_variables(List<VariableDef> variableList,Set<String> names) throws SyntaxException {  nextNode(false);  expecting("(",current.previous(),current,err);  nextNode(false);  if (current instanceof ElementStartNode) {    List<Statement> statements=parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false);    boolean MustHaveInit=false;    for (    Statement s : statements) {      if (s instanceof AST.Access && ((AST.Access)s).exp == null) {        if (MustHaveInit) {          err.SyntaxException("expecting parameter with init value",s.line_col());          err.debug("assume it has init value");        }        AST.Access access=(AST.Access)s;        VariableDef d=new VariableDef(access.name,Collections.emptySet(),Collections.emptySet(),access.line_col());        variableList.add(d);        names.add(access.name);      } else       if (s instanceof VariableDef) {        if (((VariableDef)s).getInit() == null) {          if (MustHaveInit) {            err.SyntaxException("expecting parameter with init value",s.line_col());            err.debug("assume it has init value");          }        } else {          MustHaveInit=true;        }        variableList.add((VariableDef)s);        names.add(((VariableDef)s).getName());      } else {        err.SyntaxException("parameter cannot be " + s.toString(),s.line_col());        err.debug("ignore this parameter");      }    }    nextNode(false);  }  expecting(")",current.previous(),current,err);}  }
class C{  public static boolean isAMSDKEnabled(){  if (amsdkChecked) {    return (isAMSDKEnabled);  }  SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    if (!ServiceManager.isRealmEnabled()) {      amsdkChecked=true;      isAMSDKEnabled=true;    } else {      ServiceSchemaManager ssm=new ServiceSchemaManager(IdConstants.REPO_SERVICE,adminToken);      ServiceSchema idRepoSubSchema=ssm.getOrganizationSchema();      Set idRepoPlugins=idRepoSubSchema.getSubSchemaNames();      if (idRepoPlugins.contains("amSDK")) {        isAMSDKEnabled=true;      }      amsdkChecked=true;    }  } catch (  Exception e) {    debug.error("IdUtils.isAMSDKEnabled() " + "Error in checking AM.SDK being configured",e);  }  amsdkChecked=true;  return (isAMSDKEnabled);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPMessage(msgID=");  buffer.append(messageID);  buffer.append(", protocolOp=");  if (protocolOp != null) {    protocolOp.toString(buffer);  } else {    buffer.append("null");  }  if (controls != null && !controls.isEmpty()) {    buffer.append(", controls={ ");    Iterator<Control> iterator=controls.iterator();    iterator.next().toString(buffer);    while (iterator.hasNext()) {      buffer.append(", ");      iterator.next().toString(buffer);    }    buffer.append(" }");  }  buffer.append(")");}  }
class C{  public boolean equals(Object o){  if (o instanceof AMIdentitySubject) {    AMIdentitySubject subject=(AMIdentitySubject)o;    return (subjectValues.equals(subject.subjectValues));  }  return (false);}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return (XString)right.xstr();}  }
class C{  @Override public V remove(Object key){  if (locked)   throw new IllegalStateException(sm.getString("parameterMap.locked"));  return (super.remove(key));}  }
class C{  FileChangeNumberIndexDBCursor(final DBCursor<Record<Long,ChangeNumberIndexRecord>> cursor) throws ChangelogException {  this.cursor=cursor;}  }
class C{  public Background(Color color,float extraLeft,float extraTop,float extraRight,float extraBottom){  this.color=color;  this.extraLeft=extraLeft;  this.extraRight=extraRight;  this.extraTop=extraTop;  this.extraBottom=extraBottom;}  }
class C{  public void paint(Graphics g,Shape allocation){  super.paint(g,allocation);  Rectangle alloc=allocation.getBounds();  Rectangle clip=g.getClipBounds();  if ((clip.x + clip.width) < (alloc.x + getLeftInset())) {    Rectangle childRect=alloc;    alloc=getInsideAllocation(allocation);    int n=getViewCount();    int endY=clip.y + clip.height;    for (int i=0; i < n; i++) {      childRect.setBounds(alloc);      childAllocation(i,childRect);      if (childRect.y < endY) {        if ((childRect.y + childRect.height) >= clip.y) {          listPainter.paint(g,childRect.x,childRect.y,childRect.width,childRect.height,this,i);        }      } else {        break;      }    }  }}  }
class C{  AMIdentityMembershipCondition(Debug debug,CoreWrapper coreWrapper){  this.debug=debug;  this.coreWrapper=coreWrapper;}  }
class C{  private void registerInstanceKeyCertificate(Map<ServerProperty,Object> serverProperties,DN serverEntryDn) throws ADSContextException {  ADSContextHelper helper=new ADSContextHelper();  helper.registerInstanceKeyCertificate(connectionWrapper,serverProperties,serverEntryDn);}  }
class C{  protected void completeUIInstall(){  this.setShowsRootHandles(tree.getShowsRootHandles());  updateRenderer();  updateDepthOffset();  setSelectionModel(tree.getSelectionModel());  treeState=createLayoutCache();  configureLayoutCache();  updateSize();}  }
class C{  boolean validate(Set attrVals,String i18nFileName,boolean encodePassword) throws SMSException {  return validate(attrVals,i18nFileName,encodePassword,Collections.EMPTY_MAP);}  }
class C{  public void startParse(InputSource source) throws SAXException {  if (fNoMoreEvents)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INCRSAXSRCFILTER_NOT_RESTARTABLE,null));  if (fXMLReader == null)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_XMLRDR_NOT_BEFORE_STARTPARSE,null));  fXMLReaderInputSource=source;  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  public boolean isImageFile(JecFile file){  return !file.isDirectory() && isImageFile(file.getName());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node replacedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);{    boolean success=false;    try {      replacedNode=employeeNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public ServerManagedObjectDeleteListenerAdaptor(ConfigurationDeleteListener<T> listener){  this.listener=listener;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyValueElement createKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyValueElementImpl();}  }
class C{  public boolean isCookieTimeToLiveEnabled(){  return ac.getLoginState().isCookieTimeToLiveEnabled();}  }
class C{  public String encodeMessage(String function,Object param){  Object params[]=null;  if (param != null) {    params=new Object[1];    params[0]=param;  }  return (encodeMessage(function,params));}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("StateInfo ID:[").append(this.id).append("], ");  sb.append("Protocol:[").append(this.protocol).append("], ");  sb.append("URL:[").append(((this.url == null) ? "null" : this.url.toString()));  sb.append("], ");  sb.append("Address:[");  if (this.address == null) {    sb.append("null], ");  } else {    sb.append(this.address.toString()).append("], Unresolved:[");    sb.append(this.address.isUnresolved()).append("], ");  }  sb.append("Local:[").append(this.isLocal).append("], ");  sb.append("Up:[").append(this.isUp).append("].\n");  return sb.toString();}  }
class C{  public ConfigurationHandler(final ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public ByteArray(){  bytes=null;  size=0;}  }
class C{  private boolean isGenerateConnectorCoreConfig(JsonValue params){  return !params.get(ConnectorUtil.OPENICF_CONNECTOR_REF).isNull() && params.get(ConnectorUtil.OPENICF_CONFIGURATION_PROPERTIES).isNull();}  }
class C{  private static void checkGettingStarted() throws Exception {  PreferencesEntry<String> started=Settings.forPackage(Main.class).entry("getting.started").defaultValue("0");  if ("0".equals(started.getValue())) {    started.setValue("1");    started.flush();    SwingUtilities.invokeLater(null);  }}  }
class C{  public static String prefixState(int taskId){  return PREFIX_STATES + taskId + "_";}  }
class C{  @Override public Object create() throws HeapException {  SampleFilter filter=new SampleFilter();  filter.name=config.get("name").as(evaluatedWithHeapProperties()).required().asString();  filter.value=config.get("value").as(evaluatedWithHeapProperties()).required().asString();  return filter;}  }
class C{  void append(final Object o){  templateValue.append(o);}  }
class C{  private void initializeDsApplIfOpsTable(){  Set connectionHandlers=this.monitor.getConnectionHandlers();  for (Iterator iter=connectionHandlers.iterator(); iter.hasNext(); ) {    ObjectName name=(ObjectName)iter.next();    addRowInDsApplIfOpsTable(name);  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.OrganizationDisplayNameElement createOrganizationDisplayNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationDisplayNameElementImpl();}  }
class C{  public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {  int toRead=len;  while (toRead > 0) {    int ret=in.read(buf,off,toRead);    if (ret < 0) {      throw new IOException("Premature EOF from inputStream");    }    toRead-=ret;    off+=ret;  }}  }
class C{  public boolean containsConsent(){  return prompts.contains(PROMPT_CONSENT);}  }
class C{  protected boolean isTokenChar(char ch){  if (Character.isLetterOrDigit(ch))   return true;  if (Character.isISOControl(ch))   return false;  if (isHttpSeparator(ch))   return false;  return true;}  }
class C{  public boolean hasTextLitOnly(){  return m_hasTextLitOnly;}  }
class C{  private void zeroPaddingNumber(int value,int minDigits,int maxDigits,StringBuffer buffer){  try {    if (zeroDigit == 0) {      zeroDigit=((DecimalFormat)numberFormat).getDecimalFormatSymbols().getZeroDigit();    }    if (value >= 0) {      if (value < 100 && minDigits >= 1 && minDigits <= 2) {        if (value < 10) {          if (minDigits == 2) {            buffer.append(zeroDigit);          }          buffer.append((char)(zeroDigit + value));        } else {          buffer.append((char)(zeroDigit + value / 10));          buffer.append((char)(zeroDigit + value % 10));        }        return;      } else       if (value >= 1000 && value < 10000) {        if (minDigits == 4) {          buffer.append((char)(zeroDigit + value / 1000));          value%=1000;          buffer.append((char)(zeroDigit + value / 100));          value%=100;          buffer.append((char)(zeroDigit + value / 10));          buffer.append((char)(zeroDigit + value % 10));          return;        }        if (minDigits == 2 && maxDigits == 2) {          zeroPaddingNumber(value % 100,2,2,buffer);          return;        }      }    }  } catch (  Exception e) {  }  numberFormat.setMinimumIntegerDigits(minDigits);  numberFormat.setMaximumIntegerDigits(maxDigits);  numberFormat.format((long)value,buffer,DontCareFieldPosition.INSTANCE);}  }
class C{  public void testCertPathBuilder09() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathBuilder.getInstance(null,defaultProvider);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithm must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public boolean contains(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  int eOrdinal=((Enum<?>)e).ordinal();  return (elements[eOrdinal >>> 6] & (1L << eOrdinal)) != 0;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.TimestampTraceType createTimestampTraceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.TimestampTraceTypeImpl();}  }
class C{  public void testInternBeforeLiteralIsLoaded() throws Exception {  String programmatic=Arrays.asList("5058","9962","1563","5744").toString().intern();  String literal=(String)Class.forName("libcore.java.lang.StringTest$HasLiteral").getDeclaredField("literal").get(null);  assertEquals(System.identityHashCode(programmatic),System.identityHashCode(literal));  assertSame(programmatic,literal);}  }
class C{  public void removeUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.removeUpdate(fv,e,alloc);}  }
class C{  @Override public void addChild(Container child){  if (!(child instanceof Host))   throw new IllegalArgumentException(sm.getString("standardEngine.notHost"));  super.addChild(child);}  }
class C{  private JapaneseDate withYear(int year){  return withYear(getEra(),year);}  }
class C{  private void resizeWidgetIfNeeded(boolean onDismiss){  int xThreshold=mCellLayout.getCellWidth() + mCellLayout.getWidthGap();  int yThreshold=mCellLayout.getCellHeight() + mCellLayout.getHeightGap();  int deltaX=mDeltaX + mDeltaXAddOn;  int deltaY=mDeltaY + mDeltaYAddOn;  float hSpanIncF=1.0f * deltaX / xThreshold - mRunningHInc;  float vSpanIncF=1.0f * deltaY / yThreshold - mRunningVInc;  int hSpanInc=0;  int vSpanInc=0;  int cellXInc=0;  int cellYInc=0;  int countX=mCellLayout.getCountX();  int countY=mCellLayout.getCountY();  if (Math.abs(hSpanIncF) > RESIZE_THRESHOLD) {    hSpanInc=Math.round(hSpanIncF);  }  if (Math.abs(vSpanIncF) > RESIZE_THRESHOLD) {    vSpanInc=Math.round(vSpanIncF);  }  if (!onDismiss && (hSpanInc == 0 && vSpanInc == 0))   return;  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)mWidgetView.getLayoutParams();  int spanX=lp.cellHSpan;  int spanY=lp.cellVSpan;  int cellX=lp.useTmpCoords ? lp.tmpCellX : lp.cellX;  int cellY=lp.useTmpCoords ? lp.tmpCellY : lp.cellY;  int hSpanDelta=0;  int vSpanDelta=0;  if (mLeftBorderActive) {    cellXInc=Math.max(-cellX,hSpanInc);    cellXInc=Math.min(lp.cellHSpan - mMinHSpan,cellXInc);    hSpanInc*=-1;    hSpanInc=Math.min(cellX,hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=-hSpanInc;  } else   if (mRightBorderActive) {    hSpanInc=Math.min(countX - (cellX + spanX),hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=hSpanInc;  }  if (mTopBorderActive) {    cellYInc=Math.max(-cellY,vSpanInc);    cellYInc=Math.min(lp.cellVSpan - mMinVSpan,cellYInc);    vSpanInc*=-1;    vSpanInc=Math.min(cellY,vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=-vSpanInc;  } else   if (mBottomBorderActive) {    vSpanInc=Math.min(countY - (cellY + spanY),vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=vSpanInc;  }  mDirectionVector[0]=0;  mDirectionVector[1]=0;  if (mLeftBorderActive || mRightBorderActive) {    spanX+=hSpanInc;    cellX+=cellXInc;    if (hSpanDelta != 0) {      mDirectionVector[0]=mLeftBorderActive ? -1 : 1;    }  }  if (mTopBorderActive || mBottomBorderActive) {    spanY+=vSpanInc;    cellY+=cellYInc;    if (vSpanDelta != 0) {      mDirectionVector[1]=mTopBorderActive ? -1 : 1;    }  }  if (!onDismiss && vSpanDelta == 0 && hSpanDelta == 0)   return;  if (onDismiss) {    mDirectionVector[0]=mLastDirectionVector[0];    mDirectionVector[1]=mLastDirectionVector[1];  } else {    mLastDirectionVector[0]=mDirectionVector[0];    mLastDirectionVector[1]=mDirectionVector[1];  }  if (mCellLayout.createAreaForResize(cellX,cellY,spanX,spanY,mWidgetView,mDirectionVector,onDismiss)) {    lp.tmpCellX=cellX;    lp.tmpCellY=cellY;    lp.cellHSpan=spanX;    lp.cellVSpan=spanY;    mRunningVInc+=vSpanDelta;    mRunningHInc+=hSpanDelta;    if (!onDismiss) {      updateWidgetSizeRanges(mWidgetView,mLauncher,spanX,spanY);    }  }  mWidgetView.requestLayout();}  }
class C{  public Polyline(PlaPointIntAlist points_alist){  int initial_len=points_alist.size();  if (initial_len < 2)   throw new IllegalArgumentException(classname + "A must contain at least 2 points");  ArrayList<PlaPointInt> corners_alist=new ArrayList<PlaPointInt>(initial_len);  for (  PlaPointInt a_point : points_alist) {    if (a_point == null)     continue;    if (has_point(corners_alist,a_point))     continue;    if (has_colinear(corners_alist,a_point))     continue;    corners_alist.add(a_point);  }  int input_len=corners_alist.size();  lines_list=new ArrayList<PlaLineInt>(input_len + 1);  if (input_len < 2)   throw new IllegalArgumentException(classname + "B must contain at least 2 different points");  PlaPointInt acorner=corners_alist.get(0);  PlaDirection dir=new PlaDirection(acorner,corners_alist.get(1));  lines_list.add(new PlaLineInt(acorner,dir.rotate_45_deg(2)));  for (int index=1; index < input_len; ++index)   lines_list.add(new PlaLineInt(corners_alist.get(index - 1),corners_alist.get(index)));  acorner=corners_alist.get(input_len - 1);  dir=new PlaDirection(acorner,corners_alist.get(input_len - 2));  lines_list.add(new PlaLineInt(acorner,dir.rotate_45_deg(2)));  corners_allocate(corner_count());  for (int index=0; index < input_len; index++)   precalculated_corners[index]=corners_alist.get(index);}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String goupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("AdministrationServiceListener." + "organizationConfigChanged : Config changed for Org=" + orgName + "Service = "+ serviceName+ " Change type = "+ type);  }  if (type != ADDED) {    invalidCharCache.remove(orgName);    pluginNameCache.remove(orgName);  }}  }
class C{  @Override public void addChild(Container child){  child.addLifecycleListener(new MemoryLeakTrackingListener());  if (!(child instanceof Context))   throw new IllegalArgumentException(sm.getString("standardHost.notContext"));  super.addChild(child);}  }
class C{  @Override public boolean isDirty(){  return getDeltaRequest().getSize() > 0;}  }
class C{  public static int countAll(){  return getPersistence().countAll();}  }
class C{  private void insertPatternInTable(StepPattern pattern,ElemTemplate template){  String target=pattern.getTargetString();  if (null != target) {    String pstring=template.getMatch().getPatternString();    TemplateSubPatternAssociation association=new TemplateSubPatternAssociation(template,pattern,pstring);    boolean isWildCard=association.isWild();    TemplateSubPatternAssociation head=isWildCard ? m_wildCardPatterns : getHead(target);    if (null == head) {      if (isWildCard)       m_wildCardPatterns=association; else       putHead(target,association);    } else {      insertAssociationIntoList(head,association,false);    }  }}  }
class C{  public void start_tile(Point2D p_point){  if (board_is_read_only)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  set_interactive_state(new StateConstuctTile(location,interactive_state,this,actlog));}  }
class C{  public WSAuthNServicesViewBean(){  super("WSAuthNServices",DEFAULT_DISPLAY_URL,"sunIdentityServerAuthnService");}  }
class C{  private Constants(){}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities2.shouldIgnore(e,tree)) {    return;  }  if (isEditing(tree) && tree.getInvokesStopCellEditing() && !stopEditing(tree)) {    return;  }  completeEditing();  pressedPath=getClosestPathForLocation(tree,e.getX(),e.getY());  if (tree.getDragEnabled()) {    mousePressedDND(e);  } else {    SwingUtilities2.adjustFocus(tree);    handleSelection(e);  }}  }
class C{  private boolean confirmToUpdateRemoteAndStart() throws ClientException {  return askConfirmation(INFO_CLI_UNINSTALL_CONFIRM_UPDATE_REMOTE_AND_START.get(),true,logger);}  }
class C{  @OnMessage public void echoPongMessage(PongMessage pm){}  }
class C{  public Rest2LdapHttpApplication(final File configDirectory,final Schema schema){  this.configDirectory=checkNotNull(configDirectory,"configDirectory cannot be null");  this.schema=checkNotNull(schema,"schema cannot be null");}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void paintTabbedPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  int parseTimeString(String timeString) throws PolicyException {  StringTokenizer st=new StringTokenizer(timeString,":");  if (st.countTokens() != 2) {    String[] args={"time",timeString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  String token1=st.nextToken();  String token2=st.nextToken();  int hour=-1;  int minute=-1;  try {    hour=Integer.parseInt(token1);    minute=Integer.parseInt(token2);  } catch (  Exception e) {    String[] args={"time",timeString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  if ((hour < 0) || (hour > 24) || (minute < 0)|| (minute > 59)) {    String[] args={"time",timeString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  return hour * 60 + minute;}  }
class C{  public Builder withDelegateFactory(String delegateFactory){  config.setDelegateFactory(delegateFactory);  return this;}  }
class C{  public void _write(OutputStream output){  output.write_double(value);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null || getClass() != obj.getClass())   return false;  MessageFormat other=(MessageFormat)obj;  return (maxOffset == other.maxOffset && pattern.equals(other.pattern) && ((locale != null && locale.equals(other.locale)) || (locale == null && other.locale == null)) && Arrays.equals(offsets,other.offsets) && Arrays.equals(argumentNumbers,other.argumentNumbers) && Arrays.equals(formats,other.formats));}  }
class C{  public SQLTransientException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
