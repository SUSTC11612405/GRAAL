class C{  protected static void waitForTimeout(){  sleep(TRANSACTION_TIMES_OUT_FOR);}  }
class C{  @Override public final GenericBindRequest nextBindRequest(){  return nextBindRequest;}  }
class C{  protected void removeSession(String id){  try {    if (SecurityUtil.isPackageProtectionEnabled()) {      try {        AccessController.doPrivileged(new PrivilegedStoreRemove(id));      } catch (      PrivilegedActionException ex) {        Exception exception=ex.getException();        log.error("Exception in the Store during removeSession: " + exception,exception);      }    } else {      store.remove(id);    }  } catch (  IOException e) {    log.error("Exception removing session  " + e.getMessage(),e);  }}  }
class C{  RealmContext(Context parent,Realm realm,boolean viaDns){  super(parent,"realm");  this.realm=realm;  this.viaDns=viaDns;}  }
class C{  public void testPosNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={-1,1,-126,59,103,-2,-11,-7,-3,-33,-57,-3,-5,-5,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public BasicControl(String id,boolean criticality,byte[] value){  this.id=id;  this.criticality=criticality;  this.value=value;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static ImmutableConfiguration from(final Properties properties){  return new ImmutableConfiguration(properties);}  }
class C{  public static void reportStart(String str,Object[] param){  writeProgressText(str,param);}  }
class C{  public GradientPaint(float x1,float y1,Color color1,float x2,float y2,Color color2,boolean cyclic){  this(x1,y1,color1,x2,y2,color2);  this.cyclic=cyclic;}  }
class C{  public void addEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.ECF,ecfAddress);}  }
class C{  public SessionContext(SessionSubject sessionSubject,AuthnContext authnContext,String providerID) throws SAMLException {  if ((sessionSubject == null) || (providerID == null)) {    SAMLUtils.debug.message("SessionContext: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  _sessionSubject=sessionSubject;  _authnContext=authnContext;  _providerID=providerID;  _issueInstant=newDate();  _authenticationInstant=newDate();}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_FRAME,getIdentifier());  MP3File.getStructureFormatter().addElement(TYPE_FRAME_SIZE,frameSize);  frameBody.createStructure();  MP3File.getStructureFormatter().closeHeadingElement(TYPE_FRAME);}  }
class C{  @Deprecated public boolean allowThreadSuspension(boolean b){  this.vmAllowSuspension=b;  if (!b) {    VM.unsuspendSomeThreads();  }  return true;}  }
class C{  public static InetSocketAddress findFreeSocketAddress(){  try (ServerSocket serverLdapSocket=new ServerSocket()){    serverLdapSocket.setReuseAddress(true);    serverLdapSocket.bind(new InetSocketAddress("127.0.0.1",0));    return (InetSocketAddress)serverLdapSocket.getLocalSocketAddress();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public InternalSearchOperation(ClientConnection internalConnection,long operationID,int messageID,SearchRequest request,InternalSearchListener searchListener){  this(internalConnection,operationID,messageID,request.getControls(),request.getName(),request.getScope(),request.getDereferenceAliasesPolicy(),request.getSizeLimit(),request.getTimeLimit(),request.isTypesOnly(),request.getFilter(),request.getAttributes(),searchListener);}  }
class C{  @Override public void beforeAuthorizeHandling(OAuth2Request o2request,Request request,Response response){  String loginHint=o2request.getParameter(LOGIN_HINT);  if (loginHint != null && !loginHint.equals(request.getCookies().getFirstValue(LOGIN_HINT_COOKIE))) {    CookieSetting cookie=new CookieSetting(0,LOGIN_HINT_COOKIE,loginHint);    cookie.setPath("/");    cookie.setAccessRestricted(true);    response.getCookieSettings().add(cookie);  }}  }
class C{  private static URL toURL(String systemId){  try {    return new URL(systemId);  } catch (  MalformedURLException e) {    return null;  }}  }
class C{  @Override @Deprecated public void log(Exception exception,String message){  log(message,exception);}  }
class C{  TimerImpl(String name,boolean isDaemon){  this.setName(name);  this.setDaemon(isDaemon);  this.start();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.TimestampTraceElement createTimestampTraceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.TimestampTraceElementImpl();}  }
class C{  private StringBuilder encodeProduct(StringBuilder tokens){  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());    if (it.hasNext())     tokens.append('/'); else     break;  }  return tokens;}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public FrameBodyTKEY(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public UnknownPropertyNameException(String message){  super(message);}  }
class C{  private void sendAccessReject(RadiusRequestContext reqCtx){  try {    reqCtx.send(new AccessReject());    LOG.message("Rejected access request.");  } catch (  final Exception e1) {    LOG.warning("Failed to send AccessReject() response to client.");  }}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  private boolean checkAgainstRespondWith(List respondWith,Set statements){  boolean stFound=false;  Iterator itSt=statements.iterator();  while (itSt.hasNext()) {    stFound=false;    Statement st=(Statement)itSt.next();    Iterator it=respondWith.iterator();    while (it.hasNext()) {      String respWith=(String)it.next();      SAMLUtils.debug.message("matching respondWith element:" + respWith);switch (st.getStatementType()) {case Statement.AUTHENTICATION_STATEMENT:        if (respWith.endsWith(":AuthenticationStatement")) {          SAMLUtils.debug.message("matching auth st");          stFound=true;        }      break;case Statement.AUTHORIZATION_DECISION_STATEMENT:    if (respWith.endsWith(":AuthorizationDecisionStatement")) {      SAMLUtils.debug.message("matching authz st");      stFound=true;    }  break;case Statement.ATTRIBUTE_STATEMENT:if (respWith.endsWith(":AttributeStatement")) {  SAMLUtils.debug.message("matching attrib st");  stFound=true;}break;}if (stFound) {SAMLUtils.debug.message("match found");break;}}if (!stFound) {SAMLUtils.debug.message("mismatch found");return false;}}return true;}  }
class C{  public void xref(){}  }
class C{  public void addVertex(String label,List<DbDataContainer> attributes){  String insert="CREATE (: " + label + " {";  insert=this.addValuesToStatement(insert,attributes);  insert+="})";  this.transaction.run(insert);}  }
class C{  public static void handlePrintConversionException(Object caller,Exception e,XMLSerializer serializer) throws SAXException {  if (e instanceof SAXException)   throw (SAXException)e;  String message=e.getMessage();  if (message == null) {    message=e.toString();  }  ValidationEvent ve=new PrintConversionEventImpl(ValidationEvent.ERROR,message,new ValidationEventLocatorImpl(caller),e);  serializer.reportError(ve);}  }
class C{  public static CommentsFragment newInstance(String postRef){  CommentsFragment fragment=new CommentsFragment();  Bundle args=new Bundle();  args.putString(POST_REF_PARAM,postRef);  fragment.setArguments(args);  return fragment;}  }
class C{  public void notifyChanges(){  update(false);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_cdataTagOpen) {        closeCDATA();      } else       if (m_needToCallStartDocument) {        startDocumentInternal();      }      if (true == m_needToOutputDocTypeDecl)       outputDocTypeDecl("html");      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      writer.write(data);      writer.write('>');      if (m_elemContext.m_currentElemDepth <= 0)       outputLineSep();      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  static String readQuotedString(final SubstringReader reader) throws DecodeException {  int length=0;  reader.skipWhitespaces();  try {    final char c=reader.read();    if (c != '\'') {      throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c));    }    reader.mark();    while (reader.read() != '\'') {      length++;    }    reader.reset();    final String str=reader.read(length);    reader.read();    return str;  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  public boolean checkServerCertificate(final X509Certificate[] chain,final String authType,final String host){  if (state.trustManager == null) {    try {      initializeTrustAndKeyManagers();    } catch (    ArgumentException ae) {      throw new RuntimeException(ae);    }  }  printCertificateChain(chain);  MenuBuilder<Integer> builder=new MenuBuilder<>(app);  builder.setPrompt(INFO_LDAP_CONN_PROMPT_SECURITY_TRUST_OPTION.get());  for (  TrustOption t : TrustOption.values()) {    final MenuResult<Integer> result=MenuResult.success(t.getChoice());    int i=builder.addNumberedOption(t.message,result);    if (DEFAULT_PROMPT_TRUST_OPTION.equals(t)) {      builder.setDefault(INFO_LDAP_CONN_PROMPT_SECURITY_PROTOCOL_DEFAULT_CHOICE.get(i),result);    }  }  app.println();  app.println();  final Menu<Integer> menu=builder.toMenu();  try {    boolean promptAgain;    int userChoice;    do {      promptAgain=false;      final MenuResult<Integer> result=menu.run();      throwIfMenuResultNotSucceeded(result);      userChoice=result.getValue();      if (TrustOption.CERTIFICATE_DETAILS.getChoice() == userChoice) {        promptAgain=true;        printCertificateDetails(chain);      }    } while (promptAgain);    return trustCertificate(TrustOption.getTrustOptionForIndex(userChoice),chain,authType,host);  } catch (  ClientException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchilddocfragment.class,args);}  }
class C{  @Override public void addConnector(Connector connector){synchronized (connectorsLock) {    connector.setService(this);    Connector results[]=new Connector[connectors.length + 1];    System.arraycopy(connectors,0,results,0,connectors.length);    results[connectors.length]=connector;    connectors=results;    if (getState().isAvailable()) {      try {        connector.start();      } catch (      LifecycleException e) {        log.error(sm.getString("standardService.connector.startFailed",connector),e);      }    }    support.firePropertyChange("connector",null,connector);  }}  }
class C{  public static FontProgram createType1Font(byte[] afm,byte[] pfb,boolean cached) throws java.io.IOException {  return createType1Font(null,null,afm,pfb,cached);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.StatusElementImpl();}  }
class C{  public AuthenticationEnforcer exceptPatch(){  exceptPatch=true;  return this;}  }
class C{  public void error(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.error(e);  }}  }
class C{  private void waitForScenarioExecutedOnRs(String testCase,FakeReplicationServer rs) throws Exception {  int nsec=-1;  do {    nsec++;    if (nsec == 10) {      fail(testCase + ": timeout waiting for scenario to be exectued on fake RS after " + nsec+ " seconds.");    }    Thread.sleep(1000);  } while (!rs.isScenarioExecuted());}  }
class C{  public synchronized Principal authenticate(DirContext context,String username,String credentials) throws NamingException {  if (username == null || username.equals("") || credentials == null || credentials.equals("")) {    if (containerLog.isDebugEnabled())     containerLog.debug("username null or empty: returning null principal.");    return null;  }  if (userPatternArray != null) {    for (int curUserPattern=0; curUserPattern < userPatternFormatArray.length; curUserPattern++) {      User user=getUser(context,username,credentials,curUserPattern);      if (user != null) {        try {          if (checkCredentials(context,user,credentials)) {            List<String> roles=getRoles(context,user);            if (containerLog.isDebugEnabled()) {              containerLog.debug("Found roles: " + roles.toString());            }            return (new GenericPrincipal(username,credentials,roles));          }        } catch (        InvalidNameException ine) {          containerLog.warn(sm.getString("jndiRealm.exception"),ine);        }      }    }    return null;  } else {    User user=getUser(context,username,credentials);    if (user == null)     return null;    if (!checkCredentials(context,user,credentials))     return null;    List<String> roles=getRoles(context,user);    if (containerLog.isDebugEnabled()) {      containerLog.debug("Found roles: " + roles.toString());    }    return new GenericPrincipal(username,credentials,roles);  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> createInstance(Context context,CreateRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public Cache(){  this(DEFAULT_CACHE_SIZE,0.75f);  maxSize=DEFAULT_CACHE_SIZE;  lruTracker=new LRUList();}  }
class C{  public void testMovePointRightException(){  String a="12312124789874829887348723648726347429808779810457634781384756794987";  int aScale=Integer.MAX_VALUE;  int shift=-18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  try {    aNumber.movePointRight(shift);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  private StringManager(String packageName,Locale locale){  String bundleName=packageName + ".LocalStrings";  ResourceBundle bnd=null;  try {    bnd=ResourceBundle.getBundle(bundleName,locale);  } catch (  MissingResourceException ex) {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      try {        bnd=ResourceBundle.getBundle(bundleName,locale,cl);      } catch (      MissingResourceException ex2) {      }    }  }  bundle=bnd;  if (bundle != null) {    Locale bundleLocale=bundle.getLocale();    if (bundleLocale.equals(Locale.ROOT)) {      this.locale=Locale.ENGLISH;    } else {      this.locale=bundleLocale;    }  } else {    this.locale=null;  }}  }
class C{  public final void writeLong(long val) throws IOException {  Memory.pokeLong(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.LONG);}  }
class C{  private static long coefficientFromBytes(byte[] input,int start,int shift,int mask){  return ((((input[start + 0] & 0xff) << 0) | ((input[start + 1] & 0xff) << 8) | ((input[start + 2] & 0xff) << 16)| ((input[start + 3] & 0xff) << 24)) >> shift) & mask;}  }
class C{  protected Boolean checkCTSAuth(String tokenId) throws CoreTokenException {  Token coreToken=coreTokenService.read(tokenId);  if (coreToken == null) {    return null;  }  Integer deny=coreToken.getAttribute(CoreTokenField.INTEGER_ONE);  if (deny == null) {    return null;  } else {    if (deny == PushNotificationConstants.DENY_VALUE) {      return Boolean.FALSE;    }  }  return Boolean.TRUE;}  }
class C{  public void removeAllHeaders(){  headers.removeAllElements();}  }
class C{  private boolean isEqual(String str1,String str2){  return MessageDigest.isEqual(str1.getBytes(),str2.getBytes());}  }
class C{  public ShapeTileBox shrink(int p_width){  int ll_x;  int ur_x;  if (2 * p_width <= box_ur.v_x - box_ll.v_x) {    ll_x=box_ll.v_x + p_width;    ur_x=box_ur.v_x - p_width;  } else {    ll_x=(box_ll.v_x + box_ur.v_x) / 2;    ur_x=ll_x;  }  int ll_y;  int ur_y;  if (2 * p_width <= box_ur.v_y - box_ll.v_y) {    ll_y=box_ll.v_y + p_width;    ur_y=box_ur.v_y - p_width;  } else {    ll_y=(box_ll.v_y + box_ur.v_y) / 2;    ur_y=ll_y;  }  return new ShapeTileBox(ll_x,ll_y,ur_x,ur_y);}  }
class C{  public boolean hasAdvices(){  return advicesAreSet;}  }
class C{  public void addOmittedMethod(String method){  if (method == null)   return;  String results[]=new String[omittedMethods.length + 1];  for (int i=0; i < omittedMethods.length; i++)   results[i]=omittedMethods[i];  results[omittedMethods.length]=method;  omittedMethods=results;}  }
class C{  public ServerShutdownMonitor(){  super("Directory Server Shutdown Monitor");  setDaemon(true);  long currentThreadID=Thread.currentThread().getId();  threadList=new LinkedList<>();  ThreadGroup threadGroup=DirectoryThread.DIRECTORY_THREAD_GROUP;  Thread[] threadArray=new Thread[threadGroup.activeCount() * 2];  int numThreads=threadGroup.enumerate(threadArray,true);  for (int i=0; i < numThreads; i++) {    Thread t=threadArray[i];    if (t.isAlive() && !t.isDaemon() && t.getId() != currentThreadID) {      threadList.add(t);    }  }  monitorDone=true;}  }
class C{  public final void run(Runnable task) throws ThreadPoolException {  WorkerThread t=null;synchronized (this) {    if (shutdownThePool) {      throw new ThreadPoolException(poolName + " thread pool's being shutdown.");    }    if (busyThreadCount == poolSize) {      if ((threshold > 0) && (taskList.size() >= threshold)) {        throw new ThreadPoolException(poolName + " thread pool's task queue is full.");      } else {        taskList.add(wrap(task));      }    } else {      t=getAvailableThread();    }  }  if ((t != null) && (task != null)) {    t.runTask(wrap(task));  }}  }
class C{  @Override protected void initInternal() throws LifecycleException {  super.initInternal();  onameStringCache=register(new StringCache(),"type=StringCache");  MBeanFactory factory=new MBeanFactory();  factory.setContainer(this);  onameMBeanFactory=register(factory,"type=MBeanFactory");  globalNamingResources.init();  if (getCatalina() != null) {    ClassLoader cl=getCatalina().getParentClassLoader();    while (cl != null && cl != ClassLoader.getSystemClassLoader()) {      if (cl instanceof URLClassLoader) {        URL[] urls=((URLClassLoader)cl).getURLs();        for (        URL url : urls) {          if (url.getProtocol().equals("file")) {            try {              File f=new File(url.toURI());              if (f.isFile() && f.getName().endsWith(".jar")) {                ExtensionValidator.addSystemResource(f);              }            } catch (            URISyntaxException e) {            }catch (            IOException e) {            }          }        }      }      cl=cl.getParent();    }  }  for (int i=0; i < services.length; i++) {    services[i].init();  }}  }
class C{  @NonNull public static Interpolator multiply(Interpolator first,Interpolator second){  return new MultiplyInterpolator(first,second);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens02.class,args);}  }
class C{  public static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  public static String transliterate(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String result=value;  Set<Map.Entry<String,List<String>>> entries=Ascii.ascii.entrySet();  for (  Map.Entry<String,List<String>> entry : entries) {    for (    String ch : entry.getValue()) {      result=result.replace(ch,entry.getKey());    }  }  return result;}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public static String decodeFromBase64(final String string){  return new String(Base64.decodeBase64(string));}  }
class C{  public void release(){  releaseEglSurface();  if (mSurface != null) {    if (mReleaseSurface) {      mSurface.release();    }    mSurface=null;  }}  }
class C{  public String statement(){  return statement;}  }
class C{  public boolean is_mirror_top_bottom(){  return !mirror_top_bottom;}  }
class C{  public static List<VerificationException> verifyCertificates(Certificate[] certs,KeyStore keystore){  return verifyCertificates(certs,keystore,DateTimeUtil.getCurrentTimeCalendar());}  }
class C{  private ByteString parseSingleValue(List<StringBuilder> lines,StringBuilder line,DN entryDN,int colonPos,String attrName) throws LDIFException {  int length=line.length();  ByteString value;  if (colonPos == (length - 1)) {    value=ByteString.empty();  } else {    char c=line.charAt(colonPos + 1);    if (c == ':') {      int pos=findFirstNonSpaceCharPosition(line,colonPos + 2);      try {        value=ByteString.wrap(Base64.decode(line.substring(pos)));      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDIF_COULD_NOT_BASE64_DECODE_ATTR.get(entryDN,lastEntryLineNumber,line,e);        logToRejectWriter(lines,message);        throw new LDIFException(message,lastEntryLineNumber,true,e);      }    } else     if (c == '<') {      int pos=findFirstNonSpaceCharPosition(line,colonPos + 2);      URL contentURL;      try {        contentURL=new URL(line.substring(pos));      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDIF_INVALID_URL.get(entryDN,lastEntryLineNumber,attrName,e);        logToRejectWriter(lines,message);        throw new LDIFException(message,lastEntryLineNumber,true,e);      }      InputStream inputStream=null;      try {        ByteStringBuilder builder=new ByteStringBuilder(4096);        inputStream=contentURL.openConnection().getInputStream();        while (builder.appendBytes(inputStream,4096) != -1) {        }        value=builder.toByteString();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDIF_URL_IO_ERROR.get(entryDN,lastEntryLineNumber,attrName,contentURL,e);        logToRejectWriter(lines,message);        throw new LDIFException(message,lastEntryLineNumber,true,e);      } finally {        StaticUtils.close(inputStream);      }    } else {      int pos=findFirstNonSpaceCharPosition(line,colonPos + 1);      value=ByteString.valueOfUtf8(line.substring(pos));    }  }  return value;}  }
class C{  protected void initializeFromAttributes(Context context,AttributeSet attrs){  TypedArray array=context.getTheme().obtainStyledAttributes(attrs,R.styleable.FoldingCell,0,0);  try {    this.mAnimationDuration=array.getInt(R.styleable.FoldingCell_animationDuration,DEF_ANIMATION_DURATION);    this.mBackSideColor=array.getColor(R.styleable.FoldingCell_backSideColor,DEF_BACK_SIDE_COLOR);    this.mAdditionalFlipsCount=array.getInt(R.styleable.FoldingCell_additionalFlipsCount,DEF_ADDITIONAL_FLIPS);  }  finally {    array.recycle();  }}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  final TypedArray attrArray=context.obtainStyledAttributes(attrs,R.styleable.ScComponents,defStyle,0);  this.mAngleStart=attrArray.getFloat(R.styleable.ScComponents_scc_angle_start,ScArcGauge.DEFAULT_ANGLE_START);  this.mAngleSweep=attrArray.getFloat(R.styleable.ScComponents_scc_angle_sweep,ScArcGauge.DEFAULT_ANGLE_SWEEP);  attrArray.recycle();}  }
class C{  public void testReceive_BlockNoServerChannelClose() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelClose();}  }
class C{  public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testSkipElementIncompleteRead() throws Exception {  super.testSkipElementIncompleteRead();}  }
class C{  protected boolean isOnline(){  String isOnline=getConfig(Config.online);  if (isOnline != null) {    return Configs.asBoolean(isOnline);  }  Boolean ret=asBooleanFromGlobalProp("fabric8.online");  return ret != null ? ret : getDefaultOnline();}  }
class C{  private ContentValues unpackFavorite(byte[] buffer,int dataSize) throws IOException {  BackupProtos.Favorite favorite=unpackProto(new BackupProtos.Favorite(),buffer,dataSize);  if (favorite.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {    favorite.screen+=mHotseatShift;  }  ContentValues values=new ContentValues();  values.put(LauncherSettings.Favorites._ID,favorite.id);  values.put(LauncherSettings.Favorites.SCREEN,favorite.screen);  values.put(LauncherSettings.Favorites.CONTAINER,favorite.container);  values.put(LauncherSettings.Favorites.CELLX,favorite.cellX);  values.put(LauncherSettings.Favorites.CELLY,favorite.cellY);  values.put(LauncherSettings.Favorites.SPANX,favorite.spanX);  values.put(LauncherSettings.Favorites.SPANY,favorite.spanY);  values.put(LauncherSettings.Favorites.RANK,favorite.rank);  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {    values.put(LauncherSettings.Favorites.ICON_TYPE,favorite.iconType);    if (favorite.iconType == LauncherSettings.Favorites.ICON_TYPE_RESOURCE) {      values.put(LauncherSettings.Favorites.ICON_PACKAGE,favorite.iconPackage);      values.put(LauncherSettings.Favorites.ICON_RESOURCE,favorite.iconResource);    }    values.put(LauncherSettings.Favorites.ICON,favorite.icon);  }  if (!TextUtils.isEmpty(favorite.title)) {    values.put(LauncherSettings.Favorites.TITLE,favorite.title);  } else {    values.put(LauncherSettings.Favorites.TITLE,"");  }  if (!TextUtils.isEmpty(favorite.intent)) {    values.put(LauncherSettings.Favorites.INTENT,favorite.intent);  }  values.put(LauncherSettings.Favorites.ITEM_TYPE,favorite.itemType);  UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  long userSerialNumber=UserManagerCompat.getInstance(mContext).getSerialNumberForUser(myUserHandle);  values.put(LauncherSettings.Favorites.PROFILE_ID,userSerialNumber);  DeviceProfieData currentProfile=migrationCompatibleProfileData == null ? mDeviceProfileData : migrationCompatibleProfileData;  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    if (!TextUtils.isEmpty(favorite.appWidgetProvider)) {      values.put(LauncherSettings.Favorites.APPWIDGET_PROVIDER,favorite.appWidgetProvider);    }    values.put(LauncherSettings.Favorites.APPWIDGET_ID,favorite.appWidgetId);    values.put(LauncherSettings.Favorites.RESTORED,LauncherAppWidgetInfo.FLAG_ID_NOT_VALID | LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY | LauncherAppWidgetInfo.FLAG_UI_NOT_READY);    if (((favorite.cellX + favorite.spanX) > currentProfile.desktopCols) || ((favorite.cellY + favorite.spanY) > currentProfile.desktopRows)) {      restoreSuccessful=false;      throw new InvalidBackupException("Widget not in screen bounds, aborting restore");    }  } else {    if (isReplaceableHotseatItem(favorite) && favorite.targetType != BackupProtos.Favorite.TARGET_NONE && favorite.targetType < CommonAppTypeParser.SUPPORTED_TYPE_COUNT) {      Log.e(TAG,"Added item type flag");      values.put(LauncherSettings.Favorites.RESTORED,1 | CommonAppTypeParser.encodeItemTypeToFlag(favorite.targetType));    } else {      values.put(LauncherSettings.Favorites.RESTORED,1);    }    if (favorite.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {      if ((favorite.screen >= currentProfile.hotseatCount) || (favorite.screen == currentProfile.allappsRank)) {        restoreSuccessful=false;        throw new InvalidBackupException("Item not in hotseat bounds, aborting restore");      }    } else {      if ((favorite.cellX >= currentProfile.desktopCols) || (favorite.cellY >= currentProfile.desktopRows)) {        restoreSuccessful=false;        throw new InvalidBackupException("Item not in desktop bounds, aborting restore");      }    }  }  return values;}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public static String parseAttributeTypeOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_ATTRIBUTE_TYPE_OID);}  }
class C{  public synchronized void update(SessionInfo info) throws SessionException {  if (info.getSessionType().equals("user")) {    sessionType=SessionType.USER;  } else   if (info.getSessionType().equals("application")) {    sessionType=SessionType.APPLICATION;  }  clientID=info.getClientID();  clientDomain=info.getClientDomain();  maxSessionTime=info.getMaxTime();  maxIdleTime=info.getMaxIdle();  maxCachingTime=info.getMaxCaching();  sessionIdleTime=info.getTimeIdle();  sessionExpiryTime=info.getExpiryTime(TimeUnit.MILLISECONDS);  sessionTimeLeft=info.getTimeLeft();  sessionState=SessionState.valueOf(info.getState().toUpperCase());  sessionProperties=info.getProperties();  if (timedOutAt <= 0) {    String sessionTimedOutProp=sessionProperties.get("SessionTimedOut");    if (sessionTimedOutProp != null) {      try {        timedOutAt=Long.parseLong(sessionTimedOutProp);      } catch (      NumberFormatException e) {        sessionDebug.error("Invalid timeout value " + sessionTimedOutProp,e);      }    }  }  latestRefreshTime=currentTimeMillis() / 1000;  String restrictionProp=sessionProperties.get(TOKEN_RESTRICTION_PROP);  if (restrictionProp != null) {    try {      setRestriction(TokenRestrictionFactory.unmarshal(restrictionProp));    } catch (    Exception e) {      throw new SessionException(e);    }  }}  }
class C{  public SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException {  if (subscriptionState == null)   throw new NullPointerException("null subscriptionState arg");  SubscriptionState s=new SubscriptionState();  s.setState(subscriptionState);  return s;}  }
class C{  public void testKeyPairGenerator10() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  for (int i=0; i < kpg.length; i++) {    kpg[i].initialize(512);    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  public InitializationException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public void addConnector(String address,int port,boolean isAjp,boolean isSSL) throws MBeanException {  Service service;  try {    service=(Service)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  String protocol=isAjp ? "AJP/1.3" : "HTTP/1.1";  Connector connector=new Connector(protocol);  if ((address != null) && (address.length() > 0)) {    connector.setProperty("address",address);  }  connector.setPort(port);  connector.setSecure(isSSL);  connector.setScheme(isSSL ? "https" : "http");  service.addConnector(connector);}  }
class C{  public void testIsWritable(){  try {    assertTrue(rsmd.isWritable(1));    assertTrue(rsmd.isWritable(2));    assertTrue(rsmd.isWritable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isWritable" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isWritable(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  private TestCaseUtils(){}  }
class C{  public static byte[] asUnsignedByteArray(int length,BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    if (bytes.length - 1 > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,1,tmp,tmp.length - (bytes.length - 1),bytes.length - 1);    return tmp;  } else {    if (bytes.length == length) {      return bytes;    }    if (bytes.length > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,0,tmp,tmp.length - bytes.length,bytes.length);    return tmp;  }}  }
class C{  public final boolean isEnabled(SmileGenerator.Feature f){  return (_smileGeneratorFeatures & f.getMask()) != 0;}  }
class C{  public AndFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  public void assign_clearance_classs_to_selected_items(int p_cl_class_index){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateInteractive new_state=((StateSelectedItem)interactive_state).assign_clearance_class(p_cl_class_index);  set_interactive_state(new_state);}  }
class C{  public static JPanel createBrowseButtonPanel(JLabel lbl,JTextComponent tf,JButton but){  GridBagConstraints gbc=new GridBagConstraints();  JPanel panel=UIFactory.makeJPanel();  panel.setLayout(new GridBagLayout());  gbc.insets=UIFactory.getEmptyInsets();  gbc.gridwidth=4;  gbc.weightx=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  panel.add(lbl,gbc);  gbc.insets.left=UIFactory.LEFT_INSET_SECONDARY_FIELD;  gbc.gridwidth--;  gbc.weightx=0.1;  panel.add(tf,gbc);  gbc.insets.left=UIFactory.LEFT_INSET_BROWSE;  gbc.gridwidth=GridBagConstraints.RELATIVE;  panel.add(but,gbc);  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  panel.add(Box.createHorizontalGlue(),gbc);  return panel;}  }
class C{  NextVisualPositionAction(String nm,boolean select,int direction){  super(nm);  this.select=select;  this.direction=direction;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  @SuppressWarnings("unused") public void refresh(){  this.mPathMeasure.setPath(this.mPath,false);  this.mPathLength=this.mPathMeasure.getLength();}  }
class C{  public ConversationFactory withFirstPrompt(Prompt firstPrompt){  this.firstPrompt=firstPrompt;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittexttwo.class,args);}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public int radix(){  return this.defaultRadix;}  }
class C{  public float[] convertMapXYToScreenXY(float x,float y){  Matrix invertMatrix=new Matrix();  float[] value={x,y};  currentMatrix.invert(invertMatrix);  invertMatrix.mapPoints(value);  return value;}  }
class C{  public ReferencesParser(String references){  super(references);}  }
class C{  public Task cancelTask(String taskID){  schedulerLock.lock();  try {    Task t=tasks.get(taskID);    if (t == null) {      return null;    }    if (TaskState.isPending(t.getTaskState())) {      pendingTasks.remove(t);      t.setTaskState(TaskState.CANCELED_BEFORE_STARTING);      addCompletedTask(t);      writeState();    }    return t;  }  finally {    schedulerLock.unlock();  }}  }
class C{  private void initializeCoreComponents() throws ConfigException {  final InputStream is=RootCfgDefn.class.getResourceAsStream(MANIFEST_ABSOLUTE_PATH);  if (is == null) {    throw new ConfigException(ERR_ADMIN_CANNOT_FIND_CORE_MANIFEST.get(MANIFEST_ABSOLUTE_PATH));  }  try {    loadDefinitionClasses(is);  } catch (  final ConfigException e) {    debugLogger.trace("Unable to initialize core components",e);    throw new ConfigException(ERR_CLASS_LOADER_CANNOT_LOAD_CORE.get(MANIFEST_ABSOLUTE_PATH,stackTraceToSingleLineString(e,true)));  }}  }
class C{  private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private static String _buildAciValue(String attr,String... aciFields){  StringBuilder aci=new StringBuilder(attr);  for (int i=0; i < aciFields.length - 1; i+=2) {    String aciField=aciFields[i];    String aciValue=aciFields[i + 1];    if (aciField.startsWith("targ") || aciField.equals("extop")) {      if (!aciField.endsWith("=")) {        aciField+="=";      }      aci.append("(" + aciField + "\""+ aciValue+ "\")"+ EOL+ " ");    }  }  aci.append("(version 3.0;acl ");  for (int i=0; i < aciFields.length - 1; i+=2) {    String aciField=aciFields[i];    String aciValue=aciFields[i + 1];    if (aciField.equals("name")) {      aci.append("\"" + aciValue + "\"");    }  }  aci.append("; ");  for (int i=0; i < aciFields.length - 1; i+=2) {    String permission=aciFields[i];    String bindRule=aciFields[i + 1];    if (!permission.startsWith("targ") && !permission.equals("extop") && !permission.equals("name")) {      aci.append(EOL + " " + permission+ " "+ bindRule+ ";");    }  }  aci.append(")");  return aci.toString();}  }
class C{  private AppInfo findApplicationInfoLocked(String packageName,UserHandleCompat user,String className){  for (  AppInfo info : data) {    final ComponentName component=info.intent.getComponent();    if (user.equals(info.user) && packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {      return info;    }  }  return null;}  }
class C{  public Iterator<String> listProperties(){  return properties.keySet().iterator();}  }
class C{  public GetComplete createGetComplete(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.GET_COMPLETE,value);  if (obj == null) {    return new GetCompleteImpl(value);  } else {    return (GetComplete)obj;  }}  }
class C{  public ECPrivateKeySpec(BigInteger s,ECParameterSpec params){  if (s == null) {    throw new NullPointerException("s is null");  }  if (params == null) {    throw new NullPointerException("params is null");  }  this.s=s;  this.params=params;}  }
class C{  private static Position[] simplifyDouglasPeucker(Position[] points,double sqTolerance){  int last=points.length - 1;  ArrayList<Position> simplified=new ArrayList<>();  simplified.add(points[0]);  simplified.addAll(simplifyDpStep(points,0,last,sqTolerance,simplified));  simplified.add(points[last]);  return simplified.toArray(new Position[simplified.size()]);}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public Instant minusSeconds(long secondsToSubtract){  if (secondsToSubtract == Long.MIN_VALUE) {    return plusSeconds(Long.MAX_VALUE).plusSeconds(1);  }  return plusSeconds(-secondsToSubtract);}  }
class C{  private SipStack createStack(Properties properties) throws PeerUnavailableException {  try {    Class[] paramTypes=new Class[1];    paramTypes[0]=Class.forName("java.util.Properties");    Constructor sipStackConstructor=Class.forName(getPathName() + ".javax.sip.SipStackImpl").getConstructor(paramTypes);    Object[] conArgs=new Object[1];    conArgs[0]=properties;    SipStack sipStack=(SipStack)sipStackConstructor.newInstance(conArgs);    sipStackList.add(sipStack);    String name=properties.getProperty("javax.sip.STACK_NAME");    this.sipStackByName.put(name,sipStack);    return sipStack;  } catch (  Exception e) {    String errmsg="The Peer SIP Stack: " + getPathName() + ".javax.sip.SipStackImpl"+ " could not be instantiated. Ensure the Path Name has been set.";    throw new PeerUnavailableException(errmsg,e);  }}  }
class C{  public void save() throws IOException {  try (final OutputStream os=new BufferedOutputStream(new FileOutputStream(this.keyStoreFile))){    try {      this.keyStore.store(os,this.password);      this.dirty.set(false);    } catch (    final KeyStoreException|NoSuchAlgorithmException|CertificateException ex) {      throw new IllegalStateException("Should not happen.",ex);    }  } }  }
class C{  public SelectRealmModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  private static Map<AttributeType,List<Attribute>> decodeAttributes(Byte ver,ByteSequenceReader entryBuffer,EntryEncodeConfig config) throws DirectoryException {  int attrs=entryBuffer.readBERLength();  Map<AttributeType,List<Attribute>> attributes=new LinkedHashMap<>(attrs);  if (config.compressAttributeDescriptions()) {    for (int i=0; i < attrs; i++) {      if (ver < 0x03) {        entryBuffer.readBERLength();      }      Attribute a=config.getCompressedSchema().decodeAttribute(entryBuffer);      AttributeType attrType=a.getAttributeDescription().getAttributeType();      List<Attribute> attrList=attributes.get(attrType);      if (attrList == null) {        attrList=new ArrayList<>(1);        attributes.put(attrType,attrList);      }      attrList.add(a);    }  } else {    int startPos;    int endPos;    for (int i=0; i < attrs; i++) {      startPos=entryBuffer.position();      while (entryBuffer.readByte() != 0x00) {      }      endPos=entryBuffer.position() - 1;      entryBuffer.position(startPos);      String name=entryBuffer.readStringUtf8(endPos - startPos);      entryBuffer.skip(1);      final AttributeBuilder builder=new AttributeBuilder(name);      int numValues=entryBuffer.readBERLength();      for (int j=0; j < numValues; j++) {        int valueLength=entryBuffer.readBERLength();        builder.add(entryBuffer.readByteSequence(valueLength).toByteString());      }      Attribute a=builder.toAttribute();      AttributeType attributeType=a.getAttributeDescription().getAttributeType();      List<Attribute> attrList=attributes.get(attributeType);      if (attrList == null) {        attrList=new ArrayList<>(1);        attributes.put(attributeType,attrList);      }      attrList.add(a);    }  }  return attributes;}  }
class C{  public static void enforceWhiteList(final Context context,final JsonValue jsonValue,final String objectType,final Set<String> validUserAttributes) throws BadRequestException {  if (!context.containsContext(SelfServiceContext.class) || !objectType.equals(USER_TYPE)) {    return;  }  final String realm=RealmContext.getRealm(context).asPath();  if (validUserAttributes == null || validUserAttributes.isEmpty()) {    throw new BadRequestException("Null/empty whitelist of valid attributes for self service user creation");  }  IdentityDetails identityDetails=jsonValueToIdentityDetails(objectType,jsonValue,realm);  Attribute[] attributes=identityDetails.getAttributes();  for (  Attribute attribute : attributes) {    if (!validUserAttributes.contains(attribute.getName())) {      throw new BadRequestException("User attribute " + attribute.getName() + " is not valid for self service creation");    }  }}  }
class C{  @SuppressWarnings("unchecked") public Iterator<InputEvent> iterator(){  return events.iterator();}  }
class C{  public void testSetAttributeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrName;  String attrValue;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM","dom:elem");  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr","value");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens01_attrName","attr",attrName);  assertEquals("elementsetattributens01_attrValue","value",attrValue);}  }
class C{  private boolean hasNonSpecialAttribute(Collection<String> keys){  for (  String attr : keys) {    if (!attr.startsWith("_")) {      return true;    }  }  return false;}  }
class C{  private BorderFactory(){}  }
class C{  public static boolean isValidFilter(String filter){  try {    getFilterFromString(filter);  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public void endAttributes() throws SAXException {  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  nsContext.iterateDeclaredPrefixes(startPrefixCallback);  writer.startElement(uri,local,qname,attributes);  attributes.clear();  textBuf.setLength(0);}  }
class C{  public void test_clone(){  Format fm=new MockFormat();  Format fmc=(Format)fm.clone();  assertEquals(fm.getClass(),fmc.getClass());}  }
class C{  public static void sendError(HttpServletRequest request,HttpServletResponse response,int httpStatusCode,String errorCode,String errorMsg){  if ((errorUrl == null) || (errorUrl.length() == 0)) {    try {      response.sendError(httpStatusCode,errorMsg);      return;    } catch (    IOException ioe) {      debug.error("CookieUtils.sendError",ioe);    }  } else {    String jointString="?";    if (errorUrl.indexOf("?") != -1) {      jointString="&";    }    String newUrl=errorUrl.trim() + jointString + "errorcode="+ errorCode+ "&"+ "httpstatuscode="+ httpStatusCode+ "&"+ "errormessage="+ URLEncDec.encode(errorMsg);    if (debug.messageEnabled()) {      debug.message("CookieUtils.sendError: final redirectionURL=" + newUrl);    }    String tmp=errorUrl.toLowerCase();    if (tmp.startsWith("http://") || tmp.startsWith("https://")) {      try {        response.sendRedirect(newUrl);      } catch (      IOException e) {        debug.error("CookieUtils.sendError: Exception " + "occured while trying to redirect to resource:" + newUrl,e);      }    } else {      try {        RequestDispatcher dispatcher=request.getRequestDispatcher(newUrl);        dispatcher.forward(request,response);      } catch (      ServletException e) {        debug.error("CookieUtils.sendError: Exception " + "occured while trying to forward to resource:" + newUrl,e);      }catch (      IOException e) {        debug.error("CookieUtils.sendError: Exception " + "occured while trying to forward to resource:" + newUrl,e);      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.KeysElement createKeysElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.KeysElementImpl();}  }
class C{  public DN nextDN() throws DataFormatException {  try {    return DN.valueOf(nextString());  } catch (  LocalizedIllegalArgumentException e) {    throw new DataFormatException(e.getLocalizedMessage());  }}  }
class C{  @Override public boolean onCreate(){  mDbHelper=new DatabaseHelper(getContext());  return (null == mDbHelper) ? false : true;}  }
class C{  public boolean isLeftToRight(){  return (orientation & LTR_BIT) != 0;}  }
class C{  public final void testClone02(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters(certificates);  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  assertTrue(cp1.getCollection() == cp2.getCollection());}  }
class C{  public SQLException(String reason,Throwable cause){  super(reason,cause);  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public static void main(String[] args){  int retCode=mainBackUpDB(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public void fireGenerateEvent(int eventType){}  }
class C{  public boolean isLogEnabled(){  if (logger == null) {    return false;  } else {    return logger.isLogEnabled();  }}  }
class C{  public void addLayoutComponent(String name,Component c){}  }
class C{  static boolean checkUUIDFormat(String uuid){  boolean result=true;  int delimCnt=0;  int delimPos=0;  if (uuid == null) {    return false;  }  for (delimPos=0; delimPos < uuid.length(); delimPos++) {    if (uuid.charAt(delimPos) == '-') {      delimCnt++;      result=result && (delimPos == 8 || delimPos == 13 || delimPos == 18 || delimPos == 23);    }  }  return result && UUID_SEGMENT_COUNT == delimCnt && UUID_LENGTH == delimPos;}  }
class C{  private void updateScrollbarsFreeStanding(){  if (scrollpane == null) {    return;  }  Border border=scrollpane.getBorder();  Object value;  if (border instanceof MetalBorders.ScrollPaneBorder) {    value=Boolean.FALSE;  } else {    value=Boolean.TRUE;  }  JScrollBar sb=scrollpane.getHorizontalScrollBar();  if (sb != null) {    sb.putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);  }  sb=scrollpane.getVerticalScrollBar();  if (sb != null) {    sb.putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);  }}  }
class C{  @Override public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Document document,java.security.cert.Certificate cert) throws XMLSignatureException {  return sp.verifyXMLSignature(document,cert);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchild.class,args);}  }
class C{  @VisibleForTesting FileChangeSet createFileChangeSet(){  List<File> latest=Collections.emptyList();  if (directory.isDirectory()) {    latest=new ArrayList<>(asList(directory.listFiles(jsonFiles())));  }  Set<File> added=new HashSet<>();  for (  File candidate : new ArrayList<>(latest)) {    if (!snapshot.containsKey(candidate)) {      added.add(candidate);      latest.remove(candidate);    }  }  Set<File> removed=new HashSet<>();  for (  File candidate : new ArrayList<>(snapshot.keySet())) {    if (!latest.contains(candidate)) {      removed.add(candidate);      snapshot.remove(candidate);    }  }  Set<File> modified=new HashSet<>();  for (  File candidate : latest) {    long lastModified=snapshot.get(candidate);    if (lastModified < candidate.lastModified()) {      modified.add(candidate);      snapshot.put(candidate,candidate.lastModified());    }  }  for (  File file : added) {    snapshot.put(file,file.lastModified());  }  return new FileChangeSet(directory,added,modified,removed);}  }
class C{  public Object clone() throws CloneNotSupportedException {  AxesWalker clone=(AxesWalker)super.clone();  return clone;}  }
class C{  public boolean isLigature(){  return (glyphType & 0x3) == LIGATURE;}  }
class C{  public void skippedEntity(String name) throws SAXException {  flushStartDoc();  m_resultContentHandler.skippedEntity(name);}  }
class C{  public static RowSetFactory newFactory(String factoryClassName,ClassLoader cl) throws SQLException {  trace("***In newInstance()");  if (factoryClassName == null) {    throw new SQLException("Error: factoryClassName cannot be null");  }  try {    ReflectUtil.checkPackageAccess(factoryClassName);  } catch (  java.security.AccessControlException e) {    throw new SQLException("Access Exception",e);  }  try {    Class<?> providerClass=getFactoryClass(factoryClassName,cl,false);    RowSetFactory instance=(RowSetFactory)providerClass.newInstance();    if (debug) {      trace("Created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new SQLException("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new SQLException("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  public void stopServer(String[] arguments) throws Exception {  Object param[];  Class<?> paramTypes[];  if (arguments == null || arguments.length == 0) {    paramTypes=null;    param=null;  } else {    paramTypes=new Class[1];    paramTypes[0]=arguments.getClass();    param=new Object[1];    param[0]=arguments;  }  Method method=catalinaDaemon.getClass().getMethod("stopServer",paramTypes);  method.invoke(catalinaDaemon,param);}  }
class C{  private void addIdRepo(String orgName,String name) throws IdRepoException, SSOException {  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache.addIdRepo called for orgName: " + orgName + " IdRepo Name: "+ name);  }  Map configMap=null;  try {    ServiceConfig sc=idRepoServiceConfigManager.getOrganizationConfig(orgName,null);    if (sc == null) {      debug.error("IdRepoPluginsCache.addIdRepo orgName: " + orgName + " does not exisit");      Object[] args={orgName};      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.REALM_DOESNT_EXIST,args);    }    sc=sc.getSubConfig(name);    if (sc == null) {      debug.error("IdRepoPluginsCache.addIdRepo orgName: " + orgName + " subConfig does not exisit: "+ name);      Object[] args={orgName + ":" + name};      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.REALM_DOESNT_EXIST,args);    }    configMap=sc.getAttributes();  } catch (  SMSException smse) {    if (debug.warningEnabled()) {      debug.warning("IdRepoPluginsCache.addIdRepo SMSException " + "for orgName: " + orgName + " sc name: "+ name,smse);    }    return;  }  IdRepo repo=constructIdRepoPlugin(orgName,configMap,name);  orgName=DNUtils.normalizeDN(orgName);synchronized (idrepoPlugins) {    clearReadOnlyPlugins(orgName);    Map repos=(Map)idrepoPlugins.get(orgName);    boolean addInternalRepos=false;    if (repos == null) {      repos=new LinkedHashMap();      idrepoPlugins.put(orgName,repos);      addInternalRepos=true;    }    repos.put(name,repo);    if (addInternalRepos) {      addInternalRepo(repos,orgName);    }  }}  }
class C{  public SortKey(final String attributeDescription){  this(attributeDescription,false,null);}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   queue[i]=null;  size=0;}  }
class C{  private boolean validateStartIp(Set ipSet) throws PolicyException {  if (ipSet.size() != 1) {    String args[]={START_IP};    throw new PolicyException(ResBundleUtils.rbName,"multiple_values_not_allowed_for_property",args,null);  }  Iterator startIpIter=ipSet.iterator();  try {    String startIpString=(String)startIpIter.next();    startIp=stringToIp(startIpString);  } catch (  ClassCastException ce) {    String args[]={START_IP};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,ce);  }  return true;}  }
class C{  public void create(JsonValue token) throws CoreTokenException {  cts.create(tokenAdapter.toToken(token));}  }
class C{  public boolean has_trace_exit_restrictions(){  for (int index=first_layer(); index <= last_layer(); ++index) {    Collection<BrdTraceExitRestriction> curr_exit_restrictions=get_trace_exit_restrictions(index);    if (curr_exit_restrictions.size() > 0)     return true;  }  return false;}  }
class C{  public static AudioFile read(File f) throws CannotReadException, IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  return getDefaultAudioFileIO().readFile(f);}  }
class C{  public void testPosNegFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="-2837462783428374767845648748973847593874837948575684767";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public static String createClientSideScriptExecutorFunction(String script,String outputParameterId,boolean clientSideScriptEnabled){  String collectingDataMessage="";  if (clientSideScriptEnabled) {    collectingDataMessage="    messenger.messages.addMessage( message );\n";  }  String spinningWheelScript="if (window.require) {\n" + "    var messenger = require(\"org/forgerock/commons/ui/common/components/Messages\"),\n" + "        spinner =  require(\"org/forgerock/commons/ui/common/main/SpinnerManager\"),\n"+ "        message =  {message:\"Collecting Data...\", type:\"info\"};\n"+ "    spinner.showSpinner();\n" + collectingDataMessage + "}";  return String.format(spinningWheelScript + "(function(output) {\n" + "    var autoSubmitDelay = 0,\n"+ "        submitted = false;\n"+ "    function submit() {\n"+ "        if (submitted) {\n"+ "            return;\n"+ "        }"+ "        if (!(window.jQuery)) {\n"+ "            document.forms[0].submit();\n"+ "        } else {\n"+ "            $('input[type=submit]').trigger('click');\n"+ "        }\n"+ "        submitted = true;\n"+ "    }\n"+ "    %s\n"+ "    setTimeout(submit, autoSubmitDelay);\n"+ "}) (document.forms[0].elements['%s']);\n",script,outputParameterId);}  }
class C{  public boolean isAnonymous(){  if (keyExchange == KEY_EXCHANGE_DH_anon || keyExchange == KEY_EXCHANGE_DH_anon_EXPORT || keyExchange == KEY_EXCHANGE_ECDH_anon) {    return true;  }  return false;}  }
class C{  public void cut(int startIndex,int endIndex){  selectText(startIndex,endIndex);  JTextComponent.this.cut();}  }
class C{  public DOMSource(Node n){  setNode(n);}  }
class C{  public boolean isFatal(){  return this.severity == Severity.FATAL;}  }
class C{  public void testCertStore05() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  private boolean prepare(JComponent c,Container root,boolean isPaint,int x,int y,int w,int h){  if (bsg != null) {    bsg.dispose();    bsg=null;  }  bufferStrategy=null;  if (root != null) {    boolean contentsLost=false;    BufferInfo bufferInfo=getBufferInfo(root);    if (bufferInfo == null) {      contentsLost=true;      bufferInfo=new BufferInfo(root);      bufferInfos.add(bufferInfo);      if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {        LOGGER.finer("prepare: new BufferInfo: " + root);      }    }    this.bufferInfo=bufferInfo;    if (!bufferInfo.hasBufferStrategyChanged()) {      bufferStrategy=bufferInfo.getBufferStrategy(true);      if (bufferStrategy != null) {        bsg=bufferStrategy.getDrawGraphics();        if (bufferStrategy.contentsRestored()) {          contentsLost=true;          if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {            LOGGER.finer("prepare: contents restored in prepare");          }        }      } else {        return false;      }      if (bufferInfo.getContentsLostDuringExpose()) {        contentsLost=true;        bufferInfo.setContentsLostDuringExpose(false);        if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {          LOGGER.finer("prepare: contents lost on expose");        }      }      if (isPaint && c == rootJ && x == 0 && y == 0 && c.getWidth() == w && c.getHeight() == h) {        bufferInfo.setInSync(true);      } else       if (contentsLost) {        bufferInfo.setInSync(false);        if (!isRepaintingRoot()) {          repaintRoot(rootJ);        } else {          resetDoubleBufferPerWindow();        }      }      return (bufferInfos != null);    }  }  return false;}  }
class C{  public String toFilter(String operator){  return ldapAttribute + operator + attributeName;}  }
class C{  public static void deregisterPasswordGenerator(DN configEntryDN){  directoryServer.passwordGenerators.remove(configEntryDN);}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public static Object convertNodeToJAXB(Node node) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(node);}  }
class C{  public boolean isFatalEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  private DirectoryEnvironmentConfig(Properties properties,boolean checkIfServerIsRunning){  this.checkIfServerIsRunning=checkIfServerIsRunning;  configProperties=new HashMap<>();  if (properties != null) {    Enumeration<?> propertyNames=properties.propertyNames();    while (propertyNames.hasMoreElements()) {      Object o=propertyNames.nextElement();      configProperties.put(String.valueOf(o),String.valueOf(properties.get(o)));    }  }}  }
class C{  public boolean isValidID3v2FrameIdentifier(String identifier){  Matcher m=ID3v22Frame.validFrameIdentifier.matcher(identifier);  return m.matches();}  }
class C{  Pair<Boolean,Record<K,V>> positionToKey(final long blockStartPosition,final K key,final KeyMatchingStrategy matchStrategy,final PositionStrategy positionStrategy) throws ChangelogException {  Record<K,V> record=readRecord(blockStartPosition);  Record<K,V> previousRecord=null;  long previousPosition=blockStartPosition;  while (record != null) {    final int keysComparison=record.getKey().compareTo(key);    if ((keysComparison == 0 && matchStrategy == EQUAL_TO_KEY) || (keysComparison >= 0 && matchStrategy != EQUAL_TO_KEY)) {      return getMatchingRecord(matchStrategy,positionStrategy,keysComparison,record,previousRecord,previousPosition);    }    previousRecord=record;    previousPosition=getFilePosition();    record=readRecord();  }  if (matchStrategy == LESS_THAN_OR_EQUAL_TO_KEY) {    return getRecordNoMatchForLessStrategy(positionStrategy,previousRecord,previousPosition);  }  return Pair.of(false,null);}  }
class C{  public static void writeConnectorState(PrintWriter writer,ObjectName tpName,String name,MBeanServer mBeanServer,Vector<ObjectName> globalRequestProcessors,Vector<ObjectName> requestProcessors,int mode) throws Exception {  if (mode == 0) {    writer.print("<h1>");    writer.print(name);    writer.print("</h1>");    writer.print("<p>");    writer.print(" Max threads: ");    writer.print(mBeanServer.getAttribute(tpName,"maxThreads"));    writer.print(" Current thread count: ");    writer.print(mBeanServer.getAttribute(tpName,"currentThreadCount"));    writer.print(" Current thread busy: ");    writer.print(mBeanServer.getAttribute(tpName,"currentThreadsBusy"));    try {      Object value=mBeanServer.getAttribute(tpName,"keepAliveCount");      writer.print(" Keep alive sockets count: ");      writer.print(value);    } catch (    Exception e) {    }    writer.print("<br>");    ObjectName grpName=null;    Enumeration<ObjectName> enumeration=globalRequestProcessors.elements();    while (enumeration.hasMoreElements()) {      ObjectName objectName=enumeration.nextElement();      if (name.equals(objectName.getKeyProperty("name"))) {        grpName=objectName;      }    }    if (grpName == null) {      return;    }    writer.print(" Max processing time: ");    writer.print(formatTime(mBeanServer.getAttribute(grpName,"maxTime"),false));    writer.print(" Processing time: ");    writer.print(formatTime(mBeanServer.getAttribute(grpName,"processingTime"),true));    writer.print(" Request count: ");    writer.print(mBeanServer.getAttribute(grpName,"requestCount"));    writer.print(" Error count: ");    writer.print(mBeanServer.getAttribute(grpName,"errorCount"));    writer.print(" Bytes received: ");    writer.print(formatSize(mBeanServer.getAttribute(grpName,"bytesReceived"),true));    writer.print(" Bytes sent: ");    writer.print(formatSize(mBeanServer.getAttribute(grpName,"bytesSent"),true));    writer.print("</p>");    writer.print("<table border=\"0\"><tr><th>Stage</th><th>Time</th><th>B Sent</th><th>B Recv</th><th>Client (Forwarded)</th><th>Client (Actual)</th><th>VHost</th><th>Request</th></tr>");    enumeration=requestProcessors.elements();    while (enumeration.hasMoreElements()) {      ObjectName objectName=enumeration.nextElement();      if (name.equals(objectName.getKeyProperty("worker"))) {        writer.print("<tr>");        writeProcessorState(writer,objectName,mBeanServer,mode);        writer.print("</tr>");      }    }    writer.print("</table>");    writer.print("<p>");    writer.print("P: Parse and prepare request S: Service F: Finishing R: Ready K: Keepalive");    writer.print("</p>");  } else   if (mode == 1) {    writer.write("<connector name='" + name + "'>");    writer.write("<threadInfo ");    writer.write(" maxThreads=\"" + mBeanServer.getAttribute(tpName,"maxThreads") + "\"");    writer.write(" currentThreadCount=\"" + mBeanServer.getAttribute(tpName,"currentThreadCount") + "\"");    writer.write(" currentThreadsBusy=\"" + mBeanServer.getAttribute(tpName,"currentThreadsBusy") + "\"");    writer.write(" />");    ObjectName grpName=null;    Enumeration<ObjectName> enumeration=globalRequestProcessors.elements();    while (enumeration.hasMoreElements()) {      ObjectName objectName=enumeration.nextElement();      if (name.equals(objectName.getKeyProperty("name"))) {        grpName=objectName;      }    }    if (grpName != null) {      writer.write("<requestInfo ");      writer.write(" maxTime=\"" + mBeanServer.getAttribute(grpName,"maxTime") + "\"");      writer.write(" processingTime=\"" + mBeanServer.getAttribute(grpName,"processingTime") + "\"");      writer.write(" requestCount=\"" + mBeanServer.getAttribute(grpName,"requestCount") + "\"");      writer.write(" errorCount=\"" + mBeanServer.getAttribute(grpName,"errorCount") + "\"");      writer.write(" bytesReceived=\"" + mBeanServer.getAttribute(grpName,"bytesReceived") + "\"");      writer.write(" bytesSent=\"" + mBeanServer.getAttribute(grpName,"bytesSent") + "\"");      writer.write(" />");      writer.write("<workers>");      enumeration=requestProcessors.elements();      while (enumeration.hasMoreElements()) {        ObjectName objectName=enumeration.nextElement();        if (name.equals(objectName.getKeyProperty("worker"))) {          writeProcessorState(writer,objectName,mBeanServer,mode);        }      }      writer.write("</workers>");    }    writer.write("</connector>");  }}  }
class C{  static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  throw new ComparisonFailure(message,expected,actual);}  }
class C{  public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  public static void addFullRow(final String contents,final int colSpan,final String style) throws IOException {  if (contents != null) {    final ResponseWriter writer=JKJsfUtil.context().getResponseWriter();    writer.startElement("tr",null);    writer.startElement("td",null);    writer.writeAttribute("align","center",null);    writer.writeAttribute("colspan",colSpan,null);    writer.writeAttribute("class",style,null);    writer.writeText(contents,null);    writer.endElement("td");    writer.endElement("tr");  }}  }
class C{  BCRSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  public void removeNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public E firstElement(){  return delegate.firstElement();}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  private void compilePredicates(int opPos,Expression[] predicates) throws TransformerException {  for (int i=0; OpCodes.OP_PREDICATE == getOp(opPos); i++) {    predicates[i]=predicate(opPos);    opPos=getNextOpPos(opPos);  }}  }
class C{  private void addPutExtraStatement(MethodSpec.Builder buildSpecBuilder,Element e){  String fieldName=e.getSimpleName().toString();  Extra extra=e.getAnnotation(Extra.class);  String keyName=extra.key().length() > 0 ? extra.key() : fieldName;  TypeName fieldType=TypeName.get(e.asType()).box();  if (shouldUseParceler(e)) {    buildSpecBuilder.addStatement(PARCELER_PUT_EXTRA_STATEMENT,keyName,PARCELER_CLASS,fieldName);    return;  } else {    String statement=PUT_EXTRA_STATEMENTS.get(fieldType.toString());    if (statement != null) {      buildSpecBuilder.addStatement(statement,keyName,fieldName);      return;    }  }  logError("[putExtra] Unsupported type: " + fieldType.toString());}  }
class C{  public NameIDPolicyImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  @Override public Foo fetchByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid_C(uuid,companyId,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public ProfileStackFrame(String className,String methodName){  this.className=className;  this.methodName=methodName;  lineNumbers=new HashMap<>();  subordinateFrames=new HashMap<>();}  }
class C{  protected int FilterExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterMatch;  if (PrimaryExpr()) {    if (tokenIs('[')) {      insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);      while (tokenIs('[')) {        Predicate();      }      filterMatch=FILTER_MATCH_PREDICATES;    } else {      filterMatch=FILTER_MATCH_PRIMARY;    }  } else {    filterMatch=FILTER_MATCH_FAILED;  }  return filterMatch;}  }
class C{  private byte[] pbeDecrypt(byte[] cipherText){  byte[] result=null;  if (_initialized) {    try {      byte share[]=cipherText;      if (share[0] != VERSION) {        Debug debug=Debug.getInstance("amSDK");        if (debug != null) {          debug.error("JCEEncryption:: Unsupported version: " + share[0]);        }        return null;      }      byte raw[]=getRaw(share);      final Cipher pbeCipher=cipherProvider.getCipher();      if (pbeCipher != null) {        pbeCipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParameterSpec);        result=pbeCipher.doFinal(raw);      } else {        Debug debug=Debug.getInstance("amSDK");        if (debug != null) {          debug.error("JCEEncryption: Failed to obtain Cipher");        }      }    } catch (    Exception ex) {      Debug debug=Debug.getInstance("amSDK");      if (debug != null) {        debug.error("JCEEncryption:: failed to decrypt data",ex);      }    }  } else {    Debug debug=Debug.getInstance("amSDK");    if (debug != null) {      debug.error("JCEEncryption:: not yet initialized");    }  }  return result;}  }
class C{  public JKDefaultTableModel(final Object[] columnNames,final int rowCount){  this(convertToVector(columnNames),rowCount);}  }
class C{  public void test_nCopiesILjava_lang_Object(){  Object o=new Object();  List l=Collections.nCopies(100,o);  Iterator i=l.iterator();  Object first=i.next();  assertTrue("Returned list consists of copies not refs",first == o);  assertEquals("Returned list of incorrect size",100,l.size());  assertTrue("Contains",l.contains(o));  assertTrue("Contains null",!l.contains(null));  assertTrue("null nCopies contains",!Collections.nCopies(2,null).contains(o));  assertTrue("null nCopies contains null",Collections.nCopies(2,null).contains(null));  l=Collections.nCopies(20,null);  i=l.iterator();  for (int counter=0; i.hasNext(); counter++) {    assertTrue("List is too large",counter < 20);    assertNull("Element should be null: " + counter,i.next());  }  try {    l.add(o);    fail("Returned list is not immutable");  } catch (  UnsupportedOperationException e) {    return;  }  try {    Collections.nCopies(-2,new HashSet());    fail("nCopies with negative arg didn't throw IAE");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public final void quickPop(int n){  m_firstFree-=n;}  }
class C{  public static boolean isHTMLString(String s){  if (s != null) {    if ((s.length() >= 6) && (s.charAt(0) == '<') && (s.charAt(5) == '>')) {      String tag=s.substring(1,5);      return tag.equalsIgnoreCase(propertyKey);    }  }  return false;}  }
class C{  public boolean isCurrentServiceInvalidNow(){  return invalidateRefs;}  }
class C{  public java.io.Serializable read_value(java.lang.String rep_id){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  private void clearCookie(String cookieName){  String cookieDomain=null;  Set<String> cookieDomainSet=AuthClientUtils.getCookieDomainsForRequest(request);  if (cookieDomainSet.isEmpty()) {    cookie=AuthUtils.createCookie(cookieName,LOGOUTCOOKIEVALUE,null);    cookie.setMaxAge(0);    response.addCookie(cookie);  } else {    Iterator iter=cookieDomainSet.iterator();    while (iter.hasNext()) {      cookieDomain=(String)iter.next();      cookie=AuthUtils.createCookie(cookieName,LOGOUTCOOKIEVALUE,cookieDomain);      cookie.setMaxAge(0);      response.addCookie(cookie);    }  }}  }
class C{  public static String readFixedSizeUTF16Str(InputStream stream,int strLen) throws IOException {  byte[] strBytes=new byte[strLen];  int read=stream.read(strBytes);  if (read == strBytes.length) {    if (strBytes.length >= 2) {      if (strBytes[strBytes.length - 1] == 0 && strBytes[strBytes.length - 2] == 0) {        byte[] copy=new byte[strBytes.length - 2];        System.arraycopy(strBytes,0,copy,0,strBytes.length - 2);        strBytes=copy;      }    }    return new String(strBytes,"UTF-16LE");  }  throw new IllegalStateException("Couldn't read the necessary amount of bytes.");}  }
class C{  public void run(){  if (urls == null) {    throw new IllegalStateException("Must call sendToLocal before starting thread");  }  if (!urls.isEmpty()) {    for (    Map.Entry<String,Set<SessionID>> entry : urls.entrySet()) {      String url=entry.getKey();      try {        URL parsedUrl=new URL(url);        if (!serverConfig.isLocalNotificationService(parsedUrl)) {          for (          SessionID sid : entry.getValue()) {            SessionInfo info=sessionInfoFactory.makeSessionInfo(session,sid);            SessionNotification notification=new SessionNotification(info,eventType.getCode(),currentTimeMillis());            Notification notificationXml=new Notification(notification.toXMLString());            NotificationSet notificationSet=new NotificationSet(SessionService.SESSION_SERVICE);            notificationSet.addNotification(notificationXml);            PLLServer.send(parsedUrl,notificationSet);          }        }      } catch (      Exception e) {        sessionDebug.error("Remote Individual notification to " + url,e);      }    }  }}  }
class C{  public static <T>T doUsing(Object context,RestrictedTokenAction<T> action) throws Exception {  Object savedContext=currentContext.get();  try {    currentContext.set(context);    return action.run();  }  finally {    currentContext.set(savedContext);  }}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  ChildTestIterator clone=(ChildTestIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  return clone;}  }
class C{  public static String toString(float[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public LimitExceededException(){  super();}  }
class C{  public void test_Of_EEEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c,EnumWithInnerClass.d);  assertEquals("Size of enumSet should be 4",4,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("enumSet should contain EnumWithSubclass.d:",enumSet.contains(EnumWithInnerClass.d));  try {    EnumSet.of((EnumWithInnerClass)null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d);  assertEquals(4,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.d));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  public AnyOfAuthzModule(List<CrestAuthorizationModule> filters){  Reject.ifNull(filters);  Reject.ifTrue(filters.size() == 0);  this.filters=filters;}  }
class C{  protected int checkRequestHeader(){  int retVal=0;  debug.message("{}.checkRequestHeader:",ADAPTIVE);  HttpServletRequest req=getHttpServletRequest();  if (req != null) {    Enumeration<String> eHdrs=req.getHeaderNames();    while (eHdrs.hasMoreElements()) {      String header=eHdrs.nextElement();      if (reqHeaderName.equalsIgnoreCase(header)) {        if (debug.messageEnabled()) {          debug.message("{}.checkRequestHeader: Found header: {}",ADAPTIVE,header);        }        if (reqHeaderValue != null) {          Enumeration<String> eVals=req.getHeaders(header);          while (eVals.hasMoreElements()) {            String val=eVals.nextElement();            if (reqHeaderValue.equalsIgnoreCase(val)) {              if (debug.messageEnabled()) {                debug.message("{}.checkRequestHeader: Found header Value: {}",ADAPTIVE,val);              }              retVal=reqHeaderScore;            }          }        } else {          retVal=reqHeaderScore;        }        break;      }    }  }  if (!reqHeaderInvert) {    retVal=reqHeaderScore - retVal;  }  return retVal;}  }
class C{  public static void createAgentLocal(SSOToken ssoToken,String realm,String agentName,String agentType,Map attrValues,String agentURL) throws IdRepoException, SSOException, SMSException, MalformedURLException, ConfigurationException {  if ((agentURL == null) || (agentURL.trim().length() == 0)) {    throw new ConfigurationException("create.agent.invalid.agent.url",null);  }  createAgentEx(ssoToken,realm,agentName,agentType,attrValues,null,new FQDNUrl(agentURL));}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  return super.viewToModel(fx,fy,adjustAllocation(a),bias);}  }
class C{  public DsnShape board_to_dsn(freert.planar.PlaShape p_board_shape,DsnLayer p_layer){  DsnShape result;  if (p_board_shape instanceof ShapeTileBox) {    result=new DsnRectangle(p_layer,board_to_dsn((ShapeTileBox)p_board_shape));  } else   if (p_board_shape instanceof ShapeSegments) {    PlaPointFloat[] corners=((ShapeSegments)p_board_shape).corner_approx_arr();    double[] coors=board_to_dsn(corners);    result=new DsnPolygon(p_layer,coors);  } else   if (p_board_shape instanceof freert.planar.ShapeCircle) {    freert.planar.ShapeCircle board_circle=(freert.planar.ShapeCircle)p_board_shape;    double diameter=2 * board_to_dsn(board_circle.radius);    double[] center_coor=board_to_dsn(board_circle.center.to_float());    result=new DsnCircle(p_layer,diameter,center_coor[0],center_coor[1]);  } else {    System.out.println("CoordinateTransform.board_to_dsn not yet implemented for p_board_shape");    result=null;  }  return result;}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionType createAsymmetricDecryptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionTypeImpl();}  }
class C{  public final boolean is_shove_fixed(){  if (super.is_shove_fixed())   return true;  RuleNets nets=r_board.brd_rules.nets;  for (  int curr_net_no : net_nos) {    if (!RuleNets.is_normal_net_no(curr_net_no))     continue;    if (nets.get(curr_net_no).get_class().is_shove_fixed())     return true;  }  return false;}  }
class C{  public void testLoadStore02() throws Exception {  assertTrue(NotSupportMsg,KSSupported);  KeyStore[] kss=createKS();  assertNotNull("KeyStore objects were not created",kss);  for (int i=0; i < kss.length; i++) {    try {      kss[i].load(null);      fail("IOException or IllegalArgumentException should be thrown for null parameter");    } catch (    IOException e) {    }catch (    IllegalArgumentException e) {    }    kss[i].load(null,null);    try {      kss[i].store(null);      fail("IOException or IllegalArgumentException should be thrown for null parameter");    } catch (    IOException e) {    }catch (    IllegalArgumentException e) {    }  }  KeyStore.LoadStoreParameter lParam=new MyLoadStoreParams(new KeyStore.PasswordProtection(new char[0]));  for (int i=0; i < kss.length; i++) {    kss[i].load(lParam);    assertEquals("Incorrect result",kss[i].size(),0);    kss[i].store(lParam);  }}  }
class C{  public FrameBodyTIT2(){}  }
class C{  @Override public void unbind(String name) throws NamingException {  getBoundContext().unbind(parseName(name));}  }
class C{  public AuthenticationException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public void closeEntry() throws IOException {  ensureOpen();  if (current != null) {    ZipEntry e=current.entry;switch (e.method) {case DEFLATED:      def.finish();    while (!def.finished()) {      deflate();    }  if ((e.flag & 8) == 0) {    if (e.size != def.getBytesRead()) {      throw new ZipException("invalid entry size (expected " + e.size + " but got "+ def.getBytesRead()+ " bytes)");    }    if (e.csize != def.getBytesWritten()) {      throw new ZipException("invalid entry compressed size (expected " + e.csize + " but got "+ def.getBytesWritten()+ " bytes)");    }    if (e.crc != crc.getValue()) {      throw new ZipException("invalid entry CRC-32 (expected 0x" + Long.toHexString(e.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");    }  } else {    e.size=def.getBytesRead();    e.csize=def.getBytesWritten();    e.crc=crc.getValue();    writeEXT(e);  }def.reset();written+=e.csize;break;case STORED:if (e.size != written - locoff) {throw new ZipException("invalid entry size (expected " + e.size + " but got "+ (written - locoff)+ " bytes)");}if (e.crc != crc.getValue()) {throw new ZipException("invalid entry crc-32 (expected 0x" + Long.toHexString(e.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");}break;default :throw new ZipException("invalid compression method");}crc.reset();current=null;}}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  private static byte convertHexEncodedUtf8To16BitChars(byte[] bytes,int i){  byte b;  byte escapedByte1=bytes[i + 1];switch (escapedByte1) {case '0':    b=(byte)0x00;  break;case '1':b=(byte)0x10;break;case '2':b=(byte)0x20;break;case '3':b=(byte)0x30;break;case '4':b=(byte)0x40;break;case '5':b=(byte)0x50;break;case '6':b=(byte)0x60;break;case '7':b=(byte)0x70;break;case '8':b=(byte)0x80;break;case '9':b=(byte)0x90;break;case 'a':case 'A':b=(byte)0xA0;break;case 'b':case 'B':b=(byte)0xB0;break;case 'c':case 'C':b=(byte)0xC0;break;case 'd':case 'D':b=(byte)0xD0;break;case 'e':case 'E':b=(byte)0xE0;break;case 'f':case 'F':b=(byte)0xF0;break;default :throw new RuntimeException("Unexpected byte: " + escapedByte1);}byte escapedByte2=bytes[i + 2];switch (escapedByte2) {case '0':break;case '1':b|=0x01;break;case '2':b|=0x02;break;case '3':b|=0x03;break;case '4':b|=0x04;break;case '5':b|=0x05;break;case '6':b|=0x06;break;case '7':b|=0x07;break;case '8':b|=0x08;break;case '9':b|=0x09;break;case 'a':case 'A':b|=0x0A;break;case 'b':case 'B':b|=0x0B;break;case 'c':case 'C':b|=0x0C;break;case 'd':case 'D':b|=0x0D;break;case 'e':case 'E':b|=0x0E;break;case 'f':case 'F':b|=0x0F;break;default :throw new RuntimeException("Unexpected byte: " + escapedByte2);}return b;}  }
class C{  public IdSearchControl(){}  }
class C{  public void finish() throws IOException {  ensureOpen();  flush();  if (usesDefaultInflater) {    inf.end();  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.RoleDescriptorElement createRoleDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.RoleDescriptorElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryResponseType createQueryResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryResponseTypeImpl();}  }
class C{  private Policy(String policyName,int priority) throws InvalidNameException {  validateName(policyName);  this.policyName=policyName;  this.priority=priority;}  }
class C{  protected void vmInfo(PrintWriter writer,StringManager smClient,Enumeration<Locale> requestedLocales){  writer.println(smClient.getString("managerServlet.vminfo"));  writer.print(Diagnostics.getVMInfo(requestedLocales));}  }
class C{  private StateCircleConstrut(PlaPointFloat p_location,StateInteractive p_parent_state,IteraBoard p_board_handling,Actlog p_logfile){  super(p_parent_state,p_board_handling,p_logfile);  circle_center=p_location;  actlog_start_scope(LogfileScope.CREATING_CIRCLE,p_location);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToClientManagerView();}  }
class C{  void parseParameters(){  if (parsedParams) {    return;  }  parameters=new ParameterMap<>();  parameters.putAll(getRequest().getParameterMap());  mergeParameters();  ((ParameterMap<String,String[]>)parameters).setLocked(true);  parsedParams=true;}  }
class C{  private boolean passesLucasLehmer(){  BigInteger thisPlusOne=this.add(ONE);  int d=5;  while (jacobiSymbol(d,this) != -1) {    d=(d < 0) ? Math.abs(d) + 2 : -(d + 2);  }  BigInteger u=lucasLehmerSequence(d,thisPlusOne,this);  return u.mod(this).equals(ZERO);}  }
class C{  public static BindRule decode(String input) throws AciException {  if (input == null || input.length() == 0) {    return null;  }  String bindruleStr=input.trim();  char firstChar=bindruleStr.charAt(0);  char[] bindruleArray=bindruleStr.toCharArray();  if (firstChar == '(') {    BindRule bindrule_1=null;    int currentPos;    int numOpen=0;    int numClose=0;    for (currentPos=0; currentPos < bindruleArray.length; currentPos++) {      if (bindruleArray[currentPos] == '(') {        numOpen++;      } else       if (bindruleArray[currentPos] == ')') {        numClose++;      }      if (numClose == numOpen) {        String bindruleStr1=bindruleStr.substring(1,currentPos);        bindrule_1=BindRule.decode(bindruleStr1);        break;      }    }    if (numOpen > numClose) {      throw new AciException(WARN_ACI_SYNTAX_BIND_RULE_MISSING_CLOSE_PAREN.get(input));    }    if (currentPos < bindruleArray.length - 1) {      String remainingBindruleStr=bindruleStr.substring(currentPos + 1);      return createBindRule(bindrule_1,remainingBindruleStr);    }    return bindrule_1;  } else {    StringBuilder b=new StringBuilder(bindruleStr);    boolean negate=determineNegation(b);    bindruleStr=b.toString();    Pattern bindrulePattern=Pattern.compile(bindruleRegex);    Matcher bindruleMatcher=bindrulePattern.matcher(bindruleStr);    int bindruleEndIndex;    if (bindruleMatcher.find()) {      bindruleEndIndex=bindruleMatcher.end();      BindRule bindrule_1=parseAndCreateBindrule(bindruleMatcher);      bindrule_1.setNegate(negate);      if (bindruleEndIndex < bindruleStr.length()) {        String remainingBindruleStr=bindruleStr.substring(bindruleEndIndex);        return createBindRule(bindrule_1,remainingBindruleStr);      } else {        return bindrule_1;      }    } else {      throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_SYNTAX.get(input));    }  }}  }
class C{  public BackendMonitorTestCase() throws Exception {  super(null);}  }
class C{  public static void unbind(String name) throws RemoteException, NotBoundException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  registry.unbind(parsed.name);}  }
class C{  public void write(int c){  try {synchronized (lock) {      ensureOpen();      out.write(c);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public final boolean shares_net_no(int[] p_net_no_arr){  for (  int want_net_no : p_net_no_arr) {    if (has_net_no(want_net_no))     return true;  }  return false;}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  private void playPitFallSeq(){  if (xVel != 0) {    xVel=0;    sideCollidePush=0;    sMario.removeEvents();    spriteFrame.setTranslateY(HEIGHT + 20);  } else   if (sideCollidePush > -1 && sideCollidePush++ > 50) {    Main.marioPitFall.play();    sideCollidePush=-1;  } else   if (sideCollidePush == -1 && !Main.marioPitFall.isPlaying())   sMario.getGameLoop().stop(true);}  }
class C{  private void addPaths(String parentPath,List<ServiceSchema> schemaPath,ServiceSchema schema,ServiceSchema dynamicSchema,Map<SmsRouteTree,Set<RouteMatcher<Request>>> serviceRoutes,Pattern ignoredRoutes,SmsRouteTree routeTree) throws SMSException {  String schemaName=schema.getResourceName();  String path=updatePaths(parentPath,schemaName,schemaPath,schema);  SmsRouteTree subtree=routeTree;  if (!schema.getAttributeSchemas().isEmpty() || schema.supportsMultipleConfigurations()) {    if (schema.supportsMultipleConfigurations() && !excludeCollection(schema.getServiceName())) {      RequestHandler handler=newCollection(collectionProviderFactory.create(new SmsJsonConverter(schema),schema,schemaType,new ArrayList<>(schemaPath),parentPath,true));      debug.message("Adding collection path {}",path);      subtree=addRoute(schema,STARTS_WITH,path,handler,ignoredRoutes,routeTree,serviceRoutes);      parentPath="/{" + schemaName + "}";    } else     if (!excludeSingleton(schema.getServiceName())) {      RequestHandler handler=newAnnotatedRequestHandler(singletonProviderFactory.create(new SmsJsonConverter(schema),schema,dynamicSchema,schemaType,new ArrayList<>(schemaPath),parentPath,true));      debug.message("Adding singleton path {}",path);      subtree=addRoute(schema,EQUALS,path,handler,ignoredRoutes,routeTree,serviceRoutes);      parentPath="";    }  }  addPaths(parentPath,schemaPath,schema,serviceRoutes,ignoredRoutes,subtree);}  }
class C{  public FacebookAuthorizationException(String message){  super(message);}  }
class C{  public static ByteBuffer expand(ByteBuffer in,int newSize){  if (in.capacity() >= newSize) {    return in;  }  ByteBuffer out;  boolean direct=false;  if (in.isDirect()) {    out=ByteBuffer.allocateDirect(newSize);    direct=true;  } else {    out=ByteBuffer.allocate(newSize);  }  in.flip();  out.put(in);  if (direct) {    cleanDirectBuffer(in);  }  return out;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode22.class,args);}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public void testLongValueNegative1(){  byte aBytes[]={12,-1,100,-2,-76,-128,45,91,3};  long result=-43630045168837885L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public int next(){  if (_startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == _startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ReInviteTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public SslRMIServerSocketFactory(SSLContext context,String[] enabledCipherSuites,String[] enabledProtocols,boolean needClientAuth) throws IllegalArgumentException {  this.enabledCipherSuites=enabledCipherSuites == null ? null : enabledCipherSuites.clone();  this.enabledProtocols=enabledProtocols == null ? null : enabledProtocols.clone();  this.needClientAuth=needClientAuth;  this.context=context;  final SSLSocketFactory sslSocketFactory=context == null ? getDefaultSSLSocketFactory() : context.getSocketFactory();  SSLSocket sslSocket=null;  if (this.enabledCipherSuites != null || this.enabledProtocols != null) {    try {      sslSocket=(SSLSocket)sslSocketFactory.createSocket();    } catch (    Exception e) {      final String msg="Unable to check if the cipher suites " + "and protocols to enable are supported";      throw (IllegalArgumentException)new IllegalArgumentException(msg).initCause(e);    }  }  if (this.enabledCipherSuites != null) {    sslSocket.setEnabledCipherSuites(this.enabledCipherSuites);    enabledCipherSuitesList=Arrays.asList(this.enabledCipherSuites);  }  if (this.enabledProtocols != null) {    sslSocket.setEnabledProtocols(this.enabledProtocols);    enabledProtocolsList=Arrays.asList(this.enabledProtocols);  }}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return org.omg.CORBA.ORB.init().get_primitive_tc(TCKind.tk_objref);}  }
class C{  protected static void delete(File file) throws IOException {  if (file.isDirectory()) {    if (file.list().length == 0) {      file.delete();      System.out.println("Directory is deleted : " + file.getAbsolutePath());    } else {      String files[]=file.list();      for (      String temp : files) {        File fileDelete=new File(file,temp);        delete(fileDelete);      }      if (file.list().length == 0) {        file.delete();        System.out.println("Directory is deleted : " + file.getAbsolutePath());      }    }  } else {    file.delete();    System.out.println("File is deleted : " + file.getAbsolutePath());  }}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  super.endCompose(sroot);  m_frameSize=cstate.getFrameSize();  cstate.resetStackFrameSize();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EntitiesDescriptorElement createEntitiesDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EntitiesDescriptorElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.DoNotCacheConditionType createDoNotCacheConditionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.DoNotCacheConditionTypeImpl();}  }
class C{  public void doInitBody() throws JspException {}  }
class C{  public Component add(Component c){  ensurePopupMenuCreated();  popupMenu.add(c);  return c;}  }
class C{  public Set<String> objectsChanged(int time) throws RemoteException {  initializeCacheSize();  Set<String> answer=collectChangesFromCache(time,cache);  if (debug.messageEnabled()) {    debug.message("DirectoryManagerImpl:objectsChanged in time: " + time + "+2 minutes:\n"+ answer);  }  return answer;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  @Override public boolean isRequestedSessionIdValid(){  return this._getHttpServletRequest().isRequestedSessionIdValid();}  }
class C{  public AuthenticatorResult authenticate(String username,String password,Context context) throws ResourceException {  Reject.ifNull(username,"Provided username was null");  Reject.ifNull(context,"Router context was null");  final CryptoService cryptoService=cryptoServiceProvider.get();  if (cryptoService == null) {    throw new InternalServerErrorException("No CryptoService available");  }  final ResourceResponse resource=getResource(username,context);  if (resource != null) {    if (cryptoService.isHashed(resource.getContent().get(userCredentialProperty))) {      try {        if (cryptoService.matches(password,resource.getContent().get(userCredentialProperty))) {          return AuthenticatorResult.authenticationSuccess(resource);        }      } catch (      JsonCryptoException jce) {        throw new InternalServerErrorException(jce.getMessage(),jce);      }    } else {      final UserInfo userInfo=getRepoUserInfo(username,resource);      if (userInfo == null) {        return AuthenticatorResult.FAILED;      } else       if (userInfo.checkCredential(password)) {        logger.debug("Authentication succeeded for {}",username);        return AuthenticatorResult.authenticationSuccess(resource);      }    }  }  logger.debug("Authentication failed for {} due to invalid credentials",username);  return AuthenticatorResult.FAILED;}  }
class C{  @Override public boolean equals(Object otherRule){  if (otherRule == this) {    return true;  }  if (otherRule instanceof ZoneOffsetTransitionRule) {    ZoneOffsetTransitionRule other=(ZoneOffsetTransitionRule)otherRule;    return month == other.month && dom == other.dom && dow == other.dow && timeDefinition == other.timeDefinition && time.equals(other.time) && timeEndOfDay == other.timeEndOfDay && standardOffset.equals(other.standardOffset) && offsetBefore.equals(other.offsetBefore) && offsetAfter.equals(other.offsetAfter);  }  return false;}  }
class C{  public static boolean isAPKFile(String file){  file=file.substring(file.lastIndexOf("/") + 1);  if (file.indexOf(".") > -1)   file=file.substring(file.lastIndexOf(".") + 1);  return file.equalsIgnoreCase("apk");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ObjectType createObjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ObjectTypeImpl();}  }
class C{  public String addListener(ServiceListener listener){  return (orgConfigImpl.addListener(listener));}  }
class C{  public void testConstructorBytesPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void clear(){synchronized (lock) {    map.clear();    bytesCount=0;  }}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  Values(){  initializeTable(INITIAL_SIZE);  this.size=0;  this.tombstones=0;}  }
class C{  ExportJob(LDIFExportConfig exportConfig){  this.exportConfig=exportConfig;}  }
class C{  public File createHistoryBackupDirectory() throws IOException {  File backupDirectory=new File(getHistoryDirectory(),Long.toString(System.currentTimeMillis()));  if (backupDirectory.exists()) {    backupDirectory.delete();  }  if (!backupDirectory.mkdirs()) {    throw new IOException("failed to create history backup directory");  }  return backupDirectory;}  }
class C{  public void addResourceTypeUuid(final String resourceTypeUuid){  this.resourceTypeUuids.add(resourceTypeUuid);}  }
class C{  private void buildNewArray(MethodVisitor methodVisitor,CodeInfo info,Ins.NewArray newArray){  buildPrimitive(methodVisitor,info,newArray.count());  methodVisitor.visitIntInsn(Opcodes.NEWARRAY,newArray.mode());  int i=0;  for (  Value v : newArray.initValues()) {    methodVisitor.visitInsn(Opcodes.DUP);    info.push(CodeInfo.Size._1);    methodVisitor.visitLdcInsn(i);    info.push(CodeInfo.Size._1);    buildValueAccess(methodVisitor,info,v,true);    methodVisitor.visitInsn(newArray.storeMode());    info.pop(3);    ++i;  }}  }
class C{  protected <T>Handler<AsyncResult<T>> resultHandler(RoutingContext context){  return null;}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public static int calculateLevelColor(int baseColor,int level){  return Color.rgb(calculateR(Color.red(baseColor),level),calculateG(Color.green(baseColor),level),calculateB(Color.blue(baseColor),level));}  }
class C{  public void recordAbstractMethodsForOverrideCheck_interface(SInterfaceDef i,List<SMethodDef> abstractMethods,List<SMethodDef> visitedMethods,Set<SInterfaceDef> visitedType) throws SyntaxException {  if (visitedType.add(i)) {    for (    SMethodDef m : i.methods()) {      if (m.modifiers().contains(SModifier.ABSTRACT)) {        if (null == findMethodWithSameSignature(m,visitedMethods,true)) {          abstractMethods.add(m);        }      }      visitedMethods.add(m);    }    for (    SInterfaceDef ii : i.superInterfaces()) {      recordAbstractMethodsForOverrideCheck_interface(ii,abstractMethods,visitedMethods,visitedType);    }  }}  }
class C{  public Builder removeAllOptionalAttributes(){  this.optionalAttributes.clear();  return this;}  }
class C{  public boolean shouldSleep(){  final OffsetDateTime lastKnownAction=this.getLatestMarketplaceAction();  final boolean hasUnactionableLoans=!this.getUnactionableLoans().isEmpty();  Activity.LOGGER.debug("Marketplace last checked on {}, has un-actionable loans: {}.",lastKnownAction,hasUnactionableLoans);  boolean shouldSleep=true;  if (!this.marketplace.getLoansNewerThan(lastKnownAction).isEmpty()) {    Activity.LOGGER.debug("Will not sleep due to new loans.");    shouldSleep=false;  } else   if (lastKnownAction.plus(sleepIntervalInMinutes,ChronoUnit.MINUTES).isBefore(OffsetDateTime.now())) {    Activity.LOGGER.debug("Will not sleep due to already sleeping too much.");    shouldSleep=false;  }synchronized (this) {    if (this.settler != null) {      Activity.LOGGER.warn("Scrapping unsettled activity.");    }    if (!shouldSleep || hasUnactionableLoans) {      this.settler=null;    } else {      this.settler=null;    }  }  return shouldSleep;}  }
class C{  public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass()))   return false; else   if (matchObj == this)   return true;  SIPRequest that=(SIPRequest)matchObj;  RequestLine rline=that.requestLine;  if (this.requestLine == null && rline != null)   return false; else   if (this.requestLine == rline)   return super.match(matchObj);  return requestLine.match(that.requestLine) && super.match(matchObj);}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  private void removeSubentry(Entry entry){  lock.writeLock().lock();  try {    if (!removeSubEntry(dn2SubEntry,entry)) {      removeSubEntry(dn2CollectiveSubEntry,entry);    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public void valueChanged(TreeSelectionEvent tse){  try {    TreePath path=profileTree.getSelectionPath();    if (path == null) {      frameInfoPane.setText("");      return;    }    DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)path.getLastPathComponent();    if (selectedNode == null) {      frameInfoPane.setText("");      return;    }    Object selectedObject=selectedNode.getUserObject();    if (!(selectedObject instanceof ProfileStackFrame)) {      frameInfoPane.setText("");      return;    }    ProfileStackFrame frame=(ProfileStackFrame)selectedObject;    StringBuilder html=new StringBuilder();    html.append("<HTML><BODY><PRE>");    html.append("Information for stack frame <B>");    html.append(frame.getClassName());    html.append(".");    html.append(frame.getHTMLSafeMethodName());    html.append("</B><BR><BR>Occurrences by Source Line Number:<BR>");    HashMap<Integer,Long> lineNumbers=frame.getLineNumbers();    for (    Integer lineNumber : lineNumbers.keySet()) {      html.append("     ");      long count=lineNumbers.get(lineNumber);      if (lineNumber == ProfileStack.LINE_NUMBER_NATIVE) {        html.append("&lt;native&gt;");      } else       if (lineNumber == ProfileStack.LINE_NUMBER_UNKNOWN) {        html.append("&lt;unknown&gt;");      } else {        html.append("Line ");        html.append(lineNumber);      }      html.append(":  ");      html.append(count);      if (count == 1) {        html.append(" occurrence<BR>");      } else {        html.append(" occurrences<BR>");      }    }    html.append("<BR><BR>");    html.append("<HR>Stack Traces Including this Method:");    String classAndMethod=frame.getClassName() + "." + frame.getMethodName();    HashMap<ProfileStack,Long> stacks=stacksByMethod.get(classAndMethod);    for (    ProfileStack stack : stacks.keySet()) {      html.append("<BR><BR>");      html.append(stacks.get(stack));      html.append(" occurrence(s):");      appendHTMLStack(stack,html,classAndMethod);    }    html.append("</PRE></BODY></HTML>");    frameInfoPane.setText(html.toString());    frameInfoPane.setSelectionStart(0);    frameInfoPane.setSelectionEnd(0);  } catch (  Exception e) {    e.printStackTrace();    frameInfoPane.setText("");  }}  }
class C{  public Document read(String database,String table,Identifier id){  verifyTable(database,table);  return docRepo.read(id);}  }
class C{  public ReadOnlyFileSystemException(){}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("rect iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  coords[0]=x;  coords[1]=y;  if (index == 1 || index == 2) {    coords[0]+=w;  }  if (index == 2 || index == 3) {    coords[1]+=h;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException, InvalidObjectException {  s.defaultReadObject();  if (firstDayOfWeek == null) {    throw new InvalidObjectException("firstDayOfWeek is null");  }  if (minimalDays < 1 || minimalDays > 7) {    throw new InvalidObjectException("Minimal number of days is invalid");  }}  }
class C{  public PolicyNotificationHandler(ResourceResultCache resourceResultCache){  this.resourceResultCache=resourceResultCache;}  }
class C{  File createTemporaryFile(File file) throws IOException {  return File.createTempFile(file.getName(),".tmp",file.getParentFile());}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static Fragment3 newInstance(int sectionNumber){  Fragment3 fragment=new Fragment3();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  void updateGrid(){  if (!gridValid) {    relativeCells=false;    multiRowCells=false;    captionIndex=-1;    rows.removeAllElements();    int n=getViewCount();    for (int i=0; i < n; i++) {      View v=getView(i);      if (v instanceof RowView) {        rows.addElement((RowView)v);        RowView rv=(RowView)v;        rv.clearFilledColumns();        rv.rowIndex=rows.size() - 1;        rv.viewIndex=i;      } else {        Object o=v.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);        if (o instanceof HTML.Tag) {          HTML.Tag kind=(HTML.Tag)o;          if (kind == HTML.Tag.CAPTION) {            captionIndex=i;          }        }      }    }    int maxColumns=0;    int nrows=rows.size();    for (int row=0; row < nrows; row++) {      RowView rv=getRow(row);      int col=0;      for (int cell=0; cell < rv.getViewCount(); cell++, col++) {        View cv=rv.getView(cell);        if (!relativeCells) {          AttributeSet a=cv.getAttributes();          CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(CSS.Attribute.WIDTH);          if ((lv != null) && (lv.isPercentage())) {            relativeCells=true;          }        }        for (; rv.isFilled(col); col++)         ;        int rowSpan=getRowsOccupied(cv);        if (rowSpan > 1) {          multiRowCells=true;        }        int colSpan=getColumnsOccupied(cv);        if ((colSpan > 1) || (rowSpan > 1)) {          int rowLimit=row + rowSpan;          int colLimit=col + colSpan;          for (int i=row; i < rowLimit; i++) {            for (int j=col; j < colLimit; j++) {              if (i != row || j != col) {                addFill(i,j);              }            }          }          if (colSpan > 1) {            col+=colSpan - 1;          }        }      }      maxColumns=Math.max(maxColumns,col);    }    columnSpans=new int[maxColumns];    columnOffsets=new int[maxColumns];    columnRequirements=new SizeRequirements[maxColumns];    for (int i=0; i < maxColumns; i++) {      columnRequirements[i]=new SizeRequirements();      columnRequirements[i].maximum=Integer.MAX_VALUE;    }    gridValid=true;  }}  }
class C{  private GF256(int primitive){  expTable=new int[256];  logTable=new int[256];  int x=1;  for (int i=0; i < 256; i++) {    expTable[i]=x;    x<<=1;    if (x >= 0x100) {      x^=primitive;    }  }  for (int i=0; i < 255; i++) {    logTable[expTable[i]]=i;  }  zero=new GF256Poly(this,new int[]{0});  one=new GF256Poly(this,new int[]{1});}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);  for (int i=0, size=size(); i < size; i++) {    result.add(name(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  public boolean is_start_info(){  return start_info;}  }
class C{  private void writeStartMask(int mask) throws IOException {  if (mask != 0) {    if ((mask & UNDERLINE) != 0) {      write("<u>");    }    if ((mask & ITALIC) != 0) {      write("<i>");    }    if ((mask & BOLD) != 0) {      write("<b>");    }  }}  }
class C{  public static long currentUnixTime(){  Calendar calendar=getCalendarInstance();  calendar.setTimeInMillis(currentTimeMillis());  return toUnixTime(calendar);}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  templateValue.append(templateFile.getLastName());  return TagResult.SUCCESS_RESULT;}  }
class C{  public String createNameIdentifier(){  try {    FSUtils.debug.message("NameIdentifierImpl.createNameIdentifier: Called");    byte[] handleBytes=new byte[21];    randomGenerator.nextBytes(handleBytes);    if (handleBytes == null) {      FSUtils.debug.error("NameIdentifierImpl.createNameIdentifier:" + "Could not generate random handle");      return null;    }    String handle=Base64.encode(handleBytes);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("NameIdentifierImpl.createNameIdentifier:" + " String: " + handle);    }    return handle;  } catch (  Exception exp) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("NameIdentifierImpl.createNameIdentifier:" + " Exception during proccessing request ",exp);    }    return null;  }}  }
class C{  protected OpenDsException(Throwable cause){  this(null,cause);}  }
class C{  public byte[] readCffFont() throws java.io.IOException {  if (!isCff()) {    return null;  }  RandomAccessFileOrArray rf2=null;  try {    rf2=raf.createView();    rf2.seek(cffOffset);    byte[] cff=new byte[cffLength];    rf2.readFully(cff);    return cff;  }  finally {    try {      if (rf2 != null) {        rf2.close();      }    } catch (    Exception ignored) {    }  }}  }
class C{  @Override public int hashCode(){  return (displayType == null) ? 0 : displayType.hashCode();}  }
class C{  public Attribute createAttribute(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE,elem);  if (obj == null) {    return new AttributeImpl(elem);  } else {    return (Attribute)obj;  }}  }
class C{  public boolean append(freert.planar.PlaPointFloat p_point){  freert.planar.PlaPointFloat transformed_point=coordinate_transform.board_to_user(p_point);  return append(transformed_point.to_string(board_frame.get_locale()));}  }
class C{  @Override public String toString(){synchronized (lock) {    return buf.toString();  }}  }
class C{  private void siftUp(int k,E x){  if (comparator != null)   siftUpUsingComparator(k,x); else   siftUpComparable(k,x);}  }
class C{  public String findErrorPage(int errorCode) throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  return context.findErrorPage(errorCode).toString();}  }
class C{  @Override public String format(LogRecord logRecord){  return formatMessage(logRecord);}  }
class C{  public void update(){  if (mStartDx == mTargetX) {    mX=ViewCompat.getTranslationX(mViewHolder.getSwipeView());  } else {    mX=mStartDx + mFraction * (mTargetX - mStartDx);  }  if (mStartDy == mTargetY) {    mY=ViewCompat.getTranslationY(mViewHolder.getSwipeView());  } else {    mY=mStartDy + mFraction * (mTargetY - mStartDy);  }}  }
class C{  public EntryChangeNotificationControl(boolean isCritical,PersistentSearchChangeType changeType,long changeNumber){  super(OID_ENTRY_CHANGE_NOTIFICATION,isCritical);  this.changeType=changeType;  this.changeNumber=changeNumber;  previousDN=null;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  int s=getImportCount();  for (int j=0; j < s; j++) {    getImport(j).callVisitors(visitor);  }  s=getIncludeCount();  for (int j=0; j < s; j++) {    getInclude(j).callVisitors(visitor);  }  s=getOutputCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getOutput(j));  }  s=getAttributeSetCount();  for (int j=0; j < s; j++) {    ElemAttributeSet attrSet=getAttributeSet(j);    if (visitor.visitTopLevelInstruction(attrSet)) {      attrSet.callChildVisitors(visitor);    }  }  s=getDecimalFormatCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getDecimalFormat(j));  }  s=getKeyCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getKey(j));  }  s=getNamespaceAliasCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getNamespaceAlias(j));  }  s=getTemplateCount();  for (int j=0; j < s; j++) {    try {      ElemTemplate template=getTemplate(j);      if (visitor.visitTopLevelInstruction(template)) {        template.callChildVisitors(visitor);      }    } catch (    TransformerException te) {      throw new org.apache.xml.utils.WrappedRuntimeException(te);    }  }  s=getVariableOrParamCount();  for (int j=0; j < s; j++) {    ElemVariable var=getVariableOrParam(j);    if (visitor.visitTopLevelVariableOrParamDecl(var)) {      var.callChildVisitors(visitor);    }  }  s=getStripSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getStripSpace(j));  }  s=getPreserveSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getPreserveSpace(j));  }  if (null != m_NonXslTopLevel) {    java.util.Enumeration elements=m_NonXslTopLevel.elements();    while (elements.hasMoreElements()) {      ElemTemplateElement elem=(ElemTemplateElement)elements.nextElement();      if (visitor.visitTopLevelInstruction(elem)) {        elem.callChildVisitors(visitor);      }    }  }}  }
class C{  public PageRanges(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Page value < 1 specified");  }}  }
class C{  public SQLFeatureNotSupportedException(String reason){  super(reason,null,0);}  }
class C{  public Builder(ManagedObjectDefinition<C,S> definition){  this.definition=definition;}  }
class C{  public void paintFormattedTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  public static String formatDateTimeStringForEquivalentCommand(final Date date){  if (date != null) {    final SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_LOCAL_TIME);    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));    return dateFormat.format(date);  }  return null;}  }
class C{  @Override public void run(){  SocketList localAddList=new SocketList(getMaxConnections());  SocketList localCloseList=new SocketList(getMaxConnections());  while (pollerRunning) {    while (pollerRunning && connectionCount.get() < 1 && addList.size() < 1 && closeList.size() < 1) {      try {        if (getSoTimeout() > 0 && pollerRunning) {          maintain();        }synchronized (this) {          if (addList.size() < 1 && closeList.size() < 1) {            this.wait(10000);          }        }      } catch (      InterruptedException e) {      }catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);        getLog().warn(sm.getString("endpoint.timeout.err"));      }    }    if (!pollerRunning) {      break;    }    try {synchronized (this) {        if (closeList.size() > 0) {          closeList.duplicate(localCloseList);          closeList.clear();        } else {          localCloseList.clear();        }      }synchronized (this) {        if (addList.size() > 0) {          addList.duplicate(localAddList);          addList.clear();        } else {          localAddList.clear();        }      }      if (localCloseList.size() > 0) {        SocketInfo info=localCloseList.get();        while (info != null) {          localAddList.remove(info.socket);          removeFromPoller(info.socket);          destroySocket(info.socket);          info=localCloseList.get();        }      }      if (localAddList.size() > 0) {        SocketInfo info=localAddList.get();        while (info != null) {          if (log.isDebugEnabled()) {            log.debug(sm.getString("endpoint.debug.pollerAddDo",Long.valueOf(info.socket)));          }          timeouts.remove(info.socket);          AprSocketWrapper wrapper=connections.get(Long.valueOf(info.socket));          if (wrapper == null) {            continue;          }          if (info.read() || info.write()) {            wrapper.pollerFlags=wrapper.pollerFlags | (info.read() ? Poll.APR_POLLIN : 0) | (info.write() ? Poll.APR_POLLOUT : 0);            removeFromPoller(info.socket);            if (!addToPoller(info.socket,wrapper.pollerFlags)) {              closeSocket(info.socket);            } else {              timeouts.add(info.socket,System.currentTimeMillis() + info.timeout);            }          } else {            closeSocket(info.socket);            getLog().warn(sm.getString("endpoint.apr.pollAddInvalid",info));          }          info=localAddList.get();        }      }      for (int i=0; i < pollers.length; i++) {        boolean reset=false;        int rv=0;        if (pollerSpace[i] < actualPollerSize) {          rv=Poll.poll(pollers[i],nextPollerTime,desc,true);          nextPollerTime=pollerTime;        } else {          nextPollerTime+=pollerTime;        }        if (rv > 0) {          rv=mergeDescriptors(desc,rv);          pollerSpace[i]+=rv;          connectionCount.addAndGet(-rv);          for (int n=0; n < rv; n++) {            long timeout=timeouts.remove(desc[n * 2 + 1]);            AprSocketWrapper wrapper=connections.get(Long.valueOf(desc[n * 2 + 1]));            if (getLog().isDebugEnabled()) {              log.debug(sm.getString("endpoint.debug.pollerProcess",Long.valueOf(desc[n * 2 + 1]),Long.valueOf(desc[n * 2])));            }            wrapper.pollerFlags=wrapper.pollerFlags & ~((int)desc[n * 2]);            if (((desc[n * 2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP) || ((desc[n * 2] & Poll.APR_POLLERR) == Poll.APR_POLLERR) || ((desc[n * 2] & Poll.APR_POLLNVAL) == Poll.APR_POLLNVAL)) {              if ((desc[n * 2] & Poll.APR_POLLIN) == Poll.APR_POLLIN) {                if (!processSocket(desc[n * 2 + 1],SocketEvent.OPEN_READ)) {                  closeSocket(desc[n * 2 + 1]);                }              } else               if ((desc[n * 2] & Poll.APR_POLLOUT) == Poll.APR_POLLOUT) {                if (!processSocket(desc[n * 2 + 1],SocketEvent.OPEN_WRITE)) {                  closeSocket(desc[n * 2 + 1]);                }              } else               if ((wrapper.pollerFlags & Poll.APR_POLLIN) == Poll.APR_POLLIN) {                if (!processSocket(desc[n * 2 + 1],SocketEvent.OPEN_READ)) {                  closeSocket(desc[n * 2 + 1]);                }              } else               if ((wrapper.pollerFlags & Poll.APR_POLLOUT) == Poll.APR_POLLOUT) {                if (!processSocket(desc[n * 2 + 1],SocketEvent.OPEN_WRITE)) {                  closeSocket(desc[n * 2 + 1]);                }              } else {                closeSocket(desc[n * 2 + 1]);              }            } else             if (((desc[n * 2] & Poll.APR_POLLIN) == Poll.APR_POLLIN) || ((desc[n * 2] & Poll.APR_POLLOUT) == Poll.APR_POLLOUT)) {              boolean error=false;              if (((desc[n * 2] & Poll.APR_POLLIN) == Poll.APR_POLLIN) && !processSocket(desc[n * 2 + 1],SocketEvent.OPEN_READ)) {                error=true;                closeSocket(desc[n * 2 + 1]);              }              if (!error && ((desc[n * 2] & Poll.APR_POLLOUT) == Poll.APR_POLLOUT) && !processSocket(desc[n * 2 + 1],SocketEvent.OPEN_WRITE)) {                error=true;                closeSocket(desc[n * 2 + 1]);              }              if (!error && wrapper.pollerFlags != 0) {                if (timeout > 0) {                  timeout=timeout - System.currentTimeMillis();                }                if (timeout <= 0) {                  timeout=1;                }                if (timeout > Integer.MAX_VALUE) {                  timeout=Integer.MAX_VALUE;                }                add(desc[n * 2 + 1],(int)timeout,wrapper.pollerFlags);              }            } else {              getLog().warn(sm.getString("endpoint.apr.pollUnknownEvent",Long.valueOf(desc[n * 2])));              closeSocket(desc[n * 2 + 1]);            }          }        } else         if (rv < 0) {          int errn=-rv;          if ((errn != Status.TIMEUP) && (errn != Status.EINTR)) {            if (errn > Status.APR_OS_START_USERERR) {              errn-=Status.APR_OS_START_USERERR;            }            getLog().error(sm.getString("endpoint.apr.pollError",Integer.valueOf(errn),Error.strerror(errn)));            reset=true;          }        }        if (reset && pollerRunning) {          int count=Poll.pollset(pollers[i],desc);          long newPoller=allocatePoller(actualPollerSize,pool,-1);          pollerSpace[i]=actualPollerSize;          connectionCount.addAndGet(-count);          Poll.destroy(pollers[i]);          pollers[i]=newPoller;        }      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      getLog().warn(sm.getString("endpoint.poll.error"),t);    }    try {      if (getSoTimeout() > 0 && pollerRunning) {        maintain();      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      getLog().warn(sm.getString("endpoint.timeout.err"),t);    }  }synchronized (this) {    this.notifyAll();  }}  }
class C{  private void clearCallbacks(Callback[] callbacks){  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof NameCallback) {      NameCallback nc=(NameCallback)callbacks[i];      nc.setName("");    }  }}  }
class C{  @Override public void destroy(){}  }
class C{  public void removeListener(CircularProgressViewListener listener){  listeners.remove(listener);}  }
class C{  public static BigInteger CRT(BigInteger[] congs,BigInteger[] moduli){  BigInteger prodModuli=BigInteger.ONE;  for (  BigInteger mod : moduli) {    prodModuli=prodModuli.multiply(mod);  }  BigInteger[] M=new BigInteger[moduli.length];  for (int i=0; i < moduli.length; i++) {    M[i]=prodModuli.divide(moduli[i]);  }  BigInteger retval=BigInteger.ZERO;  for (int i=0; i < moduli.length; i++) {    BigInteger tmp=extendedEuclid(moduli[i],M[i]).c;    retval=retval.add(congs[i].multiply(tmp).multiply(M[i]).mod(prodModuli));  }  return retval.mod(prodModuli);}  }
class C{  public void _read(InputStream input){  value=input.read_double();}  }
class C{  private CallVerificationStack(){}  }
class C{  private String generateAtHash(String algorithm,OAuth2Request request,OAuth2ProviderSettings providerSettings) throws ServerException {  final AccessToken accessToken=request.getToken(AccessToken.class);  if (accessToken == null) {    logger.message("at_hash generation requires an existing access_token.");    return null;  }  final String accessTokenValue=((String)accessToken.getTokenInfo().get(OAuth2Constants.Params.ACCESS_TOKEN));  return generateHash(algorithm,accessTokenValue,providerSettings);}  }
class C{  public ByteString toByteString(){  final ByteStringBuilder builder=new ByteStringBuilder(BYTE_ENCODING_LENGTH);  toByteString(builder);  return builder.toByteString();}  }
class C{  public void updateMonitConfigForLogService(){  if (SystemProperties.isServerMode() && MonitoringUtil.isRunning()) {    if (logServiceImplForMonitoring == null) {      logServiceImplForMonitoring=Agent.getLoggingSvcMBean();    }    if (logServiceImplForMonitoring == null) {      return;    }    logServiceImplForMonitoring.setSsoServerLoggingLoggers(new Integer(loggerCount));    logServiceImplForMonitoring.setSsoServerLoggingSecure(newSecurityStatus);    logServiceImplForMonitoring.setSsoServerLoggingTimeBuffering(getProperty(LogConstants.TIME_BUFFERING_STATUS));    logServiceImplForMonitoring.setSsoServerLoggingBufferSize(Long.valueOf(getProperty(LogConstants.BUFFER_SIZE)).longValue());    logServiceImplForMonitoring.setSsoServerLoggingBufferTime(Long.valueOf(getProperty(LogConstants.BUFFER_TIME)).longValue());    logServiceImplForMonitoring.setSsoServerLoggingMaxLogSize(Long.valueOf(getProperty(LogConstants.MAX_FILE_SIZE)).longValue());    logServiceImplForMonitoring.setSsoServerLoggingNumberHistoryFiles(Long.valueOf(getProperty(LogConstants.NUM_HISTORY_FILES)).longValue());    logServiceImplForMonitoring.setSsoServerLoggingLocation(getProperty(LogConstants.LOG_LOCATION));    logServiceImplForMonitoring.setSsoServerLoggingType(getProperty(LogConstants.BACKEND));    logServiceImplForMonitoring.setSsoServerLoggingRecsRejected((long)0);    isMonitoringInit=true;  }}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public void alist_append_to(PlaLineIntAlist dest,int src_pos){  int poly_len=plaline_len();  for (int index=src_pos; index < poly_len; index++)   dest.add(plaline(index));}  }
class C{  public PasswordPolicyException(IdRepoException e,Object[] args){  super(IdRepoBundle.BUNDLE_NAME,e.getErrorCode(),e.getLDAPErrorCode(),args);}  }
class C{  public void trimToSize(){  if (count < value.length) {    char[] newValue=new char[count];    System.arraycopy(value,0,newValue,0,count);    value=newValue;    shared=false;  }}  }
class C{  public Version addQualifier(String qualifier){  List<String> newQualifiers=new ArrayList<>(this.qualifiers);  newQualifiers.add(qualifier);  return new Version(major,minor,patch,newQualifiers.toArray(new String[newQualifiers.size()]));}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public synchronized BukkitTask runTask(Plugin plugin) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTask(plugin,(Runnable)this));}  }
class C{  public SoftBevelBorder(int bevelType){  super(bevelType);}  }
class C{  public ServerError(String s,Error err){  super(s,err);}  }
class C{  final void toString(StringBuilder buffer){  if (this.perm != null) {    this.perm.toString(buffer);  }  buffer.append(" ");  if (this.bindRule != null) {    this.bindRule.toString(buffer);  }  buffer.append(")");}  }
class C{  DescendantIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  int stepType=compiler.getOp(firstStepPos);  boolean orSelf=(OpCodes.FROM_DESCENDANTS_OR_SELF == stepType);  boolean fromRoot=false;  if (OpCodes.FROM_SELF == stepType) {    orSelf=true;  } else   if (OpCodes.FROM_ROOT == stepType) {    fromRoot=true;    int nextStepPos=compiler.getNextStepPos(firstStepPos);    if (compiler.getOp(nextStepPos) == OpCodes.FROM_DESCENDANTS_OR_SELF)     orSelf=true;  }  int nextStepPos=firstStepPos;  while (true) {    nextStepPos=compiler.getNextStepPos(nextStepPos);    if (nextStepPos > 0) {      int stepOp=compiler.getOp(nextStepPos);      if (OpCodes.ENDOP != stepOp)       firstStepPos=nextStepPos; else       break;    } else     break;  }  if ((analysis & WalkerFactory.BIT_CHILD) != 0)   orSelf=false;  if (fromRoot) {    if (orSelf)     m_axis=Axis.DESCENDANTSORSELFFROMROOT; else     m_axis=Axis.DESCENDANTSFROMROOT;  } else   if (orSelf)   m_axis=Axis.DESCENDANTORSELF; else   m_axis=Axis.DESCENDANT;  int whatToShow=compiler.getWhatToShow(firstStepPos);  if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_ELEMENT | DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL))   initNodeTest(whatToShow); else {    initNodeTest(whatToShow,compiler.getStepNS(firstStepPos),compiler.getStepLocalName(firstStepPos));  }  initPredicateInfo(compiler,firstStepPos);}  }
class C{  public boolean isMethodResult(){  return method != null;}  }
class C{  public double segment_distance(PlaPointFloat p_point){  PlaPointFloat projection=perpendicular_projection(p_point);  if (projection.is_contained_in_box(point_a,point_b,0.01))   return p_point.distance(projection);  return Math.min(p_point.distance(point_a),p_point.distance(point_b));}  }
class C{  private CipherSuite(String name,boolean isExportable,int keyExchange,String authType,String cipherName,String hash,byte[] code){  this.name=name;  this.keyExchange=keyExchange;  this.authType=authType;  this.isExportable=isExportable;  if (cipherName == null) {    this.cipherName=null;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  } else   if ("RC4_40".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=5;    expandedKeyMaterial=16;    effectiveKeyBytes=5;    ivSize=0;    blockSize=0;  } else   if ("RC4_128".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=0;    blockSize=0;  } else   if ("DES40_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=5;    expandedKeyMaterial=8;    effectiveKeyBytes=5;    ivSize=8;    blockSize=8;  } else   if ("DES_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=8;    expandedKeyMaterial=8;    effectiveKeyBytes=7;    ivSize=8;    blockSize=8;  } else   if ("3DES_EDE_CBC".equals(cipherName)) {    this.cipherName="DESede/CBC/NoPadding";    keyMaterial=24;    expandedKeyMaterial=24;    effectiveKeyBytes=24;    ivSize=8;    blockSize=8;  } else   if ("AES_128_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=16;    blockSize=16;  } else   if ("AES_256_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=32;    expandedKeyMaterial=32;    effectiveKeyBytes=32;    ivSize=16;    blockSize=16;  } else {    this.cipherName=cipherName;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  }  if ("MD5".equals(hash)) {    this.hmacName="HmacMD5";    this.hashName="MD5";    hashSize=16;  } else   if ("SHA".equals(hash)) {    this.hmacName="HmacSHA1";    this.hashName="SHA-1";    hashSize=20;  } else {    this.hmacName=null;    this.hashName=null;    hashSize=0;  }  cipherSuiteCode=code;  if (this.cipherName != null) {    try {      Cipher.getInstance(this.cipherName);    } catch (    GeneralSecurityException e) {      supported=false;    }  }  if (this.name.startsWith("TLS_EC")) {    supported=false;  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public RequestSecurityTokenResponse(RequestedSecurityToken token){  this(token,null);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  protected PrinterIsAcceptingJobs(int value){  super(value);}  }
class C{  public boolean beginTextOutDisplay(ChildDisplayEvent event){  return (curCallback != null) && (curCallback instanceof TextOutputCallback);}  }
class C{  public void configureReplication(ReplicationParameters parameters) throws EmbeddedDirectoryServerException {  Reject.checkNotNull(connectionParams);  int returnCode=ReplicationCliMain.mainCLI(parameters.toCommandLineArgumentsConfiguration(configParams.getConfigurationFile(),connectionParams),!isRunning(),outStream,errStream);  if (returnCode != 0) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_CONFIGURE_REPLICATION.get(configParams.getServerRootDirectory(),parameters.getReplicationPortSource(),parameters.getHostNameDestination(),parameters.getReplicationPortDestination(),returnCode));  }}  }
class C{  public void reset(){  authDebug.message("AuthContextLocal::reset() called");  loginStatus=AuthContext.Status.NOT_STARTED;  informationRequired=null;  loginException=null;}  }
class C{  private void emitJobEvent(String event,Job job,JsonObject extra){  JsonObject data=new JsonObject().put("extra",extra);  if (job != null) {    data.put("job",job.toJson());  }  eventBus.send(Kue.workerAddress("job_" + event),data);switch (event) {case "failed":case "failed_attempt":    eventBus.send(Kue.getCertainJobAddress(event,job),data);  break;case "error":eventBus.send(Kue.workerAddress("error"),data);break;default :eventBus.send(Kue.getCertainJobAddress(event,job),job.toJson());}}  }
class C{  public Collection<Investment> invest(final InvestmentStrategy strategy,final Collection<Loan> loans){  Investor.LOGGER.info("The following loans are available for robotic investing: {}.",loans.stream().map(null).collect(Collectors.toList()));  final BigDecimal minimumInvestmentAmount=BigDecimal.valueOf(InvestmentStrategy.MINIMAL_INVESTMENT_ALLOWED);  BigDecimal balance=this.initialBalance;  if (balance.compareTo(minimumInvestmentAmount) < 0) {    return Collections.emptyList();  }  Collection<Investment> investments=Investor.retrieveInvestmentsRepresentedByBlockedAmounts(this.zonkyApi);  Investor.LOGGER.debug("The following loans are coming from the API as already invested into: {}",investments.stream().map(null).collect(Collectors.toList()));  final Statistics stats=Investor.retrieveStatistics(this.zonkyApi);  Investor.LOGGER.debug("The sum total of principal remaining on active loans is {} CZK.",stats.getCurrentOverview().getPrincipalLeft());  final List<Loan> availableLoans=new ArrayList<>(loans);  final Collection<Investment> investmentsMade=new ArrayList<>();  do {    final Optional<Investment> investment=this.investOnce(strategy,availableLoans,balance,stats,investments);    if (!investment.isPresent()) {      break;    }    final Investment i=investment.get();    investmentsMade.add(i);    investments=Investor.mergeInvestments(investments,Collections.singletonList(i));    balance=balance.subtract(BigDecimal.valueOf(i.getAmount()));    Investor.LOGGER.info("New account balance is {} CZK.",balance);  } while (balance.compareTo(minimumInvestmentAmount) >= 0);  return Collections.unmodifiableCollection(investmentsMade);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobImpressionsCompleted);}  }
class C{  public static int v(String tag,Object... msg){  return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1;}  }
class C{  public SecurityPermission(String name){  super(name);}  }
class C{  public static GenericExtendedRequest copyOfGenericExtendedRequest(final GenericExtendedRequest request){  return new GenericExtendedRequestImpl(request);}  }
class C{  Map<String,Set<String>> decodeEncodedAttrs(Map<String,Set<String>> attrs){  Set<String> values=attrs.get(as.getName());  if (values == null) {    return attrs;  }  if (as.getSyntax().equals(AttributeSchema.Syntax.PASSWORD) || as.getSyntax().equals(AttributeSchema.Syntax.ENCRYPTED_PASSWORD)) {    Set<String> vals=new HashSet<>();    for (    String tString : values) {      try {        vals.add(AccessController.doPrivileged(new DecodeAction(tString)));      } catch (      Throwable e) {        debug.error("AttributeValidator: Unable to decode",e);        vals.add(tString);      }    }    attrs.put(as.getName(),vals);  }  return (attrs);}  }
class C{  private synchronized boolean isPaintingThread(){  return (Thread.currentThread() == paintThread);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  int cursor1=tmpBase;  int cursor2=base2;  int dest=base1;  System.arraycopy(a,base1,tmp,cursor1,len1);  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len2 == 0;    assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length != 0) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,0,arguments.length);    throw new InitializationException(message);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected boolean isReInvite(){  return this.reInviteFlag;}  }
class C{  public boolean isApplicable(AciTargetMatchContext matchCtx){  if (matchCtx.getExtOpOID() == null) {    return false;  }  boolean ret=isApplicable(matchCtx.getExtOpOID());  if (EnumTargetOperator.NOT_EQUALITY.equals(op)) {    return !ret;  }  return ret;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI=null;  String qualifiedName="null:xml";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      element=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateelementNS05",success);  }}  }
class C{  @Override public UniqueId send(Member[] destination,Serializable msg,int options) throws ChannelException {  return send(destination,msg,options,null);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public HashPrintJobAttributeSet(){  super(PrintJobAttribute.class);}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  protected JButton createIncreaseButton(int orientation){  increaseButton=new MetalScrollButton(orientation,scrollBarWidth,isFreeStanding);  return increaseButton;}  }
class C{  public boolean isEmpty(){  return rdns.isEmpty();}  }
class C{  public boolean hasAltitude(){  return !Double.isNaN(altitude);}  }
class C{  private List<?> internalCalculateIndex(CompositeData value){  return Collections.unmodifiableList(Arrays.asList(value.getAll(this.indexNamesArray)));}  }
class C{  public boolean isLocked(){  return isLocked;}  }
class C{  private static String parseTagValue(String parseString,String openTag,String closeTag){  int beg, end;  beg=parseString.indexOf(openTag);  end=parseString.indexOf(closeTag);  if (beg < 0 || end < 0) {    return null;  }  if (beg > end) {    return null;  }  if (beg + openTag.length() == end) {    return "";  }  return parseString.substring(beg + openTag.length(),end);}  }
class C{  public PlaPointFloat substract(PlaPointFloat p_other){  return new PlaPointFloat(v_x - p_other.v_x,v_y - p_other.v_y);}  }
class C{  public void removeElementAt(int i){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeElementAt(i);}  }
class C{  public static ConnectionFactory configureConnectionFactory(final JsonValue configuration,final String name,final TrustManager trustManager,final X509KeyManager keyManager,final ClassLoader providerClassLoader){  final JsonValue normalizedConfiguration=normalizeConnectionFactory(configuration,name,0);  return configureConnectionFactory(normalizedConfiguration,trustManager,keyManager,providerClassLoader);}  }
class C{  public static int sizeOfDouble(){  return 8;}  }
class C{  public void addStringToTable(byte[] str){  stringTable[tableIndex++]=str;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  public void evictAll(){  List<Connection> connections;synchronized (this) {    connections=new ArrayList<Connection>(this.connections);    this.connections.clear();  }  for (  Connection connection : connections) {    Util.closeQuietly(connection);  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  private TemplateFactory(Context context){  config=new Configuration();  try {    final TemplateLoader ctx=new ContextTemplateLoader(context,"clap:///");    final TemplateLoader ctl=new ClassTemplateLoader(TemplateFactory.class,"/");    final TemplateLoader[] loaders=new TemplateLoader[]{ctx,ctl};    final MultiTemplateLoader mtl=new MultiTemplateLoader(loaders);    config.setTemplateUpdateDelay(3600);    config.setTemplateLoader(mtl);    config.setSetting(Configuration.CACHE_STORAGE_KEY,"strong:20, soft:250");  } catch (  TemplateException e) {    logger.error(e.getMessage());  }}  }
class C{  public void write(int c) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  }  sink.receive(c);}  }
class C{  public void testPBEParameterSpec(){  byte[] salt={1,2,3,4,5};  int iterationCount=10;  try {    new PBEParameterSpec(null,iterationCount);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  NullPointerException e) {  }  PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + "should not cause the change of internal array.",salt[0] == pbeps.getSalt()[0]);}  }
class C{  @DataProvider(name="validData") public Object[][] createValidData(){  return new Object[][]{{"",""},{"00","AA=="},{"01","AQ=="},{"02","Ag=="},{"03","Aw=="},{"04","BA=="},{"05","BQ=="},{"06","Bg=="},{"07","Bw=="},{"0000","AAA="},{"000000","AAAA"},{"00000000","AAAAAA=="},{"000102030405060708090a0b0c0d0e0f" + "101112131415161718191a1b1c1d1e1f" + "202122232425262728292a2b2c2d2e2f"+ "303132333435363738393a3b3c3d3e3f"+ "404142434445464748494a4b4c4d4e4f"+ "505152535455565758595a5b5c5d5e5f"+ "606162636465666768696a6b6c6d6e6f"+ "707172737475767778797a7b7c7d7e7f"+ "808182838485868788898a8b8c8d8e8f"+ "909192939495969798999a9b9c9d9e9f"+ "a0a1a2a3a4a5a6a7a8a9aaabacadaeaf"+ "b0b1b2b3b4b5b6b7b8b9babbbcbdbebf"+ "c0c1c2c3c4c5c6c7c8c9cacbcccdcecf"+ "d0d1d2d3d4d5d6d7d8d9dadbdcdddedf"+ "e0e1e2e3e4e5e6e7e8e9eaebecedeeef"+ "f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff","AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4v" + "MDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5f" + "YGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6P"+ "kJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/"+ "wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v"+ "8PHy8/T19vf4+fr7/P3+/w=="}};}  }
class C{  public int allocateRankForNewItem(ShortcutInfo info){  int rank=getItemCount();  ArrayList<View> views=new ArrayList<View>(mFolder.getItemsInReadingOrder());  views.add(rank,null);  arrangeChildren(views,views.size(),false);  setCurrentPage(rank / mMaxItemsPerPage);  return rank;}  }
class C{  public AuthExceptionViewBean(){  super(PAGE_NAME);  exDebug.message("AuthExceptionViewBean() constructor called");  registerChildren();}  }
class C{  public static void copyAndFilterScripts(ResourceBundle bundle,Properties lookupProp) throws IOException {  String currentOS=determineOS();  String fromFilePattern=lookupProp.getProperty(currentOS + FROM_FILE);  String toFilePattern=lookupProp.getProperty(currentOS + TO_FILE);  String tempFromDir=lookupProp.getProperty(currentOS + FROM_DIR);  String tempToDir=lookupProp.getProperty(currentOS + TO_DIR);  File fromDir=new File(tempFromDir);  File toDir=new File(tempToDir);  if (toDir.isAbsolute()) {    toDir=new File(toDir.getName());  }  Properties tokens=SetupUtils.getTokens(bundle,lookupProp);  LinkedList fromFilesList=new LinkedList();  LinkedList toFilesList=new LinkedList();  SetupUtils.getFiles(fromDir,toDir,fromFilePattern,toFilePattern,fromFilesList,toFilesList);  ListIterator srcIter=fromFilesList.listIterator();  ListIterator destIter=toFilesList.listIterator();  while ((srcIter.hasNext()) && (destIter.hasNext())) {    File srcFile=(File)srcIter.next();    File destFile=(File)destIter.next();    CopyUtils.copyFile(srcFile,destFile,tokens,true,false);  }  if (!currentOS.equals(WINDOWS)) {    Process proc=Runtime.getRuntime().exec("/bin/chmod -R +x " + toDir.getName());    try {      if (proc.waitFor() != 0) {        System.out.println(bundle.getString("message.info." + "permission.scripts"));      }    } catch (    InterruptedException ex) {      System.out.println(bundle.getString("message.info." + "permission.scripts"));    }  }  System.out.println(bundle.getString("message.info.success") + " " + (new File(".")).getCanonicalPath()+ FILE_SEPARATOR+ toDir.getName());}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiButtonUI();  return MultiLookAndFeel.createUIs(mui,((MultiButtonUI)mui).uis,a);}  }
class C{  private String keyToBackupKey(BackupProtos.Key key){  return Base64.encodeToString(BackupProtos.Key.toByteArray(key),Base64.NO_WRAP);}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public void testIsSupported1() throws Throwable {  Document doc;  Element element;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  List<String> featuresXML=new ArrayList<String>();  featuresXML.add("XML");  featuresXML.add("xmL");  List<String> featuresCore=new ArrayList<String>();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",builder);  element=doc.getDocumentElement();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=element.isSupported(featureXML,version);    assertTrue("nodeissupported01_XML1",success);    success=element.isSupported(featureXML,version1);    assertTrue("nodeissupported01_XML2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=element.isSupported(featureCore,version);    assertTrue("nodeissupported01_Core1",success);    success=element.isSupported(featureCore,version1);    success=element.isSupported(featureCore,version2);    assertTrue("nodeissupported01_Core3",success);  }}  }
class C{  private int handleAEIOUY(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('A');  }  return index + 1;}  }
class C{  protected boolean isLevelEnabled(int logLevel){  return (logLevel >= currentLogLevel);}  }
class C{  public MinimalHTMLWriter(Writer w,StyledDocument doc){  super(w,doc);}  }
class C{  public void addURL(URL url){  if (!Arrays.asList(getURLs()).contains(url))   super.addURL(url);}  }
class C{  PolicyProperties() throws PolicyException {  boolean ignoreCase=true;  logName=getSystemProperty(SERVER_LOG,ignoreCase);  if ((logName == null) || (logName.length() == 0)) {    logName=DEFAULT_SERVER_LOG;    if (debug.messageEnabled()) {      debug.message("PolicyProperties:property " + SERVER_LOG + " is not specified, use default value "+ DEFAULT_SERVER_LOG);    }  } else {    if (debug.messageEnabled()) {      debug.message("PolicyProperties:logName=" + logName);    }  }  String interval=getSystemProperty(CACHE_TTL,ignoreCase);  if ((interval == null) || (interval.length() == 0)) {    throw new PolicyException(ResBundleUtils.rbName,"invalid_cache_ttl",null,null);  }  try {    cacheTtl=Integer.parseInt(interval);    cacheTtl=cacheTtl * 60 * 1000;    cleanupInterval=cacheTtl;  } catch (  NumberFormatException nfe) {    throw new PolicyException(ResBundleUtils.rbName,"invalid_cache_ttl",null,nfe);  }  if (cacheTtl <= 0) {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties():configured cacheTtl" + cacheTtl + " seconds too small");      debug.warning("PolicyProperties():setting cacheTtl as" + CACHE_TTL_DEFAULT + " minutes");    }    cacheTtl=CACHE_TTL_DEFAULT * 60 * 1000;    cleanupInterval=cacheTtl;  } else {    if (debug.messageEnabled()) {      debug.message("PolicyProperties:cacheTtl=" + (cacheTtl / 60 / 1000) + "minutes");    }  }  previousNotificationEnabledFlag=notificationEnabledFlag;  previousNotificationURL=notificationURL;  String isEnabled=getSystemProperty(NOTIFICATION_ENABLED,ignoreCase);  if ((isEnabled == null) || (isEnabled.length() == 0)) {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties:invalid value for poperty:" + NOTIFICATION_ENABLED + ":defaulting to:"+ NOTIFICATION_ENABLED_DEFAULT);    }  }  notificationEnabledFlag=Boolean.valueOf(isEnabled).booleanValue();  if (debug.messageEnabled()) {    debug.message("PolicyProperties:notificationEnabledFlag=" + notificationEnabledFlag);  }  if (notificationEnabledFlag == true) {    try {      notificationURL=WebtopNaming.getNotificationURL().toString();    } catch (    URLNotFoundException e) {      if (debug.messageEnabled()) {        debug.message("PolicyProperties:notificationURL not found",e);      }    }    if ((notificationURL == null) || (notificationURL.length() == 0)) {      throw new PolicyException(ResBundleUtils.rbName,"invalid.notificationurl",null,null);    } else {      if (debug.messageEnabled()) {        debug.message("PolicyProperties:notificationURL=" + notificationURL);      }    }  }  cacheMode=getSystemProperty(CACHE_MODE,ignoreCase);  if ((cacheMode == null) || !((cacheMode.equals(SUBTREE) || cacheMode.equals(SELF)))) {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties.init():" + CACHE_MODE + ":not defined, or invalid, defaulting to:"+ CACHE_MODE_DEFAULT);    }    cacheMode=CACHE_MODE_DEFAULT;  } else {    if (debug.messageEnabled()) {      debug.message("PolicyProperties.init():" + "cacheMode=" + cacheMode);    }  }  String status=getSystemProperty(LOGGING_LEVEL,ignoreCase);  if ((status == null) || (status.length() == 0)) {    status=DEFAULT_LOGGING_LEVEL;    if (debug.messageEnabled()) {      debug.message("PolicyProperties:property " + LOGGING_LEVEL + " is not specified, use default value "+ DEFAULT_LOGGING_LEVEL);    }  }  if (status != null) {    if (status.equalsIgnoreCase(ALLOW)) {      logActions=ALLOW;    } else     if (status.equalsIgnoreCase(DENY)) {      logActions=DENY;    } else     if (status.equalsIgnoreCase(BOTH)) {      logActions=BOTH;    } else     if (status.equalsIgnoreCase(DECISION)) {      logActions=DECISION;    } else {      logActions=NONE;    }    if (debug.messageEnabled()) {      debug.message("PolicyProperties():property:" + logActions + "=logActions");    }  }  String booleanActionValuesString=getSystemProperty(BOOLEAN_ACTION_VALUES,ignoreCase);  if (booleanActionValuesString != null) {    StringTokenizer st1=new StringTokenizer(booleanActionValuesString,COLON);    while (st1.hasMoreTokens()) {      String str=st1.nextToken();      StringTokenizer st2=new StringTokenizer(str,PIPE);      int tokenCount=st2.countTokens();      if (tokenCount != 4) {        debug.error("PolicyProperties():" + "booleanActionValues not well formed:" + booleanActionValuesString);        Object[] args={str};        throw new PolicyException(ResBundleUtils.rbName,"invalid_boolean_action_values",args,null);      } else {        String serviceName=st2.nextToken();        String actionName=st2.nextToken();        String trueValue=st2.nextToken();        String falseValue=st2.nextToken();        setBooleanActionValues(serviceName,actionName,trueValue,falseValue);      }    }  } else {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties():property:" + BOOLEAN_ACTION_VALUES + ":not defined");    }  }  String usePre22BooleanValuesString=getSystemProperty(USE_PRE22_BOOLEAN_VALUES,ignoreCase,USE_PRE22_BOOLEAN_VALUES_DEFAULT);  usePre22BooleanValues=Boolean.valueOf(usePre22BooleanValuesString).booleanValue();  if (debug.messageEnabled()) {    debug.message("PolicyProperries:usePre22BooleanValues=" + usePre22BooleanValues);  }  if (usePre22BooleanValues) {    pre22TrueValue=getSystemProperty("com.sun.identity.agents.true.value",ignoreCase,PRE22_TRUE_VALUE_DEFAULT);    if (debug.messageEnabled()) {      debug.message("PolicyProperries:pre22TrueValue=" + pre22TrueValue);      debug.message("PolicyProperries:pre22FalseValue=" + pre22FalseValue);    }  }  String resourceComparatorsString=getSystemProperty(RESOURCE_COMPARATORS,ignoreCase);  if (resourceComparatorsString != null) {    StringTokenizer st1=new StringTokenizer(resourceComparatorsString,COLON);    while (st1.hasMoreTokens()) {      String str=st1.nextToken();      setResourceComparator(str);    }  } else {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties():property:" + RESOURCE_COMPARATORS + ":not defined");    }  }  String attrs=getSystemProperty(HEADER_ATTRIBUTES,ignoreCase);  if ((attrs != null) && (attrs.length() > 0)) {    StringTokenizer st=new StringTokenizer(attrs,PIPE);    responseAttributeNames=new HashSet(st.countTokens());    while (st.hasMoreTokens()) {      responseAttributeNames.add(st.nextToken());    }  }  String clientClockSkewString=getSystemProperty(CLIENT_CLOCK_SKEW,ignoreCase);  if (clientClockSkewString == null) {    if (debug.messageEnabled()) {      debug.message("PolicyProperties.getClientClockSkew():" + CLIENT_CLOCK_SKEW + " Property not defined "+ ": defaulting to 0");    }  } else {    try {      clientClockSkew=Long.valueOf(clientClockSkewString).longValue() * 1000;      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + CLIENT_CLOCK_SKEW + " = "+ clientClockSkewString);      }    } catch (    NumberFormatException nfe) {      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + CLIENT_CLOCK_SKEW + " not a long number"+ ": defaulting to 0",nfe);      }    }  }  String resultsCacheSessionCapString=getSystemProperty(RESULTS_CACHE_SESSION_CAP,ignoreCase);  if (resultsCacheSessionCapString == null) {    if (debug.messageEnabled()) {      debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_SESSION_CAP + " Property not defined "+ ": defaulting to "+ DEFAULT_RESULTS_CACHE_SESSION_CAP);    }    resultsCacheSessionCap=DEFAULT_RESULTS_CACHE_SESSION_CAP;  } else {    try {      resultsCacheSessionCap=Integer.valueOf(resultsCacheSessionCapString).intValue();      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_SESSION_CAP + " = "+ resultsCacheSessionCap);      }    } catch (    NumberFormatException nfe) {      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_SESSION_CAP + " not a number"+ ": defaulting to "+ DEFAULT_RESULTS_CACHE_SESSION_CAP);      }      resultsCacheSessionCap=DEFAULT_RESULTS_CACHE_SESSION_CAP;    }  }  String resultsCacheResourceCapString=getSystemProperty(RESULTS_CACHE_RESOURCE_CAP,ignoreCase);  if (resultsCacheResourceCapString == null) {    if (debug.messageEnabled()) {      debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_RESOURCE_CAP + " Property not defined "+ ": defaulting to "+ DEFAULT_RESULTS_CACHE_RESOURCE_CAP);    }    resultsCacheResourceCap=DEFAULT_RESULTS_CACHE_RESOURCE_CAP;  } else {    try {      resultsCacheResourceCap=Integer.valueOf(resultsCacheResourceCapString).intValue();      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_RESOURCE_CAP + " = "+ resultsCacheResourceCap);      }    } catch (    NumberFormatException nfe) {      if (debug.messageEnabled()) {        debug.message("PolicyProperties.constructor():" + RESULTS_CACHE_RESOURCE_CAP + " not a number"+ ": defaulting to "+ DEFAULT_RESULTS_CACHE_RESOURCE_CAP);      }      resultsCacheResourceCap=DEFAULT_RESULTS_CACHE_RESOURCE_CAP;    }  }  String useRESTProtocolString=getSystemProperty(USE_REST_PROTOCOL,ignoreCase);  if ((useRESTProtocolString == null) || (useRESTProtocolString.length() == 0)) {    if (debug.warningEnabled()) {      debug.warning("PolicyProperties:invalid value for poperty:" + USE_REST_PROTOCOL + ":defaulting to:"+ USE_REST_PROTOCOL_DEFAULT);    }    useRESTProtocolString=USE_REST_PROTOCOL_DEFAULT;  }  useRESTProtocolFlag=Boolean.valueOf(useRESTProtocolString).booleanValue();  if (debug.messageEnabled()) {    debug.message("PolicyProperties:useRESTProtocolFlag=" + useRESTProtocolFlag);  }  restNotificationURL=getSystemProperty(REST_NOTIFICATION_URL,ignoreCase);  if ((restNotificationURL == null) || (restNotificationURL.length() == 0)) {    if (notificationEnabledFlag && useRESTProtocolFlag) {      if (debug.warningEnabled()) {        debug.warning("PolicyProperties:empty REST notification URL, " + "disabling notification");      }      notificationEnabledFlag=false;    } else {      if (debug.messageEnabled()) {        debug.message("PolicyProperties: restNotificationURL:" + restNotificationURL);      }    }  }  if (debug.messageEnabled()) {    debug.message("PolicyProperties():constructed");  }}  }
class C{  public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.toASN1Primitive();}  }
class C{  public AuthnQuery createAuthnQuery(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_QUERY,value);  if (obj == null) {    return new AuthnQueryImpl(value);  } else {    return (AuthnQuery)obj;  }}  }
class C{  public ExecutionException(String message){  super(message);}  }
class C{  protected void uninstallListeners(){  if (propertyChangeListener != null) {    splitPane.removePropertyChangeListener(propertyChangeListener);    propertyChangeListener=null;  }  if (focusListener != null) {    splitPane.removeFocusListener(focusListener);    focusListener=null;  }  keyboardUpLeftListener=null;  keyboardDownRightListener=null;  keyboardHomeListener=null;  keyboardEndListener=null;  keyboardResizeToggleListener=null;  handler=null;}  }
class C{  @Override public void cacheResult(List<Foo> foos){  for (  Foo foo : foos) {    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {      cacheResult(foo);    } else {      foo.resetOriginalValues();    }  }}  }
class C{  BinaryPropertyListWriter(OutputStream outStr) throws IOException {  out=new BufferedOutputStream(outStr);}  }
class C{  private void inputPanelButtonClicked(){  getDialog().getStepsPanel().updateStepVisibility(this);}  }
class C{  public boolean hasXrefStm(){  return xrefStm;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  private void initSkinLoader(){  SkinManager.getInstance().init(this);  SkinManager.getInstance().load();}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ACTION_PERFORMED:    typeStr="ACTION_PERFORMED";  break;default :typeStr="unknown type";}return typeStr + ",cmd=" + actionCommand+ ",when="+ when+ ",modifiers="+ KeyEvent.getKeyModifiersText(modifiers);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=IFSConstants.LIB_12_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("Scoping").append(uri).append(">\n");  if (proxyCount >= 0) {    xml.append("<").append(prefix).append("ProxyCount").append(">").append(proxyCount).append("</").append(prefix).append("ProxyCount").append(">\n");  }  if (idpList != null) {    xml.append(idpList.toXMLString(true,false));  }  xml.append("</").append(prefix).append("Scoping").append(">\n");  return xml.toString();}  }
class C{  private void load(){  final String path=DirectoryServer.getInstanceRoot() + File.separator + CONFIG_DIR_NAME+ File.separator+ COMPRESSED_SCHEMA_FILE_NAME;  if (!new File(path).exists()) {    return;  }  try (FileInputStream inputStream=new FileInputStream(path)){    final ASN1Reader reader=ASN1.getReader(inputStream);    reader.readStartSequence();    while (reader.hasNextElement()) {      reader.readStartSequence();      final byte[] encodedObjectClasses=reader.readOctetString().toByteArray();      final List<String> objectClassNames=new LinkedList<>();      while (reader.hasNextElement()) {        objectClassNames.add(reader.readOctetStringAsString());      }      reader.readEndSequence();      loadObjectClasses(encodedObjectClasses,objectClassNames);    }    reader.readEndSequence();    reader.readInteger();    reader.readStartSequence();    while (reader.hasNextElement()) {      reader.readStartSequence();      final byte[] encodedAttribute=reader.readOctetString().toByteArray();      final String attributeName=reader.readOctetStringAsString();      final List<String> attributeOptions=new LinkedList<>();      while (reader.hasNextElement()) {        attributeOptions.add(reader.readOctetStringAsString());      }      reader.readEndSequence();      loadAttribute(encodedAttribute,attributeName,attributeOptions);    }    reader.readEndSequence();    reader.readInteger();  } catch (  final Exception e) {    logger.traceException(e);    throw new RuntimeException(e);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {  if (guard != null)   guard.checkGuard(object);  oos.defaultWriteObject();}  }
class C{  public MapboxStaticImage(Builder builder){  HttpUrl.Builder urlBuilder=new HttpUrl.Builder().scheme("https").host("api.mapbox.com").addPathSegment("styles").addPathSegment("v1").addPathSegment(builder.getUsername()).addPathSegment(builder.getStyleId()).addPathSegment("static").addPathSegment(builder.getLocationPathSegment()).addPathSegment(builder.getSizePathSegment()).addQueryParameter("access_token",builder.getAccessToken());  if (!builder.isAttribution()) {    urlBuilder.addQueryParameter("attribution","false");  }  if (!builder.isLogo()) {    urlBuilder.addQueryParameter("logo","false");  }  url=urlBuilder.build();}  }
class C{  public boolean isPsuedoVarRef(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  @Override public Foo remove(long fooId) throws NoSuchFooException {  return remove((Serializable)fooId);}  }
class C{  private boolean isStandardTextRepresentationClass(){  return isRepresentationClassReader() || String.class.equals(representationClass) || isRepresentationClassCharBuffer()|| char[].class.equals(representationClass);}  }
class C{  public static ExternalSASLBindRequest copyOfExternalSASLBindRequest(final ExternalSASLBindRequest request){  return new ExternalSASLBindRequestImpl(request);}  }
class C{  public boolean isOptional(final AttributeType attributeType){  return isExtensibleObject || optionalAttributes.contains(attributeType);}  }
class C{  public Point dbl(Point p) throws DivisionException {  BigInteger x=p.getX();  BigInteger y=p.getY();  if (y.equals(BigInteger.ZERO)) {    throw new DivisionException("y was equal to zero");  }  BigInteger l1=((THREE.multiply(x.pow(2))).add(curve.getA()));  BigInteger l2=TWO.multiply(y).modInverse(curve.getP());  BigInteger l=l1.multiply(l2).mod(curve.getP());  BigInteger xr=l.pow(2).subtract(TWO.multiply(x)).mod(curve.getP());  BigInteger yr=l.multiply(x.subtract(xr)).subtract(y).mod(curve.getP());  Point ret=new Point(xr,yr);  return ret;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireExplicitDerivedKeysElement createRequireExplicitDerivedKeysElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireExplicitDerivedKeysElementImpl();}  }
class C{  static ByteString dnToDNKey(DN dn,int prefixRDNs){  return dn.localName(dn.size() - prefixRDNs).toNormalizedByteString();}  }
class C{  public JRadioButton(Action a){  this();  setAction(a);}  }
class C{  public IDPSSOFederateRequest(String reqID,String realm,SAML2IdentityProviderAdapter idpAdapter,String idpMetaAlias,String idpEntityID){  this.reqID=reqID;  this.realm=realm;  this.idpAdapter=idpAdapter;  this.idpMetaAlias=idpMetaAlias;  this.idpEntityID=idpEntityID;}  }
class C{  public ELException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public int hashCode(){  return className.hashCode() + methodName.hashCode();}  }
class C{  protected void doMove(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  String path=getRelativePath(req);  if (copyResource(req,resp)) {    deleteResource(path,req,resp,false);  }}  }
class C{  public FrameBodyXSOP(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static String rdnValueFromDn(DN dn){  if (dn.size() > 0) {    return rdnValue(dn.rdn());  }  return "";}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public ExpandedNameTable(){  m_capacity=m_initialCapacity;  m_threshold=(int)(m_capacity * m_loadFactor);  m_table=new HashEntry[m_capacity];  initExtendedTypes();}  }
class C{  public NSSet(NSObject... objects){  set=new LinkedHashSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  protected IntegerSyntax(int value,int lowerBound,int upperBound){  if (lowerBound > value || value > upperBound) {    throw new IllegalArgumentException("Value " + value + " not in range "+ lowerBound+ ".."+ upperBound);  }  this.value=value;}  }
class C{  @SuppressWarnings("rawtypes") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {  String cname=classDesc.getName();  return ClassFinder.resolveClass(cname,this.loader);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public static void addAttributeValue(SSOToken token,Guid guid,String name,String value) throws UMSException {  if (guid == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_GUIDS));  }  if (token == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_TOKEN));  }  try {    SSOTokenManager.getInstance().validateToken(token);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.INVALID_TOKEN),se);  }  Attr attr=new Attr(name,value);  attr=null;  Validation.validateAttribute(attr,UMSObject.getObject(token,guid).getClass(),guid);  try {    DataLayer.getInstance().addAttributeValue(token.getPrincipal(),guid,name,value);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.BAD_TOKEN_HDL),se);  }}  }
class C{  private void resetToXMLSAXHandler(){  this.m_escapeSetting=true;}  }
class C{  public Duration minusSeconds(long secondsToSubtract){  return (secondsToSubtract == Long.MIN_VALUE ? plusSeconds(Long.MAX_VALUE).plusSeconds(1) : plusSeconds(-secondsToSubtract));}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(1000);  result.append("<").append(WSSEConstants.TAG_SEC + ":").append(WSSEConstants.TAG_RESOURCEACCESSSTATEMENT).append(" ").append(WSSEConstants.TAG_XML_SEC).append("=").append("\"").append(WSSEConstants.NS_SEC).append("\"");  result.append(">\n").append(this._subject.toString(includeNS,true));  if (_resourceID != null) {    result.append(_resourceID);  } else   if (_encryptedResourceID != null) {    result.append(_encryptedResourceID);  }  if (_proxySubject != null) {    result.append(_proxySubject.toString(includeNS,true));    if (_sessionContext != null) {      try {        result.append(_sessionContext.toXMLString(includeNS,true));      } catch (      Exception e) {      }    }  }  result.append("</").append(WSSEConstants.TAG_SEC + ":").append(WSSEConstants.TAG_RESOURCEACCESSSTATEMENT).append(">\n");  return (result.toString());}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public int read() throws IOException {  ensureOpen();  if (pos < buf.length) {    return buf[pos++] & 0xff;  }  return super.read();}  }
class C{  public int connectable_item_count(int p_net_no){  int result=0;  Iterator<UndoObjectNode> it=undo_items.start_read_object();  for (; ; ) {    BrdItem curr_item=(BrdItem)undo_items.read_next(it);    if (curr_item == null)     break;    if (curr_item instanceof BrdConnectable && curr_item.contains_net(p_net_no)) {      ++result;    }  }  return result;}  }
class C{  public IDPList createIDPList(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPLIST,value);  if (obj == null) {    return new IDPListImpl(value);  } else {    return (IDPList)obj;  }}  }
class C{  public MultiServicesPropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model) throws SMSException, SSOException {  super(serviceSchema,model);  svcName=serviceSchema.getServiceName();}  }
class C{  private synchronized void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {synchronized (BeanContext.globalHierarchyLock) {    ois.defaultReadObject();    initialize();    bcsPreDeserializationHook(ois);    if (serializable > 0 && this.equals(getBeanContextPeer()))     readChildren(ois);    deserialize(ois,bcmListeners=new ArrayList(1));  }}  }
class C{  @SuppressWarnings("unchecked") private boolean isTokenValidForCompression(byte[] blob){  if (blob == null) {    return false;  }  String contents;  try {    contents=blobUtils.toUTF8(blob);  } catch (  UnsupportedEncodingException e) {    return false;  }  if (!contents.startsWith("{")) {    return false;  }  if (!contents.endsWith("}")) {    return false;  }  Set<String> keys=new HashSet<String>();  keys.addAll(replacement.keySet());  keys.addAll(replacement.values());  for (  String key : keys) {    if (contents.contains(key)) {      return true;    }  }  return false;}  }
class C{  public void add(String attrName,Object attrValue){  Syntax syntax;  if (attrValue instanceof String || attrValue instanceof ByteString || attrValue instanceof Float|| attrValue instanceof Double) {    syntax=CoreSchema.getDirectoryStringSyntax();  } else   if (attrValue instanceof Number) {    syntax=CoreSchema.getIntegerSyntax();  } else   if (attrValue instanceof Boolean) {    syntax=CoreSchema.getBooleanSyntax();  } else   if (attrValue instanceof DN) {    syntax=CoreSchema.getDNSyntax();  } else   if (attrValue instanceof Date) {    syntax=CoreSchema.getGeneralizedTimeSyntax();    attrValue=GeneralizedTime.valueOf((Date)attrValue);  } else   if (attrValue instanceof Calendar) {    syntax=CoreSchema.getGeneralizedTimeSyntax();    attrValue=GeneralizedTime.valueOf((Calendar)attrValue);  } else   if (attrValue instanceof UUID) {    syntax=CoreSchema.getUUIDSyntax();  } else {    syntax=CoreSchema.getDirectoryStringSyntax();  }  add(attrName,syntax,attrValue);}  }
class C{  private void registerDefaultTags(){  Class<?>[] defaultTagClasses=new Class<?>[]{AttributeValueTag.class,DNTag.class,FileTag.class,FirstNameTag.class,GUIDTag.class,IfAbsentTag.class,IfPresentTag.class,LastNameTag.class,ListTag.class,ParentDNTag.class,PresenceTag.class,RandomTag.class,RDNTag.class,SequentialTag.class,StaticTextTag.class,UnderscoreDNTag.class,UnderscoreParentDNTag.class};  for (  final Class<?> c : defaultTagClasses) {    try {      final TemplateTag t=(TemplateTag)c.newInstance();      registeredTags.put(t.getName().toLowerCase(),t);    } catch (    Exception e) {      throw new RuntimeException(ERR_ENTRY_GENERATOR_CANNOT_INSTANTIATE_TAG.get(c.getName()).toString(),e);    }  }}  }
class C{  public JsonPropertyMapper defaultJsonValue(final Object defaultValue){  this.defaultJsonValues=defaultValue != null ? singletonList(defaultValue) : emptyList();  return this;}  }
class C{  public ChannelData(byte[] uniqueId,XByteBuffer message,long timestamp){  this.uniqueId=uniqueId;  this.message=message;  this.timestamp=timestamp;}  }
class C{  public final void readConfiguration() throws IOException, SecurityException {  String[] xlogData=null;  try {    Logger.rwLock.writeRequest();synchronized (Logger.class) {      Enumeration loggerNames=getLoggerNames();      LogManagerUtil.setupEnv();      if (didFirstReadConfig && SystemProperties.isServerMode()) {        oldLocation=getProperty(LogConstants.LOG_LOCATION);        oldLevel=getProperty(LogConstants.LOGGING_LEVEL);        oldSecurityStatus=getProperty(LogConstants.SECURITY_STATUS);        oldBackend=getProperty(LogConstants.BACKEND);        oldStatus=getProperty(LogConstants.LOG_STATUS_ATTR);      }      try {        if (SystemProperties.isServerMode()) {          LogConfigReader logConfigReader=new LogConfigReader();        } else {          super.readConfiguration();        }        didFirstReadConfig=true;      } catch (      Exception ex) {      } finally {        LogManagerUtil.resetEnv();      }      if (isLocal) {        securityStatus=false;        readAllFields();        readSelectedFieldSet();        if (SystemProperties.isServerMode()) {          newLocation=getProperty(LogConstants.LOG_LOCATION);          newLevel=getProperty(LogConstants.LOGGING_LEVEL);          newSecurityStatus=getProperty(LogConstants.SECURITY_STATUS);          newBackend=getProperty(LogConstants.BACKEND);          newStatus=getProperty(LogConstants.LOG_STATUS_ATTR);        }        String[] logData={oldLocation,newLocation,oldBackend,newBackend,oldSecurityStatus,newSecurityStatus,oldStatus,newStatus,oldLevel,newLevel};        if (getProperty(LogConstants.BACKEND).equals("DB")) {          HANDLER=getProperty(LogConstants.DB_HANDLER);          FORMATTER=getProperty(LogConstants.DB_FORMATTER);          String driver=getProperty(LogConstants.DB_DRIVER);        } else         if (getProperty(LogConstants.BACKEND).equals("Syslog")) {          HANDLER=getProperty(LogConstants.SYSLOG_HANDLER);          FORMATTER=getProperty(LogConstants.SYSLOG_FORMATTER);        } else         if (getProperty(LogConstants.SECURITY_STATUS).equalsIgnoreCase("ON")) {          securityStatus=true;          HANDLER=getProperty(LogConstants.SECURE_FILE_HANDLER);          FORMATTER=getProperty(LogConstants.SECURE_ELF_FORMATTER);        } else {          HANDLER=getProperty(LogConstants.FILE_HANDLER);          FORMATTER=getProperty(LogConstants.ELF_FORMATTER);        }        if (getProperty(LogConstants.BACKEND).equals("File")) {          if (SystemProperties.isServerMode() && (newLocation != null) && (oldLocation != null)&& !oldLocation.equals(newLocation)) {            File dir=new File(newLocation);            if (!dir.exists()) {              if (!dir.mkdirs()) {                Debug.error("LogManager:readConfiguration:" + "Unable to create the new log " + "directory. Verify that the "+ "process has necessary permissions");              }            }          }        }        boolean loggingInactive=(getProperty(LogConstants.LOG_STATUS_ATTR).equals(inactive));        String strLogLevel=getProperty(LogConstants.LOGGING_LEVEL);        try {          loggingLevel=Level.parse(strLogLevel);        } catch (        IllegalArgumentException iaex) {          loggingLevel=Level.INFO;          Debug.error("LogManager:readConfiguration:" + "Log level '" + strLogLevel + "' unknown; setting to Level.INFO.");        }        if (loggingInactive) {          loggingLevel=Level.OFF;        }        xlogData=logData;      } else {        HANDLER=getProperty(LogConstants.REMOTE_HANDLER);        if (HANDLER == null) {          HANDLER=LogConstants.DEFAULT_REMOTE_HANDER;        }        FORMATTER=getProperty(LogConstants.REMOTE_FORMATTER);        if (FORMATTER == null) {          FORMATTER=LogConstants.DEFAULT_REMOTE_FORMATTER;        }      }      Logger.resolveHostName=Boolean.valueOf(getProperty(LogConstants.LOG_RESOLVE_HOSTNAME_ATTR)).booleanValue();      loggerNames=getLoggerNames();      while (loggerNames.hasMoreElements()) {        String curEl=(String)loggerNames.nextElement();        if (!curEl.isEmpty() && !curEl.equals("global")) {          if (Debug.messageEnabled()) {            Debug.message("LogManager:readConfiguration:" + "Processing Logger: " + curEl);          }          Logger l=(Logger)Logger.getLogger(curEl);          Handler[] handlers=l.getHandlers();          for (int i=0; i < handlers.length; i++) {            handlers[i].close();            l.removeHandler(handlers[i]);          }          String handlerClass=LogManager.HANDLER;          Class clz=null;          Class[] parameters={String.class};          Object[] parameterObjects={l.getName()};          Constructor cons=null;          Handler h=null;          try {            clz=Class.forName(handlerClass);          } catch (          Exception e) {            Debug.error("LogManager.readConfiguration:could not load " + handlerClass,e);          }          try {            cons=clz.getDeclaredConstructor(parameters);          } catch (          Exception e) {            Debug.error("LogManager.readConfiguration:could not" + " instantiate" + handlerClass,e);          }          try {            h=(Handler)cons.newInstance(parameterObjects);          } catch (          Exception e) {            Debug.error("LogManager.readConfiguration:could not" + " instantiate" + handlerClass,e);          }          String formatterClass=LogManager.FORMATTER;          Formatter f=null;          try {            f=(Formatter)Class.forName(formatterClass).newInstance();          } catch (          Exception e) {            Debug.error("LogManager.readConfiguration:could not" + " instantiate Formatter " + formatterClass,e);          }          h.setFormatter(f);          l.addHandler(h);          Level tlevel=loggingLevel;          if (loggingLevel != Level.OFF) {            String levelProp=LogConstants.LOG_PROP_PREFIX + "." + l.getName()+ ".level";            String lvlStr=SystemProperties.get(levelProp);            if ((lvlStr != null) && (lvlStr.length() > 0)) {              try {                tlevel=Level.parse(lvlStr);              } catch (              IllegalArgumentException iaex) {              }            }          }          if (loggingLevel != null) {            l.setLevel(tlevel);          }        }      }    }  }  finally {    Logger.rwLock.writeDone();  }  if (SystemProperties.isServerMode() && isLocal) {    checkStartLogs(xlogData);    updateMonitConfigForLogService();  }}  }
class C{  private boolean isCharStrong(int chr){  return (STRONG_TEXT_FLAGS[chr >> 5] & (1 << (chr % 32))) != 0;}  }
class C{  public void printAVPairs(Map avPairs){  printAVPairs(avPairs,0);}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentValue;  doc=(Document)load("staff",false);  documentValue=doc.getNodeValue();  assertNull("documentNodeValueNull",documentValue);}  }
class C{  public void detach(){}  }
class C{  @Override public LifecycleListener[] findLifecycleListeners(){  return new LifecycleListener[0];}  }
class C{  @Override public void addIntHeader(String name,int value){  this._getHttpServletResponse().addIntHeader(name,value);}  }
class C{  private static boolean isPrimitive(String description){  String x=asmTrim(description);  if (x.length() == 0) {    return true;  } else   if (x.equals("Z") || x.equals("J") || x.equals("I")|| x.equals("F")|| x.equals("D")|| x.equals("C")|| x.equals("T")|| x.equals("G")) {    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.W3.org/2000/xmlns";  String qualifiedName="xmlns";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      attribute=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS07",success);  }}  }
class C{  public synchronized void shutdown(){  if (!shutdownThePool) {    shutdownThePool=true;    scheduler.terminate();    for (int i=0; i < currentThreadCount - busyThreadCount; i++) {      threads[i].terminate();    }    while (busyThreadCount != 0) {      try {        wait();      } catch (      Exception ex) {        if (debug != null) {          debug.error("TimerPool:shutdown() " + name,ex);        }      }    }    currentThreadCount=busyThreadCount=0;    threads=null;  }}  }
class C{  public static BossBar createBossBar(String title,BarColor color,BarStyle style,BarFlag... flags){  return server.createBossBar(title,color,style,flags);}  }
class C{  @Override public void close(){  super.close();  allLocks.remove(fileName);  try {    FileChannel channel=lock.channel();    lock.release();    channel.close();    File file=new File(fileName + LCK_EXT);    file.delete();  } catch (  IOException e) {  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public ScriptException(Exception e){  super(e);  fileName=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public TagField createField(Artwork artwork) throws FieldDataInvalidException {  throw new FieldDataInvalidException("Not supported");}  }
class C{  public void deleteField(FieldKey genericKey) throws KeyNotFoundException {  if (genericKey == null) {    throw new KeyNotFoundException();  }  VorbisCommentFieldKey vorbisCommentFieldKey=tagFieldToOggField.get(genericKey);  deleteField(vorbisCommentFieldKey);}  }
class C{  private void startThreadDump() throws IOException {  if (currentRecord.getRecordProperties().isThreadDumpEnabled()) {    createFolder(currentRecord.getFolderPath() + File.separator + RecordConstants.THREAD_DUMP_FOLDER_NAME);    currentScheduledThreadDump=scheduledExecutorService.scheduleWithFixedDelay(new ThreadsDumpRunnable(currentRecord),0,currentRecord.getRecordProperties().getThreadDumpDelayInSeconds(),TimeUnit.SECONDS);  }}  }
class C{  public final boolean isSupported(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr removedAttr;  String removedValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("class");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  assertNotNull("removedAttrNotNull",removedAttr);  removedValue=removedAttr.getValue();  assertEquals("elementRemoveAttributeNodeAssert","No",removedValue);}  }
class C{  public PdfPage removePage(int pageNum){  checkClosingStatus();  PdfPage removedPage=catalog.getPageTree().removePage(pageNum);  if (removedPage != null) {    catalog.removeOutlines(removedPage);    removeUnusedWidgetsFromFields(removedPage);    if (isTagged()) {      getTagStructureContext().removePageTags(removedPage);    }    if (!removedPage.getPdfObject().isFlushed()) {      removedPage.getPdfObject().remove(PdfName.Parent);    }    removedPage.getPdfObject().getIndirectReference().setFree();    dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.REMOVE_PAGE,removedPage));  }  return removedPage;}  }
class C{  private ConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ); else   return m.findNear(lo,GT);}  }
class C{  PersistModuleProcessor(Map<String,Object> devicePrintProfile,boolean autoStoreProfiles,ProfilePersister profilePersister){  this.devicePrintProfile=devicePrintProfile;  this.autoStoreProfiles=autoStoreProfiles;  this.profilePersister=profilePersister;}  }
class C{  public void updateMessageRead(LDAPMessage message){  messagesRead.getAndIncrement();  operationsInitiated.getAndIncrement();switch (message.getProtocolOp().getType()) {case OP_TYPE_ABANDON_REQUEST:    abandonRequests.getAndIncrement();  break;case OP_TYPE_ADD_REQUEST:addRequests.getAndIncrement();break;case OP_TYPE_BIND_REQUEST:bindRequests.getAndIncrement();break;case OP_TYPE_COMPARE_REQUEST:compareRequests.getAndIncrement();break;case OP_TYPE_DELETE_REQUEST:deleteRequests.getAndIncrement();break;case OP_TYPE_EXTENDED_REQUEST:extendedRequests.getAndIncrement();break;case OP_TYPE_MODIFY_REQUEST:modifyRequests.getAndIncrement();break;case OP_TYPE_MODIFY_DN_REQUEST:modifyDNRequests.getAndIncrement();break;case OP_TYPE_SEARCH_REQUEST:searchRequests.getAndIncrement();SearchRequestProtocolOp s=(SearchRequestProtocolOp)message.getProtocolOp();switch (s.getScope().asEnum()) {case BASE_OBJECT:break;case SINGLE_LEVEL:searchOneRequests.getAndIncrement();break;case WHOLE_SUBTREE:searchSubRequests.getAndIncrement();break;default :break;}break;case OP_TYPE_UNBIND_REQUEST:unbindRequests.getAndIncrement();break;}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr districtNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  districtNode=(Attr)attributes.getNamedItem("lang");  assertNull("langAttrNull",districtNode);}  }
class C{  public UncheckedIOException(String message,IOException cause){  super(message,Objects.requireNonNull(cause));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr attributeRemoved;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","employee");  element=elementList.item(0);  attributes=element.getAttributes();  attributeRemoved=(Attr)attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/","xmlns");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/","xmlns");  assertNull("namednodemapremovenameditemns04_1",attribute);  attributeRemoved=(Attr)attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/","dmstc");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/","dmstc");  assertNull("namednodemapremovenameditemns04_2",attribute);}  }
class C{  public W3CEndpointReferenceBuilder metadata(Element metadataElement){  if (metadataElement == null)   throw new java.lang.IllegalArgumentException("The metadataElement cannot be null.");  metadata.add(metadataElement);  return this;}  }
class C{  public Iterator<String> listProperties(){  return properties.keySet().iterator();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String(){  String[] alg={"","qwertyu","!@#$%^&*()"};  String[] prv={"",null};  String[] prv1={"1234567890","qwertyu","!@#$%^&*()"};  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC","MyProvider");    checkUnititialized(ap);    ap.init(new byte[6]);    checkAP(ap,p);  } catch (  Exception e) {    fail("Unexpected exception");  }  for (int i=0; i < alg.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],"MyProvider");      fail("NoSuchAlgorithmException was not thrown for parameter " + alg[i]);    } catch (    NoSuchAlgorithmException nsae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ alg[i]);    }  }  for (int i=0; i < prv.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",prv[i]);      fail("IllegalArgumentException was not thrown for parameter " + prv[i]);    } catch (    IllegalArgumentException iae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ prv[i]);    }  }  for (int i=0; i < prv1.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",prv1[i]);      fail("NoSuchProviderException was not thrown for parameter " + prv1[i]);    } catch (    NoSuchProviderException nspe) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ prv1[i]);    }  }}  }
class C{  public static boolean startsWithIgnoreCase(final String string,final String prefix) throws IllegalArgumentException, NullPointerException {  Validate.notNull(string,"Cannot check a null string for a match");  if (string.length() < prefix.length()) {    return false;  }  return string.regionMatches(true,0,prefix,0,prefix.length());}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_name_avt)   m_name_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_namespace_avt)   m_namespace_avt.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("--------------------------------------");  buf.append("Got Federation Exception\n");  String msg=getMessage();  if (msg != null && msg.length() > 0) {    buf.append("Message: ").append(getMessage());  }  if (rootCause != null) {    buf.append("\nLower level exception: ");    buf.append(getRootCause());  }  return buf.toString();}  }
class C{  public boolean isValid(SigningHandler signingHandler){  if (isSignatureValid == null) {    isSignatureValid=jwt.verify(signingHandler);  }  return isSignatureValid && isContentValid();}  }
class C{  public void clear(){  removeAllElements();}  }
class C{  @Override public int read() throws IOException {  if (read_pos == read_pos_end) {    throw new EndOfBufferException();  }  return buffer[read_pos++] & 0xFF;}  }
class C{  private void createDetailsPanel(){  detailsPanel=new JPanel(new GridBagLayout());  detailsPanel.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.NORTHWEST;  JLabel label=Utilities.createDefaultLabel(INFO_CTRL_PANEL_TASK_SPECIFIC_DETAILS.get());  label.setFont(ColorAndFontConstants.titleFont);  detailsPanel.add(label,gbc);  gbc.gridy++;  gbc.anchor=GridBagConstraints.CENTER;  gbc.fill=GridBagConstraints.NONE;  gbc.weightx=1.0;  gbc.weighty=1.0;  noDetailsLabel=Utilities.createDefaultLabel(INFO_CTRL_PANEL_NO_TASK_SELECTED.get());  gbc.gridwidth=2;  detailsPanel.add(noDetailsLabel,gbc);  detailsSubpanel=new JPanel(new GridBagLayout());  detailsSubpanel.setOpaque(false);  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.BOTH;  detailsPanel.add(Utilities.createBorderLessScrollBar(detailsSubpanel),gbc);  detailsPanel.add(Box.createVerticalStrut(logs.getPreferredSize().height),gbc);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Comment newCommentNode;  String newCommentValue;  String newCommentName;  int newCommentType;  doc=(Document)load("hc_staff",true);  newCommentNode=doc.createComment("This is a new Comment node");  newCommentValue=newCommentNode.getNodeValue();  assertEquals("value","This is a new Comment node",newCommentValue);  newCommentName=newCommentNode.getNodeName();  assertEquals("strong","#comment",newCommentName);  newCommentType=(int)newCommentNode.getNodeType();  assertEquals("type",8,newCommentType);}  }
class C{  public SpannableStringBuilder(CharSequence text){  this(text,0,text.length());}  }
class C{  public static String stringForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return stringForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  private char processChar(char ch){switch (state) {case STATE_START:    if (ch == '&') {      state=STATE_AMP;    }  return ch;case STATE_AMP:if (ch == '#') {  state=STATE_HASH;} else {  state=STATE_ERROR;}return ch;case STATE_HASH:if (ch == 'x') {control=0;digits=0;state=STATE_HEX;} else if ('0' <= ch && ch <= '9') {control=Character.digit(ch,10);digits=1;state=STATE_DIG1;} else {state=STATE_ERROR;}return ch;case STATE_DIG1:if ('0' <= ch && ch <= '9') {control=control * 10 + Character.digit(ch,10);digits++;if (digits <= 5) {state=STATE_DIG1;} else {state=STATE_ERROR;}} else if (ch == ';' && Utils.isControlChar((char)control)) {state=STATE_START;return (char)control;} else {state=STATE_ERROR;}return ch;case STATE_HEX:if (('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'f') || ('A' <= ch && ch <= 'F')) {control=control * 16 + Character.digit(ch,16);digits++;if (digits <= 4) {state=STATE_HEX;} else {state=STATE_ERROR;}} else if (ch == ';' && Utils.isControlChar((char)control)) {state=STATE_START;return (char)control;} else {state=STATE_ERROR;}return ch;case STATE_ERROR:state=STATE_START;return ch;default :return ch;}}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (SAMLUtilsCommon.debug.messageEnabled()) {    SAMLUtilsCommon.debug.message("SAMLServiceManager:configChanged");  }  setValues();}  }
class C{  public PdfDictionary copyTo(PdfDocument document,List<PdfName> excludeKeys,boolean allowDuplicating){  Map<PdfName,PdfObject> excluded=new TreeMap<>();  for (  PdfName key : excludeKeys) {    PdfObject obj=map.get(key);    if (obj != null)     excluded.put(key,map.remove(key));  }  PdfDictionary dictionary=copyTo(document,allowDuplicating);  map.putAll(excluded);  return dictionary;}  }
class C{  private void stopRefreshNode(BasicNode node){  if (node == rootNode) {    refreshQueue.cancelAll();  } else {    Enumeration<?> e=node.children();    while (e.hasMoreElements()) {      BasicNode child=(BasicNode)e.nextElement();      stopRefreshNode(child);    }    refreshQueue.cancelForNode(node);  }}  }
class C{  public void testGetFormat(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks=new SecretKeySpec(key,algorithm);  assertTrue("The returned value is not \"RAW\".",ks.getFormat() == "RAW");}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLResponseType createSASLResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLResponseTypeImpl();}  }
class C{  public static boolean hasPasswordSyntax(String attrName,Schema schema){  if (schema != null) {    AttributeType attrType=AttributeDescription.valueOf(attrName,schema).getAttributeType();    if (!attrType.isPlaceHolder()) {      PasswordType passwordType=SchemaUtils.checkPasswordType(attrType);      return passwordType.equals(PasswordType.USER_PASSWORD);    }  }  return false;}  }
class C{  public void paintTextAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  @SuppressWarnings("unchecked") public void writeStruct(Struct x) throws SQLException {  SerialStruct s=new SerialStruct(x,map);  ;  attribs.add(s);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  public LDIFImportConfig(Reader ldifInputReader){  this(Collections.<String>emptyList());  reader=getBufferedReader(ldifInputReader);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EncryptBeforeSigningElement createEncryptBeforeSigningElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EncryptBeforeSigningElementImpl();}  }
class C{  public void testCase1(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=1;  int bSign=1;  byte rBytes[]={9,18,27,36,45,54,63,9,18,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public SelectorContext(Hashtable<String,Object> env){  this.env=env;  this.initialContext=false;}  }
class C{  private boolean isLink(){  return ((state & LINK_FLAG) == LINK_FLAG);}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  public Boolean isThreadDumpEnabled(){  return threadDumpEnable;}  }
class C{  public SSOTokenProvider(){}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return ((end - pos) > 0) || in.ready();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic256Sha256Rsa15Element createBasic256Sha256Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic256Sha256Rsa15ElementImpl();}  }
class C{  public Object put(Object key,Object value){  Object oldValue=null;synchronized (map) {    oldValue=map.put(key,value);    if (oldValue != null) {      removeElement(key);    }    addElement(key);  }  return oldValue;}  }
class C{  private static void cleanUpCache(String reqID){  IDPCache.oldIDPSessionCache.remove(reqID);  IDPCache.authnRequestCache.remove(reqID);  IDPCache.idpAuthnContextCache.remove(reqID);  IDPCache.isSessionUpgradeCache.remove(reqID);}  }
class C{  void syncToFileSystem() throws ChangelogException {  checkLogIsEnabledForWrite();  sharedLock.lock();  try {    writer.sync();  } catch (  Exception e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_SYNC.get(getPath()),e);  } finally {    sharedLock.unlock();  }}  }
class C{  void appendStartElement(int namespaceIndex,int localNameIndex,int prefixIndex){  int w0=(namespaceIndex << 16) | ELEMENT_NODE;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  currentParent=ourslot;  previousSibling=0;  if (m_docElement == NULL)   m_docElement=ourslot;}  }
class C{  public boolean isForceReset(String userId){  boolean forcedReset=false;  try {    String[] params={userId,PW_RESET_FORCE_RESET};    logEvent("ATTEMPT_READ_IDENTITY_ATTRIBUTE_VALUE",params);    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),userId);    Set set=amid.getAttribute(PW_RESET_FORCE_RESET);    logEvent("SUCCEED_READ_IDENTITY_ATTRIBUTE_VALUE",params);    if ((set != null) && !set.isEmpty()) {      forcedReset=((String)AMAdminUtils.getValue(set)).equalsIgnoreCase("true");    }  } catch (  SSOException e) {    String[] paramsEx={userId,PW_RESET_FORCE_RESET,getErrorString(e)};    logEvent("SSO_EXCEPTION_READ_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    debug.warning("UMUserPasswordResetOptionsModelImpl.isForceReset",e);  }catch (  IdRepoException e) {    String[] paramsEx={userId,PW_RESET_FORCE_RESET,getErrorString(e)};    logEvent("IDM_EXCEPTION_READ_IDENTITY_ATTRIBUTE_VALUE",paramsEx);    debug.warning("UMUserPasswordResetOptionsModelImpl.isForceReset",e);  }  return forcedReset;}  }
class C{  @Override public Object createStatement(Object proxy,Method method,Object[] args,Object statement,long time){  try {    String name=method.getName();    Constructor<?> constructor=null;    String sql=null;    if (compare(CREATE_STATEMENT,name)) {      constructor=getConstructor(CREATE_STATEMENT_IDX,Statement.class);    } else     if (compare(PREPARE_STATEMENT,name)) {      constructor=getConstructor(PREPARE_STATEMENT_IDX,PreparedStatement.class);      sql=(String)args[0];    } else     if (compare(PREPARE_CALL,name)) {      constructor=getConstructor(PREPARE_CALL_IDX,CallableStatement.class);      sql=(String)args[0];    } else {      return statement;    }    return createDecorator(proxy,method,args,statement,constructor,sql);  } catch (  Exception x) {    if (x instanceof InvocationTargetException) {      Throwable cause=x.getCause();      if (cause instanceof ThreadDeath) {        throw (ThreadDeath)cause;      }      if (cause instanceof VirtualMachineError) {        throw (VirtualMachineError)cause;      }    }    logger.warn("Unable to create statement proxy for slow query report.",x);  }  return statement;}  }
class C{  public SIPHeader parse() throws ParseException {  RequireList requireList=new RequireList();  if (debug)   dbg_enter("RequireParser.parse");  try {    headerName(TokenTypes.REQUIRE);    while (lexer.lookAhead(0) != '\n') {      Require r=new Require();      r.setHeaderName(SIPHeaderNames.REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      requireList.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new Require();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        requireList.add(r);      }    }  }  finally {    if (debug)     dbg_leave("RequireParser.parse");  }  return requireList;}  }
class C{  public AlternativeName(boolean which,byte[] encoding) throws IOException {  super(encoding);  this.which=which;  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#externalEntityDecl: " + name + ", "+ publicId+ ", "+ systemId);  if (null != m_declHandler) {    m_declHandler.externalEntityDecl(name,publicId,systemId);  }}  }
class C{  public String message(){  return message;}  }
class C{  protected RequestError parseError(InputStream response) throws IOException {  return parseJson(response,RequestError.class);}  }
class C{  private static void checkSeparator(String separator) throws XMPException {  boolean haveSemicolon=false;  for (int i=0; i < separator.length(); i++) {    int charKind=classifyCharacter(separator.charAt(i));    if (charKind == UCK_SEMICOLON) {      if (haveSemicolon) {        throw new XMPException("Separator can have only one semicolon",XMPError.BADPARAM);      }      haveSemicolon=true;    } else     if (charKind != UCK_SPACE) {      throw new XMPException("Separator can have only spaces and one semicolon",XMPError.BADPARAM);    }  }  if (!haveSemicolon) {    throw new XMPException("Separator must have one semicolon",XMPError.BADPARAM);  }}  }
class C{  public MalformedStreamException(String message){  super(message);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  cipher.init(forEncryption,params);}  }
class C{  protected ASCIIPropertyListParser(){}  }
class C{  public boolean tryLock(long timeout) throws InterruptedException {  return lock.tryLock(timeout,TimeUnit.MILLISECONDS);}  }
class C{  private DispatcherTask dequeueNextTask(String queueName){synchronized (syncRoot) {    Queue<DispatcherTask> queue=taskQueuesMap.get(queueName);    if (queue == null) {      return null;    }    DispatcherTask dispatcherTask=queue.poll();    if (queue.isEmpty()) {      taskQueuesMap.remove(queueName);    }    return dispatcherTask;  }}  }
class C{  private void parsePropertyAttributes(Element property){  if (property == null) {    return;  }  String temp=property.getAttribute("name");  if (temp != null) {    sessionRequest.setPropertyName(temp);  }  temp=property.getAttribute("value");  if (temp != null) {    sessionRequest.setPropertyValue(temp);  }}  }
class C{  @Override public int compareTo(DbEntry another){  if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    if (another.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {      return another.spanY * another.spanX - spanX * spanY;    } else {      return -1;    }  } else   if (another.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    return 1;  } else {    return Float.compare(another.weight,weight);  }}  }
class C{  public void mark(int readlimit){  stream.mark(readlimit);  if (markSupported()) {    markpos=framePos;    markPushBackLen=pushBackLen;    if (markPushBackLen > 0) {      if (markPushBackBuffer == null) {        markPushBackBuffer=new byte[frameSize];      }      System.arraycopy(pushBackBuffer,0,markPushBackBuffer,0,markPushBackLen);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createElement("br");  refChild=doc.createElement("b");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static void redirectToWebSite(Context from,String url){  Intent i=new Intent(Intent.ACTION_VIEW);  i.setData(Uri.parse(url));  from.startActivity(i);}  }
class C{  public void incrementJspReloadCount(){  jspReloadCount.incrementAndGet();}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public Element signWithWSSX509TokenProfile(Document doc,java.security.cert.Certificate cert,String algorithm,List ids,String wsfVersion) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("signXML: doc is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (SAMLUtilsCommon.debug.messageEnabled()) {    SAMLUtilsCommon.debug.message("Soap Envlope: " + XMLUtils.print(doc.getDocumentElement()));  }  this.wsfVersion=wsfVersion;  String wsseNS=SAMLConstants.NS_WSSE;  String wsuNS=SAMLConstants.NS_WSU;  if ((wsfVersion != null) && (wsfVersion.equals(SOAPBindingConstants.WSF_11_VERSION))) {    wsseNS=WSSEConstants.NS_WSSE_WSF11;    wsuNS=WSSEConstants.NS_WSU_WSF11;  }  Element root=(Element)doc.getDocumentElement().getElementsByTagNameNS(wsseNS,SAMLConstants.TAG_SECURITY).item(0);  XMLSignature signature=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);    Element wsucontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"wsu",wsuNS);    NodeList wsuNodes=(NodeList)XPathAPI.selectNodeList(doc,"//*[@wsu:Id]",wsucontext);    if ((wsuNodes != null) && (wsuNodes.getLength() != 0)) {      for (int i=0; i < wsuNodes.getLength(); i++) {        Element elem=(Element)wsuNodes.item(i);        String id=elem.getAttributeNS(wsuNS,"Id");        if (id != null && id.length() != 0) {          elem.setIdAttributeNS(wsuNS,"Id",true);        }      }    }    String certAlias=keystore.getCertificateAlias(cert);    PrivateKey privateKey=(PrivateKey)keystore.getPrivateKey(certAlias);    if (privateKey == null) {      SAMLUtilsCommon.debug.error("private key is null");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullprivatekey"));    }    if (algorithm == null || algorithm.length() == 0) {      algorithm=getKeyAlgorithm(privateKey);    }    if (!isValidAlgorithm(algorithm)) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidalgorithm"));    }    signature=new XMLSignature(doc,"",algorithm,Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);    root.appendChild(signature.getElement());    int size=ids.size();    for (int i=0; i < size; ++i) {      Transforms transforms=new Transforms(doc);      transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);      String id=(String)ids.get(i);      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("id = " + id);      }      signature.addDocument("#" + id,transforms,digestAlg);    }    KeyInfo keyInfo=signature.getKeyInfo();    Element securityTokenRef=doc.createElementNS(wsseNS,SAMLConstants.TAG_SECURITYTOKENREFERENCE);    keyInfo.addUnknownElement(securityTokenRef);    securityTokenRef.setAttributeNS(SAMLConstants.NS_XMLNS,SAMLConstants.TAG_XMLNS,wsseNS);    securityTokenRef.setAttributeNS(SAMLConstants.NS_XMLNS,SAMLConstants.TAG_XMLNS_SEC,SAMLConstants.NS_SEC);    securityTokenRef.setAttributeNS(null,SAMLConstants.TAG_USAGE,SAMLConstants.TAG_SEC_MESSAGEAUTHENTICATION);    Element bsf=(Element)root.getElementsByTagNameNS(wsseNS,SAMLConstants.BINARYSECURITYTOKEN).item(0);    String certId=bsf.getAttributeNS(wsuNS,SAMLConstants.TAG_ID);    Element reference=doc.createElementNS(wsseNS,SAMLConstants.TAG_REFERENCE);    securityTokenRef.appendChild(reference);    reference.setAttributeNS(null,SAMLConstants.TAG_URI,"#" + certId);    signature.sign(privateKey);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signWithWSSX509TokenProfile" + " Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return (signature.getElement());}  }
class C{  @Override public void close() throws IOException {  buffer=null;}  }
class C{  public Vector midpoint(Vector other){  x=(x + other.x) / 2;  y=(y + other.y) / 2;  z=(z + other.z) / 2;  return this;}  }
class C{  public MessageFactory createMessageFactory() throws PeerUnavailableException {  if (messageFactory == null) {    messageFactory=(MessageFactory)createSipFactory("javax.sip.message.MessageFactoryImpl");  }  return messageFactory;}  }
class C{  public void handleTblResourceComparatorHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  AMServiceProfileModel model=(AMServiceProfileModel)getModel();  Map values=model.getAttributeValues();  onBeforeDisplayProfile(values);  setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);  SCPolicyResourceComparatorEditViewBean vb=(SCPolicyResourceComparatorEditViewBean)getViewBean(SCPolicyResourceComparatorEditViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.populateValues((String)getDisplayFieldValue(TBL_RESOURCE_COMPARATOR_HREF_ACTION));  vb.forwardTo(getRequestContext());}  }
class C{  public List(){}  }
class C{  public QName(String qname,Stack namespaces,boolean validate){  String namespace=null;  String prefix=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      namespace=S_XMLNAMESPACEURI;    } else     if (prefix.equals("xmlns")) {      return;    } else {      int depth=namespaces.size();      for (int i=depth - 1; i >= 0; i--) {        NameSpace ns=(NameSpace)namespaces.elementAt(i);        while (null != ns) {          if ((null != ns.m_prefix) && prefix.equals(ns.m_prefix)) {            namespace=ns.m_uri;            i=-1;            break;          }          ns=ns.m_next;        }      }    }    if (null == namespace) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespace;  _prefix=prefix;  m_hashCode=toString().hashCode();}  }
class C{  public void testGetOwnerElement1() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Element elementNode;  String name;  doc=(Document)load("staff",builder);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  elementNode=domesticAttr.getOwnerElement();  name=elementNode.getNodeName();  assertEquals("throw_Equals","address",name);}  }
class C{  @DataProvider(name="attrInfo") public Object[][] createData(){  ByteString att1=ByteString.valueOfUtf8("string");  ByteString att2=ByteString.valueOfUtf8("value");  ByteString att3=ByteString.valueOfUtf8("again");  CSN del1=new CSN(1,0,1);  CSN del2=new CSN(1,1,1);  CSN del3=new CSN(1,0,2);  CSN upd1=new CSN(TimeThread.getTime(),123,45);  CSN upd2=new CSN(TimeThread.getTime() + 1000,123,45);  CSN upd3=new CSN(TimeThread.getTime(),321,54);  return new Object[][]{{att1,del1,upd1},{att2,del2,upd2},{att3,del3,upd3},{att3,upd3,upd3}};}  }
class C{  public boolean all_doors_calculated(){  return doors_calculated;}  }
class C{  DNLock writeLockEntry(DN entryDN){  DNLock lock=null;  while (lock == null) {    lock=DirectoryServer.getLockManager().tryWriteLockEntry(entryDN);  }  return lock;}  }
class C{  public String toString(){  return name;}  }
class C{  public static void displayErrorDialog(Component parentComponent,Collection<LocalizableMessage> errors){  ArrayList<String> stringErrors=new ArrayList<>();  for (  LocalizableMessage err : errors) {    stringErrors.add(err.toString());  }  String msg=getStringFromCollection(stringErrors,"<br>");  String plainText=msg.replaceAll("<br>",ServerConstants.EOL);  String wrappedText=wrapText(plainText,70);  wrappedText=wrappedText.replaceAll(ServerConstants.EOL,"<br>");  JOptionPane.showMessageDialog(parentComponent,"<html>" + wrappedText,INFO_CTRL_PANEL_ERROR_DIALOG_TITLE.get().toString(),JOptionPane.ERROR_MESSAGE);}  }
class C{  public WSPersonalProfileServiceViewBean(){  super("WSPersonalProfileService",DEFAULT_DISPLAY_URL,"sunIdentityServerLibertyPPService");}  }
class C{  public SignedObject(Serializable object,PrivateKey signingKey,Signature signingEngine) throws IOException, InvalidKeyException, SignatureException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutput a=new ObjectOutputStream(b);  a.writeObject(object);  a.flush();  a.close();  this.content=b.toByteArray();  b.close();  this.sign(signingKey,signingEngine);}  }
class C{  private void markIndexing(UUID id){  BoundStatement activeStatement=new BoundStatement(markIndexingStmt);  activeStatement.bind(id);  getSession().execute(activeStatement);}  }
class C{  public void add(Role role) throws IllegalArgumentException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(role);}  }
class C{  public void delete(RandomAccessFile file) throws IOException {  logger.config("Deleting ID3v1 from file if exists");  FileChannel fc;  ByteBuffer byteBuffer;  fc=file.getChannel();  if (file.length() < TAG_LENGTH) {    throw new IOException("File not not appear large enough to contain a tag");  }  fc.position(file.length() - TAG_LENGTH);  byteBuffer=ByteBuffer.allocate(TAG_LENGTH);  fc.read(byteBuffer);  byteBuffer.rewind();  if (AbstractID3v1Tag.seekForV1OrV11Tag(byteBuffer)) {    try {      logger.config("Deleted ID3v1 tag");      file.setLength(file.length() - TAG_LENGTH);    } catch (    IOException ex) {      logger.severe("Unable to delete existing ID3v1 Tag:" + ex.getMessage());    }  } else {    logger.config("Unable to find ID3v1 tag to deleteField");  }}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  public Evidence createEvidence(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EVIDENCE);  if (obj == null) {    return null;  } else {    return (Evidence)obj;  }}  }
class C{  public boolean overlaps(PlaLineInt p_other){  return side_of(p_other.point_a) == PlaSide.COLLINEAR && side_of(p_other.point_b) == PlaSide.COLLINEAR;}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  @Nullable static <T>T internalGet(@NonNull String key,@NonNull Type typeOfT){  try {    InputStream is=mCache.getInputStream(key).getInputStream();    InputStreamReader isr=new InputStreamReader(is);    return mGson.fromJson(isr,typeOfT);  } catch (  Exception e) {    return null;  }}  }
class C{  public void addButtonActionListener(ButtonActionListener l){  buttonListeners.add(l);}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s3_linear_with_snapshots_light_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public void removeAdminRole(SSOToken token,String dn,boolean recursive) throws SSOException, AMException {  SSOTokenManager.getInstance().validateToken(token);  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl.removeAdminRole() dn: " + dn + " recursive: "+ recursive);  }  DN ldapDN=DN.valueOf(dn);  String orgDN=getOrganizationDN(token,ldapDN.parent().toString());  String newdn=dn.replace(',','_');  String roleNameAttr=getNamingAttribute(AMObject.ROLE);  String roleDN=new StringBuilder().append(roleNameAttr).append("=").append(newdn).append(",").append(orgDN).toString();  Set adminRoles=Collections.EMPTY_SET;  if (recursive) {    String roleSearchFilter=SearchFilterManager.getSearchFilter(AMObject.ROLE,orgDN);    StringBuilder sb=new StringBuilder();    sb.append("(&").append(roleSearchFilter).append("(");    sb.append(roleNameAttr).append("=*").append(newdn).append("))");    adminRoles=search(token,orgDN,sb.toString(),SearchControl.SCOPE_ONE);  } else {    adminRoles=new HashSet();    adminRoles.add(roleDN);  }  Iterator iter=adminRoles.iterator();  while (iter.hasNext()) {    String adminRoleDN=(String)iter.next();    try {      ManagedRole roleObj=(ManagedRole)UMSObject.getObject(token,new Guid(adminRoleDN));      roleObj.removeAllMembers();      AMStoreConnection amsc=new AMStoreConnection(internalToken);      AMRole role=amsc.getRole(adminRoleDN);      role.delete(recursive);    } catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message("DirectoryServicesImpl.removeAdminRole() " + "Unable to admin roles:",e);      }    }  }}  }
class C{  public static Date parseTime(String dateStr){  try {    return mSimpleTimeFormat.parse(dateStr);  } catch (  ParseException e) {    e.printStackTrace();    throw new RuntimeException("date formatDateTime error");  }}  }
class C{  public static String encodeBase64String(final byte[] binaryData){  return StringUtils.newStringUtf8(encodeBase64(binaryData,false));}  }
class C{  private static void transplantArrayItemAlias(Iterator propertyIt,XMPNode childNode,XMPNode baseArray) throws XMPException {  if (baseArray.getOptions().isArrayAltText()) {    if (childNode.getOptions().getHasLanguage()) {      throw new XMPException("Alias to x-default already has a language qualifier",XMPError.BADXMP);    }    XMPNode langQual=new XMPNode(XMPConst.XML_LANG,XMPConst.X_DEFAULT,null);    childNode.addQualifier(langQual);  }  propertyIt.remove();  childNode.setName(XMPConst.ARRAY_ITEM_NAME);  baseArray.addChild(childNode);}  }
class C{  @Override public int hashCode(){  return this.username != null ? this.username.hashCode() : 0;}  }
class C{  protected void fireContentsChanged(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.CONTENTS_CHANGED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).contentsChanged(e);    }  }}  }
class C{  private long acquireWrite(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    long m, s, ns;    if ((m=(s=state) & ABITS) == 0L) {      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;    } else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0; else     if (spins > 0) {      if (LockSupport.nextSecondarySeed() >= 0)       --spins;    } else     if ((p=wtail) == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(WMODE,p); else     if (node.prev != p)     node.prev=p; else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {      p.next=node;      break;    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long s, ns;        if (((s=state) & ABITS) == 0L) {          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {            whead=node;            node.prev=null;            return ns;          }        } else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  private Map<String,Mapping> validateJsonValue(final JsonPointer path,final JsonValue v) throws ResourceException {  final Map<String,Mapping> missingMappings=new LinkedHashMap<>(mappings);  if (v != null && !v.isNull()) {    if (v.isMap()) {      for (      final String attribute : v.asMap().keySet()) {        if (missingMappings.remove(toLowerCase(attribute)) == null && !isIncludedDefaultUserAttribute(attribute)) {          throw newBadRequestException(ERR_UNRECOGNIZED_FIELD.get(path.child(attribute)));        }      }    } else {      throw newBadRequestException(ERR_FIELD_WRONG_TYPE.get(path));    }  }  return missingMappings;}  }
class C{  public DiscoveryException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public void addElement(MarkData m){  insertElementAt(m,size());}  }
class C{  public Note(int note){  Validate.isTrue(note >= 0 && note <= 24,"The note value has to be between 0 and 24.");  this.note=(byte)note;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  public void onFileChange(final File file){}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public FSException(Throwable rootCause,String message){  super(message);  _message=message;  this.rootCause=rootCause;}  }
class C{  public boolean isPureJAASModulePresent(final String configName,final Configuration configuration) throws AuthLoginException {  if (enforceJAASThread) {    return true;  }  if (null == configuration) {    return true;  }  final AppConfigurationEntry[] entries=configuration.getAppConfigurationEntry(configName);  if (entries == null) {    throw new AuthLoginException("amAuth",AMAuthErrorCode.AUTH_CONFIG_NOT_FOUND,null);  }  for (  AppConfigurationEntry entry : entries) {    String className=entry.getLoginModuleName();    if (debug.messageEnabled()) {      debug.message("config entry: " + className);    }    if (isPureJAASModule(className)) {      return true;    } else     if (!isISModule(className)) {      categoriseModuleClassFromClassname(className);      if (isPureJAASModule(className)) {        return true;      }    }  }  return false;}  }
class C{  public void testRemoveNonComparableFromEmptyMap(){  tm=new TreeMap();  try {    tm.remove(new Object());  } catch (  ClassCastException expected) {  }}  }
class C{  synchronized public void addDTM(DTM dtm,int id,int offset){  if (id >= IDENT_MAX_DTMS) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }  int oldlen=m_dtms.length;  if (oldlen <= id) {    int newlen=Math.min((id + 256),IDENT_MAX_DTMS);    DTM new_m_dtms[]=new DTM[newlen];    System.arraycopy(m_dtms,0,new_m_dtms,0,oldlen);    m_dtms=new_m_dtms;    int new_m_dtm_offsets[]=new int[newlen];    System.arraycopy(m_dtm_offsets,0,new_m_dtm_offsets,0,oldlen);    m_dtm_offsets=new_m_dtm_offsets;  }  m_dtms[id]=dtm;  m_dtm_offsets[id]=offset;  dtm.documentRegistration();}  }
class C{  public FrameBodyTYER(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void error(String msg,Throwable t){  if (debugLevel > Debug.OFF) {    formatAndWrite("ERROR: ",msg,t);  }}  }
class C{  public void changePassword(SSOToken token,String entryDN,String attrName,String oldPassword,String newPassword) throws AMException, SSOException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,attrName,oldPassword,newPassword};    client.send(client.encodeMessage("changePassword",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.changePassword : entryDN" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.changePassword: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  SSOException ssoe) {    getDebug().error("RemoteServicesImpl.changePassword: caught SSOException=",ssoe);    throw ssoe;  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.changePassword : entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  protected void copyPrimitives(AbstractID3v2Tag copyObj){  logger.config("Copying primitives");  super.copyPrimitives(copyObj);  if (copyObj instanceof ID3v22Tag) {    ID3v22Tag copyObject=(ID3v22Tag)copyObj;    this.compression=copyObject.compression;    this.unsynchronization=copyObject.unsynchronization;  } else   if (copyObj instanceof ID3v23Tag) {    ID3v23Tag copyObject=(ID3v23Tag)copyObj;    this.compression=copyObject.compression;    this.unsynchronization=copyObject.unsynchronization;  } else   if (copyObj instanceof ID3v24Tag) {    ID3v24Tag copyObject=(ID3v24Tag)copyObj;    this.compression=false;    this.unsynchronization=copyObject.unsynchronization;  }}  }
class C{  @Deprecated public byte[] name(){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public static int ints(int nbFields){  return 4 * nbFields;}  }
class C{  public void testDivideRoundUpNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public static FSNameRegistrationRequest parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException, SAMLException {  FSNameRegistrationRequest retNameRegistrationRequest=new FSNameRegistrationRequest();  try {    FSUtils.debug.message("checking minor version");    retNameRegistrationRequest.majorVersion=Integer.parseInt(request.getParameter("MajorVersion"));    retNameRegistrationRequest.minorVersion=Integer.parseInt(request.getParameter("MinorVersion"));  } catch (  NumberFormatException ex) {    FSUtils.debug.error("FSNameRegistrationRequest.parseURLEncoded" + "Request: Invalid versions",ex);    throw new FSMsgException("invalidNumber",null);  }  FSUtils.debug.message("checking RequestID");  if (request.getParameter("RequestID") != null) {    retNameRegistrationRequest.requestID=request.getParameter("RequestID");  } else {    FSUtils.debug.error("FSNameRegistrationRequest.parseURLEncoded" + "Request: RequestID not found");    String[] args={IFSConstants.REQUEST_ID};    throw new FSMsgException("missingAttribute",args);  }  FSUtils.debug.message("checking instantString");  String instantString=request.getParameter("IssueInstant");  FSUtils.debug.message("instantString : " + instantString);  if (instantString == null || instantString.length() == 0) {    FSUtils.debug.error("FSNameRegistrationRequest.parseURLEncoded" + "Request: IssueInstant not found");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  try {    FSUtils.debug.message("calling : DateUtils.stringToDate.issueInstant");    retNameRegistrationRequest.issueInstant=DateUtils.stringToDate(instantString);  } catch (  ParseException e) {    FSUtils.debug.error("FSNameRegistrationRequest.parseURLEncoded" + "Request: Can not parse IssueInstant",e);    throw new FSMsgException("parseError",null);  }  if (request.getParameter("ProviderID") != null) {    retNameRegistrationRequest.providerId=request.getParameter("ProviderID");  } else {    FSUtils.debug.error("FSNameRegistrationRequest.parseURLEncoded" + "Request: Can not find ProviderID");    throw new FSMsgException("missingElement",null);  }  FSUtils.debug.message("start identifier processing");  String spNameFormat="";  String spNameQualifier="";  String spName="";  if (request.getParameter("SPNameFormat") != null) {    spNameFormat=request.getParameter("SPNameFormat");  }  if (request.getParameter("SPNameQualifier") != null) {    spNameQualifier=request.getParameter("SPNameQualifier");  }  if (request.getParameter("SPProvidedNameIdentifier") != null) {    spName=request.getParameter("SPProvidedNameIdentifier");  }  if (spName != null && !(spName.length() < 1)) {    retNameRegistrationRequest.setSPProvidedNameIdentifier(new SPProvidedNameIdentifier(spName,spNameQualifier,spNameFormat));  }  String idpNameFormat=null;  String idpNameQualifier=null;  String idpName=null;  if (request.getParameter("IDPNameFormat") != null) {    idpNameFormat=request.getParameter("IDPNameFormat");  }  if (request.getParameter("IDPNameQualifier") != null) {    idpNameQualifier=request.getParameter("IDPNameQualifier");  }  if (request.getParameter("IDPProvidedNameIdentifier") != null) {    idpName=request.getParameter("IDPProvidedNameIdentifier");  }  if (idpName != null && !(idpName.length() < 1)) {    retNameRegistrationRequest.idpProvidedNameIdentifier=new IDPProvidedNameIdentifier(idpName,idpNameQualifier,idpNameFormat);  }  String oldNameFormat=null;  String oldNameQualifier=null;  String oldName=null;  if (request.getParameter("OldNameFormat") != null) {    oldNameFormat=request.getParameter("OldNameFormat");  }  if (request.getParameter("OldNameQualifier") != null) {    oldNameQualifier=request.getParameter("OldNameQualifier");  }  if (request.getParameter("OldProvidedNameIdentifier") != null) {    oldName=request.getParameter("OldProvidedNameIdentifier");  }  if (oldName != null && !(oldName.length() < 1)) {    retNameRegistrationRequest.oldProvidedNameIdentifier=new OldProvidedNameIdentifier(oldName,oldNameQualifier,oldNameFormat);  }  if (request.getParameter("RelayState") != null) {    retNameRegistrationRequest.relayState=request.getParameter("RelayState");  }  return retNameRegistrationRequest;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  static synchronized boolean credentialsAreValid(final String username,final String password) throws IOException {  if (isNullOrEmpty(username) || isNullOrEmpty(password)) {    return false;  }  boolean result=false;  Properties credentials=new Properties();  InputStream in=SampleHandler.class.getResourceAsStream("/credentials.properties");  credentials.load(in);  final String pwd=credentials.getProperty(username);  if (pwd != null) {    result=pwd.equals(password);  }  in.close();  return result;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  @KnownFailure("not supported") public void testUpdate7() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.executeUpdate("UPDATE " + DatabaseCreator.FKSTRICT_TABLE + " SET value = 'updated' WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE value = 'updated';");  r.next();  assertEquals("Should be 1 row",1,r.getInt(1));  r.close();}  }
class C{  public ClearPasswordStorageSchemeTestCase(){  super("cn=Clear,cn=Password Storage Schemes,cn=config");}  }
class C{  public static int waitForPostResponse() throws InterruptedException {  long timeout=System.currentTimeMillis() + 5000;  while (postResponseCounter.get() == 0 && System.currentTimeMillis() < timeout) {    Thread.sleep(10);  }  return postResponseCounter.get();}  }
class C{  public boolean redo(Collection<UndoObjectStorable> p_cancelled_objects,Collection<UndoObjectStorable> p_restored_objects){  if (stack_level >= deleted_objects_stack.size())   return false;  stack_level++;  Iterator<UndoObjectNode> it=objects_map.values().iterator();  while (it.hasNext()) {    UndoObjectNode curr_node=it.next();    if (curr_node.redo_object != null && curr_node.redo_object.undo_level == stack_level) {      objects_map.put(curr_node.object,curr_node.redo_object);      if (p_cancelled_objects != null) {        p_cancelled_objects.add(curr_node.object);      }      if (p_restored_objects != null) {        p_restored_objects.add(curr_node.redo_object.object);      }    } else     if (curr_node.undo_level == stack_level) {      p_restored_objects.add(curr_node.object);    }  }  Collection<UndoObjectNode> curr_delete_list=deleted_objects_stack.elementAt(stack_level - 1);  Iterator<UndoObjectNode> it2=curr_delete_list.iterator();  while (it2.hasNext()) {    UndoObjectNode curr_deleted_node=it2.next();    while (curr_deleted_node.redo_object != null && curr_deleted_node.redo_object.undo_level <= stack_level) {      curr_deleted_node=curr_deleted_node.redo_object;    }    if (objects_map.remove(curr_deleted_node.object) == null) {      System.out.println("previous deleted object not found");    }    if (p_restored_objects == null || !p_restored_objects.remove(curr_deleted_node.object)) {      if (p_cancelled_objects != null) {        p_cancelled_objects.add(curr_deleted_node.object);      }    }  }  return true;}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  private void onlyKeepAttributesWithAllOptions(List<Attribute> attributes,AttributeDescription attributeDescription){  for (Iterator<Attribute> it=attributes.iterator(); it.hasNext(); ) {    Attribute a=it.next();    if (!a.getAttributeDescription().isSubTypeOf(attributeDescription)) {      it.remove();    }  }}  }
class C{  private Entry makeEntry(String dn) throws Exception {  return TestCaseUtils.makeEntry("dn: " + dn,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: 1User","sn: 1","cn: 1User 1");}  }
class C{  public int enumerate(ThreadGroup[] groups,boolean recurse){  return enumerateGeneric(groups,recurse,0,false);}  }
class C{  public synchronized T pop(){  T content=null;  if (last != null) {    Entry element=last;    last=last.getPrevious();    content=element.getContent();    if (last == null) {      first=null;    } else {      last.setNext(null);    }    size--;    element.invalidate();  }  return content;}  }
class C{  public static Node selectSingleNode(Node doc,String str,Node nsNode) throws XPathException {  SimpleNamespaceContext nsctx=new SimpleNamespaceContext(nsNode);  return selectSingleNode(doc,str,nsctx);}  }
class C{  public boolean isSendWasCalled(){  return this.sendWasCalled;}  }
class C{  public boolean keepStats(){  return currentConfig.isKeepStats();}  }
class C{  public void unsetEncodeTables(){  this.qTables=null;  this.DCHuffmanTables=null;  this.ACHuffmanTables=null;}  }
class C{  private static void tryWords(char[] oldSolution,int offset,int wordsLeft,int minLength,String[] words) throws IOException {  for (  String word : words) {    char[] solution=oldSolution.clone();    word=word.toLowerCase();    if (offset == 0) {      word=word.substring(0,1).toUpperCase() + word.substring(1);    }    int newOffset=word.length() + offset + 1;    if (newOffset <= solution.length) {      for (int i=0; i < word.length(); i++) {        solution[offset + i]=word.charAt(i);      }      solution[offset + word.length()]=' ';      if (checkAndSolve(solution,true)) {        if (wordsLeft >= 1) {          tryWords(solution,newOffset,wordsLeft - 1,minLength,words);        } else         if (newOffset >= minLength) {          checkAndSolve(solution,false);        }      }    }  }}  }
class C{  public boolean remove(Object o){  DigraphNode node=(DigraphNode)poNodes.get(o);  if (node == null) {    return false;  }  poNodes.remove(o);  node.dispose();  return true;}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Document doc,java.security.cert.Certificate cert) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("verifyXMLSignature: " + "document is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String certAlias=keystore.getCertificateAlias(cert);  return verifyXMLSignature(doc,certAlias);}  }
class C{  public void add(Permission permission){  if (!(permission instanceof SocketPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,(SocketPermission)permission);  }}  }
class C{  public ByteArrayBuilder appendString(String s){  try {    if (s != null && s.length() > 0) {      appendByteArray(s.getBytes("UTF-8"));    }    return appendZeroSeparator();  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Should never happen",e);  }}  }
class C{  public W3CEndpointReferenceBuilder attribute(QName name,String value){  if (name == null || value == null) {    throw new IllegalArgumentException("The extension attribute name or value cannot be null.");  }  attributes.put(name,value);  return this;}  }
class C{  @Override public void sign(PrivateKey privateKey,X509Certificate cert) throws SAML2Exception {  Element signatureElement=SigManager.getSigInstance().sign(toXMLString(true,true),getID(),privateKey,cert);  signature=XMLUtils.print(signatureElement);  signedXMLString=XMLUtils.print(signatureElement.getOwnerDocument().getDocumentElement(),"UTF-8");  makeImmutable();}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public IPv4AddressRange(){  low=0;  high=0;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public Builder withAppleEndpoint(String appleEndpoint){  config.setAppleEndpoint(appleEndpoint);  return this;}  }
class C{  private BigDecimal convertIntToBigDecimal(int quoteParam){  BigDecimal quoteParamBigDecimal=new BigDecimal(quoteParam).divide(new BigDecimal(100),new MathContext(8,RoundingMode.HALF_DOWN));  return quoteParamBigDecimal;}  }
class C{  public NoFramesView(Element elem,int axis){  super(elem,axis);  visible=false;}  }
class C{  public Event(){  super(EVENT);}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public void testCertificateFactory06() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown  when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private float adjustQuality(final String imgQuality){  float helper;  try {    helper=Math.abs(Float.parseFloat(imgQuality));  } catch (  NumberFormatException e) {    return DEFAULT_IMG_QUALITY;  }  if (helper == 0 || helper == 1) {    return helper;  } else   if (helper > 0 && helper < 1) {    helper=(Math.round(helper * MAX_QUALITY_FLOAT) / MAX_QUALITY_FLOAT);  } else   if (helper > 1 && helper <= MAX_QUALITY) {    helper=(Math.round(helper) / MAX_QUALITY_FLOAT);  } else {    helper=DEFAULT_IMG_QUALITY;  }  return helper;}  }
class C{  public XBooleanStatic(boolean b){  super(b);  m_val=b;}  }
class C{  public void testDivideBigDecimalScaleRoundingModeCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=100;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=45;  RoundingMode rm=RoundingMode.CEILING;  String c="1E-45";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public void stop(){  write.lock();  try {    sorted.clear();    for (    Route route : routes.values()) {      route.destroy();    }    routes.clear();  }  finally {    write.unlock();  }}  }
class C{  @Override public void validateIdentity(final String accessToken) throws OAuthVerificationException {  final JsonValue response=sendGetRequest(URI.create(config.get(USER_INFO_ENDPOINT).asString()),accessToken);  if (response.get(this.subjectKey) != null) {    this.subject=response.get(this.subjectKey).asString();  } else {    throw new OAuthVerificationException("Unable to validate identity.");  }}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final Uri uri,String title){  return createFile(folder,uri,title,getContentResolver().getType(uri));}  }
class C{  public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass())) {    return false;  } else   if (matchObj == this)   return true;  SIPResponse that=(SIPResponse)matchObj;  StatusLine rline=that.statusLine;  if (this.statusLine == null && rline != null)   return false; else   if (this.statusLine == rline)   return super.match(matchObj); else {    return statusLine.match(that.statusLine) && super.match(matchObj);  }}  }
class C{  Object adjustValue(Object value,Map attributes,Object field,int direction) throws BadLocationException, ParseException {  return null;}  }
class C{  protected Object createSubtreeTimingMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  subtreePolicyTiming=new SubtreeTimingImpl(this);  return subtreePolicyTiming;}  }
class C{  @Override public void flush() throws IOException {  flushBytes(true);}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val1=exp1.apply(name);  ValueExp val2=exp2.apply(name);  String sval1;  String sval2;  double dval1;  double dval2;  long lval1;  long lval2;  boolean numeric=val1 instanceof NumericValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      lval1=((NumericValueExp)val1).longValue();      lval2=((NumericValueExp)val2).longValue();switch (op) {case Query.PLUS:        return Query.value(lval1 + lval2);case Query.TIMES:      return Query.value(lval1 * lval2);case Query.MINUS:    return Query.value(lval1 - lval2);case Query.DIV:  return Query.value(lval1 / lval2);}} else {dval1=((NumericValueExp)val1).doubleValue();dval2=((NumericValueExp)val2).doubleValue();switch (op) {case Query.PLUS:return Query.value(dval1 + dval2);case Query.TIMES:return Query.value(dval1 * dval2);case Query.MINUS:return Query.value(dval1 - dval2);case Query.DIV:return Query.value(dval1 / dval2);}}} else {sval1=((StringValueExp)val1).getValue();sval2=((StringValueExp)val2).getValue();switch (op) {case Query.PLUS:return new StringValueExp(sval1 + sval2);default :throw new BadStringOperationException(opString());}}throw new BadBinaryOpValueExpException(this);}  }
class C{  public static int primaryOrder(int order){  return ((order & PRIMARY_ORDER_MASK_) >> PRIMARY_ORDER_SHIFT_) & UNSIGNED_16_BIT_MASK_;}  }
class C{  public String toString(){  return String.valueOf(val);}  }
class C{  public ServerException(){  this("The client identifier provided is invalid, the client failed to authenticate, the client did not include its credentials, provided multiple client credentials, or used unsupported credentials type.");}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  public static WindowStateListener add(WindowStateListener a,WindowStateListener b){  return (WindowStateListener)addInternal(a,b);}  }
class C{  public static LineIterator lineIterator(File file) throws IOException {  return lineIterator(file,null);}  }
class C{  public Leaves(final Material type){  this(type,DEFAULT_SPECIES,DEFAULT_DECAYABLE);}  }
class C{  public JScrollBar createVerticalScrollBar(){  return new ScrollBar(JScrollBar.VERTICAL);}  }
class C{  public boolean startsWith(Name n){  if (n instanceof CompositeName) {    return (impl.startsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  public static <T>T unmarshal(URI xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  private static int parseDimension(int overrideValue,Node nodeAttr,boolean override){  assert nodeAttr != null;  String content=nodeAttr.getTextContent();  assert content.endsWith("dp");  int originalValue=Integer.parseInt(content.substring(0,content.length() - 2));  if (override) {    nodeAttr.setTextContent(overrideValue + "dp");  }  return originalValue;}  }
class C{  private boolean promptIfRequiredForStartServer(){  boolean startServer=false;  if (!argParser.doNotStartArg.isPresent()) {    println();    final LocalizableMessage message=INFO_INSTALLDS_PROMPT_START_SERVER.get();    try {      final boolean defaultValue=(lastResetStartServer == null) ? true : lastResetStartServer;      startServer=confirmAction(message,defaultValue);    } catch (    final ClientException ce) {      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));      startServer=true;    }  }  return startServer;}  }
class C{  public static String generateAssertionHandle(){  String result=null;  String encodedID=generateID();  if (encodedID != null) {    try {      result=encodedID.substring(0,20);    } catch (    Exception e) {      FSUtils.debug.error("FSUtil.generateAssertionHandle:",e);    }  }  return result;}  }
class C{  public void testFloatValuePosMaxValue(){  byte[] a={0,-1,-1,-1,0,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.MAX_VALUE);}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_SEARCH_RESULT_ENTRY);  stream.writeOctetString(dn.toString());  stream.writeStartSequence();  SearchResultEntry tmp=entry;  if (ldapVersion == 3 && tmp != null) {    for (    List<Attribute> attrList : tmp.getUserAttributes().values()) {      for (      Attribute a : attrList) {        writeAttribute(stream,a);      }    }    for (    List<Attribute> attrList : tmp.getOperationalAttributes().values()) {      for (      Attribute a : attrList) {        writeAttribute(stream,a);      }    }  } else {    for (    LDAPAttribute attr : getAttributes()) {      attr.write(stream);    }  }  stream.writeEndSequence();  stream.writeEndSequence();}  }
class C{  @Override public void onBackPressed(){  getFragmentManager().popBackStack();  int count=getFragmentManager().getBackStackEntryCount();  Fragment currentFragment=getFragmentManager().findFragmentById(R.id.fragment_container);  if (currentFragment instanceof RosterFragment || currentFragment instanceof VideoFragment) {    this.participantsButton.setEnabled(true);    this.videoButton.setEnabled(true);    this.conversationsToolbarLayout.setVisibility(View.VISIBLE);  }  if (count == 0) {    super.onBackPressed();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementempty.class,args);}  }
class C{  protected File resolveFile(final String s){  if (getProject() == null) {    return FileUtils.getFileUtils().resolveFile(null,s);  } else {    return FileUtils.getFileUtils().resolveFile(getProject().getBaseDir(),s);  }}  }
class C{  @Inject public SessionAuditor(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,PrivilegedAction<SSOToken> adminTokenAction){  this.auditEventPublisher=auditEventPublisher;  this.auditEventFactory=auditEventFactory;  this.adminTokenAction=adminTokenAction;}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {  addAttribute(qName,value);}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public static void shutdownServer(String reason) throws Exception {  Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);  if (isStarted()) {    debug.message("EmbeddedOpenDS.shutdown server...");    DirectoryServer.shutDown("com.sun.identity.setup.EmbeddedOpenDS",LocalizableMessage.EMPTY);    int sleepcount=0;    while (DirectoryServer.isRunning() && (sleepcount < 60)) {      sleepcount++;      Thread.sleep(1000);    }    serverStarted=false;    debug.message("EmbeddedOpenDS.shutdown server success.");  }}  }
class C{  public static boolean containsUnexpectedMessage(TlsContext tlsContext){  return (getUnexpectedMessagePosition(tlsContext) != -1);}  }
class C{  private Map<String,Object> deriveFinalState(ModificationItem[] mods){  Map<String,Object> finalState=new CaseInsensitiveHashMap<>(getInitialState());  for (int i=0; i < mods.length; i++) {    Attribute currentAttr=mods[i].getAttribute();    if (mods[i].getModificationOp() == DirContext.REMOVE_ATTRIBUTE) {      finalState.remove(currentAttr.getID());    } else {      HashSet values=new HashSet();      for (int j=0; j < currentAttr.size(); j++) {        try {          values.add(currentAttr.get(j));        } catch (        NamingException e) {        }      }      finalState.put(currentAttr.getID(),values);    }  }  return finalState;}  }
class C{  private String attributeName(Request request){  return getClass().getName() + ':' + request.getUri().getScheme()+ ':'+ request.getUri().getHost()+ ':'+ request.getUri().getPort()+ ':'+ "userpass";}  }
class C{  private void removeListenersMap(String name){synchronized (listenersMap) {    Set set=(Set)listenersMap.get(name);    if (set == null) {      if (debug.messageEnabled()) {        debug.message("remove, no listeners for " + name);      }      return;    } else {      Iterator it=set.iterator();      while (it.hasNext()) {        AMSDKEventListener l=(AMSDKEventListener)it.next();        if (debug.messageEnabled()) {          debug.message("remove SDK listener on " + name + " for dn="+ l.getListenedObject().getDN());        }        l.getListenedObject().removeEventListener(l);        l.setListenedObject(null);      }      listenersMap.remove(name);    }  }  AMAuthLevelManager.getInstance().removeAuthConfigListener(name);}  }
class C{  public DHPrivateKeySpec(BigInteger x,BigInteger p,BigInteger g){  this.x=x;  this.p=p;  this.g=g;}  }
class C{  public SessionTracker(Context context,Session.StatusCallback callback){  this(context,callback,null);}  }
class C{  public boolean toThunderState(){  return to;}  }
class C{  private boolean validateType(Set values,Map env) throws SMSException {  String installTime=SystemProperties.get(Constants.SYS_PROPERTY_INSTALL_TIME,"false");  String[] array;  AttributeSchema.Type type=as.getType();  if (type == null)   return (true);  if (type.equals(AttributeSchema.Type.SINGLE)) {    if (values.size() > 1) {      return (false);    } else {      return (true);    }  }  if (type.equals(AttributeSchema.Type.LIST)) {    int size=values.size();    int minValue=as.getMinValue();    int maxValue=as.getMaxValue();    if (!(minValue == -1 || maxValue == -1)) {      if (size < minValue || size > maxValue) {        return (false);      }    }    return (true);  }  if (type.equals(AttributeSchema.Type.SINGLE_CHOICE)) {    if (values.size() > 1) {      return (false);    } else {      if (installTime.equalsIgnoreCase("true")) {        return true;      }      array=as.getChoiceValues(env);      Iterator it=values.iterator();      String val=(it.hasNext()) ? (String)it.next() : null;      if (val == null) {        return (true);      }      for (int i=0; i < array.length; i++) {        if (array[i].equalsIgnoreCase(val)) {          return (true);        }      }      return (false);    }  }  if (type.equals(AttributeSchema.Type.MULTIPLE_CHOICE)) {    if (installTime.equalsIgnoreCase("true")) {      return true;    }    array=as.getChoiceValues(env);    int size=values.size();    int minValue=as.getMinValue();    int maxValue=as.getMaxValue();    if (!(minValue == -1 || maxValue == -1)) {      if (size < minValue || size > maxValue) {        return (false);      }    }    if (size == 0) {      return (true);    }    if ((array == null) || (array.length == 0)) {      return false;    }    Iterator it=values.iterator();    int arraySize=array.length;    while (it.hasNext()) {      boolean match=false;      String value=(String)it.next();      for (int i=0; i < arraySize; i++) {        if (array[i].equalsIgnoreCase(value)) {          match=true;          break;        }      }      if (!match) {        return (false);      }    }    return (true);  }  if (type.equals(AttributeSchema.Type.VALIDATOR)) {    return (true);  }  if (type.equals(AttributeSchema.Type.SIGNATURE)) {    return (true);  }  String[] args={as.getName()};  throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-invalid_attribute_type",args);}  }
class C{  public MetadataContainer findMetadataContainer(final ContainerType type){  MetadataContainer result=(MetadataContainer)getFirst(type.getContainerGUID(),MetadataContainer.class);  if (result == null) {    result=(MetadataContainer)getExtendedHeader().getFirst(type.getContainerGUID(),MetadataContainer.class);  }  return result;}  }
class C{  public JKMobileContext createMobileContext(){  return new JKMobileContext();}  }
class C{  public static final byte[] encode(byte[] src){  return encode(src,0);}  }
class C{  public static ArgumentException unknownValueForMultiValuedProperty(String value,String propertyName){  LocalizableMessage msg=ERR_DSCFG_ERROR_VALUE_DOES_NOT_EXIST.get(value,propertyName);  return new ArgumentException(msg);}  }
class C{  private static LDAPFilter createLessOrEqualFilter(AttributeValueAssertion ava) throws IOException {  return LDAPFilter.createLessOrEqualFilter(ava.getName(),ByteStringUtility.convertValue(ava.getValue()));}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String classMethod="CookieReaderServlet.doGetPost: ";  preferred_cookie_name=CookieUtils.getPreferCookieName(request.getRequestURI());  if (preferred_cookie_name == null) {    CookieUtils.debug.error(classMethod + "The request uri is null.");    CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"nullRequestUri",CookieUtils.bundle.getString("nullRequestUri"));    return;  } else   if (preferred_cookie_name.equals("")) {    CookieUtils.debug.error(classMethod + "Cannot match the cookie name from " + "the request uri.");    CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"invalidRequestUri",CookieUtils.bundle.getString("invalidRequestUri"));    return;  }  try {    boolean isValidReturn=false;    String returnURL=request.getParameter(IDPDiscoveryConstants.LRURL);    if (returnURL == null || returnURL.trim().length() <= 0) {      CookieUtils.debug.error(classMethod + "Redirect URL not specified. " + "Cannot send preferred idp in query string");      isValidReturn=false;    } else {      isValidReturn=true;    }    if (isValidReturn) {      String cookieValue=getPreferredIdpCookie(request);      if (cookieValue != null) {        returnURL=appendCookieToReturnURL(returnURL,cookieValue);        if (CookieUtils.debug.messageEnabled()) {          CookieUtils.debug.message(classMethod + "preferred idp:" + cookieValue);        }      }      response.sendRedirect(returnURL);      return;    } else {      CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"noRedirectionURL",CookieUtils.bundle.getString("noRedirectionURL"));      return;    }  } catch (  Exception e) {    CookieUtils.debug.error(classMethod,e);    CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"readerServiceFailed",e.getMessage());    return;  }}  }
class C{  public void initializeGlobalArguments(OutputStream outStream) throws ArgumentException {  ArrayList<Argument> defaultArgs=new ArrayList<>(createGlobalArguments(outStream,alwaysSSL));  defaultArgs.remove(secureArgsList.getPortArg());  defaultArgs.remove(secureArgsList.getHostNameArg());  defaultArgs.remove(verboseArg);  defaultArgs.remove(noPropertiesFileArg);  defaultArgs.remove(propertiesFileArg);  noPromptArg=noPromptArgument();  defaultArgs.add(0,noPromptArg);  scriptFriendlyArg=scriptFriendlyArgument();  defaultArgs.add(1,scriptFriendlyArg);  StringArgument propertiesFileArgument=propertiesFileArgument();  defaultArgs.add(propertiesFileArgument);  setFilePropertiesArgument(propertiesFileArgument);  BooleanArgument noPropertiesFileArgument=noPropertiesFileArgument();  defaultArgs.add(noPropertiesFileArgument);  setNoPropertiesFileArgument(noPropertiesFileArgument);  initializeGlobalArguments(defaultArgs);  refreshArg=IntegerArgument.builder("refresh").shortIdentifier('r').description(INFO_DESCRIPTION_REFRESH_PERIOD.get()).lowerBound(1).valuePlaceholder(INFO_PERIOD_PLACEHOLDER.get()).buildArgument();  addGlobalArgument(refreshArg,ioArgGroup);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void writeCompareResult(final int messageID,final CompareResult result) throws IOException {  logger.trace("ENCODE LDAP COMPARE RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_COMPARE_RESPONSE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  public void processSubscribe(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("notifier: got an Subscribe sending OK");    logger.info("notifier:  " + request);    logger.info("notifier : dialog = " + requestEvent.getDialog());    EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);    this.gotSubscribeRequest=true;    AbstractSubsnotifyTestCase.assertTrue("Event header is null ",eventHeader != null);    Response response=null;    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    boolean isInitial=requestEvent.getDialog() == null;    if (isInitial) {      String toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));      response=messageFactory.createResponse(202,request);      ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);      AbstractSubsnotifyTestCase.assertTrue("To tag should  be null ",toHeader.getTag() == null);      toHeader.setTag(toTag);      this.dialog=st.getDialog();      this.dialog.terminateOnBye(false);      AbstractSubsnotifyTestCase.assertTrue("initial -- dialog assigned to the transaction not null ",dialog != null);      AbstractSubsnotifyTestCase.assertTrue("Dialog state should be null ",dialog.getState() == null);    } else {      response=messageFactory.createResponse(200,request);    }    Address address=addressFactory.createAddress("Notifier <sip:127.0.0.1>");    ((SipURI)address.getURI()).setPort(sipProvider.getListeningPoint(transport).getPort());    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ExpiresHeader expires=(ExpiresHeader)request.getHeader(ExpiresHeader.NAME);    if (expires == null) {      expires=headerFactory.createExpiresHeader(30);    }    response.addHeader(expires);    st.sendResponse(response);    Request notifyRequest=dialog.createRequest("NOTIFY");    ((SipURI)contactHeader.getAddress().getURI()).setParameter("id","not");    SubscriptionStateHeader sstate=headerFactory.createSubscriptionStateHeader(isInitial ? SubscriptionStateHeader.PENDING : SubscriptionStateHeader.TERMINATED);    if (sstate.getState().equalsIgnoreCase("terminated")) {      sstate.setReasonCode("deactivated");    }    notifyRequest.addHeader(sstate);    notifyRequest.setHeader(eventHeader);    notifyRequest.setHeader(contactHeader);    ClientTransaction ct=sipProvider.getNewClientTransaction(notifyRequest);    dialog.sendRequest(ct);    logger.info("NOTIFY Branch ID " + ((ViaHeader)request.getHeader(ViaHeader.NAME)).getParameter("branch"));    logger.info("Dialog " + dialog);    logger.info("Dialog state after pending NOTIFY: " + dialog.getState());    AbstractSubsnotifyTestCase.assertTrue("Dialog state after pending NOTIFY ",dialog.getState() == DialogState.CONFIRMED);    if (isInitial) {      Thread myEventSource=new Thread(new MyEventSource(this,eventHeader));      myEventSource.start();    }  } catch (  Throwable ex) {    logger.info(ex.getMessage(),ex);    TestHarness.fail("Failed to processs Subscriber, because of " + ex.getMessage());  }}  }
class C{  public LDAPPreReadResponseControl(SearchResultEntry searchEntry){  this(false,searchEntry);}  }
class C{  public void testDivideAndRemainderMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=75;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String res="277923185514690367474770683";  int resScale=0;  String rem="1.3032693871288309587558885943391070087960319452465789990E-15";  int remScale=70;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result[]=aNumber.divideAndRemainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result[0].toString());  assertEquals("incorrect quotient scale",resScale,result[0].scale());  assertEquals("incorrect remainder value",rem,result[1].toString());  assertEquals("incorrect remainder scale",remScale,result[1].scale());}  }
class C{  public String toString(){  return ("MembershipPrincipal: " + name);}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if (func instanceof FuncExtFunction) {    String namespace=((FuncExtFunction)func).getNamespace();    m_sroot.getExtensionNamespacesManager().registerExtension(namespace);  } else   if (func instanceof FuncExtFunctionAvailable) {    String arg=((FuncExtFunctionAvailable)func).getArg0().toString();    if (arg.indexOf(":") > 0) {      String prefix=arg.substring(0,arg.indexOf(":"));      String namespace=this.m_sroot.getNamespaceForPrefix(prefix);      m_sroot.getExtensionNamespacesManager().registerExtension(namespace);    }  }  return true;}  }
class C{  public PaintEvent(Component source,int id,Rectangle updateRect){  super(source,id);  this.updateRect=updateRect;}  }
class C{  public static void main(String[] args){  int exitCode=mainDiff(args,false,System.out,System.err);  if (exitCode != 0) {    System.exit(filterExitCode(exitCode));  }}  }
class C{  public static void clearBackend(String backendId,String baseDN) throws Exception {  Backend<?> b=DirectoryServer.getBackend(backendId);  if (clearBackend(b) && baseDN != null) {    Entry e=createEntry(DN.valueOf(baseDN));    DirectoryServer.getBackend(backendId).addEntry(e,mock(AddOperation.class));  }}  }
class C{  public static String convertFrameID22To24(String identifier){  if (identifier.length() < 3) {    return null;  }  String id=ID3Frames.convertv22Tov23.get(identifier.substring(0,3));  if (id != null) {    String v23id=ID3Frames.convertv23Tov24.get(id);    if (v23id == null) {      if (ID3v24Frames.getInstanceOf().getIdToValueMap().get(id) != null) {        return id;      } else {        return null;      }    } else {      return v23id;    }  } else {    return null;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionType createSecretKeyProtectionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionTypeImpl();}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms.values());  }}  }
class C{  public void actionPerformed(ActionEvent evt){  Element element=getElement();  StringBuilder dataBuffer=new StringBuilder();  HTMLDocument doc=(HTMLDocument)getDocument();  AttributeSet attr=element.getAttributes();  String type=(String)attr.getAttribute(HTML.Attribute.TYPE);  if (type.equals("submit")) {    getFormData(dataBuffer);    submitData(dataBuffer.toString());  } else   if (type.equals("reset")) {    resetForm();  } else   if (type.equals("text") || type.equals("password")) {    if (isLastTextOrPasswordField()) {      getFormData(dataBuffer);      submitData(dataBuffer.toString());    } else {      getComponent().transferFocus();    }  }}  }
class C{  public static boolean isNativeCodeEnabled(){  return nativeEnabled;}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  public PersistentCookieAuthModule(CoreWrapper coreWrapper,PersistentCookieModuleWrapper persistentCookieModuleWrapper){  super(AUTH_RESOURCE_BUNDLE_NAME,persistentCookieModuleWrapper);  this.coreWrapper=coreWrapper;  this.persistentCookieModuleWrapper=persistentCookieModuleWrapper;}  }
class C{  protected void checkIfDeletedOrg(SSOToken token,String orgDN) throws AMEntryExistsException {  Attr attr;  try {    PersistentObject po=UMSObject.getObject(token,new Guid(orgDN));    attr=po.getAttribute(ORG_STATUS_ATTRIBUTE);  } catch (  UMSException ue) {    if (debug.messageEnabled())     debug.message("Compliance.checkIfDeletedOrg(): ",ue);    return;  }  if (((attr != null) && (attr.size() != 0)) && attr.contains("deleted")) {    debug.warning("Compliance.checkIfDeletedOrg(): " + "deleted org entry: " + orgDN);    throw new AMEntryExistsException(AMSDKBundle.getString("361"),"361");  }}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int x=0;  int y=alloc.y + SPACE_ABOVE + (int)topMargin;  int width=alloc.width - (int)(leftMargin + rightMargin);  if (widthValue != null) {    width=(int)widthValue.getValue((float)width);  }  int height=alloc.height - (SPACE_ABOVE + SPACE_BELOW + (int)topMargin+ (int)bottomMargin);  if (size > 0)   height=size;switch (alignment) {case StyleConstants.ALIGN_CENTER:    x=alloc.x + (alloc.width / 2) - (width / 2);  break;case StyleConstants.ALIGN_RIGHT:x=alloc.x + alloc.width - width - (int)rightMargin;break;case StyleConstants.ALIGN_LEFT:default :x=alloc.x + (int)leftMargin;break;}if (noshade != null) {g.setColor(Color.black);g.fillRect(x,y,width,height);} else {Color bg=getContainer().getBackground();Color bottom, top;if (bg == null || bg.equals(Color.white)) {top=Color.darkGray;bottom=Color.lightGray;} else {top=Color.darkGray;bottom=Color.white;}g.setColor(bottom);g.drawLine(x + width - 1,y,x + width - 1,y + height - 1);g.drawLine(x,y + height - 1,x + width - 1,y + height - 1);g.setColor(top);g.drawLine(x,y,x + width - 1,y);g.drawLine(x,y,x,y + height - 1);}}  }
class C{  private void ensureOpen() throws IOException {  if (in == null)   throw new IOException("Stream closed");}  }
class C{  protected static boolean contains(String value,int start,int length,String[] criteria){  boolean result=false;  if (start >= 0 && start + length <= value.length()) {    String target=value.substring(start,start + length);    for (int i=0; i < criteria.length; i++) {      if (target.equals(criteria[i])) {        result=true;        break;      }    }  }  return result;}  }
class C{  private void dispatchDirectInvoke(TransactInfo transactInfo,String paramMarshalling){  ServerHandler serverHandler=handlers.get(transactInfo.getInvokeName());  if (serverHandler != null) {    ServerCallback serverCallback=new ServerCallback(mJsBridge,transactInfo.getCallbackId());    serverHandler.handle(paramMarshalling,serverCallback);  } else {    if (JsBridge.DEBUG) {      Log.w("dispatchDirectInvoke","no ServerHandler:" + transactInfo.getInvokeName());    }  }}  }
class C{  public void finer(Supplier<String> msgSupplier){  log(Level.FINER,msgSupplier);}  }
class C{  public ID3v11Tag(){}  }
class C{  public int addClient(SSOToken token,Map props) throws AMClientCapException {  int status=0;  String ct=getClientType(props);  Map m=getKnownProperties(props);  Map entityMap=new HashMap(1);  entityMap.put(ct,m);  try {    AMStoreConnection conn=new AMStoreConnection(token);    AMOrganizationalUnit amOU=conn.getOrganizationalUnit(databaseDN);    amOU.createEntities(UMS_ADD_TEMPLATE_NAME,entityMap);  } catch (  Exception e) {    String[] errArgs={ct};    AMClientCapException ace=new AMClientCapException(BUNDLE_NAME,ADD_FAILED,errArgs);    String msg=ace.getMessage();    debug.error(dbStr + msg,e);    throw ace;  }  return status;}  }
class C{  private void savesoapMni(String mnisoapLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (mnisoapLocation != null && mnisoapLocation.length() > 0) {    ManageNameIDServiceElement slsElemSoap=objFact.createManageNameIDServiceElement();    slsElemSoap.setBinding(soapBinding);    slsElemSoap.setLocation(mnisoapLocation);    manageNameIdList.add(slsElemSoap);  }}  }
class C{  public void initializeRootDNs() throws ConfigException, InitializationException {  RootDNCfg rootDNCfg=serverContext.getRootConfig().getRootDN();  rootPrivilegeChangeListener.setDefaultRootPrivileges(rootDNCfg);  rootDNCfg.addChangeListener(rootPrivilegeChangeListener);  rootDNCfg.addRootDNUserAddListener(this);  rootDNCfg.addRootDNUserDeleteListener(this);  for (  String name : rootDNCfg.listRootDNUsers()) {    RootDNUserCfg rootUserCfg=rootDNCfg.getRootDNUser(name);    rootUserCfg.addChangeListener(this);    DirectoryServer.registerRootDN(rootUserCfg.dn());    HashSet<DN> altBindDNs=new HashSet<>();    for (    DN alternateBindDN : rootUserCfg.getAlternateBindDN()) {      try {        altBindDNs.add(alternateBindDN);        DirectoryServer.registerAlternateRootDN(rootUserCfg.dn(),alternateBindDN);      } catch (      DirectoryException de) {        throw new InitializationException(de.getMessageObject());      }    }    alternateBindDNs.put(rootUserCfg.dn(),altBindDNs);  }}  }
class C{  @Override public void clearUserRules(){  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_USER_RULES);  editor.commit();}  }
class C{  public PdfCanvas ellipse(double x1,double y1,double x2,double y2){  return arc(x1,y1,x2,y2,0f,360f);}  }
class C{  public void endMonitoringOf(final InetSocketAddress socketAddress){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4SocketAddress(socketAddress));}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  void appendStartDocument(){  m_docElement=NULL;  initDocument(0);}  }
class C{  public void testColumn_count() throws Exception {  String selectStmt="select * from " + DatabaseCreator.SIMPLE_TABLE1;  st=db.prepare(selectStmt);  assertEquals(3,st.column_count());  st.step();  int columnCount=st.column_count();  assertNotNull(columnCount);  assertEquals(3,columnCount);  selectStmt="select ? from " + DatabaseCreator.SIMPLE_TABLE1;  st=db.prepare(selectStmt);  assertEquals(3,st.column_count());  st.bind(1,"*");  st.step();  columnCount=st.column_count();  assertNotNull(columnCount);  assertEquals(3,columnCount);}  }
class C{  public static void deleteFileIfExistsWithRetry(Path path) throws IOException {  try {    if (Files.exists(path))     deleteFileWithRetry0(path);  } catch (  InterruptedException x) {    throw new IOException("Interrupted while deleting.",x);  }}  }
class C{  public void testCreateDocumentType1() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String qualifiedName="test:root";  String publicId;  String systemId;  List<String> publicIds=new ArrayList<String>();  publicIds.add("1234");  publicIds.add("test");  List<String> systemIds=new ArrayList<String>();  systemIds.add("");  systemIds.add("test");  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  for (int indexN1005D=0; indexN1005D < publicIds.size(); indexN1005D++) {    publicId=(String)publicIds.get(indexN1005D);    for (int indexN10061=0; indexN10061 < systemIds.size(); indexN10061++) {      systemId=(String)systemIds.get(indexN10061);      newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      assertNotNull("domimplementationcreatedocumenttype01_newDocType",newDocType);      ownerDocument=newDocType.getOwnerDocument();      assertNull("domimplementationcreatedocumenttype01_ownerDocument",ownerDocument);    }  }}  }
class C{  public Sapling(){  this(DEFAULT_SPECIES);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public ScriptCompiler add(File classPath) throws IOException {  compiler.add(classPath);  return this;}  }
class C{  private void write(int value){  String s=Integer.toString(value);  int len=s.length();  checkLengthBeforeWrite(len);  for (int i=0; i < len; i++) {    char c=s.charAt(i);    headerBuffer[pos++]=(byte)c;  }}  }
class C{  public HttpEntityWrapper(HttpEntity wrapped){  super();  if (wrapped == null) {    throw new IllegalArgumentException("wrapped entity must not be null");  }  wrappedEntity=wrapped;}  }
class C{  public RuntimeMBeanException(java.lang.RuntimeException e){  super();  runtimeException=e;}  }
class C{  public boolean isFixed(){  return minSmallest == minLargest && maxSmallest == maxLargest;}  }
class C{  public static long javaToExtendedDosTime(long time){  if (time < 0) {    return ZipEntry.DOSTIME_BEFORE_1980;  }  long dostime=javaToDosTime(time);  return (dostime != ZipEntry.DOSTIME_BEFORE_1980) ? dostime + ((time % 2000) << 32) : ZipEntry.DOSTIME_BEFORE_1980;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  private void initialize() throws IOException {  fileLock.writeLock().lock();  try {    close();    fileCreationTime=clock.now();    if (configuration.getRotationFileSizeInByte() == -1) {      fileCreationTime-=fileCreationTime % (1000 * 60);    }    nextRotation=fileCreationTime + configuration.getRotationInterval() * 60 * 1000;    boolean directoryAvailable=false;    String debugDir=debugDirectory.get();    if (debugDir != null && debugDir.trim().length() > 0) {      File dir=new File(debugDir);      if (!dir.exists()) {        directoryAvailable=dir.mkdirs();      } else       if (dir.isDirectory() && dir.canWrite()) {        directoryAvailable=true;      }    }    if (!directoryAvailable) {      ResourceBundle bundle=Locale.getInstallResourceBundle("amUtilMsgs");      throw new IOException(bundle.getString("com.iplanet.services.debug.nodir") + " Current Debug File : " + this);    }    String debugFilePath=debugDirectory.get() + File.separator + wrapFilename(debugName);    try {      this.currentFile=new File(debugFilePath);      this.debugWriter=new PrintWriter(new FileWriter(currentFile,true),true);      debugWriter=new PrintWriter(new FileWriter(debugFilePath,true),true);    } catch (    IOException ioex) {      close();      ResourceBundle bundle=Locale.getInstallResourceBundle("amUtilMsgs");      throw new IOException(bundle.getString("com.iplanet.services.debug.nofile") + " Current Debug File : " + this,ioex);    }  }  finally {    fileLock.writeLock().unlock();  }}  }
class C{  public boolean removeAll(Collection<ByteString> values){  boolean wasModified=false;  for (  ByteString v : values) {    wasModified|=remove(v);  }  return wasModified;}  }
class C{  void repaintNewCaret(){  if (component != null) {    TextUI mapper=component.getUI();    Document doc=component.getDocument();    if ((mapper != null) && (doc != null)) {      Rectangle newLoc;      try {        newLoc=mapper.modelToView(component,this.dot,this.dotBias);      } catch (      BadLocationException e) {        newLoc=null;      }      if (newLoc != null) {        adjustVisibility(newLoc);        if (getMagicCaretPosition() == null) {          setMagicCaretPosition(new Point(newLoc.x,newLoc.y));        }      }      damage(newLoc);    }  }}  }
class C{  public void testSetPublicKey() throws Exception {  IdentitySubclass sub=new IdentitySubclass("test",new IdentityScopeSubclass());  sub.setPublicKey(getPubKey());  PublicKey returnedPubKey=sub.getPublicKey();  assertEquals("Wrong PublicKey returned",getPubKey(),returnedPubKey);  sub.setPublicKey(null);  assertEquals("Wrong PublicKey returned",null,sub.getPublicKey());}  }
class C{  public InvalidConfigurationException(Throwable cause){  super(cause);}  }
class C{  protected void handleEmptyTag(TagElement tag) throws ChangedCharSetException {  Element elem=tag.getElement();  if (elem == dtd.meta && !ignoreCharSet) {    SimpleAttributeSet atts=getAttributes();    if (atts != null) {      String content=(String)atts.getAttribute(HTML.Attribute.CONTENT);      if (content != null) {        if ("content-type".equalsIgnoreCase((String)atts.getAttribute(HTML.Attribute.HTTPEQUIV))) {          if (!content.equalsIgnoreCase("text/html") && !content.equalsIgnoreCase("text/plain")) {            throw new ChangedCharSetException(content,false);          }        } else         if ("charset".equalsIgnoreCase((String)atts.getAttribute(HTML.Attribute.HTTPEQUIV))) {          throw new ChangedCharSetException(content,true);        }      }    }  }  if (inbody != 0 || elem == dtd.meta || elem == dtd.base || elem == dtd.isindex || elem == dtd.style || elem == dtd.link) {    if (debugFlag) {      if (tag.fictional()) {        debug("Empty Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());      } else {        debug("Empty Tag: " + tag.getHTMLTag() + " attributes: "+ getAttributes()+ " pos: "+ getCurrentPos());      }    }    if (tag.fictional()) {      SimpleAttributeSet attrs=new SimpleAttributeSet();      attrs.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,Boolean.TRUE);      callback.handleSimpleTag(tag.getHTMLTag(),attrs,getBlockStartPosition());    } else {      callback.handleSimpleTag(tag.getHTMLTag(),getAttributes(),getBlockStartPosition());      flushAttributes();    }  }}  }
class C{  public boolean isHeadOfBed(){  return (getData() & 0x8) == 0x8;}  }
class C{  public static FSLogoutNotification parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException {  try {    FSLogoutNotification retLogoutNotification=new FSLogoutNotification();    String requestID=request.getParameter("RequestID");    if (requestID != null) {      retLogoutNotification.requestID=requestID;    } else {      String[] args={IFSConstants.REQUEST_ID};      throw new FSMsgException("missingAttribute",args);    }    try {      retLogoutNotification.majorVersion=Integer.parseInt(request.getParameter(IFSConstants.MAJOR_VERSION));      FSUtils.debug.message("Majorversion : " + retLogoutNotification.majorVersion);      retLogoutNotification.minorVersion=Integer.parseInt(request.getParameter(IFSConstants.MINOR_VERSION));      FSUtils.debug.message("Minorversion : " + retLogoutNotification.minorVersion);    } catch (    NumberFormatException ex) {      FSUtils.debug.message("FSLogoutNotification. " + "parseURLEncodedRequest:Major/Minor version problem");      throw new FSMsgException("invalidNumber",null);    }    String instantString=request.getParameter(IFSConstants.ISSUE_INSTANT);    if (instantString == null || instantString.length() == 0) {      String[] args={IFSConstants.ISSUE_INSTANT};      throw new FSMsgException("missingAttribute",args);    }    try {      retLogoutNotification.issueInstant=DateUtils.stringToDate(instantString);    } catch (    ParseException e) {      throw new FSMsgException("parseError",null);    }    String notAfter=request.getParameter(IFSConstants.NOT_ON_OR_AFTER);    if (notAfter != null && notAfter.length() != 0) {      try {        retLogoutNotification.notOnOrAfter=DateUtils.stringToDate(notAfter);      } catch (      ParseException pe) {        FSUtils.debug.message("FSLogoutNotification.parseURLEncoded" + "Request: parsing exception",pe);      }    }    String providerId=request.getParameter(IFSConstants.PROVIDER_ID);    if (providerId != null) {      retLogoutNotification.providerId=providerId;    } else {      throw new FSMsgException("missingElement",null);    }    String sessionIndex=request.getParameter(IFSConstants.SESSION_INDEX);    if (sessionIndex != null) {      retLogoutNotification.sessionIndex=sessionIndex;    }    String relayState=request.getParameter(IFSConstants.RELAY_STATE);    if (relayState != null) {      retLogoutNotification.relayState=relayState;    }    String nameFormat=request.getParameter(IFSConstants.NAME_FORMAT);    String nameQualifier=request.getParameter(IFSConstants.NAME_QUALIFIER);    String name=request.getParameter(IFSConstants.NAME);    if (name == null) {      name=request.getParameter(IFSConstants.NAME_IDENTIFIER);    }    if (name == null) {      throw new FSMsgException("missingElement",null);    }    retLogoutNotification.nameIdentifier=new NameIdentifier(name,nameQualifier,nameFormat);    FSUtils.debug.message("Returning Logout Object");    return retLogoutNotification;  } catch (  Exception e) {    throw new FSMsgException("parseError",null);  }}  }
class C{  public Assertion(String assertionID,java.lang.String issuer,Date issueInstant,Conditions conditions,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,conditions,statements);}  }
class C{  public void addDynamicPayloads(Vector payloadNames,Vector payloadValues) throws SdpException {  if (payloadNames == null || payloadValues == null)   throw new SdpException(" The vectors are null"); else {    if (payloadNames.isEmpty() || payloadValues.isEmpty())     throw new SdpException(" The vectors are empty"); else {      if (payloadNames.size() != payloadValues.size())       throw new SdpException(" The vector sizes are unequal"); else {        for (int i=0; i < payloadNames.size(); i++) {          String name=(String)payloadNames.elementAt(i);          String value=(String)payloadValues.elementAt(i);          setAttribute(name,value);        }      }    }  }}  }
class C{  public final boolean contains(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DisplayLanguageElement createDisplayLanguageElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DisplayLanguageElementImpl();}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public ModifyDNResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public CopyParentClassLoaderRule(){}  }
class C{  MutableBigInteger(int val){  value=new int[1];  intLen=1;  value[0]=val;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  private Object readResolve(){  return getInstance(currencyCode);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectElement createSubjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl();}  }
class C{  public ServerState duplicate(){  final ServerState newState=new ServerState();  newState.serverIdToCSN.putAll(serverIdToCSN);  return newState;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public static void delOpenDSServer(Connection lc,String delServer){  String replServerDN="cn=" + delServer + ",cn=Servers,cn=admin data";  final String[] attrs={"ds-cfg-key-id"};  Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);  if (lc == null) {    debug.error("EmbeddedOpenDS:syncOpenDSServer():" + "Could not connect to local OpenDJ instance." + replServerDN);    return;  }  String trustKey=null;  try {    SearchResultEntry le=lc.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(replServerDN,attrs));    if (le != null) {      Attribute la=le.getAttribute(attrs[0]);      if (la != null) {        trustKey=la.firstValueAsString();      }      String keyDN="ds-cfg-key-id=" + trustKey + ",cn=instance keys,cn=admin data";      lc.delete(LDAPRequests.newDeleteRequest(keyDN));    } else {      debug.error("EmbeddedOpenDS:syncOpenDSServer():" + "Could not find trustkey for:" + replServerDN);    }  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS.syncOpenDSServer()." + " Error getting replication key:",ex);  }  try {    lc.delete(LDAPRequests.newDeleteRequest(replServerDN));  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS.syncOpenDSServer()." + " Error getting deleting server entry:" + replServerDN,ex);  }  try {    ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(replDN).addModification(new Modification(ModificationType.DELETE,Attributes.singletonAttribute("uniqueMember","cn=" + delServer)));    lc.modify(modifyRequest);  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS.syncOpenDSServer()." + " Error getting removing :" + replDN,ex);  }}  }
class C{  private File createZipFile(int entryCount,int entrySize) throws IOException {  File result=createTemporaryZipFile();  byte[] writeBuffer=new byte[8192];  Random random=new Random();  ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(result)));  for (int entry=0; entry < entryCount; ++entry) {    ZipEntry ze=new ZipEntry(Integer.toHexString(entry));    out.putNextEntry(ze);    for (int i=0; i < entrySize; i+=writeBuffer.length) {      random.nextBytes(writeBuffer);      int byteCount=Math.min(writeBuffer.length,entrySize - i);      out.write(writeBuffer,0,byteCount);    }    out.closeEntry();  }  out.close();  return result;}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  @Inject public SetApplication(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  private static <T>SortedSet<T> readPropertyValues(ConsoleApplication app,ManagedObjectDefinition<?,?> d,PropertyDefinition<T> pd) throws ClientException {  SortedSet<T> values=new TreeSet<>(pd);  readPropertyValues(app,d,pd,values);  return values;}  }
class C{  public AccountService addAccount(Account account,Handler<AsyncResult<Void>> resultHandler){  delegate.addAccount(account,resultHandler);  return this;}  }
class C{  static void appendLengthInfo(int numLetters,int version,Mode mode,BitVector bits) throws WriterException {  int numBits=mode.getCharacterCountBits(Version.getVersionForNumber(version));  if (numLetters > ((1 << numBits) - 1)) {    throw new WriterException(numLetters + "is bigger than" + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public void register(String elemname,String classname){  if (elemmap == null) {    elemmap=new Hashtable();  }  elemmap.put(elemname,classname);}  }
class C{  public XmlStreamWriter(OutputStream out,String defaultEncoding){  this.out=out;  this.defaultEncoding=defaultEncoding != null ? defaultEncoding : "UTF-8";}  }
class C{  protected void CreateFDSelect(OffsetItem fdselectRef,int nglyphs){  OutputList.addLast(new MarkerItem(fdselectRef));  OutputList.addLast(new UInt8Item((char)3));  OutputList.addLast(new UInt16Item((char)1));  OutputList.addLast(new UInt16Item((char)0));  OutputList.addLast(new UInt8Item((char)0));  OutputList.addLast(new UInt16Item((char)nglyphs));}  }
class C{  @Override public void initialize() throws UpgradeException {  if (isCurrentVersionLessThan(AM_13,true)) {    identifyApplicationsAndPoliciesRequiringUpgrade();  }}  }
class C{  protected static boolean networkMonitorExist(String nwMonName){  String classMethod="OpenSSOMonitoringUtil.networkMonitorExist: ";  if (debug.messageEnabled()) {    debug.message(classMethod + "checking " + nwMonName);  }  if ((nwMonName == null) || (nwMonName.length() == 0)) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "isNull");    }    return false;  }  Set<String> ntwStats=NetworkMonitor.getInstanceNames();  String ss=nwMonName.toLowerCase();  if (ntwStats.contains(ss)) {    return true;  } else {    return false;  }}  }
class C{  private boolean isPageStreaming(Method method){  Type type=apiaryConfig.getType(method.getResponseTypeUrl());  if (type == null) {    return false;  }  for (  Field field : type.getFieldsList()) {    if (field.getName().equals(NEXT_PAGE_TOKEN_FIELD_NAME)) {      return true;    }  }  return false;}  }
class C{  protected final void _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    throw _constructError("Needed to read " + minAvailable + " bytes, reached end-of-input");  }  int amount=_inputEnd - _inputPtr;  _currInputProcessed+=_inputPtr;  if (amount > 0 && _inputPtr > 0) {    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);    _inputEnd=amount;  } else {    _inputEnd=0;  }  _inputPtr=0;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      throw _constructError("Needed to read " + minAvailable + " bytes, missed "+ minAvailable+ " before end-of-input");    }    _inputEnd+=count;  }}  }
class C{  private boolean matchStrings(String pattern,String str,boolean caseSensitive){  char[] patArr=pattern.toCharArray();  char[] strArr=str.toCharArray();  int patIdxStart=0;  int patIdxEnd=patArr.length - 1;  int strIdxStart=0;  int strIdxEnd=strArr.length - 1;  char ch;  boolean containsStar=false;  for (  char c : patArr) {    if (c == '*') {      containsStar=true;      break;    }  }  if (!containsStar) {    if (patIdxEnd != strIdxEnd) {      return false;    }    for (int i=0; i <= patIdxEnd; i++) {      ch=patArr[i];      if (ch != '?') {        if (different(caseSensitive,ch,strArr[i])) {          return false;        }      }    }    return true;  }  if (patIdxEnd == 0) {    return true;  }  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxStart])) {        return false;      }    }    patIdxStart++;    strIdxStart++;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxEnd])) {        return false;      }    }    patIdxEnd--;    strIdxEnd--;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {    int patIdxTmp=-1;    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {      if (patArr[i] == '*') {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patIdxStart + 1) {      patIdxStart++;      continue;    }    int patLength=patIdxTmp - patIdxStart - 1;    int strLength=strIdxEnd - strIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        ch=patArr[patIdxStart + j + 1];        if (ch != '?') {          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {            continue strLoop;          }        }      }      foundIdx=strIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    patIdxStart=patIdxTmp;    strIdxStart=foundIdx + patLength;  }  for (int i=patIdxStart; i <= patIdxEnd; i++) {    if (patArr[i] != '*') {      return false;    }  }  return true;}  }
class C{  public NameAlreadyExistsException(Throwable t,String name,int type){  super(t);  this.name=name;  this.type=type;  fillInStackTrace();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.SecurityTokenReferenceElement createSecurityTokenReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.SecurityTokenReferenceElementImpl();}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  private int parseColonPosition(List<StringBuilder> lines,StringBuilder line) throws LDIFException {  int colonPos=line.indexOf(":");  if (colonPos <= 0) {    LocalizableMessage message=ERR_LDIF_NO_ATTR_NAME.get(lastEntryLineNumber,line);    logToRejectWriter(lines,message);    throw new LDIFException(message,lastEntryLineNumber,true);  }  return colonPos;}  }
class C{  private AuthorizationIdentityResponseControl(final boolean isCritical,final String authorizationID){  Reject.ifNull(authorizationID);  this.isCritical=isCritical;  this.authorizationID=authorizationID;}  }
class C{  private boolean deleteResource(HttpServletRequest req,HttpServletResponse resp) throws IOException {  String path=getRelativePath(req);  return deleteResource(path,req,resp,true);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  @Fluent public Job onComplete(Handler<Job> completeHandler){  this.on("complete",null);  return this;}  }
class C{  private void generateDefaultKey(final KeyStore ks,final String alias,final String location,final char[] password,final String algorithm) throws IOException, GeneralSecurityException {  SecretKey newKey=KeyGenerator.getInstance(algorithm).generateKey();  ks.setEntry(alias,new KeyStore.SecretKeyEntry(newKey),new KeyStore.PasswordProtection(password));  try (final OutputStream out=new FileOutputStream(location)){    ks.store(out,password);  } }  }
class C{  public PolicyViewBean(){  super("Policy");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public Chest(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  public void removeAttributes(Enumeration<?> names){  StyleContext context=StyleContext.this;  attributes=context.removeAttributes(attributes,names);  fireStateChanged();}  }
class C{  private boolean isAgent(AMIdentity amIdentityUser){  boolean isAgent=false;  try {    if (amIdentityUser != null && amIdentityUser.getType().equals(IdType.AGENT)) {      isAgent=true;      DEBUG.message("user is of type 'Agent'");    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("Error isAgent : " + e.toString());    }  }  return isAgent;}  }
class C{  public static void checkHTTPContentLength(HttpServletRequest request) throws ServletException {  if (maxContentLength != 0) {    int length=request.getContentLength();    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("HttpRequest content length= " + length);    }    if (length > maxContentLength) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("content length too large" + length);      }      throw new ServletException(SAMLUtils.bundle.getString("largeContentLength"));    }  }}  }
class C{  public boolean is_multiple_of_45_degree(){  int lmax=plaline_len();  for (int index=0; index < lmax; ++index) {    if (plaline(index).is_multiple_of_45_degree())     continue;    return false;  }  return true;}  }
class C{  public VideoStreamChunk(final BigInteger chunkLen){  super(GUID.GUID_VIDEOSTREAM,chunkLen);}  }
class C{  public static String toOctalString(int i){  return IntegralToString.intToOctalString(i);}  }
class C{  protected String[] parseUserPatternString(String userPatternString){  if (userPatternString != null) {    ArrayList<String> pathList=new ArrayList<>();    int startParenLoc=userPatternString.indexOf('(');    if (startParenLoc == -1) {      return new String[]{userPatternString};    }    int startingPoint=0;    while (startParenLoc > -1) {      int endParenLoc=0;      while ((userPatternString.charAt(startParenLoc + 1) == '|') || (startParenLoc != 0 && userPatternString.charAt(startParenLoc - 1) == '\\')) {        startParenLoc=userPatternString.indexOf('(',startParenLoc + 1);      }      endParenLoc=userPatternString.indexOf(')',startParenLoc + 1);      while (userPatternString.charAt(endParenLoc - 1) == '\\') {        endParenLoc=userPatternString.indexOf(')',endParenLoc + 1);      }      String nextPathPart=userPatternString.substring(startParenLoc + 1,endParenLoc);      pathList.add(nextPathPart);      startingPoint=endParenLoc + 1;      startParenLoc=userPatternString.indexOf('(',startingPoint);    }    return pathList.toArray(new String[]{});  }  return null;}  }
class C{  public void draw(PlaPointFloat[] p_points,double p_half_width,Color p_color,Graphics p_g,double p_translucency_factor){  if (p_color == null)   return;  Graphics2D g2=(Graphics2D)p_g;  Rectangle clip_shape=(Rectangle)p_g.getClip();  ShapeTileBox clip_box=coordinate_transform.screen_to_board(clip_shape);  double scaled_width=coordinate_transform.board_to_screen(p_half_width);  init_draw_graphics(g2,p_color,(float)scaled_width * 2);  set_translucency(g2,p_translucency_factor);  GeneralPath draw_path=null;  if (!show_line_segments) {    draw_path=new GeneralPath();  }  for (int i=0; i < (p_points.length - 1); i++) {    if (line_outside_update_box(p_points[i],p_points[i + 1],p_half_width + update_offset,clip_box)) {      continue;    }    Point2D p1=coordinate_transform.board_to_screen(p_points[i]);    Point2D p2=coordinate_transform.board_to_screen(p_points[i + 1]);    Line2D line=new Line2D.Double(p1,p2);    if (show_line_segments) {      g2.draw(line);    } else {      draw_path.append(line,false);    }  }  if (!show_line_segments) {    g2.draw(draw_path);  }}  }
class C{  public static IntegerArgument ldapPortArgument(final int defaultLdapPort) throws ArgumentException {  return IntegerArgument.builder("ldapPort").shortIdentifier(OPTION_SHORT_PORT).description(INFO_ARGUMENT_DESCRIPTION_LDAPPORT.get()).range(1,65535).defaultValue(defaultLdapPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  StringBuilder buffer=templateValue.getValue();switch (randomType) {case RANDOM_TYPE_CHARS_FIXED:    for (int i=0; i < minLength; i++) {      buffer.append(characterSet[random.nextInt(characterSet.length)]);    }  break;case RANDOM_TYPE_CHARS_VARIABLE:int numChars=random.nextInt(lengthRange) + minLength;for (int i=0; i < numChars; i++) {buffer.append(characterSet[random.nextInt(characterSet.length)]);}break;case RANDOM_TYPE_NUMERIC:long randomValue=((random.nextLong() & 0x7FFFFFFFFFFFFFFFL) % valueRange) + minValue;if (decimalFormat == null) {buffer.append(randomValue);} else {buffer.append(decimalFormat.format(randomValue));}break;case RANDOM_TYPE_MONTH:String month=MONTHS[random.nextInt(MONTHS.length)];if (maxLength == 0 || month.length() <= maxLength) {buffer.append(month);} else {buffer.append(month,0,maxLength);}break;case RANDOM_TYPE_TELEPHONE:buffer.append("+1 ");for (int i=0; i < 3; i++) {buffer.append(NUMERIC_CHARS[random.nextInt(NUMERIC_CHARS.length)]);}buffer.append(' ');for (int i=0; i < 3; i++) {buffer.append(NUMERIC_CHARS[random.nextInt(NUMERIC_CHARS.length)]);}buffer.append(' ');for (int i=0; i < 4; i++) {buffer.append(NUMERIC_CHARS[random.nextInt(NUMERIC_CHARS.length)]);}break;}return TagResult.SUCCESS_RESULT;}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(400);  sb.append("<ModifyResponse xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (newEntryIDs != null) {    sb.append(" newEntryIDs=\"");    Iterator iter=newEntryIDs.iterator();    if (iter.hasNext()) {      sb.append((String)iter.next());    }    while (iter.hasNext()) {      sb.append(" ").append((String)iter.next());    }    sb.append("\"");  }  sb.append(">");  if (status != null) {    sb.append(status.toString());  }  if (extension != null) {    sb.append(XMLUtils.print(extension));  }  sb.append("</ModifyResponse>");  return sb.toString();}  }
class C{  public ConfigurationException(Throwable t){  super(t);}  }
class C{  public static String bytesToHex(ByteSequence b){  if (b == null || b.length() == 0) {    return "";  }  int arrayLength=b.length();  StringBuilder buffer=new StringBuilder((arrayLength - 1) * 3 + 2);  buffer.append(byteToHex(b.byteAt(0)));  for (int i=1; i < arrayLength; i++) {    buffer.append(" ");    buffer.append(byteToHex(b.byteAt(i)));  }  return buffer.toString();}  }
class C{  protected void sourceReleased(IRandomAccessSource source) throws java.io.IOException {}  }
class C{  protected MultipleDocumentHandling(int value){  super(value);}  }
class C{  protected static boolean isObjectClassPresent(Set objectClasses,String objectClass){  if (objectClasses != null && !objectClasses.isEmpty()) {    Iterator itr=objectClasses.iterator();    while (itr.hasNext()) {      String serviceOC=(String)itr.next();      if (serviceOC.equalsIgnoreCase(objectClass)) {        return true;      }    }  }  return false;}  }
class C{  public static void initFmDatabase(Context context){  Cursor cur=context.getContentResolver().query(Station.CONTENT_URI,new String[]{Station.COLUMN_STATION_FREQ},Station.COLUMN_STATION_TYPE + "=?",new String[]{String.valueOf(STATION_TYPE_CURRENT)},null);  if (null != cur) {    try {      if (!cur.moveToFirst()) {        final int size=3;        ContentValues values=new ContentValues(size);        values.put(Station.COLUMN_STATION_NAME,CURRENT_STATION_NAME);        values.put(Station.COLUMN_STATION_FREQ,FmRadioUtils.DEFAULT_STATION);        values.put(Station.COLUMN_STATION_TYPE,STATION_TYPE_CURRENT);        context.getContentResolver().insert(Station.CONTENT_URI,values);      }    }  finally {      cur.close();    }  }  int[] types=new int[]{RDS_SETTING_FREQ_PSRT,RDS_SETTING_FREQ_AF,RDS_SETTING_FREQ_TA};  boolean[] enables=new boolean[]{DEFAULT_PSRT_ENABLED,DEFAULT_AF_ENABLED,DEFAULT_TA_ENABLED};  for (int i=0; i < types.length; i++) {    cur=context.getContentResolver().query(Station.CONTENT_URI,new String[]{Station.COLUMN_STATION_NAME},Station.COLUMN_STATION_FREQ + "=" + String.valueOf(types[i]),null,null);    if (null != cur) {      try {        if (!cur.moveToFirst()) {          final int size=3;          ContentValues values=new ContentValues(size);          values.put(Station.COLUMN_STATION_NAME,enables[i] ? RDS_SETTING_VALUE_ENABLED : RDS_SETTING_VALUE_DISABLED);          values.put(Station.COLUMN_STATION_FREQ,types[i]);          values.put(Station.COLUMN_STATION_TYPE,STATION_TYPE_RDS_SETTING);          context.getContentResolver().insert(Station.CONTENT_URI,values);        }      }  finally {        cur.close();      }    }  }  Log.d(TAG,"FmRadioStation.initFmDatabase");}  }
class C{  public SIPHeader parse() throws ParseException {  UnsupportedList unsupportedList=new UnsupportedList();  if (debug)   dbg_enter("UnsupportedParser.parse");  try {    headerName(TokenTypes.UNSUPPORTED);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      Unsupported unsupported=new Unsupported();      unsupported.setHeaderName(SIPHeaderNames.UNSUPPORTED);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      unsupported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      unsupportedList.add(unsupported);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        unsupported=new Unsupported();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        unsupported.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        unsupportedList.add(unsupported);      }    }  }  finally {    if (debug)     dbg_leave("UnsupportedParser.parse");  }  return unsupportedList;}  }
class C{  private void assertNodesAreEquivalent(File expected,Node actual) throws ParserConfigurationException, IOException, SAXException, XmlPullParserException {  Node expectedNode=fileToResultNode(expected);  String expectedString=nodeToNormalizedString(expectedNode);  String actualString=nodeToNormalizedString(actual);  Assert.assertEquals("Expected XML to match file " + expected,expectedString,actualString);}  }
class C{  public AMAdminFrameViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  public void left_button_clicked(Point2D p_point){  if (board_is_read_only) {    if (interactive_action_thread != null) {      interactive_action_thread.request_stop();    }    return;  }  if (interactive_state == null)   return;  if (gdi_context == null)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  StateInteractive return_state=interactive_state.left_button_clicked(location);  set_interactive_state(return_state);}  }
class C{  public void testReceive_BlockNoServerCloseNull() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelCloseNull();}  }
class C{  public KeyStoreException(){  super();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("(");  sb.append(this.location);  if (this.certs != null && this.certs.length > 0) {    for (int i=0; i < this.certs.length; i++) {      sb.append(" " + this.certs[i]);    }  } else   if (this.signers != null && this.signers.length > 0) {    for (int i=0; i < this.signers.length; i++) {      sb.append(" " + this.signers[i]);    }  } else {    sb.append(" <no signer certificates>");  }  sb.append(")");  return sb.toString();}  }
class C{  public EntryAlreadyExistsException(String message){  super(message);}  }
class C{  public boolean isSkipFirstHeader(){  return skipFirstHeader;}  }
class C{  private void initializePendingMonitorData(){  for (  ServerHandler ds : domain.getConnectedDSs().values()) {    final int serverId=ds.getServerId();    final ServerState dsState=ds.getServerState().duplicate();    CSN maxCSN=dsState.getCSN(serverId);    if (maxCSN == null) {      maxCSN=new CSN(0,0,serverId);    }    pendingMonitorData.setMaxCSN(maxCSN);    pendingMonitorData.setLDAPServerState(serverId,dsState);    pendingMonitorData.setFirstMissingDate(serverId,ds.getApproxFirstMissingDate());  }  pendingMonitorData.setRSState(domain.getLocalRSServerId(),domain.getLatestServerState());}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  public void createTenant(EntityManager em,Tenant tenant) throws Exception {  if (tenant == null) {    throw new NullPointerException("Tenant can't be empty");  }  EntityTransaction t=em.getTransaction();  try {    t.begin();    em.persist(tenant);    em.flush();    t.commit();  } catch (  Exception e) {    if (t.isActive()) {      t.rollback();    }    logger.log(Level.SEVERE,"Failed to create tenant:" + tenant,e);    throw e;  }}  }
class C{  public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint,TextDirectionHeuristic textDir){  return isBoring(layoutContext,text,paint,textDir,null);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void cancelAllOperationsExcept(CancelRequest cancelRequest,int messageID){}  }
class C{  public static void deregisterBackupTaskListener(BackupTaskListener listener){  directoryServer.backupTaskListeners.remove(listener);}  }
class C{  public PluginResult.PreOperation invokePreOperationBindPlugins(PreOperationBindOperation bindOperation){  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationBindPlugins.length; i++) {    DirectoryServerPlugin p=preOperationBindPlugins[i];    if (isInternalOperation(bindOperation,p)) {      continue;    }    try {      result=p.doPreOperation(bindOperation);    } catch (    Exception e) {      return handlePreOperationException(e,i,preOperationBindPlugins,bindOperation,p);    }    if (result == null) {      return handlePreOperationResult(bindOperation,i,preOperationBindPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationBindPlugins,bindOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public static void parallelSort(short[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJShort.Sorter(null,a,new short[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public void reset_graphics_update_box(){  update_box=ShapeTileBox.EMPTY;}  }
class C{  protected void dragDividerTo(int location){  if (getLastDragLocation() != location) {    if (isContinuousLayout()) {      splitPane.setDividerLocation(location);      setLastDragLocation(location);    } else {      int lastLoc=getLastDragLocation();      setLastDragLocation(location);      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        if (draggingHW) {          nonContinuousLayoutDivider.setLocation(getLastDragLocation(),0);        } else {          int splitHeight=splitPane.getHeight();          splitPane.repaint(lastLoc,0,dividerSize,splitHeight);          splitPane.repaint(location,0,dividerSize,splitHeight);        }      } else {        if (draggingHW) {          nonContinuousLayoutDivider.setLocation(0,getLastDragLocation());        } else {          int splitWidth=splitPane.getWidth();          splitPane.repaint(0,lastLoc,splitWidth,dividerSize);          splitPane.repaint(0,location,splitWidth,dividerSize);        }      }    }  }}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  SubConfigModel model=(SubConfigModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  try {    Map orig=model.getSubConfigAttributeValues();    Map values=ps.getAttributeValues(orig,true,true,model);    model.setSubConfigAttributeValues(values);    backToProfileViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level2.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private void handleError(final ConnectorException e,final IConfiguration configuration,final HttpServletRequest request,final HttpServletResponse response,final String currentCommand) throws ServletException {  try {    if (currentCommand != null) {      Command command=CommandHandlerEnum.valueOf(currentCommand.toUpperCase()).getCommand();      if (command instanceof XMLCommand) {        CommandHandlerEnum.XMLERROR.execute(request,response,configuration,getServletContext(),e);      } else {        CommandHandlerEnum.ERROR.execute(request,response,configuration,getServletContext(),e);      }    } else {      CommandHandlerEnum.XMLERROR.execute(request,response,configuration,getServletContext(),e);    }  } catch (  Exception e1) {    throw new ServletException(e1);  }}  }
class C{  public boolean isBeingPowered(){  return (getData() & 0x8) != 0;}  }
class C{  public ByteVector(){  this(DEFAULT_BLOCK_SIZE);}  }
class C{  void parse(final String[] lines,final List<LocalizableMessage> warnings) throws DecodeException {  TemplateData templateData=new TemplateData();  for (int lineNumber=0; lineNumber < lines.length; lineNumber++) {    final String currentRawLine=lines[lineNumber];    if (currentRawLine.isEmpty() || currentRawLine.startsWith("#")) {      continue;    }    final String line=replaceConstants(currentRawLine,lineNumber,constants,warnings);    final String lowerLine=line.toLowerCase();    if (line.length() == 0 || line.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith(INCLUDE_LABEL)) {      parseInclude(line,templateData.tags);    } else     if (lowerLine.startsWith(DEFINE_LABEL)) {      parseDefine(lineNumber,line,constants,warnings);    } else     if (lowerLine.startsWith(BRANCH_LABEL)) {      lineNumber=parseBranch(lineNumber,line,lines,templateData,warnings);    } else     if (lowerLine.startsWith(TEMPLATE_LABEL)) {      lineNumber=parseTemplate(lineNumber,line,lines,templateData,warnings);    } else {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_UNEXPECTED_TEMPLATE_FILE_LINE.get(line,lineNumber + 1));    }  }  for (  Branch b : templateData.branches.values()) {    b.completeBranchInitialization(templateData.templates,generateBranches);  }  for (  Template t : templateData.templates.values()) {    t.completeTemplateInitialization(templateData.templates);  }  registeredTags.putAll(templateData.tags);  branches.putAll(templateData.branches);  templates.putAll(templateData.templates);  if (branchesIterator == null) {    branchesIterator=branches.values().iterator();    if (branchesIterator.hasNext()) {      currentBranch=branchesIterator.next();    }  }}  }
class C{  private List<String> checkForFields(List<JsonPointer> fieldsToCheck,JsonValue before,JsonValue after){  List<String> changedFields=new ArrayList<>();  for (  JsonPointer jpointer : fieldsToCheck) {    Object beforeValue=cryptoService.decryptIfNecessary(before.get(jpointer)).getObject();    Object afterValue=cryptoService.decryptIfNecessary(after.get(jpointer)).getObject();    if (!fieldsEqual(beforeValue,afterValue)) {      changedFields.add(jpointer.toString());    }  }  return changedFields;}  }
class C{  public void test_GetS(){  assertEquals("wrong private value",s,ecpks.getS());}  }
class C{  public Set searchSubGroupContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,level);}  }
class C{  public boolean equalsWithEpsilon(Rectangle that,float eps){  float dx=Math.abs(x - that.x);  float dy=Math.abs(y - that.y);  float dw=Math.abs(width - that.width);  float dh=Math.abs(height - that.height);  return dx < eps && dy < eps && dw < eps && dh < eps;}  }
class C{  public AccountExpiredException(){  super();}  }
class C{  protected static void put(JsonValue targetObject,JsonPointer pointer,Object value) throws SynchronizationException {  String[] tokens=pointer.toArray();  if (tokens.length == 0) {    throw new SynchronizationException("cannot replace root object");  }  JsonValue jv=targetObject;  for (int n=0; n < tokens.length - 1; n++) {    JsonValue child=jv.get(tokens[n]);    if (child.isNull() && !jv.isDefined(tokens[n])) {      try {        jv.put(tokens[n],new LinkedHashMap<String,Object>());      } catch (      JsonValueException jve) {        throw new SynchronizationException(jve);      }      child=jv.get(tokens[n]);    }    jv=child;  }  try {    jv.put(tokens[tokens.length - 1],value);  } catch (  JsonValueException jve) {    throw new SynchronizationException(jve);  }}  }
class C{  public void releaseConnection(Connection ldapConnection,int ldapErrorCode){  releaseConnection(ldapConnection);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  char[] tmp=(char[])fields.get("buf",null);  if (tmp == null)   throw new InvalidObjectException("buf is null and should not be!");  buf=tmp.clone();  len=fields.get("len",0L);  if (buf.length != len)   throw new InvalidObjectException("buf is not the expected size");  origLen=fields.get("origLen",0L);  clob=(Clob)fields.get("clob",null);}  }
class C{  private TreeStateNode createNodeAt(TreeStateNode parent,int childIndex){  boolean isParentRoot;  Object newValue;  TreeStateNode newChildNode;  newValue=treeModel.getChild(parent.getValue(),childIndex);  newChildNode=createNodeForValue(newValue);  parent.insert(newChildNode,childIndex);  newChildNode.updatePreferredSize(-1);  isParentRoot=(parent == root);  if (newChildNode != null && parent.isExpanded() && (parent.getRow() != -1 || isParentRoot)) {    int newRow;    if (childIndex == 0) {      if (isParentRoot && !isRootVisible())       newRow=0; else       newRow=parent.getRow() + 1;    } else     if (childIndex == parent.getChildCount())     newRow=parent.getLastVisibleNode().getRow() + 1; else {      TreeStateNode previousNode;      previousNode=(TreeStateNode)parent.getChildAt(childIndex - 1);      newRow=previousNode.getLastVisibleNode().getRow() + 1;    }    visibleNodes.insertElementAt(newChildNode,newRow);  }  return newChildNode;}  }
class C{  int available(boolean read){  int available=lastValid - pos;  if ((available == 0) && (lastActiveFilter >= 0)) {    for (int i=0; (available == 0) && (i <= lastActiveFilter); i++) {      available=activeFilters[i].available();    }  }  if (available > 0 || !read) {    return available;  }  try {    fill(false);    available=lastValid - pos;  } catch (  IOException ioe) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("iib.available.readFail"),ioe);    }    available=1;  }  return available;}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  @Override protected void fill_list(){  RatsNest ratsnest=board_frame.board_panel.itera_board.get_ratsnest();  AirLineInfo[] sorted_arr=ratsnest.get_airlines();  java.util.Arrays.sort(sorted_arr);  for (int i=0; i < sorted_arr.length; ++i) {    this.add_to_list(sorted_arr[i]);  }  this.gui_list.setVisibleRowCount(Math.min(sorted_arr.length,DEFAULT_TABLE_SIZE));}  }
class C{  public void logCompareRequest(CompareOperation compareOperation){}  }
class C{  private void assertNormalisation(String untreatedResource,String treatedResource){  try {    assertThat(resourceName.canonicalize(untreatedResource)).isEqualTo(treatedResource);  } catch (  Exception e) {    String message="Normalisation failed: " + e.getMessage();    throw ComparisonFailureFactory.comparisonFailure(message,treatedResource,"");  }}  }
class C{  public JobService inactiveCount(String type,Handler<AsyncResult<Long>> handler){  delegate.inactiveCount(type,handler);  return this;}  }
class C{  public static void createOrganizationConfiguration(String serviceName,String orgName,Map attrValues){  String classMethod="UpgradeUtils:createOrganizationConfiguration: ";  try {    ServiceConfigManager sm=getServiceConfigManager(serviceName);    sm.createOrganizationConfig(orgName,attrValues);  } catch (  Exception e) {    debug.error(classMethod + "Error creating organization " + "configuration for "+ serviceName,e);  }}  }
class C{  protected Calendar date() throws ParseException {  try {    Calendar retval=Calendar.getInstance(TimeZone.getTimeZone("GMT"));    String s1=lexer.number();    int day=Integer.parseInt(s1);    if (day <= 0 || day > 31)     throw createParseException("Bad day ");    retval.set(Calendar.DAY_OF_MONTH,day);    lexer.match(' ');    String month=lexer.ttoken().toLowerCase();    if (month.equals("jan")) {      retval.set(Calendar.MONTH,Calendar.JANUARY);    } else     if (month.equals("feb")) {      retval.set(Calendar.MONTH,Calendar.FEBRUARY);    } else     if (month.equals("mar")) {      retval.set(Calendar.MONTH,Calendar.MARCH);    } else     if (month.equals("apr")) {      retval.set(Calendar.MONTH,Calendar.APRIL);    } else     if (month.equals("may")) {      retval.set(Calendar.MONTH,Calendar.MAY);    } else     if (month.equals("jun")) {      retval.set(Calendar.MONTH,Calendar.JUNE);    } else     if (month.equals("jul")) {      retval.set(Calendar.MONTH,Calendar.JULY);    } else     if (month.equals("aug")) {      retval.set(Calendar.MONTH,Calendar.AUGUST);    } else     if (month.equals("sep")) {      retval.set(Calendar.MONTH,Calendar.SEPTEMBER);    } else     if (month.equals("oct")) {      retval.set(Calendar.MONTH,Calendar.OCTOBER);    } else     if (month.equals("nov")) {      retval.set(Calendar.MONTH,Calendar.NOVEMBER);    } else     if (month.equals("dec")) {      retval.set(Calendar.MONTH,Calendar.DECEMBER);    }    lexer.match(' ');    String s2=lexer.number();    int yr=Integer.parseInt(s2);    retval.set(Calendar.YEAR,yr);    return retval;  } catch (  Exception ex) {    throw createParseException("bad date field");  }}  }
class C{  public int size(){  return map.size();}  }
class C{  public void objectChanged(String name,IdType idType,int changeType,Map cMap){  if (debug.messageEnabled()) {    debug.message("objectChanged called with IdType= name: " + name + " IdType: "+ idType+ " ChangeType: "+ changeType+ "\nConfigmap = "+ cMap);  }  String org=(String)configMap.get("realm");  List<IdEventListener> list=(List<IdEventListener>)AMIdentityRepository.listeners.get(org);  list=list == null ? new ArrayList<IdEventListener>() : new ArrayList<>(list);  if (remoteListener != null) {    list.add(remoteListener);  }  if (!cacheChecked) {    idServices=IdServicesFactory.getDataStoreServices();    if (idServices instanceof IdCachedServices) {      cacheEnabled=true;    }    cacheChecked=true;  }  if (StringUtils.isNotEmpty(name)) {    String[] changed=getChangedIds(name,idType,cMap);    for (int i=0; i < changed.length; i++) {      if (cacheEnabled) {        ((IdCachedServices)idServices).dirtyCache(changed[i],changeType,false,false,Collections.EMPTY_SET);      }      for (      IdEventListener l : list) {        if (changeType == OBJECT_CHANGED || changeType == OBJECT_ADDED) {          l.identityChanged(changed[i]);        } else         if (changeType == OBJECT_REMOVED) {          l.identityDeleted(changed[i]);        } else         if (changeType == OBJECT_RENAMED) {          l.identityRenamed(changed[i]);        }      }    }  } else   if (debug.warningEnabled()) {    debug.warning("objectChanged called with an empty name");  }}  }
class C{  public SQLException(String reason,String sqlState,Throwable cause){  super(reason,cause);  this.SQLState=sqlState;  this.vendorCode=0;  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());      DriverManager.println("SQLState(" + SQLState + ")");    }  }}  }
class C{  private float handleReplacement(ReplacementSpan replacement,TextPaint wp,int start,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  float ret=0;  int textStart=mStart + start;  int textLimit=mStart + limit;  if (needWidth || (c != null && runIsRtl)) {    int previousTop=0;    int previousAscent=0;    int previousDescent=0;    int previousBottom=0;    int previousLeading=0;    boolean needUpdateMetrics=(fmi != null);    if (needUpdateMetrics) {      previousTop=fmi.top;      previousAscent=fmi.ascent;      previousDescent=fmi.descent;      previousBottom=fmi.bottom;      previousLeading=fmi.leading;    }    ret=replacement.getSize(wp,mText,textStart,textLimit,fmi);    if (needUpdateMetrics) {      updateMetrics(fmi,previousTop,previousAscent,previousDescent,previousBottom,previousLeading);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    replacement.draw(c,mText,textStart,textLimit,x,top,y,bottom,wp);  }  return runIsRtl ? -ret : ret;}  }
class C{  public static boolean isLocalDB(String dbURL) throws InvalidException {  if (dbURL == null) {    throw new InvalidException("dbURL is not set");  }  return dbURL.startsWith("local:") || dbURL.startsWith("plocal");}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.IDPSSOConfigElement createIDPSSOConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.IDPSSOConfigElementImpl();}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  private boolean isDefaultScript(ScriptConfiguration scriptConfig){  try {    int usageCount=getUsageCount(getScriptingServiceGlobalConfig(),getDefaultScriptSearchString(scriptConfig.getId()));    return usageCount > 0;  } catch (  SSOException|SMSException e) {    logger.error("isDefaultScript caught exception with script {} UUID {}",scriptConfig.getName(),scriptConfig.getId(),e);    return false;  }}  }
class C{  @Override public boolean isBorderOpaque(){  return (outsideBorder == null || outsideBorder.isBorderOpaque()) && (insideBorder == null || insideBorder.isBorderOpaque());}  }
class C{  public int hashCode(){  if (isRoleIDP) {    return sessionPartner.hashCode() + 1;  } else {    return sessionPartner.hashCode() + 0;  }}  }
class C{  public void sendLockOutNotice(String userDN){  isAccountLockout.sendLockOutNotice(userDN);}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public void onStop(){  AppEventsLogger.onContextStop();}  }
class C{  public <M extends Configuration>void registerDeleteListener(InstantiableRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  ConfigDeleteListener adaptor=new ConfigDeleteListenerAdaptor<>(serverContext,path,d,listener);  registerDeleteListener(baseDN,adaptor);}  }
class C{  public synchronized void disableAttribute(String name){  enabledAttributes.removeElement(name);}  }
class C{  public SimplexNoiseGenerator(Random rand){  super(rand);  offsetW=rand.nextDouble() * 256;}  }
class C{  public static boolean isCidFont(String fontName,String enc){  if (!registryNames.containsKey("fonts"))   return false;  if (!registryNames.get("fonts").contains(fontName))   return false;  if (enc.equals(PdfEncodings.IDENTITY_H) || enc.equals(PdfEncodings.IDENTITY_V))   return true;  String registry=(String)allFonts.get(fontName).get("Registry");  Set<String> encodings=registryNames.get(registry);  return encodings != null && encodings.contains(enc);}  }
class C{  public boolean isInstalled(){  return isInstalled;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  SavedTopStoryDao.dropTable(db,ifExists);  SavedStoryDao.dropTable(db,ifExists);  SavedDailyDetailDao.dropTable(db,ifExists);}  }
class C{  public boolean canView(Set permissions,String accessLevel,String realmName,boolean delegateUI){  boolean canView=false;  if (ssoToken != null) {    if (permissions.isEmpty()) {      canView=true;    } else {      try {        DelegationEvaluator delegationEvaluator=new DelegationEvaluatorImpl();        DelegationPermission delegationPermission=new DelegationPermission();        delegationPermission.setVersion("*");        delegationPermission.setSubConfigName("default");        if ((accessLevel != null) && (accessLevel.trim().length() > 0)) {          delegationPermission.setConfigType(accessLevel);          delegationPermission.setOrganizationName("/");        } else {          delegationPermission.setOrganizationName(realmName);        }        if (delegateUI) {          Set actions=new HashSet();          actions.add(AMAdminConstants.PERMISSION_DELEGATE);          delegationPermission.setActions(actions);          canView=delegationEvaluator.isAllowed(ssoToken,delegationPermission,Collections.EMPTY_MAP);        }        if (!delegateUI || canView) {          for (Iterator i=permissions.iterator(); i.hasNext() && !canView; ) {            String serviceName=(String)i.next();            canView=hasPermission(delegationEvaluator,delegationPermission,serviceName,AMAdminConstants.PERMISSION_READ);          }        }      } catch (      DelegationException e) {        AMModelBase.debug.error("AccessControlModelImpl.canView",e);      }catch (      SSOException e) {        AMModelBase.debug.error("AccessControlModelImpl.canView",e);      }    }  }  return canView;}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.fatalError(e);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean allowsTrailingArguments(){  return allowsTrailingArguments;}  }
class C{  public LogConfigurationException(){  super();}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!super.equals(obj))   return false;  RuleBasedCollator other=(RuleBasedCollator)obj;  return (getRules().equals(other.getRules()));}  }
class C{  public synchronized void register(RegisteredListener listener){  if (handlerslots.get(listener.getPriority()).contains(listener))   throw new IllegalStateException("This listener is already registered to priority " + listener.getPriority().toString());  handlers=null;  handlerslots.get(listener.getPriority()).add(listener);}  }
class C{  @DataProvider(name="invalid6Rules") public Object[][] inValid6Data(){  return new Object[][]{{"2001:feca:ba23:cd1f:dcb1:1010:9234:4088///124"},{"2001:feca:ba23:cd1f:dcb1:1010:9234:4088?124"},{"2001:fecz:ba23:cd1f:dcb1:1010:9234:4088/124"},{"2001:fecd:ba23:cd1ff:dcb1:1010:9234:4088/46"},{"0:0:0:0:0:ffff:101..45.75.219"},{"0:0:0:0:0:0:101.45.75.700"},{"1080::8:800:200C:417A/500"},{"1080::8:800:*:417A/66"}};}  }
class C{  public CallingStationIdAttribute(byte[] octets){  super(octets);  str=new String(octets,2,octets.length - 2);}  }
class C{  public ClientHello(SecureRandom sr,byte[] version,byte[] ses_id,CipherSuite[] cipher_suite){  client_version=version;  long gmt_unix_time=System.currentTimeMillis() / 1000;  sr.nextBytes(random);  random[0]=(byte)(gmt_unix_time & 0xFF000000 >>> 24);  random[1]=(byte)(gmt_unix_time & 0xFF0000 >>> 16);  random[2]=(byte)(gmt_unix_time & 0xFF00 >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  session_id=ses_id;  this.cipher_suites=cipher_suite;  compression_methods=new byte[]{0};  length=38 + session_id.length + (this.cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  public static Color showDialog(Component component,String title,Color initialColor) throws HeadlessException {  final JColorChooser pane=new JColorChooser(initialColor != null ? initialColor : Color.white);  ColorTracker ok=new ColorTracker(pane);  JDialog dialog=createDialog(component,title,true,pane,ok,null);  dialog.addComponentListener(new ColorChooserDialog.DisposeOnClose());  dialog.show();  return ok.getColor();}  }
class C{  private void createNewFolderElement(final Element rootElement){  Element element=creator.getDocument().createElement("NewFolder");  element.setAttribute("name",this.newFolderName);  rootElement.appendChild(element);}  }
class C{  public void close() throws IOException {  super.close();  buf=null;}  }
class C{  private int countEntryLimits(byte[] entryBytes){  int entryCount=0;  int count=0;  while (count <= entryBytes.length - 2) {    if (entryBytes[count] == '\n' && entryBytes[count + 1] == '\n') {      entryCount++;      count++;    }    count++;  }  return entryCount;}  }
class C{  private static final byte[] toOctets(Type type,int msb,int msb2,int msb3,int msb4){  if (type == Type.NAS_ASSIGNED) {    return OctetUtils.toOctets(AttributeType.FRAMED_IP_ADDRESS,255,255,255,254);  } else   if (type == Type.USER_NEGOTIATED) {    return OctetUtils.toOctets(AttributeType.FRAMED_IP_ADDRESS,255,255,255,255);  } else {    return OctetUtils.toOctets(AttributeType.FRAMED_IP_ADDRESS,msb,msb2,msb3,msb4);  }}  }
class C{  public void testIsReadOnly(){  try {    assertFalse(rsmd.isReadOnly(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isReadOnly" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isReadOnly(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  if (artifact == null || artifact.trim().length() == 0) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("ArtifactImpl.toXMLString: artifact " + "value is empty");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missingElementValue"));  }  StringBuffer xml=new StringBuffer(200);  String prefix="";  if (includeNS) {    prefix=SAML2Constants.PROTOCOL_PREFIX;  }  String uri="";  if (declareNS) {    uri=SAML2Constants.PROTOCOL_DECLARE_STR;  }  xml.append("<").append(prefix).append("Artifact").append(uri).append(">").append(artifact).append("</").append(prefix).append("Artifact>");  return xml.toString();}  }
class C{  public boolean isDegenerate(){  if (segments.size() > 0 && closed) {    return false;  }  for (  IShape segment : segments) {    Set<Point> points=new HashSet<>(segment.getBasePoints());    if (points.size() != 1) {      return false;    }  }  return segments.size() > 0 || closed;}  }
class C{  public void updateSchemaFiles(Schema newSchema,Collection<Attribute> extraAttributes,TreeSet<String> modifiedSchemaFiles,AlertGenerator alertGenerator) throws DirectoryException {  HashMap<String,File> tempSchemaFiles=new HashMap<>();  try {    for (    String schemaFile : modifiedSchemaFiles) {      File tempSchemaFile=writeTempSchemaFile(newSchema,extraAttributes,schemaFile);      tempSchemaFiles.put(schemaFile,tempSchemaFile);    }    installSchemaFiles(alertGenerator,tempSchemaFiles);  } catch (  DirectoryException de) {    logger.traceException(de);    throw de;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_SCHEMA_MODIFY_CANNOT_WRITE_NEW_SCHEMA.get(getExceptionMessage(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  } finally {    cleanUpTempSchemaFiles(tempSchemaFiles);  }  writeConcatenatedSchema();}  }
class C{  public SQLFeatureNotSupportedException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.StatusTypeImpl();}  }
class C{  public final void pushCurrentNode(int n){  m_currentNodes.push(n);}  }
class C{  public PasswordPolicyException(String errorCode,Object[] args){  super(IdRepoBundle.BUNDLE_NAME,errorCode,args);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.PasswordElement createPasswordElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.PasswordElementImpl();}  }
class C{  public boolean containsAny(Collection<?> collection){  for (  Object item : collection)   if (this.contains(item))   return true;  return false;}  }
class C{  protected String toEncoded(String url,String sessionId){  if ((url == null) || (sessionId == null)) {    return (url);  }  String path=url;  String query="";  String anchor="";  int question=url.indexOf('?');  if (question >= 0) {    path=url.substring(0,question);    query=url.substring(question);  }  int pound=path.indexOf('#');  if (pound >= 0) {    anchor=path.substring(pound);    path=path.substring(0,pound);  }  StringBuilder sb=new StringBuilder(path);  if (sb.length() > 0) {    sb.append(";");    sb.append(SessionConfig.getSessionUriParamName(request.getContext()));    sb.append("=");    sb.append(sessionId);  }  sb.append(anchor);  sb.append(query);  return (sb.toString());}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  static <K extends Comparable<K>,V>BlockLogReader<K,V> newReaderForTests(final File file,final RandomAccessFile reader,final RecordParser<K,V> parser,int blockSize){  return new BlockLogReader<>(file,reader,parser,blockSize);}  }
class C{  public ObjectView(Element elem){  super(elem);}  }
class C{  private void replacePagesAndRenumberPageSeqs(OggVorbisTagReader.OggVorbisHeaderSizes originalHeaderSizes,int newCommentLength,OggPageHeader secondPageHeader,ByteBuffer newComment,RandomAccessFile raf,RandomAccessFile rafTemp) throws IOException, CannotReadException, CannotWriteException {  int pageSequence=secondPageHeader.getPageSequence();  int noOfCompletePagesNeededForComment=newCommentLength / OggPageHeader.MAXIMUM_PAGE_DATA_SIZE;  logger.config("Comment requires:" + noOfCompletePagesNeededForComment + " complete pages");  int newCommentOffset=0;  if (noOfCompletePagesNeededForComment > 0) {    for (int i=0; i < noOfCompletePagesNeededForComment; i++) {      byte[] segmentTable=this.createSegments(OggPageHeader.MAXIMUM_PAGE_DATA_SIZE,false);      int pageHeaderLength=OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + segmentTable.length;      ByteBuffer pageBuffer=ByteBuffer.allocate(pageHeaderLength + OggPageHeader.MAXIMUM_PAGE_DATA_SIZE);      pageBuffer.order(ByteOrder.LITTLE_ENDIAN);      pageBuffer.put(secondPageHeader.getRawHeaderData(),0,OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH - 1);      pageBuffer.put((byte)segmentTable.length);      for (      byte aSegmentTable : segmentTable) {        pageBuffer.put(aSegmentTable);      }      ByteBuffer nextPartOfComment=newComment.slice();      nextPartOfComment.limit(OggPageHeader.MAXIMUM_PAGE_DATA_SIZE);      pageBuffer.put(nextPartOfComment);      pageBuffer.putInt(OggPageHeader.FIELD_PAGE_SEQUENCE_NO_POS,pageSequence);      pageSequence++;      if (i != 0) {        pageBuffer.put(OggPageHeader.FIELD_HEADER_TYPE_FLAG_POS,OggPageHeader.HeaderTypeFlag.CONTINUED_PACKET.getFileValue());      }      calculateChecksumOverPage(pageBuffer);      rafTemp.getChannel().write(pageBuffer);      newCommentOffset+=OggPageHeader.MAXIMUM_PAGE_DATA_SIZE;      newComment.position(newCommentOffset);    }  }  int lastPageCommentPacketSize=newCommentLength % OggPageHeader.MAXIMUM_PAGE_DATA_SIZE;  logger.fine("Last comment packet size:" + lastPageCommentPacketSize);  if (!isCommentAndSetupHeaderFitsOnASinglePage(lastPageCommentPacketSize,originalHeaderSizes.getSetupHeaderSize(),originalHeaderSizes.getExtraPacketList())) {    logger.fine("WriteOgg Type 3");{      byte[] segmentTable=createSegments(lastPageCommentPacketSize,true);      int pageHeaderLength=OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + segmentTable.length;      ByteBuffer pageBuffer=ByteBuffer.allocate(lastPageCommentPacketSize + pageHeaderLength);      pageBuffer.order(ByteOrder.LITTLE_ENDIAN);      pageBuffer.put(secondPageHeader.getRawHeaderData(),0,OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH - 1);      pageBuffer.put((byte)segmentTable.length);      for (      byte aSegmentTable : segmentTable) {        pageBuffer.put(aSegmentTable);      }      newComment.position(newCommentOffset);      pageBuffer.put(newComment.slice());      pageBuffer.putInt(OggPageHeader.FIELD_PAGE_SEQUENCE_NO_POS,pageSequence);      if (noOfCompletePagesNeededForComment > 0) {        pageBuffer.put(OggPageHeader.FIELD_HEADER_TYPE_FLAG_POS,OggPageHeader.HeaderTypeFlag.CONTINUED_PACKET.getFileValue());      }      logger.fine("Writing Last Comment Page " + pageSequence + " to file");      pageSequence++;      calculateChecksumOverPage(pageBuffer);      rafTemp.getChannel().write(pageBuffer);    }{      byte[] segmentTable=this.createSegmentTable(originalHeaderSizes.getSetupHeaderSize(),originalHeaderSizes.getExtraPacketList());      int pageHeaderLength=OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + segmentTable.length;      byte[] setupHeaderData=reader.convertToVorbisSetupHeaderPacketAndAdditionalPackets(originalHeaderSizes.getSetupHeaderStartPosition(),raf);      ByteBuffer pageBuffer=ByteBuffer.allocate(setupHeaderData.length + pageHeaderLength);      pageBuffer.order(ByteOrder.LITTLE_ENDIAN);      pageBuffer.put(secondPageHeader.getRawHeaderData(),0,OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH - 1);      pageBuffer.put((byte)segmentTable.length);      for (      byte aSegmentTable : segmentTable) {        pageBuffer.put(aSegmentTable);      }      pageBuffer.put(setupHeaderData);      pageBuffer.putInt(OggPageHeader.FIELD_PAGE_SEQUENCE_NO_POS,pageSequence);      logger.fine("Writing Setup Header and packets Page " + pageSequence + " to file");      calculateChecksumOverPage(pageBuffer);      rafTemp.getChannel().write(pageBuffer);    }  } else {    logger.fine("WriteOgg Type 4");    int newSecondPageDataLength=originalHeaderSizes.getSetupHeaderSize() + lastPageCommentPacketSize + originalHeaderSizes.getExtraPacketDataSize();    newComment.position(newCommentOffset);    ByteBuffer lastComment=newComment.slice();    ByteBuffer lastHeaderBuffer=startCreateBasicSecondPage(originalHeaderSizes,lastPageCommentPacketSize,newSecondPageDataLength,secondPageHeader,lastComment);    raf.seek(originalHeaderSizes.getSetupHeaderStartPosition());    byte[] setupHeaderData=reader.convertToVorbisSetupHeaderPacketAndAdditionalPackets(originalHeaderSizes.getSetupHeaderStartPosition(),raf);    lastHeaderBuffer.put(setupHeaderData);    lastHeaderBuffer.putInt(OggPageHeader.FIELD_PAGE_SEQUENCE_NO_POS,pageSequence);    lastHeaderBuffer.put(OggPageHeader.FIELD_HEADER_TYPE_FLAG_POS,OggPageHeader.HeaderTypeFlag.CONTINUED_PACKET.getFileValue());    calculateChecksumOverPage(lastHeaderBuffer);    rafTemp.getChannel().write(lastHeaderBuffer);  }  writeRemainingPages(pageSequence,raf,rafTemp);}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  private boolean itemIsObscuredByHeader(RecyclerView parent,View item,View header,int orientation){  RecyclerView.LayoutParams layoutParams=(RecyclerView.LayoutParams)item.getLayoutParams();  mDimensionCalculator.initMargins(mTempRect1,header);  int adapterPosition=parent.getChildAdapterPosition(item);  if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent,adapterPosition) != header) {    return false;  }  if (orientation == LinearLayoutManager.VERTICAL) {    int itemTop=item.getTop() - layoutParams.topMargin;    int headerBottom=getListTop(parent) + header.getBottom() + mTempRect1.bottom+ mTempRect1.top;    if (itemTop >= headerBottom) {      return false;    }  } else {    int itemLeft=item.getLeft() - layoutParams.leftMargin;    int headerRight=getListLeft(parent) + header.getRight() + mTempRect1.right+ mTempRect1.left;    if (itemLeft >= headerRight) {      return false;    }  }  return true;}  }
class C{  public static void logBindResponse(BindOperation bindOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logBindResponse(bindOperation);  }}  }
class C{  @DataProvider(name="integerValues") public Object[][] createIntegerValues(){  return new Object[][]{{"0123456",true},{"42",true},{"0",true},{"",false},{"0xFF",false},{"NULL",false},{"Not a Number",false}};}  }
class C{  public void addAttributeCertificates(X509Store store) throws CMSException {  try {    for (Iterator it=store.getMatches(null).iterator(); it.hasNext(); ) {      X509AttributeCertificate attrCert=(X509AttributeCertificate)it.next();      certs.add(new DERTaggedObject(false,2,AttributeCertificate.getInstance(ASN1Primitive.fromByteArray(attrCert.getEncoded()))));    }  } catch (  IllegalArgumentException e) {    throw new CMSException("error processing attribute certs",e);  }catch (  IOException e) {    throw new CMSException("error processing attribute certs",e);  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  private int handleC(String value,DoubleMetaphoneResult result,int index){  if (conditionC0(value,index)) {    result.append('K');    index+=2;  } else   if (index == 0 && contains(value,index,6,"CAESAR")) {    result.append('S');    index+=2;  } else   if (contains(value,index,2,"CH")) {    index=handleCH(value,result,index);  } else   if (contains(value,index,2,"CZ") && !contains(value,index - 2,4,"WICZ")) {    result.append('S','X');    index+=2;  } else   if (contains(value,index + 1,3,"CIA")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"CC") && !(index == 1 && charAt(value,0) == 'M')) {    return handleCC(value,result,index);  } else   if (contains(value,index,2,"CK","CG","CQ")) {    result.append('K');    index+=2;  } else   if (contains(value,index,2,"CI","CE","CY")) {    if (contains(value,index,3,"CIO","CIE","CIA")) {      result.append('S','X');    } else {      result.append('S');    }    index+=2;  } else {    result.append('K');    if (contains(value,index + 1,2," C"," Q"," G")) {      index+=3;    } else     if (contains(value,index + 1,1,"C","K","Q") && !contains(value,index + 1,2,"CE","CI")) {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  public boolean isRotatable(){  return rotatable;}  }
class C{  private Object readResolve(){synchronized (levels) {    for (    Level level : levels) {      if (value != level.value) {        continue;      }      if (!name.equals(level.name)) {        continue;      }      if (Objects.equal(resourceBundleName,level.resourceBundleName)) {        return level;      }    }    levels.add(this);    return this;  }}  }
class C{  @Override public void rebind(String name,Object obj) throws NamingException {  getBoundContext().rebind(parseName(name),obj);}  }
class C{  @Override public void destroyModuleState(){  UUID=null;  userName=null;}  }
class C{  public boolean beginTblSearchGroupDisplay(ChildDisplayEvent event){  return !is2dot2Agent() && !isAgentAuthenticator();}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  private void generateComponents(int startingAt,int endingAt){  if (collectStats) {    formattedChars+=(endingAt - startingAt);  }  int layoutFlags=0;  TextLabelFactory factory=new TextLabelFactory(fFrc,fChars,fBidi,layoutFlags);  int[] charsLtoV=null;  if (fBidi != null) {    fLevels=BidiUtils.getLevels(fBidi);    int[] charsVtoL=BidiUtils.createVisualToLogicalMap(fLevels);    charsLtoV=BidiUtils.createInverseMap(charsVtoL);    fIsDirectionLTR=fBidi.baseIsLeftToRight();  } else {    fLevels=null;    fIsDirectionLTR=true;  }  try {    fComponents=TextLine.getComponents(fParagraph,fChars,startingAt,endingAt,charsLtoV,fLevels,factory);  } catch (  IllegalArgumentException e) {    System.out.println("startingAt=" + startingAt + "; endingAt="+ endingAt);    System.out.println("fComponentLimit=" + fComponentLimit);    throw e;  }  fComponentStart=startingAt;  fComponentLimit=endingAt;}  }
class C{  public static byte[] decode(final char[] in){  int iLen=in.length;  if (iLen % 4 != 0) {    throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  }  while (iLen > 0 && in[iLen - 1] == '=') {    iLen--;  }  final int oLen=(iLen * 3) / 4;  final byte[] out=new byte[oLen];  int ip=0;  int op=0;  while (ip < iLen) {    final int i0=in[ip++];    final int i1=in[ip++];    if (i0 == 13 && i1 == 10)     continue;    final int i2=ip < iLen ? in[ip++] : 'A';    final int i3=ip < iLen ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    final int b0=map2[i0];    final int b1=map2[i1];    final int b2=map2[i2];    final int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    final int o0=(b0 << 2) | (b1 >>> 4);    final int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    final int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen) {      out[op++]=(byte)o1;    }    if (op < oLen) {      out[op++]=(byte)o2;    }  }  return out;}  }
class C{  public static <T>T unmarshal(InputStream xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  public synchronized int hashCode(){  if (hashCode != -1)   return hashCode;  hashCode=handler.hashCode(this);  return hashCode;}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  @Override protected boolean doAuthenticate(Request request,HttpServletResponse response) throws IOException {  if (checkForCachedAuthentication(request,response,true)) {    return true;  }  Session session=null;  Principal principal=null;  if (!cache) {    session=request.getSessionInternal(true);    if (log.isDebugEnabled()) {      log.debug("Checking for reauthenticate in session " + session);    }    String username=(String)session.getNote(Constants.SESS_USERNAME_NOTE);    String password=(String)session.getNote(Constants.SESS_PASSWORD_NOTE);    if ((username != null) && (password != null)) {      if (log.isDebugEnabled()) {        log.debug("Reauthenticating username '" + username + "'");      }      principal=context.getRealm().authenticate(username,password);      if (principal != null) {        session.setNote(Constants.FORM_PRINCIPAL_NOTE,principal);        if (!matchRequest(request)) {          register(request,response,principal,HttpServletRequest.FORM_AUTH,username,password);          return true;        }      }      if (log.isDebugEnabled()) {        log.debug("Reauthentication failed, proceed normally");      }    }  }  if (matchRequest(request)) {    session=request.getSessionInternal(true);    if (log.isDebugEnabled()) {      log.debug("Restore request from session '" + session.getIdInternal() + "'");    }    principal=(Principal)session.getNote(Constants.FORM_PRINCIPAL_NOTE);    register(request,response,principal,HttpServletRequest.FORM_AUTH,(String)session.getNote(Constants.SESS_USERNAME_NOTE),(String)session.getNote(Constants.SESS_PASSWORD_NOTE));    if (cache) {      session.removeNote(Constants.SESS_USERNAME_NOTE);      session.removeNote(Constants.SESS_PASSWORD_NOTE);    }    if (restoreRequest(request,session)) {      if (log.isDebugEnabled()) {        log.debug("Proceed to restored request");      }      return true;    } else {      if (log.isDebugEnabled()) {        log.debug("Restore of original request failed");      }      response.sendError(HttpServletResponse.SC_BAD_REQUEST);      return false;    }  }  String contextPath=request.getContextPath();  String requestURI=request.getDecodedRequestURI();  boolean loginAction=requestURI.startsWith(contextPath) && requestURI.endsWith(Constants.FORM_ACTION);  LoginConfig config=context.getLoginConfig();  if (!loginAction) {    if (request.getServletPath().length() == 0 && request.getPathInfo() == null) {      StringBuilder location=new StringBuilder(requestURI);      location.append('/');      if (request.getQueryString() != null) {        location.append('?');        location.append(request.getQueryString());      }      response.sendRedirect(response.encodeRedirectURL(location.toString()));      return false;    }    session=request.getSessionInternal(true);    if (log.isDebugEnabled()) {      log.debug("Save request in session '" + session.getIdInternal() + "'");    }    try {      saveRequest(request,session);    } catch (    IOException ioe) {      log.debug("Request body too big to save during authentication");      response.sendError(HttpServletResponse.SC_FORBIDDEN,sm.getString("authenticator.requestBodyTooBig"));      return false;    }    forwardToLoginPage(request,response,config);    return false;  }  request.getResponse().sendAcknowledgement();  Realm realm=context.getRealm();  if (characterEncoding != null) {    request.setCharacterEncoding(characterEncoding);  }  String username=request.getParameter(Constants.FORM_USERNAME);  String password=request.getParameter(Constants.FORM_PASSWORD);  if (log.isDebugEnabled()) {    log.debug("Authenticating username '" + username + "'");  }  principal=realm.authenticate(username,password);  if (principal == null) {    forwardToErrorPage(request,response,config);    return false;  }  if (log.isDebugEnabled()) {    log.debug("Authentication of '" + username + "' was successful");  }  if (session == null) {    session=request.getSessionInternal(false);  }  if (session == null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug("User took so long to log on the session expired");    }    if (landingPage == null) {      response.sendError(HttpServletResponse.SC_REQUEST_TIMEOUT,sm.getString("authenticator.sessionExpired"));    } else {      String uri=request.getContextPath() + landingPage;      SavedRequest saved=new SavedRequest();      saved.setMethod("GET");      saved.setRequestURI(uri);      saved.setDecodedRequestURI(uri);      request.getSessionInternal(true).setNote(Constants.FORM_REQUEST_NOTE,saved);      response.sendRedirect(response.encodeRedirectURL(uri));    }    return false;  }  session.setNote(Constants.FORM_PRINCIPAL_NOTE,principal);  session.setNote(Constants.SESS_USERNAME_NOTE,username);  session.setNote(Constants.SESS_PASSWORD_NOTE,password);  requestURI=savedRequestURL(session);  if (log.isDebugEnabled()) {    log.debug("Redirecting to original '" + requestURI + "'");  }  if (requestURI == null) {    if (landingPage == null) {      response.sendError(HttpServletResponse.SC_BAD_REQUEST,sm.getString("authenticator.formlogin"));    } else {      String uri=request.getContextPath() + landingPage;      SavedRequest saved=new SavedRequest();      saved.setMethod("GET");      saved.setRequestURI(uri);      saved.setDecodedRequestURI(uri);      session.setNote(Constants.FORM_REQUEST_NOTE,saved);      response.sendRedirect(response.encodeRedirectURL(uri));    }  } else {    Response internalResponse=request.getResponse();    String location=response.encodeRedirectURL(requestURI);    if ("HTTP/1.1".equals(request.getProtocol())) {      internalResponse.sendRedirect(location,HttpServletResponse.SC_SEE_OTHER);    } else {      internalResponse.sendRedirect(location,HttpServletResponse.SC_FOUND);    }  }  return false;}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aElement) throws Exception {  StoreDescription elementDesc=getRegistry().findDescription(aElement.getClass());  if (elementDesc != null) {    Loader loader=(Loader)aElement;    if (!isDefaultLoader(loader)) {      if (log.isDebugEnabled())       log.debug("store " + elementDesc.getTag() + "( "+ aElement+ " )");      getStoreAppender().printIndent(aWriter,indent + 2);      getStoreAppender().printTag(aWriter,indent + 2,loader,elementDesc);    }  } else {    if (log.isWarnEnabled()) {      log.warn("Descriptor for element" + aElement.getClass() + " not configured or element class not StandardManager!");    }  }}  }
class C{  public final int popAndTop(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;  return (m_firstFree == 0) ? DTM.NULL : m_map[m_firstFree - 1];}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EncryptedAssertionElement createEncryptedAssertionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAssertionElementImpl();}  }
class C{  public NSDictionary(){  dict=new LinkedHashMap<String,NSObject>();}  }
class C{  public RmiConnector(MBeanServer mbs,JmxConnectionHandler jmxConnectionHandler){  this.mbs=mbs;  this.jmxConnectionHandler=jmxConnectionHandler;  String baseName=JMXMBean.getJmxName(jmxConnectionHandler.getComponentEntryDN());  jmxRmiConnectorNoClientCertificateName=baseName + "," + "Type=jmxRmiConnectorNoClientCertificateName";}  }
class C{  @OnClose public void close(){  subscription.close();}  }
class C{  void migratedSubjectCondition(String from,String to){  subjectConditionMigration.put(from,to);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSLogoutNotification.toXMLString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSLogoutNotification.toXMLString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  String prefix="";  String uri="";  String uriSAML="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }    uriSAML=IFSConstants.assertionDeclareStr;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if (notOnOrAfter == null) {    notOnOrAfter=new Date(issueInstant.getTime() + IFSConstants.ASSERTION_TIMEOUT_ALLOWED_DIFFERENCE);  }  String notAfter=DateUtils.toUTCDateFormat(notOnOrAfter);  if (requestID != null) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.LOGOUT_REQUEST).append(uri).append(uriSAML);    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {      xml.append(IFSConstants.SPACE).append(IFSConstants.ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);    }    xml.append(IFSConstants.SPACE).append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(requestID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE);    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      xml.append(IFSConstants.SPACE).append(IFSConstants.NOT_ON_OR_AFTER).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(notAfter).append(IFSConstants.QUOTE);    }    xml.append(IFSConstants.RIGHT_ANGLE);    if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {      Iterator i=respondWiths.iterator();      while (i.hasNext()) {        xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.RIGHT_ANGLE).append((String)i.next()).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.RIGHT_ANGLE);      }    }    if (signed) {      if (signatureString != null) {        xml.append(signatureString);      } else       if (signature != null) {        signatureString=XMLUtils.print(signature);        xml.append(signatureString);      }    }    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_ID).append(uri).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);    if (nameIdentifier != null) {      xml.append(nameIdentifier.toString());    }    if ((sessionIndex != null) && sessionIndex.length() != 0) {      xml.append("<").append(prefix).append("SessionIndex").append(uri).append(">").append(sessionIndex).append("</").append(prefix).append("SessionIndex").append(">");    }    if (relayState != null && relayState.length() != 0) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.RELAY_STATE).append(uri).append(IFSConstants.RIGHT_ANGLE).append(relayState).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE);    }    xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.LOGOUT_REQUEST).append(IFSConstants.RIGHT_ANGLE);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutNotification.toString: " + "requestID is null ");    }    throw new FSMsgException("nullRequestID",null);  }  return xml.toString();}  }
class C{  public boolean hasMoreElements(){  return i < attr.length;}  }
class C{  @Override public void encodeChildren(final FacesContext context) throws IOException {}  }
class C{  protected static boolean isPredefinedCidFont(String fontName){  if (!registryNames.containsKey(FONTS_PROP)) {    return false;  } else   if (!registryNames.get(FONTS_PROP).contains(fontName)) {    return false;  }  return true;}  }
class C{  public ServiceManager(SSOToken token) throws SSOException, SMSException {  initialize(token);  SSOTokenManager.getInstance().validateToken(token);  this.token=token;}  }
class C{  public static void addInterfaces(ClassNode classNode,Class<?>[] interfaces){  for (  Class<?> interfaceClass : interfaces) {    if (interfaceClass.isInterface()) {      classNode.interfaces.add(interfaceClass.getName().replaceAll(".","/"));    }  }}  }
class C{  @SuppressWarnings("unchecked") static <T extends Configuration>Pair<ConfigAddListenerAdaptor<T>,ServerManagedObjectAddListener<T>> extractIntermediateListener(ConfigAddListener configListener){  if (configListener instanceof ConfigAddListenerAdaptor) {    ConfigAddListenerAdaptor<T> adaptor=(ConfigAddListenerAdaptor<T>)configListener;    return Pair.of(adaptor,adaptor.getServerManagedObjectAddListener());  }  return Pair.empty();}  }
class C{  public static Map<String,MappedClass> mappingsFromProguard(File file,Map<String,ClassNode> nodes){  Map<String,MappedClass> base=mappingsFromNodes(nodes);  MappingLoader loader=new ProguardLoader(nodes);  try {    Map<String,MappedClass> newMappings=loader.read(new FileReader(file));    for (    MappedClass mappedClass : newMappings.values()) {      newMappings=linkMappings(mappedClass,newMappings);    }    base=fixFromMappingsText(base,newMappings);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  return base;}  }
class C{  public R visitIPAddressMask(IPAddressMaskPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public FactoryConfigurationError(java.lang.Exception e,java.lang.String msg){  super(msg);  nested=e;}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  private static void verifyOid(String oidStr) throws AciException {  int pos=0, length=oidStr.length();  char c;  if ("*".equals(oidStr)) {    return;  }  boolean lastWasPeriod=false;  while (pos < length && ((c=oidStr.charAt(pos++)) != ' ')) {    if (c == '.') {      if (lastWasPeriod) {        LocalizableMessage message=WARN_ACI_SYNTAX_DOUBLE_PERIOD_IN_NUMERIC_OID.get(oidStr,pos - 1);        throw new AciException(message);      }      lastWasPeriod=true;    } else     if (!isDigit(c)) {      LocalizableMessage message=WARN_ACI_SYNTAX_ILLEGAL_CHAR_IN_NUMERIC_OID.get(oidStr,c,pos - 1);      throw new AciException(message);    } else {      lastWasPeriod=false;    }  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  protected void onRead(ByteBuffer buf){}  }
class C{  public void rethrowError() throws Throwable {  if (tag == ERROR) {    if (value instanceof TypeNotPresentException) {      TypeNotPresentException tnpe=(TypeNotPresentException)value;      throw new TypeNotPresentException(tnpe.typeName(),tnpe.getCause());    } else     if (value instanceof EnumConstantNotPresentException) {      EnumConstantNotPresentException ecnpe=(EnumConstantNotPresentException)value;      throw new EnumConstantNotPresentException(ecnpe.enumType(),ecnpe.constantName());    } else     if (value instanceof ArrayStoreException) {      ArrayStoreException ase=(ArrayStoreException)value;      throw new ArrayStoreException(ase.getMessage());    }    Throwable error=(Throwable)value;    StackTraceElement[] ste=error.getStackTrace();    ByteArrayOutputStream bos=new ByteArrayOutputStream(ste == null ? 512 : (ste.length + 1) * 80);    ObjectOutputStream oos=new ObjectOutputStream(bos);    oos.writeObject(error);    oos.flush();    oos.close();    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    ObjectInputStream ois=new ObjectInputStream(bis);    error=(Throwable)ois.readObject();    ois.close();    throw error;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lcNode;  Node nsNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  lcNode=employeeNode.getLastChild();  nsNode=lcNode.getNextSibling();  assertNull("nodeGetNextSiblingNullAssert1",nsNode);}  }
class C{  public void concatenate(NetObjectList net_obj_list){  super.concatenate(net_obj_list);}  }
class C{  public void show(){  show(null);}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.security.Key kek,int kekStrength) throws EncryptionException {  return ep.encryptAndReplace(doc,element,secretKeyAlg,keySize,kek,kekStrength,null);}  }
class C{  public void removeFactory(FileMessage msg){  fileFactories.remove(msg.getFileName());}  }
class C{  public PotionData(PotionType type,boolean extended,boolean upgraded){  Validate.notNull(type,"Potion Type must not be null");  Validate.isTrue(!upgraded || type.isUpgradeable(),"Potion Type is not upgradable");  Validate.isTrue(!extended || type.isExtendable(),"Potion Type is not extendable");  Validate.isTrue(!upgraded || !extended,"Potion cannot be both extended and upgraded");  this.type=type;  this.extended=extended;  this.upgraded=upgraded;}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < length(); i++) {    result.add(getFieldName(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  @Override public void newLine() throws IOException {  if (writer != null) {    writer.write(System.lineSeparator());  } else {    write(System.lineSeparator());  }}  }
class C{  public String createUser(String username,String password,String fullName){  UserDatabase database=(UserDatabase)this.resource;  User user=database.createUser(username,password,fullName);  try {    MBeanUtils.createMBean(user);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception creating user [" + username + "] MBean");    iae.initCause(e);    throw iae;  }  return (findUser(username));}  }
class C{  public static Set stringArrayToSet(String[] strs){  int count=(strs != null) ? count=strs.length : 0;  Set set=((count > 0) ? new HashSet(count) : new HashSet());  for (int i=0; i < count; i++) {    set.add(strs[i]);  }  return set;}  }
class C{  public void pushSAXLocatorNull(){  m_saxLocations.push(null);}  }
class C{  @DataProvider public Object[][] stringWithSpacesProvider(){  return new Object[][]{{" this is a string ",false,false," this is a string "},{" this is a string ",false,true," this is a string "},{" this is a string ",true,false,"this is a string"},{" this is a string ",true,true,"this is a string"},{"   this  is    a   string  ",false,false," this is a string "},{"   this  is    a   string  ",false,true," this is a string "},{"   this  is    a   string  ",true,false,"this is a string"},{"   this  is    a   string  ",true,true,"this is a string"},{" THIS IS A STRING ",false,false," THIS IS A STRING "},{" THIS IS A STRING ",false,true," this is a string "},{" THIS IS A STRING ",true,false,"THIS IS A STRING"},{" THIS IS A STRING ",true,true,"this is a string"}};}  }
class C{  public void removeConnectionProperty(final String name){  connectionProperties.remove(name);}  }
class C{  private static int determineConsecutiveBinaryCount(String msg,int startpos,Charset encoding) throws WriterException {  final CharsetEncoder encoder=encoding.newEncoder();  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (!encoder.canEncode(ch)) {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public MemberImpl(String host,int port,long aliveTime) throws IOException {  setHostname(host);  this.port=port;  this.memberAliveTime=aliveTime;}  }
class C{  public static void main(final String[] args){  if (args.length != 2 && args.length != 3) {    System.err.println("Usage: serverRootDir newBaseDn [ldapPort]");    System.exit(1);  }  final String serverRootDir=args[0];  final String newBaseDn=args[1];  final int ldapPort=args.length > 2 ? Integer.parseInt(args[2]) : 1500;  EmbeddedDirectoryServer server=manageEmbeddedDirectoryServer(configParams().serverRootDirectory(serverRootDir).configurationFile(serverRootDir + File.separator + "config/config.ldif"),connectionParams().hostName("localhost").ldapPort(ldapPort).bindDn("cn=Directory Manager").bindPassword("password"),System.out,System.err);  try (ManagementContext config=server.getConfiguration()){    BackendCfgClient userRoot=config.getRootConfiguration().getBackend("userRoot");    System.out.println("The current base Dn(s) of the user backend are: " + userRoot.getBaseDN());    userRoot.setBaseDN(asList(DN.valueOf(newBaseDn)));    userRoot.commit();    System.out.println("The base Dn of the user backend has been set to: " + newBaseDn);  } catch (  AdminException|IOException|EmbeddedDirectoryServerException e) {    System.err.println("A problem occured when reading/updating configuration: " + e.toString());  }}  }
class C{  public boolean isTsp(){  return isTsp;}  }
class C{  private CompatibilityUtil(){}  }
class C{  private Integer versionCompare(String str1,String str2){  String[] vals1=str1.split("\\.");  String[] vals2=str2.split("\\.");  int i=0;  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {    i++;  }  if (i < vals1.length && i < vals2.length) {    int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));    return Integer.signum(diff);  } else {    return Integer.signum(vals1.length - vals2.length);  }}  }
class C{  public DOMSignContext(KeySelector ks,Node parent,Node nextSibling){  if (ks == null) {    throw new NullPointerException("key selector cannot be null");  }  if (parent == null) {    throw new NullPointerException("parent cannot be null");  }  if (nextSibling == null) {    throw new NullPointerException("nextSibling cannot be null");  }  setKeySelector(ks);  this.parent=parent;  this.nextSibling=nextSibling;}  }
class C{  public boolean hasRights(int right){  return perm.hasRights(right);}  }
class C{  void updateLabelsForExistingResourceSet(ResourceSetDescription resourceSet){  JsonValue newLabels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);  if (newLabels.isNull()) {    newLabels=json(array());  }  Collection<String> addedLabels=new HashSet<>(newLabels.asCollection(String.class));  try {    Set<ResourceSetLabel> labels=labelsStore.forResourceSet(resourceSet.getRealm(),resourceSet.getResourceOwnerId(),resourceSet.getId(),true);    Collection<String> removedLabels=new HashSet<>();    for (    ResourceSetLabel label : labels) {      String labelName=label.getName().substring(label.getName().lastIndexOf("/") + 1);      if (!addedLabels.remove(labelName)) {        removedLabels.add(labelName);      }    }    updateLabels(resourceSet,addedLabels,removedLabels);  } catch (  ResourceException e) {    logger.error("Failed to find current labels on resource set: {}",resourceSet.getId(),e);  }}  }
class C{  public void initializeCertificateMappers() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addCertificateMapperAddListener(this);  rootConfiguration.addCertificateMapperDeleteListener(this);  for (  String mapperName : rootConfiguration.listCertificateMappers()) {    CertificateMapperCfg mapperConfiguration=rootConfiguration.getCertificateMapper(mapperName);    mapperConfiguration.addChangeListener(this);    if (mapperConfiguration.isEnabled()) {      String className=mapperConfiguration.getJavaClass();      try {        CertificateMapper<?> mapper=loadMapper(className,mapperConfiguration,true);        certificateMappers.put(mapperConfiguration.dn(),mapper);        DirectoryServer.registerCertificateMapper(mapperConfiguration.dn(),mapper);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  private void checkUnusualURLPattern(String urlPattern){  if (log.isInfoEnabled()) {    if ((urlPattern.endsWith("*") && (urlPattern.length() < 2 || urlPattern.charAt(urlPattern.length() - 2) != '/')) || urlPattern.startsWith("*.") && urlPattern.length() > 2 && urlPattern.lastIndexOf('.') > 1) {      log.info("Suspicious url pattern: \"" + urlPattern + "\""+ " in context ["+ getName()+ "] - see"+ " sections 12.1 and 12.2 of the Servlet specification");    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  ProcessingInstruction piImport;  ProcessingInstruction piToImport;  String piData;  String piTarget;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  piToImport=doc.createProcessingInstruction("Target","Data");  piImport=(ProcessingInstruction)doc.importNode(piToImport,false);  piTarget=piImport.getTarget();  piData=piImport.getData();  assertEquals("documentimportnode18_Target","Target",piTarget);  assertEquals("documentimportnode18_Data","Data",piData);}  }
class C{  public static boolean isIPv6Reference(String address){  return address.charAt(0) == '[' && address.charAt(address.length() - 1) == ']';}  }
class C{  public static ArgumentException unknownValueForChildComponent(String componentName){  LocalizableMessage msg=ERR_DSCFG_ERROR_FINDER_NO_CHILDREN.get(componentName);  return new ArgumentException(msg);}  }
class C{  @Override public int read(char[] chars) throws IOException {  return read(chars,0,chars.length);}  }
class C{  public Link(String text,PdfDestination destination){  this(text,new PdfLinkAnnotation(new Rectangle(0,0,0,0)).setDestination(destination));}  }
class C{  public AbortedChangelogCursorException(Throwable cause){  super(cause);}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof ID3v22Frame)) {    return false;  }  ID3v22Frame that=(ID3v22Frame)obj;  return EqualsUtil.areEqual(this.statusFlags,that.statusFlags) && EqualsUtil.areEqual(this.encodingFlags,that.encodingFlags) && super.equals(that);}  }
class C{  synchronized static void initialize(){  if (CertPathHelper.instance == null) {    CertPathHelper.instance=new CertPathHelperImpl();  }}  }
class C{  private static boolean needIncrement(long ldivisor,int roundingMode,int qsign,MutableBigInteger mq,long r){  assert r != 0L;  int cmpFracHalf;  if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {    cmpFracHalf=1;  } else {    cmpFracHalf=longCompareMagnitude(2 * r,ldivisor);  }  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,mq.isOdd());}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  private void checkPackageInfoFileExistsInternal(File sourceDirectory){  assertTrue(sourceDirectory.exists());  assertTrue(sourceDirectory.isDirectory());  File packageInfoFile=new File(sourceDirectory,"package-info.java");  assertTrue(packageInfoFile.exists(),"Source directory " + sourceDirectory.getAbsolutePath() + " does not contain a package-info.java file.");}  }
class C{  boolean canJumpInto(){switch (kind) {case Block:case Statement:case Switch:case Lambda:    return true;}return false;}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  NetClass append(String p_name,board.BrdLayerStructure p_layer_structure,ClearanceMatrix p_clearance_matrix){  NetClass new_class=new NetClass(p_name,p_layer_structure,p_clearance_matrix);  class_list.add(new_class);  return new_class;}  }
class C{  public NumberUpSupported(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Number up value must be > 0");  }}  }
class C{  public static MBeanServer newMBeanServer(){  return newMBeanServer(null);}  }
class C{  public static String readCharacterSizedString(InputStream stream) throws IOException {  StringBuilder result=new StringBuilder();  int strLen=readUINT16(stream);  int character=stream.read();  character|=stream.read() << 8;  do {    if (character != 0) {      result.append((char)character);      character=stream.read();      character|=stream.read() << 8;    }  } while (character != 0 || (result.length() + 1) > strLen);  if (strLen != (result.length() + 1)) {    throw new IllegalStateException("Invalid Data for current interpretation");  }  return result.toString();}  }
class C{  public SocketTimeoutException(){}  }
class C{  public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  public boolean isKbaEnabled(){  return kbaEnabled;}  }
class C{  public void eventError(String errorStr){  debug.error("EntryEventListener.eventError(): " + errorStr);}  }
class C{  public final boolean hasConflict(DocumentBuilderSetting other){  if (other == null) {    throw new NullPointerException("other");  }  if (other == this) {    return true;  }  return strategy.hasConflict(other.strategy);}  }
class C{  public FrameBodyXSOA(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static void copy(String source,String target){  InputStream in=null;  OutputStream out=null;  try {    in=new BufferedInputStream(new FileInputStream(source));    out=new BufferedOutputStream(new FileOutputStream(target));    for (int c=read(in); c != -1; c=read(in)) {      write(out,c);    }  } catch (  FileNotFoundException e) {    throw new RuntimeException(e.getMessage(),e);  } finally {    close(in);    close(out);  }  close(in);  close(out);}  }
class C{  public Future<Job> delayed(){  return this.state(JobState.DELAYED);}  }
class C{  public boolean write(Node nodeArg,LSOutput destination) throws LSException {  if (destination == null) {    String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));    }    throw new LSException(LSException.SERIALIZE_ERR,msg);  }  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=destination.getEncoding();    if (fEncoding == null) {      fEncoding=getInputEncoding(nodeArg);      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    if (!Encodings.isRecognizedEncoding(fEncoding)) {      String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    Writer writer=destination.getCharacterStream();    if (writer == null) {      OutputStream outputStream=destination.getByteStream();      if (outputStream == null) {        String uri=destination.getSystemId();        if (uri == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);          if (fDOMErrorHandler != null) {            fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));          }          throw new LSException(LSException.SERIALIZE_ERR,msg);        } else {          String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);          URL url=new URL(absoluteURI);          OutputStream urlOutStream=null;          String protocol=url.getProtocol();          String host=url.getHost();          if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {            urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));          } else {            URLConnection urlCon=url.openConnection();            urlCon.setDoInput(false);            urlCon.setDoOutput(true);            urlCon.setUseCaches(false);            urlCon.setAllowUserInteraction(false);            if (urlCon instanceof HttpURLConnection) {              HttpURLConnection httpCon=(HttpURLConnection)urlCon;              httpCon.setRequestMethod("PUT");            }            urlOutStream=urlCon.getOutputStream();          }          serializer.setOutputStream(urlOutStream);        }      } else {        serializer.setOutputStream(outputStream);      }    } else {      serializer.setWriter(writer);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  UnsupportedEncodingException ue) {    String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING,ue));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,ue).fillInStackTrace();  }catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  public synchronized void writeExternal(ObjectOutput os) throws IOException {  if (mimeType != null) {    mimeType.setParameter("humanPresentableName",humanPresentableName);    os.writeObject(mimeType);    mimeType.removeParameter("humanPresentableName");  } else {    os.writeObject(null);  }  os.writeObject(representationClass);}  }
class C{  protected boolean checkIfHeaders(HttpServletRequest request,HttpServletResponse response,WebResource resource) throws IOException {  return checkIfMatch(request,response,resource) && checkIfModifiedSince(request,response,resource) && checkIfNoneMatch(request,response,resource)&& checkIfUnmodifiedSince(request,response,resource);}  }
class C{  public static FileBasedArgument keyStorePasswordFileArgument() throws ArgumentException {  return FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_ARGUMENT_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void addCOSTemplate(COSTemplate cosTemplate) throws UMSException {  if (getGuid() == null) {    String msg=i18n.getString(IUMSConstants.DEFINITION_NOT_PERSISTENT);    throw new UMSException(msg);  }  if (getAttribute(ICOSDefinition.COSTEMPLATEDN) == null) {    this.modify(new Attr(ICOSDefinition.COSTEMPLATEDN,getGuid().getDn()),ModificationType.ADD);    this.save();  }  this.addChild(cosTemplate);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrparentnodenull.class,args);}  }
class C{  private void addTestEntry() throws NamingException {  DirContext ctx=null;  try {    Attribute objectClass=new BasicAttribute("objectclass");    objectClass.add("top");    objectClass.add("person");    objectClass.add("organizationalPerson");    objectClass.add("inetOrgPerson");    Attribute aPwdPolicy=new BasicAttribute("ds-pwp-password-policy-dn",pwdPolicyDN);    Attribute cn=new BasicAttribute("cn","test");    cn.add("test.User");    Attribute sn=new BasicAttribute("sn","User");    Attributes entryAttrs=new BasicAttributes();    entryAttrs.put(objectClass);    entryAttrs.put(cn);    entryAttrs.put(sn);    entryAttrs.put(aPwdPolicy);    Hashtable<String,String> env=new Hashtable<>();    env.put(Context.INITIAL_CONTEXT_FACTORY,factory);    String url="ldaps://localhost:" + TestCaseUtils.getServerLdapsPort();    env.put(Context.PROVIDER_URL,url);    env.put(Context.SECURITY_PRINCIPAL,dirMgr);    env.put(Context.SECURITY_CREDENTIALS,"password");    env.put(Context.SECURITY_AUTHENTICATION,simple);    env.put("java.naming.ldap.factory.socket",TestSSLSocketFactory.class.getName());    ctx=new InitialDirContext(env);    ctx.bind(testUserDN,null,entryAttrs);    ModificationItem[] mods=new ModificationItem[1];    Attribute pwd=new BasicAttribute("userPassword","password");    mods[0]=new ModificationItem(DirContext.ADD_ATTRIBUTE,pwd);    ctx.modifyAttributes(testUserDN,mods);  }  finally {    if (ctx != null) {      ctx.close();    }  }}  }
class C{  public ConnectionFactory<Connection> createFactory() throws InvalidConfigurationException {  ConnectionConfig config=configFactory.getConfig(connectionType);  int timeout=timeoutConfig.getTimeout(connectionType);  Options options=Options.defaultOptions().set(REQUEST_TIMEOUT,new Duration((long)timeout,TimeUnit.SECONDS));  debug("Creating Embedded Factory:\nURL: {0}\nMax Connections: {1}\nHeartbeat: {2}\nOperation Timeout: {3}",config.getLDAPURLs(),config.getMaxConnections(),config.getLdapHeartbeat(),timeout);  final org.forgerock.opendj.ldap.ConnectionFactory ldapConnectionFactory=LDAPUtils.newFailoverConnectionPool(config.getLDAPURLs(),config.getBindDN(),config.getBindPassword(),config.getMaxConnections(),config.getLdapHeartbeat(),SECONDS.toString(),options);  return new LdapConnectionFactory(ldapConnectionFactory);}  }
class C{  @Override public void show(final FragmentManager manager,final String tag){  super.show(manager,tag);}  }
class C{  @Override public Foo create(long fooId){  Foo foo=new FooImpl();  foo.setNew(true);  foo.setPrimaryKey(fooId);  String uuid=PortalUUIDUtil.generate();  foo.setUuid(uuid);  foo.setCompanyId(companyProvider.getCompanyId());  return foo;}  }
class C{  public ZipExtractor(File zipFile) throws FileNotFoundException, IllegalArgumentException {  this(zipFile,0,0,1,null);}  }
class C{  public void authenticate(String name,String password) throws IOException, NoSuchAlgorithmException, RejectException, ChallengeException {  AccessRequest req=createAccessRequest();  req.addAttribute(new UserNameAttribute(name));  req.addAttribute(new UserPasswordAttribute(req.getAuthenticator(),secret,password));  req.addAttribute(new NASIPAddressAttribute(InetAddress.getLocalHost()));  req.addAttribute(new NASPortAttribute(socket.getLocalPort()));  sendPacket(req);}  }
class C{  private static final byte[] toOctets(int identifier,String text){  byte[] s=text.getBytes(StandardCharsets.UTF_8);  byte[] base=OctetUtils.toOctets(AttributeType.VENDOR_SPECIFIC,identifier);  int maxTextSpace=Attribute.MAX_ATTRIBUTE_LENGTH - base.length;  byte[] octets;  if (s.length > maxTextSpace) {    octets=new byte[Attribute.MAX_ATTRIBUTE_LENGTH];    System.arraycopy(s,0,octets,base.length,Attribute.MAX_ATTRIBUTE_LENGTH - base.length);  } else {    octets=new byte[base.length + s.length];    System.arraycopy(s,0,octets,base.length,s.length);  }  System.arraycopy(base,0,octets,0,base.length);  octets[1]=(byte)octets.length;  return octets;}  }
class C{  public boolean equals(XMLString obj2){  if (this == obj2) {    return true;  }  int n=m_length;  if (n == obj2.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != obj2.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public OutputStreamStandardEncryption(java.io.OutputStream out,byte[] key,int off,int len){  super(out);  arcfour=new ARCFOUREncryption();  arcfour.prepareARCFOURKey(key,off,len);}  }
class C{  @Override public void collide(){  bounce=true;}  }
class C{  public InputStream openStream() throws IOException {  if (entryName == null) {    return url.openStream();  } else {    URL entryUrl=JarFactory.getJarEntryURL(url,entryName);    return entryUrl.openStream();  }}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  boolean majorChanged=(majorAxis == X_AXIS) ? width : height;  boolean minorChanged=(majorAxis == X_AXIS) ? height : width;  if (majorChanged) {    majorReqValid=false;    majorAllocValid=false;  }  if (minorChanged) {    minorReqValid=false;    minorAllocValid=false;  }  super.preferenceChanged(child,width,height);}  }
class C{  Path resolvePath(Path file){  return checksums.getParent().resolve(file);}  }
class C{  public static final String readFile(File file) throws IOException {  BufferedInputStream in=null;  try {    in=new BufferedInputStream(new FileInputStream(file));    SimpleByteBuffer buffer=new SimpleByteBuffer();    byte[] buf=new byte[1024];    int len;    while ((len=in.read(buf)) != -1) {      buffer.put(buf,len);    }    return new String(buffer.buffer,0,buffer.write);  }  finally {    if (null != in) {      in.close();    }  }}  }
class C{  private void backupScreens(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(LauncherSettings.WorkspaceScreens.CONTENT_URI,SCREEN_PROJECTION,null,null,null);  try {    cursor.moveToPosition(-1);    if (DEBUG)     Log.d(TAG,"dumping screens after: " + mLastBackupRestoreTime);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      BackupProtos.Key key=getKey(BackupProtos.Key.SCREEN,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {        writeRowToBackup(key,packScreen(cursor),data);      } else {        if (VERBOSE)         Log.v(TAG,"screen already backup up " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public PerlinOctaveGenerator(long seed,int octaves){  this(new Random(seed),octaves);}  }
class C{  public SQLTransactionRollbackException(String reason){  super(reason,null,0);}  }
class C{  public PluginResult.PreOperation invokePreOperationModifyDNPlugins(PreOperationModifyDNOperation modifyDNOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationModifyDNPlugins.length; i++) {    DirectoryServerPlugin p=preOperationModifyDNPlugins[i];    if (isInternalOperation(modifyDNOperation,p)) {      continue;    }    try {      result=p.doPreOperation(modifyDNOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationModifyDNPlugins,modifyDNOperation,p);    }    if (result == null) {      return handlePreOperationResult(modifyDNOperation,i,preOperationModifyDNPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationModifyDNPlugins,modifyDNOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EncryptedElementsElement createEncryptedElementsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EncryptedElementsElementImpl();}  }
class C{  public synchronized void co_exit(int thisCoroutine){  m_activeIDs.clear(thisCoroutine);  m_nextCoroutine=NOBODY;  notify();}  }
class C{  public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public ReconAuditEventBuilder reconId(String reconId){  jsonValue.put(RECON_ID,reconId);  return self();}  }
class C{  protected void initialize(HttpServletRequest req,String rbName){  try {    if (rbName != null) {      this.rbName=rbName;    }    ssoToken=AMAuthUtils.getSSOToken(req);    getUserInfo(req);    ServiceSchemaManager idRepoServiceSchemaManager=new ServiceSchemaManager(ssoToken,IdConstants.REPO_SERVICE,"1.0");    svcRevisionNumber=idRepoServiceSchemaManager.getRevisionNumber();  } catch (  SMSException smse) {    debug.warning("AMModelBase.initialize",smse);  }catch (  SSOException e) {    debug.warning("AMModelBase.initialize",e);  }}  }
class C{  public ResourceRef(String resourceClass,String description,String scope,String auth,boolean singleton){  this(resourceClass,description,scope,auth,singleton,null,null);}  }
class C{  @Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByField2(field2,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  private StringBuilder encodeProduct(StringBuilder tokens){  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());  }  return tokens;}  }
class C{  public PdfCollectionSchema(){  this(new PdfDictionary());}  }
class C{  public Cursor fetchAll(Long ruleID,Long actionID,Integer failureType){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (ruleID != null) {    qb.appendWhere(" AND " + KEY_RULEID + "="+ ruleID);  }  if (actionID != null) {    qb.appendWhere(" AND " + KEY_ACTIONID + "="+ actionID);  }  if (failureType != null) {    qb.appendWhere(" AND " + KEY_FAILURE_TYPE + "="+ failureType);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  @Override public void flush() throws IOException {  if (writer != null) {    writer.flush();  }}  }
class C{  public boolean hasReplayError(){  return hasReplayError;}  }
class C{  private void formatAndLogArguments(LoggingLevel level,String msg,Object[] args){  if (PhotonLogger.level.id < level.id) {    return;  }  LocalDateTime dateTime=LocalDateTime.now();  FormattingTuple ft=MessageFormatter.arrayFormat(msg,args);  String formatted=formatLogLine(level,dateTime,ft.getMessage());  Throwable t=ft.getThrowable();  if (t == null) {    LoggingService.logLine(dateTime,formatted);  } else {    LoggingService.logThrowable(dateTime,t,formatted);  }}  }
class C{  boolean check_shove_trace_line(MazeListElement p_list_element,ExpandRoomObstacle p_obstacle_room,boolean p_shove_to_the_left,Collection<MazeDoorSection> p_to_door_list){  if (!(p_list_element.door instanceof ExpandDoor))   return true;  ExpandDoor from_door=(ExpandDoor)p_list_element.door;  BrdItem an_item=p_obstacle_room.get_item();  if (!(an_item instanceof BrdTracep))   return true;  BrdTracep obstacle_trace=(BrdTracep)an_item;  int trace_layer=p_obstacle_room.get_layer();  if (obstacle_trace.get_half_width() != art_ctrl.trace_half_width[trace_layer]) {    r_board.userPrintln("cannot shove != width " + obstacle_trace);    return true;  }  if (obstacle_trace.clearance_idx() != art_ctrl.trace_clearance_idx) {    r_board.userPrintln("cannot shove != clearance " + obstacle_trace);    return true;  }  double compensated_trace_half_width=art_ctrl.compensated_trace_half_width[trace_layer];  ShapeTile from_door_shape=from_door.get_shape();  if (from_door_shape.max_width() < 2 * compensated_trace_half_width) {    r_board.userPrintln("cannot shove != 2*compe " + obstacle_trace);    return true;  }  int trace_corner_no=p_obstacle_room.get_index_in_item();  Polyline trace_polyline=obstacle_trace.polyline();  if (trace_corner_no >= trace_polyline.corner_count()) {    r_board.userPrintln("cannot shove trace_corner_no to big " + obstacle_trace);    return false;  }  Collection<ExpandDoor> room_doors=p_obstacle_room.get_doors();  PlaSegmentInt shove_line_segment;  if (from_door.dimension.is_area()) {    ExpandRoomComplete other_room=from_door.other_room_complete(p_obstacle_room);    if (!(other_room instanceof ExpandRoomObstacle))     return false;    if (!end_points_matching(obstacle_trace,((ExpandRoomObstacle)other_room).get_item()))     return false;    PlaPointFloat door_center=from_door_shape.centre_of_gravity();    PlaPointFloat corner_1=trace_polyline.corner_approx(trace_corner_no);    PlaPointFloat corner_2=trace_polyline.corner_approx(trace_corner_no + 1);    if (corner_1.distance_square(corner_2) < 1) {      return false;    }    boolean shove_into_direction_of_trace_start=door_center.distance_square(corner_2) < door_center.distance_square(corner_1);    shove_line_segment=trace_polyline.segment_get(trace_corner_no + 1);    if (shove_into_direction_of_trace_start) {      shove_line_segment=shove_line_segment.opposite();    }  } else {    ExpandRoomComplete from_room=from_door.other_room_complete(p_obstacle_room);    PlaPointFloat from_point=from_room.get_shape().centre_of_gravity();    PlaLineInt shove_trace_line=trace_polyline.plaline(trace_corner_no + 1);    PlaSegmentFloat door_line_segment=from_door_shape.diagonal_corner_segment();    PlaSide side_of_trace_line=shove_trace_line.side_of(door_line_segment.point_a,0);    PlaSegmentFloat polar_line_segment=from_door_shape.polar_line_segment(from_point);    boolean door_line_swapped=polar_line_segment.point_b.distance_square(door_line_segment.point_a) < polar_line_segment.point_a.distance_square(door_line_segment.point_a);    boolean section_ok;    double shape_entry_check_distance=compensated_trace_half_width + 5;    double check_dist_square=shape_entry_check_distance * shape_entry_check_distance;    if (p_shove_to_the_left && !door_line_swapped || !p_shove_to_the_left && door_line_swapped) {      section_ok=p_list_element.section_no_of_door == p_list_element.door.maze_search_element_count() - 1 && (p_list_element.shape_entry.point_a.distance_square(door_line_segment.point_b) <= check_dist_square || p_list_element.shape_entry.point_b.distance_square(door_line_segment.point_b) <= check_dist_square);    } else {      section_ok=p_list_element.section_no_of_door == 0 && (p_list_element.shape_entry.point_a.distance_square(door_line_segment.point_a) <= check_dist_square || p_list_element.shape_entry.point_b.distance_square(door_line_segment.point_a) <= check_dist_square);    }    if (!section_ok) {      return false;    }    PlaSegmentFloat shrinked_line_segment=polar_line_segment.shrink_segment(compensated_trace_half_width);    PlaDirection perpendicular_direction=shove_trace_line.direction().rotate_45_deg(2);    if (side_of_trace_line == PlaSide.ON_THE_LEFT) {      if (p_shove_to_the_left) {        PlaLineInt start_closing_line=new PlaLineInt(shrinked_line_segment.point_b.round(),perpendicular_direction);        shove_line_segment=new PlaSegmentInt(start_closing_line,trace_polyline.plaline(trace_corner_no + 1),trace_polyline.plaline(trace_corner_no + 2));      } else {        PlaLineInt start_closing_line=new PlaLineInt(shrinked_line_segment.point_a.round(),perpendicular_direction);        shove_line_segment=new PlaSegmentInt(start_closing_line,trace_polyline.plaline(trace_corner_no + 1).opposite(),trace_polyline.plaline(trace_corner_no).opposite());      }    } else {      if (p_shove_to_the_left) {        PlaLineInt start_closing_line=new PlaLineInt(shrinked_line_segment.point_b.round(),perpendicular_direction);        shove_line_segment=new PlaSegmentInt(start_closing_line,trace_polyline.plaline(trace_corner_no + 1).opposite(),trace_polyline.plaline(trace_corner_no).opposite());      } else {        PlaLineInt start_closing_line=new PlaLineInt(shrinked_line_segment.point_a.round(),perpendicular_direction);        shove_line_segment=new PlaSegmentInt(start_closing_line,trace_polyline.plaline(trace_corner_no + 1),trace_polyline.plaline(trace_corner_no + 2));      }    }  }  int trace_half_width=art_ctrl.trace_half_width[trace_layer];  NetNosList net_no_arr=new NetNosList(art_ctrl.net_no);  double shove_width=r_board.check_trace(shove_line_segment,trace_layer,net_no_arr,trace_half_width,art_ctrl.trace_clearance_idx,true);  boolean segment_shortened=false;  if (shove_width < Integer.MAX_VALUE) {    shove_width=shove_width - 1;    if (shove_width <= 0)     return true;    shove_line_segment=shove_line_segment.change_length_approx(shove_width);    segment_shortened=true;  }  PlaPointFloat from_corner=shove_line_segment.start_point_approx();  PlaPointFloat to_corner=shove_line_segment.end_point_approx();  boolean segment_ist_point=from_corner.distance_square(to_corner) < 0.1;  if (!segment_ist_point) {    shove_width=r_board.shove_trace_algo.shove_trace_check(shove_line_segment,p_shove_to_the_left,trace_layer,net_no_arr,trace_half_width,art_ctrl.trace_clearance_idx,art_ctrl.max_shove_trace_recursion_depth,art_ctrl.max_shove_via_recursion_depth);    if (shove_width <= 0)     return true;  }  if (segment_shortened) {    shove_width=Math.min(shove_width,from_corner.distance(to_corner));  }  PlaLineInt shove_line=shove_line_segment.get_line();  double from_door_compare_distance;  if (from_door.dimension.is_area() || segment_ist_point) {    from_door_compare_distance=Double.MAX_VALUE;  } else {    from_door_compare_distance=to_corner.distance_square(from_door_shape.corner_approx(0));  }  for (  ExpandDoor curr_door : room_doors) {    if (curr_door == from_door)     continue;    if (curr_door.first_room instanceof ExpandRoomObstacle && curr_door.second_room instanceof ExpandRoomObstacle) {      BrdItem first_room_item=((ExpandRoomObstacle)curr_door.first_room).get_item();      BrdItem second_room_item=((ExpandRoomObstacle)curr_door.second_room).get_item();      if (first_room_item != second_room_item) {        continue;      }    }    ShapeTile curr_door_shape=curr_door.get_shape();    if (curr_door.dimension.is_area() && shove_width >= Integer.MAX_VALUE) {      boolean add_link_door=curr_door_shape.contains(to_corner);      if (add_link_door) {        PlaSegmentFloat[] line_sections=curr_door.get_section_segments(compensated_trace_half_width);        p_to_door_list.add(new MazeDoorSection(curr_door,0,line_sections[0]));      }      continue;    } else     if (!segment_ist_point) {      PlaSegmentFloat curr_door_segment=curr_door_shape.diagonal_corner_segment();      if (curr_door_segment == null) {        if (r_board.debug(Mdbg.MAZE,Ldbg.SPC_C))         System.out.println(classname + "check_shove_trace_line: door shape is empty");        continue;      }      PlaSide start_corner_side_of_trace_line=shove_line.side_of(curr_door_segment.point_a,0);      PlaSide end_corner_side_of_trace_line=shove_line.side_of(curr_door_segment.point_b,0);      if (p_shove_to_the_left) {        if (start_corner_side_of_trace_line != PlaSide.ON_THE_LEFT || end_corner_side_of_trace_line != PlaSide.ON_THE_LEFT) {          continue;        }      } else {        if (start_corner_side_of_trace_line != PlaSide.ON_THE_RIGHT || end_corner_side_of_trace_line != PlaSide.ON_THE_RIGHT) {          continue;        }      }      PlaSegmentFloat curr_door_line=curr_door_shape.polar_line_segment(from_corner);      PlaPointFloat curr_door_nearest_corner;      if (curr_door_line.point_a.distance_square(from_corner) <= curr_door_line.point_b.distance_square(from_corner)) {        curr_door_nearest_corner=curr_door_line.point_a;      } else {        curr_door_nearest_corner=curr_door_line.point_b;      }      if (to_corner.distance_square(curr_door_nearest_corner) >= from_door_compare_distance) {        continue;      }      PlaPointFloat curr_door_projection=curr_door_nearest_corner.projection_approx(shove_line);      if (curr_door_projection.distance(from_corner) + compensated_trace_half_width <= shove_width) {        PlaSegmentFloat[] line_sections=curr_door.get_section_segments(compensated_trace_half_width);        for (int i=0; i < line_sections.length; ++i) {          PlaSegmentFloat curr_line_section=line_sections[i];          PlaPointFloat curr_section_nearest_corner;          if (curr_line_section.point_a.distance_square(from_corner) <= curr_line_section.point_b.distance_square(from_corner)) {            curr_section_nearest_corner=curr_line_section.point_a;          } else {            curr_section_nearest_corner=curr_line_section.point_b;          }          PlaPointFloat curr_section_projection=curr_section_nearest_corner.projection_approx(shove_line);          if (curr_section_projection.distance(from_corner) <= shove_width) {            p_to_door_list.add(new MazeDoorSection(curr_door,i,curr_line_section));          }        }      }    }  }  return true;}  }
class C{  public void detach(){  super.detach();  if (m_canDetachNodeset) {    m_exprObj.detach();  }  m_exprObj=null;}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (m.size() == 0 && c.size() > 0 && c instanceof SortedSet && m instanceof TreeMap) {    SortedSet<? extends E> set=(SortedSet<? extends E>)c;    TreeMap<E,Object> map=(TreeMap<E,Object>)m;    Comparator<?> cc=set.comparator();    Comparator<? super E> mc=map.comparator();    if (cc == mc || (cc != null && cc.equals(mc))) {      map.addAllForTreeSet(set,PRESENT);      return true;    }  }  return super.addAll(c);}  }
