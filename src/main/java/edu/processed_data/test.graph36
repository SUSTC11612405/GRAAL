class C{  @Override public BasicLogRecord next(){  if (!isForward) {    currentRec=currentRec - pointerSize;    isForward=true;  }  if (currentRec == 0)   moveToNextBlock();  currentRec=(Integer)pg.getVal(currentRec,INTEGER).asJavaVal();  return new BasicLogRecord(pg,new LogSeqNum(blk.number(),currentRec + pointerSize * 2));}  }
class C{  private ISVNLocalResource[] processResources(IResourceDelta[] resources) throws CoreException {  List<ISVNLocalResource> revertedResources=new ArrayList<ISVNLocalResource>();  for (  IResourceDelta resourceDelta : resources) {    IResource resource=resourceDelta.getResource();    if (resource.getType() == IResource.FILE) {      ISVNLocalFile res=SVNWorkspaceRoot.getSVNFileFor((IFile)resource);      if (res.getFile().exists()) {        boolean deleted;        if (resourceDelta.getKind() == IResourceDelta.ADDED)         deleted=res.getStatusFromCache().isDeleted(); else {          deleted=SVNMoveDeleteHook.isDeleted((IFile)resource);          if (deleted)           SVNMoveDeleteHook.removeFromDeletedFileList((IFile)resource);        }        if (deleted) {          revertedResources.add(res);        }        ISVNLocalFolder parentFolder=res.getParent();        while (parentFolder != null) {          if (parentFolder.getStatusFromCache().isDeleted() && !parentFolder.getResource().exists() && !revertedResources.contains(parentFolder)) {            revertedResources.add(parentFolder);          } else {            break;          }          if (parentFolder.getParent() == null) {            break;          }          parentFolder=parentFolder.getParent();        }      }    }  }  return (ISVNLocalResource[])revertedResources.toArray(new ISVNLocalResource[revertedResources.size()]);}  }
class C{  @Override public void commit() throws RemoteException {  tx.commit();  try {    tx=VanillaDb.txMgr().newTransaction(isolationLevel,readOnly);  } catch (  Exception e) {    throw new RemoteException("error creating transaction ",e);  }}  }
class C{  @Override public void revertToDefaultValue(){  if (this.crsComboBox != null) {    crsComboBox.setSelectedIndex(-1);  }}  }
class C{  public static String uploadAndStoreImage(HttpServletRequest request,String idField,String uploadField){  ServletFileUpload fu=new ServletFileUpload(new DiskFileItemFactory(10240,FileUtil.getFile("runtime/tmp")));  FileUploadProgressListener listener=new FileUploadProgressListener();  fu.setProgressListener(listener);  request.getSession().setAttribute("uploadProgressListener",listener);  List<FileItem> lst=null;  Locale locale=UtilHttp.getLocale(request);  try {    lst=UtilGenerics.checkList(fu.parseRequest(request));  } catch (  FileUploadException e) {    request.setAttribute("_ERROR_MESSAGE_",e.toString());    return "error";  }  if (lst.size() == 0) {    String errMsg=UtilProperties.getMessage(DataResourceWorker.err_resource,"dataResourceWorker.no_files_uploaded",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[DataEvents.uploadImage] No files uploaded",module);    return "error";  }  FileItem fi=null;  FileItem imageFi=null;  String imageFileName=null;  Map<String,Object> passedParams=FastMap.newInstance();  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  passedParams.put("userLogin",userLogin);  byte[] imageBytes=null;  for (int i=0; i < lst.size(); i++) {    fi=lst.get(i);    String fieldName=fi.getFieldName();    if (fi.isFormField()) {      String fieldStr=fi.getString();      passedParams.put(fieldName,fieldStr);    } else     if (fieldName.startsWith("imageData")) {      imageFi=fi;      imageBytes=imageFi.get();      passedParams.put(fieldName,imageBytes);      imageFileName=imageFi.getName();      passedParams.put("drObjectInfo",imageFileName);      if (Debug.infoOn())       Debug.logInfo("[UploadContentAndImage]imageData: " + imageBytes.length,module);    }  }  if (imageBytes != null && imageBytes.length > 0) {    String mimeType=getMimeTypeFromImageFileName(imageFileName);    if (UtilValidate.isNotEmpty(mimeType)) {      passedParams.put("drMimeTypeId",mimeType);      try {        String returnMsg=UploadContentAndImage.processContentUpload(passedParams,"",request);        if (returnMsg.equals("error")) {          return "error";        }      } catch (      GenericServiceException e) {        request.setAttribute("_ERROR_MESSAGE_",e.getMessage());        return "error";      }    } else {      request.setAttribute("_ERROR_MESSAGE_","mimeType is empty.");      return "error";    }  }  return "success";}  }
class C{  public boolean isDurableWriteEnabled(){  return this.getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,BKDL_IS_DURABLE_WRITE_ENABLED_DEFAULT);}  }
class C{  public static boolean isBodyInActiveColorEnabled(){  return bodyInActiveColorEnabled;}  }
class C{  private void upOneLevel(){  if (this.currentDirectory.getParent() != null)   this.browseTo(this.currentDirectory.getParentFile());}  }
class C{  @Override public void close() throws SAException {  if (_entries != null)   _entries.freeSLHolder(_pos);  super.close();}  }
class C{  public HTTPInputSource(String publicId,String systemId,String baseSystemId,Reader charStream,String encoding){  super(publicId,systemId,baseSystemId,charStream,encoding);}  }
class C{  public DynamicInvokeExpr newDynamicInvokeExpr(SootMethodRef bootstrapMethodRef,List<Value> bootstrapArgs,SootMethodRef methodRef,int tag,List args){  return new GDynamicInvokeExpr(bootstrapMethodRef,bootstrapArgs,methodRef,tag,args);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  protected void addDTDDefaultAttrsAndValidate(QName elementName,int elementIndex,XMLAttributes attributes) throws XNIException {  if (elementIndex == -1 || fDTDGrammar == null) {    return;  }  int attlistIndex=fDTDGrammar.getFirstAttributeDeclIndex(elementIndex);  while (attlistIndex != -1) {    fDTDGrammar.getAttributeDecl(attlistIndex,fTempAttDecl);    if (DEBUG_ATTRIBUTES) {      if (fTempAttDecl != null) {        XMLElementDecl elementDecl=new XMLElementDecl();        fDTDGrammar.getElementDecl(elementIndex,elementDecl);        System.out.println("element: " + (elementDecl.name.localpart));        System.out.println("attlistIndex " + attlistIndex + "\n"+ "attName : '"+ (fTempAttDecl.name.localpart)+ "'\n"+ "attType : "+ fTempAttDecl.simpleType.type+ "\n"+ "attDefaultType : "+ fTempAttDecl.simpleType.defaultType+ "\n"+ "attDefaultValue : '"+ fTempAttDecl.simpleType.defaultValue+ "'\n"+ attributes.getLength()+ "\n");      }    }    String attPrefix=fTempAttDecl.name.prefix;    String attLocalpart=fTempAttDecl.name.localpart;    String attRawName=fTempAttDecl.name.rawname;    String attType=getAttributeTypeName(fTempAttDecl);    int attDefaultType=fTempAttDecl.simpleType.defaultType;    String attValue=null;    if (fTempAttDecl.simpleType.defaultValue != null) {      attValue=fTempAttDecl.simpleType.defaultValue;    }    boolean specified=false;    boolean required=attDefaultType == XMLSimpleType.DEFAULT_TYPE_REQUIRED;    boolean cdata=attType == XMLSymbols.fCDATASymbol;    if (!cdata || required || attValue != null) {      int attrCount=attributes.getLength();      for (int i=0; i < attrCount; i++) {        if (attributes.getQName(i) == attRawName) {          specified=true;          break;        }      }    }    if (!specified) {      if (required) {        if (fPerformValidation) {          Object[] args={elementName.localpart,attRawName};          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED",args,XMLErrorReporter.SEVERITY_ERROR);        }      } else       if (attValue != null) {        if (fPerformValidation && fGrammarBucket.getStandalone()) {          if (fDTDGrammar.getAttributeDeclIsExternal(attlistIndex)) {            Object[] args={elementName.localpart,attRawName};            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED",args,XMLErrorReporter.SEVERITY_ERROR);          }        }        if (fNamespaces) {          int index=attRawName.indexOf(':');          if (index != -1) {            attPrefix=attRawName.substring(0,index);            attPrefix=fSymbolTable.addSymbol(attPrefix);            attLocalpart=attRawName.substring(index + 1);            attLocalpart=fSymbolTable.addSymbol(attLocalpart);          }        }        fTempQName.setValues(attPrefix,attLocalpart,attRawName,fTempAttDecl.name.uri);        int newAttr=attributes.addAttribute(fTempQName,attType,attValue);      }    }    attlistIndex=fDTDGrammar.getNextAttributeDeclIndex(attlistIndex);  }  int attrCount=attributes.getLength();  for (int i=0; i < attrCount; i++) {    String attrRawName=attributes.getQName(i);    boolean declared=false;    if (fPerformValidation) {      if (fGrammarBucket.getStandalone()) {        String nonNormalizedValue=attributes.getNonNormalizedValue(i);        if (nonNormalizedValue != null) {          String entityName=getExternalEntityRefInAttrValue(nonNormalizedValue);          if (entityName != null) {            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE",new Object[]{entityName},XMLErrorReporter.SEVERITY_ERROR);          }        }      }    }    int attDefIndex=-1;    int position=fDTDGrammar.getFirstAttributeDeclIndex(elementIndex);    while (position != -1) {      fDTDGrammar.getAttributeDecl(position,fTempAttDecl);      if (fTempAttDecl.name.rawname == attrRawName) {        attDefIndex=position;        declared=true;        break;      }      position=fDTDGrammar.getNextAttributeDeclIndex(position);    }    if (!declared) {      if (fPerformValidation) {        Object[] args={elementName.rawname,attrRawName};        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTRIBUTE_NOT_DECLARED",args,XMLErrorReporter.SEVERITY_ERROR);      }      continue;    }    String type=getAttributeTypeName(fTempAttDecl);    attributes.setType(i,type);    attributes.getAugmentations(i).putItem(Constants.ATTRIBUTE_DECLARED,Boolean.TRUE);    boolean changedByNormalization=false;    String oldValue=attributes.getValue(i);    String attrValue=oldValue;    if (attributes.isSpecified(i) && type != XMLSymbols.fCDATASymbol) {      changedByNormalization=normalizeAttrValue(attributes,i);      attrValue=attributes.getValue(i);      if (fPerformValidation && fGrammarBucket.getStandalone() && changedByNormalization&& fDTDGrammar.getAttributeDeclIsExternal(position)) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE",new Object[]{attrRawName,oldValue,attrValue},XMLErrorReporter.SEVERITY_ERROR);      }    }    if (!fPerformValidation) {      continue;    }    if (fTempAttDecl.simpleType.defaultType == XMLSimpleType.DEFAULT_TYPE_FIXED) {      String defaultValue=fTempAttDecl.simpleType.defaultValue;      if (!attrValue.equals(defaultValue)) {        Object[] args={elementName.localpart,attrRawName,attrValue,defaultValue};        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_FIXED_ATTVALUE_INVALID",args,XMLErrorReporter.SEVERITY_ERROR);      }    }    if (fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ENTITY || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ENUMERATION || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ID || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_IDREF || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_NMTOKEN || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_NOTATION) {      validateDTDattribute(elementName,attrValue,fTempAttDecl);    }  }}  }
class C{  private MathObservable(){  throw new IllegalStateException("No instances!");}  }
class C{  public static String convertByteToReadable(long sizeInbyte){  String readableSize;  if (sizeInbyte < CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR) {    readableSize=sizeInbyte + " Byte";  } else   if (sizeInbyte < CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR * CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR) {    readableSize=sizeInbyte / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR + " KB";  } else {    readableSize=sizeInbyte / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR + " MB";  }  return readableSize;}  }
class C{  private void indexDocuments(HttpSolrClient solrClient){  URL url=this.getClass().getClassLoader().getResource("file4.json");  File dataFile=null;  try {    dataFile=new File(url.toURI());  } catch (  Exception e) {    logger.error(e.getMessage());    ;  }  JsonArray a=null;  try {    a=(JsonArray)new JsonParser().parse(new FileReader(dataFile)).getAsJsonArray();  } catch (  Exception e) {    logger.error(Messages.getString("SetupThread.INGESTION_ERROR_PARSING") + e.getMessage());  }  Collection<SolrInputDocument> docs=new ArrayList<SolrInputDocument>();  for (int i=0, size=a.size(); i < size; i++) {    SolrInputDocument document=new SolrInputDocument();    JsonObject car=a.get(i).getAsJsonObject();    int id=car.get(Constants.SCHEMA_FIELD_ID).getAsInt();    String title=(String)car.get(Constants.SCHEMA_FIELD_TITLE).getAsString();    String body=(String)car.get(Constants.SCHEMA_FIELD_BODY).getAsString();    String sourceUrl=(String)car.get(Constants.SCHEMA_FIELD_SOURCE_URL).getAsString();    String contentHtml=(String)car.get(Constants.SCHEMA_FIELD_CONTENT_HTML).getAsString();    document.addField(Constants.SCHEMA_FIELD_ID,id);    document.addField(Constants.SCHEMA_FIELD_TITLE,title);    document.addField(Constants.SCHEMA_FIELD_BODY,body);    document.addField(Constants.SCHEMA_FIELD_SOURCE_URL,sourceUrl);    document.addField(Constants.SCHEMA_FIELD_CONTENT_HTML,contentHtml);    docs.add(document);  }  logger.info(Messages.getString("SetupThread.INDEXING_DOCUMENT"));  UpdateResponse addResponse;  try {    addResponse=solrClient.add(Constants.COLLECTION_NAME,docs);    logger.info(addResponse);    solrClient.commit(Constants.COLLECTION_NAME);    logger.info(Messages.getString("SetupThread.INDEX_DOC_COMMITTED"));  } catch (  SolrServerException e) {    logger.error(Messages.getString("SetupThread.SOLR_INDEXING_ERROR") + e.getMessage());  }catch (  IOException e) {    logger.error(Messages.getString("SetupThread.SOLR_IO_ERROR") + e.getMessage());  }}  }
class C{  public boolean paintConstraints(@NotNull ScreenView screenView,@NotNull Graphics2D graphics,@NotNull NlComponent component){  return false;}  }
class C{  public static String approximately(long l){  return new HumanTime(l).getApproximately();}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (StringUtil.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  public static void validateUTF8(byte[] utf8,int start,int len) throws MalformedInputException {  int count=start;  int leadByte=0;  int length=0;  int state=LEAD_BYTE;  while (count < start + len) {    int aByte=((int)utf8[count] & 0xFF);switch (state) {case LEAD_BYTE:      leadByte=aByte;    length=bytesFromUTF8[aByte];switch (length) {case 0:    if (leadByte > 0x7F)     throw new MalformedInputException(count);  break;case 1:if (leadByte < 0xC2 || leadByte > 0xDF) throw new MalformedInputException(count);state=TRAIL_BYTE_1;break;case 2:if (leadByte < 0xE0 || leadByte > 0xEF) throw new MalformedInputException(count);state=TRAIL_BYTE_1;break;case 3:if (leadByte < 0xF0 || leadByte > 0xF4) throw new MalformedInputException(count);state=TRAIL_BYTE_1;break;default :throw new MalformedInputException(count);}break;case TRAIL_BYTE_1:if (leadByte == 0xF0 && aByte < 0x90) throw new MalformedInputException(count);if (leadByte == 0xF4 && aByte > 0x8F) throw new MalformedInputException(count);if (leadByte == 0xE0 && aByte < 0xA0) throw new MalformedInputException(count);if (leadByte == 0xED && aByte > 0x9F) throw new MalformedInputException(count);case TRAIL_BYTE:if (aByte < 0x80 || aByte > 0xBF) throw new MalformedInputException(count);if (--length == 0) {state=LEAD_BYTE;} else {state=TRAIL_BYTE;}break;}count++;}}  }
class C{  @Override protected void processLPC(LpCoeffs coeffs,double[] residual){  if (otherFrame1 == null)   return;  LpCoeffs otherCoeffs=LpcAnalyser.calcLPC(otherFrame1,p);  double[] otherlpcc=otherCoeffs.getLPCC(24);  double[] lpcc=coeffs.getLPCC(24);  double[] a=coeffs.getA();  coeffs.setLPCC(lpcc,coeffs.getOrder());  double[] newA=coeffs.getA();  double err=MathUtils.sumSquaredError(a,newA);  if (err > 1.e-5) {    System.err.println("Symmetry test failed! Err=" + err);  } else {    System.err.println("Err = " + err);  }  assert lpcc.length == otherlpcc.length;  if (otherFrame2 != null && relativeWeightOther1 < 1) {    assert 0 <= relativeWeightOther1;    LpCoeffs other2Coeffs=LpcAnalyser.calcLPC(otherFrame2,p);    double[] other2lpcc=other2Coeffs.getLPCC(24);    PrintfFormat f=new PrintfFormat("%      .1f ");    System.out.print("LPCC    ");    for (int i=0; i < lpcc.length; i++) {      System.out.print(f.sprintf(lpcc[i]));    }    System.out.println();    System.out.print("Other1  ");    for (int i=0; i < lpcc.length; i++) {      System.out.print(f.sprintf(otherlpcc[i]));    }    System.out.println();    System.out.print("Other2  ");    for (int i=0; i < lpcc.length; i++) {      System.out.print(f.sprintf(other2lpcc[i]));    }    System.out.println();    System.out.println();    for (int i=0; i < otherlpcc.length; i++) {      otherlpcc[i]=relativeWeightOther1 * otherlpcc[i] + (1 - relativeWeightOther1) * other2lpcc[i];    }  }  for (int i=0; i < lpcc.length; i++)   lpcc[i]=(1 - r) * lpcc[i] + r * otherlpcc[i];  coeffs.setLPCC(lpcc,coeffs.getOrder());  if (!coeffs.isStable())   System.err.println("filter is unstable!");  double gainFactor=Math.sqrt((1 - r) * coeffs.getGain() * coeffs.getGain() + r * otherCoeffs.getGain() * otherCoeffs.getGain()) / coeffs.getGain();  for (int i=0; i < residual.length; i++)   residual[i]*=gainFactor;}  }
class C{  public static void invalidateCache(){  USER_APPROVAL_LEVEL_CACHE.invalidateAll();}  }
class C{  public static final void serializeRaw(final Object object,final OutputStream output) throws IOException, ReflectiveOperationException {  Objects.requireNonNull(object,"The serializable object is null");  Objects.requireNonNull(output,"The output stream is null");  final Externalizer externalizer=of(object.getClass());  try (final ObjectOutputStream objected=new ObjectOutputStream(output)){    externalizer.writeExternal(object,objected);  } }  }
class C{  public GroupsGetInvitedUsersQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static void initManager(Context context){  if (mInstance == null) {    mInstance=new AssetsDatabaseManager(context);  }}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  public DescriptiveStatistics(double[] initialDoubleArray){  this(INFINITE_WINDOW,true,initialDoubleArray);}  }
class C{  public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  @Override public void close(){  try {    if (connection != null) {      connection.close();    }  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101; else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());  } else   topY=1.1 * getMaxValue();  double yFactor=(y0 - y1) / topY;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfDataSets=getChartData().getNumberOfSeries();  double xStep=(x1 - x0) / (2 * numberOfDataSets);  double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - bigSpace * numberOfDataSets) / numberOfDataSets;  Point[] previousPoint=new Point[getChartData().getNumberOfClasses()];  int d=0;  for (  String series : getChartData().getSeriesNames()) {    if (showXAxis) {      double xLabel=x0 + bigSpace + d * bigSpace + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(series,null)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});      drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int c=0;    for (    String className : getChartData().getClassNames()) {      double value;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);        if (total == 0)         value=0; else         value=100 * getChartData().getValueAsDouble(series,className) / total;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=getChartData().getValueAsDouble(series,className);        if (value > 0)         value=Math.log10(value);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=getChartData().getValueAsDouble(series,className);        if (value > 0)         value=Math.sqrt(value);      } else       value=getChartData().getValueAsDouble(series,className);      double xBar=x0 + bigSpace + d * bigSpace + d * xStep;      double height=value * yFactor;      Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(y0 - height));      boolean isSelected=getChartData().getChartSelection().isSelected(null,className);      Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));      if (isSelected) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        gc.setStroke(HEAVY_STROKE);      } else       gc.setColor(color);      Point bPt=previousPoint[c];      if (bPt != null) {        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        gc.drawLine(bPt.x,bPt.y,aPt.x,aPt.y);        if (sgc != null)         sgc.clearCurrentItem();      }      previousPoint[c]=aPt;      if (!isSelected) {        isSelected=getChartData().getChartSelection().isSelected(series,className);        if (isSelected) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          gc.setStroke(HEAVY_STROKE);        }      }      if (!isSelected) {        gc.setColor(color.darker());        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        gc.drawOval(aPt.x - 1,aPt.y - 1,2,2);        if (sgc != null)         sgc.clearCurrentItem();      } else {        gc.drawOval(aPt.x - 2,aPt.y - 2,4,4);        gc.setStroke(NORMAL_STROKE);      }      c++;      if (showValues || isSelected) {        String label="" + (int)getChartData().getValueAsDouble(series,className);        valuesList.add(new DrawableValue(label,aPt.x,aPt.y - 3,isSelected));      }    }    d++;  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,false);    valuesList.clear();  }}  }
class C{  public double[] extractParameterJacobian(final ODEState state,final String pName){  final double[] p=state.getSecondaryState(index);  final double[] dYdP=new double[jode.getDimension()];  int i=jode.getDimension() * jode.getDimension();  for (  final String knownParameter : jode.getParametersNames()) {    if (pName.equals(knownParameter)) {      System.arraycopy(p,i,dYdP,0,jode.getDimension());      break;    }    i+=jode.getDimension();  }  return dYdP;}  }
class C{  @Override public boolean supportsInheritance(){  return false;}  }
class C{  public static double extractValue(String stringValue){  double value=0.0;  if (stringValue != null) {    String sValue=stringValue.replace(",","").replace(" ","").trim();    try {      if (sValue.startsWith(SCALE_PREFIX)) {        String substring=sValue.substring(SCALE_PREFIX.length());        value=Double.valueOf(substring);      } else {        value=Double.valueOf(sValue);      }    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  private void playBoosterSound(World world,BlockPos pos,double planarMotion){  if (!world.isRemote && planarMotion > 0.02D && world.rand.nextDouble() < planarMotion)   world.playSound(null,pos,SoundEvents.BLOCK_WOOD_BUTTON_CLICK_ON,SoundCategory.BLOCKS,1.0F,2.0F);}  }
class C{  public static void launch(Activity activity,@StringRes int titleResId,@StringRes int messageResId){  Intent intent=new Intent(activity,DialogActivity.class);  intent.putExtra(ARG_MESSAGE,messageResId);  intent.putExtra(ARG_TITLE,titleResId);  activity.startActivity(intent);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_FAIL1(String value0){  return new SM_SYSTEM_MESSAGE(1400844,value0);}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  @Override public void endDTD(Augmentations augs) throws XNIException {  if (fDTDGrammar != null) {    fDTDGrammar.endDTD(augs);    if (fGrammarPool != null)     fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_DTD,new Grammar[]{fDTDGrammar});  }  if (fValidation) {    DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());    Iterator entities=fNDataDeclNotations.entrySet().iterator();    while (entities.hasNext()) {      Map.Entry entry=(Map.Entry)entities.next();      String notation=(String)entry.getValue();      if (grammar.getNotationDeclIndex(notation) == -1) {        String entity=(String)entry.getKey();        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_NOTATION_NOT_DECLARED_FOR_UNPARSED_ENTITYDECL",new Object[]{entity,notation},XMLErrorReporter.SEVERITY_ERROR);      }    }    Iterator notationVals=fNotationEnumVals.entrySet().iterator();    while (notationVals.hasNext()) {      Map.Entry entry=(Map.Entry)notationVals.next();      String notation=(String)entry.getKey();      if (grammar.getNotationDeclIndex(notation) == -1) {        String attributeName=(String)entry.getValue();        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_NOTATION_NOT_DECLARED_FOR_NOTATIONTYPE_ATTRIBUTE",new Object[]{attributeName,notation},XMLErrorReporter.SEVERITY_ERROR);      }    }    Iterator elementsWithNotations=fTableOfNOTATIONAttributeNames.entrySet().iterator();    while (elementsWithNotations.hasNext()) {      Map.Entry entry=(Map.Entry)elementsWithNotations.next();      String elementName=(String)entry.getKey();      int elementIndex=grammar.getElementDeclIndex(elementName);      if (grammar.getContentSpecType(elementIndex) == XMLElementDecl.TYPE_EMPTY) {        String attributeName=(String)entry.getValue();        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"NoNotationOnEmptyElement",new Object[]{elementName,attributeName},XMLErrorReporter.SEVERITY_ERROR);      }    }    fTableOfIDAttributeNames=null;    fTableOfNOTATIONAttributeNames=null;    if (fWarnOnUndeclaredElemdef) {      checkDeclaredElements(grammar);    }  }  if (fDTDHandler != null) {    fDTDHandler.endDTD(augs);  }}  }
class C{  public Value all(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  @Override public void publish(String topic,AWSIotQos qos,String payload) throws AWSIotException {  super.publish(topic,qos,payload);}  }
class C{  public static Properties toProperties(JSONObject jo) throws JSONException {  Properties properties=new Properties();  if (jo != null) {    Iterator<String> keys=jo.keys();    while (keys.hasNext()) {      String name=keys.next();      properties.put(name,jo.getString(name));    }  }  return properties;}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  public int dump(InputStream input,PrintStream out,PrintStream err,String[] args){  try {    return doDump(input,out,err,args);  } catch (  ParseException e) {    err.println(e.getMessage());    dumpUsage(err);    return 1;  }catch (  DumpException e) {    err.println(e.getMessage());    return 1;  }catch (  DumpappOutputBrokenException e) {    throw e;  }catch (  RuntimeException e) {    e.printStackTrace(err);    return 1;  }}  }
class C{  private void writeConfigFile(){  if (configPropertiesFile != null) {    try {      Properties props=new Properties();      for (      String key : fieldValueMap.keySet()) {        String value=fieldValueMap.get(key);        if (value != null) {          props.setProperty(key,value);        }      }      OutputStream out=new FileOutputStream(configPropertiesFile);      props.store(out,"SLD Editor configuration data");      out.close();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public Builder inertiaThreshold(Number inertiaThreshold){  this.inertiaThreshold=inertiaThreshold;  return this;}  }
class C{  public void testGetUnexistingDeployment() throws Exception {  HttpGet httpGet=new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,"unexisting"));  CloseableHttpResponse response=executeRequest(httpGet,HttpStatus.SC_NOT_FOUND);  closeResponse(response);}  }
class C{  public boolean hasWord(String word){  return root.hasWord(word,0);}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public E removeAt(int index){  final Object old=mArray[index];  if (mSize <= 1) {    if (DEBUG)     Log.d(TAG,"remove: shrink from " + mHashes.length + " to 0");    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      if (DEBUG)       Log.d(TAG,"remove: shrink from " + mHashes.length + " to "+ n);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        if (DEBUG)         Log.d(TAG,"remove: copy from 0-" + index + " to 0");        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index);      }      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: copy from " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,index + 1,mArray,index,mSize - index);      }    } else {      mSize--;      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: move " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,index + 1,mArray,index,mSize - index);      }      mArray[mSize]=null;    }  }  return (E)old;}  }
class C{  @Override public boolean checkCondition(){  return !alliance.hasMember(invited.getObjectId());}  }
class C{  @Deprecated public static boolean isMatchByID(int mod){  return Modifiers.contains(mod,MATCH_BY_ID);}  }
class C{  @Nullable private File validateJdkPath(@NotNull File file){  if (checkForJdk(file)) {    return file;  }  if (SystemInfo.isMac) {    File potentialPath=new File(file,MAC_JDK_CONTENT_PATH);    if (potentialPath.isDirectory() && checkForJdk(potentialPath)) {      myJdkLocationTextField.setText(potentialPath.getPath());      return potentialPath;    }  }  return null;}  }
class C{  protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){  mRenderers=new ArrayList<>();  DrawOrder[] orders=chart.getDrawOrder();  for (  DrawOrder order : orders) {switch (order) {case BAR:      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));    break;case BUBBLE:  if (chart.getBubbleData() != null)   mRenderers.add(new BubbleChartRenderer(chart,animator,viewPortHandler));break;case LINE:if (chart.getLineData() != null) mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));break;case CANDLE:if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));break;case SCATTER:if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));break;}}}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  if (fIdElement != null) {    IntVector path=new IntVector();    for (int i=0; i < fIdCount; i++) {      int elementNodeIndex=fIdElement[i];      String idName=fIdName[i];      if (idName == null) {        continue;      }      path.removeAllElements();      int index=elementNodeIndex;      do {        path.addElement(index);        int pchunk=index >> CHUNK_SHIFT;        int pindex=index & CHUNK_MASK;        index=getChunkIndex(fNodeParent,pchunk,pindex);      } while (index != -1);      Node place=this;      for (int j=path.size() - 2; j >= 0; j--) {        index=path.elementAt(j);        Node child=place.getLastChild();        while (child != null) {          if (child instanceof DeferredNode) {            int nodeIndex=((DeferredNode)child).getNodeIndex();            if (nodeIndex == index) {              place=child;              break;            }          }          child=child.getPreviousSibling();        }      }      Element element=(Element)place;      putIdentifier0(idName,element);      fIdName[i]=null;      while (i + 1 < fIdCount && fIdElement[i + 1] == elementNodeIndex) {        idName=fIdName[++i];        if (idName == null) {          continue;        }        putIdentifier0(idName,element);      }    }  }}  }
class C{  public boolean hasAggregationType(){  return this.aggregationType != null;}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public static boolean fileExists(File file){  return file.exists() && !file.isDirectory();}  }
class C{  public DataViewComponent(MasterView masterView,MasterViewConfiguration masterAreaConfiguration){  initComponents();  createMasterView(masterView);  configureMasterView(masterAreaConfiguration);}  }
class C{  public AdaptiveStepsizeFieldIntegrator(final Field<T> field,final String name,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance){  super(field,name);  setStepSizeControl(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);  resetInternalState();}  }
class C{  public ProperFractionFormat(NumberFormat wholeFormat,NumberFormat numeratorFormat,NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);  setWholeFormat(wholeFormat);}  }
class C{  private static boolean checkKinahForTransportation(TeleportLocation location,Player player){  Storage inventory=player.getInventory();  int basePrice=location.getPrice();  long transportationPrice=PricesService.getPriceForService(basePrice,player.getRace());  if (player.getController().isHiPassInEffect()) {    transportationPrice=1;  }  if (!inventory.tryDecreaseKinah(transportationPrice,ItemUpdateType.DEC_KINAH_FLY)) {    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_NOT_ENOUGH_KINA(transportationPrice));    return false;  }  return true;}  }
class C{  public PlacesGetCheckinsQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  @Override protected void doPostDbLoading(Equipment equipment){  Long processId=equipment.getProcessId();  Long equipmentId=equipment.getId();  Long aliveTagId=equipment.getAliveTagId();  if (aliveTagId != null) {    ControlTag aliveTagCopy=controlCache.getCopy(aliveTagId);    if (aliveTagCopy != null) {      setEquipmentId((ControlTagCacheObject)aliveTagCopy,equipmentId,processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (%s) found for Equipment %s (#%d).",aliveTagId,equipment.getName(),equipment.getId()));    }  }  Long commFaultTagId=equipment.getCommFaultTagId();  if (commFaultTagId != null) {    ControlTag commFaultTagCopy=controlCache.getCopy(commFaultTagId);    if (commFaultTagCopy != null) {      setEquipmentId((ControlTagCacheObject)commFaultTagCopy,equipmentId,processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag (%s) found for Equipment %s (#%d).",commFaultTagId,equipment.getName(),equipment.getId()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag for Equipment %s (#%d) defined.",equipment.getName(),equipment.getId()));  }  Long statusTag=equipment.getStateTagId();  if (statusTag != null) {    ControlTag statusTagCopy=controlCache.getCopy(statusTag);    if (statusTagCopy != null) {      setEquipmentId((ControlTagCacheObject)statusTagCopy,equipmentId,processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%s) found for Equipment %s (#%d).",statusTag,equipment.getName(),equipment.getId()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag for Equipment %s (#%d) defined.",equipment.getName(),equipment.getId()));  }}  }
class C{  private Object readPrimitiveObject(ObjectInput in,String name) throws IOException, ClassNotFoundException {  try {    byte bitCode=in.readByte();switch (bitCode) {case INTEGER_BIT:      return in.readInt();case DOUBLE_BIT:    return in.readDouble();case FLOAT_BIT:  return in.readFloat();case LONG_BIT:return in.readLong();case STRING_BIT:return in.readUTF();case SHORT_BIT:return in.readShort();case BOOLEAN_BIT:return in.readBoolean();case CHAR_BIT:return in.readChar();case BYTE_BIT:return in.readByte();default :if (in instanceof ObjectInputStream) {return ((ObjectInputStream)in).readUnshared();} else {return in.readObject();}}} catch (IOException ex) {throw new EntrySerializationException("Failed to deserialize JMS message property: JMSMessageID=" + JMSMessageID + ", Property Name: "+ name,ex);}}  }
class C{  public int searchForGraphInIndex(DocumentNGramGraph dgNewGraph){  int idgName=0;  NGramCachedGraphComparator ngcIntra=new NGramCachedGraphComparator();  Set<String> graphSet=indexOfGraphs.keySet();  DocumentNGramGraph dgSeg=(DocumentNGramGraph)dgNewGraph.clone();  for (  String graphName : graphSet) {    DocumentNGramGraph ClassGraph=indexOfGraphs.get(graphName);    GraphSimilarity gs;    gs=ngcIntra.getSimilarityBetween(dgSeg,ClassGraph);    if (calcOverallSimilarity(gs) >= maxForMerging) {      idgName=Integer.valueOf(graphName);      break;    } else     if (calcOverallSimilarity(gs) >= minForMerging) {      idgName=Integer.valueOf(graphName);      ClassGraph.mergeGraph(dgSeg,1 - (dNameInstanceCount.getValue(graphName) / (dNameInstanceCount.getValue(graphName) + 1)));      dNameInstanceCount.increaseValue(graphName,1.0);      break;    }    if (1.0 - gs.ContainmentSimilarity > 10e-5) {      dgSeg=dgSeg.allNotIn(ClassGraph);    }  }  if (idgName == 0) {    if (!indexOfGraphs.isEmpty()) {      idgName=graphSet.size() + 1;    } else {      idgName++;    }    indexOfGraphs.put(Integer.toString(idgName),dgSeg);  }  return idgName;}  }
class C{  public CombiningCursor queryCombinings(){  return mHelper.queryCombinings();}  }
class C{  public boolean interiorContains(S2Point p){  return isFull() || S2Point.sub(axis,p).norm2() < 2 * height;}  }
class C{  public void search(String query){  if (query == null)   query="";  if (query.equals(m_query))   return;  Tuple[] rem=clearInternal();  m_query=query;  query.trim();  if (query.length() == 0) {    this.fireTupleEvent(null,DELETE);    return;  }  m_lucene.setReadMode(true);  try {    Hits hits=m_lucene.search(query);    for (int i=0; i < hits.length(); i++) {      Tuple t=getMatchingTuple(hits.doc(i));      addInternal(t);    }    Tuple[] add=getTupleCount() > 0 ? toArray() : null;    fireTupleEvent(add,rem);  } catch (  ParseException e) {    s_logger.warning("Lucene query parse exception.\n" + StringLib.getStackTrace(e));  }catch (  IOException e) {    s_logger.warning("Lucene IO exception.\n" + StringLib.getStackTrace(e));  }}  }
class C{  boolean isDefaultIn(int configVersion){  return defaultVersionRange.contains(configVersion);}  }
class C{  public static String payPalIPN(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String confirmUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"confirmUrl",configString,"payment.paypal.confirm");  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.paypal.redirect");  if (UtilValidate.isEmpty(confirmUrl) || UtilValidate.isEmpty(redirectUrl)) {    Debug.logError("Payment properties is not configured properly, no confirm URL defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  parametersMap.put("cmd","_notify-validate");  String confirmResp=null;  try {    String str=UtilHttp.urlEncodeArgs(parametersMap);    URL u=new URL(redirectUrl);    URLConnection uc=u.openConnection();    uc.setDoOutput(true);    uc.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    PrintWriter pw=new PrintWriter(uc.getOutputStream());    pw.println(str);    pw.close();    BufferedReader in=new BufferedReader(new InputStreamReader(uc.getInputStream()));    confirmResp=in.readLine();    in.close();    Debug.logError("PayPal Verification Response: " + confirmResp,module);  } catch (  IOException e) {    Debug.logError(e,"Problems sending verification message",module);  }  Debug.logInfo("Got verification from PayPal, processing..",module);  boolean verified=false;  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);    if (UtilValidate.isNotEmpty(name) && "payer_status".equalsIgnoreCase(name) && UtilValidate.isNotEmpty(value)&& "verified".equalsIgnoreCase(value)) {      verified=true;    }  }  if (!verified) {    Debug.logError("###### PayPal did not verify this request, need investigation!",module);  }  GenericValue userLogin=null;  try {    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get UserLogin for: system; cannot continue",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingAuthenticationUser",locale));    return "error";  }  String orderId=request.getParameter("invoice");  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("PayPal did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));    return "error";  }  String paymentStatus=request.getParameter("payment_status");  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if (paymentStatus.equals("Completed")) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if (paymentStatus.equals("Failed") || paymentStatus.equals("Denied")) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling PayPal notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing PayPal callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,String> emailContext=UtilMisc.toMap("orderId",orderId);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  public Location zero(){  x=0;  y=0;  z=0;  return this;}  }
class C{  public boolean isAssociated(int node){  return isAssociated(node,0);}  }
class C{  public Action putAction(String name,Action action){  action.setVisualization(this);  m_actions.put(name,action);  return action;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int result, left=totalExpected - totalRead;  if (left <= 0) {    return -1;  } else {    result=in.read(b,off,Math.min(left,len));  }  if (result > 0) {    totalRead+=result;  }  return result;}  }
class C{  public Period copyTransientProperties(Period other){  this.name=other.getName();  this.shortName=other.getShortName();  this.code=other.getCode();  return this;}  }
class C{  public static void deprecatedAttribute(SimpleMethod method,Element element,String attributeName,String fixInstruction) throws ValidationException {  String attributeValue=element.getAttribute(attributeName);  if (attributeValue.length() > 0) {    handleError("Attribute \"" + attributeName + "\" is deprecated ("+ fixInstruction+ ")",method,element);  }}  }
class C{  private float scaleMatrix(Matrix3f mat){  float max=FastMath.abs(mat.m00);  float abs=FastMath.abs(mat.m01);  if (abs > max) {    max=abs;  }  abs=FastMath.abs(mat.m02);  if (abs > max) {    max=abs;  }  abs=FastMath.abs(mat.m11);  if (abs > max) {    max=abs;  }  abs=FastMath.abs(mat.m12);  if (abs > max) {    max=abs;  }  abs=FastMath.abs(mat.m22);  if (abs > max) {    max=abs;  }  if (max > 1f) {    float fInvMax=1f / max;    mat.multLocal(fInvMax);  }  return max;}  }
class C{  public GlobalVarNode findGlobalVarNode(Object value){  if (opts.rta()) {    value=null;  }  return valToGlobalVarNode.get(value);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LongType fullCopy(){  LongType tree=(LongType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private boolean isInSamePackage(String type){  if (type.charAt(0) == '[') {    return false;  }  return getPackage(visitedClassName).equals(getPackage(type));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200555,skilltarget,num0,skillname);}  }
class C{  public CarouselOptions selectedItem(int selectedItem){  mSelectedItem=selectedItem;  return this;}  }
class C{  public void print(){  System.out.print('(');  System.out.print(fDepth);  System.out.print(") {");  for (int i=0; i < fDepth; i++) {    if (i == 3) {      System.out.print(" ...");      break;    }    System.out.print(' ');    System.out.print(fData[i]);    if (i < fDepth - 1) {      System.out.print(',');    }  }  System.out.print(" }");  System.out.println();}  }
class C{  private void unloadDataStore(){  if (dataSourceInfo != null) {    dataSourceInfo.unloadDataStore();  }  if (exampleDataSourceInfo != null) {    exampleDataSourceInfo.unloadDataStore();  }}  }
class C{  public static void o(double[][] A,int w,int d){  int nr=A.length;  int nc=A[0].length;  String temp=Integer.toString(nr - 1);  int rfw=temp.length() + 1;  int ncp=(Parameters.PageWidth - rfw) / w;  int jl=0;  while (jl < nc) {    int ju=Math.min(nc,jl + ncp);    System.out.print("\n");    String head="";    while (head.length() < rfw)     head=head + " ";    System.out.print(head);    for (int j=jl; j < ju; j++) {      head=Integer.toString(j);      while (head.length() < w)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int i=0; i < nr; i++) {      String row=Integer.toString(i);      while (row.length() < rfw)       row=" " + row;      System.out.print(row);      for (int j=jl; j < ju; j++)       System.out.print(DoubletoEstring(A[i][j],w,d));      System.out.print("\n");    }    jl=jl + ncp;  }}  }
class C{  @GET @Path("/logout") @Produces(APPLICATION_JSON) @ApiOperation(value="Log a user out") @Timed public Response logUserOut(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){  authentication.logOut(tokenHeader);  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  public static int dpToPx(int dp){  float density=Resources.getSystem().getDisplayMetrics().density;  return Math.round(dp * density);}  }
class C{  public static double[] correlateWithZeroPadding(final double[] signal1,final double[] signal2){  if (signal1 == null || signal2 == null)   throw new NullPointerException("Received null argument");  int N=signal1.length + signal2.length;  if (!MathUtils.isPowerOfTwo(N)) {    N=MathUtils.closestPowerOfTwoAbove(N);  }  double[] fft1=new double[N];  double[] fft2=new double[N];  System.arraycopy(signal1,0,fft1,0,signal1.length);  System.arraycopy(signal2,0,fft2,0,signal2.length);  double[] fftResult=correlate(fft1,fft2);  double[] result=new double[signal1.length + signal2.length];  System.arraycopy(fftResult,0,result,0,result.length);  return result;}  }
class C{  public V putIfAbsent(int key,V value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  public StoredListIterator<T> establishListScan(boolean random_scan){  if (isEmpty())   return null;  StoredListIterator<T> slh=_SLHolderPool.get();  StoredListIterator<T> res=establishPos(random_scan,slh);  if (res == null)   slh.release();  return res;}  }
class C{  public AWSIotTopic(String topic){  super(topic,AWSIotQos.QOS0);}  }
class C{  public AdaptiveStepsizeIntegrator(final String name,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance){  super(name);  setStepSizeControl(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);  resetInternalState();}  }
class C{  public static StringBuffer formatDouble(final double value,final NumberFormat format,final StringBuffer toAppendTo,final FieldPosition pos){  if (Double.isNaN(value) || Double.isInfinite(value)) {    toAppendTo.append('(');    toAppendTo.append(value);    toAppendTo.append(')');  } else {    format.format(value,toAppendTo,pos);  }  return toAppendTo;}  }
class C{  public T nearest(final double[] key) throws KeySizeException {  final List<T> nbrs=nearest(key,1,null);  return nbrs.get(0);}  }
class C{  public static boolean valid(String s,Type t,boolean template){  return _valid(s,t,template) == -1;}  }
class C{  protected LuaObject(LuaObject parent,String name) throws LuaException {synchronized (parent.getLuaState()) {    this.L=parent.getLuaState();    if (!parent.isTable() && !parent.isUserdata()) {      throw new LuaException("Object parent should be a table or userdata .");    }    parent.push();    L.pushString(name);    L.getTable(-2);    L.remove(-2);    registerValue(-1);    L.pop(1);  }}  }
class C{  public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  @RequestMapping(value="/race-participants",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceParticipant> createRaceParticipant(@RequestBody RaceParticipant raceParticipant) throws URISyntaxException {  log.debug("REST request to save RaceParticipant : {}",raceParticipant);  if (raceParticipant.getRaceParticipantId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("raceParticipant","idexists","A new raceParticipant cannot already have an ID")).body(null);  }  RaceParticipant result=raceParticipantRepository.save(raceParticipant);  return ResponseEntity.created(new URI("/api/race-participants/" + result.getRaceParticipantId())).headers(HeaderUtil.createEntityCreationAlert("raceParticipant",result.getRaceParticipantId().toString())).body(result);}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>emptyElement: " + element);  }  startElement(element,attributes,augs);  endElement(element,augs);}  }
class C{  public void actionPerformed(ActionEvent ev){  File lastOpenFile=ProgramProperties.getFile(MeganProperties.TAXONOMYFILE);  getDir().notifyLockInput();  File file=ChooseFileDialog.chooseFileToOpen(getViewer().getFrame(),lastOpenFile,new TextFileFilter("tre"),new TextFileFilter("tre"),ev,"Open Tree File");  getDir().notifyUnlockInput();  if (file != null && file.exists() && file.canRead()) {    ProgramProperties.put(MeganProperties.TAXONOMYFILE,file.getAbsolutePath());    String mappingFile=Basic.replaceFileSuffix(file.getPath(),".map");    if (!(new File(mappingFile)).exists()) {      mappingFile=null;    }    StringBuilder buf=new StringBuilder();    buf.append("load taxonomyFile='").append(file.getPath()).append("'");    if (mappingFile != null)     buf.append(" mapFile='").append(mappingFile).append("';"); else     buf.append(";");    buf.append("collapse level=2;");    execute(buf.toString());  }}  }
class C{  public TextPartsBuilder addTextPart(@NonNull CharSequence textPart,@ColorInt int bgColor){  BackgroundHolder backgroundHolder=new BackgroundHolder(bgColor,0,0);  Pair<CharSequence,BackgroundHolder> pair=Pair.create(textPart,backgroundHolder);  mTextParts.add(pair);  return this;}  }
class C{  public void afterCallingEvictionStrategy(){  int res=_numOfCurrentEvictionStrategyCallersUpdater.decrementAndGet(this);  if (res == 0 && _needToRemoveFromEvictionStrategy) {synchronized (this) {      notifyAll();    }  }}  }
class C{  public LogRecordWithDLSN readOp() throws IOException {  LogRecordWithDLSN nextRecordInStream;  while (true) {    if (lastRecordSkipTo != null) {      nextRecordInStream=lastRecordSkipTo;      recordStream.advance(1);      lastRecordSkipTo=null;      return nextRecordInStream;    }    if (recordSetReader != null) {      nextRecordInStream=recordSetReader.nextRecord();      if (null != nextRecordInStream) {        recordStream.advance(1);        return nextRecordInStream;      } else {        recordSetReader=null;      }    }    try {      long metadata=in.readLong();      nextRecordInStream=new LogRecordWithDLSN(recordStream.getCurrentPosition(),startSequenceId);      nextRecordInStream.setMetadata(metadata);      nextRecordInStream.setTransactionId(in.readLong());      nextRecordInStream.readPayload(in);      if (LOG.isTraceEnabled()) {        if (nextRecordInStream.isControl()) {          LOG.trace("Reading {} Control DLSN {}",recordStream.getName(),nextRecordInStream.getDlsn());        } else {          LOG.trace("Reading {} Valid DLSN {}",recordStream.getName(),nextRecordInStream.getDlsn());        }      }      int numRecords=1;      if (!deserializeRecordSet && nextRecordInStream.isRecordSet()) {        numRecords=LogRecordSet.numRecords(nextRecordInStream);      }      if (deserializeRecordSet && nextRecordInStream.isRecordSet()) {        recordSetReader=LogRecordSet.of(nextRecordInStream);      } else {        recordStream.advance(numRecords);        return nextRecordInStream;      }    } catch (    EOFException eof) {      break;    }  }  return null;}  }
class C{  public void add(final SAMRecord read,final int position){  recordAndOffsets.add(new RecordAndOffset(read,position));}  }
class C{  public static boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  public boolean dump_answer(){  return soot.PhaseOptions.getBoolean(options,"dump-answer");}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public static TopUserFragment newInstance(){  TopUserFragment fragment=new TopUserFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public CustomizerUI(){  initComponents();  initDefaults();  update();}  }
class C{  public PoissonDistribution(double p,int maxIterations){  this(p,DEFAULT_EPSILON,maxIterations);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public WindBarbDetails(WindBarbUpdateInterface parentObj,FunctionNameInterface functionManager){  super(WindBarbDetails.class,functionManager);  this.parentObj=parentObj;  createUI();}  }
class C{  public boolean contains(int httpStatusCode){  return httpStatusCode >= lowerBound && httpStatusCode <= upperBound;}  }
class C{  public static JsonValue value(String string){  return string == null ? NULL : new JsonString(string);}  }
class C{  public void hideContent(){  for (int i=0; i < getChildCount(); i++) {    getChildAt(i).setVisibility(GONE);  }}  }
class C{  private File makeNewRMAFile(File directory,String fileName){  int count=0;  while (true) {    File meganFile=new File(directory,Basic.replaceFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(fileName),(count > 0 ? "-" + count : "") + ".rma6"));    if (!meganFile.exists())     return meganFile;    count++;  }}  }
class C{  protected void initErrorReporter(){  if (fErrorReporter == null) {    fErrorReporter=new XMLErrorReporter();  }  if (fErrorHandler == null) {    fErrorHandler=new XPointerErrorHandler();  }  fErrorReporter.putMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN,new XPointerMessageFormatter());}  }
class C{  private static void init() throws Exception {  ve=new VelocityEngine();  ve.setProperty(RuntimeConstants.RESOURCE_LOADER,"classpath");  ve.setProperty("classpath.resource.loader.class",ClasspathResourceLoader.class.getName());  ve.setProperty(Velocity.ENCODING_DEFAULT,"UTF-8");  ve.setProperty(Velocity.INPUT_ENCODING,"UTF-8");  ve.setProperty(Velocity.OUTPUT_ENCODING,"UTF-8");  ve.init();}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority));}  }
class C{  public static String generateCode(int codeSize){  Random sr=new Random();  char[] randomChars=new char[codeSize];  randomChars[0]=letters.charAt(sr.nextInt(letters.length()));  for (int i=1; i < codeSize; ++i) {    randomChars[i]=ALLOWED_CHARS.charAt(sr.nextInt(NUMBER_OF_CODEPOINTS));  }  return new String(randomChars);}  }
class C{  public CatchResult catchPokemon(EncounterResult encounter,CatchOptions options) throws LoginFailedException, RemoteServerException, NoSuchItemException, EncounterFailedException {  if (!encounter.wasSuccessful())   throw new EncounterFailedException();  double probability=encounter.getCaptureProbability().getCaptureProbability(0);  if (options == null) {    options=new CatchOptions(api);  }  return catchPokemon(options.getNormalizedHitPosition(),options.getNormalizedReticleSize(),options.getSpinModifier(),options.getItemBall(probability),options.getMaxPokeballs(),options.getRazzberries());}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  public GroupsInviteQuery invite(UserActor actor,int groupId,int userId){  return new GroupsInviteQuery(getClient(),actor,groupId,userId);}  }
class C{  public static int toIntExact(final long n) throws MathRuntimeException {  if (n < Integer.MIN_VALUE || n > Integer.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  }  return (int)n;}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public boolean isKeyguardLocked(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {    LogUtils.e("can not call isKeyguardLocked if SDK_INT < 16 ");    return false;  } else {    return keyguardManager.isKeyguardLocked();  }}  }
class C{  public float[] generateTransformedValuesBarChart(IBarDataSet data,int dataSetIndex,BarData bd,float phaseY){  float[] valuePoints=new float[data.getEntryCount() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=data.getEntryForIndex(j / 2);    int i=e.getXIndex();    float x=e.getXIndex() + i * (setCount - 1) + dataSetIndex + space * i + space / 2f;    float y=e.getVal();    valuePoints[j]=x;    valuePoints[j + 1]=y * phaseY;  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_OTHER(String value0,int value1,int num2){  return new SM_SYSTEM_MESSAGE(1390163,value0,value1,num2);}  }
class C{  public synchronized boolean isSubEquipmentAliveType(){  return (getAliveType().equals(AliveTimer.ALIVE_TYPE_SUBEQUIPMENT));}  }
class C{  private void expectException(){  expectedException.expect(IllegalArgumentException.class);  expectedException.expectMessage(EMPTY_ERROR_MESSAGE);}  }
class C{  protected MessagesGetChatQueryWithChatIds chatIds(List<Integer> value){  return unsafeParam("chat_ids",value);}  }
class C{  public FiniteDifferencesDifferentiator(final int nbPoints,final double stepSize,final double tLower,final double tUpper) throws MathIllegalArgumentException {  if (nbPoints <= 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,stepSize,1);  }  this.nbPoints=nbPoints;  if (stepSize <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,stepSize,0);  }  this.stepSize=stepSize;  halfSampleSpan=0.5 * stepSize * (nbPoints - 1);  if (2 * halfSampleSpan >= tUpper - tLower) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,2 * halfSampleSpan,tUpper - tLower);  }  final double safety=FastMath.ulp(halfSampleSpan);  this.tMin=tLower + halfSampleSpan + safety;  this.tMax=tUpper - halfSampleSpan - safety;}  }
class C{  protected DirectoryFileFilter(){}  }
class C{  public boolean forEachKey(TShortProcedure procedure){  return forEach(procedure);}  }
class C{  public void cancelJobsForUid(int uid){  List<JobStatus> jobsForUid;synchronized (mJobs) {    jobsForUid=mJobs.getJobsByUid(uid);  }  for (int i=0; i < jobsForUid.size(); i++) {    JobStatus toRemove=jobsForUid.get(i);    cancelJobImpl(toRemove);  }}  }
class C{  public Builder autoPan(Boolean autoPan){  this.autoPan=autoPan;  return this;}  }
class C{  void finishStartElement(){  fInStartElement=false;  fElementAugs=null;  fAttributes=null;}  }
class C{  public void registerHandler(String handlerName,BridgeHandler handler){  if (handler != null) {    messageHandlers.put(handlerName,handler);  }}  }
class C{  public static boolean isBindableType(TypeMirror type){  boolean result;  if (type.getKind().isPrimitive()) {    result=true;  } else {    TypeKind typeKind=type.getKind();switch (typeKind) {case DECLARED:      DeclaredType declaredType=(DeclaredType)type;    List<? extends TypeMirror> args=declaredType.getTypeArguments();  result=true;for (TypeMirror argumentType : args) {  if (!isBindableType(argumentType)) {    result=false;    break;  }}break;case WILDCARD:result=true;break;default :result=false;}}LOGGER.log(Level.INFO,String.format("isBindableType: %s : %s : %s",type,type.getKind(),result));return result;}  }
class C{  @Override public void onProgressChanged(WebView view,int newProgress){  i(null,"--> onProgressChanged() newProgress = " + newProgress);  super.onProgressChanged(view,newProgress);  onLoadWebProgressChanged(view,newProgress);}  }
class C{  private void createReturn(polyglot.ast.Return retStmt){  polyglot.ast.Expr expr=retStmt.expr();  soot.Value sootLocal=null;  if (expr != null) {    sootLocal=base().createAggressiveExpr(expr,false,false);  }  if (monitorStack != null) {    Stack<Local> putBack=new Stack<Local>();    while (!monitorStack.isEmpty()) {      soot.Local exitVal=(soot.Local)monitorStack.pop();      putBack.push(exitVal);      soot.jimple.ExitMonitorStmt emStmt=soot.jimple.Jimple.v().newExitMonitorStmt(exitVal);      body.getUnits().add(emStmt);    }    while (!putBack.isEmpty()) {      monitorStack.push(putBack.pop());    }    soot.jimple.Stmt stopNoop=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(stopNoop);    if (beforeReturn != null) {      for (      List<Stmt> v : beforeReturn) {        v.add(stopNoop);      }    }  }  if (tryStack != null && !tryStack.isEmpty()) {    polyglot.ast.Try currentTry=tryStack.pop();    if (currentTry.finallyBlock() != null) {      createBlock(currentTry.finallyBlock());      tryStack.push(currentTry);    } else {      tryStack.push(currentTry);    }  }  if (catchStack != null && !catchStack.isEmpty()) {    polyglot.ast.Try currentTry=catchStack.pop();    if (currentTry.finallyBlock() != null) {      createBlock(currentTry.finallyBlock());      catchStack.push(currentTry);    } else {      catchStack.push(currentTry);    }  }  if (expr == null) {    soot.jimple.Stmt retStmtVoid=soot.jimple.Jimple.v().newReturnVoidStmt();    body.getUnits().add(retStmtVoid);    Util.addLnPosTags(retStmtVoid,retStmt.position());  } else {    if (sootLocal instanceof soot.jimple.ConditionExpr) {      sootLocal=handleCondBinExpr((soot.jimple.ConditionExpr)sootLocal);    }    soot.jimple.ReturnStmt retStmtLocal=soot.jimple.Jimple.v().newReturnStmt(sootLocal);    body.getUnits().add(retStmtLocal);    Util.addLnPosTags(retStmtLocal.getOpBox(),expr.position());    Util.addLnPosTags(retStmtLocal,retStmt.position());  }  soot.jimple.Stmt startNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(startNoop);  if (afterReturn != null) {    for (    List<Stmt> v : afterReturn) {      v.add(startNoop);    }  }}  }
class C{  public SM_NPC_INFO(Npc npc,Player player){  this._npc=npc;  npcTemplate=npc.getObjectTemplate();  npcTypeId=npc.getType(player);  npcId=npc.getNpcId();  creatorId=npc.getCreatorId();  masterName=npc.getMasterName();}  }
class C{  private String createIndentation(int numChars){  StringBuilder sb=new StringBuilder();  for (int i=0; i < numChars; i++)   sb.append(" ");  return sb.toString();}  }
class C{  public EmailService reconfig(ServerEmailConfig config){  this.authRequired=(null != config.getAuthEnabled() && config.getAuthEnabled());  Properties javaMailProperties=new Properties();  javaMailProperties.put("mail.smtp.connectiontimeout",5000);  javaMailProperties.put("mail.smtp.auth",this.authRequired);  javaMailProperties.put("mail.debug",config.getDebug());  EmailService refreshed=new EmailService(javaMailProperties);  refreshed.setTemplateEngine(templateEngine);  this.setHost(config.getHost());  this.setPort(config.getPort());  this.setProtocol(config.getProtocol());  if (authRequired) {    this.setUsername(config.getUsername());    this.setPassword(config.getPassword());  }  return refreshed;}  }
class C{  protected UsersReportQuery type(UsersReportType value){  return unsafeParam("type",value);}  }
class C{  public boolean isUnindexSupported(){  return false;}  }
class C{  private List<String> findColumnsToRemove(){  String tableName=mTableModel.getTableName();  List<String> removeColumns=new ArrayList<String>();  List<ColumnModel> columnModelList=mTableModelDB.getColumnModels();  for (  ColumnModel columnModel : columnModelList) {    String dbColumnName=columnModel.getColumnName();    if (isNeedToRemove(dbColumnName)) {      removeColumns.add(dbColumnName);    }  }  LogUtil.d(TAG,"remove columns from " + tableName + " >> "+ removeColumns);  return removeColumns;}  }
class C{  @Override public final void storeData(final List<T> data){  if (log(data) && !fallbackManager.isFallbackFileEmpty()) {    if (!this.dataRecovery.isRunning()) {      dataRecovery.setPersistenceManager(this);      new Thread(dataRecovery).start();    }  }}  }
class C{  private void createVendorOptionPanel(){  vendorOptionTextFactory=new VendorOptionTextFactory(getClass(),getFunctionManager());  List<VendorOptionInterface> veList=vendorOptionTextFactory.getVendorOptionList();  if (veList != null) {    for (    VendorOptionInterface extension : veList) {      extension.setParentPanel(this);    }  }}  }
class C{  private void createAuthDefinitionsFromSwagger(){  if (swagger.getSecurityDefinitions() == null) {    return;  }  TreeSet<String> swaggerSecurityDefNames=Sets.newTreeSet(swagger.getSecurityDefinitions().keySet());  for (  String swaggerSecurityDefName : swaggerSecurityDefNames) {    authBuilder.addAuthProvider(swaggerSecurityDefName,swagger.getSecurityDefinitions().get(swaggerSecurityDefName));  }  authBuilder.addSecurityRequirementForEntireService(swagger.getSecurity());  authBuilder.addSecurityRequirementExtensionForEntireService(swagger);}  }
class C{  private void validate(Optional<ExternalSystemType> externalSystem,Project project,String externalSystemName){  expect(externalSystem,Preconditions.IS_PRESENT).verify(INCORRECT_EXTERNAL_SYSTEM_NAME,formattedSupplier("Unknown external system '{}'.",externalSystemName));  expect(externalSystem.get(),not(equalTo(ExternalSystemType.NONE))).verify(UNABLE_INTERACT_WITH_EXTRERNAL_SYSTEM,formattedSupplier("External system is not defined in project settings.",externalSystemName));}  }
class C{  public static String encodePassword(String value){  return Base64.byteArrayToBase64(value.getBytes());}  }
class C{  public static void generateSampleXml(String path){  String cplTrackId="urn:uuid:38d52c00-68d3-4056-8858-28eeaf3238d3";  EBUTrackType ebuTrack1=new EBUTrackType();  ebuTrack1.setNumber(1);  ebuTrack1.setCPLVirtualTrackId(cplTrackId);  ebuTrack1.setCPLVirtualTrackChannel(1);  EBUTrackType ebuTrack2=new EBUTrackType();  ebuTrack2.setNumber(2);  ebuTrack2.setCPLVirtualTrackId(cplTrackId);  ebuTrack2.setCPLVirtualTrackChannel(2);  EBUTrackType ebuTrack3=new EBUTrackType();  ebuTrack3.setNumber(3);  ebuTrack3.setCPLVirtualTrackId(null);  ebuTrack3.setCPLVirtualTrackChannel(null);  EBUTrackType ebuTrack4=new EBUTrackType();  ebuTrack4.setNumber(4);  ebuTrack4.setCPLVirtualTrackId(null);  ebuTrack4.setCPLVirtualTrackChannel(null);  AudioMapType audioMap=new AudioMapType();  audioMap.getEBUTrack().add(ebuTrack1);  audioMap.getEBUTrack().add(ebuTrack2);  audioMap.getEBUTrack().add(ebuTrack3);  audioMap.getEBUTrack().add(ebuTrack4);  AudioMapHelper.writeAudioMapToFile(new File(path),audioMap);}  }
class C{  public static double convertTempo(double tempo){  if (tempo <= 0) {    tempo=1;  }  return ((double)60000000l) / tempo;}  }
class C{  public boolean onUpOrCancel(){  boolean state=isPressed();  setPressed(false);  return state;}  }
class C{  public WallGetRepostsQuery postId(Integer value){  return unsafeParam("post_id",value);}  }
class C{  public final void empty(){synchronized (buffer) {    buffer.clear();    bufferMap.clear();  }}  }
class C{  public void startProgress(){  mBasoStatus=BasoStatus.PROGRESSING;  toggleLayout();}  }
class C{  public static boolean isDigit(char ch){  return ('0' <= ch && ch <= '9');}  }
class C{  public static void log(){  RequestLog current=RLOG.get();  if (current.info == null) {    LOG.warn("Attempted to log while request log object was uninitialized");    return;  }  LOG.info(export());  current.clear();}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public void loadImages(Observable<RiffsyResponse> observable){  disposable.add(observable.subscribeOn(provider.io()).observeOn(provider.ui()).subscribe(null,null,null));}  }
class C{  public AxisLabelLayout(String group,int axis,ValuedRangeModel values,Rectangle2D bounds){  super(group);  if (bounds != null)   setLayoutBounds(bounds);  m_model=values;  m_axis=axis;  m_spacing=50;}  }
class C{  public boolean showFullscreenSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN;}  }
class C{  public PlainAggregatedServiceDetails(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private boolean isLegalContainedNode(Node node){  if (node == null)   return false;switch (node.getNodeType()) {case Node.DOCUMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.ATTRIBUTE_NODE:case Node.ENTITY_NODE:case Node.NOTATION_NODE:    return false;}return true;}  }
class C{  public static float smoothstep(float t){  return t * t * (3.0f - 2.0f * t);}  }
class C{  private synchronized void populateFontFamilyList(){  if (fontFamilyList == null) {    fontFamilyList=new ArrayList<ValueComboBoxData>();    String[] families=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();    for (    String fontFamily : families) {      fontFamilyList.add(new ValueComboBoxData(fontFamily,fontFamily,getPanelId()));    }  }}  }
class C{  private RealmUtils(){}  }
class C{  public static Value selectBase(Value val,boolean keepArrayRef){  if (val instanceof ArrayRef && !keepArrayRef) {    return selectBase(((ArrayRef)val).getBase(),keepArrayRef);  }  if (val instanceof CastExpr) {    return selectBase(((CastExpr)val).getOp(),keepArrayRef);  }  if (val instanceof UnopExpr)   return selectBase(((UnopExpr)val).getOp(),keepArrayRef);  return val;}  }
class C{  public static void updatePhoneNumber(String phoneNumber,@Nullable AirMapCallback<Void> callback){  PilotService.updatePhoneNumber(phoneNumber,callback);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void prepareNextRun(){  for (  IVarAbstraction pn : pointers) {    if (pn.willUpdate == true) {      pn.reconstruct();    }  }  System.gc();}  }
class C{  public boolean supportsHeapDump(Application application){  if (application.getState() != Stateful.STATE_AVAILABLE)   return false;  return JvmFactory.getJVMFor(application).isTakeHeapDumpSupported();}  }
class C{  protected GroupsLeaveQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private static ReadData createReadData(int id,IReadBlock readBlock) throws IOException {  ReadData readData=new ReadData(id,readBlock.getReadName());  int best=-1;  float bestScore=0;  for (int m=0; m < readBlock.getNumberOfAvailableMatchBlocks(); m++) {    if (readBlock.getMatchBlock(m).getBitScore() > bestScore) {      best=m;      bestScore=readBlock.getMatchBlock(m).getBitScore();    }  }  if (best >= 0) {    int[] bestCoordinates=getQueryCoordinates(readBlock.getMatchBlock(best));    if (bestCoordinates[0] < bestCoordinates[1])     readData.setSegment(readBlock.getReadSequence().substring(bestCoordinates[0] - 1,bestCoordinates[1])); else     readData.setSegment(Basic.getReverseComplement(readBlock.getReadSequence().substring(bestCoordinates[1] - 1,bestCoordinates[0])));    final List<MatchData> matches=new LinkedList<>();    for (int m=0; m < readBlock.getNumberOfAvailableMatchBlocks(); m++) {      if (readBlock.getMatchBlock(m).getBitScore() == bestScore) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(m);        final int[] queryCoordinates=getQueryCoordinates(matchBlock);        if (queryCoordinates[0] == bestCoordinates[0] && queryCoordinates[1] == bestCoordinates[1]) {          int[] refCoordinates=getReferenceCoordinates(matchBlock);          matches.add(new MatchData(readData,Basic.getFirstWord(matchBlock.getText()),refCoordinates[0],refCoordinates[1],matchBlock.getText(),matchBlock.getBitScore()));        }      }    }    readData.setMatches(matches.toArray(new MatchData[matches.size()]));  }  return readData;}  }
class C{  private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {  String urlString=dis.readUTF();  if (urlString.equals("")) {    url=null;  } else {    url=urlString;  }  lastChangedRevision=dis.readLong();  lastChangedDate=dis.readLong();  String lastCommitAuthorString=dis.readUTF();  if ((url == null) || (lastCommitAuthorString.equals(""))) {    lastCommitAuthor=null;  } else {    lastCommitAuthor=lastCommitAuthorString;  }  textStatus=dis.readInt();  propStatus=dis.readInt();  setRevisionNumber(dis.readLong());  nodeKind=dis.readInt();}  }
class C{  XMLInputSource dom2xmlInputSource(LSInput is){  XMLInputSource xis=null;  if (is.getCharacterStream() != null) {    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),is.getCharacterStream(),"UTF-16");  } else   if (is.getByteStream() != null) {    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),is.getByteStream(),is.getEncoding());  } else   if (is.getStringData() != null && is.getStringData().length() > 0) {    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),new StringReader(is.getStringData()),"UTF-16");  } else   if ((is.getSystemId() != null && is.getSystemId().length() > 0) || (is.getPublicId() != null && is.getPublicId().length() > 0)) {    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI());  } else {    if (fErrorHandler != null) {      DOMErrorImpl error=new DOMErrorImpl();      error.fType="no-input-specified";      error.fMessage="no-input-specified";      error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;      fErrorHandler.getErrorHandler().handleError(error);    }    throw new LSException(LSException.PARSE_ERR,"no-input-specified");  }  return xis;}  }
class C{  public static Double parseDouble(String value){  if (value == null || value.trim().isEmpty()) {    return null;  }  try {    return Double.parseDouble(value);  } catch (  NumberFormatException ex) {    return null;  }}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public void leftClick(int x,int y) throws InterruptedException {  click(InputEvent.BUTTON1_MASK,x,y);}  }
class C{  public void addElement(final double value){  if (internalArray.length <= startIndex + numElements) {    expand();  }  internalArray[startIndex + numElements++]=value;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show what=selected;");}  }
class C{  public double t(final double mu,final StatisticalSummary sampleStats) throws MathIllegalArgumentException, NullArgumentException {  checkSampleData(sampleStats);  return t(sampleStats.getMean(),mu,sampleStats.getVariance(),sampleStats.getN());}  }
class C{  @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void nextGroup() throws SAException {  releaseScan();  return;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public static String mrpa2sampa(String voicePhoneme){  if (mrpa2sampa.containsKey(voicePhoneme))   return mrpa2sampa.get(voicePhoneme); else   return voicePhoneme;}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public void testQueryByAssigneeExcludeSubtasksOrdered() throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  TaskQuery query=taskService.createTaskQuery().taskAssignee("gonzo").orderByTaskCreateTime().desc();  assertEquals(7,query.count());  assertEquals(7,query.list().size());  assertEquals(sdf.parse("02/01/2009 01:01:01.000"),query.list().get(0).getCreateTime());  query=taskService.createTaskQuery().taskAssignee("gonzo").excludeSubtasks().orderByTaskCreateTime().asc();  assertEquals(2,query.count());  assertEquals(2,query.list().size());  assertEquals(sdf.parse("01/02/2008 02:02:02.000"),query.list().get(0).getCreateTime());  assertEquals(sdf.parse("05/02/2008 02:02:02.000"),query.list().get(1).getCreateTime());  query=taskService.createTaskQuery().taskAssignee("kermit").orderByTaskCreateTime().asc();  assertEquals(0,query.count());  assertEquals(0,query.list().size());  assertNull(query.singleResult());  query=taskService.createTaskQuery().taskAssignee("kermit").excludeSubtasks().orderByTaskCreateTime().desc();  assertEquals(0,query.count());  assertEquals(0,query.list().size());  assertNull(query.singleResult());}  }
class C{  public static long toLong(Object obj){  Long result=toLongObject(obj);  return result == null ? 0 : result.longValue();}  }
class C{  protected BoardCloseTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public InGroupPredicate(){}  }
class C{  public boolean execute(String action,String rawArgs,CallbackContext callbackContext) throws JSONException {  JSONArray args=new JSONArray(rawArgs);  return execute(action,args,callbackContext);}  }
class C{  public static String error(final int err){  return LIB.mdb_strerror(err);}  }
class C{  public void overrideConfigurationScreenSize(@AndroidCoordinate int xDimension,@AndroidCoordinate int yDimension){  Device original=myConfiguration.getDevice();  Device.Builder deviceBuilder=new Device.Builder(original);  if (original != null) {    deviceBuilder.setTagId(original.getTagId());  }  deviceBuilder.setName("Custom");  deviceBuilder.setId(Configuration.CUSTOM_DEVICE_ID);  Device device=deviceBuilder.build();  for (  State state : device.getAllStates()) {    Screen screen=state.getHardware().getScreen();    screen.setXDimension(xDimension);    screen.setYDimension(yDimension);    double dpi=screen.getPixelDensity().getDpiValue();    double width=xDimension / dpi;    double height=yDimension / dpi;    double diagonalLength=Math.sqrt(width * width + height * height);    screen.setDiagonalLength(diagonalLength);    screen.setSize(AvdScreenData.getScreenSize(diagonalLength));    screen.setRatio(AvdScreenData.getScreenRatio(xDimension,yDimension));    screen.setScreenRound(device.getDefaultHardware().getScreen().getScreenRound());    screen.setChin(device.getDefaultHardware().getScreen().getChin());  }  List<Device> devices=myConfiguration.getConfigurationManager().getDevices();  boolean customDeviceReplaced=false;  for (int i=0; i < devices.size(); i++) {    if ("Custom".equals(devices.get(i).getId())) {      devices.set(i,device);      customDeviceReplaced=true;      break;    }  }  if (!customDeviceReplaced) {    devices.add(device);  }  VirtualFile better;  State newState;  if (xDimension > yDimension) {    better=ConfigurationMatcher.getBetterMatch(myConfiguration,device,"Landscape",null,null);    newState=device.getState("Landscape");  } else {    better=ConfigurationMatcher.getBetterMatch(myConfiguration,device,"Portrait",null,null);    newState=device.getState("Portrait");  }  if (better != null) {    VirtualFile old=myConfiguration.getFile();    assert old != null;    Project project=mySurface.getProject();    OpenFileDescriptor descriptor=new OpenFileDescriptor(project,better,-1);    FileEditorManager manager=FileEditorManager.getInstance(project);    FileEditor selectedEditor=manager.getSelectedEditor(old);    manager.openEditor(descriptor,true);    if (selectedEditor instanceof NlEditor) {      manager.setSelectedEditor(better,NlEditorProvider.DESIGNER_ID);    } else     if (selectedEditor != null) {      manager.setSelectedEditor(better,TextEditorProvider.getInstance().getEditorTypeId());    }    AndroidFacet facet=AndroidFacet.getInstance(myConfiguration.getModule());    assert facet != null;    Configuration configuration=facet.getConfigurationManager().getConfiguration(better);    configuration.setEffectiveDevice(device,newState);  } else {    myConfiguration.setEffectiveDevice(device,newState);  }}  }
class C{  public BlockList(){  this(new ConcurrentHashMap<Integer,BlockedPlayer>());}  }
class C{  private static String convertToQuotedString(String s){  if (s == null || s.isEmpty()) {    return null;  }  if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"') {    return s;  }  return '\"' + s + '\"';}  }
class C{  private static int estimateUnitsBetween(long t0,long t1,int field){  long d=t1 - t0;switch (field) {case Calendar.MILLISECOND:    return (int)d;case Calendar.SECOND:  return (int)(d / SECOND_MILLIS + .5);case Calendar.MINUTE:return (int)(d / MINUTE_MILLIS + .5);case Calendar.HOUR_OF_DAY:case Calendar.HOUR:return (int)(d / HOUR_MILLIS + .5);case Calendar.DAY_OF_WEEK_IN_MONTH:case Calendar.DAY_OF_MONTH:return (int)(d / DAY_MILLIS + .5);case Calendar.WEEK_OF_YEAR:return (int)(d / WEEK_MILLIS + .5);case Calendar.MONTH:return (int)(d / MONTH_MILLIS + .5);case Calendar.YEAR:return (int)(d / YEAR_MILLIS + .5);case DECADE:return (int)(d / DECADE_MILLIS + .5);case CENTURY:return (int)(d / CENTURY_MILLIS + .5);case MILLENIUM:return (int)(d / MILLENIUM_MILLIS + .5);default :return 0;}}  }
class C{  public void addWords(List<String> words){  addWords(words.toArray(new String[words.size()]));}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  protected void dispose(Object obj){  if (obj instanceof PoolableThread) {    PoolableThread thread=(PoolableThread)obj;    thread.cleanStop();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParClassInstanceExpr fullCopy(){  ParClassInstanceExpr tree=(ParClassInstanceExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected final void writeDF(ChannelBuffer buf,double value){  buf.writeDouble(value);}  }
class C{  public synchronized void waitForNonActiveStatus(){  try {    if (_status == INITIAL_SCAN_NOTACTIVE)     return;    _needNotifyTermination=true;    this.wait(5000);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public void updateView(String what){  this.uptodate=false;  if (this.doClear) {    this.doClear=false;  }  commandManager.updateEnableState();  this.setTitle();  this.uptodate=true;}  }
class C{  private String splitAsGzipFile(String split){  return split + ".gz";}  }
class C{  @NotNull public static List<Color> suggestAccentColors(@NotNull Color primaryColor){  ImmutableList.Builder<Color> builder=ImmutableList.builder();  if (AccentSuggestionsUtils.isMaterialPrimary(primaryColor)) {    builder.addAll(AccentSuggestionsUtils.getMonochromaticAccents(primaryColor));    builder.addAll(AccentSuggestionsUtils.getAssociatedAccents(primaryColor));    builder.addAll(AccentSuggestionsUtils.getComplementaryAccents(primaryColor));    builder.addAll(AccentSuggestionsUtils.getTriadAccents(primaryColor));  } else {    float[] hsv=Color.RGBtoHSB(primaryColor.getRed(),primaryColor.getGreen(),primaryColor.getBlue(),null);    hsv[2]=Math.max(0.6f,hsv[2]);    builder.add(Color.getHSBColor(hsv[0],0.75f,1));    builder.add(Color.getHSBColor(hsv[0],1,hsv[2]));    float associatedHue1=(hsv[0] + 0.125f) % 1;    builder.add(Color.getHSBColor(associatedHue1,0.75f,1));    builder.add(Color.getHSBColor(associatedHue1,1,hsv[2]));    float associatedHue2=(hsv[0] + 0.875f) % 1;    builder.add(Color.getHSBColor(associatedHue2,0.75f,1));    builder.add(Color.getHSBColor(associatedHue2,1,hsv[2]));    float complementaryHue=(hsv[0] + 0.5f) % 1;    builder.add(Color.getHSBColor(complementaryHue,0.75f,1));    builder.add(Color.getHSBColor(complementaryHue,1,hsv[2]));    float triadHue1=(hsv[0] + 0.625f) % 1;    builder.add(Color.getHSBColor(triadHue1,0.75f,1));    builder.add(Color.getHSBColor(triadHue1,1,hsv[2]));    float triadHue2=(hsv[0] + 0.375f) % 1;    builder.add(Color.getHSBColor(triadHue2,0.75f,1));    builder.add(Color.getHSBColor(triadHue2,1,hsv[2]));  }  return builder.build();}  }
class C{  public void write(int[] data){  for (  int i : data) {    writeInt(i);  }}  }
class C{  @Override public String addSymbol(String symbol){  if (fSymbolTable.containsSymbol(symbol)) {    return fSymbolTable.addSymbol(symbol);  }  return super.addSymbol(symbol);}  }
class C{  protected void deleteExceptionByteArrayRef(JobEntity jobEntity){  ByteArrayRef exceptionByteArrayRef=jobEntity.getExceptionByteArrayRef();  if (exceptionByteArrayRef != null) {    exceptionByteArrayRef.delete();  }}  }
class C{  public SQLQuery(String typeName,String sqlExpression,QueryResultType queryResultType,Object... parameters){  this(sqlExpression,typeName,null,queryResultType,parameters);}  }
class C{  public static UUID uuidForTimestamp(Date timestamp){  return uuidForTimeMillis(timestamp.getTime(),0);}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public void java_lang_Throwable_fillInStackTrace(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assign(returnVar,thisVar);}  }
class C{  public static <T extends Serializable,R>DistributedTask<T,R> task(Runnable runnable,T result,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){  return new RunnableDistributedTaskAdapter<T,R>(runnable,result,reducer,filter);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_MAX_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1300572,value0);}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public Predicate(Term t){  terms.add(t);}  }
class C{  public static int gaps(int[] start,int[] end){  Arrays.sort(start);  Arrays.sort(end);  int overlap=0;  int gaps=0;  for (int i=0, j=0; j < end.length; ) {    if (i < start.length && start[i] < end[j]) {      overlap++;      i++;    } else {      j++;      overlap--;    }    if (overlap == 0) {      gaps++;    }  }  return gaps;}  }
class C{  protected RTTypeface(){}  }
class C{  public Point2D.Double[] generate(int n){  final Point2D.Double[] cloud=new Point2D.Double[n];  for (int i=0; i < n; i++) {    cloud[i]=create();  }  return cloud;}  }
class C{  private Elem parseLetBindingsThenBody(int indent,boolean firstContent,TokenStream tokens,Layout layout){  String var=tokens.expect(IDENTIFIER);  tokens.expect("=");  Elem value=parseExpr(tokens);  List<Elem> bodyElems;  if (tokens.has(",")) {    tokens.next();    Elem let=parseLetBindingsThenBody(indent,firstContent,tokens,layout);    bodyElems=let != null ? ImmutableList.of(let) : ImmutableList.<Elem>of();  } else {    tokens.checkAtEnd();    bodyElems=parseUntil(indent,layout,END_COMMAND);  }  if (var != null && value != null && bodyElems != null) {    return Elem.Let.create(input.location(),var,value,bodyElems);  }  return null;}  }
class C{  protected AdsUpdateClientsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  private void fill(double[] data,List<Integer> tiesTrace,double value){  Iterator<Integer> iterator=tiesTrace.iterator();  while (iterator.hasNext()) {    data[iterator.next()]=value;  }}  }
class C{  public boolean isForceLabelsEnabled(){  return mForceLabels;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static void infoNotification(final String message){  showNotification(message,NotificationType.INFORMATION);}  }
class C{  private IdentifiableComparator(){}  }
class C{  @Override public synchronized void write(byte[] b) throws IOException {  super.write(b);  this.branch.write(b);}  }
class C{  public static void disable(){  if (lock.compareAndSet(false,true)) {    RxJavaPlugins.setOnCompletableAssembly(null);    RxJavaPlugins.setOnSingleAssembly(null);    RxJavaPlugins.setOnMaybeAssembly(null);    RxJavaPlugins.setOnObservableAssembly(null);    RxJavaPlugins.setOnFlowableAssembly(null);    RxJavaPlugins.setOnConnectableObservableAssembly(null);    RxJavaPlugins.setOnConnectableFlowableAssembly(null);    lock.set(false);  }}  }
class C{  public String resolveEntity(String entityName,String publicId,String systemId) throws IOException {  String resolved=null;  catalogManager.debug.message(3,"resolveEntity(" + entityName + ","+ publicId+ ","+ systemId+ ")");  systemId=normalizeURI(systemId);  if (publicId != null && publicId.startsWith("urn:publicid:")) {    publicId=PublicId.decodeURN(publicId);  }  if (systemId != null && systemId.startsWith("urn:publicid:")) {    systemId=PublicId.decodeURN(systemId);    if (publicId != null && !publicId.equals(systemId)) {      catalogManager.debug.message(1,"urn:publicid: system identifier differs from public identifier; using public identifier");      systemId=null;    } else {      publicId=systemId;      systemId=null;    }  }  if (systemId != null) {    resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  if (publicId != null) {    resolved=resolveLocalPublic(ENTITY,entityName,publicId,systemId);    if (resolved != null) {      return resolved;    }  }  boolean over=default_override;  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == OVERRIDE) {      over=e.getEntryArg(0).equalsIgnoreCase("YES");      continue;    }    if (e.getEntryType() == ENTITY && e.getEntryArg(0).equals(entityName)) {      if (over || systemId == null) {        return e.getEntryArg(1);      }    }  }  return resolveSubordinateCatalogs(ENTITY,entityName,publicId,systemId);}  }
class C{  public SpaceConnectionEvent(Object id){  _id=id;}  }
class C{  public static List<String> quoteStrList(List<String> list){  List<String> tmpList=list;  list=new LinkedList<String>();  for (  String str : tmpList) {    str="'" + str + "'";    list.add(str);  }  return list;}  }
class C{  @Override public Iterator<ShoppingCartItem> iterator(){  return cartLines.iterator();}  }
class C{  public void readDataFile(URL fileUrl) throws DataFileException {  if (fileUrl == null) {    throw new IllegalStateException("File URL is null, cannot load file");  }  RecordIterator recordIterator=this.makeRecordIterator(fileUrl);  while (recordIterator.hasNext()) {    this.records.add(recordIterator.next());  }}  }
class C{  public static int rgba(int r,int g,int b,int a){  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| ((b & 0xFF) << 0);}  }
class C{  public T walkInOptimizedOrder(final FieldVectorPreservingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  return walkInDefaultOrder(visitor,start,end);}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public static String toStackTraceString(Throwable throwable){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  throwable.printStackTrace(pw);  String stackTraceString=sw.toString();  if (stackTraceString.length() > MAX_STACK_TRACE_SIZE) {    String disclaimer=" [stack trace too large]";    stackTraceString=stackTraceString.substring(0,MAX_STACK_TRACE_SIZE - disclaimer.length()) + disclaimer;  }  return stackTraceString;}  }
class C{  public static Predicate<EmailData> fromAddress(final String address){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_LEVEL_DOWN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400893,value0,value1);}  }
class C{  public static String s2(int v){  char[] result=new char[5];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 4; i++) {    result[4 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  private static Dfp computePi(final Dfp one,final Dfp two,final Dfp three){  Dfp sqrt2=two.sqrt();  Dfp yk=sqrt2.subtract(one);  Dfp four=two.add(two);  Dfp two2kp3=two;  Dfp ak=two.multiply(three.subtract(two.multiply(sqrt2)));  for (int i=1; i < 20; i++) {    final Dfp ykM1=yk;    final Dfp y2=yk.multiply(yk);    final Dfp oneMinusY4=one.subtract(y2.multiply(y2));    final Dfp s=oneMinusY4.sqrt().sqrt();    yk=one.subtract(s).divide(one.add(s));    two2kp3=two2kp3.multiply(four);    final Dfp p=one.add(yk);    final Dfp p2=p.multiply(p);    ak=ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));    if (yk.equals(ykM1)) {      break;    }  }  return one.divide(ak);}  }
class C{  private void buildSpectrogram(){  short[] amplitudes=wave.getSampleAmplitudes();  int numSamples=amplitudes.length;  int pointer;  if (overlapFactor > 1) {    int numOverlappedSamples=numSamples * overlapFactor;    int backSamples=fftSampleSize * (overlapFactor - 1) / overlapFactor;    int fftSampleSize_1=fftSampleSize - 1;    short[] overlapAmp=new short[numOverlappedSamples];    pointer=0;    for (int i=0; i < amplitudes.length; i++) {      overlapAmp[pointer++]=amplitudes[i];      if (pointer % fftSampleSize == fftSampleSize_1) {        i-=backSamples;      }    }    numSamples=numOverlappedSamples;    amplitudes=overlapAmp;  }  numFrames=numSamples / fftSampleSize;  framesPerSecond=(int)(numFrames / wave.length());  WindowFunction window=new WindowFunction();  window.setWindowType("Hamming");  double[] win=window.generate(fftSampleSize);  double[][] signals=new double[numFrames][];  for (int f=0; f < numFrames; f++) {    signals[f]=new double[fftSampleSize];    int startSample=f * fftSampleSize;    for (int n=0; n < fftSampleSize; n++) {      signals[f][n]=amplitudes[startSample + n] * win[n];    }  }  absoluteSpectrogram=new double[numFrames][];  FastFourierTransform fft=new FastFourierTransform();  for (int i=0; i < numFrames; i++) {    absoluteSpectrogram[i]=fft.getMagnitudes(signals[i]);  }  if (absoluteSpectrogram.length > 0) {    numFrequencyUnit=absoluteSpectrogram[0].length;    unitFrequency=(double)wave.getWaveHeader().getSampleRate() / 2 / numFrequencyUnit;    spectrogram=new double[numFrames][numFrequencyUnit];    double maxAmp=Double.MIN_VALUE;    double minAmp=Double.MAX_VALUE;    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] > maxAmp) {          maxAmp=absoluteSpectrogram[i][j];        } else         if (absoluteSpectrogram[i][j] < minAmp) {          minAmp=absoluteSpectrogram[i][j];        }      }    }    double minValidAmp=0.00000000001F;    if (minAmp == 0) {      minAmp=minValidAmp;    }    double diff=Math.log10(maxAmp / minAmp);    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] < minValidAmp) {          spectrogram[i][j]=0;        } else {          spectrogram[i][j]=(Math.log10(absoluteSpectrogram[i][j] / minAmp)) / diff;        }      }    }  }}  }
class C{  public boolean isRestoredFromConfigfile(){  return restoredFromConfigfile;}  }
class C{  public CircularWallForce(float gravConst,float x,float y,float r){  params=new float[]{gravConst};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT};  this.x=x;  this.y=y;  this.r=r;}  }
class C{  @NotNull private List<GradleEditorEntityGroup> parse(@NotNull String relativeGradleConfigPath){  VirtualFile baseDir=myFixture.getProject().getBaseDir();  String filePath=baseDir.getPath() + '/' + relativeGradleConfigPath;  VirtualFile vFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath);  assertNotNull(filePath,vFile);  return new GradleEditorModelParserFacade().parse(vFile,myFixture.getProject());}  }
class C{  public UnivariatePeriodicInterpolator(UnivariateInterpolator interpolator,double period,int extend){  this.interpolator=interpolator;  this.period=period;  this.extend=extend;}  }
class C{  public AverageLinkClusterer(){}  }
class C{  public static final void toString(StringBuffer output,Object obj,Class type){  if (obj == null) {    output.append("null");    return;  }  if (type.isPrimitive()) {    if (type == Boolean.TYPE)     toString(output,(boolean[])obj); else     if (type == Character.TYPE)     toString(output,(char[])obj); else     if (type == Byte.TYPE)     toString(output,(byte[])obj); else     if (type == Short.TYPE)     toString(output,(short[])obj); else     if (type == Integer.TYPE)     toString(output,(int[])obj); else     if (type == Long.TYPE)     toString(output,(long[])obj); else     if (type == Float.TYPE)     toString(output,(float[])obj); else     if (type == Double.TYPE)     toString(output,(double[])obj);    return;  }  Object[] tab=(Object[])obj;  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      toString(output,tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      toString(output,tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      toString(output,tab[size - i]);    }  }  output.append(")");}  }
class C{  @TargetApi(11) public void zoomAndCenterAnimated(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    MPPointD origin=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    Runnable job=AnimatedZoomJob.getInstance(mViewPortHandler,this,getTransformer(axis),getAxis(axis),mXAxis.mAxisRange,scaleX,scaleY,mViewPortHandler.getScaleX(),mViewPortHandler.getScaleY(),xValue,yValue,(float)origin.x,(float)origin.y,duration);    addViewportJob(job);    MPPointD.recycleInstance(origin);  } else {    Log.e(LOG_TAG,"Unable to execute zoomAndCenterAnimated(...) on API level < 11");  }}  }
class C{  public PlacesCheckinQuery(VkApiClient client,UserActor actor){  super(client,"places.checkin",CheckinResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private static List<String[]> checkAndSplitPatterns(Collection<String> patterns){  List<String[]> list=Lists.newArrayListWithCapacity(patterns.size());  for (  String pattern : patterns) {    String error=GlobPatternValidator.validate(pattern);    if (error != null) {      throw new IllegalArgumentException(error);    }    Iterable<String> segments=Splitter.on('/').split(pattern);    list.add(Iterables.toArray(segments,String.class));  }  return list;}  }
class C{  public boolean hasValidBackgroundColor(){  return mBackgroundColor != ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  SmartLocalDefs sld=SmartLocalDefsPool.v().getSmartLocalDefsFor(b);  UnitGraph g=sld.getGraph();  NaiveSideEffectTester nset=new NaiveSideEffectTester();  LoopFinder lf=new LoopFinder();  lf.internalTransform(b,phaseName,options);  Collection<Loop> loops=lf.loops();  constants=new ArrayList();  if (loops.isEmpty())   return;  Iterator<Loop> lIt=loops.iterator();  while (lIt.hasNext()) {    Loop loop=lIt.next();    Stmt header=loop.getHead();    Collection<Stmt> loopStmts=loop.getLoopStatements();    Iterator<Stmt> bIt=loopStmts.iterator();    while (bIt.hasNext()) {      Stmt tStmt=bIt.next();      handleLoopBodyStmt(tStmt,nset,loopStmts);    }  }}  }
class C{  public CandidateEstimator(DoubleDataSource signal,Window window,int frameShift,int samplingRate,int minF0,int maxF0){  this(signal,window,frameShift,samplingRate);  this.minF0=minF0;  this.maxF0=maxF0;}  }
class C{  public List<SerialMessage> executeRefresh(ZWaveThingChannel channel,ZWaveNode node){  return new ArrayList<SerialMessage>();}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_POINTDOWN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300518,value0,value1);}  }
class C{  private static AuthCredential authCredentialsFromUrl(String url){  if (isValidLoginSchema(url)) {    url=url.replace(Utils.getCallbackUrl() + "#",Utils.getCallbackUrl() + "?");    HttpUrl parsed=HttpUrl.parse(url);    try {      String idToken=parsed.queryParameter("id_token");      AuthCredential authCredentials=new AuthCredential();      authCredentials.setAccessToken(idToken);      authCredentials.setTokenType(parsed.queryParameter("token_type"));      authCredentials.setRefreshToken(parsed.queryParameter("refresh_token"));      JwtConsumer consumer=new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build();      JwtClaims claims=consumer.processToClaims(idToken);      authCredentials.setUserId(claims.getSubject());      authCredentials.setExpiresAt(new Date(claims.getExpirationTime().getValueInMillis()));      return authCredentials;    } catch (    InvalidJwtException|MalformedClaimException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  @Override public void fatalError(String domain,String key,XMLParseException exception) throws XNIException {  fDOMError.fSeverity=DOMError.SEVERITY_FATAL_ERROR;  fDOMError.fException=exception;  fErrorCode.setValues(domain,key);  String domErrorType=DOMErrorTypeMap.getDOMErrorType(fErrorCode);  fDOMError.fType=(domErrorType != null) ? domErrorType : key;  fDOMError.fRelatedData=fDOMError.fMessage=exception.getMessage();  DOMLocatorImpl locator=fDOMError.fLocator;  if (locator != null) {    locator.fColumnNumber=exception.getColumnNumber();    locator.fLineNumber=exception.getLineNumber();    locator.fUtf16Offset=exception.getCharacterOffset();    locator.fUri=exception.getExpandedSystemId();    locator.fRelatedNode=fCurrentNode;  }  if (fDomErrorHandler != null) {    fDomErrorHandler.handleError(fDOMError);  }}  }
class C{  public static boolean isComparable(ValidatedInfo info1,ValidatedInfo info2){  final short primitiveType1=convertToPrimitiveKind(info1.actualValueType);  final short primitiveType2=convertToPrimitiveKind(info2.actualValueType);  if (primitiveType1 != primitiveType2) {    return (primitiveType1 == XSConstants.ANYSIMPLETYPE_DT && primitiveType2 == XSConstants.STRING_DT || primitiveType1 == XSConstants.STRING_DT && primitiveType2 == XSConstants.ANYSIMPLETYPE_DT);  } else   if (primitiveType1 == XSConstants.LIST_DT || primitiveType1 == XSConstants.LISTOFUNION_DT) {    final ShortList typeList1=info1.itemValueTypes;    final ShortList typeList2=info2.itemValueTypes;    final int typeList1Length=typeList1 != null ? typeList1.getLength() : 0;    final int typeList2Length=typeList2 != null ? typeList2.getLength() : 0;    if (typeList1Length != typeList2Length) {      return false;    }    for (int i=0; i < typeList1Length; ++i) {      final short primitiveItem1=convertToPrimitiveKind(typeList1.item(i));      final short primitiveItem2=convertToPrimitiveKind(typeList2.item(i));      if (primitiveItem1 != primitiveItem2) {        if (primitiveItem1 == XSConstants.ANYSIMPLETYPE_DT && primitiveItem2 == XSConstants.STRING_DT || primitiveItem1 == XSConstants.STRING_DT && primitiveItem2 == XSConstants.ANYSIMPLETYPE_DT) {          continue;        }        return false;      }    }  }  return true;}  }
class C{  private void populatePrevScanNarrowing(){  if (ScanContainer.scanContainer.isScanRefinable()) {    refine_by_last_scan.setVisibility(View.VISIBLE);    exResPrevScan.setText(String.format(getString(R.string.last_scan),ScanContainer.scanContainer.getPrevScanName()));  } else {    refine_by_last_scan.setVisibility(View.GONE);  }}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  public boolean hasNext(){  return !isClosed && nextLine != null;}  }
class C{  public void reAddAllItems(@NonNull Collection<? extends MODEL> collection){  if (collection.size() == 0) {    return;  }  mInserts.addAll(createEmptyInsertsList(collection.size()));  getItems().addAll(collection);}  }
class C{  public static void log(final String _msg){  FirebaseCrash.log(_msg);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void parseFile(String fileName){  System.out.println("Parsing file " + fileName + "...");  File fTmp=new File(fileName);  if (fTmp.isFile())   baseDir=fTmp.getParent();  String currentLine;  try {    BufferedReader in=new BufferedReader(new FileReader(fileName));    while ((currentLine=in.readLine()) != null) {      this.numberOfClusters++;      String[] splitted=currentLine.split("\\s");      String key=splitted[splitted.length - 2] + " " + splitted[splitted.length - 1];      TreeSet docSet=new TreeSet();      for (int i=0; i < splitted.length - 3; i++)       docSet.add(splitted[i]);      if (this.clusters.containsKey(key)) {        LinkedList currentList=(LinkedList)this.clusters.get(key);        currentList.add(docSet);        this.clusters.put(key,currentList);      } else {        LinkedList list=new LinkedList();        list.add(docSet);        this.clusters.put(key,list);      }    }    in.close();    System.out.println("Parsing of file completed.");  } catch (  FileNotFoundException ex) {    ex.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean needsRewrite(){  ASTNode$State state=state();  try {    return false;  }  finally {  }}  }
class C{  public RoleAuthority(String role){  this.role=role;}  }
class C{  public SketchRoundUpMapper(String columnName){  this.columnName=columnName;}  }
class C{  public void printResults(){  for (  ResultSinkInfo sink : this.results.keySet()) {    logger.info("Found a flow to sink {}, from the following sources:",sink);    for (    ResultSourceInfo source : this.results.get(sink)) {      logger.info("\t- {}",source.getSource());      if (source.getPath() != null && !source.getPath().isEmpty())       logger.info("\t\ton Path {}",source.getPath());    }  }}  }
class C{  protected Map<LogicalMetric,Set<ApiHaving>> generateHavings(String havingQuery,Set<LogicalMetric> logicalMetrics,MetricDictionary metricDictionary) throws BadApiRequestException {  LOG.trace("Metric Dictionary: {}",metricDictionary);  if (havingQuery == null || "".equals(havingQuery)) {    return Collections.emptyMap();  }  List<String> unmatchedMetrics=new ArrayList<>();  List<String> apiHavings=Arrays.asList(havingQuery.split(COMMA_AFTER_BRACKET_PATTERN));  Map<LogicalMetric,Set<ApiHaving>> generated=new LinkedHashMap<>();  for (  String apiHaving : apiHavings) {    try {      ApiHaving newHaving=new ApiHaving(apiHaving,metricDictionary);      LogicalMetric metric=newHaving.getMetric();      if (!logicalMetrics.contains(metric)) {        unmatchedMetrics.add(metric.getName());      } else {        generated.putIfAbsent(metric,new LinkedHashSet<>());        generated.get(metric).add(newHaving);      }    } catch (    BadHavingException havingException) {      throw new BadApiRequestException(havingException.getMessage(),havingException);    }  }  if (!unmatchedMetrics.isEmpty()) {    LOG.debug(HAVING_METRICS_NOT_IN_QUERY_FORMAT.logFormat(unmatchedMetrics.toString()));    throw new BadApiRequestException(HAVING_METRICS_NOT_IN_QUERY_FORMAT.format(unmatchedMetrics.toString()));  }  LOG.trace("Generated map of havings: {}",generated);  return generated;}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  protected BoardCreateCommentQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  public CylinderArea(ZoneName zoneName,int worldId,Point2D center,float radius,float minZ,float maxZ){  this(zoneName,worldId,center.getX(),center.getY(),radius,minZ,maxZ);}  }
class C{  public ValueComboBoxData(String key,String text,VendorOptionVersion vendorOptionVersion,Class<?> panelId){  super();  this.key=key;  this.text=text;  this.panelId=panelId;  this.vendorOptionVersion=vendorOptionVersion;}  }
class C{  public Object loadFromInputStream(final InputStream inputStream) throws XMLException {  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(inputStream);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    try {      throw new XMLException("Cannot unmarshal the XML: " + IOUtils.toString(inputStream),e);    } catch (    IOException e1) {      throw new XMLException("Cannot unmarshal the XML",e1);    }  }catch (  IllegalArgumentException e) {    try {      throw new XMLException("Cannot unmarshal the XML: " + IOUtils.toString(inputStream),e);    } catch (    IOException e1) {      throw new XMLException("Cannot unmarshal the XML",e1);    }  }  return readObject;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DEATH_REGISTER_RESURRECT_POINT(String subzone){  return new SM_SYSTEM_MESSAGE(1300670,subzone);}  }
class C{  protected void initializeWorld(){  this.world.setNarrowphaseDetector(new Sat());  List<Link> links=Geometry.createLinks(new Vector2[]{new Vector2(-6.0,0.5),new Vector2(0.0,0.0),new Vector2(2.0,0.0),new Vector2(4.0,0.2),new Vector2(4.5,0.3),new Vector2(6.0,-0.5)},false);  SimulationBody floor=new SimulationBody();  for (  Link link : links) {    floor.addFixture(link);  }  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody slider=new SimulationBody();  slider.addFixture(Geometry.createSquare(0.25));  slider.setMass(MassType.NORMAL);  slider.setLinearVelocity(6.2,0);  slider.translate(-5.5,1.0);  this.world.addBody(slider);}  }
class C{  public void loadGrammar(XMLInputSource source[]) throws IOException, XNIException {  int numSource=source.length;  for (int i=0; i < numSource; ++i) {    loadGrammar(source[i]);  }}  }
class C{  public RectangleArea(ZoneName zoneName,int worldId,float minX,float minY,float maxX,float maxY,float minZ,float maxZ){  super(zoneName,worldId,minZ,maxZ);  this.minX=minX;  this.maxX=maxX;  this.minY=minY;  this.maxY=maxY;}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,GraqlErrorListener errorListener,TokenStream tokens){  GraqlParser parser=new GraqlParser(tokens);  parser.removeErrorListeners();  parser.addErrorListener(errorListener);  S tree=parseRule.apply(parser);  if (errorListener.hasErrors()) {    throw new IllegalArgumentException(errorListener.toString());  }  return visit.apply(getQueryVisitor(),tree);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public void storeObject(VisibleObject object){  if (object.getPosition() == null) {    log.warn("Not putting object with null position!!! " + object.getObjectTemplate().getTemplateId());    return;  }  if (allObjects.put(object.getObjectId(),object) != null) {    throw new DuplicateAionObjectException();  }  if (object instanceof Player) {    allPlayers.add((Player)object);  }  if (object instanceof SiegeNpc) {    SiegeNpc siegeNpc=(SiegeNpc)object;    Collection<SiegeNpc> npcs=localSiegeNpcs.get(siegeNpc.getSiegeId());    if (npcs == null) {synchronized (localSiegeNpcs) {        if (localSiegeNpcs.containsKey(siegeNpc.getSiegeId())) {          npcs=localSiegeNpcs.get(siegeNpc.getSiegeId());        } else {          npcs=new FastList<SiegeNpc>().shared();          localSiegeNpcs.put(siegeNpc.getSiegeId(),npcs);        }      }    }    npcs.add(siegeNpc);  }  if (object.getSpawn() instanceof BaseSpawnTemplate) {    BaseSpawnTemplate bst=(BaseSpawnTemplate)object.getSpawn();    int baseId=bst.getId();    if (!baseNpc.containsKey(baseId)) {      baseNpc.put(baseId,new FastList());    }    baseNpc.get(baseId).add((Npc)object);  }  if (object instanceof Npc) {    allNpcs.put(object.getObjectId(),(Npc)object);  }}  }
class C{  @Override protected final void startNamespaceScope(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  fNamespaceContext.pushContext();  if (element.prefix == XMLSymbols.PREFIX_XMLNS) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  int length=attributes.getLength();  for (int i=0; i < length; i++) {    String localpart=attributes.getLocalName(i);    String prefix=attributes.getPrefix(i);    if (prefix == XMLSymbols.PREFIX_XMLNS || prefix == XMLSymbols.EMPTY_STRING && localpart == XMLSymbols.PREFIX_XMLNS) {      String uri=fSymbolTable.addSymbol(attributes.getValue(i));      if (prefix == XMLSymbols.PREFIX_XMLNS && localpart == XMLSymbols.PREFIX_XMLNS) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (uri == NamespaceContext.XMLNS_URI) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (localpart == XMLSymbols.PREFIX_XML) {        if (uri != NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      } else {        if (uri == NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }      prefix=localpart != XMLSymbols.PREFIX_XMLNS ? localpart : XMLSymbols.EMPTY_STRING;      fNamespaceContext.declarePrefix(prefix,uri.length() != 0 ? uri : null);    }  }  String prefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(prefix);  if (element.prefix == null && element.uri != null) {    element.prefix=XMLSymbols.EMPTY_STRING;  }  if (element.prefix != null && element.uri == null) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{element.prefix,element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  for (int i=0; i < length; i++) {    attributes.getName(i,fAttributeQName);    String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;    String arawname=fAttributeQName.rawname;    if (arawname == XMLSymbols.PREFIX_XMLNS) {      fAttributeQName.uri=fNamespaceContext.getURI(XMLSymbols.PREFIX_XMLNS);      attributes.setName(i,fAttributeQName);    } else     if (aprefix != XMLSymbols.EMPTY_STRING) {      fAttributeQName.uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri == null) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{element.rawname,arawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      attributes.setName(i,fAttributeQName);    }  }  int attrCount=attributes.getLength();  for (int i=0; i < attrCount - 1; i++) {    String auri=attributes.getURI(i);    if (auri == null || auri == NamespaceContext.XMLNS_URI) {      continue;    }    String alocalpart=attributes.getLocalName(i);    for (int j=i + 1; j < attrCount; j++) {      String blocalpart=attributes.getLocalName(j);      String buri=attributes.getURI(j);      if (alocalpart == blocalpart && auri == buri) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{element.rawname,alocalpart,auri},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }    }  }}  }
class C{  public static long calculateDifference(long startTimeMillis,long endTimeMillis,DifferenceMode mode){  return calculateDifference(new Date(startTimeMillis),new Date(endTimeMillis),mode);}  }
class C{  private JSONObject createJSONObject(MotionEvent motionEvent,int pos,int pointerIndex){  PointF screenXY, pageXY;  if (pos == CUR_EVENT) {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex);  } else {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex,pos);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex,pos);  }  return createJSONObject(screenXY,pageXY,(float)motionEvent.getPointerId(pointerIndex));}  }
class C{  public static java.sql.Date toSqlDate(int month,int day,int year){  java.util.Date newDate=toDate(month,day,year,0,0,0);  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  if (key != null && stream != null) {    streamParams.put(key,new StreamWrapper(stream,name,contentType));  }}  }
class C{  public OLSMultipleLinearRegression(final double threshold){  this.threshold=threshold;}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public static float[] unQuantize(short[] s,float fMin,float fRange){  int len=s.length;  float[] ret=new float[len];  for (int i=0; i < len; i++)   ret[i]=unQuantize(s[i],fMin,fRange);  return (ret);}  }
class C{  public void populateAll() throws GeneralException {  this.populateUsedEntities();  this.populateCalledServices();  this.populateTriggeredServiceEcas();}  }
class C{  public void addDeviceCommand(DeviceCommand deviceCommand){  this.deviceCommands.add(deviceCommand);}  }
class C{  boolean insert(BinarySearchTreeNode<E> item){  if (this.root == null) {    this.root=item;    this.size++;    return true;  } else {    return this.insert(item,this.root);  }}  }
class C{  public static ViewTapTarget forView(View view,CharSequence title){  return forView(view,title,null);}  }
class C{  public AudioDeleteQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){  super(client,"audio.delete",OkResponse.class);  accessToken(actor.getAccessToken());  audioId(audioId);  ownerId(ownerId);}  }
class C{  private void fixPhoneme_AH(Utterance utterance){  for (Item item=utterance.getRelation(Relation.SEGMENT).getHead(); item != null; item=item.getNext()) {    if (item.getFeatures().getString("name").equals("ah")) {      item.getFeatures().setString("name","aa");    }  }}  }
class C{  @SkylarkCallable(name="first_line_message",doc="The message of the change",structField=true) public String firstLineMessage(){  int idx=message.indexOf('\n');  return idx == -1 ? message : message.substring(0,idx);}  }
class C{  public XMLStreamException(String msg,Location location){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  this.location=location;}  }
class C{  public DatabaseGetCountriesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private static ByteBuf encode(MessageType messageType,Consumer<ByteBuf> messageEncoder,ByteBuf buffer) throws UaException {  buffer.writeMedium(MessageType.toMediumInt(messageType));  buffer.writeByte('F');  int lengthIndex=buffer.writerIndex();  buffer.writeInt(0);  int indexBefore=buffer.writerIndex();  messageEncoder.accept(buffer);  int indexAfter=buffer.writerIndex();  int bytesWritten=indexAfter - indexBefore;  buffer.writerIndex(lengthIndex);  buffer.writeInt(8 + bytesWritten);  buffer.writerIndex(indexAfter);  return buffer;}  }
class C{  public MarketGetAlbumsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public SimpleLocalUses(Body body,LocalDefs localDefs){  this.body=body;  if (Options.v().time())   Timers.v().usesTimer.start();  if (Options.v().time())   Timers.v().usePhase1Timer.start();  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Constructing SimpleLocalUses...");  unitToUses=new HashMap<Unit,List<UnitValueBoxPair>>(body.getUnits().size() * 2 + 1,0.7f);  if (Options.v().time())   Timers.v().usePhase1Timer.end();  if (Options.v().time())   Timers.v().usePhase2Timer.start();  for (  Unit unit : body.getUnits()) {    for (    ValueBox useBox : unit.getUseBoxes()) {      Value v=useBox.getValue();      if (v instanceof Local) {        Local l=(Local)v;        UnitValueBoxPair newPair=new UnitValueBoxPair(unit,useBox);        List<Unit> defs=localDefs.getDefsOfAt(l,unit);        if (defs != null)         for (        Unit def : defs) {          List<UnitValueBoxPair> lst=unitToUses.get(def);          if (lst == null) {            unitToUses.put(def,lst=new ArrayList<UnitValueBoxPair>());          }          lst.add(newPair);        }      }    }  }  if (Options.v().time())   Timers.v().usePhase2Timer.end();  if (Options.v().time())   Timers.v().usesTimer.end();  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     finished SimpleLocalUses...");}  }
class C{  public Town(int id,int level,int points,Race race,Timestamp levelUpDate){  this.id=id;  this.level=level;  this.points=points;  this.levelUpDate=levelUpDate;  this.race=race;  this.persistentState=PersistentState.UPDATED;  this.spawnedNpcs=new ArrayList<Npc>();  spawnNewObjects();}  }
class C{  public boolean hasPeriods(){  List<DimensionalItemObject> dimOpts=getDimensionOptions(PERIOD_DIM_ID);  List<DimensionalItemObject> filterOpts=getFilterOptions(PERIOD_DIM_ID);  return !dimOpts.isEmpty() || !filterOpts.isEmpty();}  }
class C{  private void onDayTimeChange(){  WeatherService.getInstance().checkWeathersTime();}  }
class C{  @Override public void populateField(TimePeriod value){  if (value != null) {    populateDuration(start,value.getStart());    populateDuration(end,value.getEnd());    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  SingletonIterator(final int[] singleton){  this.singleton=singleton;}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  @Override public void properties(Properties properties){  throw new UnsupportedOperationException();}  }
class C{  public final void testOpenInputStream(){  FallbackFileController fFileController=new FallbackFileController(PATH);  try {    fFileController.openFallbackInputStream();  } catch (  DataFallbackException e) {    fail("The InputStream could not be opened");  }  assertNotNull(fFileController.getInput());}  }
class C{  private int findAndUncollapseNext(String regularExpression,boolean reverse,boolean all){  System.err.println("Find and uncollapse");  final Pattern pattern=Pattern.compile(regularExpression);  ProjectManager.getPreviouslySelectedNodeLabels().clear();  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);  if (classificationViewer == null)   return 0;  final PhyloTree tree=classificationViewer.getTree();  final Set<Node> matches=new HashSet<>();  for (  Integer fId : classificationViewer.getClassification().getName2IdMap().getIds()) {    String name=classificationViewer.getClassification().getName2IdMap().get(fId);    boolean ok=false;    if (name != null) {      Matcher matcher=pattern.matcher(name);      if (matcher.find())       ok=true; else {        matcher=pattern.matcher(fId.toString());        if (matcher.find())         ok=true;      }      if (ok) {        ProjectManager.getPreviouslySelectedNodeLabels().add(name);        matches.addAll(classificationViewer.getClassification().getFullTree().getNodes(fId));      }    }  }  Set<Integer> toSelect=new HashSet<>();  int count_uncollapsed=0;  int count_collapsed=0;  final NodeSet ancestors=new NodeSet(tree);  for (Node v=(reverse ? tree.getLastNode() : tree.getFirstNode()); v != null; v=(reverse ? v.getPrev() : v.getNext())) {    if (matches.contains(v)) {      boolean found=false;      Node firstCollapsedAncestor=getFirstCollapsedAncestor(v);      Node w=v;      while (w != null) {        ancestors.add(w);        Integer wFId=(Integer)w.getInfo();        if (firstCollapsedAncestor != null) {          classificationViewer.getCollapsedIds().remove(wFId);          count_uncollapsed++;          found=true;          for (Iterator it=w.getOutEdges(); it.hasNext(); ) {            Node u=((Edge)it.next()).getOpposite(w);            if (!ancestors.contains(u)) {              Integer uFId=(Integer)u.getInfo();              if (uFId != null && !classificationViewer.getCollapsedIds().contains(uFId)) {                classificationViewer.getCollapsedIds().add(uFId);                count_collapsed++;              }            }          }          if (w == firstCollapsedAncestor)           firstCollapsedAncestor=null;        }        if (w.getInDegree() != 0) {          w=w.getInEdges().next().getOpposite(w);        } else         w=null;      }      toSelect.add((Integer)v.getInfo());      if (!all && found)       break;    }  }  if (count_uncollapsed > 0 || count_collapsed > 0) {    boolean alreadyLocked=classificationViewer.isLocked();    if (!alreadyLocked)     classificationViewer.setLocked(true);    classificationViewer.updateTree();    classificationViewer.setSelectedIds(toSelect,true);    if (!alreadyLocked)     classificationViewer.setLocked(false);  }  return matches.size();}  }
class C{  @SuppressWarnings("unchecked") public JSONArray(JSONTokener x) throws JSONException {  this();  char c=x.nextClean();  char q;  if (c == '[') {    q=']';  } else   if (c == '(') {    q=')';  } else {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() == ']') {    return;  }  x.back();  for (; ; ) {    if (x.nextClean() == ',') {      x.back();      this.myArrayList.add(null);    } else {      x.back();      this.myArrayList.add(x.nextValue());    }    c=x.nextClean();switch (c) {case ';':case ',':      if (x.nextClean() == ']') {        return;      }    x.back();  break;case ']':case ')':if (q != c) {  throw x.syntaxError("Expected a '" + new Character(q) + "'");}return;default :throw x.syntaxError("Expected a ',' or ']'");}}}  }
class C{  public static IntellijLintClient forBatch(@NotNull Project project,@NotNull Map<Issue,Map<File,List<ProblemData>>> problemMap,@NotNull AnalysisScope scope,@NotNull List<Issue> issues){  return new BatchLintClient(project,problemMap,scope,issues);}  }
class C{  public static void initOrBuild(Project project){  if (hadInitFreeline(project)) {    build(project);  } else {    initFree(project);  }}  }
class C{  public boolean isCurrentSet(){  return current.get1() >= 0 && current.get1() < table.getGrid().getRowCount() && current.get2() >= 0 && current.get2() < table.getGrid().getColumnCount();}  }
class C{  public synchronized void addUniqueURL(URL url){  if (!classPath.contains(url)) {    super.addURL(url);    classPath.add(url);  }}  }
class C{  public boolean hasOption(String option){  return commandLine.hasOption(option);}  }
class C{  public UsersReportQuery(VkApiClient client,UserActor actor,int userId,UsersReportType type){  super(client,"users.report",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);  type(type);}  }
class C{  public EntityQuery where(Map<String,Object> fieldMap){  this.whereEntityCondition=EntityCondition.makeCondition(fieldMap);  return this;}  }
class C{  private static boolean checkParameters(Method method,Class[] types){  boolean result=true;  Class[] parameters=method.getParameterTypes();  if (parameters.length != types.length) {    result=false;  } else {    for (int i=0; i < parameters.length; ++i) {      Class parameter=parameters[i];      if (types[i] == null) {        if (parameter.isPrimitive()) {          result=false;          break;        }      } else       if (!parameter.isAssignableFrom(types[i]) && !parameter.isAssignableFrom(getPrimitiveType(types[i]))) {        result=false;        break;      }    }  }  return result;}  }
class C{  private Encoding fromExternalToWrapperEncoding(org.apache.carbondata.format.Encoding encoder){  if (null == encoder) {    return null;  }switch (encoder) {case DICTIONARY:    return Encoding.DICTIONARY;case DELTA:  return Encoding.DELTA;case RLE:return Encoding.RLE;case INVERTED_INDEX:return Encoding.INVERTED_INDEX;case BIT_PACKED:return Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return Encoding.DIRECT_DICTIONARY;default :return Encoding.DICTIONARY;}}  }
class C{  public void rebuild(){  rebuild(true);}  }
class C{  public static String mapChineseMarksToAnsi(String text){}  }
class C{  public <E extends Element>void registerLintRule(LintRule<E> rule){  lintRules.put(rule.getElementClass(),rule);  registerLintRuleName(rule.getName());}  }
class C{  public void showOnAnchor(@NonNull View anchor,@VerticalPosition int vertPos,@HorizontalPosition int horizPos){  showOnAnchor(anchor,vertPos,horizPos,0,0);}  }
class C{  public static <T>boolean contains(Iterator<T> iterator,T element){  if (iterator != null) {    while (iterator.hasNext()) {      T candidate=iterator.next();      if (ObjectUtils.nullSafeEquals(candidate,element))       return true;    }  }  return false;}  }
class C{  public GatewayResponse sendRequest(GatewayRequest request) throws Exception {  String serverurl=request.getUrl();  GatewayResponse response=null;  InputStream in=null;  HttpURLConnection connection=null;  try {    URL u=new URL(serverurl);    connection=(HttpURLConnection)(u.openConnection());    connection.setDoOutput(true);    connection.setDoInput(true);    connection.setRequestMethod("POST");    connection.setConnectTimeout(timeout * 1000);    OutputStream out=connection.getOutputStream();    Writer wout=new OutputStreamWriter(out);    wout.write(request.toXml());    wout.flush();    wout.close();    in=connection.getInputStream();    response=new GatewayResponse(in,request);    return response;  } catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    throw e;  } finally {    if (in != null)     in.close();    if (connection != null)     connection.disconnect();  }}  }
class C{  public void addForce(Force f){  if (f.isItemForce()) {    if (iforces.length == iflen) {      Force[] newf=new Force[iflen + 10];      System.arraycopy(iforces,0,newf,0,iforces.length);      iforces=newf;    }    iforces[iflen++]=f;  }  if (f.isSpringForce()) {    if (sforces.length == sflen) {      Force[] newf=new Force[sflen + 10];      System.arraycopy(sforces,0,newf,0,sforces.length);      sforces=newf;    }    sforces[sflen++]=f;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200314,skillname);}  }
class C{  public void drawScreen(int mouseX,int mouseY,float partialTicks){  super.drawScreen(mouseX,mouseY,partialTicks);  this.oldMouseX=(float)mouseX;  this.oldMouseY=(float)mouseY;}  }
class C{  public static Link valueOf(String val){  Matcher matcher=parse.matcher(val);  if (!matcher.matches())   throw new RuntimeException("Failed to parse link: " + val);  Link link=new Link();  link.href=matcher.group(1);  String[] props=matcher.group(2).split(";");  HashMap<String,String> map=new HashMap();  for (  String prop : props) {    String[] split=prop.split("=");    map.put(split[0].trim(),split[1].trim());  }  if (map.containsKey("rel")) {    link.relationship=map.get("rel");  }  if (map.containsKey("type")) {    link.type=map.get("type");  }  return link;}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_EPIC_SHOP_MATERIAL_DESC01(String value0){  return new SM_SYSTEM_MESSAGE(1400441,value0);}  }
class C{  public PipelineModel load(String pipelineModelFileName){  model=PipelineModel.load(pipelineModelFileName);  return model;}  }
class C{  public final Abstraction deriveNewAbstractionOnThrow(Stmt throwStmt){  assert !this.exceptionThrown;  Abstraction abs=clone();  abs.currentStmt=throwStmt;  abs.sourceContext=null;  abs.exceptionThrown=true;  return abs;}  }
class C{  public static boolean hasPermission(CordovaPlugin plugin,String permission){  try {    Method hasPermission=CordovaInterface.class.getDeclaredMethod("hasPermission",String.class);    return (Boolean)hasPermission.invoke(plugin.cordova,permission);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to check for permission " + permission);    return true;  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when checking permission " + permission,illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when checking permission " + permission,invocationTargetException);  }  return false;}  }
class C{  public FeatureVector createEdgeFeatureVector(int unitIndex,boolean start){  int edgeFeature=getFeatureIndex(EDGEFEATURE);  assert edgeFeature < numByteFeatures;  byte edge;  if (start)   edge=getFeatureValueAsByte(edgeFeature,EDGEFEATURE_START); else   edge=getFeatureValueAsByte(edgeFeature,EDGEFEATURE_END);  byte[] bytes=new byte[numByteFeatures];  short[] shorts=new short[numShortFeatures];  float[] floats=new float[numContinuousFeatures];  for (int i=0; i < numByteFeatures; i++) {    bytes[i]=getFeatureValueAsByte(i,NULLVALUE);  }  for (int i=0; i < numShortFeatures; i++) {    shorts[i]=getFeatureValueAsShort(numByteFeatures + i,NULLVALUE);  }  for (int i=0; i < numContinuousFeatures; i++) {    floats[i]=0;  }  bytes[edgeFeature]=edge;  return new FeatureVector(bytes,shorts,floats,unitIndex);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200286,skillname);}  }
class C{  public void mouseReleased(int par1,int par2){  if (this.enabled) {    this.lastMouseX=-1;    float range=this.maxValue - this.minValue;    this.sliderValue=(this.lastValue - this.minValue) / range;    this.dragging=false;  }  if (this.mouseDownStartValue != -1f && this.mouseDownStartValue != this.sliderValue) {    this.mouseDownStartValue=-1f;    Minecraft.getMinecraft().vrSettings.setOptionFloatValue(this.idFloat,this.lastValue);    if (_eventHandler != null) {      _eventHandler.event(GuiEventEx.ID_VALUE_CHANGED,this.idFloat);    }  }}  }
class C{  public static double absMax(double[] data){  return absMax(data,0,data.length);}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  private String createNode(String nodeName,String nodeValue){  return "<" + nodeName + ">"+ nodeValue+ "</"+ nodeName+ ">";}  }
class C{  public double optDouble(String key){  return optDouble(key,Double.NaN);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public void addEntityClass(Class<?> entityClass){  checkNotInitialized();  entityClasses.add(entityClass);}  }
class C{  protected void decompose(double[][] matrix){  for (int minor=0; minor < FastMath.min(matrix.length,matrix[0].length); minor++) {    performHouseholderReflection(minor,matrix);  }}  }
class C{  @Override public void syncStateChanged(){  boolean wasSyncInitialized=mIsBackendInitialized;  boolean wasPassphraseRequired=mIsPassphraseRequired;  mIsBackendInitialized=mProfileSyncService.isBackendInitialized();  mIsPassphraseRequired=mIsBackendInitialized && mProfileSyncService.isPassphraseRequiredForDecryption();  if (mIsBackendInitialized != wasSyncInitialized || mIsPassphraseRequired != wasPassphraseRequired) {    updateSyncStateFromSwitch();  }}  }
class C{  public StrokeAction(String group){  super(group);}  }
class C{  private AudioMapType generateDefaultXml(){  AudioMapType newAudioMap=new AudioMapType();  Integer ebuAudioTracks=getEBUAudioTracks();  final int[] currentAudioTrack={1};  channelsForTracks.forEach(null);  while (currentAudioTrack[0] <= ebuAudioTracks) {    EBUTrackType ebuTrack=new EBUTrackType();    ebuTrack.setNumber(currentAudioTrack[0]);    newAudioMap.getEBUTrack().add(ebuTrack);    currentAudioTrack[0]++;  }  return newAudioMap;}  }
class C{  public void handleOrganisationUnits(){  if (user != null && isOrganisationUnitMode(OrganisationUnitSelectionMode.ACCESSIBLE)) {    setOrganisationUnits(user.getTeiSearchOrganisationUnitsWithFallback());    setOrganisationUnitMode(OrganisationUnitSelectionMode.DESCENDANTS);  } else   if (isOrganisationUnitMode(CHILDREN)) {    Set<OrganisationUnit> organisationUnits=new HashSet<>(getOrganisationUnits());    for (    OrganisationUnit organisationUnit : getOrganisationUnits()) {      organisationUnits.addAll(organisationUnit.getChildren());    }    setOrganisationUnits(organisationUnits);    setOrganisationUnitMode(OrganisationUnitSelectionMode.SELECTED);  }}  }
class C{  public AdsGetOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getOfficeUsers",Utils.buildParametrizedType(List.class,Users.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  public boolean isRoot(double min,double max,Complex z){  if (isSequence(min,z.getReal(),max)) {    double tolerance=FastMath.max(getRelativeAccuracy() * z.abs(),getAbsoluteAccuracy());    return (FastMath.abs(z.getImaginary()) <= tolerance) || (z.abs() <= getFunctionValueAccuracy());  }  return false;}  }
class C{  public int computeContigs(int alignmentNumber,int minReads,double minCoverage,int minLength,boolean sortAlignmentByContigs,ProgressListener progress) throws CanceledException {  final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);  pathExtractor.apply(progress);  paths=pathExtractor.getPaths();  final ContigBuilder contigBuilder=new ContigBuilder(pathExtractor.getPaths(),pathExtractor.getSingletons(),readId2ContainedReads);  contigBuilder.apply(alignmentNumber,alignment,minReads,minCoverage,minLength,sortAlignmentByContigs,progress);  contigs=contigBuilder.getContigs();  return contigBuilder.getCountContigs();}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public void dropAllCache(){  cacheTypeToLRUCacheMap.clear();  cacheTypeToCacheMap.clear();}  }
class C{  private AudioOption audioOptionFromXmlOption(Object xmlOpt,String lang,boolean isMainAudio){  return (isOptionEmpty(xmlOpt)) ? generateAudioOption(xmlOpt,lang,isMainAudio) : createAudioOption(xmlOpt);}  }
class C{  public static float pxToDp(float px){  float densityDpi=Resources.getSystem().getDisplayMetrics().densityDpi;  return pxToDp(px,densityDpi);}  }
class C{  public WallReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"wall.reportComment",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  public static <T>Type<T> limitedValueOf(final TypeVariable<?> var,final Set<java.lang.reflect.Type> recursiveBounds){  if (var.getBounds().length > 0) {    Set<Type<?>> bounds=new HashSet<Type<?>>(var.getBounds().length);    for (int i=0, len=var.getBounds().length; i < len; ++i) {      bounds.add(limitedValueOf(var.getBounds()[i],recursiveBounds));    }    return (Type<T>)refineBounds(bounds);  } else {    return (Type<T>)TYPE_OF_OBJECT;  }}  }
class C{  public boolean isLazy(){  return mLazy;}  }
class C{  public FieldRefNode dot(SparkField field){  return fields == null ? null : fields.get(field);}  }
class C{  public boolean lessThan(final Dfp x){  if (field.getRadixDigits() != x.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,x,result);    return false;  }  if (isNaN() || x.isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,x,newInstance(getZero()));    return false;  }  return compare(this,x) < 0;}  }
class C{  public void removeKisk(Kisk kisk){  for (  int memberId : kisk.getCurrentMemberIds()) {    boundButOfflinePlayer.remove(memberId);  }  for (  Integer obj : ownerPlayer.keySet()) {    if (ownerPlayer.get(obj).equals(kisk)) {      ownerPlayer.remove(obj);      break;    }  }  for (  Player member : kisk.getCurrentMemberList()) {    member.setKisk(null);    PacketSendUtility.sendPacket(member,new SM_BIND_POINT_INFO(0,0f,0f,0f,member));    if (member.getLifeStats().isAlreadyDead()) {      member.getController().sendDie();    }  }}  }
class C{  public PacketSpecBuilder with(String id,DataType type){  if (types.containsKey(id))   throw new IllegalArgumentException(String.format("ID %s is already set to DataType %s",id,types.get(id)));  types.put(id,type);  return this;}  }
class C{  public LuceneSearcher(Directory dir){  this(dir,FIELD,false);}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    double[] array=new double[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Double.parseDouble(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public void type(char c){  if (Character.isAlphabetic(c)) {    typeAlphabetic(c);  } else   if (charShiftType.containsKey(c)) {    charShiftType.get(c).apply(controller);  } else   if (!typeSpecialChar(c)) {    typeUnknown(c);  }}  }
class C{  public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {  return this.do_modify_file(group_name,appender_filename,file_offset,buffer_length,new UploadBuff(file_buff,buffer_offset,buffer_length));}  }
class C{  private static int evaluate(String[] s1,String[] s2,int id){  int n=0;  for (int i=0; i < s1.length; i++) {    if (s1[i].equals(s2[i]))     n++;  }  return n;}  }
class C{  public ASBTalisman(SkillTree skill1,int skill1Points,int typeIndex){  this(skill1,skill1Points,typeIndex,false);}  }
class C{  public boolean hasDeviceFrame(@Nullable Device device){  DeviceData deviceData=getDeviceData(device);  if (deviceData == null) {    return false;  }  return !deviceData.getDescriptor().isStretchable();}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.KULCZYNSKI + ";");}  }
class C{  private static String format(double value){  return String.format("%s%s",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));}  }
class C{  public ConjugateGradient(final IterationManager manager,final double delta,final boolean check) throws NullArgumentException {  super(manager);  this.delta=delta;  this.check=check;}  }
class C{  public static String[] createJConsoleCommand(String jmxServiceUrl,String javaHomeDir,boolean usePlugin,boolean useParameters){  List<String> commandArray=new ArrayList<String>(5);  if (javaHomeDir == null) {    javaHomeDir=calculateJavaHome();  }  if (javaHomeDir != null) {    commandArray.add(javaHomeDir + File.separator + "bin"+ File.separator+ "jconsole");  } else {    commandArray.add("jconsole");  }  if (useParameters) {    String property=System.getProperty(SystemProperties.JCONSOLE_INTERVAL);    if (property != null) {      try {        int interval=Integer.parseInt(property);        commandArray.add("-interval=" + interval);        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,"Passed by system property [" + SystemProperties.JCONSOLE_INTERVAL + "] jconsole interval parameter:"+ interval);        }      } catch (      NumberFormatException nfe) {        if (_logger.isLoggable(Level.SEVERE)) {          _logger.severe("jconsole interval parameter passed by system property [" + SystemProperties.JCONSOLE_INTERVAL + "] is not a number, "+ "jconsole will be run with its default interval parameter");        }      }    }    if (usePlugin) {      if ((new File(JCONSOLE_PLUGIN_TOPTHREADS_FILE_PATH)).exists()) {        commandArray.add("-pluginpath");        commandArray.add(JCONSOLE_PLUGIN_TOPTHREADS_FILE_PATH);        if (jmxServiceUrl != null) {          commandArray.add(jmxServiceUrl);        }      } else {        if (javaHomeDir != null) {          commandArray.add("-pluginpath");          commandArray.add(javaHomeDir + File.separator + "demo"+ File.separator+ "management"+ File.separator+ "JTop"+ File.separator+ "JTop.jar");          if (jmxServiceUrl != null) {            commandArray.add(jmxServiceUrl);          }        }      }    } else {      if (jmxServiceUrl != null) {        commandArray.add(jmxServiceUrl);      }    }  }  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"all jconsole parameters:" + commandArray);  }  return commandArray.toArray(new String[commandArray.size()]);}  }
class C{  @Override public boolean isEntityDeclared(String name){  return (fUnparsedEntityChecking) ? super.isEntityDeclared(name) : true;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public ConvergenceException(Localizable pattern,Object... args){  super(pattern,args);}  }
class C{  public void onCameraClosed(CameraView cameraView){}  }
class C{  @Deployment(resources={"process/errorHandling.bpmn20.xml"}) public void testRollbackOnException() throws Exception {  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("routing",Routing.PROVOKE_ERROR);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("ErrorHandling",variables);  assertEquals("No roll-back to previous wait state",1,runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).activityId(PREVIOUS_WAIT_STATE).count());  assertEquals("Process instance advanced to next wait state",0,runtimeService.createExecutionQuery().processInstanceId(processInstance.getId()).activityId(NEXT_WAIT_STATE).count());}  }
class C{  public double mapTimeFromFirstToSecond(double time1){  for (  AlignedTimeStretch t : stretches) {    if (time1 >= t.firstStart && time1 <= t.firstStart + t.firstDuration) {      if (t.firstDuration == 0.) {        return t.secondStart;      } else {        return t.secondStart + (time1 - t.firstStart) / t.firstDuration * t.secondDuration;      }    }  }  return -1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_CRITICAL(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1210007,num1,value0);}  }
class C{  public void movePrevPosition(boolean smooth){  if (getRealAdapter() == null)   throw new IllegalStateException("You did not set a slider adapter");  mViewPager.setCurrentItem(mViewPager.getCurrentItem() - 1,smooth);}  }
class C{  public SecurityException(){  super();}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public NewsfeedGetBannedQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"newsfeed.getBanned",GetBannedExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  protected boolean dfsScanSubgraph(int s,int target){  int rep_s=rep_cg[s];  int rep_target=rep_cg[target];  if (rep_s == rep_target)   return true;  s=rep_s;  boolean reachable=false;  CgEdge p=call_graph[s];  while (p != null) {    int t=p.t;    int rep_t=rep_cg[t];    if (in_degree[rep_t] != 0 || (top_rank[rep_t] <= top_rank[rep_target] && dfsScanSubgraph(t,target) == true)) {      in_degree[rep_t]++;      reachable=true;    }    p=p.next;  }  return reachable;}  }
class C{  protected void validate(TestItem testItem,SaveLogRQ saveLogRQ){  BusinessRule.expect(testItem,Predicates.notNull()).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier("Logging to test item '{}' is not allowed. Probably you try to log for Launch type.",saveLogRQ.getTestItemId()));  BusinessRule.expect(testItem,Preconditions.IN_PROGRESS).verify(ErrorType.REPORTING_ITEM_ALREADY_FINISHED,testItem.getId());  BusinessRule.expect(testItem.hasChilds(),Predicates.equalTo(Boolean.FALSE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier("Logging to item '{}' with descendants is not permitted",testItem.getId()));  BusinessRule.expect(testItem.getStartTime().before(saveLogRQ.getLogTime()),Predicates.equalTo(Boolean.TRUE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier("Log has incorrect log time. Log time should be after parent item's start time."));  BusinessRule.expect(LogLevel.toLevelOrUnknown(saveLogRQ.getLevel()),Predicates.notNull()).verify(ErrorType.BAD_SAVE_LOG_REQUEST,Suppliers.formattedSupplier("Cannot convert '{}' to valid 'LogLevel'",saveLogRQ.getLevel()));}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (contentType != null) {    uriRequest.setHeader("Content-Type",contentType);  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));  if (context != null) {    List<WeakReference<Future<?>>> requestList=requestMap.get(context);    if (requestList == null) {      requestList=new LinkedList<WeakReference<Future<?>>>();      requestMap.put(context,requestList);    }    requestList.add(new WeakReference<Future<?>>(request));  }  return new RequestHandle(request);}  }
class C{  public static void runRenderAction(@NotNull final Runnable runnable) throws Exception {  runRenderAction(Executors.callable(runnable));}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public NotFileFilter(IOFileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The filter must not be null");  }  this.filter=filter;}  }
class C{  public Set<String> evaluate(Collection<String> input,int configVersion,DiagCollector diags,Location location){  Set<String> enabled=new TreeSet<>();  for (  Feature feature : featuresByName.values()) {    if (feature.isDefaultIn(configVersion)) {      feature.accumulate(enabled,false,configVersion,diags,location);    }  }  for (  String featureString : input) {    boolean remove=featureString.startsWith("~");    String featureName=remove ? featureString.substring(1) : featureString;    Feature feature=featuresByName.get(featureName);    if (feature == null) {      diags.addDiag(Diag.error(location,"No such feature %s supported for this element. " + "Supported features for this config version are: [%s].",featureName,Joiner.on(", ").join(getSupportedFeatureNames(configVersion))));    } else {      feature.accumulate(enabled,remove,configVersion,diags,location);    }  }  return enabled;}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String line=Basic.getFirstLineFromFile(new File(fileName));  return line != null && line.split("\t").length == 2 && line.endsWith(";");}  }
class C{  public AuthenticationPermission(Set local,Set peer,String actions){  this(parseName(local,peer),actions);}  }
class C{  private void showPrice(){  View priceBeforeView=findViewById(R.id.price_before_text);  View priceAfterText=findViewById(R.id.price_after_text);  View priceContainer=findViewById(R.id.price_container);  FlipAnimator animator=new FlipAnimator(priceBeforeView,priceAfterText,priceContainer.getWidth() / 2,priceContainer.getHeight() / 2);  animator.setDuration(800);  animator.setRotationDirection(FlipAnimator.DIRECTION_Y);  priceContainer.startAnimation(animator);}  }
class C{  protected void onDeleteSuccess(DragFlowLayout dfl,View child,Object data){}  }
class C{  public EventEntry(String event,String parameter,long duration){  super();  this.event=event;  this.parameter=parameter;  this.duration=duration;}  }
class C{  public boolean isMotorEnabled(){  return motorEnabled;}  }
class C{  @Override public void doStop() throws Exception {synchronized (executorMonitor) {    if (scavengerFuture != null) {      scavengerFuture.cancel(true);      if (--totalNumberOfScavangers == 0) {        if (Log.isDebugEnabled())         Log.debug("Stopping scavenger");        executorService.shutdown();      }    }  }  space=null;  if (urlSpaceConfigurer != null) {    urlSpaceConfigurer.destroy();  }  super.doStop();}  }
class C{  private static boolean filter(StackTraceElement e){  if (e.getLineNumber() == 1) {    return false;  }  String cn=e.getClassName();  if (cn.contains("java.lang.Thread")) {    return false;  }  if (cn.contains("junit.runner") || cn.contains("org.junit.internal") || cn.contains("junit4.runner")) {    return false;  }  if (cn.contains("java.lang.reflect") || cn.contains("sun.reflect")) {    return false;  }  if (cn.contains(".RxJavaAssemblyException")) {    return false;  }  if (cn.contains("OnAssembly") || cn.contains("RxJavaAssemblyTracking") || cn.contains("RxJavaPlugins")) {    return false;  }  return true;}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public void validateSortingColumnName(Class<?> type,String sortingColumnName){  BusinessRule.expect(criteriaMapFactory.getCriteriaMap(type).getCriteriaHolderUnchecked(sortingColumnName).isPresent(),Predicates.equalTo(Boolean.TRUE)).verify(ErrorType.BAD_SAVE_USER_FILTER_REQUEST,Suppliers.formattedSupplier("Column for sorting with name '{}' is unknown.",sortingColumnName));}  }
class C{  private Object invokeTrustEquivalenceMethod(Object proxy,Method method,Object[] args){  String name=method.getName();  if (name.equals("checkTrustEquivalence")) {    Object obj=args[0];    boolean b=proxy == obj || (obj != null && sameProxyClass(proxy,obj) && checkTrustEquivalence(Proxy.getInvocationHandler(obj)));    return Boolean.valueOf(b);  } else {    throw new AssertionError(method);  }}  }
class C{  public static void logPreferenceState(){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPreferenceState",getPreferenceValue(),PREFERENCE_HISTOGRAM_BOUNDARY);}  }
class C{  private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {  CarbonDictionaryMetadataReader columnMetadataReaderImpl=getDictionaryMetadataReader();  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList=null;  try {    dictionaryMetaChunkList=columnMetadataReaderImpl.read();  }  finally {    columnMetadataReaderImpl.close();  }  return dictionaryMetaChunkList;}  }
class C{  public PhotosGetAllQueryWithExtended skipHidden(Boolean value){  return unsafeParam("skip_hidden",value);}  }
class C{  public void updateExtent(FeatureTypeConstraint ftc){  if (ftc == null) {    return;  }  if (!extentList.isEmpty()) {    Extent[] extentArray=new Extent[extentList.size()];    int index=0;    for (    Extent extent : extentList) {      Extent newExtent=styleFactory.createExtent(extent.getName(),extent.getValue());      extentArray[index]=newExtent;      index++;    }    ftc.setExtents(extentArray);  }}  }
class C{  public void addStatus(final ConfigConstants.Status pStatus){  if (pStatus.severity > status.severity) {    status=pStatus;  }}  }
class C{  private boolean checkNoAcquiredQuests(QuestStateList qsl){  if (noacquired != null && noacquired.size() > 0) {    for (    Integer questId : noacquired) {      QuestState qs=qsl.getQuestState(questId);      if (qs != null && (qs.getStatus() == QuestStatus.START || qs.getStatus() == QuestStatus.REWARD)) {        return false;      }    }  }  return true;}  }
class C{  protected void onBindInsertionViewHolder(RecyclerView.ViewHolder holder,int position){  updateInsertClickListener(position,holder.itemView);}  }
class C{  public void ssl(SSLSocketFactory sslSocketFactory) throws IOException {  String host=connection.getInetAddress().getHostName();  int port=connection.getPort();  connection=sslSocketFactory.createSocket(connection,host,port,true);  InputStream inStream=connection.getInputStream();  OutputStream outStream=connection.getOutputStream();  reader=new NVTASCIIReader(inStream,charsetName);  writer=new NVTASCIIWriter(outStream,charsetName);}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public InlinePropertiesConfigurationProvider(){  super(PropertiesConfiguration.class);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_PASSWORD_TOO_LONG(String value0){  return new SM_SYSTEM_MESSAGE(1300867,value0);}  }
class C{  public static Bucket createCompleteBucket(Experiment experiment){  String description="A sample bucket.";  String payload="<p>Some <span style=\"font-weight: bold;\">heavy<span> payload.</p>";  String state=Constants.BUCKET_STATE_OPEN;  return createBucket(experiment).setDescription(description).setPayload(payload).setState(state);}  }
class C{  private static boolean overflowInParse(long current,int digit){  return overflowInParse(current,digit,10);}  }
class C{  public VideoGetCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public static UInteger valueOf(int value){  return valueOfUnchecked(value & MAX_VALUE);}  }
class C{  public static void resetContext(){  contexts.set(null);}  }
class C{  private boolean isCacheable(){  SimplifiedIntervalList missingIntervals=getPartialIntervalsWithDefault(getResponseContext());  SimplifiedIntervalList volatileIntervals=getVolatileIntervalsWithDefault(getResponseContext());  return missingIntervals.isEmpty() && volatileIntervals.isEmpty();}  }
class C{  public AccountSetSilenceModeQuery time(Integer value){  return unsafeParam("time",value);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  ContainsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new ContainsExtended();  } else {    filter=new ContainsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  private boolean isKineticSkill(){switch (getSkillId()) {case 2440:case 2441:case 2442:case 2443:case 2444:case 2445:case 2446:case 2447:case 2448:case 2449:case 2579:case 2580:case 2581:    return true;}return false;}  }
class C{  private void openThriftWriter(String dictionaryFile) throws IOException {  dictionaryThriftWriter=new ThriftWriter(dictionaryFile,true);  dictionaryThriftWriter.open();}  }
class C{  public boolean contains(int memberObjId){  return legionMemberById.containsKey(memberObjId);}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public void testUntypedListField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  Object value=getPropertyValue(full,"untypedListField");  assertTrue(value instanceof List);  assertFalse(((List)value).isEmpty());  assertEquals(1L,((List)value).get(0));  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public RegularExpressionFilter withPattern(Pattern pattern){  return new RegularExpressionFilter(getDimension(),pattern);}  }
class C{  public synchronized void begin(E selectedObject){  this.active=true;  this.selectedObject=selectedObject;}  }
class C{  public static boolean simpleCrossing(S2Point a,S2Point b,S2Point c,S2Point d){  S2Point ab=S2Point.crossProd(a,b);  S2Point cd=S2Point.crossProd(c,d);  double acb=-ab.dotProd(c);  double cbd=-cd.dotProd(b);  double bda=ab.dotProd(d);  double dac=cd.dotProd(a);  return (acb * cbd > 0) && (cbd * bda > 0) && (bda * dac > 0);}  }
class C{  public static <E>boolean isNotEmpty(Collection<E> c){  return (c != null) && !c.isEmpty();}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public static List<Article> mockArticles(){  final List<Article> articles=new ArrayList<>(100);  for (int i=0; i < 1; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"Today",R.drawable.header1,R.color.darker_darker_gray));  }  for (int i=0; i < 2; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"Yesterday",R.drawable.header2,R.color.darker_darker_blue));  }  for (int i=0; i < 10; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"19 August",R.drawable.header1,R.color.darker_darker_gray));  }  for (int i=0; i < 8; i++) {    articles.add(new Article("Lorem ipsum " + articles.size(),"18 August",R.drawable.header1,R.color.darker_darker_gray));  }  return articles;}  }
class C{  public NewsfeedGetQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void invertProbability(){  normalizeToSum();  double dRemaining=1.0;  Iterator<TKeyType> iIter=hDistro.keySet().iterator();  while (iIter.hasNext()) {    TKeyType oNext=iIter.next();    setValue(oNext,dRemaining - getValue(oNext));    dRemaining+=getValue(oNext);  }}  }
class C{  public boolean hasErrors(){  return hasErrors;}  }
class C{  public int compare(Viewer viewer,Object o1,Object o2){  ILogEntry e1=adaptToLogEntry(o1);  ILogEntry e2=adaptToLogEntry(o2);  int result=0;  if (e1 == null || e2 == null) {    result=super.compare(viewer,o1,o2);  } else {    int[] columnSortOrder=SORT_ORDERS_BY_COLUMN[columnNumber];    ;    for (int i=0; i < columnSortOrder.length; ++i) {      result=compareColumnValue(columnSortOrder[i],e1,e2);      if (result != 0)       break;    }  }  if (reversed)   result=-result;  return result;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public void insertGroup(Group group,int position) throws ObjectAlreadyHasException, IndexOutOfBoundsException {  assertNotContains(group);  groups.add(position,group.getName());}  }
class C{  public ShortTermLogSpectrumAnalyser(DoubleDataSource signal,int fftSize,Window window,int frameShift,int samplingRate){  super(signal,fftSize,window,frameShift,samplingRate);}  }
class C{  public MessagesGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public Set<String> vertexMatchPatternLabels(){  return labels;}  }
class C{  public RuleName ruleName(){  String labelStr=toString();  int colonLocation=labelStr.lastIndexOf(':');  int ruleNameStart=colonLocation + 1;  String ruleNameStr=labelStr.substring(ruleNameStart);  return RuleName.create(ruleNameStr);}  }
class C{  private void subscribeToHeartbeatTopic() throws JMSException {  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageConsumer consumer=session.createConsumer(heartbeatTopic);  consumer.setMessageListener(heartbeatListenerWrapper);}  }
class C{  public NotStrictlyPositiveException(Localizable specific,Number value){  super(specific,value,INTEGER_ZERO,false);}  }
class C{  public static boolean isNotEmpty(CharSequence str){  return !isEmpty(str);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  ChartViewer chartViewer=(ChartViewer)getViewer();  LabelsJList list=chartViewer.getActiveLabelsJList();  StringBuilder buf=new StringBuilder();  int count=list.getSelectedLabels().size();  for (  String label : list.getSelectedLabels()) {    buf.append(label);    if (count > 1)     buf.append("\n");  }  if (buf.toString().length() > 0) {    StringSelection selection=new StringSelection(buf.toString());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection,null);  }}  }
class C{  private final void swap(int i,int j){  short tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public boolean isString(String name){  Param p=type.params.get(name);  assert p != null : "name \"" + name + "\" is not a known parameter";  Object v=params.get(name);  return v instanceof String;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201012,skilltarget,skillcaster,skillname);}  }
class C{  public void init(){synchronized (this) {    if (items == null) {      items=new TreeMap<ItemSlot,ItemTemplate>();      for (      ItemTemplate item : v.items) {        ItemSlot[] itemSlots=ItemSlot.getSlotsFor(item.getItemSlot());        for (        ItemSlot itemSlot : itemSlots) {          if (items.get(itemSlot) == null) {            items.put(itemSlot,item);            mask|=itemSlot.getSlotIdMask();            break;          }        }      }    }    v=null;  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  @Px private int calculateIndicatorDotTop(){  final int top;  final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;switch (verticalGravity) {default :case Gravity.CENTER_VERTICAL:    top=(getHeight() - getPaddingTop() - getPaddingBottom()) / 2 - getDotRadius();  break;case Gravity.TOP:top=getPaddingTop();break;case Gravity.BOTTOM:top=getHeight() - getPaddingBottom() - 2 * getDotRadius();break;}return top;}  }
class C{  private static Integer fetchDruidResponseTimeOut(String timeOutSysProp){  try {    return SYSTEM_CONFIG.getIntProperty(timeOutSysProp,DRUID_REQUEST_TIMEOUT_DEFAULT);  } catch (  SystemConfigException e) {    LOG.error(e.getMessage(),e);    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  private int scanMethodForSourcesSinks(final ISourceSinkManager sourcesSinks,InfoflowProblem forwardProblem,SootMethod m){  int sinkCount=0;  if (m.hasActiveBody()) {    final String className=m.getDeclaringClass().getName();    if (ignoreFlowsInSystemPackages && SystemClassHandler.isClassInSystemPackage(className))     return sinkCount;    PatchingChain<Unit> units=m.getActiveBody().getUnits();    for (    Unit u : units) {      Stmt s=(Stmt)u;      if (sourcesSinks.getSourceInfo(s,iCfg) != null) {        forwardProblem.addInitialSeeds(u,Collections.singleton(forwardProblem.zeroValue()));        logger.debug("Source found: {}",u);      }      if (sourcesSinks.isSink(s,iCfg,null)) {        logger.debug("Sink found: {}",u);        sinkCount++;      }    }  }  return sinkCount;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          Cookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public boolean removeCursor(MapCursor cursor){  return cursors.remove(cursor);}  }
class C{  @Override public String substringData(int offset,int count) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  synchronized private void writeEndOfStreamMarker() throws IOException {  LogRecord endOfStreamRec=new LogRecord(DistributedLogConstants.MAX_TXID,"endOfStream".getBytes(UTF_8));  endOfStreamRec.setEndOfStream();  writeInternal(endOfStreamRec);}  }
class C{  public static void writeRJava(String outputDirectory,String packageName,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> rTypeResourceMap,boolean isFinal){  String outputFullFilename=new File(outputDirectory).getAbsolutePath() + Constant.Symbol.SLASH_LEFT + (packageName.replace(Constant.Symbol.DOT,Constant.Symbol.SLASH_LEFT) + Constant.Symbol.SLASH_LEFT + "R"+ Constant.Symbol.DOT+ Constant.File.JAVA);  FileUtil.createFile(outputFullFilename);  PrintWriter writer=null;  try {    writer=new PrintWriter(new FileOutputStream(outputFullFilename));    writer.format("package %s;\n\n",packageName);    writer.println("public final class R {\n");    for (    RType rType : rTypeResourceMap.keySet()) {      writer.format("  public static final class %s {\n",rType.toString());      for (      com.tencent.tinker.build.aapt.RDotTxtEntry rDotTxtEntry : rTypeResourceMap.get(rType)) {        writer.format("    public static%s%s %s=%s;\n",isFinal ? " final " : " ",rDotTxtEntry.idType,rDotTxtEntry.name,rDotTxtEntry.idValue);      }      writer.println("  }\n");    }    writer.println("}");  } catch (  Exception e) {    throw new AaptUtilException(e);  } finally {    if (writer != null) {      writer.flush();      writer.close();    }  }}  }
class C{  public void remoteResourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){  for (  ISVNListener listener : repositoryListeners) {    listener.remoteResourceCopied(source,destination);  }}  }
class C{  public void activate(){  mSensorManager.registerListener(this,mSensor,SensorManager.SENSOR_DELAY_UI);  mActive=true;}  }
class C{  boolean isLocalProducer(String prodKey){  if (m_producers != null) {    int prodKeyHashCode=prodKey.hashCode();    for (int i=0; i < m_producers.size(); i++) {      GSMessageProducerImpl messageProducer=m_producers.get(i);      if (messageProducer != null) {        return messageProducer.getProducerID().hashCode() == prodKeyHashCode;      }    }  }  return false;}  }
class C{  public boolean isSetGlobalContext(){  return this.globalContext != null;}  }
class C{  public summaryGaussNormEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress,boolean bLowMem){  Do=sDo;  OutputSemaphore=sOutputSemaphore;  WordMin=iWordMin;  WordMax=iWordMax;  WordDist=iWordDist;  CharMin=iCharMin;  CharMax=iCharMax;  CharDist=iCharDist;  Threads=iThreads;  OutFile=sOutFile;  SummaryDir=sSummaryDir;  ModelDir=sModelDir;  Silent=bSilent;  WeightMethod=iWeightMethod;  Progress=bProgress;  LowMem=bLowMem;}  }
class C{  public static String byteDesc(long len){  double val;  String ending;  if (len < 1024 * 1024) {    val=(1.0 * len) / 1024;    ending=" KB";  } else   if (len < 1024 * 1024 * 1024) {    val=(1.0 * len) / (1024 * 1024);    ending=" MB";  } else   if (len < 1024L * 1024 * 1024* 1024) {    val=(1.0 * len) / (1024 * 1024 * 1024);    ending=" GB";  } else   if (len < 1024L * 1024 * 1024* 1024* 1024) {    val=(1.0 * len) / (1024L * 1024 * 1024* 1024);    ending=" TB";  } else {    val=(1.0 * len) / (1024L * 1024 * 1024* 1024* 1024);    ending=" PB";  }  return limitDecimalTo2(val) + ending;}  }
class C{  public boolean isForProject(String projectDir){  return myProjectDirectory == null || myProjectDirectory.equals(projectDir);}  }
class C{  @Override public void write(char[] chr,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(chr,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public Covariance(){  super();  covarianceMatrix=null;  n=0;}  }
class C{  public Set<String> scan(){  initPatterns();  List<String> roots=packagePatterns.getRoots();  InternalScanner scanner=new InternalScanner(getClassLoader());  Set<String> exports=scanner.findInPackages(new PatternTest(),roots.toArray(new String[roots.size()]));  return exports;}  }
class C{  public static int convertPxToSp(int pxSize){  return Math.round((float)pxSize * getDisplayDensity4Fonts());}  }
class C{  public SimpleMetric(MetricName name,String value){  this(name,MetricValue.fromStrValue(requireNonNull(value)));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (permissions == null) {    throw new InvalidObjectException("list cannot be null");  }  if (!permissions.getClass().equals(ArrayList.class)) {    permissions=new ArrayList(permissions);  }  for (int i=permissions.size(); --i >= 0; ) {    if (!(permissions.get(i) instanceof AuthenticationPermission)) {      throw new InvalidObjectException("element must be an AuthenticationPermission");    }  }}  }
class C{  static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class getClass()")) {    java_lang_Object_getClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object clone()")) {    java_lang_Object_clone(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public double sum(){  return buckets_.stream().mapToDouble(null).sum();}  }
class C{  private static int nextPowerOfTwo(final int i){  return Integer.highestOneBit(i) << 1;}  }
class C{  public static Float hgToHpa(float hg){  return (float)(hg * 33.864);}  }
class C{  public final boolean canSetString(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetString());}  }
class C{  @ObjectiveCName("unlisten:") public void unlisten(String pattern){  UtilListener listener=listeners.get(pattern);  if (listener != null) {    listener.destroy();    listeners.remove(pattern);  } else {    client.onError(Topic.RECORD,Event.NOT_LISTENING,pattern);  }}  }
class C{  public EditResultImplementor(EditResultModel model,EditResultView view){  this.model=model;  this.view=view;}  }
class C{  public static Dfp cos(Dfp a){  final Dfp pi=a.getField().getPi();  final Dfp zero=a.getField().getZero();  boolean neg=false;  Dfp x=a.remainder(pi.multiply(2));  if (x.lessThan(zero)) {    x=x.negate();  }  if (x.greaterThan(pi.divide(2))) {    x=pi.subtract(x);    neg=true;  }  Dfp y;  if (x.lessThan(pi.divide(4))) {    Dfp c[]=new Dfp[2];    c[0]=x;    c[1]=zero;    y=cosInternal(c);  } else {    final Dfp c[]=new Dfp[2];    final Dfp[] piSplit=a.getField().getPiSplit();    c[0]=piSplit[0].divide(2).subtract(x);    c[1]=piSplit[1].divide(2);    y=sinInternal(c);  }  if (neg) {    y=y.negate();  }  return a.newInstance(y);}  }
class C{  public BigFractionFormat(final NumberFormat format){  super(format);}  }
class C{  private Pair<JsonNode,LoggingContext> mergeResponses(List<Pair<JsonNode,LoggingContext>> responses){  JsonNodeFactory factory=new JsonNodeFactory(true);  ArrayNode result=factory.arrayNode();  RequestLog.restore(logCtx);  for (  Pair<JsonNode,LoggingContext> entry : responses) {    for (    JsonNode jsonNode : entry.getKey()) {      result.add(jsonNode);    }    RequestLog.accumulate(entry.getValue().getRequestLog());  }  RequestLog updatedCtx=RequestLog.dump();  return new Pair<>(result,new LoggingContext(updatedCtx));}  }
class C{  void restoreInitialState(){  fConfigUpdated=true;  fComponents.put(ENTITY_RESOLVER,null);  fComponents.put(ERROR_HANDLER,null);  fComponents.put(SECURITY_MANAGER,fInitSecurityManager);  setLocale(null);  fComponents.put(LOCALE,null);  if (!fInitFeatures.isEmpty()) {    Iterator iter=fInitFeatures.entrySet().iterator();    while (iter.hasNext()) {      Map.Entry entry=(Map.Entry)iter.next();      String name=(String)entry.getKey();      boolean value=((Boolean)entry.getValue()).booleanValue();      super.setFeature(name,value);    }    fInitFeatures.clear();  }  if (!fInitProperties.isEmpty()) {    Iterator iter=fInitProperties.entrySet().iterator();    while (iter.hasNext()) {      Map.Entry entry=(Map.Entry)iter.next();      String name=(String)entry.getKey();      Object value=entry.getValue();      super.setProperty(name,value);    }    fInitProperties.clear();  }}  }
class C{  private void replaceTop(int topOfStack){  stack[stackSize - 1]=topOfStack;}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {}  }
class C{  public static void cols(Zmat A,int c1,int c2) throws JampackException {  A.getProperties();  if (c1 < A.bx || c1 > A.cx || c2 < A.bx || c2 > A.cx) {    throw new JampackException("Inconsistent row indices");  }  A.dirty=true;  c1=c1 - A.bx;  c2=c2 - A.bx;  for (int i=0; i < A.nc; i++) {    double t=A.re[i][c1];    A.re[i][c1]=A.re[i][c2];    A.re[i][c2]=t;    t=A.im[i][c1];    A.im[i][c1]=A.im[i][c2];    A.im[i][c2]=t;  }}  }
class C{  public static <T>PollableFutureTask<T> create(final PollableTask pollableTask,final ProceedingJoinPoint pjp){  PollableCallable pollableCallable=new PollableCallable(pollableTask,pjp);  PollableFutureTask pollableFutureTask=new PollableFutureTask(pollableCallable,pollableTask);  pollableCallable.setPollableFutureTask(pollableFutureTask);  return pollableFutureTask;}  }
class C{  @RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<RoleDTO>> findAll(@RequestBody PageRequestByExample<RoleDTO> prbe) throws URISyntaxException {  PageResponse<RoleDTO> pageResponse=roleDTOService.findAll(prbe);  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  @Override public void write(char[] chr) throws IOException {  try {    int len=0;    if (chr != null) {      len=chr.length;    }    beforeWrite(len);    out.write(chr);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private static boolean trusted(Set set,TrustVerifier.Context ctx) throws RemoteException {  return trusted(set.iterator(),ctx);}  }
class C{  public DiscoveryProtocolException(String message,Throwable cause){  super(message);  initCause(cause);}  }
class C{  public CompleteLinkClusterer(){}  }
class C{  void clearBridgeSecret(){  expectedBridgeSecret=-1;}  }
class C{  public int hashCode(){  return Constraint.hash(constraints);}  }
class C{  public UniformRandomGenerator(RandomGenerator generator){  this.generator=generator;}  }
class C{  public synchronized ChangeReport onCommandTagUpdate(final CommandTagUpdate commandTagUpdateChange){  ChangeReport changeReport=new ChangeReport(commandTagUpdateChange);  long equipmentId=commandTagUpdateChange.getEquipmentId();  long commandTagId=commandTagUpdateChange.getCommandTagId();  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  if (!configuration.getEquipmentConfigurations().containsKey(equipmentId)) {    for (    EquipmentConfiguration equipmentConfiguration : configuration.getEquipmentConfigurations().values()) {      if (equipmentConfiguration.getSubEquipmentConfigurations().containsKey(equipmentId)) {        equipmentId=equipmentConfiguration.getId();      }    }  }  Map<Long,SourceCommandTag> sourceCommandTags=getSourceCommandTags(equipmentId);  if (sourceCommandTags == null) {    changeReport.appendError("Equipment does not exists: " + equipmentId);    return changeReport;  }  if (sourceCommandTags.containsKey(commandTagId)) {    try {      SourceCommandTag sourceCommandTag=sourceCommandTags.get(commandTagId);      SourceCommandTag oldSourceCommandTag=sourceCommandTag.clone();synchronized (sourceCommandTag) {        configurationUpdater.updateCommandTag(commandTagUpdateChange,sourceCommandTag);        try {          sourceCommandTag.validate();        } catch (        ConfigurationException e) {          sourceCommandTags.put(commandTagId,oldSourceCommandTag);          changeReport.appendError("Error validating command tag");          changeReport.appendError(StackTraceHelper.getStackTrace(e));          return changeReport;        }      }      changeReport.appendInfo("Core Command Tag update successfully applied.");      ICommandTagChanger commandTagChanger=commandTagChangers.get(equipmentId);      commandTagChanger.onUpdateCommandTag(sourceCommandTag,oldSourceCommandTag,changeReport);      if (changeReport.getState().equals(CHANGE_STATE.SUCCESS)) {        List<ICoreCommandTagChanger> coreChangers=coreCommandTagChangers.get(equipmentId);        if (coreChangers != null) {          for (          ICoreCommandTagChanger coreCommandTagChanger : coreChangers) {            coreCommandTagChanger.onUpdateCommandTag(sourceCommandTag,oldSourceCommandTag,changeReport);          }        }        changeReport.appendInfo("Change fully applied.");      } else {        sourceCommandTags.put(commandTagId,oldSourceCommandTag);      }    } catch (    Exception e) {      changeReport.appendError("Error while applying command tag changes: " + e.getMessage());    }  } else {    changeReport.appendError("Command Tag " + commandTagId + " to update was not found.");  }  return changeReport;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  String result=JOptionPane.showInputDialog((getViewer() != null ? getViewer().getFrame() : null),"Paste MeganServer file URL:");  if (result != null) {    if (!result.endsWith(";"))     result+=";";    String[] tokens=result.split(";");    final StringBuilder buf=new StringBuilder();    int count=0;    for (    String token : tokens) {      final String fileName=token.trim();      if (fileName.length() > 0)       buf.append("open file='").append(fileName).append("';");      count++;    }    if (count > 10) {      if (JOptionPane.showConfirmDialog(getViewer() != null ? getViewer().getFrame() : null,"Do you really want to open " + count + " new files?","Confirm",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)       return;    }    execute(buf.toString());  }}  }
class C{  public static HelpNode fromXml(File file) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(new FileReader(file)));}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){  this.sessionFactory=sessionFactory;  return this;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("extract samples=");  final List<String> toExtract=new ArrayList<>();  while (!np.peekMatchIgnoreCase(";")) {    String name=np.getWordRespectCase();    toExtract.add(name);  }  np.matchIgnoreCase(";");  Director newDir=Director.newProject();  newDir.getMainViewer().setDoReInduce(true);  newDir.getMainViewer().setDoReset(true);  Document newDocument=newDir.getDocument();  if (toExtract.size() > 0) {    newDir.notifyLockInput();    try {      String fileName=Basic.replaceFileSuffix(((Director)getDir()).getDocument().getMeganFile().getFileName(),"-Extracted.megan");      newDocument.getMeganFile().setFile(fileName,MeganFile.Type.MEGAN_SUMMARY_FILE);      newDocument.extractSamples(toExtract,((Director)getDir()).getDocument());      newDocument.setNumberReads(newDocument.getDataTable().getTotalReads());      newDir.getMainViewer().getFrame().setVisible(true);      System.err.println("Number of reads: " + newDocument.getNumberOfReads());      newDocument.processReadHits();      newDocument.setTopPercent(100);      newDocument.setMinScore(0);      newDocument.setMaxExpected(10000);      newDocument.setMinSupport(1);      newDocument.setDirty(true);      newDocument.getActiveViewers().addAll(newDocument.getDataTable().getClassification2Class2Counts().keySet());      if (newDocument.getNumberOfSamples() > 1) {        newDir.getMainViewer().getNodeDrawer().setStyle(ProgramProperties.get(MeganProperties.COMPARISON_STYLE,""),NodeDrawer.Style.PieChart);      }      NotificationsInSwing.showInformation(String.format("Extracted %,d reads to file '%s'",+newDocument.getNumberOfReads(),fileName));    }  finally {      newDir.notifyUnlockInput();    }    newDir.execute("update reprocess=true reinduce=true;",newDir.getMainViewer().getCommandManager());  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof DelegationAbsoluteTime)) {    return false;  }  DelegationAbsoluteTime dc=(DelegationAbsoluteTime)obj;  return (minStart == dc.minStart && maxStart == dc.maxStart && minStop == dc.minStop && maxStop == dc.maxStop);}  }
class C{  @Override public WriteFuture write(Object message){  return null;}  }
class C{  public boolean matchesCurrentAvailableDevices(@NotNull Collection<IDevice> devices){  if (myDevicesAvailableAtLaunch.size() != devices.size()) {    return false;  }  for (  IDevice d : devices) {    if (!myDevicesAvailableAtLaunch.contains(d.getSerialNumber())) {      return false;    }  }  return true;}  }
class C{  public int[] unCompress(byte[] compInput){  try {    return Snappy.uncompressIntArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){  return null;}  }
class C{  public void moveViewToY(float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,0f,yValue + valsInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  public void registerExtraGeneratedSourceFolder(@NotNull File folderPath){  myExtraGeneratedSourceFolders.add(folderPath);}  }
class C{  public Vertex split(final Line splitLine){  final Vertex splitVertex=new Vertex(line.intersection(splitLine));  splitVertex.bindWith(splitLine);  final Edge startHalf=new Edge(start,splitVertex,line);  final Edge endHalf=new Edge(splitVertex,end,line);  startHalf.node=node;  endHalf.node=node;  return splitVertex;}  }
class C{  public boolean isEmpty(){  return !isDefined();}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_PET_FULL(String value0){  return new SM_SYSTEM_MESSAGE(1400615,value0);}  }
class C{  public RiddersSolver(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  void commit(){  if (_mods.isEmpty() && _dirtyList.isEmpty()) {    return;  }  UpdateRequest update=_dao.prepareUpdate(_name);  List<UUID> uuidsToRecycle=Lists.newArrayList();  for (  SegmentMod mod : _mods) {    mod.persist(update);  }  for (  Runnable extra : _extras) {    extra.run();  }  for (  Segment seg : _dirtyList) {    persist(seg,update,uuidsToRecycle);  }  checkWritesAllowed();  update.execute();  _uuidsToRecycle.addAll(uuidsToRecycle);  _dirtyList.clear();  _mods.clear();}  }
class C{  public void beginOperation(ISVNClientAdapter aSvnClient){  lock.acquire();  this.svnClient=aSvnClient;  aSvnClient.addNotifyListener(this);  if (operationNotifyListener != null) {    aSvnClient.setProgressListener(operationNotifyListener);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public TLongHash(TLongHashingStrategy strategy){  super();  this._hashingStrategy=strategy;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201046,num0,skilltarget,skillname);}  }
class C{  public void fitScreen(Matrix outputMatrix){  mMinScaleX=1f;  mMinScaleY=1f;  outputMatrix.set(mMatrixTouch);  float[] vals=valsBufferForFitScreen;  for (int i=0; i < 9; i++) {    vals[i]=0;  }  outputMatrix.getValues(vals);  vals[Matrix.MTRANS_X]=0f;  vals[Matrix.MTRANS_Y]=0f;  vals[Matrix.MSCALE_X]=1f;  vals[Matrix.MSCALE_Y]=1f;  outputMatrix.setValues(vals);}  }
class C{  public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,ColumnIdentifier columnIdentifier,DataType dataType){  this(carbonTableIdentifier,columnIdentifier);  this.dataType=dataType;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public final Edge locateDirectedEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=null;  try {    vHead=locateVertexInGraph(gGraph,vHead);    if (vHead == null)     return null;    vTail=locateVertexInGraph(gGraph,vTail);    if (vTail == null)     return null;    TreeMap hOutVertices=(TreeMap)Cache.get(vHead.getLabel());    List lEdges;    if (hOutVertices == null) {      lMisses++;      lEdges=getOutgoingEdgesUncached(gGraph,vHead);      if (TimeCnt == Long.MAX_VALUE) {        resetCache();      }      hOutVertices=new TreeMap();      for (      Object elem : lEdges) {        hOutVertices.put(((Edge)elem).getVertexB().getLabel(),elem);        if (((Edge)elem).getVertexB().getLabel().equals(vTail.getLabel()))         eRes=(Edge)elem;      }      Cache.put(vHead.getLabel(),hOutVertices);      ElementAccessTime.put(vHead.getLabel(),++TimeCnt);    } else {      lHits++;      ElementAccessTime.put(vHead.getLabel(),++TimeCnt);    }    CacheAccess.put(TimeCnt,vHead.getLabel());    if (Cache.size() > CacheMaxSize) {      while (true) {        String sVertexLabel=(String)CacheAccess.get(CacheAccess.firstKey());        if ((Long)ElementAccessTime.get(sVertexLabel) > (Long)CacheAccess.firstKey()) {          CacheAccess.remove(CacheAccess.firstKey());        } else {          Cache.remove(sVertexLabel);          CacheAccess.remove(CacheAccess.firstKey());          ElementAccessTime.remove(sVertexLabel);          break;        }      }    } else {      return (Edge)(hOutVertices.get(vTail.getLabel()));    }    return eRes;  } catch (  NullPointerException e) {    return null;  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override public void endAttlist(Augmentations augmentations) throws XNIException {}  }
class C{  private void initFxLater(JFXPanel jfxPanel){  if (!initialized) {synchronized (lock) {      if (!initialized) {        try {          final BorderPane rootNode=new BorderPane();          jfxPanel.setScene(new Scene(rootNode,600,600));          final Node main=createMainNode();          rootNode.setCenter(main);          BorderPane.setMargin(main,new Insets(3,3,3,3));          String css=NotificationsInSwing.getControlStylesheetURL();          if (css != null)           jfxPanel.getScene().getStylesheets().add(css);          css=getControlStylesheetURL();          if (css != null) {            jfxPanel.getScene().getStylesheets().add(css);            spreadsheetView.getStylesheets().add(css);          }          columnContextMenu=new PopupMenuFX(GUIConfiguration.getAttributeColumnHeaderPopupConfiguration(),samplesViewer.getCommandManager());          rowContextMenu=new PopupMenuFX(GUIConfiguration.getSampleRowHeaderPopupConfiguration(),samplesViewer.getCommandManager());          originalRowContextMenuLength=rowContextMenu.getItems().size();        }  finally {          initialized=true;        }      }    }  }}  }
class C{  public static void reportDisplayInformation(Activity activity){  DisplayMetrics metrics=new DisplayMetrics();  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);  int displayWidth=metrics.widthPixels;  int displayHeight=metrics.heightPixels;  String density="unknown";switch (metrics.densityDpi) {case DisplayMetrics.DENSITY_LOW:    density="Low";  break;case DisplayMetrics.DENSITY_MEDIUM:density="Medium";break;case DisplayMetrics.DENSITY_HIGH:density="High";break;}Log.i(TAG,"Display is " + displayWidth + "x"+ displayHeight+ ", Density: "+ density);}  }
class C{  public synchronized static void destroy(){  if (isInitialized()) {    Map<String,ProcessEngine> engines=new HashMap<String,ProcessEngine>(processEngines);    processEngines=new HashMap<String,ProcessEngine>();    for (    String processEngineName : engines.keySet()) {      ProcessEngine processEngine=engines.get(processEngineName);      try {        processEngine.close();      } catch (      Exception e) {        log.error("exception while closing {}",(processEngineName == null ? "the default process engine" : "process engine " + processEngineName),e);      }    }    processEngineInfosByName.clear();    processEngineInfosByResourceUrl.clear();    processEngineInfos.clear();    setInitialized(false);  }}  }
class C{  public void disabledTestNonReversibleTransform(){}  }
class C{  public final void propagate(){  ofcg=pag.getOnFlyCallGraph();  new TopoSorter(pag,false).sort();  for (  Object object : pag.loadSources()) {    final FieldRefNode fr=(FieldRefNode)object;    fieldToBase.put(fr.getField(),fr.getBase());  }  for (  Object object : pag.storeInvSources()) {    final FieldRefNode fr=(FieldRefNode)object;    fieldToBase.put(fr.getField(),fr.getBase());  }  for (  Object object : pag.allocSources()) {    handleAllocNode((AllocNode)object);  }  boolean verbose=pag.getOpts().verbose();  do {    if (verbose) {      G.v().out.println("Worklist has " + varNodeWorkList.size() + " nodes.");    }    aliasWorkList=new HashSet<VarNode>();    while (!varNodeWorkList.isEmpty()) {      VarNode src=varNodeWorkList.iterator().next();      varNodeWorkList.remove(src);      aliasWorkList.add(src);      handleVarNode(src);    }    if (verbose) {      G.v().out.println("Now handling field references");    }    for (    VarNode src : aliasWorkList) {      for (      FieldRefNode srcFr : src.getAllFieldRefs()) {        SparkField field=srcFr.getField();        for (        VarNode dst : fieldToBase.get(field)) {          if (src.getP2Set().hasNonEmptyIntersection(dst.getP2Set())) {            FieldRefNode dstFr=dst.dot(field);            aliasEdges.put(srcFr,dstFr);            aliasEdges.put(dstFr,srcFr);            fieldRefWorkList.add(srcFr);            fieldRefWorkList.add(dstFr);            if (makeP2Set(dstFr).addAll(srcFr.getP2Set().getOldSet(),null)) {              outFieldRefWorkList.add(dstFr);            }            if (makeP2Set(srcFr).addAll(dstFr.getP2Set().getOldSet(),null)) {              outFieldRefWorkList.add(srcFr);            }          }        }      }    }    for (    FieldRefNode src : fieldRefWorkList) {      for (      FieldRefNode dst : aliasEdges.get(src)) {        if (makeP2Set(dst).addAll(src.getP2Set().getNewSet(),null)) {          outFieldRefWorkList.add(dst);        }      }      src.getP2Set().flushNew();    }    fieldRefWorkList=new HashSet<FieldRefNode>();    for (    FieldRefNode src : outFieldRefWorkList) {      PointsToSetInternal set=getP2Set(src).getNewSet();      if (set.isEmpty())       continue;      Node[] targets=pag.loadLookup(src);      for (      Node element0 : targets) {        VarNode target=(VarNode)element0;        if (target.makeP2Set().addAll(set,null)) {          addToWorklist(target);        }      }      getP2Set(src).flushNew();    }    outFieldRefWorkList=new HashSet<FieldRefNode>();  } while (!varNodeWorkList.isEmpty());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SimpleSet lookupVariable(String name){  ASTNode$State state=state();  SimpleSet lookupVariable_String_value=getParent().Define_SimpleSet_lookupVariable(this,null,name);  return lookupVariable_String_value;}  }
class C{  public SelectBuilder<K,V> select(String name){  return new SelectBuilder<>(new Pattern<>(name));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201071,num0,skillname);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  getSupportActionBar().setDisplayHomeAsUpEnabled(true);  Intent intent=getIntent();  url=intent.getStringExtra("url");  name=intent.getStringExtra("name");  photoView=(PhotoView)findViewById(R.id.img);  photoView.enable();}  }
class C{  public INSECTFileRawDB(String sPrefix,String sBaseDir){  super(sPrefix,sBaseDir);}  }
class C{  public Builder title(String title){  this.title=title;  return this;}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  static public LookupLocator[] toLookupLocators(String lookupLocatorURLs){  String locatorURL=null;  ArrayList locatorList=new ArrayList();  if (lookupLocatorURLs != null && lookupLocatorURLs.length() > 0) {    StringTokenizer st=new StringTokenizer(lookupLocatorURLs,",");    while (st.hasMoreTokens()) {      try {        locatorURL=st.nextToken().trim();        if (locatorURL.length() == 0 || locatorURL.equals("\"\"")) {          continue;        }        LookupLocator lookupLocator=new LookupLocator("jini://" + locatorURL);        locatorList.add(lookupLocator);      } catch (      MalformedURLException ex) {        if (initlogger.isLoggable(Level.WARNING)) {          initlogger.log(Level.WARNING,"Failed to parse list of LookupLocator URLs: " + locatorURL + " - "+ ex.toString(),ex);        }      }    }  }  if (initlogger.isLoggable(Level.FINE)) {    initlogger.log(Level.FINE,locatorList.toString());  }  return (LookupLocator[])locatorList.toArray(new LookupLocator[0]);}  }
class C{  private void removeSubEquipments(Collection<Long> subEquipmentIds,ConfigurationElementReport equipmentReport){  for (  Long subEquipmentId : new ArrayList<Long>(subEquipmentIds)) {    ConfigurationElementReport subEquipmentReport=new ConfigurationElementReport(Action.REMOVE,Entity.SUBEQUIPMENT,subEquipmentId);    equipmentReport.addSubReport(subEquipmentReport);    try {      subEquipmentConfigHandler.removeSubEquipment(subEquipmentId,subEquipmentReport);    } catch (    Exception ex) {      subEquipmentReport.setFailure("Exception caught - aborting removal of subequipment " + subEquipmentId,ex);      throw new RuntimeException("Aborting reconfiguration as unable to remove subequipment.",ex);    }  }}  }
class C{  public void refreshComplate(){  mOnRefreshCompleteListenter.refreshComplete();  isLoadingData=false;  isLoadingMoreData=false;  mHeaderView.getLayoutParams().height=0;  getAdapter().notifyDataSetChanged();}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public void addRuleToTag(final Long tagId,final Long ruleId){  LOGGER.trace("Adding rule " + ruleId + " reference from Tag "+ tagId);  tagCache.acquireWriteLockOnKey(tagId);  try {    T tag=tagCache.get(tagId);    if (!tag.getRuleIds().contains(ruleId)) {      commonTagFacade.addDependentRuleToTag(tag,ruleId);      configurableDAO.updateConfig(tag);      tagCache.putQuiet(tag);    }  }  finally {    tagCache.releaseWriteLockOnKey(tagId);  }}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result;  if (mTargetParentPath.startsWith(mSrcPath)) {    return new RemoteOperationResult(ResultCode.INVALID_COPY_INTO_DESCENDANT);  }  mFile=getStorageManager().getFileByPath(mSrcPath);  if (mFile == null) {    return new RemoteOperationResult(ResultCode.FILE_NOT_FOUND);  }  String targetPath=mTargetParentPath + mFile.getFileName();  if (mFile.isFolder()) {    targetPath+=OCFile.PATH_SEPARATOR;  }  CopyRemoteFileOperation operation=new CopyRemoteFileOperation(mSrcPath,targetPath,false);  result=operation.execute(client);  if (result.isSuccess()) {    getStorageManager().copyLocalFile(mFile,targetPath);  }  return result;}  }
class C{  public static void generateSampleXml(String path){  File file=new File(path);  JAXBContext jaxbContext;  try {    jaxbContext=JAXBContext.newInstance(AudioMapType.class);    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    AudioMapType audioMap=new AudioMapType();    audioMap.setMainAudio(new MainAudioType());    audioMap.getAlternativeAudio().add(new AlternativeAudioType());    MainAudioType mainAudio=audioMap.getMainAudio();    mainAudio.setLocale("en-US");    mainAudio.setName("main-audio.mov");    mainAudio.setOption3(new Option3Type());    Option3Type opt3=mainAudio.getOption3();    opt3.setTrack1(new Option3Type.Track1());    opt3.setTrack2(new Option3Type.Track2());    Option3Type.Track1 t1=opt3.getTrack1();    t1.setL(new ChannelType());    t1.setR(new ChannelType());    t1.setC(new ChannelType());    t1.setLFE(new ChannelType());    t1.setLs(new ChannelType());    t1.setRs(new ChannelType());    ChannelType l=t1.getL();    l.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    l.setCPLVirtualTrackChannel(1);    ChannelType r=t1.getR();    r.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    r.setCPLVirtualTrackChannel(2);    ChannelType c=t1.getC();    c.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    c.setCPLVirtualTrackChannel(3);    ChannelType lfe=t1.getLFE();    lfe.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    lfe.setCPLVirtualTrackChannel(4);    ChannelType ls=t1.getLs();    ls.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    ls.setCPLVirtualTrackChannel(5);    ChannelType rs=t1.getRs();    rs.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    rs.setCPLVirtualTrackChannel(6);    Option3Type.Track2 t2=opt3.getTrack2();    t2.setLt(new ChannelType());    t2.setRt(new ChannelType());    ChannelType lt=t2.getLt();    lt.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    lt.setCPLVirtualTrackChannel(1);    ChannelType rt=t2.getRt();    rt.setCPLVirtualTrackId(GEN_MAIN_SEQ_UUID);    rt.setCPLVirtualTrackChannel(2);    AlternativeAudioType alt=audioMap.getAlternativeAudio().get(0);    alt.setLocale("de");    alt.setName("audio_DE.mov");    alt.setOption6(new Option6Type());    Option6Type opt6=alt.getOption6();    opt6.setTrack1(new Option6Type.Track1());    Option6Type.Track1 t61=opt6.getTrack1();    t61.setL(new ChannelType());    t61.setR(new ChannelType());    ChannelType l61=t61.getL();    l61.setCPLVirtualTrackId(GEN_ADDITIONAL_SEQ_UUID);    l61.setCPLVirtualTrackChannel(1);    ChannelType r61=t61.getR();    r61.setCPLVirtualTrackId(GEN_ADDITIONAL_SEQ_UUID);    r61.setCPLVirtualTrackChannel(2);    JAXBElement<AudioMapType> audioMapJaxb=new ObjectFactory().createAudiomap(audioMap);    jaxbMarshaller.marshal(audioMapJaxb,file);  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  public ByteByteInt(String string){  if (string != null && string.length() >= 2) {    try {      byte[] bytes=string.substring(0,2).getBytes("UTF-8");      byte1=bytes[0];      byte2=bytes[1];    } catch (    UnsupportedEncodingException ex) {    }    int a=0;    int b=0;    for (int pos=2; pos < string.length(); pos++) {      if (a == 0) {        if (Character.isDigit(string.charAt(pos)))         a=pos;      } else {        if (!Character.isDigit(string.charAt(pos))) {          b=pos;          break;        }      }    }    if (a > 0) {      if (b == 0)       b=string.length();      try {        value=Integer.parseInt(string.substring(a,b));      } catch (      NumberFormatException ex) {      }    }  }}  }
class C{  public void login(String username,String password) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {  login(username,password,null);}  }
class C{  public ReadTakeEntrySpaceOperationRequest(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200388,skillname);}  }
class C{  public void upload(File zippedFile){  throw new UnsupportedOperationException();}  }
class C{  private boolean promptForQuickDiffAnnotate(){  final IPreferenceStore store=SVNUIPlugin.getPlugin().getPreferenceStore();  final String option=store.getString(ISVNUIConstants.PREF_USE_QUICKDIFFANNOTATE);  if (option.equals(MessageDialogWithToggle.ALWAYS))   return true; else   if (option.equals(MessageDialogWithToggle.NEVER))   return false;  final MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(Utils.getShell(null),Policy.bind("AnnotateOperation_QDAnnotateTitle"),Policy.bind("AnnotateOperation_QDAnnotateMessage"),Policy.bind("AnnotateOperation_4"),false,store,ISVNUIConstants.PREF_USE_QUICKDIFFANNOTATE);  final int result=dialog.getReturnCode();switch (result) {case IDialogConstants.YES_ID:case IDialogConstants.OK_ID:    return true;}return false;}  }
class C{  public static void backup(String filename){  File f=new File(filename);  f.getParentFile().mkdirs();  Connection c=null;  ResultSet r1=null;  try {    ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(f));    zip.putNextEntry(new ZipEntry("db"));    PrintStream out=new PrintStream(zip);    c=getConnection();    DatabaseMetaData m1=c.getMetaData();    r1=m1.getTables(null,null,null,new String[]{"TABLE"});    while (r1.next()) {      _backup(out,c,r1.getString("TABLE_NAME"));    }    zip.closeEntry();    zip.close();  } catch (  Exception e) {    log.error(e.getMessage(),e);  } finally {    close(r1,c);  }}  }
class C{  private void resizePanelToState(PanelState state,StateChangeReason reason){  cancelHeightAnimation();  final float height=getPanelHeightFromState(state);  setPanelHeight(height);  setPanelState(state,reason);  requestUpdate();}  }
class C{  public void waitForConsistentState(){  if (isReplicated()) {    try {      if (shouldFlushPendingReplication())       getReplicationNode().getAdmin().flushPendingReplication(_clusterPolicy.getReplicationPolicy().getAsyncChannelShutdownTimeout(),TimeUnit.MILLISECONDS);    } catch (    RuntimeException e) {      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,"Flush pending replication raised an exception:",e);      throw e;    }  }}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public int days(){  return this.days;}  }
class C{  @Override public void removeRow(int idx){  RepositorySourceProvider userSourceProvider=getUserSourceProvider();  assert userSourceProvider != null;  userSourceProvider.removeSource(getRowValue(idx).mySource);  refreshUi();}  }
class C{  public static Map<String,Object> runPullEntitySync(DispatchContext dctx,Map<String,Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String entitySyncId=(String)context.get("entitySyncId");  String remotePullAndReportEntitySyncDataName=(String)context.get("remotePullAndReportEntitySyncDataName");  Debug.logInfo("Running runPullEntitySync for entitySyncId=" + context.get("entitySyncId"),module);  boolean gotMoreData=true;  Timestamp startDate=null;  Long toCreateInserted=null;  Long toCreateUpdated=null;  Long toCreateNotUpdated=null;  Long toStoreInserted=null;  Long toStoreUpdated=null;  Long toStoreNotUpdated=null;  Long toRemoveDeleted=null;  Long toRemoveAlreadyDeleted=null;  while (gotMoreData) {    gotMoreData=false;    Map<String,Object> remoteCallContext=new HashMap<String,Object>();    remoteCallContext.put("entitySyncId",entitySyncId);    remoteCallContext.put("delegatorName",context.get("remoteDelegatorName"));    remoteCallContext.put("userLogin",context.get("userLogin"));    remoteCallContext.put("startDate",startDate);    remoteCallContext.put("toCreateInserted",toCreateInserted);    remoteCallContext.put("toCreateUpdated",toCreateUpdated);    remoteCallContext.put("toCreateNotUpdated",toCreateNotUpdated);    remoteCallContext.put("toStoreInserted",toStoreInserted);    remoteCallContext.put("toStoreUpdated",toStoreUpdated);    remoteCallContext.put("toStoreNotUpdated",toStoreNotUpdated);    remoteCallContext.put("toRemoveDeleted",toRemoveDeleted);    remoteCallContext.put("toRemoveAlreadyDeleted",toRemoveAlreadyDeleted);    try {      Map<String,Object> result=dispatcher.runSync(remotePullAndReportEntitySyncDataName,remoteCallContext);      if (ServiceUtil.isError(result)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale),null,null,result);      }      startDate=(Timestamp)result.get("startDate");      try {        if (startDate != null && (!UtilValidate.isEmpty(result.get("valuesToCreate")) || !UtilValidate.isEmpty(result.get("valuesToStore")) || !UtilValidate.isEmpty(result.get("keysToRemove")))) {          gotMoreData=true;          List<GenericValue> valuesToCreate=checkList(result.get("valuesToCreate"),GenericValue.class);          if (valuesToCreate == null)           valuesToCreate=Collections.emptyList();          List<GenericValue> valuesToStore=checkList(result.get("valuesToStore"),GenericValue.class);          if (valuesToStore == null)           valuesToStore=Collections.emptyList();          List<GenericEntity> keysToRemove=checkList(result.get("keysToRemove"),GenericEntity.class);          if (keysToRemove == null)           keysToRemove=Collections.emptyList();          Map<String,Object> callLocalStoreContext=UtilMisc.toMap("entitySyncId",entitySyncId,"delegatorName",context.get("localDelegatorName"),"valuesToCreate",valuesToCreate,"valuesToStore",valuesToStore,"keysToRemove",keysToRemove);          callLocalStoreContext.put("userLogin",context.get("userLogin"));          Map<String,Object> storeResult=dispatcher.runSync("storeEntitySyncData",callLocalStoreContext);          if (ServiceUtil.isError(storeResult)) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingService",locale),null,null,storeResult);          }          toCreateInserted=(Long)storeResult.get("toCreateInserted");          toCreateUpdated=(Long)storeResult.get("toCreateUpdated");          toCreateNotUpdated=(Long)storeResult.get("toCreateNotUpdated");          toStoreInserted=(Long)storeResult.get("toStoreInserted");          toStoreUpdated=(Long)storeResult.get("toStoreUpdated");          toStoreNotUpdated=(Long)storeResult.get("toStoreNotUpdated");          toRemoveDeleted=(Long)storeResult.get("toRemoveDeleted");          toRemoveAlreadyDeleted=(Long)storeResult.get("toRemoveAlreadyDeleted");        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error calling service to store data locally: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingService",locale) + e.toString());      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Exception calling remote pull and report EntitySync service with name: " + remotePullAndReportEntitySyncDataName + "; "+ e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale) + e.toString());    }catch (    Throwable t) {      Debug.logError(t,"Error calling remote pull and report EntitySync service with name: " + remotePullAndReportEntitySyncDataName + "; "+ t.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale) + t.toString());    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static double readSwappedDouble(byte[] data,int offset){  return Double.longBitsToDouble(readSwappedLong(data,offset));}  }
class C{  @Override public boolean checkCondition(){  return !league.hasMember(invitedAlliance.getObjectId());}  }
class C{  private void clearCurrentNotifications(){  mbeanNotifications.clearCurrentNotifications();  if (mbeanNotifications.isListenerRegistered(mbean)) {    clearNotifications0();  } else {    clearNotifications();  }}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.startGeneralEntity(name,identifier,encoding,augs);  }}  }
class C{  @Override public void onCancel(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  cg.getFileOperationsHelper().removeFiles(mTargetFiles,true);}  }
class C{  public PhotosSaveMarketPhotoQuery cropHash(String value){  return unsafeParam("crop_hash",value);}  }
class C{  public static byte[] decompressForZlib(byte[] bytesToDecompress){  byte[] returnValues=null;  Inflater inflater=new Inflater();  int numberOfBytesToDecompress=bytesToDecompress.length;  inflater.setInput(bytesToDecompress,0,numberOfBytesToDecompress);  int bufferSizeInBytes=numberOfBytesToDecompress;  int numberOfBytesDecompressedSoFar=0;  List<Byte> bytesDecompressedSoFar=new ArrayList<Byte>();  try {    while (inflater.needsInput() == false) {      byte[] bytesDecompressedBuffer=new byte[bufferSizeInBytes];      int numberOfBytesDecompressedThisTime=inflater.inflate(bytesDecompressedBuffer);      numberOfBytesDecompressedSoFar+=numberOfBytesDecompressedThisTime;      for (int b=0; b < numberOfBytesDecompressedThisTime; b++) {        bytesDecompressedSoFar.add(bytesDecompressedBuffer[b]);      }    }    returnValues=new byte[bytesDecompressedSoFar.size()];    for (int b=0; b < returnValues.length; b++) {      returnValues[b]=(byte)(bytesDecompressedSoFar.get(b));    }  } catch (  DataFormatException dfe) {    dfe.printStackTrace();  }  inflater.end();  return returnValues;}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {  XMLEntityDecl entityDecl=new XMLEntityDecl();  boolean isPE=name.startsWith("%");  boolean inExternal=(fReadingExternalDTD || fPEDepth > 0);  entityDecl.setValues(name,identifier.getPublicId(),identifier.getLiteralSystemId(),identifier.getBaseSystemId(),notation,null,isPE,inExternal);  int entityIndex=getEntityDeclIndex(name);  if (entityIndex == -1) {    entityIndex=createEntityDecl();    setEntityDecl(entityIndex,entityDecl);  }}  }
class C{  public FriendsEditListQuery deleteUserIds(Integer... value){  return unsafeParam("delete_user_ids",value);}  }
class C{  public int failInProgressUploads(UploadResult fail){  Log_OC.v(TAG,"Updating state of any killed upload");  ContentValues cv=new ContentValues();  cv.put(ProviderTableMeta.UPLOADS_STATUS,UploadStatus.UPLOAD_FAILED.getValue());  cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT,fail != null ? fail.getValue() : UploadResult.UNKNOWN.getValue());  cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP,Calendar.getInstance().getTimeInMillis());  int result=getDB().update(ProviderTableMeta.CONTENT_URI_UPLOADS,cv,ProviderTableMeta.UPLOADS_STATUS + "=?",new String[]{String.valueOf(UploadStatus.UPLOAD_IN_PROGRESS.getValue())});  if (result == 0) {    Log_OC.v(TAG,"No upload was killed");  } else {    Log_OC.w(TAG,Integer.toString(result) + " uploads where abruptly interrupted");    notifyObserversNow();  }  return result;}  }
class C{  protected void wrapContent(){  mWidget.setMinWidth(32);  mWidget.setMinHeight(32);  int tw=mWidget.getMinWidth();  int th=mWidget.getMinHeight();  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  mWidget.setBaselineDistance(0);}  }
class C{  public boolean isStacked(){  return mVals != null;}  }
class C{  public void addPublication(final Publisher publisher,final String topic){  this.publications.put(publisher,topic);}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  private Map<String,Object> generateUserEditedPropertiesMap(){  HashMap<String,Object> map=new HashMap<>();  map.put(AvdWizardUtils.DEVICE_DEFINITION_KEY,myDevice);  map.put(AvdWizardUtils.SYSTEM_IMAGE_KEY,mySystemImage);  map.put(AvdWizardUtils.AVD_ID_KEY,myAvdId.get());  map.put(AvdWizardUtils.VM_HEAP_STORAGE_KEY,myVmHeapStorage.get());  map.put(AvdWizardUtils.DISPLAY_NAME_KEY,myAvdDisplayName.get());  map.put(AvdWizardUtils.DEFAULT_ORIENTATION_KEY,mySelectedAvdOrientation.get());  map.put(AvdWizardUtils.RAM_STORAGE_KEY,myAvdDeviceData.ramStorage().get());  map.put(AvdWizardUtils.IS_IN_EDIT_MODE_KEY,myIsInEditMode.get());  map.put(AvdWizardUtils.HAS_HARDWARE_KEYBOARD_KEY,myEnableHardwareKeyboard.get());  map.put(HardwareProperties.HW_INITIAL_ORIENTATION,mySelectedAvdOrientation.get().getShortDisplayValue());  map.put(AvdWizardUtils.USE_HOST_GPU_KEY,myUseHostGpu.get());  map.put(AvdWizardUtils.DEVICE_FRAME_KEY,myHasDeviceFrame.get());  map.put(AvdWizardUtils.HOST_GPU_MODE_KEY,myHostGpuMode.getValue());  if (myUseQemu2.get()) {    if (myCpuCoreCount.get().isPresent()) {      map.put(AvdWizardUtils.CPU_CORES_KEY,myCpuCoreCount.getValue());    } else {      map.put(AvdWizardUtils.CPU_CORES_KEY,1);    }  } else {    map.remove(AvdWizardUtils.CPU_CORES_KEY);  }  if (myOriginalSdCard != null) {    map.put(AvdWizardUtils.SD_CARD_STORAGE_KEY,myOriginalSdCard);  }  if (!Strings.isNullOrEmpty(existingSdLocation.get())) {    map.put(AvdWizardUtils.EXISTING_SD_LOCATION,existingSdLocation.get());  }  if (!Strings.isNullOrEmpty(myExternalSdCardLocation.get())) {    map.put(AvdWizardUtils.DISPLAY_SD_LOCATION_KEY,myExternalSdCardLocation.get());  }  map.put(AvdWizardUtils.DISPLAY_USE_EXTERNAL_SD_KEY,myUseExternalSdCard.get());  map.put(AvdWizardUtils.INTERNAL_STORAGE_KEY,myInternalStorage.get());  map.put(AvdWizardUtils.NETWORK_SPEED_KEY,mySelectedNetworkSpeed.get().getAsParameter());  map.put(AvdWizardUtils.NETWORK_LATENCY_KEY,mySelectedNetworkLatency.get().getAsParameter());  map.put(AvdWizardUtils.FRONT_CAMERA_KEY,mySelectedAvdFrontCamera.get().getAsParameter());  map.put(AvdWizardUtils.BACK_CAMERA_KEY,mySelectedAvdBackCamera.get().getAsParameter());  if (myAvdDeviceData.customSkinFile().get().isPresent()) {    map.put(AvdWizardUtils.CUSTOM_SKIN_FILE_KEY,myAvdDeviceData.customSkinFile().getValue());  }  if (myBackupSkinFile.get().isPresent()) {    map.put(AvdWizardUtils.BACKUP_SKIN_FILE_KEY,myBackupSkinFile.getValue());  }  if (mySdCardStorage.get().isPresent()) {    map.put(AvdWizardUtils.DISPLAY_SD_SIZE_KEY,mySdCardStorage.getValue());  }  return map;}  }
class C{  void xLock(Object obj,long txNum){  Object anchor=getAnchor(obj);  txWaitMap.put(txNum,anchor);synchronized (anchor) {    Lockers lks=prepareLockers(obj);    if (hasXLock(lks,txNum))     return;    try {      long timestamp=System.currentTimeMillis();      while (!xLockable(lks,txNum) && !waitingTooLong(timestamp)) {        avoidDeadlock(lks,txNum,X_LOCK);        lks.requestSet.add(txNum);        anchor.wait(MAX_TIME);        lks.requestSet.remove(txNum);      }      if (!xLockable(lks,txNum))       throw new LockAbortException();      lks.xLocker=txNum;      getObjectSet(txNum).add(obj);    } catch (    InterruptedException e) {      throw new LockAbortException();    }  }  txWaitMap.remove(txNum);}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public BoundedInputStream(InputStream in,long size){  this.max=size;  this.in=in;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200470,skilltarget);}  }
class C{  public String toUrl(){  StringBuilder url=new StringBuilder().append(_protocol).append(SEPARATOR_1).append(_hostname).append(SEPARATOR_2).append(_port).append(SEPARATOR_3).append(_pid).append(SEPARATOR_4).append(_objectId).append(SEPARATOR_5).append(_objectClassLoaderId).append(SEPARATOR_6).append(_lrmiRuntimeId).append(SEPARATOR_7).append(_serviceDetails).append(SEPARATOR_8);  return url.toString();}  }
class C{  public Configuration(Sentence sentence){  this(sentence,new Stack<Integer>(),new LinkedList<Integer>(),new ArrayList<Dependency>());}  }
class C{  protected void copyReaders(Catalog newCatalog){  Vector mapArr=new Vector(readerMap.size());  for (int count=0; count < readerMap.size(); count++) {    mapArr.add(null);  }  Enumeration en=readerMap.keys();  while (en.hasMoreElements()) {    String mimeType=(String)en.nextElement();    Integer pos=(Integer)readerMap.get(mimeType);    mapArr.set(pos.intValue(),mimeType);  }  for (int count=0; count < mapArr.size(); count++) {    String mimeType=(String)mapArr.get(count);    Integer pos=(Integer)readerMap.get(mimeType);    newCatalog.addReader(mimeType,(CatalogReader)readerArr.get(pos.intValue()));  }}  }
class C{  @Override public void onUpdate(){  ItemStack stack=this.getDataManager().get(getITEM()).orNull();  if (stack != null && stack.getItem() != null && stack.getItem().onEntityItemUpdate(this))   return;  if (this.getEntityItem() == null) {    this.setDead();  } else {    if (!this.worldObj.isRemote) {      this.setFlag(6,this.isGlowing());    }    this.onEntityUpdate();    if (getPickupDelay() > 0 && getPickupDelay() != 32767) {      setPickupDelay(getPickupDelay() - 1);    }    this.prevPosX=this.posX;    this.prevPosY=this.posY;    this.prevPosZ=this.posZ;    if (!this.func_189652_ae()) {      this.motionY-=0.03999999910593033D;    }    updateBuoy();    this.noClip=this.pushOutOfBlocks(this.posX,(this.getEntityBoundingBox().minY + this.getEntityBoundingBox().maxY) / 2.0D,this.posZ);    this.moveEntity(this.motionX,this.motionY,this.motionZ);    boolean flag=(int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;    if (flag || this.ticksExisted % 25 == 0) {      if (this.worldObj.getBlockState(new BlockPos(this)).getMaterial() == Material.LAVA) {        this.motionY=0.20000000298023224D;        this.motionX=(double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);        this.motionZ=(double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);        this.playSound(SoundEvents.ENTITY_GENERIC_BURN,0.4F,2.0F + this.rand.nextFloat() * 0.4F);      }      if (!this.worldObj.isRemote) {        superSearchForOtherItemsNearby();      }    }    float f=0.98F;    if (this.onGround) {      f=this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX),MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1,MathHelper.floor_double(this.posZ))).getBlock().slipperiness * 0.98F;    }    this.motionX*=(double)f;    this.motionY*=0.9800000190734863D;    this.motionZ*=(double)f;    if (this.onGround) {      this.motionY*=-0.5D;    }    if (this.getAge0() != -32768) {      setAge(getAge0() + 1);    }    ItemStack item=this.getDataManager().get(getITEM()).orNull();    if (!this.worldObj.isRemote && this.getAge0() >= lifespan) {      int hook=net.minecraftforge.event.ForgeEventFactory.onItemExpire(this,item);      if (hook < 0)       this.setDead(); else       this.lifespan+=hook;    }    if (item != null && item.stackSize <= 0) {      this.setDead();    }  }}  }
class C{  public boolean isContent(){  return state.equals(CONTENT);}  }
class C{  public boolean isAlreadyMatched(){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_IS_BANISHED(String value0){  return new SM_SYSTEM_MESSAGE(1300177,value0);}  }
class C{  public void endObject(O object){}  }
class C{  public void write(short u0,short u1,short u2){  write(u0);  write(u1);  write(u2);}  }
class C{  public void mouseReleased(int x,int y){  for (  ConstraintWidget widget : mWidgetsScene.getWidgets()) {    getDecorator(widget).setShowActions(true);  }  boolean longPress=false;  if (System.currentTimeMillis() - mPressTime > LONG_PRESS_THRESHOLD) {    longPress=true;  }  if (mMouseMode == MouseMode.INACTIVE) {    return;  }  if (mAutoConnect) {    for (    SnapCandidate candidate : mWidgetMotion.getSnapCandidates()) {      if (!candidate.source.isConnectionAllowed(candidate.target.getOwner())) {        continue;      }      int margin=candidate.margin;      if (candidate.padding != 0) {        margin=candidate.padding;      }      margin=Math.abs(margin);      ConstraintWidget widget=candidate.source.getOwner();      widget.connect(candidate.source,candidate.target,margin,ConstraintAnchor.AUTO_CONSTRAINT_CREATOR);      mSelection.addModifiedWidget(candidate.source.getOwner());    }    for (    ConstraintWidget widget : mSelection.getModifiedWidgets()) {      for (      ConstraintAnchor anchor : widget.getAnchors()) {        if (!anchor.isConnected()) {          continue;        }        if (anchor.getConnectionCreator() != ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {          continue;        }        WidgetDecorator.getConstraintHandle(anchor).startLock();      }    }  }  mWidgetMotion.mouseReleased();  mWidgetResize.mouseReleased();  mSceneDraw.mouseReleased();  mClickListener.clearSelection();  mClickListener.find(mViewTransform.getSwingFX(x),mViewTransform.getSwingFY(y));  ConstraintAnchor anchor=mClickListener.getConstraintAnchor();  if (mSelection.getSelectedAnchor() != null && mSelection.getConnectionCandidateAnchor() == null && anchor == mSelection.getSelectedAnchor() && !longPress) {    if (mSelection.getSelectedAnchor().isConnected() && mSelection.getSelectedAnchor().getTarget() == mSelection.getSelectedAnchorInitialTarget()) {      ConstraintWidget widget=mSelection.getSelectedAnchor().getOwner();      ConstraintAnchor selectedAnchor=mSelection.getSelectedAnchor();      if (selectedAnchor.isVerticalAnchor()) {        widget.setVerticalBiasPercent(0.5f);      } else {        widget.setHorizontalBiasPercent(0.5f);      }      widget.resetAnchor(selectedAnchor);      ConstraintHandle selectedHandle=WidgetInteractionTargets.constraintHandle(selectedAnchor);      if (mSelection.getSelectedAnchor().getType() == ConstraintAnchor.Type.BASELINE) {        mSceneDraw.getChoreographer().addAnimation(new AnimatedDestroyLine(selectedHandle));      } else {        mSceneDraw.getChoreographer().addAnimation(new AnimatedDestroyCircle(selectedHandle));      }      mSelection.addModifiedWidget(widget);    }  }  ConstraintWidget widget=mClickListener.mHitWidget;  if (widget != null) {    if (mMouseMode == MouseMode.SELECT) {      if (!mSelection.contains(widget)) {        if (!(isShiftDown() || isControlDown())) {          mSelection.clear();        }        mSelection.add(widget);      } else       if (isControlDown()) {        mSelection.remove(widget);      }    }  }  if (mSelection.isEmpty() && mSelection.getSelectedAnchor() == null) {    int x1=Math.min(getStartPoint().x,getLastPoint().x);    int x2=Math.max(getStartPoint().x,getLastPoint().x);    int y1=Math.min(getStartPoint().y,getLastPoint().y);    int y2=Math.max(getStartPoint().y,getLastPoint().y);    Rectangle selectionRect=new Rectangle();    selectionRect.setBounds(x1,y1,x2 - x1,y2 - y1);    if (selectionRect.width > 0 && selectionRect.height > 0) {      ArrayList<ConstraintWidget> selection=mWidgetsScene.findWidgets(mWidgetsScene.getRoot(),selectionRect.x,selectionRect.y,selectionRect.width,selectionRect.height);      for (      ConstraintWidget w : selection) {        mSelection.add(w);      }    }  }  if (mSelection.getSelectedGuideline() != null) {    Rectangle head=mSelection.getSelectedGuideline().getHead();    if (head.contains(getStartPoint().x,getStartPoint().y)) {      Selection.Element element=mSelection.get(mSelection.getSelectedGuideline());      if (element != null) {        if (mSelection.getSelectedGuideline().getOrientation() == Guideline.VERTICAL) {          if (element.origin.x == mSelection.getSelectedGuideline().getDrawX()) {            mSelection.getSelectedGuideline().cyclePosition();            mSelection.addModifiedWidget(mSelection.getSelectedGuideline());          }        } else {          if (element.origin.y == mSelection.getSelectedGuideline().getDrawY()) {            mSelection.getSelectedGuideline().cyclePosition();            mSelection.addModifiedWidget(mSelection.getSelectedGuideline());          }        }      }    }  }  for (  Selection.Element selection : mSelection.getElements()) {    getDecorator(selection.widget).mouseRelease(x,y,mViewTransform,mSelection);  }  for (  Selection.Element selection : mSelection.getElements()) {    selection.directionLocked=Selection.DIRECTION_UNLOCKED;  }  mSceneDraw.setCurrentUnderneathAnchor(null);  mMouseMode=MouseMode.INACTIVE;  mSelection.setSelectedAnchor(null);  mSelection.setSelectedResizeHandle(null);  mSelection.setConnectionCandidateAnchor(null);  mSelection.clearBounds();  mSelection.selectionHasChanged();  mLastMousePosition.setLocation(0,0);  mSnapshot=null;  mMouseDown=false;  Animator.setAnimationEnabled(true);}  }
class C{  public Action removeAction(String name){  Action a=getAction(name);  if (a != null) {    a.cancel();    m_actions.remove(name);    a.setVisualization(null);  }  return a;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase;}  }
class C{  public static ObjectName buildObjectName(String domain,String type,String name) throws MalformedObjectNameException, NullPointerException {  return new ObjectName(domain + ':' + TYPE_KEY+ '='+ type+ ','+ NAME_KEY+ '='+ name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200742,skillcaster,skillname);}  }
class C{  public VideoCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  private void addToQueue(Collection<SerialMessage> msgs,ZWaveCommandClass commandClass,int endpointId){  if (msgs == null) {    return;  }  for (  SerialMessage serialMessage : msgs) {    addToQueue(node.encapsulate(serialMessage,commandClass,endpointId));  }}  }
class C{  public static boolean isStorageAlmostFull(){  return Environment.getExternalStorageDirectory().getUsableSpace() < STORAGE_ALMOST_FULL_THRESHOLD_BYTES;}  }
class C{  public final boolean canGetFloat(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetFloat());}  }
class C{  public static void addElement(Document doc,Element rootElement,String elementName,String typeIn,String isArrayIn,String partitionerIn){  Element element=doc.createElement("element");  rootElement.appendChild(element);  Element name=doc.createElement("name");  name.appendChild(doc.createTextNode(elementName));  element.appendChild(name);  Element type=doc.createElement("type");  type.appendChild(doc.createTextNode(typeIn));  element.appendChild(type);  if (isArrayIn.equals("true")) {    element.appendChild(doc.createElement("isArray"));  }  if (partitionerIn != null) {    Element partitioner=doc.createElement("partitioner");    partitioner.appendChild(doc.createTextNode(partitionerIn));    element.appendChild(partitioner);  }}  }
class C{  public void removeEntries(int minSelectionIndex,int maxSelectionIndex){  if ((maxSelectionIndex < minSelectionIndex) || (maxSelectionIndex >= colourMapList.size())) {    return;  }  int index=maxSelectionIndex;  while (index >= minSelectionIndex) {    colourMapList.remove(index);    index--;  }  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.colourMapUpdated();  }}  }
class C{  public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {  if (path == null) {    throw new NullPointerException("path == null");  }  pinFile=new File(path);  certStore=store;}  }
class C{  public static double value(double order,double x) throws MathIllegalArgumentException, MathIllegalStateException {  final int n=(int)order;  final double alpha=order - n;  final int nb=n + 1;  final BesselJResult res=rjBesl(x,alpha,nb);  if (res.nVals >= nb) {    return res.vals[n];  } else   if (res.nVals < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.BESSEL_FUNCTION_BAD_ARGUMENT,order,x);  } else   if (FastMath.abs(res.vals[res.nVals - 1]) < 1e-100) {    return res.vals[n];  }  throw new MathIllegalStateException(LocalizedCoreFormats.BESSEL_FUNCTION_FAILED_CONVERGENCE,order,x);}  }
class C{  @Override public int hashCode(){  int code=super.hashCode();  if (fEntityName != null) {    code+=fEntityName.hashCode();  }  return code;}  }
class C{  private static boolean intersectsLngEdge(S2Point a,S2Point b,R1Interval lat,double lng){  return S2.simpleCrossing(a,b,S2LatLng.fromRadians(lat.lo(),lng).toPoint(),S2LatLng.fromRadians(lat.hi(),lng).toPoint());}  }
class C{  public void resizeResiduals(int numberOfSamples){  residuals=new byte[numberOfSamples];}  }
class C{  public Date calculateEasterForYear(int year){  int a=year % 4;  int b=year % 7;  int c=year % 19;  int d=(19 * c + 15) % 30;  int e=(2 * a + 4 * b - d + 34) % 7;  int month=(int)Math.floor((d + e + 114) / 31);  int day=((d + e + 144) % 31) + 1;  day++;  return Date.on(day,month,year).addDay(13);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FRIENDLY_LEAVE_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400962,value0);}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public boolean isCurrentSelected(){  return isCurrentSet() && selected.contains(current);}  }
class C{  protected Element insertMajorBoundary(NodeList tokens,int i,Element firstToken,String tone,int breakindex){  Element boundary=insertBoundary((Element)tokens.item(i),tone,breakindex);  insertPhraseNode(firstToken,boundary);  return boundary;}  }
class C{  private void testClass(FilterConfigInterface objUnderTest,int noOFExpectedFilters){  assertNotNull(objUnderTest.getFilterConfiguration());  assertNotNull(objUnderTest.createFilter());  assertNull(objUnderTest.createFilter(null));  LogicFilterImpl filter=(LogicFilterImpl)objUnderTest.createLogicFilter(null);  assertEquals(0,filter.getChildren().size());  List<Filter> filterList=new ArrayList<Filter>();  try {    filterList.add(CQL.toFilter("filter1 >= 5"));  } catch (  CQLException e) {    e.printStackTrace();    fail();  }  filter=(LogicFilterImpl)objUnderTest.createLogicFilter(filterList);  if (noOFExpectedFilters > 1) {    assertEquals(0,filter.getChildren().size());    try {      filterList.add(CQL.toFilter("filter2 >= 5"));    } catch (    CQLException e) {      e.printStackTrace();      fail();    }    filter=(LogicFilterImpl)objUnderTest.createLogicFilter(filterList);  }  assertEquals(noOFExpectedFilters,filter.getChildren().size());  System.out.println(filter.toString());}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  public Sort(String[] fields,boolean[] ascend){  m_fields=fields;  m_ascend=ascend;}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augmentations) throws XNIException {}  }
class C{  public void advanceNodeStage(SerialMessageClass eventClass){  if (currentStage == ZWaveNodeInitStage.DONE) {    return;  }  logger.debug("NODE {}: Node advancer - {}: queue length({}), free to send({})",node.getNodeId(),currentStage,msgQueue.size(),freeToSend);  if (wakeupCount >= 3) {    msgQueue.clear();    wakeupCount=0;  }  startIdleTimer();  if (eventClass == null) {    freeToSend=true;  }  if (sendMessage() == true) {    return;  }  stageAdvanced=false;  do {    if (stageAdvanced == true) {      retryCount=0;    } else {      retryCount++;      if (retryCount > MAX_RETRIES) {        retryCount=0;        logger.error("NODE {}: Node advancer: Retries exceeded at {}",node.getNodeId(),currentStage);        if (currentStage.isStageMandatory() == false) {          logger.debug("NODE {}: Retry timout: Advancing",node.getNodeId());          setCurrentStage(currentStage.getNextStage());        } else {          logger.debug("NODE {}: Retry timout: Can't advance",node.getNodeId());          break;        }      }    }    logger.debug("NODE {}: Node advancer: loop - {} try {}: stageAdvanced({})",node.getNodeId(),currentStage,retryCount,stageAdvanced);switch (currentStage) {case EMPTYNODE:      logger.debug("NODE {}: Node advancer: Initialisation starting",node.getNodeId());    break;case PROTOINFO:  if (eventClass == SerialMessageClass.IdentifyNode) {    break;  }logger.debug("NODE {}: Node advancer: PROTOINFO - send IdentifyNode",node.getNodeId());addToQueue(new IdentifyNodeMessageClass().doRequest(node.getNodeId()));break;case INIT_NEIGHBORS:if (eventClass == SerialMessageClass.GetRoutingInfo) {break;}logger.debug("NODE {}: Node advancer: INIT_NEIGHBORS - send RoutingInfo",node.getNodeId());addToQueue(new GetRoutingInfoMessageClass().doRequest(node.getNodeId()));break;case FAILED_CHECK:if (node.getDeviceClass().getSpecificDeviceClass() == Specific.PC_CONTROLLER) {logger.debug("NODE {}: Node advancer: FAILED_CHECK - Controller - terminating initialisation",node.getNodeId());currentStage=ZWaveNodeInitStage.DONE;break;}if (eventClass == SerialMessageClass.IsFailedNodeID) {break;}addToQueue(new IsFailedNodeMessageClass().doRequest(node.getNodeId()));break;case WAIT:logger.debug("NODE {}: Node advancer: WAIT - Listening={}, FrequentlyListening={}",node.getNodeId(),node.isListening(),node.isFrequentlyListening());if (node.isListening() == true || node.isFrequentlyListening() == true) {logger.debug("NODE {}: Node advancer: WAIT - Advancing",node.getNodeId());break;}ZWaveWakeUpCommandClass wakeUpCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);if (wakeUpCommandClass != null && wakeUpCommandClass.isAwake() == true) {logger.debug("NODE {}: Node advancer: WAIT - Node is awake",node.getNodeId());break;}logger.debug("NODE {}: Node advancer: WAIT - Still waiting!",node.getNodeId());return;case PING:if (eventClass == SerialMessageClass.SendData) {break;}ZWaveNoOperationCommandClass noOpCommandClass=(ZWaveNoOperationCommandClass)node.getCommandClass(CommandClass.NO_OPERATION);if (noOpCommandClass == null) {break;}logger.debug("NODE {}: Node advancer: PING - send NoOperation",node.getNodeId());SerialMessage msg=noOpCommandClass.getNoOperationMessage();if (msg != null) {msg.attempts=1;addToQueue(msg);}break;case IDENTIFY_NODE:if (eventClass == SerialMessageClass.IdentifyNode) {break;}logger.debug("NODE {}: Node advancer: PROTOINFO - send IdentifyNode",node.getNodeId());addToQueue(new IdentifyNodeMessageClass().doRequest(node.getNodeId()));break;case SECURITY_REPORT:boolean doSecureInclusion=false;switch (controller.getSecureInclusionMode()) {default :case 0:if (node.getDeviceClass().getGenericDeviceClass() == Generic.ENTRY_CONTROL) {doSecureInclusion=true;}break;case 1:doSecureInclusion=true;break;case 2:break;}if (doSecureInclusion == false) {node.removeCommandClass(CommandClass.SECURITY);break;}if (node.supportsCommandClass(CommandClass.SECURITY)) {ZWaveSecurityCommandClassWithInitialization securityCommandClass=(ZWaveSecurityCommandClassWithInitialization)node.getCommandClass(CommandClass.SECURITY);Collection<SerialMessage> messageList=securityCommandClass.initialize(stageAdvanced);retryTimer=400;if (messageList == null) {if (isRestoredFromConfigfile() == false) {if (securityCommandClass.wasSecureInclusionSuccessful()) {logger.debug("NODE {}: Secure inclusion complete, continuing with inclusion",node.getNodeId());securityCommandClass.startSecurityEncapsulationThread();break;} else {logger.debug("NODE {}: Since secure inclusion failed, the node must be manually excluded via habmin",node.getNodeId());resetIdleTimer();node.removeCommandClass(CommandClass.SECURITY);}}} else if (messageList.isEmpty()) {return;} else {addToQueue(messageList);SerialMessage nextSecurityMessageToSend=messageList.iterator().next();if (!nextSecurityMessageToSend.equals(securityLastSentMessage)) {retryCount=0;securityLastSentMessage=nextSecurityMessageToSend;}}} else {logger.debug("NODE {}: SECURITY not supported, proceeding to next stage.",node.getNodeId());}break;case DETAILS:if (isRestoredFromConfigfile()) {logger.debug("NODE {}: Node advancer: Restored from file - skipping static initialisation",node.getNodeId());currentStage=ZWaveNodeInitStage.SESSION_START;break;}if (node.getApplicationUpdateReceived() == true) {logger.debug("NODE {}: Node advancer: received RequestNodeInfo",node.getNodeId());break;}logger.debug("NODE {}: Node advancer: DETAILS - send RequestNodeInfo",node.getNodeId());addToQueue(new RequestNodeInfoMessageClass().doRequest(node.getNodeId()));break;case MANUFACTURER:if (node.getManufacturer() != Integer.MAX_VALUE && node.getDeviceType() != Integer.MAX_VALUE && node.getDeviceId() != Integer.MAX_VALUE) {break;}ZWaveManufacturerSpecificCommandClass manufacturerSpecific=(ZWaveManufacturerSpecificCommandClass)node.getCommandClass(CommandClass.MANUFACTURER_SPECIFIC);if (manufacturerSpecific != null) {logger.debug("NODE {}: Node advancer: MANUFACTURER - send ManufacturerSpecific",node.getNodeId());addToQueue(manufacturerSpecific.getManufacturerSpecificMessage());}break;case APP_VERSION:ZWaveVersionCommandClass versionCommandClass=(ZWaveVersionCommandClass)node.getCommandClass(CommandClass.VERSION);if (versionCommandClass == null) {logger.debug("NODE {}: Node advancer: APP_VERSION - VERSION not supported",node.getNodeId());break;}if (versionCommandClass.getLibraryType() != LibraryType.LIB_UNKNOWN) {break;}logger.debug("NODE {}: Node advancer: APP_VERSION - send VersionMessage",node.getNodeId());addToQueue(versionCommandClass.getVersionMessage());break;case VERSION:ZWaveVersionCommandClass version=(ZWaveVersionCommandClass)node.getCommandClass(CommandClass.VERSION);thingType=ZWaveConfigProvider.getThingType(node);if (thingType == null) {logger.debug("NODE {}: Node advancer: VERSION - thing is null!",node.getNodeId());}for (ZWaveCommandClass zwaveVersionClass : node.getCommandClasses()) {logger.debug("NODE {}: Node advancer: VERSION - checking {}, version is {}",node.getNodeId(),zwaveVersionClass.getCommandClass().getLabel(),zwaveVersionClass.getVersion());if (thingType != null) {Map<String,String> properties=thingType.getProperties();for (Map.Entry<String,String> entry : properties.entrySet()) {String key=entry.getKey();String value=entry.getValue();String cmds[]=key.split(":");if ("commandClass".equals(cmds[0]) == false) {continue;}String args[]=value.split("=");if ("setVersion".equals(args[0])) {if (zwaveVersionClass.getCommandClass().getLabel().equals(cmds[1])) {logger.debug("NODE {}: Node advancer: VERSION - Set {} to Version {}",node.getNodeId(),CommandClass.getCommandClass(cmds[1]).getLabel(),args[1]);try {zwaveVersionClass.setVersion(Integer.parseInt(args[1]));} catch (NumberFormatException e) {logger.error("NODE {}: Node advancer: VERSION - number format exception {}",args[1]);}}}}}if (version != null && zwaveVersionClass.getVersion() == 0) {logger.debug("NODE {}: Node advancer: VERSION - queued   {}",node.getNodeId(),zwaveVersionClass.getCommandClass().getLabel());addToQueue(version.checkVersion(zwaveVersionClass));} else if (zwaveVersionClass.getVersion() == 0) {logger.debug("NODE {}: Node advancer: VERSION - VERSION default to 1",node.getNodeId());zwaveVersionClass.setVersion(1);}}logger.debug("NODE {}: Node advancer: VERSION - queued {} frames",node.getNodeId(),msgQueue.size());break;case ENDPOINTS:ZWaveMultiInstanceCommandClass multiInstance=(ZWaveMultiInstanceCommandClass)node.getCommandClass(CommandClass.MULTI_INSTANCE);if (multiInstance != null) {logger.debug("NODE {}: Node advancer: ENDPOINTS - MultiInstance is supported",node.getNodeId());addToQueue(multiInstance.initEndpoints(stageAdvanced));logger.debug("NODE {}: Node advancer: ENDPOINTS - queued {} frames",node.getNodeId(),msgQueue.size());} else {logger.debug("NODE {}: Node advancer: ENDPOINTS - MultiInstance not supported.",node.getNodeId());for (ZWaveCommandClass commandClass : node.getCommandClasses()) {commandClass.setInstances(1);}}break;case UPDATE_DATABASE:logger.debug("NODE {}: Node advancer: UPDATE_DATABASE",node.getNodeId());thingType=ZWaveConfigProvider.getThingType(node);if (thingType == null) {logger.debug("NODE {}: Node advancer: UPDATE_DATABASE - thing is null!",node.getNodeId());break;}Map<String,String> properties=thingType.getProperties();for (Map.Entry<String,String> entry : properties.entrySet()) {String key=entry.getKey();String value=entry.getValue();String cmds[]=key.split(":");if ("commandClass".equals(cmds[0]) == false) {continue;}String options[]=value.split(",");Map<String,String> optionMap=new HashMap<String,String>(1);for (String option : options) {String args[]=option.split("=");if (args.length == 2) {optionMap.put(args[0],args[1]);} else {optionMap.put(args[0],"");}}int endpoint=cmds.length == 2 ? 0 : Integer.parseInt(cmds[2]);if (optionMap.containsKey("ccRemove")) {logger.debug("NODE {}: Node advancer: UPDATE_DATABASE - removing {}:{}",node.getNodeId(),cmds[1],endpoint);if (endpoint == 0) {node.removeCommandClass(CommandClass.getCommandClass(cmds[1]));} else {ZWaveMultiInstanceCommandClass multiInstanceCmdClass=(ZWaveMultiInstanceCommandClass)node.getCommandClass(CommandClass.MULTI_INSTANCE);if (multiInstanceCmdClass != null) {ZWaveEndpoint ep=multiInstanceCmdClass.getEndpoint(endpoint);if (ep != null) {ep.removeCommandClass(CommandClass.getCommandClass(cmds[1]));}}}continue;}ZWaveCommandClass zwaveClass=node.resolveCommandClass(CommandClass.getCommandClass(cmds[1]),endpoint);if (zwaveClass != null) {zwaveClass.setOptions(optionMap);continue;}if (optionMap.containsKey("ccAdd")) {ZWaveCommandClass commandClass=ZWaveCommandClass.getInstance(CommandClass.getCommandClass(cmds[1]).getKey(),node,controller);if (commandClass != null) {logger.debug("NODE {}: Node advancer: UPDATE_DATABASE - adding {}",node.getNodeId(),cmds[1]);node.addCommandClass(commandClass);}}}break;case STATIC_VALUES:for (ZWaveCommandClass zwaveStaticClass : node.getCommandClasses()) {logger.debug("NODE {}: Node advancer: STATIC_VALUES - checking {}",node.getNodeId(),zwaveStaticClass.getCommandClass().getLabel());if (zwaveStaticClass instanceof ZWaveCommandClassInitialization) {logger.debug("NODE {}: Node advancer: STATIC_VALUES - found    {}",node.getNodeId(),zwaveStaticClass.getCommandClass().getLabel());ZWaveCommandClassInitialization zcci=(ZWaveCommandClassInitialization)zwaveStaticClass;int instances=zwaveStaticClass.getInstances();logger.debug("NODE {}: Found {} instances of {}",node.getNodeId(),instances,zwaveStaticClass.getCommandClass());if (instances == 1) {addToQueue(zcci.initialize(stageAdvanced));} else {for (int i=1; i <= instances; i++) {addToQueue(zcci.initialize(stageAdvanced),zwaveStaticClass,i);}}} else if (zwaveStaticClass instanceof ZWaveMultiInstanceCommandClass) {ZWaveMultiInstanceCommandClass multiInstanceCommandClass=(ZWaveMultiInstanceCommandClass)zwaveStaticClass;for (ZWaveEndpoint endpoint : multiInstanceCommandClass.getEndpoints()) {for (ZWaveCommandClass endpointCommandClass : endpoint.getCommandClasses()) {logger.debug("NODE {}: Node advancer: STATIC_VALUES - checking {} for endpoint {}",node.getNodeId(),endpointCommandClass.getCommandClass().getLabel(),endpoint.getEndpointId());if (endpointCommandClass instanceof ZWaveCommandClassInitialization) {logger.debug("NODE {}: Node advancer: STATIC_VALUES - found    {}",node.getNodeId(),endpointCommandClass.getCommandClass().getLabel());ZWaveCommandClassInitialization zcci2=(ZWaveCommandClassInitialization)endpointCommandClass;addToQueue(zcci2.initialize(stageAdvanced),endpointCommandClass,endpoint.getEndpointId());}}}}}logger.debug("NODE {}: Node advancer: STATIC_VALUES - queued {} frames",node.getNodeId(),msgQueue.size());break;case ASSOCIATIONS:ZWaveMultiAssociationCommandClass multiAssociationCommandClass=(ZWaveMultiAssociationCommandClass)node.getCommandClass(CommandClass.MULTI_INSTANCE_ASSOCIATION);ZWaveAssociationCommandClass associationCommandClass=(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION);if (multiAssociationCommandClass == null && associationCommandClass == null) {break;}if (stageAdvanced == false) {break;}thingType=ZWaveConfigProvider.getThingType(node);if (thingType == null) {logger.debug("NODE {}: Node advancer: ASSOCIATIONS - thing is null!",node.getNodeId());break;}ConfigDescription config=ZWaveConfigProvider.getThingTypeConfig(thingType);if (config == null) {logger.debug("NODE {}: Node advancer: ASSOCIATIONS - no configuration!",node.getNodeId());break;}for (ConfigDescriptionParameter parm : config.getParameters()) {String[] cfg=parm.getName().split("_");if ("group".equals(cfg[0])) {int group=Integer.parseInt(cfg[1]);logger.debug("NODE {}: Node advancer: ASSOCIATIONS request group {}",node.getNodeId(),group);addToQueue(node.getAssociation(group));}}break;case SET_WAKEUP:if (controller.isMasterController() == false) {break;}ZWaveWakeUpCommandClass wakeupCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);if (wakeupCommandClass == null) {logger.debug("NODE {}: Node advancer: SET_WAKEUP - Wakeup command class not supported",node.getNodeId());break;}if (wakeupCommandClass.getTargetNodeId() == controller.getOwnNodeId()) {logger.debug("NODE {}: Node advancer: SET_WAKEUP - TargetNode is set to controller",node.getNodeId());break;}int value=controller.getSystemDefaultWakeupPeriod();if (wakeupCommandClass.getInterval() == 0 && value != 0) {logger.debug("NODE {}: Node advancer: SET_WAKEUP - Interval is currently 0. Set to {}",node.getNodeId(),value);} else {value=wakeupCommandClass.getInterval();}logger.debug("NODE {}: Node advancer: SET_WAKEUP - Set wakeup node to controller ({}), period {}",node.getNodeId(),controller.getOwnNodeId(),value);addToQueue(wakeupCommandClass.setInterval(value));addToQueue(wakeupCommandClass.getIntervalMessage());break;case SET_ASSOCIATION:if (controller.isMasterController() == false) {break;}ZWaveAssociationCommandClass associationCls=(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION);if (associationCls == null) {logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - ASSOCIATION class not supported",node.getNodeId());break;}thingType=ZWaveConfigProvider.getThingType(node);if (thingType == null) {logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - thing is null!",node.getNodeId());break;}String associations=thingType.getProperties().get(ZWaveBindingConstants.PROPERTY_XML_ASSOCIATIONS);if (associations == null || associations.length() == 0) {logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - no default associations",node.getNodeId());break;}String defaultGroups[]=associations.split(",");for (int c=0; c < defaultGroups.length; c++) {int groupId=Integer.parseInt(defaultGroups[c]);ZWaveAssociation association=new ZWaveAssociation(controller.getOwnNodeId());if (node.getAssociationGroup(groupId) == null) {continue;}if (node.getAssociationGroup(groupId).getAssociations().contains(association)) {logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - ASSOCIATION set for group {}",node.getNodeId(),groupId);} else {logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - Adding ASSOCIATION to group {}",node.getNodeId(),groupId);addToQueue(node.setAssociation(null,groupId,controller.getOwnNodeId(),0));addToQueue(node.getAssociation(groupId));}}break;case DELETE_SUC_ROUTES:if (eventClass == SerialMessageClass.DeleteSUCReturnRoute) {break;}if (node.getNodeId() != controller.getOwnNodeId() && controller.getSucId() != 0) {logger.debug("NODE {}: Node advancer is deleting SUC return route.",node.getNodeId());addToQueue(new DeleteSucReturnRouteMessageClass().doRequest(node.getNodeId()));break;}break;case SUC_ROUTE:if (eventClass == SerialMessageClass.AssignSucReturnRoute) {break;}if (node.getNodeId() != controller.getOwnNodeId() && controller.getSucId() != 0) {logger.debug("NODE {}: Node advancer is setting SUC route.",node.getNodeId());addToQueue(new AssignSucReturnRouteMessageClass().doRequest(node.getNodeId(),controller.getCallbackId()));break;}break;case GET_CONFIGURATION:ZWaveConfigurationCommandClass configurationCommandClass=(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.CONFIGURATION);if (configurationCommandClass == null) {logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - CONFIGURATION class not supported",node.getNodeId());break;}thingType=ZWaveConfigProvider.getThingType(node);if (thingType == null) {logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - thing is null!",node.getNodeId());break;}ConfigDescription cfgConfig=ZWaveConfigProvider.getThingTypeConfig(thingType);if (cfgConfig == null) {logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - no configuration!",node.getNodeId());break;}ArrayList<Integer> paramSent=new ArrayList<Integer>();for (ConfigDescriptionParameter parm : cfgConfig.getParameters()) {String[] cfg=parm.getName().split("_");if ("config".equals(cfg[0])) {logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - checking {} - config",node.getNodeId(),parm.getName());int index=Integer.parseInt(cfg[1]);int size=Integer.parseInt(cfg[2]);if (Arrays.asList(cfg).contains("wo")) {logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - checking {} - wo",node.getNodeId(),parm.getName());configurationCommandClass.setParameterWriteOnly(index,size,true);continue;}if (paramSent.contains(index)) {continue;}paramSent.add(index);logger.debug("NODE {}: Node advancer: GET_CONFIGURATION - checking {} - index {}",node.getNodeId(),parm.getName(),index);if (configurationCommandClass.getParameter(index) == null) {addToQueue(configurationCommandClass.getConfigMessage(index));}}}break;case DYNAMIC_VALUES:for (ZWaveCommandClass zwaveDynamicClass : node.getCommandClasses()) {logger.debug("NODE {}: Node advancer: DYNAMIC_VALUES - checking {}",node.getNodeId(),zwaveDynamicClass.getCommandClass().getLabel());if (zwaveDynamicClass instanceof ZWaveCommandClassDynamicState) {logger.debug("NODE {}: Node advancer: DYNAMIC_VALUES - found    {}",node.getNodeId(),zwaveDynamicClass.getCommandClass().getLabel());ZWaveCommandClassDynamicState zdds=(ZWaveCommandClassDynamicState)zwaveDynamicClass;int instances=zwaveDynamicClass.getInstances();logger.debug("NODE {}: Found {} instances of {}",node.getNodeId(),instances,zwaveDynamicClass.getCommandClass());if (instances == 1) {addToQueue(zdds.getDynamicValues(stageAdvanced));} else {for (int i=1; i <= instances; i++) {addToQueue(zdds.getDynamicValues(stageAdvanced),zwaveDynamicClass,i);}}} else if (zwaveDynamicClass instanceof ZWaveMultiInstanceCommandClass) {ZWaveMultiInstanceCommandClass multiInstanceCommandClass=(ZWaveMultiInstanceCommandClass)zwaveDynamicClass;for (ZWaveEndpoint endpoint : multiInstanceCommandClass.getEndpoints()) {for (ZWaveCommandClass endpointCommandClass : endpoint.getCommandClasses()) {logger.debug("NODE {}: Node advancer: DYNAMIC_VALUES - checking {} for endpoint {}",node.getNodeId(),endpointCommandClass.getCommandClass().getLabel(),endpoint.getEndpointId());if (endpointCommandClass instanceof ZWaveCommandClassDynamicState) {logger.debug("NODE {}: Node advancer: DYNAMIC_VALUES - found    {}",node.getNodeId(),endpointCommandClass.getCommandClass().getLabel());ZWaveCommandClassDynamicState zdds2=(ZWaveCommandClassDynamicState)endpointCommandClass;addToQueue(zdds2.getDynamicValues(stageAdvanced),endpointCommandClass,endpoint.getEndpointId());}}}}}logger.debug("NODE {}: Node advancer: DYNAMIC_VALUES - queued {} frames",node.getNodeId(),msgQueue.size());break;case DELETE_ROUTES:if (eventClass == SerialMessageClass.DeleteReturnRoute) {break;}if (node.getRoutingList().size() != 0) {logger.debug("NODE {}: Node advancer is deleting return routes.",node.getNodeId());addToQueue(new DeleteReturnRouteMessageClass().doRequest(node.getNodeId()));break;}break;case RETURN_ROUTES:if (eventClass == SerialMessageClass.AssignReturnRoute) {break;}for (Integer route : node.getRoutingList()) {logger.debug("NODE {}: Adding return route to {}",node.getNodeId(),route);addToQueue(new AssignReturnRouteMessageClass().doRequest(node.getNodeId(),route,controller.getCallbackId()));}break;case NEIGHBORS:if (eventClass == SerialMessageClass.GetRoutingInfo) {break;}logger.debug("NODE {}: Node advancer: NEIGHBORS - get RoutingInfo",node.getNodeId());addToQueue(new GetRoutingInfoMessageClass().doRequest(node.getNodeId()));break;case DISCOVERY_COMPLETE:case STATIC_END:case DYNAMIC_END:case DONE:nodeSerializer.SerializeNode(node);if (currentStage != ZWaveNodeInitStage.DONE) {break;}logger.debug("NODE {}: Node advancer: Initialisation complete!",node.getNodeId());resetIdleTimer();controller.removeEventListener(this);ZWaveEvent zEvent=new ZWaveInitializationStateEvent(node.getNodeId(),ZWaveNodeInitStage.DONE);controller.notifyEventListeners(zEvent);return;case SESSION_START:case HEAL_START:break;default :logger.debug("NODE {}: Node advancer: Unknown node state {} encountered.",node.getNodeId(),currentStage);break;}if (currentStage != ZWaveNodeInitStage.DONE && sendMessage() == false) {setCurrentStage(currentStage.getNextStage());stageAdvanced=true;retryTimer=BACKOFF_TIMER_START;logger.debug("NODE {}: Node advancer - advancing to {}",node.getNodeId(),currentStage);ZWaveEvent zEvent=new ZWaveInitializationStateEvent(node.getNodeId(),currentStage);controller.notifyEventListeners(zEvent);}} while (msgQueue.isEmpty());}  }
class C{  public boolean apply(ClusterViewer clusterViewer,String attributeThatDefinesBiologicalSamples){  final SampleAttributeTable sampleAttributeTable=clusterViewer.getDocument().getSampleAttributeTable();  final ArrayList<Triplet<String,String,String>> triangles=computeTriangluation(sampleAttributeTable,attributeThatDefinesBiologicalSamples);  System.err.println("Triangulation (" + triangles.size() + "):");  for (  Triplet<String,String,String> triangle : triangles) {    System.err.println(triangle.toString());  }  final int minNumberOfNonConflictedTrianglesRequired=computeMinNumberOfNonConflictedTrianglesRequired(triangles.size());  System.err.println("Minimum number of non-conflicted triangles required to reject H0: " + minNumberOfNonConflictedTrianglesRequired);  final Taxa taxa=clusterViewer.getTaxa();  final Distances distances=clusterViewer.getDistances();  int numberOfNonconflictedTriangles=0;  for (  Triplet<String,String,String> triangle : triangles) {    double ab=distances.get(taxa.indexOf(triangle.get1()),taxa.indexOf(triangle.get2()));    double ac=distances.get(taxa.indexOf(triangle.get1()),taxa.indexOf(triangle.get3()));    double bc=distances.get(taxa.indexOf(triangle.get2()),taxa.indexOf(triangle.get3()));    if (ac < ab || bc < ab) {      System.err.println("Conflicted triangle a=" + triangle.get1() + ",b="+ triangle.get2()+ " vs c="+ triangle.get3()+ ", distances: "+ String.format("ab=%.4f, ac=%.4f, bc=%.4f",ab,ac,bc));    } else     numberOfNonconflictedTriangles++;  }  if (numberOfNonconflictedTriangles < minNumberOfNonConflictedTrianglesRequired)   System.err.println("Insufficient number of non-conflicted triangles: " + numberOfNonconflictedTriangles + ", null hypothesis not rejected");  return numberOfNonconflictedTriangles >= minNumberOfNonConflictedTrianglesRequired;}  }
class C{  public final static String formatStatusLine(final StatusLine statline,LineFormatter formatter){  if (formatter == null)   formatter=SaveLineFormatter.DEFAULT;  return formatter.formatStatusLine(null,statline).toString();}  }
class C{  public final void testCloseOutputStream(){  FallbackFileController fFileController=new FallbackFileController(PATH);  try {    fFileController.closeFallbackOutputStream();  } catch (  DataFallbackException e) {    fail("The OutputStream could not be closed");  }  assertNull(fFileController.getOutput());}  }
class C{  public void applyConstraints(NlComponent n){  String centerBoth=n.getAttribute(ANDROID_URI,ATTR_LAYOUT_CENTER_IN_PARENT);  if (centerBoth != null && VALUE_TRUE.equals(centerBoth)) {    n.setAttribute(ANDROID_URI,ATTR_LAYOUT_CENTER_IN_PARENT,null);    if (myCurrentTopMatch == null && myCurrentBottomMatch == null) {      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_CENTER_VERTICAL,VALUE_TRUE);    }    if (myCurrentLeftMatch == null && myCurrentRightMatch == null) {      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_CENTER_HORIZONTAL,VALUE_TRUE);    }  }  if (myMoveTop || myMoveBottom || myMoveLeft|| myMoveRight) {    String value=n.getAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN);    if (value != null) {      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN,null);      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN_LEFT,value);      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN_RIGHT,value);      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN_TOP,value);      n.setAttribute(ANDROID_URI,ATTR_LAYOUT_MARGIN_BOTTOM,value);    }  }  if (myMoveTop) {    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_TOP);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_TOP);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_BELOW);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_CENTER_VERTICAL);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_BASELINE);  }  if (myMoveBottom) {    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_BOTTOM);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_BOTTOM);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ABOVE);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_CENTER_VERTICAL);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_BASELINE);  }  if (myMoveLeft) {    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_LEFT);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_LEFT);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_START);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_START);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_TO_RIGHT_OF);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_CENTER_HORIZONTAL);    clearAttribute(n,ANDROID_URI,myTextDirection.getAttrLeft());    clearAttribute(n,ANDROID_URI,myTextDirection.getAttrLeftOf());  }  if (myMoveRight) {    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_RIGHT);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_RIGHT);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_PARENT_END);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_ALIGN_END);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_TO_LEFT_OF);    clearAttribute(n,ANDROID_URI,ATTR_LAYOUT_CENTER_HORIZONTAL);    clearAttribute(n,ANDROID_URI,myTextDirection.getAttrRight());    clearAttribute(n,ANDROID_URI,myTextDirection.getAttrRightOf());  }  if (myMoveTop && myCurrentTopMatch != null) {    applyConstraint(n,myCurrentTopMatch.getConstraint(true));    if (myCurrentTopMatch.type == ALIGN_BASELINE) {      String c=myCurrentTopMatch.getConstraint(true);      c=c.replace(ATTR_LAYOUT_ALIGN_BASELINE,ATTR_LAYOUT_ALIGN_BOTTOM);      applyConstraint(n,c);    }  }  if (myMoveBottom && myCurrentBottomMatch != null) {    applyConstraint(n,myCurrentBottomMatch.getConstraint(true));  }  if (myMoveLeft && myCurrentLeftMatch != null) {    String constraint=myCurrentLeftMatch.getConstraint(true);    String rtlConstraint=myCurrentLeftMatch.getRtlConstraint(myTextDirection,true);    if (rtlConstraint != null && supportsStartEnd()) {      if (requiresRightLeft()) {        applyConstraint(n,constraint);      }      applyConstraint(n,rtlConstraint);    } else {      applyConstraint(n,constraint);    }  }  if (myMoveRight && myCurrentRightMatch != null) {    String constraint=myCurrentRightMatch.getConstraint(true);    String rtlConstraint=myCurrentRightMatch.getRtlConstraint(myTextDirection,true);    if (rtlConstraint != null && supportsStartEnd()) {      if (requiresRightLeft()) {        applyConstraint(n,constraint);      }      applyConstraint(n,rtlConstraint);    } else {      applyConstraint(n,constraint);    }  }  if (myMoveLeft) {    if (supportsStartEnd()) {      if (requiresRightLeft()) {        applyMargin(n,ATTR_LAYOUT_MARGIN_LEFT,getLeftMarginDp());      }      applyMargin(n,myTextDirection.getAttrMarginLeft(),getLeftMarginDp());    } else {      applyMargin(n,ATTR_LAYOUT_MARGIN_LEFT,getLeftMarginDp());    }  }  if (myMoveRight) {    if (supportsStartEnd()) {      if (requiresRightLeft()) {        applyMargin(n,ATTR_LAYOUT_MARGIN_RIGHT,getRightMarginDp());      }      applyMargin(n,myTextDirection.getAttrMarginRight(),getRightMarginDp());    } else {      applyMargin(n,ATTR_LAYOUT_MARGIN_RIGHT,getRightMarginDp());    }  }  if (myMoveTop) {    applyMargin(n,ATTR_LAYOUT_MARGIN_TOP,getTopMarginDp());  }  if (myMoveBottom) {    applyMargin(n,ATTR_LAYOUT_MARGIN_BOTTOM,getBottomMarginDp());  }}  }
class C{  public AsyncResultFilterEvent(AsyncResult<T> currentResult,AsyncResult<T>[] receivedResults,int totalExpectedResults){  this.currentResult=currentResult;  this.receivedResults=receivedResults;  this.totalExpectedResults=totalExpectedResults;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  fixApostrophe(utterance);  fixTheIy(utterance);}  }
class C{  public VideoSearchQuery filters(List<VideoSearchFilter> value){  return unsafeParam("filters",value);}  }
class C{  public boolean isConnected(){  return true;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public boolean canFindAll(){  return true;}  }
class C{  public static StyledLayerDescriptor createNewPoint(){  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  PointSymbolizer point=createDefaultPointSymbolizer();  rule.symbolizers().add(point);  return sld;}  }
class C{  private void toggleAlphabetic(){  List<Pokemon> pokemonList=Pokedex.getAllPokemonAlphabetic();  List<UndoAdapter.UndoItem> list=new ArrayList<>();  if (isAlphabetic) {    for (int i=0; i < pokemonList.size(); i++) {      UndoAdapter.UndoItem undoItem=new UndoAdapter.UndoItem(pokemonList.get(i).type,pokemonList.get(i));      list.add(i,undoItem);    }    isAlphabetic=false;  } else {    for (int i=0; i < pokemonList.size(); i++) {      UndoAdapter.UndoItem undoItem=new UndoAdapter.UndoItem(pokemonList.get(i).name.substring(0,1),pokemonList.get(i));      list.add(i,undoItem);    }    isAlphabetic=true;  }  adapter.swap(list);}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  OutputStream bos=null;  try {    bos=new OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static void println(char x){  out.println(x);}  }
class C{  private static S2CellId fromFaceIJWrap(int face,int i,int j){  i=Math.max(-1,Math.min(MAX_SIZE,i));  j=Math.max(-1,Math.min(MAX_SIZE,j));  final double kScale=1.0 / MAX_SIZE;  double s=kScale * ((i << 1) + 1 - MAX_SIZE);  double t=kScale * ((j << 1) + 1 - MAX_SIZE);  S2Point p=S2Projections.faceUvToXyz(face,s,t);  face=S2Projections.xyzToFace(p);  R2Vector st=S2Projections.validFaceXyzToUv(face,p);  return fromFaceIJ(face,stToIJ(st.x()),stToIJ(st.y()));}  }
class C{  public MP4Config(String path) throws IOException, FileNotFoundException {  StsdBox stsdBox;  try {    mp4Parser=MP4Parser.parse(path);  } catch (  IOException ignore) {  }  stsdBox=mp4Parser.getStsdBox();  mPPS=stsdBox.getB64PPS();  mSPS=stsdBox.getB64SPS();  mProfilLevel=stsdBox.getProfileLevel();  mp4Parser.close();}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  if (mScannerCompletionListener != null) {    mScannerCompletionListener.OnScannerCompletion(rawResult,Scanner.parseResult(rawResult),barcode);  }  if (barcode != null) {    mViewfinderView.drawResultBitmap(barcode);  }  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    mBeepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }}  }
class C{  public <T>T staleSafe(WebElement element,WebElementCallable<T> elementCallable){  return verify(null,Timeouts.MEDIUM);}  }
class C{  public Vector resolveAllSystem(String systemId) throws IOException {  Vector resolutions=new Vector();  if (systemId != null) {    Vector localResolutions=resolveAllLocalSystem(systemId);    resolutions=appendVector(resolutions,localResolutions);  }  Vector subResolutions=resolveAllSubordinateCatalogs(SYSTEM,null,null,systemId);  resolutions=appendVector(resolutions,subResolutions);  if (resolutions.size() > 0) {    return resolutions;  } else {    return null;  }}  }
class C{  public void registerObserver(SpinnerNotifyInterface observer){  observers.add(observer);}  }
class C{  private static boolean isStackTraceLikelyConflictive(Throwable throwable,Class<? extends Activity> activityClass){  do {    StackTraceElement[] stackTrace=throwable.getStackTrace();    for (    StackTraceElement element : stackTrace) {      if ((element.getClassName().equals("android.app.ActivityThread") && element.getMethodName().equals("handleBindApplication")) || element.getClassName().equals(activityClass.getName())) {        return true;      }    }  } while ((throwable=throwable.getCause()) != null);  return false;}  }
class C{  public static double normalizeAngle(double a,double center){  return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);}  }
class C{  public void useIncense(ItemId type) throws RemoteServerException, LoginFailedException {  UseIncenseMessage useIncenseMessage=UseIncenseMessage.newBuilder().setIncenseType(type).setIncenseTypeValue(type.getNumber()).build();  ServerRequest useIncenseRequest=new ServerRequest(RequestType.USE_INCENSE,useIncenseMessage);  api.getRequestHandler().sendServerRequests(useIncenseRequest);  try {    UseIncenseResponse response=UseIncenseResponse.parseFrom(useIncenseRequest.getData());    Log.i("Main","Use incense result: " + response.getResult());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }}  }
class C{  public static List<Grid> fromHtml(String html,String title) throws Exception {  if (html == null || html.trim().isEmpty()) {    return null;  }  List<Grid> grids=new ArrayList<>();  Parser parser=Parser.createParser(html,"UTF-8");  Node[] tables=parser.extractAllNodesThatMatch(new TagNameFilter("table")).toNodeArray();  for (  Node t : tables) {    Grid grid=new ListGrid();    grid.setTitle(title);    TableTag table=(TableTag)t;    TableRow[] rows=table.getRows();    Integer firstColumnCount=null;    for (    TableRow row : rows) {      if (getColumnCount(row) == 0) {        log.warn("Ignoring row with no columns");        continue;      }      Node[] cells=row.getChildren().extractAllNodesThatMatch(HTML_ROW_FILTER).toNodeArray();      if (firstColumnCount == null) {        firstColumnCount=getColumnCount(row);        for (        Node c : cells) {          TagNode cell=(TagNode)c;          grid.addHeader(new GridHeader(getValue(cell),false,false));          Integer colSpan=MathUtils.parseInt(cell.getAttribute("colspan"));          if (colSpan != null && colSpan > 1) {            grid.addEmptyHeaders((colSpan - 1));          }        }      } else {        if (firstColumnCount != getColumnCount(row)) {          log.warn("Ignoring row which has " + row.getColumnCount() + " columns since table has "+ firstColumnCount+ " columns");          continue;        }        grid.addRow();        for (        Node c : cells) {          TagNode cell=(TagNode)c;          grid.addValue(getValue(cell));          Integer colSpan=MathUtils.parseInt(cell.getAttribute("colspan"));          if (colSpan != null && colSpan > 1) {            grid.addEmptyValues((colSpan - 1));          }        }      }    }    grids.add(grid);  }  return grids;}  }
class C{  private ShapeFactory(){}  }
class C{  public static Var map(Relation relation){  if (isHasResourceRelation(relation)) {    return var();  }  Var var=base(relation);  var=roleplayers(var,relation);  return var;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set showAminoAcids=true;");}  }
class C{  private void handleIncomingRequestMessage(SerialMessage incomingMessage){  logger.trace("Incoming Message type = REQUEST");  ZWaveCommandProcessor processor=ZWaveCommandProcessor.getMessageDispatcher(incomingMessage.getMessageClass());  if (processor == null) {    logger.warn(String.format("TODO: Implement processing of Request Message = %s (0x%02X)",incomingMessage.getMessageClass() == null ? "--" : incomingMessage.getMessageClass().getLabel(),incomingMessage.getMessageClassKey()));    return;  }  boolean result;  try {    result=processor.handleRequest(this,lastSentMessage,incomingMessage);    if (processor.isTransactionComplete()) {      notifyEventListeners(new ZWaveTransactionCompletedEvent(this.lastSentMessage,result));      transactionCompleted.release();      logger.trace("Released. Transaction completed permit count -> {}",transactionCompleted.availablePermits());    }  } catch (  ZWaveSerialMessageException e) {    e.printStackTrace();  }}  }
class C{  public static int px2dip(Context context,float pxValue){  if (context == null) {    return 0;  }  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public boolean isGridRowCheckboxSelected(){  return gridRow.getAttribute(HtmlTags.Attributes.CLASS).contains(ROW_SELECTED_CLASS);}  }
class C{  @Deployment public void testActivityMessageEventsInEventSubprocess() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().messageEventSubscriptionName("messageName").singleResult();  assertNotNull(executionWithMessage);  runtimeService.messageEventReceived("messageName",executionWithMessage.getId());  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("catchMessage",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED,messageEvent.getType());  assertEquals("catchMessage",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED);}  }
class C{  @Override public void do_after_propagation(){  for (  PtInsIntervalManager pim : pt_objs.values()) {    pim.flush();  }  new_pts=new HashMap<AllocNode,PtInsIntervalManager>();}  }
class C{  public static CreateRevisionCmpTarget createRevision(long revision){  return new CreateRevisionCmpTarget(revision);}  }
class C{  public Builder closeOnClick(Boolean closeOnClick){  this.closeOnClick=closeOnClick;  return this;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(opt(key));}  }
class C{  public <K,C>ColumnMutation prepareColumnMutation(ColumnFamily<K,C> cf,K rowKey,C column,ConsistencyLevel consistency){  return _astyanaxKeyspace.prepareColumnMutation(cf,rowKey,column).setConsistencyLevel(clamp(consistency));}  }
class C{  public static int roundingModeFromString(String value){  if (value == null)   return -1;  value=value.trim();  if ("ROUND_HALF_UP".equals(value))   return BigDecimal.ROUND_HALF_UP; else   if ("ROUND_HALF_DOWN".equals(value))   return BigDecimal.ROUND_HALF_DOWN; else   if ("ROUND_HALF_EVEN".equals(value))   return BigDecimal.ROUND_HALF_EVEN; else   if ("ROUND_UP".equals(value))   return BigDecimal.ROUND_UP; else   if ("ROUND_DOWN".equals(value))   return BigDecimal.ROUND_DOWN; else   if ("ROUND_CEILING".equals(value))   return BigDecimal.ROUND_CEILING; else   if ("ROUND_FLOOR".equals(value))   return BigDecimal.ROUND_FLOOR; else   if ("ROUND_UNNECCESSARY".equals(value))   return BigDecimal.ROUND_UNNECESSARY;  return -1;}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  private void identifyPunct(AnnotatedString input,LanguageResource langRes){  RegExp allPunctMatcher=langRes.getAllPunctMatcher();  RegExp internalMatcher=langRes.getInternalMatcher();  String rootClass=langRes.getClassesRoot().getTagName();  char c=input.setIndex(0);  if (null == input.getAnnotation(CLASS_ANNO)) {    c=input.setIndex(input.findNextAnnotation(CLASS_ANNO));  }  while (c != CharacterIterator.DONE) {    if (null == input.getAnnotation(CLASS_ANNO)) {      c=input.setIndex(input.findNextAnnotation(CLASS_ANNO));      continue;    }    String tokClass=(String)input.getAnnotation(CLASS_ANNO);    if (tokClass != rootClass) {      c=input.setIndex(input.findNextAnnotation(CLASS_ANNO));      continue;    }    int nextTokenStart=input.findNextAnnotation(CLASS_ANNO);    this.splitPunctuation(input,langRes);    tokClass=(String)input.getAnnotation(CLASS_ANNO);    if (tokClass != rootClass) {      c=input.setIndex(nextTokenStart);      continue;    }    this.splitClitics(input,langRes);    tokClass=(String)input.getAnnotation(CLASS_ANNO);    if (tokClass != rootClass) {      c=input.setIndex(nextTokenStart);      continue;    }    int tokenStart=input.getIndex();    int tokenEnd=input.getRunLimit(CLASS_ANNO);    String image=input.substring(tokenStart,tokenEnd);    List<Match> matches=allPunctMatcher.getAllMatches(image);    if (0 == matches.size()) {      c=input.setIndex(nextTokenStart);      continue;    }    int index=0;    for (int i=0; i < matches.size(); i++) {      Match oneMatch=matches.get(i);      if (index != oneMatch.getStartIndex()) {        if (internalMatcher.matches(oneMatch.getImage())) {          if (this.hasRightContextEnd(oneMatch,matches,image,i)) {            continue;          }        }        this.annotate(input,CLASS_ANNO,tokClass,tokenStart + index,tokenStart + oneMatch.getStartIndex(),image.substring(index,oneMatch.getStartIndex()),langRes);        index=oneMatch.getStartIndex();      }      String punctClass=this.identifyPunctClass(oneMatch,null,image,langRes);      input.annotate(CLASS_ANNO,punctClass,tokenStart + index,tokenStart + oneMatch.getEndIndex());      index=oneMatch.getEndIndex();    }    if (index != image.length()) {      this.annotate(input,CLASS_ANNO,tokClass,tokenStart + index,tokenStart + image.length(),image.substring(index),langRes);    }    c=input.setIndex(nextTokenStart);  }}  }
class C{  public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  private boolean greaterThan(VersionData versionData){  if (versionData.majorNumber > this.majorNumber) {    return true;  } else   if (versionData.majorNumber == this.majorNumber) {    if (versionData.minorNumber > this.minorNumber) {      return true;    } else     if (versionData.minorNumber == this.minorNumber) {      if (versionData.pointNumber >= this.pointNumber) {        return true;      }    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillAttack_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200538,skilltarget,skillname);}  }
class C{  public @NonNull ChargeRequest.Builder autoReturn(long timeout,TimeUnit unit){  long autoReturnMillis;  if (timeout != RegisterApi.AUTO_RETURN_NO_TIMEOUT) {    autoReturnMillis=unit.toMillis(timeout);    nonNull(unit,"unit");    if (autoReturnMillis < RegisterApi.AUTO_RETURN_TIMEOUT_MIN_MILLIS) {      throw new IllegalArgumentException("timeout should be at least " + RegisterApi.AUTO_RETURN_TIMEOUT_MIN_MILLIS);    }    if (autoReturnMillis > RegisterApi.AUTO_RETURN_TIMEOUT_MAX_MILLIS) {      throw new IllegalArgumentException("timeout should be less than " + RegisterApi.AUTO_RETURN_TIMEOUT_MAX_MILLIS);    }  } else {    autoReturnMillis=RegisterApi.AUTO_RETURN_NO_TIMEOUT;  }  this.autoReturnMillis=autoReturnMillis;  return this;}  }
class C{  public final synchronized String toConfigXML(){  Class handlerClass=this.getClass();  Field[] fields=handlerClass.getDeclaredFields();  StringBuilder str=new StringBuilder();  str.append("        <HardwareAddress class=\"");  str.append(getClass().getName());  str.append("\">\n");  for (int i=0; i < fields.length; i++) {    if (Modifier.isProtected(fields[i].getModifiers()) && !Modifier.isFinal(fields[i].getModifiers())) {      try {        if (fields[i].get(this) != null) {          str.append("          <");          String fieldXMLName=encodeFieldName(fields[i].getName());          str.append(fieldXMLName);          str.append(">");          try {            str.append(fields[i].get(this));          } catch (          IllegalAccessException iae) {            iae.printStackTrace();          }          str.append("</");          str.append(fieldXMLName);          str.append(">\n");        }      } catch (      IllegalAccessException iae) {        iae.printStackTrace();        throw new RuntimeException("Exception caught while converting HardwareAddress to XML.",iae);      }    }  }  str.append("        </HardwareAddress>\n");  return str.toString();}  }
class C{  public TCPSocketHelper(String address,int port){  this.address=address;  this.port=port;  createSocket();}  }
class C{  @Override public void endContentModel(Augmentations augs) throws XNIException {}  }
class C{  public Builder html(String html){  this.html=html;  return this;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  @Override public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_download,parent,false);  return new ViewHolder(v);}  }
class C{  public boolean isStoredProcedure(){  if (_expression == null)   return false;  String trimmed=_expression.trim();  return CALL.matcher(trimmed).matches();}  }
class C{  @Override public DataRefNode findLastDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){  BTreeNode rootNode=(BTreeNode)dataRefBlock;  while (!rootNode.isLeafNode()) {    rootNode=findLastLeafNode(searchKey,rootNode);  }  return rootNode;}  }
class C{  public void notifyDotAttackedObservers(Creature creature,Effect effect){  notifyObservers(ObserverType.DOT_ATTACKED,creature,effect);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  @Override public int available(){  return (int)n;}  }
class C{  public QuerySchema loadSchema(InputStream stream) throws IOException, PIRException {  Document doc=parseXMLDocument(stream);  String schemaName=extractValue(doc,"schemaName");  logger.info("schemaName = " + schemaName);  String dataSchemaName=extractValue(doc,"dataSchemaName");  logger.info("dataSchemaName = " + dataSchemaName);  DataSchema dataSchema=DataSchemaRegistry.get(dataSchemaName);  if (dataSchema == null) {    throw new PIRException("Loaded DataSchema does not exist for dataSchemaName = " + dataSchemaName);  }  String selectorName=extractValue(doc,"selectorName");  logger.info("selectorName = " + selectorName);  if (!dataSchema.containsElement(selectorName)) {    throw new PIRException("dataSchema = " + dataSchemaName + " does not contain selectorName = "+ selectorName);  }  NodeList elementsList=doc.getElementsByTagName("elements");  if (elementsList.getLength() != 1) {    throw new PIRException("elementsList.getLength() = " + elementsList.getLength() + " -- should be 1");  }  Element elements=(Element)elementsList.item(0);  LinkedHashSet<String> elementNames=new LinkedHashSet<>();  int dataElementSize=0;  NodeList nList=elements.getElementsByTagName("name");  for (int i=0; i < nList.getLength(); i++) {    Node nNode=nList.item(i);    if (nNode.getNodeType() == Node.ELEMENT_NODE) {      String queryElementName=nNode.getFirstChild().getNodeValue().trim();      if (!dataSchema.containsElement(queryElementName)) {        throw new PIRException("dataSchema = " + dataSchemaName + " does not contain requested element name = "+ queryElementName);      }      elementNames.add(queryElementName);      logger.info("name = " + queryElementName + " partitionerName = "+ dataSchema.getPartitionerTypeName(queryElementName));      DataPartitioner partitioner=dataSchema.getPartitionerForElement(queryElementName);      int bits=partitioner.getBits(dataSchema.getElementType(queryElementName));      if (dataSchema.isArrayElement(queryElementName)) {        bits*=Integer.parseInt(SystemConfiguration.getProperty("pir.numReturnArrayElements"));      }      dataElementSize+=bits;      logger.info("name = " + queryElementName + " bits = "+ bits+ " dataElementSize = "+ dataElementSize);    }  }  String filterTypeName=NO_FILTER;  if (doc.getElementsByTagName("filter").item(0) != null) {    filterTypeName=doc.getElementsByTagName("filter").item(0).getTextContent().trim();  }  Set<String> filteredNamesSet=extractFilteredElementNames(doc);  DataFilter filter=instantiateFilter(filterTypeName,filteredNamesSet);  HashMap<String,String> additionalFields=new HashMap<String,String>();  if (doc.getElementsByTagName("additional").item(0) != null) {    NodeList fieldList=doc.getElementsByTagName("field");    int numFields=fieldList.getLength();    if (numFields == 0) {      throw new PIRException("numFields = " + numFields + " -- should be at least one");    }    for (int i=0; i < numFields; ++i) {      Element fields=(Element)fieldList.item(i);      NodeList kv=fields.getChildNodes();      additionalFields.put(getNodeValue("key",kv),getNodeValue("value",kv));    }  }  QuerySchema querySchema=new QuerySchema(schemaName,dataSchemaName,selectorName,filterTypeName,filter,dataElementSize);  querySchema.getElementNames().addAll(elementNames);  querySchema.getFilteredElementNames().addAll(filteredNamesSet);  querySchema.getAdditionalFields().putAll(additionalFields);  return querySchema;}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  visitor.setTestValue(fieldId,this.value);}  }
class C{  private void isaac2(){  isaacX=mem[isaacI];  isaacA^=isaacA << 13;  isaacA+=mem[isaacJ++];  isaac3();  isaacX=mem[isaacI];  isaacA^=isaacA >>> 6;  isaacA+=mem[isaacJ++];  isaac3();  isaacX=mem[isaacI];  isaacA^=isaacA << 2;  isaacA+=mem[isaacJ++];  isaac3();  isaacX=mem[isaacI];  isaacA^=isaacA >>> 16;  isaacA+=mem[isaacJ++];  isaac3();}  }
class C{  private double[][] generatePartition(double[] sample){  final int length=sample.length;  final double[][] out=new double[5][];  final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);  int cur=0;  int offset=0;  int sampleCount=0;  for (int i=0; i < 5; i++) {    if (cur == length || offset == length) {      break;    }    final int next;    if (i == 4 || cur == length - 1) {      next=length - 1;    } else {      next=randomDataGenerator.nextInt(cur,length - 1);    }    final int subLength=next - cur + 1;    out[i]=new double[subLength];    System.arraycopy(sample,offset,out[i],0,subLength);    cur=next + 1;    sampleCount++;    offset+=subLength;  }  if (sampleCount < 5) {    double[][] out2=new double[sampleCount][];    for (int j=0; j < sampleCount; j++) {      final int curSize=out[j].length;      out2[j]=new double[curSize];      System.arraycopy(out[j],0,out2[j],0,curSize);    }    return out2;  } else {    return out;  }}  }
class C{  public ChiSquaredDistribution(double degreesOfFreedom){  this(degreesOfFreedom,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public String optString(int index,String defaultValue){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getStringValue(cbuf);}  }
class C{  public static FloatBuffer createVector3Buffer(int vertices){  FloatBuffer vBuff=createFloatBuffer(3 * vertices);  return vBuff;}  }
class C{  public BufferedImage createLegend(StyledLayerDescriptor sld,String heading,String filename){  Map<String,BufferedImage> map=createLegend(sld,heading,filename,false);  if ((map != null) && !map.isEmpty()) {    if (map.size() == 1) {      String firstKey=map.keySet().iterator().next();      return map.get(firstKey);    }  }  return null;}  }
class C{  public <T>List<T> listItems(SectionKey<T,ListSection<T>> key){  List<T> result=Lists.newArrayList();  for (  ListSection<T> section : getSections(key)) {    result.addAll(section.items());  }  return result;}  }
class C{  public AemListItem addItem(){  addItemButton.click();  return getLastItem();}  }
class C{  public boolean isDashedHighlightLineEnabled(){  return mHighlightDashPathEffect == null ? false : true;}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public boolean queryAllowOasisXMLCatalogPI(){  String allow=System.getProperty(pAllowPI);  if (allow == null) {    if (resources == null)     readProperties();    if (resources == null)     return defaultOasisXMLCatalogPI;    try {      allow=resources.getString("allow-oasis-xml-catalog-pi");    } catch (    MissingResourceException e) {      return defaultOasisXMLCatalogPI;    }  }  if (allow == null) {    return defaultOasisXMLCatalogPI;  }  return (allow.equalsIgnoreCase("true") || allow.equalsIgnoreCase("yes") || allow.equalsIgnoreCase("1"));}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201152,skilltarget,num0,skillname);}  }
class C{  @Override public void updateStateIndex(MutationBatch batch,Experiment experiment) throws ConnectionException {  updateStateIndex(batch,experiment.getID(),experiment.getState() != State.DELETED ? ExperimentsKeyspace.ExperimentStateIndexKey.NOT_DELETED : ExperimentsKeyspace.ExperimentStateIndexKey.DELETED);}  }
class C{  public ColorMap(int[] map,double min,double max){  palette=map;  minValue=min;  maxValue=max;}  }
class C{  private static int snapTop(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int top,ArrayList<SnapCandidate> snapCandidates){  return snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.TOP),top,snapCandidates);}  }
class C{  public AdsGetSuggestionsQueryWithSchools country(Integer value){  return unsafeParam("country",value);}  }
class C{  public double compute(MathArrays.Function f){  return f.evaluate(internalArray,startIndex,numElements);}  }
class C{  @CalledByNative public static Bitmap createHomeScreenIconFromWebIcon(Context context,Bitmap webIcon){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  int maxInnerSize=Math.round(am.getLauncherLargeIconSize() * MAX_INNER_SIZE_RATIO);  int innerSize=Math.min(maxInnerSize,Math.max(webIcon.getWidth(),webIcon.getHeight()));  int padding=Math.round(ICON_PADDING_RATIO * innerSize);  int outerSize=innerSize + 2 * padding;  Bitmap bitmap=null;  try {    bitmap=Bitmap.createBitmap(outerSize,outerSize,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    Log.w(TAG,"OutOfMemoryError while creating bitmap for home screen icon.");    return webIcon;  }  Canvas canvas=new Canvas(bitmap);  Rect innerBounds=new Rect(padding,padding,outerSize - padding,outerSize - padding);  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);  paint.setFilterBitmap(true);  canvas.drawBitmap(webIcon,null,innerBounds,paint);  int cornerRadius=Math.round(ICON_CORNER_RADIUS_RATIO * outerSize);  Path path=new Path();  path.setFillType(Path.FillType.INVERSE_WINDING);  RectF innerBoundsF=new RectF(innerBounds);  path.addRoundRect(innerBoundsF,cornerRadius,cornerRadius,Path.Direction.CW);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  canvas.drawPath(path,paint);  return bitmap;}  }
class C{  public boolean wasClicked(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasClicked();}  }
class C{  @Override public void dropTo(Droppable droppable){  Offset offset=new Offset(getCurrentLocation(),droppable.getCurrentLocation());  dropByOffset(offset.getX(),offset.getY());}  }
class C{  public JsonPrimitive(Character c){  setValue(c);}  }
class C{  public static Location toLocation(ICompilationUnit unit,int offset,int length) throws JavaModelException {  Location result=new Location();  result.setUri(getFileURI(unit));  int[] loc=JsonRpcHelpers.toLine(unit.getBuffer(),offset);  int[] endLoc=JsonRpcHelpers.toLine(unit.getBuffer(),offset + length);  Range range=new Range();  if (loc != null) {    range.withStart(new Position().withLine(loc[0]).withCharacter(loc[1]));  }  if (endLoc != null) {    range.withEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));  }  return result.withRange(range);}  }
class C{  public void reset(){  removeAllNotifications();  setWakeupTime(sleepTime);}  }
class C{  public void loadConfig(){  byte[] array;  String caption;  char ch;  int i;  String text;  captionMap=new TreeMap<Integer,String>();  captionPut(0x0020,"Space");  captionPut(0x0021,"Exclamation Mark");  captionPut(0x0022,"Quotation Mark");  captionPut(0x0023,"Number Sign");  captionPut(0x0024,"Dollar Sign");  captionPut(0x0025,"Percent Sign");  captionPut(0x0026,"Ampersand");  captionPut(0x0027,"Apostrophe");  captionPut(0x0028,"Left Parenthesis");  captionPut(0x0029,"Right Parenthesis");  captionPut(0x002A,"Asterisk");  captionPut(0x002B,"Plus Sign");  captionPut(0x002C,"Comma");  captionPut(0x002D,"Hyphen-Minus");  captionPut(0x002E,"Full Stop");  captionPut(0x002F,"Solidus");  captionPut(0x0030,"Digit Zero");  captionPut(0x0031,"Digit One");  captionPut(0x0032,"Digit Two");  captionPut(0x0033,"Digit Three");  captionPut(0x0034,"Digit Four");  captionPut(0x0035,"Digit Five");  captionPut(0x0036,"Digit Six");  captionPut(0x0037,"Digit Seven");  captionPut(0x0038,"Digit Eight");  captionPut(0x0039,"Digit Nine");  captionPut(0x003A,"Colon");  captionPut(0x003B,"Semicolon");  captionPut(0x003C,"Less-Than Sign");  captionPut(0x003D,"Equals Sign");  captionPut(0x003E,"Greater-Than Sign");  captionPut(0x003F,"Question Mark");  captionPut(0x0040,"Commercial At");  captionPut(0x0041,"Latin Capital Letter A");  captionPut(0x0042,"Latin Capital Letter B");  captionPut(0x0043,"Latin Capital Letter C");  captionPut(0x0044,"Latin Capital Letter D");  captionPut(0x0045,"Latin Capital Letter E");  captionPut(0x0046,"Latin Capital Letter F");  captionPut(0x0047,"Latin Capital Letter G");  captionPut(0x0048,"Latin Capital Letter H");  captionPut(0x0049,"Latin Capital Letter I");  captionPut(0x004A,"Latin Capital Letter J");  captionPut(0x004B,"Latin Capital Letter K");  captionPut(0x004C,"Latin Capital Letter L");  captionPut(0x004D,"Latin Capital Letter M");  captionPut(0x004E,"Latin Capital Letter N");  captionPut(0x004F,"Latin Capital Letter O");  captionPut(0x0050,"Latin Capital Letter P");  captionPut(0x0051,"Latin Capital Letter Q");  captionPut(0x0052,"Latin Capital Letter R");  captionPut(0x0053,"Latin Capital Letter S");  captionPut(0x0054,"Latin Capital Letter T");  captionPut(0x0055,"Latin Capital Letter U");  captionPut(0x0056,"Latin Capital Letter V");  captionPut(0x0057,"Latin Capital Letter W");  captionPut(0x0058,"Latin Capital Letter X");  captionPut(0x0059,"Latin Capital Letter Y");  captionPut(0x005A,"Latin Capital Letter Z");  captionPut(0x005B,"Left Square Bracket");  captionPut(0x005C,"Reverse Solidus");  captionPut(0x005D,"Right Square Bracket");  captionPut(0x005E,"Circumflex Accent");  captionPut(0x005F,"Low Line");  captionPut(0x0060,"Grave Accent");  captionPut(0x0061,"Latin Small Letter A");  captionPut(0x0062,"Latin Small Letter B");  captionPut(0x0063,"Latin Small Letter C");  captionPut(0x0064,"Latin Small Letter D");  captionPut(0x0065,"Latin Small Letter E");  captionPut(0x0066,"Latin Small Letter F");  captionPut(0x0067,"Latin Small Letter G");  captionPut(0x0068,"Latin Small Letter H");  captionPut(0x0069,"Latin Small Letter I");  captionPut(0x006A,"Latin Small Letter J");  captionPut(0x006B,"Latin Small Letter K");  captionPut(0x006C,"Latin Small Letter L");  captionPut(0x006D,"Latin Small Letter M");  captionPut(0x006E,"Latin Small Letter N");  captionPut(0x006F,"Latin Small Letter O");  captionPut(0x0070,"Latin Small Letter P");  captionPut(0x0071,"Latin Small Letter Q");  captionPut(0x0072,"Latin Small Letter R");  captionPut(0x0073,"Latin Small Letter S");  captionPut(0x0074,"Latin Small Letter T");  captionPut(0x0075,"Latin Small Letter U");  captionPut(0x0076,"Latin Small Letter V");  captionPut(0x0077,"Latin Small Letter W");  captionPut(0x0078,"Latin Small Letter X");  captionPut(0x0079,"Latin Small Letter Y");  captionPut(0x007A,"Latin Small Letter Z");  captionPut(0x007B,"Left Curly Bracket");  captionPut(0x007C,"Vertical Line");  captionPut(0x007D,"Right Curly Bracket");  captionPut(0x007E,"Tilde");  if (isMswinFlag()) {    array=new byte[1];    for (i=0x20; i <= 0xFF; i++) {      array[0]=(byte)i;      text=new String(array);      if ((text.length() == 1) && ((ch=text.charAt(0)) != REPLACE_CHAR)) {        caption=(String)captionMap.get(new Integer((int)ch));        if (caption == null)         caption=""; else         caption+=" = ";        caption+=winaltNotation(i);        captionPut((int)ch,caption);      }    }  }}  }
class C{  public FieldConfigDouble(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public boolean hasDefaultValue(){  return getDefaultValueOpt().getNumChild() != 0;}  }
class C{  protected GroupsAddLinkQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void paintSelection(Graphics g0){  Graphics2D g=(Graphics2D)g0;  SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);    g.setColor(highlightColorSemiTransparent);    g.fill(rect);    g.setColor(highlightColor);    g.draw(rect);  }}  }
class C{  public int compare(File file1,File file2){  int result=0;  for (  Comparator<File> delegate : delegates) {    result=delegate.compare(file1,file2);    if (result != 0) {      break;    }  }  return result;}  }
class C{  public static void emit(String event,Object... args){  if (instance.events.containsKey(event) && !instance.disabled.contains(event)) {    instance.events.get(event).run(args);    log(event + " emitted",args);  } else   log(event + " not exist");}  }
class C{  public AirMapClient(final String apiKey,final String token){  this.authToken=token;  this.xApiKey=apiKey;  clearAndResetHeaders();}  }
class C{  private void logIndexed(String repoName,List<String[]> reportList){  try {    CSVWriter writer=new CSVWriter(new FileWriter(Helpers.getLogPath() + repoName + ".csv.tmp"));    writer.writeAll(reportList);    writer.flush();    writer.close();    Path source=Paths.get(Helpers.getLogPath() + repoName + ".csv.tmp");    Files.move(source,source.resolveSibling(repoName + ".csv"),StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException ex) {    Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ " logIndexed for "+ repoName+ "\n with message: "+ ex.getMessage());  }}  }
class C{  protected void syncPast(Set<TokenKind> terminatingTokens){  while (!matchesAnyOf(terminatingTokens)) {    builder.advanceLexer();  }}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  Hashtable removeUserDataTable(Node n){  if (userData == null) {    return null;  }  return (Hashtable)userData.get(n);}  }
class C{  public Builder addColumnsLong(String... names){  for (  String s : names)   addColumnLong(s);  return this;}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  final public void addCookie(Cookie c){  if (c != null) {    resp.addCookie(c);  }}  }
class C{  @Override public boolean containsSymbol(String symbol){synchronized (fSymbolTable) {    return fSymbolTable.containsSymbol(symbol);  }}  }
class C{  public HeartbeatInfo(HeartbeatInfo other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  if (other.isSetAppkey()) {    this.appkey=other.appkey;  }  this.sendTime=other.sendTime;  if (other.isSetLoadInfo()) {    this.loadInfo=new LoadInfo(other.loadInfo);  }  this.status=other.status;}  }
class C{  @Override public void onTabClosed(long time,int id,int nextId,boolean incognito){  super.onTabClosed(time,id,nextId,incognito);  if (mClosedTab != null) {    TabModel nextModel=mTabModelSelector.getModelForTabId(nextId);    if (nextModel != null) {      LayoutTab nextLayoutTab=createLayoutTab(nextId,nextModel.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);      nextLayoutTab.setDrawDecoration(false);      mLayoutTabs=new LayoutTab[]{nextLayoutTab,mClosedTab};      updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(nextId,mClosedTab.getId())));    } else {      mLayoutTabs=new LayoutTab[]{mClosedTab};    }    forceAnimationToFinish();    mAnimatedTab=mClosedTab;    addToAnimation(this,Property.DISCARD_AMOUNT,0,getDiscardRange(),TAB_CLOSED_ANIMATION_DURATION,0,false,BakedBezierInterpolator.FADE_OUT_CURVE);    mClosedTab=null;    if (nextModel != null) {      mTabModelSelector.selectModel(nextModel.isIncognito());    }  }  startHiding(nextId,false);}  }
class C{  public static boolean isValidIP4Range(String possibleIPAddress){  return IP_SUB_PATTERN.matcher(possibleIPAddress).matches();}  }
class C{  @Override public void close() throws IOException {  InputStream input=m_streams.get();  if (null != input) {    input.close();  }}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gGraph.locateVertex(new VertexImpl(sStartNode));  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  EdgeCachedLocator ecl;  if (eclLocator == null)   ecl=new EdgeCachedLocator(100); else   ecl=eclLocator;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=1.0;    dIncreaseWeight=dStartWeight;    WeightedEdge weCorrectEdge=(WeightedEdge)ecl.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        ecl.addedEdge(gGraph.addEdge(vA,vB,dNewWeight));      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  DelegatingHttpURLConnection(URL url){  super(url);}  }
class C{  public DefaultGigaSpace(IJSpace space,TransactionProvider txProvider,ExceptionTranslator exTranslator,int defaultIsolationLevel){  this.space=(ISpaceProxy)space;  this.txProvider=txProvider;  this.exTranslator=exTranslator;  this.typeManager=new DefaultGigaSpaceTypeManager(this.space,this.exTranslator);  this.springIsolationLevel=defaultIsolationLevel;  this.defaultIsolationLevel=IsolationLevelHelpers.convertSpringToSpaceIsolationLevel(defaultIsolationLevel,space.getReadModifiers());  this.defaultCountModifiers=IsolationLevelHelpers.toCountModifiers(this.defaultIsolationLevel);  this.defaultReadModifiers=IsolationLevelHelpers.toReadModifiers(this.defaultIsolationLevel);}  }
class C{  public boolean remove(Action a){  return m_actions.remove(a);}  }
class C{  public ChangeReport onEquipmentUnitRemove(final EquipmentUnitRemove equipmentUnitRemove){  log.debug("onEquipmentUnitRemove - entering onEquipmentUnitRemove()..");  ChangeReport changeReport=new ChangeReport(equipmentUnitRemove);  changeReport.setState(CHANGE_STATE.SUCCESS);  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  if (processConfiguration.getEquipmentConfiguration(equipmentUnitRemove.getEquipmentId()) == null) {    changeReport.appendError("Equipment unit id: " + equipmentUnitRemove.getEquipmentId() + " is unknown");    changeReport.setState(CHANGE_STATE.FAIL);    return changeReport;  }  if (!unregisterEquipmentUnit(equipmentUnitRemove.getEquipmentId())) {    changeReport.setState(CHANGE_STATE.REBOOT);    changeReport.appendWarn("problem detected while unregistering equipment id: " + equipmentUnitRemove.getEquipmentId() + ". You need to restart the DAQ");  }  return changeReport;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200959,skillcaster,skilltarget,skillname);}  }
class C{  public AudioInputStream synthesize(List<Element> tokensAndBoundaries,String outputParams) throws SynthesisException {  return synthesizer.synthesize(tokensAndBoundaries,this,outputParams);}  }
class C{  public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {  String abi=Build.CPU_ABI;  String libraryName;  if (abi.equalsIgnoreCase("armeabi")) {    libraryName="armeabi";  } else   if (abi.equalsIgnoreCase("x86")) {    libraryName="x86";  } else   if (abi.contains("armeabi-v7")) {    libraryName="armeabi-v7a";  } else {    return;  }  AssetManager manager=context.getAssets();  final InputStream is=manager.open(libraryName + "/" + assetsFilename);  copyFile(file,is,mode);}  }
class C{  protected int insertionIndex(T obj){  final TObjectHashingStrategy<T> hashing_strategy=_hashingStrategy;  final Object[] set=_set;  final int length=set.length;  final int hash=hashing_strategy.computeHashCode(obj) & 0x7fffffff;  int index=hash % length;  Object cur=set[index];  if (cur == FREE) {    return index;  } else   if (cur != REMOVED && hashing_strategy.equals((T)cur,obj)) {    return -index - 1;  } else {    final int probe=1 + (hash % (length - 2));    if (cur != REMOVED) {      do {        index-=probe;        if (index < 0) {          index+=length;        }        cur=set[index];      } while (cur != FREE && cur != REMOVED && !hashing_strategy.equals((T)cur,obj));    }    if (cur == REMOVED) {      int firstRemoved=index;      while (cur != FREE && (cur == REMOVED || !hashing_strategy.equals((T)cur,obj))) {        index-=probe;        if (index < 0) {          index+=length;        }        cur=set[index];      }      return (cur != FREE) ? -index - 1 : firstRemoved;    }    return (cur != FREE) ? -index - 1 : index;  }}  }
class C{  private int deleteAssociatedJoinTableRows(DataSupport baseObj){  int rowsAffected=0;  Set<String> associatedTableNames=baseObj.getAssociatedModelsMapForJoinTable().keySet();  for (  String associatedTableName : associatedTableNames) {    String joinTableName=DBUtility.getIntermediateTableName(baseObj.getTableName(),associatedTableName);    String fkName=getForeignKeyColumnName(baseObj.getTableName());    rowsAffected+=mDatabase.delete(joinTableName,fkName + " = " + baseObj.getBaseObjId(),null);  }  return rowsAffected;}  }
class C{  public void saveAndExit(View v){  finish();}  }
class C{  void deleteData(CharacterData node,int offset,int count){  fDeleteNode=node;  node.deleteData(offset,count);  fDeleteNode=null;}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,encoding);}  }
class C{  public boolean negativeOrNull(){  if (isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,this,newInstance(getZero()));    return false;  }  return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());}  }
class C{  public String fieldName(){  return fldName;}  }
class C{  public String toString(){  return Graph.toString();}  }
class C{  private AnovaStats anovaStats(final Collection<double[]> categoryData) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(categoryData);  final Collection<StreamingStatistics> categoryDataSummaryStatistics=new ArrayList<StreamingStatistics>(categoryData.size());  for (  final double[] data : categoryData) {    final StreamingStatistics dataSummaryStatistics=new StreamingStatistics();    categoryDataSummaryStatistics.add(dataSummaryStatistics);    for (    final double val : data) {      dataSummaryStatistics.addValue(val);    }  }  return anovaStats(categoryDataSummaryStatistics,false);}  }
class C{  public boolean process(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String cname=method.getDeclaringClass().getName();  NativeMethodClass clsSim=cnameToSim.get(cname);  if (clsSim == null) {    return true;  } else {    try {      clsSim.simulateMethod(method,thisVar,returnVar,params);    } catch (    NativeMethodNotSupportedException e) {      if (DEBUG) {        G.v().out.println("WARNING: it is unsafe to simulate the method ");        G.v().out.println("         " + method.toString());      }    }    return true;  }}  }
class C{  public static int[] convertToIntArray(long[] longArray){  int[] intArray=new int[longArray.length];  for (int i=0; i < longArray.length; i++) {    intArray[i]=(int)longArray[i];  }  return intArray;}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  static void verify(Class[] classes) throws InvalidObjectException {  if (classes == null || classes.length == 0) {    throw new InvalidObjectException("cannot create constraint with no elements");  }  for (int i=classes.length; --i >= 0; ) {    Class ci=classes[i];    if (ci == null) {      throw new InvalidObjectException("elements cannot be null");    }    if (ci.isArray() || ci.isPrimitive() || (Modifier.isFinal(ci.getModifiers()) && !Principal.class.isAssignableFrom(ci))) {      throw new InvalidObjectException("invalid class");    }    for (int j=i; --j >= 0; ) {      Class cj=classes[j];      if (ci.isAssignableFrom(cj) || cj.isAssignableFrom(ci)) {        throw new InvalidObjectException("cannot create constraint with redundant elements");      }    }  }}  }
class C{  public void initialiseSingle(List<ValueComboBoxData> valueList){  PrefManager.getInstance().addVendorOptionListener(this);  if (valueList != null) {    valueMap.clear();    this.valueList.clear();    for (    ValueComboBoxData data : valueList) {      valueMap.put(data.getKey(),data);      this.valueList.add(data);    }    update();  }}  }
class C{  public <T>void putEnv(String key,T value){  String ekey=FlexibleStringExpander.expandString(key,this.env);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  this.putEnv(fma,value);}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public FileHeaderPage(String fileName,Transaction tx){  this.fileName=fileName;  this.tx=tx;  blk=new BlockId(fileName,0);  currentBuff=tx.bufferMgr().pin(blk);}  }
class C{  public NotificationsGetQuery filters(NotificationsGetFilter... value){  return unsafeParam("filters",value);}  }
class C{  public SM_QUEST_ACTION(int questId,QuestStatus status,int step){  this.action=2;  this.questId=questId;  this.status=status.value();  this.step=step;}  }
class C{  public int executeUpdate() throws GenericDataSourceException {  try {    return _ps.executeUpdate();  } catch (  SQLException sqle) {    this.checkLockWaitInfo(sqle);    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }}  }
class C{  private void printError(String type,XMLParseException ex){  fOut.print("[");  fOut.print(type);  fOut.print("] ");  String systemId=ex.getExpandedSystemId();  if (systemId != null) {    int index=systemId.lastIndexOf('/');    if (index != -1)     systemId=systemId.substring(index + 1);    fOut.print(systemId);  }  fOut.print(':');  fOut.print(ex.getLineNumber());  fOut.print(':');  fOut.print(ex.getColumnNumber());  fOut.print(": ");  fOut.print(ex.getMessage());  fOut.println();  fOut.flush();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_1_GUILD_MASTER(String value0){  return new SM_SYSTEM_MESSAGE(1300266,value0);}  }
class C{  @Override public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_NOT_PROC_GIVE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300506,value0);}  }
class C{  @Override public List<Object[]> collectData(AbstractScannedResult scannedResult,int batchSize){  List<Object[]> listBasedResult=new ArrayList<>(batchSize);  QueryMeasure[] queryMeasures=tableBlockExecutionInfos.getQueryMeasures();  ByteArrayWrapper wrapper=null;  int rowCounter=0;  while (scannedResult.hasNext() && rowCounter < batchSize) {    Object[] row=new Object[1 + queryMeasures.length];    wrapper=new ByteArrayWrapper();    wrapper.setDictionaryKey(scannedResult.getDictionaryKeyArray());    wrapper.setNoDictionaryKeys(scannedResult.getNoDictionaryKeyArray());    wrapper.setComplexTypesKeys(scannedResult.getComplexTypeKeyArray());    row[0]=wrapper;    fillMeasureData(row,1,scannedResult);    listBasedResult.add(row);    rowCounter++;  }  updateData(listBasedResult);  return listBasedResult;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public Chunk(ChunkManager chunkManager,int startX,int startY,boolean topChunk){  this.startX=startX;  this.startY=startY;  this.chunkManager=chunkManager;  this.topChunk=topChunk;}  }
class C{  public KMeansPlusPlusClusterer(final int k,final int maxIterations,final DistanceMeasure measure,final RandomGenerator random,final EmptyClusterStrategy emptyStrategy){  super(measure);  this.k=k;  this.maxIterations=maxIterations;  this.random=random;  this.emptyStrategy=emptyStrategy;}  }
class C{  @Override public KeyStore loadKeyStore(File file,String keyStoreType,String password){  KeyStore keyStore;  try {    keyStore=KeyStore.getInstance(keyStoreType);  } catch (  KeyStoreException e) {    throw new KeyStoreAccessException("Unable to get KeyStore instance of type: " + keyStoreType,e);  }  try {    InputStream keystoreAsStream=new FileInputStream(file);    keyStore.load(keystoreAsStream,password.toCharArray());  } catch (  IOException e) {    throw new ImportException("Unable to read KeyStore from file: " + file.getName(),e);  }catch (  CertificateException|NoSuchAlgorithmException e) {    throw new ImportException("Error while reading KeyStore",e);  }  return keyStore;}  }
class C{  public CFGOptionMatcher(CFGOption[] options){  this.options=options;}  }
class C{  private boolean isNotUnresponsive(Proxy proxy){  Long lastFailTime=this.failedDelayCache.get(proxy.address());  return retryDelayHasPassedBy(lastFailTime);}  }
class C{  public void encoding(){  if (stripe_unit_size % block_nbr != 0) {    throw new RuntimeException(" Cannot  striping. wrong DATA_LENGTH!");  }  STAR_encoding_row();  STAR_encoding_diag1();  STAR_encoding_diag2();}  }
class C{  public static IOFileFilter or(IOFileFilter... filters){  return new OrFileFilter(toList(filters));}  }
class C{  private static boolean containsOnlyTransientAndStaticFields(List<Field> fields){  boolean containsNormalField=false;  for (  Field field : fields) {    if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {      containsNormalField=true;    }  }  return !containsNormalField;}  }
class C{  public void write(OutputStream outp) throws IOException, jasError {  class_env.setSource(source_name);  class_env.write(new DataOutputStream(outp));}  }
class C{  public boolean needsDefaultFormatter(){  if (mYAxisValueFormatter == null)   return true;  if (mYAxisValueFormatter instanceof DefaultValueFormatter)   return true;  return false;}  }
class C{  protected PlacesGetByIdQuery places(List<Integer> value){  return unsafeParam("places",value);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private static void writeSpaces(Writer out,int amt) throws IOException {  while (amt > 0) {    out.write(' ');    amt--;  }}  }
class C{  private void initPattern(){  StringBuffer patternTemplateRegex=new StringBuffer();  logger.debug("Get placeholder matcher");  Matcher placeholderMatcher=getPlaceholderMatcher();  logger.debug("Replace all placeholder with regex group capture");  while (placeholderMatcher.find()) {    String group=placeholderMatcher.group(1);    if (!groups.contains(group)) {      logger.trace("New group found, add it, replace with a capture group");      groups.add(group);      String groupRegex=getGroupRegex(group);      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("(?<" + group + ">"+ groupRegex+ ")"));    } else {      logger.trace("Existing group found, replace with a back reference");      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("\\k<" + group + ">"));    }  }  placeholderMatcher.appendTail(patternTemplateRegex);  String patternRegex=patternTemplateRegex.toString();  logger.debug("pattern:" + patternRegex);  pattern=Pattern.compile(patternRegex);}  }
class C{  public static double combination(double n,double r){  double nFac=MathUtils.factorial(n);  double rFac=MathUtils.factorial(r);  double nMinusRFac=MathUtils.factorial((n - r));  return nFac / (rFac * nMinusRFac);}  }
class C{  MdInputStream(URL url,InputStream in,MessageDigest messageDigest,byte[] expectedDigest){  if (url == null || in == null || messageDigest == null) {    throw new NullPointerException();  }  this.url=url;  this.in=in;  this.messageDigest=messageDigest;  this.expectedDigest=expectedDigest.clone();}  }
class C{  public SingularValueDecomposition(Matrix Arg){  double[][] A=Arg.getArrayCopy();  m=Arg.getRowDimension();  n=Arg.getColumnDimension();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Maths.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Maths.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  double tiny=Math.pow(2.0,-966.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= tiny + eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Maths.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Maths.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Maths.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Maths.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean hasTrackedEntity(){  return trackedEntity != null;}  }
class C{  public JSONObject(Map map){  this.map=new HashMap();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      this.map.put(e.getKey(),wrap(e.getValue()));    }  }}  }
class C{  @SubscribeEvent public void breakSpeedPenalty(PlayerEvent.BreakSpeed event){  EntityPlayer player=event.getEntityPlayer();  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;  IBlockState state=event.getState();  float f=player.inventory.getStrVsBlock(state);  if (f > 1.0F) {    int i=EnchantmentHelper.getEfficiencyModifier(player);    ItemStack itemstack=player.getHeldItemMainhand();    if (i > 0 && itemstack != null) {      float intermediate=(float)(i * i + 1);      if (!itemstack.canHarvestBlock(state) && f <= 1.0F) {        f+=intermediate * 0.08F;      } else {        f+=intermediate;      }    }  }  if (player.isPotionActive(MobEffects.HASTE)) {    f*=1.0F + (float)(player.getActivePotionEffect(MobEffects.HASTE).getAmplifier() + 1) * 0.2F;  }  if (player.isPotionActive(MobEffects.MINING_FATIGUE)) {    float f1;switch (player.getActivePotionEffect(MobEffects.MINING_FATIGUE).getAmplifier()) {case 0:      f1=0.3F;    break;case 1:  f1=0.09F;break;case 2:f1=0.0027F;break;case 3:default :f1=8.1E-4F;}f*=f1;}if (player.isInsideOfMaterial(Material.WATER) && !EnchantmentHelper.getAquaAffinityModifier(player)) {f/=5.0F;}if (!player.onGround) {f/=5.0F;}f*=EntityPlayerExt.getHealthAndExhaustionModifier(player);if (f < 0) f=0;event.setNewSpeed(f);}  }
class C{  public AppsGetQuery appIds(List<String> value){  return unsafeParam("app_ids",value);}  }
class C{  public double[] generate(int nSamples){  int m=nSamples / 2;  double r;  double pi=Math.PI;  double[] w=new double[nSamples];switch (windowType) {case BARTLETT:    for (int n=0; n < nSamples; n++)     w[n]=1.0f - Math.abs(n - m) / m;  break;case HANNING:r=pi / (m + 1);for (int n=-m; n < m; n++) w[m + n]=0.5f + 0.5f * Math.cos(n * r);break;case HAMMING:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.54f + 0.46f * Math.cos(n * r);break;case BLACKMAN:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.42f + 0.5f * Math.cos(n * r) + 0.08f * Math.cos(2 * n * r);break;default :for (int n=0; n < nSamples; n++) w[n]=1.0f;}return w;}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public static List<double[]> coordSplit(List<Double> vector){  if (vector == null)   return null;  List<double[]> ret=new ArrayList<double[]>();  double[] xVals=new double[vector.size() / 2];  double[] yVals=new double[vector.size() / 2];  int xTracker=0;  int yTracker=0;  for (int i=0; i < vector.size(); i++) {    if (i % 2 == 0)     xVals[xTracker++]=vector.get(i); else     yVals[yTracker++]=vector.get(i);  }  ret.add(xVals);  ret.add(yVals);  return ret;}  }
class C{  public static Map<String,Object> prodFindAssociatedByType(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  String productIdTo=(String)context.get("productIdTo");  String type=(String)context.get("type");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  Boolean cvaBool=(Boolean)context.get("checkViewAllow");  boolean checkViewAllow=(cvaBool == null ? false : cvaBool);  String prodCatalogId=(String)context.get("prodCatalogId");  Boolean bidirectional=(Boolean)context.get("bidirectional");  bidirectional=bidirectional == null ? false : bidirectional;  Boolean sortDescending=(Boolean)context.get("sortDescending");  sortDescending=sortDescending == null ? false : sortDescending;  if (productId == null && productIdTo == null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.both_productId_and_productIdTo_cannot_be_null",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  if (productId != null && productIdTo != null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.both_productId_and_productIdTo_cannot_be_defined",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  productId=productId == null ? productIdTo : productId;  GenericValue product=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_reading_product_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  if (product == null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_getting_product_entity",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  try {    List<GenericValue> productAssocs=null;    List<String> orderBy=FastList.newInstance();    if (sortDescending) {      orderBy.add("sequenceNum DESC");    } else {      orderBy.add("sequenceNum");    }    if (bidirectional) {      EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",productId),EntityCondition.makeCondition("productIdTo",productId)),EntityJoinOperator.OR);      productAssocs=EntityQuery.use(delegator).from("ProductAssoc").where(EntityCondition.makeCondition(cond,EntityCondition.makeCondition("productAssocTypeId",type))).orderBy(orderBy).cache(true).queryList();    } else {      if (productIdTo == null) {        productAssocs=product.getRelated("MainProductAssoc",UtilMisc.toMap("productAssocTypeId",type),orderBy,true);      } else {        productAssocs=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId",type),orderBy,true);      }    }    productAssocs=EntityUtil.filterByDate(productAssocs);    if (checkViewAllow && prodCatalogId != null && UtilValidate.isNotEmpty(productAssocs)) {      String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,prodCatalogId);      if (viewProductCategoryId != null) {        if (productIdTo == null) {          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productIdTo");        } else {          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productId");        }      }    }    result.put("assocProducts",productAssocs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_product_association_relation_error",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  return result;}  }
class C{  public static double dotProduct(Vector3D v1,Vector3D v2){  return v1.dotProduct(v2);}  }
class C{  public JsonRequestParams(final String key,final String value){  put(key,value);}  }
class C{  public ToolPanel(Map<Class<?>,List<ToolInterface>> toolMap){  this.toolMap=toolMap;}  }
class C{  private static int snapHeight(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int height,ArrayList<SnapCandidate> snapCandidates){  int bottomPosition=widget.getDrawY() + height;  bottomPosition=snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottomPosition,snapCandidates);  height=bottomPosition - widget.getDrawY();  return height;}  }
class C{  @Override public void importData(@NotNull Collection<DataNode<AndroidGradleModel>> toImport,@Nullable ProjectData projectData,@NotNull Project project,@NotNull IdeModifiableModelsProvider modelsProvider){  if (!toImport.isEmpty()) {    try {      if (projectData != null) {        GradleProjectSettings gradleProjectSettings=GradleSettings.getInstance(project).getLinkedProjectSettings(projectData.getLinkedExternalProjectPath());        if (gradleProjectSettings != null && gradleProjectSettings.isResolveModulePerSourceSet()) {          gradleProjectSettings.setResolveModulePerSourceSet(false);          NotificationData notificationData=new NotificationData("Gradle settings were updated","'Create separate module per source set' feature was disabled. \n" + "It isn't supported by android projects",NotificationCategory.WARNING,PROJECT_SYNC);          ExternalSystemNotificationManager.getInstance(project).showNotification(GradleConstants.SYSTEM_ID,notificationData);        }      }      doImport(toImport,project,modelsProvider);    } catch (    Throwable e) {      LOG.info(String.format("Failed to set up Android modules in project '%1$s'",project.getName()),e);      String msg=e.getMessage();      if (msg == null) {        msg=e.getClass().getCanonicalName();      }      GradleSyncState.getInstance(project).syncFailed(msg);    }  }}  }
class C{  public VideoSaveQuery wallpost(Boolean value){  return unsafeParam("wallpost",value);}  }
class C{  public CreateSiteWindow waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(currentWindow));  return this;}  }
class C{  public int hashCode(){  int hash=37;  hash=37 * hash + Float.floatToIntBits(m00);  hash=37 * hash + Float.floatToIntBits(m01);  hash=37 * hash + Float.floatToIntBits(m02);  hash=37 * hash + Float.floatToIntBits(m10);  hash=37 * hash + Float.floatToIntBits(m11);  hash=37 * hash + Float.floatToIntBits(m12);  hash=37 * hash + Float.floatToIntBits(m20);  hash=37 * hash + Float.floatToIntBits(m21);  hash=37 * hash + Float.floatToIntBits(m22);  return hash;}  }
class C{  public static void objects(int level,Object... params){  log(level,0,null,FMT_OBJECT,null,null,params);}  }
class C{  public TestNewSLDPanel(){  super();}  }
class C{  public boolean hasAccess(String... name){  if (name == null) {    return true;  }  for (  String s : name) {    if (access.contains(s)) {      return true;    }    if (!X.isEmpty(s)) {      Access.set(s);    }    int i=s.lastIndexOf(".");    if (i > 0) {      String s1=s.substring(0,i) + ".admin";      if (access.contains(s1)) {        return true;      }    }  }  return access.contains("access.config.admin");}  }
class C{  public static String dbNameToVarName(String columnName){  if (columnName == null)   return null;  StringBuilder fieldName=new StringBuilder(columnName.length());  boolean toUpper=false;  for (int i=0; i < columnName.length(); i++) {    char ch=columnName.charAt(i);    if (ch == '_') {      toUpper=true;    } else     if (toUpper) {      fieldName.append(Character.toUpperCase(ch));      toUpper=false;    } else {      fieldName.append(Character.toLowerCase(ch));    }  }  return fieldName.toString();}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public GroupsGetMembersQueryWithFilter offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static void writeVInt(DataOutput stream,int i) throws IOException {  WritableUtils.writeVInt(stream,i);}  }
class C{  protected AccountGetAppPermissionsQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_NOT_ENOUGH_KINA(long num0){  return new SM_SYSTEM_MESSAGE(901285,num0);}  }
class C{  @Override public void characters(char ch[],int start,int length) throws SAXException {  return;}  }
class C{  public CalcBehaviour(String sDoc1,String sDoc2,int iWordNGramSize_Min,int iWordNGramSize_Max,int iWord_Dmax,int iCharacterNGramSize_Min,int iCharacterNGramSize_Max,int iCharacter_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,boolean bSilent,String sID){  Doc1=sDoc1;  Doc2=sDoc2;  ID=sID;  WordNGramSize_Min=iWordNGramSize_Min;  WordNGramSize_Max=iWordNGramSize_Max;  Word_Dmax=iWord_Dmax;  CharacterNGramSize_Min=iCharacterNGramSize_Min;  CharacterNGramSize_Max=iCharacterNGramSize_Max;  Character_Dmax=iCharacter_Dmax;  DoCharNGrams=bDoCharNGrams;  DoWordNGrams=bDoWordNGrams;  Silent=bSilent;}  }
class C{  public static void registerLocalTimeMBean(String containerName){  MBeanServer mBeanServer=getMBeanServer(containerName);  if (mBeanServer == null)   return;  LocalTimeMBean localTimeMBean=new LocalTime();  ObjectName objName=LocalTimeConstants.MBEAN_NAME;  if (!mBeanServer.isRegistered(objName)) {    try {      mBeanServer.registerMBean(localTimeMBean,objName);    } catch (    InstanceAlreadyExistsException e) {    }catch (    NotCompliantMBeanException e) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.log(Level.SEVERE,failedLocalTimeMBeanRegistrationMessagePrefix + containerName + ">",e);      }    }catch (    MBeanRegistrationException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,failedLocalTimeMBeanRegistrationMessagePrefix + containerName + ">",e);      }    }    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + ">");    }  }}  }
class C{  public static final void emoteStartDancing3(Npc owner){  owner.unsetState(CreatureState.NPC_IDLE);  owner.setState(CreatureState.ACTIVE);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,142,0));}  }
class C{  public boolean simplify_offline(){  return soot.PhaseOptions.getBoolean(options,"simplify-offline");}  }
class C{  public double apply(UnivariateStatistic stat){  return eDA.compute(stat);}  }
class C{  public NewsfeedSearchQueryWithExtended endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  public static double standardDeviation(final double[] values){  return FastMath.sqrt(variance(values));}  }
class C{  private Candidate newCandidate(S2Cell cell){  if (!region.mayIntersect(cell)) {    return null;  }  boolean isTerminal=false;  if (cell.level() >= minLevel) {    if (interiorCovering) {      if (region.contains(cell)) {        isTerminal=true;      } else       if (cell.level() + levelMod > maxLevel) {        return null;      }    } else {      if (cell.level() + levelMod > maxLevel || region.contains(cell)) {        isTerminal=true;      }    }  }  Candidate candidate=new Candidate();  candidate.cell=cell;  candidate.isTerminal=isTerminal;  if (!isTerminal) {    candidate.children=new Candidate[1 << maxChildrenShift()];  }  candidatesCreatedCounter++;  return candidate;}  }
class C{  protected void beforeMove(){  if (!Silent) synchronized (System.err) {    System.err.println(getLocalName() + " is now migrating.");  }}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  protected void scheduleNewInvokerIfAppropriate(){  if (isRunning()) {synchronized (this.activeInvokerMonitor) {      if (this.scheduledInvokers.size() < this.maxConcurrentConsumers && !hasIdleInvokers()) {        scheduleNewInvoker();        if (logger.isDebugEnabled()) {          logger.debug(message("Raised scheduled invoker count [" + scheduledInvokers.size() + "]"));        }      }    }  }}  }
class C{  @Override public void buildStarted(CompileContext context){  JpsProject project=context.getProjectDescriptor().getProject();  if (AndroidGradleJps.hasAndroidGradleFacet(project)) {    JavaBuilder.IS_ENABLED.set(context,false);    AndroidSourceGeneratingBuilder.IS_ENABLED.set(context,false);  }}  }
class C{  public static double lineDistance(Vec3 lineVec,Vec3 point){  double mag=lineVec.lengthVector();  Vec3 nPoint=scale(point,-1);  return lineVec.crossProduct(nPoint).lengthVector() / mag;}  }
class C{  public static long elapsedMilliseconds(Date dateStart,Date dateEnd){  return dateEnd.getTime() - dateStart.getTime();}  }
class C{  public boolean isPaymentsAdequate(){  return CheckOutHelper.isPaymentsAdequate(this);}  }
class C{  public static FeatureTypeStyle createNewFeatureTypeStyle(){  FeatureTypeStyle featureTypeStyle=styleFactory.createFeatureTypeStyle();  return featureTypeStyle;}  }
class C{  void revalidateGrid(){  JScrollPane scrollPane=(JScrollPane)NamesPanel.this.getParent().getParent();  Dimension bounds=scrollPane.getPreferredSize();  if (alignment != null && !alignment.getRowCompressor().isEnabled()) {    int width=(int)Math.max(bounds.width,cellWidth * alignment.getMaxNameLength());    setSize(width,(int)(cellHeight * alignment.getNumberOfSequences() + 0.5) + 3);  }  setPreferredSize(getSize());  revalidate();}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  public int size(){synchronized (contexts) {    return contexts.size();  }}  }
class C{  public void assertFilesExist(@NotNull String... paths){  VirtualFile baseDir=myProject.getBaseDir();  for (  String path : paths) {    VirtualFile file=baseDir.findFileByRelativePath(path);    assertTrue("File doesn't exist: " + path,file != null && file.exists());  }}  }
class C{  public WindowInsetsCompat onApplyWindowInsets(CoordinatorLayout coordinatorLayout,V child,WindowInsetsCompat insets){  return insets;}  }
class C{  public boolean runAfter(List list,int max){  return false;}  }
class C{  @After public void tearDown() throws Exception {  dictionaryChunksWrapper=null;  expectedData=null;  dictionaryChuncks=null;}  }
class C{  public Map<String,ColumnFamilyMetadata> populateColumnFamiliesMetadata(SpaceDocumentColumnFamilyMapper mapper){  RangeSlicesQuery<String,String,Object> rangeQuery=HFactory.createRangeSlicesQuery(keyspace,StringSerializer.get(),StringSerializer.get(),SerializerProvider.getObjectSerializer()).setColumnFamily(ColumnFamilyMetadataMetadata.NAME).setColumnNames(ColumnFamilyMetadataMetadata.BLOB_COLUMN_NAME).setKeys("","");  OrderedRows<String,String,Object> result=rangeQuery.execute().get();  for (  Row<String,String,Object> row : result) {    HColumn<String,Object> column=row.getColumnSlice().getColumnByName(ColumnFamilyMetadataMetadata.BLOB_COLUMN_NAME);    ColumnFamilyMetadata metadata=(ColumnFamilyMetadata)column.getValue();    initMetadataAndAddToCache(mapper,metadata);  }  return metadataCache.getColumnFamiliesMetadata();}  }
class C{  public boolean isLoadMoreEnabled(){  return mLoadMoreEnabled;}  }
class C{  @Override public boolean containsVertex(Set<String> labels){  Objects.requireNonNull(labels,"labels cannot be null");  return this.labels.stream().anyMatch(null);}  }
class C{  protected void addFilter(DimensionalObject filter){  filters.add(filter);}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  @Override public ListenableFuture<LeaseKeepAliveResponse> keepAliveOnce(long leaseId){  StreamObserver<LeaseKeepAliveRequest> requestObserver=this.leaseStub.leaseKeepAlive(keepAliveResponseStreamObserver);  requestObserver.onNext(newKeepAliveRequest(leaseId));  requestObserver.onCompleted();  throw new UnsupportedOperationException();}  }
class C{  public WrapLayout(int align){  super(align);}  }
class C{  private RxJavaAssemblyTracking(){  throw new IllegalStateException("No instances!");}  }
class C{  public double logJointProb(String a,String b){  return logConditionalProb(a,b) + logProb(a);}  }
class C{  public boolean isParallelTo(final Line line){  return FastMath.abs(MathArrays.linearCombination(sin,line.cos,-cos,line.sin)) < tolerance;}  }
class C{  @Override public void applyInline(double[] data,int pos,int len){  int i;  double[] dataOut=new double[len];  if (len > real.length) {    throw new IllegalArgumentException("Length must not be larger than FFT size");  }  int middle=len / 2 + len % 2;  System.arraycopy(data,0,dataOut,0,len);  System.arraycopy(dataOut,pos + middle,real,0,len - middle);  System.arraycopy(dataOut,pos,real,real.length - middle,middle);  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);  Arrays.fill(imag,0,imag.length,0.);  FFT.transform(real,imag,false);  process(real,imag);  FFT.transform(real,imag,true);  System.arraycopy(real,0,dataOut,pos + middle,len - middle);  System.arraycopy(real,real.length - middle,dataOut,pos,middle);  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);  double scale=origAvgEnergy / newAvgEnergy;  for (i=0; i < len; i++)   data[i]*=0.8 * scale;}  }
class C{  public long next(){  return next(RecurrenceUtil.now());}  }
class C{  public static String childElementValue(Element element,String childElementName){  if (element == null)   return null;  Element childElement=firstChildElement(element,childElementName);  return elementValue(childElement);}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }    int width=sIconWidth;    int height=sIconHeight;    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());      }    }    int sourceWidth=icon.getIntrinsicWidth();    int sourceHeight=icon.getIntrinsicHeight();    if (sourceWidth > 0 && sourceHeight > 0) {      if (width < sourceWidth || height < sourceHeight) {        final float ratio=(float)sourceWidth / sourceHeight;        if (sourceWidth > sourceHeight) {          height=(int)(width / ratio);        } else         if (sourceHeight > sourceWidth) {          width=(int)(height * ratio);        }      } else       if (sourceWidth < width && sourceHeight < height) {        width=sourceWidth;        height=sourceHeight;      }    }    int textureWidth=sIconTextureWidth;    int textureHeight=sIconTextureHeight;    final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);    final Canvas canvas=sCanvas;    canvas.setBitmap(bitmap);    final int left=(textureWidth - width) / 2;    final int top=(textureHeight - height) / 2;    @SuppressWarnings("all") final boolean debug=false;    if (debug) {      canvas.drawColor(sColors[sColorIndex]);      if (++sColorIndex >= sColors.length)       sColorIndex=0;      Paint debugPaint=new Paint();      debugPaint.setColor(0xffcccc00);      canvas.drawRect(left,top,left + width,top + height,debugPaint);    }    sOldBounds.set(icon.getBounds());    icon.setBounds(left,top,left + width,top + height);    icon.draw(canvas);    icon.setBounds(sOldBounds);    canvas.setBitmap(null);    return bitmap;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  try {    String uploadedRemotePath=intent.getStringExtra(FileUploader.EXTRA_REMOTE_PATH);    String accountName=intent.getStringExtra(FileUploader.ACCOUNT_NAME);    boolean sameAccount=getAccount() != null && accountName.equals(getAccount().name);    OCFile currentDir=getCurrentDir();    boolean isDescendant=(currentDir != null) && (uploadedRemotePath != null) && (uploadedRemotePath.startsWith(currentDir.getRemotePath()));    if (sameAccount && isDescendant) {      String linkedToRemotePath=intent.getStringExtra(FileUploader.EXTRA_LINKED_TO_PATH);      if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {        refreshListOfFilesFragment();      }    }    boolean uploadWasFine=intent.getBooleanExtra(FileUploader.EXTRA_UPLOAD_RESULT,false);    boolean renamedInUpload=getFile().getRemotePath().equals(intent.getStringExtra(FileUploader.EXTRA_OLD_REMOTE_PATH));    boolean sameFile=getFile().getRemotePath().equals(uploadedRemotePath) || renamedInUpload;    FileFragment details=getSecondFragment();    boolean detailFragmentIsShown=(details != null && details instanceof FileDetailFragment);    if (sameAccount && sameFile && detailFragmentIsShown) {      if (uploadWasFine) {        setFile(getStorageManager().getFileByPath(uploadedRemotePath));      } else {      }      if (renamedInUpload) {        String newName=(new File(uploadedRemotePath)).getName();        Toast msg=Toast.makeText(context,String.format(getString(R.string.filedetails_renamed_in_upload_msg),newName),Toast.LENGTH_LONG);        msg.show();      }      if (uploadWasFine || getFile().fileExists()) {        ((FileDetailFragment)details).updateFileDetails(false,true);      } else {        cleanSecondFragment();      }      if (uploadWasFine) {        OCFile ocFile=getFile();        if (PreviewImageFragment.canBePreviewed(ocFile))         startImagePreview(getFile()); else         if (PreviewTextFragment.canBePreviewed(ocFile))         startTextPreview(ocFile);      }    }    setIndeterminate(false);  }  finally {    if (intent != null) {      removeStickyBroadcast(intent);    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private Set loadRelationships(ResourceInformation resourceInformation,List resources,ResourceField relationshipField,QueryAdapter queryAdapter,RepositoryMethodParameterProvider parameterProvider){  RegistryEntry rootEntry=resourceRegistry.getEntry(resourceInformation.getResourceType());  List<Serializable> resourceIds=getIds(resources,resourceInformation);  boolean isMany=Iterable.class.isAssignableFrom(relationshipField.getType());  Class<?> relationshipFieldClass=relationshipField.getElementType();  Set loadedEntities=new HashSet();  RelationshipRepositoryAdapter relationshipRepository=rootEntry.getRelationshipRepositoryForClass(relationshipFieldClass,parameterProvider);  if (relationshipRepository != null) {    Map<Object,JsonApiResponse> responseMap;    if (isMany) {      responseMap=relationshipRepository.findBulkManyTargets(resourceIds,relationshipField.getUnderlyingName(),queryAdapter);    } else {      responseMap=relationshipRepository.findBulkOneTargets(resourceIds,relationshipField.getUnderlyingName(),queryAdapter);    }    for (    Object resource : resources) {      ResourceField rootIdField=resourceInformation.getIdField();      Serializable id=(Serializable)PropertyUtils.getProperty(resource,rootIdField.getUnderlyingName());      JsonApiResponse response=responseMap.get(id);      if (response != null) {        Object entity=response.getEntity();        PropertyUtils.setProperty(resource,relationshipField.getUnderlyingName(),entity);        addAll(loadedEntities,entity);      } else {        PropertyUtils.setProperty(resource,relationshipField.getUnderlyingName(),null);      }    }  }  return loadedEntities;}  }
class C{  public final void debug(final Object o,final Throwable t){  log(Level.DEBUG,o,t);}  }
class C{  public List<Integer> showDialog(Director defaultDir){  setupDialog(defaultDir);  getContentPane().validate();  setSize(getPreferredSize());  setVisible(true);  return result;}  }
class C{  public static ExpectedCondition<Boolean> pageUrlIs(final String url){  return null;}  }
class C{  private boolean isValidApiKeyDefinition(ApiKeyAuthDefinition apiKeydef){  if (apiKeydef.getName().equalsIgnoreCase("key") || apiKeydef.getIn() == In.QUERY) {    return true;  } else {    diagCollector.addDiag(Diag.warning(SimpleLocation.UNKNOWN,"apiKey '%s' is ignored. Only apiKey with 'name' as 'key' and 'in' as 'query' are " + "supported",apiKeydef.getName()));    return false;  }}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  private static String formatUrl(String uri,String charset) throws UnsupportedEncodingException {  int i=uri.indexOf("#");  if (i > -1) {    uri=uri.substring(0,i);  }  uri=uri.replace(" ","%20");  uri=charset != null ? URLEncoder.encode(uri,charset) : URLEncoder.encode(uri,"utf-8");  uri=uri.replaceAll("%2F","/");  uri=uri.replaceAll("%3F","?");  uri=uri.replaceAll("%3D","=");  uri=uri.replaceAll("%26","&");  uri=uri.replaceAll("%3A",":");  uri=uri.replaceAll("%25","%");  return uri;}  }
class C{  protected final void writeF(ChannelBuffer buf,float value){  buf.writeFloat(value);}  }
class C{  public boolean indicateDirtyRead(ITemplateHolder template){  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());}  }
class C{  private BEntry readEntry(int slot){  if (isLeaf()) {    return new LeafEntry(this.keySchema,getPage().readBytes(getOffset(slot),entrySize));  } else {    return new InnerEntry(this.keySchema,getPage().readBytes(getOffset(slot),entrySize));  }}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  public TShortHash(int initialCapacity,TShortHashingStrategy strategy){  super(initialCapacity);  this._hashingStrategy=strategy;}  }
class C{  public void put(Object key,Object value){  int bucket=(key.hashCode() & 0x7FFFFFFF) % fTableSize;  Entry entry=search(key,bucket);  if (entry != null) {    entry.value=value;  } else {    entry=new Entry(key,value,fBuckets[bucket]);    fBuckets[bucket]=entry;    fNum++;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200811,skillcaster,num0,skillname);}  }
class C{  @Override protected boolean elementDepthIsZeroHook() throws IOException, XNIException {  setScannerState(SCANNER_STATE_TRAILING_MISC);  setDispatcher(fTrailingMiscDispatcher);  return true;}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public static void main(String[] args){  DocumentSet dsSet=new DocumentSet("/home/ggianna/JInsect/summaries",1.0);  dsSet.createSets();  if (dsSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  System.out.println("@relation jinsect\n");  System.out.println("@attribute GraphCooccurenceSimilarity real");  System.out.println("@attribute GraphValueSimilarity real");  System.out.println("@attribute GraphSizeSimilarity real");  System.out.println("@attribute HistogramContainmentSimilarity real");  System.out.println("@attribute HistogramValueSimilarity real");  System.out.println("@attribute HistogramSizeSimilarity real");  System.out.println("@attribute OverallSimilarity real");  System.out.println("@attribute CharGraphCooccurenceSimilarity real");  System.out.println("@attribute CharGraphValueSimilarity real");  System.out.println("@attribute CharGraphSizeSimilarity real");  System.out.println("@attribute NHistogramContainmentSimilarity real");  System.out.println("@attribute NHistogramValueSimilarity real");  System.out.println("@attribute NHistogramSizeSimilarity real");  System.out.println("@attribute NOverallSimilarity real");  System.out.println("@attribute IsSame {TRUE,FALSE}\n");  System.out.println("@data");  HashMap hmCache=new HashMap();  HashMap hmNCache=new HashMap();  int iTotal=dsSet.getTrainingSet().size();  int iCur=0;  StandardDocumentComparator sdcComparator=new StandardDocumentComparator();  Iterator iIter=dsSet.getTrainingSet().iterator();  while (iIter.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();    SimpleTextDocument ndDoc1=new SimpleTextDocument();    NGramDocument ndNDoc1=new NGramDocument();    if (hmCache.containsKey(cfeCur.getFileName())) {      ndDoc1=(SimpleTextDocument)hmCache.get(cfeCur.getFileName());      ndNDoc1=(NGramDocument)hmNCache.get(cfeCur.getFileName());    } else {      ndDoc1.loadDataStringFromFile(cfeCur.getFileName());      ndNDoc1.loadDataStringFromFile(cfeCur.getFileName());    }    Iterator iOtherIter=dsSet.getTrainingSet().subList(dsSet.getTrainingSet().indexOf(cfeCur),dsSet.getTrainingSet().size()).iterator();    while (iOtherIter.hasNext()) {      CategorizedFileEntry cfeOther=(CategorizedFileEntry)iOtherIter.next();      SimpleTextDocument ndDoc2=new SimpleTextDocument();      NGramDocument ndNDoc2=new NGramDocument();      if (hmCache.containsKey(cfeOther.getFileName())) {        ndDoc2=(SimpleTextDocument)hmCache.get(cfeOther.getFileName());        ndNDoc2=(SimpleTextDocument)hmCache.get(cfeOther.getFileName());      } else {        ndDoc2.loadDataStringFromFile(cfeOther.getFileName());        ndNDoc2.loadDataStringFromFile(cfeOther.getFileName());      }      try {        GraphSimilarity sSimil;        sSimil=sdcComparator.getSimilarityBetween(ndDoc1,ndDoc2);        GraphSimilarity sSimil2;        sSimil2=sdcComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);        System.out.print(sdcComparator.getGraphSimilarity().ContainmentSimilarity + "," + sdcComparator.getGraphSimilarity().ValueSimilarity+ ","+ sdcComparator.getGraphSimilarity().SizeSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ContainmentSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ValueSimilarity+ ","+ sdcComparator.getHistogramSimilarity().SizeSimilarity+ ","+ sSimil.getOverallSimilarity()+ ",");        System.out.println(sdcComparator.getGraphSimilarity().ContainmentSimilarity + "," + sdcComparator.getGraphSimilarity().ValueSimilarity+ ","+ sdcComparator.getGraphSimilarity().SizeSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ContainmentSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ValueSimilarity+ ","+ sdcComparator.getHistogramSimilarity().SizeSimilarity+ ","+ sSimil.getOverallSimilarity()+ ","+ (((cfeOther.getCategory() == cfeCur.getCategory()) || (cfeCur.getFileName().substring(cfeCur.getFileName().lastIndexOf("/")) == cfeCur.getFileName().substring(cfeCur.getFileName().lastIndexOf("/")))) ? "TRUE" : "FALSE"));      } catch (      InvalidClassException iceE) {        System.err.println("Cannot compare...");      }    }    System.err.println("Completed " + (double)iCur++ / iTotal * 100 + "%");  }}  }
class C{  private void analyzeMethodForDynamicBroadcastReceiver(SootMethod method){  if (!method.isConcrete() || !method.hasActiveBody())   return;  for (  Unit u : method.getActiveBody().getUnits()) {    Stmt stmt=(Stmt)u;    if (stmt.containsInvokeExpr()) {      if (stmt.getInvokeExpr().getMethod().getName().equals("registerReceiver") && stmt.getInvokeExpr().getArgCount() > 0 && isInheritedMethod(stmt,"android.content.ContextWrapper","android.content.Context")) {        Value br=stmt.getInvokeExpr().getArg(0);        if (br.getType() instanceof RefType) {          RefType rt=(RefType)br.getType();          dynamicManifestComponents.add(rt.getClassName());        }      }    }  }}  }
class C{  public Quaternion(final double a,final double b,final double c,final double d){  this.q0=a;  this.q1=b;  this.q2=c;  this.q3=d;}  }
class C{  public TimelineReader(String fileName,boolean tryMemoryMapping) throws MaryConfigurationException {  if (fileName == null) {    throw new NullPointerException("Filename is null");  }  try {    load(fileName,tryMemoryMapping);  } catch (  Exception e) {    throw new MaryConfigurationException("Cannot load timeline file from " + fileName,e);  }}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException("Path contains invalid character!");  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public static String createResourceName(String resource,Locale locale,boolean removeExtension){  String resourceName=resource;  if (removeExtension) {    if (resourceName.endsWith(".xml")) {      resourceName=resourceName.replace(".xml","");    } else     if (resourceName.endsWith(".properties")) {      resourceName=resourceName.replace(".properties","");    }  }  if (locale != null) {    if (UtilValidate.isNotEmpty(locale.toString())) {      resourceName=resourceName + "_" + locale;    }  }  return resourceName;}  }
class C{  public DoubleConstant(double n){  val=n;}  }
class C{  public GroupsGetByIdQuery groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public void onItemClick(View view){}  }
class C{  public Object clone(){  Split result=new Split();  result.copy(this);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_OTHER_NPC(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1260222,skilltarget,skillcaster);}  }
class C{  public static void writeFile(String rootFolder,String resourceFolder,String resourceName,String schemaResource,Object objectToWrite){  if (objectToWrite == null) {    ConsoleManager.getInstance().error(ParseXML.class,"No object to write");  }  JAXBContext contextObj;  String fullResourceName=rootFolder + resourceFolder + resourceName;  System.out.println("Writing : " + fullResourceName);  try {    contextObj=JAXBContext.newInstance(objectToWrite.getClass());    Marshaller marshallerObj=contextObj.createMarshaller();    marshallerObj.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    marshallerObj.marshal(objectToWrite,new FileOutputStream(fullResourceName));  } catch (  JAXBException e) {    ConsoleManager.getInstance().exception(ParseXML.class,e);  }catch (  FileNotFoundException e) {    ConsoleManager.getInstance().exception(ParseXML.class,e);  }}  }
class C{  public void notifyDataSourceLoaded(){  for (  DataSourceUpdatedInterface listener : listenerList) {    listener.dataSourceLoaded(getGeometryType(),false);  }}  }
class C{  public TableIterator(Table table,IntIterator rows){  m_table=table;  m_rows=rows;  m_modCount=table.getModificationCount();}  }
class C{  public MarketReorderItemsQuery reorderItems(UserActor actor,int ownerId,int itemId){  return new MarketReorderItemsQuery(getClient(),actor,ownerId,itemId);}  }
class C{  private void maybeWriteStatusToDiskAsync(){  mDirtyOperations++;  if (mDirtyOperations >= MAX_OPS_BEFORE_WRITE) {    mIoHandler.post(new WriteJobsMapToDiskRunnable());  }}  }
class C{  private void processFileReferences(SearchParameters params,PsiFile file){  if (file instanceof BuildFile) {    BuildFile buildFile=(BuildFile)file;    processBuildFileReferences(params,buildFile);    if (buildFile.getBlazeFileType() == BlazeFileType.BuildPackage) {      return;    }  }  BlazePackage blazePackage=BlazePackage.getContainingPackage(file);  PsiDirectory directory=blazePackage != null ? blazePackage.getContainingDirectory() : null;  if (directory == null) {    return;  }  Label label=LabelUtils.createLabelForFile(blazePackage,PsiUtils.getFilePath(file));  if (label == null) {    return;  }  List<String> stringsToSearch=LabelUtils.getAllValidLabelStrings(label,true);  SearchScope scope=params.getScopeDeterminedByUser().intersectWith(blazePackage.getSearchScope(true));  for (  String string : stringsToSearch) {    searchForString(params,scope,file,string);  }}  }
class C{  public boolean dump_cg(){  return soot.PhaseOptions.getBoolean(options,"dump-cg");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_NOT_ENOUGH_TRADE_MONEY(String value0){  return new SM_SYSTEM_MESSAGE(1400557,value0);}  }
class C{  public PhotosDeleteQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.delete",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  public SecureSetCounterQuery counters(String... value){  return unsafeParam("counters",value);}  }
class C{  public Line intersection(final Plane other){  final Vector3D direction=Vector3D.crossProduct(w,other.w);  if (direction.getNorm() < tolerance) {    return null;  }  final Vector3D point=intersection(this,other,new Plane(direction,tolerance));  return new Line(point,point.add(direction),tolerance);}  }
class C{  public boolean isConvertible(final SourceDataTag tag,final Object tagValue){  this.equipmentLogger.trace("isConvertible - Tag #" + tag.getId() + " casting "+ tagValue+ " to "+ tag.getDataType());  return TypeConverter.isConvertible(tagValue,tag.getDataType());}  }
class C{  public boolean isFederatedNamespace(){  return this.isFederatedNamespace;}  }
class C{  @Override public void destroy() throws Exception {  if (this.infinispanCache != null) {    this.infinispanCache.stop();  }}  }
class C{  public final boolean isEmpty(){  return empty;}  }
class C{  private boolean hasProxySettings(Properties settings){  String proxyHost=settings.getProperty("org.gnome.system.proxy.http host",null);  return proxyHost != null && proxyHost.length() > 0;}  }
class C{  public Builder maxBounds(LatLngBounds maxBounds){  this.maxBounds=maxBounds;  return this;}  }
class C{  public NotSpacePredicate(ISpacePredicate operand){  super(operand);}  }
class C{  static void verify(Principal[] principals) throws InvalidObjectException {  if (principals == null || principals.length == 0) {    throw new InvalidObjectException("cannot create constraint with no elements");  }  for (int i=principals.length; --i >= 0; ) {    Principal p=principals[i];    if (p == null) {      throw new InvalidObjectException("elements cannot be null");    }    if (contains(principals,i,p)) {      throw new InvalidObjectException("cannot create constraint with duplicate elements");    }  }}  }
class C{  @Override public boolean scanQName(QName qname) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  char ch=fCurrentEntity.ch[offset];  if (XML11Char.isXML11NCNameStart(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String name=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        qname.setValues(null,name,name,null);        return true;      }    }  } else   if (XML11Char.isXML11NameHighSurrogate(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        --fCurrentEntity.startPosition;        --fCurrentEntity.position;        return false;      }    }    char ch2=fCurrentEntity.ch[fCurrentEntity.position];    if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {      --fCurrentEntity.position;      return false;    }    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      fCurrentEntity.ch[1]=ch2;      offset=0;      if (load(2,false)) {        fCurrentEntity.columnNumber+=2;        String name=fSymbolTable.addSymbol(fCurrentEntity.ch,0,2);        qname.setValues(null,name,name,null);        return true;      }    }  } else {    return false;  }  int index=-1;  boolean sawIncompleteSurrogatePair=false;  do {    ch=fCurrentEntity.ch[fCurrentEntity.position];    if (XML11Char.isXML11Name(ch)) {      if (ch == ':') {        if (index != -1) {          break;        }        index=fCurrentEntity.position;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        if (index != -1) {          index=index - offset;        }        offset=0;        if (load(length,false)) {          break;        }      }    } else     if (XML11Char.isXML11NameHighSurrogate(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        if (index != -1) {          index=index - offset;        }        offset=0;        if (load(length,false)) {          sawIncompleteSurrogatePair=true;          --fCurrentEntity.startPosition;          --fCurrentEntity.position;          break;        }      }      char ch2=fCurrentEntity.ch[fCurrentEntity.position];      if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11Name(XMLChar.supplemental(ch,ch2))) {        sawIncompleteSurrogatePair=true;        --fCurrentEntity.position;        break;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        if (index != -1) {          index=index - offset;        }        offset=0;        if (load(length,false)) {          break;        }      }    } else {      break;    }  } while (true);  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  if (length > 0) {    String prefix=null;    String localpart=null;    String rawname=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);    if (index != -1) {      int prefixLength=index - offset;      prefix=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,prefixLength);      int len=length - prefixLength - 1;      int startLocal=index + 1;      if (!XML11Char.isXML11NCNameStart(fCurrentEntity.ch[startLocal]) && (!XML11Char.isXML11NameHighSurrogate(fCurrentEntity.ch[startLocal]) || sawIncompleteSurrogatePair)) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"IllegalQName",null,XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      localpart=fSymbolTable.addSymbol(fCurrentEntity.ch,index + 1,len);    } else {      localpart=rawname;    }    qname.setValues(prefix,localpart,rawname,null);    return true;  }  return false;}  }
class C{  private static String stringToHex(final byte[] data){  StringBuilder sb=new StringBuilder(data.length * 2);  for (int i=0; i < data.length; i++) {    String hex=Integer.toHexString(data[i]);    if (hex.length() == 1) {      sb.append("0");    } else     if (hex.length() == 8) {      hex=hex.substring(6);    }    sb.append(hex);  }  return sb.toString().toLowerCase();}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public MarketSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public void removeTableListener(TableListener listnr){  m_listeners.remove(listnr);}  }
class C{  @Override public byte[] next(){  if (iteratorIndex >= columnDictionaryChunks.get(outerIndex).getValues().size()) {    iteratorIndex=0;    outerIndex++;  }  ByteBuffer buffer=columnDictionaryChunks.get(outerIndex).getValues().get(iteratorIndex);  byte[] value=buffer.array();  currentSize++;  iteratorIndex++;  return value;}  }
class C{  @NotNull public static Map<NlComponent,List<NlComponent>> groupSiblings(@NotNull Collection<? extends NlComponent> components){  Map<NlComponent,List<NlComponent>> siblingLists=new HashMap<>();  if (components.isEmpty()) {    return siblingLists;  }  if (components.size() == 1) {    NlComponent component=components.iterator().next();    siblingLists.put(component.getParent(),Collections.singletonList(component));    return siblingLists;  }  for (  NlComponent component : components) {    NlComponent parent=component.getParent();    List<NlComponent> children=siblingLists.get(parent);    if (children == null) {      children=new ArrayList<>();      siblingLists.put(parent,children);    }    children.add(component);  }  return siblingLists;}  }
class C{  @TargetApi(23) private boolean generateKey(){  mKeyStore=null;  KeyGenerator keyGenerator;  try {    mKeyStore=KeyStore.getInstance("AndroidKeyStore");    keyGenerator=KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,"AndroidKeyStore");  } catch (  NoSuchAlgorithmException|NoSuchProviderException e) {    return false;  }catch (  KeyStoreException e) {    return false;  }  try {    mKeyStore.load(null);    keyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    keyGenerator.generateKey();    return true;  } catch (  NoSuchAlgorithmException|InvalidAlgorithmParameterException|CertificateException|IOException e) {    return false;  }}  }
class C{  @ObjectiveCName("clear:action:name:") void clear(Topic topic,Actions action,String name){  String uniqueName=this.getUniqueName(topic,action,name);  this.clear(uniqueName);}  }
class C{  private void cleanExpiredTokens(){  Iterator<Entry<String,Token>> it=this.tokens.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,Token> pair=(Map.Entry<String,Token>)it.next();    if (pair.getValue().isExpired())     it.remove();  }}  }
class C{  @Override protected List<Target> overridableCreateTargetsWithPauses(List<Element> segmentsAndBoundaries,String pauseSymbol){  return HalfPhoneTargetFeatureLister.createTargetsWithPauses(segmentsAndBoundaries,pauseSymbol);}  }
class C{  public CopyUtils(){}  }
class C{  public int traversal(){  return soot.PhaseOptions.getInt(options,"traversal");}  }
class C{  protected void initUI(){  for (int i=0; i < getComponentCount(); ++i) {    Component c=getComponent(i);    if (!(c instanceof JToggleButton))     continue;    JToggleButton tb=(JToggleButton)c;    tb.removeActionListener(m_lstnr);    if (m_group != null)     m_group.remove(tb);  }  removeAll();  UILib.addStrut(this,m_axis,m_margin);  for (int i=0; i < m_data.getSize(); ++i) {    if (i > 0)     UILib.addStrut(this,m_axis,m_spacing);    Object data=m_data.getElementAt(i);    String label=m_labels == null ? data.toString() : m_labels[i];    JToggleButton tb=null;    if (m_type == CHECKBOX) {      tb=new JCheckBox(label);    } else {      tb=new JRadioButton(label);      m_group.add(tb);    }    tb.putClientProperty("idx",new Integer(i));    tb.addActionListener(m_lstnr);    add(tb);  }  UILib.addStrut(this,m_axis,m_margin);  m_lstnr.valueChanged(null);}  }
class C{  public static ITextComponent handle(ITextComponent message,ICommandSender sender){  final MessageEvent.Chat event=new MessageEvent.Chat(message,sender,sender == null ? Side.CLIENT : Side.SERVER);  return OpenModLoader.getEventBus().post(event) ? event.getMessage() : null;}  }
class C{  public Script(){}  }
class C{  public static CharSequence extractFlagsForTextView(CharSequence text){  char[] textChars=text.toString().toCharArray();  ArrayList<Character> characters=new ArrayList<>();  ArrayList<WhatsappUtil.Flag> flags=new ArrayList<>();  WhatsappUtil.Flag boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);  WhatsappUtil.Flag strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);  WhatsappUtil.Flag italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);  for (int i=0, j=0; i < textChars.length; i++) {    char c=textChars[i];    if (c == BOLD_FLAG) {      if (boldFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,BOLD_FLAG,i + 1)) {          boldFlag.start=j;          continue;        }      } else {        boldFlag.end=j;        flags.add(boldFlag);        boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);        continue;      }    }    if (c == STRIKE_FLAG) {      if (strikeFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,STRIKE_FLAG,i + 1)) {          strikeFlag.start=j;          continue;        }      } else {        strikeFlag.end=j;        flags.add(strikeFlag);        strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);        continue;      }    }    if (c == ITALIC_FLAG) {      if (italicFlag.start == INVALID_INDEX) {        if (WhatsappUtil.hasFlagSameLine(text,ITALIC_FLAG,i + 1)) {          italicFlag.start=j;          continue;        }      } else {        italicFlag.end=j;        flags.add(italicFlag);        italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);        continue;      }    }    characters.add(c);    j++;  }  String formatted=WhatsappUtil.getText(characters);  SpannableStringBuilder builder=new SpannableStringBuilder(formatted);  for (int i=0; i < flags.size(); i++) {    WhatsappUtil.Flag flag=flags.get(i);    if (flag.flag == BOLD_FLAG) {      StyleSpan bss=new StyleSpan(Typeface.BOLD);      builder.setSpan(bss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else     if (flag.flag == STRIKE_FLAG) {      builder.setSpan(new StrikethroughSpan(),flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else     if (flag.flag == ITALIC_FLAG) {      StyleSpan iss=new StyleSpan(Typeface.ITALIC);      builder.setSpan(iss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  }  return builder;}  }
class C{  <T>T onFindFirst(Class<T> modelClass,boolean isEager){  List<T> dataList=query(modelClass,null,null,null,null,null,"id","1",getForeignKeyAssociations(modelClass.getName(),isEager));  if (dataList.size() > 0) {    return dataList.get(0);  }  return null;}  }
class C{  public static ShortBuffer createShortBuffer(int size){  ShortBuffer buf=ByteBuffer.allocateDirect(2 * size).order(ByteOrder.nativeOrder()).asShortBuffer();  buf.clear();  if (trackDirectMemory) {    trackingHash.put(buf,ref);  }  return buf;}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,String dataId,long startTime,int frequency,int interval,int count,long endTime,int maxRetry,String eventId) throws JobManagerException {  assertIsRunning();  String infoId=null;  if (frequency > -1 && count != 0) {    try {      RecurrenceInfo info=RecurrenceInfo.makeInfo(delegator,startTime,frequency,interval,count);      infoId=info.primaryKey();    } catch (    RecurrenceInfoException e) {      throw new JobManagerException(e.getMessage(),e);    }  }  if (UtilValidate.isEmpty(jobName)) {    jobName=Long.toString((new Date().getTime()));  }  Map<String,Object> jFields=UtilMisc.<String,Object>toMap("jobName",jobName,"runTime",new java.sql.Timestamp(startTime),"serviceName",serviceName,"statusId","SERVICE_PENDING","recurrenceInfoId",infoId,"runtimeDataId",dataId,"eventId",eventId);  if (UtilValidate.isNotEmpty(poolName)) {    jFields.put("poolId",poolName);  } else {    try {      jFields.put("poolId",ServiceConfigUtil.getServiceEngine().getThreadPool().getSendToPool());    } catch (    GenericConfigException e) {      throw new JobManagerException(e.getMessage(),e);    }  }  jFields.put("loaderName",delegator.getDelegatorName());  jFields.put("maxRetry",Long.valueOf(maxRetry));  jFields.put("currentRetryCount",new Long(0));  GenericValue jobV;  try {    jobV=delegator.makeValue("JobSandbox",jFields);    delegator.createSetNextSeqId(jobV);  } catch (  GenericEntityException e) {    throw new JobManagerException(e.getMessage(),e);  }}  }
class C{  public synchronized ZooKeeperClientBuilder sessionTimeoutMs(int sessionTimeoutMs){  this.sessionTimeoutMs=sessionTimeoutMs;  if (this.conectionTimeoutMs <= 0) {    this.conectionTimeoutMs=2 * sessionTimeoutMs;  }  return this;}  }
class C{  public static double uniform(){  return random.nextDouble();}  }
class C{  public static void isAssignableTo(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (!targetClass.isAssignableFrom(argumentObject.getClass())) {    throw new IllegalArgumentException(argumentName + " cannot be assigned to " + targetClass.getName());  }}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  public Literal parse(){  if (getLITERAL().length() == 0)   throw new IllegalStateException("Empty NumericLiteral");  kind=classifyLiteral();  Literal literal;  if (!floating)   literal=parseDigits(); else   literal=parseFractionPart();  literal.setStart(LITERALstart);  literal.setEnd(LITERALend);  return literal;}  }
class C{  private void rdp_decoding_d(char[][] g_data,int disks,int stripe_unit_size,int w,int x){  int xcount, ccount, count, dcount;  int packet_size=stripe_unit_size / w;  int gr, g, gx;  int row_disk, diag_disk;  char[] row_data, diag_data, rdata, xdata;  int coffset;  int i, j, k, c;  int diag_count;  int row_count;  dcount=stripe_unit_size;  xcount=stripe_unit_size;  gr=pnumRdp - 2;  gx=(x >= 3 ? x - 3 : pnumRdp - 1);  row_disk=pnumRdp + 1;  diag_disk=x;  rdata=g_data[0];  xdata=g_data[x];  row_data=rdata;  diag_data=xdata;  g=gr;  diag_count=xcount;  row_count=dcount;  while (true) {    if (g == pnumRdp - 1) {      if (gr == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {        row_disk=x;        diag_disk=pnumRdp + 1;        row_data=xdata;        diag_data=rdata;        g=gx;        row_count=diag_count;        diag_count=dcount;        continue;      } else       break;    } else {      int row_index;      char[] cdata;      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;      cdata=g_data[1];      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {        diag_data[i]=cdata[j];      }      for (c=2; c < (disks + 2); c++) {        if ((int)c == diag_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data[c];        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data[i]^=cdata[j];        }      }      if (pnumRdp + 1 != diag_disk) {        ccount=stripe_unit_size;        cdata=g_data[0];        coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data[i]^=cdata[j];        }      }      for (c=2; c < (disks + 2); c++) {        if ((int)c == row_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data[c];        coffset=row_index * packet_size;        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {          row_data[i]^=cdata[i];        }      }      if (row_disk != pnumRdp + 1) {        count=row_count;        cdata=diag_data;        coffset=row_index * packet_size;        for (i=coffset, k=0; i < count && k < packet_size; i++, k++)         row_data[i]^=cdata[i];      }      g=(row_index + row_disk - 2) % pnumRdp;    }  }}  }
class C{  private void internal_logException(Exception e,Logger logger){  logger.error(e.getMessage());  panel.addErrorMessage(e.getMessage());  StackTraceElement[] stackTrace=e.getStackTrace();  StringBuilder sb=new StringBuilder();  for (  StackTraceElement t : stackTrace) {    sb.append(t.toString());    sb.append("\n");  }  logger.error(sb.toString());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_FAILED(int value0){  return new SM_SYSTEM_MESSAGE(1300448,new DescriptionId(value0));}  }
class C{  public CompleteLinkClusterer(){}  }
class C{  public void inc(Collection<KeyType> container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200333,skillname);}  }
class C{  private static boolean parse(){  URLClassLoader cLoader=(URLClassLoader)ManifestParser.class.getClassLoader();  try {    URL url=cLoader.findResource("META-INF/MANIFEST.MF");    manifest=new Manifest(url.openStream());    return true;  } catch (  IOException ex) {    ex.printStackTrace();    return false;  }}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static void main(String[] args) throws IOException {  long iBegin=System.currentTimeMillis();  if (args.length == 0) {    System.err.println("usage: java marytts.fst.FSTLookup FstFile [-g] [word ...]");    System.exit(-1);  }  FSTLookup fstLookup=new FSTLookup(args[0]);  if (args.length == 1 || (args.length == 2 && args[1].equals("-g"))) {    boolean generate=false;    if (args.length == 2 && args[1].equals("-g"))     generate=true;    String line;    try {      BufferedReader in=new BufferedReader(new InputStreamReader(System.in));      while ((line=in.readLine()) != null) {        showResults(line,fstLookup.lookup(line,generate));      }    } catch (    Exception e) {      System.err.println("Invalid Input");    }  } else {    int i=1;    boolean generate=false;    if (args[1].equals("-g")) {      generate=true;      i=2;    }    for (; i < args.length; i++) {      showResults(args[i],fstLookup.lookup(args[i],generate));    }  }  long iEnd=System.currentTimeMillis();  System.err.println("processed in " + (iEnd - iBegin) + " ms.");}  }
class C{  @Override public void onDestroyView(){  super.onDestroyView();  if (mProgressAnimator != null) {    mProgressAnimator.removeAllListeners();  }  Log.d(TAG,"onDestroyView()");  mPrefs.unregisterOnSharedPreferenceChangeListener(mPrefChangeListener);}  }
class C{  private void resetPersistenceManager(){  persistenceManager=null;}  }
class C{  protected void ae(float expected,float actual){  assertEquals(expected,actual);}  }
class C{  public FriendsGetSuggestionsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private Intent createSettingsIntent(){  return PreferencesLauncher.createIntentForSettingsPage(mApplicationContext,mAccountManagementFragment.getCanonicalName());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1330049,value0);}  }
class C{  public boolean ensureLibraryIsIncluded(@NotNull Module module,@NotNull Iterable<GradleCoordinate> dependencies,@Nullable Runnable callback){  GradleBuildModel buildModel=GradleBuildModel.get(module);  if (buildModel == null) {    return false;  }  List<GradleCoordinate> missing=findMissingLibrariesFromGradleBuildFile(buildModel,dependencies);  if (missing.isEmpty()) {    return true;  }  if (userWantToAddDependencies(module,missing)) {    addDependenciesInTransaction(buildModel,module,missing,callback);    return true;  }  return false;}  }
class C{  public static PrivateKey loadPrivateKeyFromBinaryFile(final String keyFile) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {  final PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(loadBinaryFileAsBytes(keyFile));  final PrivateKey privateKey=KeyFactory.getInstance(ALGORITHM).generatePrivate(privateKeySpec);  return privateKey;}  }
class C{  public boolean isPutFirst(){  return putFirst;}  }
class C{  private void doScrollX(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(delta,0);    } else {      scrollBy(delta,0);    }  }}  }
class C{  public Builder client(DistributedLogClient client){  this._client=client;  return this;}  }
class C{  public static void generateSampleXml(String path){  File file=new File(path);  JAXBContext jaxbContext;  try {    jaxbContext=JAXBContext.newInstance(TvMetadataDescriptor.INSTANCE.getMetadataClass());    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    JAXBElement<PackageType> metadataJaxb=new ObjectFactory().createPackage(TvMetadataXmlSampleBuilder.buildPackage());    jaxbMarshaller.marshal(metadataJaxb,file);  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  public ChangeModifiers(ChangeModifiers modifiers1,ChangeModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  List<CollectionAttribute> finalizeAndGetCollections(){  Map<String,TypeRef> definedResources=Maps.newLinkedHashMap();  for (  TypeRef type : aspect.getModel().getSymbolTable().getDeclaredTypes()) {    if (!type.isMessage()) {      continue;    }    MessageType message=type.getMessageType();    List<ResourceAttribute> definitions=message.getAttribute(ResourceAttribute.KEY);    if (definitions != null) {      for (      ResourceAttribute definition : definitions) {        TypeRef old=definedResources.put(definition.collection(),type);        if (old != null) {          aspect.warning(message.getLocation(),"Resource association of '%s' for collection '%s' overridden by '%s'. " + "Currently there can be only one resource associated with a collection.",old,definition.collection(),type);        }      }    }  }  ImmutableList.Builder<CollectionAttribute> result=ImmutableList.builder();  for (  CollectionAttribute collection : collectionMap.values()) {    validateCollectionAttribute(collection,collectionMap.keySet());    TypeRef type=definedResources.get(collection.getFullName());    if (type == null) {      type=new ResourceTypeSelector(aspect.getModel(),collection.getMethods()).getCandiateResourceType();    }    collection.setResourceType(type);    result.add(collection);  }  return result.build();}  }
class C{  public RecordPage(BlockId blk,TableInfo ti,Transaction tx,boolean doLog){  this.blk=blk;  this.tx=tx;  this.ti=ti;  this.doLog=doLog;  currentBuff=tx.bufferMgr().pin(blk);  Schema sch=ti.schema();  int pos=0;  myOffsetMap=new HashMap<String,Integer>();  for (  String fldname : sch.fields()) {    myOffsetMap.put(fldname,pos);    pos+=Page.maxSize(sch.type(fldname));  }  pos=pos < MIN_REC_SIZE ? MIN_REC_SIZE : pos;  slotSize=pos + FLAG_SIZE;}  }
class C{  public boolean contains(T obj){  throw new RuntimeException("ConcurrentSegmentedStoredList::contains not supported");}  }
class C{  public StyleWrapper(String style){  super();  this.style=style;}  }
class C{  @Ignore @Test(timeout=110000l) public void testEmitSoundTimer() throws IOException {  Chip8 soundChip=Chip8Utils.createFromRom(getClass().getResource("/E05SoundLoop.ch8"));  while (soundChip.getV5() != 255) {    soundChip.cycle();  }}  }
class C{  public Distribution centroid(){  if (isEmpty())   return null;  Distribution dRes=new Distribution();  Iterator iVectorIter=iterator();  while (iVectorIter.hasNext()) {    Distribution dCurVector=(Distribution)iVectorIter.next();    Iterator iFeatures=dCurVector.asTreeMap().keySet().iterator();    while (iFeatures.hasNext()) {      Object oFeatureKey=iFeatures.next();    }  }  return null;}  }
class C{  public LikesGetListQueryWithExtended(VkApiClient client,LikesType type){  super(client,"likes.getList",GetListExtendedResponse.class);  type(type);  extended(true);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (landlord == null)   throw new InvalidObjectException("null landlord reference");  if (landlordUuid == null)   throw new InvalidObjectException("null landlordUuid reference");  if (!(landlord instanceof TrustEquivalence)) {    throw new InvalidObjectException("server does not implement TrustEquivalence");  }}  }
class C{  public InstanceOfExpr newInstanceOfExpr(Value op1,Type t){  return new GInstanceOfExpr(op1,t);}  }
class C{  public Vector2f interpolate(Vector2f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;  return this;}  }
class C{  public View(String typeName,String sqlExpression,Object... parameters){  super(typeName,sqlExpression,parameters);}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  updateButtonState(geometryType);}  }
class C{  private void debugPrint(String msg){  if (debug) {    System.out.println(toString() + ": " + msg);  }}  }
class C{  public Array<T> values(){  Array<T> out=new JavaArray<>();  for (  T value : internalMap.values()) {    out.push(value);  }  return out;}  }
class C{  private static Bitmap decodeSampledBitmapRegion(Context context,Uri uri,Rect rect,int reqWidth,int reqHeight){  InputStream stream=null;  BitmapRegionDecoder decoder=null;  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inSampleSize=calculateInSampleSizeByReqestedSize(rect.width(),rect.height(),reqWidth,reqHeight);    stream=context.getContentResolver().openInputStream(uri);    decoder=BitmapRegionDecoder.newInstance(stream,false);    do {      try {        return decoder.decodeRegion(rect,options);      } catch (      OutOfMemoryError e) {        options.inSampleSize*=2;      }    } while (options.inSampleSize <= 512);  } catch (  Exception e) {    throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n"+ e.getMessage(),e);  } finally {    closeSafe(stream);    if (decoder != null) {      decoder.recycle();    }  }  return null;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("show window=message;");  execute("list assignmentsToLevels;");}  }
class C{  public void onDownloadCompleted(DownloadInfo downloadInfo,String notifyURI){  long downloadId=downloadInfo.getDownloadId();  OMAInfo omaInfo=mPendingOMADownloads.get(downloadId);  if (omaInfo == null) {    omaInfo=new OMAInfo();    omaInfo.addAttributeValue(OMA_INSTALL_NOTIFY_URI,notifyURI);  }  sendInstallNotificationAndNextStep(omaInfo,downloadInfo,DOWNLOAD_STATUS_SUCCESS);  mPendingOMADownloads.remove(downloadId);}  }
class C{  @Override @Transactional(value="cacheTransactionManager",propagation=Propagation.REQUIRES_NEW) public void doUpdateRuleTag(Long id,Properties properties) throws IllegalAccessException {  LOGGER.trace("Updating RuleTag " + id);  tagCache.acquireWriteLockOnKey(id);  try {    RuleTag ruleTagCopy=tagCache.getCopy(id);    Collection<Long> oldTagIds=null;    if (properties.containsKey("ruleText")) {      oldTagIds=ruleTagCopy.getRuleInputTagIds();    }    try {      commonTagFacade.updateConfig(ruleTagCopy,properties);      configurableDAO.updateConfig(ruleTagCopy);      tagCache.putQuiet(ruleTagCopy);    } catch (    RuntimeException e) {      String msg="Exception caught while updating Rule";      LOGGER.error(msg,e);      throw new UnexpectedRollbackException(msg,e);    }    try {      if (oldTagIds != null) {        for (        Long oldTagId : oldTagIds) {          tagConfigGateway.removeRuleFromTag(oldTagId,ruleTagCopy.getId());        }        for (        Long newTagId : ruleTagCopy.getRuleInputTagIds()) {          tagConfigGateway.addRuleToTag(newTagId,ruleTagCopy.getId());        }      }    } catch (    RuntimeException e) {      String errMessage="Exception caught while updating a RuleTag in cache - rolling back DB transaction and removing from cache.";      LOGGER.error(errMessage,e);      if (oldTagIds != null) {        for (        Long oldTagId : oldTagIds) {          try {            tagConfigGateway.addRuleToTag(oldTagId,ruleTagCopy.getId());          } catch (          Exception ex) {            LOGGER.warn("Exception caught while rolling back rule update",ex);          }        }        for (        Long newTagId : ruleTagCopy.getRuleInputTagIds()) {          try {            tagConfigGateway.removeRuleFromTag(newTagId,ruleTagCopy.getId());          } catch (          Exception ex) {            LOGGER.warn("Exception caught while rolling back rule update",ex);          }        }      }      throw new UnexpectedRollbackException(errMessage,e);    }    tagCache.releaseWriteLockOnKey(id);    try {      LOGGER.trace("Resetting all relevant Rule parent Process/Equipment ids");      for (      Long parentRuleId : ruleTagCopy.getRuleIds()) {        ruleTagFacade.setParentSupervisionIds(parentRuleId);      }    } catch (    Exception e) {      String msg="Exception while reloading rule parent ids: cache may be left in inconsistent state! - need to remove this rule to try and recover consistency";      LOGGER.error(msg,e);      throw new UnexpectedRollbackException(msg,e);    }  }  finally {    if (tagCache.isWriteLockedByCurrentThread(id)) {      tagCache.releaseWriteLockOnKey(id);    }  }}  }
class C{  public DirectedGraph load(InputStream inStream) throws IOException, MaryConfigurationException {  BufferedInputStream buffInStream=new BufferedInputStream(inStream);  assert buffInStream.markSupported();  buffInStream.mark(10000);  DataInput raf=new DataInputStream(buffInStream);  MaryHeader maryHeader=new MaryHeader(raf);  if (!maryHeader.hasCurrentVersion()) {    throw new IOException("Wrong version of database file");  }  if (maryHeader.getType() != MaryHeader.DIRECTED_GRAPH) {    if (maryHeader.getType() == MaryHeader.CARTS) {      buffInStream.reset();      return new MaryCARTReader().loadFromStream(buffInStream);    } else {      throw new IOException("Not a directed graph file");    }  }  short propDataLength=raf.readShort();  Properties props;  if (propDataLength == 0) {    props=null;  } else {    byte[] propsData=new byte[propDataLength];    raf.readFully(propsData);    ByteArrayInputStream bais=new ByteArrayInputStream(propsData);    props=new Properties();    props.load(bais);    bais.close();  }  FeatureDefinition featureDefinition=new FeatureDefinition(raf);  int numDecNodes=raf.readInt();  DecisionNode[] dns=new DecisionNode[numDecNodes];  int[][] childIndexes=new int[numDecNodes][];  for (int i=0; i < numDecNodes; i++) {    int featureNameIndex=raf.readInt();    int nodeTypeNr=raf.readInt();    DecisionNode.Type nodeType=DecisionNode.Type.values()[nodeTypeNr];    int numChildren=2;switch (nodeType) {case BinaryByteDecisionNode:      int criterion=raf.readInt();    dns[i]=new DecisionNode.BinaryByteDecisionNode(featureNameIndex,(byte)criterion,featureDefinition);  break;case BinaryShortDecisionNode:criterion=raf.readInt();dns[i]=new DecisionNode.BinaryShortDecisionNode(featureNameIndex,(short)criterion,featureDefinition);break;case BinaryFloatDecisionNode:float floatCriterion=raf.readFloat();dns[i]=new DecisionNode.BinaryFloatDecisionNode(featureNameIndex,floatCriterion,featureDefinition);break;case ByteDecisionNode:numChildren=raf.readInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ByteDecisionNode(featureNameIndex,numChildren,featureDefinition);break;case ShortDecisionNode:numChildren=raf.readInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ShortDecisionNode(featureNameIndex,numChildren,featureDefinition);}dns[i].setUniqueDecisionNodeId(i + 1);childIndexes[i]=new int[numChildren];for (int k=0; k < numChildren; k++) {childIndexes[i][k]=raf.readInt();}}int numLeafNodes=raf.readInt();LeafNode[] lns=new LeafNode[numLeafNodes];for (int j=0; j < numLeafNodes; j++) {int leafTypeNr=raf.readInt();LeafNode.LeafType leafNodeType=LeafNode.LeafType.values()[leafTypeNr];switch (leafNodeType) {case IntArrayLeafNode:int numData=raf.readInt();int[] data=new int[numData];for (int d=0; d < numData; d++) {data[d]=raf.readInt();}lns[j]=new LeafNode.IntArrayLeafNode(data);break;case FloatLeafNode:float stddev=raf.readFloat();float mean=raf.readFloat();lns[j]=new LeafNode.FloatLeafNode(new float[]{stddev,mean});break;case IntAndFloatArrayLeafNode:case StringAndFloatLeafNode:int numPairs=raf.readInt();int[] ints=new int[numPairs];float[] floats=new float[numPairs];for (int d=0; d < numPairs; d++) {ints[d]=raf.readInt();floats[d]=raf.readFloat();}if (leafNodeType == LeafNode.LeafType.IntAndFloatArrayLeafNode) lns[j]=new LeafNode.IntAndFloatArrayLeafNode(ints,floats); else lns[j]=new LeafNode.StringAndFloatLeafNode(ints,floats);break;case FeatureVectorLeafNode:throw new IllegalArgumentException("Reading feature vector leaf nodes is not yet implemented");case PdfLeafNode:throw new IllegalArgumentException("Reading pdf leaf nodes is not yet implemented");}lns[j].setUniqueLeafId(j + 1);}int numDirectedGraphNodes=raf.readInt();DirectedGraphNode[] graphNodes=new DirectedGraphNode[numDirectedGraphNodes];int[] dgnLeafIndices=new int[numDirectedGraphNodes];int[] dgnDecIndices=new int[numDirectedGraphNodes];for (int g=0; g < numDirectedGraphNodes; g++) {graphNodes[g]=new DirectedGraphNode(null,null);graphNodes[g].setUniqueGraphNodeID(g + 1);dgnLeafIndices[g]=raf.readInt();dgnDecIndices[g]=raf.readInt();}for (int i=0; i < numDecNodes; i++) {for (int k=0; k < childIndexes[i].length; k++) {Node child=childIndexToNode(childIndexes[i][k],dns,lns,graphNodes);dns[i].addDaughter(child);}}for (int g=0; g < numDirectedGraphNodes; g++) {Node leaf=childIndexToNode(dgnLeafIndices[g],dns,lns,graphNodes);graphNodes[g].setLeafNode(leaf);Node dec=childIndexToNode(dgnDecIndices[g],dns,lns,graphNodes);if (dec != null && !dec.isDecisionNode()) throw new IllegalArgumentException("Only decision nodes allowed, read " + dec.getClass());graphNodes[g].setDecisionNode((DecisionNode)dec);}Node rootNode;if (graphNodes.length > 0) {rootNode=graphNodes[0];} else if (dns.length > 0) {rootNode=dns[0];((DecisionNode)rootNode).countData();} else if (lns.length > 0) {rootNode=lns[0];} else {rootNode=null;}return new DirectedGraph(rootNode,featureDefinition,props);}  }
class C{  public ZoomToFitControl(String group,int margin,long duration,int button){  this.m_group=group;  this.m_margin=margin;  this.m_duration=duration;  this.m_button=button;}  }
class C{  public static String byteToHexString(byte[] bytes,int start,int end){  if (bytes == null) {    throw new IllegalArgumentException("bytes == null");  }  StringBuilder s=new StringBuilder();  for (int i=start; i < end; i++) {    s.append(String.format("%02x",bytes[i]));  }  return s.toString();}  }
class C{  public GroupsIsMemberQuery(VkApiClient client,UserActor actor,String groupId){  super(client,"groups.isMember",BoolInt.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public PlacesAddQuery country(Integer value){  return unsafeParam("country",value);}  }
class C{  public static BesselJResult rjBesl(double x,double alpha,int nb){  final double[] b=new double[nb];  int ncalc=0;  double alpem=0;  double alp2em=0;  final int magx=(int)x;  if ((nb > 0) && (x >= X_MIN) && (x <= X_MAX)&& (alpha >= 0)&& (alpha < 1)) {    ncalc=nb;    for (int i=0; i < nb; ++i) {      b[i]=0;    }    double tempa;    double tempb;    double tempc;    double tover;    if (x < RTNSIG) {      tempa=1;      alpem=1 + alpha;      double halfx=0;      if (x > ENMTEN) {        halfx=0.5 * x;      }      if (alpha != 0) {        tempa=FastMath.pow(halfx,alpha) / (alpha * Gamma.gamma(alpha));      }      tempb=0;      if (x + 1 > 1) {        tempb=-halfx * halfx;      }      b[0]=tempa + (tempa * tempb / alpem);      if ((x != 0) && (b[0] == 0)) {        ncalc=0;      }      if (nb != 1) {        if (x <= 0) {          for (int n=1; n < nb; ++n) {            b[n]=0;          }        } else {          tempc=halfx;          tover=tempb != 0 ? ENMTEN / tempb : 2 * ENMTEN / x;          for (int n=1; n < nb; ++n) {            tempa/=alpem;            alpem+=1;            tempa*=tempc;            if (tempa <= tover * alpem) {              tempa=0;            }            b[n]=tempa + (tempa * tempb / alpem);            if ((b[n] == 0) && (ncalc > n)) {              ncalc=n;            }          }        }      }    } else     if ((x > 25.0) && (nb <= magx + 1)) {      final double xc=FastMath.sqrt(PI2 / x);      final double mul=0.125 / x;      final double xin=mul * mul;      int m=0;      if (x >= 130.0) {        m=4;      } else       if (x >= 35.0) {        m=8;      } else {        m=11;      }      final double xm=4.0 * m;      double t=(double)((int)((x / TWOPI) + 0.5));      final double z=x - t * TOWPI1 - t * TWOPI2 - (alpha + 0.5) / PI2;      double vsin=FastMath.sin(z);      double vcos=FastMath.cos(z);      double gnu=2 * alpha;      double capq;      double capp;      double s;      double t1;      double xk;      for (int i=1; i <= 2; i++) {        s=(xm - 1 - gnu) * (xm - 1 + gnu) * xin* 0.5;        t=(gnu - (xm - 3.0)) * (gnu + (xm - 3.0));        capp=(s * t) / FACT[2 * m];        t1=(gnu - (xm + 1)) * (gnu + (xm + 1));        capq=(s * t1) / FACT[2 * m + 1];        xk=xm;        int k=2 * m;        t1=t;        for (int j=2; j <= m; j++) {          xk-=4.0;          s=(xk - 1 - gnu) * (xk - 1 + gnu);          t=(gnu - (xk - 3.0)) * (gnu + (xk - 3.0));          capp=(capp + 1 / FACT[k - 2]) * s * t* xin;          capq=(capq + 1 / FACT[k - 1]) * s * t1* xin;          k-=2;          t1=t;        }        capp+=1;        capq=(capq + 1) * ((gnu * gnu) - 1) * (0.125 / x);        b[i - 1]=xc * (capp * vcos - capq * vsin);        if (nb == 1) {          return new BesselJResult(b.clone(),ncalc);        }        t=vsin;        vsin=-vcos;        vcos=t;        gnu+=2.0;      }      if (nb > 2) {        gnu=2 * alpha + 2.0;        for (int j=2; j < nb; ++j) {          b[j]=gnu * b[j - 1] / x - b[j - 2];          gnu+=2.0;        }      }    } else {      final int nbmx=nb - magx;      int n=magx + 1;      int nstart=0;      int nend=0;      double en=2 * (n + alpha);      double plast=1;      double p=en / x;      double pold;      double test=2 * ENSIG;      boolean readyToInitialize=false;      if (nbmx >= 3) {        tover=ENTEN / ENSIG;        nstart=magx + 2;        nend=nb - 1;        en=2 * (nstart - 1 + alpha);        double psave;        double psavel;        for (int k=nstart; k <= nend; k++) {          n=k;          en+=2.0;          pold=plast;          plast=p;          p=(en * plast / x) - pold;          if (p > tover) {            tover=ENTEN;            p/=tover;            plast/=tover;            psave=p;            psavel=plast;            nstart=n + 1;            do {              n+=1;              en+=2.0;              pold=plast;              plast=p;              p=(en * plast / x) - pold;            } while (p <= 1);            tempb=en / x;            test=pold * plast * (0.5 - 0.5 / (tempb * tempb));            test/=ENSIG;            p=plast * tover;            n-=1;            en-=2.0;            nend=FastMath.min(nb,n);            for (int l=nstart; l <= nend; l++) {              pold=psavel;              psavel=psave;              psave=(en * psavel / x) - pold;              if (psave * psavel > test) {                ncalc=l - 1;                readyToInitialize=true;                break;              }            }            ncalc=nend;            readyToInitialize=true;            break;          }        }        if (!readyToInitialize) {          n=nend;          en=2 * (n + alpha);          test=FastMath.max(test,FastMath.sqrt(plast * ENSIG) * FastMath.sqrt(2 * p));        }      }      if (!readyToInitialize) {        do {          n+=1;          en+=2.0;          pold=plast;          plast=p;          p=(en * plast / x) - pold;        } while (p < test);      }      n+=1;      en+=2.0;      tempb=0;      tempa=1 / p;      int m=(2 * n) - 4 * (n / 2);      double sum=0;      double em=(double)(n / 2);      alpem=em - 1 + alpha;      alp2em=2 * em + alpha;      if (m != 0) {        sum=tempa * alpem * alp2em / em;      }      nend=n - nb;      boolean readyToNormalize=false;      boolean calculatedB0=false;      for (int l=1; l <= nend; l++) {        n-=1;        en-=2.0;        tempc=tempb;        tempb=tempa;        tempa=(en * tempb / x) - tempc;        m=2 - m;        if (m != 0) {          em-=1;          alp2em=2 * em + alpha;          if (n == 1) {            break;          }          alpem=em - 1 + alpha;          if (alpem == 0) {            alpem=1;          }          sum=(sum + tempa * alp2em) * alpem / em;        }      }      b[n - 1]=tempa;      if (nend >= 0) {        if (nb <= 1) {          alp2em=alpha;          if (alpha + 1 == 1) {            alp2em=1;          }          sum+=b[0] * alp2em;          readyToNormalize=true;        } else {          n-=1;          en-=2.0;          b[n - 1]=(en * tempa / x) - tempb;          if (n == 1) {            calculatedB0=true;          } else {            m=2 - m;            if (m != 0) {              em-=1;              alp2em=2 * em + alpha;              alpem=em - 1 + alpha;              if (alpem == 0) {                alpem=1;              }              sum=(sum + (b[n - 1] * alp2em)) * alpem / em;            }          }        }      }      if (!readyToNormalize && !calculatedB0) {        nend=n - 2;        if (nend != 0) {          for (int l=1; l <= nend; l++) {            n-=1;            en-=2.0;            b[n - 1]=(en * b[n] / x) - b[n + 1];            m=2 - m;            if (m != 0) {              em-=1;              alp2em=2 * em + alpha;              alpem=em - 1 + alpha;              if (alpem == 0) {                alpem=1;              }              sum=(sum + b[n - 1] * alp2em) * alpem / em;            }          }        }      }      if (!readyToNormalize) {        if (!calculatedB0) {          b[0]=2.0 * (alpha + 1) * b[1] / x - b[2];        }        em-=1;        alp2em=2 * em + alpha;        if (alp2em == 0) {          alp2em=1;        }        sum+=b[0] * alp2em;      }      if (FastMath.abs(alpha) > 1e-16) {        sum*=Gamma.gamma(alpha) * FastMath.pow(x * 0.5,-alpha);      }      tempa=ENMTEN;      if (sum > 1) {        tempa*=sum;      }      for (n=0; n < nb; n++) {        if (FastMath.abs(b[n]) < tempa) {          b[n]=0;        }        b[n]/=sum;      }    }  } else {    if (b.length > 0) {      b[0]=0;    }    ncalc=FastMath.min(nb,0) - 1;  }  return new BesselJResult(b.clone(),ncalc);}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof GrantPermission) {    GrantPermission gp=(GrantPermission)obj;    return this.implies(gp) && gp.implies(this);  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201223,skilltarget,num0,skillname);}  }
class C{  static boolean validatePlaysRoleStructure(CastingImpl casting){  InstanceImpl rolePlayer=casting.getRolePlayer();  TypeImpl<?,?> currentConcept=rolePlayer.getParentIsa();  RoleType roleType=casting.getRole();  Set<Concept> visitedConcepts=new HashSet<>();  while (currentConcept != null) {    visitedConcepts.add(currentConcept);    if (currentConcept.playsRoles().contains(roleType))     return true;    currentConcept=currentConcept.getParentAko();  }  return false;}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands){  return formatNumber(number,digitCount,separateThousands,'.');}  }
class C{  public void endAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null) {    l.onChartGestureEnd(me,mLastGesture);  }}  }
class C{  public void onMessage(RemoteMessage remoteMessage){  if (mFCMListener != null)   mFCMListener.onMessage(remoteMessage);}  }
class C{  public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){  fn_=Objects.requireNonNull(fn);  equality_=Objects.requireNonNull(equality);}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator [-summary=summary.txt] [-modelDir=models/]" + "[-nMin=#] [-nMax=#] [-dist=#]" + "[-s] [-docClass=...] [-compClass=...] [-merge]");  System.err.println("nMin=#\tMin n-gram size.\nnMax=#\tMax n-gram size.\n" + "dist=#\tN-gram window.\n" + "-s\tFor non-verbose output (silent).\n"+ "-docClass=...\tA java class identifier to use as Document class. "+ "Defaults to jinsect.documentModel.NGramDocument \n"+ "-compClass=...\tA java class identifier to use as Comparator class. "+ "Defaults to jinsect.documentModel.NGramCachedGraphComparator \n"+ "-merge\tIf indicated then the model files' representation is merged"+ " to provide an overall model graph. Then comparison is performed"+ " with respect to the overall graph."+ "-jack\tUse jackknifing in comparison (round robin comparison with leave-one-out)"+ "to the model summaries. The resulting score is the mean of the scores."+ "-?\tShow this screen.");}  }
class C{  public void addInterpolatedColumn(String name,Class type){  addInterpolatedColumn(name,type,null);}  }
class C{  protected ValueStoreBase(IdentityConstraint identityConstraint){  fIdentityConstraint=identityConstraint;  fFieldCount=fIdentityConstraint.getFieldCount();  fFields=new Field[fFieldCount];  fLocalValues=new Object[fFieldCount];  fLocalValueTypes=new short[fFieldCount];  fLocalItemValueTypes=new ShortList[fFieldCount];  for (int i=0; i < fFieldCount; i++) {    fFields[i]=fIdentityConstraint.getFieldAt(i);  }}  }
class C{  public SecureSetUserLevelQuery levels(List<String> value){  return unsafeParam("levels",value);}  }
class C{  public static int loadCubeMap(Context context,int[] cubeResources){  final int[] textureObjectIds=new int[1];  glGenTextures(1,textureObjectIds,0);  if (textureObjectIds[0] == 0) {    if (LoggerConfig.ON) {      Log.w(TAG,"Could not generate a new OpenGL texture object.");    }    return 0;  }  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inScaled=false;  final Bitmap[] cubeBitmaps=new Bitmap[6];  for (int i=0; i < 6; i++) {    cubeBitmaps[i]=BitmapFactory.decodeResource(context.getResources(),cubeResources[i],options);    if (cubeBitmaps[i] == null) {      if (LoggerConfig.ON) {        Log.w(TAG,"Resource ID " + cubeResources[i] + " could not be decoded.");      }      glDeleteTextures(1,textureObjectIds,0);      return 0;    }  }  glBindTexture(GL_TEXTURE_CUBE_MAP,textureObjectIds[0]);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,cubeBitmaps[0],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,cubeBitmaps[1],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,cubeBitmaps[2],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,cubeBitmaps[3],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,cubeBitmaps[4],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,cubeBitmaps[5],0);  glBindTexture(GL_TEXTURE_2D,0);  for (  Bitmap bitmap : cubeBitmaps) {    bitmap.recycle();  }  return textureObjectIds[0];}  }
class C{  public ObservableBool modified(){  return myModified;}  }
class C{  public SourceCommandTagReport executeCommand(final SourceCommandTagValue sourceCommandTagValue){  long equipmentId=sourceCommandTagValue.getEquipmentId();  long commandTagId=sourceCommandTagValue.getId();  EquipmentConfiguration equipmentConfiguration=configurationController.getProcessConfiguration().getEquipmentConfiguration(equipmentId);  SourceCommandTagReport report;  if (equipmentConfiguration != null) {    SourceCommandTag sourceCommandTag=equipmentConfiguration.getCommandTags().get(commandTagId);    if (sourceCommandTag != null) {      int sourceRetries=sourceCommandTag.getSourceRetries();      int sourceTimeout=sourceCommandTag.getSourceTimeout();      ICommandRunner commandRunner=commandRunners.get(equipmentId);      if (commandRunner != null) {        report=executeCommandOnImplementation(sourceCommandTagValue,commandRunner,sourceRetries,sourceTimeout);      } else {        report=new SourceCommandTagReport(STATUS_NOK_FROM_EQUIPMENTD,"Equipment " + equipmentId + " has no command runner. "+ "Does it support command execution?");      }    } else {      report=new SourceCommandTagReport(STATUS_NOK_INVALID_COMMAND,"Command tag " + commandTagId + " not found.");    }  } else {    report=new SourceCommandTagReport(STATUS_NOK_INVALID_EQUIPMENT,"Equipment " + equipmentId + " not found.");  }  return report;}  }
class C{  public PhotosSaveOwnerPhotoQuery photo(String value){  return unsafeParam("photo",value);}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,List<? extends Value> args){  return new JSpecialInvokeExpr(base,method,args);}  }
class C{  public void addRegexList(final Collection<String> regexList){  if (regexList != null) {    this.regexList.addAll(regexList);  }}  }
class C{  private void drawFireworks(final Canvas canvas){  if (!mIsAnimationStarted || mRocketAnimationPercent < 0.95f) {    return;  }  mFireworksDrawer.draw(canvas,canvas.getWidth(),(int)getCurveYStart());}  }
class C{  public Chatlog(String link,String user,Date creation){  this.link=link;  this.user=user;  this.creation=creation;}  }
class C{  protected boolean isValidUpdate(final TagValueUpdate tagValueUpdate){  if (tagValueUpdate != null && tagValueUpdate.getId().equals(id)) {    if (tagValueUpdate.getServerTimestamp() == null) {      return false;    }    final long newServerTime=tagValueUpdate.getServerTimestamp().getTime();    final long oldServerTime=serverTimestamp.getTime();    if (newServerTime > oldServerTime) {      return true;    }    if (newServerTime == oldServerTime && tagValueUpdate.getDaqTimestamp() != null) {      final long newDaqTime=tagValueUpdate.getDaqTimestamp().getTime();      if (daqTimestamp == null) {        return true;      }      final long oldDaqTime=daqTimestamp.getTime();      if (newDaqTime > oldDaqTime) {        return true;      } else       if (newDaqTime == oldDaqTime && tagValueUpdate.getSourceTimestamp() != null) {        final long newSourceTime=tagValueUpdate.getSourceTimestamp().getTime();        if (sourceTimestamp == null) {          return true;        }        final long oldSourceTime=sourceTimestamp.getTime();        if (tagValueUpdate instanceof TagUpdate || newSourceTime != oldSourceTime) {          return true;        }      } else       if (tagValueUpdate instanceof TagUpdate && newDaqTime == oldDaqTime && sourceTimestamp == null) {        return true;      }    }  }  return false;}  }
class C{  public void addConstantColumn(String name,Class type,Object dflt){  addColumn(name,ColumnFactory.getConstantColumn(type,dflt));}  }
class C{  protected void init(Visualization vis,String group,Schema schema){  setVisualization(vis);  setGroup(group);  addColumns(schema);  if (canGetBoolean(VisualItem.VISIBLE))   index(VisualItem.VISIBLE);  if (canGetBoolean(VisualItem.STARTVISIBLE))   index(VisualItem.STARTVISIBLE);  if (canGetBoolean(VisualItem.VALIDATED))   index(VisualItem.VALIDATED);}  }
class C{  final public static void close(Object... objs){  for (  Object o : objs) {    try {      if (o == null)       continue;      if (o instanceof ResultSet) {        ((ResultSet)o).close();      } else       if (o instanceof Statement) {        ((Statement)o).close();      } else       if (o instanceof PreparedStatement) {        ((PreparedStatement)o).close();      } else       if (o instanceof Connection) {        Connection c=(Connection)o;        Long[] dd=outdoor.get(c);        if (dd == null || dd[2] <= 0) {          try {            if (!c.getAutoCommit()) {              c.commit();            }          } catch (          Exception e1) {          } finally {            c.close();          }synchronized (outdoor) {            outdoor.remove(c);          }        } else {          dd[2]--;synchronized (outdoor) {            outdoor.put(c,dd);          }        }      }    } catch (    SQLException e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }}  }
class C{  public void open(){  webDriver.get(domain + path);}  }
class C{  public Value newAggregate(AggregateListener listener,Value args){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public boolean isGsaAvailable(){  if (mGsaAvailable != null)   return mGsaAvailable;  mGsaAvailable=false;  PackageManager pm=mContext.getPackageManager();  Intent searchIntent=new Intent(SEARCH_INTENT_ACTION);  searchIntent.setPackage(GSAState.SEARCH_INTENT_PACKAGE);  ResolveInfo resolveInfo=pm.resolveActivity(searchIntent,0);  if (resolveInfo == null || resolveInfo.activityInfo == null) {    mGsaAvailable=false;  } else   if (!isPackageAboveVersion(SEARCH_INTENT_PACKAGE,GSA_VERSION_FOR_DOCUMENT) || !isPackageAboveVersion(GMS_CORE_PACKAGE,GMS_CORE_VERSION)) {    mGsaAvailable=false;  } else {    mGsaAvailable=true;  }  return mGsaAvailable;}  }
