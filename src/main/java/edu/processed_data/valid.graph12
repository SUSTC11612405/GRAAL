class C{  public boolean logout(String sessionID,HttpServletRequest request,HttpServletResponse response) throws SSOException {  return AuthUtils.logout(sessionID,request,response);}  }
class C{  private void onTLMessage(@NotNull TLMessage message){  if (message.hasFromId()) {    final IUser user=databaseManager.getUserById(message.getFromId());    if (user != null) {      this.tlMessageHandler.onTLMessage(message);    }  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  removePageSessionAttribute(PROPERTY_ATTRIBUTE);  removePageSessionAttribute(PG_SESSION_MODIFIED);  recoveryMechID();  populateValues((String)getPageSessionAttribute(PGATTR_INDEX));  tablePopulated=false;  forwardTo();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Entity Name=\t").append(name).append("\n").append("Entity type=\t").append(type).append("\n").append("Object Class=\t").append(objectClass).append("\n").append("Service Name=\t").append(serviceName).append("\n").append("Creation Template=\t").append(creationTemplateName).append("\n").append("Search Template=\t").append(searchTemplateName).append("\n").append("Naming Attribute=\t").append(namingAttribute).append("\n").append("Status Attribute=\t").append(stAttribute).append("\n").append("Container RDN=\t").append(containerRDN).append("\n").append("Container Type=\t").append(containerType).append("\n");  return sb.toString();}  }
class C{  public static final String toSpacedHex(ByteBuffer bfr){  bfr.mark();  final StringBuilder sb=new StringBuilder();  boolean firstTime=true;  while (bfr.hasRemaining()) {    final byte b=bfr.get();    final int j=(b) & 0xFF;    String bt=Integer.toHexString(j);    if (bt.length() == 1) {      bt="0" + bt;    }    if (firstTime) {      firstTime=false;    } else {      sb.append(" ");    }    sb.append(bt);  }  bfr.reset();  return sb.toString();}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public ReferralAddViewBean(){  super("ReferralAdd",DEFAULT_DISPLAY_URL);}  }
class C{  private boolean append(String p_string,String p_style){  StyledDocument document=text_pane.getStyledDocument();  try {    document.insertString(document.getLength(),p_string,document.getStyle(p_style));  } catch (  BadLocationException e) {    System.out.println("ObjectInfoWindow.append: unable to insert text into text pane.");    return false;  }  return true;}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  private static void checkEntryAttributeValue(Entry entry,String attributeName,String attributeValue){  Iterable<Attribute> attrs=entry.getAllAttributes(attributeName);  assertThat(attrs).as("Was expecting attribute " + attributeName + "="+ attributeValue).hasSize(1);  Attribute attr=attrs.iterator().next();  Iterator<ByteString> attrValues=attr.iterator();  assertTrue(attrValues.hasNext());  ByteString attrValue=attrValues.next();  assertFalse(attrValues.hasNext());  assertEquals(attrValue.toString(),attributeValue,"Was expecting attribute " + attributeName + "="+ attributeValue+ " but got value: "+ attrValue);}  }
class C{  public static Map checkPolicyAndHandleDirectives(String userDN,Message message,Collection results,Authorizer authorizer,SessionContext invoSession,String wscID,Object token){  DiscoUtils.debug.message("DiscoService.checkPolicyAndHandleDirectives");  List offerings=new LinkedList();  List credentials=new LinkedList();  Map env=null;  Iterator k=results.iterator();  while (k.hasNext()) {    InsertEntryType entry=(InsertEntryType)k.next();    if (authorizer != null) {      if (env == null) {        env=new HashMap();        env.put(Authorizer.USER_ID,userDN);        env.put(Authorizer.AUTH_TYPE,message.getAuthenticationMechanism());        env.put(Authorizer.MESSAGE,message);      }      if (!authorizer.isAuthorized(message.getToken(),DiscoConstants.ACTION_LOOKUP,entry.getResourceOffering(),env)) {        DiscoUtils.debug.error("DiscoveryService.checkPolicyAndHan" + "dleDirectives: WSC is not authorized to do lookup");        continue;      }    }    ResourceOffering current=null;    try {      current=new ResourceOffering(Utils.convertJAXBToElement(entry.getResourceOffering(),false));    } catch (    Exception ex) {      DiscoUtils.debug.error("DiscoveryService.checkPolicyAndHandle" + "Directives:exception when constructing ResourceOffering:",ex);      continue;    }    List directives=entry.getAny();    if ((directives == null) || directives.isEmpty()) {      DiscoUtils.debug.message("DiscoService: no directives.");      offerings.add(current);    } else {      DiscoUtils.debug.message("DiscoService: has directives.");      handleDirectives(current,directives,userDN,message,invoSession,wscID,token,offerings,credentials);    }  }  Map returnMap=new HashMap();  returnMap.put(OFFERINGS,offerings);  returnMap.put(CREDENTIALS,credentials);  return returnMap;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public void switchToPreviousRevision() throws IOException, GeneralSecurityException {  LOGGER.info("Switching to previous revision.");  latestRevision=false;  dss=document.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);  Calendar cal=pkcs7.getTimeStampDate();  if (cal == SignUtils.UNDEFINED_TIMESTAMP_DATE)   cal=pkcs7.getSignDate();  signDate=cal.getTime();  List<String> names=sgnUtil.getSignatureNames();  if (names.size() > 1) {    signatureName=names.get(names.size() - 2);    document=new PdfDocument(new PdfReader(sgnUtil.extractRevision(signatureName)));    this.acroForm=PdfAcroForm.getAcroForm(document,true);    names=sgnUtil.getSignatureNames();    signatureName=names.get(names.size() - 1);    pkcs7=coversWholeDocument();    LOGGER.info(MessageFormat.format("Checking {0}signature {1}",pkcs7.isTsp() ? "document-level timestamp " : "",signatureName));  } else {    LOGGER.info("No signatures in revision");    pkcs7=null;  }}  }
class C{  private void expandAffixes(){  StringBuffer buffer=new StringBuffer();  if (posPrefixPattern != null) {    positivePrefix=expandAffix(posPrefixPattern,buffer);    positivePrefixFieldPositions=null;  }  if (posSuffixPattern != null) {    positiveSuffix=expandAffix(posSuffixPattern,buffer);    positiveSuffixFieldPositions=null;  }  if (negPrefixPattern != null) {    negativePrefix=expandAffix(negPrefixPattern,buffer);    negativePrefixFieldPositions=null;  }  if (negSuffixPattern != null) {    negativeSuffix=expandAffix(negSuffixPattern,buffer);    negativeSuffixFieldPositions=null;  }}  }
class C{  public ServerConfigXMLViewBean(){  super("ServerConfigXML");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public StateInteractive toggle_select(PlaPointFloat p_point){  Collection<BrdItem> picked_items=i_brd.pick_items(p_point);  boolean state_ended=picked_items.isEmpty();  if (picked_items.size() == 1) {    BrdItem picked_item=picked_items.iterator().next();    if (items_list.contains(picked_item)) {      items_list.remove(picked_item);      if (items_list.isEmpty()) {        state_ended=true;      }    } else {      items_list.add(picked_item);    }  }  i_brd.repaint();  StateInteractive result;  if (state_ended) {    result=return_state;  } else {    result=this;  }  actlog_start_scope(LogfileScope.TOGGLE_SELECT,p_point);  return result;}  }
class C{  public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);  return parse(bis);}  }
class C{  @Thunk int compareTitles(String titleA,String titleB){  boolean aStartsWithLetter=(titleA.length() > 0) && Character.isLetterOrDigit(titleA.codePointAt(0));  boolean bStartsWithLetter=(titleB.length() > 0) && Character.isLetterOrDigit(titleB.codePointAt(0));  if (aStartsWithLetter && !bStartsWithLetter) {    return -1;  } else   if (!aStartsWithLetter && bStartsWithLetter) {    return 1;  }  return mCollator.compare(titleA,titleB);}  }
class C{  public boolean hasExpired(){  return (expiry > 0) && (System.currentTimeMillis() >= expiry);}  }
class C{  private static InetAddress toIpAddress(String hostName){  try {    if (InetAddressValidator.isValid(hostName)) {      return InetAddress.getByName(hostName);    }  } catch (  UnknownHostException e) {  }  return null;}  }
class C{  public boolean isPasswordResetEnabled(){  return pwResetEnable;}  }
class C{  protected void baselineLayout(int targetSpan,int axis,int[] offsets,int[] spans){  int totalAscent=(int)(targetSpan * getAlignment(axis));  int totalDescent=targetSpan - totalAscent;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    float align=v.getAlignment(axis);    float viewSpan;    if (v.getResizeWeight(axis) > 0) {      float minSpan=v.getMinimumSpan(axis);      float maxSpan=v.getMaximumSpan(axis);      if (align == 0.0f) {        viewSpan=Math.max(Math.min(maxSpan,totalDescent),minSpan);      } else       if (align == 1.0f) {        viewSpan=Math.max(Math.min(maxSpan,totalAscent),minSpan);      } else {        float fitSpan=Math.min(totalAscent / align,totalDescent / (1.0f - align));        viewSpan=Math.max(Math.min(maxSpan,fitSpan),minSpan);      }    } else {      viewSpan=v.getPreferredSpan(axis);    }    offsets[i]=totalAscent - (int)(viewSpan * align);    spans[i]=(int)viewSpan;  }}  }
class C{  public Timestamp(Date timestamp,CertPath signerCertPath){  if (timestamp == null || signerCertPath == null) {    throw new NullPointerException();  }  this.timestamp=new Date(timestamp.getTime());  this.signerCertPath=signerCertPath;}  }
class C{  public OBJECT_NOT_EXIST(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public OAuth2ErrorException(final String error,final String errorDescription){  this(newAuthorizationServerError(error,errorDescription));}  }
class C{  public void testClearBitPositiveInside3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,13,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public LogException(Exception ex){  super(ex);}  }
class C{  public void startRefresh(BrowserNodeInfo nodeInfo){  BasicNode node=nodeInfo != null ? nodeInfo.getNode() : rootNode;  stopRefreshNode(node);  startRefreshNode(node,null,true);}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,boolean shouldAddAttrs) throws TransformerException {  ElemTemplateElement t=elem.getFirstChildElem();  if (null == t)   return;  if (elem.hasTextLitOnly() && m_optimizer) {    char[] chars=((ElemTextLiteral)t).getChars();    try {      this.pushElemTemplateElement(t);      m_serializationHandler.characters(chars,0,chars.length);    } catch (    SAXException se) {      throw new TransformerException(se);    } finally {      this.popElemTemplateElement();    }    return;  }  XPathContext xctxt=m_xcontext;  xctxt.pushSAXLocatorNull();  int currentTemplateElementsTop=m_currentTemplateElements.size();  m_currentTemplateElements.push(null);  try {    for (; t != null; t=t.getNextSiblingElem()) {      if (!shouldAddAttrs && t.getXSLToken() == Constants.ELEMNAME_ATTRIBUTE)       continue;      xctxt.setSAXLocator(t);      m_currentTemplateElements.setElementAt(t,currentTemplateElementsTop);      t.execute(this);    }  } catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(t);    throw te;  } finally {    m_currentTemplateElements.pop();    xctxt.popSAXLocator();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestEnvelopeType createAuthnRequestEnvelopeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl();}  }
class C{  public final void errPrintVerboseMessage(final LocalizableMessage msg){  if (isVerbose()) {    getErrStream().println(wrap(msg));  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public final PlaSide side_of(PlaPointInt p_point){  if (p_point == null)   return null;  int p_b_x=point_b.v_x - point_a.v_x;  int p_b_y=point_b.v_y - point_a.v_y;  int p_p_x=p_point.v_x - point_a.v_x;  int p_p_y=p_point.v_y - point_a.v_y;  return PlaSide.get_side_of(MathAux.determinant(p_b_x,p_b_y,p_p_x,p_p_y));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static int[] addToVector(Object obj,int index,Vector v,int[] starts){  if (!v.lastElement().equals(obj)) {    v.addElement(obj);    int count=v.size();    if (starts.length == count) {      int[] temp=new int[starts.length * 2];      System.arraycopy(starts,0,temp,0,starts.length);      starts=temp;    }    starts[count - 1]=index;  }  return starts;}  }
class C{  public void packAndShow(){  pack();  int minWidth=(int)getPreferredSize().getWidth();  int minHeight=(int)getPreferredSize().getHeight();  addComponentListener(new MinimumSizeComponentListener(this,minWidth,minHeight));  Utilities.centerOnComponent(this,parent);  setVisible(true);}  }
class C{  private boolean evalDNPattern(AciEvalContext evalCtx,LDAPURL url){  PatternDN pattern;  try {    pattern=PatternDN.decode(url.getRawBaseDN());  } catch (  DirectoryException ex) {    return false;  }  return pattern.matchesDN(evalCtx.getClientDN());}  }
class C{  public NoSuchMechanismException(){  super();}  }
class C{  public void leave(MetricReference metricReference){  Thread threadId=Thread.currentThread();  leave(threadId,metricReference);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(IFSConstants.DEFAULT_ENCODING).append("\" ?>");  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=IFSConstants.LIB_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("GetComplete").append(uri).append(">\n");  xml.append("<").append(prefix).append("URI").append(uri).append(">").append(this.uri).append("</").append(prefix).append("URI").append(">");  xml.append("</").append(prefix).append("GetComplete>");  return xml.toString();}  }
class C{  public boolean isExpired(){  return isExpired;}  }
class C{  public static int shorts(int nbFields){  return 2 * nbFields;}  }
class C{  public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public String toString(){  try {    return XMLUtils.print(toDocument(true).getDocumentElement());  } catch (  Exception ex) {    Utils.debug.error("Message.toString",ex);    return "";  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextStatementElement createSessionContextStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl();}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,X509CertificateHolder certHolder) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new IssuerAndSerialNumber(certHolder.toASN1Structure()));  SignerInfoGenerator sigInfoGen=createGenerator(contentSigner,sigId);  sigInfoGen.setAssociatedCertificate(certHolder);  return sigInfoGen;}  }
class C{  public ConnectionEvent(PooledConnection con,SQLException ex){  super(con);  this.ex=ex;}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  String action=request.getParameter(IFSConstants.USERACTION);  if (action != null && action.trim().equalsIgnoreCase(IFSConstants.CANCEL)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationHandler:: user pressed " + "cancel proceding to lrurl");    }    String lrURL=request.getParameter(IFSConstants.LRURL);    if (lrURL != null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFederationHandler::Redirecting to " + lrURL);      }      FSUtils.forwardRequest(request,response,lrURL);    } else {      FSUtils.debug.error("FSFederationHandler::LRURL is null in reqest ");    }  } else {    if (FSUtils.needSetLBCookieAndRedirect(request,response,false)) {      return;    }    try {      String metaAlias=request.getParameter(IFSConstants.META_ALIAS);      String provider=request.getParameter(IFSConstants.SELECTEDPROVIDER);      if (metaAlias == null || provider == null) {        FSUtils.debug.error("FSFederationHandler:: No MetaAlias " + "in request. Redirecting to error page");        String errorPage=FSServiceUtils.getErrorPageURL(request,null,metaAlias);        FSUtils.forwardRequest(request,response,errorPage);      } else {        FSPostLogin postLogin=new FSPostLogin();        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSFederationHandler::selected provider is " + provider);        }        String lrURL=postLogin.doFederation(request,response);        if (lrURL != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSFederationHandler:: Redirecting to" + lrURL + " after postLogin");          }          response.sendRedirect(lrURL);        } else {          FSUtils.debug.error("FSFederationHandler:: " + " LRURL is null from postlogin ");        }      }    } catch (    FSPostLoginException fsPostExp) {      FSUtils.debug.error("FSFederationHandler::FSPostLogin Exception:",fsPostExp);    }  }}  }
class C{  public AccountService initializePersistence(Handler<AsyncResult<Void>> resultHandler){  delegate.initializePersistence(resultHandler);  return this;}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  static void useSubtreeDeleteRequestControl(Connection connection) throws LdapException {  if (isSupported(SubtreeDeleteRequestControl.OID)) {    final String dn="ou=Apps,dc=example,dc=com";    final DeleteRequest request=Requests.newDeleteRequest(dn).addControl(SubtreeDeleteRequestControl.newControl(true));    final Result result=connection.delete(request);    if (result.isSuccess()) {      System.out.println("Successfully deleted " + dn + " and all entries below.");    } else {      System.err.println("Result: " + result.getDiagnosticMessage());    }  } else {    System.err.println("SubtreeDeleteRequestControl not supported");  }}  }
class C{  private void readHeaderFlags(ByteBuffer byteBuffer) throws TagException {  byte flags=byteBuffer.get();  unsynchronization=(flags & MASK_V24_UNSYNCHRONIZATION) != 0;  extended=(flags & MASK_V24_EXTENDED_HEADER) != 0;  experimental=(flags & MASK_V24_EXPERIMENTAL) != 0;  footer=(flags & MASK_V24_FOOTER_PRESENT) != 0;  if ((flags & FileConstants.BIT3) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT3));  }  if ((flags & FileConstants.BIT2) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT2));  }  if ((flags & FileConstants.BIT1) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT1));  }  if ((flags & FileConstants.BIT0) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT0));  }  if (isUnsynchronization()) {    logger.config(ErrorMessage.ID3_TAG_UNSYNCHRONIZED.getMsg(getLoggingFilename()));  }  if (extended) {    logger.config(ErrorMessage.ID3_TAG_EXTENDED.getMsg(getLoggingFilename()));  }  if (experimental) {    logger.config(ErrorMessage.ID3_TAG_EXPERIMENTAL.getMsg(getLoggingFilename()));  }  if (footer) {    logger.warning(ErrorMessage.ID3_TAG_FOOTER.getMsg(getLoggingFilename()));  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.LaxTsLastElement createLaxTsLastElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.LaxTsLastElementImpl();}  }
class C{  public boolean isMonitoringRunning(){  return entitlementConfiguration.isMonitoringRunning();}  }
class C{  public void testDelete5() throws SQLException {  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 1;");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be no rows",0,r.getInt(1));  r.close();}  }
class C{  static String clean(String str){  if (str == null || str.length() == 0) {    return str;  }  int len=str.length();  char[] chars=new char[len];  int count=0;  for (int i=0; i < len; i++) {    if (Character.isLetter(str.charAt(i))) {      chars[count++]=str.charAt(i);    }  }  if (count == len) {    return str.toUpperCase();  }  return new String(chars,0,count).toUpperCase();}  }
class C{  public DuplicateRequestParameterException(){  this("The request has a duplicate request parameter.");}  }
class C{  public com.sun.identity.saml2.jaxb.schema.AnyType createAnyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.schema.impl.AnyTypeImpl();}  }
class C{  private int processPollFds() throws IOException {  if (pollFds.get(0).revents == POLLIN) {    byte[] buffer=new byte[8];    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {    }  }  int readyKeyCount=0;  for (int i=1; i < pollFds.size(); ++i) {    StructPollfd pollFd=pollFds.get(i);    if (pollFd.revents == 0) {      continue;    }    if (pollFd.fd == null) {      break;    }    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;    pollFd.fd=null;    pollFd.userData=null;    int ops=key.interestOpsNoCheck();    int selectedOps=0;    if ((pollFd.revents & POLLHUP) != 0) {      selectedOps|=ops;    }    if ((pollFd.revents & POLLIN) != 0) {      selectedOps|=ops & (OP_ACCEPT | OP_READ);    }    if ((pollFd.revents & POLLOUT) != 0) {      if (key.isConnected()) {        selectedOps|=ops & OP_WRITE;      } else {        selectedOps|=ops & OP_CONNECT;      }    }    if (selectedOps != 0) {      boolean wasSelected=mutableSelectedKeys.contains(key);      if (wasSelected && key.readyOps() != selectedOps) {        key.setReadyOps(key.readyOps() | selectedOps);        ++readyKeyCount;      } else       if (!wasSelected) {        key.setReadyOps(selectedOps);        mutableSelectedKeys.add(key);        ++readyKeyCount;      }    }  }  return readyKeyCount;}  }
class C{  static boolean doesMenuBarBorderToolBar(JMenuBar c){  JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);  if (tb != null && tb.getOrientation() == JToolBar.HORIZONTAL) {    JRootPane rp=SwingUtilities.getRootPane(c);    Point point=new Point(0,0);    point=SwingUtilities.convertPoint(c,point,rp);    int menuX=point.x;    int menuY=point.y;    point.x=point.y=0;    point=SwingUtilities.convertPoint(tb,point,rp);    return (point.x == menuX && menuY + c.getHeight() == point.y && c.getWidth() == tb.getWidth());  }  return false;}  }
class C{  @Override public int hashCode(){  return dateTime.hashCode() ^ offset.hashCode();}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.notationDecl(name,publicId,systemId);}  }
class C{  public Mp4BoxHeader(ByteBuffer headerData){  update(headerData);}  }
class C{  public boolean hasEdge(DigraphNode node){  return outNodes.contains(node);}  }
class C{  public FontSizeAction(String nm,int size){  super(nm);  this.size=size;}  }
class C{  private static void testDexClassLoader(){  ClassLoader dexClassLoader=getDexClassLoader();  Class anotherClass;  try {    anotherClass=dexClassLoader.loadClass("Another");  } catch (  ClassNotFoundException cnfe) {    throw new RuntimeException("Another?");  }  Object another;  try {    another=anotherClass.newInstance();  } catch (  IllegalAccessException ie) {    throw new RuntimeException("new another",ie);  }catch (  InstantiationException ie) {    throw new RuntimeException("new another",ie);  }  dexClassLoader.getResource("nonexistent");}  }
class C{  @Deactivate public void deactivate(@SuppressWarnings("unused") ComponentContext context){  logger.debug("Deactivating key store service");  store=null;}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public static void addRightsToEntry(AciHandler handler,Set<String> searchAttributes,AciLDAPOperationContainer container,final Entry e,boolean skipCheck){  if (aclRights == null) {    aclRights=DirectoryServer.getSchema().getAttributeType(aclRightsAttrStr);  }  if (aclRightsInfo == null) {    aclRightsInfo=DirectoryServer.getSchema().getAttributeType(aclRightsInfoAttrStr);  }  if (dnAttributeType == null) {    dnAttributeType=DirectoryServer.getSchema().getAttributeType(dnAttrStr);  }  List<AttributeType> nonRightsAttrs=new LinkedList<>();  int attrMask=ACI_NULL;  for (  String a : searchAttributes) {    if (aclRightsAttrStr.equalsIgnoreCase(a)) {      attrMask|=ACL_RIGHTS;    } else     if (aclRightsInfoAttrStr.equalsIgnoreCase(a)) {      attrMask|=ACL_RIGHTS_INFO;    } else {      if ("*".equals(a)) {        nonRightsAttrs.add(CoreSchema.getObjectClassAttributeType());        nonRightsAttrs.addAll(e.getUserAttributes().keySet());      } else       if ("+".equals(a)) {        nonRightsAttrs.addAll(e.getOperationalAttributes().keySet());      } else {        nonRightsAttrs.add(DirectoryServer.getSchema().getAttributeType(a));      }    }  }  if (attrMask == ACI_NULL || (!skipCheck && !rightsAccessAllowed(container,handler,attrMask))) {    return;  }  container.setGetEffectiveRightsEval();  container.useAuthzid(true);  if (!nonRightsAttrs.isEmpty()) {    addAttributeLevelRights(container,handler,attrMask,e,nonRightsAttrs,skipCheck,false);  }  addAttributeLevelRights(container,handler,attrMask,e,container.getSpecificAttributes(),skipCheck,true);  addEntryLevelRights(container,handler,attrMask,e,skipCheck);}  }
class C{  public File(String pathname){  if (pathname == null) {    throw new NullPointerException();  }  this.path=fs.normalize(pathname);  this.prefixLength=fs.prefixLength(this.path);}  }
class C{  public void modifyProfile(String clientType,Map attributeValues) throws AMConsoleException {  String[] param={clientType};  logEvent("ATTEMPT_CLIENT_DETECTION_MODIFY_CLIENT_PROFILE",param);  Set readonly=getReadOnlyAttributeNames(clientType,attributeValues.keySet());  Map values=new HashMap(attributeValues.size());  for (Iterator i=attributeValues.keySet().iterator(); i.hasNext(); ) {    String name=(String)i.next();    if (!readonly.contains(name)) {      values.put(name,attributeValues.get(name));    }  }  if (!values.isEmpty()) {    Set set=new HashSet(2);    set.add(clientType);    values.put(ATTRIBUTE_NAME_CLIENT_TYPE,set);    try {      clientTypesManager.modifyClientExternal(getUserSSOToken(),values);      logEvent("SUCCEED_CLIENT_DETECTION_MODIFY_CLIENT_PROFILE",param);    } catch (    AMClientCapException e) {      String strError=getErrorString(e);      String[] paramsEx={clientType,strError};      logEvent("CLIENT_SDK_EXCEPTION_CLIENT_DETECTION_CREATE_CLIENT",paramsEx);      debug.warning("MAPDeviceProfileModelImpl.modifyProfile",e);      throw new AMConsoleException(strError);    }  }}  }
class C{  public static Rectangle calculateInnerArea(JComponent c,Rectangle r){  if (c == null) {    return null;  }  Rectangle rect=r;  Insets insets=c.getInsets();  if (rect == null) {    rect=new Rectangle();  }  rect.x=insets.left;  rect.y=insets.top;  rect.width=c.getWidth() - insets.left - insets.right;  rect.height=c.getHeight() - insets.top - insets.bottom;  return rect;}  }
class C{  public void process(Vector notifications){  for (int i=0; i < notifications.size(); i++) {    processRemoteNotification((Notification)notifications.elementAt(i));  }}  }
class C{  public T timestamp(String timestamp){  jsonValue.put(TIMESTAMP,timestamp);  return self();}  }
class C{  private ConditionResult processPresent(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_PRESENCE_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  ConditionResult result=ConditionResult.valueOf(entry.hasAttribute(attributeDescription));  if (logger.isTraceEnabled()) {    logger.trace("Returning %s for presence component %s in filter %s for entry %s",result,this,completeFilter,entry.getName());  }  return result;}  }
class C{  public PdfCanvas eoFillStroke(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL_STROKE,resources);  contentStream.getOutputStream().writeBytes(BStar);  return this;}  }
class C{  protected void selectPathForEvent(TreePath path,MouseEvent event){  if (isMultiSelectEvent(event)) {    TreePath anchor=getAnchorSelectionPath();    int anchorRow=(anchor == null) ? -1 : getRowForPath(tree,anchor);    if (anchorRow == -1 || tree.getSelectionModel().getSelectionMode() == TreeSelectionModel.SINGLE_TREE_SELECTION) {      tree.setSelectionPath(path);    } else {      int row=getRowForPath(tree,path);      TreePath lastAnchorPath=anchor;      if (isToggleSelectionEvent(event)) {        if (tree.isRowSelected(anchorRow)) {          tree.addSelectionInterval(anchorRow,row);        } else {          tree.removeSelectionInterval(anchorRow,row);          tree.addSelectionInterval(row,row);        }      } else       if (row < anchorRow) {        tree.setSelectionInterval(row,anchorRow);      } else {        tree.setSelectionInterval(anchorRow,row);      }      lastSelectedRow=row;      setAnchorSelectionPath(lastAnchorPath);      setLeadSelectionPath(path);    }  } else   if (isToggleSelectionEvent(event)) {    if (tree.isPathSelected(path))     tree.removeSelectionPath(path); else     tree.addSelectionPath(path);    lastSelectedRow=getRowForPath(tree,path);    setAnchorSelectionPath(path);    setLeadSelectionPath(path);  } else   if (SwingUtilities.isLeftMouseButton(event)) {    tree.setSelectionPath(path);    if (isToggleEvent(event)) {      toggleExpandState(path);    }  }}  }
class C{  public WrappedPlainView(Element elem,boolean wordWrap){  super(elem,Y_AXIS);  this.wordWrap=wordWrap;}  }
class C{  public List<String> calculateRoles(String principal,ResourceResponse resource){  List<String> roles=new ArrayList<>();  if (resource != null) {    final JsonValue userDetail=resource.getContent();    if (userRoles != null && !userDetail.get(userRoles).isNull()) {      if (userDetail.get(userRoles).isString()) {        for (        String role : userDetail.get(userRoles).asString().split(",")) {          roles.add(role);        }      } else       if (userDetail.get(userRoles).isList()) {        for (        JsonValue role : userDetail.get(userRoles)) {          if (RelationshipUtil.isRelationship(role)) {            JsonPointer roleId=new JsonPointer(role.get(RelationshipUtil.REFERENCE_ID).asString());            roles.add(roleId.leaf());          } else {            roles.add(role.asString());          }        }      } else {        logger.warn("Unknown roles type retrieved from user query, expected collection: {} type: {}",userRoles,userDetail.get(userRoles).getObject().getClass());      }    }  }  return roles;}  }
class C{  public JKXmlException(String message){  super(message);}  }
class C{  public static ArgumentException missingValueInPropertyModification(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_NAME_IN_PROPERTY_MOD.get(arg);  return new ArgumentException(msg);}  }
class C{  public boolean isFromBonemeal(){  return bonemeal;}  }
class C{  public boolean includeObjectClasses(){  return includeObjectClasses;}  }
class C{  private List<PersistableImportStep> generateImportSteps(String realm,PrivilegeSet privilegeSet,Subject admin) throws EntitlementException {  ApplicationService applicationService=applicationServiceFactory.create(admin,realm);  PrivilegeManager privilegeManager=privilegeManagerFactory.createReferralPrivilegeManager(realm,admin);  ApplicationTypeService applicationTypeService=new ApplicationTypeService();  ImportStepGenerator importStepGenerator=new ImportStepGenerator(applicationService,resourceTypeService,privilegeManager,privilegeValidator,applicationTypeService,realm,admin,privilegeSet);  importStepGenerator.generateImportSteps();  return importStepGenerator.getAllImportSteps();}  }
class C{  @Override public void initializeTask() throws DirectoryException {  Entry taskEntry=getTaskEntry();  restart=false;  shutdownMessage=INFO_TASK_SHUTDOWN_DEFAULT_MESSAGE.get(taskEntry.getName());  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(ATTR_SHUTDOWN_MESSAGE);  List<Attribute> attrList=taskEntry.getAllAttributes(attrType);  if (!attrList.isEmpty()) {    Attribute attr=attrList.get(0);    if (!attr.isEmpty()) {      String valueString=attr.iterator().next().toString();      shutdownMessage=INFO_TASK_SHUTDOWN_CUSTOM_MESSAGE.get(taskEntry.getName(),valueString);    }  }  attrType=DirectoryServer.getSchema().getAttributeType(ATTR_RESTART_SERVER);  attrList=taskEntry.getAllAttributes(attrType);  if (!attrList.isEmpty()) {    Attribute attr=attrList.get(0);    if (!attr.isEmpty()) {      String valueString=toLowerCase(attr.iterator().next().toString());      restart=valueString.equals("true") || valueString.equals("yes") || valueString.equals("on")|| valueString.equals("1");    }  }  Operation operation=getOperation();  if (operation != null) {    ClientConnection clientConnection=operation.getClientConnection();    if (restart) {      if (!clientConnection.hasPrivilege(Privilege.SERVER_RESTART,operation)) {        LocalizableMessage message=ERR_TASK_SHUTDOWN_INSUFFICIENT_RESTART_PRIVILEGES.get();        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,message);      }    } else {      if (!clientConnection.hasPrivilege(Privilege.SERVER_SHUTDOWN,operation)) {        LocalizableMessage message=ERR_TASK_SHUTDOWN_INSUFFICIENT_SHUTDOWN_PRIVILEGES.get();        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,message);      }    }  }}  }
class C{  private CoreSchemaSupportedLocales(){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectElement createSubjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectElementImpl();}  }
class C{  public static byte[] copyOfRange(byte[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  byte[] copy=new byte[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public Integer query(final String type,final ActionRequest request,final ODatabaseDocumentTx database) throws BadRequestException {  final Map<String,String> params=new HashMap<String,String>(request.getAdditionalParameters());  params.put(QueryConstants.RESOURCE_NAME,OrientDBRepoService.typeToOrientClassName(type));  if (params.get(COMMAND_ID) == null && params.get(COMMAND_EXPRESSION) == null) {    throw new BadRequestException("Either " + COMMAND_ID + " or "+ COMMAND_EXPRESSION+ " to identify/define a command must be passed in the parameters. "+ params);  }  final QueryInfo<OCommandSQL> queryInfo;  try {    queryInfo=findQueryInfo(type,params.get(COMMAND_ID),params.get(COMMAND_EXPRESSION));  } catch (  IllegalArgumentException e) {    throw new BadRequestException("The passed command identifier " + params.get(COMMAND_ID) + " does not match any configured commands on the OrientDB repository service.");  }  Integer result=null;  logger.debug("Evaluate command {}",queryInfo.getQueryString());  Name eventName=getEventName(params.get(COMMAND_ID),params.get(COMMAND_EXPRESSION));  EventEntry measure=Publisher.start(eventName,queryInfo,null);  try {    result=doTokenSubsitutionQuery(queryInfo,params,database);    measure.setResult(result);    return result;  } catch (  OQueryParsingException firstTryEx) {    throw new BadRequestException("Failed to resolve and parse the command " + queryInfo.getQueryString() + " with params: "+ params,firstTryEx);  }catch (  IllegalArgumentException ex) {    logger.debug("Command is invalid: {} {}",queryInfo.getQueryString(),ex.getMessage(),ex);    throw new BadRequestException("Command is invalid.");  }catch (  OException ex) {    logger.debug("Error executing DB command {} {}",queryInfo.getQueryString(),ex.getMessage(),ex);    throw new BadRequestException("Error executing DB command.");  }catch (  RuntimeException ex) {    logger.warn("Unexpected failure during DB command: {}",ex.getMessage());    throw ex;  } finally {    measure.end();  }}  }
class C{  public MethodDescriptor(Method method){  this(method,null);}  }
class C{  public boolean isResourceIDValid(String resourceID){  IDPPUtils.debug.message("PersonalProfile:isResourceIDValid:Init");  ResourceIDMapper resourceIDMapper=serviceManager.getResourceIDMapper();  if (resourceIDMapper == null) {    if (IDPPUtils.debug.warningEnabled()) {      IDPPUtils.debug.warning("PersonalProfile.isResourceIDValid." + "unable to get resoureid mapper");    }    return false;  }  String userID=resourceIDMapper.getUserID(serviceManager.getProviderID(),resourceID);  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile.isResourceIDValid." + userID);  }  return IDPPUtils.isUserExists(userID);}  }
class C{  public void cutout_selected_items(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateInteractive new_state=((StateSelectedItem)interactive_state).cutout_items();  set_interactive_state(new_state);}  }
class C{  @SuppressWarnings("unused") static <K,V>Promise<Map<K,V>> promiseMap(Class<K> keyType,Class<V> valueType){  return new BasePromise<>();}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction badPI;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("foo","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("invalid^Name","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  private void removeAbandoned(final AbandonedConfig ac){  final long now=System.currentTimeMillis();  final long timeout=now - (ac.getRemoveAbandonedTimeout() * 1000L);  final ArrayList<PooledObject<T>> remove=new ArrayList<>();  final Iterator<PooledObject<T>> it=allObjects.values().iterator();  while (it.hasNext()) {    final PooledObject<T> pooledObject=it.next();synchronized (pooledObject) {      if (pooledObject.getState() == PooledObjectState.ALLOCATED && pooledObject.getLastUsedTime() <= timeout) {        pooledObject.markAbandoned();        remove.add(pooledObject);      }    }  }  final Iterator<PooledObject<T>> itr=remove.iterator();  while (itr.hasNext()) {    final PooledObject<T> pooledObject=itr.next();    if (ac.getLogAbandoned()) {      pooledObject.printStackTrace(ac.getLogWriter());    }    try {      invalidateObject(pooledObject.getObject());    } catch (    final Exception e) {      e.printStackTrace();    }  }}  }
class C{  public ProxiedAuthV1Control(ByteString rawAuthorizationDN){  this(true,rawAuthorizationDN);}  }
class C{  public void notifyDataSetChanged(){  mDataSetObservable.notifyChanged();}  }
class C{  public synchronized Entry unpop(final T object){  Entry entry=new Entry(object);  if (size >= maxSize) {    entry.setReplaced(unpush());  }  if (first == null) {    first=last=entry;  } else {    last.setNext(entry);    entry.setPrevious(last);    last=entry;  }  size++;  return entry;}  }
class C{  public double noise(double x,double frequency,double amplitude,boolean normalized){  return noise(x,0,0,frequency,amplitude,normalized);}  }
class C{  public static void addLoginCallbackMessage(Callback[] callbacks,String username,String password){  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof NameCallback) {      ((NameCallback)callbacks[i]).setName(username);    } else     if (callbacks[i] instanceof PasswordCallback) {      ((PasswordCallback)callbacks[i]).setPassword(password.toCharArray());    }  }}  }
class C{  public static PrivateKeyEntry privateKey(KeyStore keyStore,char[] keyPassword,String keyAlgorithm,String signatureAlgorithm){  try {    PrivateKeyEntry found=null;    PasswordProtection password=new PasswordProtection(keyPassword);    for (    String alias : Collections.list(keyStore.aliases())) {      if (!keyStore.entryInstanceOf(alias,PrivateKeyEntry.class)) {        continue;      }      PrivateKeyEntry privateKey=(PrivateKeyEntry)keyStore.getEntry(alias,password);      if (!privateKey.getPrivateKey().getAlgorithm().equals(keyAlgorithm)) {        continue;      }      X509Certificate certificate=(X509Certificate)privateKey.getCertificate();      if (!certificate.getSigAlgName().contains(signatureAlgorithm)) {        continue;      }      if (found != null) {        throw new IllegalStateException("KeyStore has more than one private key for " + " keyAlgorithm: " + keyAlgorithm + " signatureAlgorithm: "+ signatureAlgorithm+ "\nfirst: "+ found.getPrivateKey()+ "\nsecond: "+ privateKey.getPrivateKey());      }      found=privateKey;    }    if (found == null) {      throw new IllegalStateException("KeyStore contained no private key for " + " keyAlgorithm: " + keyAlgorithm + " signatureAlgorithm: "+ signatureAlgorithm);    }    return found;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private static void assertEntryMatchesLDIF(Entry entry,String attrName,String... expectedLDIFLines){  final String actualVal=getAttributeValue(entry,attrName);  final Set<Set<String>> actual=toLDIFEntries(actualVal.split("\n"));  final Set<Set<String>> expected=toLDIFEntries(expectedLDIFLines);  assertThat(actual).as("In entry " + entry + " incorrect value for attr '"+ attrName+ "'").isEqualTo(expected);}  }
class C{  public synchronized long skip(long n){  if (n < 0) {    return 0;  }  if (n > count - pos) {    n=count - pos;  }  pos+=n;  return n;}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.hypot(dx,dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.hypot(velocityX,velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  private static final Long internalParseDate(String value,DateFormat[] formats){  Date date=null;  for (int i=0; (date == null) && (i < formats.length); i++) {    try {      date=formats[i].parse(value);    } catch (    ParseException e) {    }  }  if (date == null) {    return null;  }  return Long.valueOf(date.getTime());}  }
class C{  @SuppressWarnings("unused") static <T>Promise<T> blockingPromise(Class<T> cls){  return new BlockingPromise<>();}  }
class C{  public void clearParameters(){synchronized (m_reentryGuard) {    VariableStack varstack=new VariableStack();    m_xcontext.setVarStack(varstack);    m_userParams=null;  }}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSAuthnRequest.toURLEncodedQueryString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSAuthnRequest.toURLEncodedQueryString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append(IFSConstants.AUTH_REQUEST_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(majorVersion).append(IFSConstants.AMPERSAND).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(minorVersion).append(IFSConstants.AMPERSAND);  if ((extensions != null) && (!extensions.isEmpty())) {    Extension extension=(Extension)extensions.get(0);    urlEncodedAuthnReq.append(extension.toURLEncodedQueryString(QUERY_STRING_EXTENSION_PREFIX)).append(IFSConstants.AMPERSAND);    if (extensions.size() > 1) {      if (FSUtils.debug.warningEnabled()) {        FSUtils.debug.warning("FSAuthnRequest.toURLEncodedQueryString: " + "only one Extension element is allowed and extras " + " will be removed");      }    }  }  urlEncodedAuthnReq.append(IFSConstants.PROVIDER_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  if (consentURI != null) {    urlEncodedAuthnReq.append(IFSConstants.CONSENT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(consentURI)).append(IFSConstants.AMPERSAND);  }  if (affiliationID != null) {    urlEncodedAuthnReq.append(IFSConstants.AFFILIATIONID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(affiliationID)).append(IFSConstants.AMPERSAND);  }  if (issueInstant != null) {    urlEncodedAuthnReq.append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);  } else {    FSUtils.debug.error("FSAuthnRequest.toURLEncodedQueryString: " + "issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  String strForceAuthn=IFSConstants.FALSE;  if (forceAuthn) {    strForceAuthn=IFSConstants.TRUE;  }  urlEncodedAuthnReq.append(IFSConstants.FORCE_AUTHN_ELEM).append(IFSConstants.EQUAL_TO).append(strForceAuthn).append(IFSConstants.AMPERSAND);  String strIsPassive=IFSConstants.FALSE;  if (isPassive) {    strIsPassive=IFSConstants.TRUE;  }  urlEncodedAuthnReq.append(IFSConstants.IS_PASSIVE_ELEM).append(IFSConstants.EQUAL_TO).append(strIsPassive).append(IFSConstants.AMPERSAND);  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    String strFederate=IFSConstants.NAME_ID_POLICY_NONE;    if (federate) {      strFederate=IFSConstants.NAME_ID_POLICY_FEDERATED;      if (nameIDPolicy != null && nameIDPolicy.length() > 0) {        strFederate=nameIDPolicy;      }    }    urlEncodedAuthnReq.append(IFSConstants.NAMEID_POLICY_ELEMENT).append(IFSConstants.EQUAL_TO).append(strFederate).append(IFSConstants.AMPERSAND);  } else {    String strFederate=IFSConstants.FALSE;    if (federate) {      strFederate=IFSConstants.TRUE;    }    urlEncodedAuthnReq.append(IFSConstants.FEDERATE).append(IFSConstants.EQUAL_TO).append(strFederate).append(IFSConstants.AMPERSAND);  }  if (protocolProfile != null && protocolProfile.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.PROTOCOL_PROFILE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(protocolProfile)).append(IFSConstants.AMPERSAND);  }  if (authnContext != null) {    authnContext.setMinorVersion(minorVersion);    urlEncodedAuthnReq.append(authnContext.toURLEncodedQueryString());  }  if (relayState != null && relayState.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  }  if (scoping != null) {    urlEncodedAuthnReq.append(scoping.toURLEncodedQueryString());  }  if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (authContextCompType != null && authContextCompType.length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.AUTHN_CONTEXT_COMPARISON).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(authContextCompType)).append(IFSConstants.AMPERSAND);    }  }  int len=urlEncodedAuthnReq.length() - 1;  if (urlEncodedAuthnReq.charAt(len) == '&') {    urlEncodedAuthnReq=urlEncodedAuthnReq.deleteCharAt(len);  }  return urlEncodedAuthnReq.toString();}  }
class C{  public int bytesCount(){synchronized (lock) {    return bytesCount;  }}  }
class C{  private static boolean isReferralEntry(SearchResultEntry entry){  for (  String value : asSetOfString(entry,"objectClass")) {    if ("referral".equalsIgnoreCase(value)) {      return firstValueAsString(entry,"ref") != null;    }  }  return false;}  }
class C{  public static void resetEnv(){  if (lmgr != null) {    if (oldcclass != null) {      System.setProperty("java.util.logging.config.class",oldcclass);    }    if (oldcfile != null) {      System.setProperty("java.util.logging.config.file",oldcfile);    }  }}  }
class C{  public final boolean isPermissionGranted(final String permission){  return context.checkCallingPermission(permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String membershipType=getStringOptionValue(ARGUMENT_MEMBERSHIP_IDTYPE);  IdType membershipIdType=convert2IdType(membershipType);  String[] params={realm,type,idName,membershipType};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set memberOfs=membershipIdType.canBeMemberOf();    if (!memberOfs.contains(idType)) {      String[] args={type,membershipType};      throw new CLIException(MessageFormat.format(getResourceString("idrepo-cannot-be-member"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_GET_MEMBERS",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Set members=amid.getMembers(membershipIdType);    if ((members != null) && !members.isEmpty()) {      String msg=getResourceString("idrepo-members-result");      String[] arg={"",""};      for (Iterator i=members.iterator(); i.hasNext(); ) {        AMIdentity a=(AMIdentity)i.next();        arg[0]=a.getName();        arg[1]=a.getUniversalId();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-no-members"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_GET_MEMBERS",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,membershipType,e.getMessage()};    debugError("GetMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,membershipType,e.getMessage()};    debugError("GetMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public boolean isSubscript(){  sync();  return subscript;}  }
class C{  public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_First(field2,orderByComparator);}  }
class C{  public static Bar createEntity(EntityManager em){  Bar bar=new Bar();  bar.setValue(DEFAULT_VALUE);  return bar;}  }
class C{  public HeaderFilter(final MessageType messageType){  this.messageType=messageType;}  }
class C{  public ByteStringBuilder appendCompactUnsigned(long value){  Reject.ifFalse(value >= 0,"value must be >= 0");  try {    PackedLong.writeCompactUnsigned(asOutputStream(),value);  } catch (  IOException e) {    throw new IllegalStateException(e);  }  return this;}  }
class C{  private boolean isPositionIndex(int index){  return index >= 0 && index <= size;}  }
class C{  public InputMeta(InputStream in){  this.in=in;}  }
class C{  void sync(FlowView fv){  View lv=getLogicalView(fv);  text.setView(lv);  Container container=fv.getContainer();  FontRenderContext frc=sun.swing.SwingUtilities2.getFontRenderContext(container);  BreakIterator iter;  Container c=fv.getContainer();  if (c != null) {    iter=BreakIterator.getLineInstance(c.getLocale());  } else {    iter=BreakIterator.getLineInstance();  }  Object shaper=null;  if (c instanceof JComponent) {    shaper=((JComponent)c).getClientProperty(TextAttribute.NUMERIC_SHAPING);  }  text.setShaper(shaper);  measurer=new LineBreakMeasurer(text,iter,frc);  int n=lv.getViewCount();  for (int i=0; i < n; i++) {    View child=lv.getView(i);    if (child instanceof GlyphView) {      int p0=child.getStartOffset();      int p1=child.getEndOffset();      measurer.setPosition(text.toIteratorIndex(p0));      TextLayout layout=measurer.nextLayout(Float.MAX_VALUE,text.toIteratorIndex(p1),false);      ((GlyphView)child).setGlyphPainter(new GlyphPainter2(layout));    }  }  measurer.setPosition(text.getBeginIndex());}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public void initialize(Map initParams){  int authenticationPort=0;  int authorizationPort=0;  int accountingPort=0;  int connectionMinimum=0;  int connectionMaximum=0;  int connectionStep=0;  int requestTimeout=0;  String sharedSecret=(String)initParams.get("SharedSecret");  famCookieName=(String)initParams.get("FAMCookieName");  smCookieName=(String)initParams.get("SMCookieName");  cookieDomain=(String)initParams.get("CookieDomain");  String tmp=(String)initParams.get("AuthorizationPort");  try {    authorizationPort=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid authorization port");  }  tmp=(String)initParams.get("AuthenticationPort");  try {    authenticationPort=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid authentication port");  }  tmp=(String)initParams.get("AccountingPort");  try {    accountingPort=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid accounting port");  }  tmp=(String)initParams.get("ConnectionMinimum");  try {    connectionMinimum=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid connection minimum");  }  tmp=(String)initParams.get("ConnectionMaximum");  try {    connectionMaximum=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid connection maximum");  }  tmp=(String)initParams.get("ConnectionStep");  try {    connectionStep=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid connection step");  }  tmp=(String)initParams.get("RequestTimeout");  try {    requestTimeout=Integer.parseInt(tmp);  } catch (  Exception ex) {    System.out.println("Invalid request timeout");  }  smServerIP=(String)initParams.get("PolicyServerIPAddress");  agentHostName=(String)initParams.get("AgentHostName");  agentID=(String)initParams.get("AgentID");  agentIP=(String)initParams.get("AgentIP");  resource=(String)initParams.get("Resource");  System.out.println("Agent initialization details:" + agentHostName + " "+ sharedSecret+ " "+ smServerIP+ " "+ connectionMaximum+ " "+ connectionMinimum+ " "+ connectionStep+ " "+ requestTimeout+ " "+ authorizationPort+ " "+ authenticationPort+ " "+ accountingPort);  InitDef id=new InitDef(agentHostName,sharedSecret,true,new ServerDef());  id.addServerDef(smServerIP,connectionMinimum,connectionMaximum,connectionStep,requestTimeout,authorizationPort,authenticationPort,accountingPort);  agentAPI=new AgentAPI();  int status=agentAPI.init(id);  if (status == AgentAPI.SUCCESS) {    System.out.println("Agent API initialization successful");  } else {    System.out.println("Agent API initialization failed" + status);  }}  }
class C{  public static byte[] encryptKey(byte[] password,byte[] rawKey){  try {    Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);    c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);    return c.doFinal(rawKey);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + " is not available",e);  }}  }
class C{  public PrivateMLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory,boolean delegateToCLR){  super(urls,parent,factory,delegateToCLR);}  }
class C{  public ECPRequest createECPRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST,value);  if (obj == null) {    return new ECPRequestImpl(value);  } else {    return (ECPRequest)obj;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("FilterMap[");  sb.append("filterName=");  sb.append(this.filterName);  for (int i=0; i < servletNames.length; i++) {    sb.append(", servletName=");    sb.append(servletNames[i]);  }  for (int i=0; i < urlPatterns.length; i++) {    sb.append(", urlPattern=");    sb.append(urlPatterns[i]);  }  sb.append("]");  return (sb.toString());}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  if (constraints instanceof GridBagConstraints) {    setConstraints(comp,(GridBagConstraints)constraints);  } else   if (constraints != null) {    throw new IllegalArgumentException("cannot add to layout: constraints must be a GridBagConstraint");  }}  }
class C{  XPath createMatchPatternXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.MATCH,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  Name parameter(int n){  assert (n < arity);  Name param=names[n];  assert (param.isParam());  return param;}  }
class C{  public static PendingIntent buildTriggerServicePendingIntent(Context context){  final Intent intent=buildTriggerServiceIntent();  return PendingIntent.getService(context,EXECUTE_SCRIPT_REQUEST_CODE,intent,PendingIntent.FLAG_UPDATE_CURRENT);}  }
class C{  public int lower_y_value(int p_x){  int result=Math.max(oct_ly,oct_llx - p_x);  return Math.max(result,p_x - oct_lrx);}  }
class C{  public void test_setCharLjava_lang_ObjectIC(){  char[] x={0};  boolean thrown=false;  try {    Array.setChar(x,0,(char)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getChar(x,0));  try {    Array.setChar(new Object(),0,(char)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setChar(x,4,(char)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setChar(null,0,(char)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  SmsRouteTree build(@Nonnull SmsRouteTree parent){  Router router=new Router();  ResourcePath path=SmsRouteTree.concat(parent.path,uriTemplate);  SmsRouteTree tree=new SmsRouteTree(parent.authzModules,parent.defaultAuthzModule,false,router,filter,path,handlesFunction,uriTemplate,supportGeneralActions);  for (  SmsRouteTreeBuilder subTreeBuilder : subTreeBuilders) {    tree.addSubTree(subTreeBuilder.build(tree));  }  return tree;}  }
class C{  public void register(Bitmap img){  mCache.get(img);}  }
class C{  private UID(int unique,long time,short count){  this.unique=unique;  this.time=time;  this.count=count;}  }
class C{  public void addHeader(Header header){  if (header == null) {    return;  }  headers.add(header);}  }
class C{  public void addSchemaElementSelectionListener(SchemaElementSelectionListener listener){  listeners.add(listener);}  }
class C{  private Cookie findJwtSessionCookie(Request request){  List<Cookie> cookies=request.getCookies().get(cookieName);  if (cookies != null) {    return cookies.get(0);  }  return null;}  }
class C{  private boolean insert_door_ok_test(ExpandRoom p_room_1,ExpandRoom p_room_2,ShapeTile p_door_shape){  if (p_room_1.door_exists(p_room_2))   return false;  if (p_room_1 instanceof ExpandRoomObstacle && p_room_2 instanceof ExpandRoomObstacle) {    BrdItem first_item=((ExpandRoomObstacle)p_room_1).get_item();    BrdItem second_item=((ExpandRoomObstacle)p_room_2).get_item();    return first_item.shares_net(second_item);  }  if (!(p_room_1 instanceof ExpandRoomObstacle) && !(p_room_2 instanceof ExpandRoomObstacle)) {    return true;  }  PlaLineInt door_line=null;  PlaPointInt prev_corner=p_door_shape.corner(0);  int corner_count=p_door_shape.border_line_count();  for (int index=1; index < corner_count; ++index) {    PlaPointInt curr_corner=p_door_shape.corner(index);    if (!curr_corner.equals(prev_corner)) {      door_line=p_door_shape.border_line(index - 1);      break;    }    prev_corner=curr_corner;  }  if (door_line == null)   return false;  if (p_room_1 instanceof ExpandRoomObstacle) {    if (!insert_door_ok_test((ExpandRoomObstacle)p_room_1,door_line))     return false;  }  if (p_room_2 instanceof ExpandRoomObstacle) {    if (!insert_door_ok_test((ExpandRoomObstacle)p_room_2,door_line))     return false;  }  return true;}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  private void safeDamageRange(final Position p0,final Position p1){  safeDamager.damageRange(p0,p1);}  }
class C{  public static List<Challenge> parseChallenges(Headers responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<>();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.name(i))) {      continue;    }    String value=responseHeaders.value(i);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public <T>boolean isProvidedFor(Class<T> service){synchronized (providers) {    return providers.containsKey(service);  }}  }
class C{  private void flushBuffer() throws IOException {  if (count > 0) {    char[] chars=new char[count];    for (int i=0; i < count; i++)     chars[i]=(char)buf[i];    if (m_tracer != null)     m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_CHARACTERS,chars,0,chars.length);    count=0;  }}  }
class C{  public static FontProgram createType1Font(String metricsPath,String binaryPath) throws java.io.IOException {  return createType1Font(metricsPath,binaryPath,DEFAULT_CACHED);}  }
class C{  public BackupInfo(BackupDirectory backupDirectory,String backupID,Date backupDate,boolean isIncremental,boolean isCompressed,boolean isEncrypted,byte[] unsignedHash,byte[] signedHash,HashSet<String> dependencies,HashMap<String,String> backupProperties){  this.backupDirectory=backupDirectory;  this.backupID=backupID;  this.backupDate=backupDate;  this.isIncremental=isIncremental;  this.isCompressed=isCompressed;  this.isEncrypted=isEncrypted;  this.unsignedHash=unsignedHash;  this.signedHash=signedHash;  if (dependencies == null) {    this.dependencies=new HashSet<>();  } else {    this.dependencies=dependencies;  }  if (backupProperties == null) {    this.backupProperties=new HashMap<>();  } else {    this.backupProperties=backupProperties;  }}  }
class C{  <T>List<T> concatValues(final T[]... data){  final List<T> rv=new ArrayList<>();  for (  T[] values : data) {    rv.addAll(Arrays.asList(values));  }  return rv;}  }
class C{  public void processRequest(SIPRequest sipRequest,MessageChannel incomingMessageChannel){  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG) && listeningPoint != null)   logger.logDebug("PROCESSING INCOMING REQUEST " + sipRequest + " transactionChannel = "+ transactionChannel+ " listening point = "+ listeningPoint.getIPAddress()+ ":"+ listeningPoint.getPort());  if (listeningPoint == null) {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))     logger.logDebug("Dropping message: No listening point registered!");    return;  }  SIPTransactionStack sipStack=(SIPTransactionStack)transactionChannel.getSIPStack();  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))     logger.logDebug("No provider - dropping !!");    return;  }  if (sipStack == null)   InternalErrorHandler.handleException("Egads! no sip stack!");  SIPServerTransaction transaction=(SIPServerTransaction)this.transactionChannel;  if (transaction != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("transaction state = " + transaction.getState());  }  final String dialogId=sipRequest.getDialogId(true);  SIPDialog dialog=sipStack.getDialog(dialogId);  if (dialog != null && sipProvider != dialog.getSipProvider()) {    final Contact contact=dialog.getMyContactHeader();    if (contact != null) {      SipUri contactUri=(SipUri)(contact.getAddress().getURI());      String ipAddress=contactUri.getHost();      int contactPort=contactUri.getPort();      String contactTransport=contactUri.getTransportParam();      if (contactTransport == null)       contactTransport="udp";      if (contactPort == -1) {        if (contactTransport.equals("udp") || contactTransport.equals("tcp"))         contactPort=5060; else         contactPort=5061;      }      if (ipAddress != null && (!ipAddress.equals(listeningPoint.getIPAddress()) || contactPort != listeningPoint.getPort())) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("nulling dialog -- listening point mismatch!  " + contactPort + "  lp port = "+ listeningPoint.getPort());        }        dialog=null;      }    }  }  if (sipProvider.isDialogErrorsAutomaticallyHandled() && sipRequest.getToTag() == null) {    if (sipStack.findMergedTransaction(sipRequest)) {      this.sendLoopDetectedResponse(sipRequest,transaction);      return;    }  }  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug("dialogId = " + dialogId);    logger.logDebug("dialog = " + dialog);  }  if (sipRequest.getHeader(Route.NAME) != null && transaction.getDialog() != null) {    final RouteList routes=sipRequest.getRouteHeaders();    final Route route=(Route)routes.getFirst();    final SipUri uri=(SipUri)route.getAddress().getURI();    final HostPort hostPort=uri.getHostPort();    int port;    if (hostPort.hasPort()) {      port=hostPort.getPort();    } else {      if (listeningPoint.getTransport().equalsIgnoreCase(ListeningPoint.TLS))       port=5061; else       port=5060;    }    String host=hostPort.getHost().encode();    if ((host.equals(listeningPoint.getIPAddress()) || host.equalsIgnoreCase(listeningPoint.getSentBy())) && port == listeningPoint.getPort()) {      if (routes.size() == 1)       sipRequest.removeHeader(Route.NAME); else       routes.removeFirst();    }  }  final String sipRequestMethod=sipRequest.getMethod();  if (sipRequestMethod.equals(Request.REFER) && dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {    ReferToHeader sipHeader=(ReferToHeader)sipRequest.getHeader(ReferTo.NAME);    if (sipHeader == null) {      this.sendBadRequestResponse(sipRequest,transaction,"Refer-To header is missing");      return;    }    SIPTransaction lastTransaction=((SIPDialog)dialog).getLastTransaction();    if (lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {      final String lastTransactionMethod=lastTransaction.getMethod();      if (lastTransaction instanceof SIPServerTransaction) {        if ((lastTransaction.getInternalState() == TransactionState._PROCEEDING || lastTransaction.getInternalState() == TransactionState._TRYING) && lastTransactionMethod.equals(Request.INVITE)) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      } else       if (lastTransaction instanceof SIPClientTransaction) {        if (lastTransactionMethod.equals(Request.INVITE) && lastTransaction.getInternalState() != TransactionState._TERMINATED && lastTransaction.getInternalState() != TransactionState._COMPLETED) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      }    }  } else   if (sipRequestMethod.equals(Request.UPDATE)) {    if (sipProvider.isAutomaticDialogSupportEnabled() && dialog == null) {      this.sendCallOrTransactionDoesNotExistResponse(sipRequest,transaction);      return;    }  } else   if (sipRequestMethod.equals(Request.ACK)) {    if (transaction != null && transaction.isInviteTransaction()) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Processing ACK for INVITE Tx ");    } else {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Processing ACK for dialog " + dialog);      if (dialog == null) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);        }        SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);        if (st != null && st.isRetransmissionAlertEnabled()) {          st.disableRetransmissionAlerts();        }        SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);        if (ackTransaction != null) {          if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))           logger.logDebug("Found Tx pending ACK");          try {            ackTransaction.setAckSeen();            sipStack.removeTransaction(ackTransaction);            sipStack.removeTransactionPendingAck(ackTransaction);          } catch (          Exception ex) {            if (logger.isLoggingEnabled()) {              logger.logError("Problem terminating transaction",ex);            }          }          return;        }      } else {        if (!dialog.handleAck(transaction)) {          if (!dialog.isSequenceNumberValidation()) {            if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {              logger.logDebug("Dialog exists with loose dialog validation " + sipRequest.getFirstLine() + " isServerTransaction = "+ true+ " dialog = "+ dialog.getDialogId());            }            SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);            if (st != null && st.isRetransmissionAlertEnabled()) {              st.disableRetransmissionAlerts();            }            SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);            if (ackTransaction != null) {              if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))               logger.logDebug("Found Tx pending ACK");              try {                ackTransaction.setAckSeen();                sipStack.removeTransaction(ackTransaction);                sipStack.removeTransactionPendingAck(ackTransaction);              } catch (              Exception ex) {                if (logger.isLoggingEnabled()) {                  logger.logError("Problem terminating transaction",ex);                }              }            }          } else {            if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {              logger.logDebug("Dropping ACK - cannot find a transaction or dialog");            }            SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);            if (ackTransaction != null) {              if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))               logger.logDebug("Found Tx pending ACK");              try {                ackTransaction.setAckSeen();                sipStack.removeTransaction(ackTransaction);                sipStack.removeTransactionPendingAck(ackTransaction);              } catch (              Exception ex) {                if (logger.isLoggingEnabled()) {                  logger.logError("Problem terminating transaction",ex);                }              }            }            if ((!sipStack.isDeliverRetransmittedAckToListener()) || (ackTransaction != null && !sipStack.isNon2XXAckPassedToListener())) {              return;            }          }        } else {          dialog.addTransaction(transaction);          transaction.passToListener();          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);          if (sipRequest.getMethod().equals(Request.INVITE) && sipProvider.isDialogErrorsAutomaticallyHandled()) {            sipStack.putInMergeTable(transaction,sipRequest);          }          if (sipStack.isDeliverTerminatedEventForAck()) {            try {              sipStack.addTransaction(transaction);              transaction.scheduleAckRemoval();            } catch (            IOException ex) {            }          } else {            transaction.setMapped(true);          }        }      }    }  } else   if (sipRequestMethod.equals(Request.PRACK)) {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))     logger.logDebug("Processing PRACK for dialog " + dialog);    if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);      }      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");      }      SIPResponse notExist=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      try {        sipProvider.sendResponse(notExist);      } catch (      SipException e) {        logger.logError("error sending response",e);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    } else     if (dialog != null) {      if (!dialog.handlePrack(sipRequest)) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))         logger.logDebug("Dropping out of sequence PRACK ");        if (transaction != null) {          sipStack.removeTransaction(transaction);          transaction.releaseSem();        }        return;      } else {        try {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);        } catch (        Exception ex) {          InternalErrorHandler.handleException(ex);        }      }    } else {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Processing PRACK without a DIALOG -- this must be a proxy element");    }  } else   if (sipRequestMethod.equals(Request.BYE)) {    if (dialog != null && !dialog.isRequestConsumable(sipRequest)) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Dropping out of sequence BYE " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq().getSeqNumber());      if (dialog.getRemoteSeqNumber() > sipRequest.getCSeq().getSeqNumber()) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      } else       if (transaction.getInternalState() == TransactionState._PROCEEDING) {        this.sendTryingResponse(sipRequest,transaction);      }      sipStack.removeTransaction(transaction);      return;    } else     if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("dropping request -- automatic dialog " + "support enabled and dialog does not exist!");      this.sendCallOrTransactionDoesNotExistResponse(sipRequest,transaction);      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();        transaction=null;      }      return;    }    if (transaction != null && dialog != null) {      try {        if (sipProvider == dialog.getSipProvider()) {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          transaction.setDialog(dialog,dialogId);        }      } catch (      IOException ex) {        InternalErrorHandler.handleException(ex);      }    }    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logDebug("BYE Tx = " + transaction + " isMapped ="+ transaction.isTransactionMapped());    }  } else   if (sipRequestMethod.equals(Request.CANCEL)) {    SIPServerTransaction st=(SIPServerTransaction)sipStack.findCancelTransaction(sipRequest,true);    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logDebug("Got a CANCEL, InviteServerTx = " + st + " cancel Server Tx ID = "+ transaction+ " isMapped = "+ transaction.isTransactionMapped());    }    if (sipRequest.getMethod().equals(Request.CANCEL)) {      if (st != null && st.getInternalState() == TransactionState._TERMINATED) {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))         logger.logDebug("Too late to cancel Transaction");        try {          transaction.sendResponse(sipRequest.createResponse(Response.OK));        } catch (        Exception ex) {          if (ex.getCause() != null && ex.getCause() instanceof IOException) {            st.raiseIOExceptionEvent();          }        }        return;      }      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Cancel transaction = " + st);    }    if (transaction != null && st != null && st.getDialog() != null) {      transaction.setDialog((SIPDialog)st.getDialog(),dialogId);      dialog=(SIPDialog)st.getDialog();    } else     if (st == null && sipProvider.isAutomaticDialogSupportEnabled() && transaction != null) {      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("dropping request -- automatic dialog support " + "enabled and INVITE ST does not exist!");      }      try {        sipProvider.sendResponse(response);      } catch (      SipException ex) {        InternalErrorHandler.handleException(ex);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    }    if (st != null) {      st.setPassToListener();      try {        if (transaction != null) {          sipStack.addTransaction(transaction);          transaction.setPassToListener();          transaction.setInviteTransaction(st);          st.acquireSem();        }      } catch (      Exception ex) {        InternalErrorHandler.handleException(ex);      }    }  } else   if (sipRequestMethod.equals(Request.INVITE)) {    SIPTransaction lastTransaction=dialog == null ? null : dialog.getInviteTransaction();    if (dialog != null && transaction != null && lastTransaction != null && sipRequest.getCSeq().getSeqNumber() > lastTransaction.getCSeq() && lastTransaction instanceof SIPServerTransaction && sipProvider.isDialogErrorsAutomaticallyHandled() && dialog.isSequenceNumberValidation() && lastTransaction.isInviteTransaction() && lastTransaction.getInternalState() != TransactionState._COMPLETED && lastTransaction.getInternalState() != TransactionState._TERMINATED && lastTransaction.getInternalState() != TransactionState._CONFIRMED) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Sending 500 response for out of sequence message");      }      this.sendServerInternalErrorResponse(sipRequest,transaction);      return;    }    lastTransaction=(dialog == null ? null : dialog.getLastTransaction());    if (dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction != null && lastTransaction.isInviteTransaction() && lastTransaction instanceof ClientTransaction && lastTransaction.getState() != TransactionState.COMPLETED && lastTransaction.getState() != TransactionState.TERMINATED) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("DialogFilter::processRequest:lastTransaction.getState(): " + lastTransaction.getState() + " Sending 491 response for clientTx.");      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }    if (dialog != null && lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction.isInviteTransaction() && lastTransaction instanceof ServerTransaction && sipRequest.getCSeq().getSeqNumber() > lastTransaction.getCSeq() && (lastTransaction.getInternalState() == TransactionState._PROCEEDING || lastTransaction.getInternalState() == TransactionState._TRYING)) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Sending 491 response. Last transaction is in PROCEEDING state.");        logger.logDebug("last Transaction state = " + lastTransaction + " state "+ lastTransaction.getState());      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }  }  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug("CHECK FOR OUT OF SEQ MESSAGE " + dialog + " transaction "+ transaction);  }  if (dialog != null && transaction != null && !sipRequestMethod.equals(Request.BYE) && !sipRequestMethod.equals(Request.CANCEL) && !sipRequestMethod.equals(Request.ACK) && !sipRequestMethod.equals(Request.PRACK)) {    if (!dialog.isRequestConsumable(sipRequest)) {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("Dropping out of sequence message " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq());      }      if (dialog.getRemoteSeqNumber() > sipRequest.getCSeq().getSeqNumber() && sipProvider.isDialogErrorsAutomaticallyHandled()) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      } else {        try {          transaction.terminate();        } catch (        ObjectInUseException e) {          if (logger.isLoggingEnabled()) {            logger.logError("Unexpected exception",e);          }        }      }      return;    }    try {      if (sipProvider == dialog.getSipProvider()) {        sipStack.addTransaction(transaction);        if (!dialog.addTransaction(transaction)) {          return;        }        dialog.addRoute(sipRequest);        transaction.setDialog(dialog,dialogId);      }    } catch (    IOException ex) {      transaction.raiseIOExceptionEvent();      sipStack.removeTransaction(transaction);      return;    }  }  RequestEvent sipEvent;  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug(sipRequest.getMethod() + " transaction.isMapped = " + transaction.isTransactionMapped());  }  if (dialog == null && sipRequestMethod.equals(Request.NOTIFY)) {    SIPClientTransaction pendingSubscribeClientTx=sipStack.findSubscribeTransaction(sipRequest,listeningPoint);    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logDebug("PROCESSING NOTIFY  DIALOG == null " + pendingSubscribeClientTx);    }    if (sipProvider.isAutomaticDialogSupportEnabled() && pendingSubscribeClientTx == null && !sipStack.isDeliverUnsolicitedNotify()) {      try {        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("Could not find Subscription for Notify Tx.");        }        Response errorResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);        errorResponse.setReasonPhrase("Subscription does not exist");        sipProvider.sendResponse(errorResponse);        return;      } catch (      Exception ex) {        logger.logError("Exception while sending error response statelessly",ex);        return;      }    }    if (pendingSubscribeClientTx != null) {      transaction.setPendingSubscribe(pendingSubscribeClientTx);      SIPDialog subscriptionDialog=(SIPDialog)pendingSubscribeClientTx.getDefaultDialog();      if (subscriptionDialog == null || subscriptionDialog.getDialogId() == null || !subscriptionDialog.getDialogId().equals(dialogId)) {        if (subscriptionDialog != null && subscriptionDialog.getDialogId() == null) {          subscriptionDialog.setDialogId(dialogId);        } else {          subscriptionDialog=pendingSubscribeClientTx.getDialog(dialogId);        }        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("PROCESSING NOTIFY Subscribe DIALOG " + subscriptionDialog);        }        if (subscriptionDialog == null && (sipProvider.isAutomaticDialogSupportEnabled() || pendingSubscribeClientTx.getDefaultDialog() != null)) {          Event event=(Event)sipRequest.getHeader(EventHeader.NAME);          if (sipStack.isEventForked(event.getEventType())) {            subscriptionDialog=sipStack.createDialog(pendingSubscribeClientTx,transaction);          }        }        if (subscriptionDialog != null) {          transaction.setDialog(subscriptionDialog,dialogId);          if (subscriptionDialog.getState() != DialogState.CONFIRMED) {            subscriptionDialog.setPendingRouteUpdateOn202Response(sipRequest);          }          subscriptionDialog.setState(DialogState.CONFIRMED.getValue());          sipStack.putDialog(subscriptionDialog);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);          if (!transaction.isTransactionMapped()) {            this.sipStack.mapTransaction(transaction);            transaction.setPassToListener();            try {              this.sipStack.addTransaction(transaction);            } catch (            Exception ex) {            }          }        }      } else {        transaction.setDialog(subscriptionDialog,dialogId);        dialog=subscriptionDialog;        if (!transaction.isTransactionMapped()) {          this.sipStack.mapTransaction(transaction);          transaction.setPassToListener();          try {            this.sipStack.addTransaction(transaction);          } catch (          Exception ex) {          }        }        sipStack.putDialog(subscriptionDialog);        if (pendingSubscribeClientTx != null) {          subscriptionDialog.addTransaction(pendingSubscribeClientTx);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);        }      }      if (transaction != null && ((SIPServerTransaction)transaction).isTransactionMapped()) {        sipEvent=new RequestEventExt((SipProvider)sipProvider,(ServerTransaction)transaction,subscriptionDialog,(Request)sipRequest);      } else {        sipEvent=new RequestEventExt((SipProvider)sipProvider,null,subscriptionDialog,(Request)sipRequest);      }    } else {      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {        logger.logDebug("could not find subscribe tx");      }      sipEvent=new RequestEventExt(sipProvider,null,null,(Request)sipRequest);    }  } else {    if (transaction != null && (((SIPServerTransaction)transaction).isTransactionMapped())) {      sipEvent=new RequestEventExt(sipProvider,(ServerTransaction)transaction,dialog,(Request)sipRequest);    } else {      sipEvent=new RequestEventExt(sipProvider,null,dialog,(Request)sipRequest);    }  }  ((RequestEventExt)sipEvent).setRemoteIpAddress(sipRequest.getRemoteAddress().getHostAddress());  ((RequestEventExt)sipEvent).setRemotePort(sipRequest.getRemotePort());  sipProvider.handleEvent(sipEvent,transaction);}  }
class C{  private PatternIP(IPType ipType,byte[] ruleAddrBytes,byte[] rulePrefixBytes,BitSet wildCardBitSet){  this.ipType=ipType;  this.ruleAddrBytes=ruleAddrBytes;  this.rulePrefixBytes=rulePrefixBytes;  this.wildCardBitSet=wildCardBitSet;}  }
class C{  public PdfCanvasProcessor(IEventListener eventListener){  this.eventListener=eventListener;  this.supportedEvents=eventListener.getSupportedEvents();  operators=new HashMap<>();  populateOperators();  xobjectDoHandlers=new HashMap<>();  populateXObjectDoHandlers();  reset();}  }
class C{  public void append(String s){  content+=s;}  }
class C{  public boolean next_one(org.omg.CosNaming.BindingHolder b){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("next_one",true);    $in=_invoke($out);    boolean $result=$in.read_boolean();    b.value=org.omg.CosNaming.BindingHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return next_one(b);  } finally {    _releaseReply($in);  }}  }
class C{  private AlertHandler<?> loadHandler(String className,AlertHandlerCfg configuration,boolean initialize) throws InitializationException {  try {    AlertHandlerCfgDefn definition=AlertHandlerCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends AlertHandler> handlerClass=propertyDefinition.loadClass(className,AlertHandler.class);    AlertHandler handler=handlerClass.newInstance();    if (initialize) {      handler.initializeAlertHandler(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!handler.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_ALERTHANDLER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return handler;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_ALERTHANDLER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public MethodHandleInfo revealDirect(MethodHandle target){  MemberName member=target.internalMemberName();  if (member == null || (!member.isResolved() && !member.isMethodHandleInvoke()))   throw newIllegalArgumentException("not a direct method handle");  Class<?> defc=member.getDeclaringClass();  byte refKind=member.getReferenceKind();  assert (MethodHandleNatives.refKindIsValid(refKind));  if (refKind == REF_invokeSpecial && !target.isInvokeSpecial())   refKind=REF_invokeVirtual;  if (refKind == REF_invokeVirtual && defc.isInterface())   refKind=REF_invokeInterface;  try {    checkAccess(refKind,defc,member);    checkSecurityManager(defc,member);  } catch (  IllegalAccessException ex) {    throw new IllegalArgumentException(ex);  }  if (allowedModes != TRUSTED && member.isCallerSensitive()) {    Class<?> callerClass=target.internalCallerClass();    if (!hasPrivateAccess() || callerClass != lookupClass())     throw new IllegalArgumentException("method handle is caller sensitive: " + callerClass);  }  return new InfoFromMemberName(this,member,refKind);}  }
class C{  public void deleteSubPeopleContainers(Set peopleContainers) throws AMException, SSOException {  Iterator iter=peopleContainers.iterator();  while (iter.hasNext()) {    String peopleContainerDN=(String)iter.next();    AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN);    peopleContainer.delete();  }}  }
class C{  public boolean isChar(STypeDef requiredType,StringLiteral literal,LineCol lineCol) throws SyntaxException {  if (requiredType == null)   return isChar(literal,lineCol,true);  if (requiredType instanceof CharTypeDef)   return isChar(literal,lineCol,false);  if (requiredType instanceof SClassDef) {    SClassDef characterClass=(SClassDef)getTypeWithName("java.lang.Character",lineCol);    if (requiredType.equals(characterClass))     return true;    if (requiredType.isAssignableFrom(characterClass)) {      SClassDef stringClass=(SClassDef)getTypeWithName("java.lang.String",lineCol);      if (requiredType.isAssignableFrom(stringClass)) {        return isChar(literal,lineCol,true);      } else       return isChar(literal,lineCol,false);    }  }  return false;}  }
class C{  private static SearchFilter createFilterFromString(String filterString,int startPos,int endPos) throws DirectoryException {  int length=endPos - startPos;  if (length <= 0) {    LocalizableMessage message=ERR_SEARCH_FILTER_NULL.get();    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (filterString.charAt(startPos) == '(') {    if (filterString.charAt(endPos - 1) == ')') {      startPos++;      endPos--;    } else {      LocalizableMessage message=ERR_SEARCH_FILTER_MISMATCHED_PARENTHESES.get(filterString,startPos,endPos);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    }  }  char c=filterString.charAt(startPos);  if (c == '&') {    return decodeCompoundFilter(FilterType.AND,filterString,startPos + 1,endPos);  } else   if (c == '|') {    return decodeCompoundFilter(FilterType.OR,filterString,startPos + 1,endPos);  } else   if (c == '!') {    return decodeCompoundFilter(FilterType.NOT,filterString,startPos + 1,endPos);  }  int equalPos=-1;  for (int i=startPos; i < endPos; i++) {    if (filterString.charAt(i) == '=') {      equalPos=i;      break;    }  }  if (equalPos <= startPos) {    LocalizableMessage message=ERR_SEARCH_FILTER_NO_EQUAL_SIGN.get(filterString,startPos,endPos);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  int attrEndPos;  FilterType filterType;switch (filterString.charAt(equalPos - 1)) {case '~':    filterType=FilterType.APPROXIMATE_MATCH;  attrEndPos=equalPos - 1;break;case '>':filterType=FilterType.GREATER_OR_EQUAL;attrEndPos=equalPos - 1;break;case '<':filterType=FilterType.LESS_OR_EQUAL;attrEndPos=equalPos - 1;break;case ':':return decodeExtensibleMatchFilter(filterString,startPos,equalPos,endPos);default :filterType=FilterType.EQUALITY;attrEndPos=equalPos;break;}String attrType=filterString.substring(startPos,attrEndPos);AttributeDescription attrDesc=AttributeDescription.valueOf(toLowerCase(attrType));if (!attrDesc.getNameOrOID().equals(attrDesc.getAttributeType().getNameOrOID())) {attrDesc=AttributeDescription.create(attrDesc.getAttributeType(),toSet(attrDesc.getOptions()));}String valueStr=filterString.substring(equalPos + 1,endPos);if (valueStr.length() == 0) {return new SearchFilter(filterType,null,null,attrDesc,ByteString.empty(),null,null,null,null,false);} else if (valueStr.equals("*")) {return new SearchFilter(FilterType.PRESENT,null,null,attrDesc,null,null,null,null,null,false);} else if (valueStr.indexOf('*') >= 0) {return decodeSubstringFilter(filterString,attrDesc,equalPos,endPos);} else {boolean hasEscape=false;byte[] valueBytes=getBytes(valueStr);for (byte valueByte : valueBytes) {if (valueByte == 0x5C) {hasEscape=true;break;}}ByteString userValue;if (hasEscape) {ByteStringBuilder valueBuffer=new ByteStringBuilder(valueStr.length());for (int i=0; i < valueBytes.length; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}valueBuffer.appendByte(byteValue);} else {valueBuffer.appendByte(valueBytes[i]);}}userValue=valueBuffer.toByteString();} else {userValue=ByteString.wrap(valueBytes);}return new SearchFilter(filterType,null,null,attrDesc,userValue,null,null,null,null,false);}}  }
class C{  @Override public void run(){  ExpectedAcksInfo expectedAcksInfo=waitingAcks.get(csn);  if (expectedAcksInfo != null) {synchronized (expectedAcksInfo) {      if (expectedAcksInfo.isCompleted()) {        return;      }      waitingAcks.remove(csn);      AckMsg finalAck=expectedAcksInfo.createAck(true);      ServerHandler origServer=expectedAcksInfo.getRequesterServer();      if (logger.isTraceEnabled()) {        debug("sending timeout for assured update with CSN " + csn + " to serverId="+ origServer.getServerId());      }      try {        origServer.send(finalAck);      } catch (      IOException e) {        LocalizableMessageBuilder mb=new LocalizableMessageBuilder();        mb.append(ERR_RS_ERROR_SENDING_ACK.get(localReplicationServer.getServerId(),origServer.getServerId(),csn,baseDN));        mb.append(" ");        mb.append(stackTraceToSingleLineString(e));        logger.error(mb.toMessage());        stopServer(origServer,false);      }      boolean safeRead=expectedAcksInfo instanceof SafeReadExpectedAcksInfo;      if (safeRead) {        origServer.incrementAssuredSrReceivedUpdatesTimeout();      } else       if (origServer.isDataServer()) {        origServer.incrementAssuredSdReceivedUpdatesTimeout();      }      List<Integer> serversInTimeout=expectedAcksInfo.getTimeoutServers();      for (      Integer serverId : serversInTimeout) {        ServerHandler expectedDSInTimeout=connectedDSs.get(serverId);        ServerHandler expectedRSInTimeout=connectedRSs.get(serverId);        if (expectedDSInTimeout != null) {          if (safeRead) {            expectedDSInTimeout.incrementAssuredSrSentUpdatesTimeout();          }        } else         if (expectedRSInTimeout != null) {          if (safeRead) {            expectedRSInTimeout.incrementAssuredSrSentUpdatesTimeout();          } else {            expectedRSInTimeout.incrementAssuredSdSentUpdatesTimeout();          }        }      }      expectedAcksInfo.completed();    }  }}  }
class C{  public void testExceptionsOnSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  assertAllEntryMethodsReturnImmutableEntries(map);}  }
class C{  public ConsoleException(Throwable t){  super(t.getMessage());  errList=new ArrayList(1);  errList.add(t.getMessage());}  }
class C{  @Deprecated public int _INVALID_getDamage(){  return NumberConversions.ceil(getDamage());}  }
class C{  public static boolean isNotEmpty(final Collection<?> collection){  return collection != null && !collection.isEmpty();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributens01.class,args);}  }
class C{  private void parseMajorVersion(String majorVer) throws SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response(Element): invalid " + "MajorVersion",e);    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too high.");      }      throw new SAMLVersionMismatchException(SAMLUtils.bundle.getString("responseVersionTooHigh"));    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too low.");      }      throw new SAMLVersionMismatchException(SAMLUtils.bundle.getString("responseVersionTooLow"));    }  }}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  for (int i=0; i < blockSize; i++) {    cbcV[i]^=in[inOff + i];  }  int length=cipher.processBlock(cbcV,0,out,outOff);  System.arraycopy(out,outOff,cbcV,0,cbcV.length);  return length;}  }
class C{  public boolean isStandardStreamMetadataFormatSupported(){  return supportsStandardStreamMetadataFormat;}  }
class C{  public TestCertPath(Certificate[] certs){  super("testCertPath");  this.certs=certs;}  }
class C{  public ID3v22Tag(){  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();}  }
class C{  private boolean checkXMLENC(final byte[] msg){  if (!checkSecond(msg)) {    return false;  }  if (hasCorrectKeySize(16,msg) || hasCorrectKeySize(24,msg) || hasCorrectKeySize(32,msg)) {    return true;  }  return false;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (dtdHandler != null) {    dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public boolean isConstrained(){  return constrained;}  }
class C{  public String toString(){  return getName() + "=" + getValue();}  }
class C{  public char next(){  pos+=1;  int end=offset + count;  if (pos >= end) {    pos=end;    return DONE;  }  return current();}  }
class C{  @Utility public boolean isSimilar(ItemStack stack){  if (stack == null) {    return false;  }  if (stack == this) {    return true;  }  return getTypeId() == stack.getTypeId() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(),stack.getItemMeta()) : true);}  }
class C{  public static synchronized boolean validateApplication(WebResourceRoot resources,Context context) throws IOException {  String appName=context.getName();  ArrayList<ManifestResource> appManifestResources=new ArrayList<>();  WebResource resource=resources.getResource("/META-INF/MANIFEST.MF");  if (resource.isFile()) {    try (InputStream inputStream=resource.getInputStream()){      Manifest manifest=new Manifest(inputStream);      ManifestResource mre=new ManifestResource(sm.getString("extensionValidator.web-application-manifest"),manifest,ManifestResource.WAR);      appManifestResources.add(mre);    }   }  WebResource[] manifestResources=resources.getClassLoaderResources("/META-INF/MANIFEST.MF");  for (  WebResource manifestResource : manifestResources) {    if (manifestResource.isFile()) {      String jarName=manifestResource.getURL().toExternalForm();      Manifest jmanifest=null;      try (InputStream is=manifestResource.getInputStream()){        jmanifest=new Manifest(is);        ManifestResource mre=new ManifestResource(jarName,jmanifest,ManifestResource.APPLICATION);        appManifestResources.add(mre);      }     }  }  return validateManifestResources(appName,appManifestResources);}  }
class C{  public boolean encryptNameID(){  return encryptNameID;}  }
class C{  public Response networkResponse(){  return networkResponse;}  }
class C{  private void loadAudioAssets(){  menuM=new AudioClip(getClass().getResource("/res/sounds/menu.mp3").toString());  menuSelection=new AudioClip(getClass().getResource("/res/sounds/menuSelect.wav").toString());  menuNav=new AudioClip(getClass().getResource("/res/sounds/menuChange.wav").toString());  gameBGM=new AudioClip(getClass().getResource("/res/sounds/bgm.mp3").toString());  pJump=new AudioClip(getClass().getResource("/res/sounds/pJump.mp3").toString());  bump=new AudioClip(getClass().getResource("/res/sounds/bump.wav").toString());  godModeHit=new AudioClip(getClass().getResource("/res/sounds/godModeHit.wav").toString());  energyCharge=new AudioClip(getClass().getResource("/res/sounds/energyCharge.mp3").toString());  energyRelease=new AudioClip(getClass().getResource("/res/sounds/energyBeamRelease.wav").toString());  energyImpact=new AudioClip(getClass().getResource("/res/sounds/energyImpact.wav").toString());  teleport=new AudioClip(getClass().getResource("/res/sounds/teleport.wav").toString());  marioPitFall=new AudioClip(getClass().getResource("/res/sounds/marioPitFall.wav").toString());  marioDeath=new AudioClip(getClass().getResource("/res/sounds/marioDeath.mp3").toString());  coinHit=new AudioClip(getClass().getResource("/res/sounds/coinHit.mp3").toString());  powerup_appear=new AudioClip(getClass().getResource("/res/sounds/powerup_appear.wav").toString());  powerupTaken=new AudioClip(getClass().getResource("/res/sounds/powerup_taken.wav").toString());  initAura=new AudioClip(getClass().getResource("/res/sounds/auraInit.mp3").toString());  auraLoop=new AudioClip(getClass().getResource("/res/sounds/auraLoop.mp3").toString());  fireballRelease=new AudioClip(getClass().getResource("/res/sounds/fireball_release.mp3").toString());  fireballHit=new AudioClip(getClass().getResource("/res/sounds/fireballHit.mp3").toString());  fireballIncinerate=new AudioClip(getClass().getResource("/res/sounds/fireballIncinerate.wav").toString());  goombaHit=new AudioClip(getClass().getResource("/res/sounds/goombaHit.wav").toString());  goombaAttack=new AudioClip(getClass().getResource("/res/sounds/goombaAttack.mp3").toString());  flagPoleSeq_bgm=new AudioClip(getClass().getResource("/res/sounds/flagPoleSeq_bgm.mp3").toString());}  }
class C{  public static SecurityOptions createJCEKSCertificateOptions(String keystorePath,String keystorePwd,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  return createOptionsForCertificatType(CertificateType.JCEKS,keystorePath,keystorePwd,enableSSL,enableStartTLS,sslPort,aliasesToUse);}  }
class C{  public void incIDPCounter(String realm,String idpName,String counter){}  }
class C{  public boolean equal_at_end(int line_idx,PlaPointInt p_point){  if (p_point == null)   return false;  PlaPoint corner=corner(line_idx);  return corner.equals(p_point);}  }
class C{  public AttributeStatement(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("AttributeStatement: null input.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  boolean valid=SAMLUtilsCommon.checkStatement(element,"AttributeStatement");  if (!valid) {    SAMLUtilsCommon.debug.message("AttributeStatement: Wrong input.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (int i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AttributeStatement: " + " The tag name or tag namespace of child" + " element is either null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));        }        if (tagName.equals("Subject") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (this._subject != null) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("AttributeStatement: " + "should not contain more than one subject.");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("oneElement"));          } else {            this._subject=createSubject((Element)currentNode);          }        } else         if (tagName.equals("Attribute") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (_attributes == null) {            _attributes=new ArrayList();          }          if (!_attributes.add(createAttribute((Element)currentNode))) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("AttributeStatement:" + " failed to add to the Attribute list.");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("addListError"));          }        } else {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AttributeStatement:" + "wrong element:" + tagName);          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));        }      }    }  }  if (this._subject == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeStatement: missing Subject");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }  if (_attributes == null || _attributes.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeStatement: " + "should at least contain one Attribute element.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }}  }
class C{  public static int parseInt(String lexicalXSDInt){  if (theConverter == null)   initConverter();  return theConverter.parseInt(lexicalXSDInt);}  }
class C{  public boolean seek(ByteBuffer byteBuffer){  return false;}  }
class C{  public PartOfSet(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public void removeSchemaElementSelectionListener(SchemaElementSelectionListener listener){  listeners.add(listener);}  }
class C{  public static String escapeSpecialCharacters(String text){  text=removeInvalidXMLChars(text);  if (text == null || text.isEmpty()) {    return text;  }  final StringBuilder sb=new StringBuilder(text.length());  for (int i=0; i < text.length(); i++) {    char c=text.charAt(i);switch (c) {case '&':      sb.append("&amp;");    break;case '<':  sb.append("&lt;");break;case '>':sb.append("&gt;");break;case '\"':sb.append("&quot;");break;case '\'':sb.append("&apos;");break;case '\n':sb.append("&#xA;");break;case '\r':sb.append("&#xD;");break;default :sb.append(c);}}return sb.toString();}  }
class C{  private static synchronized void initCerts(){  if (SERVER_PRIVATE_KEY != null) {    return;  }  try {    PrivateKeyEntry serverPrivateKeyEntry=TestKeyStore.getServer().getPrivateKey("RSA","RSA");    SERVER_PRIVATE_KEY=OpenSSLKey.fromPrivateKey(serverPrivateKeyEntry.getPrivateKey());    SERVER_CERTIFICATES=NativeCrypto.encodeCertificates(serverPrivateKeyEntry.getCertificateChain());    PrivateKeyEntry clientPrivateKeyEntry=TestKeyStore.getClientCertificate().getPrivateKey("RSA","RSA");    CLIENT_PRIVATE_KEY=OpenSSLKey.fromPrivateKey(clientPrivateKeyEntry.getPrivateKey());    CLIENT_CERTIFICATES=NativeCrypto.encodeCertificates(clientPrivateKeyEntry.getCertificateChain());    KeyStore ks=TestKeyStore.getClient().keyStore;    String caCertAlias=ks.aliases().nextElement();    X509Certificate certificate=(X509Certificate)ks.getCertificate(caCertAlias);    X500Principal principal=certificate.getIssuerX500Principal();    CA_PRINCIPALS=new byte[][]{principal.getEncoded()};    initChannelIdKey();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void verifyHT(){  Map<Integer,VerificationStatus.HashMatchResult> hashResults=verificationStatus.getHashResults();  if (hashResults == null) {    hashResults=new TreeMap<Integer,VerificationStatus.HashMatchResult>();  }  SODFile sod=null;  try {    sod=lds.getSODFile();  } catch (  Exception e) {    verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.READ_ERROR_SOD_FAILURE,hashResults);    return;  }  Map<Integer,byte[]> storedHashes=sod.getDataGroupHashes();  for (  int dgNumber : storedHashes.keySet()) {    verifyHash(dgNumber,hashResults);  }  if (verificationStatus.getHT().equals(VerificationStatus.Verdict.UNKNOWN)) {    verificationStatus.setHT(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.ALL_HASHES_MATCH,hashResults);  } else {    verificationStatus.setHT(verificationStatus.getHT(),verificationStatus.getHTReason(),hashResults);  }}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (choiceLimits.length != choiceFormats.length) {    throw new InvalidObjectException("limits and format arrays of different length.");  }}  }
class C{  private void determineRuleType(final String ruleString){  if (ruleString.endsWith(".")) {    throw genericDecodeError();  } else   if (ruleString.startsWith(".")) {    ruleType=RuleType.HOSTPATTERN;  } else   if (ruleString.startsWith("[") || ruleString.indexOf(':') != -1) {    ruleType=RuleType.IPv6;  } else {    int wildcardsCount=0;    final String[] s=ruleString.split("\\.",-1);    ruleType=RuleType.HOST;    for (    final String value : s) {      if ("*".equals(value)) {        wildcardsCount++;        continue;      }      if (Character.isDigit(value.charAt(0))) {        ruleType=RuleType.IPv4;        break;      }    }    if (wildcardsCount == s.length) {      ruleType=RuleType.ALLWILDCARD;    }  }}  }
class C{  public boolean isLast(){  if (relativePosition == groupSize - 1) {    return true;  } else {    return false;  }}  }
class C{  public static ClassModder hookMethodEnd(AbstractMatcher<String> matcher,String methodName,String methodDesc,String injectedMethodOwner,String injectedMethodName){  return hookMethodEnd(matcher,methodName,methodDesc,injectedMethodOwner,injectedMethodName,"()V");}  }
class C{  public LDAPConnectionOptions populateLDAPOptions(LDAPConnectionOptions options) throws SSLConnectionException {  if (options == null) {    options=new LDAPConnectionOptions();  }  options.setUseSSL(state.useSSL);  options.setStartTLS(state.useStartTLS);  if (state.useSSL) {    SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();    sslConnectionFactory.init(getTrustManager() == null,state.keyStorePath,state.keystorePassword,state.certifNickname,state.truststorePath,state.truststorePassword);    options.setSSLConnectionFactory(sslConnectionFactory);  }  return options;}  }
class C{  private boolean validateLicenseKey(final String licenseKey){  return licenseKey != null && licenseKey.length() == LICENSE_KEY_LENGTH;}  }
class C{  @Override public String toString(){  return original;}  }
class C{  @Override protected URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null || proxy == null) {    throw new IllegalArgumentException("url == null || proxy == null");  }  return new FtpURLConnection(url,proxy);}  }
class C{  public static Request parseXML(String xml) throws SAMLException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  Element root=doc.getDocumentElement();  return new FSRequest(root);}  }
class C{  public boolean split_traces(PlaPoint p_location,int p_layer,int p_net_no){  ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);  Collection<BrdItem> picked_items=pick_items(p_location,p_layer,filter);  ShapeTileOctagon location_shape=p_location.to_box().bounding_octagon();  boolean trace_split=false;  for (  BrdItem curr_item : picked_items) {    BrdTracep curr_trace=(BrdTracep)curr_item;    if (!curr_trace.contains_net(p_net_no))     continue;    Collection<BrdTracep> split_pieces=curr_trace.split(location_shape);    if (split_pieces.size() != 1)     trace_split=true;  }  return trace_split;}  }
class C{  public void load(){  long t1=System.nanoTime();  initDirs();  initNaming();  Digester digester=createStartDigester();  InputSource inputSource=null;  InputStream inputStream=null;  File file=null;  try {    try {      file=configFile();      inputStream=new FileInputStream(file);      inputSource=new InputSource(file.toURI().toURL().toString());    } catch (    Exception e) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("catalina.configFail",file),e);      }    }    if (inputStream == null) {      try {        inputStream=getClass().getClassLoader().getResourceAsStream(getConfigFile());        inputSource=new InputSource(getClass().getClassLoader().getResource(getConfigFile()).toString());      } catch (      Exception e) {        if (log.isDebugEnabled()) {          log.debug(sm.getString("catalina.configFail",getConfigFile()),e);        }      }    }    if (inputStream == null) {      try {        inputStream=getClass().getClassLoader().getResourceAsStream("server-embed.xml");        inputSource=new InputSource(getClass().getClassLoader().getResource("server-embed.xml").toString());      } catch (      Exception e) {        if (log.isDebugEnabled()) {          log.debug(sm.getString("catalina.configFail","server-embed.xml"),e);        }      }    }    if (inputStream == null || inputSource == null) {      if (file == null) {        log.warn(sm.getString("catalina.configFail",getConfigFile() + "] or [server-embed.xml]"));      } else {        log.warn(sm.getString("catalina.configFail",file.getAbsolutePath()));        if (file.exists() && !file.canRead()) {          log.warn("Permissions incorrect, read permission is not allowed on the file.");        }      }      return;    }    try {      inputSource.setByteStream(inputStream);      digester.push(this);      digester.parse(inputSource);    } catch (    SAXParseException spe) {      log.warn("Catalina.start using " + getConfigFile() + ": "+ spe.getMessage());      return;    }catch (    Exception e) {      log.warn("Catalina.start using " + getConfigFile() + ": ",e);      return;    }  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  getServer().setCatalina(this);  getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());  getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());  initStreams();  try {    getServer().init();  } catch (  LifecycleException e) {    if (Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE")) {      throw new java.lang.Error(e);    } else {      log.error("Catalina.start",e);    }  }  long t2=System.nanoTime();  if (log.isInfoEnabled()) {    log.info("Initialization processed in " + ((t2 - t1) / 1000000) + " ms");  }}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKeyCopy);  encodedKeyCopy[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  public AMUserPasswordValidation(){}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Document doc) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("verifyXMLSignature: document is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  return verifyXMLSignature(doc,(String)null);}  }
class C{  public static void addAttributeToRemove(AttributeType attributeType){  instance.removeAttributes.add(attributeType);}  }
class C{  public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public void addPermittedDomains(Collection<String> domainNames){  if (domainNames == null) {    return;  }  for (  String domainName : domainNames) {    addPermittedDomain(domainName);  }}  }
class C{  public static String join(String separator,Iterable<?> elements){  StringBuilder sb=new StringBuilder();  for (Iterator<?> i=elements.iterator(); i.hasNext(); ) {    sb.append(i.next());    if (i.hasNext() && separator != null) {      sb.append(separator);    }  }  return sb.toString();}  }
class C{  private void appendBuffer(StringBuilder buffer,String name,String value){  if (buffer.length() > 0) {    buffer.append('&');  }  String encodedName=URLEncoder.encode(name);  buffer.append(encodedName);  buffer.append('=');  String encodedValue=URLEncoder.encode(value);  buffer.append(encodedValue);}  }
class C{  public synchronized void keyRelease(int keycode){  checkKeycodeArgument(keycode);  peer.keyRelease(keycode);  afterEvent();}  }
class C{  public void mapFunction(String fnQName,final Class<?> c,final String methodName,final Class<?>[] args){  if (fnQName == null) {    return;  }  java.lang.reflect.Method method;  try {    method=c.getMethod(methodName,args);  } catch (  NoSuchMethodException e) {    throw new RuntimeException("Invalid function mapping - no such method: " + e.getMessage());  }  this.fnmap.put(fnQName,method);}  }
class C{  public int next(){  int node=_currentNode;  _currentNode=m_traverser.next(_startNode,_currentNode);  return returnNode(node);}  }
class C{  public synchronized void reset() throws IOException {  getBufIfOpen();  if (markpos < 0)   throw new IOException("Resetting to invalid mark");  pos=markpos;}  }
class C{  private boolean updateUserUninstallDataWithRemoteServers(UninstallUserData userData) throws UserDataException, ClientException {  boolean accepted=false;  boolean interactive=parser.isInteractive();  boolean forceOnError=parser.isForceOnError();  boolean exceptionOccurred=true;  LocalizableMessage exceptionMsg=null;  logger.info(LocalizableMessage.raw("Updating user data with remote servers."));  ConnectionWrapper conn=null;  try {    info.setTrustManager(userData.getTrustManager());    info.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);    info.setConnectTimeout(getConnectTimeout());    if (userData.getAdminPwd() == null) {      throw new UserDataException(null,LocalizableMessage.raw("No administrator password provided"));    }    conn=new ConnectionWrapper(info.getAdminConnectorHostPort(),connectionType,getAdministratorDN(userData.getAdminUID()),userData.getAdminPwd(),getConnectTimeout(),userData.getTrustManager());    ADSContext adsContext=new ADSContext(conn);    if (interactive && userData.getTrustManager() == null) {      forceTrustManagerInitialization();      updateTrustManager(userData,ci);    }    logger.info(LocalizableMessage.raw("Reloading topology"));    TopologyCache cache=new TopologyCache(adsContext,userData.getTrustManager(),getConnectTimeout());    cache.getFilter().setSearchMonitoringInformation(false);    cache.reloadTopology();    accepted=handleTopologyCache(cache,userData);    exceptionOccurred=false;  } catch (  LdapException e) {    logger.warn(LocalizableMessage.raw("Error connecting to server: " + e,e));    if (isCertificateException(e)) {      String details=e.getMessage() != null ? e.getMessage() : e.toString();      exceptionMsg=INFO_ERROR_READING_CONFIG_LDAP_CERTIFICATE.get(details);    } else {      exceptionMsg=getThrowableMsg(INFO_ERROR_CONNECTING_TO_LOCAL.get(),e);    }  }catch (  TopologyCacheException te) {    logger.warn(LocalizableMessage.raw("Error connecting to server: " + te,te));    exceptionMsg=Utils.getMessage(te);  }catch (  ClientException ce) {    throw ce;  }catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Error connecting to server: " + t,t));    exceptionMsg=getThrowableMsg(INFO_BUG_MSG.get(),t);  } finally {    StaticUtils.close(conn);  }  if (exceptionOccurred) {    if (!interactive) {      if (forceOnError) {        println();        printErrorMessage(ERR_UNINSTALL_ERROR_UPDATING_REMOTE_FORCE.get("--" + parser.getSecureArgsList().getAdminUidArg().getLongIdentifier(),"--" + OPTION_LONG_BINDPWD,"--" + OPTION_LONG_BINDPWD_FILE,exceptionMsg));      } else {        println();        throw new UserDataException(null,ERR_UNINSTALL_ERROR_UPDATING_REMOTE_NO_FORCE.get("--" + parser.getSecureArgsList().getAdminUidArg().getLongIdentifier(),"--" + OPTION_LONG_BINDPWD,"--" + OPTION_LONG_BINDPWD_FILE,"--" + parser.forceOnErrorArg.getLongIdentifier(),exceptionMsg));      }    } else {      try {        accepted=askConfirmation(ERR_UNINSTALL_NOT_UPDATE_REMOTE_PROMPT.get(),false,logger);      } catch (      ClientException ce) {        throw new UserDataException(null,ce.getMessageObject(),ce);      }    }  }  userData.setUpdateRemoteReplication(accepted);  logger.info(LocalizableMessage.raw("accepted: " + accepted));  return accepted;}  }
class C{  private boolean invokerInHeavyWeightPopup(Component i){  if (i != null) {    Container parent;    for (parent=i.getParent(); parent != null; parent=parent.getParent()) {      if (parent instanceof Popup.HeavyWeightWindow) {        return true;      }    }  }  return false;}  }
class C{  public Observable<Store> retrieveStoreObservable(String sellerId){  io.vertx.rx.java.ObservableFuture<Store> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveStore(sellerId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditem.class,args);}  }
class C{  public SkidGUI(){  initialize();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",textNode);  retval=titleAttr.removeChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  assertNull("firstChildNull",firstChild);}  }
class C{  static void useSimplePagedResultsControl(Connection connection) throws LdapException {  if (isSupported(SimplePagedResultsControl.OID)) {    ByteString cookie=ByteString.empty();    SearchRequest request;    final SearchResultHandler resultHandler=new MySearchResultHandler();    Result result;    int page=1;    do {      System.out.println("# Simple paged results: Page " + page);      request=Requests.newSearchRequest("dc=example,dc=com",SearchScope.WHOLE_SUBTREE,"(sn=Jensen)","cn").addControl(SimplePagedResultsControl.newControl(true,3,cookie));      result=connection.search(request,resultHandler);      try {        SimplePagedResultsControl control=result.getControl(SimplePagedResultsControl.DECODER,new DecodeOptions());        cookie=control.getCookie();      } catch (      final DecodeException e) {        System.err.println(e.getMessage());        System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());      }      ++page;    } while (cookie.length() != 0);  } else {    System.err.println("SimplePagedResultsControl not supported");  }}  }
class C{  public ThreadPool(String name,int poolSize,int threshold,boolean daemon,Debug debug){  this.debug=debug;  this.poolSize=poolSize;  this.threshold=threshold;  this.poolName=name;  if (threshold > 0) {    this.taskList=new java.util.ArrayList(threshold);  } else {    this.taskList=new java.util.ArrayList();  }  this.busyThreadCount=0;  this.currentThreadCount=0;  this.daemon=daemon;  this.shutdownThePool=false;  this.threads=new WorkerThread[poolSize];  if (debug.messageEnabled()) {    debug.message("Initiating login thread pool size = " + this.poolSize + "\nThreshold = "+ threshold);  }synchronized (this) {    createThreads(poolSize);  }}  }
class C{  public SQLTransientException(){}  }
class C{  public NSObject objectAtIndex(int i){  return array[i];}  }
class C{  public boolean empty(){  return size() == 0;}  }
class C{  private boolean tokenStartsWithPrefix(String token,String... prefixes){  String[] tokenParts=token.split(":",2);  if (tokenParts.length == 2) {    for (    String prefix : prefixes) {      if (prefix.equals(tokenParts[0])) {        return true;      }    }  }  return false;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private void createFakeReplicationDomain(boolean firstBackend,long generationId) throws Exception {  SortedSet<String> replicationServers=newTreeSet("localhost:" + replServerPort);  DN baseDN=DN.valueOf(firstBackend ? TEST_ROOT_DN_STRING : TEST2_ROOT_DN_STRING);  replicationDomain=new FakeReplicationDomain(baseDN,DS2_ID,replicationServers,1000,generationId);  assertTrue(replicationDomain.isConnected());  assertEquals(replicationDomain.getReplicationServer().getPort(),replServerPort);}  }
class C{  public final String createMessage(String msgKey,Object args[]){  if (m_resourceBundle == null)   m_resourceBundle=loadResourceBundle(m_resourceBundleName);  if (m_resourceBundle != null) {    return createMsg(m_resourceBundle,msgKey,args);  } else   return "Could not load the resource bundles: " + m_resourceBundleName;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AuthenticationInfoParser.parse");  try {    headerName(TokenTypes.AUTHENTICATION_INFO);    AuthenticationInfo authenticationInfo=new AuthenticationInfo();    authenticationInfo.setHeaderName(SIPHeaderNames.AUTHENTICATION_INFO);    this.lexer.SPorHT();    NameValue nv=super.nameValue();    if ("".equals(nv.getValue()) && !nv.isValueQuoted()) {      authenticationInfo.setScheme(nv.getKey());      nv=super.nameValue();    }    authenticationInfo.setParameter(nv);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      nv=super.nameValue();      authenticationInfo.setParameter(nv);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return authenticationInfo;  }  finally {    if (debug)     dbg_leave("AuthenticationInfoParser.parse");  }}  }
class C{  public boolean isLeaf(){  return getModel().isLeaf(this.getValue());}  }
class C{  public MarkData elementAt(int index){  int g0=getGapStart();  int g1=getGapEnd();  MarkData[] array=(MarkData[])getArray();  if (index < g0) {    return array[index];  } else {    index+=g1 - g0;    return array[index];  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  boolean forwarded=false;  Rule rule=createRule();  if (rule != null) {    try {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      String origRuleName=(String)getPageSessionAttribute(EDIT_RULE_NAME);      policy.removeRule(origRuleName);      policy.addRule(rule);      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","policy.rule.updated");      cachedPolicy.setPolicyModified(true);    } catch (    NameAlreadyExistsException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));    }catch (    InvalidNameException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));    }catch (    AMConsoleException e) {      debug.warning("RuleEditViewBean.handleButton1Request",e);      redirectToStartURL();      forwarded=true;    }  }  if (!forwarded) {    forwardTo();  }}  }
class C{  protected void onRequestHandlerNotFound(RequestContext requestContext,String handlerName) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  ViewBean targetView=viewBeanManager.getViewBean(PWResetInvalidURLViewBean.class);  targetView.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  public void mapCenterWithPoint(float x,float y){  float[] goal={x,y};  currentMatrix.mapPoints(goal);  float deltaX=getWidth() / 2 - goal[0];  float deltaY=getHeight() / 2 - goal[1];  currentMatrix.postTranslate(deltaX,deltaY);}  }
class C{  public boolean isBurning(){  return this.burning;}  }
class C{  private String parseToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  while (hasChar()) {    ch=chars[pos];    if (isOneOf(ch,terminators)) {      break;    }    i2++;    pos++;  }  return getToken(false);}  }
class C{  public ManagementPermission(String name){  super(name);  if (!name.equals("control") && !name.equals("monitor")) {    throw new IllegalArgumentException("name: " + name);  }}  }
class C{  public void test_getShortLjava_lang_ObjectI(){  short[] x={1};  short ret=0;  boolean thrown=false;  try {    ret=Array.getShort(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getShort(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getShort(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getShort(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static String appendArray(final String value,final String[] appends){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (appends == null || appends.length == 0) {    return value;  }  StringJoiner joiner=new StringJoiner("");  for (  String append : appends) {    joiner.add(append);  }  return value + joiner.toString();}  }
class C{  @Override public void run(){  while (!shutdown) {    try {      CacheEntry freedEntry=referenceQueue.remove().get();      if (freedEntry != null) {        Reference<CacheEntry> ref=dnMap.remove(freedEntry.getDN());        if (ref != null) {          CacheEntry removedEntry=ref.get();          if (removedEntry != freedEntry) {            dnMap.putIfAbsent(freedEntry.getDN(),ref);          } else {            ref.clear();            final String backendID=freedEntry.getBackendID();            final ConcurrentMap<Long,Reference<CacheEntry>> map=idMap.get(backendID);            if (map != null) {              ref=map.remove(freedEntry.getEntryID());              if (ref != null) {                ref.clear();              }              if (map.isEmpty()) {                idMap.remove(backendID);              }            }          }        }      }    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSFederationTerminationNotification." + "toURLEncodedQueryString: providerId is null in the " + "request with requestId:"+ requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSFederationTerminationNotification." + "toURLEncodedQueryString: couldn't generate " + "RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public boolean isForCustomization(AbstractManagedObjectDefinition<?,?> d){  return Boolean.parseBoolean(resource.getString(d,"is-for-customization"));}  }
class C{  @Override public int doFinal(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(inBuffer,outBuffer);}  }
class C{  @Override public void deallocate(Servlet servlet) throws ServletException {  if (!singleThreadModel) {    countAllocated.decrementAndGet();    return;  }synchronized (instancePool) {    countAllocated.decrementAndGet();    instancePool.push(servlet);    instancePool.notify();  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  inviteReceived=true;  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    Response okResponse=messageFactory.createResponse(Response.OK,request);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    this.toTag="4321";    toHeader.setTag(toTag);    this.inviteTid=st;    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    okResponse.addHeader(contactHeader);    logger.info("sending response.");    st.sendResponse(okResponse);  } catch (  Exception ex) {    TestHarness.fail(ex.getMessage());  }}  }
class C{  @Override public void write(int b) throws IOException {  buffer.append((byte)b);}  }
class C{  public SignerId(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  public long nextLong() throws DataFormatException {  try {    return bytes.readLong();  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  public void addSigners(SignerInformationStore signerStore){  Iterator it=signerStore.getSigners().iterator();  while (it.hasNext()) {    _signers.add(it.next());  }}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() / right.num());}  }
class C{  public String encode(){  String retval=Long.toString(time);  retval+=Separators.SP;  if (sign != null)   retval+=sign;  retval+=offset.encode();  return retval;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"COLLECT_ENTITY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"HTML_ID\" INTEGER,"+ "\"COLLECT\" TEXT);");}  }
class C{  public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  protected void doReadObject(ObjectInputStream stream) throws ClassNotFoundException, IOException {  authType=null;  creationTime=((Long)stream.readObject()).longValue();  lastAccessedTime=((Long)stream.readObject()).longValue();  maxInactiveInterval=((Integer)stream.readObject()).intValue();  isNew=((Boolean)stream.readObject()).booleanValue();  isValid=((Boolean)stream.readObject()).booleanValue();  thisAccessedTime=((Long)stream.readObject()).longValue();  principal=null;  id=(String)stream.readObject();  if (manager.getContext().getLogger().isDebugEnabled())   manager.getContext().getLogger().debug("readObject() loading session " + id);  if (attributes == null)   attributes=new ConcurrentHashMap<>();  int n=((Integer)stream.readObject()).intValue();  boolean isValidSave=isValid;  isValid=true;  for (int i=0; i < n; i++) {    String name=(String)stream.readObject();    final Object value;    try {      value=stream.readObject();    } catch (    WriteAbortedException wae) {      if (wae.getCause() instanceof NotSerializableException) {        String msg=sm.getString("standardSession.notDeserializable",name,id);        if (manager.getContext().getLogger().isDebugEnabled()) {          manager.getContext().getLogger().debug(msg,wae);        } else {          manager.getContext().getLogger().warn(msg);        }        continue;      }      throw wae;    }    if (manager.getContext().getLogger().isDebugEnabled())     manager.getContext().getLogger().debug("  loading attribute '" + name + "' with value '"+ value+ "'");    if (exclude(name,value)) {      continue;    }    attributes.put(name,value);  }  isValid=isValidSave;  if (listeners == null) {    listeners=new ArrayList<>();  }  if (notes == null) {    notes=new Hashtable<>();  }}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarBorder(context,g,x,y,w,h);}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache: Org Config changed called " + "ServiceName: " + serviceName + " orgName: "+ orgName+ " groupName: "+ groupName+ " serviceComp: "+ serviceComponent+ " Type: "+ type);  }  if ((type == ServiceListener.REMOVED) && (serviceComponent.length() == 0)) {    removeIdRepo(orgName);  } else   if ((serviceComponent.length() != 0) && !serviceComponent.equals("/") && !serviceComponent.equals("")) {    String idRepoName=null;    StringTokenizer st=new StringTokenizer(serviceComponent,"/");    if (st.hasMoreTokens()) {      idRepoName=st.nextToken();    }    try {      if (type == ServiceListener.ADDED) {        addIdRepo(orgName,idRepoName);      } else       if (type == ServiceListener.MODIFIED) {        if (!IdServicesImpl.isShutdownCalled()) {          removeIdRepo(orgName,idRepoName,true);        } else {          removeIdRepo(orgName,idRepoName,false);        }      } else       if (type == ServiceListener.REMOVED) {        removeIdRepo(orgName,idRepoName,false);      }    } catch (    Exception e) {      debug.error("IdRepoPluginsCached.organizationConfigChanged " + "ServiceName: " + serviceName + " orgName: "+ orgName+ " groupName: "+ groupName+ " serviceComp: "+ serviceComponent+ " Type: "+ type,e);    }  }}  }
class C{  public boolean isValid(){  SSLSessionContext context=sessionContext;  if (isValid && context != null && context.getSessionTimeout() != 0 && getCreationTime() + (context.getSessionTimeout() * 1000) < System.currentTimeMillis()) {    isValid=false;  }  return isValid;}  }
class C{  public DebugCommands(BundleContext context){  this.context=context;}  }
class C{  public synchronized int read(){  return (pos < count) ? (buffer.charAt(pos++) & 0xFF) : -1;}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public Compiler add(File file) throws IOException {  return add(new URL(file.toURI().toString()));}  }
class C{  public InvalidAttributeValueException(){  super();}  }
class C{  private Filter configureAuthenticationFilter(JsonValue jsonConfig) throws AuthenticationException {  if (jsonConfig == null || jsonConfig.size() == 0) {    throw new AuthenticationException("No auth modules configured");  }  final JsonValue moduleConfig=jsonConfig.copy();  final JsonValue serverAuthContext=moduleConfig.get(SERVER_AUTH_CONTEXT_KEY).required();  final JsonValue sessionConfig=serverAuthContext.get(AuthenticationService.SESSION_MODULE_KEY);  final JsonValue authModulesConfig=serverAuthContext.get(AuthenticationService.AUTH_MODULES_KEY);  if (sessionConfig.get(AUTH_MODULE_PROPERTIES_KEY).get(JwtSessionModule.HMAC_SIGNING_KEY).isNull()) {    try {      String signingKey=sharedKeyService.getSharedKey(IdentityServer.getInstance().getProperty(ServerConstants.JWTSESSION_SIGNING_KEY_ALIAS_PROPERTY,ServerConstants.DEFAULT_JWTSESSION_SIGNING_KEY_ALIAS)).get(ENCODED_SECRET_PTR).required().asString();      sessionConfig.get(AUTH_MODULE_PROPERTIES_KEY).put(JwtSessionModule.HMAC_SIGNING_KEY,signingKey);    } catch (    Exception e) {      throw new AuthenticationException("Cannot read hmac signing key",e);    }  }  final List<AuthenticationModuleBuilder> authModuleBuilders=new ArrayList<>();  for (  final JsonValue authModuleConfig : authModulesConfig) {    AuthenticationModuleBuilder moduleBuilder=processModuleConfiguration(authModuleConfig);    if (moduleBuilder != null) {      authModuleBuilders.add(moduleBuilder);    }  }  return AuthenticationFilter.builder().logger(logger).auditApi(new IDMAuditApi(connectionFactory)).sessionModule(processModuleConfiguration(sessionConfig)).authModules(authModuleBuilders).build();}  }
class C{  public ShortcutInfo(AppInfo info){  super(info);  title=Utilities.trim(info.title);  intent=new Intent(info.intent);  customIcon=false;  flags=info.flags;  firstInstallTime=info.firstInstallTime;}  }
class C{  public long node(){  if (version() != 1) {    throw new UnsupportedOperationException("Not a time-based UUID");  }  return leastSigBits & 0x0000FFFFFFFFFFFFL;}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  protected void login(AuthContext.IndexType type,String indexName,Principal principal,char[] password,Subject subject) throws AuthLoginException {  login(type,indexName,principal,password,subject,null,null);}  }
class C{  protected void updateComponents(){  Component comp;  comp=splitPane.getLeftComponent();  if (components[0] != comp) {    components[0]=comp;    if (comp == null) {      sizes[0]=0;    } else {      sizes[0]=-1;    }  }  comp=splitPane.getRightComponent();  if (components[1] != comp) {    components[1]=comp;    if (comp == null) {      sizes[1]=0;    } else {      sizes[1]=-1;    }  }  Component[] children=splitPane.getComponents();  Component oldDivider=components[2];  components[2]=null;  for (int counter=children.length - 1; counter >= 0; counter--) {    if (children[counter] != components[0] && children[counter] != components[1] && children[counter] != nonContinuousLayoutDivider) {      if (oldDivider != children[counter]) {        components[2]=children[counter];      } else {        components[2]=oldDivider;      }      break;    }  }  if (components[2] == null) {    sizes[2]=0;  } else {    sizes[2]=getSizeForPrimaryAxis(components[2].getPreferredSize());  }}  }
class C{  public int hashCode(){  int hash=0;  for (int i=0; i < rdns.size(); i++) {    Rdn rdn=rdns.get(i);    hash+=rdn.hashCode();  }  return hash;}  }
class C{  public InterruptedException(){  super();}  }
class C{  public WaspHash openOrCreateHash(String hashName){  WaspHash hash;  try {    if (existsHash(hashName)) {      hash=getHash(hashName);    } else {      hash=createHash(hashName);    }    return hash;  } catch (  Exception wfe) {    wfe.printStackTrace();    return null;  }}  }
class C{  public void test_bytesProduced(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect bytesProduced",pos[l],res.bytesProduced());        }      }    }  }}  }
class C{  public static int flashCount(){  return info().flashCount;}  }
class C{  public void testRadix2Neg(){  String value="-101001100010010001001010101110000101010110001010010101010101010101010101010101010101010101010010101";  int radix=2;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  private void startupSocket(InetAddress dstAddress,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  if (localPort < 0 || localPort > 65535) {    throw new IllegalArgumentException("Local port out of range: " + localPort);  }  InetAddress addr=localAddress == null ? Inet4Address.ANY : localAddress;synchronized (this) {    impl.create(streaming);    isCreated=true;    try {      if (!streaming || !usingSocks()) {        impl.bind(addr,localPort);      }      isBound=true;      impl.connect(dstAddress,dstPort);      isConnected=true;      cacheLocalAddress();    } catch (    IOException e) {      impl.close();      throw e;    }  }}  }
class C{  @Override public Principal authenticate(String username,String credentials){  DirContext context=null;  Principal principal=null;  try {    context=open();    try {      principal=authenticate(context,username,credentials);    } catch (    NullPointerException|CommunicationException|ServiceUnavailableException e) {      containerLog.info(sm.getString("jndiRealm.exception.retry"),e);      if (context != null)       close(context);      context=open();      principal=authenticate(context,username,credentials);    }    release(context);    return principal;  } catch (  NamingException e) {    containerLog.error(sm.getString("jndiRealm.exception"),e);    if (context != null)     close(context);    if (containerLog.isDebugEnabled())     containerLog.debug("Returning null principal.");    return null;  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  boolean continueFlag=isOptionSet(IArgument.CONTINUE);  IOutput outputWriter=getOutputWriter();  List xmlFiles=(List)rc.getOption(IArgument.XML_FILE);  ServiceManager ssm=null;  try {    ssm=new ServiceManager(adminSSOToken);  } catch (  SMSException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  CommandManager mgr=getCommandManager();  boolean bError=false;  String url=mgr.getWebEnabledURL();  if ((url != null) && (url.length() > 0)) {    String[] param={CLIConstants.WEB_INPUT};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LOAD_SCHEMA",param);    loadSchemaXML(ssm,(String)xmlFiles.iterator().next());    outputWriter.printlnMessage(getResourceString("schema-added"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCESS_LOAD_SCHEMA",param);  } else {    for (Iterator i=xmlFiles.iterator(); i.hasNext(); ) {      String file=(String)i.next();      String[] param={file};      try {        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LOAD_SCHEMA",param);        loadSchema(ssm,file);        outputWriter.printlnMessage(getResourceString("schema-added"));        writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCESS_LOAD_SCHEMA",param);      } catch (      CLIException e) {        bError=true;        if (continueFlag) {          outputWriter.printlnError(getResourceString("schema-failed") + e.getMessage());          if (isVerbose()) {            outputWriter.printlnError(Debugger.getStackTrace(e));          }        } else {          throw e;        }      }    }  }  if (bError) {    throw new CLIException(getResourceString("one-or-more-services-not-added"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void writeDeleteChangeRecord(Entry entry,boolean commentEntry) throws IOException {  ifNull(entry);  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  writeDN("dn",entry.getName(),writer,wrapLines,wrapColumn);  StringBuilder changeTypeLine=new StringBuilder("changetype: delete");  writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);  if (commentEntry) {    for (    String s : entry.getObjectClasses().values()) {      StringBuilder ocLine=new StringBuilder();      ocLine.append("# objectClass: ");      ocLine.append(s);      writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);    }    for (    AttributeType attrType : entry.getUserAttributes().keySet()) {      for (      Attribute a : entry.getUserAttribute(attrType)) {        final String attrDesc=a.getAttributeDescription().toString();        final StringBuilder attrName=new StringBuilder(2 + attrDesc.length());        attrName.append("# ");        attrName.append(attrDesc);        for (        ByteString v : a) {          writeAttribute(attrName,v,writer,wrapLines,wrapColumn);        }      }    }  }  writer.newLine();}  }
class C{  @Override public int handshake() throws IOException {  return handshakeInternal(true);}  }
class C{  final String basicTypeSignature(){  StringBuilder buf=new StringBuilder(arity() + 3);  for (int i=0, a=arity(); i < a; i++)   buf.append(parameterType(i).basicTypeChar());  return buf.append('_').append(returnType().basicTypeChar()).toString();}  }
class C{  private int internalGetEra(){  return isSet(ERA) ? internalGet(ERA) : CE;}  }
class C{  public static boolean isJatoSessionRequestFromXUI(HttpServletRequest request){  return "XUI".equals(request.getParameter("requester"));}  }
class C{  public boolean isInside(Pnt[] simplex){  int[] result=this.relation(simplex);  for (  int r : result)   if (r >= 0)   return false;  return true;}  }
class C{  synchronized public void createEmptyDB(){  mOpenHelper.createEmptyDB(mOpenHelper.getWritableDatabase());}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if (certificate != null) {    sb.append(certificate.getSubjectDN().getName());    sb.append(" verified with ");  }  sb.append(verifierClass.getName());  sb.append(": ");  sb.append(message);  return sb.toString();}  }
class C{  private void ensureOpen() throws IOException {  if (response == null || closed)   throw new IOException("Stream closed");}  }
class C{  private int clientSideAuthenticationUsageCount(String uuid) throws SSOException, SMSException {  return getUsageCount(getScriptedServiceBaseDN(),getClientSideScriptedAuthSearchString(uuid)) + getUsageCount(getDeviceIdMatchServiceBaseDN(),getClientSideScriptedAuthSearchString(uuid));}  }
class C{  @DataProvider(name="passwordExpiringControlData") public Object[][] createPasswordExpiringControlData(){  return new Object[][]{{true,1},{false,2}};}  }
class C{  public boolean drag_move(int p_pull_tight_accuracy){  if (!all_items_movable)   return false;  if (component != null) {    r_board.brd_components.move(component.id_no,translate_vector);    r_board.observers.notify_moved(component);  }  for (  SortedItemDouble an_item : item_group_arr) {    if (an_item.item instanceof BrdAbit) {      BrdAbit curr_drill_item=(BrdAbit)an_item.item;      boolean move_ok=r_board.move_drill_item(curr_drill_item,translate_vector,max_recursion_depth,max_via_recursion_depth,p_pull_tight_accuracy,s_TIGHT_TIME_ms);      if (move_ok)       continue;      if (component != null) {        component.translate_by(translate_vector.negate());      }      return false;    } else {      an_item.item.move_by(translate_vector);    }  }  return true;}  }
class C{  private LDAPReplicationDomain createReplicationDomain(int dsId) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  int groupId=-1;  AssuredType assuredType=null;  int assuredSdLevel=-100;  SortedSet<String> refUrls=null;switch (dsId) {case DS1_ID:    replServers.add(getHostPort(rs1Port));  replServers.add(getHostPort(rs2Port));replServers.add(getHostPort(rs3Port));groupId=DS1_GID;assuredType=DS1_AT;assuredSdLevel=DS1_SDL;refUrls=DS1_RU;break;case DS2_ID:replServers.add(getHostPort(rs1Port));replServers.add(getHostPort(rs2Port));replServers.add(getHostPort(rs3Port));groupId=DS2_GID;assuredType=DS2_AT;assuredSdLevel=DS2_SDL;refUrls=DS2_RU;break;case DS3_ID:replServers.add(getHostPort(rs2Port));groupId=DS3_GID;assuredType=DS3_AT;assuredSdLevel=DS3_SDL;refUrls=DS3_RU;break;case DS4_ID:replServers.add(getHostPort(rs2Port));groupId=DS4_GID;assuredType=DS4_AT;assuredSdLevel=DS4_SDL;refUrls=DS4_RU;break;case DS5_ID:replServers.add(getHostPort(rs2Port));replServers.add(getHostPort(rs3Port));groupId=DS5_GID;assuredType=DS5_AT;assuredSdLevel=DS5_SDL;refUrls=DS5_RU;break;case DS6_ID:replServers.add(getHostPort(rs2Port));replServers.add(getHostPort(rs3Port));groupId=DS6_GID;assuredType=DS6_AT;assuredSdLevel=DS6_SDL;refUrls=DS6_RU;break;default :fail("Unknown replication domain server id.");}DN baseDn=DN.valueOf(TEST_ROOT_DN_STRING);DomainFakeCfg domainConf=new DomainFakeCfg(baseDn,dsId,replServers,assuredType,assuredSdLevel,groupId,0,refUrls);LDAPReplicationDomain replicationDomain=MultimasterReplication.createNewDomain(domainConf);replicationDomain.start();return replicationDomain;}  }
class C{  public static void replaceSubConfigAttributeDefaultValues(String serviceName,Set sunServiceID,String realm,String subConfigName,String attributeName,Set oldValues,Set newValues){  String classMethod="UpgradeUtils:replaceSubConfigAttributeDefaultValues : ";  try {    ServiceConfigManager scm=getServiceConfigManager(serviceName);    ServiceConfig sc=scm.getOrganizationConfig(realm,null);    ServiceConfig subConfig=sc.getSubConfig(subConfigName);    String serviceID=getSunServiceID(subConfig);    if (debug.messageEnabled()) {      debug.message("sunServiceID :" + sunServiceID);      debug.message("serviceID :" + serviceID);      debug.message("subConfigName :" + subConfigName);    }    if (sunServiceID.contains(serviceID)) {      subConfig.replaceAttributeValues(attributeName,oldValues,newValues);    }  } catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSO Token: ",ssoe);  }catch (  SMSException sme) {    debug.error(classMethod + "Error replacing default values for attribute : " + attributeName,sme);  }}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public byte[] calculatePadding(int paddingLength){  paddingLength=Math.abs(paddingLength);  byte[] padding=new byte[paddingLength];  for (int i=0; i < paddingLength; i++) {    padding[i]=(byte)(paddingLength - 1);  }  return padding;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay,period,true);}  }
class C{  public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public FrameBodyTSOP(){}  }
class C{  private BoardMenuRules(BoardFrame p_board_frame){  board_frame=p_board_frame;  resources=java.util.ResourceBundle.getBundle("gui.resources.BoardMenuRules",p_board_frame.get_locale());}  }
class C{  public static boolean bindWithDNRequiresPassword(){  return directoryServer.bindWithDNRequiresPassword;}  }
class C{  public String grpcClientName(Interface service){  return "grpc-" + service.getFile().getFullName().replace('.','-');}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return _fooLocalService.deleteFoo(fooId);}  }
class C{  public static ActiveRequestorException newSenderException(String key,String... args){  return new ActiveRequestorException(SOAPConstants.SOAP_SENDER_FAULT,key,args);}  }
class C{  @ConstructorProperties({"model"}) public JTree(TreeModel newModel){  super();  expandedStack=new Stack<Stack<TreePath>>();  toggleClickCount=2;  expandedState=new Hashtable<TreePath,Boolean>();  setLayout(null);  rowHeight=16;  visibleRowCount=20;  rootVisible=true;  selectionModel=new DefaultTreeSelectionModel();  cellRenderer=null;  scrollsOnExpand=true;  setOpaque(true);  expandsSelectedPaths=true;  updateUI();  setModel(newModel);}  }
class C{  public void endElement(String qName) throws SAXException {  if (!namespaces) {    if (contentHandler != null) {      contentHandler.endElement("","",qName.intern());    }    return;  }  String names[]=processName(qName,false,false);  if (contentHandler != null) {    contentHandler.endElement(names[0],names[1],names[2]);    Enumeration prefixes=nsSupport.getDeclaredPrefixes();    while (prefixes.hasMoreElements()) {      String prefix=(String)prefixes.nextElement();      contentHandler.endPrefixMapping(prefix);    }  }  nsSupport.popContext();}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  static boolean eq(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void _stop(JComponent c){  if (component == c) {    if (timer != null) {      timer.stop();    }    timer=null;    event=null;    component=null;  }}  }
class C{  void delete(WriteableTransaction txn) throws StorageRuntimeException {  for (  Tree tree : listTrees()) {    tree.delete(txn);  }}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public static boolean isSigningOptional(){  return signingOptional;}  }
class C{  protected void writeAttributes(AttributeSet attr) throws IOException {  Enumeration attributeNames=attr.getAttributeNames();  while (attributeNames.hasMoreElements()) {    Object name=attributeNames.nextElement();    if ((name instanceof StyleConstants.ParagraphConstants) || (name instanceof StyleConstants.CharacterConstants) || (name instanceof StyleConstants.FontConstants)|| (name instanceof StyleConstants.ColorConstants)) {      indent();      write(name.toString());      write(':');      write(css.styleConstantsValueToCSSValue((StyleConstants)name,attr.getAttribute(name)).toString());      write(';');      write(NEWLINE);    }  }}  }
class C{  private void mapIdRepoException(IdRepoException exception) throws IdServicesException {  throw idServicesErrorHandler.handleError(exception);}  }
class C{  public FrameBodyIPLS(FrameBodyTIPL body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,body.getTextEncoding());  setText(body.getText());}  }
class C{  public void layoutContainer(Container parent){  Rectangle b=parent.getBounds();  Insets i=getInsets();  int contentY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (layeredPane != null) {    layeredPane.setBounds(i.left,i.top,w,h);  }  if (glassPane != null) {    glassPane.setBounds(i.left,i.top,w,h);  }  if (menuBar != null && menuBar.isVisible()) {    Dimension mbd=menuBar.getPreferredSize();    menuBar.setBounds(0,0,w,mbd.height);    contentY+=mbd.height;  }  if (contentPane != null) {    contentPane.setBounds(0,contentY,w,h - contentY);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS04.class,args);}  }
class C{  @AfterClass public void enableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.INFO);}  }
class C{  public void appendRemainingName(Name name){  if (name != null) {    if (this.remainingName != null) {      try {        this.remainingName.addAll(name);      } catch (      InvalidNameException e) {      }    } else {      this.remainingName=(Name)(name.clone());    }  }}  }
class C{  public String typeName(){  return typeName;}  }
class C{  protected Handler<AsyncResult<Void>> resultVoidHandler(RoutingContext context,JsonObject result,int status){  return null;}  }
class C{  private ContentValues unpackScreen(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  BackupProtos.Screen screen=unpackProto(new BackupProtos.Screen(),buffer,dataSize);  ContentValues values=new ContentValues();  values.put(LauncherSettings.WorkspaceScreens._ID,screen.id);  values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,screen.rank);  return values;}  }
class C{  public static String prefixInFile(ProtoElement elt){  ProtoElement parent=elt.getParent();  if (parent == null || parent.getParent() == null) {    return "";  }  String prefix=parent.getSimpleName();  for (parent=parent.getParent(); parent.getParent() != null; parent=parent.getParent()) {    prefix=parent.getSimpleName() + "." + prefix;  }  return prefix;}  }
class C{  private void buildIndentation(StringBuilder sb,int indentation){  for (int i=0; i < indentation; ++i) {    sb.append(" ");  }}  }
class C{  public void removeSessionId(SessionID sessionID){  sessionCache.removeSID(sessionID);}  }
class C{  @Override protected boolean doAuthenticate(Request request,HttpServletResponse response) throws IOException {  if (checkForCachedAuthentication(request,response,true)) {    if (cache) {      request.getSessionInternal(true).setPrincipal(request.getUserPrincipal());    }    return true;  }  if (containerLog.isDebugEnabled())   containerLog.debug("User authenticated without any roles");  return true;}  }
class C{  public synchronized V put(K key,V value){  if (value == null) {    throw new NullPointerException();  }  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  @SuppressWarnings("unchecked") Entry<K,V> entry=(Entry<K,V>)tab[index];  for (; entry != null; entry=entry.next) {    if ((entry.hash == hash) && entry.key.equals(key)) {      V old=entry.value;      entry.value=value;      return old;    }  }  addEntry(hash,key,value,index);  return null;}  }
class C{  public double doubleValue(){  return doubleValue;}  }
class C{  public void testSendRequest(){  try {    Request invite=createTiInviteRequest(null,null,null);    Request receivedRequest=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      waitForMessage();      tiSipProvider.sendRequest(invite);      waitForMessage();      RequestEvent receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      assertNotNull("The sent request was not received at the other end!",receivedRequestEvent);      assertNotNull("The sent request was not received at the other end!",receivedRequestEvent.getRequest());    } catch (    TooManyListenersException ex) {      throw new TckInternalError("The following exception was thrown while trying to add " + "a SipListener to an RI SipProvider",ex);    }catch (    SipException ex) {      ex.printStackTrace();      fail("A SipException exception was thrown while " + "trying to send a request.");    }  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public static Animator shrinkAnimator(int duration){  AnimatorSet animatorSet=new AnimatorSet();  ObjectAnimator xExpandAnimator=new ObjectAnimator();  xExpandAnimator.setPropertyName("scaleX");  xExpandAnimator.setFloatValues(1.0f,0.5f);  ObjectAnimator yExpandAnimator=new ObjectAnimator();  yExpandAnimator.setPropertyName("scaleY");  yExpandAnimator.setFloatValues(1.0f,0.5f);  animatorSet.play(xExpandAnimator).with(yExpandAnimator);  animatorSet.setDuration(duration);  animatorSet.setInterpolator(new AnticipateInterpolator());  return animatorSet;}  }
class C{  public static boolean isEventDispatchThread(){  return EventQueue.isDispatchThread();}  }
class C{  void addFieldValue(Map<TemporalField,Long> fieldValues,ChronoField field,long value){  Long old=fieldValues.get(field);  if (old != null && old.longValue() != value) {    throw new DateTimeException("Conflict found: " + field + " "+ old+ " differs from "+ field+ " "+ value);  }  fieldValues.put(field,value);}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  public boolean isAscending(){  return isAscending;}  }
class C{  protected Response handleErrorResponse(Request request,Status status,Exception exception){  Reject.ifNull(status);  Response response=new Response(status);  final Map<String,Object> rep=new HashMap<>();  if (exception instanceof RestAuthResponseException) {    final RestAuthResponseException authResponseException=(RestAuthResponseException)exception;    for (    Map.Entry<String,String> entry : authResponseException.getResponseHeaders().entrySet()) {      response.getHeaders().put(entry.getKey(),entry.getValue());    }    rep.putAll(authResponseException.getJsonResponse().asMap());  } else   if (exception instanceof RestAuthException) {    final RestAuthException authException=(RestAuthException)exception;    if (authException.getFailureUrl() != null) {      rep.put("failureUrl",authException.getFailureUrl());    }    rep.put("errorMessage",getLocalizedMessage(request,exception));  } else   if (exception == null) {    rep.put("errorMessage",status.getReasonPhrase());  } else {    rep.put("errorMessage",getLocalizedMessage(request,exception));  }  response.setEntity(rep);  return response;}  }
class C{  private SynthStyle mergeStyles(List styles){  int size=styles.size();  if (size == 0) {    return null;  } else   if (size == 1) {    return (SynthStyle)((DefaultSynthStyle)styles.get(0)).clone();  }  DefaultSynthStyle style=(DefaultSynthStyle)styles.get(size - 1);  style=(DefaultSynthStyle)style.clone();  for (int counter=size - 2; counter >= 0; counter--) {    style=((DefaultSynthStyle)styles.get(counter)).addTo(style);  }  return style;}  }
class C{  @Override public void processError(Exception error){  store.addTokenOperation(null,operation,false);  handler.processError(error);}  }
class C{  public static int diffSeqNum(CSN csn1,CSN csn2){  if (csn1 == null) {    return 0;  }  if (csn2 == null) {    return csn1.getSeqnum();  }  if (csn2.isNewerThanOrEqualTo(csn1)) {    return 0;  }  int seqnum1=csn1.getSeqnum();  long time1=csn1.getTime();  int seqnum2=csn2.getSeqnum();  long time2=csn2.getTime();  if (time2 <= time1) {    if (seqnum2 <= seqnum1) {      return seqnum1 - seqnum2;    }    return Integer.MAX_VALUE - (seqnum2 - seqnum1) + 1;  }  return 0;}  }
class C{  public static String resolveIpAddress(String domainName){  try {    InetAddress[] addresses=InetAddress.getAllByName(domainName);    if (addresses == null || addresses.length == 0) {      throw new UnknownHostException(domainName);    }    for (    InetAddress address : addresses) {      if (address instanceof Inet4Address) {        return address.getHostAddress();      }    }    return addresses[0].getHostAddress();  } catch (  Exception ex) {    LOG.debug("Cannot resolve host {} due to {}",domainName,ex.getClass().getName() + ": " + ex.getMessage());    return null;  }}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @Inject public PolicyGraph(ResourceSetDescription resourceSet){  this.resourceOwner=resourceSet.getResourceOwnerId();  this.resourceSet=resourceSet;  this.graph=new DirectedMultigraph<>(PolicyEdge.class);  this.policyRights=new HashMap<>();}  }
class C{  private Tag parseReplacementTag(String tagString,Branch branch,Template template,int lineNumber,Map<String,Tag> tags,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  StringTokenizer tokenizer=new StringTokenizer(tagString,":");  String tagName=tokenizer.nextToken().trim();  String lowerTagName=toLowerCase(tagName);  Tag t=getTag(lowerTagName);  if (t == null) {    t=tags.get(lowerTagName);    if (t == null) {      LocalizableMessage message=ERR_MAKELDIF_NO_SUCH_TAG.get(tagName,lineNumber);      throw new MakeLDIFException(message);    }  }  ArrayList<String> argList=new ArrayList<>();  while (tokenizer.hasMoreTokens()) {    argList.add(tokenizer.nextToken().trim());  }  String[] args=new String[argList.size()];  argList.toArray(args);  Tag newTag;  try {    newTag=t.getClass().newInstance();  } catch (  Exception e) {    throw new MakeLDIFException(ERR_MAKELDIF_CANNOT_INSTANTIATE_NEW_TAG.get(tagName,lineNumber,e),e);  }  if (branch == null) {    newTag.initializeForTemplate(this,template,args,lineNumber,warnings);  } else   if (newTag.allowedInBranch()) {    newTag.initializeForBranch(this,branch,args,lineNumber,warnings);  } else {    throw new MakeLDIFException(ERR_MAKELDIF_TAG_NOT_ALLOWED_IN_BRANCH.get(newTag.getName(),lineNumber));  }  return newTag;}  }
class C{  public <X extends Throwable>T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {  if (value != null) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  private void addIdleObject(final K key,final PooledObject<T> p) throws Exception {  if (p != null) {    factory.passivateObject(key,p);    final LinkedBlockingDeque<PooledObject<T>> idleObjects=poolMap.get(key).getIdleObjects();    if (getLifo()) {      idleObjects.addFirst(p);    } else {      idleObjects.addLast(p);    }  }}  }
class C{  public Builder removeOptionalAttribute(String attributeNameOrOID){  this.optionalAttributeOIDs.remove(attributeNameOrOID);  return this;}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  protected LinkedList<StringBuilder> readEntryLines() throws IOException, LDIFException {  if (reader == null) {    return null;  }  LinkedList<StringBuilder> lines=new LinkedList<>();  int lastLine=-1;  while (true) {    String line=reader.readLine();    lineNumber++;    if (line == null) {      if (!lines.isEmpty()) {        break;      }      reader=importConfig.nextReader();      return reader != null ? readEntryLines() : null;    } else     if (line.length() == 0) {      if (!lines.isEmpty()) {        break;      }      continue;    } else     if (line.charAt(0) == '#') {      continue;    } else     if (line.charAt(0) == ' ' || line.charAt(0) == '\t') {      if (lastLine >= 0) {        lines.get(lastLine).append(line.substring(1));      } else {        LocalizableMessage message=ERR_LDIF_INVALID_LEADING_SPACE.get(lineNumber,line);        logToRejectWriter(lines,message);        throw new LDIFException(message,lineNumber,false);      }    } else {      if (lines.isEmpty()) {        lastEntryLineNumber=lineNumber;      }      if (((byte)line.charAt(0) == (byte)0xEF) && ((byte)line.charAt(1) == (byte)0xBB) && ((byte)line.charAt(2) == (byte)0xBF)) {        line=line.substring(3,line.length());      }      lines.add(new StringBuilder(line));      lastLine++;    }  }  return lines;}  }
class C{  public <M extends Configuration>void deregisterAddListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  deregisterAddListener(baseDN,listener);}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public LoggingUpgradeHelper(){  attributes.add(SUN_AM_LOG_LEVEL_ATTR);  attributes.add(LOGGING_TYPE);}  }
class C{  public StatusMessageImpl() throws XACMLException {}  }
class C{  public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;  this.tmpBuffers=new byte[11][];}  }
class C{  private void goToBackup(){  mStage=Stage.PASSWORD;  updateStage();  mPassword.requestFocus();  mPassword.postDelayed(mShowKeyboardRunnable,500);  mFingerprintUiHelper.stopListening();}  }
class C{  public boolean checkAbsolute(LocPathIterator path){  m_isAbs=true;  path.callVisitors(null,this);  return m_isAbs;}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  if (path instanceof SelfIteratorNoPredicate) {    return true;  } else   if (path instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)path;    AxesWalker aw=wi.getFirstWalker();    if ((aw instanceof FilterExprWalker) && (null == aw.getNextWalker())) {      FilterExprWalker few=(FilterExprWalker)aw;      Expression exp=few.getInnerExpression();      if (exp instanceof Variable)       return true;    }  }  if (isAbsolute(path) && (null != m_absPaths)) {    if (DEBUG)     validateNewAddition(m_absPaths,owner,path);    m_absPaths.addElement(owner);  } else   if (m_isSameContext && (null != m_paths)) {    if (DEBUG)     validateNewAddition(m_paths,owner,path);    m_paths.addElement(owner);  }  return true;}  }
class C{  static void useImplement(DoubledImplement di,boolean isOne){  try {    di.one();    if (!isOne) {      System.err.println("ERROR: did not get LinkageError on DI");    }  } catch (  LinkageError le) {    if (!isOne) {      System.out.println("Got LinkageError on DI (late)");    } else {      throw le;    }  }}  }
class C{  BigInteger multiply(long v){  if (v == 0 || signum == 0)   return ZERO;  if (v == BigDecimal.INFLATED)   return multiply(BigInteger.valueOf(v));  int rsign=(v > 0 ? signum : -signum);  if (v < 0)   v=-v;  long dh=v >>> 32;  long dl=v & LONG_MASK;  int xlen=mag.length;  int[] value=mag;  int[] rmag=(dh == 0L) ? (new int[xlen + 1]) : (new int[xlen + 2]);  long carry=0;  int rstart=rmag.length - 1;  for (int i=xlen - 1; i >= 0; i--) {    long product=(value[i] & LONG_MASK) * dl + carry;    rmag[rstart--]=(int)product;    carry=product >>> 32;  }  rmag[rstart]=(int)carry;  if (dh != 0L) {    carry=0;    rstart=rmag.length - 2;    for (int i=xlen - 1; i >= 0; i--) {      long product=(value[i] & LONG_MASK) * dh + (rmag[rstart] & LONG_MASK) + carry;      rmag[rstart--]=(int)product;      carry=product >>> 32;    }    rmag[0]=(int)carry;  }  if (carry == 0L)   rmag=java.util.Arrays.copyOfRange(rmag,1,rmag.length);  return new BigInteger(rmag,rsign);}  }
class C{  public String toString(){  if (myToString == null) {    final StringBuilder result=new StringBuilder();    result.append(this.getClass().getName());    result.append("(name=");    result.append(getTypeName());    result.append(",items=(");    int i=0;    Iterator<String> k=nameToType.keySet().iterator();    String key;    while (k.hasNext()) {      key=k.next();      if (i > 0)       result.append(",");      result.append("(itemName=");      result.append(key);      result.append(",itemType=");      result.append(nameToType.get(key).toString() + ")");      i++;    }    result.append("))");    myToString=result.toString();  }  return myToString;}  }
class C{  private void open_board_design_action(){  DesignFile design_file=open_dialog(stat,main_options.design_dir_name);  if (design_file == null) {    stat.userPrintln(resources.getString("message_3"));    return;  }  String message=resources.getString("loading_design") + " " + design_file.get_name();  stat.userPrintln(message);  BoardFrame board_frame=new BoardFrame(design_file,stat);  ImportDesign d_import=new ImportDesign(board_frame);  d_import.execute();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnattrnode.class,args);}  }
class C{  private final Map<ObjectClass,String> loadObjectClassesToMaps(int id,final Collection<String> objectClassNames,Mappings mappings,boolean sync){  final LinkedHashMap<ObjectClass,String> ocMap=new LinkedHashMap<>(objectClassNames.size());  for (  final String name : objectClassNames) {    ocMap.put(DirectoryServer.getSchema().getObjectClass(name),name);  }  if (sync) {    exclusiveLock.lock();    try {      updateObjectClassesMaps(id,mappings,ocMap);    }  finally {      exclusiveLock.unlock();    }  } else {    updateObjectClassesMaps(id,mappings,ocMap);  }  return ocMap;}  }
class C{  public static void createPath(final File file,final IConfiguration conf,final boolean isFile) throws IOException {  String path=file.getAbsolutePath();  StringTokenizer st=new StringTokenizer(path,File.separator);  String checkPath=(path.indexOf(File.separator) == 0) ? File.separator : "";  checkPath+=(String)st.nextElement();  while (st.hasMoreElements()) {    String string=(String)st.nextElement();    checkPath=checkPath.concat(File.separator + string);    if (!(string.equals(file.getName()) && isFile)) {      File dir=new File(checkPath);      if (!dir.exists()) {        mkdir(dir,conf);      }    } else {      file.createNewFile();    }  }}  }
class C{  private void encodeV2(Entry entry,ByteStringBuilder buffer,EntryEncodeConfig config) throws DirectoryException {  buffer.appendByte(0x02);  config.encode(buffer);  if (!config.excludeDN()) {    byte[] dnBytes=getBytes(entry.getName().toString());    buffer.appendBERLength(dnBytes.length);    buffer.appendBytes(dnBytes);  }  if (config.compressObjectClassSets()) {    config.getCompressedSchema().encodeObjectClasses(buffer,entry.getObjectClasses());  } else {    int i=1;    ByteStringBuilder bsb=new ByteStringBuilder();    for (    String ocName : entry.getObjectClasses().values()) {      bsb.appendUtf8(ocName);      if (i < entry.getObjectClasses().values().size()) {        bsb.appendByte(0x00);      }      i++;    }    buffer.appendBERLength(bsb.length());    buffer.appendBytes(bsb);  }  encodeV2Attributes(buffer,entry.getAllAttributes(),config,false);  encodeV2Attributes(buffer,entry.getAllAttributes(),config,true);}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,order,multiAllowed);  this.m_isOrdered=has_order;}  }
class C{  public static void fill(float[] a,int fromIndex,int toIndex,float val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  assertSize("elementGetElementsByTagNameAssert",5,elementList);}  }
class C{  public static void sort(byte[] a){  DualPivotQuicksort.sort(a,0,a.length - 1);}  }
class C{  public static void access(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.access(level,msgid,data,session);    } catch (    LogException le) {      COTUtils.debug.error("LogUtil.access: Couldn't write log:",le);    }  }}  }
class C{  public Node removeNamedItemNS(String namespaceURI,String localName) throws DOMException {  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  private PlaLineInt reposition_line(PlaLineIntAlist p_line_arr,int p_start_no){  if (p_line_arr.size() - p_start_no < 5)   return null;  PlaLineInt translate_line=p_line_arr.get(p_start_no + 2);  PlaPointFloat prev_corner=p_line_arr.get(p_start_no).intersection_approx(p_line_arr.get(p_start_no + 1));  PlaPointFloat next_corner=p_line_arr.get(p_start_no + 3).intersection_approx(p_line_arr.get(p_start_no + 4));  double prev_dist=translate_line.distance_signed(prev_corner);  int corners_skipped_before=0;  int corners_skipped_after=0;  final double c_epsilon=0.001;  while (Math.abs(prev_dist) < c_epsilon) {    ++corners_skipped_before;    int curr_no=p_start_no - corners_skipped_before;    if (curr_no < 0)     return null;    prev_corner=p_line_arr.get(curr_no).intersection_approx(p_line_arr.get(curr_no + 1));    prev_dist=translate_line.distance_signed(prev_corner);  }  double next_dist=translate_line.distance_signed(next_corner);  while (Math.abs(next_dist) < c_epsilon) {    ++corners_skipped_after;    int curr_no=p_start_no + 3 + corners_skipped_after;    if (curr_no >= p_line_arr.size() - 2) {      return null;    }    next_corner=p_line_arr.get(curr_no).intersection_approx(p_line_arr.get(curr_no + 1));    next_dist=translate_line.distance_signed(next_corner);  }  if (Signum.of(prev_dist) != Signum.of(next_dist)) {    return null;  }  PlaPointFloat nearest_point;  double max_translate_dist;  if (Math.abs(prev_dist) < Math.abs(next_dist)) {    nearest_point=prev_corner;    max_translate_dist=prev_dist;  } else {    nearest_point=next_corner;    max_translate_dist=next_dist;  }  PlaLineIntAlist curr_lines=new PlaLineIntAlist(p_line_arr.to_alist());  double translate_dist=max_translate_dist;  double delta_dist=max_translate_dist;  PlaSide side_of_nearest_point=translate_line.side_of(nearest_point);  int sign=Signum.as_int(max_translate_dist);  PlaLineInt result=null;  boolean first_time=true;  while (first_time || Math.abs(delta_dist) > min_move_dist) {    boolean check_ok=false;    PlaLineInt new_line=translate_line.translate(-translate_dist);    if (first_time && Math.abs(translate_dist) < 1) {      if (new_line.equals(translate_line)) {        PlaPointInt rounded_nearest_point=nearest_point.round();        if (nearest_point.distance(rounded_nearest_point.to_float()) < Math.abs(translate_dist)) {          new_line=new PlaLineInt(rounded_nearest_point,translate_line.direction());        }        first_time=false;      }      if (new_line.equals(translate_line)) {        return null;      }    }    PlaSide new_line_side_of_nearest_point=new_line.side_of(nearest_point);    if (new_line_side_of_nearest_point == side_of_nearest_point || new_line_side_of_nearest_point == PlaSide.COLLINEAR) {      first_time=false;      curr_lines.set(p_start_no + 2,new_line);      PlaLineInt prev_translated_line=new_line;      for (int index=0; index < corners_skipped_before; ++index) {        int prev_line_no=p_start_no + 1 - corners_skipped_before;        PlaPointFloat curr_prev_corner=prev_translated_line.intersection_approx(curr_lines.get(prev_line_no));        if (curr_prev_corner.is_NaN())         return null;        PlaLineInt curr_translate_line=p_line_arr.get(p_start_no + 1 - index);        double curr_translate_dist=curr_translate_line.distance_signed(curr_prev_corner);        prev_translated_line=curr_translate_line.translate(-curr_translate_dist);        curr_lines.set(p_start_no + 1 - index,prev_translated_line);      }      prev_translated_line=new_line;      for (int index=0; index < corners_skipped_after; ++index) {        int next_line_no=p_start_no + 3 + corners_skipped_after;        PlaPointFloat curr_next_corner=prev_translated_line.intersection_approx(curr_lines.get(next_line_no));        if (curr_next_corner.is_NaN())         return null;        PlaLineInt curr_translate_line=p_line_arr.get(p_start_no + 3 + index);        double curr_translate_dist=curr_translate_line.distance_signed(curr_next_corner);        prev_translated_line=curr_translate_line.translate(-curr_translate_dist);        curr_lines.set(p_start_no + 3 + index,prev_translated_line);      }      Polyline tmp=new Polyline(curr_lines);      if (tmp.plaline_len() == curr_lines.size()) {        ShapeTile shape_to_check=tmp.offset_shape(curr_half_width,p_start_no + 1);        check_ok=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);      }      delta_dist/=2;      if (check_ok) {        result=curr_lines.get(p_start_no + 2);        if (translate_dist == max_translate_dist)         break;        translate_dist+=delta_dist;      } else {        translate_dist-=delta_dist;      }    } else {      double shorten_value=sign * 0.5;      max_translate_dist-=shorten_value;      translate_dist-=shorten_value;      delta_dist-=shorten_value;    }  }  if (result == null)   return null;  PlaPointFloat new_prev_corner=curr_lines.get(p_start_no).intersection_approx(curr_lines.get(p_start_no + 1));  PlaPointFloat new_next_corner=curr_lines.get(p_start_no + 3).intersection_approx(curr_lines.get(p_start_no + 4));  r_board.changed_area.join(new_prev_corner,curr_layer);  r_board.changed_area.join(new_next_corner,curr_layer);  return result;}  }
class C{  private Response parseResponseElement(Element elem){  Response response=new Response();  String temp=elem.getAttribute("dtdid");  if (temp != null) {    response.setDtdID(temp);  }  Node text=elem.getFirstChild();  if (text != null) {    response.setContent(text.getNodeValue());  }  return response;}  }
class C{  public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public InetUnixAddress(byte[] path){  super(AF_UNIX,path,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("textNodeNotNull",textNode);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  otherChild=textNode.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);  otherChild=textNode.getPreviousSibling();  assertNull("previousSiblingIsNull",otherChild);}  }
class C{  public BoundedInputStream(InputStream in){  this(in,-1);}  }
class C{  public void forwardTo(RequestContext context){  String classMethod="PWResetUserValidationViewBean:forwardTo : ";  HttpServletRequest req=context.getRequest();  PWResetUserValidationModel model=(PWResetUserValidationModel)getModel();  ISLocaleContext localeContext=new ISLocaleContext();  localeContext.setLocale(req);  java.util.Locale locale=localeContext.getLocale();  model.setUserLocale(locale.toString());  String orgDN=(String)getPageSessionAttribute(ORG_DN);  if (orgDN == null) {    Hashtable reqDataHash=AuthUtils.parseRequestParameters(req);    String orgParam=AuthUtils.getOrgParam(reqDataHash);    String queryOrg=AuthUtils.getQueryOrgName(req,orgParam);    orgDN=AuthUtils.getOrganizationDN(queryOrg,true,req);    model.setValidRealm(orgDN);    if (debug.messageEnabled()) {      debug.message(classMethod + "orgDN is :" + orgDN);    }    setPageSessionAttribute(ORG_DN,orgDN);    if (orgParam != null && orgParam.length() > 0) {      setPageSessionAttribute(ORG_DN_FLAG,STRING_TRUE);      model.setRealmFlag(true);    }  } else {    model.setValidRealm(orgDN);  }  super.forwardTo(context);}  }
class C{  private File findFile(File directory,String name) throws FileNotFoundException {  File file=new File(directory,name);  if (file.exists()) {    return file;  }  for (  String child : directory.list()) {    if (child.equalsIgnoreCase(name)) {      return new File(directory,child);    }  }  throw new FileNotFoundException("Missing file: " + file);}  }
class C{  public void clear(){  mProviderHelper.clear();}  }
class C{  public static QueryExp and(QueryExp q1,QueryExp q2){  return new AndQueryExp(q1,q2);}  }
class C{  public ListDataEvent(Object source,int type,int index0,int index1){  super(source);  this.type=type;  this.index0=Math.min(index0,index1);  this.index1=Math.max(index0,index1);}  }
class C{  @SuppressWarnings("unchecked") public void writeArray(Array x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialArray(x,map));  }}  }
class C{  public void removeDefaultValues() throws SMSException, SSOException {  updateDefaultValues(new HashSet());}  }
class C{  protected static void writeProcessorState(PrintWriter writer,ObjectName pName,MBeanServer mBeanServer,int mode) throws Exception {  Integer stageValue=(Integer)mBeanServer.getAttribute(pName,"stage");  int stage=stageValue.intValue();  boolean fullStatus=true;  boolean showRequest=true;  String stageStr=null;switch (stage) {case (1):    stageStr="P";  fullStatus=false;break;case (2):stageStr="P";fullStatus=false;break;case (3):stageStr="S";break;case (4):stageStr="F";break;case (5):stageStr="F";break;case (7):stageStr="R";fullStatus=false;break;case (6):stageStr="K";fullStatus=true;showRequest=false;break;case (0):stageStr="R";fullStatus=false;break;default :stageStr="?";fullStatus=false;}if (mode == 0) {writer.write("<td><strong>");writer.write(stageStr);writer.write("</strong></td>");if (fullStatus) {writer.write("<td>");writer.print(formatTime(mBeanServer.getAttribute(pName,"requestProcessingTime"),false));writer.write("</td>");writer.write("<td>");if (showRequest) {writer.print(formatSize(mBeanServer.getAttribute(pName,"requestBytesSent"),false));} else {writer.write("?");}writer.write("</td>");writer.write("<td>");if (showRequest) {writer.print(formatSize(mBeanServer.getAttribute(pName,"requestBytesReceived"),false));} else {writer.write("?");}writer.write("</td>");writer.write("<td>");writer.print(filter(mBeanServer.getAttribute(pName,"remoteAddrForwarded")));writer.write("</td>");writer.write("<td>");writer.print(filter(mBeanServer.getAttribute(pName,"remoteAddr")));writer.write("</td>");writer.write("<td nowrap>");writer.write(filter(mBeanServer.getAttribute(pName,"virtualHost")));writer.write("</td>");writer.write("<td nowrap class=\"row-left\">");if (showRequest) {writer.write(filter(mBeanServer.getAttribute(pName,"method")));writer.write(" ");writer.write(filter(mBeanServer.getAttribute(pName,"currentUri")));String queryString=(String)mBeanServer.getAttribute(pName,"currentQueryString");if ((queryString != null) && (!queryString.equals(""))) {writer.write("?");writer.print(RequestUtil.filter(queryString));}writer.write(" ");writer.write(filter(mBeanServer.getAttribute(pName,"protocol")));} else {writer.write("?");}writer.write("</td>");} else {writer.write("<td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td>");}} else if (mode == 1) {writer.write("<worker ");writer.write(" stage=\"" + stageStr + "\"");if (fullStatus) {writer.write(" requestProcessingTime=\"" + mBeanServer.getAttribute(pName,"requestProcessingTime") + "\"");writer.write(" requestBytesSent=\"");if (showRequest) {writer.write("" + mBeanServer.getAttribute(pName,"requestBytesSent"));} else {writer.write("0");}writer.write("\"");writer.write(" requestBytesReceived=\"");if (showRequest) {writer.write("" + mBeanServer.getAttribute(pName,"requestBytesReceived"));} else {writer.write("0");}writer.write("\"");writer.write(" remoteAddr=\"" + filter(mBeanServer.getAttribute(pName,"remoteAddr")) + "\"");writer.write(" virtualHost=\"" + filter(mBeanServer.getAttribute(pName,"virtualHost")) + "\"");if (showRequest) {writer.write(" method=\"" + filter(mBeanServer.getAttribute(pName,"method")) + "\"");writer.write(" currentUri=\"" + filter(mBeanServer.getAttribute(pName,"currentUri")) + "\"");String queryString=(String)mBeanServer.getAttribute(pName,"currentQueryString");if ((queryString != null) && (!queryString.equals(""))) {writer.write(" currentQueryString=\"" + RequestUtil.filter(queryString) + "\"");} else {writer.write(" currentQueryString=\"&#63;\"");}writer.write(" protocol=\"" + filter(mBeanServer.getAttribute(pName,"protocol")) + "\"");} else {writer.write(" method=\"&#63;\"");writer.write(" currentUri=\"&#63;\"");writer.write(" currentQueryString=\"&#63;\"");writer.write(" protocol=\"&#63;\"");}} else {writer.write(" requestProcessingTime=\"0\"");writer.write(" requestBytesSent=\"0\"");writer.write(" requestBytesReceived=\"0\"");writer.write(" remoteAddr=\"&#63;\"");writer.write(" virtualHost=\"&#63;\"");writer.write(" method=\"&#63;\"");writer.write(" currentUri=\"&#63;\"");writer.write(" currentQueryString=\"&#63;\"");writer.write(" protocol=\"&#63;\"");}writer.write(" />");}}  }
class C{  public boolean isDefaultCapable(){  return defaultCapable;}  }
class C{  private void assertion(boolean condition,String msg) throws RuntimeException {  if (!condition)   throw new RuntimeException(msg);}  }
class C{  public Mp4TagByteField(String id,ByteBuffer raw) throws UnsupportedEncodingException {  super(id,raw);}  }
class C{  TemplateFile(Schema schema,Map<String,String> constants,String resourcePath,Random random,boolean generateBranches) throws IOException {  Reject.ifNull(schema,random);  this.generateBranches=generateBranches;  this.schema=schema;  this.constants=constants != null ? constants : new HashMap<String,String>();  this.resourcePath=resourcePath;  this.random=random;  registerDefaultTags();  retrieveFirstAndLastNames();}  }
class C{  public EventException(String message){  super(message);  cause=null;}  }
class C{  public ObjectInUseException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected ChildState createChildState(View v){  return new ChildState(v);}  }
class C{  private UnicodeBlock(String idName,String alias){  this(idName);  map.put(alias,this);}  }
class C{  private void loadCache(String org,Set c,String template){  Iterator iter=c.iterator();  String entName="";  AttrSet attrSet=null;  while (iter.hasNext()) {    entName=iter.next().toString();    Map entityAttributes=new HashMap();    attrSet=new AttrSet();    try {      entityAttributes=getServiceAttributes(org,entName);    } catch (    SMSException smse) {      _debug.error("ConfigManager->loadCache: SMSException: " + smse.toString());    }catch (    SSOException ssoe) {      _debug.error("ConfigManager->loadCache: SSOException: " + ssoe.toString());    }    if (entityAttributes.isEmpty())     continue;    for (Iterator it=entityAttributes.entrySet().iterator(); it.hasNext(); ) {      Map.Entry ent=(Map.Entry)it.next();      Set hs=(Set)ent.getValue();      Iterator itera=hs.iterator();      itera=hs.iterator();      while (itera.hasNext()) {        attrSet.add(new Attr((String)ent.getKey(),(String)itera.next()));      }    }    String key=org + "/" + template+ "/";    Attr classAttr=null;    if (template.equals(ENTITY)) {      classAttr=attrSet.getAttribute(CLASS);      if (classAttr != null) {        Set hs=new HashSet();        if (_cch.containsKey(key + classAttr.getValue())) {          hs=(Set)_cch.get(key + classAttr.getValue());          hs.add(attrSet);        } else {          hs.add(attrSet);        }        _cch.put(key + classAttr.getValue(),hs);        if (_debug.messageEnabled())         _debug.message("ConfigManager->loadCache KEY:" + key + classAttr.getValue()+ " VALUE:"+ hs);      }      int l=entName.lastIndexOf("/");      String cname=entName.substring(l + 1);      Set hset=new HashSet();      hset.add(attrSet);      _cch.put(key + cname,hset);      if (_debug.messageEnabled())       _debug.message("ConfigManager->loadCache KEY:" + key + cname+ " VALUE:"+ hset);    }    if ((template.equals(SEARCH)) || template.equals(CREATION)) {      classAttr=attrSet.getAttribute(JAVACLASS);      if (classAttr != null) {        _cch.put(key + classAttr.getValue(),attrSet);        if (_debug.messageEnabled())         _debug.message("ConfigManager->loadCache KEY:" + key + classAttr.getValue()+ " VALUE:"+ attrSet);      }      classAttr=attrSet.getAttribute(ATTRNAME);      if (classAttr != null) {        _cch.put(key + classAttr.getValue(),attrSet);        _debug.message("ConfigManager->loadCache KEY:" + key + classAttr.getValue()+ " VALUE:"+ attrSet);      }    }    if (template.equals(OBJECTRESOLVER)) {      String oc_jc_map_string=attrSet.getValue(OC_JC_MAP);      if (oc_jc_map_string != null) {        _cch.put(OBJECTRESOLVERPATH,getOC_JC_MAP(oc_jc_map_string));        _debug.message("ConfigManager->loadCache KEY:" + OBJECTRESOLVERPATH + " VALUE:"+ attrSet);      }    }  }}  }
class C{  public CCOrderedList(ContainerView parent,CCOrderableListModelInterface model,String name){  super(parent,model,name);}  }
class C{  public static CharSequence collapse(CharSequence text){  int len=text.length();  int s=0;  while (s < len) {    if (isWhiteSpace(text.charAt(s)))     break;    s++;  }  if (s == len)   return text;  StringBuilder result=new StringBuilder(len);  if (s != 0) {    for (int i=0; i < s; i++)     result.append(text.charAt(i));    result.append(' ');  }  boolean inStripMode=true;  for (int i=s + 1; i < len; i++) {    char ch=text.charAt(i);    boolean b=isWhiteSpace(ch);    if (inStripMode && b)     continue;    inStripMode=b;    if (inStripMode)     result.append(' '); else     result.append(ch);  }  len=result.length();  if (len > 0 && result.charAt(len - 1) == ' ')   result.setLength(len - 1);  return result;}  }
class C{  public SearchResultEntryProtocolOp(DN dn,LinkedList<LDAPAttribute> attributes){  this(dn,attributes,null,3);}  }
class C{  @DataProvider(name="invalidBase64Data") public Object[][] createInvalidBase64Data(){  return new Object[][]{{"="},{"=="},{"==="},{"A"},{"AA"},{"AAA"},{"AA`="},{"AA~="},{"AA!="},{"AA@="},{"AA#="},{"AA$="},{"AA%="},{"AA^="},{"AA*="},{"AA(="},{"AA)="},{"AA_="},{"AA-="},{"AA{="},{"AA}="},{"AA|="},{"AA[="},{"AA]="},{"AA\\="},{"AA;="},{"AA'="},{"AA\"="},{"AA:="},{"AA,="},{"AA.="},{"AA<="},{"AA>="},{"AA?="},{"AA;="}};}  }
class C{  public JKTagMapping findTagMapping(final JKTagWrapper wrapper){  logger.info("Find mapping to tag ".concat(wrapper.getqName()));  for (  final JKTagMapping mapping : this.tagMapping) {    if (mapping.getSourceQName().equals(wrapper.getqName())) {      if (mapping.getAttributeName() == null) {        return mapping;      } else {        final String value=wrapper.getAttributeValue(mapping.getAttributeName());        if (value != null && value.equals(mapping.getAttributeValue())) {          return mapping;        }      }    }  }  return null;}  }
class C{  public IStoreFactory findStoreFactory(String aClassName){  StoreDescription desc=findDescription(aClassName);  if (desc != null)   return desc.getStoreFactory(); else   return null;}  }
class C{  public void testZeroPos(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public boolean containsNone(){  return prompts.contains(PROMPT_NONE);}  }
class C{  public boolean isOutputMethodSet(){  return m_outputMethodSet;}  }
class C{  public int max_net_no(){  return net_list.size();}  }
class C{  public void testGetElementsByTagNameNS1() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument(nullNS,"root",docType);  childList=newDoc.getElementsByTagNameNS("*","*");  assertEquals("documentgetelementsbytagnameNS01",1,childList.getLength());}  }
class C{  public static ModifyRequest newModifyRequest(final DN dn){  return Requests.newModifyRequest(dn).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public RequirementsBuilder addRequireProperty(String name,String description){  addRequireProperty(name,"string",description);  return this;}  }
class C{  public Value parseValueFromAccessType(AST.Access access,List<Import> imports,STypeDef currentType) throws SyntaxException {  SClassDef type=(SClassDef)getTypeWithAccess(access,imports);  assert type != null;  SConstructorDef zeroParamCons=null;  for (  SConstructorDef c : type.constructors()) {    if (c.getParameters().isEmpty()) {      if (c.modifiers().contains(SModifier.PRIVATE)) {        if (!type.equals(currentType) && type.classType() != SClassDef.OBJECT)         continue;      } else       if (c.modifiers().contains(SModifier.PROTECTED)) {        if (!type.pkg().equals(currentType.pkg()) && !type.isAssignableFrom(currentType))         continue;      } else       if (!c.modifiers().contains(SModifier.PUBLIC)) {        if (!type.pkg().equals(currentType.pkg()))         continue;      }      zeroParamCons=c;      break;    }  }  if (zeroParamCons == null) {    err.SyntaxException(type + " do not have zero parameter constructor",access.line_col());    return null;  } else   if (type.classType() == SClassDef.OBJECT) {    SFieldDef singletonInstance=null;    for (    SFieldDef f : type.fields()) {      if (f.name().equals(CompileUtil.SingletonFieldName)) {        singletonInstance=f;        break;      }    }    if (singletonInstance == null)     throw new LtBug("object class should have field " + CompileUtil.SingletonFieldName);    return new Ins.GetStatic(singletonInstance,access.line_col());  } else {    return new Ins.New(zeroParamCons,access.line_col());  }}  }
class C{  public boolean bottomCollide(boolean checkElements){  return collide(2,checkElements);}  }
class C{  public void updateTitle(){  if (panel.getTitle() != null) {    setTitle(INFO_CTRL_PANEL_GENERIC_TITLE.get(DynamicConstants.PRODUCT_NAME,panel.getTitle()).toString());  }}  }
class C{  public CoreEventLogsDbHelper(Context context){  super(context);  logDbAdapter=new LogEventDbAdapter(database);}  }
class C{  public Set search3(String tokenID,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder,Set excludes) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::search dn: " + startDN + " filter: "+ filter+ " excludes: "+ excludes);  }  Iterator i=SMSEntry.search(getToken(tokenID),startDN,filter,numOfEntries,timeLimit,sortResults,ascendingOrder,excludes);  Set<String> result=new HashSet<String>();  while (i.hasNext()) {    SMSDataEntry e=(SMSDataEntry)i.next();    try {      result.add(e.toJSONString());    } catch (    JSONException ex) {      debug.error("SMSJAXRPCObjectImpl::problem performing search dn: " + startDN + " filter: "+ filter+ " excludes: "+ excludes,ex);    }  }  return result;}  }
class C{  public boolean isLocalServerSecure(){  return localServerSecure;}  }
class C{  public Set<String> searchOrganizationNames(SSOToken token,String dn,int numOfEntries,boolean sortResults,boolean ascendingOrder,String serviceName,String attrName,Set values) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSLdapObject:searchOrganizationNames search dn: " + dn);  }  StringBuilder sb=new StringBuilder();  sb.append("(&");  for (Iterator itr=values.iterator(); itr.hasNext(); ) {    String val=(String)itr.next();    sb.append("(|(").append(SMSEntry.ATTR_XML_KEYVAL).append("=").append(serviceName).append("-").append(attrName).append("=").append(val).append(")");    sb.append("(").append(SMSEntry.ATTR_XML_KEYVAL).append("=").append(attrName).append("=").append(val).append("))");  }  sb.append(")");  String filter=sb.toString();  String FILTER_PATTERN_SEARCH_ORG="{0}";  String dataStore=SMSEntry.getDataStore(token);  if ((dataStore != null) && !dataStore.equals(SMSEntry.DATASTORE_ACTIVE_DIR)) {    FILTER_PATTERN_SEARCH_ORG="(|(&(objectclass=" + SMSEntry.OC_REALM_SERVICE + "){0})"+ "(&(objectclass="+ SMSEntry.OC_SERVICE_COMP+ "){0}))";  }  String[] objs={filter};  String sfilter=MessageFormat.format(FILTER_PATTERN_SEARCH_ORG,(Object[])objs);  if (debug.messageEnabled()) {    debug.message("SMSLdapObject:orgNames search filter: " + sfilter);  }  return getOrgNames(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder);}  }
class C{  public ByteBufferOutputStream append(byte[] b){  return append(b,0,b.length);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationhasfeature02.class,args);}  }
class C{  public boolean isLoadingButtonShown(){  return mShowLoadingButton;}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (idpList != null) {      idpList.makeImmutable();    }    if (requesterIDList != null) {      for (      RequesterID reqID : requesterIDList) {        reqID.makeImmutable();      }    }    isMutable=false;  }}  }
class C{  public boolean containsKey(Object[] key){  return (key == null ? false : dataMap.containsKey(Arrays.asList(key)));}  }
class C{  public boolean isCompatibleSampleModel(SampleModel sm){  if (!(sm instanceof ComponentSampleModel)) {    return false;  }  if (numComponents != sm.getNumBands()) {    return false;  }  if (sm.getTransferType() != transferType) {    return false;  }  return true;}  }
class C{  public void writeTo(OutputStream out) throws IOException {  if (!closed) {    throw new IOException("Stream not closed");  }  if (isInMemory()) {    memoryOutputStream.writeTo(out);  } else {    FileInputStream fis=new FileInputStream(outputFile);    try {      IOUtils.copy(fis,out);    }  finally {      IOUtils.closeQuietly(fis);    }  }}  }
class C{  @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  public synchronized void serviceChannel(SelectionKey key){  if (log.isTraceEnabled())   log.trace("About to service key:" + key);  ObjectReader reader=(ObjectReader)key.attachment();  if (reader != null)   reader.setLastAccess(System.currentTimeMillis());  this.key=key;  key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));  key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));}  }
class C{  @Override public Foo fetchByPrimaryKey(long fooId){  return fetchByPrimaryKey((Serializable)fooId);}  }
class C{  public <E extends IEventListener>E processContent(int pageNumber,E renderListener){  return processContent(pageNumber,renderListener,new HashMap<String,IContentOperator>());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexnotzero.class,args);}  }
class C{  static boolean previouslyNotificationEnabled(){  return previousNotificationEnabledFlag;}  }
class C{  static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Double(expected),new Double(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Double(expected),new Double(actual));}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public NameFileFilter(List<String> names){  this(names,null);}  }
class C{  public void handleServerNameHrefRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void changeStateWithoutNotify(SessionState state){  this.sessionState=state;}  }
class C{  public ShapelessRecipe removeIngredient(int count,MaterialData ingredient){  return removeIngredient(count,ingredient.getItemType(),ingredient.getData());}  }
class C{  @SuppressLint("NewApi") private int calculateAnimationDelay(final int position){  int delay;  int lastVisiblePosition=((LinearLayoutManager)mRecyclerView.getLayoutManager()).findLastCompletelyVisibleItemPosition();  int firstVisiblePosition=((LinearLayoutManager)mRecyclerView.getLayoutManager()).findFirstCompletelyVisibleItemPosition();  if (mLastAnimatedPosition > lastVisiblePosition)   lastVisiblePosition=mLastAnimatedPosition;  int numberOfItemsOnScreen=lastVisiblePosition - firstVisiblePosition;  int numberOfAnimatedItems=position - 1 - mFirstAnimatedPosition;  if (numberOfItemsOnScreen + 1 < numberOfAnimatedItems) {    delay=mAnimationDelayMillis;    if (mRecyclerView.getLayoutManager() instanceof GridLayoutManager) {      int numColumns=((GridLayoutManager)mRecyclerView.getLayoutManager()).getSpanCount();      delay+=mAnimationDelayMillis * (position % numColumns);      Log.d("GAB","Delay[" + position + "]=*"+ lastVisiblePosition+ "|"+ firstVisiblePosition+ "|");    }  } else {    int delaySinceStart=(position - mFirstAnimatedPosition) * mAnimationDelayMillis;    delay=Math.max(0,(int)(-SystemClock.uptimeMillis() + mAnimationStartMillis + mInitialDelayMillis+ delaySinceStart));  }  Log.d("GAB","Delay[" + position + "]="+ delay+ "|"+ lastVisiblePosition+ "|"+ firstVisiblePosition+ "|");  return delay;}  }
class C{  public String metricsPackageName(){  return values.metricsPackageName;}  }
class C{  public static Integer toInteger(final Object value){  return (int)JKConversionUtil.toDouble(value);}  }
class C{  public static void write_default_rule(DsnWriteScopeParameter p_par,int p_layer) throws java.io.IOException {  p_par.file.start_scope();  p_par.file.write("rule");  double trace_width=2 * p_par.coordinate_transform.board_to_dsn(p_par.board.brd_rules.get_default_net_class().get_trace_half_width(0));  p_par.file.new_line();  p_par.file.write("(width ");  p_par.file.write((new Double(trace_width)).toString());  p_par.file.write(")");  int default_cl_no=BoardRules.clearance_default_idx;  int default_board_clearance=p_par.board.brd_rules.clearance_matrix.value_at(default_cl_no,default_cl_no,p_layer);  double default_clearance=p_par.coordinate_transform.board_to_dsn(default_board_clearance);  p_par.file.new_line();  p_par.file.write("(clear ");  p_par.file.write((new Double(default_clearance)).toString());  p_par.file.write(")");  Double smd_to_turn_dist=p_par.coordinate_transform.board_to_dsn(p_par.board.brd_rules.get_pin_edge_to_turn_dist());  p_par.file.new_line();  p_par.file.write("(clear ");  p_par.file.write(smd_to_turn_dist.toString());  p_par.file.write(" (type smd_to_turn_gap))");  int cl_count=p_par.board.brd_rules.clearance_matrix.get_class_count();  for (int i=1; i <= cl_count; ++i) {    write_clearance_rules(p_par,p_layer,i,cl_count,default_board_clearance);  }  p_par.file.end_scope();}  }
class C{  private static void readHeader(GifParameters gif) throws java.io.IOException {  StringBuilder id=new StringBuilder("");  for (int i=0; i < 6; i++)   id.append((char)gif.input.read());  if (!id.toString().startsWith("GIF8")) {    throw new IOException(IOException.GifSignatureNotFound);  }  readLSD(gif);  if (gif.gctFlag) {    gif.m_global_table=readColorTable(gif.m_gbpc,gif);  }}  }
class C{  protected boolean restoreRequest(Request request,Session session) throws IOException {  SavedRequest saved=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);  session.removeNote(Constants.FORM_REQUEST_NOTE);  session.removeNote(Constants.FORM_PRINCIPAL_NOTE);  if (saved == null) {    return false;  }  byte[] buffer=new byte[4096];  InputStream is=request.createInputStream();  while (is.read(buffer) >= 0) {  }  request.clearCookies();  Iterator<Cookie> cookies=saved.getCookies();  while (cookies.hasNext()) {    request.addCookie(cookies.next());  }  String method=saved.getMethod();  MimeHeaders rmh=request.getCoyoteRequest().getMimeHeaders();  rmh.recycle();  boolean cachable="GET".equalsIgnoreCase(method) || "HEAD".equalsIgnoreCase(method);  Iterator<String> names=saved.getHeaderNames();  while (names.hasNext()) {    String name=names.next();    if (!("If-Modified-Since".equalsIgnoreCase(name) || (cachable && "If-None-Match".equalsIgnoreCase(name)))) {      Iterator<String> values=saved.getHeaderValues(name);      while (values.hasNext()) {        rmh.addValue(name).setString(values.next());      }    }  }  request.clearLocales();  Iterator<Locale> locales=saved.getLocales();  while (locales.hasNext()) {    request.addLocale(locales.next());  }  request.getCoyoteRequest().getParameters().recycle();  request.getCoyoteRequest().getParameters().setQueryStringEncoding(request.getConnector().getURIEncoding());  ByteChunk body=saved.getBody();  if (body != null) {    request.getCoyoteRequest().action(ActionCode.REQ_SET_BODY_REPLAY,body);    MessageBytes contentType=MessageBytes.newInstance();    String savedContentType=saved.getContentType();    if (savedContentType == null && "POST".equalsIgnoreCase(method)) {      savedContentType="application/x-www-form-urlencoded";    }    contentType.setString(savedContentType);    request.getCoyoteRequest().setContentType(contentType);  }  request.getCoyoteRequest().method().setString(method);  return true;}  }
class C{  public MaterialBarcodeScannerBuilder withBackfacingCamera(){  mFacing=CameraSource.CAMERA_FACING_BACK;  return this;}  }
class C{  public ReflectPermission(String name,String actions){  super(name,actions);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditem.class,args);}  }
class C{  private File directory() throws IOException {  if (this.directory == null) {    return null;  }  if (this.directoryFile != null) {    return this.directoryFile;  }  File file=new File(this.directory);  if (!file.isAbsolute()) {    Context context=manager.getContext();    ServletContext servletContext=context.getServletContext();    File work=(File)servletContext.getAttribute(ServletContext.TEMPDIR);    file=new File(work,this.directory);  }  if (!file.exists() || !file.isDirectory()) {    if (!file.delete() && file.exists()) {      throw new IOException(sm.getString("fileStore.deleteFailed",file));    }    if (!file.mkdirs() && !file.isDirectory()) {      throw new IOException(sm.getString("fileStore.createFailed",file));    }  }  this.directoryFile=file;  return file;}  }
class C{  void writeFrame(byte[] bytes,int offset,int length) throws IOException {synchronized (spdyWriter) {    spdyWriter.out.write(bytes,offset,length);  }}  }
class C{  private int RS_MDS_Encode(int k0,int k1){  int r=k1;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  r^=k0;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  return r;}  }
class C{  public boolean isSharpable(){  return sharpable;}  }
class C{  protected void paintBorder(Graphics g){  Border border=getBorder();  if (border != null) {    border.paintBorder(this,g,0,0,getWidth(),getHeight());  }}  }
class C{  private void parameterType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertLenghtOne(method.getGenericParameterTypes());  Type genericParameterType=method.getGenericParameterTypes()[0];  assertEquals(typeParameter,genericParameterType);  assertTrue(genericParameterType instanceof TypeVariable);  TypeVariable<?> typeVariable=(TypeVariable<?>)genericParameterType;  assertEquals(method,typeVariable.getGenericDeclaration());  Type[] paramBounds=typeVariable.getBounds();  assertLenghtOne(paramBounds);  Type paramBound=paramBounds[0];  assertEquals(BoundedGenericMethods.class,paramBound);}  }
class C{  public boolean hasDynamicAttributes(){  return dynamicAttributes;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  @Inject public MapToJsonStringConverter(@Named("cts-json-object-mapper") ObjectMapper mapper){  this.mapper=mapper;}  }
class C{  public final Collection<AwtreeFindEntry> find_overlap_tree_entries(ShapeConvex p_shape,int p_layer){  return find_overlap_tree_entries(p_shape,p_layer,NetNosList.EMPTY);}  }
class C{  public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public IRandomAccessSource createSourceView(){  return new IndependentRandomAccessSource(byteSource);}  }
class C{  public void changedUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    return;  }  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(e.getOffset() + e.getLength());  }}  }
class C{  public SingletonRelationshipProvider(final ConnectionFactory connectionFactory,final ResourcePath resourcePath,final SchemaField schemaField,final ActivityLogger activityLogger,final ManagedObjectSetService managedObjectSyncService){  super(connectionFactory,resourcePath,schemaField,activityLogger,managedObjectSyncService);  final Router router=new Router();  router.addRoute(STARTS_WITH,uriTemplate(String.format("{%s}/%s",PARAM_MANAGED_OBJECT_ID,schemaField.getName())),Resources.newHandler(this));  this.requestHandler=router;}  }
class C{  private void registerHandlerWithPLLClient(PolicyNotificationHandler handler){  try {    PLLClient.addNotificationHandler(POLICY_SERVICE_ID_FOR_NAMING,handler);    if (debug.messageEnabled()) {      debug.message("ResourceResultCache." + "registerHandlerWithPLLClient():" + "registered notification handler");    }  } catch (  AlreadyRegisteredException ae) {    if (debug.warningEnabled()) {      debug.message("ResourceResultCache." + "registerHandlerWithPLLClient():" + "AlreadyRegisteredException",ae);    }  }}  }
class C{  public void makeImmutable(){  if (!mutable) {    return;  }  mutable=false;  if ((content != null) && (!content.isEmpty())) {    content=Collections.unmodifiableList(content);  }}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  public static boolean isImageFile(String file){  String ext=file.substring(file.lastIndexOf(".") + 1);  if (MimeTypes.getInstance().getMimeType(file).startsWith("image/"))   return true;  return ext.equalsIgnoreCase("png") || ext.equalsIgnoreCase("jpg") || ext.equalsIgnoreCase("jpeg")|| ext.equalsIgnoreCase("gif")|| ext.equalsIgnoreCase("tiff")|| ext.equalsIgnoreCase("tif");}  }
class C{  public StandardWrapperFacade(StandardWrapper config){  super();  this.config=config;}  }
class C{  protected boolean isImageWrapCropBounds(float[] imageCorners){  mTempMatrix.reset();  mTempMatrix.setRotate(-getCurrentAngle());  float[] unrotatedImageCorners=Arrays.copyOf(imageCorners,imageCorners.length);  mTempMatrix.mapPoints(unrotatedImageCorners);  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);  return RectUtils.trapToRect(unrotatedImageCorners).contains(RectUtils.trapToRect(unrotatedCropBoundsCorners));}  }
class C{  private void throwAbandonIfNeeded(Exception x) throws SearchAbandonException {  if (x != null) {    if (x instanceof InterruptedException) {      throw new SearchAbandonException(State.INTERRUPTED,x,null);    }    throw new SearchAbandonException(State.FAILED,x,null);  } else   if (isCanceled()) {    throw new SearchAbandonException(State.CANCELLED,null,null);  }}  }
class C{  private void webServerStop(){  mAppManager.startService(WebServerService.class,WEB_SERVER_SERVICE_STOP);}  }
class C{  public final void testGetCollection01(){  CollectionCertStoreParameters cp=new CollectionCertStoreParameters();  assertNotNull(cp.getCollection());}  }
class C{  public void testRadix36Pos(){  String value="23895lt45y6vhgliuwhgi45y845htsuerhsi4586ysuerhtsio5y68peruhgsil4568ypeorihtse48y6";  int radix=36;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void startEditingAtPath(JTree a,TreePath b){  for (int i=0; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).startEditingAtPath(a,b);  }}  }
class C{  private void removeRemoteServerReferences() throws ApplicationException {  Set<ServerDescriptor> servers=getUninstallUserData().getRemoteServers();  Map<ADSContext.ServerProperty,Object> serverADSProperties=null;  for (  ServerDescriptor server : servers) {    if (isServerToUninstall(server)) {      serverADSProperties=server.getAdsProperties();      break;    }  }  if (serverADSProperties == null) {    logger.warn(LocalizableMessage.raw("The server ADS properties for the server to " + "uninstall could not be found."));  }  for (  ServerDescriptor server : servers) {    if (server.getAdsProperties() != serverADSProperties) {      removeReferences(server,serverADSProperties);    }  }}  }
class C{  private void buildTwoVarOp(MethodVisitor methodVisitor,CodeInfo info,Ins.TwoVarOp twoVarOp){  buildValueAccess(methodVisitor,info,twoVarOp.a(),true);  buildValueAccess(methodVisitor,info,twoVarOp.b(),true);  methodVisitor.visitInsn(twoVarOp.op());  info.pop(2);  if (twoVarOp.op() == Ins.TwoVarOp.Dadd || twoVarOp.op() == Ins.TwoVarOp.Ddiv || twoVarOp.op() == Ins.TwoVarOp.Dmul || twoVarOp.op() == Ins.TwoVarOp.Drem || twoVarOp.op() == Ins.TwoVarOp.Dsub || twoVarOp.op() == Ins.TwoVarOp.Ladd || twoVarOp.op() == Ins.TwoVarOp.Land || twoVarOp.op() == Ins.TwoVarOp.Ldiv || twoVarOp.op() == Ins.TwoVarOp.Lmul || twoVarOp.op() == Ins.TwoVarOp.Lor || twoVarOp.op() == Ins.TwoVarOp.Lrem || twoVarOp.op() == Ins.TwoVarOp.Lshl || twoVarOp.op() == Ins.TwoVarOp.Lshr || twoVarOp.op() == Ins.TwoVarOp.Lsub || twoVarOp.op() == Ins.TwoVarOp.Lushr || twoVarOp.op() == Ins.TwoVarOp.Lxor)   info.push(CodeInfo.Size._2); else   info.push(CodeInfo.Size._1);}  }
class C{  private File copy(String asset) throws IOException {  InputStream source=mAssetManager.open(asset);  File destinationFile=new File(mExternalDir,asset);  destinationFile.getParentFile().mkdirs();  FileOutputStream destination=new FileOutputStream(destinationFile);  byte[] buffer=new byte[1024];  int nread;  while ((nread=source.read(buffer)) != -1) {    if (nread == 0) {      nread=source.read();      if (nread < 0)       break;      destination.write(nread);      continue;    }    destination.write(buffer,0,nread);  }  destination.close();  return destinationFile;}  }
class C{  public long tryOptimisticRead(){  long s;  return (((s=state) & WBIT) == 0L) ? (s & SBITS) : 0L;}  }
class C{  public void testHasAttributeNS1() throws Throwable {  String localName="nomatch";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  public static void copyFile(File sourceFile,File destFile,boolean overwrite,boolean preserveLastModified) throws IOException {  copyFile(sourceFile,destFile,null,overwrite,preserveLastModified);}  }
class C{  @Override public Object clone(){  try {    Locale that=(Locale)super.clone();    return that;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetfirstchild.class,args);}  }
class C{  public static <K,V>KeyedObjectPool<K,V> erodingPool(final KeyedObjectPool<K,V> keyedPool){  return erodingPool(keyedPool,1f);}  }
class C{  public void verifyStoragePermissions(){  xlog("Verify permission storage entered");  int permission=ActivityCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE);  if (permission != PackageManager.PERMISSION_GRANTED) {    xlog("Prompting user for permission");    ActivityCompat.requestPermissions(this,PERMISSIONS_STORAGE,REQUEST_EXTERNAL_STORAGE);  } else {    xlog("We have permission");    handleSendImage(getIntent());  }}  }
class C{  public DelegatingStatement(final DelegatingConnection<?> c,final Statement s){  super(c);  _stmt=s;  _conn=c;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetnotationname.class,args);}  }
class C{  public Element next(){  if (elementStack == null) {    return first();  }  if (elementStack.isEmpty()) {    return null;  }  StackItem item=elementStack.peek();  Element elem=item.getElement();  int index=item.getIndex();  if (index + 1 < elem.getElementCount()) {    Element child=elem.getElement(index + 1);    if (child.isLeaf()) {      item.incrementIndex();    } else {      elementStack.push(new StackItem(child));    }    return child;  } else {    elementStack.pop();    if (!elementStack.isEmpty()) {      StackItem top=elementStack.peek();      top.incrementIndex();      return next();    }  }  return null;}  }
class C{  public PluginLogger(Plugin context){  super(context.getClass().getCanonicalName(),null);  String prefix=context.getDescription().getPrefix();  pluginName=prefix != null ? new StringBuilder().append("[").append(prefix).append("] ").toString() : "[" + context.getDescription().getName() + "] ";  setParent(context.getServer().getLogger());  setLevel(Level.ALL);}  }
class C{  void stopPeriodicLogSigner(){  if (signTask != null) {    Debug.message(logName + "Sign Thread being stopped");    signTask.cancel();    signTask=null;  }}  }
class C{  public ConditionDecision(boolean allowed,long timeToLive){  this.allowed=allowed;  this.timeToLive=timeToLive;}  }
class C{  protected String paramString(){  String iconString=(icon != null ? icon.toString() : "");  String initialValueString=(initialValue != null ? initialValue.toString() : "");  String messageString=(message != null ? message.toString() : "");  String messageTypeString;  if (messageType == ERROR_MESSAGE) {    messageTypeString="ERROR_MESSAGE";  } else   if (messageType == INFORMATION_MESSAGE) {    messageTypeString="INFORMATION_MESSAGE";  } else   if (messageType == WARNING_MESSAGE) {    messageTypeString="WARNING_MESSAGE";  } else   if (messageType == QUESTION_MESSAGE) {    messageTypeString="QUESTION_MESSAGE";  } else   if (messageType == PLAIN_MESSAGE) {    messageTypeString="PLAIN_MESSAGE";  } else   messageTypeString="";  String optionTypeString;  if (optionType == DEFAULT_OPTION) {    optionTypeString="DEFAULT_OPTION";  } else   if (optionType == YES_NO_OPTION) {    optionTypeString="YES_NO_OPTION";  } else   if (optionType == YES_NO_CANCEL_OPTION) {    optionTypeString="YES_NO_CANCEL_OPTION";  } else   if (optionType == OK_CANCEL_OPTION) {    optionTypeString="OK_CANCEL_OPTION";  } else   optionTypeString="";  String wantsInputString=(wantsInput ? "true" : "false");  return super.paramString() + ",icon=" + iconString+ ",initialValue="+ initialValueString+ ",message="+ messageString+ ",messageType="+ messageTypeString+ ",optionType="+ optionTypeString+ ",wantsInput="+ wantsInputString;}  }
class C{  public static BuildVersion instanceVersion() throws ConfigException {  final String buildInfo=ConfigurationFramework.getInstance().getInstancePath() + File.separator + "config"+ File.separator+ "buildinfo";  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(buildInfo));    final String s=reader.readLine();    if (s != null) {      return valueOf(s);    } else {      throw new ConfigException(ERR_BUILDVERSION_MALFORMED.get(buildInfo));    }  } catch (  IOException e) {    throw new ConfigException(ERR_BUILDVERSION_NOT_FOUND.get(buildInfo));  }catch (  final IllegalArgumentException e) {    throw new ConfigException(ERR_BUILDVERSION_MALFORMED.get(buildInfo));  } finally {    closeSilently(reader);  }}  }
class C{  public Map read(SSOToken token,String objName) throws SMSException, SSOException {  if (objName == null || objName.length() == 0) {    throw new IllegalArgumentException("SMSFlatFileObject.read: object name is null or empty.");  }  String objKey=objName.toLowerCase();  Map attrMap=null;  mRWLock.readRequest();  try {    String filepath=mNameMap.getProperty(objKey);    if (filepath == null) {      if (mDebug.messageEnabled()) {        mDebug.message("SMSFlatFileObject.read: object " + objName + " not found.");      }    } else {      File filehandle=new File(filepath);      Properties props=null;      try {        props=loadProperties(filehandle,objName);      } catch (      ServiceNotFoundException e) {      }      if (props != null) {        attrMap=new CaseInsensitiveHashMap();        Enumeration keys=props.propertyNames();        while (keys.hasMoreElements()) {          String key=(String)keys.nextElement();          String vals=props.getProperty(key);          if ((vals != null) && (vals.length() > 0)) {            attrMap.put(key,toValSet(key,vals));          }        }      }    }  }  finally {    mRWLock.readDone();  }  return attrMap;}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  public UnsupportedOperationException(String message){  super(message);}  }
class C{  public void addSubordinateTemplate(String name,int numEntries){  String[] newNames=new String[subordinateTemplateNames.length + 1];  int[] newCounts=new int[numEntriesPerTemplate.length + 1];  System.arraycopy(subordinateTemplateNames,0,newNames,0,subordinateTemplateNames.length);  System.arraycopy(numEntriesPerTemplate,0,newCounts,0,numEntriesPerTemplate.length);  newNames[subordinateTemplateNames.length]=name;  newCounts[numEntriesPerTemplate.length]=numEntries;  subordinateTemplateNames=newNames;  numEntriesPerTemplate=newCounts;}  }
class C{  public static void deleteStationInDb(Context context,int stationFreq,int stationType){  context.getContentResolver().delete(Station.CONTENT_URI,Station.COLUMN_STATION_FREQ + "=? AND " + Station.COLUMN_STATION_TYPE+ "=?",new String[]{String.valueOf(stationFreq),String.valueOf(stationType)});  Log.d(TAG,"FmRadioStation.deleteStationInDb: freq = " + stationFreq + ", type = "+ stationType);}  }
class C{  public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,true,isAlphaPremultiplied);}  }
class C{  public JFileChooser(FileSystemView fsv){  this((File)null,fsv);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new KrbServicePermissionCollection();}  }
class C{  private Promise<ActionResponse,ResourceException> generateNewPasswordEmail(final Context context,final ActionRequest request,final String realm,final RestSecurity restSecurity){  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  final JsonValue jsonBody=request.getContent();  try {    if (restSecurity == null) {      if (debug.warningEnabled()) {        debug.warning("Rest Security not created. restSecurity={}",restSecurity);      }      throw getException(UNAVAILABLE,"Rest Security Service not created");    }    if (!restSecurity.isForgotPassword()) {      if (debug.warningEnabled()) {        debug.warning("Forgot Password set to : {}",restSecurity.isForgotPassword());      }      throw getException(UNAVAILABLE,"Forgot password is not accessible.");    }    SSOToken adminToken=getSSOToken(RestUtils.getToken().getTokenID().toString());    Map<String,Set<String>> searchAttributes=getIdentityServicesAttributes(realm);    searchAttributes.putAll(getAttributeFromRequest(jsonBody));    List searchResults=identityServices.search(new CrestQuery("*"),searchAttributes,adminToken);    if (searchResults.isEmpty()) {      throw new NotFoundException("User not found");    } else     if (searchResults.size() > 1) {      throw new ConflictException("Multiple users found");    } else {      String username=(String)searchResults.get(0);      IdentityDetails identityDetails=identityServices.read(username,getIdentityServicesAttributes(realm),adminToken);      String email=null;      String uid=null;      for (      Map.Entry<String,Set<String>> attribute : asMap(identityDetails.getAttributes()).entrySet()) {        String attributeName=attribute.getKey();        if (MAIL.equalsIgnoreCase(attributeName)) {          if (attribute.getValue() != null && !attribute.getValue().isEmpty()) {            email=attribute.getValue().iterator().next();          }        } else         if (UNIVERSAL_ID.equalsIgnoreCase(attributeName)) {          if (attribute.getValue() != null && !attribute.getValue().isEmpty()) {            uid=attribute.getValue().iterator().next();          }        }      }      if (!isUserActive(uid)) {        throw new ForbiddenException("Request is forbidden for this user");      }      if (email == null || email.isEmpty()) {        throw new BadRequestException("No email provided in profile.");      }      HttpContext header=context.asContext(HttpContext.class);      StringBuilder deploymentURL=RestUtils.getFullDeploymentURI(header.getPath());      String subject=jsonBody.get("subject").asString();      String message=jsonBody.get("message").asString();      if (restSecurity == null) {        if (debug.warningEnabled()) {          debug.warning("Rest Security not created. restSecurity={}",restSecurity);        }        throw new NotFoundException("Rest Security Service not created");      }      Long tokenLifeTime=restSecurity.getForgotPassTLT();      org.forgerock.openam.cts.api.tokens.Token ctsToken=generateToken(email,username,tokenLifeTime,realm);      CTSHolder.getCTS().createAsync(ctsToken);      String confirmationId=Hash.hash(ctsToken.getTokenId() + username + SystemProperties.get(AM_ENCRYPTION_PWD));      String confURL=restSecurity.getForgotPasswordConfirmationUrl();      StringBuilder confURLBuilder=new StringBuilder(100);      if (confURL == null || confURL.isEmpty()) {        confURLBuilder.append(deploymentURL.append("/json/confirmation/forgotPassword").toString());      } else {        confURLBuilder.append(confURL);      }      String confirmationLink=confURLBuilder.append("?confirmationId=").append(requestParamEncode(confirmationId)).append("&tokenId=").append(requestParamEncode(ctsToken.getTokenId())).append("&username=").append(requestParamEncode(username)).append("&realm=").append(realm).toString();      sendNotification(email,subject,message,realm,confirmationLink);      String principalName=PrincipalRestUtils.getPrincipalNameFromServerContext(context);      if (debug.messageEnabled()) {        debug.message("IdentityResource.generateNewPasswordEmail :: ACTION of generate new password email " + " for username={} in realm={} performed by principalName={}",username,realm,principalName);      }    }    return newResultPromise(newActionResponse(result));  } catch (  NotFoundException e) {    debug.warning("Could not find user",e);    return e.asPromise();  }catch (  ResourceException re) {    debug.warning(re.getMessage(),re);    return re.asPromise();  }catch (  Exception e) {    debug.error("Internal error : Failed to send mail",e);    return new InternalServerErrorException("Failed to send mail",e).asPromise();  }}  }
class C{  public ArrayList<PlaLineInt> intersection(PlaSegmentInt p_other){  ArrayList<PlaLineInt> risul=new ArrayList<PlaLineInt>(3);  if (!bounding_box().intersects(p_other.bounding_box())) {    return risul;  }  PlaSide start_point_side=start_point().side_of(p_other.middle);  PlaSide end_point_side=end_point().side_of(p_other.middle);  if (start_point_side == PlaSide.COLLINEAR && end_point_side == PlaSide.COLLINEAR) {    PlaSegmentInt this_sorted=sort_endpoints_in_x_y();    PlaSegmentInt other_sorted=p_other.sort_endpoints_in_x_y();    PlaSegmentInt left_line;    PlaSegmentInt right_line;    if (this_sorted.start_point().compare_x_y(other_sorted.start_point()) <= 0) {      left_line=this_sorted;      right_line=other_sorted;    } else {      left_line=other_sorted;      right_line=this_sorted;    }    int cmp=left_line.end_point().compare_x_y(right_line.start_point());    if (cmp < 0) {      return risul;    }    if (cmp == 0) {      risul.add(left_line.end);      return risul;    }    risul.add(right_line.start);    if (right_line.end_point().compare_x_y(left_line.end_point()) >= 0)     risul.add(left_line.end); else     risul.add(right_line.end);    return risul;  }  if (start_point_side == end_point_side || p_other.start_point().side_of(middle) == p_other.end_point().side_of(middle)) {    return risul;  }  risul.add(p_other.middle);  return risul;}  }
class C{  public static boolean isEmptyOrWhitespace(int symbol){  return symbol == CR || symbol == LF || symbol == SP;}  }
class C{  public RuleNet(String p_name,int p_subnet_number,int p_no,RuleNets p_net_list,boolean p_contains_plane){  parent=p_net_list;  name=p_name;  subnet_number=p_subnet_number;  net_number=p_no;  contains_plane=p_contains_plane;  net_class=p_net_list.get_board().brd_rules.get_default_net_class();}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference badEntityRef;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("foo");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public static void main(final String[] args){  if (args.length != 3) {    System.err.println("Usage: host port base-dn");    System.err.println("For example: localhost 1389 dc=example,dc=com");    System.exit(1);  }  String host=args[0];  int port=Integer.parseInt(args[1]);  String baseDN=args[2];  Console c=System.console();  if (c == null) {    System.err.println("No console.");    System.exit(1);  }  String mail=c.readLine("Email address: ");  char[] password=c.readPassword("Password: ");  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    SearchResultEntry entry=connection.searchSingleEntry(baseDN,SearchScope.WHOLE_SUBTREE,Filter.equality("mail",mail).toString(),"cn");    DN bindDN=entry.getName();    connection.bind(bindDN.toString(),password);    String cn=entry.getAttribute("cn").firstValueAsString();    System.out.println("Hello, " + cn + "!");  } catch (  final LdapException e) {    System.err.println("Failed to bind.");    System.exit(e.getResult().getResultCode().intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public void finalizeListenerManager(){  DirectoryServer.deregisterInternalPlugin(plugin);  DirectoryServer.deregisterBackendInitializationListener(this);  DirectoryServer.deregisterAlertGenerator(this);}  }
class C{  public void validate() throws SSOException {  try {    if (ldapConnect) {      return;    }    SessionState state=session.getState(true);    if (state != SessionState.VALID) {      throw new SSOException(SSOProviderBundle.rbName,"invalidstate",null);    }  } catch (  Exception e) {    throw new SSOException(e);  }}  }
class C{  public AMPreCallBackException(SSOToken token,String errorCode,UMSException ue){  super(token,errorCode,ue);}  }
class C{  protected void onLoadMore(WXScrollView scrollView,int x,int y){  try {    String offset=mDomObj.attr.getLoadMoreOffset();    if (TextUtils.isEmpty(offset)) {      return;    }    int contentH=scrollView.getChildAt(0).getHeight();    int scrollerH=scrollView.getHeight();    int offScreenY=contentH - y - scrollerH;    if (offScreenY < Integer.parseInt(offset)) {      if (WXEnvironment.isApkDebugable()) {        WXLogUtils.d("[WXScroller-onScroll] offScreenY :" + offScreenY);      }      if (mContentHeight != contentH) {        WXSDKManager.getInstance().fireEvent(mInstanceId,mDomObj.ref,WXEventType.LIST_LOAD_MORE);        mContentHeight=contentH;      }    }  } catch (  Exception e) {    WXLogUtils.d("[WXScroller-onScroll] " + WXLogUtils.getStackTrace(e));  }}  }
class C{  public boolean containsValue(long val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isInteger() && num.intValue() == val)       return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String localElemName;  String localQElemName;  String localAttrName;  String localQAttrName;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  localElemName=element.getLocalName();  localQElemName=qelement.getLocalName();  localAttrName=attr.getLocalName();  localQAttrName=qattr.getLocalName();  assertEquals("nodegetlocalname03_localElemName","elem",localElemName);  assertEquals("nodegetlocalname03_localQElemName","qelem",localQElemName);  assertEquals("nodegetlocalname03_localAttrName","attr",localAttrName);  assertEquals("nodegetlocalname03_localQAttrName","qattr",localQAttrName);}  }
class C{  public boolean isGroupMembershipSearchIndexEnabled(){  return attrCollector.isGroupMembershipSearchIndexEnabled();}  }
class C{  public TransactionUnavailableException(){  super();}  }
class C{  public static Byte[] string2ByteArray(String s){  byte[] b=s.getBytes();  Byte[] barray=new Byte[b.length];  for (int index=0; index < b.length; index++) {    barray[index]=new Byte(b[index]);  }  return barray;}  }
class C{  public void testNegPos(){  String numA="-27384627835298756289327365";  String numB="0";  String res="-27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  @Override public int update(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException {  int[] outlen=new int[1];  int retVal=OpenSslNativeJna.EVP_CipherUpdate(context,outBuffer,outlen,inBuffer,inBuffer.remaining());  throwOnError(retVal);  int len=outlen[0];  inBuffer.position(inBuffer.limit());  outBuffer.position(outBuffer.position() + len);  return len;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node nameNode;  Node firstChild;  String childValue;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  nameNode=nameList.item(3);  firstChild=nameNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("documentGetElementsByTagNameValueAssert","Jeny Oconnor",childValue);}  }
class C{  public int sqoopImport(HadoopConfig conf) throws FileNotFoundException {  int retval=0;  String sqoopCmd="";  String credsFileName="hdi_" + conf.getDatabaseHost() + "_"+ conf.getSourceName()+ "_"+ conf.getTableOwner()+ ".pswd";  if (conf.getSqoopFileFormat().contains("avro")) {    sqoopCmd="sqoop import " + SQ_IMPORT_PARAM_CREDS + "="+ JCEKS+ "/"+ conf.getQueueName()+ "/HDI_Password_Repository/"+ credsFileName+ " -D mapreduce.job.queuename="+ conf.getQueueName()+ " --connect "+ conf.getDBConnectString()+ " --username "+ conf.getUserName()+ " --password-alias "+ credsFileName+ " --query "+ "\""+ conf.getQueryMilestone()+ "\""+ " --target-dir "+ conf.getTargetDirectory()+ " "+ conf.getSqoopFileFormat()+ " -m 1";  } else   if (conf.getSqoopFileFormat().contains("text")) {    sqoopCmd="sqoop import " + SQ_IMPORT_PARAM_CREDS + "="+ JCEKS+ "/"+ conf.getQueueName()+ "/HDI_Password_Repository/"+ credsFileName+ " -D mapreduce.job.queuename="+ conf.getQueueName()+ " --connect "+ conf.getDBConnectString()+ " --username "+ conf.getUserName()+ " --password-alias "+ credsFileName+ " --fields-terminated-by '\001'"+ " --query "+ "\""+ conf.getQueryMilestone()+ "\""+ " --target-dir "+ conf.getTargetDirectory()+ " "+ conf.getSqoopFileFormat()+ " -m 1";  } else   if (conf.getSqoopFileFormat().contains("parquet")) {    sqoopCmd="sqoop import " + SQ_IMPORT_PARAM_CREDS + "="+ JCEKS+ "/"+ conf.getQueueName()+ "/HDI_Password_Repository/"+ credsFileName+ " -D mapreduce.job.queuename="+ conf.getQueueName()+ " --connect "+ conf.getDBConnectString()+ " --username "+ conf.getUserName()+ " --password-alias "+ credsFileName+ " --query "+ "\""+ conf.getQueryMilestone()+ "\""+ " --target-dir "+ conf.getTargetDirectory()+ " "+ conf.getSqoopFileFormat()+ " -m 1";  }  logger.debug("Sqoop Command " + sqoopCmd);  int output=Utility.executeSSH(sqoopCmd);  if (output != 0) {    logger.error("Error at sqoop. Please check logs");    DirectoryHandler.cleanUpWorkspace(conf);    DirectoryHandler.cleanUpLanding(conf);    throw new Error();  }  return retval;}  }
class C{  public static Foo toModel(FooSoap soapModel){  if (soapModel == null) {    return null;  }  Foo model=new FooImpl();  model.setUuid(soapModel.getUuid());  model.setFooId(soapModel.getFooId());  model.setGroupId(soapModel.getGroupId());  model.setCompanyId(soapModel.getCompanyId());  model.setUserId(soapModel.getUserId());  model.setUserName(soapModel.getUserName());  model.setCreateDate(soapModel.getCreateDate());  model.setModifiedDate(soapModel.getModifiedDate());  model.setField1(soapModel.getField1());  model.setField2(soapModel.getField2());  model.setField3(soapModel.getField3());  model.setField4(soapModel.getField4());  model.setField5(soapModel.getField5());  return model;}  }
class C{  public void append(String s){  content+=s;}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  final Request request=requestEvent.getRequest();  final Dialog dialog=requestEvent.getDialog();  try {    final Response response=messageFactory.createResponse(200,request);    if (serverTransactionId == null) {      serverTransactionId=((SipProvider)requestEvent.getSource()).getNewServerTransaction(request);    }    serverTransactionId.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  int width=bm.getWidth();  int height=bm.getHeight();  int[] pix=new int[width * height];  byte[][] mt=bm.getArray();  for (int y=0; y < height; ++y) {    byte[] line=mt[y];    for (int x=0; x < width; ++x) {      pix[y * width + x]=line[x] == 0 ? f : g;    }  }  java.awt.Image img=canvas.createImage(new java.awt.image.MemoryImageSource(width,height,pix,0,width));  return img;}  }
class C{  private void fillReservoir(int min){  if (pos >= reservoir.length - min) {    try {      IoUtils.readFully(stream,reservoir,0,reservoir.length);    } catch (    IOException e) {      throw new RuntimeException("failed to fill reservoir",e);    }    pos=0;  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryForHash(Segment<K,V> seg,int h){  HashEntry<K,V>[] tab;  return (seg == null || (tab=seg.table) == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);}  }
class C{  public void test_read_$CII_Exception() throws IOException {  pbr=new PushbackReader(new StringReader(pbString),10);  char[] nullCharArray=null;  char[] charArray=new char[10];  try {    pbr.read(nullCharArray,0,1);    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    pbr.read(charArray,0,-1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,-1,0);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,charArray.length + 1,0);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,charArray.length,1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,1,charArray.length);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,0,charArray.length + 1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  pbr.close();  try {    pbr.read(charArray,0,1);    fail("should throw IOException");  } catch (  IOException e) {  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("<wst:RequestSecurityTokenResponse " + "xmlns:wst=\"http://schemas.xmlsoap.org/ws/2005/02/trust\">").append(token.toString()).append("<wsp:AppliesTo ").append("xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">").append("<wsa:EndpointReference xmlns:").append("wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">").append("<wsa:Address>" + appliesTo + "</wsa:Address>").append("</wsa:EndpointReference>").append("</wsp:AppliesTo>").append("</wst:RequestSecurityTokenResponse>");  return buffer.toString();}  }
class C{  public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  public void _write(OutputStream output){  ((org.omg.CORBA_2_3.portable.OutputStream)output).write_value(value);}  }
class C{  public FileAlterationObserver(String directoryName){  this(new File(directoryName));}  }
class C{  public void validateSession(InternalSession internalSession,SessionID sid) throws SessionException {  if (!sid.equals(internalSession.getID()) && internalSession.getRestrictionForToken(sid) == null) {    throw new IllegalArgumentException("Session id mismatch");  }  if (internalSession.getState() != SessionState.VALID) {    if (internalSession.isTimedOut()) {      throw new SessionTimedOutException(MessageFormat.format(ERROR_FORMAT,SessionBundle.getString(SESSION_TIMED_OUT),sid));    } else {      throw new SessionException(MessageFormat.format(ERROR_FORMAT,SessionBundle.getString(INVALID_SESSION_STATE),sid));    }  }}  }
class C{  void nextFirstAndLastNames(){  firstName=firstNames[firstNameIndex++];  lastName=lastNames[lastNameIndex++];  if (nameUniquenessCounter > 1) {    lastName+=nameUniquenessCounter;  }  if (firstNameIndex >= firstNames.length) {    firstNameIndex=0;    if (firstNames.length > lastNames.length) {      lastNameIndex=++nameLoopCounter;      if (lastNameIndex >= lastNames.length) {        lastNameIndex=0;        nameUniquenessCounter++;      }    }  }  if (lastNameIndex >= lastNames.length) {    lastNameIndex=0;    if (lastNames.length > firstNames.length) {      firstNameIndex=++nameLoopCounter;      if (firstNameIndex >= firstNames.length) {        firstNameIndex=0;        nameUniquenessCounter++;      }    }  }}  }
class C{  public int winding_number_after_closing(){  if (corner_size() < 2)   return 0;  PlaVectorInt first_side_vector=corner(1).difference_by(corner(0));  PlaVectorInt prev_side_vector=first_side_vector;  int corner_count=corner_size();  if (corner(0).equals(corner(corner_count - 1))) {    --corner_count;  }  double angle_sum=0;  for (int index=1; index <= corner_count; ++index) {    PlaVectorInt next_side_vector;    if (index == corner_count - 1) {      next_side_vector=corner(0).difference_by(corner(index));    } else     if (index == corner_count) {      next_side_vector=first_side_vector;    } else {      next_side_vector=corner(index + 1).difference_by(corner(index));    }    angle_sum+=prev_side_vector.angle_approx(next_side_vector);    prev_side_vector=next_side_vector;  }  angle_sum/=2.0 * Math.PI;  if (Math.abs(angle_sum) < 0.5) {    System.err.println("Polypoint.winding_number_after_closing: winding number != 0 expected");  }  return (int)Math.round(angle_sum);}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  HttpServletRequest request=getHttpServletRequest();  if (checkRemoteUserOnly) {    Enumeration headers=request.getHeaderNames();    while (headers.hasMoreElements()) {      String headerName=(String)headers.nextElement();      if (headerName.equals(remoteUserHeader)) {        userId=request.getHeader(headerName);      }    }    if (userId == null) {      throw new AuthLoginException("No remote user header found");    }    return ISAuthConstants.LOGIN_SUCCEED;  }  Cookie[] cookies=request.getCookies();  String OAMCookie=null;  String principal=null;  boolean cookieFound=false;  for (int i=0; i < cookies.length; i++) {    Cookie cookie=cookies[i];    if (cookie.getName().equals(oamCookieName)) {      cookieFound=true;      String value=cookie.getValue();      System.out.println("cookie value" + value);      value=value.replaceAll(" ","+");      value=value.replaceAll("%3D","=");      System.out.println("cookie value afer replacing: " + value);      try {        ObUserSession userSession=new ObUserSession(value);        if ((userSession != null) && (userSession.getStatus() == ObUserSession.LOGGEDIN)) {          userId=userSession.getUserIdentity();        } else {          System.out.println("Oblix session decode failed");          throw new AuthLoginException("OblixSession decode failed");        }      } catch (      Exception ex) {        ex.printStackTrace();        throw new AuthLoginException("OblixSession decode failed");      }    }  }  if (!cookieFound) {    throw new AuthLoginException("Authentication failed. " + "No Oblix cookie found");  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public boolean isAccepted(){  return accepted;}  }
class C{  public LogSSOTokenDetails(){}  }
class C{  private boolean isModified(){  return !getTypes().equals(index.getTypes()) || !String.valueOf(index.getEntryLimit()).equals(entryLimit.getText());}  }
class C{  public final int readUnsignedShort() throws IOException {  return ((int)readShort()) & 0xffff;}  }
class C{  public static void createChildren(DefaultMutableTreeNode parent,Object children){  if (children instanceof Vector) {    Vector<?> childVector=(Vector)children;    for (int counter=0, maxCounter=childVector.size(); counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childVector.elementAt(counter),childVector.elementAt(counter)));  } else   if (children instanceof Hashtable) {    Hashtable<?,?> childHT=(Hashtable)children;    Enumeration<?> keys=childHT.keys();    Object aKey;    while (keys.hasMoreElements()) {      aKey=keys.nextElement();      parent.add(new DynamicUtilTreeNode(aKey,childHT.get(aKey)));    }  } else   if (children instanceof Object[]) {    Object[] childArray=(Object[])children;    for (int counter=0, maxCounter=childArray.length; counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childArray[counter],childArray[counter]));  }}  }
class C{  public boolean isPropertyListed(SSOToken caller,String realm,Collection<String> propertyNames) throws DelegationException, SSOException {  return userHasReadAdminPrivs(caller,realm) || getWhitelist(realm).containsAll(propertyNames);}  }
class C{  public PBKDF2PasswordStorageScheme(){  super();}  }
class C{  private void readDoctype(boolean saveDtdText) throws IOException, XmlPullParserException {  read(START_DOCTYPE);  int startPosition=-1;  if (saveDtdText) {    bufferCapture=new StringBuilder();    startPosition=position;  }  try {    skip();    rootElementName=readName();    readExternalId(true,true);    skip();    if (peekCharacter() == '[') {      readInternalSubset();    }    skip();  }  finally {    if (saveDtdText) {      bufferCapture.append(buffer,0,position);      bufferCapture.delete(0,startPosition);      text=bufferCapture.toString();      bufferCapture=null;    }  }  read('>');}  }
class C{  public boolean hasBOM() throws IOException {  return getBOM() != null;}  }
class C{  public static boolean isSuppressed(){  return token != null;}  }
class C{  static void doPredict(BufferedReader reader,Writer writer,Model model) throws IOException {  int correct=0;  int total=0;  double error=0;  double sump=0, sumt=0, sumpp=0, sumtt=0, sumpt=0;  int nr_class=model.getNrClass();  double[] prob_estimates=null;  int n;  int nr_feature=model.getNrFeature();  if (model.bias >= 0)   n=nr_feature + 1; else   n=nr_feature;  if (flag_predict_probability && !model.isProbabilityModel()) {    throw new IllegalArgumentException("probability output is only supported for logistic regression");  }  Formatter out=new Formatter(writer);  if (flag_predict_probability) {    int[] labels=model.getLabels();    prob_estimates=new double[nr_class];    printf(out,"labels");    for (int j=0; j < nr_class; j++)     printf(out," %d",labels[j]);    printf(out,"\n");  }  String line=null;  while ((line=reader.readLine()) != null) {    List<Feature> x=new ArrayList<Feature>();    StringTokenizer st=new StringTokenizer(line," \t\n");    double target_label;    try {      String label=st.nextToken();      target_label=atof(label);    } catch (    NoSuchElementException e) {      throw new RuntimeException("Wrong input format at line " + (total + 1),e);    }    while (st.hasMoreTokens()) {      String[] split=COLON.split(st.nextToken(),2);      if (split == null || split.length < 2) {        throw new RuntimeException("Wrong input format at line " + (total + 1));      }      try {        int idx=atoi(split[0]);        double val=atof(split[1]);        if (idx <= nr_feature) {          Feature node=new FeatureNode(idx,val);          x.add(node);        }      } catch (      NumberFormatException e) {        throw new RuntimeException("Wrong input format at line " + (total + 1),e);      }    }    if (model.bias >= 0) {      Feature node=new FeatureNode(n,model.bias);      x.add(node);    }    Feature[] nodes=new Feature[x.size()];    nodes=x.toArray(nodes);    double predict_label;    if (flag_predict_probability) {      assert prob_estimates != null;      predict_label=Linear.predictProbability(model,nodes,prob_estimates);      printf(out,"%g",predict_label);      for (int j=0; j < model.nr_class; j++)       printf(out," %g",prob_estimates[j]);      printf(out,"\n");    } else {      predict_label=Linear.predict(model,nodes);      printf(out,"%g\n",predict_label);    }    if (predict_label == target_label) {      ++correct;    }    error+=(predict_label - target_label) * (predict_label - target_label);    sump+=predict_label;    sumt+=target_label;    sumpp+=predict_label * predict_label;    sumtt+=target_label * target_label;    sumpt+=predict_label * target_label;    ++total;  }  if (model.solverType.isSupportVectorRegression()) {    info("Mean squared error = %g (regression)%n",error / total);    info("Squared correlation coefficient = %g (regression)%n",((total * sumpt - sump * sumt) * (total * sumpt - sump * sumt)) / ((total * sumpp - sump * sump) * (total * sumtt - sumt * sumt)));  } else {    info("Accuracy = %g%% (%d/%d)%n",(double)correct / total * 100,correct,total);  }}  }
class C{  public void appendBitVector(BitVector bits){  int size=bits.size();  for (int i=0; i < size; ++i) {    appendBit(bits.at(i));  }}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  retval.append(Integer.toString(expires));  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  public boolean equals(Object o){  if (o instanceof SampleSubject) {    return (true);  }  return (false);}  }
class C{  public static long readUInt64(ByteBuffer b){  long result=0;  result+=(readUBEInt32(b) << 32);  result+=readUBEInt32(b);  return result;}  }
class C{  public RouteTracker(HttpRoute route){  this(route.getTargetHost(),route.getLocalAddress());}  }
class C{  @Override public List<ImageConfiguration> customizeConfig(List<ImageConfiguration> configs){  platformMode=clusterAccess.resolvePlatformMode(mode,log);  if (platformMode == PlatformMode.openshift) {    log.info("Using [[B]]OpenShift[[B]] build with strategy [[B]]%s[[B]]",buildStrategy.getLabel());  } else {    log.info("Building Docker image in [[B]]Kubernetes[[B]] mode");  }  try {    return GeneratorManager.generate(configs,extractGeneratorConfig(),project,session,goalFinder,"fabric8:build",log,platformMode,buildStrategy,useProjectClasspath);  } catch (  MojoExecutionException e) {    throw new IllegalArgumentException("Cannot extract generator config: " + e,e);  }}  }
class C{  public boolean isUserExists(String userDN,String metaAlias) throws FSRemoteException {  try {    FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);synchronized (sessionMgr) {      FSUtils.debug.message("About to call getSessionList");      List sessionList=sessionMgr.getSessionList(userDN);      if (sessionList == null) {        FSUtils.debug.message("AMC:isUserExists:List is empty");        return false;      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("AMC:isUserExists: List is not empty User found: " + userDN);        }        return true;      }    }  } catch (  Exception e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("AMC.isUserExists:",e);    }    throw new FSRemoteException(e.getMessage());  }}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  protected StringBuilder encodeBody(StringBuilder retval){  retval.append(Integer.toString(expires));  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  public void showFloat(){  if (mFloatMenu != null)   mFloatMenu.show();}  }
class C{  void removeAt(final int removeIndex){  final Object[] items=this.items;  if (removeIndex == takeIndex) {    items[takeIndex]=null;    if (++takeIndex == items.length)     takeIndex=0;    count--;    if (itrs != null)     itrs.elementDequeued();  } else {    final int putIndex=this.putIndex;    for (int i=removeIndex; ; ) {      int next=i + 1;      if (next == items.length)       next=0;      if (next != putIndex) {        items[i]=items[next];        i=next;      } else {        items[i]=null;        this.putIndex=i;        break;      }    }    count--;    if (itrs != null)     itrs.removedAt(removeIndex);  }  notFull.signal();}  }
class C{  public static int[][] createSparseMatrix(CellLayout iconLayout,CellLayout hotseatLayout,boolean isHorizontal,int allappsiconRank,boolean includeAllappsicon){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup hotseatParent=hotseatLayout.getShortcutsAndWidgets();  int m, n;  if (isHorizontal) {    m=iconLayout.getCountX();    n=iconLayout.getCountY() + hotseatLayout.getCountY();  } else {    m=iconLayout.getCountX() + hotseatLayout.getCountX();    n=iconLayout.getCountY();  }  int[][] matrix=createFullMatrix(m,n);  for (int i=0; i < iconParent.getChildCount(); i++) {    int cx=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellY;    matrix[cx][cy]=i;  }  for (int i=hotseatParent.getChildCount() - 1; i >= (includeAllappsicon ? 0 : 1); i--) {    int delta=0;    if (isHorizontal) {      int cx=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellX;      if ((includeAllappsicon && cx >= allappsiconRank) || (!includeAllappsicon && cx > allappsiconRank)) {        delta=-1;      }      matrix[cx + delta][iconLayout.getCountY()]=iconParent.getChildCount() + i;    } else {      int cy=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellY;      if ((includeAllappsicon && cy >= allappsiconRank) || (!includeAllappsicon && cy > allappsiconRank)) {        delta=-1;      }      matrix[iconLayout.getCountX()][cy + delta]=iconParent.getChildCount() + i;    }  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  private BigInteger computeCRTFromCombination(int[] usedOracleEquations,BigInteger[] congs,BigInteger[] modulis){  BigInteger[] usedCongs=new BigInteger[usedOracleEquations.length];  BigInteger[] usedModulis=new BigInteger[usedOracleEquations.length];  for (int i=0; i < usedOracleEquations.length; i++) {    usedCongs[i]=congs[usedOracleEquations[i]];    usedModulis[i]=modulis[usedOracleEquations[i]];  }  return MathHelper.CRT(usedCongs,usedModulis);}  }
class C{  public ID3v23Frame(ByteBuffer byteBuffer,String loggingFilename) throws InvalidFrameException, InvalidDataTypeException {  setLoggingFilename(loggingFilename);  read(byteBuffer);}  }
class C{  private final void moveRowGapTo(int where){  if (where == mRowGapStart) {    return;  } else   if (where > mRowGapStart) {    int moving=where + mRowGapLength - (mRowGapStart + mRowGapLength);    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=gapend; i < gapend + moving; i++) {      int destrow=i - gapend + mRowGapStart;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  } else {    int moving=mRowGapStart - where;    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=where + moving - 1; i >= where; i--) {      int destrow=i - where + gapend - moving;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  }  mRowGapStart=where;}  }
class C{  public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void save(java.io.ObjectOutputStream p_object_stream){  super.save(p_object_stream);  manual_rule_window.save(p_object_stream);}  }
class C{  public boolean isHumanReadable(){  return impl.isHumanReadable();}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(funcName,argVec,methodKey,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,funcName}));    }  }  return result;}  }
class C{  private ConnectionWithControls findConnectionForDisplayedEntry(BasicNode node,boolean isConfigurationNode) throws LdapException {  if (isFollowReferrals() && node.getRemoteUrl() != null) {    return connectionPool.getConnection(node.getRemoteUrl());  }  return findConnectionForLocalEntry(node,isConfigurationNode);}  }
class C{  public boolean isWorking(){  return code == Code.WORKING;}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  public AdminEndpoint(AdminEndpointCfg configuration,ServerContext serverContext){  super(configuration,serverContext);}  }
class C{  private boolean isMemberOfOrg(String org,DN userDN,String tokenID){  DN orgDN=DN.valueOf(org);  boolean orgMatch=userDN.isInScopeOf(orgDN,SearchScope.SUBORDINATES);  if (debug.messageEnabled()) {    String member=(orgMatch) ? "is member of" : "is not a member of";    debug.message("Organization.isMemberOfGroup(): User " + userDN.toString() + " "+ member+ " the Organization "+ org+ ", adding to Subject eval cache");  }  SubjectEvaluationCache.addEntry(tokenID,ldapServer,org,orgMatch);  return orgMatch;}  }
class C{  private void dispatchCallbackInvoke(TransactInfo transactInfo,String paramMarshalling){  mJsBridge.dispatchClientCallback(transactInfo,paramMarshalling);}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){  CertPathValidator validatorLocal=null;  CertificateFactory factoryLocal=null;  KeyStore rootKeyStoreLocal=null;  TrustedCertificateStore trustedCertificateStoreLocal=null;  TrustedCertificateIndex trustedCertificateIndexLocal=null;  X509Certificate[] acceptedIssuersLocal=null;  Exception errLocal=null;  try {    validatorLocal=CertPathValidator.getInstance("PKIX");    factoryLocal=CertificateFactory.getInstance("X509");    if ("AndroidCAStore".equals(keyStore.getType())) {      rootKeyStoreLocal=keyStore;      trustedCertificateStoreLocal=new TrustedCertificateStore();      acceptedIssuersLocal=null;      trustedCertificateIndexLocal=new TrustedCertificateIndex();    } else {      rootKeyStoreLocal=null;      trustedCertificateStoreLocal=null;      acceptedIssuersLocal=acceptedIssuers(keyStore);      trustedCertificateIndexLocal=new TrustedCertificateIndex(trustAnchors(acceptedIssuersLocal));    }  } catch (  Exception e) {    errLocal=e;  }  if (manager != null) {    this.pinManager=manager;  } else {    try {      pinManager=new CertPinManager(trustedCertificateStoreLocal);    } catch (    PinManagerException e) {      throw new SecurityException("Could not initialize CertPinManager",e);    }  }  this.rootKeyStore=rootKeyStoreLocal;  this.trustedCertificateStore=trustedCertificateStoreLocal;  this.validator=validatorLocal;  this.factory=factoryLocal;  this.trustedCertificateIndex=trustedCertificateIndexLocal;  this.acceptedIssuers=acceptedIssuersLocal;  this.err=errLocal;}  }
class C{  void removeMin(){  queue[1]=queue[size];  queue[size--]=null;  fixDown(1);}  }
class C{  public void push(double val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public static void unbindThread(Object obj,Object token){  if (ContextAccessController.checkSecurityToken(obj,token)) {    threadBindings.remove(Thread.currentThread());    threadObjectBindings.remove(Thread.currentThread());  }}  }
class C{  void scheduleToTimerPool(){  if (sessionPollerPool.isPollingEnabled()) {    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;    if (sessionPollerPool.getCacheBasedPolling()) {      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);    }    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);  } else {    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Element createBasic128Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128ElementImpl();}  }
class C{  void removedAt(int removedIndex){  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.removedAt(removedIndex)) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  private final static boolean isLaoBaseConsonant(int ch){  return (ch >= 0x0e81) && (ch <= 0x0eae);}  }
class C{  protected Rectangle rectangleForCurrentValue(){  int width=comboBox.getWidth();  int height=comboBox.getHeight();  Insets insets=getInsets();  int buttonSize=height - (insets.top + insets.bottom);  if (arrowButton != null) {    buttonSize=arrowButton.getWidth();  }  if (BasicGraphicsUtils.isLeftToRight(comboBox)) {    return new Rectangle(insets.left,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));  } else {    return new Rectangle(insets.left + buttonSize,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));  }}  }
class C{  public synchronized StringBuffer append(char[] chars){  append0(chars);  return this;}  }
class C{  public void remove(int index){  Component c=getComponent(index);  super.remove(index);  if (c != null && !(c instanceof JComponent)) {    getComponentToLayer().remove(c);  }  validateOptimizedDrawing();}  }
class C{  public void revalidate(){  if (getParent() == null) {    return;  }  if (SunToolkit.isDispatchThreadForAppContext(this)) {    invalidate();    RepaintManager.currentManager(this).addInvalidComponent(this);  } else {    if (revalidateRunnableScheduled.getAndSet(true)) {      return;    }    SunToolkit.executeOnEventHandlerThread(this,null);  }}  }
class C{  public void insert(String key,char val){  int len=key.length() + 1;  if (freenode + len > eq.length) {    redimNodeArrays(eq.length + BLOCK_SIZE);  }  char[] strkey=new char[len--];  key.getChars(0,len,strkey,0);  strkey[len]=0;  root=insert(root,strkey,0,val);}  }
class C{  public String toString(){  return object == null ? "null" : object.toString();}  }
class C{  public CharSequence evaluate(CharSequence url,Resolver resolver){  Pattern pattern=this.pattern.get();  if (pattern == null) {    int flags=0;    if (isNocase()) {      flags|=Pattern.CASE_INSENSITIVE;    }    pattern=Pattern.compile(patternString,flags);    this.pattern.set(pattern);  }  Matcher matcher=pattern.matcher(url);  if (!matcher.matches()) {    return null;  }  boolean done=false;  boolean rewrite=true;  Matcher lastMatcher=null;  int pos=0;  while (!done) {    if (pos < conditions.length) {      rewrite=conditions[pos].evaluate(matcher,lastMatcher,resolver);      if (rewrite) {        Matcher lastMatcher2=conditions[pos].getMatcher();        if (lastMatcher2 != null) {          lastMatcher=lastMatcher2;        }        while (pos < conditions.length && conditions[pos].isOrnext()) {          pos++;        }      } else       if (!conditions[pos].isOrnext()) {        done=true;      }      pos++;    } else {      done=true;    }  }  if (rewrite) {    if (isEnv()) {      for (int i=0; i < envSubstitution.size(); i++) {        envResult.get(i).set(envSubstitution.get(i).evaluate(matcher,lastMatcher,resolver));      }    }    if (isCookie()) {      cookieResult.set(cookieSubstitution.evaluate(matcher,lastMatcher,resolver));    }    if (substitution != null) {      return substitution.evaluate(matcher,lastMatcher,resolver);    } else {      return url;    }  } else {    return null;  }}  }
class C{  public void decompileFromArchive(String archivePath,String packege,String className){  start=System.currentTimeMillis();  File workingDir=new File(JavaDecompilerPlugin.getDefault().getPreferenceStore().getString(JavaDecompilerPlugin.TEMP_DIR) + "/" + System.currentTimeMillis());  try {    workingDir.mkdirs();    JarClassExtractor.extract(archivePath,packege,className,true,workingDir.getAbsolutePath());    decompile(workingDir.getAbsolutePath(),"",className);  } catch (  Exception e) {    excList.add(e);    return;  } finally {    deltree(workingDir);  }}  }
class C{  @Override public RepoSearchResults search(SSOToken token,IdType type,CrestQuery crestQuery,int maxTime,int maxResults,Set<String> returnAttrs,boolean returnAllAttrs,int filterOp,Map<String,Set<String>> avPairs,boolean recursive) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("search invoked with type: " + type + " crestQuery: "+ crestQuery+ " avPairs: "+ avPairs+ " maxTime: "+ maxTime+ " maxResults: "+ maxResults+ " returnAttrs: "+ returnAttrs+ " returnAllAttrs: "+ returnAllAttrs+ " filterOp: "+ filterOp+ " recursive: "+ recursive);  }  DN baseDN=getBaseDN(type);  SearchScope scope=defaultScope;  String searchAttr=getSearchAttribute(type);  String[] attrs;  Filter first;  if (crestQuery.hasQueryId()) {    first=Filter.valueOf(searchAttr + "=" + crestQuery.getQueryId());  } else {    first=crestQuery.getQueryFilter().accept(new LdapFromJsonQueryFilterVisitor(),null);  }  Filter filter=Filter.and(first,getObjectClassFilter(type));  Filter tempFilter=constructFilter(filterOp,avPairs);  if (tempFilter != null) {    filter=Filter.and(tempFilter,filter);  }  if (returnAllAttrs || (returnAttrs != null && returnAttrs.contains("*"))) {    Set<String> predefinedAttrs=getDefinedAttributes(type);    predefinedAttrs.add(searchAttr);    attrs=predefinedAttrs.toArray(new String[predefinedAttrs.size()]);    returnAllAttrs=true;  } else   if (returnAttrs != null && !returnAttrs.isEmpty()) {    returnAttrs.add(searchAttr);    attrs=returnAttrs.toArray(new String[returnAttrs.size()]);  } else {    attrs=new String[]{searchAttr};  }  SearchRequest searchRequest=LDAPRequests.newSearchRequest(baseDN,scope,filter,attrs);  searchRequest.setSizeLimit(maxResults < 1 ? defaultSizeLimit : maxResults);  searchRequest.setTimeLimit(maxTime < 1 ? defaultTimeLimit : maxTime);  Connection conn=null;  Set<String> names=new HashSet<>();  Map<String,Map<String,Set<String>>> entries=new HashMap<>();  int errorCode=RepoSearchResults.SUCCESS;  try {    conn=createConnection();    ConnectionEntryReader reader=conn.search(searchRequest);    while (reader.hasNext()) {      Map<String,Set<String>> attributes=new HashMap<>();      if (reader.isEntry()) {        SearchResultEntry entry=reader.readEntry();        String name=entry.parseAttribute(searchAttr).asString();        names.add(name);        if (returnAllAttrs) {          for (          Attribute attribute : entry.getAllAttributes()) {            LDAPUtils.addAttributeToMapAsString(attribute,attributes);          }          entries.put(name,attributes);        } else         if (returnAttrs != null && !returnAttrs.isEmpty()) {          for (          String attr : returnAttrs) {            Attribute attribute=entry.getAttribute(attr);            if (attribute != null) {              LDAPUtils.addAttributeToMapAsString(attribute,attributes);            }          }          entries.put(name,attributes);        } else {        }      } else {        reader.readReference();      }    }  } catch (  LdapException ere) {    ResultCode resultCode=ere.getResult().getResultCode();    if (resultCode.equals(ResultCode.NO_SUCH_OBJECT)) {      return new RepoSearchResults(new HashSet<String>(0),RepoSearchResults.SUCCESS,Collections.EMPTY_MAP,type);    } else     if (resultCode.equals(ResultCode.TIME_LIMIT_EXCEEDED) || resultCode.equals(ResultCode.CLIENT_SIDE_TIMEOUT)) {      errorCode=RepoSearchResults.TIME_LIMIT_EXCEEDED;    } else     if (resultCode.equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {      errorCode=RepoSearchResults.SIZE_LIMIT_EXCEEDED;    } else {      DEBUG.error("Unexpected error occurred during search",ere);      errorCode=resultCode.intValue();    }  }catch (  SearchResultReferenceIOException srrioe) {    DEBUG.error("Got reference instead of entry",srrioe);    throw newIdRepoException(IdRepoErrorCode.SEARCH_FAILED,CLASS_NAME);  } finally {    IOUtils.closeIfNotNull(conn);  }  return new RepoSearchResults(names,errorCode,entries,type);}  }
class C{  public static int tertiaryOrder(int order){  return order & TERTIARY_ORDER_MASK_;}  }
class C{  public double toNumber(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XString xobj=(XString)dtm.getStringValue(nodeHandle);  return xobj.num();}  }
class C{  private static void executeWithLog(Session session,String statement){  logger.info("Executing CQL statement: " + statement);  session.execute(statement);}  }
class C{  private void removeClearedReferences(final Iterator<PooledSoftReference<T>> iterator){  PooledSoftReference<T> ref;  while (iterator.hasNext()) {    ref=iterator.next();    if (ref.getReference() == null || ref.getReference().isEnqueued()) {      iterator.remove();    }  }}  }
class C{  public static AuthenticationHandler tokenBased(final SecretProvider data,final boolean isDryRun){  return new AuthenticationHandler(data,isDryRun,true);}  }
class C{  public void postSingleImage(Context context,Handler h,Map<String,String> postParams,String fileParam,String fileName,InputStream imgInputStream){  postSingleFile(context,h,postParams,fileParam,fileName,"image",imgInputStream);}  }
class C{  public void installUI(JComponent c){}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avFilter) throws AMException, SSOException {  int level=searchControl.getSearchScope();  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB)) {    throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  }  String filter="(&" + getFilter() + avFilter+ ")";  if (debug.messageEnabled()) {    debug.message("AMFilteredRoleImpl.searchUsers: " + filter);  }  searchControl.setSearchScope(AMConstants.SCOPE_SUB);  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,getOrganizationDN(),filter,sc,returnAttrs);}  }
class C{  @Post public Representation verify(Representation body) throws ServerException, NotFoundException, InvalidGrantException, OAuth2RestletException {  final Request restletRequest=getRequest();  OAuth2Request request=requestFactory.create(restletRequest);  DeviceCode deviceCode;  try {    deviceCode=tokenStore.readDeviceCode(request.<String>getParameter(OAuth2Constants.DeviceCode.USER_CODE),request);  } catch (  InvalidGrantException e) {    return getTemplateRepresentation(FORM,request,"not_found");  }  if (deviceCode == null || deviceCode.isIssued()) {    return getTemplateRepresentation(FORM,request,"not_found");  }  addRequestParamsFromDeviceCode(restletRequest,deviceCode);  try {    final String decision=request.getParameter("decision");    if (StringUtils.isNotEmpty(decision)) {      if (csrfProtection.isCsrfAttack(request)) {        logger.debug("Session id from consent request does not match users session");        throw new OAuth2RestletException(400,"bad_request",null,request.<String>getParameter("state"));      }      final boolean consentGiven="allow".equalsIgnoreCase(decision);      final boolean saveConsent="on".equalsIgnoreCase(request.<String>getParameter("save_consent"));      if (saveConsent) {        saveConsent(request);      }      if (consentGiven) {        ResourceOwner resourceOwner=resourceOwnerSessionValidator.validate(request);        deviceCode.setResourceOwnerId(resourceOwner.getId());        deviceCode.setAuthorized(true);        tokenStore.updateDeviceCode(deviceCode,request);      } else {        tokenStore.deleteDeviceCode(deviceCode.getClientId(),deviceCode.getDeviceCode(),request);      }    } else {      authorizationService.authorize(request);    }  } catch (  IllegalArgumentException e) {    if (e.getMessage().contains("client_id")) {      throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("state"));    }    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }catch (  ResourceOwnerAuthenticationRequired e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),e.getRedirectUri().toString(),null);  }catch (  ResourceOwnerConsentRequired e) {    return representation.getRepresentation(getContext(),request,"authorize.ftl",getDataModel(e,request));  }catch (  InvalidClientException|RedirectUriMismatchException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"),e.getParameterLocation());  }  return getTemplateRepresentation(THANKS_PAGE,request,null);}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("Attribute").append(uri).append(" AttributeName=\"").append(_attributeName).append("\" AttributeNamespace=\"").append(_attributeNameSpace).append("\">\n");  Iterator iter=_attributeValue.iterator();  while (iter.hasNext()) {    result.append(XMLUtils.printAttributeValue((Element)iter.next(),prefix)).append("\n");  }  result.append("</").append(prefix).append("Attribute>\n");  return result.toString();}  }
class C{  public ExtendedResponse doOperation(ObjectFactory objFactory,ExtendedRequest extendedRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  ExtendedResponse extendedResponse=objFactory.createExtendedResponse();  extendedResponse.setRequestID(extendedRequest.getRequestID());  String requestName=extendedRequest.getRequestName();  Object value=extendedRequest.getRequestValue();  ByteString asnValue=ByteStringUtility.convertValue(value);  ProtocolOp op=new ExtendedRequestProtocolOp(requestName,asnValue);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  ExtendedResponseProtocolOp extendedOp=responseMessage.getExtendedResponseProtocolOp();  int resultCode=extendedOp.getResultCode();  LocalizableMessage errorMessage=extendedOp.getErrorMessage();  extendedResponse.setResponseName(extendedOp.getOID());  ByteString rawValue=extendedOp.getValue();  value=null;  if (rawValue != null) {    if (responseIsString(requestName)) {      value=rawValue.toString();    } else {      value=rawValue.toByteArray();    }  }  extendedResponse.setResponse(value);  extendedResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  extendedResponse.setResultCode(code);  return extendedResponse;}  }
class C{  private static void addFolderList(String property){  String extensionsDir=System.getProperty(property);  if (extensionsDir != null) {    StringTokenizer extensionsTok=new StringTokenizer(extensionsDir,File.pathSeparator);    while (extensionsTok.hasMoreTokens()) {      File targetDir=new File(extensionsTok.nextToken());      if (!targetDir.isDirectory()) {        continue;      }      File[] files=targetDir.listFiles();      if (files == null) {        continue;      }      for (int i=0; i < files.length; i++) {        if (files[i].getName().toLowerCase(Locale.ENGLISH).endsWith(".jar") && files[i].isFile()) {          try {            addSystemResource(files[i]);          } catch (          IOException e) {            log.error(sm.getString("extensionValidator.failload",files[i]),e);          }        }      }    }  }}  }
class C{  public void testCipherSpi06() throws BadPaddingException, ShortBufferException, IllegalBlockSizeException {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  int len=10;  byte[] bbuf=new byte[len];  for (int i=0; i < bbuf.length; i++) {    bbuf[i]=(byte)i;  }  ByteBuffer bb1=ByteBuffer.wrap(bbuf);  ByteBuffer bbNull=null;  try {    cSpi.engineDoFinal(bbNull,bb1);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  try {    cSpi.engineDoFinal(bb1,bbNull);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  ByteBuffer bb2=ByteBuffer.allocate(len);  bb1.position(bb1.limit());  assertEquals("Incorrect result",0,cSpi.engineDoFinal(bb1,bb2));  bb1.position(0);  bb2.position(len - 2);  try {    cSpi.engineDoFinal(bb1,bb2);    fail("ShortBufferException must be thrown. Output buffer remaining: ".concat(Integer.toString(bb2.remaining())));  } catch (  ShortBufferException e) {  }  int pos=5;  bb1.position(pos);  bb2.position(0);  assertTrue("Incorrect result",cSpi.engineDoFinal(bb1,bb2) > 0);}  }
class C{  public SearchResult(String name,String className,Object obj,Attributes attrs,boolean isRelative){  super(name,className,obj,isRelative);  this.attrs=attrs;}  }
class C{  public PushNotificationServiceConfig build() throws PushNotificationException {  if (!config.isValid()) {    throw new PushNotificationException("Attempted to construct a " + "PushNotificationServiceConfig in an invalid state.");  }  return config;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node childNode;  Node textNode;  NodeList textList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  childNode=employeeList.item(1);  textNode=childNode.getFirstChild();  textList=textNode.getChildNodes();  assertSize("nodelistIndexGetLengthOfEmptyListAssert",0,textList);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(getClass().getName());  String message=getLocalizedMessage();  if (publicId != null)   buf.append("publicId: ").append(publicId);  if (systemId != null)   buf.append("; systemId: ").append(systemId);  if (lineNumber != -1)   buf.append("; lineNumber: ").append(lineNumber);  if (columnNumber != -1)   buf.append("; columnNumber: ").append(columnNumber);  if (message != null)   buf.append("; ").append(message);  return buf.toString();}  }
class C{  @Override public int lengthOfYear(){  return (isLeapYear() ? 366 : 365);}  }
class C{  protected void copy(byte[] src,byte[] dst,int dstOffset){  System.arraycopy(src,0,dst,dstOffset,src.length);}  }
class C{  public synchronized void end(){  super.end();  this.trimEdits(indexOfNextAdd,edits.size() - 1);}  }
class C{  public ErodingPerKeyKeyedObjectPool(final KeyedObjectPool<K,V> keyedPool,final float factor){  super(keyedPool,null);  this.factor=factor;}  }
class C{  private Statement parse_statement() throws SyntaxException {  if (current == null)   return null;  if (current instanceof Element) {    String content=((Element)current).getContent();    if (isSync((Element)current)) {      annosIsEmpty();      modifiersIsEmpty();      return parse_synchronized();    } else     if (current.getTokenType() == TokenType.MODIFIER) {      parse_modifier();      return null;    } else     if (current.getTokenType() == TokenType.KEY) {switch (content) {case "if":        annosIsEmpty();      modifiersIsEmpty();    return parse_if();case "for":  annosIsEmpty();modifiersIsEmpty();return parse_for();case "do":annosIsEmpty();modifiersIsEmpty();return parse_do_while();case "while":annosIsEmpty();modifiersIsEmpty();return parse_while();case "static":annosIsEmpty();modifiersIsEmpty();LineCol lineCol=current.getLineCol();if (current.next() instanceof ElementStartNode) {nextNode(false);return new AST.StaticScope(parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false),lineCol);} else if (current.next() instanceof Element) {nextNode(false);Element curr=(Element)current;Statement stmt=parse_statement();if (stmt == null) {err.UnexpectedTokenException("a valid statement",curr.toString(),curr.getLineCol());err.debug("skip the static statements");throw new ParseFail();}return new AST.StaticScope(Collections.singletonList(stmt),lineCol);} else {return null;}case "class":return parse_class();case "interface":return parse_interface();case "object":return parse_object();case "fun":return parse_fun();case "try":annosIsEmpty();modifiersIsEmpty();return parse_try();case "throw":annosIsEmpty();modifiersIsEmpty();return parse_throw();case "package":modifiersIsEmpty();return parse_pkg_declare();case "import":annosIsEmpty();modifiersIsEmpty();return parse_pkg_import();case "continue":annosIsEmpty();modifiersIsEmpty();return new AST.Continue(current.getLineCol());case "break":annosIsEmpty();modifiersIsEmpty();return new AST.Break(current.getLineCol());case "return":annosIsEmpty();modifiersIsEmpty();lineCol=current.getLineCol();if (!(current.next() instanceof Element)) {return new AST.Return(null,lineCol);} else {Expression e=next_exp(false);return new AST.Return(e,lineCol);}}} else if (current.getTokenType() == TokenType.SYMBOL) {switch (content) {case "...":return new AST.Pass(current.getLineCol());case "@":modifiersIsEmpty();boolean tmp=annotationAsExpression;annotationAsExpression=true;parse_anno();annotationAsExpression=tmp;if (annotationAsExpression) if (!annos.isEmpty()) {AST.Anno anno=annos.iterator().next();annos.clear();return new AST.AnnoExpression(anno);}return null;}}if (current.getTokenType() == TokenType.VALID_NAME) {int def_method_type=checkMethodDef((Element)current,!annos.isEmpty() || !modifiers.isEmpty());if (def_method_type == METHOD_DEF_TYPE) {return parse_method_def_type();} else if (def_method_type == METHOD_DEF_EMPTY) {return parse_method_def_empty();} else if (def_method_type == METHOD_DEF_NORMAL) {return parse_method_def_normal();} else if (def_method_type == METHOD_DEF_ONE_STMT) {return parse_method_def_one_stmt();} else if (modifiers.contains(new Modifier(Modifier.Available.DEF,LineCol.SYNTHETIC))) {return parse_method_def_no_par();}}while (true) {parse_expression();if (current == null || !(current instanceof Element)) {if (parsedExps.empty()) return null;return parsedExps.pop();}}} else {nextNode(true);return parse_statement();}}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return (count - pos) > 0;  }}  }
class C{  protected void onTakeRouter(R router){}  }
class C{  public final void testGetServerName(){  LDAPCertStoreParameters cp=new LDAPCertStoreParameters("serverName");  assertNotNull(cp.getServerName());}  }
class C{  protected Collection<ExpandRoomFreespaceIncomplete> divide_large_room(Collection<ExpandRoomFreespaceIncomplete> p_room_list,ShapeTileBox p_board_bounding_box){  if (p_room_list.size() != 1)   return p_room_list;  ExpandRoomFreespaceIncomplete curr_room=p_room_list.iterator().next();  ShapeTileBox room_bounding_box=curr_room.get_shape().bounding_box();  if (2 * room_bounding_box.height() <= p_board_bounding_box.height() || 2 * room_bounding_box.width() <= p_board_bounding_box.width()) {    return p_room_list;  }  double max_section_width=0.5 * Math.max(p_board_bounding_box.height(),p_board_bounding_box.width());  ShapeTile[] section_arr=curr_room.get_shape().divide_into_sections(max_section_width);  Collection<ExpandRoomFreespaceIncomplete> result=new LinkedList<ExpandRoomFreespaceIncomplete>();  for (  ShapeTile curr_section : section_arr) {    ShapeTile curr_shape_to_be_contained=curr_section.intersection(curr_room.get_contained_shape());    ExpandRoomFreespaceIncomplete curr_section_room=new ExpandRoomFreespaceIncomplete(curr_section,curr_room.get_layer(),curr_shape_to_be_contained);    result.add(curr_section_room);  }  return result;}  }
class C{  public static void migrateToLatest(Context context,SQLiteDatabase db,int currentDbVersionNumber){  Log.i(TAG,"Migrating database from version " + currentDbVersionNumber);switch (currentDbVersionNumber) {case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:    initialVersion(db);  setDefaultRules(context,db);case 22:addBluetooth(db);break;default :Log.w(TAG,"Attempting to migrate from an unknown version!");break;}}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new JarURLConnectionImpl(u);}  }
class C{  public void removeWelcomeFile(String hostName,String contextPath,String version,String welcomeFile){  hostName=renameWildcardHost(hostName);  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,false);  if (contextVersion == null || contextVersion.isPaused()) {    return;  }  int match=-1;  for (int i=0; i < contextVersion.welcomeResources.length; i++) {    if (welcomeFile.equals(contextVersion.welcomeResources[i])) {      match=i;      break;    }  }  if (match > -1) {    int len=contextVersion.welcomeResources.length - 1;    String[] newWelcomeResources=new String[len];    System.arraycopy(contextVersion.welcomeResources,0,newWelcomeResources,0,match);    if (match < len) {      System.arraycopy(contextVersion.welcomeResources,match + 1,newWelcomeResources,match,len - match);    }    contextVersion.welcomeResources=newWelcomeResources;  }}  }
class C{  public SSOToken createSSOToken(java.security.Principal user,String password) throws SSOException, UnsupportedOperationException {  try {    SSOTokenImpl ssoToken=new SSOTokenImpl(user,password);    if (debug.messageEnabled()) {      debug.message("SSO token ldap auth successful for " + user.toString());    }    return ssoToken;  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("could not create SSOToken for user \"" + user.getName() + "\"",e);    }    throw new SSOException(e);  }}  }
class C{  public DeleteOperation processDelete(ByteString rawEntryDN){  return processDelete(rawEntryDN,null);}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public static PdfAction createRendition(String file,PdfFileSpec fileSpec,String mimeType,PdfAnnotation screenAnnotation){  return new PdfAction().put(PdfName.S,PdfName.Rendition).put(PdfName.OP,new PdfNumber(0)).put(PdfName.AN,screenAnnotation.getPdfObject()).put(PdfName.R,new PdfRendition(file,fileSpec,mimeType).getPdfObject());}  }
class C{  public int width(){  return box_ur.v_x - box_ll.v_x;}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public void testExecuteUpdate_String() throws SQLException {  String[] queries1={"update zoo set name='Masha', family='cat' where id=2;","drop table if exists hutch","create table hutch (id integer not null, animal_id integer, address char(20), primary key (id));","insert into hutch (id, animal_id, address) values (1, 2, 'Birds-house, 1');","insert into hutch (id, animal_id, address) values (2, 1, 'Horse-house, 5');","create view address as select address from hutch where animal_id=2;","drop view address;","drop table hutch;"};  String queries2="select * from zoo;";  Statement st=null;  try {    st=conn.createStatement();    for (int i=0; i < queries1.length; i++) {      int count=st.executeUpdate(queries1[i]);      assertTrue(count > 0);    }    assertEquals(0,st.executeUpdate(queries2));  }  finally {    try {      st.close();    } catch (    Exception ee) {    }  }  Statement stat=conn.createStatement();  assertEquals(0,stat.executeUpdate("create table s1 (c1);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (0);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (1);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (2);"));  assertEquals(1,stat.executeUpdate("delete from s1 where c1 = 1;"));  assertEquals(2,stat.executeUpdate("update s1 set c1 = 5;"));  assertEquals(2,stat.executeUpdate("delete from s1;"));  assertEquals(0,stat.executeUpdate("drop table s1;"));  stat.executeUpdate("create table s1 (c1);");  stat.executeUpdate("insert into s1 values (0);");  stat.executeUpdate("insert into s1 values (1);");  stat.executeUpdate("insert into s1 values (2);");  assertEquals(3,stat.executeUpdate("drop table s1;"));  stat.close();}  }
class C{  public static String encode(String s,String enc) throws UnsupportedEncodingException {  boolean needToChange=false;  boolean wroteUnencodedChar=false;  int maxBytesPerChar=10;  StringBuilder out=new StringBuilder(s.length());  ByteArrayOutputStream buf=new ByteArrayOutputStream(maxBytesPerChar);  OutputStreamWriter writer=new OutputStreamWriter(buf,enc);  for (int i=0; i < s.length(); i++) {    int c=s.charAt(i);    if (dontNeedEncoding.get(c)) {      out.append((char)c);      wroteUnencodedChar=true;    } else {      try {        if (wroteUnencodedChar) {          writer=new OutputStreamWriter(buf,enc);          wroteUnencodedChar=false;        }        writer.write(c);        if (c >= 0xD800 && c <= 0xDBFF) {          if ((i + 1) < s.length()) {            int d=s.charAt(i + 1);            if (d >= 0xDC00 && d <= 0xDFFF) {              writer.write(d);              i++;            }          }        }        writer.flush();      } catch (      IOException e) {        buf.reset();        continue;      }      byte[] ba=buf.toByteArray();      for (int j=0; j < ba.length; j++) {        out.append('%');        char ch=Character.forDigit((ba[j] >> 4) & 0xF,16);        if (Character.isLetter(ch)) {          ch-=caseDiff;        }        out.append(ch);        ch=Character.forDigit(ba[j] & 0xF,16);        if (Character.isLetter(ch)) {          ch-=caseDiff;        }        out.append(ch);      }      buf.reset();      needToChange=true;    }  }  return (needToChange ? out.toString() : s);}  }
class C{  @Override public void addChild(WXComponent child){  addChild(child,-1);}  }
class C{  public static ThreadFactory privilegedThreadFactory(){  return new PrivilegedThreadFactory();}  }
class C{  public SSOTokenIDImpl(com.iplanet.dpro.session.SessionID sid){  SSOSessionID=sid;  hashCode=SSOSessionID.hashCode();}  }
class C{  public static Digester newDigester(boolean xmlValidation,boolean xmlNamespaceAware,RuleSet rule,boolean blockExternal){  Digester digester=new Digester();  digester.setNamespaceAware(xmlNamespaceAware);  digester.setValidating(xmlValidation);  digester.setUseContextClassLoader(true);  EntityResolver2 resolver=new LocalResolver(SERVLET_API_PUBLIC_IDS,SERVLET_API_SYSTEM_IDS,blockExternal);  digester.setEntityResolver(resolver);  if (rule != null) {    digester.addRuleSet(rule);  }  return digester;}  }
class C{  public OrganizationAlreadyExistsException(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype01.class,args);}  }
class C{  public void fireTableColumnDataChanged(final int col){  for (int i=0; i < getRowCount(); i++) {    fireTableCellUpdated(i,col);  }}  }
class C{  public IntHashtable(){  this(150,0.75f);}  }
class C{  public static IOFileFilter ageFileFilter(File cutoffReference,boolean acceptOlder){  return new AgeFileFilter(cutoffReference,acceptOlder);}  }
class C{  public DefaultTableModel(Object[] columnNames,int rowCount){  this(convertToVector(columnNames),rowCount);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  this.config=config;}  }
class C{  public void write(byte[] data){  this.audioConsumer.consume(data);}  }
class C{  public final void testGetPolicyTree02() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertNull(vr.getPolicyTree());}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().fetchByUUID_G(uuid,groupId);}  }
class C{  protected String toXML(){  StringBuilder sb=new StringBuilder(100);  sb.append("\n").append(REFERRALS_ELEMENT_BEGIN).append(XMLUtils.escapeSpecialCharacters(name)).append(REFERRALS_DESCRIPTION).append(XMLUtils.escapeSpecialCharacters(description)).append("\">");  Iterator items=referrals.keySet().iterator();  while (items.hasNext()) {    String referralName=(String)items.next();    Referral referral=(Referral)referrals.get(referralName);    sb.append("\n").append(REFERRAL_ELEMENT).append(XMLUtils.escapeSpecialCharacters(referralName)).append(REFERRAL_TYPE).append(XMLUtils.escapeSpecialCharacters(ReferralTypeManager.referralTypeName(referral))).append("\">");    Set v=referral.getValues();    if ((v != null) && !v.isEmpty()) {      sb.append("\n").append(ATTR_VALUE_BEGIN);      Iterator values=v.iterator();      while (values.hasNext()) {        sb.append("\n").append(VALUE_BEGIN).append(XMLUtils.escapeSpecialCharacters((String)values.next())).append(VALUE_END);      }      sb.append("\n").append(ATTR_VALUE_END);    }    sb.append("\n").append(REFERRAL_ELEMENT_END);  }  sb.append("\n").append(REFERRALS_ELEMENT_END);  return (sb.toString());}  }
class C{  public String toString(){  String ns=null;  if (type.equals(GENERATE_BEARER_TOKEN)) {    ns=DiscoConstants.DISCO11_NS;  } else {    ns=DiscoConstants.DISCO_NS;  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(type).append(" xmlns=\"").append(ns).append("\"");  if (descIDRefs != null) {    sb.append(" descriptionIDRefs=\"");    Iterator iter=descIDRefs.iterator();    if (iter.hasNext()) {      sb.append((String)iter.next());    }    while (iter.hasNext()) {      sb.append(" ").append((String)iter.next());    }    sb.append("\"");  }  sb.append(">");  sb.append("</").append(type).append(">");  return sb.toString();}  }
class C{  public void resetKeyboardActions(){  for (int counter=0; counter < 3; counter++) {    InputMap inputMap=getInputMap(counter,false);    if (inputMap != null) {      inputMap.clear();    }  }  ActionMap am=getActionMap(false);  if (am != null) {    am.clear();  }}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void reportEvent(ValidatableObject source,Exception nestedException) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,nestedException.toString(),new ValidationEventLocatorImpl(source),nestedException));}  }
class C{  public List<Object> components(){  return Collections.unmodifiableList(components);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public ComponentColorModel(ColorSpace colorSpace,boolean hasAlpha,boolean isAlphaPremultiplied,int transparency,int transferType){  this(colorSpace,null,hasAlpha,isAlphaPremultiplied,transparency,transferType);}  }
class C{  public ListItem(Image image){  this();  add(image);}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final CounterMonitorObservedObject cmo=new CounterMonitorObservedObject(object);  cmo.setThreshold(initThreshold);  cmo.setModulusExceeded(false);  cmo.setEventAlreadyNotified(false);  cmo.setPreviousScanCounter(null);  return cmo;}  }
class C{  public static Authenticator withAccessTokenAndRefresh(final String username,final ZonkyApiToken token,final boolean isDryRun){  return new Authenticator(null,true,isDryRun);}  }
class C{  void dump(OutputStream out,int length) throws IOException {  if (count < mark + length)   throw new IOException("short DER value (encode)");  out.write(buf,mark,length);}  }
class C{  public String toString(){  return bidiBase.toString();}  }
class C{  private List<NotificationMessageTemplateElement> parseTemplateFile(File f) throws ConfigException {  LinkedList<NotificationMessageTemplateElement> elementList=new LinkedList<>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(f));    int lineNumber=0;    while (true) {      String line=reader.readLine();      if (line == null) {        break;      }      if (logger.isTraceEnabled()) {        logger.trace("Read message template line " + line);      }      lineNumber++;      int startPos=0;      while (startPos < line.length()) {        int delimPos=line.indexOf("%%",startPos);        if (delimPos < 0) {          if (logger.isTraceEnabled()) {            logger.trace("No more tokens -- adding text " + line.substring(startPos));          }          elementList.add(new TextNotificationMessageTemplateElement(line.substring(startPos)));          break;        } else {          if (delimPos > startPos) {            if (logger.isTraceEnabled()) {              logger.trace("Adding text before token " + line.substring(startPos));            }            elementList.add(new TextNotificationMessageTemplateElement(line.substring(startPos,delimPos)));          }          int closeDelimPos=line.indexOf("%%",delimPos + 1);          if (closeDelimPos < 0) {            throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_UNCLOSED_TOKEN.get(delimPos,lineNumber));          } else {            String tokenStr=line.substring(delimPos + 2,closeDelimPos);            String lowerTokenStr=toLowerCase(tokenStr);            if (lowerTokenStr.equals("notification-type")) {              if (logger.isTraceEnabled()) {                logger.trace("Found a notification type token " + tokenStr);              }              elementList.add(new NotificationTypeNotificationMessageTemplateElement());            } else             if (lowerTokenStr.equals("notification-message")) {              if (logger.isTraceEnabled()) {                logger.trace("Found a notification message token " + tokenStr);              }              elementList.add(new NotificationMessageNotificationMessageTemplateElement());            } else             if (lowerTokenStr.equals("notification-user-dn")) {              if (logger.isTraceEnabled()) {                logger.trace("Found a notification user DN token " + tokenStr);              }              elementList.add(new UserDNNotificationMessageTemplateElement());            } else             if (lowerTokenStr.startsWith("notification-user-attr:")) {              String attrName=lowerTokenStr.substring(23);              AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrName);              if (attrType.isPlaceHolder()) {                throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_UNDEFINED_ATTR_TYPE.get(delimPos,lineNumber,attrName));              } else {                if (logger.isTraceEnabled()) {                  logger.trace("Found a user attribute token for  " + attrType.getNameOrOID() + " -- "+ tokenStr);                }                elementList.add(new UserAttributeNotificationMessageTemplateElement(attrType));              }            } else             if (lowerTokenStr.startsWith("notification-property:")) {              String propertyName=lowerTokenStr.substring(22);              AccountStatusNotificationProperty property=AccountStatusNotificationProperty.forName(propertyName);              if (property == null) {                throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_UNDEFINED_PROPERTY.get(delimPos,lineNumber,propertyName));              } else {                if (logger.isTraceEnabled()) {                  logger.trace("Found a notification property token " + "for " + propertyName + " -- "+ tokenStr);                }                elementList.add(new NotificationPropertyNotificationMessageTemplateElement(property));              }            } else {              throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_UNRECOGNIZED_TOKEN.get(tokenStr,delimPos,lineNumber));            }            startPos=closeDelimPos + 2;          }        }      }      elementList.add(new TextNotificationMessageTemplateElement("\r\n"));    }    return elementList;  } catch (  Exception e) {    logger.traceException(e);    throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_CANNOT_PARSE.get(f.getAbsolutePath(),currentConfig.dn(),getExceptionMessage(e)));  } finally {    Utils.closeSilently(reader);  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  PWResetInvalidURLModel model=(PWResetInvalidURLModel)getModel();  setErrorMessage(model.getInvalidURLTitle(),model.getInvalidURLMessage());}  }
class C{  public String typeName(Type type,Field field,String name){  if (field.getCardinality() == Field.Cardinality.CARDINALITY_REPEATED) {    if (isMapField(type,field.getName())) {      return mapTypeName(field);    } else {      return arrayTypeName(field);    }  } else {    if (field.getKind() == Field.Kind.TYPE_MESSAGE) {      return objectTypeName(field);    } else {      return nativeTypeName(type,field,name);    }  }}  }
class C{  public SearchResultDoneProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(PrivateKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public void zoomOutImage(float scale,float centerX,float centerY){  if (scale >= getMinScale()) {    postScale(scale / getCurrentScale(),centerX,centerY);  }}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier){  this(type,duration,amplifier,true);}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  super.parseDOMChileElements(iter);  if (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.SUBJECT.equals(localName)) {      subject=AssertionFactory.getInstance().createSubject(childElement);      return;    }  }  if (SAML2SDKUtils.debug.messageEnabled()) {    SAML2SDKUtils.debug.message("SubjectQueryAbstractImpl." + "parseDOMChileElements: Subject is expected");  }  throw new SAML2Exception(SAML2SDKUtils.bundle.getString("schemaViolation"));}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  public RestAuthErrorCodeException(String errorCode,String errorMessage){  super(AM_AUTH_ERROR_CODE_RESPONSE_STATUS_MAPPING.getAuthLoginExceptionResponseStatus(errorCode),errorMessage);}  }
class C{  private <M extends Configuration>void deregisterDeleteListener(DN baseDN,ConfigurationDeleteListener<M> listener){  try {    if (configRepository.hasEntry(baseDN)) {      for (      ConfigDeleteListener l : configRepository.getDeleteListeners(baseDN)) {        if (l instanceof ConfigDeleteListenerAdaptor) {          ConfigDeleteListenerAdaptor<?> adaptor=(ConfigDeleteListenerAdaptor<?>)l;          ServerManagedObjectDeleteListener<?> l2=adaptor.getServerManagedObjectDeleteListener();          if (l2 instanceof ServerManagedObjectDeleteListenerAdaptor<?>) {            ServerManagedObjectDeleteListenerAdaptor<?> adaptor2=(ServerManagedObjectDeleteListenerAdaptor<?>)l2;            if (adaptor2.getConfigurationDeleteListener() == listener) {              configRepository.deregisterDeleteListener(baseDN,adaptor);            }          }        }      }    } else {      deregisterDelayedDeleteListener(baseDN,listener);    }  } catch (  ConfigException e) {    logger.trace("Unable to deregister delete listener",e);  }}  }
class C{  @Override public int hashCode(){  return printer.hashCode();}  }
class C{  public AgentsModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("xml","1.0");  assertTrue("hasXML1",state);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Text newTextNode;  String newTextName;  String newTextValue;  int newTextType;  doc=(Document)load("hc_staff",true);  newTextNode=doc.createTextNode("This is a new Text node");  newTextValue=newTextNode.getNodeValue();  assertEquals("value","This is a new Text node",newTextValue);  newTextName=newTextNode.getNodeName();  assertEquals("strong","#text",newTextName);  newTextType=(int)newTextNode.getNodeType();  assertEquals("type",3,newTextType);}  }
class C{  public static AuthXMLRequest parseXML(String xml,HttpServletRequest req) throws AuthException {  debug.message("Calling AuthXMLRequestParser");  AuthXMLRequestParser authParser=new AuthXMLRequestParser(xml,req);  debug.message("After AuthXMLRequestParser");  return authParser.parseXML();}  }
class C{  public StateInteractive extent_to_whole_connected_sets(){  Set<BrdItem> new_selected_items=new TreeSet<BrdItem>();  for (  BrdItem curr_item : items_list) {    if (curr_item instanceof BrdConnectable) {      new_selected_items.addAll(curr_item.get_connected_set(-1));    }  }  if (new_selected_items.isEmpty())   return return_state;  items_list=new_selected_items;  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_CONNECTED_SETS);  filter();  i_brd.repaint();  return this;}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  @Override public void processServerShutdown(LocalizableMessage reason){  stopRequested=true;  while (backGroundThread != null && backGroundThread.isAlive()) {    try {      backGroundThread.interrupt();      backGroundThread.join();    } catch (    InterruptedException ex) {    }  }  DirectoryServer.deregisterShutdownListener(this);  backGroundThread=null;}  }
class C{  public boolean isUserNegotiated(){  return (addr[0] == (byte)255) && (addr[1] == (byte)255) && (addr[2] == (byte)255)&& (addr[3] == (byte)255);}  }
class C{  public static void discover(String filename) throws IOException {  int fileIdx=filename.lastIndexOf('/');  String baseDir=(fileIdx == -1) ? "./" : filename.substring(0,fileIdx + 1);  String content=getFileContent(filename);  StringBuffer buff=new StringBuffer();  discover(content,ADDED,TAG_ADDED,buff);  discover(content,REMOVED,TAG_REMOVED,buff);  discover(content,MODIFIED,TAG_MODIFIED,buff);  writeToFile(baseDir + "stat",buff.toString());}  }
class C{  private static int[] intArrayFromCollection(Collection<Integer> v){  int[] result=new int[v.size()];  int i=0;  for (  Integer value : v) {    result[i]=value;    i++;  }  return result;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public QrSegment(Mode md,int numCh,byte[] b,int bitLen){  if (md == null || b == null)   throw new NullPointerException();  if (numCh < 0 || bitLen < 0 || bitLen > b.length * 8L)   throw new IllegalArgumentException("Invalid value");  mode=md;  numChars=numCh;  data=Arrays.copyOf(b,(bitLen + 7) / 8);  bitLength=bitLen;}  }
class C{  public static Optional<String> trimEnd(final String input){  return Optional.ofNullable(input).filter(null).map(null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyNameElement createKeyNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyNameElementImpl();}  }
class C{  public boolean insertMessagesFromJSONString(String receiveMessagesJsonString){  Log.i(TAG,"Parsing received json to add to database");  boolean hasIncoming=false;  JSONObject receivedMessagesJSON=null;  JSONArray foundMessagesJSON=null;  try {    receivedMessagesJSON=new JSONObject(receiveMessagesJsonString);    foundMessagesJSON=receivedMessagesJSON.getJSONArray("incomingMessages");    for (int i=0; i < foundMessagesJSON.length(); i++) {      JSONObject foundMessageJSON=(JSONObject)foundMessagesJSON.get(i);      addMessageToDB(foundMessageJSON);      int is_from_me=foundMessageJSON.getInt("is_from_me");      if (is_from_me == 0) {        hasIncoming=true;      }    }  } catch (  JSONException e) {    e.printStackTrace();  }  return hasIncoming;}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  protected void uninstallDefaults(){  spinner.setLayout(null);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsType createGoverningAgreementsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsTypeImpl();}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  public HostRuleSet(){  this("");}  }
class C{  public SQLTimeoutException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("PasswordExpiredControl()");}  }
class C{  void _updateModelFromText(){  JTextComponent textC=getTextComponent();  Document doc=getDocument();  if (textC != null && doc != null) {    String text=textC.getText();    SimpleAttributeSet sas=new SimpleAttributeSet();    isSettingAttributes=true;    try {      sas.addAttribute(HTML.Attribute.COMMENT,text);      ((StyledDocument)doc).setCharacterAttributes(getStartOffset(),getEndOffset() - getStartOffset(),sas,false);    }  finally {      isSettingAttributes=false;    }  }}  }
class C{  public SQLiteDatabaseConfiguration(String path,@SQLiteDatabase.OpenFlags int openFlags,List<SQLiteCustomFunction> functions,List<SQLiteCustomExtension> extensions){  this(path,openFlags);  this.customFunctions.addAll(functions);  this.customExtensions.addAll(extensions);}  }
class C{  MakeLDIF(PrintStream out,PrintStream err){  super(out,err);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.addFoo(foo);}  }
class C{  protected boolean checkIfModifiedSince(HttpServletRequest request,HttpServletResponse response,WebResource resource){  try {    long headerValue=request.getDateHeader("If-Modified-Since");    long lastModified=resource.getLastModified();    if (headerValue != -1) {      if ((request.getHeader("If-None-Match") == null) && (lastModified < headerValue + 1000)) {        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);        response.setHeader("ETag",resource.getETag());        return false;      }    }  } catch (  IllegalArgumentException illegalArgument) {    return true;  }  return true;}  }
class C{  private int autoroute_pass_try(int ar_pass_no){  Collection<BrdItem> autoroute_item_list=new LinkedList<BrdItem>();  Set<BrdItem> handeled_items=new TreeSet<BrdItem>();  Iterator<UndoObjectNode> iter=routing_board.undo_items.start_read_object();  for (; ; ) {    UndoObjectStorable curr_ob=routing_board.undo_items.read_next(iter);    if (curr_ob == null)     break;    if (!(curr_ob instanceof BrdItem))     continue;    if (!(curr_ob instanceof BrdConnectable))     continue;    BrdItem curr_item=(BrdItem)curr_ob;    if (curr_item.is_route())     continue;    if (handeled_items.contains(curr_item))     continue;    for (int idx=0; idx < curr_item.net_count(); ++idx) {      int curr_net_no=curr_item.get_net_no(idx);      Set<BrdItem> connected_set=curr_item.get_connected_set(curr_net_no);      for (      BrdItem curr_connected_item : connected_set) {        if (curr_connected_item.net_count() <= 1) {          handeled_items.add(curr_connected_item);        }      }      int net_item_count=routing_board.connectable_item_count(curr_net_no);      if (connected_set.size() < net_item_count) {        autoroute_item_list.add(curr_item);      }    }  }  if (autoroute_item_list.isEmpty()) {    air_line=null;    return 0;  }  int items_to_go_count=autoroute_item_list.size();  int ripped_item_count=0;  int failed_count=0;  int routed_count=0;  autoroute_info_show(items_to_go_count,routed_count,ripped_item_count,failed_count);  for (  BrdItem curr_item : autoroute_item_list) {    if (s_thread.is_stop_requested())     break;    for (int index=0; index < curr_item.net_count(); index++) {      int r_net_no=curr_item.get_net_no(index);      SortedSet<BrdItem> ripped_item_list=new TreeSet<BrdItem>();      routing_board.changed_area_clear();      if (autoroute_item(curr_item,r_net_no,ripped_item_list,ar_pass_no)) {        routed_count++;        hdlg.repaint();      } else {        failed_count++;      }      --items_to_go_count;      ripped_item_count+=ripped_item_list.size();      autoroute_info_show(items_to_go_count,routed_count,ripped_item_count,failed_count);    }  }  air_line=null;  return failed_count;}  }
class C{  private void focusSpinnerIfNecessary(){  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  if (spinner.isRequestFocusEnabled() && (fo == null || !SwingUtilities.isDescendingFrom(fo,spinner))) {    Container root=spinner;    if (!root.isFocusCycleRoot()) {      root=root.getFocusCycleRootAncestor();    }    if (root != null) {      FocusTraversalPolicy ftp=root.getFocusTraversalPolicy();      Component child=ftp.getComponentAfter(root,spinner);      if (child != null && SwingUtilities.isDescendingFrom(child,spinner)) {        child.requestFocus();      }    }  }}  }
class C{  public void zoom_all(){  itera_board.adjust_design_bounds();  Rectangle display_rect=board_frame.getViewportBorderBounds();  Rectangle design_bounds=itera_board.gdi_context.get_design_bounds();  double width_factor=display_rect.getWidth() / design_bounds.getWidth();  double height_factor=display_rect.getHeight() / design_bounds.getHeight();  double zoom_factor=Math.min(width_factor,height_factor);  Point2D zoom_center=itera_board.gdi_context.get_design_center();  zoom(zoom_factor,zoom_center);  Point2D new_vieport_center=itera_board.gdi_context.get_design_center();  set_viewport_center(new_vieport_center);}  }
class C{  protected void loadChildren(){  loadedChildren=true;  createChildren(this,childValue);}  }
class C{  @Override public void onWZAudioSampleListenerRelease(){  mUpdateThread.shutdown();  mUpdateThread=null;}  }
class C{  public int hashCode(){  return getClass().hashCode() + (context == null ? 0 : context.hashCode()) + (needClientAuth ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode())+ (enabledCipherSuites == null ? 0 : enabledCipherSuitesList.hashCode())+ (enabledProtocols == null ? 0 : enabledProtocolsList.hashCode());}  }
class C{  @Override protected void doOptions(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.addHeader("DAV","1,2");  StringBuilder methodsAllowed=determineMethodsAllowed(req);  resp.addHeader("Allow",methodsAllowed.toString());  resp.addHeader("MS-Author-Via","DAV");}  }
class C{  private int countACL(){  int acl=0;  acl+=(folderView) ? CKFINDER_CONNECTOR_ACL_FOLDER_VIEW : 0;  acl+=(folderCreate) ? CKFINDER_CONNECTOR_ACL_FOLDER_CREATE : 0;  acl+=(folderRename) ? CKFINDER_CONNECTOR_ACL_FOLDER_RENAME : 0;  acl+=(folderDelete) ? CKFINDER_CONNECTOR_ACL_FOLDER_DELETE : 0;  acl+=(fileView) ? CKFINDER_CONNECTOR_ACL_FILE_VIEW : 0;  acl+=(fileUpload) ? CKFINDER_CONNECTOR_ACL_FILE_UPLOAD : 0;  acl+=(fileRename) ? CKFINDER_CONNECTOR_ACL_FILE_RENAME : 0;  acl+=(fileDelete) ? CKFINDER_CONNECTOR_ACL_FILE_DELETE : 0;  return acl;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node imported;  Node addressElem;  NodeList addressElemChildren;  NodeList importedChildren;  int addressElemLen;  int importedLen;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","address");  addressElem=childList.item(0);  imported=doc.importNode(addressElem,true);  addressElemChildren=addressElem.getChildNodes();  importedChildren=imported.getChildNodes();  addressElemLen=(int)addressElemChildren.getLength();  importedLen=(int)importedChildren.getLength();  assertEquals("documentimportnode12",importedLen,addressElemLen);}  }
class C{  public static boolean checkSecurityToken(Object name,Object token){  Object refToken=securityTokens.get(name);  return (refToken == null || refToken.equals(token));}  }
class C{  public RulerView(Context context){  this(context,null);}  }
class C{  public boolean isEnabled(){  return isEnabled;}  }
class C{  public CancelResult(ResultCode resultCode,LocalizableMessage responseMessage){  this.resultCode=resultCode;  this.responseMessage=responseMessage;}  }
class C{  @Override public void memberAdded(Member member){}  }
class C{  public static short[] convertPointFormats(ECPointFormat[] pointFormats){  if (pointFormats == null || pointFormats.length == 0) {    return null;  }  short[] pf=new short[pointFormats.length];  for (int i=0; i < pointFormats.length; i++) {    pf[i]=pointFormats[i].getShortValue();  }  return pf;}  }
class C{  public static FSAccountFedInfo stringToObject(String fedInfoString) throws FSAccountMgmtException {  FSAccountFedInfo fedInfoObject=null;  StringTokenizer str=new StringTokenizer(fedInfoString,FED_INFO_DELIM);  String token;  fedInfoObject=new FSAccountFedInfo();  try {    token=str.nextToken();    fedInfoObject.setProviderID(token);    NameIdentifier localNI=null;    NameIdentifier remoteNI=null;    token=str.nextToken();    if (!token.equalsIgnoreCase("null")) {      String localName=token;      String localNameQualifier="";      String localNameFormat="";      token=str.nextToken();      if (!token.equalsIgnoreCase("null")) {        localNameQualifier=token;      }      token=str.nextToken();      if (!token.equalsIgnoreCase("null")) {        localNameFormat=token;      }      try {        localNI=new NameIdentifier(localName,localNameQualifier,localNameFormat);      } catch (      SAMLException se) {        FSUtils.debug.error("FSAccountUtils.stringToObject(): " + "SAMLException: ",se);        throw new FSAccountMgmtException(se.getMessage());      }    } else {      token=str.nextToken();      token=str.nextToken();    }    fedInfoObject.setLocalNameIdentifier(localNI);    token=str.nextToken();    if (!token.equalsIgnoreCase("null")) {      String remoteName=token;      String remoteNameQualifier="";      String remoteNameFormat="";      token=str.nextToken();      if (!token.equalsIgnoreCase("null")) {        remoteNameQualifier=token;      }      token=str.nextToken();      if (!token.equalsIgnoreCase("null")) {        remoteNameFormat=token;      }      try {        remoteNI=new NameIdentifier(remoteName,remoteNameQualifier,remoteNameFormat);      } catch (      SAMLException se) {        FSUtils.debug.error("FSAccountUtils.stringToObject(): " + "SAMLException: ",se);        throw new FSAccountMgmtException(se.getMessage());      }    } else {      token=str.nextToken();      token=str.nextToken();    }    fedInfoObject.setRemoteNameIdentifier(remoteNI);    token=str.nextToken();    if (token.equalsIgnoreCase("IDPRole")) {      fedInfoObject.setRole(true);    } else     if (token.equalsIgnoreCase("SPRole")) {      fedInfoObject.setRole(false);    } else {      FSUtils.debug.error("FSAccountUtils.stringToObject():" + " You have modified IDP/SP Role" + " in iDS :: set it to IDPRole/SPRole ");      throw new FSAccountMgmtException(IFSConstants.INVALID_ACT_FED_INFO_IN_IDS,null);    }    token=str.nextToken();    if (token.equalsIgnoreCase("Active")) {      fedInfoObject.activateFedStatus();    } else     if (token.equalsIgnoreCase("InActive")) {      fedInfoObject.deActivateFedStatus();    } else {      FSUtils.debug.error("FSAccountUtils.stringToObject():" + " You have modified Active/InActive in iDS ");      throw new FSAccountMgmtException(IFSConstants.INVALID_ACT_FED_INFO_IN_IDS,null);    }    if (str.hasMoreTokens()) {      token=str.nextToken();      if (token != null && token.equalsIgnoreCase(IFSConstants.AFFILIATED)) {        fedInfoObject.setAffiliation(true);      }    }  } catch (  NoSuchElementException nsee) {    FSUtils.debug.error("FSAccountUtils.stringToObject() : NoSuchElementException: ",nsee);    throw new FSAccountMgmtException(nsee.getMessage());  }  return fedInfoObject;}  }
class C{  private Set<Class<? extends Annotation>> annotationsToExclude(){  Set<Class<? extends Annotation>> result=new HashSet<Class<? extends Annotation>>();  if (this.jsfAnnotatedClassFactoryConfiguration.isExcludeScopedAnnotations()) {    result.add(ViewScoped.class);    result.add(SessionScoped.class);    result.add(RequestScoped.class);    result.add(NoneScoped.class);  }  return result;}  }
class C{  public boolean containsRuleActionId(String ruleActionId){  StringBuilder builder=new StringBuilder(ruleActionId.length() + 2);  builder.append(ruleActionId).append(Constants.KEY_SEPARATOR).append(Character.MAX_VALUE);  return getAggregationMap().subMap(ruleActionId,builder.toString()).size() > 0;}  }
class C{  public static String append(final String value,final String... appends){  return appendArray(value,appends);}  }
class C{  public void write(Tag tag,RandomAccessFile raf,RandomAccessFile rafTemp) throws CannotWriteException, IOException {  logger.config("Writing tag");  MetadataBlockInfo blockInfo=new MetadataBlockInfo();  FlacStreamReader flacStream=new FlacStreamReader(raf);  try {    flacStream.findStream();  } catch (  CannotReadException cre) {    throw new CannotWriteException(cre.getMessage());  }  boolean isLastBlock=false;  while (!isLastBlock) {    try {      MetadataBlockHeader mbh=MetadataBlockHeader.readHeader(raf);      if (mbh.getBlockType() != null) {switch (mbh.getBlockType()) {case STREAMINFO:{            blockInfo.streamInfoBlock=new MetadataBlock(mbh,new MetadataBlockDataStreamInfo(mbh,raf));            break;          }case VORBIS_COMMENT:case PADDING:case PICTURE:{          raf.seek(raf.getFilePointer() + mbh.getDataLength());          MetadataBlockData mbd=new MetadataBlockDataPadding(mbh.getDataLength());          blockInfo.metadataBlockPadding.add(new MetadataBlock(mbh,mbd));          break;        }case APPLICATION:{        MetadataBlockData mbd=new MetadataBlockDataApplication(mbh,raf);        blockInfo.metadataBlockApplication.add(new MetadataBlock(mbh,mbd));        break;      }case SEEKTABLE:{      MetadataBlockData mbd=new MetadataBlockDataSeekTable(mbh,raf);      blockInfo.metadataBlockSeekTable.add(new MetadataBlock(mbh,mbd));      break;    }case CUESHEET:{    MetadataBlockData mbd=new MetadataBlockDataCueSheet(mbh,raf);    blockInfo.metadataBlockCueSheet.add(new MetadataBlock(mbh,mbd));    break;  }default :{  raf.seek(raf.getFilePointer() + mbh.getDataLength());  break;}}}isLastBlock=mbh.isLastBlock();} catch (CannotReadException cre) {throw new CannotWriteException(cre.getMessage());}}int availableRoom=computeAvailableRoom(blockInfo);int newTagSize=tc.convert(tag).limit();int neededRoom=newTagSize + computeNeededRoom(blockInfo);raf.seek(flacStream.getStartOfFlacInFile());logger.config("Writing tag available bytes:" + availableRoom + ":needed bytes:"+ neededRoom);if ((availableRoom == neededRoom) || (availableRoom > neededRoom + MetadataBlockHeader.HEADER_LENGTH)) {raf.seek(flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH);raf.write(blockInfo.streamInfoBlock.getHeader().getBytesWithoutIsLastBlockFlag());raf.write(blockInfo.streamInfoBlock.getData().getBytes());for (MetadataBlock aMetadataBlockApplication : blockInfo.metadataBlockApplication) {raf.write(aMetadataBlockApplication.getHeader().getBytesWithoutIsLastBlockFlag());raf.write(aMetadataBlockApplication.getData().getBytes());}for (MetadataBlock aMetadataBlockSeekTable : blockInfo.metadataBlockSeekTable) {raf.write(aMetadataBlockSeekTable.getHeader().getBytesWithoutIsLastBlockFlag());raf.write(aMetadataBlockSeekTable.getData().getBytes());}for (MetadataBlock aMetadataBlockCueSheet : blockInfo.metadataBlockCueSheet) {raf.write(aMetadataBlockCueSheet.getHeader().getBytesWithoutIsLastBlockFlag());raf.write(aMetadataBlockCueSheet.getData().getBytes());}raf.getChannel().write(tc.convert(tag,availableRoom - neededRoom));} else {if (flacStream.getStartOfFlacInFile() > 0) {raf.seek(0);rafTemp.getChannel().transferFrom(raf.getChannel(),0,flacStream.getStartOfFlacInFile());rafTemp.seek(flacStream.getStartOfFlacInFile());}rafTemp.writeBytes(FlacStreamReader.FLAC_STREAM_IDENTIFIER);rafTemp.writeByte(0);int uptoStreamHeaderSize=flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH + MetadataBlockHeader.BLOCK_TYPE_LENGTH;rafTemp.seek(uptoStreamHeaderSize);raf.seek(uptoStreamHeaderSize);rafTemp.getChannel().transferFrom(raf.getChannel(),uptoStreamHeaderSize,MetadataBlockHeader.BLOCK_LENGTH + MetadataBlockDataStreamInfo.STREAM_INFO_DATA_LENGTH);int dataStartSize=flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH + MetadataBlockHeader.HEADER_LENGTH+ MetadataBlockDataStreamInfo.STREAM_INFO_DATA_LENGTH;rafTemp.seek(dataStartSize);for (MetadataBlock aMetadataBlockApplication : blockInfo.metadataBlockApplication) {rafTemp.write(aMetadataBlockApplication.getHeader().getBytesWithoutIsLastBlockFlag());rafTemp.write(aMetadataBlockApplication.getData().getBytes());}for (MetadataBlock aMetadataBlockSeekTable : blockInfo.metadataBlockSeekTable) {rafTemp.write(aMetadataBlockSeekTable.getHeader().getBytesWithoutIsLastBlockFlag());rafTemp.write(aMetadataBlockSeekTable.getData().getBytes());}for (MetadataBlock aMetadataBlockCueSheet : blockInfo.metadataBlockCueSheet) {rafTemp.write(aMetadataBlockCueSheet.getHeader().getBytesWithoutIsLastBlockFlag());rafTemp.write(aMetadataBlockCueSheet.getData().getBytes());}rafTemp.write(tc.convert(tag,FlacTagCreator.DEFAULT_PADDING).array());raf.seek(dataStartSize + availableRoom);long amountToBeWritten=raf.getChannel().size() - raf.getChannel().position();long written=0;long chunksize=TagOptionSingleton.getInstance().getWriteChunkSize();long count=amountToBeWritten / chunksize;long mod=amountToBeWritten % chunksize;for (int i=0; i < count; i++) {written+=rafTemp.getChannel().transferFrom(raf.getChannel(),rafTemp.getChannel().position(),chunksize);rafTemp.getChannel().position(rafTemp.getChannel().position() + chunksize);}written+=rafTemp.getChannel().transferFrom(raf.getChannel(),rafTemp.getChannel().position(),mod);if (written != amountToBeWritten) {throw new CannotWriteException("Was meant to write " + amountToBeWritten + " bytes but only written "+ written+ " bytes");}}}  }
class C{  @Nullable public static String overrideXmlContent(@NonNull Document document,@NonNull VdOverrideInfo info,@Nullable StringBuilder errorLog){  boolean isXmlFileContentChanged=false;  Element root=document.getDocumentElement();  NamedNodeMap attr=root.getAttributes();  if (info.needsOverrideWidth()) {    Node nodeAttr=attr.getNamedItem(ANDROID_WIDTH);    int overrideValue=info.getWidth();    int originalValue=parseDimension(overrideValue,nodeAttr,true);    if (originalValue != overrideValue) {      isXmlFileContentChanged=true;    }  }  if (info.needsOverrideHeight()) {    Node nodeAttr=attr.getNamedItem(ANDROID_HEIGHT);    int overrideValue=info.getHeight();    int originalValue=parseDimension(overrideValue,nodeAttr,true);    if (originalValue != overrideValue) {      isXmlFileContentChanged=true;    }  }  if (info.needsOverrideOpacity()) {    Node nodeAttr=attr.getNamedItem(ANDROID_ALPHA);    String opacityValue=String.format("%.2f",info.getOpacity() / 100.0f);    if (nodeAttr != null) {      nodeAttr.setTextContent(opacityValue);    } else {      root.setAttribute(ANDROID_ALPHA,opacityValue);    }    isXmlFileContentChanged=true;  }  if (info.needsOverrideAutoMirrored()) {    Node nodeAttr=attr.getNamedItem(ANDROID_AUTO_MIRRORED);    if (nodeAttr != null) {      nodeAttr.setTextContent("true");    } else {      root.setAttribute(ANDROID_AUTO_MIRRORED,"true");    }    isXmlFileContentChanged=true;  }  if (isXmlFileContentChanged) {    StringWriter stringOut=new StringWriter();    XMLSerializer serial=new XMLSerializer(stringOut,getPrettyPrintFormat());    try {      serial.serialize(document);    } catch (    IOException e) {      if (errorLog != null) {        errorLog.append("Exception while parsing XML file:\n").append(e.getMessage());      }    }    return stringOut.toString();  } else {    return null;  }}  }
class C{  protected void processAnnotationWebFilter(String className,AnnotationEntry ae,WebXml fragment){  String filterName=null;  List<ElementValuePair> evps=ae.getElementValuePairs();  for (  ElementValuePair evp : evps) {    String name=evp.getNameString();    if ("filterName".equals(name)) {      filterName=evp.getValue().stringifyValue();      break;    }  }  if (filterName == null) {    filterName=className;  }  FilterDef filterDef=fragment.getFilters().get(filterName);  FilterMap filterMap=new FilterMap();  boolean isWebXMLfilterDef;  if (filterDef == null) {    filterDef=new FilterDef();    filterDef.setFilterName(filterName);    filterDef.setFilterClass(className);    isWebXMLfilterDef=false;  } else {    isWebXMLfilterDef=true;  }  boolean urlPatternsSet=false;  boolean servletNamesSet=false;  boolean dispatchTypesSet=false;  String[] urlPatterns=null;  for (  ElementValuePair evp : evps) {    String name=evp.getNameString();    if ("value".equals(name) || "urlPatterns".equals(name)) {      if (urlPatternsSet) {        throw new IllegalArgumentException(sm.getString("contextConfig.urlPatternValue","WebFilter",className));      }      urlPatterns=processAnnotationsStringArray(evp.getValue());      urlPatternsSet=urlPatterns.length > 0;      for (      String urlPattern : urlPatterns) {        filterMap.addURLPattern(urlPattern);      }    } else     if ("servletNames".equals(name)) {      String[] servletNames=processAnnotationsStringArray(evp.getValue());      servletNamesSet=servletNames.length > 0;      for (      String servletName : servletNames) {        filterMap.addServletName(servletName);      }    } else     if ("dispatcherTypes".equals(name)) {      String[] dispatcherTypes=processAnnotationsStringArray(evp.getValue());      dispatchTypesSet=dispatcherTypes.length > 0;      for (      String dispatcherType : dispatcherTypes) {        filterMap.setDispatcher(dispatcherType);      }    } else     if ("description".equals(name)) {      if (filterDef.getDescription() == null) {        filterDef.setDescription(evp.getValue().stringifyValue());      }    } else     if ("displayName".equals(name)) {      if (filterDef.getDisplayName() == null) {        filterDef.setDisplayName(evp.getValue().stringifyValue());      }    } else     if ("largeIcon".equals(name)) {      if (filterDef.getLargeIcon() == null) {        filterDef.setLargeIcon(evp.getValue().stringifyValue());      }    } else     if ("smallIcon".equals(name)) {      if (filterDef.getSmallIcon() == null) {        filterDef.setSmallIcon(evp.getValue().stringifyValue());      }    } else     if ("asyncSupported".equals(name)) {      if (filterDef.getAsyncSupported() == null) {        filterDef.setAsyncSupported(evp.getValue().stringifyValue());      }    } else     if ("initParams".equals(name)) {      Map<String,String> initParams=processAnnotationWebInitParams(evp.getValue());      if (isWebXMLfilterDef) {        Map<String,String> webXMLInitParams=filterDef.getParameterMap();        for (        Map.Entry<String,String> entry : initParams.entrySet()) {          if (webXMLInitParams.get(entry.getKey()) == null) {            filterDef.addInitParameter(entry.getKey(),entry.getValue());          }        }      } else {        for (        Map.Entry<String,String> entry : initParams.entrySet()) {          filterDef.addInitParameter(entry.getKey(),entry.getValue());        }      }    }  }  if (!isWebXMLfilterDef) {    fragment.addFilter(filterDef);    if (urlPatternsSet || servletNamesSet) {      filterMap.setFilterName(filterName);      fragment.addFilterMapping(filterMap);    }  }  if (urlPatternsSet || dispatchTypesSet) {    Set<FilterMap> fmap=fragment.getFilterMappings();    FilterMap descMap=null;    for (    FilterMap map : fmap) {      if (filterName.equals(map.getFilterName())) {        descMap=map;        break;      }    }    if (descMap != null) {      String[] urlsPatterns=descMap.getURLPatterns();      if (urlPatternsSet && (urlsPatterns == null || urlsPatterns.length == 0)) {        for (        String urlPattern : filterMap.getURLPatterns()) {          descMap.addURLPattern(urlPattern);        }      }      String[] dispatcherNames=descMap.getDispatcherNames();      if (dispatchTypesSet && (dispatcherNames == null || dispatcherNames.length == 0)) {        for (        String dis : filterMap.getDispatcherNames()) {          descMap.setDispatcher(dis);        }      }    }  }}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  private static String modifyFilter(String filter,int objectType){switch (objectType) {case AMObject.ROLE:case AMObject.FILTERED_ROLE:    StringBuilder sb=new StringBuilder();  sb.append("(&").append(filter);sb.append("(objectClass=ldapsubentry)").append("(!(cn=");sb.append(AMConstants.CONTAINER_DEFAULT_TEMPLATE_ROLE);sb.append(")))");return sb.toString();}return filter;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignaturePropertiesType createSignaturePropertiesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignaturePropertiesTypeImpl();}  }
class C{  protected AbstractElement createDefaultRoot(){  BranchElement map=(BranchElement)createBranchElement(null,null);  Element line=createLeafElement(map,null,0,1);  Element[] lines=new Element[1];  lines[0]=line;  map.replace(0,0,lines);  return map;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public boolean validateSite(){  boolean returnVal=false;  String siteName=toString("host");  if ((siteName == null) || (siteName.trim().isEmpty())) {    writeInvalid(getLocalizedString("missing.site.name"));    returnVal=true;  } else {    getContext().setSessionAttribute(SessionAttributeNames.LB_SITE_NAME,siteName);    writeValid("ok.label");  }  setPath(null);  return returnVal;}  }
class C{  public static SubjectType fromString(String type){  if (type != null) {    for (    SubjectType subjectType : SubjectType.values()) {      if (type.equalsIgnoreCase(subjectType.type)) {        return subjectType;      }    }  }  return null;}  }
class C{  private void invalidSurrogate(int uuuuu) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.invalidHighSurrogate",Integer.toHexString(uuuuu)));}  }
class C{  public String toString(){  return "BadAttributeValueException: " + val;}  }
class C{  public void removeAncestorListener(AncestorListener listener){  AncestorNotifier ancestorNotifier=getAncestorNotifier();  if (ancestorNotifier == null) {    return;  }  ancestorNotifier.removeAncestorListener(listener);  if (ancestorNotifier.listenerList.getListenerList().length == 0) {    ancestorNotifier.removeAllListeners();    putClientProperty(JComponent_ANCESTOR_NOTIFIER,null);  }}  }
class C{  public InvalidFrameException(Throwable ex){  super(ex);}  }
class C{  public Object peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  super.layoutMinorAxis(targetSpan,axis,offsets,spans);  int col=0;  int ncells=getViewCount();  for (int cell=0; cell < ncells; cell++, col++) {    View cv=getView(cell);    for (; isFilled(col); col++)     ;    int colSpan=getColumnsOccupied(cv);    int rowSpan=getRowsOccupied(cv);    if (rowSpan > 1) {      int row0=rowIndex;      int row1=Math.min(rowIndex + rowSpan - 1,getRowCount() - 1);      spans[cell]=getMultiRowSpan(row0,row1);    }    if (colSpan > 1) {      col+=colSpan - 1;    }  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.ExtensionElementImpl();}  }
class C{  public PdfAConformanceException(String message){  super(message);}  }
class C{  public static boolean isValidNameChar(char c){  return isValidNameStartChar(c) || (c >= '0' && c <= '9');}  }
class C{  void remove_class(int p_index){  int old_class_count=class_count;  --class_count;  ClearanceMatrixRow[] new_row=new ClearanceMatrixRow[class_count];  int new_row_index=0;  for (int i=0; i < old_class_count; ++i) {    if (i == p_index) {      continue;    }    ClearanceMatrixRow curr_old_row=clearance_rows[i];    new_row[new_row_index]=new ClearanceMatrixRow(this,curr_old_row.name);    ClearanceMatrixRow curr_new_row=new_row[new_row_index];    int new_column_index=0;    for (int j=0; j < old_class_count; ++j) {      if (j == p_index) {        continue;      }      curr_new_row.column[new_column_index]=curr_old_row.column[j];      ++new_column_index;    }    ++new_row_index;  }  clearance_rows=new_row;}  }
class C{  public NSObject remove(String key){  return dict.remove(key);}  }
class C{  public long skip(long n) throws IOException {  if (n <= 0) {    return 0;  }  byte[] buffer=new byte[BUFFER_SIZE];  long remaining=Math.min(n,this.contentLength - this.pos);  long count=0;  while (remaining > 0) {    int l=read(buffer,0,(int)Math.min(BUFFER_SIZE,remaining));    if (l == -1) {      break;    }    count+=l;    remaining-=l;  }  this.pos+=count;  return count;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static <T>Function<JsonValue,Expression<T>,JsonValueException> expression(final Class<T> type){  return expression(type,Bindings.bindings());}  }
class C{  public UnknownUserException(Any a){  super();  except=a;}  }
class C{  public void moveDot(int dot){  moveDot(dot,Position.Bias.Forward);}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  private void rendering(byte[] pixel){synchronized (syncPreview) {    if (previewRender == null) {      return;    }    previewRender.rendering(pixel);  }}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  private void serializeCompactRDFArrayProp(XMPNode node,int indent) throws IOException, XMPException {  write('>');  writeNewline();  emitRDFArrayTag(node,true,indent + 1);  if (node.getOptions().isArrayAltText()) {    XMPNodeUtils.normalizeLangArray(node);  }  serializeCompactRDFElementProps(node,indent + 2);  emitRDFArrayTag(node,false,indent + 1);}  }
class C{  private boolean skipAccessCheck(Operation operation){  return operation.getClientConnection().hasPrivilege(Privilege.BYPASS_ACL,operation);}  }
class C{  public AuthnRequest createAuthnRequest(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_REQUEST,value);  if (obj == null) {    return new AuthnRequestImpl(value);  } else {    return (AuthnRequest)obj;  }}  }
class C{  public void run(boolean canUseStartTLS) throws ArgumentException {  resetBeforeRun();  resolveHostName();  resolveConnectionType(canUseStartTLS);  resolvePortNumber();  resolveTrustAndKeyManagers();  resolveCredentialLogin();  resolveCredentialPassword();  resolveConnectTimeout();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node childNode;  NodeList childNodes;  int nodeType;  String childName;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childNodes=employeeNode.getChildNodes();  for (int indexN1006C=0; indexN1006C < childNodes.getLength(); indexN1006C++) {    childNode=(Node)childNodes.item(indexN1006C);    nodeType=(int)childNode.getNodeType();    childName=childNode.getNodeName();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);    }  }  assertEqualsAutoCase("element","elementNames",expected,actual);}  }
class C{  public BrdFromSide(PlaSegmentInt p_line_segment,ShapeTile p_shape,boolean p_shove_to_the_left){  PlaPointFloat start_corner=p_line_segment.start_point_approx();  PlaPointFloat end_corner=p_line_segment.end_point_approx();  int border_line_count=p_shape.border_line_count();  PlaLineInt check_line=p_line_segment.get_line();  PlaPointFloat first_corner=p_shape.corner_approx(0);  PlaSide prev_side=check_line.side_of(first_corner);  int front_side_no=-1;  for (int index=1; index <= border_line_count; ++index) {    PlaPointFloat next_corner;    if (index == border_line_count)     next_corner=first_corner; else     next_corner=p_shape.corner_approx(index);    PlaSide next_side=check_line.side_of(next_corner);    if (prev_side != next_side) {      PlaPointFloat curr_intersection=p_shape.border_line(index - 1).intersection_approx(check_line);      if (!curr_intersection.is_NaN() && (curr_intersection.distance_square(start_corner) < curr_intersection.distance_square(end_corner))) {        front_side_no=index - 1;        break;      }    }    prev_side=next_side;  }  if (front_side_no < 0) {    System.out.println("CalcFromSide: start corner not found");    side_no=-1;    border_intersection=null;    return;  }  if (p_shove_to_the_left) {    side_no=(front_side_no + 2) % border_line_count;  } else {    side_no=(front_side_no + border_line_count - 2) % border_line_count;  }  PlaPointFloat prev_corner=p_shape.corner_approx(side_no);  PlaPointFloat next_corner=p_shape.corner_approx((side_no + 1) % border_line_count);  border_intersection=prev_corner.middle_point(next_corner);}  }
class C{  void registerFont(String path){  registerFont(path,null);}  }
class C{  public void disconnect(){synchronized (this) {    if (isClosed())     return;    if (connectState == ST_CONNECTED) {      impl.disconnect();    }    connectedAddress=null;    connectedPort=-1;    connectState=ST_NOT_CONNECTED;    explicitFilter=false;  }}  }
class C{  private ReplicationServer createReplicationServer(int replServerId,boolean all,String testCase) throws Exception {  SortedSet<String> servers=new TreeSet<>();  if (all) {    if (replServerId != replServerId1) {      servers.add("localhost:" + getRSPort(replServerId1));    }    if (replServerId != replServerId2) {      servers.add("localhost:" + getRSPort(replServerId2));    }    if (replServerId != replServerId3) {      servers.add("localhost:" + getRSPort(replServerId3));    }  }  int rsPort=getRSPort(replServerId);  String rsDir="generationIdTest" + replServerId + testCase+ "Db";  ReplicationServer replicationServer=new ReplicationServer(new ReplServerFakeConfiguration(rsPort,rsDir,0,replServerId,0,100,servers));  Thread.sleep(1000);  return replicationServer;}  }
class C{  public final void testGetEncoded02() throws IOException {  byte[] encoding=getDerEncoding();  byte[] encodingCopy=encoding.clone();  PolicyQualifierInfo i=new PolicyQualifierInfo(encodingCopy);  byte[] encodingRet=i.getEncoded();  encodingRet[0]=(byte)0;  byte[] encodingRet1=i.getEncoded();  assertTrue(Arrays.equals(encoding,encodingRet1));}  }
class C{  public Builder populatedBuilder(){  return new Builder().setUUID(uuid).setName(name).setDescription(description).addPatterns(new HashSet<String>(patterns)).addActions(new HashMap<String,Boolean>(actions)).setCreatedBy(createdBy).setCreationDate(creationDate).setLastModifiedBy(lastModifiedBy).setLastModifiedDate(lastModifiedDate);}  }
class C{  public synchronized int size(){  return elementCount;}  }
class C{  public void repaint(Rectangle p_rect){  if (paint_immediately) {    board_panel.paintImmediately(p_rect);  } else {    board_panel.repaint(p_rect);  }}  }
class C{  @Inject public AuthorizationCodeRequestValidatorImpl(final RedirectUriValidator redirectUriValidator){  this.redirectUriValidator=redirectUriValidator;}  }
class C{  static PolicyDecision appendPolicyDecisionToPolicyDecision(PolicyDecision pd1,PolicyDecision pd2) throws PolicyException {  Map actionDecisions=pd1.getActionDecisions();  Iterator actionNames=actionDecisions.keySet().iterator();  while (actionNames.hasNext()) {    String actionName=(String)actionNames.next();    ActionDecision actionDecision=(ActionDecision)actionDecisions.get(actionName);    pd2.addActionDecision(actionDecision);  }  return pd2;}  }
class C{  public OrderService retrieveOrder(Long orderId,Handler<AsyncResult<Order>> resultHandler){  delegate.retrieveOrder(orderId,resultHandler);  return this;}  }
class C{  public static SearchFilter createPresenceFilter(AttributeType attributeType,Set<String> attributeOptions){  return new SearchFilter(FilterType.PRESENT,null,null,attributeType,attributeOptions,null,null,null,null,null,false);}  }
class C{  public static final short tertiaryOrder(int order){  return (short)CollationElementIteratorICU.tertiaryOrder(order);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported12.class,args);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("StandardServer[");  sb.append(getPort());  sb.append("]");  return (sb.toString());}  }
class C{  private <T extends AccessControlHandlerCfg>AccessControlHandler<T> loadHandler(String className,T configuration,boolean initialize) throws InitializationException {  try {    AccessControlHandlerCfgDefn definition=AccessControlHandlerCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends AccessControlHandler> providerClass=propertyDefinition.loadClass(className,AccessControlHandler.class);    AccessControlHandler<T> provider=providerClass.newInstance();    if (configuration != null) {      if (initialize) {        provider.initializeAccessControlHandler(configuration);      }    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!provider.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_AUTHZ_CONFIG_NOT_ACCEPTABLE.get(null,reasons));      }    }    return provider;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_AUTHZ_UNABLE_TO_INSTANTIATE_HANDLER.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private static <K,V>boolean mapsDiffer(Map<K,V> last,Map<K,V> attrs){  if (last == null) {    return (attrs != null && attrs.size() > 0);  }  return (!last.equals(attrs));}  }
class C{  public static BindResult unmodifiableBindResult(final BindResult result){  if (result instanceof UnmodifiableBindResultImpl) {    return result;  }  return new UnmodifiableBindResultImpl(result);}  }
class C{  @Override public void resetBuffer(){  resetBuffer(false);}  }
class C{  public BasicHttpEntity(){  super();  this.length=-1;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options){  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN)           break;        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private boolean isSessionUsedInWSFed(Set userSession,String userId){  if ((userSession == null) || userSession.isEmpty()) {    return false;  } else {    Object session=userSession.iterator().next();    return MultiProtocolUtils.usedInProtocol(session,SingleLogoutManager.WS_FED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  int nodeType;  NodeList gList;  Element genElement;  NamedNodeMap attrList;  Attr attrNode;  Attr removedAttr;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genNotNull",gen);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("genElementNotNull",genElement);  attrList=genElement.getAttributes();  attrNode=(Attr)attrList.getNamedItem("domestic");{    boolean success=false;    try {      removedAttr=genElement.removeAttributeNode(attrNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public void testCertificateFactory02(){  try {    CertificateFactory.getInstance(null);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i]);      fail("CertificateException must be thrown when type: ".concat(invalidValues[i]));    } catch (    CertificateException e) {    }  }}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected void remove(String contextName) throws Exception {  Context context=(Context)host.findChild(contextName);  if (context != null) {    if (log.isDebugEnabled())     log.debug(sm.getString("farmWarDeployer.undeployLocal",contextName));    context.stop();    String baseName=context.getBaseName();    File war=new File(host.getAppBaseFile(),baseName + ".war");    File dir=new File(host.getAppBaseFile(),baseName);    File xml=new File(configBase,baseName + ".xml");    if (war.exists()) {      if (!war.delete()) {        log.error(sm.getString("farmWarDeployer.deleteFail",war));      }    } else     if (dir.exists()) {      undeployDir(dir);    } else {      if (!xml.delete()) {        log.error(sm.getString("farmWarDeployer.deleteFail",xml));      }    }    check(contextName);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfString copyTo(PdfDocument document){  return (PdfString)super.copyTo(document,true);}  }
class C{  public void updateServerConfigInheritance(String serverName,Set toInherit,Set notToInherit) throws AMConsoleException {  String[] param={serverName};  logEvent("ATTEMPT_MODIFY_SERVER_INHERITANCE",param);  try {    SSOToken ssoToken=getUserSSOToken();    Map defaultValues=ServerConfiguration.getDefaults(ssoToken);    Map svrProperties=ServerConfiguration.getServerInstance(ssoToken,serverName);    if ((toInherit != null) && !toInherit.isEmpty()) {      Set toRemove=new HashSet();      for (Iterator i=toInherit.iterator(); i.hasNext(); ) {        String name=(String)i.next();        if (svrProperties.containsKey(name)) {          toRemove.add(name);        }      }      if (!toRemove.isEmpty()) {        ServerConfiguration.removeServerConfiguration(ssoToken,serverName,toRemove);      }    }    if ((notToInherit != null) && !notToInherit.isEmpty()) {      Map toAdd=new HashMap();      for (Iterator i=notToInherit.iterator(); i.hasNext(); ) {        String name=(String)i.next();        if (!svrProperties.containsKey(name)) {          toAdd.put(name,defaultValues.get(name));        }      }      if (!toAdd.isEmpty()) {        try {          ServerConfiguration.setServerInstance(ssoToken,serverName,toAdd);        } catch (        UnknownPropertyNameException ex) {        }      }    }    logEvent("SUCCEED_MODIFY_SERVER_INHERITANCE",param);  } catch (  ConfigurationException e) {    String[] params={serverName,e.getMessage()};    logEvent("CONFIGURATION_EXCEPTION_MODIFY_SERVER_INHERITANCE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  IOException e) {    String[] params={serverName,e.getMessage()};    logEvent("IO_EXCEPTION_MODIFY_SERVER_INHERITANCE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={serverName,e.getMessage()};    logEvent("SMS_EXCEPTION_MODIFY_SERVER_INHERITANCE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={serverName,e.getMessage()};    logEvent("SSO_EXCEPTION_MODIFY_SERVER_INHERITANCE",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public <M extends Configuration>void registerAddListener(SetRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  ConfigAddListener adaptor=new ConfigAddListenerAdaptor<>(serverContext,path,d,listener);  registerAddListener(baseDN,adaptor);}  }
class C{  public static Entry createEntry(DN dn){  if (dn == null || dn.isRootDN()) {    return null;  }  RDN rdn=dn.rdn();  ObjectClass structuralClass=DirectoryServer.getSchema().getObjectClass(getObjectClassName(rdn));  LinkedHashMap<ObjectClass,String> objectClasses=new LinkedHashMap<>(3);  objectClasses.put(CoreSchema.getTopObjectClass(),OC_TOP);  objectClasses.put(structuralClass,structuralClass.getNameOrOID());  LinkedHashMap<AttributeType,List<Attribute>> userAttributes=new LinkedHashMap<>();  LinkedHashMap<AttributeType,List<Attribute>> operationalAttributes=new LinkedHashMap<>();  boolean extensibleObjectAdded=false;  for (  AVA ava : rdn) {    AttributeType attrType=ava.getAttributeType();    if (!structuralClass.isRequiredOrOptional(attrType) && !extensibleObjectAdded) {      objectClasses.put(CoreSchema.getTopObjectClass(),OC_EXTENSIBLE_OBJECT);      extensibleObjectAdded=true;    }    addAttributeValue(attrType.isOperational() ? operationalAttributes : userAttributes,ava);  }  return new Entry(dn,objectClasses,userAttributes,operationalAttributes);}  }
class C{  private static boolean isPowerOfTwo(int value){  return (value & (value - 1)) == 0;}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  public boolean isContentValid(){  return contains("iss","sub","aud","exp") && !isExpiryUnreasonable() && !isExpired()&& !isNowBeforeNbf()&& !isIssuedAtUnreasonable();}  }
class C{  public boolean isEdit(){  return getFieldFlag(FF_EDIT);}  }
class C{  private void initMnemonics(){  mnemonicToIndexMap=new Hashtable<Integer,Integer>();  mnemonicInputMap=new ComponentInputMapUIResource(tabPane);  mnemonicInputMap.setParent(SwingUtilities.getUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW));  SwingUtilities.replaceUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW,mnemonicInputMap);}  }
class C{  private PointF transformCoordTouchToBitmap(float x,float y,boolean clipToBitmap){  matrix.getValues(m);  float origW=getDrawable().getIntrinsicWidth();  float origH=getDrawable().getIntrinsicHeight();  float transX=m[Matrix.MTRANS_X];  float transY=m[Matrix.MTRANS_Y];  float finalX=((x - transX) * origW) / getImageWidth();  float finalY=((y - transY) * origH) / getImageHeight();  if (clipToBitmap) {    finalX=Math.min(Math.max(finalX,0),origW);    finalY=Math.min(Math.max(finalY,0),origH);  }  return new PointF(finalX,finalY);}  }
class C{  protected void flushRequirementChanges(){  if (isLoaded()) {    super.flushRequirementChanges();  }}  }
class C{  public static String tagSwap(String orig,boolean bXML){  Map map=instance.defValues;  for (  Object okey : map.keySet().toArray()) {    String key=(String)okey;    String value=(String)map.get(key);    if (value != null) {      value=value.replaceAll("[$]","\\\\\\$");      if (preappendSlash.contains(key)) {        if (bXML) {          value=XMLUtils.escapeSpecialCharacters(value);        }        orig=orig.replaceAll("/@" + key + "@",value);        if (trimSlash.contains(key)) {          orig=orig.replaceAll("@" + key + "@",value.substring(1));        }      } else       if (key.equals(SetupConstants.CONFIG_VAR_ROOT_SUFFIX)) {        String normalized=DNUtils.normalizeDN(value);        String tmp=normalized.replaceAll(",","^");        tmp=(bXML) ? XMLUtils.escapeSpecialCharacters(tmp) : tmp;        orig=orig.replaceAll("@" + SetupConstants.SM_ROOT_SUFFIX_HAT + "@",tmp);        String rfced=DN.valueOf(value).toString();        tmp=(bXML) ? XMLUtils.escapeSpecialCharacters(rfced) : rfced;        orig=orig.replaceAll("@" + SetupConstants.CONFIG_VAR_ROOT_SUFFIX + "@",tmp);      } else       if (key.equals(SetupConstants.SM_ROOT_SUFFIX_HAT) || key.equals(SetupConstants.NORMALIZED_RS) || key.equals(SetupConstants.NORMALIZED_ORG_BASE)|| key.equals(SetupConstants.SM_ROOT_SUFFIX_HAT)|| key.equals(SetupConstants.CONFIG_VAR_SESSION_ROOT_SUFFIX)|| key.equals(SetupConstants.CONFIG_VAR_SESSION_STORE_TYPE)) {        orig=orig.replaceAll("@" + key + "@",value);      } else {        if (bXML) {          value=XMLUtils.escapeSpecialCharacters(value);        }        orig=orig.replaceAll("@" + key + "@",value);      }    }  }  orig=replaceRandomSecureTags(orig,RANDOM_SECURE,128);  orig=replaceRandomSecureTags(orig,RANDOM_SECURE_256,256);  return orig;}  }
class C{  public TRANSIENT(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public void schedule(TaskRunnable task,Date time) throws IllegalArgumentException, IllegalStateException {  if (shutdownThePool) {    throw new IllegalStateException("The timers have been shuted down!");  } else {    if ((task != null) && (time != null)) {      HeadTaskRunnable head=null;      do {        head=task.getHeadTask();        if (head != null) {          if (head.acquireValidLock()) {            try {              if (head == task.getHeadTask()) {                if (head.scheduledExecutionTime() == time.getTime()) {                  return;                } else {                  if (!head.isTimedOut()) {                    throw new IllegalStateException("The task has been scheduled!");                  }                }              }            }  finally {              head.releaseLockAndNotify();            }          }        }      } while (head != task.getHeadTask());synchronized (taskList) {        if ((head=(HeadTaskRunnable)taskList.get(time)) == null) {          task.setNext(null);          taskList.put(time,new HeadTaskRunnable(this,task,time));        }      }      if (head == null) {synchronized (this) {          if ((nextRun == null) || (time.getTime() < nextRun.getTime())) {            nextRun=time;            long delay=time.getTime() - currentTimeMillis();            scheduler.setWait(((delay < 0) ? 0 : delay));          }        }      } else {        if (head.acquireValidLock()) {          try {            task.setHeadTask(head);            TaskRunnable tailTask=head.tail();            task.setPrevious(tailTask);            tailTask.setNext(task);            task.setNext(null);            head.setTail(task);          }  finally {            head.releaseLockAndNotify();          }        } else {          schedule(task,time);        }      }    } else {      throw new IllegalArgumentException();    }  }}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addObjectCreate(prefix + "Engine","org.apache.catalina.core.StandardEngine","className");  digester.addSetProperties(prefix + "Engine");  digester.addRule(prefix + "Engine",new LifecycleListenerRule("org.apache.catalina.startup.EngineConfig","engineConfigClass"));  digester.addSetNext(prefix + "Engine","setContainer","org.apache.catalina.Engine");  digester.addObjectCreate(prefix + "Engine/Cluster",null,"className");  digester.addSetProperties(prefix + "Engine/Cluster");  digester.addSetNext(prefix + "Engine/Cluster","setCluster","org.apache.catalina.Cluster");  digester.addObjectCreate(prefix + "Engine/Listener",null,"className");  digester.addSetProperties(prefix + "Engine/Listener");  digester.addSetNext(prefix + "Engine/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addRuleSet(new RealmRuleSet(prefix + "Engine/"));  digester.addObjectCreate(prefix + "Engine/Valve",null,"className");  digester.addSetProperties(prefix + "Engine/Valve");  digester.addSetNext(prefix + "Engine/Valve","addValve","org.apache.catalina.Valve");}  }
class C{  public NO_MEMORY(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public String toString(){  if (keyCode == KeyEvent.VK_UNDEFINED) {    return getModifiersText(modifiers) + "typed " + keyChar;  } else {    return getModifiersText(modifiers) + (onKeyRelease ? "released" : "pressed") + " "+ getVKText(keyCode);  }}  }
class C{  @ConstructorProperties({"text"}) public JButton(String text){  this(text,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementaddnewattribute.class,args);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  protected void invalidate(boolean first){  super.invalidate(first);  getParent().invalidate(true);}  }
class C{  public Object readObject() throws SQLException {  Object attrib=getNextAttribute();  if (attrib instanceof Struct) {    Struct s=(Struct)attrib;    Class<?> c=map.get(s.getSQLTypeName());    if (c != null) {      SQLData obj=null;      try {        obj=(SQLData)ReflectUtil.newInstance(c);      } catch (      Exception ex) {        throw new SQLException("Unable to Instantiate: ",ex);      }      Object attribs[]=s.getAttributes(map);      SQLInputImpl sqlInput=new SQLInputImpl(attribs,map);      obj.readSQL(sqlInput,s.getSQLTypeName());      return obj;    }  }  return attrib;}  }
class C{  public void addAttributeNames(Set<String> names){  if (names != null) {    if (attributeNames == null) {      attributeNames=new HashSet<String>();    }    attributeNames.addAll(names);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic256Element createBasic256Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic256ElementImpl();}  }
class C{  public static long parseLong(String string) throws NumberFormatException {  return parseLong(string,10);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  Attribute[] attrs=toArray();  s.writeInt(attrs.length);  for (int i=0; i < attrs.length; i++) {    s.writeObject(attrs[i]);  }}  }
class C{  public static <T>T unmarshal(Reader xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  IdentityHashMap m=new IdentityHashMap();  Short s0=new Short((short)0);  m.put(s0,"short");  m.put(null,"test");  Integer i0=new Integer(0);  m.put(i0,"int");  assertEquals("Failed adding to bucket containing null","short",m.get(s0));  assertEquals("Failed adding to bucket containing null2","int",m.get(i0));}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  private void putResultIntoCache(String tokenIdStr,String resource,Map envParams,PolicyDecision pd) throws SSOException, DelegationException {  if (resource != null) {    List<Object> al=new ArrayList<Object>(2);    al.add(0,envParams);    al.add(1,pd);synchronized (delegationCache) {      Map<String,List<Object>> items=delegationCache.get(tokenIdStr);      if (items == null) {        items=Collections.synchronizedMap(new HashMap<String,List<Object>>());        delegationCache.put(tokenIdStr,items);      }      items.put(resource,al);    }  }}  }
class C{  public void testShiftLeft3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=27;  byte rBytes[]={12,1,-61,39,-11,-94,-55,106,-40,31,-119,24,-48,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean equals(DisplayMode dm){  if (dm == null) {    return false;  }  return (getHeight() == dm.getHeight() && getWidth() == dm.getWidth() && getBitDepth() == dm.getBitDepth() && getRefreshRate() == dm.getRefreshRate());}  }
class C{  boolean changeConfig(ReplicationDomainCfg newConfig){  boolean needToRestartSession=!newConfig.getReplicationServer().equals(config.getReplicationServer()) || newConfig.getWindowSize() != config.getWindowSize() || newConfig.getHeartbeatInterval() != config.getHeartbeatInterval() || newConfig.getGroupId() != config.getGroupId();  this.config=newConfig;  this.rcvWindow=newConfig.getWindowSize();  this.halfRcvWindow=this.rcvWindow / 2;  return needToRestartSession;}  }
class C{  public void add(T value){  data.add(value);}  }
class C{  public ObjectIdentifier(int[] oid){  validateOid(oid);  this.oid=oid;}  }
class C{  ResourceIndexManager(ResourceManager resourceManager){  this.resourceManager=resourceManager;}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  public void onDataAvailable() throws IOException {  if (log.isDebugEnabled()) {    log.debug("wsFrameServer.onDataAvailable");  }  while (isOpen() && socketWrapper.isReadyForRead()) {    int read=socketWrapper.read(false,inputBuffer,writePos,inputBuffer.length - writePos);    if (read <= 0) {      return;    }    if (log.isDebugEnabled()) {      log.debug(sm.getString("wsFrameServer.bytesRead",Integer.toString(read)));    }    writePos+=read;    processInputBuffer();  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encode(parameter.getName(),encoding);    final String value=parameter.getValue();    final String encodedValue=value != null ? encode(value,encoding) : "";    if (result.length() > 0)     result.append(PARAMETER_SEPARATOR);    result.append(encodedName);    result.append(NAME_VALUE_SEPARATOR);    result.append(encodedValue);  }  return result.toString();}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  boolean isValid=maxOffset >= -1 && formats.length > maxOffset && offsets.length > maxOffset && argumentNumbers.length > maxOffset;  if (isValid) {    int lastOffset=pattern.length() + 1;    for (int i=maxOffset; i >= 0; --i) {      if ((offsets[i] < 0) || (offsets[i] > lastOffset)) {        isValid=false;        break;      } else {        lastOffset=offsets[i];      }    }  }  if (!isValid) {    throw new InvalidObjectException("Could not reconstruct MessageFormat from corrupt stream.");  }}  }
class C{  private void detectNecessity(AMIdentity identity) throws AuthLoginException, IdRepoException, SSOException {  if (isOptional && StringUtils.isBlank(realmOathService.getSkippableAttributeName())) {    isOptional=false;  }  if (isOptional) {    Set response=identity.getAttribute(realmOathService.getSkippableAttributeName());    if (response != null && !response.isEmpty()) {      String tmp=(String)response.iterator().next();      userConfiguredSkippable=Integer.valueOf(tmp);    }  }}  }
class C{  public Object object(){  return m_obj;}  }
class C{  public boolean isNoRetVal(){  return noRetVal;}  }
class C{  public String toString(){  return (sun.security.util.ResourcesMgr.getString("LoginModuleControlFlag.") + controlFlag);}  }
class C{  public int charAt(int pos){  return text.get(pos + text.start).getUnicode();}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof List) {    JSONArray.writeJSONString((List)value,out);    return;  }  out.write(value.toString());}  }
class C{  public Cursor fetch(Long failedActionID){  if (failedActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_FAILEDACTIONID + "=" + failedActionID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public synchronized void clearCache(){  serviceNameAndOCs=new CaseInsensitiveHashMap();  serviceVersions=new CaseInsensitiveHashMap();  serviceNameDefaultVersion=new CaseInsensitiveHashMap();  accessManagerServers=null;  amsdkChecked=false;  CachedSMSEntry.clearCache();  CachedSubEntries.clearCache();  PluginSchemaImpl.clearCache();  ServiceInstanceImpl.clearCache();  ServiceConfigImpl.clearCache();  ServiceConfigManagerImpl.clearCache();  OrganizationConfigManagerImpl.clearCache();  OrgConfigViaAMSDK.clearCache();  try {    checkFlags(token);    OrganizationConfigManager.initializeFlags();    DNMapper.clearCache();  } catch (  Exception e) {    debug.error("ServiceManager::clearCache unable to " + "re-initialize global flags",e);  }}  }
class C{  @ConstructorProperties({"scaleX","shearY","shearX","scaleY","translateX","translateY"}) public AffineTransform(float m00,float m10,float m01,float m11,float m02,float m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  public static void deregisterKeyManagerProvider(DN providerDN){  directoryServer.keyManagerProviders.remove(providerDN);}  }
class C{  public SQLDataException(Throwable cause){  super(cause);}  }
class C{  private void copyChunk(final GUID guid,final InputStream source,final OutputStream destination) throws IOException {  final long chunkSize=Utils.readUINT64(source);  destination.write(guid.getBytes());  Utils.writeUINT64(chunkSize,destination);  Utils.copy(source,destination,chunkSize - 24);}  }
class C{  @Override public String toString(){  return type + "," + (colorR & 0xFF)+ ","+ (colorG & 0xFF)+ ","+ (colorB & 0xFF)+ ","+ (colorA & 0xFF)+ ","+ thickness+ ","+ x1+ ","+ y1+ ","+ x2+ ","+ y2;}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public byte[] crypt(byte[] pw,byte[] salt){  int[] r;synchronized (digestLock) {    r=_crypt(pw,salt);  }  int zeroCount=0;  for (int i=r.length - 1; i >= 0; --i) {    if (r[i] != 0) {      break;    }    ++zeroCount;  }  byte[] b=new byte[r.length - zeroCount];  for (int i=0; i < b.length; ++i) {    b[i]=(byte)r[i];  }  return b;}  }
class C{  public LibPackage add(String p_name,LibPackagePin[] p_pin_arr,PlaShape[] p_outline,DsnPackageKeepout[] p_keepout_arr,DsnPackageKeepout[] p_via_keepout_arr,DsnPackageKeepout[] p_place_keepout_arr,boolean p_is_front){  LibPackage new_package=new LibPackage(p_name,pkg_count() + 1,p_pin_arr,p_outline,p_keepout_arr,p_via_keepout_arr,p_place_keepout_arr,p_is_front,this);  package_list.add(new_package);  return new_package;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#processingInstruction: " + target + ", "+ data);  if (m_contentHandler != null) {    m_contentHandler.processingInstruction(target,data);  }}  }
class C{  public SessionIndex createSessionIndex(String value){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SESSION_INDEX,value);  if (obj == null) {    return new SessionIndexImpl(value);  } else {    return (SessionIndex)obj;  }}  }
class C{  public void resetForEditing(Rule savedRule){  rule=savedRule;  resetFilterPath();  resetActionPath();}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterDelete(Context context,DeleteRequest request,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleDelete(context,request),auditor,request);}  }
class C{  int peekChar(int readAhead){  int target=current.cursor + readAhead;  if (target < current.stream.length) {    return current.stream[target];  }  return -1;}  }
class C{  public FrameBodyTOWN(){}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {  setDoctypeSystem(systemId);  setDoctypePublic(publicId);  m_elemContext.m_elementName=name;  m_inDoctype=true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509Pkcs7Token10Element createWssX509Pkcs7Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509Pkcs7Token10ElementImpl();}  }
class C{  protected void flushWaitingObjects(){  PdfXrefTable xref=document.getXref();  boolean needFlush=true;  while (needFlush) {    needFlush=false;    for (int i=1; i < xref.size(); i++) {      PdfIndirectReference indirectReference=xref.get(i);      if (indirectReference != null && indirectReference.checkState(PdfObject.MUST_BE_FLUSHED)) {        PdfObject obj=indirectReference.getRefersTo(false);        if (obj != null) {          obj.flush();          needFlush=true;        }      }    }  }  if (objectStream != null && objectStream.getSize() > 0) {    objectStream.flush();    objectStream=null;  }}  }
class C{  public ELParseException(String pMessage){  super(pMessage);}  }
class C{  private ReferentialIntegrityChangeListener(ManagedObjectPath<C,S> path,LocalizableMessage message){  this.path=path;  this.message=message;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnewchilddiffdocument.class,args);}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public void removeAttribute(Attr attr){  checkCache();  if (m_attrSet == null || m_attrSet.size() == 0) {    return;  }  modify(attr,ModificationType.DELETE);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  @Override public boolean isAccessReplicate(){  long replDelta=System.currentTimeMillis() - getLastTimeReplicated();  if (maxInactiveInterval >= 0 && replDelta > (maxInactiveInterval * 1000L)) {    return true;  }  return false;}  }
class C{  @CallSuper public void onSupportActionModeFinished(ActionMode mode){}  }
class C{  public Location subtract(Vector vec){  this.x-=vec.getX();  this.y-=vec.getY();  this.z-=vec.getZ();  return this;}  }
class C{  private boolean accept(char... acceptableSymbols){  boolean symbolPresent=false;  for (  char c : acceptableSymbols) {    if (data[index] == c)     symbolPresent=true;  }  return symbolPresent;}  }
class C{  public boolean find(){  int nextSearchIndex=last;  if (nextSearchIndex == first)   nextSearchIndex++;  if (nextSearchIndex < from)   nextSearchIndex=from;  if (nextSearchIndex > to) {    for (int i=0; i < groups.length; i++)     groups[i]=-1;    return false;  }  return search(nextSearchIndex);}  }
class C{  public void deleteSubConfigurations(Set names) throws AMConsoleException {  subConfigMeta.deleteSubConfigurations(names);}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  public void testGetLocalName1() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String localName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  addrAttr=testAddr.getAttributeNode("emp:domestic");  localName=addrAttr.getLocalName();  assertEquals("localName","domestic",localName);}  }
class C{  public synchronized void damageRange(Position pos0,Position pos1){  if (component == null) {    p0.clear();    lastDoc=null;    return;  }  boolean addToQueue=p0.isEmpty();  Document curDoc=component.getDocument();  if (curDoc != lastDoc) {    if (!p0.isEmpty()) {      p0.clear();      p1.clear();    }    lastDoc=curDoc;  }  p0.add(pos0);  p1.add(pos1);  if (addToQueue) {    SwingUtilities.invokeLater(this);  }}  }
class C{  public void removeDomain(String domain) throws UMSException {  if (m_dcRoot == null)   return;  DomainComponent dc=getDomainComponent(domain);  m_dcRoot.removeChild(dc);}  }
class C{  public static byte[] compute(PRFAlgorithm prfAlgorithm,byte[] secret,String label,byte[] seed,int size){switch (prfAlgorithm) {case TLS_PRF_SHA256:case TLS_PRF_SHA384:    return computeTls12(secret,label,seed,size,prfAlgorithm.getMacAlgorithm().getJavaName());case TLS_PRF_LEGACY:  return TlsUtils.PRF_legacy(secret,label,seed,size);default :throw new UnsupportedOperationException("PRF computation for different" + " protocol versions is not supported yet");}}  }
class C{  private void sumWithCompensation(double value){  double tmp=value - sumCompensation;  double velvel=sum + tmp;  sumCompensation=(velvel - sum) - tmp;  sum=velvel;}  }
class C{  void synchronizeSchemaModifications(List<Modification> modifications){  ModifyOperation op=new ModifyOperationBasis(conn,nextOperationID(),nextMessageID(),null,DirectoryServer.getSchemaDN(),modifications);  final Entry schema;  try {    schema=DirectoryServer.getEntry(DirectoryServer.getSchemaDN());  } catch (  DirectoryException e) {    logger.traceException(e);    logger.error(ERR_BACKEND_SEARCH_ENTRY.get(DirectoryServer.getSchemaDN().toString(),stackTraceToSingleLineString(e)));    return;  }  LocalBackendModifyOperation localOp=new LocalBackendModifyOperation(op);  CSN csn=generateCSN(localOp);  OperationContext ctx=new ModifyContext(csn,getEntryUUID(schema));  localOp.setAttachment(SYNCHROCONTEXT,ctx);  localOp.setResultCode(ResultCode.SUCCESS);  synchronize(localOp);}  }
class C{  public static synchronized void clearLoggersContents(){  ACCESS_TEXT_WRITER.clear();  ERROR_TEXT_WRITER.clear();  DEBUG_TEXT_WRITER.clear();  clearSystemOutContents();  clearSystemErrContents();}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.KeyDescriptorType createKeyDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.KeyDescriptorTypeImpl();}  }
class C{  private void checkDomainDirectories(final File changelogPath) throws ChangelogException {  final File[] dnDirectories=changelogPath.listFiles(DOMAIN_FILE_FILTER);  if (dnDirectories != null) {    final Set<String> domainIdsFromFileSystem=new HashSet<>();    for (    final File dnDir : dnDirectories) {      final String fileName=dnDir.getName();      final String domainId=fileName.substring(0,fileName.length() - DOMAIN_SUFFIX.length());      domainIdsFromFileSystem.add(domainId);    }    final Set<String> expectedDomainIds=new HashSet<>(domains.values());    if (!domainIdsFromFileSystem.equals(expectedDomainIds)) {      throw new ChangelogException(ERR_CHANGELOG_INCOHERENT_DOMAIN_STATE.get(domains.values().toString(),domainIdsFromFileSystem.toString()));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  NodeList childList;  Node childToRemove;  Node removedChild;  Node parentNode;  doc=(Document)load("hc_staff",true);  rootNode=doc.getDocumentElement();  childList=rootNode.getChildNodes();  childToRemove=childList.item(1);  removedChild=rootNode.removeChild(childToRemove);  parentNode=removedChild.getParentNode();  assertNull("parentNodeNull",parentNode);}  }
class C{  public UnsupportedEmptyCollection(){  this.perms=new Permissions();  perms.setReadOnly();}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public int hashCode(){  return super.hashCode() ^ jdate.hashCode();}  }
class C{  private static Set removeResourceName(Set resourceNames,ServiceType serviceType,String resourceName){  Set answer=resourceNames;  if ((resourceNames != null) && (serviceType != null) && (resourceName != null)) {    answer=new HashSet(resourceNames.size());    answer.addAll(resourceNames);    Iterator iter=resourceNames.iterator();    while (iter.hasNext()) {      String rName=(String)iter.next();      if (serviceType.compare(resourceName,rName,false).equals(ResourceMatch.EXACT_MATCH)) {        answer.remove(rName);      }    }  }  return answer;}  }
class C{  public static StringBuilder toLowerCase(final String s,final StringBuilder builder){  Reject.ifNull(s);  Reject.ifNull(builder);  final int length=s.length();  builder.ensureCapacity(builder.length() + length);  for (int i=0; i < length; i++) {    final ASCIICharProp cp=ASCIICharProp.valueOf(s.charAt(i));    if (cp != null) {      builder.append(cp.toLowerCase());    } else {      builder.append(s.substring(i).toLowerCase(Locale.ENGLISH));      return builder;    }  }  return builder;}  }
class C{  @Override public void removeNote(String name){  notes.remove(name);}  }
class C{  public SIPHeader parse() throws ParseException {  ReplyTo replyTo=new ReplyTo();  if (debug)   dbg_enter("ReplyTo.parse");  try {    headerName(TokenTypes.REPLY_TO);    replyTo.setHeaderName(SIPHeaderNames.REPLY_TO);    super.parse(replyTo);    return replyTo;  }  finally {    if (debug)     dbg_leave("ReplyTo.parse");  }}  }
class C{  private void expandNode(Node currentNode){  Node neighbours[]=new Node[8];  neighbours[0]=new Node(currentNode.x + unit,currentNode.y);  neighbours[1]=new Node(currentNode.x + unit,currentNode.y + unit);  neighbours[2]=new Node(currentNode.x + unit,currentNode.y - unit);  neighbours[3]=new Node(currentNode.x - unit,currentNode.y);  neighbours[4]=new Node(currentNode.x - unit,currentNode.y + unit);  neighbours[5]=new Node(currentNode.x - unit,currentNode.y - unit);  neighbours[6]=new Node(currentNode.x,currentNode.y + unit);  neighbours[7]=new Node(currentNode.x,currentNode.y - unit);  for (  Node neighbour : neighbours) {    if (closedList.contains(neighbour) || !quadTree.isFilled(new Vector2(neighbour.x,neighbour.y))) {      continue;    }    neighbour.parent=currentNode;    if (!openList.contains(neighbour) || openList.contains(neighbour) && distance(openList.get(openList.indexOf(neighbour)),goal) > distance(neighbour,goal)) {      openList.add(neighbour);    }  }}  }
class C{  private void simpleNonCyclicFillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  float rowX=(a00 * x) + (a01 * y) + constA;  float rowY=(a10 * x) + (a11 * y) + constB;  float gDeltaDelta=this.gDeltaDelta;  adjust+=w;  int rgbclip=gradient[fastGradientArraySize];  for (int j=0; j < h; j++) {    float gRel=(rowX * rowX + rowY * rowY) / radiusSq;    float gDelta=(2 * (a00 * rowX + a10 * rowY) / radiusSq + gDeltaDelta / 2);    int i=0;    while (i < w && gRel >= 1.0f) {      pixels[off + i]=rgbclip;      gRel+=gDelta;      gDelta+=gDeltaDelta;      i++;    }    while (i < w && gRel < 1.0f) {      int gIndex;      if (gRel <= 0) {        gIndex=0;      } else {        float fIndex=gRel * SQRT_LUT_SIZE;        int iIndex=(int)(fIndex);        float s0=sqrtLut[iIndex];        float s1=sqrtLut[iIndex + 1] - s0;        fIndex=s0 + (fIndex - iIndex) * s1;        gIndex=(int)(fIndex * fastGradientArraySize);      }      pixels[off + i]=gradient[gIndex];      gRel+=gDelta;      gDelta+=gDeltaDelta;      i++;    }    while (i < w) {      pixels[off + i]=rgbclip;      i++;    }    off+=adjust;    rowX+=a01;    rowY+=a11;  }}  }
class C{  public static JPasswordField createPasswordField(){  JPasswordField pf=new JPasswordField();  pf.addFocusListener(new TextComponentFocusListener(pf));  pf.setFont(ColorAndFontConstants.defaultFont);  return pf;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off,Comparator c){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && c.compare(dest[j - 1],dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >>> 1;  mergeSort(dest,src,low,mid,-off,c);  mergeSort(dest,src,mid,high,-off,c);  if (c.compare(src[mid - 1],src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && c.compare(src[p],src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public int hashCode(){  int hash=tx == null ? 0 : tx.hashCode();  if (defaulting) {    hash+=getAntiAliasingHint().hashCode();    hash+=getFractionalMetricsHint().hashCode();  } else {    hash+=aaHintValue.hashCode();    hash+=fmHintValue.hashCode();  }  return hash;}  }
class C{  AttrHistoricalMultiple(CSN deleteTime,CSN updateTime,Set<AttrValueHistorical> valuesHist){  this.deleteTime=deleteTime;  this.lastUpdateTime=updateTime;  if (valuesHist != null) {    this.valuesHist.addAll(valuesHist);  }}  }
class C{  static int debugComponentCount(){  DebugGraphicsInfo debugGraphicsInfo=info();  if (debugGraphicsInfo != null && debugGraphicsInfo.componentToDebug != null) {    return debugGraphicsInfo.componentToDebug.size();  } else {    return 0;  }}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public void println(){  newLine();}  }
class C{  public void testConstructor_file() throws IOException {  File f=new File(resources,jarName);  Support_Resources.copyFile(resources,null,jarName);  assertTrue(new JarFile(f).getEntry(entryName).getName().equals(entryName));  assertTrue(new JarFile(f.getPath()).getEntry(entryName).getName().equals(entryName));}  }
class C{  public String toString(){  return new String(getType() + " Control");}  }
class C{  public static Function<Headers,Pair<String,String>,NeverThrowsException> newCustomHeaderExtractor(String customHeaderUsername,String customHeaderPassword){  return new CustomHeaderExtractor(customHeaderUsername,customHeaderPassword);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDocument;  doc=(Document)load("hc_staff",false);  ownerDocument=doc.getOwnerDocument();  assertNull("nodeGetOwnerDocumentNullAssert1",ownerDocument);}  }
class C{  public SessionResponse sendPLLRequest(URL svcurl,SessionRequest sreq) throws SessionException {  try {    String cookies=sessionCookies.getCookieName() + "=" + sreq.getSessionID();    if (!SystemProperties.isServerMode()) {      SessionID sessionID=new SessionID(sreq.getSessionID());      cookies=cookies + ";" + sessionCookies.getLBCookie(sessionID);    }    final Request req=new Request(sreq.toXMLString());    final RequestSet set=new RequestSet(SESSION_SERVICE);    set.addRequest(req);    final Vector responses=PLLClient.send(svcurl,cookies,set);    if (responses.size() != 1) {      throw new SessionException(SessionBundle.rbName,"unexpectedResponse",null);    }    final Response res=(Response)responses.elementAt(0);    return SessionResponse.parseXML(res.getContent());  } catch (  Exception e) {    throw new SessionException(e);  }}  }
class C{  public void jspError(String errCode,String... args) throws JasperException {  dispatch(null,errCode,args,null);}  }
class C{  public void testTestBitPositive2(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public void updateKeyinfo(String realm,String entityName,Map<String,Set<String>> extValues,Map<String,Set<String>> stdValues,boolean isIDP) throws AMConsoleException {  String keysize=getResult(stdValues,TF_KEY_NAME);  String algorithm=getResult(stdValues,TF_ALGORITHM);  Set<String> signingCertAliases;  Set<String> encryptionCertAliases;  if (isIDP) {    encryptionCertAliases=extValues.get(IDP_ENCRYPT_CERT_ALIAS);    signingCertAliases=extValues.get(IDP_SIGN_CERT_ALIAS);  } else {    encryptionCertAliases=extValues.get(SP_ENCRYPT_CERT_ALIAS);    signingCertAliases=extValues.get(SP_SIGN_CERT_ALIAS);  }  int keysi=!StringUtils.isEmpty(keysize) ? Integer.parseInt(keysize) : 128;  String alg=StringUtils.isEmpty(algorithm) ? XMLCipher.AES_128 : algorithm;  try {    SAML2MetaSecurityUtils.updateProviderKeyInfo(realm,entityName,signingCertAliases,true,isIDP,alg,keysi);    SAML2MetaSecurityUtils.updateProviderKeyInfo(realm,entityName,encryptionCertAliases,false,isIDP,alg,keysi);  } catch (  SAML2MetaException e) {    debug.warning("SAMLv2ModelImpl.updateKeyinfo:",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public RootStoreVerifier(CertificateVerifier verifier){  super(verifier);}  }
class C{  private static void rdf_ParseTypeCollectionPropertyElement() throws XMPException {  throw new XMPException("ParseTypeCollection property element not allowed",BADXMP);}  }
class C{  protected BCSSServiceProvider createBCSSServiceProvider(Class sc,BeanContextServiceProvider bcsp){  return new BCSSServiceProvider(sc,bcsp);}  }
class C{  protected Request createTiInviteRequest(String contentType,String contentSubType,Object content) throws TiUnexpectedError {  try {    return createRequest(Request.INVITE,tiAddressFactory,tiHeaderFactory,tiMessageFactory,tiSipProvider,riSipProvider,contentType,contentSubType,content);  } catch (  Throwable exc) {    throw new TiUnexpectedError("Failed to create a TI->RI invite request",exc);  }}  }
class C{  public boolean isSprinting(){  return isSprinting;}  }
class C{  public CharArrayReader(char buf[]){  this.buf=buf;  this.pos=0;  this.count=buf.length;}  }
class C{  public ConcurrentHashMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public SessionNameField sessionNameField() throws ParseException {  try {    this.lexer.match('s');    this.lexer.SPorHT();    this.lexer.match('=');    this.lexer.SPorHT();    SessionNameField sessionNameField=new SessionNameField();    String rest=lexer.getRest();    sessionNameField.setSessionName(rest == null ? "" : rest.trim());    return sessionNameField;  } catch (  Exception e) {    throw lexer.createParseException();  }}  }
class C{  public static IOFileFilter ageFileFilter(File cutoffReference){  return new AgeFileFilter(cutoffReference);}  }
class C{  public void paintComboBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  public EntryGenerator(final String templatePath){  Reject.ifNull(templatePath);  this.templatePath=templatePath;}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public ProxyStateAttribute(byte[] octets){  super(octets);  state=new String(octets,2,octets.length - 2);}  }
class C{  public boolean has_trace_half_width(int p_trace_half_width){  int layer_count=layer_count();  for (int index=0; index < layer_count; index++) {    if (trace_half_width_arr[index] != p_trace_half_width)     return false;  }  return true;}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public PdfImageXObject(ImageData image){  this(image,null);}  }
class C{  public static RestExpress initializeServer(String[] args,String overrideSeeds) throws IOException, IllegalAccessException, InstantiationException {  RestExpress.setSerializationProvider(new SerializationProvider());  try {    PluginHolder.build(PluginUtils.getPluginJars());  } catch (  IllegalStateException e) {    logger.warn("Warning: The plugins were already init'ed, this is fine if you are running tests, but if you see this on a running server, there is probably a problem.");  }  Configuration config=loadEnvironment(args);  logger.info("-----Attempting to start up Docussandra server for version: " + config.getProjectVersion() + "-----");  boolean initDb=true;  if (overrideSeeds != null) {    config.overrideSeeds(overrideSeeds);    initDb=false;  }  config.initialize(initDb);  RestExpress server=new RestExpress().setName(config.getProjectName(SERVICE_NAME)).setBaseUrl(config.getBaseUrl()).setExecutorThreadCount(config.getExecutorThreadPoolSize()).addPostprocessor(new LastModifiedHeaderPostprocessor()).addMessageObserver(new SimpleLogMessageObserver()).addPreprocessor(new RequestApplicationJsonPreprocessor()).addPreprocessor(new RequestXAuthCheck()).setMaxContentSize(6000000);  new VersionPlugin(config.getProjectVersion()).register(server);  new SwaggerPlugin().register(server);  Routes.define(config,server);  Relationships.define(server);  configurePlugins(config,server);  mapExceptions(server);  if (config.getPort() == 0) {    server.setPort(calculatePort(config.getProjectVersion()));  } else {    server.setPort(config.getPort());  }  server.bind(server.getPort());  logger.info("-----Docussandra server initialized for version: " + config.getProjectVersion() + "-----");  return server;}  }
class C{  public final void testRSAOtherPrimeInfo05(){  try {    new RSAOtherPrimeInfo(null,BigInteger.valueOf(2L),null);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  protected View createChild(String name){  if (name.equals(TXT_INDEX)) {    return new StaticTextField(this,TXT_INDEX,"");  } else   if (name.equals(TXT_BUTTON)) {    return new StaticTextField(this,TXT_BUTTON,"");  } else   if (name.equals(TXT_CLASS)) {    return new StaticTextField(this,TXT_CLASS,"");  }  throw new IllegalArgumentException("Invalid child name [" + name + "]");}  }
class C{  public Enumeration elements(){  return perms.elements();}  }
class C{  public static void main(final String[] args){  final int retCode=new SearchRate().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public Extensions createExtensions(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EXTENSIONS,value);  if (obj == null) {    return new ExtensionsImpl(value);  } else {    return (Extensions)obj;  }}  }
class C{  public void test_SelectDistinct() throws SQLException {  String selectQuery="SELECT DISTINCT rating FROM " + DatabaseCreator.CUSTOMERS_TABLE;  ResultSet result=statement.executeQuery(selectQuery);  HashSet<Integer> values=new HashSet<Integer>();  values.add(Integer.valueOf(100));  values.add(Integer.valueOf(200));  values.add(Integer.valueOf(300));  while (result.next()) {    Integer rating=result.getInt("rating");    assertTrue("result set doesn't contain value",values.contains(rating));    assertTrue("wrong value in the result set",values.remove(rating));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  public FrameBodyTIT1(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("HTML",null);    assertTrue("supports_HTML_null",state);  } else {    state=domImpl.hasFeature("XML",null);    assertTrue("supports_XML_null",state);  }}  }
class C{  ApplicationFilterConfig(Context context,FilterDef filterDef) throws ClassCastException, ClassNotFoundException, IllegalAccessException, InstantiationException, ServletException, InvocationTargetException, NamingException {  super();  this.context=context;  this.filterDef=filterDef;  if (filterDef.getFilter() == null) {    getFilter();  } else {    this.filter=filterDef.getFilter();    getInstanceManager().newInstance(filter);    initFilter();  }}  }
class C{  protected View createChild(String name){  if (name.equals(ADD_BUTTON)) {    CCButton child=new CCButton(this,name,null);    return child;  } else   if (name.equals(DELETE_BUTTON)) {    CCButton child=new CCButton(this,name,null);    child.setDisabled(true);    return child;  } else   if (name.equals(TEXTFIELD)) {    return new TextField(this,name,null);  } else {    return super.createChild(name);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  CDATASection cDataSec;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  cDataSec=aNewDoc.createCDATASection("this is CDATASection data");  aNode=doc.importNode(cDataSec,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is CDATASection data",value);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  forwardTo();}  }
class C{  public static boolean isDefaultOrg(String orgName){  return (orgName != null) || orgName.equals("/");}  }
class C{  public static void main(final String[] args){  final int retCode=mainRebuildIndex(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public FacebookException(String message){  super(message);}  }
class C{  public static SearchRequest newSingleEntrySearchRequest(final String name,final SearchScope scope,final String filter,final String... attributeDescriptions){  return newSearchRequest(name,scope,filter,attributeDescriptions).setSizeLimit(1);}  }
class C{  public boolean containsAll(Collection<?> coll){  for (  Object e : coll) {    if (!contains(e))     return false;  }  return true;}  }
class C{  public void testFloatValueNegativeInfinity1(){  String a="-2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  public BlockVector(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public int nextNode(){  int nextNode=DTM.NULL;  AxesWalker walker=wi().getLastUsedWalker();  while (true) {    if (null == walker)     break;    nextNode=walker.getNextNode();    if (DTM.NULL == nextNode) {      walker=walker.m_prevWalker;    } else {      if (walker.acceptNode(nextNode) != DTMIterator.FILTER_ACCEPT) {        continue;      }      if (null == walker.m_nextWalker) {        wi().setLastUsedWalker(walker);        break;      } else {        AxesWalker prev=walker;        walker=walker.m_nextWalker;        walker.setRoot(nextNode);        walker.m_prevWalker=prev;        continue;      }    }  }  return nextNode;}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_04(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbN=null;  ByteBuffer bN=null;  SSLEngine e=getEngine(host,port);  e.setUseClientMode(true);  try {    e.wrap(bbA,0,3,bN);    fail("IllegalArgumentException must be thrown for null srcs byte buffer array");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException ex) {  }catch (  Exception ex) {    fail(ex + " was thrown instead of IllegalArgumentException");  }  try {    e.wrap(bbN,0,0,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException ex) {  }catch (  NullPointerException npe) {  }catch (  Exception ex) {    fail(ex + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public Set preProcessModifyMemberShip(SSOToken token,String entryDN,String orgDN,Set members,int operation,int objectType) throws AMException {  Set implSet=getPrePostImpls(orgDN);  if (implSet != null && !implSet.isEmpty()) {    Iterator itr=implSet.iterator();    while (itr.hasNext()) {      String className=(String)itr.next();      AMCallBack impl=getCallBackObject(className);      if (impl == null) {        continue;      }      try {switch (operation) {case DirectoryServicesImpl.ADD_MEMBER:          members=impl.preProcessAddUser(token,entryDN,members,objectType);        break;case DirectoryServicesImpl.REMOVE_MEMBER:      members=impl.preProcessRemoveUser(token,entryDN,members,objectType);    break;}} catch (AMException ae) {debug.error("CallBackHelper.preProcessModifyMemberShip():" + " Preprocessing impl " + className + " exception "+ "thrown by impl:",ae);throw ae;}}}return members;}  }
class C{  public synchronized void startRecording(JsonValue jsonProperties) throws RecordException {  RecordProperties recordProperties=RecordProperties.fromJson(jsonProperties);  Record record=createRecord(recordProperties);  if (isRecording()) {    debug.message("Issue '{}' was recording, we stop it.",currentRecord);    stopRecording();  }  previousDebugDirectory=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_DIRECTORY);  debug.message("Start recording issue '{}'.",record);  changeOpenAMDebugFolder(record.getFolderPath() + File.separator + RecordConstants.DEBUG_FOLDER_NAME);  currentRecord=record;  currentRecord.startRecord();  previousDebugLevel=new HashMap<Debug,Integer>();  List<Debug> debugInstances=new ArrayList<Debug>(Debug.getInstances());  for (  Debug debug : debugInstances) {    previousDebugLevel.put(debug,debug.getState());    debug.setDebug(record.getRecordProperties().getDebugLevel().getName());  }  exportConfigExport();  try {    startThreadDump();  } catch (  IOException e) {    debug.error("Thread dump can't be enable",e);    throw new RecordException("Thread dump can't be enable",e);  }  startAutoStopRecording();}  }
class C{  public GetComplete createGetComplete(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.GET_COMPLETE,value);  if (obj == null) {    return new GetCompleteImpl(value);  } else {    return (GetComplete)obj;  }}  }
class C{  public boolean equals(Object o){  if (o instanceof LDAPUsers) {    LDAPUsers g=(LDAPUsers)o;    if ((selectedUserDNs != null) && (g.selectedUserDNs != null) && (selectedUserDNs.equals(g.selectedUserDNs))) {      return true;    }  }  return false;}  }
class C{  public static RemoteException mapSystemException(SystemException ex){  if (utilDelegate != null) {    return utilDelegate.mapSystemException(ex);  }  return null;}  }
class C{  public void trainW() throws Exception, IOException {  double last_loss=0;  if (test_switch) {    String temp212;    int rowNum=0;    File f=new File(W_DW);    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(f)));    while ((temp212=br.readLine()) != null) {      String[] strs=temp212.split(" ");      for (int i=0; i < strs.length; i++) {        W[i][rowNum]=Double.parseDouble(strs[i]);      }      rowNum++;    }    test_switch=false;  } else {    if (!init) {      preComputeBias();    }    if (init) {      for (int step=0; step < steps_init; step++) {        System.out.println(new Date().toLocaleString() + '\t' + "iter = "+ step+ '\t'+ "Process for training"+ '\t'+ (step * 100) / steps_init + "%");        double drv[][]=new double[dimension][dataNum];        double rt[][]=new double[dataNum * dimension][1];        double dt[][]=new double[dataNum * dimension][1];        double B[][]=H;        double Hess[][]=new double[dimension][dimension];        double store2BB[][]=new double[dimension][dimension];        double vecW[][]=new double[dataNum * dimension][1];        double vecH[][]=new double[dataNum * dimension][1];        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++)           for (int m=0; m < dataNum; m++)           store2BB[i][j]+=2 * B[i][m] * B[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dimension; m++)           drv[i][j]+=store2BB[i][m] * W[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dataNum; m++)           drv[i][j]-=2 * B[i][m] * graph[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           drv[i][j]+=lambda * W[j][i];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++) {            for (int m=0; m < dataNum; m++)             Hess[i][j]+=2 * B[i][m] * B[j][m];            if (i == j)             Hess[i][j]+=lambda;          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           rt[i * dimension + j][0]=-drv[j][i];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           drv[j][i]=0;        }        for (int i=0; i < dimension * dataNum; i++) {          dt[i][0]=rt[i][0];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           vecW[i * dimension + j][0]=W[i][j];        }        int countW=0;        while (true) {          countW++;          double norm=0;          for (int i=0; i < dimension * dataNum; i++) {            norm+=rt[i][0] * rt[i][0];          }          norm=Math.sqrt(norm);          if (countW > 10) {            System.out.println("W norm = " + norm);            break;          } else {            double rtrt=0, dtHdt=0, rtmprtmp=0;            double at=0, bt=0;            double dtS[][]=new double[dimension][dataNum];            double Hdt[][]=new double[dataNum * dimension][1];            double storeHessdtS[][]=new double[dimension][dataNum];            double rtmp[][]=new double[dataNum * dimension][1];            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               dtS[j][i]=dt[i * dimension + j][0];            }            for (int i=0; i < dimension; i++) {              for (int j=0; j < dataNum; j++)               for (int m=0; m < dimension; m++)               storeHessdtS[i][j]+=Hess[i][m] * dtS[m][j];            }            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               Hdt[i * dimension + j][0]=storeHessdtS[j][i];            }            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];              dtHdt+=dt[i][0] * Hdt[i][0];            }            at=rtrt / dtHdt;            for (int i=0; i < dimension * dataNum; i++) {              vecW[i][0]+=at * dt[i][0];              rtmp[i][0]=rt[i][0];            }            for (int i=0; i < dimension * dataNum; i++) {              rt[i][0]-=at * Hdt[i][0];            }            rtmprtmp=rtrt;            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];            }            bt=rtrt / rtmprtmp;            for (int i=0; i < dimension * dataNum; i++) {              dt[i][0]=rt[i][0] + bt * dt[i][0];            }          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           W[i][j]=vecW[i * dimension + j][0];        }        double storeWW[][]=new double[dimension][dimension];        double storeWWH[][]=new double[dimension][dataNum];        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++)           for (int m=0; m < dataNum; m++)           storeWW[i][j]+=W[m][i] * W[m][j];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dimension; m++)           storeWWH[i][j]+=storeWW[i][m] * H[m][j];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++) {            double WMt=0;            for (int m=0; m < dataNum; m++)             WMt+=W[m][i] * graph[j][m];            storeWWH[i][j]-=WMt;          }        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           drv[i][j]=storeWWH[i][j] + lambda * H[i][j];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           rt[i * dimension + j][0]=-drv[j][i];        }        for (int i=0; i < dimension * dataNum; i++) {          dt[i][0]=rt[i][0];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           vecH[i * dimension + j][0]=H[j][i];        }        int countH=0;        while (true) {          countH++;          double norm=0;          for (int i=0; i < dimension * dataNum; i++) {            norm+=rt[i][0] * rt[i][0];          }          norm=Math.sqrt(norm);          if (countH > 10) {            System.out.println("H norm = " + norm);            break;          } else {            double rtrt=0, dtHdt=0, rtmprtmp=0;            double at=0, bt=0;            double dtS[][]=new double[dimension][dataNum];            double Hdt[][]=new double[dataNum * dimension][1];            double storeHdt[][]=new double[dimension][dataNum];            double rtmp[][]=new double[dataNum * dimension][1];            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               dtS[j][i]=dt[i * dimension + j][0];            }            for (int i=0; i < dimension; i++) {              for (int j=0; j < dataNum; j++) {                double aaa=0;                for (int m=0; m < dimension; m++)                 aaa+=storeWW[i][m] * dtS[m][j];                storeHdt[i][j]=aaa + lambda * dtS[i][j];              }            }            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               Hdt[i * dimension + j][0]=storeHdt[j][i];            }            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];              dtHdt+=dt[i][0] * Hdt[i][0];            }            at=rtrt / dtHdt;            for (int i=0; i < dimension * dataNum; i++) {              vecH[i][0]+=at * dt[i][0];              rtmp[i][0]=rt[i][0];            }            for (int i=0; i < dimension * dataNum; i++) {              rt[i][0]-=at * Hdt[i][0];            }            rtmprtmp=rtrt;            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];            }            bt=rtrt / rtmprtmp;            for (int i=0; i < dimension * dataNum; i++) {              dt[i][0]=rt[i][0] + bt * dt[i][0];            }          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           H[j][i]=vecH[i * dimension + j][0];        }        double loss=0;        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dataNum; j++) {            if (graph[i][j] > 0) {              double error=0;              for (int k=0; k < dimension; k++)               error+=W[i][k] * H[k][j];              loss+=Math.pow(graph[i][j] - error,2);              for (int k=0; k < dimension; k++) {                loss+=(lambda / 2) * (Math.pow(W[i][k],2) + Math.pow(H[k][j],2));              }            }          }        }        if (Math.abs(last_loss - loss) < 0.0001) {          System.out.println("BREAK!! Step:" + '\t' + step);          break;        }        last_loss=loss;        System.out.println("loss =" + '\t' + loss);      }    } else {      for (int i=0; i < dataNum; i++) {        for (int j=0; j < dimension; j++)         W[i][j]+=alphaBias * (bias[i][j]);      }      Random r1=new Random(12345l);      for (int i=0; i < dataNum; i++) {        for (int j=0; j < dimension; j++) {          H[j][i]=r1.nextDouble();        }      }      for (int i=0; i < dataNum; i++) {        double sumH=0;        for (int j=0; j < dimension; j++) {          sumH+=H[j][i] * H[j][i];        }        sumH=Math.sqrt(sumH);        for (int j=0; j < dimension; j++) {          H[j][i]/=sumH;        }      }      for (int step=0; step < steps_after; step++) {        System.out.println(new Date().toLocaleString() + '\t' + "iter = "+ step+ '\t'+ "Process 2 for training"+ '\t'+ (step * 100) / steps_after + "%");        double drv[][]=new double[dimension][dataNum];        double rt[][]=new double[dataNum * dimension][1];        double dt[][]=new double[dataNum * dimension][1];        double vecH[][]=new double[dataNum * dimension][1];        double storeWW[][]=new double[dimension][dimension];        double storeWWH[][]=new double[dimension][dataNum];        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++)           for (int m=0; m < dataNum; m++)           storeWW[i][j]+=W[m][i] * W[m][j];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dimension; m++)           storeWWH[i][j]+=storeWW[i][m] * H[m][j];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++) {            double WMt=0;            for (int m=0; m < dataNum; m++)             WMt+=W[m][i] * graph[j][m];            storeWWH[i][j]-=WMt;          }        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           drv[i][j]=storeWWH[i][j] + lambda * H[i][j];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           rt[i * dimension + j][0]=-drv[j][i];        }        for (int i=0; i < dimension * dataNum; i++) {          dt[i][0]=rt[i][0];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           vecH[i * dimension + j][0]=H[j][i];        }        int countH=0;        while (true) {          countH++;          double norm=0;          for (int i=0; i < dimension * dataNum; i++) {            norm+=rt[i][0] * rt[i][0];          }          norm=Math.sqrt(norm);          if (countH > 10) {            System.out.println("H norm = " + norm);            break;          } else {            double rtrt=0, dtHdt=0, rtmprtmp=0;            double at=0, bt=0;            double dtS[][]=new double[dimension][dataNum];            double Hdt[][]=new double[dataNum * dimension][1];            double storeHdt[][]=new double[dimension][dataNum];            double rtmp[][]=new double[dataNum * dimension][1];            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               dtS[j][i]=dt[i * dimension + j][0];            }            for (int i=0; i < dimension; i++) {              for (int j=0; j < dataNum; j++) {                double aaa=0;                for (int m=0; m < dimension; m++)                 aaa+=storeWW[i][m] * dtS[m][j];                storeHdt[i][j]=aaa + lambda * dtS[i][j];              }            }            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               Hdt[i * dimension + j][0]=storeHdt[j][i];            }            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];              dtHdt+=dt[i][0] * Hdt[i][0];            }            at=rtrt / dtHdt;            for (int i=0; i < dimension * dataNum; i++) {              vecH[i][0]+=at * dt[i][0];              rtmp[i][0]=rt[i][0];            }            for (int i=0; i < dimension * dataNum; i++) {              rt[i][0]-=at * Hdt[i][0];            }            rtmprtmp=rtrt;            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];            }            bt=rtrt / rtmprtmp;            for (int i=0; i < dimension * dataNum; i++) {              dt[i][0]=rt[i][0] + bt * dt[i][0];            }          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           H[j][i]=vecH[i * dimension + j][0];        }        double loss=0;        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dataNum; j++) {            if (graph[i][j] > 0) {              double error=0;              for (int k=0; k < dimension; k++)               error+=W[i][k] * H[k][j];              loss+=Math.pow(graph[i][j] - error,2);              for (int k=0; k < dimension; k++) {                loss+=(lambda / 2) * (Math.pow(W[i][k],2) + Math.pow(H[k][j],2));              }            }          }        }        if (Math.abs(last_loss - loss) < 0.0001) {          System.out.println("BREAK!! Step:" + '\t' + step);          break;        }        last_loss=loss;        System.out.println("loss =" + '\t' + loss);      }      Random r2=new Random(12345l);      for (int i=0; i < dataNum; i++) {        for (int j=0; j < dimension; j++) {          W[i][j]=r2.nextDouble();        }      }      for (int i=0; i < dataNum; i++) {        double sumW=0;        for (int j=0; j < dimension; j++) {          sumW+=W[i][j] * W[i][j];        }        sumW=Math.sqrt(sumW);        for (int j=0; j < dimension; j++) {          W[i][j]/=sumW;        }      }      for (int step2=0; step2 < steps_after; step2++) {        System.out.println(new Date().toLocaleString() + '\t' + "iter = "+ step2+ '\t'+ "Process 2 for training"+ '\t'+ (step2 * 100) / steps_after + "%");        double B[][]=H;        double Hess[][]=new double[dimension][dimension];        double store2BB[][]=new double[dimension][dimension];        double vecW[][]=new double[dataNum * dimension][1];        double drv[][]=new double[dimension][dataNum];        double rt[][]=new double[dataNum * dimension][1];        double dt[][]=new double[dataNum * dimension][1];        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++)           for (int m=0; m < dataNum; m++)           store2BB[i][j]+=2 * B[i][m] * B[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dimension; m++)           drv[i][j]+=store2BB[i][m] * W[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           for (int m=0; m < dataNum; m++)           drv[i][j]-=2 * B[i][m] * graph[j][m];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dataNum; j++)           drv[i][j]+=lambda * W[j][i];        }        for (int i=0; i < dimension; i++) {          for (int j=0; j < dimension; j++) {            for (int m=0; m < dataNum; m++)             Hess[i][j]+=2 * B[i][m] * B[j][m];            if (i == j)             Hess[i][j]+=lambda;          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           rt[i * dimension + j][0]=-drv[j][i];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           drv[j][i]=0;        }        for (int i=0; i < dimension * dataNum; i++) {          dt[i][0]=rt[i][0];        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           vecW[i * dimension + j][0]=W[i][j];        }        int countW=0;        while (true) {          countW++;          double norm=0;          for (int i=0; i < dimension * dataNum; i++) {            norm+=rt[i][0] * rt[i][0];          }          norm=Math.sqrt(norm);          if (countW > 10) {            System.out.println("W norm = " + norm);            break;          } else {            double rtrt=0, dtHdt=0, rtmprtmp=0;            double at=0, bt=0;            double dtS[][]=new double[dimension][dataNum];            double Hdt[][]=new double[dataNum * dimension][1];            double storeHessdtS[][]=new double[dimension][dataNum];            double rtmp[][]=new double[dataNum * dimension][1];            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               dtS[j][i]=dt[i * dimension + j][0];            }            for (int i=0; i < dimension; i++) {              for (int j=0; j < dataNum; j++)               for (int m=0; m < dimension; m++)               storeHessdtS[i][j]+=Hess[i][m] * dtS[m][j];            }            for (int i=0; i < dataNum; i++) {              for (int j=0; j < dimension; j++)               Hdt[i * dimension + j][0]=storeHessdtS[j][i];            }            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];              dtHdt+=dt[i][0] * Hdt[i][0];            }            at=rtrt / dtHdt;            for (int i=0; i < dimension * dataNum; i++) {              vecW[i][0]+=at * dt[i][0];              rtmp[i][0]=rt[i][0];            }            for (int i=0; i < dimension * dataNum; i++) {              rt[i][0]-=at * Hdt[i][0];            }            rtmprtmp=rtrt;            for (int i=0; i < dimension * dataNum; i++) {              rtrt+=rt[i][0] * rt[i][0];            }            bt=rtrt / rtmprtmp;            for (int i=0; i < dimension * dataNum; i++) {              dt[i][0]=rt[i][0] + bt * dt[i][0];            }          }        }        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dimension; j++)           W[i][j]=vecW[i * dimension + j][0];        }        double loss=0;        for (int i=0; i < dataNum; i++) {          for (int j=0; j < dataNum; j++) {            if (graph[i][j] > 0) {              double error=0;              for (int k=0; k < dimension; k++)               error+=W[i][k] * H[k][j];              loss+=Math.pow(graph[i][j] - error,2);              for (int k=0; k < dimension; k++) {                loss+=(lambda / 2) * (Math.pow(W[i][k],2) + Math.pow(H[k][j],2));              }            }          }        }        if (Math.abs(last_loss - loss) < 0.0001) {          System.out.println("BREAK!! Step:" + '\t' + step2);          break;        }        last_loss=loss;        System.out.println("loss =" + '\t' + loss);      }    }  }}  }
class C{  public ServletSecurityElement(Collection<HttpMethodConstraintElement> httpMethodConstraints){  super();  addHttpMethodConstraints(httpMethodConstraints);}  }
class C{  public JsonElement removeProperty(String key){  return getProperties().remove(key);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String docTypeName;  String nodeValue;  NamedNodeMap attributes;  doc=(Document)load("hc_staff",false);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);  }  if ((docType != null)) {    docTypeName=docType.getName();    if (("image/svg+xml".equals(getContentType()))) {      assertEquals("nodeNameSVG","svg",docTypeName);    } else {      assertEquals("nodeName","html",docTypeName);    }    nodeValue=docType.getNodeValue();    assertNull("nodeValue",nodeValue);    attributes=docType.getAttributes();    assertNull("attributes",attributes);  }}  }
class C{  private void assertEntryHistoricalEncodingDecoding(Entry entry,EntryHistorical hist){  entry.removeAttribute(getSchema().getAttributeType(HISTORICAL_ATTRIBUTE_NAME));  entry.addAttribute(hist.encodeAndPurge(),null);  EntryHistorical hist2=EntryHistorical.newInstanceFromEntry(entry);  assertEquals(hist2.encodeAndPurge(),hist.encodeAndPurge());}  }
class C{  private String fieldComment(String name,Field field,PythonImportHandler importHandler,String paramComment){  if (paramComment == null) {    paramComment=getSphinxifiedScopedDescription(field);  }  return fieldComment(name,fieldTypeCardinalityComment(field,importHandler),paramComment);}  }
class C{  public ObjectVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  @Override public void write(int b){}  }
class C{  public AreaBreakRenderer(AreaBreak areaBreak){  this.areaBreak=areaBreak;}  }
class C{  public boolean isActive(@StringRes int resId,FlagContextInterface flagContext){  return isActive(context.getString(resId),flagContext);}  }
class C{  public Map validateAndInheritDefaults(Map attrMap,boolean inherit) throws SMSException {  return (validateAndInheritDefaults(attrMap,null,inherit));}  }
class C{  private void voiceSetting(){  if (mMeetingVoiceFlag) {    mVoiceButton.setImageResource(R.drawable.btn_voice_off);    mAnyrtcViews.updateLocalVoiceImage(false);    mAnyM2Mutlier.SetLocalAudioEnable(false);  } else {    mVoiceButton.setImageResource(R.drawable.btn_voice_on);    mAnyrtcViews.updateLocalVoiceImage(true);    mAnyM2Mutlier.SetLocalAudioEnable(true);  }  mMeetingVoiceFlag=!mMeetingVoiceFlag;}  }
class C{  public void handleCloseError(Throwable ex){  System.err.println(ERR_LOGGER_ERROR_CLOSING_FILE.get(publisherConfigDN,stackTraceToSingleLineString(ex)));}  }
class C{  public void undo() throws CannotUndoException {  super.undo();  int i=edits.size();  while (i-- > 0) {    UndoableEdit e=edits.elementAt(i);    e.undo();  }}  }
class C{  public Value callFunctionalObject(Value object,List<Value> arguments,LineCol lineCol) throws SyntaxException {  List<Value> finalArguments=new ArrayList<>();  finalArguments.add(object);  finalArguments.addAll(arguments);  return new Ins.InvokeDynamic(getCallFunctionalObjectBootstrapMethod(),"_call_functional_object_",finalArguments,getObject_Class(),Dynamic.INVOKE_STATIC,lineCol);}  }
class C{  @SuppressLint("NewApi") private void disableControls(){  this.getSettings().setBuiltInZoomControls(true);  this.getSettings().setDisplayZoomControls(false);}  }
class C{  protected void removeServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"removeServiced",params,signature);}  }
class C{  public void dump(String context) throws KeyStoreException, NoSuchAlgorithmException {  dump(context,keyStore,keyPassword);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public long insert(Long ruleID,Long actionID){  if (ruleID == null || actionID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_RULEID,ruleID);  initialValues.put(KEY_ACTIONID,actionID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  traverseFragment(pos);  this.m_contentHandler.endDocument();}  }
class C{  @Override public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object object) throws IllegalArgumentException {  broadcaster.addNotificationListener(listener,filter,object);}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createList(this);    super.addNotify();  }}  }
class C{  public EulerAngle subtract(double x,double y,double z){  return add(-x,-y,-z);}  }
class C{  private boolean generateLockDiscovery(String path,XMLWriter generatedXML){  LockInfo resourceLock=resourceLocks.get(path);  Enumeration<LockInfo> collectionLocksList=collectionLocks.elements();  boolean wroteStart=false;  if (resourceLock != null) {    wroteStart=true;    generatedXML.writeElement("D","lockdiscovery",XMLWriter.OPENING);    resourceLock.toXML(generatedXML);  }  while (collectionLocksList.hasMoreElements()) {    LockInfo currentLock=collectionLocksList.nextElement();    if (path.startsWith(currentLock.path)) {      if (!wroteStart) {        wroteStart=true;        generatedXML.writeElement("D","lockdiscovery",XMLWriter.OPENING);      }      currentLock.toXML(generatedXML);    }  }  if (wroteStart) {    generatedXML.writeElement("D","lockdiscovery",XMLWriter.CLOSING);  } else {    return false;  }  return true;}  }
class C{  public SessionID(){}  }
class C{  public static String escapeXML(String value,boolean forAttribute,boolean escapeWhitespaces){  boolean needsEscaping=false;  for (int i=0; i < value.length(); i++) {    char c=value.charAt(i);    if (c == '<' || c == '>' || c == '&' || (escapeWhitespaces && (c == '\t' || c == '\n' || c == '\r')) || (forAttribute && c == '"')) {      needsEscaping=true;      break;    }  }  if (!needsEscaping) {    return value;  } else {    StringBuffer buffer=new StringBuffer(value.length() * 4 / 3);    for (int i=0; i < value.length(); i++) {      char c=value.charAt(i);      if (!(escapeWhitespaces && (c == '\t' || c == '\n' || c == '\r'))) {switch (c) {case '<':          buffer.append("&lt;");        continue;case '>':      buffer.append("&gt;");    continue;case '&':  buffer.append("&amp;");continue;case '"':buffer.append(forAttribute ? "&quot;" : "\"");continue;default :buffer.append(c);continue;}} else {buffer.append("&#x");buffer.append(Integer.toHexString(c).toUpperCase());buffer.append(';');}}return buffer.toString();}}  }
class C{  public void backup(){  Log.w(TAG,"Backing up" + DATABASE_NAME);  IOUtil.copy(databaseDir() + DATABASE_NAME,databaseDir() + DATABASE_NAME_BACKUP);}  }
class C{  public boolean isBound(){  return bound;}  }
class C{  public MLet(URL[] urls,ClassLoader parent){  this(urls,parent,true);}  }
class C{  private void turnOffBluetooth(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (mBluetoothAdapter.isEnabled()) {    mBluetoothAdapter.disable();  }  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.bluetooth_turned_off));}  }
class C{  private void importListeners(Map<String,EntryListeners> listenersCopy,Schema schema){  for (  Map.Entry<String,EntryListeners> entry : listenersCopy.entrySet()) {    listeners.put(DN.valueOf(entry.getKey(),schema),entry.getValue());  }}  }
class C{  private static void handleForwardException(Exception exception) throws SAML2Exception {  debug.error("Failed to forward to auto submitting JSP",exception);  throw new SAML2Exception(bundle.getString("postToTargetFailed"));}  }
class C{  public LoginException(String msg){  super(msg);}  }
class C{  public void flush() throws IOException {  ensureOpen();  if (!inf.finished()) {    try {      while (!inf.finished() && !inf.needsInput()) {        int n;        n=inf.inflate(buf,0,buf.length);        if (n < 1) {          break;        }        out.write(buf,0,n);      }      super.flush();    } catch (    DataFormatException ex) {      String msg=ex.getMessage();      if (msg == null) {        msg="Invalid ZLIB data format";      }      throw new ZipException(msg);    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.CanonicalizationMethodElement createCanonicalizationMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.CanonicalizationMethodElementImpl();}  }
class C{  public String fromSAMLSecondaryTokenId(String secondaryId){  return encoding.decodeKey(secondaryId);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EncryptedPartsElement createEncryptedPartsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EncryptedPartsElementImpl();}  }
class C{  public static boolean isModifyContentsAllowed(int permissions){  return (EncryptionConstants.ALLOW_MODIFY_CONTENTS & permissions) == EncryptionConstants.ALLOW_MODIFY_CONTENTS;}  }
class C{  private void bogusMethod(Object... os){  if (DUMP_CLASS_FILES) {    mv=cw.visitMethod(Opcodes.ACC_STATIC,"dummy","()V",null,null);    for (    Object o : os) {      mv.visitLdcInsn(o.toString());      mv.visitInsn(Opcodes.POP);    }    mv.visitInsn(Opcodes.RETURN);    mv.visitMaxs(0,0);    mv.visitEnd();  }}  }
class C{  @Override public int length(){  return 0;}  }
class C{  public PrivateMLet(URL[] urls,ClassLoader parent,boolean delegateToCLR){  super(urls,parent,delegateToCLR);}  }
class C{  public static Attributes parseAttributes(ParserController pc,JspReader reader) throws JasperException {  Parser tmpParser=new Parser(pc,reader,false,false,null);  return tmpParser.parseAttributes(true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AdviceElement createAdviceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.FacadeType createFacadeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.FacadeTypeImpl();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  this.config=config;  try {    gwServletUtilsMap=new HashMap();    authD=AuthD.getAuth();    defToken=authD.getSSOAuthSession();    defTokenMgr=SSOTokenManager.getInstance();    Iterator auths=authD.getAuthenticators();    while (auths.hasNext()) {      String auth=(String)auths.next();      authenticators.add(auth);    }    initGWServletUtilsMap(SMSEntry.getRootSuffix());    actionNames.add(GET);    actionNames.add(POST);    pe=ProxyPolicyEvaluatorFactory.getInstance().getProxyPolicyEvaluator(defToken,WEB_AGENT_SERVICE_NAME);  } catch (  Exception e) {    debug.error("GatewayServlet: Unable to create PolicyEvaluator",e);    throw new ServletException(e.getMessage());  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public JSpinner(){  this(new SpinnerNumberModel());}  }
class C{  public LinkLoopException(){  super();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public static JsonValue toJsonValue(String alias,Key key) throws Exception {  JsonValue content=json(object());  content.put(ResourceResponse.FIELD_CONTENT_ID,alias);  if (key instanceof PrivateKey) {    content.put("privateKey",getKeyMap(key).asMap());  } else   if (key instanceof SecretKey) {    content.put("secret",getSecretKeyMap(key).asMap());  }  return content;}  }
class C{  public void testScaleByPowerOfTen1(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.scaleByPowerOfTen(10);  String res="1231212478987482988429808779810457634781384756794.987";  int resScale=3;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static void copyDirContents(File srcDir,File destDir) throws Exception {  String[] items=srcDir.list();  if (items != null) {    int count=items.length;    for (int i=0; i < count; i++) {      String entryName=items[i];      File entry=new File(srcDir,entryName);      if (entry.isDirectory()) {        File targetDir=new File(destDir,entryName);        targetDir.mkdirs();        copyDirContents(entry,targetDir);      } else       if (entry.isFile()) {        String srcPath=entry.getAbsolutePath();        String destPath=destDir.getAbsolutePath() + FILE_SEP + entryName;        copyFile(srcPath,destPath);      }    }  }}  }
class C{  static float max(float red,float green,float blue){  float max=(red > green) ? red : green;  return (max > blue) ? max : blue;}  }
