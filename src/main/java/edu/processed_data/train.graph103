class C{  public TaskResourceRep hostVcenterChangeDecline(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter,URI eventId){  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.768 -0500",hash_original_method="FC61BFC3FC94A92F6E91F05B84386B00",hash_generated_method="EE7A28C6AC161E3A60759D67AD59E395") public SpannableStringBuilder(){  this("");}  }
class C{  private boolean isDoc(String expression){  return StringUtils.startsWith(expression,DOC_PREFIX);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.687 -0500",hash_original_method="383F734F3FE5E01DEDB78CACC2759E14",hash_generated_method="9FE5C18693AF5CF70CDD3301E85F968D") public ObjectIdentifier(int[] oid,String name,Object oidGroup){  this(oid);  if (oidGroup == null) {    throw new NullPointerException("oidGroup == null");  }  this.group=oidGroup;  this.name=name;  toOIDString();}  }
class C{  @ObjectiveCName("tupleWithT1:withT2:withT3:") public static <T1,T2,T3>Promise<Tuple3<T1,T2,T3>> tuple(Promise<T1> t1,Promise<T2> t2,Promise<T3> t3){  return PromisesArray.ofPromises((Promise<Object>)t1,(Promise<Object>)t2,(Promise<Object>)t3).zip().map(null);}  }
class C{  public synchronized void install(){  for (  Weave w : removed) {    w.destroy();  }  for (  ByteString id : pending.keySet()) {    Weave previous=woven.remove(id);    if (previous != null) {      previous.destroy();    }    try {      woven.put(id,new Weave(pending.get(id)));    } catch (    InvalidAdviceException e) {      log.warn("Cannot install invalid advice",e);      problems.add(e);    }catch (    PTAgentException e) {      log.warn("Cannot install advice with invalid weave",e);      problems.add(e);    }  }  if (agent.dynamic != null) {    try {      agent.dynamic.install();      problems.addAll(agent.dynamic.problems);    } catch (    Throwable t) {      log.warn("Unable to install modified classes",t);      problems.add(t);    }  }  pending.clear();  removed.clear();}  }
class C{  public String toXML(boolean headline){  XmlTextBuilder bdr;  String tagName="Registry_Request";  bdr=new XmlTextBuilder();  if (headline)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("ProcedureId",procedureId);  bdr.addSimpleElement("Addresse",addressee);  bdr.addSimpleElement("SenderId_Type",senderIdType);  bdr.addSimpleElement("Specific_Data",specificData);  bdr.addFragment(documents.toXML(false));  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Set<Specification> toSpecificationList(Vector<Object> specificationsParams){  Set<Specification> specifications=new TreeSet<Specification>();  for (  Object specificationParams : specificationsParams) {    specifications.add(toSpecification((Vector<Object>)specificationParams));  }  return specifications;}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  protected void paintFocus(Graphics g,Rectangle textRect,Dimension size){}  }
class C{  public void put(PlotItem it,VisualizationTask task,Pair<Element,Visualization> pair){  map.put(key(it,task),pair);}  }
class C{  private void initBuildIdAndDate(){  if (buildId != null) {    return;  }  buildId="-1";  buildDate="";  final InputStream in=FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("/META-INF/MANIFEST.MF");  String str=null;  if (in != null) {    final Properties prop=PropertiesLoader.loadProperties(in);    str=prop.getProperty("Implementation-Version");  }  if (str == null) {    return;  }  final int sep=str.lastIndexOf("-");  buildId=str.substring(0,sep);  SimpleDateFormat inFormat=new SimpleDateFormat("yyyyMMddHHmmss");  SimpleDateFormat outFormat=new SimpleDateFormat("yyyy/MM/dd");  try {    buildDate=outFormat.format(inFormat.parse(str.substring(sep + 1)));  } catch (  ParseException e) {    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_FORMATTING_BUILD_DATE);  }}  }
class C{  static byte[] base64ToByteArray(String s){  return base64ToByteArray(s,false);}  }
class C{  public void rDecorateSeedBiome(World world,Random rand,int worldX,int worldZ,OpenSimplexNoise simplex,CellNoise cell,float strength,float river){  if (strength > 0.3f) {    this.biome.decorate(world,rand,new BlockPos(worldX,0,worldZ));  } else {    this.decorateOres(world,rand,worldX,worldZ,simplex,cell,strength,river,false);  }}  }
class C{  public void tagButtonCXForm(int buttonId,ColorTransform transform) throws IOException {  startTag(TAG_DEFINEBUTTONCXFORM,buttonId,false);  transform.writeWithoutAlpha(out);  completeTag();}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private String addListValidation(StringBuffer sb,int AD_Reference_ID,String columnName){  StringBuffer retValue=new StringBuffer();  retValue.append("\n\t/** ").append(columnName).append(" AD_Reference_ID=").append(AD_Reference_ID).append(" */").append("\n\tpublic static final int ").append(columnName.toUpperCase()).append("_AD_Reference_ID=").append(AD_Reference_ID).append(";");  boolean found=false;  StringBuffer values=new StringBuffer("Reference_ID=").append(AD_Reference_ID);  StringBuffer statement=new StringBuffer();  String sql="SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=? ORDER BY AD_Ref_List_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Reference_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      values.append(" - ").append(value);      if (statement.length() == 0)       statement.append("\n\t\tif (").append(columnName).append(".equals(\"").append(value).append("\")"); else       statement.append(" || ").append(columnName).append(".equals(\"").append(value).append("\")");      if (!found) {        found=true;      }      String name=rs.getString(2);      char[] nameArray=name.toCharArray();      StringBuffer nameClean=new StringBuffer();      boolean initCap=true;      for (int i=0; i < nameArray.length; i++) {        char c=nameArray[i];        if (Character.isJavaIdentifierPart(c)) {          if (initCap)           nameClean.append(Character.toUpperCase(c)); else           nameClean.append(c);          initCap=false;        } else {          if (c == '+')           nameClean.append("Plus"); else           if (c == '-')           nameClean.append("_"); else           if (c == '>') {            if (name.indexOf('<') == -1)             nameClean.append("Gt");          } else           if (c == '<') {            if (name.indexOf('>') == -1)             nameClean.append("Le");          } else           if (c == '!')           nameClean.append("Not"); else           if (c == '=')           nameClean.append("Eq"); else           if (c == '~')           nameClean.append("Like");          initCap=true;        }      }      retValue.append("\n\t/** ").append(name).append(" = ").append(value).append(" */");      retValue.append("\n\tpublic static final String ").append(columnName.toUpperCase()).append("_").append(nameClean).append(" = \"").append(value).append("\";");    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  statement.append(")" + "; " + "else "+ "throw new IllegalArgumentException (\"").append(columnName).append(" Invalid value - \" + ").append(columnName).append(" + \" - ").append(values).append("\");");  sb.append("\n");  return retValue.toString();}  }
class C{  public TodoExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  Object tokenString(int c){  while (true) {    if (c == '\\') {      bpush(next());      c=next();    } else     if (c == '"') {      c=next();      if (isDelimiter(c))       return bclear(); else       continue;    } else     if (isAny(c)) {      bpush(c);      c=next();    } else {      return bclear();    }  }}  }
class C{  public void clear(){  logger.debug("Clearing table converters");  recordMakerByCollectionId.clear();}  }
class C{  @GetMapping @ResponseBody public ResponseEntity<Response<RoleVO>> findAllRoles(){  List<RoleVO> roles=m.map(new ArrayList<>(service.findAll()),RoleVO.class);  return buildResponse(HttpStatus.OK,translate(Messages.SERVER_OK),Messages.SERVER_OK,roles.toArray(new RoleVO[roles.size()]));}  }
class C{  public void addConnectedEventListener(PeerConnectedEventListener listener){  addConnectedEventListener(Threading.USER_THREAD,listener);}  }
class C{  public static IJavaElement determineIfOnClasspath(IResource resource,IJavaProject project){  IPath resourcePath=resource.getFullPath();  boolean isExternal=ExternalFoldersManager.isExternalFolderPath(resourcePath);  if (isExternal)   resourcePath=resource.getLocation();  try {    JavaProjectElementInfo projectInfo=(JavaProjectElementInfo)org.eclipse.jdt.internal.core.JavaModelManager.getJavaModelManager().getInfo(project);    JavaProjectElementInfo.ProjectCache projectCache=projectInfo == null ? null : projectInfo.projectCache;    HashtableOfArrayToObject allPkgFragmentsCache=projectCache == null ? null : projectCache.allPkgFragmentsCache;    boolean isJavaLike=Util.isJavaLikeFileName(resourcePath.lastSegment());    IClasspathEntry[] entries=isJavaLike ? project.getRawClasspath() : ((JavaProject)project).getResolvedClasspath();    int length=entries.length;    if (length > 0) {      String sourceLevel=project.getOption(JavaCore.COMPILER_SOURCE,true);      String complianceLevel=project.getOption(JavaCore.COMPILER_COMPLIANCE,true);      for (int i=0; i < length; i++) {        IClasspathEntry entry=entries[i];        if (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT)         continue;        IPath rootPath=entry.getPath();        if (rootPath.equals(resourcePath)) {          if (isJavaLike)           return null;          return project.getPackageFragmentRoot(resource);        } else         if (rootPath.isPrefixOf(resourcePath)) {          if (!Util.isExcluded(resourcePath,((ClasspathEntry)entry).fullInclusionPatternChars(),((ClasspathEntry)entry).fullExclusionPatternChars(),true)) {            PackageFragmentRoot root=isExternal ? new ExternalPackageFragmentRoot(rootPath,(JavaProject)project) : (PackageFragmentRoot)((JavaProject)project).getFolderPackageFragmentRoot(rootPath);            if (root == null)             return null;            IPath pkgPath=resourcePath.removeFirstSegments(rootPath.segmentCount());            if (resource.getType() == IResource.FILE) {              pkgPath=pkgPath.removeLastSegments(1);            }            String[] pkgName=pkgPath.segments();            if (allPkgFragmentsCache != null && allPkgFragmentsCache.containsKey(pkgName))             return root.getPackageFragment(pkgName);            if (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath,sourceLevel,complianceLevel),sourceLevel,complianceLevel).getSeverity() == IStatus.ERROR) {              return null;            }            return root.getPackageFragment(pkgName);          }        }      }    }  } catch (  JavaModelException npe) {    return null;  }  return null;}  }
class C{  @SuppressWarnings("resource") public NBTOutputStream(OutputStream os,boolean compressed) throws IOException {  this.os=new DataOutputStream(compressed ? new GZIPOutputStream(os) : os);}  }
class C{  public JDirectoryChooser(FileSystemView fsv){  super(fsv);  setShowingCreateDirectory(true);}  }
class C{  static void startupHidden(){  GUIMediator.showTrayIcon();  if (OSUtils.isMacOSX())   GUIMediator.hideView();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public ReferenceTypeAttributes clone(){  ReferenceTypeAttributes result=new ReferenceTypeAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.IsAbstract=IsAbstract;  result.Symmetric=Symmetric;  result.InverseName=InverseName;  return result;}  }
class C{  public void put(int taskId,ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  if (logger.isDebugEnabled()) {    logger.debug("Write to task queue: taskId=" + taskId + " seqno="+ event.getSeqno()+ " shardId="+ event.getShardId());  }  String failTag=event.getDBMSEvent().getMetadataOptionValue(FAILURE_TAG);  if (failTag != null)   throw new ReplicatorException("Failure triggered by " + FAILURE_TAG + "="+ failTag);  ConcurrentLinkedQueue<ReplDBMSEvent> queue=taskQueues.get(taskId);synchronized (queue) {    queue.add(event);    eventCount++;  }  if (logger.isDebugEnabled()) {    if (eventCount % 10000 == 0)     logger.debug("Transactional queue store: events=" + eventCount + " xacts="+ commitCount);  }}  }
class C{  protected void addAltaUdocExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  SecurityManagerBase securityManager=SecurityManagerLocator.loockupTransferenciasSM();  try {    securityManager.check(TransferenciasSecurityManager.ELABORACION_INGRESOS_DIRECTOS,getServiceClient(request));    String idRevDoc=request.getParameter("idRevDoc");    ServiceRepository services=getServiceRepository(request);    GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();    RevisionDocumentacionVO revDocVO=prestamosService.getRevisionDocumentacionById(idRevDoc);    if (revDocVO != null && revDocVO.getIdAlta() == null) {      ActionRedirect addAltaUdoc=null;      addAltaUdoc=new ActionRedirect(mapping.findForward("crear_alta_udoc"));      addAltaUdoc.addParameter(Constants.ID_REV_DOC,revDocVO.getIdRevDoc());      addAltaUdoc.setRedirect(true);      setReturnActionFordward(request,addAltaUdoc);    } else {      ActionErrors errors=new ActionErrors();      errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_ALTA_UDOC_USUARIO_SIN_PERMISOS));      ErrorsTag.saveErrors(request,errors);      setReturnActionFordward(request,mapping.findForward("listado_revisionDoc"));    }  } catch (  SecurityException e) {    ActionErrors errors=new ActionErrors();    errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_ALTA_UDOC_USUARIO_SIN_PERMISOS));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("listado_revisionDoc"));  }}  }
class C{  private FileList filter(boolean keep,String pattern){  boolean start=false;  if (pattern.endsWith("*")) {    pattern=pattern.substring(0,pattern.length() - 1);    start=true;  } else   if (pattern.startsWith("*")) {    pattern=pattern.substring(1);  }  if (pattern.indexOf('*') >= 0) {    throw new RuntimeException("Unsupported pattern, may only start or end with *:" + pattern);  }  pattern=BuildBase.replaceAll(pattern,"/",File.separator);  FileList list=new FileList();  for (  File f : this) {    String path=f.getPath();    boolean match=start ? path.startsWith(pattern) : path.endsWith(pattern);    if (match == keep) {      list.add(f);    }  }  return list;}  }
class C{  public void write(PrintStream out){  out.println("# if capitalized and first word in sentence:");  write(out,firstCapitalized);  out.println("\n# if capitalized and not first word in sentence:");  write(out,notFirstCapitalized);  out.println("\n# main table:");  write(out,table);}  }
class C{  int updateNote(long id,OwnCloudNote remoteNote,DBNote forceUnchangedDBNoteState){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(key_remote_id,remoteNote.getRemoteId());  db.update(table_notes,values,key_id + " = ?",new String[]{String.valueOf(id)});  values.clear();  values.put(key_status,DBStatus.VOID.getTitle());  values.put(key_title,remoteNote.getTitle());  values.put(key_modified,remoteNote.getModified(DATE_FORMAT));  values.put(key_content,remoteNote.getContent());  String whereClause;  String[] whereArgs;  if (forceUnchangedDBNoteState != null) {    whereClause=key_id + " = ? AND " + key_content+ " = ?";    whereArgs=new String[]{String.valueOf(id),forceUnchangedDBNoteState.getContent()};  } else {    whereClause=key_id + " = ? AND " + key_status+ " = ? AND ("+ key_modified+ "!=? OR "+ key_content+ "!=?)";    whereArgs=new String[]{String.valueOf(id),DBStatus.VOID.getTitle(),remoteNote.getModified(DATE_FORMAT),remoteNote.getContent()};  }  int i=db.update(table_notes,values,whereClause,whereArgs);  db.close();  Log.d(getClass().getSimpleName(),"updateNote: " + remoteNote + " || forceUnchangedDBNoteState: "+ forceUnchangedDBNoteState+ "  => "+ i+ " rows updated");  return i;}  }
class C{  private static IClasspathEntry[] computeClasspathEntries(IVMInstallType vm,IJavaProject project,String environmentId){  LibraryLocation[] libs=null;  boolean overrideJavaDoc=false;  if (libs == null) {    libs=getLibraryLocations(vm);    overrideJavaDoc=true;  }  IAccessRule[][] rules=null;  IExecutionEnvironment environment=JavaRuntime.getEnvironment(environmentId);  if (environment != null) {    rules=environment.getAccessRules(vm,libs,project);  }  RuleKey key=null;  if (vm != null && rules != null && environmentId != null) {    key=new RuleKey(vm,environmentId);    RuleEntry entry=fgClasspathEntriesWithRules.get(key);    if (entry != null && entry.equals(rules)) {      return entry.getClasspathEntries();    }  }  List<IClasspathEntry> entries=new ArrayList<IClasspathEntry>(libs.length);  for (int i=0; i < libs.length; i++) {    if (!libs[i].getSystemLibraryPath().isEmpty()) {      IPath sourcePath=libs[i].getSystemLibrarySourcePath();      if (sourcePath.isEmpty()) {        sourcePath=null;      }      IPath rootPath=libs[i].getPackageRootPath();      if (rootPath.isEmpty()) {        rootPath=null;      }      IClasspathAttribute[] attributes=JREContainer.buildClasspathAttributes(vm,libs[i],overrideJavaDoc);      IAccessRule[] libRules=null;      if (rules != null) {        libRules=rules[i];      } else {        libRules=EMPTY_RULES;      }      entries.add(JavaCore.newLibraryEntry(libs[i].getSystemLibraryPath(),sourcePath,rootPath,libRules,attributes,false));    }  }  IClasspathEntry[] cpEntries=entries.toArray(new IClasspathEntry[entries.size()]);  if (key != null && rules != null) {    fgClasspathEntriesWithRules.put(key,new RuleEntry(rules,cpEntries));  }  return cpEntries;}  }
class C{  public void jumpToCurrentState(){  if (runningAnimation != null) {    final AnimatedView view=getTarget();    if (view != null && view.getAnimator() == runningAnimation) {      runningAnimation.cancel();    }  }}  }
class C{  private void upgradeTable(TableEntry10 table,TableUpgrade upgradeTable) throws IOException {  _pageMap=new TreeMap<>();  readTableIndex(table);  for (  Page10 page : _pageMap.values()) {    upgradeLeaf(table,upgradeTable,page);    List<Delta10> deltas=page.deltas();    if (deltas != null) {      for (      Delta10 delta : deltas) {        upgradeDelta(table,upgradeTable,page,delta);      }    }  }}  }
class C{  public boolean release(DTM dtm,boolean shouldHardDelete){  if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {    return false;  }  return m_dtmManager.release(dtm,shouldHardDelete);}  }
class C{  @LogMessageDoc(level="ERROR",message="Error {error type} {error code} from {switch} " + "in state {state}",explanation="The switch responded with an unexpected error" + "to an OpenFlow message from the controller",recommendation="This could indicate improper network operation. " + "If the problem persists restarting the switch and " + "controller may help.") protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getSwitchInfoString(),this.toString()});}  }
class C{  public void discardEntry(IProject project){  workspace.discardEntry(URI.createPlatformResourceURI(project.getName(),true));}  }
class C{  public static void notifyForegroundStateChanged(final Context context,boolean inForeground){  int old=sForegroundActivities;  if (inForeground) {    sForegroundActivities++;  } else {    sForegroundActivities--;  }  if (old == 0 || sForegroundActivities == 0) {    final Intent intent=new Intent(context,MusicPlaybackService.class);    intent.setAction(MusicPlaybackService.FOREGROUND_STATE_CHANGED);    intent.putExtra(MusicPlaybackService.NOW_IN_FOREGROUND,sForegroundActivities != 0);    context.startService(intent);  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof TemplateEffect) {    if (!((TemplateEffect)o).labelTemplate.equals(labelTemplate)) {      return false;    } else     if (!((TemplateEffect)o).valueTemplate.equals(valueTemplate)) {      return false;    } else     if (((TemplateEffect)o).exclusive != exclusive) {      return false;    } else     if (((TemplateEffect)o).isNegated() != negated) {      return false;    } else     if (((TemplateEffect)o).priority != priority) {      return false;    }    return true;  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.VARIABLE_DECLARATION__NAME:setName(NAME_EDEFAULT);return;case N4JSPackage.VARIABLE_DECLARATION__ANNOTATIONS:getAnnotations().clear();return;case N4JSPackage.VARIABLE_DECLARATION__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public void monitor(ScalingStateMonitorTask task){  taskQueue.add(task);  startMonitor();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.975 -0500",hash_original_method="3E31B254E1B4E9A5234881E68AADF1C7",hash_generated_method="0017153D2B012663C8461E431C2718A0") public Builder permitAll(){  return disable(ALL_THREAD_DETECT_BITS);}  }
class C{  public ClientNode(final String zookeeperURL,String electionRootPath) throws IOException {  requireArgument(zookeeperURL != null,"Zookeeper cluster url cannot be null.");  requireArgument(electionRootPath != null,"Election root path cannot be null.");  if (zooKeeper == null) {    try {      _logger.debug("Starting ZooKeeper:");      zooKeeper=new ZooKeeper(zookeeperURL,3000,new ClientNodeWatcher());      _logger.debug("Finished starting ZooKeeper: " + zooKeeper);    } catch (    IOException e) {      _logger.error(e.toString());      zooKeeper=null;    }  }  this.electionRootPath=electionRootPath;}  }
class C{  public static boolean isIncreasingArray(int[] arr,int len){  assert arr != null;  assert 0 <= len && len <= arr.length;  if (arr.length == 0)   return true;  for (int i=1; i < len; i++) {    if (arr[i - 1] >= arr[i])     return false;  }  return true;}  }
class C{  public void put(String key,long value){  super.put(key,Long.valueOf(value));}  }
class C{  public boolean isEmpty(){  if (null == m_date) {    return true;  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.AWAIT_EXPRESSION__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  private double[][] computeDiffs(List<CLIQUESubspace<V>> denseSubspaces,int[] mi,int[] mp){  int n=denseSubspaces.size() - 1;  double[] diff_mi=new double[n + 1];  double[] diff_mp=new double[n + 1];  double resultMI=0;  double resultMP=0;  for (int i=0; i < denseSubspaces.size(); i++) {    double diffMI=Math.abs(denseSubspaces.get(i).getCoverage() - mi[i]);    resultMI+=diffMI == 0.0 ? 0 : StrictMath.log(diffMI) / StrictMath.log(2);    double diffMP=(i != n) ? Math.abs(denseSubspaces.get(n - i).getCoverage() - mp[n - 1 - i]) : 0;    resultMP+=diffMP == 0.0 ? 0 : StrictMath.log(diffMP) / StrictMath.log(2);    diff_mi[i]=resultMI;    if (i != n) {      diff_mp[n - 1 - i]=resultMP;    }  }  double[][] result=new double[2][];  result[0]=diff_mi;  result[1]=diff_mp;  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected boolean isEqualValue(final Object value1,final Object value2){  return value1 == value2 || value1.equals(value2);}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  String toString(boolean includePrivateCredentials){  String s=ResourcesMgr.getString("Subject.");  String suffix="";synchronized (principals) {    Iterator<Principal> pI=principals.iterator();    while (pI.hasNext()) {      Principal p=pI.next();      suffix=suffix + ResourcesMgr.getString(".Principal.") + p.toString()+ ResourcesMgr.getString("NEWLINE");    }  }synchronized (pubCredentials) {    Iterator<Object> pI=pubCredentials.iterator();    while (pI.hasNext()) {      Object o=pI.next();      suffix=suffix + ResourcesMgr.getString(".Public.Credential.") + o.toString()+ ResourcesMgr.getString("NEWLINE");    }  }  if (includePrivateCredentials) {synchronized (privCredentials) {      Iterator<Object> pI=privCredentials.iterator();      while (pI.hasNext()) {        try {          Object o=pI.next();          suffix+=ResourcesMgr.getString(".Private.Credential.") + o.toString() + ResourcesMgr.getString("NEWLINE");        } catch (        SecurityException se) {          suffix+=ResourcesMgr.getString(".Private.Credential.inaccessible.");          break;        }      }    }  }  return s + suffix;}  }
class C{  public TagIvarITCase(String name){  super(name);}  }
class C{  public static Object convert(Xid xid){  ActiveMQBuffer buffer=ActiveMQBuffers.dynamicBuffer(200);  XidCodecSupport.encodeXid(xid,buffer);  Object obj=XidCodecSupport.decodeXid(buffer);  return "xid=" + obj + ",clientXID="+ xid;}  }
class C{  public int hashCode(){  return uri.hashCode();}  }
class C{  public ASN1Primitive parsePublicKey() throws IOException {  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());  return aIn.readObject();}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.RESEQUENCER;}  }
class C{  protected IgfsSecondaryFileSystem createSecondaryFileSystemStack() throws Exception {  Ignite igniteSecondary=startGridWithIgfs("ignite-secondary","igfs-secondary",PRIMARY,null,SECONDARY_REST_CFG,secondaryIpFinder);  IgfsEx secondaryIgfsImpl=(IgfsEx)igniteSecondary.fileSystem("igfs-secondary");  igfsSecondary=new DefaultIgfsSecondaryFileSystemTestAdapter(secondaryIgfsImpl);  return secondaryIgfsImpl.asSecondary();}  }
class C{  public static String tsToString(Context context,long ts,boolean timeOnly){  long daysDiff=(new Date().getTime() - zeroTimeDate(new Date(ts)).getTime()) / MS_IN_DAY;  String res;  if (timeOnly) {    res=DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_SHOW_TIME);  } else   if (0 == daysDiff) {    res=context.getString(R.string.today) + " " + DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_SHOW_TIME);  } else   if (1 == daysDiff) {    res=context.getString(R.string.yesterday) + " " + DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_SHOW_TIME);  } else   if (7 > daysDiff) {    res=DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_ABBREV_ALL);  } else   if (365 > daysDiff) {    res=DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_ABBREV_ALL | DateUtils.FORMAT_SHOW_DATE);  } else {    res=DateUtils.formatDateTime(context,ts,DateUtils.FORMAT_ABBREV_ALL | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR);  }  return res;}  }
class C{  @DebugLog @NonNull public static String buildFullName(@NonNull String firstName,@NonNull String lastName){  if (TextUtils.isEmpty(firstName) && TextUtils.isEmpty(lastName)) {    return "";  } else   if (TextUtils.isEmpty(firstName)) {    return lastName.trim();  } else   if (TextUtils.isEmpty(lastName)) {    return firstName.trim();  } else {    return firstName.trim() + " " + lastName.trim();  }}  }
class C{  public AccountHeaderBuilder withHeightRes(@DimenRes int heightRes){  this.mHeight=DimenHolder.fromResource(heightRes);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void onChunkUnload(){  if (addedToEnet && Info.isIc2Available()) {    MinecraftForge.EVENT_BUS.post(new EnergyTileUnloadEvent(this));    addedToEnet=false;  }}  }
class C{  public static void deleteObject(String path,String bucketName) throws IOException, GeneralSecurityException {  Storage client=StorageFactory.getService();  client.objects().delete(bucketName,path).execute();}  }
class C{  private static boolean varIsGeneralization(final Var first,final Var second){  if (first == null || !first.hasValue()) {    return true;  }  return second != null && first.getValue().equals(second.getValue());}  }
class C{  protected License buildLicenseObjectFromText(String licenseText) throws ELMLicenseException {  boolean bGetLock=false;  try {    bGetLock=parseLicenseLock.tryLock(waitAcquireParseLicenseLock,TimeUnit.SECONDS);  } catch (  Exception e) {    _log.warn("Exception when adding license, msg: {}",e.getMessage());    throw APIException.internalServerErrors.processLicenseError("failed getting lock to validate and parse license, error:" + e.getMessage());  }  if (bGetLock) {    try {      License license=new License();      addLicenseToDiskLicenseFile(licenseText);      ELMLicenseProps licProps=new ELMLicenseProps();      licProps.setLicPath(LicenseConstants.LICENSE_FILE_PATH);      ELMFeatureDetail[] featureDetails=null;      ELMLicenseSource licSource=new ELMLicenseSource(licProps);      featureDetails=licSource.getFeatureDetailList();      LicenseFeature licenseFeature=null;      for (      ELMFeatureDetail featureDetail : featureDetails) {        licenseFeature=new LicenseFeature();        if (!featureDetail.getFeatureName().equals(LicenseConstants.VIPR_CONTROLLER)) {          throw APIException.badRequests.licenseIsNotValid(String.format("The license file contains a not supported feature: %s.",featureDetail.getFeatureName()) + "Non controller license is no longer supported.");        }        if (featureDetail.getDaysUntilExp() > 0) {          licenseFeature.setLicensed(true);          licenseFeature.setVersion(featureDetail.getVersion());          licenseFeature.setIssuer(featureDetail.getIssuer());          licenseFeature.setNotice(featureDetail.getNotice());          licenseFeature.setDateExpires(convertCalendarToString(featureDetail.getExpDate()));          licenseFeature.setExpired(isExpired(licenseFeature.getDateExpires()));          licenseFeature.setDateIssued(convertCalendarToString(featureDetail.getIssuedDate()));          String subModelId=LicenseFeature.OLD_LICENSE_SUBMODEL;          Properties p=featureDetail.getVendorString(";");          if (p.size() > 0) {            for (Enumeration e=p.propertyNames(); e.hasMoreElements(); ) {              String str=(String)e.nextElement();              if (str.equals(LicenseConstants.LICENSE_TYPE_PROPERTYNAME)) {                subModelId=p.getProperty(str);                _log.info("Get a license increment with type: {}",subModelId);                break;              }            }          }          licenseFeature.setModelId(featureDetail.getFeatureName() + LicenseFeature.MODELID_DELIMETER + subModelId);          setVendorStringFields(featureDetail,licenseFeature,p);        } else {          _log.info("The license file contains a feature which is in an expired state. The license was not added to the system.");          throw APIException.badRequests.licenseIsNotValid("The license file contains a feature which is in an expired state. The license was not added to the system.");        }        license.addLicenseFeature(licenseFeature);      }      deleteCurrentLicenseFileOnDisk();      _log.debug("Finished parsing of license");      return license;    }  finally {      parseLicenseLock.unlock();    }  } else {    _log.warn("Cannot acquire lock. Another thread is holding the lock validating and parsing license");    throw APIException.serviceUnavailable.postLicenseBusy();  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void animateX(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.INFOMODEL_SOURCE__MODEL:    if (resolve)     return getModel();  return basicGetModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean containsKey(K1 key1,K2 key2){  return super.containsKey(new Pair<K1,K2>(key1,key2));}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public TCServerManager(String path) throws ParserConfigurationException, SAXException, IOException {  this._serverConfigFile=path;  readFromXmlFile();}  }
class C{  public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder,HttpStreamer httpStreamer) throws HandlerException {  this(method,handler,args,formParameters,responder);  if (!method.getReturnType().equals(Void.TYPE)) {    throw new HandlerException(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR,"Resource method should be void if it accepts chunked requests");  }  try {    method.invoke(handler,args);  } catch (  InvocationTargetException e) {    throw new HandlerException(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR,"Resource method invocation failed",e.getTargetException());  }catch (  IllegalAccessException e) {    throw new HandlerException(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR,"Resource method invocation access failed",e);  }  httpStreamHandler=httpStreamer.getHttpStreamHandler();  if (httpStreamHandler == null) {    throw new HandlerException(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR,"Streaming unsupported");  }  httpStreamHandler.init(this.responder);}  }
class C{  default String annotationSeparator(){  return nl();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  private void completeShipment(){  if (m_shipment != null) {    if (!m_shipment.processIt(p_docAction))     log.warning("Failed: " + m_shipment);    m_shipment.saveEx();    addLog(m_shipment.getM_InOut_ID(),m_shipment.getMovementDate(),null,m_shipment.getDocumentNo());    m_created++;    m_map=new HashMap<SParameter,MStorage[]>();    m_lastPP=null;    m_lastStorages=null;  }  m_shipment=null;  m_line=0;}  }
class C{  private static int dayToUtilDay(int day){switch (day) {case EventRecurrence.SU:    return Calendar.SUNDAY;case EventRecurrence.MO:  return Calendar.MONDAY;case EventRecurrence.TU:return Calendar.TUESDAY;case EventRecurrence.WE:return Calendar.WEDNESDAY;case EventRecurrence.TH:return Calendar.THURSDAY;case EventRecurrence.FR:return Calendar.FRIDAY;case EventRecurrence.SA:return Calendar.SATURDAY;default :throw new IllegalArgumentException("bad day argument: " + day);}}  }
class C{  public long nextLong(){  return nextLong(items);}  }
class C{  public double toDouble(){  XMLString s=trim();  double result=Double.NaN;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c != '-' && c != '.' && (c < 0X30 || c > 0x39)) {      return result;    }  }  try {    result=Double.parseDouble(s.toString());  } catch (  NumberFormatException e) {  }  return result;}  }
class C{  public CRelocationTable(final IDebugger debugger,final IFilledList<Pair<INaviModule,MemoryModule>> wronglyPlacedModules){  super(new CRelocationTableModel(debugger,wronglyPlacedModules));  setDefaultRenderer(Object.class,new CRelocationTableRenderer());}  }
class C{  @Override public Item withSelectable(boolean selectable){  this.mSelectable=selectable;  return (Item)this;}  }
class C{  @Override public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Node clonedNode;  NamedNodeMap attributes;  Node attributeNode;  String attributeName;  java.util.Collection result=new java.util.ArrayList();  java.util.Collection expectedResult=new java.util.ArrayList();  expectedResult.add("domestic");  expectedResult.add("street");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(1);  clonedNode=addressNode.cloneNode(false);  attributes=clonedNode.getAttributes();  for (int indexN10065=0; indexN10065 < attributes.getLength(); indexN10065++) {    attributeNode=(Node)attributes.item(indexN10065);    attributeName=attributeNode.getNodeName();    result.add(attributeName);  }  assertEquals("nodeCloneAttributesCopiedAssert1",expectedResult,result);}  }
class C{  public PDFObject(PDFFile owner,int type,Object value){  this.type=type;  if (type == NAME) {    value=((String)value).intern();  } else   if (type == KEYWORD && value.equals("true")) {    this.type=BOOLEAN;    value=Boolean.TRUE;  } else   if (type == KEYWORD && value.equals("false")) {    this.type=BOOLEAN;    value=Boolean.FALSE;  }  this.value=value;  this.owner=owner;}  }
class C{  public static String valueOf(long value){  return Long.toString(value);}  }
class C{  public td addWindowFooter(){  if (m_table == null)   return null;  td center=new td("windowFooter",AlignType.CENTER,AlignType.MIDDLE,false);  m_table.addElement(new tr().addElement(center));  return center;}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (Handler_String.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  long bits, val;  do {    int y;    int z;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];      }      for (; kk < N - 1; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];      }      z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];      mti=0;    }    z=mt[mti++];    z^=z >>> 11;    z^=(z << 7) & TEMPERING_MASK_B;    z^=(z << 15) & TEMPERING_MASK_C;    z^=(z >>> 18);    bits=(((((long)y) << 32) + (long)z) >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  public int hashCode(){  int hash=(ignoreCase ? 1 : 0);  try {    NamingEnumeration<?> all=getAll();    while (all.hasMore()) {      hash+=all.next().hashCode();    }  } catch (  NamingException e) {  }  return hash;}  }
class C{  private void persistStatsInDB(List<Stat> stats) throws BaseCollectionException {  if (!stats.isEmpty()) {    _keyMap.put(Constants._Stats,stats);    dumpStatRecords();    injectStats();    stats.clear();  }}  }
class C{  void ensureEmailSet() throws BulkUserImportException {  if (Strings.isEmpty(dm.getCurrentUser().getEmail())) {    throw new BulkUserImportException(BulkUserImportException.Reason.EMAIL_REQUIRED,null);  }}  }
class C{  public void closeFlyThrough(){  Dert.getWorldView().getScenePanel().enableFrameGrab(null);  SceneFramework.getInstance().suspend(false);  if (flyThroughDialog != null) {    flyThroughDialog.setVisible(false);  }  flyThroughDialog=null;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_p+ ")";}  }
class C{  public void run(){  closed=false;  do {    try {      byte[] buffer=new byte[256];      DatagramPacket packet=new DatagramPacket(buffer,buffer.length);      socket.receive(packet);      Integer tid=ModbusUtil.registersToInt(buffer);      requests.put(tid,packet);      receiveQueue.put(buffer);      logger.debug("Received package to queue");    } catch (    Exception ex) {      if (running) {        logger.error("Problem reading UDP socket",ex);      }    }  } while (running);  closed=true;}  }
class C{  protected void init(String text,Icon icon){  if (text != null) {    setText(text);  }  if (icon != null) {    setIcon(icon);  }  addFocusListener(new MenuItemFocusListener());  setUIProperty("borderPainted",Boolean.FALSE);  setFocusPainted(false);  setHorizontalTextPosition(JButton.TRAILING);  setHorizontalAlignment(JButton.LEADING);  updateUI();}  }
class C{  public InterruptedIOException(){  super();}  }
class C{  public ClusterStateRequestBuilder clear(){  request.clear();  return this;}  }
class C{  public Shape diamond(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,(y + 0.5f * height));  m_path.lineTo((x + 0.5f * height),y);  m_path.lineTo((x + height),(y + 0.5f * height));  m_path.lineTo((x + 0.5f * height),(y + height));  m_path.closePath();  return m_path;}  }
class C{  protected boolean[] datasetIntegrity(AttrTypes attrTypes,int classType,boolean attributeMissing,boolean classMissing){  Estimator estimator=null;  print("estimator doesn't alter original datasets");  printAttributeSummary(attrTypes,classType);  print("...");  int numTrain=getNumInstances();  getNumInstances();  int numClasses=2, missingLevel=100;  boolean[] result=new boolean[2];  Instances train=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,1,attrTypes,numClasses,classType);    int attrIndex=0;    if (missingLevel > 0) {      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);    }    estimator=Estimator.makeCopies(getEstimator(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    Instances trainCopy=new Instances(train);    int attrIndex=0;    estimator.addValues(trainCopy,attrIndex);    compareDatasets(train,trainCopy);    built=true;    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }      println(": " + ex.getMessage() + "\n");      println("Here are the datasets:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");    }  }  return result;}  }
class C{  public Builder withQueueSize(int queueSize){  if (queueSize <= 0) {    throw new IllegalArgumentException("queueSize must be a positive integer.");  }  this.queueSize=queueSize;  return this;}  }
class C{  private void createDataLinks(Draft2Workflow workflow) throws Draft2Exception {  for (  Draft2OutputPort port : workflow.getOutputs()) {    List<String> sources=transformSource(port.getSource());    for (int position=0; position < sources.size(); position++) {      String destination=port.getId();      LinkMerge linkMerge=port.getLinkMerge() != null ? LinkMerge.valueOf(port.getLinkMerge()) : LinkMerge.merge_nested;      Draft2DataLink dataLink=new Draft2DataLink(sources.get(position),destination,linkMerge,position + 1);      workflow.addDataLink(dataLink);    }  }  for (  Draft2Step step : workflow.getSteps()) {    List<Draft2DataLink> dataLinks=new ArrayList<>();    for (    Map<String,Object> input : step.getInputs()) {      List<String> sources=transformSource(Draft2BindingHelper.getSource(input));      for (int position=0; position < sources.size(); position++) {        String destination=Draft2BindingHelper.getId(input);        LinkMerge linkMerge=Draft2BindingHelper.getLinkMerge(input) != null ? LinkMerge.valueOf(Draft2BindingHelper.getLinkMerge(input)) : LinkMerge.merge_nested;        Draft2DataLink dataLink=new Draft2DataLink(sources.get(position),destination,linkMerge,position + 1);        dataLinks.add(dataLink);      }    }    workflow.addDataLinks(dataLinks);  }}  }
class C{  public void actionPerformed(ActionEvent e){  Box b=Box.createVerticalBox();  Graph graph=workbench.getGraph();  JTextArea textArea=new JTextArea();  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(600,600));  textArea.append("Directed Paths:");  if (allDirectedPaths(graph,textArea))   return;  Box b2=Box.createHorizontalBox();  b2.add(scroll);  textArea.setCaretPosition(0);  b.add(b2);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(b);  EditorWindow window=new EditorWindow(panel,"Directed Paths","Close",false,workbench);  DesktopController.getInstance().addEditorWindow(window,JLayeredPane.PALETTE_LAYER);  window.setVisible(true);}  }
class C{  public void cmd_query(boolean reports,KeyNamePair process,KeyNamePair table,Integer C_BPartner_ID,String name,String description,String help,KeyNamePair createdBy,Timestamp createdFrom,Timestamp createdTo){  StringBuffer sql=new StringBuffer();  MRole role=MRole.getDefault();  if (!role.isCanReport()) {    log.warning("User/Role cannot Report AD_User_ID=" + Env.getAD_User_ID(Env.getCtx()));    return;  }  sql.append(" AND IsReport=").append(reports ? "'Y'" : "'N'");  if (reports) {    if (process != null && process.getKey() > 0)     sql.append(" AND AD_Process_ID=").append(process.getKey());  }  if (m_AD_Table_ID > 0) {    sql.append(" AND ((AD_Table_ID=").append(m_AD_Table_ID);    if (m_Record_ID > 0)     sql.append(" AND Record_ID=").append(m_Record_ID);    sql.append(")");    if (m_AD_Table_ID == MBPartner.Table_ID && m_Record_ID > 0)     sql.append(" OR C_BPartner_ID=").append(m_Record_ID);    sql.append(")");    m_AD_Table_ID=0;    m_Record_ID=0;  } else {    if (table != null && table.getKey() > 0)     sql.append(" AND AD_Table_ID=").append(table.getKey());  }  if (!reports) {    if (C_BPartner_ID != null)     sql.append(" AND C_BPartner_ID=").append(C_BPartner_ID); else     sql.append(" AND C_BPartner_ID IS NOT NULL");  }  if (name != null && name.length() > 0) {    if (name.indexOf('%') != -1 || name.indexOf('_') != -1)     sql.append(" AND Name LIKE ").append(DB.TO_STRING(name)); else     sql.append(" AND Name=").append(DB.TO_STRING(name));  }  if (description != null && description.length() > 0) {    if (description.indexOf('%') != -1 || description.indexOf('_') != -1)     sql.append(" AND Description LIKE ").append(DB.TO_STRING(description)); else     sql.append(" AND Description=").append(DB.TO_STRING(description));  }  if (help != null && help.length() > 0) {    if (help.indexOf('%') != -1 || help.indexOf('_') != -1)     sql.append(" AND Help LIKE ").append(DB.TO_STRING(help)); else     sql.append(" AND Help=").append(DB.TO_STRING(help));  }  if (createdBy != null && createdBy.getKey() > 0)   sql.append(" AND CreatedBy=").append(createdBy.getKey());  if (createdFrom != null)   sql.append(" AND Created>=").append(DB.TO_DATE(createdFrom,true));  if (createdTo != null)   sql.append(" AND Created<").append(DB.TO_DATE(TimeUtil.addDays(createdTo,1),true));  log.fine(sql.toString());  sql.append(" AND (AD_Process_ID IS NULL OR AD_Process_ID IN " + "(SELECT AD_Process_ID FROM AD_Process_Access WHERE AD_Role_ID=").append(role.getAD_Role_ID()).append(" OR ").append(role.getIncludedRolesWhereClause("AD_Role_ID",null)).append("))");  sql.append(" AND (AD_Table_ID IS NULL " + "OR (AD_Table_ID IS NOT NULL AND AD_Process_ID IS NOT NULL) " + "OR AD_Table_ID IN "+ "(SELECT t.AD_Table_ID FROM AD_Tab t"+ " INNER JOIN AD_Window_Access wa ON (t.AD_Window_ID=wa.AD_Window_ID) "+ "WHERE wa.AD_Role_ID=").append(role.getAD_Role_ID()).append(" OR ").append(role.getIncludedRolesWhereClause("wa.AD_Role_ID",null)).append("))");  log.finest(sql.toString());  m_archives=MArchive.get(Env.getCtx(),sql.toString());  log.info("Length=" + m_archives.length);}  }
class C{  public ParseException(final String message){  this(-1,-1,message);}  }
class C{  protected void processAssociationOverride(AssociationOverrideMetadata associationOverride,EmbeddableMapping embeddableMapping,MetadataDescriptor owningDescriptor){  throw ValidationException.invalidEmbeddableAttributeForAssociationOverride(getJavaClass(),getAttributeName(),associationOverride.getName(),associationOverride.getLocation());}  }
class C{  public static <E>ImmutableList<E> copyOf(E[] elements){switch (elements.length) {case 0:    return ImmutableList.of();case 1:  return new SingletonImmutableList<E>(elements[0]);default :return new RegularImmutableList<E>(checkElementsNotNull(elements.clone()));}}  }
class C{  private void doAdd(String name,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  doAddRemove(name,true,baseRequest,request,response);}  }
class C{  public NoSideEffectVisitor(BitSet noSideEffectRegs){  this.noSideEffectRegs=noSideEffectRegs;}  }
class C{  public boolean validateSignature(String stringToSign,String key,String targetSignature){  String computedSignature=Utilities.sign(stringToSign,key);  return Utilities.slowStringComparison(targetSignature,computedSignature);}  }
class C{  public Writer writeTo(Writer outArg) throws IOException {  BufferedWriter out=new BufferedWriter(outArg);  try {    writeConfig("",this,out,0,false);  }  finally {    out.flush();  }  return outArg;}  }
class C{  private static void finalClose(final Closeable closeMe){  if (closeMe != null) {    try {      closeMe.close();    } catch (    IOException iox) {      LOG.log(Level.FINEST,"Could not close: " + closeMe,iox);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CLASS_DEFINITION___NAME_1:    return getName_1();case UmplePackage.CLASS_DEFINITION___CLASS_CONTENT_1:  return getClassContent_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static ReflectionProvider newReflectionProvider(final FieldDictionary dictionary){  return DependencyInjectionFactory.newInstance(reflectionProviderType,dictionary);}  }
class C{  @GwtIncompatible public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  return toArray(iterable,ObjectArrays.newArray(type,0));}  }
class C{  public String toString(){  if (key == null)   return "";  return (key.toString());}  }
class C{  protected void moveUpItem(){  if (selectionTable.getSelectionCount() == 0) {    return;  }  for (  final int index : selectionTable.getSelectionIndices()) {    if (index == 0) {      selectionTable.forceFocus();      return;    }  }  final int[] newSelection=new int[selectionTable.getSelectionCount()];  int newSelectionIndex=0;  for (  final TableItem tableItem : selectionTable.getSelection()) {    final int position=selection.indexOf(tableItem.getData());    swap(position,position - 1);    newSelection[newSelectionIndex++]=position - 1;  }  redrawTables();  selectionTable.select(newSelection);  selectionTable.forceFocus();}  }
class C{  private boolean checkValidWorkspace(final Shell shell,final URL url){  if (url == null) {    return false;  }  if (WORKSPACE_CHECK_REFERENCE_BUNDLE_VERSION == null) {    return true;  }  final Version version=readWorkspaceVersion(url);  if (version == null) {    return true;  }  final Version ide_version=toMajorMinorVersion(WORKSPACE_CHECK_REFERENCE_BUNDLE_VERSION);  final Version workspace_version=toMajorMinorVersion(version);  final int versionCompareResult=workspace_version.compareTo(ide_version);  if (versionCompareResult == 0) {    return true;  }  int severity;  String title;  String message;  if (versionCompareResult < 0) {    severity=INFORMATION;    title=IDEApplication_versionTitle_olderWorkspace;    message=NLS.bind(IDEApplication_versionMessage_olderWorkspace,url.getFile());  } else {    severity=WARNING;    title=IDEApplication_versionTitle_newerWorkspace;    message=NLS.bind(IDEApplication_versionMessage_newerWorkspace,url.getFile());  }  final MessageDialog dialog=new MessageDialog(shell,title,null,message,severity,new String[]{IDialogConstants.OK_LABEL,IDialogConstants.CANCEL_LABEL},0);  return dialog.open() == Window.OK;}  }
class C{  public Property createArrearsDemand(final Property oldproperty,final Date dateOfCompletion,final PropertyImpl property){  LOGGER.debug("Entered into createArrearsDemand, oldproperty: " + oldproperty + ", dateOfCompletion: "+ dateOfCompletion+ ", property: "+ property);  Ptdemand currPtDmd=null;  Ptdemand oldCurrPtDmd=null;  final Module module=moduleDao.getModuleByName(PTMODULENAME);  final Installment effectiveInstall=installmentDao.getInsatllmentByModuleForGivenDate(module,dateOfCompletion);  final Installment currInstall=propertyTaxCommonUtils.getCurrentInstallment();  for (  final Ptdemand demand : property.getPtDemandSet())   if (demand.getIsHistory().equalsIgnoreCase("N"))   if (demand.getEgInstallmentMaster().equals(currInstall)) {    currPtDmd=demand;    break;  }  for (  final Ptdemand ptDmd : oldproperty.getPtDemandSet())   if (ptDmd.getIsHistory().equalsIgnoreCase("N")) {    if (ptDmd.getEgInstallmentMaster().equals(currInstall))     oldCurrPtDmd=ptDmd;  }  addArrDmdDetToCurrentDmd(oldCurrPtDmd,currPtDmd,effectiveInstall,false);  LOGGER.debug("Exiting from createArrearsDemand");  return property;}  }
class C{  public boolean isClosed(){  return (this.state == CLOSED);}  }
class C{  public String pullDump2PC(){  String serial=device.getSerialNumber();  File dest=new File(FileUtils.getTempDirectory(),serial + ".xml");  String path=dest.getPath();  log.debug("pull dump file to pc's path {}",path);  CommandLine commandpull=adbCommand("pull","/data/local/tmp/local/tmp/qian.xml",path);  String out=executeCommandQuietly(commandpull);  log.debug("pull dump file to pc's result {}",out);  return path;}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o,final boolean optional,final IAccessPathExpander<ISPO> expander){  super(new IVariableOrConstant[]{s,p,o},new NV(Annotations.RELATION_NAME,new String[]{relationName}),new NV(Annotations.OPTIONAL,optional),new NV(Annotations.ACCESS_PATH_EXPANDER,expander));}  }
class C{  public void update(final BasicCamera camera){  if (!enabled) {    return;  }  if (camera.isCulled(this)) {    return;  }  Vector3[] tPoint=getTestPoints();  if (tPoint == null) {    return;  }  double minDist=Double.MAX_VALUE;  camLoc.set(camera.getLocation());  lookAt.set(camera.getLookAt());  if (contains(lookAt.getX(),lookAt.getY())) {    minDist=camLoc.distance(lookAt);    closest.set(lookAt);  }  for (int i=0; i < tPoint.length; ++i) {    double d=camLoc.distance(tPoint[i]);    if (d < minDist) {      minDist=d;      closest.set(tPoint[i]);      if (contains(tPoint[i].getX(),camLoc.getY())) {        int c=getColumn(tPoint[i].getX());        int r=getRow(camLoc.getY());        mesh.getVertex(c,r,tmpVec);        d=camLoc.distance(tmpVec);        if (d < minDist) {          minDist=d;          closest.set(tmpVec);        }      }      if (contains(camLoc.getX(),tPoint[i].getY())) {        int c=getColumn(camLoc.getX());        int r=getRow(tPoint[i].getY());        mesh.getVertex(c,r,tmpVec);        d=camLoc.distance(tmpVec);        if (d < minDist) {          minDist=d;          closest.set(tmpVec);        }      }    }  }  double pixSize=camera.getPixelSizeAt(closest,true);  if (pixSize <= 0) {    return;  }  pixSize*=CELL_SIZE;  if (pixSize >= pixelWidth) {    if (child != null) {      merge();    }  } else   if (pixSize <= pixelWidth / 2) {    if (child == null) {      split();    } else {      for (int i=0; i < child.length; ++i) {        child[i].update(camera);      }    }  } else   if (child != null) {    for (int i=0; i < child.length; ++i) {      child[i].update(camera);    }  }}  }
class C{  public static float decodeDimension(byte value[],int offset){  return NumericUtils.sortableIntToFloat(NumericUtils.sortableBytesToInt(value,offset));}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public void assignVnasServers(URI projectId,VirtualNasParam vNasParam){  client.put(String.class,vNasParam,getVnasAssignUrl(),projectId);}  }
class C{  public boolean isLedOn(){  return ledOn;}  }
class C{  public float toImaginary(){  return _imag;}  }
class C{  public void testSetNClob() throws Exception {  createTable("testSetNClob","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","false");  props1.put("useUnicode","true");  props1.put("characterEncoding","latin1");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testSetNClob (c1, c2, c3) VALUES (?, ?, ?)");  pstmt1.setNClob(1,(NClob)null);  NClob nclob2=conn1.createNClob();  nclob2.setString(1,"aaa");  pstmt1.setNClob(2,nclob2);  Reader reader3=new StringReader("\'aaa\'");  pstmt1.setNClob(3,reader3,5);  pstmt1.execute();  ResultSet rs1=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNClob");  rs1.next();  assertEquals(null,rs1.getString(1));  assertEquals("aaa",rs1.getString(2));  assertEquals("\'aaa\'",rs1.getString(3));  rs1.close();  pstmt1.close();  conn1.close();  createTable("testSetNClob","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10), c3 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","false");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testSetNClob (c1, c2, c3) VALUES (?, ?, ?)");  pstmt2.setNClob(1,(NClob)null);  nclob2=conn2.createNClob();  nclob2.setString(1,"aaa");  pstmt2.setNClob(2,nclob2);  reader3=new StringReader("\'aaa\'");  pstmt2.setNClob(3,reader3,5);  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1, c2, c3 FROM testSetNClob");  rs2.next();  assertEquals(null,rs2.getString(1));  assertEquals("aaa",rs2.getString(2));  assertEquals("\'aaa\'",rs2.getString(3));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  protected Object execute(){  init();  Ansi buffer=Ansi.ansi();  buffer.a(Branding.loadBrandingProperties().getProperty("banner"));  buffer.a(INTENSITY_BOLD).a("COMMANDS").a(INTENSITY_BOLD_OFF).a("\n");  String value=buildAsciiForm().withEntry(color("remote"),"Add or remove remote Codenvy cloud references").withEntry(color("login"),"Login to a remote Codenvy cloud").withEntry(color("logout"),"Logout to a remote Codenvy cloud").withEntry(color("list"),"List workspaces, projects and processes").withEntry(color("clone-local"),"Clone a remote Codenvy project to a local directory").withEntry(color("build"),"Build a project").withEntry(color("run"),"Run a project").withEntry(color("logs"),"Display output logs for a runner or builder").withEntry(color("info"),"Display information for a project, runner, or builder").withEntry(color("open"),"Starts a browser session to access a project, builder or runner").withEntry(color("stop"),"Stop one or more runner processes").withEntry(color("create-project"),"Create a project").withEntry(color("create-factory"),"Create a factory").withEntry(color("delete-factory"),"Delete a factory").withEntry(color("update-factory"),"Update a factory").withEntry(color("list-factories"),"List factories").withEntry(color("privacy"),"Change privacy for a project").withEntry(color("delete-project"),"Delete a project").withEntry(color("push"),"Push local project changes back to Codenvy").withEntry(color("pull"),"Update project sync point directory created by clone-local").alphabeticalSort().toAscii();  buffer.a(value);  buffer.a("\n");  buffer.a("\n");  buffer.a(getMultiRemoteCodenvy().listRemotes());  buffer.a("\n");  buffer.a("To add a new remote, use 'remote add <remote-name> <URL>'");  buffer.a("\n");  buffer.a("Use '\u001B[1m[command] --help\u001B[0m' for help on a specific command.\r\n");  System.out.println(buffer.toString());  return null;}  }
class C{  public boolean number(){  return "Integer".contains(type) || "Double".contains(type) || "Number".contains(type);}  }
class C{  private void query(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  Collection<Cache.Entry<Integer,CacheValue>> res=cache.query(new SqlQuery<Integer,CacheValue>(CacheValue.class,"val >= ? and val < ?").setArgs(lowerBound,upperBound)).getAll();  assertEquals(res.size(),upperBound - lowerBound);  for (  Cache.Entry<Integer,CacheValue> entry : res) {    assert entry != null;    assert entry.getKey() != null;    assert entry.getValue() != null;    assert entry.getKey() == entry.getValue().value();  }  assertEquals(0,swapCnt.get());  assertEquals(0,unswapCnt.get());  checkEntries(cache,lowerBound,upperBound);  assertEquals(0,swapCnt.get());  assertEquals(unswapCnt.get(),upperBound - lowerBound);}  }
class C{  public ValueMarker(double value,Paint paint,Stroke stroke){  this(value,paint,stroke,paint,stroke,1.0f);}  }
class C{  public HookResult onMessage(SMTPSession session,Mail mail){  session.getLogger().debug("sending mail");  try {    queue.enQueue(mail);    Collection<MailAddress> theRecipients=mail.getRecipients();    String recipientString="";    if (theRecipients != null) {      recipientString=theRecipients.toString();    }    if (session.getLogger().isInfoEnabled()) {      String infoBuffer="Successfully spooled mail " + mail.getName() + " from "+ mail.getSender()+ " on "+ session.getRemoteAddress().getAddress().toString()+ " for "+ recipientString;      session.getLogger().info(infoBuffer.toString());    }  } catch (  MessagingException me) {    session.getLogger().error("Unknown error occurred while processing DATA.",me);    return new HookResult(HookReturnCode.DENYSOFT,DSNStatus.getStatus(DSNStatus.TRANSIENT,DSNStatus.UNDEFINED_STATUS) + " Error processing message.");  }  return new HookResult(HookReturnCode.OK,DSNStatus.getStatus(DSNStatus.SUCCESS,DSNStatus.CONTENT_OTHER) + " Message received");}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public SAXRecords ts2saxViaWindow(double[] ts,int windowSize,int paaSize,double[] cuts,NumerosityReductionStrategy strategy,double nThreshold) throws SAXException {  if (windowSize > ts.length) {    throw new SAXException("Unable to saxify via window, window size is greater than the timeseries length...");  }  SAXRecords saxFrequencyData=new SAXRecords();  char[] previousString=null;  for (int i=0; i <= ts.length - windowSize; i++) {    double[] subSection=Arrays.copyOfRange(ts,i,i + windowSize);    subSection=tsProcessor.znorm(subSection,nThreshold);    double[] paa=tsProcessor.paa(subSection,paaSize);    char[] currentString=tsProcessor.ts2String(paa,cuts);    if (null != previousString) {      if (NumerosityReductionStrategy.EXACT.equals(strategy) && Arrays.equals(previousString,currentString)) {        continue;      } else       if (NumerosityReductionStrategy.MINDIST.equals(strategy) && checkMinDistIsZero(previousString,currentString)) {        continue;      }    }    previousString=currentString;    saxFrequencyData.add(currentString,i);  }  return saxFrequencyData;}  }
class C{  public boolean undefinesAll(){  return getDefinedRegisters().size() == 0;}  }
class C{  public static void main(String[] args){  new CaseThatExample().run();}  }
class C{  public RequestTemplate addStream(CaptureStream stream){  mCaptureStreams.add(stream);  return this;}  }
class C{  public AbViewPagerAdapter(Context context,ArrayList<View> mListViews){  this.mContext=context;  this.mListViews=mListViews;  this.mViews=new HashMap<Integer,View>();}  }
class C{  public void emergencyClose(){  this.conduit.emergencyClose();}  }
class C{  public boolean isAfter(LocalTime other){  return compareTo(other) > 0;}  }
class C{  public SteelCheckBox(){  super();}  }
class C{  public void lock(){  if (images != null) {    int ilen=images.length;    for (int iter=0; iter < ilen; iter++) {      if (images[iter] != null) {        images[iter].lock();      }    }  }}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  return equals(productId,null,BigDecimal.ZERO,BigDecimal.ZERO,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,null,itemType,itemGroup,isPromo);}  }
class C{  public static HalfEdge create(Coordinate p0,Coordinate p1){  HalfEdge e0=new HalfEdge(p0);  HalfEdge e1=new HalfEdge(p1);  e0.init(e1);  return e0;}  }
class C{  @Override public QueueReceiver createReceiver(final Queue queue) throws JMSException {  lock();  try {    QueueSession session=getQueueSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createReceiver " + session + " queue="+ queue);    }    QueueReceiver result=session.createReceiver(queue);    result=new ActiveMQRAQueueReceiver(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdReceiver " + session + " receiver="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public static ConstantScoreQueryBuilder constantScoreQuery(QueryBuilder queryBuilder){  return new ConstantScoreQueryBuilder(queryBuilder);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg1)   m_arg1.fixupVariables(vars,globalsSize);}  }
class C{  public static double apertureToFStop(double aperture){  double fStop=Math.pow(ROOT_TWO,aperture);  return fStop;}  }
class C{  public static void logInfo(String message){  logInfo(message,new Object[0]);}  }
class C{  static double powerSeries(double a,double b,double x) throws ArithmeticException {  double s, t, u, v, n, t1, z, ai;  ai=1.0 / a;  u=(1.0 - b) * x;  v=u / (a + 1.0);  t1=v;  t=u;  n=2.0;  s=0.0;  z=MACHEP * ai;  while (Math.abs(v) > z) {    u=(n - b) * x / n;    t*=u;    v=t / (a + n);    s+=v;    n+=1.0;  }  s+=t1;  s+=ai;  u=a * Math.log(x);  if ((a + b) < MAXGAM && Math.abs(u) < MAXLOG) {    t=Gamma.gamma(a + b) / (Gamma.gamma(a) * Gamma.gamma(b));    s=s * t * Math.pow(x,a);  } else {    t=Gamma.logGamma(a + b) - Gamma.logGamma(a) - Gamma.logGamma(b) + u + Math.log(s);    if (t < MINLOG)     s=0.0; else     s=Math.exp(t);  }  return s;}  }
class C{  private boolean isCompleted(){  return nodeBuilder == null;}  }
class C{  private GridData gridDataForLbl(){  GridData gridData=new GridData();  gridData.horizontalIndent=5;  gridData.verticalIndent=10;  return gridData;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STRING_LIT___QUOTE_1:    return QUOTE_1_EDEFAULT == null ? quote_1 != null : !QUOTE_1_EDEFAULT.equals(quote_1);}return super.eIsSet(featureID);}  }
class C{  private static int buildRequestCode(long threadId,int action){  action++;  return (int)(action * 100000 + threadId);}  }
class C{  public boolean isPrefixfreeTransformedFastXPath(){  for (  Step step : xpath.getRelativeLocationPaths()) {    if (!step.getAxisSpecifier().getAxisName().toFullString().equals("child")) {      return false;    }    if (step.getAxisSpecifier().getNodeName() != null) {      return false;    }    if (step.getAxisSpecifier().getNodeType() == null) {      return false;    }    if (!step.getAxisSpecifier().getNodeType().getNodeTypeName().equals("node")) {      return false;    }    List<Predicate> predicates=step.getPredicates();    if (predicates.isEmpty() || predicates.size() > 3) {      return false;    }    int positions=0;    int attributes=0;    int ln=0;    int uri=0;    for (    Predicate pred : step.getPredicates()) {      if (pred.getOrExpressions().size() != 1) {        return false;      }      if (pred.getOrExpressions().get(0).getAndExpressions().size() != 1) {        List<AndExpression> andExpressions=pred.getOrExpressions().get(0).getAndExpressions();        if (andExpressions.size() > 2 || andExpressions.size() < 1) {          return false;        }        for (        AndExpression and : andExpressions) {          if (and instanceof LocalNameAndExpression) {            ++ln;          } else           if (and instanceof NamespaceUriAndExpression) {            ++uri;          }        }      } else {        AndExpression and=pred.getOrExpressions().get(0).getAndExpressions().get(0);        if (and instanceof PositionAndExpression) {          ++positions;        } else         if (and instanceof AttributeAndExpression) {          ++attributes;        }      }    }    if (ln != 1 || uri != 1 || positions > 1 || attributes > 1 || (attributes + positions) == 0) {      return false;    }  }  return true;}  }
class C{  public static Character toCharacter(String self){  return self.charAt(0);}  }
class C{  protected void addForm(Element e,XhtmlForm f){  if (forms == null) {    forms=new LinkedHashMap();  }  forms.put(e,f);}  }
class C{  private CharArrayList(final char a[],final int offset,final int length){  this(length);  System.arraycopy(a,offset,this.a,0,length);  size=length;}  }
class C{  ReasonsMask(){  this(0);}  }
class C{  private void buildMenu(){  menu.setMnemonic(KeyEvent.VK_V);  JMenuItem menuItem=menu.add(actionUpdateDatasources2);  menuItem.setMnemonic(KeyEvent.VK_U);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menu.addSeparator();  JMenu menuScrape=new JMenu(BUNDLE.getString("Button.scrape"));  menuScrape.setMnemonic(KeyEvent.VK_S);  menuItem=menuScrape.add(actionScrape2);  menuItem.setMnemonic(KeyEvent.VK_S);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menuScrape.add(actionScrapeSelected);  menuItem.setMnemonic(KeyEvent.VK_F);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menuScrape.add(actionScrapeNewItems);  menuItem.setMnemonic(KeyEvent.VK_N);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menu.add(menuScrape);  JMenu menuEdit=new JMenu(BUNDLE.getString("Button.edit"));  menuEdit.setMnemonic(KeyEvent.VK_E);  menuItem=menuEdit.add(actionEdit2);  menuItem.setMnemonic(KeyEvent.VK_E);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menuEdit.add(actionBatchEdit);  menuItem.setMnemonic(KeyEvent.VK_B);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menuEdit.add(actionSetWatchedFlag);  menuItem.setMnemonic(KeyEvent.VK_W);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menuEdit.add(actionChangeSeasonPoster2);  menuItem.setMnemonic(KeyEvent.VK_S);  menuEdit.add(actionChangeToDvdOrder);  menuEdit.add(actionChangeToAiredOrder);  menu.add(menuEdit);  menu.add(actionRewriteTvShowNfo);  menu.add(actionRewriteTvShowEpisodeNfo);  menuItem=menu.add(actionRename);  menuItem.setMnemonic(KeyEvent.VK_R);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menu.add(actionMediaInformation2);  menuItem.setMnemonic(KeyEvent.VK_M);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menu.add(actionExport);  menuItem.setMnemonic(KeyEvent.VK_X);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK + ActionEvent.SHIFT_MASK));  menuItem=menu.add(actionClearImageCache);  menuItem.setMnemonic(KeyEvent.VK_C);  menu.addSeparator();  menuItem=menu.add(actionRemove2);  menuItem.setAccelerator(KeyStroke.getKeyStroke((char)KeyEvent.VK_DELETE));  menuItem=menu.add(actionDelete2);  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,ActionEvent.SHIFT_MASK));  menu.addSeparator();  menuItem=menu.add(actionSyncTrakt);  menuItem.setMnemonic(KeyEvent.VK_T);  menuItem=menu.add(actionSyncWatchedTrakt);  menuItem.setMnemonic(KeyEvent.VK_W);  menuItem=menu.add(actionSyncSelectedTrakt);  JPopupMenu popupMenu=new JPopupMenu();  popupMenu.add(actionScrape2);  popupMenu.add(actionScrapeSelected);  popupMenu.add(actionScrapeEpisodes);  popupMenu.add(actionScrapeEpisodes2);  popupMenu.add(actionScrapeNewItems);  popupMenu.addSeparator();  popupMenu.add(actionUpdateTvShow);  popupMenu.addSeparator();  popupMenu.add(actionEdit2);  popupMenu.add(actionChangeSeasonPoster2);  popupMenu.add(actionBatchEdit);  popupMenu.add(actionSetWatchedFlag);  popupMenu.add(actionChangeToDvdOrder);  popupMenu.add(actionChangeToAiredOrder);  popupMenu.add(actionRewriteTvShowNfo);  popupMenu.add(actionRewriteTvShowEpisodeNfo);  popupMenu.add(actionRename);  popupMenu.add(actionMediaInformation2);  popupMenu.add(actionExport);  popupMenu.add(actionClearImageCache);  popupMenu.addSeparator();  popupMenu.add(actionDownloadSubtitles);  popupMenu.add(actionSearchAndDownloadSubtitles);  popupMenu.addSeparator();  popupMenu.add(actionSyncTrakt);  popupMenu.add(actionSyncWatchedTrakt);  popupMenu.add(actionSyncSelectedTrakt);  popupMenu.addSeparator();  popupMenu.add(actionRemove2);  popupMenu.add(actionDelete2);  popupMenu.addSeparator();  popupMenu.add(new ExpandAllAction());  popupMenu.add(new CollapseAllAction());  if (Globals.isDebug()) {    JMenu menuDebug=new JMenu("Debug");    menuDebug.add(debugDumpShow);    popupMenu.addSeparator();    popupMenu.add(menuDebug);  }  MouseListener popupListener=new TreePopupListener(popupMenu,tree);  tree.addMouseListener(popupListener);}  }
class C{  public SignerInfo toASN1Structure(){  return info;}  }
class C{  private boolean childrenHaveChildren(Tree node){  Iterator<Edge> iterator=node.childIterator();  while (iterator.hasNext()) {    if (!iterator.next().getChild().isLeaf()) {      return true;    }  }  return false;}  }
class C{  public void addLogWeight(double addLogWeight){  logWeight+=addLogWeight;}  }
class C{  public Mx1Menu(Mx1SystemConnectionMemo memo){  super();  if (memo == null) {    new Exception().printStackTrace();    return;  }  setText(memo.getUserName());  jmri.util.swing.WindowInterface wi=new jmri.util.swing.sdi.JmriJFrameInterface();  for (  Item item : panelItems) {    if (item == null) {      add(new javax.swing.JSeparator());    } else {      Mx1NamedPaneAction a=new Mx1NamedPaneAction(Bundle.getMessage(item.name),wi,item.load,memo);      add(a);    }  }  setEnabled(memo.getMx1TrafficController() != null);  add(new javax.swing.JSeparator());}  }
class C{  public boolean isSelected(int position){  return getSelectedItems().contains(position);}  }
class C{  public static void swap(int[] arr,int index1,int index2){  if (index1 == index2) {  } else {    int tmp=arr[index1];    arr[index1]=arr[index2];    arr[index2]=tmp;  }}  }
class C{  public SortedEvictionPolicy(int max,@Nullable Comparator<EvictableEntry<K,V>> comp){  this(max,1,comp);}  }
class C{  static int[] findNanpPhoneNumbers(CharSequence text){  ArrayList<Integer> list=new ArrayList<Integer>();  int startPos=0;  int endPos=text.length() - NANP_MIN_DIGITS + 1;  if (endPos < 0) {    return new int[]{};  }  while (startPos < endPos) {    while (Character.isWhitespace(text.charAt(startPos)) && startPos < endPos) {      startPos++;    }    if (startPos == endPos) {      break;    }    int matchEnd=findNanpMatchEnd(text,startPos);    if (matchEnd > startPos) {      list.add(startPos);      list.add(matchEnd);      startPos=matchEnd;    } else {      while (!Character.isWhitespace(text.charAt(startPos)) && startPos < endPos) {        startPos++;      }    }  }  int[] result=new int[list.size()];  for (int i=list.size() - 1; i >= 0; i--) {    result[i]=list.get(i);  }  return result;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  private static void ReleaseShortArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseShortArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    short[] sourceArray=(short[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if ((releaseMode == 0 || releaseMode == 1) && size != 0) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_SHORT);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  @Override public String[] validBaudRates(){  return new String[]{"115,200 bps"};}  }
class C{  public Byte(byte value){}  }
class C{  public static byte[] toByteArray(long macAddress){  return MACAddress.valueOf(macAddress).toBytes();}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, z2, lowestNeighbour;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  boolean isPit;  double aSmallValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          isPit=true;          lowestNeighbour=Float.POSITIVE_INFINITY;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              if (z2 < lowestNeighbour) {                lowestNeighbour=z2;              }              if (z2 < z) {                isPit=false;              }            }          }          if (isPit && lowestNeighbour < Float.POSITIVE_INFINITY) {            output.setValue(row,col,lowestNeighbour + aSmallValue);          } else {            output.setValue(row,col,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void removeJointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof Joint) {      Joint joint=(Joint)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.joint.remove.warning"),joint.getUserData()),Messages.getString("menu.context.joint.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getWorld().removeJoint(joint);        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  public long numCqsOnRegion(String regionName){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache == null) {    return 0;  }  DefaultQueryService queryService=(DefaultQueryService)cache.getQueryService();  CqService cqService=null;  try {    cqService=queryService.getCqService();  } catch (  CqException e) {    if (logger.isDebugEnabled()) {      logger.debug("Failed to get CqService {}",e.getLocalizedMessage());    }    e.printStackTrace();    return -1;  }  if (((CqServiceImpl)cqService).isServer()) {    try {      FilterProfile fp=cache.getFilterProfile(regionName);      if (fp == null) {        return 0;      }      return fp.getCqCount();    } catch (    Exception ex) {      if (logger.isDebugEnabled()) {        logger.debug("Failed to get serverside CQ count for region: {} {}",regionName,ex.getLocalizedMessage());      }    }  } else {    try {      CqQuery[] cqs=queryService.getCqs(regionName);      if (cqs != null) {        return cqs.length;      }    } catch (    Exception ex) {    }  }  return 0;}  }
class C{  protected final void outputLineSep() throws IOException {  m_writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  public static Update asUpdate(Resource resource){  if (resource.canAs(Modify.class)) {    return resource.as(Modify.class);  } else   if (resource.canAs(Clear.class)) {    return resource.as(Clear.class);  } else   if (resource.canAs(Create.class)) {    return resource.as(Create.class);  } else   if (resource.canAs(DeleteData.class)) {    return resource.as(DeleteData.class);  } else   if (resource.canAs(DeleteWhere.class)) {    return resource.as(DeleteWhere.class);  } else   if (resource.canAs(Drop.class)) {    return resource.as(Drop.class);  } else   if (resource.canAs(InsertData.class)) {    return resource.as(InsertData.class);  } else   if (resource.canAs(Load.class)) {    return resource.as(Load.class);  } else   if (resource.canAs(Delete.class)) {    return resource.as(Delete.class);  } else   if (resource.canAs(Insert.class)) {    return resource.as(Insert.class);  } else {    return null;  }}  }
class C{  public void addListener(final IDebuggerTemplateListener listener){  m_listeners.addListener(listener);}  }
class C{  public void addCommandToSideMenu(Command cmd){  checkIfInitialized();  if (permanentSideMenu) {    constructPermanentSideMenu();    Button b=new Button(cmd);    b.setEndsWith3Points(false);    Integer gap=(Integer)cmd.getClientProperty("iconGap");    if (gap != null) {      b.setGap(gap.intValue());    }    b.setTextPosition(Label.RIGHT);    String uiid=(String)cmd.getClientProperty("uiid");    if (uiid != null) {      b.setUIID(uiid);    } else {      b.setUIID("SideCommand");    }    addComponentToSideMenu(permanentSideMenuContainer,b);  } else {    sideMenu.addCommand(cmd);    sideMenu.installMenuBar();  }}  }
class C{  public static String toString(final URL url,final Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return IOUtils.toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public void executeConstructQuery(Repository repo,String query,QueryLanguage ql) throws Exception {  RepositoryConnection cxn;  if (repo instanceof BigdataSailRepository) {    cxn=((BigdataSailRepository)repo).getReadOnlyConnection();  } else {    cxn=repo.getConnection();  }  try {    final Set<Statement> results=new LinkedHashSet<Statement>();    final GraphQuery graphQuery=cxn.prepareGraphQuery(ql,query);    graphQuery.setIncludeInferred(true);    graphQuery.evaluate(new StatementCollector(results));    for (    Statement stmt : results) {      log.info(stmt);    }  }  finally {    cxn.close();  }}  }
class C{  public void or(Capabilities c){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (handles(cap) || c.handles(cap)) {      m_Capabilities.add(cap);    } else {      m_Capabilities.remove(cap);    }    if (hasDependency(cap) || c.hasDependency(cap)) {      m_Dependencies.add(cap);    } else {      m_Dependencies.remove(cap);    }  }  if (c.getMinimumNumberInstances() < getMinimumNumberInstances()) {    setMinimumNumberInstances(c.getMinimumNumberInstances());  }}  }
class C{  public NegativeArraySizeException(){  super();}  }
class C{  public static Vector3D min(Vector3D a,Vector3D b){  return new Vector3D(FastMath.min(a.getX(),b.getX()),FastMath.min(a.getY(),b.getY()),FastMath.min(a.getZ(),b.getZ()));}  }
class C{  private void updated(String setting){  String newColor=colorSettings.get(setting).getSettingValue();  for (  ColorSetting colorSetting : colorSettings.values()) {    if (colorSetting.hasBase(setting)) {      colorSetting.update(newColor);    }  }}  }
class C{  public void computeAndSetViewCenter(){  try {    if (this.canFocusOnViewportCenter()) {      this.focusOnViewportCenter();      this.setViewOutOfFocus(false);    }  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionWhileChangingView");    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    this.setViewOutOfFocus(true);  }}  }
class C{  private static void swap(Object[] arr,int i,int j){  Object tmp=arr[i];  arr[i]=arr[j];  arr[j]=tmp;}  }
class C{  public EaseOutIn(){}  }
class C{  public static <NodeType extends IViewNode<?>>ZyProximityNode<?> createProximityNode(final Graph2D graph,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){  Preconditions.checkNotNull(graph,"Graph argument can not be null");  Preconditions.checkNotNull(attachedNode,"Target node argument can not be null");  final ZyLabelContent labelcontent=new ZyLabelContent(null);  labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font("New Courier",Font.PLAIN,12),null));  final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent);  final Node node=graph.createNode(r);  @SuppressWarnings("unchecked") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming);  final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode);  r.setUserData(data);  return infoNode;}  }
class C{  public boolean isEmpty(){  return q.isEmpty();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void add(Token token,String suggestion,int docFreq){  LinkedHashMap<String,Integer> map=this.suggestions.get(token);  if (map == null) {    map=new LinkedHashMap<>();    this.suggestions.put(token,map);  }  map.put(suggestion,docFreq);}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public void waitAtBarrier(){  try {    barrier.await();  } catch (  InterruptedException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.meta_data_view.calculation_interrupted",e);  }catch (  BrokenBarrierException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.meta_data_view.calc_sync_broken",e);  }}  }
class C{  public static List<String> separatedDataset(String originalString){  Pattern commaPattern=Pattern.compile(",(?!([^\\{]*\\}.*)).*");  ArrayList<String> datasets=new ArrayList<>();  Matcher datasetMatcher=commaPattern.matcher(originalString);  int datasetStartIndex=0;  while (datasetMatcher.find(datasetStartIndex)) {    String oneDataset=originalString.substring(datasetStartIndex,datasetMatcher.start());    datasets.add(oneDataset.trim());    datasetStartIndex=datasetMatcher.start() + 1;  }  datasets.add(originalString.substring(datasetStartIndex,originalString.length()).trim());  return datasets;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Seeker.getInstance().hasImportableFileExtension(getString(stack)));}  }
class C{  private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  @Override public void onUserProfileNameChanged(String name){  AppLog.i(this,"onUserProfileNameChanged()");  navheaderTitle.setText(name);}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public void start(){  if (running) {    return;  }  setQualityButtonsEnabled(false);  if (quality == null) {    info.setText("No quality selected yet.");  } else {    info.setText("Selected quality: " + quality);  }  StringBuilder command=new StringBuilder();  command.append(makeBaseCommand());  if (url.contains("twitch.tv") && settings.getBoolean("livestreamerUseAuth") && !settings.getString("token").isEmpty()) {    command.append(" --twitch-oauth-token ");    command.append(settings.getString("token"));  }  command.append(" ");  command.append(url);  if (quality != null) {    command.append(" ");    command.append(quality);  }  Livestreamer ls=new Livestreamer(command.toString(),this);  this.ls=ls;  ls.start();}  }
class C{  public void testResettingOptions(){  if (!m_OptionTester.checkSetOptions()) {    fail("Resetting of options failed");  }}  }
class C{  void zApplyVisibilityOfButtons(){  boolean showNextMonth=settings.getVisibleNextMonthButton();  boolean showNextYear=settings.getVisibleNextYearButton();  boolean showPreviousMonth=settings.getVisiblePreviousMonthButton();  boolean showPreviousYear=settings.getVisiblePreviousYearButton();  boolean showMonthMenu=settings.getVisibleMonthMenuButton();  boolean showTodayButton=settings.getVisibleTodayButton();  boolean yearMenuSetting=settings.getVisibleYearMenuButton();  boolean yearEditorPanelIsDisplayed=(yearEditorPanel.getParent() != null);  boolean clearButtonSetting=settings.getVisibleClearButton();  boolean emptyDatesAllowed=settings.getAllowEmptyDates();  buttonNextMonth.setVisible(showNextMonth);  buttonNextYear.setVisible(showNextYear);  buttonPreviousMonth.setVisible(showPreviousMonth);  buttonPreviousYear.setVisible(showPreviousYear);  labelMonth.setVisible(showMonthMenu);  labelSetDateToToday.setVisible(showTodayButton);  boolean showYearMenu=((yearMenuSetting) && (!yearEditorPanelIsDisplayed));  labelYear.setVisible(showYearMenu);  boolean showClearButton=(clearButtonSetting && emptyDatesAllowed);  labelClearDate.setVisible(showClearButton);  boolean showMonthAndYearInnerPanel=(showMonthMenu || showYearMenu || yearEditorPanelIsDisplayed);  boolean showHeaderControlsPanel=(showMonthAndYearInnerPanel || showNextMonth || showNextYear|| showPreviousMonth|| showPreviousYear);  monthAndYearInnerPanel.setVisible(showMonthAndYearInnerPanel);  headerControlsPanel.setVisible(showHeaderControlsPanel);  boolean showFooterPanel=(showTodayButton || showClearButton);  footerPanel.setVisible(showFooterPanel);}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  boolean oldEncrypting=this.encrypting;  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length != blockSize) {      throw new IllegalArgumentException("initialisation vector must be the same length as block size");    }    System.arraycopy(iv,0,IV,0,iv.length);    reset();    if (ivParam.getParameters() != null) {      cipher.init(encrypting,ivParam.getParameters());    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  } else {    reset();    if (params != null) {      cipher.init(encrypting,params);    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public DrawerBuilder withHasStableIds(boolean hasStableIds){  this.mHasStableIds=hasStableIds;  return this;}  }
class C{  public static boolean isNetWorkConnected(Context context){  if (context != null) {    ConnectivityManager mConnectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo mNetworkInfo=mConnectivityManager.getActiveNetworkInfo();    if (mNetworkInfo != null) {      return mNetworkInfo.isAvailable() && mNetworkInfo.isConnected();    }  }  return false;}  }
class C{  public Object clone() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.clone();  if (m_iterator != null) {    clone.m_iterator=m_iterator.cloneIterator();  }  return clone;}  }
class C{  public static int listFindIgnoreEmpty(String list,String value,String delimiter){  if (delimiter.length() == 1)   return listFindIgnoreEmpty(list,value,delimiter.charAt(0));  if (list == null)   return -1;  int len=list.length();  if (len == 0)   return -1;  int last=0;  int count=0;  char[] del=delimiter.toCharArray();  char c;  for (int i=0; i < len; i++) {    c=list.charAt(i);    for (int y=0; y < del.length; y++) {      if (c == del[y]) {        if (last < i) {          if (list.substring(last,i).equals(value))           return count;          count++;        }        last=i + 1;        break;      }    }  }  if (last < len) {    if (list.substring(last).equals(value))     return count;  }  return -1;}  }
class C{  private Component makeMainLabel(String text){  JEditorPane label=new ExtendedHTMLJEditorPane("text/html",text);  StyleSheet css=((HTMLEditorKit)label.getEditorKit()).getStyleSheet();  css.addRule("body {font-family:Sans;font-size:11pt}");  css.addRule("h3 {margin:0; padding:0}");  css.addRule("h4 {margin-bottom:0; margin-top:1ex; padding:0}");  css.addRule("p  {margin-top:0; margin-bottom:1ex; padding:0}");  css.addRule("ul {margin-top:0; margin-bottom:1ex; list-style-image: url(" + getClass().getResource("/com/rapidminer/resources/icons/modern/help/circle.png") + ")}");  css.addRule("ul li {padding-bottom: 2px}");  css.addRule("li.outPorts {padding-bottom: 0px}");  css.addRule("ul li ul {margin-top:0; margin-bottom:1ex; list-style-image: url(" + getClass().getResource("/com/rapidminer/resources/icons/modern/help/line.png") + ")");  css.addRule("li ul li {padding-bottom:0}");  label.setEditable(false);  label.setBackground(Colors.WHITE);  JScrollPane pane=new JScrollPane(label);  pane.setBackground(Colors.WHITE);  pane.setBorder(null);  return pane;}  }
class C{  private Node generateStructures(){  String id, label;  Integer shape, style;  Color fontcolor, color;  InfoObject t;  m_aNodes=new Vector<Node>(50,50);  m_aEdges=new Vector<Edge>(50,50);  for (int noa=0; noa < m_nodes.size(); noa++) {    t=m_nodes.elementAt(noa);    id=t.m_id;    if (t.m_label == null) {      if (m_noObj.m_label == null) {        label="";      } else {        label=m_noObj.m_label;      }    } else {      label=t.m_label;    }    if (t.m_shape == null) {      if (m_noObj.m_shape == null) {        shape=new Integer(2);      } else {        shape=getShape(m_noObj.m_shape);      }    } else {      shape=getShape(t.m_shape);    }    if (shape == null) {      shape=new Integer(2);    }    if (t.m_style == null) {      if (m_noObj.m_style == null) {        style=new Integer(1);      } else {        style=getStyle(m_noObj.m_style);      }    } else {      style=getStyle(t.m_style);    }    if (style == null) {      style=new Integer(1);    }    if (t.m_fontColor == null) {      if (m_noObj.m_fontColor == null) {        fontcolor=Color.black;      } else {        fontcolor=m_colorTable.get(m_noObj.m_fontColor.toLowerCase());      }    } else {      fontcolor=m_colorTable.get(t.m_fontColor.toLowerCase());    }    if (fontcolor == null) {      fontcolor=Color.black;    }    if (t.m_color == null) {      if (m_noObj.m_color == null) {        color=Color.gray;      } else {        color=m_colorTable.get(m_noObj.m_color.toLowerCase());      }    } else {      color=m_colorTable.get(t.m_color.toLowerCase());    }    if (color == null) {      color=Color.gray;    }    m_aNodes.addElement(new Node(label,id,style.intValue(),shape.intValue(),color,t.m_data));  }  for (int noa=0; noa < m_edges.size(); noa++) {    t=m_edges.elementAt(noa);    id=t.m_id;    if (t.m_label == null) {      if (m_noObj.m_label == null) {        label="";      } else {        label=m_noObj.m_label;      }    } else {      label=t.m_label;    }    if (t.m_shape == null) {      if (m_noObj.m_shape == null) {        shape=new Integer(2);      } else {        shape=getShape(m_noObj.m_shape);      }    } else {      shape=getShape(t.m_shape);    }    if (shape == null) {      shape=new Integer(2);    }    if (t.m_style == null) {      if (m_noObj.m_style == null) {        style=new Integer(1);      } else {        style=getStyle(m_noObj.m_style);      }    } else {      style=getStyle(t.m_style);    }    if (style == null) {      style=new Integer(1);    }    if (t.m_fontColor == null) {      if (m_noObj.m_fontColor == null) {        fontcolor=Color.black;      } else {        fontcolor=m_colorTable.get(m_noObj.m_fontColor.toLowerCase());      }    } else {      fontcolor=m_colorTable.get(t.m_fontColor.toLowerCase());    }    if (fontcolor == null) {      fontcolor=Color.black;    }    if (t.m_color == null) {      if (m_noObj.m_color == null) {        color=Color.white;      } else {        color=m_colorTable.get(m_noObj.m_color.toLowerCase());      }    } else {      color=m_colorTable.get(t.m_color.toLowerCase());    }    if (color == null) {      color=Color.white;    }    m_aEdges.addElement(new Edge(label,t.m_source,t.m_target));  }  boolean f_set, s_set;  Node x, sour=null, targ=null;  Edge y;  for (int noa=0; noa < m_aEdges.size(); noa++) {    f_set=false;    s_set=false;    y=m_aEdges.elementAt(noa);    for (int nob=0; nob < m_aNodes.size(); nob++) {      x=m_aNodes.elementAt(nob);      if (x.getRefer().equals(y.getRtarget())) {        f_set=true;        targ=x;      }      if (x.getRefer().equals(y.getRsource())) {        s_set=true;        sour=x;      }      if (f_set == true && s_set == true) {        break;      }    }    if (targ != sour) {      y.setTarget(targ);      y.setSource(sour);    } else {      System.out.println("logic error");    }  }  for (int noa=0; noa < m_aNodes.size(); noa++) {    if (m_aNodes.elementAt(noa).getParent(0) == null) {      sour=m_aNodes.elementAt(noa);    }  }  return sour;}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  void checkCacheRequiredRolesMeet(List status){  try {    GemFireCacheImpl cache=(GemFireCacheImpl)CacheFactory.getAnyInstance();    CachePerfStats cPStats=null;    cPStats=cache.getCachePerfStats();    if (cPStats.getReliableRegionsMissingFullAccess() > 0) {      int numRegions=cPStats.getReliableRegionsMissingFullAccess();      status.add(okayHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_BUT_ARE_CONFIGURED_FOR_FULL_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));    } else     if (cPStats.getReliableRegionsMissingLimitedAccess() > 0) {      int numRegions=cPStats.getReliableRegionsMissingLimitedAccess();      status.add(poorHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITH_LIMITED_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));    } else     if (cPStats.getReliableRegionsMissingNoAccess() > 0) {      int numRegions=cPStats.getReliableRegionsMissingNoAccess();      status.add(poorHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITHOUT_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));    }  } catch (  CancelException ignore) {  }}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") private MiniFuture miniFuture(IgniteUuid miniId){synchronized (sync) {    for (int i=0; i < futuresCount(); i++) {      IgniteInternalFuture<GridNearTxPrepareResponse> fut=future(i);      if (!isMini(fut))       continue;      MiniFuture mini=(MiniFuture)fut;      if (mini.futureId().equals(miniId)) {        if (!mini.isDone())         return mini; else         return null;      }    }  }  return null;}  }
class C{  public FractionAtom(Atom num,Atom den,boolean noDef,int unit,float t) throws InvalidUnitException {  SpaceAtom.checkUnit(unit);  numerator=num;  denominator=den;  noDefault=noDef;  thickness=t;  this.unit=unit;  type=TeXConstants.TYPE_INNER;}  }
class C{  public static int round(final float x){  return (int)floor(x + 0.5f);}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return str().equalsIgnoreCase(anotherString);}  }
class C{  private static <K,V>ImmutableSortedMap<K,V> of(Comparator<? super K> comparator,K k1,V v1){  return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(ImmutableList.of(k1),checkNotNull(comparator)),ImmutableList.of(v1));}  }
class C{  public void deleteAttributeAt(int columnIndex){  ((ArffTableModel)getModel()).deleteAttributeAt(columnIndex);}  }
class C{  protected ClassLoader(ClassLoader parentLoader){  this(parentLoader,false);}  }
class C{  public void writeText(char text[]) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else   if (isPartial || !writingCdata) {    HtmlUtils.writeText(writer,escapeUnicode,escapeIso,buffer,text);  } else {    assert writingCdata;    writeEscaped(text,0,text.length);  }}  }
class C{  void applyCSS(HTMLElement document,HTMLComponent htmlC,Vector externalCSS,Vector embeddedCSS){  int externalSize=0;  int embeddedSize=0;  if (externalCSS != null) {    externalSize=externalCSS.size();  }  if (embeddedCSS != null) {    embeddedSize=embeddedCSS.size();  }  if (externalSize + embeddedSize == 0) {    applyStyleAttributeRecursive(document,htmlC);  } else {    CSSElement[] css=new CSSElement[externalSize + embeddedSize];    for (int i=0; i < externalSize; i++) {      css[i]=(CSSElement)externalCSS.elementAt(i);    }    for (int i=0; i < embeddedSize; i++) {      css[i + externalSize]=(CSSElement)embeddedCSS.elementAt(i);    }    css=sortSelectorsBySpecificity(css);    applyCSS(document,htmlC,css,null,null);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case ERROR:  return isSetError();case TYPE:return isSetType();}throw new IllegalStateException();}  }
class C{  private static CommonHelpDialog showHelp(JFrame frame,String filename){  Locale l=Locale.getDefault();  File helpfile;  if (!filename.contains(".txt")) {    helpfile=new File("docs" + File.separator + filename+ '-'+ l.getDisplayLanguage(Locale.ENGLISH)+ ".txt");    if (!helpfile.exists()) {      helpfile=new File("docs" + File.separator + filename+ ".txt");    }  } else {    String localeFileName=filename.replace(".txt","-" + l.getDisplayLanguage(Locale.ENGLISH) + ".txt");    helpfile=new File(localeFileName);    if (!helpfile.exists()) {      helpfile=new File(filename);    }  }  return new CommonHelpDialog(frame,helpfile);}  }
class C{  public static float[][] transpose(float[][] input){  float[][] output=new float[input[0].length][input.length];  for (int i=0; i < input.length; ++i) {    for (int j=0; j < input[0].length; ++j) {      output[j][i]=input[i][j];    }  }  return output;}  }
class C{  private void disconnect(MDSDialog dialog){  if (dialog != null) {    dialog.send("exit\n");    dialog.getSession().disconnect();  }}  }
class C{  public static double[][] vechToVecLeft(int n){  int row=n * n;  int col=sum0ToN(n);  double[][] m=new double[row][col];  int index=-1;  for (int i=0; i < n; i++) {    for (int j=i; j < n; j++) {      int _row=i * n + j;      int _col=++index;      m[_row][_col]=1.0;      _row=j * n + i;      _col=index;      m[_row][_col]=1.0;    }  }  return m;}  }
class C{  private Boolean isInstanceModificationEvent(Hashtable<String,String> notification){  String eventType="";  Boolean isInstanceModificationEvent=Boolean.FALSE;  eventType=notification.get(CIMConstants.INDICATION_CLASS_TAG);  if (eventType != null && eventType.length() > 0 && eventType.contains(CIMConstants.INST_MODIFICATION_EVENT)) {    isInstanceModificationEvent=Boolean.TRUE;  }  return isInstanceModificationEvent;}  }
class C{  public void testSerializationPerformance() throws Exception {  UuidBean[] uids=new UuidBean[NUM];  for (int i=0; i < uids.length; i++)   uids[i]=new UuidBean(UUID.randomUUID());  GridUuidBean[] guids=new GridUuidBean[NUM];  for (int i=0; i < guids.length; i++)   guids[i]=new GridUuidBean(IgniteUuid.randomUuid());  testArray(uids,NUM);  testArray(guids,NUM);  System.gc();  long start=System.currentTimeMillis();  testArray(uids,NUM);  long dur1=System.currentTimeMillis() - start;  System.gc();  start=System.currentTimeMillis();  testArray(guids,NUM);  long dur2=System.currentTimeMillis() - start;  long res=dur1 < dur2 ? (dur2 / dur1) : (dur1 / dur2);  String metric=res == 1 ? "as fast as UUID" : dur1 < dur2 ? res + "x **SLOWER**" : res + "x faster";  System.out.println("Serialization: UUID=" + dur1 + "ms, GridUuid="+ dur2+ "ms, GridUuid is "+ metric+ ".");}  }
class C{  public int line(){  return line;}  }
class C{  public CUlinkState(){}  }
class C{  public void addInfoField(InfoField field){  addIdField(mInfoLines,field);}  }
class C{  public Address(InetAddress host,int port,String name){  if (name == null || name.length() == 0)   throw new IllegalArgumentException("Name must not be empty in Address.");  if (port <= 0 && host != null)   throw new IllegalArgumentException("Port must be positive in Address.");  this.host=host;  this.port=port;  this.name=name;}  }
class C{  public Address toAddress(){  return null;}  }
class C{  public ReadWriteMultipleRequest(int unit){  super();  setUnitID(unit);  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);  setDataLength(9);}  }
class C{  public StreamRelay(StreamInterceptor<C,S> interceptor,C clientLabel,InputStream ci,OutputStream co,S serverLabel,InputStream si,OutputStream so){  cs=new RelayInterceptor<C,S>(interceptor,ci,so);  cs.setName("Client");  sc=new RelayInterceptor<C,S>(interceptor,si,co);  sc.setName("Server");  interceptor.connected(cs,sc,clientLabel,serverLabel);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractAttr aa=(AbstractAttr)n;  aa.nodeName=nodeName;  aa.unspecified=unspecified;  aa.isIdAttr=isIdAttr;  return n;}  }
class C{  public static int lookupCharacterIndex(final String glyph,final int idx){  final Object value=glyphToChar[idx].get(glyph);  if (value == null) {    return 0;  } else {    return (Integer)value;  }}  }
class C{  private void fillBuffer(long amount,boolean reload){  try {    if (amount > bufferSize) {      amount=bufferSize;    }    if (channelSize - channel.position() < amount) {      amount=channelSize - channel.position();    }    if (in == null) {switch (bufferType) {case HEAP:        in=IoBuffer.allocate(bufferSize,false);      break;case DIRECT:    in=IoBuffer.allocate(bufferSize,true);  break;default :in=IoBuffer.allocate(bufferSize);}channel.read(in.buf());in.flip();useLoadBuf=true;}if (!useLoadBuf) {return;}if (reload || in.remaining() < amount) {if (!reload) {in.compact();} else {in.clear();}channel.read(in.buf());in.flip();}} catch (Exception e) {log.error("Error fillBuffer",e);}}  }
class C{  @Override public void onPut(byte[] key,TypePut type){  WatchKey watchKey=new WatchKey(key);switch (type) {case LOCAL:    ArrayList<WatchEntry> listLocal=_entryMapLocal.get(watchKey);  onPut(listLocal,key);break;case REMOTE:{int hash=_table.getPodHash(key);TablePodNodeAmp node=_table.getTablePod().getNode(hash);if (node.isSelfCopy()) {  onPut(key,TypePut.LOCAL);}if (node.isSelfOwner()) {  ArrayList<WatchEntry> listRemote=_entryMapRemote.get(watchKey);  onPut(listRemote,key);}break;}default :throw new IllegalArgumentException(String.valueOf(type));}}  }
class C{  public boolean noCache(){  return noCache;}  }
class C{  public static boolean isArrowpointAllowed(Object from,Object to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static BigInteger power(BigInteger self,BigInteger exponent){  if ((exponent.signum() >= 0) && (exponent.compareTo(BI_INT_MAX) <= 0)) {    return self.pow(exponent.intValue());  } else {    return BigDecimal.valueOf(Math.pow(self.doubleValue(),exponent.doubleValue())).toBigInteger();  }}  }
class C{  public final Vec2D maxSelf(ReadonlyVec2D v){  x=MathUtils.max(x,v.x());  y=MathUtils.max(y,v.y());  return this;}  }
class C{  public static void addHidden(Element form,String name,String value){  Element in=form.getOwnerDocument().createElement("input");  in.setAttribute("type","hidden");  in.setAttribute("name",name);  in.setAttribute("value",value);  form.appendChild(in);}  }
class C{  public Vector2d normalize(){  double invLength=1.0 / Math.sqrt(x * x + y * y);  x*=invLength;  y*=invLength;  return this;}  }
class C{  private void add(Node node,Stack nodeStack){  node.setVisited(true);  nodes.add(node);  for (Iterator i=((DirectedEdgeStar)node.getEdges()).iterator(); i.hasNext(); ) {    DirectedEdge de=(DirectedEdge)i.next();    dirEdgeList.add(de);    DirectedEdge sym=de.getSym();    Node symNode=sym.getNode();    if (!symNode.isVisited())     nodeStack.push(symNode);  }}  }
class C{  public Builder connectTimeout(int timeoutMillis){  httpConfig.connectTimeout=timeoutMillis;  return this;}  }
class C{  public <T>CompletableFuture<T> apply(long index){  if (index > lastApplied + 1) {    applyAll(index - 1);  }  try (Entry entry=log.get(index)){    if (entry != null) {      return apply(entry);    } else {      return CompletableFuture.completedFuture(null);    }  }  finally {    setLastApplied(index);  }}  }
class C{  public static void refreshGOEProperties(){  ClassDiscovery.clearClassCache();  GenericPropertiesCreator.regenerateGlobalOutputProperties();  GenericObjectEditor.determineClasses();  ConverterUtils.initialize();  KnowledgeFlowApp.disposeSingleton();  KnowledgeFlowApp.reInitialize();}  }
class C{  public void reset(){  startDelay=0;  translationY=0;  translationZ=0;  scale=1f;  alpha=1f;  visible=false;  rect.setEmpty();  p=0f;}  }
class C{  public boolean isTaxWithholding(){  Object oo=get_Value(COLUMNNAME_IsTaxWithholding);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void customSetUIProperty(String propertyName,Object value,boolean override){  if (propertyName == "useSeperatePopupButton") {    if (!useSeperatePopupButtonSet || override) {      setUseSeperatePopupButton(((Boolean)value).booleanValue());      useSeperatePopupButtonSet=false;    }  } else   if (propertyName == "layoutStyle") {    if (!layoutStyleSet || override) {      setLayoutStyle(LayoutStyle.valueOf(value.toString()));      layoutStyleSet=false;    }  } else   if (propertyName == "promptFontStyle") {    if (!promptFontStyleSet || override) {      setPromptFontStyle((Integer)value);      promptFontStyleSet=false;    }  } else {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case PERSON:    return is_set_person();case PAGE:  return is_set_page();case NONCE:return is_set_nonce();}throw new IllegalStateException();}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  protected AggregatorImpl(){  super();}  }
class C{  public Vertex parseDoByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex equation=network.createTemporyVertex();  equation.addRelationship(Primitive.INSTANTIATION,Primitive.DO);  Vertex operation=parseOperatorByteCode(dataStream,network);  equation.addRelationship(Primitive.DO,operation,Integer.MAX_VALUE);  return equation;}  }
class C{  public static void stopAllRouters(){  for (Iterator<GridTcpRouterImpl> it=tcpRouters.values().iterator(); it.hasNext(); ) {    GridTcpRouterImpl router=it.next();    it.remove();    router.stop();  }}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  @Override public int intValue(){  return (int)value;}  }
class C{  public void onStart(){  if (bottomSheetLayout != null) {    viewDestroyed=false;    bottomSheetLayout.showWithSheetView(fragment.getView(),sheetFragmentInterface.getViewTransformer());    bottomSheetLayout.addOnSheetDismissedListener(this);  }}  }
class C{  protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {    final XSQLDA xSqlDa=new XSQLDA(1);    xSqlDa.sqld=xSqlDa.sqln=0;    return xSqlDa;  }  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();    xSqlVar.sqllen=(short)fieldDescriptor.getLength();    xSqlVar.sqlind=new ShortByReference();    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;    xSqlVar.sqldata=new Memory(requiredDataSize);  }  return xSqlDa;}  }
class C{  public CircularWindow(LatLng center,double radiusInDegrees){  this.setCenter(center);  this.setRadius(radiusInDegrees);}  }
class C{  private boolean isNotSame(int[] m1,int[] m2){  assert m1.length == m2.length;  assert m1.length == 2;  return m1[0] != m2[0] && m1[1] != m2[1];}  }
class C{  public static void main(final String[] arg){  try {    if (arg.length != 3) {      throw new IllegalArgumentException(Arrays.toString(arg));    }    String testDir=arg[0];    final int start=Integer.parseInt(arg[1]);    final int end=Integer.parseInt(arg[2]);    JournalCrashTest restart=new JournalCrashTest();    restart.setTestDir(testDir);    restart.startServer();    restart.sendMessages(start,end);    Runtime.getRuntime().halt(100);  } catch (  Exception e) {    e.printStackTrace(System.out);    System.exit(1);  }}  }
class C{  protected boolean loadImage(){  URL fileUrl=WorldWind.getDataFileStore().requestFile(this.getImageSource().toString());  if (fileUrl != null) {    BufferedImage image=this.readImage(fileUrl);    if (image != null)     this.setImage(image);  }  return this.getImage() != null;}  }
class C{  @Deprecated protected List<BeanPropertyWriter> sortBeanProperties(SerializationConfig config,BasicBeanDescription beanDesc,List<BeanPropertyWriter> props){  return props;}  }
class C{  private void checkBlankFinals(Environment env,Context ctxInit,Vset vset,boolean isStatic){  for (int i=0; i < ctxInit.getVarNumber(); i++) {    if (!vset.testVar(i)) {      MemberDefinition ff=ctxInit.getElement(i);      if (ff != null && ff.isBlankFinal() && ff.isStatic() == isStatic && ff.getClassDefinition() == this) {        env.error(ff.getWhere(),"final.var.not.initialized",ff.getName());      }    }  }}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source){  this(destination,source,undefinedConfig());}  }
class C{  public byte[] generateSignature() throws OpenStegoException {  Random rand=null;  Signature sig=null;  rand=new Random(StringUtil.passwordHash(this.config.getPassword()));  sig=new Signature(rand);  return sig.getSigData();}  }
class C{  public Shape createArrowLeft(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x,y + h / 2.0);  path.lineTo(x + w,y + h);  path.closePath();  return path;}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Funnel<Long> longFunnel(){  return LongFunnel.INSTANCE;}  }
class C{  public Map<String,ManagedObjectReference> inFolderByType(final ManagedObjectReference folder,final String morefType,final RetrieveOptions retrieveOptions) throws RuntimeFaultFaultMsg, InvalidPropertyFaultMsg {  final PropertyFilterSpec[] propertyFilterSpecs=propertyFilterSpecs(folder,morefType,"name");  final ManagedObjectReference propertyCollector=this.serviceContent.getPropertyCollector();  RetrieveResult results=this.vimPort.retrievePropertiesEx(propertyCollector,Arrays.asList(propertyFilterSpecs),retrieveOptions);  final Map<String,ManagedObjectReference> tgtMoref=new HashMap<>();  while (results != null && !results.getObjects().isEmpty()) {    resultsToTgtMorefMap(results,tgtMoref);    final String token=results.getToken();    results=(token != null) ? this.vimPort.continueRetrievePropertiesEx(propertyCollector,token) : null;  }  return tgtMoref;}  }
class C{  public void init(Context context){  if (!mNotFoundClassesMap.isEmpty()) {    buildInstalledPackagesCache(context);  }  mPackageMonitor.register(context);}  }
class C{  void removeSkippedScrap(){  if (mSkippedScrap == null) {    return;  }  final int count=mSkippedScrap.size();  for (int i=0; i < count; i++) {    removeDetachedView(mSkippedScrap.get(i),false);  }  mSkippedScrap.clear();}  }
class C{  public boolean isExpandingEntityRefs(){  return _isExpandingEntityRefs;}  }
class C{  public static boolean isValid(LayoutEngine layout){  return (layout != null && Document.isValid((Pageable)layout) && layout.getNumberOfPages() > 0);}  }
class C{  public static void displayToast(Context ctx,String message){  Toast.makeText(ctx,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node clonedNode;  NodeList clonedList;  Node clonedChild;  String clonedChildName;  int length;  java.util.List result=new java.util.ArrayList();  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("address");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  clonedNode=employeeNode.cloneNode(true);  clonedList=clonedNode.getChildNodes();  for (int indexN100AE=0; indexN100AE < clonedList.getLength(); indexN100AE++) {    clonedChild=(Node)clonedList.item(indexN100AE);    clonedChildName=clonedChild.getNodeName();    result.add(clonedChildName);  }  if (equals(6,length)) {    assertEquals("nowhitespace",expectedNoWhitespace,result);  } else {    assertEquals("whitespace",expectedWhitespace,result);  }}  }
class C{  private void addNewInitRec(int currentRecord){  this.oidInitRecNo.add(-currentRecord);  logger.debug("InitRecNo added " + (-currentRecord));}  }
class C{  void resize(int newCapacity){  Entry[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  public Properties findProperties(String uri) throws IOException {  String fulluri=_path + uri;  URL resource=getResource(fulluri);  if (resource == null) {    throw new IOException("Could not find resource: " + fulluri);  }  return loadProperties(resource);}  }
class C{  private int makeNotifyResp(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND);  if (appendHeader(PduHeaders.TRANSACTION_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.STATUS) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.215 -0400",hash_original_method="F5A0E19D9D1F2531226B3B43BC9AECC5",hash_generated_method="64EE037A78D29A1E2753014EACA4C479") private void initTargetName(String name){  if (name == null) {    throw new NullPointerException("auth.0E");  }  name=name.trim();  if (name.length() == 0) {    throw new IllegalArgumentException("auth.0F");  }  int beg=name.indexOf(' ');  if (beg == -1) {    throw new IllegalArgumentException("auth.10");  }  credentialClass=name.substring(0,beg);  beg++;  int count=0;  int nameLength=name.length();  for (int i, j=0; beg < nameLength; beg=j + 2, count++) {    i=name.indexOf(' ',beg);    j=name.indexOf('"',i + 2);    if (i == -1 || j == -1 || name.charAt(i + 1) != '"') {      throw new IllegalArgumentException("auth.10");    }  }  if (count < 1) {    throw new IllegalArgumentException("auth.10");  }  beg=name.indexOf(' ');  beg++;  String principalClass;  String principalName;  set=new CredOwner[count];  for (int index=0, i, j; index < count; beg=j + 2, index++) {    i=name.indexOf(' ',beg);    j=name.indexOf('"',i + 2);    principalClass=name.substring(beg,i);    principalName=name.substring(i + 2,j);    CredOwner element=new CredOwner(principalClass,principalName);    boolean found=false;    for (int ii=0; ii < offset; ii++) {      if (set[ii].equals(element)) {        found=true;        break;      }    }    if (!found) {      set[offset++]=element;    }  }}  }
class C{  public ObjectStateMachineFactory(StateMachineModel<S,E> defaultStateMachineModel){  this(defaultStateMachineModel,null);}  }
class C{  protected boolean[] declaresSerialVersionUID(){  boolean[] result=new boolean[2];  print("serialVersionUID...");  result[0]=!SerializationHelper.needsUID(m_Associator.getClass());  if (result[0]) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  private void closeAllServerSessions(final boolean criticalIOError){  if (state != SERVER_STATE.STOPPING) {    return;  }  for (  ServerSession session : sessions.values()) {    try {      session.close(true);    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.errorClosingSessionsWhileStoppingServer(e);    }  }  if (!criticalIOError) {    for (    ServerSession session : sessions.values()) {      try {        session.waitContextCompletion();      } catch (      Exception e) {        ActiveMQServerLogger.LOGGER.errorClosingSessionsWhileStoppingServer(e);      }    }  }}  }
class C{  public static char[] asCharArray(byte[] bytes){  char[] chars=new char[bytes.length];  for (int i=0; i != chars.length; i++) {    chars[i]=(char)(bytes[i] & 0xff);  }  return chars;}  }
class C{  public Properties load(String propertiesFile){  Properties properties=new Properties();  String templatePath=Generator.getInstance().getTemplatePath();  if (templatePath != null) {    properties=loadFromTemplatePath(propertiesFile);  } else {    properties=loadFromClassPath(propertiesFile);  }  return properties;}  }
class C{  public void removeLayoutCallback(LayoutCallback callback){  if (callbackList != null)   callbackList.remove(callback);}  }
class C{  public boolean isStrictParentOf(final ServerItemPath possibleChild){  return (isParentOf(possibleChild) && !equals(possibleChild));}  }
class C{  public int loadPerms(int destType,int destId,int archId,String entidad) throws Exception {  LdapUsersTable table=new LdapUsersTable();  int perms=Defs.OBJ_PERM_NONE;  String qual;  IeciTdLongIntegerArrayList vals;  int objType=Defs.OBJECT_OWNER_TYPE_ARCHIVE;  if (_logger.isDebugEnabled())   _logger.debug("loadPerm");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    vals=new IeciTdLongIntegerArrayList();    qual=table.getLoadObjPermsQual(destType,destId,objType,archId);    DbSelectFns.select(dbConn,table.getObjPermsTableName(),table.getLoadObjPermColumnName(),qual,false,vals);    for (int i=0; i < vals.count(); i++) {      perms=perms | vals.get(i);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return perms;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jxstnupi");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static String keyBindingToString(RaptorAction action){  String result="";  if (action.getModifierKey() != 0) {    result=getStringFromModifier(action.getModifierKey()) + " " + (char)action.getKeyCode();  } else   if (isValidKeyCodeWithoutModifier(action.getKeyCode())) {    result=getNonModifierStringFromKeyCode(action.getKeyCode());  }  return result;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  MOrderLine[] lines=getLines(true,MOrderLine.COLUMNNAME_M_Product_ID);  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    BigDecimal old=line.getQtyOrdered();    if (old.compareTo(line.getQtyDelivered()) != 0) {      line.setQtyLostSales(line.getQtyOrdered().subtract(line.getQtyDelivered()));      line.setQtyOrdered(line.getQtyDelivered());      line.addDescription("Close (" + old + ")");      line.save(get_TrxName());    }  }  if (!reserveStock(null,lines)) {    m_processMsg="Cannot unreserve Stock (close)";    return false;  }  setProcessed(true);  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  @Override public Long deserializeKey(ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  final long id=KeyBuilder.decodeLong(key,0);  return id;}  }
class C{  public Node item(int i){  int count=0;  for (int n=dtm.getFirstAttribute(element); n != -1; n=dtm.getNextAttribute(n)) {    if (count == i)     return dtm.getNode(n); else     ++count;  }  return null;}  }
class C{  protected PropertyChangeListener createActionChangeListener(JMenuItem b){  return b.createActionPropertyChangeListener0(b.getAction());}  }
class C{  public ECPoint(BigInteger affineX,BigInteger affineY){  this.affineX=affineX;  if (this.affineX == null) {    throw new NullPointerException("affineX == null");  }  this.affineY=affineY;  if (this.affineY == null) {    throw new NullPointerException("affineY == null");  }}  }
class C{  public synchronized void addObject(Object obj){  fifo.addElement(obj);  nbObjects++;  notifyAll();}  }
class C{  public TypingStrategy createTypingStrategyFromString(EDataType eDataType,String initialValue){  TypingStrategy result=TypingStrategy.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void perform(IR ir){  this.ir=ir;  if (DEBUG && ir.hasReachableExceptionHandlers()) {    VM.sysWrite("] " + ir.method + "\n");    (new LiveAnalysis(false,false,true,false)).perform(ir);    Enumeration<BasicBlock> e=ir.getBasicBlocks();    while (e.hasMoreElements()) {      BasicBlock b=e.nextElement();      if (b instanceof ExceptionHandlerBasicBlock) {        VM.sysWrite("] " + b + ": "+ ((ExceptionHandlerBasicBlock)b).getLiveSet()+ "\n");      }    }  }  if (ir.hasReachableExceptionHandlers() || GCP.tooBig(ir)) {    resetLandingPads();    return;  }  VERBOSE=ir.options.DEBUG_GCP;  if (VERBOSE && ir.options.hasMETHOD_TO_PRINT()) {    VERBOSE=ir.options.fuzzyMatchMETHOD_TO_PRINT(ir.method.toString());    if (!VERBOSE) {      resetLandingPads();      return;    }  }  if (VERBOSE)   VM.sysWrite("] " + ir.method + "\n");  initialize(ir);  if (VERBOSE)   SSA.printInstructions(ir);  Instruction inst=ir.firstInstructionInCodeOrder();  while (inst != null) {    Instruction next=inst.nextInstructionInCodeOrder();    if (DEBUG)     System.out.println("scheduleEarly: " + inst);    scheduleEarly(inst);    inst=next;  }  inst=ir.lastInstructionInCodeOrder();  while (inst != null) {    Instruction next=inst.prevInstructionInCodeOrder();    scheduleLate(inst);    inst=next;  }  resetLandingPads();  if (DEBUG)   SSA.printInstructions(ir);  ir.actualSSAOptions.setScalarValid(false);}  }
class C{  private void addInfoButton(JPanel panel,Object o,String clientProp){  JButton hButton;  hButton=new JButton(o.toString());  hButton.putClientProperty(clientProp,o);  hButton.addActionListener(this);  hButton.setFont(font);  hButton.setMargin(new Insets(0,0,0,0));  hButton.setBackground(LOG_BUTTON_BG);  panel.add(hButton);}  }
class C{  public static boolean byteArrayToFile(final byte[] array,final File targetFile,final boolean doAppend){  if (array == null || array.length == 0 || !isWritable(targetFile,true)) {    Log.e(FileUtils.class,"byteArrayToFile(): Null parameter or can't make path dirs");    return false;  }  if (targetFile.exists() && !targetFile.delete())   return false;  boolean isSucceed=false;  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(targetFile,doAppend);    outputStream.write(array);    isSucceed=true;    outputStream.flush();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (outputStream != null)     try {      sync(outputStream);      outputStream.close();    } catch (    IOException e) {    }  }  return isSucceed;}  }
class C{  public void remove(int row){  _list.get(row).cleanup();  _list.remove(row);  fireTableRowsDeleted(row,row);}  }
class C{  @DSComment("Only getActiveNetworkInfo() is important") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.926 -0500",hash_original_method="4897D1CF0EA563D6DA8C578331010914",hash_generated_method="79476FFD25CA18C7F81E6A8C7C8DCF12") public boolean isAvailable(){synchronized (this) {    return mIsAvailable;  }}  }
class C{  public static void log(String msg,int type,Exception e){  log(null,msg,type,e);}  }
class C{  @TargetApi(8) @Override public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  final String packageName=parentEngine.cordova.getActivity().getPackageName();  final PackageManager pm=parentEngine.cordova.getActivity().getPackageManager();  ApplicationInfo appInfo;  try {    appInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    if ((appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {      handler.proceed();      return;    } else {      super.onReceivedSslError(view,handler,error);    }  } catch (  NameNotFoundException e) {    super.onReceivedSslError(view,handler,error);  }}  }
class C{  public synchronized void reset(){  lockOrdering.clear();  knownDeadlocks.clear();}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(eContentType,content,encapsulate,sigProvider,true);}  }
class C{  public synchronized void releaseDirect(byte[] buffer){  Assertions.checkArgument(buffer.length == bufferLength);  allocatedBufferCount--;  ensureRecycledBufferCapacity(recycledBufferCount + 1);  recycledBuffers[recycledBufferCount++]=buffer;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static double angle(Coordinate p0,Coordinate p1){  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  return Math.atan2(dy,dx);}  }
class C{  public int addPoint(GrabPoint gp,int position){  if (gp == null) {    return -1;  }  int x=gp.getX();  int y=gp.getY();  int renderType=poly.getRenderType();  Projection proj=getProjection();  if (renderType == OMGraphic.RENDERTYPE_LATLON) {    Debug.message("eomg","EditableOMPoly: adding point to lat/lon poly");    if (proj != null) {      double[] ll=poly.getLatLonArray();      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);      LatLonPoint llpnt=proj.inverse(x,y,new LatLonPoint.Double());      if (Debug.debugging("eomp")) {        Debug.output("EditableOMPoly: adding point to lat/lon poly at " + x + ", "+ y+ ": "+ llpnt+ ", at the end of ");        for (int j=0; j < ll.length; j+=2) {          Debug.output(ll[j] + ", " + ll[j + 1]);        }      }      double[] newll=new double[ll.length + 2];      double newlat=llpnt.getRadLat();      double newlon=llpnt.getRadLon();      if (actualPosition >= ll.length) {        if (ll.length != 0) {          System.arraycopy(ll,0,newll,0,ll.length);        }        newll[ll.length]=newlat;        newll[ll.length + 1]=newlon;        position=ll.length / 2;      } else       if (actualPosition <= 0) {        System.arraycopy(ll,0,newll,2,ll.length);        newll[0]=newlat;        newll[1]=newlon;        position=0;      } else {        newll[actualPosition]=newlat;        newll[actualPosition + 1]=newlon;        System.arraycopy(ll,0,newll,0,actualPosition);        System.arraycopy(ll,actualPosition,newll,actualPosition + 2,ll.length - actualPosition);      }      poly.setLocation(newll,OMGraphic.RADIANS);    }  } else   if (renderType == OMGraphic.RENDERTYPE_XY) {    Debug.message("eomg","EditableOMPoly: adding point to x/y poly");    int currentLength=poly.xs.length;    int[] newxs=new int[currentLength + 1];    int[] newys=new int[currentLength + 1];    if (position >= currentLength) {      System.arraycopy(poly.xs,0,newxs,0,currentLength);      System.arraycopy(poly.ys,0,newys,0,currentLength);      newxs[currentLength]=x;      newys[currentLength]=y;      position=currentLength;    } else     if (position <= 0) {      System.arraycopy(poly.xs,0,newxs,1,currentLength);      System.arraycopy(poly.ys,0,newys,1,currentLength);      newxs[0]=x;      newys[0]=y;      position=0;    } else {      newxs[position]=x;      newys[position]=y;      System.arraycopy(poly.xs,0,newxs,0,position);      System.arraycopy(poly.xs,position,newxs,position + 1,currentLength - position);      System.arraycopy(poly.ys,0,newys,0,position);      System.arraycopy(poly.ys,position,newys,position + 1,currentLength - position);    }    poly.setLocation(newxs,newys);  } else {    Debug.message("eomg","EditableOMPoly: adding point to offset poly");    int currentLength=poly.xs.length;    int[] newxs=new int[currentLength + 1];    int[] newys=new int[currentLength + 1];    if (position >= currentLength) {      position=currentLength;      System.arraycopy(poly.xs,0,newxs,0,currentLength);      System.arraycopy(poly.ys,0,newys,0,currentLength);    } else     if (position <= 0) {      position=0;      System.arraycopy(poly.xs,0,newxs,1,currentLength);      System.arraycopy(poly.ys,0,newys,1,currentLength);    } else {      System.arraycopy(poly.xs,0,newxs,0,position);      System.arraycopy(poly.xs,position,newxs,position + 1,currentLength - position);      System.arraycopy(poly.ys,0,newys,0,position);      System.arraycopy(poly.ys,position,newys,position + 1,currentLength - position);    }    int offsetX;    int offsetY;    if (gpo.getX() == -1 && gpo.getY() == -1) {      offsetX=proj.getWidth() / 2;      offsetY=proj.getHeight() / 2;    } else {      offsetX=gpo.getX();      offsetY=gpo.getY();    }    if (poly.coordMode == OMPoly.COORDMODE_ORIGIN || position == 0) {      newxs[position]=x - offsetX;      newys[position]=y - offsetY;    } else {      newxs[position]=x - offsetX - newxs[position - 1];      newys[position]=y - offsetY - newys[position - 1];    }    if (position == 0) {      LatLonPoint llpnt=proj.inverse(offsetX,offsetY,new LatLonPoint.Double());      poly.lat=llpnt.getRadLat();      poly.lon=llpnt.getRadLon();    }    poly.setLocation(poly.lat,poly.lon,OMGraphic.RADIANS,newxs,newys);  }  OMArrowHead omah=poly.getArrowHead();  poly.setArrowHead(null);  poly.setArrowHead(omah);  polyGrabPoints.add(position,gp);  if (gpo != null) {    gpo.addGrabPoint(gp);  }  poly.regenerate(proj);  gp.generate(proj);  return position;}  }
class C{  public void toggleConnection(Feature a,Feature b){  Set<Feature> features=connectedFeatures(a);  if (!features.remove(b))   features.add(b);  features=connectedFeatures(b);  if (!features.remove(a)) {    features.add(a);  }  try {    save();  } catch (  IOException e) {  }}  }
class C{  public FastHierarchy(){  this.sc=Scene.v();  for (Iterator clIt=sc.getClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=(SootClass)clIt.next();    if (cl.resolvingLevel() < SootClass.HIERARCHY)     continue;    if (!cl.isInterface() && cl.hasSuperclass()) {      put(classToSubclasses,cl.getSuperclass(),cl);    }    for (Iterator superclIt=cl.getInterfaces().iterator(); superclIt.hasNext(); ) {      final SootClass supercl=(SootClass)superclIt.next();      if (cl.isInterface()) {        interfaceToSubinterfaces.put(supercl,cl);      } else {        interfaceToImplementers.put(supercl,cl);      }    }  }  dfsVisit(0,Scene.v().getSootClass("java.lang.Object"));  for (  SootClass phantomClass : Scene.v().getPhantomClasses()) {    if (!phantomClass.isInterface())     dfsVisit(0,phantomClass);  }}  }
class C{  private static <T>void shuffle(List<T> arr){  final PortableRandom r=Boolean.valueOf(SHUFFLE_TESTS) ? new PortableRandom() : new PortableRandom(Long.parseLong(SHUFFLE_TESTS));  System.out.println("Shuffling tests with seed: " + r.getSeed());  for (int i=0; i < arr.size(); i++) {    final int z=r.nextInt(arr.size() - i);    Collections.swap(arr,i + z,i);  }}  }
class C{  private final void notifyConnectionClosed(OFConnection connection){  connection.getListener().connectionClosed(connection);}  }
class C{  static synchronized ManaIndicator create(){  if (instance == null) {    LinearScalingModel model=new LinearScalingModel();    instance=new ManaIndicator(model);  } else {    throw new IllegalStateException("Instance already created");  }  return instance;}  }
class C{  public static RefactoringStatus create(IStatus status){  if (status.isOK())   return new RefactoringStatus();  if (!status.isMultiStatus()) {switch (status.getSeverity()) {case IStatus.OK:      return new RefactoringStatus();case IStatus.INFO:    return RefactoringStatus.createWarningStatus(status.getMessage());case IStatus.WARNING:  return RefactoringStatus.createErrorStatus(status.getMessage());case IStatus.ERROR:return RefactoringStatus.createFatalErrorStatus(status.getMessage());case IStatus.CANCEL:return RefactoringStatus.createFatalErrorStatus(status.getMessage());default :return RefactoringStatus.createFatalErrorStatus(status.getMessage());}} else {IStatus[] children=status.getChildren();RefactoringStatus result=new RefactoringStatus();for (int i=0; i < children.length; i++) {result.merge(RefactoringStatus.create(children[i]));}return result;}}  }
class C{  void endSegment(){  if (lastCommittedRow != null) {    if (segmentEnds == null) {      segmentEnds=new Vector();    }    segmentEnds.addElement(lastCommittedRow);  }  curSegmentType=SEGMENT_TBODY;  rowInsretionPos=bodyInsertionPos;}  }
class C{  public SendableForwardMessage.SendableForwardMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public boolean isYear(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Year.equals(pt);}  }
class C{  void logClientCall(Object obj,Object method){  clientCallLog.log(Log.VERBOSE,"outbound call: " + ref + " : "+ obj.getClass().getName()+ ref.getObjID().toString()+ ": "+ method);}  }
class C{  public synchronized void addHyperlinkListener(HyperlinkListener listener){  listenerList.add(HyperlinkListener.class,listener);}  }
class C{  protected void initializeAllFrames(){}  }
class C{  public static int showDialog(Component parent,String title,List mediaList){  Dialog dialog=new Dialog(parent,title,mediaList);  dialog.setModal(true);  dialog.pack();  dialog.setVisible(true);  return dialog.getReturnCode();}  }
class C{  public void addPeerDiscovery(PeerDiscovery peerDiscovery){  lock.lock();  try {    if (getMaxConnections() == 0)     setMaxConnections(DEFAULT_CONNECTIONS);    peerDiscoverers.add(peerDiscovery);  }  finally {    lock.unlock();  }}  }
class C{  protected void displayImageFromFile(String imageUri,ImageView imageView) throws IOException {  String filePath=Scheme.FILE.crop(imageUri);  ZogUtils.printError(ImageLoader.class,"filePath:" + filePath);  GlideUtils.displayFile(context,imageView,new File(filePath));}  }
class C{  public DomainConfig connect(DomainConfig config){  this.domain=fetch(config);  return this.domain;}  }
class C{  public final void createInitialPartitionFromFile(File file,IMutualInformationHolder mutualInformationMatrixHolder) throws AdeInternalException {  m_initialPartitionFileName=file.getPath();  final int numUniqueMsgIds=mutualInformationMatrixHolder.getMutualInformationMatrix().getRowNum();  int[] initialPartition=new int[numUniqueMsgIds];  final int defaultVal=-1;  Arrays.fill(initialPartition,defaultVal);  int clusterIndex=-1;  int numClusters=m_numClusters;  m_initialClusters=new HashMap<String,ArrayList<Integer>>();  FileInputStream fis=null;  BufferedReader br=null;  try {    fis=new FileInputStream(file);    br=new BufferedReader(new InputStreamReader(fis,StandardCharsets.UTF_8));    String nextLine=null;    while ((nextLine=br.readLine()) != null) {      clusterIndex++;      final String[] path=nextLine.split("\t");      final ArrayList<Integer> members=new ArrayList<Integer>();      for (int i=1; i < path.length; i++) {        final int id=Integer.parseInt(path[i]);        final int index=mutualInformationMatrixHolder.getIndexOfMsgId(id);        if (index != -1) {          initialPartition[index]=clusterIndex;          members.add(id);        }      }      if (members.isEmpty()) {        m_initialClusters.put(path[0],members);      }    }  } catch (  FileNotFoundException e) {    logger.error("The file " + m_initialPartitionFileName + " is not found",e);    initialPartition=null;    return;  }catch (  IOException e) {    logger.error("Error reading the file " + m_initialPartitionFileName,e);    initialPartition=null;    try {      if (br != null) {        br.close();      }    } catch (    IOException e1) {      logger.error("Error closing the file " + m_initialPartitionFileName,e1);    }    return;  } finally {    try {      if (br != null) {        br.close();      }      if (fis != null) {        fis.close();      }    } catch (    IOException e) {      logger.error("Error closing the file " + m_initialPartitionFileName,e);    }  }  if (clusterIndex >= numClusters) {    numClusters=clusterIndex + 2;    logger.info("Number of cluster set to be " + numClusters);  }  final ArrayList<Integer> indices=new ArrayList<Integer>();  int numOfUnclusteredElements=0;  for (int i=0; i < numUniqueMsgIds; ++i) {    if (initialPartition[i] == defaultVal) {      indices.add(i);      numOfUnclusteredElements++;    }  }  Collections.shuffle(indices,new Random());  final int numOfEmptyClusters=numClusters - clusterIndex - 1;  final int threshould=Math.min(numOfEmptyClusters,numOfUnclusteredElements);  for (int i=0; i < threshould; ++i) {    clusterIndex++;    for (int j=i; j < numOfUnclusteredElements; j+=numOfEmptyClusters) {      initialPartition[indices.get(j)]=clusterIndex;    }  }  m_numClusters=clusterIndex + 1;  logger.info("Number of clusters to initial Iclust is " + m_numClusters);  m_initialPartition=initialPartition;}  }
class C{  @ReactMethod public void share(ReadableMap shareContentMap,String graphNode,String message,Promise promise){  ShareContent shareContent=Utility.buildShareContent(shareContentMap);  if (shareContent != null) {    ShareApi shareApi=new ShareApi(shareContent);    shareApi.setGraphNode(graphNode);    shareApi.setMessage(message);    shareApi.share(new ShareAPICallback(promise));  } else {    promise.reject("ShareContent cannot be null");  }}  }
class C{  public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){  this(streamOne);  add(streamTwo);  outerJoinQualifiers.add(outerJoinQualifier);}  }
class C{  public ConcurrentWeakValueCache(){  this(16);}  }
class C{  public EmbeddedActiveMQResource(int serverId){  Map<String,Object> params=new HashMap<>();  params.put(TransportConstants.SERVER_ID_PROP_NAME,serverId);  TransportConfiguration transportConfiguration=new TransportConfiguration(InVMAcceptorFactory.class.getName(),params);  configuration=new ConfigurationImpl().setName(SERVER_NAME + "-" + serverId).setPersistenceEnabled(false).setSecurityEnabled(false).addAcceptorConfiguration(transportConfiguration);  init();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + this.getClass().getName());  LOG.info(" - inputDir: " + args.input);  LOG.info(" - outputDir: " + args.output);  LOG.info(" - src: " + args.src);  Job job=Job.getInstance(getConf());  job.setJobName(String.format("EncodeBfsGraph[input: %s, ouput: %s, src: %d]",args.input,args.output,args.src));  job.setJarByClass(EncodeBfsGraph.class);  job.setNumReduceTasks(0);  job.getConfiguration().setInt(SRC_KEY,args.src);  job.getConfiguration().setInt("mapred.min.split.size",1024 * 1024 * 1024);  FileInputFormat.addInputPath(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setInputFormatClass(TextInputFormat.class);  job.setOutputFormatClass(SequenceFileOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(BfsNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(BfsNode.class);  job.setMapperClass(MyMapper.class);  FileSystem.get(job.getConfiguration()).delete(new Path(args.output),true);  job.waitForCompletion(true);  return 0;}  }
class C{  protected boolean isToggleSelectionEvent(final MouseEvent event){  return SwingUtilities.isLeftMouseButton(event) && event.isMetaDown();}  }
class C{  public S2LatLngRect(R1Interval lat,S1Interval lng){  this.lat=lat;  this.lng=lng;}  }
class C{  public static void execApplication(String invokeWith,String niceName,int targetSdkVersion,FileDescriptor pipeFd,String[] args){  StringBuilder command=new StringBuilder(invokeWith);  command.append(" /system/bin/app_process /system/bin --application");  if (niceName != null) {    command.append(" '--nice-name=").append(niceName).append("'");  }  command.append(" com.android.internal.os.WrapperInit ");  command.append(pipeFd != null ? pipeFd.getInt$() : 0);  command.append(' ');  command.append(targetSdkVersion);  Zygote.appendQuotedShellArgs(command,args);  Zygote.execShell(command.toString());}  }
class C{  public void drawPolyline(int xPoints[],int yPoints[],int nPoints){  if (nPoints > 0) {    int x=xPoints[0];    int y=yPoints[0];    for (int i=1; i < nPoints; i++) {      drawLine(x,y,xPoints[i],yPoints[i]);      x=xPoints[i];      y=yPoints[i];    }  }}  }
class C{  public String globalInfo(){  return "Class that splits a BallNode of a ball tree using Uhlmann's " + "described method.\n\n" + "For information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,int arm){  final Entity ae=game.getEntity(attackerId);  if ((ae == null) || (target == null)) {    throw new IllegalArgumentException("Attacker or target not valid");  }  String impossible=PunchAttackAction.toHitIsImpossible(game,ae,target,arm);  if (impossible != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,impossible);  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerHeight=ae.relHeight() + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  final int armArc=(arm == PunchAttackAction.RIGHT) ? Compute.ARC_RIGHTARM : Compute.ARC_LEFTARM;  ToHitData toHit;  if ((arm != PunchAttackAction.RIGHT) && (arm != PunchAttackAction.LEFT)) {    throw new IllegalArgumentException("Arm must be LEFT or RIGHT");  }  int base=ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  PhysicalAttackAction.setCommonModifiers(toHit,game,ae,target);  if (ae.isProne()) {    if (!ae.isLocationBad(Mech.LOC_RARM) && !ae.isLocationBad(Mech.LOC_LARM) && (target instanceof Tank)&& (ae.getPosition().distance(target.getPosition()) == 0)) {      toHit.addModifier(2,"attacker is prone");    } else {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");    }  } else   if (!Compute.isInArc(ae.getPosition(),ae.getSecondaryFacing(),target,armArc)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK) || (target instanceof GunEmplacement)) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  final int armLoc=(arm == PunchAttackAction.RIGHT) ? Mech.LOC_RARM : Mech.LOC_LARM;  if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,armLoc)) {    toHit.addModifier(2,"Upper arm actuator destroyed");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,armLoc)) {    toHit.addModifier(2,"Lower arm actuator missing or destroyed");  }  if (ae.hasFunctionalArmAES(armLoc)) {    toHit.addModifier(-1,"AES modifer");  }  final boolean hasClaws=((Mech)ae).hasClaw(armLoc);  final boolean hasLowerArmActuator=ae.hasSystem(Mech.ACTUATOR_LOWER_ARM,armLoc);  final boolean hasHandActuator=ae.hasSystem(Mech.ACTUATOR_HAND,armLoc);  if (!hasClaws && !hasHandActuator && hasLowerArmActuator) {    toHit.addModifier(1,"Hand actuator missing");  } else   if (hasHandActuator && !hasClaws && !ae.hasWorkingSystem(Mech.ACTUATOR_HAND,armLoc)) {    toHit.addModifier(1,"Hand actuator destroyed");  } else   if (hasClaws) {    toHit.addModifier(1,"Using Claws");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_POS_BATTLE_FIST) && hasHandActuator) {    toHit.addModifier(-1,"Battlefist");  }  if ((attackerHeight == targetElevation) && !ae.isHullDown()) {    if (target.getHeight() == 0) {      toHit.setHitTable(ToHitData.HIT_NORMAL);    } else {      toHit.setHitTable(ToHitData.HIT_KICK);    }  } else {    if (ae.isHullDown()) {      toHit.setHitTable(ToHitData.HIT_KICK);    } else {      toHit.setHitTable(ToHitData.HIT_PUNCH);    }  }  if (target instanceof Dropship) {    if ((attackerHeight - targetElevation) > (target.getHeight() / 2)) {      toHit.setHitTable(ToHitData.HIT_NORMAL);    } else {      toHit.setHitTable(ToHitData.HIT_PUNCH);    }  }  toHit.setSideTable(Compute.targetSideTable(ae,target));  return toHit;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForBlobFileDescriptor();}  }
class C{  protected static long parseIntegerValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  if (temp > SHORT_INTEGER_MAX) {    return parseShortInteger(pduDataStream);  } else {    return parseLongInteger(pduDataStream);  }}  }
class C{  private void createStatement(MChangeLog cLog,String trxName){  if (m_table != null) {    if (cLog.getAD_Table_ID() != m_table.getAD_Table_ID()) {      executeStatement();      m_table=null;    }  }  if (m_table == null)   m_table=new MTable(getCtx(),cLog.getAD_Table_ID(),trxName);  if (m_sqlUpdate != null && cLog.getRecord_ID() != m_oldRecord_ID)   executeStatement();  m_column=new MColumn(getCtx(),cLog.getAD_Column_ID(),get_TrxName());  if (m_columns.contains(m_column.getColumnName()))   executeStatement();  m_columns.add(m_column.getColumnName());  if (m_sqlUpdate == null) {    String tableName=m_table.getTableName();    m_keyColumn=m_table.getTableName() + "_ID";    if (tableName.equals("AD_Ref_Table"))     m_keyColumn="AD_Reference_ID";    m_sqlUpdate=new StringBuffer("UPDATE ").append(tableName).append(" SET ");    m_sqlUpdateWhere=new StringBuffer(" WHERE ").append(m_keyColumn).append("=").append(cLog.getRecord_ID());    m_oldRecord_ID=cLog.getRecord_ID();    m_isInsert=MChangeLog.EVENTCHANGELOG_Insert.equals(cLog.getEventChangeLog());    if (m_isInsert) {      m_sqlInsert=new StringBuffer("INSERT INTO ").append(tableName).append("(").append(m_keyColumn);      m_sqlInsertValue=new StringBuffer(") VALUES (").append(cLog.getRecord_ID());      if (!m_keyColumn.equals(m_column.getColumnName())) {        m_sqlInsert.append(",").append(m_column.getColumnName());        m_sqlInsertValue.append(",").append(getSQLValue(cLog.getOldValue()));      }    }    m_numberColumns=1;  } else {    m_sqlUpdate.append(", ");    if (m_isInsert)     m_isInsert=cLog.isNewNull();    if (m_isInsert && !m_keyColumn.equals(m_column.getColumnName())) {      m_sqlInsert.append(",").append(m_column.getColumnName());      m_sqlInsertValue.append(",").append(getSQLValue(cLog.getOldValue()));    }    m_numberColumns++;  }  m_sqlUpdate.append(m_column.getColumnName()).append("=");  if (p_CheckNewValue != null) {    m_sqlUpdate.append(getSQLValue(cLog.getOldValue()));    if (p_CheckNewValue.booleanValue()) {      m_sqlUpdateWhere.append(" AND ").append(m_column.getColumnName());      String newValue=getSQLValue(cLog.getNewValue());      if (newValue == null || "NULL".equals(newValue))       m_sqlUpdateWhere.append(" IS NULL"); else       m_sqlUpdateWhere.append("=").append(newValue);    }  } else   if (p_CheckOldValue != null) {    m_sqlUpdate.append(getSQLValue(cLog.getNewValue()));    if (p_CheckOldValue.booleanValue()) {      String newValue=getSQLValue(cLog.getOldValue());      m_sqlUpdateWhere.append(" AND ").append(m_column.getColumnName());      if (newValue == null || "NULL".equals(newValue))       m_sqlUpdateWhere.append(" IS NULL"); else       m_sqlUpdateWhere.append("=").append(newValue);    }  }}  }
class C{  private static Element buildSequenceInputControlNode(String name,Element node,String type,Element labelNode,Element bindingNode,Element bodyNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  type=getPrefixedDataType(type);  if (!isDataTypeSetPrecisely(bindingNode))   bindingNode.setAttribute(null,ATTRIBUTE_TYPE,type);  Element inputNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  inputNode.setName(CONTROL_INPUT);  labelNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  labelNode.setName(NODE_LABEL);  inputNode.addChild(Element.ELEMENT,labelNode);  addRepeatControlNode(name,inputNode,bodyNode,problemList,problemListItems,repeatControls,NODE_VALUE,modelNode,bindingNode);  return labelNode;}  }
class C{  public List<LatLon> asList(){  ArrayList<LatLon> list=new ArrayList<LatLon>(4);  for (  LatLon ll : this) {    list.add(ll);  }  return list;}  }
class C{  public void train(Matrix X,Matrix y,Matrix logtheta0,int iterations){  System.out.println("training started...");  this.X=X;  logtheta=minimize(logtheta0,iterations,X,y);}  }
class C{  void attemptSend(SendFlags sflags){  long now=now();  if (timeDiff(now,m_lastsend) > m_rx_rto) {    m_cwnd=m_mss;  }  boolean bFirst=true;  while (true) {    long cwnd=m_cwnd;    if ((m_dup_acks == 1) || (m_dup_acks == 2)) {      cwnd+=m_dup_acks * m_mss;    }    long nWindow=Math.min(getM_snd_wnd(),cwnd);    long nInFlight=m_snd_nxt - m_snd_una;    long nUseable=(nInFlight < nWindow) ? (nWindow - nInFlight) : 0;    long snd_buffered=m_sbuf.getBuffered();    long nAvailable=Math.min(snd_buffered - nInFlight,m_mss);    if (nAvailable > nUseable) {      if (nUseable * 4 < nWindow) {        logger.log(Level.FINER,"RFC 813 - avoid SWS(nAvailable = 0)");        nAvailable=0;      } else {        nAvailable=nUseable;      }    }    if (bFirst) {      long available_space=m_sbuf.getWriteRemaining();      bFirst=false;      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"[cwnd: " + m_cwnd + " nWindow: "+ nWindow+ " nInFlight: "+ nInFlight+ " nAvailable: "+ nAvailable+ " nQueued: "+ snd_buffered+ " nEmpty: "+ available_space+ " ssthresh: "+ m_ssthresh+ "]");      }    }    if (nAvailable == 0) {      if (sflags == SendFlags.sfNone) {        logger.log(Level.FINEST,"nAvailable == 0: quit");        return;      }      if ((sflags == SendFlags.sfImmediateAck) || (m_t_ack > 0)) {        packet(m_snd_nxt,(short)0,0,0);        logger.log(Level.FINER,"Immediate ack: ");      } else {        m_t_ack=now();        if (logger.isLoggable(Level.FINER)) {          logger.log(Level.FINER,"Delayed ack, m_t_ack: " + m_t_ack);        }      }      return;    }    if (m_use_nagling && (m_snd_nxt > m_snd_una) && (nAvailable < m_mss)) {      logger.log(Level.FINER,"wait until more data is acked");      return;    }    SSegment seg=null;    Iterator<SSegment> iter=m_slist.iterator();    do {      SSegment it=iter.next();      if (it.xmit == 0) {        seg=it;        break;      }    } while (iter.hasNext());    assert seg != null;    if (seg.len > nAvailable) {      logger.log(Level.FINEST,"Break a segment into 2");      SSegment subseg=new SSegment(seg.seq + nAvailable,seg.len - nAvailable,seg.bCtrl);      seg.len=nAvailable;      m_slist.add(m_slist.indexOf(seg) + 1,subseg);    }    if (logger.isLoggable(Level.FINEST)) {      logger.log(Level.FINEST,"TRANSMIT SEGMENT seq: " + seg.seq + " len: "+ seg.len);    }    if (!transmit(seg,now)) {      logger.log(Level.SEVERE,"transmit failed");      return;    }    sflags=SendFlags.sfNone;  }}  }
class C{  private static final void parseCmdLine(String[] args){  int i=0;  String arg;  while (i < args.length && args[i].startsWith("-")) {    arg=args[i++];    if (arg.equals("-l")) {      if (i < args.length) {        levels=Integer.parseInt(args[i++]);      } else {        throw new Error("-l requires the number of levels");      }    } else     if (arg.equals("-p")) {      printResult=true;    } else     if (arg.equals("-m")) {      printMsgs=true;    } else     if (arg.equals("-h")) {      usage();    }  }  if (levels == 0)   usage();}  }
class C{  private void removeTvShowEpisode(TvShowEpisode episode){synchronized (root) {    TvShowEpisodeTreeNode child=(TvShowEpisodeTreeNode)nodeMap.get(episode);    TvShowSeasonTreeNode parent=null;    if (child != null) {      parent=(TvShowSeasonTreeNode)child.getParent();    }    if (parent != null && child != null) {      int index=getIndexOfChild(parent,child);      parent.remove(child);      nodeMap.remove(episode);      episode.removePropertyChangeListener(propertyChangeListener);      if (index > -1) {        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});        for (        TreeModelListener listener : listeners) {          try {            listener.treeNodesRemoved(event);          } catch (          NullPointerException|ArrayIndexOutOfBoundsException ignored) {          }        }      }      if (parent.getChildCount() == 0) {        TvShowSeason season=null;        for (        Entry<Object,TreeNode> entry : nodeMap.entrySet()) {          if (entry.getValue() == parent) {            season=(TvShowSeason)entry.getKey();          }        }        if (season != null) {          removeTvShowSeason(season);        }      }    }  }}  }
class C{  @Override public boolean isValid(){  return false;}  }
class C{  public boolean add(P model){  if (null == model)   return false;  if (presentationModels.containsKey(model.getId())) {    throw new IllegalArgumentException("There already is a PM with id " + model.getId());  }  boolean added=false;  if (!presentationModels.containsValue(model)) {    presentationModels.put(model.getId(),model);    addPresentationModelByType(model);    for (    A attribute : model.getAttributes()) {      addAttributeById(attribute);      attribute.addPropertyChangeListener(Attribute.QUALIFIER_PROPERTY,ATTRIBUTE_WORKER);      if (!StringUtil.isBlank(attribute.getQualifier()))       addAttributeByQualifier(attribute);    }    fireModelStoreChangedEvent(model,ModelStoreEvent.Type.ADDED);    added=true;  }  return added;}  }
class C{  public void reportHeartbeat(String host,int port,boolean success){  lock.readLock().lock();  try {    String serverName=getServerName(host,port);    Preconditions.checkArgument(serverTrackerMap.containsKey(serverName));    serverTrackerMap.get(serverName).reportHeartbeatResult(success);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(exceptionClassName);  dest.writeString(exceptionMessage);  dest.writeString(throwFileName);  dest.writeString(throwClassName);  dest.writeString(throwMethodName);  dest.writeInt(throwLineNumber);  dest.writeString(stackTrace);}  }
class C{  public boolean attempt(Address old,Address val){  return SimulatedMemory.exchangeWord(this,old.value,val.value);}  }
class C{  public int invScaledFloor(float length){  return MathUtil.ifloor(invScaled(length));}  }
class C{  public static void addShutdownHook(Thread hook){  throw new Error("TODO");}  }
class C{  public AuthenticateEvent(String challenge){  super(Event.AUTHENTICATE);  LOG.entering(CLASS_NAME,"<init>",new Object[]{type,challenge});  this.challenge=challenge;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public boolean hasRepositories(){  return hasRepeatingExtension(Repository.class);}  }
class C{  public static ThreadSafeSession wrap(Object syncObj,Session session){  if (session != null)   return new ThreadSafeSession(syncObj,session); else   return null;}  }
class C{  private void updateParameterPeriodFactor(TimeSlice timeSlice,LinkedList<XParameterPeriodValue> valuesPerSlice){  if (timeSlice.isLastButNotFirst()) {    updatePeriodFactorLastSliceLastValue(timeSlice,valuesPerSlice);  }  if (timeSlice.isFirstButNotLast()) {    updatePeriodFactorFirstSliceFirstValue(timeSlice,valuesPerSlice);  }  if (timeSlice.isFirstAndLast()) {    updatePeriodFactorOneSliceLastValues(timeSlice,valuesPerSlice);  }  for (  XParameterPeriodValue parameterPeriodValue : valuesPerSlice) {    Calendar endTimeForCalculation=parameterEndTimeForPeriodCalculation(timeSlice,parameterPeriodValue);    Calendar startTimeForCalculation=parameterStartTimeForPeriodCalculation(timeSlice,parameterPeriodValue);    updateParameterPeriodFactor(timeSlice,parameterPeriodValue,startTimeForCalculation,endTimeForCalculation);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET:    setTarget((Expression)null);  return;case N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE:setTemplate((TemplateLiteral)null);return;}super.eUnset(featureID);}  }
class C{  public void solve3(){  w1.set(m_v1.w);  w2.set(m_v2.w);  w3.set(m_v3.w);  e12.set(w2).subLocal(w1);  float w1e12=Vec2.dot(w1,e12);  float w2e12=Vec2.dot(w2,e12);  float d12_1=w2e12;  float d12_2=-w1e12;  e13.set(w3).subLocal(w1);  float w1e13=Vec2.dot(w1,e13);  float w3e13=Vec2.dot(w3,e13);  float d13_1=w3e13;  float d13_2=-w1e13;  e23.set(w3).subLocal(w2);  float w2e23=Vec2.dot(w2,e23);  float w3e23=Vec2.dot(w3,e23);  float d23_1=w3e23;  float d23_2=-w2e23;  float n123=Vec2.cross(e12,e13);  float d123_1=n123 * Vec2.cross(w2,w3);  float d123_2=n123 * Vec2.cross(w3,w1);  float d123_3=n123 * Vec2.cross(w1,w2);  if (d12_2 <= 0.0f && d13_2 <= 0.0f) {    m_v1.a=1.0f;    m_count=1;    return;  }  if (d12_1 > 0.0f && d12_2 > 0.0f && d123_3 <= 0.0f) {    float inv_d12=1.0f / (d12_1 + d12_2);    m_v1.a=d12_1 * inv_d12;    m_v2.a=d12_2 * inv_d12;    m_count=2;    return;  }  if (d13_1 > 0.0f && d13_2 > 0.0f && d123_2 <= 0.0f) {    float inv_d13=1.0f / (d13_1 + d13_2);    m_v1.a=d13_1 * inv_d13;    m_v3.a=d13_2 * inv_d13;    m_count=2;    m_v2.set(m_v3);    return;  }  if (d12_1 <= 0.0f && d23_2 <= 0.0f) {    m_v2.a=1.0f;    m_count=1;    m_v1.set(m_v2);    return;  }  if (d13_1 <= 0.0f && d23_1 <= 0.0f) {    m_v3.a=1.0f;    m_count=1;    m_v1.set(m_v3);    return;  }  if (d23_1 > 0.0f && d23_2 > 0.0f && d123_1 <= 0.0f) {    float inv_d23=1.0f / (d23_1 + d23_2);    m_v2.a=d23_1 * inv_d23;    m_v3.a=d23_2 * inv_d23;    m_count=2;    m_v1.set(m_v3);    return;  }  float inv_d123=1.0f / (d123_1 + d123_2 + d123_3);  m_v1.a=d123_1 * inv_d123;  m_v2.a=d123_2 * inv_d123;  m_v3.a=d123_3 * inv_d123;  m_count=3;}  }
class C{  public OnePointCrossover(double probability){  this.probability=probability;}  }
class C{  public HttpResponse head(String path,ParameterMap params){  return execute(new HttpHead(path,params));}  }
class C{  public int size(){  return this.list.size();}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int realPosition=getCurrentItem();  int realCount;  if (adapter == null || (realCount=getRealCount()) <= 1) {    return;  }  if (reverseDirection) {    if (direction == RIGHT && realPosition + 1 >= realCount) {      direction=LEFT;    } else     if (direction == LEFT && realPosition - 1 < 0) {      direction=RIGHT;    }  }  if (isLooping()) {    setCurrentItem(direction == LEFT ? (realPosition - 1) % getCount() : (realPosition + 1) % getCount(),true);  } else {    int nextItem=(direction == LEFT) ? --realPosition : ++realPosition;    if (nextItem < 0) {      setCurrentItem(realCount - 1,true);    } else     if (nextItem == realCount) {      setCurrentItem(0,true);    } else {      setCurrentItem(nextItem,true);    }  }}  }
class C{  public static float rad(float v,short unit){switch (unit) {case SVGAngle.SVG_ANGLETYPE_RAD:    return v;case SVGAngle.SVG_ANGLETYPE_GRAD:  return (float)Math.PI * v / 200;default :return (float)Math.PI * v / 180;}}  }
class C{  public void updateRoleMap(String relationId,Role newRole,List<ObjectName> oldValue) throws IllegalArgumentException, RelationServiceNotRegisteredException, RelationNotFoundException {  if (relationId == null || newRole == null || oldValue == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"updateRoleMap",new Object[]{relationId,newRole,oldValue});  isActive();  Object result=getRelation(relationId);  String roleName=newRole.getRoleName();  List<ObjectName> newRoleValue=newRole.getRoleValue();  List<ObjectName> oldRoleValue=new ArrayList<ObjectName>(oldValue);  List<ObjectName> newRefList=new ArrayList<ObjectName>();  for (  ObjectName currObjName : newRoleValue) {    int currObjNamePos=oldRoleValue.indexOf(currObjName);    if (currObjNamePos == -1) {      boolean isNewFlag=addNewMBeanReference(currObjName,relationId,roleName);      if (isNewFlag) {        newRefList.add(currObjName);      }    } else {      oldRoleValue.remove(currObjNamePos);    }  }  List<ObjectName> obsRefList=new ArrayList<ObjectName>();  for (  ObjectName currObjName : oldRoleValue) {    boolean noLongerRefFlag=removeMBeanReference(currObjName,relationId,roleName,false);    if (noLongerRefFlag) {      obsRefList.add(currObjName);    }  }  updateUnregistrationListener(newRefList,obsRefList);  RELATION_LOGGER.exiting(RelationService.class.getName(),"updateRoleMap");  return;}  }
class C{  public ExtensionFileFilter(String extension,String description){  m_Extension=new String[1];  m_Extension[0]=extension;  m_Description=description;}  }
class C{  @Override public boolean needsMaterialization(){  return false;}  }
class C{  public void close() throws IOException {  _next.close();}  }
class C{  public static void putAt(MutableTreeNode self,int index,MutableTreeNode node){  self.insert(node,index);}  }
class C{  public void flushBuffer() throws IOException {  if (this.buffer == null)   return;  Iterator<Map.Entry<byte[],byte[]>> i=this.buffer.entrySet().iterator();  int l=0;  while (i.hasNext())   l+=i.next().getValue().length;  assert l == this.buffersize;  int posBuffer=0;  Map.Entry<byte[],byte[]> entry;  byte[] key, blob;synchronized (this) {    super.deleteFingerprint();  }  i=this.buffer.entrySet().iterator();  final long pos=this.file.length();  long posFile=pos;  posBuffer=0;  byte[] ba=new byte[l + (4 + this.keylength) * this.buffer.size()];  byte[] b;  SortedMap<byte[],byte[]> nextBuffer=new TreeMap<byte[],byte[]>(this.ordering);  flush:   while (i.hasNext()) {    entry=i.next();    key=normalizeKey(entry.getKey());    blob=entry.getValue();    try {      this.index.put(key,posFile);    } catch (    final SpaceExceededException e) {      nextBuffer.put(entry.getKey(),blob);      continue flush;    }    b=AbstractWriter.int2array(this.keylength + blob.length);    assert b.length == 4;    assert posBuffer + 4 < ba.length : "posBuffer = " + posBuffer + ", ba.length = "+ ba.length;    System.arraycopy(b,0,ba,posBuffer,4);    assert posBuffer + 4 + key.length <= ba.length : "posBuffer = " + posBuffer + ", key.length = "+ key.length+ ", ba.length = "+ ba.length;    System.arraycopy(key,0,ba,posBuffer + 4,key.length);    assert posBuffer + 4 + key.length+ blob.length <= ba.length : "posBuffer = " + posBuffer + ", key.length = "+ key.length+ ", blob.length = "+ blob.length+ ", ba.length = "+ ba.length;    System.arraycopy(blob,0,ba,posBuffer + 4 + this.keylength,blob.length);    posFile+=4 + this.keylength + blob.length;    posBuffer+=4 + this.keylength + blob.length;  }  assert ba.length == posBuffer;  this.file.seek(pos);  this.file.write(ba);  this.buffer.clear();  this.buffer.putAll(nextBuffer);  this.buffersize=0;}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  baselineLayout(targetSpan,axis,offsets,spans);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public ColorGradient(){  gradient=new TreeSet<GradPoint>();}  }
class C{  public static long convertAmount(double exchangeRate,String sourceCurrencyCode,long sourceAmount,String targetCurrencyCode){  if (targetCurrencyCode.equals(sourceCurrencyCode)) {    return sourceAmount;  }  int sourceFractionDigits=Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();  Currency targetCurrency=Currency.getInstance(targetCurrencyCode);  int targetFractionDigits=targetCurrency.getDefaultFractionDigits();  return convertAmount(exchangeRate,sourceFractionDigits,sourceAmount,targetFractionDigits);}  }
class C{  public final LongUpdater reserveLong(){  if (this.ignoreWrites)   return null;  checkIfWritable();  ensureCapacity(8);  LongUpdater result=new LongUpdater(this.buffer);  buffer.putLong(0L);  return result;}  }
class C{  private static boolean updateComponent(TopologyAPI.Component.Builder compBuilder,String componentName,int parallelism){  for (  Map.Entry<Descriptors.FieldDescriptor,Object> entry : compBuilder.getAllFields().entrySet()) {    if (entry.getKey().getName().equals("name") && componentName.equals(entry.getValue())) {      TopologyAPI.Config.Builder confBuilder=compBuilder.getConfigBuilder();      boolean keyFound=false;      for (      TopologyAPI.Config.KeyValue.Builder kvBuilder : confBuilder.getKvsBuilderList()) {        if (kvBuilder.getKey().equals(com.twitter.heron.api.Config.TOPOLOGY_COMPONENT_PARALLELISM)) {          kvBuilder.setValue(Integer.toString(parallelism));          keyFound=true;          break;        }      }      if (!keyFound) {        TopologyAPI.Config.KeyValue.Builder kvBuilder=TopologyAPI.Config.KeyValue.newBuilder();        kvBuilder.setKey(com.twitter.heron.api.Config.TOPOLOGY_COMPONENT_PARALLELISM);        kvBuilder.setValue(Integer.toString(parallelism));        confBuilder.addKvs(kvBuilder);      }      return true;    }  }  return false;}  }
class C{  public void sendRequest(){  if (service == null) {    service=new RSSService(url,limit);    if (iconPlaceholder != null) {      service.setIconPlaceholder(iconPlaceholder);    }    service.addResponseListener(new EventHandler());    if (blockList) {      Progress p=new Progress(progressTitle,service,displayProgressPercentage);      p.setAutoShow(true);      p.setDisposeOnCompletion(true);    }    setHint(progressTitle);    NetworkManager.getInstance().addToQueue(service);  }}  }
class C{  @Deprecated public static GcSession initWithClientSessionId(String clientSessionId,String customerId,Region region,EnvironmentType environment){  if (clientSessionId == null) {    throw new InvalidParameterException("Error creating GcSession, clientSessionId may not be null");  }  if (customerId == null) {    throw new InvalidParameterException("Error creating GcSession, customerId may not be null");  }  if (region == null) {    throw new InvalidParameterException("Error creating GcSession, region may not be null");  }  if (environment == null) {    throw new InvalidParameterException("Error creating GcSession, environment may not be null");  }  return initSession(clientSessionId,customerId,region,environment,null,null);}  }
class C{  public BasicSessionCache(){  this(DEFAULT_CAPACITY);}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public int loadInstruction8(int addr){  return executableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)] & 0xFF;}  }
class C{  static public float angleBetween(PVector v1,PVector v2){  if (v1.x == 0 && v1.y == 0)   return 0.0f;  if (v2.x == 0 && v2.y == 0)   return 0.0f;  double dot=v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;  double v1mag=Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);  double v2mag=Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);  double amt=dot / (v1mag * v2mag);  if (amt <= -1) {    return PConstants.PI;  } else   if (amt >= 1) {    return 0;  }  return (float)Math.acos(amt);}  }
class C{  public final double SFMeanSchemeEntropy(){  if (!m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return m_SumSchemeEntropy / (m_WithClass - m_Unclassified);}  }
class C{  public void update(byte b){  digest.update(b);}  }
class C{  public void removeAll(@NonNull Jedis jedis,@NonNull String serverId) throws ProcessingException {  try {    jedis.hgetAll(RedisKeys.WORLD_REPO.toString()).entrySet().stream().filter(null).forEach(null);    jedis.publish(RedisKeys.IDENTIFY.toString(),"WORLD\000SERVER\000" + serverId + "\000UPDATED");  } catch (  Exception ex) {    throw new ProcessingException("There was an error removing server \"" + serverId + "\"!",ex);  }}  }
class C{  public Instances testCV(int numFolds,int numFold){  int numInstForFold, first, offset;  Instances test;  if (numFolds < 2) {    throw new IllegalArgumentException("Number of folds must be at least 2!");  }  if (numFolds > numInstances()) {    throw new IllegalArgumentException("Can't have more folds than instances!");  }  numInstForFold=numInstances() / numFolds;  if (numFold < numInstances() % numFolds) {    numInstForFold++;    offset=numFold;  } else {    offset=numInstances() % numFolds;  }  test=new Instances(this,numInstForFold);  first=numFold * (numInstances() / numFolds) + offset;  copyInstances(first,test,numInstForFold);  return test;}  }
class C{  public static void deleteAllHosts(){  deleteAllHosts(UserHandle.myUserId());}  }
class C{  private static Map<QName,AttributeKey<?>> unionAttributes(Schema schema,ElementTransform transform){  Map<QName,AttributeKey<?>> union=Maps.newLinkedHashMap();  Set<QName> base=getAttributeNames(transform);  Set<QName> invalid=Sets.newHashSet();  for (  ElementKey<?,?> adaptorKey : transform.getAdaptations().values()) {    ElementTransform adaptor=schema.getTransform(null,adaptorKey,null);    if (adaptor == null) {      throw new IllegalStateException("Invalid adaptor key " + adaptorKey);    }    for (    AttributeInfo info : adaptor.getAttributes().values()) {      AttributeKey<?> key=info.key;      QName id=key.getId();      if (base.contains(id)) {        continue;      }      if (invalid.contains(id)) {        continue;      }      AttributeKey<?> existing=union.get(id);      if (existing != null) {        if (!checkCompatible(existing,key)) {          union.remove(id);          invalid.add(id);        }      } else {        union.put(id,key);      }    }  }  return ImmutableMap.copyOf(union);}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public static final String moveToUCIString(Move m){  String ret=squareToString(m.from);  ret+=squareToString(m.to);switch (m.promoteTo) {case Piece.WQUEEN:case Piece.BQUEEN:    ret+="q";  break;case Piece.WROOK:case Piece.BROOK:ret+="r";break;case Piece.WBISHOP:case Piece.BBISHOP:ret+="b";break;case Piece.WKNIGHT:case Piece.BKNIGHT:ret+="n";break;default :break;}return ret;}  }
class C{  public final void add(float scalar,Matrix4f m1){  this.m00=m1.m00 + scalar;  this.m01=m1.m01 + scalar;  this.m02=m1.m02 + scalar;  this.m03=m1.m03 + scalar;  this.m10=m1.m10 + scalar;  this.m11=m1.m11 + scalar;  this.m12=m1.m12 + scalar;  this.m13=m1.m13 + scalar;  this.m20=m1.m20 + scalar;  this.m21=m1.m21 + scalar;  this.m22=m1.m22 + scalar;  this.m23=m1.m23 + scalar;  this.m30=m1.m30 + scalar;  this.m31=m1.m31 + scalar;  this.m32=m1.m32 + scalar;  this.m33=m1.m33 + scalar;}  }
class C{  protected VariableRefImpl(){  super();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:07.516 -0500",hash_original_method="8F260F0099582263F775831BBCA28C0F",hash_generated_method="28483A73600FD1618D2907A401199D2D") public char next(){  if (offset >= (end - 1)) {    offset=end;    return DONE;  }  return string.charAt(++offset);}  }
class C{  @Override public void onCollideWithPlayer(EntityPlayer entityIn){  if (!this.worldObj.isRemote && this.canBePickedUp) {    ItemStack itemstack=this.getEntityItem();    int i=itemstack.stackSize;    if (i <= 0 || entityIn.inventory.addItemStackToInventory(itemstack)) {      if (!this.isSilent()) {        this.worldObj.playSound((EntityPlayer)null,entityIn.posX,entityIn.posY,entityIn.posZ,SoundEvents.ENTITY_ITEM_PICKUP,SoundCategory.PLAYERS,0.2F,((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);      }      entityIn.onItemPickup(this,i);      if (!this.worldObj.isRemote) {        EntityTracker entitytracker=((WorldServer)this.worldObj).getEntityTracker();        entitytracker.sendToAllTrackingEntity(this,new SPacketCollectItem(this.getEntityId(),entityIn.getEntityId()));      }      if (itemstack.stackSize <= 0) {        this.setDead();      }      entityIn.addStat(StatList.getObjectsPickedUpStats(itemstack.getItem()),i);    }  }}  }
class C{  private Map<String,JobQueue> groupJobsByContext(List<JobAnnotatedClass> jobAnnotatedClasses) throws NoRootsException, MultipleRootsException, CyclicReferenceException {  Map<String,JobQueue> groupedJobQueues=new LinkedHashMap<>();  for (  JobAnnotatedClass jobAnnotatedClass : jobAnnotatedClasses) {    List<RuleDataModel> currentJobRules=jobAnnotatedClass.getRules();    for (    RuleDataModel rule : currentJobRules) {      JobQueue queueForThisJob;      if (groupedJobQueues.containsKey(rule.getContext())) {        queueForThisJob=groupedJobQueues.get(rule.getContext());      } else {        queueForThisJob=new JobQueue(rule.getContext());      }      queueForThisJob.addJob(new JobDataModel(jobAnnotatedClass,rule.getContext()));      groupedJobQueues.put(rule.getContext(),queueForThisJob);    }  }  return groupedJobQueues;}  }
class C{  public PeriodType withMillisRemoved(){  return withFieldRemoved(7,"NoMillis");}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public <T>T deserialize(Input in,Type target){  byte type=in.readDataType();  while (type == DataTypes.CORE_SKIP) {    type=in.readDataType();  }  Object result;switch (type) {case DataTypes.CORE_NULL:    result=in.readNull(target);  break;case DataTypes.CORE_BOOLEAN:result=in.readBoolean(target);break;case DataTypes.CORE_NUMBER:result=in.readNumber(target);break;case DataTypes.CORE_STRING:if (target != null && ((Class)target).isEnum()) {log.warn("Enum target specified");String name=in.readString(target);result=Enum.valueOf((Class)target,name);} else {result=in.readString(target);}break;case DataTypes.CORE_DATE:result=in.readDate(target);break;case DataTypes.CORE_ARRAY:result=in.readArray(this,target);break;case DataTypes.CORE_MAP:result=in.readMap(this,target);break;case DataTypes.CORE_XML:result=in.readXML(target);break;case DataTypes.CORE_OBJECT:result=in.readObject(this,target);break;case DataTypes.CORE_BYTEARRAY:result=in.readByteArray(target);break;case DataTypes.CORE_VECTOR_INT:result=in.readVectorInt();break;case DataTypes.CORE_VECTOR_UINT:result=in.readVectorUInt();break;case DataTypes.CORE_VECTOR_NUMBER:result=in.readVectorNumber();break;case DataTypes.CORE_VECTOR_OBJECT:result=in.readVectorObject();break;case DataTypes.OPT_REFERENCE:result=in.readReference(target);break;default :result=in.readCustom(target);break;}return (T)postProcessExtension(result,target);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.086 -0400",hash_original_method="31AD7988DC6C484C1191489DC59E082D",hash_generated_method="FFE848F30B13C91D22B81735BFBF10C0") public byte[] evaluateChallenge(byte[] challenge) throws SaslException {  byte[] response=null;switch (m_state) {case STATE_INITIAL:    if (challenge.length == 0)     throw new SaslException("response = byte[0]"); else     try {      response=createDigestResponse(challenge).getBytes("UTF-8");      m_state=STATE_DIGEST_RESPONSE_SENT;    } catch (    java.io.UnsupportedEncodingException e) {      throw new SaslException("UTF-8 encoding not suppported by platform",e);    }  break;case STATE_DIGEST_RESPONSE_SENT:if (checkServerResponseAuth(challenge)) m_state=STATE_VALID_SERVER_RESPONSE; else {  m_state=STATE_INVALID_SERVER_RESPONSE;  throw new SaslException("Could not validate response-auth " + "value from server");}break;case STATE_VALID_SERVER_RESPONSE:case STATE_INVALID_SERVER_RESPONSE:throw new SaslException("Authentication sequence is complete");case STATE_DISPOSED:throw new SaslException("Client has been disposed");default :throw new SaslException("Unknown client state.");}return response;}  }
class C{  private boolean evenOutTabs(float amount,boolean allowReverseDirection){  if (mStackTabs == null || mOverviewAnimationType != OverviewAnimationType.NONE || mEvenOutProgress >= 1.0f || amount == 0) {    return false;  }  boolean changed=false;  boolean reverseScrolling=false;  float absoluteProgress=Math.min(Math.abs(amount) * mEvenOutRate,1.0f - mEvenOutProgress);  float relativeProgress=absoluteProgress / (1.0f - mEvenOutProgress);  float screenMax=getScrollDimensionSize();  for (int i=0; i < mStackTabs.length; ++i) {    float source=mStackTabs[i].getScrollOffset();    float target=screenToScroll(i * mSpacing);    float sourceScreen=Math.min(screenMax,scrollToScreen(source + mScrollTarget));    float targetScreen=Math.min(screenMax,scrollToScreen(target + mScrollTarget));    if (sourceScreen == targetScreen) {      mStackTabs[i].setScrollOffset(target);      continue;    }    float step=source + (target - source) * relativeProgress;    float stepScreen=Math.min(screenMax,scrollToScreen(step + mScrollTarget));    if (sourceScreen == stepScreen) {      mStackTabs[i].setScrollOffset(step);      continue;    }    if ((targetScreen - sourceScreen) * amount > 0 || allowReverseDirection) {      mStackTabs[i].setScrollOffset(step);      changed=true;    } else {      reverseScrolling=true;    }  }  if (!reverseScrolling) {    mEvenOutProgress+=absoluteProgress;  }  return changed;}  }
class C{  @Deprecated public static ProcessBackgroundImage lookupBackgroundImage(ExecutionUnit process){  return BackgroundImageProcessXMLFilter.lookupBackgroundImage(process);}  }
class C{  public static boolean isThreadingEnabled(){  return isThreadingEnabled;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.524 -0500",hash_original_method="85EDDF72490A9BF1E58EACB23506A0DF",hash_generated_method="D3EF5707B9CCEF81D998C8F2A719679C") protected static void resetLockedMeta(Spannable content){  resetLock(content,CAP);  resetLock(content,ALT);  resetLock(content,SYM);  resetLock(content,SELECTING);}  }
class C{  public void test_setByteLjava_lang_ObjectB() throws Exception {  TestField x=new TestField();  Field f=null;  byte val=0;  try {    f=x.getClass().getDeclaredField("byteField");    f.setByte(x,(byte)1);    val=f.getByte(x);  } catch (  Exception e) {    fail("Exception during setByte test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",1,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setByte(x,Byte.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("bytePFField");    assertFalse(f.isAccessible());    f.setByte(x,Byte.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("byteField");    f.setByte(null,Byte.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("byteSField");  f.setByte(null,Byte.MIN_VALUE);  val=f.getByte(x);  assertEquals("Returned incorrect byte field value",Byte.MIN_VALUE,val);}  }
class C{  protected Node newNode(){  return new SVGOMSymbolElement();}  }
class C{  public Field copyField(Field arg){  return langReflectAccess().copyField(arg);}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public static FunctionScoreQueryBuilder functionScoreQuery(ScoreFunctionBuilder function){  return new FunctionScoreQueryBuilder(function);}  }
class C{  public boolean visit(LabeledStatement node){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.ENUM_LITERAL;}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Day) {    Day d=(Day)o1;    result=-d.getSerialDate().compare(this.serialDate);  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing text: \"" + iterator+ "\" at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawString(iterator,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawString(iterator,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawString(iterator,x,y);}  }
class C{  public ActiveInstances remove(int key){  Advice[] extractedInstances=new Advice[instances.length];  int[] extractedKeys=new int[keys.length];  int count=0;  for (int i=0; i < keys.length; i++) {    if (keys[i] != key) {      extractedInstances[count]=instances[i];      extractedKeys[count]=keys[i];      count++;    }  }  Advice[] newInstances=new Advice[count];  int[] newKeys=new int[count];  System.arraycopy(extractedInstances,0,newInstances,0,count);  System.arraycopy(extractedKeys,0,newKeys,0,count);  return new ActiveInstances(newInstances,newKeys);}  }
class C{  public static <T>Set<T> arrayToSet(T... array){  return new HashSet<T>(arrayToList(array));}  }
class C{  public float angleBetween(Vector2f otherVector){  float angle=FastMath.atan2(otherVector.y,otherVector.x) - FastMath.atan2(y,x);  return angle;}  }
class C{  public static Optional<IRI> predicate(Model m){  return m.stream().map(null).findAny();}  }
class C{  public ElementRule(String name,Class type,String description,int min,int max){  this.name=name;  this.description=description;  this.rules=new XMLSyntaxRule[]{new ElementRule(type)};  this.min=min;  this.max=max;}  }
class C{  public void computeKey(Envelope itemEnv){  level=computeQuadLevel(itemEnv);  env=new Envelope();  computeKey(level,itemEnv);  while (!env.contains(itemEnv)) {    level+=1;    computeKey(level,itemEnv);  }}  }
class C{  public static void publishData(int numMessages,int delayInMillis) throws IOException {  List<PubsubMessage> pubsubMessages=new ArrayList<>();  for (int i=0; i < Math.max(1,numMessages); i++) {    Long currTime=System.currentTimeMillis();    String message=generateEvent(currTime,delayInMillis);    PubsubMessage pubsubMessage=new PubsubMessage().encodeData(message.getBytes("UTF-8"));    pubsubMessage.setAttributes(ImmutableMap.of(TIMESTAMP_ATTRIBUTE,Long.toString((currTime - delayInMillis) / 1000 * 1000)));    if (delayInMillis != 0) {      System.out.println(pubsubMessage.getAttributes());      System.out.println("late data for: " + message);    }    pubsubMessages.add(pubsubMessage);  }  PublishRequest publishRequest=new PublishRequest();  publishRequest.setMessages(pubsubMessages);  pubsub.projects().topics().publish(topic,publishRequest).execute();}  }
class C{  public static BigInteger factorial(BigInteger n){  if (n.equals(BigInteger.ZERO))   return BigInteger.ONE; else   return n.multiply(factorial(n.subtract(BigInteger.ONE)));}  }
class C{  public TypeDeclaration declarationOfType(char[][] typeName){  int typeNameLength=typeName.length;  if (typeNameLength < 1 || !CharOperation.equals(typeName[0],this.name)) {    return null;  }  if (typeNameLength == 1) {    return this;  }  char[][] subTypeName=new char[typeNameLength - 1][];  System.arraycopy(typeName,1,subTypeName,0,typeNameLength - 1);  for (int i=0; i < this.memberTypes.length; i++) {    TypeDeclaration typeDecl=this.memberTypes[i].declarationOfType(subTypeName);    if (typeDecl != null) {      return typeDecl;    }  }  return null;}  }
class C{  public void add(boolean v){  _add(booleanNode(v));}  }
class C{  public static Network createOrthogonalDistanceTestNetwork(){  double freespeed=2.7;  double capacity=500.;  double numLanes=1.;  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)500,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)0,(double)0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)0,(double)375));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)500,(double)375));  Node node5=NetworkUtils.createAndAddNode(network,Id.create(5,Node.class),new Coord((double)1000,(double)375));  final Node fromNode=node1;  final Node toNode=node2;  final double freespeed1=freespeed;  final double capacity1=capacity;  final double numLanes1=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,(double)500,freespeed1,capacity1,numLanes1);  final Node fromNode1=node2;  final Node toNode1=node1;  final double freespeed2=freespeed;  final double capacity2=capacity;  final double numLanes2=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,(double)500,freespeed2,capacity2,numLanes2);  final Node fromNode2=node1;  final Node toNode2=node3;  final double freespeed3=freespeed;  final double capacity3=capacity;  final double numLanes3=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,(double)625,freespeed3,capacity3,numLanes3);  final Node fromNode3=node3;  final Node toNode3=node1;  final double freespeed4=freespeed;  final double capacity4=capacity;  final double numLanes4=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,(double)625,freespeed4,capacity4,numLanes4);  final Node fromNode4=node1;  final Node toNode4=node4;  final double freespeed5=freespeed;  final double capacity5=capacity;  final double numLanes5=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(5,Link.class),fromNode4,toNode4,(double)375,freespeed5,capacity5,numLanes5);  final Node fromNode5=node4;  final Node toNode5=node1;  final double freespeed6=freespeed;  final double capacity6=capacity;  final double numLanes6=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(6,Link.class),fromNode5,toNode5,(double)375,freespeed6,capacity6,numLanes6);  final Node fromNode6=node4;  final Node toNode6=node5;  final double freespeed7=freespeed;  final double capacity7=capacity;  final double numLanes7=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(7,Link.class),fromNode6,toNode6,(double)500,freespeed7,capacity7,numLanes7);  final Node fromNode7=node5;  final Node toNode7=node4;  final double freespeed8=freespeed;  final double capacity8=capacity;  final double numLanes8=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(8,Link.class),fromNode7,toNode7,(double)500,freespeed8,capacity8,numLanes8);  return network;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.457 -0500",hash_original_method="DEBABCFB0D5C81DCE0E37961227F43C9",hash_generated_method="259E44B8B64C1FF49A2A2EC42CFB5CBE") @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public static MemberValue createMemberValue(ConstPool cp,CtClass type) throws NotFoundException {  if (type == CtClass.booleanType)   return new BooleanMemberValue(cp); else   if (type == CtClass.byteType)   return new ByteMemberValue(cp); else   if (type == CtClass.charType)   return new CharMemberValue(cp); else   if (type == CtClass.shortType)   return new ShortMemberValue(cp); else   if (type == CtClass.intType)   return new IntegerMemberValue(cp); else   if (type == CtClass.longType)   return new LongMemberValue(cp); else   if (type == CtClass.floatType)   return new FloatMemberValue(cp); else   if (type == CtClass.doubleType)   return new DoubleMemberValue(cp); else   if (type.getName().equals("java.lang.Class"))   return new ClassMemberValue(cp); else   if (type.getName().equals("java.lang.String"))   return new StringMemberValue(cp); else   if (type.isArray()) {    CtClass arrayType=type.getComponentType();    MemberValue member=createMemberValue(cp,arrayType);    return new ArrayMemberValue(member,cp);  } else   if (type.isInterface()) {    Annotation info=new Annotation(cp,type);    return new AnnotationMemberValue(info,cp);  } else {    EnumMemberValue emv=new EnumMemberValue(cp);    emv.setType(type.getName());    return emv;  }}  }
class C{  private int[][] minimizeCrossings(boolean reversed,int nodeLevels[][]){  if (reversed == false) {    for (int times=0; times < 1; times++) {      int tempLevels[][]=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=0; i < nodeLevels.length - 1; i++) {        phaseID(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=nodeLevels.length - 2; i >= 0; i--) {        phaseIU(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=0; i < nodeLevels.length - 1; i++) {        phaseIID(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=nodeLevels.length - 2; i >= 0; i--) {        phaseIIU(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }    }    return nodeLevels;  } else {    for (int times=0; times < 1; times++) {      int tempLevels[][]=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=nodeLevels.length - 2; i >= 0; i--) {        phaseIU(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=0; i < nodeLevels.length - 1; i++) {        phaseID(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=nodeLevels.length - 2; i >= 0; i--) {        phaseIIU(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }      tempLevels=new int[nodeLevels.length][];      copy2DArray(nodeLevels,tempLevels);      for (int i=0; i < nodeLevels.length - 1; i++) {        phaseIID(i,tempLevels);      }      if (crossings(tempLevels) < crossings(nodeLevels)) {        nodeLevels=tempLevels;      }    }    return nodeLevels;  }}  }
class C{  public DateTimeComponents(DateTimeComponents original,Integer year,Integer month,Integer date,Integer hour,Integer minute,Integer second,Boolean utc){  this((year == null) ? original.year : year,(month == null) ? original.month : month,(date == null) ? original.date : date,(hour == null) ? original.hour : hour,(minute == null) ? original.minute : minute,(second == null) ? original.second : second,(utc == null) ? original.utc : utc);}  }
class C{  public boolean hasKey1(){  return fieldSetFlags()[0];}  }
class C{  private void initMasterData() throws NonUniqueBusinessKeyException, ObjectNotFoundException {  SupportedCurrency sc=new SupportedCurrency();  sc.setCurrency(Currency.getInstance("EUR"));  mgr.persist(sc);  supplier=Organizations.createOrganization(mgr,OrganizationRoleType.SUPPLIER,OrganizationRoleType.TECHNOLOGY_PROVIDER);  supplierAdminUser=Organizations.createUserForOrg(mgr,supplier,true,"admin");  TechnicalProduct product1=TechnicalProducts.createTechnicalProduct(mgr,supplier,"technialproduct1",false,ServiceAccessType.LOGIN);  product1.setAllowingOnBehalfActing(true);  prepareTechnicalProduct(product1);  testPrdOnbehalf=createProductsFor(supplier,product1,1).get(0);  TechnicalProduct product2=TechnicalProducts.createTechnicalProduct(mgr,supplier,"technialproduct2",false,ServiceAccessType.LOGIN);  product2.setAllowingOnBehalfActing(true);  prepareTechnicalProduct(product2);  testPrd2Onbehalf=createProductsFor(supplier,product2,1).get(0);  TechnicalProduct product3=TechnicalProducts.createTechnicalProduct(mgr,supplier,"technialproduct3",false,ServiceAccessType.LOGIN);  product3.setAllowingOnBehalfActing(false);  prepareTechnicalProduct(product3);  testPrd=createProductsFor(supplier,product3,1).get(0);  TechnicalProduct product4=TechnicalProducts.createTechnicalProduct(mgr,supplier,"technialproduct4",true,ServiceAccessType.LOGIN);  product4.setAllowingOnBehalfActing(false);  prepareTechnicalProduct(product4);  createProductsFor(supplier,product4,1).get(0);}  }
class C{  public void show(){  mDialog.show();  mUsernameView.requestFocus();}  }
class C{  @Override public void onProgressChanged(WebView view,int newProgress){  Log.i(getName(),"" + newProgress);  if (newProgress == FINISHED && view.getTitle() != null && resourceCallback != null) {    resourceCallback.onTransitionToIdle();  }}  }
class C{  public lalr_item shift() throws internal_error {  lalr_item result;  if (dot_at_end())   throw new internal_error("Attempt to shift past end of an lalr_item");  result=new lalr_item(the_production(),dot_pos() + 1,new terminal_set(lookahead()));  add_propagate(result);  return result;}  }
class C{  public int add(SearchResultDataLine tl,int row){  _numResults+=1;  String sha1=tl.getHash();  if (sha1 != null)   _indexes.put(sha1,new Integer(row));  int addedAt=super.add(tl,row);  remapIndexes(addedAt + 1);  return addedAt;}  }
class C{  public void open(String fileName) throws IOException {  model.setBytes(fileName);}  }
class C{  public boolean hasLineNumberSet(){  retrieveLineNumber();  return lineNumber != -1;}  }
class C{  private void updateDataTableColumns(){  dataTableColumnIdxMap.clear();  for (  SeriesUsageType seriesUsageType : valueSource.getDefinedUsageTypes()) {    DataTableColumn dataTableColumn=valueSource.getDataTableColumn(seriesUsageType);    int columnIdx=DataTableColumn.getColumnIndex(plotInstance.getPlotData().getOriginalDataTable(),dataTableColumn);    dataTableColumnIdxMap.put(seriesUsageType,columnIdx);  }}  }
class C{  public boolean isStayAlive(){  return stayAlive;}  }
class C{  public void synchronize(){  final List<Symbolizer> acquire=new ArrayList<Symbolizer>();  final TextSymbolizer textSym=this.label.get(this.build);  final SimpleFeatureType schema=featureCollection.getSchema();  this.mode=determineMode(schema,true);  String geometryPropertyName=null;  if (geometryName.getCombo().getSelectionIndex() != 0) {    geometryPropertyName=geometryName.getCombo().getText();  }switch (this.mode) {case LINE:{      final LineSymbolizer lineSymbolizer=this.build.createLineSymbolizer(this.line.getStroke(this.build));      acquire.add(lineSymbolizer);      lineSymbolizer.setGeometryPropertyName(geometryPropertyName);      if (textSym != null) {        acquire.add(textSym);      }    }  break;case POLYGON:{  final PolygonSymbolizer polygonSymbolizer=this.build.createPolygonSymbolizer(this.line.getStroke(this.build),this.fill.getFill(this.build));  polygonSymbolizer.setGeometryPropertyName(geometryPropertyName);  acquire.add(polygonSymbolizer);  if (textSym != null) {    acquire.add(textSym);  }}break;case POINT:{final PointSymbolizer pointSymbolizer=this.build.createPointSymbolizer(this.point.getGraphic(this.fill.getFill(this.build),this.line.getStroke(this.build),this.build));pointSymbolizer.setGeometryPropertyName(geometryPropertyName);acquire.add(pointSymbolizer);if (textSym != null) {acquire.add(textSym);}}break;case ALL:{final LineSymbolizer lineSymbolizer=this.build.createLineSymbolizer(this.line.getStroke(this.build));acquire.add(lineSymbolizer);acquire.add(lineSymbolizer);final PolygonSymbolizer polygonSymbolizer=this.build.createPolygonSymbolizer(this.line.getStroke(this.build),this.fill.getFill(this.build));polygonSymbolizer.setGeometryPropertyName(geometryPropertyName);acquire.add(polygonSymbolizer);final PointSymbolizer pointSymbolizer=this.build.createPointSymbolizer(this.point.getGraphic(this.fill.getFill(this.build),this.line.getStroke(this.build),this.build));pointSymbolizer.setGeometryPropertyName(geometryPropertyName);acquire.add(pointSymbolizer);if (textSym != null) {acquire.add(textSym);}}break;case NONE:}final double minScaleDen=minScale.getScale();final double maxScaleDen=maxScale.getScale();final Symbolizer[] array=acquire.toArray(new Symbolizer[acquire.size()]);final Rule rule=this.build.createRule(array);if (minScale.isEnabled()) rule.setMinScaleDenominator(minScaleDen);if (maxScale.isEnabled()) rule.setMaxScaleDenominator(maxScaleDen);final FeatureTypeStyle featureTypeStyle=this.build.createFeatureTypeStyle(SLDs.GENERIC_FEATURE_TYPENAME,rule);featureTypeStyle.setName("simple");final Style style=getStyle();style.setDefault(true);if (replace.getSelection()) {style.featureTypeStyles().clear();style.featureTypeStyles().add(featureTypeStyle);} else {final List<FeatureTypeStyle> fts=style.featureTypeStyles();boolean match=false;for (int i=fts.size() - 1; i > -1; i--) {if (SLDs.isSemanticTypeMatch(fts.get(i),"simple")) {fts.set(i,featureTypeStyle);match=true;break;}}if (match) {style.featureTypeStyles().clear();style.featureTypeStyles().addAll(fts);} else {final List<FeatureTypeStyle> fts2=new ArrayList<FeatureTypeStyle>(fts);Collections.copy(fts2,fts);fts2.add(featureTypeStyle);style.featureTypeStyles().clear();style.featureTypeStyles().addAll(fts2);}}this.style=style;}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  protected ResultPlot createChart(String metric){  if (metric.equals("Approximation Set")) {    return new ApproximationSetPlot(this,metric);  } else {    return new LinePlot(this,metric);  }}  }
class C{  public static URL findConfigInClasspath(){  final ClassLoader loader=LoaderUtil.getThreadContextClassLoader();  for (  final String suffix : SUFFIXES) {    String resource=PREFIX + suffix;    URL url=Loader.getResource(resource,loader);    if (url != null) {      return url;    }  }  return null;}  }
class C{  public MissingArgumentException(Option option){  this("Missing argument for option: " + option.getKey());  this.option=option;}  }
class C{  @Override public void registerPersistentStore(String storeName,Scope scope) throws SyncException {  registerStore(storeName,scope);}  }
class C{  public boolean isApplicationClass(){  return Scene.v().getApplicationClasses().contains(this);}  }
class C{  private void pushMediaButtonReceiver_syncAfRcs(PendingIntent mediaIntent,ComponentName target,IBinder token){  if (!mRCStack.empty() && mRCStack.peek().mMediaIntent.equals(mediaIntent)) {    return;  }  RemoteControlStackEntry rcse=null;  boolean wasInsideStack=false;  try {    for (int index=mRCStack.size() - 1; index >= 0; index--) {      rcse=mRCStack.elementAt(index);      if (rcse.mMediaIntent.equals(mediaIntent)) {        mRCStack.removeElementAt(index);        wasInsideStack=true;        break;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e(TAG,"Wrong index accessing media button stack, lock error? ",e);  }  if (!wasInsideStack) {    rcse=new RemoteControlStackEntry(this,mediaIntent,target,token);  }  mRCStack.push(rcse);  if (target != null) {    mAudioHandler.sendMessage(mAudioHandler.obtainMessage(MSG_PERSIST_MEDIABUTTONRECEIVER,0,0,target));  }}  }
class C{  public ol addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private boolean containsMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    return e != null && Objects.equal(value,e.value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      return Objects.equal(value,e.value);    }  }  return false;}  }
class C{  void truncate(long newLength){  changeLength(newLength);  long end=MathUtils.roundUpLong(newLength,BLOCK_SIZE);  if (end != newLength) {    int lastPage=(int)(newLength >>> BLOCK_SIZE_SHIFT);    expand(lastPage);    ByteBuffer d=data[lastPage];    for (int i=(int)(newLength & BLOCK_SIZE_MASK); i < BLOCK_SIZE; i++) {      d.put(i,(byte)0);    }    if (compress) {      compressLater(lastPage);    }  }}  }
class C{  protected Registration registerTimer(Callable<Task<?>> futureCallable,long dueTime,TimeUnit timeUnit){  return registerTimer(futureCallable,dueTime,0L,timeUnit);}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRef_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void clear(){  rollingBuffer.clear();  needKeyframe=true;  lastReadTimeUs=Long.MIN_VALUE;  spliceOutTimeUs=Long.MIN_VALUE;  largestParsedTimestampUs=Long.MIN_VALUE;}  }
class C{  public void addChild(final TreeNode<ObjectType> child){  m_children.add(child);}  }
class C{  public void log(Table table,short operation,Row row){  if (table.isMVStore()) {    return;  }  if (undoLogEnabled) {    UndoLogRecord log=new UndoLogRecord(table,operation,row);    if (SysProperties.CHECK) {      int lockMode=database.getLockMode();      if (lockMode != Constants.LOCK_MODE_OFF && !database.isMultiVersion()) {        String tableType=log.getTable().getTableType();        if (locks.indexOf(log.getTable()) < 0 && !Table.TABLE_LINK.equals(tableType) && !Table.EXTERNAL_TABLE_ENGINE.equals(tableType)) {          DbException.throwInternalError();        }      }    }    undoLog.add(log);  } else {    if (database.isMultiVersion()) {      ArrayList<Index> indexes=table.getIndexes();      for (int i=0, size=indexes.size(); i < size; i++) {        Index index=indexes.get(i);        index.commit(operation,row);      }      row.commit();    }  }}  }
class C{  public InputFile(File file){  this.file=file;  this.fileName=file.getName();  this.fileID=TelegramBot.getFileManager().getFileID(file);}  }
class C{  public Builder moduleMetadata(Supplier<Collection<ModuleMetadata>> modulesMetadata){  module.modulesMetadata=modulesMetadata;  return this;}  }
class C{  public static TermQueryBuilder termQuery(String name,int value){  return new TermQueryBuilder(name,value);}  }
class C{  public void put(final Resources res,final String key,RecyclingBitmapDrawable bmp,final boolean asPNG){  boolean isDefaultArt=false;  final String cleanKey=sanitizeKey(key);  if (bmp == null) {    bmp=new RecyclingBitmapDrawable(res,mDefaultArt.copy(mDefaultArt.getConfig(),false));    isDefaultArt=true;  }  if (USE_MEMORY_CACHE) {    mMemoryCache.put(cleanKey,bmp);  }  if (!isDefaultArt) {    try {      FileOutputStream out=new FileOutputStream(mCacheDir.getAbsolutePath() + "/" + cleanKey);      Bitmap bitmap=bmp.getBitmap();      boolean shouldRecycle=false;      final float maxSize=800;      if (bitmap.getWidth() > maxSize && bitmap.getHeight() > maxSize) {        float ratio=(bitmap.getWidth() < bitmap.getHeight()) ? bitmap.getWidth() / maxSize : bitmap.getHeight() / maxSize;        final int sWidth=(int)(bitmap.getWidth() / ratio);        final int sHeight=(int)(bitmap.getHeight() / ratio);        bitmap=Bitmap.createScaledBitmap(bitmap,sWidth,sHeight,true);        shouldRecycle=true;        Log.d(TAG,"Rescaled to " + sWidth + "x"+ sHeight);      }      bitmap.compress(asPNG ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG,90,out);      out.close();      if (shouldRecycle) {        bitmap.recycle();      }    } catch (    IOException e) {      Log.e(TAG,"Unable to write the file to cache",e);    }synchronized (mEntries) {      mEntries.add(cleanKey);    }  }}  }
class C{  protected void rehash(){  Object[] oldObjsTable=objs;  int[] oldIntsTable=ints;  int oldCapacity=oldObjsTable.length;  int newCapacity=oldCapacity << 1;  Object[] newObjTable=new Object[newCapacity];  int[] newIntTable=new int[newCapacity];  int newMask=newCapacity - 1;  objs=newObjTable;  ints=newIntTable;  mask=newMask;  num_bindings=0;  Object key;  for (int i=oldIntsTable.length; --i >= 0; ) {    key=oldObjsTable[i];    if (key != null && key != DELETED)     putAtIndex(key,oldIntsTable[i],lookup(key,hash(key)));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.241 -0500",hash_original_method="AC7EB2A7C3E5842E27808853E2EADEA4",hash_generated_method="44456C6BF706ECFB0C03BC0F795D21B1") final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  @Override public boolean queueBuild(final Shell shell,final IBuildDefinition buildDefinition,final String buildDefinitionURI,final String shelvesetName,final String gatedCheckinTicket){  final IBuildRequest request=buildDefinition.createBuildRequest();  request.setReason(BuildReason.CHECK_IN_SHELVESET);  request.setShelvesetName(shelvesetName);  request.setGatedCheckInTicket(gatedCheckinTicket);  request.setBuildDefinitionURI(buildDefinitionURI);  final QueueBuildCommand command=new QueueBuildCommand(request);  final ICommandExecutor commandExecutor=UICommandExecutorFactory.newUICommandExecutor(shell);  final IStatus status=commandExecutor.execute(command);  if (status.getSeverity() == IStatus.OK) {    queuedBuild=command.getQueuedBuild();    final TFSTeamProjectCollection collection=buildDefinition.getBuildServer().getConnection();    final TFSServer server=TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().getServer(collection);    server.getBuildStatusManager().addWatchedBuild(queuedBuild);    return true;  }  return false;}  }
class C{  public static DeleteSessionsForSessionIdResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteSessionsForSessionIdResponse object=new DeleteSessionsForSessionIdResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteSessionsForSessionIdResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteSessionsForSessionIdResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public ObjectNode remove(Collection<String> fieldNames){  if (_children != null) {    for (    String fieldName : fieldNames) {      _children.remove(fieldName);    }  }  return this;}  }
class C{  public String alleleStr(int alleleId){  if (alleleId < 0) {    return VcfUtils.MISSING_FIELD;  }  final Allele a=allele(alleleId);  if (a == null) {    return "*";  }  String pos="";  if (a.getStart() != getStart() || a.getEnd() != getEnd()) {    pos="<" + (a.getStart() + 1) + "-"+ (a.getEnd() + 1)+ ">";  }  return pos + DnaUtils.bytesToSequenceIncCG(a.nt());}  }
class C{  public DirectedGraphIterator(Graph graph){  graph=new EdgeListGraph(graph);  List<Edge> undirectedEdges=new ArrayList<>();  for (  Edge edge : graph.getEdges()) {    if (Edges.isUndirectedEdge(edge)) {      undirectedEdges.add(edge);    }  }  int[] dims=new int[undirectedEdges.size()];  for (int i=0; i < undirectedEdges.size(); i++) {    dims[i]=2;  }  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    for (int k=0; k < combination.length; k++) {      Edge edge=undirectedEdges.get(k);      graph.removeEdge(edge.getNode1(),edge.getNode2());      if (combination[k] == 0) {        graph.addDirectedEdge(edge.getNode1(),edge.getNode2());      } else {        graph.addDirectedEdge(edge.getNode2(),edge.getNode1());      }    }    this.graphs.add(new EdgeListGraph(graph));  }  System.out.println("# directed graphs = " + graphs.size());}  }
class C{  public Validator(ValidationConfiguration validationConfig,ColumnValueProvider columnValueProvider){  this.validationConfig=validationConfig;  this.columnValueProvider=columnValueProvider;  initColumnValidations();}  }
class C{  public boolean isSetStruct_thing(){  return this.struct_thing != null;}  }
class C{  private void findViews(){  closeBtn=(ImageButton)findViewById(getApplication().getResources().getIdentifier("closeBtn","id",getApplication().getPackageName()));  shareBtn=(ImageButton)findViewById(getApplication().getResources().getIdentifier("shareBtn","id",getApplication().getPackageName()));  photo=(ImageView)findViewById(getApplication().getResources().getIdentifier("photoView","id",getApplication().getPackageName()));  mAttacher=new PhotoViewAttacher(photo);  titleTxt=(TextView)findViewById(getApplication().getResources().getIdentifier("titleTxt","id",getApplication().getPackageName()));}  }
class C{  private void attachOrphanNodes(){  int n=0;  MuninMaster defMaster=new MuninMaster();  defMaster.setName("Default");  defMaster.defaultMaster=true;  for (  MuninNode s : this.nodes) {    if (s.getParent() == null) {      s.setParent(defMaster);      n++;    }  }  if (n > 0)   this.masters.add(defMaster);}  }
class C{  public void overlap(MonotoneChain mc1,int start1,MonotoneChain mc2,int start2){  mc1.getLineSegment(start1,overlapSeg1);  mc2.getLineSegment(start2,overlapSeg2);  overlap(overlapSeg1,overlapSeg2);}  }
class C{  public boolean isFileSizeExceeded(long size){  long maxSize=mRcsSettings.getMaxFileTransferSize();  return maxSize > 0 && size > maxSize;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.979 -0400",hash_original_method="337F97E355478FB0C577C0667066B06F",hash_generated_method="AA30881DAF5C0D6E696D41EA88870FC2") public void removeListener(final FileAlterationListener listener){  if (listener != null) {    while (listeners.remove(listener)) {    }  }}  }
class C{  public static DatagramConnection createDatagramConnection(int timeout){  return new AndroidDatagramConnection(timeout);}  }
class C{  public boolean isUnsupported(){  return isUnsupported;}  }
class C{  public @Test final void testRemoveGrant(){  Role role=new Role(TEST_ROLE);  SecurityObject grant=new Grant(TEST_ROLE);  role.addGrant(grant);  assertThat(role.getGrants()).hasSize(1);  role.removeGrant(grant);  assertThat(role.getGrants()).hasSize(0);}  }
class C{  public static String parsedPageToHtml(ParsedPage pp){  StringBuilder result=new StringBuilder();  result.append(getHtmlHeader());  if (pp != null) {    result.append("<table class=\"ParsedPage\">\n" + "<tr><th class=\"ParsedPage\">ParsedPage: \n" + pp.getName() + "</th></tr>\n");    result.append("<tr><td class=\"ParsedPage\">\n");    for (    Section s : pp.getSections()) {      result.append(sectionToHtml(s));    }    result.append("</td></tr>\n");    if (pp.getCategoryElement() != null) {      result.append("<tr><td class=\"ParsedPage\">\n");      result.append("Categories:\n" + contentElementToHtml(pp.getCategoryElement()));      result.append("</td></tr>\n");    }    if (pp.getLanguagesElement() != null) {      result.append("<tr><td class=\"ParsedPage\">\n");      result.append("Languages:\n" + contentElementToHtml(pp.getLanguagesElement()));      result.append("</td></tr>\n");    }    result.append("</table>\n");  }  result.append(getHtmlFooter());  return result.toString();}  }
class C{  public void extend(Collection<Assignment> alternatives){  if (alternatives.isEmpty()) {    return;  }  Set<Assignment> newGroundings=new HashSet<Assignment>();  for (  Assignment o : alternatives) {    for (    Assignment g : groundings) {      newGroundings.add(new Assignment(o,g));      newGroundings.add(new Assignment(g,o));    }  }  groundings=newGroundings;}  }
class C{  public void updateTracker(){  int trackingFrequency=this.properties.getTrackingTime();  if (trackingFrequency >= 0 && !this.trackerReady) {    this.trackingTimer++;    if (this.trackingTimer >= trackingFrequency) {      this.trackerReady=true;    }  }  int trackingUpdateFrequency=this.properties.getTrackingUpdateTime();  if (this.trackingUpdateTimer < trackingUpdateFrequency) {    this.trackingUpdateTimer++;  }  if (this.trackingUpdateTimer >= trackingUpdateFrequency) {    if (!this.trackerDataChanged) {      this.trackingUpdateTimer=0;      NBTTagCompound currentTrackingData=new NBTTagCompound();      this.properties.saveTrackingSensitiveData(currentTrackingData);      if (!currentTrackingData.equals(this.prevTrackerData)) {        this.trackerDataChanged=true;      }      this.prevTrackerData=currentTrackingData;    }  }}  }
class C{  public void removeHost(String hostPortPair,boolean removeExisting) throws SQLException {  this.removeHost(hostPortPair,removeExisting,true);}  }
class C{  private static Configuration baseConfiguration(){  Configuration conf=new Configuration();  conf.set("fs.igfs.impl",IgniteHadoopFileSystem.class.getName());  return conf;}  }
class C{  public int length(){  return this.myHashMap.size();}  }
class C{  public void writeFloat(final float f){  writeInt(Float.floatToIntBits(f));}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public void checkFriends(){}  }
class C{  public Transform match(Class type) throws Exception {  Class entry=type.getComponentType();  if (entry == char.class) {    return new CharacterArrayTransform(entry);  }  if (entry == Character.class) {    return new CharacterArrayTransform(entry);  }  if (entry == String.class) {    return new StringArrayTransform();  }  return matchArray(entry);}  }
class C{  private void find(){  final Query query=makeQuery();  if (query == null) {    return;  }  fillResultsWithQuery(query,true);}  }
class C{  private void readStart(){  long now=System.nanoTime();  userTime+=now - lastTs;  lastTs=now;}  }
class C{  private void writeObject(JsonGenerator jsonGenerator,Object entity) throws IOException {  jsonGenerator.writeStartObject();  writeName(jsonGenerator,entity);  writeKind(jsonGenerator,entity);  writeURL(jsonGenerator,entity);  jsonGenerator.writeEndObject();}  }
class C{  @Override public double[] transformPredictionsBack(double[] y){  double[] predictions=new double[y.length / 2];  for (int i=0; i < predictions.length; i++) {    predictions[i]=y[predictions.length + i];  }  double[][] dataArray=new double[1][predictions.length];  dataArray[0]=predictions;  Matrix yMat=new Matrix(dataArray);  Matrix multiplied=yMat.times(this.m_v.transpose()).plus(m_Shift);  double[] res=new double[multiplied.getColumnDimension()];  for (int i=0; i < res.length; i++) {    res[i]=multiplied.getArray()[0][i] < 0.0 ? 0.0 : 1.0;  }  return res;}  }
class C{  private void updateStateFromTypedArray(TypedArray a) throws XmlPullParserException {  final RippleState state=mState;  state.mChangingConfigurations|=TypedArrayCompat.getChangingConfigurations(a);  state.mTouchThemeAttrs=TypedArrayCompat.extractThemeAttrs(a);  final ColorStateList color=a.getColorStateList(R.styleable.RippleDrawable_android_color);  if (color != null) {    mState.mColor=color;  }  mState.mMaxRadius=a.getDimensionPixelSize(R.styleable.RippleDrawable_android_radius,mState.mMaxRadius);  verifyRequiredAttributes(a);}  }
class C{  @Provides @Config("commitLogMaxDeletes") public static int provideCommitLogMaxDeletes(){  return 500;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.202 -0400",hash_original_method="6B2BC88BC45E8448086501D1DCC5CA8F",hash_generated_method="68332A465763AA2B520D839C0EAB3025") @Override protected void onPostResume(){  super.onPostResume();  mHandler.removeMessages(MSG_RESUME_PENDING);  onResumeFragments();  mFragments.execPendingActions();}  }
class C{  private void adaptOffsets(int[] offsets,StringBuffer buffer){  String replacementString=getReplacementString();  int delta=buffer.length() - replacementString.length();  for (int i=0; i < offsets.length; i++) {    offsets[i]-=delta;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.METHOD_DECLARATOR___METHOD_NAME_1:    setMethodName_1((String)newValue);  return;case UmplePackage.METHOD_DECLARATOR___PARAMETER_LIST_1:getParameterList_1().clear();getParameterList_1().addAll((Collection<? extends ParameterList_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public VertexPropertyAtom(final String vertexId,final String key,final Object val,final String vpId){  super(vertexId,key,val);  this.vpId=vpId;}  }
class C{  public void labelVertex(RenderContext<V,E> rc,Layout<V,E> layout,V v,String label){  Graph<V,E> graph=layout.getGraph();  if (rc.getVertexIncludePredicate().apply(Context.<Graph<V,E>,V>getInstance(graph,v)) == false) {    return;  }  GraphicsDecorator g=rc.getGraphicsContext();  Component component=prepareRenderer(rc,rc.getVertexLabelRenderer(),label,rc.getPickedVertexState().isPicked(v),v);  Dimension d=component.getPreferredSize();  int h_offset=-d.width / 2;  int v_offset=-d.height / 2;  Point2D p=layout.apply(v);  p=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,p);  int x=(int)p.getX();  int y=(int)p.getY();  g.draw(component,rc.getRendererPane(),x + h_offset,y + v_offset,d.width,d.height,true);  Dimension size=component.getPreferredSize();  Rectangle bounds=new Rectangle(-size.width / 2 - 2,-size.height / 2 - 2,size.width + 4,size.height);  shapes.put(v,bounds);}  }
class C{  public static void checkForRelativeNamespace(Element ctxNode) throws CanonicalizationException {  if (ctxNode != null) {    NamedNodeMap attributes=ctxNode.getAttributes();    for (int i=0; i < attributes.getLength(); i++) {      C14nHelper.assertNotRelativeNS((Attr)attributes.item(i));    }  } else {    throw new CanonicalizationException("Called checkForRelativeNamespace() on null");  }}  }
class C{  @Override public synchronized IndexCommit snapshot() throws IOException {  IndexCommit ic=super.snapshot();  boolean success=false;  try {    persist();    success=true;  }  finally {    if (!success) {      try {        super.release(ic);      } catch (      Exception e) {      }    }  }  return ic;}  }
class C{  public DropboxWizardDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  this.dropboxAdapterFactory=(DropboxAdapterFactory)CSPAdapterFactory.getInstance(StorageBackendType.DROPBOX);  initComponents();  this.setLocationRelativeTo(null);  DropboxClientIntegration dcIntegration=(DropboxClientIntegration)dropboxAdapterFactory.getClientAdapter();  try {    dropboxSyncDirPath=dcIntegration.readSyncDirFromMetadata().getAbsolutePath();    if (dropboxSyncDirPath != null) {      syncDirTextField.setText(dropboxSyncDirPath);    }  } catch (  IOException e) {  }}  }
class C{  public XPatternTokenizer(Pattern pattern,int group){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY,pattern,group);}  }
class C{  public void doSendEmail(EmailParams emailParams) throws IOException {  List<String> filterDomains=new ArrayList<>();  filterDomains.add("qq.com");  filterDomains.add("foxmail.com");  filterDomains.add("fudan.edu.cn");  filterDomains.add("hotmail.com");  filterDomains.add("outlook.com");  sendViaSendcloudApi(emailParams);}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  ParForUnivariateStatsTest t=new ParForUnivariateStatsTest();  t.setUpBase();  t.setUp();  t.testParForUnivariateStatsDefaultMR();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public void animateTo(List<T> newData){  applyAndAnimateRemovals(newData);  applyAndAnimateAdditions(newData);  applyAndAnimateMovedItems(newData);}  }
class C{  public static byte[] readBytesFromFile(File loc) throws Exception {  int size;  byte[] data;  FileInputStream fis=null;  try {    size=getFileSize(loc);    data=new byte[size];    fis=new FileInputStream(loc);    fis.read(data);    fis.close();    fis=null;    return data;  } catch (  Exception e) {    try {      if (fis != null)       fis.close();      throw e;    } catch (    Exception e1) {      throw e;    }  }}  }
class C{  private void copySourceInformation(Bee dest,Bee src){  dest.sourceQuality=src.sourceQuality;  dest.sourceDistance=src.sourceDistance;  dest.sourceDirection=src.sourceDirection;  dest.setColor(src.getColor());  dest.sourceConcentration=src.sourceConcentration;  dest.foodSource=src.foodSource;}  }
class C{  public void startTag(String elName) throws IOException {  _writeIndent();  _write("<" + elName);  _writeAtts();  _writeLn(">");  _indentLevel++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:08.150 -0400",hash_original_method="E0918E1CCE46EAB77CA0EFD0695D4743",hash_generated_method="DD259BB433CA809763A75F6CE6AA7DAD") public static synchronized boolean isEmpty(){  return services.isEmpty();}  }
class C{  public static double entropy(double[] dist){  double total=0;  for (int i=0; i < dist.length; i++) {    if (dist[i] > 0)     total+=dist[i] * Math.log(dist[i]);  }  return -total;}  }
class C{  public RemoteMonitoredVm(RemoteVm rvm,VmIdentifier vmid,Timer timer,int interval) throws MonitorException {  super(vmid,interval);  this.rvm=rvm;  pdb=new PerfDataBuffer(rvm,vmid.getLocalVmId());  this.listeners=new ArrayList<VmListener>();  this.timer=timer;}  }
class C{  protected void javadoc(String... args){  int result;  PrintStream old=System.out;  try {    println("Javadoc");    if (quiet) {      System.setOut(filter(System.out,new String[]{"Loading source files for package","Constructing Javadoc information...","Generating ","Standard Doclet","Building tree for all the packages and classes...","Building index for all the packages and classes...","Building index for all classes..."}));    } else {      System.setOut(filter(System.out,new String[]{"Loading source files for package ","Generating "}));    }    Class<?> clazz=Class.forName("com.sun.tools.javadoc.Main");    Method execute=clazz.getMethod("execute",String[].class);    result=(Integer)invoke(execute,null,new Object[]{args});  } catch (  Exception e) {    result=exec("javadoc",args(args));  } finally {    System.setOut(old);  }  if (result != 0) {    throw new RuntimeException("An error occurred, result=" + result);  }}  }
class C{  protected void doProcess(final CloudTrailEvent event,final FullstopPlugin plugin){  try {    plugin.processEvent(event);  } catch (  HystrixRuntimeException|HttpServerErrorException e) {    log.warn(e.getMessage(),e);  }catch (  final Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  public GitConflictException(Throwable cause){  super(cause);}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Color base=getColor();  Color color=base != null ? new Color(base.getRed(),base.getGreen(),base.getBlue(),255) : null;  if (color == null) {    g.setColor(c.getSelectionColor());  } else {    g.setColor(color);  }  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle) {      alloc=(Rectangle)bounds;    } else {      alloc=bounds.getBounds();    }    g.fillRect(alloc.x,alloc.y,c.getWidth() - alloc.x,alloc.height);  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();      g.fillRect(0,r.y,c.getWidth(),r.height);      return r;    } catch (    BadLocationException e) {    }  }  return null;}  }
class C{  @Override public synchronized void updateAsciiStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setAsciiStream(columnIndex,x,length);  } else {    this.inserter.setAsciiStream(columnIndex,x,length);    this.thisRow.setColumnValue(columnIndex - 1,STREAM_DATA_MARKER);  }}  }
class C{  public static void openInformation(final Shell parent,final String title,final String message,final String preferenceKey){  ToggleMessageHelper.openInformation(parent,title,message,Messages.getString("ToggleMessageHelper.DontDisplayAgain"),false,preferenceKey);}  }
class C{  private void detach(){  if (prevTakeIndex >= 0) {    prevTakeIndex=DETACHED;    itrs.doSomeSweeping(true);  }}  }
class C{  @Override public boolean contains(Point2D.Double p){  RoundRectangle2D.Double r=(RoundRectangle2D.Double)roundrect.clone();  double grow=AttributeKeys.getPerpendicularHitGrowth(this);  r.x-=grow;  r.y-=grow;  r.width+=grow * 2;  r.height+=grow * 2;  r.arcwidth+=grow * 2;  r.archeight+=grow * 2;  return r.contains(p);}  }
class C{  static GramBooleanQuery toDNF(GramBooleanQuery query){  GramBooleanQuery result=new GramBooleanQuery(QueryOp.OR);  if (query.operator == QueryOp.ANY || query.operator == QueryOp.NONE) {    return result;  }  if (query.operator == QueryOp.AND) {    for (    GramBooleanQuery subQuery : query.subQuerySet) {      result=dnfConjunction(result,toDNF(subQuery));    }  }  if (query.operator == QueryOp.OR) {    for (    GramBooleanQuery subQuery : query.subQuerySet) {      result.subQuerySet.addAll(toDNF(subQuery).subQuerySet);    }  }  if (query.operator == QueryOp.LEAF) {    result.subQuerySet.add(deepCopy(query));  }  return result;}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void openFile(ISelection selection){  if (selection.isEmpty()) {    return;  }  String file=(String)((IStructuredSelection)selection).getFirstElement();  IFile tsconfigFile=getTsconfigFile();  if (tsconfigFile != null) {    IFile tsFile=tsconfigFile.getParent().getFile(new Path(file));    if (tsFile.exists()) {      EditorUtils.openInEditor(tsFile,true);    }  }}  }
class C{  public SimpleCraftingRecipeItem(final ItemStack item,final boolean ignoreData,final BiFunction<Player,CraftingGrid,ItemStack> replacementFunc,final ItemStack replacement,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=item.clone();  this.ignoreData=ignoreData;  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=replacement;  this.replacementFunc=replacementFunc;}  }
class C{  public static byte deserializeByte(byte[] buffer,MutableInt offset){  byte val=buffer[offset.intValue()];  offset.add(Type.BYTE.getByteSize());  return val;}  }
class C{  public HashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  protected String adaptValueForLinkLabel(final String valueToAdapt,final String displayValue){  if (displayValue == null) {    return valueToAdapt;  }  return displayValue;}  }
class C{  @Override public boolean isShowing(){  return trayIsShowing;}  }
class C{  public boolean equals(Peer p){  if (p == null) {    return false;  } else   if (p.getNetwork() == null) {    return p.getNetwork() == network;  } else {    return p.getNetwork().equals(network);  }}  }
class C{  public final static JIPCons append(final JIPCons cons1,final JIPCons cons2){  ConsCell cell=ConsCell.append((ConsCell)cons1.getTerm(),(ConsCell)cons2.getTerm());  return new JIPCons(cell);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void pushParser(BridgeXmlBlockParser parser){  if (ParserFactory.LOG_PARSER) {    System.out.println("PUSH " + parser.getParser().toString());  }  mParserStack.push(parser);}  }
class C{  public void invokeHookEmit(List<Object> values,String stream,Collection<Integer> outTasks){  if (taskHooks.size() != 0) {    EmitInfo emitInfo=new EmitInfo(values,stream,getThisTaskId(),outTasks);    for (    ITaskHook taskHook : taskHooks) {      taskHook.emit(emitInfo);    }  }}  }
class C{  private static void rotateLogs(){  try {    File logDir=LogUtilities.ensureLogDirectoryExists();    File log1=new File(logDir,"logcat.txt");    File log2=new File(logDir,"prev_logcat_1.txt");    File log3=new File(logDir,"prev_logcat_2.txt");    File log4=new File(logDir,"prev_logcat_3.txt");    if (log4.exists()) {      log4.delete();    }    if (log3.exists()) {      log3.renameTo(log4);    }    if (log2.exists()) {      log2.renameTo(log3);    }    if (log1.exists()) {      log1.renameTo(log2);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"rotateLogs fails " + e.getLocalizedMessage());  }}  }
class C{  @Override public void processElement(Wrapper<Element> elementWrapper){  Element content=elementWrapper.getContent();  content.detach();  content.removeContent();}  }
class C{  public void mousePressed(MouseEvent e){  Font font=fileWindow.textArea.getFont();  FontMetrics metrics=getFontMetrics(font);  int h=metrics.getHeight();  pressLine=e.getY() / h;}  }
class C{  public boolean isCompatibleWith(ClassNode classNode){  return new GenericsTypeMatcher().matches(classNode);}  }
class C{  private void populateInputs(){  inputs=new String[inputMatrices.length];  inputInfos=new InputInfo[inputMatrices.length];  rlens=new long[inputMatrices.length];  clens=new long[inputMatrices.length];  brlens=new int[inputMatrices.length];  bclens=new int[inputMatrices.length];  partitioned=new boolean[inputMatrices.length];  pformats=new PDataPartitionFormat[inputMatrices.length];  psizes=new int[inputMatrices.length];  for (int i=0; i < inputMatrices.length; i++) {    inputs[i]=inputMatrices[i].getFileName();    MatrixCharacteristics mc=inputMatrices[i].getMatrixCharacteristics();    rlens[i]=mc.getRows();    clens[i]=mc.getCols();    brlens[i]=mc.getRowsPerBlock();    bclens[i]=mc.getColsPerBlock();    if (inputMatrices[i].getMetaData() instanceof MatrixFormatMetaData) {      inputInfos[i]=((MatrixFormatMetaData)inputMatrices[i].getMetaData()).getInputInfo();    } else     if (inputMatrices[i].getMetaData() instanceof NumItemsByEachReducerMetaData) {      inputInfos[i]=InputInfo.InputInfoForSortOutput;      inputInfos[i].metadata=inputMatrices[i].getMetaData();    }    partitioned[i]=inputMatrices[i].isPartitioned();    pformats[i]=inputMatrices[i].getPartitionFormat();    psizes[i]=inputMatrices[i].getPartitionSize();  }}  }
class C{  private void processSentence(JCas aJCas,String text,int zoneBegin){  BreakIterator bi=BreakIterator.getWordInstance(getLocale(aJCas));  bi.setText(text);  int last=bi.first() + zoneBegin;  int cur=bi.next();  while (cur != BreakIterator.DONE) {    cur+=zoneBegin;    Annotation token=createToken(aJCas,last,cur);    if (token != null) {      if (splitAtApostrophe) {        int i=token.getCoveredText().indexOf("'");        if (i > 0) {          i+=token.getBegin();          createToken(aJCas,i,token.getEnd());          token.setEnd(i);        }      }    }    last=cur;    cur=bi.next();  }}  }
class C{  public boolean isFlatten(){  return flatten;}  }
class C{  protected boolean validColumn(int j){  return j >= 0 && j < getNCols();}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public ProgressBar(int min,int max,int preferredWidth){  if (min > max) {    min=max;  }  this.min=min;  this.max=max;  this.value=min;  this.labelFormat="%2.0f%%";  if (preferredWidth < 1) {    preferredWidth=1;  }  this.preferredWidth=preferredWidth;}  }
class C{  public void removeX509Certificate(X509CertificateEntity x509Certificate){  x509Certificates.remove(x509Certificate);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testCollation41() throws Exception {  if (versionMeetsMinimum(4,1) && isAdminConnectionConfigured()) {    Map<String,String> charsetsAndCollations=getCharacterSetsAndCollations();    charsetsAndCollations.remove("latin7");    charsetsAndCollations.remove("ucs2");    for (    String charsetName : charsetsAndCollations.keySet()) {      Connection charsetConn=null;      Statement charsetStmt=null;      try {        Properties props=new Properties();        props.put("characterEncoding",charsetName);        System.out.println("Testing character set " + charsetName);        charsetConn=getAdminConnectionWithProps(props);        charsetStmt=charsetConn.createStatement();        charsetStmt.executeUpdate("DROP DATABASE IF EXISTS testCollation41");        charsetStmt.executeUpdate("DROP TABLE IF EXISTS testCollation41");        charsetStmt.executeUpdate("CREATE DATABASE testCollation41 DEFAULT CHARACTER SET " + charsetName);        charsetConn.setCatalog("testCollation41");        charsetStmt=charsetConn.createStatement();        StringBuilder createTableCommand=new StringBuilder("CREATE TABLE testCollation41(field1 VARCHAR(255), field2 INT)");        charsetStmt.executeUpdate(createTableCommand.toString());        charsetStmt.executeUpdate("INSERT INTO testCollation41 VALUES ('abc', 0)");        int updateCount=charsetStmt.executeUpdate("UPDATE testCollation41 SET field2=1 WHERE field1='abc'");        assertTrue(updateCount == 1);      }  finally {        if (charsetStmt != null) {          charsetStmt.executeUpdate("DROP TABLE IF EXISTS testCollation41");          charsetStmt.executeUpdate("DROP DATABASE IF EXISTS testCollation41");          charsetStmt.close();        }        if (charsetConn != null) {          charsetConn.close();        }      }    }  }}  }
class C{  public MBeanInvocationFailedException(final String message){  super(message);}  }
class C{  private void generateMovements(){  log.info("DD_Order_ID=" + m_DD_Order_ID);  log.info("MovementDate" + m_MovementDate);  String trxName=Trx.createTrxName("IOG");  Trx trx=Trx.get(trxName,true);  m_selectionActive=false;  statusBar.setStatusLine(Msg.translate(Env.getCtx(),"M_Movement_ID"));  statusBar.setStatusDB(String.valueOf(selection.size()));  if (selection.size() <= 0)   return;  Properties m_ctx=Env.getCtx();  Timestamp MovementDate=(Timestamp)m_MovementDate;  MDDOrder order=new MDDOrder(m_ctx,Integer.parseInt(m_DD_Order_ID.toString()),trxName);  MMovement movement=new MMovement(m_ctx,0,trxName);  movement.setDD_Order_ID(order.getDD_Order_ID());  movement.setAD_User_ID(order.getAD_User_ID());  movement.setPOReference(order.getPOReference());  movement.setReversal_ID(0);  movement.setM_Shipper_ID(order.getM_Shipper_ID());  movement.setDescription(order.getDescription());  movement.setC_BPartner_ID(order.getC_BPartner_ID());  movement.setC_BPartner_Location_ID(order.getC_BPartner_Location_ID());  movement.setAD_Org_ID(order.getAD_Org_ID());  movement.setAD_OrgTrx_ID(order.getAD_OrgTrx_ID());  movement.setAD_User_ID(order.getAD_User_ID());  movement.setC_Activity_ID(order.getC_Activity_ID());  movement.setC_Campaign_ID(order.getC_Campaign_ID());  movement.setC_Project_ID(order.getC_Project_ID());  movement.setMovementDate(MovementDate);  movement.setDeliveryRule(order.getDeliveryRule());  movement.setDeliveryViaRule(order.getDeliveryViaRule());  movement.setDocAction(MMovement.ACTION_Prepare);  movement.setDocStatus(MMovement.DOCSTATUS_Drafted);  int docTypeDO_ID=getDocType(MDocType.DOCBASETYPE_MaterialMovement,order.getAD_Org_ID());  if (docTypeDO_ID > 0)   movement.setC_DocType_ID(docTypeDO_ID);  movement.saveEx();  for (int i=0; i < selection.size(); i++) {    int DD_OrderLine_ID=selection.get(i);    MDDOrderLine oline=new MDDOrderLine(m_ctx,DD_OrderLine_ID,trxName);    MMovementLine line=new MMovementLine(movement);    line.setM_Product_ID(oline.getM_Product_ID());    BigDecimal QtyDeliver=(BigDecimal)miniTable.getValueAt(i,1);    if (QtyDeliver == null | QtyDeliver.compareTo(oline.getQtyInTransit()) > 0)     throw new AdempiereException("Error in Qty");    line.setOrderLine(oline,QtyDeliver,true);    line.saveEx();  }  movement.setDocAction(MMovement.DOCACTION_Close);  movement.setDocStatus(movement.completeIt());  movement.saveEx();  trx.commit();  generateMovements_complete(movement);}  }
class C{  public long random(){  if (size == 0)   return 0;  return items[MathUtils.random(0,size - 1)];}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  public BorderLayout(int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;}  }
class C{  public Period(int hours,int minutes,int seconds,int millis){  super(0,0,0,0,hours,minutes,seconds,millis,PeriodType.standard());}  }
class C{  public static int[][] createSparseMatrixWithHotseat(CellLayout iconLayout,CellLayout hotseatLayout,boolean isHotseatHorizontal,int allappsiconRank){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup hotseatParent=hotseatLayout.getShortcutsAndWidgets();  boolean moreIconsInHotseatThanWorkspace=isHotseatHorizontal ? hotseatLayout.getCountX() > iconLayout.getCountX() : hotseatLayout.getCountY() > iconLayout.getCountY();  int m, n;  if (isHotseatHorizontal) {    m=hotseatLayout.getCountX();    n=iconLayout.getCountY() + hotseatLayout.getCountY();  } else {    m=iconLayout.getCountX() + hotseatLayout.getCountX();    n=hotseatLayout.getCountY();  }  int[][] matrix=createFullMatrix(m,n);  if (moreIconsInHotseatThanWorkspace) {    if (isHotseatHorizontal) {      for (int j=0; j < n; j++) {        matrix[allappsiconRank][j]=ALL_APPS_COLUMN;      }    } else {      for (int j=0; j < m; j++) {        matrix[j][allappsiconRank]=ALL_APPS_COLUMN;      }    }  }  for (int i=0; i < iconParent.getChildCount(); i++) {    View cell=iconParent.getChildAt(i);    if (!cell.isFocusable()) {      continue;    }    int cx=((CellLayout.LayoutParams)cell.getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)cell.getLayoutParams()).cellY;    if (moreIconsInHotseatThanWorkspace) {      if (isHotseatHorizontal && cx >= allappsiconRank) {        cx++;      }      if (!isHotseatHorizontal && cy >= allappsiconRank) {        cy++;      }    }    matrix[cx][cy]=i;  }  for (int i=hotseatParent.getChildCount() - 1; i >= 0; i--) {    if (isHotseatHorizontal) {      int cx=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellX;      matrix[cx][iconLayout.getCountY()]=iconParent.getChildCount() + i;    } else {      int cy=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellY;      matrix[iconLayout.getCountX()][cy]=iconParent.getChildCount() + i;    }  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  public JITOptions(){}  }
class C{  public HideShowPanel(Component component){  this.buildInterface(component);}  }
class C{  public void paint(java.awt.Graphics g){  omgraphics.render(g);}  }
class C{  public void testConstructor1(){  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>();  checkInitialState(p);  assertEquals(p.getMaxBufferCapacity(),Flow.defaultBufferSize());  Executor e=p.getExecutor(), c=ForkJoinPool.commonPool();  if (ForkJoinPool.getCommonPoolParallelism() > 1)   assertSame(e,c); else   assertNotSame(e,c);}  }
class C{  public static double tanh(double x){  boolean negate=false;  if (x != x) {    return x;  }  if (x > 20.0) {    return 1.0;  }  if (x < -20) {    return -1.0;  }  if (x == 0) {    return x;  }  if (x < 0.0) {    x=-x;    negate=true;  }  double result;  if (x >= 0.5) {    double hiPrec[]=new double[2];    exp(x * 2.0,0.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double na=-1.0 + ya;    double nb=-(na + 1.0 - ya);    double temp=na + yb;    nb+=-(temp - na - yb);    na=temp;    double da=1.0 + ya;    double db=-(da - 1.0 - ya);    temp=da + yb;    db+=-(temp - da - yb);    da=temp;    temp=da * HEX_40000000;    double daa=da + temp - temp;    double dab=da - daa;    double ratio=na / da;    temp=ratio * HEX_40000000;    double ratioa=ratio + temp - temp;    double ratiob=ratio - ratioa;    ratiob+=(na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;    ratiob+=nb / da;    ratiob+=-db * na / da / da;    result=ratioa + ratiob;  } else {    double hiPrec[]=new double[2];    expm1(x * 2.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double na=ya;    double nb=yb;    double da=2.0 + ya;    double db=-(da - 2.0 - ya);    double temp=da + yb;    db+=-(temp - da - yb);    da=temp;    temp=da * HEX_40000000;    double daa=da + temp - temp;    double dab=da - daa;    double ratio=na / da;    temp=ratio * HEX_40000000;    double ratioa=ratio + temp - temp;    double ratiob=ratio - ratioa;    ratiob+=(na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;    ratiob+=nb / da;    ratiob+=-db * na / da / da;    result=ratioa + ratiob;  }  if (negate) {    result=-result;  }  return result;}  }
class C{  public static Border createGrooveBorder(int thickness){  return createCSSBorder(TYPE_GROOVE,thickness);}  }
class C{  public static RegionAttributesResponse create(DistributionManager dm,InternalDistributedMember recipient,Region r){  RegionAttributesResponse m=new RegionAttributesResponse();  m.setRecipient(recipient);  m.attributes=new RemoteRegionAttributes(r.getAttributes());  return m;}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  public void testMarshalling() throws Exception {  GridCacheVersion ver=version(1,1);  GridCacheVersionEx verEx=new GridCacheVersionEx(2,2,0,0,ver);  OptimizedMarshaller marsh=new OptimizedMarshaller(false);  marsh.setContext(new MarshallerContextTestImpl());  byte[] verBytes=marsh.marshal(ver);  byte[] verExBytes=marsh.marshal(verEx);  GridCacheVersion verNew=marsh.unmarshal(verBytes,Thread.currentThread().getContextClassLoader());  GridCacheVersionEx verExNew=marsh.unmarshal(verExBytes,Thread.currentThread().getContextClassLoader());  assert ver.equals(verNew);  assert verEx.equals(verExNew);}  }
class C{  public BinaryBufferedFile(String name,int buffersize) throws IOException {  super(name);  buffer=new byte[buffersize];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.184 -0500",hash_original_method="1DF6FF81DFB932BE2B5849557766481E",hash_generated_method="949B522CC2BD95F3746A3FBAF564F432") public boolean clipRect(float left,float top,float right,float bottom,Region.Op op){  addTaint(left + top + right+ bottom+ op.getTaintInt());  return getTaintBoolean();}  }
class C{  private void consolidateSteppedPrices(PriceModel priceModel){  updateFreeAmountAndAdditionalPrice(priceModel.getSteppedPrices());  for (  PricedEvent event : priceModel.getConsideredEvents()) {    updateFreeAmountAndAdditionalPrice(event.getSteppedPrices());  }  for (  PricedParameter parameter : priceModel.getSelectedParameters()) {    updateFreeAmountAndAdditionalPrice(parameter.getSteppedPrices());  }}  }
class C{  public mat4 negated(){  mat4 result=new mat4(this);  result.negate();  return result;}  }
class C{  public MapRequestFormatException(String s){  super(s);}  }
class C{  void clear(){  table.clear();}  }
class C{  private void checkCache(Container parent){  if (parent == null) {    return;  }  if (dirty) {    grid=null;  }  cleanConstraintMaps(parent);  int mc=PlatformDefaults.getModCount();  if (lastModCount != mc) {    grid=null;    lastModCount=mc;  }  if (!lastWasInvalid) {    lastWasInvalid=true;    int hash=0;    boolean resetLastInvalidOnParent=false;    for (    ComponentWrapper wrapper : ccMap.keySet()) {      Object component=wrapper.getComponent();      if (component instanceof TextArea) {        resetLastInvalidOnParent=true;      }      hash^=wrapper.getLayoutHashCode();      hash+=285134905;    }    if (resetLastInvalidOnParent) {      resetLastInvalidOnParent(parent);    }    if (hash != lastHash) {      grid=null;      lastHash=hash;    }    Dimension ps=new Dimension(parent.getWidth(),parent.getHeight());    if (lastInvalidSize == null || !lastInvalidSize.equals(ps)) {      grid=null;      lastInvalidSize=ps;    }  }  ContainerWrapper par=checkParent(parent);  setDebug(par,getDebugMillis() > 0);  if (grid == null) {    grid=new Grid(par,lc,rowSpecs,colSpecs,ccMap,callbackList);  }  dirty=false;}  }
class C{  public HyperbolicShapeTransformer(Component component){  this(component,null);}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    String s=Double.toString(number);    if (s.endsWith("2") && !soFar.equals(""))     soFar=" Vinte e " + soFar.trim(); else     if (soFar.equals(""))     soFar=tensNames[number % 10] + " e" + soFar; else     soFar=tensNames[number % 10] + " e" + soFar;    number/=10;  }  if (number == 0)   return tensNames[number % 10] + soFar;  if (number > 1)   soFar="s e" + soFar;  if (number == 1 && !soFar.equals(""))   number=0;  soFar=" e" + soFar;  return numNames[number] + " Cento" + soFar;}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  private void writeMetaContinuation(){  TempBuffer tBuf=TempBuffer.create();  byte[] buffer=tBuf.buffer();  int metaLength=_segmentMeta[0].size();  SegmentExtent extent=new SegmentExtent(0,_addressTail,metaLength);  _metaExtents.add(extent);  _addressTail+=metaLength;  int offset=0;  buffer[offset++]=CODE_META_SEGMENT;  long address=extent.address();  int length=extent.length();  long value=(address & ~0xffff) | (length >> 16);  offset+=BitsUtil.writeLong(buffer,offset,value);  int crc=_nonce;  crc=Crc32Caucho.generate(crc,buffer,0,offset);  offset+=BitsUtil.writeInt(buffer,offset,crc);  try (OutStore sOut=openWrite(_metaOffset,offset)){    sOut.write(_metaOffset,buffer,0,offset);  }   tBuf.free();  _metaAddress=address;  _metaOffset=address;  _metaTail=address + length;}  }
class C{  public void finalWeightsFromBestEpoch(boolean b){  this.returnBestDev=b;}  }
class C{  private void validateLocalIgfsConfigurations(FileSystemConfiguration[] cfgs) throws IgniteCheckedException {  Collection<String> cfgNames=new HashSet<>();  for (  FileSystemConfiguration cfg : cfgs) {    String name=cfg.getName();    if (cfgNames.contains(name))     throw new IgniteCheckedException("Duplicate IGFS name found (check configuration and " + "assign unique name to each): " + name);    CacheConfiguration dataCacheCfg=config(cfg.getDataCacheName());    CacheConfiguration metaCacheCfg=config(cfg.getMetaCacheName());    if (dataCacheCfg == null)     throw new IgniteCheckedException("Data cache is not configured locally for IGFS: " + cfg);    if (GridQueryProcessor.isEnabled(dataCacheCfg))     throw new IgniteCheckedException("IGFS data cache cannot start with enabled query indexing.");    if (dataCacheCfg.getAtomicityMode() != TRANSACTIONAL && cfg.isFragmentizerEnabled())     throw new IgniteCheckedException("Data cache should be transactional: " + cfg.getDataCacheName() + " when fragmentizer is enabled");    if (metaCacheCfg == null)     throw new IgniteCheckedException("Metadata cache is not configured locally for IGFS: " + cfg);    if (GridQueryProcessor.isEnabled(metaCacheCfg))     throw new IgniteCheckedException("IGFS metadata cache cannot start with enabled query indexing.");    if (metaCacheCfg.getAtomicityMode() != TRANSACTIONAL)     throw new IgniteCheckedException("Meta cache should be transactional: " + cfg.getMetaCacheName());    if (F.eq(cfg.getDataCacheName(),cfg.getMetaCacheName()))     throw new IgniteCheckedException("Cannot use same cache as both data and meta cache: " + cfg.getName());    if (!(dataCacheCfg.getAffinityMapper() instanceof IgfsGroupDataBlocksKeyMapper))     throw new IgniteCheckedException("Invalid IGFS data cache configuration (key affinity mapper class should be " + IgfsGroupDataBlocksKeyMapper.class.getSimpleName() + "): "+ cfg);    IgfsIpcEndpointConfiguration ipcCfg=cfg.getIpcEndpointConfiguration();    if (ipcCfg != null) {      final int tcpPort=ipcCfg.getPort();      if (!(tcpPort >= MIN_TCP_PORT && tcpPort <= MAX_TCP_PORT))       throw new IgniteCheckedException("IGFS endpoint TCP port is out of range [" + MIN_TCP_PORT + ".."+ MAX_TCP_PORT+ "]: "+ tcpPort);      if (ipcCfg.getThreadCount() <= 0)       throw new IgniteCheckedException("IGFS endpoint thread count must be positive: " + ipcCfg.getThreadCount());    }    boolean secondary=cfg.getDefaultMode() == PROXY;    if (cfg.getPathModes() != null) {      for (      Map.Entry<String,IgfsMode> mode : cfg.getPathModes().entrySet()) {        if (mode.getValue() == PROXY)         secondary=true;      }    }    if (secondary) {      assertParameter(cfg.getSecondaryFileSystem() != null,"secondaryFileSystem cannot be null when mode is not " + IgfsMode.PRIMARY);    }    cfgNames.add(name);  }}  }
class C{  public B outputParams(final OutputParams params){  mOutputParams=params;  return self();}  }
class C{  @Override public void onPreAdd(IoFilterChain parent,String name,NextFilter nextFilter) throws SSLException {  if (parent.contains(SslFilter.class)) {    String msg="Only one SSL filter is permitted in a chain.";    LOGGER.error(msg);    throw new IllegalStateException(msg);  }  LOGGER.debug("Adding the SSL Filter {} to the chain",name);  IoSession session=parent.getSession();  session.setAttribute(NEXT_FILTER,nextFilter);  SslHandler sslHandler=new SslHandler(this,session);  sslHandler.init();  String[] ciphers=sslContext.getServerSocketFactory().getSupportedCipherSuites();  setEnabledCipherSuites(ciphers);  session.setAttribute(SSL_HANDLER,sslHandler);}  }
class C{  public boolean isTemporal(){  return mTemporal;}  }
class C{  public static boolean match(@Nullable PyType expected,@Nullable PyType actual,@NotNull TypeEvalContext context,@Nullable Map<PyGenericType,PyType> substitutions){  return match(expected,actual,context,substitutions,true);}  }
class C{  public void testNumericClass(){  m_Instances.setClassIndex(2);  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes() + 2,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public MultiPlayer(){  this(null);}  }
class C{  public void submitVmList(List<? extends Vm> list){  getVmList().addAll(list);}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points.get(i);      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value >= 0) {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) - renderer.getChartValuesSpacing(),paint,0);      } else {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      }    }  }}  }
class C{  public InputStream responseInputStream(HttpResponse response) throws IOException {  return responseInputStream(response,false);}  }
class C{  public static boolean isCrystal(ItemStack item){  if (item.getItem() instanceof ICrystal)   return true;  for (  ItemStack crystal : AbyssalCraftAPI.getCrystals())   if (crystal.getItem() == item.getItem() && (crystal.getItemDamage() == OreDictionary.WILDCARD_VALUE || crystal.getItemDamage() == item.getItemDamage()))   return true;  return false;}  }
class C{  protected void tearDown() throws Exception {  stunStack.removeSocket(clientAddress);  stunStack.removeSocket(serverAddress);  clientSock.close();  serverSock.close();  requestCollector=null;  responseCollector=null;  System.setProperty(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,"false");  System.setProperty(StackProperties.KEEP_CRANS_AFTER_A_RESPONSE,"false");  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"");  System.setProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,"");  System.setProperty(StackProperties.FIRST_CTRAN_RETRANS_AFTER,"");  super.tearDown();}  }
class C{  public void write(long position,ByteBuffer src,int srcStart,int srcLength) throws IOException {  final int bufferPosition=checkOffset(position,srcLength);  final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (src.isDirect()) {    final long srcAddress=PlatformDependent.directBufferAddress(src) + srcStart;    PlatformDependent.copyMemory(srcAddress,destAddress,srcLength);  } else {    final byte[] srcArray=src.array();    PlatformDependent.copyMemory(srcArray,srcStart,destAddress,srcLength);  }  position+=srcLength;  if (position > this.length) {    this.length=position;  }}  }
class C{  private void build(){  for (  Contact contact : done) {    add(contact);  }}  }
class C{  public static void logException(Throwable e,String message){  getDefault().logMessage(IStatus.ERROR,message,e);}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  public boolean equals(Object o2){  if (o2 instanceof Style) {    Style ss2=(Style)o2;    if (this.underline == ss2.underline && areEqual(foreground,ss2.foreground) && areEqual(background,ss2.background) && areEqual(font,ss2.font) && areEqual(fontMetrics,ss2.fontMetrics))     return true;  }  return false;}  }
class C{  public void put(String markername,Object obj){  prefixLibrarian.put(markername.intern(),obj);}  }
class C{  protected void heapifyUpComparator(int pos,Object cur){  while (pos > 0) {    final int parent=(pos - 1) >>> 1;    Object par=queue[parent];    if (comparator.compare(cur,par) >= 0) {      break;    }    queue[pos]=par;    pos=parent;  }  queue[pos]=cur;}  }
class C{  public static void main(String[] args){  runTokenizer(new AlphabeticTokenizer(),args);}  }
class C{  public static int compare(long x,long y){  return (x < y) ? -1 : ((x == y) ? 0 : 1);}  }
class C{  public OrganizationRemovedException(String message){  super(message);}  }
class C{  public void logRandomRead(long streamId,long pos,int readLen){  addEntry(new Entry(TYPE_RANDOM_READ,null,null,streamId,null,null,null,null,null,null,pos,readLen,null,null,null,null,null,null,null,null));}  }
class C{  public MediaNotificationInfo(MediaNotificationInfo other){  this(other.title,other.isPaused,other.origin,other.tabId,other.isPrivate,other.listener);}  }
class C{  @Override public String open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  Point preferredSize=shell.computeSize(SWT.DEFAULT,SWT.DEFAULT);  shell.setSize(preferredSize.x > 700 ? 700 : preferredSize.x,preferredSize.y > 550 ? 550 : preferredSize.y);  script.setText(getInput() == null ? "" : getInput().trim());  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return input;}  }
class C{  private void emitStringValue(String s){  raw('"');  char b=0, c=0;  for (int i=0; i < s.length(); i++) {    b=c;    c=s.charAt(i);switch (c) {case '\\':case '"':      raw('\\');    raw(c);  break;case '/':if (b == '<') raw('\\');raw(c);break;case '\b':raw("\\b");break;case '\t':raw("\\t");break;case '\n':raw("\\n");break;case '\f':raw("\\f");break;case '\r':raw("\\r");break;default :if (shouldBeEscaped(c)) {String t="000" + Integer.toHexString(c);raw("\\u" + t.substring(t.length() - "0000".length()));} else {raw(c);}}}raw('"');}  }
class C{  protected CompletionTokenStream wrapTokenStream(TokenStream stream){  if (stream instanceof CompletionTokenStream) {    return (CompletionTokenStream)stream;  } else {    return new CompletionTokenStream(stream);  }}  }
class C{  public void info(String message){  write(message,MSG_INFORMATION);}  }
class C{  public static Script pydmlFromResource(String resourcePath){  return scriptFromResource(resourcePath,ScriptType.PYDML);}  }
class C{  @Override public boolean write(OFMessage m){  return this.write(Collections.singletonList(m)).isEmpty();}  }
class C{  static boolean isValidKeyEventForKeyBindings(KeyEvent e){  return true;}  }
class C{  protected void matchReportReference(ASTNode reference,IJavaElement element,Binding elementBinding,int accuracy,MatchLocator locator) throws CoreException {  matchReportReference(reference,element,null,null,elementBinding,accuracy,locator);}  }
class C{  public CLIOutputResponseList resolve(final ResolveRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  Map<String,String> resolutions=request.getConflictResolutions();  List<CLIOutputResponse> results=new ArrayList<>();  for (  String path : resolutions.keySet()) {    final List<String> uArgs=defaultArgs();    addDepth(uArgs,request.getDepth());    addOption(uArgs,"--accept",resolutions.get(path));    uArgs.add("resolve");    final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(path));    CLIOutputResponse outputResponse=DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());    results.add(outputResponse);  }  return DtoFactory.getInstance().createDto(CLIOutputResponseList.class).withCLIOutputResponses(results);}  }
class C{  private static String jsonValue(long value){  return String.valueOf(value);}  }
class C{  public void verify() throws InterruptedException {  conditionLatch.await(5,TimeUnit.SECONDS);  for (  AsyncCountableCondition condition : allConditions) {    condition.verify();  }}  }
class C{  public static double covariance(DoubleArrayList data1,DoubleArrayList data2){  int size=data1.size();  if (size != data2.size() || size == 0)   throw new IllegalArgumentException();  double[] elements1=data1.elements();  double[] elements2=data2.elements();  double sumx=elements1[0], sumy=elements2[0], Sxy=0;  for (int i=1; i < size; ++i) {    double x=elements1[i];    double y=elements2[i];    sumx+=x;    Sxy+=(x - sumx / (i + 1)) * (y - sumy / i);    sumy+=y;  }  return Sxy / (size - 1);}  }
class C{  public static boolean intersectRaySphere(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float centerX,float centerY,float centerZ,float radiusSquared,Vector2f result){  float Lx=centerX - originX;  float Ly=centerY - originY;  float Lz=centerZ - originZ;  float tca=Lx * dirX + Ly * dirY + Lz * dirZ;  float d2=Lx * Lx + Ly * Ly + Lz * Lz - tca * tca;  if (d2 > radiusSquared)   return false;  float thc=(float)Math.sqrt(radiusSquared - d2);  float t0=tca - thc;  float t1=tca + thc;  if (t0 < t1 && t1 >= 0.0f) {    result.x=t0;    result.y=t1;    return true;  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void reverse(int[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  int tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public PDFAction(String type){  this.type=type;}  }
class C{  void sendRoleRequestIfNotPending(OFControllerRole role){  try {    roleChanger.sendRoleRequestIfNotPending(role);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  public static void main(final String[] args){  int n=10000;  Object[] list=new Object[n];  for (int i=0; i < n; i++)   list[i]=i;  System.out.println("***Benchmarks for " + n + " linear keys:***");  benchmarks(list);  System.out.println();  Random r=new Random();  for (int i=0; i < n; i++)   list[i]=r.nextInt();  System.out.println("***Benchmarks for " + n + " random keys:***");  benchmarks(list);}  }
class C{  public static void appendZeroPadded(StringBuilder buff,int length,long positiveValue){  if (length == 2) {    if (positiveValue < 10) {      buff.append('0');    }    buff.append(positiveValue);  } else {    String s=Long.toString(positiveValue);    length-=s.length();    while (length > 0) {      buff.append('0');      length--;    }    buff.append(s);  }}  }
class C{  public void addCommand(CoreCmd ccmd){  commandQueue.add(ccmd);  lock.lock();  try {    workAvailable.signal();  }  finally {    lock.unlock();  }}  }
class C{  public static void appendEscapedSQLString(StringBuilder sb,String sqlString){  sb.append('\'');  if (sqlString.indexOf('\'') != -1) {    int length=sqlString.length();    for (int i=0; i < length; i++) {      char c=sqlString.charAt(i);      if (c == '\'') {        sb.append('\'');      }      sb.append(c);    }  } else   sb.append(sqlString);  sb.append('\'');}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public static boolean isMergeInProgress(@NotNull Project project,VirtualFile repository){  return new HgWorkingCopyRevisionsCommand(project).parents(repository).size() > 1;}  }
class C{  public Key max(){  if (isEmpty())   return null;  return keys[n - 1];}  }
class C{  protected void checkProcessorVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String XALAN1_VERSION_CLASS="org.apache.xalan.xslt.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN1_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("PRODUCT");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("LANGUAGE");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("S_VERSION");    buf.append(f.get(null));    buf.append(';');    h.put(VERSION + "xalan1",buf.toString());  } catch (  Exception e1) {    h.put(VERSION + "xalan1",CLASS_NOTPRESENT);  }  try {    final String XALAN2_VERSION_CLASS="org.apache.xalan.processor.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("S_VERSION");    buf.append(f.get(null));    h.put(VERSION + "xalan2x",buf.toString());  } catch (  Exception e2) {    h.put(VERSION + "xalan2x",CLASS_NOTPRESENT);  }  try {    final String XALAN2_2_VERSION_CLASS="org.apache.xalan.Version";    final String XALAN2_2_VERSION_METHOD="getVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(XALAN2_2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(XALAN2_2_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "xalan2_2",(String)returnValue);  } catch (  Exception e2) {    h.put(VERSION + "xalan2_2",CLASS_NOTPRESENT);  }}  }
class C{  public final boolean isTraceEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);}  }
class C{  protected byte[] generateData(int size,DataType type){  return generateData(size,type,null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.ACCESS__ARGS:    setArgs((ExpressionList)null);  return;case GamlPackage.ACCESS__NAMED_EXP:setNamed_exp(NAMED_EXP_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public CGPoint(){  this(0.0f,0.0f);}  }
class C{  public static void monitorEnter(Object obj){  UNSAFE.monitorEnter(obj);}  }
class C{  public boolean isStopped(){  return _lifecycle.isStopped();}  }
class C{  int adjustAcceleratorWidth(int width){  maxAcceleratorWidth=Math.max(maxAcceleratorWidth,width);  return maxAcceleratorWidth;}  }
class C{  public boolean isClientCommand(String command){  return commands.containsKey(command.toLowerCase()) || aliases.containsKey(command.toLowerCase());}  }
class C{  public CharSeq forEachChar(Consumer<Character> action){  Objects.requireNonNull(action);  eachChar().forEach(action);  return this;}  }
class C{  public static void checkSupportedTargetMimeType(VirtualFile targetFile) throws CompilerException {  String[] mimeTypes=getTargetMimeTypes();  for (int i=0, length=mimeTypes.length; i < length; i++) {    if (mimeTypes[i].equals(targetFile.getMimeType())) {      return;    }  }  UnsupportedFileType ex=new UnsupportedFileType(targetFile.getName());  ThreadLocalToolkit.log(ex);  throw ex;}  }
class C{  public static void error(ErrorMessages message){  errors++;  err(NL + "Error: " + ErrorMessages.get(message));}  }
class C{  protected final void assertIdentifier(String errorMessage) throws ParserException {  if (!token.isIdentifier()) {    throwException(errorMessage);  }}  }
class C{  public EvalError toEvalError(String msg,SimpleNode node,CallStack callstack){  if (Interpreter.DEBUG)   printStackTrace();  if (msg == null)   msg=""; else   msg=msg + ": ";  return new EvalError(msg + getMessage(),node,callstack);}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public boolean isSameATOCIndexes(int tocIndex,int entryIndex){  return (tocIndex == tocNumber && entryIndex == entryNumber);}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_ReplaceMissingFilter=new ReplaceMissingValues();  m_ReplaceMissingFilter.setInputFormat(data);  m_instances=Filter.useFilter(data,m_ReplaceMissingFilter);  initMinMax(m_instances);  m_ClusterCentroids=new Instances(m_instances,m_NumClusters);  int n=m_instances.numInstances();  Random r=new Random(getSeed());  boolean[] selected=new boolean[n];  double[] minDistance=new double[n];  for (int i=0; i < n; i++) {    minDistance[i]=Double.MAX_VALUE;  }  int firstI=r.nextInt(n);  m_ClusterCentroids.add(m_instances.instance(firstI));  selected[firstI]=true;  updateMinDistance(minDistance,selected,m_instances,m_instances.instance(firstI));  if (m_NumClusters > n) {    m_NumClusters=n;  }  for (int i=1; i < m_NumClusters; i++) {    int nextI=farthestAway(minDistance,selected);    m_ClusterCentroids.add(m_instances.instance(nextI));    selected[nextI]=true;    updateMinDistance(minDistance,selected,m_instances,m_instances.instance(nextI));  }  m_instances=new Instances(m_instances,0);}  }
class C{  public void synthesise(String utterance){  try {    AudioInputStream audio=tts.generateAudio(utterance);    SpeechData currentOutput=new SpeechData(audio.getFormat());    system.addContent(new Assignment(system.getSettings().systemSpeech,currentOutput));    currentOutput.write(audio);    currentOutput.setAsFinal();  } catch (  SynthesisException e) {    log.warning("Cannot synthesis utterance: " + e);  }}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public Entry createEntryNoteBook(User user,String note,Long createTime,String relatedId,TreeRelType relationship,boolean insertAboveParentsChildren,boolean insertAsFirstChild,boolean isPublic,boolean isAdmin,boolean addSampleNote,Errors errors){  Entry notebook=createEntry(user,null,Constants.notebook,null,null,note,createTime,createTime,relatedId,relationship,insertAboveParentsChildren,insertAsFirstChild,isPublic,false,false,isAdmin,errors);  if (notebook != null && addSampleNote) {    createSimpleEntry(user,errorMessages.textOfFirstNote(),createTime,notebook.getRootId(),TreeRelType.Parent,false,false,false,isAdmin,Constants.note,errors,null);  }  return notebook;}  }
class C{  public ImmutableListMultimap<String,String> parameters(){  return parameters;}  }
class C{  protected void runTLCContinueDoing(int count,int depth) throws Exception {  MP.printMessage(EC.TLC_PROGRESS_STATS_DFID,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size())});  if (count == 0) {    this.reportCoverage(this.workers);    count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;  } else {    count--;  }  this.wait(TLCGlobals.progressInterval);}  }
class C{  public void createVertexAndNormalBuffersOnly(){  mVertices.compact().position(0);  mNormals.compact().position(0);  createBuffer(mVertexBufferInfo,BufferType.FLOAT_BUFFER,mVertices,GLES20.GL_ARRAY_BUFFER);  createBuffer(mNormalBufferInfo,BufferType.FLOAT_BUFFER,mNormals,GLES20.GL_ARRAY_BUFFER);  GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public DefaultActionGroup(ActionManager actionManager,Action... actions){  this(null,false,actionManager);  for (  Action action : actions) {    add(action);  }}  }
class C{  public int ndots(){  if (ndots < 0)   return 1;  return ndots;}  }
class C{  private void runList(){  String opt;  boolean all=false;  boolean brief=false;  while ((opt=nextOption()) != null) {    if (opt.equals("-a")) {      all=true;    } else     if (opt.equals("-s")) {      brief=true;    } else {      System.err.println("Error: Unknown option: " + opt);      showUsage();      return;    }  }  List<InputMethodInfo> methods;  if (!all) {    try {      methods=mImm.getEnabledInputMethodList();    } catch (    RemoteException e) {      System.err.println(e.toString());      System.err.println(IMM_NOT_RUNNING_ERR);      return;    }  } else {    try {      methods=mImm.getInputMethodList();    } catch (    RemoteException e) {      System.err.println(e.toString());      System.err.println(IMM_NOT_RUNNING_ERR);      return;    }  }  if (methods != null) {    Printer pr=new PrintStreamPrinter(System.out);    for (int i=0; i < methods.size(); i++) {      InputMethodInfo imi=methods.get(i);      if (brief) {        System.out.println(imi.getId());      } else {        System.out.println(imi.getId() + ":");        imi.dump(pr,"  ");      }    }  }}  }
class C{  public void writeLELong(long l) throws IOException {  out.write((int)l & 0xFF);  out.write((int)(l >>> 8) & 0xFF);  out.write((int)(l >>> 16) & 0xFF);  out.write((int)(l >>> 24) & 0xFF);  out.write((int)(l >>> 32) & 0xFF);  out.write((int)(l >>> 40) & 0xFF);  out.write((int)(l >>> 48) & 0xFF);  out.write((int)(l >>> 56) & 0xFF);  written+=8;}  }
class C{  public static void writeCollection(XMLOutput xmlOutput,Collection<? extends XMLWriteable> collection) throws IOException {  for (  XMLWriteable obj : collection) {    obj.writeXML(xmlOutput);  }}  }
class C{  public CompressedBlockOutputStream(OutputStream os,int size,int level,int strategy) throws IOException {  super(os);  this.inBuf=new byte[size];  this.outBuf=new byte[size + 64];  this.deflater=new Deflater(level);  this.deflater.setStrategy(strategy);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public synchronized void resumeAll(){  if (Debugger.TRACE) {    trace("resume all threads");  }  if (closed) {    throw new IllegalStateException("session closed");  }  clearStrategies();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.024 -0500",hash_original_method="E9EBA1A345E6EC087EE2D65CFFC68545",hash_generated_method="509B6A515B76550498F8ACB94D6F9894") public static void fill(char[] array,int start,int end,char value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static void fullyBootedVM(){  int spaceCount=Space.getSpaceCount();  pools=new HashMap<String,Integer>(spaceCount * 2);  Space[] spaces=Space.getSpaces();  for (int i=0; i < spaceCount; i++) {    pools.put(spaces[i].getName(),i);  }  poolNames=pools.keySet().toArray(new String[spaceCount]);}  }
class C{  public static File createTempFile(File directory) throws IOException {  return File.createTempFile(PREFIX,SUFFIX,directory);}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage,TaskState.SubStage subStage){  if (current.isSelfProgressionDisabled) {    return;  }  sendSelfPatch(buildPatch(stage,subStage,null));}  }
class C{  public void addChangeListener(ChangeListener l){  m_ChangeListeners.add(l);}  }
class C{  public TSPPanel(TSPInstance problem){  super();  this.problem=problem;  if (DisplayDataType.NO_DISPLAY.equals(problem.getDisplayDataType())) {    throw new IllegalArgumentException("problem instance does not support a graphical display");  }  tours=new LinkedHashMap<Tour,TourDisplaySetting>();  nodeWidth=4.0;  insets=new Insets((int)nodeWidth,(int)nodeWidth,(int)nodeWidth,(int)nodeWidth);  autoRepaint=true;  setBackground(Color.WHITE);  setForeground(Color.BLACK);}  }
class C{  public String toKeyString(){  return (nodeId.toString() + "|" + portId.toString());}  }
class C{  public static void i(String msg){  if (BuildConfig.DEBUG)   android.util.Log.i(TAG,buildMessage(msg));}  }
class C{  public static BigdataGraph create(final BlueprintsValueFactory vf,final Properties props) throws Exception {  final BigdataSail sail=(BigdataSail)BigdataSailFactory.createSail();  sail.initialize();  return new BigdataGraphEmbedded(sail,vf,props);}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public long restoreDeletedServerConfiguration(final String name){  mSingleArg[0]=name;  final ContentValues values=mValues;  values.clear();  values.put(ConfigurationContract.Configuration.DELETED,0);  mDatabase.update(Tables.CONFIGURATIONS,values,NAME_SELECTION,mSingleArg);  final Cursor cursor=mDatabase.query(Tables.CONFIGURATIONS,ID_PROJECTION,NAME_SELECTION,mSingleArg,null,null,null);  try {    if (cursor.moveToNext())     return cursor.getLong(0);    return -1;  }  finally {    cursor.close();  }}  }
class C{  public APIConnectionRecord(ConnectionRecord record){  this.connectionIdentifier=record.getConnectionIdentifier();  this.connectionName=record.getConnectionName();  this.sharingProfileIdentifier=record.getSharingProfileIdentifier();  this.sharingProfileName=record.getSharingProfileName();  this.startDate=record.getStartDate();  this.endDate=record.getEndDate();  this.remoteHost=record.getRemoteHost();  this.username=record.getUsername();  this.active=record.isActive();}  }
class C{  public static String stringFor(int m){switch (m) {case cudaResViewFormatNone:    return "cudaResViewFormatNone";case cudaResViewFormatUnsignedChar1:  return "cudaResViewFormatUnsignedChar1";case cudaResViewFormatUnsignedChar2:return "cudaResViewFormatUnsignedChar2";case cudaResViewFormatUnsignedChar4:return "cudaResViewFormatUnsignedChar4";case cudaResViewFormatSignedChar1:return "cudaResViewFormatSignedChar1";case cudaResViewFormatSignedChar2:return "cudaResViewFormatSignedChar2";case cudaResViewFormatSignedChar4:return "cudaResViewFormatSignedChar4";case cudaResViewFormatUnsignedShort1:return "cudaResViewFormatUnsignedShort1";case cudaResViewFormatUnsignedShort2:return "cudaResViewFormatUnsignedShort2";case cudaResViewFormatUnsignedShort4:return "cudaResViewFormatUnsignedShort4";case cudaResViewFormatSignedShort1:return "cudaResViewFormatSignedShort1";case cudaResViewFormatSignedShort2:return "cudaResViewFormatSignedShort2";case cudaResViewFormatSignedShort4:return "cudaResViewFormatSignedShort4";case cudaResViewFormatUnsignedInt1:return "cudaResViewFormatUnsignedInt1";case cudaResViewFormatUnsignedInt2:return "cudaResViewFormatUnsignedInt2";case cudaResViewFormatUnsignedInt4:return "cudaResViewFormatUnsignedInt4";case cudaResViewFormatSignedInt1:return "cudaResViewFormatSignedInt1";case cudaResViewFormatSignedInt2:return "cudaResViewFormatSignedInt2";case cudaResViewFormatSignedInt4:return "cudaResViewFormatSignedInt4";case cudaResViewFormatHalf1:return "cudaResViewFormatHalf1";case cudaResViewFormatHalf2:return "cudaResViewFormatHalf2";case cudaResViewFormatHalf4:return "cudaResViewFormatHalf4";case cudaResViewFormatFloat1:return "cudaResViewFormatFloat1";case cudaResViewFormatFloat2:return "cudaResViewFormatFloat2";case cudaResViewFormatFloat4:return "cudaResViewFormatFloat4";case cudaResViewFormatUnsignedBlockCompressed1:return "cudaResViewFormatUnsignedBlockCompressed1";case cudaResViewFormatUnsignedBlockCompressed2:return "cudaResViewFormatUnsignedBlockCompressed2";case cudaResViewFormatUnsignedBlockCompressed3:return "cudaResViewFormatUnsignedBlockCompressed3";case cudaResViewFormatUnsignedBlockCompressed4:return "cudaResViewFormatUnsignedBlockCompressed4";case cudaResViewFormatSignedBlockCompressed4:return "cudaResViewFormatSignedBlockCompressed4";case cudaResViewFormatUnsignedBlockCompressed5:return "cudaResViewFormatUnsignedBlockCompressed5";case cudaResViewFormatSignedBlockCompressed5:return "cudaResViewFormatSignedBlockCompressed5";case cudaResViewFormatUnsignedBlockCompressed6H:return "cudaResViewFormatUnsignedBlockCompressed6H";case cudaResViewFormatSignedBlockCompressed6H:return "cudaResViewFormatSignedBlockCompressed6H";case cudaResViewFormatUnsignedBlockCompressed7:return "cudaResViewFormatUnsignedBlockCompressed7";}return "INVALID cudaResourceViewFormat: " + m;}  }
class C{  public void updateFrameTitle(){  if (getParentFrame() != null) {    getParentFrame().setTitle(getFrameTitle());  }  if (getParentInternalFrame() != null) {    getParentInternalFrame().setTitle(getFrameTitle());  }}  }
class C{  protected int nextInNotation() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':nextChar();context=DTD_DECLARATIONS_CONTEXT;return LexicalUnits.END_CHAR;case '%':int t=readName(LexicalUnits.PARAMETER_ENTITY_REFERENCE);if (current != ';') {throw createXMLException("malformed.parameter.entity");}nextChar();return t;case 'S':return readIdentifier("YSTEM",LexicalUnits.SYSTEM_IDENTIFIER,LexicalUnits.NAME);case 'P':return readIdentifier("UBLIC",LexicalUnits.PUBLIC_IDENTIFIER,LexicalUnits.NAME);case '"':attrDelimiter='"';return readString();case '\'':attrDelimiter='\'';return readString();default :return readName(LexicalUnits.NAME);}}  }
class C{  private BitmapUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public VisibilityAwareMemberScope(IScope parent,MemberVisibilityChecker checker,TypeRef receiverType,EObject context){  super(parent);  this.checker=checker;  this.receiverType=receiverType;  this.context=context;}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public WsProxyInfo(String serviceClientFile,String serviceName,String tokenHandlerFile){  if (serviceClientFile == null || serviceClientFile.trim().length() == 0 || serviceName == null || serviceName.trim().length() == 0) {    logger.warn("Error: empty parameters[file: " + serviceClientFile + " service: "+ serviceName+ "]");    return;  }  tokenHandlerProp=PropertyFileReader.getPropertiesFromFile(tokenHandlerFile);  if (tokenHandlerProp == null) {    logger.warn("Cannot read property file: " + tokenHandlerFile);    return;  }  serviceClientProp=PropertyFileReader.getPropertiesFromFile(serviceClientFile);  if (serviceClientProp == null) {    logger.warn("Cannot read property file: " + serviceClientFile);    return;  }  wsInfo=new WsInfo();  wsInfo.setServiceName(serviceName);  logger.debug("service name: " + serviceName);  readWsProxyProperties();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.358 -0500",hash_original_method="E806564A12DA7CFA1DDB69B8445E1F80",hash_generated_method="B28FC58B263318953D060DBEAA11191B") private boolean internalIsLoggable(Level l){  int effectiveLevel=levelIntVal;  if (effectiveLevel == Level.OFF.intValue()) {    return false;  }  return l.intValue() >= effectiveLevel;}  }
class C{  public void sort(){  Arrays.sort(data,0,count);}  }
class C{  public void addFieldFocusListener(FocusListener listener){  this.listeners.add(listener);}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  public mxGraphics2DCanvas(Graphics2D g){  this.g=g;  try {    rendererPane=new CellRendererPane();  } catch (  Exception e) {  }}  }
class C{  public AttributeStore(){}  }
class C{  @Override public List<byte[]> lrange(final byte[] key,final long start,final long end){  checkIsInMultiOrPipeline();  client.lrange(key,start,end);  return client.getBinaryMultiBulkReply();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public void encode(OutputStream out) throws IOException {  encode(out,PKIXExtensions.CRLDistributionPoints_Id,false);}  }
class C{  public void decodeMessage(byte[] inputBytes,int byteCount) throws SnmpStatusException {  try {    BerDecoder bdec=new BerDecoder(inputBytes);    bdec.openSequence();    version=bdec.fetchInteger();    community=bdec.fetchOctetString();    data=bdec.fetchAny();    dataLength=data.length;    bdec.closeSequence();  } catch (  BerException x) {    throw new SnmpStatusException("Invalid encoding");  }}  }
class C{  @Bean public ClusterSelector clusterSelector(){  Map<String,Cluster> clusterMap=new HashMap<>();  clusterMap.put("exploringaxon.eventhandler",normalCluster());  clusterMap.put("exploringaxon.replay",replayCluster());  return new ClassNamePrefixClusterSelector(clusterMap);}  }
class C{  public boolean isPrependId(){  return (Boolean)getStateHelper().eval(PropertyKeys.prependId,true);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateBucket(@PathParam("id") URI id,BucketUpdateParam param) throws InternalException {  Bucket bucket=null;  ArgValidator.checkFieldUriType(id,Bucket.class,"id");  bucket=_dbClient.queryObject(Bucket.class,id);  ArgValidator.checkEntity(bucket,id,isIdEmbeddedInURL(id));  Long softQuota=SizeUtil.translateSize(param.getSoftQuota());  Long hardQuota=SizeUtil.translateSize(param.getHardQuota());  Integer retention=null != param.getRetention() ? Integer.valueOf(param.getRetention()) : 0;  if (softQuota == 0) {    softQuota=bucket.getSoftQuota();  }  if (hardQuota == 0) {    hardQuota=bucket.getHardQuota();  }  verifyQuotaValues(softQuota,hardQuota,bucket.getLabel());  if (retention == 0) {    retention=bucket.getRetention();  }  VirtualPool cos=_dbClient.queryObject(VirtualPool.class,bucket.getVirtualPool());  if (retention != 0 && cos.getMaxRetention() != 0 && retention > cos.getMaxRetention()) {    throw APIException.badRequests.insufficientRetentionForVirtualPool(cos.getLabel(),"bucket");  }  String task=UUID.randomUUID().toString();  _log.info(String.format("BucketUpdate --- Bucket id: %1$s, Task: %2$s",id,task));  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,bucket.getStorageDevice());  Operation op=_dbClient.createTaskOpStatus(Bucket.class,bucket.getId(),task,ResourceOperationTypeEnum.UPDATE_BUCKET);  op.setDescription("Bucket update");  ObjectController controller=getController(ObjectController.class,storageSystem.getSystemType());  controller.updateBucket(bucket.getStorageDevice(),id,softQuota,hardQuota,retention,task);  auditOp(OperationTypeEnum.UPDATE_BUCKET,true,AuditLogManager.AUDITOP_BEGIN,bucket.getId().toString(),bucket.getStorageDevice().toString());  return toTask(bucket,task,op);}  }
class C{  static void writeIndex(final SequenceIndexContainer container,final OutputStream output) throws IOException {  final List<SequenceIndex> indexs=container.getIndexes();  final byte[] header={(byte)'B',(byte)'A',(byte)'I',1};  final byte[] buf=new byte[1024];  output.write(header);  ByteArrayIOUtils.intToBytesLittleEndian(indexs.size(),buf,0);  output.write(buf,0,4);  for (  final SequenceIndex bai : indexs) {    ByteArrayIOUtils.intToBytesLittleEndian(bai.getBins().size(),buf,0);    output.write(buf,0,4);    for (    final Map.Entry<Integer,ArrayList<SequenceIndexChunk>> entry : bai.getBins().entrySet()) {      ByteArrayIOUtils.intToBytesLittleEndian(entry.getKey(),buf,0);      output.write(buf,0,4);      final ArrayList<SequenceIndexChunk> chunks=entry.getValue();      ByteArrayIOUtils.intToBytesLittleEndian(chunks.size(),buf,0);      output.write(buf,0,4);      TabixIndexer.writeChunks(output,chunks,buf);    }    ByteArrayIOUtils.intToBytesLittleEndian(bai.getLinearSize(),buf,0);    output.write(buf,0,4);    for (int j=0; j < bai.getLinearSize(); j++) {      ByteArrayIOUtils.longToBytesLittleEndian(bai.getLinearIndex(j),buf,0);      output.write(buf,0,8);    }  }  ByteArrayIOUtils.longToBytesLittleEndian(container.numUnmappedNoCoordinates(),buf,0);  output.write(buf,0,8);}  }
class C{  public final void testRemoveHelperTextColorsFromCollection(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  int helperTextColor3=Color.WHITE;  Collection<Integer> helperTextColors=new LinkedList<>();  helperTextColors.add(helperTextColor1);  helperTextColors.add(helperTextColor2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColors(helperTextColors);  passwordEditText.addHelperTextColor(helperTextColor3);  passwordEditText.removeAllHelperTextColors(helperTextColors);  passwordEditText.removeAllHelperTextColors(helperTextColors);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(helperTextColor3,(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  public MissingValue(MissingValueNonNominalType type){  this.type=MissingValueType.valueOf(type.name());}  }
class C{  @Nullable @Override public IContextInformation[] computeContextInformation(ITextViewer viewer,int documentOffset){  SQLQuery statementInfo=editor.extractQueryAtPos(documentOffset);  if (statementInfo == null || CommonUtils.isEmpty(statementInfo.getQuery())) {    return null;  }  IContextInformation[] result=new IContextInformation[1];  result[0]=new ContextInformation(statementInfo.getQuery(),statementInfo.getQuery());  return result;}  }
class C{  public void dispose(){  for (  final ListenerWrapper wrapper : m_wrappers) {    m_database.getContent().getDebuggerTemplateManager().removeListener(wrapper);  }}  }
class C{  public void attributeReplaced(ServletContextAttributeEvent event){  ServletContext context=event.getServletContext();  String attrName=event.getName();  Object newValue=context.getAttribute(attrName);  if (event.getValue() != newValue) {    handleAttributeEvent(attrName,event.getValue(),ELUtils.Scope.APPLICATION);  }}  }
class C{  public sun.net.ftp.FtpClient putFile(String name,InputStream local,boolean unique) throws sun.net.ftp.FtpProtocolException, IOException {  String cmd=unique ? "STOU " : "STOR ";  int mtu=1500;  if (type == TransferType.BINARY) {    Socket s=openDataConnection(cmd + name);    OutputStream remote=createOutputStream(s.getOutputStream());    byte[] buf=new byte[mtu * 10];    int l;    while ((l=local.read(buf)) >= 0) {      if (l > 0) {        remote.write(buf,0,l);      }    }    remote.close();  }  return completePending();}  }
class C{  private InterestType(String name,byte interestType){  this.name=name;  this.interestType=interestType;  this.ordinal=nextOrdinal++;  VALUES[this.ordinal]=this;}  }
class C{  public ForgeChunk_All(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public boolean isVertexBufferObjectEnabled(){  return this.isVertexBufferObjectEnabled;}  }
class C{  public void findTypes(char[] prefix,final boolean findMembers,boolean camelCaseMatch,int searchFor,final ISearchRequestor storage){  findTypes(prefix,findMembers,camelCaseMatch,searchFor,storage,null);}  }
class C{  public boolean hasSequence(GenericClass clazz){  if (pool.containsKey(clazz))   return true;  for (  GenericClass poolClazz : pool.keySet()) {    if (poolClazz.isAssignableTo(clazz))     return true;  }  return false;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.919 -0400",hash_original_method="C7BCA488F553457389C8980637630468",hash_generated_method="BD9165060D8477FEE4401F2563C4F2FB") @Override public void write(char[] cbuf,int off,int len) throws IOException {  if (xmlPrologWriter != null) {    detectEncoding(cbuf,off,len);  } else {    writer.write(cbuf,off,len);  }}  }
class C{  public ArrayBasedSet(E[] A,int capacity){  this(A,capacity,null);}  }
class C{  @Override public int size(){  return count;}  }
class C{  public Object deserialize(String strWddx,boolean validate) throws ConverterException, IOException, FactoryConfigurationError {  try {    DOMParser parser=new DOMParser();    if (validate)     parser.setEntityResolver(new WDDXEntityResolver());    parser.parse(new InputSource(new StringReader(strWddx)));    Document doc=parser.getDocument();    NodeList docChldren=doc.getChildNodes();    Node wddxPacket=doc;    int len=docChldren.getLength();    for (int i=0; i < len; i++) {      Node node=docChldren.item(i);      if (node.getNodeName().equalsIgnoreCase("wddxPacket")) {        wddxPacket=node;        break;      }    }    NodeList nl=wddxPacket.getChildNodes();    int n=nl.getLength();    for (int i=0; i < n; i++) {      Node data=nl.item(i);      if (data.getNodeName().equals("data")) {        NodeList list=data.getChildNodes();        len=list.getLength();        for (int y=0; y < len; y++) {          Node node=list.item(y);          if (node instanceof Element)           return _deserialize((Element)node);        }      }    }    throw new IllegalArgumentException("Invalid WDDX Format: node 'data' not found in WDD packet");  } catch (  org.xml.sax.SAXException sxe) {    throw new IllegalArgumentException("XML Error: " + sxe.toString());  }}  }
class C{  public static _WorkspaceMappingType fromString(final String value) throws SOAPSerializationException {  return (_WorkspaceMappingType)Enumeration.fromString(value,_WorkspaceMappingType.VALUES_TO_INSTANCES);}  }
class C{  protected void analyzeDtoSetterMethod(Method method,MethodModel methodModel){  methodModel.setSetter(true);  Type fieldType=method.getGenericParameterTypes()[0];  String fieldName=getSetterFieldName(method);  fieldAttributes.put(fieldName,fieldType);  methodModel.setFieldName(fieldName);  methodModel.setFieldType(convertType(fieldType));}  }
class C{  public void reset(){  progress=0;  bytesRead=0;  forceUpdateProgress();}  }
class C{  private void insertOrder(String orderId,String productId,PurchaseState state,long purchaseTime,String developerPayload){  ContentValues values=new ContentValues();  values.put(HISTORY_ORDER_ID_COL,orderId);  values.put(HISTORY_PRODUCT_ID_COL,productId);  values.put(HISTORY_STATE_COL,state.ordinal());  values.put(HISTORY_PURCHASE_TIME_COL,purchaseTime);  values.put(HISTORY_DEVELOPER_PAYLOAD_COL,developerPayload);  mDb.replace(PURCHASE_HISTORY_TABLE_NAME,null,values);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean hasInCache(IType type){  return findTypeHierarchyInCache(type) != null;}  }
class C{  public void add(Map values) throws SQLException {  getResultSet().moveToInsertRow();  for (Iterator iter=values.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=(Map.Entry)iter.next();    getResultSet().updateObject(entry.getKey().toString(),entry.getValue());  }  getResultSet().insertRow();}  }
class C{  public void addMiddle(StreetSegment streetSegment,Transfer transfer){  TransitSegment transitSegment=transit.get(transfer.transitSegmentIndex);  transitSegment.addMiddle(streetSegment);  for (  Itinerary currentItinerary : this.itinerary) {    currentItinerary.addWalkTime(streetSegment.duration);    currentItinerary.distance+=streetSegment.distance;  }}  }
class C{  private JSSecurityManager(){}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private static void time(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO,boolean reducedPrec,boolean datePresent){  boolean hour=fields.remove(DateTimeFieldType.hourOfDay());  boolean minute=fields.remove(DateTimeFieldType.minuteOfHour());  boolean second=fields.remove(DateTimeFieldType.secondOfMinute());  boolean milli=fields.remove(DateTimeFieldType.millisOfSecond());  if (!hour && !minute && !second&& !milli) {    return;  }  if (hour || minute || second|| milli) {    if (strictISO && reducedPrec) {      throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: " + fields);    }    if (datePresent) {      bld.appendLiteral('T');    }  }  if (hour && minute && second || (hour && !second && !milli)) {  } else {    if (strictISO && datePresent) {      throw new IllegalArgumentException("No valid ISO8601 format for fields because Time was truncated: " + fields);    }    if (!hour && (minute && second || (minute && !milli) || second)) {    } else {      if (strictISO) {        throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);      }    }  }  if (hour) {    bld.appendHourOfDay(2);  } else   if (minute || second || milli) {    bld.appendLiteral('-');  }  if (extended && hour && minute) {    bld.appendLiteral(':');  }  if (minute) {    bld.appendMinuteOfHour(2);  } else   if (second || milli) {    bld.appendLiteral('-');  }  if (extended && minute && second) {    bld.appendLiteral(':');  }  if (second) {    bld.appendSecondOfMinute(2);  } else   if (milli) {    bld.appendLiteral('-');  }  if (milli) {    bld.appendLiteral('.');    bld.appendMillisOfSecond(3);  }}  }
class C{  private MobileDoc createFirstPage(Properties cProp,HttpServletRequest request,String errorMessage){  log.info(" - " + errorMessage);  String AD_Language=(cProp.getProperty(Env.LANGUAGE,Language.getAD_Language(request.getLocale())));  String windowTitle=Msg.getMsg(AD_Language,"Login");  String usrText=Msg.getMsg(AD_Language,"User");  String pwdText=Msg.getMsg(AD_Language,"Password");  String lngText=Msg.translate(AD_Language,"AD_Language");  String action=request.getRequestURI();  form myForm=null;  myForm=new form(action).setName("Login1");  myForm.setID(windowTitle);  myForm.setTitle(windowTitle);  myForm.addAttribute("selected","true");  myForm.setClass("panel");  myForm.setMethod("post");  myForm.addAttribute("autocomplete","off");  fieldset fs=new fieldset();  div div1=new div();  div1.setClass("row");  String userData=cProp.getProperty(P_USERNAME,"");  label usrLabel=new label().setFor(P_USERNAME + "F").addElement(usrText);  usrLabel.setID(P_USERNAME + "L");  div1.addElement(usrLabel);  input usr=new input(input.TYPE_TEXT,P_USERNAME,userData).setSize(20).setMaxlength(30);  usr.setID(P_USERNAME + "F");  div1.addElement(usr);  fs.addElement(div1);  div1=new div();  div1.setClass("row");  String pwdData=cProp.getProperty(P_PASSWORD,"");  label pwdLabel=new label().setFor(P_PASSWORD + "F").addElement(pwdText);  pwdLabel.setID(P_PASSWORD + "L");  div1.addElement(pwdLabel);  input pwd=new input(input.TYPE_PASSWORD,P_PASSWORD,pwdData).setSize(20).setMaxlength(30);  pwd.setID(P_PASSWORD + "F");  div1.addElement(pwd);  fs.addElement(div1);  div1=new div();  div1.setClass("row");  label langLabel=new label().setFor(Env.LANGUAGE + "F").addElement(lngText);  langLabel.setID(Env.LANGUAGE + "L");  div1.addElement(langLabel);  option options[]=new option[Language.getLanguageCount()];  for (int i=0; i < Language.getLanguageCount(); i++) {    Language language=Language.getLanguage(i);    options[i]=new option(language.getAD_Language()).addElement(Util.maskHTML(language.getName()));    if (language.getAD_Language().equals(AD_Language))     options[i].setSelected(true); else     options[i].setSelected(false);  }  div1.addElement(new select(Env.LANGUAGE,options).setID(Env.LANGUAGE + "F"));  fs.addElement(div1);  div1=new div();  div1.setClass("row");  if (errorMessage != null && errorMessage.length() > 0) {    div1=new div();    div1.setClass("row");    div1.addElement(new font(HtmlColor.red,4).addElement(new b(errorMessage)));    fs.addElement(div1);  }  myForm.addElement(fs);  a button=new a("#",windowTitle);  button.addAttribute("type","submit");  button.setClass("whiteButton");  myForm.addElement(button);  MobileDoc doc=MobileDoc.createWindow(windowTitle);  div div=new div();  div.setClass("toolbar");  h1 header=new h1();  header.setID("pageTitle");  div.addElement(header);  a anchor=new a();  anchor.setID("backButton");  anchor.setClass("button");  div.addElement(anchor);  doc.getBody().addElement(myForm).addElement(div).setTitle(windowTitle);  doc.getHead().addElement(new script((Element)null,MobileEnv.getBaseDirectory("/js/login.js")));  return doc;}  }
class C{  public DeleteRepositoryRequestBuilder(ElasticsearchClient client,DeleteRepositoryAction action,String name){  super(client,action,new DeleteRepositoryRequest(name));}  }
class C{  protected ForwardingFileObject(F fileObject){  fileObject.getClass();  this.fileObject=fileObject;}  }
class C{  public static final double[] pointFromLonLatBearing(double lon,double lat,double bearing,double dist,double[] pt){  if (pt == null) {    pt=new double[2];  }  final double alpha1=StrictMath.toRadians(bearing);  final double cosA1=StrictMath.cos(alpha1);  final double sinA1=StrictMath.sin(alpha1);  final double tanU1=(1 - FLATTENING) * StrictMath.tan(StrictMath.toRadians(lat));  final double cosU1=1 / StrictMath.sqrt((1 + tanU1 * tanU1));  final double sinU1=tanU1 * cosU1;  final double sig1=StrictMath.atan2(tanU1,cosA1);  final double sinAlpha=cosU1 * sinA1;  final double cosSqAlpha=1 - sinAlpha * sinAlpha;  final double uSq=cosSqAlpha * (SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / SEMIMINOR_AXIS2;  final double A=1 + uSq / 16384D * (4096D + uSq * (-768D + uSq * (320D - 175D * uSq)));  final double B=uSq / 1024D * (256D + uSq * (-128D + uSq * (74D - 47D * uSq)));  double sigma=dist / (SEMIMINOR_AXIS * A);  double sigmaP;  double sinSigma, cosSigma, cos2SigmaM, deltaSigma;  do {    cos2SigmaM=StrictMath.cos(2 * sig1 + sigma);    sinSigma=StrictMath.sin(sigma);    cosSigma=StrictMath.cos(sigma);    deltaSigma=B * sinSigma * (cos2SigmaM + (B / 4D) * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - (B / 6) * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma)* (-3 + 4 * cos2SigmaM * cos2SigmaM)));    sigmaP=sigma;    sigma=dist / (SEMIMINOR_AXIS * A) + deltaSigma;  } while (StrictMath.abs(sigma - sigmaP) > 1E-12);  final double tmp=sinU1 * sinSigma - cosU1 * cosSigma * cosA1;  final double lat2=StrictMath.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosA1,(1 - FLATTENING) * StrictMath.sqrt(sinAlpha * sinAlpha + tmp * tmp));  final double lambda=StrictMath.atan2(sinSigma * sinA1,cosU1 * cosSigma - sinU1 * sinSigma * cosA1);  final double c=FLATTENING / 16 * cosSqAlpha * (4 + FLATTENING * (4 - 3 * cosSqAlpha));  final double lam=lambda - (1 - c) * FLATTENING * sinAlpha* (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));  pt[0]=lon + StrictMath.toDegrees(lam);  pt[1]=StrictMath.toDegrees(lat2);  return pt;}  }
class C{  public static char[] toCharArray(int[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  public void writeLock0(){  long threadId=Thread.currentThread().getId();  if (threadId == writeLockOwner) {    assert state == -1;    writeLockEntryCnt++;    return;  }  while (true) {    int pendingWLocks0=pendingWLocks;    if (compareAndSet(PENDING_WLOCKS_OFFS,pendingWLocks0,pendingWLocks0 + 1))     break;  }  for (; ; ) {    if (compareAndSet(STATE_OFFS,0,-1))     break;  }  while (true) {    int pendingWLocks0=pendingWLocks;    assert pendingWLocks0 > 0;    if (compareAndSet(PENDING_WLOCKS_OFFS,pendingWLocks0,pendingWLocks0 - 1))     break;  }  assert writeLockOwner == -1;  writeLockOwner=threadId;  writeLockEntryCnt=1;}  }
class C{  public void postVisit(TextEdit edit){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  GetField gf=s.readFields();  String protocol=(String)gf.get("protocol",null);  if (getURLStreamHandler(protocol) == null) {    throw new IOException("unknown protocol: " + protocol);  }  String host=(String)gf.get("host",null);  int port=gf.get("port",-1);  String authority=(String)gf.get("authority",null);  String file=(String)gf.get("file",null);  String ref=(String)gf.get("ref",null);  int hashCode=gf.get("hashCode",-1);  if (authority == null && ((host != null && host.length() > 0) || port != -1)) {    if (host == null)     host="";    authority=(port == -1) ? host : host + ":" + port;  }  tempState=new UrlDeserializedState(protocol,host,port,authority,file,ref,hashCode);}  }
class C{  public Object executeScript(final Script script,final ScriptContext context){  final ScriptEngine engine=scriptEngineProvider.getScriptEngine(script.getType());  return executeScript(script,engine,context);}  }
class C{  @Override public long extractTime(Object tuple,boolean isStream1Data){  return timeFields == null ? time : (long)(isStream1Data ? inputFieldObjects[0].timeFieldGet.get(tuple) : inputFieldObjects[1].timeFieldGet.get(tuple));}  }
class C{  @Override public SnmpInformRequest snmpInformRequest(InetAddress addr,String cs,SnmpInformHandler cb,SnmpOid trapOid,SnmpVarBindList varBindList) throws IllegalStateException, IOException, SnmpStatusException {  return snmpInformRequest(addr,getInformPort(),cs,cb,trapOid,varBindList);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== IndexEntryArray ======================\n");  sb.append(this.header.toString());  for (  IndexEntry indexEntry : indexEntries) {    sb.append(indexEntry.toString());  }  return sb.toString();}  }
class C{  public boolean isValueTypeString(){  return valueType == ParameterValueType.STRING;}  }
class C{  public CTagsTree(final JFrame parent,final ZyGraph graph,final ITagManager manager){  m_parent=Preconditions.checkNotNull(parent,"IE02308: Perent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01776: Graph can not be null");  m_tagManager=Preconditions.checkNotNull(manager,"IE01777: Manager argument can not be null");  m_model=new CTagsTreeModel(this);  setModel(m_model);  getModel().addTreeModelListener(new InternalModelListener());  addMouseListener(m_mouseListener);  m_graph.addListener(m_graphSelectionListener);  m_graph.addListener(m_graphVisibilityListener);  setRootVisible(false);  m_rootNode=new CRootTagTreeNode(parent,this,graph,m_tagManager);  m_model.setRoot(m_rootNode);  setCellRenderer(new CTagTreeCellRenderer());  m_model.nodeStructureChanged(m_rootNode);  final List<IDropHandler> handlers=new ArrayList<IDropHandler>();  handlers.add(new CTagSortingHandler());  new CDefaultTransferHandler(this,DnDConstants.ACTION_COPY_OR_MOVE,handlers);  final DefaultTreeSelectionModel selectionModel=new DefaultTreeSelectionModel();  selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);  setSelectionModel(selectionModel);  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.DELETE_HK.getKeyStroke(),"DELETE");  getActionMap().put("DELETE",CActionProxy.proxy(new DeleteAction()));}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new ClassicAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public static <T>void notEmpty(T[] str,String message,Object... params) throws AssertException {  if (CommonUtil.isEmpty(str)) {    throw new AssertException(ErrorCodeDef.IS_NULL_20006,message,params);  }}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  if (WWUtil.isEmpty(labels))   return;  TacticalGraphicLabel startLabel=this.labels.get(0);  TacticalGraphicLabel endLabel=this.labels.get(1);  startLabel.setPosition(this.position1);  endLabel.setPosition(this.position2);}  }
class C{  public void dispose(){  m_model.removeListener(m_listener);}  }
class C{  public JDBCCategoryDataset(Connection connection){  if (connection == null) {    throw new NullPointerException("A connection must be supplied.");  }  this.connection=connection;}  }
class C{  private void addMenuBar(){  menuBar.add(file);  file.add(new OpenAction(this));  file.add(new SaveAction(this));  file.add(new SaveAsAction(this));  file.addSeparator();  file.add(TextWorldActions.getTextAction(world));  file.addSeparator();  file.add(new CloseAction(this.getWorkspaceComponent()));  loadDictionary.setAction(TextWorldActions.getExtractDictionaryAction(world));  showDictionary.setAction(TextWorldActions.showDictionaryEditor(world));  preferences.setAction(TextWorldActions.getShowPreferencesDialogAction(world));  edit.add(loadDictionary);  edit.add(showDictionary);  edit.addSeparator();  edit.add(preferences);  menuBar.add(edit);  menuBar.add(help);  ShowHelpAction helpAction=new ShowHelpAction("Pages/Worlds/TextWorld/TextWorld.html");  helpItem.setAction(helpAction);  help.add(helpItem);  getParentFrame().setJMenuBar(menuBar);}  }
class C{  public static String parseJsonMessage(String parsedMessage){  try {    JSONValue message=JSONParser.parseStrict(parsedMessage).isObject().get("message");    return message.isString().stringValue();  } catch (  Exception e) {    return parsedMessage;  }}  }
class C{  public void onWallOpened(){  if (ENABLED) {    trackOpt("When the post is opened",null);  }}  }
class C{  public <U>Optional<U> map(Function<? super T,? extends U> mapper){  if (!isPresent())   return empty();  return Optional.ofNullable(mapper.apply(value));}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("outfit")) {    outfit=OUTFIT_UNSET;    fireChange(PROP_OUTFIT);  }  for (  StatusID status : statuses) {    if (changes.has(status.getAttribute())) {      setStatus(status,false);    }  }  setEatAndChoke(false,changes.has("eating"),changes.has("choking"));  if (changes.has("ghostmode")) {    ghostmode=false;    fireChange(PROP_GHOSTMODE);  }  if (changes.has("target")) {    onStopAttack();    if (attackTarget != null) {      attackTarget.onStopAttacked(this);      attackTarget=null;    }  }  if (changes.has("unnamed")) {    showTitle=true;    fireChange(PROP_TITLE);  }  if (changes.has("no_hpbar")) {    showHP=true;    fireChange(PROP_HP_DISPLAY);  }}  }
class C{  private int findBestBucket(){  Bucket[] buckets=_collList;  int bestCount=Integer.MAX_VALUE;  int bestIx=-1;  for (int i=0, len=_collEnd; i < len; ++i) {    int count=buckets[i].length();    if (count < bestCount) {      if (count == 1) {        return i;      }      bestCount=count;      bestIx=i;    }  }  return bestIx;}  }
class C{  public void compileBatch(String[] files) throws IOException, ClassNotFoundException {  if (_compileParent) {    try {      if (_loader instanceof Make)       ((Make)_loader).make();    } catch (    Exception e) {      throw new IOException(e);    }  }  if (files.length == 0)   return;  int batchCount=_maxBatch;  if (batchCount < 0)   batchCount=Integer.MAX_VALUE / 2; else   if (batchCount == 0)   batchCount=1;  IOException exn=null;  ArrayList<String> uniqueFiles=new ArrayList<String>();  for (int i=0; i < files.length; i++) {    if (!uniqueFiles.contains(files[i]))     uniqueFiles.add(files[i]);  }  files=new String[uniqueFiles.size()];  uniqueFiles.toArray(files);  LineMap lineMap=null;  _compilerService.compile(this,files,lineMap);}  }
class C{  public String toString(){  if (algId == null)   return "";  return (algId.toString() + ", OID = " + (algId.getOID()).toString()+ "\n");}  }
class C{  public Cpc(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public void graph(StringBuffer text){  assignIDs(-1);  graphTree(text);}  }
class C{  public static void addMultCol(Matrix A,int j,int start,int to,double t,Vec c){  for (int i=start; i < to; i++)   A.increment(i,j,c.get(i) * t);}  }
class C{  public static View inflateMe(ViewGroup parent,@LayoutRes int resource){  return LayoutInflater.from(parent.getContext()).inflate(resource,null,false);}  }
class C{  public void clear(){  serviceNameMap.clear();}  }
class C{  public InvalidAttributeValueException(){  super();}  }
class C{  public static ICounter createCounter(ICounter copy){  if (copy == null || copy.getCounterDate() == null || copy.getCounterValue() == null) {    return null;  }  SimpleCounter cc=new SimpleCounter(copy.getCounterDate(),copy.getCounterValue().getType());  cc.setCounter(copy.getCounterDate(),copy.getCounterValue());  return cc;}  }
class C{  public void replacePlaceholderPhase(short placeHolderPhase,int newScheduledPhase){  ComplexPhase cp=(ComplexPhase)Phase.getPhase(collection);  cp.replacePhase(Phase.schedulePlaceholder(placeHolderPhase),newScheduledPhase);}  }
class C{  public Evaluator(){  super();}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public SocialProofTypesFilter(StatsReceiver statsReceiver){  super(statsReceiver);}  }
class C{  public void unsubscribe() throws Exception {  String[] topics=new String[1];  topics[0]=REQ_TOPIC;synchronized (subLock) {    wmqttClient.unsubscribe(topics);    subLockNotified=false;  }}  }
class C{  @Override public int compareTo(final Row that){  return (this.est < that.est) ? -1 : (this.est > that.est) ? 1 : 0;}  }
class C{  public MetaDataColumnDescriptor(String columnName,int jdbcType,Object defaultValue){  _columnName=columnName.toUpperCase();  _jdbcType=jdbcType;  _defaultValue=defaultValue;}  }
class C{  public final AC grow(float w,int... indexes){  Float gw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrow(gw);  }  return this;}  }
class C{  public static <T>LazyPStackX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPStack(),it);}  }
class C{  protected Path constructPath(Node fromNode,Node toNode,double travelTime,Map<Link,Link> nextLinks,Link firstLink){  ArrayList<Node> nodes=new ArrayList<Node>();  ArrayList<Link> links=new ArrayList<Link>();  for (links.add(firstLink); links.get(links.size() - 1).getToNode() != toNode; links.add(nextLinks.get(links.get(links.size() - 1))))   nodes.add(links.get(links.size() - 1).getFromNode());  nodes.add(links.get(links.size() - 1).getToNode());  Path path=new Path(nodes,links,travelTime);  return path;}  }
class C{  @Override public void recomputeAndRefreshAllOutputs(){  for (  final IOutputManager manager : getActiveOutputManagers()) {    manager.step(getExperimentScope());  }}  }
class C{  public static double blackFormulaCashItmProbability(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev,@Real final double displacement){  if (stddev == 0.0)   return (forward * optionType.toInteger() > strike * optionType.toInteger() ? 1.0 : 0.0);  if (strike == 0.0)   return (optionType == Option.Type.Call ? 1.0 : 0.0);  final double d1=Math.log((forward + displacement) / (strike + displacement)) / stddev + 0.5 * stddev;  final double d2=d1 - stddev;  final CumulativeNormalDistribution phi=new CumulativeNormalDistribution();  return phi.op(optionType.toInteger() * d2);}  }
class C{  public final boolean goNode(Node node){  if (!tree.goNode(node))   return false;  pendingDrawOffer=false;  updateTimeControl(true);  return true;}  }
class C{  public byte[] toByteArray(){  int k=((mDegree - 1) >> 3) + 1;  byte[] result=new byte[k];  int i;  for (i=0; i < k; i++) {    result[k - i - 1]=(byte)((mPol[i >>> 3] & (0x00000000000000ffL << ((i & 0x07) << 3))) >>> ((i & 0x07) << 3));  }  return result;}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  @GET @Path("/legacy") @Produces({MediaType.APPLICATION_JSON}) @Deprecated public ListQueryAPIResponseEntity listQueryWithoutCoprocessor(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  StopWatch watch=new StopWatch();  watch.start();  ListQueryAPIResponseEntity result=new ListQueryAPIResponseEntity();  try {    validateQueryParameters(startRowkey,pageSize);    ListQueryCompiler comp=new ListQueryCompiler(query,filterIfMissing);    String serviceName=comp.serviceName();    SearchCondition condition=new SearchCondition();    condition.setFilter(comp.filter());    condition.setQueryExpression(comp.getQueryExpression());    if (comp.sortOptions() == null && top > 0) {      LOG.warn("Parameter \"top\" is only used for sort query! Ignore top parameter this time since it's not a sort query");    }    final List<String[]> partitionValues=comp.getQueryPartitionValues();    if (partitionValues != null) {      condition.setPartitionValues(Arrays.asList(partitionValues.get(0)));    }    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(serviceName);    if (ed.isTimeSeries()) {      condition.setStartTime(startTime);      condition.setEndTime(endTime);    }    condition.setOutputVerbose(verbose == null || verbose);    condition.setOutputAlias(comp.getOutputAlias());    condition.setOutputAll(comp.isOutputAll());    condition.setStartRowkey(startRowkey);    condition.setPageSize(pageSize);    List<String> outputFields=comp.outputFields();    if (outputFields == null)     outputFields=new ArrayList<String>();    if (!comp.hasAgg() && !serviceName.equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)) {      Set<String> filterFields=comp.getFilterFields();      if (filterFields != null)       outputFields.addAll(filterFields);      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericEntityBatchReader reader=new GenericEntityBatchReader(serviceName,condition);      List<? extends TaggedLogAPIEntity> entityList=reader.read();      result.setObj(entityList);      result.setTotalResults(entityList.size());      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!comp.hasAgg() && serviceName.equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)) {      if (metricName == null || metricName.isEmpty()) {        throw new IllegalArgumentException("metricName should not be empty for metric list query");      }      Set<String> filterFields=comp.getFilterFields();      if (filterFields != null)       outputFields.addAll(filterFields);      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericMetricEntityBatchReader reader=new GenericMetricEntityBatchReader(metricName,condition);      List<? extends TaggedLogAPIEntity> entityList=reader.read();      result.setObj(entityList);      result.setTotalResults(entityList.size());      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && !timeSeries && parallel <= 0) {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      FlatAggregator agg=new FlatAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      StreamReader reader=null;      if (ed.getMetricDefinition() == null) {        reader=new GenericEntityStreamReader(serviceName,condition);      } else {        reader=new GenericMetricEntityDecompactionStreamReader(metricName,condition);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      reader.register(agg);      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<Double>>> obj=new ArrayList<Map.Entry<List<String>,List<Double>>>();      obj.addAll(agg.result().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(PostFlatAggregateSort.sort(agg.result(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && !timeSeries && parallel > 0) {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      FlatAggregator agg=new FlatAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(agg);      StreamReader reader=new GenericEntityStreamReaderMT(serviceName,condition,parallel);      reader.register(listener);      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<Double>>> obj=new ArrayList<Map.Entry<List<String>,List<Double>>>();      obj.addAll(agg.result().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(PostFlatAggregateSort.sort(agg.result(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && timeSeries) {      List<String> groupbyFields=comp.groupbyFields();      List<String> sortFields=comp.sortFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      if (sortFields != null)       outputFields.addAll(sortFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      StreamReader reader=null;      if (ed.getMetricDefinition() == null) {        if (parallel <= 0) {          reader=new GenericEntityStreamReader(serviceName,condition);        } else {          reader=new GenericEntityStreamReaderMT(serviceName,condition,parallel);        }      } else {        reader=new GenericMetricEntityDecompactionStreamReader(metricName,condition);        if (!outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {          outputFields.add(GenericMetricEntity.VALUE_FIELD);        }      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      TimeSeriesAggregator tsAgg=new TimeSeriesAggregator(groupbyFields,comp.aggregateFunctionTypes(),aggregateFields,DateTimeUtil.humanDateToDate(condition.getStartTime()).getTime(),DateTimeUtil.humanDateToDate(condition.getEndTime()).getTime(),intervalmin * 60 * 1000);      if (parallel <= 0) {        reader.register(tsAgg);      } else {        EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(tsAgg);        reader.register(listener);      }      FlatAggregator sortAgg=null;      if (comp.sortOptions() != null) {        sortAgg=new FlatAggregator(groupbyFields,comp.sortFunctions(),comp.sortFields());        if (parallel <= 0) {          reader.register(sortAgg);        } else {          EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(sortAgg);          reader.register(listener);        }      }      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<double[]>>> obj=new ArrayList<Map.Entry<List<String>,List<double[]>>>();      obj.addAll(tsAgg.getMetric().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(TimeSeriesPostFlatAggregateSort.sort(sortAgg.result(),tsAgg.getMetric(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericEntityStreamReader reader=new GenericEntityStreamReader(serviceName,condition);      HierarchicalAggregator agg=new HierarchicalAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      reader.register(agg);      reader.readAsStream();      if (comp.sortOptions() == null) {        result.setObj(agg.result());      } else {        result.setObj(PostHierarchicalAggregateSort.sort(agg.result(),comp.sortOptions()));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    }  } catch (  Exception ex) {    LOG.error("Fail executing list query: " + query,ex);    result.setException(EagleExceptionWrapper.wrap(ex));    result.setSuccess(false);    return result;  } finally {    watch.stop();    result.setElapsedms(watch.getTime());  }  LOG.info("Query done " + watch.getTime() + " ms");  return result;}  }
class C{  private <T extends HasDefaults>JPanel createButtonsPanel(final SettingsTab<T> settingTab){  final JPanel buttonsPanel=SwingComponents.newJPanelWithHorizontalBoxLayout();  final int buttonPanelHeight=50;  buttonsPanel.add(Box.createVerticalStrut(buttonPanelHeight));  buttonsPanel.add(SwingComponents.newJButton("Use Defaults",null));  buttonsPanel.add(Box.createHorizontalGlue());  buttonsPanel.add(SwingComponents.newJButton("Save",null));  buttonsPanel.add(Box.createHorizontalGlue());  buttonsPanel.add(SwingComponents.newJButton("Close",null));  buttonsPanel.add(Box.createHorizontalGlue());  return buttonsPanel;}  }
class C{  public Matrix3d rotateZ(double ang){  return rotateZ(ang,this);}  }
class C{  private static boolean isSpecialDefinition(Definition definition){  if (definition == null || (definition.isStaticDefUse() && definition.getMethodName().startsWith("<clinit>"))) {    if (definition == null)     logger.debug("Assume Parameter-Definition to be covered if the Parameter-Use is covered"); else     logger.debug("Assume definition from <clinit> to always be covered");    return true;  }  return false;}  }
class C{  public void addKeyValue(PublicKey pk){  this.add(new KeyValue(this.doc,pk));}  }
class C{  @Override public void addToWorld(){  removeNPC("Susi");  buildConditions();  createGirlNPC();  addDialog();}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=info;  int num=src.length;  byte[] dest=new byte[num];  for (int i=0; i < num; ++i)   dest[i]=src[i];  LineNumberAttribute attr=new LineNumberAttribute(newCp,dest);  return attr;}  }
class C{  public static Aggregation asAggregation(Resource resource){  StmtIterator it=resource.listProperties(RDF.type);  JenaUtil.setGraphReadOptimization(true);  try {    while (it.hasNext()) {      RDFNode type=it.next().getObject();      if (type instanceof Resource) {        if (Aggregations.getName((Resource)type) != null) {          it.close();          return resource.as(Aggregation.class);        }      }    }  }  finally {    JenaUtil.setGraphReadOptimization(false);  }  return null;}  }
class C{  public static final JIPList create(final JIPTerm head,final JIPTerm tail){  if (head != null) {    if (tail != null)     return new JIPList(new List(head.getTerm(),tail.getTerm())); else     return new JIPList(new List(head.getTerm(),null));  } else {    if (tail != null)     return new JIPList(new List(null,tail.getTerm())); else     return new JIPList(List.NIL);  }}  }
class C{  public static void translationX(View v,float fromX,float toX,int duration){  translationX(v,fromX,toX,duration,null);}  }
class C{  private void addTermFrequencies(Map<String,Map<String,Int>> field2termFreqMap,Terms vector,String fieldName) throws IOException {  Map<String,Int> termFreqMap=field2termFreqMap.get(fieldName);  if (termFreqMap == null) {    termFreqMap=new HashMap<>();    field2termFreqMap.put(fieldName,termFreqMap);  }  final TermsEnum termsEnum=vector.iterator();  final CharsRefBuilder spare=new CharsRefBuilder();  BytesRef text;  while ((text=termsEnum.next()) != null) {    spare.copyUTF8Bytes(text);    final String term=spare.toString();    if (isNoiseWord(term)) {      continue;    }    final int freq=(int)termsEnum.totalTermFreq();    Int cnt=termFreqMap.get(term);    if (cnt == null) {      cnt=new Int();      termFreqMap.put(term,cnt);      cnt.x=freq;    } else {      cnt.x+=freq;    }  }}  }
class C{  public void appendCode(List<Variable> inputVars,StringBuilder b){  assert inputVars.size() == this.getInputTypes().size() : "number of inputs doesn't match on operation appendCode";  this.getOperation().appendCode(declaringType,getInputTypes(),getOutputType(),inputVars,b);}  }
class C{  private void createAndAttachMenus(){  JMenuBar menuBar=new JMenuBar();  menuBar.add(createFileMenu());  menuBar.add(createViewMenu());  menuBar.add(createInsertMenu());  menuBar.add(createScriptMenu());  menuBar.add(createCoupleMenu());  menuBar.add(createHelpMenu());  frame.setJMenuBar(menuBar);}  }
class C{  @Override public void acceptInstance(InstanceEvent e){  if (m_filterThread != null) {    String messg="[Filter] " + statusMessagePrefix() + " is currently batch processing!";    if (m_log != null) {      m_log.logMessage(messg);      m_log.statusMessage(statusMessagePrefix() + "WARNING: Filter is currently batch processing.");    } else {      System.err.println(messg);    }    return;  }  if (!(m_Filter instanceof StreamableFilter)) {    stop();    if (m_log != null) {      m_log.logMessage("[Filter] " + statusMessagePrefix() + " ERROR : "+ m_Filter.getClass().getName()+ "can't process streamed instances; can't continue");      m_log.statusMessage(statusMessagePrefix() + "ERROR: Can't process streamed instances; can't continue.");    }    return;  }  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    try {      m_instanceCount=0;      Instances dataset=e.getStructure();      if (m_Filter instanceof SupervisedFilter) {        if (dataset.classIndex() < 0) {          dataset.setClassIndex(dataset.numAttributes() - 1);        }      }      m_Filter.setInputFormat(dataset);      m_structurePassedOn=false;      try {        if (m_Filter.isOutputFormatDefined()) {          m_ie.setStructure(new Instances(m_Filter.getOutputFormat(),0));          m_ie.m_formatNotificationOnly=e.m_formatNotificationOnly;          notifyInstanceListeners(m_ie);          m_structurePassedOn=true;        }      } catch (      Exception ex) {        stop();        if (m_log != null) {          m_log.logMessage("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure. "+ ex.getMessage());          m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");        } else {          System.err.println("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure");        }      }    } catch (    Exception ex) {      ex.printStackTrace();    }    return;  }  if (e.getStatus() == InstanceEvent.BATCH_FINISHED || e.getInstance() == null) {    try {      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "Stream finished.");      }      if (e.getInstance() != null) {        if (m_Filter.input(e.getInstance())) {          Instance filteredInstance=m_Filter.output();          if (filteredInstance != null) {            if (!m_structurePassedOn) {              m_ie.setStructure(new Instances(filteredInstance.dataset(),0));              notifyInstanceListeners(m_ie);              m_structurePassedOn=true;            }            m_ie.setInstance(filteredInstance);            if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {              m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);            } else {              m_ie.setStatus(e.getStatus());            }            notifyInstanceListeners(m_ie);          }        }      }      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "Finished.");      }    } catch (    Exception ex) {      stop();      if (m_log != null) {        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.getMessage());        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");      }      ex.printStackTrace();    }    try {      if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {        if (m_log != null) {          m_log.statusMessage(statusMessagePrefix() + "Passing on pending instances...");        }        Instance filteredInstance=m_Filter.output();        if (filteredInstance != null) {          if (!m_structurePassedOn) {            m_ie.setStructure((Instances)(new SerializedObject(filteredInstance.dataset()).getObject()));            notifyInstanceListeners(m_ie);            m_structurePassedOn=true;          }          m_ie.setInstance(filteredInstance);          m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);          notifyInstanceListeners(m_ie);        }        while (m_Filter.numPendingOutput() > 0) {          filteredInstance=m_Filter.output();          if (filteredInstance.dataset().checkForStringAttributes()) {            for (int i=0; i < filteredInstance.dataset().numAttributes(); i++) {              if (filteredInstance.dataset().attribute(i).isString() && !filteredInstance.isMissing(i)) {                String val=filteredInstance.stringValue(i);                m_ie.getStructure().attribute(i).setStringValue(val);                filteredInstance.setValue(i,0);              }            }          }          filteredInstance.setDataset(m_ie.getStructure());          m_ie.setInstance(filteredInstance);          if (m_Filter.numPendingOutput() == 0) {            m_ie.setStatus(InstanceEvent.BATCH_FINISHED);          } else {            m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);          }          notifyInstanceListeners(m_ie);        }        if (m_log != null) {          m_log.statusMessage(statusMessagePrefix() + "Finished.");        }      }    } catch (    Exception ex) {      stop();      if (m_log != null) {        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details.");      }      ex.printStackTrace();    }  } else {    try {      if (!m_Filter.input(e.getInstance())) {        return;      }      Instance filteredInstance=m_Filter.output();      if (filteredInstance == null) {        return;      }      m_instanceCount++;      if (!m_structurePassedOn) {        m_ie.setStructure(new Instances(filteredInstance.dataset(),0));        notifyInstanceListeners(m_ie);        m_structurePassedOn=true;      }      filteredInstance.setDataset(m_ie.getStructure());      if (filteredInstance.dataset().checkForStringAttributes()) {        for (int i=0; i < filteredInstance.dataset().numAttributes(); i++) {          if (filteredInstance.dataset().attribute(i).isString() && !filteredInstance.isMissing(i)) {            String val=filteredInstance.stringValue(i);            filteredInstance.dataset().attribute(i).setStringValue(val);            filteredInstance.setValue(i,0);          }        }      }      m_ie.setInstance(filteredInstance);      m_ie.setStatus(e.getStatus());      if (m_log != null && (m_instanceCount % 10000 == 0)) {        m_log.statusMessage(statusMessagePrefix() + "Received " + m_instanceCount+ " instances.");      }      notifyInstanceListeners(m_ie);    } catch (    Exception ex) {      stop();      if (m_log != null) {        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");      }      ex.printStackTrace();    }  }}  }
class C{  public int compareTo(Object o){  return compareTo((MutableInteger)o);}  }
class C{  private static String formatList(String[] stringList,String listPattern,String listCompositionPattern){  if (listPattern == null || listCompositionPattern == null) {    StringBuilder result=new StringBuilder();    for (int i=0; i < stringList.length; ++i) {      if (i > 0) {        result.append(',');      }      result.append(stringList[i]);    }    return result.toString();  }  if (stringList.length > 3) {    MessageFormat format=new MessageFormat(listCompositionPattern);    stringList=composeList(format,stringList);  }  Object[] args=new Object[stringList.length + 1];  System.arraycopy(stringList,0,args,1,stringList.length);  args[0]=new Integer(stringList.length);  MessageFormat format=new MessageFormat(listPattern);  return format.format(args);}  }
class C{  public static EncodedImage cloneOrNull(EncodedImage encodedImage){  return encodedImage != null ? encodedImage.cloneOrNull() : null;}  }
class C{  public void decreaseKey(int i,Key key){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (comp.compare(keys[i + d],key) <= 0)   throw new IllegalArgumentException("Calling with this argument would not decrease the Key");  keys[i + d]=key;  swim(qp[i + d]);}  }
class C{  public Character charAt(int i){  return str.charAt(i);}  }
class C{  public CommunicationTimeStamps(final Deserializer deserializer){  this.sendTimeStamp=NetworkTimeStamp.readFrom(deserializer,"sendTimeStamp");  this.receiveTimeStamp=NetworkTimeStamp.readFrom(deserializer,"receiveTimeStamp");}  }
class C{  private void addForNotEnumeration(PricedParameterRow curParam,int paramIndex){  List<VOPricedRole> oldRoleSpecificUserPrices=curParam.getPricedParameter().getRoleSpecificUserPrices();  for (int j=0; j < roles.size(); j++) {    VORoleDefinition role=roles.get(j);    int numOldRoleWithPrice=oldRoleSpecificUserPrices.size();    boolean isUpdated=false;    for (int roleIndex=0; roleIndex < numOldRoleWithPrice; roleIndex++) {      VORoleDefinition oldCurRole=oldRoleSpecificUserPrices.get(roleIndex).getRole();      if (oldCurRole.getRoleId().equals(role.getRoleId())) {        oldRoleSpecificUserPrices.get(roleIndex).setPricePerUser(pricedParametersOfAllRoles[j][paramIndex].getPricedParameter().getPricePerUser());        isUpdated=true;      }    }    if (!isUpdated) {      VOPricedRole price=new VOPricedRole();      if (pricedParametersOfAllRoles[j][paramIndex].getPricedParameter() != null) {        price.setPricePerUser(pricedParametersOfAllRoles[j][paramIndex].getPricedParameter().getPricePerUser());        price.setRole(role);      }      oldRoleSpecificUserPrices.add(price);    }  }}  }
class C{  private void launchAnim4(){  animatedVector4.start();}  }
class C{  public String cacheSizeTipText(){  return "The size of the cache (a prime number).";}  }
class C{  @Override public boolean rowUpdated() throws SQLException {  try {    debugCodeCall("rowUpdated");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void resetBeyondLimit(){  beyondLimit=null;}  }
class C{  public static Pair<Date,Date> checkDateRangeSearch(String filter){  if (filter.length() > 4 && filter.contains("<")) {    final String[] fromAndTo=org.apache.commons.lang.StringUtils.splitPreserveAllTokens(filter,'<');    final Date from=fromAndTo.length > 0 ? stringToDate(fromAndTo[0]) : null;    final Date to=fromAndTo.length > 1 ? stringToDate(fromAndTo[1]) : null;    if (from != null || to != null) {      return new Pair<>(from,to);    }  }  return null;}  }
class C{  protected void expectFirstTrackPoint(Location location,long trackId,long trackPointId){  expect(myTracksProviderUtils.bulkInsertTrackPoint(location != null ? LocationsMatcher.eqLoc(location) : (Location[])AndroidMock.anyObject(),eq(1),eq(trackId))).andReturn(1);  expect(myTracksProviderUtils.getFirstTrackPointId(trackId)).andReturn(trackPointId);  expect(myTracksProviderUtils.getLastTrackPointId(trackId)).andReturn(trackPointId);}  }
class C{  private Object executeMultiply(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(0),row)) * Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(1),row)));}  }
class C{  @Override public boolean isCaseSensitive(int column) throws SQLException {  try {    debugCodeCall("isCaseSensitive",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.369 -0500",hash_original_method="00BF6BD14B34E2134A0C0EF2661B3919",hash_generated_method="83C61D7B6607B61814DDCCE16B2683BE") private String updateValueInCommaSeparatedList(String list,String key,String newValue){  StringBuilder newPrefList=new StringBuilder();  if (TextUtils.isEmpty(list)) {    newPrefList.append(key).append(':').append(newValue);  } else {    String[] prefValues=list.split(",");    boolean first=true;    boolean found=false;    for (    String value : prefValues) {      final int delimiter=value.indexOf(':');      if (delimiter > 0) {        if (key.equals(value.substring(0,delimiter))) {          if (first) {            first=false;          } else {            newPrefList.append(',');          }          found=true;          newPrefList.append(key).append(':').append(newValue);        } else {          if (first) {            first=false;          } else {            newPrefList.append(',');          }          newPrefList.append(value);        }      }    }    if (!found) {      newPrefList.append(',');      newPrefList.append(key).append(':').append(newValue);    }  }  return newPrefList.toString();}  }
class C{  public final int _exptype2Type(int exptype){  if (NULL != exptype)   return m_extendedTypes[exptype].getNodeType(); else   return NULL;}  }
class C{  public EasyEditSpan(){  mPendingIntent=null;  mDeleteEnabled=true;}  }
class C{  public static void main(String[] args){  Integer[] intArray={-44,-5,-3,3,3,1,-4,0,1,2,4,5,53};  Double[] doubleArray={3.4,1.3,-22.1,14.8,6.0,2.3,12.2};  Character[] charArray={'a','J','r'};  String[] stringArray={"Tom","Susan","Kim"};  heapSort(intArray);  heapSort(doubleArray);  heapSort(charArray);  heapSort(stringArray);  System.out.print("Sorted Integers: ");  printList(intArray);  System.out.print("Sorted Doubles: ");  printList(doubleArray);  System.out.print("Sorted Characters: ");  printList(charArray);  System.out.print("Sorted Strings: ");  printList(stringArray);  GeometricObject[] list={new Circle(5),new Rectangle(4,5),new Circle(5.5),new Rectangle(2.4,5),new Circle(0.5),new Rectangle(4,65),new Circle(4.5),new Rectangle(4.4,1),new Circle(6.5),new Rectangle(4,5)};  heapSort(list,new GeometricObjectComparator());  System.out.print("Sorted elements: ");  for (  GeometricObject e : list) {    System.out.printf("%.2f ",e.getArea());  }  System.out.println();}  }
class C{  public ConnectionGroup putConnectionGroup(ConnectionGroup connectionGroup){  return connectionGroups.put(connectionGroup.getIdentifier(),connectionGroup);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:38.005 -0500",hash_original_method="E0A3DE35724A26B6DFF41660E2732E13",hash_generated_method="70AB7B0A4996E44234A828B6E1A790AE") private Logical(){}  }
class C{  public MbfsRunner(GraphWrapper dagWrapper,KnowledgeBoxModel knowledgeBoxModel,Parameters params){  super(dagWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int errorCorrectionLevel,int width,int height,int margin) throws WriterException {  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(1,aspectRatio);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale,scale * aspectRatio);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.314 -0400",hash_original_method="9C46F100D983FBF5A1EA8297108892F0",hash_generated_method="24CBDED522415CF4427BE01F6A6BE06D") public boolean registerAppConfiguration(BluetoothHealthAppConfiguration config,IBluetoothHealthCallback callback){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM,"Need BLUETOOTH permission");synchronized (mBluetoothHealthProfileHandler) {    return mBluetoothHealthProfileHandler.registerAppConfiguration(config,callback);  }}  }
class C{  private void mixAttributes(final IShape source){  if (source == null) {    return;  }  final GamaMap<Object,Object> attr=(GamaMap)source.getAttributes();  if (attr == null) {    return;  }  final Object depth=attr.get(IShape.DEPTH_ATTRIBUTE);  if (depth != null) {    setAttribute(IShape.DEPTH_ATTRIBUTE,depth);  }  final Object type=attr.get(IShape.TYPE_ATTRIBUTE);  if (type != null) {    setAttribute(IShape.TYPE_ATTRIBUTE,type);  }  for (  final Map.Entry entry : attr.entrySet()) {    if (entry.getValue() != source) {      setAttribute(entry.getKey(),entry.getValue());    }  }}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  if (!isPropertyChanged(oldProps,newProps,_propertyName)) {    return;  }  String newValue=newProps.getProperty(_propertyName);  ArgumentValidator.checkRange(Integer.parseInt(newValue),Constants.MIN_AUTH_LOGIN_ATTEMPTS,Constants.MAX_AUTH_LOGIN_ATTEMPTS,_propertyName);}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (!reallyReadyToPoll) {    return null;  }  if (needToInitAcelaNetwork) {    if (needToCreateNodesState == 0) {      if (needToPollNodes) {        new AcelaNode(0,AcelaNode.AC,this);        log.info("Created a new Acela Node [0] in order to poll Acela network: " + AcelaNode.AC);      }      curAcelaNodeIndex=SPECIALNODE;      AcelaMessage m=AcelaMessage.getAcelaResetMsg();      log.debug("send Acela reset (init step 1) message: " + m);      m.setTimeout(1000);      mCurrentMode=NORMALMODE;      needToCreateNodesState++;      return m;    }    if (needToCreateNodesState == 1) {      AcelaMessage m=AcelaMessage.getAcelaOnlineMsg();      log.debug("send Acela Online (init step 2) message: " + m);      m.setTimeout(1000);      mCurrentMode=NORMALMODE;      needToCreateNodesState++;      return m;    }    if (needToPollNodes) {      if (needToCreateNodesState == 2) {        AcelaMessage m=AcelaMessage.getAcelaPollNodesMsg();        log.debug("send Acela poll nodes message: " + m);        m.setTimeout(100);        mCurrentMode=NORMALMODE;        needToInitAcelaNetwork=false;        needToPollNodes=false;        return m;      }    } else {      needToInitAcelaNetwork=false;      setAcelaTrafficControllerState(true);    }  }  if (getNumNodes() <= 0) {    return null;  }  curAcelaNodeIndex++;  if (curAcelaNodeIndex >= getNumNodes()) {    curAcelaNodeIndex=0;  }  AcelaNode node=(AcelaNode)getNode(curAcelaNodeIndex);  if (node.hasActiveSensors) {    for (int s=0; s < node.sensorbitsPerCard; s++) {      if (node.sensorNeedInit[s] && !node.sensorHasBeenInit[s]) {        AcelaMessage m=AcelaMessage.getAcelaConfigSensorMsg();        int tempiaddr=s + node.getStartingSensorAddress();        byte tempbaddr=(byte)(tempiaddr);        m.setElement(2,tempbaddr);        m.setElement(3,node.sensorConfigArray[s]);        log.debug("send Aclea Config Sensor message: " + m);        incrementAcelaSensorInitCount();        m.setTimeout(100);        mCurrentMode=NORMALMODE;        node.sensorHasBeenInit[s]=true;        node.sensorNeedInit[s]=false;        return m;      }    }  }  if (getNode(curAcelaNodeIndex).mustSend()) {    getNode(curAcelaNodeIndex).resetMustSend();    AbstractMRMessage m=getNode(curAcelaNodeIndex).createOutPacket();    m.setTimeout(100);    log.debug("request write command to send: " + m);    mCurrentMode=NORMALMODE;    return m;  }  if ((currentSensorAddress == 0) || (currentSensorAddress != getAcelaSensorInitCount())) {    return null;  }  if (acelaSensorsState) {    AcelaMessage m=AcelaMessage.getAcelaPollSensorsMsg();    log.debug("send Acela poll sensors message: " + m);    m.setTimeout(100);    mCurrentMode=NORMALMODE;    return m;  } else {    return null;  }}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public TField readFieldBegin() throws TException {  byte type=readByte();  if (type == TType.STOP) {    return TSTOP;  }  short fieldId;  short modifier=(short)((type & 0xf0) >> 4);  if (modifier == 0) {    fieldId=readI16();  } else {    fieldId=(short)(lastFieldId_ + modifier);  }  TField field=new TField("",getTType((byte)(type & 0x0f)),fieldId);  if (isBoolType(type)) {    boolValue_=(byte)(type & 0x0f) == Types.BOOLEAN_TRUE ? Boolean.TRUE : Boolean.FALSE;  }  lastFieldId_=field.id;  return field;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static String addFont(final FormObject formObject,final boolean area,final boolean isMultiLine,final PdfPageData pageData,final int pageNum,final float scaling){  final String fontString;  final FontMapper fontMapper=new GenericFontMapper(formObject.getFontName());  final String font=fontMapper.getFont();  final String weight=fontMapper.getWeight();  float size=formObject.getTextSize();  if (size == 0 || size == -1) {    final Rectangle pos=formObject.getBoundingRectangle();    if (isMultiLine) {      size=12;    } else {      final int rotation=pageData.getRotation(pageNum);      if (rotation == 90 || rotation == 270) {        size=GUIData.calculateFontSize(pos.width,pos.height,area,formObject.getTextStreamValue(PdfDictionary.V));      } else {        size=GUIData.calculateFontSize(pos.height,pos.width,area,formObject.getTextStreamValue(PdfDictionary.V));      }    }  }  size*=scaling;  fontString=String.format("%s %dpx %s",weight,(int)size,font);  return fontString;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.195 -0500",hash_original_method="335087D7FF3CE8ACF704F016666ED5E4",hash_generated_method="9C2CF14366EC4FEC5E2510809E61CCA2") private static String convertLong(AbstractStringBuilder sb,long n){  String str=new String();  str.addTaint(n);  if (sb != null) {    sb.append0(str);    return null;  } else {    return str;  }}  }
class C{  public boolean isBlockBanned(Block block){  return blockBanList.contains(block);}  }
class C{  public static Split serializableInstance(){  return new Split(0.5,1.5);}  }
class C{  public static boolean isWifiConnected(){  return isNetworkAvailable(NetType.Wifi);}  }
class C{  public double nextDouble(double tau){  double u, u1, v, x, y;  if (tau != tau_set) {    s=1.0 / tau;    sm1=1.0 - s;    tau_set=tau;  }  do {    u=randomGenerator.nextDouble();    u=(2.0 * u) - 1.0;    u1=Math.abs(u);    v=randomGenerator.nextDouble();    if (u1 <= sm1) {      x=u1;    } else {      y=tau * (1.0 - u1);      x=sm1 - s * Math.log(y);      v=v * y;    }  } while (Math.log(v) > -Math.exp(Math.log(x) * tau));  if (u < 0.0)   return x; else   return -x;}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints,Status status) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public void remove(OutputNode node) throws Exception {  if (stack.top() != node) {    throw new NodeException("Cannot remove node");  }  stack.pop();}  }
class C{  protected void sequence_ModuleFilter(ISerializationContext context,ModuleFilter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int size(){  return values.length;}  }
class C{  protected String doMountObb_noThrow(String obbFilePath,String key,int expectedState){  Log.i(LOG_TAG,"doMountObb() on " + obbFilePath + " using key: "+ key);  assertTrue("Null path was passed in for OBB file!",obbFilePath != null);  assertTrue("Null path was passed in for OBB file!",obbFilePath != null);  ObbListener obbListener=new ObbListener();  boolean success=mSm.mountObb(obbFilePath,key,obbListener);  success&=obbFilePath.equals(doWaitForObbStateChange(obbListener));  success&=(expectedState == obbListener.state());  if (OnObbStateChangeListener.MOUNTED == expectedState) {    success&=obbFilePath.equals(obbListener.officialPath());    success&=mSm.isObbMounted(obbListener.officialPath());  } else {    success&=!mSm.isObbMounted(obbListener.officialPath());  }  if (success) {    return obbListener.officialPath();  } else {    return null;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE:    setValue((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public static int readInt(byte[] array,int offset){  int b0=array[offset + 0] & 0xFF;  int b1=array[offset + 1] & 0xFF;  int b2=array[offset + 2] & 0xFF;  int b3=array[offset + 3] & 0xFF;  return ((b0 << 24) + (b1 << 16) + (b2 << 8)+ (b3 << 0));}  }
class C{  public byte[] GETbytes(final String uri,final String username,final String pass,final boolean concurrent) throws IOException {  return GETbytes(uri,username,pass,Integer.MAX_VALUE,concurrent);}  }
class C{  public List<AppliedMigration> findAppliedMigrations(){  if (!tablesExist()) {    return new ArrayList<>();  }  Select select=QueryBuilder.select().column("version_rank").column("installed_rank").column("version").column("description").column("type").column("script").column("checksum").column("installed_on").column("installed_by").column("execution_time").column("success").from(keyspace.getName(),tableName);  select.setConsistencyLevel(this.consistencyLevel);  ResultSet results=session.execute(select);  List<AppliedMigration> resultsList=new ArrayList<>();  for (  Row row : results) {    resultsList.add(new AppliedMigration(row.getInt("version_rank"),row.getInt("installed_rank"),MigrationVersion.fromVersion(row.getString("version")),row.getString("description"),MigrationType.valueOf(row.getString("type")),row.getString("script"),row.isNull("checksum") ? null : row.getInt("checksum"),row.getTimestamp("installed_on"),row.getString("installed_by"),row.getInt("execution_time"),row.getBool("success")));  }  return resultsList;}  }
class C{  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,String collection,int timeoutInMs){  long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutInMs,TimeUnit.MILLISECONDS);  boolean success=false;  while (!success && System.nanoTime() < timeout) {    success=true;    ClusterState clusterState=zkStateReader.getClusterState();    if (clusterState != null) {      Map<String,DocCollection> collections=null;      if (collection != null) {        collections=Collections.singletonMap(collection,clusterState.getCollection(collection));      } else {        collections=clusterState.getCollectionsMap();      }      for (      Map.Entry<String,DocCollection> entry : collections.entrySet()) {        DocCollection docCollection=entry.getValue();        Collection<Slice> slices=docCollection.getSlices();        for (        Slice slice : slices) {          if (slice.getState() == Slice.State.ACTIVE) {            Collection<Replica> replicas=slice.getReplicas();            for (            Replica replica : replicas) {              final boolean live=clusterState.liveNodesContain(replica.getNodeName());              final boolean isActive=replica.getState() == Replica.State.ACTIVE;              if (!live || !isActive) {                success=false;              }            }          }        }      }      if (!success) {        try {          Thread.sleep(TIMEOUT_POLL_MS);        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();          throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted");        }      }    }  }  return success;}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  type=createLiveAnimatedEnumeration(null,SVG_TYPE_ATTRIBUTE,TYPE_VALUES,(short)1);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public LayoutParams(int tileHeight){  super(MATCH_PARENT,tileHeight);}  }
class C{  public static int barrierWait(Env env,String name,int threadCount){  return Scheduler.mutatorRendezvous(name,threadCount);}  }
class C{  public final void debug(final String message,final Throwable throwable){  if (isDebugEnabled()) {    output(Priority.DEBUG,message,throwable);  }}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(IBSimilarity.class,sim.getClass());  IBSimilarity ib=(IBSimilarity)sim;  assertEquals(DistributionLL.class,ib.getDistribution().getClass());  assertEquals(LambdaTTF.class,ib.getLambda().getClass());  assertEquals(NormalizationH3.class,ib.getNormalization().getClass());  NormalizationH3 norm=(NormalizationH3)ib.getNormalization();  assertEquals(900f,norm.getMu(),0.01f);}  }
class C{  public static String pad(String o,int len){  if (o.length() >= len) {    return o;  }  return o + whitespace(len - o.length());}  }
class C{  public ArtifactCoordinates(final String groupId,final String artifactId,final String version,final String classifier){  this.groupId=groupId;  this.artifactId=artifactId;  this.version=version;  this.classifier=classifier;}  }
class C{  private static int spToPx(float sp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public Iterable deleteAll(){  log.info("Attempting to delete all entities at once");  final List list=new LinkedList();  final Collection keys=getDataStore().keys();  log.debug("There are " + keys.size() + " entities altogether in the data store that are going to be deleted");  for (  Object key : keys) {    final Object deleted=delete(((Serializable)key));    if (deleted != null) {      log.debug("The entity was deleted successfully and will be added to the list of deleted entities");      list.add(deleted);    }  }  final Collection remainingKeys=getDataStore().keys();  log.debug("There are " + remainingKeys.size() + " keys remaining in the data store after the delete operation");  return list;}  }
class C{  public int hashCode(){  int hash1=((Double)min).hashCode();  int hash2=((Double)max).hashCode();  return 31 * hash1 + hash2;}  }
class C{  public GZipInputStreamRandomAccess(SeekableInputStream is,Long index) throws IOException {  super(new InputStreamConverter(is,index));}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  void onReallyStop(){  if (mLoadersStarted) {    mLoadersStarted=false;    if (mLoaderManager != null) {      if (!mRetaining) {        mLoaderManager.doStop();      } else {        mLoaderManager.doRetain();      }    }  }  mFragments.dispatchReallyStop();}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isBackendVolumeForVplexOrRp(List<VolumeDescriptor> volumes){  List<VolumeDescriptor> blockVolumes=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> vplexVolumes=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> protectedVolumes=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_TARGET,VolumeDescriptor.Type.RP_VPLEX_VIRT_TARGET,VolumeDescriptor.Type.RP_EXISTING_PROTECTED_SOURCE,VolumeDescriptor.Type.RP_JOURNAL,VolumeDescriptor.Type.RP_VPLEX_VIRT_JOURNAL},new VolumeDescriptor.Type[]{});  if (!blockVolumes.isEmpty() && (!vplexVolumes.isEmpty() || !protectedVolumes.isEmpty())) {    return true;  }  return false;}  }
class C{  public static byte[] encode(byte[] data){  byte[] bytes;  int modulus=data.length % 3;  if (modulus == 0) {    bytes=new byte[4 * data.length / 3];  } else {    bytes=new byte[4 * ((data.length / 3) + 1)];  }  int dataLength=(data.length - modulus);  int a1, a2, a3;  for (int i=0, j=0; i < dataLength; i+=3, j+=4) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    bytes[j]=encodingTable[(a1 >>> 2) & 0x3f];    bytes[j + 1]=encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f];    bytes[j + 2]=encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f];    bytes[j + 3]=encodingTable[a3 & 0x3f];  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[data.length - 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;bytes[bytes.length - 4]=encodingTable[b1];bytes[bytes.length - 3]=encodingTable[b2];bytes[bytes.length - 2]=(byte)'=';bytes[bytes.length - 1]=(byte)'=';break;case 2:d1=data[data.length - 2] & 0xff;d2=data[data.length - 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;bytes[bytes.length - 4]=encodingTable[b1];bytes[bytes.length - 3]=encodingTable[b2];bytes[bytes.length - 2]=encodingTable[b3];bytes[bytes.length - 1]=(byte)'=';break;}return bytes;}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void serialize(XmlSerializer serializer,@Nullable String tag) throws IOException {  if (tag != null && getConnection() != null && (getConnection().isConnected() || getConnection().getShadowBlock() != null)) {    serializer.startTag(null,tag).attribute(null,"name",getName());    Block block=getConnection().getShadowBlock();    if (block != null) {      block.serialize(serializer,false);    }    if (block != getConnection().getTargetBlock()) {      block=getConnection().getTargetBlock();      if (block != null) {        block.serialize(serializer,false);      }    }    serializer.endTag(null,tag);  }  for (int i=0; i < getFields().size(); i++) {    getFields().get(i).serialize(serializer);  }}  }
class C{  public Shutdown(){  super();}  }
class C{  public void clear(){  elementToSet.clear();  disjointSets.clear();}  }
class C{  public synchronized void healthCheck() throws ReplicatorException {  String command=vmrrControlScript + " command healthcheck";  if (logger.isDebugEnabled()) {    logger.debug("Running vmrr process healthcheck: " + command);  }  this.execAndReturnStdout(command,false);}  }
class C{  public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  private static void readEnvFile(){  Properties properties=new Properties();  URL url=Thread.currentThread().getContextClassLoader().getResource("env.properties");  if (url != null) {    try (Reader reader=new InputStreamReader(url.openStream(),"UTF-8")){      properties.load(reader);      properties.stringPropertyNames().stream().map(null).forEach(null);    } catch (    IOException e) {      throw new FalteringEnvironmentException(e);    }  }}  }
class C{  public void checkSortability() throws SolrException {  if (!(indexed() || hasDocValues())) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not sort on a field which is neither indexed nor has doc values: " + getName());  }  if (multiValued()) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not sort on multivalued field: " + getName());  }}  }
class C{  public GifAnimationMetaData(@NonNull AssetManager assets,@NonNull String assetName) throws IOException {  this(assets.openFd(assetName));}  }
class C{  private void startScan(TraceLocal trace,boolean processCodeLocations,RVMThread thread,Address gprs,Address ip,Address fp,Address initialIPLoc,Address topFrame,Address sentinelFp){  this.trace=trace;  this.processCodeLocations=processCodeLocations;  this.thread=thread;  this.failed=false;  this.ip=ip;  this.fp=fp;  this.initialIPLoc=initialIPLoc;  this.topFrame=topFrame;  scanThreadInternal(gprs,DEFAULT_VERBOSITY,sentinelFp);  if (failed) {    this.ip=ip;    this.fp=fp;    this.topFrame=topFrame;    scanThreadInternal(gprs,FAILURE_VERBOSITY,sentinelFp);    VM.sysFail("Error encountered while scanning stack");  }}  }
class C{  public InfantryBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  private Base64(){}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GENERIC_DATA_DIRECTORY_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'DEVICE_ID' INTEGER NOT NULL ,"+ "'DAY_START_TIMESTAMP' INTEGER NOT NULL ,"+ "'INDEX_TIMESTAMP' INTEGER NOT NULL ,"+ "'LASTEST_ACCESSED_TIMESTAMP' INTEGER NOT NULL );");}  }
class C{  public int size(){  return metadata.size();}  }
class C{  private static void sqlFieldsQuery(IgniteCache<BinaryObject,BinaryObject> cache){  SqlFieldsQuery qry=new SqlFieldsQuery("select name, salary from Employee");  QueryCursor<List<?>> employees=cache.query(qry);  System.out.println();  System.out.println(">>> Employee names and their salaries:");  for (  List<?> row : employees.getAll())   System.out.println(">>>     [Name=" + row.get(0) + ", salary="+ row.get(1)+ ']');}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FacesConfigBean fcb=null;  try {    fcb=(FacesConfigBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FacesConfigBean on object stack");  }  LifecycleBean lb=fcb.getLifecycle();  if (lb == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[LifecycleRule]{" + digester.getMatch() + "} New "+ CLASS_NAME);    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    lb=(LifecycleBean)clazz.newInstance();    fcb.setLifecycle(lb);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[LifecycleRule]{" + digester.getMatch() + "} Old "+ CLASS_NAME);    }  }  digester.push(lb);}  }
class C{  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,final int precisionStep,Long min,Long max,final boolean minInclusive,final boolean maxInclusive){  return new LegacyNumericRangeQuery<>(field,precisionStep,LegacyNumericType.LONG,min,max,minInclusive,maxInclusive);}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public void configureRangeAxes(){  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      yAxis.configure();    }  }}  }
class C{  protected Fidelity(int value){  super(value);}  }
class C{  private void exportOneVnaPerScope() throws CommandException, IOException {  Set<CnATreeElement> elementSet=dialog.getSelectedElementSet();  if (elementSet != null && elementSet.size() > 0) {    int i=0;    for (    CnATreeElement element : elementSet) {      export(Arrays.asList(element),i);      i++;    }  }}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.812 -0500",hash_original_method="C6B8ECCB9FBEF4C7E1D5D0DF0E82610C",hash_generated_method="ABA6ECAD9458CDC7CAA93DA9AC75DEA5") public boolean hasThread(){  return !this.waitingThreads.isEmpty();}  }
class C{  public static void add(String name,IKeyboard keyboard){  registry.put(name,keyboard);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double radToDeg=180 / Math.PI;  double degToRad=Math.PI / 180;  double zFactor=1;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double fx, fy;  double gridRes, eightGridRes;  double azimuth=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth < 0 || azimuth > 360) {    azimuth=0;  }  zFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    eightGridRes=8 * gridRes;    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    double[] N=new double[8];    double rad180=180 * degToRad;    double rad90=90 * degToRad;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (i=0; i < 8; i++) {            N[i]=DEM.getValue(row + dY[i],col + dX[i]);            if (N[i] != noData) {              N[i]=N[i] * zFactor;            } else {              N[i]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            z=180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx));            z=Math.abs(z - azimuth);            if (z > 180) {              z=360 - z;            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,-1);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void store(final SwapKey key,@Nullable final byte[] val) throws IgniteSpiException {  assert key != null;  final ConcurrentMap<SwapKey,SwapValue> part=partition(key.partition(),true);  assert part != null;  if (val == null) {    SwapValue swapVal=part.remove(key);    if (swapVal != null) {      removeFromFile(swapVal);      size.addAndGet(-swapVal.len);      cnt.decrementAndGet();    }    return;  }  final SwapValue swapVal=new SwapValue(val);  SwapValue old=part.put(key,swapVal);  if (old != null) {    size.addAndGet(val.length - old.len);    removeFromFile(old);  } else {    size.addAndGet(val.length);    cnt.incrementAndGet();  }  que.add(swapVal);}  }
class C{  @Nullable public GridCacheMvccCandidate doneRemote(GridCacheVersion ver,Collection<GridCacheVersion> pending,Collection<GridCacheVersion> committed,Collection<GridCacheVersion> rolledback){  assert ver != null;  if (log.isDebugEnabled())   log.debug("Setting remote candidate to done [mvcc=" + this + ", ver="+ ver+ "]");  GridCacheMvccCandidate cand=candidate(rmts,ver);  if (cand != null) {    assert rmts != null;    assert !rmts.isEmpty();    assert !cand.local() : "Remote candidate is marked as local: " + cand;    assert !cand.nearLocal() : "Remote candidate is marked as near local: " + cand;    cand.setOwner();    cand.setUsed();    List<GridCacheMvccCandidate> mvAfter=null;    for (ListIterator<GridCacheMvccCandidate> it=rmts.listIterator(); it.hasNext(); ) {      GridCacheMvccCandidate c=it.next();      assert !c.nearLocal() : "Remote candidate marked as near local: " + c;      if (c == cand) {        if (mvAfter != null)         for (        GridCacheMvccCandidate mv : mvAfter)         it.add(mv);        break;      } else       if (!committed.contains(c.version()) && !rolledback.contains(c.version()) && pending.contains(c.version())) {        it.remove();        if (mvAfter == null)         mvAfter=new LinkedList<>();        mvAfter.add(c);      }    }  }  return anyOwner();}  }
class C{  public void doDelete(){  try {    if (this.currentRule == null) {      this.setStatusBarMessage("Please select a rule to be deleted.",BasePanel.INFORMATION);      return;    }    int result=JOptionPane.showConfirmDialog(this.getFrame(),"Do you want to delete selected rule?","Information",JOptionPane.YES_NO_OPTION);    if (result == JOptionPane.YES_OPTION) {      for (      Strategy strategy : this.strategies) {        if (strategy.getIdStrategy().equals(this.currentRule.getStrategy().getIdStrategy())) {          strategy.getRules().remove(this.currentRule);          this.tradePersistentModel.removeAspect(this.currentRule);        }      }      Integer version=this.tradePersistentModel.findRuleByMaxVersion(this.currentRule.getStrategy());      if (version == this.currentRule.getVersion() && version > 1) {        setMessageText("File system is out of sync with DB please re deploy the latest version.",false,true,colorRedAttr);      }      refreshTree();    }  } catch (  Exception ex) {    setErrorMessage("Error saving rule",ex.getMessage(),ex);  }}  }
class C{  private boolean anyInitiatorsAreInAStorageGroup(StorageSystem storage,List<Initiator> initiators){  List<String> portNames=new ArrayList<>(Collections2.transform(initiators,CommonTransformerFunctions.fctnInitiatorToPortName()));  Map<String,Set<URI>> foundMasks=findExportMasks(storage,portNames,false);  return !foundMasks.isEmpty();}  }
class C{  public GF2nPolynomial(int deg,GF2nElement elem){  size=deg;  coeff=new GF2nElement[size];  for (int i=0; i < size; i++) {    coeff[i]=(GF2nElement)elem.clone();  }}  }
class C{  private void clearNotifications0(){  updateNotificationsNodeLabel(currentNode,Messages.NOTIFICATIONS + "[0]");}  }
class C{  public JsonObject add(String name,boolean value){  add(name,Json.value(value));  return this;}  }
class C{  public static long toLong(Object obj){  Long result=toLongObject(obj);  return result == null ? 0 : result.longValue();}  }
class C{  public void testStructuralIdentity(){  boolean simulation=true;  SessionNode node1=new SessionNode(Type1.class);  SessionNode node2=new SessionNode(Type2.class);  SessionNode node3=new SessionNode(Type3.class);  try {    node1.addParent(node2);    node1.addParent(node3);    node3.addParent(node2);    node2.createModel(Type2.class,simulation);    node3.createModel(Type3.class,simulation);    node1.createModel(Type1.class,simulation);    assertTrue(node1.isStructurallyIdentical(node1));    assertTrue(!node1.isStructurallyIdentical(node2));  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  protected DefaultListModel stringToModel(String s){  DefaultListModel result;  String tmpStr;  int i;  boolean quote;  String[] find;  String[] replace;  int index;  result=new DefaultListModel();  find=new String[]{"\"\"","\\n","\\r","\\t"};  replace=new String[]{"\"","\n","\r","\t"};  for (i=0; i < find.length; i++) {    tmpStr="";    while (s.length() > 0) {      index=s.indexOf(find[i]);      if (index > -1) {        tmpStr+=s.substring(0,index) + replace[i];        s=s.substring(index + 2);      } else {        tmpStr+=s;        s="";      }    }    s=tmpStr;  }  quote=false;  tmpStr="";  for (i=0; i < s.length(); i++) {    if (s.charAt(i) == '"') {      quote=!quote;      tmpStr+="" + s.charAt(i);    } else     if (s.charAt(i) == ',') {      if (quote) {        tmpStr+="" + s.charAt(i);      } else {        if (tmpStr.startsWith("\"")) {          tmpStr=tmpStr.substring(1,tmpStr.length() - 1);        }        result.addElement(tmpStr);        tmpStr="";      }    } else {      tmpStr+="" + s.charAt(i);    }  }  if (!tmpStr.equals("")) {    if (tmpStr.startsWith("\"")) {      tmpStr=tmpStr.substring(1,tmpStr.length() - 1);    }    result.addElement(tmpStr);  }  return result;}  }
class C{  public static boolean contributesToExtensionPoint(Bundle bundle,String extensionSimpleId,String extensionPointId){  IExtensionRegistry registry=RegistryFactory.getRegistry();  IContributor contributor=ContributorFactoryOSGi.createContributor(bundle);  for (  IExtension extension : registry.getExtensions(contributor.getName())) {    if (extension.getExtensionPointUniqueIdentifier().equals(extensionPointId)) {      if (extensionSimpleId != null && !extensionSimpleId.equals(extension.getSimpleIdentifier())) {        continue;      }      return true;    }  }  return false;}  }
class C{  public void removeAllTrailers(){  trailer.clear();  firePropertyChange(TRAILER,null,trailer);}  }
class C{  public void loadPreviouslyDeployedJars(){  List<JarClassLoader> jarClassLoaders=new ArrayList<JarClassLoader>();  lock.lock();  try {    try {      verifyWritableDeployDirectory();      final Set<String> jarNames=findDistinctDeployedJars();      if (!jarNames.isEmpty()) {        for (        String jarName : jarNames) {          final File[] jarFiles=findSortedOldVersionsOfJar(jarName);          if (jarFiles.length != 0) {            JarClassLoader jarClassLoader=findJarClassLoader(jarName);            try {              final byte[] jarBytes=getJarContent(jarFiles[0]);              if (!JarClassLoader.isValidJarContent(jarBytes)) {                logger.warn("Invalid JAR file found and deleted: {}",jarFiles[0].getAbsolutePath());                jarFiles[0].delete();              } else {                if (jarClassLoader == null || !jarClassLoader.getFileName().equals(jarFiles[0].getName())) {                  jarClassLoader=new JarClassLoader(jarFiles[0],jarName,jarBytes);                  ClassPathLoader.getLatest().addOrReplaceAndSetLatest(jarClassLoader);                  jarClassLoaders.add(jarClassLoader);                }              }            } catch (            IOException ioex) {              if (logger.isDebugEnabled()) {                logger.debug("Failed attempt to use JAR to create JarClassLoader for: {}",jarName);              }            }            for (            File jarFile : jarFiles) {              if (jarFile.exists() && (jarClassLoader == null || !jarClassLoader.getFileName().equals(jarFile.getName()))) {                attemptFileLockAndDelete(jarFile);              }            }          }        }      }      for (      JarClassLoader jarClassLoader : jarClassLoaders) {        jarClassLoader.loadClassesAndRegisterFunctions();      }    } catch (    VirtualMachineError e) {      SystemFailure.initiateFailure(e);      throw e;    }catch (    Throwable th) {      SystemFailure.checkFailure();      logger.error("Error when attempting to deploy JAR files on load.",th);    }  }  finally {    lock.unlock();  }}  }
class C{  public static boolean verifyPermissions(int... grantResults){  if (grantResults.length == 0) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args){  checkUpdate();}  }
class C{  public int biasedExponent(){  int signExp=(int)(xBits >> 52);  int exp=signExp & 0x07ff;  return exp;}  }
class C{  public void onStop(){  AppEventsLogger.onContextStop();}  }
class C{  public CloudObject[] queryEquals(String type,int index,String value,int page,int limit,int visibilityScope) throws CloudException {  return (CloudObject[])queryImpl(type,value,index,page,limit,visibilityScope,1,0,false,false,false,null);}  }
class C{  public BroParserTest() throws Exception {  super();}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  if (s == null) {    missing=true;    return;  }  try {    ListBuilder builder=new ListBuilder();    doParse(s,builder);    if (builder.getList() != null) {      clear(itemList);    }    itemList=builder.getList();  } catch (  ParseException e) {    itemList=new ArrayList(1);    malformed=true;  }}  }
class C{  String peekPersistent(final int index){  return myPersistentStack.get(myPersistentStack.size() - index - 1);}  }
class C{  public void testSchemaChange() throws Exception {  String[] changes={"create table foo (id int primary key)","DROP   TABLE foo","alter table foo add column data1 varchar(30)","alter table foo drop column data1"};  SchemaChangeFilter scf=new SchemaChangeFilter();  filterHelper.setFilter(scf);  for (  String change : changes) {    ReplDBMSEvent e=filter(filterHelper,0,"foo",change);    assertEventProperty(e,"schema_change");    assertEventPropertyNull(e,"truncate");    assertStatementProperty(e,ReplOptionParams.OPERATION_NAME);    assertStatementProperty(e,ReplOptionParams.SCHEMA_NAME);    assertStatementProperty(e,ReplOptionParams.TABLE_NAME);  }  filterHelper.done();}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public boolean commitPartialResult(String text){  commitText(text);  mPrevText=text;  return true;}  }
class C{  public title(String title){  addElement(title);}  }
class C{  public void incrementCseq(){  mCseq++;  Dialog dlg=getStackDialog();  if ((dlg != null) && dlg.isServer()) {    dlg.incrementLocalSequenceNumber();  }}  }
class C{  public <T extends MessageLite>T readMessage(final Parser<T> parser,final ExtensionRegistryLite extensionRegistry) throws IOException {  int length=readRawVarint32();  if (recursionDepth >= recursionLimit) {    throw InvalidProtocolBufferException.recursionLimitExceeded();  }  final int oldLimit=pushLimit(length);  ++recursionDepth;  T result=parser.parsePartialFrom(this,extensionRegistry);  checkLastTagWas(0);  --recursionDepth;  popLimit(oldLimit);  return result;}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    if (ALLOW_BROKEN_PRNG) {      Log.w(PrngFixes.class.getSimpleName(),"Failed to seed OpenSSL PRNG",e);    } else {      throw new SecurityException("Failed to seed OpenSSL PRNG",e);    }  }}  }
class C{  public ListDataEvent(Object source,int type,int index0,int index1){  super(source);  this.type=type;  this.index0=Math.min(index0,index1);  this.index1=Math.max(index0,index1);}  }
class C{  private static synchronized Rendezvous current(String where,int expected){  Rendezvous cur=current.get(where);  if (cur == null) {    cur=new Rendezvous(where,expected);    current.put(where,cur);  } else {    if (!where.equals(cur.where)) {      throw new RuntimeException(String.format("Arriving at barrier %d when %s is active",where,cur.where));    }    assert expected == cur.expected : "At barrier " + where + ", expected="+ expected+ ", but existing barrier expects "+ cur.expected;  }  return cur;}  }
class C{  public boolean init(){  log.config("");  boolean trl=!Env.isBaseLanguage(m_ctx,"AD_Process");  String sql="SELECT Name, Description, Help, IsReport, ShowHelp " + "FROM AD_Process " + "WHERE AD_Process_ID=?";  if (trl)   sql="SELECT t.Name, t.Description, t.Help, p.IsReport, p.ShowHelp " + "FROM AD_Process p, AD_Process_Trl t " + "WHERE p.AD_Process_ID=t.AD_Process_ID"+ " AND p.AD_Process_ID=? AND t.AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Process_ID);    if (trl)     pstmt.setString(2,Env.getAD_Language(m_ctx));    rs=pstmt.executeQuery();    if (rs.next()) {      m_Name=rs.getString(1);      m_IsReport=rs.getString(4).equals("Y");      m_ShowHelp=rs.getString(5);      m_messageText.append("<b>");      String s=rs.getString(2);      if (rs.wasNull())       m_messageText.append(Msg.getMsg(m_ctx,"StartProcess?")); else       m_messageText.append(s);      m_messageText.append("</b>");      s=rs.getString(3);      if (!rs.wasNull())       m_messageText.append("<p>").append(s).append("</p>");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return false;  } finally {    DB.close(rs,pstmt);  }  if (m_Name == null)   return false;  this.setTitle(m_Name);  initialMessage=m_messageText.toString();  message.setContent(initialMessage);  bOK.setLabel(Msg.getMsg(Env.getCtx(),"Start"));  m_pi=new WProcessInfo(m_Name,m_AD_Process_ID);  m_pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));  m_pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));  parameterPanel=new ProcessParameterPanel(m_WindowNo,m_pi,"70%");  centerPanel.getChildren().clear();  if (parameterPanel.init()) {    centerPanel.appendChild(parameterPanel);  } else {    if (m_ShowHelp != null && m_ShowHelp.equals("N")) {      startProcess();    }  }  if (m_ShowHelp != null && m_ShowHelp.equals("S")) {    startProcess();  }  querySaved();  return true;}  }
class C{  public static void arc(double x,double y,double r,double angle1,double angle2){  if (r < 0)   throw new IllegalArgumentException("arc radius must be nonnegative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("DDFModule:\n");  buf.append("    _recLength = ").append(_recLength).append("\n");  buf.append("    _interchangeLevel = ").append(_interchangeLevel).append("\n");  buf.append("    _leaderIden = ").append((char)_leaderIden).append("\n");  buf.append("    _inlineCodeExtensionIndicator = ").append(_inlineCodeExtensionIndicator).append("\n");  buf.append("    _versionNumber = ").append(_versionNumber).append("\n");  buf.append("    _appIndicator = ").append(_appIndicator).append("\n");  buf.append("    _extendedCharSet = ").append(_extendedCharSet).append("\n");  buf.append("    _fieldControlLength = ").append(_fieldControlLength).append("\n");  buf.append("    _fieldAreaStart = ").append(_fieldAreaStart).append("\n");  buf.append("    _sizeFieldLength = ").append(_sizeFieldLength).append("\n");  buf.append("    _sizeFieldPos = ").append(_sizeFieldPos).append("\n");  buf.append("    _sizeFieldTag = ").append(_sizeFieldTag).append("\n");  return buf.toString();}  }
class C{  public FluentBiFunction<T1,T2,R> visitEvent(final Consumer<R> eventConsumer,final Consumer<Throwable> errorConsumer){  return FluentFunctions.of(null);}  }
class C{  public static int hexToInt(final String src,final int srcPos,final int dstInit,final int dstPos,final int nHex){  if (0 == nHex) {    return dstInit;  }  if ((nHex - 1) * 4 + dstPos >= 32) {    throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greather or equal to than 32");  }  int out=dstInit;  int shift=0;  for (int i=0; i < nHex; i++) {    shift=i * 4 + dstPos;    final int bits=(0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;    final int mask=0xf << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void testCreateAndSendTrack_sendPausedTrack(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createTrackWithPause(3);  instrumentation.waitForIdleSync();  checkSendTrackToGoogle();}  }
class C{  private final int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  for (int i=0; i < key.length; t++) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;  }  int k=(ROUNDS + 1) << 2;  for (int i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (int i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public void reloadFromPreference(){  if (mEmergencyContactsPreferenceCategory != null) {    mEmergencyContactsPreferenceCategory.reloadFromPreference();  }}  }
class C{  public IndexSchema create(String resourceName,SolrConfig config){  SolrResourceLoader loader=config.getResourceLoader();  InputStream schemaInputStream=null;  if (null == resourceName) {    resourceName=IndexSchema.DEFAULT_SCHEMA_FILE;  }  try {    schemaInputStream=loader.openSchema(resourceName);  } catch (  Exception e) {    final String msg="Error loading schema resource " + resourceName;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  }  InputSource inputSource=new InputSource(schemaInputStream);  inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(resourceName));  IndexSchema schema=new IndexSchema(config,resourceName,inputSource);  return schema;}  }
class C{  public void commit(){  info("COMMITting Solr index changes to " + solrUrl + "...");  doGet(appendParam(solrUrl.toString(),"commit=true"));}  }
class C{  public void removeNotOverriddenDependency(RVMMethod source){  nonOverriddenHash.remove(source);}  }
class C{  public KeyStoreLoadException(KeyStoreType keyStoreType){  super();  this.keyStoreType=keyStoreType;}  }
class C{  public static void dismissGlobally(final Context context,final List<AlarmId> alarmIds){  final String senderId=context.getResources().getString(R.string.notification_sender_id);  if ("".equals(senderId)) {    Log.i(TAG,"no sender configured");    return;  }  Set<Long> eventIds=new HashSet<Long>(alarmIds.size());  for (  AlarmId alarmId : alarmIds) {    eventIds.add(alarmId.mEventId);  }  Map<Long,Long> eventsToCalendars=lookupEventToCalendarMap(context,eventIds);  if (eventsToCalendars.isEmpty()) {    Log.d(TAG,"found no calendars for events");    return;  }  Set<Long> calendars=new LinkedHashSet<Long>();  calendars.addAll(eventsToCalendars.values());  Map<Long,Pair<String,String>> calendarsToAccounts=lookupCalendarToAccountMap(context,calendars);  if (calendarsToAccounts.isEmpty()) {    Log.d(TAG,"found no accounts for calendars");    return;  }  Map<String,String> syncIdToAccount=new HashMap<String,String>();  Map<Long,String> eventIdToSyncId=new HashMap<Long,String>();  ContentResolver resolver=context.getContentResolver();  for (  Long eventId : eventsToCalendars.keySet()) {    Long calendar=eventsToCalendars.get(eventId);    Pair<String,String> account=calendarsToAccounts.get(calendar);    if (GOOGLE_ACCOUNT_TYPE.equals(account.first)) {      Uri uri=asSync(Events.CONTENT_URI,account.first,account.second);      Cursor cursor=resolver.query(uri,EVENT_SYNC_PROJECTION,Events._ID + " = " + eventId,null,null);      try {        cursor.moveToPosition(-1);        int sync_id_idx=cursor.getColumnIndex(Events._SYNC_ID);        if (sync_id_idx != -1) {          while (cursor.moveToNext()) {            String syncId=cursor.getString(sync_id_idx);            syncIdToAccount.put(syncId,account.second);            eventIdToSyncId.put(eventId,syncId);          }        }      }  finally {        cursor.close();      }    }  }  if (syncIdToAccount.isEmpty()) {    Log.d(TAG,"found no syncIds for events");    return;  }  CloudNotificationBackplane cnb=ExtensionsFactory.getCloudNotificationBackplane();  if (cnb.open(context)) {    for (    AlarmId alarmId : alarmIds) {      String syncId=eventIdToSyncId.get(alarmId.mEventId);      String account=syncIdToAccount.get(syncId);      Bundle data=new Bundle();      data.putString(SYNC_ID,syncId);      data.putString(START_TIME,Long.toString(alarmId.mStart));      data.putString(ACCOUNT_NAME,account);      try {        cnb.send(account,syncId + ":" + alarmId.mStart,data);      } catch (      IOException e) {      }    }    cnb.close();  }}  }
class C{  public void send(String data) throws IOException {  DatagramPacket dp=new DatagramPacket(data.getBytes(),data.length(),multicastGroup);  datagramSocket.send(dp);}  }
class C{  public DLabel(int... c){  this(coordToString(c),AbstractDrawer.DEFAULT_COLOR,c);}  }
class C{  public static String calcEtag(final SolrQueryRequest solrReq){  final SolrCore core=solrReq.getCore();  final long currentIndexVersion=solrReq.getSearcher().getIndexReader().getVersion();  EtagCacheVal etagCache=etagCoreCache.get(core);  if (null == etagCache) {    final String etagSeed=core.getSolrConfig().getHttpCachingConfig().getEtagSeed();    etagCache=new EtagCacheVal(etagSeed);    etagCoreCache.put(core,etagCache);  }  return etagCache.calcEtag(currentIndexVersion);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public ExceptionBuilder property(String property){  body.setProperty(property);  return this;}  }
class C{  private Collection evaluateFunction(Collection source,int from,int to,int position,int last,boolean isFilterContext) throws XPatherException {  String name=tokenArray[from].trim();  ArrayList result=new ArrayList();  final int size=source.size();  Iterator iterator=source.iterator();  int index=0;  while (iterator.hasNext()) {    Object curr=iterator.next();    index++;    if ("last".equals(name)) {      result.add(Integer.valueOf(isFilterContext ? last : size));    } else     if ("position".equals(name)) {      result.add(Integer.valueOf(isFilterContext ? position : index));    } else     if ("text".equals(name)) {      if (curr instanceof TagNode) {        result.add(((TagNode)curr).getText());      } else       if (curr instanceof String) {        result.add(curr.toString());      }    } else     if ("count".equals(name)) {      Collection argumentEvaluated=evaluateAgainst(source,from + 2,to - 1,false,position,0,isFilterContext,null);      result.add(Integer.valueOf(argumentEvaluated.size()));    } else     if ("data".equals(name)) {      Collection argumentEvaluated=evaluateAgainst(source,from + 2,to - 1,false,position,0,isFilterContext,null);      Iterator it=argumentEvaluated.iterator();      while (it.hasNext()) {        Object elem=it.next();        if (elem instanceof TagNode) {          result.add(((TagNode)elem).getText());        } else         if (elem instanceof String) {          result.add(elem.toString());        }      }    } else {      throw new XPatherException("Unknown function " + name + "!");    }  }  return result;}  }
class C{  public String filter(final String input){  reset();  String s=input;  debug("************************************************");  debug("              INPUT: " + input);  s=escapeComments(s);  debug("     escapeComments: " + s);  s=balanceHTML(s);  debug("        balanceHTML: " + s);  s=checkTags(s);  debug("          checkTags: " + s);  s=processRemoveBlanks(s);  debug("processRemoveBlanks: " + s);  s=validateEntities(s);  debug("    validateEntites: " + s);  debug("************************************************\n\n");  return s;}  }
class C{  public SumOfSqrdPairwiseDistances(DistanceMetric dm){  this.dm=dm;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public ObjectColumn(){  this(Object.class);}  }
class C{  private static IAftermathDelegate findActivityForResultForClass(Class<?> cls){  IAftermathDelegate aftermath=AFTERMATHS.get(cls);  if (aftermath != null) {    if (debug)     Log.d(TAG,"HIT: Cached in aftermath map.");    return aftermath;  }  String clsName=cls.getName();  if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {    if (debug) {      Log.d(TAG,"MISS: Reached framework class. Abandoning search.");    }    return NO_OP;  }  try {    Class<?> aftermathClass=Class.forName(clsName + SUFFIX);    aftermath=(IAftermathDelegate)aftermathClass.newInstance();    if (debug) {      Log.d(TAG,"HIT: Class loaded aftermath class.");    }  } catch (  ClassNotFoundException e) {    if (debug) {      Log.d(TAG,"Not found. Trying superclass " + cls.getSuperclass().getName());    }    aftermath=findActivityForResultForClass(cls.getSuperclass());  }catch (  InstantiationException e) {    Log.e(TAG,e.getMessage());  }catch (  IllegalAccessException e) {    Log.e(TAG,e.getMessage());  }  AFTERMATHS.put(cls,aftermath);  return aftermath;}  }
class C{  private static Map<String,String> mapFormConceptIdToUuid(Set<Integer> xformConceptIds,ContentResolver resolver){  String inClause=Joiner.on(",").join(xformConceptIds);  HashMap<String,String> xformIdToUuid=new HashMap<>();  Cursor cursor=resolver.query(Contracts.Concepts.CONTENT_URI,new String[]{Contracts.Concepts.UUID,Contracts.Concepts.XFORM_ID},Contracts.Concepts.XFORM_ID + " IN (" + inClause+ ")",null,null);  try {    while (cursor.moveToNext()) {      xformIdToUuid.put(Utils.getString(cursor,Contracts.Concepts.XFORM_ID),Utils.getString(cursor,Contracts.Concepts.UUID));    }  }  finally {    cursor.close();  }  return xformIdToUuid;}  }
class C{  @Override public String toString(){  if (_id != null)   return getClass().getSimpleName() + "[" + _id+ "]"; else   return getClass().getSimpleName() + getLoaders();}  }
class C{  public boolean forEachEntry(TDoubleDoubleProcedure procedure){  byte[] states=_states;  double[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public void start(Xid xid,int flags) throws XAException {  StringBuilder commandBuf=new StringBuilder(MAX_COMMAND_LENGTH);  commandBuf.append("XA START ");  appendXid(commandBuf,xid);switch (flags) {case TMJOIN:    commandBuf.append(" JOIN");  break;case TMRESUME:commandBuf.append(" RESUME");break;case TMNOFLAGS:break;default :throw new XAException(XAException.XAER_INVAL);}dispatchCommand(commandBuf.toString());this.underlyingConnection.setInGlobalTx(true);}  }
class C{  protected boolean hostsEqual(URL u1,URL u2){  String s1=u1.getHost();  String s2=u2.getHost();  if ("localhost".equalsIgnoreCase(s1) && (s2 == null || "".equals(s2)))   return true;  if ("localhost".equalsIgnoreCase(s2) && (s1 == null || "".equals(s1)))   return true;  return super.hostsEqual(u1,u2);}  }
class C{  public Property year(){  return new Property(this,getChronology().year());}  }
class C{  @Override public String toString(){  return String.format("Trace Event [%s : %s]",getType(),getAddress());}  }
class C{  public void testMapPut(){  if (!isAddRemoveModifiable())   return;  resetEmpty();  Object[] keys=getSampleKeys();  Object[] values=getSampleValues();  Object[] newValues=getNewSampleValues();  for (int i=0; i < keys.length; i++) {    Object o=map.put(keys[i],values[i]);    confirmed.put(keys[i],values[i]);    verify();    assertTrue("First map.put should return null",o == null);    assertTrue("Map should contain key after put",map.containsKey(keys[i]));    assertTrue("Map should contain value after put",map.containsValue(values[i]));  }  for (int i=0; i < keys.length; i++) {    Object o=map.put(keys[i],newValues[i]);    confirmed.put(keys[i],newValues[i]);    verify();    assertEquals("Second map.put should return previous value",values[i],o);    assertTrue("Map should still contain key after put",map.containsKey(keys[i]));    assertTrue("Map should contain new value after put",map.containsValue(newValues[i]));    if (!useDuplicateValues()) {      assertTrue("Map should not contain old value after second put",!map.containsValue(values[i]));    }  }}  }
class C{  protected Logger(String name,String resourceBundleName){  this(name,resourceBundleName,null,LogManager.getLogManager(),false);}  }
class C{  private int pickGene(){  double selector=Math.abs(random.nextDouble()) % fitnessSum;  int j=0;  double count=fitnesses[j];  while (count < selector && j < fitnesses.length - 1) {    count+=fitnesses[++j];  }  return j;}  }
class C{  public void performPreread(File leftFile,File rightFile) throws IOException {  formattingMessage(true);  final SequenceDataSource leftds=getDnaDataSource(Arrays.asList(leftFile),mInputFormat,PrereadArm.LEFT,mMappedSam,false,mSamReadGroup,mDedupSecondary);  final SequenceDataSource rightds=getDnaDataSource(Arrays.asList(rightFile),mInputFormat,PrereadArm.RIGHT,mMappedSam,false,mSamReadGroup,mDedupSecondary);  leftds.setDusting(mDusting);  rightds.setDusting(mDusting);  final SdfId sdfId=new SdfId();  final PrereadType prereadType=IndexFile.typeFromFormat(mInputFormat);  final SimpleThreadPool pool=new SimpleThreadPool(2,"paired-end prereader",true);  pool.enableBasicProgress(2);  final SequenceProcessor leftSequenceProc=new SequenceProcessor(leftds,prereadType,PrereadArm.LEFT,new File(mOutDir,"left"),sdfId,mNamesToExclude,mCompressed,mReadTrimQualityThreshold);  final SequenceProcessor rightSequenceProc=new SequenceProcessor(rightds,prereadType,PrereadArm.RIGHT,new File(mOutDir,"right"),sdfId,mNamesToExclude,mCompressed,mReadTrimQualityThreshold);  leftSequenceProc.setIncludeNames(mIncludeNames);  rightSequenceProc.setIncludeNames(mIncludeNames);  leftSequenceProc.setIncludeQuality(mIncludeQuality);  rightSequenceProc.setIncludeQuality(mIncludeQuality);  final String readGroup=mReadGroupRecord == null ? null : mReadGroupRecord.toString();  leftSequenceProc.setReadGroup(readGroup);  rightSequenceProc.setReadGroup(readGroup);  try {    pool.execute(leftSequenceProc);    pool.execute(rightSequenceProc);  }  finally {    pool.terminate();  }  final long leftSeqs=leftSequenceProc.mWriter.getNumberOfSequences();  final long rightSeqs=rightSequenceProc.mWriter.getNumberOfSequences();  if (leftSeqs != rightSeqs) {    throw new NoTalkbackSlimException("Invalid input, paired end data must have same number of sequences. Left had: " + leftSeqs + " Right had: "+ rightSeqs);  }  final long leftSeqsTotal=leftSequenceProc.mWriter.getTotalLength();  final long rightSeqsTotal=rightSequenceProc.mWriter.getTotalLength();  final long inputSeqs=leftSeqs + leftSequenceProc.mWriter.getNumberOfExcludedSequences() + rightSeqs+ rightSequenceProc.mWriter.getNumberOfExcludedSequences();  final long inputResidues=leftSeqsTotal + leftSequenceProc.mWriter.getExcludedResidueCount() + rightSeqsTotal+ rightSequenceProc.mWriter.getExcludedResidueCount();  final long inMax=Math.max(leftds.getMaxLength(),rightds.getMaxLength());  final long inMin=Math.min(leftds.getMinLength(),rightds.getMinLength());  final Counts inputCounts=new Counts(inputSeqs,inputResidues,inMax,inMin);  final long outputSeqs=leftSeqs + rightSeqs;  final long outputResidues=leftSeqsTotal + rightSeqsTotal;  final long outMax=Math.max(leftSequenceProc.mWriter.getMaxLength(),rightSequenceProc.mWriter.getMaxLength());  final long outMin=Math.min(leftSequenceProc.mWriter.getMinLength(),rightSequenceProc.mWriter.getMinLength());  final Counts outputCounts=new Counts(outputSeqs,outputResidues,outMax,outMin);  final long dusted=leftds.getDusted() + rightds.getDusted();  mNumSequences=outputSeqs / 2;  writeStats(new File[]{leftFile,rightFile},true,inputCounts,outputCounts,sdfId,dusted);}  }
class C{  public final void insertElementAt(Object element,int index){  Object[] newObjects;  if (m_Size < m_Objects.length) {    for (int i=m_Size - 1; i >= index; i--) {      m_Objects[i + 1]=m_Objects[i];    }    m_Objects[index]=element;  } else {    newObjects=new Object[(int)m_CapacityMultiplier * (m_Objects.length + m_CapacityIncrement)];    System.arraycopy(m_Objects,0,newObjects,0,index);    newObjects[index]=element;    System.arraycopy(m_Objects,index,newObjects,index + 1,m_Size - index);    m_Objects=newObjects;  }  m_Size++;}  }
class C{  static public StringBuilder encodeParams(final LinkedHashMap<String,Vector<String>> expected) throws UnsupportedEncodingException {  final StringBuilder sb=new StringBuilder();  boolean first=true;  for (  Map.Entry<String,Vector<String>> e : expected.entrySet()) {    final String k=e.getKey();    final Vector<String> vec=e.getValue();    for (    String v : vec) {      if (first) {        first=false;      } else {        sb.append("&");      }      sb.append(URLEncoder.encode(k,UTF8));      sb.append("=");      sb.append(URLEncoder.encode(v,UTF8));    }  }  return sb;}  }
class C{  public HtmlPolicyBuilder withPostprocessor(HtmlStreamEventProcessor pp){  this.postprocessor=HtmlStreamEventProcessor.Processors.compose(this.postprocessor,pp);  return this;}  }
class C{  public void createWeekScenarioBug10265_ParChangeWithFreeP() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-02-28 06:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"RARCHANGE_WEEK_FREEP",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS_FREEP,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("RARCHANGE_WEEK_FREEP",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 07:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 23:00:00"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-28 23:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-01 01:00:01"),"MAX_FOLDER_NUMBER","3");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 01:00:02"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  long usageEndTime=DateTimeHandling.calculateMillis("2013-03-03 07:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("RARCHANGE_WEEK_FREEP",subDetails);}  }
class C{  public static VCardDataType find(String dataType){  return enums.find(dataType);}  }
class C{  public void replaceTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean createSequenceTables,boolean createSequences){  replaceTablesAndConstraints(schemaManager,session,createSequenceTables,createSequences);}  }
class C{  public void pinMode(int pin,byte mode){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  if (isPinDebuggingEnabled)   Log.i("Device " + this.name + ": Change mode of pin "+ pin+ " to "+ mode+ ".");  if (pin >= 20 || pin < 0)   throw new IncorrectPinException("The specified pin number is incorrect, are you sure you specified it correctly?");  byte[] writeData={SET_PIN_MODE,(byte)pin,mode};synchronized (sendingDataLock) {    write(writeData);  }}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  preference.setSummary((CharSequence)newValue);  return true;}  }
class C{  @Delete public String remove(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule;  try {    rule=jsonToFirewallRule(fmJson);  } catch (  IOException e) {    log.error("Error parsing firewall rule: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  boolean exists=false;  Iterator<FirewallRule> iter=firewall.getRules().iterator();  while (iter.hasNext()) {    FirewallRule r=iter.next();    if (r.ruleid == rule.ruleid) {      exists=true;      break;    }  }  if (!exists) {    status="Error! Can't delete, a rule with this ID doesn't exist.";    log.error(status);  } else {    firewall.deleteRule(rule.ruleid);    status="Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  protected DateStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static String detectSentenceType(final String text,final Sentence sentence){  final PunctuationParser punct=new PunctuationParser(text);  final String trailing=punct.getTrailingPunctuation();  String newText;  if (trailing.contains("?")) {    sentence.setType(Sentence.SentenceType.QUESTION);    newText=punct.getText();  } else   if (trailing.contains("!")) {    sentence.setType(Sentence.SentenceType.IMPERATIVE);    newText=punct.getText();  } else   if (trailing.contains(".")) {    sentence.setType(Sentence.SentenceType.STATEMENT);    newText=punct.getText();  } else {    newText=text;  }  return newText;}  }
class C{  @Override public boolean isEmpty(){  return nodes.isEmpty();}  }
class C{  public void reset(){  super.reset();  H1=0xcbbb9d5dc1059ed8l;  H2=0x629a292a367cd507l;  H3=0x9159015a3070dd17l;  H4=0x152fecd8f70e5939l;  H5=0x67332667ffc00b31l;  H6=0x8eb44a8768581511l;  H7=0xdb0c2e0d64f98fa7l;  H8=0x47b5481dbefa4fa4l;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public PlatformCacheIterator iterator(){  Iterator<Cache.Entry> iter=cache.iterator();  return new PlatformCacheIterator(platformCtx,iter);}  }
class C{  public void unregisterListener(JsFileLoadedListener listener){  listeners.remove(listener);}  }
class C{  @RequestMapping("/be/login") public ModelAndView login(Map<String,Object> map,@RequestParam(value="error",required=false) String error,@RequestParam(value="logout",required=false) String logout,HttpServletResponse response){  ModelAndView model=new ModelAndView();  if (error != null) {    model.addObject("error","Invalid credentials");  }  if (logout != null) {    model.addObject("message","Log out completo.");  }  model.setViewName("be/login");  return model;}  }
class C{  protected void commandInternalRun(final Map<String,Object> params){  if (MapUtils.isNotEmpty(params)) {    final Map<String,Object> safe=new HashMap<String,Object>();    for (    final Map.Entry<String,Object> entry : params.entrySet()) {      if (!commandConfig.isInternalCommandKey(entry.getKey())) {        safe.put(entry.getKey(),entry.getValue());      } else {        ShopCodeContext.getLog(this).warn("Received internal command request {} ... skipping",entry.getKey());      }    }    if (!safe.isEmpty()) {      shoppingCartCommandFactory.execute(cartMixin.getCurrentCart(),safe);    }  }}  }
class C{  private static double distance(double[] p1,double[] p2){  double sum=0.0;  for (int i=0; i < p1.length; i++) {    sum+=Math.pow(p2[i] - p1[i],2.0);  }  return Math.sqrt(sum);}  }
class C{  public static void initializeGlobalThreadPoolProperties(){  setGlobalThreadPoolProperties(Integer.valueOf(System.getProperty(ActiveMQClient.THREAD_POOL_MAX_SIZE_PROPERTY_KEY,"" + ActiveMQClient.DEFAULT_GLOBAL_THREAD_POOL_MAX_SIZE)),Integer.valueOf(System.getProperty(ActiveMQClient.SCHEDULED_THREAD_POOL_SIZE_PROPERTY_KEY,"" + ActiveMQClient.DEFAULT_SCHEDULED_THREAD_POOL_MAX_SIZE)));}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0) {    uri="http://" + uri;  } else   if (isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  public void makeQuestion(){  this.setText(this.getGenre() + " " + this.getTimeFrame()+ " "+ this.getRating());}  }
class C{  public void relocate(final File newQueuePath){  this.workerQueue.clear();  this.errorURL.clearCache();  new ErrorCacheFiller(this.sb,this.errorURL).start();  if (this.remoteCrawlProviderHashes != null)   this.remoteCrawlProviderHashes.clear();  this.noticeURL.close();  this.noticeURL=new NoticedURL(newQueuePath,sb.getConfigInt("crawler.onDemandLimit",1000),this.sb.exceed134217727);  if (this.delegatedURL != null)   this.delegatedURL.clear();}  }
class C{  public static void sort(long[] a){  doSort(a,0,a.length - 1);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  protected void removeClassifiers(int[] indices){  int i;  if (indices == null) {    m_ModelClassifiers.removeAllElements();  } else {    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);  }  setModified(true);}  }
class C{  public boolean isRangeCrosshairVisible(){  return this.rangeCrosshairVisible;}  }
class C{  public Object call(Object object,String name,Object[] args) throws BSFException {  throw new BSFException("The call method is not yet supported for SimpleMethods");}  }
class C{  public boolean verifyReturnTo(String receivingUrl,AuthSuccess response){  if (DEBUG)   _log.debug("Verifying return URL; receiving: " + receivingUrl + "\nmessage: "+ response.getReturnTo());  URL receiving;  URL returnTo;  try {    receiving=new URL(receivingUrl);    returnTo=new URL(response.getReturnTo());  } catch (  MalformedURLException e) {    _log.error("Invalid return URL.",e);    return false;  }  StringBuffer receivingPath=new StringBuffer(receiving.getPath());  if (receivingPath.length() > 0 && receivingPath.charAt(receivingPath.length() - 1) != '/')   receivingPath.append('/');  StringBuffer returnToPath=new StringBuffer(returnTo.getPath());  if (returnToPath.length() > 0 && returnToPath.charAt(returnToPath.length() - 1) != '/')   returnToPath.append('/');  if (!receiving.getProtocol().equals(returnTo.getProtocol()) || !receiving.getAuthority().equals(returnTo.getAuthority()) || !receivingPath.toString().equals(returnToPath.toString())) {    if (DEBUG)     _log.debug("Return URL schema, authority or " + "path verification failed.");    return false;  }  try {    Map returnToParams=extractQueryParams(returnTo);    Map receivingParams=extractQueryParams(receiving);    if (returnToParams == null)     return true;    if (receivingParams == null) {      if (DEBUG)       _log.debug("Return URL query parameters verification failed.");      return false;    }    Iterator iter=returnToParams.keySet().iterator();    while (iter.hasNext()) {      String key=(String)iter.next();      List receivingValues=(List)receivingParams.get(key);      List returnToValues=(List)returnToParams.get(key);      if (receivingValues == null || receivingValues.size() != returnToValues.size() || !receivingValues.containsAll(returnToValues)) {        if (DEBUG)         _log.debug("Return URL query parameters verification failed.");        return false;      }    }  } catch (  UnsupportedEncodingException e) {    _log.error("Error verifying return URL query parameters.",e);    return false;  }  return true;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public TypedJson add(String key,Object value){  List<Object> list=this.map.get(key);  if (list != null) {    list.add(value);  } else {    list=new ArrayList<Object>();    list.add(value);    this.map.put(key,list);  }  return this;}  }
class C{  public FinnishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static void xtShort(Context context,CharSequence text){  Toast.makeText(context,text,Toast.LENGTH_SHORT).show();}  }
class C{  public boolean maxValue(long val,long maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  public static Settings init(){  return printer.init(DEFAULT_TAG);}  }
class C{  private void reseed() throws RandomDataGenerationException {  if (nBytesGenerated < RESEEDING_LIMIT) {    return;  } else {    try {      setSeed(wrappedRandomnessGenerator.generateSeed(32));    } catch (    Exception e) {      throw new RandomDataGenerationException("reseeding failed");    }  }}  }
class C{  public void accountDownloadEnd(String accountNumber){  _log.debug("accountDownloadEnd: " + accountNumber);}  }
class C{  private long toEpoch(String snortDatetime) throws ParseException {  int year=Calendar.getInstance().get(Calendar.YEAR);  String withYear=Integer.toString(year) + " " + snortDatetime;  SimpleDateFormat df=new SimpleDateFormat("yyyy MM/dd-HH:mm:ss.S");  Date date=df.parse(withYear);  return date.getTime();}  }
class C{  public int alloc_frame_buffer(AVFrame pic){  int r;  r=this.get_buffer((AVFrame)pic);  if (r < 0 || 0 == pic.age || 0 == pic.type || null == pic.data_base[0]) {    return -1;  }  if (this.linesize != 0 && (this.linesize != pic.linesize[0] || this.uvlinesize != pic.linesize[1])) {    free_frame_buffer(pic);    return -1;  }  if (pic.linesize[1] != pic.linesize[2]) {    free_frame_buffer(pic);    return -1;  }  return 0;}  }
class C{  void resetDoubleBuffer(){  if (standardDoubleBuffer != null) {    standardDoubleBuffer.needsReset=true;  }}  }
