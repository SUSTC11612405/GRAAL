class C{  @AndroidOnly("Uses specific class: " + "org.apache.harmony.security.asn1.ASN1OctetString.") public void testSetMaxCRLNumberLjava_math_BigInteger(){  X509CRLSelector selector=new X509CRLSelector();  BigInteger maxCRL=new BigInteger("10000");  TestCRL crl=new TestCRL(maxCRL);  selector.setMaxCRLNumber(null);  assertTrue("Any CRL should match in the case of null minCRLNumber.",selector.match(crl));  selector.setMaxCRLNumber(maxCRL);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setMaxCRLNumber(new BigInteger("9999"));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  public Scanner(InputStream source,String charsetName){  this(makeReadable(Objects.requireNonNull(source,"source"),toCharset(charsetName)),WHITESPACE_PATTERN);}  }
class C{  @After public void afterTestMethodAction(){}  }
class C{  public boolean equals(Timestamp theTimestamp){  if (theTimestamp == null) {    return false;  }  return (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos());}  }
class C{  public void removeHighlight(Object tag){  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }  } else {    HighlightInfo info=(HighlightInfo)tag;    safeDamageRange(info.p0,info.p1);  }  highlights.removeElement(tag);}  }
class C{  public String add(Subject adminSubject,String realm,Privilege p) throws EntitlementException {  ResourceSaveIndexes indexes=p.getEntitlement().getResourceSaveIndexes(adminSubject,realm);  Set<String> subjectIndexes=SubjectAttributesManager.getSubjectSearchIndexes(p);  String dn=null;  try {    createDefaultSubConfig(adminToken,realm,null);    dn=getPrivilegeDistinguishedName(p.getName(),realm,null);    if (SMSEntry.checkIfEntryExists(dn,adminToken)) {      throw new EntitlementException(EntitlementException.POLICY_ALREADY_EXISTS);    }    SMSEntry s=new SMSEntry(adminToken,dn);    Map<String,Set<String>> map=new HashMap<String,Set<String>>();    Set<String> searchable=new HashSet<String>();    map.put(SMSEntry.ATTR_XML_KEYVAL,searchable);    searchable.add(Privilege.RESOURCE_TYPE_UUID_ATTRIBUTE + "=" + p.getResourceTypeUuid());    if (indexes != null) {      for (      String i : indexes.getHostIndexes()) {        searchable.add(HOST_INDEX_KEY + "=" + i);      }      for (      String i : indexes.getPathIndexes()) {        searchable.add(PATH_INDEX_KEY + "=" + i);      }      for (      String i : indexes.getParentPathIndexes()) {        searchable.add(PATH_PARENT_INDEX_KEY + "=" + i);      }      for (      String i : subjectIndexes) {        searchable.add(SUBJECT_INDEX_KEY + "=" + i);      }    }    Set<String> setServiceID=new HashSet<String>(2);    map.put(SMSEntry.ATTR_SERVICE_ID,setServiceID);    setServiceID.add("indexes");    Set<String> set=new HashSet<String>(2);    map.put(SMSEntry.ATTR_KEYVAL,set);    set.add(SERIALIZABLE_INDEX_KEY + "=" + p.toJSONObject().toString());    Set<String> setObjectClass=new HashSet<String>(4);    map.put(SMSEntry.ATTR_OBJECTCLASS,setObjectClass);    setObjectClass.add(SMSEntry.OC_TOP);    setObjectClass.add(SMSEntry.OC_SERVICE_COMP);    Set<String> info=new HashSet<String>(8);    String privilegeName=p.getName();    if (privilegeName != null) {      info.add(Privilege.NAME_ATTRIBUTE + "=" + privilegeName);    }    String privilegeDesc=p.getDescription();    if (privilegeDesc != null) {      info.add(Privilege.DESCRIPTION_ATTRIBUTE + "=" + privilegeDesc);    }    String createdBy=p.getCreatedBy();    if (createdBy != null) {      info.add(Privilege.CREATED_BY_ATTRIBUTE + "=" + createdBy);    }    String lastModifiedBy=p.getLastModifiedBy();    if (lastModifiedBy != null) {      info.add(Privilege.LAST_MODIFIED_BY_ATTRIBUTE + "=" + lastModifiedBy);    }    long creationDate=p.getCreationDate();    if (creationDate > 0) {      String data=Long.toString(creationDate) + "=" + Privilege.CREATION_DATE_ATTRIBUTE;      info.add(data);      info.add("|" + data);    }    long lastModifiedDate=p.getLastModifiedDate();    if (lastModifiedDate > 0) {      String data=Long.toString(lastModifiedDate) + "=" + Privilege.LAST_MODIFIED_DATE_ATTRIBUTE;      info.add(data);      info.add("|" + data);    }    Entitlement ent=p.getEntitlement();    info.add(Privilege.APPLICATION_ATTRIBUTE + "=" + ent.getApplicationName());    for (    String a : p.getApplicationIndexes()) {      info.add(Privilege.APPLICATION_ATTRIBUTE + "=" + a);    }    map.put("ou",info);    s.setAttributes(map);    s.save();    Map<String,String> params=new HashMap<String,String>();    params.put(NotificationServlet.ATTR_NAME,privilegeName);    params.put(NotificationServlet.ATTR_REALM_NAME,realm);    Notifier.submit(NotificationServlet.PRIVILEGE_ADDED,params);    updateIndexCount(realm,1,false);  } catch (  JSONException e) {    throw new EntitlementException(210,e);  }catch (  SSOException e) {    throw new EntitlementException(210,e);  }catch (  SMSException e) {    throw new EntitlementException(210,e);  }  return dn;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.characters(ch,start,length);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ModifyDNRequest(dn=").append(entryDN);  buffer.append(", newRDN=").append(newRDN);  buffer.append(", deleteOldRDN=").append(deleteOldRDN);  if (newSuperior != null) {    buffer.append(", newSuperior=").append(newSuperior);  }  buffer.append(")");}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(ZonedDateTime.class,new ZonedDateTimeSerializer(ISO_FIXED_FORMAT));  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public boolean isBuildable(){  return buildable;}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  ButtonModel model=menuItem.getModel();  FontMetrics fm=SwingUtilities2.getFontMetrics(menuItem,g);  int mnemIndex=menuItem.getDisplayedMnemonicIndex();  if (!model.isEnabled()) {    if (UIManager.get("MenuItem.disabledForeground") instanceof Color) {      g.setColor(UIManager.getColor("MenuItem.disabledForeground"));      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());    } else {      g.setColor(menuItem.getBackground().brighter());      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());      g.setColor(menuItem.getBackground().darker());      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);    }  } else {    if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {      g.setColor(selectionForeground);    }    SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());  }}  }
class C{  protected boolean isReady(){  return readyToRun;}  }
class C{  public void test_addSubjectAlternativeNameLintLbyte_array() throws IOException {  int[] types={GeneralName.OTHER_NAME,GeneralName.RFC822_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addSubjectAlternativeName(types[i],(byte[])null);      fail("No expected NullPointerException for type: " + types[i]);    } catch (    NullPointerException expected) {    }  }}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false;  if (obj2 instanceof XNumber)   return obj2.equals(this); else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XStringForFSB)   return equals((XMLString)obj2); else   return equals(obj2.toString());}  }
class C{  public boolean equals(Object indexType){  if (indexType instanceof IndexType) {    IndexType s=(IndexType)indexType;    return (s.index.equalsIgnoreCase(index));  }  return (false);}  }
class C{  @Override public void run(){  monitorDone=false;  try {    removeDeadThreads();    if (threadList.isEmpty()) {      return;    }    if (waitAllThreadsDied(WAIT_TIME)) {      return;    }    for (    Thread t : threadList) {      try {        if (t.isAlive()) {          t.interrupt();        }      } catch (      Exception e) {      }    }    if (waitAllThreadsDied(WAIT_TIME)) {      return;    }    System.err.println("WARNING:  The following threads were still active " + "after waiting up to 60 seconds for them to stop:");    for (    Thread t : threadList) {      System.err.println("Thread Name:  " + t.getName());      System.err.println("Stack Trace:");      for (      StackTraceElement e : t.getStackTrace()) {        System.err.print("              " + e.getClassName() + "."+ e.getMethodName()+ "("+ e.getFileName()+ ":");        if (e.isNativeMethod()) {          System.err.print("native method");        } else {          System.err.print(e.getLineNumber());        }        System.err.println(")");        System.err.println();      }    }  }  finally {    monitorDone=true;  }}  }
class C{  public static SearchFilter createANDFilter(Collection<SearchFilter> filterComponents){  return new SearchFilter(FilterType.AND,filterComponents,null,null,null,null,null,null,null,false);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof ServicePermission))   return false;  ServicePermission that=(ServicePermission)obj;  return ((this.mask & that.mask) == that.mask) && this.getName().equals(that.getName());}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] args) throws Throwable {  try {    return method.invoke(delegate(),args);  } catch (  IllegalArgumentException e) {    e.printStackTrace();    return null;  }catch (  IllegalAccessException e) {    e.printStackTrace();    return null;  }catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseHeaderElement(buffer,cursor);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void clear(){  request=null;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument01.class,args);}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public MissingResourceException(String s,String className,String key){  super(s);  this.className=className;  this.key=key;}  }
class C{  public static GetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,OptionalRelationDefinition<?,?> r) throws ArgumentException {  return new GetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  private static String fileName(String host,int port){  if (host == null) {    throw new NullPointerException("host == null");  }  return host + "." + port;}  }
class C{  public boolean removePage(PdfPage page){  checkClosingStatus();  int pageNum=getPageNumber(page);  return pageNum >= 1 && removePage(pageNum) != null;}  }
class C{  public X500PrivateCredential(X509Certificate cert,PrivateKey key){  if (cert == null || key == null)   throw new IllegalArgumentException();  this.cert=cert;  this.key=key;  this.alias=null;}  }
class C{  public CodeStream putFloat(final float f){  return putInt(Float.floatToRawIntBits(f));}  }
class C{  public ConnectionWrapper(HostPort hostPort,Type connectionType,DN bindDn,String bindPwd,int connectTimeout,TrustManager trustManager) throws LdapException {  this(hostPort,connectionType,bindDn,bindPwd,connectTimeout,trustManager,null);}  }
class C{  @Override protected boolean sendIntermediateResponseMessage(IntermediateResponse intermediateResponse){  return false;}  }
class C{  public boolean isFiltered(String requestUrl,boolean thirdParty,EnumSet<ContentType> contentTypes){  loadRuleProperties();  if (isOptionEnabled(UrlFilterRuleOption.THIRD_PARTY) && !thirdParty) {    return false;  }  if (isOptionDisabled(UrlFilterRuleOption.THIRD_PARTY) && thirdParty) {    return false;  }  if (shortcut != null && !StringHelperUtils.containsIgnoreCaseAscii(requestUrl,shortcut)) {    return false;  }  Pattern pattern=getUrlRegexp();  if (pattern == null || !pattern.matcher(requestUrl).find()) {    return false;  }  return matchesContentType(contentTypes);}  }
class C{  protected FileHeaderReader(){}  }
class C{  public final int addAndGet(int delta){  for (; ; ) {    int current=get();    int next=current + delta;    if (compareAndSet(current,next))     return next;  }}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") and ("+ exp2+ ")";}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  FormatToken parseFormatToken(int offset){  this.startIndex=offset;  this.i=offset;  return parseArgumentIndexAndFlags(new FormatToken());}  }
class C{  public Signer(String name,IdentityScope scope) throws KeyManagementException {  super(name,scope);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == noteLabel && e.getPropertyName() == "text") {    firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);  }}  }
class C{  public static QrCode encodeBinary(byte[] data,Ecc ecl){  if (data == null || ecl == null)   throw new NullPointerException();  QrSegment seg=QrSegment.makeBytes(data);  return encodeSegments(Arrays.asList(seg),ecl);}  }
class C{  public String toString(){  return super.toString() + ":" + getObject();}  }
class C{  protected ReferralTypeManager(PolicyManager pm){  this.pm=pm;  token=pm.token;  java.util.Locale loc;  try {    String lstr=token.getProperty("Locale");    loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  } catch (  SSOException ex) {    debug.error("ConditionTypeManager:Unable to retreive locale from SSOToken",ex);    loc=Locale.getDefaultLocale();  }  if (debug.messageEnabled()) {    debug.message("SubjectManager locale=" + loc + "\tI18nFileName = "+ ResBundleUtils.rbName);  }  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  @Descriptor("Imports the configuration set from local 'conf' directory.") public void configimport(final CommandSession session,@Descriptor(USER_PASS_DESC) @MetaVar(USER_PASS_METAVAR) @Parameter(names={"-u","--user"},absentValue=USER_PASS_DEFAULT) final String userPass,@Descriptor(IDM_URL_DESC) @MetaVar(IDM_URL_METAVAR) @Parameter(names={"--url"},absentValue=IDM_URL_DEFAULT) final String idmUrl,@Descriptor(IDM_PORT_DESC) @MetaVar(IDM_PORT_METAVAR) @Parameter(names={"-P","--port"},absentValue="") final String idmPort,@Descriptor(REPLACE_ALL_DESC) @Parameter(names={"-r","--replaceall","--replaceAll"},presentValue="true",absentValue="false") final boolean replaceall,@Descriptor(RETRIES_DESC) @Parameter(names={"--retries"},absentValue="10") final int retries,@Descriptor(RETRY_DELAY_DESC) @Parameter(names={"--retryDelay"},absentValue="500") final int retryDelay){  configimport(session,userPass,idmUrl,idmPort,replaceall,retries,retryDelay,"conf");}  }
class C{  @SuppressWarnings("unchecked") private static <T extends Throwable>void sneakyThrow2(Throwable t) throws T {  throw (T)t;}  }
class C{  public synchronized void requestConsumed(){  this.nextSeqno=this.getRemoteSeqNumber() + 1;  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("Request Consumed -- next consumable Request Seqno = " + this.nextSeqno);  }}  }
class C{  public static Map<String,Set<String>> cloneMap(Map<String,Set<String>> map){  Map<String,Set<String>> clone=new HashMap<String,Set<String>>();  for (  String key : map.keySet()) {    Set<String> set=new HashSet<String>();    Set<String> orig=(Set<String>)map.get(key);    set.addAll(orig);    clone.put(key,set);  }  return clone;}  }
class C{  public LDAPMessage(int messageID,ProtocolOp protocolOp){  this(messageID,protocolOp,null);}  }
class C{  public boolean validateOptions(Map options,SSOToken ssoToken){  boolean valid=true;  for (Iterator i=optionAliases.keySet().iterator(); i.hasNext() && valid; ) {    String opt=(String)i.next();    valid=validateAliasOptions(opt,(List)optionAliases.get(opt),options);  }  for (Iterator i=mandatoryOptions.iterator(); i.hasNext() && valid; ) {    String opt=(String)i.next();    List values=(List)options.get(opt);    if (values == null) {      if ((ssoToken == null) || !definition.isAuthOption(opt)) {        List aliases=(List)optionAliases.get(opt);        if ((aliases == null) || aliases.isEmpty()) {          Set aliasGroup=getOptionAliasesGroup(opt);          valid=hasOptionValue(aliasGroup,options,ssoToken);        } else {          valid=hasOptionValue(aliases,options,ssoToken);        }      }    }  }  for (Iterator i=unaryOptionNames.iterator(); i.hasNext() && valid; ) {    String name=(String)i.next();    List list=(List)options.get(name);    valid=(list == null) || list.isEmpty();  }  for (Iterator i=singleOptionNames.iterator(); i.hasNext() && valid; ) {    String name=(String)i.next();    List list=(List)options.get(name);    valid=(list == null) || (list.size() == 1);  }  for (Iterator i=multipleOptionNames.iterator(); i.hasNext() && valid; ) {    String name=(String)i.next();    List list=(List)options.get(name);    valid=(list == null) || (list.size() > 0);  }  return valid;}  }
class C{  public void makeSource() throws Exception {  this.readLabel(readLabelFiles);  this.prepTrainData();  this.prepTestData();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(5,5,"South");  childData=child.getData();  assertEquals("characterdataReplaceDataMiddleAssert","1230 South Ave. Dallas, Texas 98551",childData);}  }
class C{  public PlaDirection direction(){  return line_dir;}  }
class C{  public BasicStroke(float width,int cap,int join){  this(width,cap,join,10.0f,null,0.0f);}  }
class C{  public double weighted_distance(ShapeTileBox p_other,double p_horizontal_weight,double p_vertical_weight){  double result;  double max_ll_x=Math.max(box_ll.v_x,p_other.box_ll.v_x);  double max_ll_y=Math.max(box_ll.v_y,p_other.box_ll.v_y);  double min_ur_x=Math.min(box_ur.v_x,p_other.box_ur.v_x);  double min_ur_y=Math.min(box_ur.v_y,p_other.box_ur.v_y);  if (min_ur_x >= max_ll_x) {    result=Math.max(p_vertical_weight * (max_ll_y - min_ur_y),0);  } else   if (min_ur_y >= max_ll_y) {    result=Math.max(p_horizontal_weight * (max_ll_x - min_ur_x),0);  } else {    double delta_x=max_ll_x - min_ur_x;    double delta_y=max_ll_y - min_ur_y;    delta_x*=p_horizontal_weight;    delta_y*=p_vertical_weight;    result=Math.sqrt(delta_x * delta_x + delta_y * delta_y);  }  return result;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources resources,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(resources,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(resources,resId,options);}  }
class C{  public void flush(){  try {synchronized (lock) {      ensureOpen();      out.flush();    }  } catch (  IOException x) {    trouble=true;  }}  }
class C{  public BoardFrame(DesignFile p_design,Stat p_stat){  stat=p_stat;  design_file=p_design;  item_id_no_generator=new IdGenerator();  resources=new GuiResources(p_stat,"gui.resources.BoardFrame");  gui_help=new GuiHelp(stat);  work_frame=new JFrame();  menubar=new BoardMenuBar(p_stat,this);  work_frame.setJMenuBar(menubar);  toolbar_panel=new BoardToolbar(p_stat,this);  work_frame.add(toolbar_panel,java.awt.BorderLayout.NORTH);  message_panel=new BoardPanelStatus(p_stat);  work_frame.add(message_panel,BorderLayout.SOUTH);  select_toolbar=new BoardToolbarSelectedItem(p_stat,this);  screen_messages=new ScreenMessages(message_panel,p_stat);  scroll_pane=new JScrollPane();  scroll_pane.setPreferredSize(new Dimension(1150,800));  scroll_pane.setVerifyInputWhenFocusTarget(false);  work_frame.add(scroll_pane,BorderLayout.CENTER);  board_panel=new BoardPanel(screen_messages,this,p_stat);  scroll_pane.setViewportView(board_panel);  work_frame.setTitle(resources.getString("title"));  work_frame.addWindowListener(new WindowStateListener());  work_frame.pack();}  }
class C{  private String typeName(Type type,Field field){  String fieldName=field.getName();  String fieldTypeName=field.getTypeUrl();  String arrayPrefix="";  if (field.getCardinality() == Field.Cardinality.CARDINALITY_REPEATED) {    Type items=getApiaryConfig().getType(fieldTypeName);    if (isMapField(type,fieldName)) {      return String.format("map[%s]%s",typeName(items,getField(items,"key")),typeName(items,getField(items,"value")));    }    Field elements=getField(items,"elements");    if (elements != null) {      return "[]" + typeName(items,elements);    }    arrayPrefix="[]";  }  if (field.getKind() == Field.Kind.TYPE_MESSAGE) {    return arrayPrefix + fieldTypeName;  }  if (PRIMITIVE_TYPE.containsKey(field.getKind())) {    return arrayPrefix + PRIMITIVE_TYPE.get(field.getKind());  }  throw new IllegalArgumentException(String.format("cannot find suitable type for %s %s",type.getName(),field.getName()));}  }
class C{  public SaltedSHA384PasswordStorageScheme(){  super();}  }
class C{  @Override public Executor[] findExecutors(){synchronized (executors) {    Executor[] arr=new Executor[executors.size()];    executors.toArray(arr);    return arr;  }}  }
class C{  public ReconContext(final Context parent,String mapping){  super(checkNotNull(parent,"Cannot instantiate ReconContext with null parent Context"),CONTEXT_NAME);  data.put(ATTR_MAPPING,mapping);}  }
class C{  public Parser(ElementStartNode root,ErrorManager err){  this.current=root.getLinkedNode();  this.err=err;}  }
class C{  public void testSpecialCase2(){  byte aBytes[]={-51};  byte bBytes[]={-52,-51,-50,-49,-48};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-52,-51,-50,-49,16};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @SuppressWarnings("unchecked") public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  public static byte[] parseHexBinary(String lexicalXSDHexBinary){  if (theConverter == null)   initConverter();  return theConverter.parseHexBinary(lexicalXSDHexBinary);}  }
class C{  public void print(double dnum){  print(String.valueOf(dnum));}  }
class C{  public void visitTypeArgument(){}  }
class C{  private void scanAndLock(Object key,int hash){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null || key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }}  }
class C{  private static boolean isCoreSyntaxTerm(int term){  return RDFTERM_FIRST_CORE <= term && term <= RDFTERM_LAST_CORE;}  }
class C{  private void initializeExtension(final JarFile jarFile) throws ConfigException {  final JarEntry entry=jarFile.getJarEntry(MANIFEST_RELATIVE_PATH);  if (entry != null) {    InputStream is;    try {      is=jarFile.getInputStream(entry);    } catch (    final Exception e) {      debugLogger.trace("Unable to get input stream from jar",e);      final LocalizableMessage message=ERR_ADMIN_CANNOT_READ_EXTENSION_MANIFEST.get(MANIFEST_RELATIVE_PATH,jarFile.getName(),stackTraceToSingleLineString(e,true));      throw new ConfigException(message);    }    try {      loadDefinitionClasses(is);    } catch (    final ConfigException e) {      debugLogger.trace("Unable to load classes from input stream",e);      final LocalizableMessage message=ERR_CLASS_LOADER_CANNOT_LOAD_EXTENSION.get(jarFile.getName(),MANIFEST_RELATIVE_PATH,stackTraceToSingleLineString(e,true));      throw new ConfigException(message);    }    try {      final String[] information=getBuildInformation(jarFile);      final LocalizableMessage message=NOTE_LOG_EXTENSION_INFORMATION.get(jarFile.getName(),information[1],information[2]);      LocalizedLogger.getLocalizedLogger(message.resourceName()).info(message);    } catch (    final Exception e) {    }  }}  }
class C{  public void testCertPathValidator10() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < invalidValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPV.getProvider(),defaultProvider);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexgetlength.class,args);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public void handleTblRequestHandlerListHrefDupActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSAML2SOAPBindingRequestHandlerListDupViewBean vb=(SCSAML2SOAPBindingRequestHandlerListDupViewBean)getViewBean(SCSAML2SOAPBindingRequestHandlerListDupViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    int idx=Integer.parseInt((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION));    vb.setDupIndex(idx);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public DefaultCompressedSchema(ServerContext serverContext){  super(serverContext);  load();}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);{    boolean success=false;    try {      employeeNode.setPrefix("emp::");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void test_getPeerHost() throws Exception {  SSLSession s=clientSession;  assertEquals(InetAddress.getLocalHost().getHostName(),s.getPeerHost());  assertEquals(serverSocket.getLocalPort(),s.getPeerPort());}  }
class C{  public GlyphMetrics(boolean horizontal,float advanceX,float advanceY,Rectangle2D bounds,byte glyphType){  this.horizontal=horizontal;  this.advanceX=advanceX;  this.advanceY=advanceY;  this.bounds=new Rectangle2D.Float();  this.bounds.setRect(bounds);  this.glyphType=glyphType;}  }
class C{  public UpgradeException(String message){  super(message);}  }
class C{  public GenericTransform(String name){  this.name=name;}  }
class C{  public LockableFileWriter(File file,boolean append,String lockDir) throws IOException {  this(file,Charset.defaultCharset(),append,lockDir);}  }
class C{  ScriptEngineConfiguration(final long scriptExecutionTimeout,final List<Pattern> classWhiteList,final List<Pattern> classBlackList,final SecurityManager securityManager,final int threadPoolCoreSize,final int threadPoolMaxSize,final int threadPoolQueueSize,final long threadPoolIdleTimeout){  Reject.ifNull(classWhiteList,classBlackList);  Reject.ifTrue(scriptExecutionTimeout < 0);  Reject.ifTrue(threadPoolCoreSize < 1);  Reject.ifTrue(threadPoolMaxSize < 1);  Reject.ifTrue(threadPoolQueueSize < -1);  Reject.ifTrue(threadPoolIdleTimeout < 0);  this.scriptExecutionTimeout=scriptExecutionTimeout;  this.classWhiteList=new ArrayList<Pattern>(classWhiteList);  this.classBlackList=new ArrayList<Pattern>(classBlackList);  this.securityManager=securityManager;  this.threadPoolCoreSize=threadPoolCoreSize;  this.threadPoolMaxSize=threadPoolMaxSize;  this.threadPoolQueueSize=threadPoolQueueSize;  this.threadPoolIdleTimeout=threadPoolIdleTimeout;}  }
class C{  @Override public void log(String message){  myLogWriter.println(message);}  }
class C{  public static int findWordStart(CharSequence line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace){  return findWordStart(line,pos,noWordSep,joinNonWordChars,camelCasedWords,eatWhitespace,false);}  }
class C{  public synchronized static void free(FastStringBuffer sb){  sb.setLength(0);  m_stringBufPool.freeInstance(sb);}  }
class C{  public void removeListener(String listenerID){  listenerObjects.remove(listenerID);  if ((listenerID != null) && listenerObjects.isEmpty()) {    SMSNotificationManager.getInstance().removeCallbackHandler(listenerID);  }}  }
class C{  public synchronized <T extends EventListener>void remove(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  int index=-1;  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if ((listenerList[i] == t) && (listenerList[i + 1].equals(l) == true)) {      index=i;      break;    }  }  if (index != -1) {    Object[] tmp=new Object[listenerList.length - 2];    System.arraycopy(listenerList,0,tmp,0,index);    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;  }}  }
class C{  EntryIDSet evaluate(){  appendToDebugBuffer("filter=");  return evaluateFilter(searchOp.getFilter());}  }
class C{  protected Jedis fetchJedisConnector(){  try {    if (pool != null) {      return pool.getResource();    }    Jedis jedis=new Jedis(getShardInfo());    jedis.connect();    return jedis;  } catch (  Exception ex) {    throw new RuntimeException("Cannot get Jedis connection",ex);  }}  }
class C{  public Tasker withCondition(Condition condition){  lastAddedTask.setCondition(condition);  return this;}  }
class C{  public ResponseProvider removeResponseProvider(ResponseProvider responseProvider){  String responseProviderName=getResponseProviderName(responseProvider);  if (responseProviderName != null) {    return (ResponseProvider)removeResponseProvider(responseProviderName);  }  return null;}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public AlgorithmIdentifier(String algorithm,String algorithmName){  this(algorithm,null,null);  this.algorithmName=algorithmName;}  }
class C{  public DataStoreProviderException(Throwable rootCause){  super(rootCause);}  }
class C{  @Get public Representation validate() throws OAuth2RestletException {  logger.trace("In Validator resource");  final OAuth2Request request=requestFactory.create(getRequest());  try {    final JsonValue tokenInfo=tokenInfoService.getTokenInfo(request);    getResponse().getCacheDirectives().add(CacheDirective.noCache());    getResponse().getCacheDirectives().add(CacheDirective.noStore());    return jacksonRepresentationFactory.create(tokenInfo.asMap());  } catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }}  }
class C{  public FrameBodyTDRC(FrameBodyTIME body){  originalID=ID3v23Frames.FRAME_ID_V3_TIME;  time=body.getText();  setHoursOnly(body.isHoursOnly());  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,getFormattedText());}  }
class C{  public boolean isShootingFireball(){  if (shootFireball) {    shootFireball=false;    return true;  }  return false;}  }
class C{  private UnmodifiableIterable(final Iterable<M> iterable){  this.iterable=iterable;}  }
class C{  public static void reportEnd(String str,Object[] param){  writeProgressText(str,param);}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  if (certs == null || certs.length == 0) {    oos.writeInt(0);  } else {    oos.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      java.security.cert.Certificate cert=certs[i];      try {        oos.writeUTF(cert.getType());        byte[] encoded=cert.getEncoded();        oos.writeInt(encoded.length);        oos.write(encoded);      } catch (      CertificateEncodingException cee) {        throw new IOException(cee.getMessage());      }    }  }}  }
class C{  private ModificationType(final int intValue,final String name,final Enum modificationTypeEnum){  this.intValue=intValue;  this.name=name;  this.modificationTypeEnum=modificationTypeEnum;}  }
class C{  private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();  MessageNano.mergeFrom(wrapper,buffer,0,dataSize);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  if (wrapper.checksum != checksum.getValue()) {    throw new InvalidProtocolBufferNanoException("checksum does not match");  }  return wrapper.payload;}  }
class C{  public JFileChooser(File currentDirectory){  this(currentDirectory,(FileSystemView)null);}  }
class C{  public VendorSpecificAttribute(byte[] octets){  super(octets);  id=OctetUtils.toIntVal(octets);  str=new String(octets,6,octets.length - 6,StandardCharsets.UTF_8);}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  if (!((PairedTextEncodedStringNullTerminated)getObject(DataTypes.OBJ_TEXT)).canBeEncoded()) {    this.setTextEncoding(TextEncoding.UTF_16);  }  super.write(tagBuffer);}  }
class C{  public ResultImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public JMenuItem(Action a){  this();  setAction(a);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_SETTINGS_ID,Menu.NONE,getString(R.string.settings_label)).setIcon(android.R.drawable.ic_menu_preferences).setAlphabeticShortcut('s');  menu.add(Menu.NONE,MENU_ABOUT_ID,Menu.NONE,getString(R.string.about)).setAlphabeticShortcut('a').setIcon(android.R.drawable.ic_menu_info_details);  return super.onCreateOptionsMenu(menu);}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder();  xml.append("<SessionResponse vers=").append(QUOTE).append(responseVersion).append(QUOTE).append(" reqid=").append(QUOTE).append(requestID).append(QUOTE).append('>').append(NL);switch (methodID) {case SessionRequest.GetSession:    xml.append("<GetSession>").append(NL);  if (exception != null) {    xml.append("<Exception>").append(exception).append("</Exception>").append(NL);  } else {    if (sessionInfoSet.size() != 1) {      return null;    }    for (    SessionInfo info : sessionInfoSet) {      xml.append(info.toXMLString());    }  }xml.append("</GetSession>").append(NL);break;case SessionRequest.GetValidSessions:xml.append("<GetValidSessions>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<SessionList>").append(NL);for (SessionInfo info : sessionInfoSet) {xml.append(info.toXMLString());}xml.append("</SessionList>").append(NL);xml.append("<Status>").append(Integer.toString(status)).append("</Status>").append(NL);}xml.append("</GetValidSessions>").append(NL);break;case SessionRequest.DestroySession:xml.append("<DestroySession>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<OK></OK>").append(NL);}xml.append("</DestroySession>").append(NL);break;case SessionRequest.Logout:xml.append("<Logout>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<OK></OK>").append(NL);}xml.append("</Logout>").append(NL);break;case SessionRequest.AddSessionListener:xml.append("<AddSessionListener>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<OK></OK>").append(NL);}xml.append("</AddSessionListener>").append(NL);break;case SessionRequest.SetProperty:xml.append("<SetProperty>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<OK></OK>").append(NL);}xml.append("</SetProperty>").append(NL);break;case SessionRequest.GetSessionCount:xml.append("<GetSessionCount>").append(NL);if (exception != null) {xml.append("<Exception>").append(exception).append("</Exception>").append(NL);} else {xml.append("<AllSessionsGivenUUID>").append(NL);Set sids=allSessionsforGivenUUID.keySet();for (Iterator m=sids.iterator(); m.hasNext(); ) {String sid=(String)m.next();xml.append("<SessionExpirationTimeInfo sid=").append(QUOTE).append(sid).append(QUOTE).append(" expTime=").append(QUOTE).append(((Long)allSessionsforGivenUUID.get(sid)).toString()).append(QUOTE).append('>').append("</SessionExpirationTimeInfo>");}xml.append("</AllSessionsGivenUUID>").append(NL);}xml.append("</GetSessionCount>").append(NL);break;default :return null;}xml.append("</SessionResponse>");return xml.toString();}  }
class C{  public InvalidFrameIdentifierException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  private void init(final AbandonedTrace parent){  if (parent != null) {    parent.addTrace(this);  }}  }
class C{  @Override public void onClick(View v){  setResult(RESULT_OK,new Intent().putExtra(KEY_STRETCH,convertToInt(mStretchRect)).putExtra(KEY_PADDING,convertToInt(mPaddingRect)));  finish();}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Event35Log.Builder clearMAXEVENTS(){  MAX_EVENTS=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public final Expression reduceExtensions(){  Expression node=this;  while (node.getNodeType() == ExpressionType.Extension) {    node=node.reduceAndCheck();  }  return node;}  }
class C{  public String toString(){  return "[Digest Output Stream] " + digest.toString();}  }
class C{  public void testCase13(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public ConfigurationBackend(ServerContext serverContext,ConfigurationHandler configurationHandler) throws InitializationException {  this.configurationHandler=configurationHandler;  this.configRootEntry=Converters.to(configurationHandler.getRootEntry());  baseDNs=Collections.singleton(configRootEntry.getName());  setBackendID(CONFIG_BACKEND_ID);}  }
class C{  private void appendNodeValue(String value,boolean forAttribute) throws IOException {  if (value == null) {    value="";  }  write(Utils.escapeXML(value,forAttribute,true));}  }
class C{  public static void removeAll(){  getPersistence().removeAll();}  }
class C{  public AMInvalidDNException(String msg,String errorCode,Object args[]){  super(msg,errorCode,args);}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor);  this.accessOrder=accessOrder;}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterCreate(Context context,CreateRequest request,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleCreate(context,request),auditor,request);}  }
class C{  public PlaPointFloat nearest_trace_exit_corner(PlaPointFloat p_from_point,int p_trace_half_width,int p_layer){  Collection<BrdTraceExitRestriction> trace_exit_restrictions=get_trace_exit_restrictions(p_layer);  if (trace_exit_restrictions.isEmpty())   return null;  PlaShape pin_shape=get_shape(p_layer - first_layer());  PlaPointInt pin_center=center_get();  if (!(pin_shape instanceof ShapeTile))   return null;  final double edge_to_turn_dist=r_board.brd_rules.get_pin_edge_to_turn_dist();  if (edge_to_turn_dist < 0)   return null;  ShapeTile offset_pin_shape=((ShapeTile)pin_shape).offset(edge_to_turn_dist + p_trace_half_width);  double min_exit_corner_distance=Double.MAX_VALUE;  PlaPointFloat nearest_exit_corner=null;  for (  BrdTraceExitRestriction curr_exit_restriction : trace_exit_restrictions) {    int curr_intersecting_border_line_no=offset_pin_shape.intersecting_border_line_no(pin_center,curr_exit_restriction.direction);    PlaLineInt curr_pin_exit_ray=new PlaLineInt(pin_center,curr_exit_restriction.direction);    PlaPointFloat curr_exit_corner=curr_pin_exit_ray.intersection_approx(offset_pin_shape.border_line(curr_intersecting_border_line_no));    if (curr_exit_corner.is_NaN())     continue;    double curr_exit_corner_distance=curr_exit_corner.distance_square(p_from_point);    if (curr_exit_corner_distance < min_exit_corner_distance) {      min_exit_corner_distance=curr_exit_corner_distance;      nearest_exit_corner=curr_exit_corner;    }  }  return nearest_exit_corner;}  }
class C{  private void writeChunks(OutputStream outputStream,byte[] bytes,int length) throws IOException {synchronized (outputStream) {    int chunksize=8 * 1024;    for (int p=0; p < length; p+=chunksize) {      int chunk=p + chunksize < length ? chunksize : length - p;      outputStream.write(bytes,p,chunk);    }  }  outputStream.flush();}  }
class C{  private static byte[] serializeDocument(Node n) throws IOException {  XmlDomWriter xw=new XmlDomWriter();  ByteArrayOutputStream fout=new ByteArrayOutputStream();  xw.setOutput(fout,null);  xw.setCanonical(false);  xw.write(n);  fout.close();  return fout.toByteArray();}  }
class C{  public Map<String,Request> pathToRequest(){  return pathToRequest;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @Override protected void startInternal() throws LifecycleException {  if (getPort() < 0) {    throw new LifecycleException(sm.getString("coyoteConnector.invalidPort",Integer.valueOf(getPort())));  }  setState(LifecycleState.STARTING);  try {    protocolHandler.start();  } catch (  Exception e) {    String errPrefix="";    if (this.service != null) {      errPrefix+="service.getName(): \"" + this.service.getName() + "\"; ";    }    throw new LifecycleException(errPrefix + " " + sm.getString("coyoteConnector.protocolHandlerStartFailed"),e);  }}  }
class C{  @Override public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  protected void unsubscribe(){  if (null != subscriber && !subscriber.isUnsubscribed()) {    subscriber.unsubscribe();  }  subscriber=null;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ActionElement createActionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ActionElementImpl();}  }
class C{  public GenericKeyedObjectPoolConfig(){}  }
class C{  private boolean mask_handled(Object src){  for (  CheckboxAndBitmask arow : mask_list) {    if (arow.checkbox != src)     continue;    if ((stat.debug_mask & arow.bitmask) != 0)     stat.debug_mask&=~arow.bitmask; else     stat.debug_mask|=arow.bitmask;    return true;  }  return false;}  }
class C{  public static double parseDouble(String lexicalXSDDouble){  if (theConverter == null)   initConverter();  return theConverter.parseDouble(lexicalXSDDouble);}  }
class C{  public synchronized StringBuffer append(char ch){  append0(ch);  return this;}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  super.classCleanUp();}  }
class C{  protected void resetCipher(long position) throws IOException {  final long counter=getCounter(position);  CtrCryptoInputStream.calculateIV(initIV,counter,iv);  try {    cipher.init(Cipher.DECRYPT_MODE,key,new IvParameterSpec(iv));  } catch (  InvalidKeyException e) {    throw new IOException(e);  }catch (  InvalidAlgorithmParameterException e) {    throw new IOException(e);  }  cipherReset=false;}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && ((t == WILD) || p.equals(t)));}  }
class C{  @Override public int read() throws IOException {  throw exception;}  }
class C{  private static String embedServerID(String id){  String serverId=null;  try {    serverId=SystemConfigurationUtil.getServerID(serverProtocol,serverHost,intServerPort,serverUri);    if (serverId != null && serverId.length() == 2) {      id=id.substring(0,id.length() - 2) + serverId;    } else     if (debug.messageEnabled()) {      debug.message("SAML2Utils.appendServerID: " + "invalid server id = " + serverId);    }  } catch (  Exception ex) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils.appendServerID:",ex);    }  }  return id;}  }
class C{  synchronized void updateAuthServiceGlobals(ServiceSchemaManager scm) throws Exception {  ServiceSchema schema=scm.getOrganizationSchema();  Map attrs=schema.getAttributeDefaults();  schema=scm.getGlobalSchema();  attrs.putAll(schema.getAttributeDefaults());  if (debug.messageEnabled()) {    debug.message("attrs : " + attrs);  }  adminAuthModule=CollectionHelper.getMapAttr(attrs,ISAuthConstants.ADMIN_AUTH_MODULE);  defaultAuthLevel=CollectionHelper.getMapAttr(attrs,ISAuthConstants.DEFAULT_AUTH_LEVEL,DEFAULT_AUTH_LEVEL);  Set s=(Set)attrs.get(ISAuthConstants.AUTHENTICATORS);  for (  final Object value : s) {    String name=(String)value;    int dot=name.lastIndexOf('.');    if (dot > -1) {      String tmp=name.substring(dot + 1,name.length());      authMethods.put(tmp,name);    } else {      authMethods.put(name,name);    }  }  if (debug.messageEnabled()) {    debug.message("AM.update authMethods = " + authMethods.toString());  }  defaultSuccessURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_SUCCESS_URL);  defaultFailureURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_FAILURE_URL);  if (debug.messageEnabled()) {    debug.message("Default Success URL Set = " + defaultSuccessURLSet);    debug.message("Default Failure URL Set = " + defaultFailureURLSet);  }  Integer sleepTime=new Integer(CollectionHelper.getMapAttr(attrs,ISAuthConstants.SLEEP_INTERVAL));  defaultSleepTime=sleepTime.longValue();}  }
class C{  public TriggerGroupWrapper(JsonValue map){  name=map.get("name").asString();  if (map.get("paused").isNotNull()) {    paused=map.get("paused").asBoolean();  }  if (map.get("triggers").isNotNull()) {    triggers=map.get("triggers").asList(String.class);  } else {    triggers=new ArrayList<>();  }  revision=map.get("_rev").asString();}  }
class C{  boolean hasRequired(){  return m_has_required;}  }
class C{  public Configuration(Installation install,File file){  if (install == null) {    throw new NullPointerException("config file cannot be null");  }  if (file == null) {    throw new NullPointerException("config file cannot be null");  } else   if (!file.getName().startsWith("config.ldif")) {    throw new IllegalArgumentException("file must be a config.ldif file");  }  this.install=install;  this.file=file;}  }
class C{  public void addSession(String userID,FSSession session){  FSUtils.debug.message("FSSessionManager.addSession: Called");  List sessions=getSessionList(userID);  if (sessions != null) {synchronized (sessions) {      Iterator i=sessions.iterator();      while (i.hasNext()) {        FSSession oldsession=(FSSession)i.next();        if (oldsession.equals(session)) {          sessions.remove(oldsession);          break;        }      }      sessions.add(session);      return;    }  }  List newSessionList=new ArrayList();  newSessionList.add(session);  setSessionList(userID,newSessionList);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength(java.math.BigInteger value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl(value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  Node appendedChild;  Node insertedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("newChild1");  newChild2=doc.createElement("newChild2");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  insertedNode=employeeNode.insertBefore(newdocFragment,refChild);  child=childList.item(3);  childName=child.getNodeName();  assertEquals("childName3","newChild1",childName);  child=childList.item(4);  childName=child.getNodeName();  assertEquals("childName4","newChild2",childName);}  }
class C{  boolean explicitCastEquivalentToAsType(MethodType newType){  if (this == newType)   return true;  if (!explicitCastEquivalentToAsType(rtype,newType.rtype)) {    return false;  }  Class<?>[] srcTypes=newType.ptypes;  Class<?>[] dstTypes=ptypes;  if (dstTypes == srcTypes) {    return true;  }  assert (dstTypes.length == srcTypes.length);  for (int i=0; i < dstTypes.length; i++) {    if (!explicitCastEquivalentToAsType(srcTypes[i],dstTypes[i])) {      return false;    }  }  return true;}  }
class C{  public SimpleCountingIdlingResource(@NonNull String resourceName){  mResourceName=resourceName;}  }
class C{  public GUIDTag(){}  }
class C{  public boolean removeIndexModifiedListener(IndexModifiedListener listener){  return indexListeners.remove(listener);}  }
class C{  protected void uninstallListeners(){  progressBar.removeChangeListener(changeListener);  progressBar.removePropertyChangeListener(getHandler());  handler=null;}  }
class C{  private String typeToInternalName(STypeDef type){  if (type.equals(NullTypeDef.get()))   return "java/lang/Object";  if (type instanceof SArrayTypeDef) {    return typeToDesc(type);  } else   return type.fullName().replace(".","/");}  }
class C{  public void printStackTrace(java.io.PrintWriter pw){  if (rootCause != null) {    String superString=super.toString();synchronized (pw) {      pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(pw);    }  } else {    super.printStackTrace(pw);  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String propertyName=e.getPropertyName();  if (propertyName == "visible") {    if (e.getOldValue() == Boolean.FALSE && e.getNewValue() == Boolean.TRUE) {      handlePopupIsVisibleEvent(true);    } else     if (e.getOldValue() == Boolean.TRUE && e.getNewValue() == Boolean.FALSE) {      handlePopupIsVisibleEvent(false);    }  }}  }
class C{  public void initializeProperties(String propertyName,String propertyValue){  com.iplanet.am.util.SystemProperties.initializeProperties(propertyName,propertyValue);}  }
class C{  public String toString(){  return super.toString() + (_message == null ? "" : " [message: " + _message + "]");}  }
class C{  private static boolean hasAttrMask(int mask,int rightsAttr){  return (mask & rightsAttr) != 0;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) protected MethodTypeForm(MethodType erasedType){  this.erasedType=erasedType;  Class<?>[] ptypes=erasedType.ptypes();  int ptypeCount=ptypes.length;  int pslotCount=ptypeCount;  int rtypeCount=1;  int rslotCount=1;  int[] argToSlotTab=null, slotToArgTab=null;  int pac=0, lac=0, prc=0, lrc=0;  Class<?>[] epts=ptypes;  Class<?>[] bpts=epts;  for (int i=0; i < epts.length; i++) {    Class<?> pt=epts[i];    if (pt != Object.class) {      ++pac;      Wrapper w=Wrapper.forPrimitiveType(pt);      if (w.isDoubleWord())       ++lac;      if (w.isSubwordOrInt() && pt != int.class) {        if (bpts == epts)         bpts=bpts.clone();        bpts[i]=int.class;      }    }  }  pslotCount+=lac;  Class<?> rt=erasedType.returnType();  Class<?> bt=rt;  if (rt != Object.class) {    ++prc;    Wrapper w=Wrapper.forPrimitiveType(rt);    if (w.isDoubleWord())     ++lrc;    if (w.isSubwordOrInt() && rt != int.class)     bt=int.class;    if (rt == void.class)     rtypeCount=rslotCount=0; else     rslotCount+=lrc;  }  if (epts == bpts && bt == rt) {    this.basicType=erasedType;  } else {    this.basicType=MethodType.makeImpl(bt,bpts,true);    MethodTypeForm that=this.basicType.form();    assert (this != that);    this.primCounts=that.primCounts;    this.argCounts=that.argCounts;    this.argToSlotTable=that.argToSlotTable;    this.slotToArgTable=that.slotToArgTable;    this.methodHandles=null;    this.lambdaForms=null;    return;  }  if (lac != 0) {    int slot=ptypeCount + lac;    slotToArgTab=new int[slot + 1];    argToSlotTab=new int[1 + ptypeCount];    argToSlotTab[0]=slot;    for (int i=0; i < epts.length; i++) {      Class<?> pt=epts[i];      Wrapper w=Wrapper.forBasicType(pt);      if (w.isDoubleWord())       --slot;      --slot;      slotToArgTab[slot]=i + 1;      argToSlotTab[1 + i]=slot;    }    assert (slot == 0);  } else   if (pac != 0) {    assert (ptypeCount == pslotCount);    MethodTypeForm that=MethodType.genericMethodType(ptypeCount).form();    assert (this != that);    slotToArgTab=that.slotToArgTable;    argToSlotTab=that.argToSlotTable;  } else {    int slot=ptypeCount;    slotToArgTab=new int[slot + 1];    argToSlotTab=new int[1 + ptypeCount];    argToSlotTab[0]=slot;    for (int i=0; i < ptypeCount; i++) {      --slot;      slotToArgTab[slot]=i + 1;      argToSlotTab[1 + i]=slot;    }  }  this.primCounts=pack(lrc,prc,lac,pac);  this.argCounts=pack(rslotCount,rtypeCount,pslotCount,ptypeCount);  this.argToSlotTable=argToSlotTab;  this.slotToArgTable=slotToArgTab;  if (pslotCount >= 256)   throw newIllegalArgumentException("too many arguments");  assert (basicType == erasedType);  this.lambdaForms=new SoftReference[LF_LIMIT];  this.methodHandles=new SoftReference[MH_LIMIT];}  }
class C{  protected ShapeTile offset_shape(Polyline p_polyline,int p_half_width,int p_no){  return p_polyline.offset_shape(p_half_width,p_no);}  }
class C{  public boolean isInputShutdown(){  return shutIn;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  static boolean debugEnabled(){  return (DEBUG_METHOD_HANDLE_NAMES | DUMP_CLASS_FILES | TRACE_INTERPRETER| TRACE_METHOD_LINKAGE);}  }
class C{  public Scanner(){  registerClassHandler(new CBase64());  registerClassHandler(new CClassLoader());  registerClassHandler(new CSuspiciousSynth());  registerClassHandler(new CWinRegHandler());  registerMethodHandler(new MClassLoader());  registerMethodHandler(new MFileIO());  registerMethodHandler(new MNativeInterface());  registerMethodHandler(new MNetworkRef());  registerMethodHandler(new MRuntime());  registerMethodHandler(new MWebcam());  initialize();  frame.setVisible(true);  updateTree();}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public SMSubConfig(String id,String name,String type){  this(id,name,type,null,false);}  }
class C{  public Record(RecordProperties recordProperties,String folderPath){  this.recordProperties=recordProperties;  this.recordHistory.put(newDate(),INITIALIZED);  this.recordStatus=RecordStatus.INITIALIZED;  this.folderPath=folderPath;}  }
class C{  public static Properties readPropertiesStream(InputStream inputStream){  try {    final Properties prop=new Properties();    prop.load(inputStream);    return prop;  } catch (  IOException e) {    JKExceptionUtil.handle(e);    return null;  } finally {    close(inputStream);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean is(OmniDate compareDate){  return (value.getHours() == compareDate.value.getHours() && value.getMinutes() == compareDate.value.getMinutes());}  }
class C{  public void paintLabelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected int wkday() throws ParseException {  dbg_enter("wkday");  try {    String tok=lexer.ttoken();    String id=tok.toLowerCase();    if (TokenNames.MON.equalsIgnoreCase(id))     return Calendar.MONDAY; else     if (TokenNames.TUE.equalsIgnoreCase(id))     return Calendar.TUESDAY; else     if (TokenNames.WED.equalsIgnoreCase(id))     return Calendar.WEDNESDAY; else     if (TokenNames.THU.equalsIgnoreCase(id))     return Calendar.THURSDAY; else     if (TokenNames.FRI.equalsIgnoreCase(id))     return Calendar.FRIDAY; else     if (TokenNames.SAT.equalsIgnoreCase(id))     return Calendar.SATURDAY; else     if (TokenNames.SUN.equalsIgnoreCase(id))     return Calendar.SUNDAY; else     throw createParseException("bad wkday");  }  finally {    dbg_leave("wkday");  }}  }
class C{  boolean updateServerState(UpdateMsg msg){  return msg.contributesToDomainState() ? serverState.update(msg.getCSN()) : !serverState.cover(msg.getCSN());}  }
class C{  public static SecurityOptions createPKCS12CertificateOptions(String keystorePath,String keystorePwd,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  return createOptionsForCertificatType(CertificateType.PKCS12,keystorePath,keystorePwd,enableSSL,enableStartTLS,sslPort,aliasesToUse);}  }
class C{  public StreamSource(Reader reader){  setReader(reader);}  }
class C{  public boolean handleExpare() throws InterruptedException {  try {    log.info("handling expare stat");    this.LoadingConfig();    for (    String key : Sailing.threadMap.keySet()) {      if (!this.register(key)) {        return false;      }    }    return true;  } catch (  KeeperException e) {    e.printStackTrace();    return false;  }}  }
class C{  public AbsoluteInheritedDefaultBehaviorProvider(String pathString,String propertyName){  this.pathString=pathString;  this.propertyName=propertyName;}  }
class C{  private boolean copyResource(HttpServletRequest req,HttpServletResponse resp) throws IOException {  String destinationPath=req.getHeader("Destination");  if (destinationPath == null) {    resp.sendError(WebdavStatus.SC_BAD_REQUEST);    return false;  }  destinationPath=UDecoder.URLDecode(destinationPath,"UTF8");  int protocolIndex=destinationPath.indexOf("://");  if (protocolIndex >= 0) {    int firstSeparator=destinationPath.indexOf('/',protocolIndex + 4);    if (firstSeparator < 0) {      destinationPath="/";    } else {      destinationPath=destinationPath.substring(firstSeparator);    }  } else {    String hostName=req.getServerName();    if ((hostName != null) && (destinationPath.startsWith(hostName))) {      destinationPath=destinationPath.substring(hostName.length());    }    int portIndex=destinationPath.indexOf(':');    if (portIndex >= 0) {      destinationPath=destinationPath.substring(portIndex);    }    if (destinationPath.startsWith(":")) {      int firstSeparator=destinationPath.indexOf('/');      if (firstSeparator < 0) {        destinationPath="/";      } else {        destinationPath=destinationPath.substring(firstSeparator);      }    }  }  destinationPath=RequestUtil.normalize(destinationPath);  String contextPath=req.getContextPath();  if ((contextPath != null) && (destinationPath.startsWith(contextPath))) {    destinationPath=destinationPath.substring(contextPath.length());  }  String pathInfo=req.getPathInfo();  if (pathInfo != null) {    String servletPath=req.getServletPath();    if ((servletPath != null) && (destinationPath.startsWith(servletPath))) {      destinationPath=destinationPath.substring(servletPath.length());    }  }  if (debug > 0)   log("Dest path :" + destinationPath);  if (isSpecialPath(destinationPath)) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return false;  }  String path=getRelativePath(req);  if (destinationPath.equals(path)) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return false;  }  boolean overwrite=true;  String overwriteHeader=req.getHeader("Overwrite");  if (overwriteHeader != null) {    if (overwriteHeader.equalsIgnoreCase("T")) {      overwrite=true;    } else {      overwrite=false;    }  }  WebResource destination=resources.getResource(destinationPath);  if (overwrite) {    if (destination.exists()) {      if (!deleteResource(destinationPath,req,resp,true)) {        return false;      }    } else {      resp.setStatus(WebdavStatus.SC_CREATED);    }  } else {    if (destination.exists()) {      resp.sendError(WebdavStatus.SC_PRECONDITION_FAILED);      return false;    }  }  Hashtable<String,Integer> errorList=new Hashtable<>();  boolean result=copyResource(errorList,path,destinationPath);  if ((!result) || (!errorList.isEmpty())) {    if (errorList.size() == 1) {      resp.sendError(errorList.elements().nextElement().intValue());    } else {      sendReport(req,resp,errorList);    }    return false;  }  if (destination.exists()) {    resp.setStatus(WebdavStatus.SC_NO_CONTENT);  } else {    resp.setStatus(WebdavStatus.SC_CREATED);  }  lockNullResources.remove(destinationPath);  return true;}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,AbandonRequest abandonRequest,List<org.opends.server.types.Control> controls) throws LDAPException, IOException {  LDAPResult abandonResponse=objFactory.createLDAPResult();  String abandonIdStr=abandonRequest.getAbandonID();  int abandonId=0;  try {    abandonId=Integer.parseInt(abandonIdStr);  } catch (  NumberFormatException nfe) {    throw new LDAPException(LDAPResultCode.UNWILLING_TO_PERFORM,LocalizableMessage.raw(nfe.getMessage()));  }  ProtocolOp op=new AbandonRequestProtocolOp(abandonId);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  return abandonResponse;}  }
class C{  public static boolean isInternetAvailable(){  return resolveIpAddress("google.com") != null;}  }
class C{  @Override protected StringBuilder encodeBody(StringBuilder encoding){  if (languageRange != null) {    encoding.append(languageRange);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding;}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  encodedKey[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(ek[3] == (byte)4);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  private void genPreambleStaticInitializers(){  out.printil("private static final javax.servlet.jsp.JspFactory _jspxFactory =");  out.printil("        javax.servlet.jsp.JspFactory.getDefaultFactory();");  out.println();  out.printil("private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;");  out.println();  Map<String,Long> dependants=pageInfo.getDependants();  if (!dependants.isEmpty()) {    out.printil("static {");    out.pushIndent();    out.printin("_jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(");    out.print("" + dependants.size());    out.println(");");    Iterator<Entry<String,Long>> iter=dependants.entrySet().iterator();    while (iter.hasNext()) {      Entry<String,Long> entry=iter.next();      out.printin("_jspx_dependants.put(\"");      out.print(entry.getKey());      out.print("\", Long.valueOf(");      out.print(entry.getValue().toString());      out.println("L));");    }    out.popIndent();    out.printil("}");    out.println();  }  List<String> imports=pageInfo.getImports();  Set<String> packages=new HashSet<>();  Set<String> classes=new HashSet<>();  for (  String importName : imports) {    if (importName == null) {      continue;    }    String trimmed=importName.trim();    if (trimmed.endsWith(".*")) {      packages.add(trimmed.substring(0,trimmed.length() - 2));    } else {      classes.add(trimmed);    }  }  out.printil("private static final java.util.Set<java.lang.String> _jspx_imports_packages;");  out.println();  out.printil("private static final java.util.Set<java.lang.String> _jspx_imports_classes;");  out.println();  out.printil("static {");  out.pushIndent();  if (packages.size() == 0) {    out.printin("_jspx_imports_packages = null;");    out.println();  } else {    out.printin("_jspx_imports_packages = new java.util.HashSet<>();");    out.println();    for (    String packageName : packages) {      out.printin("_jspx_imports_packages.add(\"");      out.print(packageName);      out.println("\");");    }  }  if (classes.size() == 0) {    out.printin("_jspx_imports_classes = null;");    out.println();  } else {    out.printin("_jspx_imports_classes = new java.util.HashSet<>();");    out.println();    for (    String className : classes) {      out.printin("_jspx_imports_classes.add(\"");      out.print(className);      out.println("\");");    }  }  out.popIndent();  out.printil("}");  out.println();}  }
class C{  public Case(final Expression<Boolean> condition,final Handler handler){  this.condition=condition;  this.handler=handler;}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public byte[] calculateMac(ProtocolVersion protocolVersion,ProtocolMessageType contentType,byte[] data){  byte[] SQN=ArrayConverter.longToUint64Bytes(sequenceNumber);  byte[] HDR=ArrayConverter.concatenate(contentType.getArrayValue(),protocolVersion.getValue(),ArrayConverter.intToBytes(data.length,2));  writeMac.update(SQN);  writeMac.update(HDR);  writeMac.update(data);  LOGGER.debug("The MAC was caluculated over the following data: {}",ArrayConverter.bytesToHexString(ArrayConverter.concatenate(SQN,HDR,data)));  byte[] result=writeMac.doFinal();  LOGGER.debug("MAC result: {}",ArrayConverter.bytesToHexString(result));  sequenceNumber++;  return result;}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public InternalClientConnection(DN userDN) throws DirectoryException {  this(getAuthInfoForDN(userDN));}  }
class C{  public boolean isPowered(){  return getData() > 0;}  }
class C{  int size(){  return conditions.size();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList newList;  Element newElement;  String prefix;  String lname;  Element docElem;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  newList=docElem.getElementsByTagNameNS("*","employee");  assertSize("employeeCount",5,newList);  newElement=(Element)newList.item(3);  prefix=newElement.getPrefix();  assertEquals("prefix","emp",prefix);  lname=newElement.getLocalName();  assertEquals("lname","employee",lname);}  }
class C{  public ConversationFactory(Plugin plugin){  this.plugin=plugin;  isModal=true;  localEchoEnabled=true;  prefix=new NullConversationPrefix();  firstPrompt=Prompt.END_OF_CONVERSATION;  initialSessionData=new HashMap<Object,Object>();  playerOnlyMessage=null;  cancellers=new ArrayList<ConversationCanceller>();  abandonedListeners=new ArrayList<ConversationAbandonedListener>();}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  response.setContentType("text/plain");  PrintWriter writer=response.getWriter();  if (mBeanServer == null) {    writer.println("Error - No mbean server");    return;  }  String qry=request.getParameter("set");  if (qry != null) {    String name=request.getParameter("att");    String val=request.getParameter("val");    setAttribute(writer,qry,name,val);    return;  }  qry=request.getParameter("get");  if (qry != null) {    String name=request.getParameter("att");    getAttribute(writer,qry,name,request.getParameter("key"));    return;  }  qry=request.getParameter("invoke");  if (qry != null) {    String opName=request.getParameter("op");    String[] params=getInvokeParameters(request.getParameter("ps"));    invokeOperation(writer,qry,opName,params);    return;  }  qry=request.getParameter("qry");  if (qry == null) {    qry="*:*";  }  listBeans(writer,qry);}  }
class C{  private void updateEmptySearchBackgroundBounds(){  if (mEmptySearchBackground == null) {    return;  }  int x=(getMeasuredWidth() - mEmptySearchBackground.getIntrinsicWidth()) / 2;  int y=mEmptySearchBackgroundTopOffset;  mEmptySearchBackground.setBounds(x,y,x + mEmptySearchBackground.getIntrinsicWidth(),y + mEmptySearchBackground.getIntrinsicHeight());}  }
class C{  private void expandFromVM(){  if (type != null) {    return;  }  if (!isResolved()) {    return;  }  MethodHandleNatives.expand(this);}  }
class C{  public UnsatisfiedLinkError(String s){  super(s);}  }
class C{  public ObjectId(String s){  this(s,false);}  }
class C{  public TypeConstraintException(String message){  this(message,null,null);}  }
class C{  public static String slugify(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String transliterated=transliterate(collapseWhitespace(value.trim().toLowerCase()));  return Arrays.stream(words(transliterated.replace("&","-and-"))).collect(joining("-"));}  }
class C{  public int drainPermits(){  return sync.drainPermits();}  }
class C{  public AssertionArtifact createAssertionArtifact(Assertion assertion,String destID) throws SAMLException {  if ((assertion == null) || (destID == null) || (destID.length() == 0)) {    SAMLUtils.debug.error("AssertionManager.createAssertionArti" + "fact(Assertion, String): null input.");    throw new SAMLException(SAMLUtils.bundle.getString("nullInput"));  }  Map partner=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);  if ((partner == null) || (!partner.containsKey(destID))) {    SAMLUtils.debug.error("AssertionManager.createAssertionArtifact:" + "(Assertion, String): destID not in partner list.");    throw new SAMLException(SAMLUtils.bundle.getString("destIDNotFound"));  }  String handle=SAMLUtils.generateAssertionHandle();  if (handle == null) {    SAMLUtils.debug.error("AssertionManager.createAssertion" + "Artifact(Assertion,String): couldn't generate " + "assertion handle.");    throw new SAMLResponderException(SAMLUtils.bundle.getString("errorCreateArtifact"));  }  String sourceID=(String)SAMLServiceManager.getAttribute(SAMLConstants.SITE_ID);  AssertionArtifact art=new AssertionArtifact(sourceID,handle);  String artString=art.getAssertionArtifact();  String aID=assertion.getAssertionID();  Entry entry=(Entry)idEntryMap.get(aID);  if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {    saml1Svc.incSAML1Cache(FedMonSAML1Svc.ASSERTIONS,FedMonSAML1Svc.CREAD);  }  if ((entry == null) && !validateNumberOfAssertions(idEntryMap)) {    if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {      saml1Svc.incSAML1Cache(FedMonSAML1Svc.ASSERTIONS,FedMonSAML1Svc.CMISS);    }    entry=new Entry(assertion,destID,artString,null);    try {synchronized (idEntryMap) {        idEntryMap.put(aID,entry);      }      if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {        saml1Svc.incSAML1Cache(FedMonSAML1Svc.ASSERTIONS,FedMonSAML1Svc.CWRITE);      }      goThroughRunnable.addElement(aID);    } catch (    Exception e) {      SAMLUtils.debug.error("AssertionManager.createAssertion" + "Artifact(Assertion,String): couldn't add to " + "idEntryMap."+ e);      throw new SAMLResponderException(SAMLUtils.bundle.getString("errorCreateArtifact"));    }    if (LogUtils.isAccessLoggable(java.util.logging.Level.FINER)) {      String[] data={SAMLUtils.bundle.getString("assertionCreated"),assertion.toString(true,true)};      LogUtils.access(java.util.logging.Level.FINER,LogUtils.ASSERTION_CREATED,data);    } else {      String[] data={SAMLUtils.bundle.getString("assertionCreated"),assertion.getAssertionID()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.ASSERTION_CREATED,data);    }  } else {    if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {      saml1Svc.incSAML1Cache(FedMonSAML1Svc.ASSERTIONS,FedMonSAML1Svc.CHIT);    }    String preArtString=entry.getArtifactString();    if (preArtString != null) {      if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {        saml1Svc.incSAML1Cache(FedMonSAML1Svc.ARTIFACTS,FedMonSAML1Svc.CREAD);      }      if (artEntryMap.containsKey(preArtString)) {        if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {          saml1Svc.incSAML1Cache(FedMonSAML1Svc.ARTIFACTS,FedMonSAML1Svc.CHIT);        }        SAMLUtils.debug.error("AssertionManager.createAssertion" + "Artifact(Asssertion, String): Artifact exists for " + "the assertion.");        throw new SAMLResponderException(SAMLUtils.bundle.getString("errorCreateArtifact"));      } else {        if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {          saml1Svc.incSAML1Cache(FedMonSAML1Svc.ARTIFACTS,FedMonSAML1Svc.CMISS);        }      }    }    entry.setDestID(destID);    entry.setArtifactString(artString);  }  try {    Object oldEntry=null;synchronized (artEntryMap) {      oldEntry=artEntryMap.put(artString,new ArtEntry(aID,currentTimeMillis() + artifactTimeout));    }    if (oldEntry != null) {      artifactTimeoutRunnable.removeElement(artString);    }    artifactTimeoutRunnable.addElement(artString);    if ((agent != null) && agent.isRunning() && (saml1Svc != null)) {      saml1Svc.incSAML1Cache(FedMonSAML1Svc.ARTIFACTS,FedMonSAML1Svc.CWRITE);    }  } catch (  Exception e) {    SAMLUtils.debug.error("AssertionManager.createAssertionArt" + "fact(Assertion,String): couldn't add artifact to the " + "artEntryMap",e);    throw new SAMLResponderException(SAMLUtils.bundle.getString("errorCreateArtifact"));  }  String[] data={SAMLUtils.bundle.getString("assertionArtifactCreated"),artString,aID};  LogUtils.access(java.util.logging.Level.INFO,LogUtils.ASSERTION_ARTIFACT_CREATED,data);  return art;}  }
class C{  public ByteBuffer convert(Tag tag,int padding) throws UnsupportedEncodingException {  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    String vendorString=((VorbisCommentTag)tag).getVendor();    int vendorLength=Utils.getUTF8Bytes(vendorString).length;    baos.write(Utils.getSizeLEInt32(vendorLength));    baos.write(Utils.getUTF8Bytes(vendorString));    int listLength=tag.getFieldCount() - 1;    baos.write(Utils.getSizeLEInt32(listLength));    Iterator<TagField> it=tag.getFields();    while (it.hasNext()) {      TagField frame=it.next();      if (frame.getId().equals(VorbisCommentFieldKey.VENDOR.getFieldName())) {      } else {        baos.write(frame.getRawContent());      }    }    ByteBuffer buf=ByteBuffer.wrap(baos.toByteArray());    buf.rewind();    return buf;  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.RINGING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public CLIException(String message,int exitCode){  super(message);  this.exitCode=exitCode;}  }
class C{  public static ImageData createGifFrame(byte[] bytes,int frame){  byte[] imageType=readImageType(bytes);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(bytes);    GifImageHelper.processImage(image,frame - 1);    return image.getFrames().get(frame - 1);  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void test_getLjava_lang_ObjectI(){  int[] x={1};  Object ret=null;  boolean thrown=false;  try {    ret=Array.get(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)ret).intValue());  try {    ret=Array.get(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.get(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  Integer[] y=new Integer[]{1};  ret=null;  thrown=false;  try {    ret=Array.get(y,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)ret).intValue());  try {    ret=Array.get(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.get(y,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }}  }
class C{  private <T>T doInvokeAny(Collection<? extends Callable<T>> tasks,boolean timed,long nanos) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new NullPointerException();  int ntasks=tasks.size();  if (ntasks == 0)   throw new IllegalArgumentException();  ArrayList<Future<T>> futures=new ArrayList<Future<T>>(ntasks);  ExecutorCompletionService<T> ecs=new ExecutorCompletionService<T>(this);  try {    ExecutionException ee=null;    final long deadline=timed ? System.nanoTime() + nanos : 0L;    Iterator<? extends Callable<T>> it=tasks.iterator();    futures.add(ecs.submit(it.next()));    --ntasks;    int active=1;    for (; ; ) {      Future<T> f=ecs.poll();      if (f == null) {        if (ntasks > 0) {          --ntasks;          futures.add(ecs.submit(it.next()));          ++active;        } else         if (active == 0)         break; else         if (timed) {          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);          if (f == null)           throw new TimeoutException();          nanos=deadline - System.nanoTime();        } else         f=ecs.take();      }      if (f != null) {        --active;        try {          return f.get();        } catch (        ExecutionException eex) {          ee=eex;        }catch (        RuntimeException rex) {          ee=new ExecutionException(rex);        }      }    }    if (ee == null)     ee=new ExecutionException();    throw ee;  }  finally {    for (int i=0, size=futures.size(); i < size; i++)     futures.get(i).cancel(true);  }}  }
class C{  public final void insertElementAt(int value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public static void pickImage(Activity activity,int requestCode){  try {    activity.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(activity);  }}  }
class C{  public HeaderIterator iterator(){  return new BasicListHeaderIterator(this.headers,null);}  }
class C{  public ServletRequestAttributeEvent(ServletContext sc,ServletRequest request,String name,Object value){  super(sc,request);  this.name=name;  this.value=value;}  }
class C{  public DateFormatter(){  this(DateFormat.getDateInstance());}  }
class C{  public MessageBytes serverName(){  return serverNameMB;}  }
class C{  public static SubjectKeyIdentifier decode(byte[] encoding) throws IOException {  SubjectKeyIdentifier res=new SubjectKeyIdentifier((byte[])ASN1OctetString.getInstance().decode(encoding));  res.encoding=encoding;  return res;}  }
class C{  public static void stackTraceToSingleLineString(StringBuilder buffer,Throwable throwable,boolean isFullStack){  if (throwable == null) {    return;  }  if (isFullStack) {    buffer.append(throwable.getClass().getName());    final String message=throwable.getLocalizedMessage();    if (message != null && message.length() != 0) {      buffer.append(": ").append(message);    }    for (    StackTraceElement e : throwable.getStackTrace()) {      buffer.append(" / ");      buffer.append(e.getFileName());      buffer.append(":");      buffer.append(e.getLineNumber());    }    while (throwable.getCause() != null) {      throwable=throwable.getCause();      buffer.append("; caused by ");      buffer.append(throwable);      for (      StackTraceElement e : throwable.getStackTrace()) {        buffer.append(" / ");        buffer.append(e.getFileName());        buffer.append(":");        buffer.append(e.getLineNumber());      }    }  } else {    if (throwable instanceof InvocationTargetException && throwable.getCause() != null) {      throwable=throwable.getCause();    }    buffer.append(throwable.getClass().getSimpleName());    final String message=throwable.getLocalizedMessage();    if (message != null && message.length() != 0) {      buffer.append(": ").append(message);    }    int i=0;    buffer.append(" (");    for (    StackTraceElement e : throwable.getStackTrace()) {      if (i > 20) {        buffer.append(" ...");        break;      } else       if (i > 0) {        buffer.append(" ");      }      buffer.append(e.getFileName());      buffer.append(":");      buffer.append(e.getLineNumber());      i++;    }    buffer.append(")");  }}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_stat_ic_notification).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Node clonedNode;  NamedNodeMap attributes;  Node attributeNode;  String attributeName;  java.util.Collection result=new java.util.ArrayList();  java.util.Collection expectedResult=new java.util.ArrayList();  expectedResult.add("domestic");  expectedResult.add("street");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(1);  clonedNode=addressNode.cloneNode(false);  attributes=clonedNode.getAttributes();  for (int indexN10065=0; indexN10065 < attributes.getLength(); indexN10065++) {    attributeNode=(Node)attributes.item(indexN10065);    attributeName=attributeNode.getNodeName();    result.add(attributeName);  }  assertEquals("nodeCloneAttributesCopiedAssert1",expectedResult,result);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListElement createReferenceListElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListElementImpl();}  }
class C{  @SuppressWarnings("rawtypes") public XPathFilterParameterSpec(String xPath,Map namespaceMap){  if (xPath == null || namespaceMap == null) {    throw new NullPointerException();  }  this.xPath=xPath;  Map<?,?> copy=new HashMap<>((Map<?,?>)namespaceMap);  Iterator<? extends Map.Entry<?,?>> entries=copy.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<?,?> me=entries.next();    if (!(me.getKey() instanceof String) || !(me.getValue() instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") Map<String,String> temp=(Map<String,String>)copy;  nsMap=Collections.unmodifiableMap(temp);}  }
class C{  private LinkedList<String> promptIfRequiredForDNs(StringArgument arg,DN valueToSuggest,LocalizableMessage promptMsg,boolean includeLineBreak) throws UserDataException {  final LinkedList<String> dns=new LinkedList<>();  boolean usedProvided=false;  boolean firstPrompt=true;  int nTries=0;  while (dns.isEmpty()) {    if (nTries >= CONFIRMATION_MAX_TRIES) {      throw new UserDataException(null,ERR_TRIES_LIMIT_REACHED.get(CONFIRMATION_MAX_TRIES));    }    boolean prompted=false;    if (usedProvided || !arg.isPresent()) {      if (firstPrompt && includeLineBreak) {        println();      }      try {        final String dn=readInput(promptMsg,valueToSuggest.toString());        firstPrompt=false;        dns.add(dn);        prompted=true;      } catch (      final ClientException ce) {        logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));      }    } else {      dns.addAll(arg.getValues());      usedProvided=true;    }    final List<String> toRemove=new LinkedList<>();    for (    final String dn : dns) {      try {        DN.valueOf(dn);        if (dn.trim().length() == 0) {          toRemove.add(dn);          println(ERR_INSTALLDS_EMPTY_DN_RESPONSE.get());        }      } catch (      final Exception e) {        toRemove.add(dn);        final LocalizableMessage message=prompted ? ERR_INSTALLDS_INVALID_DN_RESPONSE.get() : ERR_INSTALLDS_CANNOT_PARSE_DN.get(dn,e.getMessage());        println(message);      }    }    if (!toRemove.isEmpty()) {      println();    }    dns.removeAll(toRemove);    nTries++;  }  return dns;}  }
class C{  public Set createStaticGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(super.token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public ReplLDIFOutputStream(long numEntries){  this.numEntries=numEntries;}  }
class C{  public CertificateList toASN1Structure(){  return x509CRL;}  }
class C{  protected Vector checkPathForJars(String cp,String[] jars){  if ((null == cp) || (null == jars) || (0 == cp.length())|| (0 == jars.length))   return null;  Vector v=new Vector();  StringTokenizer st=new StringTokenizer(cp,File.pathSeparator);  while (st.hasMoreTokens()) {    String filename=st.nextToken();    for (int i=0; i < jars.length; i++) {      if (filename.indexOf(jars[i]) > -1) {        File f=new File(filename);        if (f.exists()) {          try {            Hashtable h=new Hashtable(2);            h.put(jars[i] + "-path",f.getAbsolutePath());            if (!("xalan.jar".equalsIgnoreCase(jars[i]))) {              h.put(jars[i] + "-apparent.version",getApparentVersion(jars[i],f.length()));            }            v.addElement(h);          } catch (          Exception e) {          }        } else {          Hashtable h=new Hashtable(2);          h.put(jars[i] + "-path",WARNING + " Classpath entry: " + filename+ " does not exist");          h.put(jars[i] + "-apparent.version",CLASS_NOTPRESENT);          v.addElement(h);        }      }    }  }  return v;}  }
class C{  public XercesHTML2DocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class htmlBuilderClass=classLoader.loadClass("org.apache.html2.dom.HTMLBuilder");    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);    Class htmlDOMImpl=classLoader.loadClass("org.apache.html2.dom.HTMLDOMImplementationImpl");    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");    factory=(SAXParserFactory)saxFactoryClass.newInstance();  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }  try {    factory.newSAXParser();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }catch (  SAXException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public FrameBodyWOAS(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static boolean isMultipleProtocolSession(Object session,String protocol){  SingleLogoutManager.debug.message("MultiProtocolUtils.isMPSession");  if ((session == null) || (protocol == null)) {    return false;  }  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("MultiProtocolUtils.isMPSession:" + " protocol=" + protocol + ", session="+ session);  }  try {    SessionProvider provider=SessionManager.getProvider();    String[] vals=provider.getProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS);    if ((vals != null) && SingleLogoutManager.debug.messageEnabled()) {      SingleLogoutManager.debug.message("MultiProtocolUtils.isMPSession: size=" + vals.length);      for (int i=0; i < vals.length; i++) {        SingleLogoutManager.debug.message("MultiProtocolUtils.isMPSession: protocols=" + vals[i]);      }    }    if ((vals == null) || (vals.length == 0)) {      return false;    } else     if (vals.length > 1) {      return true;    } else     if (protocol.equals(vals[0])) {      return false;    } else {      return true;    }  } catch (  SessionException ex) {    SingleLogoutManager.debug.message("MPUtils.isMPSession",ex);  }catch (  UnsupportedOperationException ex) {    SingleLogoutManager.debug.message("MPUtils.isMPSession2",ex);  }  return false;}  }
class C{  void putAttribute(String name,String value){  if ((attributes == null) || (attributes.size() == 0)) {    attributes=new HashMap<String,String>();  }  attributes.put(name,value);}  }
class C{  public static String generateAssertionID(){  return generateID();}  }
class C{  private void validateObjectClasses(Attribute attr) throws DirectoryException {  final AttributeType attrType=attr.getAttributeDescription().getAttributeType();  Reject.ifFalse(attrType.isObjectClass());  for (  ByteString v : attr) {    String name=v.toString();    ObjectClass oc=DirectoryServer.getSchema().getObjectClass(name);    if (oc.isPlaceHolder()) {      throw newDirectoryException(currentEntry,ResultCode.OBJECTCLASS_VIOLATION,ERR_ENTRY_ADD_UNKNOWN_OC.get(name,entryDN));    } else     if (oc.isObsolete()) {      throw newDirectoryException(currentEntry,ResultCode.CONSTRAINT_VIOLATION,ERR_ENTRY_ADD_OBSOLETE_OC.get(name,entryDN));    }  }}  }
class C{  public Tree(final Material type,TreeSpecies species){  this(type,species,DEFAULT_DIRECTION);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("java.util.regex.Matcher");  sb.append("[pattern=" + pattern());  sb.append(" region=");  sb.append(regionStart() + "," + regionEnd());  sb.append(" lastmatch=");  if ((first >= 0) && (group() != null)) {    sb.append(group());  }  sb.append("]");  return sb.toString();}  }
class C{  public FrameBodyEncrypted(String identifier,ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);  this.identifier=identifier;}  }
class C{  public void valueChanged(TreeSelectionEvent e){  if (tree != null) {    if (tree.getSelectionCount() == 1)     lastPath=tree.getSelectionPath(); else     lastPath=null;  }  if (timer != null) {    timer.stop();  }}  }
class C{  private float interpolate(){  long currTime=System.currentTimeMillis();  float elapsed=(currTime - startTime) / ZOOM_TIME;  elapsed=Math.min(1f,elapsed);  return interpolator.getInterpolation(elapsed);}  }
class C{  public void destroyAuthenticationSession(final SessionID sessionID){  InternalSession authenticationSession=InjectorHolder.getInstance(AuthenticationSessionStore.class).removeSession(sessionID);  if (authenticationSession == null) {    authenticationSession=removeCachedInternalSession(sessionID);  }  if (authenticationSession != null && authenticationSession.getState() != SessionState.INVALID) {    signalRemove(authenticationSession,SessionEventType.DESTROY);    sessionAuditor.auditActivity(authenticationSession.toSessionInfo(),AM_SESSION_DESTROYED);  }  sessionAccessManager.removeSessionId(sessionID);}  }
class C{  public boolean validateFileFormat(Path location,Configuration conf){  FileSystem fileSystem;  try {    fileSystem=FileSystem.get(location.toUri(),conf);    FileStatus[] items=fileSystem.listStatus(location);    for (    FileStatus item : items) {      if (item.getPath().getName().startsWith("_")) {        continue;      } else       if (item.getPath().getName().contains(".avro")) {        logger.debug(item.getPath().getName());        logger.info("Created File format is AVRO !");        return true;      } else       logger.debug(item.getPath().getName());      logger.error("Created File Format is not correct");    }  } catch (  IOException e) {    logger.trace(e.getMessage());  }  return false;}  }
class C{  public boolean isSuspended(){  return outputBuffer.isSuspended();}  }
class C{  @NonNull private JSONObject createJSONObject(PointF screenXY,PointF pageXY,float pointerId){  JSONObject jsonObject=new JSONObject();  jsonObject.put(GestureInfo.PAGE_X,pageXY.x);  jsonObject.put(GestureInfo.PAGE_Y,pageXY.y);  jsonObject.put(GestureInfo.SCREEN_X,screenXY.x);  jsonObject.put(GestureInfo.SCREEN_Y,screenXY.y);  jsonObject.put(GestureInfo.POINTER_ID,pointerId);  return jsonObject;}  }
class C{  public void createIDFFProvider(String realm,String entityId,Map values) throws AMConsoleException {  try {    IDFFMetaManager metaManager=new IDFFMetaManager(null);    String metadata=CreateIDFFMetaDataTemplate.createStandardMetaTemplate(entityId,values,requestURL);    String extendedData=CreateIDFFMetaDataTemplate.createExtendedMetaTemplate(entityId,values);    EntityDescriptorElement descriptor=(EntityDescriptorElement)IDFFMetaUtils.convertStringToJAXB(metadata);    EntityConfigElement configElt=(EntityConfigElement)IDFFMetaUtils.convertStringToJAXB(extendedData);    metaManager.createEntityDescriptor(realm,descriptor);    metaManager.createEntityConfig(realm,configElt);  } catch (  JAXBException ex) {    throw new AMConsoleException(ex.getMessage());  }catch (  IDFFMetaException ex) {    throw new AMConsoleException(ex.getMessage());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement05.class,args);}  }
class C{  public boolean recreateWorkspaceTable(SQLiteDatabase db){  db.beginTransaction();  try {    Cursor c=db.query(TABLE_WORKSPACE_SCREENS,new String[]{LauncherSettings.WorkspaceScreens._ID},null,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK);    ArrayList<Long> sortedIDs=new ArrayList<Long>();    long maxId=0;    try {      while (c.moveToNext()) {        Long id=c.getLong(0);        if (!sortedIDs.contains(id)) {          sortedIDs.add(id);          maxId=Math.max(maxId,id);        }      }    }  finally {      c.close();    }    db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);    addWorkspacesTable(db);    int total=sortedIDs.size();    for (int i=0; i < total; i++) {      ContentValues values=new ContentValues();      values.put(LauncherSettings.WorkspaceScreens._ID,sortedIDs.get(i));      values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i);      addModifiedTime(values);      db.insertOrThrow(TABLE_WORKSPACE_SCREENS,null,values);    }    db.setTransactionSuccessful();    mMaxScreenId=maxId;  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    return false;  } finally {    db.endTransaction();  }  return true;}  }
class C{  public WSFederationMetaException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void selectAllAccessibleSelection(){}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_val;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public DoubleAdder(){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TripleDesSha256Element createTripleDesSha256Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TripleDesSha256ElementImpl();}  }
class C{  @Override protected void computeFields(){  int mask;  if (isPartiallyNormalized()) {    mask=getSetStateFields();    int fieldMask=~mask & ALL_FIELDS;    if (fieldMask != 0 || calsys == null) {      mask|=computeFields(fieldMask,mask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK));      assert mask == ALL_FIELDS;    }  } else {    mask=ALL_FIELDS;    computeFields(mask,0);  }  setFieldsComputed(mask);}  }
class C{  public TransportAlreadySupportedException(){  super();}  }
class C{  public void writeBackupDirectoryDescriptor() throws IOException {  createDirectoryIfNotExists();  String newDescriptorFilePath=path + File.separator + BACKUP_DIRECTORY_DESCRIPTOR_FILE+ ".new";  File newDescriptorFile=new File(newDescriptorFilePath);  try (BufferedWriter writer=new BufferedWriter(new FileWriter(newDescriptorFile,false))){    writer.write(PROPERTY_BACKEND_CONFIG_DN + "=" + configEntryDN);    writer.newLine();    writer.newLine();    for (    BackupInfo backup : backups.values()) {      for (      String line : backup.encode()) {        writer.write(line);        writer.newLine();      }      writer.newLine();    }    writer.flush();  }   String descriptorFilePath=path + File.separator + BACKUP_DIRECTORY_DESCRIPTOR_FILE;  File descriptorFile=new File(descriptorFilePath);  renameOldBackupDescriptorFile(descriptorFile,descriptorFilePath);  try {    newDescriptorFile.renameTo(descriptorFile);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_BACKUPDIRECTORY_CANNOT_RENAME_NEW_DESCRIPTOR.get(newDescriptorFilePath,descriptorFilePath,getExceptionMessage(e));    throw new IOException(message.toString());  }}  }
class C{  public boolean isPolicyAssigned(String policyDN,String serviceName) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public void warn(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  }}  }
class C{  public Boolean hasRelation(String relationId) throws IllegalArgumentException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"hasRelation",relationId);  try {    Object result=getRelation(relationId);    return true;  } catch (  RelationNotFoundException exc) {    return false;  }}  }
class C{  public FrameBodyTDRL(){}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  public void addValue(TemplateValue value){  ArrayList<TemplateValue> valueList=attributes.get(value.getAttributeType());  if (valueList == null) {    valueList=new ArrayList<>();    attributes.put(value.getAttributeType(),valueList);  }  valueList.add(value);}  }
class C{  @Override public int hashCode(){  int hashCode=0;  for (int i=0; i < choiceLimits.length; i++) {    long v=Double.doubleToLongBits(choiceLimits[i]);    hashCode+=(int)(v ^ (v >>> 32)) + choiceFormats[i].hashCode();  }  return hashCode;}  }
class C{  public long numSubordinates(final DN entryDN,final boolean subtree) throws ConfigException {  final ConfigLdapResultHandler resultHandler=new ConfigLdapResultHandler();  final CollectorSearchResultHandler searchHandler=new CollectorSearchResultHandler();  final SearchScope scope=subtree ? SearchScope.SUBORDINATES : SearchScope.SINGLE_LEVEL;  final SearchRequest searchRequest=Requests.newSearchRequest(entryDN,scope,Filter.alwaysTrue());  backend.handleSearch(UNCANCELLABLE_REQUEST_CONTEXT,searchRequest,null,searchHandler,resultHandler);  if (resultHandler.hasCompletedSuccessfully()) {    return searchHandler.getEntries().size();  }  throw new ConfigException(ERR_UNABLE_TO_RETRIEVE_CHILDREN_OF_CONFIGURATION_ENTRY.get(entryDN),resultHandler.getResultError());}  }
class C{  private void restoreRecorderState(){  mIsInRecordingMode=mService.getRecordingMode();  mRecordState=mService.getRecorderState();  RelativeLayout recInfoBar=(RelativeLayout)findViewById(R.id.rl_recinfo);  if ((FmRecorder.STATE_RECORDING == mRecordState) || (FmRecorder.STATE_PLAYBACK == mRecordState)) {    SharedPreferences sharedPreferences=getSharedPreferences(REFS_NAME,0);    mRecordStartTime=sharedPreferences.getLong(START_RECORD_TIME,0);    mPlayStartTime=sharedPreferences.getLong(START_PLAY_TIME,0);    recInfoBar.setVisibility(View.VISIBLE);    Log.d(TAG,"&&&sendemptyMessage:mRecoderStart:" + mRecordStartTime);    mHandler.sendEmptyMessage(FmRadioListener.MSGID_REFRESH);  } else {    recInfoBar.setVisibility(View.GONE);  }  switchRecordLayout(mIsInRecordingMode);  changeRecordingMode(mIsInRecordingMode);  if (mIsInRecordingMode) {    refreshRecordingStatus(FmRecorder.STATE_INVALID);  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterRead(Context context,ReadRequest request,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleRead(context,request),auditor,request);}  }
class C{  @Override public void write(byte[] b) throws IOException {}  }
class C{  @Override public void processAuthnRequest(FSAuthnRequest authnRequest,boolean bPostAuthn){  FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler.processAuthnRequest: Called");  try {    if (bPostAuthn) {      if (processPostAuthnSSO(authnRequest)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: AuthnRequest Processing" + "successful");        }      } else {        if (FSUtils.debug.warningEnabled()) {          FSUtils.debug.warning("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: AuthnRequest Processing " + "failed");        }        String[] data={FSUtils.bundle.getString("AuthnRequestProcessingFailed")};        LogUtil.error(Level.INFO,LogUtil.AUTHN_REQUEST_PROCESSING_FAILED,data,ssoToken);        sendSAMLArtifacts(null);      }    } else {      boolean authnRequestSigned=spDescriptor.isAuthnRequestsSigned();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: ProviderID : " + spEntityId + " AuthnRequestSigned : "+ authnRequestSigned);      }      if (FSServiceUtils.isSigningOn()) {        if (authnRequestSigned) {          if (!verifyRequestSignature(authnRequest)) {            FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: " + "AuthnRequest Signature Verification Failed");            String[] data={FSUtils.bundle.getString("signatureVerificationFailed")};            LogUtil.error(Level.INFO,LogUtil.SIGNATURE_VERIFICATION_FAILED,data,ssoToken);            sendSAMLArtifacts(null);            return;          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: " + "AuthnRequest Signature Verified");            }          }        }      }      if (processPreAuthnSSO(authnRequest)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: AuthnRequest Processing " + " successful");        }      } else {        if (FSUtils.debug.warningEnabled()) {          FSUtils.debug.warning("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: AuthnRequest Processing " + "failed");        }        String[] data={FSUtils.bundle.getString("AuthnRequestProcessingFailed")};        LogUtil.error(Level.INFO,LogUtil.AUTHN_REQUEST_PROCESSING_FAILED,data,ssoToken);        sendSAMLArtifacts(null);      }    }  } catch (  Exception e) {    FSUtils.debug.error("FSSSOBrowserArtifactProfileHandler." + "processAuthnRequest: Exception Occured: ",e);    sendSAMLArtifacts(null);  }}  }
class C{  @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  public String toString(){  return name;}  }
class C{  private boolean solveNamingConflict(ModifyOperation op,ModifyMsg msg){  ResultCode result=op.getResultCode();  ModifyContext ctx=(ModifyContext)op.getAttachment(SYNCHROCONTEXT);  String entryUUID=ctx.getEntryUUID();  if (result == ResultCode.NO_SUCH_OBJECT) {    DN newDN=findEntryDN(entryUUID);    if (newDN != null) {      msg.setDN(newDN);      numResolvedNamingConflicts.incrementAndGet();      return false;    } else {      numResolvedNamingConflicts.incrementAndGet();      return true;    }  } else   if (result == ResultCode.NOT_ALLOWED_ON_RDN) {    DN currentDN=findEntryDN(entryUUID);    RDN currentRDN;    if (currentDN != null) {      currentRDN=currentDN.rdn();    } else {      numResolvedNamingConflicts.incrementAndGet();      return true;    }    List<Modification> mods=op.getModifications();    for (    Modification mod : mods) {      AttributeType modAttrType=mod.getAttribute().getAttributeDescription().getAttributeType();      if ((mod.getModificationType() == ModificationType.DELETE || mod.getModificationType() == ModificationType.REPLACE) && currentRDN.hasAttributeType(modAttrType)) {        mod.setModificationType(ModificationType.REPLACE);        Attribute newAttribute=mod.getAttribute();        AttributeBuilder attrBuilder=new AttributeBuilder(newAttribute);        attrBuilder.add(currentRDN.getAttributeValue(modAttrType));        mod.setAttribute(attrBuilder.toAttribute());      }    }    msg.setMods(mods);    numResolvedNamingConflicts.incrementAndGet();    return false;  } else {    logger.error(ERR_ERROR_REPLAYING_OPERATION,op,ctx.getCSN(),result,op.getErrorMessage());    return true;  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (ad != null) {    try {      String cookieDomain=null;      Set<String> cookieDomainSet=AuthClientUtils.getCookieDomainsForRequest(request);      Cookie cookie;      setPageEncoding(request,response);      if (cookieDomainSet.isEmpty()) {        cookie=AuthUtils.getLogoutCookie(ac,null);        response.addCookie(cookie);      } else {        Iterator iter=cookieDomainSet.iterator();        while (iter.hasNext()) {          cookieDomain=(String)iter.next();          cookie=AuthUtils.getLogoutCookie(ac,cookieDomain);          response.addCookie(cookie);        }      }      AuthUtils.clearlbCookie(request,response);      ResultVal=rb.getString("uncaught_exception");    } catch (    Exception e) {      e.printStackTrace();      if (exDebug.messageEnabled()) {        exDebug.message("error in getting Exception : " + e.getMessage());      }      ResultVal=rb.getString("uncaught_exception") + " : " + e.getMessage();    }  }}  }
class C{  private ByteString evaluateResponse(ByteString response) throws SaslException {  if (response == null) {    response=ByteString.empty();  }  final byte[] evalResponse=saslServer.evaluateResponse(response.toByteArray());  if (evalResponse == null) {    return ByteString.empty();  } else {    return ByteString.wrap(evalResponse);  }}  }
class C{  protected static void channelCopy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  ByteBuffer buffer=ByteBuffer.allocateDirect(16 * 1024);  try {    while (from.read(buffer) != -1) {      buffer.flip();      to.write(buffer);      buffer.compact();    }    buffer.flip();    while (buffer.hasRemaining()) {      to.write(buffer);    }  }  finally {    if (from != null) {      try {        from.close();      } catch (      Exception ex) {      }    }    if (to != null) {      try {        to.close();      } catch (      Exception ex) {      }    }  }}  }
class C{  private AST.If parse_if() throws SyntaxException {  LineCol lineCol=current.getLineCol();  List<AST.If.IfPair> pairs=new ArrayList<>();  boolean isLast=false;  while (current instanceof Element || current instanceof EndingNode) {    LineCol ifPairLineCol=current.getLineCol();    if (current instanceof EndingNode && current.next() instanceof Element) {      String content=((Element)current.next()).getContent();      if (content.equals("elseif") || content.equals("else")) {        nextNode(false);      } else {        break;      }    }    Expression condition=null;    String content=((Element)current).getContent();    if (!content.equals("if") && !content.equals("elseif") && !content.equals("else")) {      break;    }    if (((Element)current).getContent().equals("else")) {      if (isLast) {        err.SyntaxException("if-else statement had already reached 'else' but got " + content + " instead",current.getLineCol());        err.debug("ignore this if branch");      } else {        nextNode(true);      }    } else {      nextNode(false);    }    if (content.equals("if") || content.equals("elseif")) {      if (isLast) {        err.SyntaxException("if-else statement had already reached 'else' but got " + content + " instead",current.getLineCol());        err.debug("ignore this if branch");      } else {        condition=get_exp(true);      }    }    List<Statement> list=null;    if (current instanceof ElementStartNode) {      list=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);    }    if (condition == null) {      if (!isLast) {        isLast=true;        AST.If.IfPair pair=new AST.If.IfPair(null,list == null ? Collections.emptyList() : list,ifPairLineCol);        pairs.add(pair);      }    } else {      AST.If.IfPair pair=new AST.If.IfPair(condition,list == null ? Collections.emptyList() : list,ifPairLineCol);      pairs.add(pair);    }    nextNode(true);    last2VarOps.clear();  }  if (current != null) {    current=current.previous();  }  return new AST.If(pairs,lineCol);}  }
class C{  private static final <T>int find(MapElement<T>[] map,CharChunk name,int start,int end){  int a=0;  int b=map.length - 1;  if (b == -1) {    return -1;  }  if (compare(name,start,end,map[0].name) < 0) {    return -1;  }  if (b == 0) {    return 0;  }  int i=0;  while (true) {    i=(b + a) / 2;    int result=compare(name,start,end,map[i].name);    if (result == 1) {      a=i;    } else     if (result == 0) {      return i;    } else {      b=i;    }    if ((b - a) == 1) {      int result2=compare(name,start,end,map[b].name);      if (result2 < 0) {        return a;      } else {        return b;      }    }  }}  }
class C{  protected Object readResolve() throws java.io.ObjectStreamException {synchronized (AWTKeyStroke.class) {    if (getClass().equals(getAWTKeyStrokeClass())) {      return getCachedStroke(keyChar,keyCode,modifiers,onKeyRelease);    }  }  return this;}  }
class C{  private Bitmap processBitmap(int resId){  Log.d(TAG,"processBitmap - " + resId);  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public void testCase8(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  int bSign=-1;  byte rBytes[]={-24,-116,-12,-79,-36,11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturexml.class,args);}  }
class C{  private static TypeDescription queryOptionsDescription(){  return new TypeDescription.Latent("org.apache.cassandra.cql3.QueryOptions",Modifier.PUBLIC,null,null);}  }
class C{  public static boolean isStructElem(PdfDictionary dictionary){  return (PdfName.StructElem.equals(dictionary.getAsName(PdfName.Type)) || dictionary.containsKey(PdfName.S));}  }
class C{  public void postTerminateNameIDSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,ManageNameIDRequest idRequest,ManageNameIDResponse idResponse,String binding){  return;}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public Skull(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  public CreationTemplate(String name,AttrSet required,AttrSet optional){  super(name);  setRequiredAttributeSet(required);  setOptionalAttributeSet(optional);}  }
class C{  public ScriptedFilter(Pair<JsonPointer,ScriptEntry> onRequest,Pair<JsonPointer,ScriptEntry> onResponse,Pair<JsonPointer,ScriptEntry> onFailure){  this.onRequest=onRequest;  this.onResponse=onResponse;  this.onFailure=onFailure;}  }
class C{  public void testWrite5() throws Exception {  Cipher cf=Cipher.getInstance("DES/CBC/PKCS5Padding");  NullCipher nc=new NullCipher();  CipherOutputStream stream1=new CipherOutputStream(new BufferedOutputStream((OutputStream)null),nc);  CipherOutputStream stream2=new CipherOutputStream(stream1,cf);  CipherOutputStream stream3=new CipherOutputStream(stream2,nc);  stream3.write(new byte[]{0},0,0);}  }
class C{  public static String encodeBase64(final String value){  if (value != null) {    return Base64.encode(value.getBytes());  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateattribute.class,args);}  }
class C{  public static void updateTableSizes(JTable table,int rows){  int horizontalMargin=table.getIntercellSpacing().width;  int verticalMargin=table.getIntercellSpacing().height;  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  int headerMaxHeight=5;  int headerMaxWidth=0;  JTableHeader header=table.getTableHeader();  if (header != null && header.isVisible()) {    for (int col=0; col < table.getColumnCount(); col++) {      TableColumn tcol=table.getColumnModel().getColumn(col);      TableCellRenderer renderer=tcol.getHeaderRenderer();      if (renderer == null) {        renderer=table.getTableHeader().getDefaultRenderer();      }      Component comp=renderer.getTableCellRendererComponent(table,table.getModel().getColumnName(col),false,false,0,col);      int colHeight=comp.getPreferredSize().height + 2 * verticalMargin;      if (colHeight > screenSize.height) {        colHeight=0;      }      headerMaxHeight=Math.max(headerMaxHeight,colHeight);    }  }  for (int col=0; col < table.getColumnCount(); col++) {    int colMaxWidth=8;    TableColumn tcol=table.getColumnModel().getColumn(col);    TableCellRenderer renderer=tcol.getHeaderRenderer();    if (renderer == null && header != null) {      renderer=header.getDefaultRenderer();    }    if (renderer != null) {      Component comp=renderer.getTableCellRendererComponent(table,table.getModel().getColumnName(col),false,false,0,col);      colMaxWidth=comp.getPreferredSize().width + 2 * horizontalMargin + 8;    }    if (colMaxWidth > screenSize.width) {      colMaxWidth=8;    }    for (int row=0; row < table.getRowCount(); row++) {      renderer=table.getCellRenderer(row,col);      Component comp=table.prepareRenderer(renderer,row,col);      int colWidth=comp.getPreferredSize().width + 2 * horizontalMargin;      colMaxWidth=Math.max(colMaxWidth,colWidth);    }    tcol.setPreferredWidth(colMaxWidth);    headerMaxWidth+=colMaxWidth;  }  if (header != null && header.isVisible()) {    header.setPreferredSize(new Dimension(headerMaxWidth,headerMaxHeight));  }  int maxRow=table.getRowHeight();  for (int row=0; row < table.getRowCount(); row++) {    for (int col=0; col < table.getColumnCount(); col++) {      TableCellRenderer renderer=table.getCellRenderer(row,col);      Component comp=renderer.getTableCellRendererComponent(table,table.getModel().getValueAt(row,col),false,false,row,col);      int colHeight=comp.getPreferredSize().height + 2 * verticalMargin;      if (colHeight > screenSize.height) {        colHeight=0;      }      maxRow=Math.max(maxRow,colHeight);    }  }  if (maxRow > table.getRowHeight()) {    table.setRowHeight(maxRow);  }  Dimension d1;  if (rows == -1) {    d1=table.getPreferredSize();  } else {    d1=new Dimension(table.getPreferredSize().width,rows * maxRow);  }  table.setPreferredScrollableViewportSize(d1);}  }
class C{  private JsonValue decrypt(final JsonValue value) throws InternalServerErrorException {  try {    return cryptoService.decrypt(value);  } catch (  JsonException je) {    throw new InternalServerErrorException(je);  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.EmptyTypeImpl();}  }
class C{  public GeneralSecurityException(String msg){  super(msg);}  }
class C{  public void parse(String filename) throws HyphenationException, FileNotFoundException {  parse(new FileInputStream(filename),filename);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  AgentsModel model=(AgentsModel)getModel();  String agentType=getAgentType();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String agentName=(String)propertySheetModel.getValue(TF_NAME);  agentName=agentName.trim();  String password=(String)propertySheetModel.getValue(TF_PASSWORD);  String passwordConfirm=(String)propertySheetModel.getValue(TF_PASSWORD_CONFIRM);  password=password.trim();  passwordConfirm=passwordConfirm.trim();  String choice=(String)propertySheetModel.getValue(RADIO_CHOICE);  if (password.length() > 0) {    if (password.equals(passwordConfirm)) {      try {        String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);        if (agentType.equals(AgentConfiguration.AGENT_TYPE_J2EE) || agentType.equals(AgentConfiguration.AGENT_TYPE_WEB)) {          String agentURL=(String)propertySheetModel.getValue(TF_AGENT_URL);          agentURL=agentURL.trim();          if (choice.equals(AgentsViewBean.PROP_LOCAL)) {            model.createAgentLocal(curRealm,agentName,agentType,password,agentURL);          } else {            String serverURL=(String)propertySheetModel.getValue(TF_SERVER_URL);            serverURL=serverURL.trim();            model.createAgent(curRealm,agentName,agentType,password,serverURL,agentURL);          }        } else {          model.createAgent(curRealm,agentName,agentType,password,choice);        }        forwardToAgentsViewBean();      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());        forwardTo();      }    } else {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("agents.passwords.not.match"));      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("agents.password.blank"));    forwardTo();  }}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ ",rows="+ rows+ ",cols="+ cols+ "]";}  }
class C{  public IXObjectDoHandler registerXObjectDoHandler(PdfName xobjectSubType,IXObjectDoHandler handler){  return xobjectDoHandlers.put(xobjectSubType,handler);}  }
class C{  public boolean hasExpired(){  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnodeancestor.class,args);}  }
class C{  public void resendAck() throws SipException {  if (this.getLastAckSent() != null) {    if (getLastAckSent().getHeader(TimeStampHeader.NAME) != null && sipStack.generateTimeStampHeader) {      TimeStamp ts=new TimeStamp();      try {        ts.setTimeStamp(System.currentTimeMillis());        getLastAckSent().setHeader(ts);      } catch (      InvalidArgumentException e) {      }    }    this.sendAck(getLastAckSent(),false);  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::resendAck:lastAck sent is NULL hence not resending ACK");    }  }}  }
class C{  void checkLoginTimeout() throws IOException {  long lastCallbackSent=loginState.getLastCallbackSent();  long pageTimeOut=loginState.getPageTimeOut();  long now=currentTimeMillis();  if ((lastCallbackSent + ((pageTimeOut - 3) * 1000)) < now) {    debug.message("Page Timeout");    loginState.setTimedOut(true);    loginState.setReceivedCallback(null,am);    throw new IOException(AMAuthErrorCode.AUTH_TIMEOUT);  }}  }
class C{  public SignatureUtil(PdfDocument document){  this.document=document;  this.acroForm=PdfAcroForm.getAcroForm(document,true);}  }
class C{  public static Foo fetchByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_Last(uuid,orderByComparator);}  }
class C{  public synchronized void start(int level) throws IOException {  boolean valid=false;  if ((level & Channel.MBR_RX_SEQ) == Channel.MBR_RX_SEQ) {    if (receiver != null)     throw new IllegalStateException(sm.getString("mcastServiceImpl.receive.running"));    try {      if (sender == null)       socket.joinGroup(address);    } catch (    IOException iox) {      log.error(sm.getString("mcastServiceImpl.unable.join"));      throw iox;    }    doRunReceiver=true;    receiver=new ReceiverThread();    receiver.setDaemon(true);    receiver.start();    valid=true;  }  if ((level & Channel.MBR_TX_SEQ) == Channel.MBR_TX_SEQ) {    if (sender != null)     throw new IllegalStateException(sm.getString("mcastServiceImpl.send.running"));    if (receiver == null)     socket.joinGroup(address);    send(false);    doRunSender=true;    sender=new SenderThread(sendFrequency);    sender.setDaemon(true);    sender.start();    valid=true;  }  if (!valid) {    throw new IllegalArgumentException(sm.getString("mcastServiceImpl.invalid.startLevel"));  }  waitForMembers(level);  startLevel=(startLevel | level);}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  public void mouseDragged(MouseEvent e){}  }
class C{  String replaceTokensWithValues(String queryString,Map<String,String> params) throws BadRequestException {  java.util.regex.Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buffer=new StringBuffer();  while (matcher.find()) {    String fullTokenKey=matcher.group(1);    String tokenKey=fullTokenKey;    String tokenPrefix=null;    String[] tokenKeyParts=tokenKey.split(":",2);    if (tokenKeyParts.length == 2) {      tokenPrefix=tokenKeyParts[0];      tokenKey=tokenKeyParts[1];    }    if (!params.containsKey(tokenKey)) {      throw new BadRequestException("Missing entry in params passed to query for token " + tokenKey);    } else {      Object replacement=params.get(tokenKey);      if (PREFIX_LIST.equals(tokenPrefix)) {        replacement=Arrays.asList(("'" + replacement.toString().replaceAll("'","\\\\'").replaceAll(",","','") + "'").split(","));      }      if (replacement instanceof List) {        StringBuffer commaSeparated=new StringBuffer();        boolean first=true;        for (        Object entry : ((List)replacement)) {          if (!first) {            commaSeparated.append(",");          } else {            first=false;          }          commaSeparated.append(entry.toString());        }        replacement=commaSeparated.toString();      }      if (replacement == null) {        replacement="";      }      if (tokenPrefix != null) {        if (tokenPrefix.equals(PREFIX_UNQUOTED)) {        } else         if (tokenPrefix.equals(PREFIX_DOTNOTATION)) {          replacement=JSON_POINTER_TO_DOT_NOTATION.apply(replacement.toString());        }      } else {        replacement="'" + replacement.toString().replaceAll("'","\\\\'") + "'";      }      matcher.appendReplacement(buffer,"");      buffer.append(replacement);    }  }  matcher.appendTail(buffer);  return buffer.toString();}  }
class C{  public JKServerDownException(final Exception ex,final String host,final int port){  super(ex);  this.host=host;  this.port=port;}  }
class C{  private void createImage(){  if (gc != null) {    image=gc.createCompatibleImage(IMAGE_SIZE,IMAGE_SIZE,(backColor != MetalBumps.ALPHA) ? Transparency.OPAQUE : Transparency.BITMASK);  } else {    int cmap[]={backColor.getRGB(),topColor.getRGB(),shadowColor.getRGB()};    IndexColorModel icm=new IndexColorModel(8,3,cmap,0,false,(backColor == MetalBumps.ALPHA) ? 0 : -1,DataBuffer.TYPE_BYTE);    image=new BufferedImage(IMAGE_SIZE,IMAGE_SIZE,BufferedImage.TYPE_BYTE_INDEXED,icm);  }}  }
class C{  public void removeAllSections(){  this.sections.clear();}  }
class C{  public static GenericControl newControl(final Control control){  Reject.ifNull(control);  if (control instanceof GenericControl) {    return (GenericControl)control;  }  return new GenericControl(control.getOID(),control.isCritical(),control.getValue());}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.IDPDescriptorElement createIDPDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.IDPDescriptorElementImpl();}  }
class C{  public static boolean isAMSDKConfigured() throws SMSException {  if (!isRealmEnabled() || OrgConfigViaAMSDK.isAMSDKConfigured("/")) {    return (true);  }  SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  Set realms=(new OrganizationConfigManager(token,"/")).getSubOrganizationNames("*",true);  for (Iterator items=realms.iterator(); items.hasNext(); ) {    String realm=items.next().toString();    if (OrgConfigViaAMSDK.isAMSDKConfigured(realm)) {      return (true);    }  }  return (false);}  }
class C{  public void board_frame_disposed(){  super.dispose();}  }
class C{  static void sort(int[] a,int left,int right,int[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        int t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  int[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new int[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    int[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  private void rebuild(boolean clearSelection){  Object rootUO;  treePathMapping.clear();  if (treeModel != null && (rootUO=treeModel.getRoot()) != null) {    root=createNodeForValue(rootUO,0);    root.path=new TreePath(rootUO);    addMapping(root);    if (isRootVisible()) {      rowCount=1;      root.row=0;    } else {      rowCount=0;      root.row=-1;    }    root.expand();  } else {    root=null;    rowCount=0;  }  if (clearSelection && treeSelectionModel != null) {    treeSelectionModel.clearSelection();  }  this.visibleNodesChanged();}  }
class C{  @Override public Promise<ActionResponse,ResourceException> handleAction(Context context,ActionRequest request){switch (request.getActionAsEnum(Action.class)) {case available:    return handleListAvailable();case listRepoUpdates:  return handleListRepoUpdates(request.getAdditionalParameters());case preview:return handlePreviewUpdate(request.getAdditionalParameters());case update:return handleInstallUpdate(request.getAdditionalParameters(),context.asContext(SecurityContext.class).getAuthenticationId());case getLicense:return handleLicense(request.getAdditionalParameters());case markComplete:return handleMarkComplete(request.getAdditionalParameters());case restart:updateManager.restartNow();return newActionResponse(json(object())).asPromise();case lastUpdateId:return newActionResponse(json(object(field("lastUpdateId",updateManager.getLastUpdateId())))).asPromise();case installed:return handleGetInstalledUpdates(context);default :return new NotSupportedException(request.getAction() + " is not supported").asPromise();}}  }
class C{  public boolean isUserAttrValueValid(String orgDN,String userAttrValue){  String regexExpr=null;  boolean isValid=false;  try {    regexExpr=getAttributeValue(orgDN,PW_RESET_INVALIDCHAR_REGEX);  } catch (  SSOException e) {    debug.warning("PWResetUserValidationModelImpl.isUserAttrValueValid",e);    errorMsg=getErrorString(e);  }catch (  SMSException e) {    debug.error("PWResetUserValidationModelImpl.isUserAttrValueValid",e);    errorMsg=getErrorString(e);  }  if (regexExpr == null || regexExpr.isEmpty()) {    return true;  }  if (debug.messageEnabled()) {    debug.message("PWResetUserValidationModelImpl.isUserAttrValueValid: " + "using regular expression '" + regexExpr + "'");  }  try {    Pattern pattern=Pattern.compile(regexExpr);    Matcher matcher=pattern.matcher(userAttrValue);    boolean found=matcher.find();    if (found) {      errorMsg=getLocalizedString("userNotExists.message");    } else {      isValid=true;    }  } catch (  PatternSyntaxException pse) {    debug.error("PWResetUserValidationModelImpl.isUserAttrValueValid: " + "expression's syntax is invalid '" + regexExpr + "'",pse);    errorMsg=getErrorString(pse);  }  return isValid;}  }
class C{  public void testCase7(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private int read(byte[] buffer,int offset,int byteCount) throws IOException {  if (byteCount == 0) {    return 0;  }  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (shutdownInput) {    return -1;  }  int readCount=IoBridge.recvfrom(true,fd,buffer,offset,byteCount,0,null,false);  if (readCount == 0) {    throw new SocketTimeoutException();  }  if (readCount == -1) {    shutdownInput=true;  }  return readCount;}  }
class C{  public UnsavedChangesDialog.Result checkUnsavedChanges(){  if (schemaElementPanel != null) {    return schemaElementPanel.checkUnsavedChanges();  }  return UnsavedChangesDialog.Result.DO_NOT_SAVE;}  }
class C{  public void testReadDoesNotBlockUnnecessarily() throws IOException {  PipedInputStream pin=new PipedInputStream();  PipedOutputStream pos=new PipedOutputStream(pin);  pos.write("hello".getBytes("UTF-8"));  InputStreamReader reader=new InputStreamReader(pin);  char[] buffer=new char[1024];  int count=reader.read(buffer);  assertEquals(5,count);}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public EACCredentials(PrivateKey privateKey,Certificate[] chain){  this.privateKey=privateKey;  this.chain=chain;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.WebBindingElement createWebBindingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.WebBindingElementImpl();}  }
class C{  public void removeMember(Guid guid) throws UMSException {  String dn=guid.getDn();  super.modify(new Attr(MEMBER_ATTR_NAME,dn),ModificationType.DELETE);  save();}  }
class C{  public Wood(){  this(DEFAULT_TYPE,DEFAULT_SPECIES);}  }
class C{  void onDropChild(View child){  if (child != null) {    LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.dropped=true;    child.requestLayout();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Node removedNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  try {    removedNode=entities.removeNamedItemNS(nullNS,"ent1");    fail("entity_throw_DOMException");  } catch (  DOMException ex) {switch (ex.code) {case 8:      break;case 7:    break;default :  throw ex;}}try {removedNode=notations.removeNamedItemNS(nullNS,"notation1");fail("notation_throw_DOMException");} catch (DOMException ex) {switch (ex.code) {case 8:break;case 7:break;default :throw ex;}}}  }
class C{  @DataProvider(name="entryDataProvider") public Object[][] createTestEntryData() throws Exception {  String[][] input={{"cn=john smith, dc=com","objectclass","top","objectclass","person","cn","john smith","sn","smith","description","description of john"},{"","objectclass","top","objectClass","ds-root-dse"}};  List<Entry[]> entries=new LinkedList<>();  for (  String[] s : input) {    DN dn=DN.valueOf(s[0]);    Entry entry=new Entry(dn,null,null,null);    for (int i=1; i < s.length; i+=2) {      String atype=toLowerCase(s[i]);      String avalue=toLowerCase(s[i + 1]);      if (atype.equals("objectclass")) {        entry.addObjectClass(DirectoryServer.getSchema().getObjectClass(avalue));      } else {        Attribute attr=Attributes.create(atype,avalue);        entry.addAttribute(attr,null);      }    }    entries.add(new Entry[]{entry});  }  return entries.toArray(new Object[0][]);}  }
class C{  public final void error(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,t);  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  public final void testGetFieldSize(){  assertEquals(2000,new ECFieldF2m(2000).getFieldSize());}  }
class C{  private static String keyAlgorithmFromTransformation(String transformation){  final int separatorIndex=transformation.indexOf('/');  return 0 < separatorIndex ? transformation.substring(0,separatorIndex) : transformation;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @Override public void reset(ConnectionPool parent,PooledConnection con){}  }
class C{  public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public void test_initializeLjava_security_spec_AlgorithmParameterSpecLjava_security_SecureRandom() throws Exception {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("DSA");  keyPairGenerator.initialize(1024);  DSAPublicKey key=(DSAPublicKey)keyPairGenerator.genKeyPair().getPublic();  DSAParams params=key.getParams();  KeyPairGenerator keyPair=KeyPairGenerator.getInstance("DSA");  keyPair.initialize(new DSAParameterSpec(params.getP(),params.getQ(),params.getG()),new SecureRandom());}  }
class C{  public InitializationBuilder requirePasswordStorageSchemes(){  requireCryptoServices();  Collections.addAll(subSystemsToInitialize,SubSystem.PASSWORD_STORAGE_SCHEME);  return this;}  }
class C{  @Override public MinguoDate dateYearDay(int prolepticYear,int dayOfYear){  return new MinguoDate(LocalDate.ofYearDay(prolepticYear + YEARS_DIFFERENCE,dayOfYear));}  }
class C{  public IDFFMetaException(String message){  super(message);}  }
class C{  public FrameBodyTXXX(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public boolean isIndexSelected(int index){  return isSelected(index);}  }
class C{  public void javacError(JavacErrorDetail[] javacErrors) throws JasperException {  errHandler.javacError(javacErrors);}  }
class C{  private JsonValue prepareScriptBindings(Context context,Request request,String resourceId,JsonValue oldObject,JsonValue newObject){  JsonValue scriptBindings=json(object());  scriptBindings.put("context",context);  scriptBindings.put("request",request);  scriptBindings.put("oldObject",oldObject.getObject());  scriptBindings.put("newObject",newObject.getObject());  scriptBindings.put("resourceName",managedId(resourceId));  return scriptBindings;}  }
class C{  static void exportPrefs(Preferences prefs,OutputStream stream,boolean withSubTree) throws IOException, BackingStoreException {  indent=-1;  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(stream,"UTF-8"));  out.write(HEADER);  out.newLine();  out.newLine();  out.write(DOCTYPE);  out.write(" '");  out.write(PREFS_DTD_NAME);  out.write("'>");  out.newLine();  out.newLine();  flushStartTag("preferences",new String[]{"EXTERNAL_XML_VERSION"},new String[]{String.valueOf(XML_VERSION)},out);  flushStartTag("root",new String[]{"type"},new String[]{prefs.isUserNode() ? "user" : "system"},out);  flushEmptyElement("map",out);  StringTokenizer ancestors=new StringTokenizer(prefs.absolutePath(),"/");  exportNode(ancestors,prefs,withSubTree,out);  flushEndTag("root",out);  flushEndTag("preferences",out);  out.flush();  out=null;}  }
class C{  @Override public void addMapping(String mapping){  mappingsLock.writeLock().lock();  try {    mappings.add(mapping);  }  finally {    mappingsLock.writeLock().unlock();  }  if (parent.getState().equals(LifecycleState.STARTED))   fireContainerEvent(ADD_MAPPING_EVENT,mapping);}  }
class C{  public Tag createDefaultTag(){  if (SupportedFileFormat.FLAC.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new FlacTag(VorbisCommentTag.createNewTag(),new ArrayList<MetadataBlockDataPicture>());  } else   if (SupportedFileFormat.OGG.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return VorbisCommentTag.createNewTag();  } else   if (SupportedFileFormat.MP4.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new Mp4Tag();  } else   if (SupportedFileFormat.M4A.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new Mp4Tag();  } else   if (SupportedFileFormat.M4P.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new Mp4Tag();  } else   if (SupportedFileFormat.WMA.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new AsfTag();  } else   if (SupportedFileFormat.WAV.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new WavTag();  } else   if (SupportedFileFormat.RA.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new RealTag();  } else   if (SupportedFileFormat.RM.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new RealTag();  } else   if (SupportedFileFormat.AIF.getFilesuffix().equals(file.getName().substring(file.getName().lastIndexOf('.')))) {    return new AiffTag();  } else {    throw new RuntimeException("Unable to create default tag for this file format");  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  void shutdown(){synchronized (shutdownLock) {    shutdown=true;    shutdownLock.notifyAll();  }}  }
class C{  public void warning(String msg,Throwable t){  if (debugLevel > Debug.ERROR) {    formatAndWrite("WARNING: ",msg,t);  }}  }
class C{  public void testWrite3() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  for (int i=0; i < data.length; i++) {    cos.write(data,i,1);  }  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }}  }
class C{  public void adjust_design_bounds(){  ShapeTileBox new_bounding_box=r_board.get_bounding_box();  Collection<BrdItem> board_items=r_board.get_items();  for (  BrdItem curr_item : board_items) {    ShapeTileBox curr_bounding_box=curr_item.bounding_box();    if (curr_bounding_box.box_ur.v_x < Integer.MAX_VALUE) {      new_bounding_box=new_bounding_box.union(curr_bounding_box);    }  }  gdi_context.change_design_bounds(new_bounding_box);}  }
class C{  public boolean contains(ByteString value){  return values.contains(createAttributeValue(attributeDescription,value));}  }
class C{  public List<String> messageComments(MessageType msg,PythonImportHandler importHandler){  StringBuilder paramTypesBuilder=new StringBuilder();  paramTypesBuilder.append("Attributes:\n");  for (  Field field : msg.getFields()) {    paramTypesBuilder.append(fieldComment(field.getSimpleName(),field,importHandler,null));  }  String paramTypes=paramTypesBuilder.toString();  StringBuilder contentBuilder=new StringBuilder();  if (msg.hasAttribute(ElementDocumentationAttribute.KEY)) {    contentBuilder.append(getSphinxifiedScopedDescription(msg));    if (!Strings.isNullOrEmpty(paramTypes)) {      contentBuilder.append("\n\n");    }  }  contentBuilder.append(paramTypes);  return pythonCommon.convertToCommentedBlock(contentBuilder.toString());}  }
class C{  void clear(){  ib=null;}  }
class C{  private void encodeV1(Entry entry,ByteStringBuilder buffer) throws DirectoryException {  buffer.appendByte(0x01);  byte[] dnBytes=getBytes(entry.getName().toString());  buffer.appendBERLength(dnBytes.length);  buffer.appendBytes(dnBytes);  int i=1;  ByteStringBuilder bsb=new ByteStringBuilder();  for (  String ocName : entry.getObjectClasses().values()) {    bsb.appendUtf8(ocName);    if (i < entry.getObjectClasses().values().size()) {      bsb.appendByte(0x00);    }    i++;  }  buffer.appendBERLength(bsb.length());  buffer.appendBytes(bsb);  encodeV1Attributes(buffer,entry.getAllAttributes(),false);  encodeV1Attributes(buffer,entry.getAllAttributes(),true);}  }
class C{  public Builder removeOptionalAttribute(final String nameOrOID){  this.optionalAttributes.remove(nameOrOID);  return this;}  }
class C{  @Override public void close() throws SQLException {  if (!_closed) {    closeInternal();  }}  }
class C{  public synchronized boolean isClosed(){  return closed;}  }
class C{  public static void sendAttributeQuery(AttributeQuery attrQuery,HttpServletRequest request,HttpServletResponse response,String attrAuthorityEntityID,String realm,String attrQueryProfile,String attrProfile,String binding) throws SAML2Exception {  AttributeAuthorityDescriptorElement aad=null;  try {    aad=metaManager.getAttributeAuthorityDescriptor(realm,attrAuthorityEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AttributeQueryUtil.sendAttributeQuery:",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  if (aad == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrAuthorityNotFound"));  }  if (binding == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  String location=findLocation(aad,binding,attrQueryProfile,attrProfile);  if (location == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrAuthorityNotFound"));  }  if (binding.equalsIgnoreCase(SAML2Constants.HTTP_POST)) {    signAttributeQuery(attrQuery,realm,false);    String encodedReqMsg=SAML2Utils.encodeForPOST(attrQuery.toXMLString(true,true));    SAML2Utils.postToTarget(request,response,"SAMLRequest",encodedReqMsg,null,null,location);  } else {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }}  }
class C{  private void detectRootElementCollisions(String[] points) throws JAXBException {  for (int i=0; i < points.length; i+=2) {    boolean elementFound=false;    for (int j=grammarInfos.length - 1; j >= 0; j--) {      if (grammarInfos[j].recognize(points[i],points[i + 1])) {        if (elementFound == false) {          elementFound=true;        } else {          throw new JAXBException(Messages.format(Messages.COLLISION_DETECTED,points[i],points[i + 1]));        }      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureValueElement createSignatureValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureValueElementImpl();}  }
class C{  private JsonValue validateConnector() throws Exception {  System.out.println("1. Validate that the connection with the Azure connector is OK:");  HttpResponse<String> response=Unirest.post(azureEndpoint + "?_action=test").header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").asString();  return json(readJson(response.getBody()));}  }
class C{  public void runTest() throws Throwable {  String localName="blank";  String namespaceURI="http://www.nist.gov";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testNode=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testNode);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  private void deleteExternalLogFiles(Set<String> logFiles) throws ApplicationException {  if (isVerbose()) {    notifyListeners(getFormattedProgressWithLineBreak(INFO_PROGRESS_DELETING_EXTERNAL_LOG_FILES.get()));  } else {    notifyListeners(getFormattedWithPoints(INFO_PROGRESS_DELETING_EXTERNAL_LOG_FILES_NON_VERBOSE.get()));  }  for (  String path : logFiles) {    deleteRecursively(new File(path));  }  if (!isVerbose()) {    notifyListeners(getFormattedDoneWithLineBreak());  }}  }
class C{  private void initializeNonInteractiveUserDataWithParser(UserData uData) throws UserDataException {  uData.setQuiet(isQuiet());  uData.setVerbose(isVerbose());  uData.setConnectTimeout(getConnectTimeout());  final List<LocalizableMessage> errorMessages=new LinkedList<>();  setBackendType(uData,errorMessages);  final List<String> baseDNs=checkBaseDNs(errorMessages);  setDirectoryManagerData(uData,errorMessages);  setPorts(uData,errorMessages);  setImportData(baseDNs,uData,errorMessages);  setSecurityData(uData,errorMessages);  if (!errorMessages.isEmpty()) {    throw new UserDataException(null,Utils.getMessageFromCollection(errorMessages,formatter.getLineBreak().toString()));  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(SAMLConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  String prefixLIB="";  String uriLIB="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uriLIB=IFSConstants.LIB_NAMESPACE_STRING;    }  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSLogoutResponse.toXMLString: " + "providerId is null in the response with responseId:" + responseID);    String[] args={responseID};    throw new FSMsgException("nullProviderIdWResponseId",args);  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.LOGOUT_RESPONSE).append(uriLIB).append(IFSConstants.SPACE);  if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {    xml.append(IFSConstants.ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE);  }  if (responseID != null) {    xml.append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(responseID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE);  }  if (inResponseTo != null) {    xml.append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(inResponseTo).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE);  }  xml.append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE).append(IFSConstants.RIGHT_ANGLE);  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  if (providerId != null) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);  }  if (status != null) {    xml.append(status.toString(includeNS,true));  }  if (relayState != null) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE).append(relayState).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE);  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.LOGOUT_RESPONSE).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  public JspTagException(Throwable rootCause){  super(rootCause);}  }
class C{  @NonNull public final Agera flatMap(@NonNull Supplier<Observable> mapper){  return new AgeraFlatMap(this,mapper);}  }
class C{  public static boolean isStarted(){  return serverStarted;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  IOutput outputWriter=getOutputWriter();  try {    String[] params={serverName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_SERVER_CONFIG",params);    if (serverName.equals(DEFAULT_SVR_CONFIG)) {      Properties prop=ServerConfiguration.getDefaults(adminSSOToken);      outputWriter.printlnMessage(FormatUtils.formatProperties(prop));    } else {      Properties prop=ServerConfiguration.getServerInstance(adminSSOToken,serverName);      if ((prop != null) && !prop.isEmpty()) {        if (isOptionSet(OPTION_WITH_DEFAULTS)) {          Properties defProp=ServerConfiguration.getDefaults(adminSSOToken);          defProp.putAll(prop);          prop=defProp;        }        outputWriter.printlnMessage(FormatUtils.formatProperties(prop));        String siteName=ServerConfiguration.getServerSite(adminSSOToken,serverName);        if (siteName != null) {          Object[] args={siteName};          outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-server-site-name"),args));        }        String serverId=ServerConfiguration.getServerID(adminSSOToken,serverName);        if (serverId != null) {          Object[] args={serverId};          outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-server-id"),args));        }      } else {        outputWriter.printlnMessage(getResourceString("list-server-config-no-results"));      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_SERVER_CONFIG",params);  } catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("ListServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("ListServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("ListServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean isNasSelected(){  return (addr[0] == (byte)255) && (addr[1] == (byte)255) && (addr[2] == (byte)255)&& (addr[3] == (byte)254);}  }
class C{  public void testIntbyInt1(){  byte aBytes[]={10,20,30,40};  byte bBytes[]={1,2,3,4};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,55,5,15,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected void installListeners(){  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    splitPane.addPropertyChangeListener(propertyChangeListener);  }  if ((focusListener=createFocusListener()) != null) {    splitPane.addFocusListener(focusListener);  }}  }
class C{  public void message(String msg,Throwable t){  if (debugLevel > Debug.WARNING) {    formatAndWrite(null,msg,t);  }}  }
class C{  private ObjectClass(final String name){  this.oid=toOID(name);  this.names=Collections.singletonList(name);  this.isObsolete=false;  this.superiorClassOIDs=Collections.singleton(TOP_OBJECTCLASS_NAME);  this.objectClassType=ObjectClassType.ABSTRACT;  this.requiredAttributeOIDs=Collections.emptySet();  this.optionalAttributeOIDs=Collections.emptySet();  this.isExtensibleObject=oid.equals(EXTENSIBLE_OBJECT_OBJECTCLASS_OID);  this.isPlaceHolder=true;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_needToCallStartDocument)       startDocumentInternal();      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      int indexOfQLT=data.indexOf("?>");      if (indexOfQLT >= 0) {        if (indexOfQLT > 0) {          writer.write(data.substring(0,indexOfQLT));        }        writer.write("? >");        if ((indexOfQLT + 2) < data.length()) {          writer.write(data.substring(indexOfQLT + 2));        }      } else {        writer.write(data);      }      writer.write('?');      writer.write('>');      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String idAttrName,java.lang.String id,boolean includeCert) throws XMLSignatureException {  return signXML(doc,certAlias,algorithm,idAttrName,id,includeCert,null);}  }
class C{  public void testShiftRightNegNonZeroes(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=68;  byte rBytes[]={-25,-4,121,-80,20,-70,109,42};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(queue,size);}  }
class C{  public void end(){  stop=true;  while (!stopped) {    try {      Thread.sleep(10);    } catch (    InterruptedException e) {      Log.e(TAG,e.getMessage());    }  }}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  X509EncodedKeySpec eks=new X509EncodedKeySpec(encodedKey);  byte[] ek=eks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  public GeneralFileFilter(String fileNamePattern,char wildCard){  this.fileNamePattern=fileNamePattern;  this.wildCard=wildCard;}  }
class C{  private boolean handleAutoRename(final File sourceFile,final File destFile) throws IOException {  int counter=1;  File newDestFile;  while (true) {    String newFileName=FileUtils.getFileNameWithoutExtension(destFile.getName(),false) + "(" + counter+ ")."+ FileUtils.getFileExtension(destFile.getName(),false);    newDestFile=new File(destFile.getParent(),newFileName);    if (!newDestFile.exists()) {      return (FileUtils.copyFromSourceToDestFile(sourceFile,newDestFile,false,configuration));    } else {      counter++;    }  }}  }
class C{  public RequestSecurityTokenResponse(RequestedSecurityToken token,String appliesTo){  this.token=token;  this.appliesTo=appliesTo;}  }
class C{  public boolean hasThread(){  return !this.waitingThreads.isEmpty();}  }
class C{  public Passport(PassportService service,MRTDTrustStore trustManager,BACKeySpec bacKey) throws CardServiceException, GeneralSecurityException {  this(service,trustManager,Collections.singletonList(bacKey),false,false);}  }
class C{  private boolean matchesField(Format.Field attribute,int field){  if (this.attribute != null) {    return this.attribute.equals(attribute);  }  return (field == this.field);}  }
class C{  public boolean isOneTouchExpandable(){  return oneTouchExpandable;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList newList;  Element newElement;  String prefix;  String lname;  doc=(Document)load("staffNS",false);  newList=doc.getElementsByTagNameNS("*","employee");  assertSize("employeeCount",5,newList);  newElement=(Element)newList.item(3);  prefix=newElement.getPrefix();  assertEquals("prefix","emp",prefix);  lname=newElement.getLocalName();  assertEquals("lname","employee",lname);}  }
class C{  public static int remainderUnsigned(int dividend,int divisor){  return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));}  }
class C{  private void processIPv6(final String rule){  final String[] s=rule.split("/",-1);  final String address=s[0];  final String ipv6Literal;  if (address.charAt(0) == '[' && address.charAt(address.length() - 1) == ']') {    ipv6Literal=address.substring(1,address.length() - 1);  } else {    ipv6Literal=address;  }  boolean isValid;  try {    final Class<?> ipUtils=Class.forName("sun.net.util.IPAddressUtil");    final Method method=ipUtils.getMethod("isIPv6LiteralAddress",String.class);    isValid=(Boolean)method.invoke(null,ipv6Literal);  } catch (  Exception e) {    isValid=true;  }  if (!isValid) {    throw genericDecodeError();  }  final InetAddress addr;  try {    addr=InetAddress.getByName(address);  } catch (  final UnknownHostException ex) {    throw genericDecodeError();  }  if (addr instanceof Inet6Address) {    this.ruleType=RuleType.IPv6;    final Inet6Address addr6=(Inet6Address)addr;    this.ruleMask=addr6.getAddress();    this.prefixMask=new byte[IN6ADDRSZ];    prefixMask(processPrefix(s,IPV6MAXPREFIX));  } else {    if (s.length == 2) {      throw genericDecodeError();    }    this.ruleMask=addr.getAddress();    this.ruleType=RuleType.IPv4;    this.prefixMask=new byte[IN4ADDRSZ];    prefixMask(processPrefix(s,IPV4MAXPREFIX));  }}  }
class C{  private void detach(){  if (prevTakeIndex >= 0) {    prevTakeIndex=DETACHED;    itrs.doSomeSweeping(true);  }}  }
class C{  @Inject public SessionAdapter(TokenIdFactory tokenIdFactory,CoreTokenConfig config,JSONSerialisation serialisation,TokenBlobUtils blobUtils,DNWrapper dnWrapper){  this.tokenIdFactory=tokenIdFactory;  this.config=config;  this.serialisation=serialisation;  this.blobUtils=blobUtils;  this.dnWrapper=dnWrapper;}  }
class C{  public FrameBodyTLAN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public Builder prohibitedAttributes(final Collection<String> attributeNamesOrOIDs){  this.prohibitedAttributeOIDs.addAll(attributeNamesOrOIDs);  return this;}  }
class C{  public BuilderImage<T> crop(){  this.config.setCrop();  return this;}  }
class C{  public String execute(Locale locale,Map params) throws WorkflowException {  validateParameters(params);  String realm=getString(params,ParameterKeys.P_REALM);  String metadataFile=getString(params,ParameterKeys.P_META_DATA);  String metadata=getContent(metadataFile,locale);  String[] results=ImportSAML2MetaData.importData(realm,metadata,null);  String cot=getString(params,ParameterKeys.P_COT);  if ((cot != null) && (cot.length() > 0)) {    try {      String entityId=results[1];      AddProviderToCOT.addToCOT(realm,cot,entityId);    } catch (    COTException e) {      throw new WorkflowException(e.getMessage());    }  }  return getMessage("idp.configured",locale);}  }
class C{  public static CRAMMD5SASLBindRequest newCRAMMD5SASLBindRequest(final String authenticationID,final char[] password){  return new CRAMMD5SASLBindRequestImpl(authenticationID,getBytes(password));}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  PictureInfoDao.createTable(db,ifNotExists);}  }
class C{  public boolean hasEntitlement(String realm,Subject adminSubject,Subject subject,String applicationName,Entitlement entitlement,Map<String,Set<String>> envParameters) throws EntitlementException {  init(adminSubject,subject,realm,applicationName,entitlement.getResourceName(),entitlement.getRequestedResourceName(),entitlement.getActionValues().keySet(),envParameters,false);  entitlement.setApplicationName(applicationName);  indexes=entitlement.getResourceSearchIndexes(adminSubject,realm);  List<Entitlement> results=evaluate(realm);  Entitlement result=results.get(0);  for (  String action : entitlement.getActionValues().keySet()) {    Boolean b=result.getActionValue(action);    if ((b == null) || !b.booleanValue()) {      return false;    }  }  return true;}  }
class C{  public UserAgentHeader createUserAgentHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null user agent");  UserAgent userAgent=new UserAgent();  userAgent.setProduct(product);  return userAgent;}  }
class C{  public static boolean isMethodDirectlyExists(Object object,String methodName,Class<?>... params){  try {    Method method=object.getClass().getMethod(methodName,params);    return true;  } catch (  NoSuchMethodException e) {    return false;  }catch (  SecurityException e) {    throw new RuntimeException(e);  }}  }
class C{  public Builder withFade(Color color) throws IllegalArgumentException {  Validate.notNull(color,"Cannot have null color");  if (fadeColors == null) {    fadeColors=ImmutableList.builder();  }  fadeColors.add(color);  return this;}  }
class C{  private PKCS1VectorGenerator(){}  }
class C{  public static Pose toOpenGlCameraPose(TangoPoseData devicePose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(devicePose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(extrinsics.getDeviceTColorCamera()).multiply(COLOR_CAMERA_T_OPENGL_CAMERA);  return matrixToPose(openglWorldTOpenglCamera);}  }
class C{  public static Date parseText(String dateStr){  try {    return mSimpleTextFormat.parse(dateStr);  } catch (  ParseException e) {    e.printStackTrace();    throw new RuntimeException("date formatDateTime error");  }}  }
class C{  protected void returnAfterCompletion(){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSSingleLogoutHandler::returnAC: " + "PROTOCOL=" + this.singleLogoutProtocol + ", relayState="+ this.relayState);  }  try {    String returnProviderId="";    String relayState="";    String logoutStatusString="";    String inResponseTo="";    FSReturnSessionManager mngInst=FSReturnSessionManager.getInstance(metaAlias);    HashMap providerMap=new HashMap();    if (mngInst != null) {      providerMap=mngInst.getUserProviderInfo(userID);    }    if (providerMap != null) {      returnProviderId=(String)providerMap.get(IFSConstants.PROVIDER);      relayState=(String)providerMap.get(IFSConstants.LOGOUT_RELAY_STATE);      logoutStatusString=(String)providerMap.get(IFSConstants.LOGOUT_STATUS);      if (logoutStatusString == null || logoutStatusString.length() == 0) {        logoutStatusString=IFSConstants.SAML_SUCCESS;      }      inResponseTo=(String)providerMap.get(IFSConstants.RESPONSE_TO);      mngInst.removeUserProviderInfo(userID);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Deleted " + returnProviderId + " from return list");      }      ProviderDescriptorType descriptor=null;      if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {        descriptor=metaManager.getSPDescriptor(realm,returnProviderId);      } else {        descriptor=metaManager.getIDPDescriptor(realm,returnProviderId);      }      String retURL=descriptor.getSingleLogoutServiceReturnURL();      if (retURL != null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Getting provider " + returnProviderId + " IDP Return URL = "+ retURL);        }        FSLogoutResponse responseLogout=new FSLogoutResponse();        responseLogout.setResponseTo(inResponseTo);        responseLogout.setRelayState(relayState);        responseLogout.setProviderId(hostedEntityId);        responseLogout.setStatus(logoutStatusString);        responseLogout.setID(IFSConstants.LOGOUTID);        responseLogout.setMinorVersion(getMinorVersion(descriptor));        responseLogout.setResponseID(FSUtils.generateID());        callPostSingleLogoutSuccess(responseLogout,IFSConstants.LOGOUT_IDP_REDIRECT_PROFILE);        if (MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.IDFF) && hostedRole.equalsIgnoreCase(IFSConstants.IDP) && !MultiProtocolUtils.isMultiProtocolRelayState(relayState)) {          int retStatus=handleMultiProtocolLogout(false,responseLogout.toXMLString(true,true),returnProviderId);          if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {            return;          } else {            if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {              responseLogout.setStatus(IFSConstants.SAML_RESPONDER);            }          }        }        String urlEncodedResponse=responseLogout.toURLEncodedQueryString();        if (FSServiceUtils.isSigningOn()) {          String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);          if (certAlias == null || certAlias.length() == 0) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSBrowserArtifactConsumerHandler:: " + "signSAMLRequest:" + "couldn't obtain this site's cert alias.");            }            throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));          }          urlEncodedResponse=FSSignatureUtil.signAndReturnQueryString(urlEncodedResponse,certAlias);        }        StringBuffer redirectURL=new StringBuffer();        redirectURL.append(retURL);        if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {          redirectURL.append(IFSConstants.QUESTION_MARK);        } else {          redirectURL.append(IFSConstants.AMPERSAND);        }        redirectURL.append(urlEncodedResponse);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Response to be sent : " + redirectURL.toString());        }        String[] data={userID};        LogUtil.access(Level.INFO,LogUtil.LOGOUT_SUCCESS,data);        response.sendRedirect(redirectURL.toString());        return;      }    } else {      FSUtils.debug.message("no source provider. return to local status page");      if ((this.singleLogoutProtocol != null) && this.singleLogoutProtocol.equals(IFSConstants.LOGOUT_IDP_SOAP_PROFILE) && (this.relayState != null)&& MultiProtocolUtils.isMultiProtocolRelayState(this.relayState)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSingleLogoutHandler::returnAC:" + " this is multiProto for IDP initiated SOAP");        }        return;      }      if (MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.IDFF) && hostedRole.equalsIgnoreCase(IFSConstants.IDP) && !MultiProtocolUtils.isMultiProtocolRelayState(relayState)) {        boolean isSOAPInitiated=false;        if ((singleLogoutProtocol.equals(IFSConstants.LOGOUT_IDP_SOAP_PROFILE)) || (singleLogoutProtocol.equals(IFSConstants.LOGOUT_SP_SOAP_PROFILE))) {          isSOAPInitiated=true;        }        int retStatus=handleMultiProtocolLogout(isSOAPInitiated,null,remoteEntityId);        if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {          return;        } else {          if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {            logoutStatus=false;          }        }      }      if (logoutStatus) {        FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,true,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);      }      return;    }  } catch (  IDFFMetaException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Unable to get LRURL. " + "No location to redirect. processing completed");    }    String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REDIRECT_FAILED)};    LogUtil.error(Level.INFO,LogUtil.LOGOUT_REDIRECT_FAILED,data,ssoToken);  }catch (  Exception ex) {    String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REDIRECT_FAILED)};    LogUtil.error(Level.INFO,LogUtil.LOGOUT_REDIRECT_FAILED,data,ssoToken);  }}  }
class C{  @SuppressWarnings("unchecked") private static <P_IN>Spliterator<P_IN> sliceSpliterator(StreamShape shape,Spliterator<P_IN> s,long skip,long limit){  assert s.hasCharacteristics(Spliterator.SUBSIZED);  long sliceFence=calcSliceFence(skip,limit);switch (shape) {case REFERENCE:    return new StreamSpliterators.SliceSpliterator.OfRef<>(s,skip,sliceFence);case INT_VALUE:  return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfInt((Spliterator.OfInt)s,skip,sliceFence);case LONG_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfLong((Spliterator.OfLong)s,skip,sliceFence);case DOUBLE_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfDouble((Spliterator.OfDouble)s,skip,sliceFence);default :throw new IllegalStateException("Unknown shape " + shape);}}  }
class C{  @Override public StateInteractive left_button_clicked(PlaPointFloat p_location){  r_brd.end_notify_observers();  actlog_start_scope(LogfileScope.COMPLETE_SCOPE);  for (  int curr_net_no : route_support.net_nos) {    i_brd.update_ratsnest(curr_net_no);  }  return this.return_state;}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  void afterOpen(WriteableTransaction txn,boolean createOnDemand) throws StorageRuntimeException {}  }
class C{  public void unlockSwipe(String... id){  setLockSwipe(false,id);}  }
class C{  protected void fillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  float g=0;  int rowLimit=off + w;  float initConst=(dgdX * x) + gc;  for (int i=0; i < h; i++) {    g=initConst + dgdY * (y + i);    while (off < rowLimit) {      pixels[off++]=indexIntoGradientsArrays(g);      g+=dgdX;    }    off+=adjust;    rowLimit=off + w;  }}  }
class C{  public boolean delete(Long attributeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_EXTERNALATTRIBUTEID + "=" + attributeID,null) > 0;}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public static MethodHandle identity(Class<?> type){  Wrapper btw=(type.isPrimitive() ? Wrapper.forPrimitiveType(type) : Wrapper.OBJECT);  int pos=btw.ordinal();  MethodHandle ident=IDENTITY_MHS[pos];  if (ident == null) {    ident=setCachedMethodHandle(IDENTITY_MHS,pos,makeIdentity(btw.primitiveType()));  }  if (ident.type().returnType() == type)   return ident;  assert (btw == Wrapper.OBJECT);  return makeIdentity(type);}  }
class C{  public CallIDParser(String callID){  super(callID);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.InformalNameElement createInformalNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.InformalNameElementImpl();}  }
class C{  public FREE_MEM(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(100);  sb.append("IdSearchControl:");  sb.append("\n\tReturnAllAttributes: ").append(getAllAttributesEnabled);  sb.append("\n\tReturn Attributes: ").append(returnAttributes);  sb.append("\n\tTimeout=").append(timeOut);  sb.append("\n\tMaxResults=").append(maxResults);  sb.append("\n\tOperator: ").append(modifier);  sb.append("\n\tSearchAttrs: ").append(avPairs);  return (sb.toString());}  }
class C{  public SecretKeySpec(byte[] key,int offset,int len,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (len < 0 || offset < 0) {    throw new ArrayIndexOutOfBoundsException("len < 0 || offset < 0");  }  if (key.length - offset < len) {    throw new IllegalArgumentException("key too short");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[len];  System.arraycopy(key,offset,this.key,0,len);}  }
class C{  public static String bytesToHex(byte[] b){  if (b == null || b.length == 0) {    return "";  }  int arrayLength=b.length;  StringBuilder buffer=new StringBuilder((arrayLength - 1) * 3 + 2);  buffer.append(byteToHex(b[0]));  for (int i=1; i < arrayLength; i++) {    buffer.append(" ");    buffer.append(byteToHex(b[i]));  }  return buffer.toString();}  }
class C{  @Override protected void add_to_list(PrintableInfo p_object){  String curr_filter_string=this.filter_string.getText().trim();  boolean object_matches;  if (curr_filter_string.length() == 0) {    object_matches=true;  } else {    object_matches=p_object.toString().contains(curr_filter_string);  }  if (object_matches) {    super.add_to_list(p_object);  }}  }
class C{  public final void testWriteReplace() throws Exception {  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Object obj=c1.writeReplace();  assertTrue(obj.toString().contains("java.security.cert.Certificate$CertificateRep"));}  }
class C{  public boolean checkError(){  Writer delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  public static int countAll(){  return getPersistence().countAll();}  }
class C{  public ServicesSelectViewBean(){  super("ServicesSelect");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public boolean isEmpty(){  return startPoint == null;}  }
class C{  public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  boolean isFilterUseEnabled(){  return filterUseEnabled;}  }
class C{  public int expandCode(byte[] buf,int offset,short code,int skipHead){  if (offset == -2) {    if (skipHead == 1)     skipHead=0;  }  if (code == -1 || skipHead == strLen_[code])   return 0;  int expandLen;  int codeLen=strLen_[code] - skipHead;  int bufSpace=buf.length - offset;  if (bufSpace > codeLen)   expandLen=codeLen; else   expandLen=bufSpace;  int skipTail=codeLen - expandLen;  int idx=offset + expandLen;  while ((idx > offset) && (code != -1)) {    if (--skipTail < 0) {      buf[--idx]=strChr_[code];    }    code=strNxt_[code];  }  if (codeLen > expandLen)   return -expandLen; else   return expandLen;}  }
class C{  public void ensureCapacity(int minCapacity){  delegate.ensureCapacity(minCapacity);}  }
class C{  public JScrollBar createHorizontalScrollBar(){  return new ScrollBar(JScrollBar.HORIZONTAL);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS12.class,args);}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  private void resetMnemonics(){  if (mnemonicToIndexMap != null) {    mnemonicToIndexMap.clear();    mnemonicInputMap.clear();  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  protected void doSessions(ContextName cn,HttpServletRequest req,HttpServletResponse resp,StringManager smClient) throws ServletException, IOException {  req.setAttribute("path",cn.getPath());  req.setAttribute("version",cn.getVersion());  String action=req.getParameter("action");  if (debug >= 1) {    log("sessions: Session action '" + action + "' for web application '"+ cn.getDisplayName()+ "'");  }  if ("sessionDetail".equals(action)) {    String sessionId=req.getParameter("sessionId");    displaySessionDetailPage(req,resp,cn,sessionId,smClient);    return;  } else   if ("invalidateSessions".equals(action)) {    String[] sessionIds=req.getParameterValues("sessionIds");    int i=invalidateSessions(cn,sessionIds,smClient);    req.setAttribute(APPLICATION_MESSAGE,"" + i + " sessions invalidated.");  } else   if ("removeSessionAttribute".equals(action)) {    String sessionId=req.getParameter("sessionId");    String name=req.getParameter("attributeName");    boolean removed=removeSessionAttribute(cn,sessionId,name,smClient);    String outMessage=removed ? "Session attribute '" + name + "' removed." : "Session did not contain any attribute named '" + name + "'";    req.setAttribute(APPLICATION_MESSAGE,outMessage);    displaySessionDetailPage(req,resp,cn,sessionId,smClient);    return;  }  displaySessionsListPage(cn,req,resp,smClient);}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  setupBounds(w,h);  setupPaints();  invalidate();}  }
class C{  public IconUIResource(Icon delegate){  if (delegate == null) {    throw new IllegalArgumentException("null delegate icon argument");  }  this.delegate=delegate;}  }
class C{  public SearchResultEntry(Entry entry){  super(entry.getName(),entry.getObjectClasses(),entry.getUserAttributes(),entry.getOperationalAttributes());  this.controls=new ArrayList<>(0);}  }
class C{  private void updateStateFromEntry(SearchResultEntry resultEntry){  AttributeType synchronizationStateType=DirectoryServer.getSchema().getAttributeType(REPLICATION_STATE);  List<Attribute> attrs=resultEntry.getAllAttributes(synchronizationStateType);  if (!attrs.isEmpty()) {    for (    ByteString value : attrs.get(0)) {      update(new CSN(value.toString()));    }  }}  }
class C{  public void paintColorChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS01.class,args);}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AttributeAuthorityConfigElement createAttributeAuthorityConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeAuthorityConfigElementImpl();}  }
class C{  public synchronized Enumeration elements(){  return new Enumerator(VALUES,false);}  }
class C{  public Description(Element elem) throws DiscoveryException {  if (elem == null) {    DiscoUtils.debug.message("Description(Element): null input.");    throw new DiscoveryException(DiscoUtils.bundle.getString("nullInput"));  }  String nodeName;  String nameSpaceURI;  if (((nodeName=elem.getLocalName()) == null) || (!nodeName.equals("Description")) || ((nameSpaceURI=elem.getNamespaceURI()) == null)|| (!nameSpaceURI.equals(DiscoConstants.DISCO_NS))) {    DiscoUtils.debug.message("Description(Element): wrong input");    throw new DiscoveryException(DiscoUtils.bundle.getString("wrongInput"));  }  id=elem.getAttribute("id");  NodeList contentnl=elem.getChildNodes();  Node child;  for (int i=0, length=contentnl.getLength(); i < length; i++) {    child=contentnl.item(i);    if ((nodeName=child.getLocalName()) != null) {      nameSpaceURI=((Element)child).getNamespaceURI();      if ((nameSpaceURI == null) || (!nameSpaceURI.equals(DiscoConstants.DISCO_NS))) {        if (DiscoUtils.debug.messageEnabled()) {          DiscoUtils.debug.message("Description(Element): " + "invalid namespace for node " + nodeName);        }        throw new DiscoveryException(DiscoUtils.bundle.getString("wrongInput"));      }      if (nodeName.equals("SecurityMechID")) {        String mID=XMLUtils.getElementValue((Element)child);        if ((mID == null) || (mID.length() == 0)) {          if (DiscoUtils.debug.messageEnabled()) {            DiscoUtils.debug.message("Description(Element): " + "missing SecurityMechID value.");          }          throw new DiscoveryException(DiscoUtils.bundle.getString("emptyElement"));        }        if (mechID == null) {          mechID=new ArrayList();        }        mechID.add(mID);      } else       if (nodeName.equals("CredentialRef")) {        String ref=XMLUtils.getElementValue((Element)child);        if ((ref == null) || (ref.length() == 0)) {          if (DiscoUtils.debug.messageEnabled()) {            DiscoUtils.debug.message("Description(Element): " + "missing CredentialRef value.");          }          throw new DiscoveryException(DiscoUtils.bundle.getString("emptyElement"));        }        if (credentialRef == null) {          credentialRef=new ArrayList();        }        credentialRef.add(ref);      } else       if (nodeName.equals("Endpoint")) {        parseEndpoint((Element)child);      } else       if (nodeName.equals("SoapAction")) {        parseSoapAction((Element)child);      } else       if (nodeName.equals("WsdlURI")) {        parseWsdlURI((Element)child);      } else       if (nodeName.equals("ServiceNameRef")) {        parseServiceNameRef((Element)child);      } else {        if (DiscoUtils.debug.messageEnabled()) {          DiscoUtils.debug.message("Description(Element): " + "invalid node" + nodeName);        }        throw new DiscoveryException(DiscoUtils.bundle.getString("wrongInput"));      }    }  }  if ((mechID == null) || (mechID.size() == 0)) {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("ServiceInstance(Element): missing " + "SecurityMechID element.");    }    throw new DiscoveryException(DiscoUtils.bundle.getString("missingSecurityMechID"));  }  if ((soapEndpoint == null) && (wsdlURI == null)) {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("ServiceInstance(Element): missing " + "WsdlRef or BriefSoapHttpDescription.");    }    throw new DiscoveryException(DiscoUtils.bundle.getString("missingWsdlOrBrief"));  }}  }
class C{  public CredentialNotFoundException(){  super();}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public static Attribute empty(String attributeName){  return empty(getSchema().getAttributeType(attributeName),attributeName);}  }
class C{  static <T>T find(Class<T> type,String factoryId,ClassLoader cl,String fallbackClassName) throws FactoryConfigurationError {  dPrint("find factoryId =" + factoryId);  try {    final String systemProp;    if (type.getName().equals(factoryId)) {      systemProp=ss.getSystemProperty(factoryId);    } else {      systemProp=System.getProperty(factoryId);    }    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(type,systemProp,cl,true);    }  } catch (  SecurityException se) {    throw new FactoryConfigurationError("Failed to read factoryId '" + factoryId + "'",se);  }  String configFile=null;  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "stax.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          } else {            configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";            f=new File(configFile);            if (ss.doesFileExist(f)) {              dPrint("Read properties file " + f);              cacheProps.load(ss.getFileInputStream(f));            }          }        }      }    }    final String factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in " + configFile + " value="+ factoryClassName);      return newInstance(type,factoryClassName,cl,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  if (type.getName().equals(factoryId)) {    final T provider=findServiceProvider(type,cl);    if (provider != null) {      return provider;    }  } else {    assert fallbackClassName == null;  }  if (fallbackClassName == null) {    throw new FactoryConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(type,fallbackClassName,cl,true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl();}  }
class C{  public boolean isSuperscript(){  sync();  return superscript;}  }
class C{  public String now(){  return new DateTime(chrono).toString();}  }
class C{  private boolean isSchemaFileDefined(String schemaFile){  try (LDIFReader reader=new LDIFReader(new LDIFImportConfig(schemaFile))){    return reader.readEntry() != null;  } catch (  Throwable t) {    return false;  }}  }
class C{  public void testAddDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1231212478987482988429808779810457634781459480137916301878791834798.7234564568";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public SubCommand(SubCommandArgumentParser parser,String name,boolean allowsTrailingArguments,int minTrailingArguments,int maxTrailingArguments,String trailingArgsDisplayName,LocalizableMessage description) throws ArgumentException {  this.parser=parser;  this.name=name;  this.description=description;  this.allowsTrailingArguments=allowsTrailingArguments;  this.minTrailingArguments=minTrailingArguments;  this.maxTrailingArguments=maxTrailingArguments;  this.trailingArgsDisplayName=trailingArgsDisplayName;  this.isHidden=false;  String nameToCheck=name;  if (parser.longArgumentsCaseSensitive()) {    nameToCheck=toLowerCase(name);  }  if (parser.hasSubCommand(nameToCheck)) {    LocalizableMessage message=ERR_ARG_SUBCOMMAND_DUPLICATE_SUBCOMMAND.get(name);    throw new ArgumentException(message);  }  parser.addSubCommand(this);}  }
class C{  public void layoutChanged(int axis){  if (axis == majorAxis) {    majorAllocValid=false;  } else {    minorAllocValid=false;  }}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public void addCertificates(Store certStore) throws CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));}  }
class C{  private int rotateWordLeft(int x,int y){  x&=0xffff;  return (x << y) | (x >> (16 - y));}  }
class C{  public void endPrefixMapping(String prefix){}  }
class C{  @Override public void submitOperation(Operation operation) throws DirectoryException {  if (shutdownRequested) {    LocalizableMessage message=WARN_OP_REJECTED_BY_SHUTDOWN.get();    throw new DirectoryException(ResultCode.UNAVAILABLE,message);  }  opQueue.add(operation);  queueSemaphore.release();  opsSubmitted.incrementAndGet();}  }
class C{  public String toString(){  return "" + value;}  }
class C{  public StringCharacterIterator(String text){  this(text,0);}  }
class C{  public ResultIterable removeNotMatchingEntries(Collection<String> ids){  Iterator<ResultEntry> entryIter=this.iterator();  Set<String> newIds=new LinkedHashSet<String>();  JsonValue newObjList=null;  if (this.values != null) {    newObjList=new JsonValue(new LinkedList<>());    while (ids.size() > 0 && entryIter.hasNext()) {      ResultEntry entry=entryIter.next();      String id=entry.getId();      if (ids.contains(id)) {        newIds.add(id);        newObjList.add(entry.getValue());        ids.remove(id);      }    }  } else {    newIds.addAll(ids);  }  return new ResultIterable(Collections.synchronizedSet(newIds),newObjList);}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  private static RetainFragment findOrCreateRetainFragment(android.support.v4.app.FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  public boolean read_scope(DsnReadScopeParameters p_par){  boolean flip_style_rotate_first=false;  Object next_token=null;  for (; ; ) {    Object prev_token=next_token;    try {      next_token=p_par.scanner.next_token();    } catch (    java.io.IOException e) {      System.out.println("PlaceControl.read_scope: IO error scanning file");      return false;    }    if (next_token == null) {      System.out.println("PlaceControl.read_scope: unexpected end of file");      return false;    }    if (next_token == CLOSED_BRACKET) {      break;    }    if (prev_token == OPEN_BRACKET) {      if (next_token == DsnKeyword.FLIP_STYLE) {        flip_style_rotate_first=read_flip_style_rotate_first(p_par.scanner);      }    }  }  if (flip_style_rotate_first) {    p_par.i_board.get_routing_board().brd_components.set_flip_style_rotate_first(true);  }  return true;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Log.d(TAG,"FMRadio onCreate initPsensorManager()");  if (isFmRadioGestureSupport()) {    initPsensorManager();  }  Log.i(TAG,"FmRadioActivity.onCreate start");  setVolumeControlStream(AudioManager.STREAM_MUSIC);  setContentView(R.layout.main);  mFragmentManager=getFragmentManager();  mContext=getApplicationContext();  FmRadioStation.initFmDatabase(mContext);  mProjectStringExt=ExtensionUtils.getExtension(mContext);  initUiComponent();  registerButtonClickListener();  registerSdcardReceiver();  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  Log.d(TAG,"FmRadioActivity.onCreate end");}  }
class C{  public TimeUnit timeUnit(){  return timeUnit;}  }
class C{  protected AlertProtocol(){}  }
class C{  private CreateComponentCallback(AggregationPropertyDefinition<C,S> pd){  this.pd=pd;}  }
class C{  private String findIDPMetaAlias(String idpEntityID,String spEntityID,String realm,String protocol){  try {    WSFederationMetaManager metaManager=WSFederationUtils.getMetaManager();    List hostedIdps=metaManager.getAllHostedIdentityProviderEntities(realm);    if (debug.messageEnabled()) {      debug.message("WSFedSingleLogoutHandler.findIDPMetaAlias: " + " all hosted WS-Fed IDPs = " + hostedIdps);    }    if ((hostedIdps == null) || hostedIdps.isEmpty()) {      return null;    }    CircleOfTrustManager cotManager=new CircleOfTrustManager();    Set cots=cotManager.getAllActiveCirclesOfTrust(realm);    int num=hostedIdps.size();    for (int i=0; i < num; i++) {      String idpId=(String)hostedIdps.get(i);      Iterator it=cots.iterator();      while (it.hasNext()) {        String cotName=(String)it.next();        if (debug.messageEnabled()) {          debug.message("WSFedSLOHandler.findIDPMetaAlias: " + " check COT = " + cotName);        }        Set providers=cotManager.listCircleOfTrustMember(realm,cotName,SingleLogoutManager.WS_FED);        if ((providers == null) || !providers.contains(idpId)) {          continue;        }        providers=cotManager.listCircleOfTrustMember(realm,cotName,protocol);        if ((providers == null) || !providers.contains(idpEntityID)) {          continue;        }        if ((spEntityID != null) && (spEntityID.length() != 0) && !providers.contains(spEntityID)) {          continue;        }        if (SingleLogoutManager.debug.messageEnabled()) {          SingleLogoutManager.debug.message("WSFedSingleLogoutHandler.findIDPMetaAlias : " + "found IDP " + idpId + " in COT "+ cotName);        }        IDPSSOConfigElement config=metaManager.getIDPSSOConfig(realm,idpId);        return config.getMetaAlias();      }    }  } catch (  Exception e) {    SingleLogoutManager.debug.error("WSFederationSingleLogoutHandler." + "findIDPMetaAlias",e);  }  return null;}  }
class C{  public void createBufferStrategy(int numBuffers,BufferCapabilities caps) throws AWTException {  super.createBufferStrategy(numBuffers,caps);}  }
class C{  public static double subAmounts(final double n1,final double n2){  final BigDecimal b1=new BigDecimal(n1);  final BigDecimal b2=new BigDecimal(n2);  BigDecimal b3=b1.subtract(b2);  b3=b3.setScale(3,BigDecimal.ROUND_HALF_UP);  final double result=b3.doubleValue();  return result;}  }
class C{  @Override public StateInteractive complete(){  add_corner_for_snap_angle();  int corner_count=corner_list.size();  boolean construction_succeeded=(corner_count > 2);  if (construction_succeeded) {    PlaPointIntAlist corner_arr=new PlaPointIntAlist(corner_count);    for (    PlaPointInt a_point : corner_list)     corner_arr.add(a_point);    ShapePolygon obstacle_shape=new ShapePolygon(corner_arr);    int cl_class=BoardRules.clearance_null_idx;    ShapeTile[] tiles=obstacle_shape.split_to_convex();    if (tiles == null) {      construction_succeeded=false;    } else {      construction_succeeded=r_brd.check_shape(tiles,i_brd.itera_settings.layer_no,NetNosList.EMPTY,cl_class);    }    if (construction_succeeded) {      r_brd.start_notify_observers();      r_brd.generate_snapshot();      r_brd.insert_obstacle(obstacle_shape,i_brd.itera_settings.layer_no,cl_class,board.varie.ItemFixState.UNFIXED);      r_brd.end_notify_observers();      r_brd.end_notify_observers();    }  }  if (construction_succeeded) {    i_brd.screen_messages.set_status_message(resources.getString("keepout_successful_completed"));  } else {    i_brd.screen_messages.set_status_message(resources.getString("keepout_cancelled_because_of_overlaps"));  }  actlog_start_scope(LogfileScope.COMPLETE_SCOPE);  return return_state;}  }
class C{  public void applyModification(Modification mod) throws DirectoryException {  applyModification(mod,false);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("StandardService[");  sb.append(getName());  sb.append("]");  return (sb.toString());}  }
class C{  public void updateStandardIndex(IndexDescriptor index){  standardIndexPanel.update(index);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,standardIndexPanel.getTitle().toString());}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(currentNode);  if (dtm != null) {    int expType=dtm.getExpandedTypeID(currentNode);    return execute(xctxt,currentNode,dtm,expType);  }  return NodeTest.SCORE_NONE;}  }
class C{  public Map createAuthnRequest(Map headers,String LRURL,String authLevel,String metaAlias,String remoteEntityID,boolean isFedCookiePresent) throws FSLoginHelperException {  Map retHeaderMap=new HashMap();  setMetaInfo(metaAlias,authLevel);  FSUtils.debug.message("FSLoginHelper.createAuthnRequest(): called");  FSAuthnRequest authnRequest=null;  if (remoteEntityID != null) {    authnRequest=getAuthnReq(headers,LRURL,true);  } else {    authnRequest=getAuthnReq(headers,LRURL,false);  }  if (authnRequest == null) {    FSUtils.debug.error("FSLoginHelper.createAuthnRequest()::AuthnRequest is null");    String redirectURL=errorPage + "&" + IFSConstants.FEDERROR+ "="+ URLEncDec.encode("Unable to create AuthnRequest")+ "&"+ IFSConstants.FEDREMARK+ "="+ URLEncDec.encode("Please check your Federation Configuration.");    return createMap(redirectURL,null,retHeaderMap);  }  String requestID=authnRequest.getRequestID();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLoginHelper.createAuthnRequest()::RequestID: " + requestID);  }  FSSessionManager sessMngr=FSSessionManager.getInstance(metaAlias);  sessMngr.setAuthnRequest(requestID,authnRequest);  sessMngr.setIDPEntityID(requestID,remoteEntityID);  String redirectURL=null;  boolean isSingleIDP=true;  boolean isSSO=false;  Set idpSet=getIDPs(metaAlias);  if (remoteEntityID == null) {    isSSO=true;  }  if (idpSet.size() > 1) {    isSingleIDP=false;  }  if (isLECPProfile(headers)) {    FSUtils.debug.message("FSLoginHelper.createAuthnRequest():LECP Request Identified");    retHeaderMap.put("content-type",IFSConstants.LECP_CONTENT_TYPE_HEADER);    String responseData=null;    try {      FSAuthnRequestEnvelope authnRequestEnvelope=null;      boolean isPassive=false;      FSIDPList idpList=null;      String assertionConsumerURL=FSServiceUtils.getAssertionConsumerServiceURL(hostDescriptor,null);      List idpEntryList=null;      String idpID=null;      String idpName=null;      String idpLocation=null;      Iterator iter=idpSet.iterator();      while (iter.hasNext()) {        idpID=(String)iter.next();        if (idpID != null) {          IDPDescriptorType idpDescr=metaManager.getIDPDescriptor(realm,idpID);          idpLocation=idpDescr.getSingleSignOnServiceURL();          if (idpEntryList == null) {            idpEntryList=new ArrayList();          }          idpEntryList.add(new IDPEntry(idpID,idpID,idpLocation));        }      }      IDPEntries idpEntries=new IDPEntries(idpEntryList);      idpList=new FSIDPList(idpEntries,null);      int minorVersion=FSServiceUtils.getMinorVersion(hostDescriptor.getProtocolSupportEnumeration());      idpList.setMinorVersion(minorVersion);      authnRequest.setMinorVersion(minorVersion);      if (FSServiceUtils.isSigningOn()) {        if (hostDescriptor.isAuthnRequestsSigned()) {          authnRequest.signXML(IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.SIGNING_CERT_ALIAS));        }      }      authnRequestEnvelope=new FSAuthnRequestEnvelope(authnRequest,hostEntityID,hostEntityID,assertionConsumerURL,idpList,isPassive);      authnRequestEnvelope.setMinorVersion(minorVersion);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSLoginHelper.createAuthnRequest: " + "AuthnRequestEnvelope: " + authnRequestEnvelope.toXMLString());      }      responseData=authnRequestEnvelope.toXMLString();    } catch (    Exception e) {      FSUtils.debug.error("FSLoginHelper.createAuthnRequest(): " + "Exception Occured: " + e.getMessage());    }    Map retMap=createMap(null,responseData,retHeaderMap);    retMap.put(authnReqIDKey,requestID);    return retMap;  }  String tldURL=getTLDURL();  if (isSSO && tldURL != null && !isSingleIDP) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLoginHelper:: createAuthnRequest " + "In case where isSSO true and tldURL is true and not " + "single idp. So redirecting to thirdlevel domain");    }    redirectURL=tldURL + "?" + IFSConstants.LRURL+ "="+ URLEncDec.encode(interSiteURL + "?" + authnReqIDKey+ "="+ URLEncDec.encode(requestID)+ "&"+ IFSConstants.META_ALIAS+ "="+ metaAlias);  } else   if (isSSO && !isSingleIDP) {    if (FSUtils.debug.messageEnabled())     FSUtils.debug.message("FSLoginHelper:: createAuthnRequest " + " In case where isSSO true and not a single idp so have " + "show common login page");    Map retMap=createMap(null,null,retHeaderMap);    retMap.put(authnReqIDKey,requestID);    return retMap;  } else {    boolean noIDP=false;    if (remoteEntityID == null) {      if (idpSet != null && idpSet.size() > 0) {        remoteEntityID=(String)idpSet.iterator().next();      } else {        FSUtils.debug.error("FSLoginHelper:: no idps found in config." + " Cannot proceed.");        redirectURL=errorPage + "&" + IFSConstants.FEDERROR+ "="+ URLEncDec.encode("No IDPs Found in Configuration.")+ "&"+ IFSConstants.FEDREMARK+ "="+ URLEncDec.encode("Please configure you Federation Services for an IDP.");        noIDP=true;      }    }    if (!noIDP) {      String succintID=FSUtils.generateSourceID(remoteEntityID);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSLoginHelper:: createAuthnRequest " + " Redirecting to intersiteTransfer URL " + interSiteURL + " with providerID and Base64 encoded SuccintID. "+ remoteEntityID+ "---"+ succintID);      }      if (!isFedCookiePresent) {        if (actionOnNoFedCookie.equals(IFSConstants.COMMON_LOGIN)) {          Map retMap=createMap(null,null,retHeaderMap);          retMap.put(authnReqIDKey,requestID);          return retMap;        } else         if (actionOnNoFedCookie.equals(IFSConstants.ACTIVE)) {          changeToPassiveAuthnRequest(requestID,false,metaAlias);        } else {          changeToPassiveAuthnRequest(requestID,true,metaAlias);        }      }      String providerID=FSUtils.stringToBase64(succintID);      redirectURL=interSiteURL + "?" + authnReqIDKey+ "="+ URLEncDec.encode(requestID)+ "&"+ providerIDKey+ "="+ URLEncDec.encode(providerID)+ "&"+ IFSConstants.META_ALIAS+ "="+ metaAlias;    }  }  if (isPassiveQuery) {    changeToPassiveAuthnRequest(requestID,true,metaAlias);  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLoginHelper.createAuthnRequest()::" + "redirectURL : " + redirectURL);  }  if (isWMLProfile(headers)) {    retHeaderMap.put("content-type","text/vnd.wap.wml");  } else {    retHeaderMap.put("content-type","text/html");  }  Map retMap=createMap(redirectURL,null,retHeaderMap);  retMap.put(authnReqIDKey,requestID);  return retMap;}  }
class C{  public InterruptedIOException(){}  }
class C{  public UndoObjectStorable read_next(Iterator<UndoObjectNode> p_iter){  try {    while (p_iter.hasNext()) {      UndoObjectNode curr_node=p_iter.next();      if (curr_node.undo_level <= stack_level)       return (curr_node.object);    }  } catch (  Exception exc) {    System.err.println(classname + "read_object: exc=" + exc);  }  return null;}  }
class C{  public void testWatchdogDoesNotFailForObjectsThatAreNearTheDeadline() throws Exception {  CountDownLatch latch=new CountDownLatch(5);  createSlowFinalizer(1,latch);  createSlowFinalizer(1000,latch);  createSlowFinalizer(2000,latch);  createSlowFinalizer(4000,latch);  createSlowFinalizer(8000,latch);  FinalizationTester.induceFinalization();  assertTrue(latch.await(20,TimeUnit.SECONDS));}  }
class C{  public boolean before(Date when){  return getMillisOf(this) < getMillisOf(when);}  }
class C{  public void runTest() throws Throwable {  String localName="domestic";  String namespaceURI="http://www.nomatch.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  static void saveException(Exception ex){  StringWriter sw=new StringWriter();  ex.printStackTrace(new PrintWriter(sw));  initSecondaryError=sw.toString();}  }
class C{  public JsonValue query(QueryFilter<CoreTokenField> query) throws CoreTokenException {  Collection<Token> tokens=cts.query(new TokenFilterBuilder().withQuery(query).build());  return convertResults(tokens);}  }
class C{  public EGLSurface createOffscreenSurface(int width,int height){  int[] surfaceAttribs={EGL14.EGL_WIDTH,width,EGL14.EGL_HEIGHT,height,EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreatePbufferSurface(mEGLDisplay,mEGLConfig,surfaceAttribs,0);  checkEglError("eglCreatePbufferSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  public static String keyAlgorithm(String algorithm){  int index=algorithm.indexOf('_');  if (index == -1) {    return algorithm;  }  return algorithm.substring(0,index);}  }
class C{  @Override public boolean accept(File dir,String name){  for (  String name2 : names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  public static String toPem(Object object) throws Exception {  StringWriter sw=new StringWriter();  PEMWriter pw=new PEMWriter(sw);  pw.writeObject(object);  pw.flush();  return sw.toString();}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static boolean isAccessLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isAccessLoggable(level);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  UMUserResourceOfferingModel model=(UMUserResourceOfferingModel)getModel();  String userId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);  DiscoveryDataCache cache=DiscoveryDataCache.getInstance();  String cacheID=(String)getPageSessionAttribute(UMUserResourceOfferingViewBean.DATA_ID);  SMDiscoveryServiceData smEntry=cache.getData(model.getUserSSOToken(),cacheID);  try {    model.setUserDiscoEntry(userId,smEntry);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardToServicesViewBean();}  }
class C{  PermissionsHash(){  permsMap=new HashMap<Permission,Permission>(11);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory kMF;  for (int i=0; i < validValues.length; i++) {    kMF=KeyManagerFactory.getInstance(validValues[i],defaultProvider);    assertNotNull("No KeyManagerFactory created",kMF);    assertEquals(kMF.getAlgorithm(),validValues[i]);    assertEquals(kMF.getProvider(),defaultProvider);  }}  }
class C{  public void testClose() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos){  };  cos.write(data);  cos.close();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream did not flush the data.");  }  assertTrue("The close() method should call the close() method " + "of its underlying output stream.",tos.wasClosed());}  }
class C{  public void add(TrayIcon trayIcon) throws AWTException {  if (trayIcon == null) {    throw new NullPointerException("adding null TrayIcon");  }  TrayIcon[] oldArray=null, newArray=null;  Vector<TrayIcon> icons=null;synchronized (this) {    oldArray=systemTray.getTrayIcons();    icons=(Vector<TrayIcon>)AppContext.getAppContext().get(TrayIcon.class);    if (icons == null) {      icons=new Vector<TrayIcon>(3);      AppContext.getAppContext().put(TrayIcon.class,icons);    } else     if (icons.contains(trayIcon)) {      throw new IllegalArgumentException("adding TrayIcon that is already added");    }    icons.add(trayIcon);    newArray=systemTray.getTrayIcons();    trayIcon.setID(++currentIconID);  }  try {    trayIcon.addNotify();  } catch (  AWTException e) {    icons.remove(trayIcon);    throw e;  }  firePropertyChange("trayIcons",oldArray,newArray);}  }
class C{  @Override public void cancelAllOperations(CancelRequest cancelRequest){synchronized (opsInProgressLock) {    try {      for (      Operation o : operationsInProgress.values()) {        try {          o.abort(cancelRequest);          if (keepStats) {            statTracker.updateAbandonedOperation();          }        } catch (        Exception e) {          logger.traceException(e);        }      }      if (!operationsInProgress.isEmpty() || !getPersistentSearches().isEmpty()) {        lastCompletionTime.set(TimeThread.getTime());      }      operationsInProgress.clear();      for (      PersistentSearch persistentSearch : getPersistentSearches()) {        persistentSearch.cancel();      }    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public final void testGetPublic02() throws InvalidKeySpecException {  PublicKey pk=TestKeyPair.getPublic();  KeyPair kp=new KeyPair(pk,null);  assertSame(pk,kp.getPublic());}  }
class C{  public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(this.content.clone());  return verificationEngine.verify(this.signature.clone());}  }
class C{  public Matrix(float a,float b,float c,float d,float e,float f){  vals[I11]=a;  vals[I12]=b;  vals[I13]=0;  vals[I21]=c;  vals[I22]=d;  vals[I23]=0;  vals[I31]=e;  vals[I32]=f;  vals[I33]=1;}  }
class C{  public void mouseReleased(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  manager.processMouseEvent(e);  if (!e.isConsumed())   manager.clearSelectedPath();}  }
class C{  public PlaLineInt mirror_horizontal(PlaPointInt p_pole){  PlaPointInt new_a=point_b.mirror_horizontal(p_pole);  PlaPointInt new_b=point_a.mirror_horizontal(p_pole);  return new PlaLineInt(new_a,new_b);}  }
class C{  void dumpAsTextFiles() throws ChangelogException {  log.dumpAsTextFile(log.getPath());}  }
class C{  private void copyTables(){  if (prefixTable != null) {    prefixTable=new HashMap<>(prefixTable);  } else {    prefixTable=new HashMap<>();  }  if (uriTable != null) {    uriTable=new HashMap<>(uriTable);  } else {    uriTable=new HashMap<>();  }  elementNameTable=new HashMap<>();  attributeNameTable=new HashMap<>();  declSeen=true;}  }
class C{  private JsonValue deleteGroup(String id) throws Exception {  System.out.println("1. Delete a group:");  HttpResponse<String> response=Unirest.delete(azureEndpoint + "/group/" + id).header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").asString();  return json(readJson(response.getBody()));}  }
class C{  public AsyncExecutor(){  this.streamHandler=new PumpStreamHandler();  this.launcher=CommandLauncherFactory.createVMLauncher();  this.exitValues=new int[0];}  }
class C{  @Override public String toString(){  return value;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  public final void testGetG(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(4,dpks.getG().intValue());}  }
class C{  public static DigestMD5SASLBindRequest unmodifiableDigestMD5SASLBindRequest(final DigestMD5SASLBindRequest request){  if (request instanceof UnmodifiableDigestMD5SASLBindRequestImpl) {    return request;  }  return new UnmodifiableDigestMD5SASLBindRequestImpl(request);}  }
class C{  public int hashCode(){  return op.hashCode();}  }
class C{  @Override public int doEndTag() throws JspException {  return super.doEndTag();}  }
class C{  public PasswordGeneratorConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  passwordGenerators=new ConcurrentHashMap<>();}  }
class C{  public final void testGetDigestAlgorithm(){  MGF1ParameterSpec aps=new MGF1ParameterSpec(testAlgName);  assertTrue(testAlgName.equals(aps.getDigestAlgorithm()));}  }
class C{  private static int determineType(InputStream is) throws IOException {  byte[] magicBytes=new byte[8];  int b;  long index=-1;  boolean bom=false;  do {    if (is.markSupported())     is.mark(16);    b=is.read();    index++;    bom=index < 3 && ((index == 0 && b == 0xEF) || (bom && ((index == 1 && b == 0xBB) || (index == 2 && b == 0xBF))));  } while (b != -1 && b == ' ' || b == '\t' || b == '\r' || b == '\n' || b == '\f' || bom);  magicBytes[0]=(byte)b;  int read=is.read(magicBytes,1,7);  int type=determineType(new String(magicBytes,0,read));  if (is.markSupported())   is.reset();  return type;}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  public Set entrySet(){  Set entries=super.entrySet();  HashSet set=new HashSet();  Iterator iter=entries.iterator();  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    set.add(new Entry(entry));  }  return set;}  }
class C{  private boolean isIPConstrained(byte ip[],byte[] constraint){  int ipLength=ip.length;  if (ipLength != (constraint.length / 2)) {    return false;  }  byte[] subnetMask=new byte[ipLength];  System.arraycopy(constraint,ipLength,subnetMask,0,ipLength);  byte[] permittedSubnetAddress=new byte[ipLength];  byte[] ipSubnetAddress=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    permittedSubnetAddress[i]=(byte)(constraint[i] & subnetMask[i]);    ipSubnetAddress[i]=(byte)(ip[i] & subnetMask[i]);  }  return Arrays.areEqual(permittedSubnetAddress,ipSubnetAddress);}  }
class C{  public static File derive(File self,Object tag,Object... tagN){  String name=FileUtilities.getName(self);  String extension=self.getName().substring(name.length());  if (SUBTITLE_FILES.accept(self)) {    Matcher nameMatcher=releaseInfo.getSubtitleLanguageTagPattern().matcher(name);    if (nameMatcher.find()) {      extension=name.substring(nameMatcher.start() - 1) + extension;      name=name.substring(0,nameMatcher.start() - 1);    }  }  return new File(self.getParentFile(),concat(name,concat(tag,null,tagN),extension));}  }
class C{  public static void addDefaultProfile(SpringApplication app){  Map<String,Object> defProperties=new HashMap<>();  defProperties.put(SPRING_PROFILE_DEFAULT,Constants.SPRING_PROFILE_DEVELOPMENT);  app.setDefaultProperties(defProperties);}  }
class C{  public Builder removeRequiredAttribute(String attributeNameOrOID){  this.requiredAttributes.remove(attributeNameOrOID);  return this;}  }
class C{  protected static void removeObjImplListeners(Set dnSet,SSOTokenID ssoTokenId){  if (debug.messageEnabled()) {    debug.message("In AMObjectImpl.removeObjImplListeners(..): ");  }synchronized (objImplListeners) {    Iterator dnItr=dnSet.iterator();    while (dnItr.hasNext()) {      String dn=(String)dnItr.next();      Set objSet=(Set)objImplListeners.get(dn.toLowerCase());      if (objSet == null) {        continue;      }      Iterator objItr=objSet.iterator();      while (objItr.hasNext()) {        AMObjectImpl dpObjectImpl=(AMObjectImpl)objItr.next();        SSOToken dpObjSSOToken=dpObjectImpl.getSSOToken();        if (ssoTokenId.equals(dpObjSSOToken.getTokenID())) {          objSet.remove(dpObjectImpl);        }      }      if (objSet.isEmpty()) {        objImplListeners.remove(dn);      }    }  }}  }
class C{  static public String generateOTP(byte[] secret,long movingFactor,int codeDigits,boolean addChecksum,int truncationOffset) throws NoSuchAlgorithmException, InvalidKeyException {  String result=null;  int digits=addChecksum ? (codeDigits + 1) : codeDigits;  byte[] text=new byte[8];  for (int i=text.length - 1; i >= 0; i--) {    text[i]=(byte)(movingFactor & 0xff);    movingFactor>>=8;  }  byte[] hash=hmac_sha1(secret,text);  int offset=hash[hash.length - 1] & 0xf;  if ((0 <= truncationOffset) && (truncationOffset < (hash.length - 4))) {    offset=truncationOffset;  }  int binary=((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8)| (hash[offset + 3] & 0xff);  int otp=binary % DIGITS_POWER[codeDigits];  if (addChecksum) {    otp=(otp * 10) + calcChecksum(otp,codeDigits);  }  result=Integer.toString(otp);  while (result.length() < digits) {    result="0" + result;  }  return result;}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){  foo.setNew(true);  return fooPersistence.update(foo);}  }
class C{  private ResourceIndex refreshResourceIndexFromDataStore(ServiceType resourceType) throws PolicyException {  ResourceIndex resourceIndex=getResourceIndexFromDataStore(resourceType);  resourceIndices.put(resourceType.getName(),resourceIndex);  return resourceIndex;}  }
class C{  public WmfImageData(byte[] bytes){  super(bytes,ImageType.WMF);  byte[] imageType=readImageType(url);  if (!imageTypeIs(imageType,wmf)) {    throw new PdfException(PdfException.NotAWmfImage);  }}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  int accumDefaultEntity(java.io.Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  if (!escLF && CharInfo.S_LINEFEED == ch) {    writer.write(m_lineSep,0,m_lineSepLen);  } else {    if ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch))) {      String outputStringForChar=m_charInfo.getOutputStringForChar(ch);      if (null != outputStringForChar) {        writer.write(outputStringForChar);      } else       return i;    } else     return i;  }  return i + 1;}  }
class C{  @Activate void activate(ComponentContext compContext){  logger.debug("Activating ConnectionManager Service with configuration {}",compContext.getProperties());  try {    config=enhancedConfig.getConfigurationAsJson(compContext);    configuredDataSourceService.getAndSet(initDataSourceService(config,compContext.getBundleContext()));    logger.info("JDBCConnectionManager started.");  } catch (  RuntimeException e) {    logger.warn("Configuration invalid and could not be parsed, can not start JDBC repository: ",e);    throw e;  }}  }
class C{  boolean connectionArgumentsPresent(){  if (isPurgeHistoricalSubcommand()) {    boolean secureArgsPresent=getSecureArgsList() != null && getSecureArgsList().argumentsPresent();    boolean adminArgsPresent=getAdminUidArg().isPresent() || secureArgsList.getBindPasswordArg().isPresent() || secureArgsList.getBindPasswordFileArg().isPresent();    return secureArgsPresent || adminArgsPresent;  }  return true;}  }
class C{  @Override public void endDocument() throws SAXException {  if (saxLog.isDebugEnabled()) {    if (getCount() > 1) {      saxLog.debug("endDocument():  " + getCount() + " elements left");    } else {      saxLog.debug("endDocument()");    }  }  while (getCount() > 1) {    pop();  }  Iterator<Rule> rules=getRules().rules().iterator();  while (rules.hasNext()) {    Rule rule=rules.next();    try {      rule.finish();    } catch (    Exception e) {      log.error("Finish event threw exception",e);      throw createSAXException(e);    }catch (    Error e) {      log.error("Finish event threw error",e);      throw e;    }  }  clear();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOMTest/level2","dom:elem");{    boolean success=false;    try {      element.setAttributeNS("http://www.w3.org/DOMTest/level2","xmlns","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens08_Err1",success);  }{    boolean success=false;    try {      element.setAttributeNS("http://www.w3.org/DOMTest/level2","xmlns:root","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens08_Err2",success);  }}  }
class C{  public LinkedHashSet(int initialCapacity){  super(initialCapacity,.75f,true);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Database other=(Database)obj;  if (!Objects.equals(this.name,other.name)) {    return false;  }  if (!Objects.equals(this.description,other.description)) {    return false;  }  return true;}  }
class C{  protected void startIntentService(){  Intent intent=new Intent(this,FetchAddressIntentService.class);  intent.putExtra(Constants.RECEIVER,resultReceiver);  intent.putExtra(Constants.LOCATION_DATA_EXTRA,lastLocation);  startService(intent);}  }
class C{  public PERSIST_STORE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){  MenuKeyEvent mke=new MenuKeyEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getKeyCode(),e.getKeyChar(),path,manager);  processMenuKeyEvent(mke);  if (mke.isConsumed()) {    e.consume();  }}  }
class C{  private final void clearReferencesJdbc(){  byte[] classBytes=new byte[2048];  int offset=0;  try (InputStream is=getResourceAsStream("org/apache/catalina/loader/JdbcLeakPrevention.class")){    int read=is.read(classBytes,offset,classBytes.length - offset);    while (read > -1) {      offset+=read;      if (offset == classBytes.length) {        byte[] tmp=new byte[classBytes.length * 2];        System.arraycopy(classBytes,0,tmp,0,classBytes.length);        classBytes=tmp;      }      read=is.read(classBytes,offset,classBytes.length - offset);    }    Class<?> lpClass=defineClass("org.apache.catalina.loader.JdbcLeakPrevention",classBytes,0,offset,this.getClass().getProtectionDomain());    Object obj=lpClass.newInstance();    @SuppressWarnings("unchecked") List<String> driverNames=(List<String>)obj.getClass().getMethod("clearJdbcDriverRegistrations").invoke(obj);    for (    String name : driverNames) {      log.warn(sm.getString("webappClassLoader.clearJdbc",getContextName(),name));    }  } catch (  Exception e) {    Throwable t=ExceptionUtils.unwrapInvocationTargetException(e);    ExceptionUtils.handleThrowable(t);    log.warn(sm.getString("webappClassLoader.jdbcRemoveFailed",getContextName()),t);  }}  }
class C{  private static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  @Override public void write(int b) throws IOException {  Streams.writeSingleByte(this,b);}  }
class C{  private void writeInternal(byte[] b,int off,int len) throws IOException {  if (listener == null) {    socketWrapper.write(true,b,off,len);  } else {    socketWrapper.write(false,b,off,len);  }}  }
class C{  public void treeExpanded(TreeExpansionEvent e){  fireVisibleDataPropertyChange();  TreePath path=e.getPath();  if (path != null) {    AccessibleJTreeNode node=new AccessibleJTreeNode(JTree.this,path,null);    PropertyChangeEvent pce=new PropertyChangeEvent(node,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.COLLAPSED,AccessibleState.EXPANDED);    firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);  }}  }
class C{  public DmParams(int height,int width,int heightSection,int widthSection,int dataSize,int dataBlock,int errorBlock){  this.height=height;  this.width=width;  this.heightSection=heightSection;  this.widthSection=widthSection;  this.dataSize=dataSize;  this.dataBlock=dataBlock;  this.errorBlock=errorBlock;}  }
class C{  protected static <T extends ReplicationMsg>T waitForSpecificMsg(Session session,Class<T> msgType) throws Exception {  return (T)waitForSpecificMsgs(session,(ReplicationBroker)null,msgType);}  }
class C{  public void finalizeSubentryManager(){  DirectoryServer.deregisterInternalPlugin(this);  DirectoryServer.deregisterBackendInitializationListener(this);}  }
class C{  public PeerUnavailableException(String message){  super(message);}  }
class C{  byte[] unwrap(final byte[] bytes,final int offset,final int len) throws SaslException {  return saslServer.unwrap(bytes,offset,len);}  }
class C{  public void addXSLAttribute(String name,final String value,final String uri){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,true);  }}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public CertificateEncodingException(){  super();}  }
class C{  public NoSuchElementException(String s){  super(s);}  }
class C{  public UnmarshalException(String message,String errorCode,Throwable exception){  super(message,errorCode,exception);}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("VLVResponseControl(targetPosition=");  buffer.append(targetPosition);  buffer.append(", contentCount=");  buffer.append(contentCount);  buffer.append(", vlvResultCode=");  buffer.append(vlvResultCode);  if (contextID != null) {    buffer.append(", contextID=");    buffer.append(contextID);  }  buffer.append(")");}  }
class C{  public Set searchStaticGroups(String wildcard,int level) throws AMException, SSOException {  return searchStaticGroups(wildcard,null,level);}  }
class C{  public void testMinEqual(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    if (reconstructPolicy()) {    } else {      CachedPolicy cachedPolicy=getCachedPolicy();      PolicyModel model=(PolicyModel)getModel();      try {        model.replacePolicy(currentRealm,cachedPolicy.getPolicy());        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","policy.modified.message");        cachedPolicy.setPolicyModified(false);      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      }    }    forwardTo();  } catch (  AMConsoleException e) {    debug.warning("PolicyReferralEditViewBean.handleButton1Request",e);    redirectToStartURL();  }}  }
class C{  public WriteableChunkModifer(final WriteableChunk chunk){  this.writableChunk=chunk;}  }
class C{  public FileInfo(boolean readAvailable,@NonNull String name){  this.name=name;  this.permissions="";  this.owner="";  this.group="";  this.size=-1;  this.lastModified=-1;  this.directoryFileCount="";  this.readAvailable=readAvailable;}  }
class C{  public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  protected void fireEditingStopped(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CellEditorListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((CellEditorListener)listeners[i + 1]).editingStopped(changeEvent);    }  }}  }
class C{  public void testDivideRoundCeilingNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public KeyAlreadyExistsException(){  super();}  }
class C{  public String inverseSearchGlobal(List<String> parts){  if (parts.size() == 0) {    return null;  }  InverseStore store=inverseSearch.get(parts.get(parts.size() - 1));  if (store == null)   return null;  for (int k=parts.size() - 2; k >= 0; --k) {    String part=parts.get(k);    int idx=store.part.indexOf(part);    if (idx < 0) {      if (store.isSimilar(part))       return null;      return store.getDefaultName();    }    store=(InverseStore)store.follow.get(idx);  }  return store.getDefaultName();}  }
class C{  private void updateDataArray(){  TreeSet<TaskEntry> sortedSet=new TreeSet<>(this);  sortedSet.addAll(data);  dataSourceArray.clear();  dataSourceArray.addAll(sortedSet);}  }
class C{  public boolean isRetransmission(){  return isRetransmission;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.IDValueElement createIDValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.IDValueElementImpl();}  }
class C{  protected void log(Level level,String methodName,String message){  Object[] args={methodName,message};  logger.log(level,MessageFormat.format(logEntryTemplate,args));}  }
class C{  public void removeEditActionListener(ActionListener listener){  editButton.removeActionListener(listener);  iconButton.removeActionListener(listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI=null;  String qualifiedName="^^";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      element=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("documentcreateelementNS02",success);  }}  }
class C{  public boolean remove_via_padstack(LibPadstack p_padstack){  if (p_padstack == null)   return true;  return via_padstacks.remove(p_padstack);}  }
class C{  public boolean beginResetPageDisplay(ChildDisplayEvent event){  PWResetQuestionModel model=(PWResetQuestionModel)getModel();  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String userDN=(String)getPageSessionAttribute(USER_DN);  return isPWResetEnabled() && model.isQuestionAvailable(userDN,orgDN) && !model.isUserLockout(userDN,orgDN);}  }
class C{  public RequirementsBuilder addRequireProperty(String name,String type,String description){  addRequireProperty(name,type,description,null);  return this;}  }
class C{  public void parse(AuthenticationHeader header) throws ParseException {  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  Token type=lexer.getNextToken();  this.lexer.SPorHT();  header.setScheme(type.getTokenValue());  try {    while (lexer.lookAhead(0) != '\n') {      this.parseParameter(header);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == '\n' || la == '\0')       break;      this.lexer.match(',');      this.lexer.SPorHT();    }  } catch (  ParseException ex) {    throw ex;  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SUPPORTED_DATA_TYPES",null);  try {    ServiceSchemaManager scm=new ServiceSchemaManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceSchema orgSchema=scm.getOrganizationSchema();    Set names=orgSchema.getSubSchemaNames();    if ((names != null) && !names.isEmpty()) {      for (Iterator iter=names.iterator(); iter.hasNext(); ) {        String name=(String)iter.next();        outputWriter.printlnMessage(name);      }    } else {      outputWriter.printlnMessage(getResourceString("get-supported-no-supported-datatype"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SUPPORTED_DATA_TYPES",null);  } catch (  SSOException e) {    String[] args={e.getMessage()};    debugError("GetSupportedDataTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SUPPORTED_DATA_TYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={e.getMessage()};    debugError("GetSupportedDataTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SUPPORTED_DATA_TYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void initializeBackends(Collection<String> backendIDsToStart,RootCfg root) throws ConfigException {  for (  String name : root.listBackends()) {    final BackendCfg backendCfg=root.getBackend(name);    final String backendID=backendCfg.getBackendId();    if (!backendIDsToStart.isEmpty() && !backendIDsToStart.contains(backendID)) {      continue;    }    if (DirectoryServer.hasBackend(backendID)) {      continue;    }    backendCfg.addChangeListener(this);    final DN backendDN=backendCfg.dn();    if (!backendCfg.isEnabled()) {      logger.debug(INFO_CONFIG_BACKEND_DISABLED,backendDN);      continue;    }    String className=backendCfg.getJavaClass();    Backend<? extends BackendCfg> backend;    try {      backend=loadBackendClass(className).newInstance();    } catch (    Exception e) {      logger.traceException(e);      logger.error(ERR_CONFIG_BACKEND_CANNOT_INSTANTIATE,className,backendDN,stackTraceToSingleLineString(e));      continue;    }    initializeBackend(backend,backendCfg);  }}  }
class C{  public void pack(){  try {    if (isIcon()) {      setIcon(false);    } else     if (isMaximum()) {      setMaximum(false);    }  } catch (  PropertyVetoException e) {    return;  }  setSize(getPreferredSize());  validate();}  }
class C{  public IllegalStateException(){  super();}  }
class C{  public MidiEvent(MidiMessage message,long tick){  this.message=message;  this.tick=tick;}  }
class C{  public static org.w3c.dom.Node createSOAPDOM(SOAPMessage message){  try {    ByteArrayOutputStream str=new ByteArrayOutputStream();    message.writeTo(str);    String xml=str.toString();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSU.createSOAPDOM, Intermediate xml: " + xml);    }    DocumentBuilder db=XMLUtils.getSafeDocumentBuilder(false);    Document doc=db.parse(new ByteArrayInputStream(xml.getBytes()));    return doc;  } catch (  Exception e) {    FSUtils.debug.error("FSServiceUtils.createSOAPDOM: Exception: ",e);    return null;  }}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  updateMaskIfNecessary();  positionCursorAtInitialLocation();}  }
class C{  public void testCase5(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={3,4,5,6,7,8,9};  byte rBytes[]={-3,-3,-3,-3,-3,-3,-2};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static String toDebugString(final long socketIdentifier){  final int ipBits=(int)socketIdentifier;  final int port=extractPortNumber(socketIdentifier);  final int inode=(int)(socketIdentifier >> 48);  return Integer.toHexString(ipBits) + ":" + port+ "/"+ inode;}  }
class C{  public Crop asSquare(){  cropIntent.putExtra(Extra.ASPECT_X,1);  cropIntent.putExtra(Extra.ASPECT_Y,1);  return this;}  }
class C{  public Event(String appName,String eventName,Intent intent){  this.intent=intent;  if (intent.hasExtra(ATTRIBUTE_TIME)) {    timeAttribute=intent.getStringExtra(ATTRIBUTE_TIME);  } else {    timeAttribute="";  }  if (intent.hasExtra(ATTRIBUTE_LOCATION)) {    locationAttribute=intent.getStringExtra(ATTRIBUTE_LOCATION);  } else {    locationAttribute="";  }  this.appName=appName;  this.eventName=eventName;}  }
class C{  private String fieldTypeCardinalityComment(Field field){  TypeRef type=field.getType();  String cardinalityComment="";  if (type.getCardinality() == Cardinality.REPEATED) {    if (type.isMap()) {      String keyType=jsTypeName(type.getMapKeyField().getType());      String valueType=jsTypeName(type.getMapValueField().getType());      return String.format("Object.<%s, %s>",keyType,valueType);    } else {      cardinalityComment="[]";    }  }  String typeComment=jsTypeName(field.getType());  return String.format("%s%s",typeComment,cardinalityComment);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> patchInstance(Context context,String resourceId,PatchRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public Binding(String name,String className,Object obj){  super(name,className);  this.boundObj=obj;}  }
class C{  public int from_layer(){  for (int index=0; index < shapes.length; index++) {    if (shapes[index] != null)     return index;  }  return 0;}  }
class C{  private void maybeRemoveEditorBorder(JComponent editor){  if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {    if (editor instanceof JPanel && editor.getBorder() == null && editor.getComponentCount() > 0) {      editor=(JComponent)editor.getComponent(0);    }    if (editor != null && editor.getBorder() instanceof UIResource) {      editor.setBorder(null);    }  }}  }
class C{  @SuppressWarnings("try") public void close() throws IOException {  try (OutputStream ostream=out){    flush();  } }  }
class C{  private void init(long seed,int size){  random=new Random();  random.setSeed(seed);  state=new short[size];  for (int i=0; i < state.length; i++) {    state[i]=(short)i;  }}  }
class C{  public void popElemTemplateElement(){  m_currentTemplateElements.pop();}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aManager,StoreDescription parentDesc) throws Exception {  if (aManager instanceof PersistentManager) {    PersistentManager manager=(PersistentManager)aManager;    Store store=manager.getStore();    storeElement(aWriter,indent,store);    SessionIdGenerator sessionIdGenerator=manager.getSessionIdGenerator();    if (sessionIdGenerator != null) {      storeElement(aWriter,indent,sessionIdGenerator);    }  }}  }
class C{  public void position(final int pos){  if (pos > sequence.length() || pos < 0) {    throw new IndexOutOfBoundsException();  }  this.pos=pos;}  }
class C{  public List<String> findRelationsOfType(String relationTypeName) throws IllegalArgumentException, RelationTypeNotFoundException {  if (relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findRelationsOfType");  RelationType relType=getRelationType(relationTypeName);  List<String> result;synchronized (myRelType2RelIdsMap) {    List<String> result1=myRelType2RelIdsMap.get(relationTypeName);    if (result1 == null)     result=new ArrayList<String>(); else     result=new ArrayList<String>(result1);  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findRelationsOfType");  return result;}  }
class C{  public static Border createEtchedBorder(int type){switch (type) {case EtchedBorder.RAISED:    if (sharedRaisedEtchedBorder == null) {      sharedRaisedEtchedBorder=new EtchedBorder(EtchedBorder.RAISED);    }  return sharedRaisedEtchedBorder;case EtchedBorder.LOWERED:return sharedEtchedBorder;default :throw new IllegalArgumentException("type must be one of EtchedBorder.RAISED or EtchedBorder.LOWERED");}}  }
class C{  private char[] parseEntityReference() throws IOException {  int pos=strpos;  if ((ch=readCh()) == '#') {    int n=0;    ch=readCh();    if ((ch >= '0') && (ch <= '9') || ch == 'x' || ch == 'X') {      if ((ch >= '0') && (ch <= '9')) {        while ((ch >= '0') && (ch <= '9')) {          n=(n * 10) + ch - '0';          ch=readCh();        }      } else {        ch=readCh();        char lch=(char)Character.toLowerCase(ch);        while ((lch >= '0') && (lch <= '9') || (lch >= 'a') && (lch <= 'f')) {          if (lch >= '0' && lch <= '9') {            n=(n * 16) + lch - '0';          } else {            n=(n * 16) + lch - 'a' + 10;          }          ch=readCh();          lch=(char)Character.toLowerCase(ch);        }      }switch (ch) {case '\n':        ln++;      ch=readCh();    lfCount++;  break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ';':ch=readCh();break;}char data[]=mapNumericReference(n);return data;}addString('#');if (!parseIdentifier(false)) {error("ident.expected");strpos=pos;char data[]={'&','#'};return data;}} else if (!parseIdentifier(false)) {char data[]={'&'};return data;}boolean semicolon=false;switch (ch) {case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ';':semicolon=true;ch=readCh();break;}String nm=getString(pos);Entity ent=dtd.getEntity(nm);if (!strict && (ent == null)) {ent=dtd.getEntity(nm.toLowerCase());}if ((ent == null) || !ent.isGeneral()) {if (nm.length() == 0) {error("invalid.entref",nm);return new char[0];}String str="&" + nm + (semicolon ? ";" : "");char b[]=new char[str.length()];str.getChars(0,b.length,b,0);return b;}return ent.getData();}  }
class C{  String parseAttributeValue(boolean lower) throws IOException {  int delim=-1;switch (ch) {case '\'':case '"':    delim=ch;  ch=readCh();break;}while (true) {int c=ch;switch (c) {case '\n':ln++;ch=readCh();lfCount++;if (delim < 0) {return getString(0);}break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}if (delim < 0) {return getString(0);}break;case '\t':if (delim < 0) c=' ';case ' ':ch=readCh();if (delim < 0) {return getString(0);}break;case '>':case '<':if (delim < 0) {return getString(0);}ch=readCh();break;case '\'':case '"':ch=readCh();if (c == delim) {return getString(0);} else if (delim == -1) {error("attvalerr");if (strict || ch == ' ') {return getString(0);} else {continue;}}break;case '=':if (delim < 0) {error("attvalerr");if (strict) {return getString(0);}}ch=readCh();break;case '&':if (strict && delim < 0) {ch=readCh();break;}char data[]=parseEntityReference();for (int i=0; i < data.length; i++) {c=data[i];addString((lower && (c >= 'A') && (c <= 'Z')) ? 'a' + c - 'A' : c);}continue;case -1:return getString(0);default :if (lower && (c >= 'A') && (c <= 'Z')) {c='a' + c - 'A';}ch=readCh();break;}addString(c);}}  }
class C{  private byte[] encodeId(final int id){  final int value=id + 1;  final byte[] idBytes;  if (value <= 0xFF) {    idBytes=new byte[1];    idBytes[0]=(byte)(value & 0xFF);  } else   if (value <= 0xFFFF) {    idBytes=new byte[2];    idBytes[0]=(byte)((value >> 8) & 0xFF);    idBytes[1]=(byte)(value & 0xFF);  } else   if (value <= 0xFFFFFF) {    idBytes=new byte[3];    idBytes[0]=(byte)((value >> 16) & 0xFF);    idBytes[1]=(byte)((value >> 8) & 0xFF);    idBytes[2]=(byte)(value & 0xFF);  } else {    idBytes=new byte[4];    idBytes[0]=(byte)((value >> 24) & 0xFF);    idBytes[1]=(byte)((value >> 16) & 0xFF);    idBytes[2]=(byte)((value >> 8) & 0xFF);    idBytes[3]=(byte)(value & 0xFF);  }  return idBytes;}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().fetchByUUID_G(uuid,groupId);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return 0;    }    if (next >= length)     return -1;    int n=Math.min(length - next,len);    str.getChars(next,next + n,cbuf,off);    next+=n;    return n;  }}  }
class C{  public XMLString trim(){  return new XString(str().trim());}  }
class C{  public AVTPartSimple(String val){  m_val=val;}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  public ToParser(String to){  super(to);}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,Object content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException(" unable to create the response");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  statusLine.setReasonPhrase(reasonPhrase);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public boolean hasChoiceValues(){  return as.hasChoiceValues();}  }
class C{  static ComputedDayOfField ofDayOfWeekField(WeekFields weekDef){  return new ComputedDayOfField("DayOfWeek",weekDef,DAYS,WEEKS,DAY_OF_WEEK_RANGE);}  }
class C{  public Locator2Impl(Locator locator){  super(locator);  if (locator instanceof Locator2) {    Locator2 l2=(Locator2)locator;    version=l2.getXMLVersion();    encoding=l2.getEncoding();  }}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private static void processParameters(Jpeg2000ImageData jp2){  jp2.parameters=new Jpeg2000ImageData.Parameters();  try {    if (jp2.getData() == null) {      jp2.loadData();    }    InputStream jpeg2000Stream=new ByteArrayInputStream(jp2.getData());    Jpeg2000Box box=new Jpeg2000Box();    box.length=cio_read(4,jpeg2000Stream);    if (box.length == 0x0000000c) {      jp2.parameters.isJp2=true;      box.type=cio_read(4,jpeg2000Stream);      if (JP2_JP != box.type) {        throw new IOException(IOException.ExpectedJpMarker);      }      if (0x0d0a870a != cio_read(4,jpeg2000Stream)) {        throw new IOException(IOException.ErrorWithJpMarker);      }      jp2_read_boxhdr(box,jpeg2000Stream);      if (JP2_FTYP != box.type) {        throw new IOException(IOException.ExpectedFtypMarker);      }      StreamUtil.skip(jpeg2000Stream,8);      for (int i=4; i < box.length / 4; ++i) {        if (cio_read(4,jpeg2000Stream) == JPX_JPXB) {          jp2.parameters.isJpxBaseline=true;        }      }      jp2_read_boxhdr(box,jpeg2000Stream);      do {        if (JP2_JP2H != box.type) {          if (box.type == JP2_JP2C) {            throw new IOException(IOException.ExpectedJp2hMarker);          }          StreamUtil.skip(jpeg2000Stream,box.length - 8);          jp2_read_boxhdr(box,jpeg2000Stream);        }      } while (JP2_JP2H != box.type);      jp2_read_boxhdr(box,jpeg2000Stream);      if (JP2_IHDR != box.type) {        throw new IOException(IOException.ExpectedIhdrMarker);      }      jp2.setHeight(cio_read(4,jpeg2000Stream));      jp2.setWidth(cio_read(4,jpeg2000Stream));      jp2.parameters.numOfComps=cio_read(2,jpeg2000Stream);      jp2.setBpc(cio_read(1,jpeg2000Stream));      StreamUtil.skip(jpeg2000Stream,3);      jp2_read_boxhdr(box,jpeg2000Stream);      if (box.type == JP2_BPCC) {        jp2.parameters.bpcBoxData=new byte[box.length - 8];        jpeg2000Stream.read(jp2.parameters.bpcBoxData,0,box.length - 8);      } else       if (box.type == JP2_COLR) {        do {          if (jp2.parameters.colorSpecBoxes == null)           jp2.parameters.colorSpecBoxes=new ArrayList<Jpeg2000ImageData.ColorSpecBox>();          jp2.parameters.colorSpecBoxes.add(jp2_read_colr(box,jpeg2000Stream));          try {            jp2_read_boxhdr(box,jpeg2000Stream);          } catch (          ZeroBoxSizeException ioe) {          }        } while (JP2_COLR == box.type);      }    } else     if (box.length == 0xff4fff51) {      StreamUtil.skip(jpeg2000Stream,4);      int x1=cio_read(4,jpeg2000Stream);      int y1=cio_read(4,jpeg2000Stream);      int x0=cio_read(4,jpeg2000Stream);      int y0=cio_read(4,jpeg2000Stream);      StreamUtil.skip(jpeg2000Stream,16);      jp2.setColorSpace(cio_read(2,jpeg2000Stream));      jp2.setBpc(8);      jp2.setHeight(y1 - y0);      jp2.setWidth(x1 - x0);    } else {      throw new IOException(IOException.InvalidJpeg2000File);    }  } catch (  java.io.IOException e) {    throw new IOException(IOException.Jpeg2000ImageException,e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenodeancestor.class,args);}  }
class C{  public void publishHeartbeat(DN baseDN,CSN heartbeatCSN){  if (!predicate.isECLEnabledDomain(baseDN)) {    return;  }  final CSN oldestCSNBefore=getOldestLastAliveCSN();  lastAliveCSNs.update(baseDN,heartbeatCSN);  tryNotify(oldestCSNBefore);}  }
class C{  @Override public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  public ID3v22Tag(ByteBuffer buffer) throws TagException {  this(buffer,"");}  }
class C{  public static void sort(Object[] array){  ComparableTimSort.sort(array);}  }
class C{  public boolean verify(X509Certificate[] certs,boolean crlEnabled,boolean ocspEnabled){synchronized (AMCertPath.class) {    if (debug.messageEnabled()) {      debug.message("AMCertPath.verify: invoked !");    }    try {      final List<X509Certificate> certList=Arrays.asList(certs);      final CertPath cp=(CertPath)cf.generateCertPath(certList);      Class<?> trustMgrClass=Class.forName("com.sun.identity.security.keystore.AMX509TrustManager");      Object trustMgr=(Object)trustMgrClass.newInstance();      Method method=trustMgrClass.getMethod("getKeyStore");      KeyStore keystore=(KeyStore)method.invoke(trustMgr);      PKIXParameters pkixparams=new PKIXParameters(keystore);      if (debug.messageEnabled()) {        debug.message("AMCertPath.verify: crlEnabled ---> " + crlEnabled);        debug.message("AMCertPath.verify: ocspEnabled ---> " + ocspEnabled);      }      pkixparams.setRevocationEnabled(crlEnabled || ocspEnabled);      if (ocspEnabled) {        final String responderURLString=getResponderURLString();        if (!StringUtils.isBlank(responderURLString)) {          Security.setProperty(OCSP_ENABLE,TRUE);          Security.setProperty(OCSP_RESPONDER_URL,responderURLString);          if (debug.messageEnabled()) {            debug.message("AMCertPath.verify: pkixparams.setRevocationEnabled " + "set to true, and ocsp.enabled set to true with a OCSP responder url of " + responderURLString);          }        } else {          pkixparams.setRevocationEnabled(crlEnabled);          Security.setProperty(OCSP_ENABLE,FALSE);          debug.error("AMCertPath.verify: OCSP is enabled, but the " + "com.sun.identity.authentication.ocsp.responder.url property does not specify a OCSP " + "responder. OCSP checking will NOT be performed.");        }      } else {        Security.setProperty(OCSP_ENABLE,FALSE);        if (debug.messageEnabled()) {          debug.message("AMCertPath.verify: pkixparams Security property ocsp.enabled set to false.");        }      }      if (store != null) {        pkixparams.addCertStore(store);      }      if (debug.messageEnabled()) {        StringBuilder sb=new StringBuilder("The policy-related state in the PKIXParameters passed to the PKIX CertPathValidator: \n");        sb.append("\tgetInitialPolicies: ").append(pkixparams.getInitialPolicies()).append('\n');        sb.append("\tisExplicitPolicyRequired: ").append(pkixparams.isExplicitPolicyRequired()).append('\n');        sb.append("\tisPolicyMappingInhibited: ").append(pkixparams.isPolicyMappingInhibited()).append('\n');        debug.message(sb.toString());      }      CertPathValidatorResult cpvResult=cpv.validate(cp,pkixparams);      if (debug.messageEnabled()) {        debug.message("AMCertPath.verify: PASS " + cpvResult.toString());      }    } catch (    java.security.cert.CertPathValidatorException e) {      debug.error("AMCertPath.verify: FAILED - " + e.getMessage());      if (debug.messageEnabled()) {        debug.message("AMCertPath.verify: FAILED",e);      }      return false;    }catch (    Throwable t) {      debug.error("AMCertPath.verify: FAILED",t);      return false;    }    return true;  }}  }
class C{  final int findSortIndex(MarkData o){  int lower=0;  int upper=marks.size() - 1;  int mid=0;  if (upper == -1) {    return 0;  }  int cmp;  MarkData last=marks.elementAt(upper);  cmp=compare(o,last);  if (cmp > 0)   return upper + 1;  while (lower <= upper) {    mid=lower + ((upper - lower) / 2);    MarkData entry=marks.elementAt(mid);    cmp=compare(o,entry);    if (cmp == 0) {      return mid;    } else     if (cmp < 0) {      upper=mid - 1;    } else {      lower=mid + 1;    }  }  return (cmp < 0) ? mid : mid + 1;}  }
class C{  @Override public void flush(){}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) * m_right.num(xctxt));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  attrName=addrAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",attrName);}  }
class C{  public void testEmptyAuthority() throws Exception {  URL url=new URL("http:///foo");  assertEquals("",url.getAuthority());  assertEquals("/foo",url.getPath());  assertEquals("http:///foo",url.toString());}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @Override public void init(Subject subject,Map sharedState,Map options){  if (debug.messageEnabled()) {    debug.message("OATH::init");  }  userName=(String)sharedState.get(getUserKey());  try {    checkForSessionAndGetUsernameAndUUID();  } catch (  AuthLoginException|SSOException e) {    if (debug.messageEnabled()) {      debug.message("AuthenticatorOATH :: init() : Unable to get userName ",e);    }    return;  }  try {    String realm=DNMapper.orgNameToRealmName(getRequestOrg());    id=IdUtils.getIdentity(userName,realm);    realmOathService=oathServiceFactory.create(id.getRealm());    this.authLevel=CollectionHelper.getMapAttr(options,AUTHLEVEL);    try {      this.passLen=CollectionHelper.getIntMapAttr(options,PASSWORD_LENGTH,0,debug);    } catch (    NumberFormatException e) {      passLen=0;    }    try {      this.minSecretKeyLength=CollectionHelper.getIntMapAttr(options,MIN_SECRET_KEY_LENGTH,0,debug);    } catch (    NumberFormatException e) {      minSecretKeyLength=0;    }    this.windowSize=CollectionHelper.getIntMapAttr(options,WINDOW_SIZE,0,debug);    this.truncationOffset=CollectionHelper.getIntMapAttr(options,TRUNCATION_OFFSET,-1,debug);    this.isOptional=!getLoginState("authenticatorOATH").is2faMandatory();    this.totpTimeStep=CollectionHelper.getIntMapAttr(options,TOTP_TIME_STEP,1,debug);    this.totpStepsInWindow=CollectionHelper.getIntMapAttr(options,TOTP_STEPS_IN_WINDOW,1,debug);    this.checksum=CollectionHelper.getBooleanMapAttr(options,CHECKSUM,false);    this.totpMaxClockDrift=CollectionHelper.getIntMapAttr(options,MAXIMUM_CLOCK_DRIFT,0,debug);    this.issuerName=CollectionHelper.getMapAttr(options,ISSUER_NAME);    final String algorithm=CollectionHelper.getMapAttr(options,ALGORITHM);    if ("HOTP".equalsIgnoreCase(algorithm)) {      this.algorithm=HOTP;    } else     if ("TOTP".equalsIgnoreCase(algorithm)) {      this.algorithm=TOTP;    } else {      this.algorithm=ERROR;    }    if (authLevel != null) {      try {        setAuthLevel(Integer.parseInt(authLevel));      } catch (      Exception e) {        if (debug.errorEnabled()) {          debug.error("OATH :: init() : Unable to set auth level " + authLevel,e);        }      }    }  } catch (  SMSException|SSOException|AuthLoginException e) {    if (debug.errorEnabled()) {      debug.error("OATH :: init() : Unable to configure basic module properties " + authLevel,e);    }  }}  }
class C{  public Observable<Account> retrieveAccountObservable(String id){  io.vertx.rx.java.ObservableFuture<Account> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveAccount(id,resultHandler.toHandler());  return resultHandler;}  }
class C{  public ConfigFromFile(){  super();}  }
class C{  protected void configureEditor(){  editor.setEnabled(comboBox.isEnabled());  editor.setFocusable(comboBox.isFocusable());  editor.setFont(comboBox.getFont());  if (focusListener != null) {    editor.addFocusListener(focusListener);  }  editor.addFocusListener(getHandler());  comboBox.getEditor().addActionListener(getHandler());  if (editor instanceof JComponent) {    ((JComponent)editor).putClientProperty("doNotCancelPopup",HIDE_POPUP_KEY);    ((JComponent)editor).setInheritsPopupMenu(true);  }  comboBox.configureEditor(comboBox.getEditor(),comboBox.getSelectedItem());  editor.addPropertyChangeListener(propertyChangeListener);}  }
class C{  private static int indexOf(Object o,Object[] elements,int index,int fence){  if (o == null) {    for (int i=index; i < fence; i++)     if (elements[i] == null)     return i;  } else {    for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  boolean isNavigatable(int index){  if (!super.isNavigatable(index)) {    return getBufferedChar(index) == getDecimalSeparator();  }  return true;}  }
class C{  public int at(int index){  if (index < 0 || index >= sizeInBits) {    throw new IllegalArgumentException("Bad index: " + index);  }  int value=array[index >> 3] & 0xff;  return (value >> (7 - (index & 0x7))) & 1;}  }
class C{  protected ContentDescriptionReader(){}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitInstruction(this);}  }
class C{  public FrameBodyTLAN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static Boolean StringToBoolean(String str) throws Exception {  if (str == null) {    return null;  }  if (str.equals("true") || str.equals("1")) {    return Boolean.TRUE;  }  if (str.equals("false") || str.equals("0")) {    return Boolean.FALSE;  }  throw new Exception();}  }
class C{  @Override public String toString(){  return name.toString();}  }
class C{  public synchronized void resetStatistics(){  processingTime=0;  expiredSessions.set(0);synchronized (sessionCreationTiming) {    sessionCreationTiming.clear();    while (sessionCreationTiming.size() < ManagerBase.TIMING_STATS_CACHE_SIZE) {      sessionCreationTiming.add(null);    }  }synchronized (sessionExpirationTiming) {    sessionExpirationTiming.clear();    while (sessionExpirationTiming.size() < ManagerBase.TIMING_STATS_CACHE_SIZE) {      sessionExpirationTiming.add(null);    }  }  rejectedSessions=0;  sessionReplaceCounter=0;  counterNoStateTransfered=0;  setMaxActive(getActiveSessions());  sessionCounter=getActiveSessions();  counterReceive_EVT_ALL_SESSION_DATA=0;  counterReceive_EVT_GET_ALL_SESSIONS=0;  counterReceive_EVT_SESSION_ACCESSED=0;  counterReceive_EVT_SESSION_CREATED=0;  counterReceive_EVT_SESSION_DELTA=0;  counterReceive_EVT_SESSION_EXPIRED=0;  counterReceive_EVT_ALL_SESSION_TRANSFERCOMPLETE=0;  counterReceive_EVT_CHANGE_SESSION_ID=0;  counterSend_EVT_ALL_SESSION_DATA=0;  counterSend_EVT_GET_ALL_SESSIONS=0;  counterSend_EVT_SESSION_ACCESSED=0;  counterSend_EVT_SESSION_CREATED=0;  counterSend_EVT_SESSION_DELTA=0;  counterSend_EVT_SESSION_EXPIRED=0;  counterSend_EVT_ALL_SESSION_TRANSFERCOMPLETE=0;  counterSend_EVT_CHANGE_SESSION_ID=0;}  }
class C{  protected void beginMarkedContent(PdfName tag,PdfDictionary dict){  markedContentStack.push(new CanvasTag(tag).setProperties(dict));}  }
class C{  public static PostReadRequestControl newControl(final boolean isCritical,final String... attributes){  Reject.ifNull((Object)attributes);  if (attributes.length == 0) {    return isCritical ? CRITICAL_EMPTY_INSTANCE : NONCRITICAL_EMPTY_INSTANCE;  } else   if (attributes.length == 1) {    return new PostReadRequestControl(isCritical,singletonList(attributes[0]));  } else {    return new PostReadRequestControl(isCritical,unmodifiableList(new ArrayList<String>(asList(attributes))));  }}  }
class C{  static Set trustedProviderProtocolMapToSet(Map providerMap){  if ((providerMap == null) || providerMap.isEmpty()) {    return Collections.EMPTY_SET;  }  Set retSet=new HashSet();  Set keys=providerMap.keySet();  Iterator it=keys.iterator();  while (it.hasNext()) {    String key=(String)it.next();    String suffix=null;    if (key.equals(COTConstants.SAML2)) {      suffix=SAML2_DELIM;    } else     if (key.equals(COTConstants.IDFF)) {      suffix=IDFF_DELIM;    } else     if (key.equals(COTConstants.WS_FED)) {      suffix=WSFED_DELIM;    } else {      if (debug.warningEnabled()) {        debug.warning("COTUtils.protocolMapToSet: " + "invalid protocol " + key);      }      continue;    }    Set vals=(Set)providerMap.get(key);    Iterator it2=vals.iterator();    while (it2.hasNext()) {      String val=(String)it2.next();      retSet.add(val + suffix);    }  }  if (debug.messageEnabled()) {    debug.message("COTUtils.protocolMapToSet: return" + retSet);  }  return retSet;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(5);  value=textNode.getNodeValue();  assertEquals("textSplitTextTwoAssert","Roger",value);}  }
class C{  public void create_ratsnest(){  ratsnest=new RatsNest(r_board,stat);  Integer incomplete_count=ratsnest.incomplete_count();  Integer length_violation_count=ratsnest.length_violation_count();  String curr_message;  if (length_violation_count == 0) {    curr_message=incomplete_count.toString() + " " + resources.getString("incomplete_connections_to_route");  } else {    curr_message=incomplete_count.toString() + " " + resources.getString("incompletes")+ " "+ length_violation_count.toString()+ " "+ resources.getString("length_violations");  }  screen_messages.set_status_message(curr_message);}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public boolean signatureCoversWholeDocument(String name){  getSignatureNames();  if (!sigNames.containsKey(name))   return false;  try {    return sigNames.get(name)[0] == document.getReader().getFileLength();  } catch (  IOException e) {    throw new PdfException(e);  }}  }
class C{  public boolean equals(Object object){  boolean objectsEqual=false;  if (this == object) {    objectsEqual=true;  } else   if (object != null && object.getClass().equals(getClass())) {    ACI castObject=(ACI)object;    if (castObject.getName().equals(getName()) && castObject.getTarget().equals(getTarget()) && castObject.getTargetFilter().equals(getTargetFilter())&& castObject.getTargetAttributes().equals(getTargetAttributes())&& castObject.getPermissions().equals(getPermissions())&& castObject.getUsers().equals(getUsers())&& castObject.getGroups().equals(getGroups())&& castObject.getRoles().equals(getRoles())&& castObject.getClientHostNames().equals(getClientHostNames())&& castObject.getTimesOfDay().equals(getTimesOfDay())&& castObject.getDaysOfWeek().equals(getDaysOfWeek())&& castObject.getAuthMethods().equals(getAuthMethods())) {      objectsEqual=true;    }  }  return objectsEqual;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="xml:qualifiedName";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  protected boolean inFontTag(){  return (fontAttributes != null);}  }
class C{  public void printOpenTag(PrintWriter aWriter,int indent,Object bean,StoreDescription aDesc) throws Exception {  aWriter.print("<");  aWriter.print(aDesc.getTag());  if (aDesc.isAttributes() && bean != null)   printAttributes(aWriter,indent,bean,aDesc);  aWriter.println(">");}  }
class C{  private ResourceResponse issuedTokenResource(String assertion){  return newResourceResponse(UUID.randomUUID().toString(),Hash.hash(assertion),json(object(field(AMSTSConstants.ISSUED_TOKEN,assertion))));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nomatch.com","address");  assertSize("matchSize",0,elementList);}  }
class C{  public ListBuffer<A> appendList(ImmutableList<A> xs){  while (xs.nonEmpty()) {    append(xs.head);    xs=xs.tail;  }  return this;}  }
class C{  public DefaultMutableTreeNode(Object userObject,boolean allowsChildren){  super();  parent=null;  this.allowsChildren=allowsChildren;  this.userObject=userObject;}  }
class C{  protected boolean isHTMLSupported(){  return htmlData != null;}  }
class C{  public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public EmptyBorder(int top,int left,int bottom,int right){  this.top=top;  this.right=right;  this.bottom=bottom;  this.left=left;}  }
class C{  public boolean offer(E o){  if (o == null) {    throw new NullPointerException("o == null");  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  public void assignStaticGroup(String groupDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,groupDN,GROUP,ADD_MEMBER);}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  WhoAmIExtendedRequestImpl(){}  }
class C{  protected final synchronized void repaint(){  if (component != null) {    component.repaint(x,y,width,height);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType02.class,args);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    String toTag=new Integer((int)(Math.random() * 1000)).toString();    toHeader.setTag(toTag);    Address address=addressFactory.createAddress("Shootme <sip:127.0.0.1:5070;transport=" + transport + ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      try {        st=sipProvider.getNewServerTransaction(request);      } catch (      TransactionAlreadyExistsException ex) {        System.out.println("Tx aready exists -- ignoring ");        return;      }    }    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");      response.setContent(content,contentTypeHeader);    }    Dialog dialog=st.getDialog();    st.sendResponse(response);    response=messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    response.addHeader(contactHeader);    st.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();    fail("unexpected exception");  }}  }
class C{  public SAMLToken fromToken(Token token){  String className=token.getAttribute(SAMLTokenField.OBJECT_CLASS.getField());  Class<?> c;  try {    c=Class.forName(className);  } catch (  ClassNotFoundException e) {    String message=MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + "Could not deserialise SAML Token because class not found:\n" + "Class Name: {0}\n"+ "Token: {1}",className,token);    throw new IllegalStateException(message,e);  }  String jsonBlob=blobUtils.getBlobAsString(token);  Object blob=serialisation.deserialise(jsonBlob,c);  long expiryTime=TimeUtils.toUnixTime(token.getExpiryTimestamp());  String secondaryKey=token.getAttribute(SAMLTokenField.SECONDARY_KEY.getField());  String primaryKey=tokenIdFactory.fromSAMLPrimaryTokenId(token.getTokenId());  if (secondaryKey != null && !secondaryKey.isEmpty()) {    secondaryKey=tokenIdFactory.fromSAMLSecondaryTokenId(secondaryKey);  }  SAMLToken samlToken=new SAMLToken(primaryKey,secondaryKey,expiryTime,blob);  return samlToken;}  }
class C{  public void paintScrollPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Expected<T> expect(){  if (!complete()) {    throw new NoSuchElementException("No value present, result not returned.");  }  if (failure()) {    throw new IllegalStateException(cause());  }  return result.get().expect();}  }
class C{  public void popRTFContext(){  int previous=m_last_pushed_rtfdtm.pop();  if (null == m_rtfdtm_stack)   return;  if (m_which_rtfdtm == previous) {    if (previous >= 0) {      boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(previous))).popRewindMark();    }  } else   while (m_which_rtfdtm != previous) {    boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(m_which_rtfdtm))).popRewindMark();    --m_which_rtfdtm;  }}  }
class C{  public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator);}  }
class C{  public void destroy() throws LifecycleException {  getServer();  server.destroy();}  }
class C{  public void clearGraceLoginUseTimes(){  operations.add(PasswordPolicyStateOperationType.CLEAR_GRACE_LOGIN_USE_TIMES);}  }
class C{  public static World createWorld(WorldCreator creator){  return server.createWorld(creator);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobKOctetsProcessed);}  }
class C{  private static void initialize(){  addItemsToList(0,NUMBERS_RANGE);  addItemsToList(UPPER_A,UPPER_A + NUM_OF_LETTERS);  addItemsToList(LOWER_A,LOWER_A + NUM_OF_LETTERS);}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  private boolean hasDividerBeforeChildAtAlongMainAxis(int childAbsoluteIndex,int childRelativeIndexInFlexLine){  if (allViewsAreGoneBefore(childAbsoluteIndex,childRelativeIndexInFlexLine)) {    if (isMainAxisDirectionHorizontal(mFlexDirection)) {      return (mShowDividerVertical & SHOW_DIVIDER_BEGINNING) != 0;    } else {      return (mShowDividerHorizontal & SHOW_DIVIDER_BEGINNING) != 0;    }  } else {    if (isMainAxisDirectionHorizontal(mFlexDirection)) {      return (mShowDividerVertical & SHOW_DIVIDER_MIDDLE) != 0;    } else {      return (mShowDividerHorizontal & SHOW_DIVIDER_MIDDLE) != 0;    }  }}  }
class C{  public static NSObject parse(String filePath) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  return parse(new File(filePath));}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.size() - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  @Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {  Foo foo=findByUUID_G(uuid,groupId);  return remove(foo);}  }
class C{  public void testUnsupportedCallbackException06(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE;  for (int i=0; i < msgs.length; i++) {    ucE=new UnsupportedCallbackException(c,msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),ucE.getMessage(),msgs[i]);    assertEquals("Incorrect callback object was returned",c,ucE.getCallback());  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPAttribute(type=");  buffer.append(attributeType);  buffer.append(", values={");  if (!values.isEmpty()) {    Iterator<ByteString> iterator=values.iterator();    buffer.append(iterator.next());    while (iterator.hasNext()) {      buffer.append(", ");      buffer.append(iterator.next());    }  }  buffer.append("})");}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  FileWriter writer=new FileWriter(DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "server.pin");  writer.write("password" + EOL);  writer.close();  writer=new FileWriter(DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "empty");  writer.close();  System.setProperty("org.opends.server.trustStorePIN","password");}  }
class C{  public void print(int inum){  print(String.valueOf(inum));}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public boolean is_hilight_routing_obstacle(){  return hilight_routing_obstacle;}  }
class C{  @Override public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanAttributeInfo(this));}  }
class C{  private void applyRetrievedLengthLimit(){  Long friendly_msg_length=mFirebaseRemoteConfig.getLong("friendly_msg_length");  mMessageEditText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(friendly_msg_length.intValue())});  Log.d(TAG,"FML is: " + friendly_msg_length);}  }
class C{  public static String createNameIdentifier(){  String handle=null;  try {    byte[] handleBytes=new byte[21];    randomGenerator.nextBytes(handleBytes);    handle=Base64.encode(handleBytes);    if (debug.messageEnabled()) {      debug.message("createNameIdentifier String: " + handle);    }  } catch (  Exception e) {    debug.message("createNameIdentifier:" + " Exception during proccessing request" + e.getMessage());  }  return handle;}  }
class C{  private int promptIfRequiredForPortData(IntegerArgument portArg,Integer valueToSuggest,LocalizableMessage promptMsg,Collection<Integer> usedPorts,boolean includeLineBreak){  int portNumber=-1;  boolean usedProvided=false;  boolean firstPrompt=true;  while (portNumber == -1) {    try {      boolean prompted=false;      if (usedProvided || !portArg.isPresent()) {        if (firstPrompt && includeLineBreak) {          println();        }        portNumber=-1;        while (portNumber == -1) {          try {            portNumber=readPort(promptMsg,valueToSuggest);          } catch (          final ClientException ce) {            portNumber=-1;            logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));          }        }        prompted=true;        firstPrompt=false;      } else {        portNumber=portArg.getIntValue();        usedProvided=true;      }      if (!argParser.skipPortCheckArg.isPresent() && !SetupUtils.canUseAsPort(portNumber)) {        final LocalizableMessage message=getCannotBindErrorMessage(portNumber);        if (prompted || includeLineBreak) {          println();        }        println(message);        if (!SetupUtils.isPrivilegedPort(portNumber)) {          println();        }        portNumber=-1;      }      if (portNumber != -1 && usedPorts.contains(portNumber)) {        println(ERR_CONFIGDS_PORT_ALREADY_SPECIFIED.get(portNumber));        println();        portNumber=-1;      }    } catch (    final ArgumentException ae) {      println(ae.getMessageObject());    }  }  return portNumber;}  }
class C{  public void initialize_manual_trace_half_widths(){  for (int i=0; i < itera_settings.manual_trace_half_width_arr.length; ++i) {    itera_settings.manual_trace_half_width_arr[i]=r_board.brd_rules.get_default_net_class().get_trace_half_width(i);  }}  }
class C{  public void deleteParm(String name){  parameters.delete(name);}  }
class C{  public PMediaAuthorizationHeader createPMediaAuthorizationHeader(String token) throws InvalidArgumentException, ParseException {  if (token == null || token == "")   throw new InvalidArgumentException("The Media-Authorization-Token parameter is null or empty");  PMediaAuthorization mediaAuthorization=new PMediaAuthorization();  mediaAuthorization.setMediaAuthorizationToken(token);  return mediaAuthorization;}  }
class C{  public void sendInvite(){  try {    String fromName="BigGuy";    String fromSipAddress="here.com";    String fromDisplayName="The Master Blaster";    String toSipAddress="there.com";    String toUser="LittleGuy";    String toDisplayName="The Little Blister";    SipURI fromAddress=ProtocolObjects.addressFactory.createSipURI(fromName,fromSipAddress);    Address fromNameAddress=ProtocolObjects.addressFactory.createAddress(fromAddress);    fromNameAddress.setDisplayName(fromDisplayName);    FromHeader fromHeader=ProtocolObjects.headerFactory.createFromHeader(fromNameAddress,new Integer((int)(Math.random() * Integer.MAX_VALUE)).toString());    SipURI toAddress=ProtocolObjects.addressFactory.createSipURI(toUser,toSipAddress);    Address toNameAddress=ProtocolObjects.addressFactory.createAddress(toAddress);    toNameAddress.setDisplayName(toDisplayName);    ToHeader toHeader=ProtocolObjects.headerFactory.createToHeader(toNameAddress,null);    SipURI requestURI=ProtocolObjects.addressFactory.createSipURI(toUser,peerHostPort);    ArrayList viaHeaders=new ArrayList();    int port=provider.getListeningPoint(ProtocolObjects.transport).getPort();    ViaHeader viaHeader=ProtocolObjects.headerFactory.createViaHeader(myAddress,port,ProtocolObjects.transport,null);    viaHeaders.add(viaHeader);    ContentTypeHeader contentTypeHeader=ProtocolObjects.headerFactory.createContentTypeHeader("application","sdp");    CallIdHeader callIdHeader=provider.getNewCallId();    CSeqHeader cSeqHeader=ProtocolObjects.headerFactory.createCSeqHeader(1L,Request.INVITE);    MaxForwardsHeader maxForwards=ProtocolObjects.headerFactory.createMaxForwardsHeader(70);    Request request=ProtocolObjects.messageFactory.createRequest(requestURI,Request.INVITE,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);    SipURI contactURI=ProtocolObjects.addressFactory.createSipURI(fromName,myAddress);    contactURI.setPort(provider.getListeningPoint(ProtocolObjects.transport).getPort());    Address contactAddress=ProtocolObjects.addressFactory.createAddress(contactURI);    contactAddress.setDisplayName(fromName);    contactHeader=ProtocolObjects.headerFactory.createContactHeader(contactAddress);    request.addHeader(contactHeader);    Header extensionHeader=ProtocolObjects.headerFactory.createHeader("My-Header","my header value");    request.addHeader(extensionHeader);    String sdpData="v=0\r\n" + "o=4855 13760799956958020 13760799956958020" + " IN IP4  129.6.55.78\r\n"+ "s=mysession session\r\n"+ "p=+46 8 52018010\r\n"+ "c=IN IP4  129.6.55.78\r\n"+ "t=0 0\r\n"+ "m=audio 6022 RTP/AVP 0 4 18\r\n"+ "a=rtpmap:0 PCMU/8000\r\n"+ "a=rtpmap:4 G723/8000\r\n"+ "a=rtpmap:18 G729A/8000\r\n"+ "a=ptime:20\r\n";    request.setContent(sdpData,contentTypeHeader);    Address address=ProtocolObjects.addressFactory.createAddress("<sip:" + PEER_ADDRESS + ":"+ PEER_PORT+ ">");    RouteHeader routeHeader=ProtocolObjects.headerFactory.createRouteHeader(address);    SipUri sipUri=(SipUri)address.getURI();    sipUri.setLrParam();    request.addHeader(routeHeader);    extensionHeader=ProtocolObjects.headerFactory.createHeader("My-Other-Header","my new header value ");    request.addHeader(extensionHeader);    Header callInfoHeader=ProtocolObjects.headerFactory.createHeader("Call-Info","<http://www.antd.nist.gov>");    request.addHeader(callInfoHeader);    this.inviteTid=provider.getNewClientTransaction(request);    this.inviteTid.sendRequest();    this.dialog=this.inviteTid.getDialog();    logger.info("created dialog " + dialog);  } catch (  Exception ex) {    logger.error("Unexpected exception",ex);    usage();  }}  }
class C{  public void test_SelectThreeTables() throws SQLException {  String sql="SELECT onum, " + DatabaseCreator.ORDERS_TABLE + ".cnum"+ " FROM "+ DatabaseCreator.SALESPEOPLE_TABLE+ ", "+ DatabaseCreator.CUSTOMERS_TABLE+ ", "+ DatabaseCreator.ORDERS_TABLE+ " WHERE "+ DatabaseCreator.CUSTOMERS_TABLE+ ".city <> "+ DatabaseCreator.SALESPEOPLE_TABLE+ ".city"+ " AND "+ DatabaseCreator.ORDERS_TABLE+ ".cnum = "+ DatabaseCreator.CUSTOMERS_TABLE+ ".cnum"+ " AND "+ DatabaseCreator.ORDERS_TABLE+ ".snum = "+ DatabaseCreator.SALESPEOPLE_TABLE+ ".snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(3001,2008);  value.put(3002,2007);  value.put(3006,2008);  value.put(3009,2002);  value.put(3007,2004);  value.put(3010,2004);  while (result.next()) {    int key=result.getInt("onum");    int val=result.getInt("cnum");    assertTrue("wrong value of onum field",value.containsKey(key));    assertEquals("wrong value of cnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public ServerKeyExchange(BigInteger par1,BigInteger par2,BigInteger par3,byte[] hash){  this.par1=par1;  this.par2=par2;  this.par3=par3;  this.hash=hash;  bytes1=toUnsignedByteArray(this.par1);  bytes2=toUnsignedByteArray(this.par2);  length=4 + bytes1.length + bytes2.length;  if (hash != null) {    length+=2 + hash.length;  }  if (par3 == null) {    bytes3=null;    return;  }  bytes3=toUnsignedByteArray(this.par3);  length+=2 + bytes3.length;}  }
class C{  public void addCOSAttribute(String attrName,int qualifier) throws UMSException {  StringBuilder attrStr=new StringBuilder();  if (qualifier < ICOSDefinition.minQualifier || qualifier > ICOSDefinition.maxQualifier) {    String msg=i18n.getString(IUMSConstants.BAD_COS_ATTR_QUALIFIER);    throw new UMSException(msg);  }  attrStr.append(attrName);  attrStr.append(" ");  attrStr.append(ICOSDefinition.qualifiers[qualifier]);  modify(ICOSDefinition.COSATTRIBUTE,attrStr.toString(),ModificationType.ADD);}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public void addAttribute(Attribute attr){  attrs.addElement(attr);}  }
class C{  public NotDirectoryException(String file){  super(file);}  }
class C{  public void addChildElement(XMLElement child,boolean addAfterNewLine) throws Exception {  addChildElementAt(child,-1,addAfterNewLine);}  }
class C{  Response processSAMLRequest(String realm,String pdpEntityID,Element reqAbs,HttpServletRequest request,SOAPMessage soapMsg) throws SAML2Exception {  String classMethod="QueryHandlerServlet:processSAMLRequest";  Response samlResponse=null;  if (reqAbs != null) {    String xsiType=reqAbs.getAttribute(XSI_TYPE_ATTR);    if (debug.messageEnabled()) {      debug.message(classMethod + "xsi type is : " + xsiType);    }    if (xsiType != null && xsiType.indexOf(XACML_AUTHZ_QUERY) != -1) {      RequestAbstract samlRequest=ContextFactory.getInstance().createXACMLAuthzDecisionQuery(reqAbs);      String requestStr=samlRequest.toXMLString(true,true);      String[] data={requestStr,pdpEntityID};      LogUtil.access(Level.FINE,LogUtil.REQUEST_MESSAGE,data);      Issuer issuer=samlRequest.getIssuer();      String pepEntityID=null;      if (issuer != null) {        pepEntityID=issuer.getValue().trim();      }      if (debug.messageEnabled()) {        debug.message(classMethod + "Issuer is:" + pepEntityID);      }      boolean isTrusted=false;      try {        isTrusted=SAML2Utils.getSAML2MetaManager().isTrustedXACMLProvider(realm,pdpEntityID,pepEntityID,SAML2Constants.PDP_ROLE);      } catch (      SAML2MetaException sme) {        debug.error("Error retreiving meta",sme);      }      if (!isTrusted) {        if (debug.messageEnabled()) {          debug.message(classMethod + "Issuer in Request is not valid." + pepEntityID);        }        String[] args={realm,pepEntityID,pdpEntityID};        LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_IN_PEP_REQUEST,args);        throw new SAML2Exception("invalidIssuerInRequest");      }      samlResponse=processXACMLResponse(realm,pdpEntityID,samlRequest,request,soapMsg);    }  }  return samlResponse;}  }
class C{  public void update(byte input){  engineUpdate(input);  state=IN_PROGRESS;}  }
class C{  public static RunStats delegateGetBucketForDouble(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.DOUBLE,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,ibg.generateBuckets(),null,null,null,null,null,null);  logger.debug("test to getBucket for the bucket distribution on Double values");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  NormalDistribution dist=new NormalDistribution(0,6);  Random r=new Random();  for (int i=0; i < 20000; i++) {    double normalRandom=dist.sample();    double scaleRandom=Math.random();    if (scaleRandom < .25) {      normalRandom=normalRandom * 10;    } else     if (scaleRandom < .5) {      normalRandom=normalRandom * 500;    } else     if (scaleRandom < .75) {      normalRandom=normalRandom * 125000;    } else {      normalRandom=normalRandom * 1250000;    }    Long bucketId=locator.getBucket(normalRandom,FieldDataType.DOUBLE);    calculate(hm,stats,bucketId,normalRandom);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForDouble",FieldDataType.DOUBLE,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  private void publishInDebugLogger(String msg){  tracer.trace(msg);}  }
class C{  public void overrideSeeds(String seeds){  properties.setProperty("cassandra.contactPoints",seeds);  properties.setProperty("cassandra.port","9042");}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  Object param=null;  if (attributeName != null) {    param=attributes.getValue(attributeName);  } else   if (fromStack) {    param=digester.peek(stackIndex);    if (digester.log.isDebugEnabled()) {      StringBuilder sb=new StringBuilder("[CallParamRule]{");      sb.append(digester.match);      sb.append("} Save from stack; from stack?").append(fromStack);      sb.append("; object=").append(param);      digester.log.debug(sb.toString());    }  }  if (param != null) {    Object parameters[]=(Object[])digester.peekParams();    parameters[paramIndex]=param;  }}  }
class C{  public void testFloatValuePosRounded1(){  byte[] a={-128,1,-1,-4,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5475195E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  private synchronized void updateTimerTable(Integer notifID){  Object[] obj=timerTable.get(notifID);  Date date=(Date)obj[TIMER_DATE_INDEX];  Long period=(Long)obj[TIMER_PERIOD_INDEX];  Long nbOccurences=(Long)obj[TIMER_NB_OCCUR_INDEX];  Boolean fixedRate=(Boolean)obj[FIXED_RATE_INDEX];  TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];  if (period.longValue() != 0) {    if ((nbOccurences.longValue() == 0) || (nbOccurences.longValue() > 1)) {      date.setTime(date.getTime() + period.longValue());      obj[TIMER_NB_OCCUR_INDEX]=Long.valueOf(java.lang.Math.max(0L,(nbOccurences.longValue() - 1)));      nbOccurences=(Long)obj[TIMER_NB_OCCUR_INDEX];      if (isActive == true) {        if (fixedRate.booleanValue()) {          alarmClock=new TimerAlarmClock(this,date);          obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;          timer.schedule(alarmClock,alarmClock.next);        } else {          alarmClock=new TimerAlarmClock(this,period.longValue());          obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;          timer.schedule(alarmClock,alarmClock.timeout);        }      }      if (TIMER_LOGGER.isLoggable(Level.FINER)) {        TimerNotification notif=(TimerNotification)obj[TIMER_NOTIF_INDEX];        StringBuilder strb=new StringBuilder().append("update timer notification with:").append("\n\tNotification source = ").append(notif.getSource()).append("\n\tNotification type = ").append(notif.getType()).append("\n\tNotification ID = ").append(notifID).append("\n\tNotification date = ").append(date).append("\n\tNotification period = ").append(period).append("\n\tNotification nb of occurrences = ").append(nbOccurences).append("\n\tNotification executes at fixed rate = ").append(fixedRate);        TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"updateTimerTable",strb.toString());      }    } else {      if (alarmClock != null) {        alarmClock.cancel();      }      timerTable.remove(notifID);    }  } else {    if (alarmClock != null) {      alarmClock.cancel();    }    timerTable.remove(notifID);  }}  }
class C{  public Set searchAssignableDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,level);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_WATCHED_VIDEO\" ("+ "\"VIDEOYOUKUVID\" TEXT PRIMARY KEY NOT NULL ,"+ "\"VIDEOBACKGROUND\" TEXT,"+ "\"VIDEOTITLE\" TEXT,"+ "\"VIDEOWATCHTIME\" INTEGER,"+ "\"VIDEODURATION\" INTEGER,"+ "\"VIDEOPLAYTIME\" INTEGER,"+ "\"VIDEO_ENDED\" INTEGER);");}  }
class C{  public InvalidRedirectUri(){  super(400,"invalid_redirect_uri","One or more redirect_uri values are invalid.");}  }
class C{  public void delete(String pid) throws IOException {  logger.debug("delete call for {}",pid);  Object removed=tempStore.remove(pid);  if (removed != null) {    logger.debug("Deleted {} from temporary store",pid);  }  try {    if (isReady(0) && requireRepository) {      String id=pidToId(pid);      boolean retry;      String rev=null;      do {        retry=false;        try {          ReadRequest readRequest=Requests.newReadRequest(id);          Map<String,Object> existing=repo.read(readRequest).getContent().asMap();          if (existing != null) {            rev=(String)existing.get("_rev");            DeleteRequest r=Requests.newDeleteRequest(id);            r.setRevision(rev);            repo.delete(r);            logger.debug("Deleted {}",pid);          }        } catch (        PreconditionFailedException ex) {          logger.debug("Concurrent change during delete, retrying {} {}",pid,rev);          retry=true;        }catch (        NotFoundException ex) {        }      } while (retry);    }  } catch (  ResourceException ex) {    throw new IOException("Failed to delete configuration + " + pid + " in repository: "+ ex.getMessage(),ex);  }}  }
class C{  public synchronized boolean add(Object obj){  TracesMessage log=(TracesMessage)obj;  long ts=Long.parseLong(log.getTime());  if (ts < startTime || startTime < 0)   startTime=ts;  return super.add(obj);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public XmlStreamReaderException(String msg,String ctMime,String ctEnc,String bomEnc,String xmlGuessEnc,String xmlEnc){  super(msg);  contentTypeMime=ctMime;  contentTypeEncoding=ctEnc;  bomEncoding=bomEnc;  xmlGuessEncoding=xmlGuessEnc;  xmlEncoding=xmlEnc;}  }
class C{  public Scheme(final String name,final SocketFactory factory,final int port){  if (name == null) {    throw new IllegalArgumentException("Scheme name may not be null");  }  if (factory == null) {    throw new IllegalArgumentException("Socket factory may not be null");  }  if ((port <= 0) || (port > 0xffff)) {    throw new IllegalArgumentException("Port is invalid: " + port);  }  this.name=name.toLowerCase(Locale.ENGLISH);  this.socketFactory=factory;  this.defaultPort=port;  this.layered=(factory instanceof LayeredSocketFactory);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public String valueTypeName(Field field){  Type items=getApiaryConfig().getType(field.getTypeUrl());  return typeName(items,getField(items,"value"),"value");}  }
class C{  public Instant plusSeconds(long secondsToAdd){  return plus(secondsToAdd,0);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    if (requestEvent.getDialog() != null) {      logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());      Response response=protocolObjects.messageFactory.createResponse(200,request);      if (serverTransactionId != null) {        serverTransactionId.sendResponse(response);      }      logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());      this.byeSeen=true;    } else {      logger.info("Dropping stray request " + request);    }  } catch (  Exception ex) {    ex.printStackTrace();    logger.error("Unexpected exception",ex);    TestCase.fail("Unexpected exception");  }}  }
class C{  @Advice.OnMethodExit public static void exit(@Advice.Enter long startTime,@Advice.Argument(0) CQLStatement statement,@Advice.Argument(1) QueryState queryState,@Advice.Argument(2) QueryOptions options,@Advice.Return ResultMessage result){  ConnectorImpl.queryProcessorWrapper().processStatement(statement,queryState,options,startTime,result,null);}  }
class C{  public static int mainCLI(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream,InputStream inStream){  int exitCode;  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  try {    WaitForFileDelete wffd=new WaitForFileDelete(out,err,System.in);    exitCode=wffd.mainWait(args);    if (exitCode != EXIT_CODE_SUCCESS) {      exitCode=filterExitCode(exitCode);    }  } catch (  Exception e) {    e.printStackTrace();    exitCode=EXIT_CODE_INTERNAL_ERROR;  }  return exitCode;}  }
class C{  public AccessibleRelation(String key,Object[] target){  this.key=key;  this.target=target;}  }
class C{  private String createLicenseKey(final String licenseKey){  if (validateLicenseKey(licenseKey)) {    StringBuilder sb=new StringBuilder();    for (    int i : LICENSE_CHARS) {      sb.append(licenseKey.charAt(i));    }    return sb.toString();  }  return "";}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling arc: " + new Rectangle(x,y,width,height)+ " startAngle: "+ startAngle+ " arcAngle: "+ arcAngle);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillArc(x,y,width,height,startAngle,arcAngle);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillArc(x,y,width,height,startAngle,arcAngle);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyReferenceType createPolicyReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyReferenceTypeImpl();}  }
class C{  public boolean postSingleSignOnFailure(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile,int failureCode){  return false;}  }
class C{  final void removeThread(Thread thread) throws IllegalThreadStateException {synchronized (threadRefs) {    for (Iterator<Thread> i=threads.iterator(); i.hasNext(); ) {      if (i.next().equals(thread)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public CannotProceedException(){  super();}  }
class C{  public XACMLAuthzDecisionQuery createXACMLAuthzDecisionQuery(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_QUERY);  if (obj == null) {    return new XACMLAuthzDecisionQueryImpl();  } else {    return (XACMLAuthzDecisionQuery)obj;  }}  }
class C{  public static void saveAsASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  @Override public void reset() throws IOException {  fInputStream.reset();}  }
class C{  public void test_update$BII() throws Exception {  for (int index=1; index < 4; index++) {    Cipher c=Cipher.getInstance("DESEDE/CBC/PKCS5Padding");    byte[] keyMaterial=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".key");    DESedeKeySpec keySpec=new DESedeKeySpec(keyMaterial);    SecretKeyFactory skf=SecretKeyFactory.getInstance("DESEDE");    Key k=skf.generateSecret(keySpec);    byte[] ivMaterial=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".iv");    IvParameterSpec iv=new IvParameterSpec(ivMaterial);    c.init(Cipher.DECRYPT_MODE,k,iv);    ByteArrayOutputStream baos=new ByteArrayOutputStream();    byte[] input=new byte[256];    String resPath="hyts_" + "des-ede3-cbc.test" + index + ".ciphertext";    File resources=Support_Resources.createTempFolder();    Support_Resources.copyFile(resources,null,resPath);    InputStream is=Support_Resources.getStream(resPath);    int bytesRead=is.read(input,0,256);    while (bytesRead > 0) {      byte[] output=c.update(input,0,bytesRead);      if (output != null) {        baos.write(output);      }      bytesRead=is.read(input,0,256);    }    byte[] output=c.doFinal();    if (output != null) {      baos.write(output);    }    byte[] decipheredCipherText=baos.toByteArray();    is.close();    byte[] plaintextBytes=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".plaintext");    assertEquals("Operation produced incorrect results for index " + index,Arrays.toString(plaintextBytes),Arrays.toString(decipheredCipherText));  }  Cipher cipher=Cipher.getInstance("DESEDE/CBC/PKCS5Padding");  try {    cipher.update(new byte[64],0,32);    fail();  } catch (  IllegalStateException expected) {  }}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  void notifyReplicaOnline(DN domainDN,int serverId) throws ChangelogException {synchronized (domainsLock) {    final String domainId=domains.get(domainDN);    if (domainId == null) {      return;    }    final File offlineFile=new File(getServerIdPath(domainId,serverId),REPLICA_OFFLINE_STATE_FILENAME);    if (offlineFile.exists()) {      final boolean isDeleted=offlineFile.delete();      if (!isDeleted) {        throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_DELETE_REPLICA_OFFLINE_STATE_FILE.get(offlineFile.getPath(),domainDN.toString(),serverId));      }    }    changelogState.removeOfflineReplica(domainDN,serverId);  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public LineNumberReader(Reader in,int sz){  super(in,sz);}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  private static void showImpl(ProviderImpl impl){  System.out.println("Provider implementation:");  System.out.println("Classname: " + impl.getClassname());  System.out.println("Vendor: " + impl.getVendor());  System.out.println("Version: " + impl.getVersion());  System.out.println("Impl index: " + impl.getIndex());}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.RetrievalMethodElement createRetrievalMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RetrievalMethodElementImpl();}  }
class C{  protected PrintStream findStream(){  PrintStream ps=streams.get();  if (ps == null) {    ps=wrapped;  }  return ps;}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  XSLTElementProcessor elemProcessor=getCurrentProcessor();  XSLTElementDef def=elemProcessor.getElemDef();  if (def.getType() != XSLTElementDef.T_PCDATA)   elemProcessor=def.getProcessorFor(null,"text()");  if (null == elemProcessor) {    if (!XMLCharacterRecognizer.isWhiteSpace(ch,start,length))     error(XSLMessages.createMessage(XSLTErrorResources.ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION,null),null);  } else   elemProcessor.characters(this,ch,start,length);}  }
class C{  public void addItem(String name){  radioDataModel.add(new RadioItem(name));}  }
class C{  public static PasswordModifyExtendedResult unmodifiablePasswordModifyExtendedResult(final PasswordModifyExtendedResult result){  if (result instanceof UnmodifiablePasswordModifyExtendedResultImpl) {    return result;  }  return new UnmodifiablePasswordModifyExtendedResultImpl(result);}  }
class C{  public SIPHeader parse() throws ParseException {  RouteList routeList=new RouteList();  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Route route=new Route();      super.parse(route);      routeList.add(route);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return routeList;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public IllegalTransactionStateException(String message,Reason reason){  super(message);  this.reason=reason;}  }
class C{  public void test_before_after(){  Calendar early=Calendar.getInstance();  Calendar late=Calendar.getInstance();  early.set(2008,3,20,17,28,12);  late.set(2008,3,20,17,28,22);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,20,17,18,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,20,17,28,12);  late.set(2008,3,20,27,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,10,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,2,20,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2007,3,20,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));}  }
class C{  public long memPercentToBytes(int percent){  return (reservableMemory * percent / 100) * ONE_MEGABYTE;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private boolean throttled(){  boolean throttled=false;  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);  String sThrottle=prefs.getString(getString(R.string.pref_key_throttle),THROTTLE_DEFAULT);  int throttle=Integer.parseInt(sThrottle);  CoreEventLogsDbHelper coreEventLogsDbHelper=new CoreEventLogsDbHelper(this);  if ((throttle != THROTTLE_DISABLED) && (coreEventLogsDbHelper.getLogCountDuringLastMinute() > throttle)) {    String log=getString(R.string.throttle_alert_msg,throttle,coreEventLogsDbHelper.getLogCountDuringLastMinute());    Logger.w(TAG,log);    CoreGeneralLogsDbHelper coreGeneralLogsDbHelper=new CoreGeneralLogsDbHelper(this);    GeneralLog generalLog=new GeneralLog(log,Logger.INFO);    coreGeneralLogsDbHelper.insert(generalLog);    coreGeneralLogsDbHelper.close();    UtilUI.showNotification(this,UtilUI.NOTIFICATION_WARN,getString(R.string.throttle_alert_title),log.toString());    throttled=true;  }  coreEventLogsDbHelper.close();  return throttled;}  }
class C{  @Override public void addObject() throws Exception {  assertOpen();  if (factory == null) {    throw new IllegalStateException("Cannot add objects without a factory.");  }  final PooledObject<T> p=create();  addIdleObject(p);}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public TagStructureContext flushPageTags(PdfPage page){  PdfStructTreeRoot structTreeRoot=document.getStructTreeRoot();  Collection<PdfMcr> pageMcrs=structTreeRoot.getPageMarkedContentReferences(page);  if (pageMcrs != null) {    for (    PdfMcr mcr : pageMcrs) {      PdfStructElem parent=(PdfStructElem)mcr.getParent();      flushParentIfBelongsToPage(parent,page);    }  }  return this;}  }
class C{  protected static PdfLayer createTitleSilent(String title,PdfDocument document){  if (title == null)   throw new IllegalArgumentException("Invalid title argument");  PdfLayer layer=new PdfLayer(document);  layer.title=title;  return layer;}  }
class C{  private void validateDnsNames(Set dnsNameSet) throws PolicyException {  Iterator dnsNames=dnsNameSet.iterator();  while (dnsNames.hasNext()) {    String dnsName=(String)dnsNames.next();    validateDnsName(dnsName);    dnsList.add(dnsName.toLowerCase());  }}  }
class C{  private boolean isLECPRequest(HttpServletRequest request){  String lecpHeader=request.getHeader(IFSConstants.LECP_HEADER_NAME);  if (lecpHeader != null) {    FSUtils.debug.message("FSSSOAndFedService: is LECP request.");    return true;  }  String contentType=request.getHeader("content-type");  if (contentType != null && contentType.startsWith("text/xml")) {    return true;  }  return false;}  }
class C{  public boolean validate(Set<String> values){  if (!CollectionUtils.isEmpty(values)) {    for (    String val : values) {      if (val != null) {        StringTokenizer st=new StringTokenizer(val,"|");        String[] tokens=new String[6];        int count=0;        while (st.hasMoreTokens()) {          tokens[count++]=st.nextToken();          if (count > 5) {            break;          }        }        String wildcardPattern=null;        String oneLevelPattern=null;        for (int i=0; i < count; i++) {          int equal=tokens[i].indexOf("=");          String name=tokens[i].substring(0,equal);          String value=tokens[i].substring(equal + 1);          if (debug.messageEnabled()) {            debug.message("ResourceComparatorValidator.validate():Attr Name = " + name + " Attr Value = "+ value);          }          if (name.equalsIgnoreCase(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD)) {            wildcardPattern=value;          } else           if (name.equalsIgnoreCase(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD)) {            oneLevelPattern=value;          }        }        if ((wildcardPattern != null) && (oneLevelPattern != null)) {          if (wildcardPattern.equals(oneLevelPattern)) {            debug.error("ResourceComparatorValidator.validate()" + "Wildcard and one level wildcard pattern " + "cannot be same");            return false;          }          if (!wildcardPattern.contains(oneLevelPattern) && !oneLevelPattern.contains(wildcardPattern)) {            boolean overlap=false;            if (debug.messageEnabled()) {              debug.message("ResourceComparatorValidator.validate():about to do overlap check");            }            int oneLevelWildLength=oneLevelPattern.length();            int wildcardLength=wildcardPattern.length();            char[] wildcard=wildcardPattern.toCharArray();            char[] oneWildcard=oneLevelPattern.toCharArray();            for (int i=0; i < wildcardPattern.length(); i++) {              for (int j=0; j < oneLevelPattern.length(); j++) {                if (wildcard[i] == oneWildcard[j]) {                  String remString1=String.valueOf(wildcard,i,wildcardLength - i);                  String remString2=String.valueOf(oneWildcard,j,oneLevelWildLength - j);                  if (oneLevelPattern.startsWith(remString1) || wildcardPattern.startsWith(remString2)) {                    overlap=true;                    break;                  }                }              }              if (overlap) {                break;              }            }            if (overlap) {              debug.error("ResourceComparatorValidator.validate():Wildcard and one level " + "wildcard pattern cannot be overlapping");              return false;            }          }        }      }    }  }  return true;}  }
class C{  public TransactionRef(){  this(null,null);}  }
class C{  private static final byte[] toOctets(InetAddress ip){  byte[] octets=new byte[6];  octets[0]=(byte)AttributeType.NAS_IP_ADDRESS.getTypeCode();  octets[1]=6;  byte[] addr=ip.getAddress();  octets[2]=addr[0];  octets[3]=addr[1];  octets[4]=addr[2];  octets[5]=addr[3];  return octets;}  }
class C{  public Assertion createSSOAssertion(String id,AssertionArtifact artifact,HttpServletRequest request,HttpServletResponse response,String destID,String targetUrl,String version) throws SAMLException {  List attributes=null;  Map partnerURLs=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);  SAMLServiceManager.SOAPEntry partnerEntry=(SAMLServiceManager.SOAPEntry)partnerURLs.get(destID);  if (partnerEntry != null) {    try {      if (sessionProvider == null) {        throw new SAMLException(SAMLUtils.bundle.getString("nullSessionProvider"));      }      Object userSession=sessionProvider.getSession(id);      ConsumerSiteAttributeMapper cMapper=partnerEntry.getConsumerSiteAttributeMapper();      if (cMapper != null) {        attributes=cMapper.getAttributes(userSession,request,response,targetUrl);      } else {        PartnerSiteAttributeMapper pMapper=partnerEntry.getPartnerSiteAttributeMapper();        if (pMapper != null) {          attributes=pMapper.getAttributes(userSession,targetUrl);        } else {          SiteAttributeMapper mapper=partnerEntry.getSiteAttributeMapper();          if (mapper != null) {            attributes=mapper.getAttributes(userSession);          }        }      }    } catch (    SessionException ssoe) {      SAMLUtils.debug.error("AssertionManager.createAssertion(id):" + " exception retrieving info from the Session",ssoe);      return null;    }  }  String nameIDFormat=request.getParameter(SAMLConstants.NAME_ID_FORMAT);  if (artifact == null) {    if (version.equals(SAMLConstants.ASSERTION_VERSION_1_1)) {      return createAssertion(id,artifact,destID,attributes,SAMLConstants.CONFIRMATION_METHOD_BEARER,1,nameIDFormat);    } else {      return createAssertion(id,artifact,destID,attributes,SAMLConstants.CONFIRMATION_METHOD_BEARER,0,nameIDFormat);    }  } else {    if (version == null || version.equals(SAMLConstants.ASSERTION_VERSION_1_0)) {      return createAssertion(id,artifact,destID,attributes,SAMLConstants.DEPRECATED_CONFIRMATION_METHOD_ARTIFACT,0,nameIDFormat);    } else     if (version.equals(SAMLConstants.ASSERTION_VERSION_1_1)) {      return createAssertion(id,artifact,destID,attributes,SAMLConstants.CONFIRMATION_METHOD_ARTIFACT,1,nameIDFormat);    } else {      SAMLUtils.debug.error("Input version " + version + " is not supported.");      return null;    }  }}  }
class C{  public OBJECT_NOT_EXIST(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AcceptParser.parse");  AcceptList list=new AcceptList();  try {    headerName(TokenTypes.ACCEPT);    Accept accept=new Accept();    accept.setHeaderName(SIPHeaderNames.ACCEPT);    this.lexer.SPorHT();    if (lexer.startsId()) {      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      accept.setContentType(token.getTokenValue());      this.lexer.match('/');      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      accept.setContentSubType(token.getTokenValue());      this.lexer.SPorHT();      super.parse(accept);    }    list.add(accept);    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      accept=new Accept();      if (lexer.startsId()) {        this.lexer.match(TokenTypes.ID);        Token token=lexer.getNextToken();        accept.setContentType(token.getTokenValue());        this.lexer.match('/');        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        accept.setContentSubType(token.getTokenValue());        this.lexer.SPorHT();        super.parse(accept);      }      list.add(accept);    }    return list;  }  finally {    if (debug)     dbg_leave("AcceptParser.parse");  }}  }
class C{  public Element sign(String xmlString,String idValue,PrivateKey privateKey,X509Certificate cert) throws SAML2Exception {  String classMethod="FMSigProvider.sign: ";  if (StringUtils.isEmpty(xmlString)) {    SAML2SDKUtils.debug.error(classMethod + "The xml to sign was empty.");    throw new SAML2Exception(SAML2SDKUtils.BUNDLE_NAME,"emptyInputMessage",new String[]{"xml"});  }  if (StringUtils.isEmpty(idValue)) {    SAML2SDKUtils.debug.error(classMethod + "The idValue was empty.");    throw new SAML2Exception(SAML2SDKUtils.BUNDLE_NAME,"emptyInputMessage",new String[]{"idValue"});  }  if (privateKey == null) {    SAML2SDKUtils.debug.error(classMethod + "The private key was null.");    throw new SAML2Exception(SAML2SDKUtils.BUNDLE_NAME,"nullInputMessage",new String[]{"private key"});  }  Document doc=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (doc == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  Element root=doc.getDocumentElement();  XMLSignature sig=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);  } catch (  XMLSecurityException xse1) {    throw new SAML2Exception(xse1);  }  root.setIdAttribute(SAML2Constants.ID,true);  try {    if ((sigAlg == null) || (sigAlg.trim().length() == 0)) {      if (privateKey.getAlgorithm().equalsIgnoreCase(SAML2Constants.DSA)) {        sigAlg=XMLSignature.ALGO_ID_SIGNATURE_DSA;      } else {        if (privateKey.getAlgorithm().equalsIgnoreCase(SAML2Constants.RSA)) {          sigAlg=XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1;        }      }    }    sig=new XMLSignature(doc,"",sigAlg,c14nMethod);  } catch (  XMLSecurityException xse2) {    throw new SAML2Exception(xse2);  }  Node firstChild=root.getFirstChild();  while (firstChild != null && (firstChild.getLocalName() == null || !firstChild.getLocalName().equals("Issuer"))) {    firstChild=firstChild.getNextSibling();  }  Node nextSibling=null;  if (firstChild != null) {    nextSibling=firstChild.getNextSibling();  }  if (nextSibling == null) {    root.appendChild(sig.getElement());  } else {    root.insertBefore(sig.getElement(),nextSibling);  }  sig.getSignedInfo().addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());  Transforms transforms=new Transforms(doc);  try {    transforms.addTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE);  } catch (  TransformationException te1) {    throw new SAML2Exception(te1);  }  try {    transforms.addTransform(transformAlg);  } catch (  TransformationException te2) {    throw new SAML2Exception(te2);  }  String ref="#" + idValue;  try {    sig.addDocument(ref,transforms,digestAlg);  } catch (  XMLSignatureException sige1) {    throw new SAML2Exception(sige1);  }  if (cert != null) {    try {      sig.addKeyInfo(cert);    } catch (    XMLSecurityException xse3) {      throw new SAML2Exception(xse3);    }  }  try {    sig.sign(privateKey);  } catch (  XMLSignatureException sige2) {    throw new SAML2Exception(sige2);  }  if (SAML2SDKUtils.debug.messageEnabled()) {    SAML2SDKUtils.debug.message(classMethod + "Signing is successful.");  }  return sig.getElement();}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementType createAsymmetricKeyAgreementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementTypeImpl();}  }
class C{  public Size(int width,int height){  mWidth=width;  mHeight=height;}  }
class C{  public void addColumn(final Object columnName,final Vector columnData){  this.columnIdentifiers.addElement(columnName);  if (columnData != null) {    final int columnSize=columnData.size();    if (columnSize > getRowCount()) {      this.dataVector.setSize(columnSize);    }    justifyRows(0,getRowCount());    final int newColumn=getColumnCount() - 1;    for (int i=0; i < columnSize; i++) {      final Vector row=(Vector)this.dataVector.elementAt(i);      row.setElementAt(columnData.elementAt(i),newColumn);    }  } else {    justifyRows(0,getRowCount());  }  fireTableStructureChanged();}  }
class C{  public static BooleanArgument startTLSArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildArgument();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node streetAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  streetAttr=attributes.getNamedItem("street");  assertInstanceOf("typeAssert",Attr.class,streetAttr);  attrName=streetAttr.getNodeName();  assertEquals("nodeName","street",attrName);  attrName=((Attr)streetAttr).getName();  assertEquals("attrName","street",attrName);}  }
class C{  public static FeatureCollection fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  gson.registerTypeAdapter(Geometry.class,new GeometryDeserializer());  return gson.create().fromJson(json,FeatureCollection.class);}  }
class C{  synchronized static DelegationInterface loadDelegationPlugin() throws DelegationException {  if (pluginInstance == null) {    try {      SSOToken privilegedToken=getAdminToken();      ServiceSchemaManager ssm=new ServiceSchemaManager(DELEGATION_SERVICE,privilegedToken);      ServiceSchema globalSchema=ssm.getGlobalSchema();      if (globalSchema != null) {        Map attributeDefaults=globalSchema.getAttributeDefaults();        if (attributeDefaults != null) {          subjectIdTypes.addAll((Set)attributeDefaults.get(SUBJECT_ID_TYPES));        }      }      if (debug.messageEnabled()) {        debug.message("Configured Subject ID Types: " + subjectIdTypes);      }      Set pluginNames=ssm.getPluginSchemaNames(DELEGATION_PLUGIN_INTERFACE,null);      if (pluginNames == null) {        throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);      }      if (debug.messageEnabled()) {        debug.message("pluginNames=" + pluginNames);      }      Iterator it=pluginNames.iterator();      if (it.hasNext()) {        String pluginName=(String)it.next();        PluginSchema ps=ssm.getPluginSchema(pluginName,DELEGATION_PLUGIN_INTERFACE,null);        if (ps == null) {          throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);        }        String className=ps.getClassName();        if (debug.messageEnabled()) {          debug.message("Plugin class name:" + className);        }        DelegationInterface instance=(DelegationInterface)Class.forName(className).newInstance();        instance.initialize(privilegedToken,null);        pluginInstance=instance;        if (debug.messageEnabled()) {          debug.message("Successfully created " + "a delegation plugin instance");        }      } else {        throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);      }    } catch (    Exception e) {      debug.error("Unable to get an instance of plugin " + "for delegation",e);      pluginInstance=null;      throw new DelegationException(e);    }  }  return pluginInstance;}  }
class C{  public int write(ByteBuffer buf,NioChannel socket,Selector selector,long writeTimeout,boolean block) throws IOException {  if (SHARED && block) {    return blockingSelector.write(buf,socket,writeTimeout);  }  SelectionKey key=null;  int written=0;  boolean timedout=false;  int keycount=1;  long time=System.currentTimeMillis();  try {    while ((!timedout) && buf.hasRemaining()) {      int cnt=0;      if (keycount > 0) {        cnt=socket.write(buf);        if (cnt == -1)         throw new EOFException();        written+=cnt;        if (cnt > 0) {          time=System.currentTimeMillis();          continue;        }        if (cnt == 0 && (!block))         break;      }      if (selector != null) {        if (key == null)         key=socket.getIOChannel().register(selector,SelectionKey.OP_WRITE); else         key.interestOps(SelectionKey.OP_WRITE);        if (writeTimeout == 0) {          timedout=buf.hasRemaining();        } else         if (writeTimeout < 0) {          keycount=selector.select();        } else {          keycount=selector.select(writeTimeout);        }      }      if (writeTimeout > 0 && (selector == null || keycount == 0))       timedout=(System.currentTimeMillis() - time) >= writeTimeout;    }    if (timedout)     throw new SocketTimeoutException();  }  finally {    if (key != null) {      key.cancel();      if (selector != null)       selector.selectNow();    }  }  return written;}  }
class C{  public static void putBoolean(String key,boolean value){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putBoolean(key,value);  editor.apply();}  }
class C{  public static String addLogoutCookieToURL(String url,String logoutCookie,boolean isCookieSupported){  String logoutURL=null;  if ((logoutCookie == null) || (isCookieSupported)) {    logoutURL=url;  } else {    StringBuilder cookieString=new StringBuilder();    cookieString.append(URLEncDec.encode(getCookieName())).append("=").append(URLEncDec.encode(logoutCookie));    if (url.indexOf("?") != -1) {      cookieString.insert(0,"&amp;");    } else {      cookieString.insert(0,"?");    }    cookieString.insert(0,url);    logoutURL=cookieString.toString();    if (utilDebug.messageEnabled()) {      utilDebug.message("cookieString is : " + cookieString);    }  }  return logoutURL;}  }
class C{  public SessionNameFieldParser(String sessionNameField){  this.lexer=new Lexer("charLexer",sessionNameField);}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  RestAssured.baseURI=BASE_URI;  RestAssured.port=PORT;  f=Fixtures.getInstance();  RestExpressManager.getManager().ensureRestExpressRunning();}  }
class C{  void registerConnectionFinalizer(Runnable r){synchronized (connectionFinalizerLock) {    if (connectionFinalizer != null) {      connectionFinalizerPendingJobQueue.add(r);    } else {      r.run();    }  }}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public boolean isSingleEntrySearch(){  return sizeLimit == 1 || SearchScope.BASE_OBJECT.equals(scope);}  }
class C{  private void addWorkerFailed(Worker w){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    if (w != null)     workers.remove(w);    decrementWorkerCount();    tryTerminate();  }  finally {    mainLock.unlock();  }}  }
class C{  public static JMenu createMenu(LocalizableMessage msg,LocalizableMessage description){  JMenu menu=new JMenu(msg.toString());  menu.getAccessibleContext().setAccessibleDescription(description.toString());  return menu;}  }
class C{  public void processSubscribe(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("notifier: got an Subscribe sending OK");    System.out.println("notifier:  " + request);    EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);    if (eventHeader == null) {      System.out.println("Cannot find event header.... dropping request.");      return;    }    Response response=messageFactory.createResponse(202,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Notifier <sip:127.0.0.1:5070>");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    System.out.println("got a server transaction " + st);    this.dialog=st.getDialog();    this.dialog.terminateOnBye(false);    if (dialog != null) {      System.out.println("Dialog " + dialog);      System.out.println("Dialog state " + dialog.getState());    }    st.sendResponse(response);    if (dialog != null) {      System.out.println("Dialog " + dialog);      System.out.println("Dialog state " + dialog.getState());    }    Request notifyRequest=dialog.createRequest(Request.NOTIFY);    SubscriptionStateHeader sstate=headerFactory.createSubscriptionStateHeader(SubscriptionStateHeader.ACTIVE);    notifyRequest.addHeader(sstate);    notifyRequest.addHeader(eventHeader);    ClientTransaction ct=udpProvider.getNewClientTransaction(notifyRequest);    dialog.sendRequest(ct);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public UnsupportedTemporalTypeException(String message){  super(message);}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  public PagedRequest(){  this(PAGE_FIRST,PAGE_SIZE);}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public void addMarkerToMap(LatLng latLng){  Marker marker=mGoogleMap.addMarker(new MarkerOptions().position(latLng).title("title").snippet("snippet"));  markers.add(marker);}  }
class C{  private void generateIterators(TagPluginContext ctxt){  ctxt.generateDeclaration("ObjectArrayIterator","private Iterator toIterator(final Object[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return a[index++];}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("booleanArrayIterator","private Iterator toIterator(final boolean[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Boolean(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("byteArrayIterator","private Iterator toIterator(final byte[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Byte(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("charArrayIterator","private Iterator toIterator(final char[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Character(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("shortArrayIterator","private Iterator toIterator(final short[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Short(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("intArrayIterator","private Iterator toIterator(final int[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Integer(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("longArrayIterator","private Iterator toIterator(final long[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Long(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("floatArrayIterator","private Iterator toIterator(final float[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Float(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("doubleArrayIterator","private Iterator toIterator(final double[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Double(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("enumIterator","private Iterator toIterator(final Enumeration e){\n" + "  return (new Iterator() {\n" + "    public boolean hasNext() {\n"+ "      return e.hasMoreElements();}\n"+ "    public Object next() {\n"+ "      return e.nextElement();}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_STRATEGY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"STRATEGYLISTJSON\" TEXT,"+ "\"STRATEGYTYPE\" TEXT);");}  }
class C{  public Script compile(File scriptFile) throws Exception {  return compile(scriptFile.getName(),new FileReader(scriptFile));}  }
class C{  public String encode(String value){  return doubleMetaphone(value);}  }
class C{  public static Byte valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseByte(string,radix));}  }
class C{  public void test_SelectGroupBy() throws SQLException {  String selectQuery="SELECT rating, SUM(snum) AS sum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " GROUP BY rating";  ResultSet result=statement.executeQuery(selectQuery);  HashMap<Integer,Integer> values=new HashMap<Integer,Integer>();  values.put(100,3006);  values.put(200,2005);  values.put(300,2009);  while (result.next()) {    int rating=result.getInt("rating");    int sum=result.getInt("sum");    assertTrue("Wrong value of rating field",values.containsKey(rating));    assertEquals("Wrong value of sum field",values.get(rating),new Integer(sum));    assertEquals(new Integer(sum),values.remove(rating));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  private void skip(Pattern pattern) throws GSERException {  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  if (matcher.find() && matcher.groupCount() >= 1) {    pos+=matcher.end(1);  } else {    LocalizableMessage msg=ERR_GSER_PATTERN_NO_MATCH.get(pattern.pattern(),gserValue.substring(pos,length));    throw new GSERException(msg);  }}  }
class C{  public PipedReader(PipedWriter src) throws IOException {  this(src,DEFAULT_PIPE_SIZE);}  }
class C{  public NonRepeatableRequestException(String message){  super(message);}  }
class C{  public FederationViewBean(){  super("Federation");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public ShapeTileOctagon to_octagon(){  if (rx < lx || uy < ly || lrx < ulx || urx < llx) {    return ShapeTileOctagon.EMPTY;  }  return new ShapeTileOctagon(Math.floor(lx),Math.floor(ly),Math.ceil(rx),Math.ceil(uy),Math.floor(ulx),Math.ceil(lrx),Math.floor(llx),Math.ceil(urx));}  }
class C{  public void initialize() throws Exception {  rootEntry.refresh(rootEntry.getFile());  File[] files=listFiles(rootEntry.getFile());  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(rootEntry,files[i]);  }  rootEntry.setChildren(children);}  }
class C{  public void testRoundMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  int precision=75;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String res="3.736186567876876578956958765675671119238118911893939591735E+102";  int resScale=-45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  protected boolean contains(String name){  return m_hashTable.containsKey(name);}  }
class C{  public static String normalize(String oid){  return oid.startsWith("OID.") ? oid.substring(4) : oid;}  }
class C{  public void newRowsAdded(TableModelEvent e){  justifyRows(e.getFirstRow(),e.getLastRow() + 1);  fireTableChanged(e);}  }
class C{  public void testSet_authorizer() throws Exception {  TableResult resPriv=null;  TableResult resPub=null;  TableResult emptyTable=new TableResult();  String insertPublic="insert into public_table values(1,2)";  String insertPrivate="insert into private_table values(1,2)";  db.exec("create table public_table(c1 integer, c2 integer);",null);  db.exec("create table private_table(c1 integer, c2 integer);",null);  db.exec(insertPublic,null);  db.exec(insertPrivate,null);  resPriv=db.get_table("select * from private_table");  resPub=db.get_table("select * from public_table");  AuthorizerCallback cb=new AuthorizerCallback();  db.set_authorizer(cb);  db.exec("select * from private_table",cb);  assertTrue(cb.wasCalled());  try {    db.exec(insertPublic,null);    fail("authorization failed");  } catch (  Exception e) {  }  try {    db.exec(insertPrivate,null);    fail("authorization failed");  } catch (  Exception e1) {  }}  }
class C{  private int[] parseYMD(String string){  string=string.trim();  try {    if (string.charAt(4) != '-' || string.charAt(7) != '-') {      throw new IllegalArgumentException("date must be yyyy-MM-dd");    }    int[] ymd=new int[3];    ymd[0]=Integer.valueOf(string.substring(0,4));    ymd[1]=Integer.valueOf(string.substring(5,7));    ymd[2]=Integer.valueOf(string.substring(8,10));    return ymd;  } catch (  NumberFormatException ex) {    throw new IllegalArgumentException("date must be yyyy-MM-dd",ex);  }}  }
class C{  private Style createResolvedStyle(String selector){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  Vector<String> elements=sb.getVector();  try {    boolean done;    int dotIndex=0;    int spaceIndex;    int poundIndex=0;    int lastIndex=0;    int length=selector.length();    while (lastIndex < length) {      if (dotIndex == lastIndex) {        dotIndex=selector.indexOf('.',lastIndex);      }      if (poundIndex == lastIndex) {        poundIndex=selector.indexOf('#',lastIndex);      }      spaceIndex=selector.indexOf(' ',lastIndex);      if (spaceIndex == -1) {        spaceIndex=length;      }      if (dotIndex != -1 && poundIndex != -1 && dotIndex < spaceIndex && poundIndex < spaceIndex) {        if (poundIndex < dotIndex) {          if (lastIndex == poundIndex) {            elements.addElement("");          } else {            elements.addElement(selector.substring(lastIndex,poundIndex));          }          if ((dotIndex + 1) < spaceIndex) {            elements.addElement(selector.substring(dotIndex + 1,spaceIndex));          } else {            elements.addElement(null);          }          if ((poundIndex + 1) == dotIndex) {            elements.addElement(null);          } else {            elements.addElement(selector.substring(poundIndex + 1,dotIndex));          }        } else         if (poundIndex < spaceIndex) {          if (lastIndex == dotIndex) {            elements.addElement("");          } else {            elements.addElement(selector.substring(lastIndex,dotIndex));          }          if ((dotIndex + 1) < poundIndex) {            elements.addElement(selector.substring(dotIndex + 1,poundIndex));          } else {            elements.addElement(null);          }          if ((poundIndex + 1) == spaceIndex) {            elements.addElement(null);          } else {            elements.addElement(selector.substring(poundIndex + 1,spaceIndex));          }        }        dotIndex=poundIndex=spaceIndex + 1;      } else       if (dotIndex != -1 && dotIndex < spaceIndex) {        if (dotIndex == lastIndex) {          elements.addElement("");        } else {          elements.addElement(selector.substring(lastIndex,dotIndex));        }        if ((dotIndex + 1) == spaceIndex) {          elements.addElement(null);        } else {          elements.addElement(selector.substring(dotIndex + 1,spaceIndex));        }        elements.addElement(null);        dotIndex=spaceIndex + 1;      } else       if (poundIndex != -1 && poundIndex < spaceIndex) {        if (poundIndex == lastIndex) {          elements.addElement("");        } else {          elements.addElement(selector.substring(lastIndex,poundIndex));        }        elements.addElement(null);        if ((poundIndex + 1) == spaceIndex) {          elements.addElement(null);        } else {          elements.addElement(selector.substring(poundIndex + 1,spaceIndex));        }        poundIndex=spaceIndex + 1;      } else {        elements.addElement(selector.substring(lastIndex,spaceIndex));        elements.addElement(null);        elements.addElement(null);      }      lastIndex=spaceIndex + 1;    }    int total=elements.size();    int numTags=total / 3;    String[] tags=new String[numTags];    String[] ids=new String[numTags];    String[] classes=new String[numTags];    for (int index=0, eIndex=total - 3; index < numTags; index++, eIndex-=3) {      tags[index]=elements.elementAt(eIndex);      classes[index]=elements.elementAt(eIndex + 1);      ids[index]=elements.elementAt(eIndex + 2);    }    return createResolvedStyle(selector,tags,ids,classes);  }  finally {    SearchBuffer.releaseSearchBuffer(sb);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public NodeSequence(Object nodeVector){  super(nodeVector);  if (nodeVector instanceof NodeVector) {    SetVector((NodeVector)nodeVector);  }  if (null != nodeVector) {    assertion(nodeVector instanceof NodeVector,"Must have a NodeVector as the object for NodeSequence!");    if (nodeVector instanceof DTMIterator) {      setIter((DTMIterator)nodeVector);      m_last=((DTMIterator)nodeVector).getLength();    }  }}  }
class C{  public LinkRef(Name linkName){  super(linkClassName,new StringRefAddr(linkAddrType,linkName.toString()));}  }
class C{  public MimeHeader(String name,String value){  this.name=name;  this.value=value;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private void removeNameForm(String definition,SchemaBuilder newSchemaBuilder,List<Modification> modifications,int currentPosition,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  String nfOID=SchemaUtils.parseNameFormOID(definition);  if (!currentSchema.hasNameForm(nfOID)) {    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_NAME_FORM.get(nfOID));  }  for (int i=currentPosition + 1; i < modifications.size(); i++) {    Modification m=modifications.get(i);    Attribute a=m.getAttribute();    if (m.getModificationType() != ModificationType.ADD || !a.getAttributeDescription().getAttributeType().equals(nameFormsType)) {      continue;    }    for (    ByteString v : a) {      try {        String oid=SchemaUtils.parseNameFormOID(v.toString());        if (nfOID.equals(oid)) {          return;        }      } catch (      DirectoryException de) {        logger.traceException(de);        throw de;      }    }  }  newSchemaBuilder.removeNameForm(nfOID);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getNameForm(nfOID)));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("*","street");  assertNull("namednodemapgetnameditemns05",attribute);}  }
class C{  public RoleList retrieveAllRoles(){  RELATION_LOGGER.entering(RelationSupport.class.getName(),"retrieveAllRoles");  RoleList result;synchronized (myRoleName2ValueMap) {    result=new RoleList(new ArrayList<Role>(myRoleName2ValueMap.values()));  }  RELATION_LOGGER.exiting(RelationSupport.class.getName(),"retrieveAllRoles");  return result;}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  public void changeStateAndNotify(SessionEventType eventType){  fireSessionEvent(eventType);  sessionLogging.logEvent(toSessionInfo(),eventType);  timedOutTimeInSeconds=MILLISECONDS.toSeconds(currentTimeMillis());  putProperty("SessionTimedOut",String.valueOf(timedOutTimeInSeconds));  sessionService.execSessionTimeoutHandlers(sessionID,eventType);  sessionService.destroyInternalSession(sessionID);}  }
class C{  public XMLCreator(){  this.errorList=new ArrayList<>();}  }
class C{  public void pushContext(){  int max=contexts.length;  contextPos++;  if (contextPos >= max) {    Context newContexts[]=new Context[max * 2];    System.arraycopy(contexts,0,newContexts,0,max);    max*=2;    contexts=newContexts;  }  currentContext=contexts[contextPos];  if (currentContext == null) {    contexts[contextPos]=currentContext=new Context();  }  if (contextPos > 0) {    currentContext.setParent(contexts[contextPos - 1]);  }}  }
class C{  public void startDocument() throws SAXException {  if (documentHandler != null)   documentHandler.startDocument();}  }
class C{  public static XMLReader createXMLReader(String className) throws SAXException {  return loadClass(ss.getContextClassLoader(),className);}  }
class C{  private BitSet(long[] words){  this.words=words;  this.wordsInUse=words.length;  checkInvariants();}  }
class C{  public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Integer valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseInt(string,radix));}  }
class C{  private void prepareParams(Node parent) throws JasperException {  if (parent == null)   return;  Node.Nodes subelements=parent.getBody();  if (subelements != null) {    for (int i=0; i < subelements.size(); i++) {      Node n=subelements.getNode(i);      if (n instanceof Node.ParamAction) {        Node.Nodes paramSubElements=n.getBody();        for (int j=0; (paramSubElements != null) && (j < paramSubElements.size()); j++) {          Node m=paramSubElements.getNode(j);          if (m instanceof Node.NamedAttribute) {            generateNamedAttributeValue((Node.NamedAttribute)m);          }        }      }    }  }}  }
class C{  public static IOFileFilter directoryFileFilter(){  return DirectoryFileFilter.DIRECTORY;}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  private PolicyDecision resetPolicyDecision(PolicyDecision pd1,PolicyDecision pd2,String serviceName){  Map actionDecisions1=pd1.getActionDecisions();  Map actionDecisions2=pd2.getActionDecisions();  actionDecisions2.clear();  Set actions=new HashSet();  actions.addAll(actionDecisions1.keySet());  Iterator iter=actions.iterator();  while (iter.hasNext()) {    String action=(String)iter.next();    ActionDecision ad1=(ActionDecision)actionDecisions1.get(action);    pd2.addActionDecision(ad1,policyProperties.getTrueValue(serviceName,action),policyProperties.getFalseValue(serviceName,action));  }  Map mergedReponseAttrsMap=new HashMap();  PolicyUtils.appendMapToMap(pd1.getResponseAttributes(),mergedReponseAttrsMap);  PolicyUtils.appendMapToMap(pd2.getResponseAttributes(),mergedReponseAttrsMap);  pd2.setResponseAttributes(mergedReponseAttrsMap);  return pd2;}  }
class C{  public static void access(Level level,String msgid,String data[],SSOToken session,String nameId){  if (logActive) {    try {      if (isAccessLoggable(level)) {        SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());        LogMessageProvider msgProvider=MessageProviderFactory.getProvider(LOG_MSG_XML);        LogRecord logRec=msgProvider.createLogRecord(msgid,data,session);        logRec.addLogInfo(TokenLogUtils.TOKEN_NAME_ID,nameId);        if (logRec != null) {          accessLogger.log(logRec,adminToken);        }      }    } catch (    IOException le) {      CoreTokenUtils.debug.error("TokenLogUtils.error:Couldn't write error log:",le);    }  }}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider(),mProv);    checkResult(cerPV);  }}  }
class C{  private void layoutChunk(RecyclerView.Recycler recycler,RecyclerView.State state,boolean isFillBottom){  layoutChunk(recycler,state,isFillBottom,false);}  }
class C{  public Enumeration children(){  if (children == null) {    return EMPTY_ENUMERATION;  } else {    return children.elements();  }}  }
class C{  public void testAlgorithmParameterGenerator04() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  for (int i=0; i < algs.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        AlgorithmParameterGenerator.getInstance(algs[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (provider: ".concat(invalidValues[j]));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  private boolean isFirstStrictlyGreaterThanLast(Number greater,Number less,String className){  if (className.equals("java.lang.Integer") || className.equals("java.lang.Byte") || className.equals("java.lang.Short")|| className.equals("java.lang.Long")) {    return (greater.longValue() > less.longValue());  } else   if (className.equals("java.lang.Float") || className.equals("java.lang.Double")) {    return (greater.doubleValue() > less.doubleValue());  } else {    MONITOR_LOGGER.logp(Level.FINEST,GaugeMonitor.class.getName(),"isFirstStrictlyGreaterThanLast","the threshold type is invalid");    return false;  }}  }
class C{  public LifecycleException(String message){  super(message);}  }
class C{  @CpsVmThreadOnly void launch(CpsBodyInvoker params,CpsThread currentThread,FlowHead head){  if (isLaunched())   throw new IllegalStateException("Already launched");  StepStartNode sn=addBodyStartFlowNode(head);  for (  Action a : params.startNodeActions) {    if (a != null)     sn.addAction(a);  }  StepContext sc=new CpsBodySubContext(context,sn);  for (  BodyExecutionCallback c : callbacks) {    c.onStart(sc);  }  try {    Object x=params.body.getBody(currentThread).call();synchronized (this) {      this.thread=currentThread;    }    onSuccess.receive(x);  } catch (  CpsCallableInvocation e) {    CpsThread t=currentThread.group.addThread(createContinuable(currentThread,e),head,ContextVariableSet.from(currentThread.getContextVariables(),params.contextOverrides));synchronized (this) {      t.resume(new Outcome(null,stopped));      assert this.thread == null;      this.thread=t;    }  }catch (  Throwable t) {synchronized (this) {      this.thread=currentThread;    }    onFailure.receive(t);  }}  }
class C{  public void deleteField(VorbisCommentFieldKey vorbisCommentFieldKey) throws KeyNotFoundException {  if (vorbisCommentFieldKey == null) {    throw new KeyNotFoundException();  }  super.deleteField(vorbisCommentFieldKey.getFieldName());}  }
class C{  public List<MappedMember> findFieldsByName(String text,boolean useOriginalName){  List<MappedMember> list=new ArrayList<MappedMember>();  for (  MappedMember mm : getFields()) {    if (useOriginalName ? mm.getOriginalName().equals(text) : mm.getNewName().equals(text)) {      list.add(mm);    }  }  return list;}  }
class C{  static private void printAnnotationArray(String prefix,Annotation[] arr){  TreeMap<String,Annotation> sorted=new TreeMap<String,Annotation>();  for (  Annotation a : arr) {    sorted.put(a.annotationType().getName(),a);  }  for (  Annotation a : sorted.values()) {    System.out.println(prefix + "  " + annotationToString(a));    System.out.println(prefix + "    " + a.annotationType());  }}  }
class C{  public StopProcessing(ResultCode resultCode,LocalizableMessage errorMessage){  this.errorMessage=errorMessage;  this.resultCode=resultCode;  this.matchedDN=null;  this.referralURLs=null;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event,false);  resetButtonState(TBL_BUTTON_DELETE);  AgentsModel model=(AgentsModel)getModel();  String agentType=getDisplayIDType();  Object[] param={agentType};  ptModel.setPageTitleText(model.getLocalizedString("agenttype." + agentType));  ptModel.setPageTitleHelpMessage(model.getLocalizedString("agenttype." + agentType + ".help"));  tblModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agents.title.name"),param));  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param));  tblModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param));  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agent.groups.title.name"),param));  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param));  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param));  getAgentNames();  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);  b.setDisabled(true);  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);  b.setDisabled(true);}  }
class C{  public final void testGetX(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(1,dpks.getX().intValue());}  }
class C{  public void finishResponse(){  try {    if (writer != null) {      writer.close();    } else {      if (stream != null)       stream.close();    }  } catch (  IOException e) {  }}  }
class C{  public final boolean isWarnEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);}  }
class C{  public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null Parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  private boolean defaultResolve(){switch (typeString.charAt(0)) {case 'I':    type=int.class;  return true;case 'B':type=byte.class;return true;case 'C':type=char.class;return true;case 'S':type=short.class;return true;case 'Z':type=boolean.class;return true;case 'J':type=long.class;return true;case 'F':type=float.class;return true;case 'D':type=double.class;return true;default :type=Object.class;return false;}}  }
class C{  private static int[][] parse(String members){  Vector theRanges=new Vector();  int n=(members == null ? 0 : members.length());  int i=0;  int state=0;  int lb=0;  int ub=0;  char c;  int digit;  while (i < n) {    c=members.charAt(i++);switch (state) {case 0:      if (Character.isWhitespace(c)) {        state=0;      } else       if ((digit=Character.digit(c,10)) != -1) {        lb=digit;        state=1;      } else {        throw new IllegalArgumentException();      }    break;case 1:  if (Character.isWhitespace(c)) {    state=2;  } else   if ((digit=Character.digit(c,10)) != -1) {    lb=10 * lb + digit;    state=1;  } else   if (c == '-' || c == ':') {    state=3;  } else   if (c == ',') {    accumulate(theRanges,lb,lb);    state=6;  } else {    throw new IllegalArgumentException();  }break;case 2:if (Character.isWhitespace(c)) {state=2;} else if (c == '-' || c == ':') {state=3;} else if (c == ',') {accumulate(theRanges,lb,lb);state=6;} else {throw new IllegalArgumentException();}break;case 3:if (Character.isWhitespace(c)) {state=3;} else if ((digit=Character.digit(c,10)) != -1) {ub=digit;state=4;} else {throw new IllegalArgumentException();}break;case 4:if (Character.isWhitespace(c)) {state=5;} else if ((digit=Character.digit(c,10)) != -1) {ub=10 * ub + digit;state=4;} else if (c == ',') {accumulate(theRanges,lb,ub);state=6;} else {throw new IllegalArgumentException();}break;case 5:if (Character.isWhitespace(c)) {state=5;} else if (c == ',') {accumulate(theRanges,lb,ub);state=6;} else {throw new IllegalArgumentException();}break;case 6:if (Character.isWhitespace(c)) {state=6;} else if ((digit=Character.digit(c,10)) != -1) {lb=digit;state=1;} else {throw new IllegalArgumentException();}break;}}switch (state) {case 0:break;case 1:case 2:accumulate(theRanges,lb,lb);break;case 4:case 5:accumulate(theRanges,lb,ub);break;case 3:case 6:throw new IllegalArgumentException();}return canonicalArrayForm(theRanges);}  }
class C{  public void insert_via_obstacle(PlaArea p_area,int p_layer,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,int p_clearance_class,int p_component_no,String p_name,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_via_obstacle: p_area is null");    return;  }  BrdAreaObstacleVia obs=new BrdAreaObstacleVia(p_area,p_layer,p_translation,p_rotation_in_degree,p_side_changed,p_clearance_class,0,p_component_no,p_name,p_fixed_state,this);  insert_item(obs);}  }
class C{  public static void error(Level level,String msgid,String data[]){  error(level,msgid,data,null);}  }
class C{  public AddResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public static void registerShortCircuit(OperationType operation,String section,int resultCode){  shortCircuits.put(operation + "/" + section.toLowerCase(),resultCode);}  }
class C{  @DataProvider(name="validBase64Data") public Object[][] createValidBase64Data(){  return new Object[][]{{"",""},{"00","AA=="},{"01","AQ=="},{"02","Ag=="},{"03","Aw=="},{"04","BA=="},{"05","BQ=="},{"06","Bg=="},{"07","Bw=="},{"0000","AAA="},{"000000","AAAA"},{"00000000","AAAAAA=="},{"000102030405060708090a0b0c0d0e0f" + "101112131415161718191a1b1c1d1e1f" + "202122232425262728292a2b2c2d2e2f"+ "303132333435363738393a3b3c3d3e3f"+ "404142434445464748494a4b4c4d4e4f"+ "505152535455565758595a5b5c5d5e5f"+ "606162636465666768696a6b6c6d6e6f"+ "707172737475767778797a7b7c7d7e7f"+ "808182838485868788898a8b8c8d8e8f"+ "909192939495969798999a9b9c9d9e9f"+ "a0a1a2a3a4a5a6a7a8a9aaabacadaeaf"+ "b0b1b2b3b4b5b6b7b8b9babbbcbdbebf"+ "c0c1c2c3c4c5c6c7c8c9cacbcccdcecf"+ "d0d1d2d3d4d5d6d7d8d9dadbdcdddedf"+ "e0e1e2e3e4e5e6e7e8e9eaebecedeeef"+ "f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff","AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4v" + "MDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5f" + "YGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6P"+ "kJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/"+ "wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v"+ "8PHy8/T19vf4+fr7/P3+/w=="}};}  }
class C{  public void start_batch_autorouter(){  if (board_is_read_only) {    stat.userPrintln(classname + "start_batch_autorouter: FAIL board is read only");    return;  }  r_board.generate_snapshot();  interactive_action_thread=new BatchAutorouteThread(this);  interactive_action_thread.start();}  }
class C{  public ISPermission(String serviceName,String resourceName,String actions,Map envParams){  super("ISPermission");  this.serviceName=serviceName;  this.resourceName=resourceName;  this.actions=actions;  this.envParams=envParams;  debug.message("ISPermission:: Constructor called");}  }
class C{  public RemoteSchemaLoader(){  matchingRulesToKeep.clear();  syntaxesToKeep.clear();  matchingRulesToKeep.addAll(getCoreSchema().getMatchingRules());  syntaxesToKeep.addAll(getCoreSchema().getSyntaxes());}  }
class C{  private void buildExpression(StringBuilder sb,Expression exp,int indentation) throws SyntaxException {  if (exp instanceof VariableDef) {    assertNoAnno(((VariableDef)exp).getAnnos());    assertNoModifier(((VariableDef)exp).getModifiers());    assertNoType(((VariableDef)exp).getType());    sb.append("var ").append(((VariableDef)exp).getName());    if (((VariableDef)exp).getInit() != null) {      sb.append(" = ");      buildExpression(sb,((VariableDef)exp).getInit(),indentation);    }  } else   if (exp instanceof Literal) {    String literal=((Literal)exp).literal();    if (exp instanceof BoolLiteral) {      if (literal.equals("true") || literal.equals("yes")) {        sb.append("true");      } else {        sb.append("false");      }    } else     if (exp instanceof NumberLiteral) {      sb.append(literal);    } else     if (exp instanceof RegexLiteral) {      String regex=CompileUtil.getRegexStr(literal);      sb.append("/").append(regex.replace("/","\\/")).append("/");    } else     if (exp instanceof StringLiteral) {      sb.append(literal);    } else     throw new LtBug("unknown literal type " + exp.getClass());  } else   if (exp instanceof Operation) {    if (exp instanceof UnaryOneVariableOperation) {      sb.append(((UnaryOneVariableOperation)exp).operator());      buildExpression(sb,((UnaryOneVariableOperation)exp).expressions().get(0),indentation);    } else     if (exp instanceof OneVariableOperation) {      buildExpression(sb,((OneVariableOperation)exp).expressions().get(0),indentation);      sb.append(((OneVariableOperation)exp).operator());    } else     if (exp instanceof TwoVariableOperation) {      buildExpression(sb,((TwoVariableOperation)exp).expressions().get(0),indentation);      sb.append(" ").append(((TwoVariableOperation)exp).operator()).append(" ");      buildExpression(sb,((TwoVariableOperation)exp).expressions().get(1),indentation);    } else     throw new LtBug("unknown operation type " + exp.getClass());  } else   if (exp instanceof AST.Access) {    if (((AST.Access)exp).exp != null) {      buildExpression(sb,((AST.Access)exp).exp,indentation);      sb.append(".");    }    sb.append(((AST.Access)exp).name);  } else   if (exp instanceof AST.AnnoExpression) {    err.SyntaxException("JavaScript don't support annotations",exp.line_col());  } else   if (exp instanceof AST.ArrayExp) {    sb.append("[");    buildArguments(sb,((AST.ArrayExp)exp).list,indentation);    sb.append("]");  } else   if (exp instanceof AST.Assignment) {    buildExpression(sb,((AST.Assignment)exp).assignTo,indentation);    sb.append(" = ");    buildExpression(sb,((AST.Assignment)exp).assignFrom,indentation);  } else   if (exp instanceof AST.GeneratorSpec) {    err.SyntaxException("JavaScript don't support generator specifying",exp.line_col());  } else   if (exp instanceof AST.AsType) {    err.SyntaxException("JavaScript don't support type",exp.line_col());  } else   if (exp instanceof AST.Procedure) {    sb.append("(function(){\n");    buildStatements(sb,((AST.Procedure)exp).statements,indentation + INDENT);    sb.append("})()");  } else   if (exp instanceof AST.Index) {    buildExpression(sb,((AST.Index)exp).exp,indentation);    for (    Expression e : ((AST.Index)exp).args) {      sb.append("[");      buildExpression(sb,e,indentation);      sb.append("]");    }  } else   if (exp instanceof AST.Invocation) {    if (((AST.Invocation)exp).invokeWithNames) {      err.SyntaxException("JavaScript don't support invoke with name",exp.line_col());    }    buildExpression(sb,((AST.Invocation)exp).exp,indentation);    sb.append("(");    buildArguments(sb,((AST.Invocation)exp).args,indentation);    sb.append(")");  } else   if (exp instanceof AST.Lambda) {    AST.Lambda l=(AST.Lambda)exp;    if (!l.statements.isEmpty()) {      Statement stmt=l.statements.get(l.statements.size() - 1);      if (stmt instanceof Expression) {        l.statements.set(l.statements.size() - 1,new AST.Return((Expression)stmt,stmt.line_col()));      }    }    sb.append("function(");    buildParameters(sb,((AST.Lambda)exp).params);    sb.append(") {\n");    buildStatements(sb,((AST.Lambda)exp).statements,indentation + INDENT);    sb.append("}");  } else   if (exp instanceof AST.MapExp) {    sb.append("{\n");    boolean isFirst=true;    for (    Map.Entry<Expression,Expression> entry : ((AST.MapExp)exp).map.entrySet()) {      if (isFirst) {        isFirst=false;      } else {        sb.append(",\n");      }      buildIndentation(sb,indentation + INDENT);      buildExpression(sb,entry.getKey(),indentation + INDENT);      sb.append(" : ");      buildExpression(sb,entry.getValue(),indentation + INDENT);    }    sb.append("\n");    buildIndentation(sb,indentation);    sb.append("}");  } else   if (exp instanceof AST.New) {    sb.append("new ");    buildExpression(sb,((AST.New)exp).invocation,indentation);  } else   if (exp instanceof AST.Null) {    sb.append("null");  } else   if (exp instanceof AST.PackageRef) {    err.SyntaxException("JavaScript don't support packages",exp.line_col());    sb.append("'(compile error)'");  } else   if (exp instanceof AST.Require) {    sb.append("require(");    buildExpression(sb,((AST.Require)exp).required,indentation);    sb.append(")");  } else   if (exp instanceof AST.TypeOf) {    err.SyntaxException("JavaScript don't have type",exp.line_col());    sb.append("'compile error'");  } else   throw new LtBug("unknown token " + exp);}  }
class C{  public void postMail(String recipients[],String subject,String message,String from,String mimeType,String charset,String host,String port,String user,String password,boolean ssl) throws MessagingException {  boolean debug=false;  Properties moduleProps=new Properties();  moduleProps.put("mail.smtp.host",host);  moduleProps.put("mail.debug","true");  moduleProps.put("mail.smtp.port",port);  moduleProps.put("mail.smtp.socketFactory.port",port);  if (ssl) {    moduleProps.put("mail.smtp.ssl.enable","true");  }  moduleProps.put("mail.smtp.socketFactory.fallback","false");  Session session;  if (user == null || password == null) {    session=Session.getInstance(moduleProps);  } else {    moduleProps.put("mail.smtp.auth","true");    session=Session.getInstance(moduleProps,new AMUserNamePasswordAuthenticator(user,password));  }  session.setDebug(debug);  MimeMessage msg=new MimeMessage(session);  if (from == null) {    throw new MessagingException("the 'Email From Address' configuration is empty, please check your email " + "service configuration");  }  InternetAddress addressFrom=new InternetAddress(from);  msg.setFrom(addressFrom);  InternetAddress[] addressTo=new InternetAddress[recipients.length];  for (int i=0; i < recipients.length; i++) {    addressTo[i]=new InternetAddress(recipients[i]);  }  msg.setRecipients(Message.RecipientType.TO,addressTo);  if (charset == null) {    msg.setSubject(subject);    msg.setContent(message,mimeType);  } else {    charset=BrowserEncoding.mapHttp2JavaCharset(charset);    msg.setSubject(subject,charset);    msg.setContent(message,mimeType + "; charset=" + charset);  }  Transport.send(msg);}  }
class C{  public void printStackTrace(java.io.PrintStream ps){  if (rootCause != null) {    String superString=super.toString();synchronized (ps) {      ps.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(ps);    }  } else {    super.printStackTrace(ps);  }}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  String realClassName=className;  if (attributeName != null) {    String value=attributes.getValue(attributeName);    if (value != null) {      realClassName=value;    }  }  if (digester.log.isDebugEnabled()) {    digester.log.debug("[ObjectCreateRule]{" + digester.match + "}New "+ realClassName);  }  if (realClassName == null) {    throw new NullPointerException("No class name specified for " + namespace + " "+ name);  }  Class<?> clazz=digester.getClassLoader().loadClass(realClassName);  Object instance=clazz.newInstance();  digester.push(instance);}  }
class C{  public void testGetColumnTypeName(){  try {    assertTrue("smallint".equalsIgnoreCase(rsmd.getColumnTypeName(1)));    assertTrue("varchar".equalsIgnoreCase(rsmd.getColumnTypeName(2)));    assertTrue("varchar".equalsIgnoreCase(rsmd.getColumnTypeName(3)));  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnTypeName(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnTypeName(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  static MonitoringAttributesViewPanel<String> createStringInstance(LinkedHashSet<String> attributes){  return new MonitoringAttributesViewPanel<>(attributes);}  }
class C{  public static SocketAddress findFreeSocketAddress(){  try (ServerSocket serverLdapSocket=bindFreePort()){    return serverLdapSocket.getLocalSocketAddress();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void modifyI18NInAttributeSchema(String serviceName,String subSchema,String schemaType,String attrName,String value) throws UpgradeException {  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    AttributeSchema attrSchema=ss.getAttributeSchema(attrName);    attrSchema.setI18NKey(value);  } catch (  SSOException ssoe) {    throw new UpgradeException("Invalid token");  }catch (  SMSException sme) {    throw new UpgradeException("Error setting i18N attribute");  }}  }
class C{  public void refresh(){  freert.graphics.ColorIntensityTable color_intensity_table=this.get_board_handling().gdi_context.color_intensity_table;  for (int i=0; i < ColorIntensityName.values().length; ++i) {    this.set_slider_value(i,color_intensity_table.get_value(i));  }}  }
class C{  public void addNotify(){  super.addNotify();  enableInputMethodsIfNecessary();}  }
class C{  public void calculateMinMax(DataSet dataSet){  if (dataSet.getMaxY() > maxY) {    maxY=dataSet.getMaxY();  }  if (dataSet.getMinY() < minY) {    minY=dataSet.getMinY();  }  if (dataSet.getMaxX() > maxX) {    maxX=dataSet.getMaxX();  }  if (dataSet.getMinX() < minX) {    minX=dataSet.getMinX();  }  if (viewportRect.isEmpty()) {    constrainViewportRect(maxX - visibleXRange,minY,maxX,maxY);  }}  }
class C{  public FilePermission(String path,String actions){  super(path);  init(getMask(actions));}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_mainExp.fixupVariables(vars,globalsSize);}  }
class C{  public void testToBigIntegerZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-500";  BigInteger bNumber=new BigInteger("0");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public WebappLoader(ClassLoader parent){  super();  this.parentClassLoader=parent;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPIfMatch.parse");  SIPIfMatch sipIfMatch=new SIPIfMatch();  try {    headerName(TokenTypes.SIP_IF_MATCH);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipIfMatch.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipIfMatch;  }  finally {    if (debug)     dbg_leave("SIPIfMatch.parse");  }}  }
class C{  public ThreadSafeClientConnManager(HttpParams params,SchemeRegistry schreg){  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.connectionPool=createConnectionPool(params);}  }
class C{  public void add(Permission permission){  if (!(permission instanceof PropertyPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  PropertyPermission pp=(PropertyPermission)permission;  String propName=pp.getName();synchronized (this) {    PropertyPermission existing=perms.get(propName);    if (existing != null) {      int oldMask=existing.getMask();      int newMask=pp.getMask();      if (oldMask != newMask) {        int effective=oldMask | newMask;        String actions=PropertyPermission.getActions(effective);        perms.put(propName,new PropertyPermission(propName,actions));      }    } else {      perms.put(propName,pp);    }  }  if (!all_allowed) {    if (propName.equals("*"))     all_allowed=true;  }}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static ValueExp minus(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(MINUS,value1,value2);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforerefchildnull.class,args);}  }
class C{  private TreeStateNode createNodeForValue(Object value){  return new TreeStateNode(value);}  }
class C{  public void testAddMathContextEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.2312E+61";  int cScale=-57;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(5,RoundingMode.FLOOR);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value ",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public SafeReadExpectedAcksInfo(CSN csn,ServerHandler requesterServerHandler,List<Integer> expectedServers,List<Integer> wrongStatusServers){  super(csn,requesterServerHandler,AssuredMode.SAFE_READ_MODE,expectedServers);  if (!wrongStatusServers.isEmpty()) {    hasWrongStatus=true;    failedServers=wrongStatusServers;  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  servletCtx=config.getServletContext();  super.init(config);}  }
class C{  public Clipboard(String name){  this.name=name;}  }
class C{  public MaterialBarcodeScanner build(){  if (mUsed) {    throw new RuntimeException("You must not reuse a MaterialBarcodeScanner builder");  }  if (mActivity == null) {    throw new RuntimeException("Please pass an activity to the MaterialBarcodeScannerBuilder");  }  mUsed=true;  buildMobileVisionBarcodeDetector();  MaterialBarcodeScanner materialBarcodeScanner=new MaterialBarcodeScanner(this);  materialBarcodeScanner.setOnResultListener(onResultListener);  return materialBarcodeScanner;}  }
class C{  private SortedSet<String> createRSListForTestCase(String testCase){  SortedSet<String> replServers=new TreeSet<>();  if (testCase.equals("testRSWithSameGroupIds")) {    replServers.add("localhost:" + rs1Port);    replServers.add("localhost:" + rs2Port);  } else   if (testCase.equals("testRSWithManyGroupIds")) {    replServers.add("localhost:" + rs1Port);    replServers.add("localhost:" + rs2Port);    replServers.add("localhost:" + rs3Port);  } else {    fail("Unknown test case: " + testCase);  }  return replServers;}  }
class C{  public PluginResult.PostResponse invokePostResponseDeletePlugins(PostResponseDeleteOperation deleteOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseDeletePlugins) {    if (isInternalOperation(deleteOperation,p)) {      continue;    }    try {      result=p.doPostResponse(deleteOperation);    } catch (    Exception e) {      logException(deleteOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(deleteOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public void clearAccessibleSelection(){synchronized (List.this) {    int selectedIndexes[]=List.this.getSelectedIndexes();    if (selectedIndexes == null)     return;    for (int i=selectedIndexes.length - 1; i >= 0; i--) {      List.this.deselect(selectedIndexes[i]);    }  }}  }
class C{  private void printText(Graphics2D g2d,String text,Rectangle2D rect,Font font,int imgWidth){  int tx;  if (rect.getWidth() < imgWidth) {    tx=(int)((imgWidth - rect.getWidth()) / 2);  } else   if (table.getComponentOrientation().isLeftToRight()) {    tx=0;  } else {    tx=-(int)(Math.ceil(rect.getWidth()) - imgWidth);  }  int ty=(int)Math.ceil(Math.abs(rect.getY()));  g2d.setColor(Color.BLACK);  g2d.setFont(font);  g2d.drawString(text,tx,ty);}  }
class C{  public DsnIdentifier(String[] p_reserved_chars,String p_string_quote){  reserved_chars=p_reserved_chars;  string_quote=p_string_quote;}  }
class C{  private void loadConfiguration(){  mLoginRetries=0;  mProfileSID=mConfigurationManager.getString(PREF_PROFILE_SID,"");  mAccountSID=mConfigurationManager.getString(PREF_ACCOUNT_SID,"");  mApiKeySID=mConfigurationManager.getString(PREF_API_KEY_SID,"");  mApiKeySecret=mConfigurationManager.getString(PREF_API_KEY_SECRET,"");  mIdentity=mConfigurationManager.getString(PREF_IDENTITY,"");}  }
class C{  public static void checkJavaVersion() throws ClientException {  final String version=System.getProperty("java.specification.version");  if (Float.valueOf(version) < CliConstants.MINIMUM_JAVA_VERSION) {    final String javaBin=System.getProperty("java.home") + File.separator + "bin"+ File.separator+ "java";    throw new ClientException(ReturnCode.JAVA_VERSION_INCOMPATIBLE,ERR_INCOMPATIBLE_JAVA_VERSION.get(CliConstants.MINIMUM_JAVA_VERSION,version,javaBin),null);  }}  }
class C{  public void quickPop(int n){  m_firstFree-=n;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS)   NS=sc.assertionDeclareStr;  if (includeNS)   appendNS="saml:";  xml.append("<").append(appendNS).append("SubjectLocality").append(" ").append(NS).append(" ");  if ((_ipAddress != null) && !(_ipAddress.length() == 0))   xml.append("IPAddress").append("=\"").append(_ipAddress).append("\"").append(" ");  if ((_dnsAddress != null) && !(_dnsAddress.length() == 0))   xml.append("DNSAddress").append("=\"").append(_dnsAddress).append("\"").append(" ");  xml.append(sc.END_ELEMENT);  return xml.toString();}  }
class C{  public DeferredFileOutputStream(int threshold,File outputFile){  this(threshold,outputFile,null,null,null);}  }
class C{  @Override public void run(){  while (!isShuttingDown()) {    try {      sleep(interval);    } catch (    InterruptedException e) {    }catch (    Exception e) {      logger.traceException(e);    }    for (    RotationPolicy<?> rotationPolicy : rotationPolicies) {      if (rotationPolicy.rotateFile(writer)) {        rotate();      }    }    for (    RetentionPolicy<?> retentionPolicy : retentionPolicies) {      try {        File[] files=retentionPolicy.deleteFiles(writer.getNamingPolicy());        for (        File file : files) {          file.delete();          totalFilesCleaned++;          logger.trace("%s cleaned up log file %s",retentionPolicy,file);        }        if (files.length > 0) {          lastCleanTime=TimeThread.getCalendar();          lastCleanCount=files.length;        }      } catch (      DirectoryException de) {        logger.traceException(de);        errorHandler.handleDeleteError(retentionPolicy,de);      }    }  }}  }
class C{  protected void loadMapper() throws SMSException {  StringBuffer nameMapFilename=new StringBuffer(mRootDir);  nameMapFilename.append(File.separatorChar);  nameMapFilename.append(DEFAULT_NAMEMAP_FILENAME);  mNameMapHandle=new File(nameMapFilename.toString());  if (mNameMapHandle.isFile()) {    if (!mNameMapHandle.canRead()) {      String errmsg="SMSFlatFileObject.initialize: cannot read file " + mNameMapHandle.getPath();      mDebug.error(errmsg);      throw new SMSException(errmsg);    }    mNameMap=loadProperties(mNameMapHandle,null);  } else {    try {      mNameMapHandle.createNewFile();    } catch (    IOException e) {      String errmsg="SMSFlatFileObject.initialize: " + "cannot create file, " + nameMapFilename + ". Exception "+ e.getMessage();      mDebug.error(errmsg);      throw new SMSException(errmsg);    }catch (    SecurityException e) {      String errmsg="SMSFlatFileObject.initialize: " + "cannot create file " + nameMapFilename + ". Exception "+ e.getMessage();      mDebug.error(errmsg);      throw new SMSException(errmsg);    }    mNameMap=new CaseInsensitiveProperties();    try {      create(null,mRootDN,new HashMap());      if (mDebug.messageEnabled()) {        mDebug.message("SMSFlatFileObject.initialize: " + "created SMS object for " + mRootDN);      }    } catch (    SSOException e) {    }catch (    ServiceAlreadyExistsException e) {      if (mDebug.messageEnabled()) {        mDebug.message("SMSFlatFileObject.initialize: " + mRootDN + " already exists");      }    }    try {      create(null,"ou=services," + mRootDN,new HashMap());      if (mDebug.messageEnabled()) {        mDebug.message("SMSFlatFileObject.initialize: " + "created SMS object for ou=services," + mRootDN);      }    } catch (    SSOException e) {    }catch (    ServiceAlreadyExistsException e) {      if (mDebug.messageEnabled()) {        mDebug.message("SMSFlatFileObject.initialize: " + "ou=services," + mRootDN + " already exists");      }    }  }}  }
class C{  ChangeNumberRange optimizeSearch(final DN baseDN,final SearchFilter userFilter) throws DirectoryException {  SearchFilter equalityFilter=null;switch (baseDN.size()) {case 1:    break;case 2:  equalityFilter=buildSearchFilterFrom(baseDN,CHANGE_NUMBER_ATTR);break;default :equalityFilter=buildSearchFilterFrom(baseDN,"replicationCSN");break;}return optimizeSearchUsingFilter(equalityFilter != null ? equalityFilter : userFilter);}  }
class C{  private long stringToIp(String ip){  StringTokenizer st=new StringTokenizer(ip,".");  long ipValue=0L;  while (st.hasMoreElements()) {    ipValue=ipValue * 256L + Short.parseShort(st.nextToken());  }  return ipValue;}  }
class C{  public AudienceRestrictionCondition(List audience) throws SAMLException {  if (audience.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AudienceRestrictionCondition:  " + "null input specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  _audience.addAll(audience);}  }
class C{  public Resource superType(final String resourceId){  this.superTypeId=resourceId;  return this;}  }
class C{  private boolean handleConflictResolution(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      SynchronizationProviderResult result=provider.handleConflictResolution(this);      if (!result.continueProcessing()) {        setResultCodeAndMessageNoInfoDisclosure(modifiedEntry,result.getResultCode(),result.getErrorMessage());        setMatchedDN(result.getMatchedDN());        setReferralURLs(result.getReferralURLs());        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODIFY_SYNCH_CONFLICT_RESOLUTION_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  public final static String formatHeader(final Header header,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatHeader(null,header).toString();}  }
class C{  public X509AttributeCertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public void write(byte[] vector){  check(vector.length);  System.arraycopy(vector,0,buffer,write_pos,vector.length);  write_pos+=vector.length;}  }
class C{  public static GetConnectionIDExtendedRequest newRequest(){  return INSTANCE;}  }
class C{  public boolean isEmpty(){  return (this.size() == 0);}  }
class C{  public org.w3c.dom.Element signWithSAMLToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String assertionID,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signWithSAMLToken(doc,cert,assertionID,algorithm,ids);}  }
class C{  private long checkKey(BackupProtos.Key key){  CRC32 checksum=new CRC32();  checksum.update(key.type);  checksum.update((int)(key.id & 0xffff));  checksum.update((int)((key.id >> 32) & 0xffff));  if (!TextUtils.isEmpty(key.name)) {    checksum.update(key.name.getBytes());  }  return checksum.getValue();}  }
class C{  public CancelExtendedOperation(){  super();}  }
class C{  public static LdapException newLdapException(ResultCode resultCode){  return newLdapException(resultCode,null,null);}  }
class C{  void addAvailableElement(QName elemName){  m_availElems.put(elemName,elemName);}  }
class C{  private AbstractLyrics3v2FieldFrameBody readBody(String identifier,ByteBuffer byteBuffer) throws InvalidTagException {  AbstractLyrics3v2FieldFrameBody newBody;  if (identifier.equals(Lyrics3v2Fields.FIELD_V2_AUTHOR)) {    newBody=new FieldFrameBodyAUT(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_ALBUM)) {    newBody=new FieldFrameBodyEAL(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_ARTIST)) {    newBody=new FieldFrameBodyEAR(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_TRACK)) {    newBody=new FieldFrameBodyETT(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_IMAGE)) {    newBody=new FieldFrameBodyIMG(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_INDICATIONS)) {    newBody=new FieldFrameBodyIND(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_ADDITIONAL_MULTI_LINE_TEXT)) {    newBody=new FieldFrameBodyINF(byteBuffer);  } else   if (identifier.equals(Lyrics3v2Fields.FIELD_V2_LYRICS_MULTI_LINE_TEXT)) {    newBody=new FieldFrameBodyLYR(byteBuffer);  } else {    newBody=new FieldFrameBodyUnsupported(byteBuffer);  }  return newBody;}  }
class C{  public boolean update(Long ruleActionParameterID,Long ruleActionID,Long actionParameterID,String ruleActionParameterData){  if (ruleActionParameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (ruleActionID != null) {    args.put(KEY_RULEACTIONID,ruleActionID);  }  if (actionParameterID != null) {    args.put(KEY_ACTIONPARAMETERID,actionParameterID);  }  if (ruleActionParameterData != null) {    args.put(KEY_RULEACTIONPARAMETERDATA,ruleActionParameterData);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_RULEACTIONPARAMETERID + "=" + ruleActionParameterID,null) > 0;  }  return false;}  }
class C{  public Attribute createAttribute(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ATTRIBUTE,elem);  if (obj == null) {    return new AttributeImpl(elem);  } else {    return (Attribute)obj;  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterRead(Context context,ReadRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getReadString(request);  logAccess(resource,action,context);  return next.handleRead(context,request);}  }
class C{  public void removeGroup(String groupname){  UserDatabase database=(UserDatabase)this.resource;  Group group=database.findGroup(groupname);  if (group == null) {    return;  }  try {    MBeanUtils.destroyMBean(group);    database.removeGroup(group);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception destroying group [" + groupname + "] MBean");    iae.initCause(e);    throw iae;  }}  }
class C{  public boolean matches(){  return match(from,ENDANCHOR);}  }
class C{  public boolean addElement(Object key){  return false;}  }
class C{  public BackgroundTaskThread(BackgroundTask<T> backgroundTask){  this.backgroundTask=backgroundTask;}  }
class C{  public ObjectInUseException(){  super();}  }
class C{  public Set createUsers(Set userNames) throws AMException, SSOException {  Set usersSet=new HashSet();  Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=userNames.iterator();  while (iter.hasNext()) {    String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMUserImpl user=new AMUserImpl(super.token,userDN);    if (objectClasses != null && !objectClasses.isEmpty()) {      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element element;  String elementTagName;  String elementNodeName;  Node appendedChild;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  element=doc.createElementNS("http://www.w3.org/DOM/Test","emp:address");  appendedChild=docFragment.appendChild(element);  element.setPrefix("dmstc");  elementTagName=element.getTagName();  elementNodeName=element.getNodeName();  assertEquals("nodesetprefix01_tagname","dmstc:address",elementTagName);  assertEquals("nodesetprefix01_nodeName","dmstc:address",elementNodeName);}  }
class C{  public final void testGetType(){  assertEquals("MyEncoding",new MyCertPath(testEncoding).getType());}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void clear() throws ChangelogException {  log.clear();  newestChangeNumber=NO_KEY;}  }
class C{  private static String wrapMsg(String msg,int width){  StringBuilder buffer=new StringBuilder();  StringTokenizer lineTokenizer=new StringTokenizer(msg,"\n",true);  while (lineTokenizer.hasMoreTokens()) {    String line=lineTokenizer.nextToken();    if (line.equals("\n")) {      buffer.append(line);    } else     if (line.length() < width) {      buffer.append(line);    } else {      StringBuilder lineBuffer=new StringBuilder();      StringBuilder delimBuffer=new StringBuilder();      StringTokenizer wordTokenizer=new StringTokenizer(line," ",true);      while (wordTokenizer.hasMoreTokens()) {        String word=wordTokenizer.nextToken();        if (word.equals(" ")) {          if (lineBuffer.length() > 0) {            delimBuffer.append(word);          }        } else         if (word.length() > width) {          if (lineBuffer.length() > 0) {            buffer.append(lineBuffer);            buffer.append("\n");            lineBuffer=new StringBuilder();          }          buffer.append(word);          if (wordTokenizer.hasMoreTokens()) {            wordTokenizer.nextToken();            if (wordTokenizer.hasMoreTokens()) {              buffer.append("\n");            }          }          if (delimBuffer.length() > 0) {            delimBuffer=new StringBuilder();          }        } else {          int newLineLength=lineBuffer.length() + delimBuffer.length() + word.length();          if (newLineLength < width) {            lineBuffer.append(delimBuffer).append(word);          } else {            buffer.append(lineBuffer);            buffer.append("\n");            lineBuffer=new StringBuilder();            lineBuffer.append(word);          }          if (delimBuffer.length() > 0) {            delimBuffer=new StringBuilder();          }        }      }      buffer.append(lineBuffer);    }  }  return buffer.toString();}  }
class C{  static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {  String newDN=super.renameEntry(token,objectType,entryDN,newName,deleteOldName);  String oldDN=LDAPUtils.formatToRFC(entryDN);  CacheBlock cb=(CacheBlock)sdkCache.remove(oldDN);  newDN=LDAPUtils.formatToRFC(newDN);  sdkCache.put(newDN,cb);  return newDN;}  }
class C{  public JCheckBox(){  this(null,null,false);}  }
class C{  public ExecutionException(Throwable cause){  super(cause);}  }
class C{  public void add(int index,Role role) throws IllegalArgumentException, IndexOutOfBoundsException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(index,role);}  }
class C{  static MatchingRuleImpl relativeTimeLTOMatchingRule(){  return new RelativeTimeLessThanOrderingMatchingRuleImpl();}  }
class C{  private void abortOnSSLException() throws IOException {  if (sslException != null) {    throw sslException;  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  returnToHomePage();}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,id);}  }
class C{  static boolean handleIconKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  Launcher launcher=(Launcher)v.getContext();  DeviceProfile profile=launcher.getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle WORKSPACE ICONS keyevent=[%s] isVerticalBar=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  CellLayout iconLayout=(CellLayout)parent.getParent();  final Workspace workspace=(Workspace)iconLayout.getParent();  final ViewGroup dragLayer=(ViewGroup)workspace.getParent();  final ViewGroup tabs=(ViewGroup)dragLayer.findViewById(R.id.search_drop_target_bar);  final Hotseat hotseat=(Hotseat)dragLayer.findViewById(R.id.hotseat);  final int iconIndex=parent.indexOfChild(v);  final int pageIndex=workspace.indexOfChild(iconLayout);  final int pageCount=workspace.getChildCount();  int countX=iconLayout.getCountX();  int countY=iconLayout.getCountY();  CellLayout hotseatLayout=(CellLayout)hotseat.getChildAt(0);  ShortcutAndWidgetContainer hotseatParent=hotseatLayout.getShortcutsAndWidgets();  int[][] matrix;  if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank,!hotseat.hasIcons());    countY=countY + 1;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank,!hotseat.hasIcons());    countX=countX + 1;  } else   if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {    workspace.removeWorkspaceItem(v);    return consume;  } else {    matrix=FocusLogic.createSparseMatrix(iconLayout);  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,countX,countY,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  View newIcon=null;switch (newIconIndex) {case FocusLogic.NOOP:    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {      newIcon=tabs;    }  break;case FocusLogic.PREVIOUS_PAGE_RIGHT_COLUMN:case FocusLogic.NEXT_PAGE_RIGHT_COLUMN:int newPageIndex=pageIndex - 1;if (newIconIndex == FocusLogic.NEXT_PAGE_RIGHT_COLUMN) {newPageIndex=pageIndex + 1;}int row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);workspace.snapToPage(newPageIndex);if (parent != null) {workspace.snapToPage(newPageIndex);iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrix(iconLayout,iconLayout.getCountX(),row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,countX + 1,countY,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));newIcon=parent.getChildAt(newIconIndex);}break;case FocusLogic.PREVIOUS_PAGE_FIRST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.PREVIOUS_PAGE_LAST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(parent.getChildCount() - 1);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.NEXT_PAGE_FIRST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex + 1);break;case FocusLogic.NEXT_PAGE_LEFT_COLUMN:case FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN:newPageIndex=pageIndex + 1;if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN) {newPageIndex=pageIndex - 1;}workspace.snapToPage(newPageIndex);row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);if (parent != null) {workspace.snapToPage(newPageIndex);iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrix(iconLayout,-1,row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,countX + 1,countY,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));newIcon=parent.getChildAt(newIconIndex);}break;case FocusLogic.CURRENT_PAGE_FIRST_ITEM:newIcon=parent.getChildAt(0);break;case FocusLogic.CURRENT_PAGE_LAST_ITEM:newIcon=parent.getChildAt(parent.getChildCount() - 1);break;default :if (0 <= newIconIndex && newIconIndex < parent.getChildCount()) {newIcon=parent.getChildAt(newIconIndex);} else if (parent.getChildCount() <= newIconIndex && newIconIndex < parent.getChildCount() + hotseatParent.getChildCount()) {newIcon=hotseatParent.getChildAt(newIconIndex - parent.getChildCount());}break;}if (newIcon != null) {newIcon.requestFocus();playSoundEffect(keyCode,v);}return consume;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private DereferenceAliasesPolicy(final int intValue,final String name){  this.intValue=intValue;  this.name=name;}  }
class C{  public int next(){  int node;  int type;  if (_startNode == NULL) {    return NULL;  }  node=_currentNode;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (type != _nodeType && _exptype(node) != _nodeType);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  AuthenticateToServiceCondition(Debug debug,CoreWrapper coreWrapper,EntitlementCoreWrapper entitlementCoreWrapper){  this.debug=debug;  this.coreWrapper=coreWrapper;  this.entitlementCoreWrapper=entitlementCoreWrapper;}  }
class C{  public PAssertedIdentityHeader createPAssertedIdentityHeader(Address address) throws NullPointerException, ParseException {  if (address == null)   throw new NullPointerException("null address!");  PAssertedIdentity assertedIdentity=new PAssertedIdentity();  assertedIdentity.setAddress(address);  return assertedIdentity;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER' ("+ "'ID' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'PASSWORD' TEXT,"+ "'NICKNAME' TEXT);");  db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ID ON USER"+ " (ID);");}  }
class C{  public static int combine(int hashCode,int value){  return 31 * hashCode + value;}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  if (length > fBuffer.length) {    length=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,length);  for (int i=0; i < count; i++) {    int b0=(0xff & fBuffer[i]);    if (b0 > 0x80) {      throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));    }    ch[offset + i]=(char)b0;  }  return count;}  }
class C{  public void commit() throws IOException {synchronized (DiskLruCache.this) {    if (hasErrors) {      completeEdit(this,false);      removeEntry(entry);    } else {      completeEdit(this,true);    }    committed=true;  }}  }
class C{  static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual)   failSame(message);}  }
class C{  private AppConfigurationEntry[] cloneConfigurationEntry(AppConfigurationEntry[] entries,String orgDN,AMAuthenticationManager amAM){  if (debug.messageEnabled()) {    debug.message("AMConfiguration.cloneConfigurationEntry, orgDN=" + orgDN + ", entries="+ entries);  }  List list=new ArrayList();synchronized (entries) {    int len=entries.length;    for (int i=0; i < len; i++) {      list.add(new AppConfigurationEntry(entries[i].getLoginModuleName(),entries[i].getControlFlag(),entries[i].getOptions()));    }  }  int len=list.size();  if (len == 0) {    return null;  }  AppConfigurationEntry[] clone=new AppConfigurationEntry[len];  for (int i=0; i < len; i++) {    clone[i]=(AppConfigurationEntry)list.get(i);  }  return clone;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssUsernameToken11Element createWssUsernameToken11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssUsernameToken11ElementImpl();}  }
class C{  private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,CharChunk path,MappingData mappingData,boolean resourceExpected){  char[] buf=path.getBuffer();  int pathEnd=path.getEnd();  int servletPath=path.getOffset();  int slash=-1;  for (int i=pathEnd - 1; i >= servletPath; i--) {    if (buf[i] == '/') {      slash=i;      break;    }  }  if (slash >= 0) {    int period=-1;    for (int i=pathEnd - 1; i > slash; i--) {      if (buf[i] == '.') {        period=i;        break;      }    }    if (period >= 0) {      path.setOffset(period + 1);      path.setEnd(pathEnd);      MappedWrapper wrapper=exactFind(wrappers,path);      if (wrapper != null && (resourceExpected || !wrapper.resourceOnly)) {        mappingData.wrapperPath.setChars(buf,servletPath,pathEnd - servletPath);        mappingData.requestPath.setChars(buf,servletPath,pathEnd - servletPath);        mappingData.wrapper=wrapper.object;        mappingData.matchType=MappingMatch.EXTENSION;      }      path.setOffset(servletPath);      path.setEnd(pathEnd);    }  }}  }
class C{  protected Principal authenticate(Connection dbConnection,String username,String credentials){  if (username == null || credentials == null) {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",username));    return null;  }  String dbCredentials=getPassword(dbConnection,username);  if (dbCredentials == null) {    getCredentialHandler().mutate(credentials);    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",username));    return null;  }  boolean validated=getCredentialHandler().matches(credentials,dbCredentials);  if (validated) {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("dataSourceRealm.authenticateSuccess",username));  } else {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("dataSourceRealm.authenticateFailure",username));    return null;  }  ArrayList<String> list=getRoles(dbConnection,username);  return new GenericPrincipal(username,credentials,list);}  }
class C{  public void testConstructorSignBytesNegative6(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=-1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,14,-24,101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public Resource mapToXACMLResoure(String resourceName,String serviceName) throws XACMLException {  return null;}  }
class C{  private void ensureOpen() throws IOException {  if (buf == null)   throw new IOException("Stream closed");}  }
class C{  public void initializeMonitorProviders() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addMonitorProviderAddListener(this);  rootConfiguration.addMonitorProviderDeleteListener(this);  for (  String name : rootConfiguration.listMonitorProviders()) {    MonitorProviderCfg monitorConfig=rootConfiguration.getMonitorProvider(name);    monitorConfig.addChangeListener(this);    if (monitorConfig.isEnabled()) {      String className=monitorConfig.getJavaClass();      try {        MonitorProvider<? extends MonitorProviderCfg> monitor=loadMonitor(className,monitorConfig);        monitors.put(monitorConfig.dn(),monitor);        DirectoryServer.registerMonitorProvider(monitor);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createProcessingInstruction("TARGET","DATA");  newValue=newNode.getNodeValue();  assertEquals("initial","DATA",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("after","This should have an effect",newValue);}  }
class C{  private void addDependency(PendingChange dependentChange){  dependentChangesLock.lock();  try {    dependentChanges.add(dependentChange);  }  finally {    dependentChangesLock.unlock();  }}  }
class C{  public FederationManager() throws CLIException {  super(DEFINITION_CLASS);}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public NameClassPair(String name,String className){  this.name=name;  this.className=className;}  }
class C{  public org.omg.CORBA.Policy _get_policy(int policy_type){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public void addConfigChangeListener(ConfigChangeListener listener){  configListeners.add(listener);}  }
class C{  public JFileChooser(String currentDirectoryPath,FileSystemView fsv){  setup(fsv);  if (currentDirectoryPath == null) {    setCurrentDirectory(null);  } else {    setCurrentDirectory(fileSystemView.createFileObject(currentDirectoryPath));  }}  }
class C{  MethodType asCollectorType(Class<?> arrayType,int arrayLength){  assert (parameterCount() >= 1);  assert (lastParameterType().isAssignableFrom(arrayType));  MethodType res;  if (arrayType == Object[].class) {    res=genericMethodType(arrayLength);    if (rtype != Object.class) {      res=res.changeReturnType(rtype);    }  } else {    Class<?> elemType=arrayType.getComponentType();    assert (elemType != null);    res=methodType(rtype,Collections.nCopies(arrayLength,elemType));  }  if (ptypes.length == 1) {    return res;  } else {    return res.insertParameterTypes(0,parameterList().subList(0,ptypes.length - 1));  }}  }
class C{  public TokenEndpointFilter(Restlet resource,JacksonRepresentationFactory jacksonRepresentationFactory){  super(resource,jacksonRepresentationFactory);}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue03.class,args);}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  protected void computeTime(){  if (!isLenient()) {    if (originalFields == null) {      originalFields=new int[FIELD_COUNT];    }    for (int field=0; field < FIELD_COUNT; field++) {      int value=internalGet(field);      if (isExternallySet(field)) {        if (value < getMinimum(field) || value > getMaximum(field)) {          throw new IllegalArgumentException(getFieldName(field));        }      }      originalFields[field]=value;    }  }  int fieldMask=selectFields();  int year;  int era;  if (isSet(ERA)) {    era=internalGet(ERA);    year=isSet(YEAR) ? internalGet(YEAR) : 1;  } else {    if (isSet(YEAR)) {      era=eras.length - 1;      year=internalGet(YEAR);    } else {      era=SHOWA;      year=45;    }  }  long timeOfDay=0;  if (isFieldSet(fieldMask,HOUR_OF_DAY)) {    timeOfDay+=(long)internalGet(HOUR_OF_DAY);  } else {    timeOfDay+=internalGet(HOUR);    if (isFieldSet(fieldMask,AM_PM)) {      timeOfDay+=12 * internalGet(AM_PM);    }  }  timeOfDay*=60;  timeOfDay+=internalGet(MINUTE);  timeOfDay*=60;  timeOfDay+=internalGet(SECOND);  timeOfDay*=1000;  timeOfDay+=internalGet(MILLISECOND);  long fixedDate=timeOfDay / ONE_DAY;  timeOfDay%=ONE_DAY;  while (timeOfDay < 0) {    timeOfDay+=ONE_DAY;    --fixedDate;  }  fixedDate+=getFixedDate(era,year,fieldMask);  long millis=(fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;  TimeZone zone=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  int tzMask=fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (zone instanceof ZoneInfo) {      ((ZoneInfo)zone).getOffsetsByWall(millis,zoneOffsets);    } else {      zone.getOffsets(millis - zone.getRawOffset(),zoneOffsets);    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }  }  millis-=zoneOffsets[0] + zoneOffsets[1];  time=millis;  int mask=computeFields(fieldMask | getSetStateFields(),tzMask);  if (!isLenient()) {    for (int field=0; field < FIELD_COUNT; field++) {      if (!isExternallySet(field)) {        continue;      }      if (originalFields[field] != internalGet(field)) {        int wrongValue=internalGet(field);        System.arraycopy(originalFields,0,fields,0,fields.length);        throw new IllegalArgumentException(getFieldName(field) + "=" + wrongValue+ ", expected "+ originalFields[field]);      }    }  }  setFieldsNormalized(mask);}  }
class C{  public SQLFeatureNotSupportedException(Throwable cause){  super(cause);}  }
class C{  public Cache(int pref_size,int size){  cache_size=size;  prefix_size=pref_size;  hashes=new long[cache_size];  hashes_idx=new long[cache_size];  encodings=new byte[cache_size][];  cache=new Object[cache_size];}  }
class C{  public final void testToString(){  assertNotNull(new IdentityScopeStub("Aleksei Semenov").toString());}  }
class C{  public static void uncheckListViewSingleChoice(ListView listView){  if (listView.getChoiceMode() == ListView.CHOICE_MODE_SINGLE) {    int checkedPosition=listView.getCheckedItemPosition();    if (checkedPosition > -1) {      listView.setItemChecked(checkedPosition,false);    }  } else {    throw new IllegalArgumentException("UtilUI.uncheckListView() only works on lists using choice mode: CHOICE_MODE_SINGLE.");  }}  }
class C{  public EntryUUIDVirtualAttributeProvider(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc;  int nodeType;  doc=(Document)load("staff",false);  nodeType=(int)doc.getNodeType();  assertEquals("nodeDocumentNodeTypeAssert1",9,nodeType);}  }
class C{  public Validator createValidator() throws JAXBException {  return new ValidatorImpl(this);}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  Node insertedNode;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("em");  expected.add("acronym");  java.util.List result=new java.util.ArrayList();  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("*");  refChild=childList.item(5);  newChild=childList.item(0);  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN1008C=0; indexN1008C < childList.getLength(); indexN1008C++) {    child=(Node)childList.item(indexN1008C);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEqualsAutoCase("element","childNames",expected,result);}  }
class C{  public void stopProfiling(){  stopProfiling=true;  try {    if (captureThread != null) {      captureThread.join();    }  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  @Override public void messageReceived(Serializable msg,Member source){}  }
class C{  public boolean isCommon(){  return true;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentLanguageParser.parse");  ContentLanguageList list=new ContentLanguageList();  try {    headerName(TokenTypes.CONTENT_LANGUAGE);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      ContentLanguage cl=new ContentLanguage(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl=new ContentLanguage(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentLanguageParser.parse");  }}  }
class C{  RouteBuilder(final HeapImpl heap,final Name name,final EndpointRegistry routerRegistry){  this.heap=heap;  this.name=name;  this.routerRegistry=routerRegistry;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String serviceName=(String)getDisplayFieldValue(ATTR_SERVICE_LIST);  String universalId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);  EntitiesModel model=(EntitiesModel)getModel();  if (model.hasUserAttributeSchema(serviceName)) {    unlockPageTrailForSwapping();    fowardToAddServiceViewBean(model,universalId,serviceName);  } else {    try {      model.assignService(universalId,serviceName,Collections.EMPTY_MAP);      forwardToEntityServiceViewBean();    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  }}  }
