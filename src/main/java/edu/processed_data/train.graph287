class C{  public void dump(BufferingRequestLog target){  while (!buffer.isEmpty()) {    target.add(buffer.poll());  }}  }
class C{  public int[] twoSum(int[] nums,int target){  Map<Integer,Integer> map=new HashMap<>();  for (int i=0; i < nums.length; i++) {    map.put(nums[i],i);  }  for (int i=0; i < nums.length; i++) {    int newTarget=target - nums[i];    if (map.containsKey(newTarget) && i != map.get(newTarget)) {      return new int[]{i,map.get(newTarget)};    }  }  return null;}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  private void initSecondary() throws Exception {  if (passSecondaryConfiguration) {    Configuration secondaryConf=configuration(secondaryCfgScheme,secondaryCfgAuthority,true,true);    secondaryConf.setInt("fs.igfs.block.size",1024);    secondaryConfFullPath=writeConfiguration(secondaryConf,SECONDARY_CFG_PATH);  } else   secondaryConfFullPath=null;  startNodes();}  }
class C{  public static boolean isNonpositiveInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp <= 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public void add(K key){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,1);    return;  }  value++;  refSet.put(key,value);  countPoints++;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.050 -0500",hash_original_method="2D686768D3996E22528B81DECB6C8570",hash_generated_method="766A17FA3CDCBCBF06E26F240ACBF411") public UnsupportedDigestAlgorithmException(String message,Throwable cause){  super(message,cause);}  }
class C{  public TranscoderInput(String uri){  this.uri=uri;}  }
class C{  public void startElement(Attributes atts) throws Exception {  attrs=new AttributesImpl(atts);  buff=new StringBuffer();}  }
class C{  public void test_noIndicesRegistered(){  final Journal journal=getStore();  try {    journal.commit();    final long tx=journal.newTx(ITx.UNISOLATED);    assertEquals(0L,journal.commit(tx));  }  finally {    journal.destroy();  }}  }
class C{  public void addLeakingResource(LeakingResource resource){synchronized (leakingResources) {    leakingResources.add(resource);  }}  }
class C{  public static void main(String[] args){  int n=StdIn.readInt();  WeightedQuickUnionUF uf=new WeightedQuickUnionUF(n);  while (!StdIn.isEmpty()) {    int p=StdIn.readInt();    int q=StdIn.readInt();    if (uf.connected(p,q))     continue;    uf.union(p,q);    StdOut.println(p + " " + q);  }  StdOut.println(uf.count() + " components");}  }
class C{  public static JavaCompiler instance(Context context){  JavaCompiler instance=context.get(compilerKey);  if (instance == null)   instance=new JavaCompiler(context);  return instance;}  }
class C{  public double ari(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofLetters=this.getNrofLetters(words);  return ari(nrofLetters,words.size(),nrofSentences);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL:    setLiteral((Literal)null);  return;}super.eUnset(featureID);}  }
class C{  public static boolean isAssignableFrom(Member member1,Member member2){  return member1.getDeclaringClass().isAssignableFrom(member2.getDeclaringClass());}  }
class C{  public static void sort(byte[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  private Date watchCoreStartAt(SolrServer client,final long timeout,final Date min) throws InterruptedException, IOException, SolrServerException {  final long sleepInterval=200;  long timeSlept=0;  SolrParams p=params("action","status","core","collection1");  while (timeSlept < timeout) {    QueryRequest req=new QueryRequest(p);    req.setPath("/admin/cores");    try {      NamedList data=client.request(req);      for (      String k : new String[]{"status","collection1"}) {        Object o=data.get(k);        assertNotNull("core status rsp missing key: " + k,o);        data=(NamedList)o;      }      Date startTime=(Date)data.get("startTime");      assertNotNull("core has null startTime",startTime);      if (null == min || startTime.after(min)) {        return startTime;      }    } catch (    SolrException e) {      if (500 != e.code()) {        throw e;      }    }    timeSlept+=sleepInterval;    Thread.sleep(sleepInterval);  }  fail("timed out waiting for collection1 startAt time to exceed: " + min);  return min;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean contains(final byte[] array,final byte valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  protected void initializeRenderable(KMLTraversalContext tc){  final String altitudeMode=this.getAltitudeMode();  if ("absolute".equals(altitudeMode)) {    this.renderable=new KMLGroundOverlayPolygonImpl(tc,this);  } else {    if (this.getIcon() != null && this.getIcon().getHref() != null)     this.renderable=new KMLSurfaceImageImpl(tc,this); else     this.renderable=new KMLSurfacePolygonImpl(tc,this);  }}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XString(str().toLowerCase(locale));}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static double logpdf(double val,double loc,double scale){  val=Math.abs((val - loc) / scale);  double f=1.0 + Math.exp(-val);  return -val - Math.log(scale * f * f);}  }
class C{  public SVGPath lineTo(double[] xy){  return lineTo(xy[0],xy[1]);}  }
class C{  public NegativeQuantityException(final long quantity){  super(String.format("quantity (%d) must be non-negative",quantity));}  }
class C{  public boolean addView(String type,String strId,Map<String,String> attrMap){  if (strId == null || type == null) {    logger.warn("addView type:{}, id:{}",type,strId);  } else {    logger.info("addView type:{}, id:{}",type,strId);  }  if (strId.startsWith("@+")) {    strId=strId.substring(2);  }  if (strId.startsWith("@")) {    strId=strId.substring(1);  }  strId=strId.replace("@android:","");  if (strId.startsWith("android:")) {    strId=strId.substring("android:".length());  }  Integer id=mNumberToIDMap.inverse().get(strId);  if (id == null) {    logger.warn("numeric ID is NULL for {} => {} ",strId,id);    return false;  }  if (mUiObjectTable.get(id) == null) {    String fullTypeName=makeClassName(type);    UISootObject obj=new UISootObject(id.intValue(),fullTypeName,strId,attrMap);    mUiObjectTable.put(id,obj);    if (createUiMember(id) == false) {      logger.info("createUIMember failed on {}",id);      mUiObjectTable.remove(id);      return false;    }    if (obj.childOf == UiType.FRAGMENT) {      logger.info("Fragment id {} is added ",String.format("%08x",id));      addGetFragment_ID(id);      return false;    }    if (obj.childOf == UiType.VIEW) {      return addGetView_ID(id);    }  } else {    logger.info("Already added? {}",mUiObjectTable.get(id));  }  return true;}  }
class C{  public void testClearBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=44;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-62,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private long calcBezier(float interpolatedTime,float p0,float p1,float p2){  return Math.round((Math.pow((1 - interpolatedTime),2) * p0) + (2 * (1 - interpolatedTime) * interpolatedTime* p1) + (Math.pow(interpolatedTime,2) * p2));}  }
class C{  static void indexDoc(IndexWriter writer,Path file,long lastModified) throws IOException {  try (InputStream stream=Files.newInputStream(file)){    Document doc=new Document();    Field pathField=new StringField("path",file.toString(),Field.Store.YES);    doc.add(pathField);    doc.add(new LongPoint("modified",lastModified));    doc.add(new TextField("contents",new BufferedReader(new InputStreamReader(stream,StandardCharsets.UTF_8))));    if (writer.getConfig().getOpenMode() == OpenMode.CREATE) {      System.out.println("adding " + file);      writer.addDocument(doc);    } else {      System.out.println("updating " + file);      writer.updateDocument(new Term("path",file.toString()),doc);    }  } }  }
class C{  private static String processLinksAndImages(final String hostport,String line){  String kl, kv, alt, align;  int p;  int positionOfOpeningTag;  int positionOfClosingTag;  while ((positionOfOpeningTag=line.indexOf(WIKI_OPEN_LINK)) >= 0) {    positionOfClosingTag=line.indexOf(WIKI_CLOSE_LINK,positionOfOpeningTag + LEN_WIKI_OPEN_LINK);    if (positionOfClosingTag <= positionOfOpeningTag) {      break;    }    kl=line.substring(positionOfOpeningTag + LEN_WIKI_OPEN_LINK,positionOfClosingTag);    if (kl.startsWith(WIKI_IMAGE)) {      alt=EMPTY;      align=EMPTY;      kv=EMPTY;      kl=kl.substring(LEN_WIKI_IMAGE);      if ((p=kl.indexOf(PIPE_ESCAPED)) > 0) {        kv=kl.substring(p + LEN_WIKI_IMAGE);        kl=kl.substring(0,p);        if ((p=kv.indexOf(PIPE_ESCAPED)) > 0) {          align=kv.substring(0,p);          if (("bottom".equals(align)) || ("center".equals(align)) || ("left".equals(align))|| ("middle".equals(align))|| ("right".equals(align))|| ("top".equals(align))) {            align=" align=\"" + align + "\"";          } else {            align=EMPTY;          }          alt=" alt=\"" + kv.substring(p + LEN_WIKI_IMAGE) + "\"";        } else {          alt=" alt=\"" + kv + "\"";        }      }      if (kl.indexOf("://",0) < 1) {        kl="http://" + hostport + "/"+ kl;      }      line=line.substring(0,positionOfOpeningTag) + "<img src=\"" + kl+ "\""+ align+ alt+ ">"+ line.substring(positionOfClosingTag + LEN_WIKI_CLOSE_LINK);    } else     if (kl.startsWith(WIKI_VIDEO_YOUTUBE)) {      kl=kl.substring(LEN_WIKI_VIDEO_YOUTUBE);      line=line.substring(0,positionOfOpeningTag) + "" + "<object width=\"425\" height=\"350\"><param name=\"movie\" value=\"http://www.youtube.com/v/"+ kl+ "\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://www.youtube.com/v/"+ kl+ "\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" width=\"425\" height=\"350\"></embed></object>";    } else     if (kl.startsWith(WIKI_VIDEO_VIMEO)) {      kl=kl.substring(LEN_WIKI_VIDEO_VIMEO);      line=line.substring(0,positionOfOpeningTag) + "" + "<iframe src=\"http://player.vimeo.com/video/"+ kl+ "\" width=\"425\" height=\"350\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>";    } else {      if ((p=kl.indexOf(PIPE_ESCAPED)) > 0) {        kv=kl.substring(p + LEN_PIPE_ESCAPED);        kl=kl.substring(0,p);      } else {        kv=kl;      }      line=line.substring(0,positionOfOpeningTag) + "<a class=\"known\" href=\"Wiki.html?page=" + kl+ "\">"+ kv+ "</a>"+ line.substring(positionOfClosingTag + LEN_WIKI_CLOSE_LINK);    }  }  while ((positionOfOpeningTag=line.indexOf(WIKI_OPEN_EXTERNAL_LINK)) >= 0) {    positionOfClosingTag=line.indexOf(WIKI_CLOSE_EXTERNAL_LINK,positionOfOpeningTag + LEN_WIKI_OPEN_EXTERNAL_LINK);    if (positionOfClosingTag <= positionOfOpeningTag) {      break;    }    kl=line.substring(positionOfOpeningTag + LEN_WIKI_OPEN_EXTERNAL_LINK,positionOfClosingTag);    if ((p=kl.indexOf(' ',0)) > 0) {      kv=kl.substring(p + 1);      kl=kl.substring(0,p);    } else {      kv=kl;    }    if (kl.indexOf("://",0) < 1) {      kl="http://" + hostport + "/"+ kl;    }    line=line.substring(0,positionOfOpeningTag) + "<a class=\"extern\" href=\"" + kl+ "\">"+ kv+ "</a>"+ line.substring(positionOfClosingTag + LEN_WIKI_CLOSE_EXTERNAL_LINK);  }  return line;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  View emptyView=findViewById(R.id.empty);  mList=(ExpandableListView)findViewById(R.id.list);  if (mList == null) {    throw new RuntimeException("Your content must have a ExpandableListView whose id attribute is " + "'R.id.list'");  }  if (emptyView != null) {    mList.setEmptyView(emptyView);  }  mList.setOnChildClickListener(this);  mList.setOnGroupExpandListener(this);  mList.setOnGroupCollapseListener(this);  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mFinishedStart=true;}  }
class C{  public void register(Region region,String prefix){  if (region == null || prefix == null) {    throw new IllegalArgumentException("Neither Region nor Prefix may be null");  }  List<LazyStyle> styles=styleMap.get(region);  if (styles == null) {    styles=new LinkedList<LazyStyle>();    styles.add(new LazyStyle(prefix));    styleMap.put(region,styles);  } else {    for (    LazyStyle s : styles) {      if (prefix.equals(s.prefix)) {        return;      }    }    styles.add(new LazyStyle(prefix));  }  registeredRegions.put(region.getName(),region);}  }
class C{  public LocalEnvironment() throws GuacamoleException {  guacHome=findGuacamoleHome();  properties=new Properties();  try {    InputStream stream=null;    if (!guacHome.isDirectory())     stream=LocalEnvironment.class.getResourceAsStream("/guacamole.properties"); else {      File propertiesFile=new File(guacHome,"guacamole.properties");      if (propertiesFile.exists())       stream=new FileInputStream(propertiesFile);    }    if (stream != null) {      try {        properties.load(stream);      }  finally {        stream.close();      }    } else     logger.info("No guacamole.properties file found within GUACAMOLE_HOME or the classpath. Using defaults.");  } catch (  IOException e) {    logger.warn("The guacamole.properties file within GUACAMOLE_HOME cannot be read: {}",e.getMessage());    logger.debug("Error reading guacamole.properties.",e);  }  availableProtocols=readProtocols();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.844 -0500",hash_original_method="F91DB731CF24DA9E3E2F5684453D2459",hash_generated_method="3AB5FDE092DACA9A0F1C16F409861211") public static void main(String args[]) throws ParseException {  String rou[]={"Privacy: none\n","Privacy: none;id;user\n"};  for (int i=0; i < rou.length; i++) {    PrivacyParser rp=new PrivacyParser(rou[i]);    PrivacyList list=(PrivacyList)rp.parse();    System.out.println("encoded = " + list.encode());  }}  }
class C{  private static List<Link> sortLinks(List<Link> links){  List<Link> result=new ArrayList<Link>();  for (  Link l : links) {    int pos=0;    while (pos < result.size() && l.getPos().getStart() > result.get(pos).getPos().getStart()) {      pos++;    }    result.add(pos,l);  }  return result;}  }
class C{  public static String toAsciiString(byte[] raw){  return new String(toAsciiChars(raw));}  }
class C{  private boolean isDoNotMonitor(CallEvent event){  Alias to=event.getToIDAlias();  if (to != null && to.hasCallPriority() && to.getCallPriority() == Priority.DO_NOT_MONITOR) {    return true;  }  Alias from=event.getFromIDAlias();  if (from != null && from.hasCallPriority() && from.getCallPriority() == Priority.DO_NOT_MONITOR) {    return true;  }  return false;}  }
class C{  public void done(){  if (!isDone())   state=State.WORK_DONE;}  }
class C{  protected void writePixels() throws IOException {  Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  public BMPImageWriteParam(){  this(null);}  }
class C{  public static void verifyTimestamps(AccessToken token,long skew,StringManager sm) throws InvalidTokenException {  Calendar now=Calendar.getInstance();  Calendar issuedAt=Calendar.getInstance();  Calendar expiresAt=Calendar.getInstance();  if (token.getIssueTime() != null) {    issuedAt.setTimeInMillis(token.getIssueTime().getTime() - skew);  }  if (token.getExpirationTime() != null) {    expiresAt.setTimeInMillis(token.getExpirationTime().getTime() + skew);  }  if (token.getIssueTime() == null || issuedAt.after(now)) {    throw new InvalidTokenException(sm.getString("auth.ite.bad.issue",issuedAt.getTime(),now.getTime()));  }  if (token.getExpirationTime() == null || expiresAt.before(now)) {    throw new InvalidTokenException(sm.getString("auth.ite.bad.expiry",expiresAt.getTime(),now.getTime()));  }}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public static KeyPair load(URL certificateFile,URL privateKeyFile,String privateKeyPassword) throws IOException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException, KeyStoreException {  Cert cert=Cert.load(certificateFile);  PrivKey privKey=PrivKey.loadFromKeyStore(privateKeyFile,privateKeyPassword);  return new KeyPair(cert,privKey);}  }
class C{  public void saveState(){  for (  StaticCache cache : cacheList) {    cache.saveState();  }}  }
class C{  public MicrosoftPullRequest createPullRequest(String account,String collection,String repositoryId,NewMicrosoftPullRequest newPr) throws ServerException, IOException, UnauthorizedException {  return doPost(templates.pullRequestsUrl(account,collection,repositoryId),HTTP_CREATED,newPr,MicrosoftPullRequest.class);}  }
class C{  public static long toLong(final String value){  if (StringUtil.isNullOrEmpty(value)) {    return -1;  } else {    return Long.parseLong(value);  }}  }
class C{  public int rewind(int n){  pos-=n;  return pos;}  }
class C{  private ReCaptchaCheckerResponse checkCaptcha(String key,String ip){  MultiValueMap<String,String> map=new LinkedMultiValueMap<>();  map.add("secret",reCaptchaProperties.getSecretKey());  map.add("response",key);  map.add("remoteip",ip);  return new RestTemplate().postForObject(reCaptchaProperties.getSiteVerify(),map,ReCaptchaCheckerResponse.class);}  }
class C{  public EnumParameter(OptionID optionID,Class<E> enumClass,E defaultValue){  super(optionID,defaultValue);  this.enumClass=enumClass;}  }
class C{  public LockManager(Gondola gondola){  gondola.getConfig().registerForUpdates(null);  this.gondola=gondola;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void printArray(int[] arr){  System.out.print("[ ");  for (int j=0; j < (arr.length - 1); j++) {    System.out.print(arr[j] + ", ");  }  if (arr.length > 0) {    System.out.print(arr[arr.length - 1]);  }  System.out.println(" ]");}  }
class C{  public boolean isConnected(){  return keeper != null && keeper.getState() == ZooKeeper.States.CONNECTED;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private JarInfo createJarInfo(Manifest mf){  Hashtable beans;  Hashtable headersTable=new Hashtable();  if (mf == null) {    beans=new Hashtable();  } else {    beans=new Hashtable();    for (Enumeration entries=mf.entries(); entries.hasMoreElements(); ) {      MessageHeader mh=(MessageHeader)entries.nextElement();      String name=mh.findValue("Name");      String isBean=mh.findValue("Java-Bean");      if (isBean != null && isBean.equalsIgnoreCase("True")) {        String beanName;        boolean fromPrototype=true;        if (name.endsWith(".class")) {          fromPrototype=false;          beanName=name.substring(0,name.length() - 6);        } else         if (name.endsWith(".ser")) {          beanName=name.substring(0,name.length() - 4);        } else {          beanName=name;        }        beanName=beanName.replace('/','.');        beans.put(beanName,new Boolean(fromPrototype));        headersTable.put(beanName,mh);      }    }  }  String beanNames[]=new String[beans.size()];  boolean fromPrototype[]=new boolean[beans.size()];  MessageHeader headers[]=new MessageHeader[beans.size()];  Enumeration keys;  int i;  for (keys=beans.keys(), i=0; keys.hasMoreElements(); i++) {    String key=(String)keys.nextElement();    beanNames[i]=key;    fromPrototype[i]=((Boolean)beans.get(key)).booleanValue();    headers[i]=(MessageHeader)headersTable.get(key);  }  return new JarInfo(jarName,beanNames,fromPrototype,headers);}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  public static AccountEntry searchLocalAccount(final String screen_name){  try {    return accounts.read(screen_name);  } catch (  IOException e) {    Log.getLog().warn(e);    return null;  }}  }
class C{  private void write(BinaryRawWriterEx writer,Collection<ClusterNode> nodes,List<ClusterNode> subgrid){  GridDiscoveryManager discoMgr=ctx.kernalContext().discovery();  long curTopVer=discoMgr.topologyVersion();  if (topVer != curTopVer) {    writer.writeBoolean(true);    writer.writeLong(curTopVer);    writer.writeInt(nodes.size());    writer.writeInt(subgrid.size());    for (    ClusterNode node : nodes) {      ctx.writeNode(writer,node);      writer.writeBoolean(subgrid.contains(node));    }  } else   writer.writeBoolean(false);}  }
class C{  public IntArrayList(){  this(initialCapacity);}  }
class C{  public static void parallelSort(int[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJInt.Sorter(null,a,new int[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  public T caseAccess(Access object){  return null;}  }
class C{  public static void addAttribute(SerializationHandler handler,int attr) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(attr);  if (SerializerUtils.isDefinedNSDecl(handler,attr,dtm))   return;  String ns=dtm.getNamespaceURI(attr);  if (ns == null)   ns="";  try {    handler.addAttribute(ns,dtm.getLocalName(attr),dtm.getNodeName(attr),"CDATA",dtm.getNodeValue(attr),false);  } catch (  SAXException e) {  }}  }
class C{  public static Float convertFontStyle(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.FONT_STYLE_INDEX);switch (v.getStringValue().charAt(0)) {case 'n':    return TextAttribute.POSTURE_REGULAR;default :  return TextAttribute.POSTURE_OBLIQUE;}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.039 -0500",hash_original_method="E7EE736E24A2BE53AC107C249FFB0880",hash_generated_method="E7EE736E24A2BE53AC107C249FFB0880") void release(){synchronized (sPoolSync) {    if (sPoolSize < MAX_POOL_SIZE) {      this.mNext=sPool;      sPool=this;      sPoolSize++;      mResult=null;    }  }}  }
class C{  private static void insertPortfolioEntry(FinanceService service,String feedUrl,PortfolioEntry entry) throws IOException, MalformedURLException, ServiceException {  System.out.println("Inserting Entry at location: " + feedUrl);  PortfolioEntry insertedEntry=service.insert(new URL(feedUrl),entry);  printPortfolioEntry(insertedEntry);}  }
class C{  protected Annotation(){  super(null,null);  _fields=new HashMap<>();}  }
class C{  public static long parseSize(String humanSize){  return parseAndConvertToBytes(humanSize);}  }
class C{  public void populateDAO(Object value,int row,int column){  IndicatorSeries element=getData().getIndicatorSeries().get(row);switch (column) {case 0:{      element.setStrategy((Strategy)((DAOStrategy)value).getObject());      break;    }case 1:{    String type=((org.trade.dictionary.valuetype.IndicatorSeries)value).getCode();    String indicatorName=type.substring(0,type.indexOf("Series"));    element=this.getIndicatorSeries(element.getStrategy(),indicatorName,type,indicatorName,new Boolean(false),new Integer(0),new Boolean(false));    this.replaceRow(element,row);    break;  }case 2:{  element.setName(((String)value).trim());  break;}case 3:{element.setDescription((String)value);break;}case 4:{element.setDisplaySeries(new Boolean(((YesNo)value).getCode()));break;}case 5:{element.setSubChart(new Boolean(((YesNo)value).getCode()));break;}case 6:{element.setSeriesRGBColor(((Color)value).getRGB());break;}case 7:{List<CodeValue> code=new ArrayList<>();for (Aspect aspect : ((Aspects)value).getAspect()) {code.add((CodeValue)aspect);}if (!code.isEmpty()) element.setCodeValues(code);break;}default :{}}element.setDirty(true);}  }
class C{  public boolean isUnderline(){  return ((textDecoration & TEXT_DECORATION_UNDERLINE) != 0);}  }
class C{  public static void link(final COperandTreeNode parent,final COperandTreeNode child){  Preconditions.checkNotNull(child,"IE00218: Child argument can not be null");  Preconditions.checkNotNull(parent,"IE00217: Parent argument can not be null");  parent.children.add(child);  child.parent=parent;}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public GF2nPolynomialElement(GF2nPolynomialField f,Random rand){  mField=f;  mDegree=mField.getDegree();  polynomial=new GF2Polynomial(mDegree);  randomize(rand);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public void deleteComment(final IComment comment) throws CouldntDeleteException {  try {    m_instruction.deleteGlobalComment(comment);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }  for (  final IInstructionListener listener : m_listeners) {    listener.deletedComment(this,comment);  }}  }
class C{  static void testClassNewInstance(){  try {    Class c=Class.forName("LocalClass");    Object obj=c.newInstance();    System.out.println("LocalClass succeeded");  } catch (  Exception ex) {    System.err.println("LocalClass failed");    ex.printStackTrace();  }  try {    Class c=Class.forName("otherpackage.PackageAccess");    Object obj=c.newInstance();    System.err.println("ERROR: PackageAccess succeeded unexpectedly");  } catch (  IllegalAccessException iae) {    System.out.println("Got expected PackageAccess complaint");  }catch (  Exception ex) {    System.err.println("Got unexpected PackageAccess failure");    ex.printStackTrace();  }  LocalClass3.main();  try {    MaybeAbstract ma=new MaybeAbstract();    System.err.println("ERROR: MaybeAbstract succeeded unexpectedly");  } catch (  InstantiationError ie) {    System.out.println("Got expected InstantationError");  }catch (  Exception ex) {    System.err.println("Got unexpected MaybeAbstract failure");  }}  }
class C{  public void addMosaic(final MosaicId mosaicId,final Quantity quantity){  final Quantity originalQuantity=this.mosaicTransfers.getOrDefault(mosaicId,Quantity.ZERO);  this.mosaicTransfers.put(mosaicId,originalQuantity.add(quantity));}  }
class C{  private static void saveNativeGraph(final Window parent,final CGraphModel model){  final CSaveProgress progress=CGraphSaver.saveAs(parent,model.getGraph(),model.getViewContainer());  while (!progress.isDone()) {    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {      java.lang.Thread.currentThread().interrupt();    }  }}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  public Maybe<Zipper<A>> maybeModifyBefore(UnaryOperator<A> operator){  return Maybe.JustWhenTrue(!isStart(),null);}  }
class C{  public static boolean isMimeTypeExist(String mimeType){  return (isMimeTypeExist(mimeType,ROOT_LEVEL));}  }
class C{  public Closure<V> ncurry(int n,final Object argument){  return ncurry(n,new Object[]{argument});}  }
class C{  public Debug(){}  }
class C{  private static float bytesToMB(long bytes){  float sizeInMB=(float)bytes / 1024f / 1024f;  return sizeInMB;}  }
class C{  public void dismissLoFiBar(){  if (mSnackbarManager.isShowing())   mSnackbarManager.removeMatchingSnackbars(this);}  }
class C{  public static void updateListSet(final String setName,final String newListName){  final Set<String> listSet=getListSet(setName);  listSet.add(newListName);  switchboard.setConfig(setName,collection2string(listSet));}  }
class C{  public String toString(){  Object[] lList=listenerList;  String s="EventListenerList: ";  s+=lList.length / 2 + " listeners: ";  for (int i=0; i <= lList.length - 2; i+=2) {    s+=" type " + ((Class)lList[i]).getName();    s+=" listener " + lList[i + 1];  }  return s;}  }
class C{  public AttachmentView(Context context){  super(context);  this.context=context;}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == listOfSourceDocuements.size() - 1) {    aTarget.appendJavaScript("alert('This is the last document!')");    return;  }  bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex + 1).getName());  bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex + 1));  loadDocumentAction(aTarget);}  }
class C{  public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);  tableIndex=data.readByte();  pad1=data.readByte();  pad2=data.readByte();  pad3=data.readByte();  netMask=data.readInt();}  }
class C{  public void finish() throws IOException {  checkClosed();  write();}  }
class C{  void handleOneConnection(Random random,ServerSocket ss,AtomicBoolean stop,InputStream is,Socket socket,DataInput in,DataOutput out,BufferedOutputStream bos) throws IOException, InterruptedException {  outer:   while (true) {    byte cmd;    while (true) {      if (is.available() > 0) {        break;      }      if (stop.get()) {        return;      }      Thread.sleep(10);    }    try {      cmd=in.readByte();    } catch (    EOFException eofe) {      break;    }switch (cmd) {case CMD_FLUSH:      handleFlush(in,out,bos);    break;case CMD_FETCH_FILES:  handleFetchFiles(random,socket,in,out,bos);break;case CMD_INDEXING:handleIndexing(socket,stop,is,in,out,bos);break;case CMD_GET_SEARCHING_VERSION:out.writeVLong(getCurrentSearchingVersion());break;case CMD_SEARCH:{Thread.currentThread().setName("search");IndexSearcher searcher=mgr.acquire();try {long version=((DirectoryReader)searcher.getIndexReader()).getVersion();int hitCount=searcher.count(new TermQuery(new Term("body","the")));out.writeVLong(version);out.writeVInt(hitCount);bos.flush();}  finally {mgr.release(searcher);}bos.flush();}continue outer;case CMD_SEARCH_ALL:{Thread.currentThread().setName("search all");IndexSearcher searcher=mgr.acquire();try {long version=((DirectoryReader)searcher.getIndexReader()).getVersion();int hitCount=searcher.count(new MatchAllDocsQuery());out.writeVLong(version);out.writeVInt(hitCount);bos.flush();}  finally {mgr.release(searcher);}}continue outer;case CMD_MARKER_SEARCH:{Thread.currentThread().setName("msearch");int expectedAtLeastCount=in.readVInt();verifyAtLeastMarkerCount(expectedAtLeastCount,out);bos.flush();}continue outer;case CMD_COMMIT:Thread.currentThread().setName("commit");commit();out.writeByte((byte)1);break;case CMD_CLOSE:Thread.currentThread().setName("close");message("top close: now close server socket");ss.close();out.writeByte((byte)1);message("top close: done close server socket");break;case CMD_SET_REPLICAS:Thread.currentThread().setName("set repls");int count=in.readVInt();int[] replicaIDs=new int[count];int[] replicaTCPPorts=new int[count];for (int i=0; i < count; i++) {replicaIDs[i]=in.readVInt();replicaTCPPorts[i]=in.readVInt();}out.writeByte((byte)1);setReplicas(replicaIDs,replicaTCPPorts);break;case CMD_NEW_REPLICA:Thread.currentThread().setName("new repl");int replicaTCPPort=in.readVInt();message("new replica: " + warmingSegments.size() + " current warming merges");synchronized (warmingSegments) {for (MergePreCopy preCopy : warmingSegments) {message("warming segment " + preCopy.files.keySet());boolean found=false;synchronized (preCopy.connections) {for (Connection c : preCopy.connections) {if (c.destTCPPort == replicaTCPPort) {found=true;break;}}}if (found) {message("this replica is already warming this segment; skipping");continue;}Connection c=new Connection(replicaTCPPort);if (preCopy.tryAddConnection(c) == false) {message("failed to add connection to segment warmer (too late); closing");c.close();}c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);c.out.writeVLong(primaryGen);c.out.writeVInt(tcpPort);SimpleServer.writeFilesMetaData(c.out,preCopy.files);c.flush();c.s.shutdownOutput();message("successfully started warming");}}break;default :throw new IllegalArgumentException("unrecognized cmd=" + cmd + " via socket="+ socket);}bos.flush();break;}}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.648 -0500",hash_original_method="A4AD4823D433FE3B00367B4686C599FE",hash_generated_method="D5192B7E03EB3CF9AE4F88FC6DCBF3BA") public static Channel inheritedChannel() throws IOException {  return SelectorProvider.provider().inheritedChannel();}  }
class C{  public boolean containsKey(Object key){  purgeBeforeRead();  Entry entry=getEntry(key);  if (entry == null) {    return false;  }  return (entry.getValue() != null);}  }
class C{  public void testFloatValue(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals(0.0f,ai.floatValue());  ai.accumulate(1);  assertEquals(1.0f,ai.floatValue());}  }
class C{  @Override public String toString(){  return ("AclImpl: " + getName());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VERSIONS:  return isSetVersions();}throw new IllegalStateException();}  }
class C{  @Deprecated public boolean isConnectionStaleCheckingEnabled(){  return params.isStaleCheckingEnabled();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice capDev=getCapDev(stack);  Object rv=(capDev == null) ? null : capDev.getDefaultInput();  return (rv == null) ? null : rv.toString();}  }
class C{  protected List<String> validate(int nStops){  List<String> warnings=new ArrayList<>();  if (headwaySecs >= 0 || startTime >= 0 || endTime >= 0) {    if (headwaySecs < 0 || startTime < 0 || endTime < 0) {      warnings.add("You must specify headwaySecs, startTime, and endTime together to create frequency trips.");    }    if (headwaySecs <= 0) {      warnings.add("Headway is not greater than zero.");    }    if (endTime <= startTime) {      warnings.add("End time is not later than start time.");    }    if (firstDepartures != null) {      warnings.add("You cannot specify firstDepartures (which creates scheduled trips) along with headwaySecs, startTime, or endTime (which create frequency trips");    }  } else {    if (firstDepartures == null) {      warnings.add("You must specify either firstDepartures (which creates scheduled trips) or all of headwaySecs, startTime, and endTime (which create frequency trips");    } else     if (phaseFromTimetable != null || phaseFromStop != null || phaseSeconds != 0 || phaseAtStop != null) {      warnings.add("You cannot specify phasing information in a scheduled trip.");    }  }  if (phaseFromTimetable != null || phaseFromStop != null || phaseAtStop != null) {    if (phaseFromTimetable == null || phaseFromStop == null || phaseAtStop == null) {      warnings.add("If one of phaseFromTimetable, phaseFromStop, phaseAtStop, or phaseSeconds is specified, all must be");    }    if (phaseSeconds < 0) {      warnings.add("Negative phasing not supported.");    }  }  if (nStops >= 0) {    if (nStops < 2) {      warnings.add("You must specify at least two stops when creating new trips");    }    if (dwellTimes == null || dwellTimes.length != nStops) {      warnings.add("The number of dwell times must be equal to the number of stops");    }    if (hopTimes == null || hopTimes.length != nStops - 1) {      warnings.add("The number of hop times must be one less than the number of stops");    }  }  return warnings;}  }
class C{  public static DimensionConstrain createMaxDimension(int width,int height){  return createMaxDimension(width,height,false);}  }
class C{  static double computeFinalSum(double[] summands){  double tmp=summands[0] + summands[1];  double simpleSum=summands[summands.length - 1];  if (Double.isNaN(tmp) && Double.isInfinite(simpleSum))   return simpleSum; else   return tmp;}  }
class C{  public void doTransfer(final Tradestrategy tradestrategy){  brokerDataButton.setTransferObject(tradestrategy);}  }
class C{  private static void addMultipleSelectXformValueNode(Element node){  Element xformsValueNode=node.createElement(null,null);  xformsValueNode.setName(NODE_XFORMS_VALUE);  xformsValueNode.setAttribute(null,ATTRIBUTE_XSI_NILL,VALUE_TRUE);  node.addChild(Element.ELEMENT,xformsValueNode);}  }
class C{  public static JSONValue value(Double value){  if (Double.isInfinite(value) || Double.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JSONNumber(cutOffPointZero(Double.toString(value)));}  }
class C{  private float measureRun(int start,int offset,int limit,boolean runIsRtl,FontMetricsInt fmi){  return handleRun(start,offset,limit,runIsRtl,null,0,0,0,0,fmi,true);}  }
class C{  public static void main(String[] args) throws Throwable {  TsacertOptionTest test=new TsacertOptionTest();  test.start();}  }
class C{  public static String join(Iterable<? extends CharSequence> s,String delimiter){  Iterator<? extends CharSequence> iter=s.iterator();  if (!iter.hasNext())   return "";  StringBuilder buffer=new StringBuilder(iter.next());  while (iter.hasNext())   buffer.append(delimiter).append(iter.next());  return buffer.toString();}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  protected void layoutPanel(MapBean map){  Dimension minimumSize=new Dimension(MapBean.DEFAULT_WIDTH,MapBean.DEFAULT_HEIGHT);  JPanel hackPanel=new JPanel();  hackPanel.setLayout(new BorderLayout());  hackPanel.setOpaque(false);  hackPanel.add(map,BorderLayout.CENTER);  centerContainer=new JPanel();  centerContainer.setLayout(new OverlayLayout(centerContainer));  DrawingAttributes activeWidgetColors=getActiveWidgetColors();  DrawingAttributes inactiveWidgetColors=getInactiveWidgetColors();  int widgetButtonSize=getWidgetButtonSize();  EmbeddedNavPanel navPanel=new EmbeddedNavPanel(activeWidgetColors,inactiveWidgetColors,widgetButtonSize);  navPanel.setBounds(12,12,navPanel.getMinimumSize().width,navPanel.getMinimumSize().height);  addMapComponent(navPanel);  addMapComponent(new ProjectionStack());  EmbeddedScaleDisplayPanel scaleDisplay=new EmbeddedScaleDisplayPanel();  addMapComponent(scaleDisplay);  widgets=new JPanel();  widgets.setLayout(new BorderLayout());  widgets.setBackground(OMGraphicConstants.clear);  widgets.setOpaque(false);  widgets.setBounds(0,0,map.getWidth(),map.getHeight());  widgets.setMinimumSize(minimumSize);  widgets.add(navPanel,BorderLayout.WEST);  widgets.add(scaleDisplay,BorderLayout.EAST);  setBorders(map,widgets);  centerContainer.add(widgets);  centerContainer.add(hackPanel);  add(centerContainer,BorderLayout.CENTER);}  }
class C{  public static Image removeBgColor(Image img,int offset){  return null;}  }
class C{  @NonNull public static Animator[] concatAnimators(@NonNull final Animator[] animators,@NonNull final Animator alphaAnimator){  Animator[] allAnimators=new Animator[animators.length + 1];  int i=0;  for (  Animator animator : animators) {    allAnimators[i]=animator;    ++i;  }  allAnimators[allAnimators.length - 1]=alphaAnimator;  return allAnimators;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AppsAction[");  sb.append(m_action);  Object oo=getValue(Action.ACCELERATOR_KEY);  if (oo != null)   sb.append(",Accelerator=").append(oo);  oo=getMnemonic();  if (oo != null)   sb.append(",MnemonicKey=").append(oo);  sb.append("]");  return sb.toString();}  }
class C{  @Override public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  static Object removeAll(final Object array,final BitSet indices){  final int srcLength=ArrayUtils.getLength(array);  final int removals=indices.cardinality();  final Object result=Array.newInstance(array.getClass().getComponentType(),srcLength - removals);  int srcIndex=0;  int destIndex=0;  int count;  int set;  while ((set=indices.nextSetBit(srcIndex)) != -1) {    count=set - srcIndex;    if (count > 0) {      System.arraycopy(array,srcIndex,result,destIndex,count);      destIndex+=count;    }    srcIndex=indices.nextClearBit(set);  }  count=srcLength - srcIndex;  if (count > 0) {    System.arraycopy(array,srcIndex,result,destIndex,count);  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.662 -0500",hash_original_method="26AAE16553DBF302B5AA3D0248CB78BC",hash_generated_method="26AAE16553DBF302B5AA3D0248CB78BC") void onLocalDisconnect(){  if (!disconnected) {    doDisconnect();    if (false)     Log.d(LOG_TAG,"[CDMAConn] onLoalDisconnect");    if (parent != null) {      parent.detach(this);    }  }  releaseWakeLock();}  }
class C{  @Override public String toBundleName(String baseName,Locale locale){  String newBaseName=baseName;  String lang=locale.getLanguage();  if (lang.length() > 0) {    if (baseName.startsWith(UTIL_RESOURCES_PACKAGE) || baseName.startsWith(TEXT_RESOURCES_PACKAGE)) {      if (UTIL_RESOURCES_PACKAGE.length() != TEXT_RESOURCES_PACKAGE.length()) {        throw new InternalError("The resources package names have different lengths.");      }      int index=TEXT_RESOURCES_PACKAGE.length();      if (baseName.indexOf(CLDR,index) > 0) {        index+=CLDR.length();      }      newBaseName=baseName.substring(0,index + 1) + lang + baseName.substring(index);    }  }  return super.toBundleName(newBaseName,locale);}  }
class C{  public AlgorithmFactory(){  super();}  }
class C{  private void sendFinalResponse(SipRequest request,int code,String warning) throws NetworkException, PayloadException {  mImsModule.getCurrentNetworkInterface().getSipManager().sendSipResponse(SipMessageFactory.createResponse(request,IdGenerator.getIdentifier(),code,warning));}  }
class C{  public DLSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  private void scrollListItemsBy(int amount){  offsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final AbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    int numChildren=getChildCount();    View last=getChildAt(numChildren - 1);    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        last=addViewBelow(last,lastVisiblePosition);        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      offsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      AbsListView.LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        recycleBin.addScrapView(first,mFirstPosition);      }      detachViewFromParent(first);      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      offsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      AbsListView.LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        recycleBin.addScrapView(last,mFirstPosition + lastIndex);      }      detachViewFromParent(last);      last=getChildAt(--lastIndex);    }  }}  }
class C{  public void addBehaviour(Class<?> behaviour,String type) throws ObjectStoreConfigException {  addBehaviour(behaviour,vf.createURI(type));}  }
class C{  void zApplyGapBeforeButtonPixels(){  int gapPixels=(gapBeforeButtonPixels == null) ? 3 : gapBeforeButtonPixels;  ConstantSize gapSizeObject=new ConstantSize(gapPixels,ConstantSize.PIXEL);  ColumnSpec columnSpec=ColumnSpec.createGap(gapSizeObject);  FormLayout layout=((FormLayout)parentDatePicker.getLayout());  layout.setColumnSpec(2,columnSpec);}  }
class C{  protected String defaultExpression(){  return "sin(abs(a1)) / abs(a1)";}  }
class C{  public boolean match(PsiElement patternNode,PsiElement matchedNode,MatchContext context){  if (!super.match(patternNode,matchedNode,context))   return false;  return context.getMatcher().match(patternNode,matchedNode);}  }
class C{  WatchDir(Path dir,boolean recursive) throws IOException {  this.watcher=FileSystems.getDefault().newWatchService();  this.recursive=recursive;  if (recursive) {    System.out.format("Scanning %s ...\n",dir);    registerAll(dir);    System.out.println("Done.");  } else {    register(dir);  }  this.trace=true;}  }
class C{  public int putAtIndex(Object key,int value,int index){  Object old=objs[index];  if (old == null || old == DELETED) {    objs[index]=key;    ints[index]=value;    if (old != DELETED)     num_bindings++;    if (3 * num_bindings >= 2 * objs.length)     rehash();    return -1;  } else {    int oldValue=ints[index];    ints[index]=value;    return oldValue;  }}  }
class C{  protected synchronized void damage(final Rectangle r){  if (r == null || fPainting)   return;  x=r.x - 4;  y=r.y;  width=10;  height=r.height;  final Rectangle caretRect=new Rectangle(x,y,width,height);  final Border border=getComponent().getBorder();  if (border != null) {    final Rectangle alloc=getComponent().getBounds();    alloc.x=alloc.y=0;    final Insets borderInsets=border.getBorderInsets(getComponent());    alloc.x+=borderInsets.left;    alloc.y+=borderInsets.top;    alloc.width-=borderInsets.left + borderInsets.right;    alloc.height-=borderInsets.top + borderInsets.bottom;    Rectangle2D.intersect(caretRect,alloc,caretRect);  }  x=caretRect.x;  y=caretRect.y;  width=Math.max(caretRect.width,1);  height=Math.max(caretRect.height,1);  repaint();}  }
class C{  public void delete(){  Buffer buffer=this.buffer instanceof SlicedBuffer ? ((SlicedBuffer)this.buffer).root() : this.buffer;  if (buffer instanceof FileBuffer) {    ((FileBuffer)buffer).delete();  } else   if (buffer instanceof MappedBuffer) {    ((MappedBuffer)buffer).delete();  }  offsetIndex.delete();}  }
class C{  private void handleQoSSettingsUpdate(final HttpServerRequest request){  if (HttpMethod.PUT == request.method()) {    request.bodyHandler(null);  } else {    storage.delete(qosSettingsUri,null);  }}  }
class C{  public R scan(Tree node,P p){  return (node == null) ? null : node.accept(this,p);}  }
class C{  public static boolean testCircleTriangle(Vector2dc center,double radiusSquared,Vector2dc v0,Vector2dc v1,Vector2dc v2){  return testCircleTriangle(center.x(),center.y(),radiusSquared,v0.x(),v0.y(),v1.x(),v1.y(),v2.x(),v2.y());}  }
class C{  static protected boolean addLevel4Family(java.awt.Frame frame,String type,String family,HashMap<String,HashMap<String,NamedIcon>> iconMap){  Iterator<String> iter=ItemPalette.getLevel4FamilyMaps(type).keySet().iterator();  if (familyNameOK(frame,type,family,iter)) {    getLevel4FamilyMaps(type).put(family,iconMap);    ImageIndexEditor.indexChanged(true);    return true;  }  return false;}  }
class C{  public Component add(Component comp){  return dockPanel.add(comp);}  }
class C{  public int searchRowWithName(int startRow,String name){  int i=startRow;  boolean found=false;  while (!found && (i < getRowCount())) {    found=getInfoObjectAtRow(i++).getTokens()[0].indexOf(name) >= 0;  }  return (found ? i - 1 : -1);}  }
class C{  public static void deleteCookieWebUser(HttpServletRequest request,HttpServletResponse response){  org.compiere.util.WebUtil.deleteCookieWebUser(request,response,COOKIE_NAME);}  }
class C{  public static void w(String msg,Throwable thr){  if (DEBUG)   android.util.Log.w(TAG,buildMessage(msg),thr);}  }
class C{  @Override public void accept(double value){  ++count;  simpleSum+=value;  sumWithCompensation(value);  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  public void resizeBox(int x,int y,int dx,int dy,int limitX1,int limitY1,int limitX2,int limitY2,int cornerBoundary){  _x1=limitX1;  _x2=limitX2;  _y1=limitY1;  _y2=limitY2;  if (Math.abs(x - x1) < cornerBoundary && Math.abs(y - y1) < cornerBoundary) {    if (checkLimit(cornerBoundary) && dx > 0)     dx=0;    if (checkLimit(cornerBoundary) && dy > 0)     dy=0;    moveCorner(AREA.TL,dx,dy);  } else   if (Math.abs(x - x2) < cornerBoundary && Math.abs(y - y1) < cornerBoundary) {    if (checkLimit(cornerBoundary) && dx < 0)     dx=0;    if (checkLimit(cornerBoundary) && dy > 0)     dy=0;    moveCorner(AREA.TR,dx,dy);  } else   if (Math.abs(x - x1) < cornerBoundary && Math.abs(y - y2) < cornerBoundary) {    if (checkLimit(cornerBoundary) && dx > 0)     dx=0;    if (checkLimit(cornerBoundary) && dy < 0)     dy=0;    moveCorner(AREA.BL,dx,dy);  } else   if (Math.abs(x - x2) < cornerBoundary && Math.abs(y - y2) < cornerBoundary) {    if (checkLimit(cornerBoundary) && dx < 0)     dx=0;    if (checkLimit(cornerBoundary) && dy < 0)     dy=0;    moveCorner(AREA.BR,dx,dy);  } else   if (x > x1 && x < x2 && y > y1 && y < y2) {    if ((x1 <= limitX1 && dx < 0) || (x2 >= limitX2 && dx > 0))     dx=0;    if ((y1 <= limitY1 && dy < 0) || (y2 >= limitY2 && dy > 0))     dy=0;    moveBox(dx,dy);  }}  }
class C{  @Override public void onPause(){  super.onPause();  mWebView.onPause();}  }
class C{  public void start(@NonNull Context context,@NonNull Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public final boolean isGoodState(TLCState state){  return state.allAssigned();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,-1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double MCSCE1maxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public Set<FlowGraphEdge> buildEdgeSet(DirectedGraph<Block> dg){  HashSet<FlowGraphEdge> edges=new HashSet<FlowGraphEdge>();  Iterator<Block> blockIt=dg.iterator();  while (blockIt.hasNext()) {    Block s=blockIt.next();    List<Block> preds=graph.getPredsOf(s);    List<Block> succs=graph.getSuccsOf(s);    if (preds.size() == 0) {      edges.add(new FlowGraphEdge(s,s));    }    if (succs.size() == 0) {      edges.add(new FlowGraphEdge(s,s));    } else {      Iterator succIt=succs.iterator();      while (succIt.hasNext()) {        edges.add(new FlowGraphEdge(s,succIt.next()));      }    }  }  return edges;}  }
class C{  public static java.lang.String toString(long i){  return null;}  }
class C{  @Override public double magnitude(){  double mag=this.magnitude;  if (mag == Double.NEGATIVE_INFINITY) {    this.magnitude=mag=super.magnitude();  }  return mag;}  }
class C{  private Object executeGTE(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) >= 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void debug(final String text){  if (client == null) {    LOGGER.debug(text);  }}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?> clz=loadClass(backendClassName);  if (backend.getClass() != clz) {    backend=newDynaCodeInstance(clz);  }  try {    return method.invoke(backend,args);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public static String fromByteArray(byte[] bytes){  return new String(asCharArray(bytes));}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (comparator.compare(list.get(maxIndex),list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (comparator.compare(list.get(currentIndex),list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  boolean nextConfirm(){  while (cvListIterator != null && cvListIterator.hasNext()) {    int cvNum=cvListIterator.next();    CvValue cv=_cvModel.getCvByRow(cvNum);    if (log.isDebugEnabled()) {      log.debug("nextConfirm cv index " + cvNum + " state "+ cv.getState());    }    if (cv.isToRead()) {      if (log.isDebugEnabled()) {        log.debug("start confirm of cv " + cvNum);      }      setBusy(true);      if (_programmingCV != null) {        log.error("listener already set at confirm start");      }      _programmingCV=_cvModel.getCvByRow(cvNum);      _read=true;      _programmingCV.addPropertyChangeListener(this);      _programmingCV.confirm(_cvModel.getStatusLabel());      if (log.isDebugEnabled()) {        log.debug("return from starting CV confirm");      }      return true;    }  }  while ((indexedCvList.size() > 0) && (indexedCvListIndex < indexedCvList.size())) {    int indxVarNum=indexedCvList.get(indexedCvListIndex).intValue();    int indxState=_varModel.getState(indxVarNum);    if (log.isDebugEnabled()) {      log.debug("nextRead indexed cv @ row index " + indexedCvListIndex + " state "+ indxState);    }    VariableValue iCv=_varModel.getVariable(indxVarNum);    indexedCvListIndex++;    if (iCv.isToRead()) {      String sz="start confirm of indexed cv " + (_indexedCvModel.getCvByRow(indexedCvListIndex - 1)).cvName();      if (log.isDebugEnabled()) {        log.debug(sz);      }      setBusy(true);      if (_programmingIndexedCV != null) {        log.error("listener already set at confirm start");      }      _programmingIndexedCV=_varModel.getVariable(indxVarNum);      _read=true;      _programmingIndexedCV.addPropertyChangeListener(this);      _programmingIndexedCV.confirmAll();      if (log.isDebugEnabled()) {        log.debug("return from starting indexed CV confirm");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug("nextConfirm found nothing to do");  }  confirmChangesButton.setSelected(false);  confirmAllButton.setSelected(false);  setBusy(false);  container.paneFinished();  return false;}  }
class C{  public static void compute(StructuredGraph graph){  if (graph.hasLoops()) {    ReentrantNodeIterator.apply(INSTANCE,graph.start(),1D);  }}  }
class C{  public synchronized String addComment(final JSONObject requestJSONObject) throws ServiceException {  final long currentTimeMillis=System.currentTimeMillis();  final JSONObject commenter=requestJSONObject.optJSONObject(Comment.COMMENT_T_COMMENTER);  final String commentAuthorId=requestJSONObject.optString(Comment.COMMENT_AUTHOR_ID);  final String articleId=requestJSONObject.optString(Comment.COMMENT_ON_ARTICLE_ID);  final String ip=requestJSONObject.optString(Comment.COMMENT_IP);  if (currentTimeMillis - commenter.optLong(UserExt.USER_LATEST_CMT_TIME) < Symphonys.getLong("minStepCmtTime") && !Role.ADMIN_ROLE.equals(commenter.optString(User.USER_ROLE))) {    LOGGER.log(Level.WARN,"Adds comment too frequent [userName={0}]",commenter.optString(User.USER_NAME));    throw new ServiceException(langPropsService.get("tooFrequentCmtLabel"));  }  JSONObject article=null;  try {    final JSONObject option=optionRepository.get(Option.ID_C_MISC_ALLOW_ADD_COMMENT);    if (!"0".equals(option.optString(Option.OPTION_VALUE))) {      throw new ServiceException(langPropsService.get("notAllowAddCommentLabel"));    }    article=articleRepository.get(articleId);    int pointSum=Pointtransfer.TRANSFER_SUM_C_ADD_COMMENT;    final String articleAuthorId=article.optString(Article.ARTICLE_AUTHOR_ID);    if (articleAuthorId.equals(commentAuthorId)) {      pointSum=Pointtransfer.TRANSFER_SUM_C_ADD_SELF_ARTICLE_COMMENT;    }    final int balance=commenter.optInt(UserExt.USER_POINT);    if (balance - pointSum < 0) {      throw new ServiceException(langPropsService.get("insufficientBalanceLabel"));    }  } catch (  final RepositoryException e) {    throw new ServiceException(e);  }  final Transaction transaction=commentRepository.beginTransaction();  try {    article.put(Article.ARTICLE_COMMENT_CNT,article.optInt(Article.ARTICLE_COMMENT_CNT) + 1);    article.put(Article.ARTICLE_LATEST_CMT_TIME,System.currentTimeMillis());    final String ret=Ids.genTimeMillisId();    final JSONObject comment=new JSONObject();    comment.put(Keys.OBJECT_ID,ret);    String content=requestJSONObject.optString(Comment.COMMENT_CONTENT);    comment.put(Comment.COMMENT_AUTHOR_EMAIL,requestJSONObject.optString(Comment.COMMENT_AUTHOR_EMAIL));    comment.put(Comment.COMMENT_AUTHOR_ID,commentAuthorId);    comment.put(Comment.COMMENT_ON_ARTICLE_ID,articleId);    comment.put(Comment.COMMENT_ORIGINAL_COMMENT_ID,requestJSONObject.optString(Comment.COMMENT_ORIGINAL_COMMENT_ID));    content=Emotions.toAliases(content);    comment.put(Comment.COMMENT_CONTENT,content);    comment.put(Comment.COMMENT_CREATE_TIME,System.currentTimeMillis());    comment.put(Comment.COMMENT_SHARP_URL,"/article/" + articleId + "#"+ ret);    comment.put(Comment.COMMENT_STATUS,Comment.COMMENT_STATUS_C_VALID);    comment.put(Comment.COMMENT_IP,ip);    final JSONObject cmtCntOption=optionRepository.get(Option.ID_C_STATISTIC_CMT_COUNT);    final int cmtCnt=cmtCntOption.optInt(Option.OPTION_VALUE);    cmtCntOption.put(Option.OPTION_VALUE,String.valueOf(cmtCnt + 1));    articleRepository.update(articleId,article);    optionRepository.update(Option.ID_C_STATISTIC_CMT_COUNT,cmtCntOption);    final String tagsString=article.optString(Article.ARTICLE_TAGS);    final String[] tagStrings=tagsString.split(",");    for (int i=0; i < tagStrings.length; i++) {      final String tagTitle=tagStrings[i].trim();      final JSONObject tag=tagRepository.getByTitle(tagTitle);      tag.put(Tag.TAG_COMMENT_CNT,tag.optInt(Tag.TAG_COMMENT_CNT) + 1);      tagRepository.update(tag.optString(Keys.OBJECT_ID),tag);    }    commenter.put(UserExt.USER_COMMENT_COUNT,commenter.optInt(UserExt.USER_COMMENT_COUNT) + 1);    commenter.put(UserExt.USER_LATEST_CMT_TIME,currentTimeMillis);    userRepository.update(commenter.optString(Keys.OBJECT_ID),commenter);    final String commentId=commentRepository.add(comment);    transaction.commit();    final String articleAuthorId=article.optString(Article.ARTICLE_AUTHOR_ID);    if (articleAuthorId.equals(commentAuthorId)) {      pointtransferMgmtService.transfer(commentAuthorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_COMMENT,Pointtransfer.TRANSFER_SUM_C_ADD_SELF_ARTICLE_COMMENT,commentId);    } else {      pointtransferMgmtService.transfer(commentAuthorId,articleAuthorId,Pointtransfer.TRANSFER_TYPE_C_ADD_COMMENT,Pointtransfer.TRANSFER_SUM_C_ADD_COMMENT,commentId);    }    final JSONObject eventData=new JSONObject();    eventData.put(Comment.COMMENT,comment);    eventData.put(Article.ARTICLE,article);    try {      eventManager.fireEventAsynchronously(new Event<JSONObject>(EventTypes.ADD_COMMENT_TO_ARTICLE,eventData));    } catch (    final EventException e) {      LOGGER.log(Level.ERROR,e.getMessage(),e);    }    return ret;  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Adds a comment failed",e);    throw new ServiceException(e);  }}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  @SuppressWarnings("CallToThreadYield") private long doIteration(InputStream in,OutputStream out) throws IOException {  int read=in.read(buf,0,in.available());  if (read == 0)   Thread.yield();  out.write(buf,0,read);  return read;}  }
class C{  public IrishLowerCaseFilter(TokenStream in){  super(in);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(TypeToken<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @SuppressWarnings("unchecked") public static boolean supports(ParameterizedType type){  return getMapper(type,null) != null;}  }
class C{  public static PathPoint lineTo(float x,float y){  return new PathPoint(LINE,x,y);}  }
class C{  static void testLongFloorDivMod(){  testLongFloorDivMod(4L,0L,new ArithmeticException(),new ArithmeticException());  testLongFloorDivMod(4L,3L,1L,1L);  testLongFloorDivMod(3L,3L,1L,0L);  testLongFloorDivMod(2L,3L,0L,2L);  testLongFloorDivMod(1L,3L,0L,1L);  testLongFloorDivMod(0L,3L,0L,0L);  testLongFloorDivMod(4L,-3L,-2L,-2L);  testLongFloorDivMod(3L,-3L,-1L,0l);  testLongFloorDivMod(2L,-3L,-1L,-1L);  testLongFloorDivMod(1L,-3L,-1L,-2L);  testLongFloorDivMod(0L,-3L,0L,0L);  testLongFloorDivMod(-1L,3L,-1L,2L);  testLongFloorDivMod(-2L,3L,-1L,1L);  testLongFloorDivMod(-3L,3L,-1L,0L);  testLongFloorDivMod(-4L,3L,-2L,2L);  testLongFloorDivMod(-1L,-3L,0L,-1L);  testLongFloorDivMod(-2L,-3L,0L,-2L);  testLongFloorDivMod(-3L,-3L,1L,0L);  testLongFloorDivMod(-4L,-3L,1L,-1L);  testLongFloorDivMod(Long.MAX_VALUE,1,Long.MAX_VALUE,0L);  testLongFloorDivMod(Long.MAX_VALUE,-1,-Long.MAX_VALUE,0L);  testLongFloorDivMod(Long.MAX_VALUE,3L,Long.MAX_VALUE / 3L,1L);  testLongFloorDivMod(Long.MAX_VALUE - 1L,3L,(Long.MAX_VALUE - 1L) / 3L,0L);  testLongFloorDivMod(Long.MIN_VALUE,3L,Long.MIN_VALUE / 3L - 1L,1L);  testLongFloorDivMod(Long.MIN_VALUE + 1L,3L,Long.MIN_VALUE / 3L - 1L,2L);  testLongFloorDivMod(Long.MIN_VALUE + 1,-1,Long.MAX_VALUE,0L);  testLongFloorDivMod(Long.MIN_VALUE,-1,Long.MIN_VALUE,0L);}  }
class C{  public GraphNodeRandomized(Node modelNode){  setModelNode(modelNode);  if (modelNode.getNodeType() != NodeType.LATENT) {    throw new IllegalArgumentException("GraphNodeLatent requires " + "a GraphNode of type NodeType.LATENT.");  }  setDisplayComp(new LatentDisplayComp(modelNode.getName()));}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public Flag registerOptional(final String name,final String description){  return registerOptional(name,null,"",description);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void joinClusters(){  if (clusters.size() > 1) {    Node sourceNode=null;    Node targetNode=null;    for (Iterator<Cluster> iter=clusters.iterator(); iter.hasNext(); ) {      Cluster cluster=iter.next();      if (sourceNode != null) {        targetNode=cluster.set.get(0);        newDummyEdge(sourceNode,targetNode);      }      sourceNode=cluster.set.get(cluster.set.size() - 1);    }  }}  }
class C{  public NetDatacenterBroker(String name) throws Exception {  super(name);  setVmList(new ArrayList<NetworkVm>());  setVmsCreatedList(new ArrayList<NetworkVm>());  setCloudletList(new ArrayList<NetworkCloudlet>());  setAppCloudletList(new ArrayList<AppCloudlet>());  setCloudletSubmittedList(new ArrayList<Cloudlet>());  setCloudletReceivedList(new ArrayList<Cloudlet>());  appCloudletRecieved=new HashMap<Integer,Integer>();  cloudletsSubmitted=0;  setVmsRequested(0);  setVmsAcks(0);  setVmsDestroyed(0);  setDatacenterIdsList(new LinkedList<Integer>());  setDatacenterRequestedIdsList(new ArrayList<Integer>());  setVmsToDatacentersMap(new HashMap<Integer,Integer>());  setDatacenterCharacteristicsList(new HashMap<Integer,DatacenterCharacteristics>());}  }
class C{  protected void invalidateSchema(){  super.invalidateSchema();  this.filterColumns();}  }
class C{  public int addBoxPlot(String name,Color color,double[][] XY,double[][] dXdY){  return ((Plot2DCanvas)plotCanvas).addBoxPlot(name,color,XY,dXdY);}  }
class C{  protected void fireDataEvent(Object src,int type,int idx0,int idx1){  Object[] lstnrs=m_lstnrs.getArray();  if (lstnrs.length > 0) {    ListDataEvent e=new ListDataEvent(src,type,idx0,idx1);    for (int i=0; i < lstnrs.length; ++i) {      ((ListDataListener)lstnrs[i]).contentsChanged(e);    }  }}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") private void monitor(){  while (true) {    waitForStart();    purge();    for (int i=0; i < SAMPLE_COUNT; i++) {      try {        dump();      } catch (      IOException e) {        Slog.w(LOG_TAG,"Dump failed.",e);      }      pause();    }    stop();  }}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  public Object invoke(Object o) throws Exception {  return this.field.get(o);}  }
class C{  public void add(Object[] elements){  assertElementsNotNull(elements);  Object[] filtered=filter(elements);  ILabelProvider labelProvider=(ILabelProvider)getLabelProvider();  for (int i=0; i < filtered.length; i++) {    Object element=filtered[i];    int ix=indexForElement(element);    insertItem(labelProvider,element,ix);  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.614 -0500",hash_original_method="77DF4F38C27826586F02F5EEDFEC8C8D",hash_generated_method="1EE47D848BBB7593578BC72C9E94FD3C") public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  private CellBroadcasts(){}  }
class C{  public Builder(){}  }
class C{  protected DateLongType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  @Override public void execute() throws MojoFailureException {  if (skip) {    getLog().info("Skipping sortpom");  } else {    setup();    sortPom();  }}  }
class C{  public void testRelease_0args(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.release();  jmri.util.JUnitAppender.assertWarnMessage("Release called without knowing the original throttle listener");}  }
class C{  public MultipleCategorySeries(String title){  mTitle=title;}  }
class C{  public static void unsplitAssignColorsToLocals(Body unitBody,Map<Local,Object> localToGroup,Map<Local,Integer> localToColor,Map<Object,Integer> groupToColorCount){  ExceptionalUnitGraph unitGraph=new ExceptionalUnitGraph(unitBody);  LiveLocals liveLocals;  liveLocals=new SimpleLiveLocals(unitGraph);  UnitInterferenceGraph intGraph=new UnitInterferenceGraph(unitBody,localToGroup,liveLocals);  Map<Local,String> localToOriginalName=new HashMap<Local,String>();{    Iterator localIt=intGraph.getLocals().iterator();    while (localIt.hasNext()) {      Local local=(Local)localIt.next();      int signIndex;      signIndex=local.getName().indexOf("#");      if (signIndex != -1) {        localToOriginalName.put(local,local.getName().substring(0,signIndex));      } else       localToOriginalName.put(local,local.getName());    }  }  Map<StringGroupPair,List> originalNameAndGroupToColors=new HashMap<StringGroupPair,List>();{    int[] freeColors=new int[10];    Iterator localIt=intGraph.getLocals().iterator();    while (localIt.hasNext()) {      Local local=(Local)localIt.next();      if (localToColor.containsKey(local)) {        continue;      }      Object group=localToGroup.get(local);      int colorCount=groupToColorCount.get(group).intValue();      if (freeColors.length < colorCount)       freeColors=new int[Math.max(freeColors.length * 2,colorCount)];{        for (int i=0; i < colorCount; i++)         freeColors[i]=1;      }{        Local[] interferences=intGraph.getInterferencesOf(local);        for (        Local element : interferences) {          if (localToColor.containsKey(element)) {            int usedColor=localToColor.get(element).intValue();            freeColors[usedColor]=0;          }        }      }{        String originalName=localToOriginalName.get(local);        List<Integer> originalNameColors=originalNameAndGroupToColors.get(new StringGroupPair(originalName,group));        if (originalNameColors == null) {          originalNameColors=new ArrayList<Integer>();          originalNameAndGroupToColors.put(new StringGroupPair(originalName,group),originalNameColors);        }        boolean found=false;        int assignedColor=0;{          Iterator<Integer> colorIt=originalNameColors.iterator();          while (colorIt.hasNext()) {            Integer color=colorIt.next();            if (freeColors[color.intValue()] == 1) {              found=true;              assignedColor=color.intValue();            }          }        }        if (!found) {          assignedColor=colorCount++;          groupToColorCount.put(group,new Integer(colorCount));          originalNameColors.add(new Integer(assignedColor));        }        localToColor.put(local,new Integer(assignedColor));      }    }  }}  }
class C{  public static Observable<Boolean> observeInternetConnectivity(final int initialIntervalInMs,final int intervalInMs,final String host,final int port,final int timeoutInMs,final SocketErrorHandler socketErrorHandler){  return observeInternetConnectivity(new DefaultInternetObservingStrategy(),initialIntervalInMs,intervalInMs,host,port,timeoutInMs,socketErrorHandler);}  }
class C{  protected FileObject findPrimaryFile(FileObject fo){  if (fo.isFolder()) {    return null;  }  String ext=fo.getExt();  if (ext.equalsIgnoreCase(INFO_EXTENSION)) {    FileObject info=FileUtil.findBrother(fo,FILE_EXTENSION);    if (info != null) {      return info;    } else {      return null;    }  }  if (getExtensions().isRegistered(fo)) {    return fo;  }  return null;}  }
class C{  private void addPlayerToTeam(String player,String prefix,String suffix,int sortPriority){  FakeTeam previous=getFakeTeam(player);  if (previous != null && previous.isSimilar(prefix,suffix)) {    plugin.debug(player + " already belongs to a similar team (" + previous.getName()+ ")");    return;  }  reset(player);  FakeTeam joining=getFakeTeam(prefix,suffix);  if (joining != null) {    joining.addMember(player);    plugin.debug("Using existing team for " + player);  } else {    joining=new FakeTeam(prefix,suffix,getNameFromInput(sortPriority));    joining.addMember(player);    TEAMS.put(joining.getName(),joining);    addTeamPackets(joining);    plugin.debug("Created FakeTeam " + joining.getName() + ". Size: "+ TEAMS.size());  }  Player adding=Bukkit.getPlayerExact(player);  if (adding != null) {    addPlayerToTeamPackets(joining,adding.getName());    cache(adding.getName(),joining);  } else {    OfflinePlayer offlinePlayer=Bukkit.getOfflinePlayer(player);    addPlayerToTeamPackets(joining,offlinePlayer.getName());    cache(offlinePlayer.getName(),joining);  }  plugin.debug(player + " has been added to team " + joining.getName());}  }
class C{  protected void convertToRGBA(int[] pixels,int format,int w,int h){  if (PGL.BIG_ENDIAN) {switch (format) {case ALPHA:      for (int i=0; i < pixels.length; i++) {        rgbaPixels[i]=0xFFFFFF00 | pixels[i];      }    break;case RGB:  for (int i=0; i < pixels.length; i++) {    int pixel=pixels[i];    rgbaPixels[i]=(pixel << 8) | 0xFF;  }break;case ARGB:for (int i=0; i < pixels.length; i++) {int pixel=pixels[i];rgbaPixels[i]=(pixel << 8) | ((pixel >> 24) & 0xFF);}break;}} else {switch (format) {case ALPHA:for (int i=0; i < pixels.length; i++) {rgbaPixels[i]=(pixels[i] << 24) | 0x00FFFFFF;}break;case RGB:for (int i=0; i < pixels.length; i++) {int pixel=pixels[i];rgbaPixels[i]=0xFF000000 | ((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16)| (pixel & 0x0000FF00);}break;case ARGB:for (int i=0; i < pixels.length; i++) {int pixel=pixels[i];rgbaPixels[i]=((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16) | (pixel & 0xFF00FF00);}break;}}rgbaPixUpdateCount++;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  protected int entryHashCode(final HashEntry<K,V> entry){  return entry.hashCode;}  }
class C{  public ITypeBinding resolveWellKnownType(String name){  if (name == null) {    return null;  }  return getBindingResolver().resolveWellKnownType(name);}  }
class C{  @Override public void resetPageContext(){  SystemOut.printDate(config.getOutWriter(),"Reset " + pcs.size() + " Unused PageContexts");synchronized (pcs) {    pcs.clear();  }  Iterator<PageContextImpl> it=runningPcs.values().iterator();  while (it.hasNext()) {    it.next().reset();  }}  }
class C{  public static void acc_subtract(AccurateValue n1,AccurateValue n2,AccurateValue sum){  if (n1.acc_isZero()) {    AccurateValue cp=n2.acc_copy();    sum.digits=cp.digits;    sum.sign=-n2.sign;    return;  } else   if (n2.acc_isZero()) {    AccurateValue cp=n1.acc_copy();    sum.digits=cp.digits;    sum.sign=n1.sign;    return;  }  if (n1.sign == n2.sign) {    acc_realSubtract(n1,n2,sum);  } else {    AccurateValue o1=n1.acc_copy();    AccurateValue o2=n2.acc_copy();    if (o1.sign == -1) {      o2.sign=-1;      acc_realAdd(o1,o2,sum);    } else {      o2.sign=1;      acc_realAdd(o1,o2,sum);    }  }  sum.acc_reduceInner();}  }
class C{  public static <T>List<T> nCopies(int n,T o){  if (n < 0)   throw new IllegalArgumentException("List length = " + n);  return new CopiesList<>(n,o);}  }
class C{  public EventStoreBuilder maxConcurrentOperations(int count){  settingsBuilder.maxConcurrentOperations(count);  return this;}  }
class C{  private void addAnnotatedClassesAndTypes(Configuration configuration){  configuration.registerTypeOverride(new BlobType(),new String[]{"BlobType"});  configuration.registerTypeOverride(new StoreFQNType(),new String[]{"StoreFQNOnly"});  configuration.registerTypeOverride(new ListJsonType(),new String[]{"ListJsonType"});  configuration.addAnnotatedClass(AuditRecord.class);  configuration.addAnnotatedClass(Event.class);  configuration.addAnnotatedClass(State.class);  configuration.addAnnotatedClass(StateMachine.class);}  }
class C{  private TableViewer createDataTable(final Composite parent,final WorkItem workItem){  final Label label=new Label(parent,SWT.NONE);  label.setText(Messages.getString("TestStepsControl.ParameterValuesLabelText"));  final TableViewer dataViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);  final Table dataTable=dataViewer.getTable();  GridDataBuilder.newInstance().align(SWT.FILL,SWT.FILL).grab(true,true).span(1,1).minHeight(75).applyTo(dataTable);  dataTable.setHeaderVisible(true);  dataTable.setLinesVisible(true);  final TableLayout layout=new TableLayout();  dataTable.setLayout(layout);  final ParamDataTable[] paramDataTables=getParamDataTables();  if (paramDataTables.length > 0) {    sash.setMaximizedControl(null);    updateDataTableColumns(dataViewer,paramDataTables[0].getColumnNames());  } else {    sash.setMaximizedControl(stepsTable.getTable());  }  dataViewer.setContentProvider(new ParamDataContentProvider());  dataViewer.setLabelProvider(new ParamDataLabelProvider());  dataViewer.setInput(workItem);  return dataViewer;}  }
class C{  public static Typeface androidNationBold(Context context){  sAndroidNationBold=getFontFromRes(R.raw.androidnation_b,context);  return sAndroidNationBold;}  }
class C{  public void verifyMetaLocked(Session session){  if (meta != null && !meta.isLockedExclusivelyBy(session) && lockMode != Constants.LOCK_MODE_OFF) {    throw DbException.throwInternalError();  }}  }
class C{  public void removeSegment(short startCode,short endCode){  Segment s=new Segment(startCode,endCode,true);  segments.remove(s);}  }
class C{  public String config(String collectionName) throws CollectionPatternException {  if ((configRules.size() == 0) && (StringUtils.isBlank(defaultConfig))) {    String configName="";    if (sourceZkClusterData != null) {      configName=sourceZkClusterData.getCollectionToConfigMapping().get(collectionName);    }    if (StringUtils.isBlank(configName)) {      throw new CollectionPatternException("Collections " + collectionName + " does not exist in the source Cluster.. ");    }    return configName;  }  for (  String[] rule : configRules) {    if (collectionName.contains(rule[0])) {      logger.debug("MappedConfig Collection: " + collectionName + " --> Config:"+ rule[1]);      return rule[1];    }  }  logger.debug("MappedConfig Collection: " + collectionName + " --> DefaultConfig:"+ defaultConfig);  return defaultConfig;}  }
class C{  protected Integer wrap(int k){  return new Integer(k);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DoubleTextField(){  super(10);  initTextField();}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  public String toString(){  return getURL();}  }
class C{  private boolean bannedClassesCreated(){  for (  SootMethod m : PTABridge.v().getReachableMethods()) {    if (API.v().isSystemMethod(m) || m.isAbstract() || !m.isConcrete()|| m.isPhantom()|| SootUtils.isRuntimeStubMethod(m))     continue;    StmtBody stmtBody=(StmtBody)m.getActiveBody();    Iterator stmtIt=stmtBody.getUnits().snapshotIterator();    while (stmtIt.hasNext()) {      Stmt stmt=(Stmt)stmtIt.next();      if (stmt instanceof AssignStmt) {        if (((AssignStmt)stmt).getRightOp() instanceof NewExpr && failIfTheseAreCreated.contains(((NewExpr)((AssignStmt)stmt).getRightOp()).getBaseType().getSootClass())) {          AnalysisReport.v().addEntry("FilePrecisionTransform: found banned creation",stmt,AnalysisReport.Level.GUARDED);          logger.info("FilePrecisionTransform: found banned creation: {}",stmt);          return true;        }      } else       if (stmt.containsInvokeExpr()) {        for (        SootMethod target : PTABridge.v().getTargetsInsNoContext(stmt)) {          if (!API.v().isSystemMethod(target))           continue;          if (target.getReturnType() instanceof RefType && failIfTheseAreCreated.contains(((RefType)target.getReturnType()).getSootClass())) {            logger.info("FilePrecisionTransform: found banned creation: {}",stmt);            AnalysisReport.v().addEntry("FilePrecisionTransform: found banned creation",stmt,AnalysisReport.Level.GUARDED);            return true;          }        }      }    }  }  return false;}  }
class C{  public boolean addAll(Collection<? extends Character> c){  boolean retVal=false;  final Iterator<? extends Character> i=c.iterator();  int n=c.size();  while (n-- != 0)   if (add(i.next()))   retVal=true;  return retVal;}  }
class C{  private void loadAlreadyRegisteredActivity(){  Intent intent=new Intent(RegistrationActivity.this,AlreadyRegisteredActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_fresh_reg_flag),true);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public String userTipText(){  return "The user name for the database";}  }
class C{  public VcfEvalParamsBuilder callsSample(final String sampleName){  mCallsSample=sampleName;  return self();}  }
class C{  protected QuickBitVector(){}  }
class C{  protected Token nextToken(Token tkn) throws IOException {  wsBuf.clear();  int lastChar=in.readAgain();  int c=in.read();  boolean eol=isEndOfLine(c);  c=in.readAgain();  while (strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar)) {    lastChar=c;    c=in.read();    eol=isEndOfLine(c);    c=in.readAgain();    if (isEndOfFile(c)) {      tkn.type=TT_EOF;      return tkn;    }  }  if (isEndOfFile(lastChar) || (lastChar != strategy.getDelimiter() && isEndOfFile(c))) {    tkn.type=TT_EOF;    return tkn;  }  while (!tkn.isReady && tkn.type != TT_EOF) {    while (strategy.getIgnoreLeadingWhitespaces() && isWhitespace(c) && !eol) {      wsBuf.append((char)c);      c=in.read();      eol=isEndOfLine(c);    }    if (c == strategy.getCommentStart()) {      in.readLine();      tkn=nextToken(tkn.reset());    } else     if (c == strategy.getDelimiter()) {      tkn.type=TT_TOKEN;      tkn.isReady=true;    } else     if (eol) {      tkn.type=TT_EORECORD;      tkn.isReady=true;    } else     if (c == strategy.getEncapsulator()) {      encapsulatedTokenLexer(tkn,c);    } else     if (isEndOfFile(c)) {      tkn.type=TT_EOF;      tkn.isReady=true;    } else {      if (!strategy.getIgnoreLeadingWhitespaces()) {        tkn.content.append(wsBuf);      }      simpleTokenLexer(tkn,c);    }  }  return tkn;}  }
class C{  public void testMobile(){  String subscriberId=mTelephonyManager.getSubscriberId();  NetworkTemplate template=NetworkTemplate.buildTemplateMobileAll(subscriberId);  fetchStats(template);}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,int orientationHeaderId,MediaOutput renderer,Format format,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new RtpInputStream(remoteAddress,remotePort,localPort,format);    inputStream.setExtensionHeaderId(orientationHeaderId);    inputStream.addRtpStreamListener(rtpStreamListener);    inputStream.open();    VideoRendererStream outputStream=new VideoRendererStream(renderer);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateDecodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  private void respondError(AdHocCommandData response,XMPPError.Condition condition,AdHocCommand.SpecificErrorCondition specificCondition){  XMPPError error=new XMPPError(condition);  error.addExtension(new AdHocCommandData.SpecificError(specificCondition));  respondError(response,error);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void write(CompositionPlaylistType cplType,OutputStream output,boolean formatted) throws IOException, org.xml.sax.SAXException, JAXBException {  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();  try (InputStream cplSchemaAsAStream=contextClassLoader.getResourceAsStream("org/smpte_ra/schemas/st2067_3_2013/imf-cpl.xsd");InputStream dcmlSchemaAsAStream=contextClassLoader.getResourceAsStream("org/smpte_ra/schemas/st0433_2008/dcmlTypes/dcmlTypes.xsd");InputStream dsigSchemaAsAStream=contextClassLoader.getResourceAsStream("org/w3/_2000_09/xmldsig/xmldsig-core-schema.xsd");InputStream coreConstraintsSchemaAsAStream=contextClassLoader.getResourceAsStream("org/smpte_ra/schemas/st2067_2_2013/imf-core-constraints-20130620-pal.xsd")){    SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    StreamSource[] schemaSources=new StreamSource[4];    schemaSources[0]=new StreamSource(dsigSchemaAsAStream);    schemaSources[1]=new StreamSource(dcmlSchemaAsAStream);    schemaSources[2]=new StreamSource(cplSchemaAsAStream);    schemaSources[3]=new StreamSource(coreConstraintsSchemaAsAStream);    Schema schema=schemaFactory.newSchema(schemaSources);    JAXBContext jaxbContext=JAXBContext.newInstance("org.smpte_ra.schemas.st2067_2_2013");    Marshaller marshaller=jaxbContext.createMarshaller();    ValidationEventHandlerImpl validationEventHandler=new ValidationEventHandlerImpl(true);    marshaller.setEventHandler(validationEventHandler);    marshaller.setSchema(schema);    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formatted);    marshaller.marshal(new JAXBElement<>(new QName("http://www.smpte-ra.org/schemas/2067-3/2013","CompositionPlaylist"),CompositionPlaylistType.class,cplType),output);    if (validationEventHandler.hasErrors()) {      throw new IOException(validationEventHandler.toString());    }  } }  }
class C{  private static int computeYDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int leftColumnDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleWidth);  int rightColumnDimension=MathUtils.round(ResultPoint.distance(topRight,bottomRight) / moduleWidth);  return (leftColumnDimension + rightColumnDimension) >> 1;}  }
class C{  public ThreadPoolMXBeanAdapter(ExecutorService exec){  assert exec != null;  this.exec=exec;}  }
class C{  public void init(){  siteMapper=new SiteMapper();  startLeaderSelector();}  }
class C{  public ArrayList<Object>[] generateRules(double minConfidence,ArrayList<Hashtable<ItemSet,Integer>> hashtables,int numItemsInSet){  ArrayList<Object> premises=new ArrayList<Object>(), consequences=new ArrayList<Object>(), conf=new ArrayList<Object>();  ArrayList<Object> lift=new ArrayList<Object>(), lev=new ArrayList<Object>(), conv=new ArrayList<Object>();  @SuppressWarnings("unchecked") ArrayList<Object>[] rules=new ArrayList[6], moreResults;  AprioriItemSet premise, consequence;  Hashtable<ItemSet,Integer> hashtable=hashtables.get(numItemsInSet - 2);  for (int i=0; i < m_items.length; i++) {    if (m_items[i] != -1) {      premise=new AprioriItemSet(m_totalTransactions);      consequence=new AprioriItemSet(m_totalTransactions);      premise.m_items=new int[m_items.length];      consequence.m_items=new int[m_items.length];      consequence.m_counter=m_counter;      for (int j=0; j < m_items.length; j++) {        consequence.m_items[j]=-1;      }      System.arraycopy(m_items,0,premise.m_items,0,m_items.length);      premise.m_items[i]=-1;      consequence.m_items[i]=m_items[i];      premise.m_counter=hashtable.get(premise).intValue();      Hashtable<ItemSet,Integer> hashtableForConsequence=hashtables.get(0);      int consequenceUnconditionedCounter=hashtableForConsequence.get(consequence).intValue();      premises.add(premise);      consequences.add(consequence);      conf.add(new Double(confidenceForRule(premise,consequence)));      double tempLift=liftForRule(premise,consequence,consequenceUnconditionedCounter);      double tempLev=leverageForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);      double tempConv=convictionForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);      lift.add(new Double(tempLift));      lev.add(new Double(tempLev));      conv.add(new Double(tempConv));    }  }  rules[0]=premises;  rules[1]=consequences;  rules[2]=conf;  rules[3]=lift;  rules[4]=lev;  rules[5]=conv;  pruneRules(rules,minConfidence);  moreResults=moreComplexRules(rules,numItemsInSet,1,minConfidence,hashtables);  if (moreResults != null) {    for (int i=0; i < moreResults[0].size(); i++) {      rules[0].add(moreResults[0].get(i));      rules[1].add(moreResults[1].get(i));      rules[2].add(moreResults[2].get(i));      rules[3].add(moreResults[3].get(i));      rules[4].add(moreResults[4].get(i));      rules[5].add(moreResults[5].get(i));    }  }  return rules;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:12.377 -0500",hash_original_method="8E82FAA48BB361A9859A3C64A69CEBFA",hash_generated_method="639986077F4F64C49F9CD8BE0AAAE4A8") void appendGenericType(StringBuilder sb,Type obj){  if (obj instanceof TypeVariable) {    sb.append(((TypeVariable)obj).getName());  } else   if (obj instanceof ParameterizedType) {    sb.append(obj.toString());  } else   if (obj instanceof GenericArrayType) {    Type simplified=((GenericArrayType)obj).getGenericComponentType();    appendGenericType(sb,simplified);    sb.append("[]");  } else   if (obj instanceof Class) {    Class c=((Class<?>)obj);    if (c.isArray()) {      String as[]=c.getName().split("\\[");      int len=as.length - 1;      if (as[len].length() > 1) {        sb.append(as[len].substring(1,as[len].length() - 1));      } else {        char ch=as[len].charAt(0);        if (ch == 'I')         sb.append("int"); else         if (ch == 'B')         sb.append("byte"); else         if (ch == 'J')         sb.append("long"); else         if (ch == 'F')         sb.append("float"); else         if (ch == 'D')         sb.append("double"); else         if (ch == 'S')         sb.append("short"); else         if (ch == 'C')         sb.append("char"); else         if (ch == 'Z')         sb.append("boolean"); else         if (ch == 'V')         sb.append("void");      }      for (int i=0; i < len; i++) {        sb.append("[]");      }    } else {      sb.append(c.getName());    }  }}  }
class C{  @Override protected PlaceInfoCollection doInBackground(final Location... params){  Location checkInLocation=params[0];  float longitude;  float latitude;  if (checkInLocation == null) {    longitude=BuildConfig.DUMMY_LONGITUDE;    latitude=BuildConfig.DUMMY_LATITUDE;  } else {    latitude=(float)checkInLocation.getLatitude();    longitude=(float)checkInLocation.getLongitude();  }  PlaceInfoCollection result;  try {    final long distanceInKm=50;    final int count=10;    result=shoppingAssistantAPI.places().getPlaces(Float.toString(longitude),Float.toString(latitude),distanceInKm,count).execute();  } catch (  IOException e) {    String message=e.getMessage();    if (message == null) {      message=e.toString();    }    LOG.severe("Exception=" + message);    result=null;  }  return result;}  }
class C{  public TIntHashSet(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  protected boolean isStringFlavor(DataFlavor flavor){  DataFlavor[] flavors=stringFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,v + x))) {      longAccumulate(x,null,uncontended);    }  }}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  if (mDragLock != DragLock.SCROLL && mDiscardingTab != null) {    float velocity=mCurrentMode == Orientation.PORTRAIT ? velocityX : velocityY;    float maxDelta=getDiscardRange() * DISCARD_FLING_MAX_CONTRIBUTION;    float deltaAmount=MathUtils.clamp(velocity * DISCARD_FLING_DT,-maxDelta,maxDelta);    mDiscardingTab.addToDiscardAmount(deltaAmount);  } else   if (mOverviewAnimationType == OverviewAnimationType.NONE && mScroller.isFinished() && mOverScrollOffset == 0 && getTabIndexAtPositon(x,y) >= 0) {    float velocity=mCurrentMode == Orientation.PORTRAIT ? velocityY : (LocalizationUtils.isLayoutRtl() ? -velocityX : velocityX);    mScroller.fling(0,(int)mScrollTarget,0,(int)velocity,0,0,(int)getMinScroll(false),(int)getMaxScroll(false),0,(int)((velocity > 0 ? mMaxOverScroll : mMaxUnderScroll) * MAX_OVER_FLING_SCALE),time);    setScrollTarget(mScroller.getFinalY(),false);  }}  }
class C{  public ContentAssistInvocationContext(IDocument document,int offset){  Assert.isNotNull(document);  Assert.isTrue(offset >= 0);  fViewer=null;  fDocument=document;  fOffset=offset;}  }
class C{  void finish() throws SortQueryException {  if (entityLoaders != null) {    LOG.debug("Finishing query execution....");    downcastAbstractEntities(query);    processToManyRelations(query);    setEntityStateToLoadedAndRefresh();    prepareQueryResult();    LOG.debug("Finished query execution.");  }}  }
class C{  private void pushPacket(IOFSwitch sw,Match match,OFPacketIn pi,OFPort outport){  if (pi == null) {    return;  }  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (inPort.equals(outport)) {    if (log.isDebugEnabled()) {      log.debug("Attempting to do packet-out to the same " + "interface as packet-in. Dropping packet. " + " SrcSwitch={}, match = {}, pi={}",new Object[]{sw,match,pi});      return;    }  }  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} match={} pi={}",new Object[]{sw,match,pi});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outport).setMaxLen(0xffFFffFF).build());  pob.setActions(actions);  if (sw.getBuffers() == 0) {    pi=pi.createBuilder().setBufferId(OFBufferId.NO_BUFFER).build();    pob.setBufferId(OFBufferId.NO_BUFFER);  } else {    pob.setBufferId(pi.getBufferId());  }  pob.setInPort(inPort);  if (pi.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=pi.getData();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public void sendMessage(JsonNode message) throws IOException {  super.sendMessage(this.getObjectMapper().writeValueAsString(message));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void IADD(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.IADD();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public PImage createImage(int wide,int high,int format){  PImage image=new PImage(wide,high,format);  image.parent=this;  return image;}  }
class C{  public void testBatchFiltering(){  return;}  }
class C{  public UsageLogging(Properties properties,String modulename,UUID runId,boolean suppress) throws IOException {  this(properties,modulename,runId,null,suppress);}  }
class C{  @SuppressWarnings("unchecked") public static void registerAtStart(String className){  JavaUtils.checkRegisterPermission();  try {    Class<ResourceResolverSpi> resourceResolverClass=(Class<ResourceResolverSpi>)Class.forName(className);    register(resourceResolverClass,true);  } catch (  ClassNotFoundException e) {    log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");  }}  }
class C{  private void handleQueryTaskResponseAndConsolidateStats(Map<Long,Operation> ops,Map<Long,Throwable> failures,AzureStatsDataHolder statsData){  try {    if (failures != null) {      sendFailurePatch(statsData,failures.get(0L));      return;    }    List<QueryTask> items=new ArrayList<>(ops.size());    for (    Operation op : ops.values()) {      QueryTask queryResult=op.getBody(QueryTask.class);      items.add(queryResult);    }    SingleResourceStatsCollectionTaskState response=aggregateComputeStatsResponses(statsData,items);    response.taskStage=(SingleResourceTaskCollectionStage)statsData.statsRequest.nextStage;    response.statsAdapterReference=UriUtils.buildUri(getHost(),SELF_LINK);    this.sendRequest(Operation.createPatch(statsData.statsRequest.taskReference).setBody(response).setReferer(getUri()));  } catch (  Throwable t) {    sendFailurePatch(statsData,t);  }}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  public void testResourcesAvailable(){  new IndonesianAnalyzer().close();}  }
class C{  public boolean isNameUsed(String name){  Enumeration pages=pageStorage.keys();  while (pages.hasMoreElements()) {    if (isNameUsedOnPage(name,pages.nextElement())) {      return true;    }  }  return keywords.contains(name) || specContext.occurSymbol(UniqueString.uniqueStringOf(name));}  }
class C{  protected final void assertStillUp() throws IllegalStateException {  if (this.isShutDown)   throw new IllegalStateException("Manager is shut down.");}  }
class C{  public static APPlatformException createAndLogPlatformException(Throwable t,Context context){  if (t instanceof EJBException) {    if (t.getCause() != null) {      t=t.getCause();    }  }  APPlatformException result=null;  Logger logger=null;  String method="";  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  logger=LoggerFactory.getLogger(stackTrace[1].getClassName());  method=stackTrace[1].getMethodName() + "() failed: ";  if (t instanceof APPlatformException) {    result=(APPlatformException)t;  } else {    logger.error("Wrapping APPlatformException for: ",t);    if (t.getClass().getName().endsWith("OViSSException") && t.getCause() != null) {      t=t.getCause();    }    String causeMessage=(t.getMessage() != null) ? t.getMessage() : t.getClass().getName();    String id=context != null ? context.name() : "undefined";    result=new APPlatformException(Messages.getAll("error_overall_" + id,causeMessage));  }  logger.error(method + result.getLocalizedMessage(Messages.DEFAULT_LOCALE));  return result;}  }
class C{  public LandUseBuildingReader(CoordinateTransformation ct,Map<String,String> osmLandUseToMatsimTypeMap,Map<String,String> osmBuildingToMatsimTypeMap,double buildingTypeFromVicinityRange,String[] tagsToIgnoreBuildings){  log.info("Creating LandUseAndBuildingReader");  this.ct=ct;  this.osmLandUseToMatsimTypeMap=osmLandUseToMatsimTypeMap;  this.osmBuildingToMatsimTypeMap=osmBuildingToMatsimTypeMap;  this.landuse=FacilitiesUtils.createActivityFacilities("OpenStreetMap landuse ???");  this.buildingTypeFromVicinityRange=buildingTypeFromVicinityRange;  this.tagsToIgnoreBuildings=tagsToIgnoreBuildings;}  }
class C{  public Long deleteFileOrFolderByExternalIdAndType(String SID,Long externalFilesid,String externalType) throws AxisFault {  return this.geFileServiceProxy().deleteFileOrFolderByExternalIdAndType(SID,externalFilesid,externalType);}  }
class C{  @Override public AbstractFrame openFrame(@Nullable Component parent,String windowAlias){  return (AbstractFrame)frame.openFrame(parent,windowAlias);}  }
class C{  public LocationAnimator(String group){  super(group);}  }
class C{  public DividerDecoration(Context context,boolean drawOnLastItem,@IdRes int... excludedLayoutIDs){  dividerDrawable=new ColorDrawable(context.getResources().getColor(R.color.divider));  measuredDividerHeight=(int)Math.ceil(DIVIDER_HEIGHT_DP * context.getResources().getDisplayMetrics().density);  excludedIDs=excludedLayoutIDs;  this.drawOnLastItem=drawOnLastItem;}  }
class C{  public boolean isRefCountTracking(){  if (!trackReferenceCounts())   return false;  return !(getReferenceCountOwner() == SKIP_REF_COUNT_TRACKING);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserDao.dropTable(db,ifExists);  CategoryDao.dropTable(db,ifExists);  ChallengeDao.dropTable(db,ifExists);  AnswerDao.dropTable(db,ifExists);  CompletionDao.dropTable(db,ifExists);  SettingsDao.dropTable(db,ifExists);  StatisticsDao.dropTable(db,ifExists);}  }
class C{  protected void doValidateZeroLongFile(String path,String filename,long size,boolean checkContents){  File inFile=new File(path,filename);  DataInputStream inStream=null;  Log.i(LOG_TAG,"Validating file " + filename + " at "+ path);  try {    inStream=new DataInputStream(new FileInputStream(inFile));    if (checkContents) {      for (long i=0; i < size; ++i) {        if (inStream.readLong() != 0) {          fail("Unexpected value read in OBB file" + filename);        }      }    }    if (inStream != null) {      inStream.close();    }    Log.i(LOG_TAG,"File " + filename + " successfully verified for "+ size+ " zeros");  } catch (  IOException e) {    fail("IOError with file " + inFile + ":"+ e.toString());  }}  }
class C{  private void visualizeResizeForDelta(int deltaX,int deltaY,boolean onDismiss){  updateDeltas(deltaX,deltaY);  DragLayer.LayoutParams lp=(DragLayer.LayoutParams)getLayoutParams();  if (mLeftBorderActive) {    lp.x=mBaselineX + mDeltaX;    lp.width=mBaselineWidth - mDeltaX;  } else   if (mRightBorderActive) {    lp.width=mBaselineWidth + mDeltaX;  }  if (mTopBorderActive) {    lp.y=mBaselineY + mDeltaY;    lp.height=mBaselineHeight - mDeltaY;  } else   if (mBottomBorderActive) {    lp.height=mBaselineHeight + mDeltaY;  }  resizeWidgetIfNeeded(onDismiss);  requestLayout();}  }
class C{  public boolean union(RWSet other){  if (other == null)   return false;  boolean ret=false;  if (other.getCallsNative())   ret=setCallsNative();  if (other.getFields().isEmpty() && other.getGlobals().isEmpty())   return ret;  return sets.add(other) | ret;}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  public void parse(final Context context,final ChcpXmlConfig chcpConfig){  this.chcpConfig=chcpConfig;  isInsideChcpBlock=false;  didParseChcpBlock=false;  super.parse(context);}  }
class C{  public NodeDeRegistrationResponse deregisterNode(final String nodeId) throws RequiredInputMissingException, RemoteClientConnectionFailedException {  if (StringUtils.isBlank(nodeId))   throw new RequiredInputMissingException("Missing required node identifier");  StringBuffer url=new StringBuffer(this.resourceManagerServiceBaseUrl).append("/nodes/").append(nodeId);  if (logger.isDebugEnabled())   logger.debug("De-registering processing node [nodeId=" + nodeId + "] at resource manager "+ url.toString());  try {    final WebTarget webTarget=this.restClient.target(url.toString());    return webTarget.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).delete(NodeDeRegistrationResponse.class);  } catch (  Exception e) {    throw new RemoteClientConnectionFailedException("Failed to establish a connection with the remote resource manager [url=" + url.toString() + "]. Error: "+ e.getMessage());  }}  }
class C{  public void close(){  player.close();  if (mLogger.isActivated()) {    mLogger.debug("Media capture stream closed");  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep createFileSystem(FileSystemParam param,@QueryParam("project") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,Project.class,"project");  ArgValidator.checkFieldNotNull(param.getLabel(),"label");  Project project=_permissionsHelper.getObjectById(id,Project.class);  ArgValidator.checkEntity(project,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldNotNull(project.getTenantOrg(),"project");  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());  return createFSInternal(param,project,tenant,null);}  }
class C{  @HLEFunction(nid=0x9ACE131E,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelSleepThread(){  return hleKernelSleepThread(false);}  }
class C{  private void sendFinalBroadcast(UploadFileOperation upload,RemoteOperationResult uploadResult){  Intent end=new Intent(getUploadFinishMessage());  end.putExtra(EXTRA_REMOTE_PATH,upload.getRemotePath());  if (upload.wasRenamed()) {    end.putExtra(EXTRA_OLD_REMOTE_PATH,upload.getOldFile().getRemotePath());  }  end.putExtra(EXTRA_OLD_FILE_PATH,upload.getOriginalStoragePath());  end.putExtra(ACCOUNT_NAME,upload.getAccount().name);  end.putExtra(EXTRA_UPLOAD_RESULT,uploadResult.isSuccess());  sendStickyBroadcast(end);}  }
class C{  public static void createActions(ListComponent owner){  createActions(owner,EnumSet.of(ListActionType.CREATE,ListActionType.EDIT,ListActionType.REMOVE));}  }
class C{  private static byte[] buildRowkey(int prefixHash,List<Integer> partitionHashValues,long timestamp,SortedMap<Integer,Integer> tags){  final int len=4 + 8 + tags.size() * (4 + 4) + (partitionHashValues.size() * 4);  final byte[] rowkey=new byte[len];  int offset=0;  ByteUtil.intToBytes(prefixHash,rowkey,offset);  offset+=4;  for (  Integer partHash : partitionHashValues) {    ByteUtil.intToBytes(partHash,rowkey,offset);    offset+=4;  }  ByteUtil.longToBytes(timestamp,rowkey,offset);  offset+=8;  for (  Map.Entry<Integer,Integer> entry : tags.entrySet()) {    ByteUtil.intToBytes(entry.getKey(),rowkey,offset);    offset+=4;    ByteUtil.intToBytes(entry.getValue(),rowkey,offset);    offset+=4;  }  return rowkey;}  }
class C{  @Override public Void call() throws Exception {  final UnisolatedReadWriteIndex[] indices=new UnisolatedReadWriteIndex[resource.length];  final Thread t=Thread.currentThread();  threads.add(t);  try {    for (int i=0; i < resource.length; i++) {      final String name=resource[i];      final BTree btree=journal.getIndex(name);      indices[i]=new UnisolatedReadWriteIndex(btree);    }    for (int i=0; i < nops; i++) {      final IIndex ndx=indices[i % resource.length];      final byte[] key=new byte[keyLen];      r.nextBytes(key);      if (r.nextInt(100) > 10) {        final byte[] val=new byte[5];        r.nextBytes(val);        ndx.insert(key,val);      } else {        ndx.remove(key);      }    }    if (r.nextDouble() < failureRate) {      throw new SpuriousException();    } else     if (r.nextDouble() < commitRate) {      for (      String name : resource) {        final BTree btree=journal.getIndex(name);        btree.writeCheckpoint();      }    }    return null;  }  finally {    threads.remove(t);  }}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  ArrayList<Attribute> atts;  ArrayList<String> attValues;  int i;  int n;  m_Random=new Random(getSeed());  setNumExamplesAct(getNumExamples());  atts=new ArrayList<Attribute>();  for (n=1; n <= 24; n++) {    attValues=new ArrayList<String>();    for (i=0; i < 2; i++) {      attValues.add("" + i);    }    atts.add(new Attribute("att" + n,attValues));  }  attValues=new ArrayList<String>();  for (i=0; i < 10; i++) {    attValues.add("" + i);  }  atts.add(new Attribute("class",attValues));  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);  return m_DatasetFormat;}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1)   return path;  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public static Vec4[] findThreeIndependentVertices(Vec4[] coords){  if (coords == null || coords.length < 3)   return null;  Vec4 a=coords[0];  Vec4 b=null;  Vec4 c=null;  int k=1;  for (; k < coords.length; k++) {    b=coords[k];    if (!(b.x == a.x && b.y == a.y && b.z == a.z))     break;    b=null;  }  if (b == null)   return null;  for (; k < coords.length; k++) {    c=coords[k];    if (!((c.x == a.x && c.y == a.y && c.z == a.z) || (c.x == b.x && c.y == b.y && c.z == b.z))) {      if (!Vec4.areColinear(a,b,c))       break;    }    c=null;  }  return c != null ? new Vec4[]{a,b,c} : null;}  }
class C{  private static void reply_Login2_Org(body body,MobileSessionCtx wsc,WWindowStatus ws,String formName,String fieldValue,String locationValue){  String form=null;  log.info("Location-Org: " + locationValue);  form=locationValue + MobileEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair org=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  String error=login.validateLogin(org);  if (error != null && error.length() > 0) {    log.severe(error);    ws.mWindow=null;    wsc.ctx=new Properties();    return;  }  KeyNamePair[] whs=login.getWarehouses(org);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  private AttributeCreatorImpl addAttribute(AttributeKey<?> attributeKey,Action action){synchronized (registry) {    QName id=attributeKey.getId();    if (action == Action.ADD) {      attributes.remove(id);    }    attributes.put(id,new AttributeInfo(attributeKey,action));    return (AttributeCreatorImpl)registry.build(elementKey,attributeKey,transformKey.getContext());  }}  }
class C{  public static void printStatic(String uri,HttpServletRequest request,Response response){  try {    String realpath="";    InputStream ins=null;    if (isWeb) {      realpath=request.getServletContext().getRealPath(uri);      File file=new File(realpath);      if (FileKit.exist(file)) {        ins=new FileInputStream(file);      }    } else {      ins=appClass.getResourceAsStream(uri);    }    if (null != ins) {      print(ins,response.outputStream());    } else {      LOGGER.debug("request realpath is [{}]",realpath);      HttpException httpException=new HttpException(404,uri + " not found");      DispatchKit.printError(httpException,404,response);    }  } catch (  FileNotFoundException e) {    DispatchKit.printError(e,404,response);  }catch (  IOException e) {    DispatchKit.printError(e,500,response);  }}  }
class C{  private void parseRuleLine(Scanner s){  TZDBRule rule=new TZDBRule();  String name=s.next();  if (rules.containsKey(name) == false) {    rules.put(name,new ArrayList<TZDBRule>());  }  rules.get(name).add(rule);  rule.startYear=parseYear(s,0);  rule.endYear=parseYear(s,rule.startYear);  if (rule.startYear > rule.endYear) {    throw new IllegalArgumentException("Year order invalid: " + rule.startYear + " > "+ rule.endYear);  }  parseOptional(s.next());  parseMonthDayTime(s,rule);  rule.savingsAmount=parsePeriod(s.next());  rule.text=parseOptional(s.next());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.598 -0500",hash_original_method="97F607FA924E3FA8AA008A1519BCA623",hash_generated_method="A03DF9FDC8B7FEC8EA64149AD0E09E24") synchronized void onDestroyed(){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operationName_1: ");  result.append(operationName_1);  result.append(", code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  public String stem(String word){  return new String(word);}  }
class C{  public void mouseEntered(MouseEvent e){  if (coolMM) {    getCurrentLayerMapMouseListener().mouseEntered(e);  }}  }
class C{  public boolean isQtyPercentage(){  Object oo=get_Value(COLUMNNAME_IsQtyPercentage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private IEspDevice __getCurrentDevice(String deviceKey){  String headerKey="Authorization";  String headerValue="token " + deviceKey;  HeaderPair header=new HeaderPair(headerKey,headerValue);  String url=URL_GET_DEVICE;  if (__isHttpsSupported()) {    url=url.replace("https","http");  }  JSONObject jsonObjectResult=EspBaseApiUtil.Get(url,header);  int status=-1;  try {    if (jsonObjectResult != null)     status=Integer.parseInt(jsonObjectResult.getString("status"));  } catch (  JSONException e) {    e.printStackTrace();  }  if (HttpStatus.SC_OK == status) {    log.debug("getDevice() ok");    try {      String token=deviceKey;      long userId=BEspUser.getBuilder().getInstance().getUserId();      boolean is_owner_key=false;      is_owner_key=true;      JSONObject deviceJson=jsonObjectResult.getJSONObject("device");      long id=deviceJson.getLong("id");      String BSSID=deviceJson.getString("bssid");      String deviceName=deviceJson.getString("name");      if (deviceName.length() > "device-name-".length()) {        String deviceNamePre=deviceName.substring(0,"device-name-".length());        if (deviceNamePre.equals("device-name-")) {          deviceName=BSSIDUtil.genDeviceNameByBSSID(BSSID);        }      }      int ptype=deviceJson.getInt("ptype");      String rom_version=deviceJson.getString("rom_version");      String latest_rom_version=deviceJson.getString("latest_rom_version");      EspDeviceState state=new EspDeviceState();      state.addStateInternet();      IEspDevice device=BEspDevice.getInstance().alloc(deviceName,id,token,is_owner_key,BSSID,state.getStateValue(),ptype,rom_version,latest_rom_version,userId);      boolean isParentMdevMacValid=!deviceJson.isNull(Parent_Mdev_Mac);      String parentBssid=null;      if (isParentMdevMacValid) {        String parentDeviceBssid=deviceJson.getString(Parent_Mdev_Mac);        if (!parentDeviceBssid.equals("null")) {          parentBssid=MeshUtil.getRawMacAddress(parentDeviceBssid);        }      }      if (parentBssid != null && BSSIDUtil.isEspDevice(parentBssid)) {        device.setParentDeviceBssid(parentBssid);      } else {        device.setParentDeviceBssid(null);      }      device.setIsMeshDevice(parentBssid != null);      JSONObject devicePayload=deviceJson.optJSONObject("payload");      if (devicePayload != null) {        String deviceInfo=devicePayload.optString("info",null);        int deviceRssi=devicePayload.optInt("rssi",IEspDevice.RSSI_NULL);        device.setInfo(deviceInfo);        device.setRssi(deviceRssi);      }      log.debug(Thread.currentThread().toString() + "##__getCurrentDevice(deviceKey=[" + deviceKey+ "]): "+ device);      return device;    } catch (    JSONException e) {      e.printStackTrace();    }  }  log.debug(Thread.currentThread().toString() + "##__getCurrentDevice(deviceKey=[" + deviceKey+ "]): "+ null);  return null;}  }
class C{  public ECDSASigner(){  this.kCalculator=new RandomDSAKCalculator();}  }
class C{  protected void validateFsUniqueId(java.lang.String[] param){}  }
class C{  public Validator addConstraint(Component cmp,Constraint... c){  if (c.length == 1) {    constraintList.put(cmp,c[0]);  } else {    constraintList.put(cmp,new GroupConstraint(c));  }  bindDataListener(cmp);  boolean isV=isValid();  for (  Component btn : submitButtons) {    btn.setEnabled(isV);  }  return this;}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  public Builder addClause(SpanQuery clause){  if (Objects.equals(clause.getField(),field) == false)   throw new IllegalArgumentException("Cannot add clause " + clause + " to SpanNearQuery for field "+ field);  this.clauses.add(clause);  return this;}  }
class C{  public sun.net.ftp.FtpClient abort() throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("ABOR");  return this;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void assignBuckets(int lowerBound,int upperBound,String fromShardId,String toShardId) throws InterruptedException, AdminException {  Range range=Range.closed(lowerBound,upperBound);  trace("[admin] Executing assign buckets={} from {} to {}",range,fromShardId,toShardId);  for (int i=1; i <= RETRY_COUNT; i++) {    try {      trace("[admin] Initializing slaves on {} ...",toShardId);      shardManagerClient.startObserving(toShardId,fromShardId,TIMEOUT_MS);      trace("[admin] All nodes in {} are in slave mode, " + "waiting for slave logs approaching to leader's log position.",toShardId);      if (!shardManagerClient.waitSlavesApproaching(toShardId,-1)) {        throw new ShardManagerException(SLAVE_NOT_SYNC);      }      trace("[admin] All nodes in {} logs approached to leader's log position, assigning buckets={} ...",toShardId,range);      shardManagerClient.migrateBuckets(range,fromShardId,toShardId,TIMEOUT_MS * 3);      trace("[admin] success!");      trace("[admin] Writing latest config to config storage!");      updateConfig(fromShardId,toShardId,range);      break;    } catch (    ShardManagerException e) {      logger.warn("Error occurred during assign buckets.. retrying {} / {}, errorMsg={}",i,RETRY_COUNT,e.getMessage());      try {        shardManagerClient.stopObserving(toShardId,fromShardId,TIMEOUT_MS);        shardManagerClient.rollbackBuckets(range);      } catch (      ShardManagerException e1) {        logger.info("Rollback, Stop observing failed, ignoring the error. msg={}",e1.getMessage());      }      if (i == RETRY_COUNT) {        logger.error("Assign bucket failed, lastError={}",e.getMessage());        throw new AdminException(e);      }    }  }}  }
class C{  public static Object convertStringToObject(String s,Properties config){  Boolean precedingZeroIsntNumber=getConfigPrecedingZero(config);  Boolean precedingPlusIsntNumber=getConfigPrecedingPlus(config);  if (s == null) {    return null;  } else   if (tryNumber(s,precedingZeroIsntNumber,precedingPlusIsntNumber)) {    try {      return parseNumber(s);    } catch (    InvalidParameterException e) {    }  }  if ("true".equalsIgnoreCase(s) || "false".equalsIgnoreCase(s)) {    return Boolean.parseBoolean(s);  }  return convertToDate(s,config);}  }
class C{  public static <T>T invoke(@Nullable Class<?> cls,@Nullable Object obj,String mtdName,Object... params) throws IgniteCheckedException {  assert cls != null || obj != null;  assert mtdName != null;  try {    for (Class<?> c=cls != null ? cls : obj.getClass(); cls != Object.class; cls=cls.getSuperclass()) {      Method mtd=null;      for (      Method declaredMtd : c.getDeclaredMethods()) {        if (declaredMtd.getName().equals(mtdName)) {          if (mtd == null)           mtd=declaredMtd; else           throw new IgniteCheckedException("Failed to invoke (ambigous method name) [mtdName=" + mtdName + ", cls="+ cls+ ']');        }      }      if (mtd == null)       continue;      boolean accessible=mtd.isAccessible();      T res;      try {        mtd.setAccessible(true);        res=(T)mtd.invoke(obj,params);      }  finally {        if (!accessible)         mtd.setAccessible(false);      }      return res;    }  } catch (  Exception e) {    throw new IgniteCheckedException("Failed to invoke [mtdName=" + mtdName + ", cls="+ cls+ ']',e);  }  throw new IgniteCheckedException("Failed to invoke (method was not found) [mtdName=" + mtdName + ", cls="+ cls+ ']');}  }
class C{  public MBankStatementLoader(Properties ctx,int C_BankStatementLoader_ID,String fileName,String trxName){  super(ctx,C_BankStatementLoader_ID,trxName);  init(fileName);}  }
class C{  CreativeCommonsLicense(String name,String url,String acronym){  super(name,url);  this.acronym=acronym;}  }
class C{  public void dispatch(EventType type,Object data){  dispatch(new AppEvent(type,data));}  }
class C{  public static ApplicationExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ApplicationExceptionBean object=new ApplicationExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"applicationExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ApplicationExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public String inputName(int inp,Object val){  if (inp == 0)   return "x";  return "" + val;}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public static boolean startsWithIgnoreCaseAndWs(String searchIn,String searchFor){  return startsWithIgnoreCaseAndWs(searchIn,searchFor,0);}  }
class C{  public boolean fireMapMousePressed(MouseEvent evt){  if (DEBUG) {    logger.fine("MapMouseSupport.fireMapMousePressed()");  }  boolean consumed=false;  if (DEBUG) {    logger.fine("  -- has proxy (" + (proxy != null) + ") -- shift used ("+ evt.isShiftDown()+ ")");  }  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_PRESSED) > 0) {    evt=new MapMouseEvent(getParentMode(),evt);    if (DEBUG && proxy != null && evt.isShiftDown()) {      logger.fine("MMS.fireMapMousePressed(): proxy enabled, but side stepping to send event to primary listeners");    }    Iterator<MapMouseListener> it=iterator();    while (it.hasNext() && !consumed) {      MapMouseListener target=it.next();      consumed=target.mousePressed(evt) && consumeEvents;      if (consumed) {        priorityListener=target;      }    }  }  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_PRESSED) == 0));  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {    proxy.mousePressed(evt);    consumed=true;  } else {    if (DEBUG && evt.isShiftDown()) {      logger.fine("MMS.fireMapMousePressed(): side-stepped proxy");    }  }  return consumed;}  }
class C{  public Map<String,PsiMethod> sort(){  Map<String,PsiMethod> sortedMethods=new LinkedHashMap<String,PsiMethod>();  for (int i=0; i < mLifecycleOrdering.size(); i++) {    String methodName=mLifecycleOrdering.get(i);    PsiMethod method=mAllMethods.get(methodName);    if (method != null) {      sortedMethods.put(methodName,method);    }  }  return sortedMethods;}  }
class C{  public Matrix4d rotateYXZ(double angleY,double angleX,double angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  public static Function<String,String> cut(final String delimiter,final int field){  Objects.requireNonNull(delimiter,"The delimiter must not be null");  if (field < 1) {    throw new IllegalArgumentException("Field must be >= 1");  }  return null;}  }
class C{  public void mouseClicked(MouseEvent e){  if (!isEnabled() || !m_rw || m_active)   return;  m_active=true;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  CConnectionDialog cd=new CConnectionDialog(m_value);  setValue(cd.getConnection());  if (!cd.isCancel())   fireActionPerformed(); else {    DB.closeTarget();    DB.setDBTarget(m_value);  }  setCursor(Cursor.getDefaultCursor());  m_active=false;}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_DOWN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public HCardParser(Reader reader) throws IOException {  this(reader,null);}  }
class C{  private void onWifiP2pThisDeviceChanged(Context context,Intent intent){  mLocalDevice=(WifiP2pDevice)intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);  log.info("Wifi P2P this device changed action received; local device is now: " + mLocalDevice);  Log.d("peerDebug","Wifi P2P this device changed action received; local device is now: " + mLocalDevice);}  }
class C{  public int readIntBE() throws IOException {  return inputStream.readInt();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void addToPanel(JRadioButton b,int i){  if (i == 0) {    add(b);  }}  }
class C{  private String putObject(String bucketName,String objectName,int length,Object data,String uploadId,String contentType,int partNumber) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  Map<String,String> queryParamMap=null;  if (partNumber > 0 && uploadId != null && !"".equals(uploadId)) {    queryParamMap=new HashMap<>();    queryParamMap.put("partNumber",Integer.toString(partNumber));    queryParamMap.put(UPLOAD_ID,uploadId);  }  Map<String,String> headerMap=new HashMap<>();  if (contentType != null) {    headerMap.put("Content-Type",contentType);  } else {    headerMap.put("Content-Type","application/octet-stream");  }  HttpResponse response=executePut(bucketName,objectName,headerMap,queryParamMap,data,length);  return response.header().etag();}  }
class C{  protected boolean isValid(){  return (fStart > -1 && fEnd > -1 && fText != null) || (oldImages != null && newImages != null) || (oldLineStyles != null && newLineStyles != null)|| (oldTextStyles != null && newTextStyles != null)|| (oldHyperlinks != null && newHyperlinks != null);}  }
class C{  public void imdctCalc(float[] output,int outputOffset,float[] input,int inputOffset){  int n=1 << mdctBits;  int n2=n >> 1;  int n4=n >> 2;  imdctHalf(output,outputOffset + n4,input,inputOffset);  for (int k=0; k < n4; k++) {    output[outputOffset + k]=-output[outputOffset + n2 - k - 1];    output[outputOffset + n - k - 1]=output[outputOffset + n2 + k];  }}  }
class C{  public Vertex applyDEBUG(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  if (network.getBot().isDebugFine()) {    StringWriter writer=new StringWriter();    boolean first=true;    for (    Relationship argument : arguments) {      if (!first) {        writer.write(" : ");      }      first=false;      writer.write(argument.getTarget().applyQuotient(variables,network).printString());    }    network.getBot().log("DEBUG",writer.toString(),Level.FINE);  }  return network.createVertex(Primitive.NULL);}  }
class C{  @LargeTest public void testPropertiesH264HD1280() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1280x720_15fps_512kbps_AACLC_16khz_48kbps_s_1_17.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_16_9;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77600;  final int videoBitrate=606000;  final int audioBitrate=48000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=16000;  final int audioChannel=2;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=1280;  final int height=MediaProperties.HEIGHT_720;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  private void cold(){  if (status == Status.HOT) {    hotSize--;  }  status=Status.COLD;  moveToQueueEnd();}  }
class C{  private Response<Bitmap> doContentParse(){  if (mContentResolver == null) {    return Response.error(new ParseError("Content Resolver instance is null"));  }  final String requestUrl=getUrl();  final Uri imageUri=Uri.parse(requestUrl);  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    addMarker("read-full-size-image-from-resource");  } else {    decodeOptions.inJustDecodeBounds=true;    ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=ImageUtils.decodeStream(mContentResolver,imageUri,decodeOptions);    addMarker(String.format("read-from-resource-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-resource-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    return Response.success(bitmap,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  @Override public void put(String name,short value){  emulatedFields.put(name,value);}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(DTM.COMMENT_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(new String(ch,start,length));  m_previous=addNode(DTM.COMMENT_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  public Point2D transform(Point2D p){  if (p == null)   return null;  return transform.transform(p,null);}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double valueScale=(value - fromLow) / (fromHigh - fromLow);  return toLow + valueScale * (toHigh - toLow);}  }
class C{  public boolean first() throws SQLException {  if (getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.first").toString());  }  boolean ret=this.internalFirst();  notifyCursorMoved();  return ret;}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof RouteTracker))   return false;  RouteTracker that=(RouteTracker)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.connected == that.connected) && (this.secure == that.secure) && (this.tunnelled == that.tunnelled)&& (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  public void addServerToSystem(ObjectName objectName,CacheServerMXBean proxy,FederationComponent newState){  if (mapOfServers != null) {    mapOfServers.put(objectName,proxy);    serverSetSize=mapOfServers.values().size();  }  updateCacheServer(objectName,newState,null);}  }
class C{  public void removeAllPhoneNumbers(){  phoneNumbers.clear();}  }
class C{  private boolean sendMessageToDefaultCallback(final PluginResult message){  if (jsDefaultCallback == null) {    defaultCallbackStoredResults.add(message);    return false;  }  message.setKeepCallback(true);  jsDefaultCallback.sendPluginResult(message);  return true;}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public void testMultWatchSync() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(3);  pqs.setMaxSize(10);  pqs.setSyncEnabled(false);  pqs.configure(context);  pqs.prepare(context);  assertEquals("3 partitions defined",3,pqs.getPartitions());  for (int i=1; i <= 6; i++) {    if (i % 2 == 0)     pqs.insertWatchSyncEvent(new SeqnoWatchPredicate(i));  }  for (int i=1; i <= 6; i++) {    ReplDBMSEvent event=createEvent(i);    pqs.put(i % 3,event);  }  for (int p=0; p < pqs.getPartitions(); p++) {    assertEquals("Each partition has 5 events",5,pqs.size(p));    long lastSeqno=0;    for (int j=0; j < 5; j++) {      ReplEvent next=pqs.get(p);      long curSeqno;      if (next instanceof ReplDBMSEvent)       curSeqno=((ReplDBMSEvent)next).getSeqno(); else       if (next instanceof ReplControlEvent) {        curSeqno=((ReplControlEvent)next).getHeader().getSeqno();        assertTrue("Control events must be on even seqnos only",curSeqno % 2 == 0);      } else       throw new Exception("Unexpected event type: " + next.getClass().toString());      assertTrue("Sequence number greater/equal on partition",curSeqno >= lastSeqno);      lastSeqno=curSeqno;    }    assertEquals("Last seqno on partition " + p + " is 6",6,lastSeqno);  }  pqs.release(context);}  }
class C{  public static void main(String[] args){  TestNestedGenerics tester=new TestNestedGenerics();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public Matrix4d rotation(double angle,double x,double y,double z){  double cos=Math.cos(angle);  double sin=Math.sin(angle);  double C=1.0 - cos;  double xy=x * y, xz=x * z, yz=y * z;  m00=cos + x * x * C;  m10=xy * C - z * sin;  m20=xz * C + y * sin;  m30=0.0;  m01=xy * C + z * sin;  m11=cos + y * y * C;  m21=yz * C - x * sin;  m31=0.0;  m02=xz * C - y * sin;  m12=yz * C + x * sin;  m22=cos + z * z * C;  m32=0.0;  m03=0.0;  m13=0.0;  m23=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public static void acc_realAdd(AccurateValue n1,AccurateValue n2,AccurateValue sum){  sum.digits=new int[n1.digits.length + 1];  sum.sign=0;  acc_align(n1,n2);  int b=n1.digits.length - 1;  int carry=0;  while (b >= 0) {    int s=n1.digits[b] + n2.digits[b] + carry;    sum.digits[b + 1]=s % 10;    if (s > 9) {      carry=1;    } else {      carry=0;    }    b--;  }  sum.digits[0]=carry;  sum.acc_reduceInner();  sum.sign=n1.sign;}  }
class C{  protected void cleanup(ChannelHandlerContext ctx){  ProtocolSession session=(ProtocolSession)ctx.getAttachment();  if (session != null) {    session.resetState();    session=null;  }}  }
class C{  @ObjectiveCName("doVideoCallWithUid:") public Command<Long> doVideoCall(int uid){  return modules.getCallsModule().makeCall(Peer.user(uid),true);}  }
class C{  public synchronized V remove(Object key){  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)tab[index];  for (Entry<K,V> prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      modCount++;      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      V oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  private Map<HiveObjectSpec,Table> createTableLookupMap(List<Table> tables){  Map<HiveObjectSpec,Table> specToTable=new HashMap<>();  for (  Table table : tables) {    HiveObjectSpec spec=new HiveObjectSpec(table);    specToTable.put(spec,table);  }  return specToTable;}  }
class C{  protected Attribute determineClassAttribute(){  Attribute result;  boolean binary;  int i;  ArrayList<String> values;  double[] dbls;  double cls;  binary=true;  for (i=0; i < m_Buffer.size(); i++) {    dbls=(double[])m_Buffer.get(i);    cls=dbls[dbls.length - 1];    if ((cls != -1.0) && (cls != +1.0)) {      binary=false;      break;    }  }  if (binary) {    values=new ArrayList<String>();    values.add("+1");    values.add("-1");    result=new Attribute("class",values);  } else {    result=new Attribute("class");  }  return result;}  }
class C{  protected ShoppingCartItem(){}  }
class C{  public static String fileToString(final File file) throws IOException {  return readerToString(new FileReader(file));}  }
class C{  public OrderPositionSplitKey(OrderPosition<?,?> pos,Integer sNo){  super();  this.orderId=pos.getPositionId().getOrderId();  this.positionNo=pos.getPositionId().getPositionNo();  this.splitNo=sNo;}  }
class C{  public static void serialize(Element element,OutputStream os){  Source source=new DOMSource(element);  serialize(source,os);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String prop=e.getPropertyName();  if (prop.equals(AbstractButton.MNEMONIC_CHANGED_PROPERTY))   updateMnemonicBindingX((AbstractButton)e.getSource()); else   super.propertyChange(e);}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ "]";}  }
class C{  public boolean isCoalescing(){  return false;}  }
class C{  @Override public void deliveryComplete(IMqttDeliveryToken token){}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("IsImportOnlyNoErrors"))     m_IsImportOnlyNoErrors="Y".equals(para.getParameter()); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para.getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public boolean applyWhitelistToNode(UUID exitNode,List<String> unlocalizedNameList){  UUID parentNode=exitNodeMap.get(exitNode);  return graphServer.applyFilter(true,parentNode,exitNode,unlocalizedNameList);}  }
class C{  void writeToByteBuffer(ByteBuffer buffer,boolean mb,boolean me){  boolean sr=mPayload.length < 256;  boolean il=mId.length > 0;  byte flags=(byte)((mb ? FLAG_MB : 0) | (me ? FLAG_ME : 0) | (sr ? FLAG_SR : 0)| (il ? FLAG_IL : 0)| mTnf);  buffer.put(flags);  buffer.put((byte)mType.length);  if (sr) {    buffer.put((byte)mPayload.length);  } else {    buffer.putInt(mPayload.length);  }  if (il) {    buffer.put((byte)mId.length);  }  buffer.put(mType);  buffer.put(mId);  buffer.put(mPayload);}  }
class C{  public boolean isStart(){  return true;}  }
class C{  public ObjectFactory(){}  }
class C{  public ScServer createClusterServer(String ssn,String clusterName,String osId) throws StorageCenterAPIException {  Parameters params=new Parameters();  params.add("Name",clusterName);  params.add("StorageCenter",ssn);  params.add("Notes",NOTES_STRING);  params.add("OperatingSystem",osId);  RestResult rr=restClient.post("StorageCenter/ScServerCluster",params.toJson());  if (!checkResults(rr)) {    String error=String.format("Error creating cluster server '%s': %s",clusterName,rr.getErrorMsg());    throw new StorageCenterAPIException(error);  }  return gson.fromJson(rr.getResult(),ScServer.class);}  }
class C{  private Integer checkVsanFabric(MDSDialog dialog,String fabricId,String fabricWwn) throws NetworkDeviceControllerException {  if (fabricWwn != null && fabricWwn.matches(wwnRegex)) {    Map<Integer,String> vsanWwnMap=null;    try {      Integer vsanId=new Integer(fabricId);      vsanWwnMap=dialog.getVsanWwns(new Integer(fabricId));      if (vsanWwnMap.get(vsanId).equals(fabricWwn)) {        return vsanId;      }    } catch (    Exception ex) {      _log.warn("Exception while getting vsan wwns for {}",fabricId,ex);    }    vsanWwnMap=dialog.getVsanWwns(null);    for (    Integer v : vsanWwnMap.keySet()) {      if (fabricWwn.equalsIgnoreCase(vsanWwnMap.get(v))) {        return v;      }    }    throw NetworkDeviceControllerException.exceptions.checkVsanFabricFailedNotFound(fabricId,fabricWwn);  }  try {    return new Integer(fabricId);  } catch (  NumberFormatException ex) {    throw NetworkDeviceControllerException.exceptions.checkVsanFabricFailed(fabricId,ex);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderPan=null;  String outputHeader=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  int nColsPan, nRowsPan;  double redNoData=-32768;  double greenNoData=-32768;  double blueNoData=-32768;  double panNoData=-32768;  double x, y, z;  int progress=0;  int col, row;  int a, i;  double north, south, east, west;  double gridResX, gridResY;  String fusionMethod="brovey";  double r, g, b;  int rOut, gOut, bOut;  double adj;  double p;  double[] dataR, dataG, dataB, dataI, dataP;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderPan=args[3];  outputHeader=args[4];  if (args[5].toLowerCase().contains("ihs")) {    fusionMethod="ihs";  } else   if (args[5].toLowerCase().contains("brov")) {    fusionMethod="brovey";  }  try {    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    WhiteboxRasterInfo pan=new WhiteboxRasterInfo(inputHeaderPan);    nCols=red.getNumberColumns();    nRows=red.getNumberRows();    if (green.getNumberColumns() != nCols || green.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    if (blue.getNumberColumns() != nCols || blue.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    north=red.getNorth();    south=red.getSouth();    east=red.getEast();    west=red.getWest();    redNoData=red.getNoDataValue();    greenNoData=green.getNoDataValue();    blueNoData=blue.getNoDataValue();    panNoData=pan.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeaderPan,WhiteboxRaster.DataType.FLOAT,panNoData);    output.setDataScale(DataScale.RGB);    nColsPan=pan.getNumberColumns();    nRowsPan=pan.getNumberRows();    int nColsLessOne=nColsPan - 1;    int nRowsLessOne=nRowsPan - 1;    gridResX=pan.getCellSizeX();    gridResY=pan.getCellSizeY();    double yRange=pan.getNorth() - pan.getSouth() - gridResY;    double xRange=pan.getEast() - pan.getWest() - gridResX;    int sourceCol, sourceRow;    double northernEdge=pan.getNorth() - gridResY;    double westernEdge=pan.getWest() + gridResX;    if (north < south) {      northernEdge=pan.getNorth() + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double pMin=pan.getMinimumValue();    double pRange=pan.getMaximumValue() - pMin;    double maxMSVal=red.getMaximumValue();    if (green.getMaximumValue() > maxMSVal) {      maxMSVal=green.getMaximumValue();    }    if (blue.getMaximumValue() > maxMSVal) {      maxMSVal=blue.getMaximumValue();    }    if (fusionMethod.contains("brov")) {      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol];            g=dataG[sourceCol];            b=dataB[sourceCol];            adj=(r + g + b) / 3;            rOut=(int)(r * p / adj * 255);            gOut=(int)(g * p / adj * 255);            bOut=(int)(b * p / adj * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    } else     if (fusionMethod.contains("ihs")) {      double[] ihs=new double[3];      double[] rgb=new double[3];      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol] / maxMSVal;            g=dataG[sourceCol] / maxMSVal;            b=dataB[sourceCol] / maxMSVal;            ihs=RGBtoIHS(r,g,b);            ihs[0]=p * 3;            rgb=IHStoRGB(ihs);            rOut=(int)(rgb[0] * 255);            gOut=(int)(rgb[1] * 255);            bOut=(int)(rgb[2] * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    }    pan.close();    red.close();    green.close();    blue.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void putAt(StringBuilder self,EmptyRange range,Object value){  RangeInfo info=subListBorders(self.length(),range);  self.replace(info.from,info.to,value.toString());}  }
class C{  public static boolean isSignedIn(Context context){  final SharedPreferences preferences=getSharedPreferences(context);  return preferences.contains(PREFERENCE_FIRST_NAME) && preferences.contains(PREFERENCE_LAST_INITIAL) && preferences.contains(PREFERENCE_AVATAR);}  }
class C{  public void name(String name){  this.name=name;}  }
class C{  public static String toDecimal(String value) throws PageException {  return toDecimal(Caster.toDoubleValue(value));}  }
class C{  private synchronized void init() throws IOException {  if (mStatFs == null) {    if (!mDropBoxDir.isDirectory() && !mDropBoxDir.mkdirs()) {      throw new IOException("Can't mkdir: " + mDropBoxDir);    }    try {      mStatFs=new StatFs(mDropBoxDir.getPath());      mBlockSize=mStatFs.getBlockSize();    } catch (    IllegalArgumentException e) {      throw new IOException("Can't statfs: " + mDropBoxDir);    }  }  if (mAllFiles == null) {    File[] files=mDropBoxDir.listFiles();    if (files == null)     throw new IOException("Can't list files: " + mDropBoxDir);    mAllFiles=new FileList();    mFilesByTag=new HashMap<String,FileList>();    for (    File file : files) {      if (file.getName().endsWith(".tmp")) {        Slog.i(TAG,"Cleaning temp file: " + file);        file.delete();        continue;      }      EntryFile entry=new EntryFile(file,mBlockSize);      if (entry.tag == null) {        Slog.w(TAG,"Unrecognized file: " + file);        continue;      } else       if (entry.timestampMillis == 0) {        Slog.w(TAG,"Invalid filename: " + file);        file.delete();        continue;      }      enrollEntry(entry);    }  }}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  public static Object evalExpression(JavaCompiler compiler,DiagnosticListener<JavaFileObject> listener,List<String> flags,String expression) throws Exception {  MemoryFileManager mfm=new MemoryFileManager(compiler.getStandardFileManager(listener,null,null));  JavaFileObject fileObject=mfm.makeSource(CLASS_NAME,"public class " + CLASS_NAME + " {\n"+ "    public static Object eval() throws Throwable {\n"+ "        return "+ expression+ ";\n"+ "    }\n}\n");  JavaCompiler.CompilationTask task=compiler.getTask(null,mfm,listener,flags,null,Arrays.asList(fileObject));  if (task.call()) {    ClassLoader cl=mfm.getClassLoader(CLASS_OUTPUT);    Class compiledClass=cl.loadClass(CLASS_NAME);    Method eval=compiledClass.getMethod("eval");    return eval.invoke(null);  } else {    return ERROR;  }}  }
class C{  protected UnknownType.ErrorReporter makeModelErrorReporter(Module module,String message){  return new ModuleErrorAttacherRunnable(moduleSourceMapper,module,message);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.817 -0500",hash_original_method="5E01CBD1D1D4C5DC328EF4CF7109CA33",hash_generated_method="F94E8CCB859AE7B3EAA845C3FC6659EA") public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    insert(e);  }  finally {    lock.unlock();  }}  }
class C{  public static void generateSignFlagCode(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize valueSize,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(value,"Error: Argument value can't be null");  Preconditions.checkNotNull(valueSize,"Error: Argument valueSize can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final String maskValue=environment.getNextVariableString();  final String mask=String.valueOf(TranslationHelpers.getMsbMask(valueSize));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(valueSize));  instructions.add(ReilHelpers.createAnd(offset,valueSize,value,valueSize,mask,valueSize,maskValue));  instructions.add(ReilHelpers.createBsh(offset + 1,valueSize,maskValue,valueSize,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));}  }
class C{  public Node<T> search(T item){  if (data.equals(item)) {    return this;  } else {    for (    Node<T> n : children) {      Node<T> res=n.search(item);      if (res != null)       return res;    }    return null;  }}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  public static void share(Context ctx,String sharingMsg,String emailSubject,String title){  Intent sharingIntent=new Intent(Intent.ACTION_SEND);  sharingIntent.setType("text/plain");  sharingIntent.putExtra(Intent.EXTRA_TEXT,sharingMsg);  sharingIntent.putExtra(Intent.EXTRA_SUBJECT,emailSubject);  ctx.startActivity(Intent.createChooser(sharingIntent,title));}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  if (this.appView != null)   this.appView.onNewIntent(intent);}  }
class C{  public static void removeFromParent(Element elem){  if (elem != null && elem.getParentNode() != null) {    elem.getParentNode().removeChild(elem);  }}  }
class C{  public IntPair span(){  return (IntPair)map.get(SPAN_KEY);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public void stop() throws TomcatException {  cat.stop();  cat=null;}  }
class C{  public boolean isDone(){  return finished;}  }
class C{  public void openServer(String server,int port) throws IOException, UnknownHostException {  if (serverSocket != null)   closeServer();  serverSocket=doConnect(server,port);  try {    serverOutput=new PrintStream(new BufferedOutputStream(serverSocket.getOutputStream()),true,encoding);  } catch (  UnsupportedEncodingException e) {    throw new InternalError(encoding + "encoding not found",e);  }  serverInput=new BufferedInputStream(serverSocket.getInputStream());}  }
class C{  @Override public int hashCode(){  return string.hashCode();}  }
class C{  public boolean logout() throws LoginException {  if (subject.isReadOnly()) {    cleanState();    throw new LoginException("Subject is read-only");  }  subject.getPrincipals().remove(user);  cleanState();  succeeded=false;  commitSucceeded=false;  user=null;  if (logger.debugOn()) {    logger.debug("logout","Subject is being logged out");  }  return true;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public final Matrix4f transpose(){  float temp;  temp=this.m10;  this.m10=this.m01;  this.m01=temp;  temp=this.m20;  this.m20=this.m02;  this.m02=temp;  temp=this.m30;  this.m30=this.m03;  this.m03=temp;  temp=this.m21;  this.m21=this.m12;  this.m12=temp;  temp=this.m31;  this.m31=this.m13;  this.m13=temp;  temp=this.m32;  this.m32=this.m23;  this.m23=temp;  return this;}  }
class C{  public void remove(int position){  delItem(position);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.df();}  }
class C{  public void hyperlinkUpdate(HyperlinkEvent e){  if (e.getEventType() != HyperlinkEvent.EventType.ACTIVATED)   return;  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e instanceof HTMLFrameHyperlinkEvent) {    HTMLFrameHyperlinkEvent evt=(HTMLFrameHyperlinkEvent)e;    HTMLDocument doc=(HTMLDocument)getDocument();    doc.processHTMLFrameHyperlinkEvent(evt);  } else   if (e.getURL() == null)   scrollToReference(e.getDescription().substring(1)); else {    try {      setPage(e.getURL());    } catch (    Throwable t) {      System.err.println("Help.hyperlinkUpdate - " + t.toString());      displayError("Error",e.getURL(),t);    }  }  this.setCursor(Cursor.getDefaultCursor());}  }
class C{  public long term(){  return term;}  }
class C{  public CursorResponseMessage(CursorResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.cursorId=other.cursorId;  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }}  }
class C{  public static void writePointsToInfoToFile(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + POINTS_TO_INFO_FILE_NAME);    Set<MethodModel> entryPoints=securitySpecModel.getEntryPoints();    SortedSet<MethodModel> allMethods=new TreeSet<MethodModel>(new MethodP2Comparator());    allMethods.addAll(entryPoints);    for (    MethodModel entryPoint : entryPoints) {      allMethods.addAll(securitySpecModel.getOutputEvents(entryPoint));    }    for (    MethodModel method : allMethods) {      StringBuffer buf=new StringBuffer();      List<AllocLocationModel> receiverSources=method.getArgumentAllocSources(-1);      if (receiverSources != null && !receiverSources.isEmpty()) {        buf.append("  <receiver> " + method.getReceiverType() + "\n");        printAllocations(receiverSources,buf);      }      List<String> args=method.getMethodArguments();      for (int i=0; i < args.size(); i++) {        List<AllocLocationModel> argSources=method.getArgumentAllocSources(i);        if (argSources != null && !argSources.isEmpty()) {          buf.append("  <argument " + (i + 1) + "> : "+ args.get(i)+ "\n");          printAllocations(argSources,buf);        }      }      if (buf.length() > 0) {        fw.write(method.getSignature() + "\n");        fw.write(buf.toString());      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing points-to info file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  public static void unzip(InputStream in,Path destDir) throws IOException {  in=new BufferedInputStream(in);  try (ZipInputStream zipInput=new ZipInputStream(in)){    ZipEntry entry;    byte[] buffer=new byte[8192];    while ((entry=zipInput.getNextEntry()) != null) {      Path targetFile=destDir.resolve(entry.getName());      Files.createDirectories(targetFile.getParent());      if (!entry.isDirectory()) {        OutputStream out=Files.newOutputStream(targetFile);        int len;        while ((len=zipInput.read(buffer)) >= 0) {          out.write(buffer,0,len);        }        out.close();      }      zipInput.closeEntry();    }  } }  }
class C{  public TileEntityBasicMachine(String soundPath,String name,ResourceLocation location,double perTick,int baseTicksRequired,double maxEnergy){  super("machine." + soundPath,name,maxEnergy);  BASE_ENERGY_PER_TICK=perTick;  energyPerTick=perTick;  BASE_TICKS_REQUIRED=baseTicksRequired;  ticksRequired=baseTicksRequired;  guiLocation=location;  isActive=false;}  }
class C{  public static DefaultAudioManager instance(){  if (_instance == null) {    _instance=new DefaultAudioManager();  }  return _instance;}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public AuthnProviderList listProviders(){  StorageOSUser user=getUserFromContext();  if (!_permissionsHelper.userHasGivenRoleInAnyTenant(user,Role.SECURITY_ADMIN,Role.TENANT_ADMIN)) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  NamedElementQueryResultList providers=new NamedElementQueryResultList();  List<URI> uris=_dbClient.queryByType(AuthnProvider.class,true);  List<AuthnProvider> configs=_dbClient.queryObject(AuthnProvider.class,uris);  List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(configs.size());  for (  AuthnProvider p : configs) {    elements.add(NamedElementQueryResultList.NamedElement.createElement(p.getId(),p.getLabel()));  }  providers.setResult(elements.iterator());  AuthnProviderList list=new AuthnProviderList();  list.getProviders().addAll(map(ResourceTypeEnum.AUTHN_PROVIDER,providers));  return list;}  }
class C{  protected void uninstallComponents(){  uninstallTabContainer();  if (scrollableTabLayoutEnabled()) {    tabPane.remove(tabScroller.viewport);    tabPane.remove(tabScroller.scrollForwardButton);    tabPane.remove(tabScroller.scrollBackwardButton);    tabScroller=null;  }}  }
class C{  private void paintDropLines(SeaGlassContext context,Graphics g){  JTable.DropLocation loc=table.getDropLocation();  if (loc == null) {    return;  }  Color color=(Color)style.get(context,"Table.dropLineColor");  Color shortColor=(Color)style.get(context,"Table.dropLineShortColor");  if (color == null && shortColor == null) {    return;  }  Rectangle rect;  rect=getHDropLineRect(loc);  if (rect != null) {    int x=rect.x;    int w=rect.width;    if (color != null) {      extendRect(rect,true);      g.setColor(color);      g.fillRect(rect.x,rect.y,rect.width,rect.height);    }    if (!loc.isInsertColumn() && shortColor != null) {      g.setColor(shortColor);      g.fillRect(x,rect.y,w,rect.height);    }  }  rect=getVDropLineRect(loc);  if (rect != null) {    int y=rect.y;    int h=rect.height;    if (color != null) {      extendRect(rect,false);      g.setColor(color);      g.fillRect(rect.x,rect.y,rect.width,rect.height);    }    if (!loc.isInsertRow() && shortColor != null) {      g.setColor(shortColor);      g.fillRect(rect.x,y,rect.width,h);    }  }}  }
class C{  public static void writeHubGraphic(String fileName,double[][] matrix,String title,String xLabel,String yLabel){  int numberOfXValues=matrix.length;  int numberOfFunctions=matrix[0].length;  String[] seriesLabels=new String[numberOfFunctions];  double[] time=new double[numberOfXValues];  for (int i=0; i < numberOfXValues; i++) {    time[i]=i * 900;  }  for (int i=0; i < numberOfFunctions; i++) {    seriesLabels[i]="hub-" + i;  }  writeGraphic(fileName,matrix,title,xLabel,yLabel,seriesLabels,time);}  }
class C{  public static void init(ActorSystem actorSystem,JobManager jobManager) throws Exception {  Class<? extends AbstractLogManager> clazz=getLogManagerImpl();  log.trace("Using implementation class: {}",clazz);  logManager=actorSystem.actorOf(Props.create(clazz,jobManager).withDispatcher(CONTROL_AWARE_DISPATCHER),LOG_MANAGER);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private static String reportListContents(Collection<ProcessErrorStateInfo> errList){  if (errList == null)   return null;  StringBuilder builder=new StringBuilder();  Iterator<ProcessErrorStateInfo> iter=errList.iterator();  while (iter.hasNext()) {    ProcessErrorStateInfo entry=iter.next();    String condition;switch (entry.condition) {case ActivityManager.ProcessErrorStateInfo.CRASHED:      condition="a CRASH";    break;case ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING:  condition="an ANR";break;default :condition="an unknown error";break;}builder.append(String.format("Process %s encountered %s (%s)",entry.processName,condition,entry.shortMsg));if (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) {builder.append(String.format(" with stack trace:\n%s\n",entry.stackTrace));}builder.append("\n");}return builder.toString();}  }
class C{  public static String quote(String s){  return RE2.quoteMeta(s);}  }
class C{  public boolean isMessageImprintDataIntact(){  return messageImprintDataIntact;}  }
class C{  @Inline public void addEvent(EventType et,int ival1){  if (!enabled)   return;  addEventInternal(et,ival1);}  }
class C{  @Override public void awaitOperational() throws InterruptedException {  awaitOperational(false);}  }
class C{  public boolean connectedToAtLeastOneNetwork(Collection<URI> networkUris){  if (networkUris != null) {    if (networkUris.contains(_id)) {      return true;    }    if (_routedNetworks != null) {      List<URI> routedNetowrks=StringSetUtil.stringSetToUriList(getRoutedNetworks());      return !Collections.disjoint(networkUris,routedNetowrks);    }  }  return false;}  }
class C{  public void onCancelRemote(NotificationRemote remote,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onCancelRemote - " + entry.ID);}  }
class C{  @Override public void loadingError(String errorMsg){  dismissDialog(PROGRESS_DIALOG);  if (errorMsg != null) {    createErrorDialog(errorMsg,EXIT);  } else {    createErrorDialog(getString(R.string.parse_error),EXIT);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static long gcd(long n,long d){  long n1=Math.abs(n);  long n2=Math.abs(d);  int gcd=1;  for (int k=1; k <= n1 && k <= n2; k++) {    if (n1 % k == 0 && n2 % k == 0)     gcd=k;  }  return gcd;}  }
class C{  public boolean attempt(ObjectReference old,ObjectReference value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public boolean rpExportOrchestrationRollbackSteps(String stepId){  _log.info("Executing rpExportOrchestrationRollbackSteps");  WorkflowStepCompleter.stepExecuting(stepId);  try {    rpExportGroupRollback();    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("Completed rpExportOrchestrationRollbackSteps");  } catch (  Exception e) {    stepFailed(stepId,"rpExportOrchestrationRollbackSteps");    _log.info("Failed rpExportOrchestrationRollbackSteps");  }  return true;}  }
class C{  public void addColumn(TableColumn column){  allTableColumns.addElement(column);  super.addColumn(column);}  }
class C{  public Sector union(double minLatitude,double minLongitude,double deltaLatitude,double deltaLongitude){  double maxLatitude=Location.clampLatitude(minLatitude + (deltaLatitude > 0 ? deltaLatitude : Double.NaN));  double maxLongitude=Location.clampLongitude(minLongitude + (deltaLongitude > 0 ? deltaLongitude : Double.NaN));  if ((minLatitude < maxLatitude) && (minLongitude < maxLongitude)) {    if ((this.minLatitude < this.maxLatitude) && (this.minLongitude < this.maxLongitude)) {      if (this.minLatitude > minLatitude)       this.minLatitude=minLatitude;      if (this.maxLatitude < maxLatitude)       this.maxLatitude=maxLatitude;      if (this.minLongitude > minLongitude)       this.minLongitude=minLongitude;      if (this.maxLongitude < maxLongitude)       this.maxLongitude=maxLongitude;    } else {      this.minLatitude=minLatitude;      this.maxLatitude=maxLatitude;      this.minLongitude=minLongitude;      this.maxLongitude=maxLongitude;    }  }  return this;}  }
class C{  public static double[] normalize(double[] u){  if (isZero(u)) {    throw new IllegalArgumentException("can not normalize zero vector");  }  return multiply(1.0 / magnitude(u),u);}  }
class C{  public static void main(String[] args){  if ((args.length == 1) && SystemUtils.IS_OS_WINDOWS) {switch (args[0]) {case "start":      start(args);    break;case "stop":  stop(args);break;default :startCMR();}} else {startCMR();}}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  private String buildEventData() throws JAXBException {  if (_eventParameters != null) {    try {      JAXBContext jaxbContext=JAXBContext.newInstance(EventParameters.class);      Marshaller marshaller=jaxbContext.createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);      Writer outWriter=new StringWriter();      StreamResult result=new StreamResult(outWriter);      marshaller.marshal(_eventParameters,result);      return outWriter.toString();    } catch (    JAXBException e) {      _log.error("Failed to generate user message file. " + e.getMessage());      throw e;    }  } else {    return null;  }}  }
class C{  private PostgreSQLProjectFlowgraphsLoader(){}  }
class C{  boolean compressed(){  return false;}  }
class C{  private static String removeLeadingSlashPoints(String path){  while (path.startsWith("/..")) {    path=path.substring(3);  }  return path;}  }
class C{  public static final double clampAngleRadians(double angle){  if (angle >= Math.PI) {    angle%=PI2;    if (angle > Math.PI)     angle-=PI2;  } else {    if (angle < 0.0) {      angle%=PI2;      if (angle < MINUS_PI)       angle+=PI2;    }  }  return angle;}  }
class C{  private void appendLineStringText(LineString lineString,int level,boolean doIndent,Writer writer) throws IOException {  if (lineString.isEmpty()) {    writer.write("EMPTY");  } else {    if (doIndent)     indent(level,writer);    writer.write("(");    for (int i=0; i < lineString.getNumPoints(); i++) {      if (i > 0) {        writer.write(", ");        if (coordsPerLine > 0 && i % coordsPerLine == 0) {          indent(level + 1,writer);        }      }      appendCoordinate(lineString.getCoordinateN(i),writer);    }    writer.write(")");  }}  }
class C{  private int index(final long position){  return (int)(position / allocator.getBlockSize());}  }
class C{  public static CommandEnvironment defaultEnvironment(){  return new CommandEnvironment(BaseEnvironment.DEFAULT,new HashMap<String,String>());}  }
class C{  public static HomeFragment newInstance(String param1,String param2){  HomeFragment fragment=new HomeFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public String post() throws HttpClientException {  return sendHttpRequest("post");}  }
class C{  public void testUnivariateCallFailsIfWrongInitialisation(ConditionalTransferEntropyCalculator teCalc) throws Exception {  teCalc.initialise(1,1,1);  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(10,0,1);  double[] destData=rg.generateNormalData(10,0,1);  double[] condData=rg.generateNormalData(10,0,1);  boolean gotException=false;  try {    teCalc.setObservations(sourceData,destData,condData);  } catch (  Exception e) {    gotException=true;  }  assert (gotException);}  }
class C{  public int countConjunction(Predicate... selectors){  checkNotNull(selectors);  ConjunctionPredicate predicate=new ConjunctionPredicate(selectors);  return CollectionUtils.countMatches(items,predicate);}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications/{notificationId}/triggers") @Description("Disassociates all triggers from the notification having the given notification ID.  The triggers are not deleted from the alert.") public Response deleteTriggersByNotificationId(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("notificationId") BigInteger notificationId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationId == null || notificationId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Notification Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  Notification notification=null;  if (alert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  for (  Notification n : alert.getNotifications()) {    if (n.getId().equals(notificationId)) {      notification=n;      break;    }  }  if (notification == null) {    throw new WebApplicationException("The notification does not exist for this alert",Status.BAD_REQUEST);  }  notification.setTriggers(new ArrayList<Trigger>(0));  alertService.updateAlert(alert);  return Response.status(Status.OK).build();}  }
class C{  private Flag checkFlag(byte expFlag){  byte flag=in.readByte();  if (flag == expFlag)   return Flag.NORMAL; else   if (flag == NULL)   return Flag.NULL; else   if (flag == HANDLE)   return Flag.HANDLE;  int pos=BinaryUtils.positionForHandle(in);  throw new BinaryObjectException("Unexpected flag value [pos=" + pos + ", expected="+ expFlag+ ", actual="+ flag+ ']');}  }
class C{  protected static String removeHttpParams(Object url){  if (url == null)   return null;  String urlStr=url.toString();  int paramIndex=urlStr.indexOf(";");  if (paramIndex == -1)   return urlStr; else   return urlStr.substring(0,paramIndex);}  }
class C{  public void dispose(){  mListeners.clear();}  }
class C{  protected List<Item> toItems(List<Model> models){  if (models == null) {    return Collections.emptyList();  }  int size=models.size();  List<Item> items=new ArrayList<>(size);  for (int i=0; i < size; i++) {    items.add(toItem(models.get(i)));  }  return items;}  }
class C{  @Override public String toString(){  return "Graph Window";}  }
class C{  public static String objectString(Object obj){  StringBuilder sb=new StringBuilder();  objectString(obj,sb);  return sb.toString();}  }
class C{  private synchronized void connected(BluetoothSocket bluetoothSocket,BluetoothDevice bluetoothDevice){  cancelThreads();  connectedThread=new ConnectedThread(bluetoothSocket);  connectedThread.start();  Message message=handler.obtainMessage(MESSAGE_DEVICE_NAME);  Bundle bundle=new Bundle();  bundle.putString(KEY_DEVICE_NAME,bluetoothDevice.getName());  message.setData(bundle);  handler.sendMessage(message);  setState(Sensor.SensorState.CONNECTED);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @WorkerThread public void signUpAndLogInWithCustomer(String email,String password,String orgSlug) throws ParticleCloudException {  if (!all(email,password,orgSlug)) {    throw new IllegalArgumentException("Email, password, and organization must all be specified");  }  try {    Responses.LogInResponse response=identityApi.signUpAndLogInWithCustomer("client_credentials",email,password,orgSlug);    onLogIn(response,email,password);  } catch (  RetrofitError error) {    throw new ParticleCloudException(error);  }}  }
class C{  private static final String toXml(SandboxBody body){  StringBuilder sb=new StringBuilder();  sb.append("<Body Id=\"").append(body.getId()).append("\" Name=\"").append(body.getUserData()).append("\">");  sb.append(XmlGenerator.toXml(body.getOutlineColor(),"OutlineColor"));  sb.append(XmlGenerator.toXml(body.getFillColor(),"FillColor"));  sb.append("<Fixtures>");  int fSize=body.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=body.getFixture(i);    sb.append(XmlGenerator.toXml(bf));  }  sb.append("</Fixtures>");  sb.append(XmlGenerator.toXml(body.getTransform()));  sb.append(XmlGenerator.toXml(body.getMass(),body.isMassExplicit()));  sb.append(XmlGenerator.toXml(body.getLinearVelocity(),"Velocity"));  sb.append("<AngularVelocity>").append(Math.toDegrees(body.getAngularVelocity())).append("</AngularVelocity>");  sb.append(XmlGenerator.toXml(body.getAccumulatedForce(),"AccumulatedForce"));  sb.append("<AccumulatedTorque>").append(body.getAccumulatedTorque()).append("</AccumulatedTorque>");  sb.append("<AutoSleep>").append(body.isAutoSleepingEnabled()).append("</AutoSleep>");  sb.append("<Asleep>").append(body.isAsleep()).append("</Asleep>");  sb.append("<Active>").append(body.isActive()).append("</Active>");  sb.append("<Bullet>").append(body.isBullet()).append("</Bullet>");  sb.append("<LinearDamping>").append(body.getLinearDamping()).append("</LinearDamping>");  sb.append("<AngularDamping>").append(body.getAngularDamping()).append("</AngularDamping>");  sb.append("<GravityScale>").append(body.getGravityScale()).append("</GravityScale>");  sb.append("</Body>");  return sb.toString();}  }
class C{  public static synchronized void reset(){  messages=new String[InitialMaxLength];  length=0;  nextMessage="";}  }
class C{  private void analyze(File file,int burnin,boolean verbose,boolean[] drawHeader,boolean hpds,boolean ess,boolean stdErr,String marginalLikelihood) throws TraceException {  if (file.isFile()) {    try {      String name=file.getCanonicalPath();      if (verbose) {        TraceAnalysis.report(name,burnin,marginalLikelihood);      } else {        TraceAnalysis.shortReport(name,burnin,drawHeader[0],hpds,ess,stdErr,marginalLikelihood);        drawHeader[0]=false;      }    } catch (    IOException e) {    }  } else {    File[] files=file.listFiles();    for (    File f : files) {      if (f.isDirectory()) {        analyze(f,burnin,verbose,drawHeader,hpds,ess,stdErr,marginalLikelihood);      } else       if (f.getName().endsWith(".log") || f.getName().endsWith(".p")) {        analyze(f,burnin,verbose,drawHeader,hpds,ess,stdErr,marginalLikelihood);      } else {        if (verbose)         System.out.println("Ignoring file: " + f);      }    }  }}  }
class C{  @Override public void copyInto(Object[] anArray){  if (anArray.length < getSize()) {    throw new IndexOutOfBoundsException("Array not big enough!");  }  for (int i=0; i < getSize(); i++) {    anArray[i]=((CheckBoxListItem)getElementAt(i)).getContent();  }}  }
class C{  public ResultSetHelper(ResultSet rs,int max){  super();  m_ResultSet=rs;  m_MaxRows=max;}  }
class C{  public GeneralizedSemPmWrapper(GraphSource graphWrapper){  this(new EdgeListGraph(graphWrapper.getGraph()));}  }
class C{  private void run(){  long startTime=System.nanoTime();  ShapeFile output=null;  ShapeFile output2=null;  int progress, oldProgress;  boolean conductFineSearch=false;  int j;  int refNeighbourhoodStart=40;  int refNeighbourhoodStep=20;  maxNeighbourhoodSize=500;  epsilon=1.2;  int polyOrder=2;  StringBuilder str;  KdTree<Double> controlPointTree=new KdTree.SqrEuclid<>(2,new Integer(2000));  try {    String ppFile1="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/test point3.shp";    String referenceFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_254_Blue_clipped.dep";    String transformedFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_253_Blue_clipped.dep";    String referenceTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 254 tie points.shp";    String transformedTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 253 tie points.shp";    String outputFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/tmp6.shp";    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output=new ShapeFile(outputFile,ShapeType.POINT,fields);    fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output2=new ShapeFile(outputFile.replace(".shp","_2.shp"),ShapeType.POINT,fields);    referenceImage=new WhiteboxRaster(referenceFile,"r");    referenceImage.setForceAllDataInMemory(true);    int rows1=referenceImage.getNumberRows();    int cols1=referenceImage.getNumberColumns();    referenceNoData=referenceImage.getNoDataValue();    transformedImage=new WhiteboxRaster(transformedFile,"r");    transformedImage.setForceAllDataInMemory(true);    transformedNoData=transformedImage.getNoDataValue();    ShapeFile pp1=new ShapeFile(ppFile1);    if (pp1.getShapeType().getBaseType() != ShapeType.POINT && pp1.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      return;    }    ShapeFileRecord record=pp1.getRecord(0);    double[][] point;    ShapeFile refTiePoints=new ShapeFile(referenceTiePoints);    if (refTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    ShapeFile transTiePoints=new ShapeFile(transformedTiePoints);    if (transTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    int numTiePoints=refTiePoints.getNumberOfRecords();    if (transTiePoints.getNumberOfRecords() != numTiePoints) {      return;    }    calculateOffsets();    conductFineSearch=true;    ArrayList<XYPoint> tiePointsRef=new ArrayList<>();    ArrayList<XYPoint> tiePointsTransform=new ArrayList<>();    for (int r=0; r < refTiePoints.getNumberOfRecords(); r++) {      double[][] refPoint=refTiePoints.getRecord(r).getGeometry().getPoints();      int refCol=referenceImage.getColumnFromXCoordinate(refPoint[0][0]);      int refRow=referenceImage.getRowFromYCoordinate(refPoint[0][1]);      point=transTiePoints.getRecord(r).getGeometry().getPoints();      int transCol=transformedImage.getColumnFromXCoordinate(point[0][0]);      int transRow=transformedImage.getRowFromYCoordinate(point[0][1]);      RowPriorityGridCell gc=findPixelMatch(refCol,refRow,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,30,1.0);      System.out.println("Control Point " + (r + 1) + ": "+ gc.z);      int matchedCol=gc.col;      int matchedRow=gc.row;      double matchedCorrelation=gc.z;      if (matchedCorrelation >= 0.95) {        double x2=transformedImage.getXCoordinateFromColumn(matchedCol);        double y2=transformedImage.getYCoordinateFromRow(matchedRow);        whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);        Object[] rowData=new Object[1];        rowData[0]=new Double(matchedCorrelation);        output.addRecord(PP,rowData);        PP=new whitebox.geospatialfiles.shapefile.Point(refPoint[0][0],refPoint[0][1]);        rowData=new Object[2];        rowData[0]=new Double(matchedCorrelation);        rowData[1]=new Double(0.0);        output2.addRecord(PP,rowData);        tiePointsRef.add(new XYPoint(refPoint[0][0],refPoint[0][1]));        tiePointsTransform.add(new XYPoint(x2,y2));      } else {        System.out.println("No suitable match could be located.");      }    }    conductFineSearch=false;    List<KdTree.Entry<Double>> results;    int newPolyOrder=polyOrder;    if (newPolyOrder == 4 && tiePointsRef.size() < 15) {      newPolyOrder--;    }    if (newPolyOrder == 3 && tiePointsRef.size() < 10) {      newPolyOrder--;    }    if (newPolyOrder == 2 && tiePointsRef.size() < 6) {      newPolyOrder--;    }    numTiePoints=0;    for (    XYPoint tie : tiePointsRef) {      double[] entry={tie.x,tie.y};      controlPointTree.addPoint(entry,(double)numTiePoints);      numTiePoints++;    }    PolynomialLeastSquares2DFitting pls=new PolynomialLeastSquares2DFitting(tiePointsRef,tiePointsTransform,newPolyOrder);    double rmse=pls.getOverallRMSE();    System.out.println("\nRMSE: " + rmse);    double north=transformedImage.getNorth();    double south=transformedImage.getSouth();    double east=transformedImage.getEast();    double west=transformedImage.getWest();    int totalPointsSearched=0;    int interval=1000;    double intervalSteps=1.5;    int loopNum=1;    do {      System.out.println("Interval: " + interval);      oldProgress=-1;      for (int r=0; r < rows1; r+=interval) {        for (int c=0; c < cols1; c+=interval) {          if (referenceImage.getValue(r,c) != referenceNoData) {            double refXCoord=referenceImage.getXCoordinateFromColumn(c);            double refYCoord=referenceImage.getYCoordinateFromRow(r);            double[] entry={refXCoord,refYCoord};            int numNearestNeighbours=15;            if (numTiePoints < 15) {              numNearestNeighbours=numTiePoints;            }            results=controlPointTree.nearestNeighbor(entry,numNearestNeighbours,true);            j=results.size();            double[] X1=new double[j];            double[] Y1=new double[j];            double[] X2=new double[j];            double[] Y2=new double[j];            for (int k=0; k < j; k++) {              double val=results.get(k).value;              X1[k]=tiePointsRef.get((int)val).x;              Y1[k]=tiePointsRef.get((int)val).y;              X2[k]=tiePointsTransform.get((int)val).x;              Y2[k]=tiePointsTransform.get((int)val).y;            }            int count=0;            double scaleFactor=0;            for (int k=0; k < j; k++) {              double x1Ref=X1[k];              double y1Ref=Y1[k];              double x1Tr=X2[k];              double y1Tr=Y2[k];              for (int m=k + 1; m < j; m++) {                double x2Ref=X1[m];                double y2Ref=Y1[m];                double x2Tr=X2[m];                double y2Tr=Y2[m];                double dist1=sqrt((x2Ref - x1Ref) * (x2Ref - x1Ref) + (y2Ref - y1Ref) * (y2Ref - y1Ref));                double dist2=sqrt((x2Tr - x1Tr) * (x2Tr - x1Tr) + (y2Tr - y1Tr) * (y2Tr - y1Tr));                if (dist1 > 0) {                  scaleFactor+=dist2 / dist1;                  count++;                }              }            }            scaleFactor=scaleFactor / count;            pls=new PolynomialLeastSquares2DFitting(X1,Y1,X2,Y2,1);            rmse=pls.getOverallRMSE();            XYPoint transCoords=pls.getForwardCoordinates(refXCoord,refYCoord);            if (transCoords.x <= east && transCoords.x >= west && transCoords.y >= south && transCoords.y <= north) {              totalPointsSearched++;              int transCol=transformedImage.getColumnFromXCoordinate(transCoords.x);              int transRow=transformedImage.getRowFromYCoordinate(transCoords.y);              int searchWindowRadius=(int)rmse * 2;              if (searchWindowRadius < 80) {                searchWindowRadius=80;              }              RowPriorityGridCell gc=findPixelMatch(c,r,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,searchWindowRadius,scaleFactor);              int matchedCol=gc.col;              int matchedRow=gc.row;              double matchedCorrelation=gc.z;              if (matchedCorrelation >= 0.95) {                double x2=transformedImage.getXCoordinateFromColumn(matchedCol);                double y2=transformedImage.getYCoordinateFromRow(matchedRow);                whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);                Object[] rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output.addRecord(PP,rowData);                PP=new whitebox.geospatialfiles.shapefile.Point(refXCoord,refYCoord);                rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output2.addRecord(PP,rowData);                tiePointsRef.add(new XYPoint(refXCoord,refYCoord));                tiePointsTransform.add(new XYPoint(x2,y2));                entry=new double[]{refXCoord,refYCoord};                controlPointTree.addPoint(entry,(double)numTiePoints);                numTiePoints++;                newPolyOrder=polyOrder;                if (newPolyOrder == 4 && tiePointsRef.size() < 15) {                  newPolyOrder--;                }                if (newPolyOrder == 3 && tiePointsRef.size() < 10) {                  newPolyOrder--;                }                if (newPolyOrder == 2 && tiePointsRef.size() < 6) {                  newPolyOrder--;                }              }            }          }        }        progress=(int)((100.0 * r) / rows1);        if (progress > oldProgress) {          System.out.println("Loop " + loopNum + " "+ progress+ "%"+ ", Num. tie points: "+ tiePointsRef.size()+ " of "+ totalPointsSearched+ " ("+ (100f * tiePointsRef.size() / totalPointsSearched)+ "%)");          oldProgress=progress;        }      }      loopNum++;      interval=(int)(interval / intervalSteps);    } while (interval >= 200);    referenceImage.close();    transformedImage.close();    output.write();    output2.write();    System.out.println("\nOperation complete!");    long endTime=System.nanoTime();    double duration=(endTime - startTime);    int secs=(int)(duration / 1000000000);    int hours=secs / 3600;    secs=secs - 3600 * hours;    int minutes=secs / 60;    secs=secs - minutes * 60;    int seconds=secs;    str=new StringBuilder();    str.append("Duration: ");    if (hours > 0) {      str.append(hours).append(" hours, ");    }    if (minutes > 0) {      str.append(minutes).append(" minutes, ");    }    if (seconds > 0) {      str.append(seconds).append(" seconds, ");    }    System.out.println(str.toString());  } catch (  Exception e) {    if (output != null && output2 != null) {      try {        output.write();        output2.write();      } catch (      Exception e2) {      }    }    e.printStackTrace();  }}  }
class C{  public void tagNameCharacter(byte[] data) throws IOException {  if (tags != null) {    tags.tagNameCharacter(data);  }}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> reverseOrder(){  return new Builder<K,V>(Ordering.natural().reverse());}  }
class C{  public boolean skipExtract(){  return skipExpand;}  }
class C{  public void clear(){  removeAllElements();}  }
class C{  public static DetectorFactoryCollection instance(){synchronized (lock) {    if (theInstance == null) {      theInstance=new DetectorFactoryCollection();    }    return theInstance;  }}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcHeaderFile=whiteboxHeaderFile.replace(".dep",".hdr");      arcDataFile=whiteboxHeaderFile.replace(".dep",".flt");      (new File(arcHeaderFile)).delete();      (new File(arcDataFile)).delete();      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,WhiteboxRaster.DataType.FLOAT,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File arcFile=new File(arcDataFile);      dataFile.renameTo(arcFile);      boolean success=createHeaderFile(wbr,arcHeaderFile);      if (!success) {        showFeedback("ArcGIS header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void clearNewChars(){  freshChars=new StringBuffer(40);}  }
class C{  public void delete(User user){  mDaoSession.delete(user);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public void show(JavaCommandPagePresenter presenter){  this.delegate=presenter;  final List<Node> nodes=new ArrayList<>();  for (  Project project : appContext.getProjects()) {    nodes.add(nodeFactory.newContainerNode(project,settingsProvider.getSettings()));  }  view.setStructure(nodes);  view.show();}  }
class C{  public EaseInOut(){  this(DEFAULT_OVERSHOOT_AMOUNT);}  }
class C{  public static double pow2(int x){  if (x > Double.MAX_EXPONENT)   return Double.POSITIVE_INFINITY;  if (x < Double.MIN_EXPONENT)   return 0;  return longBitsToDouble((x + 1023L) << 52);}  }
class C{  public static String bytesToHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public EmbeddedMetaService() throws IOException, ExecutionException {  this(System.getenv(JOLIE_HOME_ENV));}  }
class C{  public DrawerBuilder withStickyHeaderShadow(boolean stickyHeaderShadow){  this.mStickyHeaderShadow=stickyHeaderShadow;  return this;}  }
class C{  @Override EventRequest resolveEventRequest(ReferenceType refType){  EventRequestManager em=refType.virtualMachine().eventRequestManager();  ExceptionRequest excReq=em.createExceptionRequest(refType,notifyCaught,notifyUncaught);  excReq.enable();  return excReq;}  }
class C{  public static boolean isGlobalsClassName(String qualifiedName){  return qualifiedName != null && (JSweetConfig.GLOBALS_CLASS_NAME.equals(qualifiedName) || qualifiedName.endsWith("." + JSweetConfig.GLOBALS_CLASS_NAME));}  }
class C{  public void onExecuteWrite(String address,int status){  if (DBG)   Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);  if (!address.equals(mDevice.getAddress())) {    return;  }  try {    mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  public PopupMenuItemIncludeInContext(){  super(Constant.messages.getString("context.new.title"),true);  this.context=null;  this.setPrecedeWithSeparator(true);}  }
class C{  public List<Class<?>> findAvailableImplementations(Class<?> interfase) throws IOException {  _resourcesNotLoaded.clear();  List<Class<?>> implementations=new ArrayList<>();  List<String> strings=findAvailableStrings(interfase.getName());  for (  String className : strings) {    try {      Class<?> impl=_classLoader.loadClass(className);      if (interfase.isAssignableFrom(impl)) {        implementations.add(impl);      } else {        _resourcesNotLoaded.add(className);      }    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(className);    }  }  return implementations;}  }
class C{  public GridNioException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public void testAskSubquery03(){  final String anonFilterVar1="--exists-1";  final String[] filterVars1=new String[]{"x1"};  new Helper(){{      given=select(varNode(x),where(filterExistsWithVars(anonFilterVar1,filterVars1),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),stmtPatternWithVar("x1"),filterWithVar("x1"),stmtPatternWithVar("x2"),stmtPatternWithVar("x3")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),filterWithVar("x1"),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),filterExistsWithVars(anonFilterVar1,filterVars1),stmtPatternWithVar("x2"),stmtPatternWithVar("x3")));    }  }.test();}  }
class C{  public Object put(String key,Object value){  Object oldValue=context.getAttribute(key,ENGINE_SCOPE);  context.setAttribute(key,value,ENGINE_SCOPE);  return oldValue;}  }
class C{  protected TreeNode createChildTreeNode(Node xmlNode){  if (xmlNode instanceof Branch) {    return new BranchTreeNode(this,(Branch)xmlNode);  } else {    return new LeafTreeNode(this,xmlNode);  }}  }
class C{  public void addElement(ObjectProperty element){  assertNotNull(element);  if (elements == null) {    elements=new ArrayList<ObjectProperty>();  }  elements.add(element);  element.setParent(this);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  @Override public boolean shouldRetryWithErrorAndTries(int tries,MockApiErrorResponse error,HttpResponse httpResponse){  if (tries < 3) {    return true;  } else {    return false;  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((PLAHeaderViewListAdapter)mAdapter).removeFooter(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void updateNCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {  throw new UnsupportedOperationException("Operation not yet supported");}  }
class C{  public void createTagAnnotation(int aBegin,int aEnd,String aTag){  Tag newTag=new Tag(jCas,aBegin,aEnd);  newTag.setValue(aTag);  jCas.addFsToIndexes(newTag);}  }
class C{  public void deviceAliasAbort() throws NetworkDeviceControllerException {  if (lastPrompt != SSHPrompt.MDS_CONFIG_DEVICE_ALIAS && lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.config.deviceAlias.abort.cmd");  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);}  }
class C{  @Override public void write(ArrayDataOutput str) throws FitsException {  try {    str.writeArray(this.dataArray);    FitsUtil.pad(str,getTrueSize());  } catch (  IOException e) {    throw new FitsException("IO error writing random groups data " + e);  }}  }
class C{  public int increaseProgress(int aProgress){  return 0;}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public Map<String,VPlexVirtualVolumeInfo> findVirtualVolumes(List<VPlexClusterInfo> clusterInfoList,List<VPlexVirtualVolumeInfo> virtualVolumeInfos){  return _discoveryMgr.findVirtualVolumes(clusterInfoList,virtualVolumeInfos,true,true);}  }
class C{  public static String stringFor(int k){switch (k) {case cudaDevP2PAttrPerformanceRank:    return "cudaDevP2PAttrPerformanceRank";case cudaDevP2PAttrAccessSupported:  return "cudaDevP2PAttrAccessSupported";case cudaDevP2PAttrNativeAtomicSupported:return "cudaDevP2PAttrNativeAtomicSupported";}return "INVALID cudaDeviceP2PAttr: " + k;}  }
class C{  public DocumentFragment rtree(XPathContext support){  DocumentFragment docFrag=null;  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  } else {    DTM frag=support.getDTM(result);    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  }  return docFrag;}  }
class C{  @SuppressWarnings("unchecked") public <T>T newBean(Class<T> clazz){  return newBean(beanManager,clazz);}  }
class C{  public final double correlationCoefficient() throws Exception {  if (m_ClassIsNominal) {    throw new Exception("Can't compute correlation coefficient: " + "class is nominal!");  }  double correlation=0;  double varActual=m_SumSqrClass - m_SumClass * m_SumClass / (m_WithClass - m_Unclassified);  double varPredicted=m_SumSqrPredicted - m_SumPredicted * m_SumPredicted / (m_WithClass - m_Unclassified);  double varProd=m_SumClassPredicted - m_SumClass * m_SumPredicted / (m_WithClass - m_Unclassified);  if (varActual * varPredicted <= 0) {    correlation=0.0;  } else {    correlation=varProd / Math.sqrt(varActual * varPredicted);  }  return correlation;}  }
class C{  private void validateHighAvailability(VirtualPoolHighAvailabilityParam haParam,VirtualPool vPool){  if (haParam != null) {    if (VirtualPool.HighAvailabilityType.vplex_local.name().equals(haParam.getType()) || VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(haParam.getType())) {      throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForHighAvailability();    }  } else   if (vPool != null) {    if (VirtualPool.vPoolSpecifiesHighAvailability(vPool) || VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(vPool)) {      throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForHighAvailability();    }  }}  }
class C{  private static void collectTimes(Tree tree,double[] times,int[] childCounts){  for (int i=0; i < tree.getNodeCount(); i++) {    NodeRef node=tree.getNode(i);    times[i]=tree.getNodeHeight(node);    childCounts[i]=tree.getChildCount(node);  }}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  private void updateProductPO(MAcctSchema as){  MClientInfo ci=MClientInfo.get(getCtx(),as.getAD_Client_ID());  if (ci.getC_AcctSchema1_ID() != as.getC_AcctSchema_ID())   return;  StringBuffer sql=new StringBuffer("UPDATE M_Product_PO po " + "SET PriceLastPO = (SELECT currencyConvert(ol.PriceActual,ol.C_Currency_ID,po.C_Currency_ID,o.DateOrdered,o.C_ConversionType_ID,o.AD_Client_ID,o.AD_Org_ID) " + "FROM C_Order o, C_OrderLine ol "+ "WHERE o.C_Order_ID=ol.C_Order_ID"+ " AND po.M_Product_ID=ol.M_Product_ID AND po.C_BPartner_ID=o.C_BPartner_ID ");  if (DB.isOracle()) {    sql.append(" AND ROWNUM=1 ");  } else   sql.append(" AND ol.C_OrderLine_ID = (SELECT MIN(ol1.C_OrderLine_ID) " + "FROM C_Order o1, C_OrderLine ol1 " + "WHERE o1.C_Order_ID=ol1.C_Order_ID"+ " AND po.M_Product_ID=ol1.M_Product_ID AND po.C_BPartner_ID=o1.C_BPartner_ID").append("  AND o1.C_Order_ID=").append(get_ID()).append(") ");  sql.append("  AND o.C_Order_ID=").append(get_ID()).append(") ").append("WHERE EXISTS (SELECT * " + "FROM C_Order o, C_OrderLine ol " + "WHERE o.C_Order_ID=ol.C_Order_ID"+ " AND po.M_Product_ID=ol.M_Product_ID AND po.C_BPartner_ID=o.C_BPartner_ID"+ " AND o.C_Order_ID=").append(get_ID()).append(")");  int no=DB.executeUpdate(sql.toString(),getTrxName());  log.fine("Updated=" + no);}  }
class C{  public static int parseAc3SyncframeSize(byte[] data){  int fscod=(data[4] & 0xC0) >> 6;  int frmsizecod=data[4] & 0x3F;  return getAc3SyncframeSize(fscod,frmsizecod);}  }
class C{  public void stopServer(){  SocketPool pool=_clusterSocketPool.get();  if (pool != null) {    pool.getFactory().notifyHeartbeatStop();  }}  }
class C{  public void startDrag() throws IOException {  writeCode(START_DRAG);}  }
class C{  public void testLocalSocketAddress() throws Exception {  Enumeration<NetworkInterface> allInterfaces=NetworkInterface.getNetworkInterfaces();  SpawnedWorkerCounter counter=new SpawnedWorkerCounter();  List<LocalSocketAddressCheckThread> allChecks=new ArrayList<LocalSocketAddressCheckThread>();  while (allInterfaces.hasMoreElements()) {    NetworkInterface intf=allInterfaces.nextElement();    Enumeration<InetAddress> allAddresses=intf.getInetAddresses();    allChecks.add(new LocalSocketAddressCheckThread(allAddresses,counter));  }  counter.setWorkerCount(allChecks.size());  for (  LocalSocketAddressCheckThread t : allChecks) {    t.start();  }synchronized (counter) {    while (counter.workerCount > 0) {      counter.wait();      if (counter.workerCount == 0) {        System.out.println("Done!");        break;      }    }  }  boolean didOneWork=false;  boolean didOneFail=false;  for (  LocalSocketAddressCheckThread t : allChecks) {    if (t.atLeastOneWorked) {      didOneWork=true;      break;    }    if (!didOneFail) {      didOneFail=true;    }  }  assertTrue("At least one connection was made with the localSocketAddress set",didOneWork);  NonRegisteringDriver d=new NonRegisteringDriver();  String hostname=d.host(d.parseURL(dbUrl,null));  if (!hostname.startsWith(":") && !hostname.startsWith("localhost")) {    int indexOfColon=hostname.indexOf(":");    if (indexOfColon != -1) {      hostname=hostname.substring(0,indexOfColon);    }    boolean isLocalIf=false;    isLocalIf=(null != NetworkInterface.getByName(hostname));    if (!isLocalIf) {      try {        isLocalIf=(null != NetworkInterface.getByInetAddress(InetAddress.getByName(hostname)));      } catch (      Throwable t) {        isLocalIf=false;      }    }    if (!isLocalIf) {      assertTrue("At least one connection didn't fail with localSocketAddress set",didOneFail);    }  }}  }
class C{  public static int findNonMarkNorOtherCharacter(String text,int column){  if (column + 1 >= text.length()) {    return text.length() + 1;  }  MatchResult match=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column);  if (match == null) {    return text.length() + 1;  } else {    return match.getIndex();  }}  }
class C{  public void testCountWhereClauseSql(){  final String expected="SELECT COUNT(*) FROM MockModel WHERE intField = ?";  String actual=new Select().from(MockModel.class).where("intField = ?",1).toCountSql();  assertEquals(expected,actual);}  }
class C{  public boolean showStorageSites(){  return CATEGORY_USE_STORAGE.equals(mCategory);}  }
class C{  public SootClass(String name,int modifiers){  if (name.charAt(0) == '[')   throw new RuntimeException("Attempt to make a class whose name starts with [");  setName(name);  this.modifiers=modifiers;  refType=RefType.v(name);  refType.setSootClass(this);  if (Options.v().debug_resolver())   G.v().out.println("created " + name + " with modifiers "+ modifiers);  setResolvingLevel(BODIES);  Scene.v().getClassNumberer().add(this);}  }
class C{  private void createEntriesForTable(String tableName) throws SQLException {  final Vector<Column> columns2=new Vector<Column>();  String sql="select * from user_tab_columns where table_name='" + tableName + "' order by column_id";  ResultSet rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    columns2.add(new Column(rs));  }  rs.close();  sql="select col.column_name from user_constraints constr " + "inner join User_Cons_Columns col ON (col.constraint_name = constr.constraint_name) " + "where constr.constraint_type='P' and constr.table_name = '" + tableName + "'";  final Vector<String> keycolumns=new Vector<String>();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    keycolumns.add(rs.getString("COLUMN_NAME"));  }  rs.close();  sql="select * from " + tableName;  Vector<ADDataElement> dataElements2=new Vector<ADDataElement>();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    final ADDataElement data=new ADDataElement();    for (int i=0; i < columns2.size(); i++) {      final String colName=columns2.get(i).getColumnName();      data.addColumnAndValue(colName,rs.getString(colName));    }    dataElements2.add(data);  }  rs.close();  for (int i=0; i < dataElements2.size(); i++) {    try {      createNewTableEntry(tableName,dataElements2.get(i),keycolumns,columns2);    } catch (    SQLException e) {      e.printStackTrace();    }  }}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  RoundRectangle2D rect=new RoundRectangle2D.Float(x,y,width,height,arcWidth,arcHeight);  draw(rect);}  }
class C{  public void showCircle(boolean isDay){  if (this.isDay != isDay) {    this.isDay=isDay;    animHide();  } else   if (state != SHOWING_STATE) {    animShow();  }}  }
class C{  public void step(){  try {    for (    V v : getGraph().getVertices()) {      SpringVertexData svd=springVertexData.getUnchecked(v);      if (svd == null) {        continue;      }      svd.dx/=4;      svd.dy/=4;      svd.edgedx=svd.edgedy=0;      svd.repulsiondx=svd.repulsiondy=0;    }  } catch (  ConcurrentModificationException cme) {    step();  }  relaxEdges();  calculateRepulsion();  moveNodes();}  }
class C{  public Vector<RtcpSdesPacket> makereports(){  Vector<RtcpSdesPacket> packets=new Vector<RtcpSdesPacket>();  RtcpSdesPacket rtcpsdespacket=new RtcpSdesPacket(new RtcpSdesBlock[1]);  rtcpsdespacket.sdes[0]=new RtcpSdesBlock();  rtcpsdespacket.sdes[0].ssrc=rtcpSession.SSRC;  Vector<RtcpSdesItem> vector=new Vector<RtcpSdesItem>();  vector.addElement(new RtcpSdesItem(1,RtpSource.CNAME));  rtcpsdespacket.sdes[0].items=new RtcpSdesItem[vector.size()];  vector.copyInto(rtcpsdespacket.sdes[0].items);  packets.addElement(rtcpsdespacket);  return packets;}  }
class C{  private boolean addToTargets(IAllocNode node,Set<SootField> targetCPFields,Stmt stmt){  try {    Set<String> uriValues=new HashSet<String>();    SootField field=((RefType)node.getType()).getSootClass().getFieldByName("uriString");    boolean isResolved=ValueAnalysis.v().getStringFieldValues(node,field,uriValues);    if (isResolved) {      for (      String uriString : uriValues) {        URI uri=new URI(uriString);        String authority=uri.getAuthority();        for (        Provider p : Resources.v().getManifest().providers) {          if (p.definesAuthority(authority)) {            SootClass pClass=p.getSootClass();            targetCPFields.add(Harness.v().getFieldForCreatedClass(pClass));            logger.info("Found target for Content Provider stmt {}, uri {}, target {}",stmt,uriString,pClass);          }        }      }      return true;    } else {      AnalysisReport.v().addEntry("Unresolved Uri used on ICC call for ContentProvider.",stmt,AnalysisReport.Level.ELEVATED);      targetCPFields.addAll(allHarnessCPFlds);      return false;    }  } catch (  Exception e) {    targetCPFields.addAll(allHarnessCPFlds);    AnalysisReport.v().addEntry("Unresolved Uri used on ICC call for ContentProvider.",stmt,AnalysisReport.Level.ELEVATED);    return false;  }}  }
class C{  public void putLong(String key,long value){  editor.putLong(key,value);  editor.apply();}  }
class C{  public void cache(Map<String,Object> resources){  verifyState();  if (!cacheLocked.get()) {    resourceCache.get().putAll(resources);  }}  }
class C{  @Override public CommandLine parse(Options options,String[] arguments) throws ParseException {  return this.commandLineParser.parse(options,arguments);}  }
class C{  public Clustering<Model> run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("LSDBC",3) : null;  final int dim=RelationUtil.dimensionality(relation);  final double factor=Math.pow(2.,alpha / dim);  final DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,1,"Materializing kNN neighborhoods");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Sorting by density");  WritableDoubleDataStore dens=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  fillDensities(knnq,ids,dens);  ArrayModifiableDBIDs sids=DBIDUtil.newArray(ids);  sids.sort(new DataStoreUtil.AscendingByDoubleDataStore(dens));  LOG.beginStep(stepprog,3,"Computing clusters");  final FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("LSDBC Clustering",ids.size(),LOG) : null;  final IndefiniteProgress clusprogress=LOG.isVerbose() ? new IndefiniteProgress("Number of clusters found",LOG) : null;  final WritableIntegerDataStore clusterids=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_TEMP,UNPROCESSED);  final TIntArrayList clustersizes=new TIntArrayList();  clustersizes.add(0);  clustersizes.add(0);  int clusterid=NOISE + 1;  for (DBIDIter id=sids.iter(); id.valid(); id.advance()) {    if (clusterids.intValue(id) != UNPROCESSED) {      continue;    }    final KNNList neighbors=knnq.getKNNForDBID(id,k);    if (isLocalMaximum(neighbors.getKNNDistance(),neighbors,dens)) {      double mindens=factor * neighbors.getKNNDistance();      clusterids.putInt(id,clusterid);      clustersizes.add(expandCluster(clusterid,clusterids,knnq,neighbors,mindens,progress));      ++clusterid;      if (clusprogress != null) {        clusprogress.setProcessed(clusterid,LOG);      }    } else {      clusterids.putInt(id,NOISE);      clustersizes.set(NOISE,clustersizes.get(NOISE) + 1);    }    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  LOG.setCompleted(clusprogress);  LOG.setCompleted(stepprog);  ArrayList<ArrayModifiableDBIDs> clusterlists=new ArrayList<>(clusterid);  for (int i=0; i < clustersizes.size(); i++) {    clusterlists.add(DBIDUtil.newArray(clustersizes.get(i)));  }  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    int cid=clusterids.intValue(id);    int cluster=Math.abs(cid);    clusterlists.get(cluster).add(id);  }  clusterids.destroy();  Clustering<Model> result=new Clustering<>("LSDBC","lsdbc-clustering");  for (int cid=NOISE; cid < clusterlists.size(); cid++) {    boolean isNoise=(cid == NOISE);    Cluster<Model> c;    c=new Cluster<Model>(clusterlists.get(cid),isNoise,ClusterModel.CLUSTER);    result.addToplevelCluster(c);  }  return result;}  }
class C{  public Rectangle modelToView(JTextComponent a,int b,Position.Bias c) throws BadLocationException {  Rectangle returnValue=((TextUI)(uis.elementAt(0))).modelToView(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).modelToView(a,b,c);  }  return returnValue;}  }
class C{  public static byte[] subArray(byte[] input,int start){  return subArray(input,start,input.length);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(POINTS)) {    distributionPoints=Collections.<DistributionPoint>emptyList();  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:"+ extensionName+ '.');  }  encodeThis();}  }
class C{  @Override public Attribute findAttribute(String name) throws OperatorException {  if (name == null) {    return null;  }  Iterator<Attribute> i=attributes.iterator();  while (i.hasNext()) {    Attribute att=i.next();    if (att != null) {      if (att.getName().equals(name)) {        return att;      }    }  }  throw new AttributeNotFoundError(null,null,name);}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public Builder deleteUserType(){  deleteFields.add("userType");  return this;}  }
class C{  public short[] encodePOV(){  short[] vals=new short[povs.length];  for (int i=0; i < vals.length; i++)   vals[i]=(short)povs[i];  return vals;}  }
class C{  public final void registerShare(VFSShare share){  shares.add(share);}  }
class C{  @Deprecated public ServiceRequestBufferImp(int taskIdentifier){  super(SrbMetaData.SRB_VERSION_2);  addArgument(taskIdentifier);}  }
class C{  public static cuComplex cuCmul(cuComplex x,cuComplex y){  cuComplex prod;  prod=cuCmplx((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)),(cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));  return prod;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public List<T> unmarshalList(HierarchicalStreamReader reader,UnmarshallingContext context){  try {    List<T> result=Lists.newArrayList();    unmarshalCollection(result,reader,context);    return result;  } catch (  RuntimeException err) {    err.printStackTrace();    throw err;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.189 -0400",hash_original_method="8F9E66EFC16C8D20A0A67FB81BDA5440",hash_generated_method="E9A594CE1C23724ABA10A40194D2564E") public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void testStaticNoObjectPy3(){  setLanguageLevel(LanguageLevel.PYTHON32);  ensureStaticNoObject(true);}  }
class C{  void mapNodes(TreeNode node){  addNodeMap(node);  Enumeration e=node.children();  while (e.hasMoreElements()) {    TreeNode tn=(TreeNode)e.nextElement();    mapNodes(tn);  }}  }
class C{  private void updateStateView(Object state){  Platform.runLater(null);  simPaneCtrl.waitAfterStep();}  }
class C{  private void findAdditionalTvShowFiles(TvShow tvShow,File directory){  File[] contents=directory.listFiles();  if (contents == null) {    return;  }  List<File> completeDirContents=new ArrayList<>(Arrays.asList(contents));synchronized (filesFound) {    filesFound.addAll(completeDirContents);  }  for (  File file : completeDirContents) {    Matcher matcher=seasonPattern.matcher(file.getName());    if (matcher.matches() && !file.getName().startsWith("._")) {      LOGGER.debug("found season poster " + file.getPath());      try {        int season=Integer.parseInt(matcher.group(1));        tvShow.setSeasonPoster(season,file);      } catch (      Exception e) {      }    } else     if (file.getName().startsWith("season-specials-poster")) {      LOGGER.debug("found season specials poster " + file.getPath());      tvShow.setSeasonPoster(-1,file);    }  }  findArtwork(tvShow,completeDirContents,posterPattern1,MediaFileType.POSTER);  findArtwork(tvShow,completeDirContents,posterPattern2,MediaFileType.POSTER);  downloadArtwork(tvShow,MediaFileType.POSTER);  findArtwork(tvShow,completeDirContents,fanartPattern1,MediaFileType.FANART);  findArtwork(tvShow,completeDirContents,fanartPattern2,MediaFileType.FANART);  downloadArtwork(tvShow,MediaFileType.FANART);  findArtwork(tvShow,completeDirContents,bannerPattern1,MediaFileType.BANNER);  findArtwork(tvShow,completeDirContents,bannerPattern2,MediaFileType.BANNER);  downloadArtwork(tvShow,MediaFileType.BANNER);  findArtwork(tvShow,completeDirContents,logoPattern1,MediaFileType.LOGO);  findArtwork(tvShow,completeDirContents,logoPattern2,MediaFileType.LOGO);  downloadArtwork(tvShow,MediaFileType.LOGO);  findArtwork(tvShow,completeDirContents,clearlogoPattern1,MediaFileType.CLEARLOGO);  findArtwork(tvShow,completeDirContents,clearlogoPattern2,MediaFileType.CLEARLOGO);  downloadArtwork(tvShow,MediaFileType.CLEARLOGO);  findArtwork(tvShow,completeDirContents,clearartPattern1,MediaFileType.CLEARART);  findArtwork(tvShow,completeDirContents,clearartPattern2,MediaFileType.CLEARART);  downloadArtwork(tvShow,MediaFileType.CLEARART);  findArtwork(tvShow,completeDirContents,thumbPattern1,MediaFileType.THUMB);  findArtwork(tvShow,completeDirContents,thumbPattern2,MediaFileType.THUMB);  downloadArtwork(tvShow,MediaFileType.THUMB);}  }
class C{  static boolean resultEquals(Object result,Object expected){  if (result.getClass() != expected.getClass()) {    fail("FAIL: Result type mismatch, %s; expected: %s%n",result.getClass().getName(),expected.getClass().getName());    return false;  }  if (result.equals(expected)) {    return true;  }  if (result instanceof ArithmeticException && expected instanceof ArithmeticException) {    return true;  }  return false;}  }
class C{  public void open() throws IOException {  connection=new DatagramSocket();  connection.setSoTimeout(timeout);}  }
class C{  public void addSeparator(){  addSeparator(null);}  }
class C{  @Deprecated public final SourceSection createSection(String identifier,int startLine,int startColumn,int charIndex,int length){  checkRange(charIndex,length);  return createSectionImpl(identifier,startLine,startColumn,charIndex,length);}  }
class C{  void updateBucket2Size(int oldSize,int newSize,SizeOp op){  final int memoryDelta=op.computeMemoryDelta(oldSize,newSize);  if (memoryDelta == 0)   return;  updateBucketMemoryStats(memoryDelta);}  }
class C{  public DummySentimentAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_mood=jcas.getRequiredFeatureDE(casType,"mood","uima.cas.String",featOkTst);  casFeatCode_mood=(null == casFeat_mood) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_mood).getCode();}  }
class C{  public void afterIterationEvaluation(Object result){}  }
class C{  private void douglasPeucker(int i1,int i2,LatLong[] P,double epsilon){  douglasPeuckerRecurse(i1,i2,P,epsilon);}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  static UnitValue parseAlignKeywords(String s,boolean isHor){  if (startsWithLenient(s,"center",1,false) != -1) {    return UnitValue.CENTER;  }  if (isHor) {    if (startsWithLenient(s,"left",1,false) != -1) {      return UnitValue.LEFT;    }    if (startsWithLenient(s,"right",1,false) != -1) {      return UnitValue.RIGHT;    }    if (startsWithLenient(s,"leading",4,false) != -1) {      return UnitValue.LEADING;    }    if (startsWithLenient(s,"trailing",5,false) != -1) {      return UnitValue.TRAILING;    }    if (startsWithLenient(s,"label",5,false) != -1) {      return UnitValue.LABEL;    }  } else {    if (startsWithLenient(s,"baseline",4,false) != -1) {      return UnitValue.BASELINE_IDENTITY;    }    if (startsWithLenient(s,"top",1,false) != -1) {      return UnitValue.TOP;    }    if (startsWithLenient(s,"bottom",1,false) != -1) {      return UnitValue.BOTTOM;    }  }  return null;}  }
class C{  protected SourceRecords consumeRecordsByTopic(int numRecords) throws InterruptedException {  SourceRecords records=new SourceRecords();  consumeRecords(numRecords,null);  return records;}  }
class C{  public PropertyNode(Object pValue,PropertyDescriptor prop,Class<?> pClass){  value=pValue;  property=prop;  parentClass=pClass;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  public boolean isInDispute(){  Object oo=get_Value(COLUMNNAME_IsInDispute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  boolean[] flags=toBooleanArray();  for (int i=0; i < flags.length; i++) {    if (flags[i] == true) {switch (i) {case 0:        sb.append("RESERVED;");      break;case 1:    sb.append("FORWARDABLE;");  break;case 2:sb.append("FORWARDED;");break;case 3:sb.append("PROXIABLE;");break;case 4:sb.append("PROXY;");break;case 5:sb.append("MAY-POSTDATE;");break;case 6:sb.append("POSTDATED;");break;case 7:sb.append("INVALID;");break;case 8:sb.append("RENEWABLE;");break;case 9:sb.append("INITIAL;");break;case 10:sb.append("PRE-AUTHENT;");break;case 11:sb.append("HW-AUTHENT;");break;}}}String result=sb.toString();if (result.length() > 0) {result=result.substring(0,result.length() - 1);}return result;}  }
class C{  private void deleteSelectedInstances(){  if (mDeleteInstancesTask == null) {    mDeleteInstancesTask=new DeleteInstancesTask();    mDeleteInstancesTask.setContentResolver(getContentResolver());    mDeleteInstancesTask.setDeleteListener(this);    mDeleteInstancesTask.execute(mSelected.toArray(new Long[mSelected.size()]));  } else {    Toast.makeText(this,getString(R.string.file_delete_in_progress),Toast.LENGTH_LONG).show();  }}  }
class C{  private static ReuseResult loadBitmapReuse(ImageSource source,Bitmap dest) throws ImageLoadException {  ImageMetadata metadata=source.getImageMetadata();  boolean tryReuse=false;  if (dest.isMutable()) {    if (Build.VERSION.SDK_INT >= 19) {      tryReuse=dest.getAllocationByteCount() >= metadata.getW() * metadata.getH() * 4;    } else     if (Build.VERSION.SDK_INT >= 11) {      if (metadata.getFormat() == ImageFormat.JPEG || metadata.getFormat() == ImageFormat.PNG) {        tryReuse=dest.getWidth() == metadata.getW() && dest.getHeight() == metadata.getH();      }    }  }  if (tryReuse) {    return source.loadBitmap(dest);  } else {    return new ReuseResult(loadBitmap(source),false);  }}  }
class C{  public void writeGraphicGestureHeader(int graphicUpdateMask) throws IOException {  link.dos.write(Link.UPDATE_GRAPHICS.getBytes());  link.dos.writeByte(ACTION_GRAPHICS);  link.dos.writeInt(graphicUpdateMask);}  }
class C{  public static void unregisterMBean(Class<?> mbeanInterface){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    ObjectName name=generateMBeanObjectName(mbeanInterface);    if (mbs.isRegistered(name)) {      logger.info("Unregistering mbean: " + name.toString());      mbs.unregisterMBean(name);    } else {      logger.warn("Ignoring attempt to unregister unknown mbean: " + name.toString());    }  } catch (  Exception e) {    throw new ServerRuntimeException("Unable to unregister mbean: interface=" + mbeanInterface,e);  }}  }
class C{  private GraphBuilder(boolean directed){  this.directed=directed;}  }
class C{  public int doStartTag() throws JspException {  Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());  int AD_WF_Activity_ID=0;  String info=null;  try {    info=(String)ExpressionUtil.evalNotNull("workflow","activityID",m_activityID_el,String.class,this,pageContext);    if (info != null && info.length() != 0)     AD_WF_Activity_ID=Integer.parseInt(info);  } catch (  Exception e) {    log.severe("doStartTag - Activity" + e);  }  MWFActivity act=new MWFActivity(ctx,AD_WF_Activity_ID,null);  if (AD_WF_Activity_ID == 0 || act == null || act.get_ID() != AD_WF_Activity_ID) {    log.severe("doStartTag - Activity Not found - " + m_activityID_el + " ("+ info+ ")");    return (SKIP_BODY);  }  String name=null;  if (act.isUserApproval())   name="IsApproved"; else   if (act.isUserManual())   name="IsConfirmed"; else   return (SKIP_BODY);  option[] yesNoOptions=new option[3];  yesNoOptions[0]=new option(" ");  yesNoOptions[0].addElement(" ");  yesNoOptions[0].setSelected(true);  yesNoOptions[1]=new option("Y");  yesNoOptions[1].addElement(Util.maskHTML(Msg.translate(ctx,"Yes")));  yesNoOptions[2]=new option("N");  yesNoOptions[2].addElement(Util.maskHTML(Msg.translate(ctx,"No")));  select yesNoSelect=new select(name,yesNoOptions);  yesNoSelect.setID("ID_" + name);  yesNoSelect.setClass(C_MANDATORY);  String nameTrl=Msg.translate(ctx,name);  HtmlCode html=new HtmlCode();  html.addElement(new b(nameTrl));  html.addElement(yesNoSelect);  html.addElement(new br());  JspWriter out=pageContext.getOut();  html.output(out);  return (SKIP_BODY);}  }
class C{  public String ruleString(){  StringBuffer buffer=new StringBuffer();  if (optional) {    buffer.append("*Optionally, one of \n");  } else {    buffer.append("*One of \n");  }  for (  XMLSyntaxRule rule : rules) {    buffer.append("*").append(rule.ruleString()).append("\n");  }  return buffer.toString();}  }
class C{  private void spherical(float newRadius[],float zenith[],float azimuth[]){  float[] ex=new float[1], ey=new float[1], ez=new float[1];  float[] cx=new float[1], cy=new float[1], cz=new float[1];  float x, y, z;  float r;  float s;  target.getCamera().getEye(ex,ey,ez);  target.getCamera().getCenter(cx,cy,cz);  x=ex[0] - cx[0];  y=ey[0] - cy[0];  z=ez[0] - cz[0];  r=(float)Math.sqrt(Math.pow(x,2) + (float)Math.pow(y,2) + Math.pow(z,2));  s=(float)Math.sqrt(Math.pow(x,2) + (float)Math.pow(y,2));  if (s == 0.0f)   s=0.00000001f;  if (r == 0.0f)   r=0.00000001f;  zenith[0]=(float)Math.acos(z / r);  if (x < 0)   azimuth[0]=(float)Math.PI - (float)Math.asin(y / s); else   azimuth[0]=(float)Math.asin(y / s);  newRadius[0]=r / CCCamera.getZEye();}  }
class C{  private void insertTags(Podcast podcast){  String[] tags=podcast.getTagsStr().trim().split("\\s*,\\s*");  Set<String> uniqueTags=new LinkedHashSet<String>(Arrays.asList(tags));  for (  String tagName : uniqueTags) {    Tag tag=readDao.getTagByName(tagName.trim());    if (null != tag) {      insertDao.insertPodcastTag(new PodcastTag(podcast.getPodcastId(),tag.getTagId()));    } else {      tag=new Tag();      tag.setName(tagName.trim());      insertDao.insertTag(tag);      insertDao.insertPodcastTag(new PodcastTag(podcast.getPodcastId(),tag.getTagId()));    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double totalElevation=0;  double numElevations=0;  boolean useMaxDist=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        maxDist=Double.parseDouble(args[i]);        useMaxDist=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          totalElevation=0;          numElevations=0;          yIntercept=-row - lineSlope * col;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            if (z1 != noData && z2 != noData) {              z=z1 + (y - y1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(-y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            if (z1 != noData && z2 != noData) {              z=z1 + (x - x1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          if (numElevations > 0) {            z=totalElevation / numElevations - currentVal;            output.setValue(row,col,z);          } else {            output.setValue(row,col,0);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean unbind(){  boolean worked=true;  if (m_rxThread == null)   worked=false; else   m_stopRx=true;  return worked;}  }
class C{  public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){  if (contains(client.listDatabaseNames(),dbName)) {    dbOperation.accept(client.getDatabase(dbName));  }}  }
class C{  private void checkClass(Object o) throws IOException, ClassNotFoundException {  DataOutputStream out=getDataOutput();  DataSerializer.writeObject(o,out);  out.flush();  DataInput in=getDataInput();  assertSame(o.getClass(),DataSerializer.<Object>readObject(in).getClass());  this.baos=new ByteArrayOutputStream();}  }
class C{  public T caseConstraintBody_(ConstraintBody_ object){  return null;}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public <T,X>void processObserverMethod(@Observes ProcessObserverMethod<T,X> pom,BeanManager beanManager){  final Type type=pom.getObserverMethod().getObservedType();  if (type instanceof Class<?>) {    final Class<?> clazz=(Class<?>)type;    if (MvcEvent.class.isAssignableFrom(clazz)) {      addObservedEvent((Class<? extends MvcEvent>)type);    }  }}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  public static SsaMethod convertToSsaMethod(RopMethod rmeth,int paramWidth,boolean isStatic){  SsaMethod result=SsaMethod.newFromRopMethod(rmeth,paramWidth,isStatic);  edgeSplit(result);  LocalVariableInfo localInfo=LocalVariableExtractor.extract(result);  placePhiFunctions(result,localInfo,0);  new SsaRenamer(result).run();  result.makeExitBlock();  return result;}  }
class C{  private void deleteAttachmentEntry(){  log.info("");  int index=cbContent.getSelectedIndex();  String fileName=getFileName(index);  if (fileName == null)   return;  if (FDialog.ask(m_WindowNo,this,"AttachmentDeleteEntry?")) {    if (m_attachment.deleteEntry(index))     cbContent.removeItemAt(index);    m_change=true;  }}  }
class C{  StackMapTable(final int name_index,final int length,final DataInput input,final ConstantPool constant_pool) throws IOException {  this(name_index,length,(StackMapTableEntry[])null,constant_pool);  int map_length=input.readUnsignedShort();  map=new StackMapTableEntry[map_length];  for (int i=0; i < map_length; i++) {    map[i]=new StackMapTableEntry(input,constant_pool);  }}  }
class C{  public byte[] byteValue(){  byte[] result=new byte[4];  result[0]=(byte)components[0];  result[1]=(byte)components[1];  result[2]=(byte)components[2];  result[3]=(byte)components[3];  return result;}  }
class C{  private void skipUntilEndOfSingleLineComment(BufferedReader bufferedReader,StringBuilder minified) throws IOException {  while (true) {    int cInt=bufferedReader.read();    if (cInt == -1) {      return;    }    char c=(char)cInt;    if (c == '\n') {      minified.append('\n');      return;    }  }}  }
class C{  protected void validateJarLocation(String hadoopJarLocationString){  if (StringUtils.isBlank(hadoopJarLocationString)) {    throw new IllegalArgumentException("Hadoop JAR location must be specified.");  }}  }
class C{  public void testConsumeWriteBuffer(){  int len=100;  ByteFifoBuffer instance=new ByteFifoBuffer(len);  instance.consumeWriteBuffer(len / 2);  instance.consumeWriteBuffer(len / 2);  try {    instance.consumeWriteBuffer(1);    fail();  } catch (  BufferOverflowException e) {  }  instance=new ByteFifoBuffer(len);  instance.consumeWriteBuffer(95);  instance.consumeReadData(40);  instance.consumeWriteBuffer(20);}  }
class C{  public void updateComboBox(JComboBox<TrainSchedule> box){  box.removeAllItems();  for (  TrainSchedule sch : getSchedulesByNameList()) {    box.addItem(sch);  }}  }
class C{  public boolean isUnspecified(){  return (this == UNSPECIFIED);}  }
class C{  @Override @Deprecated public void presentFragment(INavigationFragment navFragment,int animationIn,int animationOut){  getNavigationManager().pushFragment(navFragment,animationIn,animationOut);}  }
class C{  protected void handleException(Exception e){  StringBuffer sb=new StringBuffer("ShapeFile Export Error:");  sb.append("\nProblem with creating the shapefile set.");  sb.append("\n").append(e.toString());  JOptionPane.showMessageDialog(null,sb.toString(),"ESRI Shape Export to File",JOptionPane.ERROR_MESSAGE);  e.printStackTrace();}  }
class C{  public void deleteOrganizationUnit(String customerId,String orgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  service.delete(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId + "/"+ orgUnitPath));}  }
class C{  public boolean requestForPermissionsAndWaitResponse(Context context){  Intent intent=new Intent(context,PermissionsAlertDialog.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);  try {synchronized (sInstance) {      super.wait();    }  } catch (  InterruptedException e) {  }  return mHasPermissions;}  }
class C{  public void readRuleSet(final EvolutionState state,final LineNumberReader reader) throws IOException {  numRules=Code.readIntegerWithPreamble(N_RULES,state,reader);  rules=new Rule[numRules];  for (int x=0; x < numRules; x++) {    rules[x]=(Rule)(constraints(((RuleInitializer)state.initializer)).rulePrototype.clone());    rules[x].readRule(state,reader);  }}  }
class C{  public int noOfTabs(){  return m_curWinTab.getTabCount();}  }
class C{  public boolean isHighFarOut(){  return this.highFarOut;}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof List) {    JSONArray.writeJSONString((List)value,out);    return;  }  out.write(value.toString());}  }
class C{  public ClassTreeLoader(String prefixPath,DependenciesListener builder,ClassFileReader reader,ProgressListener progress){  super(builder,prefixPath);  this.reader=reader;  this.progress=progress;}  }
class C{  public void withVoidTransaction(@NotNull TransactionSettings settings,@NotNull VoidTransactionCallback callback){  withTransaction(settings,fromVoidCallback(callback));}  }
class C{  public TemplateEngine(TemplateContextType contextType,ITemplateImageProvider imageProvider){  Assert.isNotNull(contextType);  this.contextType=contextType;  this.imageProvider=imageProvider;}  }
class C{  public boolean isAvailable(){  Object oo=get_Value(COLUMNNAME_IsAvailable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public boolean isDeterministicUpgradeRequired(){  return basic.numKeys() > 0 && chains.isEmpty();}  }
class C{  public void putResultInTable(String tableName,ResultProducer rp,Object[] key,Object[] result) throws Exception {  String query="INSERT INTO " + tableName + " VALUES ( ";  for (int i=0; i < key.length; i++) {    if (i != 0) {      query+=',';    }    if (key[i] != null) {      if (key[i] instanceof String) {        query+="'" + processKeyString(key[i].toString()) + "'";      } else       if (key[i] instanceof Double) {        query+=safeDoubleToString((Double)key[i]);      } else {        query+=key[i].toString();      }    } else {      query+="NULL";    }  }  for (  Object element : result) {    query+=',';    if (element != null) {      if (element instanceof String) {        query+="'" + element.toString() + "'";      } else       if (element instanceof Double) {        query+=safeDoubleToString((Double)element);      } else {        query+=element.toString();      }    } else {      query+="NULL";    }  }  query+=')';  if (m_Debug) {    System.err.println("Submitting result: " + query);  }  update(query);  close();}  }
class C{  public boolean isShowTickMarks(){  return mShowTickMarks;}  }
class C{  private void validateHeatmapResultLoop(Rectangle inputRange,int facetLevel,int cellCountRecursThreshold) throws IOException {  if (facetLevel > grid.getMaxLevels()) {    return;  }  final int maxCells=10_000;  final HeatmapFacetCounter.Heatmap heatmap=HeatmapFacetCounter.calcFacets((PrefixTreeStrategy)strategy,indexSearcher.getTopReaderContext(),null,inputRange,facetLevel,maxCells);  int preNonZero=cellValidatedNonZero;  validateHeatmapResult(inputRange,facetLevel,heatmap);  assert cellValidatedNonZero - preNonZero > 0;  if (heatmap.counts.length < cellCountRecursThreshold) {    validateHeatmapResultLoop(inputRange,facetLevel + 1,cellCountRecursThreshold);  }}  }
class C{  public boolean isBookmarkingEnabled(){  return bookmarkingEnabled;}  }
class C{  public static IndependenceTest IndTestFromString(String name,DataSet data,double alpha){  IndependenceTest test=null;  if (name.equals("tlin")) {    test=new edu.pitt.csb.mgm.IndTestMixedMultipleTTest(data,alpha);    ((edu.pitt.csb.mgm.IndTestMixedMultipleTTest)test).setPreferLinear(true);  } else   if (name.equals("tlog")) {    test=new edu.pitt.csb.mgm.IndTestMixedMultipleTTest(data,alpha);    ((edu.pitt.csb.mgm.IndTestMixedMultipleTTest)test).setPreferLinear(false);  } else {    Class cl=null;    try {      cl=Class.forName("edu.cmu.tetrad.search." + name);    } catch (    ClassNotFoundException e) {      System.out.println("Not found: " + "edu.cmu.tetrad.search." + name);    }catch (    Exception e) {      e.printStackTrace();    }    if (cl == null) {      try {        cl=Class.forName("edu.pitt.csb.mgm." + name);      } catch (      ClassNotFoundException e) {        throw new IllegalArgumentException("-test argument not recognized");      }catch (      Exception e) {        e.printStackTrace();      }    }    try {      Constructor con=cl.getConstructor(DataSet.class,double.class);      test=(IndependenceTest)con.newInstance(data,alpha);    } catch (    NoSuchMethodException e) {      System.err.println("Independence Test: " + name + " not found");    }catch (    Exception e) {      System.err.println("Independence Test: " + name + " found but not constructed");      e.printStackTrace();    }  }  return test;}  }
class C{  public LimitInputStream(InputStream in,long limit){  super(in);  this.limit=limit;  left=limit;}  }
class C{  public JTAJobRunShell(Scheduler scheduler,TriggerFiredBundle bndle){  super(scheduler,bndle);  this.transactionTimeout=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AbstractAdapter wrap(IAdapter abstractAdapter){  this.mFastAdapter=abstractAdapter.getFastAdapter();  this.mFastAdapter.registerAdapter(this);  return this;}  }
class C{  public L removeWithRight(R rightValue){  L leftValue=tableRight.remove(rightValue);  if (leftValue != null)   tableLeft.remove(leftValue);  return leftValue;}  }
class C{  private static Vector<Object> nativeLibraries(ClassLoader ldr){  assert ldr != null;  return U.field(ldr,"nativeLibraries");}  }
class C{  protected boolean acc_isZero(){  return sign == 0;}  }
class C{  public static ClassInfo findOrCreateClass(String fullName){  ClassInfo u=findClass(fullName);  if (u == null) {    u=new ClassInfo(fullName);    if (u.isArray()) {      findOrCreateClass(fullName.substring(1));    }  }  return u;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void upperBound(byte[] key,int keyOffset,int keyLen) throws IOException {  seekTo(new ByteArray(key,keyOffset,keyLen),true);}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public static long parseTimeNanos(String s,int start,int end,boolean timeOfDay){  int hour=0, minute=0, second=0;  long nanos=0;  int s1=s.indexOf(':',start);  int s2=s.indexOf(':',s1 + 1);  int s3=s.indexOf('.',s2 + 1);  if (s1 <= 0 || s2 <= s1) {    throw new IllegalArgumentException(s);  }  boolean negative;  hour=Integer.parseInt(s.substring(start,s1));  if (hour < 0) {    if (timeOfDay) {      throw new IllegalArgumentException(s);    }    negative=true;    hour=-hour;  } else {    negative=false;  }  minute=Integer.parseInt(s.substring(s1 + 1,s2));  if (s3 < 0) {    second=Integer.parseInt(s.substring(s2 + 1,end));  } else {    second=Integer.parseInt(s.substring(s2 + 1,s3));    String n=(s.substring(s3 + 1,end) + "000000000").substring(0,9);    nanos=Integer.parseInt(n);  }  if (hour >= 2000000 || minute < 0 || minute >= 60 || second < 0 || second >= 60) {    throw new IllegalArgumentException(s);  }  if (timeOfDay && hour >= 24) {    throw new IllegalArgumentException(s);  }  nanos+=((((hour * 60L) + minute) * 60) + second) * 1000000000;  return negative ? -nanos : nanos;}  }
class C{  public static void scanFolder(File file,FileFilter filter,GridDeploymentFileHandler handler){  assert file != null;  if (filter.accept(file))   handler.handle(file); else   if (file.isDirectory()) {    for (    File child : file.listFiles()) {      scanFolder(child,filter,handler);    }  }}  }
class C{  public AnsibleRunner debug(){  return debug(true);}  }
class C{  public StateMachineModelBuilder(ObjectPostProcessor<Object> objectPostProcessor,boolean allowConfigurersOfSameType){  super(objectPostProcessor,allowConfigurersOfSameType);}  }
class C{  private String checkForMatch(String givenString,Collection<String> collectionOfStrings,boolean caseSensitive){  if (givenString == null || collectionOfStrings == null) {    return null;  }  String returnString=null;  Collections.sort(new ArrayList<String>(collectionOfStrings));  for (  String vectorString : collectionOfStrings) {    if (vectorString == null) {      continue;    }    if (caseSensitive) {      if (vectorString.startsWith(givenString)) {        returnString=vectorString;        break;      }    } else {      if (vectorString.toLowerCase(Locale.ENGLISH).startsWith(givenString.toLowerCase(Locale.ENGLISH))) {        returnString=vectorString;        break;      }    }  }  return returnString;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public void initKeyEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,boolean ctrlKeyArg,boolean altKeyArg,boolean shiftKeyArg,boolean metaKeyArg,int keyCodeArg,int charCodeArg,AbstractView viewArg){  initUIEvent(typeArg,canBubbleArg,cancelableArg,viewArg,0);  ctrlKey=ctrlKeyArg;  altKey=altKeyArg;  shiftKey=shiftKeyArg;  metaKey=metaKeyArg;  keyCode=keyCodeArg;  charCode=charCodeArg;}  }
class C{  public ReferenceMap(){  super(HARD,SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  public Observer(String observerName,String observerOptions) throws Exception {  super();  try {    this.pointer=CocoJNI.cocoGetObserver(observerName,observerOptions);    this.name=observerName;  } catch (  Exception e) {    throw new Exception("Observer constructor failed.\n" + e.toString());  }}  }
class C{  HandleTable(int initCap){  entries=new Object[initCap];}  }
class C{  @Field(12) public Pointer<IUnknown> punkVal(){  return this.io.getPointerField(this,12);}  }
class C{  public void pln(String s) throws IOException {  p(s);  pln();}  }
class C{  public NbtTagLong(String name){  super(name);}  }
class C{  public boolean isLoadFinished(){  return resolvedLength != C.LENGTH_UNBOUNDED && loadPosition == resolvedLength;}  }
class C{  protected static String extractAccessKey(String s3uri){  return s3uri.substring(s3uri.indexOf("://") + 3,s3uri.indexOf(':',s3uri.indexOf("://") + 3));}  }
class C{  private String[] processName(String qName,boolean isAttribute,boolean useException) throws SAXException {  String parts[]=nsSupport.processName(qName,nameParts,isAttribute);  if (parts == null) {    if (useException)     throw makeException("Undeclared prefix: " + qName);    reportError("Undeclared prefix: " + qName);    parts=new String[3];    parts[0]=parts[1]="";    parts[2]=qName.intern();  }  return parts;}  }
class C{  public EMailAuthenticator createAuthenticator(String username,String password){  if (username == null || password == null) {    log.warning("Ignored - " + username + "/"+ password);    m_auth=null;  } else {    m_auth=new EMailAuthenticator(username,password);  }  return m_auth;}  }
class C{  void distributeSpace(int space,boolean keepHidden){  boolean lValid=(components[0] != null && components[0].isVisible());  boolean rValid=(components[1] != null && components[1].isVisible());  if (keepHidden) {    if (lValid && getSizeForPrimaryAxis(components[0].getSize()) == 0) {      lValid=false;      if (rValid && getSizeForPrimaryAxis(components[1].getSize()) == 0) {        lValid=true;      }    } else     if (rValid && getSizeForPrimaryAxis(components[1].getSize()) == 0) {      rValid=false;    }  }  if (lValid && rValid) {    double weight=splitPane.getResizeWeight();    int lExtra=(int)(weight * (double)space);    int rExtra=(space - lExtra);    sizes[0]+=lExtra;    sizes[1]+=rExtra;    int lMin=getMinimumSizeOfComponent(components[0]);    int rMin=getMinimumSizeOfComponent(components[1]);    boolean lMinValid=(sizes[0] >= lMin);    boolean rMinValid=(sizes[1] >= rMin);    if (!lMinValid && !rMinValid) {      if (sizes[0] < 0) {        sizes[1]+=sizes[0];        sizes[0]=0;      } else       if (sizes[1] < 0) {        sizes[0]+=sizes[1];        sizes[1]=0;      }    } else     if (!lMinValid) {      if (sizes[1] - (lMin - sizes[0]) < rMin) {        if (sizes[0] < 0) {          sizes[1]+=sizes[0];          sizes[0]=0;        }      } else {        sizes[1]-=(lMin - sizes[0]);        sizes[0]=lMin;      }    } else     if (!rMinValid) {      if (sizes[0] - (rMin - sizes[1]) < lMin) {        if (sizes[1] < 0) {          sizes[0]+=sizes[1];          sizes[1]=0;        }      } else {        sizes[0]-=(rMin - sizes[1]);        sizes[1]=rMin;      }    }    if (sizes[0] < 0) {      sizes[0]=0;    }    if (sizes[1] < 0) {      sizes[1]=0;    }  } else   if (lValid) {    sizes[0]=Math.max(0,sizes[0] + space);  } else   if (rValid) {    sizes[1]=Math.max(0,sizes[1] + space);  }}  }
class C{  public HomeActivityMovement(HomeActivityMovement proto){  super(proto);  this.distance=proto.distance;  this.pathFinder=proto.pathFinder;  this.mode=proto.mode;  this.timeDiffSTD=proto.timeDiffSTD;  if (proto.allHomes == null) {    MapNode[] mapNodes=(MapNode[])getMap().getNodes().toArray(new MapNode[0]);    int homeIndex=rng.nextInt(mapNodes.length - 1);    homeLocation=mapNodes[homeIndex].getLocation().clone();  } else {    this.allHomes=proto.allHomes;    homeLocation=allHomes.get(rng.nextInt(allHomes.size())).clone();  }  if (timeDiffSTD == -1) {    timeDifference=rng.nextInt(DAY_LENGTH) - DAY_LENGTH / 2;  } else   if (timeDiffSTD == 0) {    timeDifference=0;  } else {    timeDifference=(int)Math.min(Math.max((rng.nextGaussian() * timeDiffSTD),-DAY_LENGTH / 2),DAY_LENGTH / 2);  }}  }
class C{  @Override protected void checkNumberOfInputs(int inputLength){  if (inputLength != 3) {    throw new FunctionInputException("expression_parser.function_wrong_input",getFunctionName(),3,inputLength);  }}  }
class C{  public void log(Object source,String message,Level level,Object... arguments){  try {    if (this.debugLevel.intValue() <= level.intValue()) {      for (      LogListener listener : getLogListeners()) {        listener.log(source,message,level,arguments);      }      StringWriter writer=new StringWriter();      writer.write(getName() + " - " + Thread.currentThread()+ " -- "+ source+ ":"+ message);      for (      Object argument : arguments) {        writer.write(" - " + argument);      }      getLog().log(level,writer.toString());    }  } catch (  Exception exception) {    System.out.println(exception);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.917 -0500",hash_original_method="721AC2C980F4969C548FB1DE5C82C277",hash_generated_method="209B4EBCE5294A6F4D5520F2CC807DB7") protected boolean bottom(TextView widget,Spannable buffer){  return false;}  }
class C{  public void cursor(int x,int y){  cursor(new Coords(x,y));}  }
class C{  public CandlePeriod(ZonedDateTime startOfPeriod,ZonedDateTime endOfPeriod){  if (startOfPeriod == null) {    throw new IllegalArgumentException("Null startPeriod argument.");  }  if (endOfPeriod == null) {    throw new IllegalArgumentException("Null endOfPeriod argument.");  }  this.startOfPeriod=startOfPeriod;  this.endOfPeriod=endOfPeriod;  this.secondsLength=(int)TradingCalendar.getDurationInSeconds(startOfPeriod,endOfPeriod);}  }
class C{  protected void updateHistoryModDate(DomainObject<?> obj,Date date){  obj.setHistoryModificationTime(Long.valueOf(date.getTime()));}  }
class C{  public void resetLastMethod(){  lastMtd=null;}  }
class C{  private void decrementInDegree(){  --inDegree;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_DEFS__TYPES:    return getTypes();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private int read1(char[] cbuf,int off,int len) throws IOException {  if (nextChar >= nChars) {    if (len >= cb.length && markedChar <= UNMARKED && !skipLF) {      return in.read(cbuf,off,len);    }    fill();  }  if (nextChar >= nChars)   return -1;  if (skipLF) {    skipLF=false;    if (cb[nextChar] == '\n') {      nextChar++;      if (nextChar >= nChars)       fill();      if (nextChar >= nChars)       return -1;    }  }  int n=Math.min(len,nChars - nextChar);  System.arraycopy(cb,nextChar,cbuf,off,n);  nextChar+=n;  return n;}  }
class C{  public MissingArgumentException(String field){  super("Missing mandatory configuration field: " + field);  mMissingField=field;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.DEFERRED_TYPE_REF;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener l){  m_propertyChangeListeners.addPropertyChangeListener(l);}  }
class C{  protected SVGOMDefsElement(){}  }
class C{  public void start() throws SchedulerException {  try {    getRemoteScheduler().start();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private double maxIgnoreNaN(double a,double b){  if (Double.isNaN(a)) {    return b;  }  if (Double.isNaN(b)) {    return a;  } else {    return Math.max(a,b);  }}  }
class C{  public static DefineShape create9SlicedShape(DefineBits bitmap,Rect r,double width,double height){  if (Double.isNaN(width))   width=bitmap.width;  if (Double.isNaN(height))   height=bitmap.height;  int slt=r.xMin;  int srt=r.xMax;  int stt=r.yMin;  int sbt=r.yMax;  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>(50);  ShapeWithStyle sws=new ShapeWithStyle();  sws.fillstyles=new ArrayList<FillStyle>(9);  sws.shapeRecords=shapeRecords;  Matrix matrix=new Matrix();  matrix.scaleX=(int)(SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE);  matrix.scaleY=(int)(SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE);  matrix.hasScale=true;  for (int i=0; i < 9; i++) {    FillStyle fs=new FillStyle(FillStyle.FILL_BITS | FillStyle.FILL_BITS_NOSMOOTH,matrix,bitmap);    sws.fillstyles.add(fs);  }  int dxa=slt;  int dxb=srt - slt;  int dxc=(int)(bitmap.width * SwfConstants.TWIPS_PER_PIXEL) - srt;  int dya=stt;  int dyb=sbt - stt;  int dyc=(int)(bitmap.height * SwfConstants.TWIPS_PER_PIXEL) - sbt;  shapeRecords.add(new StyleChangeRecord(0,dya,0,0,1));  shapeRecords.add(new StraightEdgeRecord(0,-dya));  shapeRecords.add(new StraightEdgeRecord(dxa,0));  shapeRecords.add(new StyleChangeRecord(0,0,2));  shapeRecords.add(new StraightEdgeRecord(dxb,0));  shapeRecords.add(new StyleChangeRecord(0,0,3));  shapeRecords.add(new StraightEdgeRecord(dxc,0));  shapeRecords.add(new StraightEdgeRecord(0,dya));  shapeRecords.add(new StyleChangeRecord(0,0,6));  shapeRecords.add(new StraightEdgeRecord(0,dyb));  shapeRecords.add(new StyleChangeRecord(0,0,9));  shapeRecords.add(new StraightEdgeRecord(0,dyc));  shapeRecords.add(new StraightEdgeRecord(-dxc,0));  shapeRecords.add(new StyleChangeRecord(0,0,8));  shapeRecords.add(new StraightEdgeRecord(-dxb,0));  shapeRecords.add(new StyleChangeRecord(0,0,7));  shapeRecords.add(new StraightEdgeRecord(-dxa,0));  shapeRecords.add(new StraightEdgeRecord(0,-dyc));  shapeRecords.add(new StyleChangeRecord(0,0,4));  shapeRecords.add(new StraightEdgeRecord(0,-dyb));  shapeRecords.add(new StyleChangeRecord(dxa,0,0,2,1));  shapeRecords.add(new StraightEdgeRecord(0,dya));  shapeRecords.add(new StyleChangeRecord(0,5,4));  shapeRecords.add(new StraightEdgeRecord(0,dyb));  shapeRecords.add(new StyleChangeRecord(0,8,7));  shapeRecords.add(new StraightEdgeRecord(0,dyc));  shapeRecords.add(new StyleChangeRecord(dxa + dxb,0,0,3,2));  shapeRecords.add(new StraightEdgeRecord(0,dya));  shapeRecords.add(new StyleChangeRecord(0,6,5));  shapeRecords.add(new StraightEdgeRecord(0,dyb));  shapeRecords.add(new StyleChangeRecord(0,9,8));  shapeRecords.add(new StraightEdgeRecord(0,dyc));  shapeRecords.add(new StyleChangeRecord(0,dya,0,1,4));  shapeRecords.add(new StraightEdgeRecord(dxa,0));  shapeRecords.add(new StyleChangeRecord(0,2,5));  shapeRecords.add(new StraightEdgeRecord(dxb,0));  shapeRecords.add(new StyleChangeRecord(0,3,6));  shapeRecords.add(new StraightEdgeRecord(dxc,0));  shapeRecords.add(new StyleChangeRecord(0,dya + dyb,0,4,7));  shapeRecords.add(new StraightEdgeRecord(dxa,0));  shapeRecords.add(new StyleChangeRecord(0,5,8));  shapeRecords.add(new StraightEdgeRecord(dxb,0));  shapeRecords.add(new StyleChangeRecord(0,6,9));  shapeRecords.add(new StraightEdgeRecord(dxc,0));  DefineShape shape=new DefineShape(TagValues.stagDefineShape4);  shape.bounds=TypeHelper.rect(width,height);  shape.edgeBounds=shape.bounds;  shape.shapeWithStyle=sws;  return shape;}  }
class C{  public boolean isBeingInstantiated(){  return beingInstantiated;}  }
class C{  public final boolean isStatic(){  return Modifier.isStatic(getModifiers());}  }
class C{  public AddressConstantOperand(Address v){  value=v;}  }
class C{  public SVGOMFETurbulenceElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  public boolean hasNameSuffix(){  return hasExtension(NameSuffix.class);}  }
class C{  public void stateChanged(ChangeEvent evt){  int scale=slider.getValue();  value.setText("x" + String.valueOf(scale));  size.setText("Image Size: " + (width * scale) + " x "+ (height * scale)+ " pixels");  preview.repaint();}  }
class C{  public static void append(CharSequence from,File to,Charset charset) throws IOException {  write(from,to,charset,true);}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public Task delete(String id) throws IOException {  String path=getBasePath() + "/" + id;  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in the format used by the C4.5 algorithm.\nTherefore it outputs a names and a data file.";}  }
class C{  public InhibitAnyPolicy(byte[] encoding) throws IOException {  super(encoding);  this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue();}  }
class C{  double H(){  int[] n=new int[numberOfGroups];  double[] rbar=new double[numberOfGroups];  for (  RankedObservation observation : data) {    n[observation.getGroup()]++;    rbar[observation.getGroup()]+=observation.getRank();  }  double H=0.0;  for (int i=0; i < numberOfGroups; i++) {    H+=Math.pow(rbar[i],2.0) / n[i];  }  int N=data.size();  return 12.0 / (N * (N + 1)) * H - 3.0 * (N + 1);}  }
class C{  public synchronized void newPixels(byte[] newpix,ColorModel newmodel,int offset,int scansize){  this.pixels=newpix;  this.model=newmodel;  this.pixeloffset=offset;  this.pixelscan=scansize;  newPixels();}  }
class C{  public GraphMLReader(Supplier<V> vertex_factory,Supplier<E> edge_factory) throws ParserConfigurationException, SAXException {  current_vertex=null;  current_edge=null;  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();  saxp=saxParserFactory.newSAXParser();  current_states=new LinkedList<TagState>();  tag_state=HashBiMap.<String,TagState>create();  tag_state.put("node",TagState.VERTEX);  tag_state.put("edge",TagState.EDGE);  tag_state.put("hyperedge",TagState.HYPEREDGE);  tag_state.put("endpoint",TagState.ENDPOINT);  tag_state.put("graph",TagState.GRAPH);  tag_state.put("data",TagState.DATA);  tag_state.put("key",TagState.KEY);  tag_state.put("desc",TagState.DESC);  tag_state.put("default",TagState.DEFAULT_KEY);  tag_state.put("graphml",TagState.GRAPHML);  this.key_type=KeyType.NONE;  this.vertex_factory=vertex_factory;  this.edge_factory=edge_factory;}  }
class C{  public static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;switch (len & 15) {case 15:    k2=(key[roundedEnd + 14] & 0xffL) << 48;case 14:  k2|=(key[roundedEnd + 13] & 0xffL) << 40;case 13:k2|=(key[roundedEnd + 12] & 0xffL) << 32;case 12:k2|=(key[roundedEnd + 11] & 0xffL) << 24;case 11:k2|=(key[roundedEnd + 10] & 0xffL) << 16;case 10:k2|=(key[roundedEnd + 9] & 0xffL) << 8;case 9:k2|=(key[roundedEnd + 8] & 0xffL);k2*=c2;k2=Long.rotateLeft(k2,33);k2*=c1;h2^=k2;case 8:k1=((long)key[roundedEnd + 7]) << 56;case 7:k1|=(key[roundedEnd + 6] & 0xffL) << 48;case 6:k1|=(key[roundedEnd + 5] & 0xffL) << 40;case 5:k1|=(key[roundedEnd + 4] & 0xffL) << 32;case 4:k1|=(key[roundedEnd + 3] & 0xffL) << 24;case 3:k1|=(key[roundedEnd + 2] & 0xffL) << 16;case 2:k1|=(key[roundedEnd + 1] & 0xffL) << 8;case 1:k1|=(key[roundedEnd] & 0xffL);k1*=c1;k1=Long.rotateLeft(k1,31);k1*=c2;h1^=k1;}h1^=len;h2^=len;h1+=h2;h2+=h1;h1=fmix64(h1);h2=fmix64(h2);h1+=h2;h2+=h1;out.val1=h1;out.val2=h2;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public static void addFileTypeDefinition(final String alias,final IType<?> bufferType,final IType<?> keyType,final IType<?> contentType,final Class clazz,final GamaHelper<IGamaFile<?,?,?,?>> builder,final String[] extensions){  for (  final String ext : extensions) {    String clean=ext.toLowerCase();    if (clean.startsWith(".")) {      clean=clean.substring(1);    }    aliasesToExtensions.put(alias,clean);  }  final ParametricFileType t=new ParametricFileType(alias + "_file",clazz,builder,bufferType,keyType,contentType);  aliasesToFullType.put(alias,t);  for (  final String s : aliasesToExtensions.get(alias)) {    extensionsToFullType.put(s,t);  }  t.setParent(Types.FILE);  Types.builtInTypes.initType(alias + "_file",t,IType.AVAILABLE_TYPES + ++currentFileTypeIndex,ISymbolKind.Variable.CONTAINER,clazz);}  }
class C{  public FloatMatrix min(FloatMatrix other){  return mini(other,new FloatMatrix(rows,columns));}  }
class C{  public void requestFieldFocus(){  editText.requestFocus();}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  public void windowClosed(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowClosed(e);  }}  }
class C{  private static long copy(InputStream from,OutputStream to) throws IOException {  byte[] buf=new byte[BUFFER];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public static <T>IncreasingQualityDataSourceSupplier<T> create(List<Supplier<DataSource<T>>> dataSourceSuppliers){  return new IncreasingQualityDataSourceSupplier<T>(dataSourceSuppliers);}  }
class C{  public boolean isInitialRangeSet(int scale){  return initialRange.get(scale) != null;}  }
class C{  protected void resetToType(BindValue oldValue,int bufferType) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    oldValue.reset();    if (bufferType == MysqlDefs.FIELD_TYPE_NULL && oldValue.bufferType != 0) {    } else     if (oldValue.bufferType != bufferType) {      this.sendTypesToServer=true;      oldValue.bufferType=bufferType;    }    oldValue.isSet=true;    oldValue.boundBeforeExecutionNum=this.numberOfExecutions;  }}  }
class C{  public boolean isCached(String uri){  return mImageLoader.isCached(uri,0,0);}  }
class C{  public synchronized static <D extends Dao<T,?>,T>D lookupDao(ConnectionSource connectionSource,Class<T> clazz){  if (connectionSource == null) {    throw new IllegalArgumentException("connectionSource argument cannot be null");  }  ClassConnectionSource key=new ClassConnectionSource(connectionSource,clazz);  Dao<?,?> dao=lookupDao(key);  @SuppressWarnings("unchecked") D castDao=(D)dao;  return castDao;}  }
class C{  @Override public boolean remove(Object obj){  return removeFirstOccurrenceImpl(obj);}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public static Drawable blurEffectsOnDrawable(Context mContext,int drawable,int radius){  if (radius == 0)   radius=20;  Bitmap blurBitmap;  Bitmap bitmap=drawableTobitmap(mContext,drawable);  blurBitmap=BlurEffect.fastblur(mContext,bitmap,radius);  return new BitmapDrawable(blurBitmap);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  if (!instruction.getMnemonic().equals("shl") && !instruction.getMnemonic().equals("sal")) {    throw new InternalTranslationException("Error: Argument instruction is not a shl instruction (wrong mnemonic)");  }  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a shl instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);  instructions.addAll(firstResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,operands.get(1),true);  instructions.addAll(secondResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size1=firstResult.getSize();  final OperandSize size2=secondResult.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(size1);  final String operand1=firstResult.getRegister();  final String operand2=secondResult.getRegister();  final String shiftMsbLsbValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size1));  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size1));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size1));  final String modValue=String.valueOf(size1.getBitSize());  final String carryMask=String.valueOf(Helpers.getCarryMask(size1));  final String shiftCarryValue=String.valueOf(-size1.getBitSize());  final String shiftMask=environment.getNextVariableString();  final String shiftMaskZero=environment.getNextVariableString();  final String shiftMaskLessOne=environment.getNextVariableString();  final String shiftMaskOne=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String carryResult=environment.getNextVariableString();  final int before=instructions.size();  final List<ReilInstruction> writebackInstructions=new ArrayList<>();  Helpers.writeBack(environment,offset + 16,operands.get(0),truncatedResult,size1,firstResult.getAddress(),firstResult.getType(),writebackInstructions);  instructions.add(ReilHelpers.createMod(offset,size2,operand2,size2,modValue,size2,shiftMask));  instructions.add(ReilHelpers.createBisz(offset + 1,size2,shiftMask,OperandSize.BYTE,shiftMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,size2,"1",size2,shiftMask,size2,shiftMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,size2,shiftMaskLessOne,OperandSize.BYTE,shiftMaskOne));  instructions.add(ReilHelpers.createBsh(offset + 4,size1,operand1,size2,shiftMask,resultSize,result));  instructions.add(ReilHelpers.createAnd(offset + 5,resultSize,result,size1,truncateMask,size1,truncatedResult));  final String jmpGoalWriteBack=String.format("%d.%d",instruction.getAddress().toLong(),before + 16);  instructions.add(ReilHelpers.createJcc(offset + 6,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpGoalWriteBack));  instructions.add(ReilHelpers.createAnd(offset + 7,resultSize,result,resultSize,msbMask,resultSize,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 8,resultSize,msbResult,resultSize,shiftMsbLsbValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 9,resultSize,result,resultSize,carryMask,resultSize,carryResult));  instructions.add(ReilHelpers.createBsh(offset + 10,resultSize,carryResult,resultSize,shiftCarryValue,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBisz(offset + 11,size1,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),before + 15);  instructions.add(ReilHelpers.createJcc(offset + 12,OperandSize.BYTE,shiftMaskOne,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 13,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoalWriteBack));  instructions.add(ReilHelpers.createXor(offset + 15,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.addAll(writebackInstructions);}  }
class C{  @Override protected Money handleTransactionThatIsPaymentInAdvanceOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final LocalDate transactionDate,final Money paymentInAdvance,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,paymentInAdvance,transactionMappings);}  }
class C{  public static String toNullIfEmpty(String s){  return (StringUtil.isEmpty(s)) ? null : s;}  }
class C{  private boolean checkIndependence(ScatterRenderer r1,ScatterRenderer r2){  if (!r1.equals(r2)) {    return false;  }  r1.setSeriesShapesFilled(1,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesShapesFilled(1,true);  if (!r1.equals(r2)) {    return false;  }  r1.setBaseShapesFilled(false);  r2.setBaseShapesFilled(true);  if (r1.equals(r2)) {    return false;  }  r2.setBaseShapesFilled(false);  if (!r1.equals(r2)) {    return false;  }  return true;}  }
class C{  public void updatePoly(float latPoint,float lonPoint,int[] xypoints,int cMode,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(latPoint,lonPoint,xypoints,cMode,properties,link.dos);}  }
class C{  private String searchCharSet(String[] items,StringBuffer base,int count){  if ((--count >= 0) && (items[count] != null) && (items[count].length() > 0)) {    String charset;    base.insert(0,items[count]);    int length=base.length();    for (int i=count; i > 0; i--) {      if ((i == count) || (i <= 1)) {        base.insert(0,'_');        length++;      }      charset=searchCharSet(items,base,i);      if (charset.length() > 0) {        return charset;      }      base.delete(0,base.length() - length);    }    return searchCharSet(base.toString());  } else {    return "";  }}  }
class C{  public static String formatNumber(final BigDecimal number,final int fractionDigits,final boolean useGrouping){  final NumberFormat numberFormat=NumberFormat.getInstance();  numberFormat.setMinimumFractionDigits(fractionDigits);  numberFormat.setMaximumFractionDigits(fractionDigits);  numberFormat.setGroupingUsed(useGrouping);  return numberFormat.format(number.doubleValue());}  }
class C{  public static void pixelProjection(GL10 gl,int w,int h){  gl.glViewport(0,0,w,h);  gl.glMatrixMode(GL_PROJECTION);  gl.glLoadIdentity();  gl.glOrthof(0,w,h,0,-100,100);}  }
class C{  public void append(Template text){  append(text.buf,0,text.count);}  }
class C{  Priority priority(){  return priority;}  }
class C{  public boolean isFocused(){  return getBooleanProperty(BOOLEAN_PROPERTY_FOCUSED);}  }
class C{  private void handleFaultEvent(FaultEvent faultEvent){  DManagerIsolateState isolateState=getIsolateState(faultEvent.isolateId);  boolean executingPlayerCode=isolateState.m_executingPlayerCode;  if (executingPlayerCode) {    FaultEvent faultEventDuringPlayerCodeExecution=isolateState.m_faultEventDuringPlayerCodeExecution;    if (faultEventDuringPlayerCodeExecution == null) {      isolateState.m_faultEventDuringPlayerCodeExecution=faultEvent;    }  } else {    addEvent(faultEvent);  }}  }
class C{  public boolean appliesTo(OMGraphic geom){  return (geom != null && geom.equals(omg));}  }
class C{  public Node item(int i){  if (getLength() == 0 || i >= m_avts.size())   return null; else   return new Attribute(((AVT)m_avts.get(i)),ElemLiteralResult.this);}  }
class C{  public BrLineReader(BufferedReader br){  mBr=br;}  }
class C{  private void checkTransactionIsolationLevel() throws SQLException {  String txIsolationName=null;  if (versionMeetsMinimum(4,0,3)) {    txIsolationName="tx_isolation";  } else {    txIsolationName="transaction_isolation";  }  String s=this.serverVariables.get(txIsolationName);  if (s != null) {    Integer intTI=mapTransIsolationNameToValue.get(s);    if (intTI != null) {      this.isolationLevel=intTI.intValue();    }  }}  }
class C{  public static void copyStream(InputStream inputStream,OutputStream outputStream) throws IOException {  copyStream(inputStream,outputStream,true);}  }
class C{  static boolean isOracle(){  if (s_type == null)   getServerType();  if (s_type != null)   return TYPE_ORACLE.equals(s_type);  return false;}  }
class C{  public boolean isLeaf(){  return this.children.isEmpty();}  }
class C{  public static void initializeLogger(){  PropertyConfigurator.configureAndWatch("resources/log4j.properties",60000);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.722 -0500",hash_original_method="DFA4A10C9A5AF888C1AA8746F1A85305",hash_generated_method="1545E9812E7EBED1F33C8B8846F343C2") public HeaderIterator iterator(final String name){  return new BasicListHeaderIterator(this.headers,name);}  }
class C{  @Override public void init(RandomGenerator random){}  }
class C{  protected void loadValue(String sValue){  value=sValue;}  }
class C{  private int executeCompare(PageContext pc,SQL sql,Query qr,Operation2 op,int row) throws PageException {  return Operator.compare(executeExp(pc,sql,qr,op.getLeft(),row),executeExp(pc,sql,qr,op.getRight(),row));}  }
class C{  private static int addAllTabs(Stack stack,StackTab[] outList,int index){  StackTab[] stackTabs=stack.getTabs();  if (stackTabs != null) {    for (int i=0; i < stackTabs.length; ++i) {      outList[index++]=stackTabs[i];    }  }  return index;}  }
class C{  public GenericItemAdapter<Model,Item> removeModelRange(int position,int itemCount){  super.removeRange(position,itemCount);  return this;}  }
class C{  public static RealmAttribute createRealmAttribute(byte realm[]){  RealmAttribute attribute=new RealmAttribute();  attribute.setRealm(realm);  return attribute;}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  public void addValue(IFitsHeader key,long val) throws HeaderCardException {  addValue(key.key(),val,key.comment());}  }
class C{  public void onUsedBackwards(final RPEntity user){}  }
class C{  final public SimpleNode process() throws ParseException {  ASTprocess jjtn000=new ASTprocess(this,JJTPROCESS);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    label_1:     while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LPAREN:case RPAREN:case ESCAPE_DIRECTIVE:case SET_DIRECTIVE:case DOUBLE_ESCAPE:case ESCAPE:case TEXT:case SINGLE_LINE_COMMENT:case FORMAL_COMMENT:case MULTI_LINE_COMMENT:case STRING_LITERAL:case IF_DIRECTIVE:case STOP_DIRECTIVE:case NUMBER_LITERAL:case WORD:case IDENTIFIER:case DOT:case LCURLY:case RCURLY:        ;      break;default :    jj_la1[0]=jj_gen;  break label_1;}Statement();}jj_consume_token(0);jjtree.closeNodeScope(jjtn000,true);jjtc000=false;{if (true) return jjtn000;}} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}throw new Error("Missing return statement in function");}  }
class C{  public void visitEnd(){}  }
class C{  public WireDatabaseConnection(IConnectionProperties connectionProperties,IEncodingFactory encodingFactory,ProtocolCollection protocols) throws SQLException {  super(connectionProperties,encodingFactory,protocols);}  }
class C{  private void jbInit() throws Exception {  panel.setLayout(panelLayout);  this.setJMenuBar(menuBar);  textArea.setPreferredSize(new Dimension(300,300));  textArea.setWrapStyleWord(true);  textArea.setLineWrap(true);  tabbedPane.add(textArea,"Text");  textArea.addKeyListener(this);  textPane.setContentType("text/html");  textPane.setEditable(false);  tabbedPane.add(textPane,"HTML");  mFile.setText("File");  mImport.setText("Import");  mImport.addActionListener(this);  mExport.setText("Export");  mExport.addActionListener(this);  tabbedPane.addChangeListener(this);  panel.add(tabbedPane,BorderLayout.CENTER);  confirmPanel.addActionListener(this);  panel.add(confirmPanel,BorderLayout.SOUTH);  this.getContentPane().add(panel,BorderLayout.CENTER);  this.getContentPane().add(statusBar,BorderLayout.SOUTH);  menuBar.add(mFile);  mFile.add(mImport);  mFile.add(mExport);  updateStatusBar();}  }
class C{  DirectoryPage _addLevelForOverflow(final DirectoryPage current){  if (isReadOnly()) {    DirectoryPage copy=(DirectoryPage)copyOnWrite(current.getIdentity());    return copy._addLevelForOverflow(current);  }  final DirectoryPage newdir=new DirectoryPage((HTree)htree,null,htree.addressBits);  if (isReadOnly())   assert !isReadOnly();  replaceChildRef(current.self,newdir);  final byte[] overflowKey=current.getOverflowKey();  final int slot=newdir.getLocalHashCode(overflowKey,newdir._getPrefixLength());  newdir.childRefs[slot]=(Reference<AbstractPage>)current.self;  ((MutableDirectoryPageData)newdir.data).childAddr[slot]=current.identity;  current.parent=(Reference<DirectoryPage>)newdir.self;  try {    current._protectFromEviction();    newdir._fillChildSlots(slot,0,childRefs.length,0);  }  finally {    current._releaseProtection();  }  return newdir;}  }
class C{  protected void init(ModelEntity modelEntity){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.observable=new Observable();  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  public float computeLengthNorm(int numTerms){  final int l=ln_min;  final int h=ln_max;  final float s=ln_steep;  return (float)(1.0f / Math.sqrt((s * (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h - l))) + 1.0f));}  }
class C{  public void addUserRole(UserRoleType userRole){  userRoles.add(userRole);}  }
class C{  public JSONObject makeConnectedViaPostProps(final String postCity,final String category,final Attachment attachment,final int postLength){  JSONObject props;  try {    props=new JSONObject();    props.put("Post City",postCity);    props.put("Category",category);    props.put("Attachment",attachment);    props.put("Length",postLength);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  private static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  int halfWidth=width >> 1;  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN_REVERSE.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=height - 1; i > 0; i-=rowStep) {    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[1],i);      result[4]=new ResultPoint(loc[0],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[1],i);        result[5]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN_REVERSE.length];  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[0],i);        result[6]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[0],i);        result[7]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  public SkuCentralView(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);}  }
class C{  protected void adjustUpwards(double minY,double height){  for (int i=this.labels.size() - 1; i > 0; i--) {    PieLabelRecord record0=getPieLabelRecord(i);    PieLabelRecord record1=getPieLabelRecord(i - 1);    if (record1.getUpperY() > record0.getLowerY()) {      record1.setAllocatedY(Math.max(minY + record1.getLabelHeight() / 2.0,record0.getLowerY() - this.minGap - record1.getLabelHeight() / 2.0));    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.NUMERIC_LITERAL__VALUE:    setValue((BigDecimal)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.949 -0500",hash_original_method="B24CD2C7FF3B887A2D7E4705F48A60B3",hash_generated_method="AD4C9EC03B4473759DDBFA6016BEFB25") public static boolean isRunningInTestHarness(){  return SystemProperties.getBoolean("ro.test_harness",false);}  }
class C{  @Override protected void doProcess() throws CommunicationException, InterruptedException {}  }
class C{  public void rollback() throws Exception {  if (!txContext.isInTransaction()) {    throw new javax.jms.IllegalStateException("Rollback called on Session that does not have an active transaction");  }  txContext.rollback();}  }
class C{  private IoBuffer encodeClientBW(ClientBW clientBW){  final IoBuffer out=IoBuffer.allocate(5);  out.putInt(clientBW.getBandwidth());  out.put(clientBW.getValue2());  return out;}  }
class C{  public void addRemoteExperimentListener(RemoteExperimentListener r){  m_listeners.addElement(r);}  }
class C{  public SparseArray(){  this(10);}  }
class C{  private String protectionSystemsToString(Collection<ProtectionSystem> protectionSystems){  List<String> temp=new ArrayList<String>();  StringBuffer buff=new StringBuffer();  for (  ProtectionSystem ps : protectionSystems) {    buff.append(ps.getLabel());    buff.append(":");    buff.append(ps.getCgLastCreatedTime() != null ? ps.getCgLastCreatedTime().getTime().toString() : "No CGs created");    temp.add(buff.toString());    buff.delete(0,buff.length());  }  return StringUtils.join(temp,", ");}  }
class C{  private void publishResults(FileSystem fs) throws IOException {  X.println(">>> Cleaning up DFS input directory: " + BOOKS_DFS_DIR);  fs.delete(BOOKS_DFS_DIR,true);  X.println(">>> Cleaning up LOCAL result directory: " + RESULT_LOCAL_DIR);  fs.delete(RESULT_LOCAL_DIR,true);  X.println(">>> Moving job results into LOCAL result directory: " + RESULT_LOCAL_DIR);  fs.copyToLocalFile(true,RESULT_DFS_DIR,RESULT_LOCAL_DIR);}  }
class C{  public void showWindow(){  if (isVisible()) {    return;  }  doShow();}  }
class C{  Matrix3D(){  xx=1.0f;  yy=1.0f;  zz=1.0f;}  }
class C{  @Dimension(unit=Dimension.PX) public static float spToPx(@Dimension(unit=Dimension.SP) float sp){  return sp * getContext().getResources().getDisplayMetrics().scaledDensity;}  }
class C{  public static String toString(Object[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void stop(){  List<String> reverse=new ArrayList<>(componentsOrder);  Collections.reverse(reverse);  reverse.stream().map(null).forEach(null);}  }
class C{  @Override public boolean joinSegments(Point2D.Double join,double tolerance){  if (get(TRANSFORM) != null) {    try {      join=(Point2D.Double)get(TRANSFORM).inverseTransform(join,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  int i=getBezierPath().findSegment(join,tolerance);  if (i != -1 && i > 1) {    removeNode(i);    return true;  }  return false;}  }
class C{  public boolean isMilestone(){  Object oo=get_Value(COLUMNNAME_IsMilestone);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void checkFieldNotNull(final Object value,final String fieldName){  checkField(value != null,fieldName);}  }
class C{  public static void unRegisterTileCodec(int comp){  XTIFFTileCodec cod=getTileCodec(comp);  tileCodecs.remove(cod);}  }
class C{  public void delete(long key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public static MaxProjectionExpression max(Expression expression){  return new MaxProjectionExpression(expression,false);}  }
class C{  public static String prettyFormat(Collection<Dependency> deadlock){  StringBuilder text=new StringBuilder();  LinkedHashSet<LocalThread> threads=new LinkedHashSet<LocalThread>();  Set<Object> seenDependers=new HashSet<>();  Object lastDependsOn=text;  Object lastDepender=text;  for (  Dependency dep : deadlock) {    Object depender=dep.getDepender();    Object dependsOn=dep.getDependsOn();    String dependerString;    if (lastDependsOn.equals(depender)) {      dependerString="which";    } else     if (lastDepender.equals(depender)) {      dependerString="and";    } else {      dependerString=String.valueOf(depender);    }    lastDepender=depender;    lastDependsOn=dependsOn;    String also=seenDependers.contains(depender) ? " also" : "";    seenDependers.add(depender);    if (depender instanceof LocalThread) {      text.append(dependerString).append(" is").append(also).append(" waiting on ").append(dependsOn).append("\n");      threads.add((LocalThread)depender);    } else     if (dependsOn instanceof LocalThread) {      text.append(dependerString).append(" is held by thread ").append(dependsOn).append("\n");      threads.add((LocalThread)dependsOn);    } else {      text.append(dependerString).append(" is").append(also).append(" waiting for ").append(dependsOn).append("\n");    }    text.append("\n");  }  text.append("\nStack traces for involved threads\n");  for (  LocalThread threadInfo : threads) {    text.append(threadInfo.getLocatility()).append(":").append(threadInfo.getThreadStack()).append("\n\n");  }  return text.toString();}  }
class C{  public synchronized boolean subMode(){  return subMode;}  }
class C{  String nextNodesSerial(){  if (nextNodes.isEmpty())   return EMPTY;  StringBuilder sb=new StringBuilder();  for (  Node<T> n : nextNodes) {    sb.append(n.stringID).append(":");  }  sb.setLength(sb.length() - 1);  return sb.toString();}  }
class C{  public CButton addButton(String action,String toolTipText,Icon icon){  AppsAction aa=new AppsAction(action,null,toolTipText);  CButton b=(CButton)aa.getButton();  addComponent(b);  return b;}  }
class C{  private boolean activateTopologyHandler(String topologyName){  NetworkUtils.TunnelConfig tunnelConfig=NetworkUtils.TunnelConfig.build(config,NetworkUtils.HeronSystem.SCHEDULER);  return TMasterUtils.transitionTopologyState(topologyName,TMasterUtils.TMasterCommand.ACTIVATE,Runtime.schedulerStateManagerAdaptor(runtime),TopologyAPI.TopologyState.PAUSED,TopologyAPI.TopologyState.RUNNING,tunnelConfig);}  }
class C{  public UserRoleAssignmentException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void assembleAttributes(Model model,Order order) throws Exception {  for (  String value : order.attributes()) {    Expression path=builder.build(value);    if (!path.isAttribute() && path.isPath()) {      throw new PathException("Ordered attribute '%s' references an element in %s",path,detail);    }    if (!path.isPath()) {      Style style=format.getStyle();      String name=style.getAttribute(value);      model.registerAttribute(name);    } else {      registerAttributes(model,path);    }  }}  }
class C{  private void scheduleRepeatingAlarm(){  Intent registerIntent=createRegisterRequestIntent(mApplicationContext,false);  PendingIntent pIntent=PendingIntent.getService(mApplicationContext,0,registerIntent,0);  AlarmManager am=(AlarmManager)mApplicationContext.getSystemService(Context.ALARM_SERVICE);  setAlarm(am,pIntent,AlarmManager.RTC,mTimestampForNewRequest);}  }
class C{  public CCSprite(CCSpriteSheet spritesheet,CGRect rect){  init(spritesheet.getTexture(),rect);  useSpriteSheetRender(spritesheet);}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public boolean transformSource(){  return this.transformSource;}  }
class C{  private static void checkParameters(AbLevelSeriesDataset dataset,AbLevelSeriesRenderer renderer){  if (dataset == null || renderer == null) {    throw new IllegalArgumentException("Dataset and renderer should be not null");  }}  }
class C{  private Set intersectIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  if (ipWithSubmask1.length != ipWithSubmask2.length) {    return Collections.EMPTY_SET;  }  byte[][] temp=extractIPsAndSubnetMasks(ipWithSubmask1,ipWithSubmask2);  byte ip1[]=temp[0];  byte subnetmask1[]=temp[1];  byte ip2[]=temp[2];  byte subnetmask2[]=temp[3];  byte minMax[][]=minMaxIPs(ip1,subnetmask1,ip2,subnetmask2);  byte[] min;  byte[] max;  max=min(minMax[1],minMax[3]);  min=max(minMax[0],minMax[2]);  if (compareTo(min,max) == 1) {    return Collections.EMPTY_SET;  }  byte[] ip=or(minMax[0],minMax[2]);  byte[] subnetmask=or(subnetmask1,subnetmask2);  return Collections.singleton(ipWithSubnetMask(ip,subnetmask));}  }
class C{  @Nullable public WindowInfo findWindowInfo(String id,@Nullable DeviceInfo deviceInfo){  lock.readLock().lock();  try {    checkInitialized();    List<WindowInfo> infos=screens.get(id);    if (infos == null) {      Matcher matcher=ENTITY_SCREEN_PATTERN.matcher(id);      if (matcher.matches()) {        MetaClass metaClass=metadata.getClass(matcher.group(1));        if (metaClass == null) {          return null;        }        MetaClass originalMetaClass=metadata.getExtendedEntities().getOriginalMetaClass(metaClass);        if (originalMetaClass != null) {          String originalId=new StringBuilder(id).replace(matcher.start(1),matcher.end(1),originalMetaClass.getName()).toString();          infos=screens.get(originalId);        }      }    }    List<WindowInfo> foundWindowInfos=infos;    if (foundWindowInfos != null) {      if (foundWindowInfos.size() == 1 && foundWindowInfos.get(0).getScreenAgent() == null) {        return foundWindowInfos.get(0);      }      if (deviceInfo == null) {        return foundWindowInfos.stream().filter(null).findFirst().orElse(null);      } else {        return infos.stream().filter(null).findFirst().orElseGet(null);      }    }    return null;  }  finally {    lock.readLock().unlock();  }}  }
class C{  @Override public void onExecuteEventStart(@NonNull DecoEvent event){  executeMove(event);  executeReveal(event);  executeEffect(event);}  }
class C{  private void calcDConnections(List<Node> targets){  sortedArrows=new ConcurrentSkipListSet<>();  lookupArrows=new ConcurrentHashMap<>();  neighbors=new ConcurrentHashMap<>();  this.dconn=new EdgeListGraphSingleConnections();  for (  Node target : targets) {    this.dconn.addNode(target);  }  Set emptySet=new HashSet();  for (  Node target : targets) {    for (    Node x : getVariables()) {      if (targets.contains(x)) {        continue;      }      int child=hashIndices.get(target);      int parent=hashIndices.get(x);      double bump=fgsScore.localScoreDiff(parent,child);      if (bump > 0) {        dconn.addNode(x);        addUnconditionalArrows(x,target,emptySet);        for (        Node y : getVariables()) {          if (x == y)           continue;          if (!dconn.isAdjacentTo(x,y) && !dconn.isAdjacentTo(y,target)) {            int child2=hashIndices.get(x);            int parent2=hashIndices.get(y);            double bump2=fgsScore.localScoreDiff(parent2,child2);            if (bump2 > 0) {              dconn.addNode(y);              addUnconditionalArrows(x,y,emptySet);            }          }        }      }    }  }  this.targets=targets;  this.variables=dconn.getNodes();  this.graph=new EdgeListGraphSingleConnections(this.variables);}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public V put(K key,V value){  return putVal(hash(key),key,value,false,true);}  }
class C{  private void sendRequest0() throws IllegalArgumentException, IOException {  if (cancelled) {    logger.finer("Trying to resend a cancelled transaction.");  } else {    stackCallback.getNetAccessManager().sendMessage(this.request,localAddress,requestDestination);  }}  }
class C{  @Override public void run(){  try {    if (this.isForStart) {      this.server.getClass().getMethod("start",null).invoke(this.server,null);      try {        Object threadPool=this.server.getClass().getMethod("getThreadPool",new Class[]{}).invoke(this.server,new Object[]{});        threadPool.getClass().getMethod("join",new Class[]{}).invoke(threadPool,new Object[]{});      } catch (      NoSuchMethodException e) {        getLogger().info("Ignoring unimplemented method server.getThreadPool().join()",getClass().getName());      }    } else {      this.server.getClass().getMethod("stop",null).invoke(this.server,null);      try {        this.server.getClass().getMethod("destroy",null).invoke(this.server,null);      } catch (      NoSuchMethodException e) {        getLogger().info("Ignoring unimplemented method server.destroy()",getClass().getName());      }    }  } catch (  Exception e) {    if (e.getCause() != null && e.getCause() instanceof IllegalStateException && "!STOPPED".equals(e.getCause().getMessage())) {      return;    }    String message="Failed to " + (this.isForStart ? "start" : "stop") + " the Jetty container";    getLogger().warn(message + ": " + e,this.getClass().getName());    throw new ContainerException(message,e);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("CM_WebProject_ID"))     p_CM_WebProject_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void testDoConfigureSetsPort() throws Exception {  configuration.setProperty(ServletPropertySet.PORT,"1001");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("1001","//weblogic:listen-port",config);}  }
class C{  public String toString(){  return "link=" + link + ", name="+ name;}  }
class C{  @Override public int available(){  return count - pos;}  }
class C{  @Override public Response listDomainLoadBalanceStrategies(){  return Response.ok(JsonUtil.toJson(ProxyLoadBalanceStrategy.values())).build();}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (baseFeatureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:    return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.442 -0500",hash_original_method="3B22313394D07BEF3A6E95D38DEA0C1A",hash_generated_method="1BF4A279C7A74A72E14E010698496E4D") public SIPHeader parse() throws ParseException {  ProxyRequireList list=new ProxyRequireList();  if (debug)   dbg_enter("ProxyRequireParser.parse");  try {    headerName(TokenTypes.PROXY_REQUIRE);    while (lexer.lookAhead(0) != '\n') {      ProxyRequire r=new ProxyRequire();      r.setHeaderName(SIPHeaderNames.PROXY_REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      list.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new ProxyRequire();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        list.add(r);      }    }  }  finally {    if (debug)     dbg_leave("ProxyRequireParser.parse");  }  return list;}  }
class C{  private void init(){  setTitle("New K Winner Take All Network");  fillFieldValues();  tfK.setColumns(5);  logicPanel.addItem("Number of Neurons",tfK);  tabLogic.add(logicPanel);  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);}  }
class C{  public ThickAsynchronousIterator(final E[] a){  if (a == null)   throw new IllegalArgumentException();  this.a=a;  lastIndex=-1;}  }
class C{  public static MethodHandle arrayElementSetter(Class<?> arrayClass) throws IllegalArgumentException {  return MethodHandleImpl.makeArrayElementAccessor(arrayClass,true);}  }
class C{  public static void main(String[] args){  AbStorageQuery mAbStorageQuery1=new AbStorageQuery();  mAbStorageQuery1.equals("u_id","1");  mAbStorageQuery1.equals("face_u_id","2");  AbStorageQuery mAbStorageQuery2=new AbStorageQuery();  mAbStorageQuery2.equals("face_u_id","3");  mAbStorageQuery2.equals("u_id","4");  AbStorageQuery mAbStorageQuery=mAbStorageQuery1.or(mAbStorageQuery2);  printLog(mAbStorageQuery);  AbStorageQuery mAbStorageQuery3=new AbStorageQuery();  AbStorageQuery mAbStorageQuery4=new AbStorageQuery();  mAbStorageQuery3.equals("u_id","1");  mAbStorageQuery4.equals("face_u_id","3");  AbStorageQuery mAbStorageQuery5=mAbStorageQuery3.and(mAbStorageQuery4);  printLog(mAbStorageQuery5);  AbStorageQuery mAbStorageQuery6=new AbStorageQuery();  AbStorageQuery mAbStorageQuery7=new AbStorageQuery();  mAbStorageQuery6.lessThan("u_id","1");  mAbStorageQuery7.greaterThanEqualTo("face_u_id","3");  AbStorageQuery mAbStorageQuery8=mAbStorageQuery6.and(mAbStorageQuery7);  printLog(mAbStorageQuery8);  AbStorageQuery mAbStorageQuery9=new AbStorageQuery();  mAbStorageQuery9.in("name",new String[]{"1","2","3","4"});  mAbStorageQuery9.addSort("time",SortOrder.ASC);  mAbStorageQuery9.addSort("state",SortOrder.DESC);  printLog(mAbStorageQuery9);}  }
class C{  public static void addMessage(String clientId,FacesMessage.Severity severity,String key,Object[] params){  FacesContext fc=FacesContext.getCurrentInstance();  verifyViewLocale();  String text=JSFUtils.getText(key,params);  if (!existMessageInList(fc,text)) {    fc.addMessage(clientId,new FacesMessage(severity,text,null));  }}  }
class C{  final public void disable_tracing(){}  }
class C{  public IllegalAccessException(java.lang.String s){  super(s);}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_PrimaryTypeExpression_TAnonymousFormalParameterList_TypeRef_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void recalculateMaxCounts(){  for (int i=0; i < datasets.size(); ++i) {    XYDatasetWithGroups dataset=datasets.get(i);    maxCounts.set(i,calculateMaxCount(dataset));  }}  }
class C{  protected Object deserialize(byte[] payload) throws SerializationException {  return deserialize(false,null,null,payload,null);}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public String toString(){  return tojstring();}  }
class C{  public void addRemoteEntityModifiers(World world,int entID,String mods){  Entity ent=world.getEntityByID(entID);  if (ent != null) {    addEntityModifiersByString((EntityLivingBase)ent,mods);  }}  }
class C{  private void addLenient(String fieldName,String value){  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  void checkEnd(){  this.iter=iterator();  HeaderCard card;  while (this.iter.hasNext()) {    card=this.iter.next();    if (!card.isKeyValuePair() && card.getKey().equals(END.key())) {      this.iter.remove();    }  }  this.iter.add(HeaderCard.saveNewHeaderCard(END.key(),null,false));}  }
class C{  public KmlPlacemark(Marker marker){  this(marker.getPosition());  mName=marker.getTitle();  mDescription=marker.getSnippet();  mVisibility=marker.isEnabled();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return (pluggy != null && pluggy.isDesktopOnly()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public boolean isLongEvent(){  return longEvent;}  }
class C{  public void first(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        break;      }    }    if (ncomponents > 0) {      currentCard=0;      parent.getComponent(0).setVisible(true);      parent.validate();    }  }}  }
class C{  public void removeClassInstructor(ClassInstructor classInstr){  Set s=this.getClasses();  for (Iterator iter=s.iterator(); iter.hasNext(); ) {    ClassInstructor ci=(ClassInstructor)iter.next();    if (ci.getUniqueId().intValue() == classInstr.getUniqueId().intValue()) {      s.remove(ci);      break;    }  }}  }
class C{  private void dispatchUnpress(){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).setPressed(false);  }  setPressed(false);}  }
class C{  private void unpublish(){  Log.i(TAG,"Unpublishing.");  Nearby.Messages.unpublish(mGoogleApiClient,mPubMessage);}  }
class C{  private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){  if (formSpec == null) {    return prefMeasure.sizeOf(component);  } else   if (formSpec.getSize() == Sizes.MINIMUM) {    return minMeasure.sizeOf(component);  } else   if (formSpec.getSize() == Sizes.PREFERRED) {    return prefMeasure.sizeOf(component);  } else {    return Math.min(cellSize,prefMeasure.sizeOf(component));  }}  }
class C{  protected String form(AbstractMatrix1D matrix,int index,Former formatter){  return this.form((DoubleMatrix1D)matrix,index,formatter);}  }
class C{  public void addSerializer(Class cl,Serializer serializer){  _serializerMap.put(cl,serializer);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public void enter(){synchronized (statemachine) {    statemachine.enter();  }}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para.getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para.getParameterAsInt(); else     if (name.equals("DatePromised"))     p_DatePromised=(Timestamp)para.getParameter(); else     if (name.equals("Selection"))     p_Selection="Y".equals(para.getParameter()); else     if (name.equals("IsUnconfirmedInOut"))     p_IsUnconfirmedInOut="Y".equals(para.getParameter()); else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals(para.getParameter()); else     if (name.equals("DocAction"))     p_docAction=(String)para.getParameter(); else     if (name.equals("MovementDate"))     p_DateShipped=(Timestamp)para.getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);    if (p_DateShipped == null) {      m_movementDate=Env.getContextAsDate(getCtx(),"#Date");      if (m_movementDate == null)       m_movementDate=new Timestamp(System.currentTimeMillis());    } else     m_movementDate=p_DateShipped;    if (!DocAction.ACTION_Complete.equals(p_docAction))     p_docAction=DocAction.ACTION_Prepare;  }}  }
class C{  public static String ripExtension(String fileName){  String retString=null;  int extStart=fileName.lastIndexOf('.');  if (extStart == -1)   retString=fileName; else   retString=fileName.substring(0,extStart);  return retString;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @SuppressWarnings("rawtypes") public synchronized Object handleData(Map data,int action,boolean allowChildEvents){  Object result=null;  if (data.containsKey(getKeyAttribute())) {    boolean oldAllowEvents=allowEvents;    allowEvents=allowChildEvents;    ProcessVar dataset=(ProcessVar)get(data.get(getKeyAttribute()));    if (dataset == null) {      dataset=new ProcessVar();      dataset.setKeyAttribute(getKeyAttribute());    }    dataset.putAll(data,action,allowChildEvents);    allowEvents=oldAllowEvents;    result=put(dataset.getKeyValue(),dataset,action);  }  return (result);}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  if (m_Background != null) {    g.setColor(Color.WHITE);    g.clearRect(0,0,getWidth(),getHeight());    int width=m_Background.getWidth(null);    int height=m_Background.getHeight(null);    int x=(getWidth() - width) / 2;    int y=(getHeight() - height) / 2;    g.drawImage(m_Background,x,y,width,height,this);  }}  }
class C{  @Override public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block neighborBlock){  if (this.checkForDrop(worldIn,pos,state) && !func_181088_a(worldIn,pos,state.getValue(FACING).getOpposite())) {    this.dropBlockAsItem(worldIn,pos,state,0);    worldIn.setBlockToAir(pos);  }}  }
class C{  public void snackBar(@StringRes int message,int priority){  snackBar.message(message,priority);}  }
class C{  public HashedBlockInputStream(InputStream inputStream,boolean littleEndian){  this.inputStream=inputStream;  this.littleEndian=littleEndian;}  }
class C{  public void write(final InputStream instr) throws IOException {  if (m_isSaved) {    throw new IllegalStateException(ERR_ALREADY_SAVED);  }  final byte b[]=new byte[512];  int r=instr.read(b);  while (r == 512) {    write(b,0,r);    r=instr.read(b);  }  if (r != -1) {    write(b,0,r);  }}  }
class C{  public static long deleteMsgByType(Context c,String type){  DBProvider provider=DBProvider.getDBProvider(c);  int deleteCount=provider.delete(DBHelp.TABLE_STATISTICS,DBHelp.COLUMN_EVENT_TYPE + "= ?",new String[]{type});  return deleteCount;}  }
class C{  public void clearDiskCache(){  if (null != mImageFileProvider) {    mImageFileProvider.clearCache();  }}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testParallelSenderQueueEventsOverflow() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  Wait.pause(1000);  vm2.invoke(null);  vm3.invoke(null);  int numEventPuts=50;  vm4.invoke(null);  long numOvVm4=(Long)vm4.invoke(null);  long numOvVm5=(Long)vm5.invoke(null);  long numOvVm6=(Long)vm6.invoke(null);  long numOvVm7=(Long)vm7.invoke(null);  long numMemVm4=(Long)vm4.invoke(null);  long numMemVm5=(Long)vm5.invoke(null);  long numMemVm6=(Long)vm6.invoke(null);  long numMemVm7=(Long)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Entries overflown to disk: " + numOvVm4 + ","+ numOvVm5+ ","+ numOvVm6+ ","+ numOvVm7);  LogWriterUtils.getLogWriter().info("Entries in VM: " + numMemVm4 + ","+ numMemVm5+ ","+ numMemVm6+ ","+ numMemVm7);  long totalOverflown=numOvVm4 + numOvVm5 + numOvVm6+ numOvVm7;  assertTrue("Total number of entries overflown to disk should be at least greater than 55",(totalOverflown > 55));  long totalInMemory=numMemVm4 + numMemVm5 + numMemVm6+ numMemVm7;  assertEquals("Total number of entries on disk and in VM is incorrect",(numEventPuts * 2),(totalOverflown + totalInMemory));  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public final CC shrinkY(float w){  ver.setShrink(new Float(w));  return this;}  }
class C{  public VelocimacroFactory(RuntimeServices rs){  this.rsvc=rs;  libModMap=new HashMap();  vmManager=new VelocimacroManager(rsvc);}  }
class C{  public void toString(StringBuffer buffer){  int level;  boolean isLast;  String indent;  int i;  level=getLevel();  isLast=(getNextSibling() == null);  indent=getIndentation(level);  buffer.append(indent);  if (m_Name != null) {    buffer.append("\"");    buffer.append(escape(m_Name));    buffer.append("\" : ");  }  if (isObject()) {    buffer.append("{\n");    for (i=0; i < getChildCount(); i++) {      ((JSONNode)getChildAt(i)).toString(buffer);    }    buffer.append(indent);    buffer.append("}");  } else   if (isArray()) {    buffer.append("[\n");    for (i=0; i < getChildCount(); i++) {      ((JSONNode)getChildAt(i)).toString(buffer);    }    buffer.append(indent);    buffer.append("]");  } else {    if (m_Value == null) {      buffer.append("null");    } else     if (m_Value instanceof String) {      buffer.append("\"");      buffer.append(escape((String)m_Value));      buffer.append("\"");    } else {      buffer.append(m_Value.toString());    }  }  if (!isLast) {    buffer.append(",");  }  buffer.append("\n");}  }
class C{  public TransactionInput addInput(TransactionInput input){  unCache();  input.setParent(this);  inputs.add(input);  adjustLength(inputs.size(),input.length);  return input;}  }
class C{  public void requestOpen(){  mLock.lock();  try {    if (mIsShutdown) {      return;    }    mTargetState=TargetState.OPENED;    update();  }  finally {    mLock.unlock();  }}  }
class C{  public static Test suite(){  return new TestSuite(TestSimpleRandomizer.class);}  }
class C{  public String minWordFrequencyTipText(){  return "Ignore any words that don't occur at least " + "min frequency times in the training data. If periodic " + "pruning is turned on, then the dictionary is pruned "+ "according to this value";}  }
class C{  public double stx(final double x){  if (x >= 0) {    if (x < width)     return x;    return x - width;  }  return x + width;}  }
class C{  protected void AndExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  EqualityExpr(-1);  if ((null != m_token) && tokenIs("and")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_AND);    AndExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  public static boolean isChannelDataMessage(byte[] binMessage){  return (binMessage[0] >> 6 == 0x1);}  }
class C{  public MoveSourceEdit(int offset,int length,MoveTargetEdit target){  this(offset,length);  setTargetEdit(target);}  }
class C{  public static Font createBitmapFont(String name,Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){  Font f=createBitmapFont(bitmap,cutOffsets,charWidth,charsets);  bitmapCache.put(name,f);  return f;}  }
class C{  @Inline @Entrypoint public static void charArrayWrite(char[] ref,int index,char value){  if (NEEDS_CHAR_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_CHAR);    Selected.Mutator.get().charWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public MiningFieldMetaInfo(Element field) throws Exception {  super(field);  String usage=field.getAttribute("usageType");  for (  MiningFieldMetaInfo.Usage u : Usage.values()) {    if (u.toString().equals(usage)) {      m_usageType=u;      break;    }  }  String importance=field.getAttribute("importance");  if (importance.length() > 0) {    m_importance=Double.parseDouble(importance);  }  String outliers=field.getAttribute("outliers");  for (  MiningFieldMetaInfo.Outlier o : Outlier.values()) {    if (o.toString().equals(outliers)) {      m_outlierTreatmentMethod=o;      break;    }  }  if (outliers.length() > 0 && m_outlierTreatmentMethod == Outlier.ASEXTREMEVALUES) {    String lowValue=field.getAttribute("lowValue");    if (lowValue.length() > 0) {      m_lowValue=Double.parseDouble(lowValue);    } else {      throw new Exception("[MiningFieldMetaInfo] as extreme values outlier treatment " + "specified, but no low value defined!");    }    String highValue=field.getAttribute("highValue");    if (highValue.length() > 0) {      m_highValue=Double.parseDouble(highValue);    } else {      throw new Exception("[MiningFieldMetaInfo] as extreme values outlier treatment " + "specified, but no high value defined!");    }  }  String missingReplacement=field.getAttribute("missingValueReplacement");  if (missingReplacement.length() > 0) {    try {      m_missingValueReplacementNumeric=Double.parseDouble(missingReplacement);    } catch (    IllegalArgumentException ex) {      m_missingValueReplacementNominal=missingReplacement;    }    String missingTreatment=field.getAttribute("missingValueTreatment");    for (    MiningFieldMetaInfo.Missing m : Missing.values()) {      if (m.toString().equals(missingTreatment)) {        m_missingValueTreatmentMethod=m;        break;      }    }  }}  }
class C{  public final Builder addItem(final int id,@NonNull final CharSequence title){  bottomSheet.addItem(id,title);  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VERSIONS:  return isSetVersions();}throw new IllegalStateException();}  }
class C{  public static int intPow(int b,int e){  if (e == 0) {    return 1;  }  int result=1;  int currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  public FilterPostingsEnum(PostingsEnum in){  if (in == null) {    throw new NullPointerException("incoming PostingsEnum must not be null");  }  this.in=in;}  }
class C{  public static void copyClose(InputStream in,OutputStream out) throws IOException {  try {    copy(in,out);  }  finally {    IOUtils.closeQuietly(in);    IOUtils.closeQuietly(out);  }}  }
class C{  public void write(char x,int r){  if (r == 8) {    write(x);    return;  }  if (r < 1 || r > 16)   throw new IllegalArgumentException("Illegal value for r = " + r);  if (x >= (1 << r))   throw new IllegalArgumentException("Illegal " + r + "-bit char = "+ x);  for (int i=0; i < r; i++) {    boolean bit=((x >>> (r - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  public static List<String> toString(List<Query> queries,IndexSchema schema){  List<String> out=new ArrayList<>(queries.size());  for (  Query q : queries) {    out.add(QueryParsing.toString(q,schema));  }  return out;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public boolean isLineHeightRelative(int i){  return (masks[i] & LINE_HEIGHT_RELATIVE_MASK) != 0;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  env.error(where,"invalid.term");  type=Type.tError;  return vset;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tTabu list length","L",1,"-L <integer>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tUse arc reversal operation.\n\t(default false)","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return ((InternalEList<?>)getAstStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:  return ((InternalEList<?>)getGenStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return ((InternalEList<?>)getPostponedSubstitutions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean intersects(IHypercube h) throws IllegalArgumentException {  if (dimension != h.dimensionality()) {    throw new IllegalArgumentException("Unable to check containment for hypercubes of different dimensions.");  }  for (int i=1; i <= dimension; i++) {    double innerLeft=h.getLeft(i);    double innerRight=h.getRight(i);    if (innerRight < getLeft(i))     continue;    if (innerLeft > getRight(i))     continue;    return true;  }  return false;}  }
class C{  private void ensureCapacity(int minFree){  if (_outLen + minFree >= _out.length) {    int[] tmp=new int[_out.length + 2000];    System.arraycopy(_out,0,tmp,0,_out.length);    _out=tmp;  }}  }
class C{  public void send(DatagramPacket p,TransportAddress peerAddress) throws StunException {  byte[] pData=p.getData();  int pOffset=p.getOffset();  int pLength=p.getLength();  byte[] data;  if ((pOffset == 0) && (pLength == pData.length))   data=pData; else {    data=new byte[pLength];    System.arraycopy(pData,pOffset,data,0,pLength);  }  if (channelDataIsPreferred && (channelNumber != CHANNEL_NUMBER_NOT_SPECIFIED) && channelNumberIsConfirmed) {    char length=(char)data.length;    int channelDataLength=CHANNELDATA_CHANNELNUMBER_LENGTH + CHANNELDATA_LENGTH_LENGTH + length;    if ((channelData == null) || (channelData.length < channelDataLength)) {      channelData=new byte[channelDataLength];      if (channelDataPacket != null)       channelDataPacket.setData(channelData);    }    channelData[0]=(byte)(channelNumber >> 8);    channelData[1]=(byte)(channelNumber & 0xFF);    channelData[2]=(byte)(length >> 8);    channelData[3]=(byte)(length & 0xFF);    System.arraycopy(data,0,channelData,CHANNELDATA_CHANNELNUMBER_LENGTH + CHANNELDATA_LENGTH_LENGTH,length);    try {      if (channelDataPacket == null) {        channelDataPacket=new DatagramPacket(channelData,0,channelDataLength,turnCandidateHarvest.harvester.stunServer);      } else       channelDataPacket.setData(channelData,0,channelDataLength);      channelDataSocket.send(channelDataPacket);    } catch (    IOException ioex) {      throw new StunException(StunException.NETWORK_ERROR,"Failed to send TURN ChannelData message",ioex);    }  } else {    byte[] transactionID=TransactionID.createNewTransactionID().getBytes();    Indication sendIndication=MessageFactory.createSendIndication(peerAddress,data,transactionID);    sendIndication.setTransactionID(transactionID);    turnCandidateHarvest.harvester.getStunStack().sendIndication(sendIndication,turnCandidateHarvest.harvester.stunServer,turnCandidateHarvest.hostCandidate.getTransportAddress());  }}  }
class C{  public void addMethod(MethodInfo minfo) throws DuplicateMemberException {  testExistingMethod(minfo);  methods.add(minfo);}  }
class C{  private boolean shouldEmitTypedefByName(JSType realType){  return realType.isRecordType() || realType.isTemplatizedType() || realType.isFunctionType();}  }
class C{  public Task<VcenterRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  @DataProvider(name="classProvider") public Object[][] classProvider(){  return TESTING_CLASSES;}  }
class C{  public JInternalFrame createInternalFrame(Icon icon,Integer layer,int width,int height){  JInternalFrame jif=new JInternalFrame();  if (!windowTitleField.getText().equals(getString("InternalFrameDemo.frame_label"))) {    jif.setTitle(windowTitleField.getText() + "  ");  } else {    jif=new JInternalFrame(getString("InternalFrameDemo.frame_label") + " " + windowCount+ "  ");  }  jif.setClosable(windowClosable.isSelected());  jif.setMaximizable(windowMaximizable.isSelected());  jif.setIconifiable(windowIconifiable.isSelected());  jif.setResizable(windowResizable.isSelected());  jif.setBounds(20 * (windowCount % 10),20 * (windowCount % 10),width,height);  jif.setContentPane(new ImageScroller(this,icon,0,windowCount));  windowCount++;  desktop.add(jif,layer);  try {    jif.setSelected(true);  } catch (  java.beans.PropertyVetoException e2) {  }  jif.show();  return jif;}  }
class C{  public void testAuthenticateSpringActiveDirectoryNotFound(){  LdapManager mgr=getLdapAD();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho2");  authenticationInfo.setUserCredentials("archivo_2007k");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10011_NODE_NOT_FOUND_ERROR,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public void onStop(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStop();    }  }}  }
class C{  public static final boolean onlySpaces(String str){  return str.trim().equals("");}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return (m_listenee == null);}  }
class C{  public void activateChild(){  window.initTab(window.getTabIndex(child.getMTab()));  child.activate();  MRole role=MRole.getDefault();  child.query(false,0,role.getMaxQueryRecords());}  }
class C{  public int update(@NotNull SqlQuery query){  return withCurrentTransaction(query,null);}  }
class C{  private static boolean isMoreSpecificType(HeaderElement leftMimeTypeElem,HeaderElement rightMimeTypeElem){  String[] leftMimeType=splitMIMEType(leftMimeTypeElem.getValue());  String[] rightMimeType=splitMIMEType(rightMimeTypeElem.getValue());  if (rightMimeType != null) {    if (rightMimeType[1].equals("*")) {      if (!leftMimeType[1].equals("*")) {        return true;      }    }    if (rightMimeType[0].equals("*")) {      if (!leftMimeType[0].equals("*")) {        return true;      }    }    return false;  } else {    return true;  }}  }
class C{  public void checkShape(AbstractMatrix2D B){  if (columns != B.columns || rows != B.rows)   throw new IllegalArgumentException("Incompatible dimensions: " + toStringShort() + " and "+ B.toStringShort());}  }
class C{  public void clearAttribute(String attr){  attributes.remove(attr);}  }
class C{  private ChromeTab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent,Intent intent){  int position=TabModel.INVALID_TAB_INDEX;  int index=mTabModel.indexOf(parent);  if (index != TabModel.INVALID_TAB_INDEX)   position=index + 1;  return createNewTab(loadUrlParams,type,parent,position,intent);}  }
class C{  @Override public String toString(){  return String.format("Debugger '%s'",m_debugger.getPrintableString());}  }
class C{  public String validateLastPaidDate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  I_HR_EmployeeInsurance employeeInsurance=GridTabWrapper.create(mTab,I_HR_EmployeeInsurance.class);  Timestamp payDate=employeeInsurance.getPayDate();  Timestamp lastPaidDate=(Timestamp)value;  if (payDate == null)   return "";  if (lastPaidDate.before(payDate))   return ""; else {    String message=Msg.getMsg(Env.getCtx(),"Invalid") + "  " + Msg.parseTranslation(ctx,"@PayDate@");    employeeInsurance.setDateLastPaid((Timestamp)mField.getOldValue());    mTab.fireDataStatusEEvent(message,null,false);  }  return "";}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0 && z2 == 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BoundingBox translate(double x,double y,double z){  this.center.x+=x;  this.center.y+=y;  this.center.z+=z;  this.bottomCenter.x+=x;  this.bottomCenter.y+=y;  this.bottomCenter.z+=z;  this.topCenter.x+=x;  this.topCenter.y+=y;  this.topCenter.z+=z;  return this;}  }
class C{  public void changeCIFSShare(String shareName,String attr,String value){  Map<String,String> attrs=Maps.newHashMap();  attrs.put(attr,value);  changeCIFSShare(shareName,attrs);}  }
class C{  public final void testGetViewTypeCount(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertEquals(1,proxySpinnerAdapter.getViewTypeCount());}  }
class C{  public TsGFciRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x,long length) throws SQLException {  updateClob(columnLabel,x,length);}  }
class C{  public XOR96(){  super();}  }
class C{  public int dimensionality(){  return dimension;}  }
class C{  public static RatNum parse(String ratStr){  int slashLoc=ratStr.indexOf('/');  if (ratStr.equals("NaN")) {    return new RatNum(1,0);  } else   if (slashLoc == -1) {    return new RatNum(Integer.parseInt(ratStr));  } else {    int n=Integer.parseInt(ratStr.substring(0,slashLoc));    int d=Integer.parseInt(ratStr.substring(slashLoc + 1,ratStr.length()));    return new RatNum(n,d);  }}  }
class C{  public Integer call() throws Exception {  for (int i=k + 1 + threadNumber; i < U.rows(); i+=LogicalCores) {    double tmp=U.matrix[i][k] / U.matrix[k][k];    L.matrix[i][k]=Double.isNaN(tmp) ? 0.0 : tmp;    U.matrix[i][k + 1]-=L.matrix[i][k] * U.matrix[k][k + 1];    if (Math.abs(U.matrix[i][k + 1]) > largestSeen) {      largestSeen=Math.abs(U.matrix[i][k + 1]);      largestIndex=i;    }    for (int j=k + 2; j < U.cols(); j++) {      U.matrix[i][j]-=L.matrix[i][k] * U.matrix[k][j];    }  }  return largestIndex;}  }
class C{  public static List<Map<String,String>> listCountByFeatureForType(String productFeatureTypeId,HttpSession session,Delegator delegator){  String visitId=VisitHandler.getVisitId(session);  ProductSearchContext productSearchContext=new ProductSearchContext(delegator,visitId);  List<ProductSearchConstraint> productSearchConstraintList=ProductSearchOptions.getConstraintList(session);  if (UtilValidate.isNotEmpty(productSearchConstraintList)) {    productSearchContext.addProductSearchConstraints(productSearchConstraintList);  }  productSearchContext.finishKeywordConstraints();  productSearchContext.finishCategoryAndFeatureConstraints();  DynamicViewEntity dynamicViewEntity=productSearchContext.dynamicViewEntity;  List<EntityCondition> entityConditionList=productSearchContext.entityConditionList;  dynamicViewEntity.addMemberEntity("PFAC","ProductFeatureAppl");  dynamicViewEntity.addAlias("PFAC","pfacProductFeatureId","productFeatureId",null,null,Boolean.TRUE,null);  dynamicViewEntity.addAlias("PFAC","pfacFromDate","fromDate",null,null,null,null);  dynamicViewEntity.addAlias("PFAC","pfacThruDate","thruDate",null,null,null,null);  dynamicViewEntity.addAlias("PFAC","featureCount","productId",null,null,null,"count-distinct");  dynamicViewEntity.addViewLink("PROD","PFAC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));  entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("pfacThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("pfacThruDate",EntityOperator.GREATER_THAN,UtilDateTime.nowTimestamp())));  entityConditionList.add(EntityCondition.makeCondition("pfacFromDate",EntityOperator.LESS_THAN,UtilDateTime.nowTimestamp()));  dynamicViewEntity.addMemberEntity("PFC","ProductFeature");  dynamicViewEntity.addAlias("PFC","pfcProductFeatureTypeId","productFeatureTypeId",null,null,Boolean.TRUE,null);  dynamicViewEntity.addAlias("PFC","pfcDescription","description",null,null,Boolean.TRUE,null);  dynamicViewEntity.addViewLink("PFAC","PFC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));  entityConditionList.add(EntityCondition.makeCondition("pfcProductFeatureTypeId",EntityOperator.EQUALS,productFeatureTypeId));  EntityListIterator eli=null;  try {    eli=EntityQuery.use(delegator).select(UtilMisc.toSet("pfacProductFeatureId","featureCount","pfcDescription","pfcProductFeatureTypeId")).from(dynamicViewEntity).where(entityConditionList).orderBy(productSearchContext.orderByList).cursorScrollInsensitive().queryIterator();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error in product search",module);    return null;  }  List<Map<String,String>> featureCountList=FastList.newInstance();  GenericValue searchResult=null;  while ((searchResult=eli.next()) != null) {    featureCountList.add(UtilMisc.<String,String>toMap("productFeatureId",(String)searchResult.get("pfacProductFeatureId"),"productFeatureTypeId",(String)searchResult.get("pfcProductFeatureTypeId"),"description",(String)searchResult.get("pfcDescription"),"featureCount",Long.toString((Long)searchResult.get("featureCount"))));  }  if (eli != null) {    try {      eli.close();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error closing ProductSearch EntityListIterator");    }  }  return featureCountList;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.766 -0500",hash_original_method="8F59473C5B0D895146F3319CE625D311",hash_generated_method="AAA96554D2828DF42DAFBE5212AB61A4") public void clearUserSslPrefTable(){  mSslErrorHandler.clear();}  }
class C{  private static String readHashFile(File hashfile,Map<String,String> map){  try {    Document doc=Xml.loadDocument(hashfile);    XPath xpath=XPathFactory.newInstance().newXPath();    String rev=(String)xpath.evaluate("/hashfile/revision",doc,XPathConstants.STRING);    NodeList fileNodes=(NodeList)xpath.evaluate("/hashfile/files/file",doc,XPathConstants.NODESET);    for (int i=0; i < fileNodes.getLength(); i++) {      Node fileNode=fileNodes.item(i);      String path=(String)xpath.evaluate("path",fileNode,XPathConstants.STRING);      String hash=(String)xpath.evaluate("hash",fileNode,XPathConstants.STRING);      map.put(path,hash);    }    return rev;  } catch (  Exception e) {    Log.error("Cannot read hash file",e);    return "";  }}  }
class C{  private void updateClusterDocument(final ClusterDeleteTask currentState) throws Throwable {  ClusterService.State patchDocument=new ClusterService.State();  patchDocument.clusterState=ClusterState.PENDING_DELETE;  sendRequest(HostUtils.getCloudStoreHelper(this).createPatch(getClusterDocumentLink(currentState)).setBody(patchDocument).setCompletion(null));}  }
class C{  public void testSimpleCopyFile() throws Exception {  String fileName="simpleCopy1";  String fileContents="@foo@";  File file1=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file1));  testCopy(configFile,fileName,"@foo@");}  }
class C{  public FunctionblockModel basicGetModel(){  return model;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MULTILINE_COMMENT___MULTILINE_COMMENT_1:    setMultilineComment_1(MULTILINE_COMMENT_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public void start() throws Throwable {  ServiceHostUtils.startServices(photonControllerXenonHost,getFactoryServices());  photonControllerXenonHost.addPrivilegedService(CopyStateTaskService.class);  startWorkQueueServices();}  }
class C{  private static void printMethodMessage(NormalMethod method,OptOptions options){  if (options.PRINT_METHOD || options.PRINT_INLINE_REPORT) {    VM.sysWrite("-methodOpt " + method.getDeclaringClass() + ' '+ method.getName()+ ' '+ method.getDescriptor()+ " \n");  }}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  public void test_read$BII_Exception() throws IOException {  DigestInputStream is=new DigestInputStream(inStream,digest);  byte[] buf=null;  try {    is.read(buf,-1,0);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  buf=new byte[1000];  try {    is.read(buf,-1,0);    fail("Test 2: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,0,-1);    fail("Test 3: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,-1,-1);    fail("Test 4: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,0,1001);    fail("Test 5: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,1001,0);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,500,501);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  is.close();  Support_ASimpleInputStream sis=new Support_ASimpleInputStream(true);  is=new DigestInputStream(sis,digest);  try {    is.read(buf,0,100);    fail("Test 9: IOException expected.");  } catch (  IOException e) {  }  sis.throwExceptionOnNextUse=false;  is.close();}  }
class C{  private void displayAllStringDefinedInStringXml(){  SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_1);  List<String> list=new ArrayList<>();  list.add(getString(R.string.gems_logo));  String text=TextUtils.join(" ",list);  textView.setText(text);}  }
class C{  void writeAndReadSqrt(double x){  DD xdd=DD.valueOf(x);  DD xSqrt=xdd.sqrt();  String s=xSqrt.toString();  DD xSqrt2=DD.parse(s);  DD xx=xSqrt2.multiply(xSqrt2);  String xxStr=xx.toString();  DD xx2=DD.parse(xxStr);  double err=Math.abs(xx2.doubleValue() - x);  assertTrue(err < 1e-10);}  }
class C{  private void enqueueSessionEvent(final IoSessionEvent evt){synchronized (sessionEventsQueue) {    logger.debug("Enqueuing event: {}",evt);    sessionEventsQueue.offer(evt);  }}  }
class C{  public ExtendedNode remove(ExtendedNode n){  if (n == firstChild) {    if (n == lastChild) {      firstChild=null;      lastChild=null;      children--;      if (n.getNodeType() == Node.ELEMENT_NODE) {        elementChildren--;      }      return n;    }    firstChild=(ExtendedNode)firstChild.getNextSibling();    firstChild.setPreviousSibling(null);    n.setNextSibling(null);    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    children--;    return n;  }  if (n == lastChild) {    lastChild=(ExtendedNode)lastChild.getPreviousSibling();    lastChild.setNextSibling(null);    n.setPreviousSibling(null);    children--;    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    return n;  }  ExtendedNode ps=(ExtendedNode)n.getPreviousSibling();  ExtendedNode ns=(ExtendedNode)n.getNextSibling();  if ((ps.getNextSibling() == n) && (ns.getPreviousSibling() == n) && (ps.getParentNode() == n.getParentNode())&& (ns.getParentNode() == n.getParentNode())) {    ps.setNextSibling(ns);    ns.setPreviousSibling(ps);    n.setPreviousSibling(null);    n.setNextSibling(null);    children--;    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    return n;  }  throw createDOMException(DOMException.NOT_FOUND_ERR,"child.missing",new Object[]{new Integer(n.getNodeType()),n.getNodeName()});}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public int compareTo(final MutableDouble other){  return Double.compare(this.value,other.value);}  }
class C{  public IconicsDrawable iconOffsetXPx(int iconOffsetX){  this.mIconOffsetX=iconOffsetX;  return this;}  }
class C{  public KernelPCA(KernelTrick k,int dimensions){  this(k,dimensions,1000,SamplingMethod.UNIFORM);}  }
class C{  private void splitCurrentLabel(Label alternateSuccessor,List<Label> catchLabels){  Label newLabel=new Label();  adopt(newLabel);  currentLabel.primarySuccessor=newLabel;  currentLabel.alternateSuccessor=alternateSuccessor;  currentLabel.catchLabels=catchLabels;  currentLabel=newLabel;  currentLabel.marked=true;}  }
class C{  public TextCharacter withModifier(SGR modifier){  if (modifiers.contains(modifier)) {    return this;  }  EnumSet<SGR> newSet=EnumSet.copyOf(this.modifiers);  newSet.add(modifier);  return new TextCharacter(character,foregroundColor,backgroundColor,newSet);}  }
class C{  private boolean advanceToEligibleSample(){  boolean haveNext=rollingBuffer.peekSample(sampleInfoHolder);  if (needKeyframe) {    while (haveNext && (sampleInfoHolder.flags & C.SAMPLE_FLAG_SYNC) == 0) {      rollingBuffer.skipSample();      haveNext=rollingBuffer.peekSample(sampleInfoHolder);    }  }  if (!haveNext) {    return false;  }  if (spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs) {    return false;  }  return true;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  private static int appendArrayTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer,boolean isVarArgs){  int length=string.length;  if (start >= length - 1) {    throw new IllegalArgumentException();  }  char c=string[start];  if (c != C_ARRAY) {    throw new IllegalArgumentException();  }  int index=start;  c=string[++index];  while (c == C_ARRAY) {    if (index >= length - 1) {      throw new IllegalArgumentException();    }    c=string[++index];  }  int e=appendTypeSignature(string,index,fullyQualifyTypeNames,buffer);  for (int i=1, dims=index - start; i < dims; i++) {    buffer.append('[').append(']');  }  if (isVarArgs) {    buffer.append('.').append('.').append('.');  } else {    buffer.append('[').append(']');  }  return e;}  }
class C{  @Override public synchronized void saveAndIncrement(T data){  Xor<Void,T> oldData=this.data;  VersionedKey newVersionedKey=increment();  logger.info("Saving data with key {}, new version is {}",key,newVersionedKey.toJson());  try {    writer.putSync(newVersionedKey.toJson(),new Data(data,new Date(),newVersionedKey.toJson())).flatMap(null).peek(null);  }  finally {    versionedKey=newVersionedKey.toJson();  }}  }
class C{  public final boolean waitForReplies(long msecs) throws InterruptedException, ReplyException {  return waitForReplies(msecs,getLatch(),true);}  }
class C{  public IncubationQueue(){  this(false);}  }
class C{  public void adjust(long delta){  for (  TimeWindowPair data : window) {    data.setTimestamp(data.getTimestamp() + delta);  }}  }
class C{  public double linearDistanceSquared(final double x,final double y,final double z){  double deltaX=this.x - x;  double deltaY=this.y - y;  double deltaZ=this.z - z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  public static String sign(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function sign : " + params.length);  return "sign(" + params[0] + ")";}  }
class C{  public void addInstanceof(String classname){  addOpcode(INSTANCEOF);  addIndex(constPool.addClassInfo(classname));}  }
class C{  public SqlMigration(String path){  this.path=path;}  }
class C{  protected void constructHops(){  try {    dmlTranslator.constructHops(dmlProgram);  } catch (  LanguageException e) {    throw new MLContextException("Exception occurred while constructing HOPS (high-level operators)",e);  }catch (  ParseException e) {    throw new MLContextException("Exception occurred while constructing HOPS (high-level operators)",e);  }}  }
class C{  public void commit(){  if (durableQueues) {    for (    File file : goodSet) {      if (!file.renameTo(new File(file.getPath() + ".good"))) {        log.error("File rename failed: file=" + file + " (good)");      }    }  }  failSet.clear();  goodSet.clear();}  }
class C{  public Object clone() throws CloneNotSupportedException {  TemplateSubPatternAssociation tspa=(TemplateSubPatternAssociation)super.clone();  tspa.m_next=null;  return tspa;}  }
class C{  public boolean isClosed(){  return refCount.get() <= 0;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  @IsAllowed(value=Operation.READ,resourceType=ResourceType.MILESTONE) public static Result milestone(String userName,String projectName,Long id){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  Milestone milestone=Milestone.findById(id);  String paramState=request().getQueryString("state");  State state=State.getValue(paramState);  UserApp.currentUser().visits(project);  return ok(view.render(milestone.title,milestone,project,state));}  }
class C{  private static int rows(){  return seeds.length / COLUMNS;}  }
class C{  @Override public boolean isSupported(){  final PackageInfo packageInfo=PackageManagers.getPackageInfo(activity,UBER_PACKAGE_NAME);  return (packageInfo != null) && (packageInfo.versionCode >= MIN_VERSION_SUPPORTED) && appProtocol.validateSignature(activity,UBER_PACKAGE_NAME);}  }
class C{  public static Object[] listToArray(Collection<?> c){  if (!isEmpty(c)) {    return c.toArray();  }  return null;}  }
class C{  public String optString(int index){  return optString(index,"");}  }
class C{  protected Object evaluateSingle(StructuredContent element,String expr){  return null;}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public static int extractLowSignedNibble(int value){  return (value << 28) >> 28;}  }
class C{  public static double interpolantSmoothed(double interpolant,int smoothingIterations){  double smoothed=interpolant;  for (int i=0; i < smoothingIterations; i++) {    smoothed=smoothed * smoothed * (3.0 - 2.0 * smoothed);  }  return smoothed;}  }
class C{  public static byte[] generateWindowNaf(int width,BigInteger k){  if (width == 2) {    return generateNaf(k);  }  if (width < 2 || width > 8) {    throw new IllegalArgumentException("'width' must be in the range [2, 8]");  }  if (k.signum() == 0) {    return EMPTY_BYTES;  }  byte[] wnaf=new byte[k.bitLength() + 1];  int pow2=1 << width;  int mask=pow2 - 1;  int sign=pow2 >>> 1;  boolean carry=false;  int length=0, pos=0;  while (pos <= k.bitLength()) {    if (k.testBit(pos) == carry) {      ++pos;      continue;    }    k=k.shiftRight(pos);    int digit=k.intValue() & mask;    if (carry) {      ++digit;    }    carry=(digit & sign) != 0;    if (carry) {      digit-=pow2;    }    length+=(length > 0) ? pos - 1 : pos;    wnaf[length++]=(byte)digit;    pos=width;  }  if (wnaf.length > length) {    wnaf=trim(wnaf,length);  }  return wnaf;}  }
class C{  public void requestFunctionNames(int moduleId,int lineNbr,int isolateId) throws VersionException, NoResponseException {  if (m_manager.getVersion() >= 9) {    DMessage dm=DMessageCache.alloc(8);    dm.setType(DMessage.OutGetFncNames);    dm.setTargetIsolate(isolateId);    dm.putDWord(moduleId);    dm.putDWord(lineNbr);    if (!simpleRequestResponseMessage(dm,DMessage.InGetFncNames))     throw new NoResponseException(0);  } else {    throw new VersionException();  }}  }
class C{  public static boolean isEnterpriseEdition(String serverVersion){  return serverVersion.contains("enterprise") || serverVersion.contains("commercial") || serverVersion.contains("advanced");}  }
class C{  public Node adoptNode(Node node){  if (!(node instanceof NodeImpl)) {    return null;  }  NodeImpl nodeImpl=(NodeImpl)node;switch (nodeImpl.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  if (attr.ownerElement != null) {    attr.ownerElement.removeAttributeNode(attr);  }break;case Node.DOCUMENT_FRAGMENT_NODE:case Node.ENTITY_REFERENCE_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:case Node.COMMENT_NODE:case Node.ELEMENT_NODE:break;case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot adopt nodes of type " + nodeImpl.getNodeType());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}Node parent=nodeImpl.getParentNode();if (parent != null) {parent.removeChild(nodeImpl);}changeDocumentToThis(nodeImpl);notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED,node,null);return nodeImpl;}  }
class C{  @Provides @Config("braintreeMerchantAccountIds") public static ImmutableMap<CurrencyUnit,String> provideBraintreeMerchantAccountId(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return ImmutableMap.of(CurrencyUnit.USD,"charlestonregistryUSD",CurrencyUnit.JPY,"charlestonregistryJPY");default :  return ImmutableMap.of(CurrencyUnit.USD,"google",CurrencyUnit.JPY,"google-jpy");}}  }
class C{  private static synchronized void cleanup(Connection C){  logger.trace("cleanup() -->entry");  if (C != null) {    logger.trace("cleanup() --> Connection.close()");    try {      C.close();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called Connection.close()",t);    }  }  logger.trace("cleanup() <--exit");}  }
class C{  public static byte[] flatten(final ConditionNode root){  return ByteHelpers.toArray(flatten(root,NodeIdCollector.getNodeIds(root)));}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int cLength=mDataset.getCategoriesCount();  String[] categories=new String[cLength];  for (int category=0; category < cLength; category++) {    categories[category]=mDataset.getCategory(category);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  mStep=SHAPE_WIDTH * 3 / 4;  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  double rCoef=0.35 * mRenderer.getScale();  double decCoef=0.2 / cLength;  int radius=(int)(mRadius * rCoef);  if (autoCalculateCenter || mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (autoCalculateCenter || mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  List<Rectangle2D> prevLabelsBounds=new ArrayList<Rectangle2D>();  for (int category=0; category < cLength; category++) {    int sLength=mDataset.getItemCount(category);    double total=0;    String[] titles=new String[sLength];    for (int i=0; i < sLength; i++) {      total+=mDataset.getValues(category)[i];      titles[i]=mDataset.getTitles(category)[i];    }    float currentAngle=mRenderer.getStartAngle();    Rectangle2D oval=PkgUtils.makeRect(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    for (int i=0; i < sLength; i++) {      paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());      float value=(float)mDataset.getValues(category)[i];      float angle=(float)(value / total * 360);      canvas.drawArc(oval,currentAngle,angle,true,paint);      drawLabel(canvas,mDataset.getTitles(category)[i],mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);      currentAngle+=angle;    }    radius-=(int)mRadius * decCoef;    shortRadius-=mRadius * decCoef - 2;    if (mRenderer.getBackgroundColor() != 0) {      paint.setColor(mRenderer.getBackgroundColor());    } else {      paint.setColor(ColorUtil.WHITE);    }    paint.setStyle(Style.FILL);    oval=PkgUtils.makeRect(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    canvas.drawArc(oval,0,360,true,paint);    radius-=1;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  protected void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(CSS_RANGEMARKER)) {    final CSSClass rcls=new CSSClass(this,CSS_RANGEMARKER);    final StyleLibrary style=context.getStyleLibrary();    rcls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION_ACTIVE));    rcls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION_ACTIVE));    svgp.addCSSClassOrLogError(rcls);  }}  }
class C{  public static void validate(File file) throws IOException {  validate(file,computeDigest(file));}  }
class C{  protected HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  void unregister(){  unregistering=true;}  }
class C{  @Override public void write(byte[] buffer,int off,int nbytes) throws IOException {  super.write(buffer,off,nbytes);  crc.update(buffer,off,nbytes);}  }
class C{  public RocksDbKeyValueReader(String storeName,String dbPath,Config config){  JavaStorageConfig storageConfig=new JavaStorageConfig(config);  JavaSerializerConfig serializerConfig=new JavaSerializerConfig(config);  keySerde=getSerdeFromName(storageConfig.getStorageKeySerde(storeName),serializerConfig);  valueSerde=getSerdeFromName(storageConfig.getStorageMsgSerde(storeName),serializerConfig);  ArrayList<TaskName> taskNameList=new ArrayList<TaskName>();  taskNameList.add(new TaskName("read-rocks-db"));  SamzaContainerContext samzaContainerContext=new SamzaContainerContext(0,config,taskNameList);  Options options=RocksDbOptionsHelper.options(config,samzaContainerContext);  RocksDB.loadLibrary();  try {    db=RocksDB.openReadOnly(options,dbPath);  } catch (  RocksDBException e) {    throw new SamzaException("can not open the rocksDb in " + dbPath,e);  }}  }
class C{  public static BufferedImage readRGBImageFromCMYK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=createNativeJPEGReader();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  BufferedImage image=createRGBImageFromCMYK(raster,cmykProfile);  return image;}  }
class C{  public UserDeletionConstraintException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private Node deleteMin(Node x){  if (x.left == null)   return x.right;  x.left=deleteMin(x.left);  x.size=1 + size(x.left) + size(x.right);  x.height=1 + Math.max(height(x.left),height(x.right));  return balance(x);}  }
class C{  void selectServiceOwnerAndSynchState(Service s,Operation op,boolean isFactorySync){  CompletionHandler c=null;  Operation selectOwnerOp=Operation.createPost(null).setExpiration(op.getExpirationMicrosUtc()).setCompletion(c);  this.host.selectOwner(s.getPeerNodeSelectorPath(),s.getSelfLink(),selectOwnerOp);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe,final int maxResultSize){  if (binaryData == null || binaryData.length == 0) {    return binaryData;  }  final Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe);  final long len=b64.getEncodedLength(binaryData);  if (len > maxResultSize) {    throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of "+ maxResultSize);  }  return b64.encode(binaryData);}  }
class C{  public void stopWaveDetection(WaveListener waveListener){  stopLibrarySensorDetection(waveListener);}  }
class C{  private void tallyStatesAndRules(Tree<StateSet> bestStateSetTree){  if (bestStateSetTree.isLeaf() || bestStateSetTree.isPreTerminal())   return;  String stateString=getStateString(bestStateSetTree);  stateCounter.incrementCount(stateString,1);  String ruleString=stateString + "->";  for (  Tree<StateSet> child : bestStateSetTree.getChildren()) {    tallyStatesAndRules(child);    ruleString+="|" + getStateString(child);  }  ruleCounter.incrementCount(ruleString,1);}  }
class C{  public ProcessOrder updateInitStep(long processOrderId,long processStepId) throws PortalException, SystemException {  ProcessOrder order=processOrderPersistence.fetchByPrimaryKey(processOrderId);  order.setProcessStepId(processStepId);  processOrderPersistence.update(order);  return order;}  }
class C{  public static <T>T selectOne(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {  List<T> resultList=JdbcUtils.select(connection,rawSqlQuery,rowProcessor,parameters);  if (resultList.isEmpty()) {    return null;  } else   if (resultList.size() == 1) {    return resultList.get(0);  } else {    throw new SQLException(String.format("Too many rows returned: %d",resultList.size()));  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomDetailForm roomDetailForm=(RoomDetailForm)form;  MessageResources rsc=getResources(request);  String doit=roomDetailForm.getDoit();  if (doit != null) {    if (doit.equals(rsc.getMessage("button.delete"))) {      if ("y".equals(request.getParameter("confirm"))) {        doDelete(roomDetailForm,request);        return mapping.findForward("showRoomList");      }    }    if (doit.equals(rsc.getMessage("button.returnToRoomList"))) {      if (roomDetailForm.getId() != null)       request.setAttribute("hash","A" + roomDetailForm.getId());      return mapping.findForward("showRoomList");    }    if (doit.equals(rsc.getMessage("button.modifyRoom"))) {      return mapping.findForward("showEditRoom");    }    if (doit.equals(rsc.getMessage("button.modifyRoomDepts"))) {      response.sendRedirect(response.encodeURL("gwt.jsp?page=roomavailability&id=" + roomDetailForm.getId()));      return null;    }    if (doit.equals("Edit Event Availability")) {      response.sendRedirect(response.encodeURL("gwt.jsp?page=roomavailability&events=1&id=" + roomDetailForm.getId()));      return null;    }    if (doit.equals("Pictures")) {      response.sendRedirect(response.encodeURL("gwt.jsp?page=roompictures&id=" + roomDetailForm.getId()));      return null;    }    if (doit.equals(rsc.getMessage("button.modifyRoomGroups"))) {      return mapping.findForward("showEditRoomGroup");    }    if (doit.equals(rsc.getMessage("button.modifyRoomFeatures"))) {      return mapping.findForward("showEditRoomFeature");    }    if (doit.equals(rsc.getMessage("button.modifyRoomPreference")) || doit.equals(rsc.getMessage("button.addRoomPreference"))) {      return mapping.findForward("showEditRoomPref");    }    if (doit.equals(rsc.getMessage("button.nextRoom"))) {      response.sendRedirect(response.encodeURL("roomDetail.do?id=" + roomDetailForm.getNext()));      return null;    }    if (doit.equals(rsc.getMessage("button.previousRoom"))) {      response.sendRedirect(response.encodeURL("roomDetail.do?id=" + roomDetailForm.getPrevious()));      return null;    }  }  if (request.getParameter("id") == null && roomDetailForm.getId() == null)   return mapping.findForward("showRoomList");  Long id=Long.valueOf(request.getParameter("id") != null ? request.getParameter("id") : roomDetailForm.getId());  sessionContext.checkPermission(id,"Location",Right.RoomDetail);  LocationDAO ldao=new LocationDAO();  Location location=ldao.get(id);  if (location instanceof Room) {    roomDetailForm.setNonUniv(false);  } else {    roomDetailForm.setNonUniv(true);  }  roomDetailForm.setPrevious(Navigation.getPrevious(sessionContext,Navigation.sInstructionalOfferingLevel,id));  roomDetailForm.setNext(Navigation.getNext(sessionContext,Navigation.sInstructionalOfferingLevel,id));  BackTracker.markForBack(request,"roomDetail.do?id=" + id,location.getLabel(),true,false);  boolean timeVertical=CommonValues.VerticalGrid.eq(UserProperty.GridOrientation.get(sessionContext.getUser()));  RequiredTimeTable rtt=location.getRoomSharingTable(sessionContext.getUser());  rtt.getModel().setDefaultSelection(UserProperty.GridSize.get(sessionContext.getUser()));  roomDetailForm.setSharingTable(rtt.print(false,timeVertical));  Vector<Department> depts=new Vector<Department>();  for (  RoomDept rd : location.getRoomDepts())   depts.add(rd.getDepartment());  Collections.sort(depts);  Vector prefs=new Vector(depts.size());  for (Iterator<Department> i=depts.iterator(); i.hasNext(); ) {    Department d=i.next();    PreferenceLevel pref=PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral);    Set roomPrefs=d.getEffectiveRoomPreferences();    for (Iterator j=roomPrefs.iterator(); j.hasNext(); ) {      RoomPref rp=(RoomPref)j.next();      if (rp.getRoom().equals(location)) {        pref=rp.getPrefLevel();        break;      }    }    if (pref.getPrefProlog().equals(PreferenceLevel.sNeutral))     i.remove(); else     prefs.addElement(pref);  }  roomDetailForm.setDepts(depts);  roomDetailForm.setRoomPrefs(prefs);  LookupTables.setupPrefLevels(request);  for (  ExamType type : ExamType.findAllUsed(sessionContext.getUser().getCurrentAcademicSessionId()))   roomDetailForm.setExamEnabled(type.getUniqueId().toString(),location.getExamTypes().contains(type));  roomDetailForm.setExamCapacity(location.getExamCapacity());  for (  ExamType type : ExamType.findAllUsed(sessionContext.getUser().getCurrentAcademicSessionId())) {    if (type.getType() == ExamType.sExamTypeMidterm) {      MidtermPeriodPreferenceModel epx=new MidtermPeriodPreferenceModel(location.getSession(),type);      epx.load(location);      epx.setName("mp" + type.getUniqueId());      request.setAttribute("PeriodPrefs" + type.getUniqueId(),epx.print(false));    } else {      PeriodPreferenceModel px=new PeriodPreferenceModel(location.getSession(),type.getUniqueId());      px.load(location);      px.setAllowRequired(false);      RequiredTimeTable rttPx=new RequiredTimeTable(px);      rttPx.setName("PeriodPrefs" + type.getUniqueId());      request.setAttribute("PeriodPrefs" + type.getUniqueId(),rttPx.print(false,timeVertical,true,false));    }  }  roomDetailForm.setCapacity(location.getCapacity());  roomDetailForm.setCoordinateX(location.getCoordinateX());  roomDetailForm.setCoordinateY(location.getCoordinateY());  roomDetailForm.setArea(location.getArea() == null ? null : new DecimalFormat(ApplicationProperty.RoomAreaUnitsFormat.value()).format(location.getArea()));  roomDetailForm.setIgnoreTooFar(location.isIgnoreTooFar() == null ? false : location.isIgnoreTooFar().booleanValue());  roomDetailForm.setIgnoreRoomCheck(location.isIgnoreRoomCheck().booleanValue());  roomDetailForm.setGlobalFeatures(new TreeSet(location.getGlobalRoomFeatures()));  roomDetailForm.setDepartmentFeatures(new TreeSet(location.getDepartmentRoomFeatures()));  for (Iterator i=roomDetailForm.getDepartmentFeatures().iterator(); i.hasNext(); ) {    DepartmentRoomFeature drf=(DepartmentRoomFeature)i.next();    boolean skip=true;    for (Iterator j=location.getRoomDepts().iterator(); j.hasNext(); ) {      RoomDept rd=(RoomDept)j.next();      if (drf.getDepartment().equals(rd.getDepartment())) {        skip=false;        break;      }    }    if (skip)     i.remove();  }  for (  LocationPicture picture : new TreeSet<LocationPicture>(location.getPictures()))   roomDetailForm.getPictures().add("picture?id=" + picture.getUniqueId());  roomDetailForm.setGroups(new TreeSet(location.getRoomGroups()));  for (Iterator i=roomDetailForm.getGroups().iterator(); i.hasNext(); ) {    RoomGroup rg=(RoomGroup)i.next();    if (rg.isGlobal())     continue;    boolean skip=true;    for (Iterator j=location.getRoomDepts().iterator(); j.hasNext(); ) {      RoomDept rd=(RoomDept)j.next();      if (rg.getDepartment().equals(rd.getDepartment())) {        skip=false;        break;      }    }    if (skip)     i.remove();  }  if (location instanceof Room) {    Room r=(Room)location;    roomDetailForm.setName(r.getLabel());  } else   if (location instanceof NonUniversityLocation) {    NonUniversityLocation nonUnivLocation=(NonUniversityLocation)location;    roomDetailForm.setName(nonUnivLocation.getName());  } else {    ActionMessages errors=new ActionMessages();    errors.add("roomDetail",new ActionMessage("errors.lookup.notFound","Room"));    saveErrors(request,errors);  }  roomDetailForm.setExternalId(location.getExternalUniqueId());  roomDetailForm.setType(location.getRoomType().getUniqueId());  roomDetailForm.setTypeName(location.getRoomType().getLabel());  for (  RoomDept rd : location.getRoomDepts())   if (rd.isControl().booleanValue())   roomDetailForm.setControl(rd.getDepartment().getUniqueId().toString());  roomDetailForm.setEventDepartment(location.getEventDepartment() == null ? null : location.getEventDepartment().getUniqueId().toString());  roomDetailForm.setBreakTime(location.getEffectiveBreakTime() == 0 && location.getBreakTime() == null ? "" : String.valueOf(location.getEffectiveBreakTime()) + (location.getBreakTime() == null ? " <i>(Default)</i>" : ""));  roomDetailForm.setEventStatus(location.getEffectiveEventStatus().toString() + (location.getEventStatus() == null ? " <i>(Default)</i>" : ""));  roomDetailForm.setNote(location.getNote() == null ? "" : location.getNote());  EditRoomAction.setupDepartments(request,sessionContext,location);  LookupTables.setupExamTypes(request,sessionContext.getUser().getCurrentAcademicSessionId());  return mapping.findForward("showRoomDetail");}  }
class C{  private static ArrayMap<Triangle,Array<Edge>> createSharedEdgesMap(Array<IndexConnection> indexConnections,Array<Triangle> triangles,Vector3[] vertexVectors){  ArrayMap<Triangle,Array<Edge>> connectionMap=new ArrayMap<Triangle,Array<Edge>>();  connectionMap.ordered=true;  for (  Triangle tri : triangles) {    connectionMap.put(tri,new Array<Edge>());  }  for (  IndexConnection i : indexConnections) {    Triangle fromNode=triangles.get(i.fromTriIndex);    Triangle toNode=triangles.get(i.toTriIndex);    Vector3 edgeVertexA=vertexVectors[i.edgeVertexIndex1];    Vector3 edgeVertexB=vertexVectors[i.edgeVertexIndex2];    Edge edge=new Edge(fromNode,toNode,edgeVertexA,edgeVertexB);    connectionMap.get(fromNode).add(edge);    fromNode.connections.add(edge);  }  return connectionMap;}  }
class C{  public boolean equals(XObject obj2){  if (this == obj2) {    return true;  }  if (obj2.getType() == XObject.CLASS_NUMBER)   return obj2.equals(this);  String str=obj2.str();  int n=m_length;  if (n == str.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != str.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public Node nextNode() throws DOMException {  if ((m_next) < this.size()) {    Node next=this.elementAt(m_next);    m_next++;    return next;  } else   return null;}  }
class C{  public FilterFunction createFunction(Class filterClass,Object... parameters){  String filterName="FilterFunction(" + filterClass.getSimpleName() + ")";  Filter filter=FilterFactory.sharedFactory().createFilterByClass(filterClass,filterName);  filter.initWithAssignmentList(parameters);  return new FilterFunction(getContext(),filter);}  }
class C{  public static boolean doesFileExists(String bucket,String key){  return getS3Client().doesObjectExist(bucket,key);}  }
class C{  public EventStoreException(){}  }
class C{  @Override public void sync(Parser recognizer){}  }
class C{  public SVGOMFEConvolveMatrixElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void addSnapshot(BlockSnapshot snap){  snapshot=snap;}  }
class C{  public InputStream openStreamRaw(String[] mimeTypes) throws IOException {  List mt=new ArrayList(mimeTypes.length);  for (int i=0; i < mimeTypes.length; i++)   mt.add(mimeTypes[i]);  return data.openStreamRaw(userAgent,mt.iterator());}  }
class C{  private void locateBlockByPos(BlockInfo info,long pos){  if (pos < 0 || pos >= uncompressedSize)   throw new IndexOutOfBoundsException("Invalid uncompressed position: " + pos);  IndexDecoder index;  for (int i=0; ; ++i) {    index=(IndexDecoder)streams.get(i);    if (index.hasUncompressedOffset(pos))     break;  }  index.locateBlock(info,pos);  assert (info.compressedOffset & 3) == 0;  assert info.uncompressedSize > 0;  assert pos >= info.uncompressedOffset;  assert pos < info.uncompressedOffset + info.uncompressedSize;}  }
class C{  protected String doIt() throws Exception {  int To_C_Invoice_ID=getRecord_ID();  log.info("From C_Invoice_ID=" + m_C_Invoice_ID + " to "+ To_C_Invoice_ID);  if (To_C_Invoice_ID == 0)   throw new IllegalArgumentException("Target C_Invoice_ID == 0");  if (m_C_Invoice_ID == 0)   throw new IllegalArgumentException("Source C_Invoice_ID == 0");  MInvoice from=new MInvoice(getCtx(),m_C_Invoice_ID,get_TrxName());  MInvoice to=new MInvoice(getCtx(),To_C_Invoice_ID,get_TrxName());  int no=to.copyLinesFrom(from,false,false);  return "@Copied@=" + no;}  }
class C{  protected boolean constantOrBound(ExpressionNode expression){  UnboundFinder f=new UnboundFinder();  expression.accept(f);  return !f.found;}  }
class C{  public Object clone(){  try {    Bytecode bc=(Bytecode)super.clone();    bc.tryblocks=(ExceptionTable)tryblocks.clone();    return bc;  } catch (  CloneNotSupportedException cnse) {    throw new RuntimeException(cnse);  }}  }
class C{  private void checkField(final boolean invalid,final String failLabel,final String fieldLabel) throws RequestProcessAdviceException {  if (invalid) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get(failLabel) + " - " + langPropsService.get(fieldLabel)));  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT:    return sourceElement != null;}return super.eIsSet(featureID);}  }
class C{  public boolean hasNickname(){  return hasExtension(GphotoNickname.class);}  }
class C{  public Object cacheLookup(String cacheName,Object key){  SolrCache cache=cacheMap.get(cacheName);  return cache == null ? null : cache.get(key);}  }
class C{  protected void doRenderGraphic(DrawContext dc){  for (  SurfaceCircle ring : this.rings) {    ring.render(dc);  }}  }
class C{  public Document read(URL source) throws DocumentException {  try {    return getReader().read(source);  } catch (  JAXBRuntimeException ex) {    Throwable cause=ex.getCause();    throw new DocumentException(cause.getMessage(),cause);  }}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  m_accumulator.append(ch,start,length);  if (null == m_firstBackPointer)   m_firstBackPointer=handler.getOriginatingNode();  if (this != handler.getCurrentProcessor())   handler.pushProcessor(this);}  }
class C{  private static void genericizeftStyles(final List<FeatureTypeStyle> ftStyles){  for (  final FeatureTypeStyle featureTypeStyle : ftStyles) {    featureTypeStyle.featureTypeNames().clear();    featureTypeStyle.featureTypeNames().add(new NameImpl(SLDs.GENERIC_FEATURE_TYPENAME));  }}  }
class C{  public int readByte() throws IOException {  final int read=this.read();  if (read < 0) {    throw new EOFException("Can't read a byte value");  }  return read;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.FEATURE_TYPE_LIBRARY__TYPES:    getTypes().clear();  getTypes().addAll((Collection<? extends FeatureType>)newValue);return;case SGenPackage.FEATURE_TYPE_LIBRARY__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public double eval(double params[]){  return (params[0] - params[1]);}  }
class C{  public void testGetReaderPort(){  Em18RfidProtocol instance=new Em18RfidProtocol();  char expResult=0x00;  assertEquals(expResult,instance.getReaderPort(msgStandalone));}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("MA period must be greater than zero.");  }  if (getNumberOfSTD() == null || getNumberOfSTD().doubleValue() < 1) {    throw new IllegalArgumentException("Number of STD's must be greater than zero.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    Number yy=candleItem.getY();    if (null != yy) {      if (this.yyValues.size() == getLength()) {        if (newBar) {          sum=sum - this.yyValues.getLast() + yy.doubleValue();          this.yyValues.removeLast();          this.yyValues.addFirst(yy.doubleValue());        } else {          sum=sum - this.yyValues.getFirst() + yy.doubleValue();          this.yyValues.removeFirst();          this.yyValues.addFirst(yy.doubleValue());        }      } else {        if (newBar) {          sum=sum + yy.doubleValue();          this.yyValues.addFirst(yy.doubleValue());        } else {          sum=sum + yy.doubleValue() - this.yyValues.getFirst();          this.yyValues.removeFirst();          this.yyValues.addFirst(yy.doubleValue());        }      }      if (this.yyValues.size() == getLength()) {        double ma=calculateBBands(this.getNumberOfSTD(),this.yyValues,sum);        if (newBar) {          BollingerBandsItem dataItem=new BollingerBandsItem(candleItem.getPeriod(),new BigDecimal(ma));          this.add(dataItem,false);        } else {          BollingerBandsItem dataItem=(BollingerBandsItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setBollingerBands(ma);        }      }    }  }}  }
class C{  public BasicHttpEntity(){  super();  this.length=-1;}  }
class C{  static private String LONG_Max(){  long tempValue=Long.MAX_VALUE;  return String.valueOf(tempValue);}  }
class C{  private static URL findLibraryResource(final String libraryFileName){  String osName=System.getProperty("os.name").toLowerCase();  String osArch=System.getProperty("os.arch").toLowerCase();  String resourceName=null;  if (osName.startsWith("win")) {    resourceName=determineWindowsLibrary(libraryFileName,osName,osArch);  } else   if (osName.startsWith("linux")) {    resourceName=determineLinuxLibrary(libraryFileName,osName,osArch);  } else   if (osName.startsWith("freebsd")) {    resourceName=determineFreebsdLibrary(libraryFileName,osName,osArch);  } else   if (osName.startsWith("mac")) {    resourceName=determineMacLibrary(libraryFileName);  } else {    unsupportedPlatform(osName,osArch);  }  URL resource=NativeLoader.class.getResource(resourceName);  if (null == resource) {    unsupportedPlatform(osName,osArch);  }  return resource;}  }
class C{  static public final float min(float[] list){  if (list.length == 0) {    throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);  }  float min=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] < min)     min=list[i];  }  return min;}  }
class C{  public void close(JarFile jarFile){synchronized (instance) {    URL urlRemoved=urlCache.remove(jarFile);    if (urlRemoved != null)     fileCache.remove(URLUtil.urlNoFragString(urlRemoved));  }}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void test_getBitsFromByteArray_05(){  final byte[] b=new byte[4];  BytesUtil.setBit(b,11,true);  BytesUtil.setBit(b,12,true);  BytesUtil.setBit(b,13,true);  BytesUtil.setBit(b,14,true);  assertEquals(0x00000000,getBits(b,0,11));  assertEquals(0x00000001,getBits(b,0,12));  assertEquals(0x00000003,getBits(b,0,13));  assertEquals(0x00000007,getBits(b,0,14));  assertEquals(0x0000000f,getBits(b,0,15));  assertEquals(0x0000001e,getBits(b,0,16));  assertEquals(0x0000003c,getBits(b,0,17));  assertEquals(0x00000078,getBits(b,0,18));  assertEquals(0x000000f0,getBits(b,0,19));  assertEquals(0x00000000,getBits(b,7,4));  assertEquals(0x00000001,getBits(b,8,4));  assertEquals(0x00000003,getBits(b,9,4));  assertEquals(0x00000007,getBits(b,10,4));  assertEquals(0x0000000f,getBits(b,11,4));  assertEquals(0x0000000e,getBits(b,12,4));  assertEquals(0x0000000c,getBits(b,13,4));  assertEquals(0x00000008,getBits(b,14,4));  assertEquals(0x00000000,getBits(b,15,4));}  }
class C{  public static <T extends Comparable<T>>Pair<Integer,T> min(T[] array){  return min(asList(array));}  }
class C{  private static int generateLocalUdpPort(int portBase){  int resp=-1;  int port=portBase;  while ((resp == -1) && (port < Integer.MAX_VALUE)) {    if (isLocalUdpPortFree(port)) {      resp=port;    } else {      port+=2;    }  }  return resp;}  }
class C{  public boolean isReusable(){  return false;}  }
class C{  public Phone mobilePhone(){  return mobilePhone;}  }
class C{  public MemoryCacheSeekableStream(InputStream src){  this.src=src;}  }
class C{  public void executeComputations(){  boolean calculationFound=false;  for (  Column column : heading.columns())   if (column.hasCalculation()) {    calculationFound=true;    break;  }  if (!calculationFound)   return;  for (int i=0; i < rows.size(); i++) {    for (    Column column : heading.columns()) {      if (column.hasCalculation()) {        Number value=column.getCalculation().evaluate(this,i);        rows.get(i).set(column.getIndex(),value);      }    }  }}  }
class C{  public synchronized Vertex mostConsciousWithAssoiates(Vertex type,Vertex associate,Vertex associateType,Vertex associate2,Vertex associateType2){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return null;  }  Relationship highest=null;  Map<Vertex,Relationship> first=new HashMap<Vertex,Relationship>();  Map<Vertex,Relationship> both=new HashMap<Vertex,Relationship>();  Map<Vertex,Relationship> all=new HashMap<Vertex,Relationship>();  Collection<Relationship> associateRelationships=associate.getRelationships(associateType);  if (associateRelationships != null) {    for (    Relationship relationship : associateRelationships) {      first.put(relationship.getTarget(),relationship);      all.put(relationship.getTarget(),relationship);    }  }  Collection<Relationship> associate2Relationships=associate2.getRelationships(associateType2);  if (associate2Relationships != null) {    for (    Relationship relationship : associate2Relationships) {      if (first.containsKey(relationship.getTarget())) {        both.put(relationship.getTarget(),relationship);      }      all.put(relationship.getTarget(),relationship);    }  }  if (!both.isEmpty()) {    for (    Relationship relationship : relationships) {      Vertex target=relationship.getTarget();      Relationship associateTarget=both.get(target);      if ((associateTarget != null) && (!relationship.isInverse()) && ((highest == null) || (associateTarget.getCorrectness() > highest.getCorrectness()))) {        highest=associateTarget;      }    }    if (highest != null) {      return highest.getTarget();    }  }  if (!all.isEmpty()) {    for (    Relationship relationship : relationships) {      Vertex target=relationship.getTarget();      Relationship associateTarget=all.get(target);      if ((associateTarget != null) && (!relationship.isInverse()) && ((highest == null) || (associateTarget.getCorrectness() > highest.getCorrectness()))) {        highest=associateTarget;      }    }  }  if (highest == null) {    return mostConscious(type);  }  return highest.getTarget();}  }
class C{  public static String format(Date date,boolean millis){  return format(date,millis,TIMEZONE_UTC);}  }
class C{  public CRelocationTableModel(final IDebugger debugger,final IFilledList<Pair<INaviModule,MemoryModule>> wronglyPlacedModules){  Preconditions.checkNotNull(debugger,"IE01487: Debugger argument can not be null");  Preconditions.checkNotNull(wronglyPlacedModules,"IE01488: Wrongly placed modules argument can not be null");  m_debugger=debugger;  m_wronglyPlacedModules=new FilledList<Pair<INaviModule,MemoryModule>>(wronglyPlacedModules);}  }
class C{  public RecurrenceId(Date originalStartDate){  super(originalStartDate);}  }
class C{  public BoundaryPixel pop(){  for (int i=0; i < bitmask.length; i++) {    if (bitmask[i]) {      BoundaryPixel pix=stacks[i].pop();      bitmask[i]=!stacks[i].empty();      return pix;    }  }  return null;}  }
class C{  public <T>void subscribe(EventSubscriber<? extends T> subscriber,Class<T> eventType){  doSubscribe(subscriber,eventType);}  }
class C{  public SQLWarning(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);  DriverManager.println("SQLWarning: reason(" + reason + ") SQLState("+ SQLState+ ") vendor code("+ vendorCode+ ")");}  }
class C{  public void commitEdit() throws ParseException {  JComponent editor=getEditor();  if (editor instanceof DefaultEditor) {    ((DefaultEditor)editor).commitEdit();  }}  }
class C{  private void requestOrdered(TOMMessage request){  if (timer != null) {    timer.unwatch(request);  }  ClientData clientData=getClientData(request.getSender());  clientData.clientLock.lock();  if (!clientData.removeOrderedRequest(request)) {    Logger.println("(ClientsManager.requestOrdered) Request " + request + " does not exist in pending requests");  }  clientData.setLastMessageExecuted(request.getSequence());  clientData.clientLock.unlock();}  }
class C{  public DoubleSummary(final Mode mode){  mode_=mode;switch (mode) {case Sum:    value_=0;  break;case Min:value_=Double.POSITIVE_INFINITY;break;case Max:value_=Double.NEGATIVE_INFINITY;break;}}  }
class C{  public boolean isVisibleInCatalog(){  if (catalogEntries != null && !catalogEntries.isEmpty())   return catalogEntries.get(0).isVisibleInCatalog();  return false;}  }
class C{  public boolean hasRule(OwlRule rule){  return derivation != null && derivation.getRule() == rule;}  }
class C{  public CColorSettingsPanel(){  super(new BorderLayout());  final JPanel mainPanel=new JPanel(new BorderLayout());  final JPanel innerMainPanel=new JPanel(new GridBagLayout());  final JPanel functionTypeColorPanel=new JPanel(new GridLayout(5,1,3,3));  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();  m_normalFunctionColorPanel=buildRow(functionTypeColorPanel,"Normal Function" + ":","Color used to paint normal functions in callgraphs and view tables",new ColorPanel(colors.getNormalFunctionColor(),true,true),false);  m_importFunctionColorPanel=buildRow(functionTypeColorPanel,"Imported Function" + ":","Color used to paint imported functions in callgraphs and view tables",new ColorPanel(colors.getImportedFunctionColor(),true,true),false);  m_libraryFunctionColorPanel=buildRow(functionTypeColorPanel,"Library Function" + ":","Color used to paint library functions in callgraphs and view tables",new ColorPanel(colors.getLibraryFunctionColor(),true,true),false);  m_thunkFunctionColorPanel=buildRow(functionTypeColorPanel,"Thunk Function" + ":","Color used to paint thunk functions in callgraphs and view tables",new ColorPanel(colors.getThunkFunctionColor(),true,true),false);  m_adjustorThunkFunctionColorPanel=buildRow(functionTypeColorPanel,"Unknown Function" + ":","Color used to paint thunk adjustor functions in callgraphs and view tables",new ColorPanel(colors.getAdjustorThunkFunctionColor(),true,true),true);  functionTypeColorPanel.setBorder(new TitledBorder("Function Colors"));  final JPanel instructionColorPanel=new JPanel(new GridLayout(11,1,3,3));  instructionColorPanel.setBorder(new TitledBorder("Instruction Colors"));  m_addressColorPanel=buildRow(instructionColorPanel,"Addresses" + ":","Color used to paint addresses in graphs",new ColorPanel(colors.getAddressColor(),true,true),false);  m_mnemonicColorPanel=buildRow(instructionColorPanel,"Mnemonics" + ":","Color used to paint mnemonics in graphs",new ColorPanel(colors.getMnemonicColor(),true,true),false);  m_literalsColorPanel=buildRow(instructionColorPanel,"Immediates" + ":","Color used to paint immediate values in graphs",new ColorPanel(colors.getImmediateColor(),true,true),false);  m_registersColorPanel=buildRow(instructionColorPanel,"Registers" + ":","Color used to paint registers in graphs",new ColorPanel(colors.getRegisterColor(),true,true),false);  m_functionColorPanel=buildRow(instructionColorPanel,"Functions" + ":","Color used to paint function references in graphs",new ColorPanel(colors.getFunctionColor(),true,true),false);  m_variableColorPanel=buildRow(instructionColorPanel,"Variables" + ":","Color used to paint variables in graphs",new ColorPanel(colors.getVariableColor(),true,true),false);  m_expressionListColorPanel=buildRow(instructionColorPanel,"Expression List" + ":","Color used to paint expression lists in graphs",new ColorPanel(colors.getExpressionListColor(),true,true),false);  m_memoryReferencesColorPanel=buildRow(instructionColorPanel,"Memory References" + ":","Color used to paint memory references in graphs",new ColorPanel(colors.getMemRefColor(),true,true),false);  m_operatorColorPanel=buildRow(instructionColorPanel,"Operators" + ":","Color used to paint operators in graphs",new ColorPanel(colors.getOperatorColor(),true,true),false);  m_operandSeparatorColorPanel=buildRow(instructionColorPanel,"Operand Separators" + ":","Color used to paint operand separators in graphs",new ColorPanel(colors.getOperandSeparatorColor(),true,true),false);  m_prefixColorPanel=buildRow(instructionColorPanel,"Prefixes" + ":","Color used to paint prefixes in graphs",new ColorPanel(colors.getPrefixColor(),true,true),true);  final JPanel graphColorPanel=new JPanel(new GridLayout(8,1,3,3));  graphColorPanel.setBorder(new TitledBorder("Graph Colors"));  m_basicblocksPanel=buildRow(graphColorPanel,"Basic Blocks" + ":","Color used to paint basic blocks in graphs",new ColorPanel(colors.getBasicBlocksColor(),true,true),false);  m_unconditionalJumpsPanel=buildRow(graphColorPanel,"Unconditional Jumps" + ":","Color of unconditional jumps",new ColorPanel(colors.getUnconditionalJumpColor(),true,true),false);  m_conditionalJumpsTakenPanel=buildRow(graphColorPanel,"Conditional Jumps (Taken)" + ":","Color of conditional jumps which are taken",new ColorPanel(colors.getConditionalJumpTrueColor(),true,true),false);  m_conditionalJumpsNotTakenPanel=buildRow(graphColorPanel,"Conditional Jumps (Not taken)" + ":","Color of conditional jumps which are not taken",new ColorPanel(colors.getConditionalJumpFalseColor(),true,true),false);  m_enterInlinedJumpsPanel=buildRow(graphColorPanel,"Entering inlined functions" + ":","Color of edges used to enter inlined functions",new ColorPanel(colors.getEnterInlinedJumpColor(),true,true),false);  m_leaveInlinedJumpsPanel=buildRow(graphColorPanel,"Leaving inlined functions" + ":","Color of edges used to leave inlined functions",new ColorPanel(colors.getLeaveInlinedJumpColor(),true,true),true);  m_switchPanel=buildRow(graphColorPanel,"Switches" + ":","Color of edges that belong to switch statements",new ColorPanel(colors.getSwitchJumpColor(),true,true),true);  m_textJumpsPanel=buildRow(graphColorPanel,"Edges to comment nodes" + ":","Color of edges that connect comment nodes to other nodes",new ColorPanel(colors.getTextEdgeColor(),true,true),true);  final JPanel debuggerColorPanel=new JPanel(new GridLayout(8,1,3,3));  final DebugColorsConfigItem debuggerColors=ConfigManager.instance().getDebuggerColorSettings();  m_activeLineColorPanel=buildRow(debuggerColorPanel,"Active Line" + ":","Color used to show the line at the program counter while debugging.",new ColorPanel(debuggerColors.getActiveLine(),true,true),false);  m_activeBreakpointColorPanel=buildRow(debuggerColorPanel,"Active Breakpoint" + ":","Color used to show active breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointActive(),true,true),false);  m_inactiveBreakpointColorPanel=buildRow(debuggerColorPanel,"Inactive Breakpoint" + ":","Color used to show inactive breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointInactive(),true,true),false);  m_enabledBreakpointColorPanel=buildRow(debuggerColorPanel,"Enabled Breakpoint" + ":","Color used to show enabled breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointEnabled(),true,true),false);  m_disabledBreakpointColorPanel=buildRow(debuggerColorPanel,"Disabled Breakpoint" + ":","Color used to show disabled breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointDisabled(),true,true),false);  m_hitBreakpointColorPanel=buildRow(debuggerColorPanel,"Hit Breakpoint" + ":","Color used to show hit breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointHit(),true,true),false);  m_invalidBreakpointColorPanel=buildRow(debuggerColorPanel,"Invalid Breakpoint" + ":","Color used to show invalid breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointInvalid(),true,true),false);  m_deletingBreakpointColorPanel=buildRow(debuggerColorPanel,"Deleting Breakpoint" + ":","Color used to show deleting breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointDeleting(),true,true),true);  debuggerColorPanel.setBorder(new TitledBorder("Debugger Colors"));  final GridBagConstraints constraints=new GridBagConstraints();  constraints.gridx=0;  constraints.gridy=0;  constraints.anchor=GridBagConstraints.FIRST_LINE_START;  constraints.weightx=1;  constraints.fill=GridBagConstraints.HORIZONTAL;  innerMainPanel.add(functionTypeColorPanel,constraints);  constraints.gridy=1;  innerMainPanel.add(instructionColorPanel,constraints);  constraints.gridy=2;  innerMainPanel.add(graphColorPanel,constraints);  constraints.gridy=3;  innerMainPanel.add(debuggerColorPanel,constraints);  mainPanel.add(innerMainPanel,BorderLayout.NORTH);  add(new JScrollPane(mainPanel));}  }
class C{  public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.ignorableWhitespace(ch,start,length);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private int computeColor(int c1,int c2,float percent){  int a=computeChannel((c1 >> 24) & 0xFF,(c2 >> 24) & 0xFF,percent);  int r=computeChannel((c1 >> 16) & 0xFF,(c2 >> 16) & 0xFF,percent);  int g=computeChannel((c1 >> 8) & 0xFF,(c2 >> 8) & 0xFF,percent);  int b=computeChannel((c1) & 0xFF,(c2) & 0xFF,percent);  return a << 24 | r << 16 | g << 8 | b;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue01.class,args);}  }
class C{  private static <E>ImmutableList<E> construct(Object... elements){  return asImmutableList(checkElementsNotNull(elements));}  }
class C{  public Date checkLegacyMatrix(final Map workflowheaderparams){  final Criteria workFlowCrit=entityQueryService.getSession().createCriteria(WorkFlowMatrix.class);  if (isNotBlank((String)workflowheaderparams.get(OBJECTTYPE))) {    workFlowCrit.add(Restrictions.eq(OBJECT_TYPE,getobjectTypebyId((Long)workflowheaderparams.get(OBJECTTYPE)).getType()));  }  if (!"-1".equals(workflowheaderparams.get(ADDITIONALRULE))) {    workFlowCrit.add(Restrictions.eq(ADDITIONAL_RULE,workflowheaderparams.get(ADDITIONALRULE)));  }  if (!"-1".equals(workflowheaderparams.get(DEPARTMENTS))) {    final String[] department=(String[])workflowheaderparams.get(DEPARTMENTS);    workFlowCrit.add(Restrictions.eq(DEPARTMENT,department[0]));  }  if (isNotBlank((String)workflowheaderparams.get(FROMDATE))) {    workFlowCrit.add(Restrictions.ge(FROM_DATE,workflowheaderparams.get(FROMDATE)));  }  if (isNotBlank((String)workflowheaderparams.get(FROMAMOUNT))) {    workFlowCrit.add(Restrictions.eq(FROM_QTY,workflowheaderparams.get(FROMAMOUNT)));  }  if (isNotBlank((String)workflowheaderparams.get(TOAMOUNT))) {    workFlowCrit.add(Restrictions.eq(TO_QTY,workflowheaderparams.get(TOAMOUNT)));  }  addProjectionsforCriteria(workFlowCrit);  workFlowCrit.addOrder(Order.asc(TO_DATE));  workFlowCrit.setResultTransformer(Transformers.aliasToBean(WorkFlowMatrixDetails.class));  final List<WorkFlowMatrixDetails> matrixList=workFlowCrit.list();  if (!matrixList.isEmpty()) {    return matrixList.get(0).getFromDateAlias();  } else {    return null;  }}  }
class C{  public void testDynamicRepeatedMessageNotNull() throws Exception {  TestAllTypes REPEATED_NESTED=TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalString("foo").setOptionalForeignMessage(ForeignMessage.getDefaultInstance()).addRepeatedString("bar").addRepeatedForeignMessage(ForeignMessage.getDefaultInstance()).addRepeatedForeignMessage(ForeignMessage.getDefaultInstance()).build();  Descriptors.Descriptor descriptor=TestRequired.getDescriptor();  DynamicMessage result=DynamicMessage.newBuilder(TestAllTypes.getDescriptor()).mergeFrom(DynamicMessage.newBuilder(REPEATED_NESTED).build()).build();  assertTrue(result.getField(result.getDescriptorForType().findFieldByName("repeated_foreign_message")) instanceof List<?>);  assertEquals(result.getRepeatedFieldCount(result.getDescriptorForType().findFieldByName("repeated_foreign_message")),2);}  }
class C{  public ObjectImporter(Applet applet){  URL codebase=applet.getCodeBase();  orgServername=servername=codebase.getHost();  orgPort=port=codebase.getPort();}  }
class C{  public void index() throws IOException {  init();  df.setMaximumFractionDigits(3);  HashSet<Integer> docIDs=selectVocabularyDocs();  KMeans k;  if (useParallelClustering)   k=new ParallelKMeans(numClusters); else   k=new KMeans(numClusters);  LinkedList<double[]> features=new LinkedList<double[]>();  Bits liveDocs=MultiFields.getLiveDocs(reader);  for (Iterator<Integer> iterator=docIDs.iterator(); iterator.hasNext(); ) {    int nextDoc=iterator.next();    if (reader.hasDeletions() && !liveDocs.get(nextDoc))     continue;    Document d=reader.document(nextDoc);    features.clear();    IndexableField[] fields=d.getFields(localFeatureFieldName);    String file=d.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0];    for (int j=0; j < fields.length; j++) {      LireFeature f=getFeatureInstance();      f.setByteArrayRepresentation(fields[j].binaryValue().bytes,fields[j].binaryValue().offset,fields[j].binaryValue().length);      features.add(((Histogram)f).getDoubleHistogram());    }    k.addImage(file,features);  }  if (pm != null) {    pm.setProgress(5);    pm.setNote("Starting clustering");  }  if (k.getFeatureCount() < numClusters) {    throw new UnsupportedOperationException("Only " + features.size() + " features found to cluster in "+ numClusters+ ". Try to use less clusters or more images.");  }  System.out.println("k.getFeatureCount() = " + k.getFeatureCount());  System.out.println("Starting clustering ...");  k.init();  System.out.println("Step.");  double time=System.currentTimeMillis();  double laststress=k.clusteringStep();  if (pm != null) {    pm.setProgress(8);    pm.setNote("Step 1 finished");  }  System.out.println(getDuration(time) + " -> Next step.");  time=System.currentTimeMillis();  double newStress=k.clusteringStep();  if (pm != null) {    pm.setProgress(11);    pm.setNote("Step 2 finished");  }  double threshold=Math.max(20d,(double)k.getFeatureCount() / 1000d);  System.out.println("Threshold = " + threshold);  int cstep=3;  while (Math.abs(newStress - laststress) > threshold && cstep < 12) {    System.out.println(getDuration(time) + " -> Next step. Stress difference ~ |" + (int)newStress+ " - "+ (int)laststress+ "| = "+ df.format(Math.abs(newStress - laststress)));    time=System.currentTimeMillis();    laststress=newStress;    newStress=k.clusteringStep();    if (pm != null) {      pm.setProgress(cstep * 3 + 5);      pm.setNote("Step " + cstep + " finished");    }    cstep++;  }  clusters=k.getClusters();  Cluster.writeClusters(clusters,clusterFile);  System.out.println("Creating histograms ...");  time=System.currentTimeMillis();  IndexWriter iw=LuceneUtils.createIndexWriter(((DirectoryReader)reader).directory(),true,LuceneUtils.AnalyzerType.WhitespaceAnalyzer,256d);  if (pm != null) {    pm.setProgress(50);    pm.setNote("Clustering finished");  }  LinkedList<Thread> threads=new LinkedList<Thread>();  int numThreads=4;  int step=reader.maxDoc() / numThreads;  for (int part=0; part < numThreads; part++) {    Indexer indexer=null;    if (part < numThreads - 1)     indexer=new Indexer(part * step,(part + 1) * step,iw,null); else     indexer=new Indexer(part * step,reader.maxDoc(),iw,pm);    Thread t=new Thread(indexer);    threads.add(t);    t.start();  }  for (Iterator<Thread> iterator=threads.iterator(); iterator.hasNext(); ) {    Thread next=iterator.next();    try {      next.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  if (pm != null) {    pm.setProgress(95);    pm.setNote("Indexing finished, optimizing index now.");  }  System.out.println(getDuration(time));  iw.commit();  iw.forceMerge(1);  iw.close();  if (pm != null) {    pm.setProgress(100);    pm.setNote("Indexing & optimization finished");    pm.close();  }  System.out.println("Finished.");}  }
class C{  public static boolean hasKitKat(){  return Build.VERSION.SDK_INT >= 19;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"leave");  Preconditions.checkArgument(instruction.getOperands().size() == 0,"Error: Argument instruction is not a leave instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String addResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(baseOffset,archSize,"ebp",archSize,"esp"));  instructions.add(ReilHelpers.createLdm(baseOffset + 1,archSize,"esp",archSize,"ebp"));  instructions.add(ReilHelpers.createAdd(baseOffset + 2,archSize,"esp",archSize,"4",resultSize,addResult));  instructions.add(ReilHelpers.createAnd(baseOffset + 3,resultSize,addResult,archSize,truncateMask,archSize,"esp"));}  }
class C{  public ArrayType newArrayType(Type elementType,int dimensions){  if (elementType == null || elementType.isArrayType()) {    throw new IllegalArgumentException();  }  if (dimensions < 1 || dimensions > 1000) {    throw new IllegalArgumentException();  }  ArrayType result=new ArrayType(this);  result.setComponentType(elementType);  for (int i=2; i <= dimensions; i++) {    result=newArrayType(result);  }  return result;}  }
class C{  private static void addFile(final OutputStream out,final Path file) throws IOException {  int size=(int)Files.size(file);  for (int i=0; i < 4; i++, size>>=8)   out.write(size & 0xff);  out.write(Files.readAllBytes(file));}  }
class C{  public GetSongs(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public void testCase5(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-10,-19,-28,-37,-46,-55,-64,-10,-19,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public static void appendSQLString(StringBuffer strBuf,String attributeName,Object toAppend,boolean columnNamesOnly){  if (toAppend instanceof String) {    if ("null".equals(toAppend)) {      toAppend=null;    } else {      toAppend=((String)toAppend).trim();    }  }  if (toAppend instanceof Date) {    final SimpleDateFormat newDateFormat=new SimpleDateFormat("dd-MMM-yy HH:mm:ss");    toAppend=newDateFormat.format((Date)toAppend);  }  if (columnNamesOnly) {    if (0 == strBuf.length()) {      strBuf.append(attributeName);    } else {      strBuf.append("," + attributeName);    }  } else {    if (null == toAppend) {      if (0 != strBuf.length()) {        strBuf.append("||");      }    } else {      if (0 == strBuf.length()) {        strBuf.append("\"" + toAppend + "\"");      } else {        strBuf.append("||" + "\"" + toAppend + "\"");      }    }  }}  }
class C{  private static long mixK2(long k2){  k2*=C2;  k2=Long.rotateLeft(k2,33);  k2*=C1;  return k2;}  }
class C{  public static Object newInstanceSafe(final String klassName){  final Class<?> klass=ReflectionUtils.loadClassSafe(klassName);  return klass == null ? null : ReflectionUtils.newInstanceSafe(klass);}  }
class C{  public boolean containsKey(String... keys){  Set<String> keySet=argMap.keySet();  for (Iterator<String> keysIter=keySet.iterator(); keysIter.hasNext(); ) {    String key=keysIter.next();    for (int key_i=0; key_i < keys.length; key_i++) {      if (key.equals(keys[key_i])) {        return true;      }    }  }  return false;}  }
class C{  public Iterator<String> iterateDataSources(){  return dataSources.iterator();}  }
class C{  protected void queueCurrentSequence(){  if (currentSequence != null) {    sequencesQueue.addFirst(currentSequence);  }}  }
class C{  private <T>T processExtremes(Stamp forX,Stamp forY,BiFunction<Long,Long,T> op){  IntegerStamp xStamp=(IntegerStamp)forX;  IntegerStamp yStamp=(IntegerStamp)forY;  JavaKind kind=getStackKind();  assert kind == JavaKind.Int || kind == JavaKind.Long;  long[] xExtremes={xStamp.lowerBound(),xStamp.upperBound()};  long[] yExtremes={yStamp.lowerBound(),yStamp.upperBound()};  long min=Long.MAX_VALUE;  long max=Long.MIN_VALUE;  for (  long a : xExtremes) {    for (    long b : yExtremes) {      long result=kind == JavaKind.Int ? multiplyHigh((int)a,(int)b) : multiplyHigh(a,b);      min=Math.min(min,result);      max=Math.max(max,result);    }  }  return op.apply(min,max);}  }
class C{  public static String readStringFromFile(Path file,Charset charset) throws IOException {  return readBytesFromFile(file.toFile()).toString(charset);}  }
class C{  public GetPlaylists(){  super();}  }
class C{  public synchronized void addFlavorForUnencodedNative(String nat,DataFlavor flav){  Objects.requireNonNull(nat,"Null native not permitted");  Objects.requireNonNull(flav,"Null flavor not permitted");  LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(nat);  if (flavors == null) {    flavors=new LinkedHashSet<>(1);    getNativeToFlavor().put(nat,flavors);  }  flavors.add(flav);  flavorsForNativeCache.remove(nat);}  }
class C{  public static void parseTuple(InputStream in,QueryResultFormat format,TupleQueryResultHandler handler,ValueFactory valueFactory) throws IOException, QueryResultParseException, TupleQueryResultHandlerException, UnsupportedQueryResultFormatException {  TupleQueryResultParser parser=createTupleParser(format);  parser.setValueFactory(valueFactory);  parser.setQueryResultHandler(handler);  try {    parser.parseQueryResult(in);  } catch (  QueryResultHandlerException e) {    if (e instanceof TupleQueryResultHandlerException) {      throw (TupleQueryResultHandlerException)e;    } else {      throw new TupleQueryResultHandlerException(e);    }  }}  }
class C{  public BouncyCastleSslEngineSource(Authority authority,boolean trustAllServers,boolean sendCerts,Cache<String,SSLContext> sslContexts) throws GeneralSecurityException, OperatorCreationException, RootCertificateException, IOException {  this.authority=authority;  this.trustAllServers=trustAllServers;  this.sendCerts=sendCerts;  this.serverSSLContexts=sslContexts;  initializeKeyStore();  initializeSSLContext();}  }
class C{  public int isPalindrome(String A){  int len=A.length();  int i=0;  int j=len - 1;  while (i < j) {    while (i < j && !Character.isLetterOrDigit(A.charAt(i))) {      i++;    }    while (i < j && !Character.isLetterOrDigit(A.charAt(j))) {      j--;    }    if (Character.toLowerCase(A.charAt(i)) != Character.toLowerCase(A.charAt(j))) {      return 0;    }    i++;    j--;  }  return 1;}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream",e);    }  }}  }
