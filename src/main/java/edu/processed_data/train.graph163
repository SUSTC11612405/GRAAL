class C{  public static Object[] clone(final Object[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public static void writeJavadocFromElement(PluginEnvironment pluginEnv,JavaFileWriter writer,Element element) throws IOException {  if (!pluginEnv.hasSquidbOption(PluginEnvironment.OPTIONS_DISABLE_JAVADOC_COPYING)) {    writer.writeJavadoc(pluginEnv.getUtils().getElements().getDocComment(element));  }}  }
class C{  public SignatureManifest(){  this.rnd=null;}  }
class C{  public void testDecompounding() throws Exception {  Reader reader=new StringReader("I like to play softball");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("DictionaryCompoundWord","dictionary","compoundDictionary.txt").create(stream);  assertTokenStreamContents(stream,new String[]{"I","like","to","play","softball","soft","ball"});}  }
class C{  private void updateActions(final INaviModule module){  m_loadModulesAction.putValue("Name",CLoadModuleAction.generateActionString(module));  m_loadModulesAction.setEnabled(module.getConfiguration().getRawModule().isComplete() && !module.isLoaded());  m_initializeModuleAction.setEnabled(!module.isInitialized() && module.getConfiguration().getRawModule().isComplete());  m_resolveAction.setEnabled(module.isLoaded());  m_resolveAllAction.setEnabled(module.isLoaded());  m_searchAction.setEnabled(module.isLoaded());}  }
class C{  public TEA(byte[] key){  if (key == null)   throw new RuntimeException("Invalid key: Key was null");  if (key.length < 16)   throw new RuntimeException("Invalid key: Length was less than 16 bytes");  for (int off=0, i=0; i < 4; i++) {    S[i]=((key[off++] & 0xff)) | ((key[off++] & 0xff) << 8) | ((key[off++] & 0xff) << 16)| ((key[off++] & 0xff) << 24);  }}  }
class C{  public MultipartProcessor(java.net.HttpURLConnection conn,String boundary,String charset) throws IOException {  this.boundary=boundary;  this.charset=charset;  this.conn=conn;  this.outputStream=conn.getOutputStream();  this.writer=new PrintWriter(new OutputStreamWriter(outputStream,charset),true);}  }
class C{  protected void decodeAtom(PushbackInputStream inStream,OutputStream outStream,int l) throws IOException {  int i, c1, c2, c3, c4;  int a, b, c;  StringBuffer x=new StringBuffer();  for (i=0; i < 4; i++) {    c1=inStream.read();    if (c1 == -1) {      throw new CEStreamExhausted();    }    x.append((char)c1);    decoderBuffer[i]=(byte)((c1 - ' ') & 0x3f);  }  a=((decoderBuffer[0] << 2) & 0xfc) | ((decoderBuffer[1] >>> 4) & 3);  b=((decoderBuffer[1] << 4) & 0xf0) | ((decoderBuffer[2] >>> 2) & 0xf);  c=((decoderBuffer[2] << 6) & 0xc0) | (decoderBuffer[3] & 0x3f);  outStream.write((byte)(a & 0xff));  if (l > 1) {    outStream.write((byte)(b & 0xff));  }  if (l > 2) {    outStream.write((byte)(c & 0xff));  }}  }
class C{  @Override public Handle range(GrammarAST a,GrammarAST b){  throw new UnsupportedOperationException("This construct is not valid in parsers.");}  }
class C{  private static List<VOServiceDetails> createServiceSet(VOTechnicalService tp) throws Exception {  container.login(supplierUserKey1,ROLE_SERVICE_MANAGER);  VOServiceDetails voProduct1=createProduct(tp,"product1_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct2=createProduct(tp,"product2_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct3=createProduct(tp,"product3_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct4=createProduct(tp,"product4_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct5=createProduct(tp,"product5_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct6=createProduct(tp,"product6_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct7=createProduct(tp,"product7_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct8=createProduct(tp,"product8_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct9=createProduct(tp,"product9_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct10=createProduct(tp,"product10_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct11=createProduct(tp,"product11_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct12=createProduct(tp,"product12_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct13=createProduct(tp,"product13_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct14=createProduct(tp,"product14_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProduct15=createProduct(tp,"product15_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductOBSOLETE=createProduct(tp,"productOBSOLETE_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductDELETED=createProduct(tp,"productDELETED_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductSUSPENDED=createProduct(tp,"productSUSPENDED_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductOBSOLETE2=createProduct(tp,"productOBSOLETE2_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductDELETED2=createProduct(tp,"productDELETED2_" + tp.getTechnicalServiceId(),sps);  VOServiceDetails voProductSUSPENDED2=createProduct(tp,"productSUSPENDED2_" + tp.getTechnicalServiceId(),sps);  VOPriceModel priceModel=new VOPriceModel();  sps.savePriceModel(voProduct1,priceModel);  voProduct2=sps.savePriceModel(voProduct2,priceModel);  voProduct3=sps.savePriceModel(voProduct3,priceModel);  voProduct4=sps.savePriceModel(voProduct4,priceModel);  voProduct5=sps.savePriceModel(voProduct5,priceModel);  voProduct6=sps.savePriceModel(voProduct6,priceModel);  voProduct7=sps.savePriceModel(voProduct7,priceModel);  voProduct8=sps.savePriceModel(voProduct8,priceModel);  voProduct9=sps.savePriceModel(voProduct9,priceModel);  voProduct10=sps.savePriceModel(voProduct10,priceModel);  voProduct11=sps.savePriceModel(voProduct11,priceModel);  voProduct12=sps.savePriceModel(voProduct12,priceModel);  voProduct13=sps.savePriceModel(voProduct13,priceModel);  voProduct14=sps.savePriceModel(voProduct14,priceModel);  voProduct15=sps.savePriceModel(voProduct15,priceModel);  voProductOBSOLETE=sps.savePriceModel(voProductOBSOLETE,priceModel);  voProductOBSOLETE2=sps.savePriceModel(voProductOBSOLETE2,priceModel);  voProductDELETED=sps.savePriceModel(voProductDELETED,priceModel);  voProductDELETED2=sps.savePriceModel(voProductDELETED2,priceModel);  voProductSUSPENDED=sps.savePriceModel(voProductSUSPENDED,priceModel);  voProductSUSPENDED2=sps.savePriceModel(voProductSUSPENDED2,priceModel);  VOOrganization org=getOrganizationForOrgId(customerOrgId);  VOPriceModel pm=new VOPriceModel();  sps.savePriceModelForCustomer(voProduct3,pm,org);  VOServiceDetails voProductCust4=sps.savePriceModelForCustomer(voProduct4,pm,org);  VOServiceDetails voProductCust5=sps.savePriceModelForCustomer(voProduct5,pm,org);  VOServiceDetails voProductCust6=sps.savePriceModelForCustomer(voProduct6,pm,org);  VOServiceDetails voProductCust7=sps.savePriceModelForCustomer(voProduct7,pm,org);  VOServiceDetails voProductCust8=sps.savePriceModelForCustomer(voProduct8,pm,org);  VOServiceDetails voProductCust9=sps.savePriceModelForCustomer(voProduct9,pm,org);  VOServiceDetails voProductCust10=sps.savePriceModelForCustomer(voProduct10,pm,org);  VOServiceDetails voProductCust14=sps.savePriceModelForCustomer(voProduct14,pm,org);  VOServiceDetails voProductCust15=sps.savePriceModelForCustomer(voProduct15,pm,org);  VOServiceDetails voProductCustOBSOLETE=sps.savePriceModelForCustomer(voProductOBSOLETE,pm,org);  VOServiceDetails voProductCustDELETED=sps.savePriceModelForCustomer(voProductDELETED,pm,org);  VOServiceDetails voProductCustSUSPENDED=sps.savePriceModelForCustomer(voProductSUSPENDED,pm,org);  VOMarketplace voMarketplaceLocal=new VOMarketplace();  voMarketplaceLocal.setMarketplaceId(mpSupplier1.getMarketplaceId());  publishServiceToMarketplace(voProduct2,voMarketplaceLocal,true,true);  publishServiceToMarketplace(voProduct5,voMarketplaceLocal,true,true);  publishServiceToMarketplace(voProduct6,voMarketplaceLocal,true,true);  publishServiceToMarketplace(voProduct14,voMarketplaceLocal,true,true);  VOMarketplace voMarketplace=new VOMarketplace();  voMarketplace.setMarketplaceId("FUJITSU");  publishServiceToMarketplace(voProduct7,voMarketplace,true,true);  publishServiceToMarketplace(voProduct8,voMarketplace,false,true);  publishServiceToMarketplace(voProduct9,voMarketplace,true,false);  publishServiceToMarketplace(voProduct10,voMarketplace,false,false);  publishServiceToMarketplace(voProductCust7,voMarketplace,true,true);  VOMarketplace voMarketplace2=new VOMarketplace();  voMarketplace2.setMarketplaceId("EST");  publishServiceToMarketplace(voProduct11,voMarketplace2,true,true);  publishServiceToMarketplace(voProduct12,voMarketplace,true,true);  publishServiceToMarketplace(voProduct13,voMarketplace,true,false);  publishServiceToMarketplace(voProduct15,voMarketplace,true,true);  publishServiceToMarketplace(voProductOBSOLETE,voMarketplace,true,true);  publishServiceToMarketplace(voProductOBSOLETE2,voMarketplace,true,true);  publishServiceToMarketplace(voProductCustOBSOLETE,voMarketplace,true,true);  publishServiceToMarketplace(voProductDELETED,voMarketplace,true,true);  publishServiceToMarketplace(voProductDELETED2,voMarketplace,true,true);  publishServiceToMarketplace(voProductCustDELETED,voMarketplace,true,true);  publishServiceToMarketplace(voProductSUSPENDED,voMarketplace,true,true);  publishServiceToMarketplace(voProductSUSPENDED2,voMarketplace,true,true);  publishServiceToMarketplace(voProductCustSUSPENDED,voMarketplace,true,true);  sps.activateService(voProduct2);  sps.activateService(voProduct5);  sps.activateService(voProduct6);  sps.activateService(voProduct7);  sps.activateService(voProduct8);  sps.activateService(voProduct10);  sps.activateService(voProductCust4);  sps.activateService(voProductCust6);  VOService voActiveCustProduct7=sps.activateService(voProductCust7);  sps.activateService(voProductCust8);  sps.activateService(voProductCust9);  sps.activateService(voProductCust10);  sps.activateService(voProduct11);  VOService voActiveProduct13=sps.activateService(voProduct13);  sps.activateService(voProduct14);  sps.activateService(voProduct15);  setServiceStatus(ServiceStatus.OBSOLETE,voProductCustOBSOLETE);  setServiceStatus(ServiceStatus.OBSOLETE,voProductOBSOLETE);  setServiceStatus(ServiceStatus.OBSOLETE,voProductOBSOLETE2);  sps.deleteService(voProductCustDELETED);  sps.deleteService(voProductDELETED);  sps.deleteService(voProductDELETED2);  setServiceStatus(ServiceStatus.SUSPENDED,voProductCustSUSPENDED);  setServiceStatus(ServiceStatus.SUSPENDED,voProductSUSPENDED);  setServiceStatus(ServiceStatus.SUSPENDED,voProductSUSPENDED2);  container.logout();  suspendedServices.add(voProductSUSPENDED);  suspendedServiceIds.add(voProductSUSPENDED.getServiceId());  suspendedServices.add(voProductSUSPENDED2);  suspendedServiceIds.add(voProductSUSPENDED2.getServiceId());  suspendedServices.add(voProductCustSUSPENDED);  suspendedServiceIds.add(voProductCustSUSPENDED.getServiceId());  VOSubscription voSubscriptionCustProduct7=createSubscription(voActiveCustProduct7);  VOSubscription voSubscriptionProduct13=createSubscription(voActiveProduct13);  List<VOServiceDetails> list=new ArrayList<VOServiceDetails>();  list.add(voProduct1);  list.add(voProduct2);  list.add(voProduct3);  list.add(voProduct4);  list.add(voProduct5);  list.add(voProduct6);  list.add(voProduct7);  list.add(voProduct8);  list.add(voProduct9);  list.add(voProduct10);  list.add(voProduct11);  list.add(voProductCust4);  list.add(voProductCust6);  list.add(voProductCust7);  list.add(voProductCust8);  list.add(voProductCust9);  list.add(voProductCust10);  list.add(voProduct12);  list.add(voProduct13);  VOServiceDetails copyOfVoProduct7=new VOServiceDetails();  copyOfVoProduct7.setKey(getProductCopyKey(voSubscriptionCustProduct7).longValue());  list.add(copyOfVoProduct7);  VOServiceDetails copyOfVoProduct13=new VOServiceDetails();  copyOfVoProduct13.setKey(getProductCopyKey(voSubscriptionProduct13).longValue());  list.add(copyOfVoProduct13);  list.add(voProductCust5);  list.add(voProduct14);  list.add(voProductCust14);  list.add(voProduct15);  list.add(voProductCust15);  return list;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("GetLocalVariablesTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  bpe=resumeTo("GetLocalVariablesTarg",197);  StackFrame frame=bpe.thread().frame(0);  List localVars=frame.visibleVariables();  System.out.println("    Visible variables at this point are: ");  for (Iterator it=localVars.iterator(); it.hasNext(); ) {    LocalVariable lv=(LocalVariable)it.next();    System.out.print(lv.name());    System.out.print(" typeName: ");    System.out.print(lv.typeName());    System.out.print(" signature: ");    System.out.print(lv.type().signature());    System.out.print(" primitive type: ");    System.out.println(lv.type().name());  }  listenUntilVMDisconnect();  if (!testFailed) {    println("GetLocalVariables: passed");  } else {    throw new Exception("GetLocalVariables: failed");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isWrapperFor(Class iface) throws SQLException {  return true;}  }
class C{  public void layoutContainer(Container parent){  Insets insets=parent.insets();  int ncomponents=parent.countComponents();  int nrows=rows;  int ncols=cols;  if (nrows > 0) {    ncols=(ncomponents + nrows - 1) / nrows;  } else {    nrows=(ncomponents + ncols - 1) / ncols;  }  if (rows == 0) {    stdRowFractions(nrows);  }  if (cols == 0) {    stdColFractions(ncols);  }  Dimension size=parent.size();  int w=size.width - (insets.left + insets.right);  int h=size.height - (insets.top + insets.bottom);  w=(w - (ncols - 1) * hgap);  h=(h - (nrows - 1) * vgap);  allocateExtraSpace();  for (int c=0, x=insets.left; c < ncols; c++) {    int colWidth=(int)(getColFraction(c) * w);    for (int r=0, y=insets.top; r < nrows; r++) {      int i=r * ncols + c;      int rowHeight=(int)(getRowFraction(r) * h);      if (i < ncomponents) {        parent.getComponent(i).reshape(x,y,colWidth,rowHeight);      }      y+=rowHeight + vgap;    }    x+=colWidth + hgap;  }}  }
class C{  public int compareTo(final int x,final int radius){  if (this == EMPTY_INTERVAL)   throw new IllegalArgumentException();  if (x < left - radius)   return -1;  if (x > right + radius)   return 1;  return 0;}  }
class C{  public List<XmlDom> tags(String tag){  return tags(tag,null,null);}  }
class C{  public void parsePackage(DynamicApkManager dpkg,Context context,File apkFile){  if (isApkFile(apkFile)) {    parseBasePackage(dpkg,context,apkFile);  } else   if (apkFile.isDirectory()) {    File[] apkFiles=apkFile.listFiles();    if (apkFiles != null && apkFiles.length > 0) {      for (      File file : apkFiles) {        parsePackage(dpkg,context,file);      }    }  }}  }
class C{  public DateQueryParser(String[] dateFields){  this.dateFields=dateFields.clone();  this.solrDateMathPattern=Pattern.compile(".*(NOW|DAY|MONTH|YEAR).*");  this.instantDatePattern=Pattern.compile("\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z");}  }
class C{  public boolean isOverwrite(){  return overwrite;}  }
class C{  private void saveBooleanSettings(){  for (  String settingName : booleanSettings.keySet()) {    BooleanSetting setting=booleanSettings.get(settingName);    if (settings.setBoolean(settingName,setting.getSettingValue()) == Setting.CHANGED) {      changed(settingName);    }  }}  }
class C{  protected CriterionFilterOperation buildCriterionFilterOperation(Criteria criteria){  return new CriterionFilterOperation(criteria);}  }
class C{  public final Double3D normalize(){  return resize(1.0);}  }
class C{  @Override public void run(){  List<String> lines;  try {    lines=marksdb.fetchSignedCsv(marksdbDnlLogin,DNL_CSV_PATH,DNL_SIG_PATH);  } catch (  SignatureException|IOException|PGPException e) {    throw new RuntimeException(e);  }  ClaimsListShard claims=ClaimsListParser.parse(lines);  claims.save();  logger.infofmt("Inserted %,d claims into datastore, created at %s",claims.size(),claims.getCreationTime());}  }
class C{  void createContactsAndHosts() throws Exception {  DateTime startTime=DateTime.parse("2000-06-01T00:00:00Z");  assertCommandAndResponse("contact_create_sh8013.xml",ImmutableMap.<String,String>of(),"contact_create_response_sh8013.xml",ImmutableMap.of("CRDATE","2000-06-01T00:00:00Z"),startTime);  assertCommandAndResponse("contact_create_jd1234.xml","contact_create_response_jd1234.xml",startTime.plusMinutes(1));  assertCommandAndResponse("host_create.xml","host_create_response.xml",startTime.plusMinutes(2));  assertCommandAndResponse("host_create2.xml","host_create2_response.xml",startTime.plusMinutes(3));}  }
class C{  ClientResponse post(URI uri,String body){  return setResourceHeaders(_client.resource(uri)).type(MediaType.TEXT_XML).post(ClientResponse.class,body);}  }
class C{  static private String trimDoubleQuotesIfAny(String value){  if (value != null) {    int len=value.length();    if (len > 2 && value.charAt(0) == '\"' && value.charAt(len - 1) == '\"') {      return value.substring(1,len - 1);    }  }  return value;}  }
class C{  public String encodeBuffer(ByteBuffer aBuffer){  byte[] buf=getBytes(aBuffer);  return encodeBuffer(buf);}  }
class C{  public Task<QuotaDirectoryRestRep> createQuotaDirectory(URI fileSystemId,QuotaDirectoryCreateParam input){  return postTask(input,getByFileSystemUrl(),fileSystemId);}  }
class C{  void readClassData(InputStream infile){  try {    this.read(new DataInputStream(infile));  } catch (  FileNotFoundException ee) {    failure("cant read file");  }catch (  Error ee) {    ee.printStackTrace();    failure("fatal error");  }catch (  Exception ee) {    ee.printStackTrace();    failure("fatal exception");  }}  }
class C{  public void clear(){  setDate(null);}  }
class C{  @Inline @Entrypoint public static void floatFieldWrite(Object ref,float value,Offset offset,int locationMetadata){  if (NEEDS_FLOAT_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().floatWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @Override public void printGeneralUserData(IStructuredOutputWriter out) throws Exception {  out.simpleChild("consideringEmptyIntervals",m_percentilesWithEmptyIntervals);  out.simpleChild("intervalCount",m_intervalCount);  final IStructuredOutputWriter child=out.child("percentiles");  for (int i=0; i < NUM_BUCKETS; ++i) {    child.simpleChild("per" + i,m_percentiles[i]);  }  child.close();}  }
class C{  protected static void write(ExceptionlessOutputStream out,HashMap<String,TreeMap<String,Integer>> map){  out.writeInt(map.size());  for (  Map.Entry<String,TreeMap<String,Integer>> e : map.entrySet()) {    out.writeString(e.getKey());    out.writeInt(e.getValue().size());    for (    Map.Entry<String,Integer> ee : e.getValue().entrySet()) {      out.writeString(ee.getKey());      out.writeInt(ee.getValue());    }  }}  }
class C{  public static Join left(SqlTable<?> table,Criterion... criterions){  return new Join(table,JoinType.LEFT,criterions);}  }
class C{  @Override public boolean isEnabled(){  return super.isEnabled();}  }
class C{  public ClassicAnalyzer(CharArraySet stopWords){  super(stopWords);}  }
class C{  public VNXeCommandJob deleteFileSystemSnap(String snapId){  _logger.info("deleting file system snap:" + snapId);  String softwareVersion=getBasicSystemInfo().getSoftwareVersion();  FileSystemSnapRequests req=new FileSystemSnapRequests(_khClient,softwareVersion);  return req.deleteFileSystemSnap(snapId,softwareVersion);}  }
class C{  protected ScannerFactory(Context context){  context.put(scannerFactoryKey,this);  this.log=Log.instance(context);  this.names=Names.instance(context);  this.source=Source.instance(context);  this.tokens=Tokens.instance(context);}  }
class C{  public void calculate(Types types,Symtab symtab){  if (methods.size() < 2) {    return;  }  methods.sort(null);  coreMethod=methods.get(0);  Type coreMethodType=types.erasureRecursive(coreMethod.type);  for (  JCMethodDecl m : new ArrayList<>(methods)) {    if (m == coreMethod) {      continue;    }    if (coreMethodType.toString().equals(types.erasureRecursive(m.type).toString())) {      methods.remove(m);    }  }  if (isValid) {    defaultValues=new HashMap<>();  }  if (methods.size() > 1 && isValid) {    for (    JCMethodDecl methodDecl : methods) {      if (!methodDecl.equals(coreMethod)) {        if (methodDecl.body != null && methodDecl.body.stats.size() == 1) {          JCMethodInvocation invocation=null;          JCStatement stat=methodDecl.body.stats.get(0);          if (stat instanceof JCReturn) {            if (((JCReturn)stat).expr instanceof JCMethodInvocation) {              invocation=(JCMethodInvocation)((JCReturn)stat).expr;            }          } else           if (stat instanceof JCExpressionStatement) {            if (((JCExpressionStatement)stat).expr instanceof JCMethodInvocation) {              invocation=(JCMethodInvocation)((JCExpressionStatement)stat).expr;            }          }          if (invocation == null) {            isValid=false;          } else {            MethodSymbol method=Util.findMethodDeclarationInType(types,(TypeSymbol)methodDecl.sym.getEnclosingElement(),invocation);            if (method != null && method.getSimpleName().toString().equals(methodName)) {              String inv=invocation.meth.toString();              if (!(inv.equals(methodName) || inv.equals("this." + methodName) || inv.equals("this"))) {                isValid=false;              }              if (isValid && invocation.getArguments() != null) {                for (int i=0; i < invocation.getArguments().size(); i++) {                  JCExpression expr=invocation.getArguments().get(i);                  if (Util.isConstant(expr)) {                    defaultValues.put(i,expr);                  } else {                    if (!(expr instanceof JCIdent && i < methodDecl.params.length() && methodDecl.params.get(i).name.equals(((JCIdent)expr).name))) {                      isValid=false;                      break;                    }                  }                }              }            } else {              isValid=false;            }          }        } else {          isValid=false;        }      }    }  }}  }
class C{  public static void cancel(Context context){  Vibrator vibrator=getInstance(context);  vibrator.cancel();}  }
class C{  private void clear(){  path.reset();}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta.length != digestb.length) {    return false;  }  int result=0;  for (int i=0; i < digesta.length; i++) {    result|=digesta[i] ^ digestb[i];  }  return result == 0;}  }
class C{  @SuppressWarnings("unchecked") @Test public void wrongMethodInstrumentation(){  List<String> parameterTypes=Mockito.mock(List.class);  Mockito.when(parameterTypes.size()).thenReturn(1);  Mockito.when(parameterTypes.get(0)).thenReturn("int");  Mockito.when(rsc.getParameterTypes()).thenReturn(parameterTypes);  Mockito.when(rsc.getTargetMethodName()).thenReturn("myMethod");  Object[] parameters=new Object[]{1};  Object object=new Object();  preparedStatementParameterHook.beforeBody(0,0,object,parameters,rsc);  preparedStatementParameterHook.firstAfterBody(0,0,object,parameters,null,rsc);  preparedStatementParameterHook.secondAfterBody(coreService,0,0,object,parameters,null,rsc);  Mockito.verifyZeroInteractions(statementStorage);  Mockito.verifyZeroInteractions(coreService);}  }
class C{  static Element createDigestValueElement(Document doc,byte[] hashValue){  Element digestValueElement=doc.createElement(PREFIX_DS + Constants._TAG_DIGESTVALUE);  digestValueElement.setTextContent(encodeBase64(hashValue));  return digestValueElement;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isMACAddress(String macAddress){  String[] macBytes=macAddress.split(":");  if (macBytes.length != 6)   return false;  for (int i=0; i < 6; ++i) {    if (HEXES.indexOf(macBytes[i].toUpperCase().charAt(0)) == -1 || HEXES.indexOf(macBytes[i].toUpperCase().charAt(1)) == -1) {      return false;    }  }  return true;}  }
class C{  public OpenIntDoubleHashMap(){  this(defaultCapacity);}  }
class C{  protected ShaderVar addAttribute(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mAttributes.put(v.getName(),v);  return v;}  }
class C{  private void initRepeatVars(){  mRepeatRequestNum=0;  mRepeatPacketSize=BigDecimal.ZERO;  mRepeatTempPckSize=0;  mRepeatFinished=false;  mStartDateRepeat=0;  mRepeatTransferRateList=new ArrayList<>();}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("CV " + getCvNum() + ","+ getSecondCvNum()+ " focusGained");  }  enterField();}  }
class C{  public final String toString(){  return description;}  }
class C{  private static String loadStyleSheet(String styleSheetName){  Bundle bundle=Platform.getBundle(TypeScriptUIPlugin.PLUGIN_ID);  URL styleSheetURL=bundle.getEntry(styleSheetName);  if (styleSheetURL == null)   return null;  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(styleSheetURL.openStream()));    StringBuffer buffer=new StringBuffer(1500);    String line=reader.readLine();    while (line != null) {      buffer.append(line);      buffer.append('\n');      line=reader.readLine();    }    FontData fontData=JFaceResources.getFontRegistry().getFontData(JFaceResources.DIALOG_FONT)[0];    return HTMLPrinter.convertTopLevelFont(buffer.toString(),fontData);  } catch (  IOException ex) {    TypeScriptUIPlugin.log("Error while loading style sheets",ex);    return "";  } finally {    try {      if (reader != null)       reader.close();    } catch (    IOException e) {    }  }}  }
class C{  public void testGetRemoteFileName(){  DeployableFactory factory=new DefaultDeployableFactory();  Deployable deployable=factory.createDeployable("jonas4x","/foo/bar.war",DeployableType.WAR);  assertEquals("foo.war",deployer.getRemoteFileName(deployable,"foo.pipo",false));  assertEquals("foo.war",deployer.getRemoteFileName(deployable,"foo",false));  assertEquals("bar.war",deployer.getRemoteFileName(deployable,null,false));  deployable=factory.createDeployable("jonas4x","/foo/bar.war",DeployableType.WAR);  ((WAR)deployable).setContext("/testContext");  assertEquals("testContext.war",deployer.getRemoteFileName(deployable,null,false));  ((WAR)deployable).setContext("/");  assertEquals("rootContext.war",deployer.getRemoteFileName(deployable,null,false));}  }
class C{  @Override protected void onPostExecute(Bitmap blurredBitmap){  super.onPostExecute(blurredBitmap);  activity=null;  if (mBlurFinishedListener == null) {    throw new IllegalStateException("You must assign a valid BlurFinishedListener first!");  }  mBlurFinishedListener.onBlurFinished(blurredBitmap);  mState=State.READY;}  }
class C{  boolean addEntry(PolicyEntry pe,int index){  if (index < 0) {    policyEntries.addElement(pe);    parser.add(pe.getGrantEntry());  } else {    PolicyEntry origPe=policyEntries.elementAt(index);    parser.replace(origPe.getGrantEntry(),pe.getGrantEntry());    policyEntries.setElementAt(pe,index);  }  return true;}  }
class C{  public void endTimedEvent(@NonNull String eventName) throws IllegalStateException {  if (this.timedEvents != null) {    AnalyticsEvent timedEvent=this.timedEvents.remove(eventName);    if (timedEvent != null) {      if (providers.size() > 0) {        for (        AnalyticsKitProvider provider : providers) {          if (provider.getPriorityFilter() == null) {            throw new IllegalStateException("Your provider doesn't have a valid PriorityFilter set. Please update your provider implementation.");          }          if (provider.getPriorityFilter().shouldLog(timedEvent.getPriority())) {            provider.endTimedEvent(timedEvent);          }        }      }    } else {      throw new IllegalStateException("Attempted ending an event that was never started (or was previously ended): " + eventName);    }  } else {    throw new IllegalStateException("Attempted ending an event that was never started (or was previously ended): " + eventName);  }}  }
class C{  public static <T extends Decomposable>MatchableObject<T> decomposable(final Decomposable o){  return AsMatchable.asMatchable(o);}  }
class C{  public void deleteWalletAndWalletInfo(WalletData perWalletModelData){  if (perWalletModelData == null) {    return;  }  File walletFile=new File(perWalletModelData.getWalletFilename());  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  String walletInfoFilenameAsString=WalletInfoData.createWalletInfoFilename(perWalletModelData.getWalletFilename());  File walletInfoFile=new File(walletInfoFilenameAsString);synchronized (walletInfo) {    if (!walletFile.canWrite() || !walletInfoFile.canWrite()) {      throw new DeleteWalletException(controller.getLocaliser().getString("deleteWalletException.walletWasReadonly"));    }    try {      FileHandler.secureDelete(walletInfoFile);      FileHandler.secureDelete(walletFile);      walletInfo.setDeleted(true);    } catch (    IOException ioe) {      log.error(ioe.getClass().getCanonicalName() + " " + ioe.getMessage());      throw new DeleteWalletException(controller.getLocaliser().getString("deleteWalletException.genericCouldNotDelete",new String[]{perWalletModelData.getWalletFilename()}));    }  }  if (walletInfo.isDeleted()) {    this.bitcoinController.getModel().remove(perWalletModelData);  }  return;}  }
class C{  public static String propertiesEncode(Properties pp){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    pp.store(bos,"adempiere");  } catch (  IOException e) {    log.log(Level.SEVERE,"store",e);  }  String result=new String(bos.toByteArray());  try {    result=URLEncoder.encode(result,WebEnv.ENCODING);  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,"encode" + WebEnv.ENCODING,e);    String enc=System.getProperty("file.encoding");    try {      result=URLEncoder.encode(result,enc);      log.info("encode: " + enc);    } catch (    Exception ex) {      log.log(Level.SEVERE,"encode",ex);    }  }  return result;}  }
class C{  private void create(){  DocumentBuilderFactory docBFac;  DocumentBuilder docBuild;  try {    docBFac=DocumentBuilderFactory.newInstance();    docBuild=docBFac.newDocumentBuilder();    doc=docBuild.newDocument();  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  rootElement=doc.createElement("jplagData");  lastSubmissionID=1000000000;  rootElement.setAttribute("lastSubID",lastSubmissionID + "");  entryRoot=doc.createElement("EntriesQueue");  resultRoot=doc.createElement("ResultData");  rootElement.appendChild(entryRoot);  rootElement.appendChild(resultRoot);  doc.appendChild(rootElement);  writeXMLFile();}  }
class C{  public Address email(String email){  this.email=email;  return this;}  }
class C{  private void updatePlacementMapForCluster(ExportGroup exportGroup,Map<String,List<URI>> resourceToInitiators,Map<String,Set<URI>> initiatorToExportMaskPlacementMap){  if (exportGroup.forCluster() || exportGroup.forHost()) {    if (initiatorToExportMaskPlacementMap == null) {      initiatorToExportMaskPlacementMap=new HashMap<String,Set<URI>>();    }    for (    Map.Entry<String,List<URI>> entry : resourceToInitiators.entrySet()) {      List<URI> initiatorSet=entry.getValue();      for (      URI initiatorURI : initiatorSet) {        Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorURI);        Set<URI> exportMasksToAdd=new HashSet<URI>();        if (!initiatorToExportMaskPlacementMap.keySet().contains(Initiator.normalizePort(initiator.getInitiatorPort()))) {          for (          String port : initiatorToExportMaskPlacementMap.keySet()) {            Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),_dbClient);            if (existingInitiator != null && ((exportGroup.forCluster() && existingInitiator.getClusterName().equals(initiator.getClusterName())) || (exportGroup.forHost() && existingInitiator.getHostName().equals(initiator.getHostName())))) {              for (              URI maskId : initiatorToExportMaskPlacementMap.get(port)) {                ExportMask mask=_dbClient.queryObject(ExportMask.class,maskId);                if (exportGroup.forHost() || maskAppliesToMultipleHosts(mask)) {                  exportMasksToAdd.add(mask.getId());                }              }            }          }        }        if (!exportMasksToAdd.isEmpty()) {          initiatorToExportMaskPlacementMap.put(Initiator.normalizePort(initiator.getInitiatorPort()),exportMasksToAdd);        }      }    }  }}  }
class C{  public static ImportDeclaration createEmptyDeclaration(Range range){  return new ImportDeclaration(range);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.896 -0500",hash_original_method="C3331D73871F50BD7C19021D99D59A46",hash_generated_method="C7C216D10BC9308CDAAF149A21EDA914") @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverFinished == null) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }  } else {    if ((parameters.getNeedClientAuth() && clientCert == null) || clientKeyExchange == null || (clientCert != null && !clientKeyExchange.isEmpty() && certificateVerify == null)) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }  }}  }
class C{  public void oneFeederTerminated(){  this.feedersTerminated.incrementAndGet();  final int c=this.feedersAlive.decrementAndGet();  assert c >= 0 : "feeders = " + c;}  }
class C{  public Vset addVar(int varNumber){  if (x == fullX) {    return this;  }  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=(varNumber / VBITS - 1) * 2;    if (i >= x.length) {      growX(i + 1);    }    x[i]|=bit;    if (i + 1 < x.length) {      x[i + 1]&=~bit;    }  } else {    vset|=bit;    uset&=~bit;  }  return this;}  }
class C{  public ByteArrayOutputStream encodeValue(ValueSource value,ServerType type,boolean binary) throws IOException {  if (value.isNull())   return null;  if ((zeroDateTimeBehavior != ZeroDateTimeBehavior.NONE) && (((type.getType().typeClass() == MDateAndTime.DATE) && (value.getInt32() == 0)) || ((type.getType().typeClass() == MDateAndTime.DATETIME) && (value.getInt64() == 0)))) {switch (zeroDateTimeBehavior) {case EXCEPTION:      throw new ZeroDateTimeException();case ROUND:    value=(type.getType().typeClass() == MDateAndTime.DATETIME) ? ROUND_ZERO_DATETIME_SOURCE : ROUND_ZERO_DATE_SOURCE;  break;case CONVERT_TO_NULL:return null;}}reset();appendValue(value,type,binary);return getByteStream();}  }
class C{  public BiosCommandResult doModifyReplicationPolicy(StorageSystem system,String policyName,String schedule){  try {    IsilonApi isi=getIsilonDevice(system);    IsilonSyncPolicy policy=isi.getReplicationPolicy(policyName);    JobState policyState=policy.getLastJobState();    if (!policyState.equals(JobState.running) && !policyState.equals(JobState.paused)) {      IsilonSyncPolicy modifiedPolicy=new IsilonSyncPolicy();      modifiedPolicy.setSchedule(schedule);      modifiedPolicy.setName(policyName);      isi.modifyReplicationPolicy(policyName,modifiedPolicy);      _log.info("Modify Replication Policy- {} with new schedule - {} finished successfully",policyName,schedule);      return BiosCommandResult.createSuccessfulResult();    } else {      _log.error("Replication Policy - {} can't be MODIFIED because policy has an active job",policy.toString());      ServiceError error=DeviceControllerErrors.isilon.jobFailed("doModifyReplicationPolicy as : The policy has an active job and cannot be modified.");      return BiosCommandResult.createErrorResult(error);    }  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @Override public void stopTransition(){  for (int i=0, size=mTransitionListenerList.size(); i < size; i++) {    mTransitionListenerList.get(i).onTransitionEnd(this);  }  for (int i=0, size=mTransitionList.size(); i < size; i++) {    mTransitionList.get(i).stopTransition();  }}  }
class C{  public static File toFile(String path){  return new File(path.replace(FILE_ANTI_SEPERATOR,FILE_SEPERATOR));}  }
class C{  public static String replaceAll(String s,String before,String after){  int next=s.indexOf(before);  if (next < 0) {    return s;  }  StringBuilder buff=new StringBuilder(s.length() - before.length() + after.length());  int index=0;  while (true) {    buff.append(s.substring(index,next)).append(after);    index=next + before.length();    next=s.indexOf(before,index);    if (next < 0) {      buff.append(s.substring(index));      break;    }  }  return buff.toString();}  }
class C{  private Segment createMappedSegment(SegmentDescriptor descriptor){  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());  Buffer buffer=MappedBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);  descriptor.copyTo(buffer);  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Created segment: {}",segment);  return segment;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  StringBuffer sb=new StringBuffer("DELETE FROM AD_TreeNodeCMM ").append(" WHERE Node_ID=").append(get_IDOld()).append(" AND AD_Tree_ID=").append(getAD_Tree_ID());  int no=DB.executeUpdate(sb.toString(),get_TrxName());  if (no > 0)   log.fine("#" + no + " - TreeType=CMM"); else   log.warning("#" + no + " - TreeType=CMM");  return no > 0;}  }
class C{  public FastVectorEnumeration(FastVector vector,int special){  m_Vector=vector;  m_SpecialElement=special;  if (special == 0) {    m_Counter=1;  } else {    m_Counter=0;  }}  }
class C{  public void removeBucketActions(String prefix,String bucketResource,boolean readOnlyInUse,boolean writeOnlyInUse){  if (this.resources.size() > 1) {    this.resources.remove(bucketResource);    return;  }  if (!readOnlyInUse) {    removeReadOnlyBucketActions(prefix);  }  if (!writeOnlyInUse) {    removeWriteOnlyBucketActions();  }  return;}  }
class C{  public static void shutDownActorSystemForce(){  if (!actorSystem.isTerminated()) {    logger.info("shutting down actor system...");    actorSystem.shutdown();    actorSystem.awaitTermination(timeOutDuration);    logger.info("Actor system has been shut down.");  } else {    logger.info("Actor system has been terminated already. NO OP.");  }}  }
class C{  public Geo subtract(Geo b,Geo ret){  ret.initialize(this.x() - b.x(),this.y() - b.y(),this.z() - b.z());  return ret;}  }
class C{  public static APITransaction fromProtobuf(BCSAPIMessage.TX pt) throws HyperLedgerException {  APITransaction.Builder builder=new APITransaction.Builder();  builder.lockTime(pt.getLocktime());  builder.version(pt.getVersion());  if (pt.getInputsCount() > 0) {    for (    BCSAPIMessage.TXIN i : pt.getInputsList()) {      builder.inputs(TransactionInput.fromProtobuf(i));    }  }  if (pt.getOutputsCount() > 0) {    for (    BCSAPIMessage.TXOUT o : pt.getOutputsList()) {      builder.outputs(TransactionOutput.fromProtobuf(o));    }  }  if (pt.hasBlock()) {    builder.blockID(new BID(pt.getBlock().toByteArray()));  }  return builder.build();}  }
class C{  @Interruptible private static int pickAllocatorForType(RVMType type){  int allocator=Plan.ALLOC_DEFAULT;  if (type.isArrayType()) {    RVMType elementType=type.asArray().getElementType();    if (elementType.isPrimitiveType() || elementType.isUnboxedType()) {      allocator=Plan.ALLOC_NON_REFERENCE;    }  }  if (type.isNonMoving()) {    allocator=Plan.ALLOC_NON_MOVING;  }  byte[] typeBA=type.getDescriptor().toByteArray();  if (Selected.Constraints.get().withGCspy()) {    if (isPrefix("Lorg/mmtk/vm/gcspy/",typeBA) || isPrefix("[Lorg/mmtk/vm/gcspy/",typeBA)) {      allocator=Plan.ALLOC_GCSPY;    }  }  if (isPrefix("Lorg/jikesrvm/tuningfork",typeBA) || isPrefix("[Lorg/jikesrvm/tuningfork",typeBA) || isPrefix("Lcom/ibm/tuningfork/",typeBA)|| isPrefix("[Lcom/ibm/tuningfork/",typeBA)|| isPrefix("Lorg/mmtk/",typeBA)|| isPrefix("[Lorg/mmtk/",typeBA)|| isPrefix("Lorg/jikesrvm/mm/",typeBA)|| isPrefix("[Lorg/jikesrvm/mm/",typeBA)|| isPrefix("Lorg/jikesrvm/jni/JNIEnvironment;",typeBA)) {    allocator=Plan.ALLOC_NON_MOVING;  }  return allocator;}  }
class C{  public static boolean isCompatibleWithThrowsClause(Throwable ex,Class<?>... declaredExceptions){  if (!isCheckedException(ex)) {    return true;  }  if (declaredExceptions != null) {    for (    Class<?> declaredException : declaredExceptions) {      if (declaredException.isInstance(ex)) {        return true;      }    }  }  return false;}  }
class C{  private void connect(CompletableFuture<Connection> future){  if (!selector.hasNext()) {    LOGGER.debug("Failed to connect to the cluster");    future.complete(null);  } else {    Address address=selector.next();    LOGGER.debug("Connecting to {}",address);    client.connect(address).whenComplete(null);  }}  }
class C{  public StopFilter(TokenStream in,CharArraySet stopWords){  super(in,stopWords);}  }
class C{  public void truncate(long length) throws SerialException {  isValid();  if (length > len) {    throw new SerialException("Length more than what can be truncated");  } else   if ((int)length == 0) {    buf=new byte[0];    len=length;  } else {    len=length;    buf=this.getBytes(1,(int)len);  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.866 -0500",hash_original_method="18A8B0A5C57D2FDE667C353F321E4EE3",hash_generated_method="91E7C04675C1665D2072E8C650ADA4D1") public boolean isPendingUSSD(){  return isPendingUSSD;}  }
class C{  private KeyMID(final int mid,final byte[] address,final int port){  if (mid < 0 || mid > 1 << 16) {    throw new IllegalArgumentException("MID must not be a 16 bit unsigned int");  } else   if (address == null) {    throw new NullPointerException("address must not be null");  } else   if (port < 0 || port > MAX_PORT_NO) {    throw new IllegalArgumentException("Port must be a 16 bit unsigned int");  } else {    this.MID=mid;    this.address=address;    this.port=port;    this.hash=createHashCode();  }}  }
class C{  public java_cup.runtime.token scan() throws java.lang.Exception {  return scanner.next_token();}  }
class C{  public DoubleConverter(){  super(true);}  }
class C{  public boolean isNoImplicitUseStrict(){  return noImplicitUseStrict;}  }
class C{  static boolean isOracle(){  if (s_type == null)   getServerType();  if (s_type != null)   return TYPE_ORACLE.equals(s_type);  return false;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object newInstance(java.lang.Object[])")) {    java_lang_reflect_Constructor_newInstance(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static void deleteValue(String branch,String entry) throws IOException, InterruptedException {  if (entry == null) {    String[] cmd=new String[]{"reg","delete",cleanBrunch(branch),"/f"};    executeQuery(cmd);  } else {    String[] cmd=new String[]{"reg","delete",cleanBrunch(branch),"/v",entry,"/f"};    executeQuery(cmd);  }}  }
class C{  protected TemplateVariable createVariable(TemplateVariableType type,String name,int[] offsets){  return new TemplateVariable(type,name,name,offsets);}  }
class C{  protected static Object object(float element){  return new Float(element);}  }
class C{  public static void assertZero(int value){  try {    Assert.assertEquals(0,value);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static byte[] flipAllBits(byte[] bytes,int index){  byte[] ret=new byte[bytes.length - index];  for (int i=0; i < ret.length; i++) {    ret[i]=(byte)(bytes[index + i] ^ 0xff);  }  return ret;}  }
class C{  public Vertex applyWORD(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex nil=network.createVertex(Primitive.NULL);  if (arguments.size() == 0) {    return nil;  }  StringWriter writer=new StringWriter();  List<Vertex> words=new ArrayList<Vertex>();  for (  Relationship relationship : arguments) {    Vertex word=relationship.getTarget().applyQuotient(variables,network);    if (word.instanceOf(Primitive.LIST)) {      List<Vertex> elements=word.orderedRelations(Primitive.SEQUENCE);      if (elements != null) {        words.addAll(elements);      }    } else {      words.add(word);    }  }  Vertex previousWord=nil;  for (int index=0; index < words.size(); index++) {    Vertex word=words.get(index);    Vertex nextWord=nil;    if (words.size() > (index + 1)) {      nextWord=words.get(index + 1);    }    word=Language.getWordFollowing(word,previousWord,nextWord,network);    writer.write(String.valueOf(word.getData()));    if ((index + 1) < words.size()) {      writer.write(" ");    }    previousWord=word;  }  return network.createWord(writer.toString());}  }
class C{  private Iterable<Entity> query(boolean keysOnly){  Query query=new Query(getId());  if (keysOnly) {    query.setKeysOnly();  }  return dataStoreService.prepare(query).asIterable();}  }
class C{  @Override public void init(RandomGenerator random){  this.random=random;}  }
class C{  @SuppressWarnings("unchecked") public static <V>CharArrayMap<V> emptyMap(){  return (CharArrayMap<V>)EMPTY_MAP;}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof Copies;}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public VcpcRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public static <T>T doInTransaction(TransactionCallback<T> callback) throws Exception {  return CTX.doInTransaction(callback);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DEFINED_FIELD:setDefinedField((TStructField)newValue);return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private GoogleBaseQuery createQuery(){  URL queryUrl;  if (ownItems) {    queryUrl=urlFactory.getItemsFeedURL();  } else {    queryUrl=urlFactory.getSnippetsFeedURL();  }  GoogleBaseQuery query=new GoogleBaseQuery(queryUrl);  query.setMaxResults(maxResults);  if (startIndex > 0) {    query.setStartIndex(startIndex + 1);  }  query.setGoogleBaseQuery(createQueryString());  return query;}  }
class C{  public synchronized void removeListener(TestListener listener){  fListeners.remove(listener);}  }
class C{  public LogisticRegressionOptimization(ExampleSet exampleSet,boolean addIntercept,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,RandomGenerator random,LoggingHandler logging,Operator executingOperator){  super(-1.0d,1.0d,popSize,addIntercept ? exampleSet.getAttributes().size() + 1 : exampleSet.getAttributes().size(),initType,maxIterations,generationsWithoutImprovement,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,false,random,logging,executingOperator);  this.logging=logging;  this.exampleSet=exampleSet;  this.label=exampleSet.getAttributes().getLabel();  this.weight=exampleSet.getAttributes().getWeight();  this.addIntercept=addIntercept;}  }
class C{  public static SipRequest createAck(SipDialogPath dialog) throws PayloadException {  try {    Request ack;    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.ACK);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,dialog.getRemoteTag());    List<ViaHeader> vias=dialog.getSipStack().getViaHeaders();    vias.get(0).setBranch(Utils.getInstance().generateBranchId());    ack=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.ACK,callIdHeader,cseqHeader,fromHeader,toHeader,vias,SipUtils.buildMaxForwardsHeader());    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      ack.addHeader(routeHeader);    }    ack.addHeader(dialog.getSipStack().getContact());    ack.addHeader(SipUtils.buildUserAgentHeader());    SipUtils.buildAllowHeader(ack);    ViaHeader viaHeader=(ViaHeader)ack.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(ack);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode05.class,args);}  }
class C{  public boolean isCacheable(){  return true;}  }
class C{  protected void paintTextRuns(List textRuns,Graphics2D g2d){  for (int i=0; i < textRuns.size(); i++) {    TextRun textRun=(TextRun)textRuns.get(i);    AttributedCharacterIterator runaci=textRun.getACI();    runaci.first();    TextPaintInfo tpi=(TextPaintInfo)runaci.getAttribute(PAINT_INFO);    if ((tpi != null) && (tpi.composite != null)) {      g2d.setComposite(tpi.composite);    }    textRun.getLayout().draw(g2d);  }}  }
class C{  private void loadRequirementsFromIntent(){  Intent i=activity.getIntent();  neededRequirements=(neededRequirements | i.getIntExtra(INTENT_REQUIREMENTS_BITMAP,0));}  }
class C{  private void remove(){  before.after=after;  after.before=before;}  }
class C{  public Object contents(){  return m_Contents;}  }
class C{  protected void deleteInverseRelation(String relationName,Object inverseEntity){  String inverseRelationName=getInverseRelationField(relationName);  if (!inverseRelationName.equals("")) {    Class<?> inverseRelationType=dictionary.getType(inverseEntity.getClass(),inverseRelationName);    PersistentResource inverseResource=new PersistentResource(this,inverseEntity,getRequestScope());    Object inverseRelation=inverseResource.getValueUnchecked(inverseRelationName);    if (inverseRelation == null) {      return;    }    if (inverseRelation instanceof Collection) {      inverseResource.delFromCollection((Collection)inverseRelation,inverseRelationName,this,true);    } else     if (inverseRelationType.equals(this.getResourceClass())) {      inverseResource.nullValue(inverseRelationName,this);    } else {      throw new InternalServerErrorException("Relationship type mismatch");    }    inverseResource.markDirty();  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  double[] vals=new double[outputFormatPeek().numAttributes()];  for (int i=0; i < m_SelectedAttributes.length; i++) {    int current=m_SelectedAttributes[i];    vals[i]=instance.value(current);  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  protected JsonParser _createJsonParser(InputStream in,IOContext ctxt) throws IOException, JsonParseException {  return new ByteSourceBootstrapper(ctxt,in).constructParser(_parserFeatures,_objectCodec,_rootByteSymbols,_rootCharSymbols);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  private static double CallNonvirtualDoubleMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualDoubleMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Double,true);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void writeReverseIntOld(IoBuffer out,int value){  byte[] bytes=new byte[4];  IoBuffer rev=IoBuffer.allocate(4);  rev.putInt(value);  rev.flip();  bytes[3]=rev.get();  bytes[2]=rev.get();  bytes[1]=rev.get();  bytes[0]=rev.get();  out.put(bytes);  rev.free();  rev=null;}  }
class C{  public RDFFormat(String name,String mimeType,Charset charset,Collection<String> fileExtensions,boolean supportsNamespaces,boolean supportsContexts){  this(name,Arrays.asList(mimeType),charset,fileExtensions,supportsNamespaces,supportsContexts);}  }
class C{  public GoldSource(final String itemName){  this.itemName=itemName;  put("class","source");  put("name","gold_source");  setMenu("Prospect");  setDescription("You see something golden glittering.");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static TopTreebankNode parse(String parse,String text,int textOffset){  try {    TopTreebankNode topNode=new TopTreebankNode();    parse=prepareString(parse);    StringBuffer consumedText=new StringBuffer();    if (text != null) {      textOffset=movePastWhiteSpaceChars(text,textOffset);      consumedText.append(text.substring(0,textOffset));    }    Stack<Integer> parseOffsetStack=new Stack<Integer>();    Stack<Integer> plainTextOffsetStack=new Stack<Integer>();    Stack<TreebankNode> parseStack=new Stack<TreebankNode>();    for (int ci=0; ci < parse.length(); ci++) {      char c=parse.charAt(ci);      if (c == '(') {        parseOffsetStack.push(ci);        plainTextOffsetStack.push(consumedText.length());      } else       if (c == ')') {        int begin=parseOffsetStack.pop();        int end=ci;        String subParse=parse.substring(begin,end + 1);        int textBegin=plainTextOffsetStack.pop();        TreebankNode node=getLeafNode(subParse);        if (node != null) {          node.setTopNode(topNode);          node.setParseBegin(begin);          node.setParseEnd(end + 1);          String token=node.getText();          if (token.length() > 0) {            int realBegin=movePastWhiteSpaceChars(text,textBegin);            consumedText.append(text.substring(textBegin,realBegin));            consumedText.append(token);            node.setTextBegin(realBegin);            node.setTextEnd(realBegin + token.length());          } else {            node.setTextBegin(textBegin);            node.setTextEnd(textBegin + token.length());          }          checkText(node,text);          parseStack.push(node);        } else {          if (parse.lastIndexOf(')') == ci)           node=topNode; else           node=new TreebankNode();          node.setTopNode(topNode);          node.setParseBegin(begin);          node.setParseEnd(end + 1);          String type=getType(subParse);          node.setType(getTypeFromType(type));          node.setTags(getTagsFromType(type));          node.setLeaf(false);          while (parseStack.size() > 0 && parseStack.peek().getParseBegin() > node.getParseBegin()) {            TreebankNode child=parseStack.pop();            node.addChild(child);            child.setParent(node);          }          int realBegin=movePastWhiteSpaceChars(text,textBegin);          node.setTextBegin(realBegin);          node.setTextEnd(Math.max(realBegin,consumedText.length()));          try {            node.setText(consumedText.substring(node.getTextBegin(),node.getTextEnd()));          } catch (          StringIndexOutOfBoundsException sioobe) {            node.setText("");          }          checkText(node,text);          parseStack.push(node);        }      }    }    topNode.setTreebankParse(parse);    topNode.initTerminalNodes();    return topNode;  } catch (  RuntimeException e) {    throw new IllegalArgumentException("exception thrown when parsing the following: " + parse,e);  }}  }
class C{  private void testMyOwnSecretKey(byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  SecretKey key1=getSecretKeyForPBKDF2(algoForTest,salt);  SecretKey key2=getMyOwnSecretKey(salt);  if (!Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    throw new RuntimeException("We shouldn't be here. The key1 and key2 values in its" + " primary encoding format have to be the same!");  }  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoForTest);  SecretKey key3=skf.translateKey(key2);  if (!Arrays.equals(key1.getEncoded(),key3.getEncoded())) {    System.out.println("Key1=" + new String(key1.getEncoded()) + " key3="+ new String(key3.getEncoded())+ " salt="+ new String(salt));    throw new RuntimeException("testMyOwnSecretKey test case failed: the key1  and key3" + " values in its primary encoding format are not" + " the same for " + algoForTest + " algorithm.");  }}  }
class C{  public static double kthSmallestValue(double[] array,int k){  int[] index=new int[array.length];  for (int i=0; i < index.length; i++) {    index[i]=i;  }  return array[index[select(array,index,0,array.length - 1,k)]];}  }
class C{  public void testSerializable() throws Exception {  check(EntitySerializable.class);}  }
class C{  public float crs(float x,float y){  return this.x * y - this.y * x;}  }
class C{  public boolean isEmpty(int dim){  return getBegin(dim) == -1;}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  @Override public boolean addAll(int index,Collection<? extends E> collection){  int s=size;  if (index > s || index < 0) {    throwIndexOutOfBoundsException(index,s);  }  Object[] newPart=collection.toArray();  int newPartSize=newPart.length;  if (newPartSize == 0) {    return false;  }  Object[] a=array;  int newSize=s + newPartSize;  if (newSize <= a.length) {    System.arraycopy(a,index,a,index + newPartSize,s - index);  } else {    int newCapacity=newCapacity(newSize - 1);    Object[] newArray=new Object[newCapacity];    System.arraycopy(a,0,newArray,0,index);    System.arraycopy(a,index,newArray,index + newPartSize,s - index);    array=a=newArray;  }  System.arraycopy(newPart,0,a,index,newPartSize);  size=newSize;  modCount++;  return true;}  }
class C{  @Timed @ExceptionMetered @GET public Response findClients(@Auth User user,@DefaultValue("") @QueryParam("name") String name){  if (name.isEmpty()) {    return Response.ok().entity(listClients(user)).build();  }  return Response.ok().entity(getClientByName(user,name)).build();}  }
class C{  public int E(){  return E;}  }
class C{  private final void turbulence(final int[] rgb,double pointX,double pointY,final double[] fSum,final double[] noise){  fSum[0]=fSum[1]=fSum[2]=fSum[3]=0;  double ratio=255;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;switch (channels.length) {case 4:    for (int nOctave=0; nOctave < numOctaves; nOctave++) {      noise2(noise,pointX,pointY);      if (noise[0] < 0)       fSum[0]-=(noise[0] * ratio); else       fSum[0]+=(noise[0] * ratio);      if (noise[1] < 0)       fSum[1]-=(noise[1] * ratio); else       fSum[1]+=(noise[1] * ratio);      if (noise[2] < 0)       fSum[2]-=(noise[2] * ratio); else       fSum[2]+=(noise[2] * ratio);      if (noise[3] < 0)       fSum[3]-=(noise[3] * ratio); else       fSum[3]+=(noise[3] * ratio);      ratio*=.5;      pointX*=2;      pointY*=2;    }  rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;rgb[1]=(int)fSum[1];if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[2]=(int)fSum[2];if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;rgb[3]=(int)fSum[3];if ((rgb[3] & 0xFFFFFF00) != 0) rgb[3]=((rgb[3] & 0x80000000) != 0) ? 0 : 255;break;case 3:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2(noise,pointX,pointY);if (noise[2] < 0) fSum[2]-=(noise[2] * ratio); else fSum[2]+=(noise[2] * ratio);if (noise[1] < 0) fSum[1]-=(noise[1] * ratio); else fSum[1]+=(noise[1] * ratio);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;}rgb[2]=(int)fSum[2];if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;rgb[1]=(int)fSum[1];if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;case 2:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2(noise,pointX,pointY);if (noise[1] < 0) fSum[1]-=(noise[1] * ratio); else fSum[1]+=(noise[1] * ratio);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;}rgb[1]=(int)fSum[1];if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;case 1:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2(noise,pointX,pointY);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;}rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;}}  }
class C{  public static AndroidContext instance(){  if (sInstance == null) {    throw new IllegalStateException("Android context was not initialized.");  }  return sInstance;}  }
class C{  public boolean status(){  return true;}  }
class C{  public NotificationChain basicSetExitSequence(Sequence newExitSequence,NotificationChain msgs){  Sequence oldExitSequence=exitSequence;  exitSequence=newExitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE,oldExitSequence,newExitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @SuppressWarnings("unused") public static void blackhole(float value){}  }
class C{  @Override public double distance(Instance first,Instance second){  return Math.pow(distance(first,second,Double.POSITIVE_INFINITY),1 / m_Order);}  }
class C{  public String toString(){  return " at character " + this.myIndex + " of "+ this.mySource;}  }
class C{  @Deprecated public void packageDeclaration(long off,IdentifierToken nm){  packageDeclaration(off,nm.id);}  }
class C{  @Override public void onStart(){  super.onStart();  ButtonClickerObserver buttonClickerObserver=new ButtonClickerObserver(this);  PurchasingManager.registerObserver(buttonClickerObserver);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  final DefaultHttpParams clone=(DefaultHttpParams)super.clone();  if (parameters != null) {    clone.parameters=(HashMap)parameters.clone();  }  clone.setDefaults(defaults);  return clone;}  }
class C{  @Override public String datasetProviderTipText(){  return "The dataset provider to use.";}  }
class C{  @Override public void onBackPressed(){  View formatTextSliderView=findViewById(R.id.formatTextSlider);  View drawPanelSliderView=findViewById(R.id.drawPanelSlider);  if (formatTextSliderView.getVisibility() == View.VISIBLE) {    formatTextSliderView.setVisibility(View.GONE);  } else   if (drawPanelSliderView.getVisibility() == View.VISIBLE) {    drawPanelSliderView.setVisibility(View.GONE);  } else {    saveOrUpdateNote(null);  }}  }
class C{  public ProtocolHandshake(){  super(null);}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] sourceValid,boolean[] destValid){  int startTime=0;  int endTime=0;  boolean lookingForStart=true;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  for (int t=0; t < destValid.length; t++) {    if (lookingForStart) {      if (destValid[t] && sourceValid[t - timeDiff]) {        endTime=t;        lookingForStart=false;        if (t == destValid.length - 1) {          int[] timePair=new int[2];          timePair[0]=startTime;          timePair[1]=endTime;          startAndEndTimePairs.add(timePair);        }      } else {        startTime++;      }    } else {      boolean terminateSequence=false;      if (destValid[t] && sourceValid[t - timeDiff]) {        endTime=t;      } else {        terminateSequence=true;      }      if (t == destValid.length - 1) {        terminateSequence=true;      }      if (terminateSequence) {        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=endTime;        startAndEndTimePairs.add(timePair);        lookingForStart=true;        startTime=t + 1;      }    }  }  return startAndEndTimePairs;}  }
class C{  public String namespace(String name,boolean attribute){  int colon=name.indexOf(':');  if (colon == -1) {    return attribute ? "" : theSchema.getURI();  }  String prefix=name.substring(0,colon);  if (prefix.equals("xml")) {    return "http://www.w3.org/XML/1998/namespace";  } else {    return ("urn:x-prefix:" + prefix).intern();  }}  }
class C{  public <T extends LayoutType>Class<T> genPrimArrayImpl(final String className){  try {    @SuppressWarnings("unchecked") Class<T> implCls=(Class<T>)implClassloader.loadPrimArrayClass(className);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void saveDomoticzServers(boolean saveActiveServer){  if (saveActiveServer)   putServerInList(mActiveServer);  String activeServer=gson.toJson(mActiveServer);  String serversSettings=gson.toJson(mServerList);  if (editor == null)   editor=prefs.edit();  editor.putString(SERVER_PREFS_ACTIVE,activeServer).apply();  editor.putString(SERVER_PREFS,serversSettings).apply();}  }
class C{  public ContentFilterTest(String name){  super(name);}  }
class C{  public void initCPTs(BayesNet bayesNet) throws Exception {  throw new Exception("Incorrect BayesNetEstimator: use subclass instead.");}  }
class C{  public boolean hasDocumentSource(){  return hasExtension(DocumentSource.class);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  boolean isBeingUsed(){  return this.usageCount > 0;}  }
class C{  public boolean isClosing(){  return _lifecycle.isDestroying();}  }
class C{  @SmallTest public void testBuildFields() throws Exception {  assertNotEmpty("ID",Build.ID);  assertNotEmpty("DISPLAY",Build.DISPLAY);  assertNotEmpty("PRODUCT",Build.PRODUCT);  assertNotEmpty("DEVICE",Build.DEVICE);  assertNotEmpty("BOARD",Build.BOARD);  assertNotEmpty("BRAND",Build.BRAND);  assertNotEmpty("MODEL",Build.MODEL);  assertNotEmpty("VERSION.INCREMENTAL",Build.VERSION.INCREMENTAL);  assertNotEmpty("VERSION.RELEASE",Build.VERSION.RELEASE);  assertNotEmpty("TYPE",Build.TYPE);  Assert.assertNotNull("TAGS",Build.TAGS);  assertNotEmpty("FINGERPRINT",Build.FINGERPRINT);  Assert.assertTrue("TIME",Build.TIME > 0);  assertNotEmpty("USER",Build.USER);  assertNotEmpty("HOST",Build.HOST);}  }
class C{  public PrinterInfo(String info,Locale locale){  super(info,locale);}  }
class C{  private static Address GetStringUTFChars(JNIEnvironment env,int strJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetStringUTFChars  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  String str=(String)env.getJNIRef(strJREF);  if (str == null) {    return Address.zero();  }  int len=UTF8Convert.utfLength(str) + 1;  Address copyBuffer=sysCall.sysMalloc(len);  if (copyBuffer.isZero()) {    env.recordException(new OutOfMemoryError());    return Address.zero();  }  try {    JNIGenericHelpers.createUTFForCFromString(str,copyBuffer,len);    JNIGenericHelpers.setBoolStar(isCopyAddress,true);    return copyBuffer;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  if ((systemName.charAt(0) != 'V') || (systemName.charAt(1) != type)) {    log.error("illegal character in header field system name: " + systemName);    return (false);  }  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num;    try {      num=Integer.valueOf(systemName.substring(2)).intValue();    } catch (    Exception e) {      log.error("illegal character in number field system name: " + systemName);      return (false);    }    if ((num < 1) || (num >= 128000)) {      log.error("number field out of range in system name: " + systemName);      return (false);    }    if ((num - ((num / 1000) * 1000)) == 0) {      log.error("bit number not in range 1 - 999 in system name: " + systemName);      return (false);    }  } else {    if (s.length() == 0) {      log.error("no node address before 'B' in system name: " + systemName);      return (false);    }    int num;    try {      num=Integer.valueOf(s).intValue();    } catch (    Exception e) {      log.error("illegal character in node address field of system name: " + systemName);      return (false);    }    if ((num < 0) || (num >= 128)) {      log.error("node address field out of range in system name: " + systemName);      return (false);    }    try {      num=Integer.parseInt(systemName.substring(k,systemName.length()));    } catch (    Exception e) {      log.error("illegal character in bit number field of system name: " + systemName);      return (false);    }    if ((num < 1) || (num > 32)) {      log.error("bit number field out of range in system name: " + systemName);      return (false);    }  }  return true;}  }
class C{  public Metadata extract(){  return extract(new Metadata());}  }
class C{  public BytesRef hash(){  return hash;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_PROVIDED_BY_RUNTIME:      return TypesPackage.TOBJECT_PROTOTYPE___IS_PROVIDED_BY_RUNTIME;case TypesPackage.TYPE___IS_FINAL:    return TypesPackage.TOBJECT_PROTOTYPE___IS_FINAL;case TypesPackage.TYPE___GET_TYPE_ACCESS_MODIFIER:  return TypesPackage.TOBJECT_PROTOTYPE___GET_TYPE_ACCESS_MODIFIER;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ContainerType.class) {switch (baseOperationID) {case TypesPackage.CONTAINER_TYPE___GET_OWNED_CTOR:return TypesPackage.TOBJECT_PROTOTYPE___GET_OWNED_CTOR;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TClassifier.class) {switch (baseOperationID) {case TypesPackage.TCLASSIFIER___IS_FINAL:return TypesPackage.TOBJECT_PROTOTYPE___IS_FINAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == AccessibleTypeElement.class) {switch (baseOperationID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME:return TypesPackage.TOBJECT_PROTOTYPE___IS_PROVIDED_BY_RUNTIME;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER:return TypesPackage.TOBJECT_PROTOTYPE___GET_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED:return TypesPackage.TOBJECT_PROTOTYPE___IS_EXPORTED;default :return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ArrayLike.class) {switch (baseOperationID) {case TypesPackage.ARRAY_LIKE___GET_ELEMENT_TYPE:return TypesPackage.TOBJECT_PROTOTYPE___GET_ELEMENT_TYPE;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static String stripPrefix(String value,String prefix){  if (value.startsWith(prefix)) {    return value.substring(prefix.length());  }  return value;}  }
class C{  public DefaultRequestDirector(){}  }
class C{  private X509Certificate generateX509Certificate(PrivateKey privateKey) throws CertificateEncodingException, InvalidKeyException, IllegalStateException, NoSuchAlgorithmException, SignatureException, IOException {  if (version != 3) {    throw new NotImplementedException();  }  certificateGenerator=new X509V3CertificateGenerator();  certificateGenerator.setSerialNumber(serial);  certificateGenerator.setIssuerDN(this.issuer);  certificateGenerator.setNotBefore(notBefore);  certificateGenerator.setNotAfter(notAfter);  certificateGenerator.setSubjectDN(subject);  certificateGenerator.setSignatureAlgorithm(signatureAlgorithm);  certificateGenerator.setPublicKey(publicKey);  if (hasBasicConstraints) {    if (isCA && hasNoPathLimit) {      certificateGenerator.addExtension(X509Extensions.BasicConstraints,true,new BasicConstraints(true));    } else     if (isCA && !hasNoPathLimit) {      certificateGenerator.addExtension(X509Extensions.BasicConstraints,true,new BasicConstraints(pathLimit));    } else {      certificateGenerator.addExtension(X509Extensions.BasicConstraints,true,new BasicConstraints(false));    }  }  if (keyUsage.size() > 0) {    int allKeyUsages=0;    for (    int i : keyUsage) {      allKeyUsages|=i;    }    certificateGenerator.addExtension(X509Extensions.KeyUsage,true,new KeyUsage(allKeyUsages));  }  if (extendedKeyUsage.size() > 0) {    ASN1EncodableVector allExtendedKeyUsages=new ASN1EncodableVector();    for (    KeyPurposeId i : extendedKeyUsage) {      allExtendedKeyUsages.add(i);    }    certificateGenerator.addExtension(X509Extensions.ExtendedKeyUsage,false,new DERSequence(allExtendedKeyUsages));  }  if (subjectAlternativeName.size() > 0) {    GeneralNames generalNames=new GeneralNames(subjectAlternativeName.toArray(new GeneralName[subjectAlternativeName.size()]));    certificateGenerator.addExtension(X509Extensions.SubjectAlternativeName,true,generalNames);  }  if (setSubjectKeyIdentifier == true) {    JcaX509ExtensionUtils j=new JcaX509ExtensionUtils();    certificateGenerator.addExtension(X509Extensions.SubjectKeyIdentifier,false,j.createSubjectKeyIdentifier(publicKey));  }  if (!subjectKeyIdentifier.isEmpty() && setSubjectKeyIdentifier == false) {    byte[] ski=CertificateHelper.hexStringToByteArray(subjectKeyIdentifier);    SubjectKeyIdentifier aKI=new SubjectKeyIdentifier(ski);    certificateGenerator.addExtension(X509Extensions.SubjectKeyIdentifier,true,aKI);  }  if (issuerAlternativeName.size() > 0) {    GeneralNames generalNames=new GeneralNames(issuerAlternativeName.toArray(new GeneralName[issuerAlternativeName.size()]));    certificateGenerator.addExtension(X509Extensions.IssuerAlternativeName,true,generalNames);  }  if (setAuthorityKeyIdentifier == true && issuerCertificate != null) {    JcaX509ExtensionUtils j=new JcaX509ExtensionUtils();    certificateGenerator.addExtension(X509Extensions.AuthorityKeyIdentifier,true,j.createAuthorityKeyIdentifier(issuerCertificate));  }  if (!authorityKeyIdentifier.isEmpty() && setAuthorityKeyIdentifier == false) {    byte[] aki=CertificateHelper.hexStringToByteArray(authorityKeyIdentifier);    AuthorityKeyIdentifier aKI=new AuthorityKeyIdentifier(aki);    certificateGenerator.addExtension(X509Extensions.AuthorityKeyIdentifier,true,aKI);  }  for (  BurpCertificateExtension e : burpCertificateExtensions) {    ASN1Encodable extension=X509ExtensionUtil.fromExtensionValue(e.getExtensionValue());    certificateGenerator.addExtension(e.getOid(),e.isCritical(),extension);  }  return certificateGenerator.generate(privateKey);}  }
class C{  @Override public void close() throws IOException {  _next.close();}  }
class C{  public boolean isProcessedOK(){  return m_ok;}  }
class C{  public void seek(long pos) throws IOException {  if (pos < 0) {    throw new IOException(PropertyUtil.getString("MemoryCacheSeekableStream0"));  }  pointer=pos;}  }
class C{  public Iterator<Drawable> iterator(){  return components.iterator();}  }
class C{  public boolean isEntry(){  return !isRegion();}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  private Node createSecurityTokenReference() throws ParserException {  ObjectFactory secExtFactory=new ObjectFactory();  SecurityTokenReferenceType stRef=secExtFactory.createSecurityTokenReferenceType();  KeyIdentifierType ki=secExtFactory.createKeyIdentifierType();  ki.setValue(_assertionId);  ki.setValueType(SAML_KEY_ID_TYPE);  stRef.getAny().add(ki);  stRef.getOtherAttributes().put(new QName(WSSE11_NAMESPACE,WSSE11_TOKEN_TYPE_ATTR_NAME,WSSE11_PREFIX),SAML_TOKEN_TYPE);  return marshallJaxbElement(stRef).getFirstChild();}  }
class C{  void execute(){  int f=Integer.parseInt(from.getText());  int t=Integer.parseInt(to.getText());  SerialMessage m=new SerialMessage();  m.setElement(0,0x80 + (f & 0x7F));  m.setElement(1,(t & 0x7F));  m.setElement(2,0x80 + (f & 0x7F));  m.setElement(3,0x60);  m.setParity();  SerialTrafficController.instance().sendSerialMessage(m,null);}  }
class C{  public static void validateNotNull(Object object){  validateNotNull(object,"");}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processStartedState(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public static String flatten(List lines,String sep){  return flatten(lines.toArray(new Object[lines.size()]),sep);}  }
class C{  public static void assertTrue(boolean expression){  Assert.True(expression);}  }
class C{  private boolean isValidJpegHeaderBytes(InputStream fileStream) throws IOException {  byte[] header=new byte[2];  int bytesread=fileStream.read(header,0,2);  if (bytesread != 2)   throw new IOException("Cannot read 2 bytes from stream");  return (header[0] & 0xFF) == 0xFF && (header[1] & 0xFF) == 0xD8;}  }
class C{  protected Matcher<? super HttpMethodBase> isForbiden(){  return responsesWith(403);}  }
class C{  String writeConfigFileV3(Matsim4UrbansimConfigType m4uConfigType) throws UncheckedIOException {  try {    String destination=this.dummyPath + "/test_config.xml";    log.info("writing test config into: " + destination);    BufferedWriter bw=IOUtils.getBufferedWriter(destination);    JAXBContext jaxbContext=JAXBContext.newInstance(org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory.class);    Marshaller m=jaxbContext.createMarshaller();    MatsimJaxbXmlWriter.setMarshallerProperties(InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_MATSIMORG,m);    org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory of=new org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory();    JAXBElement<Matsim4UrbansimConfigType> jaxbElement=of.createMatsim4UrbansimConfig(m4uConfigType);    m.marshal(jaxbElement,bw);    return destination;  } catch (  JAXBException e) {    e.printStackTrace();    Assert.assertFalse(true);  }  return null;}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (SerialAddress.convertSystemNameToAlternate(systemName));}  }
class C{  public static String evaluate(String kernelString,String[] options) throws Exception {  Kernel kernel;  try {    kernel=(Kernel)Class.forName(kernelString).newInstance();  } catch (  Exception e) {    throw new Exception("Can't find class with name " + kernelString + '.');  }  return evaluate(kernel,options);}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  private Id<Link> findClosestLink(TransitStopFacility stopFacility){  Link nearestLink=NetworkUtils.getNearestLink(this.network,stopFacility.getCoord());  if (NetworkUtils.getEuclideanDistance(stopFacility.getCoord(),nearestLink.getToNode().getCoord()) <= SEARCH_RADIUS) {    return nearestLink.getId();  } else {    return null;  }}  }
class C{  public static void enable(boolean enableLogging){  Logger rootLogger=LogManager.getRootLogger();  if (enableLogging)   rootLogger.setLevel(s_currentLevelLog4J); else {    Level level=rootLogger.getLevel();    rootLogger.setLevel(Level.OFF);    s_currentLevelLog4J=level;  }}  }
class C{  private static void ensureOrderedKeys(List<ByteKey> keys){  for (int i=0; i < keys.size() - 1; ++i) {    ByteKeyRange.of(keys.get(i),keys.get(i + 1));    if (i > 0 && keys.get(i).isEmpty()) {      fail(String.format("Intermediate key %s/%s may not be empty",i,keys.size()));    }  }}  }
class C{  protected ConstraintRuleImpl(){  super();}  }
class C{  @Override public MessageUid nextUid(MailboxSession session,Mailbox mailbox) throws MailboxException {  HTable mailboxes=null;  HBaseId mailboxId=(HBaseId)mailbox.getMailboxId();  try {    mailboxes=new HTable(conf,MAILBOXES_TABLE);    MessageUid newValue=MessageUid.of(mailboxes.incrementColumnValue(mailboxId.toBytes(),MAILBOX_CF,MAILBOX_LASTUID,1));    mailboxes.close();    return newValue;  } catch (  IOException e) {    throw new MailboxException("lastUid",e);  } finally {    if (mailboxes != null) {      try {        mailboxes.close();      } catch (      IOException ex) {        throw new MailboxException("Error closing table " + mailboxes,ex);      }    }  }}  }
class C{  public String weightingKernelTipText(){  return "Determines weighting function. [0 = Linear, 1 = Epnechnikov," + "2 = Tricube, 3 = Inverse, 4 = Gaussian and 5 = Constant. " + "(default 0 = Linear)].";}  }
class C{  static String validateTnf(short tnf,byte[] type,byte[] id,byte[] payload){switch (tnf) {case TNF_EMPTY:    if (type.length != 0 || id.length != 0 || payload.length != 0) {      return "unexpected data in TNF_EMPTY record";    }  return null;case TNF_WELL_KNOWN:case TNF_MIME_MEDIA:case TNF_ABSOLUTE_URI:case TNF_EXTERNAL_TYPE:return null;case TNF_UNKNOWN:case TNF_RESERVED:if (type.length != 0) {return "unexpected type field in TNF_UNKNOWN or TNF_RESERVEd record";}return null;case TNF_UNCHANGED:return "unexpected TNF_UNCHANGED in first chunk or logical record";default :return String.format("unexpected tnf value: 0x%02x",tnf);}}  }
class C{  public AssociationIdToEntityConverter(final GenericDAO<Association,Long> associationLongGenericDAO){  super(associationLongGenericDAO);}  }
class C{  public static boolean areAllTagsEnabled(){  return enableAllTags;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {    DefaultBoxAndWhiskerCategoryDataset dataset=(DefaultBoxAndWhiskerCategoryDataset)obj;    return ObjectUtilities.equal(this.data,dataset.data);  }  return false;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=getIndicatorCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mInterval + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void testIsCryptoAllowed() throws Exception {  Provider mProv=(new SpiEngUtils()).new MyProvider("MyExMechProvider","Provider for ExemptionMechanism testing",srvExemptionMechanism.concat(".").concat(defaultAlg),ExemptionMechanismProviderClass);  ExemptionMechanism em=new ExemptionMechanism(new MyExemptionMechanismSpi(),mProv,defaultAlg){  };  Key key=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[0]);  assertFalse(em.isCryptoAllowed(key));  em.init(key);  assertFalse(em.isCryptoAllowed(key));  em.genExemptionBlob();  assertTrue(em.isCryptoAllowed(key));  Key key1=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[]{1});  assertFalse(em.isCryptoAllowed(key1));  em.init(key1);  assertFalse(em.isCryptoAllowed(key));}  }
class C{  public static XMPMeta extractXMPMeta(String filename){  if (!filename.toLowerCase().endsWith(".jpg") && !filename.toLowerCase().endsWith(".jpeg")) {    Log.d(TAG,"XMP parse: only jpeg file is supported");    return null;  }  try {    return extractXMPMeta(new FileInputStream(filename));  } catch (  FileNotFoundException e) {    Log.e(TAG,"Could not read file: " + filename,e);    return null;  }}  }
class C{  public void markOpened(){  state=StorageState.OPENED;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString());  }}  }
class C{  private static void dualPivotQuicksort(float[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  float ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    float t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    float t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    float t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    float t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    float t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  float pivot1=ae2;  a[e2]=a[left];  float pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void encode(InputStream inStream,OutputStream outStream) throws IOException {  int j;  int numBytes;  byte tmpbuffer[]=new byte[bytesPerLine()];  encodeBufferPrefix(outStream);  while (true) {    numBytes=readFully(inStream,tmpbuffer);    if (numBytes == 0) {      break;    }    encodeLinePrefix(outStream,numBytes);    for (j=0; j < numBytes; j+=bytesPerAtom()) {      if ((j + bytesPerAtom()) <= numBytes) {        encodeAtom(outStream,tmpbuffer,j,bytesPerAtom());      } else {        encodeAtom(outStream,tmpbuffer,j,(numBytes) - j);      }    }    encodeLineSuffix(outStream);  }  encodeBufferSuffix(outStream);}  }
class C{  @Override public Set<Long> keySet(){  Set<Long> ks=keySet;  return (ks != null ? ks : (keySet=new KeySet()));}  }
class C{  public void put(String key,int value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  public DateConverterTestCase(String name){  super(name);}  }
class C{  private void writeCommaSeparatedLine(String... values){  StringBuilder builder=new StringBuilder();  boolean isFirst=true;  for (  String value : values) {    if (!isFirst) {      builder.append(',');    }    isFirst=false;    builder.append('"');    if (value != null) {      builder.append(value.replaceAll("\"","\"\""));    }    builder.append('"');  }  printWriter.println(builder.toString());}  }
class C{  public static boolean isNull(Object o){  return o == null;}  }
class C{  private void swim(int k){  while (k > 1 && greater(k / 2,k)) {    exch(k,k / 2);    k=k / 2;  }}  }
class C{  public boolean isPrimitive(){  Class<?> t=getTypeInternal();  return t != null && t.isPrimitive();}  }
class C{  void deleteReplicaBasedOnCount(ClusterState clusterState,ZkNodeProps message,NamedList results,Runnable onComplete,boolean parallel) throws KeeperException, InterruptedException {  ocmh.checkRequired(message,COLLECTION_PROP,COUNT_PROP);  int count=Integer.parseInt(message.getStr(COUNT_PROP));  String collectionName=message.getStr(COLLECTION_PROP);  String shard=message.getStr(SHARD_ID_PROP);  DocCollection coll=clusterState.getCollection(collectionName);  Slice slice=null;  if (shard != null) {    slice=coll.getSlice(shard);    if (slice == null) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid shard name : " + shard + " in collection : "+ collectionName);    }  }  Map<Slice,Set<String>> shardToReplicasMapping=new HashMap<Slice,Set<String>>();  if (slice != null) {    Set<String> replicasToBeDeleted=pickReplicasTobeDeleted(slice,shard,collectionName,count);    shardToReplicasMapping.put(slice,replicasToBeDeleted);  } else {    Collection<Slice> allSlices=coll.getSlices();    for (    Slice individualSlice : allSlices) {      Set<String> replicasToBeDeleted=pickReplicasTobeDeleted(individualSlice,individualSlice.getName(),collectionName,count);      shardToReplicasMapping.put(individualSlice,replicasToBeDeleted);    }  }  for (  Slice shardSlice : shardToReplicasMapping.keySet()) {    String shardId=shardSlice.getName();    Set<String> replicas=shardToReplicasMapping.get(shardSlice);    for (    String replica : replicas) {      log.debug("Deleting replica {}  for shard {} based on count {}",replica,shardId,count);      deleteCore(shardSlice,collectionName,replica,message,shard,results,onComplete,parallel);    }    results.add("shard_id",shardId);    results.add("replicas_deleted",replicas);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.TYPE_REF__REF:    setRef((TypeDefinition)newValue);  return;case GamlPackage.TYPE_REF__PARAMETER:setParameter((TypeInfo)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isUnresolved(){  return (this.status == DroidsafeIssueResolutionStatus.UNRESOLVED);}  }
class C{  public AudioAction(String name,String resource){  super(name);  audioResource=resource;}  }
class C{  public void tryToDeleteOneToOneChats(){  mImDeleteOperationHandler.post(new OneToOneFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver));  mImDeleteOperationHandler.post(new OneToOneChatMessageDeleteTask(mChatService,this,mLocalContentResolver));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @Override public boolean isTableLoaded(){  return _tableManager.getTable(_tableName) != null;}  }
class C{  private void clearID(){  IDManager.unregisterID(this,this.id);  this.id=null;  setAttribute("ID",(String)null);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  byte[] javacCompile(String packageName,String className,String source){  File dir=new File(COMPILE_DIR);  if (packageName != null) {    dir=new File(dir,packageName.replace('.','/'));    FileUtils.createDirectories(dir.getAbsolutePath());  }  File javaFile=new File(dir,className + ".java");  File classFile=new File(dir,className + ".class");  try {    OutputStream f=FileUtils.newOutputStream(javaFile.getAbsolutePath(),false);    Writer out=IOUtils.getBufferedWriter(f);    classFile.delete();    out.write(source);    out.close();    if (JAVAC_SUN != null) {      javacSun(javaFile);    } else {      javacProcess(javaFile);    }    byte[] data=new byte[(int)classFile.length()];    DataInputStream in=new DataInputStream(new FileInputStream(classFile));    in.readFully(data);    in.close();    return data;  } catch (  Exception e) {    throw DbException.convert(e);  } finally {    javaFile.delete();    classFile.delete();  }}  }
class C{  public static int howManyDaysOld(long time){  return (int)((System.currentTimeMillis() - time) / DateUtils.DAY_IN_MILLIS);}  }
class C{  public void search(){  final long offset=Long.valueOf(m_offsetField.getText(),16);  search(offset);}  }
class C{  public FloatMatrix sorti(){  Arrays.sort(data);  return this;}  }
class C{  @Override public String toString(){  return isPresent ? String.format("OptionalInt[%s]",value) : "OptionalInt.empty";}  }
class C{  public static void main(String[] args){  if (1 != args.length) {    System.out.println("Usage: java LineReader filename");    System.exit(1);  }  try (LineReader in=new LineReader(args[0])){    for (    String line : in) {      System.out.println(line);    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected final void fireChildrenRemoved(BeanContextMembershipEvent bcme){  Object[] copy;synchronized (bcmListeners) {    copy=bcmListeners.toArray();  }  for (int i=0; i < copy.length; i++)   ((BeanContextMembershipListener)copy[i]).childrenRemoved(bcme);}  }
class C{  public PersistentMemberDetails[] listMissingDiskStores(){  PersistentMemberDetails[] missingDiskStores=null;  Set<PersistentID> persitentMemberSet=MissingPersistentIDsRequest.send(dm);  if (persitentMemberSet != null && persitentMemberSet.size() > 0) {    missingDiskStores=new PersistentMemberDetails[persitentMemberSet.size()];    int j=0;    for (    PersistentID id : persitentMemberSet) {      missingDiskStores[j]=new PersistentMemberDetails(id.getHost().getCanonicalHostName(),id.getDirectory(),id.getUUID().toString());      j++;    }  }  return missingDiskStores;}  }
class C{  private synchronized void saveToSettings(){  List<List> entriesToSave=new ArrayList<>();  for (  StatusHistoryEntry entry : entries.values()) {    entriesToSave.add(entryToList(entry));  }  settings.putList("statusPresets",entriesToSave);}  }
class C{  public void selectParameters(){}  }
class C{  public static byte[] join(byte[] arrayA,byte... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  byte[] array=new byte[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public static String memToString(long value,int cnvID,int decimals){  return (cnvFactors[cnvID][cnvSystem].memToString(value,decimals));}  }
class C{  public HistogramGui(final GenericFrame frame,final HistogramComponent component){  super(frame,component);  setPreferredSize(PREFERRED_SIZE);  actionManager=new PlotActionManager(this);  setLayout(new BorderLayout());  createAttachMenuBar();  cPanel=new HistogramPanel(this.getModel());  add("Center",cPanel);}  }
class C{  public synchronized final boolean isDeletedByOtherSession(){  return isDeletedByOtherSession;}  }
class C{  public static String leftPad(String str,int size){  return leftPad(str,size," ");}  }
class C{  @VisibleForTesting RevisionMetadata parseMetadata(String log){  Matcher m=BEGIN_LOG_RE.matcher(log);  if (!m.matches()) {    throw new IllegalArgumentException("Tried to parse unexpected Hg log entry: " + log);  }  ImmutableList.Builder<Revision> parentBuilder=ImmutableList.<Revision>builder();  for (  String parent : Splitter.on(' ').split(unescape(m.group(5)))) {    if (!parent.isEmpty()) {      String[] parentParts=parent.split(":");      if (!parentParts[0].equals("-1")) {        parent=parentParts[1];        parentBuilder.add(Revision.create(parent,tipCloneSupplier.get().getRepositoryName()));      }    }  }  return RevisionMetadata.builder().id(unescape(m.group(1))).author(unescape(m.group(2))).date(HG_DATE_FMT.parseDateTime(unescape(m.group(3)))).description(unescape(m.group(4))).withParents(parentBuilder.build()).build();}  }
class C{  public ThreadStateSynchronizer(final IDebugger debugger){  this.debugger=debugger;  for (  final TargetProcessThread thread : this.debugger.getProcessManager().getThreads()) {    thread.addListener(m_threadListener);  }  this.debugger.getProcessManager().addListener(m_processListener);}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("\tSymmetrical Uncertainty evaluator has not been built");  } else {    text.append("\tSymmetrical Uncertainty Ranking Filter");    if (!m_missing_merge) {      text.append("\n\tMissing values treated as seperate");    }  }  text.append("\n");  return text.toString();}  }
class C{  protected JPopupMenu createPopupMenu(){  JPopupMenu menu=new JPopupMenu();  JMenuItem menuItem;  menuItem=new JMenuItem(undoAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(redoAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem(cutAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(copyAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(pasteAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(deleteAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem(selectAllAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  return menu;}  }
class C{  private void initialize(int format){  if (format == 8) {    this.numComponentsOffset=Offset.glyphFormat8_numComponents.offset;    this.componentArrayOffset=Offset.glyphFormat8_componentArray.offset;  } else   if (format == 9) {    this.numComponentsOffset=Offset.glyphFormat9_numComponents.offset;    this.componentArrayOffset=Offset.glyphFormat9_componentArray.offset;  } else {    throw new IllegalStateException("Attempt to create a Composite Bitmap Glyph with a non-composite format.");  }}  }
class C{  protected void closePopupMenu(){  if (popupMenu != null) {    popupMenu.removeFromParent();    popupMenu=null;  }  if (lockLayer != null) {    lockLayer.removeFromParent();    lockLayer=null;  }  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  lastPlayerTell=params[0];  if (!remainder.isEmpty()) {    RPAction tell=new RPAction();    tell.put("type","tell");    tell.put("target",lastPlayerTell);    tell.put("text",remainder);    ClientSingletonRepository.getClientFramework().send(tell);    return true;  }  return false;}  }
class C{  public void registerSent(String fqn,String hash){  ClassEntry entry=getOrCreateEntry(fqn);  entry.addHash(hash);}  }
class C{  private void checkPartitions(Affinity testAff,Affinity aff){  for (  ClusterNode n : nodes()) {    checkEqualIntArray(testAff.allPartitions(n),aff.allPartitions(n));    checkEqualIntArray(testAff.backupPartitions(n),aff.backupPartitions(n));    checkEqualIntArray(testAff.primaryPartitions(n),aff.primaryPartitions(n));  }}  }
class C{  private boolean checkKeyGuardQuality(){  int quality=new LockPatternUtils(this).getActivePasswordQuality();  return (quality >= MIN_PASSWORD_QUALITY);}  }
class C{  public void updateLightDirection(ReadOnlyVector3 dir){  lightDirection.set(dir);  angle=MathUtil.directionToAzEl(dir,angle);}  }
class C{  public static org.oscm.vo.VOUserDetails convertToApi(org.oscm.internal.vo.VOUserDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUserDetails newVO=new org.oscm.vo.VOUserDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEMail(oldVO.getEMail());  newVO.setFirstName(oldVO.getFirstName());  newVO.setAdditionalName(oldVO.getAdditionalName());  newVO.setLastName(oldVO.getLastName());  newVO.setAddress(oldVO.getAddress());  newVO.setPhone(oldVO.getPhone());  newVO.setLocale(oldVO.getLocale());  newVO.setSalutation(EnumConverter.convert(oldVO.getSalutation(),org.oscm.types.enumtypes.Salutation.class));  newVO.setRealmUserId(oldVO.getRealmUserId());  newVO.setRemoteLdapActive(oldVO.isRemoteLdapActive());  newVO.setRemoteLdapAttributes(EnumConverter.convertList(oldVO.getRemoteLdapAttributes(),org.oscm.types.enumtypes.SettingType.class));  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setUserId(oldVO.getUserId());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.UserAccountStatus.class));  newVO.setOrganizationRoles(EnumConverter.convertSet(oldVO.getOrganizationRoles(),org.oscm.types.enumtypes.OrganizationRoleType.class));  newVO.setUserRoles(EnumConverter.convertSet(oldVO.getUserRoles(),org.oscm.types.enumtypes.UserRoleType.class));  return newVO;}  }
class C{  public void add(JarEntry entry,byte[] bytes,boolean overwrite) throws IOException {  JarEntry newEntry=new JarEntry(entry.getName());  newEntry.setSize(bytes.length);  if (jarEntries.containsKey(entry.getName()) && !overwrite) {    throw new IOException("Archive already contains entry: " + entry);  } else {    jarEntries.remove(entry.getName());    jarEntriesToAdd.remove(entry.getName());    jarEntries.put(entry.getName(),newEntry);    jarEntriesToAdd.put(entry.getName(),bytes);  }}  }
class C{  public final int readUnsignedByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp;}  }
class C{  public static double noise(double xin,double yin){  double n0, n1, n2;  double s=(xin + yin) * F2;  int i=fastfloor(xin + s);  int j=fastfloor(yin + s);  double t=(i + j) * G2;  double X0=i - t;  double Y0=j - t;  double x0=xin - X0;  double y0=yin - Y0;  int i1, j1;  if (x0 > y0) {    i1=1;    j1=0;  } else {    i1=0;    j1=1;  }  double x1=x0 - i1 + G2;  double y1=y0 - j1 + G2;  double x2=x0 - 1.0 + 2.0 * G2;  double y2=y0 - 1.0 + 2.0 * G2;  int ii=i & 255;  int jj=j & 255;  int gi0=permMod12[ii + perm[jj]];  int gi1=permMod12[ii + i1 + perm[jj + j1]];  int gi2=permMod12[ii + 1 + perm[jj + 1]];  double t0=0.5 - x0 * x0 - y0 * y0;  if (t0 < 0) {    n0=0.0;  } else {    t0*=t0;    n0=t0 * t0 * dot(grad3[gi0],x0,y0);  }  double t1=0.5 - x1 * x1 - y1 * y1;  if (t1 < 0) {    n1=0.0;  } else {    t1*=t1;    n1=t1 * t1 * dot(grad3[gi1],x1,y1);  }  double t2=0.5 - x2 * x2 - y2 * y2;  if (t2 < 0) {    n2=0.0;  } else {    t2*=t2;    n2=t2 * t2 * dot(grad3[gi2],x2,y2);  }  return limit(-1.0,1.0,70.0 * (n0 + n1 + n2) / 0.9978893541475);}  }
class C{  private static boolean isIPv4(String host){  String regex="\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}";  return host.matches(regex);}  }
class C{  public static int adjustAlpha(@ColorInt int color,int alpha){  return (alpha << 24) | (color & 0x00ffffff);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__LIST_1:    setList_1(LIST_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__TYPE_1:setType_1(TYPE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static HandlerLibrary load(Messager messager){  HandlerLibrary library=new HandlerLibrary(messager);  try {    loadAnnotationHandlers(library);    loadVisitorHandlers(library);  } catch (  IOException e) {    System.err.println("Lombok isn't running due to misconfigured SPI files: " + e);  }  library.calculatePriorities();  return library;}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE,ApplyType.BLOCK_PLACE_AGAINST)) {    Block evaluating=reg.isType(ApplyType.BLOCK_PLACE_AGAINST) ? event.getBlockAgainst() : event.getBlock();    if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,evaluating,event.getPlayer())) {      break;    }  }}  }
class C{  @RequestMapping(value="/test",method=RequestMethod.GET) public BasicCase list(@RequestParam("query") String query){  return null;}  }
class C{  private ProcessorInput makeInput(int[] batch,int inputId,Counter<String> weights,TranslationModel<IString,String> localTM){  List<Sequence<IString>> sourceList=new ArrayList<Sequence<IString>>(batch.length);  List<List<Sequence<IString>>> referenceList=new ArrayList<List<Sequence<IString>>>(batch.length);  for (  int sourceId : batch) {    sourceList.add(tuneSource.get(sourceId));    if (createPseudoReferences && pseudoReferences != null && pseudoReferences.get(0).size() > 0) {      List<Sequence<IString>> combinedRefs=new ArrayList<Sequence<IString>>(references.get(sourceId));      combinedRefs.addAll(pseudoReferences.get(sourceId));      referenceList.add(combinedRefs);    } else {      referenceList.add(references.get(sourceId));    }  }  return new ProcessorInput(sourceList,referenceList,weights,batch,inputId,localTM,localTMTraining,outputPrefixDecoding);}  }
class C{  public DateTimeFormatterBuilder appendMonthOfYearShortText(){  return appendShortText(DateTimeFieldType.monthOfYear());}  }
class C{  public static Map<String,Object> sendMailFromUrl(DispatchContext ctx,Map<String,? extends Object> rcontext){  Map<String,Object> sendMailContext=UtilMisc.makeMapWritable(rcontext);  String bodyUrl=(String)sendMailContext.remove("bodyUrl");  Map<String,Object> bodyUrlParameters=UtilGenerics.checkMap(sendMailContext.remove("bodyUrlParameters"));  Locale locale=(Locale)rcontext.get("locale");  LocalDispatcher dispatcher=ctx.getDispatcher();  URL url=null;  try {    url=new URL(bodyUrl);  } catch (  MalformedURLException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMalformedUrl",UtilMisc.toMap("bodyUrl",bodyUrl,"errorString",e.toString()),locale));  }  HttpClient httpClient=new HttpClient(url,bodyUrlParameters);  String body=null;  try {    body=httpClient.post();  } catch (  HttpClientException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendGettingError",UtilMisc.toMap("errorString",e.toString()),locale));  }  sendMailContext.put("body",body);  Map<String,Object> sendMailResult;  try {    sendMailResult=dispatcher.runSync("sendMail",sendMailContext);  } catch (  GenericServiceException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  return sendMailResult;}  }
class C{  private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){  List<EndIsland> result=new LinkedList<EndIsland>();  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);      if (island != null) {        result.add(island);      }    }  }  return result;}  }
class C{  private DispatchRunnable ensureListenerThreadIsRunning(){  dispatchThread=new DispatchRunnable(tcache.id());  dispatchThread.start();  return dispatchThread;}  }
class C{  public static FeatureTreeNode createChildNode(String name,FeatureTreeNode parent) throws FeatureParsingException {  return new FeatureTreeNode(name,parent);}  }
class C{  public double norm2(){  return s[0];}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode12.class,args);}  }
class C{  public boolean nextBoolean(double probability){  int y;  int z;  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53) < probability;}  }
class C{  public boolean validate(final SlingHttpServletRequest request){  return validate(request.getParameter(RECAPTCHA_REQUEST_PARAMETER),getIPAddress(request));}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public ObjectList<MutableString> allLines(){  final ObjectArrayList<MutableString> result=new ObjectArrayList<MutableString>();  for (Iterator<MutableString> i=iterator(); i.hasNext(); )   result.add(i.next().copy());  return result;}  }
class C{  public void testFilteredFragmentHandling() throws Exception {  TungstenProperties config=helper.createDoubleQueueWithFilter(100,10,3,1,true);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  Pipeline pipeline=prepareAndStartPipeline(config,runtime);  InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");  for (int i=0; i < 30; i++) {    long seqno=i;    for (short fragNo=0; fragNo < 3; fragNo++) {      boolean lastFrag=(fragNo == 2);      ReplDBMSEvent event=helper.createEvent(seqno,"db0",fragNo,lastFrag);      input.put(event);      logger.info("Added event: seqno=" + seqno + " fragNo="+ fragNo+ " lastFrag="+ lastFrag);    }  }  verifyProcessedSeqno(pipeline,29);  InMemoryQueueStore output=(InMemoryQueueStore)pipeline.getStore("q2");  long seqno=-1;  int filteredEvents=0;  int nonFilteredEvents=0;  boolean done=false;  while (!done) {    ReplDBMSEvent event=output.poll();    seqno=event.getSeqno();    done=(seqno >= 29 && event.getLastFrag());    assertNotNull("Expected to read non-null event (last seqno=" + seqno + ")",event);    if (seqno % 3 == 0) {      assertTrue("Filtered event: " + seqno,event instanceof ReplDBMSFilteredEvent);      ReplDBMSFilteredEvent filteredEvent=(ReplDBMSFilteredEvent)event;      assertEquals("Filter start",seqno,filteredEvent.getSeqno());      assertEquals("Filter end",seqno,filteredEvent.getSeqnoEnd());      filteredEvents++;    } else {      assertFalse("Non-filtered event: " + seqno,event instanceof ReplDBMSFilteredEvent);      nonFilteredEvents++;    }  }  assertEquals("Expected number of filtered events",10,filteredEvents);  assertEquals("Expected number of non-filtered events (3 frags per seqno)",60,nonFilteredEvents);  pipeline.shutdown(false);  runtime.release();}  }
class C{  public T longClick(){  if (view != null) {    view.performLongClick();  }  return self();}  }
class C{  public void triggerfromSearchIcon(@Nullable MenuItem meun){  actionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_HOME_AS_UP);  actionbar.setDisplayShowCustomEnabled(true);  actionbar.setDisplayShowTitleEnabled(false);  actionbar.setDisplayHomeAsUpEnabled(false);  actionbar.setDisplayShowHomeEnabled(false);  if (this.searchLayout != 0) {    actionbar.setCustomView(this.searchLayout);  }  search=new SearchCustom(actionbar.getCustomView());  search.setOnSearchListener(this.listener);  search.setSearchPlaceholder(searchHint);  int colorRes=getCloseBtnThemeColorRes();  if (colorRes != 0) {    search.setCrossColorResId(colorRes);  } else {    search.setCrossColorResId(mb.searchCancalIconColorId);  }  search.setSearchIcon(mb.searchIcon);  search.setSearchArea(mb.searchArea);  if (meun.isVisible()) {    meun.setVisible(false);  }}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  for (  final IExpression e : keys) {    if (e != null) {      e.collectMetaInformation(meta);    }  }  for (  final IExpression e : vals) {    if (e != null) {      e.collectMetaInformation(meta);    }  }}  }
class C{  public static char toLowerCase(Character self){  return Character.toLowerCase(self);}  }
class C{  public static Object tibAsObject(TIB tib){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return tib;}  }
class C{  public void addFconst(float f){  if (f == 0.0f || f == 1.0f || f == 2.0f)   addOpcode(11 + (int)f); else   addLdc(constPool.addFloatInfo(f));}  }
class C{  private static Set<Server> toServerSet(List<Map<String,?>> l) throws FabricCommunicationException {  Set<Server> servers=new HashSet<Server>();  for (  Map<String,?> serverData : l) {    servers.add(unmarshallServer(serverData));  }  return servers;}  }
class C{  @Inline static void compilePutfieldBarrierFloatImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.floatFieldWriteBarrierMethod);}  }
class C{  private static boolean isOverflowChar(char c){  return ((int)c >= Character.MAX_VALUE);}  }
class C{  private static void queryTransactionFeed(FinanceService service,String feedUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Feed at location " + feedUrl);  TransactionFeed transactionFeed=service.getFeed(new URL(feedUrl),TransactionFeed.class);  System.out.println("\nTransaction Feed\n================");  printBasicFeedDetails(transactionFeed);  for (int i=0; i < transactionFeed.getEntries().size(); i++) {    TransactionEntry transactionEntry=transactionFeed.getEntries().get(i);    printTransactionEntry(transactionEntry);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.678 -0500",hash_original_method="C3CB9524AE86EE634A43E203167EAA5A",hash_generated_method="B49E3D8116D56A750AEF2EA2BBA629A3") private SyncState(){}  }
class C{  public boolean canPlantSeedAt(World world,BlockPos pos,IBlockState soil,C crop,BlockPos original){  return soil.getBlock().canSustainPlant(soil,world,pos,EnumFacing.UP,crop) && world.isAirBlock(pos.up());}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  NodeList childList;  Node child;  int length;  String value;  Node grandChild;  java.util.List result=new java.util.ArrayList();  java.util.List expectedNormal=new java.util.ArrayList();  expectedNormal.add("1900 Dallas Road");  expectedNormal.add(" Dallas, ");  expectedNormal.add("Texas");  expectedNormal.add("\n 98554");  java.util.List expectedExpanded=new java.util.ArrayList();  expectedExpanded.add("1900 Dallas Road Dallas, Texas\n 98554");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(1);  childList=addressNode.getChildNodes();  length=(int)childList.getLength();  for (int indexN1007F=0; indexN1007F < childList.getLength(); indexN1007F++) {    child=(Node)childList.item(indexN1007F);    value=child.getNodeValue();    if ((value == null)) {      grandChild=child.getFirstChild();      assertNotNull("grandChildNotNull",grandChild);      value=grandChild.getNodeValue();      result.add(value);    } else {      result.add(value);    }  }  if (equals(4,length)) {    assertEquals("assertEqNormal",expectedNormal,result);  } else {    assertEquals("assertEqCoalescing",expectedExpanded,result);  }}  }
class C{  public void run(final String inputNetworkFile,final String outputNetworkFile){  final Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  final Network network=scenario.getNetwork();  new MatsimNetworkReader(scenario.getNetwork()).readFile(inputNetworkFile);  new org.matsim.core.network.algorithms.NetworkCleaner().run(network);  new NetworkWriter(network).write(outputNetworkFile);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public static String stringFor(int n){switch (n) {case CUDA_R_16F:    return "CUDA_R_16F";case CUDA_C_16F:  return "CUDA_C_16F";case CUDA_R_32F:return "CUDA_R_32F";case CUDA_C_32F:return "CUDA_C_32F";case CUDA_R_64F:return "CUDA_R_64F";case CUDA_C_64F:return "CUDA_C_64F";case CUDA_R_8I:return "CUDA_R_8I";case CUDA_C_8I:return "CUDA_C_8I";case CUDA_R_8U:return "CUDA_R_8U";case CUDA_C_8U:return "CUDA_C_8U";}return "INVALID cudaDataType: " + n;}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public boolean matches(){  return match(from,ENDANCHOR);}  }
class C{  protected void updateMatrixes(GL10 gl){  if (PLOpenGLSupport.isHigherThanOpenGL1(gl)) {    GL11 gl11=(GL11)gl;    gl11.glGetFloatv(GL11.GL_PROJECTION_MATRIX,mProjectionMatrix,0);    gl11.glGetFloatv(GL11.GL_MODELVIEW_MATRIX,mModelMatrix,0);  } else {    mMatrixGrabber.getCurrentProjection(gl);    mMatrixGrabber.getCurrentModelView(gl);  }}  }
class C{  public void disconnect(){  gattClient.disconnect();}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint,int indent,boolean collapseEmptyElements) throws IOException {  if (prettyPrint) {    for (int i=0; i < indent; i++) {      this.writer.print(' ');    }  }  if (xml.getName() == null) {    if (xml.getContent() != null) {      if (prettyPrint) {        this.writeEncoded(xml.getContent().trim());        writer.println();      } else {        this.writeEncoded(xml.getContent());      }    }  } else {    this.writer.print('<');    this.writer.print(xml.getFullName());    Vector nsprefixes=new Vector();    if (xml.getNamespace() != null) {      if (xml.getName().equals(xml.getFullName())) {        this.writer.print(" xmlns=\"" + xml.getNamespace() + '"');      } else {        String prefix=xml.getFullName();        prefix=prefix.substring(0,prefix.indexOf(':'));        nsprefixes.addElement(prefix);        this.writer.print(" xmlns:" + prefix);        this.writer.print("=\"" + xml.getNamespace() + "\"");      }    }    Iterator enm=xml.iterateAttributeNames();    while (enm.hasNext()) {      String key=(String)enm.next();      int index=key.indexOf(':');      if (index >= 0) {        String namespace=xml.getAttributeNamespace(key);        if (namespace != null) {          String prefix=key.substring(0,index);          if (!nsprefixes.contains(prefix)) {            this.writer.print(" xmlns:" + prefix);            this.writer.print("=\"" + namespace + '"');            nsprefixes.addElement(prefix);          }        }      }    }    enm=xml.iterateAttributeNames();    while (enm.hasNext()) {      String key=(String)enm.next();      String value=xml.getAttribute(key,null);      this.writer.print(" " + key + "=\"");      this.writeEncoded(value);      this.writer.print('"');    }    if ((xml.getContent() != null) && (xml.getContent().length() > 0)) {      writer.print('>');      this.writeEncoded(xml.getContent());      writer.print("</" + xml.getFullName() + '>');      if (prettyPrint) {        writer.println();      }    } else     if (xml.hasChildren() || (!collapseEmptyElements)) {      writer.print('>');      if (prettyPrint) {        writer.println();      }      enm=xml.iterateChildren();      while (enm.hasNext()) {        IXMLElement child=(IXMLElement)enm.next();        this.write(child,prettyPrint,indent + 4,collapseEmptyElements);      }      if (prettyPrint) {        for (int i=0; i < indent; i++) {          this.writer.print(' ');        }      }      this.writer.print("</" + xml.getFullName() + ">");      if (prettyPrint) {        writer.println();      }    } else {      this.writer.print("/>");      if (prettyPrint) {        writer.println();      }    }  }  this.writer.flush();}  }
class C{  public AttributeAction(DrawingEditor editor,AttributeKey key,Object value,@Nullable Icon icon){  this(editor,key,value,null,icon);}  }
class C{  public StrTokenizer(final String input,final StrMatcher delim,final StrMatcher quote){  this(input,delim);  setQuoteMatcher(quote);}  }
class C{  public void start(){  if (this.cache.getEventTrackerTask() != null) {    this.cache.getEventTrackerTask().addTracker(this);  }}  }
class C{  public void mapTriangleToNodes(DelaunayTriangle t){  AdvancingFrontNode n;  for (int i=0; i < 3; i++) {    if (t.neighbors[i] == null) {      n=aFront.locatePoint(t.pointCW(t.points[i]));      if (n != null) {        n.triangle=t;      }    }  }}  }
class C{  public boolean hasNext(){  return (pos < size);}  }
class C{  protected void add(TransformGroup transformGroup){  addChild(transformGroup);}  }
class C{  public void updateString(int columnIndex,String x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateString(columnIndex,x);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String toString(){  return one + "-" + two;}  }
class C{  public GlowBanList(GlowServer server,Type type){  super(getFile(server,type));  this.type=type;}  }
class C{  protected Producer<?> createProducer(final PotentialAttribute potentialAttribute){  return createProducer(potentialAttribute.getBaseObject(),potentialAttribute.getMethodName(),potentialAttribute.getDataType(),potentialAttribute.getArgumentDataTypes(),potentialAttribute.getArgumentValues(),potentialAttribute.getDescription());}  }
class C{  @Override protected int computeHorizontalScrollExtent(){  return 1;}  }
class C{  static public boolean removeSignalMastLogic(JmriJFrame frame,SignalMast mast){  Object[] options={rb.getString("RemoveButton"),rb.getString("LeaveButton")};  int n=JOptionPane.showOptionDialog(frame,java.text.MessageFormat.format(rb.getString("RemoveLogic"),new Object[]{mast.getDisplayName()}),rb.getString("RemoveLogicTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (n == 0) {    InstanceManager.getDefault(jmri.SignalMastLogicManager.class).removeSignalMast(mast);    return true;  }  return false;}  }
class C{  private List<CategoryDataset> datasetsMappedToDomainAxis(int axisIndex){  List<CategoryDataset> result=new ArrayList<CategoryDataset>();  for (  Entry<Integer,CategoryDataset> entry : this.datasets.entrySet()) {    CategoryDataset dataset=entry.getValue();    if (dataset == null) {      continue;    }    Integer datasetIndex=entry.getKey();    List mappedAxes=(List)this.datasetToDomainAxesMap.get(datasetIndex);    if (mappedAxes == null) {      if (axisIndex == 0) {        result.add(dataset);      }    } else {      if (mappedAxes.contains(axisIndex)) {        result.add(dataset);      }    }  }  return result;}  }
class C{  protected CCRotateTo(float duration,float ang){  super(duration);  dstAngle=ang;}  }
class C{  protected void notifyListenersDatabaseOpen(Collection<DatabaseListener> listeners,DatabaseServer databaseServer) throws DatabaseException {  for (  DatabaseListener databaseListener : listeners) {    try {      databaseListener.databaseOpen(databaseServer);    } catch (    DatabaseUnsupportedException e) {      logger.error(e.getMessage(),e);    }  }}  }
class C{  private Event parseEvent(Bundle bundle){  if (!bundle.containsKey("room_id")) {    return null;  }  Event event=new Event();  try {    event.eventId=bundle.getString("id");    event.sender=bundle.getString("sender");    event.roomId=bundle.getString("room_id");    event.type=bundle.getString("type");    event.updateContent((new JsonParser()).parse(bundle.getString("content")).getAsJsonObject());    return event;  } catch (  Exception e) {    Log.e(LOG_TAG,"buildEvent fails " + e.getLocalizedMessage());    event=null;  }  return event;}  }
class C{  public ConcurrentWriteLockedOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  super(new WriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory));}  }
class C{  public void configure(HierarchicalConfiguration configuration) throws ConfigurationException {  setSessionParameters(configuration);  ParsedConfiguration parsedConfiguration=new ParsedConfiguration(configuration,logger,getLocalUsers(),getDNSService(),getDomainList(),getMailQueue());  setParsedConfiguration(parsedConfiguration);  List<HierarchicalConfiguration> allAccounts=configuration.configurationsAt("accounts");  if (allAccounts.size() < 1)   throw new ConfigurationException("Missing <accounts> section.");  if (allAccounts.size() > 1)   throw new ConfigurationException("Too many <accounts> sections, there must be exactly one");  HierarchicalConfiguration accounts=allAccounts.get(0);  if (!accounts.getKeys().hasNext())   throw new ConfigurationException("Missing <account> section.");  int i=0;  for (  ConfigurationNode accountsChild : accounts.getRoot().getChildren()) {    String accountsChildName=accountsChild.getName();    List<HierarchicalConfiguration> accountsChildConfig=accounts.configurationsAt(accountsChildName);    HierarchicalConfiguration conf=accountsChildConfig.get(i);    if ("alllocal".equals(accountsChildName)) {      getParsedDynamicAccountParameters().add(new ParsedDynamicAccountParameters(i,conf));      continue;    }    if ("account".equals(accountsChildName)) {      getStaticAccounts().add(new Account(i,parsedConfiguration,conf.getString("[@user]"),conf.getString("[@password]"),conf.getString("[@recipient]"),conf.getBoolean("[@ignorercpt-header]"),conf.getString("[@customrcpt-header]",""),getSession()));      continue;    }    throw new ConfigurationException("Illegal token: <" + accountsChildName + "> in <accounts>");  }  i++;}  }
class C{  private void writeDeflated(byte[] b,int offset,int length) throws IOException {  if (length > 0 && !def.finished()) {    entry.bytesRead+=length;    if (length <= DEFLATER_BLOCK_SIZE) {      def.setInput(b,offset,length);      deflateUntilInputIsNeeded();    } else {      final int fullblocks=length / DEFLATER_BLOCK_SIZE;      for (int i=0; i < fullblocks; i++) {        def.setInput(b,offset + i * DEFLATER_BLOCK_SIZE,DEFLATER_BLOCK_SIZE);        deflateUntilInputIsNeeded();      }      final int done=fullblocks * DEFLATER_BLOCK_SIZE;      if (done < length) {        def.setInput(b,offset + done,length - done);        deflateUntilInputIsNeeded();      }    }  }}  }
class C{  public boolean isTickLabelsVisible(){  return this.showTickLabelsCheckBox.isSelected();}  }
class C{  @NamespacePermission(fields="#businessObjectDefinitionKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectDefinition updateBusinessObjectDefinition(BusinessObjectDefinitionKey businessObjectDefinitionKey,BusinessObjectDefinitionUpdateRequest request){  businessObjectDefinitionHelper.validateBusinessObjectDefinitionKey(businessObjectDefinitionKey);  validateBusinessObjectDefinitionUpdateRequest(request);  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDaoHelper.getBusinessObjectDefinitionEntity(businessObjectDefinitionKey);  updateBusinessObjectDefinitionEntity(businessObjectDefinitionEntity,request);  return createBusinessObjectDefinitionFromEntity(businessObjectDefinitionEntity);}  }
class C{  @Override public MemChunkHolder<SysMemAllocator> resizeChunk(MemChunkHolder<SysMemAllocator> mholder,long size){  MemChunkHolder<SysMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    if (currentMemory.get() + size > maxStoreCapacity) {      if (m_activegc) {        forceGC();      }    }    if (currentMemory.get() + size <= maxStoreCapacity) {      Long addr=m_unsafe.reallocateMemory(mholder.get(),size);      if (0 != addr) {        mholder.clear();        mholder.destroy();        ret=new MemChunkHolder<SysMemAllocator>(this,addr,size);        if (ac) {          m_chunkcollector.register(ret);        }      }    }  }  return ret;}  }
class C{  public void round(Rect dst){  dst.set(FastMath.round(left),FastMath.round(top),FastMath.round(right),FastMath.round(bottom));}  }
class C{  public static VcfReader openVcfReader(File f,RegionRestriction region) throws IOException {  final boolean stdin=CommonFlags.isStdio(f);  final VcfReader vcfr;  if (region == null) {    vcfr=new VcfReader(new BufferedReader(new InputStreamReader(stdin ? System.in : FileUtils.createInputStream(f,true))));  } else {    if (stdin) {      throw new IOException("Cannot apply region restriction when reading from stdin");    }    vcfr=new VcfReader(new TabixLineReader(f,TabixIndexer.indexFileName(f),region),VcfUtils.getHeader(f));  }  return vcfr;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  protected SimpleProjectDependencyImpl(){  super();}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    int AD_Role_ID=Env.getAD_Role_ID(getCtx());    MFormAccess pa=new MFormAccess(this,AD_Role_ID);    pa.saveEx();  }  return success;}  }
class C{  public void add(Number number){  elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));}  }
class C{  public void removeCampo(DefCampoDato campo){  campos.remove(campo);}  }
class C{  public String primGetNextToken() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 33:{        yybegin(ST_IMPORT_MEDIUM);        return CSS_STRING;      }case 55:    break;case 35:{    yybegin(ST_DECLARATION_VALUE);    return CSS_DECLARATION_VALUE_DIMENSION;  }case 56:break;case 40:yypushback(1);{return CSS_DECLARATION_VALUE_S;}case 57:break;case 37:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_FUNCTION;}case 58:break;case 21:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ATTRIBUTE_END;}case 59:break;case 2:{return UNDEFINED;}case 60:break;case 10:{yybegin(ST_IMPORT_DELIMITER);return CSS_MEDIUM;}case 61:break;case 38:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_STRING;}case 62:break;case 30:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_CLASS;}case 63:break;case 13:{yybegin(YYINITIAL);return CSS_LBRACE;}case 64:break;case 5:{yybegin(YYINITIAL);return CSS_RBRACE;}case 65:break;case 12:{yybegin(ST_MEDIA_DELIMITER);return CSS_MEDIUM;}case 66:break;case 11:{yybegin(ST_IMPORT_MEDIUM);return CSS_MEDIA_SEPARATOR;}case 67:break;case 25:{yybegin(ST_DECLARATION_PRE_VALUE);return CSS_DECLARATION_SEPARATOR;}case 68:break;case 53:{yybegin(ST_FONT_FACE_DELIMITER);return CSS_FONT_FACE;}case 69:break;case 52:{yybegin(ST_CHARSET_NAME);return CSS_CHARSET;}case 70:break;case 48:{yybegin(ST_IMPORT_MEDIUM);return CSS_URI;}case 71:break;case 20:{yybegin(ST_SELECTOR_ATTRIBUTE_VALUE);return CSS_SELECTOR_ATTRIBUTE_OPERATOR;}case 72:break;case 41:{return CSS_CDC;}case 73:break;case 16:{yybegin(ST_DECLARATION);return CSS_LBRACE;}case 74:break;case 6:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_UNIVERSAL;}case 75:break;case 8:{yybegin(ST_SELECTOR_ATTRIBUTE_NAME);return CSS_SELECTOR_ATTRIBUTE_START;}case 76:break;case 44:{return CSS_CDO;}case 77:break;case 9:{yybegin(YYINITIAL);return CSS_DELIMITER;}case 78:break;case 19:{yybegin(ST_SELECTOR_ATTRIBUTE_OPERATOR);return CSS_SELECTOR_ATTRIBUTE_NAME;}case 79:break;case 39:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_HASH;}case 80:break;case 47:{yybegin(ST_PAGE_PSEUDO_PAGE);return CSS_PAGE;}case 81:break;case 3:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ELEMENT_NAME;}case 82:break;case 32:{yybegin(ST_CHARSET_DELIMITER);return CSS_STRING;}case 83:break;case 26:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_NUMBER;}case 84:break;case 17:{yybegin(ST_SELECTOR);return CSS_SELECTOR_COMBINATOR;}case 85:break;case 34:yypushback(1);{yybegin(ST_SELECTOR);return CSS_SELECTOR_COMBINATOR;}case 86:break;case 43:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_UNICODE_RANGE;}case 87:break;case 46:{return CSS_ATKEYWORD;}case 88:break;case 36:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_PERCENTAGE;}case 89:break;case 14:{yybegin(ST_MEDIA_MEDIUM);return CSS_MEDIA_SEPARATOR;}case 90:break;case 27:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_IDENT;}case 91:break;case 15:{yybegin(ST_PAGE_DELIMITER);return CSS_PAGE_SELECTOR;}case 92:break;case 29:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_OPERATOR;}case 93:break;case 45:{return CSS_COMMENT;}case 94:break;case 54:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_IMPORTANT;}case 95:break;case 22:{yybegin(ST_SELECTOR_ATTRIBUTE_END);return CSS_SELECTOR_ATTRIBUTE_VALUE;}case 96:break;case 18:{yybegin(ST_SELECTOR);return CSS_SELECTOR_SEPARATOR;}case 97:break;case 4:{return CSS_S;}case 98:break;case 42:{yybegin(ST_CSSRESOURCE_RULE_MEDIUM);return CSS_MEDIA;}case 99:break;case 31:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ID;}case 100:break;case 51:{yybegin(ST_IMPORT_URI);return CSS_IMPORT;}case 101:break;case 28:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_PARENTHESIS_CLOSE;}case 102:break;case 50:{yybegin(ST_MEDIA_MEDIUM);return CSS_MEDIA;}case 103:break;case 24:{yybegin(ST_DECLARATION);return CSS_DECLARATION_DELIMITER;}case 104:break;case 23:{yybegin(ST_DECLARATION_SEPARATOR);return CSS_DECLARATION_PROPERTY;}case 105:break;case 7:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_PSEUDO;}case 106:break;case 1:{return CSS_MEDIUM;}case 107:break;case 49:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_URI;}case 108:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public JavaNumberFormatter(double min,double max,double multiplier,boolean allowsNullValue){  this(min,max,multiplier,allowsNullValue,null);}  }
class C{  private void createCredentials(String number){  given().body("{ \"number\" : \"" + number + "\"}").header("x-delta","auto").put("/users/" + number + "/login/v1/credentials");}  }
class C{  public MLTResult like(Reader reader) throws IOException {  return like(getStreamHeadfieldNames(),getStreamBodyfieldNames(),reader);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("\nIndexed connectivity:\n");  for (int i=0; i < getNumFactors(); i++) {    String factor=getFactor(i);    buf.append("\n");    buf.append(factor);    buf.append("\t<-- ");    for (int j=0; j < getNumParents(i); j++) {      IndexedParent parent=getParent(i,j);      buf.append("\t");      buf.append(getFactor(parent.getIndex()));      buf.append(":");      buf.append(parent.getLag());    }  }  buf.append("\n");  return buf.toString();}  }
class C{  public void addChangeListener(MarkerChangeListener listener){  this.listenerList.add(MarkerChangeListener.class,listener);}  }
class C{  public static Matcher<Object> any(){  return ANY;}  }
class C{  public static boolean isWindows(){  return isOS(WINDOWS_OS_NAME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.743 -0500",hash_original_method="FEF65BEF127D0A814D93AD3A68812808",hash_generated_method="E431DC0AB951D2DD9443754584959F05") public synchronized void cancel(){  if (!canceled) {    canceled=true;    channel=-1;    notifyAll();  }}  }
class C{  int checkGrantUriPermissionLocked(int callingUid,String targetPkg,Uri uri,int modeFlags,int lastTargetUid){  modeFlags&=(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);  if (modeFlags == 0) {    return -1;  }  if (targetPkg != null) {    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,"Checking grant " + targetPkg + " permission to "+ uri);  }  final IPackageManager pm=AppGlobals.getPackageManager();  if (!ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,"Can't grant URI permission for non-content URI: " + uri);    return -1;  }  String name=uri.getAuthority();  ProviderInfo pi=null;  ContentProviderRecord cpr=mProviderMap.getProviderByName(name,UserHandle.getUserId(callingUid));  if (cpr != null) {    pi=cpr.info;  } else {    try {      pi=pm.resolveContentProvider(name,PackageManager.GET_URI_PERMISSION_PATTERNS,UserHandle.getUserId(callingUid));    } catch (    RemoteException ex) {    }  }  if (pi == null) {    Slog.w(TAG,"No content provider found for permission check: " + uri.toSafeString());    return -1;  }  int targetUid=lastTargetUid;  if (targetUid < 0 && targetPkg != null) {    try {      targetUid=pm.getPackageUid(targetPkg,UserHandle.getUserId(callingUid));      if (targetUid < 0) {        if (DEBUG_URI_PERMISSION)         Slog.v(TAG,"Can't grant URI permission no uid for: " + targetPkg);        return -1;      }    } catch (    RemoteException ex) {      return -1;    }  }  if (targetUid >= 0) {    if (checkHoldingPermissionsLocked(pm,pi,uri,targetUid,modeFlags)) {      if (DEBUG_URI_PERMISSION)       Slog.v(TAG,"Target " + targetPkg + " already has full permission to "+ uri);      return -1;    }  } else {    boolean allowed=pi.exported;    if ((modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {      if (pi.readPermission != null) {        allowed=false;      }    }    if ((modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {      if (pi.writePermission != null) {        allowed=false;      }    }    if (allowed) {      return -1;    }  }  if (!pi.grantUriPermissions) {    throw new SecurityException("Provider " + pi.packageName + "/"+ pi.name+ " does not allow granting of Uri permissions (uri "+ uri+ ")");  }  if (pi.uriPermissionPatterns != null) {    final int N=pi.uriPermissionPatterns.length;    boolean allowed=false;    for (int i=0; i < N; i++) {      if (pi.uriPermissionPatterns[i] != null && pi.uriPermissionPatterns[i].match(uri.getPath())) {        allowed=true;        break;      }    }    if (!allowed) {      throw new SecurityException("Provider " + pi.packageName + "/"+ pi.name+ " does not allow granting of permission to path of Uri "+ uri);    }  }  if (callingUid != Process.myUid()) {    if (!checkHoldingPermissionsLocked(pm,pi,uri,callingUid,modeFlags)) {      if (!checkUriPermissionLocked(uri,callingUid,modeFlags)) {        throw new SecurityException("Uid " + callingUid + " does not have permission to uri "+ uri);      }    }  }  return targetUid;}  }
class C{  private void handleDisconnect(){  if (mEditorConnection == null) {    return;  }  mLifecycleCallbacks.disableConnector();  mEditorConnection.close(true);}  }
class C{  public static String toJSONString(Map map){  final StringWriter writer=new StringWriter();  try {    writeJSONString(map,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  return userRepository.findOneByLogin(userDTO.getLogin()).filter(null).map(null).orElseGet(null);}  }
class C{  public long toReal(){  return _real;}  }
class C{  public XMLException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  static void clearInstanceCache(){synchronized (INSTANCE_CACHE) {    INSTANCE_CACHE.clear();  }}  }
class C{  public void testBug41730() throws Exception {  try {    "".getBytes("sjis");  } catch (  UnsupportedEncodingException ex) {    return;  }  Connection conn2=null;  PreparedStatement pstmt2=null;  try {    conn2=getConnectionWithProps("characterEncoding=sjis");    pstmt2=conn2.prepareStatement("select ?");    pstmt2.setString(1,"\u00A5'");    this.rs=pstmt2.executeQuery();  }  finally {    try {      if (pstmt2 != null) {        pstmt2.close();      }    } catch (    SQLException ex) {    }    try {      if (conn2 != null) {        conn2.close();      }    } catch (    SQLException ex) {    }  }}  }
class C{  public Query locale(final String locale){  setLocale(locale);  return this;}  }
class C{  public PositionAwareSplitWrapper(){  super(null,0,0,null);  splitnum=-1;}  }
class C{  public void addLonLine(double minLat,double maxLat,double lon){  String name="lonline" + nextShape;  nextShape++;  b.append("        var " + name + " = WE.polygon([\n");  double lat;  int steps=getStepCount(minLat,lon,maxLat,lon);  for (lat=minLat; lat <= maxLat; lat+=(maxLat - minLat) / steps) {    b.append("          [" + lat + ", "+ lon+ "],\n");  }  b.append("          [" + maxLat + ", "+ lon+ "],\n");  lat-=(maxLat - minLat) / 36;  for (; lat >= minLat; lat-=(maxLat - minLat) / steps) {    b.append("          [" + lat + ", "+ lon+ "],\n");  }  b.append("        ], {color: \"#ff0000\", fillColor: \"#ffffff\", opacity: 1, fillOpacity: 0.0001});\n");  b.append("        " + name + ".addTo(earth);\n");}  }
class C{  @Deprecated AsyncBusinessNoteStoreClient(TProtocol iprot,TProtocol oprot,String authenticationToken,ClientFactory clientFactory) throws TTransportException {  super(iprot,oprot,authenticationToken,clientFactory);}  }
class C{  public boolean isFileSelectionEnabled(){  return ((fileSelectionMode == FILES_ONLY) || (fileSelectionMode == FILES_AND_DIRECTORIES));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord)   updateAmtHeader();  return success;}  }
class C{  public void replaceInt(int i,int v){  _buffer[i]=(byte)(v >> 24);  _buffer[i + 1]=(byte)(v >> 16);  _buffer[i + 2]=(byte)(v >> 8);  _buffer[i + 3]=(byte)(v);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean dispatch(boolean complete) throws IOException, XNIException {  setScannerState(SCANNER_STATE_PROLOG);  setDispatcher(fPrologDispatcher);  try {    if (fEntityScanner.skipString("<?xml")) {      fMarkupDepth++;      if (XMLChar.isName(fEntityScanner.peekChar())) {        fStringBuffer.clear();        fStringBuffer.append("xml");        if (fNamespaces) {          while (XMLChar.isNCName(fEntityScanner.peekChar())) {            fStringBuffer.append((char)fEntityScanner.scanChar());          }        } else {          while (XMLChar.isName(fEntityScanner.peekChar())) {            fStringBuffer.append((char)fEntityScanner.scanChar());          }        }        String target=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);        scanPIData(target,fString);      } else {        scanXMLDeclOrTextDecl(false);      }    }    fEntityManager.fCurrentEntity.mayReadChunks=true;    return true;  } catch (  MalformedByteSequenceException e) {    fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return false;  }catch (  CharConversionException e) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return false;  }catch (  EOFException e) {    reportFatalError("PrematureEOF",null);    return false;  }}  }
class C{  public void sendMessageUntilStopCount(int stopCount){  for (int i=processedWorkerCount; i < workers.size(); ++i) {    ActorRef worker=workers.get(i);    try {      Thread.sleep(1L);    } catch (    InterruptedException e) {      logger.error("sleep exception " + e + " details: ",e);    }    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);    processedWorkerCount++;    if (processedWorkerCount > stopCount) {      return;    }    logger.debug("REQ_SENT: {} / {} taskId {}",processedWorkerCount,requestTotalCount,taskIdTrim);  }}  }
class C{  public StrBuilder deleteAll(final String str){  final int len=(str == null ? 0 : str.length());  if (len > 0) {    int index=indexOf(str,0);    while (index >= 0) {      deleteImpl(index,index + len,len);      index=indexOf(str,index);    }  }  return this;}  }
class C{  public AbBottomBar(Context context){  super(context);  ininBottomBar(context);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private static void addAttribute(MutableAttributeSet to,Object key,Object value){  Object attr=to.getAttribute(key);  if (attr == null || attr == SimpleAttributeSet.EMPTY) {    to.addAttribute(key,value);  } else {    if (attr instanceof MutableAttributeSet && value instanceof AttributeSet) {      ((MutableAttributeSet)attr).addAttributes((AttributeSet)value);    }  }}  }
class C{  public String constructPropertyValue(String prop){  String retString=null;  if (prop.equals("IPAddressList")) {    int numAddrs=ipAddress.getItemCount();    if (numAddrs > 0) {      retString="";    } else {      retString=DEFAULT_IP_ADDRESS;    }    for (int i=0; i < numAddrs; i++) {      retString+=ipAddress.getItemAt(i);      if (i != numAddrs - 1) {        retString+=PROP_DELIM;      }    }  } else   if (prop.equals("IPPortList")) {    int numPorts=port.getItemCount();    if (numPorts > 0) {      retString="";    } else {      retString=DEFAULT_PORT_NUMBER;    }    for (int i=0; i < numPorts; i++) {      retString+=port.getItemAt(i);      if (i != numPorts - 1) {        retString+=PROP_DELIM;      }    }  } else   if (prop.equals("ClientId")) {    retString=optionsComp.getClientID();  } else   if (prop.equals("Persistence")) {    retString=String.valueOf(optionsComp.isPersistenceSelected());  } else   if (prop.equals("PersistenceDir")) {    retString=optionsComp.getPersistenceDirectory();  }  return retString;}  }
class C{  public WordReferenceVars(){  this.flags=null;  this.lastModified=0;  this.language=null;  this.urlHash=null;  this.type=' ';  this.hitcount=0;  this.llocal=0;  this.lother=0;  this.phrasesintext=0;  this.positions=null;  this.posinphrase=0;  this.posintext=0;  this.posofphrase=0;  this.urlcomps=0;  this.urllength=0;  this.virtualAge=0;  this.wordsintext=0;  this.wordsintitle=0;  this.termFrequency=0.0;  this.local=true;}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  private InstructionList xform_inst(MethodGen mg,Instruction inst){switch (inst.getOpcode()) {case Const.INVOKESTATIC:{      InstructionList il=new InstructionList();      INVOKESTATIC is=(INVOKESTATIC)inst;      String cname=is.getClassName(pgen);      String mname=is.getMethodName(pgen);      Type[] args=is.getArgumentTypes(pgen);      MethodDef orig=new MethodDef(cname + "." + mname,args);      MethodInfo call=method_map.get(orig);      if (call != null) {        call.cnt++;        String classname=call.method_class;        String methodname=mname;        debug_map.log("%s.%s: Replacing method %s.%s (%s) with %s.%s%n",mg.getClassName(),mg.getName(),cname,mname,UtilMDE.join(args,", "),classname,methodname);        il.append(ifact.createInvoke(classname,methodname,is.getReturnType(pgen),args,Const.INVOKESTATIC));      }      return (il);    }case Const.INVOKEVIRTUAL:{    InstructionList il=new InstructionList();    INVOKEVIRTUAL iv=(INVOKEVIRTUAL)inst;    String cname=iv.getClassName(pgen);    String mname=iv.getMethodName(pgen);    Type[] args=iv.getArgumentTypes(pgen);    Type instance_type=iv.getReferenceType(pgen);    Type[] new_args=BCELUtil.insert_type(instance_type,args);    MethodDef orig=new MethodDef(cname + "." + mname,args);    if (debug_class)     System.out.printf("looking for %s in map %s%n",orig,method_map);    MethodInfo call=method_map.get(orig);    if (call != null) {      call.cnt++;      String classname=call.method_class;      String methodname=mname;      debug_map.log("Replacing method %s.%s (%s) with %s.%s%n",cname,mname,ArraysMDE.toString(args),classname,methodname);      il.append(ifact.createInvoke(classname,methodname,iv.getReturnType(pgen),new_args,Const.INVOKESTATIC));    }    return (il);  }default :return (null);}}  }
class C{  public void load(SimState state){  this.state=state;  started=true;synchronized (state.schedule) {    Steppable[] _start2=start2;    System.arraycopy(start,0,start2,0,startSize);    int _startSize=startSize;    startSize=0;    for (int x=0; x < _startSize; x++)     _start2[x].step(state);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.GATEWAY__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.GATEWAY__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MColumnAccess[");  sb.append("AD_Role_ID=").append(getAD_Role_ID()).append(",AD_Table_ID=").append(getAD_Table_ID()).append(",AD_Column_ID=").append(getAD_Column_ID()).append(",Exclude=").append(isExclude());  sb.append("]");  return sb.toString();}  }
class C{  public List node(Collection geoms){  Geometry geom0=(Geometry)geoms.iterator().next();  geomFact=geom0.getFactory();  List segStrings=toSegmentStrings(extractLines(geoms));  Noder sr=new MCIndexSnapRounder(pm);  sr.computeNodes(segStrings);  Collection nodedLines=sr.getNodedSubstrings();  if (isValidityChecked) {    NodingValidator nv=new NodingValidator(nodedLines);    nv.checkValid();  }  return toLineStrings(nodedLines);}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  @Override public StringBuffer format(long value,StringBuffer buffer,FieldPosition field){  return format((double)value,buffer,field);}  }
class C{  private SSLConfig configureLegacyServerSSL(SSLConfig sslConfig){  sslConfig.setCiphers(getDistributionConfig().getServerSSLCiphers());  sslConfig.setEnabled(getDistributionConfig().getServerSSLEnabled());  sslConfig.setKeystore(getDistributionConfig().getServerSSLKeyStore());  sslConfig.setKeystorePassword(getDistributionConfig().getServerSSLKeyStorePassword());  sslConfig.setKeystoreType(getDistributionConfig().getServerSSLKeyStoreType());  sslConfig.setTruststore(getDistributionConfig().getServerSSLTrustStore());  sslConfig.setTruststorePassword(getDistributionConfig().getServerSSLTrustStorePassword());  sslConfig.setProtocols(getDistributionConfig().getServerSSLProtocols());  sslConfig.setRequireAuth(getDistributionConfig().getServerSSLRequireAuthentication());  return sslConfig;}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  public static int max(int a,int b,int c){  int ma;  ma=a;  if (b > ma) {    ma=b;  }  if (c > ma) {    ma=c;  }  return ma;}  }
class C{  @Override public String toString(){  return "CUstream[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  @Override protected void initListeners(){}  }
class C{  public long index(){  return index;}  }
class C{  public void propertyChange(final PropertyChangeEvent e){  super.propertyChange(e);  final String prop=e.getPropertyName();  if ("defaultButton".equals(prop) || "temporaryDefaultButton".equals(prop)) {    final JRootPane root=(JRootPane)e.getSource();    if (root.isShowing() && root.isEnabled()) {      updateDefaultButton(root);    }  } else   if ("enabled".equals(prop) || AquaFocusHandler.FRAME_ACTIVE_PROPERTY.equals(prop)) {    final JRootPane root=(JRootPane)e.getSource();    if (root.isShowing()) {      if (((Boolean)e.getNewValue()).booleanValue()) {        updateDefaultButton((JRootPane)e.getSource());      } else {        stopTimer();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:57.112 -0500",hash_original_method="D7BFACA82671057310D9C36F7CB9679A",hash_generated_method="75384C91D2280B56E0B05ACDF140B3B6") public static SubjectKeyIdentifier decode(byte[] encoding) throws IOException {  SubjectKeyIdentifier res=new SubjectKeyIdentifier((byte[])ASN1OctetString.getInstance().decode(encoding));  res.encoding=encoding;  return res;}  }
class C{  static void exportMap(OutputStream os,Map<String,String> map) throws IOException {  Document doc=createPrefsDoc("map");  Element xmlMap=doc.getDocumentElement();  xmlMap.setAttribute("MAP_XML_VERSION",MAP_XML_VERSION);  for (Iterator<Map.Entry<String,String>> i=map.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<String,String> e=i.next();    Element xe=(Element)xmlMap.appendChild(doc.createElement("entry"));    xe.setAttribute("key",e.getKey());    xe.setAttribute("value",e.getValue());  }  writeDoc(doc,os);}  }
class C{  public static <T extends Object & java.lang.Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  private void establishInitialState(){  if (mInitialView == null) {    mInitialView=mInflater.inflate(R.layout.media_format_primary,null);    mInitiateButton=(Button)mInitialView.findViewById(R.id.initiate_media_format);    mInitiateButton.setOnClickListener(mInitiateListener);  }  setContentView(mInitialView);}  }
class C{  public Boolean isBeforeGuestShutdown(){  return beforeGuestShutdown;}  }
class C{  public void loadHistory(SourceInfo startingPoint){  Map<String,String> variables=readMySqlCharsetSystemVariables(null);  dbSchema.setSystemVariables(variables);  dbSchema.loadHistory(startingPoint);  String systemCharsetName=variables.get(MySqlSystemVariables.CHARSET_NAME_SERVER);  String systemCharsetNameFromHistory=dbSchema.systemVariables().getVariable(MySqlSystemVariables.CHARSET_NAME_SERVER);  if (!Strings.equalsIgnoreCase(systemCharsetName,systemCharsetNameFromHistory)) {    String ddlStatement=setStatementFor(variables);    dbSchema.applyDdl(source,"",ddlStatement,null);  }  recordProcessor.regenerate();}  }
class C{  public static float convertDpToPixel(float dp){  DisplayMetrics metrics=mRes.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  @Override final public FunctionNode visit(ASTNotIn node,Object data) throws VisitorException {  final int nargs=node.jjtGetNumChildren();  final ValueExpressionNode[] args=new ValueExpressionNode[nargs];  for (int i=0; i < nargs; i++) {    final Node argNode=node.jjtGetChild(i);    args[i]=(ValueExpressionNode)argNode.jjtAccept(this,null);  }  return new FunctionNode(FunctionRegistry.NOT_IN,null,args);}  }
class C{  public boolean isAbstract(){  return abstract_;}  }
class C{  public java.lang.StringBuffer deleteCharAt(int index){  internal.deleteCharAt(index);  return this;}  }
class C{  public int close(String filename){  DrmConvertedStatus convertedStatus=null;  int result=Downloads.Impl.STATUS_UNKNOWN_ERROR;  if (mDrmClient != null && mConvertSessionId >= 0) {    try {      convertedStatus=mDrmClient.closeConvertSession(mConvertSessionId);      if (convertedStatus == null || convertedStatus.statusCode != DrmConvertedStatus.STATUS_OK || convertedStatus.convertedData == null) {        result=Downloads.Impl.STATUS_NOT_ACCEPTABLE;      } else {        RandomAccessFile rndAccessFile=null;        try {          rndAccessFile=new RandomAccessFile(filename,"rw");          rndAccessFile.seek(convertedStatus.offset);          rndAccessFile.write(convertedStatus.convertedData);          result=Downloads.Impl.STATUS_SUCCESS;        } catch (        FileNotFoundException e) {          result=Downloads.Impl.STATUS_FILE_ERROR;          Log.w(TAG,"File: " + filename + " could not be found.",e);        }catch (        IOException e) {          result=Downloads.Impl.STATUS_FILE_ERROR;          Log.w(TAG,"Could not access File: " + filename + " .",e);        }catch (        IllegalArgumentException e) {          result=Downloads.Impl.STATUS_FILE_ERROR;          Log.w(TAG,"Could not open file in mode: rw",e);        }catch (        SecurityException e) {          Log.w(TAG,"Access to File: " + filename + " was denied denied by SecurityManager.",e);        } finally {          if (rndAccessFile != null) {            try {              rndAccessFile.close();            } catch (            IOException e) {              result=Downloads.Impl.STATUS_FILE_ERROR;              Log.w(TAG,"Failed to close File:" + filename + ".",e);            }          }        }      }    } catch (    IllegalStateException e) {      Log.w(TAG,"Could not close convertsession. Convertsession: " + mConvertSessionId,e);    }  }  return result;}  }
class C{  public void createSquare(Coordinate p){  segList.addPt(new Coordinate(p.x + distance,p.y + distance));  segList.addPt(new Coordinate(p.x + distance,p.y - distance));  segList.addPt(new Coordinate(p.x - distance,p.y - distance));  segList.addPt(new Coordinate(p.x - distance,p.y + distance));  segList.closeRing();}  }
class C{  public void moveEast(double amount){  if (!isBlocked()) {    setX(getX() + (float)amount);  }}  }
class C{  private void updateGui(){  final IDebugger activeDebugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread activeThread=activeDebugger == null ? null : activeDebugger.getProcessManager().getActiveThread();  if (activeThread == null) {    m_stackView.setDefinitionStatus(DefinitionStatus.UNDEFINED);    m_stackView.setEnabled(false);  } else {    m_stackView.setDefinitionStatus(DefinitionStatus.DEFINED);    m_stackView.setEnabled(true);    m_stackView.gotoOffset(getStackPointer(activeThread));  }}  }
class C{  @Override public void updateString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static ProgramStore BLEND_NONE_DEPTH_TEST(RenderScript rs){  if (rs.mProgramStore_BLEND_NONE_DEPTH_TEST == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.LESS);    builder.setBlendFunc(BlendSrcFunc.ONE,BlendDstFunc.ZERO);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(true);    rs.mProgramStore_BLEND_NONE_DEPTH_TEST=builder.create();  }  return rs.mProgramStore_BLEND_NONE_DEPTH_TEST;}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  toEPLOptions(writer,formatter,true);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  Loger.debug("Pruning old cache entries.");  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      Loger.debug(String.format("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key)));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  Loger.debug(String.format("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime));}  }
class C{  @Nullable public N random(){  return node(RAND.nextLong());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void put(String profileName,ICCColorSpaceExt bi){  super.putImpl(profileName,bi);}  }
class C{  public void buildQueries(){  if (queries.size() == 0) {    int smallerIntValue=intValue - 1;    int biggerIntValue=intValue + 1;    queries.add(Query.isInstanceOf(Query.value(mbeanClassName)));    queries.add(Query.match(Query.classattr(),Query.value(mbeanClassName)));    queries.add(Query.eq(Query.attr(primitiveIntAttName),Query.value(intValue)));    queries.add(Query.eq(Query.attr(primitiveLongAttName),Query.value(longValue)));    queries.add(Query.eq(Query.attr(primitiveDoubleAttName),Query.value(doubleValue)));    queries.add(Query.eq(Query.attr(primitiveFloatAttName),Query.value(floatValue)));    queries.add(Query.eq(Query.attr(mbeanClassName,primitiveIntAttName),Query.value(intValue)));    queries.add(Query.eq(Query.attr(stringAttName),Query.value(stringValue)));    queries.add(Query.eq(Query.attr(integerAttName),Query.value(integerValue)));    queries.add(Query.eq(Query.attr(primitiveBooleanAttName),Query.value(booleanValue)));    queries.add(Query.not(Query.eq(Query.attr(primitiveIntAttName),Query.value(smallerIntValue))));    queries.add(Query.or(Query.eq(Query.attr(primitiveIntAttName),Query.value(intValue)),Query.eq(Query.attr(primitiveLongAttName),Query.value(longValue))));    queries.add(Query.and(Query.eq(Query.attr(primitiveIntAttName),Query.value(intValue)),Query.eq(Query.attr(primitiveLongAttName),Query.value(longValue))));    ValueExp[] inArray={Query.value(intValue)};    queries.add(Query.in(Query.attr(primitiveIntAttName),inArray));    queries.add(Query.between(Query.attr(primitiveIntAttName),Query.value(smallerIntValue),Query.value(biggerIntValue)));    queries.add(Query.gt(Query.attr(primitiveIntAttName),Query.value(smallerIntValue)));    queries.add(Query.geq(Query.attr(primitiveIntAttName),Query.value(smallerIntValue)));    queries.add(Query.lt(Query.attr(primitiveIntAttName),Query.value(biggerIntValue)));    queries.add(Query.leq(Query.attr(primitiveIntAttName),Query.value(biggerIntValue)));    queries.add(Query.eq(Query.attr(primitiveIntAttName),Query.minus(Query.value(intValue),Query.value(0))));    queries.add(Query.eq(Query.attr(primitiveIntAttName),Query.plus(Query.value(intValue),Query.value(0))));    queries.add(Query.eq(Query.attr(primitiveIntAttName),Query.div(Query.value(intValue),Query.value(1))));    queries.add(Query.eq(Query.attr(primitiveIntAttName),Query.times(Query.value(intValue),Query.value(1))));    QueryExp q2_3=Query.and(queries.get(2 - 1),queries.get(3 - 1));    QueryExp q4_5=Query.and(queries.get(4 - 1),queries.get(5 - 1));    QueryExp q6_7=Query.and(queries.get(6 - 1),queries.get(7 - 1));    QueryExp q8_9=Query.and(queries.get(8 - 1),queries.get(9 - 1));    QueryExp q10_11=Query.and(queries.get(10 - 1),queries.get(11 - 1));    QueryExp q12_13=Query.and(queries.get(12 - 1),queries.get(13 - 1));    QueryExp q14_15=Query.and(queries.get(14 - 1),queries.get(15 - 1));    QueryExp q16_17=Query.and(queries.get(16 - 1),queries.get(17 - 1));    QueryExp q18_19=Query.and(queries.get(18 - 1),queries.get(19 - 1));    QueryExp q20_21=Query.and(queries.get(20 - 1),queries.get(21 - 1));    QueryExp q22_23=Query.and(queries.get(22 - 1),queries.get(23 - 1));    QueryExp q2_5=Query.and(q2_3,q4_5);    QueryExp q6_9=Query.and(q6_7,q8_9);    QueryExp q10_13=Query.and(q10_11,q12_13);    QueryExp q14_17=Query.and(q14_15,q16_17);    QueryExp q18_21=Query.and(q18_19,q20_21);    QueryExp q2_9=Query.and(q2_5,q6_9);    QueryExp q10_17=Query.and(q10_13,q14_17);    QueryExp q18_23=Query.and(q18_21,q22_23);    QueryExp q2_17=Query.and(q2_9,q10_17);    queries.add(Query.and(q2_17,q18_23));    queries.add(Query.or(q6_9,q18_23));  }}  }
class C{  public static Map<String,Object> sendOrderConfirmNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_CONFIRM");}  }
class C{  private void addOperators(ListItem column,Listbox listOperator){  String columnName=column.getValue().toString();  log.config("Column: " + columnName);  if (columnName.endsWith("_ID") || columnName.endsWith("_Acct")) {    addOperators(MQuery.OPERATORS_ID,listOperator);  } else   if (columnName.startsWith("Is")) {    addOperators(MQuery.OPERATORS_YN,listOperator);  } else {    addOperators(MQuery.OPERATORS,listOperator);  }}  }
class C{  private int find(T key,boolean modify){  if (mapType == MapType.SORTED_LIST) {    int i=binarySearch(key);    if (i < num && keys[i] != null && key.equals(keys[i]))     return i;    if (modify) {      if (locked)       throw new RuntimeException("Cannot make new entry for " + key + ", because map is locked");      if (num == capacity())       changeSortedListCapacity(getCapacity(num + 1,false));      for (int j=num; j > i; j--) {        keys[j]=keys[j - 1];        values[j]=values[j - 1];      }      num++;      values[i]=null;      return i;    } else     return -1;  } else   if (mapType == MapType.HASH_TABLE) {    int capacity=capacity();    int keyHash=hash(key);    int i=keyHash % capacity;    if (i < 0)     i=-i;    if (!locked && modify && (num > loadFactor * capacity || capacity <= num + 1)) {      switchMapType(MapType.HASH_TABLE);      return find(key,modify);    }    if (num == capacity)     throw new RuntimeException("Hash table is full: " + capacity);    while (keys[i] != null && !keys[i].equals(key)) {      i++;      numCollisions++;      if (i == capacity)       i=0;    }    if (keys[i] != null) {      assert key.equals(keys[i]);      return i;    }    if (modify) {      num++;      values[i]=null;      return i;    } else     return -1;  } else   throw new RuntimeException("Internal bug: " + mapType);}  }
class C{  protected HtmlEmail prepareHtmlEmail(List<String> recipients) throws EmailException {  HtmlEmail email=new HtmlEmail();  email.setHostName(smptHost);  email.setSmtpPort(smptPort);  email.setAuthentication(smptUser,smptPassword);  email.setFrom(senderAddress,senderName);  for (  String defaultTo : defaultRecipients) {    try {      email.addTo(defaultTo);    } catch (    EmailException e) {      if (log.isWarnEnabled()) {        log.warn("Invalid recipient e-mail address!",e);      }    }  }  for (  String to : recipients) {    try {      email.addTo(to);    } catch (    EmailException e) {      if (log.isWarnEnabled()) {        log.warn("Invalid recipient e-mail address!",e);      }    }  }  return email;}  }
class C{  @Override public void updateArray(String columnLabel,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  protected void sendFunctionGroup2(){  StringBuilder sb=new StringBuilder();  sb.append("xF ");  sb.append(address.getNumber());  sb.append(",");  sb.append(",");  sb.append(",");  sb.append(",");  sb.append(",");  sb.append((f5 ? "1" : "0"));  sb.append(",");  sb.append((f6 ? "1" : "0"));  sb.append(",");  sb.append((f7 ? "1" : "0"));  sb.append(",");  sb.append((f8 ? "1" : "0"));  tm=new TamsMessage(sb.toString());  tm.setBinary(false);  tm.setReplyType('T');  tc.sendTamsMessage(tm,this);  tmq.add(tm);}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    int v=s.charAt(i);    out.write((v >>> 8) & 0xFF);    out.write((v >>> 0) & 0xFF);  }  incCount(len * 2);}  }
class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  public void clear(){  toBitVector().clear();}  }
class C{  public void checkConfig(Player player,String configAchievement){  YamlManager config=plugin.getPluginConfig();  int money=Math.max(config.getInt(configAchievement + ".Reward.Money",0),config.getInt(configAchievement + ".Reward.Money.Amount",0));  int itemAmount=0;  if (config.getKeys(true).contains(configAchievement + ".Reward.Item.Amount")) {    itemAmount=config.getInt(configAchievement + ".Reward.Item.Amount",0);  } else   if (config.getKeys(true).contains(configAchievement + ".Reward.Item")) {    String materialAndQty=config.getString(configAchievement + ".Reward.Item","");    int indexOfAmount=materialAndQty.indexOf(' ');    if (indexOfAmount != -1)     itemAmount=Integer.parseInt(materialAndQty.substring(indexOfAmount + 1));  }  String commandReward=config.getString(configAchievement + ".Reward.Command","");  if (money > 0)   rewardMoney(player,money);  if (itemAmount > 0) {    ItemStack item=this.getItemReward(player,configAchievement,itemAmount);    if (player.getInventory().firstEmpty() != -1 && item != null)     player.getInventory().addItem(item); else     if (item != null)     player.getWorld().dropItem(player.getLocation(),item);  }  if (commandReward.length() > 0) {    commandReward=commandReward.replace("PLAYER",player.getName());    String[] commands=commandReward.split("; ");    for (    String command : commands)     plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),command);    String rewardMsg=plugin.getPluginLang().getString("command-reward","Reward command carried out!");    if (!rewardCommandNotif || rewardMsg.length() == 0)     return;    player.sendMessage(plugin.getChatHeader() + rewardMsg);  }}  }
class C{  public static void addVariableBundle(Bundle resultExtras,Bundle variables){  resultExtras.putBundle(EXTRA_VARIABLES_BUNDLE,variables);}  }
class C{  public static String encode(final byte[] data){  return new String(encode(data,true));}  }
class C{  private void clearNotificationInternal(){  NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  notificationManager.cancel(Constants.WEAR_NOTIFICATION_ID);}  }
class C{  private boolean notEqual(Object o1,Object o2){  if (o1 == null) {    return o2 != null;  }  if (o2 == null) {    return true;  }  return !o1.equals(o2);}  }
class C{  public Iterable<TMember> implemented(){  return members(IMPLEMENTED);}  }
class C{  public static void hideActionModePopUpWindow(){  if (mActionModePopupWindow != null) {    mActionModePopupWindow.dismiss();    mSurface.exitEditionMode();    mRotationLayout.setVisibility(View.GONE);    mScaleLayout.setVisibility(View.GONE);    mStatusBottomBar.setVisibility(View.VISIBLE);    mBottomBar.setVisibility(View.INVISIBLE);    mActionModePopupWindow=null;    mSurface.setRendererAxis(-1);  }  if (mSizeText != null)   if (mSizeText.getVisibility() == View.VISIBLE)   mSizeText.setVisibility(View.INVISIBLE);}  }
class C{  public static double alongTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){  double dist1Q=haversineFormulaRad(lat1,lon1,latQ,lonQ);  double ctd=crossTrackDistanceRad(lat1,lon1,lat2,lon2,latQ,lonQ,dist1Q);  return alongTrackDistanceRad(lat1,lon1,lat2,lon2,latQ,lonQ,dist1Q,ctd);}  }
class C{  public static BitVector createBitVector(byte[] data,int size){  BitVector bv=new BitVector(data.length * 8);  bv.setBytes(data);  bv.size=size;  return bv;}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  @Override public void close(){}  }
class C{  public void startFragment(Fragment fragment,String tag,boolean canAddToBackstack){  FragmentTransaction transaction=getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment);  if (canAddToBackstack) {    transaction.addToBackStack(tag);  }  transaction.commit();}  }
class C{  public static void writeVarInt(int n,ByteBuffer buff){  while ((n & 0xFFFF_FF80) != 0) {    byte data=(byte)(n | 0x80);    buff.put(data);    n>>>=7;  }  buff.put((byte)n);}  }
class C{  public Controller createController(){  SimpleController c=new SimpleController(this);  c.pressPlay();  return c;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void removeEdge(int i,int j){  removeEdgeInternal(i,j);  removeEdgeInternal(j,i);}  }
class C{  public String toString(){  StringBuffer strBuf=new StringBuffer();  Iterator it=iterator();  boolean b=false;  strBuf.append("[");  while (it.hasNext()) {    if (!b)     b=true; else     strBuf.append(", ");    strBuf.append(it.next().toString());  }  strBuf.append("]");  return strBuf.toString();}  }
class C{  @Override public Object deserializeTypedFromArray(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  return _deserialize(jp,ctxt);}  }
class C{  @SuppressWarnings("unchecked") private void initWindowsTaskBar(){  try {    threadPoolExecutor.execute(null);    long hwndVal=com.sun.glass.ui.Window.getWindows().get(0).getNativeWindow();    taskBarRelatedPointer=Pointer.pointerToAddress(hwndVal,(PointerIO)null);  } catch (  NoClassDefFoundError e) {    taskBarRelatedPointer=null;  }}  }
class C{  Collection<File> parse(String str) throws IOException {  Collection<HadoopClasspathUtils.SearchDirectory> dirs=HadoopClasspathUtils.parseUserLibs(str);  Collection<File> res=new HashSet<>();  for (  HadoopClasspathUtils.SearchDirectory dir : dirs)   Collections.addAll(res,dir.files());  return res;}  }
class C{  private void launchCamera(){  enableActionBarHeader(HIDE_ACTION_BAR_HEADER);  Intent intent=new Intent(this,VectorMediasPickerActivity.class);  startActivityForResult(intent,TAKE_IMAGE_REQUEST_CODE);}  }
class C{  private Bitmap createPhotoThumbnail(InputStream imageStream,int rotationAngle){  Bitmap bitmapRetValue=null;  final int MAX_SIZE=1024, SAMPLE_SIZE=0, QUALITY=100;  BitmapFactory.Options options=new BitmapFactory.Options();  options.inPreferredConfig=Bitmap.Config.ARGB_8888;  options.outWidth=-1;  options.outHeight=-1;  try {    InputStream stream=ImageUtils.resizeImage(imageStream,MAX_SIZE,SAMPLE_SIZE,QUALITY);    imageStream.close();    bitmapRetValue=BitmapFactory.decodeStream(stream,null,options);    if (0 != rotationAngle) {      android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();      bitmapMatrix.postRotate(rotationAngle);      bitmapRetValue=Bitmap.createBitmap(bitmapRetValue,0,0,bitmapRetValue.getWidth(),bitmapRetValue.getHeight(),bitmapMatrix,false);    }    System.gc();  } catch (  OutOfMemoryError e) {    Log.e(LOG_TAG,"## createPhotoThumbnail : out of memory");  }catch (  Exception e) {    Log.e(LOG_TAG,"## createPhotoThumbnail() Exception Msg=" + e.getMessage());  }  return bitmapRetValue;}  }
class C{  @Override public RequestWeb request(){  return _request;}  }
class C{  @Override public int index(double value){  return borders.index(value);}  }
class C{  public static Map<String,Double> bytesMapToDoubleMap(Map<String,byte[]> map,EntityDefinition ed){  Map<String,Double> result=new HashMap<String,Double>();  for (  Map.Entry<String,byte[]> entry : map.entrySet()) {    String qualifierName=entry.getKey();    Qualifier qualifier=ed.getDisplayNameMap().get(qualifierName);    if (qualifier == null)     qualifier=ed.getQualifierNameMap().get(qualifierName);    if (qualifier != null && entry.getValue() != null) {      qualifierName=qualifier.getDisplayName();      Object value=qualifier.getSerDeser().deserialize(entry.getValue());      result.put(qualifierName,convertObjToDouble(value));    } else {      result.put(qualifierName,null);    }  }  return result;}  }
class C{  @Override public boolean isItemValidForSlot(int slot,ItemStack stack,EntityLivingBase player){  if (stack == null || !(stack.getItem() instanceof IBauble) || !((IBauble)stack.getItem()).canEquip(stack,player))   return false;  return ((IBauble)stack.getItem()).getBaubleType(stack).hasSlot(slot);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PARAMETER__TYPE:    return basicGetType() != null;case TypesPackage.PARAMETER__TYPE_SPECIFIER:  return typeSpecifier != null;case TypesPackage.PARAMETER__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case TypesPackage.PARAMETER__ANNOTATIONS:return annotations != null && !annotations.isEmpty();case TypesPackage.PARAMETER__OWNING_OPERATION:return getOwningOperation() != null;}return super.eIsSet(featureID);}  }
class C{  @Override public int read(){  return -1;}  }
class C{  public static void main(String[] args){  try {    new JDABuilder().setBotToken("TOKEN").addListener(new GuildListenerExample()).buildBlocking();  } catch (  IllegalArgumentException e) {    System.out.println("The config was not populated. Please enter a bot token.");  }catch (  LoginException e) {    System.out.println("The provided bot token was incorrect. Please provide valid details.");  }catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public void processMessage(SIPMessage sipMessage){  if (sipMessage instanceof SIPRequest) {    SIPRequest sipRequest=(SIPRequest)sipMessage;    if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {      this.sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.getHost() + ":" + this.myPort,false,receptionTime);    }    ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);    if (sipServerRequest == null) {      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logWarning("Null request interface returned -- dropping request");      }      return;    }    if (sipStack.isLoggingEnabled())     this.sipStack.getStackLogger().logDebug("About to process " + sipRequest.getFirstLine() + "/"+ sipServerRequest);    try {      sipServerRequest.processRequest(sipRequest,this);    }  finally {      if (sipServerRequest instanceof SIPTransaction) {        SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;        if (!sipServerTx.passToListener()) {          ((SIPTransaction)sipServerRequest).releaseSem();        }      }    }    if (sipStack.isLoggingEnabled())     this.sipStack.getStackLogger().logDebug("Done processing " + sipRequest.getFirstLine() + "/"+ sipServerRequest);  } else {    SIPResponse sipResponse=(SIPResponse)sipMessage;    try {      sipResponse.checkHeaders();    } catch (    ParseException ex) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);      return;    }    ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);    if (sipServerResponse != null) {      try {        if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);          return;        }        sipServerResponse.processResponse(sipResponse,this);      }  finally {        if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())         ((SIPTransaction)sipServerResponse).releaseSem();      }    } else {      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logDebug("null sipServerResponse!");      }    }  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public PBKDF2Params(byte[] salt,int iterationCount,int keyLength,AlgorithmIdentifier prf){  this(salt,iterationCount);  this.keyLength=new ASN1Integer(keyLength);  this.prf=prf;}  }
class C{  protected static void addMappedProperties(Class clazz,List<InternalEventPropDescriptor> result){  Set<String> uniquePropertyNames=new HashSet<String>();  Method[] methods=clazz.getMethods();  for (int i=0; i < methods.length; i++) {    String methodName=methods[i].getName();    if (!methodName.startsWith("get")) {      continue;    }    String inferredName=methodName.substring(3,methodName.length());    if (inferredName.length() == 0) {      continue;    }    Class<?> parameterTypes[]=methods[i].getParameterTypes();    if (parameterTypes.length != 1) {      continue;    }    if (parameterTypes[0] != String.class) {      continue;    }    String newInferredName=null;    if (inferredName.length() >= 2) {      if ((Character.isUpperCase(inferredName.charAt(0))) && (Character.isUpperCase(inferredName.charAt(1)))) {        newInferredName=inferredName;      }    }    if (newInferredName == null) {      newInferredName=Character.toString(Character.toLowerCase(inferredName.charAt(0)));      if (inferredName.length() > 1) {        newInferredName+=inferredName.substring(1,inferredName.length());      }    }    inferredName=newInferredName;    if (uniquePropertyNames.contains(inferredName)) {      continue;    }    result.add(new InternalEventPropDescriptor(inferredName,methods[i],EventPropertyType.MAPPED));    uniquePropertyNames.add(inferredName);  }}  }
class C{  public static boolean autoEnableEntityCaps(){  return autoEnableEntityCaps;}  }
class C{  public void disableBuffer(){  if (bufferToggle != null) {    bufferToggle.close();    bufferToggle=null;  }}  }
class C{  private boolean isTimeoutOccured(WebServiceException e){  return (e.getCause() instanceof SocketTimeoutException) ? true : false;}  }
class C{  public File resourceEmlFile(@NotNull String resourceName){  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ EML_XML_FILENAME);}  }
class C{  public void addFooter(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null footer!");  }  mFooters.add(view);}  }
class C{  public static ISearchPattern createOrSearchPattern(ISearchPattern leftPattern,ISearchPattern rightPattern){  SearchPattern left=((SearchPatternAdapter)leftPattern).pattern;  SearchPattern right=((SearchPatternAdapter)rightPattern).pattern;  SearchPattern pattern=SearchPattern.createOrPattern(left,right);  return new SearchPatternAdapter(pattern);}  }
class C{  boolean breaksToLabel(String label){  return hasAlwaysKey(prefix("b",label));}  }
class C{  public boolean supportsGroupByUnrelated() throws SQLException {  return false;}  }
class C{  public static CGAffineTransform makeTranslation(double mx,double my){  CGAffineTransform t=new CGAffineTransform();  t.setToTranslation(mx,my);  return t;}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (entry.getValue() == null) {          return true;        }        entry=entry.next;      }    }  } else {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (isEqualValue(value,entry.getValue())) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void handleBrowse(){  container.setText(WorkspaceTools.selectProject(getShell(),container.getText()));}  }
class C{  public ExtractClassDescriptor(){  super(IJavaRefactorings.EXTRACT_CLASS);}  }
class C{  public void findBestLeaf(double[] maxCoverage,RuleNode[] bestLeaf){  if (!m_isLeaf) {    if (m_left != null) {      m_left.findBestLeaf(maxCoverage,bestLeaf);    }    if (m_right != null) {      m_right.findBestLeaf(maxCoverage,bestLeaf);    }  } else {    if (m_numInstances > maxCoverage[0]) {      maxCoverage[0]=m_numInstances;      bestLeaf[0]=this;    }  }}  }
class C{  private void installLogBridge(){  SLF4JBridgeHandler.removeHandlersForRootLogger();  SLF4JBridgeHandler.install();}  }
class C{  public static TempPath createDirectory() throws IOException {  return wrap(Files.createTempDirectory(PREFIX));}  }
class C{  public long compareAndSetAndGet(long expVal,long newVal){  return atomicLong.compareAndSetAndGet(expVal,newVal);}  }
class C{  public void incrementConsciousnessLevel(int amount){  this.consciousnessLevel=this.consciousnessLevel + amount;  int size=getRelationships().size();  if (size > SMALL) {    this.consciousnessLevel++;  }  if (size > MEDIUM) {    this.consciousnessLevel++;  }  if (size > LARGE) {    this.consciousnessLevel++;  }  if (this.consciousnessLevel > 5) {    incrementAccessCount();  }}  }
class C{  private static Byte[] byte2DToByte(byte[][] dd){  Byte[] d=new Byte[dd.length * dd[0].length];  for (int n=0; n < dd[0].length; n++) {    for (int m=0; m < dd.length; m++) {      d[m + n * dd.length]=dd[m][n];    }  }  return d;}  }
class C{  public void printStackTrace(){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(System.err,true));  } else {    super.printStackTrace();  }}  }
class C{  public ByteBufferBackedOutputStream(ByteBuffer buf){  this.buf=buf;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static boolean hasPendingWork(){  return !sPendingWorkFinishers.isEmpty();}  }
class C{  public UserEntry createUser(String username,String givenName,String familyName,String password) throws AppsForYourDomainException, ServiceException, IOException {  return createUser(username,givenName,familyName,password,null,null);}  }
class C{  public void normalizeAll(){  for (int nodeIndex=0; nodeIndex < nodes.length; nodeIndex++) {    normalizeNode(nodeIndex);  }}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  private IgniteConfiguration configuration(int idx) throws Exception {  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setName(CACHE_NAME);  ccfg.setCacheMode(cacheMode());  ccfg.setAtomicityMode(atomicityMode());  ccfg.setRebalanceMode(SYNC);  ccfg.setSwapEnabled(false);  ccfg.setWriteSynchronizationMode(FULL_SYNC);  ccfg.setEvictionPolicy(null);  if (cacheMode() == PARTITIONED)   ccfg.setBackups(backups());  if (atomicityMode() == ATOMIC) {    assert atomicWriteOrderMode() != null;    ccfg.setAtomicWriteOrderMode(atomicWriteOrderMode());  } else {    if (cacheMode() == PARTITIONED)     ccfg.setNearConfiguration(new NearCacheConfiguration());  }  IgniteConfiguration cfg=getConfiguration(nodeName(idx));  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  cfg.setLocalHost("127.0.0.1");  cfg.setCacheConfiguration(ccfg);  cfg.setConnectorConfiguration(null);  return cfg;}  }
class C{  public BloomFilter(final Hasher hash,double falsePositiveProbability,int expectedNumberOfElements,int metric){  this(hash,Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))) / Math.log(2),expectedNumberOfElements,(int)Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))),metric);}  }
class C{  public AudioQuality(){}  }
class C{  public DInhibitAnyPolicy(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DInhibitAnyPolicy.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public static ProjectTypePredicate or(ProjectTypePredicate first,ProjectTypePredicate second,ProjectTypePredicate... others){  return new ProjectTypePredicate(Predicates.or(Lists.asList(first,second,others)));}  }
class C{  public CompositeVisitor(List visitors){  this.visitors=visitors;  backToFrontVisitors=new ArrayList();  backToFrontVisitors.addAll(visitors);  Collections.reverse(backToFrontVisitors);}  }
class C{  public static DataFile readFile(URL fileUrl,URL definitionUrl,String dataFileName) throws DataFileException {  DataFile dataFile=makeDataFile(definitionUrl,dataFileName);  dataFile.readDataFile(fileUrl);  return dataFile;}  }
class C{  public void init(){  Logging.logd("Initializing...");  ExternalInit.initExternal(getContext());  initOptionsMenu();  initOmnibox();  initWebXWalkEngine();}  }
class C{  public double impliedVolatility(final double price,final GeneralizedBlackScholesProcess process,final double accuracy){  return impliedVolatility(price,process,accuracy,100,1.0e-7,4.0);}  }
class C{  private static long bitsLeftOf(int x){  return WORD_MASK << x;}  }
class C{  public void beforeCartesianOfGroupJunctionsInCompositeGroupJunctionOfType_AND(Collection[] grpResults){}  }
class C{  public int countService(long groupId,String keywords,String administrationCode,String domainCode) throws PortalException, SystemException {  return serviceInfoFinder.countService(groupId,keywords,administrationCode,domainCode);}  }
class C{  public SplashWindow(String filename){  this.file=filename;}  }
class C{  @Override public final void replaceAll(BiFunction<? super K,? super V,? extends V> function){  Objects.requireNonNull(function);  int mc=this.modCount;  Segment<K,V> segment;  for (long segmentIndex=0; segmentIndex >= 0; segmentIndex=nextSegmentIndex(segmentIndex,segment)) {    (segment=segment(segmentIndex)).replaceAll(function);  }  if (mc != modCount)   throw new ConcurrentModificationException();}  }
class C{  public static void main(String[] args) throws InterruptedException {  System.out.println("pid=" + getPID());  Thread.sleep(5000);}  }
class C{  public LogEntryAddedEvent(int insertionIndex,LogEntry<T> logEntry,boolean needsAttention,boolean parentsChanged){  this.insertionIndex=insertionIndex;  this.logEntry=logEntry;  this.needsAttention=needsAttention;  this.parentsChanged=parentsChanged;}  }
class C{  private void initializeActiveFieldSetters(){  for (int i=0; i < columnFieldSetters.size(); i++) {    ActiveFieldInfo activeFieldInfo=columnFieldSetters.get(i);    SupportType st=activeFieldInfo.fieldInfo.getType();switch (st) {case BOOLEAN:      activeFieldInfo.setterOrGetter=PojoUtils.createSetterBoolean(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());    break;case DOUBLE:  activeFieldInfo.setterOrGetter=PojoUtils.createSetterDouble(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case FLOAT:activeFieldInfo.setterOrGetter=PojoUtils.createSetterFloat(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case INTEGER:activeFieldInfo.setterOrGetter=PojoUtils.createSetterInt(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case STRING:activeFieldInfo.setterOrGetter=PojoUtils.createSetter(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression(),activeFieldInfo.fieldInfo.getType().getJavaType());break;case LONG:activeFieldInfo.setterOrGetter=PojoUtils.createSetterLong(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;default :activeFieldInfo.setterOrGetter=PojoUtils.createSetter(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression(),Byte.class);break;}columnFieldSetters.get(i).setterOrGetter=activeFieldInfo.setterOrGetter;}}  }
class C{  @Deprecated public void angularBindGlobal(String name,Object o){  angularBind(name,o,(String)null);}  }
class C{  @Override public void requestCloseRead(){  _state=_state.toCloseRead();  try {    requestLoop();  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.193 -0500",hash_original_method="49E5C1FBB8FADEED10B26703F569758C",hash_generated_method="0869DD9505DD3649F4764FEE639920D0") private void implCreateIfNeeded() throws IOException {  if (!implCreated) {synchronized (this) {      if (!implCreated) {        try {          impl.create(true);        }  finally {          implCreated=true;        }      }    }  }}  }
class C{  private void updateFilter(){  IFilter<T> filter;  try {    filter=m_filterFactory.createFilter(m_inputField.getText());    m_inputField.setBackground(Color.WHITE);  } catch (  final RecognitionException e) {    m_inputField.setBackground(Color.RED.brighter().brighter());    return;  }  for (  final IFilterPanelListener<T> listener : m_listeners) {    try {      listener.changedFilter(this,filter);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void onSuccess(JSONObject response){}  }
class C{  Map<String,Object> unmodifiableMap(){  return Collections.unmodifiableMap(map);}  }
class C{  public String invoice(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int C_Invoice_ID=((Integer)value).intValue();  if (C_Invoice_ID == 0)   return "";  int C_BankAccount_ID=Env.getContextAsInt(ctx,WindowNo,"C_BankAccount_ID");  Timestamp PayDate=Env.getContextAsDate(ctx,WindowNo,"PayDate");  if (PayDate == null)   PayDate=new Timestamp(System.currentTimeMillis());  BigDecimal OpenAmt=Env.ZERO;  BigDecimal DiscountAmt=Env.ZERO;  Boolean IsSOTrx=Boolean.FALSE;  String sql="SELECT currencyConvert(invoiceOpen(i.C_Invoice_ID, 0), i.C_Currency_ID," + "ba.C_Currency_ID, i.DateInvoiced, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID)," + " paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?), i.IsSOTrx "+ "FROM C_Invoice_v i, C_BankAccount ba "+ "WHERE i.C_Invoice_ID=? AND ba.C_BankAccount_ID=?";  ResultSet rs=null;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(2,C_Invoice_ID);    pstmt.setInt(3,C_BankAccount_ID);    pstmt.setTimestamp(1,PayDate);    rs=pstmt.executeQuery();    if (rs.next()) {      OpenAmt=rs.getBigDecimal(1);      DiscountAmt=rs.getBigDecimal(2);      IsSOTrx=new Boolean("Y".equals(rs.getString(3)));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine(" - OpenAmt=" + OpenAmt + " (Invoice="+ C_Invoice_ID+ ",BankAcct="+ C_BankAccount_ID+ ")");  mTab.setValue("OpenAmt",OpenAmt);  mTab.setValue("PayAmt",OpenAmt.subtract(DiscountAmt));  mTab.setValue("DiscountAmt",DiscountAmt);  mTab.setValue("DifferenceAmt",Env.ZERO);  mTab.setValue("IsSOTrx",IsSOTrx);  return "";}  }
class C{  private void appendWhiteSpace(final StringBuffer sb,int length){  while (length >= 16) {    sb.append(SPACE_16);    length-=16;  }  if (length >= 8) {    sb.append(SPACE_8);    length-=8;  }  if (length >= 4) {    sb.append(SPACE_4);    length-=4;  }  if (length >= 2) {    sb.append(SPACE_2);    length-=2;  }  if (length >= 1) {    sb.append(SPACE_1);    length-=1;  }}  }
class C{  public AttributeList(int initialCapacity){  super(initialCapacity);}  }
class C{  public Continuation(){}  }
class C{  private boolean isTrivialIntersection(SegmentString e0,int segIndex0,SegmentString e1,int segIndex1){  if (e0 == e1) {    if (li.getIntersectionNum() == 1) {      if (isAdjacentSegments(segIndex0,segIndex1))       return true;      if (e0.isClosed()) {        int maxSegIndex=e0.size() - 1;        if ((segIndex0 == 0 && segIndex1 == maxSegIndex) || (segIndex1 == 0 && segIndex0 == maxSegIndex)) {          return true;        }      }    }  }  return false;}  }
class C{  public static void sendWakeOnLan(@NonNull String ipStr,@NonNull String macStr) throws IOException, IllegalArgumentException {  sendWakeOnLan(ipStr,macStr,DEFAULT_PORT,DEFAULT_TIMEOUT_MILLIS,DEFAULT_NO_PACKETS);}  }
class C{  public void toggleMask(){  if (mImageMask.getVisibility() == View.INVISIBLE) {    mImageMask.setVisibility(View.VISIBLE);  } else {    mImageMask.setVisibility(View.INVISIBLE);  }}  }
class C{  private void takePicture(){  Log.d(TAG,"takePicture: ");  lockFocus();}  }
class C{  public static XMLTreeLocation inTheBegin(){  return new XMLTreeLocation(LocationType.BEGIN,"");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.003 -0500",hash_original_method="7E9E2322F8BF9BC3C830467DF1C4FD47",hash_generated_method="EA345665434FE1E441B8A753E3F3C278") public static String buttonStateToString(int buttonState){  if (buttonState == 0) {    return "0";  }  StringBuilder result=null;  int i=0;  while (buttonState != 0) {    final boolean isSet=(buttonState & 1) != 0;    buttonState>>>=1;    if (isSet) {      final String name=BUTTON_SYMBOLIC_NAMES[i];      if (result == null) {        if (buttonState == 0) {          return name;        }        result=new StringBuilder(name);      } else {        result.append('|');        result.append(name);      }    }    i+=1;  }  return result.toString();}  }
class C{  protected void resetFrame(){  lastDispose=dispose;  lastRect=new Rectangle(ix,iy,iw,ih);  lastImage=image;  lastBgColor=bgColor;  lct=null;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=Utils.convertDpToPixel(4f);      float yOffset=l.getLineWidth() + Utils.calcTextHeight(mLimitLinePaint,label) / 2f;      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      if (l.getLabelPosition() == LimitLine.LimitLabelPosition.POS_RIGHT) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public static Map parseCommandLineArguments(String[] args){  Map<String,String> result=new HashMap<String,String>();  String key, value;  for (int i=0; i < args.length; i++) {    key=args[i];    if (key.charAt(0) == '-') {      if (i + 1 < args.length) {        value=args[i + 1];        if (value.charAt(0) != '-') {          result.put(key,value);          i++;        } else {          result.put(key,null);        }      } else {        result.put(key,null);      }    }  }  return result;}  }
class C{  public boolean isCompleted(){  return completed;}  }
class C{  public static ContextInfo create(RStartParams startParams,String[] env,ContextKind kind,RContext parent,ConsoleHandler consoleHandler,TimeZone systemTimeZone){  int id=contextInfoIds.incrementAndGet();  return new ContextInfo(startParams,env,kind,parent,consoleHandler,systemTimeZone,id);}  }
class C{  public static List<Entry> loadEntriesFromAssets(AssetManager am,String path){  List<Entry> entries=new ArrayList<Entry>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(am.open(path),"UTF-8"));    String line=reader.readLine();    while (line != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }      line=reader.readLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        Log.e(LOG,e.toString());      }    }  }  return entries;}  }
class C{  public static Cylinder computeBoundingCylinder(Iterable<? extends Vec4> points){  if (points == null) {    String message=Logging.getMessage("nullValue.PointListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4[] axes=WWMath.computePrincipalAxes(points);  if (axes == null) {    String message=Logging.getMessage("generic.ListIsEmpty");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 r=axes[0];  Vec4 s=axes[1];  List<Vec4> sPlanePoints=new ArrayList<Vec4>();  double minDotR=Double.MAX_VALUE;  double maxDotR=-minDotR;  for (  Vec4 p : points) {    double pdr=p.dot3(r);    sPlanePoints.add(p.subtract3(r.multiply3(p.dot3(r))));    if (pdr < minDotR)     minDotR=pdr;    if (pdr > maxDotR)     maxDotR=pdr;  }  Vec4 minPoint=sPlanePoints.get(0);  Vec4 maxPoint=minPoint;  double minDotS=Double.MAX_VALUE;  double maxDotS=-minDotS;  for (  Vec4 p : sPlanePoints) {    double d=p.dot3(s);    if (d < minDotS) {      minPoint=p;      minDotS=d;    }    if (d > maxDotS) {      maxPoint=p;      maxDotS=d;    }  }  Vec4 center=minPoint.add3(maxPoint).divide3(2);  double radius=center.distanceTo3(minPoint);  for (  Vec4 h : sPlanePoints) {    Vec4 hq=h.subtract3(center);    double d=hq.getLength3();    if (d > radius) {      Vec4 g=center.subtract3(hq.normalize3().multiply3(radius));      center=g.add3(h).divide3(2);      radius=d;    }  }  Vec4 bottomCenter=center.add3(r.multiply3(minDotR));  Vec4 topCenter=center.add3((r.multiply3(maxDotR)));  if (radius == 0)   radius=1;  if (bottomCenter.equals(topCenter))   topCenter=bottomCenter.add3(new Vec4(1,0,0));  return new Cylinder(bottomCenter,topCenter,radius);}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  public NormalizedIndicator(Problem problem,NondominatedPopulation referenceSet,double[] minimum,double[] maximum){  super();  this.problem=problem;  normalizer=new Normalizer(problem,minimum,maximum);  normalizedReferenceSet=normalizer.normalize(referenceSet);}  }
class C{  public AddressFactoryImpl(){}  }
class C{  public void sync(MemChunkHolder<VolatileMemAllocator> mchunk){  m_vmasvc.sync(m_nid,getChunkAddress(mchunk),0L,true);}  }
class C{  public void saveSession(String clientId,ChannelHandlerContext session){  this.repo.put(clientId,session);}  }
class C{  @Override public void onWindowFocusChanged(boolean hasFocus){  super.onWindowFocusChanged(hasFocus);  if (init)   return;  init=true;  Drawable[] subButtonDrawables=new Drawable[3];  int[] drawablesResource=new int[]{R.drawable.boom,R.drawable.java,R.drawable.github};  for (int i=0; i < 3; i++)   subButtonDrawables[i]=ContextCompat.getDrawable(this,drawablesResource[i]);  String[] subButtonTexts=new String[]{"BoomMenuButton","View source code","Follow me"};  int[][] subButtonColors=new int[3][2];  for (int i=0; i < 3; i++) {    subButtonColors[i][1]=ContextCompat.getColor(this,R.color.material_white);    subButtonColors[i][0]=Util.getInstance().getPressedColor(subButtonColors[i][1]);  }  new BoomMenuButton.Builder().addSubButton(ContextCompat.getDrawable(this,R.drawable.boom),subButtonColors[0],"BoomMenuButton").addSubButton(ContextCompat.getDrawable(this,R.drawable.java),subButtonColors[0],"View source code").addSubButton(ContextCompat.getDrawable(this,R.drawable.github),subButtonColors[0],"Follow me").button(ButtonType.HAM).boom(BoomType.PARABOLA).place(PlaceType.HAM_3_1).subButtonTextColor(ContextCompat.getColor(this,R.color.black)).subButtonsShadow(Util.getInstance().dp2px(2),Util.getInstance().dp2px(2)).init(boomMenuButton);}  }
class C{  @Override public void prepareSelectedBuckets(long... selectedBuckets) throws IOException {  if (!finished) {    throw new IllegalStateException("Cannot replay yet, collection is not finished: postCollect() has not been called");  }  if (this.selectedBuckets != null) {    throw new IllegalStateException("Already been replayed");  }  final LongHash hash=new LongHash(selectedBuckets.length,BigArrays.NON_RECYCLING_INSTANCE);  for (  long bucket : selectedBuckets) {    hash.add(bucket);  }  this.selectedBuckets=hash;  collector.preCollection();  if (collector.needsScores()) {    throw new IllegalStateException("Cannot defer if scores are needed");  }  for (  Entry entry : entries) {    final LeafBucketCollector leafCollector=collector.getLeafCollector(entry.context);    leafCollector.setScorer(Lucene.illegalScorer("A limitation of the " + SubAggCollectionMode.BREADTH_FIRST + " collection mode is that scores cannot be buffered along with document IDs"));    final PackedLongValues.Iterator docDeltaIterator=entry.docDeltas.iterator();    final PackedLongValues.Iterator buckets=entry.buckets.iterator();    int doc=0;    for (long i=0, end=entry.docDeltas.size(); i < end; ++i) {      doc+=docDeltaIterator.next();      final long bucket=buckets.next();      final long rebasedBucket=hash.find(bucket);      if (rebasedBucket != -1) {        leafCollector.collect(doc,rebasedBucket);      }    }  }  collector.postCollection();}  }
class C{  public void addReverseEdge(GraphEdge edge){  SuccessorEdges.Mutable successors=getNodeSuccessors(edge.getHead());  successors.addReverseEdge(edge);}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){  float offset1=numbersRadius;  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;  float offset3=numbersRadius / 2f;  mPaint.setTextSize(textSize);  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;  textGridHeights[0]=yCenter - offset1;  textGridWidths[0]=xCenter - offset1;  textGridHeights[1]=yCenter - offset2;  textGridWidths[1]=xCenter - offset2;  textGridHeights[2]=yCenter - offset3;  textGridWidths[2]=xCenter - offset3;  textGridHeights[3]=yCenter;  textGridWidths[3]=xCenter;  textGridHeights[4]=yCenter + offset3;  textGridWidths[4]=xCenter + offset3;  textGridHeights[5]=yCenter + offset2;  textGridWidths[5]=xCenter + offset2;  textGridHeights[6]=yCenter + offset1;  textGridWidths[6]=xCenter + offset1;}  }
class C{  public static void openCallIntent(Activity activity,String phoneNumber,int codeRequest){  try {    Intent callIntent=getCallIntent(phoneNumber);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      if (ActivityCompat.checkSelfPermission(activity,android.Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {        activity.startActivity(callIntent);      } else {        requestMultiplePermissions(activity,new String[]{Manifest.permission.CALL_PHONE},codeRequest);      }    } else {      activity.startActivity(callIntent);    }  } catch (  ActivityNotFoundException e) {    logThis(TAG,"openCallIntent ActivityNotFoundException",e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void stopEditing(){  m_editor.setVisible(false);  if (m_editItem != null) {    String txt=m_editor.getText();    m_editItem.set(m_editAttribute,txt);    m_editItem=null;    m_editAttribute=null;    m_editor.setBackground(null);    m_editor.setForeground(null);  }  m_editing=false;}  }
class C{  protected Vector3[] canConnectRail(Block block){  if (!(block instanceof BlockRail))   return null;  if (this.distanceSquared(block) > 2)   return null;  Vector3[] result=checkRail(this);  if (result.length == 2)   return null;  return result;}  }
class C{  public Builder initializeAsNewRestore(IndexMetaData indexMetaData,RestoreSource restoreSource,IntSet ignoreShards){  return initializeAsRestore(indexMetaData,restoreSource,ignoreShards,true,new UnassignedInfo(UnassignedInfo.Reason.NEW_INDEX_RESTORED,"restore_source[" + restoreSource.snapshotId().getRepository() + "/"+ restoreSource.snapshotId().getSnapshot()+ "]"));}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  @Override protected void init(){  swmMetadataTable=new SoftwareModuleMetadatadetailslayout();  swmMetadataTable.init(getI18n(),getPermissionChecker(),softwareManagement,swMetadataPopupLayout,entityFactory);  super.init();}  }
class C{  public DTBuilder(int year,int month,int day,int hour,int minute,int second){  this.year=year;  this.month=month;  this.day=day;  this.hour=hour;  this.minute=minute;  this.second=second;}  }
class C{  protected void drawProjectionBackground(Graphics g){  if (g instanceof Graphics2D) {    projection.drawBackground((Graphics2D)g,getBckgrnd());  } else {    g.setColor(getBackground());    projection.drawBackground(g);  }}  }
class C{  private void goForward(){  if (this.inAppWebView.canGoForward()) {    this.inAppWebView.goForward();  }}  }
class C{  public void clear(){  setLength(0);}  }
class C{  @Override public void clear(){  this.clear(0,mSize);  mPointer=0;}  }
class C{  public void onDeviceFind(OneSheeldDevice device){}  }
class C{  public boolean isMatrixIgnoreZeroRewriteApplicable(){  boolean ret=false;  if (!ALLOW_CTABLE_SEQUENCE_REWRITES || _op != OpOp3.CTABLE)   return ret;  try {    if (getInput().size() == 2 || (getInput().size() > 2 && getInput().get(2).getDataType() == DataType.SCALAR)) {      Hop input1=getInput().get(0);      Hop input2=getInput().get(1);      if (input1.getDataType() == DataType.MATRIX && input2.getDataType() == DataType.MATRIX && input1 instanceof ParameterizedBuiltinOp && ((ParameterizedBuiltinOp)input1).getOp() == ParamBuiltinOp.RMEMPTY && input2 instanceof ParameterizedBuiltinOp && ((ParameterizedBuiltinOp)input2).getOp() == ParamBuiltinOp.RMEMPTY) {        ParameterizedBuiltinOp pb1=(ParameterizedBuiltinOp)input1;        ParameterizedBuiltinOp pb2=(ParameterizedBuiltinOp)input2;        Hop pbin1=pb1.getTargetHop();        Hop pbin2=pb2.getTargetHop();        if (pbin1 instanceof ReorgOp && ((ReorgOp)pbin1).getOp() == ReOrgOp.RESHAPE && pbin2 instanceof ReorgOp && ((ReorgOp)pbin2).getOp() == ReOrgOp.RESHAPE) {          Hop left=pbin1.getInput().get(0);          Hop right=pbin2.getInput().get(0);          if (left instanceof BinaryOp && ((BinaryOp)left).getOp() == OpOp2.MULT && left.getInput().get(0) instanceof BinaryOp && ((BinaryOp)left.getInput().get(0)).getOp() == OpOp2.NOTEQUAL && left.getInput().get(0).getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)left.getInput().get(0).getInput().get(1)) == 0 && left.getInput().get(0).getInput().get(0) == right) {            ret=true;          } else           if (right instanceof BinaryOp && ((BinaryOp)right).getOp() == OpOp2.MULT && right.getInput().get(0) instanceof BinaryOp && ((BinaryOp)right.getInput().get(0)).getOp() == OpOp2.NOTEQUAL && right.getInput().get(0).getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)right.getInput().get(0).getInput().get(1)) == 0 && right.getInput().get(0).getInput().get(0) == left) {            ret=true;          }        }      }    }  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  return ret;}  }
class C{  public ExtrudedPolygon(Iterable<? extends Position> corners){  this(corners,1d);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.048 -0500",hash_original_method="4B051F35B9C270411E541578F7D74139",hash_generated_method="CAA61CEDD6773BF38F3304301B6F4716") public boolean hasMipmaps(){  return mDimMipmaps;}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public final int readUnsignedByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp;}  }
class C{  public static void writeAllAppClasses(){  for (  SootClass clz : Scene.v().getClasses()) {    if (clz.isApplicationClass()) {      SootUtils.writeByteCodeAndJimple(Project.v().getOutputDir(),clz);    }  }}  }
class C{  public ParsedProperties(){  properties=new Properties();}  }
class C{  private boolean checkSensorsStatus_underRecording(){  EndToEndTestUtils.instrumentation.waitForIdleSync();  EndToEndTestUtils.startRecording();  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_sensor_state),true);  boolean result=EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.sensor_state_connected),1,EndToEndTestUtils.LONG_WAIT_TIME);  EndToEndTestUtils.stopRecording(true);  return result;}  }
class C{  public byte[] serialize() throws IOException {  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();  DataOutputStream dataOut=new DataOutputStream(bytesOut);  write(dataOut);  return bytesOut.toByteArray();}  }
class C{  public void makeComplete(){  if (mProvider == null)   mProvider="?";  if (!mHasAccuracy) {    mHasAccuracy=true;    mAccuracy=100.0f;  }  if (mTime == 0)   mTime=System.currentTimeMillis();  if (mElapsedRealtimeNanos == 0)   mElapsedRealtimeNanos=SystemClock.elapsedRealtimeNanos();}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static double max(DoubleArrayList data){  int size=data.size();  if (size == 0)   throw new IllegalArgumentException();  double[] elements=data.elements();  double max=elements[size - 1];  for (int i=size - 1; --i >= 0; ) {    if (elements[i] > max)     max=elements[i];  }  return max;}  }
class C{  public void go(boolean forceOffline) throws ReplicatorException {  File confDir=ReplicatorRuntimeConf.locateReplicatorConfDir();  File propsFile=new File(confDir,CONFIG_SERVICES);  serviceProps=PropertiesManager.loadProperties(propsFile);  try {    logger.info("Loading security information");    AuthenticationInfo authenticationInfo=SecurityHelper.loadAuthenticationInformation(TUNGSTEN_APPLICATION_NAME.REPLICATOR);    this.securityInfo=authenticationInfo;    logger.info(SecurityHelper.printSecuritySummary(authenticationInfo));  } catch (  ConfigurationException ce) {    String msg=MessageFormat.format("Error while loading Security properties from file: will continue with default values.\n Caused by: {0}",ce.getMessage());    logger.warn(msg);  }  initializeTimeZoneInfo(serviceProps);  managerRMIPort=serviceProps.getInt(ReplicatorConf.RMI_PORT,ReplicatorConf.RMI_DEFAULT_PORT,false);  managerRMIHost=getHostName(serviceProps);  JmxManager jmxManager=new JmxManager(managerRMIHost,managerRMIPort,ReplicatorConf.RMI_DEFAULT_SERVICE_NAME,securityInfo);  jmxManager.start();  loadServiceConfigurations();  Vector<TungstenProperties> remoteServices=new Vector<TungstenProperties>();  for (  String serviceName : serviceConfigurations.keySet()) {    TungstenProperties replProps=serviceConfigurations.get(serviceName);    String serviceType=replProps.getString(ReplicatorConf.SERVICE_TYPE);    boolean isDetached=replProps.getBoolean(ReplicatorConf.DETACHED);    replProps.setBoolean(ReplicatorConf.FORCE_OFFLINE,forceOffline);    if (serviceType.equals("local")) {      try {        logger.info(String.format("Starting the %s/%s replication service '%s'",(isDetached ? "detached" : "internal"),serviceType,serviceName));        startReplicationService(replProps);      } catch (      Exception e) {        logger.error("Unable to instantiate replication service: name=" + serviceName,e);      }    } else     if (serviceType.equals("remote")) {      remoteServices.add(replProps);    } else {      logger.warn(String.format("The replication service '%s' has an urecognized type '%s'",serviceName,serviceType));    }  }  for (  TungstenProperties replProps : remoteServices) {    String serviceName=replProps.getString(ReplicatorConf.SERVICE_NAME);    String serviceType=replProps.getString(ReplicatorConf.SERVICE_TYPE);    try {      logger.info(String.format("Starting the %s replication service '%s'",serviceType,serviceName));      startReplicationService(replProps);    } catch (    Exception e) {      logger.error("Unable to instantiate replication service: name=" + serviceName,e);    }  }  JmxManager.registerMBean(this,ReplicationServiceManager.class);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof NonceAttribute))   return false;  NonceAttribute att=(NonceAttribute)obj;  return (att.getAttributeType() == getAttributeType() && att.getDataLength() == getDataLength() && Arrays.equals(att.nonce,nonce));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.079 -0500",hash_original_method="9688C7F66E6F76D1BE1FBD610A4BC951",hash_generated_method="9B81995D24CAE7A81EB817AEC4C3844B") public void applyLocalizedPattern(String template){  pattern=convertPattern(template,formatData.getLocalPatternChars(),PATTERN_CHARS,true);}  }
class C{  public static XintroActivityBuilder with(Context context){  return new XintroActivityBuilder(context);}  }
class C{  protected void configureEditorAPI(){  bind(EditorAgent.class).to(EditorAgentImpl.class).in(Singleton.class);  bind(EditorRegistry.class).to(EditorRegistryImpl.class).in(Singleton.class);  bind(UserActivityManager.class).in(Singleton.class);  bind(OutlinePartView.class).to(OutlinePartViewImpl.class).in(Singleton.class);}  }
class C{  public static String bytesToHexString(byte[] bytes){  checkNotNull(bytes,"Argument [bytes] may not be null");  StringBuilder buffer=new StringBuilder();  for (int i=0; i < bytes.length; i++) {    buffer.append(UnsignedByte.toHexString(bytes[i]));    if (i < bytes.length - 1) {      buffer.append(" ");    }  }  return buffer.toString();}  }
class C{  @Override public void destroy() throws ResourceException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("destroy()");  }  if (isDestroyed.get() || connection == null) {    return;  }  isDestroyed.set(true);  try {    connection.setExceptionListener(null);  } catch (  JMSException e) {    ActiveMQRALogger.LOGGER.debug("Error unsetting the exception listener " + this,e);  }  if (connection != null) {    connection.signalStopToAllSessions();  }  destroyHandles();  try {    if (connection != null) {      connection.close();    }    try {      if (nonXAsession != null) {        nonXAsession.close();      }      if (xaSession != null) {        xaSession.close();      }    } catch (    JMSException e) {      ActiveMQRALogger.LOGGER.debug("Error closing session " + this,e);    }    if (connectionFactory != null) {      ra.closeConnectionFactory(mcf.getProperties());    }  } catch (  Throwable e) {    throw new ResourceException("Could not properly close the session and connection",e);  }}  }
class C{  public String globalInfo(){  return "K* is an instance-based classifier, that is the class of a test " + "instance is based upon the class of those training instances " + "similar to it, as determined by some similarity function.  It differs "+ "from other instance-based learners in that it uses an entropy-based "+ "distance function.\n\n"+ "For more information on K*, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void addChannel(IChannel channel){  if (!this.channels.contains(channel) && !(channel instanceof IVoiceChannel) && !(channel instanceof IPrivateChannel))   this.channels.add(channel);}  }
class C{  private Set<PrintsRawMatch> filterModelMatches(final Set<PrintsRawMatch> motifMatchesForCurrentModel,final FingerPRINTSHierarchyDBParser.HierachyDBEntry hierachyDBEntry,final List<String> hierarchyModelIDLimitation){  if (motifMatchesForCurrentModel == null || motifMatchesForCurrentModel.size() == 0) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("No matches passed into filterModelMatches method - exiting.");    }    return Collections.emptySet();  }  if (motifMatchesForCurrentModel.size() < hierachyDBEntry.getMinimumMotifCount()) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Not enough motif matches: " + motifMatchesForCurrentModel.size() + " matched, but must be "+ hierachyDBEntry.getMinimumMotifCount());    }    return Collections.emptySet();  }  if (hierachyDBEntry.isDomain()) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Match passes as is domain model.");    }    return motifMatchesForCurrentModel;  }  if (!hierarchyModelIDLimitation.contains(hierachyDBEntry.getId())) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Match FAILED model hierarchy test, model ID " + hierachyDBEntry.getId());    }    return Collections.emptySet();  }  if (hierachyDBEntry.getHierarchicalRelations().size() < hierarchyModelIDLimitation.size()) {    hierarchyModelIDLimitation.clear();    hierarchyModelIDLimitation.addAll(hierachyDBEntry.getHierarchicalRelations());  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Matches passed!");  }  return motifMatchesForCurrentModel;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.MODULE_FILTER__MODULE_FILTER_TYPE:    return moduleFilterType != MODULE_FILTER_TYPE_EDEFAULT;case N4mfPackage.MODULE_FILTER__MODULE_SPECIFIERS:  return moduleSpecifiers != null && !moduleSpecifiers.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.subLabelPaint,stream);}  }
class C{  public static String toString(final int value){  return Integer.toString(value);}  }
class C{  public static ExceptionMessage translateExceptionMessage(ExceptionCode code) throws MessageTranslatorException {  return translateExceptionMessage(code.getCode(),null);}  }
class C{  private Long updateLongWithMax(Long previousValue,Long newValue){  if (newValue == null) {    return previousValue;  }  if (newValue < 0) {    return 0L;  }  return Math.max(previousValue,newValue);}  }
class C{  public static boolean isImageType(String mime){  return mime.toLowerCase().startsWith("image/");}  }
class C{  public synchronized ExtentTest createTest(String testName){  return createTest(testName,null);}  }
class C{  synchronized public void destroy(){  if (mDestroyed) {    throw new RSInvalidStateException("Object already destroyed.");  }  mDestroyed=true;  mRS.nObjDestroy(mID);}  }
class C{  public boolean dispatchGenericMotionEvent(MotionEvent ev){  onUserInteraction();  if (getWindow().superDispatchGenericMotionEvent(ev)) {    return true;  }  return onGenericMotionEvent(ev);}  }
class C{  public VImage(String columnName,int WindowNo){  super("-");  m_columnName=columnName;  m_WindowNo=WindowNo;  super.addActionListener(this);}  }
class C{  public void load() throws IOException, ClassNotFoundException {  InputStream input=this.getClass().getResourceAsStream("coredict.mem");  loadFromObjectInputStream(input);}  }
class C{  private void initNumericValue(){  if (numericValue == 0) {    numericValue=NumberUtils.stringToLong(StringUtils.trim(strValue));    if (numericValue == 0 && !"0".equals(strValue)) {      setError("Value " + strValue + " is not a valid number (tried to cast to java type long)");    }  }}  }
class C{  public boolean isDiskCacheEnabled(){  return mDiskCacheEnabled && UriUtil.isNetworkUri(mSourceUri);}  }
class C{  public void onFailure(String responseBody,Throwable error){}  }
class C{  public void print(CtMethod method){  MethodInfo info=method.getMethodInfo2();  ConstPool pool=info.getConstPool();  CodeAttribute code=info.getCodeAttribute();  if (code == null)   return;  CodeIterator iterator=code.iterator();  while (iterator.hasNext()) {    int pos;    try {      pos=iterator.next();    } catch (    BadBytecode e) {      throw new RuntimeException(e);    }    stream.println(pos + ": " + instructionString(iterator,pos,pool));  }}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("data",null,true);  Class.forName("org.h2.Driver");  Connection conn;  long before=0;  for (int i=0; i < 10; i++) {    conn=DriverManager.getConnection("jdbc:h2:data/test");    ResultSet rs;    rs=conn.createStatement().executeQuery("select count(*) from information_schema.lobs");    rs.next();    System.out.println("lobs: " + rs.getInt(1));    rs=conn.createStatement().executeQuery("select count(*) from information_schema.lob_map");    rs.next();    System.out.println("lob_map: " + rs.getInt(1));    rs=conn.createStatement().executeQuery("select count(*) from information_schema.lob_data");    rs.next();    System.out.println("lob_data: " + rs.getInt(1));    conn.close();    Recover.execute("data","test");    new File("data/test.h2.sql").renameTo(new File("data/test." + i + ".sql"));    conn=DriverManager.getConnection("jdbc:h2:data/test");    ((JdbcConnection)conn).setPowerOffCount(28);    String last="connect";    try {      conn.createStatement().execute("drop table test if exists");      last="drop";      conn.createStatement().execute("create table test(id identity, b blob)");      last="create";      conn.createStatement().execute("insert into test values(1, space(10000))");      last="insert";      conn.createStatement().execute("delete from test");      last="delete";      conn.createStatement().execute("insert into test values(1, space(10000))");      last="insert2";      conn.createStatement().execute("delete from test");      last="delete2";    } catch (    SQLException e) {    } finally {      JdbcUtils.closeSilently(conn);    }    long now=new File("data/test.h2.db").length();    long diff=now - before;    before=now;    System.out.println(now + " " + diff+ " "+ i+ " "+ last);  }}  }
class C{  public StopContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public BreadthFirstIterator(final ITreeNode<ObjectType> rootNode){  for (  final ITreeNode<ObjectType> treeNode : rootNode.getChildren()) {    m_path.add(treeNode);  }}  }
class C{  private void removeListeners(){  StyledText text=fTextViewer.getTextWidget();  if (text != null) {    if (fKeyAndMouseListener != null) {      text.removeMouseListener(fKeyAndMouseListener);      text.removeKeyListener(fKeyAndMouseListener);      fKeyAndMouseListener=null;    }    if (fTextInputListener != null) {      fTextViewer.removeTextInputListener(fTextInputListener);      fTextInputListener=null;    }  }}  }
class C{  private Set<String> findResourceNames(String path,String prefix,String suffix) throws IOException {  Set<String> resourceNames=new TreeSet<String>();  List<URL> locationsUrls=getLocationUrlsForPath(path);  for (  URL locationUrl : locationsUrls) {    LOG.debug("Scanning URL: " + locationUrl.toExternalForm());    UrlResolver urlResolver=createUrlResolver(locationUrl.getProtocol());    URL resolvedUrl=urlResolver.toStandardJavaUrl(locationUrl);    String protocol=resolvedUrl.getProtocol();    ClassPathLocationScanner classPathLocationScanner=createLocationScanner(protocol);    if (classPathLocationScanner == null) {      String scanRoot=UrlUtils.toFilePath(resolvedUrl);      LOG.warn("Unable to scan location: " + scanRoot + " (unsupported protocol: "+ protocol+ ")");    } else {      resourceNames.addAll(classPathLocationScanner.findResourceNames(path,resolvedUrl));    }  }  return filterResourceNames(resourceNames,prefix,suffix);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.887 -0500",hash_original_method="6506B3795A3A16C6E9B1FFC15C1ED834",hash_generated_method="CC65B08E151A2078BB23C8227F59BC6B") public BasicHttpResponse(final ProtocolVersion ver,final int code,final String reason){  this(new BasicStatusLine(ver,code,reason),null,null);}  }
class C{  public void reverseFacing(){  facing=MovePath.getAdjustedFacing(facing,MoveStepType.TURN_RIGHT);  facing=MovePath.getAdjustedFacing(facing,MoveStepType.TURN_RIGHT);  facing=MovePath.getAdjustedFacing(facing,MoveStepType.TURN_RIGHT);}  }
class C{  public static void test_callInstanceMethod(){  Target target=new Target();  assertSame("zorch",target.zorch());}  }
class C{  public static CalendarDay from(@Nullable Calendar calendar){  if (calendar == null) {    return null;  }  return from(CalendarUtils.getYear(calendar),CalendarUtils.getMonth(calendar),CalendarUtils.getDay(calendar));}  }
class C{  private void checkAndWriteDictionaryChunkToFile() throws IOException {  if (oneDictionaryChunkList.size() >= dictionary_one_chunk_size) {    writeDictionaryFile();    createChunkList();  }}  }
class C{  public HttpAuthenticationException(Throwable cause){  super(cause);}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public void testPersist(){  File file=FileTesting.createFile();  try (FileBuffer buffer=FileBuffer.allocate(file,16)){    buffer.writeLong(10).writeLong(11).flip();    assertEquals(buffer.readLong(),10);    assertEquals(buffer.readLong(),11);  }   try (FileBuffer buffer=FileBuffer.allocate(file,16)){    assertEquals(buffer.readLong(),10);    assertEquals(buffer.readLong(),11);  } }  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  UserRelevanceModel<U,I> userRelModel=relModel.getModel(recommendation.getUser());  return recommendation.getItems().stream().limit(cutoff).map(null).filter(null).count() / (double)cutoff;}  }
class C{  private void selectNode(final DefaultMutableTreeNode node){  final TreePath treePath=new TreePath(node.getPath());  tree.setSelectionPath(treePath);  final Rectangle bounds=tree.getPathBounds(treePath);  bounds.x=0;  tree.scrollRectToVisible(bounds);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoActDirRecA[");  buffer.append("m_volId = ").append(m_volId);  buffer.append(", m_actDir = ").append(m_actDir);  buffer.append(", m_numFiles = ").append(m_numFiles);  buffer.append("]");  return buffer.toString();}  }
class C{  public static double segmentFraction(int fixedLon0,int fixedLat0,int fixedLon1,int fixedLat1,int fixedLon,int fixedLat,double cosLat){  fixedLon0=(int)(fixedLon0 / cosLat);  fixedLon1=(int)(fixedLon1 / cosLat);  fixedLon=(int)(fixedLon / cosLat);  LineSegment seg=new LineSegment(fixedLon0,fixedLat0,fixedLon1,fixedLat1);  return seg.segmentFraction(new Coordinate(fixedLon,fixedLat));}  }
class C{  public OSKL(KernelTrick k,double eta,double G,double R,LossC lossC){  setKernel(k);  setEta(eta);  setR(R);  setG(G);  this.lossC=lossC;}  }
class C{  public static void print(ClassFile cf){  print(cf,new PrintWriter(System.out,true));}  }
class C{  protected String paramString(){  String tabPlacementString;  if (tabPlacement == TOP) {    tabPlacementString="TOP";  } else   if (tabPlacement == BOTTOM) {    tabPlacementString="BOTTOM";  } else   if (tabPlacement == LEFT) {    tabPlacementString="LEFT";  } else   if (tabPlacement == RIGHT) {    tabPlacementString="RIGHT";  } else   tabPlacementString="";  String haveRegisteredString=(haveRegistered ? "true" : "false");  return super.paramString() + ",haveRegistered=" + haveRegisteredString+ ",tabPlacement="+ tabPlacementString;}  }
class C{  public Yaml(BaseConstructor constructor){  this(constructor,new Representer());}  }
class C{  @Override public String toString(){  return value != null ? String.format("Optional[%s]",value) : "Optional.empty";}  }
class C{  public static final String squareToString(int square){  StringBuilder ret=new StringBuilder();  int x=Position.getX(square);  int y=Position.getY(square);  ret.append((char)(x + 'a'));  ret.append((char)(y + '1'));  return ret.toString();}  }
class C{  @RequestMapping(value={"/create","/create/"},method=RequestMethod.PUT) @ResponseBody public RestWrapper create(@ModelAttribute("processtemplate") @Valid ProcessTemplate processTemplate,BindingResult bindingResult){  RestWrapper restWrapper=null;  List<Process> processes=new ArrayList<Process>();  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    LOGGER.debug("process.id = " + processTemplate.getProcessName() + " "+ processTemplate.getDescription());    LOGGER.debug("processTemplate id is " + processTemplate.getProcessTemplateId());    List<ProcessTemplate> processTemplateInfos=processTemplateDAO.selectPTList(processTemplate.getProcessTemplateId());    int index=0;    int pid=0;    processTemplateInfos.get(0).setProcessName(processTemplate.getProcessName());    processTemplateInfos.get(0).setDescription(processTemplate.getDescription());    for (    ProcessTemplate processTempInfo : processTemplateInfos) {      processTempInfo.setEnqProcessId(0);      processTempInfo.setNextProcessIds("");      if (index > 0) {        processTempInfo.setParentProcessId(pid);      }      pid=processes.get(0).getProcessId();      LOGGER.debug("index= " + index + "processTempInfo.processtempid="+ processTempInfo.getProcessTemplateId()+ "processes.(0)name= "+ processes.get(index).getProcessId());      List<PropertiesTemplate> propertiesTemplateList=propertiesTemplateDAO.listPropertiesTemplateBean(processTempInfo.getProcessTemplateId());      for (      PropertiesTemplate propertiesTemplate : propertiesTemplateList) {        if (propertiesTemplateList.isEmpty()) {          propertiesTemplate.setProcessId(processes.get(index).getProcessId());        }      }      index++;    }    LOGGER.debug("process count" + processes.size());    restWrapper=new RestWrapper(processTemplate,RestWrapper.OK);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  } finally {    adjustNextIdsForInsert(processTemplate,processes);  }  return restWrapper;}  }
class C{  public void dismissLoadingDialog(){  final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismiss();  }}  }
class C{  protected void initializeCachingAndScratchSpace(){  if (!init)   return;  try {    DMLScript.initHadoopExecution(config);  } catch (  ParseException e) {    throw new MLContextException("Exception occurred initializing caching and scratch space",e);  }catch (  DMLRuntimeException e) {    throw new MLContextException("Exception occurred initializing caching and scratch space",e);  }catch (  IOException e) {    throw new MLContextException("Exception occurred initializing caching and scratch space",e);  }}  }
class C{  public static ArrayList<String> tokenizeQuery(Analyzer luceneAnalyzer,String query){  ArrayList<String> result=new ArrayList<String>();  TokenStream tokenStream=luceneAnalyzer.tokenStream(null,new StringReader(query));  CharTermAttribute term=tokenStream.addAttribute(CharTermAttribute.class);  try {    tokenStream.reset();    while (tokenStream.incrementToken()) {      result.add(term.toString());    }    tokenStream.close();  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public PowerVmAllocationPolicyMigrationStaticThreshold(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy);  setUtilizationThreshold(utilizationThreshold);}  }
class C{  public static JSONArray array(Double... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  double value : values) {    array.add(value);  }  return array;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int max(int... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  int max=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] > max) {      max=numbers[i];    }  }  return max;}  }
class C{  public ConnectorTableHandle alterTable(Session session,TableMetadata tableMetadata){  ConnectorMetadataEntry entry=validateCatalogName(session.getCatalog());  ConnectorMetadata metadata=entry.getMetadata();  if (!(metadata instanceof ConnectorDetailMetadata)) {    throw new PrestoException(NOT_SUPPORTED,"Alter table not supported for connector " + entry.getConnectorId());  }  ConnectorDetailMetadata detailMetadata=(ConnectorDetailMetadata)metadata;  return detailMetadata.alterTable(session.toConnectorSession(),tableMetadata.getMetadata());}  }
class C{  private JCExpression enumBase(int pos,ClassSymbol c){  JCExpression result=make.at(pos).TypeApply(make.QualIdent(syms.enumSym),List.<JCExpression>of(make.Type(c.type)));  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:02.934 -0500",hash_original_method="FC5DAD276D63BF9B93BD19919189EAE8",hash_generated_method="39104EE62728A8993DD70EB39437F698") private void populateHeaders(){  if (mReferrer != null)   mHeaders.put("Referer",mReferrer);  if (mContentType != null)   mHeaders.put(CONTENT_TYPE,mContentType);  if (mNetwork.isValidProxySet()) {    String username;    String password;synchronized (mNetwork) {      username=mNetwork.getProxyUsername();      password=mNetwork.getProxyPassword();    }    if (username != null && password != null) {      String proxyHeader=RequestHandle.authorizationHeader(true);      mHeaders.put(proxyHeader,"Basic " + RequestHandle.computeBasicAuthResponse(username,password));    }  }  String cookie=CookieManager.getInstance().getCookie(mListener.getWebAddress());  if (cookie != null && cookie.length() > 0) {    mHeaders.put("Cookie",cookie);  }}  }
class C{  public Activity(GregorianCalendar startTime,GregorianCalendar endTime,GPSPoint point){  this.startTime=startTime;  this.endTime=endTime;  this.location=point;  this.startHour=startTime.get(GregorianCalendar.HOUR_OF_DAY);  setDuration();}  }
class C{  public void encode(OutputStream out) throws CertificateException, IOException {  if (rawCertInfo == null) {    DerOutputStream tmp=new DerOutputStream();    emit(tmp);    rawCertInfo=tmp.toByteArray();  }  out.write(rawCertInfo.clone());}  }
class C{  public OutputFormat(String indent,boolean newlines){  this.indent=indent;  this.newlines=newlines;}  }
class C{  private boolean verifyPassword(String encryptedPassword,String password){  if (encryptedPassword == null)   return false;  Crypt c=new Crypt();  try {    byte oldCrypt[]=encryptedPassword.getBytes("UTF8");    byte newCrypt[]=c.crypt(password.getBytes("UTF8"),oldCrypt);    if (newCrypt.length != oldCrypt.length)     return false;    for (int i=0; i < newCrypt.length; i++) {      if (oldCrypt[i] != newCrypt[i])       return false;    }  } catch (  java.io.UnsupportedEncodingException uee) {    return false;  }  return true;}  }
class C{  public void updateContent(InputStream content,String mediaType) throws ForbiddenException, ServerException {  getVirtualFile().updateContent(mediaType,content,null);}  }
class C{  private static int computeAfterParenthesis(IDocument document,ITextSelection line,int offset,String partitioning){  int pos=offset + line.getOffset();  int length=line.getOffset() + line.getLength();  int scanTo=scanForward(document,pos,partitioning,length,'}');  if (scanTo == -1)   scanTo=length;  int closingParen=findClosingParenToLeft(document,pos,partitioning) - 1;  while (true) {    int startScan=closingParen + 1;    closingParen=scanForward(document,startScan,partitioning,scanTo,')');    if (closingParen == -1)     break;    int openingParen=findOpeningParenMatch(document,closingParen,partitioning);    if (openingParen < 1)     break;    if (openingParen > pos)     continue;    if (looksLikeAnonymousClassDef(document,openingParen - 1,partitioning))     return closingParen + 1 - line.getOffset();    if (looksLikeIfWhileForCatch(document,openingParen - 1,partitioning))     return closingParen + 1 - line.getOffset();    if (looksLikeMethodDecl(document,openingParen - 1,partitioning))     return closingParen + 1 - line.getOffset();  }  return -1;}  }
class C{  private <T>boolean persistData(WorkItem workItem,WorkflowSession workflowSession,String key,T val){  WorkflowData data=workItem.getWorkflow().getWorkflowData();  if (data.getMetaDataMap() == null) {    return false;  }  data.getMetaDataMap().put(key,val);  workflowSession.updateWorkflowData(workItem.getWorkflow(),data);  return true;}  }
class C{  private void computeSquareRootMatrix(){  int numColumns=p.getDegree();  PolynomialGF2mSmallM[] tmpMatrix=new PolynomialGF2mSmallM[numColumns];  for (int i=numColumns - 1; i >= 0; i--) {    tmpMatrix[i]=new PolynomialGF2mSmallM(sqMatrix[i]);  }  sqRootMatrix=new PolynomialGF2mSmallM[numColumns];  for (int i=numColumns - 1; i >= 0; i--) {    sqRootMatrix[i]=new PolynomialGF2mSmallM(field,i);  }  for (int i=0; i < numColumns; i++) {    if (tmpMatrix[i].getCoefficient(i) == 0) {      boolean foundNonZero=false;      for (int j=i + 1; j < numColumns; j++) {        if (tmpMatrix[j].getCoefficient(i) != 0) {          foundNonZero=true;          swapColumns(tmpMatrix,i,j);          swapColumns(sqRootMatrix,i,j);          j=numColumns;          continue;        }      }      if (!foundNonZero) {        throw new ArithmeticException("Squaring matrix is not invertible.");      }    }    int coef=tmpMatrix[i].getCoefficient(i);    int invCoef=field.inverse(coef);    tmpMatrix[i].multThisWithElement(invCoef);    sqRootMatrix[i].multThisWithElement(invCoef);    for (int j=0; j < numColumns; j++) {      if (j != i) {        coef=tmpMatrix[j].getCoefficient(i);        if (coef != 0) {          PolynomialGF2mSmallM tmpSqColumn=tmpMatrix[i].multWithElement(coef);          PolynomialGF2mSmallM tmpInvColumn=sqRootMatrix[i].multWithElement(coef);          tmpMatrix[j].addToThis(tmpSqColumn);          sqRootMatrix[j].addToThis(tmpInvColumn);        }      }    }  }}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public void customizeRenderer(JTree tree,Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){  if (value instanceof CheckedTreeNode) {    customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);  }}  }
class C{  static void unalignedFileOffset(long offset) throws MemoryMapException {  throw new MemoryMapException(offset,Reason.UNALIGNED_FILE_OFFSET);}  }
class C{  public StoredField(String name,float value){  super(name,TYPE);  fieldsData=value;}  }
class C{  public ChatMessage sendMessage(String text) throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsGenericException {  try {    return new ChatMessage(mGroupChatInf.sendMessage(text));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void removeConfiguration(InstrOfferingConfig ioc){  Set configs=this.getInstrOfferingConfigs();  for (Iterator i=configs.iterator(); i.hasNext(); ) {    InstrOfferingConfig config=(InstrOfferingConfig)i.next();    if (config.equals(ioc)) {      i.remove();      break;    }  }}  }
class C{  public RobotStackFrame(final RobotThread thread,final int id,final String keywordName,final KeywordContext keywordContext){  super((RobotDebugTarget)thread.getDebugTarget());  this.thread=thread;  setStackFrameData(id,keywordName,keywordContext);}  }
class C{  public void hasBody(boolean hasBody){  this.hasBody=hasBody;}  }
class C{  public void openDiasporaUrl(String url){  AppLog.v(this,"openDiasporaUrl()");  DiasporaStreamFragment streamFragment=(DiasporaStreamFragment)getFragment(DiasporaStreamFragment.TAG);  showFragment(streamFragment);  streamFragment.loadUrl(url);}  }
class C{  private boolean containsNullValue(){  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  @Uninterruptible @Inline public static int extractTibCode(Address address){  return (address.toInt() & TIB_ALIGN_MASK) >> FIELD_SHIFT;}  }
class C{  public boolean isInclude(){  Object oo=get_Value(COLUMNNAME_IsInclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static BlockingState valueOf(int value){  BlockingState state=mValueToEnum.get(value);  if (state != null) {    return state;  }  return NOT_BLOCKED;}  }
class C{  public String func(Context arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  private static void printMessage(String[] msg){  for (  String s : msg) {    System.out.println(s);  }}  }
class C{  XBaseWindow(long parentWindow,Rectangle bounds){  this(new XCreateWindowParams(new Object[]{BOUNDS,bounds,PARENT_WINDOW,Long.valueOf(parentWindow)}));}  }
class C{  public Task<BucketRestRep> update(URI id,BucketUpdateParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  @SuppressWarnings("unchecked") private static void updateEmotionTone(Map<String,Object> user,List<ToneScore> emotionTone,Boolean maintainHistory){  Double maxScore=0.0;  String primaryEmotion=null;  Double primaryEmotionScore=null;  for (  ToneScore tone : emotionTone) {    if (tone.getScore() > maxScore) {      maxScore=tone.getScore();      primaryEmotion=tone.getName().toLowerCase();      primaryEmotionScore=tone.getScore();    }  }  if (maxScore <= PRIMARY_EMOTION_SCORE_THRESHOLD) {    primaryEmotion="neutral";    primaryEmotionScore=null;  }  Map<String,Object> emotion=(Map<String,Object>)((Map<String,Object>)(user.get("tone"))).get("emotion");  emotion.put("current",primaryEmotion);  if (maintainHistory) {    List<Map<String,Object>> history=new ArrayList<Map<String,Object>>();    if (emotion.get("history") != null) {      history=(List<Map<String,Object>>)emotion.get("history");    }    Map<String,Object> emotionHistoryObject=new HashMap<String,Object>();    emotionHistoryObject.put("tone_name",primaryEmotion);    emotionHistoryObject.put("score",primaryEmotionScore);    history.add(emotionHistoryObject);    emotion.put("history",history);  }}  }
class C{  public boolean useLayoutEditorBlocks(SignalMast destination){  if (!destList.containsKey(destination)) {    return false;  }  return destList.get(destination).useLayoutEditorBlocks();}  }
class C{  @Override public String globalInfo(){  return "Transposes the data: instances become attributes and attributes" + " become instances. If the first attribute in the original data" + " is a nominal or string identifier attribute, this identifier attribute"+ " will be used to create attribute names in the transposed data. All"+ " attributes other than the identifier attribute must be numeric. The"+ " attribute names in the original data are used to create an identifier"+ " attribute of type string in the transposed data.\n\n"+ "This filter can only process one batch of data, e.g. it cannot be used"+ " in the the FilteredClassifier.\n\n"+ "This filter can only be applied when no class attribute has been set.\n\n"+ " Date values will be turned into simple numeric values.\n\n";}  }
class C{  public void localTransactionStarted(ConnectionEvent event){}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public synchronized void add(Date x,double y){  super.add(x.getTime(),y);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof WaveAudioEssenceDescriptor)) {    return false;  }  WaveAudioEssenceDescriptor otherObject=(WaveAudioEssenceDescriptor)other;  return this.waveAudioEssenceDescriptorBO.equals(otherObject.waveAudioEssenceDescriptorBO);}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  int len=(length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public String createMessage(SsoException e){  return createMessage(e.getMessageKey(),e.getMessageDetails(),e.getMessage());}  }
class C{  public void writePopulation(final EvolutionState state,final DataOutput dataOutput) throws IOException {  dataOutput.writeInt(subpops.length);  for (int i=0; i < subpops.length; i++)   subpops[i].writeSubpopulation(state,dataOutput);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    target.replaceSelection("\n");  }}  }
class C{  public void resetPSRs(Entity entity){  PilotingRollData roll;  Vector<Integer> rollsToRemove=new Vector<Integer>();  int i=0;  for (i=0; i < pilotRolls.size(); i++) {    roll=pilotRolls.elementAt(i);    if (roll.getEntityId() == entity.getId()) {      rollsToRemove.addElement(new Integer(i));    }  }  for (i=rollsToRemove.size() - 1; i > -1; i--) {    pilotRolls.removeElementAt(rollsToRemove.elementAt(i).intValue());  }}  }
class C{  public ChangeAttachmentChange(final IAttachment attachment,final Object newValue,final String property,final boolean resetFirst){  if (attachment == null) {    throw new IllegalArgumentException("No attachment, newValue:" + newValue + " property:"+ property);  }  attachedTo=attachment.getAttachedTo();  clearFirst=resetFirst;  attachmentName=attachment.getName();  oldValue=PropertyUtil.getPropertyFieldObject(property,attachment);  this.newValue=newValue;  this.property=property;}  }
class C{  public void close() throws IOException {  ensureOpen();  mClosed=true;}  }
class C{  public void writeUint64(long n){  check(8);  buffer[write_pos++]=(byte)((n & 0x00ff00000000000000L) >> 56);  buffer[write_pos++]=(byte)((n & 0x00ff000000000000L) >> 48);  buffer[write_pos++]=(byte)((n & 0x00ff0000000000L) >> 40);  buffer[write_pos++]=(byte)((n & 0x00ff00000000L) >> 32);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  private static void fixPrng(){  if (!prngFixed.get()) {synchronized (PrngFixes.class) {      if (!prngFixed.get()) {        PrngFixes.apply();        prngFixed.set(true);      }    }  }}  }
class C{  protected void moveToFinalFile(T stitchedFileMetaData) throws IOException {  Path destination=new Path(filePath,stitchedFileMetaData.getStitchedFileRelativePath());  moveToFinalFile(tempOutFilePath,destination);}  }
class C{  private void finishServerSocket(SSLServerSocket serverSocket) throws IOException {  serverSocket.setUseClientMode(false);  if (this.sslConfig.isRequireAuth()) {    serverSocket.setNeedClientAuth(true);  }  serverSocket.setEnableSessionCreation(true);  String[] protocols=this.sslConfig.getProtocolsAsStringArray();  if (!"any".equalsIgnoreCase(protocols[0])) {    serverSocket.setEnabledProtocols(protocols);  }  String[] ciphers=this.sslConfig.getCiphersAsStringArray();  if (!"any".equalsIgnoreCase(ciphers[0])) {    serverSocket.setEnabledCipherSuites(ciphers);  }}  }
class C{  public void insert(int index,Long value){  if (value == null) {    insertNull(index);  } else {    _insert(index,numberNode(value.longValue()));  }}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  protected SRegResponse(){  if (DEBUG)   _log.debug("Created empty fetch response.");}  }
class C{  final public SyntaxTreeNode OldSubstitution() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[3];  SyntaxTreeNode tn=null;  Token t;  anchor=null;  String n;  bpa("Substitution");switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:    tn=Identifier();  zn[0]=tn;break;case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=NonExpPrefixOp();zn[0]=tn;break;case op_1:case AND:case op_3:case op_4:case OR:case op_6:case op_7:case op_8:case op_9:case op_10:case op_11:case op_12:case op_13:case op_14:case op_15:case op_16:case op_17:case op_18:case op_19:case IN:case op_21:case op_22:case op_23:case op_24:case op_25:case op_27:case op_30:case op_31:case op_32:case op_33:case op_34:case op_35:case op_36:case op_37:case op_38:case op_39:case op_40:case op_41:case op_42:case op_43:case op_44:case op_45:case op_46:case op_47:case op_48:case op_49:case op_50:case op_51:case op_52:case op_53:case op_54:case op_55:case op_56:case op_59:case op_62:case op_63:case op_64:case EQUALS:case op_66:case op_67:case op_71:case op_72:case op_73:case op_74:case op_75:case op_77:case op_78:case op_79:case op_80:case op_81:case op_82:case op_83:case op_84:case op_85:case op_86:case op_87:case op_88:case op_89:case op_90:case op_91:case op_92:case op_93:case op_94:case op_95:case op_96:case op_97:case op_98:case op_100:case op_101:case op_102:case op_103:case op_104:case op_105:case op_106:case op_107:case op_108:case op_109:case op_110:case op_111:case op_117:case op_118:case op_119:tn=InfixOp();zn[0]=tn;break;case op_57:case op_68:case op_69:case op_70:tn=PostfixOp();zn[0]=tn;break;default :jj_la1[36]=jj_gen;jj_consume_token(-1);throw new ParseException();}expecting="<-";t=jj_consume_token(SUBSTITUTE);n=tn.getImage();zn[1]=new SyntaxTreeNode(mn,t);expecting="Expression or Op. Symbol";try {if (jj_2_13(2147483647)) {t=jj_consume_token(op_76);SyntaxTreeNode zzn[]=new SyntaxTreeNode[2];zzn[0]=new SyntaxTreeNode(mn,N_IdPrefix,new SyntaxTreeNode[0]);zzn[1]=new SyntaxTreeNode(mn,N_NonExpPrefixOp,t);tn=new SyntaxTreeNode(mn,N_GenNonExpPrefixOp,zzn);} else if (jj_2_14(1)) {tn=Expression();} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LAMBDA:tn=Lambda();break;default :jj_la1[37]=jj_gen;jj_consume_token(-1);throw new ParseException();}}} catch (ParseException e) {if (OperatorStack.isWellReduced()) OperatorStack.popStack(); else {if (true) throw e;}if ((anchor != null) && (anchor.isKind(N_GenPrefixOp) || anchor.isKind(N_GenInfixOp) || anchor.isKind(N_GenPostfixOp)|| anchor.isKind(N_GenNonExpPrefixOp))) {tn=anchor;anchor=null;} else {if (true) throw e;}}epa();zn[2]=tn;{if (true) return new SyntaxTreeNode(mn,N_Substitution,zn);}throw new Error("Missing return statement in function");}  }
class C{  boolean inVerticalScrollbar(int x,int y){  if (vsbSpace <= 0) {    return false;  }  int h=height - MARGIN - hsbSpace;  return (x >= width - (SCROLLBAR - SPACE)) && (x < width) && (y >= MARGIN)&& (y < h);}  }
class C{  @Override public void zEventCustomPopupWasClosed(CustomPopup popup){  popup=null;  calendarPanel=null;  lastPopupCloseTime=Instant.now();}  }
class C{  void launch(boolean playMedia){  int[] rows=TABLE.getSelectedRows();  if (rows.length == 0) {    return;  }  File selectedFile=DATA_MODEL.getFile(rows[0]);  if (OSUtils.isWindows()) {    if (selectedFile.isDirectory()) {      GUIMediator.launchExplorer(selectedFile);      return;    } else     if (!MediaPlayer.isPlayableFile(selectedFile)) {      GUIMediator.launchFile(selectedFile);      return;    }  }  LaunchableProvider[] providers=new LaunchableProvider[rows.length];  for (int i=0; i < rows.length; i++) {    providers[i]=new FileProvider(DATA_MODEL.getFile(rows[i]));  }  if (!playMedia) {    MediaPlayer.instance().stop();  }  if (playMedia) {    GUILauncher.launch(providers);    uxLogPlayFromPlaylists();  } else {    GUIMediator.launchFile(selectedFile);  }}  }
class C{  public boolean isVertexIgnored(Object vertex){  return false;}  }
class C{  protected void validate(List<ICalComponent> components,ICalVersion version,List<Warning> warnings){}  }
class C{  public int hashCode(){  int hash=1;  for (int c=0; c <= MaxC; c++) {    for (int r=0; r <= MaxR; r++) {      hash+=(c * 3 + r) * cells[c][r];    }  }  return hash;}  }
class C{  public void testClear(){  final int GROUP_1_COUNT=10;  final String GROUP_1_QUERY="group1 ";  final String GROUP_1_LINE2="line2 ";  writeEntries(GROUP_1_COUNT,GROUP_1_QUERY,GROUP_1_LINE2);  final int GROUP_2_COUNT=10;  final String GROUP_2_QUERY="group2 ";  final String GROUP_2_LINE2="line2 ";  writeEntries(GROUP_2_COUNT,GROUP_2_QUERY,GROUP_2_LINE2);  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);  mSearchHelper.clearHistory();  checkOpenCursorCount(0);}  }
class C{  public static GeneralPath stackSpline(GeneralPath p,float pts[],int start,int npoints,float epsilon,float slack,boolean closed,float tx,float ty){  int len=2 * npoints;  int end=start + len;  if (len < 6) {    throw new IllegalArgumentException("To create spline requires at least 3 points");  }  float dx1, dy1, dx2, dy2;  if (closed) {    dx2=pts[start + 2] - pts[end - 2];    dy2=pts[start + 3] - pts[end - 1];  } else {    dx2=pts[start + 4] - pts[start];    dy2=pts[start + 5] - pts[start + 1];  }  int i;  for (i=start + 2; i < end - 2; i+=2) {    dx1=dx2;    dy1=dy2;    dx2=pts[i + 2] - pts[i - 2];    dy2=pts[i + 3] - pts[i - 1];    if (Math.abs(pts[i] - pts[i - 2]) < epsilon || Math.abs(pts[i + 1] - pts[i - 1]) < epsilon) {      p.lineTo(tx + pts[i],ty + pts[i + 1]);    } else {      p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);    }  }  dx1=dx2;  dy1=dy2;  dx2=pts[start] - pts[i - 2];  dy2=pts[start + 1] - pts[i - 1];  if (Math.abs(pts[i] - pts[i - 2]) < epsilon || Math.abs(pts[i + 1] - pts[i - 1]) < epsilon) {    p.lineTo(tx + pts[i],ty + pts[i + 1]);  } else {    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);  }  if (closed) {    if (Math.abs(pts[end - 2] - pts[0]) < epsilon || Math.abs(pts[end - 1] - pts[1]) < epsilon) {      p.lineTo(tx + pts[0],ty + pts[1]);    } else {      dx1=dx2;      dy1=dy2;      dx2=pts[start + 2] - pts[end - 2];      dy2=pts[start + 3] - pts[end - 1];      p.curveTo(tx + pts[end - 2] + slack * dx1,ty + pts[end - 1] + slack * dy1,tx + pts[0] - slack * dx2,ty + pts[1] - slack * dy2,tx + pts[0],ty + pts[1]);    }    p.closePath();  }  return p;}  }
class C{  public static boolean hasWaitingRequests(DistributedLockService dlock,Object name){  DLockGrantor grantor=null;  try {    grantor=DLockGrantor.waitForGrantor((DLockService)dlock);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }  if (grantor != null) {    return grantor.hasWaitingRequests(name);  }  return false;}  }
class C{  public Iterator<Generator<E>> iterator(){  return generators.iterator();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  Node appendedChild;  doc=(Document)load("hc_staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");{    boolean success=false;    try {      appendedChild=rootNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public synchronized void updateFileAuthTag() throws FileEncryptionException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, IOException {  byte[] tmp=buildFileAuthTag();  backEncRandomAccessFile.writeFileAuthenticationTag(tmp);  this.needsUpdate=false;}  }
class C{  public static String name(AccountInfo info){  return createAccountFormatter().name(info);}  }
class C{  public CFMLFilter(String[] extensions){  this.extensions=extensions;  for (int i=0; i < extensions.length; i++) {    extensions[i]=extensions[i].toLowerCase();  }}  }
class C{  public LogEntry(LogEntry other){  if (other.isSetCategory()) {    this.category=other.category;  }  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_KEY_1__KEY_ID_1:    return getKeyId_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void openHtml(String html){  if (!StringUtils.isNotBlank(html)) {    return;  }  BrowserWindowItem item=Raptor.getInstance().getWindow().getBrowserWindowItem();  if (item == null) {    Raptor.getInstance().getWindow().addRaptorWindowItem(new BrowserWindowItem(html,true));  } else {    item.setHTML(html);    Raptor.getInstance().getWindow().forceFocus(item);  }}  }
class C{  public boolean deleteFilesSafely(){  if (isMultiMovieDir()) {    boolean ok=true;    for (    MediaFile mf : getMediaFiles()) {      if (!mf.deleteSafely(getDataSource())) {        ok=false;      }    }    return ok;  } else {    return Utils.deleteDirectorySafely(getPathNIO(),getDataSource());  }}  }
class C{  void writeFile(File f,String body) throws Exception {  if (f.getParentFile() != null)   f.getParentFile().mkdirs();  Writer out=new FileWriter(f);  try {    out.write(body);  }  finally {    out.close();  }}  }
class C{  public static BigInteger decodeInteger(final byte[] pArray){  return new BigInteger(1,decodeBase64(pArray));}  }
class C{  public void verifyTrace(String substring){  verify(Level.FINEST,substring);}  }
class C{  public UnbalancedCrossover(int type,double prob,Random random){  super(type,prob,random,1,Integer.MAX_VALUE,-1);  this.random=random;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public synchronized void clearTransactions(Date fromDate){  lock.lock();  try {    if (fromDate == null) {      unspent.clear();      spent.clear();      pending.clear();      dead.clear();    } else {      removeEntriesAfterDate(unspent,fromDate);      removeEntriesAfterDate(spent,fromDate);      removeEntriesAfterDate(pending,fromDate);      removeEntriesAfterDate(dead,fromDate);    }  }  finally {    lock.unlock();  }}  }
class C{  public IgniteDeploymentCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public void start(){  msRegistry.getSessionManager().init();  handleServiceLifecycleMethods();  transportManager.startTransports();  isStarted=true;  log.info("Microservices server started in " + (System.currentTimeMillis() - startTime) + "ms");}  }
class C{  public void writeAttrURI(final java.io.Writer writer,String string,boolean doURLEscaping) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if ((ch < 32) || (ch > 126)) {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping) {        if (ch <= 0x7F) {          writer.write('%');          writer.write(makeHHString(ch));        } else         if (ch <= 0x7FF) {          int high=(ch >> 6) | 0xC0;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(low));        } else         if (Encodings.isHighUTF16Surrogate(ch)) {          int highSurrogate=((int)ch) & 0x03FF;          int wwww=((highSurrogate & 0x03C0) >> 6);          int uuuuu=wwww + 1;          int zzzz=(highSurrogate & 0x003C) >> 2;          int yyyyyy=((highSurrogate & 0x0003) << 4) & 0x30;          ch=chars[++i];          int lowSurrogate=((int)ch) & 0x03FF;          yyyyyy=yyyyyy | ((lowSurrogate & 0x03C0) >> 6);          int xxxxxx=(lowSurrogate & 0x003F);          int byte1=0xF0 | (uuuuu >> 2);          int byte2=0x80 | (((uuuuu & 0x03) << 4) & 0x30) | zzzz;          int byte3=0x80 | yyyyyy;          int byte4=0x80 | xxxxxx;          writer.write('%');          writer.write(makeHHString(byte1));          writer.write('%');          writer.write(makeHHString(byte2));          writer.write('%');          writer.write(makeHHString(byte3));          writer.write('%');          writer.write(makeHHString(byte4));        } else {          int high=(ch >> 12) | 0xE0;          int middle=((ch & 0x0FC0) >> 6) | 0x80;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(middle));          writer.write('%');          writer.write(makeHHString(low));        }      } else       if (escapingNotNeeded(ch)) {        writer.write(ch);      } else {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      }      cleanStart=i + 1;    } else     if (ch == '"') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping)       writer.write("%22"); else       writer.write("&quot;");      cleanStart=i + 1;    } else     if (ch == '&') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      writer.write("&amp;");      cleanStart=i + 1;    } else {      cleanLength++;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  boolean saveTrackerOperation(String source,TrackerOperationImpl po){  Preconditions.checkArgument(!Strings.isNullOrEmpty(source),SOURCE_IS_EMPTY_MSG);  Preconditions.checkNotNull(po,"Tracker operation is null");  try {    long userId=0;    User user=identityManager.getActiveUser();    if (user != null)     userId=user.getId(); else     userId=identityManager.getSystemUser().getId();    dataService.saveTrackerOperation(source,po,userId);    return true;  } catch (  Exception e) {    LOG.error("Error in saveTrackerOperation",e);  }  return false;}  }
class C{  public static PnSignalingParams defaultInstance(){  MediaConstraints pcConstraints=PnSignalingParams.defaultPcConstraints();  MediaConstraints videoConstraints=PnSignalingParams.defaultVideoConstraints();  MediaConstraints audioConstraints=PnSignalingParams.defaultAudioConstraints();  List<PeerConnection.IceServer> iceServers=PnSignalingParams.defaultIceServers();  return new PnSignalingParams(iceServers,pcConstraints,videoConstraints,audioConstraints);}  }
class C{  KeyChecker(int certPathLen,CertSelector targetCertSel){  this.certPathLen=certPathLen;  this.targetConstraints=targetCertSel;}  }
class C{  public boolean isSetScope(){  return this.scope != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Builder withButtonPressedColor(final int color){  this.pressedColor=color;  return this;}  }
class C{  public void waitForMessage(String topic,MqttMessage message,boolean expectRetained) throws Exception {synchronized (lock) {    int count=0;    while (messages.size() == 0 && ++count < 10) {      lock.wait(1000);    }    if (messages.size() == 0) {      throw new Exception("message timeout [topic:" + topic + "]");    }    String rtopic=topics.remove(0);    MqttMessage rmessage=messages.remove(0);    if (!rtopic.equals(topic)) {      if (rmessage.isRetained() && !expectRetained) {        throw new Exception("pre-existing retained message [expectedTopic:" + topic + "][expectedPayload:"+ message.toString()+ "] [receivedTopic:"+ rtopic+ "][receivedPayload:"+ rmessage.toString()+ "]");      }      throw new Exception("message topic mismatch [expectedTopic:" + topic + "][expectedPayload:"+ message.toString()+ "] [receivedTopic:"+ rtopic+ "][receivedPayload:"+ rmessage.toString()+ "]");    }    if (!rmessage.toString().equals(message.toString())) {      if (rmessage.isRetained() && !expectRetained) {        throw new Exception("pre-existing retained message [expectedTopic:" + topic + "][expectedPayload:"+ message.toString()+ "] [receivedTopic:"+ rtopic+ "][receivedPayload:"+ rmessage.toString()+ "]");      }      throw new Exception("message payload mismatch [expectedTopic:" + topic + "][expectedPayload:"+ message.toString()+ "] [receivedTopic:"+ rtopic+ "][receivedPayload:"+ rmessage.toString()+ "]");    }    if (expectRetained && !rmessage.isRetained()) {      throw new Exception("message not retained [topic:" + topic + "]");    } else     if (!expectRetained && rmessage.isRetained()) {      throw new Exception("message retained [topic:" + topic + "]");    }  }}  }
class C{  public boolean isSelectedProductSortOnPage(final PageParameters pageParameters,final String sortOrder,final String sortField){  return ((StringUtils.isNotBlank(sortOrder) && StringUtils.isNotBlank(sortField))) && (sortField.equals(pageParameters.get(sortOrder).toString()));}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  void execute() throws BuildException {  validate();  try {    final File scriptFile=getScript();    final Reader reader;    if (scriptFile == null) {      reader=new StringReader(scriptText);    } else {      reader=new FileReader(scriptFile);    }    final ScriptedUserAdder adder=new ScriptedUserAdder(getHost(),getPort(),MailProtocolTestTask.this);    adder.addUser(getUser(),getPasswd(),reader);  } catch (  Exception e) {    log(e.getMessage(),Project.MSG_ERR);    throw new BuildException("User addition failed: \n" + e.getMessage(),e);  }}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public GenericItemAdapter<Model,Item> addModel(List<Model> models){  super.add(toItems(models));  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  @Deprecated public static String megastrip(String str,boolean left,boolean right,String what){  if (str == null) {    return null;  }  int limitLeft=0;  int limitRight=str.length() - 1;  while (left && limitLeft <= limitRight && what.indexOf(str.charAt(limitLeft)) >= 0) {    limitLeft++;  }  while (right && limitRight >= limitLeft && what.indexOf(str.charAt(limitRight)) >= 0) {    limitRight--;  }  return str.substring(limitLeft,limitRight + 1);}  }
class C{  public static boolean isPortAvailable(final int port,int protocol){  return isPortAvailable(port,protocol,getAddress(protocol));}  }
class C{  public boolean skipSpaces(){  while (this.pos < this.value.length() && this.value.charAt(this.pos) == ' ') {    this.pos++;  }  return this.pos < this.value.length();}  }
class C{  String checkGuess(Entity shooter,Targetable target,Mounted weapon,IGame game){  if (!LogLevel.DEBUG.equals(owner.getVerbosity())) {    return null;  }  if ((shooter instanceof Aero) || (shooter.getPosition() == null) || (target.getPosition() == null)) {    return null;  }  String ret=null;  WeaponFireInfo guessInfo=new WeaponFireInfo(shooter,new EntityState(shooter),target,null,weapon,game,true,owner);  WeaponFireInfo accurateInfo=new WeaponFireInfo(shooter,target,weapon,game,false,owner);  if (guessInfo.getToHit().getValue() != accurateInfo.getToHit().getValue()) {    ret+="Incorrect To Hit prediction, weapon " + weapon.getName() + " ("+ shooter.getChassis()+ " vs "+ target.getDisplayName()+ ")"+ ":\n";    ret+=" Guess: " + Integer.toString(guessInfo.getToHit().getValue()) + " "+ guessInfo.getToHit().getDesc()+ "\n";    ret+=" Real:  " + Integer.toString(accurateInfo.getToHit().getValue()) + " "+ accurateInfo.getToHit().getDesc()+ "\n";  }  return ret;}  }
class C{  public boolean intersectSphereTriangle(Triangle3D t,Vec3D result){  result.set(t.closestPointOnSurface(this));  ReadonlyVec3D v=result.sub(this);  return v.magSquared() <= radius * radius;}  }
class C{  public static @NonNull FlipAnimation create(@Direction int direction,boolean enter,long duration){switch (direction) {case UP:case DOWN:    return new VerticalFlipAnimation(direction,enter,duration);case LEFT:case RIGHT:default :  return new HorizontalFlipAnimation(direction,enter,duration);}}  }
class C{  protected double updateEigenvector(double[] in,double[] out,double l){  double s=1. / (l > 0. ? l : l < 0. ? -l : 1.);  s=(in[0] > 0.) ? s : -s;  double diff=0.;  for (int d=0; d < in.length; d++) {    in[d]*=s;    double delta=in[d] - out[d];    diff+=delta * delta;    out[d]=in[d];  }  return diff;}  }
class C{  public X509CertPath(InputStream is) throws CertificateException {  this(is,PKIPATH_ENCODING);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public void repaintState(){  disabled.repaint();  auto.repaint();  teleop.repaint();  test.repaint();}  }
class C{  public static void dump(ServletConfig config){  log.config("ServletConfig " + config.getServletName());  log.config("- Context=" + config.getServletContext());  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=config.getInitParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("InitParameter:");    first=false;    String key=(String)e.nextElement();    Object value=config.getInitParameter(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  protected void restoreResourceAttributes(IResource resource) throws CoreException {  if (modificationStamp != IResource.NULL_STAMP) {    resource.revertModificationStamp(modificationStamp);  }  if (localTimeStamp != IResource.NULL_STAMP) {    resource.setLocalTimeStamp(localTimeStamp);  }  if (resourceAttributes != null) {    resource.setResourceAttributes(resourceAttributes);  }  if (markerDescriptions != null) {    for (int i=0; i < markerDescriptions.length; i++) {      if (markerDescriptions[i].resource.exists())       markerDescriptions[i].createMarker();    }  }}  }
class C{  private void clearColumns(){  ((WBrowseListItemRenderer)getItemRenderer()).clearColumns();  getModel().setNoColumns(0);  return;}  }
class C{  public Tile(Sector sector,Level level,int row,int column){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Tile","constructor","missingSector"));  }  if (level == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Tile","constructor","missingLevel"));  }  this.sector=sector;  this.level=level;  this.row=row;  this.column=column;  this.tileKey=level.levelNumber + "." + row+ "."+ column;}  }
class C{  private void buildGetBusinessObjectDataVersionsResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  Pattern pattern=Pattern.compile("/herd-app/rest/businessObjectData(/namespaces/(?<namespace>.*?))?" + "/businessObjectDefinitionNames/(?<businessObjectDefinitionName>.*?)/businessObjectFormatUsages/(?<businessObjectFormatUsage>.*?)" + "/businessObjectFormatFileTypes/(?<businessObjectFormatFileType>.*?)"+ "/versions");  Matcher matcher=pattern.matcher(uri.getPath());  if (matcher.find()) {    BusinessObjectDataVersions businessObjectDataVersions=new BusinessObjectDataVersions();    if (HOSTNAME_LATEST_BDATA_VERSION_EXISTS.equals(uri.getHost()) || HOSTNAME_LATEST_BDATA_VERSION_EXISTS_IN_UPLOADING_STATE.equals(uri.getHost())) {      BusinessObjectDataVersion businessObjectDataVersion=new BusinessObjectDataVersion();      businessObjectDataVersions.getBusinessObjectDataVersions().add(businessObjectDataVersion);      businessObjectDataVersion.setBusinessObjectDataKey(new BusinessObjectDataKey(getGroup(matcher,"namespace"),getGroup(matcher,"businessObjectDefinitionName"),getGroup(matcher,"businessObjectFormatUsage"),getGroup(matcher,"businessObjectFormatFileType"),0,"2014-01-31",null,0));      businessObjectDataVersion.setStatus(HOSTNAME_LATEST_BDATA_VERSION_EXISTS_IN_UPLOADING_STATE.equals(uri.getHost()) ? BusinessObjectDataStatusEntity.UPLOADING : BusinessObjectDataStatusEntity.VALID);    }    response.setEntity(getHttpEntity(businessObjectDataVersions));  }}  }
class C{  public CompletableFuture<Void> close(){  CompletableFuture[] futures=new CompletableFuture[connections.size()];  int i=0;  for (  Connection connection : connections.values()) {    futures[i++]=connection.close();  }  return CompletableFuture.allOf(futures);}  }
class C{  public TextEditProcessor(Document document,TextEdit root,int style){  this(document,root,style,false);}  }
class C{  public boolean anyVolumeHasHLU(String hluValue){  boolean hasHLU=false;  StringMap existingVolumesInMask=getExistingVolumes();  StringMap viprAddedVolumes=getVolumes();  if ((existingVolumesInMask != null && existingVolumesInMask.containsValue(hluValue)) || (viprAddedVolumes != null && viprAddedVolumes.containsValue(hluValue))) {    hasHLU=true;  }  return hasHLU;}  }
class C{  protected void clearJars(){synchronized (this) {    ArrayList<JarEntry> jars=new ArrayList<JarEntry>(_jarList);    _jarList.clear();    if (_pathMap != null)     _pathMap.clear();    for (int i=0; i < jars.size(); i++) {      JarEntry jarEntry=jars.get(i);      JarPath jarPath=jarEntry.getJarPath();      jarPath.closeJar();    }  }}  }
class C{  public static boolean resume(List<Animator> animators){  boolean isResumeCalled=false;  if (animators != null) {    for (    Animator animator : animators) {      if (resume(animator)) {        isResumeCalled=true;      }    }  }  return isResumeCalled;}  }
class C{  public static double fromSAX(int levels,int sax,boolean random){  SAX(levels,0.0D);  double[] bounds=INVNORM_BOUNDS[levels - 1];  if (sax < 0 || sax > bounds.length) {    throw new RuntimeException("Invalid quantification symbol.");  }  if (sax > 0 && sax < bounds.length) {    if (!random) {      return 0.5D * (bounds[sax] + bounds[sax - 1]);    } else {      double x=Math.random();      return x * bounds[sax - 1] + (1.0D - x) * bounds[sax];    }  }  if (0 == sax) {    if (!random) {      return bounds[0] - 2.0D * (bounds[1] - bounds[0]);    } else {      return bounds[0] - Math.exp(1.0D / Math.random());    }  } else {    if (!random) {      return bounds[bounds.length - 1] + 2.0D * (bounds[bounds.length - 1] - bounds[bounds.length - 2]);    } else {      return bounds[bounds.length - 1] + Math.exp(1.0D / Math.random());    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void addTerminationTaskLog(ExecutionState state,String detailedMessage){  ExecutionTaskLog log=new ExecutionTaskLog();  log.setDate(new Date());  log.setLevel(LogLevel.ERROR.toString());  log.setMessage("Order Terminated");  log.setDetail(detailedMessage);  log.setPhase(ExecutionPhase.EXECUTE.name());  modelClient.save(log);  state.addExecutionTaskLog(log);  modelClient.save(state);}  }
class C{  public boolean isLexicalized(){  if (this.numLexicalItems < 0) {    if (isTerminal())     this.numLexicalItems=1; else {      this.numLexicalItems=0;      children.stream().filter(null).forEach(null);    }  }  return (this.numLexicalItems > 0);}  }
class C{  public boolean canRedo(){  return undoManager.canRedo();}  }
class C{  public synchronized void checkButtonStates(){  if ((document != null) && !document.running) {    jButton16.setEnabled(true);    jButton17.setEnabled(document.hasSnapshot());    jMenu2.setEnabled(true);    jButton6.setEnabled(false);    jButton14.setEnabled(false);    jButton15.setEnabled(true);    if (!jButton12.isEnabled()) {      jButton12.setEnabled(true);    }    if (!jMenuItem4.isEnabled()) {      jMenuItem4.setEnabled(true);    }    if (!jMenuItem6.isEnabled()) {      jMenuItem6.setEnabled(true);    }    if (!jButton2.isEnabled()) {      jButton2.setEnabled(true);    }    if (!jMenuItem10.isEnabled()) {      jMenuItem10.setEnabled(true);    }    if (!jMenu3.isEnabled()) {      jMenu3.setEnabled(true);    }    if (!jMenuItem2.isEnabled()) {      jMenuItem2.setEnabled(true);    }    if (!jButton13.isEnabled()) {      jButton13.setEnabled(true);    }    if (!jButton4.isEnabled()) {      jButton4.setEnabled(true);    }    if (!jButton5.isEnabled()) {      jButton5.setEnabled(true);    }    if (!jButton7.isEnabled()) {      jButton7.setEnabled(true);    }    if (!document.getEditor().isEnabled()) {      document.getEditor().setEnabled(true);    }    if (jButton8.isEnabled() != (document.undoManager.canUndo())) {      jButton8.setEnabled((document.undoManager.canUndo()));      jMenuItemUndo.setEnabled((document.undoManager.canUndo()));    }    if (jButton9.isEnabled() != (document.undoManager.canRedo())) {      jButton9.setEnabled((document.undoManager.canRedo()));      jMenuItemRedo.setEnabled((document.undoManager.canRedo()));    }    boolean hasSelection=((document.getEditor().getSelectionEnd() - document.getEditor().getSelectionStart()) > 0);    if (jButton11.isEnabled() != hasSelection) {      jButton11.setEnabled(hasSelection);      jButton10.setEnabled(hasSelection);      jMenuItem8.setEnabled(hasSelection);      jMenuItem9.setEnabled(hasSelection);    }    jMenuItem15.setEnabled(document.running);    jMenuItem13.setEnabled(!document.running);    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jasmin/gui/resources/icons/play_green.png")));  } else {    jButton16.setEnabled(false);    jButton17.setEnabled(false);    jButton8.setEnabled(false);    jMenuItemUndo.setEnabled(false);    jButton9.setEnabled(false);    jMenuItemRedo.setEnabled(false);    jButton11.setEnabled(false);    jButton10.setEnabled(false);    jMenuItem8.setEnabled(false);    jMenuItem9.setEnabled(false);    jMenuItem15.setEnabled(false);    jButton12.setEnabled(false);    jMenuItem4.setEnabled(false);    jMenuItem6.setEnabled(false);    jButton2.setEnabled(false);    jMenuItem10.setEnabled(false);    jMenu2.setEnabled(false);    jMenuItem2.setEnabled(false);    jButton13.setEnabled(false);    jButton4.setEnabled(false);    jButton5.setEnabled(false);    jButton7.setEnabled(false);    jButton15.setEnabled(false);    jMenu3.setEnabled(false);  }  if ((document != null) && document.running) {    jButton15.setEnabled(true);    jMenuItem13.setEnabled(false);    jMenuItem14.setEnabled(false);    jMenuItem15.setEnabled(false);    jButton4.setEnabled(true);    document.getEditor().setEnabled(false);    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jasmin/gui/resources/icons/play_pause.png")));  }  if (helpDocument != null) {    jButton6.setEnabled(helpDocument.canBack());    jButton14.setEnabled(helpDocument.canForward());  }}  }
class C{  private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){  if (list == null || list.size() <= 2)   return;  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();  int size=list.size();  PathParser.PathDataNode currentNode=null;  int i=0;  while (i < size - 1) {    currentNode=list.get(i);    if (!isInterpolatableCommand(currentNode.mType)) {      i++;      continue;    }    boolean validSequence=true;    int k=i;    for (int j=i; j < size && validSequence; j++) {      if (currentNode.mType == list.get(j).mType) {        k=j;        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;      } else       validSequence=false;    }    if (k - i > 2) {      interpolateSubList(list.subList(i,k + 1));    }    i++;  }}  }
class C{  private void validateUrl(String url){  Assert.isTrue(StringUtils.isNotBlank(url),"JDBC connection URL is required");}  }
class C{  public String convertError(String filename,int line,int column,String message){  String srcFilename=null;  int destLine=0;  int srcLine=0;  for (int i=0; i < _lines.size(); i++) {    Line map=_lines.get(i);    if (filename != null && !filename.endsWith(_dstFilename)) {    } else     if (map._dstLine <= line && line <= map.getLastDestinationLine()) {      srcFilename=map._srcFilename;      srcLine=map.getSourceLine(line);    }  }  if (srcFilename != null)   return srcFilename + ":" + srcLine+ ": "+ message; else   return filename + ":" + line+ ": "+ message;}  }
class C{  private Map<String,String> parseTabFile(File namesTabFile){  Map<String,String> result=new HashMap<String,String>();  BufferedReader reader=null;  int lineNumber=0;  try {    reader=new BufferedReader(new InputStreamReader(new FileInputStream(namesTabFile)));    String line;    while ((line=reader.readLine()) != null) {      line=line.trim();      lineNumber++;      if (line.length() > 0 && line.startsWith("PTHR")) {        String[] columns=line.split("\t");        if (columns != null && columns.length == 2) {          String familyId=columns[0];          familyId=familyId.replace(".mod","");          if (familyId.contains(".mag")) {            familyId=familyId.replace(".mag","");          } else {            familyId=familyId.replace(".",":");          }          String familyName=columns[1];          result.put(familyId,familyName);        } else {          LOGGER.warn("Columns is Null OR unexpected splitting of line. Line is splitted into " + (columns == null ? 0 : columns.length) + "columns!");        }      } else {        LOGGER.warn("Unexpected start of line: " + line);      }    }  } catch (  IOException e) {    LOGGER.warn("Couldn't parse tab separated file with family names!",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        LOGGER.warn("Couldn't close buffered reader correctly!",e);      }    }  }  LOGGER.info(lineNumber + " lines parsed.");  LOGGER.info(result.size() + " entries created in the map.");  return result;}  }
class C{  public boolean isAntialiasing(){  return mAntialiasing;}  }
class C{  @Deprecated public List<?> range(Value begin,Value end,int count) throws AerospikeException {  throw new NotImplementedException();}  }
class C{  public static ConfigurationException createConfigurationException(final ErrorKeys errorId){  return new ConfigurationException(errorId.toString());}  }
class C{  public static void sortList(List list,Comparator comparator){  if (SystemUtils.IS_JAVA_1_7 && list instanceof CopyOnWriteArrayList) {    List tempList=new ArrayList(list);    Collections.sort(tempList,comparator);    list.clear();    list.addAll(tempList);  } else {    Collections.sort(list,comparator);  }}  }
class C{  ConfProxyUtilAddSigningKey(){  super("confproxy-add-signing-key");  getOptions().addOption(PROXY_INSTANCE).addOption("k","key-id",true,"Id of the key to be added").addOption("t","token-id",true,"Id of the token to generate a new key");}  }
class C{  public WriteMultipleCoilsRequest(int ref,int count){  super();  setFunctionCode(Modbus.WRITE_MULTIPLE_COILS);  setDataLength((count + 7) / 8 + 5);  setReference(ref);  coils=new BitVector(count);}  }
class C{  final Type capture(){  Type superclass=getClass().getGenericSuperclass();  checkArgument(superclass instanceof ParameterizedType,"%s isn't parameterized",superclass);  return ((ParameterizedType)superclass).getActualTypeArguments()[0];}  }
class C{  private static int convertValueToInt(CharSequence charSeq,int defaultValue){  if (null == charSeq)   return defaultValue;  String nm=charSeq.toString();  int value;  int sign=1;  int index=0;  int len=nm.length();  int base=10;  if ('-' == nm.charAt(0)) {    sign=-1;    index++;  }  if ('0' == nm.charAt(index)) {    if (index == (len - 1))     return 0;    char c=nm.charAt(index + 1);    if ('x' == c || 'X' == c) {      index+=2;      base=16;    } else {      index++;      base=8;    }  } else   if ('#' == nm.charAt(index)) {    index++;    base=16;  }  return Integer.parseInt(nm.substring(index),base) * sign;}  }
class C{  public PluginParameters createPluginParameters(){  return new PluginParameters(pomFile,createBackupFile,backupFileExtension,encoding,lineSeparatorUtil,expandEmptyElements,keepBlankLines,indentCharacters,indentBlankLines,predefinedSortOrder,customSortOrderFile,sortDependencies,sortPlugins,sortProperties,verifyFailType);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.REACTION_TRIGGER;}  }
class C{  public void show(){  show(false,null);}  }
class C{  public static int appendAnyChar(Automaton a,int state){  int newState=a.createState();  a.addTransition(state,newState,Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);  return newState;}  }
class C{  public String exec(String command) throws ReplicatorException {  String[] osArray={"sh","-c",command};  ProcessExecutor pe=new ProcessExecutor();  pe.setCommands(osArray);  if (logger.isDebugEnabled()) {    logger.debug("Executing OS command: " + command);  }  pe.run();  if (logger.isDebugEnabled()) {    logger.debug("OS command stdout: " + pe.getStdout());    logger.debug("OS command stderr: " + pe.getStderr());    logger.debug("OS command exit value: " + pe.getExitValue());  }  if (!pe.isSuccessful()) {    String msg="OS command failed: command=" + command + " rc="+ pe.getExitValue()+ " stdout="+ pe.getStdout()+ " stderr="+ pe.getStderr();    logger.error(msg);    throw new ReplicatorException(msg);  }  return pe.getStdout();}  }
class C{  private boolean mapPatternElemPos(int nesting,boolean isStart,boolean isAttrName){  if (0 == nesting) {    if (m_patternMapSize >= m_patternMap.length) {      int patternMap[]=m_patternMap;      int len=m_patternMap.length;      m_patternMap=new int[m_patternMapSize + 100];      System.arraycopy(patternMap,0,m_patternMap,0,len);    }    if (!isStart) {      m_patternMap[m_patternMapSize - 1]-=TARGETEXTRA;    }    m_patternMap[m_patternMapSize]=(m_compiler.getTokenQueueSize() - (isAttrName ? 1 : 0)) + TARGETEXTRA;    m_patternMapSize++;    isStart=false;  }  return isStart;}  }
class C{  protected void init(){}  }
class C{  public static Uri createFileUri(String path){  if (path.startsWith("file://")) {    return Uri.parse(path);  }  return Uri.fromFile(new File(path));}  }
class C{  public boolean isItalic(){  return italic;}  }
class C{  @NonNull public IntroductionBuilder withPreviousButtonEnabled(boolean enabled){  this.showPreviousButton=enabled;  return this;}  }
class C{  private GeneralSubtree createWidestSubtree(GeneralNameInterface name){  try {    GeneralName newName;switch (name.getType()) {case GeneralNameInterface.NAME_ANY:      ObjectIdentifier otherOID=((OtherName)name).getOID();    newName=new GeneralName(new OtherName(otherOID,null));  break;case GeneralNameInterface.NAME_RFC822:newName=new GeneralName(new RFC822Name(""));break;case GeneralNameInterface.NAME_DNS:newName=new GeneralName(new DNSName(""));break;case GeneralNameInterface.NAME_X400:newName=new GeneralName(new X400Address((byte[])null));break;case GeneralNameInterface.NAME_DIRECTORY:newName=new GeneralName(new X500Name(""));break;case GeneralNameInterface.NAME_EDI:newName=new GeneralName(new EDIPartyName(""));break;case GeneralNameInterface.NAME_URI:newName=new GeneralName(new URIName(""));break;case GeneralNameInterface.NAME_IP:newName=new GeneralName(new IPAddressName((byte[])null));break;case GeneralNameInterface.NAME_OID:newName=new GeneralName(new OIDName(new ObjectIdentifier((int[])null)));break;default :throw new IOException("Unsupported GeneralNameInterface type: " + name.getType());}return new GeneralSubtree(newName,0,-1);} catch (IOException e) {throw new RuntimeException("Unexpected error: " + e,e);}}  }
class C{  public ParticleSystem(Activity a,int maxParticles,int drawableRedId,long timeToLive){  this(a,maxParticles,a.getResources().getDrawable(drawableRedId),timeToLive,android.R.id.content);}  }
class C{  public static void displayToast(int i,String extraInfo){  displayToast(sUiContext.getString(i),extraInfo,true);}  }
class C{  protected void doNewState(int oldState,int newState){  SerialNode mNode=SerialAddress.getNodeFromSystemName(getSystemName());  if (mNode != null) {    if (newState == ON) {      mNode.setOutputBit(mBit,false);    } else     if (newState == OFF) {      mNode.setOutputBit(mBit,true);    } else {      log.warn("illegal state requested for Light: " + getSystemName());    }  }}  }
class C{  static String convertToOdkCollect(String xml,String title) throws IOException, SAXException {  Document oldDoc=XmlUtil.parse(xml);  Document doc=XmlUtil.getDocumentBuilder().newDocument();  Element root=(Element)doc.importNode(oldDoc.getDocumentElement(),true);  root=(Element)doc.renameNode(root,HTML_NAMESPACE,"h:form");  doc.appendChild(root);  Element head=doc.createElementNS(HTML_NAMESPACE,"h:head");  Element titleElement=XmlUtil.appendElementNS(head,HTML_NAMESPACE,"h:title");  titleElement.setTextContent(title);  Element body=doc.createElementNS(HTML_NAMESPACE,"h:body");  Element model=getElementOrThrowNS(root,XFORMS_NAMESPACE,"model");  List<Node> nodesAfterModel=new ArrayList<>();  Node nextSibling=model.getNextSibling();  while (nextSibling != null) {    nodesAfterModel.add(nextSibling);    nextSibling=nextSibling.getNextSibling();  }  head.appendChild(model);  for (  Node node : nodesAfterModel) {    body.appendChild(node);  }  root.appendChild(head);  root.appendChild(body);  return XformsUtil.doc2String(doc);}  }
class C{  public static void writeMatrix(double[][] matrix,String fileName,String headerLine){  ArrayList<String> list=new ArrayList<String>();  if (headerLine != null) {    list.add(headerLine);  }  for (int i=0; i < matrix.length; i++) {    String line="";    for (int j=0; j < matrix[0].length - 1; j++) {      line+=matrix[i][j];      line+="\t";    }    line+=matrix[i][matrix[0].length - 1];    list.add(line);  }  writeList(list,fileName);}  }
class C{  public Quaterniond mul(Quaterniondc q){  return mul(q,this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean removeEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex >= mDataSets.size())   return false;  boolean removed=mDataSets.get(dataSetIndex).removeEntry(e.getXIndex());  if (removed) {    float val=e.getVal();    mYValCount-=1;    mYValueSum-=val;    calcMinMax(mDataSets);  }  return removed;}  }
class C{  public KnownArgumentsInfo(@NotNull final Collection<Argument> arguments,final int minArguments){  this(arguments,minArguments,Integer.MAX_VALUE);}  }
class C{  public static MutableList<Integer> toReverseList(int from,int to){  return Interval.fromTo(from,to).reverseThis().toList();}  }
class C{  public void printContext(PrintStream out){  out.println(getMessage());  out.print(context);}  }
class C{  protected boolean noMoreCharacters() throws IOException {  if (avail == 0) {    avail=reader.read(buffer);    if (avail <= 0) {      avail=0;      return true;    }    pos=0;  }  return false;}  }
class C{  public void animateX(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easing);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public void transferStateTo(Object dest){  for (Class<?> clazz=getClass(); !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {    Field[] fields=clazz.getDeclaredFields();    for (    Field field : fields) {      final int modifiers=field.getModifiers();      if (!(Modifier.isFinal(modifiers) && Modifier.isTransient(modifiers) || Modifier.isStatic(modifiers))) {        try {          field.setAccessible(true);        } catch (        SecurityException ex) {          logger.warn("Cannot set field {} accessible.",field,ex);        }        try {          field.set(dest,field.get(this));        } catch (        IllegalArgumentException ex) {          throw new RuntimeException("Getter/Setter argument failed using reflection on " + field,ex);        }catch (        IllegalAccessException ex) {          throw new RuntimeException("Getter/Setter access failed using reflection on " + field,ex);        }        if (!field.getType().isPrimitive()) {          try {            field.set(this,null);          } catch (          IllegalArgumentException|IllegalAccessException ex) {            logger.warn("Failed to set field {} to null; generally it's harmless, but with reference counted data structure this may be an issue.",field,ex);          }        }      }    }  }}  }
class C{  protected void checkIntegrity(){  if (!columns.isEmpty()) {    int size=columns.get(0).size();    Iterator<List<String>> it=columns.iterator();    while (it.hasNext()) {      List<String> currentColumn=it.next();      if (currentColumn.size() != size) {        throw new IllegalArgumentException("The columns have not the same sized. : " + currentColumn.size() + " vs "+ size);      }    }  }  if (titles != null && !titles.isEmpty()) {    if (!columns.isEmpty()) {      if (titles.size() != columns.size()) {        throw new IllegalArgumentException("Invalid expected titles. There are " + columns.size() + " while there are "+ titles.size()+ " titles.");      }    }  }}  }
class C{  protected MouseListener createMouseListener(){  return getHandler();}  }
class C{  public static boolean isKOML(String filename){  return filename.toLowerCase().endsWith(KOML.FILE_EXTENSION);}  }
class C{  void onLoadFailed(int errorCode){  if (mRestoreStartedAtMillis != -1 && mLastShowMillis >= mRestoreStartedAtMillis) {    recordTabRestoreResult(false,-1,-1,errorCode);  }  mRestoreStartedAtMillis=-1;}  }
class C{  public static String javaDecode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\\') {      if (i + 1 >= s.length()) {        throw getFormatException(s,i);      }      c=s.charAt(++i);switch (c) {case 't':        buff.append('\t');      break;case 'r':    buff.append('\r');  break;case 'n':buff.append('\n');break;case 'b':buff.append('\b');break;case 'f':buff.append('\f');break;case '#':buff.append('#');break;case '=':buff.append('=');break;case ':':buff.append(':');break;case '"':buff.append('"');break;case '\\':buff.append('\\');break;case 'u':{try {c=(char)(Integer.parseInt(s.substring(i + 1,i + 5),16));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=4;buff.append(c);break;}default :if (c >= '0' && c <= '9') {try {c=(char)(Integer.parseInt(s.substring(i,i + 3),8));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=2;buff.append(c);} else {throw getFormatException(s,i);}}} else {buff.append(c);}}return buff.toString();}  }
class C{  public _BuildControllerUpdate(){  super();}  }
class C{  public static boolean isAlpha(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isLetter(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public void stubFromField(Element elt){  if (!(elt.getKind() == ElementKind.FIELD)) {    return;  }  String pkg=ElementUtils.getVerboseName((ElementUtils.enclosingPackage(elt)));  if (!"".equals(pkg)) {    currentPackage=pkg;    currentIndention="    ";    indent();  }  VariableElement field=(VariableElement)elt;  printFieldDecl(field);}  }
class C{  public boolean isNodesetExpr(){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean isReadOnly(){  return getSailConnection().isReadOnly();}  }
class C{  public void addSeedMaterial(long seed){synchronized (this) {    windowCount=0;    generator.addSeedMaterial(seed);  }}  }
class C{  @UiThreadTest public void testTheSequence(){  int size=mActivity.mSequence.getTourGuideArray().length;  int currentSequence=0;  try {    assertEquals(getActualSequence(),currentSequence);    Thread.sleep(1500);    button.performClick();    currentSequence+=1;    assertEquals(getActualSequence(),currentSequence);    button2.performClick();    currentSequence+=1;    Thread.sleep(1500);    assertEquals(getActualSequence(),currentSequence);    button3.performClick();    assertEquals(mActivity.mSequence.mCurrentSequence,size);  } catch (  InterruptedException e) {    Log.d(TAG,"InterruptedException occur in testTheSequence");  }}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSet<E>(set);}  }
class C{  public boolean addEdge(Edge edge){  return getEdges().add(edge);}  }
class C{  public boolean requestNetworkTransitionWakelock(String forWhom){  try {    mService.requestNetworkTransitionWakelock(forWhom);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static Path[] files(Path from,DirectoryStream.Filter<Path> filter) throws IOException {  try (DirectoryStream<Path> stream=Files.newDirectoryStream(from,filter)){    return Iterators.toArray(stream.iterator(),Path.class);  } }  }
class C{  private static DefaultSampleValues parseTrex(ParsableByteArray trex){  trex.setPosition(Atom.FULL_HEADER_SIZE + 4);  int defaultSampleDescriptionIndex=trex.readUnsignedIntToInt() - 1;  int defaultSampleDuration=trex.readUnsignedIntToInt();  int defaultSampleSize=trex.readUnsignedIntToInt();  int defaultSampleFlags=trex.readInt();  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  private GenericKey(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void query(Collection<? super BoundedObject> results,int px,int py){  query(results,px,py,root);}  }
class C{  public boolean doSendRegistration(LicenseInfoExt licenseInfo) throws Exception {  if (licenseInfo == null) {    return true;  }  String registrationDate=licenseInfo.getLastRegistrationEventDate();  if (registrationDate == null || registrationDate.isEmpty() || registrationDate.equals(CallHomeConstants.VALUE_NOT_SET)) {    _log.info("There is no previous registration event sent.");    return true;  }  _log.info("Previous registration event was sent on: {}",registrationDate);  SimpleDateFormat storedDate=new SimpleDateFormat(SERIALIZE_DATE_FORMAT);  Date zkDate=storedDate.parse(registrationDate);  Date today=Calendar.getInstance().getTime();  int days=Days.daysBetween(new DateTime(zkDate),new DateTime(today)).getDays();  if (days > (CallHomeConstants.REGISTRATION_EVENT_THRESHOLD - 1)) {    _log.info("It's been {} days since last registration event was sent. Sending another one now. ",days);    return true;  }  _log.info("Registration event was sent {} days back. Will send another one in {} days.",days,(CallHomeConstants.REGISTRATION_EVENT_THRESHOLD - days));  return false;}  }
class C{  public static boolean folderExistsAndHasContents(File folder){  if (folder.exists()) {    if (folder.isDirectory()) {      if (folder.list().length > 0) {        return true;      }    }  }  return false;}  }
class C{  public void saveFileAs(){  int retVal;  DataPanel panel;  panel=getCurrentPanel();  if (panel == null) {    System.out.println("nothing selected!");    return;  }  if (!getCurrentFilename().equals("")) {    try {      m_FileChooser.setSelectedFile(new File(getCurrentFilename()));    } catch (    Exception e) {    }  }  try {    m_FileChooser.setCapabilitiesFilter(Capabilities.forInstances(panel.getInstances()));  } catch (  Exception e) {    m_FileChooser.setCapabilitiesFilter(null);  }  retVal=m_FileChooser.showSaveDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION) {    return;  }  panel.setChanged(false);  setCurrentFilename(m_FileChooser.getSelectedFile().getAbsolutePath());  AbstractFileSaver saver=m_FileChooser.getSaver();  saver.setInstances(panel.getInstances());  try {    saver.writeBatch();    panel.setChanged(false);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static Bitmap imageWithText(Context context,Bitmap bitmap,GenerateParams params){  TextView view=new TextView(context);  view.setText(params.text);  view.setTextColor(params.color);  view.setBackgroundColor(params.background);  view.setTypeface(null,Typeface.BOLD);  view.setGravity(Gravity.CENTER);  view.setTextSize(20);  Canvas canvas=new Canvas(bitmap);  view.measure(makeMeasureSpec(canvas.getWidth(),EXACTLY),makeMeasureSpec(canvas.getHeight(),EXACTLY));  view.layout(0,0,canvas.getWidth(),canvas.getHeight());  view.draw(canvas);  return bitmap;}  }
class C{  public void testValid() throws Exception {  startGrids(1);}  }
class C{  public void updateDecoration(){  update();}  }
class C{  @SuppressWarnings("unchecked") void addExceptionStateToUses(Instruction s){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  HeapVariable<Object> H=findOrCreateHeapVariable(exceptionState);  HeapOperand<Object>[] Hprime=extendHArray(uses.get(s));  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  uses.put(s,Hprime);}  }
class C{  @Override public void onGroupCollapse(int groupPosition){}  }
class C{  public void addAll(final CasualtyList casualtyList){  m_damaged.addAll(casualtyList.getDamaged());  m_killed.addAll(casualtyList.getKilled());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testAddr);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  public InferTypeArgumentsRefactoring(IJavaElement[] elements){  fElements=elements;}  }
class C{  private void assertRegionTwoStats(final VM vm,final CompressionStats stats){  doPutsOnVm(vm,REGION_NAME_2,100);  stats.vmTotalCompressionTime=getTotalCompressionTimeOnVm(vm,null);  assertTrue(stats.vmTotalCompressionTime > 0);  stats.region1TotalCompressionTime=getTotalCompressionTimeOnVm(vm,REGION_NAME);  assertTrue(stats.region1TotalCompressionTime > 0);  stats.region2TotalCompressionTime=getTotalCompressionTimeOnVm(vm,REGION_NAME_2);  assertTrue(stats.region2TotalCompressionTime > 0);  stats.vmTotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,null);  assertEquals(0,stats.vmTotalDecompressionTime);  stats.region1TotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,REGION_NAME);  assertEquals(0,stats.region1TotalDecompressionTime);  stats.region2TotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalDecompressionTime);  stats.vmTotalCompressions=getTotalCompressionsOnVm(vm,null);  assertEquals(200,stats.vmTotalCompressions);  stats.region1TotalCompressions=getTotalCompressionsOnVm(vm,REGION_NAME);  assertEquals(100,stats.region1TotalCompressions);  stats.region2TotalCompressions=getTotalCompressionsOnVm(vm,REGION_NAME_2);  assertEquals(100,stats.region2TotalCompressions);  stats.vmTotalDecompressions=getTotalDecompressionsOnVm(vm,null);  assertEquals(0,stats.vmTotalDecompressions);  stats.region1TotalDecompressions=getTotalDecompressionsOnVm(vm,REGION_NAME);  assertEquals(0,stats.region1TotalDecompressions);  stats.region2TotalDecompressions=getTotalDecompressionsOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalDecompressions);  stats.vmTotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,null);  assertEquals(20400,stats.vmTotalPreCompressedBytes);  stats.region1TotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,REGION_NAME);  assertEquals(10200,stats.region1TotalPreCompressedBytes);  stats.region2TotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,REGION_NAME_2);  assertEquals(10200,stats.region2TotalPreCompressedBytes);  stats.vmTotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,null);  assertEquals(10000,stats.vmTotalPostCompressedBytes);  stats.region1TotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,REGION_NAME);  assertEquals(5000,stats.region1TotalPostCompressedBytes);  stats.region2TotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,REGION_NAME_2);  assertEquals(5000,stats.region2TotalPostCompressedBytes);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mFile.toString());  dest.writeLong(mExpiration);  dest.writeString(mFileName);  dest.writeLong(mSize);  dest.writeString(mMimeType);  if (mFileIcon != null) {    dest.writeInt(1);    dest.writeString(mFileIcon.toString());  } else {    dest.writeInt(0);  }  dest.writeLong(mFileIconExpiration);  dest.writeLong(mFileIconSize);  dest.writeString(mFileIconMimeType);}  }
class C{  @Override public int hashCode(){  long hash=minSmallest + minLargest << 16 + minLargest >> 48 + maxSmallest << 32 + maxSmallest >> 32 + maxLargest << 48 + maxLargest >> 16;  return (int)(hash ^ (hash >>> 32));}  }
class C{  public static ActivityFacilities collectActivityFacilitiesWithOptionOfType(Scenario scenario,String activityOptionType){  ActivityFacilities activityFacilities=FacilitiesUtils.createActivityFacilities(activityOptionType);  for (  ActivityFacility fac : scenario.getActivityFacilities().getFacilities().values()) {    for (    ActivityOption option : fac.getActivityOptions().values()) {      if (option.getType().equals(activityOptionType)) {        activityFacilities.addActivityFacility(fac);      }    }  }  return activityFacilities;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Partition stripNonComparables(Partition partition){  Partition newPartition=new Partition(partition);  newPartition.setCreateTime(0);  newPartition.setLastAccessTime(0);  return newPartition;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  Exception ex) {    Assert.shouldNeverReachHere();  }  return null;}  }
class C{  public static ArrayList<Instruction> recompileHopsDag(Hop hops,LocalVariableMap vars,RecompileStatus status,boolean inplace,long tid) throws DMLRuntimeException, HopsException, LopsException, IOException {  ArrayList<Instruction> newInst=null;synchronized (hops) {    LOG.debug("\n**************** Optimizer (Recompile) *************\nMemory Budget = " + OptimizerUtils.toMB(OptimizerUtils.getLocalMemBudget()) + " MB");    if (!inplace) {      hops=deepCopyHopsDag(hops);    } else {      hops.resetVisitStatus();      rClearLops(hops);    }    if (!inplace) {      hops.resetVisitStatus();      rReplaceLiterals(hops,vars);    }    hops.resetVisitStatus();    rUpdateStatistics(hops,vars);    if (!inplace)     _rewriter.get().rewriteHopDAG(hops,null);    MemoTable memo=new MemoTable();    hops.resetVisitStatus();    memo.init(hops,status);    hops.resetVisitStatus();    hops.refreshMemEstimates(memo);    Dag<Lop> dag=new Dag<Lop>();    Lop lops=hops.constructLops();    lops.addToDag(dag);    newInst=dag.getJobs(null,ConfigurationManager.getDMLConfig());  }  if (tid != 0)   newInst=ProgramConverter.createDeepCopyInstructionSet(newInst,tid,-1,null,null,null,false,false);  if (DMLScript.EXPLAIN == ExplainType.RECOMPILE_HOPS)   LOG.info("EXPLAIN RECOMPILE \nPRED (line " + hops.getBeginLine() + "):\n"+ Explain.explain(hops,1));  if (DMLScript.EXPLAIN == ExplainType.RECOMPILE_RUNTIME)   LOG.info("EXPLAIN RECOMPILE \nPRED (line " + hops.getBeginLine() + "):\n"+ Explain.explain(newInst,1));  return newInst;}  }
class C{  public String download(String siteUrl,String language) throws IOException {  Map<String,String> requestProperties=new HashMap<>();  requestProperties.put("Accept-Language",language);  return download(siteUrl,requestProperties);}  }
class C{  public Mat dhtRows(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dhtRows();  return new Mat(dm.toArray());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public int hashCode(){  int hash=37;  return hash;}  }
class C{  public void testDynamicType(){  CSVInputAdapterSpec spec=new CSVInputAdapterSpec(new AdapterInputSource(CSV_FILENAME_ONELINE_TRADE),"TypeB");  Configuration config=new Configuration();  config.getEngineDefaults().getThreading().setInternalTimerEnabled(false);  epService=EPServiceProviderManager.getDefaultProvider(config);  epService.initialize();  InputAdapter feed=new CSVInputAdapter(epService,spec);  EPStatement stmt=epService.getEPAdministrator().createEPL("select symbol, price, volume from TypeB.win:length(100)");  SupportUpdateListener listener=new SupportUpdateListener();  stmt.addListener(listener);  assertEquals(String.class,stmt.getEventType().getPropertyType("symbol"));  assertEquals(String.class,stmt.getEventType().getPropertyType("price"));  assertEquals(String.class,stmt.getEventType().getPropertyType("volume"));  feed.start();  assertEquals(1,listener.getNewDataList().size());}  }
class C{  public void close() throws IOException {  cm.closeChannel(cn,"Closed due to user request.",true);}  }
class C{  private void assertColumn(String tableName,String columnName,boolean exists) throws SQLException {  Statement stmt=testDatabase.getDBconnection().createStatement();  ResultSet rs=stmt.executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '" + tableName + "' AND  COLUMN_NAME = '"+ columnName+ "'");  boolean resultAvailable=rs.next();  stmt.close();  rs.close();  Assert.assertEquals(exists,resultAvailable);}  }
class C{  @Deprecated public String neo4jErrorCode(){  return code;}  }
class C{  @Override public String processCommand(final CommandRequest command){  assertState(isConnected(),"Gfsh must be connected to the GemFire Manager in order to process commands remotely!");  try {    final ResponseEntity<String> response=send(createHttpRequest(command),String.class);    return response.getBody();  } catch (  ResourceAccessException e) {    return handleResourceAccessException(e);  }}  }
class C{  public void addListener(final IDatabaseListener listener){  m_listeners.addListener(listener);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  private static int wordIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_WORD;}  }
class C{  private ComputeBigramRelativeFrequencyPairs(){}  }
class C{  public void stop() throws Exception {  LOG.info("stop()");  if (actorSystem != null) {    actorSystem.shutdown();  }}  }
class C{  @Override public void onViewDetachedFromWindow(RecyclerView.ViewHolder holder){  mFastAdapter.onViewDetachedFromWindow(holder);}  }
class C{  public ServiceInfo[] list(long timeout){  if (_infos.isEmpty() || !_events.isEmpty() || _needToWaitForInfos) {    long loops=(timeout / 200L);    if (loops < 1) {      loops=1;    }    for (int i=0; i < loops; i++) {      try {        Thread.sleep(200);      } catch (      final InterruptedException e) {      }      if (_events.isEmpty() && !_infos.isEmpty() && !_needToWaitForInfos) {        break;      }    }  }  _needToWaitForInfos=false;  return _infos.values().toArray(new ServiceInfo[_infos.size()]);}  }
class C{  private void updateStoreLocation(){  loadFolderLoc=CarbonDataProcessorUtil.getLocalDataFolderLocation(meta.getSchemaName(),meta.getTableName(),meta.getTaskNo(),meta.getPartitionID(),meta.getSegmentId() + "",false);}  }
class C{  public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){  super(reason,SQLState,vendorCode,cause);  this.updateCounts=updateCounts;}  }
class C{  public void resetStaticAspects(long aspectSeed){  this.generateStaticAspects(aspectSeed);}  }
class C{  public DataSource<CloseableReference<CloseableImage>> fetchDecodedImage(ImageRequest imageRequest,Object callerContext,ImageRequest.RequestLevel lowestPermittedRequestLevelOnSubmit){  try {    Producer<CloseableReference<CloseableImage>> producerSequence=mProducerSequenceFactory.getDecodedImageProducerSequence(imageRequest);    return submitFetchRequest(producerSequence,imageRequest,lowestPermittedRequestLevelOnSubmit,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  private void processPreDestroyViewMap(SystemEvent se){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Handling PreDestroyViewMapEvent");  }  UIViewRoot viewRoot=(UIViewRoot)se.getSource();  Map<String,Object> viewMap=viewRoot.getViewMap(false);  if (viewMap != null && !viewMap.isEmpty()) {    FacesContext facesContext=FacesContext.getCurrentInstance();    if (contextManager != null) {      contextManager.clear(facesContext,viewMap);      contextManager.fireDestroyedEvent(facesContext,viewRoot);    }    destroyBeans(facesContext,viewMap);  }}  }
class C{  public String encodedPassword(){  if (password.isEmpty())   return "";  int passwordStart=url.indexOf(':',scheme.length() + 3) + 1;  int passwordEnd=url.indexOf('@');  return url.substring(passwordStart,passwordEnd);}  }
class C{  public ArrayIndexOutOfBoundsException(){}  }
class C{  protected void pipe(InputStream in,OutputStream out) throws IOException {  BufferedOutputStream bufferedOut=new BufferedOutputStream(out);  int n;  byte[] bytes=new byte[1024 * 4];  while ((n=in.read(bytes)) != -1) {    bufferedOut.write(bytes,0,n);  }  bufferedOut.flush();  bufferedOut.close();  in.close();}  }
class C{  public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {  JavaUtils.checkRegisterPermission();  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Try to register " + algorithmURI + " "+ implementingClass);  }  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);  if (registeredClass != null) {    Object exArgs[]={algorithmURI,registeredClass};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  algorithmHash.put(algorithmURI,implementingClass);}  }
class C{  public boolean contains(int x,int y){  int absX=getAbsoluteX() + getScrollX();  int absY=getAbsoluteY() + getScrollY();  return (x >= absX && x < absX + getWidth() && y >= absY && y < absY + getHeight());}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  public void resetMatrix(){  g.resetMatrix();}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public static LatLon intersectionWithMeridian(LatLon p1,LatLon p2,Angle meridian,Globe globe){  if (p1 == null || p2 == null) {    String msg=Logging.getMessage("nullValue.LocationIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (meridian == null) {    String msg=Logging.getMessage("nullValue.MeridianIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (globe == null || globe instanceof Globe2D) {    return intersectionWithMeridian(p1,p2,meridian);  }  Vec4 pt1=globe.computePointFromLocation(p1);  Vec4 pt2=globe.computePointFromLocation(p2);  Vec4 northPole=globe.computePointFromLocation(new LatLon(Angle.POS90,meridian));  Vec4 pointOnEquator=globe.computePointFromLocation(new LatLon(Angle.ZERO,meridian));  Plane plane=Plane.fromPoints(northPole,pointOnEquator,Vec4.ZERO);  Vec4 intersectionPoint=plane.intersect(Line.fromSegment(pt1,pt2));  if (intersectionPoint == null)   return null;  Position intersectionPos=globe.computePositionFromPoint(intersectionPoint);  return new LatLon(intersectionPos.getLatitude(),meridian);}  }
class C{  protected static byte[] parseWapString(ByteArrayInputStream pduDataStream,int stringType){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  if ((TYPE_QUOTED_STRING == stringType) && (QUOTED_STRING_FLAG == temp)) {    pduDataStream.mark(1);  } else   if ((TYPE_TEXT_STRING == stringType) && (QUOTE == temp)) {    pduDataStream.mark(1);  } else {    pduDataStream.reset();  }  return getWapString(pduDataStream,stringType);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean groupFolders=evalBool(stack.pop());  boolean includeFolders=evalBool(stack.pop());  boolean includeFiles=evalBool(stack.pop());  String prefix=getString(stack);  Object[] rawFiles=null;  Object mData=stack.pop();  int mediaMask=0;  boolean validMask=false;  if (mData instanceof Object[])   rawFiles=(Object[])mData; else   if (mData instanceof java.util.Collection)   rawFiles=((java.util.Collection)mData).toArray(); else   if (mData != null)   mediaMask=DBObject.getMediaMaskFromString(mData.toString()); else {    return groupFolders ? (Object)new java.util.LinkedHashMap() : (Object)new java.util.Vector();  }  java.util.Vector rv=new java.util.Vector(500);  java.util.Map groupy=null;  if (!includeFiles && !includeFolders)   return rv;  if (groupFolders) {    groupy=new java.util.LinkedHashMap();    groupy.put(null,rv);  }  if (rawFiles == null)   rawFiles=Wizard.getInstance().getRawAccess(Wizard.MEDIAFILE_CODE,(byte)0);  int prefixLength=prefix.length();  for (int i=0; i < rawFiles.length; i++) {    MediaFile mf=(MediaFile)rawFiles[i];    if (mf == null || mf.isTV() || !mf.isArchiveFile() || (mediaMask != 0 && !mf.hasMediaMaskAny(mediaMask)))     continue;    String name=mf.getName();    if (name.startsWith(prefix)) {      if (!groupFolders && includeFiles && includeFolders)       rv.add(mf); else {        boolean isFolder=false;        int nextIdx=name.indexOf('/',prefixLength);        isFolder=(nextIdx != -1) && nextIdx < name.length() - 1;        if (isFolder && mf.isDVD()) {          if (name.regionMatches(true,nextIdx + 1,Seeker.DVD_VOLUME_SECRET,0,Seeker.DVD_VOLUME_SECRET.length()))           isFolder=false;        } else         if (isFolder && mf.isBluRay()) {          if (name.regionMatches(true,nextIdx + 1,Seeker.BLURAY_VOLUME_SECRET,0,Seeker.BLURAY_VOLUME_SECRET.length()))           isFolder=false;        }        if ((includeFolders && isFolder) || (includeFiles && !isFolder)) {          if (groupFolders) {            if (isFolder) {              String subPath=name.substring(prefixLength,nextIdx);              java.util.Vector currList=(java.util.Vector)groupy.get(subPath);              if (currList == null)               groupy.put(subPath,currList=new java.util.Vector());              currList.add(mf);            } else             rv.add(mf);          } else           rv.add(mf);        }      }    }  }  return groupFolders ? (Object)groupy : (Object)rv;}  }
class C{  private double sigmoidal(final double arg){  return 1 / (1 + Math.pow(theta * (arg / (1 - arg)),-lambda));}  }
class C{  protected void processWindowEvent(WindowEvent e){  if (e.getID() == WindowEvent.WINDOW_CLOSING) {    cancel();  }  super.processWindowEvent(e);}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public boolean isBeforeFirst() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void validateElements(InputNode node,Section section) throws Exception {  LabelMap map=section.getElements();  InputNode next=node.getNext();  while (next != null) {    String name=next.getName();    Section child=section.getSection(name);    if (child != null) {      validateSection(next,child);    } else {      validateElement(next,section,map);    }    next=node.getNext();  }  validate(node,map);}  }
class C{  private void scanLitChar(int pos){  if (reader.ch == '\\') {    if (reader.peekChar() == '\\' && !reader.isUnicode()) {      reader.skipChar();      reader.putChar('\\',true);    } else {      reader.scanChar();switch (reader.ch) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':        char leadch=reader.ch;      int oct=reader.digit(pos,8);    reader.scanChar();  if ('0' <= reader.ch && reader.ch <= '7') {    oct=oct * 8 + reader.digit(pos,8);    reader.scanChar();    if (leadch <= '3' && '0' <= reader.ch && reader.ch <= '7') {      oct=oct * 8 + reader.digit(pos,8);      reader.scanChar();    }  }reader.putChar((char)oct);break;case 'b':reader.putChar('\b',true);break;case 't':reader.putChar('\t',true);break;case 'n':reader.putChar('\n',true);break;case 'f':reader.putChar('\f',true);break;case 'r':reader.putChar('\r',true);break;case '\'':reader.putChar('\'',true);break;case '\"':reader.putChar('\"',true);break;case '\\':reader.putChar('\\',true);break;default :lexError(reader.bp,"illegal.esc.char");}}} else if (reader.bp != reader.buflen) {reader.putChar(true);}}  }
class C{  public static void write(float latPoint,float lonPoint,int w,int h,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkCircle.write(latPoint,lonPoint,0,0,w,h,properties,dos);}  }
class C{  public ToggleButtonGroup(Dimension preferredSize,Action... actions){  if (actions.length < 2) {    throw new IllegalArgumentException("At least two primary actions must be specified.");  }  this.setOpaque(false);  this.preferredSize=preferredSize;  primaryButtons=new CompositeToggleButton[actions.length];  for (int i=0; i < actions.length; i++) {    int position;    if (i == 0) {      position=SwingConstants.LEFT;    } else     if (i < actions.length - 1) {      position=SwingConstants.CENTER;    } else {      position=SwingConstants.RIGHT;    }    primaryButtons[i]=new CompositeToggleButton(actions[i],position);  }  GridBagLayout layout=new GridBagLayout();  setLayout(layout);  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=new Insets(0,0,0,0);  gbc.fill=GridBagConstraints.VERTICAL;  gbc.weighty=1;  for (  JToggleButton button : primaryButtons) {    button.addActionListener(buttonChooser);    if (preferredSize != null) {      button.setMinimumSize(preferredSize);      button.setPreferredSize(preferredSize);    }    add(button,gbc);  }}  }
class C{  public OracleDocument insertAndGet(OracleDocument document) throws OracleException {  if (document == null) {    throw SODAUtils.makeException(SODAMessage.EX_ARG_CANNOT_BE_NULL,"document");  }  writeCheck("insert");  if (document.getKey() != null && options.keyAssignmentMethod != CollectionDescriptor.KEY_ASSIGN_CLIENT) {    throw SODAUtils.makeException(SODAMessage.EX_INPUT_DOC_HAS_KEY);  }  OraclePreparedStatement stmt=null;  ResultSet rows=null;  byte[] dataBytes=EMPTY_DATA;  String key=null;  String version=null;  String tstamp=null;  boolean disableReturning=internalDriver;switch (options.keyAssignmentMethod) {case CollectionDescriptor.KEY_ASSIGN_SEQUENCE:    if (disableReturning)     key=Long.toString(this.nextSequenceValue());  break;case CollectionDescriptor.KEY_ASSIGN_GUID:if (disableReturning) {  key=db.nextGuid();  if (options.keyDataType == CollectionDescriptor.INTEGER_KEY)   key=uidToDecimal(key);}break;case CollectionDescriptor.KEY_ASSIGN_UUID:key=db.generateKey();if (options.keyDataType == CollectionDescriptor.INTEGER_KEY) key=uidToDecimal(key);break;default :key=canonicalKey(document.getKey());break;}String sqltext=buildInsert(disableReturning);try {metrics.startTiming();stmt=(OraclePreparedStatement)conn.prepareStatement(sqltext);int num=0;if (!returnInsertedKey() || disableReturning) {bindKeyColumn(stmt,++num,key);}num=bindMediaTypeColumn(stmt,num,document);boolean materializeContent=true;if (!payloadBasedVersioning() && admin().isHeterogeneous() && ((OracleDocumentImpl)document).hasStreamContent()) {setStreamBind(stmt,document,++num);materializeContent=false;} else {dataBytes=bindPayloadColumn(stmt,++num,document);}if (returnInsertedTime() && disableReturning) {long lstamp=db.getDatabaseTime();tstamp=ComponentTime.stampToString(lstamp);if (tstamp.endsWith("Z")) tstamp=tstamp.substring(0,tstamp.length() - 1);if (options.timestampColumnName != null) stmt.setString(++num,tstamp);if (options.creationColumnName != null) stmt.setString(++num,tstamp);}if ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) {switch (options.versioningMethod) {case CollectionDescriptor.VERSION_SEQUENTIAL:long lver=1L;stmt.setLong(++num,lver);version=Long.toString(lver);break;case CollectionDescriptor.VERSION_TIMESTAMP:long lstamp=db.getDatabaseTime();stmt.setLong(++num,lstamp);version=Long.toString(lstamp);break;case CollectionDescriptor.VERSION_UUID:version=db.generateKey();stmt.setString(++num,version);break;default :if (!materializeContent) {throw SODAUtils.makeException(SODAMessage.EX_NO_HASH_VERSION,options.uriName,options.getVersioningMethod());}version=computeVersion(dataBytes);stmt.setString(++num,version);break;}}if (!disableReturning) {if (returnInsertedKey()) stmt.registerReturnParameter(++num,Types.VARCHAR);if (returnInsertedTime()) stmt.registerReturnParameter(++num,Types.VARCHAR);if (returnInsertedVersion()) stmt.registerReturnParameter(++num,Types.VARCHAR);}int nrows=stmt.executeUpdate();if (nrows != 1) {throw SODAUtils.makeException(SODAMessage.EX_INSERT_FAILED,options.uriName);}if (insertHasReturnClause(disableReturning)) {rows=stmt.getReturnResultSet();if (rows.next()) {int onum=0;if (returnInsertedKey()) {key=rows.getString(++onum);}if (returnInsertedTime()) {tstamp=OracleDatabaseImpl.getTimestamp(rows.getString(++onum));}if (returnInsertedVersion()) {version=rows.getString(++onum);}} else {SODAUtils.makeException(SODAMessage.EX_INSERT_FAILED,options.uriName);}}stmt.close();stmt=null;metrics.recordWrites(1,1);} catch (SQLException e) {if (OracleLog.isLoggingEnabled()) log.severe(e.toString());throw SODAUtils.makeExceptionWithSQLText(e,sqltext);} finally {for (String message : SODAUtils.closeCursor(stmt,null)) {if (OracleLog.isLoggingEnabled()) log.severe(message);}}OracleDocumentImpl doc=new OracleDocumentImpl(key,version,tstamp);doc.setCreatedOn(tstamp);String ctype=document.getMediaType();setContentType(ctype,doc);return (doc);}  }
class C{  protected Task<T> doDeactivateWithTask(URI id){  return postTask(getDeactivateUrl(),id);}  }
class C{  public void init() throws ServletException {}  }
class C{  protected void linkStationsToNetwork(){  log.info("Linking pt stations to network...");  Counter counter=new Counter("route # ");  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      counter.incCounter();      if (route.getTransportMode().equals(BUS)) {        setMode(BUS);        linkRouteToNetwork(route);      } else       if (route.getTransportMode().equals(TRAM)) {        setMode(TRAM);        linkRouteToNetwork(route);      } else {      }    }  }  counter.printCounter();  log.info("Linking pt stations to network... done.");}  }
class C{  public Builder defaultState(String defaultState){  this.defaultState=defaultState;  return this;}  }
class C{  private String loginUser(URI hostUri) throws Throwable {  URI usersLink=UriUtils.buildUri(hostUri,UserService.FACTORY_LINK);  this.host.waitForReplicatedFactoryServiceAvailable(usersLink);  String basicAuth=constructBasicAuth(adminUser,adminUser);  URI loginUri=UriUtils.buildUri(hostUri,ServiceUriPaths.CORE_AUTHN_BASIC);  AuthenticationRequest login=new AuthenticationRequest();  login.requestType=AuthenticationRequest.AuthenticationRequestType.LOGIN;  String[] authToken=new String[1];  authToken[0]=null;  Date exp=this.host.getTestExpiration();  while (new Date().before(exp)) {    Operation loginPost=Operation.createPost(loginUri).setBody(login).addRequestHeader(BasicAuthenticationService.AUTHORIZATION_HEADER_NAME,basicAuth).forceRemote().setCompletion(null);    this.host.testStart(1);    this.host.send(loginPost);    this.host.testWait();    if (authToken[0] != null) {      break;    }    Thread.sleep(250);  }  if (new Date().after(exp)) {    throw new TimeoutException();  }  assertNotNull(authToken[0]);  return authToken[0];}  }
class C{  public static long roundUpLong(long x,long blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public synchronized static AsyncWorld create(final WorldCreator creator){  BukkitQueue_0 queue=(BukkitQueue_0)SetQueue.IMP.getNewQueue(creator.name(),true,false);  World world=queue.createWorld(creator);  return wrap(world);}  }
class C{  public String toPlainString(){  return PLAIN_FORMAT.format(this).toString();}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public boolean isFacingToward(final Entity entity){  return direction.equals(getDirectionToward(entity));}  }
class C{  public static void write(File file,String text,String charset,boolean writeBom) throws IOException {  Writer writer=null;  try {    FileOutputStream out=new FileOutputStream(file);    if (writeBom) {      IOGroovyMethods.writeUTF16BomIfRequired(out,charset);    }    writer=new OutputStreamWriter(out,charset);    writer.write(text);    writer.flush();    Writer temp=writer;    writer=null;    temp.close();  }  finally {    closeWithWarning(writer);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.249 -0400",hash_original_method="2D80866903D5AC76D21C996C1CD44AE9",hash_generated_method="87FA7015A6BEF10215A5F136F56DF297") public Iterator<String> keyIterator(){  return mRequestInformation.keySet().iterator();}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public boolean equals(CONSTANT_Utf8_info cu){  int i, j;  j=bytes.length;  if (j != cu.bytes.length)   return false;  for (i=0; i < j; i++) {    if (bytes[i] != cu.bytes[i])     return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private View fillFromSelection(int selectedTop,int childrenTop,int childrenBottom){  final int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  final int verticalSpacing=mVerticalSpacing;  int rowStart;  int rowEnd=-1;  if (!mStackFromBottom) {    rowStart=selectedPosition - (selectedPosition % numColumns);  } else {    int invertedSelection=mItemCount - 1 - selectedPosition;    rowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    rowStart=Math.max(0,rowEnd - numColumns + 1);  }  View sel;  View referenceView;  int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,rowStart);  int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,numColumns,rowStart);  sel=makeRow(mStackFromBottom ? rowEnd : rowStart,selectedTop,true);  mFirstPosition=rowStart;  referenceView=mReferenceView;  adjustForTopFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  adjustForBottomFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  if (!mStackFromBottom) {    fillUp(rowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    fillDown(rowStart + numColumns,referenceView.getBottom() + verticalSpacing);  } else {    fillDown(rowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    fillUp(rowStart - 1,referenceView.getTop() - verticalSpacing);  }  return sel;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (bos != null)       bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static void checkMainThread(){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && Looper.myLooper() != Looper.getMainLooper()) {    throw new IllegalStateException("Not in applications main thread");  }}  }
class C{  protected Button createDay(){  Button day=new Button();  day.setAlignment(CENTER);  day.setUIID("CalendarDay");  day.setEndsWith3Points(false);  day.setTickerEnabled(false);  return day;}  }
class C{  protected Map<Long,AtomicInteger> loadQueues(ActiveMQServer serverToInvestigate) throws Exception {  SequentialFileFactory messagesFF=new NIOSequentialFileFactory(serverToInvestigate.getConfiguration().getJournalLocation(),1);  JournalImpl messagesJournal=new JournalImpl(serverToInvestigate.getConfiguration().getJournalFileSize(),serverToInvestigate.getConfiguration().getJournalMinFiles(),serverToInvestigate.getConfiguration().getJournalPoolFiles(),0,0,messagesFF,"activemq-data","amq",1);  List<RecordInfo> records=new LinkedList<>();  List<PreparedTransactionInfo> preparedTransactions=new LinkedList<>();  messagesJournal.start();  messagesJournal.load(records,preparedTransactions,null);  Map<Long,AtomicInteger> messageRefCounts=new HashMap<>();  for (  RecordInfo info : records) {    Object o=DescribeJournal.newObjectEncoding(info);    if (info.getUserRecordType() == JournalRecordIds.ADD_REF) {      DescribeJournal.ReferenceDescribe ref=(DescribeJournal.ReferenceDescribe)o;      AtomicInteger count=messageRefCounts.get(ref.refEncoding.queueID);      if (count == null) {        count=new AtomicInteger(1);        messageRefCounts.put(ref.refEncoding.queueID,count);      } else {        count.incrementAndGet();      }    }  }  messagesJournal.stop();  return messageRefCounts;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public TDoubleIntHashMap(){}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.370 -0500",hash_original_method="999797B071E81E9F9DCCEA8ACDA6E65E",hash_generated_method="ADAC01D6102A37E2F6721B7EA58CA550") public HttpException(final String message){  super(message);}  }
class C{  public String globalInfo(){  return "The class implementing the TopDown construction method of " + "ball trees. It further uses one of a number of different splitting " + "methods to split a ball while constructing the tree top down.\n\n"+ "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public final void replaceAll(Object from,Object to){  replaceAll(from,to,false);}  }
class C{  public static <R,C,V>Cell<R,C,V> immutableCell(@Nullable R rowKey,@Nullable C columnKey,@Nullable V value){  return new ImmutableCell<R,C,V>(rowKey,columnKey,value);}  }
class C{  private int maxDepth(TreeNode root){  if (root == null)   return 0;  int left=maxDepth(root.left);  int right=maxDepth(root.right);  if (left == -1 || right == -1 || Math.abs(left - right) > 1)   return -1;  return Math.max(left,right) + 1;}  }
class C{  public List<List<Integer>> buildVehicleLists(String fileToRead,String delimiter){  if (threshold != Double.MIN_VALUE && lowerThreshold == Double.MIN_VALUE && upperThreshold == Double.MIN_VALUE) {    log.info("Building Lists of vehicle IDs");    log.info("   Threshold distinguishing between 'within' and 'through' traffic: " + threshold);  } else {    log.warn("Thresholds not specified correctly!");    throw new RuntimeException("Consider using 'buildVehicleList(...)' method");  }  List<List<Integer>> lists=new ArrayList<List<Integer>>(2);  List<Integer> withinList=new ArrayList<Integer>();  List<Integer> throughList=new ArrayList<Integer>();  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(new File(fileToRead))));    input.nextLine();    while (input.hasNextLine()) {      String[] line=input.nextLine().split(delimiter);      if (line.length == 7) {        int vehicleId=Integer.parseInt(line[0]);        double percentage=Double.parseDouble(line[4]);        if (percentage > threshold) {          withinList.add(vehicleId);        } else         if (percentage > 0) {          throughList.add(vehicleId);        }      } else {        log.warn("A line read from " + fileToRead + "  was not the correct length!");      }    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  lists.add(withinList);  lists.add(throughList);  return lists;}  }
class C{  public tfoot removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void saveScalingHistory(ScalingHistory history) throws DataStoreException {  AutoScalingDataStore dataStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();  dataStore.saveScalingHistory(history);}  }
class C{  public boolean findAndRemoveDuplicates(){  return mFindAndRemoveDuplicates;}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return castOrCopyToCollection(iterable).toArray();}  }
class C{  void ungrabInputImpl(){  hide();}  }
class C{  @Override public Blorp deleteBack(){  Node back=getBackNode();  if (back == sentinel) {    return null;  }  Node p=sentinel;  while (p.next != back) {    p=p.next;  }  p.next=null;  return back.item;}  }
class C{  public void divide() throws IOException {  print("divide",null);}  }
class C{  protected void processFile(String ext,File outDir,serverObjects post,Map<String,Throwable> failures,File inFile) throws IOException {  File outFile=new File(outDir,inFile.getName() + "." + ext);  if (outFile.exists()) {    outFile.delete();  }  ImageInputStream inStream=ImageIO.createImageInputStream(inFile);  String urlString=inFile.getAbsolutePath();  EncodedImage img=null;  Throwable error=null;  try {    img=this.VIEWER.parseAndScale(post,true,new DigestURL(urlString),ext,inStream);  } catch (  Throwable e) {    error=e;  }  if (img == null) {    failures.put(urlString,error);  } else {    FileOutputStream outFileStream=null;    try {      outFileStream=new FileOutputStream(outFile);      img.getImage().writeTo(outFileStream);    }  finally {      if (outFileStream != null) {        outFileStream.close();      }      img.getImage().close();    }  }}  }
class C{  public void rotateImage(int degrees){  Matrix matrix=new Matrix();  matrix.postRotate(degrees);  try {    mBitmap=Bitmap.createBitmap(mBitmap,0,0,mBitmap.getWidth(),mBitmap.getHeight(),matrix,true);    setImageBitmap(mBitmap);    mDegreesRotated+=degrees;    mDegreesRotated=mDegreesRotated % 360;  } catch (  OutOfMemoryError e) {  }}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  protected boolean deselectColinearAttributes(boolean[] selectedAttributes,double[] coefficients){  double maxSC=1.5;  int maxAttr=-1, coeff=0;  for (int i=0; i < selectedAttributes.length; i++) {    if (selectedAttributes[i]) {      double SC=Math.abs(coefficients[coeff] * m_StdDevs[i] / m_ClassStdDev);      if (SC > maxSC) {        maxSC=SC;        maxAttr=i;      }      coeff++;    }  }  if (maxAttr >= 0) {    selectedAttributes[maxAttr]=false;    if (m_Debug) {      System.out.println("Deselected colinear attribute:" + (maxAttr + 1) + " with standardised coefficient: "+ maxSC);    }    return true;  }  return false;}  }
class C{  public void rotate(float angle,float vx,float vy,float vz){  showMissingWarning("rotate");}  }
class C{  @Override public boolean isImmediate(){  return (Boolean)getStateHelper().eval(PropertyKeys.immediate,false);}  }
class C{  void addRule(int startYear,int endYear,int month,int dayOfMonthIndicator,int dayOfWeek,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefinition,int savingAmountSecs){  if (fixedSavingAmountSecs != null) {    throw new IllegalStateException("Window has a fixed DST saving, so cannot have DST rules");  }  if (ruleList.size() >= 2000) {    throw new IllegalStateException("Window has reached the maximum number of allowed rules");  }  boolean lastRule=false;  if (endYear == YEAR_MAX_VALUE) {    lastRule=true;    endYear=startYear;  }  int year=startYear;  while (year <= endYear) {    TZRule rule=new TZRule(year,month,dayOfMonthIndicator,dayOfWeek,time,timeEndOfDay,timeDefinition,savingAmountSecs);    if (lastRule) {      lastRuleList.add(rule);    } else {      ruleList.add(rule);    }    maxLastRuleStartYear=Math.max(startYear,maxLastRuleStartYear);    year++;  }}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || StylePreferenceFragment.class.getName().equals(fragmentName)|| UserscriptPreferenceFragment.class.getName().equals(fragmentName)|| AboutPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public void logSeek(long streamId,long pos){  addEntry(new Entry(TYPE_SEEK,null,null,streamId,null,null,null,null,null,null,pos,null,null,null,null,null,null,null,null,null));}  }
class C{  public UploadObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public UTFDataFormatException(java.lang.String s){  super(s);}  }
class C{  public XBooleanStatic(boolean b){  super(b);  m_val=b;}  }
class C{  @RequestProcessing(value="/admin/charge-records",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showChargeRecords(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/charge-records.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final JSONObject result=pointtransferQueryService.getChargeRecords(pageNum,pageSize);  final List<JSONObject> results=(List<JSONObject>)result.opt(Keys.RESULTS);  for (  final JSONObject record : results) {    final String toUserId=record.optString(Pointtransfer.TO_ID);    final JSONObject toUser=userQueryService.getUser(toUserId);    record.put(User.USER_NAME,toUser.optString(User.USER_NAME));    record.put(UserExt.USER_REAL_NAME,toUser.optString(UserExt.USER_REAL_NAME));    final String handlerId=StringUtils.substringAfterLast(record.optString(Pointtransfer.DATA_ID),"-");    final JSONObject handler=userQueryService.getUser(handlerId);    record.put(Common.HANDLER_NAME,handler.optString(User.USER_NAME));    record.put(Common.HANDLER_REAL_NAME,handler.optString(UserExt.USER_REAL_NAME));    record.put(Pointtransfer.TIME,new Date(record.optLong(Pointtransfer.TIME)));    record.put(Common.MONEY,StringUtils.substringBefore(record.optString(Pointtransfer.DATA_ID),"-"));  }  dataModel.put(Keys.RESULTS,results);  final long chargePointSum=pointtransferQueryService.getChargePointSum();  final int pointExchangeUnit=Symphonys.getInt("pointExchangeUnit");  dataModel.put(Common.CHARGE_SUM,chargePointSum / pointExchangeUnit);  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public void sendCancelledNotification(String to,String packetID){  Message msg=new Message(to);  MessageEvent messageEvent=new MessageEvent();  messageEvent.setCancelled(true);  messageEvent.setPacketID(packetID);  msg.addExtension(messageEvent);  con.sendPacket(msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:36.697 -0500",hash_original_method="8A9A8685511C9FB74B559F38C5A36FB4",hash_generated_method="B00DCA3BC1FF1A80D3AB079202C7E62D") private void makeTunnel(HttpURLConnectionImpl policy,HttpConnection connection,RequestHeaders requestHeaders) throws IOException {  RawHeaders rawRequestHeaders=requestHeaders.getHeaders();  while (true) {    HttpEngine connect=new ProxyConnectEngine(policy,rawRequestHeaders,connection);    connect.sendRequest();    connect.readResponse();    int responseCode=connect.getResponseCode();switch (connect.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    rawRequestHeaders=new RawHeaders(rawRequestHeaders);  boolean credentialsFound=policy.processAuthHeader(HTTP_PROXY_AUTH,connect.getResponseHeaders(),rawRequestHeaders);if (credentialsFound) {  continue;} else {  throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseCode);}}}  }
class C{  static <R extends ChronoLocalDate>ChronoZonedDateTime<R> ofBest(ChronoLocalDateTimeImpl<R> localDateTime,ZoneId zone,ZoneOffset preferredOffset){  Objects.requireNonNull(localDateTime,"localDateTime");  Objects.requireNonNull(zone,"zone");  if (zone instanceof ZoneOffset) {    return new ChronoZonedDateTimeImpl<>(localDateTime,(ZoneOffset)zone,zone);  }  ZoneRules rules=zone.getRules();  LocalDateTime isoLDT=LocalDateTime.from(localDateTime);  List<ZoneOffset> validOffsets=rules.getValidOffsets(isoLDT);  ZoneOffset offset;  if (validOffsets.size() == 1) {    offset=validOffsets.get(0);  } else   if (validOffsets.size() == 0) {    ZoneOffsetTransition trans=rules.getTransition(isoLDT);    localDateTime=localDateTime.plusSeconds(trans.getDuration().getSeconds());    offset=trans.getOffsetAfter();  } else {    if (preferredOffset != null && validOffsets.contains(preferredOffset)) {      offset=preferredOffset;    } else {      offset=validOffsets.get(0);    }  }  Objects.requireNonNull(offset,"offset");  return new ChronoZonedDateTimeImpl<>(localDateTime,offset,zone);}  }
class C{  public static <S extends HasIconClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    IconClickEvent event=new IconClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static void store(ProcessingEnvironment processingEnv,AnnotatedTypeFactory atypeFactory,ClassTree tree){  Symbol.ClassSymbol csym=(Symbol.ClassSymbol)TreeUtils.elementFromDeclaration(tree);  Types types=processingEnv.getTypeUtils();  storeTypeParameters(processingEnv,types,atypeFactory,tree.getTypeParameters(),csym);  for (  Tree mem : tree.getMembers()) {    if (mem.getKind() == Tree.Kind.METHOD) {      storeMethod(processingEnv,types,atypeFactory,(MethodTree)mem);    } else     if (mem.getKind() == Tree.Kind.VARIABLE) {      storeVariable(processingEnv,types,atypeFactory,(VariableTree)mem);    } else {    }  }}  }
class C{  public String toJson(){  build();  try {    return JsonSerializer.toString(this);  } catch (  IOException e) {    throw new IndexException(e,"Unformateable JSON search: {}",e.getMessage());  }}  }
class C{  public static double nextWeibull(double alpha,double beta,MersenneTwisterFast randomGenerator){  return Math.pow(beta * (-Math.log(1.0 - randomGenerator.nextDouble())),1.0 / alpha);}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public static <K,V>EntryWeigher<K,V> entrySingleton(){  return (EntryWeigher<K,V>)SingletonEntryWeigher.INSTANCE;}  }
class C{  private void abortWithError(@NonNull String msg,@NonNull Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  public void testGenerateCertificate() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate[] certs=new Certificate[3];  for (int i=0; i < certFs.length; i++) {    certs[i]=certFs[i].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  }  assertEquals(certs[0],certs[1]);  assertEquals(certs[0],certs[2]);}  }
class C{  public boolean isModify(){  return modify;}  }
class C{  @NotNull public PsiQuery first(){  return (myPsiElements.length > 0) ? new PsiQuery(myPsiElements[0]) : EMPTY;}  }
class C{  public boolean isEnabled(){  return queryCacheConfig.getQueryCacheEnabled();}  }
class C{  public static byte[] serialize(NinePatchChunk chunk){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(baos);    oos.writeObject(chunk);  } catch (  IOException e) {    Bridge.getLog().error(null,"Failed to serialize NinePatchChunk.",e,null);    return null;  } finally {    if (oos != null) {      try {        oos.close();      } catch (      IOException e) {      }    }  }  byte[] array=baos.toByteArray();  sChunkCache.put(array,new SoftReference<NinePatchChunk>(chunk));  return array;}  }
class C{  public String name(){  return name;}  }
class C{  public static MappedSamBamSequenceDataSource fromInputFiles(List<File> files,boolean paired,boolean flattenPaired,SamFilter filter){  return new MappedSamBamSequenceDataSource(new FileStreamIterator(files,null),paired,flattenPaired,filter);}  }
class C{  public void loadLatestEntriesInCategory(){  loadCategories();  if (categories.contains(category)) {    entriesForPage=(searchString != null ? retrieveSearchResultsInCategory() : retrieveLatestEntriesInCategory());  } else {    category=null;  }}  }
class C{  public Collection<Map<Integer,int[]>> calculateSplits(Map<Integer,int[]> allSelectedExamples,int bestAttribute){  byte[] attributeColumn=columnTable.getNominalAttributeColumn(bestAttribute);  Map<Byte,Map<Integer,int[]>> results=new HashMap<>();  Map<Byte,List<Integer>> valueLists;  byte value;  for (  int i : allSelectedExamples.keySet()) {    valueLists=new HashMap<>();    int[] selectedExamples=allSelectedExamples.get(i);    for (    int j : selectedExamples) {      value=attributeColumn[j];      if (valueLists.containsKey(value)) {        valueLists.get(value).add(j);      } else {        List<Integer> temp=new ArrayList<>();        temp.add(j);        valueLists.put(value,temp);      }    }    for (    Byte key : valueLists.keySet()) {      List<Integer> list=valueLists.get(key);      int[] temp=ArrayUtils.toPrimitive(list.toArray(new Integer[list.size()]));      if (results.containsKey(key)) {        results.get(key).put(i,temp);      } else {        Map<Integer,int[]> toadd=new HashMap<>();        toadd.put(i,temp);        results.put(key,toadd);      }    }  }  return results.values();}  }
class C{  public boolean isDefined(String name){  return getType(name) != null;}  }
class C{  public boolean hasComboActive(){  return hasExtension(GwoComboActive.class);}  }
class C{  public final void addDataScheme(String scheme){  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();  if (!mDataSchemes.contains(scheme)) {    mDataSchemes.add(scheme.intern());  }}  }
class C{  public ReferenceCache(final int size){  this.size=size;  cache=new LRUCache();}  }
class C{  public ThaiTokenizer(AttributeFactory factory){  super(factory,(BreakIterator)sentenceProto.clone());  if (!DBBI_AVAILABLE) {    throw new UnsupportedOperationException("This JRE does not have support for Thai segmentation");  }  wordBreaker=(BreakIterator)proto.clone();}  }
class C{  void removeInvalidMaskDataFromVolumes(UnManagedExportMask unManagedMask,DbClient dbClient){  Set<UnManagedVolume> unManagedVolumesToUpdate=new HashSet<>();  String unManagedMaskId=unManagedMask.getId().toString();  StringSet knownInitiatorUris=unManagedMask.getKnownInitiatorUris();  StringSet knownInitiatorNetworkIds=unManagedMask.getKnownInitiatorNetworkIds();  StringSet volumeUris=unManagedMask.getUnmanagedVolumeUris();  for (  String volumeUriString : volumeUris) {    URI volumeUri=URI.create(volumeUriString);    UnManagedVolume volume=dbClient.queryObject(UnManagedVolume.class,volumeUri);    if (volume != null) {      StringSet unManagedMasks=volume.getUnmanagedExportMasks();      unManagedMasks.remove(unManagedMaskId);      volume.getInitiatorUris().removeAll(knownInitiatorUris);      volume.getInitiatorNetworkIds().removeAll(knownInitiatorNetworkIds);      if (unManagedMasks.isEmpty()) {        volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),FALSE);        volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);      }      unManagedVolumesToUpdate.add(volume);    }  }  dbClient.updateObject(unManagedVolumesToUpdate);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  char offset=0;  SoftwareAttribute decoded=new SoftwareAttribute();  char length=(char)softwareValue.length();  decoded.decodeAttributeBody(softwareValue.getBytes(),offset,length);  assertEquals("decode failed",softwareAttribute,decoded);}  }
class C{  @Override public boolean severeEnabled(){  return isEnabled(Level.FATAL);}  }
class C{  public static Uri downloadImage(Context context,Uri url){  if (!isExternalStorageWritable()) {    Log.d(TAG,"external storage is not writable");    return null;  }  try (InputStream inputStream=(InputStream)new URL(url.toString()).getContent()){    return DownloadUtils.createDirectoryAndSaveFile(context,inputStream,url.toString());  } catch (  Exception e) {    Log.e(TAG,"Exception while downloading. Returning null." + e.toString());    return null;  }}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  int[] newData=new int[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  public String amplitudeTipText(){  return "The amplitude of the mexican hat.";}  }
class C{  @Override public void writeSortIndex(List<Integer> sortIndexList) throws IOException {  columnSortInfo.setSort_index(sortIndexList);}  }
class C{  @Override public String multiResultsetRanking(int comparisonColumn) throws Exception {  int[][] nonSigWin=new int[getNumResultsets()][getNumResultsets()];  int[][] win=multiResultsetWins(comparisonColumn,nonSigWin);  initResultMatrix();  m_ResultMatrix.setRanking(win);  return m_ResultMatrix.toStringRanking();}  }
class C{  @Override public void onReceive(Context context,Intent intent){  try {    String uploadedRemotePath=intent.getStringExtra(FileDownloader.EXTRA_REMOTE_PATH);    String accountName=intent.getStringExtra(FileUploader.ACCOUNT_NAME);    boolean sameAccount=getAccount() != null && accountName.equals(getAccount().name);    OCFile currentDir=getCurrentDir();    boolean isDescendant=(currentDir != null) && (uploadedRemotePath != null) && (uploadedRemotePath.startsWith(currentDir.getRemotePath()));    if (sameAccount && isDescendant) {      String linkedToRemotePath=intent.getStringExtra(FileDownloader.EXTRA_LINKED_TO_PATH);      if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {        refreshListOfFilesFragment();      }    }    boolean uploadWasFine=intent.getBooleanExtra(FileUploader.EXTRA_UPLOAD_RESULT,false);    boolean renamedInUpload=getFile().getRemotePath().equals(intent.getStringExtra(FileUploader.EXTRA_OLD_REMOTE_PATH));    boolean sameFile=getFile().getRemotePath().equals(uploadedRemotePath) || renamedInUpload;    FileFragment details=getSecondFragment();    boolean detailFragmentIsShown=(details != null && details instanceof FileDetailFragment);    if (sameAccount && sameFile && detailFragmentIsShown) {      if (uploadWasFine) {        setFile(getStorageManager().getFileByPath(uploadedRemotePath));      }      if (renamedInUpload) {        String newName=(new File(uploadedRemotePath)).getName();        Toast msg=Toast.makeText(context,String.format(getString(R.string.filedetails_renamed_in_upload_msg),newName),Toast.LENGTH_LONG);        msg.show();      }      if (uploadWasFine || getFile().fileExists()) {        ((FileDetailFragment)details).updateFileDetails(false,true);      } else {        cleanSecondFragment();      }      if (uploadWasFine) {        OCFile ocFile=getFile();        if (PreviewImageFragment.canBePreviewed(ocFile))         startImagePreview(getFile()); else         if (PreviewTextFragment.canBePreviewed(ocFile))         startTextPreview(ocFile);      }    }    mProgressBar.setIndeterminate(false);  }  finally {    if (intent != null) {      removeStickyBroadcast(intent);    }  }}  }
class C{  default <T extends Entity>Optional<T> latestAssociatedEntity(Class<T> klass,EntityIndex<T,UUID> keyAttribute,EntityIndex<T,HybridTimestamp> timestampAttribute,Query<EntityHandle<T>>... additionalQueries){  Query<EntityHandle<T>> query=equal(keyAttribute,getId());  for (  Query<EntityHandle<T>> q : additionalQueries) {    query=and(query,q);  }  try (ResultSet<EntityHandle<T>> resultSet=getRepository().query(klass,query,queryOptions(orderBy(descending(timestampAttribute)),applyThresholds(threshold(EngineThresholds.INDEX_ORDERING_SELECTIVITY,0.5))))){    Iterator<EntityHandle<T>> iterator=resultSet.iterator();    if (!iterator.hasNext()) {      return Optional.empty();    } else {      return Optional.of(iterator.next().get());    }  } }  }
class C{  public void testRemainingCapacity(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.remainingCapacity());    assertEquals(SIZE - i,q.size());    q.remove();  }  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i,q.remainingCapacity());    assertEquals(i,q.size());    q.add(new Integer(i));  }}  }
class C{  public boolean hasData(final BigInteger offset,final int size){  return debugger.getProcessManager().getMemory().hasData(offset.longValue(),size);}  }
class C{  public boolean Arg0IsNodesetExpr(){  return (null == m_arg0) ? true : m_arg0.isNodesetExpr();}  }
class C{  @Nullable public E addx(E e){  ConcurrentMap<E,E> m=(ConcurrentMap<E,E>)map;  return m.putIfAbsent(e,e);}  }
class C{  public static int hashFloatArray(int seed,float... floatArray){  return hash(seed,floatArray);}  }
class C{  static void cleanup() throws IOException {  if (file != null)   file.delete();  if (link2file != null)   Files.deleteIfExists(link2file.toPath());  if (link2link2file != null)   Files.deleteIfExists(link2link2file.toPath());  if (dir != null)   dir.delete();  if (link2dir != null)   Files.deleteIfExists(link2dir.toPath());  if (link2link2dir != null)   Files.deleteIfExists(link2link2dir.toPath());  if (link2nobody != null)   Files.deleteIfExists(link2nobody.toPath());  if (link2link2nobody != null)   Files.deleteIfExists(link2link2nobody.toPath());}  }
class C{  protected void validateStartState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.673 -0500",hash_original_method="AC4AA224AE1E479BEEF0C5D37CBA15A0",hash_generated_method="3DCF4D36A666BA27F229587E9732A3A0") public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.842 -0500",hash_original_method="EB590363B29E0495CDDD74FB1BC0A86C",hash_generated_method="27FD248C294DCBE13C71C3108FF8B5D5") public static double nextDouble(double value,boolean increment){  return increment ? nextDouble(value) : previousDouble(value);}  }
class C{  public static void deleteLocalFunctionNodeComment(final SQLProvider provider,final INaviFunctionNode functionNode,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02477: provider argument can not be null");  Preconditions.checkNotNull(functionNode,"IE02478: functionNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02479: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02480: userId argument can not be null");  final String function=" { ? = call delete_function_node_comment(?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,functionNode.getFunction().getModule().getConfiguration().getId());      deleteCommentStatement.setInt(3,functionNode.getId());      deleteCommentStatement.setInt(4,commentId);      deleteCommentStatement.setInt(5,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public static URL[] find(String props){  List<URL> result;  Enumeration<URL> urls;  String propsName;  File propsFile;  URL url;  if (DEBUG)   System.out.println("start<PropsUtils.find: " + props + ">");  result=new ArrayList<URL>();  propsName=new File(props).getName();  if (DEBUG)   System.out.println("- propsName: " + propsName);  try {    if (DEBUG)     System.out.println("1. system resources: ");    urls=ClassLoader.getSystemResources(props);    while (urls.hasMoreElements()) {      url=urls.nextElement();      if (DEBUG)       System.out.println("- " + url);      result.add(url);    }  } catch (  Exception e) {    System.err.println("Failed to obtain systems resources (URLs) for: " + props);  }  if (DEBUG)   System.out.println("2. home dir: " + System.getProperty("user.home"));  propsFile=new File(System.getProperty("user.home") + File.separator + propsName);  if (DEBUG) {    System.out.println("- propsFile: " + propsFile);    System.out.println("- propsFile exists: " + propsFile.exists());  }  if (propsFile.exists()) {    try {      result.add(propsFile.toURL());    } catch (    Exception e) {      System.err.println("Failed to turn '" + propsFile + "' into URL:");      e.printStackTrace();    }  }  if (DEBUG)   System.out.println("3. meka home dir: " + Project.getHome());  propsFile=new File(Project.getHome() + File.separator + propsName);  if (DEBUG) {    System.out.println("- propsFile: " + propsFile);    System.out.println("- propsFile exists: " + propsFile.exists());  }  if (propsFile.exists()) {    try {      result.add(propsFile.toURL());    } catch (    Exception e) {      System.err.println("Failed to turn '" + propsFile + "' into URL:");      e.printStackTrace();    }  }  if (DEBUG)   System.out.println("4. current dir: " + System.getProperty("user.dir"));  propsFile=new File(System.getProperty("user.dir") + File.separator + propsName);  if (DEBUG) {    System.out.println("- propsFile: " + propsFile);    System.out.println("- propsFile exists: " + propsFile.exists());  }  if (propsFile.exists()) {    try {      result.add(propsFile.toURL());    } catch (    Exception e) {      System.err.println("Failed to turn '" + propsFile + "' into URL:");      e.printStackTrace();    }  }  if (DEBUG)   System.out.println("end<PropsUtils.find: " + props + ">");  return result.toArray(new URL[result.size()]);}  }
class C{  private static void assertFilledWithZeros(final byte[] byteArray,final int startOffset,final int endOffset){  for (int i=startOffset; i < endOffset; ++i) {    assertEquals(0,byteArray[i]);  }}  }
class C{  protected boolean isDeclared(ChooseConfig cc){  return !isNull(cc);}  }
class C{  public GenericRecord convert(HCatRecord hcatRecord,Schema avroSchema) throws IOException {  JsonNode json=serializer.getRecordAsJson(hcatRecord);  GenericRecord avroRecord=convertRecord(json,avroSchema);  return avroRecord;}  }
class C{  public void doNextOp(DhcpStateMachine machine){  InetAddress clientRequest=mRequestedIp == null ? mClientIp : mRequestedIp;  Log.v(TAG,"requested IP is " + mRequestedIp + " and client IP is "+ mClientIp);  machine.onRequestReceived(mBroadcast,mTransId,mClientMac,clientRequest,mRequestedParams,mHostName);}  }
class C{  public static void main(String[] args){  try {    int serverPort=Integer.parseInt(System.getProperty("net.floodlightcontroller.packetstreamer.port","9090"));    TTransport transport;    transport=new TFramedTransport(new TSocket("localhost",serverPort));    transport.open();    TProtocol protocol=new TBinaryProtocol(transport);    PacketStreamer.Client client=new PacketStreamer.Client(protocol);    sendPackets(client,(short)2,OFMessageType.PACKET_IN,true);    log.debug("Terminate session1");    client.terminateSession("session1");    transport.close();  } catch (  TException x) {    x.printStackTrace();  }}  }
class C{  public void removeEventListener(String type,EventListener listener,boolean useCapture){  removeEventListenerNS(null,type,listener,useCapture);}  }
class C{  @Override public <T extends Comparable<?>>GraphQuery interval(final String key,final T startValue,final T endValue){  return has(key,BigdataPredicate.GTE,startValue).has(key,BigdataPredicate.LT,endValue);}  }
class C{  public SerializedObject(Object toStore,boolean compress) throws Exception {  ByteArrayOutputStream ostream=new ByteArrayOutputStream();  OutputStream os=ostream;  ObjectOutputStream p;  if (!compress)   p=new ObjectOutputStream(new BufferedOutputStream(os)); else   p=new ObjectOutputStream(new BufferedOutputStream(new GZIPOutputStream(os)));  p.writeObject(toStore);  p.flush();  p.close();  m_storedObjectArray=ostream.toByteArray();  m_isCompressed=compress;}  }
class C{  @RequestProcessing(value="/api/v1/stories/search",method=HTTPRequestMethod.GET) public void searchArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  getRecentArticles(context,request,response);}  }
class C{  public List<VPlexMigrationInfo> migrateVirtualVolume(String migrationName,String virtualVolumeName,List<VolumeInfo> nativeVolumeInfoList,boolean isRemote,boolean useDeviceMigration,boolean discoveryRequired,boolean startNow,String transferSize) throws VPlexApiException {  s_logger.info("Request for virtual volume migration on VPlex at {}",_baseURI);  return _migrationMgr.migrateVirtualVolume(migrationName,virtualVolumeName,nativeVolumeInfoList,isRemote,useDeviceMigration,discoveryRequired,startNow,transferSize);}  }
class C{  @Override public void createSingleVolumeSnapshot(StorageSystem storage,URI snapshot,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("Create Single Volume Snapshot Started");  boolean isSnapshotCreated=false, isDummyLunPathAdded=false;  HDSApiClient hdsApiClient=null;  HDSHost pairMgmtServer=null;  try {    hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storage),storage.getSmisUserName(),storage.getSmisPassword());    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);    log.info("createSingleVolumeSnapshot operation START");    Volume volume=dbClient.queryObject(Volume.class,snapshotObj.getParent());    pairMgmtServer=hdsApiClient.getSnapshotGroupPairManagementServer(storage.getSerialNumber());    if (pairMgmtServer == null) {      log.error("Unable to find snapshot group information/pair management server for Thin Image");      throw HDSException.exceptions.snapshotGroupNotAvailable(storage.getNativeGuid());    }    String systemObjectId=HDSUtils.getSystemObjectID(storage);    log.debug("StorageSystem Object Id :{}",systemObjectId);    List<Pool> thinImagePoolList=hdsApiClient.getThinImagePoolList(systemObjectId);    if (thinImagePoolList == null || thinImagePoolList.isEmpty()) {      log.error("ThinImage Pool is not available on Storage System :{}",storage.getNativeGuid());      throw HDSException.exceptions.thinImagePoolNotAvailable(storage.getNativeGuid());    }    Pool selectedThinImagePool=selectThinImagePoolForPlacement(thinImagePoolList,snapshotObj);    if (selectedThinImagePool == null) {      log.error("No ThinImage Pool is having enough free capcity to create snapshot on storage system :{}",storage.getNativeGuid());      throw HDSException.exceptions.notEnoughFreeCapacityOnthinImagePool(storage.getNativeGuid());    }    hdsProtectionOperations.createSecondaryVolumeForSnapshot(storage,volume,snapshotObj);    isSnapshotCreated=true;    snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);    hdsProtectionOperations.addDummyLunPath(hdsApiClient,snapshotObj);    isDummyLunPathAdded=true;    String snapShotGrpId=getViPRSnapshotGroup(pairMgmtServer,storage.getSerialNumber()).getObjectID();    hdsApiClient.createThinImagePair(snapShotGrpId,pairMgmtServer.getObjectID(),volume.getNativeId(),snapshotObj.getNativeId(),selectedThinImagePool.getPoolID(),storage.getModel());    taskCompleter.ready(dbClient);  } catch (  Exception e) {    try {      rollbackMethodForCreateSnapshot(isSnapshotCreated,isDummyLunPathAdded,hdsApiClient,storage,snapshot);    } catch (    Exception e1) {      log.error("Exception occured while roll back snap creation",e1);    }    String errorMsg=String.format(CREATE_ERROR_MSG_FORMAT,snapshot);    log.error(errorMsg,e);    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("createSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(dbClient,serviceError);  }  log.info("Create Single Volume Snapshot Completed");}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static Date parseDate(String d) throws ParseException {  return parseDate(d,DEFAULT_DATE_FORMATS);}  }
class C{  public noframes addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void call(String method) throws InvocationTargetException {  call(method,new Class[0]);}  }
class C{  public TPrimitiveHash(int initialCapacity,float loadFactor){  super();  initialCapacity=Math.max(1,initialCapacity);  _loadFactor=loadFactor;  setUp(HashFunctions.fastCeil(initialCapacity / loadFactor));}  }
class C{  public PipelineEnvelopeJson exportPipeline(String pipelineName,String rev,Boolean attachment,Boolean includeLibraryDefinitions) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling getPipelineInfo");  }  String path="/v1/pipeline/{pipelineName}/export".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","attachment",attachment));  queryParams.addAll(apiClient.parameterToPairs("","includeLibraryDefinitions",includeLibraryDefinitions));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineEnvelopeJson>(){  };  return apiClient.invokeAPI(path,"GET",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public static void main(String[] args){  (new Wm()).run(args);}  }
class C{  public MutablePair(){  super();}  }
class C{  public Boolean isWSPausableSubscriptionManagerInterfaceSupport(){  return wsPausableSubscriptionManagerInterfaceSupport;}  }
class C{  public void testRunBluetooth(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if ((mBluetoothAdapter != null) && (!mBluetoothAdapter.isEnabled())) {    mBluetoothAdapter.getName();  }}  }
class C{  protected final void sendMessageAtFrontOfQueue(int what,Object obj){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(obtainMessage(what,obj));}  }
class C{  protected String decode(String urlString){  try {    Class clazz=URLDecoder.class;    Method method=clazz.getDeclaredMethod("decode",new Class[]{String.class,String.class});    if (urlString.indexOf('+') >= 0) {      int len=urlString.length();      StringBuffer buf=new StringBuffer(len);      for (int i=0; i < len; i++) {        char c=urlString.charAt(i);        if (c == '+')         buf.append("%2B"); else         buf.append(c);      }      urlString=buf.toString();    }    Object result=method.invoke(null,new Object[]{urlString,"UTF-8"});    if (result != null)     return (String)result;  } catch (  Exception e) {  }  boolean replaced=false;  byte[] encodedBytes=urlString.getBytes();  int encodedLength=encodedBytes.length;  byte[] decodedBytes=new byte[encodedLength];  int decodedLength=0;  for (int i=0; i < encodedLength; i++) {    byte b=encodedBytes[i];    if (b == '%') {      if (i + 2 >= encodedLength)       throw new IllegalArgumentException("Malformed URL (\"" + urlString + "\"): % must be followed by 2 digits.");      byte enc1=encodedBytes[++i];      byte enc2=encodedBytes[++i];      b=(byte)((hexToByte(enc1) << 4) + hexToByte(enc2));      replaced=true;    }    decodedBytes[decodedLength++]=b;  }  if (!replaced)   return urlString;  try {    return new String(decodedBytes,0,decodedLength,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return new String(decodedBytes,0,decodedLength);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BINDING_PATTERN__PROPERTIES:    return properties != null && !properties.isEmpty();case N4JSPackage.BINDING_PATTERN__ELEMENTS:  return elements != null && !elements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public DatasetContainer(DataSet dataset,boolean defaultRanges){  this(dataset,defaultRanges,0);}  }
class C{  public final void replaceAll(int from,int to){  final int width=this.width;  final int height=this.height;  final int length=this.length;  int[][] fieldx=null;  int[] fieldxy=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        if (fieldxy[z] == from)         fieldxy[z]=to;      }    }  }}  }
class C{  void cancel(){  cancel(false);}  }
class C{  protected void updateMenu(){  JMenuItem menuitem;  if (m_Menu == null)   return;  for (  AbstractClassifyTabMenuItem menuitemplugin : m_AdditionalMenuItems.keySet()) {    menuitem=m_AdditionalMenuItems.get(menuitemplugin);    menuitemplugin.update(this,menuitem);  }}  }
class C{  public void addAnnotation(int lineIndex,int pointIdx,String annotation,float angle){  lineIndex=getLastIndex(lineIndex);  double x=m_dataset.getXValue(lineIndex,pointIdx);  double y=m_dataset.getYValue(lineIndex,pointIdx);  addAnnotation(x,y,annotation,angle);}  }
class C{  public void close(Handler<Void> closeHandler){  delegate.close(closeHandler);}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String processFloatToken(String token){  String result=token.replaceAll(groupSeparator,"");  if (!decimalSeparator.equals("\\."))   result=result.replaceAll(decimalSeparator,".");  boolean isNegative=false;  int preLen=negativePrefix.length();  if ((preLen > 0) && result.startsWith(negativePrefix)) {    isNegative=true;    result=result.substring(preLen);  }  int sufLen=negativeSuffix.length();  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {    isNegative=true;    result=result.substring(result.length() - sufLen,result.length());  }  if (result.equals(nanString))   result="NaN";  if (result.equals(infinityString))   result="Infinity";  if (isNegative)   result="-" + result;  Matcher m=NON_ASCII_DIGIT.matcher(result);  if (m.find()) {    StringBuilder inASCII=new StringBuilder();    for (int i=0; i < result.length(); i++) {      char nextChar=result.charAt(i);      if (Character.isDigit(nextChar)) {        int d=Character.digit(nextChar,10);        if (d != -1)         inASCII.append(d); else         inASCII.append(nextChar);      } else {        inASCII.append(nextChar);      }    }    result=inASCII.toString();  }  return result;}  }
class C{  public NetworkRestRep updateNetworkEndpoints(URI id,NetworkEndpointParam param){  WebResource rRoot=createRequest(INTERNAL_TRANSPORTZONE_ROOT + id + ENDPOINTS);  NetworkRestRep resp=addSignature(rRoot).post(NetworkRestRep.class,param);  return resp;}  }
class C{  public String toString(ELContext ctx) throws ELException {  return this.literal;}  }
class C{  private void writeSimpleNode(Tree tree,NodeRef node,XMLWriter writer){  writer.writeOpenTag(SimpleNodeParser.NODE,new Attribute[]{new Attribute.Default<Double>(SimpleNodeParser.HEIGHT,tree.getNodeHeight(node))});  if (tree.getChildCount(node) == 0) {    writer.writeIDref(TaxonParser.TAXON,tree.getNodeTaxon(node).getId());  }  for (int i=0; i < tree.getChildCount(node); i++) {    writeSimpleNode(tree,tree.getChild(node,i),writer);  }  writer.writeCloseTag(SimpleNodeParser.NODE);}  }
class C{  public double approximateProgressiveKnnDistance(int k){  return progressiveApproximation.getApproximatedKnnDistance(k);}  }
class C{  public FindMultiImages(java.awt.Frame parent,boolean modal,EditableResources res){  super(parent,modal);  this.res=res;  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  pack();  setLocationByPlatform(true);  setVisible(true);}  }
class C{  public static RegressionDataSet loadR(File file) throws FileNotFoundException, IOException {  return loadR(file,0.5);}  }
class C{  public Date subAssign(final int days){  serialNumber-=days;  checkSerialNumber();  delegatedObservable.notifyObservers();  return this;}  }
class C{  public XmlChecker(){  m_domParser=null;  m_onlyCheckValidity=true;  m_infoMsg=null;  m_valid=true;}  }
class C{  public static Table<URI,String,List<Volume>> groupVPlexVolumesByRG(List<Volume> vplexVolumes,List<Volume> volumesNotInRG,List<Volume> volumesInRG,DbClient dbClient){  Table<URI,String,List<Volume>> groupVolumes=HashBasedTable.create();  for (  Volume volume : vplexVolumes) {    Volume backedVol=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);    if (backedVol != null) {      URI backStorage=backedVol.getStorageController();      String replicaGroup=backedVol.getReplicationGroupInstance();      if (NullColumnValueGetter.isNotNullValue(replicaGroup)) {        List<Volume> volumeList=groupVolumes.get(backStorage,replicaGroup);        if (volumeList == null) {          volumeList=new ArrayList<Volume>();          groupVolumes.put(backStorage,replicaGroup,volumeList);        }        volumeList.add(volume);        if (volumesInRG != null) {          volumesInRG.add(volume);        }      } else {        if (volumesNotInRG != null) {          volumesNotInRG.add(volume);        }      }    }  }  return groupVolumes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:46.251 -0500",hash_original_method="D115BE155D407C71B3079D92DD3ABF36",hash_generated_method="E083AE564F1A70F4C8B241C8A4873920") public void clearInterceptors(){  clearRequestInterceptors();  clearResponseInterceptors();}  }
class C{  public ByteOrder order(){  return ByteOrder.nativeOrder();}  }
class C{  public boolean cascadeDeletes(Class<?> targetClass,String fieldName){  CascadeType[] cascadeTypes=getEntityBinding(targetClass).relationshipToCascadeTypes.getOrDefault(fieldName,new CascadeType[0]);  for (  CascadeType cascadeType : cascadeTypes) {    if (cascadeType == CascadeType.ALL || cascadeType == CascadeType.REMOVE) {      return true;    }  }  return false;}  }
class C{  public void showScrollHint(int direction){  float fraction=(direction == DragController.SCROLL_LEFT) ^ mIsRtl ? -SCROLL_HINT_FRACTION : SCROLL_HINT_FRACTION;  int hint=(int)(fraction * getWidth());  int scroll=getScrollForPage(getNextPage()) + hint;  int delta=scroll - getScrollX();  if (delta != 0) {    mScroller.setInterpolator(new DecelerateInterpolator());    mScroller.startScroll(getScrollX(),0,delta,0,Folder.SCROLL_HINT_DURATION);    invalidate();  }}  }
class C{  public void workspaceCleared(){  desktop.removeAll();  desktop.repaint();  frame.setTitle("Simbrain");  updateTimeLabel();}  }
class C{  @Override public int size(){  return size;}  }
class C{  public JSONObject perform(String action,JSONObject params) throws IOException, ConduitAPIException {  CloseableHttpClient client=HttpClientBuilder.create().build();  HttpUriRequest request=createRequest(action,params);  HttpResponse response;  try {    response=client.execute(request);  } catch (  ClientProtocolException e) {    throw new ConduitAPIException(e.getMessage());  }  InputStream responseBody=response.getEntity().getContent();  if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {    throw new ConduitAPIException(responseBody.toString(),response.getStatusLine().getStatusCode());  }  JsonSlurper jsonParser=new JsonSlurper();  return (JSONObject)jsonParser.parse(responseBody);}  }
class C{  public static boolean deleteDir(File file,boolean recurse){  return doDeleteDir(file,recurse);}  }
class C{  public double updateVmsProcessing(double currentTime){  double smallerTime=Double.MAX_VALUE;  for (  Vm vm : getVmList()) {    double time=vm.updateVmProcessing(currentTime,getVmScheduler().getAllocatedMipsForVm(vm));    if (time > 0.0 && time < smallerTime) {      smallerTime=time;    }  }  return smallerTime;}  }
class C{  public void tabLoadFinished(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.loadingFinished();}  }
class C{  public void deleteAllMusicFolderPaths(){  getDatabase().delete(MUSIC_FOLDERS_TABLE,null,null);}  }
class C{  public CannotProceedException(String explanation){  super(explanation);}  }
class C{  public ModelReference createModelReference(){  ModelReferenceImpl modelReference=new ModelReferenceImpl();  return modelReference;}  }
class C{  private void popStack(){  stack[stackSize - 1]=0;  stackSize--;  pathNames[stackSize]=null;  pathIndices[stackSize - 1]++;}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  public Map<String,Object> processInputs(Map<String,Object> inputs,Draft3PortProcessorCallback portProcessor) throws Draft3PortProcessorException {  return processValues(inputs,job.getApp().getInputs(),Draft3InputPort.class,portProcessor);}  }
class C{  public boolean isCurrent(char first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  public Builder normalize(final boolean normalize){  this.normalize=normalize;  return this;}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  public void testUuidConvertions() throws Exception {  Map<String,byte[]> map=new LinkedHashMap<>();  map.put("2ec84557-f7c4-4a2e-aea8-251eb13acff3",new byte[]{46,-56,69,87,-9,-60,74,46,-82,-88,37,30,-79,58,-49,-13});  map.put("4e17b7b5-79e7-4db5-ac45-a644ead95b9e",new byte[]{78,23,-73,-75,121,-25,77,-75,-84,69,-90,68,-22,-39,91,-98});  map.put("412daadb-e9e6-443b-8b87-8d7895fc2e53",new byte[]{65,45,-86,-37,-23,-26,68,59,-117,-121,-115,120,-107,-4,46,83});  map.put("e71aabf4-4aad-4280-b4e9-3c310be0cb88",new byte[]{-25,26,-85,-12,74,-83,66,-128,-76,-23,60,49,11,-32,-53,-120});  map.put("d4454cda-a81f-490f-9424-9bdfcc9cf610",new byte[]{-44,69,76,-38,-88,31,73,15,-108,36,-101,-33,-52,-100,-10,16});  map.put("3a584450-5e85-4b69-9f9d-043d89fef23b",new byte[]{58,88,68,80,94,-123,75,105,-97,-99,4,61,-119,-2,-14,59});  map.put("6c8baaec-f173-4a60-b566-240a87d7f81d",new byte[]{108,-117,-86,-20,-15,115,74,96,-75,102,36,10,-121,-41,-8,29});  map.put("d99c7102-79f7-4fb4-a665-d331cf285c20",new byte[]{-39,-100,113,2,121,-9,79,-76,-90,101,-45,49,-49,40,92,32});  map.put("007d56c7-5c8b-4279-a700-7f3f95946dde",new byte[]{0,125,86,-57,92,-117,66,121,-89,0,127,63,-107,-108,109,-34});  map.put("15627963-d8f9-4423-bedc-f6f89f7d3433",new byte[]{21,98,121,99,-40,-7,68,35,-66,-36,-10,-8,-97,125,52,51});  for (  Map.Entry<String,byte[]> e : map.entrySet()) {    UUID uuid=UUID.fromString(e.getKey());    UUID uuidFromBytes=GridClientByteUtils.bytesToUuid(e.getValue(),0);    assertEquals(uuid,uuidFromBytes);    assertEquals(e.getKey(),uuid.toString());    assertEquals(e.getKey(),uuidFromBytes.toString());    byte[] bytes=new byte[16];    GridClientByteUtils.uuidToBytes(uuid,bytes,0);    assertTrue(e.getKey(),Arrays.equals(e.getValue(),bytes));  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BegTabbedPaneUI();}  }
class C{  public void refresh() throws CouldntLoadDataException {  try {    m_database.getContent().refreshRawModules();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public DontLikeFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  public void flush() throws IOException {  _next.flush();}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public void validate(Region region){  Collection<Index> indexes=((LocalRegion)region).getIndexManager().getIndexes();  for (  Index index : indexes) {    if (region instanceof PartitionedRegion) {      validateOnPR((PartitionedRegion)region,(PartitionedIndex)index);    } else {      validate(region,index);    }  }}  }
class C{  public void replaceSelection(byte[] bytes){  int offset=table.getSmallestSelectionIndex();  int len=table.getLargestSelectionIndex() - offset + 1;  replaceBytes(offset,len,bytes);}  }
class C{  public final void compute(Vertex<CfLongId,FloatMatrixWritable,FloatWritable> vertex,final Iterable<FloatMatrixMessage> messages){  FloatMatrix mat_M=new FloatMatrix(vectorSize,vertex.getNumEdges());  FloatMatrix mat_R=new FloatMatrix(vertex.getNumEdges(),1);  int i=0;  for (  FloatMatrixMessage msg : messages) {    mat_M.putColumn(i,msg.getFactors());    mat_R.put(i,0,vertex.getEdgeValue(msg.getSenderId()).get());    i++;  }  updateValue(vertex.getValue(),mat_M,mat_R,lambda);  double rmsePartialSum=0d;  for (int j=0; j < mat_M.columns; j++) {    float prediction=vertex.getValue().dot(mat_M.getColumn(j));    double error=prediction - mat_R.get(j,0);    rmsePartialSum+=(error * error);  }  aggregate(RMSE_AGGREGATOR,new DoubleWritable(rmsePartialSum));  sendMessageToAllEdges(vertex,new FloatMatrixMessage(vertex.getId(),vertex.getValue(),0.0f));  vertex.voteToHalt();}  }
