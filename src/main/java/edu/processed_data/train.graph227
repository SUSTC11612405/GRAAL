class C{  public String payAmt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  Integer ii=(Integer)mTab.getValue("C_Invoice_ID");  if (ii == null)   return "";  int C_Invoice_ID=ii.intValue();  if (C_Invoice_ID == 0)   return "";  BigDecimal OpenAmt=(BigDecimal)mTab.getValue("OpenAmt");  BigDecimal PayAmt=(BigDecimal)mTab.getValue("PayAmt");  BigDecimal DiscountAmt=(BigDecimal)mTab.getValue("DiscountAmt");  BigDecimal DifferenceAmt=OpenAmt.subtract(PayAmt).subtract(DiscountAmt);  log.fine(" - OpenAmt=" + OpenAmt + " - PayAmt="+ PayAmt+ ", Discount="+ DiscountAmt+ ", Difference="+ DifferenceAmt);  mTab.setValue("DifferenceAmt",DifferenceAmt);  return "";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void validateWWNAlias(String alias){  if (!WWNUtility.isValidWWNAlias(alias)) {    throw APIException.badRequests.illegalWWNAlias(alias);  }}  }
class C{  public static synchronized String removeCertRequest(String certReqId){  log.trace("removeCertRequest({})",certReqId);  return forCertRequest(null,null).orElse(null);}  }
class C{  public static void main(String args[]){  int row=Integer.parseInt(args[0]);  int column=Integer.parseInt(args[1]);  int size=Integer.parseInt(args[2]);  new RandomSeedGenerator(row,column).print(size);}  }
class C{  public void insertIndexInterval(int index,int length,boolean before){  int insMinIndex=(before) ? index : index + 1;  int insMaxIndex=(insMinIndex + length) - 1;  for (int i=maxIndex; i >= insMinIndex; i--) {    setState(i + length,value.get(i));  }  boolean setInsertedValues=value.get(index);  for (int i=insMinIndex; i <= insMaxIndex; i++) {    setState(i,setInsertedValues);  }}  }
class C{  @GET @Path("status") public Response status(){  final List<ClusterNodeStatus> nodes=convert(cluster.getNodes());  final ClusterStatus status=new ClusterStatus(nodes,cluster.getStatistics());  return Response.status(Response.Status.OK).entity(status).build();}  }
class C{  public static float[] scaleBounds(float[] target,float scale,float[] src){  assert src.length == 6;  return scaleBounds(target,scale,src[0],src[1],src[2],src[3],src[4],src[5]);}  }
class C{  public Class<? extends IN4JSCore> bindIN4JSCore(){  return IN4JSEclipseCore.class;}  }
class C{  public Type3Message(){  setFlags(getDefaultFlags());  setDomain(getDefaultDomain());  setUser(getDefaultUser());  setWorkstation(getDefaultWorkstation());}  }
class C{  public void accept(Message message){  Content content=message.getContent();  if (content.getType() != currentPrompt.type()) {    return;  }  if (!currentPrompt.process(context,content)) {    if (promptIndex + 1 == prompts.size()) {      end();      return;    }    currentPrompt=prompts.get(++promptIndex);  }  SendableMessage promptMessage=currentPrompt.promptMessage(context);  if (!silent && promptMessage != null) {    forWhom.sendMessage(promptMessage);  }  context.getHistory().history.add(message);}  }
class C{  public void MainViewsExists() throws NoMatchingViewException {  dismissTheAlertDialogBox();  dumpUi(R.id.tabBrightness,R.id.tabSetting,R.id.tabSuffle,R.id.tabTime,R.id.btn1,R.id.btn2,R.id.btn3);  TestHelper.checkUiIsDisplayed(listUi);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.520 -0400",hash_original_method="83B5DD90D38611D3F0D0ED1F1E9B5BE5",hash_generated_method="05BD8B19BCDF6E165D420497223EF200") public AndFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  public void destroy(){  shutdown(port);  if (vm != null) {    try {      boolean vmEnded=false;      int waitingTrials=0;      final int maxTrials=300;      final long vmProcessEndWaitInterval=200;      int vmExitValue;      do {        try {          Thread.sleep(vmProcessEndWaitInterval);          waitingTrials++;          vmExitValue=vm.exitValue();          mesg("rmid exited on shutdown request");          vmEnded=true;        } catch (        IllegalThreadStateException illegal) {          mesg("RMID's process still not terminated after more than " + (waitingTrials * vmProcessEndWaitInterval) + " milliseconds");        }      } while (!vmEnded && (waitingTrials < maxTrials));      if (waitingTrials >= maxTrials) {        mesg("RMID's process still not terminated after more than " + (waitingTrials * vmProcessEndWaitInterval) + " milliseconds."+ "Givinp up gracefull termination...");        mesg("destroying RMID's process using Process.destroy()");        super.destroy();      }    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();      mesg("Thread interrupted while checking for termination of distant rmid vm. Giving up check.");    }catch (    Exception e) {      mesg("caught unexpected exception trying to destroy rmid: " + e.getMessage());      e.printStackTrace();    }    vm=null;  }}  }
class C{  private void updateOkButton(){  okButton.setEnabled(isSomethingToSave());}  }
class C{  public static boolean isSimpleNameFullyQualfied(String simpleClassName,String fullyQualifiedClassname){  if ((fullyQualifiedClassname.endsWith("." + simpleClassName)) || (fullyQualifiedClassname.equals(simpleClassName))) {    return true;  }  return false;}  }
class C{  public void testReadInvalidUtf8() throws Exception {  ByteString.Output rawOutput=ByteString.newOutput();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  int tag=WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED);  output.writeRawVarint32(tag);  output.writeRawVarint32(1);  output.writeRawBytes(new byte[]{(byte)0x80});  output.flush();  CodedInputStream input=rawOutput.toByteString().newCodedInput();  assertEquals(tag,input.readTag());  String text=input.readString();  assertEquals(0xfffd,text.charAt(0));}  }
class C{  public IllegalBoundaryException(String message){  super(message);}  }
class C{  @Override public String toString(){  return new StringBuffer("RawPublicKey Identity [").append(niUri).append("]").toString();}  }
class C{  public void registerCredentials(String id,UserCredential authentication) throws IllegalArgumentException {  if (id == null) {    throw new IllegalArgumentException("id must not be null!");  }  wallet.put(buildKey(id,authentication.getURL()),authentication);  if (getEntry(authentication.getURL()) != null) {    removeEntry(authentication.getURL());  }}  }
class C{  public static Status createStatus(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return statusConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public double distance(IMultiPoint imp){  if (imp.dimensionality() != dimensionality) {    throw new IllegalArgumentException("distance computation can only be performed between points with the same dimension.");  }  double sum=0;  if (imp instanceof Hyperpoint) {    Hyperpoint other=(Hyperpoint)imp;    for (int i=1; i <= dimensionality; i++) {      double d=other.values[i - 1] - values[i - 1];      sum+=d * d;    }  } else {    for (int i=1; i <= dimensionality; i++) {      double v=imp.getCoordinate(i);      sum+=(v - values[i - 1]) * (v - values[i - 1]);    }  }  return Math.sqrt(sum);}  }
class C{  public boolean crossPlane(Vector3D[] plane,Vector3D point){  Vector3D z=new Vector3D(0.0D,0.0D,0.0D);  Vector3D e0=plane[1].sub(plane[0]);  Vector3D e1=plane[2].sub(plane[0]);  Vector3D normal=e0.cross(e1).snormalize();  double D=(z.sub(normal)).dot(plane[2]);  double dist=normal.dot(point) + D;  return dist >= 0.0D;}  }
class C{  protected boolean shouldEvaluate(Element element){  return true;}  }
class C{  public static ElementList createElementList(Model model,Element[] elements){  if (elements.length > 0) {    return model.createList(elements).as(ElementList.class);  } else {    return RDF.nil.inModel(model).as(ElementList.class);  }}  }
class C{  public static <T,V extends T>T inject(Object self,Closure<V> closure){  Iterator iter=InvokerHelper.asIterator(self);  if (!iter.hasNext()) {    throw new NoSuchElementException("Cannot call inject() over an empty iterable without passing an initial value.");  }  Object initialValue=iter.next();  return (T)inject(iter,initialValue,closure);}  }
class C{  public void render(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DocumentSourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dc.isPickingMode())   return;  Vec4 a=this.s.add3(this.t).multiply3(-0.5);  Vec4 b=this.s.subtract3(this.t).multiply3(0.5);  Vec4 c=this.s.add3(this.t).multiply3(0.5);  Vec4 d=this.t.subtract3(this.s).multiply3(0.5);  GL2 gl=dc.getGL().getGL2();  OGLStackHandler ogsh=new OGLStackHandler();  ogsh.pushAttrib(gl,GL2.GL_COLOR_BUFFER_BIT | GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT| GL2.GL_TRANSFORM_BIT| GL2.GL_DEPTH_BUFFER_BIT);  try {    gl.glLineWidth(1f);    gl.glEnable(GL.GL_BLEND);    OGLUtil.applyBlending(gl,false);    gl.glEnable(GL.GL_DEPTH_TEST);    gl.glDepthFunc(GL.GL_LEQUAL);    gl.glColor4f(1f,1f,1f,0.5f);    this.drawBox(dc,a,b,c,d);    gl.glDepthFunc(GL.GL_GREATER);    gl.glColor4f(1f,0f,1f,0.4f);    this.drawBox(dc,a,b,c,d);  }  finally {    ogsh.pop(gl);  }}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length != 1) {    System.err.println("No JSON file specified!");    System.exit(1);  }  FileInputStream stream=new FileInputStream(args[0]);  @SuppressWarnings("deprecation") SymbolFactory sf=new DefaultSymbolFactory();  Parser parser=new Parser(new Scanner(stream,sf),sf);  parser.parse();  StringBuffer buffer=new StringBuffer();  parser.getResult().toString(buffer);  System.out.println(buffer.toString());}  }
class C{  public void configure(String name) throws ReplicatorException, InterruptedException {  UniversalDataSource ds=find(name);  ds.configure();}  }
class C{  public static boolean doubleIsDenormal(double d){  long exp=doubleExponent(d);  long mant=doubleMantissa(d);  return (exp == 0) && (mant != 0);}  }
class C{  private void midPoint(PointF point,WrapMotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  boolean addPrinEntry(PolicyEntry pe,PolicyParser.PrincipalEntry newPrin,int index){  PolicyParser.GrantEntry grantEntry=pe.getGrantEntry();  if (grantEntry.contains(newPrin) == true)   return false;  LinkedList<PolicyParser.PrincipalEntry> prinList=grantEntry.principals;  if (index != -1)   prinList.set(index,newPrin); else   prinList.add(newPrin);  modified=true;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:46.991 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="8188008AC9C80E87937FE73DCA905200") @Override public int describeContents(){  return 0;}  }
class C{  MAC(MacAlg macAlg,ProtocolVersion protocolVersion,SecretKey key) throws NoSuchAlgorithmException, InvalidKeyException {  super(protocolVersion);  this.macAlg=macAlg;  String algorithm;  boolean tls=(protocolVersion.v >= ProtocolVersion.TLS10.v);  if (macAlg == M_MD5) {    algorithm=tls ? "HmacMD5" : "SslMacMD5";  } else   if (macAlg == M_SHA) {    algorithm=tls ? "HmacSHA1" : "SslMacSHA1";  } else   if (macAlg == M_SHA256) {    algorithm="HmacSHA256";  } else   if (macAlg == M_SHA384) {    algorithm="HmacSHA384";  } else {    throw new RuntimeException("Unknown Mac " + macAlg);  }  mac=JsseJce.getMac(algorithm);  mac.init(key);}  }
class C{  public final double tx(double x){  final double width=this.width;  if (x >= 0 && x < width)   return x;  x=x % width;  if (x < 0)   x=x + width;  return x;}  }
class C{  @Override public void noLights(){  disableLighting();  lightCount=0;}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  public ol addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  void removeMultimediaMessaging(String sessionId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a MultimediaMessaging from the list (size=" + mMultimediaMessagingCache.size() + ")");  }  mMultimediaMessagingCache.remove(sessionId);}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  public NodeIndicesStats stats(boolean includePrevious){  return stats(includePrevious,new CommonStatsFlags().all());}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  @Override public boolean isInviteFriendsSupported(){  return true;}  }
class C{  @Override public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout,FloatingActionButton child,View directTargetChild,View target,int nestedScrollAxes){  return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL || super.onStartNestedScroll(coordinatorLayout,child,directTargetChild,target,nestedScrollAxes);}  }
class C{  public static String buildTraceIdForAlertQuery(Alert alert){  StringBuilder builder=new StringBuilder();  builder.append("SELECT \"").append(Series.BusinessTransaction.FIELD_TRACE_ID).append("\" FROM \"").append(Series.BusinessTransaction.NAME);  builder.append("\" WHERE time >= ").append(alert.getStartTimestamp()).append("ms");  if (alert.getStopTimestamp() >= 0) {    builder.append(" AND time < ").append(alert.getStopTimestamp()).append("ms");  }  for (  Entry<String,String> entry : alert.getAlertingDefinition().getTags().entrySet()) {    builder.append(" AND \"").append(entry.getKey()).append("\" = '").append(entry.getValue()).append('\'');  }  builder.append(" AND \"").append(Series.BusinessTransaction.FIELD_DURATION).append("\" >= ").append(alert.getAlertingDefinition().getThreshold());  return builder.toString();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private void scheduleInvalidatePoll(){  if (mInvalidateTaskScheduled) {    return;  }  mInvalidateTaskScheduled=true;  scheduleSelf(mInvalidateTask,POLL_FOR_RENDERED_FRAME_MS);}  }
class C{  protected Order createOrder(long id){  return new Order().setId(id);}  }
class C{  public Literal(Attribute a,int v){  attribute=a;  value=v;  numberOfLiterals++;}  }
class C{  public static void sendEvents(GridKernalContext kernalCtx,IgfsPath path,IgfsPath newPath,int type){  assert kernalCtx != null;  assert path != null;  GridEventStorageManager evts=kernalCtx.event();  ClusterNode locNode=kernalCtx.discovery().localNode();  if (evts.isRecordable(type)) {    if (newPath == null)     evts.record(new IgfsEvent(path,locNode,type)); else     evts.record(new IgfsEvent(path,newPath,locNode,type));  }}  }
class C{  protected String parseUnrecognizedSymCode(String symCode){  String scheme=symCode.substring(0,1);  return Logging.getMessage("Symbology.SymbolCodeSchemeUnrecognized",scheme,symCode);}  }
class C{  public static List<Container> createContainerList(int brokerId,int containersNumber){  ArrayList<Container> containers=new ArrayList<Container>();  for (int i=0; i < containersNumber; ++i) {    int containerType=i / (int)Math.ceil((double)containersNumber / 3.0D);    containers.add(new PowerContainer(IDs.pollId(Container.class),brokerId,(double)ConstantsExamples.CONTAINER_MIPS[containerType],ConstantsExamples.CONTAINER_PES[containerType],ConstantsExamples.CONTAINER_RAM[containerType],ConstantsExamples.CONTAINER_BW,0L,"Xen",new ContainerCloudletSchedulerDynamicWorkload(ConstantsExamples.CONTAINER_MIPS[containerType],ConstantsExamples.CONTAINER_PES[containerType]),ConstantsExamples.SCHEDULING_INTERVAL));  }  return containers;}  }
class C{  public AddEntityAction(final OdorWorldPanel worldPanel){  super("Add Entity");  this.worldPanel=worldPanel;}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  formatter.beginOnSet(writer);  UpdateClause.renderEPLAssignments(writer,assignments);}  }
class C{  public void resetLastPeeked(){  this.peekedIds.clear();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String watershedHeader=null;  String weightHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double watershedID=0;  boolean blnWatershed=false;  boolean blnWeight=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      if (!args[i].toLowerCase().contains("not specified")) {        watershedHeader=args[i];        blnWatershed=true;      }    } else     if (i == 2) {      if (!args[i].toLowerCase().contains("not specified")) {        weightHeader=args[i];        blnWeight=true;      }    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!blnWatershed && !blnWeight) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (blnWatershed && !blnWeight) {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      watershed.close();    } else     if (!blnWatershed && blnWeight) {      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();    } else {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();      watershed.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected JvmMemPoolEntryMeta createJvmMemPoolEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmMemPoolEntryMeta(mib,objectserver);}  }
class C{  private List resultSetToArrayList(final List<Object[]> resultList) throws ApplicationRuntimeException {  final List list=new ArrayList();  LabelValueBean labelValueBean=null;  BigDecimal id;  try {    for (    final Object[] objArr : resultList) {      labelValueBean=new LabelValueBean();      id=(BigDecimal)objArr[0];      labelValueBean.setId(id.intValue());      labelValueBean.setName((String)objArr[1]);      list.add(labelValueBean);    }  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching resultSetToArrayList",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching resultSetToArrayList",e);  }  return list;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof GridArrangement)) {    return false;  }  GridArrangement that=(GridArrangement)obj;  if (this.columns != that.columns) {    return false;  }  if (this.rows != that.rows) {    return false;  }  return true;}  }
class C{  public static CompletableFuture<ICluster> join(Map<String,String> metadata,Address... seedMembers){  ClusterConfig config=ClusterConfig.builder().membershipConfig(MembershipConfig.builder().seedMembers(Arrays.asList(seedMembers)).metadata(metadata).build()).build();  return join(config);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.ContentKindType buildContentKindType(@Nonnull String value,String scope){  org.smpte_ra.schemas.st2067_2_2016.ContentKindType contentKindType=new org.smpte_ra.schemas.st2067_2_2016.ContentKindType();  if (!scope.matches("^[a-zA-Z0-9._-]+") == true) {    this.imfErrorLogger.addError(new ErrorLogger.ErrorObject(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format("The ContentKind scope %s does not follow the syntax of a valid URI (a-z, A-Z, 0-9, ., _, -)",scope)));    contentKindType.setScope(scope);  } else {    contentKindType.setScope(scope);  }  contentKindType.setValue(value);  return contentKindType;}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  public void loadNested(Environment env){  loadNested(env,0);}  }
class C{  public int numLeaves(){  int num=0;  int i;  if (m_isLeaf) {    return 1;  } else {    for (i=0; i < m_sons.length; i++) {      num=num + m_sons[i].numLeaves();    }  }  return num;}  }
class C{  private static boolean isTwoDatesPresentInRequiredRange(Date segDate1,Date segDate2,long numberOfDaysAllowedToMerge){  if (segDate1 == null || segDate2 == null) {    return false;  }  Calendar cal1=Calendar.getInstance();  cal1.set(segDate1.getYear(),segDate1.getMonth(),segDate1.getDate());  Calendar cal2=Calendar.getInstance();  cal2.set(segDate2.getYear(),segDate2.getMonth(),segDate2.getDate());  long diff=cal2.getTimeInMillis() - cal1.getTimeInMillis();  if ((diff / (24 * 60 * 60* 1000)) < numberOfDaysAllowedToMerge) {    return true;  }  return false;}  }
class C{  public static CoffeeEntry createEspressoEntry(SkuDetails espressoDetails){  return new CoffeeEntry(espressoDetails,ESPRESSO_CAFFEINE_RATE,ESPRESSO_ENERGY_RATE,ESPRESSO_CANDYNESS_RATE);}  }
class C{  public long interleave(int x,int y){  if (x < 0) {    throw new IllegalArgumentException(0 + "<" + x);  }  if (y < 0) {    throw new IllegalArgumentException(0 + "<" + y);  }  long z=0;  for (int i=0; i < 32; i++) {    z|=(x & (1L << i)) << i;    z|=(y & (1L << i)) << (i + 1);  }  return z;}  }
class C{  public static Flag registerExcludeUnmappedFlag(final CFlags flags){  return flags.registerOptional(EXCLUDE_UNMAPPED_FLAG,EXCLUDE_UNMAPPED_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public IndexInvalidException(String msg){  super(msg);}  }
class C{  public boolean isDuplicated(){  if (isDefault()) {    return false;  }  List<String> list=new ArrayList<String>();  list.add(network_gateway6);  list.add(network_vip6);  for (  String network_addr : network_addrs) {    list.add(network_addr);  }  Set<String> set=new HashSet<String>(list);  if (set.size() < list.size()) {    return true;  }  return false;}  }
class C{  public static <T>Range<T> openClosed(T lowerBound,T upperBound){  return range(lowerBound,BoundType.OPEN,upperBound,BoundType.CLOSED);}  }
class C{  public void performAutoScale(){  final ZoomCommand command=new ZoomCommand("Auto Scale",xAxisList,yAxisList);  for (  Axis axis : xAxisList) {    axis.performAutoScale(true);  }  for (  Axis axis : yAxisList) {    axis.performAutoScale(true);  }  command.saveState();  operationsManager.addCommand(command);}  }
class C{  protected void fireFigureRequestRemove(){  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,getBounds());        }        ((FigureListener)listeners[i + 1]).figureRequestRemove(event);      }    }  }}  }
class C{  public <T>Object shortTypeParamList(T param){  return null;}  }
class C{  public ScriptEditor(String initialText,String fileDirectory){  this(initialText);  scriptDirectory=fileDirectory;}  }
class C{  public Photo(){}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  protected void ensureCapacity(int bufferSize){  if (nioInputBuffer != null && nioInputBuffer.capacity() > bufferSize) {    if (nioInputBuffer.capacity() - lastProcessedPosition < bufferSize) {      nioInputBuffer.limit(lastReadPosition);      nioInputBuffer.position(lastProcessedPosition);      nioInputBuffer.compact();      lastReadPosition=nioInputBuffer.position();      lastProcessedPosition=0;    }    return;  }  if (nioInputBuffer == null) {    int allocSize=conn.getReceiveBufferSize();    if (allocSize == -1) {      allocSize=conn.owner.getConduit().tcpBufferSize;    }    if (allocSize > bufferSize) {      bufferSize=allocSize;    }  }  ByteBuffer oldBuffer=nioInputBuffer;  nioInputBuffer=Buffers.acquireReceiveBuffer(bufferSize,getStats());  if (oldBuffer != null) {    oldBuffer.limit(lastReadPosition);    oldBuffer.position(lastProcessedPosition);    nioInputBuffer.put(oldBuffer);    lastReadPosition=nioInputBuffer.position();    lastProcessedPosition=0;    Buffers.releaseReceiveBuffer(oldBuffer,getStats());  }}  }
class C{  public synchronized void sendIgnorePacket(byte[] data) throws IOException {  if (data == null)   throw new IllegalArgumentException("data argument must not be null.");  if (tm == null)   throw new IllegalStateException("Cannot send SSH_MSG_IGNORE packet, you need to establish a connection first.");  PacketIgnore pi=new PacketIgnore();  pi.setData(data);  tm.sendMessage(pi.getPayload());}  }
class C{  void merge(ElementCreatorImpl other){  super.merge(other);  if (other.cardinality != null) {    this.cardinality=other.cardinality;  }  if (other.contentRequired != null) {    this.contentRequired=other.contentRequired;  }  if (other.validator != null) {    this.validator=other.validator;  }  if (other.properties != null) {    this.properties=other.properties;  }  if (other.virtualElementHolder != null) {    this.virtualElementHolder=other.virtualElementHolder;  }  if (other.flattened) {    this.flattened=true;  }  for (  AttributeInfo info : other.attributes.values()) {    addAttribute(info.key,info.action);  }  for (  ElementInfo info : other.elements.values()) {    addElement(info.key,info.action);  }  adaptations.putAll(other.adaptations);  if (other.attributeWhitelist != null) {    whitelistAttributes(other.attributeWhitelist);  }  if (other.elementWhitelist != null) {    whitelistElements(other.elementWhitelist);  }}  }
class C{  @Override public void paintBar(Graphics2D g2,XYBarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base){  Paint itemPaint=renderer.getItemPaint(row,column);  GradientPaintTransformer t=renderer.getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (renderer.isDrawBarOutline()) {    Stroke stroke=renderer.getItemOutlineStroke(row,column);    Paint paint=renderer.getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }}  }
class C{  public static boolean sendWolMagicPacket(String macAddress,String hostAddress,int port){  if (macAddress == null) {    return false;  }  byte[] macAddressBytes=new byte[6];  String[] hex=macAddress.split("(\\:|\\-)");  if (hex.length != 6) {    LogUtils.LOGD(TAG,"Send magic packet: got an invalid MAC address: " + macAddress);    return false;  }  try {    for (int i=0; i < 6; i++) {      macAddressBytes[i]=(byte)Integer.parseInt(hex[i],16);    }  } catch (  NumberFormatException e) {    LogUtils.LOGD(TAG,"Send magic packet: got an invalid MAC address: " + macAddress);    return false;  }  byte[] bytes=new byte[6 + 16 * macAddressBytes.length];  for (int i=0; i < 6; i++) {    bytes[i]=(byte)0xff;  }  for (int i=6; i < bytes.length; i+=macAddressBytes.length) {    System.arraycopy(macAddressBytes,0,bytes,i,macAddressBytes.length);  }  try {    InetAddress address=InetAddress.getByName(hostAddress);    DatagramPacket packet=new DatagramPacket(bytes,bytes.length,address,port);    DatagramSocket socket=new DatagramSocket();    LogUtils.LOGD(TAG,"Sending WoL to " + address.getHostAddress() + ":"+ port);    socket.send(packet);    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();    while (interfaces.hasMoreElements()) {      NetworkInterface networkInterface=interfaces.nextElement();      if (networkInterface.isLoopback())       continue;      for (      InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {        InetAddress broadcast=interfaceAddress.getBroadcast();        if (broadcast != null) {          LogUtils.LOGD(TAG,"Sending WoL broadcast to " + broadcast.getHostAddress() + ":"+ port);          packet=new DatagramPacket(bytes,bytes.length,broadcast,port);          socket.send(packet);        }      }    }    socket.close();  } catch (  IOException e) {    LogUtils.LOGD(TAG,"Exception while sending magic packet.",e);    return false;  }  return true;}  }
class C{  public BasicGlobe(double semiMajorAxis,double inverseFlattening,GeographicProjection projection){  if (semiMajorAxis <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BasicGlobe","constructor","Semi-major axis is invalid"));  }  if (inverseFlattening <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BasicGlobe","constructor","Inverse flattening is invalid"));  }  if (projection == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BasicGlobe","constructor","missingProjection"));  }  double f=1 / inverseFlattening;  this.equatorialRadius=semiMajorAxis;  this.polarRadius=semiMajorAxis * (1 - f);  this.eccentricitySquared=2 * f - f * f;  this.projection=projection;  this.tessellator=new BasicTessellator();}  }
class C{  @Override public Long hlen(final byte[] key){  checkIsInMultiOrPipeline();  client.hlen(key);  return client.getIntegerReply();}  }
class C{  public ClearAnnotationModelEvent(AnnotationModel model){  this.annotationModel=model;}  }
class C{  public BitwiseOrExpression createBitwiseOrExpression(){  BitwiseOrExpressionImpl bitwiseOrExpression=new BitwiseOrExpressionImpl();  return bitwiseOrExpression;}  }
class C{  public void bindBuffer(int target,int bufferId){  if (target == GLES20.GL_ARRAY_BUFFER && this.arrayBufferId != bufferId) {    this.arrayBufferId=bufferId;    GLES20.glBindBuffer(target,bufferId);  } else   if (target == GLES20.GL_ELEMENT_ARRAY_BUFFER && this.elementArrayBufferId != bufferId) {    this.elementArrayBufferId=bufferId;    GLES20.glBindBuffer(target,bufferId);  } else {    GLES20.glBindBuffer(target,bufferId);  }}  }
class C{  public static FilterJoinBuilder filterJoin(String name){  return new FilterJoinBuilder(name);}  }
class C{  private Multimap<Class<?>,Subscriber> findAllSubscribers(Object listener){  Multimap<Class<?>,Subscriber> methodsInListener=HashMultimap.create();  Class<?> clazz=listener.getClass();  for (  Method method : getAnnotatedMethods(clazz)) {    Class<?>[] parameterTypes=method.getParameterTypes();    Class<?> eventType=parameterTypes[0];    methodsInListener.put(eventType,Subscriber.create(bus,listener,method));  }  return methodsInListener;}  }
class C{  public static Query makeQueryable(Query q){  if (q instanceof WrappedQuery) {    return makeQueryable(((WrappedQuery)q).getWrappedQuery());  }  return isNegative(q) ? fixNegativeQuery(q) : q;}  }
class C{  public PTBTokenizer(Reader r,boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;  setSource(r);}  }
class C{  public void close() throws IOException {  this.in.close();  this.in=null;}  }
class C{  public AsyncRunner(FilterContext context,Class schedulerClass){  super(context);  mSchedulerClass=schedulerClass;  mLogVerbose=Log.isLoggable(TAG,Log.VERBOSE);}  }
class C{  NioDatagramSessionConfig(DatagramChannel channel){  this.channel=channel;}  }
class C{  public void configureDisplayInTransactionLocked(DisplayDevice device,boolean isBlanked){  final DisplayInfo displayInfo=getDisplayInfoLocked();  final DisplayDeviceInfo displayDeviceInfo=device.getDisplayDeviceInfoLocked();  device.setLayerStackInTransactionLocked(isBlanked ? BLANK_LAYER_STACK : mLayerStack);  mTempLayerStackRect.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);  int orientation=Surface.ROTATION_0;  if (device == mPrimaryDisplayDevice && (displayDeviceInfo.flags & DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT) != 0) {    orientation=displayInfo.rotation;  }  orientation=(orientation + displayDeviceInfo.rotation) % 4;  boolean rotated=(orientation == Surface.ROTATION_90 || orientation == Surface.ROTATION_270);  int physWidth=rotated ? displayDeviceInfo.height : displayDeviceInfo.width;  int physHeight=rotated ? displayDeviceInfo.width : displayDeviceInfo.height;  int displayRectWidth, displayRectHeight;  if (physWidth * displayInfo.logicalHeight < physHeight * displayInfo.logicalWidth) {    displayRectWidth=physWidth;    displayRectHeight=displayInfo.logicalHeight * physWidth / displayInfo.logicalWidth;  } else {    displayRectWidth=displayInfo.logicalWidth * physHeight / displayInfo.logicalHeight;    displayRectHeight=physHeight;  }  int displayRectTop=(physHeight - displayRectHeight) / 2;  int displayRectLeft=(physWidth - displayRectWidth) / 2;  mTempDisplayRect.set(displayRectLeft,displayRectTop,displayRectLeft + displayRectWidth,displayRectTop + displayRectHeight);  device.setProjectionInTransactionLocked(orientation,mTempLayerStackRect,mTempDisplayRect);}  }
class C{  protected boolean onDeactivate(){  return !canDeactivate();}  }
class C{  public void testFullImportInnerEntity(){  assertQ(req("*:*"),"//result[@numFound='0']");  try {    List<Map<String,Object>> DOCS=new ArrayList<>(DB_DOCS);    Map<String,Object> doc=new HashMap<>();    doc.put("dbid_s","2");    doc.put("dbdesc_s","DbDescription2");    DOCS.add(doc);    MockDataSource.setIterator("select * from x",DOCS.iterator());    DOCS=new ArrayList<>(SOLR_DOCS);    Map<String,Object> solrDoc=new HashMap<>();    solrDoc.put("id","2");    solrDoc.put("desc","SolrDescription2");    DOCS.add(solrDoc);    addDocumentsToSolr(DOCS);    runFullImport(getDihConfigTagsInnerEntity());  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    fail(e.getMessage());  } finally {    MockDataSource.clearCache();  }  assertQ(req("*:*"),"//result[@numFound='2']");  assertQ(req("id:1"),"//result/doc/str[@name='id'][.='1']","//result/doc/str[@name='dbdesc_s'][.='DbDescription']","//result/doc/str[@name='dbid_s'][.='1']","//result/doc/arr[@name='desc'][.='SolrDescription']");  assertQ(req("id:2"),"//result/doc/str[@name='id'][.='2']","//result/doc/str[@name='dbdesc_s'][.='DbDescription2']","//result/doc/str[@name='dbid_s'][.='2']","//result/doc/arr[@name='desc'][.='SolrDescription2']");}  }
class C{  public static void assertEquals(String message,float expected,float actual){  if (expected == actual)   return;  final int maxUlps=10;  int ulps=getUlps(expected,actual);  if (ulps <= maxUlps) {    return;  }  fail("Expecting " + expected + ", not "+ actual+ ": abs(difference)="+ Math.abs(expected - actual)+ ": ulps="+ ulps);}  }
class C{  private boolean addTitle(RequestAndResponse requestAndResponse,String title){  if (!requestAndResponse.justGetTitle) {    return false;  }  if (requestAndResponse.totalTitle == null) {    requestAndResponse.totalTitle=new StringBuilder();  } else {    requestAndResponse.totalTitle.append(" | ");  }  requestAndResponse.totalTitle.append(title.replace("|",""));  return true;}  }
class C{  private Visibility(){}  }
class C{  public ShopTopSellerServiceImpl(final GenericDAO<ShopTopSeller,Long> shopTopSellerDao,final GenericDAO<Shop,Long> shopDao,final GenericDAO<Product,Long> productDao){  super(shopTopSellerDao);  this.shopDao=shopDao;  this.productDao=productDao;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (((XYSeriesRenderer)renderer).isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }  PointStyle ps=((XYSeriesRenderer)renderer).getPointStyle();  if (ps == PointStyle.X) {    drawX(canvas,paint,x + SHAPE_WIDTH,y);  } else {    if (ps == PointStyle.CIRCLE) {      drawCircle(canvas,paint,x + SHAPE_WIDTH,y);    } else {      if (ps == PointStyle.TRIANGLE) {        drawTriangle(canvas,paint,new float[6],x + SHAPE_WIDTH,y);      } else {        if (ps == PointStyle.SQUARE) {          drawSquare(canvas,paint,x + SHAPE_WIDTH,y);        } else {          if (ps == PointStyle.DIAMOND) {            drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);          } else {            if (ps == PointStyle.POINT) {              drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);            }          }        }      }    }  }}  }
class C{  public SVGGraphics2DRuntimeException(String s){  this(s,null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);case N4JSPackage.VARIABLE_DECLARATION__ANNOTATIONS:return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case N4JSPackage.VARIABLE_DECLARATION__EXPRESSION:return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    System.err.println("Usage Main <directoryNames>");    System.exit(-1);    return;  }  RepositoryManager repositoryManager=CeylonUtils.repoManager().systemRepo("../dist/dist/repo").logger(new LeakingLogger()).buildManager();  String verbose=System.getProperties().getProperty("verbose");  TypeCheckerBuilder tcb=new TypeCheckerBuilder().setRepositoryManager(repositoryManager).verbose("true".equals(verbose)).statistics(true);  for (  String path : args) {    tcb.addSrcDirectory(new File(path));  }  tcb.getTypeChecker().process();}  }
class C{  String internalsprintf(final double s) throws IllegalArgumentException {  final String s2;switch (conversionCharacter) {case 'f':    s2=printFFormat(s);  break;case 'E':case 'e':s2=printEFormat(s);break;case 'G':case 'g':s2=printGFormat(s);break;default :throw new IllegalArgumentException("Cannot " + "format a double with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  static List<SimpleEntry<Integer,FVec>> loadData() throws IOException {  List<SimpleEntry<Integer,FVec>> result=new ArrayList<>();  for (  String line : Files.readAllLines(new File(Example.class.getResource("model/agaricus.txt.test").getPath()).toPath(),StandardCharsets.UTF_8)) {    String[] values=line.split(" ");    Map<Integer,Float> map=new HashMap<>();    for (int i=1; i < values.length; i++) {      String[] pair=values[i].split(":");      map.put(Integer.parseInt(pair[0]),Float.parseFloat(pair[1]));    }    result.add(new SimpleEntry<>(Integer.parseInt(values[0]),FVec.Transformer.fromMap(map)));  }  return result;}  }
class C{  public long adjustTimestamp(long pts){  if (lastPts != Long.MIN_VALUE) {    long closestWrapCount=(lastPts + (MAX_PTS_PLUS_ONE / 2)) / MAX_PTS_PLUS_ONE;    long ptsWrapBelow=pts + (MAX_PTS_PLUS_ONE * (closestWrapCount - 1));    long ptsWrapAbove=pts + (MAX_PTS_PLUS_ONE * closestWrapCount);    pts=Math.abs(ptsWrapBelow - lastPts) < Math.abs(ptsWrapAbove - lastPts) ? ptsWrapBelow : ptsWrapAbove;  }  long timeUs=ptsToUs(pts);  if (firstSampleTimestampUs != DO_NOT_OFFSET && lastPts == Long.MIN_VALUE) {    timestampOffsetUs=firstSampleTimestampUs - timeUs;  }  lastPts=pts;  return timeUs + timestampOffsetUs;}  }
class C{  public boolean LT(Word addr2){  return false;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.968 -0500",hash_original_method="149DCB8E596A59716D0EA3B88B730E88",hash_generated_method="8FA7F71D74A33611FDEF5B42549B3A81") public boolean copyMessageToIcc(byte[] smsc,byte[] pdu,int status){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.copyMessageToIccEf(status,pdu,smsc);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public ExceptionSet duplicate(){  ExceptionSet dup=factory.createExceptionSet();  dup.exceptionSet.clear();  dup.exceptionSet.or(this.exceptionSet);  dup.explicitSet.clear();  dup.explicitSet.or(this.explicitSet);  dup.size=this.size;  dup.universalHandler=this.universalHandler;  dup.commonSupertype=this.commonSupertype;  return dup;}  }
class C{  public static JsonArray array(String... strings){  if (strings == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  String value : strings) {    array.add(value);  }  return array;}  }
class C{  public NamedThreadFactory(final String threadPrefix){  this(threadPrefix,null);}  }
class C{  public void stop() throws IOException {  this.client.close();}  }
class C{  private void dynInit(){}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public CastExpr newCastExpr(Value op1,Type t){  return new JCastExpr(op1,t);}  }
class C{  public VariablesProcessor(String _prefix,boolean staticSensitiveFlag,List<PsiVariable> lst){  myPrefix=_prefix;  myStaticSensitiveFlag=staticSensitiveFlag;  myResultList=lst;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void error(String format,Object... arguments){  if (logger.isLoggable(Level.SEVERE)) {    FormattingTuple ft=MessageFormatter.arrayFormat(format,arguments);    log(SELF,Level.SEVERE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF:    return getIdentifierRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double convertDDMToDD(int hemisphere,int degreesMinutes,int decimalDegrees){  double retVal=0.0;  if (degreesMinutes != 0) {    retVal+=(double)(degreesMinutes / 100);    int wholeMinutes=degreesMinutes % 100;    if (wholeMinutes != 0) {      retVal+=(double)(wholeMinutes / 60.0D);    }  }  if (decimalDegrees != 0) {    retVal+=(double)(decimalDegrees / 600000.0D);  }  if (hemisphere == 1) {    retVal=-retVal;  }  return retVal;}  }
class C{  public void testCertPathValidator11() throws NoSuchAlgorithmException, NoSuchProviderException, CertPathValidatorException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator[] certPV=createCPVs();  assertNotNull("CertPathValidator objects were not created",certPV);  MyCertPath mCP=new MyCertPath(new byte[0]);  invalidParams mPar=new invalidParams();  for (int i=0; i < certPV.length; i++) {    try {      certPV[i].validate(mCP,mPar);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      certPV[i].validate(mCP,null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  private BigdataSailConnection _getReadOnlyConnection(final long timestamp) throws IOException, DatasetNotFoundException {  final long commitTime=timestamp;  final ITransactionService txService=getTxService();  boolean ok=false;  final long txId=txService.newTx(commitTime);  try {    final BigdataSailConnection conn=new BigdataSailReadOnlyConnection(txId,txService).startConn();    ok=true;    manageConnection(conn);    return conn;  }  finally {    if (!ok) {      try {        txService.abort(txId);      } catch (      IOException ex) {        log.error(ex,ex);      }    }  }}  }
class C{  @Override public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.969 -0500",hash_original_method="B7050C2592D973CE5B8DCBBE60AC7282",hash_generated_method="01ADFFC5BADEC6B80A6E2583406912CC") private int nativeConsumeRights(int permission){  addTaint(permission);  return getTaintInt();}  }
class C{  public void convertMethod(MethodDef methodDef,List<VariableReference> params,VariableReference retVal){  assert methodDef.getParams().size() == params.size();  Map<VariableReference,VariableReference> methodVarsMap=new HashMap<VariableReference,VariableReference>();  for (  StatementInterface statement : methodDef.getCode()) {    for (int idx=0; idx < params.size(); idx++) {      statement.replace(methodDef.getParams().get(idx),params.get(idx));    }    if (statement instanceof ReturnStatementPlaceholder) {      VariableReference resultVal=methodVarsMap.get(statement.getReturnValue());      if (resultVal == null) {        throw new IllegalStateException();      }      AssignmentStatement assignmentStatement=new AssignmentStatement(delegate,retVal,resultVal);      addStatement(assignmentStatement);      return;    }    StatementInterface newStmt=statement;    if (!(statement instanceof PrimitiveExpression)) {      newStmt=statement.clone(delegate);    }    addReplacementVariable(statement.getReturnValue(),newStmt.getReturnValue());    methodVarsMap.put(statement.getReturnValue(),newStmt.getReturnValue());    addStatement(newStmt);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RevealOutputGraph exhaustiveSearch(int lag){  double[] entropies=new double[ngenes];  for (int g=0; g < ngenes; g++) {    entropies[g]=re.entropy(g,lag);  }  int[][] ct=null;  for (int child=0; child < ngenes; child++) {    System.out.println("Crosstabs of gene " + child);    for (int parent=0; parent < ngenes; parent++) {      if (parent == child) {        continue;      }      ct=re.crossTab(child,parent,lag);      System.out.println("with parent " + parent + " at lag "+ lag);      System.out.println("  " + ct[0][0] + " "+ ct[0][1]);      System.out.println("  " + ct[1][0] + " "+ ct[1][1]);    }  }  int[][] parents=new int[ngenes][];  double[] best1=new double[ngenes];  double[] best2=new double[ngenes];  double[] best3=new double[ngenes];  int[] p=new int[1];  for (int child=0; child < ngenes; child++) {    System.out.println("For gene " + child);    best1[child]=-1.0;    for (int i=0; i < ngenes; i++) {      p[0]=i;      double m=re.mutualInformation(child,p,lag);      double me=m / entropies[child];      if (me > best1[child]) {        best1[child]=me;        parents[child]=new int[1];        parents[child][0]=i;      }      System.out.println("for parent = " + i + " m = "+ m+ " m/e = "+ me);    }  }  int[] pp=new int[2];  for (int child=0; child < ngenes; child++) {    System.out.println("For gene " + child);    best2[child]=-1.0;    for (int p1=0; p1 < ngenes; p1++) {      for (int p2=0; p2 < ngenes && p1 != p2; p2++) {        pp[0]=p1;        pp[1]=p2;        double mm=re.mutualInformation(child,pp,lag);        double mme=mm / entropies[child];        if (mme > best2[child] && mme > best1[child]) {          best2[child]=mme;          parents[child]=new int[2];          parents[child][0]=p1;          parents[child][1]=p2;        }        System.out.println("for parents = " + p1 + ","+ p2+ " m = "+ mm+ " m/e = "+ mme);      }    }  }  int[] ppp=new int[3];  for (int child=0; child < ngenes; child++) {    best3[child]=-1.0;    System.out.println("For gene " + child);    for (int p1=0; p1 < ngenes; p1++) {      for (int p2=0; p2 < ngenes && p2 != p1; p2++) {        for (int p3=0; p3 < ngenes && p3 != p2 && p3 != p1; p3++) {          ppp[0]=p1;          ppp[1]=p2;          ppp[2]=p3;          double mmm=re.mutualInformation(child,ppp,lag);          double mmme=mmm / entropies[child];          if (mmme > best3[child] && mmme > best2[child] && mmme > best1[child]) {            best3[child]=mmme;            parents[child]=new int[3];            parents[child][0]=p1;            parents[child][1]=p2;            parents[child][2]=p3;          }          System.out.println("for parents = " + p1 + ","+ p2+ ","+ p3+ " m = "+ mmm+ " m/e = "+ mmme);        }      }    }  }  for (int gene=0; gene < ngenes; gene++) {    System.out.println("Parents of gene " + gene);    for (int par=0; par < parents[gene].length; par++) {      System.out.print(parents[gene][par] + " ");    }    System.out.println();  }  int[][] lags=new int[ngenes][];  for (int i=0; i < ngenes; i++) {    int k=parents[i].length;    lags[i]=new int[k];    for (int j=0; j < k; j++) {      lags[i][j]=1;    }  }  RevealOutputGraph rog=new RevealOutputGraph(ngenes,parents,lags,names,"TestReveal");  return rog;}  }
class C{  public void addAll(int... values){  for (  int value : values) {    add(value);  }}  }
class C{  public DigicoreActivityDensityEstimator(MultiPolygon studyarea){  this.area=studyarea;  this.outputFolder=new File("tmp/");  this.outputFolder.deleteOnExit();  if (!this.outputFolder.mkdirs()) {    throw new RuntimeException("Could not create temporary folder " + this.outputFolder.getAbsolutePath());  }}  }
class C{  public QueueMaxException(String message){  super(message);}  }
class C{  public boolean isFlashing(){  return flashing;}  }
class C{  @Override public void drawOval(int x,int y,int width,int height){  setStateToLocal();  m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " "+ xScale(width)+ " "+ yScale(height)+ " false Oval");}  }
class C{  public Matrix4f scaleAround(float factor,float ox,float oy,float oz){  return scaleAround(factor,factor,factor,ox,oy,oz,this);}  }
class C{  public SizeablePointRenderer(){  column=2;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 4:case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static View createCompleteView(final ICallResolverTarget target,final List<IndirectCall> indirectCallAddresses,final Map<BigInteger,Set<ResolvedFunction>> resolvedAddresses){  final View view=target.createView();  final Map<Function,FunctionNode> nodes=new HashMap<Function,FunctionNode>();  for (  final Module module : target.getModules()) {    for (    final Function function : module.getFunctions()) {      final FunctionNode node=view.createFunctionNode(function);      nodes.put(function,node);    }    final Callgraph callgraph=module.getCallgraph();    for (    final FunctionEdge edge : callgraph.getEdges()) {      final FunctionNode sourceNode=nodes.get(edge.getSource().getFunction());      final FunctionNode targetNode=nodes.get(edge.getTarget().getFunction());      view.createEdge(sourceNode,targetNode,EdgeType.JumpUnconditional);    }  }  for (  final Entry<BigInteger,Set<ResolvedFunction>> element : resolvedAddresses.entrySet()) {    final BigInteger start=element.getKey();    final Set<ResolvedFunction> targets=element.getValue();    final IndirectCall call=IndirectCallResolver.findIndirectCall(target.getDebugger(),indirectCallAddresses,start);    final FunctionNode sourceNode=nodes.get(call.getFunction());    if (sourceNode != null) {      for (      final ResolvedFunction targetFunction : targets) {        final Function function=targetFunction.getFunction();        if (function != null) {          final FunctionNode targetNode=nodes.get(function);          final ViewEdge edge=view.createEdge(sourceNode,targetNode,EdgeType.JumpUnconditional);          edge.setColor(Color.RED);        }      }    }  }  return view;}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public MiniTest(int interpolationMethod,int numberOfRows,int numberOfColumns,double exponent){  double[] boundingBox=initBoundingBox(numberOfRows,numberOfColumns);  double gridSizeInMeter=1.;  this.sg=new SpatialGrid(boundingBox,gridSizeInMeter);  for (double x=sg.getXmin(); x <= sg.getXmax(); x+=sg.getResolution()) {    for (double y=sg.getYmin(); y <= sg.getYmax(); y+=sg.getResolution()) {      sg.setValue(0,x,y);    }  }  sg.setValue(100,sg.getXmin(),sg.getYmin());  System.out.println("SpatialGrid for testing:");  printSG(this.sg);  long startTime=System.currentTimeMillis();  this.interpolation=new Interpolation(this.sg,interpolationMethod,exponent);  this.interpolateSG();  this.interpolationTime=System.currentTimeMillis() - startTime;  System.out.println("interpolated SpatialGrid:");  printSG(this.interpolatedSG);  if (interpolationMethod == 2)   this.interpolatedSG.writeToFile(path + interpolationMethod + "_exp"+ exponent+ "_"+ numberOfRows+ "x"+ numberOfColumns+ ".txt"); else   this.interpolatedSG.writeToFile(path + interpolationMethod + "_"+ numberOfRows+ "x"+ numberOfColumns+ ".txt");}  }
class C{  public final String toString(){  return description;}  }
class C{  @Override public String toString(){  return new StringBuilder(this.getClass().getSimpleName()).append(": ").append(WbXmlLiterals.formatUInt8(pageCode)).append("|").append(WbXmlLiterals.formatUInt8(token)).toString();}  }
class C{  public SyntaxView(Element elem){  super(elem);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!newRecord && is_ValueChanged("EMail"))   setEMailVerifyDate(null);  if (newRecord || super.getValue() == null || is_ValueChanged("Value"))   setValue(super.getValue());  if ((newRecord || is_ValueChanged("Password")) && !hashed)   setPassword(super.getPassword());  hashed=false;  return true;}  }
class C{  public SoapResponse sendSoap(String soap) throws IOException {  final StringEntity httpBody=new StringEntity(soap);  post.setEntity(httpBody);  int maxTries=MAX_RETRY_NUMBER;  HttpResponse httpResponse=null;  while (httpResponse == null) {    try {      httpResponse=client.execute(post);    } catch (    IOException ex) {      if (maxTries == 0) {        throw ex;      } else {        maxTries--;        LOG.warn(ex.getLocalizedMessage());        LOG.warn("Trying to send the message once more");        LOG.debug(ex);      }    }  }  SoapResponse soapResponse=new SoapResponse();  if (LOG.isDebugEnabled()) {    LOG.debug(httpResponse.getStatusLine());  }  soapResponse.setStatusLine(httpResponse.getStatusLine().toString());  for (  Header h : httpResponse.getAllHeaders()) {    final String name=h.getName();    final String value=h.getValue();    if (LOG.isDebugEnabled()) {      final String headerDebug=name + ": " + value;      LOG.debug(headerDebug);    }    HttpHeader newHeader=new HttpHeader(name,value);    soapResponse.getHeaders().add(newHeader);  }  LOG.debug("waiting for response: ");  final HttpEntity entity=httpResponse.getEntity();  final String charset=EntityUtils.getContentCharSet(entity);  final String responseString=EntityUtils.toString(entity,charset);  soapResponse.setBody(responseString);  return soapResponse;}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,Files.newInputStream(getDataPath("nb_light.txt")));}  }
class C{  public static void attribute(String name,Word value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final Area[] temp=items;    items=new Area[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public boolean isEndOfStream(){  return events.isEmpty();}  }
class C{  public AddUserToGroupScriptCommand(Configuration configuration,String resourcePath,User user,String groupRole){  super(configuration,resourcePath);  this.user=user;  this.groupRole=groupRole;}  }
class C{  public void read(InputStream in,Document doc,int pos) throws IOException, BadLocationException {  read(new InputStreamReader(in),doc,pos);}  }
class C{  public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  default Task<?> preActivation(AbstractActor<?> actor){  return Task.done();}  }
class C{  public Main(){}  }
class C{  public void incl(int x){  Assert.check(currentState != BitsState.UNKNOWN);  Assert.check(x >= 0,"Value of x " + x);  sizeTo((x >>> wordshift) + 1);  bits[x >>> wordshift]=bits[x >>> wordshift] | (1 << (x & wordmask));  currentState=BitsState.NORMAL;}  }
class C{  public final void deliver(ConsensusMessage msg){  if (executionManager.checkLimits(msg)) {    Logger.println("processing paxos msg with id " + msg.getNumber());    processMessage(msg);  } else {    Logger.println("out of context msg with id " + msg.getNumber());    tomLayer.processOutOfContext();  }}  }
class C{  public void subscribe(){  setSubscribeDate(null);  if (!isActive())   setIsActive(true);}  }
class C{  @RequestProcessing(value="/admin/misc",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showMisc(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/misc.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final List<JSONObject> misc=optionQueryService.getMisc();  dataModel.put(Option.OPTIONS,misc);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static long readThreadId(final ClientReader inputStream) throws IOException {  readDWord(inputStream,4);  readDWord(inputStream,DebugArgumentType.INTEGER.getValue());  return readDWord(inputStream);}  }
class C{  public sup removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private static void drawLine(int x0,int y0,int x1,int y1,boolean[][] pic){  final int xres=pic.length, yres=pic[0].length;  y0=(y0 < 0) ? 0 : (y0 >= yres) ? (yres - 1) : y0;  y1=(y1 < 0) ? 0 : (y1 >= yres) ? (yres - 1) : y1;  x0=(x0 < 0) ? 0 : (x0 >= xres) ? (xres - 1) : x0;  x1=(x1 < 0) ? 0 : (x1 >= xres) ? (xres - 1) : x1;  final int dx=+Math.abs(x1 - x0), sx=x0 < x1 ? 1 : -1;  final int dy=-Math.abs(y1 - y0), sy=y0 < y1 ? 1 : -1;  int err=dx + dy;  for (; ; ) {    pic[x0][y0]=true;    if (x0 == x1 && y0 == y1) {      break;    }    final int e2=err << 1;    if (e2 > dy) {      err+=dy;      x0+=sx;    }    if (e2 < dx) {      err+=dx;      y0+=sy;    }  }}  }
class C{  @Util public static List<BreadCrumb> createBreadCrumbs(String tenantId,CatalogCategoryRestRep category){  return createBreadCrumbs(category.getId().toString(),getCatalog(tenantId));}  }
class C{  public WrappedByteBuffer rewind(){  _buf=(java.nio.ByteBuffer)_buf.rewind();  return this;}  }
class C{  public RoundChart(CategorySeries dataset,DefaultRenderer renderer){  mDataset=dataset;  mRenderer=renderer;}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  AttrContext dup(){  return dup(scope);}  }
class C{  void deleteChild(PolicyNode childNode){  if (isImmutable) {    throw new IllegalStateException("PolicyNode is immutable");  }  mChildren.remove(childNode);}  }
class C{  protected ConnectionFigure createConnection(){  return (ConnectionFigure)prototype.clone();}  }
class C{  public boolean isNew(){  return isNew;}  }
class C{  private boolean calcLines(AreaPanelSpaceTimeBox apStBox,int minDepth){  GTG.cacheCreator.viewNodeThreadManager.registerReadingThread();  int numberOfViewNodesLinesCalculatedFor=0;  try {    Iterator<ViewNode> iter=GTG.cacheCreator.getViewNodeIter();    ArrayList<TimeTree> scratchPath=new ArrayList<TimeTree>();    if (!iter.hasNext()) {      AreaPanel topAp=GTG.apCache.getTopRow();      if (topAp == null || topAp.getTimeTree() == null)       return true;      AreaPanel ap=topAp.getChildApAtDepthAndTime(minDepth,apStBox.minZ);      if (ap == null)       return true;      TimeTree tt=ap.getTimeTree().getBottomLevelEncompassigTimeTree(apStBox.minZ);      ViewLine vl;      int endCutTime=tt.calcTimeRangeCutEnd();      if (endCutTime <= apStBox.minZ) {        vl=new ViewLine(endCutTime,tt.getMaxTimeSecs());        vl.startApId=ap.id;        vl.endApId=tt.getNextApId();      } else {        vl=new ViewLine(tt.getMinTimeSecs(),tt.calcTimeRangeCutStart());        vl.startApId=tt.getPrevApId();        vl.endApId=ap.id;      }      GTG.cacheCreator.startTimeToViewLine.put(vl.startTimeSec,vl);      GTG.cacheCreator.endTimeToViewLine.put(vl.endTimeSec,vl);      return true;    }    while (iter.hasNext()) {      ViewNode vn=iter.next();      if (vn.largestTimeTreeLengthForUncreatedLines >= minTimeTreeLengthForLineCalc && vn.ap().getDepth() == minDepth) {        vn.calcLinesForStBox(scratchPath,apStBox,GTG.cacheCreator.startTimeToViewLine,GTG.cacheCreator.endTimeToViewLine,lastNumberOfViewNodesLinesCalculatedFor);        numberOfViewNodesLinesCalculatedFor++;        if (numberOfViewNodesLinesCalculatedFor > VIEW_NODES_TO_CALC_LINES_FOR_PER_ROUND)         return false;        if (isAtMaxLines()) {          Log.d(GTG.TAG,"Reached max lines: " + GTG.cacheCreator.startTimeToViewLine.size() + " minTimeTreeLengthForLineCalc is "+ minTimeTreeLengthForLineCalc);          return true;        }      }    }    bestLargestTimeTreeLengthForUncreatedLinesList.clear();    iter=GTG.cacheCreator.getViewNodeIter();    while (iter.hasNext()) {      ViewNode vn=iter.next();      if (vn.ap().getDepth() != minDepth)       continue;      bestLargestTimeTreeLengthForUncreatedLinesList.add(vn.largestTimeTreeLengthForUncreatedLines);    }    if (bestLargestTimeTreeLengthForUncreatedLinesList.data[BEST_LARGEST_TIME_TREE_LENGTH_FOR_UNCREATED_LINES_LIST_TOTAL - 1] <= 0)     return true;    minTimeTreeLengthForLineCalc=bestLargestTimeTreeLengthForUncreatedLinesList.data[0];    return false;  }  finally {    GTG.cacheCreator.viewNodeThreadManager.unregisterReadingThread();    lastNumberOfViewNodesLinesCalculatedFor=numberOfViewNodesLinesCalculatedFor;    Log.d(GTG.TAG,"numberOfViewNodesLinesCalculatedFor: " + numberOfViewNodesLinesCalculatedFor + " lines: "+ GTG.cacheCreator.startTimeToViewLine.size()+ " minTimeTreeLengthForLineCalc is "+ minTimeTreeLengthForLineCalc+ " blttlfull0="+ bestLargestTimeTreeLengthForUncreatedLinesList.data[0]+ " blttlfullMAX="+ bestLargestTimeTreeLengthForUncreatedLinesList.data[BEST_LARGEST_TIME_TREE_LENGTH_FOR_UNCREATED_LINES_LIST_TOTAL - 1]);  }}  }
class C{  public void initializeTimeOfFirstRun(Context context){  mProfile.start();  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);  mProfile.mark("PreferenceManager.getDefaultSharedPreferences");  long timeOfFirstUseMillis=preferences.getLong(CLIENT_FIRST_USE_TIME,0);  mProfile.mark("preferences.getLong");  if (timeOfFirstUseMillis == 0) {    SharedPreferences cameraPrefs=context.getSharedPreferences(context.getPackageName() + "_preferences_camera",Context.MODE_PRIVATE);    mProfile.mark("getSharedPreferences");    boolean isUpgrade=cameraPrefs.getAll().size() > 0 || preferences.getAll().size() > 0;    timeOfFirstUseMillis=isUpgrade ? UNKNOWN : System.currentTimeMillis();    preferences.edit().putLong(CLIENT_FIRST_USE_TIME,timeOfFirstUseMillis).apply();    mProfile.mark("preferences.edit()");    if (!isUpgrade) {      mIsFirstRun=true;    }  }  mTimeOfFirstRun=timeOfFirstUseMillis;  mProfile.stop();}  }
class C{  public static boolean isEmpty(final Object[] array){  return array == null || array.length == 0;}  }
class C{  static <T>T checkNotNull(T object,String message){  if (object == null)   throw new NullPointerException(message);  return object;}  }
class C{  private void createShader(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    wave=getApplicationContext().getDrawable(R.drawable.wave);  } else {    wave=getResources().getDrawable(R.drawable.wave);  }  assert wave != null;  int waveW=wave.getIntrinsicWidth();  int waveH=wave.getIntrinsicHeight();  Bitmap b=Bitmap.createBitmap(waveW,waveH,Bitmap.Config.RGB_565);  Canvas c=new Canvas(b);  c.drawColor(CompatUtils.getColor(getApplicationContext(),R.color.drip_color));  wave.setBounds(0,0,waveW,waveH);  wave.draw(c);  shader=new BitmapShader(b,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);  paint.setShader(shader);}  }
class C{  public Shape createOpenRectangle(final int x,final int y,final int w,final int h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  return path;}  }
class C{  public SubsetDiscreteVariablesAction(DataEditor editor){  super("Copy Discrete Variables");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void resetTargetParameters(){  resetVendor(s_isTarget,null);  resetHost(s_isTarget,null);  resetPort(s_isTarget,null);  resetUser(s_isTarget,null);  resetUser(s_isTarget,null);  resetPassword(s_isTarget,null);  resetSystemUser(s_isTarget,null);  resetSystemPassword(s_isTarget,null);  resetSystemUserStatus(s_isTarget);  resetName(s_isTarget,null);  resetURL(s_isTarget,null);  resetCatalog(s_isTarget,null);  resetSchema(s_isTarget,null);  resetVersion(s_isTarget);}  }
class C{  public int sizeNonResident(){  int x=0;  for (  Segment<V> s : segments) {    x+=s.queue2Size;  }  return x;}  }
class C{  private boolean determineIfRollbackCompleted(Workflow workflow){  if (workflow.isRollbackState() == false) {    return false;  }  boolean rollbackComplete=true;  Map<String,Step> stepMap=workflow.getStepMap();  for (  Step step : stepMap.values()) {    if (!step.isRollbackStep()) {      continue;    }    StepStatus status=workflow.getStepStatus(step.stepId);    if (status.isTerminalState() == false || status.state != StepState.SUCCESS) {      _log.info(String.format("Rollback step %s not successful, state %s",step.stepId,status.state.name()));      rollbackComplete=false;    }  }  return rollbackComplete;}  }
class C{  public static void centerNodeZoomed(final ZyGraph graph,final NaviNode node){  checkArguments(graph);  MoveFunctions.centerNode(graph,node);  ZoomFunctions.zoomToNode(graph,node);}  }
class C{  public void swapValRight(BiSortVal n){  int tmpv=n.value;  BiSortVal tmpr=n.right;  n.value=value;  n.right=right;  value=tmpv;  right=tmpr;}  }
class C{  public POSFromParse(String parseViewName){  super(ViewNames.POS,new String[]{parseViewName});  this.parseViewName=parseViewName;}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public ACLAssignments updateAcls(@PathParam("id") URI id,ACLAssignmentChanges changes){  return updateAclsOnVirtualPool(VirtualPool.Type.object,id,changes);}  }
class C{  public ComponentBuilder underlined(boolean underlined){  current.setUnderlined(underlined);  return this;}  }
class C{  public static void scheduleNextAlarm(Context context){  scheduleNextAlarm(context,AlertUtils.createAlarmManager(context),REMINDER_QUERY_BATCH_SIZE,System.currentTimeMillis());}  }
class C{  public void clearRow(int nodeIndex,int rowIndex){  for (int colIndex=0; colIndex < getNumColumns(nodeIndex); colIndex++) {    setProbability(nodeIndex,rowIndex,colIndex,Double.NaN);  }}  }
class C{  public synchronized long maxMessageProcessingTime(){  return maxMsgProcTime;}  }
class C{  private boolean checkConfigBool(Configuration config,String name){  String value=config.getConfig(name);  return value != null && Boolean.parseBoolean(value);}  }
class C{  public DeltaRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String token){  super(requestUrl,client,options,token);}  }
class C{  public static void checkEquals(String message,String expected,String actual,int scale){  checkEqualsWithGivenScale(message,new BigDecimal(expected),new BigDecimal(actual),scale);}  }
class C{  public SystemManager(String id,ClassLoader parentLoader){  if (id == null) {    id="default";  }  _id=id;  if (parentLoader == null) {    parentLoader=Thread.currentThread().getContextClassLoader();  }  final ClassLoader finalParentLoader=parentLoader;  initLog.log(Level.FINE,null);  EnvLoader.addCloseListener(this,parentLoader);  _classLoader=EnvironmentClassLoader.create(parentLoader,"system:");  _systemLocal.set(this,_classLoader);  _globalSystemRef=new WeakReference<>(this);  _lifecycle=new Lifecycle(log,toString(),Level.FINE);  addSystem(new ClassLoaderSystemBind());  addSystem(new ClassLoaderSystemStart());  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_classLoader);    EnvLoader.init();  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  public static Printer createPrinter(){  return new AndroidPrinter();}  }
class C{  protected SecretKey engineGenerateSecret(KeySpec keySpec) throws InvalidKeySpecException {  if (!(keySpec instanceof PBEKeySpec)) {    throw new InvalidKeySpecException("Invalid key spec");  }  PBEKeySpec ks=(PBEKeySpec)keySpec;  return new PBKDF2KeyImpl(ks,prfAlgo);}  }
class C{  @Override public final Shape generateShapeFromPath(final float[][] CTM,final float thickness,final int cmd){  isClosed=false;  boolean is_clip=this.isClip;  if (cmd == Cmd.n) {    is_clip=false;  }  GeneralPath current_path=null;  Area current_area=null;  currentShape=null;  final float[] x=shape_primitive_x.get();  final float[] y=shape_primitive_y.get();  final float[] x2=shape_primitive_x2.get();  final float[] y2=shape_primitive_y2.get();  final float[] x3=shape_primitive_x3.get();  final float[] y3=shape_primitive_y3.get();  final int[] command=shape_primitives.get();  final int end=shape_primitives.size() - 1;  if (end == 6 && cmd == Cmd.B && thickness >= 0.9f && is_clip) {    for (int aa=0; aa < 8; aa++) {      final float diff=x[aa] - (int)x[aa];      if (diff > 0.5f) {        x[aa]=(int)x[aa] - 1f;      }    }  }  final boolean show=false;  final boolean debug=false;  for (int i=0; i < end; i++) {    if (current_path == null) {      current_path=new GeneralPath(winding_rule);      current_path.moveTo(x[i],y[i]);      if (show) {        LogWriter.writeLog("==START=" + x[i] + ' '+ y[i]);      }    }    if (command[i] == H) {      isClosed=true;      current_path.closePath();      if (is_clip) {        if (show) {          LogWriter.writeLog("==H\n\n" + current_area + ' '+ current_path.getBounds2D()+ ' '+ new Area(current_path).getBounds2D());        }        if (current_area == null) {          current_area=new Area(current_path);          if ((current_area.getBounds2D().getWidth() <= 0.0) || (current_area.getBounds2D().getHeight() <= 0.0)) {            current_area=new Area(current_path.getBounds2D());          }        } else {          current_area.add(new Area(current_path));        }        current_path=null;      } else {        if (show) {          LogWriter.writeLog("close shape " + command[i] + " i="+ i);        }      }    }    if (command[i] == L) {      current_path.lineTo(x[i],y[i]);      if (show) {        LogWriter.writeLog("==L" + x[i] + ','+ y[i]+ "  ");      }    } else     if (command[i] == M) {      current_path.moveTo(x[i],y[i]);      if (show) {        LogWriter.writeLog("==M" + x[i] + ','+ y[i]+ "  ");      }    } else {      if (command[i] == Y) {        if (show) {          LogWriter.writeLog("==Y " + x[i] + ' '+ y[i]+ ' '+ x3[i]+ ' '+ y3[i]+ ' '+ x3[i]+ ' '+ y3[i]);        }        current_path.curveTo(x[i],y[i],x3[i],y3[i],x3[i],y3[i]);      } else       if (command[i] == C) {        if (show) {          LogWriter.writeLog("==C " + x[i] + ' '+ y[i]+ ' '+ x2[i]+ ' '+ y2[i]+ ' '+ x3[i]+ ' '+ y3[i]);        }        current_path.curveTo(x[i],y[i],x2[i],y2[i],x3[i],y3[i]);      } else       if (command[i] == V) {        final float c_x=(float)current_path.getCurrentPoint().getX();        final float c_y=(float)current_path.getCurrentPoint().getY();        if (show) {          LogWriter.writeLog("==v " + c_x + ','+ c_y+ ','+ x2[i]+ ','+ y2[i]+ ','+ x3[i]+ ','+ y3[i]);        }        current_path.curveTo(c_x,c_y,x2[i],y2[i],x3[i],y3[i]);      }    }    if (debug) {      try {        final java.awt.image.BufferedImage img=new java.awt.image.BufferedImage(700,700,java.awt.image.BufferedImage.TYPE_INT_ARGB);        final Graphics2D gg2=img.createGraphics();        gg2.setPaint(Color.RED);        gg2.translate(current_path.getBounds().width + 10,current_path.getBounds().height + 10);        gg2.draw(current_path);        org.jpedal.gui.ShowGUIMessage.showGUIMessage("path",img,"path " + current_path.getBounds());      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }  if ((CTM[0][0] == (float)1.0) && (CTM[1][0] == (float)0.0) && (CTM[2][0] == (float)0.0)&& (CTM[0][1] == (float)0.0)&& (CTM[1][1] == (float)1.0)&& (CTM[2][1] == (float)0.0)&& (CTM[0][2] == (float)0.0)&& (CTM[1][2] == (float)0.0)&& (CTM[2][2] == (float)1.0)) {  } else {    final AffineTransform CTM_transform=new AffineTransform(CTM[0][0],CTM[0][1],CTM[1][0],CTM[1][1],CTM[2][0],CTM[2][1]);    if (current_path != null) {      current_path.transform(CTM_transform);    } else     if (current_area != null) {      current_area.transform(CTM_transform);    }  }  if (current_path != null && CTM[0][0] == 1 && CTM[1][1] == -1 && current_path.getBounds().height == 1 && thickness > 10) {    final Rectangle currentBounds=current_path.getBounds();    current_path=new GeneralPath(winding_rule);    current_path.moveTo(currentBounds.x,currentBounds.y - thickness / 2);    current_path.lineTo(currentBounds.x,currentBounds.y + thickness / 2);    current_path.closePath();  }  if (!is_clip) {    if (current_area == null) {      currentShape=current_path;    } else {      currentShape=current_area;    }  } else {    currentShape=current_area;  }  if (cmd == Cmd.n && getSegmentCount() > 2500) {    complexClipCount++;  }  return currentShape;}  }
class C{  private Builder tag(String tag,String atributs){  ends.push("</" + tag + ">");  html.a('<').a(tag).sp().a(atributs).a('>');  return this;}  }
class C{  @Ignore @Test public void shouldBeFasterWhenRunningProcessingInParallel() throws Exception {  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();  final long begin=System.currentTimeMillis();  victim.setParallelProcessing(false);  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();  final long endSerial=System.currentTimeMillis();  victim.setParallelProcessing(true);  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();  final long endParallel=System.currentTimeMillis();  final long serial=endSerial - begin;  final long parallel=endParallel - endSerial;  LOG.info("serial took: {}ms",serial);  LOG.info("parallel took: {}ms",parallel);  assertTrue(String.format("Serial (%s) > Parallel (%s)",serial,parallel),serial > parallel);}  }
class C{  @Override public void floatWrite(ObjectReference src,Address slot,float value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.floatWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public void testToString(){  LinkedBlockingQueue q=populatedQueue(SIZE);  String s=q.toString();  for (int i=0; i < SIZE; ++i) {    assertTrue(s.indexOf(String.valueOf(i)) >= 0);  }}  }
class C{  public Builder(Context context){  mContext=context;}  }
class C{  void closeInternal() throws SQLException {  if (result != null) {    try {      result.close();      if (closeStatement && stat != null) {        stat.close();      }    }  finally {      columnCount=0;      result=null;      stat=null;      conn=null;      insertRow=null;      updateRow=null;    }  }}  }
class C{  private List parseTests(List testElements,int caseIndex,File testFile,TestCase testCase,double tolerance) throws TestParseException {  List tests=new ArrayList();  int testIndex=0;  for (Iterator i=testElements.iterator(); i.hasNext(); ) {    Element testElement=(Element)i.next();    testIndex++;    try {      Element descElement=testElement.getChild("desc");      if (testElement.getChildren("op").size() > 1) {        throw new TestParseException("Multiple <op>s in <test>");      }      Element opElement=testElement.getChild("op");      if (opElement == null) {        throw new TestParseException("Missing <op> in <test>");      }      Attribute nameAttribute=opElement.getAttribute("name");      if (nameAttribute == null) {        throw new TestParseException("Missing name attribute in <op>");      }      String arg1=opElement.getAttribute("arg1") == null ? "A" : opElement.getAttribute("arg1").getValue().trim();      String arg2=opElement.getAttribute("arg2") == null ? null : opElement.getAttribute("arg2").getValue().trim();      String arg3=opElement.getAttribute("arg3") == null ? null : opElement.getAttribute("arg3").getValue().trim();      if (arg3 == null && nameAttribute.getValue().trim().equalsIgnoreCase("relate")) {        arg3=opElement.getAttribute("pattern") == null ? null : opElement.getAttribute("pattern").getValue().trim();      }      ArrayList arguments=new ArrayList();      if (arg2 != null) {        arguments.add(arg2);      }      if (arg3 != null) {        arguments.add(arg3);      }      Result result=toResult(opElement.getTextTrim(),nameAttribute.getValue().trim(),testCase.getTestRun());      Test test=new Test(testCase,testIndex,descElement != null ? descElement.getTextTrim() : "",nameAttribute.getValue().trim(),arg1,arguments,result,tolerance);      tests.add(test);    } catch (    Exception e) {      parsingProblems.add("An exception occurred while parsing <test> " + testIndex + " in <case> "+ caseIndex+ " in "+ testFile+ ": "+ e.toString()+ "\n"+ StringUtil.getStackTrace(e));    }  }  return tests;}  }
class C{  private void insertCdrom(VirtualCdrom cdrom,String imagePath){  VirtualCdromIsoBackingInfo backing=new VirtualCdromIsoBackingInfo();  backing.setFileName(imagePath);  cdrom.setBacking(backing);}  }
class C{  public static boolean equals(short[][][] left,short[][][] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=equals(left[i],right[i]);  }  return result;}  }
class C{  public CVisibilityCriteriumPanel(final CVisibilityCriterium criterium){  super(new BorderLayout());  visibilityCriterium=criterium;  visibilityStateBox.addActionListener(visibilityStateBoxListener);  initPanel();}  }
class C{  private static void oddParity(final byte[] bytes){  for (int i=0; i < bytes.length; i++) {    final byte b=bytes[i];    final boolean needsParity=(((b >>> 7) ^ (b >>> 6) ^ (b >>> 5)^ (b >>> 4)^ (b >>> 3)^ (b >>> 2)^ (b >>> 1)) & 0x01) == 0;    if (needsParity) {      bytes[i]|=(byte)0x01;    } else {      bytes[i]&=(byte)0xfe;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatetextnode.class,args);}  }
class C{  @Deprecated public ExecutionWindowInfo create(ExecutionWindowInfo window){  return client.post(ExecutionWindowInfo.class,window,baseUrl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:04.369 -0500",hash_original_method="8B0F316F14E4B2EBE1AD9D0407358FB5",hash_generated_method="78FFD442CB305199059CB561CEF465DD") public X509CertImpl(InputStream in) throws CertificateException {  try {    this.certificate=(Certificate)Certificate.ASN1.decode(in);    this.tbsCert=certificate.getTbsCertificate();    this.extensions=tbsCert.getExtensions();  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public String describeType(){  return getClass().getSimpleName();}  }
class C{  @Override protected TrackListener createTrackListener(JSlider slider){  return new RangeTrackListener();}  }
class C{  public void add(String source,Population population){  if (populations.containsKey(source)) {    throw new IllegalArgumentException("source already exists");  }  populations.put(source,population);  for (  Solution solution : population) {    solution.setAttribute(SOURCE_ATTRIBUTE,source);    for (    Solution s : combinedPopulation) {      if (MathArrays.distance(s.getObjectives(),solution.getObjectives()) < Settings.EPS) {        System.err.println("duplicate solution found");      }    }    combinedPopulation.add(solution);  }}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  return true;}  }
class C{  public void check() throws DuplicateException {  for (  ChunkedHashStore.Chunk b : this)   b.iterator();}  }
class C{  private Volume updatePostSwapPersonalities(Volume volume) throws InternalException {  _log.info("Changing personality of source and targets");  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());  List<URI> volumeIDs=new ArrayList<URI>();  for (  String volumeString : protectionSet.getVolumes()) {    URI volumeURI;    try {      volumeURI=new URI(volumeString);      volumeIDs.add(volumeURI);    } catch (    URISyntaxException e) {      _log.error("URI syntax incorrect: ",e);    }  }  for (  URI protectionVolumeID : volumeIDs) {    Volume protectionVolume=_dbClient.queryObject(Volume.class,protectionVolumeID);    if ((protectionVolume.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) && (protectionVolume.getRpCopyName().equals(volume.getRpCopyName()))) {      for (      URI potentialTargetVolumeID : volumeIDs) {        Volume potentialTargetVolume=_dbClient.queryObject(Volume.class,potentialTargetVolumeID);        if (!potentialTargetVolume.checkPersonality(Volume.PersonalityTypes.METADATA.toString()) && NullColumnValueGetter.isNotNullValue(potentialTargetVolume.getRSetName()) && potentialTargetVolume.getRSetName().equals(protectionVolume.getRSetName())&& !potentialTargetVolumeID.equals(protectionVolume.getId())) {          if (protectionVolume.getRpTargets() == null) {            protectionVolume.setRpTargets(new StringSet());          }          protectionVolume.getRpTargets().add(String.valueOf(potentialTargetVolume.getId()));        }      }      _log.info("Change personality of failover target " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient) + " to source");      protectionVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());      protectionVolume.setAccessState(Volume.VolumeAccessState.READWRITE.name());      protectionVolume.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());      _dbClient.updateObject(protectionVolume);    } else     if (protectionVolume.checkPersonality(Volume.PersonalityTypes.SOURCE.toString())) {      _log.info("Change personality of source volume " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient) + " to target");      protectionVolume.setPersonality(Volume.PersonalityTypes.TARGET.toString());      protectionVolume.setAccessState(Volume.VolumeAccessState.NOT_READY.name());      protectionVolume.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());      protectionVolume.setRpTargets(new StringSet());      _dbClient.updateObject(protectionVolume);    } else     if (!protectionVolume.checkPersonality(Volume.PersonalityTypes.METADATA.toString())) {      _log.info("Target " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient) + " is a target that remains a target");    }  }  return _dbClient.queryObject(Volume.class,volume.getId());}  }
class C{  @Override public String toConsoleString(){  return Photon.isConsoleAdvanced() ? toColorfoulConsoleString() : toBasicConsoleString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endObject() throws IOException {  expect(JsonToken.END_OBJECT);}  }
class C{  private void init(String version) throws UnsupportedUnicodeVersionException {  if (version.equals("1.1") || version.equals("1.1.5")) {    bind(Unicode_1_1.propertyValues,Unicode_1_1.intervals,Unicode_1_1.propertyValueAliases,Unicode_1_1.maximumCodePoint,Unicode_1_1.caselessMatchPartitions,Unicode_1_1.caselessMatchPartitionSize);  } else   if (version.equals("2") || version.equals("2.0") || version.equals("2.0.14")) {    bind(Unicode_2_0.propertyValues,Unicode_2_0.intervals,Unicode_2_0.propertyValueAliases,Unicode_2_0.maximumCodePoint,Unicode_2_0.caselessMatchPartitions,Unicode_2_0.caselessMatchPartitionSize);  } else   if (version.equals("2.1") || version.equals("2.1.9")) {    bind(Unicode_2_1.propertyValues,Unicode_2_1.intervals,Unicode_2_1.propertyValueAliases,Unicode_2_1.maximumCodePoint,Unicode_2_1.caselessMatchPartitions,Unicode_2_1.caselessMatchPartitionSize);  } else   if (version.equals("3") || version.equals("3.0") || version.equals("3.0.1")) {    bind(Unicode_3_0.propertyValues,Unicode_3_0.intervals,Unicode_3_0.propertyValueAliases,Unicode_3_0.maximumCodePoint,Unicode_3_0.caselessMatchPartitions,Unicode_3_0.caselessMatchPartitionSize);  } else   if (version.equals("3.1") || version.equals("3.1.0")) {    bind(Unicode_3_1.propertyValues,Unicode_3_1.intervals,Unicode_3_1.propertyValueAliases,Unicode_3_1.maximumCodePoint,Unicode_3_1.caselessMatchPartitions,Unicode_3_1.caselessMatchPartitionSize);  } else   if (version.equals("3.2") || version.equals("3.2.0")) {    bind(Unicode_3_2.propertyValues,Unicode_3_2.intervals,Unicode_3_2.propertyValueAliases,Unicode_3_2.maximumCodePoint,Unicode_3_2.caselessMatchPartitions,Unicode_3_2.caselessMatchPartitionSize);  } else   if (version.equals("4") || version.equals("4.0") || version.equals("4.0.1")) {    bind(Unicode_4_0.propertyValues,Unicode_4_0.intervals,Unicode_4_0.propertyValueAliases,Unicode_4_0.maximumCodePoint,Unicode_4_0.caselessMatchPartitions,Unicode_4_0.caselessMatchPartitionSize);  } else   if (version.equals("4.1") || version.equals("4.1.0")) {    bind(Unicode_4_1.propertyValues,Unicode_4_1.intervals,Unicode_4_1.propertyValueAliases,Unicode_4_1.maximumCodePoint,Unicode_4_1.caselessMatchPartitions,Unicode_4_1.caselessMatchPartitionSize);  } else   if (version.equals("5") || version.equals("5.0") || version.equals("5.0.0")) {    bind(Unicode_5_0.propertyValues,Unicode_5_0.intervals,Unicode_5_0.propertyValueAliases,Unicode_5_0.maximumCodePoint,Unicode_5_0.caselessMatchPartitions,Unicode_5_0.caselessMatchPartitionSize);  } else   if (version.equals("5.1") || version.equals("5.1.0")) {    bind(Unicode_5_1.propertyValues,Unicode_5_1.intervals,Unicode_5_1.propertyValueAliases,Unicode_5_1.maximumCodePoint,Unicode_5_1.caselessMatchPartitions,Unicode_5_1.caselessMatchPartitionSize);  } else   if (version.equals("5.2") || version.equals("5.2.0")) {    bind(Unicode_5_2.propertyValues,Unicode_5_2.intervals,Unicode_5_2.propertyValueAliases,Unicode_5_2.maximumCodePoint,Unicode_5_2.caselessMatchPartitions,Unicode_5_2.caselessMatchPartitionSize);  } else   if (version.equals("6") || version.equals("6.0") || version.equals("6.0.0")) {    bind(Unicode_6_0.propertyValues,Unicode_6_0.intervals,Unicode_6_0.propertyValueAliases,Unicode_6_0.maximumCodePoint,Unicode_6_0.caselessMatchPartitions,Unicode_6_0.caselessMatchPartitionSize);  } else   if (version.equals("6.1") || version.equals("6.1.0")) {    bind(Unicode_6_1.propertyValues,Unicode_6_1.intervals,Unicode_6_1.propertyValueAliases,Unicode_6_1.maximumCodePoint,Unicode_6_1.caselessMatchPartitions,Unicode_6_1.caselessMatchPartitionSize);  } else   if (version.equals("6.2") || version.equals("6.2.0")) {    bind(Unicode_6_2.propertyValues,Unicode_6_2.intervals,Unicode_6_2.propertyValueAliases,Unicode_6_2.maximumCodePoint,Unicode_6_2.caselessMatchPartitions,Unicode_6_2.caselessMatchPartitionSize);  } else   if (version.equals("6.3") || version.equals("6.3.0")) {    bind(Unicode_6_3.propertyValues,Unicode_6_3.intervals,Unicode_6_3.propertyValueAliases,Unicode_6_3.maximumCodePoint,Unicode_6_3.caselessMatchPartitions,Unicode_6_3.caselessMatchPartitionSize);  } else   if (version.equals("7") || version.equals("7.0") || version.equals("7.0.0")) {    bind(Unicode_7_0.propertyValues,Unicode_7_0.intervals,Unicode_7_0.propertyValueAliases,Unicode_7_0.maximumCodePoint,Unicode_7_0.caselessMatchPartitions,Unicode_7_0.caselessMatchPartitionSize);  } else   if (version.equals("8") || version.equals("8.0") || version.equals("8.0.0")) {    bind(Unicode_8_0.propertyValues,Unicode_8_0.intervals,Unicode_8_0.propertyValueAliases,Unicode_8_0.maximumCodePoint,Unicode_8_0.caselessMatchPartitions,Unicode_8_0.caselessMatchPartitionSize);  } else {    throw new UnsupportedUnicodeVersionException();  }}  }
class C{  public void addCurrencies() throws Exception {  operatorService.addCurrency("EUR");  operatorService.addCurrency("USD");  operatorService.addCurrency("JPY");}  }
class C{  public JUserNotice(String title){  this.title=title;  initComponents();}  }
class C{  public Disposable scheduleAtFixedRate(Runnable command,long initialDelay,long delay,TimeUnit unit){  return _scheduler.scheduleAtFixedRate(command,initialDelay,delay,unit);}  }
class C{  public synchronized Object elementAt(int index){  if (index >= elementCount) {    throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);  }  return elementData[index];}  }
class C{  protected ModbusSlave(SerialParameters serialParams) throws ModbusException {  this(ModbusSlaveType.SERIAL,0,0,serialParams);}  }
class C{  public void endDestroySend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(destroySendInProgressId,-1);  int endDestroySendId;  if (failed) {    endDestroySendId=destroySendFailedId;  } else {    endDestroySendId=destroySendId;  }  this.sendStats.incInt(endDestroySendId,1);  this.stats.incLong(destroySendDurationId,duration);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BarRenderer3D)) {    return false;  }  BarRenderer3D that=(BarRenderer3D)obj;  if (this.xOffset != that.xOffset) {    return false;  }  if (this.yOffset != that.yOffset) {    return false;  }  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {    return false;  }  return super.equals(obj);}  }
class C{  protected AbstractVariableDefParsing(boolean acceptFrontVarDef,IElementType commandElementType,String commandText,boolean acceptVarAssignments,boolean acceptArrayVars){  this.acceptFrontVarDef=acceptFrontVarDef;  this.commandElementType=commandElementType;  this.commandName=commandText;  this.acceptArrayVars=acceptArrayVars;  if (acceptVarAssignments) {    parsingMode=CommandParsingUtil.Mode.LaxAssignmentMode;  } else {    parsingMode=CommandParsingUtil.Mode.SimpleMode;  }}  }
class C{  public static long median(List<Long> values){  if (values.size() == 0) {    throw new IllegalArgumentException("Median of an empty list is not defined.");  }  Collections.sort(values);  int middle=values.size() / 2;  if (values.size() % 2 == 0) {    return (values.get(middle - 1) + values.get(middle)) / 2;  } else {    return values.get(middle);  }}  }
class C{  public static boolean isRecognizedEncoding(String encoding){  EncodingInfo ei;  String normalizedEncoding=encoding.toUpperCase();  ei=(EncodingInfo)_encodingTableKeyJava.get(normalizedEncoding);  if (ei == null)   ei=(EncodingInfo)_encodingTableKeyMime.get(normalizedEncoding);  if (ei != null)   return true;  return false;}  }
class C{  protected static KeyStore buildKeyStore(Resource resource,String password){  try {    return CertificateUtils.getKeyStore(resource,"JKS",null,password);  } catch (  Exception ex) {    throw new IllegalStateException("Unable to build KeyStore from resource: " + resource.getName(),ex);  }}  }
class C{  public DegreeScorer(Hypergraph<V,?> graph){  this.graph=graph;}  }
class C{  protected boolean beforeDelete(){  int[] ids=MEXPFormatLine.getAllIDs(MEXPFormatLine.Table_Name,"EXP_Format_ID=" + getEXP_Format_ID(),get_TrxName());  for (  int id : ids) {    MEXPFormatLine line=new MEXPFormatLine(getCtx(),id,get_TrxName());    line.delete(true);  }  return true;}  }
class C{  public static double atan(double a){  return StrictMath.atan(a);}  }
class C{  public Position createPosition(int offset) throws BadLocationException {  while (queue.poll() != null) {    unusedMarks++;  }  if (unusedMarks > Math.max(5,(marks.size() / 10))) {    removeUnusedMarks();  }  int g0=getGapStart();  int g1=getGapEnd();  int index=(offset < g0) ? offset : offset + (g1 - g0);  search.index=index;  int sortIndex=findSortIndex(search);  MarkData m;  StickyPosition position;  if (sortIndex < marks.size() && (m=marks.elementAt(sortIndex)).index == index && (position=m.getPosition()) != null) {  } else {    position=new StickyPosition();    m=new MarkData(index,position,queue);    position.setMark(m);    marks.insertElementAt(m,sortIndex);  }  return position;}  }
class C{  public static ValueTimestamp convertTimestamp(Timestamp x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  long nanos=nanosFromCalendar(cal);  nanos+=x.getNanos() % 1000000;  return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}  }
class C{  public SendableTextMessage.SendableTextMessageBuilder parseMode(ParseMode parseMode){  this.parseMode=parseMode;  return this;}  }
class C{  public PoliticalArea(String name,String identifier){  this.id=identifier;  this.name=name;  geometry=new OMGeometryList();}  }
class C{  public FilterFileChooserDescriptor(final String title,final String description){  super(false,true,false,true,false,false);  setTitle(title);  setDescription(description);  _fileFilter=new DirectoryFileFilter();}  }
class C{  public void test_blob_allocs(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final long numAllocs=rw.getTotalAllocations();    final long startAllocations=rw.getTotalAllocationsSize();    final int startBlob=1024 * 256;    final int endBlob=1024 * 1256;    final int[] faddrs=allocBatchBuffer(rw,100,startBlob,endBlob);    if (log.isInfoEnabled()) {      final StringBuilder str=new StringBuilder();      rw.showAllocators(str);      log.info(str);    }  }  finally {    store.destroy();  }}  }
class C{  public boolean containedBy(Instance instance){  for (int i=0; i < instance.numAttributes(); i++) {    if (m_items[i] > -1) {      if (instance.isMissing(i)) {        return false;      }      if (m_items[i] != (int)instance.value(i)) {        return false;      }    }  }  return true;}  }
class C{  private void exit(){  try {    connect.close();  } catch (  javax.jms.JMSException jmse) {    jmse.printStackTrace();  }  System.exit(0);}  }
class C{  public ColumnItem(final ColumnItem parent){  if (parent == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (parent.widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.widget=parent.widget;  this.parent=parent;  this.children=new ArrayList<ColumnItem>();  parent.children.add(this);  parent.widget.updateContent();}  }
class C{  public void updateGenreSongCount(){  String genre="";  int songCount=0;  int buildingGenresIncrement;  currentTask="Building Genres";  if (genresList.size() != 0) {    buildingGenresIncrement=100000 / genresList.size();  } else {    buildingGenresIncrement=100000 / 1;  }  for (int i=0; i < genresList.size(); i++) {    currentProgressValue=currentProgressValue + buildingGenresIncrement;    publishProgress();    try {      genre=genresList.get(i);      if (genre.contains("'")) {        genre=genre.replace("'","''");      }      songCount=mApp.getDBAccessHelper().getGenreSongCount(genre);      mApp.getDBAccessHelper().insertNumberOfSongsInGenre(genre,songCount);    } catch (    Exception e) {      e.printStackTrace();      continue;    }  }}  }
class C{  public static Vector3D transform(Vector3D vector,RealMatrix m){  double x, y, z, w;  x=m.getEntry(0,0) * vector.getX() + m.getEntry(1,0) * vector.getY() + m.getEntry(2,0) * vector.getZ() + m.getEntry(3,0);  y=m.getEntry(0,1) * vector.getX() + m.getEntry(1,1) * vector.getY() + m.getEntry(2,1) * vector.getZ() + m.getEntry(3,1);  z=m.getEntry(0,2) * vector.getX() + m.getEntry(1,2) * vector.getY() + m.getEntry(2,2) * vector.getZ() + m.getEntry(3,2);  w=m.getEntry(0,3) * vector.getX() + m.getEntry(1,3) * vector.getY() + m.getEntry(2,3) * vector.getZ() + m.getEntry(3,3);  return new Vector3D(x / w,y / w,z / w);}  }
class C{  public void testValueOfIntegerMax(){  long longVal=Integer.MAX_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={127,-1,-1,-1};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @Override public void C(final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.C() called from=" + formObj.getObjectRefAsString());  }  if (Ccalled.get(formObj.getObjectRefAsString()) != null) {    return;  }  Ccalled.put(formObj.getObjectRefAsString(),"1");  javascript.execute(formObj,PdfDictionary.C2,ActionHandler.FOCUS_EVENT,' ');  Ccalled.remove(formObj.getObjectRefAsString());}  }
class C{  public CompoundRegionSnapshot(String regionName){  this.name=regionName;}  }
class C{  public static void closeSafely(@Nullable Iterable<? extends CloseableReference<?>> references){  if (references != null) {    for (    CloseableReference<?> ref : references) {      closeSafely(ref);    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private EditMode(final String name,final String cursorName){  Toolkit toolkit=Toolkit.getDefaultToolkit();  Image image=ResourceManager.getImage(cursorName);  if (name.equals("selection")) {    this.cursor=Cursor.getDefaultCursor();  } else {    this.cursor=toolkit.createCustomCursor(image,CENTER_POINT,name);  }}  }
class C{  public AsyncResult FindServersOnNetworkAsync(RequestHeader RequestHeader,UnsignedInteger StartingRecordId,UnsignedInteger MaxRecordsToReturn,String... ServerCapabilityFilter){  FindServersOnNetworkRequest req=new FindServersOnNetworkRequest(RequestHeader,StartingRecordId,MaxRecordsToReturn,ServerCapabilityFilter);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CMemoryModuleWrapper(final MemoryModule module){  m_module=module;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof Clock) {    setClock((Clock)someObj);    getTimelinePanel().getMapHandler().add(someObj);    getTimeSliderPanel().getMapHandler().add(someObj);  }  if (someObj instanceof OMEventSelectionCoordinator) {    getTimelinePanel().getMapHandler().add(someObj);  }  if (someObj instanceof EventPresenter) {    getTimelinePanel().getMapHandler().add(someObj);  }}  }
class C{  synchronized boolean expire(long threshold){  if (state == IDLE && idleSince < threshold) {    d("expire(): expired");    state=EXPIRED;    conn.closeConnection();    return true;  } else {    d("expire(): not expired");    return false;  }}  }
class C{  private void runInitScriptIfRequired(String url,Connection connection) throws SQLException {  Matcher matcher=INITSCRIPT_MATCHING_PATTERN.matcher(url);  if (matcher.matches()) {    String initScriptPath=matcher.group(2);    try {      URL resource=Resources.getResource(initScriptPath);      String sql=Resources.toString(resource,Charsets.UTF_8);      ScriptUtils.executeSqlScript(connection,initScriptPath,sql);    } catch (    IOException|IllegalArgumentException e) {      LOGGER.warn("Could not load classpath init script: {}",initScriptPath);      throw new SQLException("Could not load classpath init script: " + initScriptPath,e);    }catch (    ScriptException e) {      LOGGER.error("Error while executing init script: {}",initScriptPath,e);      throw new SQLException("Error while executing init script: " + initScriptPath,e);    }  }}  }
class C{  @Override public FactoryDto createFactory(@NotNull final Map<String,String> factoryParameters) throws BadRequestException {  final GithubUrl githubUrl=githubUrlParser.parse(factoryParameters.get("url"));  FactoryDto factory=urlFactoryBuilder.createFactory(CreateFactoryParams.create().codenvyJsonFileLocation(githubUrl.codenvyFactoryJsonFileLocation()));  if (factory.getWorkspace() == null) {    factory.setWorkspace(urlFactoryBuilder.buildWorkspaceConfig(githubUrl.repository(),githubUrl.username(),githubUrl.codenvyDockerFileLocation()));  }  ProjectConfigDto projectConfigDto=newDto(ProjectConfigDto.class).withSource(githubSourceStorageBuilder.build(githubUrl)).withName(githubUrl.repository()).withType("blank").withPath("/".concat(githubUrl.repository()));  return projectConfigDtoMerger.merge(factory,projectConfigDto);}  }
class C{  public void clear(){  size=0;}  }
class C{  public static boolean requiresBidi(char[] text,int start,int limit){  return BidiBase.requiresBidi(text,start,limit);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) @Path("") public CatalogServiceRestRep createCatalogService(CatalogServiceCreateParam createParam){  StorageOSUser user=getUserFromContext();  CatalogCategory parentCatalogCategory=catalogCategoryManager.getCatalogCategoryById(createParam.getCatalogCategory());  verifyAuthorizedInTenantOrg(uri(parentCatalogCategory.getTenant()),user);  validateParam(createParam,null);  CatalogService catalogService=createNewObject(createParam,parentCatalogCategory);  List<CatalogServiceField> catalogServiceFields=createNewObjectList(catalogService,createParam.getCatalogServiceFields());  catalogServiceManager.createCatalogService(catalogService,catalogServiceFields);  auditOpSuccess(OperationTypeEnum.CREATE_CATALOG_SERVICE,catalogService.auditParameters());  catalogService=catalogServiceManager.getCatalogServiceById(catalogService.getId());  catalogServiceFields=catalogServiceManager.getCatalogServiceFields(catalogService.getId());  ServiceDescriptor serviceDescriptor=getServiceDescriptor(catalogService);  return map(catalogService,serviceDescriptor,catalogServiceFields);}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void replaceFile(String pathFile,String fileExt){  m_doc.replaceFile(pathFile,fileExt);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList();}  }
class C{  @Override protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  float div=(float)step + (step > 1 ? bd.getGroupSpace() : 0f);  float min=(float)mMinX / div;  float max=(float)mMaxX / div;  for (int i=(int)min; i <= max; i+=mXAxis.mAxisLabelModulus) {    position[0]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[0]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0]) && i >= 0 && i < mXAxis.getValues().size()) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      c.drawText(label,position[0],pos,mAxisLabelPaint);    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1__EXTENDS_NAME_1:    return EXTENDS_NAME_1_EDEFAULT == null ? extendsName_1 != null : !EXTENDS_NAME_1_EDEFAULT.equals(extendsName_1);}return super.eIsSet(featureID);}  }
class C{  private void scanReal() throws IOException {  boolean seenExponent=false;  boolean isSingleFloat=false;  char lastChar;  if (ch == '.') {    putc(ch);    ch=in.read();  }  numberLoop:   for (; ; ch=in.read()) {switch (ch) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      putc(ch);    break;case 'e':case 'E':  if (seenExponent)   break numberLoop;putc(ch);seenExponent=true;break;case '+':case '-':lastChar=buffer[count - 1];if (lastChar != 'e' && lastChar != 'E') break numberLoop;putc(ch);break;case 'f':case 'F':ch=in.read();isSingleFloat=true;break numberLoop;case 'd':case 'D':ch=in.read();default :break numberLoop;}}if (Character.isJavaLetterOrDigit((char)ch) || ch == '.') {env.error(in.pos,"invalid.number");do {ch=in.read();} while (Character.isJavaLetterOrDigit((char)ch) || ch == '.');doubleValue=0;token=DOUBLEVAL;} else {token=isSingleFloat ? FLOATVAL : DOUBLEVAL;try {lastChar=buffer[count - 1];if (lastChar == 'e' || lastChar == 'E' || lastChar == '+' || lastChar == '-') {env.error(in.pos - 1,"float.format");} else if (isSingleFloat) {String string=bufferString();floatValue=Float.valueOf(string).floatValue();if (Float.isInfinite(floatValue)) {env.error(pos,"overflow.float");} else if (floatValue == 0 && !looksLikeZero(string)) {env.error(pos,"underflow.float");}} else {String string=bufferString();doubleValue=Double.valueOf(string).doubleValue();if (Double.isInfinite(doubleValue)) {env.error(pos,"overflow.double");} else if (doubleValue == 0 && !looksLikeZero(string)) {env.error(pos,"underflow.double");}}} catch (NumberFormatException ee) {env.error(pos,"float.format");doubleValue=0;floatValue=0;}}return;}  }
class C{  public static int EILSEQ(){  return Errno.EILSEQ.intValue();}  }
class C{  public void reply(SerialReply r){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(r.getAddr());  if (node != null) {    node.markChanges(r);  }}  }
class C{  public CAddAddressSpaceAction(final JComponent parent,final INaviProject project,final INodeSelectionUpdater updater){  super("Add address space");  m_parent=Preconditions.checkNotNull(parent,"IE01849: Parent argument can't be null");  m_project=Preconditions.checkNotNull(project,"IE01850: Project argument can't be null");  m_updater=Preconditions.checkNotNull(updater,"IE02335: Updater argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.ADDRESS_SPACE_SELECTION_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_ADD_ADDRESSSPACE".charAt(0));}  }
class C{  public static String toHex(byte[] bytes){  if (bytes == null)   return "null";  return toHex(bytes,0,bytes.length);}  }
class C{  public boolean poorLinkDetected(int rssi){  if (DBG)   logd("Poor link detected, rssi=" + rssi);  long now=SystemClock.elapsedRealtime();  long lastGood=now - mLastTimeGood;  long lastPoor=now - mLastTimePoor;  while (mGoodLinkTargetIndex > 0 && lastPoor >= GOOD_LINK_TARGET[mGoodLinkTargetIndex - 1].REDUCE_TIME_MS)   mGoodLinkTargetIndex--;  mGoodLinkTargetCount=GOOD_LINK_TARGET[mGoodLinkTargetIndex].SAMPLE_COUNT;  int from=rssi + GOOD_LINK_RSSI_RANGE_MIN;  int to=rssi + GOOD_LINK_RSSI_RANGE_MAX;  mGoodLinkTargetRssi=findRssiTarget(from,to,GOOD_LINK_LOSS_THRESHOLD);  mGoodLinkTargetRssi+=GOOD_LINK_TARGET[mGoodLinkTargetIndex].RSSI_ADJ_DBM;  if (mGoodLinkTargetIndex < GOOD_LINK_TARGET.length - 1)   mGoodLinkTargetIndex++;  int p=0, pmax=MAX_AVOID_TIME.length - 1;  while (p < pmax && rssi >= MAX_AVOID_TIME[p + 1].MIN_RSSI_DBM)   p++;  long avoidMax=MAX_AVOID_TIME[p].TIME_MS;  if (avoidMax <= 0)   return false;  mBssidAvoidTimeMax=now + avoidMax;  if (DBG)   logd("goodRssi=" + mGoodLinkTargetRssi + " goodCount="+ mGoodLinkTargetCount+ " lastGood="+ lastGood+ " lastPoor="+ lastPoor+ " avoidMax="+ avoidMax);  return true;}  }
class C{  private static boolean hasSideEffect(SsaInsn insn){  if (insn == null) {    return true;  }  return insn.hasSideEffect();}  }
class C{  public void postOnWall(String userId,String message,String name,String link,String description,String picture,String caption,ActionListener callback) throws IOException {  checkAuthentication();  FacebookRESTService con=new FacebookRESTService(token,userId,FacebookRESTService.FEED,true);  if (message != null) {    con.addArgument("message",message);  }  if (name != null) {    con.addArgument("name",name);  }  if (link != null) {    con.addArgument("link",link);  }  if (description != null) {    con.addArgument("description",description);  }  if (picture != null) {    con.addArgument("picture",picture);  }  if (caption != null) {    con.addArgument("caption",caption);  }  con.addResponseListener(new Listener(con,callback));  if (slider != null) {    SliderBridge.bindProgress(con,slider);  }  for (int i=0; i < responseCodeListeners.size(); i++) {    con.addResponseCodeListener((ActionListener)responseCodeListeners.elementAt(i));  }  current=con;  NetworkManager.getInstance().addToQueueAndWait(con);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.ESCAPED_CHARACTER_CLASS_ATOM;}  }
class C{  public void cache(Object key,T value){  put(key,value);}  }
class C{  public static ResponseEntity<InputStream> writeFileResponse(final Artifact artifact,final HttpServletResponse response,final HttpServletRequest request,final DbArtifact file,final ControllerManagement controllerManagement,final Long statusId){  ResponseEntity<InputStream> result;  final String etag=artifact.getSha1Hash();  final Long lastModified=artifact.getLastModifiedAt() != null ? artifact.getLastModifiedAt() : artifact.getCreatedAt();  final long length=file.getSize();  response.reset();  response.setBufferSize(BUFFER_SIZE);  response.setHeader(CONTENT_DISPOSITION,"attachment;filename=" + artifact.getFilename());  response.setHeader(ETAG,etag);  response.setHeader(ACCEPT_RANGES,"bytes");  response.setDateHeader(LAST_MODIFIED,lastModified);  response.setContentType(APPLICATION_OCTET_STREAM_VALUE);  final ByteRange full=new ByteRange(0,length - 1,length);  final List<ByteRange> ranges=new ArrayList<>();  final String range=request.getHeader("Range");  if (range != null) {    LOG.debug("range header for filename ({}) is: {}",artifact.getFilename(),range);    if (!range.matches("^bytes=\\d*-\\d*(,\\d*-\\d*)*$")) {      response.setHeader(CONTENT_RANGE,"bytes */" + length);      LOG.debug("range header for filename ({}) is not satisfiable: ",artifact.getFilename());      return new ResponseEntity<>(REQUESTED_RANGE_NOT_SATISFIABLE);    }    checkForShortcut(request,etag,lastModified,full,ranges);    result=extractRange(response,length,ranges,range);    if (result != null) {      return result;    }  }  if (ranges.isEmpty() || ranges.get(0).equals(full)) {    LOG.debug("filename ({}) results into a full request: ",artifact.getFilename());    handleFullFileRequest(artifact,response,file,controllerManagement,statusId,full);    result=new ResponseEntity<>(OK);  } else   if (ranges.size() == 1) {    LOG.debug("filename ({}) results into a standard range request: ",artifact.getFilename());    handleStandardRangeRequest(artifact,response,file,controllerManagement,statusId,ranges);    result=new ResponseEntity<>(PARTIAL_CONTENT);  } else {    LOG.debug("filename ({}) results into a multipart range request: ",artifact.getFilename());    handleMultipartRangeRequest(artifact,response,file,controllerManagement,statusId,ranges);    result=new ResponseEntity<>(PARTIAL_CONTENT);  }  return result;}  }
class C{  public Weeks minus(Weeks weeks){  if (weeks == null) {    return this;  }  return minus(weeks.getValue());}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public boolean isAlternate(){  for (  Track track : getLocation().getTrackList()) {    if (track.getAlternateTrack() == this) {      return true;    }  }  return false;}  }
class C{  public void launchTracker(){  AbstractLaunch launch=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (launch instanceof LaunchSanta) {    LaunchSanta tracker=(LaunchSanta)launch;    AnalyticsManager.sendEvent(R.string.analytics_event_category_launch,R.string.analytics_launch_action_village);    MeasurementManager.recordCustomEvent(mMeasurement,getString(R.string.analytics_event_category_launch),getString(R.string.analytics_launch_action_village));    tracker.onClick(mLaunchButton);  }}  }
class C{  @Override public String toString(){  return Objects.toStringHelper(this).add("player",player).toString();}  }
class C{  @Deprecated public void endClass(long off,ClassDefinition c){  endClass(off,c.getName().getFlatName().getName());}  }
class C{  public <T>AssumptionViolatedException(String message,T expected,Matcher<T> matcher){  super(message,expected,matcher);}  }
class C{  public RpcClient peerWith(PeerInfo serverInfo,Bootstrap bootstrap,Map<String,Object> attributes) throws IOException {  InetSocketAddress remoteAddress=new InetSocketAddress(serverInfo.getHostName(),serverInfo.getPort());  return peerWith(remoteAddress,bootstrap,attributes);}  }
class C{  private void checkMatchingDimensions(Expression expr1,Expression expr2,boolean allowsMV) throws LanguageException {  if (expr1 != null && expr2 != null) {    if (expr1.getOutput().getDim1() == -1 || expr2.getOutput().getDim1() == -1 || expr1.getOutput().getDim2() == -1 || expr2.getOutput().getDim2() == -1) {      return;    } else     if ((!allowsMV && expr1.getOutput().getDim1() != expr2.getOutput().getDim1()) || (allowsMV && expr1.getOutput().getDim1() != expr2.getOutput().getDim1() && expr2.getOutput().getDim1() != 1) || (!allowsMV && expr1.getOutput().getDim2() != expr2.getOutput().getDim2())|| (allowsMV && expr1.getOutput().getDim2() != expr2.getOutput().getDim2() && expr2.getOutput().getDim2() != 1)) {      raiseValidateError("Mismatch in matrix dimensions of parameters for function " + this.getOpCode(),false,LanguageErrorCodes.INVALID_PARAMETERS);    }  }}  }
class C{  public float dot(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, 0 returned.");    return 0;  }  return x * vec.x + y * vec.y + z * vec.z;}  }
class C{  public boolean hasNext(){  return array.cursorHasNext(cursorId);}  }
class C{  public static String checkNumeric(EventType type,String numericFieldNameX,String numericFieldNameY){  String error=checkFieldNumeric(type,numericFieldNameX);  if (error != null) {    return error;  }  return checkFieldNumeric(type,numericFieldNameY);}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE";  }  String result="";  if ((n & CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY) != 0)   result+="CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY ";  if ((n & CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD ";  return result;}  }
class C{  protected <T extends SpatialComparable>void zSort(List<T> objs,int start,int end,double[] mms,int[] dims,int depth){  final int numdim=(dims != null) ? dims.length : (mms.length >> 1);  final int edim=(dims != null) ? dims[depth] : depth;  final double min=mms[2 * edim], max=mms[2 * edim + 1];  double spos=(min + max) / 2.;  if (max - spos < STOPVAL || spos - min < STOPVAL) {    boolean ok=false;    for (int d=0; d < numdim; d++) {      int d2=((dims != null) ? dims[d] : d) << 1;      if (mms[d2 + 1] - mms[d2] >= STOPVAL) {        ok=true;        break;      }    }    if (!ok) {      return;    }  }  int split=pivotizeList1D(objs,start,end,edim,spos,false);  assert (start <= split && split <= end);  int nextdim=(depth + 1) % numdim;  if (start < split - 1) {    mms[2 * edim]=min;    mms[2 * edim + 1]=spos;    zSort(objs,start,split,mms,dims,nextdim);  }  if (split < end - 1) {    mms[2 * edim]=spos;    mms[2 * edim + 1]=max;    zSort(objs,split,end,mms,dims,nextdim);  }  mms[2 * edim]=min;  mms[2 * edim + 1]=max;}  }
class C{  public List<Service> searchWithPhrase(){  String phrase=getServicePagingBean().getSearchPhrase();  String searchPhrase=WhiteSpaceConverter.replace(phrase);  searchPhrase=searchPhrase.trim();  if (searchPhrase != null && searchPhrase.trim().length() > 0 && (searchResult == null || getServicePagingBean().isNewSearchRequired())) {    getServicePagingBean().resetNewSearchRequired();    try {      VOServiceListResult result=getSearchServiceInternal().searchServices(getMarketplaceId(),getLanguage(),searchPhrase.trim(),PerformanceHint.ONLY_FIELDS_FOR_LISTINGS);      updateServiceListContainsChargeableResellerService(result.getServices());      searchResult=DEFAULT_VOSERVICE_MAPPER.map(result.getServices());    } catch (    InvalidPhraseException e) {      getServicePagingBean().setInvalidSearchPhrase(true);      ExceptionHandler.execute(e);      return Collections.emptyList();    }catch (    SaaSApplicationException e) {      ExceptionHandler.execute(e);    }  }  if (searchResult != null) {    getServicePagingBean().setInvalidSearchPhrase(false);    getServicePagingBean().setResultSize(searchResult.size());  }  categorySelectionBean.setSelectedCategoryId(null);  return searchResult;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("execstatus") @Valid ExecStatus execStatus,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.ExecStatus jpaExecStatus=new com.wipro.ats.bdre.md.dao.jpa.ExecStatus();    jpaExecStatus.setExecStateId(execStatus.getExecStateId());    jpaExecStatus.setDescription(execStatus.getDescription());    execStatusDAO.update(jpaExecStatus);    restWrapper=new RestWrapper(execStatus,RestWrapper.OK);    LOGGER.info("Record with ID:" + execStatus.getExecStateId() + " updated in ExecStatus by User:"+ principal.getName()+ execStatus);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isFirstWindow(AccessibilityWindowInfo baseWindow,int windowType){  int index=getWindowIndex(baseWindow);  if (index <= 0) {    return true;  }  for (int i=index - 1; i > 0; i--) {    AccessibilityWindowInfo window=mWindows.get(i);    if (window != null && window.getType() == windowType) {      return false;    }  }  return true;}  }
class C{  public void printToAlternate(PrintService service,byte[] cmds) throws IOException, PrintException {  File tmp=File.createTempFile("qz_raw_",null);  try {    printToFile(tmp,cmds);    String[] lpCmd=new String[]{"lp","-d",PrintingUtilities.getPrinterId(service.getName()),"-o","raw",tmp.getAbsolutePath()};    boolean success=ShellUtilities.execute(lpCmd);    if (!success) {      throw new PrintException("Alternate printing failed: " + StringUtils.join(lpCmd,' '));    }  }  finally {    if (!tmp.delete()) {      tmp.deleteOnExit();    }  }}  }
class C{  public void addRow(ToArray row){  list.addRow(row);}  }
class C{  private static long assertStatement(BigdataSailRepositoryConnection cxn,URI id,URI pred,Literal label) throws RepositoryException {  cxn.remove(id,pred,null);  check(!cxn.getStatements(id,pred,null,false).hasNext());  cxn.add(id,pred,label);  check(cxn.getStatements(id,pred,label,false).hasNext());  return cxn.commit2();}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public boolean contains(float x,float y){  if (mText == null) {    return false;  }  RectF rect=new RectF(mText.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  return (rect.left < x && rect.right > x && rect.top < y && rect.bottom > y);}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void draw(){  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("draw start");  if (!sDrawPrepared) {    throw new RuntimeException("not prepared");  }  float[] mvp=sTempMVP;  Matrix.multiplyMM(mvp,0,GameSurfaceRenderer.mProjectionMatrix,0,mModelView,0);  GLES20.glUniformMatrix4fv(sMVPMatrixHandle,1,false,mvp,0);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glUniformMatrix4fv");  GLES20.glUniform4fv(sColorHandle,1,mColor,0);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glUniform4fv ");  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,VERTEX_COUNT);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glDrawArrays");}  }
class C{  public CommitContext addInstanceToRemove(Entity entity){  removeInstances.add(entity);  return this;}  }
class C{  @Nonnull public BugInstance addField(String className,String fieldName,String fieldSig,int accessFlags){  addField(new FieldAnnotation(className,fieldName,fieldSig,accessFlags));  return this;}  }
class C{  private final void releaseDTMXRTreeFrags(){  if (m_DTMXRTreeFrags == null) {    return;  }  final Iterator iter=(m_DTMXRTreeFrags.values()).iterator();  while (iter.hasNext()) {    DTMXRTreeFrag frag=(DTMXRTreeFrag)iter.next();    frag.destruct();    iter.remove();  }  m_DTMXRTreeFrags=null;}  }
class C{  public static <T>Optional<T> empty(){  return (Optional<T>)EMPTY;}  }
class C{  public boolean isCompleted(){  return completed;}  }
class C{  public String prettyPrint(final int maxLineLength){  final String originalTraversal="Original Traversal";  final String finalTraversal="Final Traversal";  final int maxStrategyColumnLength=this.strategyTraversals.stream().map(null).map(null).map(null).max(Comparator.naturalOrder()).orElse(15);  final int newLineIndent=maxStrategyColumnLength + 10;  final int maxTraversalColumn=maxLineLength - newLineIndent;  if (maxTraversalColumn < 1)   throw new IllegalArgumentException("The maximum line length is too small to present the " + TraversalExplanation.class.getSimpleName() + ": "+ maxLineLength);  int largestTraversalColumn=Stream.concat(Stream.of(Pair.with(null,this.traversal)),this.strategyTraversals.stream()).map(null).map(null).map(null).flatMap(null).map(null).map(null).map(null).max(Comparator.naturalOrder()).get();  final StringBuilder builder=new StringBuilder("Traversal Explanation\n");  for (int i=0; i < (maxStrategyColumnLength + 7 + largestTraversalColumn); i++) {    builder.append("=");  }  builder.append("\n");  builder.append(originalTraversal);  for (int i=0; i < maxStrategyColumnLength - originalTraversal.length() + 7; i++) {    builder.append(" ");  }  builder.append(wordWrap(this.traversal.toString(),maxTraversalColumn,newLineIndent));  builder.append("\n\n");  for (  final Pair<TraversalStrategy,Traversal.Admin<?,?>> pairs : this.strategyTraversals) {    builder.append(pairs.getValue0());    int spacesToAdd=maxStrategyColumnLength - pairs.getValue0().toString().length() + 1;    for (int i=0; i < spacesToAdd; i++) {      builder.append(" ");    }    builder.append("[").append(pairs.getValue0().getTraversalCategory().getSimpleName().substring(0,1)).append("]");    for (int i=0; i < 3; i++) {      builder.append(" ");    }    builder.append(wordWrap(pairs.getValue1().toString(),maxTraversalColumn,newLineIndent)).append("\n");  }  builder.append("\n");  builder.append(finalTraversal);  for (int i=0; i < maxStrategyColumnLength - finalTraversal.length() + 7; i++) {    builder.append(" ");  }  builder.append(wordWrap((this.strategyTraversals.size() > 0 ? this.strategyTraversals.get(this.strategyTraversals.size() - 1).getValue1().toString() : this.traversal.toString()),maxTraversalColumn,newLineIndent));  return builder.toString();}  }
class C{  protected void stopRMI(){  if (rmiRegistry != null) {    try {      UnicastRemoteObject.unexportObject(rmiRegistry,true);    } catch (    NoSuchObjectException e) {      logger.warn("Unexpected error while shutting down RMI registry",e);    }    rmiRegistry=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.717 -0500",hash_original_method="B2284C46A701781D8BDD9EA191683CED",hash_generated_method="26C3FB4762D89BDBBCCEAF2814863CBB") public final static String formatElements(final HeaderElement[] elems,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatElements(null,elems,quote).toString();}  }
class C{  @Override public synchronized void shutdown(){  try {    if (getShortTermMemory() != null) {      getShortTermMemory().clear();    }    ServerSession session=null;    if (this.entityManager != null) {      session=this.entityManager.unwrap(ServerSession.class);      save();      this.entityManager.clear();    }    if (getFactory() != null) {      getFactory().close();      if (this.isFast && session != null) {        SessionInfo info=sessions.get(this.database);        if (info != null) {synchronized (sessions) {            info.decrement();            if (info.count <= 0) {              sessions.remove(this.database);            }          }synchronized (info) {            if (info.count <= 0) {              if (session.isLoggedIn()) {                session.logout();              }              if (info.session.isLoggedIn()) {                info.session.logout();              }              info.session=null;            }          }        } else {          if (session.isLoggedIn()) {            session.logout();          }        }      }    }    this.bot.removeLogListener(this.listener);    setEntityManager(null);    setFactory(null);  } catch (  Exception exception) {    this.bot.log(this,exception);  }}  }
class C{  public static void write(float lt,float ln,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int[] pixels=new int[image_width * image_height];  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);  pixelgrabber.grabPixels();  LinkRaster.write(lt,ln,image_width,image_height,pixels,properties,dos);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.119 -0400",hash_original_method="C455475965AA7172574087D5CCE9F171",hash_generated_method="935EF4AA62815F612019AB5469CDB54A") private boolean isCharStrong(int chr){  return (STRONG_TEXT_FLAGS[chr >> 5] & (1 << (chr % 32))) != 0;}  }
class C{  public HttpStatus addWebhookById(int id){  DataOutputStream wr=null;  HttpURLConnection connPost=null;  HttpStatus code=HttpStatus.EXPECTATION_FAILED;  try {    URL urlPost=new URL("http://" + GITLAB_IP + "/api/v3/projects/"+ id+ "/hooks?private_token="+ privateToken);    connPost=(HttpURLConnection)urlPost.openConnection();    connPost.setDoOutput(true);    connPost.setDoInput(true);    connPost.setRequestProperty("Content-Type","application/json");    connPost.setRequestProperty("Accept","application/json");    connPost.setRequestMethod("POST");    connPost.connect();    ObjectMapper mapper=new ObjectMapper();    JsonNode rootNode=mapper.createObjectNode();    ((ObjectNode)rootNode).put("project_id",id);    ((ObjectNode)rootNode).put("url","http://" + CU_BACK_LINK + "/gitlab/listen/branch");    ((ObjectNode)rootNode).put("push_events",true);    ((ObjectNode)rootNode).put("enable_ssl_verification",true);    String jsonString=mapper.writeValueAsString(rootNode);    logger.debug(jsonString);    wr=new DataOutputStream(connPost.getOutputStream());    wr.writeBytes(jsonString);    code=HttpStatus.valueOf(connPost.getResponseCode());  } catch (  IOException e) {    logger.error(e.getMessage());  } finally {    try {      if (wr != null)       wr.flush();      if (wr != null)       wr.close();    } catch (    Exception ignore) {    }  }  return code;}  }
class C{  protected void renameDwcaToIncludeVersion(Resource resource,BigDecimal version){  Preconditions.checkNotNull(resource);  Preconditions.checkNotNull(version);  File unversionedDwca=dataDir.resourceDwcaFile(resource.getShortname());  File versionedDwca=dataDir.resourceDwcaFile(resource.getShortname(),version);  if (unversionedDwca.exists() && !versionedDwca.exists()) {    try {      Files.move(unversionedDwca,versionedDwca);      log.debug("Renamed dwca.zip to " + versionedDwca.getName());    } catch (    IOException e) {      log.error("Failed to rename dwca.zip file name with version number for " + resource.getShortname(),e);      throw new InvalidConfigException(TYPE.CONFIG_WRITE,"Failed to update version number for " + resource.getShortname() + ": "+ e.getMessage());    }  }}  }
class C{  private void action_Save(){  log.info("");  StringBuffer sb=new StringBuffer();  StringBuffer sql=new StringBuffer("SELECT C_ValidCombination_ID, Alias FROM C_ValidCombination WHERE ");  Object value=null;  if (s_AcctSchema.isHasAlias()) {    value=f_Alias.getValue().toString();    if (value == null)     sb.append(Msg.translate(Env.getCtx(),"Alias")).append(", ");  }  MAcctSchemaElement[] elements=s_AcctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    String type=ase.getElementType();    if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {      value=f_AD_Org_ID.getValue();      sql.append("AD_Org_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Account)) {      value=f_Account_ID.getValue();      sql.append("Account_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SubAccount)) {      value=f_SubAcct_ID.getValue();      sql.append("C_SubAcct_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Product)) {      value=f_M_Product_ID.getValue();      sql.append("M_Product_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_BPartner)) {      value=f_C_BPartner_ID.getValue();      sql.append("C_BPartner_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Campaign)) {      value=f_C_Campaign_ID.getValue();      sql.append("C_Campaign_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationFrom)) {      value=f_C_LocFrom_ID.getValue();      sql.append("C_LocFrom_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationTo)) {      value=f_C_LocTo_ID.getValue();      sql.append("C_LocTo_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Project)) {      value=f_C_Project_ID.getValue();      sql.append("C_Project_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SalesRegion)) {      value=f_C_SalesRegion_ID.getValue();      sql.append("C_SalesRegion_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_OrgTrx)) {      value=f_AD_OrgTrx_ID.getValue();      sql.append("AD_OrgTrx_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Activity)) {      value=f_C_Activity_ID.getValue();      sql.append("C_Activity_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList1)) {      value=f_User1_ID.getValue();      sql.append("User1_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList2)) {      value=f_User2_ID.getValue();      sql.append("User2_ID");      if (value == null)       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    }    if (ase.isMandatory() && value == null)     sb.append(ase.getName()).append(", ");  }  if (sb.length() != 0) {    ADialog.error(m_WindowNo,this,"FillMandatory",sb.substring(0,sb.length() - 2));    return;  }  if (f_AD_Org_ID == null || f_AD_Org_ID.getValue() == null) {    ADialog.error(m_WindowNo,this,"FillMandatory",Msg.getElement(Env.getCtx(),"AD_Org_ID"));    return;  }  if (f_Account_ID == null || f_Account_ID.getValue() == null) {    ADialog.error(m_WindowNo,this,"FillMandatory",Msg.getElement(Env.getCtx(),"Account_ID"));    return;  }  sql.append("AD_Client_ID=? AND C_AcctSchema_ID=?");  log.fine("Check = " + sql.toString());  int IDvalue=0;  String Alias=null;  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,m_AD_Client_ID);    pstmt.setInt(2,s_AcctSchema.getC_AcctSchema_ID());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      IDvalue=rs.getInt(1);      Alias=rs.getString(2);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);    IDvalue=0;  }  log.fine("ID=" + IDvalue + ", Alias="+ Alias);  if (Alias == null)   Alias="";  if (IDvalue != 0 && s_AcctSchema.isHasAlias() && !f_Alias.getValue().toString().equals(Alias)) {    sql=new StringBuffer("UPDATE C_ValidCombination SET Alias=");    if (f_Alias.getValue().toString().length() == 0)     sql.append("NULL"); else     sql.append("'").append(f_Alias.getValue()).append("'");    sql.append(" WHERE C_ValidCombination_ID=").append(IDvalue);    int i=0;    try {      java.sql.PreparedStatement stmt=DB.prepareStatement(sql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);      i=stmt.executeUpdate();      stmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql.toString(),e);    }    if (i == 0)     ADialog.error(m_WindowNo,this,"AccountNotUpdated");  }  if (IDvalue != 0) {    loadInfo(IDvalue,s_AcctSchema.getC_AcctSchema_ID());    action_Find(false);    return;  }  log.config("New");  Alias=null;  if (f_Alias != null)   Alias=f_Alias.getValue().toString();  int C_SubAcct_ID=0;  if (f_SubAcct_ID != null && f_SubAcct_ID.getValue() != null)   C_SubAcct_ID=((Integer)f_SubAcct_ID.getValue()).intValue();  int M_Product_ID=0;  if (f_M_Product_ID != null && f_M_Product_ID.getValue() != null)   M_Product_ID=((Integer)f_M_Product_ID.getValue()).intValue();  int C_BPartner_ID=0;  if (f_C_BPartner_ID != null && f_C_BPartner_ID.getValue() != null)   C_BPartner_ID=((Integer)f_C_BPartner_ID.getValue()).intValue();  int AD_OrgTrx_ID=0;  if (f_AD_OrgTrx_ID != null && f_AD_OrgTrx_ID.getValue() != null)   AD_OrgTrx_ID=((Integer)f_AD_OrgTrx_ID.getValue()).intValue();  int C_LocFrom_ID=0;  if (f_C_LocFrom_ID != null && f_C_LocFrom_ID.getValue() != null)   C_LocFrom_ID=((Integer)f_C_LocFrom_ID.getValue()).intValue();  int C_LocTo_ID=0;  if (f_C_LocTo_ID != null && f_C_LocTo_ID.getValue() != null)   C_LocTo_ID=((Integer)f_C_LocTo_ID.getValue()).intValue();  int C_SRegion_ID=0;  if (f_C_SalesRegion_ID != null && f_C_SalesRegion_ID.getValue() != null)   C_SRegion_ID=((Integer)f_C_SalesRegion_ID.getValue()).intValue();  int C_Project_ID=0;  if (f_C_Project_ID != null && f_C_Project_ID.getValue() != null)   C_Project_ID=((Integer)f_C_Project_ID.getValue()).intValue();  int C_Campaign_ID=0;  if (f_C_Campaign_ID != null && f_C_Campaign_ID.getValue() != null)   C_Campaign_ID=((Integer)f_C_Campaign_ID.getValue()).intValue();  int C_Activity_ID=0;  if (f_C_Activity_ID != null && f_C_Activity_ID.getValue() != null)   C_Activity_ID=((Integer)f_C_Activity_ID.getValue()).intValue();  int User1_ID=0;  if (f_User1_ID != null && f_User1_ID.getValue() != null)   User1_ID=((Integer)f_User1_ID.getValue()).intValue();  int User2_ID=0;  if (f_User2_ID != null && f_User2_ID.getValue() != null)   User2_ID=((Integer)f_User2_ID.getValue()).intValue();  MAccount acct=MAccount.get(Env.getCtx(),m_AD_Client_ID,((Integer)f_AD_Org_ID.getValue()).intValue(),s_AcctSchema.getC_AcctSchema_ID(),((Integer)f_Account_ID.getValue()).intValue(),C_SubAcct_ID,M_Product_ID,C_BPartner_ID,AD_OrgTrx_ID,C_LocFrom_ID,C_LocTo_ID,C_SRegion_ID,C_Project_ID,C_Campaign_ID,C_Activity_ID,User1_ID,User2_ID,0,0,null);  if (acct != null && acct.get_ID() == 0)   acct.saveEx();  if (acct == null || acct.get_ID() == 0)   loadInfo(0,0); else {    if (Alias != null && Alias.length() > 0) {      acct.setAlias(Alias);      acct.saveEx();    }    loadInfo(acct.get_ID(),s_AcctSchema.getC_AcctSchema_ID());  }  action_Find(false);}  }
class C{  public void transform(AffineTransform Tx){  gc.transform(Tx);}  }
class C{  protected void handleFailover(){synchronized (this.unprocessedEventsLock) {    this.queue.removeCacheListener();    this.unprocessedTokens=null;    logger.info(LocalizedMessage.create(LocalizedStrings.GatewayImpl_GATEWAY_FAILOVER_INITIATED_PROCESSING_0_UNPROCESSED_EVENTS,this.unprocessedEvents.size()));    GatewaySenderStats statistics=this.sender.getStatistics();    if (!this.unprocessedEvents.isEmpty()) {      reapOld(statistics,true);{        Iterator it=this.queue.getRegion().values().iterator();        while (it.hasNext() && !stopped()) {          Object o=it.next();          if (o != null && o instanceof GatewaySenderEventImpl) {            GatewaySenderEventImpl ge=(GatewaySenderEventImpl)o;            EventWrapper unprocessedEvent=this.unprocessedEvents.remove(ge.getEventId());            if (unprocessedEvent != null) {              unprocessedEvent.event.release();              if (this.unprocessedEvents.isEmpty()) {                break;              }            }          }        }      }{        Iterator<Map.Entry<EventID,EventWrapper>> it=this.unprocessedEvents.entrySet().iterator();        while (it.hasNext()) {          if (stopped())           break;          Map.Entry<EventID,EventWrapper> me=it.next();          EventWrapper ew=me.getValue();          GatewaySenderEventImpl gatewayEvent=ew.event;          gatewayEvent.initialize();          GatewaySenderEventCallbackArgument seca=gatewayEvent.getSenderCallbackArgument();          if (seca.getOriginatingDSId() == GatewaySender.DEFAULT_DISTRIBUTED_SYSTEM_ID) {            seca.setOriginatingDSId(sender.getMyDSId());            seca.initializeReceipientDSIds(Collections.singletonList(sender.getRemoteDSId()));          }          it.remove();          boolean queuedEvent=false;          try {            queuedEvent=queuePrimaryEvent(gatewayEvent);          } catch (          IOException ex) {            if (!stopped()) {              logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayImpl_EVENT_DROPPED_DURING_FAILOVER_0,gatewayEvent),ex);            }          }catch (          CacheException ex) {            if (!stopped()) {              logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayImpl_EVENT_DROPPED_DURING_FAILOVER_0,gatewayEvent),ex);            }          } finally {            if (!queuedEvent) {              gatewayEvent.release();            }          }        }      }      statistics.clearUnprocessedMaps();    }    logger.info(LocalizedMessage.create(LocalizedStrings.GatewayImpl_0__MARKING__1__EVENTS_AS_POSSIBLE_DUPLICATES,new Object[]{getSender(),Integer.valueOf(this.queue.size())}));    Iterator it=this.queue.getRegion().values().iterator();    while (it.hasNext() && !stopped()) {      Object o=it.next();      if (o != null && o instanceof GatewaySenderEventImpl) {        GatewaySenderEventImpl ge=(GatewaySenderEventImpl)o;        ge.setPossibleDuplicate(true);      }    }    releaseUnprocessedEvents();  }}  }
class C{  @DSComment("creates data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.025 -0500",hash_original_method="783AF87541D2DBDBA1743DA12D81CD53",hash_generated_method="74AB894C18300FE3B23DF04436CBD8A2") public SchemeRegistry(){  super();  registeredSchemes=new LinkedHashMap<String,Scheme>();}  }
class C{  public void writeBlobBuffer(byte[] buffer) throws IOException {  int len=buffer.length;  if (log != null && log.isDebugEnabled())   log.debug("writeBlobBuffer len: " + len);  if (len > Short.MAX_VALUE) {    throw new IOException("");  }  writeInt(len + 2);  writeInt(len + 2);  write(len & 0xff);  write((len >> 8) & 0xff);  write(buffer,0,len,((4 - len + 2) & 3));}  }
class C{  public static void mapping(String mappedFieldName,String mappedClassName,String targetClassName){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorException3,mappedFieldName,mappedClassName,targetClassName));}  }
class C{  protected void childAdded(Node node){  data=null;  super.childAdded(node);}  }
class C{  public static String mapToJson(Map<String,String> properties){  return new GfJsonObject(properties).toString();}  }
class C{  @SuppressWarnings("unchecked") private void prepareWardDropDownData(final boolean zoneExists,final boolean wardExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareWardDropDownData method");    LOGGER.debug("Zone Exists ? : " + zoneExists + ", "+ "Ward Exists ? : "+ wardExists);  }  if (zoneExists && wardExists) {    List<Boundary> wardList=new ArrayList<Boundary>();    wardList=boundaryService.getActiveChildBoundariesByBoundaryId(getZoneId());    addDropdownData("wardList",wardList);  } else   addDropdownData("wardList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  public int size(){  return size;}  }
class C{  public int hashCode(){  return (key.hashCode());}  }
class C{  public static CCSprite sprite(CCTexture2D texture){  return new CCSprite(texture);}  }
class C{  private void prepareTransfer(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migratePrepareTransfer");  if (m_target != null)   m_target.prepareDatabase();}  }
class C{  public IStatus validatePath(IPath path,int type,boolean lastSegmentOnly){  String message;  if (path == null) {    message=Messages.resources_pathNull;    return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);  }  if (path.getDevice() != null) {    message=NLS.bind(Messages.resources_invalidCharInPath,String.valueOf(IPath.DEVICE_SEPARATOR),path);    return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);  }  if (path.isRoot()) {    message=Messages.resources_invalidRoot;    return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);  }  if (!path.isAbsolute()) {    message=NLS.bind(Messages.resources_mustBeAbsolute,path);    return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);  }  int numberOfSegments=path.segmentCount();  if ((type & IResource.PROJECT) != 0) {    if (numberOfSegments == ICoreConstants.PROJECT_SEGMENT_LENGTH) {      return validateName(path.segment(0),IResource.PROJECT);    } else     if (type == IResource.PROJECT) {      message=NLS.bind(Messages.resources_projectPath,path);      return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);    }  }  if ((type & (IResource.FILE | IResource.FOLDER)) != 0) {    if (numberOfSegments < ICoreConstants.MINIMUM_FILE_SEGMENT_LENGTH) {      message=NLS.bind(Messages.resources_resourcePath,path);      return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);    }    int fileFolderType=type&=~IResource.PROJECT;    int segmentCount=path.segmentCount();    if (lastSegmentOnly)     return validateName(path.segment(segmentCount - 1),fileFolderType);    IStatus status=validateName(path.segment(0),IResource.PROJECT);    if (!status.isOK())     return status;    for (int i=1; i < segmentCount; i++) {      status=validateName(path.segment(i),fileFolderType);      if (!status.isOK())       return status;    }    return Status.OK_STATUS;  }  message=NLS.bind(Messages.resources_invalidPath,path);  return new org.eclipse.core.internal.resources.ResourceStatus(IResourceStatus.INVALID_VALUE,null,message);}  }
class C{  private Unicode(){}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  private void flushBufferToWriter() throws IOException {  _out.write(_buffer.array(),0,_buffer.position());  _buffer.clear();}  }
class C{  public static void resetMetamodel(){  instance().reset();}  }
class C{  public void print(PrintWriter out){  for (  S key : keys) {    print(out,key,map.get(key));  }  out.flush();}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  public MemberVisibility isVisible(EObject context,TypeRef receiverType,TMember member){  boolean supercall=context instanceof ParameterizedPropertyAccessExpression && ((ParameterizedPropertyAccessExpression)context).getTarget() instanceof SuperLiteral;  return isVisible(context,receiverType,member,supercall);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public SparseArray(){  this(10);}  }
class C{  public static boolean xmlFastForward(XmlPullParser parser,String namespace,String element){  try {    while (parser.next() != XmlPullParser.END_DOCUMENT) {      if (parser.getEventType() == XmlPullParser.START_TAG && parser.getNamespace().equals(namespace) && parser.getName().equals(element)) {        return true;      }    }    return false;  } catch (  XmlPullParserException e) {    e.printStackTrace();    return false;  }catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  @Override public void run(MessageLogger logger){  logger.log("<simulation-log>");  prepareActions();  try {    while (!actions.isEmpty() && !frame.simulationPaused()) {      env.executeAction(null,actions.remove());      actionCount++;      Thread.sleep(200);    }    logger.log("Number of Steps: " + actionCount);  } catch (  InterruptedException e) {  }  logger.log("</simulation-log>\n");}  }
class C{  public static long readLong(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getLong(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  long value=0l;  if (!jsonArray.isNull(index)) {    value=jsonArray.getLong(index);  }  return value;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int secondaryIdentityHash(Object key){  return secondaryHash(System.identityHashCode(key));}  }
class C{  public static void encodeVaxInteger2WithoutLength(OutputStream stream,int value) throws IOException {  stream.write(value);  stream.write(value >> 8);}  }
class C{  public long longValue(){  return 0l;}  }
class C{  @Override public DriverTask detachVolumeClone(List<VolumeClone> clones){  _log.info("3PARDriver: detachVolumeClone no action ");  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DETACH_CLONE_VOLUMES);  task.setStatus(DriverTask.TaskStatus.READY);  return task;}  }
class C{  private List<DiffEntry> commitToCommit(String commitAId,String commitBId,DiffFormatter formatter) throws IOException {  if (commitAId == null) {    commitAId=Constants.HEAD;  }  ObjectId commitA=repository.resolve(commitAId);  if (commitA == null) {    throw new IllegalArgumentException("Invalid commit id " + commitAId);  }  ObjectId commitB=repository.resolve(commitBId);  if (commitB == null) {    throw new IllegalArgumentException("Invalid commit id " + commitBId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   RevTree treeB;  try (RevWalk revWalkB=new RevWalk(repository)){    treeB=revWalkB.parseTree(commitB);  }   if (!request.isNoRenames()) {    formatter.setDetectRenames(true);    int renameLimit=request.getRenameLimit();    if (renameLimit > 0) {      formatter.getRenameDetector().setRenameLimit(renameLimit);    }  }  return formatter.scan(treeA,treeB);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void consumeKeyword(char first,char[] expected) throws JsonParserException {  for (int i=0; i < expected.length; i++)   if (advanceChar() != expected[i])   throw createHelpfulException(first,expected,i);  if (isAsciiLetter(peekChar()))   throw createHelpfulException(first,expected,expected.length);}  }
class C{  public Subject addSubject(String language,String subject){  language=determineLanguage(language);  Subject messageSubject=new Subject(language,subject);  subjects.add(messageSubject);  return messageSubject;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  estados=new String[0];}  }
class C{  public ProcessEvent(ProcessHandler source){  super(source);}  }
class C{  public SortedNumericSortField(String field,SortField.Type type){  this(field,type,false);}  }
class C{  public void parse(String systemId) throws org.xml.sax.SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  public <T extends JCTree>List<T> translate(List<T> trees,Type pt){  Type prevPt=this.pt;  List<T> res;  try {    this.pt=pt;    res=translate(trees);  }  finally {    this.pt=prevPt;  }  return res;}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  public static int dip2px(Context context,float dip){  float density=getDensity(context);  return (int)(dip * density + DensityUtils.DOT_FIVE);}  }
class C{  public static final String toBitString(Instance x,int L){  StringBuilder sb=new StringBuilder(L);  for (int i=0; i < L; i++) {    sb.append((int)Math.round(x.value(i)));  }  return sb.toString();}  }
class C{  public boolean hasEventStatus(){  return super.hasElement(EventStatus.KEY);}  }
class C{  private void computeForwardDependencesDef(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){  if (!(op instanceof RegisterOperand))   return;  RegisterOperand regOp=(RegisterOperand)op;  DepGraphNode sourceNode=getDepGraphNode(regOp.getRegister());  if (sourceNode != null) {    int type=regOp.getRegister().isValidation() ? GUARD_OUTPUT : REG_OUTPUT;    sourceNode.insertOutEdge(destNode,type);  }  if (lastExceptionNode != null && regOp.getRegister().spansBasicBlock() && currentBlock.hasExceptionHandlers()) {    if (!ir.getHandlerLivenessComputed() || handlerLiveSet.contains(regOp.getRegister())) {      lastExceptionNode.insertOutEdge(destNode,EXCEPTION_R);    }  }  setDepGraphNodeForRegister(destNode,regOp.getRegister());}  }
class C{  public TopologicalNode(int nodeID,String nodeName,int x,int y){  this.nodeID=nodeID;  this.nodeName=nodeName;  worldX=x;  worldY=y;}  }
class C{  public BugShaker assemble(){  if (assembled) {    logger.d("You have already assembled this BugShaker instance. Calling assemble again " + "is a no-op.");    return this;  }  if (startAttempted) {    throw new IllegalStateException("You can only call assemble before calling start.");  }  logger=new Logger(loggingEnabled);  final GenericEmailIntentProvider genericEmailIntentProvider=new GenericEmailIntentProvider();  emailCapabilitiesProvider=new EmailCapabilitiesProvider(application.getPackageManager(),genericEmailIntentProvider,logger);  feedbackEmailFlowManager=new FeedbackEmailFlowManager(application,emailCapabilitiesProvider,new Toaster(application),new ActivityReferenceManager(),new FeedbackEmailIntentProvider(application,genericEmailIntentProvider),getScreenshotProvider(),getAlertDialogProvider(),logger);  assembled=true;  return this;}  }
class C{  @Override public boolean equals(Object object){  if (object == null || !(object instanceof EditRate)) {    return false;  }  EditRate other=(EditRate)object;  return ((this.getNumerator().equals(other.getNumerator())) && (this.getDenominator().equals(other.getDenominator())));}  }
class C{  public EmbeddedJMSResource addAcceptor(String name,String uri) throws Exception {  configuration.addAcceptorConfiguration(name,uri);  return this;}  }
class C{  int addVariableName(final org.apache.xml.utils.QName qname){  int pos=m_variableNames.size();  m_variableNames.addElement(qname);  int frameSize=m_variableNames.size() - getGlobalsSize();  if (frameSize > m_maxStackFrameSize)   m_maxStackFrameSize++;  return pos;}  }
class C{  public void view(ImageView imageView){  imageViews.put(imageView,ImageUrl);  Bitmap bitmap=memoryCache.get(ImageUrl);  if (bitmap != null)   imageView.setImageBitmap(bitmap); else {    photoRows(ImageUrl,imageView);    imageView.setImageResource(displayDefualtDawable.get());  }}  }
class C{  public MixedRadixNumber(int[] radixValues,int[] radices){  this(0,radices);  setCurrentValueFor(radixValues);}  }
class C{  public SetQuestToFutureRandomTimeStampAction(final String questname,final int min_delay,final int max_delay){  this.questname=checkNotNull(questname);  this.index=-1;  this.min_delay=min_delay;  this.max_delay=max_delay;}  }
class C{  private String extractProjectNameFromUri(@NotNull String uri){  int indexFinishProjectName=uri.lastIndexOf(".");  int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1);  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {    return uri.substring(indexStartProjectName,indexFinishProjectName);  }  if (indexStartProjectName != 0) {    return uri.substring(indexStartProjectName);  }  return "";}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",justification="This is only a style warning.") public void disconnectFromSystem(){synchronized (CONN_SYNC) {    try {      if (this.system == null || !this.system.isConnected()) {        return;      }      ((AdminDistributedSystemJmxImpl)this.system).disconnect();    } catch (    RuntimeException e) {      logger.warn(e.getMessage(),e);      throw e;    }catch (    VirtualMachineError err) {      SystemFailure.initiateFailure(err);      throw err;    }catch (    Error e) {      SystemFailure.checkFailure();      logger.warn(e.getMessage(),e);      throw e;    } finally {      DistributionManager.isDedicatedAdminVM=false;    }  }}  }
class C{  public InlineQueryResultCachedVideoBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public IntStream(AbstractDriver driver,String name,int minValue,int maxValue,int zeroValue,int defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,INT_TYPE,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  data=(int[])GCspy.util.createDataArray(new int[0],driver.getMaxTileNum());  this.defaultValue=defaultValue;}  }
class C{  public TokenMap(){  this(DEFAULT_TOKEN_MAP_SIZE);}  }
class C{  public Collection<ClusterNode> topologyNodes(){  return topSnapshot;}  }
class C{  private void ensureNoMembers(@NotNull final String className) throws Exception {  try {    final PyPullUpPresenter sut=configureByClass(className);    myMocksControl.replay();    sut.launch();  } catch (  final IllegalArgumentException ignored) {    return;  }  Assert.fail("Presenter should throw exception, but it returned list of parents instead: " + myViewConfigCapture.getValue().getParents());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isPressed(){  return pressed;}  }
class C{  public static void log(String jsonMessage){  log.info(AUDIT_MARKER,jsonMessage);}  }
class C{  public RTimer sub(String desc){  RTimer child=children.get(desc);  if (child == null) {    child=new RTimer();    children.add(desc,child);  }  return child;}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public BaseDateTime(long instant,DateTimeZone zone){  this(instant,ISOChronology.getInstance(zone));}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof ParsedURLData))   return false;  ParsedURLData ud=(ParsedURLData)obj;  if (ud.port != port)   return false;  if (ud.protocol == null) {    if (protocol != null)     return false;  } else   if (protocol == null)   return false; else   if (!ud.protocol.equals(protocol))   return false;  if (ud.host == null) {    if (host != null)     return false;  } else   if (host == null)   return false; else   if (!ud.host.equals(host))   return false;  if (ud.ref == null) {    if (ref != null)     return false;  } else   if (ref == null)   return false; else   if (!ud.ref.equals(ref))   return false;  if (ud.path == null) {    if (path != null)     return false;  } else   if (path == null)   return false; else   if (!ud.path.equals(path))   return false;  return true;}  }
class C{  @Deprecated public ContentItem updated(Date updated){  this.updated=updated;  return this;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MScheduler[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYBoxAnnotation)) {    return false;  }  XYBoxAnnotation that=(XYBoxAnnotation)obj;  if (!(this.x0 == that.x0)) {    return false;  }  if (!(this.y0 == that.y0)) {    return false;  }  if (!(this.x1 == that.x1)) {    return false;  }  if (!(this.y1 == that.y1)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  return true;}  }
class C{  public C4FMSymbolFilter(int frequencyCorrectionMaximum){  mFrequencyCorrectionMaximum=frequencyCorrectionMaximum;}  }
class C{  @Override public void initGui(){  super.initGui();  this.buttonList.clear();  this.buttonList.add(new GuiButton(0,this.width / 2 - 77,this.height / 2 - 10,50,20,LangUtils.localize("gui.empTower.missiles")));  this.buttonList.add(new GuiButton(1,this.width / 2 - 25,this.height / 2 - 10,65,20,LangUtils.localize("gui.empTower.elec")));  this.buttonList.add(new GuiButton(2,this.width / 2 + 43,this.height / 2 - 10,35,20,LangUtils.localize("gui.empTower.both")));  this.textFieldBanJing=new GuiTextField(fontRendererObj,72,28,30,12);  this.textFieldBanJing.setMaxStringLength(3);  this.textFieldBanJing.setText(this.tileEntity.empRadius + "");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.132 -0500",hash_original_method="DFDADD8A665EA1142AEA3E2588D88EDA",hash_generated_method="D572B1EAE883F8EAD4A1BBC5FC3AC1EB") static float[] computeCentroid(float[] points){  float centerX=0;  float centerY=0;  int count=points.length;  for (int i=0; i < count; i++) {    centerX+=points[i];    i++;    centerY+=points[i];  }  float[] center=new float[2];  center[0]=2 * centerX / count;  center[1]=2 * centerY / count;  return center;}  }
class C{  private void reorderList(ListNode head){  ;  if (head == null || head.next == null)   return;  ListNode cur=head;  while (cur != null && cur.next != null && cur.next.next != null) {    ListNode beforeTail=cur.next;    ListNode curNext=cur.next;    while (beforeTail != null && beforeTail.next != null && beforeTail.next.next != null) {      beforeTail=beforeTail.next;    }    cur.next=beforeTail.next;    beforeTail.next.next=curNext;    beforeTail.next=null;    cur=curNext;  }  return;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (success) {    String sql="UPDATE C_InvoiceBatch h " + "SET DocumentAmt = NVL((SELECT SUM(LineTotalAmt) FROM C_InvoiceBatchLine l " + "WHERE h.C_InvoiceBatch_ID=l.C_InvoiceBatch_ID AND l.IsActive='Y'),0) "+ "WHERE C_InvoiceBatch_ID="+ getC_InvoiceBatch_ID();    DB.executeUpdate(sql,get_TrxName());  }  return success;}  }
class C{  public void moveBy(int offset){  cursor+=offset;}  }
class C{  private static int next(int v,byte[] in,int inPos){  return (v << 8) | (in[inPos + 2] & 255);}  }
class C{  @Around("methodAnnotatedWithChronometro()") public Object aroundMethod(ProceedingJoinPoint joinPoint) throws Throwable {  MethodSignature methodSignature=(MethodSignature)joinPoint.getSignature();  String className=methodSignature.getDeclaringType().getSimpleName();  Method method=methodSignature.getMethod();  Chronometro chronometroAnnotation=method.getAnnotation(Chronometro.class);  Object result;  if (chronometroAnnotation != null) {switch (chronometroAnnotation.state()) {case Chronometro.START:      StopWatch stopWatch=new StopWatch();    watchMap.put(chronometroAnnotation.name(),stopWatch);  stopWatch.start();DebugLog.log(className,buildStartLogMessage(chronometroAnnotation.name() + " started"));result=joinPoint.proceed();break;case Chronometro.CHECKPOINT_START:stopWatch=(StopWatch)watchMap.get(chronometroAnnotation.name());if (stopWatch != null) {DebugLog.log(className,buildLogMessage(chronometroAnnotation.name() + " checkpoint before method " + method.getName(),stopWatch.getCurrentTimeMillisDifference()));}result=joinPoint.proceed();break;case Chronometro.CHECKPOINT_END:result=joinPoint.proceed();stopWatch=(StopWatch)watchMap.get(chronometroAnnotation.name());if (stopWatch != null) {DebugLog.log(className,buildLogMessage(chronometroAnnotation.name() + " checkpoint after method " + method.getName(),stopWatch.getCurrentTimeMillisDifference()));}break;case Chronometro.END:result=joinPoint.proceed();stopWatch=(StopWatch)watchMap.get(chronometroAnnotation.name());if (stopWatch != null) {stopWatch.stop();DebugLog.log(className,buildLogMessage(chronometroAnnotation.name() + " created",stopWatch.getTotalTimeMillis()));}break;default :result=joinPoint.proceed();break;}} else {result=joinPoint.proceed();}return result;}  }
class C{  void verifyParameterNamedUser(Subscription subscription) throws ServiceParameterException {  if (subscription == null) {    return;  }  ParameterSet parameterSet=subscription.getParameterSet();  if (parameterSet == null || parameterSet.getParameters() == null) {    return;  }  for (  Parameter parameter : parameterSet.getParameters()) {    if (parameter.getParameterDefinition().getParameterType() == ParameterType.PLATFORM_PARAMETER && PlatformParameterIdentifiers.NAMED_USER.equals(parameter.getParameterDefinition().getParameterId())) {      if (Strings.isEmpty(parameter.getValue())) {        return;      }      try {        if (subscription.getActiveUsers().size() > Integer.parseInt(parameter.getValue())) {          sessionCtx.setRollbackOnly();          String text="Subscription '" + subscription.getSubscriptionId() + "'/Product '"+ subscription.getProduct().getProductId()+ "'";          ServiceParameterException e=new ServiceParameterException(text,ParameterType.PLATFORM_PARAMETER,PlatformParameterIdentifiers.NAMED_USER,new Object[]{parameter.getValue(),subscription.getSubscriptionId()});          LOG.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_TOO_MANY_NAMED_USER_FOR_SUBSCRIPTION,subscription.getSubscriptionId(),subscription.getProduct().getProductId());          throw e;        }      } catch (      NumberFormatException e) {        LOG.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_PROCESS_NAMED_USER_FAILED_AS_NUMBER_FORMAT,parameter.getValue(),subscription.getProduct().getProductId());      }    }  }}  }
class C{  private VatRateDetails createVRD(BigDecimal defaultVAT,BigDecimal countryVAT,BigDecimal customerVAT){  VatRateDetails result=new VatRateDetails();  result.setDefaultVatRate(defaultVAT);  result.setCountryVatRate(countryVAT);  result.setCustomerVatRate(customerVAT);  return result;}  }
class C{  private static Matrix aTa(Matrix a){  int cols=a.getColumnDimension();  double[][] A=a.getArray();  Matrix x=new Matrix(cols,cols);  double[][] X=x.getArray();  double[] Acol=new double[a.getRowDimension()];  for (int col1=0; col1 < cols; col1++) {    for (int row=0; row < Acol.length; row++) {      Acol[row]=A[row][col1];    }    double[] Xrow=X[col1];    for (int row=0; row < Acol.length; row++) {      double[] Arow=A[row];      for (int col2=col1; col2 < Xrow.length; col2++) {        Xrow[col2]+=Acol[row] * Arow[col2];      }    }    for (int col2=col1 + 1; col2 < Xrow.length; col2++) {      X[col2][col1]=Xrow[col2];    }  }  return x;}  }
class C{  public void pushTreeChangedEvent(NodeRef nodeRef){  pushTreeChangedEvent(new TreeChangedEvent((Node)nodeRef));}  }
class C{  public DimensionedScalar(String fieldValue) throws IllegalArgumentException {  super("","");  Matcher matcher=PATTERN.matcher(fieldValue);  if (matcher.find()) {    String name=matcher.group(1);    String dimensions=matcher.group(2);    String value=matcher.group(3);    setName(name);    setValue(value);    this.dimensions=new Dimensions(dimensions);  } else {    throw new DictionaryException("CANNOT PARSE:  >" + fieldValue + "<");  }}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public final int min(){  int min=Integer.MAX_VALUE;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      if (min > fieldx[y])       min=fieldx[y];    }  }  return min;}  }
class C{  public ImmutableTypeToInstanceMap<B> build(){  return new ImmutableTypeToInstanceMap<B>(mapBuilder.build());}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  ArrayList<Attribute> newAtts=new ArrayList<Attribute>(inputFormat.numInstances());  newAtts.add(new Attribute("Identifier",(ArrayList<String>)null));  for (int i=0; i < inputFormat.numInstances(); i++) {    if (inputFormat.attribute(0).isNominal() || inputFormat.attribute(0).isString()) {      newAtts.add(new Attribute(inputFormat.instance(i).stringValue(0)));    } else {      newAtts.add(new Attribute("" + (i + 1)));    }    newAtts.get(i).setWeight(inputFormat.instance(i).weight());  }  return new Instances(inputFormat.relationName(),newAtts,inputFormat.numAttributes());}  }
class C{  public PolarPoint(double theta,double radius){  this.theta=theta;  this.radius=radius;}  }
class C{  public static CreateFolderDialogFragment newInstance(OCFile parentFolder){  CreateFolderDialogFragment frag=new CreateFolderDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_PARENT_FOLDER,parentFolder);  frag.setArguments(args);  return frag;}  }
class C{  private void onBluetoothBondStateChange(Context context,Intent intent){  log.debug("Bond state change notification received.");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void receive(final CallEvent event){  if (event.isValid()) {    if (!mEvents.contains(event)) {      mEvents.add(0,event);      fireTableRowsInserted(0,0);      prune();    } else {      int row=mEvents.indexOf(event);      fireTableRowsUpdated(row,row);    }  } else {    if (mEvents.contains(event)) {      int row=mEvents.indexOf(event);      mEvents.remove(event);      fireTableRowsDeleted(row,row);    }  }}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  public static byte[] bSAX(int levels,int[] symbols){  int bitlen=levels * symbols.length;  byte[] binary;  if (0 == bitlen % 8) {    binary=new byte[bitlen >>> 3];  } else {    binary=new byte[1 + (bitlen >>> 3)];  }  int idx=0;  int bits=0;  int bitcount=0;  for (int bit=0; bit < levels; bit++) {    for (int w=0; w < symbols.length; w++) {      bits<<=1;      bits|=(symbols[w] >>> (levels - bit - 1)) & 0x1;      bitcount++;      if (0 == bitcount % 8) {        binary[idx++]=(byte)(bits & (0xff));        bitcount=0;      }    }  }  if (idx < binary.length) {    bits<<=(8 - bitcount);    binary[idx]=(byte)(bits & (0xff));  }  return binary;}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DIRECTIVE___GLOSSARY_1:    return getGlossary_1();case UmplePackage.DIRECTIVE___GENERATE_1:  return getGenerate_1();case UmplePackage.DIRECTIVE___GENERATE_PATH_1:return getGenerate_path_1();case UmplePackage.DIRECTIVE___USE_STATEMENT_1:return getUseStatement_1();case UmplePackage.DIRECTIVE___NAMESPACE_1:return getNamespace_1();case UmplePackage.DIRECTIVE___TRACE_TYPE_1:return getTraceType_1();case UmplePackage.DIRECTIVE___ENTITY_1:return getEntity_1();case UmplePackage.DIRECTIVE___DEBUG_1:return getDebug_1();case UmplePackage.DIRECTIVE___STRICTNESS_1:return getStrictness_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String toString(final Object object,final ToStringStyle style,final boolean outputTransients){  return toString(object,style,outputTransients,false,null);}  }
class C{  public IR execute(){  IR ir=new IR(method,this);  if (instrumentationPlan != null) {    instrumentationPlan.initInstrumentation(method);  }  for (  OptimizationPlanElement element : optimizationPlan) {    ir.setIdForNextPhase();    element.perform(ir);  }  if (instrumentationPlan != null) {    instrumentationPlan.finalizeInstrumentation(method);  }  return ir;}  }
class C{  public Vec2 add(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","add","missingVector"));  }  this.x+=vector.x;  this.y+=vector.y;  return this;}  }
class C{  public IntervalXYToolTipGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public static <T>Optional<T> findByPath(TreeDef<T> treeDef,T node,List<T> path,Function<? super T,?> mapper){  return findByPath(treeDef,node,mapper,path,mapper);}  }
class C{  public String toString(){  return getSQL(null);}  }
class C{  public void validateObject() throws InvalidObjectException {  try {    for (    JComponent root : roots) {      SwingUtilities.updateComponentTreeUI(root);    }  }  finally {    readObjectCallbacks.remove(inputStream);  }}  }
class C{  private boolean visitCycle(Object start,Set<Object> unvisited,Set<Object> finished,CycleHolder cycle,int depth){  if (finished.contains(start)) {    return false;  }  if (!unvisited.remove(start)) {    return true;  }  cycle.processDepth(depth);  boolean foundCycle=false;  for (  Dependency dep : vertices.get(start)) {    foundCycle|=visitCycle(dep.getDependsOn(),unvisited,finished,cycle,depth + 1);    if (foundCycle) {      cycle.add(dep);      break;    }  }  finished.add(start);  return foundCycle;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  id=(ActivationID)in.readObject();  ref=null;  String className=in.readUTF();  if (className.equals(""))   return;  try {    Class<?> refClass=Class.forName(RemoteRef.packagePrefix + "." + className);    ref=(RemoteRef)refClass.newInstance();    ref.readExternal(in);  } catch (  InstantiationException e) {    throw new UnmarshalException("Unable to create remote reference",e);  }catch (  IllegalAccessException e) {    throw new UnmarshalException("Illegal access creating remote reference");  }}  }
class C{  public void testNestedBuilderRegistered() throws Exception {  checkNestedBuilder(true);}  }
class C{  public static int delete(int AD_Table_ID,int Record_ID,String trxName){  int no=-1;  try {    no=deleteEx(AD_Table_ID,Record_ID,trxName);  } catch (  DBException e) {    s_log.log(Level.SEVERE,"failed: AD_Table_ID=" + AD_Table_ID + ", Record_ID"+ Record_ID,e);    no=-1;  }  return no;}  }
class C{  public JavaDocContext(TemplateContextType type,Document document,int completionOffset,int completionLength,CompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  public AppletAudioClip(byte[] data){  try {    InputStream in=new ByteArrayInputStream(data);    createAppletAudioClip(in);  } catch (  IOException e) {    if (DEBUG) {      System.err.println("IOException creating AppletAudioClip " + e);    }  }}  }
class C{  @Override public boolean rowInserted() throws SQLException {  try {    debugCodeCall("rowInserted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private Instance convertInstanceToOriginal(Instance inst) throws Exception {  double[] newVals=null;  if (m_hasClass) {    newVals=new double[m_numAttribs + 1];  } else {    newVals=new double[m_numAttribs];  }  if (m_hasClass) {    newVals[m_numAttribs]=inst.value(inst.numAttributes() - 1);  }  for (int i=0; i < m_eTranspose[0].length; i++) {    double tempval=0.0;    for (int j=1; j < m_eTranspose.length; j++) {      tempval+=(m_eTranspose[j][i] * inst.value(j - 1));    }    newVals[i]=tempval;    if (!m_center) {      newVals[i]*=m_stdDevs[i];    }    newVals[i]+=m_means[i];  }  if (inst instanceof SparseInstance) {    return new SparseInstance(inst.weight(),newVals);  } else {    return new DenseInstance(inst.weight(),newVals);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void requestComplete(Duration latency){  queriesIssued++;  totalLatencyMicros+=latency.inMicroseconds();  long currentTimeMillis=System.currentTimeMillis();  if (currentTimeMillis >= lastLogTimestampMillis + logIntervalSeconds * 1000) {    long qps=queriesIssued * 1000 / (currentTimeMillis - lastLogTimestampMillis);    double avgLatencyMillis=totalLatencyMicros / (queriesIssued * 1000.0);    LOG.info(String.format("QPS: %d Avg Latency (ms): %.5f",qps,avgLatencyMillis));    queriesIssued=0;    totalLatencyMicros=0;    lastLogTimestampMillis=currentTimeMillis;  }}  }
class C{  public ImportSentence(){}  }
class C{  String extractFirstOriginalAuthorField(String desc){  return desc.replaceFirst(ORIGINAL_AUTHOR_REPLACEMENT_RE,"");}  }
class C{  public void showPendingNotificationsToUser(){  showPendingNotificationsToUser(true);}  }
class C{  public static void unbind(String name) throws RemoteException, NotBoundException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  registry.unbind(parsed.name);}  }
class C{  public static void crossCheckGetColumnRowAndResultSetMetaData(ResultSet rs,ResultSetMetaData rsmdt) throws SQLException {  int col=rs.getInt("ORDINAL_POSITION");  assertEquals("RSMD.getCatalogName",rsmdt.getCatalogName(col),rs.getString("TABLE_CAT"));  assertEquals("RSMD.getSchemaName",rsmdt.getSchemaName(col),rs.getString("TABLE_SCHEM"));  assertEquals("RSMD.getTableName",rsmdt.getTableName(col),rs.getString("TABLE_NAME"));  assertEquals("COLUMN_NAME",rsmdt.getColumnName(col),rs.getString("COLUMN_NAME"));  int metaColumnType=rs.getInt("DATA_TYPE");  if (metaColumnType == Types.BOOLEAN) {    assertEquals("TYPE_NAME","BOOLEAN",rs.getString("TYPE_NAME"));    assertEquals("TYPE_NAME","SMALLINT",rsmdt.getColumnTypeName(col));    assertEquals("DATA_TYPE",Types.SMALLINT,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.JAVA_OBJECT) {    assertEquals("DATA_TYPE",Types.LONGVARBINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.VARBINARY) {    assertEquals("DATA_TYPE",Types.VARBINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.BINARY) {    assertEquals("DATA_TYPE",Types.BINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.NUMERIC) {    assertEquals("DATA_TYPE",Types.DECIMAL,rsmdt.getColumnType(col));    assertEquals("TYPE_NAME","DECIMAL",rsmdt.getColumnTypeName(col));    assertEquals("TYPE_NAME","NUMERIC",rs.getString("TYPE_NAME"));  } else {    assertEquals("DATA_TYPE",rsmdt.getColumnType(col),rs.getInt("DATA_TYPE"));    assertEquals("TYPE_NAME",rsmdt.getColumnTypeName(col),rs.getString("TYPE_NAME"));  }  assertEquals("NULLABLE",rsmdt.isNullable(col),rs.getInt("NULLABLE"));  assertEquals("REMARKS","",rs.getString("REMARKS"));switch (rsmdt.isNullable(col)) {case ResultSetMetaData.columnNoNulls:    assertEquals("IS_NULLABLE","NO",rs.getString("IS_NULLABLE"));  break;case ResultSetMetaData.columnNullable:assertEquals("IS_NULLABLE","YES",rs.getString("IS_NULLABLE"));break;case ResultSetMetaData.columnNullableUnknown:assertEquals("IS_NULLABLE","",rs.getString("IS_NULLABLE"));break;default :fail("invalid return from rsmdt.isNullable(col)");}assertNull("SCOPE_CATLOG",rs.getString("SCOPE_CATLOG"));assertNull("SCOPE_SCHEMA",rs.getString("SCOPE_SCHEMA"));assertNull("SCOPE_TABLE",rs.getString("SCOPE_TABLE"));assertEquals("SOURCE_DATA_TYPE",0,rs.getShort("SOURCE_DATA_TYPE"));assertTrue(rs.wasNull());assertEquals("IS_AUTOINCREMENT",rsmdt.isAutoIncrement(col) ? "YES" : "NO",rs.getString("IS_AUTOINCREMENT"));assertFalse(rs.wasNull());}  }
class C{  public static void saveToSharedPreferences(JSONObject jsonObject,Context context){  if (jsonObject.has(TYPE_KEY)) {    try {      String type=jsonObject.getString(TYPE_KEY);      if (isValidType(type) && jsonObject.has(ID_KEY)) {        String jsonObjectId=jsonObject.getString(ID_KEY);        SharedPreferences sp=context.getSharedPreferences(jsonObjectId,Context.MODE_PRIVATE);        SharedPreferences.Editor editor=sp.edit();        editor.putString(jsonObjectId,jsonObject.toString());        editor.apply();      }    } catch (    JSONException jsonException) {      Log.e("JSON Parser","Error parsing data: " + jsonException.getMessage());    }  }}  }
class C{  public Cgroup cgroup() throws IOException {  return Cgroup.get(pid);}  }
class C{  public boolean isShowingHeaders(){  return mShowingHeaders;}  }
class C{  public ServiceConnectionRefused(){  requestFileName="getstate.query";  monitorAgent.expectFailure(null,expectedErrorCode);  monitorAgent.expectFailure(new MessageInfo(Origin.CLIENT_PROXY,ClientId.create("EE","BUSINESS","consumer"),ServiceId.create("EE","BUSINESS","producer",null,"getState"),null,null),expectedErrorCode);}  }
class C{  public static void showToast(Activity activity,int toastType,String message,ToastLength toastLength){  if (activity == null) {    Timber.e(new RuntimeException(),"Called showToast with null activity.");    return;  }  LayoutInflater inflater=activity.getLayoutInflater();  View layout=inflater.inflate(R.layout.toast_custom,(ViewGroup)activity.findViewById(R.id.toast_layout_root));  TextView text=(TextView)layout.findViewById(R.id.toast_text);  ImageView iv=(ImageView)layout.findViewById(R.id.toast_image);  String str="";  int icon=0;  Toast toast=new Toast(activity);switch (toastLength) {case SHORT:    toast.setDuration(Toast.LENGTH_SHORT);  break;case LONG:toast.setDuration(Toast.LENGTH_LONG);break;default :Timber.e("Not implemented");}switch (toastType) {case TOAST_TYPE_MESSAGE:str=message;break;case TOAST_TYPE_INTERNAL_ERROR:str=activity.getString(R.string.Internal_error);break;case TOAST_TYPE_NO_NETWORK:str=activity.getString(R.string.No_network_connection);break;case TOAST_TYPE_NO_SIZE_SELECTED:str=activity.getString(R.string.Please_select_a_size);break;}text.setText(str);if (icon != 0) {iv.setImageResource(icon);iv.setVisibility(View.VISIBLE);} else {iv.setVisibility(View.GONE);}toast.setView(layout);toast.show();}  }
class C{  public void disconnect(){  if (isClosed() || !isConnected()) {    return;  }  impl.disconnect();  address=null;  port=-1;  isConnected=false;}  }
class C{  @GuardedBy("mLock") private void updateFileCacheSizeLimit(){  boolean isAvailableSpaceLowerThanHighLimit;  StatFsHelper.StorageType storageType=mStorage.isExternal() ? StatFsHelper.StorageType.EXTERNAL : StatFsHelper.StorageType.INTERNAL;  isAvailableSpaceLowerThanHighLimit=mStatFsHelper.testLowDiskSpace(storageType,mDefaultCacheSizeLimit - mCacheStats.getSize());  if (isAvailableSpaceLowerThanHighLimit) {    mCacheSizeLimit=mLowDiskSpaceCacheSizeLimit;  } else {    mCacheSizeLimit=mDefaultCacheSizeLimit;  }}  }
class C{  public void test_getIntLjava_lang_ObjectI(){  int[] x={1};  int ret=0;  boolean thrown=false;  try {    ret=Array.getInt(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getInt(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getInt(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getInt(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public RowList(Session session){  this.session=session;  maxMemory=session.getDatabase().getMaxOperationMemory();}  }
class C{  @Override public boolean hasCustomName(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isDocument(){  return m_C_BPartner_ID != 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image=null;  float progress=0;  int i;  double constantValue=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  double noData=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];      if (inputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }      image=new WhiteboxRaster(inputHeader,"r");      noData=image.getNoDataValue();    } else     if (i == 1) {      outputHeader=args[i];      if (outputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }    } else     if (i == 2) {      try {        if (args[i].toLowerCase().contains("nodata") || args[i].toLowerCase().contains("no data")) {          constantValue=noData;        } else {          constantValue=Double.parseDouble(args[i]);        }      } catch (      Exception e) {        constantValue=noData;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else       if (args[i].toLowerCase().contains("byte")) {        dataType=WhiteboxRaster.DataType.BYTE;        if (constantValue > 127 || constantValue < -128) {          noData=-128;        }      }    }  }  try {    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,constantValue);    output.setNoDataValue(noData);    output.createNewDataFile();    output.setPreferredPalette(image.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Typeface walkwayOblique(Context context){  return FontSourceProcessor.process(R.raw.walkway_oblique,context);}  }
class C{  public boolean isSynchronized(){  return Modifier.isSynchronized(this.getModifiers());}  }
class C{  final public boolean equals(final ITx o){  return this == o || (o != null && startTime == o.getStartTimestamp());}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.418 -0500",hash_original_method="65F785E5C7A072182DBDFA4385D9D27B",hash_generated_method="49B5D6BDDF3744E41E97B3326CF144AB") private boolean isClosed(){  return out.getTaintBoolean();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_1__CONSTRAINT_BODY_1:    return getConstraintBody_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean canBreakOnModuleLoad(){  return canBreakOnModuleLoad;}  }
class C{  public static LimeProcess launchFile(File file) throws IOException, SecurityException {  List<String> forbiddenExtensions=Arrays.asList("exe","vbs","lnk","bat","sys","com","js","scpt");  if (file.isFile() && forbiddenExtensions.contains(FilenameUtils.getExtension(file.getName()))) {    throw new SecurityException();  }  String path=file.getCanonicalPath();  if (OSUtils.isWindows()) {    launchFileWindows(path);    return null;  } else   if (OSUtils.isMacOSX()) {    return launchFileMacOSX(path);  } else {    return launchFileOther(path);  }}  }
class C{  private void verifyAnnotationConflicts(@NonNull TypeElement typeElement){  List<String> annotationList=new LinkedList<>();  List<ExecutableElement> methodElements=new ImmutableList.Builder<ExecutableElement>().addAll(ElementFilter.methodsIn(typeElement.getEnclosedElements())).build();  for (  ExecutableElement executableElement : methodElements) {    annotationList.clear();    for (    AnnotationMirror mirror : elements.getAllAnnotationMirrors(executableElement)) {      String annotationName=mirror.getAnnotationType().toString();      if (CompilerUtils.annotationsIsSupported(mirror.getAnnotationType().toString())) {        for (        String a : annotationList) {          if (CompilerUtils.areConflicting(CompilerUtils.getAnnotation(a),CompilerUtils.getAnnotation(annotationName))) {            abortWithError("Annotations " + annotationName + " cannot be used with "+ a,typeElement);          }        }        annotationList.add(annotationName);      }    }  }}  }
class C{  private void _writeLongString(String text) throws IOException, JsonGenerationException {  _flushBuffer();  final int textLen=text.length();  int offset=0;  do {    int max=_outputEnd;    int segmentLen=((offset + max) > textLen) ? (textLen - offset) : max;    text.getChars(offset,offset + segmentLen,_outputBuffer,0);    if (_characterEscapes != null) {      _writeSegmentCustom(segmentLen);    } else     if (_maximumNonEscapedChar != 0) {      _writeSegmentASCII(segmentLen,_maximumNonEscapedChar);    } else {      _writeSegment(segmentLen);    }    offset+=segmentLen;  } while (offset < textLen);}  }
class C{  public void addYears(int years){  super.addField(DurationFieldType.years(),years);}  }
class C{  @Override public void removeProperty(String name){  properties.remove(name);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FunctionblockProperty createFunctionblockProperty(){  FunctionblockPropertyImpl functionblockProperty=new FunctionblockPropertyImpl();  return functionblockProperty;}  }
class C{  public TradePosition findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradePosition instance=entityManager.find(TradePosition.class,id);    if (null != instance)     instance.getTradeOrders().size();    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @RequestMapping(value="/api/greetings",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> createGreeting(@RequestBody final Greeting greeting){  logger.info("> createGreeting");  final Greeting savedGreeting=greetingService.create(greeting);  logger.info("< createGreeting");  return new ResponseEntity<Greeting>(savedGreeting,HttpStatus.CREATED);}  }
class C{  public void validateParam() throws Exception {  this.getJSplitPane().validateParam();}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,short value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public param removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static <T,F>boolean postCompleteRequestDelayError(long n,Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled,Throwable error){  for (; ; ) {    long r=field.get(instance);    long r0=r & REQUESTED_MASK;    long u=(r & COMPLETED_MASK) | Operators.addCap(r0,n);    if (field.compareAndSet(instance,r,u)) {      if (r == COMPLETED_MASK) {        postCompleteDrainDelayError(n | COMPLETED_MASK,actual,queue,field,instance,isCancelled,error);        return true;      }      return false;    }  }}  }
class C{  public void clear(){  initialize();}  }
class C{  public boolean isEmpty(){  return !advanceToEligibleSample();}  }
class C{  protected void initialize(){  fIsInitialized=true;  clearPositionCache();  fScanner.setRange(fDocument,0,fDocument.getLength());  try {    IToken token=fScanner.nextToken();    while (!token.isEOF()) {      String contentType=getTokenContentType(token);      if (isSupportedContentType(contentType)) {        TypedPosition p=new TypedPosition(fScanner.getTokenOffset(),fScanner.getTokenLength(),contentType);        fDocument.addPosition(fPositionCategory,p);      }      token=fScanner.nextToken();    }  } catch (  BadLocationException x) {  }catch (  BadPositionCategoryException x) {  }}  }
class C{  public Iterator<State> stateIterator(){  return stateMap.values().iterator();}  }
class C{  public boolean canDockEast(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canDockEast(constraints);}  }
class C{  public void scrollTo(Point pt){  if (this.enclosingScrollPane != null) {    this.enclosingScrollPane.getVerticalScrollBar().setValue(pt.y);  }}  }
class C{  private void releaseSessions(){  assert (m_activeTxCount == 0 && m_contexts.isEmpty());  if (m_minReleaseAge == 0) {    if (log.isDebugEnabled())     log.debug("RELEASE SESSIONS");    for (    FixedAllocator fa : m_allocs) {      fa.releaseSession(m_writeCacheService);    }  }}  }
class C{  public final Builder addItem(final int id,@StringRes final int titleId,@DrawableRes final int iconId){  bottomSheet.addItem(id,titleId,iconId);  return this;}  }
class C{  public PLCameraParameters(){  super();  this.reset();}  }
class C{  public void abort() throws IOException {synchronized (DiskLruCache.this) {    completeEdit(this,false);  }}  }
class C{  public void copyTo(SmbFile dest) throws SmbException {  SmbComReadAndX req;  SmbComReadAndXResponse resp;  WriterThread w;  int bsize;  byte[][] b;  if (share == null || dest.share == null) {    throw new SmbException("Invalid operation for workgroups or servers");  }  req=new SmbComReadAndX();  resp=new SmbComReadAndXResponse();  connect0();  dest.connect0();  resolveDfs(null);  try {    if (getAddress().equals(dest.getAddress()) && canon.regionMatches(true,0,dest.canon,0,Math.min(canon.length(),dest.canon.length()))) {      throw new SmbException("Source and destination paths overlap.");    }  } catch (  UnknownHostException uhe) {  }  w=new WriterThread();  w.setDaemon(true);  w.start();  SmbTransport t1=tree.session.transport;  SmbTransport t2=dest.tree.session.transport;  if (t1.snd_buf_size < t2.snd_buf_size) {    t2.snd_buf_size=t1.snd_buf_size;  } else {    t1.snd_buf_size=t2.snd_buf_size;  }  bsize=Math.min(t1.rcv_buf_size - 70,t1.snd_buf_size - 70);  b=new byte[2][bsize];  try {    copyTo0(dest,b,bsize,w,req,resp);  }  finally {    w.write(null,-1,null,0);  }}  }
class C{  public ExecutionOutcome execute(Object[] inputs,PrintStream out){  return operation.execute(inputs,out);}  }
class C{  public void testUtf8RawStrings() throws Exception {  List<byte[]> strings=generateStrings(new Random(28),750000,false);  ByteArrayOutputStream out=new ByteArrayOutputStream(16000);  JsonFactory jf=new JsonFactory();  JsonGenerator jgen=jf.createJsonGenerator(out,JsonEncoding.UTF8);  jgen.writeStartArray();  for (  byte[] str : strings) {    jgen.writeRawUTF8String(str,0,str.length);  }  jgen.writeEndArray();  jgen.close();  byte[] json=out.toByteArray();  JsonParser jp=jf.createJsonParser(json);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  for (  byte[] inputBytes : strings) {    assertToken(JsonToken.VALUE_STRING,jp.nextToken());    String string=jp.getText();    byte[] outputBytes=string.getBytes("UTF-8");    assertEquals(inputBytes.length,outputBytes.length);    assertArrayEquals(inputBytes,outputBytes);  }  assertToken(JsonToken.END_ARRAY,jp.nextToken());}  }
class C{  public Period withMonths(int months){  if (months == this.months) {    return this;  }  return create(years,months,days);}  }
class C{  public static final Circle scale(Circle circle,double scale){  if (circle == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Circle(circle.radius * scale);}  }
class C{  protected void validateOperationParameter(OperationParameter op,String id,boolean mandatory,OperationParameterType type,String locale){  assertEquals(id,op.getId());  assertEquals(mandatory,op.isMandatory());  assertEquals(type,op.getType());  assertTrue(op.getKey() > 0);  String text=localizer.getLocalizedTextFromDatabase(locale,op.getKey(),LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_PARAMETER_NAME);  assertEquals("parametername_" + locale,text);}  }
class C{  void copyTarget(Edge before,Edge after){  after.to=before.to;  for (  Expr e : before.to)   if (e.op == OP_phi)   e.append(e.args[findPhiArg(e,before)],after);}  }
class C{  final public static String cambiarCabeceraXml(String s){  java.io.ByteArrayOutputStream baos=new java.io.ByteArrayOutputStream();  s=s.replaceFirst("(<[^!].*) xmlns=\"http[s]?://afirmaws/ws/[a-z]*\" ","$1  ");  return s;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MetaImage) {    MetaImage mi=(MetaImage)o;    if (mi instanceof MetaImage.Waiter || mi.isNullOrFailed())     return zeroFloat; else     return new Float(((float)mi.getWidth()) / mi.getHeight());  }  return zeroFloat;}  }
class C{  public String generate(){  return generate(isFemale());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRoleOrgAccess[");  sb.append("AD_Role_ID=").append(getAD_Role_ID()).append(",AD_Client_ID=").append(getAD_Client_ID()).append(",AD_Org_ID=").append(getAD_Org_ID()).append(",RO=").append(isReadOnly());  sb.append("]");  return sb.toString();}  }
class C{  public static void ignore(final Throwable exception){}  }
class C{  private void resizeWidgetIfNeeded(boolean onDismiss){  int xThreshold=mCellLayout.getCellWidth() + mCellLayout.getWidthGap();  int yThreshold=mCellLayout.getCellHeight() + mCellLayout.getHeightGap();  int deltaX=mDeltaX + mDeltaXAddOn;  int deltaY=mDeltaY + mDeltaYAddOn;  float hSpanIncF=1.0f * deltaX / xThreshold - mRunningHInc;  float vSpanIncF=1.0f * deltaY / yThreshold - mRunningVInc;  int hSpanInc=0;  int vSpanInc=0;  int cellXInc=0;  int cellYInc=0;  int countX=mCellLayout.getCountX();  int countY=mCellLayout.getCountY();  if (Math.abs(hSpanIncF) > RESIZE_THRESHOLD) {    hSpanInc=Math.round(hSpanIncF);  }  if (Math.abs(vSpanIncF) > RESIZE_THRESHOLD) {    vSpanInc=Math.round(vSpanIncF);  }  if (!onDismiss && (hSpanInc == 0 && vSpanInc == 0))   return;  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)mWidgetView.getLayoutParams();  int spanX=lp.cellHSpan;  int spanY=lp.cellVSpan;  int cellX=lp.useTmpCoords ? lp.tmpCellX : lp.cellX;  int cellY=lp.useTmpCoords ? lp.tmpCellY : lp.cellY;  int hSpanDelta=0;  int vSpanDelta=0;  if (mLeftBorderActive) {    cellXInc=Math.max(-cellX,hSpanInc);    cellXInc=Math.min(lp.cellHSpan - mMinHSpan,cellXInc);    hSpanInc*=-1;    hSpanInc=Math.min(cellX,hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=-hSpanInc;  } else   if (mRightBorderActive) {    hSpanInc=Math.min(countX - (cellX + spanX),hSpanInc);    hSpanInc=Math.max(-(lp.cellHSpan - mMinHSpan),hSpanInc);    hSpanDelta=hSpanInc;  }  if (mTopBorderActive) {    cellYInc=Math.max(-cellY,vSpanInc);    cellYInc=Math.min(lp.cellVSpan - mMinVSpan,cellYInc);    vSpanInc*=-1;    vSpanInc=Math.min(cellY,vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=-vSpanInc;  } else   if (mBottomBorderActive) {    vSpanInc=Math.min(countY - (cellY + spanY),vSpanInc);    vSpanInc=Math.max(-(lp.cellVSpan - mMinVSpan),vSpanInc);    vSpanDelta=vSpanInc;  }  mDirectionVector[0]=0;  mDirectionVector[1]=0;  if (mLeftBorderActive || mRightBorderActive) {    spanX+=hSpanInc;    cellX+=cellXInc;    if (hSpanDelta != 0) {      mDirectionVector[0]=mLeftBorderActive ? -1 : 1;    }  }  if (mTopBorderActive || mBottomBorderActive) {    spanY+=vSpanInc;    cellY+=cellYInc;    if (vSpanDelta != 0) {      mDirectionVector[1]=mTopBorderActive ? -1 : 1;    }  }  if (!onDismiss && vSpanDelta == 0 && hSpanDelta == 0)   return;  if (onDismiss) {    mDirectionVector[0]=mLastDirectionVector[0];    mDirectionVector[1]=mLastDirectionVector[1];  } else {    mLastDirectionVector[0]=mDirectionVector[0];    mLastDirectionVector[1]=mDirectionVector[1];  }  if (mCellLayout.createAreaForResize(cellX,cellY,spanX,spanY,mWidgetView,mDirectionVector,onDismiss)) {    if (mStateAnnouncer != null && (lp.cellHSpan != spanX || lp.cellVSpan != spanY)) {      mStateAnnouncer.announce(mLauncher.getString(R.string.widget_resized));    }    lp.tmpCellX=cellX;    lp.tmpCellY=cellY;    lp.cellHSpan=spanX;    lp.cellVSpan=spanY;    mRunningVInc+=vSpanDelta;    mRunningHInc+=hSpanDelta;    if (!onDismiss) {      updateWidgetSizeRanges(mWidgetView,mLauncher,spanX,spanY);    }  }  mWidgetView.requestLayout();}  }
class C{  public ArrayListAnalyzer(XML aXml){  xml=aXml;}  }
class C{  public <V>V ensureTransaction(Callable<V> transaction){  return ensureTransaction(transaction,HGTransactionConfig.DEFAULT);}  }
class C{  private ZonedDateTime resolveLocal(LocalDateTime newDateTime){  return ofLocal(newDateTime,zone,offset);}  }
class C{  public Hessian2Output(OutputStream os){  init(os);}  }
class C{  public boolean isShutdown(){  return sched.isShutdown();}  }
class C{  static boolean isEnglishLocale(){  return LanguageUtils.isEnglishLocale(getLocale());}  }
class C{  public static BigInteger calculateM1(Digest digest,BigInteger N,BigInteger A,BigInteger B,BigInteger S){  BigInteger M1=hashPaddedTriplet(digest,N,A,B,S);  return M1;}  }
class C{  public T2(V1 val1,V2 val2){  super(val1,val2);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public static String toString(Session session,Value v){  v=safeValue(v,Isolate.DEFAULT_ID);switch (v.getType()) {case VariableType.UNDEFINED:case VariableType.NULL:case VariableType.BOOLEAN:case VariableType.STRING:    return v.getValueAsString();case VariableType.NUMBER:{    double d=((Double)v.getValueAsObject()).doubleValue();    if (d == (long)d) {      return Long.toString((long)d);    } else {      return v.toString();    }  }default :return toString(session,toPrimitive(session,v,PreferredType.STRING,v.getIsolateId()));}}  }
class C{  private int execute(int bci){  int bc=itsCodeBuffer[bci] & 0xFF;  int type, type2, index;  int length=0;  long lType, lType2;  String className;switch (bc) {case ByteCode.NOP:case ByteCode.IINC:case ByteCode.GOTO:case ByteCode.GOTO_W:    break;case ByteCode.CHECKCAST:  pop();push(TypeInfo.OBJECT(getOperand(bci + 1,2)));break;case ByteCode.IASTORE:case ByteCode.LASTORE:case ByteCode.FASTORE:case ByteCode.DASTORE:case ByteCode.AASTORE:case ByteCode.BASTORE:case ByteCode.CASTORE:case ByteCode.SASTORE:pop();case ByteCode.PUTFIELD:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPNE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:pop();case ByteCode.IFEQ:case ByteCode.IFNE:case ByteCode.IFLT:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IFNULL:case ByteCode.IFNONNULL:case ByteCode.POP:case ByteCode.MONITORENTER:case ByteCode.MONITOREXIT:case ByteCode.PUTSTATIC:pop();break;case ByteCode.POP2:pop2();break;case ByteCode.ACONST_NULL:push(TypeInfo.NULL);break;case ByteCode.IALOAD:case ByteCode.BALOAD:case ByteCode.CALOAD:case ByteCode.SALOAD:case ByteCode.IADD:case ByteCode.ISUB:case ByteCode.IMUL:case ByteCode.IDIV:case ByteCode.IREM:case ByteCode.ISHL:case ByteCode.ISHR:case ByteCode.IUSHR:case ByteCode.IAND:case ByteCode.IOR:case ByteCode.IXOR:case ByteCode.LCMP:case ByteCode.FCMPL:case ByteCode.FCMPG:case ByteCode.DCMPL:case ByteCode.DCMPG:pop();case ByteCode.INEG:case ByteCode.L2I:case ByteCode.F2I:case ByteCode.D2I:case ByteCode.I2B:case ByteCode.I2C:case ByteCode.I2S:case ByteCode.ARRAYLENGTH:case ByteCode.INSTANCEOF:pop();case ByteCode.ICONST_M1:case ByteCode.ICONST_0:case ByteCode.ICONST_1:case ByteCode.ICONST_2:case ByteCode.ICONST_3:case ByteCode.ICONST_4:case ByteCode.ICONST_5:case ByteCode.ILOAD:case ByteCode.ILOAD_0:case ByteCode.ILOAD_1:case ByteCode.ILOAD_2:case ByteCode.ILOAD_3:case ByteCode.BIPUSH:case ByteCode.SIPUSH:push(TypeInfo.INTEGER);break;case ByteCode.LALOAD:case ByteCode.LADD:case ByteCode.LSUB:case ByteCode.LMUL:case ByteCode.LDIV:case ByteCode.LREM:case ByteCode.LSHL:case ByteCode.LSHR:case ByteCode.LUSHR:case ByteCode.LAND:case ByteCode.LOR:case ByteCode.LXOR:pop();case ByteCode.LNEG:case ByteCode.I2L:case ByteCode.F2L:case ByteCode.D2L:pop();case ByteCode.LCONST_0:case ByteCode.LCONST_1:case ByteCode.LLOAD:case ByteCode.LLOAD_0:case ByteCode.LLOAD_1:case ByteCode.LLOAD_2:case ByteCode.LLOAD_3:push(TypeInfo.LONG);break;case ByteCode.FALOAD:case ByteCode.FADD:case ByteCode.FSUB:case ByteCode.FMUL:case ByteCode.FDIV:case ByteCode.FREM:pop();case ByteCode.FNEG:case ByteCode.I2F:case ByteCode.L2F:case ByteCode.D2F:pop();case ByteCode.FCONST_0:case ByteCode.FCONST_1:case ByteCode.FCONST_2:case ByteCode.FLOAD:case ByteCode.FLOAD_0:case ByteCode.FLOAD_1:case ByteCode.FLOAD_2:case ByteCode.FLOAD_3:push(TypeInfo.FLOAT);break;case ByteCode.DALOAD:case ByteCode.DADD:case ByteCode.DSUB:case ByteCode.DMUL:case ByteCode.DDIV:case ByteCode.DREM:pop();case ByteCode.DNEG:case ByteCode.I2D:case ByteCode.L2D:case ByteCode.F2D:pop();case ByteCode.DCONST_0:case ByteCode.DCONST_1:case ByteCode.DLOAD:case ByteCode.DLOAD_0:case ByteCode.DLOAD_1:case ByteCode.DLOAD_2:case ByteCode.DLOAD_3:push(TypeInfo.DOUBLE);break;case ByteCode.ISTORE:executeStore(getOperand(bci + 1),TypeInfo.INTEGER);break;case ByteCode.ISTORE_0:case ByteCode.ISTORE_1:case ByteCode.ISTORE_2:case ByteCode.ISTORE_3:executeStore(bc - ByteCode.ISTORE_0,TypeInfo.INTEGER);break;case ByteCode.LSTORE:executeStore(getOperand(bci + 1),TypeInfo.LONG);break;case ByteCode.LSTORE_0:case ByteCode.LSTORE_1:case ByteCode.LSTORE_2:case ByteCode.LSTORE_3:executeStore(bc - ByteCode.LSTORE_0,TypeInfo.LONG);break;case ByteCode.FSTORE:executeStore(getOperand(bci + 1),TypeInfo.FLOAT);break;case ByteCode.FSTORE_0:case ByteCode.FSTORE_1:case ByteCode.FSTORE_2:case ByteCode.FSTORE_3:executeStore(getOperand(bci + 1),TypeInfo.FLOAT);break;case ByteCode.DSTORE:executeStore(getOperand(bci + 1),TypeInfo.DOUBLE);break;case ByteCode.DSTORE_0:case ByteCode.DSTORE_1:case ByteCode.DSTORE_2:case ByteCode.DSTORE_3:executeStore(bc - ByteCode.DSTORE_0,TypeInfo.DOUBLE);break;case ByteCode.ALOAD:executeALoad(getOperand(bci + 1));break;case ByteCode.ALOAD_0:case ByteCode.ALOAD_1:case ByteCode.ALOAD_2:case ByteCode.ALOAD_3:executeALoad(bc - ByteCode.ALOAD_0);break;case ByteCode.ASTORE:executeAStore(getOperand(bci + 1));break;case ByteCode.ASTORE_0:case ByteCode.ASTORE_1:case ByteCode.ASTORE_2:case ByteCode.ASTORE_3:executeAStore(bc - ByteCode.ASTORE_0);break;case ByteCode.IRETURN:case ByteCode.LRETURN:case ByteCode.FRETURN:case ByteCode.DRETURN:case ByteCode.ARETURN:case ByteCode.RETURN:clearStack();break;case ByteCode.ATHROW:type=pop();clearStack();push(type);break;case ByteCode.SWAP:type=pop();type2=pop();push(type);push(type2);break;case ByteCode.LDC:case ByteCode.LDC_W:case ByteCode.LDC2_W:if (bc == ByteCode.LDC) {index=getOperand(bci + 1);} else {index=getOperand(bci + 1,2);}byte constType=itsConstantPool.getConstantType(index);switch (constType) {case ConstantPool.CONSTANT_Double:push(TypeInfo.DOUBLE);break;case ConstantPool.CONSTANT_Float:push(TypeInfo.FLOAT);break;case ConstantPool.CONSTANT_Long:push(TypeInfo.LONG);break;case ConstantPool.CONSTANT_Integer:push(TypeInfo.INTEGER);break;case ConstantPool.CONSTANT_String:push(TypeInfo.OBJECT("java/lang/String",itsConstantPool));break;default :throw new IllegalArgumentException("bad const type " + constType);}break;case ByteCode.NEW:push(TypeInfo.UNINITIALIZED_VARIABLE(bci));break;case ByteCode.NEWARRAY:pop();char componentType=arrayTypeToName(itsCodeBuffer[bci + 1]);index=itsConstantPool.addClass("[" + componentType);push(TypeInfo.OBJECT((short)index));break;case ByteCode.ANEWARRAY:index=getOperand(bci + 1,2);className=(String)itsConstantPool.getConstantData(index);pop();push(TypeInfo.OBJECT("[L" + className + ';',itsConstantPool));break;case ByteCode.INVOKEVIRTUAL:case ByteCode.INVOKESPECIAL:case ByteCode.INVOKESTATIC:case ByteCode.INVOKEINTERFACE:index=getOperand(bci + 1,2);FieldOrMethodRef m=(FieldOrMethodRef)itsConstantPool.getConstantData(index);String methodType=m.getType();String methodName=m.getName();int parameterCount=sizeOfParameters(methodType) >>> 16;for (int i=0; i < parameterCount; i++) {pop();}if (bc != ByteCode.INVOKESTATIC) {int instType=pop();int tag=TypeInfo.getTag(instType);if (tag == TypeInfo.UNINITIALIZED_VARIABLE(0) || tag == TypeInfo.UNINITIALIZED_THIS) {if ("<init>".equals(methodName)) {int newType=TypeInfo.OBJECT(itsThisClassIndex);initializeTypeInfo(instType,newType);} else {throw new IllegalStateException("bad instance");}}}int rParen=methodType.indexOf(')');String returnType=methodType.substring(rParen + 1);returnType=descriptorToInternalName(returnType);if (!returnType.equals("V")) {push(TypeInfo.fromType(returnType,itsConstantPool));}break;case ByteCode.GETFIELD:pop();case ByteCode.GETSTATIC:index=getOperand(bci + 1,2);FieldOrMethodRef f=(FieldOrMethodRef)itsConstantPool.getConstantData(index);String fieldType=descriptorToInternalName(f.getType());push(TypeInfo.fromType(fieldType,itsConstantPool));break;case ByteCode.DUP:type=pop();push(type);push(type);break;case ByteCode.DUP_X1:type=pop();type2=pop();push(type);push(type2);push(type);break;case ByteCode.DUP_X2:type=pop();lType=pop2();push(type);push2(lType);push(type);break;case ByteCode.DUP2:lType=pop2();push2(lType);push2(lType);break;case ByteCode.DUP2_X1:lType=pop2();type=pop();push2(lType);push(type);push2(lType);break;case ByteCode.DUP2_X2:lType=pop2();lType2=pop2();push2(lType);push2(lType2);push2(lType);break;case ByteCode.TABLESWITCH:int switchStart=bci + 1 + (3 & ~bci);int low=getOperand(switchStart + 4,4);int high=getOperand(switchStart + 8,4);length=4 * (high - low + 4) + switchStart - bci;pop();break;case ByteCode.AALOAD:pop();int typeIndex=pop() >>> 8;className=(String)itsConstantPool.getConstantData(typeIndex);String arrayType=className;if (arrayType.charAt(0) != '[') {throw new IllegalStateException("bad array type");}String elementDesc=arrayType.substring(1);String elementType=descriptorToInternalName(elementDesc);typeIndex=itsConstantPool.addClass(elementType);push(TypeInfo.OBJECT(typeIndex));break;case ByteCode.WIDE:case ByteCode.MULTIANEWARRAY:case ByteCode.LOOKUPSWITCH:case ByteCode.JSR:case ByteCode.RET:case ByteCode.JSR_W:default :throw new IllegalArgumentException("bad opcode");}if (length == 0) {length=opcodeLength(bc);}return length;}  }
class C{  protected QueryEngine newStandaloneQueryEngine(final IBTreeManager indexManager){  if (log.isInfoEnabled())   log.info("Initializing query engine: " + indexManager);  final QueryEngine queryEngine=new QueryEngine(indexManager);  queryEngine.init();  return queryEngine;}  }
class C{  @Override public void addElement(Object obj){  if (!(obj instanceof CheckBoxListItem)) {    super.addElement(new CheckBoxListItem(obj));  } else {    super.addElement(obj);  }}  }
class C{  @Override public boolean downloadFile(String path,String dest){  try {    FileOutputStream fos=new FileOutputStream(new File(dest));    mDBApi.getFile(path,null,fos,null);    fos.close();    return true;  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }catch (  FileNotFoundException e) {    e.printStackTrace();    return false;  }catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public double doubleValue(){  assertDefined();  return m_value.doubleValue();}  }
class C{  public FciOrientT(SepsetProducer sepsets,IndependenceTest test){  this.sepsets=sepsets;  this.test=test;}  }
class C{  public static BufferedImage trimWhiteSpace(BufferedImage img,int whiteThreshold,int startTop,int startRight,int startBottom,int startLeft){  return trimWhiteSpace(img,img,whiteThreshold,startTop,startRight,startBottom,startLeft);}  }
class C{  public void writeBody(OutputStream os,MimeBodyPart msg) throws IOException {  if (msg instanceof MimeMultipart) {    String ct=msg.getContentType().getValue();    String newCt=WspUtil.convertMultipartContentType(ct);    msg.getContentType().setValue(newCt);    if (newCt.startsWith("application/vnd.wap.multipart.")) {      writeMultipart(os,(MimeMultipart)msg);    } else {    }  } else {    os.write(msg.getBody());  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case ImPackage.SCRIPT_IM:    return createScript_IM();case ImPackage.SYMBOL_TABLE:  return createSymbolTable();case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL:return createSymbolTableEntryOriginal();case ImPackage.SYMBOL_TABLE_ENTRY_IM_ONLY:return createSymbolTableEntryIMOnly();case ImPackage.SYMBOL_TABLE_ENTRY_INTERNAL:return createSymbolTableEntryInternal();case ImPackage.IDENTIFIER_REF_IM:return createIdentifierRef_IM();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM:return createParameterizedPropertyAccessExpression_IM();case ImPackage.PARAMETERIZED_TYPE_REF_IM:return createParameterizedTypeRef_IM();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM:return createParameterizedTypeRefStructural_IM();case ImPackage.SNIPPET:return createSnippet();case ImPackage.DELEGATING_GETTER_DECLARATION:return createDelegatingGetterDeclaration();case ImPackage.DELEGATING_SETTER_DECLARATION:return createDelegatingSetterDeclaration();case ImPackage.DELEGATING_METHOD_DECLARATION:return createDelegatingMethodDeclaration();case ImPackage.STRING_LITERAL_FOR_STE:return createStringLiteralForSTE();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public void postSerializationInit(){  getAnimation().initializeImages();  currentlyHeardPhrases=new ArrayList<String>();  this.collision=false;}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.012 -0500",hash_original_method="EFA83347B3FFE38EB6FE081BBE35835E",hash_generated_method="FCD9C39A9786A78D9C1132E53F2081D2") public boolean requestRouteToHostAddress(int networkType,InetAddress hostAddress){  byte[] address=hostAddress.getAddress();  try {    return mService.requestRouteToHostAddress(networkType,address);  } catch (  RemoteException e) {    return false;  }}  }
class C{  protected String findMappedName(String name){  return params.get(MAP_PREFIX + name,name);}  }
class C{  private void newLineIfNotEmpty(int align){  if (curLine.getComponentCount() > 0) {    newLine(align);  }}  }
class C{  public static void executeAfterPersist(final Runnable runnable){  final State state=getCurrent();  if (state == null) {    runnable.run();    return;  }  final MetaKey key=state.key;  if (key == null) {    runnable.run();    return;  }  final State parent=state.sameKeyParent == null ? state : state.sameKeyParent;  if (parent.type == LockType.READ) {    runnable.run();    return;  }  parent.addAfterTask(runnable);}  }
class C{  public ConstantAttribute(ConstPool cp,int index){  super(cp,tag);  byte[] bvalue=new byte[2];  bvalue[0]=(byte)(index >>> 8);  bvalue[1]=(byte)index;  set(bvalue);}  }
class C{  public Sample(final double xValue,final double yValue,final double yPlusError,final double yMinusError,final double xPlusError,final double xMinusError){  this(xValue,yValue,yPlusError,yMinusError,xPlusError,xMinusError,"");}  }
class C{  public boolean isPositiveOnly(){  Object oo=get_Value(COLUMNNAME_IsPositiveOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  private void createDependency(JCas aJCas,Map<Integer,String> tokens,Map<Integer,String> dependencyFunction,Map<Integer,Integer> dependencyDependent,Map<String,Token> tokensStored){  for (int i=1; i <= tokens.size(); i++) {    if (dependencyFunction.get(i) != null) {      Dependency outDependency=new Dependency(aJCas);      outDependency.setDependencyType(dependencyFunction.get(i));      int begin=0, end=0;      if (dependencyDependent.get(i) != 0) {        begin=tokensStored.get("t_" + i).getBegin() > tokensStored.get("t_" + dependencyDependent.get(i)).getBegin() ? tokensStored.get("t_" + dependencyDependent.get(i)).getBegin() : tokensStored.get("t_" + i).getBegin();        end=tokensStored.get("t_" + i).getEnd() < tokensStored.get("t_" + dependencyDependent.get(i)).getEnd() ? tokensStored.get("t_" + dependencyDependent.get(i)).getEnd() : tokensStored.get("t_" + i).getEnd();      } else {        begin=tokensStored.get("t_" + i).getBegin();        end=tokensStored.get("t_" + i).getEnd();      }      outDependency.setBegin(begin);      outDependency.setEnd(end);      outDependency.setDependent(tokensStored.get("t_" + i));      if (dependencyDependent.get(i) == 0) {        outDependency.setGovernor(tokensStored.get("t_" + i));      } else {        outDependency.setGovernor(tokensStored.get("t_" + dependencyDependent.get(i)));      }      outDependency.addToIndexes();    }  }}  }
class C{  private String matchMap(ArrayList<ELNode.Function> functions){  String mapName=null;  for (int i=0; i < functions.size(); i++) {    ELNode.Function f=functions.get(i);    String temName=gMap.get(f.getPrefix() + ':' + f.getName()+ ':'+ f.getUri());    if (temName == null) {      return null;    }    if (mapName == null) {      mapName=temName;    } else     if (!temName.equals(mapName)) {      return null;    }  }  return mapName;}  }
class C{  public StreamTokenizer(Reader r){  this();  if (r == null) {    throw new NullPointerException();  }  reader=r;}  }
class C{  public String nodeSplitterTipText(){  return "The the splitting method to split the nodes of the KDTree.";}  }
class C{  public static void makeHomePlan(Plan plan,Coord homeCoord){  final Coord coord=homeCoord;  PopulationUtils.createAndAddActivityFromCoord(plan,(String)ACT_HOME,coord);}  }
class C{  public void add(String entry,byte[] bytes,boolean overwrite) throws IOException {  JarEntry newEntry=new JarEntry(entry);  if (jarEntries.containsKey(entry) && !overwrite) {    throw new IOException("Archive already contains entry: " + entry);  } else {    jarEntries.remove(entry);    jarEntriesToAdd.remove(entry);    jarEntries.put(entry,newEntry);    jarEntriesToAdd.put(entry,bytes);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.400 -0500",hash_original_method="C7C89EDE88EEEE9F63E963A5E9C3FEE9",hash_generated_method="B8B764751BE0250B937971F01AE9FE8D") private static void dualPivotQuicksort(short[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  short ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    short t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    short t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    short t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    short t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    short t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  short pivot1=ae2;  a[e2]=a[left];  short pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public static final Vec2D fromTheta(float theta){  return new Vec2D((float)Math.cos(theta),(float)Math.sin(theta));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isRecording());}  }
class C{  public TimelineListAdapter(Context context,Timeline<T> timeline){  this(context,new TimelineDelegate<>(timeline));}  }
class C{  private static void writeParameter(String name,String value,StringBuilder sb){  sb.append(';').append(name).append('=').append(encodeParameterValue(value));}  }
class C{  public GenericValue create(GenericValue value) throws GenericEntityException {  if (value == null) {    return null;  }  int retVal=genericDAO.insert(value);  if (Debug.verboseOn())   Debug.logVerbose("Insert Return Value : " + retVal,module);  return value;}  }
class C{  public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void send(WebSocket session,HeadersAmp headers,String to,String methodName,PodRef podCaller,Object... args) throws IOException {}  }
class C{  public static void writeSource(FacesContext ctx,String file){  ExternalContext extCtx=ctx.getExternalContext();  BufferedReader r=new BufferedReader(new InputStreamReader(extCtx.getResourceAsStream(file)));  StringWriter w=new StringWriter();  PrintWriter pw=new PrintWriter(w);  try {    int lineNumber=1;    for (String s=r.readLine(); s != null; s=r.readLine()) {      pw.format("%3s",Integer.toString(lineNumber++));      pw.write(": ");      pw.write(s);      pw.write('\n');    }    ctx.getResponseWriter().writeText(w.toString(),null);  } catch (  IOException ioe) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,ioe.toString(),ioe);    }  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  for (Node p=getFirstChild(); p != null; p=p.getNextSibling()) {    Node t=p.cloneNode(true);    n.appendChild(t);  }  return n;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public void testGetAttributeNS2() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",builder);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.setAttributeNodeNS(newAttribute);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  public TAG_Byte_Array writePngTexture() throws IOException {  int image_width=128;  int image_height=128;  TAG_Compound data=(TAG_Compound)root.getElement("data");  if (data == null)   return new TAG_Byte_Array(null);  TAG_Byte_Array color_map=((TAG_Byte_Array)data.getElement("colors"));  BufferedImage img=new BufferedImage(image_width,image_height,BufferedImage.TYPE_INT_RGB);  for (int x=0; x < image_width; x++) {    for (int y=0; y < image_height; y++) {      int index=(y * image_height) + (x);      byte colorIdx=color_map.data[index];      img.setRGB(x,y,getColorByByte(colorIdx).getRGB());    }  }  String materialName="map_" + map_id + "_item_frame";  String mapFilename="map_" + map_id + "_item_frame.png";  File texFile=new File(Options.outputDir + "/tex",mapFilename);  if (!ImageIO.write(img,"PNG",texFile)) {    throw new RuntimeException("Unexpected error writing image");  }  File mtlfile=new File(Options.outputDir,Options.mtlFileName);  try (PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(mtlfile,true)))){    out.println("");    out.println("");    out.println("newmtl " + materialName);    out.println("Kd 0.2500 0.2500 0.2500");    out.println("Ks 0.0000 0.0000 0.0000");    out.print("map_Kd tex/" + mapFilename);  } catch (  IOException e) {    throw new RuntimeException("Unexpected error apending material file");  }  return color_map;}  }
class C{  private final int _verifyNoLeadingZeroes() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd && !loadMore()) {    return INT_0;  }  int ch=_inputBuffer[_inputPtr] & 0xFF;  if (ch < INT_0 || ch > INT_9) {    return INT_0;  }  if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {    reportInvalidNumber("Leading zeroes not allowed");  }  ++_inputPtr;  if (ch == INT_0) {    while (_inputPtr < _inputEnd || loadMore()) {      ch=_inputBuffer[_inputPtr] & 0xFF;      if (ch < INT_0 || ch > INT_9) {        return INT_0;      }      ++_inputPtr;      if (ch != INT_0) {        break;      }    }  }  return ch;}  }
class C{  public void testNoCallBack() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  FakeSocket socket=new FakeSocket(false).withNoResponse(false);  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  FakeCallback callback=callAsync(rpcChannel,request,null);  verifyRequestToSocket(request,socket);  assertFalse(callback.invoked);  assertNull(callSync(rpcChannel,request,null));  verifyRequestToSocket(request,socket);}  }
class C{  public static void updateKeyring(Player player){  if (player.getFeature("keyring") != null) {    Item keyring=SingletonRepository.getEntityManager().getItem("keyring");    if (keyring == null) {      logger.error("Failed to create keyring item");      return;    }    keyring.setBoundTo(player.getName());    if (!player.hasSlot("belt")) {      player.addSlot(new PlayerSlot("belt"));    }    if (!player.hasSlot("back")) {      player.addSlot(new PlayerSlot("back"));    }    if (!player.equip("belt",keyring)) {      logger.error("Failed to place keyring in belt: " + player);      return;    }    RPSlot oldSlot=player.getSlot("keyring");    EntitySlot newSlot=keyring.getEntitySlot("content");    if (!"keyring".equals(newSlot.getContentSlotName())) {      logger.error("Keyring has incorrect slot name: " + newSlot.getContentSlotName() + ", item is: "+ keyring);      return;    }    ArrayList<RPObject> contents=new ArrayList<RPObject>(oldSlot.size());    for (    RPObject item : oldSlot) {      contents.add(item);    }    for (    RPObject item : contents) {      oldSlot.remove(item.getID());      newSlot.add(item);    }    oldSlot.clear();    player.setFeature("keyring",false);  }}  }
class C{  public void show(List<WorkspaceDto> workspaces,Callback<Component,Exception> callback){  this.callback=callback;  this.workspaces=workspaces;  view.clearWorkspacesPanel();  String workspaceName=browserQueryFieldRenderer.getWorkspaceName();  createWsWidgets(workspaces);  for (  WorkspaceDto workspace : workspaces) {    if (workspaceName.equals(workspace.getConfig().getName())) {      selectedWorkspace=workspace;      break;    }  }  view.setWsName(workspaceName);  view.show();}  }
class C{  synchronized NfcActivityState findActivityState(Activity activity){  for (  NfcActivityState state : mActivities) {    if (state.activity == activity) {      return state;    }  }  return null;}  }
class C{  public DelegatingSocket(InetAddress address,int port) throws IOException {  this((Socket)null);}  }
class C{  public BufferedImage renderHistogram(int width,int height,List<Instances> series,String attToPlot,List<String> optionalArgs) throws Exception {  BufferedImage osi=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  Instances toPlot=new Instances(series.get(0));  for (int i=1; i < series.size(); i++) {    Instances additional=series.get(i);    for (    Instance temp : additional) {      toPlot.add(temp);    }  }  int attIndex=getIndexOfAttribute(toPlot,attToPlot);  if (attIndex < 0) {    attIndex=0;  }  String colorAtt=getOption(optionalArgs,"-color");  int tempC=getIndexOfAttribute(toPlot,colorAtt);  AttributeVisualizationPanel offScreenPlot=new AttributeVisualizationPanel();  offScreenPlot.setSize(width,height);  offScreenPlot.setInstances(toPlot);  offScreenPlot.setAttribute(attIndex);  if (tempC >= 0) {    offScreenPlot.setColoringIndex(tempC);  }  java.awt.Graphics g=osi.getGraphics();  offScreenPlot.paintComponent(g);  Thread.sleep(2000);  offScreenPlot.paintComponent(g);  return osi;}  }
class C{  public Property dayOfYear(){  return new Property(this,getChronology().dayOfYear());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.168 -0500",hash_original_method="41700754D59EF22B8871124AB8FA94BA",hash_generated_method="0D9FD3044FA062824A8377544F1D29F5") public static OrientedBoundingBox computeOrientedBoundingBox(float[] originalPoints){  int size=originalPoints.length;  float[] points=new float[size];  for (int i=0; i < size; i++) {    points[i]=originalPoints[i];  }  float[] meanVector=computeCentroid(points);  return computeOrientedBoundingBox(points,meanVector);}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof QueryThreadTask)) {    return false;  }  QueryThreadTask o=(QueryThreadTask)other;  return this.queryThread.equals(o.queryThread);}  }
class C{  public IntValueModel(String name,Integer defaultValue){  super(name,defaultValue);}  }
class C{  public EditLabelDialog(final Shell parentShell,final TFSRepository repository,final String initialServerPath,final RecursionType recursionType,final VersionSpec versionSpec){  this(parentShell,repository,null,initialServerPath,recursionType,versionSpec);  Check.notNull(repository,"repository");  Check.notNull(initialServerPath,"initialServerPath");  Check.notNull(recursionType,"recursionType");  Check.notNull(versionSpec,"versionSpec");}  }
class C{  @Path("{secretId}") @Timed @ExceptionMetered @DELETE public Response deleteSecret(@Auth User user,@PathParam("secretId") LongParam secretId){  Optional<Secret> secret=secretController.getSecretById(secretId.get());  if (!secret.isPresent()) {    logger.info("User '{}' tried deleting a secret which was not found (id={})",user,secretId.get());    throw new NotFoundException("Secret not found.");  }  logger.info("User '{}' deleting secret id={}, name='{}'",user,secretId,secret.get().getName());  secretDAO.deleteSecretsByName(secret.get().getName());  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_DELETE,user.getName(),secret.get().getName()));  return Response.noContent().build();}  }
class C{  Vector processQNAMES(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  for (int i=0; i < nQNames; i++) {    qnames.addElement(new QName(tokenizer.nextToken(),handler));  }  return qnames;}  }
class C{  public static List<String> resolveRow(final String tableVar,final List<HtmlColumn> columns,final Object rowObject){  try {    final List<String> row=new ArrayList<>(columns.size());    final StringListResponseWriter writer=new StringListResponseWriter(row);    final FacesContext facesContext=createWrappedFacesContext();    facesContext.setResponseWriter(writer);    TableExportELResolver.activate(tableVar,rowObject);    int columnCount=0;    for (    HtmlColumn column : columns) {      columnCount++;      for (      UIComponent child : column.getChildren()) {        try {          writeContent(row,writer,facesContext,columnCount,child);        } catch (        Exception e) {          LOG.warning(String.format("Could not encode child %s with clientId %s",child.getClass(),child.getId()));          try {            writer.writeText(EXPORT_ERROR_TEXT,"");          } catch (          IOException e1) {            LOG.warning(String.format("Could not encode child %s with clientId %s",child.getClass(),child.getId()));          }        }      }      if (columnCount > row.size()) {        row.add("");      }    }    return row;  }  finally {    deactivate();  }}  }
class C{  public H2FullPrunedBlockStore(NetworkParameters params,String dbName,int fullStoreDepth) throws BlockStoreException {  this(params,dbName,null,null,fullStoreDepth);}  }
class C{  private void resetInputs(){  resetMembers();  resetUIInputChildren();  setShowConfirm(false);  setDirtyStage(false);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private void paintProgressIndicator(SeaGlassContext context,Graphics2D g2d,int width,int height,int size,boolean isFinished){  JProgressBar pBar=(JProgressBar)context.getComponent();  if (tileWhenIndeterminate && pBar.isIndeterminate()) {    double offsetFraction=(double)getAnimationIndex() / (double)getFrameCount();    int offset=(int)(offsetFraction * tileWidth);    if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {      if (!SeaGlassLookAndFeel.isLeftToRight(pBar)) {        offset=tileWidth - offset;      }      for (int i=-tileWidth + offset; i <= width; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g2d,i,0,tileWidth,height,pBar.getOrientation());      }    } else {      for (int i=-offset; i < height + tileWidth; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g2d,0,i,width,tileWidth,pBar.getOrientation());      }    }  } else {    if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {      int start=0;      if (isFinished) {        size=width;      } else       if (!SeaGlassLookAndFeel.isLeftToRight(pBar)) {        start=width - size;      }      context.getPainter().paintProgressBarForeground(context,g2d,start,0,size,height,pBar.getOrientation());    } else {      int start=height;      if (isFinished) {        size=height;      }      context.getPainter().paintProgressBarForeground(context,g2d,0,start,width,size,pBar.getOrientation());    }  }}  }
class C{  private void describe(GlyphDescription gd){  int endPtIndex=0;  points=new Point[gd.getPointCount() + 2];  for (int i=0; i < gd.getPointCount(); i++) {    boolean endPt=gd.getEndPtOfContours(endPtIndex) == i;    if (endPt) {      endPtIndex++;    }    points[i]=new Point(gd.getXCoordinate(i),gd.getYCoordinate(i),(gd.getFlags(i) & GlyfDescript.onCurve) != 0,endPt);  }  points[gd.getPointCount()]=new Point(0,0,true,true);  points[gd.getPointCount() + 1]=new Point(advanceWidth,0,true,true);}  }
class C{  public int updateByPrimaryKey(User record) throws SQLException {  int rows=sqlMapClient.update("t_user.ibatorgenerated_updateByPrimaryKey",record);  return rows;}  }
class C{  void addTransmitCompleteListener(FutureEventListener<Integer> transmitCompleteListener){  transmitComplete.addEventListener(transmitCompleteListener);}  }
class C{  public SayNPCNamesForUnstartedQuestsAction(List<String> regions){  this.regions=new LinkedList<String>(regions);}  }
class C{  public BooleanEditor(final String id,final MarkupContainer markupProvider,final IModel<String> model,final IModel<String> labelModel,final AttrValue attrValue,final boolean readOnly){  super(id,"booleanEditor",markupProvider);  inner=model;  final CheckBox checkboxField=new CheckBox(EDIT,new PropertyModel<Boolean>(this,"innerValue"));  checkboxField.setLabel(labelModel);  checkboxField.setRequired(attrValue.getAttribute().isMandatory());  checkboxField.setEnabled(!readOnly);  add(checkboxField);}  }
class C{  public void testToString(){  assertTrue(new CodeSigner(cpath,null).toString().contains(""));  assertTrue(new CodeSigner(cpath,ts).toString().contains(""));  assertTrue(new CodeSigner(cpath,null).toString().contains("Signer"));  assertTrue(new CodeSigner(cpath,ts).toString().contains(ts.toString()));}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public int estimateMaximumLag(){  int max=0;synchronized (this) {    BufferedSubscription<T> pred=null, next;    for (BufferedSubscription<T> b=clients; b != null; b=next) {      int n;      next=b.next;      if ((n=b.estimateLag()) < 0) {        b.next=null;        if (pred == null)         clients=next; else         pred.next=next;      } else {        if (n > max)         max=n;        pred=b;      }    }  }  return max;}  }
class C{  final private void updateLocation(){  simulation.updateLocation(this);}  }
class C{  public SimplePathfinder(final StendhalRPZone zone,final int startX,final int startY,final Rectangle2D destination,final double maxDist){  super(startX,startY,destination,maxDist);  collision=zone.collisionMap;}  }
class C{  @Override public int compareLatitude(float lat){  DefaultMapEntity node=getTrkPt(0);  if (node != null) {    int result=node.compareLatitude(lat);    for (int i=1; i < trkpts.size(); i++)     if (result != getTrkPt(i).compareLatitude(lat))     return 0;    return result;  } else {    return 0;  }}  }
class C{  public void enableDrawer(boolean isEnabled){  if (mDrawer != null) {    mDrawer.getDrawerLayout().setDrawerLockMode(isEnabled ? DrawerLayout.LOCK_MODE_UNLOCKED : DrawerLayout.LOCK_MODE_LOCKED_CLOSED);  }}  }
class C{  public TopHitsBuilder addFieldDataField(String name){  sourceBuilder().fieldDataField(name);  return this;}  }
class C{  protected BytesRef changeToken(BytesRef in){  return in;}  }
class C{  protected void optimizetSNE(AffinityMatrix pij,double[][] sol){  final int size=pij.size();  if (size * 3L * dim > 0x7FFF_FFFAL) {    throw new AbortException("Memory exceeds Java array size limit.");  }  double[] meta=new double[size * 3 * dim];  final int dim3=dim * 3;  for (int off=2 * dim; off < meta.length; off+=dim3) {    Arrays.fill(meta,off,off + dim,1.);  }  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Iterative Optimization",iterations,LOG) : null;  Duration timer=LOG.isStatistics() ? LOG.newDuration(this.getClass().getName() + ".runtime.optimization").begin() : null;  for (int i=0; i < iterations; i++) {    computeGradient(pij,sol,meta);    updateSolution(sol,meta,i);    if (i == EARLY_EXAGGERATION_ITERATIONS) {      pij.scale(1. / EARLY_EXAGGERATION);    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  if (timer != null) {    LOG.statistics(timer.end());  }}  }
class C{  public String showDialog(Component comp){  value=null;  setLocationRelativeTo(comp);  setVisible(true);  return value;}  }
class C{  public static Map<String,Object> storeEntitySyncData(DispatchContext dctx,Map<String,Object> context){  Delegator delegator=dctx.getDelegator();  String overrideDelegatorName=(String)context.get("delegatorName");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isNotEmpty(overrideDelegatorName)) {    delegator=DelegatorFactory.getDelegator(overrideDelegatorName);    if (delegator == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotFindDelegator",UtilMisc.toMap("overrideDelegatorName",overrideDelegatorName),locale));    }  }  String entitySyncId=(String)context.get("entitySyncId");  List<GenericValue> valuesToCreate=UtilGenerics.cast(context.get("valuesToCreate"));  List<GenericValue> valuesToStore=UtilGenerics.cast(context.get("valuesToStore"));  List<GenericEntity> keysToRemove=UtilGenerics.cast(context.get("keysToRemove"));  if (Debug.infoOn())   Debug.logInfo("Running storeEntitySyncData (" + entitySyncId + ") - ["+ valuesToCreate.size()+ "] to create; ["+ valuesToStore.size()+ "] to store; ["+ keysToRemove.size()+ "] to remove.",module);  try {    long toCreateInserted=0;    long toCreateUpdated=0;    long toCreateNotUpdated=0;    long toStoreInserted=0;    long toStoreUpdated=0;    long toStoreNotUpdated=0;    long toRemoveDeleted=0;    long toRemoveAlreadyDeleted=0;    for (    GenericValue valueToCreate : valuesToCreate) {      valueToCreate.setIsFromEntitySync(true);      valueToCreate.checkFks(true);      GenericValue existingValue=EntityQuery.use(delegator).from(valueToCreate.getEntityName()).where(valueToCreate.getPrimaryKey()).queryOne();      if (existingValue == null) {        delegator.create(valueToCreate);        toCreateInserted++;      } else {        if (existingValue.get(ModelEntity.STAMP_FIELD) != null && existingValue.getTimestamp(ModelEntity.STAMP_FIELD).after(valueToCreate.getTimestamp(ModelEntity.STAMP_FIELD))) {          toCreateNotUpdated++;        } else {          delegator.store(valueToCreate);          toCreateUpdated++;        }      }    }    for (    GenericValue valueToStore : valuesToStore) {      valueToStore.setIsFromEntitySync(true);      valueToStore.checkFks(true);      GenericValue existingValue=EntityQuery.use(delegator).from(valueToStore.getEntityName()).where(valueToStore.getPrimaryKey()).queryOne();      if (existingValue == null) {        delegator.create(valueToStore);        toStoreInserted++;      } else {        if (existingValue.get(ModelEntity.STAMP_FIELD) != null && existingValue.getTimestamp(ModelEntity.STAMP_FIELD).after(valueToStore.getTimestamp(ModelEntity.STAMP_FIELD))) {          toStoreNotUpdated++;        } else {          delegator.store(valueToStore);          toStoreUpdated++;        }      }    }    for (    GenericEntity pkToRemove : keysToRemove) {      pkToRemove.setIsFromEntitySync(true);      pkToRemove.remove(ModelEntity.STAMP_TX_FIELD);      pkToRemove.remove(ModelEntity.STAMP_FIELD);      pkToRemove.remove(ModelEntity.CREATE_STAMP_TX_FIELD);      pkToRemove.remove(ModelEntity.CREATE_STAMP_FIELD);      int numRemByAnd=delegator.removeByAnd(pkToRemove.getEntityName(),pkToRemove);      if (numRemByAnd == 0) {        toRemoveAlreadyDeleted++;      } else {        toRemoveDeleted++;      }    }    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("toCreateInserted",Long.valueOf(toCreateInserted));    result.put("toCreateUpdated",Long.valueOf(toCreateUpdated));    result.put("toCreateNotUpdated",Long.valueOf(toCreateNotUpdated));    result.put("toStoreInserted",Long.valueOf(toStoreInserted));    result.put("toStoreUpdated",Long.valueOf(toStoreUpdated));    result.put("toStoreNotUpdated",Long.valueOf(toStoreNotUpdated));    result.put("toRemoveDeleted",Long.valueOf(toRemoveDeleted));    result.put("toRemoveAlreadyDeleted",Long.valueOf(toRemoveAlreadyDeleted));    if (Debug.infoOn())     Debug.logInfo("Finisching storeEntitySyncData (" + entitySyncId + ") - ["+ keysToRemove.size()+ "] to remove. Actually removed: "+ toRemoveDeleted+ " already removed: "+ toRemoveAlreadyDeleted,module);    return result;  } catch (  GenericEntityException e) {    Debug.logError(e,"Exception saving Entity Sync Data for entitySyncId [" + entitySyncId + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtExceptionSavingEntitySyncData",UtilMisc.toMap("entitySyncId",entitySyncId,"errorString",e.toString()),locale));  }catch (  Throwable t) {    Debug.logError(t,"Error saving Entity Sync Data for entitySyncId [" + entitySyncId + "]: "+ t.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorSavingEntitySyncData",UtilMisc.toMap("entitySyncId",entitySyncId,"errorString",t.toString()),locale));  }}  }
class C{  public boolean isScalar(){  return length == 1;}  }
class C{  public static void execute(ExecutablePool pool,int id,PdxType type){  AbstractOp op=new AddPDXTypeOpImpl(id,type);  pool.execute(op);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.writeLong(getTimeImpl());}  }
class C{  public static Predicates<String> startsWith(String substring){  return new StartsWith(substring);}  }
class C{  public ADWIN(double delta,int maxHistory){  super();  setDelta(delta);  setMaxHistory(maxHistory);  allStats=new OnLineStatistics();  windows=new LinkedList<OnLineStatistics>();}  }
class C{  public void recordTXOperation(ServerRegionDataAccess region,ServerRegionOperation op,Object key,Object arguments[]){  if (ClientTXStateStub.transactionRecordingEnabled()) {    getRealDeal(null,(LocalRegion)region.getRegion()).recordTXOperation(region,op,key,arguments);  }}  }
class C{  public SemManipulation(SemIm semIm){  if (semIm == null) {    throw new NullPointerException();  }  this.semIm=semIm;  this.manipulated=new boolean[semIm.getVariableNodes().size()];}  }
class C{  @Deprecated public void percentile(String name,String defName){  percentile(name,defName,DataProcessor.DEFAULT_PERCENTILE);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  private void deleteObjectsFromCollection(org.hibernate.Session hibSession,Collection s){  if (s == null || s.size() == 0)   return;  for (Iterator i=s.iterator(); i.hasNext(); ) {    hibSession.delete(i.next());    i.remove();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.345 -0500",hash_original_method="51D2DA544BFD2481CED21FC5653231F0",hash_generated_method="28E52AFBCAA76F5FEED65620D475D8C5") public static boolean isUpperCase(char c){  return isUpperCase((int)c);}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,(Collection<Tuple>)null,tuple);}  }
class C{  @Override public IMqttToken unsubscribe(String[] topic) throws MqttException {  return unsubscribe(topic,null,null);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  canvas.drawText(mText,getPaddingLeft(),getPaddingTop() - mAscent,mTextPaint);}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public static junit.framework.Test suite(){  return new IntrospectorTestCase();}  }
class C{  public ARFFConverter(){  super();}  }
class C{  public void addDataValue(double x){  n++;  double delta=x - mu;  mu+=delta / n;  sum+=(double)(n - 1) / n * delta * delta;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void add(final int operand){  this.value+=operand;}  }
class C{  public ModificationItem(int mod_op,Attribute attr){switch (mod_op) {case DirContext.ADD_ATTRIBUTE:case DirContext.REPLACE_ATTRIBUTE:case DirContext.REMOVE_ATTRIBUTE:    if (attr == null)     throw new IllegalArgumentException("Must specify non-null attribute for modification");  this.mod_op=mod_op;this.attr=attr;break;default :throw new IllegalArgumentException("Invalid modification code " + mod_op);}}  }
class C{  protected void assertBackToState(int stateNum,final String action){  assertTrue(recorder.recorded(EC.TLC_BACK_TO_STATE));  List<Object> loop=recorder.getRecords(EC.TLC_BACK_TO_STATE);  assertTrue(loop.size() > 0);  Object[] object=(Object[])loop.get(0);  assertTrue(object.length > 1);  assertEquals(Integer.toString(stateNum),object[0]);  assertEquals(action,object[1]);}  }
class C{  @Override protected void onStart(){  super.onStart();  mApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();  mApiClient.connect();}  }
class C{  public void testShortcutUsingDefaults2(){  SwtBotProjectCreation.createMavenGwtProjectIsCreated2(bot,PROJECT_NAME,PACKAGE_NAME);  SwtBotProjectDebug.launchGWTDevModeWithJettyThenTerminateIt(bot,PROJECT_NAME);  String persistedArgs=SwtBotProjectDebug.getTheProgramArgsTextBox(bot);  assertTrue(persistedArgs.contains("com.example.project.App"));}  }
class C{  public String convertMemberTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  protected void welcomePlayerAfterQuest(){  if (concreteQuest.shouldWelcomeAfterQuestIsCompleted()) {    concreteQuest.getNPC().add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(concreteQuest.getNPC().getName()),new QuestCompletedCondition(concreteQuest.getSlotName())),ConversationStates.ATTENDING,concreteQuest.welcomeAfterQuestIsCompleted(),null);  }}  }
class C{  public static <D extends Drawable>D mockDrawable(Class<D> drawableClassToMock){  D drawable=mock(drawableClassToMock);  when(drawable.mutate()).thenReturn(drawable);  stubGetAndSetBounds(drawable);  stubGetAndSetCallback(drawable);  stubSetVisibilityCallback(drawable);  stubSetAlpha(drawable);  stubGetPaint(drawable);  stubGetBitmap(drawable);  return drawable;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  int length(){  return sessionId.length;}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(URI.create(url).normalize()),entity),contentType,responseHandler,context);}  }
class C{  private HttpResponse sendRequest(State state,AndroidHttpClient client,HttpGet request) throws StopRequest {  try {    return client.execute(request);  } catch (  IllegalArgumentException ex) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"while trying to execute request: " + ex.toString(),ex);  }catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while trying to execute request: " + ex.toString(),ex);  }}  }
class C{  public boolean isBinaryCategoricalSplitting(){  return binaryCategoricalSplitting;}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.275 -0500",hash_original_method="04D90EEE60FDC73EE04A6B692FFCF48F",hash_generated_method="250E2660CAE3575A411DFE433B4B88BA") protected GenericObject next(ListIterator iterator){  try {    return (GenericObject)iterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  public static boolean execute(final RPObject caster,final RPAction action){  try {    if (caster instanceof Player) {      final Player player=(Player)caster;      Translate.setThreadLanguage(player.getLanguage());      final ActionListener actionListener=getAction(action);      final String type=action.get(Actions.TYPE);      if (!AdministrationAction.isPlayerAllowedToExecuteAdminCommand(player,type,true)) {        return false;      }      actionListener.onAction(player,action);      Translate.setThreadLanguage(null);      return true;    } else {      logger.error("caster is no Player; cannot execute action " + action + " send by "+ caster,new Throwable());      return false;    }  } catch (  final Exception e) {    logger.error("Cannot execute action " + action + " send by "+ caster,e);    return false;  }}  }
class C{  private static DecimalFormat createFormatter(PrecisionModel precisionModel){  int decimalPlaces=precisionModel.getMaximumSignificantDigits();  DecimalFormatSymbols symbols=new DecimalFormatSymbols();  symbols.setDecimalSeparator('.');  String fmtString="0" + (decimalPlaces > 0 ? "." : "") + stringOfChar('#',decimalPlaces);  return new DecimalFormat(fmtString,symbols);}  }
class C{  public void testMultivariateMIVariousNumThreads() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={3,4};  double[] expectedFromMILCA_2={0.00186857,-0.00377259};  System.out.println("Kraskov comparison 3a - single threaded");  NUM_THREADS_TO_USE="1";  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),MatrixUtils.selectColumns(data,new int[]{2,3}),kNNs,expectedFromMILCA_2);  System.out.println("Kraskov comparison 3b - dual threaded");  NUM_THREADS_TO_USE="2";  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),MatrixUtils.selectColumns(data,new int[]{2,3}),kNNs,expectedFromMILCA_2);  NUM_THREADS_TO_USE=NUM_THREADS_TO_USE_DEFAULT;}  }
class C{  public final boolean needsRecovery(){  return this.needsRecovery;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private static Element createBindNode(Element modelElement,Element node,Map<String,Element> bindings,Map<String,String> problemList,Map<String,String> problemListItems){  Element bindNode=modelElement.createElement(NAMESPACE_XFORMS,null);  bindNode.setName(NODE_BIND);  String parentName=((Element)node.getParent()).getName();  String binding=node.getName();  if (bindings.containsKey(binding)) {    binding=parentName + "_" + binding;    problemListItems.put(binding,parentName);  } else {    if (!(parentName.equalsIgnoreCase("obs") || parentName.equalsIgnoreCase("patient") || parentName.equalsIgnoreCase("encounter")|| parentName.equalsIgnoreCase("problem_list")|| parentName.equalsIgnoreCase("orders"))) {    }  }  bindNode.setAttribute(null,ATTRIBUTE_ID,binding);  String name=node.getName();  String nodeset=getNodesetAttValue(node);  if (parentName.equalsIgnoreCase(NODE_PROBLEM_LIST)) {    problemList.put(name,name);    nodeset=getNodePath(node);  }  if (problemList.containsKey(parentName)) {    if (problemListItems.containsValue(name)) {      throw new IllegalStateException("Original code would use repeatSharedKids here, despite it being null");    }    problemListItems.put(name,parentName);  }  bindNode.setAttribute(null,ATTRIBUTE_NODESET,nodeset);  if (!((Element)((Element)node.getParent()).getParent()).getName().equals(NODE_PROBLEM_LIST)) {    modelElement.addChild(Element.ELEMENT,bindNode);  }  bindings.put(binding,bindNode);  return bindNode;}  }
class C{  public char next(){  return reorderedACI.next();}  }
class C{  public Future<ReplDBMSHeader> watchForExtractedSequenceNumber(long seqno) throws InterruptedException {  return stages.getFirst().watchForProcessedSequenceNumber(seqno,false);}  }
class C{  public View2D(final IDatabase database,final IViewContainer container,final ZyGraph graph,final IPluginInterface pluginInterface){  Preconditions.checkNotNull(container,"Error: container argument can not be null");  Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  Preconditions.checkNotNull(pluginInterface,"Error: pluginInterface argument can not be null");  if (!container.isLoaded()) {    throw new IllegalStateException("View container is not loaded");  }  m_database=database;  m_container=container;  m_graph=graph;  m_view=findView(database,graph.getRawView(),pluginInterface.getDatabaseManager().getDatabases());  m_apiContainer=findContainer(database,container,pluginInterface.getDatabaseManager().getDatabases());  Preconditions.checkNotNull(m_apiContainer,"Error: Can not determine view container");  m_pluginInterface=pluginInterface;  for (  final ViewNode node : m_view.getGraph().getNodes()) {    m_nodeMap.put(node.getNative(),node);  }  m_graph.addListener(m_listener);}  }
class C{  public boolean connect(final String address){  if (mBtAdapter == null || address == null) {    return false;  }  final BluetoothDevice device=mBtAdapter.getRemoteDevice(address);  int connectionState=mBluetoothManager.getConnectionState(device,BluetoothProfile.GATT);  if (connectionState == BluetoothProfile.STATE_DISCONNECTED) {    if (device == null) {      return false;    }    mBluetoothGatt=device.connectGatt(this,false,mGattCallbacks);    mBluetoothDeviceAddress=address;  } else {    return false;  }  return true;}  }
class C{  public void keepAlive() throws IOException {  if (currentTimeMillis - lastTxMillis > heartbeatMillis)   sendHeartbeat();  if (testRequestTxMillis == 0) {    if (currentTimeMillis - lastRxMillis > testRequestMillis) {      sendTestRequest(currentTimestamp);      testRequestTxMillis=currentTimeMillis;    }  } else {    if (currentTimeMillis - testRequestTxMillis > testRequestMillis) {      statusListener.heartbeatTimeout(this);      testRequestTxMillis=0;    }  }}  }
class C{  private static boolean equal(Object o1,Object o2){  return ((o1 == null || o2 == null) ? (o1 == o2) : o1.equals(o2));}  }
class C{  public _BuildAgentUpdate(final _BuildAgentUpdate_Flag[] flags){  super(flags);}  }
class C{  public static void main(final String[] args){  final String propertiesFile="quads.properties";  try {    final SampleCode sampleCode=new SampleCode();    log.info("Reading properties from file: " + propertiesFile);    final Properties properties=sampleCode.loadProperties(propertiesFile);    if (properties.getProperty(com.bigdata.journal.Options.FILE) == null) {      final File journal=File.createTempFile("bigdata",".jnl");      log.info(journal.getAbsolutePath());      properties.setProperty(BigdataSail.Options.FILE,journal.getAbsolutePath());    }    if (properties.getProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE) == null) {      properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"60000");    }    final BigdataSail sail=new BigdataSail(properties);    final Repository repo=new BigdataSailRepository(sail);    try {      repo.initialize();      final URI MIKE=new URIImpl("http://www.bigdata.com/rdf#Mike");      sampleCode.loadSomeData(repo);      System.out.println("Loaded sample data.");      sampleCode.readSomeData(repo,MIKE);      sampleCode.executeSelectQuery(repo,"select ?p ?o where { <" + MIKE.toString() + "> ?p ?o . }",QueryLanguage.SPARQL);      System.out.println("Did SELECT query.");      sampleCode.executeConstructQuery(repo,"construct { <" + MIKE.toString() + "> ?p ?o . } where { <"+ MIKE.toString()+ "> ?p ?o . }",QueryLanguage.SPARQL);      System.out.println("Did CONSTRUCT query.");      if (sampleCode.executeFreeTextQuery(repo)) {        System.out.println("Did free text query.");      }      if (sampleCode.executeProvenanceQuery(repo)) {        System.out.println("Did provenance query.");      }      sampleCode.executeHistoricalQuery(repo);      System.out.println("Did historical query.");      System.out.println("done.");    }  finally {      repo.shutDown();    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static void main(String[] args){  Raycast simulation=new Raycast();  simulation.run();}  }
class C{  public GridLeanSet(int size){  super(new GridLeanMap<E,Object>(size));}  }
class C{  protected void textAreaContent(AttributeSet attr) throws BadLocationException, IOException {  Document doc=(Document)attr.getAttribute(StyleConstants.ModelAttribute);  if (doc != null && doc.getLength() > 0) {    if (segment == null) {      segment=new Segment();    }    doc.getText(0,doc.getLength(),segment);    if (segment.count > 0) {      inTextArea=true;      incrIndent();      indentSmart();      setCanWrapLines(true);      replaceEntities=true;      write(segment.array,segment.offset,segment.count);      replaceEntities=false;      setCanWrapLines(false);      writeLineSeparator();      inTextArea=false;      decrIndent();    }  }}  }
class C{  public String toString(){  if (head == null) {    return "List[0]";  }  return "List[" + size + "]: "+ head.value.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  static void checkArguments(final AbstractSQLProvider provider,final ITreeNode<CTag> tag,final TagType type){  checkArguments(provider,tag);  Preconditions.checkNotNull(type,"IE00554: Type argument can not be null");  Preconditions.checkArgument(tag.getObject().getType() == type,"IE00555: Type of the node is different from the type of the given node");}  }
class C{  @RpcMethod public void deleteVm(String vmId,List<String> diskIdsToDetach,AsyncMethodCallback<Host.AsyncClient.delete_vm_call> handler) throws RpcException {  ensureClient();  DeleteVmRequest deleteVmRequest=new DeleteVmRequest(vmId);  deleteVmRequest.setDisk_ids(diskIdsToDetach);  clientProxy.setTimeout(DELETE_VM_TIMEOUT_MS);  logger.info("delete_vm {}, target {}, request {}",vmId,getHostIp(),deleteVmRequest);  try {    clientProxy.delete_vm(deleteVmRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public void addAll(List<SoundCloudTrack> tracks){  for (  SoundCloudTrack track : tracks) {    add(mSoundCloudPlaylist.getTracks().size(),track);  }}  }
class C{  public void testComputeLocationWhenDeployableTypeMismatchWithProjectType() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("war");  this.mockLog.expects(once()).method("warn").with(eq("The defined deployable has the same groupId and artifactId as your project's " + "main artifact but the type is different. You've defined a [war] type " + "whereas the project's packaging is [something]. This is possibly an error "+ "and as a consequence the plugin will try to find this deployable in the "+ "project's dependencies."));  try {    deployableElement.computeLocation(createDefaultProject("something",new HashSet<Artifact>()));    fail("An exception should have been raised");  } catch (  MojoExecutionException expected) {    assertEquals("Artifact [projectGroupId:projectArtifactId:war] is not a dependency of " + "the project.",expected.getMessage());  }}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public boolean isPi(){  return pi != null;}  }
class C{  private Class<?> type(final Method method){  final Class<?> type=method.getReturnType();  if (Modifier.isAbstract(type.getModifiers())) {    throw new IllegalStateException("Cannot create instances of an abstract class");  }  if (!ServiceCoded.class.isAssignableFrom(type) || !(Exception.class.isAssignableFrom(type) || ServiceError.class.isAssignableFrom(type))) {    throw new IllegalStateException("Return type must be of type ServiceCoded and may also be an Exception");  }  return type;}  }
class C{  public String selectHeaderContentType(String[] contentTypes){  if (contentTypes.length == 0)   return "application/json";  if (StringUtil.containsIgnoreCase(contentTypes,"application/json"))   return "application/json";  return contentTypes[0];}  }
class C{  public ZoomEvent(boolean in,float rate){  mZoomIn=in;  mZoomRate=rate;}  }
class C{  private Property parseProperty(TypeMirror variable,TypeMirror dataClass,boolean isNullable,String name,@Nullable String accessorMethodName,Map<TypeName,Adapter> typeAdapterMap) throws UnknownPropertyTypeException {  variable=getActualTypeParameter(variable,dataClass);  TypeMirror erasedType=typeUtil.erasure(variable);  TypeName parcelableTypeName=getParcelableType(typeUtil,erasedType);  boolean isInterface=TypeUtils.isInterface(typeUtil,erasedType);  TypeMirror type=variable;  if (type instanceof WildcardType) {    type=((WildcardType)variable).getExtendsBound();  }  TypeName erasedTypeName=TypeName.get(erasedType);  Adapter typeAdapter=typeAdapterMap.get(erasedTypeName);  if (typeAdapter == null) {    typeAdapter=defaultAdapterMap.get(erasedTypeName);  }  if (typeAdapter != null) {    parcelableTypeName=TYPE_ADAPTER;  }  TypeName typeName=TypeName.get(variable);  if (STRING.equals(parcelableTypeName)) {    return new StringProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (INT.equals(parcelableTypeName)) {    return new IntProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_INT.equals(parcelableTypeName)) {    return new IntProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (LONG.equals(parcelableTypeName)) {    return new LongProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_LONG.box().equals(parcelableTypeName)) {    return new LongProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (BYTE.equals(parcelableTypeName)) {    return new ByteProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_BYTE.equals(parcelableTypeName)) {    return new ByteProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (BOOLEAN.equals(parcelableTypeName)) {    return new BooleanProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_BOOLEAN.equals(parcelableTypeName)) {    return new BooleanProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (FLOAT.equals(parcelableTypeName)) {    return new FloatProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_FLOAT.equals(parcelableTypeName)) {    return new FloatProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (CHAR.equals(parcelableTypeName)) {    return new CharProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_CHAR.equals(parcelableTypeName)) {    return new CharProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (DOUBLE.equals(parcelableTypeName)) {    return new DoubleProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_DOUBLE.equals(parcelableTypeName)) {    return new DoubleProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SHORT.equals(parcelableTypeName)) {    return new ShortProperty(false,typeName,isInterface,name,accessorMethodName);  } else   if (BOXED_SHORT.equals(parcelableTypeName)) {    return new ShortProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (MAP.equals(parcelableTypeName)) {    List<? extends TypeMirror> typeArguments=((DeclaredType)type).getTypeArguments();    Property keyProperty=parseProperty(typeArguments.get(0),dataClass,true,name + "Key",null,typeAdapterMap);    Property valueProperty=parseProperty(typeArguments.get(1),dataClass,true,name + "Value",null,typeAdapterMap);    return new MapProperty(keyProperty,valueProperty,isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (LIST.equals(parcelableTypeName)) {    List<? extends TypeMirror> typeArguments=((DeclaredType)type).getTypeArguments();    Property typeArgument=parseProperty(typeArguments.get(0),dataClass,true,name + "Item",null,typeAdapterMap);    return new ListProperty(typeArgument,isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SET.equals(parcelableTypeName)) {    List<? extends TypeMirror> typeArguments=((DeclaredType)type).getTypeArguments();    Property typeArgument=parseProperty(typeArguments.get(0),dataClass,true,name + "Item",null,typeAdapterMap);    return new SetProperty(typeArgument,isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (BOOLEAN_ARRAY.equals(parcelableTypeName)) {    return new BooleanArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (BYTE_ARRAY.equals(parcelableTypeName)) {    return new ByteArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (INT_ARRAY.equals(parcelableTypeName)) {    return new IntArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (LONG_ARRAY.equals(parcelableTypeName)) {    return new LongArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (STRING_ARRAY.equals(parcelableTypeName)) {    return new StringArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SPARSE_ARRAY.equals(parcelableTypeName)) {    List<? extends TypeMirror> typeArguments=((DeclaredType)type).getTypeArguments();    Property typeArgument=parseProperty(typeArguments.get(0),dataClass,true,name + "Value",null,typeAdapterMap);    return new SparseArrayProperty(typeArgument,isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SPARSE_BOOLEAN_ARRAY.equals(parcelableTypeName)) {    return new SparseBooleanArrayProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (BUNDLE.equals(parcelableTypeName)) {    return new BundleProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (PARCELABLE.equals(parcelableTypeName)) {    return new ParcelableProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (OBJECT_ARRAY.equals(parcelableTypeName)) {    TypeMirror componentType=((ArrayType)type).getComponentType();    Property componentProperty=parseProperty(componentType,dataClass,true,name + "Component",null,typeAdapterMap);    return new ArrayProperty(componentProperty,typeName,isInterface,isNullable,name,accessorMethodName);  } else   if (CHAR_SEQUENCE.equals(parcelableTypeName)) {    return new CharSequenceProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (IBINDER.equals(parcelableTypeName)) {    return new IBinderProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (ENUM.equals(parcelableTypeName)) {    return new EnumProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SERIALIZABLE.equals(parcelableTypeName)) {    return new SerializableProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (PERSISTABLE_BUNDLE.equals(parcelableTypeName)) {    return new PersistableBundleProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SIZE.equals(parcelableTypeName)) {    return new SizeProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (SIZEF.equals(parcelableTypeName)) {    return new SizeFProperty(isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (TYPE_ADAPTER.equals(parcelableTypeName)) {    return new TypeAdapterProperty(typeAdapter,isNullable,typeName,isInterface,name,accessorMethodName);  } else   if (typeName instanceof ClassName && wrapperMap.containsKey(typeName)) {    return new WrapperProperty(wrapperMap.get(typeName),isNullable,typeName,isInterface,name,accessorMethodName);  } else {    throw new UnknownPropertyTypeException("PaperParcel does not support type: " + typeName);  }}  }
class C{  protected Window(final String fxml,final String includeLocation,final boolean minimizeOnClose,final double initialWidth,final double initialHeight,final Modality modality){  if (fxml == null || includeLocation == null) {    throw new NullPointerException("A Window needs both an FXML and a location to include its containted components from.");  }  this.initialHeight=initialHeight;  this.initialWidth=initialWidth;  FXML=getClass().getResource(Constants.FXML_LOCATION + fxml);  LOCATION=getClass().getResource(Constants.FXML_LOCATION + includeLocation);  this.minimizeOnClose=minimizeOnClose;  hasQuit=false;  this.modality=modality;}  }
class C{  public String prefix(){  return prefix;}  }
class C{  @Override public boolean futureStepsAvailable(){  Query query=entityManager.createQuery("select count(i) " + "from StepInstance i " + "where i not in ("+ "select j "+ "from StepInstance j "+ "inner join j.executions e "+ "where e.state = :successful)");  query.setParameter("successful",StepExecutionState.STEP_EXECUTION_SUCCESSFUL);  return ((Long)query.getSingleResult()) > 0L;}  }
class C{  public static int[] toPrimitive(Integer a[]){  int b[]=new int[a.length];  for (int i=0; i < a.length; i++) {    b[i]=a[i];  }  return b;}  }
class C{  public void logout(){  throw new RuntimeException("Native facebook unsupported, if you are running on the Simulator use doLogout");}  }
class C{  final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final AbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child,-1);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  @Deprecated public TestConfiguration(String testScript,String[] outputFiles){  this.testScript=testScript;  this.outputFiles=outputFiles;}  }
class C{  private void writeLibrary(LocalContainer container,File configOverrides) throws IOException {  String[] cp=((InstalledLocalContainer)container).getExtraClasspath();  if (cp != null) {    File libraryXML=new File(configOverrides,"cargo-library.xml");    PrintStream out=ServerConfigUtils.open(libraryXML);    ServerConfigUtils.writeLibrary(out,"cargoLib",cp);    ServerConfigUtils.close(out);  }}  }
class C{  private void process(Field field,Class type,Annotation[] list) throws Exception {  Class[] dependents=Reflector.getDependents(field);  Annotation label=factory.getInstance(type,dependents);  if (label != null) {    process(field,label,list);  }}  }
class C{  public static void fail(final String message){  getAffirmation().fail(message);}  }
class C{  public void onSurfaceChanged(GL10 glUnused,int width,int height){  Log.d(TAG,"Surface size: " + width + "x"+ height);  int video_width=mMediaPlayer.getVideoWidth();  int video_height=mMediaPlayer.getVideoHeight();  Log.d(TAG,"Video size: " + video_width + "x"+ video_height);  GLES20.glViewport(0,0,video_width,video_height);  mWidth=Math.min(VideoDumpConfig.MAX_DUMP_WIDTH,video_width);  mHeight=Math.min(VideoDumpConfig.MAX_DUMP_HEIGHT,video_height);  mStartX=video_width / mWidth / 2 * mWidth;  mStartY=video_height / mHeight / 2 * mHeight;  Log.d(TAG,"dumping block start at (" + mStartX + ","+ mStartY+ ") "+ "size "+ mWidth+ "x"+ mHeight);  int image_size=mWidth * mHeight * VideoDumpConfig.BYTES_PER_PIXEL;  mBuffer=ByteBuffer.allocate(image_size);  int bpp[]=new int[3];  GLES20.glGetIntegerv(GLES20.GL_RED_BITS,bpp,0);  GLES20.glGetIntegerv(GLES20.GL_GREEN_BITS,bpp,1);  GLES20.glGetIntegerv(GLES20.GL_BLUE_BITS,bpp,2);  Log.d(TAG,"rgb bits: " + bpp[0] + "-"+ bpp[1]+ "-"+ bpp[2]);  Properties prop=new Properties();  prop.setProperty("width",Integer.toString(mWidth));  prop.setProperty("height",Integer.toString(mHeight));  prop.setProperty("startX",Integer.toString(mStartX));  prop.setProperty("startY",Integer.toString(mStartY));  prop.setProperty("bytesPerPixel",Integer.toString(VideoDumpConfig.BYTES_PER_PIXEL));  prop.setProperty("frameRate",Integer.toString(VideoDumpConfig.FRAME_RATE));  try {    prop.storeToXML(new FileOutputStream(VideoDumpConfig.ROOT_DIR + VideoDumpConfig.PROPERTY_FILE),"");  } catch (  java.io.IOException e) {    Log.e(TAG,e.getMessage(),e);  }}  }
class C{  public PKCS10Attributes(PKCS10Attribute[] attrs){  for (int i=0; i < attrs.length; i++) {    map.put(attrs[i].getAttributeId().toString(),attrs[i]);  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("glassfish2x",ContainerType.INSTALLED,GlassFish2xInstalledLocalContainer.class);  containerFactory.registerContainer("glassfish3x",ContainerType.INSTALLED,GlassFish3xInstalledLocalContainer.class);  containerFactory.registerContainer("glassfish3x",ContainerType.REMOTE,GlassFish3xRemoteContainer.class);  containerFactory.registerContainer("glassfish4x",ContainerType.INSTALLED,GlassFish4xInstalledLocalContainer.class);  containerFactory.registerContainer("glassfish4x",ContainerType.REMOTE,GlassFish4xRemoteContainer.class);}  }
class C{  public synchronized void remove(int index){  super.remove(index);  mMaxValues.remove(index);}  }
class C{  long parseLong(String string) throws NumberFormatException {  char c;  if (string != null && string.length() > 0 && ((string.charAt(0) == (c='x')) || c == 'X')) {    return Long.parseLong(string.substring(1),16);  } else {    try {      return Long.parseLong(string);    } catch (    NumberFormatException e) {      try {        double d=Double.parseDouble(string);        if (d == (long)d)         return (long)d; else         throw e;      } catch (      NumberFormatException e2) {        throw e;      }    }  }}  }
class C{  public void processPackets(Player player,List<DataPacket> packets){  if (packets.isEmpty())   return;  List<Byte> filter=new ArrayList<>();  for (  DataPacket packet : packets) {switch (packet.pid()) {case ProtocolInfo.USE_ITEM_PACKET:      if (!filter.contains(ProtocolInfo.USE_ITEM_PACKET)) {        player.handleDataPacket(packet);        filter.add(ProtocolInfo.USE_ITEM_PACKET);      }    break;default :  player.handleDataPacket(packet);}}}  }
class C{  public boolean isOnTuesday(){  Object oo=get_Value(COLUMNNAME_OnTuesday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static UniformPair<String> convert(RecognitionException e,String expression,boolean addPleaseCheck,EsperEPL2GrammarParser parser){  if (expression.trim().length() == 0) {    String message="Unexpected " + END_OF_INPUT_TEXT;    return new UniformPair<String>(message,expression);  }  Token t;  Token tBeforeBefore=null;  Token tBefore=null;  Token tAfter=null;  int tIndex=e.getOffendingToken() != null ? e.getOffendingToken().getTokenIndex() : Integer.MAX_VALUE;  if (tIndex < parser.getTokenStream().size()) {    t=parser.getTokenStream().get(tIndex);    if ((tIndex + 1) < parser.getTokenStream().size()) {      tAfter=parser.getTokenStream().get(tIndex + 1);    }    if (tIndex - 1 >= 0) {      tBefore=parser.getTokenStream().get(tIndex - 1);    }    if (tIndex - 2 >= 0) {      tBeforeBefore=parser.getTokenStream().get(tIndex - 2);    }  } else {    if (parser.getTokenStream().size() >= 1) {      tBeforeBefore=parser.getTokenStream().get(parser.getTokenStream().size() - 1);    }    if (parser.getTokenStream().size() >= 2) {      tBefore=parser.getTokenStream().get(parser.getTokenStream().size() - 2);    }    t=parser.getTokenStream().get(parser.getTokenStream().size() - 1);  }  Token tEnd=null;  if (parser.getTokenStream().size() > 0) {    tEnd=parser.getTokenStream().get(parser.getTokenStream().size() - 1);  }  String positionInfo=getPositionInfo(t);  String token=t.getType() == EsperEPL2GrammarParser.EOF ? "end-of-input" : "'" + t.getText() + "'";  Stack stack=parser.getParaphrases();  String check="";  boolean isSelect=stack.size() == 1 && stack.get(0).equals("select clause");  if ((stack.size() > 0) && addPleaseCheck) {    String delimiter="";    StringBuilder checkList=new StringBuilder();    checkList.append(", please check the ");    while (stack.size() != 0) {      checkList.append(delimiter);      checkList.append(stack.pop());      delimiter=" within the ";    }    check=checkList.toString();  }  Set<String> keywords=parser.getKeywords();  boolean reservedKeyword=false;  if (keywords.contains(token.toLowerCase())) {    token+=" (a reserved keyword)";    reservedKeyword=true;  } else   if (tAfter != null && keywords.contains("'" + tAfter.getText().toLowerCase() + "'")) {    token+=" ('" + tAfter.getText() + "' is a reserved keyword)";    reservedKeyword=true;  } else {    if ((tBefore != null) && (tAfter != null) && (keywords.contains("'" + tBefore.getText().toLowerCase() + "'"))&& (keywords.contains("'" + tAfter.getText().toLowerCase() + "'"))) {      token+=" ('" + tBefore.getText() + "' and '"+ tAfter.getText()+ "' are a reserved keyword)";      reservedKeyword=true;    } else     if ((tBefore != null) && (keywords.contains("'" + tBefore.getText().toLowerCase() + "'"))) {      token+=" ('" + tBefore.getText() + "' is a reserved keyword)";      reservedKeyword=true;    } else     if (tEnd != null && keywords.contains("'" + tEnd.getText().toLowerCase() + "'")) {      token+=" ('" + tEnd.getText() + "' is a reserved keyword)";      reservedKeyword=true;    }  }  if (isSelect && !reservedKeyword) {    check+=getSelectClauseAsText(tBeforeBefore,t);  }  String message="Incorrect syntax near " + token + positionInfo+ check;  if (e instanceof NoViableAltException || e instanceof LexerNoViableAltException || checkForInputMismatchWithNoExpected(e)) {    Token nvaeToken=e.getOffendingToken();    int nvaeTokenType=nvaeToken != null ? nvaeToken.getType() : EsperEPL2GrammarLexer.EOF;    if (nvaeTokenType == EsperEPL2GrammarLexer.EOF) {      if (token.equals(END_OF_INPUT_TEXT)) {        message="Unexpected " + END_OF_INPUT_TEXT + positionInfo+ check;      } else {        if (ParseHelper.hasControlCharacters(expression)) {          message="Unrecognized control characters found in text" + positionInfo;        } else {          message="Unexpected " + END_OF_INPUT_TEXT + " near "+ token+ positionInfo+ check;        }      }    } else {      if (parser.getParserTokenParaphrases().get(nvaeTokenType) != null) {        message="Incorrect syntax near " + token + positionInfo+ check;      } else {        int currentIndex=tIndex + 1;        while ((currentIndex > 0) && (currentIndex < parser.getTokenStream().size() - 1) && (currentIndex < tIndex + 3)) {          Token next=parser.getTokenStream().get(currentIndex);          currentIndex++;          String quotedToken="'" + next.getText() + "'";          if (parser.getKeywords().contains(quotedToken)) {            check+=" near reserved keyword '" + next.getText() + "'";            break;          }        }        message="Incorrect syntax near " + token + positionInfo+ check;      }    }  } else   if (e instanceof InputMismatchException) {    InputMismatchException mismatched=(InputMismatchException)e;    String expected;    if (mismatched.getExpectedTokens().size() > 1) {      StringWriter writer=new StringWriter();      writer.append("any of the following tokens {");      String delimiter="";      for (int i=0; i < mismatched.getExpectedTokens().size(); i++) {        writer.append(delimiter);        if (i > 5) {          writer.append("...");          writer.append(Integer.toString(mismatched.getExpectedTokens().size() - 5));          writer.append(" more");          break;        }        delimiter=", ";        writer.append(getTokenText(parser,mismatched.getExpectedTokens().get(i)));      }      writer.append("}");      expected=writer.toString();    } else {      expected=getTokenText(parser,mismatched.getExpectedTokens().get(0));    }    int offendingTokenType=mismatched.getOffendingToken().getType();    String unexpected=getTokenText(parser,offendingTokenType);    String expecting=" expecting " + expected.trim() + " but found "+ unexpected.trim();    message="Incorrect syntax near " + token + expecting+ positionInfo+ check;  }  return new UniformPair<String>(message,expression);}  }
class C{  @Override public boolean process(ContentEvent event){  InstanceContentEvent inEvent=(InstanceContentEvent)event;  Instance instance=inEvent.getInstance();  if (inEvent.getInstanceIndex() < 0) {    ResultContentEvent outContentEvent=new ResultContentEvent(-1,instance,0,new double[0],inEvent.isLastEvent());    outContentEvent.setClassifierIndex(this.modelId);    outContentEvent.setEvaluationIndex(inEvent.getEvaluationIndex());    outputStream.put(outContentEvent);    return false;  }  if (inEvent.isTesting()) {    double[] dist=model.getVotesForInstance(instance);    ResultContentEvent outContentEvent=new ResultContentEvent(inEvent.getInstanceIndex(),instance,inEvent.getClassId(),dist,inEvent.isLastEvent());    outContentEvent.setClassifierIndex(this.modelId);    outContentEvent.setEvaluationIndex(inEvent.getEvaluationIndex());    logger.trace(inEvent.getInstanceIndex() + " {} {}",modelId,dist);    outputStream.put(outContentEvent);  }  if (inEvent.isTraining()) {    updateStats(inEvent);  }  return false;}  }
class C{  private String generateUniqueFutureId(){  return String.valueOf(mIdCounter.getAndIncrement());}  }
class C{  public String createPrefixDeclarations(Model model){  return createPrefixDeclarations(model,true);}  }
class C{  public IndonesianStemFilterFactory(Map<String,String> args){  super(args);  stemDerivational=getBoolean(args,"stemDerivational",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void recompute(){  value=sigmoid(getSum());}  }
class C{  public void checkJvmMemPoolPeakReset(Long x) throws SnmpStatusException {}  }
class C{  @Override public void stateChanged(ChangeEvent e){  m_Changed=true;  createTitle();  notifyListener();}  }
class C{  @Override public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanAttributeInfo(this));}  }
class C{  public List<String> combinations(String text){  List<String> possibilities=new ArrayList<>();  if (text != null && !text.isEmpty()) {    List<StringBuilder> temp=new ArrayList<>();    char[] chars=text.toCharArray();    List<char[]> lowerUpperCaseArray=buildUpperLowerCaseTemplateList(chars);    setTheFirstCharRepeatnessInList(temp,lowerUpperCaseArray);    for (    char[] cc : lowerUpperCaseArray) {      int iterNumber=temp.size();      for (int i=0; i < iterNumber; i++) {        if (cc.length == 1) {          temp.get(i).append(cc[0]);        } else         if (cc.length == 2) {          char theFirst=cc[0];          char theSecond=cc[1];          StringBuilder current=temp.get(i * 2);          StringBuilder newDuplicated=new StringBuilder(current);          current.append(theFirst);          newDuplicated.append(theSecond);          temp.add(i * 2,newDuplicated);        }      }    }    possibilities=convertTo(temp);    temp=null;    lowerUpperCaseArray=null;  }  return possibilities;}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  protected void rotate(Graphics2D g){  Double angle=renderRotationAngle;  if (angle != null) {    int rotOffsetX=point1.x + (point2.x - point1.x) / 2;    int rotOffsetY=point1.y + (point2.y - point1.y) / 2;    g.rotate(angle,rotOffsetX,rotOffsetY);  }}  }
class C{  private void createAjacencyLists(List<Edge> edges,int numberOfVertices){  for (  Edge edge : edges) {    addEdge(edge.u,edge.v);  }}  }
class C{  public void scrollMapTo(Point location){  scrollMapTo(location.x,location.y);}  }
class C{  private void processAnsiCommand_l(){  if (getAnsiParameter(0) == 4) {  }}  }
class C{  public boolean isReadWrite(){  return m_rw;}  }
class C{  @Override public void characters(char[] ch,int start,int length){  if (this.currentText != null) {    this.currentText.append(String.copyValueOf(ch,start,length));  }}  }
class C{  public Zipper<A> backwards(int steps) throws NoSuchElementException {  return toPosition(position - steps);}  }
class C{  public PSPProcessingException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (ClassifierPerformanceEvaluator)");  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public TriggerInListCondition(final String... trigger){  this(Arrays.asList(trigger));}  }
class C{  public static Insets of(Rect r){  return (r == null) ? NONE : of(r.left,r.top,r.right,r.bottom);}  }
class C{  public synchronized Enumeration elements(){  return getEnumeration(VALUES);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public void abort(){  try {    endTransaction(false);  } catch (  HGTransactionException ex) {    throw new HGException(ex);  }}  }
class C{  Map<String,Set<CallLocationModel>> computeFilteredTaintSourcesMap(Set<CallLocationModel> sources){  if (!sources.isEmpty()) {    if (fFilteredTaintSourcesMap != null && !fFilteredTaintSourcesMap.isEmpty()) {      Map<String,Set<CallLocationModel>> result=new TreeMap<String,Set<CallLocationModel>>();      for (      Entry<String,Set<CallLocationModel>> entry : fFilteredTaintSourcesMap.entrySet()) {        Set<CallLocationModel> filteredSources=new TreeSet<CallLocationModel>();        for (        CallLocationModel source : entry.getValue()) {          if (sources.contains(source)) {            filteredSources.add(source);          }        }        if (!filteredSources.isEmpty()) {          String taintKind=entry.getKey();          result.put(taintKind,filteredSources);        }      }      return result;    }  }  return Collections.EMPTY_MAP;}  }
class C{  public void testCacheGetFailsSyncNotify() throws Exception {  GridRestCommandHandler hnd=new TestableCacheCommandHandler(grid().context(),"getAsync");  GridRestCacheRequest req=new GridRestCacheRequest();  req.command(GridRestCommand.CACHE_GET);  req.key("k1");  try {    hnd.handleAsync(req).get();    fail("Expected exception not thrown.");  } catch (  IgniteCheckedException e) {    info("Got expected exception: " + e);  }}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  protected void changeParentId(int newParentId){  m_parentId=newParentId;}  }
class C{  public boolean isShowCustomTextGrid(){  return mShowCustomTextGrid;}  }
class C{  public boolean isZoomButtonsVisible(){  return mZoomButtonsVisible;}  }
class C{  @Deprecated public static Offset calculateElementOffset(Element childElement,Element ancestorElement,boolean includeScroll){  Offset offset=new Offset();  Element element=childElement;  for (; element.getOffsetParent() != null && element != ancestorElement; element=element.getOffsetParent()) {    offset.top+=element.getOffsetTop();    offset.left+=element.getOffsetLeft();    if (!includeScroll) {      offset.top-=element.getOffsetParent().getScrollTop();      offset.left-=element.getOffsetParent().getScrollLeft();    }  }  return offset;}  }
class C{  UpdateRecord(String provider,LocationRequest request,Receiver receiver){  mProvider=provider;  mRequest=request;  mReceiver=receiver;  ArrayList<UpdateRecord> records=mRecordsByProvider.get(provider);  if (records == null) {    records=new ArrayList<UpdateRecord>();    mRecordsByProvider.put(provider,records);  }  if (!records.contains(this)) {    records.add(this);  }}  }
class C{  public void createUnderlying(){  if (mapOptions == null) {    mapOptions=MapPane.getDefaultMapOptions();  }  if (Platform.isFxApplicationThread()) {    for (    Route r : routes) {      if (r.origin == null || r.origin.getMarker() == null) {        continue;      }      r.origin.getMarker().createUnderlying();      r.destination.getMarker().createUnderlying();      for (      Waypoint wp : r.observableDelegate) {        wp.getMarker().createUnderlying();      }      for (      Polyline line : r.lines) {        line.createUnderlying();      }    }  }}  }
class C{  public void cleanup() throws SyncException {  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    store.cleanupTask();  }}  }
class C{  public void deleteCartOfUser(User user){  List<ProductCart> carts=getCartsOfUser(user);  if (carts != null) {    for (    ProductCart cart : carts)     delete(cart);  }}  }
class C{  protected V buildValue(final IScope scope,final Object object){  if (object instanceof GamaPair) {    if (!type.getContentType().isTranslatableInto(Types.PAIR)) {      return (V)object;    }  }  return (V)type.getContentType().cast(scope,object,null,false);}  }
class C{  public final AGeneralOperationAccessor initialDGetPath(String initialDGetPath){  this.initialDGetPath=initialDGetPath;  return this;}  }
class C{  public TerminalSeqSetf(ITerminalSeq... sequences){  super();  for (  ITerminalSeq seq : sequences) {    this.set.add(seq.seal());  }  this.maxLength=super.getMaxLength();  this.hashCode=calcHashCode();}  }
class C{  public short readShort() throws EOFException, FormatException {  return MoreMath.BuildShort(readBytes(2,false),MSBFirst);}  }
class C{  private void processStaticImport(DetailAST aAST){  final FullIdent name=FullIdent.createFullIdent(aAST.getFirstChild().getNextSibling());  if ((name != null) && !name.getText().endsWith(".*")) {    imports.add(name);  }}  }
class C{  public synchronized void select(int selectionStart,int selectionEnd){  String text=getText();  if (selectionStart < 0) {    selectionStart=0;  }  if (selectionStart > text.length()) {    selectionStart=text.length();  }  if (selectionEnd > text.length()) {    selectionEnd=text.length();  }  if (selectionEnd < selectionStart) {    selectionEnd=selectionStart;  }  this.selectionStart=selectionStart;  this.selectionEnd=selectionEnd;  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    peer.select(selectionStart,selectionEnd);  }}  }
class C{  public static FloatMatrix eye(int n){  FloatMatrix m=new FloatMatrix(n,n);  for (int i=0; i < n; i++) {    m.put(i,i,1.0f);  }  return m;}  }
class C{  public static MediaType parseMediaType(String typeStr){  Matcher typeMatcher=RE_ACCEPT_FRAGMENT.matcher(typeStr);  if (typeMatcher.find()) {    return new MediaType(typeMatcher.group(1),typeMatcher.group(2));  } else {    throw new IllegalArgumentException(typeStr);  }}  }
class C{  protected void burstStringInto(Container c,String d,int maxll){  int len=d.length();  if (len <= 0)   return;  if (len > maxll) {    int p=d.lastIndexOf(' ',maxll);    if (p <= 0)     p=d.indexOf(' ',maxll);    if (p > 0 && p < len) {      burstStringInto(c,d.substring(0,p),maxll);      burstStringInto(c,d.substring(p + 1),maxll);      return;    }  }  JLabel label=new JLabel(d,JLabel.LEFT);  label.setName("OptionPane.label");  configureMessageLabel(label);  c.add(label);}  }
class C{  public void PCDataAdded(String systemId,int lineNr) throws Exception {  this.delegate.PCDataAdded(systemId,lineNr);}  }
class C{  private static boolean hasUserDefinedOp(SemanticNode node){  if (!(node instanceof ExprOrOpArgNode)) {    return false;  }  SymbolNode sym;  if (node instanceof OpApplNode) {    sym=((OpApplNode)node).getOperator();  } else   if (node instanceof OpArgNode) {    sym=((OpArgNode)node).getOp();  } else {    return false;  }  if (!(sym instanceof OpDefNode)) {    return false;  }  OpDefNode op=(OpDefNode)sym;  return op.getKind() == ASTConstants.UserDefinedOpKind;}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  if (opmode == Cipher.WRAP_MODE) {    decrypting=false;  } else   if (opmode == Cipher.UNWRAP_MODE) {    decrypting=true;  } else {    throw new UnsupportedOperationException("This cipher can " + "only be used for key wrapping and unwrapping");  }  AESCipher.checkKeySize(key,fixedKeySize);  cipher.init(decrypting,key.getAlgorithm(),key.getEncoded());}  }
class C{  public static String normalizeFileName(String fileName){  return fileName.replaceAll("\\\\","/");}  }
class C{  public static IndexComponent createFromColumn(NameComponentDescription rowKeyDesc,String columnNameToGetData,String codeToAccessValue){  return new IndexComponent(Preconditions.checkNotNull(rowKeyDesc),null,null,Preconditions.checkNotNull(columnNameToGetData),Preconditions.checkNotNull(codeToAccessValue),false);}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static void writeBytes(OutputStream sckOutputStream,byte[] buffer) throws IOException {  try {    sckOutputStream.write(buffer);  } catch (  IOException e) {    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"writeBytes() IOException, throw IOException");    throw e;  }}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mWfdEnabled ? 1 : 0);  dest.writeInt(mDeviceInfo);  dest.writeInt(mCtrlPort);  dest.writeInt(mMaxThroughput);}  }
class C{  public long numHexes(){  return (long)width() * height();}  }
class C{  public byte[] srandmember(final byte[] key){  checkIsInMulti();  client.srandmember(key);  return client.getBinaryBulkReply();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void exitFullScreen(){  player.setFullscreen(false);}  }
class C{  public RecursiveLibraryDirectoryPanel(boolean precheckFolders,Set<File> blackListSet,File... roots){  super(new BorderLayout());  this.roots=new TreeSet<File>(FileTreeModel.DEFAULT_COMPARATOR);  this.deselected=new HashSet<File>(blackListSet);  if (!precheckFolders) {    addFoldersToExclude(new HashSet<File>(Arrays.asList(roots)));  }  directoryTreeModel=new FileTreeModel("");  directoryTreeModel.setFileFilter(new IncludedFolderFilter());  directoryTree=new RootNotEditableTree(directoryTreeModel);  directoryTree.setBorder(new EmptyBorder(4,4,4,4));  directoryTree.setCellRenderer(fileTreeCellRenderer);  directoryTree.setCellEditor(new FileTreeCellEditor());  directoryTree.setEditable(true);  directoryTree.setVisibleRowCount(8);  directoryTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);  JScrollPane jspDirectories=new JScrollPane(directoryTree);  mainPanel=new JPanel(new BorderLayout());  mainPanel.add(jspDirectories,BorderLayout.CENTER);  legendPanel=new JPanel();  mainPanel.add(legendPanel,BorderLayout.SOUTH);  add(mainPanel,BorderLayout.CENTER);  setRoots(roots);  updateLanguage();}  }
class C{  public ExecutionStateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public NaiveBayesUpdateable(){  this(true);}  }
class C{  private void ensureInitialized(){  if (!mInitialized) {    lock.lock();    try {      if (!mInitialized) {        mInternalPath=Environment.getDataDirectory();        mExternalPath=Environment.getExternalStorageDirectory();        updateStats();        mInitialized=true;      }    }  finally {      lock.unlock();    }  }}  }
class C{  private static void dualPivotQuicksort(byte[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    byte t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    byte t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    byte t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    byte t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    byte t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  byte pivot1=ae2;  a[e2]=a[left];  byte pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  @Override public boolean isStepOverriden(){  return isStepOverriden;}  }
class C{  @Override public boolean isUndoEnabled(){  return ((ArffSortedTableModel)m_TableArff.getModel()).isUndoEnabled();}  }
class C{  public static String initCap(String in){  if (in == null || in.length() == 0)   return in;  boolean capitalize=true;  char[] data=in.toCharArray();  for (int i=0; i < data.length; i++) {    if (data[i] == ' ' || Character.isWhitespace(data[i]))     capitalize=true; else     if (capitalize) {      data[i]=Character.toUpperCase(data[i]);      capitalize=false;    } else     data[i]=Character.toLowerCase(data[i]);  }  return new String(data);}  }
class C{  public static double[][] mergeRows(double[]... x){  double[][] array=new double[x.length][];  for (int i=0; i < array.length; i++) {    array[i]=new double[x[i].length];    System.arraycopy(x[i],0,array[i],0,array[i].length);  }  return array;}  }
class C{  public FastVectorEnumeration(FastVector vector){  m_Counter=0;  m_Vector=vector;  m_SpecialElement=-1;}  }
class C{  public static void checkReadsGuid(final SAMFileHeader header,final SdfId sdfId){  final SdfId myGuid=getReadsGuid(header);  if (!myGuid.check(sdfId)) {    throw new NoTalkbackSlimException("SDF-ID of given SDF does not match SDF used during mapping.");  } else   if (!myGuid.available()) {    Diagnostic.warning("No READ-SDF-ID found in SAM header, unable to verify read-id correctness.");  }}  }
class C{  private void convertToWPath(PathIterator pathIter){  float[] segment=new float[6];  int segmentType;  WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();  int polyFillRule;  if (pathIter.getWindingRule() == PathIterator.WIND_EVEN_ODD) {    polyFillRule=WPrinterJob.POLYFILL_ALTERNATE;  } else {    polyFillRule=WPrinterJob.POLYFILL_WINDING;  }  wPrinterJob.setPolyFillMode(polyFillRule);  wPrinterJob.beginPath();  while (pathIter.isDone() == false) {    segmentType=pathIter.currentSegment(segment);switch (segmentType) {case PathIterator.SEG_MOVETO:      wPrinterJob.moveTo(segment[0],segment[1]);    break;case PathIterator.SEG_LINETO:  wPrinterJob.lineTo(segment[0],segment[1]);break;case PathIterator.SEG_QUADTO:int lastX=wPrinterJob.getPenX();int lastY=wPrinterJob.getPenY();float c1x=lastX + (segment[0] - lastX) * 2 / 3;float c1y=lastY + (segment[1] - lastY) * 2 / 3;float c2x=segment[2] - (segment[2] - segment[0]) * 2 / 3;float c2y=segment[3] - (segment[3] - segment[1]) * 2 / 3;wPrinterJob.polyBezierTo(c1x,c1y,c2x,c2y,segment[2],segment[3]);break;case PathIterator.SEG_CUBICTO:wPrinterJob.polyBezierTo(segment[0],segment[1],segment[2],segment[3],segment[4],segment[5]);break;case PathIterator.SEG_CLOSE:wPrinterJob.closeFigure();break;}pathIter.next();}wPrinterJob.endPath();}  }
class C{  public String resolveType(Context context){  return resolveType(context.getContentResolver());}  }
class C{  public Tuple(K key,V value){  this.key=key;  this.value=value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.843 -0500",hash_original_method="38B14A3222BE2105E2C0F39A9CA63E55",hash_generated_method="94356BC9AE374861585560E86A5DBCCC") public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPRequest.class.getName());  sprint("{");  if (requestLine != null)   sprint(requestLine.debugDump());  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  public ScriptBuilder op(int index,int opcode){  checkArgument(opcode > OP_PUSHDATA4);  return addChunk(index,new ScriptChunk(opcode,null));}  }
class C{  public PriorityQueue<NeighbourNodeData> findKNearestNeighbours(int K,int sampleIndex) throws Exception {  if (numObservations <= K) {    throw new Exception("Not enough data points for a K nearest neighbours search");  }  int indexInSortedArray=indicesInSortedArray[sampleIndex];  int lowerCandidate=(indexInSortedArray == 0) ? -1 : indexInSortedArray - 1;  int upperCandidate=(indexInSortedArray == numObservations - 1) ? -1 : indexInSortedArray + 1;  PriorityQueue<NeighbourNodeData> pq=new PriorityQueue<NeighbourNodeData>(K);  for (int k=0; k < K; k++) {    double normAbove=(upperCandidate == -1) ? Double.POSITIVE_INFINITY : norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[upperCandidate]],normTypeToUse);    double normBelow=(lowerCandidate == -1) ? Double.POSITIVE_INFINITY : norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[lowerCandidate]],normTypeToUse);    NeighbourNodeData nextNearest;    if (normAbove < normBelow) {      nextNearest=new NeighbourNodeData(sortedArrayIndices[upperCandidate],new double[]{normAbove},normAbove);      upperCandidate=(upperCandidate == numObservations - 1) ? -1 : upperCandidate + 1;    } else {      nextNearest=new NeighbourNodeData(sortedArrayIndices[lowerCandidate],new double[]{normBelow},normBelow);      lowerCandidate--;    }    pq.add(nextNearest);  }  return pq;}  }
class C{  public int available() throws IOException {  int bytesAvailable=in.available();  if (bytesAvailable > bytesLeft)   bytesAvailable=bytesLeft;  return bytesAvailable;}  }
class C{  public void delete(CoapHandler handler){  asynchronous(newDelete().setURI(uri),handler);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public boolean removeLabelFromStorage(StorageData storageData,AbstractStorageLabel<?> storageLabel) throws IOException, SerializationException, BusinessException {  StorageData local=getLocalStorageDataObject(storageData);  if (null != local) {    boolean removed=local.removeLabel(storageLabel);    writeStorageDataToDisk(local);    return removed;  }  return false;}  }
class C{  public void testReadFailSequence() throws JmriException {  EasyDccInterfaceScaffold t=new EasyDccInterfaceScaffold();  EasyDccListenerScaffold l=new EasyDccListenerScaffold();  EasyDccProgrammer p=new EasyDccProgrammer();  p.setMode(DefaultProgrammerManager.PAGEMODE);  p.readCV(10,l);  Assert.assertEquals("read message sent",1,t.outbound.size());  Assert.assertEquals("read message contents","R 00A",((t.outbound.elementAt(0))).toString());  EasyDccReply r=new EasyDccReply();  r.setElement(0,'C');  r.setElement(1,'V');  r.setElement(2,'0');  r.setElement(3,'1');  r.setElement(4,'0');  r.setElement(5,'-');  r.setElement(6,'-');  t.sendTestReply(r);  Assert.assertEquals(" programmer listener not invoked again",1,rcvdInvoked);}  }
class C{  private boolean isAutomaticTimeRequested(){  return Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.AUTO_TIME,0) != 0;}  }
class C{  public AbstractAuthSwitchSendResponsePacket(int packSeq,byte[] authData,String password){  this.packSeq=packSeq;  this.authData=authData;  this.password=password;}  }
class C{  protected void primExecute(){  entityDiagram.addInitBounds(entity,entityPart.getBounds());  deleteRelationships(entity);  index=entityDiagram.getEntities().indexOf(entity);  entityDiagram.removeTable(entity,true);}  }
class C{  @Override public void init() throws IllegalAccessException {}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  protected Geometry transformPolygon(Polygon geom,Geometry parent){  if (geom.isEmpty())   return null;  Geometry rawGeom=super.transformPolygon(geom,parent);  if (parent instanceof MultiPolygon) {    return rawGeom;  }  return createValidArea(rawGeom);}  }
class C{  public Collection<String> listSnapshots(String volumeName){  if (log.isDebugEnabled()) {    log.debug("Listing snapshots on volume with params[volName]: " + volumeName);  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  Collection<String> attrs=new ArrayList<String>();  attrs.add("name");  return vol.listSnapshots(attrs);}  }
class C{  @Override public boolean isAllowedToInitiateGroupChat2(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  try {    if (!isAllowedToInitiateGroupChat()) {      return false;    }    Capabilities contactCapabilities=mContactManager.getContactCapabilities(contact);    if (contactCapabilities == null) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as the capabilities of the participant '" + contact + "' are not known.");      }      return false;    }    if (!contactCapabilities.isImSessionSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as the participant '" + contact + "' does not have IM capabilities.");      }      return false;    }    if (mRcsSettings.isGroupChatInviteIfFullStoreForwardSupported() && !contactCapabilities.isGroupChatStoreForwardSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as the participant '" + contact + "' does not have store and forward feature supported.");      }      return false;    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public Register createRegister(int value){  return new SimpleRegister(value);}  }
class C{  public int countLines(String fileName) throws IOException {  DataInputStream in=null;  BufferedReader br=null;  int count=0;  try {    FileInputStream fstream=new FileInputStream(fileName);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    String line=null;    while ((line=br.readLine().trim()) != null) {      count++;    }    fstream.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }    return count;  }}  }
class C{  public CachePerfStats(StatisticsFactory factory){  stats=factory.createAtomicStatistics(type,"cachePerfStats");}  }
class C{  public void paintComboBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public synchronized void disableAllTypes(){  enabledTypes.clear();}  }
class C{  public void testExtraContextAttributes(){  Assert.assertTrue(Boolean.valueOf(configuration.getProperties().get(TomcatPropertySet.CONTEXT_ALLOWMULTIPART)));  Assert.assertTrue(Boolean.valueOf(configuration.getProperties().get(TomcatPropertySet.CONTEXT_ALLOWWEBJARS)));}  }
class C{  public CLogFilePanel(){  super(new BorderLayout());  final JTextField fileLabel=new JTextField(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));  fileLabel.setEditable(false);  fileLabel.setCaretPosition(0);  add(fileLabel);  final JButton button=new JButton(new COpenAction());  add(button,BorderLayout.EAST);}  }
class C{  public boolean addNondirectedEdge(Node node1,Node node2){  return addEdge(Edges.nondirectedEdge(node1,node2));}  }
class C{  public void checkPermissions(NamespaceEntity namespaceEntity,String... requestedIamRoleNames){  checkPermissions(namespaceEntity,Arrays.asList(requestedIamRoleNames));}  }
class C{  private void executeFlushWorkflow(Map<Volume,Volume> vplexToArrayVolumesToFlush,StorageSystem storageSystem,Copy copy,String op,String task){  String waitFor=null;  List<URI> volumeURIs=getCompleterVolumesForSRDFProtectionOperaton(copy);  VolumeWorkflowCompleter completer=new VolumeWorkflowCompleter(volumeURIs,task);  try {    Workflow workflow=workflowService.getNewWorkflow(this,"performSRDFProtectionOperation",true,task,completer);    StringBuilder volNames=new StringBuilder();    List<URI> readOnlyVolumes=getVPlexVolumesToMarkReadOnly(vplexToArrayVolumesToFlush,op,volNames);    waitFor=vplexConsistencyGroupManager.addStepForUpdateConsistencyGroupReadOnlyState(workflow,readOnlyVolumes,true,"Set CG state to read-only: " + volNames,waitFor);    Map<URI,String> vplexVolumeIdToDetachStep=new HashMap<URI,String>();    waitFor=vplexDeviceController.addPreRestoreResyncSteps(workflow,vplexToArrayVolumesToFlush,vplexVolumeIdToDetachStep,waitFor);    Workflow.Method performProtectionOperationMethod=srdfDeviceController.performProtectionOperationMethod(storageSystem.getId(),copy,op);    Workflow.Method nullRollbackMethod=srdfDeviceController.rollbackMethodNullMethod();    String srdfStep=workflow.createStep(SRDF_PROTECTION_OPERATION,"SRDFProtectionOperation: " + op,waitFor,storageSystem.getId(),storageSystem.getSystemType(),false,srdfDeviceController.getClass(),performProtectionOperationMethod,nullRollbackMethod,false,null);    waitFor=vplexDeviceController.addPostRestoreResyncSteps(workflow,vplexToArrayVolumesToFlush,vplexVolumeIdToDetachStep,srdfStep);    volNames=new StringBuilder();    List<URI> readWriteVolumes=getVPlexVolumesToMarkReadWrite(vplexToArrayVolumesToFlush,op,volNames);    waitFor=vplexConsistencyGroupManager.addStepForUpdateConsistencyGroupReadOnlyState(workflow,readWriteVolumes,false,"Set CG state to read-write: " + volNames,waitFor);    workflow.executePlan(completer,"Sucessful workflow for SRDF Protection Operation" + copy.getCopyID().toString());  } catch (  Exception ex) {    s_logger.error("Could not create vplex-srdf protection workflow",ex);    ServiceError error=DeviceControllerException.errors.jobFailed(ex);    completer.error(dbClient,error);  }}  }
class C{  @Override public void onTick(boolean tryToTickFaster){  this.chunkTicked=true;  cubeMap.forEach(null);}  }
class C{  public boolean isCloningEnabled(){  return cloningEnabled;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  throw new UnsupportedOperationException();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public long incrementAndGet(){  return atomicSeq.incrementAndGet();}  }
class C{  public boolean isInherited(int implIdx){  final EObject implParent=parent != null ? parent.getElementImpl(implIdx) : null;  final EObject impl=getElementImpl(implIdx);  if (implParent instanceof ContainerType<?> && impl instanceof TMember) {    return impl.eContainer() != implParent;  }  return false;}  }
class C{  public final void testValidateCaseInsensitiveAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,true,allowedCharacters);  assertTrue(characterValidator.validate("Ab C-"));}  }
class C{  protected SAXParser createParser(){  try {    return SAXParserFactory.newInstance().newSAXParser();  } catch (  ParserConfigurationException e) {    throw new OsmRuntimeException("Unable to create SAX Parser.",e);  }catch (  SAXException e) {    throw new OsmRuntimeException("Unable to create SAX Parser.",e);  }}  }
class C{  public Node<K,V> first(){  Node<K,V> node=this;  Node<K,V> child=node.left;  while (child != null) {    node=child;    child=node.left;  }  return node;}  }
class C{  BCRSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize << 1);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  public void open(){  open=true;  put("open","");  notifyWorldAboutChanges();}  }
class C{  protected static void fillEdgepathsTable(final CConnection connection,final List<INaviEdge> edges) throws SQLException {  final String query="INSERT INTO " + CTableNames.EDGE_PATHS_TABLE + "(edge_id, position, x, y) VALUES (?, ?, ?, ?)";  final PreparedStatement preparedStatement=connection.getConnection().prepareStatement(query);  try {    for (    final INaviEdge edge : edges) {      for (      final CBend bend : edge.getBends()) {        preparedStatement.setInt(1,edge.getId());        preparedStatement.setInt(2,edge.getBends().indexOf(bend));        preparedStatement.setDouble(3,bend.getX());        preparedStatement.setDouble(4,bend.getY());        preparedStatement.addBatch();      }    }    preparedStatement.executeBatch();  } catch (  final SQLException exception) {    CUtilityFunctions.logException(exception);    CUtilityFunctions.logException(exception.getNextException());  } finally {    preparedStatement.close();  }}  }
class C{  public RangeBuilder addUnboundedTo(String key,double to){  ranges.add(new Range(key,null,to));  return this;}  }
class C{  public Builder consecutiveDismissCallback(SnackbarConsecutiveDismissCallback callback){  consecutiveDismissCallback=callback;  return this;}  }
class C{  public void assertEqual(int expected,int actual){  TestUtils.assertEqual(expected,actual);}  }
class C{  public CpcRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public static BufferedReader newReader(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  public static void grow(Rectangle2D.Double r,double h,double v){  r.x-=h;  r.y-=v;  r.width+=h * 2d;  r.height+=v * 2d;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EXIT_POINT_SPEC;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Test suite(){  return (new TestSuite(MessageRenderITCase.class));}  }
class C{  public void enterData(int index,float value){  this.dataPoints[index]=value;}  }
class C{  public int size(){  return m_Size;}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  @Override public String toString(){  String precisionStr=new DecimalFormat("0.#E0").format(Math.pow(2,precision));  return "Leap indicator: " + leapIndicator + "\n"+ "Version: "+ version+ "\n"+ "Mode: "+ mode+ "\n"+ "Stratum: "+ stratum+ "\n"+ "Poll: "+ pollInterval+ "\n"+ "Precision: "+ precision+ " ("+ precisionStr+ " seconds)\n"+ "Root delay: "+ new DecimalFormat("0.00").format(rootDelay * 1000)+ " ms\n"+ "Root dispersion: "+ new DecimalFormat("0.00").format(rootDispersion * 1000)+ " ms\n"+ "Reference identifier: "+ referenceIdentifierToString(referenceIdentifier,stratum,version)+ "\n"+ "Reference timestamp: "+ timestampToString(referenceTimestamp)+ "\n"+ "Originate timestamp: "+ timestampToString(originateTimestamp)+ "\n"+ "Receive timestamp:   "+ timestampToString(receiveTimestamp)+ "\n"+ "Transmit timestamp:  "+ timestampToString(transmitTimestamp);}  }
class C{  public void addLangCondition(String lang){  _specificityC++;  addCondition(Condition.createLangCondition(lang));}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.902 -0400",hash_original_method="2F668D010292F41F8534D9B42F402EB1",hash_generated_method="E92D53D06BA9BE55F7FB3173E2C57885") @Override public int read(byte[] buf) throws IOException {  return read(buf,0,buf.length);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  private static RegisterSpec intern(int reg,TypeBearer type,LocalItem local){synchronized (theInterns) {    theInterningItem.set(reg,type,local);    RegisterSpec found=theInterns.get(theInterningItem);    if (found != null) {      return found;    }    found=theInterningItem.toRegisterSpec();    theInterns.put(found,found);    return found;  }}  }
class C{  public PlacemarkAttributes(PlacemarkAttributes attributes){  if (attributes == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"PlacemarkAttributes","constructor","missingAttributes"));  }  this.imageSource=attributes.imageSource;  this.imageColor=new Color(attributes.imageColor);  this.imageOffset=new Offset(attributes.imageOffset);  this.imageScale=attributes.imageScale;  this.minimumImageScale=attributes.minimumImageScale;  this.drawLeader=attributes.drawLeader;  this.depthTest=attributes.depthTest;  this.labelAttributes=attributes.labelAttributes != null ? new TextAttributes(attributes.labelAttributes) : null;  this.leaderAttributes=attributes.leaderAttributes != null ? new ShapeAttributes(attributes.leaderAttributes) : null;}  }
class C{  protected int addChildNode(NodeBuilder child){synchronized (nodes) {    nodes.add(child);    return nodes.size() - 1;  }}  }
class C{  public Set<P> localize(Set<P> samples,M move,R[] rangeReadings){  if (samples == null)   return null;  Set<P> newSamples=applyMove(samples,move);  double[] w=weightSamples(newSamples,rangeReadings);  newSamples=extendedWeightedSampleWithReplacement(newSamples,w);  return newSamples;}  }
class C{  public DCD(int maxIterations,boolean useL1){  this(maxIterations,1,useL1);}  }
class C{  @Override public int delete(Uri uri,String selection,String[] selectionArgs){  return mImpl.delete(uri,selection,selectionArgs);}  }
class C{  public final void shutdown(){  shuttingDown=true;  shutdownCustomImpl();  shutdownPrivate();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void disconnectInactiveChannelAssignments(){  boolean changed=false;  for (  AudioOutputConnection connection : mAudioOutputConnections) {    if (connection.isInactive() && mChannelConnectionMap.containsKey(connection.getSource())) {      mChannelConnectionMap.remove(connection.getSource());      connection.disconnect();      changed=true;    }  }  if (changed) {    updateLowestPriorityAssignment();  }}  }
class C{  public CEventFilterExpression(final FilterRelation relation,final long value){  super(relation,value);}  }
class C{  public static synchronized TinyBus from(Context context){  if (bus == null) {    final TinyBusDepot depot=TinyBusDepot.get(context);    bus=depot.getBusInContext(context);    if (bus == null) {      bus=depot.createBusInContext(context);    }  }  return bus;}  }
class C{  public boolean isUnbound(){  return !isBound();}  }
class C{  public void reset(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   genome[x]=randomValueFromClosedInterval(s.minGene(x),s.maxGene(x),state.random[thread]);}  }
class C{  public static boolean isPrivateAccessRequiringUpcast(Tree.StaticMemberOrTypeExpression qual){  if (qual instanceof Tree.QualifiedMemberOrTypeExpression) {    Tree.Primary primary=((Tree.QualifiedMemberOrTypeExpression)qual).getPrimary();    Declaration decl=qual.getDeclaration();    return decl.isMember() && !decl.isShared() && !(decl instanceof Constructor)&& decl.getContainer() instanceof Class&& !Decl.hasScopeInType(decl.getContainer(),primary.getTypeModel());  }  return false;}  }
class C{  public void addExcludeRegEx(String regexExpression){  patterns.add(new Pair<StringPatternSet,Boolean>(new StringPatternSetRegex(regexExpression),false));}  }
class C{  public int hashCode(){  if (myhash == -1) {    myhash=37 + (party == null ? 1 : party.hashCode());    if (assigner != null) {      myhash=37 * myhash + assigner.hashCode();    }  }  return myhash;}  }
class C{  private boolean updateViewForAnswer(){  boolean answerRight=false;  String givenAnswer=mAnswerInput.getText().toString();  for (  Answer item : mAnswerList) {    if (item.getText().trim().toLowerCase().equals(givenAnswer.trim().toLowerCase())) {      answerRight=true;    }  }  populateRecyclerViewWithCorrectAnswers(R.id.answerListText,givenAnswer);  mAnswerInput.setEnabled(false);  mAnswerInput.clearFocus();  if (!answerRight) {    mAnswerInput.setError(getString(R.string.wrong_answer));    mAnswerInputLayout.setErrorEnabled(true);  }  return answerRight;}  }
class C{  public void addEventListener(PeerEventListener listener,Executor executor){  peerEventListeners.add(new ListenerRegistration<PeerEventListener>(checkNotNull(listener),executor));}  }
class C{  boolean validateUserPasswordHash(byte[] userPasswordHash){  return true;}  }
class C{  public String makeString(){  return "RandomLevelSource";}  }
class C{  public boolean isSequentialFileRead(){  return sequentialFileRead;}  }
class C{  @Override public void save(Object object,int operatorId,long windowId) throws IOException {  try {    store(generateKey(operatorId,windowId),object);    logger.debug("saved check point object key {} region {}",generateKey(operatorId,windowId),applicationId);  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public void bind(String name,Object obj) throws NamingException {  bind(nameParser.parse(name),obj);}  }
class C{  @PostConstruct private void init(){  try {    Yaml yaml=new Yaml();    Map<String,Object> props=(Map<String,Object>)yaml.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("/snoop.yml"));    snoopConfig=(Map<String,Object>)props.get("snoop");  } catch (  YAMLException e) {    LOGGER.config(null);  }}  }
class C{  protected boolean isPaintNoTrangleThumb(){  Boolean paintThumbArrowShape=(Boolean)slider.getClientProperty("Slider.paintThumbArrowShape");  return (!slider.getPaintTicks() && paintThumbArrowShape == null) || paintThumbArrowShape == Boolean.FALSE;}  }
class C{  @Override public String toString(){  return "XYItemEntity: series = " + getSeriesIndex() + ", item = "+ getItem()+ ", dataset = "+ getDataset();}  }
class C{  public static PathPatternProcessorDecorator exclude(final Object processor,final String... patterns){  return new PathPatternProcessorDecorator(processor,false,patterns);}  }
class C{  public static double[] rank(ExampleSet eSet,Attribute att,Attribute mappingAtt){  return rank(eSet,att,mappingAtt,0.0);}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public final int length(){  return longs.length();}  }
class C{  private void disposeServiceCollectors(){  if (logger.isLoggable(Level.FINER)) {    logger.finer("disposeServiceCollectors()");  }  for (  String type : _serviceCollectors.keySet()) {    ServiceCollector collector=_serviceCollectors.get(type);    if (collector != null) {      this.removeServiceListener(type,collector);      _serviceCollectors.remove(type,collector);    }  }}  }
class C{  public int hashCode(){  int total=17;  for (int i=0, isize=size(); i < isize; i++) {    total=27 * total + getValue(i);    total=27 * total + getFieldType(i).hashCode();  }  return total;}  }
class C{  private static void drawX(Graphics gx,double x,double y,int size){  gx.drawLine((int)(x - size),(int)(y - size),(int)(x + size),(int)(y + size));  gx.drawLine((int)(x + size),(int)(y - size),(int)(x - size),(int)(y + size));}  }
class C{  public void onClientConnectionState(int status,int clientIf,boolean connected,String address){  if (DBG)   Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);  if (!address.equals(mDevice.getAddress())) {    return;  }  int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;  try {    mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }synchronized (mStateLock) {    if (connected) {      mConnState=CONN_STATE_CONNECTED;    } else {      mConnState=CONN_STATE_IDLE;    }  }}  }
class C{  public static Object doctest(Context cx,Scriptable thisObj,Object[] args,Function funObj){  if (args.length == 0) {    return Boolean.FALSE;  }  String session=Context.toString(args[0]);  Global global=getInstance(funObj);  return new Integer(global.runDoctest(cx,global,session,null,0));}  }
class C{  public byte[] readByteArray(){  int len=remaining();  byte[] out=new byte[len];  System.arraycopy(array,pos,out,0,len);  pos+=len;  return out;}  }
class C{  public boolean is_set_id2(){  return this.id2 != null;}  }
class C{  public B filterParams(final SamFilterParams val){  mFilterParams=val;  return self();}  }
class C{  static private List<URI> filterOutUnregisteredPorts(DbClient dbClient,List<URI> storagePortUris){  List<StoragePort> ports=dbClient.queryObject(StoragePort.class,storagePortUris);  Iterator<StoragePort> portItr=ports.iterator();  while (portItr.hasNext()) {    StoragePort stPort=portItr.next();    if (stPort.getRegistrationStatus().equalsIgnoreCase(RegistrationStatus.UNREGISTERED.toString())) {      _logger.info("Removing unregistered port {}",stPort.getNativeGuid());      storagePortUris.remove(stPort.getId());    }  }  return storagePortUris;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_xpath.fixupVariables(vars,globalsSize);}  }
class C{  protected void clearEvents(){  sCIMyInterface.clearEvents();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? new Long(0) : new Long(pluggy.getInstallDate());}  }
class C{  public void unlock(final UUID key){  if (lock.map(null).orElse(false)) {    lock=Optional.empty();    getCasingWorld().markBlockForUpdate(getPosition());  }}  }
class C{  public static void main(String[] args){  Timeline[] result=null;  if (args[0].startsWith("/"))   result=parse(new File(args[0]),Timeline.Order.CREATED_AT,true,true); else   result=TwitterScraper.search(args[0],Timeline.Order.CREATED_AT,true,true);  int all=0;  for (int x=0; x < 2; x++) {    if (x == 0)     System.out.println("Timeline[0] - finished to be used:");    if (x == 1)     System.out.println("Timeline[1] - messages which are in postprocessing");    all+=result[x].size();    for (    MessageEntry tweet : result[x]) {      if (tweet instanceof TwitterTweet) {        ((TwitterTweet)tweet).waitReady(10000);      }      System.out.println(tweet.getCreatedAt().toString() + " from @" + tweet.getScreenName()+ " - "+ tweet.getText(Integer.MAX_VALUE,""));    }  }  System.out.println("count: " + all);  System.exit(0);}  }
class C{  private ArgRange extractArgValue(int index,String working){  int firstPos=index;  int lastPos=index;  boolean hasSpaces=false;  for (int i=index; i < working.length(); i++) {    char c=working.charAt(i);    if (c == ' ')     continue;    firstPos=i;    break;  }  if (working.charAt(firstPos) == '-')   return null;  for (int i=index; i < working.length(); i++) {    char c=working.charAt(i);    if (c == '-') {      char prev=working.charAt(i - 1);      if (prev == ' ')       break;    } else     if (c == '+') {      break;    } else {      if (c != ' ')       lastPos=i;    }  }  for (int i=firstPos; !hasSpaces && i <= lastPos; i++) {    char c=working.charAt(i);    if (c == ' ')     hasSpaces=true;  }  return new ArgRange(firstPos,lastPos + 1,hasSpaces);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("doPost - Create Menu");  WebSessionCtx wsc=WebSessionCtx.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  WebUtil.getClearFrame(WebEnv.TARGET_WINDOW);  String role=WebUtil.getParameter(request,WLogin.P_ROLE);  String client=WebUtil.getParameter(request,WLogin.P_CLIENT);  String org=WebUtil.getParameter(request,WLogin.P_ORG);  String wh=WebUtil.getParameter(request,WLogin.P_WAREHOUSE);  if (wh == null)   wh="";  if (role == null || client == null || org == null) {    WebUtil.createTimeoutPage(request,response,this,Msg.getMsg(wsc.ctx,"ParameterMissing"));    return;  }  int AD_User_ID=Env.getAD_User_ID(wsc.ctx);  int AD_Role_ID=Env.getAD_Role_ID(wsc.ctx);  int AD_Client_ID=Env.getAD_Client_ID(wsc.ctx);  int AD_Org_ID=-1;  int M_Warehouse_ID=-1;  try {    int req_role=Integer.parseInt(role);    if (req_role != AD_Role_ID) {      log.fine("AD_Role_ID - changed from " + AD_Role_ID);      AD_Role_ID=req_role;      Env.setContext(wsc.ctx,"#AD_Role_ID",AD_Role_ID);    }    log.fine("AD_Role_ID = " + AD_Role_ID);    int req_client=Integer.parseInt(client);    if (req_client != AD_Client_ID) {      log.fine("AD_Client_ID - changed from " + AD_Client_ID);      AD_Client_ID=req_client;      Env.setContext(wsc.ctx,"#AD_Client_ID",AD_Client_ID);    }    log.fine("AD_Client_ID = " + AD_Client_ID);    AD_Org_ID=Integer.parseInt(org);    log.fine("AD_Org_ID = " + AD_Org_ID);    if (wh.length() > 0) {      M_Warehouse_ID=Integer.parseInt(wh);      log.fine("M_Warehouse_ID = " + M_Warehouse_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,"Parameter",e);    WebUtil.createTimeoutPage(request,response,this,Msg.getMsg(wsc.ctx,"ParameterMissing"));    return;  }  wsc.loginInfo=checkLogin(wsc.ctx,AD_User_ID,AD_Role_ID,AD_Client_ID,AD_Org_ID,M_Warehouse_ID);  if (wsc.loginInfo == null) {    WebUtil.createErrorPage(request,response,this,Msg.getMsg(wsc.ctx,"RoleInconsistent"));    return;  }  Properties cProp=WebUtil.getCookieProprties(request);  cProp.setProperty(WLogin.P_ROLE,String.valueOf(AD_Role_ID));  cProp.setProperty(WLogin.P_CLIENT,String.valueOf(AD_Client_ID));  cProp.setProperty(WLogin.P_ORG,String.valueOf(AD_Org_ID));  if (M_Warehouse_ID == -1)   cProp.setProperty(WLogin.P_WAREHOUSE,""); else   cProp.setProperty(WLogin.P_WAREHOUSE,String.valueOf(M_Warehouse_ID));  Timestamp ts=WebUtil.getParameterAsDate(request,WLogin.P_DATE);  if (ts == null)   ts=new Timestamp(System.currentTimeMillis());  Env.setContext(wsc.ctx,"#Date",ts);  if (!cProp.getProperty(WLogin.P_STORE,"N").equals("Y"))   cProp.clear();  WebDoc doc=createPage(request,wsc,AD_Role_ID,AD_User_ID,AD_Client_ID,AD_Org_ID);  doc.getBody().addElement(WebUtil.getClearFrame(WebEnv.TARGET_WINDOW));  WebUtil.createResponse(request,response,this,cProp,doc,false);}  }
class C{  public static ValueLobDb create(int type,int tableId,long id,long precision){  return new ValueLobDb(type,tableId,id,precision);}  }
class C{  @Override public void run(){  try {    while (!isClosed() && _is.read() > 0 && _in.readMessage(_is)) {      ServiceRef.flushOutbox();    }  } catch (  EOFException e) {    log.finer(this + " end of file");    if (log.isLoggable(Level.ALL)) {      log.log(Level.ALL,e.toString(),e);    }  }catch (  SocketException e) {    e.printStackTrace();    log.finer(this + " socket closed:" + e);    if (log.isLoggable(Level.ALL)) {      log.log(Level.ALL,e.toString(),e);    }  }catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException(e);  }catch (  Throwable e) {    e.printStackTrace();    throw e;  } finally {    close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.301 -0500",hash_original_method="4A9417958994593B8563D558E999EFC3",hash_generated_method="452593542D6F488C7C8A4B5BED4615B3") private static Object await(Node node,Slot slot){  Thread w=Thread.currentThread();  int spins=SPINS;  for (; ; ) {    Object v=node.get();    if (v != null)     return v; else     if (spins > 0)     --spins; else     if (node.waiter == null)     node.waiter=w; else     if (w.isInterrupted())     tryCancel(node,slot); else     LockSupport.park(node);  }}  }
class C{  public UnionMailboxACLResolver(MailboxACL userGlobalACL,MailboxACL groupGlobalACL){  super();  if (userGlobalACL == null) {    throw new NullPointerException("Missing userGlobalACL.");  }  if (groupGlobalACL == null) {    throw new NullPointerException("Missing groupGlobalACL.");  }  this.userGlobalACL=userGlobalACL;  this.groupGlobalACL=groupGlobalACL;}  }
class C{  protected void fireModelChanged(){  final boolean empty=getAnnotationModelEvent().isEmpty();  if (empty) {    return;  }  if (getDocumentHandle() == null || getDocumentHandle().getDocEventBus() == null) {    return;  }  getDocumentHandle().getDocEventBus().fireEvent(this.modelEvent);}  }
class C{  public static boolean isSupported(){  try {    SecurityManager security=System.getSecurityManager();    if (security != null) {      Permission perm=new RuntimePermission("com.sun.tracing.dtrace.createProvider");      security.checkPermission(perm);    }    return JVM.isSupported();  } catch (  SecurityException e) {    return false;  }}  }
class C{  public static Matcher<Method> names(String methodName){  return new Names(methodName);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addListener(final ITraceListListener listener){  listeners.addListener(listener);}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.776 -0500",hash_original_method="A24A575FAE973D160C4E5E7D0F1284A3",hash_generated_method="EF7557F2CCEC32B947EEF5A8EF2D1C54") public AllowParser(String allow){  super(allow);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMUAD");  translateAll(environment,instruction,"SMUAD",instructions);}  }
class C{  private boolean isRemoteRoutedNetwork(Network network,String currentNetworkSystemId,Set<String> connectedNetworkSystems){  if (network.getNetworkSystems() != null) {    for (    String networkSystem : network.getNetworkSystems()) {      if (networkSystem != currentNetworkSystemId && connectedNetworkSystems.contains(networkSystem)) {        return true;      }    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void processCloudletCancel(int cloudletId,int userId,int vmId){  Cloudlet cl=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().cloudletCancel(cloudletId);  sendNow(userId,CloudSimTags.CLOUDLET_CANCEL,cl);}  }
class C{  public boolean isRoot(){  return true;}  }
class C{  public void addOutEdge(DirectedEdge de){  deStar.add(de);}  }
class C{  public static <S extends HasHoverHiddenHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    HoverHiddenEvent event=new HoverHiddenEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void goBack(){  String uri=manager.getBack();  view.setDocument(uri);  updateButtons();}  }
class C{  public boolean isUserMigrationEnabled() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getEntry(new URL(emailBaseUrl + "migration"),GenericEntry.class).getProperty("enableUserMigration").equalsIgnoreCase("true");}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.210 -0400",hash_original_method="180873F10A7C6AF95005511FB04A1244",hash_generated_method="A50BD33D4BEB9334EB3E0CF234B27CDD") public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  private boolean supportsSocks5(String targetJID) throws XMPPException {  ServiceDiscoveryManager serviceDiscoveryManager=ServiceDiscoveryManager.getInstanceFor(this.connection);  DiscoverInfo discoverInfo=serviceDiscoveryManager.discoverInfo(targetJID);  return discoverInfo.containsFeature(NAMESPACE);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT:    setAstElement((EObject)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void revokeService(Class serviceClass,BeanContextServiceProvider bcsp,boolean revokeCurrentServicesNow){  if (serviceClass == null)   throw new NullPointerException("serviceClass");  if (bcsp == null)   throw new NullPointerException("bcsp");synchronized (BeanContext.globalHierarchyLock) {    if (!services.containsKey(serviceClass))     return;    BCSSServiceProvider bcsssp=(BCSSServiceProvider)services.get(serviceClass);    if (!bcsssp.getServiceProvider().equals(bcsp))     throw new IllegalArgumentException("service provider mismatch");    services.remove(serviceClass);    if (bcsp instanceof Serializable)     serializable--;    Iterator i=bcsChildren();    while (i.hasNext()) {      ((BCSSChild)i.next()).revokeService(serviceClass,false,revokeCurrentServicesNow);    }    fireServiceRevoked(serviceClass,revokeCurrentServicesNow);  }}  }
class C{  protected void reduceEnergy(double amount){  if (SimClock.getTime() < this.warmupTime) {    return;  }  if (comBus == null) {    return;  }  if (amount >= this.currentEnergy) {    comBus.updateProperty(ENERGY_VALUE_ID,0.0);  } else {    comBus.updateDouble(ENERGY_VALUE_ID,-amount);  }}  }
class C{  @NotNull public TabBuilder visible(@NotNull VisibleState visibleState){  this.visibleState=visibleState;  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean defNonDescendent(Node node1,Node node2){  return !(possibleAncestor(node1,node2));}  }
class C{  public DataFileFooter readDataFileFooter(String filePath,long blockOffset,long blockLength) throws IOException {  DataFileFooter dataFileFooter=new DataFileFooter();  FileHolder fileReader=null;  try {    long completeBlockLength=blockOffset + blockLength;    long footerPointer=completeBlockLength - 8;    fileReader=FileFactory.getFileHolder(FileFactory.getFileType(filePath));    long actualFooterOffset=fileReader.readLong(filePath,footerPointer);    CarbonFooterReader reader=new CarbonFooterReader(filePath,actualFooterOffset);    FileFooter footer=reader.readFooter();    dataFileFooter.setVersionId(footer.getVersion());    dataFileFooter.setNumberOfRows(footer.getNum_rows());    dataFileFooter.setSegmentInfo(getSegmentInfo(footer.getSegment_info()));    List<ColumnSchema> columnSchemaList=new ArrayList<ColumnSchema>();    List<org.carbondata.format.ColumnSchema> table_columns=footer.getTable_columns();    for (int i=0; i < table_columns.size(); i++) {      columnSchemaList.add(thriftColumnSchmeaToWrapperColumnSchema(table_columns.get(i)));    }    dataFileFooter.setColumnInTable(columnSchemaList);    List<org.carbondata.format.BlockletIndex> leaf_node_indices_Thrift=footer.getBlocklet_index_list();    List<BlockletIndex> blockletIndexList=new ArrayList<BlockletIndex>();    for (int i=0; i < leaf_node_indices_Thrift.size(); i++) {      BlockletIndex blockletIndex=getBlockletIndex(leaf_node_indices_Thrift.get(i));      blockletIndexList.add(blockletIndex);    }    List<org.carbondata.format.BlockletInfo> leaf_node_infos_Thrift=footer.getBlocklet_info_list();    List<BlockletInfo> blockletInfoList=new ArrayList<BlockletInfo>();    for (int i=0; i < leaf_node_infos_Thrift.size(); i++) {      BlockletInfo blockletInfo=getBlockletInfo(leaf_node_infos_Thrift.get(i));      blockletInfo.setBlockletIndex(blockletIndexList.get(i));      blockletInfoList.add(blockletInfo);    }    dataFileFooter.setBlockletList(blockletInfoList);    dataFileFooter.setBlockletIndex(getBlockletIndexForDataFileFooter(blockletIndexList));  }  finally {    if (null != fileReader) {      fileReader.finish();    }  }  return dataFileFooter;}  }
class C{  private long adjustForFatEpoch(long time){  final long FAT_EPOCH=119600064000000000L;  if (time != -1L && time < FAT_EPOCH) {    return FAT_EPOCH;  } else {    return time;  }}  }
class C{  public static boolean isPrime(int n){  for (int i=2; i <= n / 2; i++) {    if (n % i == 0)     return false;  }  return true;}  }
class C{  public static Option[] parseCLArgs(String[] args,Option[] templates){  int i=0;  List<Option> options=new ArrayList<Option>(args.length);  try {    while (i < args.length) {      String name=args[i++];      Option template=findTemplate(name,templates);      StringBuilder values=new StringBuilder();      if (!Type.LIST.equals(template.getType())) {        for (int j=0; j < template.getLen(); j++) {          values.append(args[i++]).append(" ");        }      } else       if (hasMoreFlags(args,--i,templates)) {        throw new IllegalArgumentException();      } else {        for (        String arg : Arrays.copyOfRange(args,i,args.length)) {          values.append(arg).append(" ");        }        template.setValue(values.toString().trim());        Option[] result=new Option[options.size() + 1];        result=options.toArray(result);        result[result.length - 1]=template;        return result;      }      template.setValue(values.toString().trim());      options.add(template);    }    return options.toArray(new Option[options.size()]);  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public OnlineDFSAgent(OnlineSearchProblem problem,PerceptToStateFunction ptsFunction){  setProblem(problem);  setPerceptToStateFunction(ptsFunction);}  }
class C{  public TomeeStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(TomeePropertySet.APPS_DIRECTORY,true);}  }
class C{  @Restricted(value=NoExternalUse.class) public GitHubBranchTrigger() throws ANTLRException {  super("");}  }
class C{  protected void populateNewPatientFields(String id){  String given="Given" + id;  String family="Family" + id;  type(id,viewWithId(R.id.patient_id));  type(given,viewWithId(R.id.patient_given_name));  type(family,viewWithId(R.id.patient_family_name));  type(id.substring(id.length() - 2),viewWithId(R.id.patient_age_years));  type(id.substring(id.length() - 2),viewWithId(R.id.patient_age_months));  int sex=Integer.parseInt(id) % 2 == 0 ? R.id.patient_sex_female : R.id.patient_sex_male;  click(viewWithId(sex));}  }
class C{  public void updateInsertValue(Connection connection,Object keys[],Object[] values) throws StoreExceptionDBRel {  boolean updated=updateValue(connection,keys,values);  if (!updated) {    insertValue(connection,keys,values);  }}  }
class C{  public void removeAll(){  myWraps.clear();  notifyListenersAboutChange();}  }
class C{  private void locateCodebasesRequiredForAnalysis(IClassPath classPath,IClassPathBuilderProgress progress) throws InterruptedException, IOException, ResourceNotFoundException {  boolean foundJavaLangObject=false;  boolean foundFindBugsAnnotations=false;  boolean foundJSR305Annotations=false;  for (  DiscoveredCodeBase discoveredCodeBase : discoveredCodeBaseList) {    if (!foundJavaLangObject) {      foundJavaLangObject=probeCodeBaseForResource(discoveredCodeBase,"java/lang/Object.class");    }    if (!foundFindBugsAnnotations) {      foundFindBugsAnnotations=probeCodeBaseForResource(discoveredCodeBase,"edu/umd/cs/findbugs/annotations/Nonnull.class");    }    if (!foundJSR305Annotations) {      foundJSR305Annotations=probeCodeBaseForResource(discoveredCodeBase,"javax/annotation/meta/TypeQualifier.class");      if (DEBUG) {        System.out.println("foundJSR305Annotations: " + foundJSR305Annotations);      }    }  }  if (!foundJavaLangObject) {    processWorkList(classPath,buildSystemCodebaseList(),progress);  }  if (runningFindBugsFullJar()) {    processWorkList(classPath,buildFindBugsFullJarCodebaseList(),progress);    return;  }  if (!foundFindBugsAnnotations) {    processWorkList(classPath,buildFindBugsAnnotationCodebaseList(),progress);  }  if (!foundJSR305Annotations) {    processWorkList(classPath,buildJSR305AnnotationsCodebaseList(),progress);  }}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  in[inOff]=(byte)0x80;  inOff++;  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public List<PoiTypeTag> queryByPoiTypeId(Long poiTypeId){  if (poiTypeId == null) {    return new ArrayList<>();  }  return queryForEq(PoiTypeTag.POI_TYPE_ID,poiTypeId);}  }
class C{  public NotificationChain basicSetType(TypeInfo newType,NotificationChain msgs){  TypeInfo oldType=type;  type=newType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FUNCTION__TYPE,oldType,newType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Or(){  super(Boolean.class,Boolean.class,Boolean.class);}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public PowerLUT(float powerW,float intensityW,float powerH,float intensityH,int width,int height){  Pixmap pixmap=new Pixmap(width,height,Format.RGBA8888);  for (int i=0; i < width; i++) {    float valueW=(float)Math.pow((float)i / width,powerW) * intensityW;    for (int j=0; j < height; j++) {      float valueH=(float)Math.pow((float)j / height,powerH) * intensityH;      pixmap.setColor(valueW,valueH,1.0f,1.0f);      pixmap.drawPixel(i,j);    }  }  PixmapTextureData data=new PixmapTextureData(pixmap,Format.RGBA8888,false,false,true);  texture=new Texture(data);  texture.setWrap(TextureWrap.ClampToEdge,TextureWrap.ClampToEdge);  texture.setFilter(TextureFilter.Linear,TextureFilter.Linear);}  }
class C{  private Pair<Integer,InstanceId> removeFFDInstance(ArrayList<Container> containers,String component) throws RuntimeException {  boolean removed=false;  int containerId=0;  for (int i=0; i < containers.size() && !removed; i++) {    Optional<PackingPlan.InstancePlan> instancePlan=containers.get(i).removeAnyInstanceOfComponent(component);    if (instancePlan.isPresent()) {      removed=true;      containerId=i + 1;      PackingPlan.InstancePlan plan=instancePlan.get();      return new Pair<Integer,InstanceId>(containerId,new InstanceId(plan.getComponentName(),plan.getTaskId(),plan.getComponentIndex()));    }  }  throw new RuntimeException("Cannot remove instance." + " No more instances of component " + component + " exist"+ " in the containers.");}  }
class C{  public String fullForm(final String str,final String lowString){  String ret=lowString;  PrefixEntry found=prefixMap.get(str);  if (found != null) {    ret=found.prefixSingular + ret;  } else {    for (    PrefixEntry entry : prefixEndList) {      if (str.endsWith(entry.keyword)) {        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);        break;      }    }  }  return ret;}  }
class C{  protected void moveEntry(BufferedImage oldBackingImage,Rect oldRect,BufferedImage newBackingImage,Rect newRect){  this.g.setComposite(AlphaComposite.Src);  if (oldBackingImage == newBackingImage) {    this.g.copyArea(oldRect.x(),oldRect.y(),oldRect.w(),oldRect.h(),newRect.x() - oldRect.x(),newRect.y() - oldRect.y());  } else {    this.g.drawImage(oldBackingImage,newRect.x(),newRect.y(),newRect.x() + newRect.w(),newRect.y() + newRect.h(),oldRect.x(),oldRect.y(),oldRect.x() + oldRect.w(),oldRect.y() + oldRect.h(),null);  }}  }
class C{  CFGPrinter(OutputStream out){  super(out);}  }
class C{  @Inject private WardenPostingNotifier(MetricService metricService,AnnotationService annotationService,WardenService wardenService,TSDBService tsdbService,MailService mailService,SystemConfiguration config){  super(metricService,annotationService,wardenService,tsdbService,mailService,config);}  }
class C{  public boolean isBlank(){  return originalEntry == null && newContents == null;}  }
class C{  public int size(){  return n;}  }
class C{  public int size(){  return isEmpty() ? 0 : left.size() + bucket.size() + right.size();}  }
class C{  @Override public void prepare(String changedSelector){  AgentAppFrame.SelectionState selState=frame.getSelection();  env=null;switch (selState.getIndex(VacuumFrame.ENV_SEL)) {case 0:    env=new VacuumEnvironment();  break;case 1:env=new NondeterministicVacuumEnvironment();break;}agent=null;switch (selState.getIndex(VacuumFrame.AGENT_SEL)) {case 0:agent=new TableDrivenVacuumAgent();break;case 1:agent=new ReflexVacuumAgent();break;case 2:agent=new SimpleReflexVacuumAgent();break;case 3:agent=new ModelBasedReflexVacuumAgent();break;case 4:agent=createNondeterministicVacuumAgent();break;}if (env != null && agent != null) {frame.getEnvView().setEnvironment(env);env.addAgent(agent);if (agent instanceof NondeterministicVacuumAgent) {((NondeterministicVacuumAgent)agent).setProblem(createNondeterministicProblem());}isPrepared=true;}}  }
class C{  public EventSupport createEventSupport(AbstractNode n){  return new EventSupport(n);}  }
class C{  public void appendOpenStrongTag(){  text.append("<strong>");}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  this.setContentView(R.layout.activity_settings);}  }
class C{  private boolean hasMarker(Component comp){  for (Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator(); iter.hasNext(); ) {    if (iter.next().untilFocused == comp) {      return true;    }  }  return false;}  }
class C{  @Override public SubscriberObject copy(){  return new SubscriberObject(this);}  }
class C{  public static int readIntegerWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_INT)   state.output.fatal("Line " + d.lineNumber + " has no integer after preamble '"+ preamble+ "'\n-->"+ d.data);  return (int)(d.l);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Memory convertSerV3toSerV1(Memory v3mem){  int serVer=v3mem.getByte(SER_VER_BYTE);  int famId=v3mem.getByte(FAMILY_BYTE);  int flags=v3mem.getByte(FLAGS_BYTE);  if ((serVer != 3) || (famId != 3) || ((flags & 24) != 24))   throw new SketchesArgumentException("Memory must be V3, Compact, Ordered");  int v3preLongs=v3mem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;  int entries;  long thetaLong;  if (v3preLongs == 1) {    entries=0;    thetaLong=Long.MAX_VALUE;  } else   if (v3preLongs == 2) {    entries=v3mem.getInt(RETAINED_ENTRIES_INT);    thetaLong=Long.MAX_VALUE;  } else {    entries=v3mem.getInt(RETAINED_ENTRIES_INT);    thetaLong=v3mem.getLong(THETA_LONG);  }  int v1preLongs=3;  int v1bytes=(v1preLongs + entries) << 3;  Memory v1mem=new NativeMemory(new byte[v1bytes]);  v1mem.putByte(0,(byte)3);  v1mem.putByte(1,(byte)1);  v1mem.putByte(2,(byte)3);  v1mem.putByte(6,(byte)2);  v1mem.putInt(RETAINED_ENTRIES_INT,entries);  v1mem.putLong(THETA_LONG,thetaLong);  NativeMemory.copy(v3mem,v3preLongs << 3,v1mem,v1preLongs << 3,entries << 3);  return v1mem;}  }
class C{  public Object clone(){  try {    DigitList other=(DigitList)super.clone();    char[] newDigits=new char[digits.length];    System.arraycopy(digits,0,newDigits,0,digits.length);    other.digits=newDigits;    other.tempBuffer=null;    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public Long toLong(){  return Long.valueOf(longValue());}  }
class C{  public TypeNotPresentException(String typeName,Throwable cause){  super("Type " + typeName + " not present",cause);  this.typeName=typeName;}  }
class C{  final static String HMAC_MD5(byte[] key,byte[] text) throws NoSuchAlgorithmException {  MessageDigest md5=MessageDigest.getInstance("MD5");  if (key.length > MD5_BLOCKSIZE) {    key=md5.digest(key);  }  byte[] ipad=new byte[MD5_BLOCKSIZE];  byte[] opad=new byte[MD5_BLOCKSIZE];  byte[] digest;  int i;  for (i=0; i < key.length; i++) {    ipad[i]=key[i];    opad[i]=key[i];  }  for (i=0; i < MD5_BLOCKSIZE; i++) {    ipad[i]^=0x36;    opad[i]^=0x5c;  }  md5.update(ipad);  md5.update(text);  digest=md5.digest();  md5.update(opad);  md5.update(digest);  digest=md5.digest();  StringBuffer digestString=new StringBuffer();  for (i=0; i < digest.length; i++) {    if ((digest[i] & 0x000000ff) < 0x10) {      digestString.append("0" + Integer.toHexString(digest[i] & 0x000000ff));    } else {      digestString.append(Integer.toHexString(digest[i] & 0x000000ff));    }  }  Arrays.fill(ipad,(byte)0);  Arrays.fill(opad,(byte)0);  ipad=null;  opad=null;  return (digestString.toString());}  }
class C{  public static MaterialSlide newInstance(int imageDrawable,String title,String content,int titleTextColor,int contentTextColor){  MaterialSlide materialSlide=new MaterialSlide();  Bundle args=new Bundle();  args.putInt(ARG_DRAWABLE,imageDrawable);  args.putString(ARG_TITLE,title);  args.putString(ARG_CONTENT,content);  args.putInt(ARG_TITLE_TEXT_COLOR,titleTextColor);  args.putInt(ARG_CONTENT_TEXT_COLOR,contentTextColor);  materialSlide.setArguments(args);  return materialSlide;}  }
class C{  public void initOptions(){}  }
class C{  public static void putString(String property,String val){  SIMBRAIN_PREFERENCES.put(property,val);}  }
class C{  public DBObject_ForeignKey_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  @Override public void init(CanvasRenderer canvasRenderer){  canvasRenderer.getRenderer().setBackgroundColor(ColorRGBA.DARK_GRAY);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Jerry lt(int value){  List<Node> result=new NodeList(nodes.length);  int index=0;  for (  Node node : nodes) {    if (index < value) {      result.add(node);    }    index++;  }  return new Jerry(this,result);}  }
class C{  public static void main(String[] args){  TestThrowsHead tester=new TestThrowsHead();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  OpDefNode stringToOpDef(String str){  OpDefNode result=null;  OpDefNode[] allDefs=moduleNode.getOpDefs();  int i=0;  while ((result == null) && (i < allDefs.length)) {    if (str.equals(allDefs[i].getName().toString())) {      result=allDefs[i];    }    i++;  }  return result;}  }
class C{  public void testProcess(){  System.out.println("process");  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.process();  expectLastCall().once();  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  instance.process();  verify(mockAuditCommand);}  }
class C{  public Timer(){  this("unnamed");}  }
class C{  public void addLdc2w(long l){  addOpcode(LDC2_W);  addIndex(constPool.addLongInfo(l));}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public Iterator<T> iterator(){  return orderList.iterator();}  }
class C{  public DifferentialEvolutionSelection(){  super();}  }
class C{  public void refreshStorageSystemStep(StorageSystem system,List<URI> volumeIds,String opId){  log.info("START refreshing system {} {}",system.getLabel(),system.getId());  try {    WorkflowStepCompleter.stepExecuting(opId);    getRemoteMirrorDevice().refreshStorageSystem(system.getId(),volumeIds);  } catch (  Exception e) {    log.warn("Refreshing system step failed",e);  } finally {    WorkflowStepCompleter.stepSucceded(opId);  }  log.info("END refreshing system {} {}",system.getLabel(),system.getId());}  }
class C{  private void replaceQuoteSpans(Spannable spannable){  QuoteSpan[] quoteSpans=spannable.getSpans(0,spannable.length(),QuoteSpan.class);  for (  QuoteSpan quoteSpan : quoteSpans) {    final int start=spannable.getSpanStart(quoteSpan);    final int end=spannable.getSpanEnd(quoteSpan);    final int flags=spannable.getSpanFlags(quoteSpan);    spannable.removeSpan(quoteSpan);    final int barColor=(SettingValues.currentTheme == 1 || SettingValues.currentTheme == 5) ? ContextCompat.getColor(getContext(),R.color.md_blue_600) : ContextCompat.getColor(getContext(),R.color.md_blue_400);    final int BAR_WIDTH=4;    final int GAP=5;    spannable.setSpan(new CustomQuoteSpan(Color.TRANSPARENT,barColor,BAR_WIDTH,GAP),start,end,flags);  }}  }
class C{  @Override public ByteBuffer toMedia(Object object){  return ByteBuffer.wrap(object.toString().getBytes(Charset.defaultCharset()));}  }
class C{  void save(DataOutputStream out,String className) throws IOException {  out.writeInt(DTD.FILE_VERSION);  buildNamesTable();  int numNames=namesVector.size();  out.writeShort((short)(namesVector.size()));  for (int i=0; i < namesVector.size(); i++) {    String nm=namesVector.elementAt(i);    out.writeUTF(nm);  }  saveEntities(out);  out.writeShort((short)(elements.size()));  for (Enumeration<Element> e=elements.elements(); e.hasMoreElements(); ) {    saveElement(out,e.nextElement());  }  if (namesVector.size() != numNames) {    System.err.println("!!! ERROR!  Names were added to the list!");    Thread.dumpStack();    System.exit(1);  }}  }
class C{  public FBResultSetNotUpdatableException(String message){  super(message,SQLStateConstants.SQL_STATE_GENERAL_ERROR);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean isNotification(){  return getOptions().hasObserve();}  }
class C{  public void finish(int resultCode,Bundle results){  if (mAutomaticPerformanceSnapshots) {    endPerformanceSnapshot();  }  if (mPerfMetrics != null) {    results.putAll(mPerfMetrics);  }  if (mUiAutomation != null) {    mUiAutomation.disconnect();    mUiAutomation=null;  }  mThread.finishInstrumentation(resultCode,results);}  }
class C{  private byte readAndCheckByte() throws IOException, EOFException {  int b1=in.read();  if (-1 == b1) {    throw new EOFException();  }  return (byte)b1;}  }
class C{  public Segment loadSegment(long segmentId,long segmentVersion){switch (storage.level()) {case MEMORY:    return loadMemorySegment(segmentId,segmentVersion);case MAPPED:  return loadMappedSegment(segmentId,segmentVersion);case DISK:return loadDiskSegment(segmentId,segmentVersion);default :throw new AssertionError();}}  }
class C{  @NotNull private static FilePath refreshPath(@NotNull FilePath path){  VirtualFile virtualFile=path.getVirtualFile();  if (virtualFile == null) {    return path;  }  return VcsUtil.getFilePath(virtualFile);}  }
class C{  public Plan prepend(Action action){  this.offerFirst(action);  return this;}  }
class C{  @Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){  if (!roundEnv.processingOver()) {    for (    TypeElement te : annotations) {      for (      Element elt : roundEnv.getElementsAnnotatedWith(te)) {        if (!elt.toString().startsWith("com.twitter.heron")) {          env.getMessager().printMessage(Kind.WARNING,String.format("%s extends from a class annotated with %s",elt,te),elt);        }      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.024 -0500",hash_original_method="C4A054C6DC361788E8A02206DAB97797",hash_generated_method="8B729B70D3C5403C9FC935F93F5F2237") public void removeIsdnSubaddress(){  deleteParm(ISUB);}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(){  return new Builder<Comparable>(Ordering.natural()).create();}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.NUMERICAL_UNARY_EXPRESSION;}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  public void testGetErrorCode() throws StunException {  char expectedReturn=(char)(100 * MsgFixture.ERROR_CLASS + MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setErrorClass(MsgFixture.ERROR_CLASS);  errorCodeAttribute.setErrorNumber(MsgFixture.ERROR_NUMBER);  char actualReturn=errorCodeAttribute.getErrorCode();  assertEquals("return value",expectedReturn,actualReturn);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.ARGUMENT_DEFINITION__TYPE:    return basicSetType(null,msgs);case GamlPackage.ARGUMENT_DEFINITION__DEFAULT:  return basicSetDefault(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void createF2L(ActivityFacilities facilities,Network network,String path2File){  writeF2L(getF2L(facilities,network),path2File);}  }
class C{  public static String slurpFileNoExceptions(String filename){  try {    return slurpFile(filename);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void deploy(String path,URL war,boolean update) throws TomcatManagerException, IOException {  deploy(path,war,update,null);}  }
class C{  protected boolean beforeDelete(){  log.info("***");  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.188 -0500",hash_original_method="659A2CB8B4863836C5C292B196F32903",hash_generated_method="60472A76FE7A5B817C24F7714958844A") public boolean isInverseFillType(){  return getTaintBoolean();}  }
class C{  public Box(int axis){  super();  super.setLayout(new BoxLayout(this,axis));}  }
class C{  public static void addRecipe(ItemStack output,Object[] params){  CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(output,params));}  }
class C{  protected static PrivacyRule fromString(String value){  if (value == null) {    return null;  }  PrivacyRule rule=new PrivacyRule();  rule.setType(Type.valueOf(value.toLowerCase()));  return rule;}  }
class C{  public boolean isAnimate(){  return mAnimate;}  }
class C{  public boolean isSetEchoReply(){  return this.echoReply != null;}  }
class C{  public boolean isRowChecked(int row){  int keyColumn=this.getKeyColumnIndex();  if (keyColumn < 0)   return false;  Object data=getValueAt(row,convertColumnIndexToView(keyColumn));  if (data instanceof IDColumn)   return ((IDColumn)data).isSelected(); else   if (data instanceof Boolean)   return (Boolean)data;  return false;}  }
class C{  private void save(File file){  if (file != null) {    frame.setTitle(file.getName());    WorkspaceSerializer.save(file,workspace);  }}  }
class C{  public HKDFParameters(final byte[] ikm,final byte[] salt,final byte[] info){  this(ikm,false,salt,info);}  }
class C{  public static String unicode2xml(final String text,final boolean amp){  return unicode2html(text,amp,false);}  }
class C{  public void executeAndWait(String cmd){  ExecutorService executorService=Executors.newFixedThreadPool(2);  Process process=null;  try {    process=Runtime.getRuntime().exec(cmd);    Future<?> osFuture=executorService.submit(new ProcessOutputReader(process.getInputStream()));    Future<?> esFuture=executorService.submit(new ProcessOutputReader(process.getErrorStream()));    process.waitFor();    osFuture.get();    esFuture.get();  } catch (  Exception e) {    throw new CargoException("Error invoking command!",e);  } finally {    executorService.shutdown();  }}  }
class C{  public String writeToString(Node nodeArg) throws DOMException, LSException {  if (nodeArg == null) {    return null;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,"UTF-16");    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  StringWriter output=new StringWriter();  try {    serializer.setWriter(output);    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return output.toString();}  }
class C{  public static float encode(float upper,float lower){  int upquant=(int)(upper * 255), lowquant=(int)(lower * 255);  return (float)(upquant * 256 + lowquant);}  }
class C{  private void postInitialize(){  if (getRemainingBytes() >= 9) {    decodeHeader();  }  if (file != null) {  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append(hueLower);  sb.append(",");  sb.append(hueUpper);  sb.append(",");  sb.append(saturationLower);  sb.append(",");  sb.append(saturationUpper);  sb.append(",");  sb.append(brightnessLower);  sb.append(",");  sb.append(brightnessUpper);  sb.append(",");  sb.append(reverseHue);  sb.append("}");  return sb.toString();}  }
class C{  public boolean hasPossibleStaticMethod(String name,Expression arguments){  return ClassNodeUtils.hasPossibleStaticMethod(this,name,arguments,false);}  }
class C{  public void addSettings(Map<String,Object> settings){  if (null == this.settings) {    this.settings=new HashMap<String,Object>(settings.size());  }  this.settings.putAll(settings);}  }
class C{  public Boolean isCreateParentDirectories(){  return createParentDirectories;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireCommentEvent(ch,start,length);}  }
class C{  public static double quadTreeCellSize(int level){  assert level >= 0;  return Math.sqrt(EARTH_POLAR_DISTANCE * EARTH_POLAR_DISTANCE + EARTH_EQUATOR * EARTH_EQUATOR) / (1L << level);}  }
class C{  SessionTask(long scheduleNext){  delayBeforeNext=scheduleNext;  taskid=taskcount++;}  }
class C{  private void printClass(TypeElement typeElement){  printClass(typeElement,null);}  }
class C{  protected void error(String s){  err.println(s);}  }
class C{  public static String shortnameToUnicode(String input,boolean removeIfUnsupported){  Matcher matcher=SHORTNAME_PATTERN.matcher(input);  boolean supported=Build.VERSION.SDK_INT >= 16;  while (matcher.find()) {    String unicode=_shortNameToUnicode.get(matcher.group(1));    if (unicode == null) {      continue;    }    if (supported) {      input=input.replace(":" + matcher.group(1) + ":",unicode);    } else     if (!supported && removeIfUnsupported) {      input=input.replace(":" + matcher.group(1) + ":","");    }  }  return input;}  }
class C{  public void testIssue10Exception() throws Exception {  RuntimeException re=null;  try {    BufferedImage image2D=ImageIO.read(getClass().getResourceAsStream("test_issue10.jpg"));    DimensionConstrain dc=DimensionConstrain.createAbsolutionDimension(50,50);    BufferedImage out=new BufferedImage(50,50,BufferedImage.TYPE_INT_ARGB);    ResampleOp resampleOp=new ResampleOp(dc);    BufferedImage rescaledTomato=resampleOp.filter(image2D,out);  } catch (  RuntimeException e) {    re=e;  }  assertNotNull("ISL should throw an exception since out image is not compatible",re);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public HelpOverviewDialog(JFrame owner,String title,String file,Image icon){  super(owner,title,true);  setFile(file);  if (icon != null) {    try {      this.setIconImage(icon);    } catch (    NoSuchMethodError nsme) {    }  }  getContentPane().setLayout(new BorderLayout());  initPanel();  setLocationRelativeTo(owner);}  }
class C{  public void showMapLayerDialog(){  new MapLayerDialogFragment().show(getSupportFragmentManager(),MapLayerDialogFragment.MAP_LAYER_DIALOG_TAG);}  }
class C{  private void removeUserDefinedButtons(){  for (  JButton button : commandButtons.keySet()) {    buttonPane.remove(button);    buttonPane2.remove(button);    clearShortcut(button);  }  commandButtons.clear();  for (  JButton button : timeoutButtons.keySet()) {    buttonPane.remove(button);    clearShortcut(button);  }  timeoutButtons.clear();}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  public void addPart(String key,Object value){  jsonParams.put(key,value);}  }
class C{  public int read() throws IOException {  return (read(scratch,0,1) != -1) ? scratch[0] & 0xff : -1;}  }
class C{  public synchronized Enumeration<TestFailure> failures(){  return Collections.enumeration(fFailures);}  }
class C{  private void clearFlags(){  fCarry=fOverflow=fSign=fZero=fParity=fAuxiliary=fTrap=fDirection=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.669 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void stop(boolean cancel){}  }
class C{  public void resolve(TemplateBuffer buffer,TemplateContext context) throws MalformedTreeException, BadLocationException {  Assert.isNotNull(context);  TemplateVariable[] variables=buffer.getVariables();  List positions=variablesToPositions(variables);  List edits=new ArrayList(5);  for (int i=0; i != variables.length; i++) {    TemplateVariable variable=variables[i];    if (!variable.isResolved())     resolve(variable,context);    String value=variable.getDefaultValue();    int[] offsets=variable.getOffsets();    for (int k=0; k != offsets.length; k++)     edits.add(new ReplaceEdit(offsets[k],variable.getInitialLength(),value));  }  Document document=new WorkerDocument(buffer.getString());  MultiTextEdit edit=new MultiTextEdit(0,document.getLength());  edit.addChildren((TextEdit[])positions.toArray(new TextEdit[positions.size()]));  edit.addChildren((TextEdit[])edits.toArray(new TextEdit[edits.size()]));  edit.apply(document,TextEdit.UPDATE_REGIONS);  positionsToVariables(positions,variables);  buffer.setContent(document.get(),variables);}  }
class C{  final void assertionError(String message){  StringBuilder b=new StringBuilder();  if (cdl.getCount() != 0) {    b.append("(active) ");  }  b.append(message);  List<Throwable> err=errors;  if (!err.isEmpty()) {    b.append(" (+ ").append(err.size()).append(" errors)");  }  b.append("; values = ").append(volatileSize);  AssertionError e=new AssertionError(b.toString());  for (  Throwable t : err) {    e.addSuppressed(t);  }  throw e;}  }
class C{  public String toString(){  if (m_Classifiers.length == 0) {    return "Stacking: No base schemes entered.";  }  if (m_MetaClassifier == null) {    return "Stacking: No meta scheme selected.";  }  if (m_MetaFormat == null) {    return "Stacking: No model built yet.";  }  String result="Stacking\n\nBase classifiers\n\n";  for (int i=0; i < m_Classifiers.length; i++) {    result+=getClassifier(i).toString() + "\n\n";  }  result+="\n\nMeta classifier\n\n";  result+=m_MetaClassifier.toString();  return result;}  }
class C{  public RegisterOperand makeTempDouble(){  return new RegisterOperand(getDouble(),TypeReference.Double);}  }
class C{  public ServerLoadData fetchLoadProbe(){  ServerLoadProbe probe=cacheServer.getLoadProbe();  ServerLoad load=probe.getLoad(new ServerMetricsImpl(cacheServer.getMaxConnections()));  ServerLoadData data=new ServerLoadData(load.getConnectionLoad(),load.getSubscriptionConnectionLoad(),load.getLoadPerConnection(),load.getLoadPerSubscriptionConnection());  return data;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node employeeNode;  Node textNode;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("em");  employeeNode=elementList.item(1);  textNode=employeeNode.getFirstChild();  childList=textNode.getChildNodes();  length=(int)childList.getLength();  assertEquals("length_zero",0,length);}  }
class C{  public void testComplexNamespacePublicDependency() throws Exception {  FileDescriptorProto fooProto=FileDescriptorProto.newBuilder().setName("bar.proto").setPackage("a.b.c.d.bar.shared").addEnumType(EnumDescriptorProto.newBuilder().setName("MyEnum").addValue(EnumValueDescriptorProto.newBuilder().setName("BLAH").setNumber(1))).build();  FileDescriptorProto barProto=FileDescriptorProto.newBuilder().setName("foo.proto").addDependency("bar.proto").setPackage("a.b.c.d.foo.shared").addMessageType(DescriptorProto.newBuilder().setName("MyMessage").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_REPEATED).setTypeName("bar.shared.MyEnum").setName("MyField").setNumber(1))).build();  FileDescriptor fooFile=Descriptors.FileDescriptor.buildFrom(fooProto,new FileDescriptor[0]);  FileDescriptor barFile=Descriptors.FileDescriptor.buildFrom(barProto,new FileDescriptor[]{fooFile});  assertNotNull(barFile);  List<Descriptor> msglist=barFile.getMessageTypes();  assertNotNull(msglist);  assertTrue(msglist.size() == 1);  Descriptor desc=msglist.get(0);  if (desc.getName().equals("MyMessage")) {    assertNotNull(desc.getFields());    List<FieldDescriptor> fieldlist=desc.getFields();    assertNotNull(fieldlist);    assertTrue(fieldlist.size() == 1);    FieldDescriptor field=fieldlist.get(0);    assertTrue(field.getType() == FieldDescriptor.Type.ENUM);    assertTrue(field.getEnumType().getName().equals("MyEnum"));    assertTrue(field.getEnumType().getFile().getName().equals("bar.proto"));    assertTrue(field.getEnumType().getFile().getPackage().equals("a.b.c.d.bar.shared"));  }}  }
class C{  public static PpsData parsePpsNalUnit(ParsableBitArray data){  int picParameterSetId=data.readUnsignedExpGolombCodedInt();  int seqParameterSetId=data.readUnsignedExpGolombCodedInt();  data.skipBits(1);  boolean bottomFieldPicOrderInFramePresentFlag=data.readBit();  return new PpsData(picParameterSetId,seqParameterSetId,bottomFieldPicOrderInFramePresentFlag);}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void sendMail(String emailAddress,EmailType type,Object[] params,Marketplace marketplace,String locale) throws MailOperationException, ValidationException {  BLValidator.isEmail("emailAddress",emailAddress,true);  String subject=getText(locale,type.toString() + RESOURCE_SUBJECT,params,marketplace);  String text=getText(locale,type.toString() + RESOURCE_TEXT,params,marketplace);  List<String> to=new ArrayList<String>();  to.add(emailAddress);  sendMail(to,subject,text,locale);}  }
class C{  public static Geo[] LLaToGa(double[] lla,boolean isDegrees){  Geo[] r=new Geo[lla.length / 2];  for (int i=0; i < lla.length / 2; i++) {    if (isDegrees) {      r[i]=Geo.makeGeoDegrees(lla[i * 2],lla[i * 2 + 1]);    } else {      r[i]=Geo.makeGeoRadians(lla[i * 2],lla[i * 2 + 1]);    }  }  return r;}  }
class C{  public void testReadObject() throws Exception {  String secret="secret string";  SealedObject so=new SealedObject(secret,new NullCipher());  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  oos.writeObject(so);  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));  SealedObject so_des=(SealedObject)ois.readObject();  assertEquals("The secret content of deserialized object " + "should be equal to the secret content of initial object",secret,so_des.getObject(new NullCipher()));  assertEquals("The value returned by getAlgorithm() method of " + "deserialized object should be equal to the value returned " + "by getAlgorithm() method of initial object",so.getAlgorithm(),so_des.getAlgorithm());}  }
class C{  public void showAddListItemDialog(View view){  DialogFragment dialog=AddListItemDialogFragment.newInstance(mShoppingList,mListId,mEncodedEmail,mSharedWithUsers);  dialog.show(getFragmentManager(),"AddListItemDialogFragment");}  }
class C{  @ValidationErrorPage(value="view") @Action(value="/revPetition-recordObjectionOutcome") public String recordObjectionOutcome(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | recordObjectionOutcome | start " + objection);  if (hasErrors())   return "view";  if (WFLOW_ACTION_STEP_APPROVE.equalsIgnoreCase(workFlowAction)) {    objection.setEgwStatus(egwStatusDAO.getStatusByModuleAndCode(PropertyTaxConstants.OBJECTION_MODULE,PropertyTaxConstants.OBJECTION_ACCEPTED));    objection.getBasicProperty().getProperty().setStatus(STATUS_ISHISTORY);    objection.getProperty().setStatus(STATUS_ISACTIVE);    objection.getBasicProperty().addPropertyStatusValues(propService.createPropStatVal(objection.getBasicProperty(),REVISIONPETITION_STATUS_CODE,null,null,null,null,null));    propService.setWFPropStatValActive(objection.getBasicProperty());  }  updateStateAndStatus(objection);  revisionPetitionService.updateRevisionPetition(objection);  sendEmailandSms(objection,REVISION_PETITION_ENDORESEMENTGENERATED);  addActionMessage(getText("objection.outcome.success"));  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | recordObjectionOutcome | End " + objection);  return STRUTS_RESULT_MESSAGE;}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMXBLElement(prefix,(AbstractDocument)doc);}  }
class C{  private void incrementIndex(){  index++;  if (index >= actions.size()) {    index=0;  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public static void checkFieldRange(final long value,final long minimum,final long maximum,final String fieldName){  checkFieldRange(value,minimum,maximum,"",fieldName);}  }
class C{  public static boolean isAnnotation(FormObject formObject){  if (formObject.getParameterConstant(PdfDictionary.Type) == PdfDictionary.Annot) {    return true;  }switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {case PdfDictionary.Text:case PdfDictionary.Link:case PdfDictionary.FreeText:case PdfDictionary.Line:case PdfDictionary.Square:case PdfDictionary.Circle:case PdfDictionary.Polygon:case PdfDictionary.PolyLine:case PdfDictionary.Highlight:case PdfDictionary.Underline:case PdfDictionary.Squiggly:case PdfDictionary.StrickOut:case PdfDictionary.Stamp:case PdfDictionary.Caret:case PdfDictionary.Ink:case PdfDictionary.Popup:case PdfDictionary.FileAttachment:case PdfDictionary.Sound:case PdfDictionary.Movie:case PdfDictionary.Widget:case PdfDictionary.Screen:case PdfDictionary.PrinterMark:case PdfDictionary.TrapNet:case PdfDictionary.Watermark:case PdfDictionary.THREE_D:case PdfDictionary.RichMedia:case PdfDictionary.Projection:    return true;default :  return false;}}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createComputeImage(ComputeImageCreate param){  log.info("createComputeImage");  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  checkDuplicateLabel(ComputeImage.class,param.getName());  ArgValidator.checkFieldNotEmpty(param.getImageUrl(),"image_url");  ArgValidator.checkUrl(param.getImageUrl(),"image_url");  if (!checkForImageServers()) {    throw APIException.badRequests.cannotAddImageWithoutImageServer();  }  ComputeImage ci=new ComputeImage();  ci.setId(URIUtil.createId(ComputeImage.class));  ci.setComputeImageStatus(ComputeImageStatus.IN_PROGRESS.name());  ci.setLabel(param.getName());  ci.setImageUrl(encryptImageURLPassword(param.getImageUrl(),false));  _dbClient.createObject(ci);  auditOp(OperationTypeEnum.CREATE_COMPUTE_IMAGE,true,AuditLogManager.AUDITOP_BEGIN,ci.getId().toString(),ci.getImageUrl(),ci.getComputeImageStatus());  try {    return doImportImage(ci);  } catch (  Exception e) {    ci.setComputeImageStatus(ComputeImageStatus.NOT_AVAILABLE.name());    _dbClient.updateObject(ci);    throw e;  }}  }
class C{  protected boolean isRetrieveResources(){  AVList params=(AVList)this.getValue(AVKey.CONSTRUCTION_PARAMETERS);  if (params == null)   return false;  Boolean b=(Boolean)params.getValue(AVKey.RETRIEVE_PROPERTIES_FROM_SERVICE);  return b != null && b;}  }
