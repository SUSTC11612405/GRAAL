class C{  public List<VerletParticle2D> createParticles(VerletPhysics2D physics,int subDiv,float step,float mass){  particles.clear();  for (  Vec2D v : toLineStrip2D(subDiv).getDecimatedVertices(step,true)) {    VerletParticle2D p=createSingleParticle(v,mass);    particles.add(p);    physics.addParticle(p);  }  return particles;}  }
class C{  public String toString(){  return Boolean.toString(get());}  }
class C{  public CFG(method_info m){  this.method=m;  this.sentinel=new Instruction_Nop();  this.sentinel.next=m.instructions;  m.instructions.prev=this.sentinel;  eliminateJsrRets();  buildBBCFG();  cfg.beginCode=true;  m.cfg=this;  if (cfg != null)   firstInstruction=cfg.head; else   firstInstruction=null;}  }
class C{  public static void addShareAcl(String aclURL,ShareACLForm shareACL,String formAccessControlList){  String fileSystem=null;  String shareName=null;  if (StringUtils.isNotBlank(aclURL)) {    String[] parts=aclURL.split("/");    if (parts.length == 7) {      fileSystem=parts[3];      shareName=parts[5];    }  }  if (formAccessControlList == null || "".equals(formAccessControlList)) {    flash.error(MessagesUtils.get("resources.filesystem.share.acl.invalid.name"),null);    listAcl(fileSystem,shareName);  }  FileCifsShareACLUpdateParams input=createCifsShareAclParams(formAccessControlList);  ViPRCoreClient client=BourneUtil.getViprClient();  try {    client.fileSystems().updateShareACL(uri(fileSystem),shareName,input);  } catch (  ServiceErrorException e) {    flash.error(e.getMessage(),null);    listAcl(fileSystem,shareName);  }  flash.success(MessagesUtils.get(ADDED));  listAcl(fileSystem,shareName);}  }
class C{  public App(){}  }
class C{  public void visitTypeArgument(){}  }
class C{  @MediumTest public void testBindable(){  Intent startIntent=new Intent();  startIntent.setClass(getContext(),LocalService.class);  IBinder service=bindService(startIntent);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ParseException(String message){  super(message);}  }
class C{  public void testMac11() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException, ShortBufferException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    byte[] res1=macs[i].doFinal();    byte[] res2=new byte[res1.length + 10];    macs[i].doFinal(res2,0);    for (int j=0; j < res1.length; j++) {      assertEquals("Not equals byte number: ".concat(Integer.toString(j)),res1[j],res2[j]);    }  }}  }
class C{  public static boolean serializeSpecToFile(SecuritySpecModel spec,String androidProjectRootPath){  boolean saved=false;  String fileName=androidProjectRootPath + File.separator + Project.OUTPUT_DIR+ File.separator+ SECURITY_SPEC_SERIAL_FILE_NAME;  try {    ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));    try {      oos.writeObject(spec);      saved=true;    }  finally {      oos.close();    }  } catch (  Exception ex) {    ex.printStackTrace();  }  return saved;}  }
class C{  public static String stringFor(int m){switch (m) {case cudaResViewFormatNone:    return "cudaResViewFormatNone";case cudaResViewFormatUnsignedChar1:  return "cudaResViewFormatUnsignedChar1";case cudaResViewFormatUnsignedChar2:return "cudaResViewFormatUnsignedChar2";case cudaResViewFormatUnsignedChar4:return "cudaResViewFormatUnsignedChar4";case cudaResViewFormatSignedChar1:return "cudaResViewFormatSignedChar1";case cudaResViewFormatSignedChar2:return "cudaResViewFormatSignedChar2";case cudaResViewFormatSignedChar4:return "cudaResViewFormatSignedChar4";case cudaResViewFormatUnsignedShort1:return "cudaResViewFormatUnsignedShort1";case cudaResViewFormatUnsignedShort2:return "cudaResViewFormatUnsignedShort2";case cudaResViewFormatUnsignedShort4:return "cudaResViewFormatUnsignedShort4";case cudaResViewFormatSignedShort1:return "cudaResViewFormatSignedShort1";case cudaResViewFormatSignedShort2:return "cudaResViewFormatSignedShort2";case cudaResViewFormatSignedShort4:return "cudaResViewFormatSignedShort4";case cudaResViewFormatUnsignedInt1:return "cudaResViewFormatUnsignedInt1";case cudaResViewFormatUnsignedInt2:return "cudaResViewFormatUnsignedInt2";case cudaResViewFormatUnsignedInt4:return "cudaResViewFormatUnsignedInt4";case cudaResViewFormatSignedInt1:return "cudaResViewFormatSignedInt1";case cudaResViewFormatSignedInt2:return "cudaResViewFormatSignedInt2";case cudaResViewFormatSignedInt4:return "cudaResViewFormatSignedInt4";case cudaResViewFormatHalf1:return "cudaResViewFormatHalf1";case cudaResViewFormatHalf2:return "cudaResViewFormatHalf2";case cudaResViewFormatHalf4:return "cudaResViewFormatHalf4";case cudaResViewFormatFloat1:return "cudaResViewFormatFloat1";case cudaResViewFormatFloat2:return "cudaResViewFormatFloat2";case cudaResViewFormatFloat4:return "cudaResViewFormatFloat4";case cudaResViewFormatUnsignedBlockCompressed1:return "cudaResViewFormatUnsignedBlockCompressed1";case cudaResViewFormatUnsignedBlockCompressed2:return "cudaResViewFormatUnsignedBlockCompressed2";case cudaResViewFormatUnsignedBlockCompressed3:return "cudaResViewFormatUnsignedBlockCompressed3";case cudaResViewFormatUnsignedBlockCompressed4:return "cudaResViewFormatUnsignedBlockCompressed4";case cudaResViewFormatSignedBlockCompressed4:return "cudaResViewFormatSignedBlockCompressed4";case cudaResViewFormatUnsignedBlockCompressed5:return "cudaResViewFormatUnsignedBlockCompressed5";case cudaResViewFormatSignedBlockCompressed5:return "cudaResViewFormatSignedBlockCompressed5";case cudaResViewFormatUnsignedBlockCompressed6H:return "cudaResViewFormatUnsignedBlockCompressed6H";case cudaResViewFormatSignedBlockCompressed6H:return "cudaResViewFormatSignedBlockCompressed6H";case cudaResViewFormatUnsignedBlockCompressed7:return "cudaResViewFormatUnsignedBlockCompressed7";}return "INVALID cudaResourceViewFormat: " + m;}  }
class C{  public double measureNumAttributesSelected(){  return m_numAttributesSelected;}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  public Class GetClass(){  if (!OptionInstance) {    return (Class)PlugInObject;  }  return null;}  }
class C{  public final CharSequence tail(CharSequence csq){  return csq.subSequence(index,csq.length());}  }
class C{  private static int leastPowerOf2(int n){  n--;  n|=n >> 1;  n|=n >> 2;  n|=n >> 4;  n|=n >> 8;  n|=n >> 16;  n++;  return n;}  }
class C{  @Deprecated public static boolean isClassResource(String resourceName){  return DescriptorFactory.isClassResource(resourceName);}  }
class C{  DHPublicKey(BigInteger y,BigInteger p,BigInteger g) throws InvalidKeyException {  this(y,p,g,0);}  }
class C{  private void tryBackgroundEnter(){  if (mBackground == null) {    mBackground=new RippleBackground(this,mHotspotBounds);  }  final int color=mColor.getColorForState(getState(),Color.TRANSPARENT);  mBackground.setup(mMaxRadius,color,mDensity);  mBackground.enter();}  }
class C{  public void loadMarkdown(String txt){  loadMarkdown(txt,null);}  }
class C{  public FetchCommand createFetchCommand(){  FetchCommand command=new FetchCommand(repository,gitSshScriptProvider,credentialsLoader,gitAskPassScript);  command.setLineConsumerFactory(gitOutputPublisherFactory);  return command;}  }
class C{  @Override public void close(){}  }
class C{  public static <E,B extends MutableBag<E>>SynchronizedBag<E> of(B bag,Object lock){  return new SynchronizedBag<>(bag,lock);}  }
class C{  private ServiceConfig config(){  return new ServiceBuilderImpl(this);}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  protected void assertMessagesAreReceived() throws JMSException {  waitForMessagesToBeDelivered();  assertMessagesReceivedAreValid(messages);}  }
class C{  public void mouseEntered(MouseEvent e){  events.clear();}  }
class C{  public ResourceBundleUtil(String baseName,Locale locale){  this.locale=locale;  this.baseName=baseName;  this.resource=ResourceBundle.getBundle(baseName,locale);}  }
class C{  public StringBand append(double d){  return append(Double.toString(d));}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){  LOG.d(TAG,"Incoming Result. Request code = " + requestCode);  super.onActivityResult(requestCode,resultCode,intent);  CordovaPlugin callback=this.activityResultCallback;  if (callback == null && initCallbackClass != null) {    callback=appView.pluginManager.getPlugin(initCallbackClass);  }  initCallbackClass=null;  activityResultCallback=null;  if (callback != null) {    LOG.d(TAG,"We have a callback to send this result to");    callback.onActivityResult(requestCode,resultCode,intent);  } else {    LOG.w(TAG,"Got an activity result, but no plugin was registered to receive it.");  }}  }
class C{  @Override public void switchMemory(String database,boolean isSchema){  RECREATE_DATABASE=false;  shutdown();  restore(database,isSchema);}  }
class C{  protected void storeState(){  System.arraycopy(intervals,0,storedIntervals,0,intervals.length);  System.arraycopy(lineageCounts,0,storedLineageCounts,0,lineageCounts.length);  storedIntervalsKnown=intervalsKnown;  storedIntervalCount=intervalCount;  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  static void testFailLoadAndGc() throws TestFailed {  try {    BrokenDexLoader loader;    loader=new BrokenDexLoader(ClassLoader.getSystemClassLoader());    loader.findBrokenClass();    System.err.println("ERROR: Inaccessible was accessible");  } catch (  InvocationTargetException ite) {    Throwable cause=ite.getCause();    if (cause instanceof NullPointerException) {      System.err.println("Got expected ITE/NPE");    } else {      System.err.println("Got unexpected ITE");      ite.printStackTrace();    }  }}  }
class C{  public synchronized void stop(){  if (!mStarted) {    return;  }  if (mRtpReceiver != null) {    mRtpReceiver.stopSession();  }  if (mRtpDummySender != null) {    mRtpDummySender.stopSession();  }  if (mRtpOutput != null) {    mRtpOutput.close();  }  mSurface.clearImage();  mStarted=false;  mVideoStartTime=0L;  mEventListener.onPlayerStopped();}  }
class C{  public void fling(int velocityY){  if (getChildCount() > 0) {    int height=getHeight() - mPaddingBottom - mPaddingTop;    int bottom=getChildAt(0).getHeight();    mScroller.fling(mScrollX,mScrollY,0,velocityY,0,0,0,Math.max(0,bottom - height),0,height / 2);    if (mFlingStrictSpan == null) {      mFlingStrictSpan=StrictMode.enterCriticalSpan("ScrollView-fling");    }    postInvalidateOnAnimation();  }}  }
class C{  public static void write(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float rotateAngle,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ELLIPSE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ELLIPSE);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeFloat(rotateAngle);  properties.write(dos);}  }
class C{  void addNewComponent(Container container,JComponent component,int index,int gridx,int gridy,int gridwidth,int gridheight,double weightx,double weighty,int fill){  addNewComponent(container,component,index,gridx,gridy,gridwidth,gridheight,weightx,weighty,fill,null);}  }
class C{  public static MappedPropertyParseResult parseMappedProperty(String property){  int indexFirstDoubleQuote=property.indexOf("\"");  int indexFirstSingleQuote=property.indexOf("'");  int startArg;  if ((indexFirstSingleQuote == -1) && (indexFirstDoubleQuote == -1)) {    return null;  }  if ((indexFirstSingleQuote != -1) && (indexFirstDoubleQuote != -1)) {    if (indexFirstSingleQuote < indexFirstDoubleQuote) {      startArg=indexFirstSingleQuote;    } else {      startArg=indexFirstDoubleQuote;    }  } else   if (indexFirstSingleQuote != -1) {    startArg=indexFirstSingleQuote;  } else {    startArg=indexFirstDoubleQuote;  }  int indexLastDoubleQuote=property.lastIndexOf("\"");  int indexLastSingleQuote=property.lastIndexOf("'");  int endArg;  if ((indexLastSingleQuote == -1) && (indexLastDoubleQuote == -1)) {    return null;  }  if ((indexLastSingleQuote != -1) && (indexLastDoubleQuote != -1)) {    if (indexLastSingleQuote > indexLastDoubleQuote) {      endArg=indexLastSingleQuote;    } else {      endArg=indexLastDoubleQuote;    }  } else   if (indexLastSingleQuote != -1) {    if (indexLastSingleQuote == indexFirstSingleQuote) {      return null;    }    endArg=indexLastSingleQuote;  } else {    if (indexLastDoubleQuote == indexFirstDoubleQuote) {      return null;    }    endArg=indexLastDoubleQuote;  }  String argument=property.substring(startArg + 1,endArg);  String splitDots[]=property.split("[\\.]");  if (splitDots.length == 0) {    return null;  }  int indexMethod=-1;  for (int i=0; i < splitDots.length; i++) {    if (splitDots[i].contains("(")) {      indexMethod=i;      break;    }  }  if (indexMethod == -1) {    return null;  }  String method=splitDots[indexMethod];  int indexParan=method.indexOf("(");  method=method.substring(0,indexParan);  if (method.length() == 0) {    return null;  }  if (splitDots.length == 1) {    return new MappedPropertyParseResult(null,method,argument);  }  StringBuilder clazz=new StringBuilder();  for (int i=0; i < indexMethod; i++) {    if (i > 0) {      clazz.append('.');    }    clazz.append(splitDots[i]);  }  return new MappedPropertyParseResult(clazz.toString(),method,argument);}  }
class C{  public Vec4[] computeViewLookAtContainingExtents(Globe globe,double verticalExaggeration,View view){  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (view == null) {    String message=Logging.getMessage("nullValue.ViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 eye=view.getEyePoint();  Vec4 center=view.getCenterPoint();  Vec4 up=view.getUpVector();  if (center == null)   center=eye.add3(view.getForwardVector());  return this.computeViewLookAtContainingExtents(globe,verticalExaggeration,eye,center,up,view.getFieldOfView(),view.getViewport(),view.getNearClipDistance(),view.getFarClipDistance());}  }
class C{  private double[] lsolve(double[][] A,double[] b){  int N=b.length;  for (int p=0; p < N; p++) {    int max=p;    for (int i=p + 1; i < N; i++) {      if (Math.abs(A[i][p]) > Math.abs(A[max][p])) {        max=i;      }    }    double[] temp=A[p];    A[p]=A[max];    A[max]=temp;    double t=b[p];    b[p]=b[max];    b[max]=t;    if (Math.abs(A[p][p]) <= Settings.EPS) {      throw new RuntimeException("Matrix is singular or nearly singular");    }    for (int i=p + 1; i < N; i++) {      double alpha=A[i][p] / A[p][p];      b[i]-=alpha * b[p];      for (int j=p; j < N; j++) {        A[i][j]-=alpha * A[p][j];      }    }  }  double[] x=new double[N];  for (int i=N - 1; i >= 0; i--) {    double sum=0.0;    for (int j=i + 1; j < N; j++) {      sum+=A[i][j] * x[j];    }    x[i]=(b[i] - sum) / A[i][i];  }  return x;}  }
class C{  public void minimumChanged(double value){  colorMap.setRange(value,colorMap.getMaximum());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("TranslationTable[");  sb.append(m_trlTableName).append("(").append(m_baseTableName).append(")");  for (int i=0; i < m_columns.size(); i++)   sb.append("-").append(m_columns.get(i));  sb.append("]");  return sb.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected int checkMatchQuality(MapEntity entity){  int matchLevel=getMatchLevel(entity);  int result=-1;  if (matchLevel < 5) {    if (matchLevel < currMatchLevel)     result=1; else     if (matchLevel == currMatchLevel) {      result=0;    }  }  return result;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return returnNode(next);}  }
class C{  public static boolean hasNDigits(String password,int n){  int numberOfDigits=0;  for (int i=0; i < password.length(); i++) {    if (Character.isDigit(password.charAt(i))) {      numberOfDigits++;    }    if (numberOfDigits >= n) {      return true;    }  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STATE___STATE_NAME_1:    return STATE_NAME_1_EDEFAULT == null ? stateName_1 != null : !STATE_NAME_1_EDEFAULT.equals(stateName_1);case UmplePackage.STATE___STATE_INTERNAL_1:  return stateInternal_1 != null && !stateInternal_1.isEmpty();case UmplePackage.STATE___FINAL_1:return final_1 != FINAL_1_EDEFAULT;case UmplePackage.STATE___ANONYMOUS_STATE_11:return anonymous_state_1_1 != null && !anonymous_state_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected Iterable<JavaFileObject> wrap(Iterable<JavaFileObject> fileObjects){  List<JavaFileObject> mapped=new ArrayList<JavaFileObject>();  for (  JavaFileObject fileObject : fileObjects)   mapped.add(wrap(fileObject));  return Collections.unmodifiableList(mapped);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{taskId}/resume") @CheckPermission(roles={Role.TENANT_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},acls={ACL.OWN,ACL.ALL}) public Response resumeTask(@PathParam("taskId") URI taskId){  Task task=queryResource(taskId);  if (task.getTenant().equals(TenantOrg.SYSTEM_TENANT)) {    verifySystemAdmin();  } else {    verifyUserHasAccessToTenants(Lists.newArrayList(task.getTenant()));  }  Workflow workflow=validateWorkflow(task);  String opId=UUID.randomUUID().toString();  WorkflowService.initTaskStatus(_dbClient,workflow,opId,Operation.Status.pending,ResourceOperationTypeEnum.WORKFLOW_RESUME);  getWorkflowController().resumeWorkflow(workflow.getId(),opId.toString());  return Response.ok().build();}  }
class C{  public String toString(){  return super.toString() + "Certificate Issuer [\n" + String.valueOf(names)+ "]\n";}  }
class C{  public static final void fillRectangleFromCenter(GL2 gl,double cx,double cy,double w,double h){  double w2=w * 0.5;  double h2=h * 0.5;  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(cx - w2,cy + h2);  gl.glVertex2d(cx + w2,cy + h2);  gl.glVertex2d(cx + w2,cy - h2);  gl.glVertex2d(cx - w2,cy - h2);  gl.glEnd();}  }
class C{  public void note(Element e,String msg){  messager.printMessage(Diagnostic.Kind.NOTE,msg,e);}  }
class C{  public int size(){  return size;}  }
class C{  public String equationsToString(NumberFormat nf){  return equationsToString("",nf);}  }
class C{  @Override public int clusterInstance(Instance instance) throws Exception {  CNode host=m_cobwebTree;  CNode temp=null;  determineNumberOfClusters();  do {    if (host.m_children == null) {      temp=null;      break;    }    temp=host.findHost(instance,true);    if (temp != null) {      host=temp;    }  } while (temp != null);  return host.m_clusterNum;}  }
class C{  public SERVICE_FORMATTED(String className){  super("application/x-java-jvm-local-objectref",className);}  }
class C{  public void observe(ObservableList<Node> nodes){  nodes.forEach(null);  nodes.addListener(this);}  }
class C{  public static void disableConnectionReuseIfNecessary(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {    System.setProperty("http.keepAlive","false");  }}  }
class C{  @Override public void createFont(final PdfObject pdfObject,final String fontID,final boolean renderPage,final ObjectStore objectStore,final Map<String,org.jpedal.fonts.glyph.PdfJavaGlyphs> substitutedFonts) throws Exception {  fontTypes=StandardFonts.CIDTYPE2;  this.fontID=fontID;  final PdfObject Descendent=pdfObject.getDictionary(PdfDictionary.DescendantFonts);  final PdfObject pdfFontDescriptor=Descendent.getDictionary(PdfDictionary.FontDescriptor);  createCIDFont(pdfObject,Descendent);  if (pdfFontDescriptor != null) {    final byte[] stream;    final PdfObject FontFile2=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile2);    if (FontFile2 != null) {      stream=currentPdfFile.readStream(FontFile2,true,true,false,false,false,FontFile2.getCacheName(currentPdfFile.getObjectReader()));      if (stream != null) {        readEmbeddedFont(stream,null,hasEncoding);      }    }  }  final boolean isCorrupt=glyphs.isCorrupted();  if (glyphs.isCorrupted()) {    final PdfFontFactory pdfFontFactory=new PdfFontFactory(currentPdfFile);    pdfFontFactory.getFontSub(getBaseFontName());    isFontEmbedded=false;    substituteFontFile=pdfFontFactory.getMapFont();    if (substituteFontFile == null) {      glyphs.setFontEmbedded(false);      init(fontID,renderPage);    }  }  if (renderPage && !isFontEmbedded && substituteFontFile != null) {    this.substituteFontUsed(substituteFontFile);    isFontSubstituted=true;    this.isFontEmbedded=true;    glyphs.setFontEmbedded(true);  }  if (renderPage) {    setFont(getFontName(),1);  }  glyphs.setCorrupted(isCorrupt);}  }
class C{  public static void playSoundBuffer(byte[] wavData){  jmri.jmrit.sound.WavBuffer wb=new jmri.jmrit.sound.WavBuffer(wavData);  float sampleRate=wb.getSampleRate();  int sampleSizeInBits=wb.getSampleSizeInBits();  int channels=wb.getChannels();  boolean signed=wb.getSigned();  boolean bigEndian=wb.getBigEndian();  AudioFormat format=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);  SourceDataLine line;  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);  if (!AudioSystem.isLineSupported(info)) {    log.warn("line not supported: " + info);    return;  }  try {    line=(SourceDataLine)AudioSystem.getLine(info);    line.open(format);  } catch (  LineUnavailableException ex) {    log.error("error opening line: " + ex);    return;  }  line.start();  line.write(wavData,0,wavData.length);}  }
class C{  private int makeReadRecInd(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_READ_REC_IND);  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MESSAGE_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.TO) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.FROM) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.DATE);  if (appendHeader(PduHeaders.READ_STATUS) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  return PDU_COMPOSE_SUCCESS;}  }
class C{  public static IInterval timeInterval(Employee empl,TimeBlock timeblock){  int left=timeblock.day * 1440 + timeblock.start;  int right=timeblock.day * 1440 + timeblock.end;  return new EmployeeInterval(empl,left,right);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DatasetGroup)) {    return false;  }  DatasetGroup that=(DatasetGroup)obj;  if (!this.id.equals(that.id)) {    return false;  }  return true;}  }
class C{  public Float toFloat(){  return Float.valueOf(floatValue());}  }
class C{  public Installer on(@NonNull View view){  rootView=(ViewGroup)view.getRootView();  return this;}  }
class C{  public TopicObject(TopicObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.title=parent.getTitle();  this.excerpt=parent.getExcerpt();  this.lastUpdatorId=parent.getLastUpdatorId();  this.lastUpdatorName=parent.getLastUpdatorName();  this.refId=parent.getRefId();  this.refType=parent.getRefType();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.bcId=parent.getBcId();  this.companyId=parent.getCompanyId();  this.stick=parent.getStick();}  }
class C{  public TFloatFloatHashMap(TFloatHashingStrategy strategy){  super(strategy);}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public static Object create(String className,Object[] constructorArgs,Class<?>[] argClasses){  return create(className,constructorArgs,argClasses,null,null);}  }
class C{  @NotNull @ObjectiveCName("editGroupAboutWithGid:withAbout:") public Promise<Void> editGroupAbout(int gid,String about){  return modules.getGroupsModule().editAbout(gid,about);}  }
class C{  private ShellUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public OrionConfigurationBuilder(){  super();}  }
class C{  public void deallocatePesForContainerVm(ContainerVm containerVm){  getContainerVmScheduler().deallocatePesForVm(containerVm);}  }
class C{  @SmallTest public void testChangeNullToMapped(){  TestSimpleCursorAdapter ca=new TestSimpleCursorAdapter(mContext,mLayout,null,null,null);  assertEquals(0,ca.getCount());  ca.changeCursorAndColumns(mCursor2x2,mFrom,mTo);  assertEquals(2,ca.getCount());  int[] columns=ca.getConvertedFrom();  assertEquals(2,columns.length);  assertEquals(0,columns[0]);  assertEquals(1,columns[1]);  int[] viewIds=ca.getTo();  assertEquals(2,viewIds.length);  assertEquals(com.android.internal.R.id.text1,viewIds[0]);  assertEquals(com.android.internal.R.id.text2,viewIds[1]);}  }
class C{  private void sendObjectMessage(List<? extends Serializable> objectsToSend) throws JMSException {  double msgSize=Math.ceil(objectsToSend.size() / 1000.0);  int counter=0;  while (counter < msgSize) {    int fromIndex=counter * 1000;    int toIndex=Math.min(fromIndex + 1000,objectsToSend.size());    sendObjectMsgSingleSession(objectsToSend.subList(fromIndex,toIndex));    counter++;  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == m_DefaultButton)   defaultFormat(); else   if (e.getSource() == m_ApplyButton)   applyFormat();}  }
class C{  private boolean isGuardWithCatch(int pos){  if (pos + 2 >= lambdaForm.names.length)   return false;  Name name0=lambdaForm.names[pos];  Name name1=lambdaForm.names[pos + 1];  Name name2=lambdaForm.names[pos + 2];  return nameRefersTo(name1,MethodHandleImpl.class,"guardWithCatch") && isInvokeBasic(name0) && isInvokeBasic(name2)&& name1.lastUseIndex(name0) == 3 && lambdaForm.lastUseIndex(name0) == pos + 1 && name2.lastUseIndex(name1) == 1 && lambdaForm.lastUseIndex(name1) == pos + 2;}  }
class C{  public synchronized void update(Credentials c){  if (credentialsList != null) {    if (credentialsList.isEmpty()) {      credentialsList.addElement(c);    } else {      Credentials tmp=null;      boolean matched=false;      for (int i=0; i < credentialsList.size(); i++) {        tmp=credentialsList.elementAt(i);        if (match(c.sname.getNameStrings(),tmp.sname.getNameStrings()) && ((c.sname.getRealmString()).equalsIgnoreCase(tmp.sname.getRealmString()))) {          matched=true;          if (c.endtime.getTime() >= tmp.endtime.getTime()) {            if (DEBUG) {              System.out.println(" >>> FileCredentialsCache " + "Ticket matched, overwrite " + "the old one.");            }            credentialsList.removeElementAt(i);            credentialsList.addElement(c);          }        }      }      if (matched == false) {        if (DEBUG) {          System.out.println(" >>> FileCredentialsCache Ticket " + "not exactly matched, " + "add new one into cache.");        }        credentialsList.addElement(c);      }    }  }}  }
class C{  public void outputDDLToDatabase(){  this.createSchemaWriter=null;  this.dropSchemaWriter=null;}  }
class C{  protected void arraycopy(byte[] buf,int pos,int length){  mMessage.write(buf,pos,length);  mPosition=mPosition + length;}  }
class C{  public static boolean needsParentheses(Expression expression,ASTNode parent,StructuralPropertyDescriptor locationInParent){  return needsParentheses(expression,parent,locationInParent,null);}  }
class C{  private int trailingCharsToStrip(){  int lastNewlineIndex=lastNewLineIndex();  if (lastNewlineIndex == -1 && beginColumn != 1) {    return 0;  }  if (!StringUtil.isTrimmableToEmpty(text,lastNewlineIndex + 1)) {    return 0;  }  for (TemplateElement elem=this.nextTerminalNode(); elem != null && elem.beginLine == this.endLine; elem=elem.nextTerminalNode()) {    if (elem.heedsTrailingWhitespace()) {      return 0;    }  }  return text.length - (lastNewlineIndex + 1);}  }
class C{  public boolean isFragmented(){  return (fragments != null && fragments.length > 0 && fragmentsSize > 0);}  }
class C{  public static Number rightShift(Number self,Number operand){  return NumberMath.rightShift(self,operand);}  }
class C{  private List<Node> possibleParents(Node node,List<Node> adjNode){  List<Node> possibleParents=new LinkedList<>();  String _x=node.getName();  for (  Node z : adjNode) {    String _z=z.getName();    if (possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  int u=0;  int v=0;  int w=0;  int x, y;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      if (state1 < 20) {        double sum;        x=w;        for (int i=0; i < 20; i++) {          y=v;          double value=matrices1[x + state1];          sum=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          partials3[u]=value * sum;          u++;        }        v+=20;      } else {        double sum;        x=w;        for (int i=0; i < 20; i++) {          y=v;          sum=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          sum+=matrices2[x] * partials2[y];          x++;          y++;          partials3[u]=sum;          u++;        }        v+=20;      }    }    w+=matrixSize;  }}  }
class C{  public static String createHashCode(String stringToHash){  String trimmed=trimIfNotNull(stringToHash);  if (trimmed == null) {    return null;  }  return Hashing.murmur3_128().hashString(trimmed,Charsets.UTF_8).toString();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void scan(final char[] input,final int start,final int end){  this.positions=new HashMap<Character,ArrayList<Integer>>();  ArrayList<Integer> list;  char c;  for (int i=start; i < end; i++) {    c=input[i];    list=positions.get(c);    if (list == null) {      list=new ArrayList<Integer>();      positions.put(c,list);    }    list.add(i);  }}  }
class C{  @SuppressWarnings("unchecked") public void mousePressed(MouseEvent e){  VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();  down=e.getPoint();  if (added == false) {    vv.addPreRenderPaintable(annotationManager.getLowerAnnotationPaintable());    vv.addPostRenderPaintable(annotationManager.getUpperAnnotationPaintable());    added=true;  }  if (e.isPopupTrigger()) {    String annotationString=JOptionPane.showInputDialog(vv,"Annotation:");    if (annotationString != null && annotationString.length() > 0) {      Point2D p=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(down);      Annotation<String> annotation=new Annotation<String>(annotationString,layer,annotationColor,fill,p);      annotationManager.add(layer,annotation);    }  } else   if (e.getModifiers() == additionalModifiers) {    Annotation<?> annotation=annotationManager.getAnnotation(down);    annotationManager.remove(annotation);  } else   if (e.getModifiers() == modifiers) {    rectangularShape.setFrameFromDiagonal(down,down);    vv.addPostRenderPaintable(lensPaintable);  }  vv.repaint();}  }
class C{  public void insertColumn(int at,T value){  for (  List<T> row : rowData) {    row.add(at,value);  }  this.fireTableStructureChanged();}  }
class C{  public static int canPassUnchecked(Class<?> src,Class<?> dst){  if (src == dst)   return 1;  if (dst.isPrimitive()) {    if (dst == void.class)     return 1;    if (src == void.class)     return 0;    if (!src.isPrimitive())     return 0;    Wrapper sw=Wrapper.forPrimitiveType(src);    Wrapper dw=Wrapper.forPrimitiveType(dst);    if (sw.isSubwordOrInt() && dw.isSubwordOrInt()) {      if (sw.bitWidth() >= dw.bitWidth())       return -1;      if (!dw.isSigned() && sw.isSigned())       return -1;      return 1;    }    if (src == float.class || dst == float.class) {      if (src == double.class || dst == double.class)       return -1; else       return 0;    } else {      return 0;    }  } else   if (src.isPrimitive()) {    return 0;  }  if (isNullReferenceConversion(src,dst))   return 1;  return -1;}  }
class C{  @action(name="failure",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'failure' performative message.")) public Object primFailure(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,FAILURE,getContentArg(scope));}  }
class C{  public static boolean isCastlePathInCheck(Game game,int kingStartSquare,int kingEndSquare,int color){  boolean result=false;  if (kingStartSquare < kingEndSquare) {    for (int i=kingStartSquare; !result && i < kingEndSquare; i++) {      result=game.isInCheck(color,getBitboard(i));    }  } else {    for (int i=kingEndSquare; !result && i < kingStartSquare; i++) {      result=game.isInCheck(color,getBitboard(i));    }  }  return result;}  }
class C{  public JSDocCompletionProposalComputer(JSDocContentAssistProcessor jsDocContentAssistProcessor,ITextViewer viewer,int offset){  this.processor=jsDocContentAssistProcessor;  this.viewer=viewer;  this.offset=offset;}  }
class C{  public int purge(){  if (capacity >= 0) {    int start=size();    Object[] cache=messageCache.toArray();    for (int i=start - 1; i >= capacity; i--) {      messageCache.remove((IMessage)cache[i]);    }    return start - size();  }  return 0;}  }
class C{  public ObjectFactory(){}  }
class C{  public TEnumLiteral createTEnumLiteral(){  TEnumLiteralImpl tEnumLiteral=new TEnumLiteralImpl();  return tEnumLiteral;}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public boolean isRunning(){  return (this.state == RUNNING);}  }
class C{  protected static boolean parsePartHeaders(ByteArrayInputStream pduDataStream,PduPart part,int length){  assert (null != pduDataStream);  assert (null != part);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int header=pduDataStream.read();    assert (-1 != header);    lastLen--;    if (header > TEXT_MAX) {switch (header) {case PduPart.P_CONTENT_LOCATION:        byte[] contentLocation=parseWapString(pduDataStream,TYPE_TEXT_STRING);      if (null != contentLocation) {        part.setContentLocation(contentLocation);      }    tempPos=pduDataStream.available();  lastLen=length - (startPos - tempPos);break;case PduPart.P_CONTENT_ID:byte[] contentId=parseWapString(pduDataStream,TYPE_QUOTED_STRING);if (null != contentId) {part.setContentId(contentId);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_CONTENT_DISPOSITION:case PduPart.P_CONTENT_DISPOSITION:boolean contentDisposition=true;if (contentDisposition) {int len=-1;boolean validDispositionLength=true;pduDataStream.mark(1);try {len=parseValueLength(pduDataStream);} catch (RuntimeException e) {len=31;validDispositionLength=false;pduDataStream.reset();}pduDataStream.mark(1);int thisStartPos=pduDataStream.available();int thisEndPos=0;int value=pduDataStream.read();if (validDispositionLength) {if (value == PduPart.P_DISPOSITION_FROM_DATA) {part.setContentDisposition(PduPart.DISPOSITION_FROM_DATA);} else if (value == PduPart.P_DISPOSITION_ATTACHMENT) {part.setContentDisposition(PduPart.DISPOSITION_ATTACHMENT);} else if (value == PduPart.P_DISPOSITION_INLINE) {part.setContentDisposition(PduPart.DISPOSITION_INLINE);} else {pduDataStream.reset();part.setContentDisposition(parseWapString(pduDataStream,TYPE_TEXT_STRING));}} else {pduDataStream.reset();part.setContentDisposition(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {value=pduDataStream.read();if (value == PduPart.P_FILENAME) {part.setFilename(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {int last=len - (thisStartPos - thisEndPos);byte[] temp=new byte[last];pduDataStream.read(temp,0,last);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);}break;default :if (-1 == skipWapValue(pduDataStream,lastLen)) {return false;}lastLen=0;break;}} else if ((header >= TEXT_MIN) && (header <= TEXT_MAX)) {byte[] tempHeader=parseWapString(pduDataStream,TYPE_TEXT_STRING);byte[] tempValue=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (true == PduPart.CONTENT_TRANSFER_ENCODING.equalsIgnoreCase(new String(tempHeader))) {part.setContentTransferEncoding(tempValue);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);} else {if (-1 == skipWapValue(pduDataStream,lastLen)) {return false;}lastLen=0;}}if (0 != lastLen) {return false;}return true;}  }
class C{  public static void e(String tag,String msg){  log(LEVEL.ERROR,tag,msg,null);}  }
class C{  public void addActionListener(ActionListener l){  eventDispatcher.addListener(l);}  }
class C{  @Override public ProjectTodoStatusObject copy(){  return new ProjectTodoStatusObject(this);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static String prettyPrintXml(Document document) throws Exception {  return prettyPrintXml(document,"UTF-8");}  }
class C{  public void benchHasChildSingleTerm(){  QueryBuilder lookupQuery;  TermsByQueryRequestBuilder stringFilter=this.newTermsByQueryRequestBuilder();  stringFilter.setIndices(CHILD_INDEX).setTypes(CHILD_TYPE).setField("pid").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  TermsByQueryRequestBuilder longFilter=this.newTermsByQueryRequestBuilder();  longFilter.setIndices(CHILD_INDEX).setTypes(CHILD_TYPE).setField("num").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  long tookString=0;  long tookLong=0;  long expected=NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS CHILD SINGLE TERM ====");  for (int i=0; i < NUM_QUERIES; i++) {    lookupQuery=boolQuery().filter(termQuery("tag","tag" + random.nextInt(NUM_CHILDREN_PER_PARENT)));    stringFilter.setQuery(lookupQuery);    longFilter.setQuery(lookupQuery);    tookString+=runQuery("string",i,expected,stringFilter);    tookLong+=runQuery("long",i,expected,longFilter);  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public static <T>EventListenerSupport<T> create(final Class<T> listenerInterface){  return new EventListenerSupport<T>(listenerInterface);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void initSynapseType(){  Iterator<Synapse> synIter=synapseCollection.iterator();  Synapse protoSyn=synIter.next();  boolean discrepancy=false;  while (synIter.hasNext()) {    if (!protoSyn.getLearningRule().getClass().equals(synIter.next().getLearningRule().getClass())) {      discrepancy=true;      break;    }  }  if (discrepancy) {    cbSynapseType.addItem(SimbrainConstants.NULL_STRING);    cbSynapseType.setSelectedIndex(cbSynapseType.getItemCount() - 1);    synapsePanel=new StaticSynapsePanel();  } else {    List<SynapseUpdateRule> synapseList=Synapse.getRuleList(synapseCollection);    String synapseName=synapseList.get(0).getName();    synapsePanel=AbstractSynapseRulePanel.RULE_MAP.get(synapseName).deepCopy();    synapsePanel.fillFieldValues(synapseList);    cbSynapseType.setSelectedItem(synapseName);  }}  }
class C{  public static boolean isSubset(long sub,long sup){  return ((sub & sup) == sub);}  }
class C{  public CombinedDomainXYPlot(ValueAxis domainAxis){  super(null,domainAxis,null,null);  this.subplots=new java.util.ArrayList<XYPlot>();}  }
class C{  private void changeBlockName(){  String name=_blockName.getText();  if (name == null || name.trim().length() == 0) {    JOptionPane.showMessageDialog(this,Bundle.getMessage("changeBlockName"),Bundle.getMessage("editCiruit"),JOptionPane.INFORMATION_MESSAGE);    return;  }  _block.setUserName(name);  java.util.List<Positionable> list=_parent.getCircuitIcons(_block);  if (list != null) {    for (int i=0; i < list.size(); i++) {      if (list.get(i) instanceof PortalIcon) {        PortalIcon icon=(PortalIcon)list.get(i);        Portal portal=icon.getPortal();        icon.setName(portal.getName());        icon.setTooltip(new ToolTip(portal.getDescription(),0,0));      }    }  }}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 8) {    throw new IllegalArgumentException("iv.length < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,0,this.iv,0,8);}  }
class C{  public NameComponent(NamedModel model,WizardComponentContainer container){  super(container);  this.model=model;  Label classNameLabel=new Label(getParentComposite(),SWT.NONE);  classNameLabel.setText("Name:");  nameText=new Text(getParentComposite(),SWT.BORDER);  nameText.setLayoutData(fillTextDefaults());  WizardComponentUtils.emptyGridCell(container.getComposite());  setupBindings();}  }
class C{  private void importRecords(){  isImported=false;  for (  X_I_Movement imove : getRecords(false,m_IsImportOnlyNoErrors)) {    MMovement mov=importMInventoryMove(imove);    if (mov != null) {      isImported=importMInventoryMoveLine(mov,imove);    } else {      isImported=false;    }    if (isImported) {      imove.setM_Movement_ID(mov.getM_Movement_ID());      imove.setI_IsImported(true);      imove.setProcessed(true);      imove.saveEx();      imported++;      addForProcess(mov.getM_Movement_ID());      mov.saveEx();    } else {      imove.setI_IsImported(false);      imove.setProcessed(true);      imove.saveEx();      notimported++;    }  }  processAll();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static <K,V,V2>MutableMap<K,V2> collectValues(Map<K,V> map,Function2<? super K,? super V,? extends V2> function){  return MapIterate.collectValues(map,function,UnifiedMap.newMap(map.size()));}  }
class C{  private double stopProbUsingBlend(){  int itcount=0;  double stopProb, aimfor;  double lower, upper, tstop;  KStarWrapper botvals=new KStarWrapper();  KStarWrapper upvals=new KStarWrapper();  KStarWrapper vals=new KStarWrapper();  int testvalue=(int)m_Test.value(m_AttrIndex);  aimfor=(m_TotalCount - m_Distribution[testvalue]) * (double)m_BlendFactor / 100.0 + m_Distribution[testvalue];  tstop=1.0 - m_BlendFactor / 100.0;  lower=0.0 + ROOT_FINDER_ACCURACY / 2.0;  upper=1.0 - ROOT_FINDER_ACCURACY / 2.0;  calculateSphereSize(testvalue,lower,botvals);  botvals.sphere-=aimfor;  calculateSphereSize(testvalue,upper,upvals);  upvals.sphere-=aimfor;  if (upvals.avgProb == 0) {    calculateSphereSize(testvalue,tstop,vals);  } else   if (upvals.sphere > 0) {    tstop=upper;    vals.avgProb=upvals.avgProb;  } else {    for (; ; ) {      itcount++;      calculateSphereSize(testvalue,tstop,vals);      vals.sphere-=aimfor;      if (Math.abs(vals.sphere) <= ROOT_FINDER_ACCURACY || itcount >= ROOT_FINDER_MAX_ITER) {        break;      }      if (vals.sphere > 0.0) {        lower=tstop;        tstop=(upper + lower) / 2.0;      } else {        upper=tstop;        tstop=(upper + lower) / 2.0;      }    }  }  m_SmallestProb=vals.minProb;  m_AverageProb=vals.avgProb;switch (m_MissingMode) {case M_DELETE:    m_MissingProb=0.0;  break;case M_NORMAL:m_MissingProb=1.0;break;case M_MAXDIFF:m_MissingProb=m_SmallestProb;break;case M_AVERAGE:m_MissingProb=m_AverageProb;break;}if (Math.abs(vals.avgProb - m_TotalCount) < EPSILON) {stopProb=1.0;} else {stopProb=tstop;}return stopProb;}  }
class C{  public void finishLoading(){  assetManager.finishLoading();  doOnLoadingFinish();}  }
class C{  private boolean limitTranslation(Matrix transform,@LimitFlag int limitTypes){  if (!shouldLimit(limitTypes,LIMIT_TRANSLATION_X | LIMIT_TRANSLATION_Y)) {    return false;  }  RectF b=mTempRect;  b.set(mImageBounds);  transform.mapRect(b);  float offsetLeft=shouldLimit(limitTypes,LIMIT_TRANSLATION_X) ? getOffset(b.left,b.right,mViewBounds.left,mViewBounds.right,mImageBounds.centerX()) : 0;  float offsetTop=shouldLimit(limitTypes,LIMIT_TRANSLATION_Y) ? getOffset(b.top,b.bottom,mViewBounds.top,mViewBounds.bottom,mImageBounds.centerY()) : 0;  if (offsetLeft != 0 || offsetTop != 0) {    transform.postTranslate(offsetLeft,offsetTop);    return true;  }  return false;}  }
class C{  public static Component createHorizontalGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(Short.MAX_VALUE,0));}  }
class C{  public static AtResource create(TypeTable typeTable,Source sourceFile,int beginLine,String value,Type type){  String methodName=null;  if (type.isAssignableTo(typeTable.stringType)) {    methodName="getString";  } else   if (type.isAssignableTo(typeTable.booleanType)) {    methodName="getBoolean";  } else   if (type.isAssignableTo(typeTable.numberType)) {    methodName="getNumber";  } else   if (type.isAssignableTo(typeTable.intType)) {    methodName="getInt";  } else   if (type.isAssignableTo(typeTable.uintType)) {    methodName="getUint";  } else   if (type.isAssignableTo(typeTable.classType)) {    methodName="getClass";  } else   if (type.isAssignableTo(typeTable.arrayType)) {    methodName="getStringArray";  } else {    methodName="getObject";  }  MetaData metaData=MetaDataParser.parse(typeTable.getPerCompileData(),sourceFile,beginLine,value.substring(1));  if (metaData == null) {    return null;  } else   if (metaData.count() == 0) {    ThreadLocalToolkit.log(new NoResourceParams(),sourceFile.getNameForReporting(),beginLine);    return null;  }  String key=metaData.getValue("key");  if (key == null) {    if ((metaData.getKey(0) == null) && (metaData.count() == 1)) {      key=metaData.getValue(0);    } else {      ThreadLocalToolkit.log(new NoResourceKeyParam(),sourceFile.getNameForReporting(),beginLine);      return null;    }  }  String bundle=metaData.getValue("bundle");  if (bundle == null) {    if (metaData.count() > 1) {      ThreadLocalToolkit.log(new NoResourceBundleParam(),sourceFile.getNameForReporting(),beginLine);      return null;    }    bundle=NameFormatter.qNameFromSource(sourceFile).toString();  }  return new AtResource(bundle,key,methodName,beginLine);}  }
class C{  public T caseN4MemberAnnotationList(N4MemberAnnotationList object){  return null;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  TypedSet other=(TypedSet)obj;  if (type == null) {    if (other.type != null)     return false;  } else   if (!type.equals(other.type))   return false;  if (!Arrays.equals(values,other.values))   return false;  return true;}  }
class C{  public SkypeBuilder withResource(String resource){  resources.add(resource);  return this;}  }
class C{  synchronized public void shutdownNow(){  if (log.isInfoEnabled())   log.info("begin");  super.shutdownNow();  if (abstractTransactionService != null) {    abstractTransactionService.shutdownNow();  }  for (int i=0; i < dataService.length; i++) {    if (dataService[i] != null) {      dataService[i].shutdownNow();    }  }  metadataService.shutdownNow();  if (loadBalancerService != null) {    loadBalancerService.shutdownNow();  }  if (log.isInfoEnabled())   log.info("done");}  }
class C{  public SecureChannel createSecureChannel(String connectUrl,String endpointUri) throws ServiceResultException {  EndpointDescription[] endpoints=discoverEndpoints(connectUrl,"");  EndpointDescription endpoint=select(endpoints,connectUrl);  return createSecureChannel(connectUrl,endpoint);}  }
class C{  public static void cleanUpMetaDataOnNodeFailure(DistributedMember failedMemId){  try {    final GemFireCacheImpl cache=GemFireCacheImpl.getInstance();    if (cache == null || cache.getCancelCriterion().isCancelInProgress()) {      return;    }    DM dm=cache.getDistributedSystem().getDistributionManager();    if (logger.isDebugEnabled()) {      logger.debug("Cleaning PartitionedRegion meta data for memberId={}",failedMemId);    }    Region rootReg=PartitionedRegionHelper.getPRRoot(cache,false);    if (rootReg == null) {      return;    }    final ArrayList<String> ks=new ArrayList<String>(rootReg.keySet());    if (ks.size() > 1) {      Collections.shuffle(ks,PartitionedRegion.rand);    }    for (    String prName : ks) {      try {        cleanUpMetaDataForRegion(cache,prName,failedMemId,null);      } catch (      CancelException e) {      }catch (      Exception e) {        if (logger.isDebugEnabled()) {          logger.debug("Got exception in cleaning up metadata. {}",e.getMessage(),e);        }      }    }  } catch (  CancelException e) {  }}  }
class C{  @Override public boolean matches(ConditionContext context,AnnotatedTypeMetadata metadata){  Environment env=context.getEnvironment();  return (!StringUtils.isEmpty(env.getProperty("motan.basicservice.exportPort")) || !StringUtils.isEmpty(env.getProperty("motan.basicservice.export")));}  }
class C{  public static int nextPowerOf2(int x){  long i=1;  while (i < x && i < (Integer.MAX_VALUE / 2)) {    i+=i;  }  return (int)i;}  }
class C{  public void addLload(int n){  if (n < 4)   addOpcode(30 + n); else   if (n < 0x100) {    addOpcode(LLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(LLOAD);    addIndex(n);  }}  }
class C{  public void postOnWallWithImage(Context context,String tagIdSelected,String latitude,String longitude,String[] address,String message,String imagepath){  Intent intent=new Intent(context,WallPostIntentService.class);  intent.setAction(ACTION_POST);  intent.putExtra(HttpConstants.UPDATE_POST,true);  intent.putExtra(HttpConstants.WALL_ID,mWallId);  intent.putExtra(HttpConstants.POST_MESSAGE,message);  intent.putExtra(HttpConstants.POST_LATITUDE,latitude);  intent.putExtra(HttpConstants.POST_LONGITUDE,longitude);  intent.putExtra(HttpConstants.POST_TAG_ID,tagIdSelected);  intent.putExtra(HttpConstants.POST_CITY,address[address.length - 3].trim());  intent.putExtra(HttpConstants.POST_COUNTRY,address[address.length - 1].trim());  intent.putExtra(AppConstants.WALL_IMAGE_NAME,imagepath);  context.startService(intent);  getActivity().finish();}  }
class C{  public boolean parseGeoJSON(JsonObject json){  KmlFeature feature=KmlFeature.parseGeoJSON(json);  if (feature instanceof KmlFolder)   mKmlRoot=(KmlFolder)feature; else {    mKmlRoot=new KmlFolder();    mKmlRoot.add(feature);  }  return true;}  }
class C{  private void clearStorage(){  DownloadReceiver.stopDownloads(null);  PodlistenAccount account=PodlistenAccount.getInstance();  account.setupSync(0);  account.cancelRefresh();  ContentValues cv=new ContentValues(4);  cv.put(Provider.K_EDID,0);  cv.put(Provider.K_EDFIN,0);  cv.put(Provider.K_EDTSTAMP,0);  cv.put(Provider.K_EERROR,(String)null);  context.getContentResolver().update(Provider.episodeUri,cv,null,null);  storage.cleanup();  context.sendBroadcast(new Intent(DownloadReceiver.UPDATE_QUEUE_ACTION));  account.refresh(0);  account.setupSync(getRefreshInterval().periodSeconds);}  }
class C{  public double evaluate(double lambda){  getPoint(lambda,x);  return f.evaluate(x);}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  try {    final java.io.Writer writer=m_writer;    if ((flags & NO_BAD_CHARS) > 0 && m_htmlcharInfo.onlyQuotAmpLtGt) {      writer.write(' ');      writer.write(name);      writer.write("=\"");      writer.write(value);      writer.write('"');    } else     if ((flags & HTML_ATTREMPTY) > 0 && (value.length() == 0 || value.equalsIgnoreCase(name))) {      writer.write(' ');      writer.write(name);    } else {      writer.write(' ');      writer.write(name);      writer.write("=\"");      if ((flags & HTML_ATTRURL) > 0) {        writeAttrURI(writer,value,m_specialEscapeURLs);      } else {        writeAttrString(writer,value,this.getEncoding());      }      writer.write('"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override public float calculateCelestialAngle(long worldTime,float partialTicks){  Calendar calendar=HFTrackers.getCalendar(worldObj);  if (calendar == null)   return 1F;  SeasonData data=calendar.getSeasonData();  int time=(int)(worldTime % HFCalendar.TICKS_PER_DAY);  double fac=data.getCelestialLengthFactor();  float chylex=(float)(clamp(0,1000D,time) + 11000D * (clamp(0,11000D,time - 1000D) / 11000D) * fac + clamp(0,1000D,time - 12000D) + 11000D * (clamp(0,11000D,time - 12000D) / 11000D) * (2 - fac));  float angle=(chylex / HFCalendar.TICKS_PER_DAY) - 0.25F;  return angle + data.getCelestialAngleOffset();}  }
class C{  private void createContainerIfNecessary(){  if (container.isFull()) {    container=new TimerRawContainer();    data.add(container);  }}  }
class C{  protected static int LEA_SHIFT(Operand op,int trueCost){  return LEA_SHIFT(op,trueCost,INFINITE);}  }
class C{  @Override protected void finalize(){  try {    if (mWindow != null) {      close();    }  }  finally {    super.finalize();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.701 -0400",hash_original_method="D0DBD07AC167C30966D96C90DE90DB8C",hash_generated_method="DD11EE338892C8EC3BBB15C8DF3CA3E3") final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  public static Boolean checkPartyType(Delegator delegator,String partyId,String checkedPartyType){  GenericValue party=null;  GenericValue partyType=null;  GenericValue checkedTypeOfParty=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    if (UtilValidate.isNotEmpty(party)) {      partyType=party.getRelatedOne("PartyType",true);      checkedTypeOfParty=EntityQuery.use(delegator).from("PartyType").where("partyTypeId",checkedPartyType).cache().queryOne();    } else {      return false;    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  return EntityTypeUtil.isType(partyType,checkedTypeOfParty);}  }
class C{  public <U extends T>OngoingMatchingR1<T,U,U,R> when(MatchesAny<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.any());  return new OngoingMatchingR1<>(this,new DecomposableMatchBuilder1<U,U>(matchers,0,new IdentityFieldExtractor<>()).build());}  }
class C{  public void contextInitialized(ServletContextEvent event){  try {    loadServiceBindings();    loadTriggers();    loadScheduledCache();    ScalingScheduledServiceFactory.getScheduledService().start();  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }}  }
class C{  @Override public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  return drawImage(img,x,y,img.getWidth(observer),img.getHeight(observer),bgcolor,observer);}  }
class C{  public void saveAs(){  int retVal;  m_FileChooser.setSelectedFile(m_CurrentFile);  retVal=m_FileChooser.showSaveDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  save(m_FileChooser.getSelectedFile(),m_FileChooser.getSaver());}  }
class C{  private void addFont(Object f,int index){  if (fonts != null) {    fontStarts=addToVector(f,index,fonts,fontStarts);  } else   if (font == null) {    font=f;  } else {    if (!font.equals(f)) {      fonts=new Vector<Object>(INITIAL_SIZE);      fonts.addElement(font);      fonts.addElement(f);      fontStarts=new int[INITIAL_SIZE];      fontStarts[0]=0;      fontStarts[1]=index;    }  }}  }
class C{  public static <T extends TBase>void deserializeObject(String serializedObject,T obj) throws MetadataException {  TDeserializer deserializer=new TDeserializer(new TJSONProtocol.Factory());  try {    deserializer.deserialize(obj,serializedObject,"UTF-8");  } catch (  TException e) {    throw new MetadataException(e);  }}  }
class C{  private static void scheduleEpisodeDownload(Context context,int minimumLatency){  if (isJobScheduled(context,JOB_ID)) {    Log.d(TAG,"This job has already been scheduled, skipping");    return;  }  Log.d(TAG,"Scheduling");  UserPrefHelper helper=UserPrefHelper.get(context);  boolean onlyDownloadOnWifi=helper.getBoolean(context.getString(R.string.pref_key_auto_download_only_on_wifi));  boolean requiresCharging=helper.getBoolean(context.getString(R.string.pref_key_auto_download_charging_only));  ComponentName comp=new ComponentName(context,DownloadJobService.class);  JobInfo.Builder builder=new JobInfo.Builder(JOB_ID,comp).setPersisted(true).setRequiresDeviceIdle(false).setRequiredNetworkType(onlyDownloadOnWifi ? JobInfo.NETWORK_TYPE_UNMETERED : JobInfo.NETWORK_TYPE_ANY).setRequiresCharging(requiresCharging);  if (minimumLatency > -1) {    builder.setMinimumLatency(BuildConfig.DEBUG ? 1_000 : minimumLatency);  }  JobInfo job=builder.build();  JobScheduler scheduler=(JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);  int result=scheduler.schedule(job);  Log.d(TAG,result + " scheduler result");}  }
class C{  public FileDownloadTask(String uri,File target){  super(uri);  Objects.requireNonNull(target);  this.target=target;}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  private void registerBroadCastReceiver(){  IntentFilter filter=new IntentFilter();  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);  filter.addAction(Intent.ACTION_SCREEN_ON);  filter.addAction(Intent.ACTION_SCREEN_OFF);  registerReceiver(mBroadcastReceiver,filter,null,null);}  }
class C{  public void release(){  PathLockFactory.this.release(path,permits);}  }
class C{  public List<String> extractPropertyValueIds(JSONObject data,Map<String,String> propertyMap,Network network,Map<String,Vertex> processed){  List<String> values=new ArrayList<String>();  Set<String> valuesSet=new HashSet<String>();  for (  Map.Entry<String,String> property : propertyMap.entrySet()) {    Object propertyValue=data.get(property.getKey());    if (propertyValue instanceof JSONArray) {      for (      Object value : ((JSONArray)propertyValue)) {        if (value instanceof JSONObject) {          value=((JSONObject)value).get("mainsnak");          if (value instanceof JSONObject) {            value=((JSONObject)value).get("datavalue");            if (value instanceof JSONObject) {              value=((JSONObject)value).get("value");              if (value instanceof JSONObject) {                Object id=((JSONObject)value).get("numeric-id");                if (id instanceof Integer) {                  String nested="Q" + id;                  if (!valuesSet.contains(nested)) {                    valuesSet.add(nested);                    values.add(nested);                  }                }              }            }          }        }      }    }  }  return values;}  }
class C{  @Override public void onEditObject(MyData myData){  editingMyData=myData;  SelectActionDialogFragment dialog=new SelectActionDialogFragment();  dialog.show(getSupportFragmentManager(),"SelectActionDialogFragment");}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  BigInteger n=params.getN();  int nBitLength=n.bitLength();  int minWeight=nBitLength >>> 2;  BigInteger d;  for (; ; ) {    d=new BigInteger(nBitLength,random);    if (d.compareTo(TWO) < 0 || (d.compareTo(n) >= 0)) {      continue;    }    if (WNafUtil.getNafWeight(d) < minWeight) {      continue;    }    break;  }  ECPoint Q=createBasePointMultiplier().multiply(params.getG(),d);  return new AsymmetricCipherKeyPair(new ECPublicKeyParameters(Q,params),new ECPrivateKeyParameters(d,params));}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  public static PathImpl lookup(URL url){  return getPwd().lookup(url);}  }
class C{  public void selectObject(Img img,PointInfo touchPoint){  currTouchPoint.set(touchPoint);  if (img != null) {    mImages.remove(img);    mImages.add(img);  } else {  }  invalidate();}  }
class C{  public SessionFailedEvent(final String sessionId){  this(sessionId,null);}  }
class C{  static void init(DM dm,HashMap map){  HashSet crashedGrantors=new HashSet();  if (!dm.isAdam()) {    Set others=dm.getOtherDistributionManagerIds();    if (!others.isEmpty()) {      ElderInitProcessor processor=new ElderInitProcessor(dm,others,map,crashedGrantors);      ElderInitMessage.send(others,dm,processor);      try {        processor.waitForRepliesUninterruptibly();      } catch (      ReplyException e) {        e.handleAsUnexpected();      }    }  }  GrantorRequestProcessor.readyForElderRecovery(dm.getSystem(),null,null);  DLockService.recoverLocalElder(dm,map,crashedGrantors);{    Iterator it=crashedGrantors.iterator();    while (it.hasNext()) {      map.put(it.next(),new GrantorInfo(null,0,0,true));    }  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case DomPackage.DOCLET:    return createDoclet();case DomPackage.TAG_VALUE:  return createTagValue();case DomPackage.TAG_TITLE:return createTagTitle();case DomPackage.LINE_TAG:return createLineTag();case DomPackage.INLINE_TAG:return createInlineTag();case DomPackage.TEXT:return createText();case DomPackage.SIMPLE_TYPE_REFERENCE:return createSimpleTypeReference();case DomPackage.FULL_TYPE_REFERENCE:return createFullTypeReference();case DomPackage.FULL_MEMBER_REFERENCE:return createFullMemberReference();case DomPackage.VARIABLE_REFERENCE:return createVariableReference();case DomPackage.GENERIC_REFERENCE:return createGenericReference();case DomPackage.LITERAL:return createLiteral();case DomPackage.MARKER:return createMarker();case DomPackage.COMPOSED_CONTENT:return createComposedContent();case DomPackage.STRUCTURED_TEXT:return createStructuredText();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public static void sort(Object[] a,int fromIndex,int toIndex,Comparator c){  rangeCheck(a.length,fromIndex,toIndex);  Object[] aux=(Object[])cloneSubarray(a,fromIndex,toIndex);  if (c == null)   mergeSort(aux,a,fromIndex,toIndex,-fromIndex); else   mergeSort(aux,a,fromIndex,toIndex,-fromIndex,c);}  }
class C{  public void done(){  if (out != null) {    out.close();  }}  }
class C{  protected boolean removeEldestEntry(Entry<Object,T> entry){  return size() > capacity;}  }
class C{  private static Vector ExplodeCall(AST.Call ast,String next) throws PcalTranslateException {  Vector result=new Vector();  int to=st.FindProc(ast.to);  if (to == st.procs.size()) {    throw new PcalTranslateException("Call of non-existent procedure " + ast.to,ast);  }  ;  PcalSymTab.ProcedureEntry pe=(PcalSymTab.ProcedureEntry)st.procs.elementAt(to);  AST.Assign ass=new AST.Assign();  ass.ass=new Vector();  ass.line=ast.line;  ass.col=ast.col;  AST.SingleAssign sass=new AST.SingleAssign();  sass.line=ast.line;  sass.col=ast.col;  sass.lhs.var="stack";  sass.lhs.sub=MakeExpr(new Vector());  TLAExpr expr=new TLAExpr();  expr.addLine();  expr.addToken(BuiltInToken("<<"));  expr.addToken(BuiltInToken("["));  expr.addToken(IdentToken("procedure"));  expr.addToken(BuiltInToken("|->"));  expr.addToken(StringToken(ast.to));  expr.addToken(BuiltInToken(","));  expr.addLine();  expr.addToken(IdentToken("pc"));  expr.addToken(BuiltInToken("|->"));  expr.addToken(StringToken(next));  for (int i=0; i < pe.decls.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)pe.decls.elementAt(i);    expr.addToken(BuiltInToken(","));    expr.addLine();    expr.addToken(IdentToken(decl.var));    expr.addToken(BuiltInToken("|->"));    expr.addToken(IdentToken(decl.var));  }  for (int i=0; i < pe.params.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)pe.params.elementAt(i);    expr.addToken(BuiltInToken(","));    expr.addLine();    expr.addToken(IdentToken(decl.var));    expr.addToken(BuiltInToken("|->"));    expr.addToken(IdentToken(decl.var));  }  expr.addToken(BuiltInToken("]"));  expr.addToken(BuiltInToken(">>"));  expr.addLine();  expr.addToken(BuiltInToken("\\o"));  expr.addToken(AddedToken("stack"));  MakeNewStackTopExprPretty(expr);  expr.normalize();  sass.rhs=expr;  ass.ass.addElement(sass);  if (pe.params.size() != ast.args.size())   throw new PcalTranslateException("Procedure " + ast.to + " called with wrong number of arguments",ast);  PCalLocation beginLoc=null;  PCalLocation endLoc=null;  for (int i=0; i < pe.params.size(); i++) {    AST.PVarDecl decl=(AST.PVarDecl)pe.params.elementAt(i);    if (i == 0) {      beginLoc=decl.getOrigin().getBegin();    }    if (i == pe.params.size() - 1) {      endLoc=decl.getOrigin().getEnd();    }    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.setOrigin(decl.getOrigin());    sass.lhs.var=decl.var;    sass.lhs.sub=MakeExpr(new Vector());    sass.rhs=(TLAExpr)ast.args.elementAt(i);    ass.ass.addElement(sass);  }  if (beginLoc != null) {    ass.setOrigin(new Region(beginLoc,endLoc));  }  result.addElement(ass);  for (int i=0; i < pe.decls.size(); i++) {    ass=new AST.Assign();    ass.ass=new Vector();    ass.line=ast.line;    ass.col=ast.col;    AST.PVarDecl decl=(AST.PVarDecl)pe.decls.elementAt(i);    sass=new AST.SingleAssign();    sass.line=ast.line;    sass.col=ast.col;    sass.setOrigin(decl.getOrigin());    sass.lhs.var=decl.var;    sass.lhs.sub=MakeExpr(new Vector());    sass.rhs=(TLAExpr)decl.val;    ass.setOrigin(decl.getOrigin());    ass.ass.addElement(sass);    result.addElement(ass);  }  result.addElement(UpdatePC(pe.iPC));  return result;}  }
class C{  public void findAndInit(Object obj){}  }
class C{  private boolean validateSignature(KeySelector keySelector) throws MalformedTokenException {  NodeList securityNodeList=_parsedToken.getElementsByTagNameNS(Constants.DIGITAL_SIGNATURE_NAMESPACE,SIGNATURE_ELEMENT_NAME);  XMLSignatureFactory fac=XMLSignatureFactory.getInstance();  DOMValidateContext valContext=new DOMValidateContext(keySelector,securityNodeList.item(0));  boolean isValid=false;  try {    XMLSignature signature=fac.unmarshalXMLSignature(valContext);    isValid=signature.validate(valContext);  } catch (  MarshalException e) {    _log.error(SIGNATURE_VALIDATION_ERROR_MSG,e);    throw new MalformedTokenException(SIGNATURE_VALIDATION_ERROR_MSG,e);  }catch (  XMLSignatureException e) {    _log.error(SIGNATURE_VALIDATION_ERROR_MSG,e);    throw new MalformedTokenException(SIGNATURE_VALIDATION_ERROR_MSG,e);  }  _log.debug("SAML token signature is valid status: " + isValid);  return isValid;}  }
class C{  public void addingEdge(SessionEvent event){  String message="Child node already created. If you add this edge,\n" + "the content of the child node will be made\n" + "consistent with the parent.";  int ret=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),message,"Warning",JOptionPane.OK_CANCEL_OPTION);  if (ret == JOptionPane.CANCEL_OPTION) {    SessionNode sessionNode=(SessionNode)event.getSource();    sessionNode.setNextEdgeAddAllowed(false);  }}  }
class C{  public static int generate(int crc,byte[] buffer,int offset,int len){  for (int i=0; i < len; i++) {    crc=next(crc,buffer[offset + i]);  }  return crc;}  }
class C{  protected void removeMapping(HashEntry<K,V> entry,int hashIndex,HashEntry<K,V> previous){  modCount++;  removeEntry(entry,hashIndex,previous);  size--;  destroyEntry(entry);}  }
class C{  @Override protected void doRender(KMLTraversalContext tc,DrawContext dc){  KMLRenderable r=this.getRenderable();  if (r != null) {    r.render(tc,dc);  }  this.renderBalloon(tc,dc);}  }
class C{  public boolean contains(Song s){  return mSongs.contains(s);}  }
class C{  void appendEndDocument(){  done=true;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);  this.labelPaint=SerialUtilities.readPaint(stream);  this.listenerList=new EventListenerList();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.SOURCE_FRAGMENT__SOURCE_FRAGMENT_TYPE:    setSourceFragmentType((SourceFragmentType)newValue);  return;case N4mfPackage.SOURCE_FRAGMENT__PATHS:getPaths().clear();getPaths().addAll((Collection<? extends String>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean empty(){  return chars.length == 0;}  }
class C{  public void appendReadChunk(PngChunk chunk,int chunkGroup){  chunk.setChunkGroup(chunkGroup);  chunks.add(chunk);  if (chunk.id.equals(PngChunkPLTE.ID))   withPlte=true;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SETTINGS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"TIME_BOX_STAGE1\" INTEGER,"+ "\"TIME_BOX_STAGE2\" INTEGER,"+ "\"TIME_BOX_STAGE3\" INTEGER,"+ "\"TIME_BOX_STAGE4\" INTEGER,"+ "\"TIME_BOX_STAGE5\" INTEGER,"+ "\"TIME_BOX_STAGE6\" INTEGER);");}  }
class C{  private static final int monthLength(final int m,final boolean leapYear){  return (leapYear ? monthLeapLength[m - 1] : monthLength[m - 1]);}  }
class C{  public ModuleLoadedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_MODULE_LOADED);}  }
class C{  public IntervalConverter removeIntervalConverter(IntervalConverter converter) throws SecurityException {  checkAlterIntervalConverters();  if (converter == null) {    return null;  }  IntervalConverter[] removed=new IntervalConverter[1];  iIntervalConverters=iIntervalConverters.remove(converter,removed);  return removed[0];}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] toArray(String json){  try {    return (T[])objectMapper.readValue(json,Object[].class);  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  public void remove(Individual individual){  individuals.remove(individual);}  }
class C{  public WMSException(){  this("All your base are belong to us.",null);}  }
class C{  public static String generateNativeGuid(ComputeSystem device){  return String.format("%s+%s+%s",_deviceTypeMap.get(device.getSystemType()),device.getIpAddress(),device.getPortNumber());}  }
class C{  public LocalAppDeployer(LocalDeployerProperties properties){  super(properties);  try {    this.logPathRoot=Files.createTempDirectory(properties.getWorkingDirectoriesRoot(),"spring-cloud-dataflow-");  } catch (  IOException e) {    throw new RuntimeException("Could not create workdir root: " + properties.getWorkingDirectoriesRoot(),e);  }}  }
class C{  public UserModel(){}  }
class C{  public static ArrayList<ProductStatusBean> searchProductsFromStock(Properties ctx,int orgId,String searchString,String trxName) throws OperationException {  searchString=(searchString == null) ? "" : searchString;  StringTokenizer st=new StringTokenizer(searchString,"+");  StringBuffer sqlStmt=new StringBuffer();  sqlStmt.append("SELECT DISTINCT p.Name, s.M_Product_ID, p.UPC FROM M_Product p ");  sqlStmt.append("INNER JOIN M_Storage s ON p.M_Product_ID=s.M_Product_ID ");  sqlStmt.append("WHERE p.AD_Client_ID=? ");  sqlStmt.append("AND s.AD_Org_ID=? ");  String token=null;  while (st.hasMoreTokens()) {    token=st.nextToken().trim();    sqlStmt.append("AND UPPER(p.Name) LIKE UPPER('%" + token + "%' ) ");  }  sqlStmt.append("AND p.IsActive='Y' ORDER BY p.name, s.M_Product_ID, p.UPC");  PreparedStatement pstmt=null;  ResultSet rs=null;  ProductStatusBean bean;  ArrayList<ProductStatusBean> productStatusList=new ArrayList<ProductStatusBean>();  try {    pstmt=DB.prepareStatement(sqlStmt.toString(),trxName);    pstmt.setInt(1,Env.getAD_Client_ID(ctx));    pstmt.setInt(2,orgId);    rs=pstmt.executeQuery();    while (rs.next()) {      bean=new ProductStatusBean();      bean.setProductId(Integer.valueOf(rs.getInt(2)));      bean.setProductName(rs.getString(1));      bean.setBarCode(rs.getString(3));      productStatusList.add(bean);    }    rs.close();  } catch (  SQLException e) {    throw new OperationException(e);  } finally {    DB.close(rs,pstmt);  }  return productStatusList;}  }
class C{  @VisibleForTesting protected String createDCATDatasetInformation(Resource resource){  StringBuilder datasetBuilder=new StringBuilder();  Eml eml=resource.getEml();  String url=cfg.getResourceUrl(resource.getShortname()) + "#Dataset";  datasetBuilder.append(encapsulateObject(url,ObjectTypes.RESOURCE));  datasetBuilder.append("\n");  datasetBuilder.append("a dcat:Dataset");  if (eml.getTitle() != null) {    addPredicateToBuilder(datasetBuilder,"dct:title");    addObjectToBuilder(datasetBuilder,eml.getTitle(),ObjectTypes.LITERAL);  }  if (!eml.getDescription().isEmpty()) {    addPredicateToBuilder(datasetBuilder,"dct:description");    StringBuilder description=new StringBuilder();    Iterator<String> iter=eml.getDescription().iterator();    while (iter.hasNext()) {      String des=Strings.emptyToNull(iter.next());      if (des != null) {        description.append(des);      }      if (iter.hasNext()) {        description.append("\\n");      }    }    addObjectToBuilder(datasetBuilder,description.toString(),ObjectTypes.LITERAL);  }  if (!eml.getKeywords().isEmpty()) {    List<String> keywords=Lists.newArrayList();    for (    KeywordSet keywordSet : eml.getKeywords()) {      for (      String keyword : keywordSet.getKeywords()) {        if (!Strings.isNullOrEmpty(keyword) && !keywords.contains(keyword)) {          keywords.add(keyword);        }      }    }    addPredicateToBuilder(datasetBuilder,"dcat:keyword");    addObjectsToBuilder(datasetBuilder,keywords,ObjectTypes.LITERAL);  }  String theme=settings.get(THEME_URI_KEY);  if (theme != null) {    addPredicateToBuilder(datasetBuilder,"dcat:theme");    addObjectToBuilder(datasetBuilder,theme,ObjectTypes.RESOURCE);  }  for (  Agent contact : eml.getContacts()) {    addPredicateToBuilder(datasetBuilder,"dcat:contactPoint");    String agent=" a vcard:Individual ; vcard:fn \"" + contact.getFullName() + "\"";    if (contact.getEmail() != null) {      agent+="; vcard:hasEmail <mailto:" + contact.getEmail() + "> ";    }    addObjectToBuilder(datasetBuilder,agent,ObjectTypes.OBJECT);  }  if (resource.getCreated() != null) {    addPredicateToBuilder(datasetBuilder,"dct:issued");    addObjectToBuilder(datasetBuilder,parseToIsoDate(resource.getCreated()),ObjectTypes.LITERAL);  }  if (resource.getLastPublished() != null) {    addPredicateToBuilder(datasetBuilder,"dct:modified");    addObjectToBuilder(datasetBuilder,parseToIsoDate(resource.getLastPublished()),ObjectTypes.LITERAL);  }  for (  GeospatialCoverage coverage : eml.getGeospatialCoverages()) {    BBox bb=coverage.getBoundingCoordinates();    addPredicateToBuilder(datasetBuilder,"dct:spatial");    String spatial=" a dct:Location ; locn:geometry \"" + "{ \\\"type\\\": \\\"Polygon\\\", \\\"coordinates\\\": [ [ [" + bb.getMin().getLongitude() + ","+ bb.getMin().getLatitude()+ "], ["+ bb.getMin().getLongitude()+ ","+ bb.getMax().getLatitude()+ "], ["+ bb.getMax().getLongitude()+ ","+ bb.getMax().getLatitude()+ "], ["+ bb.getMax().getLongitude()+ ","+ bb.getMin().getLatitude()+ "], ["+ bb.getMin().getLongitude()+ ","+ bb.getMin().getLatitude()+ "] ] ] }"+ "\" ";    addObjectToBuilder(datasetBuilder,spatial,ObjectTypes.OBJECT);  }  if (resource.getLastPublishedVersionsVersion() != null) {    addPredicateToBuilder(datasetBuilder,"adms:versionInfo");    addObjectToBuilder(datasetBuilder,resource.getLastPublishedVersionsVersion().toPlainString(),ObjectTypes.LITERAL);  }  if (resource.getLastPublishedVersionsChangeSummary() != null) {    addPredicateToBuilder(datasetBuilder,"adms:versionNotes");    addObjectToBuilder(datasetBuilder,resource.getLastPublishedVersionsChangeSummary(),ObjectTypes.LITERAL);  }  String landingPage=cfg.getResourceUrl(resource.getShortname());  addPredicateToBuilder(datasetBuilder,"dcat:landingPage");  addObjectToBuilder(datasetBuilder,landingPage,ObjectTypes.RESOURCE);  if (eml.getHomepageUrl() != null) {    addPredicateToBuilder(datasetBuilder,"foaf:homepage");    addObjectToBuilder(datasetBuilder,eml.getHomepageUrl(),ObjectTypes.RESOURCE);  }  String datasetBaselink=settings.get(DATASET_BASELINK_KEY);  if (resource.getKey() != null && datasetBaselink != null) {    addPredicateToBuilder(datasetBuilder,"dct:identifier");    addObjectToBuilder(datasetBuilder,datasetBaselink + resource.getKey(),ObjectTypes.LITERAL);  }  String publisherBaselink=settings.get(PUBLISHER_BASELINK_KEY);  if (resource.getOrganisation() != null && publisherBaselink != null) {    addPredicateToBuilder(datasetBuilder,"dct:publisher");    String publisherLink=publisherBaselink + resource.getOrganisation().getKey() + "#Organization";    addObjectToBuilder(datasetBuilder,publisherLink,ObjectTypes.RESOURCE);  }  addPredicateToBuilder(datasetBuilder,"dcat:distribution");  String dist=cfg.getResourceArchiveUrl(resource.getShortname());  addObjectToBuilder(datasetBuilder,dist,ObjectTypes.RESOURCE);  String languageLink=settings.get(LANGUAGE_LINK_KEY);  if (languageLink != null) {    addPredicateToBuilder(datasetBuilder,"dct:language");    ParseResult<Language> result=LANGUAGE_PARSER.parse(eml.getMetadataLanguage());    String ln=(result.isSuccessful()) ? languageLink + result.getPayload().getIso2LetterCode().toLowerCase() : languageLink + "en";    addObjectToBuilder(datasetBuilder,ln,ObjectTypes.RESOURCE);  }  datasetBuilder.append(" .\n");  return datasetBuilder.toString();}  }
class C{  public static boolean isStunPacket(DatagramPacket p){  boolean isStunPacket=false;  byte[] data=p.getData();  int offset=p.getOffset();  int length=p.getLength();  if (length >= 20) {    if (data[offset + 4] == Message.MAGIC_COOKIE[0] && data[offset + 5] == Message.MAGIC_COOKIE[1] && data[offset + 6] == Message.MAGIC_COOKIE[2] && data[offset + 7] == Message.MAGIC_COOKIE[3]) {      isStunPacket=true;    } else {      byte b0=data[offset];      boolean areFirstTwoBitsValid=((b0 & 0xC0) == 0);      int total_header_length=((((int)data[2]) & 0xff) << 8) + (((int)data[3]) & 0xff) + 20;      boolean isHeaderLengthValid=(length == total_header_length);      isStunPacket=areFirstTwoBitsValid && isHeaderLengthValid;    }  }  return isStunPacket;}  }
class C{  public static int copy(File in,File out) throws IOException {  Assert.notNull(in,"No input File specified");  Assert.notNull(out,"No output File specified");  return copy(new BufferedInputStream(new FileInputStream(in)),new BufferedOutputStream(new FileOutputStream(out)));}  }
class C{  public void updateFromParent(){  double[] fis=update(m_parentNode);  if (fis == null) {    m_fiParent=null;  } else {    m_fiParent=fis;    double sum=0;    for (int iPos=0; iPos < m_nCardinality; iPos++) {      sum+=m_fiParent[iPos];    }    for (int iPos=0; iPos < m_nCardinality; iPos++) {      m_fiParent[iPos]/=sum;    }  }}  }
class C{  public boolean isEnabled(Object object){  if (enabledMap.containsKey(object)) {    return enabledMap.get(object);  } else {    return false;  }}  }
class C{  private static void prepareDocType(final InputStream body,final Transformer transformer) throws IOException {  try {    final String html="html";    final DocumentType doctype=RsPrettyXml.getDocType(body);    if (null != doctype) {      if (null == doctype.getSystemId() && null == doctype.getPublicId() && html.equalsIgnoreCase(doctype.getName())) {        transformer.setOutputProperty(OutputKeys.METHOD,html);        transformer.setOutputProperty(OutputKeys.VERSION,"5.0");        return;      }      if (null != doctype.getSystemId()) {        transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,doctype.getSystemId());      }      if (null != doctype.getPublicId()) {        transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,doctype.getPublicId());      }    }  }  finally {    body.reset();  }}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_SplitEvaluator instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_SplitEvaluator).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.addElement(mname);    }  }  return newVector.elements();}  }
class C{  private int computeFlags(int curFlags){  curFlags&=~(WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS| WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);  curFlags|=WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  curFlags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;  return curFlags;}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x) throws SQLException {  updateBinaryStream(columnIndex,x,-1);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.606 -0500",hash_original_method="600D2DC769AA1337C3E52515B77C9BA6",hash_generated_method="E20B11B2B01A755621C765189DBA41B7") public DatagramSocket() throws SocketException {  this(0);}  }
class C{  protected Category(Wikipedia wiki,int pageID) throws WikiPageNotFoundException {  this.wiki=wiki;  catDAO=new CategoryDAO(wiki);  createCategory(pageID);}  }
class C{  public GridBoundedConcurrentOrderedMap(int max,Comparator<? super K> comparator){  super(comparator);  A.ensure(max > 0,"max > 0");  this.max=max;}  }
class C{  public static String readToString(InputStream i) throws IOException {  return readToString(i,"UTF-8");}  }
class C{  public void test_DataLoader_loadResource01() throws IOException {  final AbstractTripleStore store=getStore();  try {    final DataLoader dataLoader=new DataLoader(store);    final String resource="com/bigdata/rdf/store/sample-data.ttl";    final String baseURL=new File(resource).toURI().toString();    dataLoader.loadData(new String[]{resource},new String[]{baseURL},new RDFFormat[]{RDFFormat.TURTLE});  }  finally {    store.__tearDownUnitTest();  }}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("p2pToken=" + p2pToken + f);  sb.append("vaSpaceToken=" + vaSpaceToken + f);  return sb.toString();}  }
class C{  private void accomodateIndex(DiscreteVariable variable,int index){  if (!variable.isAccommodateNewCategories()) {    throw new IllegalArgumentException("This variable is not set " + "to accomodate new categories.");  }  if (index >= variable.getNumCategories()) {    adjustCategories(variable,index + 1);  }}  }
class C{  public void storeDomainFor(Variable var,Domain domain){  if (!affectedVariables.contains(var)) {    savedDomains.add(new Pair<Variable,Domain>(var,domain));    affectedVariables.add(var);  }}  }
class C{  public static boolean isMachine(Entity entity){  if (entity instanceof IMissile) {    return true;  }  return false;}  }
class C{  public ParameterException(){  super();  message=null;}  }
class C{  public void clearCache(){  LruCache<Object,I> invocationCache=_invocationCache;  if (invocationCache != null) {    invocationCache.clear();  }}  }
class C{  public static Stream<String> wordsOf(String text){  requireNonNull(text);  return WORDS.splitAsStream(text);}  }
class C{  protected void halt(boolean pausing){}  }
class C{  public boolean isHeader(int adapterPosition){  for (  HeaderItem item : headerItems) {    if (item.getAdapterPosition() == adapterPosition) {      return true;    }    if (item.getAdapterPosition() > adapterPosition) {      break;    }  }  return false;}  }
class C{  public DERSequence(){}  }
class C{  public void testStringVal() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new BinaryDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new BinaryDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING_VAL));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length < 1) {    System.err.printf("Usage: java %s file [inputproperties_str] > json_output%n",CoreNLPToJSON.class.getName());    System.exit(-1);  }  String textFile=args[0];  InputProperties inputProperties=args.length > 1 ? InputProperties.fromString(args[1]) : new InputProperties();  StanfordCoreNLP coreNLP=new StanfordCoreNLP(properties);  EnglishPreprocessor preprocessor=new EnglishPreprocessor(true);  Map<Integer,SourceSegment> annotations=new TreeMap<Integer,SourceSegment>();  LineNumberReader reader=IOTools.getReaderFromFile(textFile);  for (String line; (line=reader.readLine()) != null; ) {    Annotation annotation=coreNLP.process(line);    List<CoreMap> sentences=annotation.get(SentencesAnnotation.class);    if (sentences.size() != 1) {      throw new RuntimeException("Sentence splitting on line: " + String.valueOf(reader.getLineNumber()));    }    CoreMap sentence=sentences.get(0);    Tree tree=sentence.get(TreeAnnotation.class);    tree.indexLeaves();    int[] chunkVector=getChunkVector(tree);    List<CoreLabel> tokens=sentence.get(TokensAnnotation.class);    int numTokens=tokens.size();    SymmetricalWordAlignment alignment=preprocessor.processAndAlign(line);    if (alignment.e().size() != numTokens) {      throw new RuntimeException(String.format("Tokenizer configurations differ: %d/%d",alignment.e().size(),numTokens));    }    SourceSegment segment=new SourceSegment(numTokens);    segment.layoutSpec.addAll(makeLayoutSpec(alignment));    segment.inputProperties=inputProperties.toString();    for (int j=0; j < numTokens; ++j) {      CoreLabel token=tokens.get(j);      String word=token.get(TextAnnotation.class);      segment.tokens.add(unescape(word));      String pos=mapPOS(token.get(PartOfSpeechAnnotation.class));      segment.pos.add(pos);      String ne=token.get(NamedEntityTagAnnotation.class);      segment.ner.add(ne);      segment.chunkVector[j]=chunkVector[j];    }    annotations.put(reader.getLineNumber() - 1,segment);  }  reader.close();  System.err.printf("Processed %d sentences%n",reader.getLineNumber());  final SourceDocument jsonDocument=new SourceDocument(textFile,annotations);  Gson gson=new Gson();  String json=gson.toJson(jsonDocument);  System.out.println(json);}  }
class C{  public void writeBinary(final PacketOutputStream os) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(object);  os.write(baos.toByteArray());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static long[] hash(long[] key,long seed){  HashState hashState=new HashState(seed,seed);  final int longs=key.length;  final int nblocks=longs >> 1;  for (int i=0; i < nblocks; i++) {    long k1=key[2 * i];    long k2=key[(2 * i) + 1];    hashState.blockMix128(k1,k2);  }  int tail=nblocks * 2;  int rem=longs - tail;  long k1=(rem == 0) ? 0 : key[tail];  return hashState.finalMix128(k1,0,longs * Long.BYTES);}  }
class C{  public String maxDecimalPlacesTipText(){  return "The maximum number of digits to print after the decimal " + "point for numeric values";}  }
class C{  @Override public BlazeVertex element(){  return (BlazeVertex)prop.element();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.476 -0500",hash_original_method="580FA0F575468574C9336A7B61DF15D7",hash_generated_method="83E62F628230CD0C38EF31224B3A998E") private static Date parseDate(String string){  try {    return new SimpleDateFormat(ISO_8601_DATE_FORMAT).parse(string);  } catch (  ParseException e) {    return null;  }}  }
class C{  public JavaPairRDD<Polygon,HashSet<Point>> SpatialJoinQueryUsingIndex(PointRDD pointRDD,PolygonRDD polygonRDD){  if (pointRDD.indexedRDD == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDD is null");  }  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<STRtree>,Iterable<Polygon>>> cogroupResult=pointRDD.indexedRDD.cogroup(this.polygonRDD.gridPolygonRDD);  JavaPairRDD<Polygon,HashSet<Point>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PointByPolygonJudgementUsingIndex());  JavaPairRDD<Polygon,HashSet<Point>> joinListResultAfterAggregation=aggregateJoinResultPointByPolygon(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public void resetReadPosition(){  readHead.reset();}  }
class C{  protected String convertDateFormat(String pattern){  boolean inside=false;  boolean mark=false;  boolean modifiedCommand=false;  StringBuilder buf=new StringBuilder();  for (int i=0; i < pattern.length(); i++) {    char c=pattern.charAt(i);    if (c == '%' && !mark) {      mark=true;    } else {      if (mark) {        if (modifiedCommand) {          modifiedCommand=false;          mark=false;        } else {          inside=translateCommand(buf,pattern,i,inside);          if (c == 'O' || c == 'E') {            modifiedCommand=true;          } else {            mark=false;          }        }      } else {        if (!inside && c != ' ') {          buf.append("'");          inside=true;        }        buf.append(c);      }    }  }  if (buf.length() > 0) {    char lastChar=buf.charAt(buf.length() - 1);    if (lastChar != '\'' && inside) {      buf.append('\'');    }  }  return buf.toString();}  }
class C{  private boolean isAssigned(){  return mContactPhone != null;}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements){  return asImmutableList(elements,elements.length);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.PACKAGE__MEMBER:    return ((InternalEList<?>)getMember()).basicRemove(otherEnd,msgs);case TypesPackage.PACKAGE__DOMAIN:  return basicSetDomain(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static byte[] encrypt(byte[] key,byte[] nonce,byte[] a,byte[] m,int numAuthenticationBytes) throws GeneralSecurityException {  long lengthM=m.length;  Cipher cipher=Cipher.getInstance(BLOCK_CIPHER);  cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,BLOCK_CIPHER));  byte[] T=computeCbcMac(nonce,m,a,cipher,numAuthenticationBytes);  List<byte[]> S_i=generateKeyStreamBlocks(lengthM,nonce,cipher);  byte[] S_0=S_i.get(0);  byte[] concatenatedS_i=generateConcatenatedKeyStream(S_i,lengthM);  byte[] encryptedMessage=ByteArrayUtils.xorArrays(m,concatenatedS_i);  byte[] U=ByteArrayUtils.xorArrays(T,ByteArrayUtils.truncate(S_0,numAuthenticationBytes));  byte[] c=ByteArrayUtils.concatenate(encryptedMessage,U);  return c;}  }
class C{  public void close(){}  }
class C{  public ObjectSlot[] slots(){  return slotsToSerialize;}  }
class C{  public boolean equals(final Money money){  if (currency().eq(money.currency()))   return value() == money.value(); else   if (conversionType == Money.ConversionType.BaseCurrencyConversion) {    final Money tmp1=this.clone();    tmp1.convertToBase();    final Money tmp2=money.clone();    tmp2.convertToBase();    return tmp1.equals(tmp2);  } else   if (conversionType == Money.ConversionType.AutomatedConversion) {    final Money tmp=money.clone();    tmp.convertTo(this.currency());    return this.equals(tmp);  } else   throw new LibraryException("currency mismatch and no conversion specified");}  }
class C{  public static DatasetPath analyze(String fullPath){  assert _layoutsInfo != null;  assert _filePattherns != null;  DatasetPath datasetPath=new DatasetPath();  datasetPath.fullPath=fullPath;  Pattern headerPattern=Pattern.compile("hdfs://.*:\\d{4}(/.*)");  Matcher headerMatcher=headerPattern.matcher(fullPath);  if (headerMatcher.matches()) {    fullPath=headerMatcher.group(1);  }  if (fullPath.startsWith("/tmp/")) {    return null;  }  for (  String filePattern : _filePattherns) {    Pattern p=Pattern.compile(filePattern);    Matcher m=p.matcher(fullPath);    if (m.matches()) {      fullPath=m.group(1);    }  }  for (  Layout layoutRecord : _layoutsInfo) {    Pattern p=Pattern.compile(layoutRecord.regex);    Matcher m=p.matcher(fullPath);    if (m.matches()) {      datasetPath.abstractPath=m.group(layoutRecord.leadingPathIndex);      datasetPath.layoutId=layoutRecord.layoutId;      datasetPath.partitionStart=m.group(layoutRecord.partitionIndex);      datasetPath.partitionEnd=m.group(layoutRecord.partitionIndex);      datasetPath.partitionType=layoutRecord.partitionPatternGroup;      break;    }  }  Pattern tcpHeaderPattern=Pattern.compile("tcp://.*:\\d{5}/(.*)");  Matcher tcpheaderMatcher=tcpHeaderPattern.matcher(fullPath);  if (tcpheaderMatcher.matches()) {    datasetPath.abstractPath=tcpheaderMatcher.group(1);  }  if (datasetPath.abstractPath == null) {    datasetPath.abstractPath=fullPath;  }  return datasetPath;}  }
class C{  public T scope(String value){  return attr("scope",value);}  }
class C{  public boolean add(HDR objectToAdd){  hlist.add((HDR)objectToAdd);  return true;}  }
class C{  public void addResult(String name,StringBuffer result){  m_Model.addElement(name);  m_Results.put(name,result);}  }
class C{  public static char toLocationSymbol(int locationValue){switch (locationValue) {case EXTERIOR:    return 'e';case BOUNDARY:  return 'b';case INTERIOR:return 'i';case NONE:return '-';}throw new IllegalArgumentException("Unknown location value: " + locationValue);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  private static DimConstraint parseDimConstraint(String s,BoundSize gapBefore,BoundSize gapAfter,boolean isCols){  DimConstraint dimConstraint=new DimConstraint();  dimConstraint.setGapBefore(gapBefore);  dimConstraint.setGapAfter(gapAfter);  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    try {      if (part.length() == 0)       continue;      if (part.equals("fill")) {        dimConstraint.setFill(true);        continue;      }      if (part.equals("nogrid")) {        dimConstraint.setNoGrid(true);        continue;      }      int ix=-1;      char c=part.charAt(0);      if (c == 's') {        ix=startsWithLenient(part,new String[]{"sizegroup","sg"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setSizeGroup(part.substring(ix).trim());          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          dimConstraint.setShrinkPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"shrink",6,true);        if (ix > -1) {          dimConstraint.setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,new String[]{"growpriority","gp"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setGrowPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"grow",4,true);        if (ix > -1) {          dimConstraint.setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          dimConstraint.setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),isCols,null));          continue;        }      }      UnitValue align=parseAlignKeywords(part,isCols);      if (align != null) {        dimConstraint.setAlign(align);        continue;      }      dimConstraint.setSize(parseBoundSize(part,false,isCols));    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return dimConstraint;}  }
class C{  public TermsBuilder showTermDocCountError(boolean showTermDocCountError){  this.showTermDocCountError=showTermDocCountError;  return this;}  }
class C{  private boolean isMessageEligibleForMyLang(UpdateMessage msg){  String langinmsg=msg.getLanguage();  if (langinmsg == null || langinmsg.equals("*"))   return true;  String langinapp=ApplicationSettings.getLanguage().toLowerCase();  if (langinmsg.length() == 2)   return langinapp.toLowerCase().startsWith(langinmsg.toLowerCase());  if (langinmsg.endsWith("*")) {    langinapp=ApplicationSettings.getLanguage().substring(0,2);    langinmsg=langinmsg.substring(0,langinmsg.indexOf("*"));  }  return langinmsg.equalsIgnoreCase(langinapp);}  }
class C{  public SamReadingContext(Collection<File> files,int numThreads,SamFilterParams filterParams,SAMFileHeader header,ReferenceRanges<String> referenceRanges){  if (header == null) {    throw new NullPointerException();  }  mFiles=files;  mParams=filterParams;  mHeader=header;  mNumThreads=numThreads;  mReferenceRanges=referenceRanges;}  }
class C{  private void addSchemas(){  NamedMediaType nmt;  JPanel panel=new JPanel(new MigLayout("insets 0, fillx"));  Dimension dim=new Dimension(400,30);  panel.setPreferredSize(dim);  panel.setMinimumSize(dim);  panel.setMaximumSize(new Dimension(100000,30));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_AUDIO);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Audio files found (including .mp3, .wav, .ogg, and more)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_VIDEO);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Video files found (including .avi, .mpg, .wmv, and more)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_IMAGES);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Image files found (including .jpg, .gif, .png and more)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_DOCUMENTS);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Document files found (including .html, .txt, .pdf, and more)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_PROGRAMS);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Program files found (including .exe, .zip, .gz, and more)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  nmt=NamedMediaType.getFromDescription(MediaType.SCHEMA_TORRENTS);  tooltipPlaceHolders.put(nmt,I18n.tr("%s Torrent files found (includes only .torrent files. Torrent files point to collections of files shared on the BitTorrent network.)"));  addMediaType(panel,nmt,String.format(tooltipPlaceHolders.get(nmt),0));  add(panel,BorderLayout.LINE_START);}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static int pairHash(final int i,final int j){  if (i == 0 && j == 0) {    return 1;  }  final long li=(long)i;  final long lj=(long)j;  final long k=(li < 0 ? -li : li) + (lj < 0 ? -lj : lj);  assert k >= 0 : k;  final long l=i >= 0 ? k + j : 3 * k - j;  final long x=((k * (k - 1L)) << 1) + l + 2L;  return (int)x;}  }
class C{  public void mousePressed(MouseEvent me){  this.component.setClickedNode(null);  for (  DefaultNode node : this.nodes) {    if (node.isMovable() && node.isPointOverNode(me.getPoint())) {      this.component.setClickedNode(node);      this.component.getClickedNode().setDragOffset(me.getX() - this.component.getClickedNode().getNodePointValue(NodePoint.topLeft).x,me.getY() - this.component.getClickedNode().getNodePointValue(NodePoint.topLeft).y);    }  }  this.component.repaint();}  }
class C{  public void printMessageUserData(IStructuredOutputWriter out,String msgId) throws Exception {}  }
class C{  @Override public void drawDomainGridline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,double value){  Line2D line1=null;  Line2D line2=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    double y0=value;    double y1=value - getYOffset();    double x0=dataArea.getMinX();    double x1=x0 + getXOffset();    double x2=dataArea.getMaxX();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x2,y1);  } else   if (orientation == PlotOrientation.VERTICAL) {    double x0=value;    double x1=value + getXOffset();    double y0=dataArea.getMaxY();    double y1=y0 - getYOffset();    double y2=dataArea.getMinY();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x1,y2);  }  g2.setPaint(plot.getDomainGridlinePaint());  g2.setStroke(plot.getDomainGridlineStroke());  g2.draw(line1);  g2.draw(line2);}  }
class C{  public static AttributeDict parseTypedArgList(ActionAST action,String s,Grammar g){  return parse(action,s,',',g);}  }
class C{  protected IntSetOption(OptionSet set,String name,String description,int[] defaultValues){  super(set,INT_SET_OPTION,name,description);  this.values=this.defaultValues=defaultValues;}  }
class C{  public void scheduleNodeGroupChangeMaintenance(String nodeSelectorPath){  this.serviceSynchTracker.scheduleNodeGroupChangeMaintenance(nodeSelectorPath);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFileRecAc[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_volId = ").append(m_volId);  buffer.append(", m_loc = ").append(m_loc);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_stat = ").append(m_stat);  buffer.append(", m_ts = ").append(m_ts);  buffer.append(", m_size = ").append(m_size);  buffer.append("]");  return buffer.toString();}  }
class C{  public static double computeNewPriority_maxFriends(double priority,int sharedFriends,int myFriends){  double trustMultiplier=sharedFriends / (double)ProximitySimulation.MAX_FRIENDS;  if (sharedFriends == 0) {    trustMultiplier=ProximitySimulation.EPSILON_TRUST;  }  return priority * trustMultiplier;}  }
class C{  public static Log instance(Context context){  Log instance=context.get(logKey);  if (instance == null)   instance=new CeylonLog(context);  return instance;}  }
class C{  public LocoNetMessage nextTransfer(){  if (transferStart) {    transferStart=false;    transferIndex=0;    byte[] header=new byte[40];    header[0]=(byte)transferHandle;    header[1]=(byte)(transferContents.length & 0xFF);    header[2]=(byte)((transferContents.length / 256) & 0xFF);    header[3]=(byte)((transferContents.length / 256 / 256) & 0xFF);    header[4]=0;    header[5]=0;    header[6]=0;    header[7]=0;    for (int i=8; i < 40; i++) {      header[i]=0;    }    if (transferName.length() > 32) {      log.error("name " + transferName + " is too long, truncated");    }    for (int i=0; i < Math.min(32,transferName.length()); i++) {      header[i + 8]=(byte)transferName.charAt(i);    }    return getSendDataMessage(transferType,transferHandle,header);  } else {    int remaining=transferContents.length - transferIndex;    if (remaining < 0) {      log.error("Did not expect to find length " + transferContents.length + " and index "+ transferIndex);    }    if (remaining <= 0) {      return null;    }    int sendSize=remaining;    if (remaining > SENDDATASIZE) {      sendSize=SENDDATASIZE;    }    byte[] buffer=new byte[sendSize];    for (int i=0; i < sendSize; i++) {      buffer[i]=transferContents[transferIndex + i];    }    transferIndex=transferIndex + sendSize;    return getSendDataMessage(transferType,transferHandle,buffer);  }}  }
class C{  private boolean branchCanBePiggyBackedMapAndReduce(Lop tmpNode,Lop node,ArrayList<Lop> execNodes,ArrayList<Lop> queuedNodes){  if (node.getExecLocation() != ExecLocation.MapAndReduce)   return false;  JobType jt=JobType.findJobTypeFromLop(node);  for (  Lop n : execNodes) {    if (n.equals(node))     continue;    if (n.equals(tmpNode) || (isChild(n,node,IDMap) && isChild(tmpNode,n,IDMap))) {      if (hasOtherMapAndReduceParentNode(tmpNode,queuedNodes,node))       return false;      ExecLocation el=n.getExecLocation();      if (el != ExecLocation.Map && el != ExecLocation.MapOrReduce)       return false; else       if (!isCompatible(n,jt))       return false;    }  }  return true;}  }
class C{  protected Vec4 computeSurfacePoint(OrbitView view,Angle heading,Angle pitch){  Globe globe=wwd.getModel().getGlobe();  Matrix transform=globe.computeSurfaceOrientationAtPosition(view.getCenterPosition());  transform=transform.multiply(Matrix.fromRotationZ(heading.multiply(-1)));  transform=transform.multiply(Matrix.fromRotationX(Angle.NEG90.add(pitch)));  Vec4 forward=Vec4.UNIT_Y.transformBy4(transform);  Intersection[] intersections=wwd.getSceneController().getTerrain().intersect(new Line(view.getEyePoint(),forward));  return (intersections != null && intersections.length != 0) ? intersections[0].getIntersectionPoint() : null;}  }
class C{  public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){  mRenderers.add(index,renderer);}  }
class C{  @SuppressWarnings("unchecked") public static BucketList parseListBucket(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    BucketList bucketList=new BucketList();    if (root.getChild("Prefix") != null) {      bucketList.setPrefix(root.getChildText("Prefix"));    }    if (root.getChild("Marker") != null) {      bucketList.setMarker(root.getChildText("Marker"));    }    if (root.getChild("MaxKeys") != null) {      String value=root.getChildText("MaxKeys");      bucketList.setMaxKeys(isNullOrEmpty(value) ? null : Integer.valueOf(value));    }    if (root.getChild("IsTruncated") != null) {      String value=root.getChildText("IsTruncated");      bucketList.setTruncated(isNullOrEmpty(value) ? false : Boolean.valueOf(value));    }    if (root.getChild("NextMarker") != null) {      bucketList.setNextMarker(root.getChildText("NextMarker"));    }    Element ownerElem=root.getChild("Owner");    String id=ownerElem.getChildText("ID");    String displayName=ownerElem.getChildText("DisplayName");    Owner owner=new Owner(id,displayName);    List<Bucket> buckets=new ArrayList<Bucket>();    if (root.getChild("Buckets") != null) {      List<Element> bucketElems=root.getChild("Buckets").getChildren("Bucket");      for (      Element e : bucketElems) {        Bucket bucket=new Bucket();        bucket.setOwner(owner);        bucket.setName(e.getChildText("Name"));        bucket.setLocation(e.getChildText("Location"));        bucket.setCreationDate(DateUtil.parseIso8601Date(e.getChildText("CreationDate")));        if (e.getChild("StorageClass") != null) {          bucket.setStorageClass(StorageClass.parse(e.getChildText("StorageClass")));        }        bucket.setExtranetEndpoint(e.getChildText("ExtranetEndpoint"));        bucket.setIntranetEndpoint(e.getChildText("IntranetEndpoint"));        buckets.add(bucket);      }    }    bucketList.setBucketList(buckets);    return bucketList;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public void testSystem(int system,String trainname) throws Exception {switch (system) {case 0:    SentimentSystemNRC nrcSystem=new SentimentSystemNRC(tweetList);  this.evalModel(nrcSystem.test(trainname));break;case 1:SentimentSystemGUMLTLT gumltltSystem=new SentimentSystemGUMLTLT(tweetList);this.evalModel(gumltltSystem.test(trainname));break;case 2:SentimentSystemKLUE klueSystem=new SentimentSystemKLUE(tweetList);this.evalModel(klueSystem.test(trainname));break;default :throw new IllegalArgumentException("Invalid system: " + system);}}  }
class C{  public void removeCheckConstraint(){  checkConstraint=null;  checkConstraintSQL=null;}  }
class C{  private CompletableFuture<Void> apply(ConfigurationEntry entry){  log.release(entry.getIndex());  return CompletableFuture.completedFuture(null);}  }
class C{  public static String formatTemperature(double temperature,int tempUnit){  if (!isValidTempUnit(tempUnit))   return null;  if (Double.isNaN(temperature))   return "-";  DecimalFormat noDigitsFormat=new DecimalFormat("0");  String noDigitsTemp=noDigitsFormat.format(temperature);  if (noDigitsTemp.equals("-0")) {    noDigitsTemp="0";  }  StringBuilder formatted=new StringBuilder().append(noDigitsTemp).append("\u00b0");  if (tempUnit == WeatherContract.WeatherColumns.TempUnit.CELSIUS) {    formatted.append("C");  } else   if (tempUnit == WeatherContract.WeatherColumns.TempUnit.FAHRENHEIT) {    formatted.append("F");  }  return formatted.toString();}  }
class C{  public static Connection open(DbConnectionConfig dbConConfig) throws Exception {  String cntParam;  String url;  String user;  String pwd;  Connection jdbcConn=null;  cntParam=dbConConfig.getCntParam();  user=dbConConfig.getUser();  pwd=dbConConfig.getPwd();  if (dbConConfig.isCntByDriver()) {    url=dbConConfig.getUrl();    jdbcConn=open(cntParam,url,user,pwd);  } else {    if ((user == null) && (pwd == null))     jdbcConn=open(cntParam); else     jdbcConn=open(cntParam,user,pwd);  }  return jdbcConn;}  }
class C{  public void addInfo(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.INFO,msg,context));  fSeverity=Math.max(fSeverity,INFO);}  }
class C{  public void testMoveRenameDirectoryDestinationRoot() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),null);  igfs.rename(SUBSUBDIR,dir);  checkExist(igfs,igfsSecondary,dir);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  private boolean handleEpgDsUpdateFailed(boolean updatesFailed){  if (Sage.DBG)   System.out.println("ERROR Updating EPG Source " + currDS.getName());  if (Sage.DBG)   System.out.println("ErrorText:" + currDS.getNewErrorText());  if (!currDS.abort) {    updatesFailed=true;synchronized (sources) {      if (alive)       try {        sources.wait(epgErrorSleepTime);      } catch (      InterruptedException e) {      }    }    epgErrorSleepTime*=2;    epgErrorSleepTime=Math.min(Sage.MILLIS_PER_HR,epgErrorSleepTime);  }  return updatesFailed;}  }
class C{  public long numberOfValueSchemaChanges(){  return valueSchemas.size();}  }
class C{  public BufferedFileDataOutput(File file) throws FileNotFoundException, IOException {  this(file,4096);}  }
class C{  public void removeRole(RoleEntity role){  roles.remove(role);}  }
class C{  public static boolean hasCamera(){  return Display.getInstance().hasCamera();}  }
class C{  public static EncryptionKey parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag)) {    return null;  }  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new EncryptionKey(subDer);  }}  }
class C{  public static void openComment(){  Log.write("<!-- ");}  }
class C{  public static <K,V>HashMap<K,V> hashMap(){  return new HashMap<K,V>();}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean matches(String requiredDimensionSymbols){  if (requiredDimensionSymbols.length() != 9) {    throw new IllegalArgumentException("Should be length 9: " + requiredDimensionSymbols);  }  for (int ai=0; ai < 3; ai++) {    for (int bi=0; bi < 3; bi++) {      if (!matches(matrix[ai][bi],requiredDimensionSymbols.charAt(3 * ai + bi))) {        return false;      }    }  }  return true;}  }
class C{  public void addPlugInVirtualDataWindow(String namespace,String name,String factoryClass){  addPlugInVirtualDataWindow(namespace,name,factoryClass,null);}  }
class C{  @Override public void addPropertiesFile(String propertiesFile){  this.propertiesFiles.add(propertiesFile);}  }
class C{  public InputStream createDecryptedStream(byte[] digest,InputStream inputStream) throws IOException {  byte[] finalKeyDigest=Encryption.getFinalKeyDigest(digest,getMasterSeed(),getTransformSeed(),getTransformRounds());  return Encryption.getDecryptedInputStream(inputStream,finalKeyDigest,getEncryptionIv());}  }
class C{  public static void v(String tag,String msg,Throwable thr){  log(LEVEL.VERBOSE,tag,msg,thr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.090 -0400",hash_original_method="DF7A572B056BE70EAA6AE74E5669DA15",hash_generated_method="280942780F4537FA0572B56DF1075B9C") public ArrayMap(int capacity){  super(capacity);}  }
class C{  public JSONNode addNullArrayElement(){  return add(null,null,NodeType.PRIMITIVE);}  }
class C{  public synchronized void addObject(NSObject obj){  set.add(obj);}  }
class C{  public static Address fromP2SHHash(NetworkParameters params,byte[] hash160){  try {    return new Address(params,params.getP2SHHeader(),hash160);  } catch (  WrongNetworkException e) {    throw new RuntimeException(e);  }}  }
class C{  public void insert(int index,long v){  _insert(index,numberNode(v));}  }
class C{  public void fireRequestURL(InfoDisplayEvent evt){  for (  InfoDisplayListener listener : IDListeners) {    listener.requestURL(evt);  }}  }
class C{  protected void repaintRoot(JComponent root){  assert (repaintManager.repaintRoot == null);  if (repaintManager.painting) {    repaintManager.repaintRoot=root;  } else {    root.repaint();  }}  }
class C{  private void initHand(){  hand=new CardGroup(top,false);  handGV=(GridView)findViewById(R.id.handGV);  handGV.setAdapter(hand);  handGV.setOnItemClickListener(this);  handGV.setOnItemLongClickListener(this);  played=new CardGroup(top,false);  playedGV=(GridView)findViewById(R.id.playedGV);  playedGV.setAdapter(played);  playedGV.setOnItemLongClickListener(this);  island=new CardGroup(top,false);  islandGV=(GridView)findViewById(R.id.islandGV);  islandGV.setAdapter(island);  islandGV.setOnItemLongClickListener(this);  islandColumn=findViewById(R.id.islandColumn);  village=new CardGroup(top,false);  villageGV=(GridView)findViewById(R.id.villageGV);  villageGV.setAdapter(village);  villageGV.setOnItemLongClickListener(this);  villageColumn=findViewById(R.id.villageColumn);  trash=new CardGroup(top,false);  trashGV=(GridView)findViewById(R.id.trashGV);  trashGV.setAdapter(trash);  trashGV.setOnItemLongClickListener(this);  trashColumn=findViewById(R.id.trashColumn);  playedHeader=(TextView)findViewById(R.id.playedHeader);  myCardView=findViewById(R.id.myCardView);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.279 -0500",hash_original_method="950AB6742CC7236DE25064405668EBFC",hash_generated_method="74BE81AA68D09D9F104563220CA4F0BA") private void sendDomEvent(KeyEvent event){  mWebView.passToJavaScript(getText().toString(),event);}  }
class C{  public void insertElementAt(E element,int index){  delegate.insertElementAt(element,index);  fireIntervalAdded(this,index,index);}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  bindList.drawScreen(par1,par2,par3);  drawCenteredString(fontRendererObj,"Keybind Manager",width / 2,8,16777215);  drawCenteredString(fontRendererObj,"Keybinds: " + WurstClient.INSTANCE.keybinds.size(),width / 2,20,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  int stringLength(String str){  FontMetrics fm=getFontMetrics(target.getFont());  return fm.stringWidth(str);}  }
class C{  public static UsernameAttribute createUsernameAttribute(String username){  UsernameAttribute attribute=new UsernameAttribute();  try {    attribute.setUsername(username.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException ueex) {    throw new UndeclaredThrowableException(ueex);  }  return attribute;}  }
class C{  public void removeRootView(int rootViewTag){  mShadowNodeRegistry.removeRootNode(rootViewTag);  mOperationsQueue.enqueueRemoveRootView(rootViewTag);}  }
class C{  public Reference<? extends T> poll(){  if (false)   VM.sysWriteln("in poll");  return dequeue();}  }
class C{  public void destroyAds(){  adFetcher.destroyAllAds();}  }
class C{  public void testSubscribe5(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  s.throwOnCall=true;  try {    p.subscribe(s);  } catch (  Exception ok) {  }  s.awaitError();  assertEquals(0,s.nexts);  assertEquals(1,s.errors);  assertEquals(0,s.completes);}  }
class C{  public View createView(final View view,final String name,final String description) throws CouldntSaveDataException {  if (!isLoaded()) {    throw new IllegalStateException("Error: The project has not yet been loaded");  }  Preconditions.checkNotNull(view,"Error: View argument can't be null");  final INaviView newView=m_project.getContent().createView(view.getNative(),name,description);  return ObjectFinders.getObject(newView,m_views);}  }
class C{  public BufferedImage createBufferedImage() throws TranscoderException, IOException {  Rasterizer r=new Rasterizer();  r.setTranscodingHints(hints);  r.transcode(input,null);  return img;}  }
class C{  public final void testWriteint02() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dos.write(myMessage[i]);      }      assertTrue("write",Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  @DELETE @Path("backup/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteBackup(@QueryParam("tag") String backupTag){  log.info("Received delete backup request, backup tag={}",backupTag);  if (backupTag == null) {    throw APIException.badRequests.parameterIsNotValid(backupTag);  }  List<String> descParams=getDescParams(backupTag);  try {    backupOps.deleteBackup(backupTag);    auditBackup(OperationTypeEnum.DELETE_BACKUP,AuditLogManager.AUDITLOG_SUCCESS,null,descParams.toArray());  } catch (  BackupException e) {    log.error("Failed to delete backup(tag= {}), e=",backupTag,e);    descParams.add(e.getLocalizedMessage());    auditBackup(OperationTypeEnum.DELETE_BACKUP,AuditLogManager.AUDITLOG_FAILURE,null,descParams.toArray());    throw APIException.internalServerErrors.updateObjectError("Backup files",e);  }  return Response.ok().build();}  }
class C{  private void addToChart(Trie trie,int j,boolean isUnary){  if (!isUnary && trie.hasRules()) {    DotNode dotNode=new DotNode(i,j,trie,new ArrayList<>(nodeStack),null);    addToCandidates(dotNode);  }  for (int l=j + 1; l <= sentence.length(); l++)   consume(trie,j,l);}  }
class C{  public int findRowIndex(String value,int column){  checkColumn(column);  if (columnTypes[column] == STRING) {    String[] stringData=(String[])columns[column];    if (value == null) {      for (int row=0; row < rowCount; row++) {        if (stringData[row] == null)         return row;      }    } else {      for (int row=0; row < rowCount; row++) {        if (stringData[row] != null && stringData[row].equals(value)) {          return row;        }      }    }  } else {    for (int row=0; row < rowCount; row++) {      String str=getString(row,column);      if (str == null) {        if (value == null) {          return row;        }      } else       if (str.equals(value)) {        return row;      }    }  }  return -1;}  }
class C{  public void removeRow(Comparable rowKey){  ParamChecks.nullNotPermitted(rowKey,"rowKey");  int index=getRowIndex(rowKey);  if (index >= 0) {    removeRow(index);  } else {    throw new UnknownKeyException("Unknown key: " + rowKey);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final boolean matchUpperCase(char[] uppercaseTarget){  if (ndx + uppercaseTarget.length > total) {    return false;  }  int j=ndx;  for (int i=0; i < uppercaseTarget.length; i++, j++) {    char c=CharUtil.toUpperAscii(input[j]);    if (c != uppercaseTarget[i]) {      return false;    }  }  return true;}  }
class C{  public boolean isOutDated(boolean checkClass){  String jsp=ctxt.getJspFile();  if (jsw != null && (ctxt.getOptions().getModificationTestInterval() > 0)) {    if (jsw.getLastModificationTest() + (ctxt.getOptions().getModificationTestInterval() * 1000) > System.currentTimeMillis()) {      return false;    } else {      jsw.setLastModificationTest(System.currentTimeMillis());    }  }  long jspRealLastModified=0;  File targetFile;  if (checkClass) {    targetFile=new File(ctxt.getClassFileName());  } else {    targetFile=new File(ctxt.getServletJavaFileName());  }  long targetLastModified=targetFile.lastModified();  if (checkClass) {    JspRuntimeContext rtctxt=ctxt.getRuntimeContext();    String className=ctxt.getFullClassName();    long cachedTime=rtctxt.getBytecodeBirthTime(className);    if (cachedTime > targetLastModified) {      targetLastModified=cachedTime;    } else {      rtctxt.setBytecode(className,null);    }  }  if (targetLastModified == 0L)   return true;  if (jsw != null) {    File jspFile=jsw.getJspFile();    if (jspFile != null) {      jspRealLastModified=jspFile.lastModified();    }  }  if (jspRealLastModified == 0 || targetLastModified < jspRealLastModified) {    try {      URL jspUrl=ctxt.getResource(jsp);      if (jspUrl == null) {        ctxt.incrementRemoved();        return false;      }      URLConnection uc=jspUrl.openConnection();      if (uc instanceof JarURLConnection) {        jspRealLastModified=((JarURLConnection)uc).getJarEntry().getTime();      } else {        jspRealLastModified=uc.getLastModified();      }      uc.getInputStream().close();    } catch (    Exception e) {      e.printStackTrace();      return true;    }  }  if (checkClass && jsw != null) {    jsw.setServletClassLastModifiedTime(targetLastModified);  }  if (targetLastModified < jspRealLastModified) {    jspModTime=jspRealLastModified;    if (log.isLoggable(Level.FINE)) {      log.fine("Compiler: outdated: " + targetFile + " "+ targetLastModified);    }    return true;  }  if (jsw == null) {    return false;  }  List<String> depends=jsw.getDependants();  if (depends == null) {    return false;  }  for (  String include : depends) {    try {      URL includeUrl=ctxt.getResource(include);      if (includeUrl == null) {        return true;      }      URLConnection includeUconn=includeUrl.openConnection();      long includeLastModified=0;      if (includeUconn instanceof JarURLConnection) {        includeLastModified=((JarURLConnection)includeUconn).getJarEntry().getTime();      } else {        includeLastModified=includeUconn.getLastModified();      }      includeUconn.getInputStream().close();      if (includeLastModified > targetLastModified) {        if (include.endsWith(".tld")) {          ctxt.clearTaglibs();          ctxt.clearTagFileJarUrls();        }        return true;      }    } catch (    Exception e) {      e.printStackTrace();      return true;    }  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ProcessHandler createProcess(@NotNull final GeneralCommandLine commandLine) throws ExecutionException {  return createProcess(commandLine,false);}  }
class C{  protected void updateTurnOverCounter(SimplifiedReceipt SimplifiedReceipt){  double sumTaxTypeNormal=Precision.round(SimplifiedReceipt.getTaxSetNormal(),2);  double sumTaxTypeErmaessigt1=Precision.round(SimplifiedReceipt.getTaxSetErmaessigt1(),2);  double sumTaxTypeErmaessigt2=Precision.round(SimplifiedReceipt.getTaxSetErmaessigt2(),2);  double sumTaxTypeNull=Precision.round(SimplifiedReceipt.getTaxSetNull(),2);  double sumTaxTypeBesonders=Precision.round(SimplifiedReceipt.getTaxSetBesonders(),2);  long tempSum=0;  tempSum+=Precision.round(sumTaxTypeNormal * 100,0);  tempSum+=Precision.round(sumTaxTypeErmaessigt1 * 100,0);  tempSum+=Precision.round(sumTaxTypeErmaessigt2 * 100,0);  tempSum+=Precision.round(sumTaxTypeNull * 100,0);  tempSum+=Precision.round(sumTaxTypeBesonders * 100,0);  turnoverCounter+=(tempSum);}  }
class C{  public boolean visit(TypeDeclaration node){  return true;}  }
class C{  public boolean isParseRobotsTxt(){  return parseRobotsTxt;}  }
class C{  public void addTimexAnnotation(String timexType,int begin,int end,Sentence sentence,String timexValue,String timexQuant,String timexFreq,String timexMod,String emptyValue,String timexId,String foundByRule,JCas jcas){  Timex3 annotation=new Timex3(jcas);  annotation.setBegin(begin);  annotation.setEnd(end);  annotation.setFilename(sentence.getFilename());  annotation.setSentId(sentence.getSentenceId());  annotation.setEmptyValue(emptyValue);  FSIterator iterToken=jcas.getAnnotationIndex(Token.type).subiterator(sentence);  String allTokIds="";  while (iterToken.hasNext()) {    Token tok=(Token)iterToken.next();    if (tok.getBegin() <= begin && tok.getEnd() > begin) {      annotation.setFirstTokId(tok.getTokenId());      allTokIds="BEGIN<-->" + tok.getTokenId();    }    if ((tok.getBegin() > begin) && (tok.getEnd() <= end)) {      allTokIds=allTokIds + "<-->" + tok.getTokenId();    }  }  annotation.setAllTokIds(allTokIds);  annotation.setTimexType(timexType);  annotation.setTimexValue(timexValue);  annotation.setTimexId(timexId);  annotation.setFoundByRule(foundByRule);  if ((timexType.equals("DATE")) || (timexType.equals("TIME"))) {    if ((timexValue.startsWith("X")) || (timexValue.startsWith("UNDEF"))) {      annotation.setFoundByRule(foundByRule + "-relative");    } else {      annotation.setFoundByRule(foundByRule + "-explicit");    }  }  if (!(timexQuant == null)) {    annotation.setTimexQuant(timexQuant);  }  if (!(timexFreq == null)) {    annotation.setTimexFreq(timexFreq);  }  if (!(timexMod == null)) {    annotation.setTimexMod(timexMod);  }  annotation.addToIndexes();  this.timex_counter++;  Logger.printDetail(annotation.getTimexId() + "EXTRACTION PHASE:   " + " found by:"+ annotation.getFoundByRule()+ " text:"+ annotation.getCoveredText());  Logger.printDetail(annotation.getTimexId() + "NORMALIZATION PHASE:" + " found by:"+ annotation.getFoundByRule()+ " text:"+ annotation.getCoveredText()+ " value:"+ annotation.getTimexValue());}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor,Vector2 axis){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  localAxis1.set(bodyA.getLocalVector(axis));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public void addMetric(Metric metric){  getMetrics().add(metric);}  }
class C{  public static boolean createNewResourceEL(Resource res){  try {    res.createFile(false);    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  @Parameters public static Collection<Object[]> params(){  final Object[][] params={{"{f}","FeatureFile"},{"{c}","01"},{"{f}{c}","FeatureFile01"},{"Foo","Foo"},{"",""}};  return Arrays.asList(params);}  }
class C{  public void drawTitle(Canvas canvas,int x,int y,int width,Paint paint){  if (mRenderer.isShowLabels()) {    paint.setColor(mRenderer.getLabelsColor());    paint.setTextAlign(Align.CENTER);    paint.setTextSize(mRenderer.getChartTitleTextSize());    drawString(canvas,mRenderer.getChartTitle(),x + width / 2,y + mRenderer.getChartTitleTextSize(),paint);  }}  }
class C{  public EnumDyeColor byOffsetMetadata(int meta){  return EnumDyeColor.byMetadata(meta + metaOffset);}  }
class C{  public void testGetF12Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF12Momentary();  assertEquals(expResult,result);}  }
class C{  public boolean contains(T sample){  return this.freqDist.containsKey(sample);}  }
class C{  public static List<Integer> findSubstring(String S,String[] L){  List<Integer> res=new ArrayList<Integer>();  if (S == null || L == null || L.length == 0)   return res;  int len=L[0].length();  Map<String,Integer> map=new HashMap<String,Integer>();  for (  String w : L)   map.put(w,map.containsKey(w) ? map.get(w) + 1 : 1);  for (int i=0; i <= S.length() - len * L.length; i++) {    Map<String,Integer> copy=new HashMap<String,Integer>(map);    for (int j=0; j < L.length; j++) {      String str=S.substring(i + j * len,i + j * len + len);      if (copy.containsKey(str)) {        int count=copy.get(str);        if (count == 1)         copy.remove(str); else         copy.put(str,count - 1);        if (copy.isEmpty()) {          res.add(i);          break;        }      } else       break;    }  }  return res;}  }
class C{  public static void openExternalUrl(String url){  String osName=System.getProperty("os.name");  try {    if (osName.startsWith("Mac OS")) {      Class<?> fileMgr=Class.forName("com.apple.eio.FileManager");      Method openURL=fileMgr.getDeclaredMethod("openURL",new Class[]{String.class});      openURL.invoke(null,new Object[]{url});    } else     if (osName.startsWith("Windows")) {      Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);    } else {      String prefBrowser=Raptor.getInstance().getPreferences().getString(PreferenceKeys.APP_LINUX_UNIX_BROWSER_NAME);      if (StringUtils.isBlank(prefBrowser)) {        String[] browsers={"firefox","opera","konqueror","epiphany","mozilla","netscape"};        String browser=null;        for (int count=0; count < browsers.length && browser == null; count++) {          if (Runtime.getRuntime().exec(new String[]{"which",browsers[count]}).waitFor() == 0) {            browser=browsers[count];          }        }        if (browser == null) {          throw new Exception("Could not find web browser");        } else {          new ProcessBuilder(browser,url).start();        }      } else {        new ProcessBuilder(prefBrowser,url).start();      }    }  } catch (  Exception e) {    LOG.error("Error occured launching browser:",e);  }}  }
class C{  public Boolean isWSSubscriptionPolicySupport(){  return wsSubscriptionPolicySupport;}  }
class C{  public FIXMessage(int maxFieldCount,int fieldCapacity){  fields=new FIXField[maxFieldCount];  for (int i=0; i < fields.length; i++)   fields[i]=new FIXField(fieldCapacity);  count=0;}  }
class C{  public void pageLoadingFinished(){  mLoadTracker.pageLoadingFinished();}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  @Exported("up_0") protected void startup_0() throws Exception {  startup();}  }
class C{  public static void monitorSignal(final Object monitor){synchronized (monitor) {    monitor.notifyAll();  }}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mCapabilities.size());  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    dest.writeInt(entry.getKey());    dest.writeString(entry.getValue());  }}  }
class C{  public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  for (int i=0; i < size; i++) {    double x=Math.random();    double y=Math.random();    points[i]=new TwoDPoint(x,y);  }  return points;}  }
class C{  @SuppressWarnings("UnusedReturnValue") private boolean executeReveal(@NonNull DecoEvent event){  if ((event.getEventType() != DecoEvent.EventType.EVENT_SHOW) && (event.getEventType() != DecoEvent.EventType.EVENT_HIDE)) {    return false;  }  if (event.getEventType() == DecoEvent.EventType.EVENT_SHOW) {    setVisibility(View.VISIBLE);  }  if (mChartSeries != null) {    for (int i=0; i < mChartSeries.size(); i++) {      if ((event.getIndexPosition() == i) || (event.getIndexPosition() < 0)) {        ChartSeries chartSeries=mChartSeries.get(i);        chartSeries.startAnimateHideShow(event,event.getEventType() == DecoEvent.EventType.EVENT_SHOW);      }    }  }  return true;}  }
class C{  public void addGraphicsToScene(MapContent mapContent){  mapContent.add(grid);}  }
class C{  public double calculateLogLikelihood(){  if (!intervalsKnown)   setupIntervals();  double logL=0.0;  double currentTime=0.0;  int popIndex=0;  ConstantPopulation cp=new ConstantPopulation(Units.Type.YEARS);  for (int j=0; j < intervalCount; j++) {    cp.setN0(popSizeParameter.getParameterValue(popIndex));    if (getIntervalType(j) == CoalescentEventType.COALESCENT) {      popIndex+=1;    }    logL+=calculateIntervalLikelihood(cp,intervals[j],currentTime,lineageCounts[j],getIntervalType(j));    int diff=getCoalescentEvents(j) - 1;    for (int k=0; k < diff; k++) {      cp.setN0(popSizeParameter.getParameterValue(popIndex));      logL+=calculateIntervalLikelihood(cp,0.0,currentTime,lineageCounts[j] - k - 1,CoalescentEventType.COALESCENT);      popIndex+=1;    }    currentTime+=intervals[j];  }  return logL;}  }
class C{  public static boolean loadRgbzMetadata(final Context context,Uri contentUri,Metadata metadata){  if (RefocusHelper.isRGBZ(context,contentUri)) {    metadata.setHasRgbzData(true);    return true;  }  return false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void aboutToProcess(int address,int reg){  boolean first=(endIndices == null);  if ((address == lastAddress) && !first) {    return;  }  if (address < lastAddress) {    throw new RuntimeException("shouldn't happen");  }  if (first || (reg >= endIndices.length)) {    int newSz=reg + 1;    RegisterSpecSet newRegs=new RegisterSpecSet(newSz);    int[] newEnds=new int[newSz];    Arrays.fill(newEnds,-1);    if (!first) {      newRegs.putAll(regs);      System.arraycopy(endIndices,0,newEnds,0,endIndices.length);    }    regs=newRegs;    endIndices=newEnds;  }}  }
class C{  @Override public void customizePopupMenu(ResultHistoryList history,int index,JPopupMenu menu){  menu.addSeparator();  AbstractClassifyResultHistoryPlugin.populateMenu(ClassifyTab.this,history,index,menu);}  }
class C{  public static void writeData(@NonNull byte[] data,@NonNull UUID characteristic,@NonNull UUID service,@NonNull BlueteethDevice device,OnCharacteristicWriteListener writeListener){  if (device.isConnected()) {    device.discoverServices(null);  } else {    device.connect(false,null);  }}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  long localLong, globalLong;  localLong=mDPM.getMaximumTimeToLock(mDeviceAdminSample);  globalLong=mDPM.getMaximumTimeToLock(null);  mMaxTimeScreenLock.setSummary(localGlobalSummary(localLong / MS_PER_MINUTE,globalLong / MS_PER_MINUTE));  int local, global;  local=mDPM.getMaximumFailedPasswordsForWipe(mDeviceAdminSample);  global=mDPM.getMaximumFailedPasswordsForWipe(null);  mMaxFailures.setSummary(localGlobalSummary(local,global));}  }
class C{  protected static boolean isConnected(){  NetworkInfo info=getNetworkInfo();  return (info != null && info.isConnected());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYGON;    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    ArrayList<com.vividsolutions.jts.geom.Geometry> pointList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    for (    ShapeFileRecord record : input.records) {      recJTS=record.getGeometry().getJTSGeometries();switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}double minX=Double.MAX_VALUE;double maxX=Double.MIN_VALUE;double minY=Double.MAX_VALUE;double maxY=Double.MIN_VALUE;for (i=0; i < vertices.length; i++) {Coordinate coordinate=new Coordinate();coordinate.x=vertices[i][0];coordinate.y=vertices[i][1];pointList.add(factory.createPoint(coordinate));if (vertices[i][0] < minX) {minX=vertices[i][0];}if (vertices[i][0] > maxX) {maxX=vertices[i][0];}if (vertices[i][1] < minY) {minY=vertices[i][1];}if (vertices[i][1] > maxY) {maxY=vertices[i][1];}}Envelope env=new Envelope(minX,maxX,minY,maxY);com.vividsolutions.jts.geom.Geometry geom=factory.buildGeometry(pointList);DelaunayTriangulationBuilder vdb=new DelaunayTriangulationBuilder();vdb.setSites(geom);com.vividsolutions.jts.geom.Geometry vd=vdb.getTriangles(factory);for (int a=0; a < vd.getNumGeometries(); a++) {com.vividsolutions.jts.geom.Geometry g=vd.getGeometryN(a);if (g instanceof com.vividsolutions.jts.geom.Polygon) {com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int[] parts=new int[p.getNumInteriorRing() + 1];Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Exterior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}for (int b=0; b < p.getNumInteriorRing(); b++) {parts[b + 1]=pnts.size();buffCoords=p.getInteriorRingN(b).getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Interior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}}PointsList pl=new PointsList(pnts);whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());Object[] rowData=new Object[1];rowData[0]=new Double(record.getRecordNumber());output.addRecord(wbPoly);}}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public ParsedBooleanQuery(String sourceString,TupleExpr tupleExpr){  super(sourceString,tupleExpr);}  }
class C{  public static String join(Collection<?> collection,String separator){  if (collection == null) {    return null;  }  if (separator == null) {    separator="";  }  StringBuffer buff=new StringBuffer();  for (  Object object : collection) {    if (buff.length() > 0) {      buff.append(separator);    }    buff.append(object);  }  return buff.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void CALL_RESULT(String owner,String name,String desc){  if (env.topFrame().weInvokedInstrumentedCode())   return; else {    env.topFrame().disposeMethInvokeArgs(desc);  }}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  public void initialise(){  average=0.0;  max=0.0;  min=0.0;  observations=0;  MatrixUtils.fill(jointCount,0);  MatrixUtils.fill(prevCount,0);  MatrixUtils.fill(nextCount,0);}  }
class C{  private List<BinaryAnnotation> createZipkinBinaryAnnotations(org.apache.htrace.core.Span span,Endpoint ep){  List<BinaryAnnotation> l=new ArrayList<BinaryAnnotation>();  for (  Map.Entry<String,String> e : span.getKVAnnotations().entrySet()) {    BinaryAnnotation binaryAnn=new BinaryAnnotation();    binaryAnn.setAnnotation_type(AnnotationType.BYTES);    binaryAnn.setKey(e.getKey());    try {      binaryAnn.setValue(e.getValue().getBytes("UTF-8"));    } catch (    UnsupportedEncodingException ex) {      LOG.error("Error encoding string as UTF-8",ex);    }    binaryAnn.setHost(ep);    l.add(binaryAnn);  }  return l;}  }
class C{  public MetricSchemaRecord(){}  }
class C{  public int countTimeSeries(String cfName,Calendar startTime,Calendar endTime){  return _dbClient.countTimeSeries(cfName,startTime,endTime);}  }
class C{  public ServerNotActiveException(String s){  super(s);}  }
class C{  protected int entryHashCode(HashEntry entry){  return entry.hashCode;}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public void onGoToSantorini(View view){  if (!checkReady()) {    return;  }  mStreetViewPanorama.setPosition(SANTORINI);}  }
class C{  public StorageFileEntity createStorageFileEntity(StorageUnitEntity storageUnitEntity,String filePath,Long fileSizeInBytes,Long rowCount){  StorageFileEntity storageFileEntity=new StorageFileEntity();  storageFileEntity.setStorageUnit(storageUnitEntity);  storageFileEntity.setPath(filePath);  storageFileEntity.setFileSizeBytes(fileSizeInBytes);  storageFileEntity.setRowCount(rowCount);  return storageFileDao.saveAndRefresh(storageFileEntity);}  }
class C{  public MimSearchEditor2(MimBuildRunner runner){  this(runner,"Result MAG");}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize << 1);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String name(){  return name;}  }
class C{  public static Camera createPixelAlignedUL(int pixelWidth,int pixelHeight){  final boolean upperLeftOrigin=true;  Camera result=new Camera(pixelWidth,pixelHeight);  return result;}  }
class C{  public void testManySimilarities() throws IOException {  int[] dimensions=new int[]{2,3,4,10,20,30,50,100,1000};  int numTrials=100_000;  for (  int dimension : dimensions) {    ArrayList<Double> scores=new ArrayList<>();    for (int trial=0; trial < numTrials; ++trial) {      float[] coords1=new float[dimension];      float[] coords2=new float[dimension];      Random random=new Random();      for (int i=0; i < dimension; ++i) {        coords1[i]=(float)random.nextGaussian();        coords2[i]=(float)random.nextGaussian();      }      RealVector vector1=new RealVector(coords1);      RealVector vector2=new RealVector(coords2);      scores.add(vector1.measureOverlap(vector2));    }    Collections.sort(scores);    PrintWriter writer=new PrintWriter("C:\\Users\\Widdows\\Dropbox\\VectorReasoning\\scripts\\scores" + dimension + "dim.txt","UTF-8");    for (    double score : scores) {      writer.println(score);    }    writer.close();    System.out.println(String.format("Dimension: %d. Mean: %f. Variance: %f.",dimension,StatUtils.getMean(scores),StatUtils.getVariance(scores)));  }}  }
class C{  public void reply(SerialReply r){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(r.getAddr());  if (node != null) {    node.markChanges(r);  }}  }
class C{  @Nullable static ClassMemberDeclaration newDeclaration(Node n,Map<String,Node> classes){  Node fullName=getFullName(n);  if (!fullName.isGetProp() || containsThis(fullName)) {    return null;  }  boolean isStatic=isStatic(fullName);  String className=isStatic ? fullName.getFirstChild().getQualifiedName() : fullName.getFirstFirstChild().getQualifiedName();  if (!classes.containsKey(className)) {    return null;  }  Node classNode=classes.get(className);  String memberName=fullName.getLastChild().getString();  return new ClassMemberDeclaration(n,isStatic,classNode,memberName);}  }
class C{  public static boolean isAvailable(){  return proxy != null;}  }
class C{  @Override public void close() throws IOException {  try (OutputStream file=fileStream){    flush();  } }  }
class C{  public static boolean executeAppleScript(String scriptBody,String... searchValues){  if (!SystemUtilities.isMac()) {    log.error("AppleScript can only be invoked from Apple OS");    return false;  }  return !execute(new String[]{"osascript","-e",scriptBody},searchValues).isEmpty();}  }
class C{  public void animateHeart(View imageLovedOn,View imageLovedOff,boolean on){  imageLovedOn.setVisibility(View.VISIBLE);  imageLovedOff.setVisibility(View.VISIBLE);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {    viewPropertyStartCompat(imageLovedOff.animate().scaleX(on ? 0 : 1).scaleY(on ? 0 : 1).alpha(on ? 0 : 1));    viewPropertyStartCompat(imageLovedOn.animate().scaleX(on ? 1 : 0).scaleY(on ? 1 : 0).alpha(on ? 1 : 0));  }}  }
class C{  public static void main(String[] args){  Queue queue=new Queue();  for (int i=1; i <= 20; i++) {    queue.enqueue(i);  }  while (!queue.empty()) {    System.out.print(queue.dequeue() + " ");  }  System.out.println();}  }
class C{  public String to_simple_string() throws internal_error {  String result;  production_part part;  if (_the_production.lhs() != null && _the_production.lhs().the_symbol() != null && _the_production.lhs().the_symbol().name() != null)   result=_the_production.lhs().the_symbol().name(); else   result="$$NULL$$";  result+=" ::= ";  for (int i=0; i < _the_production.rhs_length(); i++) {    if (i == _dot_pos)     result+="(*) ";    if (_the_production.rhs(i) == null) {      result+="$$NULL$$ ";    } else {      part=_the_production.rhs(i);      if (part == null)       result+="$$NULL$$ "; else       if (part.is_action())       result+="{ACTION} "; else       if (((symbol_part)part).the_symbol() != null && ((symbol_part)part).the_symbol().name() != null)       result+=((symbol_part)part).the_symbol().name() + " "; else       result+="$$NULL$$ ";    }  }  if (_dot_pos == _the_production.rhs_length())   result+="(*) ";  return result;}  }
class C{  public BufferedFile(String filename,String mode,int bufferSize) throws IOException {  this(new File(filename),mode,bufferSize);}  }
class C{  public boolean isOneTime(){  Object oo=get_Value(COLUMNNAME_IsOneTime);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  public static boolean isLargeObject(int type){  if (type == Value.BLOB || type == Value.CLOB) {    return true;  }  return false;}  }
class C{  private void load(){  IExtensionRegistry registry=Platform.getExtensionRegistry();  IExtensionPoint point=registry.getExtensionPoint(EXTENTION_POINT);  for (  IExtension extension : point.getExtensions()) {    for (    IConfigurationElement element : extension.getConfigurationElements()) {      SourcePluginEntry entry=new SourcePluginEntry(element);      entries.put(entry.getId(),entry);      try {        SourcePlugin p=entry.getInstance();        pluginToId.put(p,entry.getId());        ElementTransformers t=new ElementTransformers(entry,p.getElementImageProvider(),p.getElementImageDescriptorProvider(),p.getElementColorProvider(),p.getElementShapeProvider(),p.getElementEditorProvider(),p.getElementSorter());        for (        Class<? extends Element> c : p.getElementClasses()) {          transformers.put(c,t);        }      } catch (      CoreException e) {        e.printStackTrace();      }    }  }}  }
class C{  public static void main(String[] args){  try {    new Publisher(args).run();  } catch (  IOException|TimeoutException e) {    e.printStackTrace();    System.exit(-1);  }  System.exit(0);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STORE_NAME;case 2:  return SCOPE;case 3:return PERSIST;default :return null;}}  }
class C{  private VariableReference createOrReuseVariable(TestCase test,Type parameterType,int position,int recursionDepth,VariableReference exclude,boolean allowNull,boolean excludeCalleeGenerators,boolean canUseMocks) throws ConstructionFailedException {  if (Properties.SEED_TYPES && parameterType.equals(Object.class)) {    return createOrReuseObjectVariable(test,position,recursionDepth,exclude,allowNull,canUseMocks);  }  double reuse=Randomness.nextDouble();  List<VariableReference> objects=getCandidatesForReuse(test,parameterType,position,exclude,allowNull,canUseMocks);  GenericClass clazz=new GenericClass(parameterType);  boolean isPrimitiveOrSimilar=clazz.isPrimitive() || clazz.isWrapperType() || clazz.isEnum()|| clazz.isClass()|| clazz.isString();  if (isPrimitiveOrSimilar && !objects.isEmpty() && reuse <= Properties.PRIMITIVE_REUSE_PROBABILITY) {    logger.debug(" Looking for existing object of type {}",parameterType);    VariableReference reference=Randomness.choice(objects);    return reference;  } else   if (!isPrimitiveOrSimilar && !objects.isEmpty() && (reuse <= Properties.OBJECT_REUSE_PROBABILITY)) {    if (logger.isDebugEnabled()) {      logger.debug(" Choosing from {} existing objects: {}",objects.size(),Arrays.toString(objects.toArray()));    }    VariableReference reference=Randomness.choice(objects);    logger.debug(" Using existing object of type {}: {}",parameterType,reference);    return reference;  }  VariableReference created=createVariable(test,parameterType,position,recursionDepth,exclude,allowNull,excludeCalleeGenerators,canUseMocks,true);  if (created != null) {    return created;  }  if (objects.isEmpty()) {    if (allowNull) {      return createNull(test,parameterType,position,recursionDepth);    } else {      throw new ConstructionFailedException("No objects and generators for type " + parameterType);    }  }  if (logger.isDebugEnabled()) {    logger.debug(" Choosing from {} existing objects: {}",objects.size(),Arrays.toString(objects.toArray()));  }  VariableReference reference=Randomness.choice(objects);  assert canUseMocks || !(test.getStatement(reference.getStPosition()) instanceof FunctionalMockStatement);  logger.debug(" Using existing object of type {}: {}",parameterType,reference);  return reference;}  }
class C{  public void addListener(NetListener theListener){  _myNetPlug.addListener(theListener);}  }
class C{  public <S extends T>Iterable<S> save(Iterable<S> entities){  List<S> saved=new ArrayList<S>();  for (  S entity : entities) {    saved.add(save(entity));  }  return saved;}  }
class C{  public static void copyStream(InputStream in,OutputStream out,boolean closeIn,boolean closeOut) throws IOException {  try {    copyStreamNoClose(in,out);  }  finally {    if (closeIn) {      safeClose(in);    }    if (closeOut) {      safeClose(out);    }  }}  }
class C{  public void putStringArray(String key,String[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public WorldEditListener(NukkitWorldEdit plugin){  this.plugin=plugin;}  }
class C{  public StringMatcher.Position find(String text,int start,int end){  if (text == null)   throw new IllegalArgumentException();  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  if (end < 0 || start >= end)   return null;  if (fLength == 0)   return new Position(start,start);  if (fIgnoreWildCards) {    int x=posIn(text,start,end);    if (x < 0)     return null;    return new Position(x,x + fLength);  }  int segCount=fSegments.length;  if (segCount == 0)   return new Position(start,end);  int curPos=start;  int matchStart=-1;  int i;  for (i=0; i < segCount && curPos < end; ++i) {    String current=fSegments[i];    int nextMatch=regExpPosIn(text,curPos,end,current);    if (nextMatch < 0)     return null;    if (i == 0)     matchStart=nextMatch;    curPos=nextMatch + current.length();  }  if (i < segCount)   return null;  return new Position(matchStart,curPos);}  }
class C{  public NullPointerException(){}  }
class C{  private final double preNorm(NumberVector v,final int start,final int end){  double agg=0.;  for (int d=start; d < end; d++) {    final double xd=v.doubleValue(d);    final double delta=xd >= 0. ? xd : -xd;    agg+=Math.pow(delta,p);  }  return agg;}  }
class C{  public String toCompleteString(){  String ret="";  if (!lines.isEmpty() && !Config.v().noSourceInfo) {    for (    SourceLocationTag line : lines) {      ret+="// " + line + "\n";    }  }  ret+=toSignatureString();  return ret;}  }
class C{  public void unbind(Name name) throws NamingException {  checkIsDestroyed();  Name parsedName=getParsedName(name);  if (parsedName.size() == 0 || parsedName.get(0).length() == 0) {    throw new InvalidNameException(LocalizedStrings.ContextImpl_NAME_CAN_NOT_BE_EMPTY.toLocalizedString());  }  String nameToRemove=parsedName.get(0);  if (parsedName.size() == 1) {    ctxMaps.remove(nameToRemove);  } else {    Object boundObject=ctxMaps.get(nameToRemove);    if (boundObject instanceof Context) {      ((Context)boundObject).unbind(parsedName.getSuffix(1));    } else {      if (!ctxMaps.containsKey(nameToRemove)) {        throw new NameNotFoundException(LocalizedStrings.ContextImpl_CAN_NOT_FIND_0.toLocalizedString(name));      }      throw new NotContextException(LocalizedStrings.ContextImpl_EXPECTED_CONTEXT_BUT_FOUND_0.toLocalizedString(boundObject));    }  }}  }
class C{  public void showComponent(){  componentHideTime=System.currentTimeMillis() + TB_HIDE_DELAY;  setComponentVisibility(true);}  }
class C{  public ProxySelector proxySelector(){  return proxySelector;}  }
class C{  public void writeURIAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if (value == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"value"));  }  writer.write(" ");  writer.write(name);  writer.write("=\"");  String stringValue=value.toString();  ensureTextBufferCapacity(stringValue);  if (stringValue.startsWith("javascript:")) {    HtmlUtils.writeAttribute(writer,true,true,buffer,stringValue,textBuffer,true);  } else {    HtmlUtils.writeURL(writer,stringValue,textBuffer,encoding);  }  writer.write("\"");}  }
class C{  public static int positionIndexToCreateOrderIndex(final ColumnViewer viewer,final int positionIndex){  return positionIndexToCreateOrderIndex(getColumnOrder(viewer),positionIndex);}  }
class C{  public SecurityException(java.lang.String s){  super(s);}  }
class C{  void ungrabInputImpl(){  selectItem(null,false);  super.ungrabInputImpl();  postPaintEvent();}  }
class C{  public String nextToken(String delim) throws NoSuchElementException {  this.delim=delim;  return nextToken();}  }
class C{  static String mkStreamIdNamePrefix(String jobId,String opletId){  return String.format(ID_PREFIX + JOB_OPLET_FMT,jobId,opletId);}  }
class C{  public void putDescription(File f,String fileDescription){  fileDescriptions.put(f,fileDescription);}  }
class C{  Converter select(Class<?> type) throws IllegalStateException {  Entry[] entries=iSelectEntries;  int length=entries.length;  int index=type == null ? 0 : type.hashCode() & (length - 1);  Entry e;  while ((e=entries[index]) != null) {    if (e.iType == type) {      return e.iConverter;    }    if (++index >= length) {      index=0;    }  }  Converter converter=selectSlow(this,type);  e=new Entry(type,converter);  entries=(Entry[])entries.clone();  entries[index]=e;  for (int i=0; i < length; i++) {    if (entries[i] == null) {      iSelectEntries=entries;      return converter;    }  }  int newLength=length << 1;  Entry[] newEntries=new Entry[newLength];  for (int i=0; i < length; i++) {    e=entries[i];    type=e.iType;    index=type == null ? 0 : type.hashCode() & (newLength - 1);    while (newEntries[index] != null) {      if (++index >= newLength) {        index=0;      }    }    newEntries[index]=e;  }  iSelectEntries=newEntries;  return converter;}  }
class C{  private static String promptForIdaDirectory(final JFrame parent) throws FileNotFoundException {  CMessageBox.showError(parent,"Could not locate IDA Pro. Please select the IDA Pro installation directory");  final CIdaSelectionDialog fileChooser=CIdaSelectionDialog.show(parent,ConfigManager.instance().getGeneralSettings().getIdaDirectory());  if (fileChooser.getSelectedFile() != null) {    final File idaDirectory=fileChooser.getSelectedFile();    if (!idaDirectory.exists()) {      return null;    }    ConfigManager.instance().getGeneralSettings().setIdaDirectory(idaDirectory.getAbsolutePath());    return idaDirectory.getAbsolutePath();  }  throw new FileNotFoundException("E00211: The IDA directory is invalid or not set, please configure the location of your IDA.");}  }
class C{  public static PreviewFragment newInstance(String noteUID,String attachmentID){  PreviewFragment fragment=new PreviewFragment();  Bundle args=new Bundle();  args.putString(ARG_NOTEUID,noteUID);  args.putString(ARG_ATTACHMENTID,attachmentID);  fragment.setArguments(args);  return fragment;}  }
class C{  public Entry read(final String key){  return read(key,this.datbase);}  }
class C{  public void init() throws ServletException {}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateelementcasesensitive.class,args);}  }
class C{  public boolean isBlankOrNull(String input){  return GenericValidator.isBlankOrNull(input);}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  List<ReportResultData> reportData=dao.retrieveProviderInstanceReportData(organizationId);  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__PARAMETER:    if (resolve)     return getParameter();  return basicGetParameter();case SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION:return getFeatureConfiguration();case SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TenantConfigurationValueBuilder<T> global(final boolean global){  this.configuration.global=global;  return this;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void removeSubjectUpdatedListener(SubjectUpdatedListener listener){synchronized (subjectUpdatedListeners) {    subjectUpdatedListeners.remove(listener);  }}  }
class C{  int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public void addSeparator(){  add(new JPopupMenu.Separator());}  }
class C{  @Override public String toString(){  return "{ServerLoad is : connectionLoad = " + connectionLoad + " subscriberLoad = "+ subscriberLoad+ " loadPerConnection = "+ loadPerConnection+ " loadPerSubscriber = "+ loadPerSubscriber+ " }";}  }
class C{  public BitmapPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker poolStatsTracker){  super(memoryTrimmableRegistry,poolParams,poolStatsTracker);  initialize();}  }
class C{  private void stmtList(){  boolean flag=true;  while (flag) {    nextToken("expects a STMT_LIST item or '}'");    if (m_st.ttype == '}') {      flag=false;    } else     if (m_st.sval.equalsIgnoreCase("graph") || m_st.sval.equalsIgnoreCase("node") || m_st.sval.equalsIgnoreCase("edge")) {      m_st.pushBack();      attrStmt();    } else     if (m_st.sval != null) {      nodeId(m_st.sval,0);    } else {      System.out.println("expects a STMT_LIST item or '}'");    }  }}  }
class C{  public static Set<Window> updateUI(){  Set<Window> updated=new HashSet<Window>();  for (  Container c : s_windows) {    Window w=getFrame(c);    if (w == null)     continue;    if (updated.contains(w))     continue;    SwingUtilities.updateComponentTreeUI(w);    w.validate();    RepaintManager mgr=RepaintManager.currentManager(w);    Component childs[]=w.getComponents();    for (    Component child : childs) {      if (child instanceof JComponent)       mgr.markCompletelyDirty((JComponent)child);    }    w.repaint();    updated.add(w);  }  for (  Window w : s_hiddenWindows) {    if (updated.contains(w))     continue;    SwingUtilities.updateComponentTreeUI(w);    w.validate();    RepaintManager mgr=RepaintManager.currentManager(w);    Component childs[]=w.getComponents();    for (    Component child : childs) {      if (child instanceof JComponent)       mgr.markCompletelyDirty((JComponent)child);    }    w.repaint();    updated.add(w);  }  return updated;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  HttpServletResponse httpResponse=(HttpServletResponse)response;  if (!httpRequest.getServletPath().matches(excludeUrlPattern)) {    if (containsSamlResponse(httpRequest)) {      httpRequest.setAttribute(Constants.REQ_ATTR_IS_SAML_FORWARD,Boolean.TRUE);      String samlResponse=httpRequest.getParameter("SAMLResponse");      try {        if (samlResponseExtractor.isFromLogin(samlResponse)) {          buildSAMLLogoutRequestAndStoreInSession((HttpServletRequest)request,samlResponse);          String relayState=httpRequest.getParameter("RelayState");          if (relayState != null) {            String forwardUrl=getForwardUrl(httpRequest,relayState);            redirector.forward(httpRequest,httpResponse,forwardUrl);            return;          }        }      } catch (      SessionIndexNotFoundException e) {        LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_SESSION_INDEX_NOT_FOUND);        httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_INVALID_SAML_RESPONSE);      }catch (      IssuerNotMatchException e) {        LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_ISSUER_DOES_NOT_MATCH);        httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_INVALID_SAML_RESPONSE);      }catch (      SaaSApplicationException e) {        LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR);        httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_INVALID_SAML_RESPONSE);      }      if (httpRequest.getAttribute(Constants.REQ_ATTR_ERROR_KEY) != null) {        redirector.forward(httpRequest,httpResponse,BaseBean.ERROR_PAGE);        return;      }      httpRequest.setAttribute(Constants.REQ_ATTR_IS_SAML_FORWARD,Boolean.FALSE);    }  }  chain.doFilter(request,response);}  }
class C{  public boolean markTimeIfDelay(World world,long delay){  if (world == null) {    return false;  }  long currentTime=world.getTotalWorldTime();  if (currentTime < lastMark) {    lastMark=currentTime;    return false;  } else   if (lastMark + delay + lastRandomDelay <= currentTime) {    duration=currentTime - lastMark;    lastMark=currentTime;    lastRandomDelay=(int)(Math.random() * randomRange);    return true;  } else {    return false;  }}  }
class C{  public void addHistoryListener(final ISelectionHistoryListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override protected void packetFromThisVMReceived(Map<String,String> payload) throws Exception {  String message="Jdp packet from this VM received. This should not happen!";  log.severe(message);  throw new Exception(message);}  }
class C{  static String formatFlags(byte type,byte flags){  if (flags == 0)   return "";switch (type) {case TYPE_SETTINGS:case TYPE_PING:    return flags == FLAG_ACK ? "ACK" : BINARY[flags];case TYPE_PRIORITY:case TYPE_RST_STREAM:case TYPE_GOAWAY:case TYPE_WINDOW_UPDATE:  return BINARY[flags];}String result=flags < FLAGS.length ? FLAGS[flags] : BINARY[flags];if (type == TYPE_PUSH_PROMISE && (flags & FLAG_END_PUSH_PROMISE) != 0) {return result.replace("HEADERS","PUSH_PROMISE");} else if (type == TYPE_DATA && (flags & FLAG_COMPRESSED) != 0) {return result.replace("PRIORITY","COMPRESSED");}return result;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  private void initInfo(int record_id,String value,boolean reset){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (reset) {    clearParameters();  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {    } else {      String id;      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_CashLine_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Cash_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCash_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Invoice_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fInvoice_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Payment_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fPayment_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,"C_CashBook_ID");      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCashBook_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BankAccount_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fBankAccount_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Charge_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCharge_ID.setValue(new Integer(id).intValue());      }    }  }}  }
class C{  public ObjectParser(final Class<?> type,final String[] packages){  this(type,packages,null);}  }
class C{  public static void addOsmiumCompressorRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addOsmiumCompressorRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static Object parse(ParseTree node){  if (node instanceof TerminalNode) {    TerminalNode terminal=(TerminalNode)node;switch (terminal.getSymbol().getType()) {case EsperEPL2GrammarParser.BOOLEAN_TRUE:      return BoolValue.parseString(terminal.getText());case EsperEPL2GrammarParser.BOOLEAN_FALSE:    return BoolValue.parseString(terminal.getText());case EsperEPL2GrammarParser.VALUE_NULL:  return null;default :throw ASTWalkException.from("Encountered unexpected constant type " + terminal.getSymbol().getType(),terminal.getSymbol());}} else {RuleNode ruleNode=(RuleNode)node;int ruleIndex=ruleNode.getRuleContext().getRuleIndex();if (ruleIndex == EsperEPL2GrammarParser.RULE_number) {return parseNumber(ruleNode,1);} else if (ruleIndex == EsperEPL2GrammarParser.RULE_numberconstant) {RuleNode number=findChildRuleByType(ruleNode,EsperEPL2GrammarParser.RULE_number);if (ruleNode.getChildCount() > 1) {if (ASTUtil.isTerminatedOfType(ruleNode.getChild(0),EsperEPL2GrammarLexer.MINUS)) {  return parseNumber(number,-1);}return parseNumber(number,1);} else {return parseNumber(number,1);}} else if (ruleIndex == EsperEPL2GrammarParser.RULE_stringconstant) {return StringValue.parseString(node.getText());} else if (ruleIndex == EsperEPL2GrammarParser.RULE_constant) {return parse(ruleNode.getChild(0));}throw ASTWalkException.from("Encountered unrecognized constant",node.getText());}}  }
class C{  protected void writeExternalForeignKeyCreateStmt(Database database,Table table,ForeignKey key,StringBuilder ddl){  if (key.getForeignTableName() == null) {    log.warn("Foreign key table is null for key " + key);  } else {    writeTableAlterStmt(table,ddl);    ddl.append("ADD CONSTRAINT ");    printIdentifier(getForeignKeyName(table,key),ddl);    ddl.append(" FOREIGN KEY (");    writeLocalReferences(key,ddl);    ddl.append(") REFERENCES ");    if (StringUtils.isNotBlank(table.getCatalog())) {      ddl.append(table.getCatalog()).append(".");    }    if (StringUtils.isNotBlank(table.getSchema())) {      ddl.append(table.getSchema()).append(".");    }    printIdentifier(getTableName(key.getForeignTableName()),ddl);    ddl.append(" (");    writeForeignReferences(key,ddl);    ddl.append(")");    printEndOfStatement(ddl);  }}  }
class C{  public FacebookSdkNotInitializedException(){  super();}  }
class C{  public static String buildStreamsString(Collection<String> set){  String result="";  String sep="";  for (  String channel : set) {    result+=sep + channel.replace("#","");    sep=", ";  }  return result;}  }
class C{  private static boolean isNELorLSEPCharacter(char ch){  return (ch == 0x85 || ch == 0x2028);}  }
class C{  private void updateFS(FileShare fsObj,DbClient dbClient,StringBuilder logMsgBuilder,VNXeApiClient vnxeApiClient){  VNXeFileSystem vnxeFS=null;  vnxeFS=vnxeApiClient.getFileSystemByFSName(fsObj.getName());  if (vnxeFS != null) {    fsObj.setCapacity(vnxeFS.getSizeTotal());    logMsgBuilder.append(String.format("Expand file system successfully for NativeId: %s, URI: %s",fsObj.getNativeId(),getTaskCompleter().getId()));    dbClient.persistObject(fsObj);  } else {    logMsgBuilder.append("Could not find corresponding file system in the VNXe, using the fs name: ");    logMsgBuilder.append(fsObj.getName());  }}  }
class C{  public static ColGroup copyColGroup(ColGroup group){  ColGroup ret=null;  int[] colIndices=Arrays.copyOf(group.getColIndices(),group.getNumCols());  if (group instanceof ColGroupUncompressed) {    ColGroupUncompressed in=(ColGroupUncompressed)group;    ret=new ColGroupUncompressed(colIndices,in.getNumRows(),in.getData());  } else   if (group instanceof ColGroupRLE) {    ColGroupRLE in=(ColGroupRLE)group;    ret=new ColGroupRLE(colIndices,in.getNumRows(),in.hasZeros(),in.getValues(),in.getBitmaps(),in.getBitmapOffsets());  } else   if (group instanceof ColGroupOLE) {    ColGroupOLE in=(ColGroupOLE)group;    ret=new ColGroupOLE(colIndices,in.getNumRows(),in.hasZeros(),in.getValues(),in.getBitmaps(),in.getBitmapOffsets());  }  return ret;}  }
class C{  public static IFile readProjectRootFile(IProject project){  final IEclipsePreferences projectPrefs=getProjectPreferences(project);  if (projectPrefs != null) {    String rootFileName=projectPrefs.get(IPreferenceConstants.P_PROJECT_ROOT_FILE,IPreferenceConstants.DEFAULT_NOT_SET);    if (!IPreferenceConstants.DEFAULT_NOT_SET.equals(rootFileName)) {      final IPath path=new Path(rootFileName);      if (path.isAbsolute()) {        rootFileName=ResourceHelper.PARENT_ONE_PROJECT_LOC + path.lastSegment();        convertAbsoluteToRelative(projectPrefs,rootFileName);      }      final IFile linkedFile=ResourceHelper.getLinkedFile(project,rootFileName);      Activator.getDefault().logDebug("footFileName = " + (linkedFile != null ? linkedFile.getLocation().toOSString() : null));      return linkedFile;    }  } else {    Activator.getDefault().logInfo("projectPrefs is null");  }  return null;}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public static int isAngleBigger(Coordinate s0,Coordinate s1,Coordinate t0,Coordinate t1){  double x0=(s1.x - s0.x);  double y0=(s1.y - s0.y);  double x1=(t1.x - t0.x);  double y1=(t1.y - t0.y);  int q0=getQuadrant(x0,y0);  int q1=getQuadrant(x1,y1);  if (q0 != q1) {    return q0 > q1 ? 1 : -1;  }  double por1=y0 / x0;  double por2=y1 / x1;  if (por1 > por2) {    return 1;  } else   if (por2 > por1) {    return -1;  }  return 0;}  }
class C{  public ValidationWarnings(List<WarningsGroup> warnings){  this.warnings=warnings;}  }
class C{  public void uninstallModuleWithAnnotations(HLEModule hleModule,int version){  try {    for (    HLEModuleFunction hleModuleFunction : hleModule.installedHLEModuleFunctions.values()) {      this.removeFunction(hleModuleFunction);    }  } catch (  Exception e) {    log.error("uninstallModuleWithAnnotations",e);  }  installedModules.remove(hleModule);  hleModule.unload();}  }
class C{  public static void dump(HttpSession session){  log.config("Session " + session.getId());  log.config("- Created=" + new Timestamp(session.getCreationTime()));  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=session.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=session.getAttribute(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public SecretKeys(SecretKey confidentialityKeyIn,SecretKey integrityKeyIn){  setConfidentialityKey(confidentialityKeyIn);  setIntegrityKey(integrityKeyIn);}  }
class C{  private LookupResult findDecompiled(String name,CompilationUnit compilationUnit,GroovyClassLoader loader){  ClassNode node=ClassHelper.make(name);  if (node.isResolved()) {    return new LookupResult(null,node);  }  DecompiledClassNode asmClass=null;  String fileName=name.replace('.','/') + ".class";  URL resource=loader.getResource(fileName);  if (resource != null) {    try {      asmClass=new DecompiledClassNode(AsmDecompiler.parseClass(resource),new AsmReferenceResolver(this,compilationUnit));      if (!asmClass.getName().equals(name)) {        asmClass=null;      }    } catch (    IOException e) {    }  }  if (asmClass != null) {    if (isFromAnotherClassLoader(loader,fileName)) {      return tryAsScript(name,compilationUnit,asmClass);    }    return new LookupResult(null,asmClass);  }  return null;}  }
class C{  public SearchBuilder paging(IndexPagingState pagingState){  this.paging=ByteBufferUtils.toHex(pagingState.toByteBuffer());  return this;}  }
class C{  public boolean isShipTo(){  Object oo=get_Value(COLUMNNAME_IsShipTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SemImEditor(SemImWrapper semImWrapper){  this(semImWrapper,"Graphical Editor","Tabular Editor",TabbedPaneDefault.GRAPHICAL);}  }
class C{  protected static void initCache(){  if (m_Cache == null) {    m_Cache=new Hashtable<String,Vector<String>>();  }  if (m_ClassCache == null) {    m_ClassCache=new ClassCache();  }}  }
class C{  public boolean isBIP34(){  return version >= BLOCK_VERSION_BIP34;}  }
class C{  public static char[] toCharArray(Double[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].doubleValue();  }  return result;}  }
class C{  public Map<String,Map<String,String>> loadTranslationsListsFromXliff(final File xliffFile){  final Map<String,Map<String,String>> lngLists=new TreeMap<String,Map<String,String>>();  try (FileInputStream fis=new FileInputStream(xliffFile)){    XMLInputFactory factory=XMLInputFactory.newInstance();    XMLStreamReader xmlreader=factory.createXMLStreamReader(fis);    Map<String,String> translationList=null;    String source=null;    String target=null;    String state=null;    while (xmlreader.hasNext()) {      int eventtype=xmlreader.next();      if (eventtype == XMLEvent.START_ELEMENT) {        String ename=xmlreader.getLocalName();        if (ename.equalsIgnoreCase("file")) {          String forFile=xmlreader.getAttributeValue(null,"original");          if (lngLists.containsKey(forFile)) {            translationList=lngLists.get(forFile);          } else {            translationList=new LinkedHashMap<String,String>();            lngLists.put(forFile,translationList);          }          source=null;          target=null;        } else         if (ename.equalsIgnoreCase("trans-unit")) {          source=null;          target=null;        } else         if (ename.equalsIgnoreCase("source")) {          source=xmlreader.getElementText();        } else         if (ename.equalsIgnoreCase("target")) {          state=xmlreader.getAttributeValue(null,"state");          target=xmlreader.getElementText();        }      } else       if (eventtype == XMLEvent.END_ELEMENT) {        String ename=xmlreader.getLocalName();        if (ename.equalsIgnoreCase("trans-unit") && translationList != null) {          if (source != null) {            if (target != null) {              if ("translated".equals(state)) {                translationList.put(source,target);              } else {                translationList.put(source,null);              }            } else {              translationList.put(source,null);            }            source=null;          }          target=null;        }        if (ename.equalsIgnoreCase("file")) {          translationList=null;        }      }    }    xmlreader.close();  } catch (  IOException|XMLStreamException ex) {    ConcurrentLog.warn("TRANSLATOR","error reading " + xliffFile.getAbsolutePath() + " -> "+ ex.getMessage());  }  return lngLists;}  }
class C{  @Override protected void doAction(){  try {    DJarInfo dJarInfo=new DJarInfo(frame);    dJarInfo.setLocationRelativeTo(frame);    dJarInfo.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public final Double3D multiply(double val){  return new Double3D(x * val,y * val,z * val);}  }
class C{  private boolean isFirstItem(int itemPosition){  return itemPosition == 0;}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getFastLength() == null || getFastLength() < 1) {    throw new IllegalArgumentException("Fast MA must be greater than zero.");  }  if (getSlowLength() == null || getSlowLength() < 1) {    throw new IllegalArgumentException("Slow MA must be greater than zero.");  }  if (getSignalSmoothing() == null || getSignalSmoothing() < 1) {    throw new IllegalArgumentException("Signal Smoothing must be greater than zero.");  }  if (getSlowLength() < getFastLength()) {    throw new IllegalArgumentException("Fast MA must be greater than Slow MA.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    Number yy=candleItem.getY();    if (null != yy) {      if (this.fastYYValues.size() == getFastLength()) {        if (newBar) {          fastSum=fastSum - this.fastYYValues.getLast() + yy.doubleValue();          this.fastYYValues.removeLast();          this.fastYYValues.addFirst(yy.doubleValue());        } else {          fastSum=fastSum - this.fastYYValues.getFirst() + yy.doubleValue();          this.fastYYValues.removeFirst();          this.fastYYValues.addFirst(yy.doubleValue());        }      } else {        if (newBar) {          fastSum=fastSum + yy.doubleValue();          this.fastYYValues.addFirst(yy.doubleValue());        } else {          fastSum=fastSum + yy.doubleValue() - this.fastYYValues.getFirst();          this.fastYYValues.removeFirst();          this.fastYYValues.addFirst(yy.doubleValue());        }      }      if (this.slowYYValues.size() == getSlowLength()) {        if (newBar) {          slowSum=slowSum - this.slowYYValues.getLast() + yy.doubleValue();          this.slowYYValues.removeLast();          this.slowYYValues.addFirst(yy.doubleValue());        } else {          slowSum=slowSum - this.slowYYValues.getFirst() + yy.doubleValue();          this.slowYYValues.removeFirst();          this.slowYYValues.addFirst(yy.doubleValue());        }      } else {        if (newBar) {          slowSum=slowSum + yy.doubleValue();          this.slowYYValues.addFirst(yy.doubleValue());        } else {          slowSum=slowSum + yy.doubleValue() - this.slowYYValues.getFirst();          this.slowYYValues.removeFirst();          this.slowYYValues.addFirst(yy.doubleValue());        }      }      if (this.slowYYValues.size() == getSlowLength()) {        double fastEMA=0;        if (fastMultiplyer == Double.MAX_VALUE) {          fastEMA=fastSum / this.getFastLength();          fastMultiplyer=2 / (this.getFastLength() + 1.0d);        } else {          fastEMA=((this.fastYYValues.getFirst() - prevFastEMA) * fastMultiplyer) + prevFastEMA;        }        prevFastEMA=fastEMA;        double slowEMA=0;        if (slowMultiplyer == Double.MAX_VALUE) {          slowEMA=slowSum / this.getSlowLength();          slowMultiplyer=2 / (this.getSlowLength() + 1.0d);        } else {          slowEMA=((this.slowYYValues.getFirst() - prevSlowEMA) * slowMultiplyer) + prevSlowEMA;        }        prevSlowEMA=slowEMA;        double MACD=fastEMA - slowEMA;        if (this.signalSmoothingYYValues.size() == this.getSignalSmoothing()) {          if (newBar) {            signalSmoothingSum=signalSmoothingSum - this.signalSmoothingYYValues.getLast() + MACD;            this.signalSmoothingYYValues.removeLast();            this.signalSmoothingYYValues.addFirst(MACD);          } else {            signalSmoothingSum=signalSmoothingSum - this.signalSmoothingYYValues.getFirst() + MACD;            this.signalSmoothingYYValues.removeFirst();            this.signalSmoothingYYValues.addFirst(MACD);          }        } else {          if (newBar) {            signalSmoothingSum=signalSmoothingSum + MACD;            this.signalSmoothingYYValues.addFirst(MACD);          } else {            signalSmoothingSum=signalSmoothingSum + MACD - this.signalSmoothingYYValues.getFirst();            this.signalSmoothingYYValues.removeFirst();            this.signalSmoothingYYValues.addFirst(MACD);          }        }        double signalLine=Double.MAX_VALUE;        if (this.signalSmoothingYYValues.size() == getSignalSmoothing()) {          signalLine=calculateSmoothingMA(this.signalSmoothingYYValues.getFirst(),this.prevSignalSmoothingEMA,this.signalSmoothingSum);          this.prevSignalSmoothingEMA=signalLine;        }        if (newBar) {          MACDItem dataItem=new MACDItem(candleItem.getPeriod(),new BigDecimal(MACD),(signalLine == Double.MAX_VALUE ? null : new BigDecimal(signalLine)),(signalLine == Double.MAX_VALUE ? null : new BigDecimal(MACD - signalLine)));          this.add(dataItem,false);        } else {          MACDItem dataItem=(MACDItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setMACD(MACD);          if (signalLine == Double.MAX_VALUE) {            dataItem.setSignalLine(signalLine);            dataItem.setMACDHistogram(MACD - signalLine);          }        }      }    }  }}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  private TypeArgument parseTypeArgument(){  FieldTypeSignature[] ub, lb;  ub=new FieldTypeSignature[1];  lb=new FieldTypeSignature[1];  TypeArgument[] ta=new TypeArgument[0];  char c=current();switch (c) {case '+':{      advance();      ub[0]=parseFieldTypeSignature();      lb[0]=BottomSignature.make();      return Wildcard.make(ub,lb);    }case '*':{    advance();    ub[0]=SimpleClassTypeSignature.make("java.lang.Object",false,ta);    lb[0]=BottomSignature.make();    return Wildcard.make(ub,lb);  }case '-':{  advance();  lb[0]=parseFieldTypeSignature();  ub[0]=SimpleClassTypeSignature.make("java.lang.Object",false,ta);  return Wildcard.make(ub,lb);}default :return parseFieldTypeSignature();}}  }
class C{  public String developmentVersion(){  return developmentVersion;}  }
class C{  public static DateTimeFormatter hourMinuteSecond(){  if (hms == null) {    hms=new DateTimeFormatterBuilder().append(hourElement()).append(minuteElement()).append(secondElement()).toFormatter();  }  return hms;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Provides public ServiceFactory serviceFactory() throws IOException {  ipServiceCallMock=mock(Call.class);  IpService ipServiceMock=mock(IpService.class);  when(ipServiceMock.getIp(anyString())).thenReturn(ipServiceCallMock);  ServiceFactory serviceFactoryMock=mock(ServiceFactory.class);  when(serviceFactoryMock.createService(IpService.class)).thenReturn(ipServiceMock);  return serviceFactoryMock;}  }
class C{  public DynamicPlaylistSession createDynamicPlaylist(String type,String seedCatalog,String[] mood,String[] style) throws EchoNestException {  if (!"artist-description".equals(type) && !"catalog-radio".equals(type)) {    throw new EchoNestException(-1,"Only 'artist-description' and 'catalog-radio' type " + "are supported");  }  if ((seedCatalog == null && mood == null && style == null) || ("artist-description".equals(type) && (mood == null || mood.length <= 0) && (style == null || style.length <= 0)) || ("catalog-radio".equals(type) && (seedCatalog == null || seedCatalog.isEmpty()))) {    throw new EchoNestException(-1,"seedCatalog, mood or style must be filled depending " + "on the type");  }  DynamicPlaylistParams p=new DynamicPlaylistParams();  p.add("type",type);  if (seedCatalog != null) {    p.addSeedCatalog(seedCatalog);  }  if (mood != null) {    for (    String m : mood) {      p.addMood(m);    }  }  if (style != null) {    for (    String s : style) {      p.addStyle(s);    }  }  String prefix=ProviderAggregator.getDefault().getPreferredRosettaStonePrefix();  if (prefix != null) {    p.addIDSpace(prefix);    p.includeTracks();  }  DynamicPlaylistSession session=mEchoNest.createDynamicPlaylist(p);  Log.e(TAG,"Session ID: " + session.getSessionID());  return session;}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(1)).enabled=bindList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(2)).enabled=bindList.getSelectedSlot() != -1;}  }
class C{  public Object referenceInsert(String reference,Object value){  if (rieh == null) {    return value;  }  return rieh.referenceInsert(reference,value);}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  if (args.length != 1) {    System.err.println("java " + RPClassDumper.class.getName() + " outputFolder");    System.exit(1);  }  new File(args[0]).mkdirs();  new RPClassGenerator().createRPClassesWithoutBaking();  new RPClassDumper(args[0]).dumpAll();}  }
class C{  public synchronized void releaseLock(String lockName){  lockName=lockName.intern();  if (isLockOwner(lockName)) {    if (getLog().isDebugEnabled()) {      getLog().debug("Lock '" + lockName + "' retuned by: "+ Thread.currentThread().getName());    }    getThreadLocks().remove(lockName);    locks.remove(lockName);    this.notifyAll();  } else   if (getLog().isDebugEnabled()) {    getLog().debug("Lock '" + lockName + "' attempt to retun by: "+ Thread.currentThread().getName()+ " -- but not owner!",new Exception("stack-trace of wrongful returner"));  }}  }
class C{  public static Number plus(Character left,Character right){  return plus(Integer.valueOf(left),right);}  }
class C{  public ElementRule(String name,XMLSyntaxRule[] rules,boolean optional){  this.name=name;  this.rules=rules;  this.min=1;  this.max=1;  if (optional)   this.min=0;}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public boolean valid(){  return commonExists && hdfsExists && mapredExists;}  }
class C{  public final void update(String selection){  removeAllItems();  ArrayList<String> l=_roster.getRosterGroupList();  Collections.sort(l);  for (  String g : l) {    addItem(g);  }  if (allEntriesEnabled) {    insertItemAt(Roster.AllEntries(Locale.getDefault()),0);    if (selection == null) {      selection=Roster.ALLENTRIES;    }    this.setToolTipText(null);  } else {    if (this.getItemCount() == 0) {      this.addItem(Bundle.getMessage("RosterGroupComboBoxNoGroups"));      this.setToolTipText(Bundle.getMessage("RosterGroupComboBoxNoGroupsToolTip"));    } else {      this.setToolTipText(null);    }  }  setSelectedItem(selection);  if (this.getItemCount() == 1) {    this.setSelectedIndex(0);    this.setEnabled(false);  } else {    this.setEnabled(true);  }}  }
class C{  public TLongIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  private void addVcenterHost(Map<URI,Collection<URI>> vCenterHostExportMap,URI hostId,URI export){  if (vCenterHostExportMap != null) {    if (!vCenterHostExportMap.containsKey(hostId)) {      vCenterHostExportMap.put(hostId,Lists.newArrayList());    }    vCenterHostExportMap.get(hostId).add(export);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void prepareUi(){  if (mContactId != Contact.INVALID_ID) {    Contact contact=Contact.byId(mContactId);    ContactViewBinder.bind(contact,mTextContactName);  }  mTextMessageBody.setText(mBody);}  }
class C{  public RuntimePermission(String name){  super(name);}  }
class C{  private static String bigIntegerToAsciiString(final BigInteger bigInteger){  final byte[] byteArray=bigInteger.toByteArray();  StringBuffer stringBuffer=new StringBuffer();  for (int i=0; i < byteArray.length; i++) {    final char value=(char)(byteArray[i] & 0xFF);    if (i == 0 && value == 0) {      continue;    }    stringBuffer.append(value);  }  return stringBuffer.toString();}  }
class C{  public static boolean isWhitespace(int codePoint){switch (codePoint) {case ' ':case '\t':case '\n':case '\r':{      return true;    }default :{    return false;  }}}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DATNode[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_type = ").append(m_type);  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean isEntryInUse(String entry){  return ((entry == jComboCategory.getSelectedItem()) | (entry == jComboReference.getSelectedItem()) | (entry == jComboName.getSelectedItem())| (entry == jComboBuy.getSelectedItem())| (entry == jComboSell.getSelectedItem())| (entry == jComboMaximum.getSelectedItem())| (entry == jComboSecurity.getSelectedItem())| (entry == jComboBarcode.getSelectedItem())| (entry == jComboBoxButtonText.getSelectedItem())| (entry == jComboBoxRemotePrint.getSelectedItem())| (entry == jComboBoxService.getSelectedItem())| (entry == jComboBoxVarPrice.getSelectedItem())| (entry == jComboBoxWarranty.getSelectedItem())| (entry == jComboBoxTextTip.getSelectedItem())| (entry == jComboBoxProp.getSelectedItem())| (entry == jComboBoxAux.getSelectedItem())| (entry == jComboBoxShortName.getSelectedItem())| (entry == jComboBoxIspack.getSelectedItem())| (entry == jComboBoxPackSize.getSelectedItem())| (entry == jComboBoxPackOf.getSelectedItem()));}  }
class C{  protected JsonGenerator _createJsonGenerator(Writer out,IOContext ctxt) throws IOException {  return new WriterBasedGenerator(ctxt,_generatorFeatures,_objectCodec,out);}  }
class C{  public double freeDiskPercentageAfterShardAssigned(DiskUsage usage,Long shardSize){  shardSize=(shardSize == null) ? 0 : shardSize;  DiskUsage newUsage=new DiskUsage(usage.getNodeId(),usage.getNodeName(),usage.getPath(),usage.getTotalBytes(),usage.getFreeBytes() - shardSize);  return newUsage.getFreeDiskAsPercentage();}  }
class C{  public void startMigration(){  s_logger.open();  migrationStartInfo();  openDatabases();  if (m_source.getConnection() != null && m_target.getConnection() != null && isSourceAndTargetDifferent() && isSameVendorsForUpgrade()) {    loadMetaData();    if (isCopy())     prepareTransfer();    synchronize();  }  closeDatabases();  migrationEndInfo();  s_logger.close();}  }
class C{  public static Reader newReader(ReadableByteChannel channel,CharsetDecoder decoder,int minBufferCapacity){  return new InputStreamReader(new ChannelInputStream(channel),decoder);}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public static CertChain create(String instanceIdentifier,X509Certificate cert,List<X509Certificate> additionalCerts){  try {    X509Certificate trustAnchor=GlobalConf.getCaCert(instanceIdentifier,cert);    return new CertChain(instanceIdentifier,cert,trustAnchor,additionalCerts != null ? additionalCerts : new ArrayList<X509Certificate>());  } catch (  Exception ex) {    throw translateWithPrefix(X_CANNOT_CREATE_CERT_PATH,ex);  }}  }
class C{  public String toPattern(){  return pattern;}  }
class C{  public synchronized final void add(long afterMSec,MetricExec execution){  if (execution == null) {    throw new IllegalArgumentException("Unexpected parameters : null execution");  }  long triggerOnTime=currentTime + afterMSec;  List<MetricExec> handleSet=timeHandleMap.get(triggerOnTime);  if (handleSet == null) {    handleSet=new ArrayList<MetricExec>();    timeHandleMap.put(triggerOnTime,handleSet);  }  handleSet.add(execution);  nearestTime=timeHandleMap.firstKey();}  }
class C{  private boolean haveInternet(){  final NetworkInfo info=((ConnectivityManager)Status.getAppContext().getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();  if (info == null || !info.isConnected()) {    return false;  }  if (info.isRoaming()) {    return true;  }  return true;}  }
class C{  private boolean isDsTypeSelected(final String distTypeName){  return null != manageDistUIState.getManageDistFilters().getClickedDistSetType() && manageDistUIState.getManageDistFilters().getClickedDistSetType().getName().equalsIgnoreCase(distTypeName);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public LMJelinekMercerSimilarity(CollectionModel collectionModel,float lambda){  super(collectionModel);  this.lambda=lambda;}  }
class C{  public final String toString(){  return name;}  }
class C{  private ApproximationLine approximateLowerHull(ConvexHull convexHull,double[] log_k,double sum_log_k,double sum_log_k2,double[] log_kDist,double sum_log_kDist,double sum_log_k_kDist){  StringBuilder msg=new StringBuilder();  int[] lowerHull=convexHull.getLowerHull();  int l=convexHull.getNumberOfPointsInLowerHull();  int k_0=settings.kmax - lowerHull.length + 1;  msg.append("lower hull l = ").append(l).append('\n');  double low_error=Double.MAX_VALUE;  double low_m=0.0;  double low_t=0.0;  for (int i=1; i < l; i++) {    double cur_m=(log_kDist[lowerHull[i]] - log_kDist[lowerHull[i - 1]]) / (log_k[lowerHull[i]] - log_k[lowerHull[i - 1]]);    double cur_t=log_kDist[lowerHull[i]] - cur_m * log_k[lowerHull[i]];    double cur_error=ssqerr(k_0,settings.kmax,log_k,log_kDist,cur_m,cur_t);    msg.append("  Segment = ").append(i).append(" m = ").append(cur_m).append(" t = ").append(cur_t).append(" lowerror = ").append(cur_error).append('\n');    if (cur_error < low_error) {      low_error=cur_error;      low_m=cur_m;      low_t=cur_t;    }  }  boolean is_right=true;  for (int i=0; i < l; i++) {    double cur_m=optimize(k_0,settings.kmax,sum_log_k,sum_log_k2,log_k[lowerHull[i]],log_kDist[lowerHull[i]],sum_log_k_kDist,sum_log_kDist);    double cur_t=log_kDist[lowerHull[i]] - cur_m * log_k[lowerHull[i]];    if ((i == 0 || log_kDist[lowerHull[i - 1]] >= log_kDist[lowerHull[i]] - cur_m * (log_k[lowerHull[i]] - log_k[lowerHull[i - 1]])) && (i == l - 1 || log_kDist[lowerHull[i + 1]] >= log_kDist[lowerHull[i]] + cur_m * (log_k[lowerHull[i + 1]] - log_k[lowerHull[i]]))) {      double cur_error=ssqerr(k_0,settings.kmax,log_k,log_kDist,cur_m,cur_t);      if (cur_error < low_error) {        low_error=cur_error;        low_m=cur_m;        low_t=cur_t;      }    }    if (!(i > 0 && log_kDist[lowerHull[i - 1]] < log_kDist[lowerHull[i]] - cur_m * (log_k[lowerHull[i]] - log_k[lowerHull[i - 1]])) && !is_right) {      LOG.warning("ERROR lower: The bisection search will not work properly!");      if (!(i < l - 1 && log_kDist[lowerHull[i + 1]] < log_kDist[lowerHull[i]] + cur_m * (log_k[lowerHull[i + 1]] - log_k[lowerHull[i]]))) {        is_right=false;      }    }  }  ApproximationLine lowerApproximation=new ApproximationLine(k_0,low_m,low_t);  return lowerApproximation;}  }
class C{  public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public RatNum coeff(int deg){  for (int i=0, size=terms.size(); i < size; i++) {    if (terms.get(i).expt == deg) {      return terms.get(i).coeff;    }  }  return ZERO;}  }
class C{  private ChartAxisFactory(){}  }
class C{  public VisorGridDeploymentEvent(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay,String alias){  super(typeId,id,name,nid,ts,msg,shortDisplay);  this.alias=alias;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Insertion.sort(a);  show(a);}  }
class C{  @RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.DELETE) @ResponseBody public JsonResponse deleteResources(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam("path") String path) throws ServiceException, CheckException, IOException {  if (logger.isDebugEnabled()) {    logger.debug("containerId:" + containerId);    logger.debug("applicationName:" + applicationName);    logger.debug("path:" + path);  }  fileService.deleteFilesFromContainer(applicationName,containerId,path);  return new HttpOk();}  }
class C{  public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.465 -0500",hash_original_method="830AB81103073BE5F7AB467D579AEC22",hash_generated_method="CB5A5F887997C6D64518DFB5BAE29853") public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header,int languageTable,int languageShiftTable) throws EncodeException {  if (header == null || header.length == 0) {    return stringToGsm7BitPacked(data,languageTable,languageShiftTable);  }  int headerBits=(header.length + 1) * 8;  int headerSeptets=(headerBits + 6) / 7;  byte[] ret=stringToGsm7BitPacked(data,headerSeptets,true,languageTable,languageShiftTable);  ret[1]=(byte)header.length;  System.arraycopy(header,0,ret,2,header.length);  return ret;}  }
class C{  static private String SHORT_Max_Plus(){  long tempValue=Short.MAX_VALUE + 1;  return String.valueOf(tempValue);}  }
class C{  public double discreteTimeGroupDelay(double Omega){  return N.discreteTimeGroupDelay(Omega) - D.discreteTimeGroupDelay(Omega);}  }
class C{  public static boolean cs_happly(Scs V,int i,float beta,float[] x){  int p, Vp[], Vi[];  float Vx[], tau=0;  if (!Scs_util.CS_CSC(V) || x == null)   return (false);  Vp=V.p;  Vi=V.i;  Vx=V.x;  for (p=Vp[i]; p < Vp[i + 1]; p++) {    tau+=Vx[p] * x[Vi[p]];  }  tau*=beta;  for (p=Vp[i]; p < Vp[i + 1]; p++) {    x[Vi[p]]-=Vx[p] * tau;  }  return (true);}  }
class C{  public void progressFinish(ProgressEvent evt){  System.out.println("finish: received progressevent " + evt);  if (flag.nextSetBit(2) == -1)   flag.set(2);}  }
class C{  @Override public void initializeIndex(boolean loadEntries) throws IMQException {  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  private boolean isGeoPageEmpty(Eml eml){  if (!eml.getGeospatialCoverages().isEmpty()) {    GeospatialCoverage cov1=eml.getGeospatialCoverages().get(0);    String description=cov1.getDescription();    BBox bbox=cov1.getBoundingCoordinates();    Point p1=bbox.getMin();    Point p2=bbox.getMax();    if (p1 != null && p2 != null) {      Double lat1=p1.getLatitude();      Double lon1=p1.getLongitude();      Double lat2=p2.getLatitude();      Double lon2=p2.getLongitude();      return (lat1 == null && lon1 == null && lat2 == null && lon2 == null && Strings.isNullOrEmpty(description));    } else {      return Strings.isNullOrEmpty(description);    }  }  return true;}  }
class C{  public void updateUI(){  setUI((SplitPaneUI)UIManager.getUI(this));  revalidate();}  }
class C{  @BeforeMethod public void init(){  MockitoAnnotations.initMocks(this);  bufferBranchIndexer=new BufferBranchIndexer<>(delegateIndexer,childBufferIndexer);}  }
class C{  void forwardMessage(int i){  sendTestMessage(outbound.elementAt(i));}  }
class C{  protected void disposeInternal(){}  }
class C{  @Inject protected WorkspaceViewImpl(){  add(uiBinder.createAndBindUi(this));  getElement().setId("codenvyIdeWorkspaceViewImpl");  topMenuLayoutPanel.setWidgetHidden(updateExtensionPanel,true);  ideMainDockPanel.setWidgetHidden(noToolbarPanel,true);  ideMainDockPanel.setWidgetHidden(actionsPanel,true);  ideMainDockPanel.setWidgetHidden(statusPanel,true);}  }
class C{  public void write(String data,boolean crlf){  write(data.getBytes());  if (crlf)   write(CRLF);}  }
class C{  public void testUniqueIDs() throws Exception {  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  requestCollector.waitForRequest();  Vector<StunMessageEvent> reqs1=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  StunMessageEvent evt1=reqs1.get(0);  byte[] tid=evt1.getMessage().getTransactionID();  stunStack.sendResponse(tid,bindingResponse,serverAddress,clientAddress);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  Thread.sleep(1000);  Vector<StunMessageEvent> reqs2=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  StunMessageEvent evt2=reqs2.get(0);  assertFalse("Consecutive requests were assigned the same transaction id",Arrays.equals(evt1.getMessage().getTransactionID(),evt2.getMessage().getTransactionID()));}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("MonitorTestTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  int initialSize=mainThread.frames().size();  resumeTo("MonitorTestTarg","foo3","()V");  if (!mainThread.frame(0).location().method().name().equals("foo3")) {    failure("FAILED: frame failed");  }  if (mainThread.frames().size() != (initialSize + 3)) {    failure("FAILED: frames size failed");  }  if (mainThread.frames().size() != mainThread.frameCount()) {    failure("FAILED: frames size not equal to frameCount");  }  if (vm().canGetMonitorFrameInfo()) {    System.out.println("Get monitors");    monitors=mainThread.ownedMonitorsAndFrames();    if (monitors.size() != expectedCount) {      failure("monitors count is not equal to expected count");    }    MonitorInfo mon=null;    for (int j=0; j < monitors.size(); j++) {      mon=(MonitorInfo)monitors.get(j);      System.out.println("Monitor obj " + mon.monitor() + "depth ="+ mon.stackDepth());      if (mon.stackDepth() != expectedDepth[j]) {        failure("FAILED: monitor stack depth is not equal to expected depth");      }    }    stepOut(mainThread);    boolean ok=false;    try {      System.out.println("*** Saved Monitor obj " + mon.monitor() + "depth ="+ mon.stackDepth());    } catch (    InvalidStackFrameException ee) {      ok=true;      System.out.println("Got expected InvalidStackFrameException after a resume");    }    if (!ok) {      failure("FAILED: MonitorInfo object was not invalidated by a resume");    }  } else {    System.out.println("can not get monitors frame info");  }  listenUntilVMDisconnect();  if (!testFailed) {    println("MonitorFrameInfo: passed");  } else {    throw new Exception("MonitorFrameInfo: failed");  }}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public boolean isLoggedStore(){  return loggedStore;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.REACTION_TRIGGER__TRIGGERS:    return ((InternalEList<?>)getTriggers()).basicRemove(otherEnd,msgs);case StextPackage.REACTION_TRIGGER__GUARD:  return basicSetGuard(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public FileProperty(final String name,final String description,final String fileName){  this(name,description,getFileIfExists(new File(fileName)));}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public Url(final Url url){  scheme_=url.scheme_;  location_=url.location_;  path_=url.path_;  parameters_=url.parameters_;  query_=url.query_;  fragment_=url.fragment_;}  }
class C{  public void testUnpackNoObserve() throws InvalidAdviceException {  String bag="bag1";  Object[][] packedTuple={{"dsifji2oj","23498ngnjs"}};  BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe().unpack(bag,"pa","pb").emit("test1","pa","pb").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise();  results.expectTuple("dsifji2oj","23498ngnjs");  results.check();  assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);}  }
class C{  public void logDebug(Object message,Throwable exception){  logInternal(DEBUG,message,exception);}  }
class C{  protected ConversationFinishedException(final IScope scope,final String message){  super(scope,message);}  }
class C{  protected void drawRoundedSlices(Canvas c){  if (!mChart.isDrawRoundedSlicesEnabled())   return;  PieDataSet dataSet=mChart.getData().getDataSet();  if (!dataSet.isVisible())   return;  PointF center=mChart.getCenterCircleBox();  float r=mChart.getRadius();  float circleRadius=(r - (r * mChart.getHoleRadius() / 100f)) / 2f;  List<Entry> entries=dataSet.getYVals();  float[] drawAngles=mChart.getDrawAngles();  float angle=mChart.getRotationAngle();  for (int j=0; j < entries.size(); j++) {    float newangle=drawAngles[j];    Entry e=entries.get(j);    if ((Math.abs(e.getVal()) > 0.000001)) {      float x=(float)((r - circleRadius) * Math.cos(Math.toRadians((angle + newangle) * mAnimator.getPhaseY())) + center.x);      float y=(float)((r - circleRadius) * Math.sin(Math.toRadians((angle + newangle) * mAnimator.getPhaseY())) + center.y);      mRenderPaint.setColor(dataSet.getColor(j));      mBitmapCanvas.drawCircle(x,y,circleRadius,mRenderPaint);    }    angle+=newangle * mAnimator.getPhaseX();  }}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=true;  if (currentSpace < 1) {    result=false;  }  if (doors <= loadedThisTurn) {    result=false;  }  return result;}  }
class C{  public CacheServerConfigImpl(){  this.cacheXMLFile=null;  this.classpath=null;}  }
class C{  public static Signalling createServerSignalling(InetSocketAddress socketAddress,SignallingCallback signallingCallback) throws Throwable {  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.282 -0500",hash_original_method="292FE6324BA8FDA19777928FD16DC874",hash_generated_method="3F3BDBC2BEF8856EB2F4C11C1936C0CB") public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  handler.cancel();}  }
class C{  public DelayMatrix_Float(TopologicalGraph graph,boolean directed){  createDelayMatrix(graph,directed);  calculateShortestPath();}  }
class C{  protected void deleteMap(){  mapLoaded=false;  repaint();}  }
class C{  public void write(final int b) throws IOException {  if (m_store == null) {    throw new IllegalStateException(ERR_NO_STORE);  }  if (m_isSaved) {    throw new IllegalStateException(ERR_ALREADY_SAVED);  }  if (m_count == m_blobThreshold && !m_writingHdr) {    if (m_blobHeader == null) {      m_blobHeader=new ArrayList<Integer>();    }    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);    m_blobHeader.add(curAddr);    m_count=0;  }  m_buf[m_count++]=(byte)b;  m_bytesWritten++;}  }
class C{  @Override public Request<Void> init(ProjectReference projectReference){  InitRequest initRequest=new DefaultInitRequest(projectReference.name(),false,true);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("init").queryParam("projectPath",projectReference.name()).request().accept(APPLICATION_JSON).buildPost(json(initRequest));  return new SimpleRequest<>(request,Void.class,getAuthenticationManager());}  }
class C{  private static short CallShortMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallShortMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Short,false);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void postDeleteUnderLock(Engine.Delete delete){}  }
class C{  static double decodeMax(byte[] b,int dimension){  int offset=b.length / 2 + dimension * BYTES;  return NumericUtils.sortableLongToDouble(NumericUtils.sortableBytesToLong(b,offset));}  }
class C{  @Override public void onBackPressed(){  if (currentFragment == null || currentFragment.isBackTop()) {    finish();  } else {    currentFragment.goUp();  }}  }
class C{  public void stop(){  log.info("Stopping the coordinator stream producer.");  coordinatorStreamSystemProducer.stop();}  }
class C{  public static final String trimSuffix(String str,String... suffix){  if (str == null)   return null;  final int len=str.length();  String result=str;  for (int idx=0; idx < suffix.length; idx++) {    if (suffix[idx] == null || suffix[idx].length() == 0)     continue;    if (result.endsWith(suffix[idx])) {      result=result.substring(0,len - suffix[idx].length());      idx=0;    }  }  return result;}  }
class C{  public boolean isBookmarkingEnabled(){  return iconArea.isBookmarkingEnabled();}  }
class C{  public double var(double[] series){  double res=0D;  double mean=mean(series);  int count=0;  for (  double tp : series) {    res+=(tp - mean) * (tp - mean);    count+=1;  }  if (count > 0) {    return res / ((Integer)(count - 1)).doubleValue();  }  return Double.NaN;}  }
class C{  public PriceProductFilter(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);}  }
class C{  @Override public long rangeCount(final boolean exactIsIgnored){  return estimatedRangeCount;}  }
class C{  public void putResource(String container,String targetPath,InputStream sourceStream,boolean noOverwriteDirNonDir) throws IOException {  File tarFile;  long length;  try (InputStream sourceData=sourceStream){    Path tarFilePath=Files.createTempFile("compressed-resources",".tar");    tarFile=tarFilePath.toFile();    length=Files.copy(sourceData,tarFilePath,StandardCopyOption.REPLACE_EXISTING);  }   List<Pair<String,?>> headers=Arrays.asList(Pair.of("Content-Type",ExtMediaType.APPLICATION_X_TAR),Pair.of("Content-Length",length));  try (InputStream tarStream=new BufferedInputStream(new FileInputStream(tarFile));DockerConnection connection=openConnection(dockerDaemonUri).method("PUT").path("/containers/" + container + "/archive").query("path",targetPath).query("noOverwriteDirNonDir",noOverwriteDirNonDir ? 0 : 1).headers(headers).entity(tarStream)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (status != OK.getStatusCode()) {      throw new DockerException(getDockerExceptionMessage(response),status);    }  }  finally {    FileCleaner.addFile(tarFile);  }}  }
class C{  public T caseAnnotatableElement(AnnotatableElement object){  return null;}  }
class C{  private void addDots(int length){  removeAllViews();  final int pinLength=styledAttributes.getInt(R.styleable.PinLock_pinLength,4);  for (int i=0; i < pinLength; i++) {    Dot dot=new Dot(context,styledAttributes,i < length);    addView(dot);  }}  }
class C{  public void renameMemory(Memory memory){  renameMemory(memory,memory.getBot().getName(),true);}  }
class C{  public void uploadConfigDir(URI backupLoc,String backupId,String sourceConfigName,String targetConfigName) throws IOException {  URI source=repository.resolve(backupLoc,backupId,ZK_STATE_DIR,CONFIG_STATE_DIR,sourceConfigName);  String zkPath=ZkConfigManager.CONFIGS_ZKNODE + "/" + targetConfigName;  uploadToZk(zkStateReader.getZkClient(),source,zkPath);}  }
class C{  public void processGameEvent(GameEvent event){  if (gameListeners == null) {    gameListeners=new Vector<GameListener>();  }  for (Enumeration<GameListener> e=gameListeners.elements(); e.hasMoreElements(); ) {    event.fireEvent(e.nextElement());  }}  }
class C{  public boolean reportDeprecated(Environment env){  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG:    setTypeArg((TypeArgument)newValue);  return;case TypeRefsPackage.TYPE_TYPE_REF__CONSTRUCTOR_REF:setConstructorRef((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public OverpassQuery output(OutputVerbosity verbosity,OutputModificator modificator,OutputOrder order,int limit){  builder.append(String.format("; out %s %s %s %s",verbosity.toString().toLowerCase(),modificator.toString().toLowerCase(),order.toString().toLowerCase(),limit));  return this;}  }
class C{  public TimePeriodValues(String name){  this(name,DEFAULT_DOMAIN_DESCRIPTION,DEFAULT_RANGE_DESCRIPTION);}  }
class C{  @Override public void notifyChange(Uri uri,ContentObserver observer,boolean syncToNetwork){}  }
class C{  @Override public void updateProjection(){  Camera tCam=textureRenderer.getCamera();  tCam.setFrustumPerspective(camera.getFovY(),camera.getAspect(),camera.getFrustumNear(),camera.getFrustumFar());  tCam.setFrame(camera.getLocation(),camera.getLeft(),camera.getUp(),camera.getDirection());  tCam.update();  projectionMatrix.set(tCam.getModelViewProjectionMatrix());  projectionMatrix.multiplyLocal(BIAS);}  }
class C{  protected void assertEquals(Integer expected,Integer actual){  if (expected == null || actual == null) {    if (expected != actual) {      Assert.assertEquals("" + expected,"" + actual);    }  } else {    assertEquals(expected.intValue(),actual.intValue());  }}  }
class C{  public CToggleButton(String text){  this(text,null,false);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  static public String mkdir(String s){  try {    if ((new File(s)).mkdirs())     return "Created dir: " + s; else     return "Failed to create dir or dir already exists: " + s;  } catch (  Exception e) {    return e.toString();  }}  }
class C{  public CreateIndexRequestBuilder addMapping(String type,String source){  request.mapping(type,source);  return this;}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("~","test",true);  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:~/test");  Statement stat=conn.createStatement();  stat.execute("create table test(id int primary key, name varchar(255))");  stat.execute("insert into test values(1, 'Hello')");  ResultSet rs;  rs=stat.executeQuery("select * from test");  while (rs.next()) {    System.out.println(rs.getString("name"));  }  stat.close();  conn.close();}  }
class C{  public LocationOperand(TypeReference t){  type=ARRAY_ACCESS;  arrayElementType=t;}  }
class C{  void toIndexColor(byte[][] r,byte[][] g,byte[][] b) throws AWTException {  this.allPixels=new byte[this.imageWidth * this.imageHeight];  this.allColors=new byte[256 * 3];  int colornum=0;  for (int x=0; x < this.imageWidth; x++) {    for (int y=0; y < this.imageHeight; y++) {      int search;      for (search=0; search < colornum; search++) {        if (this.allColors[search * 3] == r[x][y] && this.allColors[search * 3 + 1] == g[x][y] && this.allColors[search * 3 + 2] == b[x][y]) {          break;        }      }      if (search > 255)       throw new AWTException("Too many colors.");      this.allPixels[y * this.imageWidth + x]=(byte)search;      if (search == colornum) {        this.allColors[search * 3]=r[x][y];        this.allColors[search * 3 + 1]=g[x][y];        this.allColors[search * 3 + 2]=b[x][y];        colornum++;      }    }  }  this.numberOfColors=1 << BitUtils.BitsNeeded(colornum);  byte copy[]=new byte[this.numberOfColors * 3];  System.arraycopy(this.allColors,0,copy,0,this.numberOfColors * 3);  this.allColors=copy;}  }
class C{  void recycle(XMLStreamWriterImpl xmlWriter){  _recycled.addLast(xmlWriter);}  }
class C{  public UnassignedClassException(){  super();}  }
class C{  public static DoubleBuffer copyOf(DoubleBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DoubleBuffer newBuffer=newDoubleBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  public final ItemStack addItem(int aID,String aEnglish,String aToolTip,Object... aRandomData){  if (aToolTip == null)   aToolTip="";  if (aID >= 0 && aID < mItemAmount) {    ItemStack rStack=new ItemStack(this,1,mOffset + aID);    mEnabledItems.set(aID);    mVisibleItems.set(aID);    GT_LanguageManager.addStringLocalization(getUnlocalizedName(rStack) + ".name",aEnglish);    GT_LanguageManager.addStringLocalization(getUnlocalizedName(rStack) + ".tooltip",aToolTip);    List<TC_AspectStack> tAspects=new ArrayList<TC_AspectStack>();    for (    Object tRandomData : aRandomData)     if (tRandomData instanceof SubTag) {      if (tRandomData == SubTag.INVISIBLE) {        mVisibleItems.set(aID,false);        continue;      }      if (tRandomData == SubTag.NO_UNIFICATION) {        GT_OreDictUnificator.addToBlacklist(rStack);        continue;      }    }    for (    Object tRandomData : aRandomData)     if (tRandomData != null) {      boolean tUseOreDict=true;      if (tRandomData instanceof IFoodStat) {        setFoodBehavior(mOffset + aID,(IFoodStat)tRandomData);        if (((IFoodStat)tRandomData).getFoodAction(this,rStack) == EnumAction.eat) {          int tFoodValue=((IFoodStat)tRandomData).getFoodLevel(this,rStack,null);          if (tFoodValue > 0)           RA.addCannerRecipe(rStack,ItemList.IC2_Food_Can_Empty.get(tFoodValue),((IFoodStat)tRandomData).isRotten(this,rStack,null) ? ItemList.IC2_Food_Can_Spoiled.get(tFoodValue) : ItemList.IC2_Food_Can_Filled.get(tFoodValue),null,tFoodValue * 100,1);        }        tUseOreDict=false;      }      if (tRandomData instanceof IItemBehaviour) {        addItemBehavior(mOffset + aID,(IItemBehaviour<GT_MetaBase_Item>)tRandomData);        tUseOreDict=false;      }      if (tRandomData instanceof IItemContainer) {        ((IItemContainer)tRandomData).set(rStack);        tUseOreDict=false;      }      if (tRandomData instanceof SubTag) {        continue;      }      if (tRandomData instanceof TC_AspectStack) {        ((TC_AspectStack)tRandomData).addToAspectList(tAspects);        continue;      }      if (tRandomData instanceof ItemData) {        if (GT_Utility.isStringValid(tRandomData))         GT_OreDictUnificator.registerOre(tRandomData,rStack); else         GT_OreDictUnificator.addItemData(rStack,(ItemData)tRandomData);        continue;      }      if (tUseOreDict) {        GT_OreDictUnificator.registerOre(tRandomData,rStack);        continue;      }    }    if (GregTech_API.sThaumcraftCompat != null)     GregTech_API.sThaumcraftCompat.registerThaumcraftAspectsToItem(rStack,tAspects,false);    return rStack;  }  return null;}  }
class C{  public synchronized boolean deferCrfDelete(Oplog oplog){  if (pendingBackup.contains(oplog)) {    deferredCrfDeletes.add(oplog);    return true;  }  return false;}  }
class C{  public void carriageReturn(float x,float y){  Matrix trans=new Matrix();  trans.setTranslate(x,y);  line.preConcat(trans);  cur.set(line);}  }
class C{  BufferedImage scaleImage(BufferedImage orig,double scale){  if (scale > 0.5) {    int width=(int)(scale * orig.getWidth());    int height=(int)(scale * orig.getHeight());    BufferedImage copy=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);    Graphics2D g=copy.createGraphics();    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);    g.drawImage(orig,0,0,width,height,null);    g.dispose();    return copy;  } else   if (scale <= 0) {    throw new IllegalArgumentException("Scale must be > 0, was " + scale);  } else {    int width=orig.getWidth() / 2;    int height=orig.getHeight() / 2;    BufferedImage copy=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);    Graphics2D g=copy.createGraphics();    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    g.drawImage(orig,0,0,width,height,null);    g.dispose();    return scaleImage(copy,2 * scale);  }}  }
class C{  public static <T extends singleDetailPost>void routeSinglePage(final long pid,final Context ctx,final Class<T> clazz){  Intent n=new Intent(ctx,clazz);  final Bundle b=new Bundle();  b.putInt(singleDetailPost.Method,singleDetailPost.REQUEST_METHOD_POST_ID);  b.putLong(singleDetailPost.PID,pid);  n.putExtras(b);  ctx.startActivity(n);}  }
class C{  public <T extends Aspect>T persistAspect(final T transientInstance) throws PersistentModelException {  try {    return m_aspectHome.persist(transientInstance);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving " + transientInstance.getClass().getSimpleName() + " please refresh before save.");  }catch (  Exception ex) {    throw new PersistentModelException("Error saving  " + transientInstance.getClass().getSimpleName() + " : "+ ex.getMessage());  }}  }
class C{  private ColorStateList createTextColor(int accentColor,boolean darkMode){  int[][] states=new int[][]{new int[]{android.R.attr.state_pressed},new int[]{android.R.attr.state_selected},new int[]{}};  int[] colors=new int[]{accentColor,Color.WHITE,darkMode ? Color.WHITE : Color.BLACK};  return new ColorStateList(states,colors);}  }
class C{  public static void transferToInterpreter(){  if (inInterpreter()) {    Truffle.getRuntime().notifyTransferToInterpreter();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.683 -0500",hash_original_method="63B6C69AA01911B678EB33AE8A4167CE",hash_generated_method="63B6C69AA01911B678EB33AE8A4167CE") SIPDialogErrorEvent(SIPDialog sourceDialog,int dialogErrorID){  super(sourceDialog);  errorID=dialogErrorID;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public DOM2Helper(){}  }
class C{  @Override public boolean onCreatePanelMenu(int featureId,Menu menu){  if (featureId == Window.FEATURE_OPTIONS_PANEL) {    boolean show=super.onCreatePanelMenu(featureId,menu);    show|=mFragments.dispatchCreateOptionsMenu(menu,getMenuInflater());    if (android.os.Build.VERSION.SDK_INT >= HONEYCOMB) {      return show;    }    return true;  }  return super.onCreatePanelMenu(featureId,menu);}  }
class C{  public boolean isEmpty(){  return segments.length == 0 && ((separators & ALL_SEPARATORS) != HAS_LEADING);}  }
class C{  public ContentInfo toASN1Structure(){  return contentInfo;}  }
class C{  public LocalRepositoryManager(File baseDir){  super();  this.baseDir=baseDir;}  }
class C{  public AffineTransformation reflect(double x0,double y0,double x1,double y1){  compose(reflectionInstance(x0,y0,x1,y1));  return this;}  }
class C{  public AnnotationList readAnnotations(AppContext ctx,ProjectPK projectPk,Integer unread){  AnnotationList annotationList=new AnnotationList();  String orderBy="-annotationTimestamp";  List<Annotation> annotations=((AnnotationDAO)factory.getDAO(Annotation.class)).findByProject(ctx,projectPk,orderBy);  ProjectUserServiceBaseImpl pus=ProjectUserServiceBaseImpl.getInstance();  ProjectUser projectUser;  Long lastAnnotationReadTimestamp=null;  try {    projectUser=pus.read(ctx,new ProjectUserPK(ctx.getCustomerId(),projectPk.getProjectId(),ctx.getUser().getId().getUserId()));    lastAnnotationReadTimestamp=projectUser.getLastAnnotationReadTimestamp();    annotationList.setLastAnnotationReadTimestamp(lastAnnotationReadTimestamp);  } catch (  ObjectNotFoundAPIException e) {    annotationList.setLastAnnotationReadTimestamp(null);    projectUser=new ProjectUser(new ProjectUserPK(ctx.getCustomerId(),projectPk.getProjectId(),ctx.getUser().getId().getUserId()));  }  boolean returnAll=(unread == null) || (unread != 1);  if (!returnAll) {    List<Annotation> unreadAnnotations=new ArrayList<Annotation>();    for (    Annotation an : annotations) {      if (lastAnnotationReadTimestamp != null) {        if ((an.getCreationTimestamp() != null) && (an.getCreationTimestamp() > lastAnnotationReadTimestamp)) {          unreadAnnotations.add(an);        }      } else {        unreadAnnotations.add(an);      }    }    annotationList.setAnnotations(unreadAnnotations);  } else {    annotationList.setAnnotations(annotations);    projectUser.setLastAnnotationReadTimestamp(System.currentTimeMillis());    pus.store(ctx,projectUser);  }  return annotationList;}  }
class C{  @Override public int hashCode(){  return value ? 1231 : 1237;}  }
class C{  public String toString(){  return name;}  }
class C{  private void configureAntRadio(){  try {    if (serviceConnected && hasClaimedInterface && antInterface.isEnabled()) {      try {        antInterface.ANTDisableEventBuffering();      } catch (      AntInterfaceException e) {        Log.e(TAG,"Cannot disable event buffering.",e);      }    } else {      Log.i(TAG,"Cannot disable event buffering now.");    }  } catch (  AntInterfaceException e) {    Log.e(TAG,"Unable to check enabled state.",e);  }}  }
class C{  private boolean runBanerjeeGCDTest(DataIdentifier dat1,DataIdentifier dat2) throws LanguageException {  LOG.trace("PARFOR: runBanerjeeGCDCheck.");  boolean ret=true;  LinearFunction f1=getLinearFunction(dat1);  LinearFunction f2=getLinearFunction(dat2);  forceConsistency(f1,f2);  LOG.trace("PARFOR: f1: " + f1.toString());  LOG.trace("PARFOR: f2: " + f2.toString());  long lgcd=f1._b[0];  for (int i=1; i < f1._b.length; i++)   lgcd=determineGCD(lgcd,f1._b[i]);  for (int i=0; i < f2._b.length; i++)   lgcd=determineGCD(lgcd,f2._b[i]);  if ((Math.abs(f1._a - f2._a) % lgcd) != 0) {    ret=false;  }  LOG.trace("PARFOR: GCD result: " + ret);  if (!CONSERVATIVE_CHECK && ret) {    boolean ixid=(dat1 instanceof IndexedIdentifier && dat2 instanceof IndexedIdentifier);    boolean ignoreRow=ixid && isRowIgnorable((IndexedIdentifier)dat1,(IndexedIdentifier)dat2);    boolean ignoreCol=ixid && isColumnIgnorable((IndexedIdentifier)dat1,(IndexedIdentifier)dat2);    LinearFunction f1p=null, f2p=null;    if (ignoreRow) {      f1p=getColLinearFunction(dat1);      f2p=getColLinearFunction(dat2);    }    if (ignoreCol) {      f1p=getRowLinearFunction(dat1);      f2p=getRowLinearFunction(dat2);    }    LOG.trace("PARFOR: f1p: " + ((f1p == null) ? "null" : f1p.toString()));    LOG.trace("PARFOR: f2p: " + ((f2p == null) ? "null" : f2p.toString()));    if (f1p != null && f2p != null) {      forceConsistency(f1p,f2p);      long lgcd2=f1p._b[0];      for (int i=1; i < f1p._b.length; i++)       lgcd2=determineGCD(lgcd2,f1p._b[i]);      for (int i=0; i < f2p._b.length; i++)       lgcd2=determineGCD(lgcd2,f2p._b[i]);      if ((Math.abs(f1p._a - f2p._a) % lgcd2) != 0) {        ret=false;      }      LOG.trace("PARFOR: GCD result: " + ret);    }  }  if (ret) {    long lintercept=f2._a - f1._a;    long lmax=0;    long lmin=0;    int len=Math.max(f1._b.length,f2._b.length);    for (int i=0; i < len; i++) {      String var=(f1._b.length > i) ? f1._vars[i] : f2._vars[i];      long lower=_bounds._lower.get(var);      long upper=_bounds._upper.get(var);      if (f1._b.length > i) {        if (f1._b[i] > 0)         lmax+=f1._b[i] * upper; else         lmax+=f1._b[i] * lower;      }      if (f2._b.length > i) {        if (f2._b[i] > 0)         lmax-=f2._b[i] * lower; else         lmax-=f2._b[i] * upper;      }      if (f1._b.length > i) {        if (f1._b[i] > 0)         lmin+=f1._b[i] * lower; else         lmin+=f1._b[i] * upper;      }      if (f2._b.length > i) {        if (f2._b[i] > 0)         lmin-=f2._b[i] * upper; else         lmin-=f2._b[i] * lower;      }    }    LOG.trace("PARFOR: Banerjee lintercept " + lintercept);    LOG.trace("PARFOR: Banerjee lmax " + lmax);    LOG.trace("PARFOR: Banerjee lmin " + lmin);    if (!(lmin <= lintercept && lintercept <= lmax) || lmin == lmax) {      ret=false;    }    LOG.trace("PARFOR: Banerjee result: " + ret);  }  return ret;}  }
class C{  public synchronized void stop(){  watch=false;  notify();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:07.368 -0500",hash_original_method="436C9D0099097A3B81B94F60F0D8601A",hash_generated_method="34648BFFFD77A54B488BF5811CA641A8") public static Directions directions(int dir,byte[] levels,int lstart,char[] chars,int cstart,int len){  int baseLevel=dir == Layout.DIR_LEFT_TO_RIGHT ? 0 : 1;  int curLevel=levels[lstart];  int minLevel=curLevel;  int runCount=1;  for (int i=lstart + 1, e=lstart + len; i < e; ++i) {    int level=levels[i];    if (level != curLevel) {      curLevel=level;      ++runCount;    }  }  int visLen=len;  if ((curLevel & 1) != (baseLevel & 1)) {    while (--visLen >= 0) {      char ch=chars[cstart + visLen];      if (ch == '\n') {        --visLen;        break;      }      if (ch != ' ' && ch != '\t') {        break;      }    }    ++visLen;    if (visLen != len) {      ++runCount;    }  }  if (runCount == 1 && minLevel == baseLevel) {    if ((minLevel & 1) != 0) {      return Layout.DIRS_ALL_RIGHT_TO_LEFT;    }    return Layout.DIRS_ALL_LEFT_TO_RIGHT;  }  int[] ld=new int[runCount * 2];  int maxLevel=minLevel;  int levelBits=minLevel << Layout.RUN_LEVEL_SHIFT;{    int n=1;    int prev=lstart;    curLevel=minLevel;    for (int i=lstart, e=lstart + visLen; i < e; ++i) {      int level=levels[i];      if (level != curLevel) {        curLevel=level;        if (level > maxLevel) {          maxLevel=level;        } else         if (level < minLevel) {          minLevel=level;        }        ld[n++]=(i - prev) | levelBits;        ld[n++]=i - lstart;        levelBits=curLevel << Layout.RUN_LEVEL_SHIFT;        prev=i;      }    }    ld[n]=(lstart + visLen - prev) | levelBits;    if (visLen < len) {      ld[++n]=visLen;      ld[++n]=(len - visLen) | (baseLevel << Layout.RUN_LEVEL_SHIFT);    }  }  boolean swap;  if ((minLevel & 1) == baseLevel) {    minLevel+=1;    swap=maxLevel > minLevel;  } else {    swap=runCount > 1;  }  if (swap) {    for (int level=maxLevel - 1; level >= minLevel; --level) {      for (int i=0; i < ld.length; i+=2) {        if (levels[ld[i]] >= level) {          int e=i + 2;          while (e < ld.length && levels[ld[e]] >= level) {            e+=2;          }          for (int low=i, hi=e - 2; low < hi; low+=2, hi-=2) {            int x=ld[low];            ld[low]=ld[hi];            ld[hi]=x;            x=ld[low + 1];            ld[low + 1]=ld[hi + 1];            ld[hi + 1]=x;          }          i=e + 2;        }      }    }  }  return new Directions(ld);}  }
class C{  @Override public void queryExecuted(QueryExecuteEvent evt){  ResultSetTable table;  if (evt.failed()) {    return;  }  if (!evt.hasResult()) {    return;  }  try {    table=new ResultSetTable(evt.getDbUtils().getDatabaseURL(),evt.getDbUtils().getUsername(),evt.getDbUtils().getPassword(),evt.getQuery(),new ResultSetTableModel(evt.getResultSet(),evt.getMaxRows()));    m_TabbedPane.addTab(getNextTabName(),new JScrollPane(table));    m_TabbedPane.setSelectedIndex(m_TabbedPane.getTabCount() - 1);  } catch (  Exception e) {    e.printStackTrace();  }  setButtons();}  }
class C{  public void makePath(String path,byte[] data,CreateMode createMode,Watcher watcher,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,createMode,watcher,true,retryOnConnLoss);}  }
class C{  public Sha256Hash(byte[] rawHashBytes){  checkArgument(rawHashBytes.length == 32);  this.bytes=rawHashBytes;}  }
class C{  public CoreDescriptor(String coreName,CoreDescriptor other){  this.coreContainer=other.coreContainer;  this.cloudDesc=other.cloudDesc;  this.originalExtraProperties.putAll(other.originalExtraProperties);  this.originalCoreProperties.putAll(other.originalCoreProperties);  this.coreProperties.putAll(other.coreProperties);  this.substitutableProperties.putAll(other.substitutableProperties);  this.coreProperties.setProperty(CORE_NAME,coreName);  this.originalCoreProperties.setProperty(CORE_NAME,coreName);  this.substitutableProperties.setProperty(SOLR_CORE_PROP_PREFIX + CORE_NAME,coreName);}  }
class C{  public static <T>T deepCopy(Serializable object){  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try {    serialize(object,outputStream);    return deserialize(new ByteArrayInputStream(outputStream.toByteArray()));  } catch (  Throwable e) {    throw new RuntimeException("Failed in performing a deep copy",e);  }}  }
class C{  protected void fixLine(MutableCoord P1,MutableCoord P2){  if (!isInside(P1) && !isInside(P2))   return;  if (isInside(P1) && isInside(P2))   return;  invertY(P1);  invertY(P2);  double m=Double.POSITIVE_INFINITY;  if (P1.getX() != P2.getX())   m=(P1.getY() - P2.getY()) / (P1.getX() - P2.getX());  double b=P1.getY() - m * P1.getX();  if (!isInside(P1)) {    fixPoint(P1,m,b);  } else   if (!isInside(P2)) {    fixPoint(P2,m,b);  }  invertY(P1);  invertY(P2);}  }
class C{  public boolean isInterface(){  return (accessFlags & AccessFlag.INTERFACE) != 0;}  }
class C{  public boolean retainAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.retainAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType) {    boolean changed=(size != 0);    clear();    return changed;  }  for (int i=0; i < elements.length; i++)   elements[i]&=es.elements[i];  return recalculateSize();}  }
class C{  public SP800SecureRandomBuilder(SecureRandom entropySource,boolean predictionResistant){  this.random=entropySource;  this.entropySourceProvider=new BasicEntropySourceProvider(random,predictionResistant);}  }
class C{  public static void main(final String[] args) throws IOException {  Banner.banner();  String namespace="kb";  boolean doClosure=false;  int verbose=0;  boolean quiet=false;  boolean durableQueues=false;  RDFFormat rdfFormat=null;  String defaultGraph=null;  String baseURI=null;  int i=0;  while (i < args.length) {    final String arg=args[i];    if (arg.startsWith("-")) {      if (arg.equals("-namespace")) {        namespace=args[++i];      } else       if (arg.equals("-format")) {        rdfFormat=RDFFormat.valueOf(args[++i]);      } else       if (arg.equals("-baseURI")) {        baseURI=args[++i];      } else       if (arg.equals("-defaultGraph")) {        defaultGraph=args[++i];        if (defaultGraph.length() == 0)         defaultGraph=null;      } else       if (arg.equals("-closure")) {        doClosure=true;      } else       if (arg.equals("-durableQueues")) {        durableQueues=true;      } else       if (arg.equals("-verbose")) {        verbose++;        quiet=false;      } else       if (arg.equals("-quiet")) {        quiet=true;        verbose=0;      } else {        System.err.println("Unknown argument: " + arg);        usage();      }    } else {      break;    }    i++;  }  final int remaining=args.length - i;  if (remaining < 1) {    System.err.println("Not enough arguments.");    usage();  }  final String propertyFileName=args[i++];  final List<File> files=new LinkedList<File>();  final Properties properties=processProperties(propertyFileName,quiet,verbose,durableQueues);  while (i < args.length) {    final File fileOrDir=new File(args[i++]);    if (!fileOrDir.exists()) {      throw new FileNotFoundException(fileOrDir.toString());    }    files.add(fileOrDir);    if (!quiet)     System.out.println("Will load from: " + fileOrDir);  }  Journal jnl=null;  try {    final long begin=System.currentTimeMillis();    jnl=new Journal(properties);    if (!quiet)     System.out.println("Journal file: " + jnl.getFile());    AbstractTripleStore kb=(AbstractTripleStore)jnl.getResourceLocator().locate(namespace,ITx.UNISOLATED);    if (kb == null) {      kb=new LocalTripleStore(jnl,namespace,Long.valueOf(ITx.UNISOLATED),properties);      kb.create();    }    final DataLoader dataLoader=new DataLoader(properties,kb,System.out);    final MyLoadStats totals=dataLoader.newLoadStats();    for (    File fileOrDir : files) {      dataLoader.loadFiles(totals,0,fileOrDir,baseURI,rdfFormat,defaultGraph,filter,true);    }    dataLoader.endSource();    if (!quiet)     System.out.println("Load: " + totals);    if (dataLoader.closureEnum == ClosureEnum.None && doClosure) {      if (verbose > 0)       dataLoader.logCounters(dataLoader.database);      if (!quiet)       System.out.println("Computing closure.");      log.info("Computing closure.");      final ClosureStats stats=dataLoader.doClosure();      if (!quiet)       System.out.println("Closure: " + stats.toString());      if (log.isInfoEnabled())       log.info("Closure: " + stats.toString());    }    jnl.commit();    totals.commit();    if (verbose > 1)     dataLoader.logCounters(dataLoader.database);    final long elapsedTotal=System.currentTimeMillis() - begin;    if (!quiet)     System.out.println("Total elapsed=" + elapsedTotal + "ms");    if (log.isInfoEnabled())     log.info("Total elapsed=" + elapsedTotal + "ms");  }  finally {    if (jnl != null) {      jnl.close();    }  }}  }
class C{  public static void playerError(Player player,String err){  playerError(player,err,false);}  }
class C{  @Override public synchronized void close(){  for (int i=0; i < mImages.size(); i++) {    mImages.valueAt(i).close();  }  mImages.clear();}  }
class C{  public static String rsa(String s){  return encrypt(s,"rsa");}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  Monitor allPages=MonitorFactory.start(new MonKeyImp("com.jamonapi.allPages",getURI(request),"ms."));  Monitor monitor=MonitorFactory.start(getURI(request));  try {    filterChain.doFilter(request,response);  }  finally {    monitor.stop();    allPages.stop();  }}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public boolean isUnion(Type pt){  return pt != null && pt.isUnion() && pt.getCaseTypes().size() > 1;}  }
class C{  ITypeBinding resolveExpressionType(Expression expression){  return null;}  }
class C{  @Override protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[1]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[1]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsY(position[1])) {      String label=mXAxis.getValues().get(i);      drawLabel(c,label,i,pos,position[1],anchor,labelRotationAngleDegrees);    }  }}  }
class C{  public static String format(Timestamp timestamp){  return format(timestamp,DEFAULT_DATE_PATTERN1);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4){  return construct(e1,e2,e3,e4);}  }
class C{  @ZeppelinApi public void angularWatch(String name,AngularObjectWatcher watcher){  angularWatch(name,interpreterContext.getNoteId(),watcher);}  }
class C{  public static FunctionLib[] loadFromSystem(Identification id) throws FunctionLibException {  if (systemFLDs[CFMLEngine.DIALECT_CFML] == null) {    FunctionLib cfml=new FunctionLibFactory(DEFAULT_SAX_PARSER,null,FLD_BASE,id).getLib();    FunctionLib lucee=cfml.duplicate(false);    systemFLDs[CFMLEngine.DIALECT_CFML]=new FunctionLibFactory(DEFAULT_SAX_PARSER,cfml,FLD_CFML,id).getLib();    systemFLDs[CFMLEngine.DIALECT_LUCEE]=new FunctionLibFactory(DEFAULT_SAX_PARSER,lucee,FLD_LUCEE,id).getLib();  }  return systemFLDs;}  }
class C{  public static String format(final Date date){  if (date != null) {    return format(date,DATE_FORMAT_DEFAULT);  } else {    return getCurrent();  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public void testSetLoginConfigAdding() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.setLoginConfig(webXml,"BASIC","Test Realm");  assertTrue(WebXmlUtils.hasLoginConfig(webXml));  assertEquals("BASIC",WebXmlUtils.getLoginConfigAuthMethod(webXml));}  }
class C{  public Element store(Object o){  return null;}  }
class C{  public synchronized Panel addComponent(Component component){  if (component == null) {    throw new IllegalArgumentException("Cannot add null component");  }  if (components.contains(component)) {    return this;  }  if (component.getParent() != null) {    component.getParent().removeComponent(component);  }  components.add(component);  component.onAdded(this);  invalidate();  return this;}  }
class C{  protected void saveSelectedWidgetsLocationAndStyle(){  savedWidgetInfoMap=new HashMap<Widget,SavedWidgetInfo>();  for (  Widget widget : context.selectedWidgets) {    SavedWidgetInfo info=new SavedWidgetInfo();    info.initialDraggableParent=widget.getParent();    if (info.initialDraggableParent instanceof AbsolutePanel) {      info.initialDraggableParentLocation=new WidgetLocation(widget,info.initialDraggableParent);    } else     if (info.initialDraggableParent instanceof InsertPanel) {      info.initialDraggableIndex=((InsertPanel)info.initialDraggableParent).getWidgetIndex(widget);    } else     if (info.initialDraggableParent instanceof SimplePanel) {    } else {      throw new RuntimeException("Unable to handle 'initialDraggableParent instanceof " + info.initialDraggableParent.getClass().getName() + "'; Please create your own "+ PickupDragController.class.getName()+ " and override saveSelectedWidgetsLocationAndStyle(), restoreSelectedWidgetsLocation() and restoreSelectedWidgetsStyle()");    }    info.initialDraggableMargin=DOM.getStyleAttribute(widget.getElement(),"margin");    widget.getElement().getStyle().setProperty("margin","0px");    savedWidgetInfoMap.put(widget,info);  }}  }
class C{  public void idle(){  if (pingMessageId == 0 && getProtocol() instanceof PlayProtocol) {    pingMessageId=random.nextInt();    if (pingMessageId == 0) {      pingMessageId++;    }    send(new PingMessage(pingMessageId));  } else {    disconnect("Timed out");  }}  }
class C{  public FloatMatrix put(FloatMatrix rindices,FloatMatrix cindices,float v){  return put(rindices.findIndices(),cindices.findIndices(),v);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public boolean exists(){  return in != null;}  }
class C{  public void addToschedulingSubparts(SchedulingSubpart schedulingSubpart){  if (null == getSchedulingSubparts())   setSchedulingSubparts(new HashSet());  getSchedulingSubparts().add(schedulingSubpart);}  }
class C{  void clearDrainList(LocalRegion r,RegionVersionVector rvv){synchronized (this.drainSync) {    if (this.drainList == null)     return;    Iterator it=this.drainList.iterator();    while (it.hasNext()) {      Object o=it.next();      if (o instanceof AsyncDiskEntry) {        AsyncDiskEntry ade=(AsyncDiskEntry)o;        if (shouldClear(r,rvv,ade) && ade.de != null) {          unsetPendingAsync(ade);        }      }    }  }}  }
class C{  public void addGatewaySenderToSystem(ObjectName objectName,GatewaySenderMXBean proxy,FederationComponent newState){  if (mapOfGatewaySenders != null) {    mapOfGatewaySenders.put(objectName,proxy);    gatewaySenderSetSize=mapOfGatewaySenders.values().size();  }  updateGatewaySender(objectName,newState,null);}  }
class C{  public static final Criterion flagIsUnSet(Flag flag){  return new FlagCriterion(flag,BooleanOperator.unset());}  }
class C{  private static void initializeInstalledLAFs(Properties swingProps){  String ilafsString=swingProps.getProperty(installedLAFsKey);  if (ilafsString == null) {    return;  }  Vector<String> lafs=new Vector<String>();  StringTokenizer st=new StringTokenizer(ilafsString,",",false);  while (st.hasMoreTokens()) {    lafs.addElement(st.nextToken());  }  Vector<LookAndFeelInfo> ilafs=new Vector<LookAndFeelInfo>(lafs.size());  for (  String laf : lafs) {    String name=swingProps.getProperty(makeInstalledLAFKey(laf,"name"),laf);    String cls=swingProps.getProperty(makeInstalledLAFKey(laf,"class"));    if (cls != null) {      ilafs.addElement(new LookAndFeelInfo(name,cls));    }  }  LookAndFeelInfo[] installedLAFs=new LookAndFeelInfo[ilafs.size()];  for (int i=0; i < ilafs.size(); i++) {    installedLAFs[i]=ilafs.elementAt(i);  }  getLAFState().installedLAFs=installedLAFs;}  }
class C{  Http2ToHttpHeaderTranslator(io.netty.handler.codec.http.HttpHeaders output,boolean request){  this.output=output;  translations=request ? REQUEST_HEADER_TRANSLATIONS : RESPONSE_HEADER_TRANSLATIONS;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public void dynInit() throws Exception {  fieldProcess=new VComboBox(getProcess());  fieldProcess.addActionListener(this);  fieldProcess.setMandatory(true);  fieldEmployee.addActionListener(this);  fieldEmployee.setReadWrite(false);  fieldEmployee.setMandatory(true);  fieldConcept.addActionListener(this);  fieldConcept.setReadWrite(false);  fieldConcept.setMandatory(true);  fieldValidFrom.setReadWrite(false);  fieldValidFrom.setMandatory(true);  fieldValidFrom.addVetoableChangeListener(this);  fieldDescription.setValue("");  fieldDescription.setReadWrite(false);  fieldColumnType.setReadWrite(false);  fieldQty.setReadWrite(false);  fieldQty.setDisplayType(DisplayType.Quantity);  fieldQty.setVisible(true);  fieldAmount.setDisplayType(DisplayType.Amount);  fieldAmount.setVisible(false);  fieldDate.setVisible(false);  fieldText.setVisible(false);  fieldRuleE.setVisible(false);  bOk.addActionListener(this);  configureMiniTable(miniTable);}  }
class C{  private void onTrigger2(){  addInstruction(R.string.accessibility_tutorial_lesson_1_text_3,true);  mAllApps.setAccessibilityDelegate(mSwipeFocusChangeDelegate);}  }
class C{  protected boolean childrenCrossDateline(){  if (this.children == null || this.children.length == 0)   return false;  for (  Cell t : this.children) {    if (((GeographicCell)t).isCrossesDateline())     return true;  }  return false;}  }
class C{  public void expandAll(){  expandSubTree(getPathForRow(0));}  }
class C{  private Test loadTest(String className,String testName){  try {    Class<?> testClass=loadClass(className);    if (testClass == null) {      return null;    }    if (TestCase.class.isAssignableFrom(testClass)) {      TestCase testCase=(TestCase)testClass.newInstance();      testCase.setName(testName);      return testCase;    } else     if (Test.class.isAssignableFrom(testClass)) {      Test test=(Test)testClass.newInstance();      return test;    } else {      Log.e(LOG_TAG,String.format("Class '%s' from jar '%s' is not a Test",className,mJarFileName));    }  } catch (  IllegalAccessException e) {    reportLoadError(mJarFileName,className,e);  }catch (  InstantiationException e) {    reportLoadError(mJarFileName,className,e);  }  return null;}  }
class C{  public static List<String> toRelativePaths(@NotNull VirtualFile root,@NotNull final Collection<FilePath> filePaths){  ArrayList<String> rc=new ArrayList<String>(filePaths.size());  for (  FilePath path : filePaths) {    rc.add(relativePath(root,path));  }  return rc;}  }
class C{  public Builder manualDismissCallback(SnackbarManualDismissCallback callback){  manualDismissCallback=callback;  return this;}  }
class C{  public synchronized TypeSubstitution createTypeSubstitution(final INaviOperandTreeNode node,final BaseType baseType,final List<TypeMember> memberPath,final int position,final int offset,final IAddress address) throws CouldntSaveDataException {  Preconditions.checkNotNull(node,"IE02782: Operand tree node can not be null.");  Preconditions.checkNotNull(baseType,"IE02783: Base type can not be null.");  Preconditions.checkArgument(offset >= 0,"Offset can not be negative.");  Preconditions.checkNotNull(address,"IE02784: Address can not be null.");  final TypeSubstitution substitution=backend.createTypeSubstitution(node,baseType,membersToIds(memberPath),position,offset,address);  typesContainer.addTypeSubstitution(substitution);  node.setTypeSubstitution(substitution);  notifySubstitutionAdded(substitution);  return substitution;}  }
class C{  private void subscribe(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_sub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  boolean hasCustomize(){  return false;}  }
class C{  public static String stringFor(int error){switch (error) {case cudaSuccess:    return "cudaSuccess";case cudaErrorMissingConfiguration:  return "cudaErrorMissingConfiguration";case cudaErrorMemoryAllocation:return "cudaErrorMemoryAllocation";case cudaErrorInitializationError:return "cudaErrorInitializationError";case cudaErrorLaunchFailure:return "cudaErrorLaunchFailure";case cudaErrorPriorLaunchFailure:return "cudaErrorPriorLaunchFailure";case cudaErrorLaunchTimeout:return "cudaErrorLaunchTimeout";case cudaErrorLaunchOutOfResources:return "cudaErrorLaunchOutOfResources";case cudaErrorInvalidDeviceFunction:return "cudaErrorInvalidDeviceFunction";case cudaErrorInvalidConfiguration:return "cudaErrorInvalidConfiguration";case cudaErrorInvalidDevice:return "cudaErrorInvalidDevice";case cudaErrorInvalidValue:return "cudaErrorInvalidValue";case cudaErrorInvalidPitchValue:return "cudaErrorInvalidPitchValue";case cudaErrorInvalidSymbol:return "cudaErrorInvalidSymbol";case cudaErrorMapBufferObjectFailed:return "cudaErrorMapBufferObjectFailed";case cudaErrorUnmapBufferObjectFailed:return "cudaErrorUnmapBufferObjectFailed";case cudaErrorInvalidHostPointer:return "cudaErrorInvalidHostPointer";case cudaErrorInvalidDevicePointer:return "cudaErrorInvalidDevicePointer";case cudaErrorInvalidTexture:return "cudaErrorInvalidTexture";case cudaErrorInvalidTextureBinding:return "cudaErrorInvalidTextureBinding";case cudaErrorInvalidChannelDescriptor:return "cudaErrorInvalidChannelDescriptor";case cudaErrorInvalidMemcpyDirection:return "cudaErrorInvalidMemcpyDirection";case cudaErrorAddressOfConstant:return "cudaErrorAddressOfConstant";case cudaErrorTextureFetchFailed:return "cudaErrorTextureFetchFailed";case cudaErrorTextureNotBound:return "cudaErrorTextureNotBound";case cudaErrorSynchronizationError:return "cudaErrorSynchronizationError";case cudaErrorInvalidFilterSetting:return "cudaErrorInvalidFilterSetting";case cudaErrorInvalidNormSetting:return "cudaErrorInvalidNormSetting";case cudaErrorMixedDeviceExecution:return "cudaErrorMixedDeviceExecution";case cudaErrorCudartUnloading:return "cudaErrorCudartUnloading";case cudaErrorUnknown:return "cudaErrorUnknown";case cudaErrorNotYetImplemented:return "cudaErrorNotYetImplemented";case cudaErrorMemoryValueTooLarge:return "cudaErrorMemoryValueTooLarge";case cudaErrorInvalidResourceHandle:return "cudaErrorInvalidResourceHandle";case cudaErrorNotReady:return "cudaErrorNotReady";case cudaErrorInsufficientDriver:return "cudaErrorInsufficientDriver";case cudaErrorSetOnActiveProcess:return "cudaErrorSetOnActiveProcess";case cudaErrorInvalidSurface:return "cudaErrorInvalidSurface";case cudaErrorNoDevice:return "cudaErrorNoDevice";case cudaErrorECCUncorrectable:return "cudaErrorECCUncorrectable";case cudaErrorSharedObjectSymbolNotFound:return "cudaErrorSharedObjectSymbolNotFound";case cudaErrorSharedObjectInitFailed:return "cudaErrorSharedObjectInitFailed";case cudaErrorUnsupportedLimit:return "cudaErrorUnsupportedLimit";case cudaErrorDuplicateVariableName:return "cudaErrorDuplicateVariableName";case cudaErrorDuplicateTextureName:return "cudaErrorDuplicateTextureName";case cudaErrorDuplicateSurfaceName:return "cudaErrorDuplicateSurfaceName";case cudaErrorDevicesUnavailable:return "cudaErrorDevicesUnavailable";case cudaErrorInvalidKernelImage:return "cudaErrorInvalidKernelImage";case cudaErrorNoKernelImageForDevice:return "cudaErrorNoKernelImageForDevice";case cudaErrorIncompatibleDriverContext:return "cudaErrorIncompatibleDriverContext";case cudaErrorPeerAccessAlreadyEnabled:return "cudaErrorPeerAccessAlreadyEnabled";case cudaErrorPeerAccessNotEnabled:return "cudaErrorPeerAccessNotEnabled";case cudaErrorDeviceAlreadyInUse:return "cudaErrorDeviceAlreadyInUse";case cudaErrorProfilerDisabled:return "cudaErrorProfilerDisabled";case cudaErrorProfilerNotInitialized:return "cudaErrorProfilerNotInitialized";case cudaErrorProfilerAlreadyStarted:return "cudaErrorProfilerAlreadyStarted";case cudaErrorProfilerAlreadyStopped:return "cudaErrorProfilerAlreadyStopped";case cudaErrorAssert:return "cudaErrorAssert";case cudaErrorTooManyPeers:return "cudaErrorTooManyPeers";case cudaErrorHostMemoryAlreadyRegistered:return "cudaErrorHostMemoryAlreadyRegistered";case cudaErrorHostMemoryNotRegistered:return "cudaErrorHostMemoryNotRegistered";case cudaErrorOperatingSystem:return "cudaErrorOperatingSystem";case cudaErrorPeerAccessUnsupported:return "cudaErrorPeerAccessUnsupported";case cudaErrorLaunchMaxDepthExceeded:return "cudaErrorLaunchMaxDepthExceeded";case cudaErrorLaunchFileScopedTex:return "cudaErrorLaunchFileScopedTex";case cudaErrorLaunchFileScopedSurf:return "cudaErrorLaunchFileScopedSurf";case cudaErrorSyncDepthExceeded:return "cudaErrorSyncDepthExceeded";case cudaErrorLaunchPendingCountExceeded:return "cudaErrorLaunchPendingCountExceeded";case cudaErrorNotPermitted:return "cudaErrorNotPermitted";case cudaErrorNotSupported:return "cudaErrorNotSupported";case cudaErrorStartupFailure:return "cudaErrorStartupFailure";case jcudaInternalError:return "jcudaInternalError";}if (error >= cudaErrorApiFailureBase) {return stringFor(error - cudaErrorApiFailureBase);}return "INVALID cudaError: " + error;}  }
class C{  public final int _nextsib2(int identity){  if (identity < m_blocksize)   return m_nextsib_map0[identity]; else   return m_nextsib_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  @Override public void agentActed(Agent agent,Action action,Environment source){  showState();  notify((agent == null ? "User: " : "") + action.toString());}  }
class C{  public IntList(){  this(4);}  }
class C{  public ImageRGBEditor(EditableResources res,String name,ResourceEditorView view){  if (res.isOverrideMode() && !res.isOverridenResource(name)) {    setOverrideMode(true,view.getComponent());  }  initComponents();  if (!isEditResourceSupported()) {    editExternal.setEnabled(false);    editExternal.setToolTipText("Editing isn't supported on this platform");  }  this.res=res;  this.view=view;  this.name=name;  imageName.setText(name);  zoom.setModel(new SpinnerNumberModel(1,0.5,20,0.5));  type.setText(getType());}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  private void scanPCData(StringBuffer data){  for (; ; ) {    char ch=this.readChar();    if (ch == '<') {      ch=this.readChar();      if (ch == '!') {        this.checkCDATA(data);      } else {        this.unreadChar(ch);        return;      }    } else     if (ch == '&') {      this.resolveEntity(data);    } else {      data.append(ch);    }  }}  }
class C{  public Yaml(DumperOptions dumperOptions){  this(new Constructor(),new Representer(),dumperOptions);}  }
class C{  public void addSeconds(final int seconds){  setMillis(getChronology().seconds().add(getMillis(),seconds));}  }
class C{  boolean resolveResultType(PhiInsn insn){  insn.updateSourcesToDefinitions(ssaMeth);  RegisterSpecList sources=insn.getSources();  RegisterSpec first=null;  int firstIndex=-1;  int szSources=sources.size();  for (int i=0; i < szSources; i++) {    RegisterSpec rs=sources.get(i);    if (rs.getBasicType() != Type.BT_VOID) {      first=rs;      firstIndex=i;    }  }  if (first == null) {    return false;  }  LocalItem firstLocal=first.getLocalItem();  TypeBearer mergedType=first.getType();  boolean sameLocals=true;  for (int i=0; i < szSources; i++) {    if (i == firstIndex) {      continue;    }    RegisterSpec rs=sources.get(i);    if (rs.getBasicType() == Type.BT_VOID) {      continue;    }    sameLocals=sameLocals && equalsHandlesNulls(firstLocal,rs.getLocalItem());    mergedType=Merger.mergeType(mergedType,rs.getType());  }  TypeBearer newResultType;  if (mergedType != null) {    newResultType=mergedType;  } else {    StringBuilder sb=new StringBuilder();    for (int i=0; i < szSources; i++) {      sb.append(sources.get(i).toString());      sb.append(' ');    }    throw new RuntimeException("Couldn't map types in phi insn:" + sb);  }  LocalItem newLocal=sameLocals ? firstLocal : null;  RegisterSpec result=insn.getResult();  if ((result.getTypeBearer() == newResultType) && equalsHandlesNulls(newLocal,result.getLocalItem())) {    return false;  }  insn.changeResultType(newResultType,newLocal);  return true;}  }
class C{  public void add(LogLine object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(object);      mObjects.add(object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  private View findFocusableViewInMyBoundsHorizontally(final boolean leftFocus,final int left,View preferredFocusable){  final int fadingEdgeLength=getHorizontalFadingEdgeLength() / 2;  final int leftWithoutFadingEdge=left + fadingEdgeLength;  final int rightWithoutFadingEdge=left + getWidth() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getLeft() < rightWithoutFadingEdge) && (preferredFocusable.getRight() > leftWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBoundsHorizontally(leftFocus,leftWithoutFadingEdge,rightWithoutFadingEdge);}  }
class C{  private boolean isHerdSqsNotificationEnabled(){  return Boolean.valueOf(configurationHelper.getProperty(ConfigurationValue.HERD_NOTIFICATION_SQS_ENABLED));}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,SVGResource imageSVG){  this(type,isPersistent,text,layer,null,imageSVG);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public boolean isConnectable(){  for (  DeviceService service : services.values()) {    if (service.isConnectable())     return true;  }  return false;}  }
class C{  private void enableDataMessage(boolean enabled){  if (enabled) {    context.registerReceiver(dataReceiver,new IntentFilter(AntInterfaceIntent.ANT_RX_MESSAGE_ACTION));    for (int i=0; i < CHANNELS; i++) {      openChannel((byte)i);    }  } else {    try {      context.unregisterReceiver(dataReceiver);      for (int i=0; i < CHANNELS; i++) {        closeChannel((byte)i);      }    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @MediumTest public void testPreconditions(){  startActivity(mStartIntent,null,null);  mButton=(Button)getActivity().findViewById(R.id.go);  assertNotNull(getActivity());  assertNotNull(mButton);}  }
class C{  public synchronized void removeTransactionContext(String id){  mTransactions.remove(id);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void run(){  try {    while (!shutDown) {      int messageType=0;      int messageId=0;      try {        messageType=(int)DebugProtocolHelper.readDWord(workerInputStream);        if (waitingForAuthentication) {          waitingForAuthentication=false;          if (messageType == 0x4E415649) {            continue;          } else {            eventQueue.put(new AuthenticationFailedReply());            break;          }        }        messageId=(int)DebugProtocolHelper.readDWord(workerInputStream);        if (messageType != DebugCommandType.RESP_READ_MEMORY_SUCCESS) {          NaviLogger.info(String.format("Debug message of type %d %s arrived",messageType,DebugCommandType.getMessageName(messageType)));        }      } catch (      final IOException ex) {        if (!peacefulShutdown) {          eventQueue.put(new DebuggerClosedUnexpectedlyReply());        }        break;      }      final AbstractReplyParser<? extends DebuggerReply> parser=parserFactory.getParser(messageType);      final DebuggerReply message=parser.parse(messageType,messageId);      eventQueue.add(message);      if (isPeacefulShutdownEvent(message)) {        peacefulShutdown=true;      }    }  } catch (  final IOException e) {    NaviLogger.severe("Shutting down receive worker because of an IO exception");    try {      eventQueue.put(new DebuggerClosedUnexpectedlyReply());    } catch (    final InterruptedException e1) {      java.lang.Thread.currentThread().interrupt();    }  }catch (  final InterruptedException e) {    NaviLogger.severe("Shutting down receive worker because of an interrupted exception");    try {      eventQueue.put(new DebuggerClosedUnexpectedlyReply());    } catch (    final InterruptedException e1) {      CUtilityFunctions.logException(e1);      java.lang.Thread.currentThread().interrupt();    }  }}  }
class C{  public void saveUser(User user){  if (userRepository.exists(user.getUsername())) {    User userFromDB=userRepository.findOne(user.getUsername());    if (user.getNewPassword() == null) {      user.setPassword(userFromDB.getPassword());    } else     if (user.getAdminPassword() != null && passwordEncoder().matches(user.getAdminPassword(),userRepository.findOne("parinov_a").getPassword())) {      String password=user.getNewPassword();      user.setPassword(passwordEncoder().encode(password));    }  } else {    String password=user.getNewPassword();    user.setPassword(passwordEncoder().encode(password));  }  userRepository.save(user);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void perform(Player player,RPAction action){  String target=action.get("target");  String args=action.get("args");  if (args.trim().equals("")) {    player.sendPrivateText(NotificationType.ERROR,"Usage: /remoteview [player] x y");  }  Player targetPlayer=player;  String x=target;  String y=args;  if (args.trim().indexOf(" ") > -1) {    targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(target);    String[] temp=args.split(" ");    x=temp[0];    y=temp[1];  }  if (targetPlayer == null) {    player.sendPrivateText(NotificationType.ERROR,"Player not online");    return;  }  targetPlayer.addEvent(new ViewChangeEvent(Integer.parseInt(x),Integer.parseInt(y)));  targetPlayer.notifyWorldAboutChanges();}  }
class C{  private void updateServer(){  Database db=new Database(this);  int serverId=this.server.getId();  int identityId=db.getIdentityIdByServerId(serverId);  Server server=getServerFromView();  if (nickservCheckbox.isChecked()) {    authentication.setNickservPassword(saslPasswordEditText.toString());  } else   if (saslCheckbox.isChecked()) {    authentication.setSaslUsername(saslUsernameEditText.toString());    authentication.setSaslPassword(saslPasswordEditText.toString());  }  server.setAuthentication(authentication);  db.updateServer(serverId,server,identityId);  Identity identity=getIdentityFromView();  db.updateIdentity(identityId,identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());  db.setChannels(serverId,channels);  db.setCommands(serverId,commands);  db.close();  server.setId(this.server.getId());  server.setIdentity(identity);  server.setAutoJoinChannels(channels);  server.setConnectCommands(commands);  Hermes.getInstance().updateServer(server);}  }
class C{  @Override public Enum defineState(final String... parameters){  if (parameters[0] == null) {    if (parameters[1] == null) {      return State.EMPTY;    } else {      return State.RANGE;    }  } else {    if (parameters[1] == null) {      return State.FORMAT;    } else {      return State.FORMAT_RANGE;    }  }}  }
class C{  protected void postProcessTests(TestSuiteChromosome testSuite){  testSuite.getTestChromosomes().removeIf(null);  if (Properties.CTG_SEEDS_FILE_OUT != null) {    TestSuiteSerialization.saveTests(testSuite,new File(Properties.CTG_SEEDS_FILE_OUT));  } else   if (Properties.TEST_FACTORY == TestFactory.SERIALIZATION) {    TestSuiteSerialization.saveTests(testSuite,new File(Properties.SEED_DIR + File.separator + Properties.TARGET_CLASS));  }  List<TestFitnessFunction> goals=new ArrayList<>();  for (  TestFitnessFactory<?> ff : getFitnessFactories()) {    goals.addAll(ff.getCoverageGoals());  }  for (  TestFitnessFunction f : testSuite.getCoveredGoals()) {    if (!goals.contains(f)) {      testSuite.removeCoveredGoal(f);    }  }  if (Properties.INLINE) {    ClientServices.getInstance().getClientNode().changeState(ClientState.INLINING);    ConstantInliner inliner=new ConstantInliner();    inliner.inline(testSuite);  }  if (Properties.MINIMIZE) {    ClientServices.getInstance().getClientNode().changeState(ClientState.MINIMIZATION);    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      LoggingUtils.getEvoLogger().info("* Skipping minimization because not enough time is left");      ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Size,testSuite.size());      ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Size,testSuite.size());      ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Length,testSuite.totalLengthOfTestCases());      ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Length,testSuite.totalLengthOfTestCases());    } else     if (Properties.isRegression()) {      RegressionSuiteMinimizer minimizer=new RegressionSuiteMinimizer();      minimizer.minimize(testSuite);    } else {      double before=testSuite.getFitness();      TestSuiteMinimizer minimizer=new TestSuiteMinimizer(getFitnessFactories());      LoggingUtils.getEvoLogger().info("* Minimizing test suite");      minimizer.minimize(testSuite,true);      double after=testSuite.getFitness();      if (after > before + 0.01d) {        throw new Error("EvoSuite bug: minimization lead fitness from " + before + " to "+ after);      }    }  } else {    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      LoggingUtils.getEvoLogger().info("* Skipping minimization because not enough time is left");    }    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Size,testSuite.size());    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Size,testSuite.size());    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Length,testSuite.totalLengthOfTestCases());    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Length,testSuite.totalLengthOfTestCases());  }  if (Properties.COVERAGE) {    ClientServices.getInstance().getClientNode().changeState(ClientState.COVERAGE_ANALYSIS);    CoverageCriteriaAnalyzer.analyzeCoverage(testSuite);  }  double coverage=testSuite.getCoverage();  if (ArrayUtil.contains(Properties.CRITERION,Criterion.MUTATION) || ArrayUtil.contains(Properties.CRITERION,Criterion.STRONGMUTATION)) {  }  StatisticsSender.executedAndThenSendIndividualToMaster(testSuite);  LoggingUtils.getEvoLogger().info("* Generated " + testSuite.size() + " tests with total length "+ testSuite.totalLengthOfTestCases());  if (!Properties.ANALYSIS_CRITERIA.isEmpty()) {    CoverageCriteriaAnalyzer.analyzeCriteria(testSuite,Properties.ANALYSIS_CRITERIA);  }  if (Properties.CRITERION.length > 1)   LoggingUtils.getEvoLogger().info("* Resulting test suite's coverage: " + NumberFormat.getPercentInstance().format(coverage) + " (average coverage for all fitness functions)"); else   LoggingUtils.getEvoLogger().info("* Resulting test suite's coverage: " + NumberFormat.getPercentInstance().format(coverage));  if (ArrayUtil.contains(Properties.CRITERION,Criterion.DEFUSE) && Properties.ANALYSIS_CRITERIA.isEmpty())   DefUseCoverageSuiteFitness.printCoverage();  DSEStats.getInstance().trackConstraintTypes();  DSEStats.getInstance().trackSolverStatistics();  if (Properties.DSE_PROBABILITY > 0.0 && Properties.LOCAL_SEARCH_RATE > 0 && Properties.LOCAL_SEARCH_PROBABILITY > 0.0) {    DSEStats.getInstance().logStatistics();  }  if (Properties.FILTER_SANDBOX_TESTS) {    for (    TestChromosome test : testSuite.getTestChromosomes()) {      ExecutionResult result=test.getLastExecutionResult();      if (result == null) {        result=TestCaseExecutor.runTest(test.getTestCase());      }      if (result.hasSecurityException()) {        int position=result.getFirstPositionOfThrownException();        if (position > 0) {          test.getTestCase().chop(position);          result=TestCaseExecutor.runTest(test.getTestCase());          test.setLastExecutionResult(result);        }      }    }  }  if (Properties.ASSERTIONS && !Properties.isRegression()) {    LoggingUtils.getEvoLogger().info("* Generating assertions");    ClientServices.getInstance().getClientNode().changeState(ClientState.ASSERTION_GENERATION);    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      LoggingUtils.getEvoLogger().info("* Skipping assertion generation because not enough time is left");    } else {      addAssertions(testSuite);    }    StatisticsSender.sendIndividualToMaster(testSuite);  }  if (Properties.CHECK_CONTRACTS) {    for (    TestCase failing_test : FailingTestSet.getFailingTests()) {      testSuite.addTest(failing_test);    }    FailingTestSet.sendStatistics();  }  if (Properties.JUNIT_TESTS && Properties.JUNIT_CHECK) {    compileAndCheckTests(testSuite);  }  if (Properties.SERIALIZE_REGRESSION_TEST_SUITE) {    RegressionTestSuiteSerialization.performRegressionAnalysis(testSuite);  }}  }
class C{  public void updateImageAccessMode(RPCopyRequestParams copyToEnableImageAccessMode) throws RecoverPointException {  if (copyToEnableImageAccessMode != null) {    RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();    if (RPCopyRequestParams.ImageAccessMode.DIRECT_ACCESS.name().equalsIgnoreCase(copyToEnableImageAccessMode.getImageAccessMode())) {      imageManager.enableCGCopyDirectAcess(functionalAPI,copyToEnableImageAccessMode);    } else {      logger.error(String.format("Attempting to update image access mode to an unsupported access mode: ",copyToEnableImageAccessMode.getImageAccessMode()));    }  } else {    logger.error("Attempting to update image access mode with null request parameters.");  }}  }
class C{  public Composer leftHitCallback(@NonNull AnimCallBack animCallBack){  mLeftHitCallback=animCallBack;  return this;}  }
class C{  public boolean sameValue(Object value1,Object value2){  return ((BigDecimal)value1).compareTo((BigDecimal)value2) == 0;}  }
class C{  public Set<String> deadlockedThreads(){  final long[] threadIds=threads.findDeadlockedThreads();  if (threadIds != null) {    final Set<String> threads=new HashSet<String>();    for (    ThreadInfo info : this.threads.getThreadInfo(threadIds,MAX_STACK_TRACE_DEPTH)) {      final StringBuilder stackTrace=new StringBuilder();      for (      StackTraceElement element : info.getStackTrace()) {        stackTrace.append("\t at ").append(element.toString()).append('\n');      }      threads.add(String.format("%s locked on %s (owned by %s):\n%s",info.getThreadName(),info.getLockName(),info.getLockOwnerName(),stackTrace.toString()));    }    return Collections.unmodifiableSet(threads);  }  return Collections.emptySet();}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public static ByteList Attributes(ByteList bytes,ObjectList<ByteList> attributes){  for (  ByteList list : attributes) {    bytes.addAll(list);  }  return bytes;}  }
class C{  public void close() throws IOException {  guard.close();synchronized (this) {    if (channel != null && channel.isOpen()) {      channel.close();      channel=null;    }    IoUtils.close(fd);  }}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,int scale) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,scale);}  }
class C{  public void receiveResultqueryArrays(com.emc.storageos.vasa.VasaServiceStub.QueryArraysResponse result){}  }
class C{  static String formatWWN(String rawWWN){  if (rawWWN != null) {    if (rawWWN.toUpperCase().startsWith(VPlexApiConstants.REGISTERED_INITIATOR_PREFIX)) {      rawWWN=rawWWN.substring(VPlexApiConstants.REGISTERED_INITIATOR_PREFIX.length());    }    return rawWWN.substring(2).toUpperCase();  }  return rawWWN;}  }
class C{  public Address select(final EvolutionState state,Address[] knownPeers){  for (int i=0; i < knownPeers.length; i++) {    if (knownPeers[i].name.equals(name))     return knownPeers[(i + 1) % knownPeers.length];  }  return null;}  }
class C{  public static double max(final double a,final double b){  if (Double.isNaN(a)) {    return b;  } else   if (Double.isNaN(b)) {    return a;  } else {    return Math.max(a,b);  }}  }
class C{  public void registerCustomRenderer(RenderValidationMessageInterface renderer){  if (renderer == null) {    throw new InvalidParameterException("Error setting custom messageRenderer, renderer may not be null");  }  validationMessageRenderer=renderer;}  }
class C{  public TcpHostCandidate(TransportAddress transportAddress,Component parentComponent){  super(transportAddress,parentComponent);}  }
class C{  public SColor(int r,int g,int b){  this((short)r,(short)g,(short)b);}  }
class C{  public void e(Object str){  if (debug) {    if (logLevel <= Log.ERROR) {      String name=getFunctionName();      if (name != null) {        Log.e(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.e(tag,str.toString());      }    }  }}  }
class C{  public ListTransferable(List list){  if (list == null) {    throw new NullPointerException("List of list must " + "not be null.");  }  this.list=list;}  }
class C{  @Nullable IgniteUuid unregister(UUID nodeId){  assert nodeId != null;synchronized (mux) {    nodeList.remove(nodeId);    return nodeLdrMap.remove(nodeId);  }}  }
class C{  private final void cleanupAfterQuitting(){  if (mSm.mSmThread != null) {    getLooper().quit();    mSm.mSmThread=null;  }  mSm.mSmHandler=null;  mSm=null;  mMsg=null;  mLogRecords.cleanup();  mStateStack=null;  mTempStateStack=null;  mStateInfo.clear();  mInitialState=null;  mDestState=null;  mDeferredMessages.clear();  mHasQuit=true;}  }
class C{  protected SecretKey engineGenerateKey(){  if (this.random == null) {    this.random=SunJCE.getRandom();  }  byte[] keyBytes=new byte[this.keysize];  this.random.nextBytes(keyBytes);  return new SecretKeySpec(keyBytes,"Blowfish");}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){  player.setItemInUse(stack,this.getMaxItemUseDuration(stack));  return stack;}  }
class C{  private final void cancelCancellable(){  if (timeoutMessageCancellable != null && !timeoutMessageCancellable.isCancelled()) {    timeoutMessageCancellable.cancel();  }  if (pollMessageCancellable != null && !pollMessageCancellable.isCancelled()) {    pollMessageCancellable.cancel();  }}  }
class C{  public int binarySearchFromTo(Object key,int from,int to,java.util.Comparator comparator){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to,comparator);}  }
class C{  public void endObject(O object){}  }
class C{  public boolean isSwipeable(){  return mSwipeable;}  }
class C{  public static void paintXPButtonBackground(NormalColor nomalColor,Graphics g,JComponent c){  AbstractButton b=(AbstractButton)c;  boolean toolbar=(b.getParent() instanceof JToolBar);  if (b.isContentAreaFilled()) {    ButtonModel model=b.getModel();    if (toolbar) {    } else {    }    Dimension d=c.getSize();    int dx=0;    int dy=0;    int dw=d.width;    int dh=d.height;    Border border=c.getBorder();    Insets insets;    if (border != null) {      insets=BEButtonUI.getOpaqueInsets(border,c);    } else {      insets=c.getInsets();    }    if (insets != null) {      dx+=insets.left;      dy+=insets.top;      dw-=(insets.left + insets.right);      dh-=(insets.top + insets.bottom);    }    if (toolbar) {      if (model.isRollover() || model.isPressed()) {        if (c instanceof JToggleButton)         __Icon9Factory__.getInstance().getToggleButtonIcon_RoverGreen().draw((Graphics2D)g,dx,dy,dw,dh); else         __Icon9Factory__.getInstance().getButtonIcon_PressedOrange().draw((Graphics2D)g,dx,dy,dw,dh);      } else       if (model.isSelected()) {        __Icon9Factory__.getInstance().getToggleButtonIcon_CheckedGreen().draw((Graphics2D)g,dx,dy,dw,dh);      } else {      }    } else {      try {        if (model.isArmed() && model.isPressed() || model.isSelected())         __Icon9Factory__.getInstance().getButtonIcon_PressedOrange().draw((Graphics2D)g,dx,dy,dw,dh); else         if (!model.isEnabled())         __Icon9Factory__.getInstance().getButtonIcon_DisableGray().draw((Graphics2D)g,dx,dy,dw,dh); else         if (model.isRollover())         __Icon9Factory__.getInstance().getButtonIcon_rover().draw((Graphics2D)g,dx,dy,dw,dh); else {          if (nomalColor == NormalColor.green) {            __Icon9Factory__.getInstance().getButtonIcon_NormalGreen().draw((Graphics2D)g,dx,dy,dw,dh);          } else           if (nomalColor == NormalColor.red) {            __Icon9Factory__.getInstance().getButtonIcon_NormalRed().draw((Graphics2D)g,dx,dy,dw,dh);          } else           if (nomalColor == NormalColor.blue) {            __Icon9Factory__.getInstance().getButtonIcon_NormalBlue().draw((Graphics2D)g,dx,dy,dw,dh);          } else           if (nomalColor == NormalColor.lightBlue) {            __Icon9Factory__.getInstance().getButtonIcon_NormalLightBlue().draw((Graphics2D)g,dx,dy,dw,dh);          } else           __Icon9Factory__.getInstance().getButtonIcon_NormalGray().draw((Graphics2D)g,dx,dy,dw,dh);        }      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,int radius){  final int windowSize=radius * 2 + 1;  final int radiusPlusOne=radius + 1;  int sumAlpha;  int sumRed;  int sumGreen;  int sumBlue;  int srcIndex=0;  int dstIndex;  int pixel;  int[] sumLookupTable=new int[256 * windowSize];  for (int i=0; i < sumLookupTable.length; i++) {    sumLookupTable[i]=i / windowSize;  }  int[] indexLookupTable=new int[radiusPlusOne];  if (radius < width) {    for (int i=0; i < indexLookupTable.length; i++) {      indexLookupTable[i]=i;    }  } else {    for (int i=0; i < width; i++) {      indexLookupTable[i]=i;    }    for (int i=width; i < indexLookupTable.length; i++) {      indexLookupTable[i]=width - 1;    }  }  for (int y=0; y < height; y++) {    sumAlpha=sumRed=sumGreen=sumBlue=0;    dstIndex=y;    pixel=srcPixels[srcIndex];    sumAlpha+=radiusPlusOne * ((pixel >> 24) & 0xFF);    sumRed+=radiusPlusOne * ((pixel >> 16) & 0xFF);    sumGreen+=radiusPlusOne * ((pixel >> 8) & 0xFF);    sumBlue+=radiusPlusOne * (pixel & 0xFF);    for (int i=1; i <= radius; i++) {      pixel=srcPixels[srcIndex + indexLookupTable[i]];      sumAlpha+=(pixel >> 24) & 0xFF;      sumRed+=(pixel >> 16) & 0xFF;      sumGreen+=(pixel >> 8) & 0xFF;      sumBlue+=pixel & 0xFF;    }    for (int x=0; x < width; x++) {      dstPixels[dstIndex]=sumLookupTable[sumAlpha] << 24 | sumLookupTable[sumRed] << 16 | sumLookupTable[sumGreen] << 8 | sumLookupTable[sumBlue];      dstIndex+=height;      int nextPixelIndex=x + radiusPlusOne;      if (nextPixelIndex >= width) {        nextPixelIndex=width - 1;      }      int previousPixelIndex=x - radius;      if (previousPixelIndex < 0) {        previousPixelIndex=0;      }      int nextPixel=srcPixels[srcIndex + nextPixelIndex];      int previousPixel=srcPixels[srcIndex + previousPixelIndex];      sumAlpha+=(nextPixel >> 24) & 0xFF;      sumAlpha-=(previousPixel >> 24) & 0xFF;      sumRed+=(nextPixel >> 16) & 0xFF;      sumRed-=(previousPixel >> 16) & 0xFF;      sumGreen+=(nextPixel >> 8) & 0xFF;      sumGreen-=(previousPixel >> 8) & 0xFF;      sumBlue+=nextPixel & 0xFF;      sumBlue-=previousPixel & 0xFF;    }    srcIndex+=width;  }}  }
class C{  public static void reflectField(EditText editText){  try {    Field mCursorDrawableRes=editText.getClass().getSuperclass().getDeclaredField("mCursorDrawableRes");    mCursorDrawableRes.setAccessible(true);    mCursorDrawableRes.setInt(editText,0);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  private String validateProductDirectory(String productDir){  if (isEmpty(productDir)) {    return null;  }  return productDir;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:36.396 -0500",hash_original_method="64FE4BCFF37135E4351D114236B1F8ED",hash_generated_method="CB29F07E326DE7D9AB69928B4AA4A699") public static boolean containsAllUuids(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  return (((uuidA[0].getTaintInt() + uuidB[0].getTaintInt())) == 1);}  }
class C{  public final static double SC_TO_DEG(int sc){  return ((double)(sc) / (60.0 * 60.0 * 1000.0));}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Role(String role){  super(role);}  }
class C{  protected void resetupConnection(){}  }
class C{  public void testCompareToPosPos2(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  private static Bitmap drawableToBitmap(Drawable d){  return d == null ? null : ((BitmapDrawable)d).getBitmap();}  }
class C{  public boolean isMandatory(boolean checkContext){  if (checkContext && m_vo.MandatoryLogic.length() > 0) {    boolean retValue=Evaluator.evaluateLogic(this,m_vo.MandatoryLogic);    log.finest(m_vo.ColumnName + " Mandatory(" + m_vo.MandatoryLogic+ ") => Mandatory-"+ retValue);    if (retValue)     return true;  }  if (!m_vo.IsMandatory || isVirtualColumn())   return false;  if (m_gridTab != null && ((m_vo.IsKey && m_vo.ColumnName.endsWith("_ID")) || m_vo.ColumnName.startsWith("Created") || m_vo.ColumnName.startsWith("Updated")|| m_vo.ColumnName.equals("Value")|| m_vo.ColumnName.equals("DocumentNo")|| m_vo.ColumnName.equals("M_AttributeSetInstance_ID")))   return false;  return isDisplayed(checkContext);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("conn.options.title"));  this.add(getPanelProxyChain(),getPanelProxyChain().getName());}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  double gridResolution=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFieldsString=args[0];  String outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputFieldsString.length() < 2) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  gridResolution=Double.parseDouble((args[3]));  try {    String[] inputs=inputFieldsString.split(";");    String inputFile=inputs[0];    String fieldName=inputs[1];    ShapeFile shapefile=new ShapeFile(inputFile);    if (shapefile.getShapeType().getBaseType() != ShapeType.POINT) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable table=shapefile.getAttributeTable();    String[] fieldNames=table.getAttributeTableFieldNames();    int fieldNumber=0;    for (int a=0; a < fieldNames.length; a++) {      if (fieldNames[a].equals(fieldName)) {        fieldNumber=a;        break;      }    }    DBFField field=table.getField(fieldNumber);    if (field.getDataType() != DBFDataType.FLOAT && field.getDataType() != DBFDataType.NUMERIC) {      showFeedback("The selected attribute field must be of a numerical type.");      return;    }    double north=shapefile.getyMax();    double south=shapefile.getyMin();    double east=shapefile.getxMax();    double west=shapefile.getxMin();    rows=(int)(Math.abs(north - south) / gridResolution);    cols=(int)(Math.abs(east - west) / gridResolution);    double noData=-32768.0;    output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,0,noData);    ArrayList<Double> xList=new ArrayList<>();    ArrayList<Double> yList=new ArrayList<>();    ArrayList<Double> zList=new ArrayList<>();    double[][] geometry;    for (    ShapeFileRecord record : shapefile.records) {      geometry=getXYFromShapefileRecord(record);      Object[] attData=table.getRecord(record.getRecordNumber() - 1);      value=(double)attData[fieldNumber];      for (int i=0; i < geometry.length; i++) {        xList.add(geometry[i][0]);        yList.add(geometry[i][1]);        zList.add(value);      }    }    int numPoints=xList.size();    double[] x=new double[numPoints];    double[] y=new double[numPoints];    double[] z=new double[numPoints];    for (int a=0; a < numPoints; a++) {      x[a]=(double)xList.get(a);      y[a]=(double)yList.get(a);      z[a]=(double)zList.get(a);    }    String inputHeaderShort=shapefile.getShortName();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static S2CellId fromFaceIJ(int face,int i,int j){  long n[]={0,face << (POS_BITS - 33)};  int bits=(face & SWAP_MASK);  for (int k=7; k >= 0; --k) {    bits=getBits(n,i,j,k,bits);  }  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);  return s;}  }
class C{  public static void appendGameToFile(Game game){  if (Variant.isBughouse(game.getVariant())) {    return;  }  if (game.getMoveList().getSize() == 0) {    return;  }  String pgnFilePath=Raptor.getInstance().getPreferences().getString(PreferenceKeys.APP_PGN_FILE);  if (StringUtils.isNotEmpty(pgnFilePath)) {synchronized (PGN_APPEND_SYNCH) {      if (game instanceof GameCursor) {        game=((GameCursor)game).getMasterGame();      }      String whiteRating=game.getHeader(PgnHeader.WhiteElo);      String blackRating=game.getHeader(PgnHeader.BlackElo);      whiteRating=StringUtils.remove(whiteRating,'E');      whiteRating=StringUtils.remove(whiteRating,'P');      blackRating=StringUtils.remove(blackRating,'E');      blackRating=StringUtils.remove(blackRating,'P');      if (!NumberUtils.isDigits(whiteRating)) {        game.removeHeader(PgnHeader.WhiteElo);      }      if (!NumberUtils.isDigits(blackRating)) {        game.removeHeader(PgnHeader.BlackElo);      }      String pgn=game.toPgn();      File file=new File(pgnFilePath);      FileWriter fileWriter=null;      try {        fileWriter=new FileWriter(file,true);        fileWriter.append(pgn).append("\n\n");        fileWriter.flush();      } catch (      IOException ioe) {        LOG.error("Error saving game",ioe);      } finally {        try {          if (fileWriter != null) {            fileWriter.close();          }        } catch (        IOException ioe) {        }      }    }  }}  }
class C{  int headerSize(){  if (!isValidHeader()) {    return 0;  }  return FitsUtil.addPadding(getNumberOfPhysicalCards() * HeaderCard.FITS_HEADER_CARD_SIZE);}  }
class C{  public boolean hasMatchingWithCapacity(ItemStack stack){  if (stack == null)   return true;  if (!isEmpty()) {    if (!hasMatching(stack))     return false;  }  return getAvailableCapacity() >= stack.stackSize;}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(1,-1);    transform.translate(0,-h);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public int compareTo(Object obj){  TimeStampedObservation tso2=(TimeStampedObservation)obj;  if (observation < tso2.observation) {    return -1;  } else   if (observation > tso2.observation) {    return 1;  }  return 0;}  }
class C{  public static byte[] strToIPv6(String ipv6AddrStr){  if (ipv6AddrStr.length() < 2)   return null;  int colonIndex;  char currentChar;  boolean sawtDigit;  int currentTkn;  char[] addrBuff=ipv6AddrStr.toCharArray();  byte[] dst=new byte[IN6_ADDR_SIZE];  int srcb_length=addrBuff.length;  int scopeID=ipv6AddrStr.indexOf("%");  if (scopeID == srcb_length - 1)   return null;  if (scopeID != -1)   srcb_length=scopeID;  colonIndex=-1;  int i=0, j=0;  if (addrBuff[i] == ':')   if (addrBuff[++i] != ':')   return null;  int curtok=i;  sawtDigit=false;  currentTkn=0;  while (i < srcb_length) {    currentChar=addrBuff[i++];    int chval=Character.digit(currentChar,16);    if (chval != -1) {      currentTkn<<=4;      currentTkn|=chval;      if (currentTkn > 0xffff)       return null;      sawtDigit=true;      continue;    }    if (currentChar == ':') {      curtok=i;      if (!sawtDigit) {        if (colonIndex != -1)         return null;        colonIndex=j;        continue;      } else       if (i == srcb_length) {        return null;      }      if (j + IN6_ADDR_TOKEN_SIZE > IN6_ADDR_SIZE)       return null;      dst[j++]=(byte)((currentTkn >> 8) & 0xff);      dst[j++]=(byte)(currentTkn & 0xff);      sawtDigit=false;      currentTkn=0;      continue;    }    if (currentChar == '.' && ((j + IN4_ADDR_SIZE) <= IN6_ADDR_SIZE)) {      String ia4=ipv6AddrStr.substring(curtok,srcb_length);      int dot_count=0, index=0;      while ((index=ia4.indexOf('.',index)) != -1) {        dot_count++;        index++;      }      if (dot_count != 3)       return null;      byte[] v4addr=strToIPv4(ia4);      if (v4addr == null)       return null;      for (int k=0; k < IN4_ADDR_SIZE; k++) {        dst[j++]=v4addr[k];      }      sawtDigit=false;      break;    }    return null;  }  if (sawtDigit) {    if (j + IN6_ADDR_TOKEN_SIZE > IN6_ADDR_SIZE)     return null;    dst[j++]=(byte)((currentTkn >> 8) & 0xff);    dst[j++]=(byte)(currentTkn & 0xff);  }  if (colonIndex != -1) {    int n=j - colonIndex;    if (j == IN6_ADDR_SIZE)     return null;    for (i=1; i <= n; i++) {      dst[IN6_ADDR_SIZE - i]=dst[colonIndex + n - i];      dst[colonIndex + n - i]=0;    }    j=IN6_ADDR_SIZE;  }  if (j != IN6_ADDR_SIZE)   return null;  byte[] newdst=mappedIPv4ToRealIPv4(dst);  if (newdst != null) {    return newdst;  } else {    return dst;  }}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  if (StringUtils.isNotEmpty(stderr)) {    logger.error("Checkin failed with the following stdout: " + stdout);    final String[] output=getLines(stdout);    for (int i=0; i < output.length; i++) {      if (isOutputLineExpected(output[i],new String[]{CHECKIN_LINE_PREFIX,CHECKIN_FAILED_MSG},true)) {        throw new RuntimeException(output[i]);      }    }    logger.error("Parsing of the stdout failed to get the error message");    throw new TeamServicesException(TeamServicesException.KEY_ERROR_UNKNOWN);  }  String changesetNumber=StringUtils.EMPTY;  final Matcher matcher=CHANGESET_NUMBER_PATTERN.matcher(stdout);  if (matcher.find()) {    changesetNumber=matcher.group(1);  }  logger.info("Changeset " + changesetNumber + " was created");  return changesetNumber;}  }
class C{  public void saveWindowStates(){  windowStateManager.saveWindowStates();  client.settings.putList("popoutAttributes",channels.getPopoutAttributes());}  }
class C{  protected void copyToOpsw(){  setSpeedFromDisplay(3,slow1);  opsw[6]=rev1.isSelected();  setSpeedFromDisplay(11,slow2);  opsw[14]=rev2.isSelected();  setSpeedFromDisplay(19,slow3);  opsw[22]=rev3.isSelected();  setSpeedFromDisplay(27,slow4);  opsw[30]=rev4.isSelected();  int index=current.getSelectedIndex();  opsw[2]=((index & 0x04) != 0) ? true : false;  opsw[1]=((index & 0x02) != 0) ? true : false;  opsw[9]=((index & 0x01) != 0) ? false : true;}  }
class C{  public RecyclerMultiAdapter recyclerAdapter(){  RecyclerMultiAdapter response=new RecyclerMultiAdapter(mapper,elements,builder);  response.setViewEventListener(listener);  return response;}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.953 -0500",hash_original_method="328C209D553235E9687156E0E720555C",hash_generated_method="49CD5A6A2D8FBFD4D95552F94CB6DE0A") private boolean processRefresh(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs){  CatLog.d(this,"process Refresh");switch (cmdDet.commandQualifier) {case REFRESH_NAA_INIT_AND_FULL_FILE_CHANGE:case REFRESH_NAA_INIT_AND_FILE_CHANGE:case REFRESH_NAA_INIT:case REFRESH_UICC_RESET:    mCmdParams=new DisplayTextParams(cmdDet,null);  break;}return false;}  }
class C{  public static boolean arrangeBySourceGraph(Graph resultGraph,Graph sourceGraph){  if (resultGraph == null) {    throw new IllegalArgumentException("Graph must not be null.");  }  if (sourceGraph == null) {    GraphUtils.circleLayout(resultGraph,200,200,150);    return true;  }  boolean arrangedAll=true;  for (  Object o : resultGraph.getNodes()) {    Node node=(Node)o;    String name=node.getName();    Node sourceNode=sourceGraph.getNode(name);    if (sourceNode == null) {      arrangedAll=false;      continue;    }    node.setCenterX(sourceNode.getCenterX());    node.setCenterY(sourceNode.getCenterY());  }  return arrangedAll;}  }
class C{  public boolean isLinearMotion(){  return linearMotion;}  }
class C{  private void consumeNonExecutePrefix() throws IOException {  nextNonWhitespace(true);  pos--;  if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {    return;  }  for (int i=0; i < NON_EXECUTE_PREFIX.length; i++) {    if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {      return;    }  }  pos+=NON_EXECUTE_PREFIX.length;}  }
class C{  public static double[] delete(double[] x,int... J){  double[] array=new double[x.length - J.length];  int j2=0;  for (int j=0; j < x.length; j++) {    if (!into(j,J)) {      array[j2]=x[j];      j2++;    }  }  return array;}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  private String env(Session ses,String name,String dflt) throws JSchException {  try {    return exec(ses,"echo " + name);  } catch (  IOException ignored) {    return dflt;  }}  }
class C{  public double convexityBias(final double futurePrice,final double t,final double T,final double sigma,final double a){  QL.require(futurePrice >= 0.0,"negative futures price not allowed");  QL.require(t >= 0.0,"negative t not allowed");  QL.require(T >= t,"T must not be less than t");  QL.require(a >= 0.0,"negative a not allowed");  final double deltaT=(T - t);  final double tempDeltaT=(1. - Math.exp(-a * deltaT)) / a;  final double halfSigmaSquare=sigma * sigma / 2.0;  final double lambda=halfSigmaSquare * (1. - Math.exp(-2.0 * a * t)) / a * tempDeltaT * tempDeltaT;  final double tempT=(1.0 - Math.exp(-a * t)) / a;  final double phi=halfSigmaSquare * tempDeltaT * tempT* tempT;  final double z=lambda + phi;  final double futureRate=(100.0 - futurePrice) / 100.0;  return (1.0 - Math.exp(-z)) * (futureRate + 1.0 / (T - t));}  }
class C{  @RequestMapping(value={"/{id}"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@PathVariable("id") Integer processTemplateId,Principal principal){  RestWrapper restWrapper=null;  try {    PropertiesTemplate propertiesTemplate=new PropertiesTemplate();    propertiesTemplate.setProcessTemplateId(processTemplateId);    List<PropertiesTemplate> propertiesTemplateList=propertiesTemplateDAO.listPropertiesTemplateBean(processTemplateId);    restWrapper=new RestWrapper(propertiesTemplateList,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplateId + " selected from PropertiesTemplate by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public StatisticsDisabledException(String msg){  super(msg);}  }
class C{  public boolean isError(){  return this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  public void testUsernameHandler() throws Exception {  testUsername();  try {    Callback[] callbacks=new Callback[]{new NameCallback("test")};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new NameCallback("test"),new PasswordCallback("test",false)};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new TextInputCallback("test")};    factory.handle(callbacks);    fail();  } catch (  UnsupportedCallbackException expected) {  }}  }
class C{  private Query makeWithin(Rectangle bbox){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  BooleanClause.Occur MUST=BooleanClause.Occur.MUST;  if (bbox.getCrossesDateLine()) {    bq.add(rangeQuery(fieldNameX,null,bbox.getMaxX()),BooleanClause.Occur.SHOULD);    bq.add(rangeQuery(fieldNameX,bbox.getMinX(),null),BooleanClause.Occur.SHOULD);    bq.setMinimumNumberShouldMatch(1);  } else {    bq.add(rangeQuery(fieldNameX,bbox.getMinX(),bbox.getMaxX()),MUST);  }  bq.add(rangeQuery(fieldNameY,bbox.getMinY(),bbox.getMaxY()),MUST);  return bq.build();}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  private void addSourceHtmlToExport(Entry source,StringBuilder result) throws IOException {  final String url=source.getSourceUrl();  result.append("<div class=\"source\">\n");  result.append("<div class=\"sourceTitle\">");  String title=source.getSourceTitle();  if (title == null || title.isEmpty()) {    title=servletText.fragmentBlankTitle();  }  result.append(StringEscapeUtils.escapeHtml4(title));  result.append("</div>\n");  if (url != null && !url.isEmpty()) {    result.append("<a target=\"_blank\" href=\"");    result.append(StringEscapeUtils.escapeHtml4(url));    result.append("\">");    result.append(StringEscapeUtils.escapeHtml4(url));    result.append("</a>\n");  }  result.append("</div>\n");}  }
class C{  public Builder(TweetUi tweetUi){  if (tweetUi == null) {    throw new IllegalArgumentException("TweetUi instance must not be null");  }  this.tweetUi=tweetUi;}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (initializedCropWindow == false)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public void includedChangesChanged(){}  }
class C{  public void enforceSecurity(boolean enforce){  SecurityManager sm=System.getSecurityManager();  if (sm != null && sm != lastSecurityManagerInstalled) {    throw new SecurityException(Messages.getString(EXCEPTION_ALIEN_SECURITY_MANAGER));  }  if (enforce) {    System.setSecurityManager(null);    installSecurityManager();  } else {    if (sm != null) {      System.setSecurityManager(null);      lastSecurityManagerInstalled=null;    }  }}  }
class C{  public ReplacementErrorHandler(Object replacement){  _replacement=replacement;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Builder addDefaultValue(CharSequence defaultValue){  this.defaultValues.add(defaultValue);  return this;}  }
class C{  public void addParameter(Expression e){  if (m_group == null)   m_group=e; else   throw new IllegalStateException("This function takes only 1 parameter.");}  }
class C{  protected AutumnActionPriority(){}  }
class C{  private String buildOptionalCommandLine(){  StringBuilder commandLineBuf=new StringBuilder();  if (this.serverProps != null) {    for (Iterator<Object> iter=this.serverProps.keySet().iterator(); iter.hasNext(); ) {      String key=(String)iter.next();      String value=this.serverProps.getProperty(key);      if (!isNonCommandLineArgument(key)) {        if (value != null && value.length() > 0) {          commandLineBuf.append(" \"");          commandLineBuf.append("--");          commandLineBuf.append(key);          commandLineBuf.append("=");          commandLineBuf.append(value);          commandLineBuf.append("\"");        } else {          commandLineBuf.append(" --");          commandLineBuf.append(key);        }      }    }  }  return commandLineBuf.toString();}  }
class C{  public BooleanMemberValue(int index,ConstPool cp){  super('Z',cp);  this.valueIndex=index;}  }
class C{  public Neighborhood(){  super(KEY);}  }
class C{  @Override public void addEndpoint(final Endpoint endpoint){  endpoint.setMessageDeliverer(deliverer);  endpoint.setExecutor(executor);  endpoints.add(endpoint);}  }
class C{  public StopWordTokenizer(Tokenizer base,String... stopWords){  this(base,Arrays.asList(stopWords));}  }
class C{  private void registerPrefix(final String prefixSingular,final String prefixPlural){  singularPrefixes.add(prefixSingular);  pluralPrefixes.add(prefixPlural);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static double deepInstanceOf(@DottedClassName String x,@DottedClassName String y) throws ClassNotFoundException {  return deepInstanceOf(AnalysisContext.currentAnalysisContext().lookupClass(x),AnalysisContext.currentAnalysisContext().lookupClass(y));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CSaveProgress(final boolean progress){  m_progress=progress;}  }
class C{  protected Cells(final int rows,final int cols,final T addr){  this.rows=rows;  this.cols=cols;  this.addr=addr;  this.size=rows * cols;  this.$=new double[size];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private DomainSuffixes(){  String file="domain-suffixes.xml";  InputStream input=this.getClass().getClassLoader().getResourceAsStream(file);  try {    new DomainSuffixesReader().read(this,input);  } catch (  Exception ex) {    LOG.warn(StringUtils.stringifyException(ex));  }}  }
class C{  public static void check(boolean cond){  if (!cond)   error();}  }
class C{  public void store(Element root){  store(root,Xml.TYPES,Xml.TYPE,Xml.ENGINE_TYPES);}  }
class C{  private void updateFilter(){  boolean usePorterDuffFilter=false;  int key=-1;  if (mDesaturation > 0) {    key=(mDesaturation << 16) | mBrightness;  } else   if (mBrightness > 0) {    key=(1 << 16) | mBrightness;    usePorterDuffFilter=true;  }  if (key == mPrevUpdateKey) {    return;  }  mPrevUpdateKey=key;  if (key != -1) {    ColorFilter filter=sCachedFilter.get(key);    if (filter == null) {      float brightnessF=getBrightness();      int brightnessI=(int)(255 * brightnessF);      if (usePorterDuffFilter) {        filter=new PorterDuffColorFilter(Color.argb(brightnessI,255,255,255),PorterDuff.Mode.SRC_ATOP);      } else {        float saturationF=1f - getDesaturation();        sTempFilterMatrix.setSaturation(saturationF);        if (mBrightness > 0) {          float scale=1f - brightnessF;          float[] mat=sTempBrightnessMatrix.getArray();          mat[0]=scale;          mat[6]=scale;          mat[12]=scale;          mat[4]=brightnessI;          mat[9]=brightnessI;          mat[14]=brightnessI;          sTempFilterMatrix.preConcat(sTempBrightnessMatrix);        }        filter=new ColorMatrixColorFilter(sTempFilterMatrix);      }      sCachedFilter.append(key,filter);    }    mPaint.setColorFilter(filter);  } else {    mPaint.setColorFilter(null);  }  invalidateSelf();}  }
class C{  public BytesRef(byte[] bytes,int offset,int length){  this.bytes=bytes;  this.offset=offset;  this.length=length;  assert isValid();}  }
class C{  public void start(){synchronized (stateLock) {    if (state != State.NEW)     throw new RuntimeException("MultiBotManager has already been started. State: " + state);    state=State.STARTING;  }  for (  PircBotX bot : startQueue)   startBot(bot);  startQueue.clear();synchronized (stateLock) {    state=State.RUNNING;  }}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  public final String toString(){  StringBuffer builder=new StringBuffer(property);  builder.append('=');  builder.append(String.valueOf(value));  return builder.toString();}  }
class C{  public boolean isGradient(){  return gradient;}  }
class C{  public static int compareCanonicalDoubles(String double1,String double2){  return compareCanonicalFPNumbers(double1,double2);}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public Matrix4x3d scale(double xyz){  return scale(xyz,xyz,xyz);}  }
class C{  public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public SendToBackAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateEnabledState();}  }
class C{  static ByteBuffer lengthValueEncode(Message m){  byte[] value=m.toByteArray();  ByteBuffer encoded=ByteBuffer.allocate(Integer.SIZE / Byte.SIZE + value.length);  encoded.order(ByteOrder.BIG_ENDIAN);  encoded.putInt(value.length);  encoded.put(value);  return encoded;}  }
class C{  public BuddhistCalendar(Locale aLocale){  super(aLocale);}  }
class C{  public CommonStatsFlags clear(){  flags=EnumSet.noneOf(Flag.class);  types=null;  groups=null;  fieldDataFields=null;  completionDataFields=null;  return this;}  }
class C{  private int compareTimeOfDates(final Date d1,final Date d2){  final LocalTime lt1=LocalDateTime.ofInstant(d1.toInstant(),ZONEID_UTC).toLocalTime();  final LocalTime lt2=LocalDateTime.ofInstant(d2.toInstant(),ZONEID_UTC).toLocalTime();  return lt1.compareTo(lt2);}  }
class C{  public long enqueueStartTimeMs(){  return _enqueueStartTimeMs;}  }
class C{  public final Iterator<String> typesIterator(){  return mDataTypes != null ? mDataTypes.iterator() : null;}  }
class C{  public boolean isFreshForProxy(){  if (Switchboard.getSwitchboard().getConfigBool("proxyAlwaysFresh",false))   return true;  if (url().isPOST()) {    return false;  }  if (MultiProtocolURL.isCGI(MultiProtocolURL.getFileExtension(url().getFileName()))) {    return false;  }  String cacheControl;  if (this.requestHeader != null) {    if (this.requestHeader.containsKey(RequestHeader.AUTHORIZATION)) {      return false;    }    if (this.requestHeader.containsKey(HeaderFramework.RANGE)) {      return false;    }    cacheControl=this.requestHeader.get(HeaderFramework.PRAGMA);    if (cacheControl != null && cacheControl.trim().toUpperCase().contains("NO-CACHE")) {      return false;    }    cacheControl=this.requestHeader.get(HeaderFramework.CACHE_CONTROL);    if (cacheControl != null) {      cacheControl=cacheControl.trim().toUpperCase();      if (cacheControl.contains("NO-CACHE") || cacheControl.startsWith("MAX-AGE=0")) {        return false;      }    }    if (this.requestHeader.containsKey(RequestHeader.IF_MODIFIED_SINCE)) {      if (!this.responseHeader.containsKey(HeaderFramework.LAST_MODIFIED)) {        return false;      }      Date d1, d2;      d2=this.responseHeader.lastModified();      if (d2 == null) {        d2=new Date();      }      d1=this.requestHeader.ifModifiedSince();      if (d1 == null) {        d1=new Date();      }      if (d2.after(d1)) {        return false;      }    }    final String mimeType=getMimeType();    if (!Classification.isPictureMime(mimeType)) {      if (this.requestHeader.containsKey(RequestHeader.COOKIE) || this.responseHeader.containsKey(HeaderFramework.SET_COOKIE) || this.responseHeader.containsKey(HeaderFramework.SET_COOKIE2)) {        return false;      }    }  }  if (this.responseHeader != null) {    cacheControl=this.responseHeader.get(HeaderFramework.PRAGMA);    if (cacheControl != null && cacheControl.trim().toUpperCase().contains("NO-CACHE")) {      return false;    }    final Date expires=this.responseHeader.expires();    final Date now=new Date();    if (expires != null) {      if (expires.before(now)) {        return false;      }    }    final Date lastModified=this.responseHeader.lastModified();    cacheControl=this.responseHeader.get(HeaderFramework.CACHE_CONTROL);    if (cacheControl == null && lastModified == null && expires == null) {      return false;    }    Date date=this.responseHeader.date();    if (lastModified != null) {      if (date == null) {        date=now;      }      final long age=date.getTime() - lastModified.getTime();      if (age < 0) {        return false;      }      if (now.getTime() - date.getTime() > age / 10) {        return false;      }    }    if (cacheControl != null) {      cacheControl=cacheControl.trim().toUpperCase();      if (cacheControl.contains("PRIVATE") || cacheControl.contains("NO-CACHE") || cacheControl.contains("NO-STORE")) {        return false;      } else       if (cacheControl.startsWith("MAX-AGE=")) {        if (date == null) {          return false;        }        try {          final long ttl=1000 * NumberTools.parseLongDecSubstring(cacheControl,8);          if (now.getTime() - date.getTime() > ttl) {            return false;          }        } catch (        final Exception e) {          return false;        }      }    }  }  return true;}  }
class C{  public Stoppable scheduleRepeating(final Steppable event,final int ordering,final double interval){synchronized (lock) {    return scheduleRepeating(time + interval,ordering,event,interval);  }}  }
class C{  @Override protected void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredMethods,double fitness){  if (coveredMethods > maxCoveredMethods) {    logger.info("(Methods No-Exc) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    maxCoveredMethods=coveredMethods;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEndElem(name);}  }
class C{  public IndexRequest version(long version){  this.version=version;  return this;}  }
class C{  public long snapshotIndex(){  return snapshotIndex;}  }
class C{  public int appendData(ExtractorInput input,int length,boolean allowEndOfInput) throws IOException, InterruptedException {  length=prepareForAppend(length);  int bytesAppended=input.read(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),length);  if (bytesAppended == C.RESULT_END_OF_INPUT) {    if (allowEndOfInput) {      return C.RESULT_END_OF_INPUT;    }    throw new EOFException();  }  lastAllocationOffset+=bytesAppended;  totalBytesWritten+=bytesAppended;  return bytesAppended;}  }
class C{  public static <T1,T2>void forEachInBoth(List<T1> list1,List<T2> list2,Procedure2<? super T1,? super T2> procedure){  if (list1 != null && list2 != null) {    int size1=list1.size();    int size2=list2.size();    if (size1 == size2) {      for (int i=0; i < size1; i++) {        procedure.value(list1.get(i),list2.get(i));      }    } else {      throw new IllegalArgumentException("Attempt to call forEachInBoth with two Lists of different sizes :" + size1 + ':'+ size2);    }  }}  }
class C{  public static void warn(int WindowNo,Container c,String AD_Message){  warn(WindowNo,c,AD_Message,null);}  }
class C{  private TagType createTagTypeFromEntity(TagTypeEntity tagTypeEntity){  TagType tagType=new TagType();  TagTypeKey tagTypeKey=new TagTypeKey();  tagType.setTagTypeKey(tagTypeKey);  tagTypeKey.setTagTypeCode(tagTypeEntity.getCode());  tagType.setDisplayName(tagTypeEntity.getDisplayName());  tagType.setTagTypeOrder(tagTypeEntity.getOrderNumber());  return tagType;}  }
class C{  public static double[] calculateStdErrorOfCoef(Instances data,Attribute chosen,double slope,double intercept,int df) throws Exception {  double ssr=calculateSSR(data,chosen,slope,intercept);  double mse=ssr / df;  double[][] array=new double[data.numInstances()][2];  for (int i=0; i < data.numInstances(); i++) {    array[i][0]=data.instance(i).value(chosen);    array[i][1]=1.0;  }  Matrix X=new Matrix(array);  Matrix Xt=X.transpose();  Matrix XtX=Xt.times(X);  Matrix inverse=XtX.inverse();  Matrix cov=inverse.times(mse);  double[] result=new double[2];  for (int i=0; i < 2; i++) {    result[i]=Math.sqrt(cov.get(i,i));  }  return result;}  }
class C{  @Override public void onResponse(GankData response){  mGetContentText.setText(response.toString());}  }
class C{  public ConfigureProjectSdkMarkerResolution(String sdkTypeName,String projectPropertyPageID){  this.sdkTypeName=sdkTypeName;  this.projectPropertyPageID=projectPropertyPageID;}  }
class C{  public DirectedEulerianPath(Digraph G){  int deficit=0;  int s=nonIsolatedVertex(G);  for (int v=0; v < G.V(); v++) {    if (G.outdegree(v) > G.indegree(v)) {      deficit+=(G.outdegree(v) - G.indegree(v));      s=v;    }  }  if (deficit > 1)   return;  if (s == -1)   s=0;  Iterator<Integer>[] adj=(Iterator<Integer>[])new Iterator[G.V()];  for (int v=0; v < G.V(); v++)   adj[v]=G.adj(v).iterator();  Stack<Integer> stack=new Stack<Integer>();  stack.push(s);  path=new Stack<Integer>();  while (!stack.isEmpty()) {    int v=stack.pop();    while (adj[v].hasNext()) {      stack.push(v);      v=adj[v].next();    }    path.push(v);  }  if (path.size() != G.E() + 1)   path=null;  assert check(G);}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.logbook).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  private static void initService(NfcAdapter adapter){  final INfcAdapterExtras service=adapter.getNfcAdapterExtrasInterface();  if (service != null) {    sService=service;  }}  }
class C{  public static boolean canHarm(Entity entity,DamageSource source,float damage){  if (canDamage(entity)) {    if (isMachine(entity)) {      if (source.isFireDamage()) {        return false;      } else       if (source.isMagicDamage()) {        return false;      }    }    return source != null && damage > 0;  }  return false;}  }
class C{  public static long round(double val){  return (long)Math.floor(val + 0.5d);}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public boolean isWhitespaceVisible(){  return whitespaceVisible;}  }
class C{  private void addTypeImports(SearchResultGroup typeReferences) throws CoreException {  SearchMatch[] searchResults=typeReferences.getSearchResults();  for (int i=0; i < searchResults.length; i++) {    SearchMatch result=searchResults[i];    IJavaElement enclosingElement=SearchUtils.getEnclosingJavaElement(result);    if (!(enclosingElement instanceof IImportDeclaration)) {      String reference=getNormalizedTypeReference(result);      if (!reference.startsWith(fPackage.getElementName())) {        reference=cutOffInnerTypes(reference);        ImportChange importChange=fImportsManager.getImportChange(typeReferences.getCompilationUnit());        importChange.addImport(fPackage.getElementName() + '.' + reference);      }    }  }}  }
class C{  public List<Object[]> readAllSubkeyed(Connection connection,Object[] keys){  StringBuilder builder=new StringBuilder();  builder.append("select ");  String delimiter="";  for (  String keyField : keyFieldNames) {    builder.append(delimiter);    builder.append(keyField);    delimiter=",";  }  for (  String valueField : valueFieldNames) {    builder.append(delimiter);    builder.append(valueField);    delimiter=",";  }  builder.append(" from ");  builder.append(tableName);  builder.append(" where ");  delimiter="";  for (int i=0; i < keys.length; i++) {    builder.append(delimiter);    builder.append(keyFieldNames[i]);    builder.append("=?");    delimiter=" and ";  }  String query=builder.toString();  PreparedStatement statement=null;  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Executing query '" + query + "' for keys '"+ print(keys)+ "'");    }    statement=connection.prepareStatement(query);    for (int i=0; i < keys.length; i++) {      statement.setObject(i + 1,keys[i]);    }    ResultSet rs=statement.executeQuery();    if (!rs.next()) {      return Collections.EMPTY_LIST;    }    List<Object[]> result=new ArrayList<Object[]>();    do {      Object[] row=new Object[keyFieldNames.length + valueFieldNames.length];      int index=0;      for (int i=0; i < keyFieldNames.length; i++) {        row[index]=DBUtil.getValue(rs,index + 1,keyTypes[i]);        index++;      }      for (int i=0; i < valueFieldNames.length; i++) {        row[index]=DBUtil.getValue(rs,index + 1,valueTypes[i]);        index++;      }      result.add(row);    } while (rs.next());    return result;  } catch (  SQLException ex) {    String message="Failed to invoke : " + query + " :"+ ex.getMessage();    log.error(message,ex);    storeExceptionHandler.handle(message,ex);    throw new StoreExceptionDBRel(message,ex);  } finally {    try {      if (statement != null)       statement.close();    } catch (    SQLException e) {    }  }}  }
class C{  DeletePrevCharAction(){  super(deletePrevCharAction);}  }
class C{  public static Type instance(){  return theInstance;}  }
class C{  public void testComponentIntegerConverter(){  IntegerConverter intConverter=new IntegerConverter(new Integer(0));  intConverter.setPattern("#,###");  intConverter.setLocale(Locale.US);  ArrayConverter arrayConverter=new ArrayConverter(int[].class,intConverter,0);  arrayConverter.setAllowedChars(new char[]{',','-'});  arrayConverter.setDelimiter(';');  int[] intArray=new int[]{1111,2222,3333,4444};  String stringA="1,111; 2,222; 3,333; 4,444";  String stringB=intArray[0] + ";" + intArray[1]+ ";"+ intArray[2]+ ";"+ intArray[3];  String[] strArray=new String[]{"" + intArray[0],"" + intArray[1],"" + intArray[2],"" + intArray[3]};  long[] longArray=new long[]{intArray[0],intArray[1],intArray[2],intArray[3]};  Long[] LONGArray=new Long[]{new Long(intArray[0]),new Long(intArray[1]),new Long(intArray[2]),new Long(intArray[3])};  Integer[] IntegerArray=new Integer[]{new Integer(intArray[0]),new Integer(intArray[1]),new Integer(intArray[2]),new Integer(intArray[3])};  ArrayList strList=new ArrayList();  ArrayList longList=new ArrayList();  for (int i=0; i < strArray.length; i++) {    strList.add(strArray[i]);    longList.add(LONGArray[i]);  }  String msg=null;  try {    msg="String --> int[]";    checkArray(msg,intArray,arrayConverter.convert(int[].class,stringA));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="String --> Integer[] (with braces)";    checkArray(msg,IntegerArray,arrayConverter.convert(Integer[].class,"{" + stringA + "}"));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="String[] --> int[]";    checkArray(msg,intArray,arrayConverter.convert(int[].class,strArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="String[] --> Integer[]";    checkArray(msg,IntegerArray,arrayConverter.convert(Integer[].class,strArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="long[] --> int[]";    checkArray(msg,intArray,arrayConverter.convert(int[].class,longArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="Long --> int[]";    checkArray(msg,new int[]{LONGArray[0].intValue()},arrayConverter.convert(int[].class,LONGArray[0]));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="LONG[] --> int[]";    checkArray(msg,intArray,arrayConverter.convert(int[].class,LONGArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="Long --> String";    assertEquals(msg,LONGArray[0] + "",arrayConverter.convert(String.class,LONGArray[0]));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="LONG[] --> String (first)";    assertEquals(msg,LONGArray[0] + "",arrayConverter.convert(String.class,LONGArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="LONG[] --> String (all)";    arrayConverter.setOnlyFirstToString(false);    assertEquals(msg,stringB,arrayConverter.convert(String.class,LONGArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="Collection of Long --> String";    assertEquals(msg,stringB,arrayConverter.convert(String.class,longList));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="long[] --> String[]";    checkArray(msg,strArray,arrayConverter.convert(String[].class,LONGArray));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="Collection of String --> Integer[]";    checkArray(msg,IntegerArray,arrayConverter.convert(Integer[].class,strList));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="Collection of Long --> int[]";    checkArray(msg,intArray,arrayConverter.convert(int[].class,longList));  } catch (  Exception e) {    fail(msg + " failed " + e);  }}  }
class C{  public static boolean isImage(File file){  Uri selectedUri=Uri.fromFile(file);  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);  return (mimeType != null && mimeType.startsWith("image/"));}  }
class C{  public boolean isStateActive(State state){switch (state) {case r_A:    return stateVector[0].ordinal() >= State.r_A.ordinal() && stateVector[0].ordinal() <= State.r_A_r_B.ordinal();case r_A_r_B:  return stateVector[0] == State.r_A_r_B;case r2_B:return stateVector[1].ordinal() >= State.r2_B.ordinal() && stateVector[1].ordinal() <= State.r2_B_r_BB.ordinal();case r2_B_r_BA:return stateVector[1].ordinal() >= State.r2_B_r_BA.ordinal() && stateVector[1].ordinal() <= State.r2_B_r_BA_r_BAA.ordinal();case r2_B_r_BA_r_BAA:return stateVector[1] == State.r2_B_r_BA_r_BAA;case r2_B_r_BB:return stateVector[1] == State.r2_B_r_BB;case r2_C:return stateVector[1] == State.r2_C;case r3_D:return stateVector[2].ordinal() >= State.r3_D.ordinal() && stateVector[2].ordinal() <= State.r3_D_r_DA_r_DAA.ordinal();case r3_D_r_DA:return stateVector[2].ordinal() >= State.r3_D_r_DA.ordinal() && stateVector[2].ordinal() <= State.r3_D_r_DA_r_DAA.ordinal();case r3_D_r_DA_r_DAA:return stateVector[2] == State.r3_D_r_DA_r_DAA;default :return false;}}  }
class C{  final void remove(LocalRegion region,DiskEntry entry,boolean async,boolean isClear) throws RegionClearedException {  DiskRegion dr=region.getDiskRegion();  if (!async) {    acquireReadLock(dr);  }  try {    if (dr.isRegionClosed()) {      throw new RegionDestroyedException(LocalizedStrings.DiskRegion_THE_DISKREGION_HAS_BEEN_CLOSED_OR_DESTROYED.toLocalizedString(),dr.getName());    }    if (!dr.didClearCountChange()) {      long start=this.stats.startRemove();      OplogSet oplogSet=getOplogSet(dr);      oplogSet.remove(region,entry,async,isClear);      dr.getStats().endRemove(start,this.stats.endRemove(start));    } else {      throw new RegionClearedException(LocalizedStrings.DiskRegion_CLEAR_OPERATION_ABORTING_THE_ONGOING_ENTRY_DESTRUCTION_OPERATION_FOR_ENTRY_WITH_DISKID_0.toLocalizedString(entry.getDiskId()));    }  }  finally {    if (!async) {      releaseReadLock(dr);    }  }}  }
class C{  public static Wildcard createWildcardSuper(TypeRef lowerBound){  final Wildcard wc=createWildcard();  wc.setDeclaredLowerBound(lowerBound);  return wc;}  }
class C{  private String c(String str){  return str + count;}  }
class C{  @Override public boolean equals(final Object o){  if (o == this) {    return true;  }  if (o != null && o instanceof GroupedRow) {    final GroupedRow other=(GroupedRow)o;    return new EqualsBuilder().append(group,other.group).append(key,other.key).append(value,other.value).isEquals();  }  return false;}  }
class C{  protected void handleHREF(Image image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  imageElement.setAttributeNS(XLINK_NAMESPACE_URI,XLINK_HREF_QNAME,image.toString());}  }
class C{  protected static RegexNFAStrandResult recursiveBuildStartStates(RowRegexExprNode parent,Map<String,ExprNode> variableDefinitions,Map<String,Pair<Integer,Boolean>> variableStreams,boolean[] exprRequiresMultimatchState){  Stack<Integer> nodeNumStack=new Stack<Integer>();  RegexNFAStrand strand=recursiveBuildStatesInternal(parent,variableDefinitions,variableStreams,nodeNumStack,exprRequiresMultimatchState);  RegexNFAStateEnd end=new RegexNFAStateEnd();  for (  RegexNFAStateBase endStates : strand.getEndStates()) {    endStates.addState(end);  }  int nodeNumberFlat=0;  for (  RegexNFAStateBase theBase : strand.getAllStates()) {    theBase.setNodeNumFlat(nodeNumberFlat++);  }  return new RegexNFAStrandResult(new ArrayList<RegexNFAState>(strand.getStartStates()),strand.getAllStates());}  }
class C{  public void test_DELETE_accessPath_delete_c1() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long mutationResult=doDeleteWithAccessPath(null,null,null,new URIImpl("http://www.bigdata.com/c1"));  assertEquals(2,mutationResult);}  }
class C{  protected String toPrettyString(Object obj){  deep++;  if (obj == null) {    deep--;    return nullValue;  }  if (deep == maxDeep) {    deep--;    return obj.toString();  }  StringBuilder s=new StringBuilder();  Class c=obj.getClass();  if (c.isArray()) {    int arrayLen=Array.getLength(obj);    int len=Math.min(arrayLen,maxItemsToShow);    s.append('[');    for (int i=0; i < len; i++) {      s.append(toPrettyString(Array.get(obj,i)));      if (i != len - 1) {        s.append(',');      }    }    if (len < arrayLen) {      s.append(moreValue);    }    s.append(']');  } else   if (obj instanceof Collection) {    Collection coll=(Collection)obj;    int len=Math.min(coll.size(),maxItemsToShow);    Iterator it=coll.iterator();    int i=0;    s.append('(');    while ((it.hasNext() && (i < maxItemsToShow))) {      s.append(toPrettyString(it.next()));      if (i != len - 1) {        s.append(',');      }      i++;    }    if (i < coll.size()) {      s.append(moreValue);    }    s.append(')');  } else   if (obj instanceof Map) {    Map map=(Map)obj;    int len=Math.min(map.size(),maxItemsToShow);    Iterator it=map.keySet().iterator();    int i=0;    s.append('{');    while ((it.hasNext() && (i < maxItemsToShow))) {      Object key=it.next();      s.append(key).append(':');      s.append(toPrettyString(map.get(key)));      if (i != len - 1) {        s.append(',');      }      i++;    }    if (i < map.size()) {      s.append(moreValue);    }    s.append('}');  } else {    s.append(obj.toString());  }  deep--;  return s.toString();}  }
class C{  public boolean containsKey(String key){  return value.containsKey(key);}  }
class C{  public void sortInstances(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().sortInstances();}  }
class C{  protected void defineAxisHorizontalPosition(){  if (labelsPositioning == LabelPosition.OUTSIDE) {    float aux;    float maxLabelLength=0;    for (    String label : labels)     if ((aux=chartView.style.labelPaint.measureText(label)) > maxLabelLength)     maxLabelLength=aux;    axisHorPosition=chartView.chartLeft + maxLabelLength + distLabelToAxis;  } else   axisHorPosition=chartView.chartLeft;}  }
class C{  @NotNull private String formMergeMessage(@NotNull MergeResult mergeResult){  if (mergeResult.getMergeStatus().equals(ALREADY_UP_TO_DATE)) {    return mergeResult.getMergeStatus().getValue();  }  StringBuilder conflictMessage=new StringBuilder();  List<String> conflicts=mergeResult.getConflicts();  if (conflicts != null && conflicts.size() > 0) {    for (    String conflict : conflicts) {      conflictMessage.append("- ").append(conflict);    }  }  StringBuilder commitsMessage=new StringBuilder();  List<String> commits=mergeResult.getMergedCommits();  if (commits != null && commits.size() > 0) {    for (    String commit : commits) {      commitsMessage.append("- ").append(commit);    }  }  String message="<b>" + mergeResult.getMergeStatus().getValue() + "</b>";  String conflictText=conflictMessage.toString();  message+=(!conflictText.isEmpty()) ? constant.mergedConflicts(conflictText) : "";  String commitText=commitsMessage.toString();  message+=(!commitText.isEmpty()) ? " " + constant.mergedCommits(commitText) : "";  message+=(mergeResult.getNewHead() != null) ? " " + constant.mergedNewHead(mergeResult.getNewHead()) : "";  return message;}  }
class C{  public void testPrepStmtExecuteLargeUpdateExplicitGeneratedKeys() throws Exception {  createTable("testExecuteLargeUpdate","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.pstmt=this.conn.prepareStatement("INSERT INTO testExecuteLargeUpdate (n) VALUES (?), (?), (?), (?), (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setInt(1,1);  this.pstmt.setInt(2,2);  this.pstmt.setInt(3,3);  this.pstmt.setInt(4,4);  this.pstmt.setInt(5,5);  long count=this.pstmt.executeLargeUpdate();  assertEquals(5,count);  assertEquals(5,this.pstmt.getLargeUpdateCount());  this.rs=this.pstmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  long generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(5,generatedKey);  this.rs.close();}  }
class C{  @Override public synchronized void insertRow() throws SQLException {  checkClosed();  if (!this.onInsertRow) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.7"),getExceptionInterceptor());  }  this.inserter.executeUpdate();  long autoIncrementId=this.inserter.getLastInsertID();  int numFields=this.fields.length;  byte[][] newRow=new byte[numFields][];  for (int i=0; i < numFields; i++) {    if (this.inserter.isNull(i)) {      newRow[i]=null;    } else {      newRow[i]=this.inserter.getBytesRepresentation(i);    }    if (this.fields[i].isAutoIncrement() && autoIncrementId > 0) {      newRow[i]=StringUtils.getBytes(String.valueOf(autoIncrementId));      this.inserter.setBytesNoEscapeNoQuotes(i + 1,newRow[i]);    }  }  ResultSetRow resultSetRow=new ByteArrayRow(newRow,getExceptionInterceptor());  refreshRow(this.inserter,resultSetRow);  this.rowData.addRow(resultSetRow);  resetInserter();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.751 -0500",hash_original_method="A4C37C4D0CE3F53721DEA2441C8D1CE8",hash_generated_method="51BD2B03D0021F2CF31A90897EA75645") public Reader retrieveArticle(int articleNumber) throws IOException {  return retrieveArticle(articleNumber,null);}  }
class C{  public KXml2DomDriver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.547 -0500",hash_original_method="CB5459F72CC236BB18EA772A3D0183C5",hash_generated_method="6B68E47CC3AEC199022B116C7B53404D") public static final void writeListXml(List val,OutputStream out) throws XmlPullParserException, java.io.IOException {  XmlSerializer serializer=Xml.newSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeListXml(val,null,serializer);  serializer.endDocument();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres;  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  double minAdjustment=10;  byte initializationMode=0;  long numCellsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  numClasses=Integer.parseInt(args[2]);  maxIterations=Integer.parseInt(args[3]);  percentChangedThreshold=Double.parseDouble(args[4]);  if (args[5].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,0);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentres[a][i]=imageMetaData[i][1] + generator.nextDouble() * range;        }      }    } else {      double range, spacing;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentres[a][i]=imageMetaData[i][1] + spacing * a;        }      }    }    j=0;    whichClass=0;    do {      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numCellsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noData) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numCellsChanged++;            }            output.setValue(row,col,whichClass);            numPixelsInEachClass[whichClass]++;            for (i=0; i < numImages; i++) {              classCentreData[whichClass][i]+=data[i][col];            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numCellsChanged / totalNumCells * 100;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        if (data[0][col] != noData) {          whichClass=(int)(output.getValue(row,col));          dist=0;          for (i=0; i < numImages; i++) {            dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);          }          totalDeviations[whichClass]+=dist;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public FlowExpressionContext copyChangeToParsingMemberOfReceiver(Receiver receiver){  return new FlowExpressionContext(receiver,outerReceiver,arguments,checkerContext,true,useLocalScope);}  }
class C{  public void addStructuredPostalAddress(StructuredPostalAddress structuredPostalAddress){  getStructuredPostalAddresses().add(structuredPostalAddress);}  }
class C{  public cudaPointerAttributes(){}  }
class C{  protected void processSpecialTag(boolean allowCDATA) throws Exception {  String str=XMLUtil.read(this.reader,'&');  char ch=str.charAt(0);  if (ch == '&') {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }switch (ch) {case '[':    if (allowCDATA) {      this.processCDATA();    } else {      XMLUtil.errorUnexpectedCDATA(reader.getSystemID(),reader.getLineNr());    }  return;case 'D':this.processDocType();return;case '-':XMLUtil.skipComment(this.reader);return;}}  }
class C{  public boolean isMandatoryPL(){  Object oo=get_Value(COLUMNNAME_IsMandatoryPL);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String retrieveElementCdata(final XMLEventReader reader,final boolean mandatory,final String xPath) throws XMLStreamException {  final String elementCData=reader.getElementText();  if (mandatory && elementCData == null || elementCData.trim().length() == 0) {    throw new IllegalStateException("Found an " + xPath + " element with no content.");  }  return elementCData;}  }
class C{  public void testEquilibriumDistribution(){  alpha.setParameterValue(0,0.1);  switchingRate.setParameterValue(0,1.0);  model.setupMatrix();  double[] pi=model.getFrequencyModel().getFrequencies();  try {    Matrix m=new Matrix(model.getQ());    Vector p=new Vector(pi);    Vector y=m.product(p);    assertEquals(0.0,y.norm(),1e-14);  } catch (  IllegalDimension illegalDimension) {  }}  }
class C{  public static boolean isSymbolInPackage(@NotNull final PyQualifiedNameOwner symbol,@NotNull final String expectedPackage,@NotNull final String expectedName){  final String qualifiedNameString=symbol.getQualifiedName();  if (qualifiedNameString == null) {    return false;  }  final QualifiedName qualifiedName=QualifiedName.fromDottedString(qualifiedNameString);  final String aPackage=qualifiedName.getFirstComponent();  if (!(expectedPackage.equals(aPackage))) {    return false;  }  final String symboldName=qualifiedName.getLastComponent();  return expectedName.equals(symboldName);}  }
class C{  public static boolean compare(String a,String b){  return compare(a,b,false);}  }
class C{  public synchronized void remove(Statement s){  Operation o=(operations.isEmpty()) ? null : operations.get(operations.size() - 1);  if ((o == null) || !(o instanceof AddRemoveOperation)) {    o=new AddRemoveOperation();    operations.add(o);  }  AddRemoveOperation aro=(AddRemoveOperation)o;  aro.remove(new ContextAwareStatementImpl(s));}  }
class C{  private static void queryItemTypes(String locale) throws IOException, ServiceException {  URL url=urlFactory.getItemTypesFeedURL(locale);  GoogleBaseQuery query=new GoogleBaseQuery(url);  System.out.println("Sending request to: " + query.getUrl());  try {    GoogleBaseFeed feed=service.query(query);    printItemTypeFeed(feed);  } catch (  ServiceException e) {    printServiceException(e);  }}  }
class C{  public static String abbreviate(String s,int maxWidth){  return abbreviate(s,0,maxWidth);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  public byte readByte() throws IOException {  if (head == tail) {    head=0;    tail=input.read(buffer,head,bufSize);    if (tail == -1) {      throw new IOException("No more data is available");    }  }  return buffer[head++];}  }
class C{  public V put(K key,V value){  K k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  for (Entry<K,V> e=table[i]; e != null; e=e.next) {    if (e.hash == hash && eq(k,e.key)) {      V oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(hash,k,value,i);  return null;}  }
class C{  public void add(final Number xValue,final List<? extends Number> item){  add(0,xValue,item);}  }
class C{  public void inc(KeyType[] container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public LastOwnerException(){}  }
class C{  public static String logTimeOfDay(long millis){  Calendar c=Calendar.getInstance();  if (millis >= 0) {    c.setTimeInMillis(millis);    return String.format("%tm-%td %tH:%tM:%tS.%tL",c,c,c,c,c,c);  } else {    return Long.toString(millis);  }}  }
class C{  public void shrink(int desiredLength){  if (desiredLength < numObjs)   desiredLength=numObjs;  if (desiredLength >= objs.length)   return;  Object[] newobjs=new Object[desiredLength];  System.arraycopy(objs,0,newobjs,0,numObjs);  objs=newobjs;}  }
class C{  public void drawString(String str,int x,int y){  drawString(str,(float)x,(float)y);}  }
class C{  private Hashing(){  throw new Error("No instances");}  }
class C{  public static boolean registerHardHammer(ItemStack aTool){  return registerTool(aTool,sHardHammerList);}  }
class C{  public boolean close(){  return m_addressSpace.close();}  }
class C{  protected List createOverflowCommandList(Vector commands){  List l=new List(commands);  l.setUIID("CommandList");  Component c=(Component)l.getRenderer();  c.setUIID("Command");  c=l.getRenderer().getListFocusComponent(l);  c.setUIID("CommandFocus");  l.setFixedSelection(List.FIXED_NONE_CYCLIC);  ((DefaultListCellRenderer)l.getRenderer()).setShowNumbers(false);  return l;}  }
class C{  public static <RECIPE extends MachineRecipe<ItemStackInput,?,RECIPE>>boolean isInRecipe(ItemStack itemstack,Map<ItemStackInput,RECIPE> recipes){  if (itemstack != null) {    for (    RECIPE recipe : recipes.values()) {      ItemStackInput required=recipe.getInput();      if (required.useItemStackFromInventory(new ItemStack[]{itemstack},0,false)) {        return true;      }    }  }  return false;}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpInputStream rtpStream,RtpStreamListener rtpStreamListener) throws NetworkException {  try {    inputStream=new VideoCaptureStream(format,player);    inputStream.open();    if (logger.isActivated()) {      logger.debug("Input stream: " + inputStream.getClass().getName());    }    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    if (logger.isActivated()) {      logger.debug("Output stream: " + outputStream.getClass().getName());    }    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);    if (logger.isActivated()) {      logger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append("!").toString(),e);  }}  }
class C{  protected Type(String name){  super(name);}  }
class C{  private <T extends VCardProperty>Map<String,List<T>> orderPropertiesByGroup(List<T> properties){  Map<String,List<T>> groupedProperties=new HashMap<>();  for (  T property : properties) {    String group=property.getGroup();    if (isEmpty(group)) {      continue;    }    List<T> groupPropertiesList=groupedProperties.get(group);    if (groupPropertiesList == null) {      groupPropertiesList=new ArrayList<T>();      groupedProperties.put(group,groupPropertiesList);    }    groupPropertiesList.add(property);  }  return groupedProperties;}  }
class C{  public PhotoDataImpl(ExtensionPoint extensionPoint){  super(extensionPoint);  pointData=new PointDataImpl(extensionPoint);  boundingBoxData=new BoxDataImpl(extensionPoint);  mediaData=new MediaDataImpl(extensionPoint);}  }
class C{  @Override public void sendMessage(ArrayList<Attribute> contents) throws IOException {}  }
class C{  protected String computeTreeSelected(){  String selected=this.isSelected() ? SELECTED : NOT_SELECTED;  for (  TreeNode child : this.getChildren()) {    String childSelected=child.isTreeSelected();    if (!selected.equals(childSelected)) {      selected=PARTIALLY_SELECTED;      break;    }  }  return selected;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String role=getString(stack);  Show s=getShow(stack);  return (s == null) ? Pooler.EMPTY_STRING_ARRAY : s.getPeopleList(Show.getRoleForString(role));}  }
class C{  public void add(ExpressionInput condition) throws ScopeException {  IDomain source=condition.getExpression().getSourceDomain();  Object adapter=source.getAdapter(Space.class);  if (adapter != null && adapter instanceof Space) {    Space space=(Space)adapter;    DomainSelection sel=getDomainSelection(space.getRoot());    if (sel != null) {      sel.add(condition);    }  } else {    adapter=source.getAdapter(Domain.class);    if (adapter != null && adapter instanceof Domain) {      Domain domain=(Domain)adapter;      DomainSelection sel=getDomainSelection(domain);      if (sel != null) {        sel.add(condition);      }    }  }}  }
class C{  public void layoutContainer(Container parent){  Rectangle b=parent.getBounds();  Insets i=getInsets();  int contentY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (layeredPane != null) {    layeredPane.setBounds(i.left,i.top,w,h);  }  if (glassPane != null) {    glassPane.setBounds(i.left,i.top,w,h);  }  if (menuBar != null && menuBar.isVisible()) {    Dimension mbd=menuBar.getPreferredSize();    menuBar.setBounds(0,0,w,mbd.height);    contentY+=mbd.height;  }  if (contentPane != null) {    contentPane.setBounds(0,contentY,w,h - contentY);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.AUTO_TRANSITION___AUTO_TRANSITION_BLOCK_1:    return ((InternalEList<?>)getAutoTransitionBlock_1()).basicRemove(otherEnd,msgs);case UmplePackage.AUTO_TRANSITION___ACTIVITY_1:  return ((InternalEList<?>)getActivity_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void add(@NonNull final AbstractItem item){  ensureNotNull(item,"The item may not be null");  items.add(item);  if (item instanceof Item && ((Item)item).getIcon() != null) {    iconCount++;  } else   if (item instanceof Divider) {    dividerCount++;  }  rawItems=null;  notifyOnDataSetChanged();}  }
class C{  public void runDownload(SpjFile file){  this.spjFile=file;  initController();  try {    notify(res.getString("EngineEraseFlash"));    controller.sendLocoNetMessage(getEraseMessage());    protectedWait(1000);    notify(res.getString("EngineEraseWait"));    protectedWait(20000);    notify(res.getString("EngineSendInit"));    controller.sendLocoNetMessage(getInitMessage());    protectedWait(250);    sendSDF();    sendAllWAV();    controller.sendLocoNetMessage(getExitMessage());    notify(res.getString("EngineDone"));  } catch (  DelayException e) {    notify(res.getString("EngineAbortDelay"));  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe scaling factor for the output range.\n" + "\t(default: 1.0)","S",1,"-S <num>"));  result.addElement(new Option("\tThe translation of the output range.\n" + "\t(default: 0.0)","T",1,"-T <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static String relativePath(final File root,FilePath path){  return relativePath(root,path.getIOFile());}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  private static String jsonValue(float value){  return String.valueOf(value);}  }
class C{  public final void rotY(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin((double)angle);  cosAngle=(float)Math.cos((double)angle);  this.m00=cosAngle;  this.m01=(float)0.0;  this.m02=sinAngle;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=(float)1.0;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=-sinAngle;  this.m21=(float)0.0;  this.m22=cosAngle;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  public static void addFile(File f) throws IOException {  addURL(f.toURI().toURL());}  }
class C{  public void testIRExamples() throws IOException {  checkOneTerm(a,"penyalahgunaan","salahguna");  checkOneTerm(a,"menyalahgunakan","salahguna");  checkOneTerm(a,"disalahgunakan","salahguna");  checkOneTerm(a,"pertanggungjawaban","tanggungjawab");  checkOneTerm(a,"mempertanggungjawabkan","tanggungjawab");  checkOneTerm(a,"dipertanggungjawabkan","tanggungjawab");  checkOneTerm(a,"pelaksanaan","laksana");  checkOneTerm(a,"pelaksana","laksana");  checkOneTerm(a,"melaksanakan","laksana");  checkOneTerm(a,"dilaksanakan","laksana");  checkOneTerm(a,"melibatkan","libat");  checkOneTerm(a,"terlibat","libat");  checkOneTerm(a,"penculikan","culik");  checkOneTerm(a,"menculik","culik");  checkOneTerm(a,"diculik","culik");  checkOneTerm(a,"penculik","culik");  checkOneTerm(a,"perubahan","ubah");  checkOneTerm(a,"peledakan","ledak");  checkOneTerm(a,"penanganan","tangan");  checkOneTerm(a,"kepolisian","polisi");  checkOneTerm(a,"kenaikan","naik");  checkOneTerm(a,"bersenjata","senjata");  checkOneTerm(a,"penyelewengan","seleweng");  checkOneTerm(a,"kecelakaan","celaka");}  }
class C{  public static <T1,T2>Procedure<T1> bind(Procedure<? super T2> delegate,Function<? super T1,T2> function){  return new BindProcedure<>(delegate,function);}  }
class C{  public static void registerAllPluginOperators(){  for (  Plugin plugin : ALL_PLUGINS) {    long start=System.currentTimeMillis();    plugin.registerOperators();    recordLoadingTime(plugin.getExtensionId(),start);  }}  }
class C{  public boolean letsFibreGoIn(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,Element e,AnnotationMirror a,AnnotationValue v){  JavaFileObject oldSource=null;  JavaFileObject newSource=null;  JCDiagnostic.DiagnosticPosition pos=null;  JavacElements elemUtils=processingEnv.getElementUtils();  Pair<JCTree,JCCompilationUnit> treeTop=elemUtils.getTreeAndTopLevel(e,a,v);  if (treeTop != null) {    newSource=treeTop.snd.sourcefile;    if (newSource != null) {      oldSource=log.useSource(newSource);      pos=treeTop.fst.pos();    }  }  try {switch (kind) {case ERROR:      errorCount++;    boolean prev=log.multipleErrors;  log.multipleErrors=true;try {  log.error(pos,"proc.messager",msg.toString());}  finally {  log.multipleErrors=prev;}break;case WARNING:warningCount++;log.warning(pos,"proc.messager",msg.toString());break;case MANDATORY_WARNING:warningCount++;log.mandatoryWarning(pos,"proc.messager",msg.toString());break;default :log.note(pos,"proc.messager",msg.toString());break;}}  finally {if (newSource != null) log.useSource(oldSource);}}  }
class C{  public GridBoundedConcurrentLinkedHashMap(int max,int initCap,float loadFactor,int concurLvl){  this(max,initCap,loadFactor,concurLvl,SINGLE_Q);}  }
class C{  public int readChar() throws IOException {  if (nextChar != -1) {    int result=nextChar;    nextChar=-1;    return result;  }  if (position == count) {    fillBuffer();  }  if (count == -1) {    return END_OF_STREAM;  }  int b1=buffer[position++] & 0xff;switch (UTF8_BYTES[b1]) {default :    charError("UTF-8");case 1:  return b1;case 2:if (position == count) {  fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}return ((b1 & 0x1f) << 6) | (buffer[position++] & 0x3f);case 3:if (position == count) {fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}int b2=buffer[position++];if (position == count) {fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}int b3=buffer[position++];if ((b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80) {charError("UTF-8");}return ((b1 & 0x1f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x1f);case 4:if (position == count) {fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}b2=buffer[position++];if (position == count) {fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}b3=buffer[position++];if (position == count) {fillBuffer();}if (count == -1) {endOfStreamError("UTF-8");}int b4=buffer[position++];if ((b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80 || (b4 & 0xc0) != 0x80) {charError("UTF-8");}int c=((b1 & 0x1f) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x1f) << 6)| (b4 & 0x1f);nextChar=(c - 0x10000) % 0x400 + 0xdc00;return (c - 0x10000) / 0x400 + 0xd800;}}  }
class C{  public static void translateText(String sourceText,PrintStream out){  Translate translate=createTranslateService();  Translation translation=translate.translate(sourceText);  out.printf("Source Text:\n\t%s\n",sourceText);  out.printf("Translated Text:\n\t%s\n",translation.translatedText());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MUOMConversion[");  sb.append(get_ID()).append("-C_UOM_ID=").append(getC_UOM_ID()).append(",C_UOM_To_ID=").append(getC_UOM_To_ID()).append(",M_Product_ID=").append(getM_Product_ID()).append("-Multiply=").append(getMultiplyRate()).append("/Divide=").append(getDivideRate()).append("]");  return sb.toString();}  }
class C{  public void emitInvokevirtual(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokevirtual);  if (!alive)   return;  emit2(meth);  state.pop(argsize + 1);  state.push(mtype.getReturnType());}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (documentHandler != null) {    qAtts.setAttributes(atts);    documentHandler.startElement(qName,qAtts);  }}  }
class C{  public void readPointFile(String inputFile){  int fieldNum=0;  WhiteboxRasterBase.DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  boolean useRecID=false;  ShapeFile input=null;  try {    input=new ShapeFile(inputFile);  } catch (  IOException ex) {    System.out.println(ex.getMessage().toString());    Logger.getLogger(Kriging.class.getName()).log(Level.SEVERE,null,ex);  }  ShapeType shapeType=input.getShapeType();  if (shapeType != ShapeType.POINTZ && shapeType != ShapeType.MULTIPOINTZ) {    JOptionPane.showMessageDialog(null,"The input shapefile must be of a 'point' data type.");    return;  }  Object[] data=null;  double[][] geometry;  points=new ArrayList<>();  PointZ ptz;  MultiPointZ mptz;  double x, y, z;  double[][] point;  for (  ShapeFileRecord record : input.records) {    if (shapeType.getBaseType() == ShapeType.POINT) {      ptz=(PointZ)(record.getGeometry());      z=ptz.getZ();      x=ptz.getX();      y=ptz.getY();      points.add(new KrigingPoint(x,y,z));    } else     if (shapeType.getBaseType() == ShapeType.MULTIPOINT) {      mptz=(MultiPointZ)(record.getGeometry());      point=record.getGeometry().getPoints();      double[] zArray=mptz.getzArray();      for (int p=0; p < point.length; p++) {        x=point[p][0];        y=point[p][1];        z=zArray[p];        points.add(new KrigingPoint(x,y,z));      }    }  }}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  public StrBuilder replaceFirst(String searchStr,String replaceStr){  int searchLen=(searchStr == null ? 0 : searchStr.length());  if (searchLen > 0) {    int index=indexOf(searchStr,0);    if (index >= 0) {      int replaceLen=(replaceStr == null ? 0 : replaceStr.length());      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);    }  }  return this;}  }
class C{  public CountingInputStream(InputStream in){  super(checkNotNull(in));}  }
class C{  public boolean isMenuInvoices(){  Object oo=get_Value(COLUMNNAME_IsMenuInvoices);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void scroll(int itemsToScroll,int time){  scroller.forceFinished(true);  lastScrollY=scrollingOffset;  int offset=itemsToScroll * getItemHeight();  scroller.startScroll(0,lastScrollY,0,offset - lastScrollY,time);  setNextMessage(MESSAGE_SCROLL);  startScrolling();}  }
class C{  private boolean updateIndices(Device device,Long deviceKey){  if (!primaryIndex.updateIndex(device,deviceKey)) {    return false;  }  IEntityClass entityClass=device.getEntityClass();  ClassState classState=getClassState(entityClass);  if (classState.classIndex != null) {    if (!classState.classIndex.updateIndex(device,deviceKey))     return false;  }  return true;}  }
class C{  public byte[] receive(){  return null;}  }
class C{  public void toggleSelection(final Object element){  if (isSelected(element)) {    selectionModel.remove(element);  } else {    selectionModel.add(element);  }}  }
class C{  static private double calcLogProb(int numAppear,double mu){  final double sigma=calcSigmaFromMu(mu);  final double logNumAppear=Math.log(numAppear);  final double overMu=Math.max(logNumAppear - mu,0.0);  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);  assert (res <= 0);  return res;}  }
class C{  protected String codenvyFactoryJsonFileLocation(){  return "https://raw.githubusercontent.com/" + this.username + "/"+ this.repository+ "/"+ this.branch()+ "/.codenvy.json";}  }
class C{  public float screenX(float x,float y){  return g.screenX(x,y);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.432 -0500",hash_original_method="A8210D76C41C6A4AAFC6BE2371A42886",hash_generated_method="C4F8D83E64C44160E188661FCFE7409A") public File(File dir,String name){  this.path="";  this.name=name;  this.parentFile=dir;}  }
class C{  public void processCoverage(CoverageProvider coverageProvider,Set<String> include){  if (coverageProvider == null) {    logger.info(LOGGING_TAG,"No coverage provider available.");    return;  }  Map<String,List<Integer>> lineCoverage=coverageProvider.readLineCoverage();  if (lineCoverage == null || lineCoverage.isEmpty()) {    logger.info(LOGGING_TAG,"No line coverage available to post to Harbormaster.");    return;  }  Set<String> includeFileNames=new HashSet<String>();  for (  String file : include) {    includeFileNames.add(FilenameUtils.getBaseName(file));  }  Set<String> includedLineCoverage=new HashSet<String>();  for (  String file : lineCoverage.keySet()) {    if (includeFileNames.contains(FilenameUtils.getBaseName(file))) {      includedLineCoverage.add(file);    }  }  lineCoverage.keySet().retainAll(includedLineCoverage);  harbormasterCoverage=new CoverageConverter().convert(lineCoverage);}  }
class C{  public void clear(){  removeChildListeners();  m_clauses.clear();  fireExpressionChange();}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  void insertAttribute(NewAttribute attribute,Element owner){  final int len=xml.length;  xml=insertInto(xml,owner.start.right,' ' + attribute.asString());  shiftSegments(owner.start.left - 1,xml.length - len);}  }
class C{  public RouteSpecificPool(HttpRoute route,int maxEntries){  this.route=route;  this.maxEntries=maxEntries;  this.freeEntries=new LinkedList<BasicPoolEntry>();  this.waitingThreads=new LinkedList<WaitingThread>();  this.numEntries=0;}  }
class C{  private boolean searchComicTitleOrTranscript(String query){  Realm realm=Realm.getInstance(SearchResultsActivity.this);  query=query.trim();  resultsTitle.clear();  resultsTranscript.clear();  RealmResults<RealmComic> title=realm.where(RealmComic.class).contains("title",query,Case.INSENSITIVE).findAll();  for (  RealmComic comic : title)   resultsTitle.add(comic.getComicNumber());  RealmResults<RealmComic> trans=realm.where(RealmComic.class).contains("transcript",query,Case.INSENSITIVE).not().contains("title",query,Case.INSENSITIVE).findAll();  for (  RealmComic comic : trans)   this.resultsTranscript.add(comic.getComicNumber());  realm.close();  return (resultsTranscript.size() + resultsTitle.size() == 0);}  }
class C{  DimProduct(int id,String name){  this.id=id;  this.name=name;}  }
class C{  private CommandParser(){  commands=new HashMap<String,BaseHandler>();  commands.put("nick",new NickHandler());  commands.put("join",new JoinHandler());  commands.put("me",new MeHandler());  commands.put("names",new NamesHandler());  commands.put("echo",new EchoHandler());  commands.put("topic",new TopicHandler());  commands.put("quit",new QuitHandler());  commands.put("op",new OpHandler());  commands.put("voice",new VoiceHandler());  commands.put("deop",new DeopHandler());  commands.put("devoice",new DevoiceHandler());  commands.put("kick",new KickHandler());  commands.put("query",new QueryHandler());  commands.put("part",new PartHandler());  commands.put("close",new CloseHandler());  commands.put("notice",new NoticeHandler());  commands.put("dcc",new DCCHandler());  commands.put("mode",new ModeHandler());  commands.put("help",new HelpHandler());  commands.put("away",new AwayHandler());  commands.put("back",new BackHandler());  commands.put("whois",new WhoisHandler());  commands.put("msg",new MsgHandler());  commands.put("quote",new RawHandler());  commands.put("amsg",new AMsgHandler());  aliases=new HashMap<String,String>();  aliases.put("j","join");  aliases.put("q","query");  aliases.put("h","help");  aliases.put("raw","quote");  aliases.put("w","whois");}  }
class C{  public static void write(CharSequence from,File to,Charset charset) throws IOException {  asCharSink(to,charset).write(from);}  }
class C{  public ScaleException(){}  }
class C{  private void paintBackgroundTogetherIncrease(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createScrollButtonTogetherIncrease(0,0,width,height);  dropShadow.fill(g,s);  fillScrollBarButtonInteriorColors(g,s,isIncrease,buttonsTogether);}  }
class C{  public OpenWorkspaceAction(SimbrainDesktop desktop){  super("Open Workspace File (.zip) ...",desktop);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Open.png"));  putValue(SHORT_DESCRIPTION,"Open workspace (.zip)");  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_O,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);}  }
class C{  public static TechnicalServiceMultiSubscriptions convertToApi(org.oscm.internal.types.exception.TechnicalServiceMultiSubscriptions oldEx){  return convertExceptionToApi(oldEx,TechnicalServiceMultiSubscriptions.class);}  }
class C{  public NoClassDefFoundError(String s){  super(s);}  }
class C{  private void updateStorageProvidersforStorageSystems(DbClient dbClient,StorageSystem storageSystem,SMISProvider smisProvider,StorageProvider storageProvider){  URI storageSystemActiveProviderURI=storageSystem.getActiveProviderURI();  if (smisProvider.getId().toString().equals(storageSystemActiveProviderURI.toString())) {    storageSystem.setActiveProviderURI(storageProvider.getId());  }  StringSet providers=storageSystem.getProviders();  if (providers == null) {    storageSystem.setProviders(new StringSet());  }  storageSystem.getProviders().remove(smisProvider.getId().toString());  storageSystem.getProviders().add(storageProvider.getId().toString());  dbClient.updateAndReindexObject(storageSystem);}  }
class C{  public void addFocusListener(EventListener listener){  textbox.addEventListener(Events.ON_FOCUS,listener);  textbox.addEventListener(Events.ON_BLUR,listener);}  }
class C{  public Resin3xExistingLocalConfigurationCapability(){  this.propertySupportMap.put(ResinPropertySet.SOCKETWAIT_PORT,Boolean.TRUE);}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     p_DeleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_I_InOutLineConfirm_ID=getRecord_ID();}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"2008","2007"};  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{14230,12300,14240,15244,15900,19200,22030,21200,19500,15500,12600,14000});  values.add(new double[]{5230,7300,9240,10540,7900,9200,12030,11200,9500,10500,11600,13500});  int[] colors=new int[]{Color.BLUE,Color.CYAN};  XYMultipleSeriesRenderer renderer=buildBarRenderer(colors);  setChartSettings(renderer,"Monthly sales in the last 2 years","Month","Units sold",0.5,12.5,0,24000,Color.GRAY,Color.LTGRAY);  ((XYSeriesRenderer)renderer.getSeriesRendererAt(0)).setDisplayChartValues(true);  ((XYSeriesRenderer)renderer.getSeriesRendererAt(1)).setDisplayChartValues(true);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setXLabelsAlign(Align.LEFT);  renderer.setYLabelsAlign(Align.LEFT);  renderer.setPanEnabled(true,false);  renderer.setZoomRate(1.1f);  renderer.setBarSpacing(0.5f);  return ChartFactory.getBarChartIntent(context,buildBarDataset(titles,values),renderer,Type.STACKED);}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callback) throws JSONException {  if (action.equalsIgnoreCase("enable")) {    setAutoStart(true);    return true;  } else   if (action.equalsIgnoreCase("disable")) {    setAutoStart(false);    return true;  }  return false;}  }
class C{  public void print(Writer out) throws IOException {  if (tag == null)   System.out.println(tag);  out.write(token + "\t" + tag+ "\n");}  }
class C{  private boolean srdfOpRequiresReadWriteChange(String op){  return Arrays.asList(srdfSetReadWriteOps).contains(op);}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.remove(listener);}  }
class C{  public static void registerSpellPiece(String key,Class<? extends SpellPiece> clazz){  spellPieceRegistry.putObject(key,clazz);  pieceMods.put(clazz,Loader.instance().activeModContainer().getName());}  }
class C{  @SuppressWarnings("unchecked") public static DataSource createBoxData(DataSource data){  if (data == null) {    throw new NullPointerException("Cannot extract statistics from null data source.");  }  DataTable stats=new DataTable(Integer.class,Double.class,Double.class,Double.class,Double.class,Double.class);  for (int c=0; c < data.getColumnCount(); c++) {    Column col=data.getColumn(c);    if (!col.isNumeric()) {      continue;    }    stats.add(c + 1,col.getStatistics(Statistics.MEDIAN),col.getStatistics(Statistics.MIN),col.getStatistics(Statistics.QUARTILE_1),col.getStatistics(Statistics.QUARTILE_3),col.getStatistics(Statistics.MAX));  }  return stats;}  }
class C{  public void dump(MovieSet movieSet){  try {    JSONObject jsonObject=new JSONObject(movieSetObjectWriter.writeValueAsString(movieSet));    LOGGER.info("Dumping MovieSet:\n" + jsonObject.toString(4));  } catch (  JsonProcessingException e) {    LOGGER.error("Cannot parse JSON!",e);  }}  }
class C{  public DataAsyncHttpResponseHandler(){  super();}  }
class C{  public static WeblogicEjbJarXml parseWeblogicEjbJarXml(InputStream input) throws IOException, JDOMException {  WeblogicEjbJarXmlIo xio=new WeblogicEjbJarXmlIo();  return (WeblogicEjbJarXml)xio.parseXml(input);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  public void configureCommandStation(){}  }
class C{  void clearMarkers(){synchronized (this) {    typeAheadMarkers.clear();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {    return false;  }  AbstractCategoryItemLabelGenerator that=(AbstractCategoryItemLabelGenerator)obj;  if (!this.labelFormat.equals(that.labelFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.dateFormat,that.dateFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.numberFormat,that.numberFormat)) {    return false;  }  return true;}  }
class C{  private static String extractContentType(String line) throws IOException {  line=line.toLowerCase();  int end=line.indexOf(";");  if (end == -1) {    end=line.length();  }  return line.substring(13,end).trim();}  }
class C{  public void run() throws Exception {  if (m_beans == null) {    throw new Exception("Don't seem to have any beans I can execute.");  }  for (int i=0; i < m_beans.size(); i++) {    BeanInstance tempB=(BeanInstance)m_beans.elementAt(i);    if (m_log != null && m_registerLog) {      if (tempB.getBean() instanceof BeanCommon) {        ((BeanCommon)tempB.getBean()).setLog(m_log);      }    }    if (tempB.getBean() instanceof EnvironmentHandler) {      ((EnvironmentHandler)tempB.getBean()).setEnvironment(m_env);    }  }  int numFlows=1;  if (m_log != null) {    if (m_startSequentially) {      m_log.logMessage("[FlowRunner] launching flow start points sequentially...");    } else {      m_log.logMessage("[FlowRunner] launching flow start points in parallel...");    }  }  TreeMap<Integer,Startable> startables=new TreeMap<Integer,Startable>();  for (int i=0; i < m_beans.size(); i++) {    BeanInstance tempB=(BeanInstance)m_beans.elementAt(i);    boolean launch=true;    if (tempB.getBean() instanceof Startable) {      Startable s=(Startable)tempB.getBean();      String beanName=s.getClass().getName();      String customName=beanName;      if (s instanceof BeanCommon) {        customName=((BeanCommon)s).getCustomName();        beanName=customName;        if (customName.indexOf(':') > 0) {          if (customName.substring(0,customName.indexOf(':')).startsWith("!")) {            launch=false;          }        }      }      if (!m_startSequentially) {        if (s.getStartMessage().charAt(0) != '$') {          if (launch) {            if (m_log != null) {              m_log.logMessage("[FlowRunner] Launching flow " + numFlows + "...");            } else {              System.out.println("[FlowRunner] Launching flow " + numFlows + "...");            }            launchThread(s,numFlows);            numFlows++;          }        } else {          if (m_log != null) {            m_log.logMessage("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");          } else {            System.out.println("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");          }        }      } else {        boolean ok=false;        Integer position=null;        if (s instanceof BeanCommon) {          if (customName.indexOf(':') > 0) {            if (customName.substring(0,customName.indexOf(':')).startsWith("!")) {              launch=false;            } else {              String startPos=customName.substring(0,customName.indexOf(':'));              try {                position=new Integer(startPos);                ok=true;              } catch (              NumberFormatException n) {              }            }          }        }        if (!ok && launch) {          if (startables.size() == 0) {            position=new Integer(0);          } else {            int newPos=startables.lastKey().intValue();            newPos++;            position=new Integer(newPos);          }        }        if (s.getStartMessage().charAt(0) != '$') {          if (launch) {            if (m_log != null) {              m_log.logMessage("[FlowRunner] adding start point " + beanName + " to the execution list (position "+ position+ ")");            } else {              System.out.println("[FlowRunner] adding start point " + beanName + " to the execution list (position "+ position+ ")");            }            startables.put(position,s);          }        } else {          if (m_log != null) {            m_log.logMessage("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");          } else {            System.out.println("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");          }        }      }      if (!launch) {        if (m_log != null) {          m_log.logMessage("[FlowRunner] start point " + beanName + " will not be launched.");        } else {          System.out.println("[FlowRunner] start point " + beanName + " will not be launched.");        }      }    }  }  if (m_startSequentially) {    runSequentially(startables);  }}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(String nativeGuid) throws IOException {  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  List<URI> filesystemUris=new ArrayList<URI>();  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemUris.add(unFileSystemtURI);  }  for (  URI fileSystemURI : filesystemUris) {    filesystemInfo=_dbClient.queryObject(UnManagedFileSystem.class,fileSystemURI);    if (filesystemInfo != null && !filesystemInfo.getInactive()) {      return filesystemInfo;    }  }  return null;}  }
class C{  @NotNull @ObjectiveCName("inviteMemberCommandWithGid:withUid:") public Command<Void> inviteMember(int gid,int uid){  return null;}  }
class C{  private void iterateVar(long delta) throws SolverTimeoutException {  log.debug("Trying increment " + delta + " of "+ intVar.toString());  incrementVar(delta);  double newDist=DistanceEstimator.getDistance(cnstr);  log.debug("newDist: " + newDist + " oldDist: "+ checkpointedDistance);  while (distImpr(newDist)) {    if (isFinished()) {      throw new SolverTimeoutException();    }    checkpointVar(newDist);    if (newDist == 0.0) {      return;    }    delta=2 * delta;    log.debug("Trying increment " + delta + " of "+ intVar);    incrementVar(delta);    newDist=DistanceEstimator.getDistance(cnstr);    log.debug("newDist: " + newDist + " oldDist: "+ checkpointedDistance);  }  log.debug("No improvement on " + intVar);  restoreVar();  log.debug("Final value of this iteration: " + intVar);}  }
class C{  public boolean hasFred(){  return _fred;}  }
class C{  private static void sort1(short[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  short v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  public boolean verifyDrawable(Drawable who){  for (int i=0; i < mHolders.size(); ++i) {    if (who == get(i).getTopLevelDrawable()) {      return true;    }  }  return false;}  }
class C{  public EigenValueDecomposition(Matrix A,double eps){  if (!A.isSquare())   throw new ArithmeticException("");  n=A.cols();  d=new double[n];  e=new double[n];  if (Matrix.isSymmetric(A,eps)) {    Matrix VWork=A.clone();    V=new TransposeView(VWork);    tred2();    tql2();    V=VWork.transpose();    complexResult=false;  } else {    Matrix HWork=A.transpose();    H=new TransposeView(HWork);    Matrix VWork=new DenseMatrix(n,n);    V=new TransposeView(VWork);    orthes();    hqr2();    complexResult=false;    for (int i=0; i < n; i++)     if (e[i] != 0)     complexResult=true;    V=VWork.transpose();  }}  }
class C{  public boolean validate(InputSource in) throws SAXException, IOException {  if (schema == null)   throw new IllegalStateException("cannot validate without schema");  if (validator == null)   validator=schema.createValidator(instanceProperties);  if (xr == null) {    xr=ResolverFactory.createResolver(instanceProperties).createXMLReader();    xr.setErrorHandler(eh);  }  eh.reset();  xr.setContentHandler(validator.getContentHandler());  DTDHandler dh=validator.getDTDHandler();  if (dh != null)   xr.setDTDHandler(dh);  try {    xr.parse(in);    return !eh.getHadErrorOrFatalError();  }  finally {    validator.reset();  }}  }
class C{  @Override public AgentAppFrame createFrame(){  return new RouteFindingAgentFrame();}  }
class C{  public FloatMemberValue(ConstPool cp){  super('F',cp);  setValue(0.0F);}  }
class C{  public Builder bcast(){  this.bcast=true;  return this;}  }
class C{  public static Bitmap rotateBitmap(Bitmap bitmap,int degress){  if (bitmap != null) {    Matrix m=new Matrix();    m.postRotate(degress);    bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);    return bitmap;  }  return bitmap;}  }
class C{  public static Color fromHex(String str){  if (str.startsWith("#")) {    str=str.substring(1);  }  if (str.length() == 3) {    return new Color(17 * Integer.valueOf(String.valueOf(str.charAt(0)),16).intValue(),17 * Integer.valueOf(String.valueOf(str.charAt(1)),16).intValue(),17 * Integer.valueOf(String.valueOf(str.charAt(2)),16).intValue());  } else   if (str.length() == 6) {    return Color.decode("0x" + str);  } else {    throw new IllegalArgumentException("Should be String of 3 or 6 chars length.");  }}  }
class C{  @Override public void simpleScheduleTask(Task task,SimpleTrigger simpleTrigger) throws TException {  try {    schedule(new TaskPojo(task),new SimpleTriggerPojo(simpleTrigger));  } catch (  ServiceException e) {    throw new TException(e);  }}  }
class C{  public List<String> matchPrefix(String prefix){  return matchPrefix(prefix,defaultNumReturnValues);}  }
class C{  public static Mask2D alwaysTrue2D(){  return ALWAYS_TRUE;}  }
class C{  public void write(int b){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).write(b);  flush();}  }
class C{  public void release(){  ReentrantLock lock=Bridge.getLock();  if (lock.isHeldByCurrentThread()) {    tearDown();    lock.unlock();  }}  }
class C{  private static byte[] addHeadByte(byte[] array,byte b){  byte[] ret=new byte[array.length + 1];  ret[0]=b;  System.arraycopy(array,0,ret,1,array.length);  return ret;}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> updateFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to update Foo : {}",foo);  if (foo.getId() == null) {    return createFoo(foo);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("foo",foo.getId().toString())).body(result);}  }
class C{  NetAccessManager(StunStack stunStack){  this(stunStack,null,null);}  }
class C{  public DataPacketExtension(String sessionID,long seq,String data){  if (sessionID == null || "".equals(sessionID)) {    throw new IllegalArgumentException("Session ID must not be null or empty");  }  if (seq < 0 || seq > 65535) {    throw new IllegalArgumentException("Sequence must not be between 0 and 65535");  }  if (data == null) {    throw new IllegalArgumentException("Data must not be null");  }  this.sessionID=sessionID;  this.seq=seq;  this.data=data;}  }
class C{  public Modulo2Equation(final long c,final int numVars){  this.c=c;  this.bitVector=LongArrayBitVector.ofLength(numVars);  this.bits=bitVector.bits();  this.firstVar=Integer.MAX_VALUE;  this.isEmpty=true;}  }
class C{  public UrlRegex(){  super(URL_PATTERN,false,1.0f);}  }
class C{  public void unsetTriggerId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,TRIGGERID_ISSET_ID);}  }
class C{  static void reportFailedPackagePrefix(Environment env,Expression right){  reportFailedPackagePrefix(env,right,false);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.REGULAR_EXPRESSION_FLAGS;}  }
class C{  void pruneChild(){  --parent.nchild;  parent.unique+=unique;  parent.total_red+=total_red;  parent.total_green+=total_green;  parent.total_blue+=total_blue;  parent.child[id]=null;  --cube.nodes;  cube=null;  parent=null;}  }
class C{  public synchronized int indexOf(IAudioProcessor processor){  return processors.indexOf(processor);}  }
class C{  public RoutingAllocation.Result applyStartedShards(ClusterState clusterState,List<? extends ShardRouting> startedShards){  return applyStartedShards(clusterState,startedShards,true);}  }
class C{  public static DoubleDoubleFunction plusMult(double constant){  return new PlusMult(constant);}  }
class C{  public void unlock(int key){  getLock(key).unlock();}  }
class C{  @Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){  int messageCode;  final String js=code;  final String[] args=JSFunction.convertToArray(js);  final String command=args[0];  if (command.startsWith("AF")) {    messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed);  } else {    executeFunctions(js,form,acro);    messageCode=ActionHandler.VALUESCHANGED;  }  if (type == PdfDictionary.F) {    calcualteEvent();    messageCode=ActionHandler.VALUESCHANGED;  }  return messageCode;}  }
class C{  public MockNemProperties(final Properties properties){  super(properties);}  }
class C{  @Override public void clear(){  super.clear();  float[] keys=_set;  int[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  private void addFromMarker(LatLong startPoint){  MapHandler.getMapHandler().addStartMarker(startPoint);}  }
class C{  public static String keyForImage(String imagePath){  String key=null;  try {    MessageDigest messageDigest=MessageDigest.getInstance("md5");    messageDigest.update(imagePath.getBytes());    key=byteToHex(messageDigest.digest());  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return key;}  }
class C{  @Override public void onSortByDate(){  mSorter.sortMoviesByDate(mListMovies);  mAdapter.notifyDataSetChanged();}  }
class C{  public static boolean isExternalStorageWritable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state);}  }
class C{  public UIResource(BEComboBoxUI ui){  super(ui);}  }
class C{  public static String substring(String s,int beginIndex,int endIndex){  if (s == null) {    return s;  }  int realEndIndex=s.length() > 0 ? s.length() - 1 : 0;  if (endIndex > realEndIndex) {    return s.substring(beginIndex);  } else {    return s.substring(beginIndex,endIndex);  }}  }
class C{  final public MutableString replace(final String s){  return replace(0,Integer.MAX_VALUE,s);}  }
class C{  public AnimatableStringValue(AnimationTarget target,String s){  super(target);  string=s;}  }
class C{  public static String join(double[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  double next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  protected Value createColorComponent(LexicalUnit lu) throws DOMException {switch (lu.getLexicalUnitType()) {case LexicalUnit.SAC_INTEGER:    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,lu.getIntegerValue());case LexicalUnit.SAC_REAL:  return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,lu.getFloatValue());case LexicalUnit.SAC_PERCENTAGE:return new FloatValue(CSSPrimitiveValue.CSS_PERCENTAGE,lu.getFloatValue());}throw createInvalidRGBComponentUnitDOMException(lu.getLexicalUnitType());}  }
class C{  private void displayAbout(){  if (null == mLicenseString) {    InputStream inputStream=this.getResources().openRawResource(R.raw.all_licenses);    StringBuilder buf=new StringBuilder();    try {      String str;      BufferedReader in=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));      while ((str=in.readLine()) != null) {        buf.append(str);        buf.append("\n");      }      in.close();    } catch (    Exception e) {    }    mLicenseString=buf.toString();  }  if (null == mLicenseString) {    return;  }  File cachedLicenseFile=new File(getFilesDir(),"Licenses.txt");  Uri uri=ConsoleContentProvider.absolutePathToUri(this,cachedLicenseFile.getAbsolutePath());  if (null == uri) {    return;  }  String message="<div class=\"banner\"> <div class=\"l-page no-clear align-center\"> <h2 class=\"s-heading\">" + getString(R.string.settings_title_config) + "</h2> </div> </div>";  String versionName=Matrix.getInstance(this).getVersion(false);  String SDKVersion=Matrix.getInstance(this).getDefaultSession().getVersion(false);  message+="<strong>matrixConsole version</strong> <br>" + versionName;  message+="<p><strong>SDK version</strong> <br>" + SDKVersion;  message+="<div class=\"banner\"> <div class=\"l-page no-clear align-center\"> <h2 class=\"s-heading\">Third Party Library Licenses</h2> </div> </div>";  message+="<a href=\"" + uri.toString() + "\">Licenses</a>";  Spanned text=Html.fromHtml(message);  mMainAboutDialog=new AlertDialog.Builder(this).setPositiveButton(android.R.string.ok,null).setMessage(text).setIcon(R.drawable.ic_menu_small_matrix_transparent).create();  mMainAboutDialog.show();  ((TextView)mMainAboutDialog.findViewById(android.R.id.message)).setMovementMethod(new MovementCheck());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public Individual newIndividual(final EvolutionState state,int thread){  Individual newind=(Individual)(i_prototype.clone());  newind.fitness=(Fitness)(f_prototype.clone());  newind.evaluated=false;  newind.species=this;  return newind;}  }
class C{  private static Class registerTypeMapping(Class clazz) throws AxisFault {  PageContext pc=ThreadLocalPageContext.get();  RPCServer server=RPCServer.getInstance(pc.getId(),pc.getConfig(),pc.getServletContext());  return registerTypeMapping(server,clazz);}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:15.528 -0500",hash_original_method="A47E632924417AF09C6FD6A35089DC11",hash_generated_method="A47E632924417AF09C6FD6A35089DC11") InterfaceAddress(Inet4Address address,Inet4Address broadcastAddress,Inet4Address mask){  this.address=address;  this.broadcastAddress=broadcastAddress;  this.prefixLength=countPrefixLength(mask);}  }
class C{  public static void writeLines(final Collection<?> lines,final String lineEnding,final OutputStream output,final String encoding) throws IOException {  IOUtils.writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void handleRegisterInstantiator(Message msg,EventID eventId){  String instantiatorClassName=null;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    int noOfParts=msg.getNumberOfParts();    if (isDebugEnabled) {      logger.debug("{}: Received register instantiators message of parts {}",getName(),noOfParts);    }    Assert.assertTrue((noOfParts - 1) % 3 == 0);    for (int i=0; i < noOfParts - 1; i=i + 3) {      instantiatorClassName=(String)CacheServerHelper.deserialize(msg.getPart(i).getSerializedForm());      String instantiatedClassName=(String)CacheServerHelper.deserialize(msg.getPart(i + 1).getSerializedForm());      int id=msg.getPart(i + 2).getInt();      InternalInstantiator.register(instantiatorClassName,instantiatedClassName,id,false,eventId,null);    }    if (PoolImpl.IS_INSTANTIATOR_CALLBACK) {      ClientServerObserver bo=ClientServerObserverHolder.getInstance();      bo.afterReceivingFromServer(eventId);    }  } catch (  Exception e) {    if (isDebugEnabled) {      logger.debug("{}: Caught following exception while attempting to read Instantiator : {}",this,instantiatorClassName,e);    }  }}  }
class C{  private SimpleHashSetEntry<T>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") SimpleHashSetEntry<T>[] newTable=(SimpleHashSetEntry<T>[])new SimpleHashSetEntry[newCapacity];  mTable=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  public String toString(){  String str="";  if (count == COUNT_EXACTLY_ONE) {  } else   if (count == COUNT_NO_LIMIT) {    str+=UIManager.getInstance().localize("html.format.anynumber","any number of");  } else {    str+=UIManager.getInstance().localize("html.format.upto","up to") + " " + count;  }  str+=" ";  String orString=" " + UIManager.getInstance().localize("html.format.or","or") + " ";  String or="";  if ((type & TYPE_ANY) != 0) {    str+="any";  } else {    if ((type & TYPE_LOWERCASE) != 0) {      str+=UIManager.getInstance().localize("html.format.lowercase","lowercase");      or=orString;    }    if ((type & TYPE_UPPERCASE) != 0) {      str+=or + UIManager.getInstance().localize("html.format.uppercase","uppercase");      or=orString;    }    if ((type & TYPE_NUMERIC) != 0) {      str+=or + UIManager.getInstance().localize("html.format.numeric","numeric");      or=orString;    }    if ((type & TYPE_SYMBOL) != 0) {      str+=or + UIManager.getInstance().localize("html.format.symbol","symbol");    }  }  str+=" ";  if ((count != COUNT_EXACTLY_ONE) && (count != 1)) {    str+=UIManager.getInstance().localize("html.format.chars","characters");  } else {    str+=UIManager.getInstance().localize("html.format.char","character");  }  return str;}  }
class C{  public FastIntBuffer append(int element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  public NamedThreadFactory(final String poolID){  id=poolID;}  }
